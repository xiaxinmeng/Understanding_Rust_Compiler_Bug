{"sha": "d07c750cc6c866e77e0c7eafcd71466139882618", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA3Yzc1MGNjNmM4NjZlNzdlMGM3ZWFmY2Q3MTQ2NjEzOTg4MjYxOA==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-03-02T09:51:32Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-18T07:00:12Z"}, "message": "AVX512FP16: Add testcase for scalar FMA instructions.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512fp16-vfmaddXXXsh-1a.c: New test.\n\t* gcc.target/i386/avx512fp16-vfmaddXXXsh-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vfmsubXXXsh-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vfmsubXXXsh-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vfnmaddXXXsh-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vfnmaddXXXsh-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vfnmsubXXXsh-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vfnmsubXXXsh-1b.c: Ditto.", "tree": {"sha": "a251d1352061e5db0fba5c0798b97463001cdd39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a251d1352061e5db0fba5c0798b97463001cdd39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d07c750cc6c866e77e0c7eafcd71466139882618", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d07c750cc6c866e77e0c7eafcd71466139882618", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d07c750cc6c866e77e0c7eafcd71466139882618", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d07c750cc6c866e77e0c7eafcd71466139882618/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c9de0a93e5b3560550e0459f018a5e55a9566e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c9de0a93e5b3560550e0459f018a5e55a9566e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c9de0a93e5b3560550e0459f018a5e55a9566e5"}], "stats": {"total": 475, "additions": 475, "deletions": 0}, "files": [{"sha": "472454d116d73709af87e4d83b040a89951c70d1", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfmaddXXXsh-1a.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d07c750cc6c866e77e0c7eafcd71466139882618/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmaddXXXsh-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d07c750cc6c866e77e0c7eafcd71466139882618/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmaddXXXsh-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmaddXXXsh-1a.c?ref=d07c750cc6c866e77e0c7eafcd71466139882618", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfmadd...sh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd...sh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  2 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd231sh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd...sh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd...sh\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd...sh\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd231sh\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd...sh\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128h a, b, c;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  a = _mm_fmadd_sh (a, b, c);\n+  a = _mm_mask_fmadd_sh (a, m, b, c);\n+  c = _mm_mask3_fmadd_sh (a, b, c, m);\n+  a = _mm_maskz_fmadd_sh (m, a, b, c);\n+  a = _mm_fmadd_round_sh (a, b, c, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  a = _mm_mask_fmadd_round_sh (a, m, b, c, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  c = _mm_mask3_fmadd_round_sh (a, b, c, m, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n+  a = _mm_maskz_fmadd_round_sh (m, a, b, c, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n+}"}, {"sha": "a0eca9cde3ad84159e4d6c0c17cad3995a3a55a1", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfmaddXXXsh-1b.c", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d07c750cc6c866e77e0c7eafcd71466139882618/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmaddXXXsh-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d07c750cc6c866e77e0c7eafcd71466139882618/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmaddXXXsh-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmaddXXXsh-1b.c?ref=d07c750cc6c866e77e0c7eafcd71466139882618", "patch": "@@ -0,0 +1,90 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS 8\n+\n+void NOINLINE\n+emulate_fmadd_sh(V512 * dest, V512 op1, V512 op2,\n+                __mmask8 k, int zero_mask, int mask3)\n+{\n+    V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+    int i;\n+\n+    unpack_ph_2twops(op1, &v1, &v2);\n+    unpack_ph_2twops(op2, &v3, &v4);\n+    unpack_ph_2twops(*dest, &v7, &v8);\n+\n+    if ((k&1) || !k)\n+      v5.f32[0] = v1.f32[0] * v3.f32[0] + v7.f32[0];\n+    else if (zero_mask)\n+      v5.f32[0] = 0;\n+    else\n+      v5.f32[0] = v7.f32[0];\n+   \n+    for (i = 1; i < 8; i++){\n+      if (mask3)\n+        v5.f32[i] = v7.f32[i];\n+      else\n+        v5.f32[i] = v1.f32[i];\n+    }\n+    *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+test_512 (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  init_dest(&res, &exp);\n+  emulate_fmadd_sh(&exp, src1, src2,  0x1, 0, 0);\n+  res.xmmh[0] = _mm_fmadd_sh(src1.xmmh[0], src2.xmmh[0], res.xmmh[0]);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_fmadd_sh\");\n+  init_dest(&res, &exp);\n+  emulate_fmadd_sh(&exp, src1, src2,  0x1, 0, 1);\n+  res.xmmh[0] = _mm_mask3_fmadd_sh(src1.xmmh[0], src2.xmmh[0], res.xmmh[0], \n+                                    0x1);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_mask3_fmadd_sh\");\n+  init_dest(&res, &exp);\n+  emulate_fmadd_sh(&exp, src1, src2,  0x1, 0, 0);\n+  res.xmmh[0] = _mm_mask_fmadd_sh(src1.xmmh[0], 0x1, src2.xmmh[0], \n+                                   res.xmmh[0]);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_mask_fmadd_sh\");\n+  init_dest(&res, &exp);\n+  emulate_fmadd_sh(&exp, src1, src2,  0x3, 1, 0);\n+  res.xmmh[0] = _mm_maskz_fmadd_sh(0x3, src1.xmmh[0], src2.xmmh[0], \n+                                    res.xmmh[0]);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_maskz_fmadd_sh\");\n+\n+  init_dest(&res, &exp);\n+  emulate_fmadd_sh(&exp, src1, src2,  0x1, 0, 0);\n+  res.xmmh[0] = _mm_fmadd_round_sh(src1.xmmh[0], src2.xmmh[0], res.xmmh[0], \n+                                    _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_fmadd_sh\");\n+  init_dest(&res, &exp);\n+  emulate_fmadd_sh(&exp, src1, src2,  0x1, 0, 1);\n+  res.xmmh[0] = _mm_mask3_fmadd_round_sh(src1.xmmh[0], src2.xmmh[0], \n+                                          res.xmmh[0], 0x1, _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_mask3_fmadd_sh\");\n+  init_dest(&res, &exp);\n+  emulate_fmadd_sh(&exp, src1, src2,  0x1, 0, 0);\n+  res.xmmh[0] = _mm_mask_fmadd_round_sh(src1.xmmh[0], 0x1, src2.xmmh[0], \n+                                         res.xmmh[0], _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_mask_fmadd_sh\");\n+  init_dest(&res, &exp);\n+  emulate_fmadd_sh(&exp, src1, src2,  0x3, 1, 0);\n+  res.xmmh[0] = _mm_maskz_fmadd_round_sh(0x3, src1.xmmh[0], src2.xmmh[0], \n+                                          res.xmmh[0], _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_maskz_fmadd_sh\");\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "335b9e21fcfedf3aa4af971d5db414a215aed04a", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfmsubXXXsh-1a.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d07c750cc6c866e77e0c7eafcd71466139882618/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmsubXXXsh-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d07c750cc6c866e77e0c7eafcd71466139882618/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmsubXXXsh-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmsubXXXsh-1a.c?ref=d07c750cc6c866e77e0c7eafcd71466139882618", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfmsub...sh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub...sh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  2 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub231sh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub...sh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub...sh\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub...sh\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub231sh\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub...sh\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128h a, b, c;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  a = _mm_fmsub_sh (a, b, c);\n+  a = _mm_mask_fmsub_sh (a, m, b, c);\n+  c = _mm_mask3_fmsub_sh (a, b, c, m);\n+  a = _mm_maskz_fmsub_sh (m, a, b, c);\n+  a = _mm_fmsub_round_sh (a, b, c, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  a = _mm_mask_fmsub_round_sh (a, m, b, c, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  c = _mm_mask3_fmsub_round_sh (a, b, c, m, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n+  a = _mm_maskz_fmsub_round_sh (m, a, b, c, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n+}"}, {"sha": "a2563fa816e7bab34c3f5c48477a72f60b9dbf5c", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfmsubXXXsh-1b.c", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d07c750cc6c866e77e0c7eafcd71466139882618/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmsubXXXsh-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d07c750cc6c866e77e0c7eafcd71466139882618/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmsubXXXsh-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmsubXXXsh-1b.c?ref=d07c750cc6c866e77e0c7eafcd71466139882618", "patch": "@@ -0,0 +1,89 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS 8\n+\n+void NOINLINE\n+emulate_fmsub_sh(V512 * dest, V512 op1, V512 op2,\n+                __mmask8 k, int zero_mask, int mask3)\n+{\n+    V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+    int i;\n+\n+    unpack_ph_2twops(op1, &v1, &v2);\n+    unpack_ph_2twops(op2, &v3, &v4);\n+    unpack_ph_2twops(*dest, &v7, &v8);\n+\n+    if ((k&1) || !k)\n+      v5.f32[0] = v1.f32[0] * v3.f32[0] - v7.f32[0];\n+    else if (zero_mask)\n+      v5.f32[0] = 0;\n+    else\n+      v5.f32[0] = v7.f32[0];\n+    for (i = 1; i < 8; i++){\n+      if (mask3)\n+        v5.f32[i] = v7.f32[i];\n+      else\n+        v5.f32[i] = v1.f32[i];\n+    }\n+    *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+test_512 (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+  init_dest(&res, &exp);\n+  emulate_fmsub_sh(&exp, src1, src2,  0x1, 0, 0);\n+  res.xmmh[0] = _mm_fmsub_sh(src1.xmmh[0],\n+                             src2.xmmh[0], res.xmmh[0]);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_fmsub_sh\");\n+  init_dest(&res, &exp);\n+  emulate_fmsub_sh(&exp, src1, src2,  0x1, 0, 1);\n+  res.xmmh[0] = _mm_mask3_fmsub_sh(src1.xmmh[0], src2.xmmh[0], res.xmmh[0],\n+                                   0x1);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_mask3_fmsub_sh\");\n+  init_dest(&res, &exp);\n+  emulate_fmsub_sh(&exp, src1, src2,  0x1, 0, 0);\n+  res.xmmh[0] = _mm_mask_fmsub_sh(src1.xmmh[0], 0x1, src2.xmmh[0], res.xmmh[0]);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_mask_fmsub_sh\");\n+  init_dest(&res, &exp);\n+  emulate_fmsub_sh(&exp, src1, src2,  0x3, 1, 0);\n+  res.xmmh[0] = _mm_maskz_fmsub_sh(0x3, src1.xmmh[0], src2.xmmh[0],\n+                                   res.xmmh[0]);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_maskz_fmsub_sh\");\n+\n+  init_dest(&res, &exp);\n+  emulate_fmsub_sh(&exp, src1, src2,  0x1, 0, 0);\n+  res.xmmh[0] = _mm_fmsub_round_sh(src1.xmmh[0], src2.xmmh[0], res.xmmh[0],\n+                                   _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_fmsub_sh\");\n+  init_dest(&res, &exp);\n+  emulate_fmsub_sh(&exp, src1, src2,  0x1, 0, 1);\n+  res.xmmh[0] = _mm_mask3_fmsub_round_sh(src1.xmmh[0], src2.xmmh[0],\n+                                         res.xmmh[0], 0x1, _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_mask3_fmsub_sh\");\n+  init_dest(&res, &exp);\n+  emulate_fmsub_sh(&exp, src1, src2,  0x1, 0, 0);\n+  res.xmmh[0] = _mm_mask_fmsub_round_sh(src1.xmmh[0], 0x1, src2.xmmh[0],\n+                                        res.xmmh[0], _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_mask_fmsub_sh\");\n+  init_dest(&res, &exp);\n+  emulate_fmsub_sh(&exp, src1, src2,  0x3, 1, 0);\n+  res.xmmh[0] = _mm_maskz_fmsub_round_sh(0x3, src1.xmmh[0], src2.xmmh[0],\n+                                         res.xmmh[0], _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_maskz_fmsub_sh\");\n+\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "77106aaeecb0f283f7718ad864e14adf2d6f7eb2", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfnmaddXXXsh-1a.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d07c750cc6c866e77e0c7eafcd71466139882618/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfnmaddXXXsh-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d07c750cc6c866e77e0c7eafcd71466139882618/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfnmaddXXXsh-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfnmaddXXXsh-1a.c?ref=d07c750cc6c866e77e0c7eafcd71466139882618", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...sh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...sh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  2 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd231sh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...sh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...sh\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...sh\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd231sh\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...sh\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128h a, b, c;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  a = _mm_fnmadd_sh (a, b, c);\n+  a = _mm_mask_fnmadd_sh (a, m, b, c);\n+  c = _mm_mask3_fnmadd_sh (a, b, c, m);\n+  a = _mm_maskz_fnmadd_sh (m, a, b, c);\n+  a = _mm_fnmadd_round_sh (a, b, c, _MM_FROUND_TO_NEAREST_INT\n+\t\t\t   | _MM_FROUND_NO_EXC);\n+  a = _mm_mask_fnmadd_round_sh (a, m, b, c, _MM_FROUND_TO_NEG_INF\n+\t\t\t\t| _MM_FROUND_NO_EXC);\n+  c = _mm_mask3_fnmadd_round_sh (a, b, c, m, _MM_FROUND_TO_POS_INF\n+\t\t\t\t | _MM_FROUND_NO_EXC);\n+  a = _mm_maskz_fnmadd_round_sh (m, a, b, c, _MM_FROUND_TO_ZERO\n+\t\t\t\t | _MM_FROUND_NO_EXC);\n+}"}, {"sha": "9200150842464d066dae93491f3033809298652d", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfnmaddXXXsh-1b.c", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d07c750cc6c866e77e0c7eafcd71466139882618/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfnmaddXXXsh-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d07c750cc6c866e77e0c7eafcd71466139882618/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfnmaddXXXsh-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfnmaddXXXsh-1b.c?ref=d07c750cc6c866e77e0c7eafcd71466139882618", "patch": "@@ -0,0 +1,90 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS 8\n+\n+void NOINLINE\n+emulate_fnmadd_sh(V512 * dest, V512 op1, V512 op2,\n+                __mmask8 k, int zero_mask, int mask3)\n+{\n+    V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+    int i;\n+\n+    unpack_ph_2twops(op1, &v1, &v2);\n+    unpack_ph_2twops(op2, &v3, &v4);\n+    unpack_ph_2twops(*dest, &v7, &v8);\n+\n+    if ((k&1) || !k)\n+      v5.f32[0] = -(v1.f32[0] * v3.f32[0]) + v7.f32[0];\n+    else if (zero_mask)\n+      v5.f32[0] = 0;\n+    else\n+      v5.f32[0] = v7.f32[0];\n+   \n+    for (i = 1; i < 8; i++){\n+      if (mask3)\n+        v5.f32[i] = v7.f32[i];\n+      else\n+        v5.f32[i] = v1.f32[i];\n+    }\n+    *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+test_512 (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  init_dest(&res, &exp);\n+  emulate_fnmadd_sh(&exp, src1, src2,  0x1, 0, 0);\n+  res.xmmh[0] = _mm_fnmadd_sh(src1.xmmh[0], src2.xmmh[0], res.xmmh[0]);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_fnmadd_sh\");\n+  init_dest(&res, &exp);\n+  emulate_fnmadd_sh(&exp, src1, src2,  0x1, 0, 1);\n+  res.xmmh[0] = _mm_mask3_fnmadd_sh(src1.xmmh[0], src2.xmmh[0], res.xmmh[0], \n+                                    0x1);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_mask3_fnmadd_sh\");\n+  init_dest(&res, &exp);\n+  emulate_fnmadd_sh(&exp, src1, src2,  0x1, 0, 0);\n+  res.xmmh[0] = _mm_mask_fnmadd_sh(src1.xmmh[0], 0x1, src2.xmmh[0], \n+                                   res.xmmh[0]);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_mask_fnmadd_sh\");\n+  init_dest(&res, &exp);\n+  emulate_fnmadd_sh(&exp, src1, src2,  0x3, 1, 0);\n+  res.xmmh[0] = _mm_maskz_fnmadd_sh(0x3, src1.xmmh[0], src2.xmmh[0], \n+                                    res.xmmh[0]);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_maskz_fnmadd_sh\");\n+\n+  init_dest(&res, &exp);\n+  emulate_fnmadd_sh(&exp, src1, src2,  0x1, 0, 0);\n+  res.xmmh[0] = _mm_fnmadd_round_sh(src1.xmmh[0], src2.xmmh[0], res.xmmh[0], \n+                                    _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_fnmadd_sh\");\n+  init_dest(&res, &exp);\n+  emulate_fnmadd_sh(&exp, src1, src2,  0x1, 0, 1);\n+  res.xmmh[0] = _mm_mask3_fnmadd_round_sh(src1.xmmh[0], src2.xmmh[0], \n+                                          res.xmmh[0], 0x1, _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_mask3_fnmadd_sh\");\n+  init_dest(&res, &exp);\n+  emulate_fnmadd_sh(&exp, src1, src2,  0x1, 0, 0);\n+  res.xmmh[0] = _mm_mask_fnmadd_round_sh(src1.xmmh[0], 0x1, src2.xmmh[0], \n+                                         res.xmmh[0], _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_mask_fnmadd_sh\");\n+  init_dest(&res, &exp);\n+  emulate_fnmadd_sh(&exp, src1, src2,  0x3, 1, 0);\n+  res.xmmh[0] = _mm_maskz_fnmadd_round_sh(0x3, src1.xmmh[0], src2.xmmh[0], \n+                                          res.xmmh[0], _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_maskz_fnmadd_sh\");\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "5d1460838e7d3f871e6a8c9fa1bc62c9eea6d56c", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfnmsubXXXsh-1a.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d07c750cc6c866e77e0c7eafcd71466139882618/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfnmsubXXXsh-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d07c750cc6c866e77e0c7eafcd71466139882618/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfnmsubXXXsh-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfnmsubXXXsh-1a.c?ref=d07c750cc6c866e77e0c7eafcd71466139882618", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfnmsub...sh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub...sh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  2 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub231sh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub...sh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub...sh\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub...sh\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub231sh\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub...sh\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128h a, b, c;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  a = _mm_fnmsub_sh (a, b, c);\n+  a = _mm_mask_fnmsub_sh (a, m, b, c);\n+  c = _mm_mask3_fnmsub_sh (a, b, c, m);\n+  a = _mm_maskz_fnmsub_sh (m, a, b, c);\n+  a = _mm_fnmsub_round_sh (a, b, c, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  a = _mm_mask_fnmsub_round_sh (a, m, b, c, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  c = _mm_mask3_fnmsub_round_sh (a, b, c, m, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n+  a = _mm_maskz_fnmsub_round_sh (m, a, b, c, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n+}"}, {"sha": "7bdb861425fc51e671c8f8014a081388f8ff8937", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfnmsubXXXsh-1b.c", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d07c750cc6c866e77e0c7eafcd71466139882618/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfnmsubXXXsh-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d07c750cc6c866e77e0c7eafcd71466139882618/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfnmsubXXXsh-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfnmsubXXXsh-1b.c?ref=d07c750cc6c866e77e0c7eafcd71466139882618", "patch": "@@ -0,0 +1,90 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS 8\n+\n+void NOINLINE\n+emulate_fnmsub_sh(V512 * dest, V512 op1, V512 op2,\n+                __mmask8 k, int zero_mask, int mask3)\n+{\n+    V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+    int i;\n+\n+    unpack_ph_2twops(op1, &v1, &v2);\n+    unpack_ph_2twops(op2, &v3, &v4);\n+    unpack_ph_2twops(*dest, &v7, &v8);\n+\n+    if ((k&1) || !k)\n+      v5.f32[0] = -(v1.f32[0] * v3.f32[0]) - v7.f32[0];\n+    else if (zero_mask)\n+      v5.f32[0] = 0;\n+    else\n+      v5.f32[0] = v7.f32[0];\n+\n+    for (i = 1; i < 8; i++){\n+      if (mask3)\n+        v5.f32[i] = v7.f32[i];\n+      else\n+        v5.f32[i] = v1.f32[i];\n+    }\n+    *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+test_512 (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  init_dest(&res, &exp);\n+  emulate_fnmsub_sh(&exp, src1, src2,  0x1, 0, 0);\n+  res.xmmh[0] = _mm_fnmsub_sh(src1.xmmh[0], src2.xmmh[0], res.xmmh[0]);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_fnmsub_sh\");\n+  init_dest(&res, &exp);\n+  emulate_fnmsub_sh(&exp, src1, src2,  0x1, 0, 1);\n+  res.xmmh[0] = _mm_mask3_fnmsub_sh(src1.xmmh[0], src2.xmmh[0], res.xmmh[0], \n+                                    0x1);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_mask3_fnmsub_sh\");\n+  init_dest(&res, &exp);\n+  emulate_fnmsub_sh(&exp, src1, src2,  0x1, 0, 0);\n+  res.xmmh[0] = _mm_mask_fnmsub_sh(src1.xmmh[0], 0x1, src2.xmmh[0], \n+                                   res.xmmh[0]);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_mask_fnmsub_sh\");\n+  init_dest(&res, &exp);\n+  emulate_fnmsub_sh(&exp, src1, src2,  0x3, 1, 0);\n+  res.xmmh[0] = _mm_maskz_fnmsub_sh(0x3, src1.xmmh[0], src2.xmmh[0], \n+                                    res.xmmh[0]);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_maskz_fnmsub_sh\");\n+\n+  init_dest(&res, &exp);\n+  emulate_fnmsub_sh(&exp, src1, src2,  0x1, 0, 0);\n+  res.xmmh[0] = _mm_fnmsub_round_sh(src1.xmmh[0], src2.xmmh[0], res.xmmh[0], \n+                                    _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_fnmsub_sh\");\n+  init_dest(&res, &exp);\n+  emulate_fnmsub_sh(&exp, src1, src2,  0x1, 0, 1);\n+  res.xmmh[0] = _mm_mask3_fnmsub_round_sh(src1.xmmh[0], src2.xmmh[0], \n+                                          res.xmmh[0], 0x1, _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_mask3_fnmsub_sh\");\n+  init_dest(&res, &exp);\n+  emulate_fnmsub_sh(&exp, src1, src2,  0x1, 0, 0);\n+  res.xmmh[0] = _mm_mask_fnmsub_round_sh(src1.xmmh[0], 0x1, src2.xmmh[0], \n+                                         res.xmmh[0], _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_mask_fnmsub_sh\");\n+  init_dest(&res, &exp);\n+  emulate_fnmsub_sh(&exp, src1, src2,  0x3, 1, 0);\n+  res.xmmh[0] = _mm_maskz_fnmsub_round_sh(0x3, src1.xmmh[0], src2.xmmh[0], \n+                                          res.xmmh[0], _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_maskz_fnmsub_sh\");\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}]}