{"sha": "19859bd72119708c85cc6976b3547738be6f5b1c", "node_id": "C_kwDOANBUbNoAKDE5ODU5YmQ3MjExOTcwOGM4NWNjNjk3NmIzNTQ3NzM4YmU2ZjViMWM", "commit": {"author": {"name": "Jeff Law", "email": "jeffreyalaw@gmail.com", "date": "2022-10-17T23:42:27Z"}, "committer": {"name": "Jeff Law", "email": "jeffreyalaw@gmail.com", "date": "2022-10-17T23:45:29Z"}, "message": "More infrastructure to avoid bogus RTL on H8.\n\nContinuing the work to add constraints to avoid invalid RTL\nwith autoinc addressing modes.  Specifically this patch adds\nthe memory constraints similar to the pdp11.\n\ngcc/\n\n\t* config/h8300/constraints.md (Za..Zh): New constraints for\n\tautoinc addresses using a specific register.\n\t* config/h8300/h8300.cc (pre_incdec_with_reg): New function.\n\t* config/h8300/h8300-protos.h (pre_incdec_with_reg): Add prototype.", "tree": {"sha": "571eb757c65525742636fb3a2dc54afb975cd855", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/571eb757c65525742636fb3a2dc54afb975cd855"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19859bd72119708c85cc6976b3547738be6f5b1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19859bd72119708c85cc6976b3547738be6f5b1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19859bd72119708c85cc6976b3547738be6f5b1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19859bd72119708c85cc6976b3547738be6f5b1c/comments", "author": {"login": "JeffreyALaw", "id": 14062506, "node_id": "MDQ6VXNlcjE0MDYyNTA2", "avatar_url": "https://avatars.githubusercontent.com/u/14062506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeffreyALaw", "html_url": "https://github.com/JeffreyALaw", "followers_url": "https://api.github.com/users/JeffreyALaw/followers", "following_url": "https://api.github.com/users/JeffreyALaw/following{/other_user}", "gists_url": "https://api.github.com/users/JeffreyALaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeffreyALaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeffreyALaw/subscriptions", "organizations_url": "https://api.github.com/users/JeffreyALaw/orgs", "repos_url": "https://api.github.com/users/JeffreyALaw/repos", "events_url": "https://api.github.com/users/JeffreyALaw/events{/privacy}", "received_events_url": "https://api.github.com/users/JeffreyALaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JeffreyALaw", "id": 14062506, "node_id": "MDQ6VXNlcjE0MDYyNTA2", "avatar_url": "https://avatars.githubusercontent.com/u/14062506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeffreyALaw", "html_url": "https://github.com/JeffreyALaw", "followers_url": "https://api.github.com/users/JeffreyALaw/followers", "following_url": "https://api.github.com/users/JeffreyALaw/following{/other_user}", "gists_url": "https://api.github.com/users/JeffreyALaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeffreyALaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeffreyALaw/subscriptions", "organizations_url": "https://api.github.com/users/JeffreyALaw/orgs", "repos_url": "https://api.github.com/users/JeffreyALaw/repos", "events_url": "https://api.github.com/users/JeffreyALaw/events{/privacy}", "received_events_url": "https://api.github.com/users/JeffreyALaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6e93b7b48195037d6c545104c952b97e05ad381", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6e93b7b48195037d6c545104c952b97e05ad381", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6e93b7b48195037d6c545104c952b97e05ad381"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "7e6681c44921b5d6fa53983a732e1553801fd871", "filename": "gcc/config/h8300/constraints.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19859bd72119708c85cc6976b3547738be6f5b1c/gcc%2Fconfig%2Fh8300%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19859bd72119708c85cc6976b3547738be6f5b1c/gcc%2Fconfig%2Fh8300%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fconstraints.md?ref=19859bd72119708c85cc6976b3547738be6f5b1c", "patch": "@@ -241,3 +241,11 @@\n (define_register_constraint \"Z7\" \"NOT_SP_REGS\"\n   \"@internal\")\n \n+(define_constraint \"Za\" \"@internal\" (match_test \"pre_incdec_with_reg (op, 0)\"))\n+(define_constraint \"Zb\" \"@internal\" (match_test \"pre_incdec_with_reg (op, 1)\"))\n+(define_constraint \"Zc\" \"@internal\" (match_test \"pre_incdec_with_reg (op, 2)\"))\n+(define_constraint \"Zd\" \"@internal\" (match_test \"pre_incdec_with_reg (op, 3)\"))\n+(define_constraint \"Ze\" \"@internal\" (match_test \"pre_incdec_with_reg (op, 4)\"))\n+(define_constraint \"Zf\" \"@internal\" (match_test \"pre_incdec_with_reg (op, 5)\"))\n+(define_constraint \"Zg\" \"@internal\" (match_test \"pre_incdec_with_reg (op, 6)\"))\n+(define_constraint \"Zh\" \"@internal\" (match_test \"pre_incdec_with_reg (op, 7)\"))"}, {"sha": "8c989495c293b9bf9ad32b9bb78dad929c155bf6", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19859bd72119708c85cc6976b3547738be6f5b1c/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19859bd72119708c85cc6976b3547738be6f5b1c/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=19859bd72119708c85cc6976b3547738be6f5b1c", "patch": "@@ -100,6 +100,7 @@ extern int h8300_initial_elimination_offset (int, int);\n extern int h8300_regs_ok_for_stm (int, rtx[]);\n extern int h8300_hard_regno_rename_ok (unsigned int, unsigned int);\n extern bool h8300_move_ok (rtx, rtx);\n+extern bool pre_incdec_with_reg (rtx, int);\n \n struct cpp_reader;\n extern void h8300_pr_interrupt (struct cpp_reader *);"}, {"sha": "ce0702edecb0038b3ca56e0e62b4bfba963ca316", "filename": "gcc/config/h8300/h8300.cc", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19859bd72119708c85cc6976b3547738be6f5b1c/gcc%2Fconfig%2Fh8300%2Fh8300.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19859bd72119708c85cc6976b3547738be6f5b1c/gcc%2Fconfig%2Fh8300%2Fh8300.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.cc?ref=19859bd72119708c85cc6976b3547738be6f5b1c", "patch": "@@ -5531,6 +5531,32 @@ h8300_ok_for_sibcall_p (tree fndecl, tree)\n \n   return 1;\n }\n+\n+/* Return TRUE if OP is a PRE_INC or PRE_DEC\n+   instruction using REG, FALSE otherwise.  */\n+\n+bool\n+pre_incdec_with_reg (rtx op, int reg)\n+{\n+  /* OP must be a MEM.  */\n+  if (GET_CODE (op) != MEM)\n+    return false;\n+\n+  /* The address must be a PRE_INC or PRE_DEC.  */\n+  op = XEXP (op, 0);\n+  if (GET_CODE (op) != PRE_DEC && GET_CODE (op) != PRE_INC)\n+    return false;\n+\n+  /* It must be a register that is being incremented\n+     or decremented.  */\n+  op = XEXP (op, 0);\n+  if (!REG_P (op))\n+    return false;\n+\n+  /* Finally, check that the register number matches.  */\n+  return REGNO (op) == reg;\n+}\n+\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ATTRIBUTE_TABLE"}]}