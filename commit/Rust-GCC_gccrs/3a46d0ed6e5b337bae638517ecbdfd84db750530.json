{"sha": "3a46d0ed6e5b337bae638517ecbdfd84db750530", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2E0NmQwZWQ2ZTViMzM3YmFlNjM4NTE3ZWNiZGZkODRkYjc1MDUzMA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-01-11T10:15:46Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-05-05T08:19:00Z"}, "message": "[Ada] Tweak implementation of System.Double_Real.Split\n\ngcc/ada/\n\n\t* libgnat/s-dorepr.adb (Split): Declare a per-size temporary.\n\tAdd pragma Annotate.", "tree": {"sha": "cc22ebe982616bd9faaa622a27b42c3d1f3d86e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc22ebe982616bd9faaa622a27b42c3d1f3d86e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a46d0ed6e5b337bae638517ecbdfd84db750530", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a46d0ed6e5b337bae638517ecbdfd84db750530", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a46d0ed6e5b337bae638517ecbdfd84db750530", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a46d0ed6e5b337bae638517ecbdfd84db750530/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c3e11c029f63e8d060446986d8b4ce41a9202b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c3e11c029f63e8d060446986d8b4ce41a9202b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c3e11c029f63e8d060446986d8b4ce41a9202b6"}], "stats": {"total": 70, "additions": 44, "deletions": 26}, "files": [{"sha": "9f6df923a463fa4cdf72d4caeff49c318fee2582", "filename": "gcc/ada/libgnat/s-dorepr.adb", "status": "modified", "additions": 44, "deletions": 26, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a46d0ed6e5b337bae638517ecbdfd84db750530/gcc%2Fada%2Flibgnat%2Fs-dorepr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a46d0ed6e5b337bae638517ecbdfd84db750530/gcc%2Fada%2Flibgnat%2Fs-dorepr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-dorepr.adb?ref=3a46d0ed6e5b337bae638517ecbdfd84db750530", "patch": "@@ -38,7 +38,7 @@ separate (System.Double_Real)\n package body Product is\n \n    procedure Split (N : Num; Hi : out Num; Lo : out Num);\n-   --  Compute high word and low word of N\n+   --  Compute high part and low part of N\n \n    -----------\n    -- Split --\n@@ -52,44 +52,62 @@ package body Product is\n    --  See the recent paper by Claude-Pierre Jeannerod, Jean-Michel Muller\n    --  and Paul Zimmermann: On various ways to split a floating-point number\n    --  ARITH 2018 - 25th IEEE Symposium on Computer Arithmetic, Jun 2018,\n-   --  Amherst (MA), United States. pp.53-60.\n+   --  Amherst (MA), United States, pages 53-60.\n \n    procedure Split (N : Num; Hi : out Num; Lo : out Num) is\n-      M : constant Positive := Num'Machine_Mantissa;\n-\n-      Rep32 : Interfaces.Unsigned_32;\n-      Rep64 : Interfaces.Unsigned_64;\n-      Rep80 : array (1 .. 2) of Interfaces.Unsigned_64;\n-\n       X : Num;\n-      for X'Address use (case M is when 24 => Rep32'Address,\n-                                   when 53 => Rep64'Address,\n-                                   when 64 => Rep80'Address,\n-                                   when others => raise Program_Error);\n \n    begin\n-      X := N;\n+      --  Spill the input into the appropriate (maybe larger) bit container,\n+      --  mask out the low bits and reload the modified value.\n \n-      case M is\n+      case Num'Machine_Mantissa is\n          when 24 =>\n-            --  Mask out the low 12 bits\n+            declare\n+               Rep32 : aliased Interfaces.Unsigned_32;\n+               Temp  : Num := N with Address => Rep32'Address;\n+               pragma Annotate (CodePeer, Modified, Rep32);\n+\n+            begin\n+               --  Mask out the low 12 bits\n \n-            Rep32 := Rep32 and 16#FFFFF000#;\n+               Rep32 := Rep32 and 16#FFFFF000#;\n+\n+               X := Temp;\n+            end;\n \n          when 53 =>\n-            --  Mask out the low 27 bits\n+            declare\n+               Rep64 : aliased Interfaces.Unsigned_64;\n+               Temp  : Num := N with Address => Rep64'Address;\n+               pragma Annotate (CodePeer, Modified, Rep64);\n+\n+            begin\n+               --  Mask out the low 27 bits\n+\n+               Rep64 := Rep64 and 16#FFFFFFFFF8000000#;\n \n-            Rep64 := Rep64 and 16#FFFFFFFFF8000000#;\n+               X := Temp;\n+            end;\n \n          when 64 =>\n-            --  Mask out the low 32 bits\n-\n-            if System.Default_Bit_Order = High_Order_First then\n-               Rep80 (1) := Rep80 (1) and 16#FFFFFFFFFFFF0000#;\n-               Rep80 (2) := Rep80 (2) and 16#0000FFFFFFFFFFFF#;\n-            else\n-               Rep80 (1) := Rep80 (1) and 16#FFFFFFFF00000000#;\n-            end if;\n+            declare\n+               Rep80 : aliased array (1 .. 2) of Interfaces.Unsigned_64;\n+               Temp  : Num := N with Address => Rep80'Address;\n+               pragma Annotate (CodePeer, Modified, Rep80);\n+\n+            begin\n+               --  Mask out the low 32 bits\n+\n+               if System.Default_Bit_Order = High_Order_First then\n+                  Rep80 (1) := Rep80 (1) and 16#FFFFFFFFFFFF0000#;\n+                  Rep80 (2) := Rep80 (2) and 16#0000FFFFFFFFFFFF#;\n+               else\n+                  Rep80 (1) := Rep80 (1) and 16#FFFFFFFF00000000#;\n+               end if;\n+\n+               X := Temp;\n+            end;\n \n          when others =>\n             raise Program_Error;"}]}