{"sha": "479781c51360fe41b9e0f4222157f8d12f4db43f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc5NzgxYzUxMzYwZmU0MWI5ZTBmNDIyMjE1N2Y4ZDEyZjRkYjQzZg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@markmitchell.com", "date": "1998-08-28T17:36:09Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1998-08-28T17:36:09Z"}, "message": "* lex.c (do_identifier): Fix thinko in previous change.\n\nFrom-SVN: r22064", "tree": {"sha": "7516bd060c71ba09c05db7cdb4c171323e8055f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7516bd060c71ba09c05db7cdb4c171323e8055f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/479781c51360fe41b9e0f4222157f8d12f4db43f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/479781c51360fe41b9e0f4222157f8d12f4db43f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/479781c51360fe41b9e0f4222157f8d12f4db43f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/479781c51360fe41b9e0f4222157f8d12f4db43f/comments", "author": null, "committer": null, "parents": [{"sha": "818c8883753d6c2224145418f9f1f0764c999e2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/818c8883753d6c2224145418f9f1f0764c999e2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/818c8883753d6c2224145418f9f1f0764c999e2a"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "bc93b87751e60c5010344777240034b1e424973a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/479781c51360fe41b9e0f4222157f8d12f4db43f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/479781c51360fe41b9e0f4222157f8d12f4db43f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=479781c51360fe41b9e0f4222157f8d12f4db43f", "patch": "@@ -1,3 +1,7 @@\n+1998-08-28  Mark Mitchell  <mark@markmitchell.com>\n+\n+\t* lex.c (do_identifier): Fix thinko in previous change.\n+\n 1998-08-28  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* search.c (dfs_search, binfo_for_vtable, dfs_bfv_helper): New fns.\n@@ -20,12 +24,13 @@\n \t* decl.c (finish_enum): Don't set the TREE_TYPE for the\n \tenumeration constant values if we're processing_template_decls.\n \tDon't set the type for the CONST_DECLs either; that's done in\n-\tbuild_enumerator. (\n+\tbuild_enumerator. \n \t(build_enumerator): Take the enumeration type as a\n-\tparamter. \n+\tparameter. \n \t* lex.c (do_identifier): Don't resolve enumeration constants while\n \tprocessing template declarations, even if they happen to be\n \tTEMPLATE_PARM_INDEXs. \n+\n \t* parse.y (current_enum_type): New variable.\n \t(primary): Don't allow statement-expression in local classes just\n \tas we don't in global classes."}, {"sha": "859a6bea2afb72042bf0d11340048a6286c39858", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/479781c51360fe41b9e0f4222157f8d12f4db43f/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/479781c51360fe41b9e0f4222157f8d12f4db43f/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=479781c51360fe41b9e0f4222157f8d12f4db43f", "patch": "@@ -2985,11 +2985,14 @@ do_identifier (token, parsing, args)\n \t  /* protected is OK, since it's an enum of `this'.  */\n \t}\n       if (!processing_template_decl\n-\t  /* Don't resolve enumeration constants while processing\n-\t     template declarations, unless they're for global\n-\t     enumerations and therefore cannot involve template\n-\t     parameters.  */\n-\t  || (!DECL_CONTEXT (id)\n+\t  /* Really, if we're processing a template, we just want to\n+\t     resolve template parameters, and not enumeration\n+\t     constants.  But, they're hard to tell apart.  (Note that\n+\t     a non-type template parameter may have enumeration type.)\n+\t     Fortunately, there's no harm in resolving *global*\n+\t     enumeration constants, since they can't depend on\n+\t     template parameters.  */\n+\t  || (TREE_CODE (CP_DECL_CONTEXT (id)) == NAMESPACE_DECL\n \t      && TREE_CODE (DECL_INITIAL (id)) == TEMPLATE_PARM_INDEX))\n \tid = DECL_INITIAL (id);\n     }"}]}