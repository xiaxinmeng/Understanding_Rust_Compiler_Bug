{"sha": "e2b5ad1ea6fac601ca5c65d79f4be39c48d9dcab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTJiNWFkMWVhNmZhYzYwMWNhNWM2NWQ3OWY0YmUzOWM0OGQ5ZGNhYg==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2012-11-27T09:55:33Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2012-11-27T09:55:33Z"}, "message": "arm.c (thumb1_reorg): New function.\n\n\n\t* config/arm/arm.c (thumb1_reorg): New function.\n\t(arm_reorg): Call thumb1_reorg.\n\t(thumb1_final_prescan_insn): Record src operand in thumb1_cc_op0.\n\t* config/arm/arm.md : Remove peephole2 patterns which rewrite move\n\tinto subtract of ZERO.\n\nFrom-SVN: r193841", "tree": {"sha": "336e22126b79e69e08fd785256740de270e592a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/336e22126b79e69e08fd785256740de270e592a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2b5ad1ea6fac601ca5c65d79f4be39c48d9dcab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2b5ad1ea6fac601ca5c65d79f4be39c48d9dcab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2b5ad1ea6fac601ca5c65d79f4be39c48d9dcab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2b5ad1ea6fac601ca5c65d79f4be39c48d9dcab/comments", "author": null, "committer": null, "parents": [{"sha": "77d19c725f827218975859ab7d3a680904075216", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77d19c725f827218975859ab7d3a680904075216", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77d19c725f827218975859ab7d3a680904075216"}], "stats": {"total": 111, "additions": 73, "deletions": 38}, "files": [{"sha": "29efeebeca2ba6d7466b880da64dc2b8d82e177a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2b5ad1ea6fac601ca5c65d79f4be39c48d9dcab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2b5ad1ea6fac601ca5c65d79f4be39c48d9dcab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e2b5ad1ea6fac601ca5c65d79f4be39c48d9dcab", "patch": "@@ -1,3 +1,11 @@\n+2012-11-27  Bin Cheng  <bin.cheng@arm.com>\n+\n+\t* config/arm/arm.c (thumb1_reorg): New function.\n+\t(arm_reorg): Call thumb1_reorg.\n+\t(thumb1_final_prescan_insn): Record src operand in thumb1_cc_op0.\n+\t* config/arm/arm.md : Remove peephole2 patterns which rewrite move\n+\tinto subtract of ZERO.\n+\n 2012-11-27  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/55331"}, {"sha": "286a6c5976b7bebaed8054d84abc47e8315bf380", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 65, "deletions": 1, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2b5ad1ea6fac601ca5c65d79f4be39c48d9dcab/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2b5ad1ea6fac601ca5c65d79f4be39c48d9dcab/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=e2b5ad1ea6fac601ca5c65d79f4be39c48d9dcab", "patch": "@@ -13396,6 +13396,62 @@ note_invalid_constants (rtx insn, HOST_WIDE_INT address, int do_pushes)\n   return;\n }\n \n+/* Rewrite move insn into subtract of 0 if the condition codes will\n+   be useful in next conditional jump insn.  */\n+\n+static void\n+thumb1_reorg (void)\n+{\n+  basic_block bb;\n+\n+  FOR_EACH_BB (bb)\n+    {\n+      rtx set, dest, src;\n+      rtx pat, op0;\n+      rtx prev, insn = BB_END (bb);\n+\n+      while (insn != BB_HEAD (bb) && DEBUG_INSN_P (insn))\n+\tinsn = PREV_INSN (insn);\n+\n+      /* Find the last cbranchsi4_insn in basic block BB.  */\n+      if (INSN_CODE (insn) != CODE_FOR_cbranchsi4_insn)\n+\tcontinue;\n+\n+      /* Find the first non-note insn before INSN in basic block BB.  */\n+      gcc_assert (insn != BB_HEAD (bb));\n+      prev = PREV_INSN (insn);\n+      while (prev != BB_HEAD (bb) && (NOTE_P (prev) || DEBUG_INSN_P (prev)))\n+\tprev = PREV_INSN (prev);\n+\n+      set = single_set (prev);\n+      if (!set)\n+\tcontinue;\n+\n+      dest = SET_DEST (set);\n+      src = SET_SRC (set);\n+      if (!low_register_operand (dest, SImode)\n+\t  || !low_register_operand (src, SImode))\n+\tcontinue;\n+\n+      pat = PATTERN (insn);\n+      op0 = XEXP (XEXP (SET_SRC (pat), 0), 0);\n+      /* Rewrite move into subtract of 0 if its operand is compared with ZERO\n+\t in INSN. Don't need to check dest since cprop_hardreg pass propagates\n+\t src into INSN.  */\n+      if (REGNO (op0) == REGNO (src))\n+\t{\n+\t  dest = copy_rtx (dest);\n+\t  src = copy_rtx (src);\n+\t  src = gen_rtx_MINUS (SImode, src, const0_rtx);\n+\t  PATTERN (prev) = gen_rtx_SET (VOIDmode, dest, src);\n+\t  INSN_CODE (prev) = -1;\n+\t  /* Set test register in INSN to dest.  */\n+\t  XEXP (XEXP (SET_SRC (pat), 0), 0) = copy_rtx (dest);\n+\t  INSN_CODE (insn) = -1;\n+\t}\n+    }\n+}\n+\n /* Convert instructions to their cc-clobbering variant if possible, since\n    that allows us to use smaller encodings.  */\n \n@@ -13592,7 +13648,9 @@ arm_reorg (void)\n   HOST_WIDE_INT address = 0;\n   Mfix * fix;\n \n-  if (TARGET_THUMB2)\n+  if (TARGET_THUMB1)\n+    thumb1_reorg ();\n+  else if (TARGET_THUMB2)\n     thumb2_reorg ();\n \n   /* Ensure all insns that must be split have been split at this point.\n@@ -22155,6 +22213,12 @@ thumb1_final_prescan_insn (rtx insn)\n \t      if (src1 == const0_rtx)\n \t\tcfun->machine->thumb1_cc_mode = CCmode;\n \t    }\n+\t  else if (REG_P (SET_DEST (set)) && REG_P (SET_SRC (set)))\n+\t    {\n+\t      /* Record the src register operand instead of dest because\n+\t\t cprop_hardreg pass propagates src.  */\n+\t      cfun->machine->thumb1_cc_op0 = SET_SRC (set);\n+\t    }\n \t}\n       else if (conds != CONDS_NOCOND)\n \tcfun->machine->thumb1_cc_insn = NULL_RTX;"}, {"sha": "ac507ef378b1965e675a3c1c4da93eab5d5bd73b", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2b5ad1ea6fac601ca5c65d79f4be39c48d9dcab/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2b5ad1ea6fac601ca5c65d79f4be39c48d9dcab/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=e2b5ad1ea6fac601ca5c65d79f4be39c48d9dcab", "patch": "@@ -7166,43 +7166,6 @@\n \t\t(const_int 8))))]\n )\n \n-;; Two peepholes to generate subtract of 0 instead of a move if the\n-;; condition codes will be useful.\n-(define_peephole2\n-  [(set (match_operand:SI 0 \"low_register_operand\" \"\")\n-\t(match_operand:SI 1 \"low_register_operand\" \"\"))\n-   (set (pc)\n-\t(if_then_else (match_operator 2 \"arm_comparison_operator\"\n-\t\t       [(match_dup 1) (const_int 0)])\n-\t\t      (label_ref (match_operand 3 \"\" \"\"))\n-\t\t      (pc)))]\n-  \"TARGET_THUMB1\"\n-  [(set (match_dup 0) (minus:SI (match_dup 1) (const_int 0)))\n-   (set (pc)\n-\t(if_then_else (match_op_dup 2 [(match_dup 0) (const_int 0)])\n-\t\t      (label_ref (match_dup 3))\n-\t\t      (pc)))]\n-  \"\")\n-\n-;; Sigh!  This variant shouldn't be needed, but combine often fails to\n-;; merge cases like this because the op1 is a hard register in\n-;; arm_class_likely_spilled_p.\n-(define_peephole2\n-  [(set (match_operand:SI 0 \"low_register_operand\" \"\")\n-\t(match_operand:SI 1 \"low_register_operand\" \"\"))\n-   (set (pc)\n-\t(if_then_else (match_operator 2 \"arm_comparison_operator\"\n-\t\t       [(match_dup 0) (const_int 0)])\n-\t\t      (label_ref (match_operand 3 \"\" \"\"))\n-\t\t      (pc)))]\n-  \"TARGET_THUMB1\"\n-  [(set (match_dup 0) (minus:SI (match_dup 1) (const_int 0)))\n-   (set (pc)\n-\t(if_then_else (match_op_dup 2 [(match_dup 0) (const_int 0)])\n-\t\t      (label_ref (match_dup 3))\n-\t\t      (pc)))]\n-  \"\")\n-\n (define_insn \"*negated_cbranchsi4\"\n   [(set (pc)\n \t(if_then_else"}]}