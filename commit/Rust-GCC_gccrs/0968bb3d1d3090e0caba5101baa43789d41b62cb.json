{"sha": "0968bb3d1d3090e0caba5101baa43789d41b62cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk2OGJiM2QxZDMwOTBlMGNhYmE1MTAxYmFhNDM3ODlkNDFiNjJjYg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2007-05-18T02:04:02Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2007-05-18T02:04:02Z"}, "message": "toplev.c (print_version): Output GMP/MPFR version info.\n\n\t* toplev.c (print_version): Output GMP/MPFR version info.\n\nFrom-SVN: r124822", "tree": {"sha": "b23ee67b88e79b912bb3c6a10b024e8085ecb25c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b23ee67b88e79b912bb3c6a10b024e8085ecb25c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0968bb3d1d3090e0caba5101baa43789d41b62cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0968bb3d1d3090e0caba5101baa43789d41b62cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0968bb3d1d3090e0caba5101baa43789d41b62cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0968bb3d1d3090e0caba5101baa43789d41b62cb/comments", "author": null, "committer": null, "parents": [{"sha": "bf460eec6facce43acc1bb89fd3fa3c271e3dd22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf460eec6facce43acc1bb89fd3fa3c271e3dd22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf460eec6facce43acc1bb89fd3fa3c271e3dd22"}], "stats": {"total": 34, "additions": 32, "deletions": 2}, "files": [{"sha": "7a7dcd1abd0c28316462d5e5b46330df937a6f78", "filename": "gcc/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0968bb3d1d3090e0caba5101baa43789d41b62cb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0968bb3d1d3090e0caba5101baa43789d41b62cb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0968bb3d1d3090e0caba5101baa43789d41b62cb", "patch": "@@ -1,5 +1,7 @@\n 2007-05-17  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n+\t* toplev.c (print_version): Output GMP/MPFR version info.\n+\n \t* builtins.c (CASE_MATHFN_REENT): New macro.\n \t(mathfn_built_in): Use it.\n \t* builtins.def (BUILT_IN_GAMMA_R, BUILT_IN_GAMMAF_R,"}, {"sha": "8d4a328cd8a6687205654091903c37a7847b170e", "filename": "gcc/toplev.c", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0968bb3d1d3090e0caba5101baa43789d41b62cb/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0968bb3d1d3090e0caba5101baa43789d41b62cb/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=0968bb3d1d3090e0caba5101baa43789d41b62cb", "patch": "@@ -1180,12 +1180,16 @@ print_version (FILE *file, const char *indent)\n {\n   static const char fmt1[] =\n #ifdef __GNUC__\n-    N_(\"%s%s%s version %s (%s)\\n%s\\tcompiled by GNU C version %s.\\n\")\n+    N_(\"%s%s%s version %s (%s)\\n%s\\tcompiled by GNU C version %s, \")\n #else\n-    N_(\"%s%s%s version %s (%s) compiled by CC.\\n\")\n+    N_(\"%s%s%s version %s (%s) compiled by CC, \")\n #endif\n     ;\n   static const char fmt2[] =\n+    N_(\"GMP version %s, MPFR version %s.\\n\");\n+  static const char fmt3[] =\n+    N_(\"warning: %s header version %s differs from library version %s.\\n\");\n+  static const char fmt4[] =\n     N_(\"%s%sGGC heuristics: --param ggc-min-expand=%d --param ggc-min-heapsize=%d\\n\");\n #ifndef __VERSION__\n #define __VERSION__ \"[?]\"\n@@ -1195,8 +1199,32 @@ print_version (FILE *file, const char *indent)\n \t   indent, *indent != 0 ? \" \" : \"\",\n \t   lang_hooks.name, version_string, TARGET_NAME,\n \t   indent, __VERSION__);\n+\n+  /* We need to stringify the GMP macro values.  Ugh, gmp_version has\n+     two string formats, \"i.j.k\" and \"i.j\" when k is zero.  */\n+#define GCC_GMP_STRINGIFY_VERSION3(X) #X\n+#define GCC_GMP_STRINGIFY_VERSION2(X) GCC_GMP_STRINGIFY_VERSION3(X)\n+#if __GNU_MP_VERSION_PATCHLEVEL == 0\n+#define GCC_GMP_STRINGIFY_VERSION GCC_GMP_STRINGIFY_VERSION2(__GNU_MP_VERSION) \".\" \\\n+  GCC_GMP_STRINGIFY_VERSION2(__GNU_MP_VERSION_MINOR)\n+#else\n+#define GCC_GMP_STRINGIFY_VERSION GCC_GMP_STRINGIFY_VERSION2(__GNU_MP_VERSION) \".\" \\\n+  GCC_GMP_STRINGIFY_VERSION2(__GNU_MP_VERSION_MINOR) \".\" \\\n+  GCC_GMP_STRINGIFY_VERSION2(__GNU_MP_VERSION_PATCHLEVEL)\n+#endif\n   fprintf (file,\n \t   file == stderr ? _(fmt2) : fmt2,\n+\t   GCC_GMP_STRINGIFY_VERSION, MPFR_VERSION_STRING);\n+  if (strcmp (GCC_GMP_STRINGIFY_VERSION, gmp_version))\n+    fprintf (file,\n+\t     file == stderr ? _(fmt3) : fmt3,\n+\t     \"GMP\", GCC_GMP_STRINGIFY_VERSION, gmp_version);\n+  if (strcmp (MPFR_VERSION_STRING, mpfr_get_version ()))\n+    fprintf (file,\n+\t     file == stderr ? _(fmt3) : fmt3,\n+\t     \"MPFR\", MPFR_VERSION_STRING, mpfr_get_version ());\n+  fprintf (file,\n+\t   file == stderr ? _(fmt4) : fmt4,\n \t   indent, *indent != 0 ? \" \" : \"\",\n \t   PARAM_VALUE (GGC_MIN_EXPAND), PARAM_VALUE (GGC_MIN_HEAPSIZE));\n }"}]}