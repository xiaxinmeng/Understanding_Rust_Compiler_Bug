{"sha": "d30d6e76fd650dff04d00082cb1a0e9865545a39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDMwZDZlNzZmZDY1MGRmZjA0ZDAwMDgyY2IxYTBlOTg2NTU0NWEzOQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-03-16T22:14:08Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-03-16T22:14:08Z"}, "message": "libgcc2.h: Move prototypes above macros with the same name.\n\n\t* libgcc2.h: Move prototypes above macros with the same name.\n\tWrap some function prototypes in the conditional which indicates\n\twhether they are supported, i.e. \"BITS_PER_UNIT == 8\".\n\nFrom-SVN: r32594", "tree": {"sha": "37bba079b89d9cc1eb5802ec1d94d87e4185c1a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37bba079b89d9cc1eb5802ec1d94d87e4185c1a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d30d6e76fd650dff04d00082cb1a0e9865545a39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d30d6e76fd650dff04d00082cb1a0e9865545a39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d30d6e76fd650dff04d00082cb1a0e9865545a39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d30d6e76fd650dff04d00082cb1a0e9865545a39/comments", "author": null, "committer": null, "parents": [{"sha": "64aa33dd9c7353a00780a6c6a45c4f835adc2996", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64aa33dd9c7353a00780a6c6a45c4f835adc2996", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64aa33dd9c7353a00780a6c6a45c4f835adc2996"}], "stats": {"total": 111, "additions": 60, "deletions": 51}, "files": [{"sha": "ddff40615ef5cd7b6ce111712a360ab1f3e1a4d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d30d6e76fd650dff04d00082cb1a0e9865545a39/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d30d6e76fd650dff04d00082cb1a0e9865545a39/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d30d6e76fd650dff04d00082cb1a0e9865545a39", "patch": "@@ -1,3 +1,9 @@\n+2000-03-16  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* libgcc2.h: Move prototypes above macros with the same name.\n+\tWrap some function prototypes in the conditional which indicates\n+\twhether they are supported, i.e. \"BITS_PER_UNIT == 8\".\n+\n 2000-03-16  Richard Henderson  <rth@cygnus.com>\n \n \t* calls.c: Revert last two changes."}, {"sha": "ad585815c546cb72b4640946079b7bb5ffebbaae", "filename": "gcc/libgcc2.h", "status": "modified", "additions": 54, "deletions": 51, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d30d6e76fd650dff04d00082cb1a0e9865545a39/gcc%2Flibgcc2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d30d6e76fd650dff04d00082cb1a0e9865545a39/gcc%2Flibgcc2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.h?ref=d30d6e76fd650dff04d00082cb1a0e9865545a39", "patch": "@@ -181,6 +181,60 @@ typedef int word_type __attribute__ ((mode (__word__)));\n #define __NDW(a,b)\t__ ## a ## hi ## b\n #endif\n \n+extern DWtype __muldi3 (DWtype, DWtype);\n+extern DWtype __divdi3 (DWtype, DWtype);\n+extern UDWtype __udivdi3 (UDWtype, UDWtype);\n+extern UDWtype __umoddi3 (UDWtype, UDWtype);\n+extern DWtype __moddi3 (DWtype, DWtype);\n+/* __udivmoddi4 is static inline when building other libgcc2 portions.  */\n+#if (!defined (L_udivdi3) && !defined (L_divdi3) && \\\n+     !defined (L_umoddi3) && !defined (L_moddi3))\n+extern UDWtype __udivmoddi4 (UDWtype, UDWtype, UDWtype *);\n+#endif\n+\n+/* __negdi2 is static inline when building other libgcc2 portions.  */\n+#if !defined(L_divdi3) && !defined(L_moddi3)\n+extern DWtype __negdi2 (DWtype);\n+#endif\n+\n+extern DWtype __lshrdi3 (DWtype, word_type);\n+extern DWtype __ashldi3 (DWtype, word_type);\n+extern DWtype __ashrdi3 (DWtype, word_type);\n+extern DWtype __ffsdi2 (DWtype);\n+\n+/* __udiv_w_sdiv is static inline when building other libgcc2 portions.  */\n+#if (!defined(L_udivdi3) && !defined(L_divdi3) && \\\n+     !defined(L_umoddi3) && !defined(L_moddi3))\n+extern UWtype __udiv_w_sdiv (UWtype *, UWtype, UWtype, UWtype);\n+#endif\n+\n+extern word_type __cmpdi2 (DWtype, DWtype);\n+extern word_type __ucmpdi2 (DWtype, DWtype);\n+\n+#if BITS_PER_UNIT == 8\n+extern DWtype __fixdfdi (DFtype);\n+extern DWtype __fixsfdi (SFtype);\n+extern DFtype __floatdidf (DWtype);\n+extern SFtype __floatdisf (DWtype);\n+extern UWtype __fixunsdfsi (DFtype);\n+extern UWtype __fixunssfsi (SFtype);\n+extern DWtype __fixunsdfdi (DFtype);\n+extern DWtype __fixunssfdi (SFtype);\n+\n+#if LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 96\n+extern DWtype __fixxfdi (XFtype);\n+extern DWtype __fixunsxfdi (XFtype);\n+extern XFtype __floatdixf (DWtype);\n+extern UWtype __fixunsxfsi (XFtype);\n+#endif\n+\n+#if LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 128\n+extern DWtype __fixunstfdi (TFtype);\n+extern DWtype __fixtfdi (TFtype);\n+extern TFtype __floatditf (DWtype);\n+#endif\n+#endif /* BITS_PER_UNIT == 8 */\n+\n #define __muldi3\t__NDW(mul,3)\n #define __divdi3\t__NDW(div,3)\n #define __udivdi3\t__NDW(udiv,3)\n@@ -238,55 +292,4 @@ typedef union\n \n #endif /* udiv or mul */\n \n-extern DWtype __muldi3 (DWtype, DWtype);\n-extern DWtype __divdi3 (DWtype, DWtype);\n-extern UDWtype __udivdi3 (UDWtype, UDWtype);\n-extern UDWtype __umoddi3 (UDWtype, UDWtype);\n-extern DWtype __moddi3 (DWtype, DWtype);\n-/* __udivmoddi4 is static inline when building other libgcc2 portions.  */\n-#if (!defined (L_udivdi3) && !defined (L_divdi3) && \\\n-     !defined (L_umoddi3) && !defined (L_moddi3))\n-extern UDWtype __udivmoddi4 (UDWtype, UDWtype, UDWtype *);\n-#endif\n-\n-/* __negdi2 is static inline when building other libgcc2 portions.  */\n-#if !defined(L_divdi3) && !defined(L_moddi3)\n-extern DWtype __negdi2 (DWtype);\n-#endif\n-\n-extern DWtype __lshrdi3 (DWtype, word_type);\n-extern DWtype __ashldi3 (DWtype, word_type);\n-extern DWtype __ashrdi3 (DWtype, word_type);\n-extern DWtype __ffsdi2 (DWtype);\n-\n-/* __udiv_w_sdiv is static inline when building other libgcc2 portions.  */\n-#if (!defined(L_udivdi3) && !defined(L_divdi3) && \\\n-     !defined(L_umoddi3) && !defined(L_moddi3))\n-extern UWtype __udiv_w_sdiv (UWtype *, UWtype, UWtype, UWtype);\n-#endif\n-\n-extern word_type __cmpdi2 (DWtype, DWtype);\n-extern word_type __ucmpdi2 (DWtype, DWtype);\n-extern DFtype __floatdidf (DWtype);\n-extern SFtype __floatdisf (DWtype);\n-extern UWtype __fixunsdfsi (DFtype);\n-extern UWtype __fixunssfsi (SFtype);\n-extern DWtype __fixunsdfdi (DFtype);\n-extern DWtype __fixdfdi (DFtype);\n-extern DWtype __fixunssfdi (SFtype);\n-extern DWtype __fixsfdi (SFtype);\n-\n-#if LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 96\n-extern DWtype __fixxfdi (XFtype);\n-extern DWtype __fixunsxfdi (XFtype);\n-extern XFtype __floatdixf (DWtype);\n-extern UWtype __fixunsxfsi (XFtype);\n-#endif\n-\n-#if LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 128\n-extern DWtype __fixunstfdi (TFtype);\n-extern DWtype __fixtfdi (TFtype);\n-extern TFtype __floatditf (DWtype);\n-#endif\n-\n #endif /* __LIBGCC2_H__ */"}]}