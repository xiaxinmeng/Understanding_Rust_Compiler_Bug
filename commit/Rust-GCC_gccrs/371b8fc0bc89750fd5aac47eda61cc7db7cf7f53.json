{"sha": "371b8fc0bc89750fd5aac47eda61cc7db7cf7f53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzcxYjhmYzBiYzg5NzUwZmQ1YWFjNDdlZGE2MWNjN2RiN2NmN2Y1Mw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-07-20T20:07:58Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-07-20T20:07:58Z"}, "message": "rtlanal.c (set_noop_p): Return true for noop jumps.\n\n\t* rtlanal.c (set_noop_p): Return true for noop jumps.\n\n\t* expr.c (emit_single_push_insn): Add call to push expander.\n\t* expr.h (optab_index): Add OTI_push\n\t(push_optab): New constant.\n\t* genopinit.c (optabs): Add push_optab.\n\t* optabs.c (init_optab): Init push optab.\n\t* md.texi (push??1): Document\n\nFrom-SVN: r44210", "tree": {"sha": "6b4648cbef7b5a4a201860a0d8db5f383b7ca3ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b4648cbef7b5a4a201860a0d8db5f383b7ca3ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/371b8fc0bc89750fd5aac47eda61cc7db7cf7f53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/371b8fc0bc89750fd5aac47eda61cc7db7cf7f53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/371b8fc0bc89750fd5aac47eda61cc7db7cf7f53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/371b8fc0bc89750fd5aac47eda61cc7db7cf7f53/comments", "author": null, "committer": null, "parents": [{"sha": "00d0458c03fc77ca4d52412d47b23a09106e3696", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00d0458c03fc77ca4d52412d47b23a09106e3696", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00d0458c03fc77ca4d52412d47b23a09106e3696"}], "stats": {"total": 36, "additions": 34, "deletions": 2}, "files": [{"sha": "8e1ab0674bb1950c65e6a8343288949f02e86bec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/371b8fc0bc89750fd5aac47eda61cc7db7cf7f53/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/371b8fc0bc89750fd5aac47eda61cc7db7cf7f53/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=371b8fc0bc89750fd5aac47eda61cc7db7cf7f53", "patch": "@@ -1,3 +1,14 @@\n+Fri Jul 20 21:59:42 CEST 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* rtlanal.c (set_noop_p): Return true for noop jumps.\n+\n+\t* expr.c (emit_single_push_insn): Add call to push expander.\n+\t* expr.h (optab_index): Add OTI_push\n+\t(push_optab): New constant.\n+\t* genopinit.c (optabs): Add push_optab.\n+\t* optabs.c (init_optab): Init push optab.\n+\t* md.texi (push??1): Document\n+\n 2001-07-20  Stephane Carrez  <Stephane.Carrez@worldnet.fr>\n \n \t* config/m68hc11/m68hc11.md (\"movdi\", \"movdi_internal\"): Use an"}, {"sha": "bd60d3f59b96163e13b8557dc413e9305c5fabbd", "filename": "gcc/expr.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/371b8fc0bc89750fd5aac47eda61cc7db7cf7f53/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/371b8fc0bc89750fd5aac47eda61cc7db7cf7f53/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=371b8fc0bc89750fd5aac47eda61cc7db7cf7f53", "patch": "@@ -3155,7 +3155,21 @@ emit_single_push_insn (mode, x, type)\n   rtx dest_addr;\n   unsigned rounded_size = PUSH_ROUNDING (GET_MODE_SIZE (mode));\n   rtx dest;\n+  enum insn_code icode;\n+  insn_operand_predicate_fn pred;\n \n+  stack_pointer_delta += PUSH_ROUNDING (GET_MODE_SIZE (mode));\n+  /* If there is push pattern, use it.  Otherwise try old way of throwing\n+     MEM representing push operation to move expander.  */\n+  icode = push_optab->handlers[(int) mode].insn_code;\n+  if (icode != CODE_FOR_nothing)\n+    {\n+      if (((pred = insn_data[(int) icode].operand[0].predicate)\n+\t  && !((*pred) (x, mode))))\n+\tx = force_reg (mode, x);\n+      emit_insn (GEN_FCN (icode) (x));\n+      return;\n+    }\n   if (GET_MODE_SIZE (mode) == rounded_size)\n     dest_addr = gen_rtx_fmt_e (STACK_PUSH_CODE, Pmode, stack_pointer_rtx);\n   else\n@@ -3172,8 +3186,6 @@ emit_single_push_insn (mode, x, type)\n \n   dest = gen_rtx_MEM (mode, dest_addr);\n \n-  stack_pointer_delta += PUSH_ROUNDING (GET_MODE_SIZE (mode));\n-\n   if (type != 0)\n     {\n       set_mem_attributes (dest, type, 1);"}, {"sha": "07b1a81101721bf6b91e9979ea8ddab44c5a1604", "filename": "gcc/expr.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/371b8fc0bc89750fd5aac47eda61cc7db7cf7f53/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/371b8fc0bc89750fd5aac47eda61cc7db7cf7f53/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=371b8fc0bc89750fd5aac47eda61cc7db7cf7f53", "patch": "@@ -378,6 +378,9 @@ enum optab_index\n   OTI_cmov,\n   OTI_cstore,\n     \n+  /* Push instruction.  */\n+  OTI_push,\n+\n   OTI_MAX\n };\n \n@@ -437,6 +440,7 @@ extern optab optab_table[OTI_MAX];\n #define cbranch_optab (optab_table[OTI_cbranch])\n #define cmov_optab (optab_table[OTI_cmov])\n #define cstore_optab (optab_table[OTI_cstore])\n+#define push_optab (optab_table[OTI_push])\n \n /* Tables of patterns for extending one integer mode to another.  */\n extern enum insn_code extendtab[MAX_MACHINE_MODE][MAX_MACHINE_MODE][2];"}, {"sha": "8e00718e2f1312a93b0d2659953ad2c2bba14a9c", "filename": "gcc/genopinit.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/371b8fc0bc89750fd5aac47eda61cc7db7cf7f53/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/371b8fc0bc89750fd5aac47eda61cc7db7cf7f53/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=371b8fc0bc89750fd5aac47eda61cc7db7cf7f53", "patch": "@@ -128,6 +128,7 @@ const char * const optabs[] =\n   \"cbranch_optab->handlers[$A].insn_code = CODE_FOR_$(cbranch$a4$)\",\n   \"cmov_optab->handlers[$A].insn_code = CODE_FOR_$(cmov$a6$)\",\n   \"cstore_optab->handlers[$A].insn_code = CODE_FOR_$(cstore$a4$)\",\n+  \"push_optab->handlers[$A].insn_code = CODE_FOR_$(push$a1$)\",\n   \"reload_in_optab[$A] = CODE_FOR_$(reload_in$a$)\",\n   \"reload_out_optab[$A] = CODE_FOR_$(reload_out$a$)\",\n   \"movstr_optab[$A] = CODE_FOR_$(movstr$a$)\","}, {"sha": "84cf56dead973cdd2b1a1e54473e3220a8ea7420", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/371b8fc0bc89750fd5aac47eda61cc7db7cf7f53/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/371b8fc0bc89750fd5aac47eda61cc7db7cf7f53/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=371b8fc0bc89750fd5aac47eda61cc7db7cf7f53", "patch": "@@ -4682,6 +4682,7 @@ init_optabs ()\n   cbranch_optab = init_optab (UNKNOWN);\n   cmov_optab = init_optab (UNKNOWN);\n   cstore_optab = init_optab (UNKNOWN);\n+  push_optab = init_optab (UNKNOWN);\n \n   for (i = 0; i < NUM_MACHINE_MODES; i++)\n     {"}, {"sha": "2f9696cc1fc377b8b2c51017deb9e72e7943fa28", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/371b8fc0bc89750fd5aac47eda61cc7db7cf7f53/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/371b8fc0bc89750fd5aac47eda61cc7db7cf7f53/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=371b8fc0bc89750fd5aac47eda61cc7db7cf7f53", "patch": "@@ -998,6 +998,9 @@ set_noop_p (set)\n   if (GET_CODE (dst) == MEM && GET_CODE (src) == MEM)\n     return rtx_equal_p (dst, src);\n \n+  if (dst == pc_rtx && src == pc_rtx)\n+    return 1;\n+\n   if (GET_CODE (dst) == SIGN_EXTRACT\n       || GET_CODE (dst) == ZERO_EXTRACT)\n     return rtx_equal_p (XEXP (dst, 0), src)"}]}