{"sha": "c4d70ce3b976c161188e2aac6a4e0a1d5c05cb79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRkNzBjZTNiOTc2YzE2MTE4OGUyYWFjNmE0ZTBhMWQ1YzA1Y2I3OQ==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2004-08-09T06:51:50Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2004-08-09T06:51:50Z"}, "message": "expr.c (expand_expr_real_1): Use optab_for_tree_code.\n\n2004-08-09  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* expr.c (expand_expr_real_1): Use optab_for_tree_code.\n\nFrom-SVN: r85711", "tree": {"sha": "4b165ea6456d130a6e2be38bf8607863d6c02443", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b165ea6456d130a6e2be38bf8607863d6c02443"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4d70ce3b976c161188e2aac6a4e0a1d5c05cb79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4d70ce3b976c161188e2aac6a4e0a1d5c05cb79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4d70ce3b976c161188e2aac6a4e0a1d5c05cb79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4d70ce3b976c161188e2aac6a4e0a1d5c05cb79/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e5bacf32dd56ac8ed109d7ceaaee7ced5bc54fca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5bacf32dd56ac8ed109d7ceaaee7ced5bc54fca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5bacf32dd56ac8ed109d7ceaaee7ced5bc54fca"}], "stats": {"total": 41, "additions": 17, "deletions": 24}, "files": [{"sha": "5d69b9046761bd173d837c0e9386fe233aff72ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d70ce3b976c161188e2aac6a4e0a1d5c05cb79/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d70ce3b976c161188e2aac6a4e0a1d5c05cb79/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c4d70ce3b976c161188e2aac6a4e0a1d5c05cb79", "patch": "@@ -1,4 +1,8 @@\n-2004-07-24  Paolo Bonzini  <bonzini@gnu.org>\n+2004-08-09  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* expr.c (expand_expr_real_1): Use optab_for_tree_code.\n+\n+2004-08-09  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* expr.c (var_rtx): Remove.\n \t(expand_expr_real_1) <LOOP_EXPR, EXIT_EXPR,\n@@ -2606,7 +2610,7 @@\n \t* objc/objc-act.c (get_super_receiver): Update calls to\n \tbuild_compound_expr.\n \n-2004-07-12  Paolo Bonzini  <bonzini@gnu.org>\n+2004-07-18  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* config/sh/sh.c (sh_use_dfa_interface): Remove.\n \t(TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE): Set to"}, {"sha": "211bac8f10b4ec0817ec87d28753b8baaa99017b", "filename": "gcc/expr.c", "status": "modified", "additions": 11, "deletions": 22, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d70ce3b976c161188e2aac6a4e0a1d5c05cb79/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d70ce3b976c161188e2aac6a4e0a1d5c05cb79/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=c4d70ce3b976c161188e2aac6a4e0a1d5c05cb79", "patch": "@@ -7245,10 +7245,6 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n       return op0;\n \n     case PLUS_EXPR:\n-      this_optab = ! unsignedp && flag_trapv\n-                   && (GET_MODE_CLASS (mode) == MODE_INT)\n-                   ? addv_optab : add_optab;\n-\n       /* If we are adding a constant, a VAR_DECL that is sp, fp, or ap, and\n \t something else, make sure we add the register to the constant and\n \t then to the other thing.  This case can occur during strength\n@@ -7383,10 +7379,6 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t    return REDUCE_BIT_FIELD (gen_rtx_MINUS (mode, op0, op1));\n \t}\n \n-      this_optab = ! unsignedp && flag_trapv\n-                   && (GET_MODE_CLASS(mode) == MODE_INT)\n-                   ? subv_optab : sub_optab;\n-\n       /* No sense saving up arithmetic to be done\n \t if it's all in the wrong mode to form part of an address.\n \t And force_operand won't know whether to sign-extend or\n@@ -7490,7 +7482,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t\t    expand_operands (TREE_OPERAND (TREE_OPERAND (exp, 0), 0),\n \t\t\t\t     TREE_OPERAND (TREE_OPERAND (exp, 1), 0),\n \t\t\t\t     NULL_RTX, &op0, &op1, 0);\n-\t\t  goto binop2;\n+\t\t  goto binop3;\n \t\t}\n \t      else if (other_optab->handlers[(int) mode].insn_code != CODE_FOR_nothing\n \t\t       && innermode == word_mode)\n@@ -7548,7 +7540,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t\t\t\t\t    build_real (type, dconst1),\n \t\t\t\t\t    TREE_OPERAND (exp, 1))),\n \t\t\t    target, tmode, modifier);\n-      this_optab = sdiv_optab;\n+\n       goto binop;\n \n     case TRUNC_MOD_EXPR:\n@@ -7591,9 +7583,8 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n       if (modifier == EXPAND_STACK_PARM)\n \ttarget = 0;\n       temp = expand_unop (mode,\n-\t\t\t  ! unsignedp && flag_trapv\n-\t\t\t  && (GET_MODE_CLASS(mode) == MODE_INT)\n-\t\t\t  ? negv_optab : neg_optab, op0, target, 0);\n+      \t\t\t  optab_for_tree_code (NEGATE_EXPR, type),\n+\t\t\t  op0, target, 0);\n       if (temp == 0)\n \tabort ();\n       return REDUCE_BIT_FIELD (temp);\n@@ -7632,10 +7623,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n       /* First try to do it with a special MIN or MAX instruction.\n \t If that does not win, use a conditional jump to select the proper\n \t value.  */\n-      this_optab = (unsignedp\n-\t\t    ? (code == MIN_EXPR ? umin_optab : umax_optab)\n-\t\t    : (code == MIN_EXPR ? smin_optab : smax_optab));\n-\n+      this_optab = optab_for_tree_code (code, type);\n       temp = expand_binop (mode, this_optab, op0, op1, target, unsignedp,\n \t\t\t   OPTAB_WIDEN);\n       if (temp != 0)\n@@ -7704,18 +7692,18 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t how to recognize those cases.  */\n \n     case TRUTH_AND_EXPR:\n+      code = BIT_AND_EXPR;\n     case BIT_AND_EXPR:\n-      this_optab = and_optab;\n       goto binop;\n \n     case TRUTH_OR_EXPR:\n+      code = BIT_OR_EXPR;\n     case BIT_IOR_EXPR:\n-      this_optab = ior_optab;\n       goto binop;\n \n     case TRUTH_XOR_EXPR:\n+      code = BIT_XOR_EXPR;\n     case BIT_XOR_EXPR:\n-      this_optab = xor_optab;\n       goto binop;\n \n     case LSHIFT_EXPR:\n@@ -8198,12 +8186,13 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t\t\t\t     modifier, alt_rtl);\n     }\n \n-  /* Here to do an ordinary binary operator, generating an instruction\n-     from the optab already placed in `this_optab'.  */\n+  /* Here to do an ordinary binary operator.  */\n  binop:\n   expand_operands (TREE_OPERAND (exp, 0), TREE_OPERAND (exp, 1),\n \t\t   subtarget, &op0, &op1, 0);\n  binop2:\n+  this_optab = optab_for_tree_code (code, type);\n+ binop3:\n   if (modifier == EXPAND_STACK_PARM)\n     target = 0;\n   temp = expand_binop (mode, this_optab, op0, op1, target,"}]}