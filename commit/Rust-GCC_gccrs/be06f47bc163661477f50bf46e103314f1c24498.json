{"sha": "be06f47bc163661477f50bf46e103314f1c24498", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmUwNmY0N2JjMTYzNjYxNDc3ZjUwYmY0NmUxMDMzMTRmMWMyNDQ5OA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-11-16T11:30:14Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-11-16T11:30:14Z"}, "message": "BufferedReader.java, [...]: Fixed javadocs all over.\n\n2004-11-16  Michael Koch  <konqueror@gmx.de>\n\n\t* java/io/BufferedReader.java,\n\tjava/io/FileInputStream.java,\n\tjava/io/FileOutputStream.java,\n\tjava/io/FileWriter.java,\n\tjava/io/OutputStreamWriter.java,\n\tjava/io/PipedInputStream.java,\n\tjava/io/PipedOutputStream.java,\n\tjava/io/PipedReader.java,\n\tjava/io/PipedWriter.java,\n\tjava/io/PrintStream.java,\n\tjava/io/PushbackInputStream.java,\n\tjava/io/RandomAccessFile.java,\n\tjava/io/Reader.java,\n\tjava/io/StreamTokenizer.java,\n\tjava/io/StringReader.java,\n\tjava/net/NetworkInterface.java,\n\tjava/net/URLClassLoader.java,\n\tjava/nio/ByteOrder.java,\n\tjava/nio/channels/Channel.java:\n\tFixed javadocs all over.\n\nFrom-SVN: r90727", "tree": {"sha": "35bc1efd9744250f460b2be74623c87b86db3c0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35bc1efd9744250f460b2be74623c87b86db3c0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be06f47bc163661477f50bf46e103314f1c24498", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be06f47bc163661477f50bf46e103314f1c24498", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be06f47bc163661477f50bf46e103314f1c24498", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be06f47bc163661477f50bf46e103314f1c24498/comments", "author": null, "committer": null, "parents": [{"sha": "d39289db5ad1bd3146c0f3aca3d1ebcbd83a3a14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d39289db5ad1bd3146c0f3aca3d1ebcbd83a3a14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d39289db5ad1bd3146c0f3aca3d1ebcbd83a3a14"}], "stats": {"total": 424, "additions": 225, "deletions": 199}, "files": [{"sha": "ab43cc42e85f8da6ae6b0adc388546d6224f3713", "filename": "libjava/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be06f47bc163661477f50bf46e103314f1c24498/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be06f47bc163661477f50bf46e103314f1c24498/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=be06f47bc163661477f50bf46e103314f1c24498", "patch": "@@ -1,3 +1,26 @@\n+2004-11-16  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/io/BufferedReader.java,\n+\tjava/io/FileInputStream.java,\n+\tjava/io/FileOutputStream.java,\n+\tjava/io/FileWriter.java,\n+\tjava/io/OutputStreamWriter.java,\n+\tjava/io/PipedInputStream.java,\n+\tjava/io/PipedOutputStream.java,\n+\tjava/io/PipedReader.java,\n+\tjava/io/PipedWriter.java,\n+\tjava/io/PrintStream.java,\n+\tjava/io/PushbackInputStream.java,\n+\tjava/io/RandomAccessFile.java,\n+\tjava/io/Reader.java,\n+\tjava/io/StreamTokenizer.java,\n+\tjava/io/StringReader.java,\n+\tjava/net/NetworkInterface.java,\n+\tjava/net/URLClassLoader.java,\n+\tjava/nio/ByteOrder.java,\n+\tjava/nio/channels/Channel.java:\n+\tFixed javadocs all over.\n+\n 2004-11-16  Andreas Tobler  <a.tobler@schweiz.ch>\n \n \t* Makefile.am: Add imported files."}, {"sha": "19074703938f2c81fceb70c5ab6cdf9222cb4c0f", "filename": "libjava/java/io/BufferedReader.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be06f47bc163661477f50bf46e103314f1c24498/libjava%2Fjava%2Fio%2FBufferedReader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be06f47bc163661477f50bf46e103314f1c24498/libjava%2Fjava%2Fio%2FBufferedReader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FBufferedReader.java?ref=be06f47bc163661477f50bf46e103314f1c24498", "patch": "@@ -508,7 +508,7 @@ public String readLine() throws IOException\n    * <code>skip</code> method on the underlying stream to skip the \n    * remaining chars.\n    *\n-   * @param numChars The requested number of chars to skip\n+   * @param count The requested number of chars to skip\n    *\n    * @return The actual number of chars skipped.\n    *"}, {"sha": "908c00a19b9d4d08bd521579f1757150103a34cd", "filename": "libjava/java/io/FileInputStream.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be06f47bc163661477f50bf46e103314f1c24498/libjava%2Fjava%2Fio%2FFileInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be06f47bc163661477f50bf46e103314f1c24498/libjava%2Fjava%2Fio%2FFileInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFileInputStream.java?ref=be06f47bc163661477f50bf46e103314f1c24498", "patch": "@@ -122,7 +122,7 @@ public FileInputStream(File file) throws FileNotFoundException\n    * An exception is \n    * thrown if reading is not allowed.\n    *\n-   * @param fd The <code>FileDescriptor</code> object this stream \n+   * @param fdObj The <code>FileDescriptor</code> object this stream \n    * should read from\n    *\n    * @exception SecurityException If read access to the file is not allowed"}, {"sha": "1702ffe8f54c8abd4968c68e544d9a5bd3d7a67e", "filename": "libjava/java/io/FileOutputStream.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be06f47bc163661477f50bf46e103314f1c24498/libjava%2Fjava%2Fio%2FFileOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be06f47bc163661477f50bf46e103314f1c24498/libjava%2Fjava%2Fio%2FFileOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFileOutputStream.java?ref=be06f47bc163661477f50bf46e103314f1c24498", "patch": "@@ -72,7 +72,7 @@ public class FileOutputStream extends OutputStream\n    * one exists) with the name of the file to be opened.  An exception is\n    * thrown if writing is not allowed. \n    *\n-   * @param name The name of the file this stream should write to\n+   * @param path The name of the file this stream should write to\n    * @param append <code>true</code> to append bytes to the end of the file,\n    * or <code>false</code> to write bytes to the beginning\n    *\n@@ -95,7 +95,7 @@ public FileOutputStream (String path, boolean append)\n    * one exists) with the name of the file to be opened.  An exception is\n    * thrown if writing is not allowed. \n    *\n-   * @param name The name of the file this stream should write to\n+   * @param path The name of the file this stream should write to\n    *\n    * @exception SecurityException If write access to the file is not allowed\n    * @exception FileNotFoundException If a non-security error occurs\n@@ -176,7 +176,7 @@ public FileOutputStream (File file, boolean append)\n    * one exists) with the specified <code>FileDescriptor</code> as an argument.\n    * An exception is thrown if writing is not allowed. \n    *\n-   * @param file The <code>FileDescriptor</code> this stream should write to\n+   * @param fdObj The <code>FileDescriptor</code> this stream should write to\n    *\n    * @exception SecurityException If write access to the file is not allowed\n    */"}, {"sha": "fb48bba3e94a8e99e93fa0549e79bf19732cea9f", "filename": "libjava/java/io/FileWriter.java", "status": "modified", "additions": 55, "deletions": 62, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be06f47bc163661477f50bf46e103314f1c24498/libjava%2Fjava%2Fio%2FFileWriter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be06f47bc163661477f50bf46e103314f1c24498/libjava%2Fjava%2Fio%2FFileWriter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFileWriter.java?ref=be06f47bc163661477f50bf46e103314f1c24498", "patch": "@@ -1,5 +1,5 @@\n /* FileWriter.java -- Convenience class for writing to files.\n-   Copyright (C) 1998, 1999, 2001, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2001, 2003, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -49,96 +49,89 @@\n   * <code>OutputStreamWriter</code> to write to it.\n   *\n   * @author Aaron M. Renn (arenn@urbanophile.com)\n-  * @author Tom Tromey <tromey@cygnus.com>\n+  * @author Tom Tromey (tromey@cygnus.com)\n   */\n public class FileWriter extends OutputStreamWriter\n {\n-\n-  /*\n-   * Constructors\n-   */\n-   \n   /**\n-    * This method initializes a new <code>FileWriter</code> object to write\n-    * to the specified <code>File</code> object.\n-    *\n-    * @param file The <code>File</code> object to write to.\n-    *\n-    * @param SecurityException If writing to this file is forbidden by the\n-    *                          <code>SecurityManager</code>.\n-    * @param IOException If any other error occurs\n-    */\n+   * This method initializes a new <code>FileWriter</code> object to write\n+   * to the specified <code>File</code> object.\n+   *\n+   * @param file The <code>File</code> object to write to.\n+   *\n+   * @throws SecurityException If writing to this file is forbidden by the\n+   * <code>SecurityManager</code>.\n+   * @throws IOException If any other error occurs\n+   */\n   public FileWriter(File file) throws SecurityException, IOException\n   {\n     super(new FileOutputStream(file));\n   }\n \n   /**\n-    * This method initializes a new <code>FileWriter</code> object to write\n-    * to the specified <code>File</code> object.\n-    *\n-    * @param file The <code>File</code> object to write to.\n-    * @param append <code>true</code> to start adding data at the end of the\n-    *               file, <code>false</code> otherwise.\n-    *\n-    * @param SecurityException If writing to this file is forbidden by the\n-    *                          <code>SecurityManager</code>.\n-    * @param IOException If any other error occurs\n-    */\n+   * This method initializes a new <code>FileWriter</code> object to write\n+   * to the specified <code>File</code> object.\n+   *\n+   * @param file The <code>File</code> object to write to.\n+   * @param append <code>true</code> to start adding data at the end of the\n+   * file, <code>false</code> otherwise.\n+   *\n+   * @throws SecurityException If writing to this file is forbidden by the\n+   * <code>SecurityManager</code>.\n+   * @throws IOException If any other error occurs\n+   */\n   public FileWriter(File file, boolean append) throws IOException\n   {\n     super(new FileOutputStream(file, append));\n   }\n \n   /**\n-    * This method initializes a new <code>FileWriter</code> object to write\n-    * to the specified <code>FileDescriptor</code> object.\n-    *\n-    * @param fd The <code>FileDescriptor</code> object to write to\n-    *\n-    * @param SecurityException If writing to this file is forbidden by the\n-    *                          <code>SecurityManager</code>.\n-    */\n+   * This method initializes a new <code>FileWriter</code> object to write\n+   * to the specified <code>FileDescriptor</code> object.\n+   *\n+   * @param fd The <code>FileDescriptor</code> object to write to\n+   *\n+   * @throws SecurityException If writing to this file is forbidden by the\n+   * <code>SecurityManager</code>.\n+   */\n   public FileWriter(FileDescriptor fd) throws SecurityException\n   {\n     super(new FileOutputStream(fd));\n   }\n \n   /**\n-    * This method intializes a new <code>FileWriter</code> object to \n-    * write to the\n-    * specified named file.\n-    *\n-    * @param name The name of the file to write to\n-    *\n-    * @param SecurityException If writing to this file is forbidden by the\n-    *                          <code>SecurityManager</code>.\n-    * @param IOException If any other error occurs\n-    */\n+   * This method intializes a new <code>FileWriter</code> object to \n+   * write to the\n+   * specified named file.\n+   *\n+   * @param name The name of the file to write to\n+   *\n+   * @throws SecurityException If writing to this file is forbidden by the\n+   * <code>SecurityManager</code>.\n+   * @throws IOException If any other error occurs\n+   */\n   public FileWriter(String name) throws IOException\n   {\n     super(new FileOutputStream(name));\n   }\n \n   /**\n-    * This method intializes a new <code>FileWriter</code> object to \n-    * write to the\n-    * specified named file.  This form of the constructor allows the caller\n-    * to determin whether data should be written starting at the beginning or\n-    * the end of the file.\n-    *\n-    * @param name The name of the file to write to\n-    * @param append <code>true</code> to start adding data at the end of the\n-    *               file, <code>false</code> otherwise.\n-    *\n-    * @param SecurityException If writing to this file is forbidden by the\n-    *                          <code>SecurityManager</code>.\n-    * @param IOException If any other error occurs\n-    */\n+   * This method intializes a new <code>FileWriter</code> object to \n+   * write to the\n+   * specified named file.  This form of the constructor allows the caller\n+   * to determin whether data should be written starting at the beginning or\n+   * the end of the file.\n+   *\n+   * @param name The name of the file to write to\n+   * @param append <code>true</code> to start adding data at the end of the\n+   * file, <code>false</code> otherwise.\n+   *\n+   * @throws SecurityException If writing to this file is forbidden by the\n+   * <code>SecurityManager</code>.\n+   * @throws IOException If any other error occurs\n+   */\n   public FileWriter(String name, boolean append) throws IOException\n   {\n     super(new FileOutputStream(name, append));\n   }\n-\n-} // class FileWriter\n-\n+}"}, {"sha": "a07470a72912eb30709b44461f3c2a26553e7ee3", "filename": "libjava/java/io/OutputStreamWriter.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be06f47bc163661477f50bf46e103314f1c24498/libjava%2Fjava%2Fio%2FOutputStreamWriter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be06f47bc163661477f50bf46e103314f1c24498/libjava%2Fjava%2Fio%2FOutputStreamWriter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FOutputStreamWriter.java?ref=be06f47bc163661477f50bf46e103314f1c24498", "patch": "@@ -287,7 +287,7 @@ public void write (String str, int offset, int count) throws IOException\n   /**\n    * This method writes a single character to the output stream.\n    *\n-   * @param c The char to write, passed as an int.\n+   * @param ch The char to write, passed as an int.\n    *\n    * @exception IOException If an error occurs\n    */"}, {"sha": "906ef10fa9f5aff99fdd19f1ced6f6293829d00d", "filename": "libjava/java/io/PipedInputStream.java", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be06f47bc163661477f50bf46e103314f1c24498/libjava%2Fjava%2Fio%2FPipedInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be06f47bc163661477f50bf46e103314f1c24498/libjava%2Fjava%2Fio%2FPipedInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FPipedInputStream.java?ref=be06f47bc163661477f50bf46e103314f1c24498", "patch": "@@ -151,14 +151,14 @@ public void connect(PipedOutputStream source) throws IOException\n   * This method receives a byte of input from the source PipedOutputStream.\n   * If the internal circular buffer is full, this method blocks.\n   *\n-  * @param byte_received The byte to write to this stream\n+  * @param val The byte to write to this stream\n   *\n   * @exception IOException if error occurs\n   * @specnote Weird. This method must be some sort of accident.\n   */\n-  protected synchronized void receive(int b) throws IOException\n+  protected synchronized void receive(int val) throws IOException\n   {\n-    read_buf[0] = (byte) (b & 0xff);\n+    read_buf[0] = (byte) (val & 0xff);\n     receive (read_buf, 0, 1);\n   }\n \n@@ -237,11 +237,7 @@ synchronized void receive(byte[] buf, int offset, int len)\n     * because the end of the stream was reached.  If the stream is already\n     * closed, a -1 will again be returned to indicate the end of the stream.\n     * <p>\n-    * This method will block if no bytes are available to be read.\n-    *\n-    * @param buf The buffer into which bytes will be stored\n-    * @param offset The index into the buffer at which to start writing.\n-    * @param len The maximum number of bytes to read.\n+    * This method will block if no byte is available to be read.\n     */\n   public int read() throws IOException\n   {\n@@ -252,11 +248,7 @@ public int read() throws IOException\n     // if this method is never called.\n \n     int r = read(read_buf, 0, 1);\n-\n-    if (r == -1)\n-      return -1;\n-    else\n-      return read_buf[0];\n+    return r != -1 ? read_buf[0] : -1;\n   }\n   \n   /**"}, {"sha": "a652356761601039b5c6050e3f53aa2eeb76d0d8", "filename": "libjava/java/io/PipedOutputStream.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be06f47bc163661477f50bf46e103314f1c24498/libjava%2Fjava%2Fio%2FPipedOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be06f47bc163661477f50bf46e103314f1c24498/libjava%2Fjava%2Fio%2FPipedOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FPipedOutputStream.java?ref=be06f47bc163661477f50bf46e103314f1c24498", "patch": "@@ -129,21 +129,21 @@ public void write(int b) throws IOException\n     * <code>PipedInputStream</code> to which this object is connected has\n     * a buffer that cannot hold all of the bytes to be written.\n     *\n-    * @param buf The array containing bytes to write to the stream.\n+    * @param buffer The array containing bytes to write to the stream.\n     * @param offset The index into the array to start writing bytes from.\n     * @param len The number of bytes to write.\n     *\n     * @exception IOException If the stream has not been connected or has\n     *                        been closed.\n     */\n-  public void write(byte[] b, int off, int len) throws IOException\n+  public void write(byte[] buffer, int offset, int len) throws IOException\n   {\n     if (sink == null)\n       throw new IOException (\"Not connected\");\n     if (closed)\n       throw new IOException (\"Pipe closed\");\n       \n-    sink.receive (b, off, len);\n+    sink.receive(buffer, offset, len);\n   }\n \n   /**"}, {"sha": "c91fc211c7e42274201027c625478272b8c0b022", "filename": "libjava/java/io/PipedReader.java", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be06f47bc163661477f50bf46e103314f1c24498/libjava%2Fjava%2Fio%2FPipedReader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be06f47bc163661477f50bf46e103314f1c24498/libjava%2Fjava%2Fio%2FPipedReader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FPipedReader.java?ref=be06f47bc163661477f50bf46e103314f1c24498", "patch": "@@ -123,7 +123,7 @@ public PipedReader(PipedWriter source) throws IOException\n     * This stream is then ready for reading.  If this stream is already\n     * connected or has been previously closed, then an exception is thrown\n     *\n-    * @param src The <code>PipedWriter</code> to connect this stream to\n+    * @param source The <code>PipedWriter</code> to connect this stream to\n     *\n     * @exception IOException If this PipedReader or <code>source</code> \n     *                        has been connected already.\n@@ -218,11 +218,7 @@ void receive(char[] buf, int offset, int len)\n     * because the end of the stream was reached.  If the stream is already\n     * closed, a -1 will again be returned to indicate the end of the stream.\n     * <p>\n-    * This method will block if no chars are available to be read.\n-    *\n-    * @param buf The buffer into which chars will be stored\n-    * @param offset The index into the buffer at which to start writing.\n-    * @param len The maximum number of chars to read.\n+    * This method will block if no char is available to be read.\n     */\n   public int read() throws IOException\n   {\n@@ -233,11 +229,7 @@ public int read() throws IOException\n     // if this method is never called.\n \n     int r = read(read_buf, 0, 1);\n-\n-    if (r == -1)\n-      return -1;\n-    else\n-      return read_buf[0];\n+    return r != -1 ? read_buf[0] : -1;\n   }\n   \n   /**"}, {"sha": "e053d55b225ee78c0364c4e49cbd5e685219699e", "filename": "libjava/java/io/PipedWriter.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be06f47bc163661477f50bf46e103314f1c24498/libjava%2Fjava%2Fio%2FPipedWriter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be06f47bc163661477f50bf46e103314f1c24498/libjava%2Fjava%2Fio%2FPipedWriter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FPipedWriter.java?ref=be06f47bc163661477f50bf46e103314f1c24498", "patch": "@@ -128,21 +128,21 @@ public void write(int b) throws IOException\n     * <code>PipedReader</code> to which this object is connected has\n     * a buffer that cannot hold all of the chars to be written.\n     *\n-    * @param buf The array containing chars to write to the stream.\n+    * @param buffer The array containing chars to write to the stream.\n     * @param offset The index into the array to start writing chars from.\n     * @param len The number of chars to write.\n     *\n     * @exception IOException If the stream has not been connected or has\n     *                        been closed.\n     */\n-  public void write(char[] b, int off, int len) throws IOException\n+  public void write(char[] buffer, int offset, int len) throws IOException\n   {\n     if (sink == null)\n       throw new IOException (\"Not connected\");\n     if (closed)\n       throw new IOException (\"Pipe closed\");\n       \n-    sink.receive (b, off, len);\n+    sink.receive(buffer, offset, len);\n   }\n \n   /**"}, {"sha": "3526473a4fd3655aea36ef1a4b682777257b8fb5", "filename": "libjava/java/io/PrintStream.java", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be06f47bc163661477f50bf46e103314f1c24498/libjava%2Fjava%2Fio%2FPrintStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be06f47bc163661477f50bf46e103314f1c24498/libjava%2Fjava%2Fio%2FPrintStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FPrintStream.java?ref=be06f47bc163661477f50bf46e103314f1c24498", "patch": "@@ -279,7 +279,7 @@ private void writeChars(String str, int offset, int count)\n    * values are printed as \"true\" and <code>false</code> values are printed\n    * as \"false\".\n    *\n-   * @param b The <code>boolean</code> value to print\n+   * @param bool The <code>boolean</code> value to print\n    */\n   public void print (boolean bool)\n   {\n@@ -369,7 +369,7 @@ public synchronized void print (char ch)\n    * This method prints an array of characters to the stream.  The actual\n    * value printed depends on the system default encoding.\n    *\n-   * @param s The array of characters to print.\n+   * @param charArray The array of characters to print.\n    */\n   public void print (char[] charArray)\n   {\n@@ -393,7 +393,7 @@ public void println ()\n    * <p>\n    * This method prints a line termination sequence after printing the value.\n    *\n-   * @param b The <code>boolean</code> value to print\n+   * @param bool The <code>boolean</code> value to print\n    */\n   public void println (boolean bool)\n   {\n@@ -499,7 +499,7 @@ public synchronized void println (char ch)\n    * <p>\n    * This method prints a line termination sequence after printing the value.\n    *\n-   * @param s The array of characters to print.\n+   * @param charArray The array of characters to print.\n    */\n   public void println (char[] charArray)\n   {\n@@ -511,7 +511,7 @@ public void println (char[] charArray)\n    * enabled, printing a newline character will cause the stream to be\n    * flushed after the character is written.\n    * \n-   * @param b The byte to be written\n+   * @param oneByte The byte to be written\n    */\n   public void write (int oneByte)\n   {"}, {"sha": "c07714ec61c041b6e0e0cf79a1a56addce482dd1", "filename": "libjava/java/io/PushbackInputStream.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be06f47bc163661477f50bf46e103314f1c24498/libjava%2Fjava%2Fio%2FPushbackInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be06f47bc163661477f50bf46e103314f1c24498/libjava%2Fjava%2Fio%2FPushbackInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FPushbackInputStream.java?ref=be06f47bc163661477f50bf46e103314f1c24498", "patch": "@@ -302,7 +302,7 @@ public synchronized void unread(byte[] b, int off, int len)\n    * <code>skip</code> method on the underlying <code>InputStream</code> to \n    * skip additional bytes if necessary.\n    *\n-   * @param numBytes The requested number of bytes to skip\n+   * @param n The requested number of bytes to skip\n    *\n    * @return The actual number of bytes skipped.\n    *"}, {"sha": "2b1e08599e856deeba1848059bce7c3d91026e4d", "filename": "libjava/java/io/RandomAccessFile.java", "status": "modified", "additions": 48, "deletions": 50, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be06f47bc163661477f50bf46e103314f1c24498/libjava%2Fjava%2Fio%2FRandomAccessFile.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be06f47bc163661477f50bf46e103314f1c24498/libjava%2Fjava%2Fio%2FRandomAccessFile.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FRandomAccessFile.java?ref=be06f47bc163661477f50bf46e103314f1c24498", "patch": "@@ -205,7 +205,7 @@ public long getFilePointer () throws IOException\n    * <p>\n    * The file must be open for write access for this operation to succeed.\n    *\n-   * @param newlen The new length of the file\n+   * @param newLen The new length of the file\n    *\n    * @exception IOException If an error occurs\n    */\n@@ -256,7 +256,7 @@ public int read () throws IOException\n    * bytes are stored starting at the beginning of the array and up to \n    * <code>buf.length</code> bytes can be read.\n    *\n-   * @param buf The buffer to read bytes from the file into\n+   * @param buffer The buffer to read bytes from the file into\n    *\n    * @return The actual number of bytes read or -1 if end of file\n    *\n@@ -271,7 +271,7 @@ public int read (byte[] buffer) throws IOException\n    * This methods reads up to <code>len</code> bytes from the file into the\n    * specified array starting at position <code>offset</code> into the array.\n    *\n-   * @param buf The array to read the bytes into\n+   * @param buffer The array to read the bytes into\n    * @param offset The index into the array to start storing bytes\n    * @param len The requested number of bytes to read\n    *\n@@ -414,7 +414,7 @@ public final float readFloat () throws IOException\n    * throws an exception if there is not enough data left in the stream to\n    * fill the buffer\n    *\n-   * @param buf The buffer into which to read the data\n+   * @param buffer The buffer into which to read the data\n    *\n    * @exception EOFException If end of file is reached before filling the \n    * buffer\n@@ -434,9 +434,9 @@ public final void readFully (byte[] buffer) throws IOException\n    * available and throws an exception if there is not enough data left in \n    * the stream to read <code>len</code> bytes.\n    *\n-   * @param buf The buffer into which to read the data\n+   * @param buffer The buffer into which to read the data\n    * @param offset The offset into the buffer to start storing data\n-   * @param len The number of bytes to read into the buffer\n+   * @param count The number of bytes to read into the buffer\n    *\n    * @exception EOFException If end of file is reached before filling \n    * the buffer\n@@ -460,8 +460,8 @@ public final void readFully (byte[] buffer, int offset, int count)\n    * four bytes read from the stream, they will be\n    * transformed to an <code>int</code> in the following manner:\n    * <p>\n-   * <code>(int)(((byte1 & 0xFF) << 24) + ((byte2 & 0xFF) << 16) + \n-   * ((byte3 & 0xFF) << 8) + (byte4 & 0xFF)))</code>\n+   * <code>(int)(((byte1 &amp; 0xFF) &lt;&lt; 24) + ((byte2 &amp; 0xFF) &lt;&lt; 16) + \n+   * ((byte3 &amp; 0xFF) &lt;&lt; 8) + (byte4 &amp; 0xFF)))</code>\n    * <p>\n    * The value returned is in the range of 0 to 65535.\n    * <p>\n@@ -524,10 +524,10 @@ public final String readLine () throws IOException\n    * transformed to an <code>long</code> in the following manner:\n    * <p>\n    * <code>\n-   * (long)((((long)byte1 & 0xFF) << 56) + (((long)byte2 & 0xFF) << 48) + \n-   * (((long)byte3 & 0xFF) << 40) + (((long)byte4 & 0xFF) << 32) + \n-   * (((long)byte5 & 0xFF) << 24) + (((long)byte6 & 0xFF) << 16) + \n-   * (((long)byte7 & 0xFF) << 8) + ((long)byte9 & 0xFF)))</code>\n+   * (long)((((long)byte1 &amp; 0xFF) &lt;&lt; 56) + (((long)byte2 &amp; 0xFF) &lt;&lt; 48) + \n+   * (((long)byte3 &amp; 0xFF) &lt;&lt; 40) + (((long)byte4 &amp; 0xFF) &lt;&lt; 32) + \n+   * (((long)byte5 &amp; 0xFF) &lt;&lt; 24) + (((long)byte6 &amp; 0xFF) &lt;&lt; 16) + \n+   * (((long)byte7 &amp; 0xFF) &lt;&lt; 8) + ((long)byte9 &amp; 0xFF)))</code>\n    * <p>\n    * The value returned is in the range of 0 to 65535.\n    * <p>\n@@ -612,7 +612,7 @@ public final int readUnsignedByte () throws IOException\n    * and second byte read from the stream respectively, they will be\n    * transformed to an <code>int</code> in the following manner:\n    * <p>\n-   * <code>(int)(((byte1 & 0xFF) << 8) + (byte2 & 0xFF))</code>\n+   * <code>(int)(((byte1 &amp; 0xFF) &lt;&lt; 8) + (byte2 &amp; 0xFF))</code>\n    * <p>\n    * The value returned is in the range of 0 to 65535.\n    * <p>\n@@ -756,7 +756,7 @@ public int skipBytes (int numBytes) throws IOException\n    * This method writes a single byte of data to the file. The file must\n    * be open for read-write in order for this operation to succeed.\n    *\n-   * @param The byte of data to write, passed as an int.\n+   * @param oneByte The byte of data to write, passed as an int.\n    *\n    * @exception IOException If an error occurs\n    */\n@@ -769,7 +769,7 @@ public void write (int oneByte) throws IOException\n    * This method writes all the bytes in the specified array to the file.\n    * The file must be open read-write in order for this operation to succeed.\n    *\n-   * @param buf The array of bytes to write to the file\n+   * @param buffer The array of bytes to write to the file\n    */\n   public void write (byte[] buffer) throws IOException\n   {\n@@ -780,7 +780,7 @@ public void write (byte[] buffer) throws IOException\n    * This method writes <code>len</code> bytes to the file from the specified\n    * array starting at index <code>offset</code> into the array.\n    *\n-   * @param buf The array of bytes to write to the file\n+   * @param buffer The array of bytes to write to the file\n    * @param offset The index into the array to start writing file\n    * @param len The number of bytes to write\n    *\n@@ -796,7 +796,7 @@ public void write (byte[] buffer, int offset, int len) throws IOException\n    * stream. For a value of <code>true</code>, 1 is written to the stream.\n    * For a value of <code>false</code>, 0 is written.\n    *\n-   * @param b The <code>boolean</code> value to write to the stream\n+   * @param val The <code>boolean</code> value to write to the stream\n    *\n    * @exception IOException If an error occurs\n    */\n@@ -809,68 +809,68 @@ public final void writeBoolean (boolean val) throws IOException\n    * This method writes a Java <code>byte</code> value to the underlying\n    * output stream.\n    *\n-   * @param b The <code>byte</code> to write to the stream, passed \n+   * @param val The <code>byte</code> to write to the stream, passed \n    * as an <code>int</code>.\n    *\n    * @exception IOException If an error occurs\n    */\n-  public final void writeByte (int v) throws IOException\n+  public final void writeByte (int val) throws IOException\n   {\n-    out.writeByte(v);\n+    out.writeByte(val);\n   }\n \n   /**\n    * This method writes a Java <code>short</code> to the stream, high byte\n    * first.  This method requires two bytes to encode the value.\n    *\n-   * @param s The <code>short</code> value to write to the stream, \n+   * @param val The <code>short</code> value to write to the stream, \n    * passed as an <code>int</code>.\n    *\n    * @exception IOException If an error occurs\n    */\n-  public final void writeShort (int v) throws IOException\n+  public final void writeShort (int val) throws IOException\n   {\n-    out.writeShort(v);\n+    out.writeShort(val);\n   }\n \n   /**\n    * This method writes a single <code>char</code> value to the stream,\n    * high byte first.\n    *\n-   * @param v The <code>char</code> value to write, passed as \n+   * @param val The <code>char</code> value to write, passed as \n    * an <code>int</code>.\n    *\n    * @exception IOException If an error occurs\n    */\n-  public final void writeChar (int v) throws IOException\n+  public final void writeChar (int val) throws IOException\n   {\n-    out.writeChar(v);\n+    out.writeChar(val);\n   }\n \n   /**\n    * This method writes a Java <code>int</code> to the stream, high bytes\n    * first.  This method requires four bytes to encode the value.\n    *\n-   * @param v The <code>int</code> value to write to the stream.\n+   * @param val The <code>int</code> value to write to the stream.\n    *\n    * @exception IOException If an error occurs\n    */\n-  public final void writeInt (int v) throws IOException\n+  public final void writeInt (int val) throws IOException\n   {\n-    out.writeInt(v);\n+    out.writeInt(val);\n   }\n \n   /**\n    * This method writes a Java <code>long</code> to the stream, high bytes\n    * first.  This method requires eight bytes to encode the value.\n    *\n-   * @param v The <code>long</code> value to write to the stream.\n+   * @param val The <code>long</code> value to write to the stream.\n    *\n    * @exception IOException If an error occurs\n    */\n-  public final void writeLong (long v) throws IOException\n+  public final void writeLong (long val) throws IOException\n   {\n-    out.writeLong(v);\n+    out.writeLong(val);\n   }\n \n   /**\n@@ -881,15 +881,15 @@ public final void writeLong (long v) throws IOException\n    * then writing this <code>int</code> value to the stream exactly the same\n    * as the <code>writeInt()</code> method does.\n    *\n-   * @param v The floating point number to write to the stream.\n+   * @param val The floating point number to write to the stream.\n    *\n    * @exception IOException If an error occurs\n    *\n    * @see #writeInt(int)\n    */\n-  public final void writeFloat (float v) throws IOException\n+  public final void writeFloat (float val) throws IOException\n   {\n-    out.writeFloat(v);\n+    out.writeFloat(val);\n   }\n \n   /**\n@@ -900,44 +900,44 @@ public final void writeFloat (float v) throws IOException\n    * then writing this <code>long</code> value to the stream exactly the same\n    * as the <code>writeLong()</code> method does.\n    *\n-   * @param v The double precision floating point number to write to the \n+   * @param val The double precision floating point number to write to the \n    * stream.\n    *\n    * @exception IOException If an error occurs\n    *\n    * @see #writeLong(long)\n    */\n-  public final void writeDouble (double v) throws IOException\n+  public final void writeDouble (double val) throws IOException\n   {\n-    out.writeDouble(v);\n+    out.writeDouble(val);\n   }\n \n   /**\n    * This method writes all the bytes in a <code>String</code> out to the\n    * stream.  One byte is written for each character in the <code>String</code>.\n    * The high eight bits of each character are discarded.\n    *\n-   * @param s The <code>String</code> to write to the stream\n+   * @param val The <code>String</code> to write to the stream\n    *\n    * @exception IOException If an error occurs\n    */\n-  public final void writeBytes (String s) throws IOException\n+  public final void writeBytes (String val) throws IOException\n   {\n-    out.writeBytes(s);\n+    out.writeBytes(val);\n   }\n   \n   /**\n    * This method writes all the characters in a <code>String</code> to the\n    * stream.  There will be two bytes for each character value.  The high\n    * byte of the character will be written first.\n    *\n-   * @param s The <code>String</code> to write to the stream.\n+   * @param val The <code>String</code> to write to the stream.\n    *\n    * @exception IOException If an error occurs\n    */\n-  public final void writeChars (String s) throws IOException\n+  public final void writeChars (String val) throws IOException\n   {\n-    out.writeChars(s);\n+    out.writeChars(val);\n   }\n   \n   /**\n@@ -965,13 +965,13 @@ public final void writeChars (String s) throws IOException\n    * character value are stored in bits 0-5 of byte three, with the high bits\n    * of that byte set to \"10\".\n    *\n-   * @param s The <code>String</code> to write to the output in UTF format\n+   * @param val The <code>String</code> to write to the output in UTF format\n    *\n    * @exception IOException If an error occurs\n    */\n-  public final void writeUTF (String s) throws IOException\n+  public final void writeUTF (String val) throws IOException\n   {\n-    out.writeUTF(s);\n+    out.writeUTF(val);\n   }\n   \n   /**\n@@ -984,6 +984,4 @@ public final synchronized FileChannel getChannel ()\n   {\n     return ch;\n   }\n-\n-} // class RandomAccessFile\n-\n+}"}, {"sha": "18481ac697b1d1017159de8cc7f969325226759f", "filename": "libjava/java/io/Reader.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be06f47bc163661477f50bf46e103314f1c24498/libjava%2Fjava%2Fio%2FReader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be06f47bc163661477f50bf46e103314f1c24498/libjava%2Fjava%2Fio%2FReader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FReader.java?ref=be06f47bc163661477f50bf46e103314f1c24498", "patch": "@@ -103,7 +103,7 @@ protected Reader(Object lock)\n    *\n    * @param buf The array into which the chars read should be stored\n    * @param offset The offset into the array to start storing chars\n-   * @param len The requested number of chars to read\n+   * @param count The requested number of chars to read\n    *\n    * @return The actual number of chars read, or -1 if end of stream.\n    *\n@@ -189,7 +189,7 @@ public boolean markSupported()\n     * <code>reset()</code> method is called, then the mark is invalid and the \n     * stream object instance is not required to remember the mark.\n     *\n-    * @param readlimit The number of chars that can be read before the mark \n+    * @param readLimit The number of chars that can be read before the mark \n     *        becomes invalid\n     *\n     * @exception IOException If an error occurs such as mark not being \n@@ -243,7 +243,7 @@ public boolean ready() throws IOException\n     * override this method to provide a more efficient implementation where\n     * one exists.\n     *\n-    * @param num_chars The requested number of chars to skip\n+    * @param count The requested number of chars to skip\n     *\n     * @return The actual number of chars skipped.\n     *"}, {"sha": "dd6acb3fd367eccf73a024f8ba8501a86428517a", "filename": "libjava/java/io/StreamTokenizer.java", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be06f47bc163661477f50bf46e103314f1c24498/libjava%2Fjava%2Fio%2FStreamTokenizer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be06f47bc163661477f50bf46e103314f1c24498/libjava%2Fjava%2Fio%2FStreamTokenizer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FStreamTokenizer.java?ref=be06f47bc163661477f50bf46e103314f1c24498", "patch": "@@ -122,7 +122,7 @@\n    * them.  For details on how this method operates by default, see\n    * <code>StreamTokenizer(Reader)</code>.\n    *\n-   * @param in The <code>InputStream</code> to read from\n+   * @param is The <code>InputStream</code> to read from\n    *\n    * @deprecated Since JDK 1.1.\n    */\n@@ -150,7 +150,7 @@ public StreamTokenizer(InputStream is)\n    * <li>C  and C++ (//) comments are not recognized</li>\n    * </ul>\n    *\n-   * @param in The <code>Reader</code> to read chars from\n+   * @param r The <code>Reader</code> to read chars from\n    */\n   public StreamTokenizer(Reader r)\n   {\n@@ -170,7 +170,7 @@ public StreamTokenizer(Reader r)\n    * This method sets the comment attribute on the specified\n    * character.  Other attributes for the character are cleared.\n    *\n-   * @param c The character to set the comment attribute for, passed as an int\n+   * @param ch The character to set the comment attribute for, passed as an int\n    */\n   public void commentChar(int ch)\n   {\n@@ -517,7 +517,7 @@ private void resetChar(int ch)\n    * quote, or comment) will be set on this character.  This character will\n    * parse as its own token.\n    *\n-   * @param c The character to make ordinary, passed as an int\n+   * @param ch The character to make ordinary, passed as an int\n    */\n   public void ordinaryChar(int ch)\n   {\n@@ -533,9 +533,9 @@ public void ordinaryChar(int ch)\n    * range parse as its own token.\n    *\n    * @param low The low end of the range of values to set the whitespace\n-   *            attribute for\n-   * @param high The high end of the range of values to set the whitespace\n-   *            attribute for\n+   * attribute for\n+   * @param hi The high end of the range of values to set the whitespace\n+   * attribute for\n    */\n   public void ordinaryChars(int low, int hi)\n   {\n@@ -575,7 +575,7 @@ public void pushBack()\n    * This method sets the quote attribute on the specified character.\n    * Other attributes for the character are cleared.\n    *\n-   * @param c The character to set the quote attribute for, passed as an int.\n+   * @param ch The character to set the quote attribute for, passed as an int.\n    */\n   public void quoteChar(int ch)\n   {\n@@ -670,9 +670,9 @@ else if (ttype == TT_NONE)\n    * specified range, range terminators included.\n    *\n    * @param low The low end of the range of values to set the whitespace\n-   *            attribute for\n-   * @param high The high end of the range of values to set the whitespace\n-   *             attribute for\n+   * attribute for\n+   * @param hi The high end of the range of values to set the whitespace\n+   * attribute for\n    */\n   public void whitespaceChars(int low, int hi)\n   {\n@@ -692,9 +692,9 @@ public void whitespaceChars(int low, int hi)\n    * specified range, range terminators included.\n    *\n    * @param low The low end of the range of values to set the alphabetic\n-   *            attribute for\n-   * @param high The high end of the range of values to set the alphabetic\n-   *             attribute for\n+   * attribute for\n+   * @param hi The high end of the range of values to set the alphabetic\n+   * attribute for\n    */\n   public void wordChars(int low, int hi)\n   {"}, {"sha": "372f5c013cf880d297d4627220109f6cb17708ee", "filename": "libjava/java/io/StringReader.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be06f47bc163661477f50bf46e103314f1c24498/libjava%2Fjava%2Fio%2FStringReader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be06f47bc163661477f50bf46e103314f1c24498/libjava%2Fjava%2Fio%2FStringReader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FStringReader.java?ref=be06f47bc163661477f50bf46e103314f1c24498", "patch": "@@ -52,7 +52,7 @@\n  * method rewinds the read pointer to the beginning of the <code>String</code>.\n  *\n  * @author Aaron M. Renn (arenn@urbanophile.com)\n- * @author Warren Levy <warrenl@cygnus.com>\n+ * @author Warren Levy (warrenl@cygnus.com)\n  * @date October 19, 1998.  \n  */\n public class StringReader extends Reader\n@@ -74,7 +74,7 @@ public class StringReader extends Reader\n    * passed in <code>String</code>.  This stream will read from the beginning \n    * to the end of the <code>String</code>.\n    *\n-   * @param s The <code>String</code> this stream will read from.\n+   * @param buffer The <code>String</code> this stream will read from.\n    */\n   public StringReader(String buffer)\n   {\n@@ -185,7 +185,7 @@ public void reset() throws IOException\n     * buffer, then only enough chars are skipped to position the stream at\n     * the end of the buffer.  The actual number of chars skipped is returned.\n     *\n-    * @param num_chars The requested number of chars to skip\n+    * @param n The requested number of chars to skip\n     *\n     * @return The actual number of chars skipped.\n     */"}, {"sha": "dea4e3b444b48b6eff256d235f9286f9ba4e7886", "filename": "libjava/java/net/NetworkInterface.java", "status": "modified", "additions": 30, "deletions": 20, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be06f47bc163661477f50bf46e103314f1c24498/libjava%2Fjava%2Fnet%2FNetworkInterface.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be06f47bc163661477f50bf46e103314f1c24498/libjava%2Fjava%2Fnet%2FNetworkInterface.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FNetworkInterface.java?ref=be06f47bc163661477f50bf46e103314f1c24498", "patch": "@@ -1,5 +1,5 @@\n /* NetworkInterface.java --\n-   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -85,14 +85,14 @@ public String getName()\n   }\n \n   /**\n-   *  Returns all available addresses of the network interface\n+   * Returns all available addresses of the network interface\n    *\n-   *  If a @see SecurityManager is available all addresses are checked\n-   *  with @see SecurityManager::checkConnect() if they are available.\n-   *  Only <code>InetAddresses</code> are returned where the security manager\n-   *  doesn't throw an exception.\n+   * If a @see SecurityManager is available all addresses are checked\n+   * with @see SecurityManager::checkConnect() if they are available.\n+   * Only <code>InetAddresses</code> are returned where the security manager\n+   * doesn't throw an exception.\n    *\n-   *  @return An enumeration of all addresses.\n+   * @return An enumeration of all addresses.\n    */\n   public Enumeration getInetAddresses()\n   {\n@@ -122,9 +122,9 @@ public Enumeration getInetAddresses()\n   }\n \n   /**\n-   *  Returns the display name of the interface\n+   * Returns the display name of the interface\n    *\n-   *  @return The display name of the interface\n+   * @return The display name of the interface\n    */\n   public String getDisplayName()\n   {\n@@ -160,12 +160,14 @@ public static NetworkInterface getByName(String name)\n   }\n \n   /**\n-   *  Return a network interface by its address\n+   * Return a network interface by its address\n    *\n-   *  @param addr The address of the interface to return\n+   * @param addr The address of the interface to return\n    *\n-   *  @exception SocketException If an error occurs\n-   *  @exception NullPointerException If the specified addess is null\n+   * @return the interface, or <code>null</code> if none found\n+   *\n+   * @exception SocketException If an error occurs\n+   * @exception NullPointerException If the specified addess is null\n    */\n   public static NetworkInterface getByInetAddress(InetAddress addr)\n     throws SocketException\n@@ -189,9 +191,11 @@ public static NetworkInterface getByInetAddress(InetAddress addr)\n   }\n \n   /**\n-   *  Return an <code>Enumeration</code> of all available network interfaces\n+   * Return an <code>Enumeration</code> of all available network interfaces\n    *\n-   *  @exception SocketException If an error occurs\n+   * @return all interfaces\n+   * \n+   * @exception SocketException If an error occurs\n    */\n   public static Enumeration getNetworkInterfaces() throws SocketException\n   {\n@@ -204,9 +208,11 @@ public static Enumeration getNetworkInterfaces() throws SocketException\n   }\n \n   /**\n-   *  Checks if the current instance is equal to obj\n+   * Checks if the current instance is equal to obj\n    *\n-   *  @param obj The object to compare with\n+   * @param obj The object to compare with\n+   *\n+   * @return <code>true</code> if equal, <code>false<code> otherwise\n    */\n   public boolean equals(Object obj)\n   {\n@@ -219,7 +225,9 @@ public boolean equals(Object obj)\n   }\n \n   /**\n-   *  Returns the hashcode of the current instance\n+   * Returns the hashcode of the current instance\n+   *\n+   * @return the hashcode\n    */\n   public int hashCode()\n   {\n@@ -228,7 +236,9 @@ public int hashCode()\n   }\n \n   /**\n-   *  Returns a string representation of the interface\n+   * Returns a string representation of the interface\n+   *\n+   * @return the string\n    */\n   public String toString()\n   {\n@@ -248,4 +258,4 @@ public String toString()\n \n     return result;\n   }\n-} // class NetworkInterface\n+}"}, {"sha": "b641e704e1f3874b19cd0f8fcd713f0f5b7ff54b", "filename": "libjava/java/net/URLClassLoader.java", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be06f47bc163661477f50bf46e103314f1c24498/libjava%2Fjava%2Fnet%2FURLClassLoader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be06f47bc163661477f50bf46e103314f1c24498/libjava%2Fjava%2Fnet%2FURLClassLoader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLClassLoader.java?ref=be06f47bc163661477f50bf46e103314f1c24498", "patch": "@@ -1097,6 +1097,8 @@ public URL[] getURLs()\n    * @param urls the initial URLs used to resolve classes and\n    * resources\n    *\n+   * @return the class loader\n+   *\n    * @exception SecurityException when the calling code does not have\n    * permission to access the given <code>URL</code>s\n    */\n@@ -1115,6 +1117,8 @@ public static URLClassLoader newInstance(URL[] urls)\n    * resources\n    * @param parent the parent class loader\n    *\n+   * @return the class loader\n+   *\n    * @exception SecurityException when the calling code does not have\n    * permission to access the given <code>URL</code>s\n    */"}, {"sha": "3c3911193cbdca932a2f00b70d729c709c1ad071", "filename": "libjava/java/nio/ByteOrder.java", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be06f47bc163661477f50bf46e103314f1c24498/libjava%2Fjava%2Fnio%2FByteOrder.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be06f47bc163661477f50bf46e103314f1c24498/libjava%2Fjava%2Fnio%2FByteOrder.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FByteOrder.java?ref=be06f47bc163661477f50bf46e103314f1c24498", "patch": "@@ -1,5 +1,5 @@\n /* ByteOrder.java -- \n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -39,16 +39,25 @@\n package java.nio;\n \n /**\n- * @author Michael Koch\n+ * @author Michael Koch (konqueror@gmx.de)\n  * @since 1.4\n  */\n public final class ByteOrder\n {\n+  /**\n+   * Constant indicating big endian byte order.\n+   */\n   public static final ByteOrder BIG_ENDIAN = new ByteOrder();\n-  public static final ByteOrder LITTLE_ENDIAN  = new ByteOrder();\n+\n+  /**\n+   * Constant indicating little endian byte order.\n+   */\n+  public static final ByteOrder LITTLE_ENDIAN = new ByteOrder();\n \n   /**\n    * Returns the native byte order of the platform currently running.\n+   *\n+   * @return the native byte order\n    */\n   public static ByteOrder nativeOrder()\n   {\n@@ -58,6 +67,8 @@ public static ByteOrder nativeOrder()\n \n   /**\n    * Returns a string representation of the byte order.\n+   *\n+   * @return the string\n    */\n   public String toString()\n   {"}, {"sha": "8e73f87f88f3989d692e2e03c7a835c13eb82765", "filename": "libjava/java/nio/channels/Channel.java", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be06f47bc163661477f50bf46e103314f1c24498/libjava%2Fjava%2Fnio%2Fchannels%2FChannel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be06f47bc163661477f50bf46e103314f1c24498/libjava%2Fjava%2Fnio%2Fchannels%2FChannel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FChannel.java?ref=be06f47bc163661477f50bf46e103314f1c24498", "patch": "@@ -1,5 +1,5 @@\n /* Channel.java --\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -35,15 +35,18 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n+\n package java.nio.channels;\n \n import java.io.IOException;\n \n-\n public interface Channel\n {\n   /**\n    * Tells whether this channel is open or not\n+   *\n+   * @return <code>true</code>if channel is open,\n+   * </code>false</code> otherwise\n    */\n   boolean isOpen();\n "}]}