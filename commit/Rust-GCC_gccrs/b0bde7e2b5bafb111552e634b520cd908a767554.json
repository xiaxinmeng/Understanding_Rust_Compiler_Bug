{"sha": "b0bde7e2b5bafb111552e634b520cd908a767554", "node_id": "C_kwDOANBUbNoAKGIwYmRlN2UyYjViYWZiMTExNTUyZTYzNGI1MjBjZDkwOGE3Njc1NTQ", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-10-26T15:00:55Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-10-28T08:37:28Z"}, "message": "intrinsics: Implement atomic_load intrinsics\n\nThis commit also comments out the definition of the generic atomic_store\nbuiltins, with an explanation as to why\n\nCo-authored-by: Marc Poulhies <dkm@kataplop.net>", "tree": {"sha": "7c63ca8754b1e1e01ead36f833cb8bc0df791dea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c63ca8754b1e1e01ead36f833cb8bc0df791dea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0bde7e2b5bafb111552e634b520cd908a767554", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0bde7e2b5bafb111552e634b520cd908a767554", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0bde7e2b5bafb111552e634b520cd908a767554", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0bde7e2b5bafb111552e634b520cd908a767554/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e08acbf2c5747089eb278f8b2addf161077322e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e08acbf2c5747089eb278f8b2addf161077322e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e08acbf2c5747089eb278f8b2addf161077322e"}], "stats": {"total": 177, "additions": 144, "deletions": 33}, "files": [{"sha": "66b3becc47a217e153aad8c7686c436f29d1301a", "filename": "gcc/rust/backend/rust-builtins.cc", "status": "modified", "additions": 31, "deletions": 25, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0bde7e2b5bafb111552e634b520cd908a767554/gcc%2Frust%2Fbackend%2Frust-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0bde7e2b5bafb111552e634b520cd908a767554/gcc%2Frust%2Fbackend%2Frust-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-builtins.cc?ref=b0bde7e2b5bafb111552e634b520cd908a767554", "patch": "@@ -71,36 +71,42 @@ BuiltinsContext::setup_math_fns ()\n void\n BuiltinsContext::setup_atomic_fns ()\n {\n-  define_builtin (\"atomic_store\", BUILT_IN_ATOMIC_STORE, \"__atomic_store\", NULL,\n-\t\t  build_function_type_list (void_type_node, size_type_node,\n-\t\t\t\t\t    build_pointer_type (void_type_node),\n-\t\t\t\t\t    const_ptr_type_node,\n-\t\t\t\t\t    integer_type_node, NULL_TREE),\n-\t\t  0);\n-  define_builtin (\"atomic_store_n\", BUILT_IN_ATOMIC_STORE_N, \"__atomic_store_n\",\n-\t\t  NULL,\n-\t\t  build_varargs_function_type_list (void_type_node, NULL_TREE),\n-\t\t  0);\n+  auto atomic_store_type\n+    = build_varargs_function_type_list (void_type_node, NULL_TREE);\n+  auto atomic_load_type = [] (tree ret_type_node) {\n+    return build_function_type_list (ret_type_node,\n+\t\t\t\t     ptr_type_node, // const_ptr_type_node?\n+\t\t\t\t     integer_type_node, NULL_TREE);\n+  };\n+\n+  // FIXME: These should be the definition for the generic version of the\n+  // atomic_store builtins, but I cannot get them to work properly. Revisit\n+  // later. define_builtin (\"atomic_store\", BUILT_IN_ATOMIC_STORE,\n+  // \"__atomic_store\", NULL,\n+  //   atomic_store_type, 0);\n+  // define_builtin (\"atomic_store_n\", BUILT_IN_ATOMIC_STORE_N,\n+  // \"__atomic_store_n\",\n+  //   NULL, atomic_store_type, 0);\n+\n   define_builtin (\"atomic_store_1\", BUILT_IN_ATOMIC_STORE_1, \"__atomic_store_1\",\n-\t\t  NULL,\n-\t\t  build_varargs_function_type_list (void_type_node, NULL_TREE),\n-\t\t  0);\n+\t\t  NULL, atomic_store_type, 0);\n   define_builtin (\"atomic_store_2\", BUILT_IN_ATOMIC_STORE_2, \"__atomic_store_2\",\n-\t\t  NULL,\n-\t\t  build_varargs_function_type_list (void_type_node, NULL_TREE),\n-\t\t  0);\n+\t\t  NULL, atomic_store_type, 0);\n   define_builtin (\"atomic_store_4\", BUILT_IN_ATOMIC_STORE_4, \"__atomic_store_4\",\n-\t\t  NULL,\n-\t\t  build_varargs_function_type_list (void_type_node, NULL_TREE),\n-\t\t  0);\n+\t\t  NULL, atomic_store_type, 0);\n   define_builtin (\"atomic_store_8\", BUILT_IN_ATOMIC_STORE_8, \"__atomic_store_8\",\n-\t\t  NULL,\n-\t\t  build_varargs_function_type_list (void_type_node, NULL_TREE),\n-\t\t  0);\n+\t\t  NULL, atomic_store_type, 0);\n   define_builtin (\"atomic_store_16\", BUILT_IN_ATOMIC_STORE_16,\n-\t\t  \"__atomic_store_16\", NULL,\n-\t\t  build_varargs_function_type_list (void_type_node, NULL_TREE),\n-\t\t  0);\n+\t\t  \"__atomic_store_16\", NULL, atomic_store_type, 0);\n+\n+  define_builtin (\"atomic_load_1\", BUILT_IN_ATOMIC_LOAD_1, \"__atomic_load_1\",\n+\t\t  NULL, atomic_load_type (integer_type_node), 0);\n+  define_builtin (\"atomic_load_2\", BUILT_IN_ATOMIC_LOAD_2, \"__atomic_load_2\",\n+\t\t  NULL, atomic_load_type (integer_type_node), 0);\n+  define_builtin (\"atomic_load_4\", BUILT_IN_ATOMIC_LOAD_4, \"__atomic_load_4\",\n+\t\t  NULL, atomic_load_type (integer_type_node), 0);\n+  define_builtin (\"atomic_load_8\", BUILT_IN_ATOMIC_LOAD_8, \"__atomic_load_8\",\n+\t\t  NULL, atomic_load_type (integer_type_node), 0);\n }\n \n void"}, {"sha": "552221163666196566846b71e514c02bf0dccf2e", "filename": "gcc/rust/backend/rust-compile-intrinsic.cc", "status": "modified", "additions": 82, "deletions": 6, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0bde7e2b5bafb111552e634b520cd908a767554/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0bde7e2b5bafb111552e634b520cd908a767554/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc?ref=b0bde7e2b5bafb111552e634b520cd908a767554", "patch": "@@ -120,6 +120,8 @@ prefetch_write_data (Context *ctx, TyTy::FnType *fntype)\n \n static tree\n atomic_store_handler_inner (Context *ctx, TyTy::FnType *fntype, int ordering);\n+static tree\n+atomic_load_handler_inner (Context *ctx, TyTy::FnType *fntype, int ordering);\n \n static inline std::function<tree (Context *, TyTy::FnType *)>\n atomic_store_handler (int ordering)\n@@ -129,6 +131,14 @@ atomic_store_handler (int ordering)\n   };\n }\n \n+static inline std::function<tree (Context *, TyTy::FnType *)>\n+atomic_load_handler (int ordering)\n+{\n+  return [ordering] (Context *ctx, TyTy::FnType *fntype) {\n+    return atomic_load_handler_inner (ctx, fntype, ordering);\n+  };\n+}\n+\n static inline tree\n unchecked_op_inner (Context *ctx, TyTy::FnType *fntype, tree_code op);\n \n@@ -140,7 +150,7 @@ unchecked_op_handler (tree_code op)\n   };\n }\n \n-static inline tree\n+inline tree\n sorry_handler (Context *ctx, TyTy::FnType *fntype)\n {\n   rust_sorry_at (fntype->get_locus (), \"intrinsic %qs is not yet implemented\",\n@@ -163,11 +173,14 @@ static const std::map<std::string,\n     {\"copy_nonoverlapping\", copy_nonoverlapping_handler},\n     {\"prefetch_read_data\", prefetch_read_data},\n     {\"prefetch_write_data\", prefetch_write_data},\n-    {\"atomic_load\", sorry_handler},\n     {\"atomic_store_seqcst\", atomic_store_handler (__ATOMIC_SEQ_CST)},\n     {\"atomic_store_release\", atomic_store_handler (__ATOMIC_RELEASE)},\n     {\"atomic_store_relaxed\", atomic_store_handler (__ATOMIC_RELAXED)},\n     {\"atomic_store_unordered\", atomic_store_handler (__ATOMIC_RELAXED)},\n+    {\"atomic_load_seqcst\", atomic_load_handler (__ATOMIC_SEQ_CST)},\n+    {\"atomic_load_acquire\", atomic_load_handler (__ATOMIC_ACQUIRE)},\n+    {\"atomic_load_relaxed\", atomic_load_handler (__ATOMIC_RELAXED)},\n+    {\"atomic_load_unordered\", atomic_load_handler (__ATOMIC_RELAXED)},\n     {\"unchecked_add\", unchecked_op_handler (PLUS_EXPR)},\n     {\"unchecked_sub\", unchecked_op_handler (MINUS_EXPR)},\n     {\"unchecked_mul\", unchecked_op_handler (MULT_EXPR)},\n@@ -668,7 +681,8 @@ prefetch_data_handler (Context *ctx, TyTy::FnType *fntype, Prefetch kind)\n }\n \n static std::string\n-build_atomic_builtin_name (Location locus, TyTy::BaseType *operand_type)\n+build_atomic_builtin_name (const std::string &prefix, Location locus,\n+\t\t\t   TyTy::BaseType *operand_type)\n {\n   static const std::map<std::string, std::string> allowed_types = {\n     {\"i8\", \"1\"},    {\"i16\", \"2\"},   {\"i32\", \"4\"},   {\"i64\", \"8\"},\n@@ -679,7 +693,7 @@ build_atomic_builtin_name (Location locus, TyTy::BaseType *operand_type)\n   // TODO: Can we maybe get the generic version (atomic_store_n) to work... This\n   // would be so much better\n \n-  std::string result = \"atomic_store_\";\n+  std::string result = prefix;\n \n   auto type_name = operand_type->get_name ();\n   if (type_name == \"usize\" || type_name == \"isize\")\n@@ -735,7 +749,8 @@ atomic_store_handler_inner (Context *ctx, TyTy::FnType *fntype, int ordering)\n     = fntype->get_substs ()[0].get_param_ty ()->resolve ();\n \n   auto builtin_name\n-    = build_atomic_builtin_name (fntype->get_locus (), monomorphized_type);\n+    = build_atomic_builtin_name (\"atomic_store_\", fntype->get_locus (),\n+\t\t\t\t monomorphized_type);\n   if (builtin_name.empty ())\n     return error_mark_node;\n \n@@ -751,7 +766,6 @@ atomic_store_handler_inner (Context *ctx, TyTy::FnType *fntype, int ordering)\n     = ctx->get_backend ()->call_expression (atomic_store,\n \t\t\t\t\t    {dst, value, memorder}, nullptr,\n \t\t\t\t\t    Location ());\n-\n   TREE_READONLY (store_call) = 0;\n   TREE_SIDE_EFFECTS (store_call) = 1;\n \n@@ -761,6 +775,68 @@ atomic_store_handler_inner (Context *ctx, TyTy::FnType *fntype, int ordering)\n   return fndecl;\n }\n \n+static tree\n+atomic_load_handler_inner (Context *ctx, TyTy::FnType *fntype, int ordering)\n+{\n+  rust_assert (fntype->get_params ().size () == 1);\n+  rust_assert (fntype->get_num_substitutions () == 1);\n+\n+  tree lookup = NULL_TREE;\n+  if (check_for_cached_intrinsic (ctx, fntype, &lookup))\n+    return lookup;\n+\n+  auto fndecl = compile_intrinsic_function (ctx, fntype);\n+\n+  // Most intrinsic functions are pure but not the atomic ones\n+  // FIXME: Is atomic_load_* pure? Feels like it shouldn't so\n+  TREE_READONLY (fndecl) = 0;\n+  TREE_SIDE_EFFECTS (fndecl) = 1;\n+\n+  // setup the params\n+  std::vector<Bvariable *> param_vars;\n+  std::vector<tree> types;\n+  compile_fn_params (ctx, fntype, fndecl, &param_vars, &types);\n+\n+  auto ok = ctx->get_backend ()->function_set_parameters (fndecl, param_vars);\n+  rust_assert (ok);\n+\n+  enter_intrinsic_block (ctx, fndecl);\n+\n+  auto src = ctx->get_backend ()->var_expression (param_vars[0], Location ());\n+  auto memorder = make_unsigned_long_tree (ctx, ordering);\n+\n+  auto monomorphized_type\n+    = fntype->get_substs ()[0].get_param_ty ()->resolve ();\n+\n+  auto builtin_name\n+    = build_atomic_builtin_name (\"atomic_load_\", fntype->get_locus (),\n+\t\t\t\t monomorphized_type);\n+  if (builtin_name.empty ())\n+    return error_mark_node;\n+\n+  tree atomic_load_raw = nullptr;\n+  BuiltinsContext::get ().lookup_simple_builtin (builtin_name,\n+\t\t\t\t\t\t &atomic_load_raw);\n+  rust_assert (atomic_load_raw);\n+\n+  auto atomic_load\n+    = build_fold_addr_expr_loc (Location ().gcc_location (), atomic_load_raw);\n+\n+  auto load_call\n+    = ctx->get_backend ()->call_expression (atomic_load, {src, memorder},\n+\t\t\t\t\t    nullptr, Location ());\n+  auto return_statement\n+    = ctx->get_backend ()->return_statement (fndecl, {load_call}, Location ());\n+\n+  TREE_READONLY (load_call) = 0;\n+  TREE_SIDE_EFFECTS (load_call) = 1;\n+\n+  ctx->add_statement (return_statement);\n+  finalize_intrinsic_block (ctx, fndecl);\n+\n+  return fndecl;\n+}\n+\n static inline tree\n unchecked_op_inner (Context *ctx, TyTy::FnType *fntype, tree_code op)\n {"}, {"sha": "5c131bd8aa290f94aebd730b1463e80f9aa78373", "filename": "gcc/testsuite/rust/compile/torture/intrinsics-3.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0bde7e2b5bafb111552e634b520cd908a767554/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0bde7e2b5bafb111552e634b520cd908a767554/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-3.rs?ref=b0bde7e2b5bafb111552e634b520cd908a767554", "patch": "@@ -1,9 +1,7 @@\n extern \"rust-intrinsic\" {\n     fn not_an_intrinsic();\n-    fn atomic_load(); // { dg-message \"sorry, unimplemented: intrinsic .atomic_load. is not yet implemented\" }\n }\n \n fn main() {\n     unsafe { not_an_intrinsic() }; // { dg-error \"unknown builtin intrinsic: not_an_intrinsic\" }\n-    unsafe { atomic_load() };\n }"}, {"sha": "28ed8ae78f12023f0f40e3a7c100cec74b73f19d", "filename": "gcc/testsuite/rust/execute/torture/atomic_load.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0bde7e2b5bafb111552e634b520cd908a767554/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fatomic_load.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0bde7e2b5bafb111552e634b520cd908a767554/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fatomic_load.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fatomic_load.rs?ref=b0bde7e2b5bafb111552e634b520cd908a767554", "patch": "@@ -0,0 +1,31 @@\n+trait Copy {}\n+\n+extern \"rust-intrinsic\" {\n+    pub fn atomic_load_seqcst<T: Copy>(src: *const T) -> T;\n+    pub fn atomic_load_acquire<T: Copy>(src: *const T) -> T;\n+    pub fn atomic_load_relaxed<T: Copy>(src: *const T) -> T;\n+    pub fn atomic_load_unordered<T: Copy>(src: *const T) -> T;\n+}\n+\n+fn main() -> i32 {\n+    let one;\n+    let two;\n+    let three;\n+    let four;\n+\n+    unsafe {\n+        let mut src = 1;\n+        one = atomic_load_seqcst(&src);\n+\n+        src = 2;\n+        two = atomic_load_acquire(&src);\n+\n+        src = 3;\n+        three = atomic_load_relaxed(&src);\n+\n+        src = 4;\n+        four = atomic_load_unordered(&src);\n+    }\n+\n+    (four + three + two + one) - 10\n+}"}]}