{"sha": "24994dd5d7ab1a37ef477afb97b4426a7ac4bcc8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQ5OTRkZDVkN2FiMWEzN2VmNDc3YWZiOTdiNDQyNmE3YWM0YmNjOA==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2000-03-17T18:15:53Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2000-03-17T18:15:53Z"}, "message": "Revert unapproved changes that were inadvertanly brought in with the previous\ndelta.\n\nFrom-SVN: r32608", "tree": {"sha": "8896ab1cf3b0161d8bcb31173f47eac57af35040", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8896ab1cf3b0161d8bcb31173f47eac57af35040"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24994dd5d7ab1a37ef477afb97b4426a7ac4bcc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24994dd5d7ab1a37ef477afb97b4426a7ac4bcc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24994dd5d7ab1a37ef477afb97b4426a7ac4bcc8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24994dd5d7ab1a37ef477afb97b4426a7ac4bcc8/comments", "author": null, "committer": null, "parents": [{"sha": "665f250366b2cd1528c32b0d7d2fea6aae006e85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/665f250366b2cd1528c32b0d7d2fea6aae006e85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/665f250366b2cd1528c32b0d7d2fea6aae006e85"}], "stats": {"total": 37, "additions": 0, "deletions": 37}, "files": [{"sha": "23b5d887fe8b47cdc9fb1fad2353e28ac4cdfc1c", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24994dd5d7ab1a37ef477afb97b4426a7ac4bcc8/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24994dd5d7ab1a37ef477afb97b4426a7ac4bcc8/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=24994dd5d7ab1a37ef477afb97b4426a7ac4bcc8", "patch": "@@ -250,22 +250,6 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n #define SUBTARGET_CPP_SPEC      \"\"\n #endif\n \n-#ifndef SUBTARGET_EXTRA_ASM_SPEC\n-#define SUBTARGET_EXTRA_ASM_SPEC\n-#endif\n-\n-#ifndef ASM_SPEC\n-#define ASM_SPEC \"\\\n-%{mbig-endian:-EB} \\\n-%{mcpu=*:-m%*} \\\n-%{march=*:-m%*} \\\n-%{mapcs-*:-mapcs-%*} \\\n-%{matpcs:-matpcs} \\\n-%{mapcs-float:-mfloat} \\\n-%{msoft-float:-mno-fpu} \\\n-%{mthumb-interwork:-mthumb-interwork} \\\n-\" SUBTARGET_EXTRA_ASM_SPEC\n-#endif\n \f\n /* Run-time Target Specification.  */\n #ifndef TARGET_VERSION\n@@ -337,15 +321,6 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n /* Nonzero if all call instructions should be indirect.  */\n #define ARM_FLAG_LONG_CALLS\t(1 << 15)\n \n-/* Set if ATPCS compliance is required.  Note there *are* some\n-   incompatabilities between APCS and ATPCS.  */\n-#define ARM_FLAG_ATPCS\t\t(1 << 16)\n-\n-/* Set if compatability with older versions of GCC is required,\n-   where struct { float a; } would be returned from a function\n-   by a hidden extra argument rather than in r0.  */\n-#define ARM_FLAG_BUGGY_RETURN_IN_MEMORY\t(1 << 17)\n-\n #define TARGET_APCS\t\t\t(target_flags & ARM_FLAG_APCS_FRAME)\n #define TARGET_POKE_FUNCTION_NAME\t(target_flags & ARM_FLAG_POKE)\n #define TARGET_FPE\t\t\t(target_flags & ARM_FLAG_FPE)\n@@ -363,8 +338,6 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n #define TARGET_ABORT_NORETURN\t\t(target_flags & ARM_FLAG_ABORT_NORETURN)\n #define TARGET_SINGLE_PIC_BASE\t\t(target_flags & ARM_FLAG_SINGLE_PIC_BASE)\n #define TARGET_LONG_CALLS\t\t(target_flags & ARM_FLAG_LONG_CALLS)\n-#define TARGET_ATPCS\t\t\t(target_flags & ARM_FLAG_ATPCS)\n-#define TARGET_BUGGY_RETURN_IN_MEMORY\t(target_flags & ARM_FLAG_BUGGY_RETURN_IN_MEMORY)\n \n /* SUBTARGET_SWITCHES is used to add flags on a per-config basis.\n    Bit 31 is reserved.  See riscix.h.  */\n@@ -426,12 +399,6 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n   {\"long-calls\",\t\tARM_FLAG_LONG_CALLS,\t\t\\\n      \"Generate call insns as indirect calls, if necessary\"},\t\\\n   {\"no-long-calls\",\t       -ARM_FLAG_LONG_CALLS, \"\"},\t\\\n-  {\"atpcs\",\t\t\tARM_FLAG_ATPCS, \t\t\\\n-    \"generate ATPCS compliant code, rather than APCS compliant code\" }, \\\n-  {\"no-atpcs\", \t\t       -ARM_FLAG_ATPCS,  \"\" },\t\t\\\n-  {\"buggy-return-in-memory\",\tARM_FLAG_BUGGY_RETURN_IN_MEMORY,\\\n-    \"return struct { float a; } in memory\" },\t\t\t\\\n-  {\"no-buggy-return-in-memory\",-ARM_FLAG_BUGGY_RETURN_IN_MEMORY, \"\" }, \\\n   SUBTARGET_SWITCHES\t\t\t\t\t\t\\\n   {\"\",\t\t\t\tTARGET_DEFAULT, \"\" }\t\t\\\n }\n@@ -2011,10 +1978,6 @@ extern int making_const_table;\n \n /* Handle pragmas for compatibility with Intel's compilers.  */\n #define HANDLE_PRAGMA(GET, UNGET, NAME) arm_process_pragma (GET, UNGET, NAME)\n-\n-/* Allow short-call attribute functions to be inlined.  */\n-#define FUNCTION_ATTRIBUTE_INLINABLE_P(fndecl) \\\n-  arm_function_attribute_inlineable_p (fndecl);\n \f\n /* Condition code information. */\n /* Given a comparison code (EQ, NE, etc.) and the first operand of a COMPARE,"}]}