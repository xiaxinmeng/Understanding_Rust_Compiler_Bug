{"sha": "9354a7d70caef1c94b8d0a66bb2fd4d86c037e7d", "node_id": "C_kwDOANBUbNoAKDkzNTRhN2Q3MGNhZWYxYzk0YjhkMGE2NmJiMmZkNGQ4NmMwMzdlN2Q", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-12-04T23:57:48Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-12-09T16:51:47Z"}, "message": "Pass GIMPLE statement to compute_objsize.\n\ngcc/ChangeLog:\n\n\t* gimple-ssa-warn-restrict.c (builtin_access::builtin_access): Pass\n\tGIMPLE statement to compute_objsize.\n\t* pointer-query.cc (compute_objsize): Add a statement argument.\n\t* pointer-query.h (compute_objsize): Define a new overload.", "tree": {"sha": "009f07629cb833adc2c57315f538162fafb13f0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/009f07629cb833adc2c57315f538162fafb13f0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9354a7d70caef1c94b8d0a66bb2fd4d86c037e7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9354a7d70caef1c94b8d0a66bb2fd4d86c037e7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9354a7d70caef1c94b8d0a66bb2fd4d86c037e7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9354a7d70caef1c94b8d0a66bb2fd4d86c037e7d/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9379fcb0d482cf4e2efd93b313523ab21fdc7da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9379fcb0d482cf4e2efd93b313523ab21fdc7da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9379fcb0d482cf4e2efd93b313523ab21fdc7da"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "ca2d4c2c32e045052e6420b5eef6ada71f196cec", "filename": "gcc/gimple-ssa-warn-restrict.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9354a7d70caef1c94b8d0a66bb2fd4d86c037e7d/gcc%2Fgimple-ssa-warn-restrict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9354a7d70caef1c94b8d0a66bb2fd4d86c037e7d/gcc%2Fgimple-ssa-warn-restrict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-restrict.c?ref=9354a7d70caef1c94b8d0a66bb2fd4d86c037e7d", "patch": "@@ -777,7 +777,7 @@ builtin_access::builtin_access (range_query *query, gimple *call,\n       if (!POINTER_TYPE_P (TREE_TYPE (addr)))\n \taddr = build1 (ADDR_EXPR, (TREE_TYPE (addr)), addr);\n \n-      if (tree dstsize = compute_objsize (addr, ostype))\n+      if (tree dstsize = compute_objsize (addr, call, ostype))\n \tdst.basesize = wi::to_offset (dstsize);\n       else if (POINTER_TYPE_P (TREE_TYPE (addr)))\n \tdst.basesize = HOST_WIDE_INT_MIN;\n@@ -791,7 +791,7 @@ builtin_access::builtin_access (range_query *query, gimple *call,\n       if (!POINTER_TYPE_P (TREE_TYPE (addr)))\n \taddr = build1 (ADDR_EXPR, (TREE_TYPE (addr)), addr);\n \n-      if (tree srcsize = compute_objsize (addr, ostype))\n+      if (tree srcsize = compute_objsize (addr, call, ostype))\n \tsrc.basesize = wi::to_offset (srcsize);\n       else if (POINTER_TYPE_P (TREE_TYPE (addr)))\n \tsrc.basesize = HOST_WIDE_INT_MIN;"}, {"sha": "c75c4da6b600f5eb7c61e3c7667363002b8c6166", "filename": "gcc/pointer-query.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9354a7d70caef1c94b8d0a66bb2fd4d86c037e7d/gcc%2Fpointer-query.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9354a7d70caef1c94b8d0a66bb2fd4d86c037e7d/gcc%2Fpointer-query.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpointer-query.cc?ref=9354a7d70caef1c94b8d0a66bb2fd4d86c037e7d", "patch": "@@ -1645,7 +1645,7 @@ handle_array_ref (tree aref, gimple *stmt, bool addr, int ostype,\n   offset_int orng[2];\n   tree off = pref->eval (TREE_OPERAND (aref, 1));\n   range_query *const rvals = qry ? qry->rvals : NULL;\n-  if (!get_offset_range (off, NULL, orng, rvals))\n+  if (!get_offset_range (off, stmt, orng, rvals))\n     {\n       /* Set ORNG to the maximum offset representable in ptrdiff_t.  */\n       orng[1] = wi::to_offset (TYPE_MAX_VALUE (ptrdiff_type_node));\n@@ -1732,7 +1732,7 @@ handle_mem_ref (tree mref, gimple *stmt, int ostype, access_ref *pref,\n   offset_int orng[2];\n   tree off = pref->eval (TREE_OPERAND (mref, 1));\n   range_query *const rvals = qry ? qry->rvals : NULL;\n-  if (!get_offset_range (off, NULL, orng, rvals))\n+  if (!get_offset_range (off, stmt, orng, rvals))\n     {\n       /* Set ORNG to the maximum offset representable in ptrdiff_t.  */\n       orng[1] = wi::to_offset (TYPE_MAX_VALUE (ptrdiff_type_node));\n@@ -1948,7 +1948,7 @@ compute_objsize_r (tree ptr, gimple *stmt, int ostype, access_ref *pref,\n \n       offset_int orng[2];\n       tree off = pref->eval (TREE_OPERAND (ptr, 1));\n-      if (get_offset_range (off, NULL, orng, rvals))\n+      if (get_offset_range (off, stmt, orng, rvals))\n \tpref->add_offset (orng[0], orng[1]);\n       else\n \tpref->add_max_offset ();\n@@ -2197,13 +2197,13 @@ compute_objsize (tree ptr, gimple *stmt, int ostype, access_ref *pref,\n    once callers transition to one of the two above.  */\n \n tree\n-compute_objsize (tree ptr, int ostype, tree *pdecl /* = NULL */,\n+compute_objsize (tree ptr, gimple *stmt, int ostype, tree *pdecl /* = NULL */,\n \t\t tree *poff /* = NULL */, range_query *rvals /* = NULL */)\n {\n   /* Set the initial offsets to zero and size to negative to indicate\n      none has been computed yet.  */\n   access_ref ref;\n-  tree size = compute_objsize (ptr, nullptr, ostype, &ref, rvals);\n+  tree size = compute_objsize (ptr, stmt, ostype, &ref, rvals);\n   if (!size || !ref.base0)\n     return NULL_TREE;\n "}, {"sha": "cbc87c86ed3f3b4692482dc6b92165a522fc9425", "filename": "gcc/pointer-query.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9354a7d70caef1c94b8d0a66bb2fd4d86c037e7d/gcc%2Fpointer-query.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9354a7d70caef1c94b8d0a66bb2fd4d86c037e7d/gcc%2Fpointer-query.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpointer-query.h?ref=9354a7d70caef1c94b8d0a66bb2fd4d86c037e7d", "patch": "@@ -260,8 +260,13 @@ inline tree compute_objsize (tree ptr, int ostype, access_ref *pref)\n }\n \n /* Legacy/transitional API.  Should not be used in new code.  */\n-extern tree compute_objsize (tree, int, tree * = nullptr, tree * = nullptr,\n-\t\t\t     range_query * = nullptr);\n+extern tree compute_objsize (tree, gimple *, int, tree * = nullptr,\n+\t\t\t     tree * = nullptr, range_query * = nullptr);\n+inline tree compute_objsize (tree ptr, int ostype, tree *pdecl = nullptr,\n+\t\t\t     tree *poff = nullptr, range_query *rvals = nullptr)\n+{\n+  return compute_objsize (ptr, nullptr, ostype, pdecl, poff, rvals);\n+}\n \n /* Return the field at the constant offset.  */\n extern tree field_at_offset (tree, tree, HOST_WIDE_INT,"}]}