{"sha": "0425d6f563d8b76eb4fcf2bf3ebb64cee85f6eca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQyNWQ2ZjU2M2Q4Yjc2ZWI0ZmNmMmJmM2ViYjY0Y2VlODVmNmVjYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-01-31T16:52:22Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-01-31T16:52:22Z"}, "message": "re PR tree-optimization/47538 (GNU Scientific Library miscompiled by gcc 4.6)\n\n\tPR tree-optimization/47538\n\t* tree-ssa-ccp.c (bit_value_binop_1): For uns computation use\n\ttype instead of r1type, except for comparisons.  For right\n\tshifts and comparisons punt if there are mismatches in\n\tsizetype vs. non-sizetype types.\n\n\t* gcc.c-torture/execute/pr47538.c: New test.\n\nCo-Authored-By: Richard Guenther <rguenther@suse.de>\n\nFrom-SVN: r169441", "tree": {"sha": "cf5d6a5c4c84d7cb898730f0e74189afecd15f95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf5d6a5c4c84d7cb898730f0e74189afecd15f95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0425d6f563d8b76eb4fcf2bf3ebb64cee85f6eca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0425d6f563d8b76eb4fcf2bf3ebb64cee85f6eca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0425d6f563d8b76eb4fcf2bf3ebb64cee85f6eca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0425d6f563d8b76eb4fcf2bf3ebb64cee85f6eca/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "529da9b5708d8c57072fe172ce8850c2c821846f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/529da9b5708d8c57072fe172ce8850c2c821846f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/529da9b5708d8c57072fe172ce8850c2c821846f"}], "stats": {"total": 106, "additions": 104, "deletions": 2}, "files": [{"sha": "f575543585ce95847d8321f4b88b5554afa6b627", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0425d6f563d8b76eb4fcf2bf3ebb64cee85f6eca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0425d6f563d8b76eb4fcf2bf3ebb64cee85f6eca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0425d6f563d8b76eb4fcf2bf3ebb64cee85f6eca", "patch": "@@ -1,3 +1,12 @@\n+2011-01-31  Jakub Jelinek  <jakub@redhat.com>\n+\t    Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/47538\n+\t* tree-ssa-ccp.c (bit_value_binop_1): For uns computation use\n+\ttype instead of r1type, except for comparisons.  For right\n+\tshifts and comparisons punt if there are mismatches in\n+\tsizetype vs. non-sizetype types.\n+\n 2011-01-31  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* doc/sourcebuild.texi (Effective-Target Keywords): Document"}, {"sha": "9f8550e03b5821050d6b2b8c55090a7d27dba6d0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0425d6f563d8b76eb4fcf2bf3ebb64cee85f6eca/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0425d6f563d8b76eb4fcf2bf3ebb64cee85f6eca/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0425d6f563d8b76eb4fcf2bf3ebb64cee85f6eca", "patch": "@@ -1,3 +1,8 @@\n+2011-01-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/47538\n+\t* gcc.c-torture/execute/pr47538.c: New test.\n+\n 2011-01-31  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR target/45325"}, {"sha": "99dea08431035ec84355bfd049d78d067619a704", "filename": "gcc/testsuite/gcc.c-torture/execute/pr47538.c", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0425d6f563d8b76eb4fcf2bf3ebb64cee85f6eca/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr47538.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0425d6f563d8b76eb4fcf2bf3ebb64cee85f6eca/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr47538.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr47538.c?ref=0425d6f563d8b76eb4fcf2bf3ebb64cee85f6eca", "patch": "@@ -0,0 +1,73 @@\n+/* PR tree-optimization/47538 */\n+\n+struct S\n+{\n+  double a, b, *c;\n+  unsigned long d;\n+};\n+\n+__attribute__((noinline, noclone)) void\n+foo (struct S *x, const struct S *y)\n+{\n+  const unsigned long n = y->d + 1;\n+  const double m = 0.25 * (y->b - y->a);\n+  x->a = y->a;\n+  x->b = y->b;\n+  if (n == 1)\n+    {\n+      x->c[0] = 0.;\n+    }\n+  else if (n == 2)\n+    {\n+      x->c[1] = m * y->c[0];\n+      x->c[0] = 2.0 * x->c[1];\n+    }\n+  else\n+    {\n+      double o = 0.0, p = 1.0;\n+      unsigned long i;\n+\n+      for (i = 1; i <= n - 2; i++)\n+\t{\n+\t  x->c[i] = m * (y->c[i - 1] - y->c[i + 1]) / (double) i;\n+\t  o += p * x->c[i];\n+\t  p = -p;\n+\t}\n+      x->c[n - 1] = m * y->c[n - 2] / (n - 1.0);\n+      o += p * x->c[n - 1];\n+      x->c[0] = 2.0 * o;\n+    }\n+}\n+\n+int\n+main (void)\n+{\n+  struct S x, y;\n+  double c[4] = { 10, 20, 30, 40 }, d[4], e[4] = { 118, 118, 118, 118 };\n+\n+  y.a = 10;\n+  y.b = 6;\n+  y.c = c;\n+  x.c = d;\n+  y.d = 3;\n+  __builtin_memcpy (d, e, sizeof d);\n+  foo (&x, &y);\n+  if (d[0] != 0 || d[1] != 20 || d[2] != 10 || d[3] != -10)\n+    __builtin_abort ();\n+  y.d = 2;\n+  __builtin_memcpy (d, e, sizeof d);\n+  foo (&x, &y);\n+  if (d[0] != 60 || d[1] != 20 || d[2] != -10 || d[3] != 118)\n+    __builtin_abort ();\n+  y.d = 1;\n+  __builtin_memcpy (d, e, sizeof d);\n+  foo (&x, &y);\n+  if (d[0] != -20 || d[1] != -10 || d[2] != 118 || d[3] != 118)\n+    __builtin_abort ();\n+  y.d = 0;\n+  __builtin_memcpy (d, e, sizeof d);\n+  foo (&x, &y);\n+  if (d[0] != 0 || d[1] != 118 || d[2] != 118 || d[3] != 118)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "8b8d996f5089c7edc8b8819c686484761ac60f05", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0425d6f563d8b76eb4fcf2bf3ebb64cee85f6eca/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0425d6f563d8b76eb4fcf2bf3ebb64cee85f6eca/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=0425d6f563d8b76eb4fcf2bf3ebb64cee85f6eca", "patch": "@@ -1768,8 +1768,8 @@ bit_value_binop_1 (enum tree_code code, tree type,\n \t\t   tree r1type, double_int r1val, double_int r1mask,\n \t\t   tree r2type, double_int r2val, double_int r2mask)\n {\n-  bool uns = (TREE_CODE (r1type) == INTEGER_TYPE\n-\t      && TYPE_IS_SIZETYPE (r1type) ? 0 : TYPE_UNSIGNED (r1type));\n+  bool uns = (TREE_CODE (type) == INTEGER_TYPE\n+\t      && TYPE_IS_SIZETYPE (type) ? 0 : TYPE_UNSIGNED (type));\n   /* Assume we'll get a constant result.  Use an initial varying value,\n      we fall back to varying in the end if necessary.  */\n   *mask = double_int_minus_one;\n@@ -1836,6 +1836,13 @@ bit_value_binop_1 (enum tree_code code, tree type,\n \t    }\n \t  else if (shift < 0)\n \t    {\n+\t      /* ???  We can have sizetype related inconsistencies in\n+\t\t the IL.  */\n+\t      if ((TREE_CODE (r1type) == INTEGER_TYPE\n+\t\t   && (TYPE_IS_SIZETYPE (r1type)\n+\t\t       ? 0 : TYPE_UNSIGNED (r1type))) != uns)\n+\t\tbreak;\n+\n \t      shift = -shift;\n \t      *mask = double_int_rshift (r1mask, shift,\n \t\t\t\t\t TYPE_PRECISION (type), !uns);\n@@ -1946,6 +1953,14 @@ bit_value_binop_1 (enum tree_code code, tree type,\n \tif (double_int_negative_p (r1mask) || double_int_negative_p (r2mask))\n \t  break;\n \n+\t/* For comparisons the signedness is in the comparison operands.  */\n+\tuns = (TREE_CODE (r1type) == INTEGER_TYPE\n+\t       && TYPE_IS_SIZETYPE (r1type) ? 0 : TYPE_UNSIGNED (r1type));\n+\t/* ???  We can have sizetype related inconsistencies in the IL.  */\n+\tif ((TREE_CODE (r2type) == INTEGER_TYPE\n+\t     && TYPE_IS_SIZETYPE (r2type) ? 0 : TYPE_UNSIGNED (r2type)) != uns)\n+\t  break;\n+\n \t/* If we know the most significant bits we know the values\n \t   value ranges by means of treating varying bits as zero\n \t   or one.  Do a cross comparison of the max/min pairs.  */"}]}