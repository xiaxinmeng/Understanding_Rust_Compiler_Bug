{"sha": "905d47a9507cc15446a517fce0aa050344fdeb53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA1ZDQ3YTk1MDdjYzE1NDQ2YTUxN2ZjZTBhYTA1MDM0NGZkZWI1Mw==", "commit": {"author": {"name": "Bud Davis", "email": "bdavis9659@comcast.net", "date": "2004-11-28T21:14:02Z"}, "committer": {"name": "Bud Davis", "email": "bdavis@gcc.gnu.org", "date": "2004-11-28T21:14:02Z"}, "message": "direct_io_2.f90: New test.\n\n2004-11-28  Bud Davis  <bdavis9659@comcast.net>\n\n        * gcc/gcc/gfortran.dg/direct_io_2.f90: New test.\n\n        * gcc/libgfortran/io/unix.c (mmap_alloc_w_a): check for a write\n\tto a location less than the mapped area.\n\nFrom-SVN: r91426", "tree": {"sha": "89d7f6bc7734d8a3ecf12aac0f4cbe7e31547a34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89d7f6bc7734d8a3ecf12aac0f4cbe7e31547a34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/905d47a9507cc15446a517fce0aa050344fdeb53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/905d47a9507cc15446a517fce0aa050344fdeb53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/905d47a9507cc15446a517fce0aa050344fdeb53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/905d47a9507cc15446a517fce0aa050344fdeb53/comments", "author": null, "committer": null, "parents": [{"sha": "856e49c207daeb5ef0d24e43e432f6215b24ef33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/856e49c207daeb5ef0d24e43e432f6215b24ef33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/856e49c207daeb5ef0d24e43e432f6215b24ef33"}], "stats": {"total": 56, "additions": 55, "deletions": 1}, "files": [{"sha": "7de43cf6b03a5fecdba203f5eff0150d705c2cf2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/905d47a9507cc15446a517fce0aa050344fdeb53/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/905d47a9507cc15446a517fce0aa050344fdeb53/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=905d47a9507cc15446a517fce0aa050344fdeb53", "patch": "@@ -1,3 +1,7 @@\n+2004-11-28  Bud Davis  <bdavis9659@comcast.net>\n+ \n+        * gfortran.dg/direct_io_2.f90: New test.\n+\n 2004-11-28  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \tPR target/18334"}, {"sha": "847ce2935b8bc23a60b191cb03fefc666d4c5f9c", "filename": "gcc/testsuite/gfortran.dg/direct_io_2.f90", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/905d47a9507cc15446a517fce0aa050344fdeb53/gcc%2Ftestsuite%2Fgfortran.dg%2Fdirect_io_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/905d47a9507cc15446a517fce0aa050344fdeb53/gcc%2Ftestsuite%2Fgfortran.dg%2Fdirect_io_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdirect_io_2.f90?ref=905d47a9507cc15446a517fce0aa050344fdeb53", "patch": "@@ -0,0 +1,44 @@\n+! { dg-do run }\n+!\n+! this testcase derived from NIST test FM413.FOR\n+! tests writing direct access files in ascending and descending\n+! REC's.\n+      PROGRAM FM413\n+      IMPLICIT LOGICAL (L)\n+      IMPLICIT CHARACTER*14 (C)\n+      OPEN (7, ACCESS = 'DIRECT', RECL = 80, STATUS='REPLACE' )\n+      IRECN = 13\n+      IREC = 13\n+      DO 4132 I = 1,100\n+      IREC = IREC + 2\n+      IRECN = IRECN + 2\n+      WRITE(7, REC = IREC) IPROG, IFILE, ITOTR, IRLGN, IRECN, IEOF,ICON21, ICON22, ICON31, ICON32, ICON33, ICON34, ICON55, ICON56\n+ 4132 CONTINUE\n+      IRECN = 216\n+      IREC = 216\n+      DO 4133 I=1,100\n+      IREC = IREC - 2\n+      IRECN = IRECN - 2\n+      WRITE(7, REC = IREC) IPROG, IFILE, ITOTR, IRLGN, IRECN, IEOF,ICON21, ICON22, ICON31, ICON32, ICON33, ICON34, ICON55, ICON56\n+ 4133 CONTINUE\n+      IRECCK = 13\n+      IRECN = 0\n+      IREC = 13\n+      IVCOMP = 0\n+      DO 4134 I = 1,100\n+      IREC = IREC + 2\n+      IRECCK = IRECCK + 2\n+      READ(7, REC = IREC) IPROG, IFILE, ITOTR, IRLGN, IRECN, IEOF,IVON21, IVON22, IVON31, IVON32, IVON33, IVON34, IVON55, IVON56\n+      IF (IRECN .NE. IRECCK) CALL ABORT\n+ 4134 CONTINUE\n+      IRECCK = 216\n+      IRECN = 0\n+      IREC = 216\n+      DO 4135 I = 1,100\n+      IREC = IREC - 2\n+      IRECCK = IRECCK - 2\n+      READ(7, REC = IREC)  IPROG, IFILE, ITOTR, IRLGN, IRECN, IEOF,IVON21, IVON22, IVON31, IVON32, IVON33, IVON34, IVON55, IVON56\n+      IF (IRECN .NE. IRECCK) CALL ABORT\n+ 4135 CONTINUE\n+      STOP\n+      END"}, {"sha": "761ec22886d44005ea1a2f359311df11513ce6b0", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/905d47a9507cc15446a517fce0aa050344fdeb53/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/905d47a9507cc15446a517fce0aa050344fdeb53/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=905d47a9507cc15446a517fce0aa050344fdeb53", "patch": "@@ -1,3 +1,8 @@\n+2004-11-28  Bud Davis  <bdavis9659@comcast.net>\n+\n+\t* io/unix.c (mmap_alloc_w_a): check for a write to a location\n+\tless than the mapped area.\n+\n 2004-11-27  Bud Davis  <bdavis9659@comcast.net>\n \n \tPR fortran/18364"}, {"sha": "2e9d9a4ba8c25f4c78e822c948113bac663e70b1", "filename": "libgfortran/io/unix.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/905d47a9507cc15446a517fce0aa050344fdeb53/libgfortran%2Fio%2Funix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/905d47a9507cc15446a517fce0aa050344fdeb53/libgfortran%2Fio%2Funix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.c?ref=905d47a9507cc15446a517fce0aa050344fdeb53", "patch": "@@ -667,7 +667,8 @@ mmap_alloc_w_at (unix_stream * s, int *len, gfc_offset where)\n     }\n \n   if ((s->buffer == NULL || s->buffer_offset > where ||\n-       where + *len > s->buffer_offset + s->active) &&\n+       where + *len > s->buffer_offset + s->active ||\n+       where < s->buffer_offset + s->active) &&\n       mmap_alloc (s, where, len) == FAILURE)\n     return NULL;\n "}]}