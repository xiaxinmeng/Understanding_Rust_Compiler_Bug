{"sha": "dcfb1a361ba787b4cf2b7488c6ee822bd7058bc6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNmYjFhMzYxYmE3ODdiNGNmMmI3NDg4YzZlZTgyMmJkNzA1OGJjNg==", "commit": {"author": {"name": "Marek Michalkiewicz", "email": "marekm@linux.org.pl", "date": "2001-01-05T19:08:46Z"}, "committer": {"name": "Denis Chertykov", "email": "denisc@gcc.gnu.org", "date": "2001-01-05T19:08:46Z"}, "message": "avr-protos.h (avr_peep2_scratch_safe): Prototype.\n\n\t* config/avr/avr-protos.h (avr_peep2_scratch_safe): Prototype.\n\t* config/avr/avr.c (avr_peep2_scratch_safe): New function.\n\t* config/avr/avr.md (all peepholes that request a scratch register):\n\tCall it, FAIL the peephole if not safe (in interrupt functions).\n\nCo-Authored-By: Denis Chertykov <denisc@overta.ru>\n\nFrom-SVN: r38718", "tree": {"sha": "e4d648976e35b05228dc75752f5f77e100691232", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4d648976e35b05228dc75752f5f77e100691232"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcfb1a361ba787b4cf2b7488c6ee822bd7058bc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcfb1a361ba787b4cf2b7488c6ee822bd7058bc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcfb1a361ba787b4cf2b7488c6ee822bd7058bc6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcfb1a361ba787b4cf2b7488c6ee822bd7058bc6/comments", "author": null, "committer": null, "parents": [{"sha": "cef3d50c9f37af32c3298a6f6bac0e1c90dd16d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cef3d50c9f37af32c3298a6f6bac0e1c90dd16d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cef3d50c9f37af32c3298a6f6bac0e1c90dd16d7"}], "stats": {"total": 65, "additions": 53, "deletions": 12}, "files": [{"sha": "e72e4e8181fec1872085d27d1bcef5c82e9df6fd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcfb1a361ba787b4cf2b7488c6ee822bd7058bc6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcfb1a361ba787b4cf2b7488c6ee822bd7058bc6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dcfb1a361ba787b4cf2b7488c6ee822bd7058bc6", "patch": "@@ -1,3 +1,11 @@\n+2001-01-05  Marek Michalkiewicz  <marekm@linux.org.pl>\n+\t    Denis Chertykov  <denisc@overta.ru>\n+\n+\t* config/avr/avr-protos.h (avr_peep2_scratch_safe): Prototype.\n+\t* config/avr/avr.c (avr_peep2_scratch_safe): New function.\n+\t* config/avr/avr.md (all peepholes that request a scratch register):\n+\tCall it, FAIL the peephole if not safe (in interrupt functions).\n+\n 2001-01-05  Mark Mitchell  <mark@codesourcery.com>\n \n \t* ggc-page.c (NUM_EXTRA_ORDERS): Hardwire to zero for now."}, {"sha": "5ebea175c3e68a995a9f85ee52c240c714923a1d", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcfb1a361ba787b4cf2b7488c6ee822bd7058bc6/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcfb1a361ba787b4cf2b7488c6ee822bd7058bc6/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=dcfb1a361ba787b4cf2b7488c6ee822bd7058bc6", "patch": "@@ -1,6 +1,6 @@\n /* Prototypes for exported functions defined in avr.c\n    \n-   Copyright (C) 2000 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n    Contributed by Denis Chertykov (denisc@overta.ru)\n \n    This file is part of GNU CC.\n@@ -156,6 +156,7 @@ extern void   out_shift_with_cnt     PARAMS ((const char *template, rtx insn,\n \t\t\t\t\t      rtx operands[], int *len,\n \t\t\t\t\t      int t_len));\n extern int    const_int_pow2_p       PARAMS ((rtx x));\n+extern int    avr_peep2_scratch_safe PARAMS ((rtx reg_rtx));\n #endif /* RTX_CODE */\n \n #ifdef HAVE_MACHINE_MODES"}, {"sha": "9e396df89cc06286ce52ec4ea2b563f2195d1860", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcfb1a361ba787b4cf2b7488c6ee822bd7058bc6/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcfb1a361ba787b4cf2b7488c6ee822bd7058bc6/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=dcfb1a361ba787b4cf2b7488c6ee822bd7058bc6", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for insn-output.c for ATMEL AVR micro controllers\n-   Copyright (C) 1998, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n    Contributed by Denis Chertykov (denisc@overta.ru)\n \n    This file is part of GNU CC.\n@@ -5374,3 +5374,26 @@ avr_output_addr_vec_elt (stream, value)\n   jump_tables_size++;\n }\n \n+/* Returns 1 if SCRATCH are safe to be allocated as a scratch\n+   registers (for a define_peephole2) in the current function.  */\n+\n+int\n+avr_peep2_scratch_safe (scratch)\n+     rtx scratch;\n+{\n+  if ((interrupt_function_p (current_function_decl)\n+       || signal_function_p (current_function_decl))\n+      && leaf_function_p ())\n+    {\n+      int first_reg = true_regnum (scratch);\n+      int last_reg = first_reg + GET_MODE_SIZE (GET_MODE (scratch)) - 1;\n+      int reg;\n+\n+      for (reg = first_reg; reg <= last_reg; reg++)\n+\t{\n+\t  if (!regs_ever_live[reg])\n+\t    return 0;\n+\t}\n+    }\n+  return 1;\n+}"}, {"sha": "b822445fd9544550a12c602b309bfcfed82420c1", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcfb1a361ba787b4cf2b7488c6ee822bd7058bc6/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcfb1a361ba787b4cf2b7488c6ee822bd7058bc6/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=dcfb1a361ba787b4cf2b7488c6ee822bd7058bc6", "patch": "@@ -1,7 +1,7 @@\n ;; -*- Mode: Scheme -*-\n ;;   Machine description for GNU compiler,\n ;;   for ATMEL AVR micro controllers.\n-;;   Copyright (C) 1998, 1999, 2000 Free Software Foundation, Inc.\n+;;   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n ;;   Contributed by Denis Chertykov (denisc@overta.ru)\n \n ;; This file is part of GNU CC.\n@@ -200,7 +200,8 @@\n     && test_hard_reg_class (NO_LD_REGS, operands[0]))\"\n   [(parallel [(set (match_dup 0) (match_dup 1))\n \t      (clobber (match_dup 2))])]\n-  \"\")\n+  \"if (!avr_peep2_scratch_safe (operands[2]))\n+     FAIL;\")\n \n ;;============================================================================\n ;; move word (16 bit)\n@@ -228,7 +229,8 @@\n     && test_hard_reg_class (NO_LD_REGS, operands[0]))\"\n   [(parallel [(set (match_dup 0) (match_dup 1))\n \t      (clobber (match_dup 2))])]\n-  \"\")\n+  \"if (!avr_peep2_scratch_safe (operands[2]))\n+     FAIL;\")\n \n ;; '*' because it is not used in rtl generation, only in above peephole\n (define_insn \"*reload_inhi\"\n@@ -276,7 +278,8 @@\n     && test_hard_reg_class (NO_LD_REGS, operands[0]))\"\n   [(parallel [(set (match_dup 0) (match_dup 1))\n \t      (clobber (match_dup 2))])]\n-  \"\")\n+  \"if (!avr_peep2_scratch_safe (operands[2]))\n+     FAIL;\")\n \n ;; '*' because it is not used in rtl generation.\n (define_insn \"*reload_insi\"\n@@ -929,7 +932,8 @@\n   \"\"\n   [(parallel [(set (match_dup 0) (ashift:HI (match_dup 1) (match_dup 2)))\n \t      (clobber (match_dup 3))])]\n-  \"\")\n+  \"if (!avr_peep2_scratch_safe (operands[3]))\n+     FAIL;\")\n \n (define_insn \"*ashlhi3_const\"\n   [(set (match_operand:HI 0 \"register_operand\"            \"=r,r,r,r\")\n@@ -949,7 +953,8 @@\n   \"\"\n   [(parallel [(set (match_dup 0) (ashift:SI (match_dup 1) (match_dup 2)))\n \t      (clobber (match_dup 3))])]\n-  \"\")\n+  \"if (!avr_peep2_scratch_safe (operands[3]))\n+     FAIL;\")\n \n (define_insn \"*ashlsi3_const\"\n   [(set (match_operand:SI 0 \"register_operand\"            \"=r,r,r\")\n@@ -1001,7 +1006,8 @@\n   \"\"\n   [(parallel [(set (match_dup 0) (ashiftrt:HI (match_dup 1) (match_dup 2)))\n \t      (clobber (match_dup 3))])]\n-  \"\")\n+  \"if (!avr_peep2_scratch_safe (operands[3]))\n+     FAIL;\")\n \n (define_insn \"*ashrhi3_const\"\n   [(set (match_operand:HI 0 \"register_operand\"              \"=r,r,r,r\")\n@@ -1021,7 +1027,8 @@\n   \"\"\n   [(parallel [(set (match_dup 0) (ashiftrt:SI (match_dup 1) (match_dup 2)))\n \t      (clobber (match_dup 3))])]\n-  \"\")\n+  \"if (!avr_peep2_scratch_safe (operands[3]))\n+     FAIL;\")\n \n (define_insn \"*ashrsi3_const\"\n   [(set (match_operand:SI 0 \"register_operand\"              \"=r,r,r\")\n@@ -1073,7 +1080,8 @@\n   \"\"\n   [(parallel [(set (match_dup 0) (lshiftrt:HI (match_dup 1) (match_dup 2)))\n \t      (clobber (match_dup 3))])]\n-  \"\")\n+  \"if (!avr_peep2_scratch_safe (operands[3]))\n+     FAIL;\")\n \n (define_insn \"*lshrhi3_const\"\n   [(set (match_operand:HI 0 \"register_operand\"              \"=r,r,r,r\")\n@@ -1093,7 +1101,8 @@\n   \"\"\n   [(parallel [(set (match_dup 0) (lshiftrt:SI (match_dup 1) (match_dup 2)))\n \t      (clobber (match_dup 3))])]\n-  \"\")\n+  \"if (!avr_peep2_scratch_safe (operands[3]))\n+     FAIL;\")\n \n (define_insn \"*lshrsi3_const\"\n   [(set (match_operand:SI 0 \"register_operand\"              \"=r,r,r\")"}]}