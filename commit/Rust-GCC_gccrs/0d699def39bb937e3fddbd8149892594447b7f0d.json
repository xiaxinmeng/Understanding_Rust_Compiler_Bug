{"sha": "0d699def39bb937e3fddbd8149892594447b7f0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ2OTlkZWYzOWJiOTM3ZTNmZGRiZDgxNDk4OTI1OTQ0NDdiN2YwZA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2018-12-06T23:18:30Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2018-12-06T23:18:30Z"}, "message": "[PR86397] resolve nondependent noexcept specs early in C++1[14]\n\nbuild_noexcept_spec refrained from resolving nondependent noexcept\nexpressions when they were not part of the function types (C++ 11 and\n14).  This caused problems during mangling: canonical_eh_spec, when\ncalled on the template function type, would find an unresolved but not\nexplicitly deferred expression, and nothrow_spec_p would reject it.\n\nWe could relax the mangling logic to skip canonical_eh_spec, but since\n-Wnoexcept-type warns when mangling function names that change as\nnoexcept specs become part of types and of mangling in C++17, and the\ntest at mangling time may give incorrect results if the spec is not\nresolved, we might as well keep things simple and resolve nondependent\nnoexcept specs sooner rather than later.  This is what this patch does.\n\n\nfor  gcc/cp/ChangeLog\n\n\tPR c++/86397\n\t* except.c (build_noexcept_spec): Resolve nondependent\n\texpressions.\n\nfor gcc/testsuite/ChangeLog\n\n\tPR c++/86397\n\t* g++.dg/cpp0x/pr86397-1.C: New.\n\t* g++.dg/cpp0x/pr86397-2.C: New.\n\nFrom-SVN: r266874", "tree": {"sha": "bc226370777bf810f190e77af3132a0a6126b99a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc226370777bf810f190e77af3132a0a6126b99a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d699def39bb937e3fddbd8149892594447b7f0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d699def39bb937e3fddbd8149892594447b7f0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d699def39bb937e3fddbd8149892594447b7f0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d699def39bb937e3fddbd8149892594447b7f0d/comments", "author": null, "committer": null, "parents": [{"sha": "695be0923410ad753e9d7bc377f992406f904e94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/695be0923410ad753e9d7bc377f992406f904e94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/695be0923410ad753e9d7bc377f992406f904e94"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "727f2d4f909f2cdd7207e044bef3477fdb7ff452", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d699def39bb937e3fddbd8149892594447b7f0d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d699def39bb937e3fddbd8149892594447b7f0d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0d699def39bb937e3fddbd8149892594447b7f0d", "patch": "@@ -1,3 +1,9 @@\n+2018-12-06  Alexandre Oliva <aoliva@redhat.com>\n+\n+\tPR c++/86397\n+\t* except.c (build_noexcept_spec): Resolve nondependent\n+\texpressions.\n+\n 2018-12-06  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/88136 - -Wdeprecated-copy false positives"}, {"sha": "ab1bd8267ff6ac8f8c1658f9254d7ce1a6bbf5d9", "filename": "gcc/cp/except.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d699def39bb937e3fddbd8149892594447b7f0d/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d699def39bb937e3fddbd8149892594447b7f0d/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=0d699def39bb937e3fddbd8149892594447b7f0d", "patch": "@@ -1189,11 +1189,8 @@ type_throw_all_p (const_tree type)\n tree\n build_noexcept_spec (tree expr, tsubst_flags_t complain)\n {\n-  /* This isn't part of the signature, so don't bother trying to evaluate\n-     it until instantiation.  */\n   if (TREE_CODE (expr) != DEFERRED_NOEXCEPT\n-      && (!processing_template_decl\n-\t  || (flag_noexcept_type && !value_dependent_expression_p (expr))))\n+      && !value_dependent_expression_p (expr))\n     {\n       expr = perform_implicit_conversion_flags (boolean_type_node, expr,\n \t\t\t\t\t\tcomplain,"}, {"sha": "eddb4576e0fde25fd5af1d60cf5e2b6c66b16f82", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d699def39bb937e3fddbd8149892594447b7f0d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d699def39bb937e3fddbd8149892594447b7f0d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0d699def39bb937e3fddbd8149892594447b7f0d", "patch": "@@ -1,3 +1,9 @@\n+2018-12-06  Alexandre Oliva <aoliva@redhat.com>\n+\n+\tPR c++/86397\n+\t* g++.dg/cpp0x/pr86397-1.C: New.\n+\t* g++.dg/cpp0x/pr86397-2.C: New.\n+\n 2018-12-06  Paul A. Clarke  <pc@us.ibm.com>\n \n \tPR target/88316"}, {"sha": "4f9f5fa7e4c844848775149de8a64712370b6f71", "filename": "gcc/testsuite/g++.dg/cpp0x/pr86397-1.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d699def39bb937e3fddbd8149892594447b7f0d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr86397-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d699def39bb937e3fddbd8149892594447b7f0d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr86397-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr86397-1.C?ref=0d699def39bb937e3fddbd8149892594447b7f0d", "patch": "@@ -0,0 +1,4 @@\n+// { dg-do compile { target c++11 } }\n+void e();\n+template <bool> void f(int() noexcept(e)) {}\n+template void f<false>(int()); // { dg-error \"does not match\" \"\" { target c++17 } }"}, {"sha": "fb43499526e8bc678230c296ea761a5425d0099f", "filename": "gcc/testsuite/g++.dg/cpp0x/pr86397-2.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d699def39bb937e3fddbd8149892594447b7f0d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr86397-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d699def39bb937e3fddbd8149892594447b7f0d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr86397-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr86397-2.C?ref=0d699def39bb937e3fddbd8149892594447b7f0d", "patch": "@@ -0,0 +1,4 @@\n+// { dg-do compile { target c++11 } }\n+void e();\n+template <bool> void f(int() noexcept(e)) {}\n+template void f<false>(int() noexcept);"}]}