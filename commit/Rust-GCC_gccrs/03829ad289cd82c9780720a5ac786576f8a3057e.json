{"sha": "03829ad289cd82c9780720a5ac786576f8a3057e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM4MjlhZDI4OWNkODJjOTc4MDcyMGE1YWM3ODY1NzZmOGEzMDU3ZQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-04-10T22:40:48Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-04-10T22:40:48Z"}, "message": "c-typeck.c (convert_arguments): -Wtraditional now activates -Wconversion warnings...\n\n\t* c-typeck.c (convert_arguments): -Wtraditional now activates\n\t-Wconversion warnings, except for changes in signed-ness.\n\tDetect complex<->int & int<->complex conversions as well.\n\n\t* invoke.texi (-Wtraditional): Document it.\n\ntestsuite:\n\t* gcc.dg/wtr-conversion-1.c: New testcase.\n\nFrom-SVN: r41232", "tree": {"sha": "14f371b41420981a5b3bd6f53eea6248dabb7a20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14f371b41420981a5b3bd6f53eea6248dabb7a20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03829ad289cd82c9780720a5ac786576f8a3057e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03829ad289cd82c9780720a5ac786576f8a3057e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03829ad289cd82c9780720a5ac786576f8a3057e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03829ad289cd82c9780720a5ac786576f8a3057e/comments", "author": null, "committer": null, "parents": [{"sha": "5a01d63496ac7664a6b6cff8b59fb37fe0f14fdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a01d63496ac7664a6b6cff8b59fb37fe0f14fdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a01d63496ac7664a6b6cff8b59fb37fe0f14fdd"}], "stats": {"total": 126, "additions": 121, "deletions": 5}, "files": [{"sha": "4785163d1d9cf9634cc33d02b4114c7c582bdf8a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03829ad289cd82c9780720a5ac786576f8a3057e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03829ad289cd82c9780720a5ac786576f8a3057e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=03829ad289cd82c9780720a5ac786576f8a3057e", "patch": "@@ -1,3 +1,11 @@\n+2001-04-10  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* c-typeck.c (convert_arguments): -Wtraditional now activates\n+\t-Wconversion warnings, except for changes in signed-ness.\n+\tDetect complex<->int & int<->complex conversions as well.\n+\n+\t* invoke.texi (-Wtraditional): Document it.\n+\n Tue Apr 10 17:45:50 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* gcse.c (update_ld_motion_stores): Don't use variable I for an insn."}, {"sha": "400e80d150c7c6b10fb722ae836856e45906898b", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03829ad289cd82c9780720a5ac786576f8a3057e/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03829ad289cd82c9780720a5ac786576f8a3057e/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=03829ad289cd82c9780720a5ac786576f8a3057e", "patch": "@@ -1676,19 +1676,25 @@ convert_arguments (typelist, values, name, fundecl)\n \t    {\n \t      /* Optionally warn about conversions that\n \t\t differ from the default conversions.  */\n-\t      if (warn_conversion)\n+\t      if (warn_conversion || warn_traditional)\n \t\t{\n \t\t  int formal_prec = TYPE_PRECISION (type);\n \n \t\t  if (INTEGRAL_TYPE_P (type)\n \t\t      && TREE_CODE (TREE_TYPE (val)) == REAL_TYPE)\n \t\t    warn_for_assignment (\"%s as integer rather than floating due to prototype\", (char *) 0, name, parmnum + 1);\n+\t\t  if (INTEGRAL_TYPE_P (type)\n+\t\t      && TREE_CODE (TREE_TYPE (val)) == COMPLEX_TYPE)\n+\t\t    warn_for_assignment (\"%s as integer rather than complex due to prototype\", (char *) 0, name, parmnum + 1);\n \t\t  else if (TREE_CODE (type) == COMPLEX_TYPE\n \t\t\t   && TREE_CODE (TREE_TYPE (val)) == REAL_TYPE)\n \t\t    warn_for_assignment (\"%s as complex rather than floating due to prototype\", (char *) 0, name, parmnum + 1);\n \t\t  else if (TREE_CODE (type) == REAL_TYPE\n \t\t\t   && INTEGRAL_TYPE_P (TREE_TYPE (val)))\n \t\t    warn_for_assignment (\"%s as floating rather than integer due to prototype\", (char *) 0, name, parmnum + 1);\n+\t\t  else if (TREE_CODE (type) == COMPLEX_TYPE\n+\t\t\t   && INTEGRAL_TYPE_P (TREE_TYPE (val)))\n+\t\t    warn_for_assignment (\"%s as complex rather than integer due to prototype\", (char *) 0, name, parmnum + 1);\n \t\t  else if (TREE_CODE (type) == REAL_TYPE\n \t\t\t   && TREE_CODE (TREE_TYPE (val)) == COMPLEX_TYPE)\n \t\t    warn_for_assignment (\"%s as floating rather than complex due to prototype\", (char *) 0, name, parmnum + 1);\n@@ -1749,10 +1755,15 @@ convert_arguments (typelist, values, name, fundecl)\n \t\t      else if (TYPE_PRECISION (TREE_TYPE (val)) < TYPE_PRECISION (type)\n \t\t\t       && TREE_UNSIGNED (TREE_TYPE (val)))\n \t\t\t;\n-\t\t      else if (TREE_UNSIGNED (type))\n-\t\t\twarn_for_assignment (\"%s as unsigned due to prototype\", (char *) 0, name, parmnum + 1);\n-\t\t      else\n-\t\t\twarn_for_assignment (\"%s as signed due to prototype\", (char *) 0, name, parmnum + 1);\n+\t\t      /* These warnings are only activated with\n+                         -Wconversion, not with -Wtraditional.  */\n+\t\t      else if (warn_conversion)\n+\t\t        {\n+\t\t\t  if (TREE_UNSIGNED (type))\n+\t\t\t    warn_for_assignment (\"%s as unsigned due to prototype\", (char *) 0, name, parmnum + 1);\n+\t\t\t  else\n+\t\t\t    warn_for_assignment (\"%s as signed due to prototype\", (char *) 0, name, parmnum + 1);\n+\t\t\t}\n \t\t    }\n \t\t}\n "}, {"sha": "8ce73e465c48cc75b69f9bbe492fd79fa658feef", "filename": "gcc/invoke.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03829ad289cd82c9780720a5ac786576f8a3057e/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03829ad289cd82c9780720a5ac786576f8a3057e/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=03829ad289cd82c9780720a5ac786576f8a3057e", "patch": "@@ -2122,6 +2122,11 @@ omitted.  This is done under the assumption that the zero initializer in\n user code appears conditioned on e.g. @code{__STDC__} to avoid missing\n initializer warnings and relies on default initialization to zero in the\n traditional C case.\n+\n+@item\n+Conversions by prototypes.  This is similar to @samp{-Wconversion} in\n+that it warns about width changes and fixed/floating point conversions,\n+however it does not warn about changes in signedness.\n @end itemize\n \n @item -Wundef"}, {"sha": "842a4b5ed659afb6545b966b6f993e4a30979cb4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03829ad289cd82c9780720a5ac786576f8a3057e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03829ad289cd82c9780720a5ac786576f8a3057e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=03829ad289cd82c9780720a5ac786576f8a3057e", "patch": "@@ -1,3 +1,7 @@\n+2001-04-10  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/wtr-conversion-1.c: New testcase.\n+\n 2001-04-10  Richard Henderson  <rth@redhat.com>\n \n \t* g++.old-deja/g++.other/array5.C: New."}, {"sha": "57dd818be52c6eb2b6130d8a0d54a2cdba52dbc0", "filename": "gcc/testsuite/gcc.dg/wtr-conversion-1.c", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03829ad289cd82c9780720a5ac786576f8a3057e/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-conversion-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03829ad289cd82c9780720a5ac786576f8a3057e/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-conversion-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-conversion-1.c?ref=03829ad289cd82c9780720a5ac786576f8a3057e", "patch": "@@ -0,0 +1,88 @@\n+/* Test for -Wtraditional warnings on conversions by prototypes.\n+   Note, gcc should omit these warnings in system header files.\n+   By Kaveh R. Ghazi <ghazi@caip.rutgers.edu> 4/09/2001.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wtraditional\" } */\n+\n+extern void foo_c (char);\n+extern void foo_ll (long long);\n+extern void foo_f (float);\n+extern void foo_ld (long double);\n+extern void foo_cd (__complex__ double);\n+\n+extern char c;\n+extern long long ll;\n+extern float f;\n+extern long double ld;\n+extern __complex__ double cd;\n+\n+void\n+testfunc1 (void)\n+{\n+  foo_c (c); /* { dg-warning \"with different width\" \"prototype conversion warning\" } */\n+  foo_c (ll); /* { dg-warning \"with different width\" \"prototype conversion warning\" } */\n+  foo_c (f); /* { dg-warning \"as integer rather than floating\" \"prototype conversion warning\" } */\n+  foo_c (ld); /* { dg-warning \"as integer rather than floating\" \"prototype conversion warning\" } */\n+  foo_c (cd); /* { dg-warning \"as integer rather than complex\" \"prototype conversion warning\" } */\n+\n+  foo_ll (c); /* { dg-warning \"with different width\" \"prototype conversion warning\" } */\n+  foo_ll (ll);\n+  foo_ll (f); /* { dg-warning \"as integer rather than floating\" \"prototype conversion warning\" } */\n+  foo_ll (ld); /* { dg-warning \"as integer rather than floating\" \"prototype conversion warning\" } */\n+  foo_ll (cd); /* { dg-warning \"as integer rather than complex\" \"prototype conversion warning\" } */\n+\n+  foo_f (c); /* { dg-warning \"as floating rather than integer\" \"prototype conversion warning\" } */\n+  foo_f (ll); /* { dg-warning \"as floating rather than integer\" \"prototype conversion warning\" } */\n+  foo_f (f); /* { dg-warning \"as `float' rather than `double'\" \"prototype conversion warning\" } */\n+  foo_f (ld); /* { dg-warning \"as `float' rather than `double'\" \"prototype conversion warning\" } */\n+  foo_f (cd); /* { dg-warning \"as floating rather than complex\" \"prototype conversion warning\" } */\n+\n+  foo_ld (c); /* { dg-warning \"as floating rather than integer\" \"prototype conversion warning\" } */\n+  foo_ld (ll); /* { dg-warning \"as floating rather than integer\" \"prototype conversion warning\" } */\n+  foo_ld (f);\n+  foo_ld (ld);\n+  foo_ld (cd); /* { dg-warning \"as floating rather than complex\" \"prototype conversion warning\" } */\n+\n+  foo_cd (c); /* { dg-warning \"as complex rather than integer\" \"prototype conversion warning\" } */\n+  foo_cd (ll); /* { dg-warning \"as complex rather than integer\" \"prototype conversion warning\" } */\n+  foo_cd (f); /* { dg-warning \"as complex rather than floating\" \"prototype conversion warning\" } */\n+  foo_cd (ld); /* { dg-warning \"as complex rather than floating\" \"prototype conversion warning\" } */\n+  foo_cd (cd);\n+}\n+  \n+# 54 \"sys-header.h\" 3\n+/* We are in system headers now, no -Wtraditional warnings should issue.  */\n+\n+void\n+testfunc2 (void)\n+{\n+  foo_c (c);\n+  foo_c (ll);\n+  foo_c (f);\n+  foo_c (ld);\n+  foo_c (cd);\n+\n+  foo_ll (c);\n+  foo_ll (ll);\n+  foo_ll (f);\n+  foo_ll (ld);\n+  foo_ll (cd);\n+\n+  foo_f (c);\n+  foo_f (ll);\n+  foo_f (f);\n+  foo_f (ld);\n+  foo_f (cd);\n+\n+  foo_ld (c);\n+  foo_ld (ll);\n+  foo_ld (f);\n+  foo_ld (ld);\n+  foo_ld (cd);\n+\n+  foo_cd (c);\n+  foo_cd (ll);\n+  foo_cd (f);\n+  foo_cd (ld);\n+  foo_cd (cd);\n+}"}]}