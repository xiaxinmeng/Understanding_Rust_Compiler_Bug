{"sha": "ab1fd4838c8dc3d7f7e5bbac11401044e7a16602", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWIxZmQ0ODM4YzhkYzNkN2Y3ZTViYmFjMTE0MDEwNDRlN2ExNjYwMg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-24T06:06:39Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-24T06:06:39Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1071", "tree": {"sha": "fd0c3c074894716e64a40ca1d4d59b82b72a84ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd0c3c074894716e64a40ca1d4d59b82b72a84ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab1fd4838c8dc3d7f7e5bbac11401044e7a16602", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab1fd4838c8dc3d7f7e5bbac11401044e7a16602", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab1fd4838c8dc3d7f7e5bbac11401044e7a16602", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab1fd4838c8dc3d7f7e5bbac11401044e7a16602/comments", "author": null, "committer": null, "parents": [{"sha": "7c7b029dab4406214c1deb7e43ddcfd10227f932", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c7b029dab4406214c1deb7e43ddcfd10227f932", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c7b029dab4406214c1deb7e43ddcfd10227f932"}], "stats": {"total": 7, "additions": 6, "deletions": 1}, "files": [{"sha": "33041c8d00ff231e4d1cbdde7910d76fee017e30", "filename": "gcc/reload1.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab1fd4838c8dc3d7f7e5bbac11401044e7a16602/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab1fd4838c8dc3d7f7e5bbac11401044e7a16602/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=ab1fd4838c8dc3d7f7e5bbac11401044e7a16602", "patch": "@@ -1701,8 +1701,12 @@ reload (first, global, dumpfile)\n   for (i = FIRST_PSEUDO_REGISTER; i < max_regno; i++)\n     {\n       rtx addr = 0;\n+      int in_struct = 0;\n       if (reg_equiv_mem[i])\n-\taddr = XEXP (reg_equiv_mem[i], 0);\n+\t{\n+\t  addr = XEXP (reg_equiv_mem[i], 0);\n+\t  in_struct = MEM_IN_STRUCT_P (reg_equiv_mem[i]);\n+\t}\n       if (reg_equiv_address[i])\n \taddr = reg_equiv_address[i];\n       if (addr)\n@@ -1712,6 +1716,7 @@ reload (first, global, dumpfile)\n \t      rtx reg = regno_reg_rtx[i];\n \t      XEXP (reg, 0) = addr;\n \t      REG_USERVAR_P (reg) = 0;\n+\t      MEM_IN_STRUCT_P (reg) = in_struct;\n \t      PUT_CODE (reg, MEM);\n \t    }\n \t  else if (reg_equiv_mem[i])"}]}