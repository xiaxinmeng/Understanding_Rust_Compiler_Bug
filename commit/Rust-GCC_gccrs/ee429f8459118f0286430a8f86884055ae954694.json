{"sha": "ee429f8459118f0286430a8f86884055ae954694", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU0MjlmODQ1OTExOGYwMjg2NDMwYThmODY4ODQwNTVhZTk1NDY5NA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2009-02-04T16:50:22Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-02-04T16:50:22Z"}, "message": "re PR c++/39095 (Mangling changes break ABI)\n\n\tPR c++/39095\n\t* operators.def: Use COMPONENT_REF code for ->/pt operator again,\n\tremove ./dt operator.\n\t* mangle.c (write_expression): Handle COMPONENT_REF after handling\n\tADDR_EXPR, for COMPONENT_REF without ARROW_EXPR inside of it\n\twrite_string (\"dt\") instead of using operators.def.\n\n\t* g++.dg/abi/mangle31.C: New test.\n\nFrom-SVN: r143933", "tree": {"sha": "9a4e4de9a60f6b8c400fb1e352863fd9b69294d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a4e4de9a60f6b8c400fb1e352863fd9b69294d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee429f8459118f0286430a8f86884055ae954694", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee429f8459118f0286430a8f86884055ae954694", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee429f8459118f0286430a8f86884055ae954694", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee429f8459118f0286430a8f86884055ae954694/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5b43bf058b51b25a6e90692bc61b3efad883b7e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b43bf058b51b25a6e90692bc61b3efad883b7e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b43bf058b51b25a6e90692bc61b3efad883b7e7"}], "stats": {"total": 83, "additions": 67, "deletions": 16}, "files": [{"sha": "2a08d8bbae4fd14dcba455a7220c0ea3e7e862f3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee429f8459118f0286430a8f86884055ae954694/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee429f8459118f0286430a8f86884055ae954694/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ee429f8459118f0286430a8f86884055ae954694", "patch": "@@ -1,3 +1,12 @@\n+2009-02-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/39095\n+\t* operators.def: Use COMPONENT_REF code for ->/pt operator again,\n+\tremove ./dt operator.\n+\t* mangle.c (write_expression): Handle COMPONENT_REF after handling\n+\tADDR_EXPR, for COMPONENT_REF without ARROW_EXPR inside of it\n+\twrite_string (\"dt\") instead of using operators.def.\n+\n 2009-02-03  Jason Merrill  <jason@redhat.com>\n \n \t* typeck.c (cp_build_unary_op): Only complain about taking address"}, {"sha": "f51136ac3d5c2fdcc7292f9a5866ab320ca2d66c", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee429f8459118f0286430a8f86884055ae954694/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee429f8459118f0286430a8f86884055ae954694/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=ee429f8459118f0286430a8f86884055ae954694", "patch": "@@ -2298,20 +2298,6 @@ write_expression (tree expr)\n \t    write_template_args (template_args);\n \t}\n     }\n-  else if (code == COMPONENT_REF)\n-    {\n-      tree ob = TREE_OPERAND (expr, 0);\n-\n-      if (TREE_CODE (ob) == ARROW_EXPR)\n-\t{\n-\t  code = ARROW_EXPR;\n-\t  ob = TREE_OPERAND (ob, 0);\n-\t}\n-\n-      write_string (operator_name_info[(int)code].mangled_name);\n-      write_expression (ob);\n-      write_member_name (TREE_OPERAND (expr, 1));\n-    }\n   else\n     {\n       int i;\n@@ -2334,6 +2320,23 @@ write_expression (tree expr)\n \t  code = TREE_CODE (expr);\n \t}\n \n+      if (code == COMPONENT_REF)\n+\t{\n+\t  tree ob = TREE_OPERAND (expr, 0);\n+\n+\t  if (TREE_CODE (ob) == ARROW_EXPR)\n+\t    {\n+\t      write_string (operator_name_info[(int)code].mangled_name);\n+\t      ob = TREE_OPERAND (ob, 0);\n+\t    }\n+\t  else\n+\t    write_string (\"dt\");\n+\n+\t  write_expression (ob);\n+\t  write_member_name (TREE_OPERAND (expr, 1));\n+\t  return;\n+\t}\n+\n       /* If it wasn't any of those, recursively expand the expression.  */\n       write_string (operator_name_info[(int) code].mangled_name);\n "}, {"sha": "c63ce3f0429fe7f7fa40c20286cc1fe0b3e485f3", "filename": "gcc/cp/operators.def", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee429f8459118f0286430a8f86884055ae954694/gcc%2Fcp%2Foperators.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee429f8459118f0286430a8f86884055ae954694/gcc%2Fcp%2Foperators.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foperators.def?ref=ee429f8459118f0286430a8f86884055ae954694", "patch": "@@ -125,8 +125,7 @@ DEF_SIMPLE_OPERATOR (\"&&\", TRUTH_ANDIF_EXPR, \"aa\", 2)\n DEF_SIMPLE_OPERATOR (\"||\", TRUTH_ORIF_EXPR, \"oo\", 2)\n DEF_SIMPLE_OPERATOR (\",\", COMPOUND_EXPR, \"cm\", 2)\n DEF_SIMPLE_OPERATOR (\"->*\", MEMBER_REF, \"pm\", 2)\n-DEF_SIMPLE_OPERATOR (\"->\", ARROW_EXPR, \"pt\", 2)\n-DEF_SIMPLE_OPERATOR (\".\", COMPONENT_REF, \"dt\", 2)\n+DEF_SIMPLE_OPERATOR (\"->\", COMPONENT_REF, \"pt\", 2)\n DEF_SIMPLE_OPERATOR (\"[]\", ARRAY_REF, \"ix\", 2)\n DEF_SIMPLE_OPERATOR (\"++\", POSTINCREMENT_EXPR, \"pp\", 2)\n DEF_SIMPLE_OPERATOR (\"--\", POSTDECREMENT_EXPR, \"mm\", 2)"}, {"sha": "37b578345503a2fc470d6ace173d39ae94804c5d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee429f8459118f0286430a8f86884055ae954694/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee429f8459118f0286430a8f86884055ae954694/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ee429f8459118f0286430a8f86884055ae954694", "patch": "@@ -1,3 +1,8 @@\n+2009-02-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/39095\n+\t* g++.dg/abi/mangle31.C: New test.\n+\n 2009-02-03  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/29129"}, {"sha": "4be2e0b03fc92ddd2e8f054c6f3a418aac2d1ad4", "filename": "gcc/testsuite/g++.dg/abi/mangle31.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee429f8459118f0286430a8f86884055ae954694/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle31.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee429f8459118f0286430a8f86884055ae954694/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle31.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle31.C?ref=ee429f8459118f0286430a8f86884055ae954694", "patch": "@@ -0,0 +1,35 @@\n+// PR c++/39095\n+// { dg-do compile }\n+\n+struct B\n+{\n+  int b;\n+};\n+\n+struct A\n+{\n+  B *operator->();\n+  A ();\n+  B b;\n+};\n+\n+A::A ()\n+{\n+}\n+\n+B *\n+A::operator->()\n+{\n+  return &b;\n+}\n+\n+A a;\n+\n+int\n+foo ()\n+{\n+  return a->b;\n+}\n+\n+// { dg-final { scan-assembler \"_ZN1AptEv\" } }\n+// { dg-final { scan-assembler-not \"_ZN1AdtEv\" } }"}]}