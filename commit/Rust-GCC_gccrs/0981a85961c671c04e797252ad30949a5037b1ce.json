{"sha": "0981a85961c671c04e797252ad30949a5037b1ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk4MWE4NTk2MWM2NzFjMDRlNzk3MjUyYWQzMDk0OWE1MDM3YjFjZQ==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@cygnus.com", "date": "2000-03-28T08:33:45Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "2000-03-28T08:33:45Z"}, "message": "[multiple changes]\n\n2000-03-28  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n\n\t* parse-scan.y (pop_class_context): Reset `inner_qualifier_length'\n\tto 0 when it reaches -1.\n\n2000-03-27  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n\n\t* jcf-parse.c (get_constant): Properly cast `num' during the\n\tinvocation of `add_double call'.\n\t* jcf-write.c (push_long_const): Properly cast `lo' before\n\tcomparing it to short bounds.\n\t* parse-scan.y (interface_declaration:): Rule re-arrange so that\n\t`interface_body:' is reduced after the current interface is\n\tpushed.\n\n2000-02-28  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n\n\t* parse-scan.y (inner_qualifier, inner_qualifier_length): New\n\tstatic globals.\n\t(push_class_context, pop_class_context): New function.\n\t(class_body:): Call pop_class_context.\n\t(interface_body:): Likewise.\n\t(INNER_QUALIFIER): New macro.\n\t(report_class_declaration): Changed output format and use\n\tINNER_QUALIFIER. Call push_class_context.\n\nFrom-SVN: r32779", "tree": {"sha": "ed14e0e93106add53c8cfd8ea6b287c2e4009446", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed14e0e93106add53c8cfd8ea6b287c2e4009446"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0981a85961c671c04e797252ad30949a5037b1ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0981a85961c671c04e797252ad30949a5037b1ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0981a85961c671c04e797252ad30949a5037b1ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0981a85961c671c04e797252ad30949a5037b1ce/comments", "author": null, "committer": null, "parents": [{"sha": "e3c2afabd3df995899ecf565616a410aa85e95a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3c2afabd3df995899ecf565616a410aa85e95a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3c2afabd3df995899ecf565616a410aa85e95a3"}], "stats": {"total": 2230, "additions": 1186, "deletions": 1044}, "files": [{"sha": "c6d72ce7f982b121e2b21905c1eb6c5cdf9f1dd6", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 34, "deletions": 8, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0981a85961c671c04e797252ad30949a5037b1ce/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0981a85961c671c04e797252ad30949a5037b1ce/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=0981a85961c671c04e797252ad30949a5037b1ce", "patch": "@@ -1,3 +1,18 @@\n+2000-03-28  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+\n+\t* parse-scan.y (pop_class_context): Reset `inner_qualifier_length'\n+\tto 0 when it reaches -1.\n+\n+2000-03-27  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+\n+\t* jcf-parse.c (get_constant): Properly cast `num' during the\n+\tinvocation of `add_double call'.\n+\t* jcf-write.c (push_long_const): Properly cast `lo' before\n+\tcomparing it to short bounds.\n+\t* parse-scan.y (interface_declaration:): Rule re-arrange so that\n+\t`interface_body:' is reduced after the current interface is\n+\tpushed.\n+\n 2000-03-26  Tom Tromey  <tromey@cygnus.com>\n \n \t* jvspec.c (jvgenmain_spec): Add `%{<...}' construct for each\n@@ -21,15 +36,15 @@ Sat Mar 25 09:12:10 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* parse.y (check_abstract_method_definitions): New local\n \t`end_type_reached'. Make sure we also consider `end_type'.\n-\t(java_check_abstract_method_definitions): Make sure we also\n-\teventually consider `java.lang.Object'.\n-\t(maybe_use_access_method): Don't use access method if not a pure\n-\tinner class or if the method's context is right.\n-\t(find_applicable_accessible_methods_list): New static\n+\t(java_check_abstract_method_definitions): Make sure we eventually\n+\tconsider `java.lang.Object'.\n+\t(maybe_use_access_method): Don't use access method if not in the\n+\tcontext of a pure inner class or if the method's context is right.\n+\t(find_applicable_accessible_methods_list): New static flag\n \t`object_done'. Don't search abstract classes as interfaces. Fixed\n-\tindentation. Fixed the `java.lang.Object' only search. Search class'\n-\tinterface(s) first, fully search enclosing contexts. \n-\t(find_most_specific_methods_list): Pick closest candidates when\n+\tindentation. Fixed the `java.lang.Object' only search. Search\n+\tclass interface(s) first, then fully search enclosing contexts.\n+\t(find_most_specific_methods_list): Pick the closest candidate when\n \tthey're all abstract.\n \n Mon Mar 20 08:58:51 2000  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n@@ -130,6 +145,17 @@ Tue Mar 14 17:15:41 2000  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n \t* parse.y (register_incomplete_type): Fixed initialization of\n \tJDEP_ENCLOSING.\n \n+2000-02-28  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+\n+\t* parse-scan.y (inner_qualifier, inner_qualifier_length): New\n+\tstatic globals.\n+\t(push_class_context, pop_class_context): New function.\n+\t(class_body:): Call pop_class_context.\n+\t(interface_body:): Likewise.\n+\t(INNER_QUALIFIER): New macro.\n+\t(report_class_declaration): Changed output format and use\n+\tINNER_QUALIFIER. Call push_class_context.\n+\n 2000-02-14  Andrew Haley  <aph@cygnus.com>\n \n         * check-init.c (check_init): Add new cases for unary and binary"}, {"sha": "4c3dff765bc1ccf1eeafd64a4ce171d351377e76", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0981a85961c671c04e797252ad30949a5037b1ce/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0981a85961c671c04e797252ad30949a5037b1ce/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=0981a85961c671c04e797252ad30949a5037b1ce", "patch": "@@ -272,7 +272,7 @@ get_constant (jcf, index)\n \tHOST_WIDE_INT lo, hi;\n \tlshift_double (num, 0, 32, 64, &lo, &hi, 0);\n \tnum = JPOOL_INT (jcf, index+1);\n-\tadd_double (lo, hi, num, 0, &lo, &hi);\n+\tadd_double (lo, hi, (uint32)num, 0, &lo, &hi);\n \tvalue = build_int_2 (lo, hi);\n \tTREE_TYPE (value) = long_type_node;\n \tforce_fit_type (value, 0);"}, {"sha": "61ff0fdbf4d15bca0d5a6c999fc11df4f4fa6999", "filename": "gcc/java/jcf-write.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0981a85961c671c04e797252ad30949a5037b1ce/gcc%2Fjava%2Fjcf-write.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0981a85961c671c04e797252ad30949a5037b1ce/gcc%2Fjava%2Fjcf-write.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-write.c?ref=0981a85961c671c04e797252ad30949a5037b1ce", "patch": "@@ -845,7 +845,8 @@ push_long_const (lo, hi, state)\n       RESERVE(1);\n       OP1(OPCODE_lconst_0 + lo);\n     }\n-  else if ((hi == 0 && lo < 32768) || (hi == -1 && lo >= -32768))\n+  else if ((hi == 0 && (jword)(lo  & 0xFFFFFFFF) < 32768) \n+          || (hi == -1 && (jword)(lo & 0xFFFFFFFF) >= -32768))\n       {\n         push_int_const (lo, state);\n         RESERVE (1);"}, {"sha": "4e2f0243aa710a03d537d3631c52860eb8e2db52", "filename": "gcc/java/parse-scan.c", "status": "modified", "additions": 1101, "deletions": 1027, "changes": 2128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0981a85961c671c04e797252ad30949a5037b1ce/gcc%2Fjava%2Fparse-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0981a85961c671c04e797252ad30949a5037b1ce/gcc%2Fjava%2Fparse-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse-scan.c?ref=0981a85961c671c04e797252ad30949a5037b1ce"}, {"sha": "73a46ab2d5434ab9452cbacfaff265180d0eb0f7", "filename": "gcc/java/parse-scan.y", "status": "modified", "additions": 48, "deletions": 7, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0981a85961c671c04e797252ad30949a5037b1ce/gcc%2Fjava%2Fparse-scan.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0981a85961c671c04e797252ad30949a5037b1ce/gcc%2Fjava%2Fparse-scan.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse-scan.y?ref=0981a85961c671c04e797252ad30949a5037b1ce", "patch": "@@ -66,6 +66,10 @@ static int absorber;\n static const char *current_class;\n static const char *package_name;\n \n+/* Keep track of the current inner class qualifier. */\n+static char *inner_qualifier;\n+static int   inner_qualifier_length;\n+\n /* Keep track of whether things have be listed before.  */\n static int previous_output;\n \n@@ -92,6 +96,8 @@ struct method_declarator {\n /* Two actions for this grammar */\n static void report_class_declaration PARAMS ((const char *));\n static void report_main_declaration PARAMS ((struct method_declarator *));\n+static void push_class_context PARAMS ((const char *));\n+static void pop_class_context PARAMS ((void));\n \n #include \"lex.h\"\n #include \"parse.h\"\n@@ -357,7 +363,9 @@ interface_type_list:\n \n class_body:\n \tOCB_TK CCB_TK\n+\t\t{ pop_class_context (); }\n |\tOCB_TK class_body_declarations CCB_TK\n+\t\t{ pop_class_context (); }\n ;\n \n class_body_declarations:\n@@ -564,14 +572,18 @@ this_or_super:\t\t\t/* Added, simplifies error diagnostics */\n /* 19.9 Productions from 9: Interfaces  */\n /* 19.9.1 Productions from 9.1: Interfaces Declarations  */\n interface_declaration:\n-\tINTERFACE_TK identifier\tinterface_body\n+\tINTERFACE_TK identifier\n \t\t{ report_class_declaration ($2); modifier_value = 0; }\n-|\tmodifiers INTERFACE_TK identifier interface_body\n+\tinterface_body\n+|\tmodifiers INTERFACE_TK identifier\n \t\t{ report_class_declaration ($3); modifier_value = 0; }\n-|\tINTERFACE_TK identifier extends_interfaces interface_body\n+\tinterface_body\n+|\tINTERFACE_TK identifier extends_interfaces\n \t\t{ report_class_declaration ($2); modifier_value = 0; }\n-|\tmodifiers INTERFACE_TK identifier extends_interfaces interface_body\n+\tinterface_body\n+|\tmodifiers INTERFACE_TK identifier extends_interfaces\n \t\t{ report_class_declaration ($3); modifier_value = 0; }\n+\tinterface_body\n ;\n \n extends_interfaces:\n@@ -581,7 +593,9 @@ extends_interfaces:\n \n interface_body:\n \tOCB_TK CCB_TK\n+\t\t{ pop_class_context (); }\n |\tOCB_TK interface_member_declarations CCB_TK\n+\t\t{ pop_class_context (); }\n ;\n \n interface_member_declarations:\n@@ -1110,7 +1124,33 @@ java_push_parser_context ()\n   ctxp = new;\n }  \n \n+static void\n+push_class_context (name)\n+    const char *name;\n+{\n+  size_t name_length = strlen (name);\n+  inner_qualifier = xrealloc (inner_qualifier, \n+                             inner_qualifier_length + name_length+2);\n+  memcpy (inner_qualifier+inner_qualifier_length, name, name_length);\n+  inner_qualifier_length += name_length;\n+  inner_qualifier [inner_qualifier_length] = '$';\n+  inner_qualifier [++inner_qualifier_length] = '\\0';\n+}\n+\n+static void\n+pop_class_context ()\n+{\n+  while (--inner_qualifier_length > 0\n+        && inner_qualifier [inner_qualifier_length-1] != '$')\n+    ;\n+  inner_qualifier = xrealloc (inner_qualifier, inner_qualifier_length+1);\n+  inner_qualifier [inner_qualifier_length] = '\\0';\n+  if (inner_qualifier_length == -1)\n+    inner_qualifier_length = 0;\n+}\n+\n /* Actions defined here */\n+#define INNER_QUALIFIER (inner_qualifier ? inner_qualifier : \"\")\n \n static void\n report_class_declaration (name)\n@@ -1128,11 +1168,12 @@ report_class_declaration (name)\n \t}\n \t\n       if (package_name)\n-\tfprintf (out, \"%s.%s \", package_name, name);\n+\tfprintf (out, \"%s.%s%s \", package_name, INNER_QUALIFIER, name);\n       else\n-\tfprintf (out, \"%s \", name);\n+\tfprintf (out, \"%s%s \", INNER_QUALIFIER, name);\n     }\n-      \n+\n+  push_class_context (name);\n   current_class = name;\n }\n "}]}