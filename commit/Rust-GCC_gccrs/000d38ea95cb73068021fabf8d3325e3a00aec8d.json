{"sha": "000d38ea95cb73068021fabf8d3325e3a00aec8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAwZDM4ZWE5NWNiNzMwNjgwMjFmYWJmOGQzMzI1ZTNhMDBhZWM4ZA==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2003-03-04T23:23:16Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2003-03-04T23:23:16Z"}, "message": "cp-tree.h (cxx_saved_binding): Declare.\n\n        * cp-tree.h (cxx_saved_binding): Declare.\n        (struct saved_scope): Adjust type of field 'old_binding'.\n        * decl.c (cxx_saved_binding_make): New macro.\n        (struct cxx_saved_binding): Define.\n        (store_bindings): Adjust prototype.  Use cxx_saved_binding to save\n        C++ bindings.\n        (maybe_push_to_top_level): Adjust local variable type.\n        (pop_from_top_level): Likewise.\n\nFrom-SVN: r63810", "tree": {"sha": "353016352c8b8736f4b3977e30c3430280d460c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/353016352c8b8736f4b3977e30c3430280d460c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/000d38ea95cb73068021fabf8d3325e3a00aec8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/000d38ea95cb73068021fabf8d3325e3a00aec8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/000d38ea95cb73068021fabf8d3325e3a00aec8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/000d38ea95cb73068021fabf8d3325e3a00aec8d/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c62b90642287de048ac1735adeb210e3b78ff874", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c62b90642287de048ac1735adeb210e3b78ff874", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c62b90642287de048ac1735adeb210e3b78ff874"}], "stats": {"total": 79, "additions": 56, "deletions": 23}, "files": [{"sha": "232cf24a3ad9ab0779e58d0ea6a24d622b147e82", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/000d38ea95cb73068021fabf8d3325e3a00aec8d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/000d38ea95cb73068021fabf8d3325e3a00aec8d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=000d38ea95cb73068021fabf8d3325e3a00aec8d", "patch": "@@ -1,3 +1,14 @@\n+2003-03-04  Gabriel Dos Reis <gdr@integrable-solutions.net>\n+\n+        * cp-tree.h (cxx_saved_binding): Declare.\n+        (struct saved_scope): Adjust type of field 'old_binding'.\n+        * decl.c (cxx_saved_binding_make): New macro.\n+        (struct cxx_saved_binding): Define.\n+        (store_bindings): Adjust prototype.  Use cxx_saved_binding to save\n+        C++ bindings. \n+        (maybe_push_to_top_level): Adjust local variable type.\n+        (pop_from_top_level): Likewise.\n+\t\n 2003-03-04  Tom Tromey  <tromey@redhat.com>\n \n \t* Make-lang.in (c++.tags): New target."}, {"sha": "447fd57530b2fb6cc2e6da3d9665072e3b7b32ce", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/000d38ea95cb73068021fabf8d3325e3a00aec8d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/000d38ea95cb73068021fabf8d3325e3a00aec8d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=000d38ea95cb73068021fabf8d3325e3a00aec8d", "patch": "@@ -221,6 +221,10 @@ struct diagnostic_context;\n #define abi_version_at_least(N) \\\n   (flag_abi_version == 0 || flag_abi_version >= (N))\n \n+\f\n+/* Datatype used to temporarily save C++ bindings (for implicit\n+   instantiations purposes and like).  Implemented in decl.c.  */\n+typedef struct cxx_saved_binding cxx_saved_binding;\n \f\n /* Language-dependent contents of an identifier.  */\n \n@@ -755,7 +759,7 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n \n struct saved_scope GTY(())\n {\n-  tree old_bindings;\n+  cxx_saved_binding *old_bindings;\n   tree old_namespace;\n   tree decl_ns_list;\n   tree class_name;"}, {"sha": "90058e7aa37bc64d902865ae68efb8e76c0b5c6f", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 40, "deletions": 22, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/000d38ea95cb73068021fabf8d3325e3a00aec8d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/000d38ea95cb73068021fabf8d3325e3a00aec8d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=000d38ea95cb73068021fabf8d3325e3a00aec8d", "patch": "@@ -67,7 +67,7 @@ static void storedecls (tree);\n static void require_complete_types_for_parms (tree);\n static int ambi_op_p (enum tree_code);\n static int unary_op_p (enum tree_code);\n-static tree store_bindings (tree, tree);\n+static cxx_saved_binding *store_bindings (tree, cxx_saved_binding *);\n static tree lookup_tag_reverse (tree, tree);\n static void push_local_name (tree);\n static void warn_extern_redeclared_static (tree, tree);\n@@ -2252,23 +2252,41 @@ pop_nested_namespace (tree ns)\n }\n \n \f\n+/* Allocate storage for saving a C++ binding.  */\n+#define cxx_saved_binding_make() \\\n+  (ggc_alloc (sizeof (cxx_saved_binding)))\n+\n+struct cxx_saved_binding GTY(())\n+{\n+  /* Link that chains saved C++ bindings for a given name into a stack.  */\n+  cxx_saved_binding *previous;\n+  /* The name of the current binding.  */\n+  tree identifier;\n+  /* The binding we're saving.  */\n+  tree binding;\n+  tree class_value;\n+  tree real_type_value;\n+};\n+\n /* Subroutines for reverting temporarily to top-level for instantiation\n    of templates and such.  We actually need to clear out the class- and\n    local-value slots of all identifiers, so that only the global values\n    are at all visible.  Simply setting current_binding_level to the global\n    scope isn't enough, because more binding levels may be pushed.  */\n struct saved_scope *scope_chain;\n \n-static tree\n-store_bindings (tree names, tree old_bindings)\n+static cxx_saved_binding *\n+store_bindings (tree names, cxx_saved_binding *old_bindings)\n {\n   tree t;\n-  tree search_bindings = old_bindings;\n+  cxx_saved_binding *search_bindings = old_bindings;\n \n   timevar_push (TV_NAME_LOOKUP);\n   for (t = names; t; t = TREE_CHAIN (t))\n     {\n-      tree binding, t1, id;\n+      tree id;\n+      cxx_saved_binding *saved;\n+      cxx_saved_binding *t1;\n \n       if (TREE_CODE (t) == TREE_LIST)\n \tid = TREE_PURPOSE (t);\n@@ -2282,20 +2300,20 @@ store_bindings (tree names, tree old_bindings)\n \t  || !(IDENTIFIER_BINDING (id) || IDENTIFIER_CLASS_VALUE (id)))\n \tcontinue;\n \n-      for (t1 = search_bindings; t1; t1 = TREE_CHAIN (t1))\n-\tif (TREE_VEC_ELT (t1, 0) == id)\n+      for (t1 = search_bindings; t1; t1 = t1->previous)\n+\tif (t1->identifier == id)\n \t  goto skip_it;\n \n       my_friendly_assert (TREE_CODE (id) == IDENTIFIER_NODE, 135);\n-      binding = make_tree_vec (4);\n-      TREE_VEC_ELT (binding, 0) = id;\n-      TREE_VEC_ELT (binding, 1) = REAL_IDENTIFIER_TYPE_VALUE (id);\n-      TREE_VEC_ELT (binding, 2) = IDENTIFIER_BINDING (id);\n-      TREE_VEC_ELT (binding, 3) = IDENTIFIER_CLASS_VALUE (id);\n+      saved = cxx_saved_binding_make ();\n+      saved->previous = old_bindings;\n+      saved->identifier = id;\n+      saved->binding = IDENTIFIER_BINDING (id);\n+      saved->class_value = IDENTIFIER_CLASS_VALUE (id);;\n+      saved->real_type_value = REAL_IDENTIFIER_TYPE_VALUE (id);\n       IDENTIFIER_BINDING (id) = NULL_TREE;\n       IDENTIFIER_CLASS_VALUE (id) = NULL_TREE;\n-      TREE_CHAIN (binding) = old_bindings;\n-      old_bindings = binding;\n+      old_bindings = saved;\n     skip_it:\n       ;\n     }\n@@ -2307,7 +2325,7 @@ maybe_push_to_top_level (int pseudo)\n {\n   struct saved_scope *s;\n   struct cp_binding_level *b;\n-  tree old_bindings;\n+  cxx_saved_binding *old_bindings;\n   int need_pop;\n \n   timevar_push (TV_NAME_LOOKUP);\n@@ -2324,7 +2342,7 @@ maybe_push_to_top_level (int pseudo)\n   else\n     need_pop = 0;\n \n-  old_bindings = NULL_TREE;\n+  old_bindings = NULL;\n   if (scope_chain && previous_class_type)\n     old_bindings = store_bindings (previous_class_values, old_bindings);\n \n@@ -2377,7 +2395,7 @@ void\n pop_from_top_level (void)\n {\n   struct saved_scope *s = scope_chain;\n-  tree t;\n+  cxx_saved_binding *saved;\n \n   timevar_push (TV_NAME_LOOKUP); \n   /* Clear out class-level bindings cache.  */\n@@ -2387,13 +2405,13 @@ pop_from_top_level (void)\n   current_lang_base = 0;\n \n   scope_chain = s->prev;\n-  for (t = s->old_bindings; t; t = TREE_CHAIN (t))\n+  for (saved = s->old_bindings; saved; saved = saved->previous)\n     {\n-      tree id = TREE_VEC_ELT (t, 0);\n+      tree id = saved->identifier;\n \n-      SET_IDENTIFIER_TYPE_VALUE (id, TREE_VEC_ELT (t, 1));\n-      IDENTIFIER_BINDING (id) = TREE_VEC_ELT (t, 2);\n-      IDENTIFIER_CLASS_VALUE (id) = TREE_VEC_ELT (t, 3);\n+      IDENTIFIER_BINDING (id) = saved->binding;\n+      IDENTIFIER_CLASS_VALUE (id) = saved->class_value;\n+      SET_IDENTIFIER_TYPE_VALUE (id, saved->real_type_value);\n     }\n \n   /* If we were in the middle of compiling a function, restore our"}]}