{"sha": "68ade9e4e84617fd5c613618cfdc0cc1fa6d6d81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhhZGU5ZTRlODQ2MTdmZDVjNjEzNjE4Y2ZkYzBjYzFmYTZkNmQ4MQ==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2011-02-28T14:48:23Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2011-02-28T14:48:23Z"}, "message": "In libobjc/: 2011-02-28 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn libobjc/:\n2011-02-28  Nicola Pero  <nicola.pero@meta-innovation.com>\n\t\n\t* selector.c (sel_getTypedSelector): Return NULL if there are\n\tmultiple selectors with conflicting types.\n\t* objc/runtime.h (sel_getTypedSelector): Updated documentation.\n\t\nIn gcc/testsuite/:\n2011-02-28  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* objc.dg/gnu-api-2-sel.m: Test that sel_getTypedSelector return\n\tNULL in case of a selector with conflicting types.\n\t* obj-c++.dg/gnu-api-2-sel.mm: Same change.\n\nFrom-SVN: r170563", "tree": {"sha": "2206ef603597ed2c4ee93c47cebe6a18a1f3fcb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2206ef603597ed2c4ee93c47cebe6a18a1f3fcb0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68ade9e4e84617fd5c613618cfdc0cc1fa6d6d81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68ade9e4e84617fd5c613618cfdc0cc1fa6d6d81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68ade9e4e84617fd5c613618cfdc0cc1fa6d6d81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68ade9e4e84617fd5c613618cfdc0cc1fa6d6d81/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2f2935b6d5c7d9976710d40b79036bec4c7087aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f2935b6d5c7d9976710d40b79036bec4c7087aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f2935b6d5c7d9976710d40b79036bec4c7087aa"}], "stats": {"total": 101, "additions": 95, "deletions": 6}, "files": [{"sha": "fe2cedddfc6c3d804f92f3f083d8f0718f2f2164", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68ade9e4e84617fd5c613618cfdc0cc1fa6d6d81/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68ade9e4e84617fd5c613618cfdc0cc1fa6d6d81/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=68ade9e4e84617fd5c613618cfdc0cc1fa6d6d81", "patch": "@@ -1,3 +1,9 @@\n+2011-02-28  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc.dg/gnu-api-2-sel.m: Test that sel_getTypedSelector return\n+\tNULL in case of a selector with conflicting types.\n+\t* obj-c++.dg/gnu-api-2-sel.mm: Same change.\n+\t\n 2011-02-28  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* gcc.target/arm/vfp-ldmdbd.c, gcc.target/arm/vfp-ldmdbs.c,"}, {"sha": "ff50058566b4d5a5ecfc99dc617db3eaceeffdc9", "filename": "gcc/testsuite/obj-c++.dg/gnu-api-2-sel.mm", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68ade9e4e84617fd5c613618cfdc0cc1fa6d6d81/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-api-2-sel.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68ade9e4e84617fd5c613618cfdc0cc1fa6d6d81/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-api-2-sel.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-api-2-sel.mm?ref=68ade9e4e84617fd5c613618cfdc0cc1fa6d6d81", "patch": "@@ -46,6 +46,21 @@ - (id) variable { return variable_ivar; }\n - (void) method { return; }\n @end\n \n+@interface ClassA : MyRootClass\n+- (id) conflictingSelectorMethod;\n+@end\n+\n+@implementation ClassA\n+- (id) conflictingSelectorMethod { return nil; }\n+@end\n+\n+@interface ClassB : MyRootClass\n+- (void) conflictingSelectorMethod;\n+@end\n+\n+@implementation ClassB\n+- (void) conflictingSelectorMethod { return; }\n+@end\n \n int main ()\n {\n@@ -132,6 +147,13 @@ once with types and once without (in this very test).  */\n        untyped.  */\n     selector = sel_getTypedSelector (\"registered_with_no_types\");\n \n+    if (selector != NULL)\n+      abort ();\n+\n+    /* Now try a selector with multiple, conflicting types.  NULL\n+       should be returned.  */\n+    selector = sel_getTypedSelector (\"conflictingSelectorMethod\");\n+\n     if (selector != NULL)\n       abort ();\n   }"}, {"sha": "b71fdfab48cbf4e5390d609ef3db719d4f9517f8", "filename": "gcc/testsuite/objc.dg/gnu-api-2-sel.m", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68ade9e4e84617fd5c613618cfdc0cc1fa6d6d81/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-sel.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68ade9e4e84617fd5c613618cfdc0cc1fa6d6d81/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-sel.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-sel.m?ref=68ade9e4e84617fd5c613618cfdc0cc1fa6d6d81", "patch": "@@ -46,6 +46,21 @@ - (id) variable { return variable_ivar; }\n - (void) method { return; }\n @end\n \n+@interface ClassA : MyRootClass\n+- (id) conflictingSelectorMethod;\n+@end\n+\n+@implementation ClassA\n+- (id) conflictingSelectorMethod { return nil; }\n+@end\n+\n+@interface ClassB : MyRootClass\n+- (void) conflictingSelectorMethod;\n+@end\n+\n+@implementation ClassB\n+- (void) conflictingSelectorMethod { return; }\n+@end\n \n int main(int argc, void **args)\n {\n@@ -132,6 +147,13 @@ once with types and once without (in this very test).  */\n        untyped.  */\n     selector = sel_getTypedSelector (\"registered_with_no_types\");\n \n+    if (selector != NULL)\n+      abort ();\n+\n+    /* Now try a selector with multiple, conflicting types.  NULL\n+       should be returned.  */\n+    selector = sel_getTypedSelector (\"conflictingSelectorMethod\");\n+\n     if (selector != NULL)\n       abort ();\n   }"}, {"sha": "485d2a4b5133d3af59ba4aa5ffb2e00be670302a", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68ade9e4e84617fd5c613618cfdc0cc1fa6d6d81/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68ade9e4e84617fd5c613618cfdc0cc1fa6d6d81/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=68ade9e4e84617fd5c613618cfdc0cc1fa6d6d81", "patch": "@@ -1,3 +1,9 @@\n+2011-02-28  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\t\n+\t* selector.c (sel_getTypedSelector): Return NULL if there are\n+\tmultiple selectors with conflicting types.\n+\t* objc/runtime.h (sel_getTypedSelector): Updated documentation.\n+\t\n 2011-02-28  Richard Frith-Macdonald <rfm@gnu.org>\n \n \tPR libobjc/47922"}, {"sha": "6e1f1ec36e816499a75d9fa27526008e7cadd821", "filename": "libobjc/objc/runtime.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68ade9e4e84617fd5c613618cfdc0cc1fa6d6d81/libobjc%2Fobjc%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68ade9e4e84617fd5c613618cfdc0cc1fa6d6d81/libobjc%2Fobjc%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fruntime.h?ref=68ade9e4e84617fd5c613618cfdc0cc1fa6d6d81", "patch": "@@ -226,14 +226,16 @@ objc_EXPORT SEL * sel_copyTypedSelectorList (const char *name,\n \t\t\t\t\t     unsigned int *numberOfReturnedSelectors);\n \n /* Return a selector with name 'name' and a non-zero type encoding, if\n-   any such selector is registered with the runtime.  If there is no\n-   such selector, NULL is returned.  Return NULL if 'name' is NULL.\n+   there is a single selector with a type, and with that name,\n+   registered with the runtime.  If there is no such selector, or if\n+   there are multiple selectors with the same name but conflicting\n+   types, NULL is returned.  Return NULL if 'name' is NULL.\n \n    This is useful if you have the name of the selector, and would\n    really like to get a selector for it that includes the type\n    encoding.  Unfortunately, if the program contains multiple selector\n-   with the same name but different types, sel_getTypedSelector\n-   returns a random one of them, which may not be the right one.\n+   with the same name but different types, sel_getTypedSelector can\n+   not possibly know which one you need, and so will return NULL.\n \n    Compatibility Note: the Apple/NeXT runtime has untyped selectors,\n    so it does not have this function, which is specific to the GNU"}, {"sha": "80d2d8004227dd091c8afdd7e906a10ee01eeefe", "filename": "libobjc/selector.c", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68ade9e4e84617fd5c613618cfdc0cc1fa6d6d81/libobjc%2Fselector.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68ade9e4e84617fd5c613618cfdc0cc1fa6d6d81/libobjc%2Fselector.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fselector.c?ref=68ade9e4e84617fd5c613618cfdc0cc1fa6d6d81", "patch": "@@ -369,17 +369,48 @@ sel_getTypedSelector (const char *name)\n   if (i != 0)\n     {\n       struct objc_list *l;\n+      SEL returnValue = NULL;\n \n       for (l = (struct objc_list *) sarray_get_safe (__objc_selector_array, i);\n \t   l; l = l->tail)\n \t{\n \t  SEL s = (SEL) l->head;\n \t  if (s->sel_types)\n \t    {\n-\t      objc_mutex_unlock (__objc_runtime_mutex);\n-\t      return s;\n+\t      if (returnValue == NULL)\n+\t\t{\n+\t\t  /* First typed selector that we find.  Keep it in\n+\t\t     returnValue, but keep checking as we want to\n+\t\t     detect conflicts.  */\n+\t\t  returnValue = s;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  /* We had already found a typed selectors, so we\n+\t\t     have multiple ones.  Double-check that they have\n+\t\t     different types, just in case for some reason we\n+\t\t     got duplicates with the same types.  If so, it's\n+\t\t     OK, we'll ignore the duplicate.  */\n+\t\t  if (returnValue->sel_types == s->sel_types)\n+\t\t    continue;\n+\t\t  else if (sel_types_match (returnValue->sel_types, s->sel_types))\n+\t\t    continue;\n+\t\t  else\n+\t\t    {\n+\t\t      /* The types of the two selectors are different;\n+\t\t\t it's a conflict.  Too bad.  Return NULL.  */\n+\t\t      objc_mutex_unlock (__objc_runtime_mutex);\n+\t\t      return NULL;\n+\t\t    }\n+\t\t}\n \t    }\n \t}\n+\n+      if (returnValue != NULL)\n+\t{\n+\t  objc_mutex_unlock (__objc_runtime_mutex);\n+\t  return returnValue;\n+\t}\n     }\n \n   /* No typed selector found.  Return NULL.  */"}]}