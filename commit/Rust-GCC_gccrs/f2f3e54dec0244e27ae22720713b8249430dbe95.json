{"sha": "f2f3e54dec0244e27ae22720713b8249430dbe95", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJmM2U1NGRlYzAyNDRlMjdhZTIyNzIwNzEzYjgyNDk0MzBkYmU5NQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-04-21T19:17:48Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-04-21T19:17:48Z"}, "message": "i386.md (*extzvqi_mem_rex64): Move above *extzv<mode>.\n\n\t* config/i386/i386.md (*extzvqi_mem_rex64): Move above *extzv<mode>.\n\tRemove UNSPEC_NOREX_MEM tag.  Update corresponding peephole2 pattern.\n\t(*insvqi_1_mem_rex64): Move above insv<mode>_1.  Remove\n\tUNSPEC_NOREX_MEM tag.  Update corresponding peephole2 pattern.\n\t(UNSPEC_NOREX_MEM): Remove definition.\n\nFrom-SVN: r247066", "tree": {"sha": "5b62da5fa4c126730024c3e5b7de1755a217d52c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b62da5fa4c126730024c3e5b7de1755a217d52c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2f3e54dec0244e27ae22720713b8249430dbe95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2f3e54dec0244e27ae22720713b8249430dbe95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2f3e54dec0244e27ae22720713b8249430dbe95", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2f3e54dec0244e27ae22720713b8249430dbe95/comments", "author": null, "committer": null, "parents": [{"sha": "7b9efd0304da30be598cc672ce78e82923947953", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b9efd0304da30be598cc672ce78e82923947953", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b9efd0304da30be598cc672ce78e82923947953"}], "stats": {"total": 83, "additions": 42, "deletions": 41}, "files": [{"sha": "b58f5050db0b513902f3e8b8be45699eb2765f8f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2f3e54dec0244e27ae22720713b8249430dbe95/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2f3e54dec0244e27ae22720713b8249430dbe95/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f2f3e54dec0244e27ae22720713b8249430dbe95", "patch": "@@ -1,3 +1,11 @@\n+2017-04-21  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*extzvqi_mem_rex64): Move above *extzv<mode>.\n+\tRemove UNSPEC_NOREX_MEM tag.  Update corresponding peephole2 pattern.\n+\t(*insvqi_1_mem_rex64): Move above insv<mode>_1.  Remove\n+\tUNSPEC_NOREX_MEM tag.  Update corresponding peephole2 pattern.\n+\t(UNSPEC_NOREX_MEM): Remove definition.\n+\n 2017-04-21  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/79547\n@@ -116,7 +124,7 @@\n \t(build_array_type): Likewise.  Add typeless_storage argument.\n \n 2017-04-19  Eric Botcazou  <ebotcazou@adacore.com>\n-            Jakub Jelinek  <jakub@redhat.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/80426\n \t* tree-vrp.c (extract_range_from_binary_expr_1): For an additive\n@@ -158,7 +166,7 @@\n \tare only used in debug insns.\n \n 2017-04-19  Eric Botcazou  <ebotcazou@adacore.com>\n-            Vladimir Makarov  <vmakarov@redhat.com>\n+\t    Vladimir Makarov  <vmakarov@redhat.com>\n \n \t* config/sparc/predicates.md (input_operand): Add comment.  Return\n \ttrue for any memory operand when LRA is in progress.\n@@ -325,7 +333,7 @@\n \n 2017-04-12  Jan Hubicka  <hubicka@ucw.cz>\n \n-\tPR lto/69953 \n+\tPR lto/69953\n \t* ipa-visibility.c (non_local_p): Fix typos.\n \t(localize_node): When localizing symbol in same comdat group,\n \tdissolve the group only when we know external symbols are going"}, {"sha": "616a0b736719b6829351789fcc8287b31286e3da", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 31, "deletions": 38, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2f3e54dec0244e27ae22720713b8249430dbe95/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2f3e54dec0244e27ae22720713b8249430dbe95/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f2f3e54dec0244e27ae22720713b8249430dbe95", "patch": "@@ -114,7 +114,6 @@\n   UNSPEC_STOS\n   UNSPEC_PEEPSIB\n   UNSPEC_INSN_FALSE_DEP\n-  UNSPEC_NOREX_MEM\n \n   ;; For SSE/MMX support:\n   UNSPEC_FIX_NOTRUNC\n@@ -2808,28 +2807,27 @@\n     operands[1] = copy_to_reg (operands[1]);\n })\n \n-(define_insn \"*extzv<mode>\"\n-  [(set (match_operand:SWI248 0 \"register_operand\" \"=R\")\n-\t(zero_extract:SWI248 (match_operand 1 \"ext_register_operand\" \"Q\")\n-\t\t\t     (const_int 8)\n-\t\t\t     (const_int 8)))]\n-  \"\"\n-  \"movz{bl|x}\\t{%h1, %k0|%k0, %h1}\"\n-  [(set_attr \"type\" \"imovx\")\n-   (set_attr \"mode\" \"SI\")])\n-\n (define_insn \"*extzvqi_mem_rex64\"\n   [(set (match_operand:QI 0 \"norex_memory_operand\" \"=Bn\")\n \t(subreg:QI\n \t  (zero_extract:SI (match_operand 1 \"ext_register_operand\" \"Q\")\n \t\t\t   (const_int 8)\n-\t\t\t   (const_int 8)) 0))\n-   (unspec [(const_int 0)] UNSPEC_NOREX_MEM)]\n+\t\t\t   (const_int 8)) 0))]\n   \"TARGET_64BIT && reload_completed\"\n   \"mov{b}\\t{%h1, %0|%0, %h1}\"\n   [(set_attr \"type\" \"imov\")\n    (set_attr \"mode\" \"QI\")])\n \n+(define_insn \"*extzv<mode>\"\n+  [(set (match_operand:SWI248 0 \"register_operand\" \"=R\")\n+\t(zero_extract:SWI248 (match_operand 1 \"ext_register_operand\" \"Q\")\n+\t\t\t     (const_int 8)\n+\t\t\t     (const_int 8)))]\n+  \"\"\n+  \"movz{bl|x}\\t{%h1, %k0|%k0, %h1}\"\n+  [(set_attr \"type\" \"imovx\")\n+   (set_attr \"mode\" \"SI\")])\n+\n (define_insn \"*extzvqi\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=QBc,?R,m\")\n \t(subreg:QI\n@@ -2867,13 +2865,11 @@\n    (set (match_operand:QI 2 \"norex_memory_operand\") (match_dup 0))]\n   \"TARGET_64BIT\n    && peep2_reg_dead_p (2, operands[0])\"\n-  [(parallel\n-     [(set (match_dup 2)\n-\t   (subreg:QI\n-\t     (zero_extract:SI (match_dup 1)\n-\t\t\t      (const_int 8)\n-\t\t\t      (const_int 8)) 0))\n-      (unspec [(const_int 0)] UNSPEC_NOREX_MEM)])])\n+  [(set (match_dup 2)\n+\t(subreg:QI\n+\t  (zero_extract:SI (match_dup 1)\n+\t\t\t   (const_int 8)\n+\t\t\t   (const_int 8)) 0))])\n \n (define_expand \"insv<mode>\"\n   [(set (zero_extract:SWI248 (match_operand:SWI248 0 \"register_operand\")\n@@ -2908,6 +2904,17 @@\n   DONE;\n })\n \n+(define_insn \"*insvqi_1_mem_rex64\"\n+  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"+Q\")\n+\t\t\t (const_int 8)\n+\t\t\t (const_int 8))\n+\t(subreg:SI\n+\t  (match_operand:QI 1 \"norex_memory_operand\" \"Bn\") 0))]\n+  \"TARGET_64BIT && reload_completed\"\n+  \"mov{b}\\t{%1, %h0|%h0, %1}\"\n+  [(set_attr \"type\" \"imov\")\n+   (set_attr \"mode\" \"QI\")])\n+\n (define_insn \"insv<mode>_1\"\n   [(set (zero_extract:SWI248 (match_operand 0 \"ext_register_operand\" \"+Q,Q\")\n \t\t\t     (const_int 8)\n@@ -2923,18 +2930,6 @@\n    (set_attr \"type\" \"imov\")\n    (set_attr \"mode\" \"QI\")])\n \n-(define_insn \"*insvqi_1_mem_rex64\"\n-  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"+Q\")\n-\t\t\t (const_int 8)\n-\t\t\t (const_int 8))\n-\t(subreg:SI\n-\t  (match_operand:QI 1 \"norex_memory_operand\" \"Bn\") 0))\n-   (unspec [(const_int 0)] UNSPEC_NOREX_MEM)]\n-  \"TARGET_64BIT && reload_completed\"\n-  \"mov{b}\\t{%1, %h0|%h0, %1}\"\n-  [(set_attr \"type\" \"imov\")\n-   (set_attr \"mode\" \"QI\")])\n-\n (define_insn \"*insvqi_1\"\n   [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"+Q,Q\")\n \t\t\t (const_int 8)\n@@ -2956,12 +2951,10 @@\n \t(subreg:SI (match_dup 0) 0))]\n   \"TARGET_64BIT\n    && peep2_reg_dead_p (2, operands[0])\"\n-  [(parallel\n-     [(set (zero_extract:SI (match_dup 2)\n-\t\t\t    (const_int 8)\n-\t\t\t    (const_int 8))\n-\t   (subreg:SI (match_dup 1) 0))\n-      (unspec [(const_int 0)] UNSPEC_NOREX_MEM)])])\n+  [(set (zero_extract:SI (match_dup 2)\n+\t\t\t (const_int 8)\n+\t\t\t (const_int 8))\n+\t   (subreg:SI (match_dup 1) 0))])\n \n (define_code_iterator any_extract [sign_extract zero_extract])\n "}]}