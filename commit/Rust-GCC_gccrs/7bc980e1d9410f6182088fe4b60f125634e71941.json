{"sha": "7bc980e1d9410f6182088fe4b60f125634e71941", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JjOTgwZTFkOTQxMGY2MTgyMDg4ZmU0YjYwZjEyNTYzNGU3MTk0MQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2007-07-30T16:30:18Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2007-07-30T16:30:18Z"}, "message": "alias.c (record_set, [...]): Constify.\n\n\t* alias.c (record_set, memory_modified_1): Constify.\n\t* bt-load.c (note_btr_set): Likewise.\n\t* caller-save.c (mark_set_regs, add_stored_regs): Likewise.\n\t* combine.c (set_nonzero_bits_and_sign_copies,\n\texpand_field_assignment, record_dead_and_set_regs_1,\n\tuse_crosses_set_p, reg_dead_at_p_1, can_combine_p,\n\tlikely_spilled_retval_1): Likewise.\n\t* config/frv/frv.c (frv_registers_update_1, frv_io_check_address,\n\tfrv_io_handle_set): Likewise.\n\t* config/mips/mips.c (mips_sim_record_set,\n\tvr4130_true_reg_dependence_p_1): Likewise.\n\t* config/mt/mt.c (insn_dependent_p_1): Likewise.\n\t* config/s390/s390.c (s390_reg_clobbered_rtx): Likewise.\n\t* config/sh/sh.c (flow_dependent_p_1): Likewise.\n\t* cselib.c (cselib_invalidate_rtx_note_stores): Likewise.\n\t* dce.c (mark_nonreg_stores_1, mark_nonreg_stores_2): Likewise.\n\t* ddg.c (mark_mem_store): Likewise.\n\t* df-problems.c (df_urec_mark_reg_change): Likewise.\n\t* function.c (update_epilogue_consts): Likewise.\n\t* gcse.c (record_set_info, record_last_set_info,\n\tmems_conflict_for_gcse_p, canon_list_insert, reg_set_info,\n\treg_clear_last_set): Likewise.\n\t* global.c (mark_reg_store, mark_reg_clobber, reg_becomes_live):\n\tLikewise.\n\t* jump.c (reversed_comparison_code_parts): Likewise.\n\t* local-alloc.c (validate_equiv_mem_from_store, no_equiv,\n\treg_is_set): Likewise.\n\t* loop-iv.c (mark_altered): Likewise.\n\t* mode-switching.c (reg_becomes_live): Likewise.\n\t* optabs.c (no_conflict_move_test): Likewise.\n\t* postreload-gcse.c (record_last_set_info, find_mem_conflicts):\n\tLikewise.\n\t* postreload.c (reload_combine_note_store, move2add_note_store):\n\tLikewise.\n\t* regmove.c (flags_set_1): Likewise.\n\t* regrename.c (note_sets, kill_clobbered_value, kill_set_value):\n\tLikewise.\n\t* reload1.c (mark_not_eliminable, forget_old_reloads_1):\n\tLikewise. \n\t* resource.c (update_live_status): Likewise.\n\t* rtl.h (set_of, note_stores): Likewise.\n\t* rtlanal.c (set_of_1, parms_set, struct set_of_data, set_of,\n\tnote_stores, parms_set): Likewise.\n\t* sched-rgn.c (sets_likely_spilled_1): Likewise.\n\t* stack-ptr-mod.c (notice_stack_pointer_modification_1):\n\tLikewise. \n\t* var-tracking.c (count_stores, add_stores): Likewise.\n\nFrom-SVN: r127065", "tree": {"sha": "8429a0b8e1c922b5a0ab2c1984b93e9e7b51e2f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8429a0b8e1c922b5a0ab2c1984b93e9e7b51e2f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bc980e1d9410f6182088fe4b60f125634e71941", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bc980e1d9410f6182088fe4b60f125634e71941", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bc980e1d9410f6182088fe4b60f125634e71941", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bc980e1d9410f6182088fe4b60f125634e71941/comments", "author": null, "committer": null, "parents": [{"sha": "4f5888905c9a368a6399031b7fcd92587e4a6524", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f5888905c9a368a6399031b7fcd92587e4a6524", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f5888905c9a368a6399031b7fcd92587e4a6524"}], "stats": {"total": 281, "additions": 166, "deletions": 115}, "files": [{"sha": "3e62b14c9f24ef9479a6e7b2c171135491a9a58e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7bc980e1d9410f6182088fe4b60f125634e71941", "patch": "@@ -1,3 +1,53 @@\n+2007-07-30  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* alias.c (record_set, memory_modified_1): Constify.\n+\t* bt-load.c (note_btr_set): Likewise.\n+\t* caller-save.c (mark_set_regs, add_stored_regs): Likewise.\n+\t* combine.c (set_nonzero_bits_and_sign_copies,\n+\texpand_field_assignment, record_dead_and_set_regs_1,\n+\tuse_crosses_set_p, reg_dead_at_p_1, can_combine_p,\n+\tlikely_spilled_retval_1): Likewise.\n+\t* config/frv/frv.c (frv_registers_update_1, frv_io_check_address,\n+\tfrv_io_handle_set): Likewise.\n+\t* config/mips/mips.c (mips_sim_record_set,\n+\tvr4130_true_reg_dependence_p_1): Likewise.\n+\t* config/mt/mt.c (insn_dependent_p_1): Likewise.\n+\t* config/s390/s390.c (s390_reg_clobbered_rtx): Likewise.\n+\t* config/sh/sh.c (flow_dependent_p_1): Likewise.\n+\t* cselib.c (cselib_invalidate_rtx_note_stores): Likewise.\n+\t* dce.c (mark_nonreg_stores_1, mark_nonreg_stores_2): Likewise.\n+\t* ddg.c (mark_mem_store): Likewise.\n+\t* df-problems.c (df_urec_mark_reg_change): Likewise.\n+\t* function.c (update_epilogue_consts): Likewise.\n+\t* gcse.c (record_set_info, record_last_set_info,\n+\tmems_conflict_for_gcse_p, canon_list_insert, reg_set_info,\n+\treg_clear_last_set): Likewise.\n+\t* global.c (mark_reg_store, mark_reg_clobber, reg_becomes_live):\n+\tLikewise.\n+\t* jump.c (reversed_comparison_code_parts): Likewise.\n+\t* local-alloc.c (validate_equiv_mem_from_store, no_equiv,\n+\treg_is_set): Likewise.\n+\t* loop-iv.c (mark_altered): Likewise.\n+\t* mode-switching.c (reg_becomes_live): Likewise.\n+\t* optabs.c (no_conflict_move_test): Likewise.\n+\t* postreload-gcse.c (record_last_set_info, find_mem_conflicts):\n+\tLikewise.\n+\t* postreload.c (reload_combine_note_store, move2add_note_store):\n+\tLikewise.\n+\t* regmove.c (flags_set_1): Likewise.\n+\t* regrename.c (note_sets, kill_clobbered_value, kill_set_value):\n+\tLikewise.\n+\t* reload1.c (mark_not_eliminable, forget_old_reloads_1):\n+\tLikewise. \n+\t* resource.c (update_live_status): Likewise.\n+\t* rtl.h (set_of, note_stores): Likewise.\n+\t* rtlanal.c (set_of_1, parms_set, struct set_of_data, set_of,\n+\tnote_stores, parms_set): Likewise.\n+\t* sched-rgn.c (sets_likely_spilled_1): Likewise.\n+\t* stack-ptr-mod.c (notice_stack_pointer_modification_1):\n+\tLikewise. \n+\t* var-tracking.c (count_stores, add_stores): Likewise.\n+\n 2007-07-30  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* alias.c (mems_in_disjoint_alias_sets_p,"}, {"sha": "689c944c54edffeef4d40fb247513a8b84d7c579", "filename": "gcc/alias.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=7bc980e1d9410f6182088fe4b60f125634e71941", "patch": "@@ -150,7 +150,7 @@ typedef struct alias_set_entry *alias_set_entry;\n \n static int rtx_equal_for_memref_p (rtx, rtx);\n static int memrefs_conflict_p (int, rtx, int, rtx, HOST_WIDE_INT);\n-static void record_set (rtx, rtx, void *);\n+static void record_set (rtx, const_rtx, void *);\n static int base_alias_check (rtx, rtx, enum machine_mode,\n \t\t\t     enum machine_mode);\n static rtx find_base_value (rtx);\n@@ -167,7 +167,7 @@ static rtx adjust_offset_for_component_ref (tree, rtx);\n static int nonoverlapping_memrefs_p (const_rtx, const_rtx);\n static int write_dependence_p (const_rtx, const_rtx, int);\n \n-static void memory_modified_1 (rtx, rtx, void *);\n+static void memory_modified_1 (rtx, const_rtx, void *);\n static void record_alias_subset (HOST_WIDE_INT, HOST_WIDE_INT);\n \n /* Set up all info needed to perform alias analysis on memory references.  */\n@@ -978,7 +978,7 @@ static char *reg_seen;\n static int unique_id;\n \n static void\n-record_set (rtx dest, rtx set, void *data ATTRIBUTE_UNUSED)\n+record_set (rtx dest, const_rtx set, void *data ATTRIBUTE_UNUSED)\n {\n   unsigned regno;\n   rtx src;\n@@ -2353,7 +2353,7 @@ init_alias_once (void)\n    to be memory reference.  */\n static bool memory_modified;\n static void\n-memory_modified_1 (rtx x, rtx pat ATTRIBUTE_UNUSED, void *data)\n+memory_modified_1 (rtx x, const_rtx pat ATTRIBUTE_UNUSED, void *data)\n {\n   if (MEM_P (x))\n     {"}, {"sha": "c6f30c2a9ad9e4a30024bbcea899c440018a51a7", "filename": "gcc/bt-load.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fbt-load.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fbt-load.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbt-load.c?ref=7bc980e1d9410f6182088fe4b60f125634e71941", "patch": "@@ -141,7 +141,7 @@ static void move_btr_def (basic_block, int, btr_def, bitmap, HARD_REG_SET *);\n static int migrate_btr_def (btr_def, int);\n static void migrate_btr_defs (enum reg_class, int);\n static int can_move_up (basic_block, rtx, int);\n-static void note_btr_set (rtx, rtx, void *);\n+static void note_btr_set (rtx, const_rtx, void *);\n \f\n /* The following code performs code motion of target load instructions\n    (instructions that set branch target registers), to move them\n@@ -423,7 +423,7 @@ typedef struct {\n    straightforward definitions.  DATA points to information about the\n    current basic block that needs updating.  */\n static void\n-note_btr_set (rtx dest, rtx set ATTRIBUTE_UNUSED, void *data)\n+note_btr_set (rtx dest, const_rtx set ATTRIBUTE_UNUSED, void *data)\n {\n   defs_uses_info *info = data;\n   int regno, end_regno;"}, {"sha": "82672e0c9151ef680262a1227ae27c98f48a437e", "filename": "gcc/caller-save.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=7bc980e1d9410f6182088fe4b60f125634e71941", "patch": "@@ -86,15 +86,15 @@ static int n_regs_saved;\n static HARD_REG_SET referenced_regs;\n \n \n-static void mark_set_regs (rtx, rtx, void *);\n+static void mark_set_regs (rtx, const_rtx, void *);\n static void mark_referenced_regs (rtx);\n static int insert_save (struct insn_chain *, int, int, HARD_REG_SET *,\n \t\t\tenum machine_mode *);\n static int insert_restore (struct insn_chain *, int, int, int,\n \t\t\t   enum machine_mode *);\n static struct insn_chain *insert_one_insn (struct insn_chain *, int, int,\n \t\t\t\t\t   rtx);\n-static void add_stored_regs (rtx, rtx, void *);\n+static void add_stored_regs (rtx, const_rtx, void *);\n \f\n static GTY(()) rtx savepat;\n static GTY(()) rtx restpat;\n@@ -511,7 +511,7 @@ save_call_clobbered_regs (void)\n    been assigned hard regs have had their register number changed already,\n    so we can ignore pseudos.  */\n static void\n-mark_set_regs (rtx reg, rtx setter ATTRIBUTE_UNUSED, void *data)\n+mark_set_regs (rtx reg, const_rtx setter ATTRIBUTE_UNUSED, void *data)\n {\n   int regno, endregno, i;\n   HARD_REG_SET *this_insn_sets = data;\n@@ -542,7 +542,7 @@ mark_set_regs (rtx reg, rtx setter ATTRIBUTE_UNUSED, void *data)\n    been assigned hard regs have had their register number changed already,\n    so we can ignore pseudos.  */\n static void\n-add_stored_regs (rtx reg, rtx setter, void *data)\n+add_stored_regs (rtx reg, const_rtx setter, void *data)\n {\n   int regno, endregno, i;\n   enum machine_mode mode = GET_MODE (reg);"}, {"sha": "3fe9a166a9fbee4a067598ab4b79953a2ea1b733", "filename": "gcc/combine.c", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=7bc980e1d9410f6182088fe4b60f125634e71941", "patch": "@@ -379,7 +379,7 @@ static void do_SUBST (rtx *, rtx);\n static void do_SUBST_INT (int *, int);\n static void init_reg_last (void);\n static void setup_incoming_promotions (rtx);\n-static void set_nonzero_bits_and_sign_copies (rtx, rtx, void *);\n+static void set_nonzero_bits_and_sign_copies (rtx, const_rtx, void *);\n static int cant_combine_insn_p (rtx);\n static int can_combine_p (rtx, rtx, rtx, rtx, rtx *, rtx *);\n static int combinable_i3pat (rtx, rtx *, rtx, rtx, int, rtx *);\n@@ -394,7 +394,7 @@ static rtx simplify_if_then_else (rtx);\n static rtx simplify_set (rtx);\n static rtx simplify_logical (rtx);\n static rtx expand_compound_operation (rtx);\n-static rtx expand_field_assignment (rtx);\n+static const_rtx expand_field_assignment (const_rtx);\n static rtx make_extraction (enum machine_mode, rtx, HOST_WIDE_INT,\n \t\t\t    rtx, unsigned HOST_WIDE_INT, int, int, int);\n static rtx extract_left_shift (rtx, int);\n@@ -425,12 +425,12 @@ static enum rtx_code simplify_comparison (enum rtx_code, rtx *, rtx *);\n static void update_table_tick (rtx);\n static void record_value_for_reg (rtx, rtx, rtx);\n static void check_conversions (rtx, rtx);\n-static void record_dead_and_set_regs_1 (rtx, rtx, void *);\n+static void record_dead_and_set_regs_1 (rtx, const_rtx, void *);\n static void record_dead_and_set_regs (rtx);\n static int get_last_value_validate (rtx *, rtx, int, int);\n static rtx get_last_value (const_rtx);\n-static int use_crosses_set_p (rtx, int);\n-static void reg_dead_at_p_1 (rtx, rtx, void *);\n+static int use_crosses_set_p (const_rtx, int);\n+static void reg_dead_at_p_1 (rtx, const_rtx, void *);\n static int reg_dead_at_p (rtx, rtx);\n static void move_deaths (rtx, rtx, int, rtx, rtx *);\n static int reg_bitfield_target_p (rtx, rtx);\n@@ -1361,7 +1361,7 @@ setup_incoming_promotions (rtx first)\n    by any set of X.  */\n \n static void\n-set_nonzero_bits_and_sign_copies (rtx x, rtx set, void *data)\n+set_nonzero_bits_and_sign_copies (rtx x, const_rtx set, void *data)\n {\n   rtx insn = (rtx) data;\n   unsigned int num;\n@@ -1483,7 +1483,8 @@ can_combine_p (rtx insn, rtx i3, rtx pred ATTRIBUTE_UNUSED, rtx succ,\n \t       rtx *pdest, rtx *psrc)\n {\n   int i;\n-  rtx set = 0, src, dest;\n+  const_rtx set = 0;\n+  rtx src, dest;\n   rtx p;\n #ifdef AUTO_INC_DEC\n   rtx link;\n@@ -1992,7 +1993,7 @@ struct likely_spilled_retval_info\n /* Called via note_stores by likely_spilled_retval_p.  Remove from info->mask\n    hard registers that are known to be written to / clobbered in full.  */\n static void\n-likely_spilled_retval_1 (rtx x, rtx set, void *data)\n+likely_spilled_retval_1 (rtx x, const_rtx set, void *data)\n {\n   struct likely_spilled_retval_info *info = data;\n   unsigned regno, nregs;\n@@ -6169,8 +6170,8 @@ expand_compound_operation (rtx x)\n    We half-heartedly support variable positions, but do not at all\n    support variable lengths.  */\n \n-static rtx\n-expand_field_assignment (rtx x)\n+static const_rtx\n+expand_field_assignment (const_rtx x)\n {\n   rtx inner;\n   rtx pos;\t\t\t/* Always counts from low bit.  */\n@@ -11357,7 +11358,7 @@ record_value_for_reg (rtx reg, rtx insn, rtx value)\n    set is occurring.  */\n \n static void\n-record_dead_and_set_regs_1 (rtx dest, rtx setter, void *data)\n+record_dead_and_set_regs_1 (rtx dest, const_rtx setter, void *data)\n {\n   rtx record_dead_insn = (rtx) data;\n \n@@ -11787,7 +11788,7 @@ get_last_value (const_rtx x)\n    that is set in an instruction more recent than FROM_LUID.  */\n \n static int\n-use_crosses_set_p (rtx x, int from_luid)\n+use_crosses_set_p (const_rtx x, int from_luid)\n {\n   const char *fmt;\n   int i;\n@@ -11848,7 +11849,7 @@ static int reg_dead_flag;\n    reg_dead_flag to 1 if X is a CLOBBER and to -1 it is a SET.  */\n \n static void\n-reg_dead_at_p_1 (rtx dest, rtx x, void *data ATTRIBUTE_UNUSED)\n+reg_dead_at_p_1 (rtx dest, const_rtx x, void *data ATTRIBUTE_UNUSED)\n {\n   unsigned int regno, endregno;\n "}, {"sha": "a92acf3620f8936ddb7543a8b734ab757de092ba", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=7bc980e1d9410f6182088fe4b60f125634e71941", "patch": "@@ -331,7 +331,7 @@ static int frv_cond_flags \t\t\t(rtx);\n static bool frv_regstate_conflict_p \t\t(regstate_t, regstate_t);\n static int frv_registers_conflict_p_1 \t\t(rtx *, void *);\n static bool frv_registers_conflict_p \t\t(rtx);\n-static void frv_registers_update_1 \t\t(rtx, rtx, void *);\n+static void frv_registers_update_1 \t\t(rtx, const_rtx, void *);\n static void frv_registers_update \t\t(rtx);\n static void frv_start_packet \t\t\t(void);\n static void frv_start_packet_block \t\t(void);\n@@ -7215,7 +7215,7 @@ frv_registers_conflict_p (rtx x)\n    under which X is modified.  Update FRV_PACKET accordingly.  */\n \n static void\n-frv_registers_update_1 (rtx x, rtx pat ATTRIBUTE_UNUSED, void *data)\n+frv_registers_update_1 (rtx x, const_rtx pat ATTRIBUTE_UNUSED, void *data)\n {\n   unsigned int regno;\n \n@@ -7753,7 +7753,7 @@ frv_extract_membar (struct frv_io *io, rtx insn)\n    if X is a register and *DATA depends on X.  */\n \n static void\n-frv_io_check_address (rtx x, rtx pat ATTRIBUTE_UNUSED, void *data)\n+frv_io_check_address (rtx x, const_rtx pat ATTRIBUTE_UNUSED, void *data)\n {\n   rtx *other = data;\n \n@@ -7765,7 +7765,7 @@ frv_io_check_address (rtx x, rtx pat ATTRIBUTE_UNUSED, void *data)\n    Remove every modified register from the set.  */\n \n static void\n-frv_io_handle_set (rtx x, rtx pat ATTRIBUTE_UNUSED, void *data)\n+frv_io_handle_set (rtx x, const_rtx pat ATTRIBUTE_UNUSED, void *data)\n {\n   HARD_REG_SET *set = data;\n   unsigned int regno;"}, {"sha": "0ff91db811eb1c20877a7b891f61232bfc94fb8a", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=7bc980e1d9410f6182088fe4b60f125634e71941", "patch": "@@ -371,7 +371,7 @@ static void mips_sim_wait_regs_1 (rtx *, void *);\n static void mips_sim_wait_regs (struct mips_sim *, rtx);\n static void mips_sim_wait_units (struct mips_sim *, rtx);\n static void mips_sim_wait_insn (struct mips_sim *, rtx);\n-static void mips_sim_record_set (rtx, rtx, void *);\n+static void mips_sim_record_set (rtx, const_rtx, void *);\n static void mips_sim_issue_insn (struct mips_sim *, rtx);\n static void mips_sim_issue_nop (struct mips_sim *);\n static void mips_sim_finish_insn (struct mips_sim *, rtx);\n@@ -388,7 +388,7 @@ static bool mips_return_in_memory (tree, tree);\n static bool mips_strict_argument_naming (CUMULATIVE_ARGS *);\n static void mips_macc_chains_record (rtx);\n static void mips_macc_chains_reorder (rtx *, int);\n-static void vr4130_true_reg_dependence_p_1 (rtx, rtx, void *);\n+static void vr4130_true_reg_dependence_p_1 (rtx, const_rtx, void *);\n static bool vr4130_true_reg_dependence_p (rtx);\n static bool vr4130_swap_insns_p (rtx, rtx);\n static void vr4130_reorder (rtx *, int);\n@@ -9705,7 +9705,7 @@ mips_sim_wait_insn (struct mips_sim *state, rtx insn)\n    in simulation state DATA.  */\n \n static void\n-mips_sim_record_set (rtx x, rtx pat ATTRIBUTE_UNUSED, void *data)\n+mips_sim_record_set (rtx x, const_rtx pat ATTRIBUTE_UNUSED, void *data)\n {\n   struct mips_sim *state;\n   unsigned int i;\n@@ -10772,7 +10772,7 @@ static rtx vr4130_last_insn;\n    if the instruction uses the value of register X.  */\n \n static void\n-vr4130_true_reg_dependence_p_1 (rtx x, rtx pat ATTRIBUTE_UNUSED, void *data)\n+vr4130_true_reg_dependence_p_1 (rtx x, const_rtx pat ATTRIBUTE_UNUSED, void *data)\n {\n   rtx *insn_ptr = data;\n   if (REG_P (x)"}, {"sha": "5e03f6f9452db1d394874c7209f622c7ea9a6032", "filename": "gcc/config/mt/mt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fconfig%2Fmt%2Fmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fconfig%2Fmt%2Fmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmt%2Fmt.c?ref=7bc980e1d9410f6182088fe4b60f125634e71941", "patch": "@@ -156,7 +156,7 @@ mt_get_attr_type (rtx complete_insn)\n /* A helper routine for insn_dependent_p called through note_stores.  */\n \n static void\n-insn_dependent_p_1 (rtx x, rtx pat ATTRIBUTE_UNUSED, void *data)\n+insn_dependent_p_1 (rtx x, const_rtx pat ATTRIBUTE_UNUSED, void *data)\n {\n   rtx * pinsn = (rtx *) data;\n "}, {"sha": "30261656b12200d2b1690d6e1a7905ac56749845", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=7bc980e1d9410f6182088fe4b60f125634e71941", "patch": "@@ -6348,7 +6348,7 @@ find_unused_clobbered_reg (void)\n    clobbered hard regs in SETREG.  */\n \n static void\n-s390_reg_clobbered_rtx (rtx setreg, rtx set_insn ATTRIBUTE_UNUSED, void *data)\n+s390_reg_clobbered_rtx (rtx setreg, const_rtx set_insn ATTRIBUTE_UNUSED, void *data)\n {\n   int *regs_ever_clobbered = (int *)data;\n   unsigned int i, regno;"}, {"sha": "02a871360441c500b29be9eb9935aa44482db0e0", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=7bc980e1d9410f6182088fe4b60f125634e71941", "patch": "@@ -223,7 +223,7 @@ static rtx sh_expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n static void sh_output_mi_thunk (FILE *, tree, HOST_WIDE_INT, HOST_WIDE_INT, tree);\n static void sh_file_start (void);\n static int flow_dependent_p (rtx, rtx);\n-static void flow_dependent_p_1 (rtx, rtx, void *);\n+static void flow_dependent_p_1 (rtx, const_rtx, void *);\n static int shiftcosts (rtx);\n static int andcosts (rtx);\n static int addsubcosts (rtx);\n@@ -8911,7 +8911,7 @@ flow_dependent_p (rtx insn, rtx dep_insn)\n \n /* A helper function for flow_dependent_p called through note_stores.  */\n static void\n-flow_dependent_p_1 (rtx x, rtx pat ATTRIBUTE_UNUSED, void *data)\n+flow_dependent_p_1 (rtx x, const_rtx pat ATTRIBUTE_UNUSED, void *data)\n {\n   rtx * pinsn = (rtx *) data;\n "}, {"sha": "e93b7a86c3ce8ed945881fa1a9cfc3db6fa522ee", "filename": "gcc/cselib.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=7bc980e1d9410f6182088fe4b60f125634e71941", "patch": "@@ -1468,7 +1468,7 @@ cselib_invalidate_rtx (rtx dest)\n /* A wrapper for cselib_invalidate_rtx to be called via note_stores.  */\n \n static void\n-cselib_invalidate_rtx_note_stores (rtx dest, rtx ignore ATTRIBUTE_UNUSED,\n+cselib_invalidate_rtx_note_stores (rtx dest, const_rtx ignore ATTRIBUTE_UNUSED,\n \t\t\t\t   void *data ATTRIBUTE_UNUSED)\n {\n   cselib_invalidate_rtx (dest);"}, {"sha": "c9ff13fa17b1f0ca727e9ded02af86d09a54d986", "filename": "gcc/dce.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdce.c?ref=7bc980e1d9410f6182088fe4b60f125634e71941", "patch": "@@ -168,7 +168,7 @@ mark_insn (rtx insn, bool fast)\n    instruction containing DEST.  */\n \n static void\n-mark_nonreg_stores_1 (rtx dest, rtx pattern, void *data)\n+mark_nonreg_stores_1 (rtx dest, const_rtx pattern, void *data)\n {\n   if (GET_CODE (pattern) != CLOBBER && !REG_P (dest))\n     mark_insn ((rtx) data, true);\n@@ -179,7 +179,7 @@ mark_nonreg_stores_1 (rtx dest, rtx pattern, void *data)\n    instruction containing DEST.  */\n \n static void\n-mark_nonreg_stores_2 (rtx dest, rtx pattern, void *data)\n+mark_nonreg_stores_2 (rtx dest, const_rtx pattern, void *data)\n {\n   if (GET_CODE (pattern) != CLOBBER && !REG_P (dest))\n     mark_insn ((rtx) data, false);"}, {"sha": "e1c1d06e93790bc774057510f6e4a9f1906ff33a", "filename": "gcc/ddg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fddg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fddg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fddg.c?ref=7bc980e1d9410f6182088fe4b60f125634e71941", "patch": "@@ -87,7 +87,7 @@ mem_read_insn_p (rtx insn)\n }\n \n static void\n-mark_mem_store (rtx loc, rtx setter ATTRIBUTE_UNUSED, void *data ATTRIBUTE_UNUSED)\n+mark_mem_store (rtx loc, const_rtx setter ATTRIBUTE_UNUSED, void *data ATTRIBUTE_UNUSED)\n {\n   if (MEM_P (loc))\n     mem_ref_p = true;"}, {"sha": "a9c42a65549892550790d66ebfc5de3c686d8766", "filename": "gcc/df-problems.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fdf-problems.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fdf-problems.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-problems.c?ref=7bc980e1d9410f6182088fe4b60f125634e71941", "patch": "@@ -2594,7 +2594,7 @@ df_urec_alloc (bitmap all_blocks)\n    SETTER.  DATA is used to pass the current basic block info.  */\n \n static void\n-df_urec_mark_reg_change (rtx reg, rtx setter, void *data)\n+df_urec_mark_reg_change (rtx reg, const_rtx setter, void *data)\n {\n   int regno;\n   int endregno;"}, {"sha": "1856a6095e157be767863dae29158279d7472608", "filename": "gcc/function.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=7bc980e1d9410f6182088fe4b60f125634e71941", "patch": "@@ -4700,7 +4700,7 @@ struct epi_info\n };\n \n static void handle_epilogue_set (rtx, struct epi_info *);\n-static void update_epilogue_consts (rtx, rtx, void *);\n+static void update_epilogue_consts (rtx, const_rtx, void *);\n static void emit_equiv_load (struct epi_info *);\n \n /* Modify INSN, a list of one or more insns that is part of the epilogue, to\n@@ -4976,7 +4976,7 @@ handle_epilogue_set (rtx set, struct epi_info *p)\n /* Update the tracking information for registers set to constants.  */\n \n static void\n-update_epilogue_consts (rtx dest, rtx x, void *data)\n+update_epilogue_consts (rtx dest, const_rtx x, void *data)\n {\n   struct epi_info *p = (struct epi_info *) data;\n   rtx new;"}, {"sha": "09a2859978996a7554374aac85d9939c1d2e3a8a", "filename": "gcc/gcse.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=7bc980e1d9410f6182088fe4b60f125634e71941", "patch": "@@ -523,7 +523,7 @@ static void free_gcse_mem (void);\n static void alloc_reg_set_mem (int);\n static void free_reg_set_mem (void);\n static void record_one_set (int, rtx);\n-static void record_set_info (rtx, rtx, void *);\n+static void record_set_info (rtx, const_rtx, void *);\n static void compute_sets (void);\n static void hash_scan_insn (rtx, struct hash_table *, int);\n static void hash_scan_set (rtx, rtx, struct hash_table *);\n@@ -543,7 +543,7 @@ static unsigned int hash_set (int, int);\n static int expr_equiv_p (rtx, rtx);\n static void record_last_reg_set_info (rtx, int);\n static void record_last_mem_set_info (rtx);\n-static void record_last_set_info (rtx, rtx, void *);\n+static void record_last_set_info (rtx, const_rtx, void *);\n static void compute_hash_table (struct hash_table *);\n static void alloc_hash_table (int, struct hash_table *, int);\n static void free_hash_table (struct hash_table *);\n@@ -568,9 +568,9 @@ static void find_used_regs (rtx *, void *);\n static int try_replace_reg (rtx, rtx, rtx);\n static struct expr *find_avail_set (int, rtx);\n static int cprop_jump (basic_block, rtx, rtx, rtx, rtx);\n-static void mems_conflict_for_gcse_p (rtx, rtx, void *);\n+static void mems_conflict_for_gcse_p (rtx, const_rtx, void *);\n static int load_killed_in_block_p (basic_block, int, rtx, int);\n-static void canon_list_insert (rtx, rtx, void *);\n+static void canon_list_insert (rtx, const_rtx, void *);\n static int cprop_insn (rtx, int);\n static int cprop (int);\n static void find_implicit_sets (void);\n@@ -616,8 +616,8 @@ static void invalidate_any_buried_refs (rtx);\n static void compute_ld_motion_mems (void);\n static void trim_ld_motion_mems (void);\n static void update_ld_motion_stores (struct expr *);\n-static void reg_set_info (rtx, rtx, void *);\n-static void reg_clear_last_set (rtx, rtx, void *);\n+static void reg_set_info (rtx, const_rtx, void *);\n+static void reg_clear_last_set (rtx, const_rtx, void *);\n static bool store_ops_ok (rtx, int *);\n static rtx extract_mentioned_regs (rtx);\n static rtx extract_mentioned_regs_helper (rtx, rtx);\n@@ -1129,7 +1129,7 @@ record_one_set (int regno, rtx insn)\n    occurring.  */\n \n static void\n-record_set_info (rtx dest, rtx setter ATTRIBUTE_UNUSED, void *data)\n+record_set_info (rtx dest, const_rtx setter ATTRIBUTE_UNUSED, void *data)\n {\n   rtx record_set_insn = (rtx) data;\n \n@@ -1332,7 +1332,7 @@ static rtx gcse_mem_operand;\n    gcse_mems_conflict_p to a nonzero value.  */\n \n static void\n-mems_conflict_for_gcse_p (rtx dest, rtx setter ATTRIBUTE_UNUSED,\n+mems_conflict_for_gcse_p (rtx dest, const_rtx setter ATTRIBUTE_UNUSED,\n \t\t\t  void *data ATTRIBUTE_UNUSED)\n {\n   while (GET_CODE (dest) == SUBREG\n@@ -1940,7 +1940,7 @@ record_last_reg_set_info (rtx insn, int regno)\n    taken off pairwise.  */\n \n static void\n-canon_list_insert (rtx dest ATTRIBUTE_UNUSED, rtx unused1 ATTRIBUTE_UNUSED,\n+canon_list_insert (rtx dest ATTRIBUTE_UNUSED, const_rtx unused1 ATTRIBUTE_UNUSED,\n \t\t   void * v_insn)\n {\n   rtx dest_addr, insn;\n@@ -2001,7 +2001,7 @@ record_last_mem_set_info (rtx insn)\n    the SET is taking place.  */\n \n static void\n-record_last_set_info (rtx dest, rtx setter ATTRIBUTE_UNUSED, void *data)\n+record_last_set_info (rtx dest, const_rtx setter ATTRIBUTE_UNUSED, void *data)\n {\n   rtx last_set_insn = (rtx) data;\n \n@@ -5471,7 +5471,7 @@ static int num_stores;\n    note_stores.  */\n \n static void\n-reg_set_info (rtx dest, rtx setter ATTRIBUTE_UNUSED,\n+reg_set_info (rtx dest, const_rtx setter ATTRIBUTE_UNUSED,\n \t      void *data)\n {\n   sbitmap bb_reg = data;\n@@ -5491,7 +5491,7 @@ reg_set_info (rtx dest, rtx setter ATTRIBUTE_UNUSED,\n    note_stores.  */\n \n static void\n-reg_clear_last_set (rtx dest, rtx setter ATTRIBUTE_UNUSED,\n+reg_clear_last_set (rtx dest, const_rtx setter ATTRIBUTE_UNUSED,\n \t      void *data)\n {\n   int *dead_vec = data;"}, {"sha": "57e401ac99082841e1cde44708ed5ce426d48a65", "filename": "gcc/global.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=7bc980e1d9410f6182088fe4b60f125634e71941", "patch": "@@ -343,13 +343,13 @@ static void prune_preferences (void);\n static void find_reg (int, HARD_REG_SET, int, int, int);\n static void record_one_conflict (int);\n static void record_conflicts (int *, int);\n-static void mark_reg_store (rtx, rtx, void *);\n-static void mark_reg_clobber (rtx, rtx, void *);\n+static void mark_reg_store (rtx, const_rtx, void *);\n+static void mark_reg_clobber (rtx, const_rtx, void *);\n static void mark_reg_conflicts (rtx);\n static void mark_reg_death (rtx);\n static void set_preference (rtx, rtx);\n static void dump_conflicts (FILE *);\n-static void reg_becomes_live (rtx, rtx, void *);\n+static void reg_becomes_live (rtx, const_rtx, void *);\n static void reg_dies (int, enum machine_mode, struct insn_chain *);\n \n \n@@ -1542,7 +1542,7 @@ mirror_conflicts (void)\n    a REG_INC note was found for it).  */\n \n static void\n-mark_reg_store (rtx reg, rtx setter, void *data ATTRIBUTE_UNUSED)\n+mark_reg_store (rtx reg, const_rtx setter, void *data ATTRIBUTE_UNUSED)\n {\n   int regno;\n \n@@ -1589,7 +1589,7 @@ mark_reg_store (rtx reg, rtx setter, void *data ATTRIBUTE_UNUSED)\n /* Like mark_reg_store except notice just CLOBBERs; ignore SETs.  */\n \n static void\n-mark_reg_clobber (rtx reg, rtx setter, void *data)\n+mark_reg_clobber (rtx reg, const_rtx setter, void *data)\n {\n   if (GET_CODE (setter) == CLOBBER)\n     mark_reg_store (reg, setter, data);\n@@ -1798,7 +1798,7 @@ static regset live_relevant_regs;\n /* Record in live_relevant_regs and REGS_SET that register REG became live.\n    This is called via note_stores.  */\n static void\n-reg_becomes_live (rtx reg, rtx setter ATTRIBUTE_UNUSED, void *regs_set)\n+reg_becomes_live (rtx reg, const_rtx setter ATTRIBUTE_UNUSED, void *regs_set)\n {\n   int regno;\n "}, {"sha": "d0092f42988eb85919fa7b4f9b6c44c807dc072f", "filename": "gcc/jump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=7bc980e1d9410f6182088fe4b60f125634e71941", "patch": "@@ -302,7 +302,7 @@ reversed_comparison_code_parts (enum rtx_code code, rtx arg0, rtx arg1, rtx insn\n \t   prev != 0 && !LABEL_P (prev);\n \t   prev = prev_nonnote_insn (prev))\n \t{\n-\t  rtx set = set_of (arg0, prev);\n+\t  const_rtx set = set_of (arg0, prev);\n \t  if (set && GET_CODE (set) == SET\n \t      && rtx_equal_p (SET_DEST (set), arg0))\n \t    {"}, {"sha": "3a8401b91511f85ce5bb43f39faee62c594728bf", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=7bc980e1d9410f6182088fe4b60f125634e71941", "patch": "@@ -287,15 +287,15 @@ static struct equivalence *reg_equiv;\n static int recorded_label_ref;\n \n static void alloc_qty (int, enum machine_mode, int, int);\n-static void validate_equiv_mem_from_store (rtx, rtx, void *);\n+static void validate_equiv_mem_from_store (rtx, const_rtx, void *);\n static int validate_equiv_mem (rtx, rtx, rtx);\n static int equiv_init_varies_p (rtx);\n static int equiv_init_movable_p (rtx, int);\n static int contains_replace_regs (rtx);\n static int memref_referenced_p (rtx, rtx);\n static int memref_used_between_p (rtx, rtx, rtx);\n static void update_equiv_regs (void);\n-static void no_equiv (rtx, rtx, void *);\n+static void no_equiv (rtx, const_rtx, void *);\n static void block_alloc (int);\n static int qty_sugg_compare (int, int);\n static int qty_sugg_compare_1 (const void *, const void *);\n@@ -304,7 +304,7 @@ static int qty_compare_1 (const void *, const void *);\n static int combine_regs (rtx, rtx, int, int, rtx, int);\n static int reg_meets_class_p (int, enum reg_class);\n static void update_qty_class (int, int);\n-static void reg_is_set (rtx, rtx, void *);\n+static void reg_is_set (rtx, const_rtx, void *);\n static void reg_is_born (rtx, int);\n static void wipe_dead_reg (rtx, int);\n static int find_free_reg (enum reg_class, enum machine_mode, int, int, int,\n@@ -460,7 +460,7 @@ static int equiv_mem_modified;\n    Called via note_stores.  */\n \n static void\n-validate_equiv_mem_from_store (rtx dest, rtx set ATTRIBUTE_UNUSED,\n+validate_equiv_mem_from_store (rtx dest, const_rtx set ATTRIBUTE_UNUSED,\n \t\t\t       void *data ATTRIBUTE_UNUSED)\n {\n   if ((REG_P (dest)\n@@ -1235,7 +1235,7 @@ update_equiv_regs (void)\n    assignment - a SET, CLOBBER or REG_INC note.  It is currently not used,\n    but needs to be there because this function is called from note_stores.  */\n static void\n-no_equiv (rtx reg, rtx store ATTRIBUTE_UNUSED, void *data ATTRIBUTE_UNUSED)\n+no_equiv (rtx reg, const_rtx store ATTRIBUTE_UNUSED, void *data ATTRIBUTE_UNUSED)\n {\n   int regno;\n   rtx list;\n@@ -2071,7 +2071,7 @@ update_qty_class (int qtyno, int reg)\n    carry info from `block_alloc'.  */\n \n static void\n-reg_is_set (rtx reg, rtx setter, void *data ATTRIBUTE_UNUSED)\n+reg_is_set (rtx reg, const_rtx setter, void *data ATTRIBUTE_UNUSED)\n {\n   /* Note that note_stores will only pass us a SUBREG if it is a SUBREG of\n      a hard register.  These may actually not exist any more.  */"}, {"sha": "4f95d8ddf4c526edae001a40d3297ad99ceae27e", "filename": "gcc/loop-iv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Floop-iv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Floop-iv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-iv.c?ref=7bc980e1d9410f6182088fe4b60f125634e71941", "patch": "@@ -1308,7 +1308,7 @@ altered_reg_used (rtx *reg, void *alt)\n /* Marks registers altered by EXPR in set ALT.  */\n \n static void\n-mark_altered (rtx expr, rtx by ATTRIBUTE_UNUSED, void *alt)\n+mark_altered (rtx expr, const_rtx by ATTRIBUTE_UNUSED, void *alt)\n {\n   if (GET_CODE (expr) == SUBREG)\n     expr = SUBREG_REG (expr);"}, {"sha": "9667d965a27bd985a84a4bddb443f1b080e2660a", "filename": "gcc/mode-switching.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fmode-switching.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fmode-switching.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmode-switching.c?ref=7bc980e1d9410f6182088fe4b60f125634e71941", "patch": "@@ -93,7 +93,7 @@ static sbitmap *comp;\n static struct seginfo * new_seginfo (int, rtx, int, HARD_REG_SET);\n static void add_seginfo (struct bb_info *, struct seginfo *);\n static void reg_dies (rtx, HARD_REG_SET *);\n-static void reg_becomes_live (rtx, rtx, void *);\n+static void reg_becomes_live (rtx, const_rtx, void *);\n static void make_preds_opaque (basic_block, int);\n \f\n \n@@ -176,7 +176,7 @@ reg_dies (rtx reg, HARD_REG_SET *live)\n    This is called via note_stores.  */\n \n static void\n-reg_becomes_live (rtx reg, rtx setter ATTRIBUTE_UNUSED, void *live)\n+reg_becomes_live (rtx reg, const_rtx setter ATTRIBUTE_UNUSED, void *live)\n {\n   int regno;\n "}, {"sha": "3741139ea6c473ef4db595a118dce756dc434f79", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=7bc980e1d9410f6182088fe4b60f125634e71941", "patch": "@@ -3395,7 +3395,7 @@ struct no_conflict_data\n    in the list of insns that constitute the actual no_conflict block /\n    libcall block.  */\n static void\n-no_conflict_move_test (rtx dest, rtx set, void *p0)\n+no_conflict_move_test (rtx dest, const_rtx set, void *p0)\n {\n   struct no_conflict_data *p= p0;\n "}, {"sha": "0f2f67b5668fae49274fc5a4e9cbc206affb91a7", "filename": "gcc/postreload-gcse.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fpostreload-gcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fpostreload-gcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload-gcse.c?ref=7bc980e1d9410f6182088fe4b60f125634e71941", "patch": "@@ -177,10 +177,10 @@ static void free_mem (void);\n static bool oprs_unchanged_p (rtx, rtx, bool);\n static void record_last_reg_set_info (rtx, int);\n static void record_last_mem_set_info (rtx);\n-static void record_last_set_info (rtx, rtx, void *);\n+static void record_last_set_info (rtx, const_rtx, void *);\n static void record_opr_changes (rtx);\n \n-static void find_mem_conflicts (rtx, rtx, void *);\n+static void find_mem_conflicts (rtx, const_rtx, void *);\n static int load_killed_in_block_p (int, rtx, bool);\n static void reset_opr_set_tables (void);\n \n@@ -571,7 +571,7 @@ static int mems_conflict_p;\n    to a nonzero value.  */\n \n static void\n-find_mem_conflicts (rtx dest, rtx setter ATTRIBUTE_UNUSED,\n+find_mem_conflicts (rtx dest, const_rtx setter ATTRIBUTE_UNUSED,\n \t\t    void *data)\n {\n   rtx mem_op = (rtx) data;\n@@ -671,7 +671,7 @@ record_last_mem_set_info (rtx insn)\n    the SET is taking place.  */\n \n static void\n-record_last_set_info (rtx dest, rtx setter ATTRIBUTE_UNUSED, void *data)\n+record_last_set_info (rtx dest, const_rtx setter ATTRIBUTE_UNUSED, void *data)\n {\n   rtx last_set_insn = (rtx) data;\n "}, {"sha": "ff2356a76fbb95862507cf1bd7cca95e2da19484", "filename": "gcc/postreload.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fpostreload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fpostreload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload.c?ref=7bc980e1d9410f6182088fe4b60f125634e71941", "patch": "@@ -57,10 +57,10 @@ static int reload_cse_simplify_operands (rtx, rtx);\n \n static void reload_combine (void);\n static void reload_combine_note_use (rtx *, rtx);\n-static void reload_combine_note_store (rtx, rtx, void *);\n+static void reload_combine_note_store (rtx, const_rtx, void *);\n \n static void reload_cse_move2add (rtx);\n-static void move2add_note_store (rtx, rtx, void *);\n+static void move2add_note_store (rtx, const_rtx, void *);\n \n /* Call cse / combine like post-reload optimization phases.\n    FIRST is the first instruction.  */\n@@ -980,7 +980,7 @@ reload_combine (void)\n    accordingly.  Called via note_stores from reload_combine.  */\n \n static void\n-reload_combine_note_store (rtx dst, rtx set, void *data ATTRIBUTE_UNUSED)\n+reload_combine_note_store (rtx dst, const_rtx set, void *data ATTRIBUTE_UNUSED)\n {\n   int regno = 0;\n   int i;\n@@ -1419,7 +1419,7 @@ reload_cse_move2add (rtx first)\n    Called from reload_cse_move2add via note_stores.  */\n \n static void\n-move2add_note_store (rtx dst, rtx set, void *data ATTRIBUTE_UNUSED)\n+move2add_note_store (rtx dst, const_rtx set, void *data ATTRIBUTE_UNUSED)\n {\n   unsigned int regno = 0;\n   unsigned int nregs = 0;"}, {"sha": "5cdd658a505cef0793fd4315c0cd613885053049", "filename": "gcc/regmove.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=7bc980e1d9410f6182088fe4b60f125634e71941", "patch": "@@ -62,7 +62,7 @@ struct match {\n \n static rtx discover_flags_reg (void);\n static void mark_flags_life_zones (rtx);\n-static void flags_set_1 (rtx, rtx, void *);\n+static void flags_set_1 (rtx, const_rtx, void *);\n \n static int try_auto_increment (rtx, rtx, rtx, rtx, HOST_WIDE_INT, int);\n static int find_matches (rtx, struct match *);\n@@ -371,7 +371,7 @@ mark_flags_life_zones (rtx flags)\n /* A subroutine of mark_flags_life_zones, called through note_stores.  */\n \n static void\n-flags_set_1 (rtx x, rtx pat, void *data ATTRIBUTE_UNUSED)\n+flags_set_1 (rtx x, const_rtx pat, void *data ATTRIBUTE_UNUSED)\n {\n   if (GET_CODE (pat) == SET\n       && reg_overlap_mentioned_p (x, flags_set_1_rtx))"}, {"sha": "29f8e763d92279a3017a0a389f442bbf80440cef", "filename": "gcc/regrename.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=7bc980e1d9410f6182088fe4b60f125634e71941", "patch": "@@ -88,7 +88,7 @@ static void scan_rtx (rtx, rtx *, enum reg_class, enum scan_actions,\n \t\t      enum op_type, int);\n static struct du_chain *build_def_use (basic_block);\n static void dump_def_use_chain (struct du_chain *);\n-static void note_sets (rtx, rtx, void *);\n+static void note_sets (rtx, const_rtx, void *);\n static void clear_dead_regs (HARD_REG_SET *, enum machine_mode, rtx);\n static void merge_overlapping_regs (basic_block, HARD_REG_SET *,\n \t\t\t\t    struct du_chain *);\n@@ -97,7 +97,7 @@ static void merge_overlapping_regs (basic_block, HARD_REG_SET *,\n    record them in *DATA (which is actually a HARD_REG_SET *).  */\n \n static void\n-note_sets (rtx x, rtx set ATTRIBUTE_UNUSED, void *data)\n+note_sets (rtx x, const_rtx set ATTRIBUTE_UNUSED, void *data)\n {\n   HARD_REG_SET *pset = (HARD_REG_SET *) data;\n \n@@ -1029,8 +1029,8 @@ static void kill_value_regno (unsigned, unsigned, struct value_data *);\n static void kill_value (rtx, struct value_data *);\n static void set_value_regno (unsigned, enum machine_mode, struct value_data *);\n static void init_value_data (struct value_data *);\n-static void kill_clobbered_value (rtx, rtx, void *);\n-static void kill_set_value (rtx, rtx, void *);\n+static void kill_clobbered_value (rtx, const_rtx, void *);\n+static void kill_set_value (rtx, const_rtx, void *);\n static int kill_autoinc_value (rtx *, void *);\n static void copy_value (rtx, rtx, struct value_data *);\n static bool mode_change_ok (enum machine_mode, enum machine_mode,\n@@ -1170,7 +1170,7 @@ init_value_data (struct value_data *vd)\n /* Called through note_stores.  If X is clobbered, kill its value.  */\n \n static void\n-kill_clobbered_value (rtx x, rtx set, void *data)\n+kill_clobbered_value (rtx x, const_rtx set, void *data)\n {\n   struct value_data *vd = data;\n   if (GET_CODE (set) == CLOBBER)\n@@ -1181,7 +1181,7 @@ kill_clobbered_value (rtx x, rtx set, void *data)\n    current value and install it as the root of its own value list.  */\n \n static void\n-kill_set_value (rtx x, rtx set, void *data)\n+kill_set_value (rtx x, const_rtx set, void *data)\n {\n   struct value_data *vd = data;\n   if (GET_CODE (set) != CLOBBER)"}, {"sha": "bbea449d9f0fde639514c2b862291802ec908849", "filename": "gcc/reload1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=7bc980e1d9410f6182088fe4b60f125634e71941", "patch": "@@ -395,7 +395,7 @@ static void check_eliminable_occurrences (rtx);\n static void elimination_effects (rtx, enum machine_mode);\n static int eliminate_regs_in_insn (rtx, int);\n static void update_eliminable_offsets (void);\n-static void mark_not_eliminable (rtx, rtx, void *);\n+static void mark_not_eliminable (rtx, const_rtx, void *);\n static void set_initial_elim_offsets (void);\n static bool verify_initial_elim_offsets (void);\n static void set_initial_label_offsets (void);\n@@ -408,7 +408,7 @@ static void scan_paradoxical_subregs (rtx);\n static void count_pseudo (int);\n static void order_regs_for_reload (struct insn_chain *);\n static void reload_as_needed (int);\n-static void forget_old_reloads_1 (rtx, rtx, void *);\n+static void forget_old_reloads_1 (rtx, const_rtx, void *);\n static void forget_marked_reloads (regset);\n static int reload_reg_class_lower (const void *, const void *);\n static void mark_reload_reg_in_use (unsigned int, int, enum reload_type,\n@@ -3477,7 +3477,7 @@ update_eliminable_offsets (void)\n    the insns of the function.  */\n \n static void\n-mark_not_eliminable (rtx dest, rtx x, void *data ATTRIBUTE_UNUSED)\n+mark_not_eliminable (rtx dest, const_rtx x, void *data ATTRIBUTE_UNUSED)\n {\n   unsigned int i;\n \n@@ -4327,7 +4327,7 @@ reload_as_needed (int live_known)\n    to be forgotten later.  */\n \n static void\n-forget_old_reloads_1 (rtx x, rtx ignored ATTRIBUTE_UNUSED,\n+forget_old_reloads_1 (rtx x, const_rtx ignored ATTRIBUTE_UNUSED,\n \t\t      void *data)\n {\n   unsigned int regno;"}, {"sha": "8b25c04aab6b28519317ceec4611ff87af2ee3b1", "filename": "gcc/resource.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fresource.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fresource.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fresource.c?ref=7bc980e1d9410f6182088fe4b60f125634e71941", "patch": "@@ -78,7 +78,7 @@ static HARD_REG_SET current_live_regs;\n \n static HARD_REG_SET pending_dead_regs;\n \f\n-static void update_live_status (rtx, rtx, void *);\n+static void update_live_status (rtx, const_rtx, void *);\n static int find_basic_block (rtx, int);\n static rtx next_insn_no_annul (rtx);\n static rtx find_dead_or_set_registers (rtx, struct resources*,\n@@ -89,7 +89,7 @@ static rtx find_dead_or_set_registers (rtx, struct resources*,\n    It deadens any CLOBBERed registers and livens any SET registers.  */\n \n static void\n-update_live_status (rtx dest, rtx x, void *data ATTRIBUTE_UNUSED)\n+update_live_status (rtx dest, const_rtx x, void *data ATTRIBUTE_UNUSED)\n {\n   int first_regno, last_regno;\n   int i;"}, {"sha": "3a57d52727ed2732a9171ada4dd1cfa544e5419c", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=7bc980e1d9410f6182088fe4b60f125634e71941", "patch": "@@ -1701,8 +1701,8 @@ extern int noop_move_p (const_rtx);\n extern rtx find_last_value (rtx, rtx *, rtx, int);\n extern int refers_to_regno_p (unsigned int, unsigned int, const_rtx, rtx *);\n extern int reg_overlap_mentioned_p (const_rtx, const_rtx);\n-extern rtx set_of (rtx, rtx);\n-extern void note_stores (rtx, void (*) (rtx, rtx, void *), void *);\n+extern const_rtx set_of (const_rtx, const_rtx);\n+extern void note_stores (const_rtx, void (*) (rtx, const_rtx, void *), void *);\n extern void note_uses (rtx *, void (*) (rtx *, void *), void *);\n extern int dead_or_set_p (const_rtx, const_rtx);\n extern int dead_or_set_regno_p (const_rtx, unsigned int);"}, {"sha": "e7b6b916e3ba0fe1546ef83bc01a0d7079c4eebd", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=7bc980e1d9410f6182088fe4b60f125634e71941", "patch": "@@ -52,12 +52,12 @@ struct subreg_info\n };\n \n /* Forward declarations */\n-static void set_of_1 (rtx, rtx, void *);\n+static void set_of_1 (rtx, const_rtx, void *);\n static bool covers_regno_p (const_rtx, unsigned int);\n static bool covers_regno_no_parallel_p (const_rtx, unsigned int);\n static int rtx_referenced_p_1 (rtx *, void *);\n static int computed_jump_p_1 (const_rtx);\n-static void parms_set (rtx, rtx, void *);\n+static void parms_set (rtx, const_rtx, void *);\n static void subreg_get_info (unsigned int, enum machine_mode,\n \t\t\t     unsigned int, enum machine_mode,\n \t\t\t     struct subreg_info *);\n@@ -957,23 +957,23 @@ modified_in_p (rtx x, rtx insn)\n /* Helper function for set_of.  */\n struct set_of_data\n   {\n-    rtx found;\n-    rtx pat;\n+    const_rtx found;\n+    const_rtx pat;\n   };\n \n static void\n-set_of_1 (rtx x, rtx pat, void *data1)\n+set_of_1 (rtx x, const_rtx pat, void *data1)\n {\n-   struct set_of_data *data = (struct set_of_data *) (data1);\n-   if (rtx_equal_p (x, data->pat)\n-       || (!MEM_P (x) && reg_overlap_mentioned_p (data->pat, x)))\n-     data->found = pat;\n+  struct set_of_data *const data = (struct set_of_data *) (data1);\n+  if (rtx_equal_p (x, data->pat)\n+      || (!MEM_P (x) && reg_overlap_mentioned_p (data->pat, x)))\n+    data->found = pat;\n }\n \n /* Give an INSN, return a SET or CLOBBER expression that does modify PAT\n    (either directly or via STRICT_LOW_PART and similar modifiers).  */\n-rtx\n-set_of (rtx pat, rtx insn)\n+const_rtx\n+set_of (const_rtx pat, const_rtx insn)\n {\n   struct set_of_data data;\n   data.found = NULL_RTX;\n@@ -1407,7 +1407,7 @@ reg_overlap_mentioned_p (const_rtx x, const_rtx in)\n   the SUBREG will be passed.  */\n \n void\n-note_stores (rtx x, void (*fun) (rtx, rtx, void *), void *data)\n+note_stores (const_rtx x, void (*fun) (rtx, const_rtx, void *), void *data)\n {\n   int i;\n \n@@ -3262,7 +3262,7 @@ struct parms_set_data\n \n /* Helper function for noticing stores to parameter registers.  */\n static void\n-parms_set (rtx x, rtx pat ATTRIBUTE_UNUSED, void *data)\n+parms_set (rtx x, const_rtx pat ATTRIBUTE_UNUSED, void *data)\n {\n   struct parms_set_data *d = data;\n   if (REG_P (x) && REGNO (x) < FIRST_PSEUDO_REGISTER"}, {"sha": "97aea50c47c62a95374ca3c12f5f5b57aaa5ecaf", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=7bc980e1d9410f6182088fe4b60f125634e71941", "patch": "@@ -275,7 +275,7 @@ static int is_prisky (rtx, int, int);\n static int is_exception_free (rtx, int, int);\n \n static bool sets_likely_spilled (rtx);\n-static void sets_likely_spilled_1 (rtx, rtx, void *);\n+static void sets_likely_spilled_1 (rtx, const_rtx, void *);\n static void add_branch_dependences (rtx, rtx);\n static void compute_block_backward_dependences (int);\n \n@@ -2208,7 +2208,7 @@ sets_likely_spilled (rtx pat)\n }\n \n static void\n-sets_likely_spilled_1 (rtx x, rtx pat, void *data)\n+sets_likely_spilled_1 (rtx x, const_rtx pat, void *data)\n {\n   bool *ret = (bool *) data;\n "}, {"sha": "a5c85a5247c4ecfbb200b2c166e9d4fcd60d21e8", "filename": "gcc/stack-ptr-mod.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fstack-ptr-mod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fstack-ptr-mod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstack-ptr-mod.c?ref=7bc980e1d9410f6182088fe4b60f125634e71941", "patch": "@@ -36,7 +36,7 @@ along with GCC; see the file COPYING3.  If not see\n    Only useful before prologues have been emitted.  */\n \n static void\n-notice_stack_pointer_modification_1 (rtx x, rtx pat ATTRIBUTE_UNUSED,\n+notice_stack_pointer_modification_1 (rtx x, const_rtx pat ATTRIBUTE_UNUSED,\n \t\t\t\t     void *data ATTRIBUTE_UNUSED)\n {\n   if (x == stack_pointer_rtx"}, {"sha": "92228672babfdfc3c349971a072dee45fe2e21cb", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc980e1d9410f6182088fe4b60f125634e71941/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=7bc980e1d9410f6182088fe4b60f125634e71941", "patch": "@@ -333,10 +333,10 @@ static bool track_expr_p (tree);\n static bool same_variable_part_p (rtx, tree, HOST_WIDE_INT);\n static int count_uses (rtx *, void *);\n static void count_uses_1 (rtx *, void *);\n-static void count_stores (rtx, rtx, void *);\n+static void count_stores (rtx, const_rtx, void *);\n static int add_uses (rtx *, void *);\n static void add_uses_1 (rtx *, void *);\n-static void add_stores (rtx, rtx, void *);\n+static void add_stores (rtx, const_rtx, void *);\n static bool compute_bb_dataflow (basic_block);\n static void vt_find_locations (void);\n \n@@ -1708,7 +1708,7 @@ count_uses_1 (rtx *x, void *insn)\n    INSN is instruction which the LOC is part of.  */\n \n static void\n-count_stores (rtx loc, rtx expr ATTRIBUTE_UNUSED, void *insn)\n+count_stores (rtx loc, const_rtx expr ATTRIBUTE_UNUSED, void *insn)\n {\n   count_uses (&loc, insn);\n }\n@@ -1757,7 +1757,7 @@ add_uses_1 (rtx *x, void *insn)\n    INSN is instruction which the LOC is part of.  */\n \n static void\n-add_stores (rtx loc, rtx expr, void *insn)\n+add_stores (rtx loc, const_rtx expr, void *insn)\n {\n   if (REG_P (loc))\n     {"}]}