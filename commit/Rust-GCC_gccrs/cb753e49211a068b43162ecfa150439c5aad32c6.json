{"sha": "cb753e49211a068b43162ecfa150439c5aad32c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I3NTNlNDkyMTFhMDY4YjQzMTYyZWNmYTE1MDQzOWM1YWFkMzJjNg==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2000-08-22T20:26:41Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2000-08-22T20:26:41Z"}, "message": "Makefile.in (error.o): Depends on diagnostic.h\n\n\t* Makefile.in (error.o): Depends on diagnostic.h\n\n\t* cp-tree.h (problematic_instantiation_changed,\n\trecord_last_problematic_instantiation, current_instantiation,\n\tprint_instantiation_context): Declare.\n\t(maybe_print_template_context): Remove.\n\n\t* decl.c (init_decl_processing): Set print_error_function to NULL.\n\t(lang_print_error_function): Remove, since we're using a new\n\tmachinery.\n\n\t* error.c: #include diagnostic.h\n\t(function_category): New function.\n\t(cp_diagnostic_starter): Likewise.\n\t(cp_diagnostic_finalizer): Likewise.\n\t(cp_print_error_function): Likewise.\n\t(maybe_print_instantiation_context): Likewise.\n\t(print_instantiation_full_context): Likewise.\n\t(print_instantiation_partial_context): Likewise.\n\t(print_instantiation_context): Define.\n\t(init_error): Initialize diagnostic pager and finalizer.\n\n\t* pt.c (problematic_instantiation_changed): Define.\n\t(record_last_problematic_instantiation): Likewise.\n\t(current_instantiation): Likewise.\n\t(maybe_print_template_context): Remove.\n\t(print_template_context): Likewise.\n\t(current_tinst_level): Make static to reflect Brendan Kehoe's\n\tchange of 1995-04-13.\n\t(push_tinst_level): Call print_instantiation_context.\n\nFrom-SVN: r35893", "tree": {"sha": "165a6215eafd753269e095cad52f4640b5ce6477", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/165a6215eafd753269e095cad52f4640b5ce6477"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb753e49211a068b43162ecfa150439c5aad32c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb753e49211a068b43162ecfa150439c5aad32c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb753e49211a068b43162ecfa150439c5aad32c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb753e49211a068b43162ecfa150439c5aad32c6/comments", "author": null, "committer": null, "parents": [{"sha": "1eb994b78bbf91c6f9161e4fa9f5a14b567ca20e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1eb994b78bbf91c6f9161e4fa9f5a14b567ca20e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1eb994b78bbf91c6f9161e4fa9f5a14b567ca20e"}], "stats": {"total": 309, "additions": 232, "deletions": 77}, "files": [{"sha": "cc12accc869a2edc693a892ac5bc694e6ac361ef", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb753e49211a068b43162ecfa150439c5aad32c6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb753e49211a068b43162ecfa150439c5aad32c6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=cb753e49211a068b43162ecfa150439c5aad32c6", "patch": "@@ -1,3 +1,37 @@\n+2000-08-22  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* Makefile.in (error.o): Depends on diagnostic.h\n+\n+\t* cp-tree.h (problematic_instantiation_changed,\n+\trecord_last_problematic_instantiation, current_instantiation,\n+\tprint_instantiation_context): Declare.\n+\t(maybe_print_template_context): Remove.\n+\n+\t* decl.c (init_decl_processing): Set print_error_function to NULL.\n+\t(lang_print_error_function): Remove, since we're using a new\n+\tmachinery.\n+\n+\t* error.c: #include diagnostic.h\n+\t(function_category): New function.\n+\t(cp_diagnostic_starter): Likewise.\n+\t(cp_diagnostic_finalizer): Likewise.\n+\t(cp_print_error_function): Likewise.\n+\t(maybe_print_instantiation_context): Likewise.\n+\t(print_instantiation_full_context): Likewise.\n+\t(print_instantiation_partial_context): Likewise.\n+\t(print_instantiation_context): Define.\n+\t(init_error): Initialize diagnostic pager and finalizer.\n+\n+\t* pt.c (problematic_instantiation_changed): Define.\n+\t(record_last_problematic_instantiation): Likewise.\n+\t(current_instantiation): Likewise.\n+\t(maybe_print_template_context): Remove.\n+\t(print_template_context): Likewise.\n+\t(current_tinst_level): Make static to reflect Brendan Kehoe's\n+\tchange of 1995-04-13.\n+\t(push_tinst_level): Call print_instantiation_context. \n+\t\n+\n 2000-08-21  Nix  <nix@esperi.demon.co.uk>\n         \n \t* lang-specs.h: Do not process -o or run the assembler if"}, {"sha": "9a1f39b7231210117d2d2357bbf08c16cbab099f", "filename": "gcc/cp/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb753e49211a068b43162ecfa150439c5aad32c6/gcc%2Fcp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb753e49211a068b43162ecfa150439c5aad32c6/gcc%2Fcp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMakefile.in?ref=cb753e49211a068b43162ecfa150439c5aad32c6", "patch": "@@ -301,7 +301,7 @@ pt.o : pt.c $(CXX_TREE_H) decl.h $(PARSE_H) lex.h \\\n   $(srcdir)/../toplev.h $(GGC_H) $(RTL_H) \\\n   $(srcdir)/../except.h $(HTAB_H)\n error.o : error.c $(CXX_TREE_H) \\\n-  $(srcdir)/../toplev.h\n+  $(srcdir)/../toplev.h $(srcdir)/../diagnostic.h\n errfn.o : errfn.c $(CXX_TREE_H) \\\n   $(srcdir)/../toplev.h\n repo.o : repo.c $(CXX_TREE_H) \\"}, {"sha": "9bfef2c948d1c18bd294e534c53a1ceea8c58758", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb753e49211a068b43162ecfa150439c5aad32c6/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb753e49211a068b43162ecfa150439c5aad32c6/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=cb753e49211a068b43162ecfa150439c5aad32c6", "patch": "@@ -3322,8 +3322,6 @@ typedef enum unification_kind_t {\n #define TINST_LINE(NODE) EXPR_WFL_LINENO (NODE)\n #define TINST_FILE(NODE) EXPR_WFL_FILENAME (NODE)\n \n-extern void maybe_print_template_context\tPARAMS ((void));\n-\n /* in class.c */\n \n extern int current_class_depth;\n@@ -4112,6 +4110,7 @@ extern const char *lang_decl_name\t\tPARAMS ((tree, int));\n extern const char *cp_file_of\t\t\tPARAMS ((tree));\n extern int cp_line_of\t\t\t\tPARAMS ((tree));\n extern const char *language_to_string           PARAMS ((enum languages, int));\n+extern void print_instantiation_context         PARAMS ((void));\n \n /* in except.c */\n extern void init_exception_processing\t\tPARAMS ((void));\n@@ -4295,6 +4294,9 @@ extern int instantiate_pending_templates        PARAMS ((void));\n extern tree tsubst_default_argument             PARAMS ((tree, tree, tree));\n extern tree most_general_template\t\tPARAMS ((tree));\n extern tree get_mostly_instantiated_function_type PARAMS ((tree, tree *, tree *));\n+extern int problematic_instantiation_changed    PARAMS ((void));\n+extern void record_last_problematic_instantiation PARAMS ((void));\n+extern tree current_instantiation               PARAMS ((void));\n extern int processing_template_parmlist;\n \n /* in repo.c */"}, {"sha": "d6ee50f2144377724686b0b4e2ed5018cd116210", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb753e49211a068b43162ecfa150439c5aad32c6/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb753e49211a068b43162ecfa150439c5aad32c6/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=cb753e49211a068b43162ecfa150439c5aad32c6", "patch": "@@ -129,7 +129,6 @@ static tree build_library_fn_1 PARAMS ((tree, enum tree_code, tree));\n static int member_function_or_else PARAMS ((tree, tree, enum overload_flags));\n static void bad_specifiers PARAMS ((tree, const char *, int, int, int, int,\n \t\t\t\t  int));\n-static void lang_print_error_function PARAMS ((const char *));\n static tree maybe_process_template_type_declaration PARAMS ((tree, int, struct binding_level*));\n static void check_for_uninitialized_const_var PARAMS ((tree));\n static unsigned long typename_hash PARAMS ((hash_table_key));\n@@ -6652,7 +6651,7 @@ init_decl_processing ()\n   /* Show we use EH for cleanups.  */\n   using_eh_for_cleanups ();\n \n-  print_error_function = lang_print_error_function;\n+  print_error_function = NULL;\n   valid_lang_attribute = cp_valid_lang_attribute;\n \n   /* Maintain consistency.  Perhaps we should just complain if they\n@@ -6746,16 +6745,6 @@ cp_make_fname_decl (id, name, type_dep)\n   return decl;\n }\n \n-/* Function to print any language-specific context for an error message.  */\n-\n-static void\n-lang_print_error_function (file)\n-     const char *file;\n-{\n-  default_print_error_function (file);\n-  maybe_print_template_context ();\n-}\n-\n /* Entry point for the benefit of c_common_nodes_and_builtins.\n \n    Make a definition for a builtin function named NAME and whose data type"}, {"sha": "d58c7f11d2c296c90a6de7b2c0d1d7e2f4322d96", "filename": "gcc/cp/error.c", "status": "modified", "additions": 169, "deletions": 0, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb753e49211a068b43162ecfa150439c5aad32c6/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb753e49211a068b43162ecfa150439c5aad32c6/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=cb753e49211a068b43162ecfa150439c5aad32c6", "patch": "@@ -25,6 +25,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"cp-tree.h\"\n #include \"obstack.h\"\n #include \"toplev.h\"\n+#include \"diagnostic.h\"\n \n typedef const char *cp_printer ();\n \n@@ -95,6 +96,19 @@ static void dump_template_bindings PARAMS ((tree, tree));\n static void dump_scope PARAMS ((tree, enum tree_string_flags));\n static void dump_template_parms PARAMS ((tree, int, enum tree_string_flags));\n \n+static const char *function_category PARAMS ((tree));\n+static void maybe_print_instantiation_context PARAMS ((output_buffer *));\n+static void print_instantiation_full_context PARAMS ((output_buffer *));\n+static void print_instantiation_partial_context PARAMS ((output_buffer *, tree,\n+                                                         const char *, int));\n+static void cp_diagnostic_starter PARAMS ((output_buffer *,\n+                                           diagnostic_context *));\n+static void cp_diagnostic_finalizer PARAMS ((output_buffer *,\n+                                             diagnostic_context *));\n+static void cp_print_error_function PARAMS ((output_buffer *,\n+                                             diagnostic_context *));\n+\n+\n #define A args_to_string\n #define C code_to_string\n #define D decl_to_string\n@@ -137,6 +151,9 @@ init_error ()\n {\n   gcc_obstack_init (&scratch_obstack);\n   scratch_firstobj = (char *)obstack_alloc (&scratch_obstack, 0);\n+\n+  lang_diagnostic_starter = cp_diagnostic_starter;\n+  lang_diagnostic_finalizer = cp_diagnostic_finalizer;\n }\n \n /* Dump a scope, if deemed necessary.  */\n@@ -2413,3 +2430,155 @@ cv_to_string (p, v)\n \n   return (char *)obstack_base (&scratch_obstack);\n }\n+\n+static void\n+cp_diagnostic_starter (buffer, dc)\n+     output_buffer *buffer;\n+     diagnostic_context *dc;\n+{\n+  report_problematic_module (buffer);\n+  cp_print_error_function (buffer, dc);\n+  maybe_print_instantiation_context (buffer);\n+  output_set_prefix (buffer,\n+                     context_as_prefix (diagnostic_file_location (dc),\n+                                        diagnostic_line_location (dc),\n+                                        diagnostic_is_warning (dc)));\n+}\n+\n+static void\n+cp_diagnostic_finalizer (buffer, dc)\n+     output_buffer *buffer;\n+     diagnostic_context *dc __attribute__ ((__unused__));\n+{\n+  output_destroy_prefix (buffer);\n+}\n+\n+/* Print current function onto BUFFER, in the process of reporting\n+   a diagnostic message.  Called from cp_diagnostic_starter.  */\n+static void\n+cp_print_error_function (buffer, dc)\n+     output_buffer *buffer;\n+     diagnostic_context *dc;\n+{\n+  if (error_function_changed ())\n+    {\n+      char *prefix = diagnostic_file_location (dc)\n+        ? file_name_as_prefix (diagnostic_file_location (dc))\n+        : NULL;\n+      output_state os;\n+\n+      os = output_buffer_state (buffer);\n+      output_set_prefix (buffer, prefix);\n+      \n+      if (current_function_decl == NULL)\n+        {\n+          output_add_string (buffer, \"At global scope:\");\n+          output_add_newline (buffer);\n+        }\n+      else\n+        output_printf\n+          (buffer, \"In %s `%s':\\n\", function_category (current_function_decl),\n+           (*decl_printable_name) (current_function_decl, 2));\n+\n+      record_last_error_function ();\n+      output_destroy_prefix (buffer);\n+      output_buffer_state (buffer) = os;\n+    }\n+}\n+\n+/* Returns a description of FUNCTION using standard terminology.  */\n+static const char *\n+function_category (fn)\n+     tree fn;\n+{\n+  if (DECL_FUNCTION_MEMBER_P (fn))\n+    {\n+      if (DECL_STATIC_FUNCTION_P (fn))\n+        return \"static member function\";\n+      else if (DECL_COPY_CONSTRUCTOR_P (fn))\n+        return \"copy constructor\";\n+      else if (DECL_CONSTRUCTOR_P (fn))\n+        return \"constructor\";\n+      else if (DECL_DESTRUCTOR_P (fn))\n+        return \"destructor\";\n+      else\n+        return \"member function\";\n+    }\n+  else\n+    return \"function\";\n+}\n+\n+/* Report the full context of a current template instantiation,\n+   onto BUFFER.  */\n+static void\n+print_instantiation_full_context (buffer)\n+     output_buffer *buffer;\n+{\n+  tree p = current_instantiation ();\n+  int line = lineno;\n+  const char *file = input_filename;\n+\n+  if (p)\n+    {\n+      if (current_function_decl != TINST_DECL (p)\n+\t  && current_function_decl != NULL_TREE)\n+\t/* We can get here during the processing of some synthesized\n+\t   method.  Then, TINST_DECL (p) will be the function that's causing\n+\t   the synthesis.  */\n+\t;\n+      else\n+\t{\n+\t  if (current_function_decl == TINST_DECL (p))\n+\t    /* Avoid redundancy with the the \"In function\" line.  */;\n+\t  else \n+\t    output_verbatim (buffer, \"%s: In instantiation of `%s':\\n\", file,\n+                             decl_as_string (TINST_DECL (p),\n+                                             TS_DECL_TYPE | TS_FUNC_NORETURN));\n+\t  \n+\t  line = TINST_LINE (p);\n+\t  file = TINST_FILE (p);\n+\t  p = TREE_CHAIN (p);\n+\t}\n+    }\n+  \n+  print_instantiation_partial_context (buffer, p, file, line);\n+}\n+\n+/* Same as above but less verbose.  */\n+static void\n+print_instantiation_partial_context (buffer, t, file, line)\n+     output_buffer *buffer;\n+     tree t;\n+     const char *file;\n+     int line;\n+{\n+  for (; t; t = TREE_CHAIN (t))\n+    {\n+      output_verbatim\n+        (buffer, \"%s:%d:   instantiated from `%s'\\n\", file, line,\n+         decl_as_string (TINST_DECL (t), TS_DECL_TYPE | TS_FUNC_NORETURN));\n+      line = TINST_LINE (t);\n+      file = TINST_FILE (t);\n+    }\n+  output_verbatim (buffer, \"%s:%d:   instantiated from here\\n\", file, line);\n+}\n+\n+/* Called from cp_thing to print the template context for an error.  */\n+static void\n+maybe_print_instantiation_context (buffer)\n+     output_buffer *buffer;\n+{\n+  if (!problematic_instantiation_changed () || current_instantiation () == 0)\n+    return;\n+\n+  record_last_problematic_instantiation ();\n+  print_instantiation_full_context (buffer);\n+}\n+\n+/* Report the bare minimum context of a template instantiation.  */\n+void\n+print_instantiation_context ()\n+{\n+  print_instantiation_partial_context\n+    (diagnostic_buffer, current_instantiation (), input_filename, lineno);\n+}"}, {"sha": "5fab8485c84e777e07cbcec61a29e9fe4a80bf43", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 23, "deletions": 62, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb753e49211a068b43162ecfa150439c5aad32c6/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb753e49211a068b43162ecfa150439c5aad32c6/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=cb753e49211a068b43162ecfa150439c5aad32c6", "patch": "@@ -72,7 +72,7 @@ static tree saved_trees;\n static varray_type inline_parm_levels;\n static size_t inline_parm_levels_used;\n \n-tree current_tinst_level;\n+static tree current_tinst_level;\n \n /* A map from local variable declarations in the body of the template\n    presently being instantiated to the corresponding instantiated\n@@ -163,7 +163,6 @@ static int coerce_template_template_parms PARAMS ((tree, tree, int,\n \t\t\t\t\t\t tree, tree));\n static tree determine_specialization PARAMS ((tree, tree, tree *, int));\n static int template_args_equal PARAMS ((tree, tree));\n-static void print_template_context PARAMS ((int));\n static void tsubst_default_arguments PARAMS ((tree));\n static tree for_each_template_parm_r PARAMS ((tree *, int *, void *));\n static tree instantiate_clone PARAMS ((tree, tree));\n@@ -4297,65 +4296,6 @@ int depth_reached;\n static int tinst_level_tick;\n static int last_template_error_tick;\n \n-/* Print out all the template instantiations that we are currently\n-   working on.  If ERR, we are being called from cp_thing, so do\n-   the right thing for an error message.  */\n-\n-static void\n-print_template_context (err)\n-     int err;\n-{\n-  tree p = current_tinst_level;\n-  int line = lineno;\n-  const char *file = input_filename;\n-\n-  if (err && p)\n-    {\n-      if (current_function_decl != TINST_DECL (p)\n-\t  && current_function_decl != NULL_TREE)\n-\t/* We can get here during the processing of some synthesized\n-\t   method.  Then, TINST_DECL (p) will be the function that's causing\n-\t   the synthesis.  */\n-\t;\n-      else\n-\t{\n-\t  if (current_function_decl == TINST_DECL (p))\n-\t    /* Avoid redundancy with the the \"In function\" line.  */;\n-\t  else \n-\t    fprintf (stderr, \"%s: In instantiation of `%s':\\n\",\n-\t\t     file, decl_as_string (TINST_DECL (p),\n-\t\t\t\t\t   TS_DECL_TYPE | TS_FUNC_NORETURN));\n-\t  \n-\t  line = TINST_LINE (p);\n-\t  file = TINST_FILE (p);\n-\t  p = TREE_CHAIN (p);\n-\t}\n-    }\n-\n-  for (; p; p = TREE_CHAIN (p))\n-    {\n-      fprintf (stderr, \"%s:%d:   instantiated from `%s'\\n\", file, line,\n-\t       decl_as_string (TINST_DECL (p),\n-\t\t\t       TS_DECL_TYPE | TS_FUNC_NORETURN));\n-      line = TINST_LINE (p);\n-      file = TINST_FILE (p);\n-    }\n-  fprintf (stderr, \"%s:%d:   instantiated from here\\n\", file, line);\n-}\n-\n-/* Called from cp_thing to print the template context for an error.  */\n-\n-void\n-maybe_print_template_context ()\n-{\n-  if (last_template_error_tick == tinst_level_tick\n-      || current_tinst_level == 0)\n-    return;\n-\n-  last_template_error_tick = tinst_level_tick;\n-  print_template_context (1);\n-}\n-\n /* We're starting to instantiate D; record the template instantiation context\n    for diagnostics and to restore it later.  */\n \n@@ -4377,7 +4317,7 @@ push_tinst_level (d)\n       cp_error (\"template instantiation depth exceeds maximum of %d (use -ftemplate-depth-NN to increase the maximum) instantiating `%D'\",\n \t     max_tinst_depth, d);\n \n-      print_template_context (0);\n+      print_instantiation_context ();\n \n       return 0;\n     }\n@@ -10155,3 +10095,24 @@ set_mangled_name_for_template_decl (decl)\n \t\t\t\tDECL_FUNCTION_MEMBER_P (decl) \n \t\t\t        + DECL_MAYBE_IN_CHARGE_CONSTRUCTOR_P (decl));\n }\n+\n+/* Return truthvalue if we're processing a template different from\n+   the last one involved in diagnotics.  */\n+int\n+problematic_instantiation_changed ()\n+{\n+  return last_template_error_tick != tinst_level_tick;\n+}\n+\n+/* Remember current template involved in diagnostics.  */\n+void\n+record_last_problematic_instantiation ()\n+{\n+  last_template_error_tick = tinst_level_tick;\n+}\n+\n+tree\n+current_instantiation ()\n+{\n+  return current_tinst_level;\n+}"}]}