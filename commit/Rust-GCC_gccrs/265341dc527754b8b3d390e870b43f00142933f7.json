{"sha": "265341dc527754b8b3d390e870b43f00142933f7", "node_id": "C_kwDOANBUbNoAKDI2NTM0MWRjNTI3NzU0YjhiM2QzOTBlODcwYjQzZjAwMTQyOTMzZjc", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2022-10-09T20:01:51Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-11-04T13:47:28Z"}, "message": "ada: Fix various typos in GNAT User's Guide\n\nFix uncontroversial typos.\n\ngcc/ada/\n\n\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst: Fix\n\ttypos.\n\t* doc/gnat_ugn/elaboration_order_handling_in_gnat.rst: Fix typos\n\tand refill as necessary; remove trailing whitespace.\n\t* doc/gnat_ugn/gnat_and_program_execution.rst: Fix typos.\n\t* gnat_ugn.texi: Regenerate.", "tree": {"sha": "c308b8dced09b9dd13aae708c2740094fef0c8c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c308b8dced09b9dd13aae708c2740094fef0c8c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/265341dc527754b8b3d390e870b43f00142933f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/265341dc527754b8b3d390e870b43f00142933f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/265341dc527754b8b3d390e870b43f00142933f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/265341dc527754b8b3d390e870b43f00142933f7/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12cfb2949754facc3624d70f6267a10b8b57df88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12cfb2949754facc3624d70f6267a10b8b57df88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12cfb2949754facc3624d70f6267a10b8b57df88"}], "stats": {"total": 34, "additions": 18, "deletions": 16}, "files": [{"sha": "83bc50f7e9188db26fe1a6d633ede778d787d9f5", "filename": "gcc/ada/doc/gnat_ugn/building_executable_programs_with_gnat.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/265341dc527754b8b3d390e870b43f00142933f7/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/265341dc527754b8b3d390e870b43f00142933f7/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst?ref=265341dc527754b8b3d390e870b43f00142933f7", "patch": "@@ -7403,7 +7403,7 @@ development environments much more flexible.\n Examples of ``gnatbind`` Usage\n ------------------------------\n \n-Here are some examples of ``gnatbind`` invovations:\n+Here are some examples of ``gnatbind`` invocations:\n \n   ::\n "}, {"sha": "76a1461777ee137a8a31aeef304ff332a090569f", "filename": "gcc/ada/doc/gnat_ugn/elaboration_order_handling_in_gnat.rst", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/265341dc527754b8b3d390e870b43f00142933f7/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Felaboration_order_handling_in_gnat.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/265341dc527754b8b3d390e870b43f00142933f7/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Felaboration_order_handling_in_gnat.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Felaboration_order_handling_in_gnat.rst?ref=265341dc527754b8b3d390e870b43f00142933f7", "patch": "@@ -265,7 +265,7 @@ respect to control and data flow.\n Checking the Elaboration Order\n ==============================\n \n-To avoid placing the entire elaboration-order burden on the programmer, Ada \n+To avoid placing the entire elaboration-order burden on the programmer, Ada\n provides three lines of defense:\n \n * *Static semantics*\n@@ -931,9 +931,9 @@ Resolving Elaboration Circularities\n ===================================\n \n The most desirable option from the point of view of long-term maintenance is to\n-rearrange the program so that the elaboration problems are avoided. One useful \n-technique is to place the elaboration code into separate child packages. \n-Another is to move some of the initialization code to explicitly invoked \n+rearrange the program so that the elaboration problems are avoided. One useful\n+technique is to place the elaboration code into separate child packages.\n+Another is to move some of the initialization code to explicitly invoked\n subprograms, where the program controls the order of initialization explicitly.\n Although this is the most desirable option, it may be impractical and involve\n too much modification, especially in the case of complex legacy code.\n@@ -990,8 +990,9 @@ following tactics to eliminate the circularity:\n      change pragma Elaborate_All for unit \"...\" to Elaborate in unit \"...\"\n \n   This tactic is always suggested with the pragma ``Elaborate_All`` elimination\n-  tactic. It offers a different alernative of guaranteeing that the argument of\n-  the pragma will still be elaborated prior to the unit containing the pragma.\n+  tactic. It offers a different alternative of guaranteeing that the argument\n+  of the pragma will still be elaborated prior to the unit containing the\n+  pragma.\n \n   The programmer should update the pragma as advised, and rebuild the program.\n \n@@ -1281,7 +1282,7 @@ Summary of Procedures for Elaboration Control\n \n A programmer should first compile the program with the default options, using\n none of the binder or compiler switches. If the binder succeeds in finding an\n-elaboration order, then apart from possible cases involing dispatching calls\n+elaboration order, then apart from possible cases involving dispatching calls\n and access-to-subprogram types, the program is free of elaboration errors.\n \n If it is important for the program to be portable to compilers other than GNAT,"}, {"sha": "e827d1f9841e4027e95da0613fb7ccdcbed92e3c", "filename": "gcc/ada/doc/gnat_ugn/gnat_and_program_execution.rst", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/265341dc527754b8b3d390e870b43f00142933f7/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/265341dc527754b8b3d390e870b43f00142933f7/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst?ref=265341dc527754b8b3d390e870b43f00142933f7", "patch": "@@ -2321,7 +2321,7 @@ erroneous, and the compiler would be entitled to assume that\n \n However, in practice, this would cause some existing code that\n seems to work with no optimization to start failing at high\n-levels of optimzization.\n+levels of optimization.\n \n What the compiler does for such cases is to assume that marking\n a variable as aliased indicates that some \"funny business\" may\n@@ -2728,7 +2728,7 @@ To deal with the portability issue, and with the problem of\n mathematical versus run-time interpretation of the expressions in\n assertions, GNAT provides comprehensive control over the handling\n of intermediate overflow. GNAT can operate in three modes, and\n-furthemore, permits separate selection of operating modes for\n+furthermore, permits separate selection of operating modes for\n the expressions within assertions (here the term 'assertions'\n is used in the technical sense, which includes preconditions and so forth)\n and for expressions appearing outside assertions."}, {"sha": "0f23d5b6a35c7bed3e639985fae310d10bcc3cdb", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/265341dc527754b8b3d390e870b43f00142933f7/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/265341dc527754b8b3d390e870b43f00142933f7/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=265341dc527754b8b3d390e870b43f00142933f7", "patch": "@@ -16717,7 +16717,7 @@ development environments much more flexible.\n @subsection Examples of @code{gnatbind} Usage\n \n \n-Here are some examples of @code{gnatbind} invovations:\n+Here are some examples of @code{gnatbind} invocations:\n \n @quotation\n \n@@ -20793,7 +20793,7 @@ erroneous, and the compiler would be entitled to assume that\n \n However, in practice, this would cause some existing code that\n seems to work with no optimization to start failing at high\n-levels of optimzization.\n+levels of optimization.\n \n What the compiler does for such cases is to assume that marking\n a variable as aliased indicates that some \u201cfunny business\u201d may\n@@ -21244,7 +21244,7 @@ To deal with the portability issue, and with the problem of\n mathematical versus run-time interpretation of the expressions in\n assertions, GNAT provides comprehensive control over the handling\n of intermediate overflow. GNAT can operate in three modes, and\n-furthemore, permits separate selection of operating modes for\n+furthermore, permits separate selection of operating modes for\n the expressions within assertions (here the term \u2018assertions\u2019\n is used in the technical sense, which includes preconditions and so forth)\n and for expressions appearing outside assertions.\n@@ -27324,8 +27324,9 @@ change pragma Elaborate_All for unit \"...\" to Elaborate in unit \"...\"\n @end example\n \n This tactic is always suggested with the pragma @code{Elaborate_All} elimination\n-tactic. It offers a different alernative of guaranteeing that the argument of\n-the pragma will still be elaborated prior to the unit containing the pragma.\n+tactic. It offers a different alternative of guaranteeing that the argument\n+of the pragma will still be elaborated prior to the unit containing the\n+pragma.\n \n The programmer should update the pragma as advised, and rebuild the program.\n \n@@ -27698,7 +27699,7 @@ checks. The example above will still fail at run time with an ABE.\n \n A programmer should first compile the program with the default options, using\n none of the binder or compiler switches. If the binder succeeds in finding an\n-elaboration order, then apart from possible cases involing dispatching calls\n+elaboration order, then apart from possible cases involving dispatching calls\n and access-to-subprogram types, the program is free of elaboration errors.\n \n If it is important for the program to be portable to compilers other than GNAT,"}]}