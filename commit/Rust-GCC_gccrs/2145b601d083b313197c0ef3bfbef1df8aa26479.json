{"sha": "2145b601d083b313197c0ef3bfbef1df8aa26479", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE0NWI2MDFkMDgzYjMxMzE5N2MwZWYzYmZiZWYxZGY4YWEyNjQ3OQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-11-23T11:26:32Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-11-23T11:26:32Z"}, "message": "re PR middle-end/82253 (ICE in convert_move, at expr.c:604)\n\n\tPR middle-end/82253\n\t* expr.c (expand_assignment): For CONCAT to_rtx, complex type from and\n\tbitpos/bitsize covering the whole destination, use store_expr only if\n\tthe complex mode is the same.  Otherwise, use expand_normal and if\n\tit returns CONCAT, subreg each part separately instead of trying to\n\tsubreg the whole result.\n\n\t* gfortran.dg/pr82253.f90: New test.\n\nFrom-SVN: r255095", "tree": {"sha": "3dd6d215d0749639bcd61bbd8c74072b2c907f19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3dd6d215d0749639bcd61bbd8c74072b2c907f19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2145b601d083b313197c0ef3bfbef1df8aa26479", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2145b601d083b313197c0ef3bfbef1df8aa26479", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2145b601d083b313197c0ef3bfbef1df8aa26479", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2145b601d083b313197c0ef3bfbef1df8aa26479/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f36a7f04f65f3e11e2c656e4171657acf59f3655", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f36a7f04f65f3e11e2c656e4171657acf59f3655", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f36a7f04f65f3e11e2c656e4171657acf59f3655"}], "stats": {"total": 87, "additions": 79, "deletions": 8}, "files": [{"sha": "836e9bbc5404931c2d49b36d895e78b4f06483ab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2145b601d083b313197c0ef3bfbef1df8aa26479/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2145b601d083b313197c0ef3bfbef1df8aa26479/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2145b601d083b313197c0ef3bfbef1df8aa26479", "patch": "@@ -1,3 +1,12 @@\n+2017-11-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/82253\n+\t* expr.c (expand_assignment): For CONCAT to_rtx, complex type from and\n+\tbitpos/bitsize covering the whole destination, use store_expr only if\n+\tthe complex mode is the same.  Otherwise, use expand_normal and if\n+\tit returns CONCAT, subreg each part separately instead of trying to\n+\tsubreg the whole result.\n+\n 2017-11-23  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/23094"}, {"sha": "ee07de5aaa44f3648aa8a3fbbeda79a6c448c2f9", "filename": "gcc/expr.c", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2145b601d083b313197c0ef3bfbef1df8aa26479/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2145b601d083b313197c0ef3bfbef1df8aa26479/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=2145b601d083b313197c0ef3bfbef1df8aa26479", "patch": "@@ -5107,7 +5107,8 @@ expand_assignment (tree to, tree from, bool nontemporal)\n       else if (GET_CODE (to_rtx) == CONCAT)\n \t{\n \t  unsigned short mode_bitsize = GET_MODE_BITSIZE (GET_MODE (to_rtx));\n-\t  if (COMPLEX_MODE_P (TYPE_MODE (TREE_TYPE (from)))\n+\t  if (TYPE_MODE (TREE_TYPE (from)) == GET_MODE (to_rtx)\n+\t      && COMPLEX_MODE_P (GET_MODE (to_rtx))\n \t      && bitpos == 0\n \t      && bitsize == mode_bitsize)\n \t    result = store_expr (from, to_rtx, false, nontemporal, reversep);\n@@ -5128,14 +5129,30 @@ expand_assignment (tree to, tree from, bool nontemporal)\n \t\t\t\t  nontemporal, reversep);\n \t  else if (bitpos == 0 && bitsize == mode_bitsize)\n \t    {\n-\t      rtx from_rtx;\n \t      result = expand_normal (from);\n-\t      from_rtx = simplify_gen_subreg (GET_MODE (to_rtx), result,\n-\t\t\t\t\t      TYPE_MODE (TREE_TYPE (from)), 0);\n-\t      emit_move_insn (XEXP (to_rtx, 0),\n-\t\t\t      read_complex_part (from_rtx, false));\n-\t      emit_move_insn (XEXP (to_rtx, 1),\n-\t\t\t      read_complex_part (from_rtx, true));\n+\t      if (GET_CODE (result) == CONCAT)\n+\t\t{\n+\t\t  machine_mode to_mode = GET_MODE_INNER (GET_MODE (to_rtx));\n+\t\t  machine_mode from_mode = GET_MODE_INNER (GET_MODE (result));\n+\t\t  rtx from_real\n+\t\t    = simplify_gen_subreg (to_mode, XEXP (result, 0),\n+\t\t\t\t\t   from_mode, 0);\n+\t\t  rtx from_imag\n+\t\t    = simplify_gen_subreg (to_mode, XEXP (result, 1),\n+\t\t\t\t\t   from_mode, 1);\n+\t\t  emit_move_insn (XEXP (to_rtx, 0), from_real);\n+\t\t  emit_move_insn (XEXP (to_rtx, 1), from_imag);\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  rtx from_rtx\n+\t\t    = simplify_gen_subreg (GET_MODE (to_rtx), result,\n+\t\t\t\t\t   TYPE_MODE (TREE_TYPE (from)), 0);\n+\t\t  emit_move_insn (XEXP (to_rtx, 0),\n+\t\t\t\t  read_complex_part (from_rtx, false));\n+\t\t  emit_move_insn (XEXP (to_rtx, 1),\n+\t\t\t\t  read_complex_part (from_rtx, true));\n+\t\t}\n \t    }\n \t  else\n \t    {"}, {"sha": "222db91f05a2db4f36d25195f185bf6e08304277", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2145b601d083b313197c0ef3bfbef1df8aa26479/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2145b601d083b313197c0ef3bfbef1df8aa26479/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2145b601d083b313197c0ef3bfbef1df8aa26479", "patch": "@@ -1,3 +1,8 @@\n+2017-11-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/82253\n+\t* gfortran.dg/pr82253.f90: New test.\n+\n 2017-11-23  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/82814"}, {"sha": "4dc681012a0f98d3c81c1190b5cacbc546396a73", "filename": "gcc/testsuite/gfortran.dg/pr82253.f90", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2145b601d083b313197c0ef3bfbef1df8aa26479/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr82253.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2145b601d083b313197c0ef3bfbef1df8aa26479/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr82253.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr82253.f90?ref=2145b601d083b313197c0ef3bfbef1df8aa26479", "patch": "@@ -0,0 +1,40 @@\n+! PR middle-end/82253\n+! { dg-do compile { target fortran_real_16 } }\n+! { dg-options \"-Og\" }\n+\n+module pr82253\n+  implicit none\n+  private\n+  public :: static_type\n+  type, public :: T\n+    procedure(), nopass, pointer :: testProc => null()\n+  end type\n+  type, public :: S\n+    complex(kind=16), pointer :: ptr\n+  end type\n+  type(T), target :: type_complex32\n+  interface static_type\n+    module procedure foo\n+  end interface\n+  interface\n+    subroutine bar (testProc)\n+      procedure(), optional :: testProc\n+    end subroutine\n+  end interface\n+  contains\n+    function foo (self) result(res)\n+      complex(kind=16) :: self\n+      type(T), pointer :: res\n+      call bar (testProc = baz)\n+    end function\n+    subroutine baz (buffer, status)\n+      character(len=*) :: buffer\n+      integer(kind=4) :: status\n+      complex(kind=16), target :: obj\n+      type(S) :: self\n+      integer(kind=1), parameter :: zero(storage_size(obj)/8) = 0\n+      obj = transfer (zero, obj)\n+      self%ptr => obj\n+      write (buffer, *, iostat=status) self%ptr, '#'\n+    end subroutine\n+end module pr82253"}]}