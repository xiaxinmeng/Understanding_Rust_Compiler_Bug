{"sha": "3ded6ffdfd75978712ed4d9b246fc47779b2d9d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RlZDZmZmRmZDc1OTc4NzEyZWQ0ZDliMjQ2ZmM0Nzc3OWIyZDlkMQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-11-29T21:21:56Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-11-29T21:21:56Z"}, "message": "C++: namespaces and scopes for enum values (PR c++/88121)\n\nConsider this test case:\n\nnamespace json\n{\n  enum { JSON_OBJECT };\n}\n\nvoid test ()\n{\n  JSON_OBJECT;\n}\n\nwhich erroneously accesses an enum value in another namespace without\nqualifying the access.\n\nGCC 6 through 8 issue a suggestion that doesn't mention the namespace:\n\n<source>: In function 'void test()':\n<source>:8:3: error: 'JSON_OBJECT' was not declared in this scope\n   JSON_OBJECT;\n   ^~~~~~~~~~~\n<source>:8:3: note: suggested alternative:\n<source>:3:10: note:   'JSON_OBJECT'\n   enum { JSON_OBJECT };\n          ^~~~~~~~~~~\n\nwhich is suboptimal.\n\nI made the problem worse with r265610, which consolidates the single\nsuggestion into the error, and emits:\n\n<source>: In function 'void test()':\n<source>:8:3: error: 'JSON_OBJECT' was not declared in this scope; did\n   you mean 'JSON_OBJECT'?\n    8 |   JSON_OBJECT;\n      |   ^~~~~~~~~~~\n      |   JSON_OBJECT\n<source>:3:10: note: 'JSON_OBJECT' declared here\n    3 |   enum { JSON_OBJECT };\n      |          ^~~~~~~~~~~\n\nwhere the message:\n  'JSON_OBJECT' was not declared in this scope; did you mean 'JSON_OBJECT'?\nis nonsensical.\n\nThis patch tweaks dump_scope to detect unscoped enums, and to use the\nenclosing namespace for them, so that the CONST_DECL is dumped as\n\"json::JSON_OBJECT\".\n\nThis changes the output for the above so that it refers to the\nnamespace, fixing the issue:\n\n<source>:8:3: error: 'JSON_OBJECT' was not declared in this scope; did\n   you mean 'json::JSON_OBJECT'?\n    9 |   JSON_OBJECT;\n      |   ^~~~~~~~~~~\n      |   json::JSON_OBJECT\n<source>3:10: note: 'json::JSON_OBJECT' declared here\n    3 |   enum { JSON_OBJECT };\n      |          ^~~~~~~~~~~\n\nThe patch also fixes scope-printing for values within scoped enums.\nTo exercise this, the patch extends the scanner for namespaces for\nexact matches for a name, so that we also scan inside scoped\nenums, to cover the case where someone doesn't supply the scope.\n\nHence with the patch given e.g.:\n\nenum class vegetable { CARROT, TURNIP };\n\nwe're able to offer e.g.:\n\nsuggestions-scoped-enums.C:50:3: error: 'CARROT' was not declared in\n  this scope; did you mean 'vegetable::CARROT'?\n   50 |   CARROT;\n      |   ^~~~~~\n      |   vegetable::CARROT\n\nand this exercises the code path above.  The patch updates dump_scope\nfor scoped enums so that we print the scope when printing the\nvalue (\"vegetable::CARROT\"), rather than just the name of the value\n(\"CARROT\").\n\nFinally, the patch adds spell-corrections within a scoped enum,\ngiving e.g.:\n\nsuggestions-scoped-enums.C:18:14: error: 'TURNUP' is not a member of\n  'vegetable'; did you mean 'TURNIP'?\n   18 |   vegetable::TURNUP;\n      |              ^~~~~~\n      |              TURNIP\n\ngcc/cp/ChangeLog:\n\tPR c++/88121\n\t* cp-name-hint.h (suggest_alternative_in_scoped_enum): New decl.\n\t* error.c (dump_scope): Ensure that we print any scope for values\n\tof unscoped enums.  Print the scope of values of scoped enums.\n\t(qualified_name_lookup_error): Offer suggestions for failures\n\twithin scoped enums by calling suggest_alternative_in_scoped_enum.\n\t* name-lookup.c (class namespace_hints): Update comment to mention\n\tscoped enums.\n\t(namespace_hints::namespace_hints): Call\n\tmaybe_add_candidate_for_scoped_enum.\n\t(namespace_hints::maybe_add_candidate_for_scoped_enum): New member\n\t(suggest_alternatives_for): Update comment to mention scoped\n\tenums.\n\t(suggest_alternative_in_scoped_enum): New function.\n\ngcc/testsuite/ChangeLog:\n\tPR c++/88121\n\t* g++.dg/lookup/suggestions-scoped-enums.C: New test.\n\t* g++.dg/lookup/suggestions-unscoped-enums.C: New test.\n\nFrom-SVN: r266644", "tree": {"sha": "381aecd2dd2f35a631c30c149b1033b171aa0de3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/381aecd2dd2f35a631c30c149b1033b171aa0de3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ded6ffdfd75978712ed4d9b246fc47779b2d9d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ded6ffdfd75978712ed4d9b246fc47779b2d9d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ded6ffdfd75978712ed4d9b246fc47779b2d9d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ded6ffdfd75978712ed4d9b246fc47779b2d9d1/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "171954d816827f634d6bf6f2ff12286b1f35c2f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/171954d816827f634d6bf6f2ff12286b1f35c2f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/171954d816827f634d6bf6f2ff12286b1f35c2f7"}], "stats": {"total": 322, "additions": 310, "deletions": 12}, "files": [{"sha": "853e139773be67b58edf326bca1273564cabfa1e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ded6ffdfd75978712ed4d9b246fc47779b2d9d1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ded6ffdfd75978712ed4d9b246fc47779b2d9d1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3ded6ffdfd75978712ed4d9b246fc47779b2d9d1", "patch": "@@ -1,3 +1,20 @@\n+2018-11-29  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/88121\n+\t* cp-name-hint.h (suggest_alternative_in_scoped_enum): New decl.\n+\t* error.c (dump_scope): Ensure that we print any scope for values\n+\tof unscoped enums.  Print the scope of values of scoped enums.\n+\t(qualified_name_lookup_error): Offer suggestions for failures\n+\twithin scoped enums by calling suggest_alternative_in_scoped_enum.\n+\t* name-lookup.c (class namespace_hints): Update comment to mention\n+\tscoped enums.\n+\t(namespace_hints::namespace_hints): Call\n+\tmaybe_add_candidate_for_scoped_enum.\n+\t(namespace_hints::maybe_add_candidate_for_scoped_enum): New member\n+\t(suggest_alternatives_for): Update comment to mention scoped\n+\tenums.\n+\t(suggest_alternative_in_scoped_enum): New function.\n+\n 2018-11-28  Marek Polacek  <polacek@redhat.com>\n \n \tImplement P1094R2, Nested inline namespaces."}, {"sha": "2f9da737f74a2724155c63a9cb49e1f27cd96795", "filename": "gcc/cp/cp-name-hint.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ded6ffdfd75978712ed4d9b246fc47779b2d9d1/gcc%2Fcp%2Fcp-name-hint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ded6ffdfd75978712ed4d9b246fc47779b2d9d1/gcc%2Fcp%2Fcp-name-hint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-name-hint.h?ref=3ded6ffdfd75978712ed4d9b246fc47779b2d9d1", "patch": "@@ -33,5 +33,6 @@ along with GCC; see the file COPYING3.  If not see\n extern name_hint suggest_alternatives_for (location_t, tree, bool);\n extern name_hint suggest_alternatives_in_other_namespaces (location_t, tree);\n extern name_hint suggest_alternative_in_explicit_scope (location_t, tree, tree);\n+extern name_hint suggest_alternative_in_scoped_enum (tree, tree);\n \n #endif /* GCC_CP_NAME_HINT_H */"}, {"sha": "f9b0b99871746320b0a0d755e6ac480e0d326023", "filename": "gcc/cp/error.c", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ded6ffdfd75978712ed4d9b246fc47779b2d9d1/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ded6ffdfd75978712ed4d9b246fc47779b2d9d1/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=3ded6ffdfd75978712ed4d9b246fc47779b2d9d1", "patch": "@@ -182,6 +182,12 @@ dump_scope (cxx_pretty_printer *pp, tree scope, int flags)\n   if (scope == NULL_TREE)\n     return;\n \n+  /* Enum values within an unscoped enum will be CONST_DECL with an\n+     ENUMERAL_TYPE as their \"scope\".  Use CP_TYPE_CONTEXT of the\n+     ENUMERAL_TYPE, so as to print any enclosing namespace.  */\n+  if (UNSCOPED_ENUM_P (scope))\n+    scope = CP_TYPE_CONTEXT (scope);\n+\n   if (TREE_CODE (scope) == NAMESPACE_DECL)\n     {\n       if (scope != global_namespace)\n@@ -190,7 +196,8 @@ dump_scope (cxx_pretty_printer *pp, tree scope, int flags)\n \t  pp_cxx_colon_colon (pp);\n \t}\n     }\n-  else if (AGGREGATE_TYPE_P (scope))\n+  else if (AGGREGATE_TYPE_P (scope)\n+\t   || SCOPED_ENUM_P (scope))\n     {\n       dump_type (pp, scope, f);\n       pp_cxx_colon_colon (pp);\n@@ -4261,7 +4268,21 @@ qualified_name_lookup_error (tree scope, tree name,\n \t  print_candidates (decl);\n \t}\n       else\n-\terror_at (location, \"%qD is not a member of %qT\", name, scope);\n+\t{\n+\t  name_hint hint;\n+\t  if (SCOPED_ENUM_P (scope))\n+\t    hint = suggest_alternative_in_scoped_enum (name, scope);\n+\t  if (const char *suggestion = hint.suggestion ())\n+\t    {\n+\t      gcc_rich_location richloc (location);\n+\t      richloc.add_fixit_replace (suggestion);\n+\t      error_at (&richloc,\n+\t\t\t\"%qD is not a member of %qT; did you mean %qs?\",\n+\t\t\tname, scope, suggestion);\n+\t    }\n+\t  else\n+\t    error_at (location, \"%qD is not a member of %qT\", name, scope);\n+\t}\n     }\n   else if (scope != global_namespace)\n     {"}, {"sha": "cadf3808237ba1531b28a81defb3e5a5ac6263ac", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 62, "deletions": 10, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ded6ffdfd75978712ed4d9b246fc47779b2d9d1/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ded6ffdfd75978712ed4d9b246fc47779b2d9d1/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=3ded6ffdfd75978712ed4d9b246fc47779b2d9d1", "patch": "@@ -5396,8 +5396,8 @@ class suggest_alternatives : public deferred_diagnostic\n };\n \n /* A class for encapsulating the result of a search across\n-   multiple namespaces for an unrecognized name seen at a\n-   given source location.  */\n+   multiple namespaces (and scoped enums within them) for an\n+   unrecognized name seen at a given source location.  */\n \n class namespace_hints\n {\n@@ -5408,6 +5408,8 @@ class namespace_hints\n   name_hint maybe_decorate_with_limit (name_hint);\n \n  private:\n+  void maybe_add_candidate_for_scoped_enum (tree scoped_enum, tree name);\n+\n   location_t m_loc;\n   tree m_name;\n   vec<tree> m_candidates;\n@@ -5419,8 +5421,8 @@ class namespace_hints\n   bool m_limited;\n };\n \n-/* Constructor for namespace_hints.  Search namespaces, looking for a match\n-   for unrecognized NAME seen at LOC.  */\n+/* Constructor for namespace_hints.  Search namespaces and scoped enums,\n+   looking for an exact match for unrecognized NAME seen at LOC.  */\n \n namespace_hints::namespace_hints (location_t loc, tree name)\n : m_loc(loc), m_name (name)\n@@ -5451,10 +5453,22 @@ namespace_hints::namespace_hints (location_t loc, tree name)\n \n \t  for (tree decl = NAMESPACE_LEVEL (ns)->names;\n \t       decl; decl = TREE_CHAIN (decl))\n-\t    if (TREE_CODE (decl) == NAMESPACE_DECL\n-\t\t&& !DECL_NAMESPACE_ALIAS (decl)\n-\t\t&& !DECL_NAMESPACE_INLINE_P (decl))\n-\t      children.safe_push (decl);\n+\t    {\n+\t      if (TREE_CODE (decl) == NAMESPACE_DECL\n+\t\t  && !DECL_NAMESPACE_ALIAS (decl)\n+\t\t  && !DECL_NAMESPACE_INLINE_P (decl))\n+\t\tchildren.safe_push (decl);\n+\n+\t      /* Look for exact matches for NAME within scoped enums.\n+\t\t These aren't added to the worklist, and so don't count\n+\t\t against the search limit.  */\n+\t      if (TREE_CODE (decl) == TYPE_DECL)\n+\t\t{\n+\t\t  tree type = TREE_TYPE (decl);\n+\t\t  if (SCOPED_ENUM_P (type))\n+\t\t    maybe_add_candidate_for_scoped_enum (type, name);\n+\t\t}\n+\t    }\n \n \t  while (!m_limited && !children.is_empty ())\n \t    {\n@@ -5522,11 +5536,32 @@ namespace_hints::maybe_decorate_with_limit (name_hint hint)\n     return hint;\n }\n \n+/* Look inside SCOPED_ENUM for exact matches for NAME.\n+   If one is found, add its CONST_DECL to m_candidates.  */\n+\n+void\n+namespace_hints::maybe_add_candidate_for_scoped_enum (tree scoped_enum,\n+\t\t\t\t\t\t      tree name)\n+{\n+  gcc_assert (SCOPED_ENUM_P (scoped_enum));\n+\n+  for (tree iter = TYPE_VALUES (scoped_enum); iter; iter = TREE_CHAIN (iter))\n+    {\n+      tree id = TREE_PURPOSE (iter);\n+      if (id == name)\n+\t{\n+\t  m_candidates.safe_push (TREE_VALUE (iter));\n+\t  return;\n+\t}\n+    }\n+}\n+\n /* Generate a name_hint at LOCATION for NAME, an IDENTIFIER_NODE for which\n    name lookup failed.\n \n-   Search through all available namespaces and generate a suggestion and/or\n-   a deferred diagnostic that lists possible candidate(s).\n+   Search through all available namespaces and any scoped enums within them\n+   and generate a suggestion and/or a deferred diagnostic that lists possible\n+   candidate(s).\n \n    If no exact matches are found, and SUGGEST_MISSPELLINGS is true, then also\n    look for near-matches and suggest the best near-match, if there is one.\n@@ -5910,6 +5945,23 @@ suggest_alternative_in_explicit_scope (location_t location, tree name,\n   return name_hint ();\n }\n \n+/* Given NAME, look within SCOPED_ENUM for possible spell-correction\n+   candidates.  */\n+\n+name_hint\n+suggest_alternative_in_scoped_enum (tree name, tree scoped_enum)\n+{\n+  gcc_assert (SCOPED_ENUM_P (scoped_enum));\n+\n+  best_match <tree, const char *> bm (name);\n+  for (tree iter = TYPE_VALUES (scoped_enum); iter; iter = TREE_CHAIN (iter))\n+    {\n+      tree id = TREE_PURPOSE (iter);\n+      bm.consider (IDENTIFIER_POINTER (id));\n+    }\n+  return name_hint (bm.get_best_meaningful_candidate (), NULL);\n+}\n+\n /* Look up NAME (an IDENTIFIER_NODE) in SCOPE (either a NAMESPACE_DECL\n    or a class TYPE).\n "}, {"sha": "7c760daf1895f05f28a7b151f0d4733171f8fd0f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ded6ffdfd75978712ed4d9b246fc47779b2d9d1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ded6ffdfd75978712ed4d9b246fc47779b2d9d1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3ded6ffdfd75978712ed4d9b246fc47779b2d9d1", "patch": "@@ -1,3 +1,9 @@\n+2018-11-29  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/88121\n+\t* g++.dg/lookup/suggestions-scoped-enums.C: New test.\n+\t* g++.dg/lookup/suggestions-unscoped-enums.C: New test.\n+\n 2018-11-29  Peter Bergner  <bergner@linux.ibm.com>\n \n \tPR target/87496"}, {"sha": "fa6e7cb4a8bbe38a43b70f616c42ff2e7f03701f", "filename": "gcc/testsuite/g++.dg/lookup/suggestions-scoped-enums.C", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ded6ffdfd75978712ed4d9b246fc47779b2d9d1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fsuggestions-scoped-enums.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ded6ffdfd75978712ed4d9b246fc47779b2d9d1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fsuggestions-scoped-enums.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fsuggestions-scoped-enums.C?ref=3ded6ffdfd75978712ed4d9b246fc47779b2d9d1", "patch": "@@ -0,0 +1,110 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-fdiagnostics-show-caret\" }\n+\n+/* Verify that we offer suggestions for misspelled values\n+   in scoped enums, and for values from scoped enums that\n+   are missing their scope.\n+   Verify that we emit fix-it hints for those cases for\n+   which we have adequate location information.  */\n+\n+enum class vegetable { CARROT, TURNIP }; // { dg-line decl_of_vegetable }\n+namespace pasta\n+{\n+  enum class shape { LASAGNA, LINGUINE, SPAGHETTI, TAGLIATELLE }; // { dg-line decl_of_shape }\n+}\n+\n+void misspelled_value_in_scoped_enum ()\n+{\n+  vegetable::TURNUP; // { dg-error \"'TURNUP' is not a member of 'vegetable'; did you mean 'TURNIP'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   vegetable::TURNUP;\n+              ^~~~~~\n+              TURNIP\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+void misspelled_value_using_explicit_ns ()\n+{\n+  pasta::shape::SPOOGHETTI; // { dg-error \"'SPOOGHETTI' is not a member of 'pasta::shape'; did you mean 'SPAGHETTI'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   pasta::shape::SPOOGHETTI;\n+                 ^~~~~~~~~~\n+                 SPAGHETTI\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+namespace pasta {\n+void misspelled_value_using_implicit_ns ()\n+{\n+  shape::SPOOGHETTI; // { dg-error \"'SPOOGHETTI' is not a member of 'pasta::shape'; did you mean 'SPAGHETTI'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   shape::SPOOGHETTI;\n+          ^~~~~~~~~~\n+          SPAGHETTI\n+     { dg-end-multiline-output \"\" } */\n+}\n+} // namespace pasta\n+\n+void unqualified_enum_in_global_ns ()\n+{\n+  CARROT; // { dg-error \"'CARROT' was not declared in this scope; did you mean 'vegetable::CARROT'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   CARROT;\n+   ^~~~~~\n+   vegetable::CARROT\n+     { dg-end-multiline-output \"\" } */\n+  // { dg-message \"'vegetable::CARROT' declared here\" \"\" { target *-*-* } decl_of_vegetable }\n+  /* { dg-begin-multiline-output \"\" }\n+ enum class vegetable { CARROT, TURNIP };\n+                        ^~~~~~\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+void unqualified_enum_in_ns ()\n+{\n+  LASAGNA; // { dg-error \"'LASAGNA' was not declared in this scope; did you mean 'pasta::shape::LASAGNA'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   LASAGNA;\n+   ^~~~~~~\n+   pasta::shape::LASAGNA\n+     { dg-end-multiline-output \"\" } */\n+  // { dg-message \"'pasta::shape::LASAGNA' declared here\" \"\" { target *-*-* } decl_of_shape }\n+  /* { dg-begin-multiline-output \"\" }\n+   enum class shape { LASAGNA, LINGUINE, SPAGHETTI, TAGLIATELLE };\n+                      ^~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+/* We can't guarantee location information here, so don't expect a\n+   fix-it hint.  */\n+\n+void unqualified_enum_in_explicit_ns ()\n+{\n+  pasta::LINGUINE; // { dg-error \"'LINGUINE' is not a member of 'pasta'; did you mean 'pasta::shape::LINGUINE'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   pasta::LINGUINE;\n+          ^~~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+  // { dg-message \"'pasta::shape::LINGUINE' declared here\" \"\" { target *-*-* } decl_of_shape }\n+  /* { dg-begin-multiline-output \"\" }\n+   enum class shape { LASAGNA, LINGUINE, SPAGHETTI, TAGLIATELLE };\n+                               ^~~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+namespace pasta {\n+void unqualified_enum_in_implicit_ns ()\n+{\n+  TAGLIATELLE; // { dg-error \"'TAGLIATELLE' was not declared in this scope; did you mean 'pasta::shape::TAGLIATELLE'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   TAGLIATELLE;\n+   ^~~~~~~~~~~\n+   pasta::shape::TAGLIATELLE\n+     { dg-end-multiline-output \"\" } */\n+  // { dg-message \"'pasta::shape::TAGLIATELLE' declared here\" \"\" { target *-*-* } decl_of_shape }\n+  /* { dg-begin-multiline-output \"\" }\n+   enum class shape { LASAGNA, LINGUINE, SPAGHETTI, TAGLIATELLE };\n+                                                    ^~~~~~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+}\n+}"}, {"sha": "0dcff8862e624f8e2e4b1fca4220918ce0186ccd", "filename": "gcc/testsuite/g++.dg/lookup/suggestions-unscoped-enums.C", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ded6ffdfd75978712ed4d9b246fc47779b2d9d1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fsuggestions-unscoped-enums.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ded6ffdfd75978712ed4d9b246fc47779b2d9d1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fsuggestions-unscoped-enums.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fsuggestions-unscoped-enums.C?ref=3ded6ffdfd75978712ed4d9b246fc47779b2d9d1", "patch": "@@ -0,0 +1,91 @@\n+// { dg-options \"-fdiagnostics-show-caret\" }\n+\n+enum { LASAGNA, SPAGHETTI };\n+namespace outer_ns_a\n+{\n+  enum enum_in_outer_ns_a { STRAWBERRY, BANANA };\n+  namespace inner_ns\n+  {\n+    enum enum_in_inner_ns { ELEPHANT, LION };\n+  }\n+}\n+namespace outer_ns_b\n+{\n+  enum enum_in_outer_ns_b { NIGHT, DAY };\n+}\n+\n+void misspelled_enum_in_global_ns ()\n+{\n+  SPOOGHETTI; // { dg-error \"'SPOOGHETTI' was not declared in this scope; did you mean 'SPAGHETTI'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   SPOOGHETTI;\n+   ^~~~~~~~~~\n+   SPAGHETTI\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+void unqualified_enum_in_outer_ns ()\n+{\n+  BANANA; // { dg-error \"'BANANA' was not declared in this scope; did you mean 'outer_ns_a::BANANA'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   BANANA;\n+   ^~~~~~\n+   outer_ns_a::BANANA\n+     { dg-end-multiline-output \"\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+   enum enum_in_outer_ns_a { STRAWBERRY, BANANA };\n+                                         ^~~~~~\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+namespace outer_ns_a\n+{\n+  void misspelled_unqualified_enum_in_outer_ns () {\n+    BANANAS; // { dg-error \"'BANANAS' was not declared in this scope; did you mean 'BANANA'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+     BANANAS;\n+     ^~~~~~~\n+     BANANA\n+     { dg-end-multiline-output \"\" } */\n+  }\n+};\n+\n+void unqualified_enum_in_inner_ns ()\n+{\n+  ELEPHANT; // { dg-error \"'ELEPHANT' was not declared in this scope; did you mean 'outer_ns_a::inner_ns::ELEPHANT'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   ELEPHANT;\n+   ^~~~~~~~\n+   outer_ns_a::inner_ns::ELEPHANT\n+     { dg-end-multiline-output \"\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+     enum enum_in_inner_ns { ELEPHANT, LION };\n+                             ^~~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+void partially_qualified_enum_in_inner_ns ()\n+{\n+  outer_ns_a::ELEPHANT; // { dg-error \"'ELEPHANT' is not a member of 'outer_ns_a'; did you mean 'outer_ns_a::inner_ns::ELEPHANT'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   outer_ns_a::ELEPHANT;\n+               ^~~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+     enum enum_in_inner_ns { ELEPHANT, LION };\n+                             ^~~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+void wrongly_qualified_enum ()\n+{\n+  outer_ns_a::NIGHT; // { dg-error \"'NIGHT' is not a member of 'outer_ns_a'; did you mean 'outer_ns_b::NIGHT'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   outer_ns_a::NIGHT;\n+               ^~~~~\n+     { dg-end-multiline-output \"\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+   enum enum_in_outer_ns_b { NIGHT, DAY };\n+                             ^~~~~\n+     { dg-end-multiline-output \"\" } */\n+}"}]}