{"sha": "d6e39f781eec041aad061b1cee35c99e2ad37868", "node_id": "C_kwDOANBUbNoAKGQ2ZTM5Zjc4MWVlYzA0MWFhZDA2MWIxY2VlMzVjOTllMmFkMzc4Njg", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-03-10T16:31:14Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-03-17T10:34:36Z"}, "message": "gccrs: refactor monomoprhized_clone to not use virtual dispatch\n\ngcc/rust/ChangeLog:\n\n\t* typecheck/rust-tyty.cc (BaseType::monomorphized_clone): new impl\n\t(InferType::monomorphized_clone): remove\n\t(ErrorType::monomorphized_clone): likewise\n\t(ADTType::monomorphized_clone): likewise\n\t(TupleType::monomorphized_clone): likewise\n\t(FnType::monomorphized_clone): likewise\n\t(FnPtr::monomorphized_clone): likewise\n\t(ClosureType::monomorphized_clone): likewise\n\t(ArrayType::clone): likewise\n\t(ArrayType::get_var_element_type): likewise\n\t(ArrayType::monomorphized_clone): likewise\n\t(SliceType::clone): likewise\n\t(SliceType::get_var_element_type): likewise\n\t(SliceType::monomorphized_clone): likewise\n\t(BoolType::monomorphized_clone): likewise\n\t(IntType::monomorphized_clone): likewise\n\t(UintType::monomorphized_clone): likewise\n\t(FloatType::monomorphized_clone): likewise\n\t(USizeType::monomorphized_clone): likewise\n\t(ISizeType::monomorphized_clone): likewise\n\t(CharType::monomorphized_clone): likewise\n\t(ReferenceType::clone): likewise\n\t(ReferenceType::get_var_element_type): likewise\n\t(ReferenceType::monomorphized_clone): likewise\n\t(PointerType::clone): likewise\n\t(PointerType::get_var_element_type): likewise\n\t(PointerType::monomorphized_clone): likewise\n\t(ParamType::monomorphized_clone): likewise\n\t(StrType::monomorphized_clone): likewise\n\t(NeverType::monomorphized_clone): likewise\n\t(PlaceholderType::monomorphized_clone): likewise\n\t(ProjectionType::monomorphized_clone): likewise\n\t(DynamicObjectType::monomorphized_clone): likewise\n\t* typecheck/rust-tyty.h: update header\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>", "tree": {"sha": "cba740890b9b4239632657eb8e70c83db935d11c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cba740890b9b4239632657eb8e70c83db935d11c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6e39f781eec041aad061b1cee35c99e2ad37868", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6e39f781eec041aad061b1cee35c99e2ad37868", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6e39f781eec041aad061b1cee35c99e2ad37868", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6e39f781eec041aad061b1cee35c99e2ad37868/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "712aa0027c6fa6ea06560f0a797208bab19fbb24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/712aa0027c6fa6ea06560f0a797208bab19fbb24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/712aa0027c6fa6ea06560f0a797208bab19fbb24"}], "stats": {"total": 353, "additions": 145, "deletions": 208}, "files": [{"sha": "90d227c577aba001f582a5182dad840da92c909d", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 136, "deletions": 178, "changes": 314, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e39f781eec041aad061b1cee35c99e2ad37868/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e39f781eec041aad061b1cee35c99e2ad37868/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=d6e39f781eec041aad061b1cee35c99e2ad37868", "patch": "@@ -25,10 +25,8 @@\n \n #include \"rust-substitution-mapper.h\"\n #include \"rust-hir-trait-reference.h\"\n-#include \"rust-hir-type-bounds.h\"\n #include \"rust-hir-trait-resolve.h\"\n #include \"rust-tyty-cmp.h\"\n-#include \"rust-type-util.h\"\n \n #include \"options.h\"\n \n@@ -572,6 +570,122 @@ BaseType::destructure () const\n   return x;\n }\n \n+BaseType *\n+BaseType::monomorphized_clone () const\n+{\n+  const TyTy::BaseType *x = destructure ();\n+  switch (x->get_kind ())\n+    {\n+    case PARAM:\n+    case PROJECTION:\n+    case PLACEHOLDER:\n+    case INFER:\n+    case BOOL:\n+    case CHAR:\n+    case INT:\n+    case UINT:\n+    case FLOAT:\n+    case USIZE:\n+    case ISIZE:\n+    case NEVER:\n+    case STR:\n+    case DYNAMIC:\n+    case CLOSURE:\n+    case ERROR:\n+      return x->clone ();\n+\n+      case ARRAY: {\n+\tconst ArrayType &arr = *static_cast<const ArrayType *> (x);\n+\tTyVar elm = arr.get_var_element_type ().monomorphized_clone ();\n+\treturn new ArrayType (arr.get_ref (), arr.get_ty_ref (), ident.locus,\n+\t\t\t      arr.get_capacity_expr (), elm,\n+\t\t\t      arr.get_combined_refs ());\n+      }\n+      break;\n+\n+      case SLICE: {\n+\tconst SliceType &slice = *static_cast<const SliceType *> (x);\n+\tTyVar elm = slice.get_var_element_type ().monomorphized_clone ();\n+\treturn new SliceType (slice.get_ref (), slice.get_ty_ref (),\n+\t\t\t      ident.locus, elm, slice.get_combined_refs ());\n+      }\n+      break;\n+\n+      case POINTER: {\n+\tconst PointerType &ptr = *static_cast<const PointerType *> (x);\n+\tTyVar elm = ptr.get_var_element_type ().monomorphized_clone ();\n+\treturn new PointerType (ptr.get_ref (), ptr.get_ty_ref (), elm,\n+\t\t\t\tptr.mutability (), ptr.get_combined_refs ());\n+      }\n+      break;\n+\n+      case REF: {\n+\tconst ReferenceType &ref = *static_cast<const ReferenceType *> (x);\n+\tTyVar elm = ref.get_var_element_type ().monomorphized_clone ();\n+\treturn new ReferenceType (ref.get_ref (), ref.get_ty_ref (), elm,\n+\t\t\t\t  ref.mutability (), ref.get_combined_refs ());\n+      }\n+      break;\n+\n+      case TUPLE: {\n+\tconst TupleType &tuple = *static_cast<const TupleType *> (x);\n+\tstd::vector<TyVar> cloned_fields;\n+\tfor (const auto &f : tuple.get_fields ())\n+\t  cloned_fields.push_back (f.monomorphized_clone ());\n+\n+\treturn new TupleType (tuple.get_ref (), tuple.get_ty_ref (),\n+\t\t\t      tuple.get_ident ().locus, cloned_fields,\n+\t\t\t      tuple.get_combined_refs ());\n+      }\n+      break;\n+\n+      case FNDEF: {\n+\tconst FnType &fn = *static_cast<const FnType *> (x);\n+\tstd::vector<std::pair<HIR::Pattern *, BaseType *>> cloned_params;\n+\tfor (auto &p : fn.get_params ())\n+\t  cloned_params.push_back ({p.first, p.second->monomorphized_clone ()});\n+\n+\tBaseType *retty = fn.get_return_type ()->monomorphized_clone ();\n+\treturn new FnType (fn.get_ref (), fn.get_ty_ref (), fn.get_id (),\n+\t\t\t   fn.get_identifier (), fn.ident, fn.get_flags (),\n+\t\t\t   fn.get_abi (), std::move (cloned_params), retty,\n+\t\t\t   fn.clone_substs (), fn.get_combined_refs ());\n+      }\n+      break;\n+\n+      case FNPTR: {\n+\tconst FnPtr &fn = *static_cast<const FnPtr *> (x);\n+\tstd::vector<TyVar> cloned_params;\n+\tfor (auto &p : fn.get_params ())\n+\t  cloned_params.push_back (p.monomorphized_clone ());\n+\n+\tTyVar retty = fn.get_var_return_type ().monomorphized_clone ();\n+\treturn new FnPtr (fn.get_ref (), fn.get_ty_ref (), fn.ident.locus,\n+\t\t\t  std::move (cloned_params), retty,\n+\t\t\t  fn.get_combined_refs ());\n+      }\n+      break;\n+\n+      case ADT: {\n+\tconst ADTType &adt = *static_cast<const ADTType *> (x);\n+\tstd::vector<VariantDef *> cloned_variants;\n+\tfor (auto &variant : adt.get_variants ())\n+\t  cloned_variants.push_back (variant->monomorphized_clone ());\n+\n+\treturn new ADTType (adt.get_ref (), adt.get_ty_ref (),\n+\t\t\t    adt.get_identifier (), adt.ident,\n+\t\t\t    adt.get_adt_kind (), cloned_variants,\n+\t\t\t    adt.clone_substs (), adt.get_repr_options (),\n+\t\t\t    adt.get_used_arguments (),\n+\t\t\t    adt.get_combined_refs ());\n+      }\n+      break;\n+    }\n+\n+  gcc_unreachable ();\n+  return nullptr;\n+}\n+\n std::string\n BaseType::mappings_str () const\n {\n@@ -820,12 +934,6 @@ InferType::clone () const\n   return clone;\n }\n \n-BaseType *\n-InferType::monomorphized_clone () const\n-{\n-  return clone ();\n-}\n-\n bool\n InferType::default_type (BaseType **type) const\n {\n@@ -899,12 +1007,6 @@ ErrorType::clone () const\n   return new ErrorType (get_ref (), get_ty_ref (), get_combined_refs ());\n }\n \n-BaseType *\n-ErrorType::monomorphized_clone () const\n-{\n-  return clone ();\n-}\n-\n // Struct Field type\n \n StructFieldType::StructFieldType (HirId ref, std::string name, BaseType *ty,\n@@ -1314,19 +1416,6 @@ ADTType::clone () const\n \t\t      get_combined_refs ());\n }\n \n-BaseType *\n-ADTType::monomorphized_clone () const\n-{\n-  std::vector<VariantDef *> cloned_variants;\n-  for (auto &variant : variants)\n-    cloned_variants.push_back (variant->monomorphized_clone ());\n-\n-  return new ADTType (get_ref (), get_ty_ref (), identifier, ident,\n-\t\t      get_adt_kind (), cloned_variants, clone_substs (),\n-\t\t      get_repr_options (), used_arguments,\n-\t\t      get_combined_refs ());\n-}\n-\n static bool\n handle_substitions (SubstitutionArgumentMappings &subst_mappings,\n \t\t    StructFieldType *field)\n@@ -1528,17 +1617,6 @@ TupleType::clone () const\n \t\t\tcloned_fields, get_combined_refs ());\n }\n \n-BaseType *\n-TupleType::monomorphized_clone () const\n-{\n-  std::vector<TyVar> cloned_fields;\n-  for (const auto &f : fields)\n-    cloned_fields.push_back (f.monomorphized_clone ());\n-\n-  return new TupleType (get_ref (), get_ty_ref (), get_ident ().locus,\n-\t\t\tcloned_fields, get_combined_refs ());\n-}\n-\n TupleType *\n TupleType::handle_substitions (SubstitutionArgumentMappings &mappings)\n {\n@@ -1660,19 +1738,6 @@ FnType::clone () const\n \t\t     get_combined_refs ());\n }\n \n-BaseType *\n-FnType::monomorphized_clone () const\n-{\n-  std::vector<std::pair<HIR::Pattern *, BaseType *>> cloned_params;\n-  for (auto &p : params)\n-    cloned_params.push_back ({p.first, p.second->monomorphized_clone ()});\n-\n-  return new FnType (get_ref (), get_ty_ref (), get_id (), get_identifier (),\n-\t\t     ident, flags, abi, std::move (cloned_params),\n-\t\t     get_return_type ()->clone (), clone_substs (),\n-\t\t     get_combined_refs ());\n-}\n-\n FnType *\n FnType::handle_substitions (SubstitutionArgumentMappings &subst_mappings)\n {\n@@ -1858,18 +1923,6 @@ FnPtr::clone () const\n \t\t    get_combined_refs ());\n }\n \n-BaseType *\n-FnPtr::monomorphized_clone () const\n-{\n-  std::vector<TyVar> cloned_params;\n-  for (auto &p : params)\n-    cloned_params.push_back (p.monomorphized_clone ());\n-\n-  return new FnPtr (get_ref (), get_ty_ref (), ident.locus,\n-\t\t    std::move (cloned_params), result_type,\n-\t\t    get_combined_refs ());\n-}\n-\n void\n ClosureType::accept_vis (TyVisitor &vis)\n {\n@@ -1921,12 +1974,6 @@ ClosureType::clone () const\n \t\t\t  specified_bounds);\n }\n \n-BaseType *\n-ClosureType::monomorphized_clone () const\n-{\n-  return clone ();\n-}\n-\n ClosureType *\n ClosureType::handle_substitions (SubstitutionArgumentMappings &mappings)\n {\n@@ -2025,19 +2072,17 @@ ArrayType::get_element_type () const\n   return element_type.get_tyty ();\n }\n \n-BaseType *\n-ArrayType::clone () const\n+const TyVar &\n+ArrayType::get_var_element_type () const\n {\n-  return new ArrayType (get_ref (), get_ty_ref (), ident.locus, capacity_expr,\n-\t\t\telement_type, get_combined_refs ());\n+  return element_type;\n }\n \n BaseType *\n-ArrayType::monomorphized_clone () const\n+ArrayType::clone () const\n {\n   return new ArrayType (get_ref (), get_ty_ref (), ident.locus, capacity_expr,\n-\t\t\telement_type.monomorphized_clone (),\n-\t\t\tget_combined_refs ());\n+\t\t\telement_type, get_combined_refs ());\n }\n \n ArrayType *\n@@ -2101,19 +2146,17 @@ SliceType::get_element_type () const\n   return element_type.get_tyty ();\n }\n \n-BaseType *\n-SliceType::clone () const\n+const TyVar &\n+SliceType::get_var_element_type () const\n {\n-  return new SliceType (get_ref (), get_ty_ref (), ident.locus,\n-\t\t\telement_type.clone (), get_combined_refs ());\n+  return element_type;\n }\n \n BaseType *\n-SliceType::monomorphized_clone () const\n+SliceType::clone () const\n {\n   return new SliceType (get_ref (), get_ty_ref (), ident.locus,\n-\t\t\telement_type.monomorphized_clone (),\n-\t\t\tget_combined_refs ());\n+\t\t\telement_type.clone (), get_combined_refs ());\n }\n \n SliceType *\n@@ -2185,12 +2228,6 @@ BoolType::clone () const\n   return new BoolType (get_ref (), get_ty_ref (), get_combined_refs ());\n }\n \n-BaseType *\n-BoolType::monomorphized_clone () const\n-{\n-  return clone ();\n-}\n-\n // IntType\n \n IntType::IntType (HirId ref, IntKind kind, std::set<HirId> refs)\n@@ -2267,12 +2304,6 @@ IntType::clone () const\n \t\t      get_combined_refs ());\n }\n \n-BaseType *\n-IntType::monomorphized_clone () const\n-{\n-  return clone ();\n-}\n-\n bool\n IntType::is_equal (const BaseType &other) const\n {\n@@ -2360,12 +2391,6 @@ UintType::clone () const\n \t\t       get_combined_refs ());\n }\n \n-BaseType *\n-UintType::monomorphized_clone () const\n-{\n-  return clone ();\n-}\n-\n bool\n UintType::is_equal (const BaseType &other) const\n {\n@@ -2447,12 +2472,6 @@ FloatType::clone () const\n \t\t\tget_combined_refs ());\n }\n \n-BaseType *\n-FloatType::monomorphized_clone () const\n-{\n-  return clone ();\n-}\n-\n bool\n FloatType::is_equal (const BaseType &other) const\n {\n@@ -2516,12 +2535,6 @@ USizeType::clone () const\n   return new USizeType (get_ref (), get_ty_ref (), get_combined_refs ());\n }\n \n-BaseType *\n-USizeType::monomorphized_clone () const\n-{\n-  return clone ();\n-}\n-\n // ISizeType\n \n ISizeType::ISizeType (HirId ref, std::set<HirId> refs)\n@@ -2575,12 +2588,6 @@ ISizeType::clone () const\n   return new ISizeType (get_ref (), get_ty_ref (), get_combined_refs ());\n }\n \n-BaseType *\n-ISizeType::monomorphized_clone () const\n-{\n-  return clone ();\n-}\n-\n // Char Type\n \n CharType::CharType (HirId ref, std::set<HirId> refs)\n@@ -2634,12 +2641,6 @@ CharType::clone () const\n   return new CharType (get_ref (), get_ty_ref (), get_combined_refs ());\n }\n \n-BaseType *\n-CharType::monomorphized_clone () const\n-{\n-  return clone ();\n-}\n-\n // Reference Type\n \n ReferenceType::ReferenceType (HirId ref, TyVar base, Mutability mut,\n@@ -2756,18 +2757,16 @@ ReferenceType::get_base () const\n   return base.get_tyty ();\n }\n \n-BaseType *\n-ReferenceType::clone () const\n+const TyVar &\n+ReferenceType::get_var_element_type () const\n {\n-  return new ReferenceType (get_ref (), get_ty_ref (), base, mutability (),\n-\t\t\t    get_combined_refs ());\n+  return base;\n }\n \n BaseType *\n-ReferenceType::monomorphized_clone () const\n+ReferenceType::clone () const\n {\n-  return new ReferenceType (get_ref (), get_ty_ref (),\n-\t\t\t    base.monomorphized_clone (), mutability (),\n+  return new ReferenceType (get_ref (), get_ty_ref (), base, mutability (),\n \t\t\t    get_combined_refs ());\n }\n \n@@ -2909,18 +2908,16 @@ PointerType::get_base () const\n   return base.get_tyty ();\n }\n \n-BaseType *\n-PointerType::clone () const\n+const TyVar &\n+PointerType::get_var_element_type () const\n {\n-  return new PointerType (get_ref (), get_ty_ref (), base, mutability (),\n-\t\t\t  get_combined_refs ());\n+  return base;\n }\n \n BaseType *\n-PointerType::monomorphized_clone () const\n+PointerType::clone () const\n {\n-  return new PointerType (get_ref (), get_ty_ref (),\n-\t\t\t  base.monomorphized_clone (), mutability (),\n+  return new PointerType (get_ref (), get_ty_ref (), base, mutability (),\n \t\t\t  get_combined_refs ());\n }\n \n@@ -3024,12 +3021,6 @@ ParamType::clone () const\n \t\t\tget_combined_refs ());\n }\n \n-BaseType *\n-ParamType::monomorphized_clone () const\n-{\n-  return resolve ()->clone ();\n-}\n-\n std::string\n ParamType::get_symbol () const\n {\n@@ -3151,12 +3142,6 @@ StrType::clone () const\n   return new StrType (get_ref (), get_ty_ref (), get_combined_refs ());\n }\n \n-BaseType *\n-StrType::monomorphized_clone () const\n-{\n-  return clone ();\n-}\n-\n void\n StrType::accept_vis (TyVisitor &vis)\n {\n@@ -3241,12 +3226,6 @@ NeverType::clone () const\n   return new NeverType (get_ref (), get_ty_ref (), get_combined_refs ());\n }\n \n-BaseType *\n-NeverType::monomorphized_clone () const\n-{\n-  return clone ();\n-}\n-\n // placeholder type\n \n PlaceholderType::PlaceholderType (std::string symbol, HirId ref,\n@@ -3312,15 +3291,6 @@ PlaceholderType::clone () const\n \t\t\t      get_combined_refs ());\n }\n \n-BaseType *\n-PlaceholderType::monomorphized_clone () const\n-{\n-  if (can_resolve ())\n-    return resolve ()->monomorphized_clone ();\n-\n-  return clone ();\n-}\n-\n void\n PlaceholderType::set_associated_type (HirId ref)\n {\n@@ -3463,12 +3433,6 @@ ProjectionType::clone () const\n \t\t\t     get_combined_refs ());\n }\n \n-BaseType *\n-ProjectionType::monomorphized_clone () const\n-{\n-  return get ()->monomorphized_clone ();\n-}\n-\n ProjectionType *\n ProjectionType::handle_substitions (\n   SubstitutionArgumentMappings &subst_mappings)\n@@ -3588,12 +3552,6 @@ DynamicObjectType::clone () const\n \t\t\t\tspecified_bounds, get_combined_refs ());\n }\n \n-BaseType *\n-DynamicObjectType::monomorphized_clone () const\n-{\n-  return clone ();\n-}\n-\n std::string\n DynamicObjectType::get_name () const\n {"}, {"sha": "ce17c18fcabcd455775f6b643af12fd792ebe7df", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 9, "deletions": 30, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e39f781eec041aad061b1cee35c99e2ad37868/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e39f781eec041aad061b1cee35c99e2ad37868/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=d6e39f781eec041aad061b1cee35c99e2ad37868", "patch": "@@ -135,8 +135,9 @@ class BaseType : public TypeBoundsMappings\n    * releasing the memory of the returned ty. */\n   virtual BaseType *clone () const = 0;\n \n-  // TODO\n-  virtual BaseType *monomorphized_clone () const = 0;\n+  // monomorphized clone is a clone which destructures the types to get rid of\n+  // generics\n+  BaseType *monomorphized_clone () const;\n \n   // get_combined_refs returns the chain of node refs involved in unification\n   std::set<HirId> get_combined_refs () const;\n@@ -212,7 +213,6 @@ class InferType : public BaseType\n   bool can_eq (const BaseType *other, bool emit_errors) const override final;\n \n   BaseType *clone () const final override;\n-  BaseType *monomorphized_clone () const final override;\n \n   InferTypeKind get_infer_kind () const;\n \n@@ -240,7 +240,6 @@ class ErrorType : public BaseType\n   bool can_eq (const BaseType *other, bool emit_errors) const override final;\n \n   BaseType *clone () const final override;\n-  BaseType *monomorphized_clone () const final override;\n \n   std::string get_name () const override final;\n };\n@@ -266,7 +265,6 @@ class ParamType : public BaseType\n   bool can_eq (const BaseType *other, bool emit_errors) const override final;\n \n   BaseType *clone () const final override;\n-  BaseType *monomorphized_clone () const final override;\n \n   std::string get_symbol () const;\n \n@@ -346,7 +344,6 @@ class TupleType : public BaseType\n   BaseType *get_field (size_t index) const;\n \n   BaseType *clone () const final override;\n-  BaseType *monomorphized_clone () const final override;\n \n   const std::vector<TyVar> &get_fields () const;\n \n@@ -574,7 +571,6 @@ class ADTType : public BaseType, public SubstitutionRef\n   }\n \n   BaseType *clone () const final override;\n-  BaseType *monomorphized_clone () const final override;\n \n   bool needs_generic_substitutions () const override final\n   {\n@@ -733,7 +729,6 @@ class FnType : public BaseType, public SubstitutionRef\n   BaseType *get_return_type () const { return type; }\n \n   BaseType *clone () const final override;\n-  BaseType *monomorphized_clone () const final override;\n \n   bool needs_generic_substitutions () const override final\n   {\n@@ -751,6 +746,7 @@ class FnType : public BaseType, public SubstitutionRef\n   handle_substitions (SubstitutionArgumentMappings &mappings) override final;\n \n   ABI get_abi () const { return abi; }\n+  uint8_t get_flags () const { return flags; }\n \n private:\n   std::vector<std::pair<HIR::Pattern *, BaseType *>> params;\n@@ -781,6 +777,7 @@ class FnPtr : public BaseType\n   std::string get_name () const override final { return as_string (); }\n \n   BaseType *get_return_type () const { return result_type.get_tyty (); }\n+  const TyVar &get_var_return_type () const { return result_type; }\n \n   size_t num_params () const { return params.size (); }\n \n@@ -796,7 +793,6 @@ class FnPtr : public BaseType\n   bool is_equal (const BaseType &other) const override;\n \n   BaseType *clone () const final override;\n-  BaseType *monomorphized_clone () const final override;\n \n   std::vector<TyVar> &get_params () { return params; }\n   const std::vector<TyVar> &get_params () const { return params; }\n@@ -856,7 +852,6 @@ class ClosureType : public BaseType, public SubstitutionRef\n   bool is_equal (const BaseType &other) const override;\n \n   BaseType *clone () const final override;\n-  BaseType *monomorphized_clone () const final override;\n \n   bool needs_generic_substitutions () const override final\n   {\n@@ -918,9 +913,9 @@ class ArrayType : public BaseType\n   bool is_equal (const BaseType &other) const override;\n \n   BaseType *get_element_type () const;\n+  const TyVar &get_var_element_type () const;\n \n   BaseType *clone () const final override;\n-  BaseType *monomorphized_clone () const final override;\n \n   HIR::Expr &get_capacity_expr () const { return capacity_expr; }\n \n@@ -960,9 +955,9 @@ class SliceType : public BaseType\n   bool is_equal (const BaseType &other) const override;\n \n   BaseType *get_element_type () const;\n+  const TyVar &get_var_element_type () const;\n \n   BaseType *clone () const final override;\n-  BaseType *monomorphized_clone () const final override;\n \n   SliceType *handle_substitions (SubstitutionArgumentMappings &mappings);\n \n@@ -986,7 +981,6 @@ class BoolType : public BaseType\n   bool can_eq (const BaseType *other, bool emit_errors) const override final;\n \n   BaseType *clone () const final override;\n-  BaseType *monomorphized_clone () const final override;\n };\n \n class IntType : public BaseType\n@@ -1017,7 +1011,6 @@ class IntType : public BaseType\n   IntKind get_int_kind () const;\n \n   BaseType *clone () const final override;\n-  BaseType *monomorphized_clone () const final override;\n \n   bool is_equal (const BaseType &other) const override;\n \n@@ -1054,7 +1047,6 @@ class UintType : public BaseType\n   UintKind get_uint_kind () const;\n \n   BaseType *clone () const final override;\n-  BaseType *monomorphized_clone () const final override;\n \n   bool is_equal (const BaseType &other) const override;\n \n@@ -1087,7 +1079,6 @@ class FloatType : public BaseType\n   FloatKind get_float_kind () const;\n \n   BaseType *clone () const final override;\n-  BaseType *monomorphized_clone () const final override;\n \n   bool is_equal (const BaseType &other) const override;\n \n@@ -1111,7 +1102,6 @@ class USizeType : public BaseType\n   bool can_eq (const BaseType *other, bool emit_errors) const override final;\n \n   BaseType *clone () const final override;\n-  BaseType *monomorphized_clone () const final override;\n };\n \n class ISizeType : public BaseType\n@@ -1130,7 +1120,6 @@ class ISizeType : public BaseType\n   bool can_eq (const BaseType *other, bool emit_errors) const override final;\n \n   BaseType *clone () const final override;\n-  BaseType *monomorphized_clone () const final override;\n };\n \n class CharType : public BaseType\n@@ -1148,7 +1137,6 @@ class CharType : public BaseType\n   bool can_eq (const BaseType *other, bool emit_errors) const override final;\n \n   BaseType *clone () const final override;\n-  BaseType *monomorphized_clone () const final override;\n };\n \n class StrType : public BaseType\n@@ -1169,7 +1157,6 @@ class StrType : public BaseType\n   bool is_equal (const BaseType &other) const override;\n \n   BaseType *clone () const final override;\n-  BaseType *monomorphized_clone () const final override;\n };\n \n class ReferenceType : public BaseType\n@@ -1181,6 +1168,7 @@ class ReferenceType : public BaseType\n \t\t std::set<HirId> refs = std::set<HirId> ());\n \n   BaseType *get_base () const;\n+  const TyVar &get_var_element_type () const;\n \n   void accept_vis (TyVisitor &vis) override;\n   void accept_vis (TyConstVisitor &vis) const override;\n@@ -1194,18 +1182,14 @@ class ReferenceType : public BaseType\n   bool is_equal (const BaseType &other) const override;\n \n   BaseType *clone () const final override;\n-  BaseType *monomorphized_clone () const final override;\n \n   ReferenceType *handle_substitions (SubstitutionArgumentMappings &mappings);\n \n   Mutability mutability () const;\n-\n   bool is_mutable () const;\n \n   bool is_dyn_object () const;\n-\n   bool is_dyn_slice_type (const TyTy::SliceType **slice = nullptr) const;\n-\n   bool is_dyn_str_type (const TyTy::StrType **str = nullptr) const;\n \n private:\n@@ -1222,6 +1206,7 @@ class PointerType : public BaseType\n \t       std::set<HirId> refs = std::set<HirId> ());\n \n   BaseType *get_base () const;\n+  const TyVar &get_var_element_type () const;\n \n   void accept_vis (TyVisitor &vis) override;\n   void accept_vis (TyConstVisitor &vis) const override;\n@@ -1234,15 +1219,13 @@ class PointerType : public BaseType\n   bool is_equal (const BaseType &other) const override;\n \n   BaseType *clone () const final override;\n-  BaseType *monomorphized_clone () const final override;\n \n   PointerType *handle_substitions (SubstitutionArgumentMappings &mappings);\n \n   Mutability mutability () const;\n   bool is_mutable () const;\n   bool is_const () const;\n   bool is_dyn_object () const;\n-\n   bool is_dyn_slice_type (const TyTy::SliceType **slice = nullptr) const;\n   bool is_dyn_str_type (const TyTy::StrType **str = nullptr) const;\n \n@@ -1276,7 +1259,6 @@ class NeverType : public BaseType\n   bool can_eq (const BaseType *other, bool emit_errors) const override final;\n \n   BaseType *clone () const final override;\n-  BaseType *monomorphized_clone () const final override;\n \n   std::string get_name () const override final;\n };\n@@ -1299,7 +1281,6 @@ class PlaceholderType : public BaseType\n   bool can_eq (const BaseType *other, bool emit_errors) const override final;\n \n   BaseType *clone () const final override;\n-  BaseType *monomorphized_clone () const final override;\n \n   std::string get_name () const override final;\n \n@@ -1344,7 +1325,6 @@ class ProjectionType : public BaseType, public SubstitutionRef\n   bool can_eq (const BaseType *other, bool emit_errors) const override final;\n \n   BaseType *clone () const final override;\n-  BaseType *monomorphized_clone () const final override;\n \n   std::string get_name () const override final;\n \n@@ -1387,7 +1367,6 @@ class DynamicObjectType : public BaseType\n   bool is_equal (const BaseType &other) const override;\n \n   BaseType *clone () const final override;\n-  BaseType *monomorphized_clone () const final override;\n \n   std::string get_name () const override final;\n "}]}