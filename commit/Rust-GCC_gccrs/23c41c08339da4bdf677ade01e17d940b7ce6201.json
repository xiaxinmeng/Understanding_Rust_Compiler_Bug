{"sha": "23c41c08339da4bdf677ade01e17d940b7ce6201", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNjNDFjMDgzMzlkYTRiZGY2NzdhZGUwMWUxN2Q5NDBiN2NlNjIwMQ==", "commit": {"author": {"name": "Dalibor Topic", "email": "robilad@kaffe.org", "date": "2004-07-09T13:40:29Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-07-09T13:40:29Z"}, "message": "Buffer.java, [...]: Fixed javadocs all over.\n\n2004-07-09  Dalibor Topic  <robilad@kaffe.org>\n\n\t* java/nio/Buffer.java,\n\tjava/nio/ByteBuffer.java,\n\tjava/nio/ByteBufferHelper.java,\n\tjava/nio/ByteBufferImpl.java,\n\tjava/nio/CharBuffer.java,\n\tjava/nio/CharBufferImpl.java,\n\tjava/nio/CharViewBufferImpl.java,\n\tjava/nio/DirectByteBufferImpl.java,\n\tjava/nio/DoubleBuffer.java,\n\tjava/nio/DoubleBufferImpl.java,\n\tjava/nio/DoubleViewBufferImpl.java,\n\tjava/nio/FloatBuffer.java,\n\tjava/nio/FloatBufferImpl.java,\n\tjava/nio/FloatViewBufferImpl.java,\n\tjava/nio/IntBuffer.java,\n\tjava/nio/IntBufferImpl.java,\n\tjava/nio/IntViewBufferImpl.java,\n\tjava/nio/LongBuffer.java,\n\tjava/nio/LongBufferImpl.java,\n\tjava/nio/LongViewBufferImpl.java,\n\tjava/nio/MappedByteBufferImpl.java,\n\tjava/nio/ShortBuffer.java,\n\tjava/nio/ShortBufferImpl.java,\n\tjava/nio/ShortViewBufferImpl.java:\n        Fixed javadocs all over. Improved input error\n        checking.\n\n\t* java/nio/Buffer.java\n\t(checkForUnderflow, checkForOverflow, checkIndex,\n\tcheckIfReadOnly, checkArraySize): New helper methods\n        for error checking.\n\n\t* java/nio/ByteBufferHelper.java\n\t(checkRemainingForRead, checkRemainingForWrite,\n\tcheckAvailableForRead, checkAvailableForWrite): Removed\n        no longer needed methods.\n\nFrom-SVN: r84366", "tree": {"sha": "c31d17690c1b5f17448be3c1f8e58e48109d8857", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c31d17690c1b5f17448be3c1f8e58e48109d8857"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23c41c08339da4bdf677ade01e17d940b7ce6201", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23c41c08339da4bdf677ade01e17d940b7ce6201", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23c41c08339da4bdf677ade01e17d940b7ce6201", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23c41c08339da4bdf677ade01e17d940b7ce6201/comments", "author": null, "committer": null, "parents": [{"sha": "e484d7d5b33c3b6c9059d0e61fb08fd9e7f3bc68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e484d7d5b33c3b6c9059d0e61fb08fd9e7f3bc68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e484d7d5b33c3b6c9059d0e61fb08fd9e7f3bc68"}], "stats": {"total": 836, "additions": 558, "deletions": 278}, "files": [{"sha": "ea7ba416559ad1e56e65779bb24ce1791a875f1b", "filename": "libjava/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=23c41c08339da4bdf677ade01e17d940b7ce6201", "patch": "@@ -1,3 +1,42 @@\n+2004-07-09  Dalibor Topic  <robilad@kaffe.org>\n+\n+\t* java/nio/Buffer.java,\n+\tjava/nio/ByteBuffer.java,\n+\tjava/nio/ByteBufferHelper.java,\n+\tjava/nio/ByteBufferImpl.java,\n+\tjava/nio/CharBuffer.java,\n+\tjava/nio/CharBufferImpl.java,\n+\tjava/nio/CharViewBufferImpl.java,\n+\tjava/nio/DirectByteBufferImpl.java,\n+\tjava/nio/DoubleBuffer.java,\n+\tjava/nio/DoubleBufferImpl.java,\n+\tjava/nio/DoubleViewBufferImpl.java,\n+\tjava/nio/FloatBuffer.java,\n+\tjava/nio/FloatBufferImpl.java,\n+\tjava/nio/FloatViewBufferImpl.java,\n+\tjava/nio/IntBuffer.java,\n+\tjava/nio/IntBufferImpl.java,\n+\tjava/nio/IntViewBufferImpl.java,\n+\tjava/nio/LongBuffer.java,\n+\tjava/nio/LongBufferImpl.java,\n+\tjava/nio/LongViewBufferImpl.java,\n+\tjava/nio/MappedByteBufferImpl.java,\n+\tjava/nio/ShortBuffer.java,\n+\tjava/nio/ShortBufferImpl.java,\n+\tjava/nio/ShortViewBufferImpl.java:\n+        Fixed javadocs all over. Improved input error\n+        checking.\n+\n+\t* java/nio/Buffer.java\n+\t(checkForUnderflow, checkForOverflow, checkIndex,\n+\tcheckIfReadOnly, checkArraySize): New helper methods\n+        for error checking.\n+\n+\t* java/nio/ByteBufferHelper.java\n+\t(checkRemainingForRead, checkRemainingForWrite,\n+\tcheckAvailableForRead, checkAvailableForWrite): Removed\n+        no longer needed methods.\n+\n 2004-07-09  Michael Koch  <konqueror@gmx.de>\n \n \t* gnu/regexp/CharIndexedInputStream.java:"}, {"sha": "e7173852be2405279f28d73ead29c48722ca4b18", "filename": "libjava/java/nio/Buffer.java", "status": "modified", "additions": 112, "deletions": 1, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FBuffer.java?ref=23c41c08339da4bdf677ade01e17d940b7ce6201", "patch": "@@ -233,12 +233,123 @@ public final Buffer reset()\n    * Rewinds this buffer. The position is set to zero and the mark\n    * is discarded.\n    *\n-   * @this buffer\n+   * @return this buffer\n    */\n   public final Buffer rewind()\n   {\n     pos = 0;\n     mark = -1;\n     return this;\n   }\n+\n+  /**\n+   * Checks for underflow. This method is used internally to check\n+   * whether a buffer has enough elements left to satisfy a read \n+   * request.\n+   *\n+   * @exception BufferUnderflowException If there are no remaining\n+   * elements in this buffer.\n+   */\n+  final void checkForUnderflow()\n+  {\n+    if (!hasRemaining())\n+      throw new BufferUnderflowException();\n+  }\n+\n+  /**\n+   * Checks for underflow. This method is used internally to check\n+   * whether a buffer has enough elements left to satisfy a read \n+   * request for a given number of elements.\n+   *\n+   * @param length The length of a sequence of elements.\n+   *\n+   * @exception BufferUnderflowException If there are not enough \n+   * remaining elements in this buffer.\n+   */\n+  final void checkForUnderflow(int length)\n+  {\n+    if (remaining() < length)\n+      throw new BufferUnderflowException();\n+  }\n+\n+  /**\n+   * Checks for overflow. This method is used internally to check\n+   * whether a buffer has enough space left to satisfy a write \n+   * request.\n+   *\n+   * @exception BufferOverflowException If there is no remaining\n+   * space in this buffer.\n+   */\n+  final void checkForOverflow()\n+  {\n+    if (!hasRemaining())\n+      throw new BufferOverflowException();\n+  }\n+\n+  /**\n+   * Checks for overflow. This method is used internally to check\n+   * whether a buffer has enough space left to satisfy a write \n+   * request for a given number of elements.\n+   *\n+   * @param length The length of a sequence of elements.\n+   *\n+   * @exception BufferUnderflowException If there is not enough \n+   * remaining space in this buffer.\n+   */\n+  final void checkForOverflow(int length)\n+  {\n+    if (remaining() < length)\n+      throw new BufferOverflowException();\n+  }\n+\n+  /**\n+   * Checks if index is negative or not smaller than the buffer's \n+   * limit. This method is used internally to check whether\n+   * an indexed request can be fulfilled.\n+   *\n+   * @param index The requested position in the buffer.\n+   *\n+   * @exception IndexOutOfBoundsException If index is negative or not smaller\n+   * than the buffer's limit.\n+   */\n+  final void checkIndex(int index)\n+  {\n+    if (index < 0\n+        || index >= limit ())\n+      throw new IndexOutOfBoundsException ();\n+  }\n+\n+  /**\n+   * Checks if buffer is read-only. This method is used internally to\n+   * check if elements can be put into a buffer.\n+   *\n+   * @exception ReadOnlyBufferException If this buffer is read-only.\n+   */\n+  final void checkIfReadOnly() \n+  {\n+    if (isReadOnly())\n+      throw new ReadOnlyBufferException ();\n+  }\n+\n+  /**\n+   * Checks whether an array is large enough to hold the given number of\n+   * elements at the given offset. This method is used internally to\n+   * check if an array is big enough.\n+   *\n+   * @param arraylength The length of the array.\n+   * @param offset The offset within the array of the first byte to be read;\n+   * must be non-negative and no larger than arraylength.\n+   * @param length The number of bytes to be read from the given array;\n+   * must be non-negative and no larger than arraylength - offset.\n+   *\n+   * @exception IndexOutOfBoundsException If the preconditions on the offset\n+   * and length parameters do not hold\n+   */\n+  final static void checkArraySize(int arraylength, int offset, int length)\n+  {\n+    if ((offset < 0) ||\n+        (length < 0) ||\n+        (arraylength < length + offset))\n+      throw new IndexOutOfBoundsException ();\n+  }\n }"}, {"sha": "34e3db9b7c7d1e575b8b1578138ebdb0620019ae", "filename": "libjava/java/nio/ByteBuffer.java", "status": "modified", "additions": 22, "deletions": 27, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FByteBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FByteBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FByteBuffer.java?ref=23c41c08339da4bdf677ade01e17d940b7ce6201", "patch": "@@ -100,8 +100,9 @@ final public static ByteBuffer wrap (byte[] array)\n   }\n   \n   /**\n-   * This method transfers <code>bytes<code> from this buffer into the given\n-   * destination array.\n+   * This method transfers <code>byte</code>s from this buffer into the given\n+   * destination array. Before the transfer, it checks if there are fewer than\n+   * length <code>byte</code>s remaining in this buffer.\n    *\n    * @param dst The destination array\n    * @param offset The offset within the array of the first <code>byte</code>\n@@ -110,16 +111,14 @@ final public static ByteBuffer wrap (byte[] array)\n    * must be non-negative and no larger than dst.length - offset.\n    *\n    * @exception BufferUnderflowException If there are fewer than length\n-   * <code>bytes</code> remaining in this buffer.\n+   * <code>byte</code>s remaining in this buffer.\n    * @exception IndexOutOfBoundsException If the preconditions on the offset\n    * and length parameters do not hold.\n    */\n   public ByteBuffer get (byte[] dst, int offset, int length)\n   {\n-    if (offset < 0 || length < 0 || offset + length > dst.length)\n-      throw new IndexOutOfBoundsException ();\n-    if (length > remaining())\n-      throw new BufferUnderflowException();\n+    checkArraySize(dst.length, offset, length);\n+    checkForUnderflow(length);\n \n     for (int i = offset; i < offset + length; i++)\n       {\n@@ -130,13 +129,13 @@ public ByteBuffer get (byte[] dst, int offset, int length)\n   }\n \n   /**\n-   * This method transfers <code>bytes<code> from this buffer into the given\n+   * This method transfers <code>byte</code>s from this buffer into the given\n    * destination array.\n    *\n    * @param dst The byte array to write into.\n    *\n    * @exception BufferUnderflowException If there are fewer than dst.length\n-   * <code>bytes</code> remaining in this buffer.\n+   * <code>byte</code>s remaining in this buffer.\n    */\n   public ByteBuffer get (byte[] dst)\n   {\n@@ -145,12 +144,13 @@ public ByteBuffer get (byte[] dst)\n \n   /**\n    * Writes the content of the the <code>ByteBUFFER</code> src\n-   * into the buffer.\n+   * into the buffer. Before the transfer, it checks if there is fewer than\n+   * <code>src.remaining()</code> space remaining in this buffer.\n    *\n    * @param src The source data.\n    *\n    * @exception BufferOverflowException If there is insufficient space in this\n-   * buffer for the remaining <code>bytes<code> in the source buffer.\n+   * buffer for the remaining <code>byte</code>s in the source buffer.\n    * @exception IllegalArgumentException If the source buffer is this buffer.\n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n@@ -159,8 +159,7 @@ public ByteBuffer put (ByteBuffer src)\n     if (src == this)\n       throw new IllegalArgumentException ();\n \n-    if (src.remaining () > remaining ())\n-      throw new BufferOverflowException ();\n+    checkForOverflow(src.remaining());\n \n     if (src.remaining () > 0)\n       {\n@@ -174,7 +173,8 @@ public ByteBuffer put (ByteBuffer src)\n \n   /**\n    * Writes the content of the the <code>byte array</code> src\n-   * into the buffer.\n+   * into the buffer. Before the transfer, it checks if there is fewer than\n+   * length space remaining in this buffer.\n    *\n    * @param src The array to copy into the buffer.\n    * @param offset The offset within the array of the first byte to be read;\n@@ -183,18 +183,15 @@ public ByteBuffer put (ByteBuffer src)\n    * must be non-negative and no larger than src.length - offset.\n    * \n    * @exception BufferOverflowException If there is insufficient space in this\n-   * buffer for the remaining <code>bytes<code> in the source array.\n+   * buffer for the remaining <code>byte</code>s in the source array.\n    * @exception IndexOutOfBoundsException If the preconditions on the offset\n    * and length parameters do not hold\n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n   public ByteBuffer put (byte[] src, int offset, int length)\n   {\n-    if ((offset < 0) ||\n-        (offset > src.length) ||\n-        (length < 0) ||\n-        (length > src.length - offset))\n-      throw new IndexOutOfBoundsException ();\n+    checkArraySize(src.length, offset, length);\n+    checkForOverflow(length);\n \n     for (int i = offset; i < offset + length; i++)\n       put (src [i]);\n@@ -209,7 +206,7 @@ public ByteBuffer put (byte[] src, int offset, int length)\n    * @param src The array to copy into the buffer.\n    * \n    * @exception BufferOverflowException If there is insufficient space in this\n-   * buffer for the remaining <code>bytes<code> in the source array.\n+   * buffer for the remaining <code>byte</code>s in the source array.\n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n   public final ByteBuffer put (byte[] src)\n@@ -239,8 +236,7 @@ public final byte[] array ()\n     if (backing_buffer == null)\n       throw new UnsupportedOperationException ();\n \n-    if (isReadOnly ())\n-      throw new ReadOnlyBufferException ();\n+    checkIfReadOnly();\n     \n     return backing_buffer;\n   }\n@@ -257,8 +253,7 @@ public final int arrayOffset ()\n     if (backing_buffer == null)\n       throw new UnsupportedOperationException ();\n \n-    if (isReadOnly ())\n-      throw new ReadOnlyBufferException ();\n+    checkIfReadOnly();\n     \n     return array_offset;\n   }\n@@ -338,7 +333,7 @@ public final ByteBuffer order (ByteOrder endian)\n    * and then increments the position.\n    *\n    * @exception BufferUnderflowException If there are no remaining\n-   * <code>bytes</code> in this buffer.\n+   * <code>byte</code>s in this buffer.\n    */\n   public abstract byte get ();\n \n@@ -347,7 +342,7 @@ public final ByteBuffer order (ByteOrder endian)\n    * and then increments the position.\n    *\n    * @exception BufferOverflowException If there no remaining \n-   * <code>bytes</code> in this buffer.\n+   * <code>byte</code>s in this buffer.\n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n   public abstract ByteBuffer put (byte b);"}, {"sha": "e5c522acd4dcc9d5f77b1570f03bef85de93d3cf", "filename": "libjava/java/nio/ByteBufferHelper.java", "status": "modified", "additions": 6, "deletions": 44, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FByteBufferHelper.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FByteBufferHelper.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FByteBufferHelper.java?ref=23c41c08339da4bdf677ade01e17d940b7ce6201", "patch": "@@ -42,32 +42,6 @@\n  */\n final class ByteBufferHelper\n {\n-  private static void checkRemainingForRead (ByteBuffer buffer, int bytes)\n-  {\n-    if (buffer.remaining() < bytes)\n-      throw new BufferUnderflowException();\n-  }\n-  \n-  private static void checkRemainingForWrite (ByteBuffer buffer, int bytes)\n-  {\n-    if (buffer.remaining() < bytes)\n-      throw new BufferOverflowException();\n-  }\n-\n-  private static void checkAvailableForRead (ByteBuffer buffer,\n-\t\t\t\t\t     int index, int bytes)\n-  {\n-    if (buffer.limit() < (index + bytes))\n-      throw new BufferUnderflowException();\n-  }\n-  \n-  private static void checkAvailableForWrite (ByteBuffer buffer,\n-\t\t\t\t\t      int index, int bytes)\n-  {\n-    if (buffer.limit() < (index + bytes))\n-      throw new BufferOverflowException();\n-  }\n-  \n   public static char getChar (ByteBuffer buffer, ByteOrder order)\n   {\n     return (char) getShort (buffer, order);\n@@ -91,7 +65,7 @@ public static void putChar (ByteBuffer buffer, int index,\n \n   public static short getShort (ByteBuffer buffer, ByteOrder order)\n   {\n-    checkRemainingForRead (buffer, 2);\n+    buffer.checkForUnderflow(2);\n \n     if (order == ByteOrder.LITTLE_ENDIAN)\n       {\n@@ -105,7 +79,7 @@ public static short getShort (ByteBuffer buffer, ByteOrder order)\n   \n   public static void putShort (ByteBuffer buffer, short value, ByteOrder order)\n   {\n-    checkRemainingForWrite (buffer, 2);\n+    buffer.checkForOverflow(2);\n \n     if (order == ByteOrder.LITTLE_ENDIAN)\n       {\n@@ -122,8 +96,6 @@ public static void putShort (ByteBuffer buffer, short value, ByteOrder order)\n   public static short getShort (ByteBuffer buffer,\n \t\t\t\t      int index, ByteOrder order)\n   {\n-    checkAvailableForRead (buffer, index, 2);\n-\n     if (order == ByteOrder.LITTLE_ENDIAN)\n       {\n         return (short) ((buffer.get (index) & 0xff)\n@@ -137,8 +109,6 @@ public static short getShort (ByteBuffer buffer,\n   public static void putShort (ByteBuffer buffer, int index,\n \t\t\t       short value, ByteOrder order)\n   {\n-    checkAvailableForWrite (buffer, index, 2);\n-\n     if (order == ByteOrder.LITTLE_ENDIAN)\n       {\n         buffer.put (index, (byte) value);\n@@ -153,7 +123,7 @@ public static void putShort (ByteBuffer buffer, int index,\n \n   public static int getInt (ByteBuffer buffer, ByteOrder order)\n   {\n-    checkRemainingForRead (buffer, 4);\n+    buffer.checkForUnderflow(4);\n \n     if (order == ByteOrder.LITTLE_ENDIAN)\n       {\n@@ -171,7 +141,7 @@ public static int getInt (ByteBuffer buffer, ByteOrder order)\n   \n   public static void putInt (ByteBuffer buffer, int value, ByteOrder order)\n   {\n-    checkRemainingForWrite (buffer, 4);\n+    buffer.checkForOverflow(4);\n \n     if (order == ByteOrder.LITTLE_ENDIAN)\n       {\n@@ -191,8 +161,6 @@ public static void putInt (ByteBuffer buffer, int value, ByteOrder order)\n   \n   public static int getInt (ByteBuffer buffer, int index, ByteOrder order)\n   {\n-    checkAvailableForRead (buffer, index, 4);\n-\n     if (order == ByteOrder.LITTLE_ENDIAN)\n       {\n         return ((buffer.get (index) & 0xff)\n@@ -210,8 +178,6 @@ public static int getInt (ByteBuffer buffer, int index, ByteOrder order)\n   public static void putInt (ByteBuffer buffer, int index,\n \t\t\t\t   int value, ByteOrder order)\n   {\n-    checkAvailableForWrite (buffer, index, 4);\n-\n     if (order == ByteOrder.LITTLE_ENDIAN)\n       {\n         buffer.put (index, (byte) value);\n@@ -230,7 +196,7 @@ public static void putInt (ByteBuffer buffer, int index,\n \n   public static long getLong (ByteBuffer buffer, ByteOrder order)\n   {\n-    checkRemainingForRead (buffer, 8);\n+    buffer.checkForUnderflow(8);\n \n     if (order == ByteOrder.LITTLE_ENDIAN)\n       {\n@@ -256,7 +222,7 @@ public static long getLong (ByteBuffer buffer, ByteOrder order)\n   \n   public static void putLong (ByteBuffer buffer, long value, ByteOrder order)\n   {\n-    checkRemainingForWrite (buffer, 8);\n+    buffer.checkForOverflow(8);\n \n     if (order == ByteOrder.LITTLE_ENDIAN)\n       {\n@@ -284,8 +250,6 @@ public static void putLong (ByteBuffer buffer, long value, ByteOrder order)\n   \n   public static long getLong (ByteBuffer buffer, int index, ByteOrder order)\n   {\n-    checkAvailableForRead (buffer, index, 8);\n-\n     if (order == ByteOrder.LITTLE_ENDIAN)\n       {\n         return ((buffer.get (index) & 0xff)\n@@ -311,8 +275,6 @@ public static long getLong (ByteBuffer buffer, int index, ByteOrder order)\n   public static void putLong (ByteBuffer buffer, int index,\n \t\t\t\t    long value, ByteOrder order)\n   {\n-    checkAvailableForWrite (buffer, index, 8);\n-\n     if (order == ByteOrder.LITTLE_ENDIAN)\n       {\n         buffer.put (index, (byte) value);"}, {"sha": "7734dbf12cdb4cbadd1a6c5e5d9bd7ef9a20bf44", "filename": "libjava/java/nio/ByteBufferImpl.java", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FByteBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FByteBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FByteBufferImpl.java?ref=23c41c08339da4bdf677ade01e17d940b7ce6201", "patch": "@@ -129,10 +129,16 @@ public boolean isDirect ()\n   }\n \n   /**\n-   * Relative get method. Reads the next <code>byte</code> from the buffer.\n+   * Reads the <code>byte</code> at this buffer's current position,\n+   * and then increments the position.\n+   *\n+   * @exception BufferUnderflowException If there are no remaining\n+   * <code>bytes</code> in this buffer.\n    */\n   public byte get ()\n   {\n+    checkForUnderflow();\n+\n     byte result = backing_buffer [position () + array_offset];\n     position (position () + 1);\n     return result;\n@@ -141,13 +147,15 @@ public byte get ()\n   /**\n    * Relative put method. Writes <code>value</code> to the next position\n    * in the buffer.\n-   * \n+   *\n+   * @exception BufferOverflowException If there is no remaining\n+   * space in this buffer.\n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n   public ByteBuffer put (byte value)\n   {\n-    if (readOnly)\n-      throw new ReadOnlyBufferException ();\n+    checkIfReadOnly();\n+    checkForOverflow();\n \n     int pos = position();\n     backing_buffer [pos + array_offset] = value;\n@@ -164,6 +172,8 @@ public ByteBuffer put (byte value)\n    */\n   public byte get (int index)\n   {\n+    checkIndex(index);\n+\n     return backing_buffer [index + array_offset];\n   }\n   \n@@ -177,9 +187,9 @@ public byte get (int index)\n    */\n   public ByteBuffer put (int index, byte value)\n   {\n-    if (readOnly)\n-      throw new ReadOnlyBufferException ();\n-    \t    \n+    checkIfReadOnly();\n+    checkIndex(index);\n+\n     backing_buffer [index + array_offset] = value;\n     return this;\n   }"}, {"sha": "e33c5651188917b5f94acb5a41b52a9c184c568e", "filename": "libjava/java/nio/CharBuffer.java", "status": "modified", "additions": 24, "deletions": 28, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FCharBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FCharBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FCharBuffer.java?ref=23c41c08339da4bdf677ade01e17d940b7ce6201", "patch": "@@ -137,8 +137,9 @@ final public static CharBuffer wrap(char[] array)\n   }\n   \n   /**\n-   * This method transfers <code>chars<code> from this buffer into the given\n-   * destination array.\n+   * This method transfers <code>char</code>s from this buffer into the given\n+   * destination array. Before the transfer, it checks if there are fewer than\n+   * length <code>char</code>s remaining in this buffer. \n    *\n    * @param dst The destination array\n    * @param offset The offset within the array of the first <code>char</code>\n@@ -147,12 +148,15 @@ final public static CharBuffer wrap(char[] array)\n    * must be non-negative and no larger than dst.length - offset.\n    *\n    * @exception BufferUnderflowException If there are fewer than length\n-   * <code>chars</code> remaining in this buffer.\n+   * <code>char</code>s remaining in this buffer.\n    * @exception IndexOutOfBoundsException If the preconditions on the offset\n    * and length parameters do not hold.\n    */\n   public CharBuffer get (char[] dst, int offset, int length)\n   {\n+    checkArraySize(dst.length, offset, length);\n+    checkForUnderflow(length);\n+\n     for (int i = offset; i < offset + length; i++)\n       {\n         dst [i] = get ();\n@@ -162,13 +166,13 @@ public CharBuffer get (char[] dst, int offset, int length)\n   }\n \n   /**\n-   * This method transfers <code>chars<code> from this buffer into the given\n+   * This method transfers <code>char</code>s from this buffer into the given\n    * destination array.\n    *\n    * @param dst The byte array to write into.\n    *\n    * @exception BufferUnderflowException If there are fewer than dst.length\n-   * <code>chars</code> remaining in this buffer.\n+   * <code>char</code>s remaining in this buffer.\n    */\n   public CharBuffer get (char[] dst)\n   {\n@@ -177,12 +181,13 @@ public CharBuffer get (char[] dst)\n \n   /**\n    * Writes the content of the the <code>CharBUFFER</code> src\n-   * into the buffer.\n+   * into the buffer. Before the transfer, it checks if there is fewer than\n+   * <code>src.remaining()</code> space remaining in this buffer.\n    *\n    * @param src The source data.\n    *\n    * @exception BufferOverflowException If there is insufficient space in this\n-   * buffer for the remaining <code>chars<code> in the source buffer.\n+   * buffer for the remaining <code>char</code>s in the source buffer.\n    * @exception IllegalArgumentException If the source buffer is this buffer.\n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n@@ -191,8 +196,7 @@ public CharBuffer put (CharBuffer src)\n     if (src == this)\n       throw new IllegalArgumentException ();\n \n-    if (src.remaining () > remaining ())\n-      throw new BufferOverflowException ();\n+    checkForOverflow(src.remaining());\n \n     if (src.remaining () > 0)\n       {\n@@ -206,7 +210,8 @@ public CharBuffer put (CharBuffer src)\n \n   /**\n    * Writes the content of the the <code>char array</code> src\n-   * into the buffer.\n+   * into the buffer. Before the transfer, it checks if there is fewer than\n+   * length space remaining in this buffer.\n    *\n    * @param src The array to copy into the buffer.\n    * @param offset The offset within the array of the first byte to be read;\n@@ -215,22 +220,15 @@ public CharBuffer put (CharBuffer src)\n    * must be non-negative and no larger than src.length - offset.\n    * \n    * @exception BufferOverflowException If there is insufficient space in this\n-   * buffer for the remaining <code>chars<code> in the source array.\n+   * buffer for the remaining <code>char</code>s in the source array.\n    * @exception IndexOutOfBoundsException If the preconditions on the offset\n    * and length parameters do not hold\n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n   public CharBuffer put (char[] src, int offset, int length)\n   {\n-    if (offset < 0\n-        || offset >= src.length\n-        || length < 0\n-        || length > (src.length - offset))\n-      throw new IndexOutOfBoundsException ();\n-     \n-    // Put nothing into this buffer when not enough space left.\n-    if (length > remaining ())\n-      throw new BufferOverflowException ();\n+    checkArraySize(src.length, offset, length);\n+    checkForOverflow(length);\n \t\t    \n     for (int i = offset; i < offset + length; i++)\n       put (src [i]);\n@@ -245,7 +243,7 @@ public CharBuffer put (char[] src, int offset, int length)\n    * @param src The array to copy into the buffer.\n    * \n    * @exception BufferOverflowException If there is insufficient space in this\n-   * buffer for the remaining <code>chars<code> in the source array.\n+   * buffer for the remaining <code>char</code>s in the source array.\n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n   public final CharBuffer put (char[] src)\n@@ -275,9 +273,8 @@ public final char[] array ()\n     if (backing_buffer == null)\n       throw new UnsupportedOperationException ();\n \n-    if (isReadOnly ())\n-      throw new ReadOnlyBufferException ();\n-    \n+    checkIfReadOnly();\n+\n     return backing_buffer;\n   }\n \n@@ -293,8 +290,7 @@ public final int arrayOffset ()\n     if (backing_buffer == null)\n       throw new UnsupportedOperationException ();\n \n-    if (isReadOnly ())\n-      throw new ReadOnlyBufferException ();\n+    checkIfReadOnly();\n     \n     return array_offset;\n   }\n@@ -362,7 +358,7 @@ public int compareTo (Object obj)\n    * and then increments the position.\n    *\n    * @exception BufferUnderflowException If there are no remaining\n-   * <code>chars</code> in this buffer.\n+   * <code>char</code>s in this buffer.\n    */\n   public abstract char get ();\n \n@@ -371,7 +367,7 @@ public int compareTo (Object obj)\n    * and then increments the position.\n    *\n    * @exception BufferOverflowException If there no remaining \n-   * <code>chars</code> in this buffer.\n+   * <code>char</code>s in this buffer.\n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n   public abstract CharBuffer put (char b);"}, {"sha": "2ca44d9445974f10572ce3a8a553ecc57ef094cc", "filename": "libjava/java/nio/CharBufferImpl.java", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FCharBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FCharBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FCharBufferImpl.java?ref=23c41c08339da4bdf677ade01e17d940b7ce6201", "patch": "@@ -1,5 +1,5 @@\n /* CharBufferImpl.java -- \n-   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -116,10 +116,16 @@ public CharSequence subSequence (int start, int end)\n   }\n   \n   /**\n-   * Relative get method. Reads the next <code>char</code> from the buffer.\n+   * Reads the <code>char</code> at this buffer's current position,\n+   * and then increments the position.\n+   *\n+   * @exception BufferUnderflowException If there are no remaining\n+   * <code>char</code>s in this buffer.\n    */\n   public char get ()\n   {\n+    checkForUnderflow();\n+\n     char result = backing_buffer [position ()];\n     position (position () + 1);\n     return result;\n@@ -133,8 +139,7 @@ public char get ()\n    */\n   public CharBuffer put (char value)\n   {\n-    if (readOnly)\n-      throw new ReadOnlyBufferException ();\n+    checkIfReadOnly();\n \t  \t    \n     backing_buffer [position ()] = value;\n     position (position () + 1);\n@@ -145,20 +150,20 @@ public CharBuffer put (char value)\n    * Absolute get method. Reads the <code>char</code> at position\n    * <code>index</code>.\n    *\n+   * @param index Position to read the <code>char</code> from.\n+   *\n    * @exception IndexOutOfBoundsException If index is negative or not smaller\n    * than the buffer's limit.\n    */\n   public char get (int index)\n   {\n-    if (index < 0\n-        || index >= limit ())\n-      throw new IndexOutOfBoundsException ();\n+    checkIndex(index);\n     \n     return backing_buffer [index];\n   }\n   \n   /**\n-   * Absolute put method. Writes <code>value</value> to position\n+   * Absolute put method. Writes <code>value</code> to position\n    * <code>index</code> in the buffer.\n    *\n    * @exception IndexOutOfBoundsException If index is negative or not smaller\n@@ -167,12 +172,8 @@ public char get (int index)\n    */\n   public CharBuffer put (int index, char value)\n   {\n-    if (index < 0\n-        || index >= limit ())\n-      throw new IndexOutOfBoundsException ();\n-    \n-    if (readOnly)\n-      throw new ReadOnlyBufferException ();\n+    checkIndex(index);\n+    checkIfReadOnly();\n     \t    \n     backing_buffer [index] = value;\n     return this;"}, {"sha": "3c02108debccc3f2d6920cb346c25500bcc151b8", "filename": "libjava/java/nio/CharViewBufferImpl.java", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FCharViewBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FCharViewBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FCharViewBufferImpl.java?ref=23c41c08339da4bdf677ade01e17d940b7ce6201", "patch": "@@ -66,6 +66,13 @@ public CharViewBufferImpl (ByteBuffer bb, int offset, int capacity,\n     this.endian = endian;\n   }\n \n+  /**\n+   * Reads the <code>char</code> at this buffer's current position,\n+   * and then increments the position.\n+   *\n+   * @exception BufferUnderflowException If there are no remaining\n+   * <code>char</code>s in this buffer.\n+   */\n   public char get ()\n   {\n     int p = position();\n@@ -74,6 +81,15 @@ public char get ()\n     return result;\n   }\n \n+  /**\n+   * Absolute get method. Reads the <code>char</code> at position\n+   * <code>index</code>.\n+   *\n+   * @param index Position to read the <code>char</code> from.\n+   *\n+   * @exception IndexOutOfBoundsException If index is negative or not smaller\n+   * than the buffer's limit.\n+   */\n   public char get (int index)\n   {\n     return ByteBufferHelper.getChar(bb, (index << 1) + offset, endian);"}, {"sha": "aad5dca1e5da61c8de596fd91b1a9d8a5c5861fd", "filename": "libjava/java/nio/DirectByteBufferImpl.java", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FDirectByteBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FDirectByteBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FDirectByteBufferImpl.java?ref=23c41c08339da4bdf677ade01e17d940b7ce6201", "patch": "@@ -86,18 +86,18 @@ protected void finalize () throws Throwable\n \n   public byte get ()\n   {\n+    checkForUnderflow();\n+\n     int pos = position();\n-    if (pos >= limit())\n-      throw new BufferUnderflowException();\n     byte result = getImpl (address, pos);\n     position (pos + 1);\n     return result;\n   }\n \n   public byte get (int index)\n   {\n-    if (index >= limit())\n-      throw new BufferUnderflowException();\n+    checkIndex(index);\n+\n     return getImpl (address, index);\n   }\n \n@@ -106,10 +106,8 @@ static native void getImpl (RawData address, int index,\n \n   public ByteBuffer get (byte[] dst, int offset, int length)\n   {\n-    if (offset < 0 || length < 0 || offset + length > dst.length)\n-      throw new IndexOutOfBoundsException ();\n-    if (length > remaining())\n-      throw new BufferUnderflowException();\n+    checkArraySize(dst.length, offset, length);\n+    checkForUnderflow(length);\n \n     int index = position();\n     getImpl(address, index, dst, offset, length);\n@@ -120,18 +118,20 @@ public ByteBuffer get (byte[] dst, int offset, int length)\n \n   public ByteBuffer put (byte value)\n   {\n+    checkIfReadOnly();\n+    checkForOverflow();\n+\n     int pos = position();\n-    if (pos >= limit())\n-      throw new BufferUnderflowException();\n     putImpl (address, pos, value);\n     position (pos + 1);\n     return this;\n   }\n   \n   public ByteBuffer put (int index, byte value)\n   {\n-    if (index >= limit())\n-      throw new BufferUnderflowException();\n+    checkIfReadOnly();\n+    checkIndex(index);\n+\n     putImpl (address, index, value);\n     return this;\n   }"}, {"sha": "820016b8308114cbb37592a4b627de629c65ec47", "filename": "libjava/java/nio/DoubleBuffer.java", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FDoubleBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FDoubleBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FDoubleBuffer.java?ref=23c41c08339da4bdf677ade01e17d940b7ce6201", "patch": "@@ -83,8 +83,9 @@ final public static DoubleBuffer wrap (double[] array)\n   }\n   \n   /**\n-   * This method transfers <code>doubles<code> from this buffer into the given\n-   * destination array.\n+   * This method transfers <code>double</code>s from this buffer into the given\n+   * destination array. Before the transfer, it checks if there are fewer than\n+   * length <code>double</code>s remaining in this buffer. \n    *\n    * @param dst The destination array\n    * @param offset The offset within the array of the first <code>double</code>\n@@ -93,12 +94,15 @@ final public static DoubleBuffer wrap (double[] array)\n    * must be non-negative and no larger than dst.length - offset.\n    *\n    * @exception BufferUnderflowException If there are fewer than length\n-   * <code>doubles</code> remaining in this buffer.\n+   * <code>double</code>s remaining in this buffer.\n    * @exception IndexOutOfBoundsException If the preconditions on the offset\n    * and length parameters do not hold.\n    */\n   public DoubleBuffer get (double[] dst, int offset, int length)\n   {\n+    checkArraySize(dst.length, offset, length);\n+    checkForUnderflow(length);\n+\n     for (int i = offset; i < offset + length; i++)\n       {\n         dst [i] = get ();\n@@ -108,13 +112,13 @@ public DoubleBuffer get (double[] dst, int offset, int length)\n   }\n \n   /**\n-   * This method transfers <code>doubles<code> from this buffer into the given\n+   * This method transfers <code>double</code>s from this buffer into the given\n    * destination array.\n    *\n    * @param dst The byte array to write into.\n    *\n    * @exception BufferUnderflowException If there are fewer than dst.length\n-   * <code>doubles</code> remaining in this buffer.\n+   * <code>double</code>s remaining in this buffer.\n    */\n   public DoubleBuffer get (double[] dst)\n   {\n@@ -123,12 +127,13 @@ public DoubleBuffer get (double[] dst)\n \n   /**\n    * Writes the content of the the <code>DoubleBUFFER</code> src\n-   * into the buffer.\n+   * into the buffer. Before the transfer, it checks if there is fewer than\n+   * <code>src.remaining()</code> space remaining in this buffer.\n    *\n    * @param src The source data.\n    *\n    * @exception BufferOverflowException If there is insufficient space in this\n-   * buffer for the remaining <code>doubles<code> in the source buffer.\n+   * buffer for the remaining <code>double</code>s in the source buffer.\n    * @exception IllegalArgumentException If the source buffer is this buffer.\n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n@@ -137,8 +142,7 @@ public DoubleBuffer put (DoubleBuffer src)\n     if (src == this)\n       throw new IllegalArgumentException ();\n \n-    if (src.remaining () > remaining ())\n-      throw new BufferOverflowException ();\n+    checkForOverflow(src.remaining ());\n \n     if (src.remaining () > 0)\n       {\n@@ -152,7 +156,8 @@ public DoubleBuffer put (DoubleBuffer src)\n \n   /**\n    * Writes the content of the the <code>double array</code> src\n-   * into the buffer.\n+   * into the buffer. Before the transfer, it checks if there is fewer than\n+   * length space remaining in this buffer.\n    *\n    * @param src The array to copy into the buffer.\n    * @param offset The offset within the array of the first byte to be read;\n@@ -161,13 +166,16 @@ public DoubleBuffer put (DoubleBuffer src)\n    * must be non-negative and no larger than src.length - offset.\n    * \n    * @exception BufferOverflowException If there is insufficient space in this\n-   * buffer for the remaining <code>doubles<code> in the source array.\n+   * buffer for the remaining <code>double</code>s in the source array.\n    * @exception IndexOutOfBoundsException If the preconditions on the offset\n    * and length parameters do not hold\n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n   public DoubleBuffer put (double[] src, int offset, int length)\n   {\n+    checkArraySize(src.length, offset, length);\n+    checkForOverflow(length);\n+\n     for (int i = offset; i < offset + length; i++)\n       put (src [i]);\n \n@@ -181,7 +189,7 @@ public DoubleBuffer put (double[] src, int offset, int length)\n    * @param src The array to copy into the buffer.\n    * \n    * @exception BufferOverflowException If there is insufficient space in this\n-   * buffer for the remaining <code>doubles<code> in the source array.\n+   * buffer for the remaining <code>double</code>s in the source array.\n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n   public final DoubleBuffer put (double[] src)\n@@ -211,8 +219,7 @@ public final double[] array ()\n     if (backing_buffer == null)\n       throw new UnsupportedOperationException ();\n \n-    if (isReadOnly ())\n-      throw new ReadOnlyBufferException ();\n+    checkIfReadOnly();\n     \n     return backing_buffer;\n   }\n@@ -229,8 +236,7 @@ public final int arrayOffset ()\n     if (backing_buffer == null)\n       throw new UnsupportedOperationException ();\n \n-    if (isReadOnly ())\n-      throw new ReadOnlyBufferException ();\n+    checkIfReadOnly();\n     \n     return array_offset;\n   }\n@@ -298,7 +304,7 @@ public int compareTo (Object obj)\n    * and then increments the position.\n    *\n    * @exception BufferUnderflowException If there are no remaining\n-   * <code>doubles</code> in this buffer.\n+   * <code>double</code>s in this buffer.\n    */\n   public abstract double get ();\n \n@@ -307,7 +313,7 @@ public int compareTo (Object obj)\n    * and then increments the position.\n    *\n    * @exception BufferOverflowException If there no remaining \n-   * <code>doubles</code> in this buffer.\n+   * <code>double</code>s in this buffer.\n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n   public abstract DoubleBuffer put (double b);"}, {"sha": "504ee8d61b0e5b2cd90d4c48d43f922ab06e728d", "filename": "libjava/java/nio/DoubleBufferImpl.java", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FDoubleBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FDoubleBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FDoubleBufferImpl.java?ref=23c41c08339da4bdf677ade01e17d940b7ce6201", "patch": "@@ -1,5 +1,5 @@\n /* DoubleBufferImpl.java -- \n-   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -98,10 +98,16 @@ public boolean isDirect ()\n   }\n \n   /**\n-   * Relative get method. Reads the next <code>double</code> from the buffer.\n+   * Reads the <code>double</code> at this buffer's current position,\n+   * and then increments the position.\n+   *\n+   * @exception BufferUnderflowException If there are no remaining\n+   * <code>double</code>s in this buffer.\n    */\n   public double get ()\n   {\n+    checkForUnderflow();\n+\n     double result = backing_buffer [position ()];\n     position (position () + 1);\n     return result;\n@@ -110,13 +116,15 @@ public double get ()\n   /**\n    * Relative put method. Writes <code>value</code> to the next position\n    * in the buffer.\n-   * \n+   *\n+   * @exception BufferOverflowException If there no remaining \n+   * space in this buffer.\n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n   public DoubleBuffer put (double value)\n   {\n-    if (readOnly)\n-      throw new ReadOnlyBufferException ();\n+    checkIfReadOnly();\n+    checkForOverflow();\n \t  \t    \n     backing_buffer [position ()] = value;\n     position (position () + 1);\n@@ -132,6 +140,8 @@ public DoubleBuffer put (double value)\n    */\n   public double get (int index)\n   {\n+    checkIndex(index);\n+\n     return backing_buffer [index];\n   }\n   \n@@ -145,9 +155,9 @@ public double get (int index)\n    */\n   public DoubleBuffer put (int index, double value)\n   {\n-    if (readOnly)\n-      throw new ReadOnlyBufferException ();\n-    \t    \n+    checkIfReadOnly();\n+    checkIndex(index);\n+\n     backing_buffer [index] = value;\n     return this;\n   }"}, {"sha": "d23b14ab472cc6b49997b299497543b6222007f3", "filename": "libjava/java/nio/DoubleViewBufferImpl.java", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FDoubleViewBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FDoubleViewBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FDoubleViewBufferImpl.java?ref=23c41c08339da4bdf677ade01e17d940b7ce6201", "patch": "@@ -66,6 +66,13 @@ public DoubleViewBufferImpl (ByteBuffer bb, int offset, int capacity,\n     this.endian = endian;\n   }\n \n+  /**\n+   * Reads the <code>double</code> at this buffer's current position,\n+   * and then increments the position.\n+   *\n+   * @exception BufferUnderflowException If there are no remaining\n+   * <code>double</code>s in this buffer.\n+   */\n   public double get ()\n   {\n     int p = position();\n@@ -74,6 +81,13 @@ public double get ()\n     return result;\n   }\n \n+  /**\n+   * Absolute get method. Reads the <code>double</code> at position\n+   * <code>index</code>.\n+   *\n+   * @exception IndexOutOfBoundsException If index is negative or not smaller\n+   * than the buffer's limit.\n+   */\n   public double get (int index)\n   {\n     return ByteBufferHelper.getDouble(bb, (index << 3) + offset, endian);"}, {"sha": "2425f0c71d6c48ad817c2b9edef8d10483e92f2f", "filename": "libjava/java/nio/FloatBuffer.java", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FFloatBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FFloatBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FFloatBuffer.java?ref=23c41c08339da4bdf677ade01e17d940b7ce6201", "patch": "@@ -83,8 +83,9 @@ final public static FloatBuffer wrap (float[] array)\n   }\n   \n   /**\n-   * This method transfers <code>floats<code> from this buffer into the given\n-   * destination array.\n+   * This method transfers <code>float</code>s from this buffer into the given\n+   * destination array. Before the transfer, it checks if there are fewer than\n+   * length <code>float</code>s remaining in this buffer. \n    *\n    * @param dst The destination array\n    * @param offset The offset within the array of the first <code>float</code>\n@@ -93,12 +94,15 @@ final public static FloatBuffer wrap (float[] array)\n    * must be non-negative and no larger than dst.length - offset.\n    *\n    * @exception BufferUnderflowException If there are fewer than length\n-   * <code>floats</code> remaining in this buffer.\n+   * <code>float</code>s remaining in this buffer.\n    * @exception IndexOutOfBoundsException If the preconditions on the offset\n    * and length parameters do not hold.\n    */\n   public FloatBuffer get (float[] dst, int offset, int length)\n   {\n+    checkArraySize(dst.length, offset, length);\n+    checkForUnderflow(length);\n+\n     for (int i = offset; i < offset + length; i++)\n       {\n         dst [i] = get ();\n@@ -108,13 +112,13 @@ public FloatBuffer get (float[] dst, int offset, int length)\n   }\n \n   /**\n-   * This method transfers <code>floats<code> from this buffer into the given\n+   * This method transfers <code>float</code>s from this buffer into the given\n    * destination array.\n    *\n    * @param dst The byte array to write into.\n    *\n    * @exception BufferUnderflowException If there are fewer than dst.length\n-   * <code>floats</code> remaining in this buffer.\n+   * <code>float</code>s remaining in this buffer.\n    */\n   public FloatBuffer get (float[] dst)\n   {\n@@ -123,12 +127,13 @@ public FloatBuffer get (float[] dst)\n \n   /**\n    * Writes the content of the the <code>FloatBUFFER</code> src\n-   * into the buffer.\n+   * into the buffer. Before the transfer, it checks if there is fewer than\n+   * <code>src.remaining()</code> space remaining in this buffer.\n    *\n    * @param src The source data.\n    *\n    * @exception BufferOverflowException If there is insufficient space in this\n-   * buffer for the remaining <code>floats<code> in the source buffer.\n+   * buffer for the remaining <code>float</code>s in the source buffer.\n    * @exception IllegalArgumentException If the source buffer is this buffer.\n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n@@ -137,8 +142,7 @@ public FloatBuffer put (FloatBuffer src)\n     if (src == this)\n       throw new IllegalArgumentException ();\n \n-    if (src.remaining () > remaining ())\n-      throw new BufferOverflowException ();\n+    checkForOverflow(src.remaining());\n \n     if (src.remaining () > 0)\n       {\n@@ -152,7 +156,8 @@ public FloatBuffer put (FloatBuffer src)\n \n   /**\n    * Writes the content of the the <code>float array</code> src\n-   * into the buffer.\n+   * into the buffer. Before the transfer, it checks if there is fewer than\n+   * length space remaining in this buffer.\n    *\n    * @param src The array to copy into the buffer.\n    * @param offset The offset within the array of the first byte to be read;\n@@ -161,13 +166,16 @@ public FloatBuffer put (FloatBuffer src)\n    * must be non-negative and no larger than src.length - offset.\n    * \n    * @exception BufferOverflowException If there is insufficient space in this\n-   * buffer for the remaining <code>floats<code> in the source array.\n+   * buffer for the remaining <code>float</code>s in the source array.\n    * @exception IndexOutOfBoundsException If the preconditions on the offset\n    * and length parameters do not hold\n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n   public FloatBuffer put (float[] src, int offset, int length)\n   {\n+    checkArraySize(src.length, offset, length);\n+    checkForOverflow(length);\n+\n     for (int i = offset; i < offset + length; i++)\n       put (src [i]);\n \n@@ -181,7 +189,7 @@ public FloatBuffer put (float[] src, int offset, int length)\n    * @param src The array to copy into the buffer.\n    * \n    * @exception BufferOverflowException If there is insufficient space in this\n-   * buffer for the remaining <code>floats<code> in the source array.\n+   * buffer for the remaining <code>float</code>s in the source array.\n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n   public final FloatBuffer put (float[] src)\n@@ -211,8 +219,7 @@ public final float[] array ()\n     if (backing_buffer == null)\n       throw new UnsupportedOperationException ();\n \n-    if (isReadOnly ())\n-      throw new ReadOnlyBufferException ();\n+    checkIfReadOnly();\n     \n     return backing_buffer;\n   }\n@@ -229,8 +236,7 @@ public final int arrayOffset ()\n     if (backing_buffer == null)\n       throw new UnsupportedOperationException ();\n \n-    if (isReadOnly ())\n-      throw new ReadOnlyBufferException ();\n+    checkIfReadOnly();\n     \n     return array_offset;\n   }\n@@ -298,7 +304,7 @@ public int compareTo (Object obj)\n    * and then increments the position.\n    *\n    * @exception BufferUnderflowException If there are no remaining\n-   * <code>floats</code> in this buffer.\n+   * <code>float</code>s in this buffer.\n    */\n   public abstract float get ();\n \n@@ -307,7 +313,7 @@ public int compareTo (Object obj)\n    * and then increments the position.\n    *\n    * @exception BufferOverflowException If there no remaining \n-   * <code>floats</code> in this buffer.\n+   * <code>float</code>s in this buffer.\n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n   public abstract FloatBuffer put (float b);"}, {"sha": "a9eb7c1de8abcd629bdb61eabd81b745fe44e9e1", "filename": "libjava/java/nio/FloatBufferImpl.java", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FFloatBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FFloatBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FFloatBufferImpl.java?ref=23c41c08339da4bdf677ade01e17d940b7ce6201", "patch": "@@ -1,5 +1,5 @@\n /* FloatBufferImpl.java -- \n-   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -98,10 +98,16 @@ public boolean isDirect ()\n   }\n \n   /**\n-   * Relative get method. Reads the next <code>float</code> from the buffer.\n+   * Reads the <code>float</code> at this buffer's current position,\n+   * and then increments the position.\n+   *\n+   * @exception BufferUnderflowException If there are no remaining\n+   * <code>floats</code> in this buffer.\n    */\n   public float get ()\n   {\n+    checkForUnderflow();\n+\n     float result = backing_buffer [position ()];\n     position (position () + 1);\n     return result;\n@@ -111,13 +117,15 @@ public float get ()\n    * Relative put method. Writes <code>value</code> to the next position\n    * in the buffer.\n    * \n+   * @exception BufferOverflowException If there no remaining \n+   * space in this buffer.\n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n   public FloatBuffer put (float value)\n   {\n-    if (readOnly)\n-      throw new ReadOnlyBufferException ();\n-\t  \t    \n+    checkIfReadOnly();\n+    checkForOverflow();\n+\n     backing_buffer [position ()] = value;\n     position (position () + 1);\n     return this;\n@@ -132,6 +140,8 @@ public FloatBuffer put (float value)\n    */\n   public float get (int index)\n   {\n+    checkIndex(index);\n+\n     return backing_buffer [index];\n   }\n   \n@@ -145,9 +155,9 @@ public float get (int index)\n    */\n   public FloatBuffer put (int index, float value)\n   {\n-    if (readOnly)\n-      throw new ReadOnlyBufferException ();\n-    \t    \n+    checkIfReadOnly();\n+    checkIndex(index);\n+\n     backing_buffer [index] = value;\n     return this;\n   }"}, {"sha": "40b7339dd4eaa33b16a6b5290f04206aa912c77a", "filename": "libjava/java/nio/FloatViewBufferImpl.java", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FFloatViewBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FFloatViewBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FFloatViewBufferImpl.java?ref=23c41c08339da4bdf677ade01e17d940b7ce6201", "patch": "@@ -66,6 +66,13 @@ public FloatViewBufferImpl (ByteBuffer bb, int offset, int capacity,\n     this.endian = endian;\n   }\n \n+  /**\n+   * Reads the <code>float</code> at this buffer's current position,\n+   * and then increments the position.\n+   *\n+   * @exception BufferUnderflowException If there are no remaining\n+   * <code>floats</code> in this buffer.\n+   */\n   public float get ()\n   {\n     int p = position();\n@@ -74,6 +81,13 @@ public float get ()\n     return result;\n   }\n \n+  /**\n+   * Absolute get method. Reads the <code>float</code> at position\n+   * <code>index</code>.\n+   *\n+   * @exception IndexOutOfBoundsException If index is negative or not smaller\n+   * than the buffer's limit.\n+   */\n   public float get (int index)\n   {\n     return ByteBufferHelper.getFloat(bb, (index << 2) + offset, endian);"}, {"sha": "825132430e6b8ab642ab3ea24f68c901501c2454", "filename": "libjava/java/nio/IntBuffer.java", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FIntBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FIntBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FIntBuffer.java?ref=23c41c08339da4bdf677ade01e17d940b7ce6201", "patch": "@@ -83,8 +83,9 @@ final public static IntBuffer wrap (int[] array)\n   }\n   \n   /**\n-   * This method transfers <code>ints<code> from this buffer into the given\n-   * destination array.\n+   * This method transfers <code>int</code>s from this buffer into the given\n+   * destination array. Before the transfer, it checks if there are fewer than\n+   * length <code>int</code>s remaining in this buffer. \n    *\n    * @param dst The destination array\n    * @param offset The offset within the array of the first <code>int</code>\n@@ -93,12 +94,15 @@ final public static IntBuffer wrap (int[] array)\n    * must be non-negative and no larger than dst.length - offset.\n    *\n    * @exception BufferUnderflowException If there are fewer than length\n-   * <code>ints</code> remaining in this buffer.\n+   * <code>int</code>s remaining in this buffer.\n    * @exception IndexOutOfBoundsException If the preconditions on the offset\n    * and length parameters do not hold.\n    */\n   public IntBuffer get (int[] dst, int offset, int length)\n   {\n+    checkArraySize(dst.length, offset, length);\n+    checkForUnderflow(length);\n+\n     for (int i = offset; i < offset + length; i++)\n       {\n         dst [i] = get ();\n@@ -108,13 +112,13 @@ public IntBuffer get (int[] dst, int offset, int length)\n   }\n \n   /**\n-   * This method transfers <code>ints<code> from this buffer into the given\n+   * This method transfers <code>int</code>s from this buffer into the given\n    * destination array.\n    *\n    * @param dst The byte array to write into.\n    *\n    * @exception BufferUnderflowException If there are fewer than dst.length\n-   * <code>ints</code> remaining in this buffer.\n+   * <code>int</code>s remaining in this buffer.\n    */\n   public IntBuffer get (int[] dst)\n   {\n@@ -123,12 +127,13 @@ public IntBuffer get (int[] dst)\n \n   /**\n    * Writes the content of the the <code>IntBUFFER</code> src\n-   * into the buffer.\n+   * into the buffer. Before the transfer, it checks if there is fewer than\n+   * <code>src.remaining()</code> space remaining in this buffer.\n    *\n    * @param src The source data.\n    *\n    * @exception BufferOverflowException If there is insufficient space in this\n-   * buffer for the remaining <code>ints<code> in the source buffer.\n+   * buffer for the remaining <code>int</code>s in the source buffer.\n    * @exception IllegalArgumentException If the source buffer is this buffer.\n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n@@ -137,8 +142,7 @@ public IntBuffer put (IntBuffer src)\n     if (src == this)\n       throw new IllegalArgumentException ();\n \n-    if (src.remaining () > remaining ())\n-      throw new BufferOverflowException ();\n+    checkForOverflow(src.remaining ());\n \n     if (src.remaining () > 0)\n       {\n@@ -152,7 +156,8 @@ public IntBuffer put (IntBuffer src)\n \n   /**\n    * Writes the content of the the <code>int array</code> src\n-   * into the buffer.\n+   * into the buffer. Before the transfer, it checks if there is fewer than\n+   * length space remaining in this buffer.\n    *\n    * @param src The array to copy into the buffer.\n    * @param offset The offset within the array of the first byte to be read;\n@@ -161,13 +166,16 @@ public IntBuffer put (IntBuffer src)\n    * must be non-negative and no larger than src.length - offset.\n    * \n    * @exception BufferOverflowException If there is insufficient space in this\n-   * buffer for the remaining <code>ints<code> in the source array.\n+   * buffer for the remaining <code>int</code>s in the source array.\n    * @exception IndexOutOfBoundsException If the preconditions on the offset\n    * and length parameters do not hold\n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n   public IntBuffer put (int[] src, int offset, int length)\n   {\n+    checkArraySize(src.length, offset, length);\n+    checkForOverflow(length);\n+\n     for (int i = offset; i < offset + length; i++)\n       put (src [i]);\n \n@@ -181,7 +189,7 @@ public IntBuffer put (int[] src, int offset, int length)\n    * @param src The array to copy into the buffer.\n    * \n    * @exception BufferOverflowException If there is insufficient space in this\n-   * buffer for the remaining <code>ints<code> in the source array.\n+   * buffer for the remaining <code>int</code>s in the source array.\n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n   public final IntBuffer put (int[] src)\n@@ -211,8 +219,7 @@ public final int[] array ()\n     if (backing_buffer == null)\n       throw new UnsupportedOperationException ();\n \n-    if (isReadOnly ())\n-      throw new ReadOnlyBufferException ();\n+    checkIfReadOnly();\n     \n     return backing_buffer;\n   }\n@@ -229,8 +236,7 @@ public final int arrayOffset ()\n     if (backing_buffer == null)\n       throw new UnsupportedOperationException ();\n \n-    if (isReadOnly ())\n-      throw new ReadOnlyBufferException ();\n+    checkIfReadOnly();\n     \n     return array_offset;\n   }\n@@ -298,7 +304,7 @@ public int compareTo (Object obj)\n    * and then increments the position.\n    *\n    * @exception BufferUnderflowException If there are no remaining\n-   * <code>ints</code> in this buffer.\n+   * <code>int</code>s in this buffer.\n    */\n   public abstract int get ();\n \n@@ -307,7 +313,7 @@ public int compareTo (Object obj)\n    * and then increments the position.\n    *\n    * @exception BufferOverflowException If there no remaining \n-   * <code>ints</code> in this buffer.\n+   * <code>int</code>s in this buffer.\n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n   public abstract IntBuffer put (int b);"}, {"sha": "f68dd92fa046c0bd04e8f674d7a7e87a2095f49c", "filename": "libjava/java/nio/IntBufferImpl.java", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FIntBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FIntBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FIntBufferImpl.java?ref=23c41c08339da4bdf677ade01e17d940b7ce6201", "patch": "@@ -1,5 +1,5 @@\n /* IntBufferImpl.java -- \n-   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -98,10 +98,16 @@ public boolean isDirect ()\n   }\n \n   /**\n-   * Relative get method. Reads the next <code>int</code> from the buffer.\n+   * Reads the <code>int</code> at this buffer's current position,\n+   * and then increments the position.\n+   *\n+   * @exception BufferUnderflowException If there are no remaining\n+   * <code>ints</code> in this buffer.\n    */\n   public int get ()\n   {\n+    checkForUnderflow();\n+\n     int result = backing_buffer [position ()];\n     position (position () + 1);\n     return result;\n@@ -110,14 +116,16 @@ public int get ()\n   /**\n    * Relative put method. Writes <code>value</code> to the next position\n    * in the buffer.\n-   * \n+   *\n+   * @exception BufferOverflowException If there no remaining \n+   * space in this buffer.\n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n   public IntBuffer put (int value)\n   {\n-    if (readOnly)\n-      throw new ReadOnlyBufferException ();\n-\t  \t    \n+    checkIfReadOnly();\n+    checkForOverflow();\n+\n     backing_buffer [position ()] = value;\n     position (position () + 1);\n     return this;\n@@ -132,6 +140,8 @@ public IntBuffer put (int value)\n    */\n   public int get (int index)\n   {\n+    checkIndex(index);\n+\n     return backing_buffer [index];\n   }\n   \n@@ -145,9 +155,9 @@ public int get (int index)\n    */\n   public IntBuffer put (int index, int value)\n   {\n-    if (readOnly)\n-      throw new ReadOnlyBufferException ();\n-    \t    \n+    checkIfReadOnly();\n+    checkIndex(index);\n+\n     backing_buffer [index] = value;\n     return this;\n   }"}, {"sha": "1f3f9348aaee393e2c29fad8ce9001c0a19a8f79", "filename": "libjava/java/nio/IntViewBufferImpl.java", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FIntViewBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FIntViewBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FIntViewBufferImpl.java?ref=23c41c08339da4bdf677ade01e17d940b7ce6201", "patch": "@@ -66,6 +66,13 @@ public IntViewBufferImpl (ByteBuffer bb, int offset, int capacity,\n     this.endian = endian;\n   }\n \n+  /**\n+   * Reads the <code>int</code> at this buffer's current position,\n+   * and then increments the position.\n+   *\n+   * @exception BufferUnderflowException If there are no remaining\n+   * <code>ints</code> in this buffer.\n+   */\n   public int get ()\n   {\n     int p = position();\n@@ -74,6 +81,13 @@ public int get ()\n     return result;\n   }\n \n+  /**\n+   * Absolute get method. Reads the <code>int</code> at position\n+   * <code>index</code>.\n+   *\n+   * @exception IndexOutOfBoundsException If index is negative or not smaller\n+   * than the buffer's limit.\n+   */\n   public int get (int index)\n   {\n     return ByteBufferHelper.getInt(bb, (index << 2) + offset, endian);"}, {"sha": "f22ab14de2fd91f84c530258bbb0f4910d1a0430", "filename": "libjava/java/nio/LongBuffer.java", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FLongBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FLongBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FLongBuffer.java?ref=23c41c08339da4bdf677ade01e17d940b7ce6201", "patch": "@@ -83,8 +83,9 @@ final public static LongBuffer wrap (long[] array)\n   }\n   \n   /**\n-   * This method transfers <code>longs<code> from this buffer into the given\n-   * destination array.\n+   * This method transfers <code>long</code>s from this buffer into the given\n+   * destination array. Before the transfer, it checks if there are fewer than\n+   * length <code>long</code>s remaining in this buffer. \n    *\n    * @param dst The destination array\n    * @param offset The offset within the array of the first <code>long</code>\n@@ -93,12 +94,15 @@ final public static LongBuffer wrap (long[] array)\n    * must be non-negative and no larger than dst.length - offset.\n    *\n    * @exception BufferUnderflowException If there are fewer than length\n-   * <code>longs</code> remaining in this buffer.\n+   * <code>long</code>s remaining in this buffer.\n    * @exception IndexOutOfBoundsException If the preconditions on the offset\n    * and length parameters do not hold.\n    */\n   public LongBuffer get (long[] dst, int offset, int length)\n   {\n+    checkArraySize(dst.length, offset, length);\n+    checkForUnderflow(length);\n+\n     for (int i = offset; i < offset + length; i++)\n       {\n         dst [i] = get ();\n@@ -108,13 +112,13 @@ public LongBuffer get (long[] dst, int offset, int length)\n   }\n \n   /**\n-   * This method transfers <code>longs<code> from this buffer into the given\n+   * This method transfers <code>long</code>s from this buffer into the given\n    * destination array.\n    *\n    * @param dst The byte array to write into.\n    *\n    * @exception BufferUnderflowException If there are fewer than dst.length\n-   * <code>longs</code> remaining in this buffer.\n+   * <code>long</code>s remaining in this buffer.\n    */\n   public LongBuffer get (long[] dst)\n   {\n@@ -123,12 +127,13 @@ public LongBuffer get (long[] dst)\n \n   /**\n    * Writes the content of the the <code>LongBUFFER</code> src\n-   * into the buffer.\n+   * into the buffer. Before the transfer, it checks if there is fewer than\n+   * <code>src.remaining()</code> space remaining in this buffer.\n    *\n    * @param src The source data.\n    *\n    * @exception BufferOverflowException If there is insufficient space in this\n-   * buffer for the remaining <code>longs<code> in the source buffer.\n+   * buffer for the remaining <code>long</code>s in the source buffer.\n    * @exception IllegalArgumentException If the source buffer is this buffer.\n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n@@ -137,8 +142,7 @@ public LongBuffer put (LongBuffer src)\n     if (src == this)\n       throw new IllegalArgumentException ();\n \n-    if (src.remaining () > remaining ())\n-      throw new BufferOverflowException ();\n+    checkForOverflow(src.remaining ());\n \n     if (src.remaining () > 0)\n       {\n@@ -152,7 +156,8 @@ public LongBuffer put (LongBuffer src)\n \n   /**\n    * Writes the content of the the <code>long array</code> src\n-   * into the buffer.\n+   * into the buffer. Before the transfer, it checks if there is fewer than\n+   * length space remaining in this buffer.\n    *\n    * @param src The array to copy into the buffer.\n    * @param offset The offset within the array of the first byte to be read;\n@@ -161,13 +166,16 @@ public LongBuffer put (LongBuffer src)\n    * must be non-negative and no larger than src.length - offset.\n    * \n    * @exception BufferOverflowException If there is insufficient space in this\n-   * buffer for the remaining <code>longs<code> in the source array.\n+   * buffer for the remaining <code>long</code>s in the source array.\n    * @exception IndexOutOfBoundsException If the preconditions on the offset\n    * and length parameters do not hold\n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n   public LongBuffer put (long[] src, int offset, int length)\n   {\n+    checkArraySize(src.length, offset, length);\n+    checkForOverflow(length);\n+\n     for (int i = offset; i < offset + length; i++)\n       put (src [i]);\n \n@@ -181,7 +189,7 @@ public LongBuffer put (long[] src, int offset, int length)\n    * @param src The array to copy into the buffer.\n    * \n    * @exception BufferOverflowException If there is insufficient space in this\n-   * buffer for the remaining <code>longs<code> in the source array.\n+   * buffer for the remaining <code>long</code>s in the source array.\n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n   public final LongBuffer put (long[] src)\n@@ -211,8 +219,7 @@ public final long[] array ()\n     if (backing_buffer == null)\n       throw new UnsupportedOperationException ();\n \n-    if (isReadOnly ())\n-      throw new ReadOnlyBufferException ();\n+    checkIfReadOnly();\n     \n     return backing_buffer;\n   }\n@@ -229,8 +236,7 @@ public final int arrayOffset ()\n     if (backing_buffer == null)\n       throw new UnsupportedOperationException ();\n \n-    if (isReadOnly ())\n-      throw new ReadOnlyBufferException ();\n+    checkIfReadOnly();\n     \n     return array_offset;\n   }\n@@ -298,7 +304,7 @@ public int compareTo (Object obj)\n    * and then increments the position.\n    *\n    * @exception BufferUnderflowException If there are no remaining\n-   * <code>longs</code> in this buffer.\n+   * <code>long</code>s in this buffer.\n    */\n   public abstract long get ();\n \n@@ -307,7 +313,7 @@ public int compareTo (Object obj)\n    * and then increments the position.\n    *\n    * @exception BufferOverflowException If there no remaining \n-   * <code>longs</code> in this buffer.\n+   * <code>long</code>s in this buffer.\n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n   public abstract LongBuffer put (long b);"}, {"sha": "df720eec62c62b5877e5d610a9c029061b31f040", "filename": "libjava/java/nio/LongBufferImpl.java", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FLongBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FLongBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FLongBufferImpl.java?ref=23c41c08339da4bdf677ade01e17d940b7ce6201", "patch": "@@ -1,5 +1,5 @@\n /* LongBufferImpl.java -- \n-   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -98,10 +98,16 @@ public boolean isDirect ()\n   }\n \n   /**\n-   * Relative get method. Reads the next <code>long</code> from the buffer.\n+   * Reads the <code>long</code> at this buffer's current position,\n+   * and then increments the position.\n+   *\n+   * @exception BufferUnderflowException If there are no remaining\n+   * <code>longs</code> in this buffer.\n    */\n   public long get ()\n   {\n+    checkForUnderflow();\n+\n     long result = backing_buffer [position ()];\n     position (position () + 1);\n     return result;\n@@ -110,14 +116,16 @@ public long get ()\n   /**\n    * Relative put method. Writes <code>value</code> to the next position\n    * in the buffer.\n-   * \n+   *\n+   * @exception BufferOverflowException If there is insufficient space in this\n+   * buffer.\n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n   public LongBuffer put (long value)\n   {\n-    if (readOnly)\n-      throw new ReadOnlyBufferException ();\n-\t  \t    \n+    checkIfReadOnly();\n+    checkForOverflow();\n+\n     backing_buffer [position ()] = value;\n     position (position () + 1);\n     return this;\n@@ -132,6 +140,8 @@ public LongBuffer put (long value)\n    */\n   public long get (int index)\n   {\n+    checkIndex(index);\n+\n     return backing_buffer [index];\n   }\n   \n@@ -145,9 +155,9 @@ public long get (int index)\n    */\n   public LongBuffer put (int index, long value)\n   {\n-    if (readOnly)\n-      throw new ReadOnlyBufferException ();\n-    \t    \n+    checkIfReadOnly();\n+    checkIndex(index);\n+\n     backing_buffer [index] = value;\n     return this;\n   }"}, {"sha": "8762578a7bf628ea706504c267a9de35909439f4", "filename": "libjava/java/nio/LongViewBufferImpl.java", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FLongViewBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FLongViewBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FLongViewBufferImpl.java?ref=23c41c08339da4bdf677ade01e17d940b7ce6201", "patch": "@@ -66,6 +66,13 @@ public LongViewBufferImpl (ByteBuffer bb, int offset, int capacity,\n     this.endian = endian;\n   }\n \n+  /**\n+   * Reads the <code>long</code> at this buffer's current position,\n+   * and then increments the position.\n+   *\n+   * @exception BufferUnderflowException If there are no remaining\n+   * <code>longs</code> in this buffer.\n+   */\n   public long get ()\n   {\n     int p = position();\n@@ -74,6 +81,13 @@ public long get ()\n     return result;\n   }\n \n+  /**\n+   * Absolute get method. Reads the <code>long</code> at position\n+   * <code>index</code>.\n+   *\n+   * @exception IndexOutOfBoundsException If index is negative or not smaller\n+   * than the buffer's limit.\n+   */\n   public long get (int index)\n   {\n     return ByteBufferHelper.getLong(bb, (index << 3) + offset, endian);"}, {"sha": "5ed579bb0e96b5ba71496f46be1a9e67eb6987f8", "filename": "libjava/java/nio/MappedByteBufferImpl.java", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FMappedByteBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FMappedByteBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FMappedByteBufferImpl.java?ref=23c41c08339da4bdf677ade01e17d940b7ce6201", "patch": "@@ -68,37 +68,36 @@ public boolean isReadOnly ()\n   \n   public byte get ()\n   {\n+    checkForUnderflow();\n+\n     int pos = position();\n-    if (pos >= limit())\n-      throw new BufferUnderflowException();\n     byte result = DirectByteBufferImpl.getImpl(address, pos);\n     position (pos + 1);\n     return result;\n   }\n \n   public ByteBuffer put (byte value)\n   {\n+    checkIfReadOnly();\n+    checkForOverflow();\n+\n     int pos = position();\n-    if (pos >= limit())\n-      throw new BufferUnderflowException();\n     DirectByteBufferImpl.putImpl(address, pos, value);\n     position(pos + 1);\n     return this;\n   }\n \n   public byte get (int index)\n   {\n-    if (index >= limit())\n-      throw new BufferUnderflowException();\n+    checkIndex(index);\n+\n     return DirectByteBufferImpl.getImpl(address, index);\n   }\n \n   public ByteBuffer get (byte[] dst, int offset, int length)\n   {\n-    if (offset < 0 || length < 0 || offset + length > dst.length)\n-      throw new IndexOutOfBoundsException ();\n-    if (length > remaining())\n-      throw new BufferUnderflowException();\n+    checkArraySize(dst.length, offset, length);\n+    checkForUnderflow(length);\n \n     int index = position();\n     DirectByteBufferImpl.getImpl(address, index, dst, offset, length);\n@@ -109,8 +108,9 @@ public ByteBuffer get (byte[] dst, int offset, int length)\n \n   public ByteBuffer put (int index, byte value)\n   {\n-    if (index >= limit())\n-      throw new BufferUnderflowException();\n+    checkIfReadOnly();\n+    checkIndex(index);\n+\n     DirectByteBufferImpl.putImpl(address, index, value);\n     return this;\n   }"}, {"sha": "03ddb73e5aee6fb2a5db4f99b97f508cf013b4c1", "filename": "libjava/java/nio/ShortBuffer.java", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FShortBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FShortBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FShortBuffer.java?ref=23c41c08339da4bdf677ade01e17d940b7ce6201", "patch": "@@ -83,8 +83,9 @@ final public static ShortBuffer wrap (short[] array)\n   }\n   \n   /**\n-   * This method transfers <code>shorts<code> from this buffer into the given\n-   * destination array.\n+   * This method transfers <code>short</code>s from this buffer into the given\n+   * destination array. Before the transfer, it checks if there are fewer than\n+   * length <code>short</code>s remaining in this buffer. \n    *\n    * @param dst The destination array\n    * @param offset The offset within the array of the first <code>short</code>\n@@ -93,12 +94,15 @@ final public static ShortBuffer wrap (short[] array)\n    * must be non-negative and no larger than dst.length - offset.\n    *\n    * @exception BufferUnderflowException If there are fewer than length\n-   * <code>shorts</code> remaining in this buffer.\n+   * <code>short</code>s remaining in this buffer.\n    * @exception IndexOutOfBoundsException If the preconditions on the offset\n    * and length parameters do not hold.\n    */\n   public ShortBuffer get (short[] dst, int offset, int length)\n   {\n+    checkArraySize(dst.length, offset, length);\n+    checkForUnderflow(length);\n+\n     for (int i = offset; i < offset + length; i++)\n       {\n         dst [i] = get ();\n@@ -108,13 +112,13 @@ public ShortBuffer get (short[] dst, int offset, int length)\n   }\n \n   /**\n-   * This method transfers <code>shorts<code> from this buffer into the given\n+   * This method transfers <code>short</code>s from this buffer into the given\n    * destination array.\n    *\n    * @param dst The byte array to write into.\n    *\n    * @exception BufferUnderflowException If there are fewer than dst.length\n-   * <code>shorts</code> remaining in this buffer.\n+   * <code>short</code>s remaining in this buffer.\n    */\n   public ShortBuffer get (short[] dst)\n   {\n@@ -123,12 +127,13 @@ public ShortBuffer get (short[] dst)\n \n   /**\n    * Writes the content of the the <code>ShortBUFFER</code> src\n-   * into the buffer.\n+   * into the buffer. Before the transfer, it checks if there is fewer than\n+   * <code>src.remaining()</code> space remaining in this buffer.\n    *\n    * @param src The source data.\n    *\n    * @exception BufferOverflowException If there is insufficient space in this\n-   * buffer for the remaining <code>shorts<code> in the source buffer.\n+   * buffer for the remaining <code>short</code>s in the source buffer.\n    * @exception IllegalArgumentException If the source buffer is this buffer.\n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n@@ -137,8 +142,7 @@ public ShortBuffer put (ShortBuffer src)\n     if (src == this)\n       throw new IllegalArgumentException ();\n \n-    if (src.remaining () > remaining ())\n-      throw new BufferOverflowException ();\n+    checkForOverflow(src.remaining ());\n \n     if (src.remaining () > 0)\n       {\n@@ -152,7 +156,8 @@ public ShortBuffer put (ShortBuffer src)\n \n   /**\n    * Writes the content of the the <code>short array</code> src\n-   * into the buffer.\n+   * into the buffer. Before the transfer, it checks if there is fewer than\n+   * length space remaining in this buffer.\n    *\n    * @param src The array to copy into the buffer.\n    * @param offset The offset within the array of the first byte to be read;\n@@ -161,13 +166,16 @@ public ShortBuffer put (ShortBuffer src)\n    * must be non-negative and no larger than src.length - offset.\n    * \n    * @exception BufferOverflowException If there is insufficient space in this\n-   * buffer for the remaining <code>shorts<code> in the source array.\n+   * buffer for the remaining <code>short</code>s in the source array.\n    * @exception IndexOutOfBoundsException If the preconditions on the offset\n    * and length parameters do not hold\n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n   public ShortBuffer put (short[] src, int offset, int length)\n   {\n+    checkArraySize(src.length, offset, length);\n+    checkForOverflow(length);\n+\n     for (int i = offset; i < offset + length; i++)\n       put (src [i]);\n \n@@ -181,7 +189,7 @@ public ShortBuffer put (short[] src, int offset, int length)\n    * @param src The array to copy into the buffer.\n    * \n    * @exception BufferOverflowException If there is insufficient space in this\n-   * buffer for the remaining <code>shorts<code> in the source array.\n+   * buffer for the remaining <code>short</code>s in the source array.\n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n   public final ShortBuffer put (short[] src)\n@@ -211,8 +219,7 @@ public final short[] array ()\n     if (backing_buffer == null)\n       throw new UnsupportedOperationException ();\n \n-    if (isReadOnly ())\n-      throw new ReadOnlyBufferException ();\n+    checkIfReadOnly();\n     \n     return backing_buffer;\n   }\n@@ -229,8 +236,7 @@ public final int arrayOffset ()\n     if (backing_buffer == null)\n       throw new UnsupportedOperationException ();\n \n-    if (isReadOnly ())\n-      throw new ReadOnlyBufferException ();\n+    checkIfReadOnly();\n     \n     return array_offset;\n   }\n@@ -298,7 +304,7 @@ public int compareTo (Object obj)\n    * and then increments the position.\n    *\n    * @exception BufferUnderflowException If there are no remaining\n-   * <code>shorts</code> in this buffer.\n+   * <code>short</code>s in this buffer.\n    */\n   public abstract short get ();\n \n@@ -307,7 +313,7 @@ public int compareTo (Object obj)\n    * and then increments the position.\n    *\n    * @exception BufferOverflowException If there no remaining \n-   * <code>shorts</code> in this buffer.\n+   * <code>short</code>s in this buffer.\n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n   public abstract ShortBuffer put (short b);"}, {"sha": "28f6efbd8041e49d60bfd14072371d7ba84e91a9", "filename": "libjava/java/nio/ShortBufferImpl.java", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FShortBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FShortBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FShortBufferImpl.java?ref=23c41c08339da4bdf677ade01e17d940b7ce6201", "patch": "@@ -1,5 +1,5 @@\n /* ShortBufferImpl.java -- \n-   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -98,10 +98,16 @@ public boolean isDirect ()\n   }\n \n   /**\n-   * Relative get method. Reads the next <code>short</code> from the buffer.\n+   * Reads the <code>short</code> at this buffer's current position,\n+   * and then increments the position.\n+   *\n+   * @exception BufferUnderflowException If there are no remaining\n+   * <code>short</code>s in this buffer.\n    */\n   public short get ()\n   {\n+    checkForUnderflow();\n+\n     short result = backing_buffer [position ()];\n     position (position () + 1);\n     return result;\n@@ -110,14 +116,16 @@ public short get ()\n   /**\n    * Relative put method. Writes <code>value</code> to the next position\n    * in the buffer.\n-   * \n+   *\n+   * @exception BufferOverflowException If there no remaining \n+   * space in this buffer.\n    * @exception ReadOnlyBufferException If this buffer is read-only.\n    */\n   public ShortBuffer put (short value)\n   {\n-    if (readOnly)\n-      throw new ReadOnlyBufferException ();\n-\t  \t    \n+    checkIfReadOnly();\n+    checkForOverflow();\n+\n     backing_buffer [position ()] = value;\n     position (position () + 1);\n     return this;\n@@ -132,6 +140,8 @@ public ShortBuffer put (short value)\n    */\n   public short get (int index)\n   {\n+    checkIndex(index);\n+\n     return backing_buffer [index];\n   }\n   \n@@ -145,9 +155,9 @@ public short get (int index)\n    */\n   public ShortBuffer put (int index, short value)\n   {\n-    if (readOnly)\n-      throw new ReadOnlyBufferException ();\n-    \t    \n+    checkIfReadOnly();\n+    checkIndex(index);\n+\n     backing_buffer [index] = value;\n     return this;\n   }"}, {"sha": "a9d086d212756b8230e6ef24d9e6008dfeedd500", "filename": "libjava/java/nio/ShortViewBufferImpl.java", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FShortViewBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c41c08339da4bdf677ade01e17d940b7ce6201/libjava%2Fjava%2Fnio%2FShortViewBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FShortViewBufferImpl.java?ref=23c41c08339da4bdf677ade01e17d940b7ce6201", "patch": "@@ -66,6 +66,13 @@ public ShortViewBufferImpl (ByteBuffer bb, int offset, int capacity,\n     this.endian = endian;\n   }\n \n+  /**\n+   * Reads the <code>short</code> at this buffer's current position,\n+   * and then increments the position.\n+   *\n+   * @exception BufferUnderflowException If there are no remaining\n+   * <code>short</code>s in this buffer.\n+   */\n   public short get ()\n   {\n     int p = position();\n@@ -74,6 +81,13 @@ public short get ()\n     return result;\n   }\n \n+  /**\n+   * Absolute get method. Reads the <code>short</code> at position\n+   * <code>index</code>.\n+   *\n+   * @exception IndexOutOfBoundsException If index is negative or not smaller\n+   * than the buffer's limit.\n+   */\n   public short get (int index)\n   {\n     return ByteBufferHelper.getShort(bb, (index << 1) + offset, endian);"}]}