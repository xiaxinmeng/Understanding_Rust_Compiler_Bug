{"sha": "d3e5bae174d9d2ed115a364d5b404d179458a622", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDNlNWJhZTE3NGQ5ZDJlZDExNWEzNjRkNWI0MDRkMTc5NDU4YTYyMg==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2020-05-14T06:16:27Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2020-05-14T06:16:27Z"}, "message": "Make anti_adjust_stack_and_probe_stack_clash extern and use it for Z\n\nWhen compiling with -mbackchain -fstack-clash-protection currently no\nprobes are emitted.  This patch adjusts the \"allocate_stack\" expander\nto call anti_adjust_stack_and_probe_stack_clash when needed. In order\nto do this I had to export that function from explow.c.\n\nOk for mainline?\n\ngcc/ChangeLog:\n\n2020-05-14  Andreas Krebbel  <krebbel@linux.ibm.com>\n\n\t* config/s390/s390.md (\"allocate_stack\"): Call\n\tanti_adjust_stack_and_probe_stack_clash when stack clash\n\tprotection is enabled.\n\t* explow.c (anti_adjust_stack_and_probe_stack_clash): Remove\n\tprototype. Remove static.\n\t* explow.h (anti_adjust_stack_and_probe_stack_clash): Add\n\tprototype.\n\ngcc/testsuite/ChangeLog:\n\n2020-05-14  Andreas Krebbel  <krebbel@linux.ibm.com>\n\n\t* gcc.target/s390/stack-clash-3.c: New test.", "tree": {"sha": "4bd42f68a9f4e25b5474abec76d2051be6f10613", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4bd42f68a9f4e25b5474abec76d2051be6f10613"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3e5bae174d9d2ed115a364d5b404d179458a622", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3e5bae174d9d2ed115a364d5b404d179458a622", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3e5bae174d9d2ed115a364d5b404d179458a622", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3e5bae174d9d2ed115a364d5b404d179458a622/comments", "author": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f806a768e1400ec1115c3a52b1e207bb71b4ad45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f806a768e1400ec1115c3a52b1e207bb71b4ad45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f806a768e1400ec1115c3a52b1e207bb71b4ad45"}], "stats": {"total": 45, "additions": 42, "deletions": 3}, "files": [{"sha": "0b326ee09e8b11891b95070f5b4273d72e0b519d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3e5bae174d9d2ed115a364d5b404d179458a622/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3e5bae174d9d2ed115a364d5b404d179458a622/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d3e5bae174d9d2ed115a364d5b404d179458a622", "patch": "@@ -1,3 +1,13 @@\n+2020-05-14  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* config/s390/s390.md (\"allocate_stack\"): Call\n+\tanti_adjust_stack_and_probe_stack_clash when stack clash\n+\tprotection is enabled.\n+\t* explow.c (anti_adjust_stack_and_probe_stack_clash): Remove\n+\tprototype. Remove static.\n+\t* explow.h (anti_adjust_stack_and_probe_stack_clash): Add\n+\tprototype.\n+\n 2020-05-13  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n \n \t* config/rs6000/altivec.h (vec_extractl): New #define."}, {"sha": "908de587e171ce5f3a39f7a3447ba15c87e34cba", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3e5bae174d9d2ed115a364d5b404d179458a622/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3e5bae174d9d2ed115a364d5b404d179458a622/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=d3e5bae174d9d2ed115a364d5b404d179458a622", "patch": "@@ -11007,7 +11007,12 @@\n   rtx temp = gen_reg_rtx (Pmode);\n \n   emit_move_insn (temp, s390_back_chain_rtx ());\n-  anti_adjust_stack (operands[1]);\n+\n+  if (flag_stack_clash_protection)\n+    anti_adjust_stack_and_probe_stack_clash (operands[1]);\n+  else\n+    anti_adjust_stack (operands[1]);\n+\n   emit_move_insn (s390_back_chain_rtx (), temp);\n \n   emit_move_insn (operands[0], virtual_stack_dynamic_rtx);"}, {"sha": "15c9cfb03189a87212ff5ff61077075d3632024b", "filename": "gcc/explow.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3e5bae174d9d2ed115a364d5b404d179458a622/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3e5bae174d9d2ed115a364d5b404d179458a622/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=d3e5bae174d9d2ed115a364d5b404d179458a622", "patch": "@@ -43,7 +43,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"output.h\"\n \n static rtx break_out_memory_refs (rtx);\n-static void anti_adjust_stack_and_probe_stack_clash (rtx);\n \n \n /* Truncate and perhaps sign-extend C as appropriate for MODE.  */\n@@ -1948,7 +1947,7 @@ emit_stack_clash_protection_probe_loop_end (rtx loop_lab, rtx end_loop,\n \tallocate/probe beyond that because this probing style does not\n \tguarantee signal handling capability if the guard is hit.  */\n \n-static void\n+void\n anti_adjust_stack_and_probe_stack_clash (rtx size)\n {\n   /* First ensure SIZE is Pmode.  */"}, {"sha": "0df8c62b82a8bf1d8d6baf0b6fb658e66361a407", "filename": "gcc/explow.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3e5bae174d9d2ed115a364d5b404d179458a622/gcc%2Fexplow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3e5bae174d9d2ed115a364d5b404d179458a622/gcc%2Fexplow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.h?ref=d3e5bae174d9d2ed115a364d5b404d179458a622", "patch": "@@ -69,6 +69,10 @@ extern void anti_adjust_stack (rtx);\n /* Add some bytes to the stack while probing it.  An rtx says how many. */\n extern void anti_adjust_stack_and_probe (rtx, bool);\n \n+/* Add some bytes to the stack while probing it.  An rtx says how\n+   many.  Add additional probes to prevent stack clashing attacks.  */\n+extern void anti_adjust_stack_and_probe_stack_clash (rtx);\n+\n /* Support for building allocation/probing loops for stack-clash\n    protection of dyamically allocated stack space.  */\n extern void compute_stack_clash_protection_loop_data (rtx *, rtx *, rtx *,"}, {"sha": "bb3e4c86adcf4f57b750a0be61ec7b58a1991dcb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3e5bae174d9d2ed115a364d5b404d179458a622/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3e5bae174d9d2ed115a364d5b404d179458a622/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d3e5bae174d9d2ed115a364d5b404d179458a622", "patch": "@@ -1,3 +1,7 @@\n+2020-05-14  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* gcc.target/s390/stack-clash-3.c: New test.\n+\n 2020-05-13  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n \n \t* gcc.target/powerpc/vec-extracth-0.c: New."}, {"sha": "929d3fbb365b429156cb7ed47daf32904c431056", "filename": "gcc/testsuite/gcc.target/s390/stack-clash-3.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3e5bae174d9d2ed115a364d5b404d179458a622/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fstack-clash-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3e5bae174d9d2ed115a364d5b404d179458a622/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fstack-clash-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fstack-clash-3.c?ref=d3e5bae174d9d2ed115a364d5b404d179458a622", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=z900 -fstack-clash-protection -mbackchain\" } */\n+\n+extern void bar (char *);\n+\n+void\n+foo ()\n+{\n+  char * mem = __builtin_alloca (20000);\n+  bar (mem);\n+}\n+\n+/* For alloca a common code routine emits the probes.  Make sure the\n+   \"probe_stack\" expander is used in that case. We want to use mem\n+   compares instead of stores.  */\n+/* { dg-final { scan-assembler-times \"cg\\t\" 5 { target lp64 } } } */\n+/* { dg-final { scan-assembler-times \"c\\t\" 5 { target { ! lp64 } } } } */"}]}