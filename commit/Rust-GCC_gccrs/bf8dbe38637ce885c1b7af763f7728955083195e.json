{"sha": "bf8dbe38637ce885c1b7af763f7728955083195e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY4ZGJlMzg2MzdjZTg4NWMxYjdhZjc2M2Y3NzI4OTU1MDgzMTk1ZQ==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2006-11-21T23:45:21Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2006-11-21T23:45:21Z"}, "message": "re PR tree-optimization/29902 (ICE in coalesce_abnormal_edges, at tree-outof-ssa.c:644)\n\n\tPR tree-optimization/29902\n\t* tree-ssa-loop-manip.c (can_unroll_loop_p): Return false if\n\tany involved ssa name appears in abnormal phi node.\n\n\t* g++.dg/tree-ssa/pr29902.C: New test.\n\nFrom-SVN: r119074", "tree": {"sha": "227094b35bc9ee38d5a4faf20007c767c35a5d58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/227094b35bc9ee38d5a4faf20007c767c35a5d58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf8dbe38637ce885c1b7af763f7728955083195e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf8dbe38637ce885c1b7af763f7728955083195e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf8dbe38637ce885c1b7af763f7728955083195e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf8dbe38637ce885c1b7af763f7728955083195e/comments", "author": null, "committer": null, "parents": [{"sha": "da2a24c3f60194266096c3b807798fbc20d38a7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da2a24c3f60194266096c3b807798fbc20d38a7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da2a24c3f60194266096c3b807798fbc20d38a7f"}], "stats": {"total": 51, "additions": 45, "deletions": 6}, "files": [{"sha": "fb72e0a2f6ef1e5bc48e2d8b854556111da47177", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8dbe38637ce885c1b7af763f7728955083195e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8dbe38637ce885c1b7af763f7728955083195e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf8dbe38637ce885c1b7af763f7728955083195e", "patch": "@@ -1,3 +1,9 @@\n+2006-11-22  Zdenek Dvorak <dvorakz@suse.cz>\n+\n+\tPR tree-optimization/29902\n+\t* tree-ssa-loop-manip.c (can_unroll_loop_p): Return false if\n+\tany involved ssa name appears in abnormal phi node.\n+\n 2006-11-21  Bob Wilson  <bob.wilson@acm.org>\n \n \t* config/xtensa/xtensa.c (xtensa_char_to_class): Delete.\n@@ -19,7 +25,7 @@\n 2006-11-21  Janis Johnson  <janis187@us.ibm.com>\n \n \t* config/dfp-bits.c (DFP_TO_INT): Remove code to saturate result\n- \tof conversion that doesn't fit.\n+\tof conversion that doesn't fit.\n \n \t* config/dfp-bit.h (CONTEXT_TRAPS, CONTEXT_ERRORS, DFP_RAISE): Delete.\n \t* config/dfp-bit.c (dfp_unary_op, dfp_binary_op, dfp_compare_op,\n@@ -29,7 +35,7 @@\n \n 2006-11-21  Douglas Gregor <doug.gregor@gmail.com>\n \n-        * c-common.h (enum rid): Add RID_STATIC_ASSERT.\n+\t* c-common.h (enum rid): Add RID_STATIC_ASSERT.\n \n 2006-11-21  Richard Guenther  <rguenther@suse.de>\n "}, {"sha": "58ed09da58be03ccb8a5813500f641cfa9201242", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8dbe38637ce885c1b7af763f7728955083195e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8dbe38637ce885c1b7af763f7728955083195e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bf8dbe38637ce885c1b7af763f7728955083195e", "patch": "@@ -1,3 +1,8 @@\n+2006-11-22  Zdenek Dvorak <dvorakz@suse.cz>\n+\n+\tPR tree-optimization/29902\n+\t* g++.dg/tree-ssa/pr29902.C: New test.\n+\n 2006-11-21 Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/29820\n@@ -9,9 +14,9 @@\n \n 2006-11-21  Douglas Gregor  <doug.gregor@gmail.com>\n \n-        * g++.dg/cpp0x/static_assert1.C: New.\n-        * g++.dg/cpp0x/static_assert2.C: New.\n-        * g++.dg/cpp0x/static_assert3.C: New.\n+\t* g++.dg/cpp0x/static_assert1.C: New.\n+\t* g++.dg/cpp0x/static_assert2.C: New.\n+\t* g++.dg/cpp0x/static_assert3.C: New.\n \n 2006-11-21  Richard Guenther  <rguenther@suse.de>\n "}, {"sha": "c81101d1a0a40abd24b532138735229e4be51cdc", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr29902.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8dbe38637ce885c1b7af763f7728955083195e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr29902.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8dbe38637ce885c1b7af763f7728955083195e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr29902.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr29902.C?ref=bf8dbe38637ce885c1b7af763f7728955083195e", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile { target i?86-*-* } } */\n+/* { dg-options \"-O1 -fprefetch-loop-arrays -march=athlon\" } */\n+\n+int length1();\n+int g(int);\n+void f(int capacity_, char *old_storage)\n+{\n+  try {\n+      length1();\n+      int old_capacity = capacity_;\n+      capacity_ *= 2;\n+      g(capacity_);\n+      for (int i = 1; i < old_capacity; i++)\n+\told_storage[i] = old_storage[i - 1];\n+  } catch (...) {\n+      for (int i = 1; i < capacity_; i++){old_storage[i] = 0;}\n+  }\n+}\n+"}, {"sha": "a23c787ccbefe2fd322f356c14013fac05d29785", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8dbe38637ce885c1b7af763f7728955083195e/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8dbe38637ce885c1b7af763f7728955083195e/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=bf8dbe38637ce885c1b7af763f7728955083195e", "patch": "@@ -625,7 +625,16 @@ can_unroll_loop_p (struct loop *loop, unsigned factor,\n     return false;\n \n   if (!number_of_iterations_exit (loop, exit, niter, false)\n-      || niter->cmp == ERROR_MARK)\n+      || niter->cmp == ERROR_MARK\n+      /* Scalar evolutions analysis might have copy propagated\n+\t the abnormal ssa names into these expressions, hence\n+\t emiting the computations based on them during loop\n+\t unrolling might create overlapping life ranges for\n+\t them, and failures in out-of-ssa.  */\n+      || contains_abnormal_ssa_name_p (niter->may_be_zero)\n+      || contains_abnormal_ssa_name_p (niter->control.base)\n+      || contains_abnormal_ssa_name_p (niter->control.step)\n+      || contains_abnormal_ssa_name_p (niter->bound))\n     return false;\n \n   /* And of course, we must be able to duplicate the loop.  */"}]}