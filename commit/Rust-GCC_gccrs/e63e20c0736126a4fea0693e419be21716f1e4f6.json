{"sha": "e63e20c0736126a4fea0693e419be21716f1e4f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTYzZTIwYzA3MzYxMjZhNGZlYTA2OTNlNDE5YmUyMTcxNmYxZTRmNg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-11-14T07:58:17Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-11-14T07:58:17Z"}, "message": "ChangeLog: Fix whitespace.\n\n\t* ChangeLog: Fix whitespace.\n\t* testsuite/ChangeLog: Ditto.\n\nFrom-SVN: r230372", "tree": {"sha": "e9694a5258f3c54427fa2a280965f47add2861a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9694a5258f3c54427fa2a280965f47add2861a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e63e20c0736126a4fea0693e419be21716f1e4f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e63e20c0736126a4fea0693e419be21716f1e4f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e63e20c0736126a4fea0693e419be21716f1e4f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e63e20c0736126a4fea0693e419be21716f1e4f6/comments", "author": null, "committer": null, "parents": [{"sha": "f0c4658bed6c3d724417ca56a0be1ff03ef277a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0c4658bed6c3d724417ca56a0be1ff03ef277a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0c4658bed6c3d724417ca56a0be1ff03ef277a8"}], "stats": {"total": 156, "additions": 60, "deletions": 96}, "files": [{"sha": "6e85a5b5781a4733a22f526d832263ea20d2daaf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 46, "deletions": 92, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e63e20c0736126a4fea0693e419be21716f1e4f6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e63e20c0736126a4fea0693e419be21716f1e4f6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e63e20c0736126a4fea0693e419be21716f1e4f6", "patch": "@@ -48,8 +48,7 @@\n \n 2015-11-13  Nathan Sidwell  <nathan@codesourcery.com>\n \n-\t* gcc/omp-low.c (scan_sharing_clauses): Accept INDEPENDENT, AUTO &\n-\tSEQ.\n+\t* gcc/omp-low.c (scan_sharing_clauses): Accept INDEPENDENT, AUTO & SEQ.\n \t(oacc_loop_fixed_partitions): Correct return type to bool.\n \t(oacc_loop_auto_partitions): New.\n \t(oacc_loop_partition): Take mask argument, call\n@@ -76,8 +75,7 @@\n \tISA 3.0 hardware IEEE 128-bit floating point.\n \t(UNSPEC_IEEE128_MOVE): Likewise.\n \t(UNSPEC_IEEE128_CONVERT): Likewise.\n-\t(FMA_F): Add support for IEEE 128-bit floating point hardware\n-\tsupport.\n+\t(FMA_F): Add support for IEEE 128-bit floating point hardware support.\n \t(Ff): Add support for DImode.\n \t(Fv): Likewise.\n \t(any_fix code iterator): New and updated iterators for IEEE\n@@ -228,7 +226,7 @@\n \t* config/arm/arm.opt (arm_fpu_index): Mark Save.\n \n 2015-11-13  Segher Boessenkool  <segher@kernel.crashing.org>\n-            Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\t    Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* combine.c (subst): Don't substitute or simplify when\n \thandling register-wise widening multiply.\n@@ -379,7 +377,7 @@\n \n 2015-11-13  James Bowman  <james.bowman@ftdichip.com>\n \n-        * config/ft32/ft32.md (*sne): New insn pattern.\n+\t* config/ft32/ft32.md (*sne): New insn pattern.\n \n 2015-11-12  Brad Lucier  <lucier@math.purdue.edu>\n \n@@ -393,13 +391,13 @@\n \tExpand warning to add required size of max-gcse-memory.\n \t(one_pre_gcse_pass): Use it.\n \t(one_code_hoisting_pass): Use it.\n- \t* gcc/params.def (max-gcse-memory): Increase from 50MB to 128MB.\n+\t* gcc/params.def (max-gcse-memory): Increase from 50MB to 128MB.\n \n 2015-11-12  James Norris  <jnorris@codesourcery.com>\n \t    Joseph Myers  <joseph@codesourcery.com>\n \n \t* gimple-pretty-print.c (dump_gimple_omp_target): Handle\n-\tGF_OMP_TARGET_KIND_OACC_DECLARE. \n+\tGF_OMP_TARGET_KIND_OACC_DECLARE.\n \t* gimple.h (enum gf_mask): Add GF_OMP_TARGET_KIND_OACC_DECLARE.\n \t(is_gomple_omp_oacc): Handle GF_OMP_TARGET_KIND_OACC_DECLARE.\n \t* gimplify.c (oacc_declare_returns): New.\n@@ -432,7 +430,7 @@\n \t* config/arm/arm-tables.opt, config/arm/arm-tune.md: Regenerated.\n \t* config/arm/bpabi.h (BE8_LINK_SPEC): Add qdf24xx support.\n \t* doc/invoke.texi (AArch64 Options/-mtune): Add \"qdf24xx\".\n-\t(ARM Options/-mtune); Likewise.\n+\t(ARM Options/-mtune): Likewise.\n \n 2015-11-12  Martin Liska  <mliska@suse.cz>\n \n@@ -442,8 +440,7 @@\n \tintroduced init_opts_obstack.\n \t* lto-wrapper.c (main): Likewise.\n \t* opts.c (init_opts_obstack): New function.\n-\t(init_options_struct): Call newly\n-\tintroduced init_opts_obstack.\n+\t(init_options_struct): Call newly introduced init_opts_obstack.\n \t* opts.h (init_options_struct): Declare.\n \n 2015-11-12  Martin Liska  <mliska@suse.cz>\n@@ -542,8 +539,7 @@\n 2015-11-12  Ilya Enkovich  <enkovich.gnu@gmail.com>\n \n \t* expr.c (do_store_flag): Expand vector comparison as\n-\tVEC_COND_EXPR if vector comparison is not supported\n-\tby target.\n+\tVEC_COND_EXPR if vector comparison is not supported by target.\n \n 2015-11-12  Renlin Li  <renlin.li@arm.com>\n \n@@ -819,20 +815,17 @@\n \tORT_ACC_DATA, ORT_ACC_PARALLEL, ORT_ACC_KERNELS.  Adjust ORT_NONE.\n \t(gimple_add_tmp_var): Add ORT_ACC checks.\n \t(gimplify_var_or_parm_decl): Likewise.\n-\t(omp_firstprivatize_variable): Likewise. Use ORT_TARGET_DATA as a\n-\tmask.\n+\t(omp_firstprivatize_variable): Likewise. Use ORT_TARGET_DATA as a mask.\n \t(omp_add_variable): Look in outer contexts for openacc and allow\n-\treductions with other sharing. Add ORT_ACC and ORT_TARGET_DATA\n-\tchecks.\n+\treductions with other sharing. Add ORT_ACC and ORT_TARGET_DATA checks.\n \t(omp_notice_variable, omp_is_private, omp_check_private): Add\n \tORT_ACC checks.\n \t(gimplify_scan_omp_clauses: Treat ORT_ACC as ORT_WORKSHARE.\n \tPermit private openacc reductions.\n \t(gimplify_oacc_cache): Specify ORT_ACC.\n \t(gimplify_omp_workshare): Adjust OpenACC region types.\n \t(gimplify_omp_target_update): Likewise.\n-\t* omp-low.c (scan_sharing_clauses): Remove Openacc\n-\tfirstprivate sorry.\n+\t* omp-low.c (scan_sharing_clauses): Remove Openacc firstprivate sorry.\n \t(lower-rec_input_clauses): Don't handle openacc firstprivate\n \treferences here.\n \t(lower_omp_target): Emit initializers for openacc firstprivate vars.\n@@ -890,20 +883,16 @@\n \tarchitecture.\n \t(arc_compute_function_type): Likewise.\n \t(arc_print_operand): Handle new ARCv2 punctuation characters.\n-\t(arc_return_in_memory): ARCv2 ABI returns in registers up to 16\n-\tbytes.\n+\t(arc_return_in_memory): ARCv2 ABI returns in registers up to 16 bytes.\n \t(workaround_arc_anomaly, arc_asm_insn_p, arc_loop_hazard): New\n \tfunction.\n \t(arc_reorg, arc_hazard): Use it.\n-\t* config/arc/arc.h (TARGET_CPU_CPP_BUILTINS): Define __HS__ and\n-\t__EM__.\n+\t* config/arc/arc.h (TARGET_CPU_CPP_BUILTINS): Define __HS__ and __EM__.\n \t(ASM_SPEC): Add ARCv2 options.\n \t(TARGET_NORM): ARC HS has norm instructions by default.\n-\t(TARGET_OPTFPE): Use optimized floating point emulation for ARC\n-\tHS.\n+\t(TARGET_OPTFPE): Use optimized floating point emulation for ARC HS.\n \t(TARGET_AT_DBR_CONDEXEC): Only for ARC600 family.\n-\t(TARGET_EM, TARGET_HS, TARGET_V2, TARGET_MPYW, TARGET_MULTI):\n-\tDefine.\n+\t(TARGET_EM, TARGET_HS, TARGET_V2, TARGET_MPYW, TARGET_MULTI): Define.\n \t(SIGNED_INT16, TARGET_MPY, TARGET_ARC700_MPY, TARGET_ANY_MPY):\n \tLikewise.\n \t(TARGET_ARC600_FAMILY, TARGET_ARCOMPACT_FAMILY): Likewise.\n@@ -1136,8 +1125,7 @@\n \t* optabs-tree.c (expand_vec_cond_expr_p): Use\n \tget_vcond_mask_icode for VEC_COND_EXPR with mask.\n \t* optabs.c (expand_vec_cond_mask_expr): New.\n-\t(expand_vec_cond_expr): Use get_vcond_mask_icode\n-\twhen possible.\n+\t(expand_vec_cond_expr): Use get_vcond_mask_icode when possible.\n \t* optabs.def (vcond_mask_optab): New.\n \t* tree-vect-patterns.c (vect_recog_bool_pattern): Don't\n \tgenerate redundant comparison for COND_EXPR.\n@@ -1210,12 +1198,10 @@\n \t* tree-vect-patterns.c (check_bool_pattern): Check fails\n \tif we can vectorize comparison directly.\n \t(search_type_for_mask): New.\n-\t(vect_recog_bool_pattern): Support cases when bool pattern\n-\tcheck fails.\n+\t(vect_recog_bool_pattern): Support cases when bool pattern check fails.\n \t* tree-vect-slp.c (vect_build_slp_tree_1): Allow\n \tcomparison statements.\n-\t(vect_get_constant_vectors): Support boolean vector\n-\tconstants.\n+\t(vect_get_constant_vectors): Support boolean vector constants.\n \t* config/i386/i386-protos.h (ix86_expand_mask_vec_cmp): New.\n \t(ix86_expand_int_vec_cmp): New.\n \t(ix86_expand_fp_vec_cmp): New.\n@@ -1331,8 +1317,7 @@\n \t(fusion_addis_mem_combo_store): Likewise.\n \t(fusion_offsettable_mem_operand): Likewise.\n \n-\t* config/rs6000/rs6000-protos.h (emit_fusion_addis): Add\n-\tdeclarations.\n+\t* config/rs6000/rs6000-protos.h (emit_fusion_addis): Add declarations.\n \t(emit_fusion_load_store): Likewise.\n \t(fusion_p9_p): Likewise.\n \t(expand_fusion_p9_load): Likewise.\n@@ -1345,8 +1330,7 @@\n \telements for power9 fusion.\n \t(rs6000_debug_print_mode): Rework debug information to print more\n \tinformation about fusion.\n-\t(rs6000_init_hard_regno_mode_ok): Setup for power9 fusion\n-\tsupport.\n+\t(rs6000_init_hard_regno_mode_ok): Setup for power9 fusion support.\n \t(rs6000_legitimate_address_p): Recognize toc fusion as a valid\n \toffsettable memory address.\n \t(rs6000_rtx_costs): Update costs for new ISA 3.0 instructions.\n@@ -1375,8 +1359,7 @@\n \t(QHSI mode iterator): New iterator for power9 fusion.\n \t(GPR_FUSION): Likewise.\n \t(FPR_FUSION): Likewise.\n-\t(mod<mode>3): Add support for ISA 3.0\n-\tmodulus instructions.\n+\t(mod<mode>3): Add support for ISA 3.0 modulus instructions.\n \t(umod<mode>3): Likewise.\n \t(divmod peephole): Likewise.\n \t(udivmod peephole): Likewise.\n@@ -1468,25 +1451,22 @@\n \t(POWERPC_MASKS): Add new ISA 3.0 switches.\n \t(power9 cpu): Add power9 cpu.\n \n-\t* config/rs6000/rs6000.h (ASM_CPU_POWER9_SPEC): Add support for\n-\tpower9.\n+\t* config/rs6000/rs6000.h (ASM_CPU_POWER9_SPEC): Add support for power9.\n \t(ASM_CPU_SPEC): Likewise.\n \t(EXTRA_SPECS): Likewise.\n \n \t* config/rs6000/rs6000-opts.h (enum processor_type): Add\n \tPROCESSOR_POWER9.\n \n-\t* config/rs6000/rs6000.c (power9_cost): Initial cost setup for\n-\tpower9.\n+\t* config/rs6000/rs6000.c (power9_cost): Initial cost setup for power9.\n \t(rs6000_debug_reg_global): Add support for power9 fusion.\n \t(rs6000_setup_reg_addr_masks): Cache mode size.\n \t(rs6000_option_override_internal): Until real power9 tuning is\n \tadded, use -mtune=power8 for -mcpu=power9.\n \t(rs6000_setup_reg_addr_masks): Do not allow pre-increment,\n \tpre-decrement, or pre-modify on SFmode/DFmode if we allow the use\n \tof Altivec registers.\n-\t(rs6000_option_override_internal): Add support for ISA 3.0\n-\tswitches.\n+\t(rs6000_option_override_internal): Add support for ISA 3.0 switches.\n \t(rs6000_loop_align): Add support for power9 cpu.\n \t(rs6000_file_start): Likewise.\n \t(rs6000_adjust_cost): Likewise.\n@@ -1540,8 +1520,7 @@\n 2015-11-09  Martin Liska  <mliska@suse.cz>\n \n \t* gcc.c (record_temp_file): Release name string.\n-\t* ifcvt.c (noce_convert_multiple_sets): Use auto_vec instead\n-\tof vec.\n+\t* ifcvt.c (noce_convert_multiple_sets): Use auto_vec instead of vec.\n \t* lra-lives.c (free_live_range_list): Utilize\n \tlra_live_range_pool for allocation and deallocation.\n \t(create_live_range): Likewise.\n@@ -1550,8 +1529,7 @@\n \t(remove_some_program_points_and_update_live_ranges): Likewise.\n \t(lra_create_live_ranges_1): Release point_freq_vec that can\n \tbe not freed from previous iteration of the function.\n-\t* tree-eh.c (lower_try_finally_switch): Use auto_vec instead of\n-\tvec.\n+\t* tree-eh.c (lower_try_finally_switch): Use auto_vec instead of vec.\n \t* tree-sra.c (sra_deinitialize): Release all vectors in\n \tbase_access_vec.\n \t* tree-ssa-dom.c (free_dom_edge_info): Make the function extern.\n@@ -1569,8 +1547,7 @@\n 2015-11-09  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/68248\n-\t* tree-vect-generic.c (expand_vector_operations_1): Handle\n-\tscalar rhs2.\n+\t* tree-vect-generic.c (expand_vector_operations_1): Handle scalar rhs2.\n \n 2015-11-09  Richard Biener  <rguenther@suse.de>\n \n@@ -1615,33 +1592,28 @@\n \t(frv_print_operand): Pass mode to frv_print_operand_address calls.\n \t* config/mn10300/mn10300.c (mn10300_print_operand): Pass mode to\n \toutput_address.\n-\t* config/cris/cris.c (cris_print_operand_address): Add MODE\n-\targument.\n+\t* config/cris/cris.c (cris_print_operand_address): Add MODE argument.\n \t(cris_print_operand): Pass mode to output_address calls.\n-\t* config/spu/spu.c (print_operand): Pass mode to output_address\n-\tcalls.\n+\t* config/spu/spu.c (print_operand): Pass mode to output_address calls.\n \t* config/aarch64/aarch64.h (aarch64_print_operand)\n \t(aarch64_print_operand_address): Remove prototypes.\n \t* config/aarch64/aarch64.c (aarch64_memory_reference_mode): Delete\n \tglobal.\n-\t(aarch64_print_operand): Make static. Update calls to\n-\toutput_address.\n+\t(aarch64_print_operand): Make static. Update calls to output_address.\n \t(aarch64_print_operand_address): Add MODE argument. Use instead of\n \taarch64_memory_reference_mode global.\n \t(TARGET_PRINT_OPERAND, TARGET_PRINT_OPERAND_ADDRESS): Define target\n \thooks.\n \t* config/aarch64/aarch64.h (PRINT_OPERAND, PRINT_OPERAND_ADDRESS):\n \tDelete macro definitions.\n-\t* config/pa/pa.c (pa_print_operand): Pass mode in output_address\n-\tcalls.\n+\t* config/pa/pa.c (pa_print_operand): Pass mode in output_address calls.\n \t* config/xtensa/xtensa.c (print_operand): Pass mode in\n \toutput_address calls.\n \t* config/h8300/h8300.c (h8300_print_operand_address): Add MODE\n \targument.\n \t(h83000_print_operand): Update calls to h8300_print_operand_address\n \tand output_address.\n-\t* config/ia64/ia64.c (ia64_print_operand_address): Add MODE\n-\targument.\n+\t* config/ia64/ia64.c (ia64_print_operand_address): Add MODE argument.\n \t* config/tilepro/tilepro.c (output_memory_reference_mode): Delete\n \tglobal.\n \t(tilepro_print_operand): Pass mode to output_address.\n@@ -1687,18 +1659,15 @@\n \toutput_address call.\n \t(c6x_print_address_operand): Update calls to output_address.\n \t(c6x_print_operand_address): Pass mode to above.\n-\t* config/v850/v850.c (v850_print_operand_address): Add MODE\n-\targument.\n+\t* config/v850/v850.c (v850_print_operand_address): Add MODE argument.\n \t(v850_print_operand): Pass mode to v850_print_operand_address,\n \toutput_address.\n-\t* config/mmix/mmix.c (mmix_print_operand_address): Add MODE\n-\targument.\n+\t* config/mmix/mmix.c (mmix_print_operand_address): Add MODE argument.\n \t(mmix_print_operand): Pass mode in output_address calls.\n \t* config/sh/sh.c (sh_print_operand_address): Add MODE argument.\n \t(sh_print_operand): Pass mem mode to output_address,\n \tsh_print_operand_address.\n-\t* config/cr16/cr16.c (cr16_print_operand_address): Add MODE\n-\targument.\n+\t* config/cr16/cr16.c (cr16_print_operand_address): Add MODE argument.\n \t(cr16_print_operand): Pass mode to output_address,\n \tcr16_print_operand_address.\n \t* config/bfin/bfin.c (print_address_operand): Pass VOIDmode to\n@@ -1710,16 +1679,14 @@\n \t(nios2_print_operand_address): Add MODE argument. Update call to\n \tnios2_print_operand_address.\n \t* config/s390/s390.c (print_operand): Pass mode to output_address.\n-\t* config/m32c/m32c.c (m32c_print_operand_address): Add MODE\n-\targument.\n+\t* config/m32c/m32c.c (m32c_print_operand_address): Add MODE argument.\n \t* config/arc/arc.c (arc_print_operand): Pass VOIDmode to\n \toutput_address.\n \t* config/arm/arm.c (arm_print_operand_address): Add MODE argument.\n \tUse instead of output_memory_reference_mode.\n \t(output_memory_reference_mode): Delete global.\n \t(arm_print_operand): Pass mem mode to output_address.\n-\t* config/m32r/m32r.c (m32r_print_operand_address): Add MODE\n-\targument.\n+\t* config/m32r/m32r.c (m32r_print_operand_address): Add MODE argument.\n \t(m32r_print_operand): Pass mode to output_address.\n \t* config/msp430/msp430.c (msp430_print_operand_addr): Add MODE\n \targument.\n@@ -1752,8 +1719,7 @@\n \n \t* config/sol2.h (SUPPORTS_INIT_PRIORITY): Define to\n \tHAVE_INITFINI_ARRAY_SUPPORT.\n-\t* config/initfini-array.h: Check HAVE_INITFINI_ARRAY_SUPPORT\n-\tvalue.\n+\t* config/initfini-array.h: Check HAVE_INITFINI_ARRAY_SUPPORT value.\n \n \t* configure.ac (gcc_cv_as_sparc_nobits): Remove.\n \t* config/sparc/sparc.c (sparc_solaris_elf_asm_named_section):\n@@ -1983,8 +1949,7 @@\n \ttypes with different TYPE_REVERSE_STORAGE_ORDER flag.\n \t* gimplify.c (gimplify_expr) <MEM_REF>: Propagate the\n \tREF_REVERSE_STORAGE_ORDER flag.\n-\t* lto-streamer-out.c (hash_tree): Deal with\n-\tTYPE_REVERSE_STORAGE_ORDER.\n+\t* lto-streamer-out.c (hash_tree): Deal with TYPE_REVERSE_STORAGE_ORDER.\n \t* output.h (assemble_real): Adjust prototype.\n \t* print-tree.c (print_node): Convey TYPE_REVERSE_STORAGE_ORDER.\n \t* stor-layout.c (finish_record_layout): Propagate the\n@@ -1993,8 +1958,7 @@\n \t(TYPE_SATURATING): Adjust.\n \t(REF_REVERSE_STORAGE_ORDER): Document.\n \t* tree-dfa.c (get_ref_base_and_extent): Add PREVERSE parameter and\n-\tset it to true upon encoutering a reference with reverse storage\n-\torder.\n+\tset it to true upon encoutering a reference with reverse storage order.\n \t* tree-dfa.h (get_ref_base_and_extent): Adjust prototype.\n \t* tree-inline.c (remap_gimple_op_r): Propagate the\n \tREF_REVERSE_STORAGE_ORDER flag.\n@@ -2072,8 +2036,7 @@\n \t(compute_known_type_jump_func): Likewise.\n \t(determine_known_aggregate_parts): Likewise.\n \t(ipa_get_adjustment_candidate): Likewise.\n-\t(ipa_modify_call_arguments): Set REF_REVERSE_STORAGE_ORDER on\n-\tMEM_REF.\n+\t(ipa_modify_call_arguments): Set REF_REVERSE_STORAGE_ORDER on MEM_REF.\n \t* ipa-prop.h (ipa_parm_adjustment): Add REVERSE field.\n \t(build_ref_for_offset): Adjust prototype.\n \t* simplify-rtx.c (delegitimize_mem_from_attrs): Adjust call to\n@@ -2135,13 +2098,12 @@\n \t(do_structure_copy): Likewise.\n \t* tree-vect-data-refs.c (vect_check_gather): Adjust call to\n \tget_inner_reference.\n-\t(vect_analyze_data_refs): Likewise.  Bail out if reverse storage\n-\torder.\n+\t(vect_analyze_data_refs): Likewise.  Bail out if reverse storage order.\n \t* tsan.c (instrument_expr): Adjust call to get_inner_reference.\n \t* ubsan.c (instrument_bool_enum_load): Likewise.\n \t(instrument_object_size): Likewise.\n \t* var-tracking.c (track_expr_p): Adjust call to\n-\tget_ref_base_and_extent\n+\tget_ref_base_and_extent.\n \t* config/mips/mips.c (r10k_safe_mem_expr_p): Adjust call to\n \tget_inner_reference.\n \t* config/s390/s390.c (s390_expand_atomic): Adjust call to\n@@ -2268,7 +2230,7 @@\n \t* doc/md.texi (multi-alternative constraints): Don't document\n \talternatives inherently tied to reload for the user documentation.\n \n-2015-11-06  Michael Collison  <michael.collison@linaro.org\n+2015-11-06  Michael Collison  <michael.collison@linaro.org>\n \t    Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n \n \tRevert:\n@@ -2280,8 +2242,7 @@\n \n 2015-11-06  Jakub Jelinek  <jakub@redhat.com>\n \n-\t* gimplify.c (gimplify_omp_ordered): Fix up diagnostics\n-\twording.\n+\t* gimplify.c (gimplify_omp_ordered): Fix up diagnostics wording.\n \t* omp-low.c (check_omp_nesting_restrictions): Update for the\n \tvarious new OpenMP 4.5 nesting restrictions, clarified\n \tnesting glossary, closely nested region relationship clarified\n@@ -2496,13 +2457,6 @@\n \tcode when applicable.\n \t* config/aarch64/aarch64.md: Added enum entries.\n \t* config/aarch64/aarch64.opt: Added option -mlow-precision-recip-sqrt.\n-\t* testsuite/gcc.target/aarch64/rsqrt_asm_check_common.h: Common\n-\tmacros for assembly checks.\n-\t* testsuite/gcc.target/aarch64/rsqrt_asm_check_negative_1.c: Make sure\n-\tfrsqrts and frsqrte are not emitted.\n-\t* testsuite/gcc.target/aarch64/rsqrt_asm_check_1.c: Make sure\n-\tfrsqrts and frsqrte are emitted.\n-\t* testsuite/gcc.target/aarch64/rsqrt_1.c: Functional tests for rsqrt.\n \n 2015-11-07  Jan Hubicka  <hubicka@ucw.cz>\n "}, {"sha": "f6b21e5f8b3562de42f166d1042ea7ab8e55303f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e63e20c0736126a4fea0693e419be21716f1e4f6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e63e20c0736126a4fea0693e419be21716f1e4f6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e63e20c0736126a4fea0693e419be21716f1e4f6", "patch": "@@ -4,7 +4,7 @@\n \t* g++.dg/cpp/ucn-1.C: Expect error for dollar sign identifier on AIX.\n \n 2015-11-13  Ajit Agarwal  <ajitkum@xilinx.com>\n-            Jeff Law  <law@redhat.com>\n+\t    Jeff Law  <law@redhat.com>\n \n \t* gcc.dg/tree-ssa/split-path-1.c: New test.\n \n@@ -79,8 +79,7 @@\n \n 2015-11-13  Nathan Sidwell  <nathan@codesourcery.com>\n \n-\t* c-c++-common/goacc/data-default-1.c: Correct expected\n-\tdiagnostic.\n+\t* c-c++-common/goacc/data-default-1.c: Correct expected diagnostic.\n \n 2015-11-13  Richard Biener  <rguenther@suse.de>\n \n@@ -4231,7 +4230,7 @@\n 2015-11-11  Richard Biener  <rguenth@gcc.gnu.org>\n \t    Jiong Wang\t    <jiong.wang@arm.com>\n \n-\t* gcc.dg/tree-ssa/pr68234.c: New testcase. \n+\t* gcc.dg/tree-ssa/pr68234.c: New testcase.\n \n 2015-11-10  Ilya Enkovich  <enkovich.gnu@gmail.com>\n \n@@ -4542,6 +4541,17 @@\n \t* gcc.target/arm/interrupt-2.c: Likewise.\n \t* gcc.target/arm/unaligned-memcpy-4.c: Likewise.\n \n+2015-11-06  Benedikt Huber  <benedikt.huber@theobroma-systems.com>\n+\t    Philipp Tomsich  <philipp.tomsich@theobroma-systems.com>\n+\n+\t* gcc.target/aarch64/rsqrt_asm_check_common.h: Common\n+\tmacros for assembly checks.\n+\t* gcc.target/aarch64/rsqrt_asm_check_negative_1.c: Make sure\n+\tfrsqrts and frsqrte are not emitted.\n+\t* gcc.target/aarch64/rsqrt_asm_check_1.c: Make sure\n+\tfrsqrts and frsqrte are emitted.\n+\t* gcc.target/aarch64/rsqrt_1.c: Functional tests for rsqrt.\n+\n 2015-11-06  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* gfortran.dg/goacc/combined_loop.f90: XFAIL."}]}