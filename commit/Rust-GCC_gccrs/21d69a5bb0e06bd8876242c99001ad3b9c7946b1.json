{"sha": "21d69a5bb0e06bd8876242c99001ad3b9c7946b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFkNjlhNWJiMGUwNmJkODg3NjI0MmM5OTAwMWFkM2I5Yzc5NDZiMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-07-04T21:43:57Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-07-04T21:43:57Z"}, "message": "error.c (dump_template_bindings): Don't print typenames for a partial instantiation.\n\n\t* error.c (dump_template_bindings): Don't print typenames\n\tfor a partial instantiation.\n\t(dump_function_decl): If we aren't printing function arguments,\n\tprint template arguments as <args> rather than [with ...].\n\t(dump_expr): Don't print return type or template header.\n\t[BASELINK]: Use BASELINK_FUNCTIONS rather than get_first_fn.\n\t* pt.c (dependent_template_arg_p): Handle null arg.\n\nFrom-SVN: r175834", "tree": {"sha": "2e1a150f337c1b9c2f5eaeef5c7f057ee2c5235e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e1a150f337c1b9c2f5eaeef5c7f057ee2c5235e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21d69a5bb0e06bd8876242c99001ad3b9c7946b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21d69a5bb0e06bd8876242c99001ad3b9c7946b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21d69a5bb0e06bd8876242c99001ad3b9c7946b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21d69a5bb0e06bd8876242c99001ad3b9c7946b1/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0d3128d6a4925e05f560f665adcbb90eb1427a81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d3128d6a4925e05f560f665adcbb90eb1427a81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d3128d6a4925e05f560f665adcbb90eb1427a81"}], "stats": {"total": 97, "additions": 80, "deletions": 17}, "files": [{"sha": "7eb01d61771be38765a0c41ab679ee584ff75849", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d69a5bb0e06bd8876242c99001ad3b9c7946b1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d69a5bb0e06bd8876242c99001ad3b9c7946b1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=21d69a5bb0e06bd8876242c99001ad3b9c7946b1", "patch": "@@ -1,5 +1,13 @@\n 2011-07-04  Jason Merrill  <jason@redhat.com>\n \n+\t* error.c (dump_template_bindings): Don't print typenames\n+\tfor a partial instantiation.\n+\t(dump_function_decl): If we aren't printing function arguments,\n+\tprint template arguments as <args> rather than [with ...].\n+\t(dump_expr): Don't print return type or template header.\n+\t[BASELINK]: Use BASELINK_FUNCTIONS rather than get_first_fn.\n+\t* pt.c (dependent_template_arg_p): Handle null arg.\n+\n \t* error.c (type_to_string): Avoid redundant akas.\n \n 2011-07-01  Jonathan Wakely  <jwakely.gcc@gmail.com>"}, {"sha": "b16fce687507254c12455d2617fd1f1695cf04ef", "filename": "gcc/cp/error.c", "status": "modified", "additions": 37, "deletions": 16, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d69a5bb0e06bd8876242c99001ad3b9c7946b1/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d69a5bb0e06bd8876242c99001ad3b9c7946b1/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=21d69a5bb0e06bd8876242c99001ad3b9c7946b1", "patch": "@@ -307,21 +307,20 @@ dump_template_bindings (tree parms, tree args, VEC(tree,gc)* typenames)\n       parms = TREE_CHAIN (parms);\n     }\n \n+  /* Don't bother with typenames for a partial instantiation.  */\n+  if (VEC_empty (tree, typenames) || uses_template_parms (args))\n+    return;\n+\n   FOR_EACH_VEC_ELT (tree, typenames, i, t)\n     {\n-      bool dependent = uses_template_parms (args);\n       if (need_comma)\n \tpp_separate_with_comma (cxx_pp);\n       dump_type (t, TFF_PLAIN_IDENTIFIER);\n       pp_cxx_whitespace (cxx_pp);\n       pp_equal (cxx_pp);\n       pp_cxx_whitespace (cxx_pp);\n       push_deferring_access_checks (dk_no_check);\n-      if (dependent)\n-\t++processing_template_decl;\n       t = tsubst (t, args, tf_none, NULL_TREE);\n-      if (dependent)\n-\t--processing_template_decl;\n       pop_deferring_access_checks ();\n       /* Strip typedefs.  We can't just use TFF_CHASE_TYPEDEF because\n \t pp_simple_type_specifier doesn't know about it.  */\n@@ -1379,17 +1378,37 @@ dump_function_decl (tree t, int flags)\n \n       if (show_return)\n \tdump_type_suffix (TREE_TYPE (fntype), flags);\n-    }\n \n-  /* If T is a template instantiation, dump the parameter binding.  */\n-  if (template_parms != NULL_TREE && template_args != NULL_TREE)\n+      /* If T is a template instantiation, dump the parameter binding.  */\n+      if (template_parms != NULL_TREE && template_args != NULL_TREE)\n+\t{\n+\t  pp_cxx_whitespace (cxx_pp);\n+\t  pp_cxx_left_bracket (cxx_pp);\n+\t  pp_cxx_ws_string (cxx_pp, M_(\"with\"));\n+\t  pp_cxx_whitespace (cxx_pp);\n+\t  dump_template_bindings (template_parms, template_args, typenames);\n+\t  pp_cxx_right_bracket (cxx_pp);\n+\t}\n+    }\n+  else if (template_args)\n     {\n-      pp_cxx_whitespace (cxx_pp);\n-      pp_cxx_left_bracket (cxx_pp);\n-      pp_cxx_ws_string (cxx_pp, M_(\"with\"));\n-      pp_cxx_whitespace (cxx_pp);\n-      dump_template_bindings (template_parms, template_args, typenames);\n-      pp_cxx_right_bracket (cxx_pp);\n+      bool need_comma = false;\n+      int i;\n+      pp_cxx_begin_template_argument_list (cxx_pp);\n+      template_args = INNERMOST_TEMPLATE_ARGS (template_args);\n+      for (i = 0; i < TREE_VEC_LENGTH (template_args); ++i)\n+\t{\n+\t  tree arg = TREE_VEC_ELT (template_args, i);\n+\t  if (need_comma)\n+\t    pp_separate_with_comma (cxx_pp);\n+\t  if (ARGUMENT_PACK_P (arg))\n+\t    pp_cxx_left_brace (cxx_pp);\n+\t  dump_template_argument (arg, TFF_PLAIN_IDENTIFIER);\n+\t  if (ARGUMENT_PACK_P (arg))\n+\t    pp_cxx_right_brace (cxx_pp);\n+\t  need_comma = true;\n+\t}\n+      pp_cxx_end_template_argument_list (cxx_pp);\n     }\n }\n \n@@ -1724,7 +1743,9 @@ dump_expr (tree t, int flags)\n     case OVERLOAD:\n     case TYPE_DECL:\n     case IDENTIFIER_NODE:\n-      dump_decl (t, (flags & ~TFF_DECL_SPECIFIERS) | TFF_NO_FUNCTION_ARGUMENTS);\n+      dump_decl (t, ((flags & ~(TFF_DECL_SPECIFIERS|TFF_RETURN_TYPE\n+\t\t\t\t|TFF_TEMPLATE_HEADER))\n+\t\t     | TFF_NO_FUNCTION_ARGUMENTS));\n       break;\n \n     case INTEGER_CST:\n@@ -2289,7 +2310,7 @@ dump_expr (tree t, int flags)\n       break;\n \n     case BASELINK:\n-      dump_expr (get_first_fn (t), flags & ~TFF_EXPR_IN_PARENS);\n+      dump_expr (BASELINK_FUNCTIONS (t), flags & ~TFF_EXPR_IN_PARENS);\n       break;\n \n     case EMPTY_CLASS_EXPR:"}, {"sha": "e7be08bf0598c557494a753e4c54c6f54eff8bdd", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d69a5bb0e06bd8876242c99001ad3b9c7946b1/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d69a5bb0e06bd8876242c99001ad3b9c7946b1/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=21d69a5bb0e06bd8876242c99001ad3b9c7946b1", "patch": "@@ -18848,7 +18848,7 @@ dependent_template_arg_p (tree arg)\n      is dependent. This is consistent with what\n      any_dependent_template_arguments_p [that calls this function]\n      does.  */\n-  if (arg == error_mark_node)\n+  if (!arg || arg == error_mark_node)\n     return true;\n \n   if (TREE_CODE (arg) == ARGUMENT_PACK_SELECT)"}, {"sha": "bcf800ad5b4114abc7743f7cdd3d8690dd71632b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d69a5bb0e06bd8876242c99001ad3b9c7946b1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d69a5bb0e06bd8876242c99001ad3b9c7946b1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=21d69a5bb0e06bd8876242c99001ad3b9c7946b1", "patch": "@@ -1,5 +1,7 @@\n 2011-07-04  Jason Merrill  <jason@redhat.com>\n \n+\t* g++.dg/cpp0x/diag1.C: New.\n+\n \t* g++.dg/diagnostic/aka1.C: New.\n \n 2011-07-04  Jakub Jelinek  <jakub@redhat.com>"}, {"sha": "b3f30bcd0b4590cb66cc9c39088acfd293410b2b", "filename": "gcc/testsuite/g++.dg/cpp0x/diag1.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d69a5bb0e06bd8876242c99001ad3b9c7946b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdiag1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d69a5bb0e06bd8876242c99001ad3b9c7946b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdiag1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdiag1.C?ref=21d69a5bb0e06bd8876242c99001ad3b9c7946b1", "patch": "@@ -0,0 +1,32 @@\n+// { dg-options -std=c++0x }\n+\n+template <int U>\n+struct TypeA\n+{\n+  typedef int type;\n+};\n+\n+template <int N>\n+struct TypeB\n+{\n+  template <int U> typename TypeA<U>::type fn();\n+};\n+\n+struct TypeC\n+{\n+  TypeB<10> b;\n+  // This was being printed as:\n+  // template<int N>\n+  //   decltype (((TypeC*)this)->\n+  //             TypeC::b.\n+  //             template<int U> typename TypeA<U>::type TypeB::fn [with int U = U, int N = 10, typename TypeA<U>::type = TypeA<U>::type]())\n+  //   TypeC::fn()\n+  // we don't want to see the template header, return type, or parameter bindings\n+  // for TypeB::fn.\n+  template <int N> auto fn() -> decltype(b.fn<N>()); // { dg-bogus \"typename|with\" }\n+};\n+\n+int main()\n+{\n+  TypeC().fn<4>(1);\t\t// { dg-error \"no match\" }\n+}"}]}