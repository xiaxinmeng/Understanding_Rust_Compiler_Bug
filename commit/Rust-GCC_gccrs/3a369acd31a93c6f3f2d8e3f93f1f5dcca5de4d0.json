{"sha": "3a369acd31a93c6f3f2d8e3f93f1f5dcca5de4d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2EzNjlhY2QzMWE5M2M2ZjNmMmQ4ZTNmOTNmMWY1ZGNjYTVkZTRkMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-06-03T11:57:30Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-06-03T11:57:30Z"}, "message": "(layout_decl): Test DECL_PACKED and TYPE_PACKED instead of\nflag_pack_struct.\n\nFrom-SVN: r12141", "tree": {"sha": "76306cb77e7e010febd1548a8d761b94389c5054", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76306cb77e7e010febd1548a8d761b94389c5054"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a369acd31a93c6f3f2d8e3f93f1f5dcca5de4d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a369acd31a93c6f3f2d8e3f93f1f5dcca5de4d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a369acd31a93c6f3f2d8e3f93f1f5dcca5de4d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a369acd31a93c6f3f2d8e3f93f1f5dcca5de4d0/comments", "author": null, "committer": null, "parents": [{"sha": "02eb6e90226abb0fe921a2d24e9874ae943ed003", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02eb6e90226abb0fe921a2d24e9874ae943ed003", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02eb6e90226abb0fe921a2d24e9874ae943ed003"}], "stats": {"total": 8, "additions": 3, "deletions": 5}, "files": [{"sha": "0a152d70f8401069e19736c4a8ce4367adf3194e", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a369acd31a93c6f3f2d8e3f93f1f5dcca5de4d0/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a369acd31a93c6f3f2d8e3f93f1f5dcca5de4d0/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=3a369acd31a93c6f3f2d8e3f93f1f5dcca5de4d0", "patch": "@@ -254,7 +254,7 @@ layout_decl (decl, known_align)\n       DECL_BIT_FIELD_TYPE (decl) = DECL_BIT_FIELD (decl) ? type : 0;\n       if (maximum_field_alignment != 0)\n \tDECL_ALIGN (decl) = MIN (DECL_ALIGN (decl), maximum_field_alignment);\n-      else if (flag_pack_struct)\n+      else if (DECL_PACKED (decl))\n \tDECL_ALIGN (decl) = MIN (DECL_ALIGN (decl), BITS_PER_UNIT);\n     }\n \n@@ -391,7 +391,7 @@ layout_record (rec)\n \t      int type_align = TYPE_ALIGN (TREE_TYPE (field));\n \t      if (maximum_field_alignment != 0)\n \t\ttype_align = MIN (type_align, maximum_field_alignment);\n-\t      else if (flag_pack_struct)\n+\t      else if (TYPE_PACKED (rec))\n \t\ttype_align = MIN (type_align, BITS_PER_UNIT);\n \n \t      record_align = MAX (record_align, type_align);\n@@ -433,9 +433,7 @@ layout_record (rec)\n \t  && TREE_TYPE (field) != error_mark_node\n \t  && DECL_BIT_FIELD_TYPE (field)\n \t  && !DECL_PACKED (field)\n-\t  /* If #pragma pack is in effect, turn off this feature.  */\n \t  && maximum_field_alignment == 0\n-\t  && !flag_pack_struct\n \t  && !integer_zerop (DECL_SIZE (field)))\n \t{\n \t  int type_align = TYPE_ALIGN (TREE_TYPE (field));\n@@ -470,7 +468,7 @@ layout_record (rec)\n \n \t  if (maximum_field_alignment != 0)\n \t    type_align = MIN (type_align, maximum_field_alignment);\n-\t  else if (flag_pack_struct)\n+\t  else if (TYPE_PACKED (rec))\n \t    type_align = MIN (type_align, BITS_PER_UNIT);\n \n \t  /* A bit field may not span the unit of alignment of its type."}]}