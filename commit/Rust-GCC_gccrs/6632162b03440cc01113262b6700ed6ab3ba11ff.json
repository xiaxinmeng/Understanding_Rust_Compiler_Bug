{"sha": "6632162b03440cc01113262b6700ed6ab3ba11ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjYzMjE2MmIwMzQ0MGNjMDExMTMyNjJiNjcwMGVkNmFiM2JhMTFmZg==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2013-03-06T15:08:58Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2013-03-06T15:08:58Z"}, "message": "Use thr_stksegment to determine Solaris stack base\n\n\t* os_dep.c [SOLARIS_STACKBOTTOM] (GC_solaris_stack_base): New\n\tfunction.\n\t[!BEOS && !AMIGA && !MSWIN32 && !MSWINCE && !OS2 && !NOSYS &&\n\t!ECOS] (GC_get_stack_base): Use it.\n\t* include/private/gcconfig.h [SPARC && SUNOS5]\n\t(SOLARIS_STACKBOTTOM): Define.\n\t(STACKBOTTOM, HEURISTIC2): Remove.\n\t[I386 && SUNOS5]\n\t(SOLARIS_STACKBOTTOM): Define.\n\t(STACKBOTTOM): Remove.\n\nFrom-SVN: r196490", "tree": {"sha": "b2c8d5ade6c2bace942e02d93986a6fe0c08df2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2c8d5ade6c2bace942e02d93986a6fe0c08df2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6632162b03440cc01113262b6700ed6ab3ba11ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6632162b03440cc01113262b6700ed6ab3ba11ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6632162b03440cc01113262b6700ed6ab3ba11ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6632162b03440cc01113262b6700ed6ab3ba11ff/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9ac0b8414cd523ab9c60c72011a8578660506970", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ac0b8414cd523ab9c60c72011a8578660506970", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ac0b8414cd523ab9c60c72011a8578660506970"}], "stats": {"total": 88, "additions": 68, "deletions": 20}, "files": [{"sha": "be2a484249d04cd0a8d67c7e715086edf640fb60", "filename": "boehm-gc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6632162b03440cc01113262b6700ed6ab3ba11ff/boehm-gc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6632162b03440cc01113262b6700ed6ab3ba11ff/boehm-gc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FChangeLog?ref=6632162b03440cc01113262b6700ed6ab3ba11ff", "patch": "@@ -1,3 +1,16 @@\n+2013-03-06  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* os_dep.c [SOLARIS_STACKBOTTOM] (GC_solaris_stack_base): New\n+\tfunction.\n+\t[!BEOS && !AMIGA && !MSWIN32 && !MSWINCE && !OS2 && !NOSYS &&\n+\t!ECOS] (GC_get_stack_base): Use it.\n+\t* include/private/gcconfig.h [SPARC && SUNOS5]\n+\t(SOLARIS_STACKBOTTOM): Define.\n+\t(STACKBOTTOM, HEURISTIC2): Remove.\n+\t[I386 && SUNOS5]\n+\t(SOLARIS_STACKBOTTOM): Define.\n+\t(STACKBOTTOM): Remove.\n+\n 2012-11-04  Samuel Thibault  <samuel.thibault@gnu.org>\n \n \t* configure.ac: Add stanza for *-*-gnu* threads configuration."}, {"sha": "9420c7caf8f4de914ba9fb53ec24af3cd43dd475", "filename": "boehm-gc/include/private/gcconfig.h", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6632162b03440cc01113262b6700ed6ab3ba11ff/boehm-gc%2Finclude%2Fprivate%2Fgcconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6632162b03440cc01113262b6700ed6ab3ba11ff/boehm-gc%2Finclude%2Fprivate%2Fgcconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Finclude%2Fprivate%2Fgcconfig.h?ref=6632162b03440cc01113262b6700ed6ab3ba11ff", "patch": "@@ -927,18 +927,7 @@\n #\t  define HEAP_START DATAEND\n #       endif\n #\tdefine PROC_VDB\n-/*\tHEURISTIC1 reportedly no longer works under 2.7.  \t\t*/\n-/*  \tHEURISTIC2 probably works, but this appears to be preferable.\t*/\n-/*\tApparently USRSTACK is defined to be USERLIMIT, but in some\t*/\n-/* \tinstallations that's undefined.  We work around this with a\t*/\n-/*\tgross hack:\t\t\t\t\t\t\t*/\n-#       include <sys/vmparam.h>\n-#\tifdef USERLIMIT\n-\t  /* This should work everywhere, but doesn't.\t*/\n-#\t  define STACKBOTTOM USRSTACK\n-#       else\n-#\t  define HEURISTIC2\n-#       endif\n+#\tdefine SOLARIS_STACKBOTTOM\n #\tinclude <unistd.h>\n #       define GETPAGESIZE()  sysconf(_SC_PAGESIZE)\n \t\t/* getpagesize() appeared to be missing from at least one */\n@@ -1067,13 +1056,7 @@\n   \textern ptr_t GC_SysVGetDataStart();\n #       define DATASTART GC_SysVGetDataStart(0x1000, _etext)\n #\tdefine DATAEND (_end)\n-/*\t# define STACKBOTTOM ((ptr_t)(_start)) worked through 2.7,  \t*/\n-/*      but reportedly breaks under 2.8.  It appears that the stack\t*/\n-/* \tbase is a property of the executable, so this should not break\t*/\n-/* \told executables.\t\t\t\t\t\t*/\n-/*  \tHEURISTIC2 probably works, but this appears to be preferable.\t*/\n-#       include <sys/vm.h>\n-#\tdefine STACKBOTTOM USRSTACK\n+#\tdefine SOLARIS_STACKBOTTOM\n /* At least in Solaris 2.5, PROC_VDB gives wrong values for dirty bits. */\n /* It appears to be fixed in 2.8 and 2.9.\t\t\t\t*/\n #\tifdef SOLARIS25_PROC_VDB_BUG_FIXED"}, {"sha": "470d4fc14dd5b436211e6d0991d2974ab79309c3", "filename": "boehm-gc/os_dep.c", "status": "modified", "additions": 53, "deletions": 1, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6632162b03440cc01113262b6700ed6ab3ba11ff/boehm-gc%2Fos_dep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6632162b03440cc01113262b6700ed6ab3ba11ff/boehm-gc%2Fos_dep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fos_dep.c?ref=6632162b03440cc01113262b6700ed6ab3ba11ff", "patch": "@@ -1008,13 +1008,62 @@ ptr_t GC_get_stack_base()\n \n #endif /* FREEBSD_STACKBOTTOM */\n \n+#ifdef SOLARIS_STACKBOTTOM\n+\n+# include <thread.h>\n+# include <signal.h>\n+# include <pthread.h>\n+\n+  /* These variables are used to cache ss_sp value for the primordial   */\n+  /* thread (it's better not to call thr_stksegment() twice for this    */\n+  /* thread - see JDK bug #4352906).                                    */\n+  static pthread_t stackbase_main_self = 0;\n+                        /* 0 means stackbase_main_ss_sp value is unset. */\n+  static void *stackbase_main_ss_sp = NULL;\n+\n+  ptr_t GC_solaris_stack_base(void)\n+  {\n+    stack_t s;\n+    pthread_t self = pthread_self();\n+    if (self == stackbase_main_self)\n+      {\n+        /* If the client calls GC_get_stack_base() from the main thread */\n+        /* then just return the cached value.                           */\n+        GC_ASSERT(stackbase_main_ss_sp != NULL);\n+        return stackbase_main_ss_sp;\n+      }\n+\n+    if (thr_stksegment(&s)) {\n+      /* According to the manual, the only failure error code returned  */\n+      /* is EAGAIN meaning \"the information is not available due to the */\n+      /* thread is not yet completely initialized or it is an internal  */\n+      /* thread\" - this shouldn't happen here.                          */\n+      ABORT(\"thr_stksegment failed\");\n+    }\n+    /* s.ss_sp holds the pointer to the stack bottom. */\n+    GC_ASSERT((void *)&s HOTTER_THAN s.ss_sp);\n+\n+    if (!stackbase_main_self)\n+      {\n+        /* Cache the stack base value for the primordial thread (this   */\n+        /* is done during GC_init, so there is no race).                */\n+        stackbase_main_ss_sp = s.ss_sp;\n+        stackbase_main_self = self;\n+      }\n+\n+    return s.ss_sp;\n+  }\n+\n+#endif /* GC_SOLARIS_THREADS */\n+\n #if !defined(BEOS) && !defined(AMIGA) && !defined(MSWIN32) \\\n     && !defined(MSWINCE) && !defined(OS2) && !defined(NOSYS) && !defined(ECOS)\n \n ptr_t GC_get_stack_base()\n {\n #   if defined(HEURISTIC1) || defined(HEURISTIC2) || \\\n-       defined(LINUX_STACKBOTTOM) || defined(FREEBSD_STACKBOTTOM)\n+       defined(LINUX_STACKBOTTOM) || defined(FREEBSD_STACKBOTTOM) || \\\n+       defined(SOLARIS_STACKBOTTOM)       \n     word dummy;\n     ptr_t result;\n #   endif\n@@ -1040,6 +1089,9 @@ ptr_t GC_get_stack_base()\n #\tifdef FREEBSD_STACKBOTTOM\n \t   result = GC_freebsd_stack_base();\n #\tendif\n+#\tifdef SOLARIS_STACKBOTTOM\n+\t   result = GC_solaris_stack_base();\n+#\tendif\n #\tifdef HEURISTIC2\n #\t    ifdef STACK_GROWS_DOWN\n \t\tresult = GC_find_limit((ptr_t)(&dummy), TRUE);"}]}