{"sha": "d1ca63a1b7d5986913b14567a4950b055a5a3f07", "node_id": "C_kwDOANBUbNoAKGQxY2E2M2ExYjdkNTk4NjkxM2IxNDU2N2E0OTUwYjA1NWE1YTNmMDc", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-03-24T00:16:44Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-03-24T00:16:44Z"}, "message": "Daily bump.", "tree": {"sha": "49dc372d2b427a710d1abfd7ac5ce3f911bffa66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49dc372d2b427a710d1abfd7ac5ce3f911bffa66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1ca63a1b7d5986913b14567a4950b055a5a3f07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1ca63a1b7d5986913b14567a4950b055a5a3f07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1ca63a1b7d5986913b14567a4950b055a5a3f07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1ca63a1b7d5986913b14567a4950b055a5a3f07/comments", "author": null, "committer": null, "parents": [{"sha": "4cebae0924248beb2077894c6dc725c306fc0a69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cebae0924248beb2077894c6dc725c306fc0a69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cebae0924248beb2077894c6dc725c306fc0a69"}], "stats": {"total": 232, "additions": 231, "deletions": 1}, "files": [{"sha": "9640ffe4b03c452727bdb84ee3c43f7f059bee29", "filename": "gcc/ChangeLog", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1ca63a1b7d5986913b14567a4950b055a5a3f07/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1ca63a1b7d5986913b14567a4950b055a5a3f07/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d1ca63a1b7d5986913b14567a4950b055a5a3f07", "patch": "@@ -1,3 +1,57 @@\n+2022-03-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR target/102125\n+\t* gimple-fold.cc (gimple_fold_builtin_memory_op): Allow the\n+\tuse of movmisalign when either the source or destination\n+\tdecl is properly aligned.\n+\n+2022-03-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR rtl-optimization/105028\n+\t* ira-color.cc (form_threads_from_copies): Remove unnecessary\n+\tcopying of the sorted_copies tail.\n+\n+2022-03-23  Martin Liska  <mliska@suse.cz>\n+\n+\t* config/rs6000/rs6000-c.cc (altivec_resolve_overloaded_builtin):\n+\tUse %qs in format.\n+\t* config/rs6000/rs6000.cc (rs6000_option_override_internal):\n+\tReword the error message.\n+\n+2022-03-23  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/104976\n+\t* config/i386/sse.md (ssePSmodelower): New.\n+\t(*avx_cmp<mode>3_ltint_not): Force_reg operand before\n+\tlowpart_subreg to avoid NULL_RTX.\n+\t(<avx512>_fmaddc_<mode>_mask1<round_expand_name>,\n+\t<avx512>_fcmaddc_<mode>_mask1<round_expand_name>,\n+\tfma_<mode>_fmaddc_bcst, fma_<mode>_fcmaddc_bcst,\n+\t<avx512>_<complexopname>_<mode>_mask<round_name>,\n+\tavx512fp16_fcmaddcsh_v8hf_mask1<round_expand_name>,\n+\tavx512fp16_fcmaddcsh_v8hf_mask3<round_expand_name>,\n+\tavx512fp16_fmaddcsh_v8hf_mask3<round_expand_name>,\n+\tavx512fp16_fmaddcsh_v8hf_mask3<round_expand_name>,\n+\tfloat<floatunssuffix><mode>v4hf2,\n+\tfloat<floatunssuffix>v2div2hf2,\n+\tfix<fixunssuffix>_truncv4hf<mode>2,\n+\tfix<fixunssuffix>_truncv2hfv2di2, extendv4hf<mode>2,\n+\textendv2hfv2df2,\n+\ttrunc<mode>v4hf2,truncv2dfv2hf2,\n+\t*avx512bw_permvar_truncv16siv16hi_1,\n+\t*avx512bw_permvar_truncv16siv16hi_1_hf,\n+\t*avx512f_permvar_truncv8siv8hi_1,\n+\t*avx512f_permvar_truncv8siv8hi_1_hf,\n+\t*avx512f_vpermvar_truncv8div8si_1,\n+\t*avx512f_permvar_truncv32hiv32qi_1,\n+\t*avx512f_permvar_truncv16hiv16qi_1,\n+\t*avx512f_permvar_truncv4div4si_1,\n+\t*avx512f_pshufb_truncv8hiv8qi_1,\n+\t*avx512f_pshufb_truncv4siv4hi_1,\n+\t*avx512f_pshufd_truncv2div2si_1,\n+\tsdot_prod<mode>, avx2_pblend<ssemodesuffix>_1,\n+\tashrv2di3,ashrv2di3,usdot_prod<mode>): Ditto.\n+\n 2022-03-22  Tom de Vries  <tdevries@suse.de>\n \n \tPR target/104925"}, {"sha": "a4374e63098582ae27460bb669f68ca0e000fefd", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1ca63a1b7d5986913b14567a4950b055a5a3f07/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1ca63a1b7d5986913b14567a4950b055a5a3f07/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=d1ca63a1b7d5986913b14567a4950b055a5a3f07", "patch": "@@ -1 +1 @@\n-20220323\n+20220324"}, {"sha": "293548ac796440234970018a598e5d2e0edc674c", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1ca63a1b7d5986913b14567a4950b055a5a3f07/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1ca63a1b7d5986913b14567a4950b055a5a3f07/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=d1ca63a1b7d5986913b14567a4950b055a5a3f07", "patch": "@@ -1,3 +1,53 @@\n+2022-03-23  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/104979\n+\t* engine.cc (impl_run_checkers): Create the engine after the\n+\tsupergraph, and pass the supergraph to the engine.\n+\t* region-model.cc (region_model::get_lvalue_1): Pass ctxt to\n+\tframe_region::get_region_for_local.\n+\t(region_model::update_for_return_gcall): Pass the lvalue for the\n+\tresult to pop_frame as a tree, rather than as a region.\n+\t(region_model::pop_frame): Update for above change, determining\n+\tthe destination region after the frame is popped and thus with\n+\trespect to the caller frame rather than the called frame.\n+\tLikewise, set the value of the region to the return value after\n+\tthe frame is popped.\n+\t(engine::engine): Add supergraph pointer.\n+\t(selftest::test_stack_frames): Set the DECL_CONTECT of PARM_DECLs.\n+\t(selftest::test_get_representative_path_var): Likewise.\n+\t(selftest::test_state_merging): Likewise.\n+\t* region-model.h (region_model::pop_frame): Convert first param\n+\tfrom a const region * to a tree.\n+\t(engine::engine): Add param \"sg\".\n+\t(engine::m_sg): New field.\n+\t* region.cc: Include \"analyzer/sm.h\" and\n+\t\"analyzer/program-state.h\".\n+\t(frame_region::get_region_for_local): Add \"ctxt\" param.\n+\tAdd assertions that VAR_DECLs are locals, and that expr is for the\n+\tcorrect function.\n+\t* region.h (frame_region::get_region_for_local): Add \"ctxt\" param.\n+\n+2022-03-23  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/105017\n+\t* sm-taint.cc (taint_diagnostic::subclass_equal_p): Check\n+\tm_has_bounds as well as m_arg.\n+\t(tainted_allocation_size::subclass_equal_p): Chain up to base\n+\tclass implementation.  Also check m_mem_space.\n+\t(tainted_allocation_size::emit): Add note showing stack-based vs\n+\theap-based allocations.\n+\n+2022-03-23  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/104997\n+\t* diagnostic-manager.cc (diagnostic_manager::add_diagnostic):\n+\tConvert return type from \"void\" to \"bool\", reporting success vs\n+\tfailure to caller, for both overloads.\n+\t* diagnostic-manager.h (diagnostic_manager::add_diagnostic):\n+\tLikewise.\n+\t* engine.cc (impl_region_model_context::warn): Propagate return\n+\tvalue from diagnostic_manager::add_diagnostic.\n+\n 2022-03-18  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/104943"}, {"sha": "215aad519dbc060b2d9c64de784d1c64cfe162ca", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1ca63a1b7d5986913b14567a4950b055a5a3f07/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1ca63a1b7d5986913b14567a4950b055a5a3f07/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d1ca63a1b7d5986913b14567a4950b055a5a3f07", "patch": "@@ -1,3 +1,21 @@\n+2022-03-23  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/103337\n+\t* decl.cc (reshape_single_init): New.\n+\t(reshape_init_class): Use it.\n+\n+2022-03-23  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/105006\n+\t* name-lookup.cc (lookup_using_decl): Check that scope is\n+\ta dependent type before looking for dependent using.\n+\n+2022-03-23  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/105006\n+\t* name-lookup.cc (lookup_using_decl): Set DECL_DEPENDENT_P if lookup\n+\tfinds a dependent using.\n+\n 2022-03-21  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/58646"}, {"sha": "95ca699339534ddb786734b1b1d167393544c408", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1ca63a1b7d5986913b14567a4950b055a5a3f07/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1ca63a1b7d5986913b14567a4950b055a5a3f07/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d1ca63a1b7d5986913b14567a4950b055a5a3f07", "patch": "@@ -1,3 +1,11 @@\n+2022-03-23  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/103560\n+\t* scanner.cc (add_path_to_list): Don't append '/' to the\n+\tsave include path.\n+\t(open_included_file): Use '/' in concatenating path + file name.\n+\t* module.cc (gzopen_included_file_1): Likewise.\n+\n 2022-03-22  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/104999"}, {"sha": "b815c9b72e6f10191d7cb636058af4821a227f07", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1ca63a1b7d5986913b14567a4950b055a5a3f07/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1ca63a1b7d5986913b14567a4950b055a5a3f07/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=d1ca63a1b7d5986913b14567a4950b055a5a3f07", "patch": "@@ -1,3 +1,14 @@\n+2022-03-23  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR middle-end/104285\n+\t* lto-partition.cc (maybe_rewrite_identifier): Use get_identifier\n+\tfor the returned string to be usable as hash key.\n+\t(validize_symbol_for_target): Hence, use return value directly.\n+\t(privatize_symbol_name_1): Track maybe_rewrite_identifier renames.\n+\t* lto.cc (offload_handle_link_vars): Move function up before ...\n+\t(do_whole_program_analysis): Call it after static renamings.\n+\t(lto_main): Move call after static renamings.\n+\n 2022-02-04  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/90348"}, {"sha": "d41b8e9fc0dbf3abab65a42b54a2482026193ab0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1ca63a1b7d5986913b14567a4950b055a5a3f07/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1ca63a1b7d5986913b14567a4950b055a5a3f07/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d1ca63a1b7d5986913b14567a4950b055a5a3f07", "patch": "@@ -1,3 +1,51 @@\n+2022-03-23  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/104979\n+\t* gcc.dg/analyzer/boxed-malloc-1-29.c: Deleted test, moving the\n+\tnow fixed test_29 to...\n+\t* gcc.dg/analyzer/boxed-malloc-1.c: ...here.\n+\t* gcc.dg/analyzer/stale-frame-1.c: Add test coverage.\n+\n+2022-03-23  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/103560\n+\t* gfortran.dg/include_14.f90: Update dg-warning.\n+\t* gfortran.dg/include_17.f90: Likewise.\n+\t* gfortran.dg/include_18.f90: Likewise.\n+\t* gfortran.dg/include_6.f90: Update dg-*.\n+\n+2022-03-23  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/105006\n+\t* g++.dg/template/using30.C: New test.\n+\n+2022-03-23  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/105017\n+\t* gcc.dg/analyzer/taint-alloc-1.c: Add expected messages relating\n+\tto heap vs stack.\n+\n+2022-03-23  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/104997\n+\t* gcc.dg/analyzer/write-to-string-literal-4-disabled.c: New test,\n+\tadapted from write-to-string-literal-4.c.\n+\n+2022-03-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/102986\n+\t* gcc.target/i386/sse2-v1ti-shift-3.c (rotr_v1ti, rotl_v1ti, rotr_ti,\n+\trotl_ti): Use -i&127 instead of 128-i to avoid UB on i == 0.\n+\n+2022-03-23  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr104976.c: New test.\n+\t* gcc.target/i386/avx512fp16-vfcmaddcph-1a.c: Scan either\n+\tvblendps or masked vmovaps.\n+\t* gcc.target/i386/avx512fp16-vfmaddcph-1a.c: Ditto\n+\t* gcc.target/i386/avx512fp16vl-vfcmaddcph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vfmaddcph-1a.c: Ditto.\n+\n 2022-03-22  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/82283"}, {"sha": "e1e60b98a31e9ea26323d4ec023f7b5da84b8e52", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1ca63a1b7d5986913b14567a4950b055a5a3f07/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1ca63a1b7d5986913b14567a4950b055a5a3f07/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=d1ca63a1b7d5986913b14567a4950b055a5a3f07", "patch": "@@ -1,3 +1,13 @@\n+2022-03-23  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR middle-end/104285\n+\t* testsuite/libgomp.c++/target-same-name-2-a.C: New test.\n+\t* testsuite/libgomp.c++/target-same-name-2-b.C: New test.\n+\t* testsuite/libgomp.c++/target-same-name-2.C: New test.\n+\t* testsuite/libgomp.c-c++-common/target-same-name-1-a.c: New test.\n+\t* testsuite/libgomp.c-c++-common/target-same-name-1-b.c: New test.\n+\t* testsuite/libgomp.c-c++-common/target-same-name-1.c: New test.\n+\n 2022-03-22  Tom de Vries  <tdevries@suse.de>\n \n \tPR target/104916"}, {"sha": "6b272418e40c2848b5c3d4abb88acc069f0b9cfc", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1ca63a1b7d5986913b14567a4950b055a5a3f07/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1ca63a1b7d5986913b14567a4950b055a5a3f07/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d1ca63a1b7d5986913b14567a4950b055a5a3f07", "patch": "@@ -1,3 +1,34 @@\n+2022-03-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/105027\n+\t* include/std/bit (bit_cast): Add constraints.\n+\t* testsuite/26_numerics/bit/bit.cast/105027.cc: New test.\n+\n+2022-03-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/version [!_GLIBCXX_HOSTED]\n+\t(__cpp_lib_hardware_interference_size): Define for freestanding.\n+\t(__cpp_lib_bit_cast): Likewise.\n+\t(__cpp_lib_is_layout_compatible): Likewise.\n+\t(__cpp_lib_is_pointer_interconvertible): Likewise.\n+\t(__cpp_lib_adaptor_iterator_pair_constructor): Do not define for\n+\tfreestanding.\n+\t(__cpp_lib_invoke_r): Likewise.\n+\t(__cpp_lib_ios_noreplace): Likewise.\n+\t(__cpp_lib_monadic_optional): Likewise.\n+\t(__cpp_lib_move_only_function): Likewise.\n+\t(__cpp_lib_spanstream): Likewise.\n+\t(__cpp_lib_stacktrace): Likewise.\n+\t(__cpp_lib_string_contains): Likewise.\n+\t(__cpp_lib_string_resize_and_overwrite): Likewise.\n+\t(__cpp_lib_to_underlying): Likewise.\n+\n+2022-03-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/105021\n+\t* include/bits/atomic_base.h [!_GLIBCXX_HOSTED]: Do not include\n+\t<bits/atomic_wait.h> for freestanding.\n+\n 2022-03-22  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* testsuite/20_util/from_chars/6.cc (test01) [FE_DOWNWARD]:"}]}