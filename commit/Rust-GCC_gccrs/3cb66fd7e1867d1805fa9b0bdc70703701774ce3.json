{"sha": "3cb66fd7e1867d1805fa9b0bdc70703701774ce3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NiNjZmZDdlMTg2N2QxODA1ZmE5YjBiZGM3MDcwMzcwMTc3NGNlMw==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@cambridge.redhat.com", "date": "2002-02-04T20:23:07Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2002-02-04T20:23:07Z"}, "message": "Replace current_function_anonymous_args with cfun->machine->uses_anonymous_args\n\nFrom-SVN: r49490", "tree": {"sha": "740a98eeb770595e8f0747afc215938a40456aac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/740a98eeb770595e8f0747afc215938a40456aac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cb66fd7e1867d1805fa9b0bdc70703701774ce3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cb66fd7e1867d1805fa9b0bdc70703701774ce3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cb66fd7e1867d1805fa9b0bdc70703701774ce3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cb66fd7e1867d1805fa9b0bdc70703701774ce3/comments", "author": null, "committer": null, "parents": [{"sha": "53804e7c808fd0512da802348aa61d472263a709", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53804e7c808fd0512da802348aa61d472263a709", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53804e7c808fd0512da802348aa61d472263a709"}], "stats": {"total": 54, "additions": 24, "deletions": 30}, "files": [{"sha": "f4311b42c4e888b893142252cd0538b6942261ea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cb66fd7e1867d1805fa9b0bdc70703701774ce3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cb66fd7e1867d1805fa9b0bdc70703701774ce3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3cb66fd7e1867d1805fa9b0bdc70703701774ce3", "patch": "@@ -1,3 +1,15 @@\n+2002-02-04  Nick Clifton  <nickc@cambridge.redhat.com>\n+\n+\t* config/arm/arm.h (machine_function): Add uses_anonymous_args\n+\tfield.\n+        (SETUP_INCOMING_VARARGS): Set uses_anonymous_args.\n+\t* config/arm/arm.c (current_function_anonymous_args): Delete,\n+        replace uses with cfun->machine->uses_anonymous_args.\n+        (arm_reorg): Do not reset uses_anonymous_args.\n+\n+\t* config/arm/arm.c (arm_hard_regno_mode_ok): Allow any value in\n+\tany geenral register.\n+\t\n 2001-02-04  Bernd Schmidt  <bernds@redhat.com>\n \n \t* cfgrtl.c (force_nonfallthru_and_redirect): Don't try to redirect"}, {"sha": "160cd297225f951313d3d93f812a597b488622ad", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 9, "deletions": 26, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cb66fd7e1867d1805fa9b0bdc70703701774ce3/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cb66fd7e1867d1805fa9b0bdc70703701774ce3/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=3cb66fd7e1867d1805fa9b0bdc70703701774ce3", "patch": "@@ -266,9 +266,6 @@ int thumb_code = 0;\n    PRINT_OPERAND_ADDRESS.  */\n enum machine_mode output_memory_reference_mode;\n \n-/* Nonzero if the prologue must setup `fp'.  */\n-int current_function_anonymous_args;\n-\n /* The register number to be used for the PIC offset register.  */\n const char * arm_pic_register_string = NULL;\n int arm_pic_register = 9;\n@@ -909,7 +906,7 @@ use_return_insn (iscond)\n   \n   /* As do variadic functions.  */\n   if (current_function_pretend_args_size\n-      || current_function_anonymous_args\n+      || cfun->machine->uses_anonymous_args\n       /* Of if the function calls __builtin_eh_return () */\n       || ARM_FUNC_TYPE (func_type) == ARM_FT_EXCEPTION_HANDLER\n       /* Or if there is no frame pointer and there is a stack adjustment.  */\n@@ -7457,9 +7454,9 @@ arm_output_function_prologue (f, frame_size)\n \t       current_function_args_size,\n \t       current_function_pretend_args_size, frame_size);\n \n-  asm_fprintf (f, \"\\t%@ frame_needed = %d, current_function_anonymous_args = %d\\n\",\n+  asm_fprintf (f, \"\\t%@ frame_needed = %d, uses_anonymous_args = %d\\n\",\n \t       frame_pointer_needed,\n-\t       current_function_anonymous_args);\n+\t       cfun->machine->uses_anonymous_args);\n \n   if (cfun->machine->lr_save_eliminated)\n     asm_fprintf (f, \"\\t%@ link register save eliminated.\\n\");\n@@ -7754,7 +7751,6 @@ arm_output_function_epilogue (file, frame_size)\n \tabort ();\n \n       /* Reset the ARM-specific per-function variables.  */\n-      current_function_anonymous_args = 0;\n       after_arm_reorg = 0;\n     }\n }\n@@ -8068,7 +8064,7 @@ arm_compute_initial_elimination_offset (from, to)\n \t  /* FIXME:  Not sure about this.  Maybe we should always return 0 ?  */\n \t  return (frame_pointer_needed\n \t\t  && current_function_needs_context\n-\t\t  && ! current_function_anonymous_args) ? 4 : 0;\n+\t\t  && ! cfun->machine->uses_anonymous_args) ? 4 : 0;\n \n \tcase STACK_POINTER_REGNUM:\n \t  /* If nothing has been pushed on the stack at all\n@@ -8209,7 +8205,7 @@ arm_expand_prologue ()\n \t  else\n \t    {\n \t      /* Store the args on the stack.  */\n-\t      if (current_function_anonymous_args)\n+\t      if (cfun->machine->uses_anonymous_args)\n \t\tinsn = emit_multi_reg_push\n \t\t  ((0xf0 >> (args_to_push / 4)) & 0xf);\n \t      else\n@@ -8245,7 +8241,7 @@ arm_expand_prologue ()\n   if (args_to_push)\n     {\n       /* Push the argument registers, or reserve space for them.  */\n-      if (current_function_anonymous_args)\n+      if (cfun->machine->uses_anonymous_args)\n \tinsn = emit_multi_reg_push\n \t  ((0xf0 >> (args_to_push / 4)) & 0xf);\n       else\n@@ -9139,20 +9135,8 @@ arm_hard_regno_mode_ok (regno, mode)\n     return (NUM_REGS (mode) < 2) || (regno < LAST_LO_REGNUM);\n \n   if (regno <= LAST_ARM_REGNUM)\n-    /* We allow an SImode or smaller value to be stored in any\n-       general purpose register.  This does not mean, for example\n-       that GCC will choose to store a variable in the stack pointer\n-       since it is a fixed register.  But it is important to allow\n-       access to these special registers, so that they can be\n-       referenced from C code via the asm assembler alias, eg:\n-\n-          register char * stack_ptr asm (\"sp\");\n-\n-       For any mode requiring more than one register to hold the\n-       value we restrict the choice so that r13, r14, and r15\n-       cannot be part of the register set.  */\n-    return (NUM_REGS (mode) <= 1)\n-      || (regno < (SP_REGNUM - (unsigned) NUM_REGS (mode)));\n+    /* We allow any value to be stored in the general regisetrs.  */\n+    return 1;\n \n   if (   regno == FRAME_POINTER_REGNUM\n       || regno == ARG_POINTER_REGNUM)\n@@ -10187,7 +10171,6 @@ thumb_expand_prologue ()\n \t  if (regno > LAST_LO_REGNUM) /* Very unlikely */\n \t    {\n \t      rtx spare = gen_rtx (REG, SImode, IP_REGNUM);\n-\t      rtx insn;\n \n \t      /* Choose an arbitary, non-argument low register.  */\n \t      reg = gen_rtx (REG, SImode, LAST_LO_REGNUM);\n@@ -10312,7 +10295,7 @@ thumb_output_function_prologue (f, size)\n     \n   if (current_function_pretend_args_size)\n     {\n-      if (current_function_anonymous_args)\n+      if (cfun->machine->uses_anonymous_args)\n \t{\n \t  int num_pushes;\n \t  "}, {"sha": "9b60d7bda594fd2dbc522e04cf590a22fcd6115f", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cb66fd7e1867d1805fa9b0bdc70703701774ce3/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cb66fd7e1867d1805fa9b0bdc70703701774ce3/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=3cb66fd7e1867d1805fa9b0bdc70703701774ce3", "patch": "@@ -81,8 +81,6 @@ extern struct rtx_def * pool_vector_label;\n /* Set to 1 when a return insn is output, this means that the epilogue\n    is not needed. */\n extern int return_used_this_function;\n-/* Nonzero if the prologue must setup `fp'.  */\n-extern int current_function_anonymous_args;\n \f\n /* Just in case configure has failed to define anything. */\n #ifndef TARGET_CPU_DEFAULT\n@@ -1454,6 +1452,8 @@ typedef struct machine_function\n   int lr_save_eliminated;\n   /* Records the type of the current function.  */\n   unsigned long func_type;\n+  /* Record if the function has a variable argument list.  */\n+  int uses_anonymous_args;\n }\n machine_function;\n \n@@ -1536,8 +1536,7 @@ typedef struct\n    that way.  */\n #define SETUP_INCOMING_VARARGS(CUM, MODE, TYPE, PRETEND_SIZE, NO_RTL)\t\\\n {\t\t\t\t\t\t\t\t\t\\\n-  extern int current_function_anonymous_args;\t\t\t\t\\\n-  current_function_anonymous_args = 1;\t\t\t\t\t\\\n+  cfun->machine->uses_anonymous_args = 1;\t\t\t\t\\\n   if ((CUM).nregs < NUM_ARG_REGS)\t\t\t\t\t\\\n     (PRETEND_SIZE) = (NUM_ARG_REGS - (CUM).nregs) * UNITS_PER_WORD;\t\\\n }"}]}