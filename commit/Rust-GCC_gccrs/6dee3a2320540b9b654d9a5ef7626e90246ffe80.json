{"sha": "6dee3a2320540b9b654d9a5ef7626e90246ffe80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRlZTNhMjMyMDU0MGI5YjY1NGQ5YTVlZjc2MjZlOTAyNDZmZmU4MA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2001-10-24T21:39:24Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2001-10-24T21:39:24Z"}, "message": "Makefile.in: Rebuilt.\n\n2001-10-24  Tom Tromey  <tromey@redhat.com>\n            Warren Levy  <warrenl@redhat.com>\n\n\t* Makefile.in: Rebuilt.\n\t* Makefile.am (javax_source_files): New macro.\n\t(ordinary_java_source_files): Added javax_source_files.\n\t(libgcj.jar): Search javax for class files.\n\t* javax/naming/LinkException.java (toString): Wrote.\n\t(toString(boolean)): Likewise.\n\t* javax/naming/ldap/InitialLdapContext.java: New file.\n\t* javax/naming/directory/InitialDirContext.java: Wrote.\n\t* javax/naming/spi/NamingManager.java (getPlusPath): Now has\n\tpackage-private protection.\n\t(getURLContext): Likewise.\n\t(NamingManager): Likewise.\n\t* javax/naming/spi/DirectoryManager.java: New file.\n\t* javax/naming/directory/BasicAttributes.java: New file.\n\t* javax/naming/directory/BasicAttribute.java: New file.\n\t* javax/naming/spi/ResolveResult.java\n\t(ResolveResult(Object,String)): Wrote.\n\t(appendRemainingName): Uncommented body.\n\t(appendRemainingComponent): Likewise.\n\t* javax/naming/ldap/ControlFactory.java: New file.\n\t* javax/naming/directory/AttributeModificationException.java\n\t(toString): Wrote.\n\t* javax/naming/spi/NamingManager.java (NamingManager): New\n\tconstructor.\n\t(setInitialContextFactoryBuilder): Wrote.\n\t(getInitialContext): Look in system properties for class name as\n\twell.  Use Class.forName().\n\t(getURLContext): Wrote.\n\t(ofb): New field.\n\t(setObjectFactoryBuilder): Wrote.\n\t(getObjectInstance): Wrote.\n\t(getContinuationContext): Wrote.\n\t(getPlusPath): New private method.\n\t(getStateToBind): Wrote.\n\t* javax/naming/CannotProceedException.java: Added missing methods &\n\tfields.\n\t* javax/naming/LinkException.java: Added missing methods & fields.\n\t* javax/naming/ReferralException.java (ReferralException): Made\n\tconstructor protected per spec.\n\tAdded missing abstract methods.\n\t* javax/naming/directory/Attribute.java: Updated copyright.\n\t* javax/naming/directory/AttributeModificationException.java: Ditto.\n\t* javax/naming/directory/Attributes.java: Ditto.\n\t* javax/naming/directory/DirContext.java: Ditto.\n\t* javax/naming/spi/NamingManager.java: Ditto.\n\t* javax/naming/spi/ResolveResult.java: Added comment.\n\t* javax/naming/directory/Attribute.java: Added missing interface\n\tmethods.\n\t* javax/naming/directory/AttributeModificationException.java:\n\tAdded missing methods & fields.\n\t* javax/naming/directory/directory/Attributes.java: Added missing\n\tinterface methods.\n\t* javax/naming/directory/SearchControls.java: Maded serialized fields\n\tprivate.\n\t* javax/naming/event/NamingEvent.java: Added comment.\n\t* javax/naming/event/NamingExceptionEvent.java: Maded serialized field\n\tprivate.\n\t* javax/naming/ldap/UnsolicitedNotificationEvent.java: Maded\n\tserialized field private.\n\t* javax/naming/spi/NamingManager.java: Added missing field and stubbed\n\tmissing methods.\n\t* javax/naming/directory/DirContext.java: Added missing interface\n\tfields & methods.\n\t* javax/naming/directory/InitialDirContext.java: Stubbed missing\n\tmethods.\n\t* javax/naming/directory/ModificationItem.java: New class.\n\t* javax/naming/directory/SearchResult.java: New class.\n\t* javax/naming/directory/SearchControls.java: New class.\n\t* javax/naming/event/EventContext.java: New class.\n\t* javax/naming/event/EventDirContext.java: New class.\n\t* javax/naming/event/NamespaceChangeListener.java: New class.\n\t* javax/naming/event/NamingEvent.java: New class.\n\t* javax/naming/event/NamingExceptionEvent.java: New class.\n\t* javax/naming/event/NamingListener.java: New class.\n\t* javax/naming/event/ObjectChangeListener.java: New class.\n\t* javax/naming/ldap/Control.java: New class.\n\t* javax/naming/ldap/ExtendedRequest.java: New class.\n\t* javax/naming/ldap/ExtendedResponse.java: New class.\n\t* javax/naming/ldap/HasControls.java: New class.\n\t* javax/naming/ldap/LdapContext.java: New class.\n\t* javax/naming/ldap/LdapReferralException.java: New class.\n\t* javax/naming/ldap/UnsolicitedNotification.java: New class.\n\t* javax/naming/ldap/UnsolicitedNotificationEvent.java: New class.\n\t* javax/naming/ldap/UnsolicitedNotificationListener.java: New class.\n\t* javax/naming/spi/DirObjectFactory.java: New class.\n\t* javax/naming/spi/DirStateFactory.java: New class.\n\t* javax/naming/spi/ObjectFactoryBuilder.java: New class.\n\t* javax/naming/spi/ResolveResult.java: New class.\n\t* javax/naming/spi/Resolver.java: New class.\n\t* javax/naming/spi/StateFactory.java: New class.\n\t* javax/naming/spi/ObjectFactory.java: Made an interface per spec.\n\t* java/rmi/RemoteException.java: New class.\n\t* javax/transaction/HeuristicCommitException.java: New class.\n\t* javax/transaction/HeuristicMixedException.java: New class.\n\t* javax/transaction/HeuristicRollbackException.java: New class.\n\t* javax/transaction/NotSupportedException.java: New class.\n\t* javax/transaction/RollbackException.java: New class.\n\t* javax/transaction/Status.java: New class.\n\t* javax/transaction/Synchronization.java: New class.\n\t* javax/transaction/SystemException.java: New class.\n\t* javax/transaction/Transaction.java: New class.\n\t* javax/transaction/TransactionManager.java: New class.\n\t* javax/transaction/UserTransaction.java: New class.\n\t* javax/transaction/xa/XAException.java: Added public static fields.\n\t* javax/transaction/xa/XAResource.java: New class.\n\t* javax/transaction/xa/Xid.java: New class.\n\t* javax/naming/CompoundName.java (CompoundName(String)): Reverse\n\telements if required.  Handle case where quote is at end of\n\tstring.\n\t* javax/naming/CompoundName.java (CompoundName(String)): Handle\n\ttext left at end of parsing.\n\t(toString): Handle empty element at beginning.\n\t* javax/naming/CompositeName.java (toString): Handle empty element\n\tat beginning.\n\t(CompositeName(String)): Handle text left at end of parsing.\n\tCorrectly compute boundary condition for quoting.\n\t* javax/naming/CompoundName.java: New file.\n\t* javax/naming/CompositeName.java: New file.\n\t* javax/naming/Binding.java: New file.\n\t* javax/naming/LinkRef.java: New file.\n\t* javax/naming/NameClassPair.java: New file.\n\t* javax/naming/Reference.java (addrs, classFactory,\n\tclassFactoryLocation): New fields.\n\t(className): Now protected.\n\t(Reference): New constructors.\n\t(add): Now public.  Implemented.\n\t(get(String)): Likewise.\n\t(add(int,RefAddr)): New method.\n\t(clear): Likewise.\n\t(clone): Likewise.\n\t(equals): Likewise.\n\t(get(int)): Likewise.\n\t(getAll): Likewise.\n\t(getFactoryClassLocation): Likewise.\n\t(getFactoryClassName): Likewise.\n\t(hashCode): Likewise.\n\t(remove): Likewise.\n\t(size): Likewise.\n\t(toString): Likewise.\n\t* javax/transaction/xa/XAException.java: New file.\n\t* javax/transaction/TransactionRolledbackException.java: New file.\n\t* javax/transaction/TransactionRequiredException.java: New file.\n\t* javax/transaction/InvalidTransactionException.java: New file.\n\t* javax/naming/directory/SchemaViolationException.java: Use\n\tcorrect package.  Import NamingException.\n\t* javax/naming/directory/NoSuchAttributeException.java,\n\tjavax/naming/directory/InvalidSearchFilterException.java,\n\tjavax/naming/directory/InvalidSearchControlsException.java,\n\tjavax/naming/directory/InvalidAttributesException.java,\n\tjavax/naming/directory/InvalidAttributeValueException.java,\n\tjavax/naming/directory/InvalidAttributeIdentifierException.java,\n\tjavax/naming/directory/AttributeModificationException.java,\n\tjavax/naming/directory/AttributeInUseException.java: Likewise.\n\t* javax/naming/directory/InitialDirContext.java (getAttributes):\n\tStub implementation.\n\t* javax/naming/RefAddr.java (RefAddr): Reindented.\n\t(equals): Renamed and reindented.\n\t* javax/naming/BinaryRefAddr.java (equals): Renamed and\n\treindented.\n\nCo-Authored-By: Warren Levy <warrenl@redhat.com>\n\nFrom-SVN: r46474", "tree": {"sha": "77f03cf3fdeebbd2596223d2c7c3196a423c195c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77f03cf3fdeebbd2596223d2c7c3196a423c195c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6dee3a2320540b9b654d9a5ef7626e90246ffe80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dee3a2320540b9b654d9a5ef7626e90246ffe80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dee3a2320540b9b654d9a5ef7626e90246ffe80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dee3a2320540b9b654d9a5ef7626e90246ffe80/comments", "author": null, "committer": null, "parents": [{"sha": "e1cb83c58069ad5b04dcd161564d159562dd8f25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1cb83c58069ad5b04dcd161564d159562dd8f25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1cb83c58069ad5b04dcd161564d159562dd8f25"}], "stats": {"total": 4764, "additions": 4663, "deletions": 101}, "files": [{"sha": "9e0dd10952139c0bbe8e47f49f45a5eb775f12af", "filename": "libjava/ChangeLog", "status": "modified", "additions": 163, "deletions": 0, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -1,3 +1,166 @@\n+2001-10-24  Tom Tromey  <tromey@redhat.com>\n+            Warren Levy  <warrenl@redhat.com>\n+\n+\t* Makefile.in: Rebuilt.\n+\t* Makefile.am (javax_source_files): New macro.\n+\t(ordinary_java_source_files): Added javax_source_files.\n+\t(libgcj.jar): Search javax for class files.\n+\t* javax/naming/LinkException.java (toString): Wrote.\n+\t(toString(boolean)): Likewise.\n+\t* javax/naming/ldap/InitialLdapContext.java: New file.\n+\t* javax/naming/directory/InitialDirContext.java: Wrote.\n+\t* javax/naming/spi/NamingManager.java (getPlusPath): Now has\n+\tpackage-private protection.\n+\t(getURLContext): Likewise.\n+\t(NamingManager): Likewise.\n+\t* javax/naming/spi/DirectoryManager.java: New file.\n+\t* javax/naming/directory/BasicAttributes.java: New file.\n+\t* javax/naming/directory/BasicAttribute.java: New file.\n+\t* javax/naming/spi/ResolveResult.java\n+\t(ResolveResult(Object,String)): Wrote.\n+\t(appendRemainingName): Uncommented body.\n+\t(appendRemainingComponent): Likewise.\n+\t* javax/naming/ldap/ControlFactory.java: New file.\n+\t* javax/naming/directory/AttributeModificationException.java\n+\t(toString): Wrote.\n+\t* javax/naming/spi/NamingManager.java (NamingManager): New\n+\tconstructor.\n+\t(setInitialContextFactoryBuilder): Wrote.\n+\t(getInitialContext): Look in system properties for class name as\n+\twell.  Use Class.forName().\n+\t(getURLContext): Wrote.\n+\t(ofb): New field.\n+\t(setObjectFactoryBuilder): Wrote.\n+\t(getObjectInstance): Wrote.\n+\t(getContinuationContext): Wrote.\n+\t(getPlusPath): New private method.\n+\t(getStateToBind): Wrote.\n+\t* javax/naming/CannotProceedException.java: Added missing methods &\n+\tfields.\n+\t* javax/naming/LinkException.java: Added missing methods & fields.\n+\t* javax/naming/ReferralException.java (ReferralException): Made\n+\tconstructor protected per spec.\n+\tAdded missing abstract methods.\n+\t* javax/naming/directory/Attribute.java: Updated copyright.\n+\t* javax/naming/directory/AttributeModificationException.java: Ditto.\n+\t* javax/naming/directory/Attributes.java: Ditto.\n+\t* javax/naming/directory/DirContext.java: Ditto.\n+\t* javax/naming/spi/NamingManager.java: Ditto.\n+\t* javax/naming/spi/ResolveResult.java: Added comment.\n+\t* javax/naming/directory/Attribute.java: Added missing interface\n+\tmethods.\n+\t* javax/naming/directory/AttributeModificationException.java:\n+\tAdded missing methods & fields.\n+\t* javax/naming/directory/directory/Attributes.java: Added missing\n+\tinterface methods.\n+\t* javax/naming/directory/SearchControls.java: Maded serialized fields\n+\tprivate.\n+\t* javax/naming/event/NamingEvent.java: Added comment.\n+\t* javax/naming/event/NamingExceptionEvent.java: Maded serialized field\n+\tprivate.\n+\t* javax/naming/ldap/UnsolicitedNotificationEvent.java: Maded\n+\tserialized field private.\n+\t* javax/naming/spi/NamingManager.java: Added missing field and stubbed\n+\tmissing methods.\n+\t* javax/naming/directory/DirContext.java: Added missing interface\n+\tfields & methods.\n+\t* javax/naming/directory/InitialDirContext.java: Stubbed missing\n+\tmethods.\n+\t* javax/naming/directory/ModificationItem.java: New class.\n+\t* javax/naming/directory/SearchResult.java: New class.\n+\t* javax/naming/directory/SearchControls.java: New class.\n+\t* javax/naming/event/EventContext.java: New class.\n+\t* javax/naming/event/EventDirContext.java: New class.\n+\t* javax/naming/event/NamespaceChangeListener.java: New class.\n+\t* javax/naming/event/NamingEvent.java: New class.\n+\t* javax/naming/event/NamingExceptionEvent.java: New class.\n+\t* javax/naming/event/NamingListener.java: New class.\n+\t* javax/naming/event/ObjectChangeListener.java: New class.\n+\t* javax/naming/ldap/Control.java: New class.\n+\t* javax/naming/ldap/ExtendedRequest.java: New class.\n+\t* javax/naming/ldap/ExtendedResponse.java: New class.\n+\t* javax/naming/ldap/HasControls.java: New class.\n+\t* javax/naming/ldap/LdapContext.java: New class.\n+\t* javax/naming/ldap/LdapReferralException.java: New class.\n+\t* javax/naming/ldap/UnsolicitedNotification.java: New class.\n+\t* javax/naming/ldap/UnsolicitedNotificationEvent.java: New class.\n+\t* javax/naming/ldap/UnsolicitedNotificationListener.java: New class.\n+\t* javax/naming/spi/DirObjectFactory.java: New class.\n+\t* javax/naming/spi/DirStateFactory.java: New class.\n+\t* javax/naming/spi/ObjectFactoryBuilder.java: New class.\n+\t* javax/naming/spi/ResolveResult.java: New class.\n+\t* javax/naming/spi/Resolver.java: New class.\n+\t* javax/naming/spi/StateFactory.java: New class.\n+\t* javax/naming/spi/ObjectFactory.java: Made an interface per spec.\n+\t* java/rmi/RemoteException.java: New class.\n+\t* javax/transaction/HeuristicCommitException.java: New class.\n+\t* javax/transaction/HeuristicMixedException.java: New class.\n+\t* javax/transaction/HeuristicRollbackException.java: New class.\n+\t* javax/transaction/NotSupportedException.java: New class.\n+\t* javax/transaction/RollbackException.java: New class.\n+\t* javax/transaction/Status.java: New class.\n+\t* javax/transaction/Synchronization.java: New class.\n+\t* javax/transaction/SystemException.java: New class.\n+\t* javax/transaction/Transaction.java: New class.\n+\t* javax/transaction/TransactionManager.java: New class.\n+\t* javax/transaction/UserTransaction.java: New class.\n+\t* javax/transaction/xa/XAException.java: Added public static fields.\n+\t* javax/transaction/xa/XAResource.java: New class.\n+\t* javax/transaction/xa/Xid.java: New class.\n+\t* javax/naming/CompoundName.java (CompoundName(String)): Reverse\n+\telements if required.  Handle case where quote is at end of\n+\tstring.\n+\t* javax/naming/CompoundName.java (CompoundName(String)): Handle\n+\ttext left at end of parsing.\n+\t(toString): Handle empty element at beginning.\n+\t* javax/naming/CompositeName.java (toString): Handle empty element\n+\tat beginning.\n+\t(CompositeName(String)): Handle text left at end of parsing.\n+\tCorrectly compute boundary condition for quoting.\n+\t* javax/naming/CompoundName.java: New file.\n+\t* javax/naming/CompositeName.java: New file.\n+\t* javax/naming/Binding.java: New file.\n+\t* javax/naming/LinkRef.java: New file.\n+\t* javax/naming/NameClassPair.java: New file.\n+\t* javax/naming/Reference.java (addrs, classFactory,\n+\tclassFactoryLocation): New fields.\n+\t(className): Now protected.\n+\t(Reference): New constructors.\n+\t(add): Now public.  Implemented.\n+\t(get(String)): Likewise.\n+\t(add(int,RefAddr)): New method.\n+\t(clear): Likewise.\n+\t(clone): Likewise.\n+\t(equals): Likewise.\n+\t(get(int)): Likewise.\n+\t(getAll): Likewise.\n+\t(getFactoryClassLocation): Likewise.\n+\t(getFactoryClassName): Likewise.\n+\t(hashCode): Likewise.\n+\t(remove): Likewise.\n+\t(size): Likewise.\n+\t(toString): Likewise.\n+\t* javax/transaction/xa/XAException.java: New file.\n+\t* javax/transaction/TransactionRolledbackException.java: New file.\n+\t* javax/transaction/TransactionRequiredException.java: New file.\n+\t* javax/transaction/InvalidTransactionException.java: New file.\n+\t* javax/naming/directory/SchemaViolationException.java: Use\n+\tcorrect package.  Import NamingException.\n+\t* javax/naming/directory/NoSuchAttributeException.java,\n+\tjavax/naming/directory/InvalidSearchFilterException.java,\n+\tjavax/naming/directory/InvalidSearchControlsException.java,\n+\tjavax/naming/directory/InvalidAttributesException.java,\n+\tjavax/naming/directory/InvalidAttributeValueException.java,\n+\tjavax/naming/directory/InvalidAttributeIdentifierException.java,\n+\tjavax/naming/directory/AttributeModificationException.java,\n+\tjavax/naming/directory/AttributeInUseException.java: Likewise.\n+\t* javax/naming/directory/InitialDirContext.java (getAttributes):\n+\tStub implementation.\n+\t* javax/naming/RefAddr.java (RefAddr): Reindented.\n+\t(equals): Renamed and reindented.\n+\t* javax/naming/BinaryRefAddr.java (equals): Renamed and\n+\treindented.\n+\n 2001-10-24  Tom Tromey  <tromey@redhat.com>\n \n \t* java/lang/reflect/Field.java: Made many methods private."}, {"sha": "84ac600cbefafd46517d3e969825f7370d787255", "filename": "libjava/Makefile.am", "status": "modified", "additions": 111, "deletions": 2, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -192,7 +192,7 @@ libgcj.jar: $(built_java_source_files) $(java_source_files) $(x_java_source_file\n \ttest \"$$fail\" = no)\n \t-@rm -f tmp-list libgcj.jar\n ## Note that we explicitly want to include directory information.\n-\tfind java gnu org -type d -o -type f -name '*.class' | \\\n+\tfind java gnu javax org -type d -o -type f -name '*.class' | \\\n \t  sed -e '/\\/\\./d' -e '/\\/xlib/d' | \\\n \t  $(ZIP) cfM0E@ $@\n \n@@ -912,6 +912,114 @@ gnu/java/rmi/server/UnicastRemoteStub.java \\\n gnu/java/rmi/server/UnicastServer.java \\\n gnu/java/rmi/server/UnicastServerRef.java\n \n+javax_source_files = \\\n+javax/naming/directory/Attribute.java \\\n+javax/naming/directory/AttributeInUseException.java \\\n+javax/naming/directory/AttributeModificationException.java \\\n+javax/naming/directory/Attributes.java \\\n+javax/naming/directory/DirContext.java \\\n+javax/naming/directory/InvalidAttributeIdentifierException.java\t\\\n+javax/naming/directory/InvalidAttributeValueException.java \\\n+javax/naming/directory/InvalidAttributesException.java \\\n+javax/naming/directory/InvalidSearchControlsException.java \\\n+javax/naming/directory/InvalidSearchFilterException.java \\\n+javax/naming/directory/NoSuchAttributeException.java \\\n+javax/naming/directory/SchemaViolationException.java \\\n+javax/naming/directory/BasicAttribute.java \\\n+javax/naming/directory/BasicAttributes.java \\\n+javax/naming/directory/ModificationItem.java \\\n+javax/naming/directory/SearchControls.java \\\n+javax/naming/directory/SearchResult.java \\\n+javax/naming/directory/InitialDirContext.java \\\n+javax/naming/AuthenticationException.java \\\n+javax/naming/AuthenticationNotSupportedException.java \\\n+javax/naming/CannotProceedException.java \\\n+javax/naming/CommunicationException.java \\\n+javax/naming/ConfigurationException.java \\\n+javax/naming/Context.java \\\n+javax/naming/ContextNotEmptyException.java \\\n+javax/naming/InsufficientResourcesException.java \\\n+javax/naming/InterruptedNamingException.java \\\n+javax/naming/BinaryRefAddr.java\t\\\n+javax/naming/LimitExceededException.java \\\n+javax/naming/LinkException.java\t\\\n+javax/naming/LinkLoopException.java \\\n+javax/naming/MalformedLinkException.java \\\n+javax/naming/Name.java \\\n+javax/naming/NameAlreadyBoundException.java \\\n+javax/naming/NameNotFoundException.java\t\\\n+javax/naming/NameParser.java \\\n+javax/naming/NamingEnumeration.java \\\n+javax/naming/InitialContext.java \\\n+javax/naming/NamingSecurityException.java \\\n+javax/naming/NoInitialContextException.java \\\n+javax/naming/NoPermissionException.java\t\\\n+javax/naming/NotContextException.java \\\n+javax/naming/NamingException.java \\\n+javax/naming/PartialResultException.java \\\n+javax/naming/event/EventContext.java \\\n+javax/naming/event/EventDirContext.java\t\\\n+javax/naming/event/NamespaceChangeListener.java\t\\\n+javax/naming/event/NamingEvent.java \\\n+javax/naming/event/NamingExceptionEvent.java \\\n+javax/naming/event/NamingListener.java \\\n+javax/naming/event/ObjectChangeListener.java \\\n+javax/naming/RefAddr.java \\\n+javax/naming/Reference.java \\\n+javax/naming/Referenceable.java\t\\\n+javax/naming/ReferralException.java \\\n+javax/naming/ServiceUnavailableException.java \\\n+javax/naming/SizeLimitExceededException.java \\\n+javax/naming/StringRefAddr.java\t\\\n+javax/naming/TimeLimitExceededException.java \\\n+javax/naming/spi/InitialContextFactory.java \\\n+javax/naming/spi/InitialContextFactoryBuilder.java \\\n+javax/naming/spi/NamingManager.java \\\n+javax/naming/spi/ObjectFactory.java \\\n+javax/naming/spi/Resolver.java \\\n+javax/naming/spi/DirObjectFactory.java \\\n+javax/naming/spi/DirStateFactory.java \\\n+javax/naming/spi/DirectoryManager.java \\\n+javax/naming/spi/ObjectFactoryBuilder.java \\\n+javax/naming/spi/ResolveResult.java \\\n+javax/naming/spi/StateFactory.java \\\n+javax/naming/InvalidNameException.java \\\n+javax/naming/Binding.java \\\n+javax/naming/CompositeName.java\t\\\n+javax/naming/CompoundName.java \\\n+javax/naming/LinkRef.java \\\n+javax/naming/NameClassPair.java\t\\\n+javax/naming/ldap/Control.java \\\n+javax/naming/ldap/ControlFactory.java \\\n+javax/naming/ldap/ExtendedRequest.java \\\n+javax/naming/ldap/ExtendedResponse.java\t\\\n+javax/naming/ldap/HasControls.java \\\n+javax/naming/ldap/InitialLdapContext.java \\\n+javax/naming/ldap/LdapContext.java \\\n+javax/naming/ldap/LdapReferralException.java \\\n+javax/naming/ldap/UnsolicitedNotification.java \\\n+javax/naming/ldap/UnsolicitedNotificationEvent.java \\\n+javax/naming/ldap/UnsolicitedNotificationListener.java \\\n+javax/naming/OperationNotSupportedException.java \\\n+javax/transaction/xa/XAException.java \\\n+javax/transaction/xa/XAResource.java \\\n+javax/transaction/xa/Xid.java \\\n+javax/transaction/HeuristicCommitException.java\t\\\n+javax/transaction/HeuristicMixedException.java \\\n+javax/transaction/HeuristicRollbackException.java \\\n+javax/transaction/InvalidTransactionException.java \\\n+javax/transaction/NotSupportedException.java \\\n+javax/transaction/RollbackException.java \\\n+javax/transaction/Status.java \\\n+javax/transaction/Synchronization.java \\\n+javax/transaction/SystemException.java \\\n+javax/transaction/Transaction.java \\\n+javax/transaction/TransactionManager.java \\\n+javax/transaction/TransactionRequiredException.java \\\n+javax/transaction/TransactionRolledbackException.java \\\n+javax/transaction/UserTransaction.java\n+\n+\n ## Java files which are created by configure and thus are in the build\n ## directory.\n built_java_source_files = java/lang/ConcreteProcess.java \\\n@@ -1475,7 +1583,8 @@ org/xml/sax/XMLFilter.java \\\n org/xml/sax/XMLReader.java \\\n $(rmi_java_source_files) \\\n $(awt_java_source_files) \\\n-$(convert_source_files)\n+$(convert_source_files) \\\n+$(javax_source_files)\n \n \n java_source_files = $(special_java_source_files) $(ordinary_java_source_files)"}, {"sha": "5519f6b257d7cd1b36d589110876ea0f17e4d17b", "filename": "libjava/Makefile.in", "status": "modified", "additions": 210, "deletions": 3, "changes": 213, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -654,6 +654,114 @@ gnu/java/rmi/server/UnicastServer.java \\\n gnu/java/rmi/server/UnicastServerRef.java\n \n \n+javax_source_files = \\\n+javax/naming/directory/Attribute.java \\\n+javax/naming/directory/AttributeInUseException.java \\\n+javax/naming/directory/AttributeModificationException.java \\\n+javax/naming/directory/Attributes.java \\\n+javax/naming/directory/DirContext.java \\\n+javax/naming/directory/InvalidAttributeIdentifierException.java\t\\\n+javax/naming/directory/InvalidAttributeValueException.java \\\n+javax/naming/directory/InvalidAttributesException.java \\\n+javax/naming/directory/InvalidSearchControlsException.java \\\n+javax/naming/directory/InvalidSearchFilterException.java \\\n+javax/naming/directory/NoSuchAttributeException.java \\\n+javax/naming/directory/SchemaViolationException.java \\\n+javax/naming/directory/BasicAttribute.java \\\n+javax/naming/directory/BasicAttributes.java \\\n+javax/naming/directory/ModificationItem.java \\\n+javax/naming/directory/SearchControls.java \\\n+javax/naming/directory/SearchResult.java \\\n+javax/naming/directory/InitialDirContext.java \\\n+javax/naming/AuthenticationException.java \\\n+javax/naming/AuthenticationNotSupportedException.java \\\n+javax/naming/CannotProceedException.java \\\n+javax/naming/CommunicationException.java \\\n+javax/naming/ConfigurationException.java \\\n+javax/naming/Context.java \\\n+javax/naming/ContextNotEmptyException.java \\\n+javax/naming/InsufficientResourcesException.java \\\n+javax/naming/InterruptedNamingException.java \\\n+javax/naming/BinaryRefAddr.java\t\\\n+javax/naming/LimitExceededException.java \\\n+javax/naming/LinkException.java\t\\\n+javax/naming/LinkLoopException.java \\\n+javax/naming/MalformedLinkException.java \\\n+javax/naming/Name.java \\\n+javax/naming/NameAlreadyBoundException.java \\\n+javax/naming/NameNotFoundException.java\t\\\n+javax/naming/NameParser.java \\\n+javax/naming/NamingEnumeration.java \\\n+javax/naming/InitialContext.java \\\n+javax/naming/NamingSecurityException.java \\\n+javax/naming/NoInitialContextException.java \\\n+javax/naming/NoPermissionException.java\t\\\n+javax/naming/NotContextException.java \\\n+javax/naming/NamingException.java \\\n+javax/naming/PartialResultException.java \\\n+javax/naming/event/EventContext.java \\\n+javax/naming/event/EventDirContext.java\t\\\n+javax/naming/event/NamespaceChangeListener.java\t\\\n+javax/naming/event/NamingEvent.java \\\n+javax/naming/event/NamingExceptionEvent.java \\\n+javax/naming/event/NamingListener.java \\\n+javax/naming/event/ObjectChangeListener.java \\\n+javax/naming/RefAddr.java \\\n+javax/naming/Reference.java \\\n+javax/naming/Referenceable.java\t\\\n+javax/naming/ReferralException.java \\\n+javax/naming/ServiceUnavailableException.java \\\n+javax/naming/SizeLimitExceededException.java \\\n+javax/naming/StringRefAddr.java\t\\\n+javax/naming/TimeLimitExceededException.java \\\n+javax/naming/spi/InitialContextFactory.java \\\n+javax/naming/spi/InitialContextFactoryBuilder.java \\\n+javax/naming/spi/NamingManager.java \\\n+javax/naming/spi/ObjectFactory.java \\\n+javax/naming/spi/Resolver.java \\\n+javax/naming/spi/DirObjectFactory.java \\\n+javax/naming/spi/DirStateFactory.java \\\n+javax/naming/spi/DirectoryManager.java \\\n+javax/naming/spi/ObjectFactoryBuilder.java \\\n+javax/naming/spi/ResolveResult.java \\\n+javax/naming/spi/StateFactory.java \\\n+javax/naming/InvalidNameException.java \\\n+javax/naming/Binding.java \\\n+javax/naming/CompositeName.java\t\\\n+javax/naming/CompoundName.java \\\n+javax/naming/LinkRef.java \\\n+javax/naming/NameClassPair.java\t\\\n+javax/naming/ldap/Control.java \\\n+javax/naming/ldap/ControlFactory.java \\\n+javax/naming/ldap/ExtendedRequest.java \\\n+javax/naming/ldap/ExtendedResponse.java\t\\\n+javax/naming/ldap/HasControls.java \\\n+javax/naming/ldap/InitialLdapContext.java \\\n+javax/naming/ldap/LdapContext.java \\\n+javax/naming/ldap/LdapReferralException.java \\\n+javax/naming/ldap/UnsolicitedNotification.java \\\n+javax/naming/ldap/UnsolicitedNotificationEvent.java \\\n+javax/naming/ldap/UnsolicitedNotificationListener.java \\\n+javax/naming/OperationNotSupportedException.java \\\n+javax/transaction/xa/XAException.java \\\n+javax/transaction/xa/XAResource.java \\\n+javax/transaction/xa/Xid.java \\\n+javax/transaction/HeuristicCommitException.java\t\\\n+javax/transaction/HeuristicMixedException.java \\\n+javax/transaction/HeuristicRollbackException.java \\\n+javax/transaction/InvalidTransactionException.java \\\n+javax/transaction/NotSupportedException.java \\\n+javax/transaction/RollbackException.java \\\n+javax/transaction/Status.java \\\n+javax/transaction/Synchronization.java \\\n+javax/transaction/SystemException.java \\\n+javax/transaction/Transaction.java \\\n+javax/transaction/TransactionManager.java \\\n+javax/transaction/TransactionRequiredException.java \\\n+javax/transaction/TransactionRolledbackException.java \\\n+javax/transaction/UserTransaction.java\n+\n+\n built_java_source_files = java/lang/ConcreteProcess.java \\\n                           gnu/classpath/Configuration.java\n \n@@ -1208,7 +1316,8 @@ org/xml/sax/XMLFilter.java \\\n org/xml/sax/XMLReader.java \\\n $(rmi_java_source_files) \\\n $(awt_java_source_files) \\\n-$(convert_source_files)\n+$(convert_source_files) \\\n+$(javax_source_files)\n \n \n java_source_files = $(special_java_source_files) $(ordinary_java_source_files)\n@@ -2140,7 +2249,105 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/util/zip/ZipException.P .deps/java/util/zip/ZipFile.P \\\n .deps/java/util/zip/ZipInputStream.P \\\n .deps/java/util/zip/ZipOutputStream.P .deps/java/util/zip/natDeflater.P \\\n-.deps/java/util/zip/natInflater.P .deps/jni.P .deps/name-finder.P \\\n+.deps/java/util/zip/natInflater.P \\\n+.deps/javax/naming/AuthenticationException.P \\\n+.deps/javax/naming/AuthenticationNotSupportedException.P \\\n+.deps/javax/naming/BinaryRefAddr.P .deps/javax/naming/Binding.P \\\n+.deps/javax/naming/CannotProceedException.P \\\n+.deps/javax/naming/CommunicationException.P \\\n+.deps/javax/naming/CompositeName.P .deps/javax/naming/CompoundName.P \\\n+.deps/javax/naming/ConfigurationException.P \\\n+.deps/javax/naming/Context.P \\\n+.deps/javax/naming/ContextNotEmptyException.P \\\n+.deps/javax/naming/InitialContext.P \\\n+.deps/javax/naming/InsufficientResourcesException.P \\\n+.deps/javax/naming/InterruptedNamingException.P \\\n+.deps/javax/naming/InvalidNameException.P \\\n+.deps/javax/naming/LimitExceededException.P \\\n+.deps/javax/naming/LinkException.P \\\n+.deps/javax/naming/LinkLoopException.P .deps/javax/naming/LinkRef.P \\\n+.deps/javax/naming/MalformedLinkException.P .deps/javax/naming/Name.P \\\n+.deps/javax/naming/NameAlreadyBoundException.P \\\n+.deps/javax/naming/NameClassPair.P \\\n+.deps/javax/naming/NameNotFoundException.P \\\n+.deps/javax/naming/NameParser.P .deps/javax/naming/NamingEnumeration.P \\\n+.deps/javax/naming/NamingException.P \\\n+.deps/javax/naming/NamingSecurityException.P \\\n+.deps/javax/naming/NoInitialContextException.P \\\n+.deps/javax/naming/NoPermissionException.P \\\n+.deps/javax/naming/NotContextException.P \\\n+.deps/javax/naming/OperationNotSupportedException.P \\\n+.deps/javax/naming/PartialResultException.P \\\n+.deps/javax/naming/RefAddr.P .deps/javax/naming/Reference.P \\\n+.deps/javax/naming/Referenceable.P \\\n+.deps/javax/naming/ReferralException.P \\\n+.deps/javax/naming/ServiceUnavailableException.P \\\n+.deps/javax/naming/SizeLimitExceededException.P \\\n+.deps/javax/naming/StringRefAddr.P \\\n+.deps/javax/naming/TimeLimitExceededException.P \\\n+.deps/javax/naming/directory/Attribute.P \\\n+.deps/javax/naming/directory/AttributeInUseException.P \\\n+.deps/javax/naming/directory/AttributeModificationException.P \\\n+.deps/javax/naming/directory/Attributes.P \\\n+.deps/javax/naming/directory/BasicAttribute.P \\\n+.deps/javax/naming/directory/BasicAttributes.P \\\n+.deps/javax/naming/directory/DirContext.P \\\n+.deps/javax/naming/directory/InitialDirContext.P \\\n+.deps/javax/naming/directory/InvalidAttributeIdentifierException.P \\\n+.deps/javax/naming/directory/InvalidAttributeValueException.P \\\n+.deps/javax/naming/directory/InvalidAttributesException.P \\\n+.deps/javax/naming/directory/InvalidSearchControlsException.P \\\n+.deps/javax/naming/directory/InvalidSearchFilterException.P \\\n+.deps/javax/naming/directory/ModificationItem.P \\\n+.deps/javax/naming/directory/NoSuchAttributeException.P \\\n+.deps/javax/naming/directory/SchemaViolationException.P \\\n+.deps/javax/naming/directory/SearchControls.P \\\n+.deps/javax/naming/directory/SearchResult.P \\\n+.deps/javax/naming/event/EventContext.P \\\n+.deps/javax/naming/event/EventDirContext.P \\\n+.deps/javax/naming/event/NamespaceChangeListener.P \\\n+.deps/javax/naming/event/NamingEvent.P \\\n+.deps/javax/naming/event/NamingExceptionEvent.P \\\n+.deps/javax/naming/event/NamingListener.P \\\n+.deps/javax/naming/event/ObjectChangeListener.P \\\n+.deps/javax/naming/ldap/Control.P \\\n+.deps/javax/naming/ldap/ControlFactory.P \\\n+.deps/javax/naming/ldap/ExtendedRequest.P \\\n+.deps/javax/naming/ldap/ExtendedResponse.P \\\n+.deps/javax/naming/ldap/HasControls.P \\\n+.deps/javax/naming/ldap/InitialLdapContext.P \\\n+.deps/javax/naming/ldap/LdapContext.P \\\n+.deps/javax/naming/ldap/LdapReferralException.P \\\n+.deps/javax/naming/ldap/UnsolicitedNotification.P \\\n+.deps/javax/naming/ldap/UnsolicitedNotificationEvent.P \\\n+.deps/javax/naming/ldap/UnsolicitedNotificationListener.P \\\n+.deps/javax/naming/spi/DirObjectFactory.P \\\n+.deps/javax/naming/spi/DirStateFactory.P \\\n+.deps/javax/naming/spi/DirectoryManager.P \\\n+.deps/javax/naming/spi/InitialContextFactory.P \\\n+.deps/javax/naming/spi/InitialContextFactoryBuilder.P \\\n+.deps/javax/naming/spi/NamingManager.P \\\n+.deps/javax/naming/spi/ObjectFactory.P \\\n+.deps/javax/naming/spi/ObjectFactoryBuilder.P \\\n+.deps/javax/naming/spi/ResolveResult.P \\\n+.deps/javax/naming/spi/Resolver.P .deps/javax/naming/spi/StateFactory.P \\\n+.deps/javax/transaction/HeuristicCommitException.P \\\n+.deps/javax/transaction/HeuristicMixedException.P \\\n+.deps/javax/transaction/HeuristicRollbackException.P \\\n+.deps/javax/transaction/InvalidTransactionException.P \\\n+.deps/javax/transaction/NotSupportedException.P \\\n+.deps/javax/transaction/RollbackException.P \\\n+.deps/javax/transaction/Status.P \\\n+.deps/javax/transaction/Synchronization.P \\\n+.deps/javax/transaction/SystemException.P \\\n+.deps/javax/transaction/Transaction.P \\\n+.deps/javax/transaction/TransactionManager.P \\\n+.deps/javax/transaction/TransactionRequiredException.P \\\n+.deps/javax/transaction/TransactionRolledbackException.P \\\n+.deps/javax/transaction/UserTransaction.P \\\n+.deps/javax/transaction/xa/XAException.P \\\n+.deps/javax/transaction/xa/XAResource.P \\\n+.deps/javax/transaction/xa/Xid.P .deps/jni.P .deps/name-finder.P \\\n .deps/no-threads.P .deps/nogc.P .deps/org/w3c/dom/Attr.P \\\n .deps/org/w3c/dom/CDATASection.P .deps/org/w3c/dom/CharacterData.P \\\n .deps/org/w3c/dom/Comment.P .deps/org/w3c/dom/DOMException.P \\\n@@ -2718,7 +2925,7 @@ libgcj.jar: $(built_java_source_files) $(java_source_files) $(x_java_source_file\n \tdone; \\\n \ttest \"$$fail\" = no)\n \t-@rm -f tmp-list libgcj.jar\n-\tfind java gnu org -type d -o -type f -name '*.class' | \\\n+\tfind java gnu javax org -type d -o -type f -name '*.class' | \\\n \t  sed -e '/\\/\\./d' -e '/\\/xlib/d' | \\\n \t  $(ZIP) cfM0E@ $@\n "}, {"sha": "7206ab3d62289b474b7d681cc9e85dc26cde3b69", "filename": "libjava/javax/naming/BinaryRefAddr.java", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2FBinaryRefAddr.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2FBinaryRefAddr.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2FBinaryRefAddr.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -86,17 +86,17 @@ public Object getContent ()\n    *         the addrType is the same as this addrType and the bytes of the\n    *         content are the same.\n    */\n-  public boolean equal(Object o)\n+  public boolean equals (Object o)\n   {\n     if (o instanceof BinaryRefAddr)\n       {\n         BinaryRefAddr refAddr = (BinaryRefAddr) o;\n         if (this.getType().equals(refAddr.getType()))\n-        {\n-          byte[] c1 = (byte[]) this.getContent();\n-          byte[] c2 = (byte[]) refAddr.getContent();\n-\t  return Arrays.equals(c1, c2);\n-        }\n+\t  {\n+\t    byte[] c1 = (byte[]) this.getContent();\n+\t    byte[] c2 = (byte[]) refAddr.getContent();\n+\t    return Arrays.equals(c1, c2);\n+\t  }\n       }\n     return false;\n   }"}, {"sha": "e8ee4a24571da99faa73b4ccff22570c9bbf3ac7", "filename": "libjava/javax/naming/Binding.java", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2FBinding.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2FBinding.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2FBinding.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,68 @@\n+/* Copyright (C) 2001 Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package javax.naming;\n+\n+/**\n+ * @author Tom Tromey <tromey@redhat.com>\n+ * @date May 16, 2001\n+ */\n+public class Binding extends NameClassPair\n+{\n+  public Binding (String name, Object obj)\n+  {\n+    super (name, null);\n+    boundObj = obj;\n+  }\n+\n+  public Binding (String name, Object obj, boolean isRelative)\n+  {\n+    super (name, null, isRelative);\n+    boundObj = obj;\n+  }\n+\n+  public Binding (String name, String className, Object obj)\n+  {\n+    super (name, className);\n+    boundObj = obj;\n+  }\n+\n+  public Binding (String name, String className, Object obj,\n+\t\t  boolean isRelative)\n+  {\n+    super (name, className, isRelative);\n+    boundObj = obj;\n+  }\n+\n+  public String getClassName ()\n+  {\n+    String r = super.getClassName ();\n+    if (r != null)\n+      return r;\n+    return boundObj == null ? null : boundObj.getClass ().getName ();\n+  }\n+\n+  public Object getObject ()\n+  {\n+    return boundObj;\n+  }\n+\n+  public void setObject (Object obj)\n+  {\n+    boundObj = obj;\n+  }\n+\n+  public String toString ()\n+  {\n+    // Format specified by the documentation.\n+    return super.toString () + \":\" + boundObj.toString ();\n+  }\n+\n+  // This name is fixed by the serialization spec.\n+  private Object boundObj;\n+}"}, {"sha": "f35e147b2dfa30bb08bb4617890e6c68a77feca4", "filename": "libjava/javax/naming/CannotProceedException.java", "status": "modified", "additions": 53, "deletions": 1, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2FCannotProceedException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2FCannotProceedException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2FCannotProceedException.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* Copyright (C) 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -9,9 +9,21 @@\n package javax.naming;\n \n import java.lang.Exception;\n+import java.util.Hashtable;\n  \n+/**\n+ * @author Warren Levy <warrenl@redhat.com>\n+ * @date June 14, 2001\n+ */\n+\n public class CannotProceedException extends NamingException\n {\n+  // Serialized fields.\n+  protected Name remainingNewName;\n+  protected Hashtable environment;\n+  protected Name altName;\n+  protected Context altNameCtx;\n+\n   public CannotProceedException ()\n   {\n     super ();\n@@ -21,4 +33,44 @@ public CannotProceedException (String msg)\n   {\n     super (msg);\n   }\n+\n+  public Hashtable getEnvironment()\n+  {\n+    return environment;\n+  }\n+\n+  public void setEnvironment(Hashtable environment)\n+  {\n+    this.environment = environment;\n+  }\n+\n+  public Name getRemainingNewName()\n+  {\n+    return remainingNewName;\n+  }\n+\n+  public void setRemainingNewName(Name newName)\n+  {\n+    remainingNewName = (Name) newName.clone();\n+  }\n+\n+  public Name getAltName()\n+  {\n+    return altName;\n+  }\n+\n+  public void setAltName(Name altName)\n+  {\n+    this.altName = altName;\n+  }\n+\n+  public Context getAltNameCtx()\n+  {\n+    return altNameCtx;\n+  }\n+\n+  public void setAltNameCtx(Context altNameCtx)\n+  {\n+    this.altNameCtx = altNameCtx;\n+  }\n }"}, {"sha": "afc85d53f230553834d769d2f7210f2b62131813", "filename": "libjava/javax/naming/CompositeName.java", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2FCompositeName.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2FCompositeName.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2FCompositeName.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,289 @@\n+/* Copyright (C) 2001 Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package javax.naming;\n+\n+import java.io.Serializable;\n+import java.util.Enumeration;\n+import java.util.NoSuchElementException;\n+import java.util.Vector;\n+\n+/**\n+ * @author Tom Tromey <tromey@redhat.com>\n+ * @date May 16, 2001\n+ *\n+ * FIXME: must write readObject and writeObject to conform to\n+ * serialization spec.\n+ */\n+public class CompositeName implements Name, Cloneable, Serializable\n+{\n+  public CompositeName ()\n+  {\n+    elts = new Vector ();\n+  }\n+\n+  protected CompositeName (Enumeration comps)\n+  {\n+    elts = new Vector ();\n+    try\n+      {\n+\twhile (comps.hasMoreElements ())\n+\t  elts.add (comps.nextElement ());\n+      }\n+    catch (NoSuchElementException ignore)\n+      {\n+      }\n+  }\n+\n+  public CompositeName (String n) throws InvalidNameException\n+  {\n+    elts = new Vector ();\n+    // Parse the string into its components.\n+    final char no_quote = 'x';\t// Use 'x' to mean no quoting.\n+    char quote = no_quote;\n+    boolean escaped = false;\n+    StringBuffer new_element = new StringBuffer ();\n+    for (int i = 0; i < n.length (); ++i)\n+      {\n+\tchar c = n.charAt (i);\n+\tif (escaped)\n+\t  escaped = false;\n+\telse if (c == '\\\\')\n+\t  {\n+\t    escaped = true;\n+\t    continue;\n+\t  }\n+\telse if (quote != no_quote)\n+\t  {\n+\t    if (quote == c)\n+\t      {\n+\t\t// The quotes must surround a complete component.\n+\t\tif (i + 1 < n.length () && n.charAt (i + 1) != '/')\n+\t\t  throw new InvalidNameException (\"close quote before end of component\");\n+\t\telts.add (new_element.toString ());\n+\t\tnew_element.setLength (0);\n+\t\tquote = no_quote;\n+\t\tcontinue;\n+\t      }\n+\t    // Otherwise, fall through.\n+\t  }\n+\t// Quotes are only special at the start of a component.\n+\telse if (new_element.length () == 0\n+\t\t && (c == '\\'' || c == '\"'))\n+\t  {\n+\t    quote = c;\n+\t    continue;\n+\t  }\n+\telse if (c == '/')\n+\t  {\n+\t    elts.add (new_element.toString ());\n+\t    new_element.setLength (0);\n+\t    continue;\n+\t  }\n+\n+\tnew_element.append (c);\n+      }\n+\n+    if (new_element.length () != 0)\n+      elts.add (new_element.toString ());\n+\n+    // Error checking.\n+    if (quote != no_quote)\n+      throw new InvalidNameException (\"unterminated quote\");\n+    if (escaped)\n+      throw new InvalidNameException (\"trailing escape character\");\n+  }\n+\n+  public Name add (int posn, String comp) throws InvalidNameException\n+  {\n+    elts.add (posn, comp);\n+    return this;\n+  }\n+\n+  public Name add (String comp) throws InvalidNameException\n+  {\n+    elts.add (comp);\n+    return this;\n+  }\n+\n+  public Name addAll (int posn, Name n) throws InvalidNameException\n+  {\n+    Enumeration e = n.getAll ();\n+    try\n+      {\n+\twhile (e.hasMoreElements ())\n+\t  {\n+\t    elts.add (posn, e.nextElement ());\n+\t    ++posn;\n+\t  }\n+      }\n+    catch (NoSuchElementException ignore)\n+      {\n+      }\n+    return this;\n+  }\n+\n+  public Name addAll (Name suffix) throws InvalidNameException\n+  {\n+    Enumeration e = suffix.getAll ();\n+    try\n+      {\n+\twhile (e.hasMoreElements ())\n+\t  elts.add (e.nextElement ());\n+      }\n+    catch (NoSuchElementException ignore)\n+      {\n+      }\n+    return this;\n+  }\n+\n+  public Object clone ()\n+  {\n+    return new CompositeName (elts.elements ());\n+  }\n+\n+  public int compareTo (Object obj)\n+  {\n+    if (obj == null || ! (obj instanceof CompositeName))\n+      throw new ClassCastException (\"CompositeName.compareTo() expected CompositeName\");\n+    CompositeName cn = (CompositeName) obj;\n+    int last = Math.min (cn.elts.size (), elts.size ());\n+    for (int i = 0; i < last; ++i)\n+      {\n+\tString f = (String) elts.get (i);\n+\tint comp = f.compareTo ((String) cn.elts.get (i));\n+\tif (comp != 0)\n+\t  return comp;\n+      }\n+    return elts.size () - cn.elts.size ();\n+  }\n+\n+  public boolean endsWith (Name n)\n+  {\n+    if (! (n instanceof CompositeName))\n+      return false;\n+    CompositeName cn = (CompositeName) n;\n+    if (cn.elts.size () > elts.size ())\n+      return false;\n+    int delta = elts.size () - cn.elts.size ();\n+    for (int i = 0; i < cn.elts.size (); ++i)\n+      {\n+\tif (! cn.elts.get (i).equals (elts.get (delta + i)))\n+\t  return false;\n+      }\n+    return true;\n+  }\n+\n+  public boolean equals (Object obj)\n+  {\n+    if (! (obj instanceof CompositeName))\n+      return false;\n+    CompositeName cn = (CompositeName) obj;\n+    return elts.equals (cn.elts);\n+  }\n+\n+  public String get (int posn)\n+  {\n+    return (String) elts.get (posn);\n+  }\n+\n+  public Enumeration getAll ()\n+  {\n+    return elts.elements ();\n+  }\n+\n+  public Name getPrefix (int posn)\n+  {\n+    CompositeName cn = new CompositeName ();\n+    for (int i = 0; i < posn; ++i)\n+      cn.elts.add ((String) elts.get (i));\n+    return cn;\n+  }\n+\n+  public Name getSuffix (int posn)\n+  {\n+    if (posn > elts.size ())\n+      throw new ArrayIndexOutOfBoundsException (posn);\n+    CompositeName cn = new CompositeName ();\n+    for (int i = posn; i < elts.size (); ++i)\n+      cn.elts.add ((String) elts.get (i));\n+    return cn;\n+  }\n+\n+  public int hashCode ()\n+  {\n+    // Specified in documentation.\n+    int h = 0;\n+    for (int i = 0; i < elts.size (); ++i)\n+      h += elts.get (i).hashCode ();\n+    return h;\n+  }\n+\n+  public boolean isEmpty ()\n+  {\n+    return elts.isEmpty ();\n+  }\n+\n+  public Object remove (int posn) throws InvalidNameException\n+  {\n+    return elts.remove (posn);\n+  }\n+\n+  public int size ()\n+  {\n+    return elts.size ();\n+  }\n+\n+  public boolean startsWith (Name n)\n+  {\n+    if (! (n instanceof CompositeName))\n+      return false;\n+    CompositeName cn = (CompositeName) n;\n+    if (cn.elts.size () > elts.size ())\n+      return false;\n+    for (int i = 0; i < cn.elts.size (); ++i)\n+      {\n+\tif (! cn.elts.get (i).equals (elts.get (i)))\n+\t  return false;\n+      }\n+    return true;\n+  }\n+\n+  public String toString ()\n+  {\n+    StringBuffer result = new StringBuffer ();\n+    for (int i = 0; i < elts.size (); ++i)\n+      {\n+\t// For simplicity we choose to always quote using escapes and\n+\t// never quotes.\n+\tString elt = (String) elts.get (i);\n+\tif (i > 0\n+\t    || (i == elts.size () - 1 && elt.equals (\"\")))\n+\t  result.append ('/');\n+\tfor (int k = 0; k < elt.length (); ++k)\n+\t  {\n+\t    char c = elt.charAt (k);\n+\t    // We must quote\n+\t    //     ... a leading quote,\n+\t    if ((k == 0 && (c == '\"' || c == '\\''))\n+\t\t// ... an escape preceding a meta character,\n+\t\t//     or at the end of a component,\n+\t\t|| (c == '\\\\'\n+\t\t    && (k == elt.length () - 1\n+\t\t\t|| \"\\\\'\\\"/\".indexOf (elt.charAt (k + 1)) != -1))\n+\t\t// ... or a component separator.\n+\t\t|| c == '/')\n+\t      result.append ('\\\\');\n+\t    result.append (c);\n+\t  }\n+      }\n+    return result.toString ();\n+  }\n+\n+  private transient Vector elts;\n+}"}, {"sha": "4e9f5bd8a000490223990e0bbfcf7c643d8e8acc", "filename": "libjava/javax/naming/CompoundName.java", "status": "added", "additions": 460, "deletions": 0, "changes": 460, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2FCompoundName.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2FCompoundName.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2FCompoundName.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,460 @@\n+/* Copyright (C) 2001 Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package javax.naming;\n+\n+import java.io.Serializable;\n+import java.util.Enumeration;\n+import java.util.Properties;\n+import java.util.NoSuchElementException;\n+import java.util.Vector;\n+\n+/**\n+ * @author Tom Tromey <tromey@redhat.com>\n+ * @date May 16, 2001\n+ *\n+ * FIXME: must write readObject and writeObject to conform to\n+ * serialization spec.\n+ *\n+ * FIXME: this class is underspecified.  For instance, the `flat'\n+ * direction is never described.  If it means that the CompoundName\n+ * can only have a single element, then the Enumeration-based\n+ * constructor ought to throw InvalidNameException.\n+ */\n+public class CompoundName implements Name, Cloneable, Serializable\n+{\n+  private CompoundName (Properties syntax)\n+  {\n+    elts = new Vector ();\n+    mySyntax = syntax;\n+    initializeSyntax ();\n+  }\n+\n+  protected CompoundName (Enumeration comps, Properties syntax)\n+  {\n+    elts = new Vector ();\n+    mySyntax = syntax;\n+    initializeSyntax ();\n+    try\n+      {\n+\twhile (comps.hasMoreElements ())\n+\t  elts.add (comps.nextElement ());\n+      }\n+    catch (NoSuchElementException ignore)\n+      {\n+      }\n+  }\n+\n+  public CompoundName (String n, Properties syntax)\n+    throws InvalidNameException\n+  {\n+    elts = new Vector ();\n+    mySyntax = syntax;\n+    initializeSyntax ();\n+\n+    StringBuffer new_element = new StringBuffer ();\n+    int i = 0;\n+    // QUOTE==null means no quoting right now.  When it is set it is\n+    // the value of the closing quote.\n+    String quote = null;\n+    while (i < n.length ())\n+      {\n+\tString special = isSpecial (n, i);\n+\n+\tif (special == escape && escape != null)\n+\t  {\n+\t    if (n.length () == i + special.length ())\n+\t      {\n+\t\t// A trailing escape is treated as itself.\n+\t\tnew_element.append (special);\n+\t\ti += special.length ();\n+\t      }\n+\t    else\n+\t      {\n+\t\tString eSpecial = isSpecial (n, i + special.length ());\n+\t\tif (eSpecial != null)\n+\t\t  {\n+\t\t    // Treat the escape as an escape.\n+\t\t    new_element.append (eSpecial);\n+\t\t    i += special.length () + eSpecial.length ();\n+\t\t  }\n+\t\telse\n+\t\t  {\n+\t\t    // Treat the escape as itself.\n+\t\t    new_element.append (special);\n+\t\t    i += special.length ();\n+\t\t  }\n+\t\tcontinue;\n+\t      }\n+\t  }\n+\telse if (quote != null)\n+\t  {\n+\t    // It is safe to use == here.\n+\t    if (quote == special)\n+\t      {\n+\t\t// Quotes must surround a complete component.\n+\t\tif (i + quote.length () < n.length ()\n+\t\t    && ! n.startsWith (separator, i + quote.length ()))\n+\t\t  throw new InvalidNameException (\"close quote before end of component\");\n+\t\telts.add (new_element.toString ());\n+\t\tnew_element.setLength (0);\n+\t\ti += quote.length ();\n+\t\tquote = null;\n+\t\tcontinue;\n+\t      }\n+\t    // Otherwise, fall through.\n+\t  }\n+\t// Quotes are only special at the start of a component.\n+\telse if (new_element.length () == 0 && special == beginQuote)\n+\t  {\n+\t    quote = endQuote;\n+\t    i += special.length ();\n+\t    continue;\n+\t  }\n+\telse if (new_element.length () == 0 && special == beginQuote2)\n+\t  {\n+\t    quote = endQuote2;\n+\t    i += special.length ();\n+\t    continue;\n+\t  }\n+\telse if (special == separator)\n+\t  {\n+\t    elts.add (new_element.toString ());\n+\t    new_element.setLength (0);\n+\t    i += special.length ();\n+\t    continue;\n+\t  }\n+\n+\t// Nothing in particular, so try the next character.\n+\tnew_element.append (n.charAt (i));\n+\t++i;\n+      }\n+\n+    if (new_element.length () != 0)\n+      elts.add (new_element.toString ());\n+\n+    if (direction == RIGHT_TO_LEFT)\n+      {\n+\t// Reverse the order of the elements.\n+\tint len = elts.size ();\n+\tfor (i = 0; i < len / 2; ++i)\n+\t  {\n+\t    Object t = elts.set (i, elts.get (len - i - 1));\n+\t    elts.set (len - i - 1, t);\n+\t  }\n+      }\n+\n+    // Error checking.\n+    if (quote != null)\n+      throw new InvalidNameException (\"unterminated quote\");\n+  }\n+\n+  public Name add (int posn, String comp) throws InvalidNameException\n+  {\n+    elts.add (posn, comp);\n+    return this;\n+  }\n+\n+  public Name add (String comp) throws InvalidNameException\n+  {\n+    elts.add (comp);\n+    return this;\n+  }\n+\n+  public Name addAll (int posn, Name n) throws InvalidNameException\n+  {\n+    Enumeration e = n.getAll ();\n+    try\n+      {\n+\twhile (e.hasMoreElements ())\n+\t  {\n+\t    elts.add (posn, e.nextElement ());\n+\t    ++posn;\n+\t  }\n+      }\n+    catch (NoSuchElementException ignore)\n+      {\n+      }\n+    return this;\n+  }\n+\n+  public Name addAll (Name suffix) throws InvalidNameException\n+  {\n+    Enumeration e = suffix.getAll ();\n+    try\n+      {\n+\twhile (e.hasMoreElements ())\n+\t  elts.add (e.nextElement ());\n+      }\n+    catch (NoSuchElementException ignore)\n+      {\n+      }\n+    return this;\n+  }\n+\n+  public Object clone ()\n+  {\n+    return new CompoundName (elts.elements (), mySyntax);\n+  }\n+\n+  public int compareTo (Object obj)\n+  {\n+    if (obj == null || ! (obj instanceof CompoundName))\n+      throw new ClassCastException (\"CompoundName.compareTo() expected CompoundName\");\n+    CompoundName cn = (CompoundName) obj;\n+    int last = Math.min (cn.elts.size (), elts.size ());\n+    for (int i = 0; i < last; ++i)\n+      {\n+\tString f = canonicalize ((String) elts.get (i));\n+\tint comp = f.compareTo (canonicalize ((String) cn.elts.get (i)));\n+\tif (comp != 0)\n+\t  return comp;\n+      }\n+    return elts.size () - cn.elts.size ();\n+  }\n+\n+  public boolean endsWith (Name n)\n+  {\n+    if (! (n instanceof CompoundName))\n+      return false;\n+    CompoundName cn = (CompoundName) n;\n+    if (cn.elts.size () > elts.size ())\n+      return false;\n+    int delta = elts.size () - cn.elts.size ();\n+    for (int i = 0; i < cn.elts.size (); ++i)\n+      {\n+\tString f = canonicalize ((String) elts.get (i));\n+\tif (! f.equals (canonicalize ((String) cn.elts.get (i))))\n+\t  return false;\n+      }\n+    return true;\n+  }\n+\n+  public boolean equals (Object obj)\n+  {\n+    if (! (obj instanceof CompoundName))\n+      return false;\n+    return compareTo (obj) == 0;\n+  }\n+\n+  public String get (int posn)\n+  {\n+    return (String) elts.get (posn);\n+  }\n+\n+  public Enumeration getAll ()\n+  {\n+    return elts.elements ();\n+  }\n+\n+  public Name getPrefix (int posn)\n+  {\n+    CompoundName cn = new CompoundName (mySyntax);\n+    for (int i = 0; i < posn; ++i)\n+      cn.elts.add (elts.get (i));\n+    return cn;\n+  }\n+\n+  public Name getSuffix (int posn)\n+  {\n+    if (posn > elts.size ())\n+      throw new ArrayIndexOutOfBoundsException (posn);\n+    CompoundName cn = new CompoundName (mySyntax);\n+    for (int i = posn; i < elts.size (); ++i)\n+      cn.elts.add (elts.get (i));\n+    return cn;\n+  }\n+\n+  public int hashCode ()\n+  {\n+    int h = 0;\n+    for (int i = 0; i < elts.size (); ++i)\n+      h += canonicalize ((String) elts.get (i)).hashCode ();\n+    return h;\n+  }\n+\n+  public boolean isEmpty ()\n+  {\n+    return elts.isEmpty ();\n+  }\n+\n+  public Object remove (int posn) throws InvalidNameException\n+  {\n+    return elts.remove (posn);\n+  }\n+\n+  public int size ()\n+  {\n+    return elts.size ();\n+  }\n+\n+  public boolean startsWith (Name n)\n+  {\n+    if (! (n instanceof CompoundName))\n+      return false;\n+    CompoundName cn = (CompoundName) n;\n+    if (cn.elts.size () > elts.size ())\n+      return false;\n+    for (int i = 0; i < cn.elts.size (); ++i)\n+      {\n+\tString f = canonicalize ((String) elts.get (i));\n+\tif (! f.equals (canonicalize ((String) cn.elts.get (i))))\n+\t  return false;\n+      }\n+    return true;\n+  }\n+\n+  // If ELEMENT starts with some meta-sequence at OFFSET, then return\n+  // the string representing the meta-sequence.  Otherwise return\n+  // null.\n+  private String isSpecial (String element, int offset)\n+  {\n+    String special = null;\n+    if (separator != null && element.startsWith (separator, offset))\n+      special = separator;\n+    else if (escape != null && element.startsWith (escape, offset))\n+      special = escape;\n+    else if (beginQuote != null && element.startsWith (beginQuote, offset))\n+      special = beginQuote;\n+    else if (endQuote != null && element.startsWith (endQuote, offset))\n+      special = endQuote;\n+    else if (beginQuote2 != null\n+\t     && element.startsWith (beginQuote2, offset))\n+      special = beginQuote2;\n+    else if (endQuote2 != null && element.startsWith (endQuote2, offset))\n+      special = endQuote2;\n+\n+    return special;\n+  }\n+\n+  public String toString ()\n+  {\n+    StringBuffer result = new StringBuffer ();\n+    int size = elts.size ();\n+    for (int i = 0; i < size; ++i)\n+      {\n+\t// Find the appropriate element.  FIXME: not clear what FLAT\n+\t// means.\n+\tint offset = (direction == RIGHT_TO_LEFT) ? (size - i - 1) : i;\n+\tString element = (String) elts.get (offset);\n+\tif (i > 0\n+\t    || (i == size - 1 && element.equals (\"\")))\n+\t  result.append (separator);\n+\n+\tint k = 0;\n+\twhile (k < element.length ())\n+\t  {\n+\t    String special = isSpecial (element, k);\n+\t    if (special != null)\n+\t      {\n+\t\tresult.append (escape);\n+\t\tresult.append (special);\n+\t\tk += special.length ();\n+\t      }\n+\t    else\n+\t      {\n+\t\tresult.append (element.charAt (k));\n+\t\t++k;\n+\t      }\n+\t  }\n+      }\n+\n+    return result.toString ();\n+  }\n+\n+  // This canonicalizes a String, based on the syntax, for comparison\n+  // or other similar purposes.\n+  private String canonicalize (String element)\n+  {\n+    String ret = element;\n+\n+    if (ignoreCase)\n+      ret = ret.toLowerCase ();\n+\n+    if (trimBlanks)\n+      {\n+\tint first = 0;\n+\twhile (first < ret.length ()\n+\t       && Character.isWhitespace (ret.charAt (first)))\n+\t  ++first;\n+\n+\tint last = ret.length () - 1;\n+\twhile (last >= first\n+\t       && Character.isWhitespace (ret.charAt (last)))\n+\t  --last;\n+\n+\tret = ret.substring (first, last);\n+      }\n+\n+    return ret;\n+  }\n+\n+  // This initializes all the syntax variables.  This seems easier\n+  // than re-querying the properties every time.  We're allowed to do\n+  // this because the spec says that subclasses should consider the\n+  // syntax as being read-only.\n+  private void initializeSyntax ()\n+  {\n+    String t = mySyntax.getProperty (\"jndi.syntax.direction\", \"flat\");\n+    if (t.equals (\"right_to_left\"))\n+      this.direction = RIGHT_TO_LEFT;\n+    else if (t.equals (\"left_to_right\"))\n+      this.direction = LEFT_TO_RIGHT;\n+    else\n+      {\n+\t// If we don't recognize it, default to flat.\n+\tthis.direction = FLAT;\n+      }\n+\n+    // This is required unless the direction is FLAT.  Unfortunately\n+    // there is no way to report this error.\n+    this.separator = mySyntax.getProperty (\"jndi.syntax.separator\", \"\");\n+\n+    this.ignoreCase\n+      = Boolean.valueOf (mySyntax.getProperty (\"jndi.syntax.ignorecase\",\n+\t\t\t\t\t       \"false\")).booleanValue ();\n+    this.escape = mySyntax.getProperty (\"jndi.syntax.escape\", null);\n+    this.beginQuote = mySyntax.getProperty (\"jndi.syntax.beginquote\", null);\n+    this.endQuote = mySyntax.getProperty (\"jndi.syntax.endquote\",\n+\t\t\t\t\t  this.beginQuote);\n+    this.beginQuote2 = mySyntax.getProperty (\"jndi.syntax.beginquote2\",\n+\t\t\t\t\t     null);\n+    this.endQuote2 = mySyntax.getProperty (\"jndi.syntax.endquote2\",\n+\t\t\t\t\t   this.beginQuote2);\n+    this.trimBlanks\n+      = Boolean.valueOf (mySyntax.getProperty (\"jndi.syntax.trimblanks\",\n+\t\t\t\t\t       \"false\")).booleanValue ();\n+  }\n+\n+  // The spec specifies this but does not document it in any way (it\n+  // is a package-private class).  It is useless as far as I can tell.\n+  // So we ignore it.\n+  // protected transient NameImpl impl;\n+  protected transient Properties mySyntax;\n+\n+  // The actual elements.\n+  private transient Vector elts;\n+\n+  // The following are all used for syntax.\n+  private transient int direction;\n+  private transient String separator;\n+  private transient boolean ignoreCase;\n+  private transient String escape;\n+  private transient String beginQuote;\n+  private transient String endQuote;\n+  private transient String beginQuote2;\n+  private transient String endQuote2;\n+  private transient boolean trimBlanks;\n+  // We didn't need these for parsing, so they are gone.\n+  // private transient String avaSeparator;\n+  // private transient String typevalSeparator;\n+\n+  private static final int RIGHT_TO_LEFT = -1;\n+  private static final int LEFT_TO_RIGHT = 1;\n+  private static final int FLAT = 0;\n+}"}, {"sha": "6512c926c249b4275eee32a4e89a1ad4bc234905", "filename": "libjava/javax/naming/LinkException.java", "status": "modified", "additions": 65, "deletions": 1, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2FLinkException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2FLinkException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2FLinkException.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* Copyright (C) 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -10,8 +10,19 @@\n \n import java.lang.Exception;\n  \n+/**\n+ * @author Warren Levy <warrenl@redhat.com>\n+ * @date June 14, 2001\n+ */\n+\n public class LinkException extends NamingException\n {\n+  // Serialized fields.\n+  protected Name linkResolvedName;\n+  protected Object linkResolvedObj;\n+  protected Name linkRemainingName;\n+  protected String linkExplanation;\n+\n   public LinkException ()\n   {\n     super ();\n@@ -21,4 +32,57 @@ public LinkException (String msg)\n   {\n     super (msg);\n   }\n+\n+  public Name getLinkResolvedName()\n+  {\n+    return linkResolvedName;\n+  }\n+\n+  public Name getLinkRemainingName()\n+  {\n+    return linkRemainingName;\n+  }\n+\n+  public Object getLinkResolvedObj()\n+  {\n+    return linkResolvedObj;\n+  }\n+\n+  public String getLinkExplanation()\n+  {\n+    return linkExplanation;\n+  }\n+\n+  public void setLinkExplanation(String msg)\n+  {\n+    linkExplanation = msg;\n+  }\n+\n+  public void setLinkResolvedName(Name name)\n+  {\n+    linkResolvedName = (Name) name.clone();\n+  }\n+\n+  public void setLinkRemainingName(Name name)\n+  {\n+    linkRemainingName = (Name) name.clone();\n+  }\n+\n+  public void setLinkResolvedObj(Object obj)\n+  {\n+    linkResolvedObj = obj;\n+  }\n+\n+  public String toString ()\n+  {\n+    return super.toString () + \"; \" + linkRemainingName.toString ();\n+  }\n+\n+  public String toString (boolean detail)\n+  {\n+    String r = super.toString (detail) + \"; \" + linkRemainingName.toString ();\n+    if (detail)\n+      r += \"; \" + linkResolvedObj.toString ();\n+    return r;\n+  }\n }"}, {"sha": "703eb7476a094e20a40406c929d271b3b40be95f", "filename": "libjava/javax/naming/LinkRef.java", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2FLinkRef.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2FLinkRef.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2FLinkRef.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,35 @@\n+/* Copyright (C) 2001 Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package javax.naming;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * @author Tom Tromey <tromey@redhat.com>\n+ * @date May 16, 2001\n+ */\n+public class LinkRef extends Reference\n+{\n+  public LinkRef (Name name)\n+  {\n+    this (name.toString ());\n+  }\n+\n+  public LinkRef (String name)\n+  {\n+    // FIXME: javax.naming.LinkRef?\n+    super (\"LinkRef\", new StringRefAddr (\"LinkAddress\", name));\n+  }\n+\n+  public String getLinkName ()\n+  {\n+    StringRefAddr sra = (StringRefAddr) get (0);\n+    return (String) sra.getContent ();\n+  }\n+}"}, {"sha": "3d4c0a783708330c18144546d76e01692976cdf1", "filename": "libjava/javax/naming/NameClassPair.java", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2FNameClassPair.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2FNameClassPair.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2FNameClassPair.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,71 @@\n+/* Copyright (C) 2001 Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package javax.naming;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * @author Tom Tromey <tromey@redhat.com>\n+ * @date May 16, 2001\n+ */\n+public class NameClassPair implements Serializable\n+{\n+  public NameClassPair (String name, String className)\n+  {\n+    this (name, className, true);\n+  }\n+\n+  public NameClassPair (String name, String className, boolean isRelative)\n+  {\n+    this.name = name;\n+    this.className = className;\n+    this.isRel = isRelative;\n+  }\n+\n+  public String getClassName ()\n+  {\n+    return className;\n+  }\n+\n+  public String getName ()\n+  {\n+    return name;\n+  }\n+\n+  public boolean isRelative ()\n+  {\n+    return isRel;\n+  }\n+\n+  public void setClassName (String name)\n+  {\n+    this.className = name;\n+  }\n+\n+  public void setName (String name)\n+  {\n+    this.name = name;\n+  }\n+\n+  public void setRelative (boolean r)\n+  {\n+    this.isRel = r;\n+  }\n+\n+  public String toString ()\n+  {\n+    // Specified by class documentation.\n+    return name + \":\" + className;\n+  }\n+\n+  // These field names are fixed by the serialization spec.\n+  private String name;\n+  private String className;\n+  private boolean isRel;\n+}"}, {"sha": "8043fb279a5db68b542fe47411d43f28f1249202", "filename": "libjava/javax/naming/RefAddr.java", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2FRefAddr.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2FRefAddr.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2FRefAddr.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -60,9 +60,9 @@ public abstract class RefAddr implements Serializable\n    */\n   protected RefAddr(String addrType)\n   {\n-  \tif (addrType == null)\n-  \t  throw new NullPointerException(\"addrType cannot be null\");\n-  \t  \n+    if (addrType == null)\n+      throw new NullPointerException(\"addrType cannot be null\");\n+\n     this.addrType = addrType;\n   }\n   \n@@ -87,20 +87,20 @@ public String getType()\n    *         is the same as this addrType and the content is equals to the\n    *         content of this object.\n    */\n-  public boolean equal(Object o)\n+  public boolean equals (Object o)\n   {\n     if (o instanceof RefAddr)\n       {\n         RefAddr refAddr = (RefAddr) o;\n         if (this.getType().equals(refAddr.getType()))\n-        {\n-          Object c1 = this.getContent();\n-          Object c2 = refAddr.getContent();\n-\t  if (c1 == null)\n-\t    return c2 == null;\n-\t  else\n-\t    return c1.equals(c2);\n-        }\n+\t  {\n+\t    Object c1 = this.getContent();\n+\t    Object c2 = refAddr.getContent();\n+\t    if (c1 == null)\n+\t      return c2 == null;\n+\t    else\n+\t      return c1.equals(c2);\n+\t  }\n       }\n     return false;\n   }"}, {"sha": "dbd3418cfe29bd1e6095366bd9aaead458c7f118", "filename": "libjava/javax/naming/Reference.java", "status": "modified", "additions": 134, "deletions": 6, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2FReference.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2FReference.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2FReference.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2000 Free Software Foundation\n+/* Copyright (C) 2000, 2001 Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -9,28 +9,156 @@\n package javax.naming;\n \n import java.io.Serializable;\n+import java.util.Enumeration;\n+import java.util.Vector;\n \n+/**\n+ * @author Tom Tromey <tromey@redhat.com>\n+ * @date May 16, 2001\n+ */\n public class Reference implements Cloneable, Serializable\n {\n+  public Reference (String className)\n+  {\n+    this.className = className;\n+    addrs = new Vector ();\n+  }\n+\n+  public Reference (String className, RefAddr addr)\n+  {\n+    this.className = className;\n+    addrs = new Vector ();\n+    addrs.add (addr);\n+  }\n+\n   public Reference (String className, String factory, String factoryLocation)\n   {\n     this.className = className;\n+    this.classFactory = factory;\n+    this.classFactoryLocation = factoryLocation;\n+    addrs = new Vector ();\n+  }\n+\n+  public Reference (String className, RefAddr addr,\n+\t\t    String factory, String factoryLocation)\n+  {\n+    this.className = className;\n+    this.classFactory = factory;\n+    this.classFactoryLocation = factoryLocation;\n+    addrs = new Vector ();\n+    addrs.add (addr);\n+  }\n+\n+  public void add (int posn, RefAddr addr)\n+  {\n+    addrs.add (posn, addr);\n   }\n \n-  void add (RefAddr addr)\n+  public void add (RefAddr addr)\n   {\n-    throw new Error (\"javax.naming.Reference.add not implemented\");\n+    addrs.add (addr);\n   }\n \n-  RefAddr get (String addrType)\n+  public void clear ()\n   {\n-    throw new Error (\"javax.naming.Reference.get not implemented\");\n+    addrs.clear ();\n+  }\n+\n+  public Object clone ()\n+  {\n+    Reference r = new Reference (className, classFactory,\n+\t\t\t\t classFactoryLocation);\n+    r.addrs = (Vector) addrs.clone ();\n+    return r;\n+  }\n+\n+  // Convenience function.\n+  private boolean equals (String a, String b)\n+  {\n+    return (a == null) ? (b == null) : a.equals (b);\n+  }\n+\n+  public boolean equals (Object obj)\n+  {\n+    if (! (obj instanceof Reference))\n+      return false;\n+    Reference r = (Reference) obj;\n+    return (equals (classFactory, r.classFactory)\n+\t    && equals (classFactoryLocation, r.classFactoryLocation)\n+\t    && equals (className, r.className)\n+\t    && addrs.equals (r.addrs));\n+  }\n+\n+  public RefAddr get (int posn)\n+  {\n+    return (RefAddr) addrs.get (posn);\n+  }\n+\n+  public RefAddr get (String addrType)\n+  {\n+    for (int i = 0; i < addrs.size (); ++i)\n+      {\n+\tRefAddr r = (RefAddr) addrs.get (i);\n+\tif (addrType.equals (r.getType ()))\n+\t  return r;\n+      }\n+    return null;\n+  }\n+\n+  public Enumeration getAll ()\n+  {\n+    return addrs.elements ();\n   }\n \n   public String getClassName ()\n   {\n     return className;\n   }\n \n-  private String className;\n+  public String getFactoryClassLocation ()\n+  {\n+    return classFactoryLocation;\n+  }\n+\n+  public String getFactoryClassName ()\n+  {\n+    return classFactory;\n+  }\n+\n+  public int hashCode ()\n+  {\n+    // The spec says the hash code is the sum of the hash codes of the\n+    // addresses.  It does not mention the other fields.\n+    int h = 0;\n+    for (int i = 0; i < addrs.size (); ++i)\n+      h += addrs.get (i).hashCode ();\n+    return h;\n+  }\n+\n+  public Object remove (int posn)\n+  {\n+    return addrs.remove (posn);\n+  }\n+\n+  public int size ()\n+  {\n+    return addrs.size ();\n+  }\n+\n+  public String toString ()\n+  {\n+    String x = getClass ().toString () + \"[\";\n+    for (int i = 0; i < addrs.size (); ++i)\n+      {\n+\tif (i > 0)\n+\t  x += \",\";\n+\tx += addrs.get (i).toString ();\n+      }\n+    return x + \"]\";\n+  }\n+\n+  protected Vector addrs;\n+  protected String classFactory;\n+  protected String classFactoryLocation;\n+  protected String className;\n }"}, {"sha": "9e815f969b01f72dd649af68f1e720342cd4154f", "filename": "libjava/javax/naming/ReferralException.java", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2FReferralException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2FReferralException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2FReferralException.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* Copyright (C) 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -9,16 +9,29 @@\n package javax.naming;\n \n import java.lang.Exception;\n+import java.util.Hashtable;\n  \n-public class ReferralException extends NamingException\n+/**\n+ * @author Warren Levy <warrenl@redhat.com>\n+ * @date June 14, 2001\n+ */\n+\n+public abstract class ReferralException extends NamingException\n {\n-  public ReferralException ()\n+  protected ReferralException ()\n   {\n     super ();\n   }\n \n-  public ReferralException (String msg)\n+  protected ReferralException (String msg)\n   {\n     super (msg);\n   }\n+\n+  public abstract Object getReferralInfo();\n+  public abstract Context getReferralContext() throws NamingException;\n+  public abstract Context getReferralContext(Hashtable env)\n+    throws NamingException;\n+  public abstract boolean skipReferral();\n+  public abstract void retryReferral();\n }"}, {"sha": "5c2b933871c722e31204e9507a80d89a161b81a8", "filename": "libjava/javax/naming/directory/Attribute.java", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fdirectory%2FAttribute.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fdirectory%2FAttribute.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2Fdirectory%2FAttribute.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* Copyright (C) 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -11,10 +11,30 @@\n import javax.naming.*;\n import java.io.Serializable;\n \n+/**\n+ * @author Warren Levy <warrenl@redhat.com>\n+ * @date June 14, 2001\n+ */\n+\n public interface Attribute extends Cloneable, Serializable\n {\n-  // FIXME\n+  // FIXME: Need to set value from JNDI 1.1.1 fro interoperability.\n+  // public static final long serialVersionUID = ;\n \n-  NamingEnumeration getAll ();\n+  public NamingEnumeration getAll() throws NamingException;\n+  public Object get() throws NamingException;\n+  public int size();\n+  public String getID();\n+  public boolean contains(Object attrVal);\n+  public boolean add(Object attrVal);\n+  public boolean remove(Object attrval);\n+  public void clear();\n+  public DirContext getAttributeSyntaxDefinition() throws NamingException;\n+  public DirContext getAttributeDefinition() throws NamingException;\n+  public Object clone();\n+  public boolean isOrdered();\n+  public Object get(int ix) throws NamingException;\n+  public Object remove(int ix);\n+  public void add(int ix, Object attrVal);\n+  public Object set(int ix, Object attrVal);\n }\n-"}, {"sha": "118d991f9e2ac4eac5b6416630cce6fa41082de6", "filename": "libjava/javax/naming/directory/AttributeInUseException.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fdirectory%2FAttributeInUseException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fdirectory%2FAttributeInUseException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2Fdirectory%2FAttributeInUseException.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -1,14 +1,14 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* Copyright (C) 2000, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n This software is copyrighted work licensed under the terms of the\n Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n details.  */\n  \n-package javax.naming;\n+package javax.naming.directory;\n \n-import java.lang.Exception;\n+import javax.naming.NamingException;\n \n public class AttributeInUseException extends NamingException\n {"}, {"sha": "898f7a4689e2ce42aa51e3a6f516d5cfe851e687", "filename": "libjava/javax/naming/directory/AttributeModificationException.java", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fdirectory%2FAttributeModificationException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fdirectory%2FAttributeModificationException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2Fdirectory%2FAttributeModificationException.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -1,17 +1,25 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* Copyright (C) 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n This software is copyrighted work licensed under the terms of the\n Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n details.  */\n  \n-package javax.naming;\n+package javax.naming.directory;\n \n-import java.lang.Exception;\n+import javax.naming.NamingException;\n+\n+/**\n+ * @author Warren Levy <warrenl@redhat.com>\n+ * @date June 14, 2001\n+ */\n \n public class AttributeModificationException extends NamingException\n {\n+  // Serialized fields.\n+  private ModificationItem[] unexecs;\n+\n   public AttributeModificationException ()\n   {\n     super ();\n@@ -21,4 +29,19 @@ public AttributeModificationException (String msg)\n   {\n     super (msg);\n   }\n+\n+  public void setUnexecutedModifications(ModificationItem[] e)\n+  {\n+    unexecs = e;\n+  }\n+\n+  public ModificationItem[] getUnexecutedModifications()\n+  {\n+    return unexecs;\n+  }\n+\n+  public String toString()\n+  {\n+    return super.toString () + \": \" + unexecs[0].toString ();\n+  }\n }"}, {"sha": "f76d593cd601ef6b47f01b40ba34f610f68f8460", "filename": "libjava/javax/naming/directory/Attributes.java", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fdirectory%2FAttributes.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fdirectory%2FAttributes.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2Fdirectory%2FAttributes.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* Copyright (C) 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -11,10 +11,21 @@\n import javax.naming.*;\n import java.io.Serializable;\n \n+/**\n+ * @author Warren Levy <warrenl@redhat.com>\n+ * @date June 14, 2001\n+ */\n+\n public interface Attributes extends Cloneable, Serializable\n {\n-  // FIXME\n-\n-  NamingEnumeration getAll ();\n+  public boolean isCaseIgnored();\n+  public int size();\n+  public Attribute get(String attrID);\n+  public NamingEnumeration getAll();\n+  public NamingEnumeration getIDs();\n+  public Attribute put(String attrID, Object val);\n+  public Attribute put(Attribute attr);\n+  public Attribute remove(String attrID);\n+  public Object clone();\n }\n "}, {"sha": "8ccb67abc4059fa2a68962e0fc26608c5692e366", "filename": "libjava/javax/naming/directory/BasicAttribute.java", "status": "added", "additions": 298, "deletions": 0, "changes": 298, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fdirectory%2FBasicAttribute.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fdirectory%2FBasicAttribute.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2Fdirectory%2FBasicAttribute.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,298 @@\n+/* Copyright (C) 2000, 2001 Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package javax.naming.directory;\n+\n+import javax.naming.*;\n+import java.util.*;\n+\n+/**\n+ * @author Tom Tromey <tromey@redhat.com>\n+ * @date June 20, 2001\n+ */\n+public class BasicAttribute implements Attribute\n+{\n+  /** The ID of this attribute.  */\n+  protected String attrID;\n+  /** True if this attribute's values are ordered.  */\n+  protected boolean ordered;\n+  /** Values for this attribute.  */\n+  protected transient Vector values;\n+\n+  // Used by cloning.\n+  private BasicAttribute ()\n+  {\n+  }\n+\n+  public BasicAttribute (String id)\n+  {\n+    this (id, false);\n+  }\n+\n+  public BasicAttribute (String id, boolean ordered)\n+  {\n+    attrID = id;\n+    this.ordered = ordered;\n+    values = new Vector ();\n+  }\n+\n+  public BasicAttribute (String id, Object value)\n+  {\n+    this (id, value, false);\n+  }\n+\n+  public BasicAttribute (String id, Object value, boolean ordered)\n+  {\n+    attrID = id;\n+    this.ordered = ordered;\n+    values = new Vector ();\n+    values.add (value);\n+  }\n+\n+  public void add (int index, Object val)\n+  {\n+    if (! ordered && contains (val))\n+      throw new IllegalStateException (\"value already in attribute\");\n+    values.add (index, val);\n+  }\n+\n+  public boolean add (Object val)\n+  {\n+    if (! ordered && contains (val))\n+      throw new IllegalStateException (\"value already in attribute\");\n+    return values.add (val);\n+  }\n+\n+  public void clear ()\n+  {\n+    values.clear ();\n+  }\n+\n+  public Object clone ()\n+  {\n+    BasicAttribute c = new BasicAttribute ();\n+    c.attrID = attrID;\n+    c.ordered = ordered;\n+    c.values = (Vector) values.clone ();\n+    return c;\n+  }\n+\n+  public boolean contains (Object val)\n+  {\n+    for (int i = 0; i < values.size (); ++i)\n+      {\n+\tif (equals (val, values.get (i)))\n+\t  return true;\n+      }\n+\n+    return false;\n+  }\n+\n+  public boolean equals (Object obj)\n+  {\n+    if (! (obj instanceof BasicAttribute))\n+      return false;\n+    BasicAttribute b = (BasicAttribute) obj;\n+\n+    if (ordered != b.ordered\n+\t|| ! attrID.equals (b.attrID)\n+\t|| values.size () != b.values.size ())\n+      return false;\n+\n+    for (int i = 0; i < values.size (); ++i)\n+      {\n+\tboolean ok = false;\n+\tif (ordered)\n+\t  ok = equals (values.get (i), b.values.get (i));\n+\telse\n+\t  {\n+\t    for (int j = 0; j < b.values.size (); ++j)\n+\t      {\n+\t\tif (equals (values.get (i), b.values.get (j)))\n+\t\t  {\n+\t\t    ok = true;\n+\t\t    break;\n+\t\t  }\n+\t      }\n+\t  }\n+\n+\tif (! ok)\n+\t  return false;\n+      }\n+\n+    return true;\n+  }\n+\n+  public Object get ()\n+  {\n+    if (values.size () == 0)\n+      throw new NoSuchElementException (\"no values\");\n+    return get (0);\n+  }\n+\n+  public Object get (int index)\n+  {\n+    return values.get (index);\n+  }\n+\n+  public NamingEnumeration getAll ()\n+  {\n+    return new BasicAttributeEnumeration ();\n+  }\n+\n+  public DirContext getAttributeDefinition ()\n+    throws OperationNotSupportedException, NamingException\n+  {\n+    throw new OperationNotSupportedException ();\n+  }\n+\n+  public DirContext getAttributeSyntaxDefinition ()\n+    throws OperationNotSupportedException, NamingException\n+  {\n+    throw new OperationNotSupportedException ();\n+  }\n+\n+  public String getID ()\n+  {\n+    return attrID;\n+  }\n+\n+  public int hashCode ()\n+  {\n+    int val = attrID.hashCode ();\n+    for (int i = 0; i < values.size (); ++i)\n+      {\n+\tObject o = values.get (i);\n+\tif (o == null)\n+\t  {\n+\t    // Nothing.\n+\t  }\n+\telse if (o instanceof Object[])\n+\t  {\n+\t    Object[] a = (Object[]) o;\n+\t    for (int j = 0; j < a.length; ++j)\n+\t      val += a[j].hashCode ();\n+\t  }\n+\telse\n+\t  val += o.hashCode ();\n+      }\n+\n+    return val;\n+  }\n+\n+  public boolean isOrdered ()\n+  {\n+    return ordered;\n+  }\n+\n+  public Object remove (int index)\n+  {\n+    return values.remove (index);\n+  }\n+\n+  public boolean remove (Object val)\n+  {\n+    for (int i = 0; i < values.size (); ++i)\n+      {\n+\tif (equals (val, values.get (i)))\n+\t  {\n+\t    values.remove (i);\n+\t    return true;\n+\t  }\n+      }\n+\n+    return false;\n+  }\n+\n+  public Object set (int index, Object val)\n+  {\n+    if (! ordered && contains (val))\n+      throw new IllegalStateException (\"value already in attribute\");\n+    return values.set (index, val);\n+  }\n+\n+  public int size ()\n+  {\n+    return values.size ();\n+  }\n+\n+  public String toString ()\n+  {\n+    String r = attrID;\n+    for (int i = 0; i < values.size (); ++i)\n+      r += \";\" + values.get (i).toString ();\n+    return r;\n+  }\n+\n+  // This is used for testing equality of two Objects according to our\n+  // local rules.\n+  private boolean equals (Object one, Object two)\n+  {\n+    if (one == null)\n+      return two == null;\n+\n+    if (one instanceof Object[])\n+      {\n+\tif (! (two instanceof Object[]))\n+\t  return false;\n+\n+\tObject[] aone = (Object[]) one;\n+\tObject[] atwo = (Object[]) two;\n+\n+\tif (aone.length != atwo.length)\n+\t  return false;\n+\n+\tfor (int i = 0; i < aone.length; ++i)\n+\t  {\n+\t    if (! aone[i].equals (atwo[i]))\n+\t      return false;\n+\t  }\n+\n+\treturn true;\n+      }\n+\n+    return one.equals (two);\n+  }\n+\n+  // Used when enumerating this attribute.\n+  private class BasicAttributeEnumeration implements NamingEnumeration\n+  {\n+    int where = -1;\n+\n+    public BasicAttributeEnumeration ()\n+    {\n+    }\n+\n+    public void close () throws NamingException\n+    {\n+    }\n+\n+    public boolean hasMore () throws NamingException\n+    {\n+      return hasMoreElements ();\n+    }\n+\n+    public Object next () throws NamingException\n+    {\n+      return nextElement ();\n+    }\n+\n+    public boolean hasMoreElements ()\n+    {\n+      return where < values.size ();\n+    }\n+\n+    public Object nextElement () throws NoSuchElementException\n+    {\n+      if (where + 1 >= values.size ())\n+\tthrow new NoSuchElementException (\"no more elements\");\n+      ++where;\n+      return values.get (where);\n+    }\n+  }\n+}"}, {"sha": "935612c227763e80ca1dc543bfd43ca732879bd0", "filename": "libjava/javax/naming/directory/BasicAttributes.java", "status": "added", "additions": 194, "deletions": 0, "changes": 194, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fdirectory%2FBasicAttributes.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fdirectory%2FBasicAttributes.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2Fdirectory%2FBasicAttributes.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,194 @@\n+/* Copyright (C) 2000, 2001 Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package javax.naming.directory;\n+\n+import javax.naming.*;\n+import java.util.*;\n+\n+/**\n+ * @author Tom Tromey <tromey@redhat.com>\n+ * @date June 22, 2001\n+ */\n+public class BasicAttributes implements Attributes\n+{\n+  public BasicAttributes ()\n+  {\n+    this (false);\n+  }\n+\n+  public BasicAttributes (boolean ignoreCase)\n+  {\n+    this.ignoreCase = ignoreCase;\n+    this.attributes = new Vector ();\n+  }\n+\n+  public BasicAttributes (String attrID, Object val)\n+  {\n+    this (attrID, val, false);\n+  }\n+\n+  public BasicAttributes (String attrID, Object val, boolean ignoreCase)\n+  {\n+    this.ignoreCase = ignoreCase;\n+    attributes = new Vector ();\n+    attributes.add (new BasicAttribute (attrID, val));\n+  }\n+\n+  public Object clone ()\n+  {\n+    // Slightly inefficient as we make a garbage Vector here.\n+    BasicAttributes ba = new BasicAttributes (ignoreCase);\n+    ba.attributes = (Vector) attributes.clone ();\n+    return ba;\n+  }\n+\n+  public boolean equals (Object obj)\n+  {\n+    if (! (obj instanceof BasicAttributes))\n+      return false;\n+    BasicAttributes b = (BasicAttributes) obj;\n+    if (ignoreCase != b.ignoreCase\n+\t|| attributes.size () != b.attributes.size ())\n+      return false;\n+\n+    // Does order matter?\n+    for (int i = 0; i < attributes.size (); ++i)\n+      {\n+\tif (! attributes.get (i).equals (b.attributes.get (i)))\n+\t  return false;\n+      }\n+\n+    return true;\n+  }\n+\n+  public Attribute get (String attrID)\n+  {\n+    for (int i = 0; i < attributes.size (); ++i)\n+      {\n+\tAttribute at = (Attribute) attributes.get (i);\n+\tif ((ignoreCase && attrID.equalsIgnoreCase (at.getID ()))\n+\t    || (! ignoreCase && attrID.equals (at.getID ())))\n+\t  return at;\n+      }\n+\n+    return null;\n+  }\n+\n+  public NamingEnumeration getAll ()\n+  {\n+    return new BasicAttributesEnumeration (false);\n+  }\n+\n+  public NamingEnumeration getIDs ()\n+  {\n+    return new BasicAttributesEnumeration (true);\n+  }\n+\n+  public int hashCode ()\n+  {\n+    int val = 0;\n+    for (int i = 0; i < attributes.size (); ++i)\n+      val += attributes.get (i).hashCode ();\n+    return val;\n+  }\n+\n+  public boolean isCaseIgnored ()\n+  {\n+    return ignoreCase;\n+  }\n+\n+  public Attribute put (Attribute attr)\n+  {\n+    Attribute r = remove (attr.getID ());\n+    attributes.add (attr);\n+    return r;\n+  }\n+\n+  public Attribute put (String attrID, Object val)\n+  {\n+    return put (new BasicAttribute (attrID, val));\n+  }\n+\n+  public Attribute remove (String attrID)\n+  {\n+    for (int i = 0; i < attributes.size (); ++i)\n+      {\n+\tAttribute at = (Attribute) attributes.get (i);\n+\tif ((ignoreCase && attrID.equalsIgnoreCase (at.getID ()))\n+\t    || (! ignoreCase && attrID.equals (at.getID ())))\n+\t  {\n+\t    attributes.remove (i);\n+\t    return at;\n+\t  }\n+      }\n+\n+    return null;\n+  }\n+\n+  public int size ()\n+  {\n+    return attributes.size ();\n+  }\n+\n+  public String toString ()\n+  {\n+    String r = \"\";\n+    for (int i = 0; i < attributes.size (); ++i)\n+      {\n+\tif (i > 0)\n+\t  r += \"; \";\n+\tr += attributes.get (i).toString ();\n+      }\n+    return r;\n+  }\n+\n+  // This is set by the serialization spec.\n+  private boolean ignoreCase;\n+  private transient Vector attributes;\n+\n+  // Used when enumerating.\n+  private class BasicAttributesEnumeration implements NamingEnumeration\n+  {\n+    int where = -1;\n+    boolean id;\n+\n+    public BasicAttributesEnumeration (boolean id)\n+    {\n+      this.id = id;\n+    }\n+\n+    public void close () throws NamingException\n+    {\n+    }\n+\n+    public boolean hasMore () throws NamingException\n+    {\n+      return hasMoreElements ();\n+    }\n+\n+    public Object next () throws NamingException\n+    {\n+      return nextElement ();\n+    }\n+\n+    public boolean hasMoreElements ()\n+    {\n+      return where < attributes.size ();\n+    }\n+\n+    public Object nextElement () throws NoSuchElementException\n+    {\n+      if (where + 1 >= attributes.size ())\n+\tthrow new NoSuchElementException (\"no more elements\");\n+      ++where;\n+      Attribute at = (Attribute) attributes.get (where);\n+      return id ? (Object) at.getID () : (Object) at;\n+    }\n+  }\n+}"}, {"sha": "4b82231e6d421af3f48278705c4bd6043cac910c", "filename": "libjava/javax/naming/directory/DirContext.java", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fdirectory%2FDirContext.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fdirectory%2FDirContext.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2Fdirectory%2FDirContext.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* Copyright (C) 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -10,9 +10,41 @@\n \n import javax.naming.*;\n \n+/**\n+ * @author Warren Levy <warrenl@redhat.com>\n+ * @date June 13, 2001\n+ */\n+\n public interface DirContext extends Context\n {\n-  public Attributes getAttributes (String name);\n-  public Attributes getAttributes (String name, String[] attrIds);\n-}\n+  public static final int ADD_ATTRIBUTE = 1;\n+  public static final int REPLACE_ATTRIBUTE = 2;\n+  public static final int REMOVE_ATTRIBUTE = 3;\n \n+  public Attributes getAttributes (String name) throws NamingException;\n+  public Attributes getAttributes (String name, String[] attrIds) throws NamingException;\n+  public Attributes getAttributes (Name name) throws NamingException;\n+  public Attributes getAttributes(Name name, String[] attrIds) throws NamingException;\n+  public void modifyAttributes(Name name, int mod_op, Attributes attrs) throws NamingException;\n+  public void modifyAttributes(String name, int mod_op, Attributes attrs) throws NamingException;\n+  public void modifyAttributes(Name name, ModificationItem[] mods) throws NamingException;\n+  public void modifyAttributes(String name, ModificationItem[] mods) throws NamingException;\n+  public void bind(Name name, Object obj, Attributes attrs) throws NamingException;\n+  public void bind(String name, Object obj, Attributes attrs) throws NamingException;\n+  public void rebind(Name name, Object obj, Attributes attrs) throws NamingException;\n+  public void rebind(String name, Object obj, Attributes attrs) throws NamingException;\n+  public DirContext createSubcontext(Name name, Attributes attrs) throws NamingException;\n+  public DirContext createSubcontext(String name, Attributes attrs) throws NamingException;\n+  public DirContext getSchema(Name name) throws NamingException;\n+  public DirContext getSchema(String name) throws NamingException;\n+  public DirContext getSchemaClassDefinition(Name name) throws NamingException;\n+  public DirContext getSchemaClassDefinition(String name) throws NamingException;\n+  public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) throws NamingException;\n+  public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) throws NamingException;\n+  public NamingEnumeration search(Name name, Attributes matchingAttributes) throws NamingException;\n+  public NamingEnumeration search(String name, Attributes matchingAttributes) throws NamingException;\n+  public NamingEnumeration search(Name name, String filter, SearchControls cons) throws NamingException;\n+  public NamingEnumeration search(String name, String filter, SearchControls cons) throws NamingException;\n+  public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) throws NamingException;\n+  public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) throws NamingException;\n+}"}, {"sha": "185528f699bab747d229e97806e972543975ee30", "filename": "libjava/javax/naming/directory/InitialDirContext.java", "status": "modified", "additions": 202, "deletions": 4, "changes": 206, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fdirectory%2FInitialDirContext.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fdirectory%2FInitialDirContext.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2Fdirectory%2FInitialDirContext.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2000 Free Software Foundation\n+/* Copyright (C) 2000, 2001 Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -11,20 +11,218 @@\n import javax.naming.*;\n import java.util.Hashtable;\n \n+/**\n+ * @author Tom Tromey <tromey@redhat.com>\n+ * @date June 25, 2001\n+ */\n public class InitialDirContext extends InitialContext implements DirContext\n {\n+  public InitialDirContext ()\n+    throws NamingException\n+  {\n+    this (null);\n+  }\n+\n+  protected InitialDirContext (boolean lazy)\n+    throws NamingException\n+  {\n+    super (lazy);\n+  }\n+\n   public InitialDirContext (Hashtable environment)\n+    throws NamingException\n   {\n-    throw new Error (\"javax.naming.directory.InitialDirContext not implemented\");\n+    super (environment);\n+  }\n+\n+  // The InitialContext docs suggest that this exist.  And it does\n+  // seem like a good idea.  but the InitialDirContext docs indicate\n+  // it cannot be non-private.\n+  private DirContext getURLOrDefaultInitDirCtx (Name name)\n+    throws NamingException\n+  {\n+    Context c = getURLOrDefaultInitCtx (name);\n+    if (c == null)\n+      throw new NoInitialContextException ();\n+    else if (! (c instanceof DirContext))\n+      throw new NotContextException ();\n+    return (DirContext) c;\n+  }\n+\n+  private DirContext getURLOrDefaultInitDirCtx (String name)\n+    throws NamingException\n+  {\n+    Context c = getURLOrDefaultInitCtx (name);\n+    if (c == null)\n+      throw new NoInitialContextException ();\n+    else if (! (c instanceof DirContext))\n+      throw new NotContextException ();\n+    return (DirContext) c;\n   }\n \n   public Attributes getAttributes (String name)\n+    throws NamingException\n   {\n-    throw new Error (\"getAttributes  not implemented\");\n+    return getURLOrDefaultInitDirCtx (name).getAttributes (name);\n   }\n \n   public Attributes getAttributes (String name, String[] attrIds)\n+    throws NamingException\n+  {\n+    return getURLOrDefaultInitDirCtx (name).getAttributes (name, attrIds);\n+  }\n+\n+  public Attributes getAttributes (Name name)\n+    throws NamingException\n+  {\n+    return getURLOrDefaultInitDirCtx (name).getAttributes (name);\n+  }\n+\n+  public Attributes getAttributes(Name name, String[] attrIds)\n+    throws NamingException\n+  {\n+    return getURLOrDefaultInitDirCtx (name).getAttributes (name, attrIds);\n+  }\n+\n+  public void modifyAttributes(Name name, int mod_op, Attributes attrs)\n+    throws NamingException\n+  {\n+    getURLOrDefaultInitDirCtx (name).modifyAttributes (name, mod_op, attrs);\n+  }\n+\n+  public void modifyAttributes(String name, int mod_op, Attributes attrs)\n+    throws NamingException\n+  {\n+    getURLOrDefaultInitDirCtx (name).modifyAttributes (name, mod_op, attrs);\n+  }\n+\n+  public void modifyAttributes(Name name, ModificationItem[] mods)\n+    throws NamingException\n+  {\n+    getURLOrDefaultInitDirCtx (name).modifyAttributes (name, mods);\n+  }\n+\n+  public void modifyAttributes(String name, ModificationItem[] mods)\n+    throws NamingException\n+  {\n+    getURLOrDefaultInitDirCtx (name).modifyAttributes (name, mods);\n+  }\n+\n+  public void bind(Name name, Object obj, Attributes attrs)\n+    throws NamingException\n+  {\n+    getURLOrDefaultInitDirCtx (name).bind (name, obj, attrs);\n+  }\n+\n+  public void bind(String name, Object obj, Attributes attrs)\n+    throws NamingException\n+  {\n+    getURLOrDefaultInitDirCtx (name).bind (name, obj, attrs);\n+  }\n+\n+  public void rebind(Name name, Object obj, Attributes attrs)\n+    throws NamingException\n+  {\n+    getURLOrDefaultInitDirCtx (name).rebind (name, obj, attrs);\n+  }\n+\n+  public void rebind(String name, Object obj, Attributes attrs)\n+    throws NamingException\n+  {\n+    getURLOrDefaultInitDirCtx (name).rebind (name, obj, attrs);\n+  }\n+\n+  public DirContext createSubcontext(Name name, Attributes attrs)\n+    throws NamingException\n+  {\n+    return getURLOrDefaultInitDirCtx (name).createSubcontext (name, attrs);\n+  }\n+\n+  public DirContext createSubcontext(String name, Attributes attrs)\n+    throws NamingException\n+  {\n+    return getURLOrDefaultInitDirCtx (name).createSubcontext (name, attrs);\n+  }\n+\n+  public DirContext getSchema(Name name)\n+    throws NamingException\n+  {\n+    return getURLOrDefaultInitDirCtx (name).getSchema (name);\n+  }\n+\n+  public DirContext getSchema(String name)\n+    throws NamingException\n+  {\n+    return getURLOrDefaultInitDirCtx (name).getSchema (name);\n+  }\n+\n+  public DirContext getSchemaClassDefinition(Name name)\n+    throws NamingException\n+  {\n+    return getURLOrDefaultInitDirCtx (name).getSchemaClassDefinition (name);\n+  }\n+\n+  public DirContext getSchemaClassDefinition(String name)\n+    throws NamingException\n+  {\n+    return getURLOrDefaultInitDirCtx (name).getSchemaClassDefinition (name);\n+  }\n+\n+  public NamingEnumeration search(Name name, Attributes matchingAttributes,\n+\t\t\t\t  String[] attributesToReturn)\n+    throws NamingException\n+  {\n+    return getURLOrDefaultInitDirCtx (name).search (name, matchingAttributes,\n+\t\t\t\t\t\t    attributesToReturn);\n+  }\n+\n+  public NamingEnumeration search(String name, Attributes matchingAttributes,\n+\t\t\t\t  String[] attributesToReturn)\n+    throws NamingException\n+  {\n+    return getURLOrDefaultInitDirCtx (name).search (name, matchingAttributes,\n+\t\t\t\t\t\t    attributesToReturn);\n+  }\n+\n+  public NamingEnumeration search(Name name, Attributes matchingAttributes)\n+    throws NamingException\n+  {\n+    return getURLOrDefaultInitDirCtx (name).search (name, matchingAttributes);\n+  }\n+\n+  public NamingEnumeration search(String name, Attributes matchingAttributes)\n+    throws NamingException\n+  {\n+    return getURLOrDefaultInitDirCtx (name).search (name, matchingAttributes);\n+  }\n+\n+  public NamingEnumeration search(Name name, String filter,\n+\t\t\t\t  SearchControls cons)\n+    throws NamingException\n+  {\n+    return getURLOrDefaultInitDirCtx (name).search (name, filter, cons);\n+  }\n+\n+  public NamingEnumeration search(String name, String filter,\n+\t\t\t\t  SearchControls cons)\n+    throws NamingException\n+  {\n+    return getURLOrDefaultInitDirCtx (name).search (name, filter, cons);\n+  }\n+\n+  public NamingEnumeration search(Name name, String filterExpr,\n+\t\t\t\t  Object[] filterArgs, SearchControls cons)\n+    throws NamingException\n+  {\n+    return getURLOrDefaultInitDirCtx (name).search (name, filterExpr,\n+\t\t\t\t\t\t    filterArgs, cons);\n+  }\n+\n+  public NamingEnumeration search(String name, String filterExpr,\n+\t\t\t\t  Object[] filterArgs, SearchControls cons)\n+    throws NamingException\n   {\n-    throw new Error (\"getAttributes  not implemented\");\n+    return getURLOrDefaultInitDirCtx (name).search (name, filterExpr,\n+\t\t\t\t\t\t    filterArgs, cons);\n   }\n }"}, {"sha": "3c2b38f222ca8b6fe8f9e8a1ace3b9ba343a1f13", "filename": "libjava/javax/naming/directory/InvalidAttributeIdentifierException.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fdirectory%2FInvalidAttributeIdentifierException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fdirectory%2FInvalidAttributeIdentifierException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2Fdirectory%2FInvalidAttributeIdentifierException.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -1,14 +1,14 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* Copyright (C) 2000, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n This software is copyrighted work licensed under the terms of the\n Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n details.  */\n  \n-package javax.naming;\n+package javax.naming.directory;\n \n-import java.lang.Exception;\n+import javax.naming.NamingException;\n \n public class InvalidAttributeIdentifierException extends NamingException\n {"}, {"sha": "5a07604a57a2b5a3c82c554f223b432768674ab4", "filename": "libjava/javax/naming/directory/InvalidAttributeValueException.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fdirectory%2FInvalidAttributeValueException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fdirectory%2FInvalidAttributeValueException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2Fdirectory%2FInvalidAttributeValueException.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -1,14 +1,14 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* Copyright (C) 2000, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n This software is copyrighted work licensed under the terms of the\n Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n details.  */\n  \n-package javax.naming;\n+package javax.naming.directory;\n \n-import java.lang.Exception;\n+import javax.naming.NamingException;\n \n public class InvalidAttributeValueException extends NamingException\n {"}, {"sha": "ce13acb124d73a004e871d67b21ae8355a972b08", "filename": "libjava/javax/naming/directory/InvalidAttributesException.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fdirectory%2FInvalidAttributesException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fdirectory%2FInvalidAttributesException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2Fdirectory%2FInvalidAttributesException.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -1,14 +1,14 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* Copyright (C) 2000, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n This software is copyrighted work licensed under the terms of the\n Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n details.  */\n  \n-package javax.naming;\n+package javax.naming.directory;\n \n-import java.lang.Exception;\n+import javax.naming.NamingException;\n \n public class InvalidAttributesException extends NamingException\n {"}, {"sha": "f0c535a7d9267acb70426344eb18677a9a06cd91", "filename": "libjava/javax/naming/directory/InvalidSearchControlsException.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fdirectory%2FInvalidSearchControlsException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fdirectory%2FInvalidSearchControlsException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2Fdirectory%2FInvalidSearchControlsException.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -1,14 +1,14 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* Copyright (C) 2000, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n This software is copyrighted work licensed under the terms of the\n Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n details.  */\n  \n-package javax.naming;\n+package javax.naming.directory;\n \n-import java.lang.Exception;\n+import javax.naming.NamingException;\n \n public class InvalidSearchControlsException extends NamingException\n {"}, {"sha": "e1bb61c929567a3fe871fdabecf979e2c8176344", "filename": "libjava/javax/naming/directory/InvalidSearchFilterException.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fdirectory%2FInvalidSearchFilterException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fdirectory%2FInvalidSearchFilterException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2Fdirectory%2FInvalidSearchFilterException.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -1,14 +1,14 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* Copyright (C) 2000, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n This software is copyrighted work licensed under the terms of the\n Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n details.  */\n  \n-package javax.naming;\n+package javax.naming.directory;\n \n-import java.lang.Exception;\n+import javax.naming.NamingException;\n \n public class InvalidSearchFilterException extends NamingException\n {"}, {"sha": "963abee883e83c08c1d7c114334b84e0d92bc021", "filename": "libjava/javax/naming/directory/ModificationItem.java", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fdirectory%2FModificationItem.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fdirectory%2FModificationItem.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2Fdirectory%2FModificationItem.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,49 @@\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package javax.naming.directory;\n+import java.io.Serializable;\n+ \n+/**\n+ * @author Warren Levy <warrenl@redhat.com>\n+ * @date June 13, 2001\n+ */\n+\n+public class ModificationItem implements Serializable\n+{\n+  // Serialized fields.\n+  private int mod_op;\n+  private Attribute attr;\n+\n+  public ModificationItem(int mod_op, Attribute attr)\n+  {\n+    if (attr == null)\n+      throw new IllegalArgumentException(\"attr is null\");\n+    if (mod_op != DirContext.ADD_ATTRIBUTE &&\n+\tmod_op != DirContext.REPLACE_ATTRIBUTE &&\n+\tmod_op != DirContext.REMOVE_ATTRIBUTE)\n+      throw new IllegalArgumentException(\"mod_op is invalid\");\n+    this.mod_op = mod_op;\n+    this.attr = attr;\n+  }\n+\n+  public int getModificationOp()\n+  {\n+    return mod_op;\n+  }\n+\n+  public Attribute getAttribute()\n+  {\n+    return attr;\n+  }\n+\n+  public String toString()\n+  {\n+    return \"mod_op=\" + mod_op + \":\" + \"attr=\" + attr.toString();\n+  }\n+}"}, {"sha": "0c5ee1c3bc2feae3aa2b0bebbd63917ae2a897cb", "filename": "libjava/javax/naming/directory/NoSuchAttributeException.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fdirectory%2FNoSuchAttributeException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fdirectory%2FNoSuchAttributeException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2Fdirectory%2FNoSuchAttributeException.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -1,14 +1,14 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* Copyright (C) 2000, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n This software is copyrighted work licensed under the terms of the\n Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n details.  */\n  \n-package javax.naming;\n+package javax.naming.directory;\n \n-import java.lang.Exception;\n+import javax.naming.NamingException;\n \n public class NoSuchAttributeException extends NamingException\n {"}, {"sha": "6fc5b1d40902067b7f8305a13f3c739ad47a5e5e", "filename": "libjava/javax/naming/directory/SchemaViolationException.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fdirectory%2FSchemaViolationException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fdirectory%2FSchemaViolationException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2Fdirectory%2FSchemaViolationException.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -1,14 +1,14 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* Copyright (C) 2000, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n This software is copyrighted work licensed under the terms of the\n Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n details.  */\n  \n-package javax.naming;\n+package javax.naming.directory;\n \n-import java.lang.Exception;\n+import javax.naming.NamingException;\n \n public class SchemaViolationException extends NamingException\n {"}, {"sha": "d2b3e2453a9391eeb3b30bd9215afb3b26444eb1", "filename": "libjava/javax/naming/directory/SearchControls.java", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fdirectory%2FSearchControls.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fdirectory%2FSearchControls.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2Fdirectory%2FSearchControls.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,106 @@\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package javax.naming.directory;\n+import java.io.Serializable;\n+ \n+/**\n+ * @author Warren Levy <warrenl@redhat.com>\n+ * @date June 5, 2001\n+ */\n+\n+public class SearchControls extends Object implements Serializable\n+{\n+  public static final int OBJECT_SCOPE = 0;\n+  public static final int ONELEVEL_SCOPE = 1;\n+  public static final int SUBTREE_SCOPE = 2;\n+\n+  // Serialized fields.\n+  private int searchScope;\n+  private int timeLimit;\n+  private boolean derefLink;\n+  private boolean returnObj;\n+  private long countLimit;\n+  private String[] attributesToReturn;\n+\n+  public SearchControls()\n+  {\n+    this(ONELEVEL_SCOPE, 0L, 0, null, false, false);\n+  }\n+\n+  public SearchControls(int scope, long countlim, int timelim, String[] attrs,\n+  \t\t\tboolean retobj, boolean deref)\n+  {\n+    searchScope = scope;\n+    timeLimit = timelim;\n+    derefLink = deref;\n+    returnObj = retobj;\n+    countLimit = countlim;\n+    attributesToReturn = attrs;\n+  }\n+\n+  public int getSearchScope()\n+  {\n+    return searchScope;\n+  }\n+\n+  public int getTimeLimit()\n+  {\n+    return timeLimit;\n+  }\n+\n+  public boolean getDerefLinkFlag()\n+  {\n+    return derefLink;\n+  }\n+\n+  public boolean getReturningObjFlag()\n+  {\n+    return returnObj;\n+  }\n+\n+  public long getCountLimit()\n+  {\n+    return countLimit;\n+  }\n+\n+  public String[] getReturningAttributes()\n+  {\n+    return attributesToReturn;\n+  }\n+\n+  public void setSearchScope(int scope)\n+  {\n+    searchScope = scope;\n+  }\n+\n+  public void setTimeLimit(int ms)\n+  {\n+    timeLimit = ms;\n+  }\n+\n+  public void setDerefLinkFlag(boolean on)\n+  {\n+    derefLink = on;\n+  }\n+\n+  public void setReturningObjFlag(boolean on)\n+  {\n+    returnObj = on;\n+  }\n+\n+  public void setCountLimit(long limit)\n+  {\n+    countLimit = limit;\n+  }\n+\n+  public void setReturningAttributes(String[] attrs)\n+  {\n+    attributesToReturn = attrs;\n+  }\n+}"}, {"sha": "956c32cd502c6b02c25f85e3a9a40ff2e7de5d10", "filename": "libjava/javax/naming/directory/SearchResult.java", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fdirectory%2FSearchResult.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fdirectory%2FSearchResult.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2Fdirectory%2FSearchResult.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,64 @@\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package javax.naming.directory;\n+import javax.naming.*;\n+import java.io.Serializable;\n+ \n+/**\n+ * @author Warren Levy <warrenl@redhat.com>\n+ * @date June 13, 2001\n+ */\n+\n+public class SearchResult extends Binding\n+{\n+  // Serialized fields.\n+  private Attributes attrs;\n+\n+  public SearchResult(String name, Object obj, Attributes attrs)\n+  {\n+    super(name, obj);\n+    this.attrs = attrs;\n+  }\n+\n+  public SearchResult(String name, Object obj, Attributes attrs,\n+  \t\t      boolean isRelative)\n+  {\n+    super(name, obj, isRelative);\n+    this.attrs = attrs;\n+  }\n+\n+  public SearchResult(String name, String className, Object obj,\n+  \t\t      Attributes attrs)\n+  {\n+    super(name, className, obj);\n+    this.attrs = attrs;\n+  }\n+\n+  public SearchResult(String name, String className, Object obj,\n+  \t\t      Attributes attrs, boolean isRelative)\n+  {\n+    super(name, className, obj, isRelative);\n+    this.attrs = attrs;\n+  }\n+\n+  public Attributes getAttributes()\n+  {\n+    return attrs;\n+  }\n+\n+  public void setAttributes(Attributes attrs)\n+  {\n+    this.attrs = attrs;\n+  }\n+\n+  public String toString()\n+  {\n+    return super.toString() + \":\" + attrs.toString();\n+  }\n+}"}, {"sha": "80565391bb40e8c6742a54dfe9b9132540361e20", "filename": "libjava/javax/naming/event/EventContext.java", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fevent%2FEventContext.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fevent%2FEventContext.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2Fevent%2FEventContext.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,29 @@\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package javax.naming.event;\n+import javax.naming.*;\n+ \n+/**\n+ * @author Warren Levy <warrenl@redhat.com>\n+ * @date June 1, 2001\n+ */\n+\n+public interface EventContext extends Context\n+{\n+  public static final int OBJECT_SCOPE = 0;\n+  public static final int ONELEVEL_SCOPE = 1;\n+  public static final int SUBTREE_SCOPE = 2;\n+\n+  public void addNamingListener(Name target, int scope, NamingListener l)\n+    throws NamingException;\n+  public void addNamingListener(String target, int scope, NamingListener l)\n+    throws NamingException;\n+  public void removeNamingListener(NamingListener l) throws NamingException;\n+  public boolean targetMustExist() throws NamingException;\n+}"}, {"sha": "7321d0cc2c2e7c33de1af95d3100cec053f650c0", "filename": "libjava/javax/naming/event/EventDirContext.java", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fevent%2FEventDirContext.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fevent%2FEventDirContext.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2Fevent%2FEventDirContext.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,31 @@\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package javax.naming.event;\n+import javax.naming.*;\n+import javax.naming.directory.*;\n+ \n+/**\n+ * @author Warren Levy <warrenl@redhat.com>\n+ * @date June 1, 2001\n+ */\n+\n+public interface EventDirContext extends EventContext, DirContext\n+{\n+  public void addNamingListener(Name target, String filter, SearchControls ctls,\n+  \t\t\t\tNamingListener l) throws NamingException;\n+  public void addNamingListener(String target, String filter,\n+  \t\t\t\tSearchControls ctls, NamingListener l)\n+\t\t\t\tthrows NamingException;\n+  public void addNamingListener(Name target, String filter, Object[] filterArgs,\n+  \t\t\t\tSearchControls ctls, NamingListener l)\n+\t\t\t\tthrows NamingException;\n+  public void addNamingListener(String target, String filter,\n+  \t\t\t\tObject[] filterArgs, SearchControls ctls,\n+\t\t\t\tNamingListener l) throws NamingException;\n+}"}, {"sha": "5469d0437b2f1e932c4f7e8f3a4f88a77ca4aa01", "filename": "libjava/javax/naming/event/NamespaceChangeListener.java", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fevent%2FNamespaceChangeListener.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fevent%2FNamespaceChangeListener.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2Fevent%2FNamespaceChangeListener.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,21 @@\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package javax.naming.event;\n+ \n+/**\n+ * @author Warren Levy <warrenl@redhat.com>\n+ * @date June 1, 2001\n+ */\n+\n+public interface NamespaceChangeListener extends NamingListener\n+{\n+  public void objectAdded(NamingEvent evt);\n+  public void objectRemoved(NamingEvent evt);\n+  public void objectRenamed(NamingEvent evt);\n+}"}, {"sha": "3151dd84024a5f4e0cb1b4db2470e034dfa6a339", "filename": "libjava/javax/naming/event/NamingEvent.java", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fevent%2FNamingEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fevent%2FNamingEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2Fevent%2FNamingEvent.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,89 @@\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package javax.naming.event;\n+import javax.naming.*;\n+import java.util.EventObject;\n+ \n+/**\n+ * @author Warren Levy <warrenl@redhat.com>\n+ * @date June 5, 2001\n+ */\n+\n+public class NamingEvent extends EventObject\n+{\n+  public static final int OBJECT_ADDED = 0;\n+  public static final int OBJECT_REMOVED = 1;\n+  public static final int OBJECT_RENAMED = 2;\n+  public static final int OBJECT_CHANGED = 3;\n+\n+  // Serialized fields.\n+  protected Object changeInfo;\n+  protected int type;\n+  protected Binding oldBinding;\n+  protected Binding newBinding;\n+\n+  public NamingEvent(EventContext source, int type, Binding newBd,\n+  \t\t     Binding oldBd, Object changeInfo)\n+  {\n+    super(source);\n+    this.type = type;\n+    this.oldBinding = oldBd;\n+    this.newBinding = newBd;\n+    this.changeInfo = changeInfo;\n+    // FIXME: for OBJECT_ADDED, newBd must not be null;\n+    // FIXME: for OBJECT_CHANGED, newBd and oldBd must not be null;\n+    // FIXME: for OBJECT_RENAMED, one of newBd or oldBd may be null if newBd or\n+    // FIXME: oldBd is outside of the scope for which listener has registered.\n+    // FIXME: namingExceptionThrown() is called for the listener in question.\n+  }\n+\n+  public int getType()\n+  {\n+    return type;\n+  }\n+\n+  public EventContext getEventContext()\n+  {\n+    return (EventContext) getSource();\n+  }\n+\n+  public Binding getOldBinding()\n+  {\n+    return oldBinding;\n+  }\n+\n+  public Binding getNewBinding()\n+  {\n+    return newBinding;\n+  }\n+\n+  public Object getChangeInfo()\n+  {\n+    return changeInfo;\n+  }\n+\n+  public void dispatch(NamingListener listener)\n+  {\n+    switch (type)\n+      {\n+        case OBJECT_ADDED:\n+\t  ((NamespaceChangeListener) listener).objectAdded(this);\n+\t  break;\n+        case OBJECT_REMOVED:\n+\t  ((NamespaceChangeListener) listener).objectRemoved(this);\n+\t  break;\n+        case OBJECT_RENAMED:\n+\t  ((NamespaceChangeListener) listener).objectRenamed(this);\n+\t  break;\n+        case OBJECT_CHANGED:\n+\t  ((ObjectChangeListener) listener).objectChanged(this);\n+\t  break;\n+      }\n+  }\n+}"}, {"sha": "2cbdcb1141f3f461a3fec7bc3833d2453d7b8f67", "filename": "libjava/javax/naming/event/NamingExceptionEvent.java", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fevent%2FNamingExceptionEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fevent%2FNamingExceptionEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2Fevent%2FNamingExceptionEvent.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,43 @@\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package javax.naming.event;\n+import javax.naming.*;\n+import java.util.EventObject;\n+ \n+/**\n+ * @author Warren Levy <warrenl@redhat.com>\n+ * @date June 5, 2001\n+ */\n+\n+public class NamingExceptionEvent extends EventObject\n+{\n+  // Serialized fields.\n+  private NamingException exception;\n+\n+  public NamingExceptionEvent(EventContext source, NamingException exc)\n+  {\n+    super(source);\n+    exception = exc;\n+  }\n+\n+  public NamingException getException()\n+  {\n+    return exception;\n+  }\n+\n+  public EventContext getEventContext()\n+  {\n+    return (EventContext) getSource();\n+  }\n+\n+  public void dispatch(NamingListener listener)\n+  {\n+    listener.namingExceptionThrown(this);\n+  }\n+}"}, {"sha": "b631ccb384ecb9d3c7f667bf79806cdf6d171a6d", "filename": "libjava/javax/naming/event/NamingListener.java", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fevent%2FNamingListener.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fevent%2FNamingListener.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2Fevent%2FNamingListener.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,20 @@\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package javax.naming.event;\n+import java.util.EventListener;\n+ \n+/**\n+ * @author Warren Levy <warrenl@redhat.com>\n+ * @date June 1, 2001\n+ */\n+\n+public interface NamingListener extends EventListener\n+{\n+  public void namingExceptionThrown(NamingExceptionEvent evt);\n+}"}, {"sha": "9da3473a9d6b49f9b5acdf34451cb9b3ae58905a", "filename": "libjava/javax/naming/event/ObjectChangeListener.java", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fevent%2FObjectChangeListener.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fevent%2FObjectChangeListener.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2Fevent%2FObjectChangeListener.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,19 @@\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package javax.naming.event;\n+ \n+/**\n+ * @author Warren Levy <warrenl@redhat.com>\n+ * @date June 1, 2001\n+ */\n+\n+public interface ObjectChangeListener extends NamingListener\n+{\n+  public void objectChanged(NamingEvent evt);\n+}"}, {"sha": "156af9661ae6b810bf8480d2917bb08412f1eddd", "filename": "libjava/javax/naming/ldap/Control.java", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fldap%2FControl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fldap%2FControl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2Fldap%2FControl.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,25 @@\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package javax.naming.ldap;\n+import java.io.Serializable;\n+ \n+/**\n+ * @author Warren Levy <warrenl@redhat.com>\n+ * @date June 1, 2001\n+ */\n+\n+public interface Control extends Serializable\n+{\n+  public static final boolean CRITICAL = true;\n+  public static final boolean NONCRITICAL = false;\n+\n+  public String getID();\n+  public boolean isCritical();\n+  public byte[] getEncodedValue();\n+}"}, {"sha": "8c988ab16dd7fa65ed12a12cce39a6a78763ad87", "filename": "libjava/javax/naming/ldap/ControlFactory.java", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fldap%2FControlFactory.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fldap%2FControlFactory.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2Fldap%2FControlFactory.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,75 @@\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package javax.naming.ldap;\n+\n+import javax.naming.*;\n+import java.util.StringTokenizer;\n+import java.util.Hashtable;\n+\n+/**\n+ * @author Tom Tromey <tromey@redhat.com>\n+ * @date June 22, 2001\n+ */\n+public abstract class ControlFactory\n+{\n+  protected ControlFactory ()\n+  {\n+  }\n+\n+  public abstract Control getControlInstance (Control control)\n+    throws NamingException;\n+\n+  public static Control getControlInstance (Control control,\n+\t\t\t\t\t    Context ctx,\n+\t\t\t\t\t    Hashtable env)\n+    throws NamingException\n+  {\n+    String path = (String) env.get (LdapContext.CONTROL_FACTORIES);\n+    String path2 = null;\n+    if (ctx != null)\n+      path2 = (String) ctx.getEnvironment ().get (LdapContext.CONTROL_FACTORIES);\n+    if (path == null)\n+      path = path2;\n+    else if (path2 != null)\n+      path += \":\" + path2;\n+\n+    StringTokenizer tokens = new StringTokenizer (path, \":\");\n+    while (tokens.hasMoreTokens ())\n+      {\n+\tString name = tokens.nextToken ();\n+\ttry\n+\t  {\n+\t    Class k = Class.forName (name);\n+\t    ControlFactory cf = (ControlFactory) k.newInstance ();\n+\t    Control ctrl = cf.getControlInstance (control);\n+\t    if (ctrl != null)\n+\t      return ctrl;\n+\t  }\n+\tcatch (ClassNotFoundException _1)\n+\t  {\n+\t    // Ignore it.\n+\t  }\n+\tcatch (ClassCastException _2)\n+\t  {\n+\t    // Ignore it.\n+\t  }\n+\tcatch (InstantiationException _3)\n+\t  {\n+\t    // If we couldn't instantiate the factory we might get\n+\t    // this.\n+\t  }\n+\tcatch (IllegalAccessException _4)\n+\t  {\n+\t    // Another possibility when instantiating.\n+\t  }\n+      }\n+\n+    return control;\n+  }\n+}"}, {"sha": "af5a0fbabf945e3c476a014c57640a3d5bafc2c7", "filename": "libjava/javax/naming/ldap/ExtendedRequest.java", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fldap%2FExtendedRequest.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fldap%2FExtendedRequest.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2Fldap%2FExtendedRequest.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,26 @@\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package javax.naming.ldap;\n+import java.io.Serializable;\n+import javax.naming.*;\n+ \n+/**\n+ * @author Warren Levy <warrenl@redhat.com>\n+ * @date June 1, 2001\n+ */\n+\n+public interface ExtendedRequest extends Serializable\n+{\n+  public String getID();\n+  public byte[] getEncodedValue();\n+  public ExtendedResponse createExtendedResponse(String id,\n+  \t\t\t\t\t\t byte[] berValue, int offset,\n+\t\t\t\t\t\t int length)\n+\t\t\t\t\t\t throws NamingException;\n+}"}, {"sha": "73dd96ebed276b661dd544629d8bb2a9fd9000fa", "filename": "libjava/javax/naming/ldap/ExtendedResponse.java", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fldap%2FExtendedResponse.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fldap%2FExtendedResponse.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2Fldap%2FExtendedResponse.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,21 @@\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package javax.naming.ldap;\n+import java.io.Serializable;\n+ \n+/**\n+ * @author Warren Levy <warrenl@redhat.com>\n+ * @date June 1, 2001\n+ */\n+\n+public interface ExtendedResponse extends Serializable\n+{\n+  public String getID();\n+  public byte[] getEncodedValue();\n+}"}, {"sha": "c37d30c3ede42e1e64afbbf2ba636e3689450f52", "filename": "libjava/javax/naming/ldap/HasControls.java", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fldap%2FHasControls.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fldap%2FHasControls.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2Fldap%2FHasControls.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,20 @@\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package javax.naming.ldap;\n+import javax.naming.*;\n+ \n+/**\n+ * @author Warren Levy <warrenl@redhat.com>\n+ * @date June 1, 2001\n+ */\n+\n+public interface HasControls\n+{\n+  public Control[] getControls() throws NamingException;\n+}"}, {"sha": "88d0e26ec6587ba8156b35a2ce077fc73bf970b9", "filename": "libjava/javax/naming/ldap/InitialLdapContext.java", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fldap%2FInitialLdapContext.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fldap%2FInitialLdapContext.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2Fldap%2FInitialLdapContext.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,99 @@\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package javax.naming.ldap;\n+\n+import javax.naming.*;\n+import javax.naming.directory.InitialDirContext;\n+import java.util.Hashtable;\n+\n+/**\n+ * @author Tom Tromey <tromey@redhat.com>\n+ * @date June 21, 2001\n+ */\n+public class InitialLdapContext\n+  extends InitialDirContext\n+  implements LdapContext\n+{\n+  public InitialLdapContext ()\n+    throws NamingException\n+  {\n+    this (null, null);\n+  }\n+\n+  public InitialLdapContext (Hashtable environment, Control[] connControls)\n+    throws NamingException\n+  {\n+    super (false);\n+\n+    if (connControls != null)\n+      {\n+\tif (environment == null)\n+\t  environment = new Hashtable ();\n+\telse\n+\t  environment = (Hashtable) environment.clone ();\n+\tenvironment.put (\"java.naming.ldap.control.connect\",\n+\t\t\t connControls);\n+      }\n+\n+    init (environment);\n+  }\n+\n+  private LdapContext getDefaultInitLdapCtx ()\n+    throws NamingException\n+  {\n+    Context c = getDefaultInitCtx ();\n+    if (c == null)\n+      throw new NoInitialContextException ();\n+    else if (! (c instanceof LdapContext))\n+      throw new NotContextException ();\n+    return (LdapContext) c;\n+  }\n+\n+  public ExtendedResponse extendedOperation (ExtendedRequest request)\n+    throws NamingException\n+  {\n+    return getDefaultInitLdapCtx ().extendedOperation (request);\n+  }\n+\n+  public Control[] getConnectControls ()\n+    throws NamingException\n+  {\n+    return getDefaultInitLdapCtx ().getConnectControls ();\n+  }\n+\n+  public Control[] getRequestControls ()\n+    throws NamingException\n+  {\n+    return getDefaultInitLdapCtx ().getRequestControls ();\n+  }\n+\n+  public Control[] getResponseControls ()\n+    throws NamingException\n+  {\n+    return getDefaultInitLdapCtx ().getResponseControls ();\n+  }\n+\n+  public LdapContext newInstance (Control[] reqControls)\n+    throws NamingException\n+  {\n+    return getDefaultInitLdapCtx ().newInstance (reqControls);\n+  }\n+\n+  public void reconnect (Control[] connControls)\n+    throws NamingException\n+  {\n+    getDefaultInitLdapCtx ().reconnect (connControls);\n+  }\n+\n+  public void setRequestControls (Control[] reqControls)\n+    throws NamingException\n+  {\n+    getDefaultInitLdapCtx ().setRequestControls (reqControls);\n+  }\n+}"}, {"sha": "204269e337be12b32fff5894fa775e6fc18e0667", "filename": "libjava/javax/naming/ldap/LdapContext.java", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fldap%2FLdapContext.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fldap%2FLdapContext.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2Fldap%2FLdapContext.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,32 @@\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package javax.naming.ldap;\n+import javax.naming.*;\n+import javax.naming.directory.*;\n+ \n+/**\n+ * @author Warren Levy <warrenl@redhat.com>\n+ * @date June 1, 2001\n+ */\n+\n+public interface LdapContext extends DirContext\n+{\n+  public static final String CONTROL_FACTORIES = \"java.naming.factory.control\";\n+\n+  public ExtendedResponse extendedOperation(ExtendedRequest request)\n+    throws NamingException;\n+  public LdapContext newInstance(Control[] requestControls)\n+    throws NamingException;\n+  public void reconnect(Control[] connCtls) throws NamingException;\n+  public Control[] getConnectControls() throws NamingException;\n+  public void setRequestControls(Control[] requestControls)\n+    throws NamingException;\n+  public Control[] getRequestControls() throws NamingException;\n+  public Control[] getResponseControls() throws NamingException;\n+}"}, {"sha": "165371052c59139a89973e67d638891b755d452c", "filename": "libjava/javax/naming/ldap/LdapReferralException.java", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fldap%2FLdapReferralException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fldap%2FLdapReferralException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2Fldap%2FLdapReferralException.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,35 @@\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package javax.naming.ldap;\n+import javax.naming.*;\n+import java.util.Hashtable;\n+ \n+/**\n+ * @author Warren Levy <warrenl@redhat.com>\n+ * @date June 1, 2001\n+ */\n+\n+public abstract class LdapReferralException extends ReferralException\n+{\n+  protected LdapReferralException()\n+  {\n+    super();\n+  }\n+\n+  protected LdapReferralException(String explanation)\n+  {\n+    super(explanation);\n+  }\n+\n+  public abstract Context getReferralContext() throws NamingException;\n+  public abstract Context getReferralContext(Hashtable env)\n+    throws NamingException;\n+  public abstract Context getReferralContext(Hashtable env, Control[] reqCtls)\n+    throws NamingException;\n+}"}, {"sha": "539d5999267726531c4f7466add995566df91574", "filename": "libjava/javax/naming/ldap/UnsolicitedNotification.java", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fldap%2FUnsolicitedNotification.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fldap%2FUnsolicitedNotification.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2Fldap%2FUnsolicitedNotification.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,21 @@\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package javax.naming.ldap;\n+import javax.naming.*;\n+ \n+/**\n+ * @author Warren Levy <warrenl@redhat.com>\n+ * @date June 1, 2001\n+ */\n+\n+public interface UnsolicitedNotification extends ExtendedResponse, HasControls\n+{\n+  public String[] getReferrals();\n+  public NamingException getException();\n+}"}, {"sha": "fe1e4042bcde36f0cba5101e47acc89555ee14f1", "filename": "libjava/javax/naming/ldap/UnsolicitedNotificationEvent.java", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fldap%2FUnsolicitedNotificationEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fldap%2FUnsolicitedNotificationEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2Fldap%2FUnsolicitedNotificationEvent.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,38 @@\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package javax.naming.ldap;\n+import java.util.EventObject;\n+ \n+/**\n+ * @author Warren Levy <warrenl@redhat.com>\n+ * @date June 5, 2001\n+ */\n+\n+public class UnsolicitedNotificationEvent extends EventObject\n+{\n+  // Serialized fields.\n+  private UnsolicitedNotification notice;\n+\n+  public UnsolicitedNotificationEvent(Object src,\n+  \t\t\t\t      UnsolicitedNotification notice)\n+  {\n+    super(src);\n+    this.notice = notice;\n+  }\n+\n+  public UnsolicitedNotification getNotification()\n+  {\n+    return notice;\n+  }\n+\n+  public void dispatch(UnsolicitedNotificationListener listener)\n+  {\n+    listener.notificationReceived(this);\n+  }\n+}"}, {"sha": "2f22a6180965de74f86d1af31355fa55c12a2c16", "filename": "libjava/javax/naming/ldap/UnsolicitedNotificationListener.java", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fldap%2FUnsolicitedNotificationListener.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fldap%2FUnsolicitedNotificationListener.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2Fldap%2FUnsolicitedNotificationListener.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,20 @@\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package javax.naming.ldap;\n+import javax.naming.event.*;\n+ \n+/**\n+ * @author Warren Levy <warrenl@redhat.com>\n+ * @date June 1, 2001\n+ */\n+\n+public interface UnsolicitedNotificationListener extends NamingListener\n+{\n+  public void notificationReceived(UnsolicitedNotificationEvent evt);\n+}"}, {"sha": "6749ff316347e1d482baed3975275c68aeee5ce5", "filename": "libjava/javax/naming/spi/DirObjectFactory.java", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fspi%2FDirObjectFactory.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fspi%2FDirObjectFactory.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2Fspi%2FDirObjectFactory.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,24 @@\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package javax.naming.spi;\n+import javax.naming.*;\n+import javax.naming.directory.*;\n+import java.util.Hashtable;\n+ \n+/**\n+ * @author Warren Levy <warrenl@redhat.com>\n+ * @date June 1, 2001\n+ */\n+\n+public interface DirObjectFactory extends ObjectFactory\n+{\n+  public Object getObjectInstance(Object obj, Name name, Context nameCtx,\n+  \t\t\t\t  Hashtable environment, Attributes attrs)\n+\t\t\t\t  throws Exception;\n+}"}, {"sha": "dbd35c7cc3c75af4ee4e24204df071df513bfb7f", "filename": "libjava/javax/naming/spi/DirStateFactory.java", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fspi%2FDirStateFactory.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fspi%2FDirStateFactory.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2Fspi%2FDirStateFactory.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,50 @@\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package javax.naming.spi;\n+import javax.naming.*;\n+import javax.naming.directory.*;\n+import java.util.Hashtable;\n+ \n+/**\n+ * @author Warren Levy <warrenl@redhat.com>\n+ * @date June 1, 2001\n+ */\n+\n+public interface DirStateFactory extends StateFactory\n+{\n+  // Inner class\n+\n+  public static class Result\n+  {\n+    private Object obj;\n+    private Attributes outAttrs;\n+\n+    public Result(Object obj, Attributes outAttrs)\n+    {\n+      this.obj = obj;\n+      this.outAttrs = outAttrs;\n+    }\n+\n+    public Object getObject()\n+    {\n+      return obj;\n+    }\n+\n+    public Attributes getAttributes()\n+    {\n+      return outAttrs;\n+    }\n+  }\n+\n+  public DirStateFactory.Result getStateToBind(Object obj, Name name,\n+  \t\t\t\t\t       Context nameCtx,\n+\t\t\t\t\t       Hashtable environment,\n+\t\t\t\t\t       Attributes inAttrs)\n+\t\t\t\t\t       throws NamingException;\n+}"}, {"sha": "33872f4159452b440879683a67ad84f98c5558a3", "filename": "libjava/javax/naming/spi/DirectoryManager.java", "status": "added", "additions": 204, "deletions": 0, "changes": 204, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fspi%2FDirectoryManager.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fspi%2FDirectoryManager.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2Fspi%2FDirectoryManager.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,204 @@\n+/* Copyright (C) 2000, 2001 Free Software Foundation\n+   \n+   This file is part of libgcj.\n+   \n+   This software is copyrighted work licensed under the terms of the\n+   Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+   details.  */\n+\n+package javax.naming.spi;\n+\n+import javax.naming.*;\n+import javax.naming.directory.*;\n+import java.util.Hashtable;\n+import java.util.StringTokenizer;\n+import java.util.Enumeration;\n+\n+/**\n+ * @author Tom Tromey <tromey@redhat.com>\n+ * @date June 25, 2001\n+ */\n+public class DirectoryManager extends NamingManager\n+{\n+  // Can't instantiate this class.\n+  DirectoryManager ()\n+  {\n+  }\n+\n+  public static DirContext getContinuationDirContext (CannotProceedException c)\n+    throws NamingException\n+  {\n+    return (DirContext) getContinuationContext (c);\n+  }\n+\n+  // Try to create an object using the factory.  Return null on\n+  // failure.\n+  private static Object tryCreateObject (ObjectFactory factory,\n+\t\t\t\t\t Object refInfo,\n+\t\t\t\t\t Name name,\n+\t\t\t\t\t Context nameCtx,\n+\t\t\t\t\t Hashtable environment,\n+\t\t\t\t\t Attributes attrs)\n+    throws Exception\n+  {\n+    if (factory instanceof DirObjectFactory)\n+      {\n+\tDirObjectFactory dof = (DirObjectFactory) factory;\n+\treturn dof.getObjectInstance (refInfo, name, nameCtx,\n+\t\t\t\t      environment, attrs);\n+      }\n+    else\n+      return factory.getObjectInstance (refInfo, name, nameCtx,\n+\t\t\t\t\tenvironment);\n+  }\n+\n+  public static Object getObjectInstance (Object refInfo, Name name,\n+\t\t\t\t\t  Context nameCtx,\n+\t\t\t\t\t  Hashtable environment,\n+\t\t\t\t\t  Attributes attrs)\n+    throws Exception\n+  {\n+    ObjectFactory factory = null;\n+\n+    if (ofb != null)\n+      factory = ofb.createObjectFactory (refInfo, environment);\n+    else\n+      {\n+\t// First see if we have a Reference or a Referenceable.  If so\n+\t// we do some special processing.\n+\tObject ref2 = refInfo;\n+\tif (refInfo instanceof Referenceable)\n+\t  ref2 = ((Referenceable) refInfo).getReference ();\n+\tif (ref2 instanceof Reference)\n+\t  {\n+\t    Reference ref = (Reference) ref2;\n+\n+\t    // If we have a factory class name then we use that.\n+\t    String fClass = ref.getFactoryClassName ();\n+\t    if (fClass != null)\n+\t      {\n+\t\t// Exceptions here are passed to the caller.\n+\t\tClass k = Class.forName (fClass);\n+\t\tfactory = (ObjectFactory) k.newInstance ();\n+\t      }\n+\t    else\n+\t      {\n+\t\t// There's no factory class name.  If the address is a\n+\t\t// StringRefAddr with address type `URL', then we try\n+\t\t// the URL's context factory.\n+\t\tEnumeration e = ref.getAll ();\n+\t\twhile (e.hasMoreElements ())\n+\t\t  {\n+\t\t    RefAddr ra = (RefAddr) e.nextElement ();\n+\t\t    if (ra instanceof StringRefAddr\n+\t\t\t&& \"URL\".equals (ra.getType ()))\n+\t\t      {\n+\t\t\tfactory\n+\t\t\t  = (ObjectFactory) getURLContext (refInfo,\n+\t\t\t\t\t\t\t   name,\n+\t\t\t\t\t\t\t   nameCtx,\n+\t\t\t\t\t\t\t   (String) ra.getContent (),\n+\t\t\t\t\t\t\t   environment);\n+\t\t\tObject obj = tryCreateObject (factory,\n+\t\t\t\t\t\t      refInfo,\n+\t\t\t\t\t\t      name,\n+\t\t\t\t\t\t      nameCtx,\n+\t\t\t\t\t\t      environment,\n+\t\t\t\t\t\t      attrs);\n+\t\t\tif (obj != null)\n+\t\t\t  return obj;\n+\t\t      }\n+\t\t  }\n+\n+\t\t// Have to try the next step.\n+\t\tfactory = null;\n+\t      }\n+\t  }\n+\n+\t// Now look at OBJECT_FACTORIES to find the factory.\n+\tif (factory == null)\n+\t  {\n+\t    StringTokenizer tokens = getPlusPath (Context.OBJECT_FACTORIES,\n+\t\t\t\t\t\t  environment, nameCtx);\n+\n+\t    while (tokens.hasMoreTokens ())\n+\t      {\n+\t\tString klassName = tokens.nextToken ();\n+\t\tClass k = Class.forName (klassName);\n+\t\tfactory = (ObjectFactory) k.newInstance ();\n+\t\tObject obj = tryCreateObject (factory, refInfo, name,\n+\t\t\t\t\t      nameCtx, environment, attrs);\n+\t\tif (obj != null)\n+\t\t  return obj;\n+\t      }\n+\n+\t    // Failure.\n+\t    return refInfo;\n+\t  }\n+      }\n+\n+    if (factory == null)\n+      return refInfo;\n+    Object obj = tryCreateObject (factory, refInfo, name,\n+\t\t\t\t  nameCtx, environment, attrs);\n+    return obj == null ? refInfo : obj;\n+  }\n+\n+  public static DirStateFactory.Result getStateToBind (Object obj,\n+\t\t\t\t\t\t       Name name,\n+\t\t\t\t\t\t       Context nameCtx,\n+\t\t\t\t\t\t       Hashtable environment,\n+\t\t\t\t\t\t       Attributes attrs)\n+    throws NamingException\n+  {\n+    StringTokenizer tokens = getPlusPath (Context.STATE_FACTORIES,\n+\t\t\t\t\t  environment, nameCtx);\n+    while (tokens.hasMoreTokens ())\n+      {\n+\tString klassName = tokens.nextToken ();\n+\ttry\n+\t  {\n+\t    Class k = Class.forName (klassName);\n+\t    StateFactory factory = (StateFactory) k.newInstance ();\n+\n+\t    DirStateFactory.Result result = null;\n+\t    if (factory instanceof DirStateFactory)\n+\t      {\n+\t\tDirStateFactory dsf = (DirStateFactory) factory;\n+\t\tresult = dsf.getStateToBind (obj, name, nameCtx, environment,\n+\t\t\t\t\t     attrs);\n+\t      }\n+\t    else\n+\t      {\n+\t\tObject o = factory.getStateToBind (obj, name, nameCtx,\n+\t\t\t\t\t\t   environment);\n+\t\tif (o != null)\n+\t\t  result = new DirStateFactory.Result (o, attrs);\n+\t      }\n+\t    if (result != null)\n+\t      return result;\n+\t  }\n+\tcatch (ClassNotFoundException _1)\n+\t  {\n+\t    // Ignore it.\n+\t  }\n+\tcatch (ClassCastException _2)\n+\t  {\n+\t    // This means that the class we found was not an\n+\t    // ObjectFactory or that the factory returned something\n+\t    // which was not a Context.\n+\t  }\n+\tcatch (InstantiationException _3)\n+\t  {\n+\t    // If we couldn't instantiate the factory we might get\n+\t    // this.\n+\t  }\n+\tcatch (IllegalAccessException _4)\n+\t  {\n+\t    // Another possibility when instantiating.\n+\t  }\n+      }\n+\n+    return new DirStateFactory.Result (obj, attrs);\n+  }\n+}"}, {"sha": "53eeb3a71b0c7ead55b7710e2f68359ec92a7700", "filename": "libjava/javax/naming/spi/NamingManager.java", "status": "modified", "additions": 298, "deletions": 17, "changes": 315, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fspi%2FNamingManager.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fspi%2FNamingManager.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2Fspi%2FNamingManager.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2000 Free Software Foundation\n+/* Copyright (C) 2000, 2001 Free Software Foundation\n    \n    This file is part of libgcj.\n    \n@@ -8,19 +8,28 @@\n \n package javax.naming.spi;\n \n-import java.util.Hashtable;\n+import java.util.*;\n import javax.naming.*;\n \n public class NamingManager\n {\n+  public static final String CPE = \"java.naming.spi.CannotProceedException\";\n+\n   private static InitialContextFactoryBuilder icfb = null;\n+  private static ObjectFactoryBuilder ofb = null;\n+\n+  // This class cannot be instantiated.\n+  NamingManager ()\n+  {\n+  }\n \n   public static boolean hasInitialContextFactoryBuilder ()\n   {\n     return icfb != null;\n   }\n   \n-  public static Context getInitialContext (Hashtable environment) throws NamingException\n+  public static Context getInitialContext (Hashtable environment)\n+    throws NamingException\n   {\n     InitialContextFactory icf = null;\n     \n@@ -33,25 +42,297 @@ public static Context getInitialContext (Hashtable environment) throws NamingExc\n \t  java_naming_factory_initial\n \t    = (String) environment.get (Context.INITIAL_CONTEXT_FACTORY);\n \tif (java_naming_factory_initial == null)\n-\t  throw new NoInitialContextException (\"Can't find property: \" + Context.INITIAL_CONTEXT_FACTORY);\n-\t\n-\ttry {\n-\t  icf = (InitialContextFactory) Thread.currentThread().getContextClassLoader().loadClass(java_naming_factory_initial).newInstance();\n-\t} catch (Exception exception) {\n-\t  NoInitialContextException e\n-\t    = new NoInitialContextException(\"Can't load InitialContextFactory class: \" + java_naming_factory_initial);\n-\t  e.setRootCause(exception);\n-\t  throw e;\n-\t}\n+\t  java_naming_factory_initial =\n+\t    System.getProperty (Context.INITIAL_CONTEXT_FACTORY);\n+\tif (java_naming_factory_initial == null)\n+\t  throw new\n+\t    NoInitialContextException (\"Can't find property: \"\n+\t\t\t\t       + Context.INITIAL_CONTEXT_FACTORY);\n+\n+\ttry\n+\t  {\n+\t    icf = (InitialContextFactory) Class.forName (java_naming_factory_initial).newInstance ();\n+\t  }\n+\tcatch (Exception exception)\n+\t  {\n+\t    NoInitialContextException e\n+\t      = new NoInitialContextException (\"Can't load InitialContextFactory class: \"\n+\t\t\t\t\t       + java_naming_factory_initial);\n+\t    e.setRootCause(exception);\n+\t    throw e;\n+\t  }\n       }\n-    \n+\n     return icf.getInitialContext (environment);\n   }\n \n-  public static Context getURLContext(String scheme,\n-\t\t\t\t      Hashtable environment) \n+  static Context getURLContext (Object refInfo,\n+\t\t\t\tName name,\n+\t\t\t\tContext nameCtx,\n+\t\t\t\tString scheme,\n+\t\t\t\tHashtable environment) \n+    throws NamingException\n+  {\n+    String prefixes = null;\n+    if (environment != null)\n+      prefixes = (String) environment.get (Context.URL_PKG_PREFIXES);\n+    if (prefixes == null)\n+      prefixes = System.getProperty (Context.URL_PKG_PREFIXES);\n+    if (prefixes == null)\n+      {\n+\t// Specified as the default in the docs.  Unclear if this is\n+\t// right for us.\n+\tprefixes = \"com.sun.jndi.url\";\n+      }\n+\n+    scheme += \"URLContextFactory\";\n+\n+    StringTokenizer tokens = new StringTokenizer (prefixes, \":\");\n+    while (tokens.hasMoreTokens ())\n+      {\n+\tString aTry = tokens.nextToken ();\n+\ttry\n+\t  {\n+\t    Class factoryClass = Class.forName (aTry + \".\" + scheme);\n+\t    ObjectFactory factory =\n+\t      (ObjectFactory) factoryClass.newInstance ();\n+\t    Object obj = factory.getObjectInstance (refInfo, name,\n+\t\t\t\t\t\t    nameCtx, environment);\n+\t    Context ctx = (Context) obj;\n+\t    if (ctx != null)\n+\t      return ctx;\n+\t  }\n+\tcatch (ClassNotFoundException _1)\n+\t  {\n+\t    // Ignore it.\n+\t  }\n+\tcatch (ClassCastException _2)\n+\t  {\n+\t    // This means that the class we found was not an\n+\t    // ObjectFactory or that the factory returned something\n+\t    // which was not a Context.\n+\t  }\n+\tcatch (InstantiationException _3)\n+\t  {\n+\t    // If we couldn't instantiate the factory we might get\n+\t    // this.\n+\t  }\n+\tcatch (IllegalAccessException _4)\n+\t  {\n+\t    // Another possibility when instantiating.\n+\t  }\n+\tcatch (NamingException _5)\n+\t  {\n+\t    throw _5;\n+\t  }\n+\tcatch (Exception _6)\n+\t  {\n+\t    // Anything from getObjectInstance.\n+\t  }\n+      }\n+\n+    return null;\n+  }\n+\n+  public static Context getURLContext (String scheme,\n+\t\t\t\t       Hashtable environment) \n        throws NamingException\n   {\n-    throw new Error (\"javax.naming.spi.NamingManager.getURLContext not implemented\");\n+    return getURLContext (null, null, null, scheme, environment);\n+  }\n+\n+  public static void setObjectFactoryBuilder (ObjectFactoryBuilder builder)\n+    throws NamingException\n+  {\n+    SecurityManager sm = System.getSecurityManager ();\n+    if (sm != null)\n+      sm.checkSetFactory ();\n+    // Once the builder is installed it cannot be replaced.\n+    if (ofb != null)\n+      throw new IllegalStateException (\"builder already installed\");\n+    if (builder != null)\n+      ofb = builder;\n+  }\n+\n+  static StringTokenizer getPlusPath (String property, Hashtable env,\n+\t\t\t\t      Context nameCtx)\n+    throws NamingException\n+  {\n+    String path = (String) env.get (property);\n+    if (nameCtx == null)\n+      nameCtx = getInitialContext (env);\n+    String path2 = (String) nameCtx.getEnvironment ().get (property);\n+    if (path == null)\n+      path = path2;\n+    else if (path2 != null)\n+      path += \":\" + path2;\n+    return new StringTokenizer (path, \":\");\n+  }\n+\n+  public static Object getObjectInstance (Object refInfo,\n+\t\t\t\t\t  Name name,\n+\t\t\t\t\t  Context nameCtx,\n+\t\t\t\t\t  Hashtable environment)\n+    throws Exception\n+  {\n+    ObjectFactory factory = null;\n+\n+    if (ofb != null)\n+      factory = ofb.createObjectFactory (refInfo, environment);\n+    else\n+      {\n+\t// First see if we have a Reference or a Referenceable.  If so\n+\t// we do some special processing.\n+\tObject ref2 = refInfo;\n+\tif (refInfo instanceof Referenceable)\n+\t  ref2 = ((Referenceable) refInfo).getReference ();\n+\tif (ref2 instanceof Reference)\n+\t  {\n+\t    Reference ref = (Reference) ref2;\n+\n+\t    // If we have a factory class name then we use that.\n+\t    String fClass = ref.getFactoryClassName ();\n+\t    if (fClass != null)\n+\t      {\n+\t\t// Exceptions here are passed to the caller.\n+\t\tClass k = Class.forName (fClass);\n+\t\tfactory = (ObjectFactory) k.newInstance ();\n+\t      }\n+\t    else\n+\t      {\n+\t\t// There's no factory class name.  If the address is a\n+\t\t// StringRefAddr with address type `URL', then we try\n+\t\t// the URL's context factory.\n+\t\tEnumeration e = ref.getAll ();\n+\t\twhile (e.hasMoreElements ())\n+\t\t  {\n+\t\t    RefAddr ra = (RefAddr) e.nextElement ();\n+\t\t    if (ra instanceof StringRefAddr\n+\t\t\t&& \"URL\".equals (ra.getType ()))\n+\t\t      {\n+\t\t\tfactory\n+\t\t\t  = (ObjectFactory) getURLContext (refInfo,\n+\t\t\t\t\t\t\t   name,\n+\t\t\t\t\t\t\t   nameCtx,\n+\t\t\t\t\t\t\t   (String) ra.getContent (),\n+\t\t\t\t\t\t\t   environment);\n+\t\t\tObject obj = factory.getObjectInstance (refInfo,\n+\t\t\t\t\t\t\t\tname,\n+\t\t\t\t\t\t\t\tnameCtx,\n+\t\t\t\t\t\t\t\tenvironment);\n+\t\t\tif (obj != null)\n+\t\t\t  return obj;\n+\t\t      }\n+\t\t  }\n+\n+\t\t// Have to try the next step.\n+\t\tfactory = null;\n+\t      }\n+\t  }\n+\n+\t// Now look at OBJECT_FACTORIES to find the factory.\n+\tif (factory == null)\n+\t  {\n+\t    StringTokenizer tokens = getPlusPath (Context.OBJECT_FACTORIES,\n+\t\t\t\t\t\t  environment, nameCtx);\n+\n+\t    while (tokens.hasMoreTokens ())\n+\t      {\n+\t\tString klassName = tokens.nextToken ();\n+\t\tClass k = Class.forName (klassName);\n+\t\tfactory = (ObjectFactory) k.newInstance ();\n+\t\tObject obj = factory.getObjectInstance (refInfo, name,\n+\t\t\t\t\t\t\tnameCtx, environment);\n+\t\tif (obj != null)\n+\t\t  return obj;\n+\t      }\n+\n+\t    // Failure.\n+\t    return refInfo;\n+\t  }\n+      }\n+\n+    if (factory == null)\n+      return refInfo;\n+    Object obj = factory.getObjectInstance (refInfo, name,\n+\t\t\t\t\t    nameCtx, environment);\n+    return obj == null ? refInfo : obj;\n+  }\n+\n+  public static void setInitialContextFactoryBuilder (InitialContextFactoryBuilder builder)\n+    throws NamingException\n+  {\n+    SecurityManager sm = System.getSecurityManager ();\n+    if (sm != null)\n+      sm.checkSetFactory ();\n+    // Once the builder is installed it cannot be replaced.\n+    if (icfb != null)\n+      throw new IllegalStateException (\"builder already installed\");\n+    if (builder != null)\n+      icfb = builder;\n+  }\n+\n+  public static Context getContinuationContext (CannotProceedException cpe)\n+    throws NamingException\n+  {\n+    Hashtable env = cpe.getEnvironment ();\n+    if (env != null)\n+      env.put (CPE, cpe);\n+\n+    // It is really unclear to me if this is right.\n+    try\n+      {\n+\tObject obj = getObjectInstance (null, cpe.getAltName (),\n+\t\t\t\t\tcpe.getAltNameCtx (), env);\n+\tif (obj != null)\n+\t  return (Context) obj;\n+      }\n+    catch (Exception _)\n+      {\n+      }\n+\n+    throw cpe;\n+  }\n+\n+  public static Object getStateToBind (Object obj, Name name,\n+\t\t\t\t       Context nameCtx, Hashtable environment)\n+    throws NamingException\n+  {\n+    StringTokenizer tokens = getPlusPath (Context.STATE_FACTORIES,\n+\t\t\t\t\t  environment, nameCtx);\n+    while (tokens.hasMoreTokens ())\n+      {\n+\tString klassName = tokens.nextToken ();\n+\ttry\n+\t  {\n+\t    Class k = Class.forName (klassName);\n+\t    StateFactory factory = (StateFactory) k.newInstance ();\n+\t    Object o = factory.getStateToBind (obj, name, nameCtx,\n+\t\t\t\t\t       environment);\n+\t    if (o != null)\n+\t      return o;\n+\t  }\n+\tcatch (ClassNotFoundException _1)\n+\t  {\n+\t    // Ignore it.\n+\t  }\n+\tcatch (ClassCastException _2)\n+\t  {\n+\t    // This means that the class we found was not an\n+\t    // ObjectFactory or that the factory returned something\n+\t    // which was not a Context.\n+\t  }\n+\tcatch (InstantiationException _3)\n+\t  {\n+\t    // If we couldn't instantiate the factory we might get\n+\t    // this.\n+\t  }\n+\tcatch (IllegalAccessException _4)\n+\t  {\n+\t    // Another possibility when instantiating.\n+\t  }\n+      }\n+\n+    return obj;\n   }\n }"}, {"sha": "818962879489ccb550fe58e4c541d6af1db37bbe", "filename": "libjava/javax/naming/spi/ObjectFactory.java", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fspi%2FObjectFactory.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fspi%2FObjectFactory.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2Fspi%2FObjectFactory.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2000 Free Software Foundation\n+/* Copyright (C) 2001 Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -11,14 +11,11 @@\n import java.util.Hashtable;\n import javax.naming.*;\n \n-public class ObjectFactory\n+public interface ObjectFactory\n {\n   public Object getObjectInstance (Object obj,\n \t\t\t\t   Name name,\n \t\t\t\t   Context nameCtx,\n \t\t\t\t   Hashtable environment)\n-       throws Exception\n-  {\n-    throw new Error (\"javax.naming.spi.ObjectFactory.getObjectInstance not implemented\");\n-  }\n+       throws Exception;\n }"}, {"sha": "e8796036aa40d8b10aa17f5b1e36e4f0ef2875dd", "filename": "libjava/javax/naming/spi/ObjectFactoryBuilder.java", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fspi%2FObjectFactoryBuilder.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fspi%2FObjectFactoryBuilder.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2Fspi%2FObjectFactoryBuilder.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,23 @@\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package javax.naming.spi;\n+import javax.naming.*;\n+import java.util.Hashtable;\n+ \n+/**\n+ * @author Warren Levy <warrenl@redhat.com>\n+ * @date June 1, 2001\n+ */\n+\n+public interface ObjectFactoryBuilder\n+{\n+  public ObjectFactory createObjectFactory(Object obj,\n+  \t\t\t\t\t   Hashtable environment)\n+\t\t\t\t\t   throws NamingException;\n+}"}, {"sha": "d00aef581f4789fcb538a5a5d4673eac095684db", "filename": "libjava/javax/naming/spi/ResolveResult.java", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fspi%2FResolveResult.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fspi%2FResolveResult.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2Fspi%2FResolveResult.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,93 @@\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package javax.naming.spi;\n+import javax.naming.*;\n+import java.util.EventObject;\n+import java.io.Serializable;\n+ \n+/**\n+ * @author Warren Levy <warrenl@redhat.com>\n+ * @date June 5, 2001\n+ */\n+\n+public class ResolveResult implements Serializable\n+{\n+  // Serialized fields.\n+  protected Object resolvedObj;\n+  protected Name remainingName;\n+\n+  protected ResolveResult()\n+  {\n+    resolvedObj = null;\n+    remainingName = null;\n+  }\n+\n+  public ResolveResult(Object robj, String rcomp)\n+  {\n+    if (robj == null || rcomp == null)\n+      throw new IllegalArgumentException ();\n+    resolvedObj = robj;\n+    remainingName = new CompositeName ();\n+    try\n+      {\n+\tremainingName.add (rcomp);\n+      }\n+    catch (InvalidNameException _)\n+      {\n+      }\n+  }\n+\n+  public ResolveResult(Object robj, Name rname)\n+  {\n+    resolvedObj = robj;\n+    remainingName = rname;\n+  }\n+\n+  public Name getRemainingName()\n+  {\n+    return remainingName;\n+  }\n+\n+  public Object getResolvedObj()\n+  {\n+    return resolvedObj;\n+  }\n+\n+  public void setRemainingName(Name name)\n+  {\n+    remainingName = (Name) name.clone();\n+  }\n+\n+  public void appendRemainingName(Name name)\n+  {\n+    try\n+      {\n+\tremainingName.addAll(name);\n+      }\n+    catch (InvalidNameException _)\n+      {\n+      }\n+  }\n+\n+  public void appendRemainingComponent(String name)\n+  {\n+    try\n+      {\n+\tremainingName.add(name);\n+      }\n+    catch (InvalidNameException _)\n+      {\n+      }\n+  }\n+\n+  public void setResolvedObj(Object obj)\n+  {\n+    resolvedObj = obj;\n+  }\n+}"}, {"sha": "ff52f66382d7fd6cca24ab75457cd1804ed7695c", "filename": "libjava/javax/naming/spi/Resolver.java", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fspi%2FResolver.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fspi%2FResolver.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2Fspi%2FResolver.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,23 @@\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package javax.naming.spi;\n+import javax.naming.*;\n+ \n+/**\n+ * @author Warren Levy <warrenl@redhat.com>\n+ * @date June 1, 2001\n+ */\n+\n+public interface Resolver\n+{\n+  public ResolveResult resolveToClass(Name name, Class contextType)\n+    throws NamingException;\n+  public ResolveResult resolveToClass(String name, Class contextType)\n+    throws NamingException;\n+}"}, {"sha": "3be66d2bcc415841dcec796a400ac2c30fd5add9", "filename": "libjava/javax/naming/spi/StateFactory.java", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fspi%2FStateFactory.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Fnaming%2Fspi%2FStateFactory.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2Fspi%2FStateFactory.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,22 @@\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package javax.naming.spi;\n+import javax.naming.*;\n+import java.util.Hashtable;\n+ \n+/**\n+ * @author Warren Levy <warrenl@redhat.com>\n+ * @date June 1, 2001\n+ */\n+\n+public interface StateFactory\n+{\n+  public Object getStateToBind(Object obj, Name name, Context nameCtx,\n+  \t\t\t       Hashtable environment) throws NamingException;\n+}"}, {"sha": "0646a2352d1c999a347f7d30abf58c0ea2579b8b", "filename": "libjava/javax/transaction/HeuristicCommitException.java", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Ftransaction%2FHeuristicCommitException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Ftransaction%2FHeuristicCommitException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Ftransaction%2FHeuristicCommitException.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,27 @@\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package javax.transaction;\n+ \n+/**\n+ * @author Warren Levy <warrenl@redhat.com>\n+ * @date May 25, 2001\n+ */\n+\n+public class HeuristicCommitException extends java.lang.Exception\n+{\n+  public HeuristicCommitException ()\n+  {\n+    super();\n+  }\n+\n+  public HeuristicCommitException (String msg)\n+  {\n+    super(msg);\n+  }\n+}"}, {"sha": "f351da32fe23ce0a114c04aeb1f27e11789fb1c7", "filename": "libjava/javax/transaction/HeuristicMixedException.java", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Ftransaction%2FHeuristicMixedException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Ftransaction%2FHeuristicMixedException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Ftransaction%2FHeuristicMixedException.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,27 @@\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package javax.transaction;\n+ \n+/**\n+ * @author Warren Levy <warrenl@redhat.com>\n+ * @date May 25, 2001\n+ */\n+\n+public class HeuristicMixedException extends java.lang.Exception\n+{\n+  public HeuristicMixedException ()\n+  {\n+    super();\n+  }\n+\n+  public HeuristicMixedException (String msg)\n+  {\n+    super(msg);\n+  }\n+}"}, {"sha": "7ad3782710e9e967ce1d7f3211a15660ed32ea35", "filename": "libjava/javax/transaction/HeuristicRollbackException.java", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Ftransaction%2FHeuristicRollbackException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Ftransaction%2FHeuristicRollbackException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Ftransaction%2FHeuristicRollbackException.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,27 @@\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package javax.transaction;\n+ \n+/**\n+ * @author Warren Levy <warrenl@redhat.com>\n+ * @date May 25, 2001\n+ */\n+\n+public class HeuristicRollbackException extends java.lang.Exception\n+{\n+  public HeuristicRollbackException ()\n+  {\n+    super();\n+  }\n+\n+  public HeuristicRollbackException (String msg)\n+  {\n+    super(msg);\n+  }\n+}"}, {"sha": "f5bb7184e2d02c95bf75a5cbe78926ca93098cd6", "filename": "libjava/javax/transaction/InvalidTransactionException.java", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Ftransaction%2FInvalidTransactionException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Ftransaction%2FInvalidTransactionException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Ftransaction%2FInvalidTransactionException.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,29 @@\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package javax.transaction;\n+ \n+import java.rmi.RemoteException;\n+\n+/**\n+ * @author Tom Tromey <tromey@redhat.com>\n+ * @date April 18, 2001\n+ */\n+\n+public class InvalidTransactionException extends RemoteException\n+{\n+  public InvalidTransactionException ()\n+  {\n+    super();\n+  }\n+\n+  public InvalidTransactionException (String msg)\n+  {\n+    super(msg);\n+  }\n+}"}, {"sha": "767babbeba49c817b6c53fca5f1f7db75dc0c659", "filename": "libjava/javax/transaction/NotSupportedException.java", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Ftransaction%2FNotSupportedException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Ftransaction%2FNotSupportedException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Ftransaction%2FNotSupportedException.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,27 @@\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package javax.transaction;\n+ \n+/**\n+ * @author Warren Levy <warrenl@redhat.com>\n+ * @date May 25, 2001\n+ */\n+\n+public class NotSupportedException extends java.lang.Exception\n+{\n+  public NotSupportedException ()\n+  {\n+    super();\n+  }\n+\n+  public NotSupportedException (String msg)\n+  {\n+    super(msg);\n+  }\n+}"}, {"sha": "7bc77eeaa1304cc63d2fae57244f612675675979", "filename": "libjava/javax/transaction/RollbackException.java", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Ftransaction%2FRollbackException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Ftransaction%2FRollbackException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Ftransaction%2FRollbackException.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,27 @@\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package javax.transaction;\n+ \n+/**\n+ * @author Warren Levy <warrenl@redhat.com>\n+ * @date May 25, 2001\n+ */\n+\n+public class RollbackException extends java.lang.Exception\n+{\n+  public RollbackException ()\n+  {\n+    super();\n+  }\n+\n+  public RollbackException (String msg)\n+  {\n+    super(msg);\n+  }\n+}"}, {"sha": "84f1e7ca4c7336fbe0d2cf5abd3b137c75b677af", "filename": "libjava/javax/transaction/Status.java", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Ftransaction%2FStatus.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Ftransaction%2FStatus.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Ftransaction%2FStatus.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,28 @@\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package javax.transaction;\n+ \n+/**\n+ * @author Warren Levy <warrenl@redhat.com>\n+ * @date May 25, 2001\n+ */\n+\n+public abstract interface Status\n+{\n+  public static final int STATUS_ACTIVE = 0;\n+  public static final int STATUS_MARKED_ROLLBACK = 1;\n+  public static final int STATUS_PREPARED = 2;\n+  public static final int STATUS_COMMITTED = 3;\n+  public static final int STATUS_ROLLEDBACK = 4;\n+  public static final int STATUS_UNKNOWN = 5;\n+  public static final int STATUS_NO_TRANSACTION = 6;\n+  public static final int STATUS_PREPARING = 7;\n+  public static final int STATUS_COMMITTING = 8;\n+  public static final int STATUS_ROLLING_BACK = 9;\n+}"}, {"sha": "046f64d9cf8bd52ff0301d81107803fd15e1a055", "filename": "libjava/javax/transaction/Synchronization.java", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Ftransaction%2FSynchronization.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Ftransaction%2FSynchronization.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Ftransaction%2FSynchronization.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,20 @@\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package javax.transaction;\n+ \n+/**\n+ * @author Warren Levy <warrenl@redhat.com>\n+ * @date May 25, 2001\n+ */\n+\n+public abstract interface Synchronization\n+{\n+  public void beforeCompletion();\n+  public void afterCompletion(int status);\n+}"}, {"sha": "e279acaca35f44e859ff4b09b277f0a0e1d17d1a", "filename": "libjava/javax/transaction/SystemException.java", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Ftransaction%2FSystemException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Ftransaction%2FSystemException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Ftransaction%2FSystemException.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,35 @@\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package javax.transaction;\n+ \n+/**\n+ * @author Warren Levy <warrenl@redhat.com>\n+ * @date May 25, 2001\n+ */\n+\n+public class SystemException extends java.lang.Exception\n+{\n+  public int errorCode;\n+\n+  public SystemException ()\n+  {\n+    super();\n+  }\n+\n+  public SystemException (String msg)\n+  {\n+    super(msg);\n+  }\n+\n+  public SystemException(int errcode)\n+  {\n+    super ();\n+    this.errorCode = errcode;\n+  }\n+}"}, {"sha": "632707c6ccc788cdc0aea6d44e60a288111ce761", "filename": "libjava/javax/transaction/Transaction.java", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Ftransaction%2FTransaction.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Ftransaction%2FTransaction.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Ftransaction%2FTransaction.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,33 @@\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package javax.transaction;\n+import javax.transaction.xa.XAResource;\n+ \n+/**\n+ * @author Warren Levy <warrenl@redhat.com>\n+ * @date May 25, 2001\n+ */\n+\n+public abstract interface Transaction\n+{\n+  public void commit()\n+    throws RollbackException, HeuristicMixedException,\n+      HeuristicRollbackException, java.lang.SecurityException, SystemException;\n+  public boolean delistResource(XAResource xaRes, int flag)\n+    throws java.lang.IllegalStateException, SystemException;\n+  public boolean enlistResource(XAResource xaRes)\n+    throws RollbackException, java.lang.IllegalStateException, SystemException;\n+  public int getStatus() throws SystemException;\n+  public void registerSynchronization(Synchronization sync)\n+    throws RollbackException, java.lang.IllegalStateException, SystemException;\n+  public void rollback()\n+    throws java.lang.IllegalStateException, SystemException;\n+  public void setRollbackOnly()\n+    throws java.lang.IllegalStateException, SystemException;\n+}"}, {"sha": "9f5f57cb35150052e5b4ad606d8ef8562069f20b", "filename": "libjava/javax/transaction/TransactionManager.java", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Ftransaction%2FTransactionManager.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Ftransaction%2FTransactionManager.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Ftransaction%2FTransactionManager.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,35 @@\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package javax.transaction;\n+ \n+/**\n+ * @author Warren Levy <warrenl@redhat.com>\n+ * @date May 25, 2001\n+ */\n+\n+public abstract interface TransactionManager\n+{\n+  public void begin() throws NotSupportedException, SystemException;\n+  public void commit()\n+    throws RollbackException, HeuristicMixedException,\n+      HeuristicRollbackException, java.lang.SecurityException,\n+      java.lang.IllegalStateException, SystemException;\n+  public int getStatus() throws SystemException;\n+  public Transaction getTransaction() throws SystemException;\n+  public void resume(Transaction tobj)\n+    throws InvalidTransactionException, java.lang.IllegalStateException,\n+      SystemException;\n+  public void rollback()\n+    throws java.lang.IllegalStateException, java.lang.SecurityException,\n+      SystemException;\n+  public void setRollbackOnly()\n+    throws java.lang.IllegalStateException, SystemException;\n+  public void setTransactionTimeout(int seconds) throws SystemException;\n+  public Transaction suspend() throws SystemException;\n+}"}, {"sha": "e845a9ff0eb8b2b8609dd52a600ba5664a4bedca", "filename": "libjava/javax/transaction/TransactionRequiredException.java", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Ftransaction%2FTransactionRequiredException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Ftransaction%2FTransactionRequiredException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Ftransaction%2FTransactionRequiredException.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,29 @@\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package javax.transaction;\n+ \n+import java.rmi.RemoteException;\n+\n+/**\n+ * @author Tom Tromey <tromey@redhat.com>\n+ * @date April 18, 2001\n+ */\n+\n+public class TransactionRequiredException extends RemoteException\n+{\n+  public TransactionRequiredException ()\n+  {\n+    super();\n+  }\n+\n+  public TransactionRequiredException (String msg)\n+  {\n+    super(msg);\n+  }\n+}"}, {"sha": "96dd8dda1b0d63a566523d6e3733585b05361067", "filename": "libjava/javax/transaction/TransactionRolledbackException.java", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Ftransaction%2FTransactionRolledbackException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Ftransaction%2FTransactionRolledbackException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Ftransaction%2FTransactionRolledbackException.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,29 @@\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package javax.transaction;\n+ \n+import java.rmi.RemoteException;\n+\n+/**\n+ * @author Tom Tromey <tromey@redhat.com>\n+ * @date April 18, 2001\n+ */\n+\n+public class TransactionRolledbackException extends RemoteException\n+{\n+  public TransactionRolledbackException ()\n+  {\n+    super();\n+  }\n+\n+  public TransactionRolledbackException (String msg)\n+  {\n+    super(msg);\n+  }\n+}"}, {"sha": "eb02a6c4f2338880d727c0eeb0a66292f73d994f", "filename": "libjava/javax/transaction/UserTransaction.java", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Ftransaction%2FUserTransaction.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Ftransaction%2FUserTransaction.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Ftransaction%2FUserTransaction.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,30 @@\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package javax.transaction;\n+ \n+/**\n+ * @author Warren Levy <warrenl@redhat.com>\n+ * @date May 25, 2001\n+ */\n+\n+public abstract interface UserTransaction\n+{\n+  public void begin() throws NotSupportedException, SystemException;\n+  public void commit()\n+    throws RollbackException, HeuristicMixedException,\n+      HeuristicRollbackException, java.lang.SecurityException,\n+      java.lang.IllegalStateException, SystemException;\n+  public void rollback()\n+    throws java.lang.IllegalStateException, java.lang.SecurityException,\n+      SystemException;\n+  public void setRollbackOnly()\n+    throws java.lang.IllegalStateException, SystemException;\n+  public int getStatus() throws SystemException;\n+  public void setTransactionTimeout(int seconds) throws SystemException;\n+}"}, {"sha": "43ede1d93dab227d49383e140e1eb53432da9776", "filename": "libjava/javax/transaction/xa/XAException.java", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Ftransaction%2Fxa%2FXAException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Ftransaction%2Fxa%2FXAException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Ftransaction%2Fxa%2FXAException.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,60 @@\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package javax.transaction.xa;\n+ \n+/**\n+ * @author Tom Tromey <tromey@redhat.com>\n+ * @date April 18, 2001\n+ */\n+\n+public class XAException extends Exception\n+{\n+  public int errorCode;\n+  public static final int XA_RBBASE = 100;\n+  public static final int XA_RBROLLBACK = 100;\n+  public static final int XA_RBCOMMFAIL = 101;\n+  public static final int XA_RBDEADLOCK = 102;\n+  public static final int XA_RBINTEGRITY = 103;\n+  public static final int XA_RBOTHER = 104;\n+  public static final int XA_RBPROTO = 105;\n+  public static final int XA_RBTIMEOUT = 106;\n+  public static final int XA_RBTRANSIENT = 107;\n+  public static final int XA_RBEND = 107;\n+  public static final int XA_NOMIGRATE = 9;\n+  public static final int XA_HEURHAZ = 8;\n+  public static final int XA_HEURCOM = 7;\n+  public static final int XA_HEURRB = 6;\n+  public static final int XA_HEURMIX = 5;\n+  public static final int XA_RETRY = 4;\n+  public static final int XA_RDONLY = 3;\n+  public static final int XAER_ASYNC = -2;\n+  public static final int XAER_RMERR = -3;\n+  public static final int XAER_NOTA = -4;\n+  public static final int XAER_INVAL = -5;\n+  public static final int XAER_PROTO = -6;\n+  public static final int XAER_RMFAIL = -7;\n+  public static final int XAER_DUPID = -8;\n+  public static final int XAER_OUTSIDE = -9;\n+\n+  public XAException ()\n+  {\n+    super ();\n+  }\n+\n+  public XAException (String msg)\n+  {\n+    super (msg);\n+  }\n+\n+  public XAException (int errcode)\n+  {\n+    super ();\n+    this.errorCode = errcode;\n+  }\n+}"}, {"sha": "226850ce35e87dbb77231a43717db0b75b8f88e2", "filename": "libjava/javax/transaction/xa/XAResource.java", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Ftransaction%2Fxa%2FXAResource.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Ftransaction%2Fxa%2FXAResource.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Ftransaction%2Fxa%2FXAResource.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,40 @@\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package javax.transaction.xa;\n+ \n+/**\n+ * @author Warren Levy <warrenl@redhat.com>\n+ * @date May 25, 2001\n+ */\n+\n+public abstract interface XAResource\n+{\n+  public static final int TMENDRSCAN = 8388608;\n+  public static final int TMFAIL = 536870912;\n+  public static final int TMJOIN = 2097152;\n+  public static final int TMNOFLAGS = 0;\n+  public static final int TMONEPHASE = 1073741824;\n+  public static final int TMRESUME = 134217728;\n+  public static final int TMSTARTRSCAN = 16777216;\n+  public static final int TMSUCCESS = 67108864;\n+  public static final int TMSUSPEND = 33554432;\n+  public static final int XA_RDONLY = 3;\n+  public static final int XA_OK = 0;\n+\n+  public void commit(Xid xid, boolean onePhase) throws XAException;\n+  public void end(Xid xid, int flags) throws XAException;\n+  public void forget(Xid xid) throws XAException;\n+  public int getTransactionTimeout() throws XAException;\n+  public boolean isSameRM(XAResource xares) throws XAException;\n+  public int prepare(Xid xid) throws XAException;\n+  public Xid[] recover(int flag) throws XAException;\n+  public void rollback(Xid xid) throws XAException;\n+  public boolean setTransactionTimeout(int seconds) throws XAException;\n+  public void start(Xid xid, int flags) throws XAException;\n+}"}, {"sha": "2edf0c52c57af8ae48cb67a4c2a8c6f8df46f5f4", "filename": "libjava/javax/transaction/xa/Xid.java", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Ftransaction%2Fxa%2FXid.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dee3a2320540b9b654d9a5ef7626e90246ffe80/libjava%2Fjavax%2Ftransaction%2Fxa%2FXid.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Ftransaction%2Fxa%2FXid.java?ref=6dee3a2320540b9b654d9a5ef7626e90246ffe80", "patch": "@@ -0,0 +1,24 @@\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+ \n+package javax.transaction.xa;\n+ \n+/**\n+ * @author Warren Levy <warrenl@redhat.com>\n+ * @date May 25, 2001\n+ */\n+\n+public abstract interface Xid\n+{\n+  public static final int MAXGTRIDSIZE = 64;\n+  public static final int MAXBQUALSIZE = 64;\n+\n+  public int getFormatId();\n+  public byte[] getGlobalTransactionId();\n+  public byte[] getBranchQualifier();\n+}"}]}