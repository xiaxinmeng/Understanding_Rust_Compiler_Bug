{"sha": "4dfdda108f5263c91312da23d8f3be3b685c9607", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRmZGRhMTA4ZjUyNjNjOTEzMTJkYTIzZDhmM2JlM2I2ODVjOTYwNw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-01-20T12:03:36Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-01-20T12:03:36Z"}, "message": "PR72792 detect allocator pointer types without invalid rebinding\n\n\tPR libstdc++/72792\n\t* include/bits/alloc_traits.h (__allocator_traits_base::__diff_type)\n\t(__allocator_traits_base::__size_type): Remove.\n\t(allocator_traits::_Ptr): New class template to detect const and void\n\tpointer types without instantiating pointer_traits::rebind\n\tunnecessarily.\n\t(allocator_traits::_Diff): Likewise for detecting difference_type.\n\t(allocator_traits::_Size): New class template to detect size_type\n\twithout instantiating make_unsigned unnecessarily.\n\t* include/bits/ptr_traits.h (pointer_traits::element_type): Use\n\t__detected_or_t instead of __detected_or_t_.\n\t* include/std/type_traits (__detected_or_t_): Remove.\n\t* testsuite/20_util/allocator_traits/members/pointers.cc: New test.\n\nFrom-SVN: r244706", "tree": {"sha": "20248b5dcaa4ce11e0ca39f8c3077e983ba2d368", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20248b5dcaa4ce11e0ca39f8c3077e983ba2d368"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4dfdda108f5263c91312da23d8f3be3b685c9607", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dfdda108f5263c91312da23d8f3be3b685c9607", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dfdda108f5263c91312da23d8f3be3b685c9607", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dfdda108f5263c91312da23d8f3be3b685c9607/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2"}], "stats": {"total": 129, "additions": 104, "deletions": 25}, "files": [{"sha": "5725179ac4217bf7cea08575e8edbcdd352b7b48", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dfdda108f5263c91312da23d8f3be3b685c9607/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dfdda108f5263c91312da23d8f3be3b685c9607/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4dfdda108f5263c91312da23d8f3be3b685c9607", "patch": "@@ -1,5 +1,19 @@\n 2017-01-20  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/72792\n+\t* include/bits/alloc_traits.h (__allocator_traits_base::__diff_type)\n+\t(__allocator_traits_base::__size_type): Remove.\n+\t(allocator_traits::_Ptr): New class template to detect const and void\n+\tpointer types without instantiating pointer_traits::rebind\n+\tunnecessarily.\n+\t(allocator_traits::_Diff): Likewise for detecting difference_type.\n+\t(allocator_traits::_Size): New class template to detect size_type\n+\twithout instantiating make_unsigned unnecessarily.\n+\t* include/bits/ptr_traits.h (pointer_traits::element_type): Use\n+\t__detected_or_t instead of __detected_or_t_.\n+\t* include/std/type_traits (__detected_or_t_): Remove.\n+\t* testsuite/20_util/allocator_traits/members/pointers.cc: New test.\n+\n \tPR libstdc++/72792\n \tPR libstdc++/72793\n \t* include/bits/alloc_traits.h (__allocator_traits_base::__rebind):"}, {"sha": "4d1e489b0c7930a1e09fcee8a44debdef4962dda", "filename": "libstdc++-v3/include/bits/alloc_traits.h", "status": "modified", "additions": 37, "deletions": 18, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dfdda108f5263c91312da23d8f3be3b685c9607/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dfdda108f5263c91312da23d8f3be3b685c9607/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h?ref=4dfdda108f5263c91312da23d8f3be3b685c9607", "patch": "@@ -61,10 +61,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       using __v_pointer = typename _Tp::void_pointer;\n     template<typename _Tp>\n       using __cv_pointer = typename _Tp::const_void_pointer;\n-    template<typename _Tp>\n-      using __diff_type = typename _Tp::difference_type;\n-    template<typename _Tp>\n-      using __size_type = typename _Tp::size_type;\n     template<typename _Tp>\n       using __pocca = typename _Tp::propagate_on_container_copy_assignment;\n     template<typename _Tp>\n@@ -98,54 +94,77 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       */\n       using pointer = __detected_or_t<value_type*, __pointer, _Alloc>;\n \n+    private:\n+      // Select _Func<_Alloc> or pointer_traits<pointer>::rebind<_Tp>\n+      template<template<typename> class _Func, typename _Tp, typename = void>\n+\tstruct _Ptr\n+\t{\n+\t  using type = typename pointer_traits<pointer>::template rebind<_Tp>;\n+\t};\n+\n+      template<template<typename> class _Func, typename _Tp>\n+\tstruct _Ptr<_Func, _Tp, __void_t<_Func<_Alloc>>>\n+\t{\n+\t  using type = _Func<_Alloc>;\n+\t};\n+\n+      // Select _A2::difference_type or pointer_traits<_Ptr>::difference_type\n+      template<typename _A2, typename _PtrT, typename = void>\n+\tstruct _Diff\n+\t{ using type = typename pointer_traits<_PtrT>::difference_type; };\n+\n+      template<typename _A2, typename _PtrT>\n+\tstruct _Diff<_A2, _PtrT, __void_t<typename _A2::difference_type>>\n+\t{ using type = typename _A2::difference_type; };\n+\n+      // Select _A2::size_type or make_unsigned<_DiffT>::type\n+      template<typename _A2, typename _DiffT, typename = void>\n+\tstruct _Size : make_unsigned<_DiffT> { };\n+\n+      template<typename _A2, typename _DiffT>\n+\tstruct _Size<_A2, _DiffT, __void_t<typename _A2::size_type>>\n+\t{ using type = typename _A2::size_type; };\n+\n+    public:\n       /**\n        * @brief   The allocator's const pointer type.\n        *\n        * @c Alloc::const_pointer if that type exists, otherwise\n        * <tt> pointer_traits<pointer>::rebind<const value_type> </tt>\n       */\n-      using const_pointer\n-\t= __detected_or_t<__ptr_rebind<pointer, const value_type>,\n-\t\t\t  __c_pointer, _Alloc>;\n+      using const_pointer = typename _Ptr<__c_pointer, const value_type>::type;\n \n       /**\n        * @brief   The allocator's void pointer type.\n        *\n        * @c Alloc::void_pointer if that type exists, otherwise\n        * <tt> pointer_traits<pointer>::rebind<void> </tt>\n       */\n-      using void_pointer\n-\t= __detected_or_t<__ptr_rebind<pointer, void>, __v_pointer, _Alloc>;\n+      using void_pointer = typename _Ptr<__v_pointer, void>::type;\n \n       /**\n        * @brief   The allocator's const void pointer type.\n        *\n        * @c Alloc::const_void_pointer if that type exists, otherwise\n        * <tt> pointer_traits<pointer>::rebind<const void> </tt>\n       */\n-      using const_void_pointer\n-\t= __detected_or_t<__ptr_rebind<pointer, const void>, __cv_pointer,\n-\t\t\t  _Alloc>;\n+      using const_void_pointer = typename _Ptr<__cv_pointer, const void>::type;\n \n       /**\n        * @brief   The allocator's difference type\n        *\n        * @c Alloc::difference_type if that type exists, otherwise\n        * <tt> pointer_traits<pointer>::difference_type </tt>\n       */\n-      using difference_type\n-\t= __detected_or_t<typename pointer_traits<pointer>::difference_type,\n-\t\t\t  __diff_type, _Alloc>;\n+      using difference_type = typename _Diff<_Alloc, pointer>::type;\n \n       /**\n        * @brief   The allocator's size type\n        *\n        * @c Alloc::size_type if that type exists, otherwise\n        * <tt> make_unsigned<difference_type>::type </tt>\n       */\n-      using size_type\n-\t= __detected_or_t<typename make_unsigned<difference_type>::type,\n-\t\t\t  __size_type, _Alloc>;\n+      using size_type = typename _Size<_Alloc, difference_type>::type;\n \n       /**\n        * @brief   How the allocator is propagated on copy assignment"}, {"sha": "797e7fcec39971523015f6a703a8a15055866510", "filename": "libstdc++-v3/include/bits/ptr_traits.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dfdda108f5263c91312da23d8f3be3b685c9607/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fptr_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dfdda108f5263c91312da23d8f3be3b685c9607/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fptr_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fptr_traits.h?ref=4dfdda108f5263c91312da23d8f3be3b685c9607", "patch": "@@ -97,7 +97,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       /// The type pointed to.\n       using element_type\n-\t= __detected_or_t_<__get_first_arg_t, __element_type, _Ptr>;\n+\t= __detected_or_t<__get_first_arg_t<_Ptr>, __element_type, _Ptr>;\n \n       /// The type used to represent the difference between two pointers.\n       using difference_type"}, {"sha": "3e2014e053cf7787a5cd98b374b5ac20151ced37", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dfdda108f5263c91312da23d8f3be3b685c9607/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dfdda108f5263c91312da23d8f3be3b685c9607/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=4dfdda108f5263c91312da23d8f3be3b685c9607", "patch": "@@ -2565,12 +2565,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     using __detected_or_t\n       = typename __detected_or<_Default, _Op, _Args...>::type;\n \n-  // _Op<_Args...> if that is a valid type, otherwise _Default<_Args...>.\n-  template<template<typename...> class _Default,\n-\t   template<typename...> class _Op, typename... _Args>\n-    using __detected_or_t_ =\n-      __detected_or_t<_Default<_Args...>, _Op, _Args...>;\n-\n   /// @} group metaprogramming\n \n   /**"}, {"sha": "f25c54ff07ee09431eb417625698d35657229ae3", "filename": "libstdc++-v3/testsuite/20_util/allocator_traits/members/pointers.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dfdda108f5263c91312da23d8f3be3b685c9607/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator_traits%2Fmembers%2Fpointers.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dfdda108f5263c91312da23d8f3be3b685c9607/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator_traits%2Fmembers%2Fpointers.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator_traits%2Fmembers%2Fpointers.cc?ref=4dfdda108f5263c91312da23d8f3be3b685c9607", "patch": "@@ -0,0 +1,52 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <memory>\n+\n+// Non-type template param means pointer_traits::rebind can't be instantiated.\n+template<typename T, int = 0>\n+  struct Pointer\n+  {\n+    using element_type = T;\n+    Pointer(T* p = nullptr) : ptr(p) { }\n+    T* ptr;\n+  };\n+\n+template<typename T>\n+  struct Alloc\n+  {\n+    using value_type = T;\n+    using pointer = Pointer<T>;\n+    using const_pointer = Pointer<const T>;\n+    using void_pointer = Pointer<void>;\n+    using const_void_pointer = Pointer<const void>;\n+\n+    pointer allocate(std::size_t n)\n+    { return std::allocator<T>().allocate(n); }\n+\n+    void allocate(pointer p, std::size_t n)\n+    { return std::allocator<T>().deallocate(p, n); }\n+  };\n+\n+// The nested pointer types in Alloc should be found without attempting to\n+// instantiate pointer_traits::rebind (which would fail):\n+std::allocator_traits<Alloc<int>>::pointer p;\n+std::allocator_traits<Alloc<int>>::const_pointer cp;\n+std::allocator_traits<Alloc<int>>::void_pointer vp;\n+std::allocator_traits<Alloc<int>>::const_void_pointer cvp;"}]}