{"sha": "86da66b593538809357d60192ede83d02add681d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODZkYTY2YjU5MzUzODgwOTM1N2Q2MDE5MmVkZTgzZDAyYWRkNjgxZA==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2004-03-08T00:32:37Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2004-03-08T00:32:37Z"}, "message": "re PR target/14471 (Workaround for errata regarding multiplication bug)\n\n\tPR target/14471\n\t* configure.ac (Target-specific assembler checks) <cris-*-*>: New\n\tcase, checking for -no-mul-bug-abort option.\n\t* configure, config.in: Regenerate.\n\t* doc/invoke.texi (CRIS Options): Document -mmul-bug-workaround\n\tand -mno-mul-bug-workaround.\n\t* config/cris/cris.md (\"smulsi3_highpart\", \"umulsi3_highpart\")\n\t(\"mulsidi3\", \"umulsidi3\"): Prefix output template with \"%!\".\n\t(\"umulhisi3\", \"umulqihi3\", \"mulsi3\", \"mulqihi3\", \"mulhisi3\"):\n\tDitto.  Make attribute \"slottable\" dependent on TARGET_MUL_BUG.\n\t* config/cris/mulsi3.asm (__Mul) [__CRIS_arch_version >= 10]: Make\n\tsure mulu.d is not last on cache-line.\n\t* config/cris/cris.h (ASM_SPEC): Translate -mno-mul-bug-workaround\n\tinto -no-mul-bug-abort depending on HAVE_AS_MUL_BUG_ABORT_OPTION.\n\t(TARGET_MASK_MUL_BUG, TARGET_MUL_BUG): New macros.\n\t(TARGET_SWITCHES): New options -mmul-bug-workaround and\n\t-mno-mul-bug-workaround.\n\t(TARGET_DEFAULT): Include TARGET_MASK_MUL_BUG.\n\t(PRINT_OPERAND_PUNCT_VALID_P): Include '!'.\n\t* config/cris/cris.c (cris_operand_extend_operator): Clarify\n\trelation to MULT in head comment.\n\t(cris_op_str): Abort for MULT.\n\t(cris_print_operand) <case '!'>: New case.\n\nFrom-SVN: r79085", "tree": {"sha": "3cc5898bf48669383218721c23650efbac500168", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3cc5898bf48669383218721c23650efbac500168"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86da66b593538809357d60192ede83d02add681d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86da66b593538809357d60192ede83d02add681d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86da66b593538809357d60192ede83d02add681d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86da66b593538809357d60192ede83d02add681d/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f5fb3886b2d7b99a5c06f66854262a325f2e9361", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5fb3886b2d7b99a5c06f66854262a325f2e9361", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5fb3886b2d7b99a5c06f66854262a325f2e9361"}], "stats": {"total": 1816, "additions": 1318, "deletions": 498}, "files": [{"sha": "c440b66c243507ad92e6a1fdc424e6bf21b2a3b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86da66b593538809357d60192ede83d02add681d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86da66b593538809357d60192ede83d02add681d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=86da66b593538809357d60192ede83d02add681d", "patch": "@@ -1,3 +1,29 @@\n+2004-03-08  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\tPR target/14471\n+\t* configure.ac (Target-specific assembler checks) <cris-*-*>: New\n+\tcase, checking for -no-mul-bug-abort option.\n+\t* configure, config.in: Regenerate.\n+\t* doc/invoke.texi (CRIS Options): Document -mmul-bug-workaround\n+\tand -mno-mul-bug-workaround.\n+\t* config/cris/cris.md (\"smulsi3_highpart\", \"umulsi3_highpart\")\n+\t(\"mulsidi3\", \"umulsidi3\"): Prefix output template with \"%!\".\n+\t(\"umulhisi3\", \"umulqihi3\", \"mulsi3\", \"mulqihi3\", \"mulhisi3\"):\n+\tDitto.  Make attribute \"slottable\" dependent on TARGET_MUL_BUG.\n+\t* config/cris/mulsi3.asm (__Mul) [__CRIS_arch_version >= 10]: Make\n+\tsure mulu.d is not last on cache-line.\n+\t* config/cris/cris.h (ASM_SPEC): Translate -mno-mul-bug-workaround\n+\tinto -no-mul-bug-abort depending on HAVE_AS_MUL_BUG_ABORT_OPTION.\n+\t(TARGET_MASK_MUL_BUG, TARGET_MUL_BUG): New macros.\n+\t(TARGET_SWITCHES): New options -mmul-bug-workaround and\n+\t-mno-mul-bug-workaround.\n+\t(TARGET_DEFAULT): Include TARGET_MASK_MUL_BUG.\n+\t(PRINT_OPERAND_PUNCT_VALID_P): Include '!'.\n+\t* config/cris/cris.c (cris_operand_extend_operator): Clarify\n+\trelation to MULT in head comment.\n+\t(cris_op_str): Abort for MULT.\n+\t(cris_print_operand) <case '!'>: New case.\n+\n 2004-03-08  Alan Modra  <amodra@bigpond.net.au>\n \n \tPR debug/11983"}, {"sha": "35cb545e31e40789ab2f9692751ac8f86d1221cc", "filename": "gcc/config.in", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86da66b593538809357d60192ede83d02add681d/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86da66b593538809357d60192ede83d02add681d/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=86da66b593538809357d60192ede83d02add681d", "patch": "@@ -106,6 +106,9 @@\n /* Define if your assembler supports mfcr field. */\n #undef HAVE_AS_MFCRF\n \n+/* Define if your assembler supports the -no-mul-bug-abort option. */\n+#undef HAVE_AS_NO_MUL_BUG_ABORT_OPTION\n+\n /* Define if your assembler supports offsetable %lo(). */\n #undef HAVE_AS_OFFSETABLE_LO10\n \n@@ -543,9 +546,11 @@\n /* Define to `int' if <sys/types.h> doesn't define. */\n #undef gid_t\n \n-/* Define as `__inline' if that's what the C compiler calls it, or to nothing\n-   if it is not supported. */\n+/* Define to `__inline__' or `__inline' if that's what the C compiler\n+   calls it, or to nothing if 'inline' is not supported under any name.  */\n+#ifndef __cplusplus\n #undef inline\n+#endif\n \n /* Define to `int' if <sys/types.h> does not define. */\n #undef pid_t"}, {"sha": "b5568d61028d91d3a917a0036b9bfab70ba291a2", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86da66b593538809357d60192ede83d02add681d/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86da66b593538809357d60192ede83d02add681d/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=86da66b593538809357d60192ede83d02add681d", "patch": "@@ -332,7 +332,10 @@ cris_commutative_orth_op (rtx x, enum machine_mode mode)\n \t   || code == IOR || code == AND || code == UMIN));\n }\n \n-/* Check if MODE is same as mode for X, and X is PLUS or MINUS or UMIN.  */\n+/* Check if MODE is same as mode for X, and X is PLUS or MINUS or UMIN.\n+   By the name, you might think we should include MULT.  We don't because\n+   it doesn't accept the same addressing modes as the others (ony\n+   registers) and there's also the problem of handling TARGET_MUL_BUG.  */\n \n int\n cris_operand_extend_operator (rtx x, enum machine_mode mode)\n@@ -499,7 +502,11 @@ cris_op_str (rtx x)\n       break;\n \n     case MULT:\n-      return \"mul\";\n+      /* This function is for retrieving a part of an instruction name for\n+\t an operator, for immediate output.  If that ever happens for\n+\t MULT, we need to apply TARGET_MUL_BUG in the caller.  Make sure\n+\t we notice.  */\n+      abort ();\n       break;\n \n     case DIV:\n@@ -1392,6 +1399,23 @@ cris_print_operand (FILE *file, rtx x, int code)\n \tfputs (\"\\n\\tnop\", file);\n       return;\n \n+    case '!':\n+      /* Output directive for alignment padded with \"nop\" insns.\n+\t Optimizing for size, it's plain 4-byte alignment, otherwise we\n+\t align the section to a cache-line (32 bytes) and skip at max 2\n+\t bytes, i.e. we skip if it's the last insn on a cache-line.  The\n+\t latter is faster by a small amount (for two test-programs 99.6%\n+\t and 99.9%) and larger by a small amount (ditto 100.1% and\n+\t 100.2%).  This is supposed to be the simplest yet performance-\n+\t wise least intrusive way to make sure the immediately following\n+\t (supposed) muls/mulu insn isn't located at the end of a\n+\t cache-line.  */\n+      if (TARGET_MUL_BUG)\n+\tfputs (optimize_size\n+\t       ? \".p2alignw 2,0x050f\\n\\t\"\n+\t       : \".p2alignw 5,0x050f,2\\n\\t\", file);\n+      return;\n+\n     case 'H':\n       /* Print high (most significant) part of something.  */\n       switch (GET_CODE (operand))"}, {"sha": "da5ab7f9c46c845b6c22baa0c33383d21d8e164e", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86da66b593538809357d60192ede83d02add681d/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86da66b593538809357d60192ede83d02add681d/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=86da66b593538809357d60192ede83d02add681d", "patch": "@@ -171,9 +171,17 @@ extern const char *cris_elinux_stacksize_str;\n    %{!melinux:%{!maout|melf:%{!fno-vtable-gc:-fvtable-gc}}}}}\".  */\n #define CC1PLUS_SPEC \"\"\n \n+#ifdef HAVE_AS_MUL_BUG_ABORT_OPTION\n+#define MAYBE_AS_NO_MUL_BUG_ABORT \\\n+ \"%{mno-mul-bug-workaround:-no-mul-bug-abort} \"\n+#else\n+#define MAYBE_AS_NO_MUL_BUG_ABORT\n+#endif\n+\n /* Override previous definitions (linux.h).  */\n #undef ASM_SPEC\n #define ASM_SPEC \\\n+ MAYBE_AS_NO_MUL_BUG_ABORT \\\n  \"%{v:-v}\\\n   %(asm_subtarget)\"\n \n@@ -326,8 +334,34 @@ extern int target_flags;\n #define TARGET_MASK_AVOID_GOTPLT 8192\n #define TARGET_AVOID_GOTPLT (target_flags & TARGET_MASK_AVOID_GOTPLT)\n \n+/* Whether or not to work around multiplication instruction hardware bug\n+   when generating code for models where it may be present.  From the\n+   trouble report for Etrax 100 LX: \"A multiply operation may cause\n+   incorrect cache behaviour under some specific circumstances. The\n+   problem can occur if the instruction following the multiply instruction\n+   causes a cache miss, and multiply operand 1 (source operand) bits\n+   [31:27] matches the logical mapping of the mode register address\n+   (0xb0....), and bits [9:2] of operand 1 matches the TLB register\n+   address (0x258-0x25f).  There is such a mapping in kernel mode or when\n+   the MMU is off.  Normally there is no such mapping in user mode, and\n+   the problem will therefore probably not occur in Linux user mode\n+   programs.\"\n+\n+   We have no sure-fire way to know from within GCC that we're compiling a\n+   user program.  For example, -fpic/PIC is used in libgcc which is linked\n+   into the kernel.  However, the workaround option -mno-mul-bug can be\n+   safely used per-package when compiling programs.  The same goes for\n+   general user-only libraries such as glibc, since there's no user-space\n+   driver-like program that gets a mapping of I/O registers (all on the\n+   same page, including the TLB registers).  */\n+#define TARGET_MASK_MUL_BUG 16384\n+#define TARGET_MUL_BUG (target_flags & TARGET_MASK_MUL_BUG)\n+\n #define TARGET_SWITCHES\t\t\t\t\t\t\t\\\n  {\t\t\t\t\t\t\t\t\t\\\n+  {\"mul-bug-workaround\",\t\t TARGET_MASK_MUL_BUG,\t\t\\\n+   N_(\"Work around bug in multiplication instruction\")},\t\t\\\n+  {\"no-mul-bug-workaround\",\t\t-TARGET_MASK_MUL_BUG, \"\"},\t\\\n   /* No \"no-etrax\" as it does not really imply any model.\t\t\\\n      On the other hand, \"etrax\" implies the common (and large)\t\t\\\n      subset matching all models.  */\t\t\t\t\t\\\n@@ -405,7 +439,7 @@ extern int target_flags;\n # define TARGET_DEFAULT \\\n  (TARGET_MASK_SIDE_EFFECT_PREFIXES + TARGET_MASK_STACK_ALIGN \\\n   + TARGET_MASK_CONST_ALIGN + TARGET_MASK_DATA_ALIGN \\\n-  + TARGET_MASK_PROLOGUE_EPILOGUE)\n+  + TARGET_MASK_PROLOGUE_EPILOGUE + TARGET_MASK_MUL_BUG)\n #endif\n \n /* For the cris-*-elf subtarget.  */\n@@ -1474,7 +1508,8 @@ call_ ## FUNC (void)\t\t\t\t\t\t\\\n  cris_print_operand (FILE, X, CODE)\n \n /* For delay-slot handling.  */\n-#define PRINT_OPERAND_PUNCT_VALID_P(CODE) (CODE == '#')\n+#define PRINT_OPERAND_PUNCT_VALID_P(CODE)\t\\\n+ ((CODE) == '#' || (CODE) == '!')\n \n #define PRINT_OPERAND_ADDRESS(FILE, ADDR)\t\\\n    cris_print_operand_address (FILE, ADDR)"}, {"sha": "dd251e790df78dab5d6c481e33ce5215e3bd1196", "filename": "gcc/config/cris/cris.md", "status": "modified", "additions": 29, "deletions": 14, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86da66b593538809357d60192ede83d02add681d/gcc%2Fconfig%2Fcris%2Fcris.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86da66b593538809357d60192ede83d02add681d/gcc%2Fconfig%2Fcris%2Fcris.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.md?ref=86da66b593538809357d60192ede83d02add681d", "patch": "@@ -2469,8 +2469,11 @@\n \t (zero_extend:SI (match_operand:HI 1 \"register_operand\" \"0\"))\n \t (zero_extend:SI (match_operand:HI 2 \"register_operand\" \"r\"))))]\n   \"TARGET_HAS_MUL_INSNS\"\n-  \"mulu.w %2,%0\"\n-  [(set_attr \"slottable\" \"yes\")\n+  \"%!mulu.w %2,%0\"\n+  [(set (attr \"slottable\")\n+\t(if_then_else (ne (symbol_ref \"TARGET_MUL_BUG\") (const_int 0))\n+\t\t      (const_string \"no\")\n+\t\t      (const_string \"yes\")))\n    ;; Just N unusable here, but let's be safe.\n    (set_attr \"cc\" \"clobber\")])\n \n@@ -2480,8 +2483,11 @@\n \t (zero_extend:HI (match_operand:QI 1 \"register_operand\" \"0\"))\n \t (zero_extend:HI (match_operand:QI 2 \"register_operand\" \"r\"))))]\n   \"TARGET_HAS_MUL_INSNS\"\n-  \"mulu.b %2,%0\"\n-  [(set_attr \"slottable\" \"yes\")\n+  \"%!mulu.b %2,%0\"\n+  [(set (attr \"slottable\")\n+\t(if_then_else (ne (symbol_ref \"TARGET_MUL_BUG\") (const_int 0))\n+\t\t      (const_string \"no\")\n+\t\t      (const_string \"yes\")))\n    ;; Not exactly sure, but let's be safe.\n    (set_attr \"cc\" \"clobber\")])\n \n@@ -2496,8 +2502,11 @@\n \t(mult:SI (match_operand:SI 1 \"register_operand\" \"0\")\n \t\t (match_operand:SI 2 \"register_operand\" \"r\")))]\n   \"TARGET_HAS_MUL_INSNS\"\n-  \"muls.d %2,%0\"\n-  [(set_attr \"slottable\" \"yes\")\n+  \"%!muls.d %2,%0\"\n+  [(set (attr \"slottable\")\n+\t(if_then_else (ne (symbol_ref \"TARGET_MUL_BUG\") (const_int 0))\n+\t\t      (const_string \"no\")\n+\t\t      (const_string \"yes\")))\n    ;; Just N unusable here, but let's be safe.\n    (set_attr \"cc\" \"clobber\")])\n \f\n@@ -2511,8 +2520,11 @@\n \t (sign_extend:HI (match_operand:QI 1 \"register_operand\" \"0\"))\n \t (sign_extend:HI (match_operand:QI 2 \"register_operand\" \"r\"))))]\n   \"TARGET_HAS_MUL_INSNS\"\n-  \"muls.b %2,%0\"\n-  [(set_attr \"slottable\" \"yes\")\n+  \"%!muls.b %2,%0\"\n+  [(set (attr \"slottable\")\n+\t(if_then_else (ne (symbol_ref \"TARGET_MUL_BUG\") (const_int 0))\n+\t\t      (const_string \"no\")\n+\t\t      (const_string \"yes\")))\n    (set_attr \"cc\" \"clobber\")])\n \n (define_insn \"mulhisi3\"\n@@ -2521,8 +2533,11 @@\n \t (sign_extend:SI (match_operand:HI 1 \"register_operand\" \"0\"))\n \t (sign_extend:SI (match_operand:HI 2 \"register_operand\" \"r\"))))]\n   \"TARGET_HAS_MUL_INSNS\"\n-  \"muls.w %2,%0\"\n-  [(set_attr \"slottable\" \"yes\")\n+  \"%!muls.w %2,%0\"\n+  [(set (attr \"slottable\")\n+\t(if_then_else (ne (symbol_ref \"TARGET_MUL_BUG\") (const_int 0))\n+\t\t      (const_string \"no\")\n+\t\t      (const_string \"yes\")))\n    ;; Just N unusable here, but let's be safe.\n    (set_attr \"cc\" \"clobber\")])\n \n@@ -2538,15 +2553,15 @@\n \t (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"0\"))\n \t (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"r\"))))]\n   \"TARGET_HAS_MUL_INSNS\"\n-  \"muls.d %2,%M0\\;move $mof,%H0\")\n+  \"%!muls.d %2,%M0\\;move $mof,%H0\")\n \n (define_insn \"umulsidi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(mult:DI\n \t (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"0\"))\n \t (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"r\"))))]\n   \"TARGET_HAS_MUL_INSNS\"\n-  \"mulu.d %2,%M0\\;move $mof,%H0\")\n+  \"%!mulu.d %2,%M0\\;move $mof,%H0\")\n \n ;; This pattern would probably not be needed if we add \"mof\" in its own\n ;; register class (and open a can of worms about /not/ pairing it with a\n@@ -2565,7 +2580,7 @@\n \t  (const_int 32))))\n    (clobber (match_scratch:SI 3 \"=X,1,1\"))]\n   \"TARGET_HAS_MUL_INSNS\"\n-  \"muls.d %2,%1\\;move $mof,%0\"\n+  \"%!muls.d %2,%1\\;move $mof,%0\"\n   [(set_attr \"cc\" \"clobber\")])\n \n (define_insn \"umulsi3_highpart\"\n@@ -2578,7 +2593,7 @@\n \t  (const_int 32))))\n    (clobber (match_scratch:SI 3 \"=X,1,1\"))]\n   \"TARGET_HAS_MUL_INSNS\"\n-  \"mulu.d %2,%1\\;move $mof,%0\"\n+  \"%!mulu.d %2,%1\\;move $mof,%0\"\n   [(set_attr \"cc\" \"clobber\")])\n \f\n ;; Divide and modulus instructions.  CRIS only has a step instruction."}, {"sha": "69d9dedd9665c4aef56797c42a0d53df691ea7aa", "filename": "gcc/config/cris/mulsi3.asm", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86da66b593538809357d60192ede83d02add681d/gcc%2Fconfig%2Fcris%2Fmulsi3.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86da66b593538809357d60192ede83d02add681d/gcc%2Fconfig%2Fcris%2Fmulsi3.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fmulsi3.asm?ref=86da66b593538809357d60192ede83d02add681d", "patch": "@@ -82,8 +82,13 @@\n \t.type\t___Mul,@function\n ___Mul:\n #if defined (__CRIS_arch_version) && __CRIS_arch_version >= 10\n-\tret\n+;; Can't have the mulu.d last on a cache-line (in the delay-slot of the\n+;; \"ret\"), due to hardware bug.  See documentation for -mmul-bug-workaround.\n+;; Not worthwhile to conditionalize here.\n+\t.p2alignw 2,0x050f\n \tmulu.d $r11,$r10\n+\tret\n+\tnop\n #else\n \tmove.d $r10,$r12\n \tmove.d $r11,$r9"}, {"sha": "3803a53ac211f455d7f243ff325ecebf68dc2d50", "filename": "gcc/configure", "status": "modified", "additions": 1178, "deletions": 476, "changes": 1654, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86da66b593538809357d60192ede83d02add681d/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86da66b593538809357d60192ede83d02add681d/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=86da66b593538809357d60192ede83d02add681d"}, {"sha": "8caed2b197875f93becc24a77527e86a418b0461", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86da66b593538809357d60192ede83d02add681d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86da66b593538809357d60192ede83d02add681d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=86da66b593538809357d60192ede83d02add681d", "patch": "@@ -608,7 +608,8 @@ in the following sections.\n -metrax4  -metrax100  -mpdebug  -mcc-init  -mno-side-effects @gol\n -mstack-align  -mdata-align  -mconst-align @gol\n -m32-bit  -m16-bit  -m8-bit  -mno-prologue-epilogue  -mno-gotplt @gol\n--melf  -maout  -melinux  -mlinux  -sim  -sim2}\n+-melf  -maout  -melinux  -mlinux  -sim  -sim2 @gol\n+-mmul-bug-workaround  -mno-mul-bug-workaround}\n \n @emph{PDP-11 Options}\n @gccoptlist{-mfpu  -msoft-float  -mac0  -mno-ac0  -m40  -m45  -m10 @gol\n@@ -10107,6 +10108,13 @@ program should be set to @var{n} bytes.\n The options @option{-metrax4} and @option{-metrax100} are synonyms for\n @option{-march=v3} and @option{-march=v8} respectively.\n \n+@item -mmul-bug-workaround\n+@itemx -mno-mul-bug-workaround\n+@opindex mmul-bug-workaround\n+@opindex mno-mul-bug-workaround\n+Work around a bug in the @code{muls} and @code{mulu} instructions for CPU\n+models where it applies.  This option is active by default.\n+\n @item -mpdebug\n @opindex mpdebug\n Enable CRIS-specific verbose debug-related information in the assembly"}]}