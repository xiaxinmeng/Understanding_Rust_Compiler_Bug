{"sha": "c548e1b22363960b05b2c36257e677da920ea228", "node_id": "C_kwDOANBUbNoAKGM1NDhlMWIyMjM2Mzk2MGIwNWIyYzM2MjU3ZTY3N2RhOTIwZWEyMjg", "commit": {"author": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-10-10T14:29:33Z"}, "committer": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-11-28T09:06:14Z"}, "message": "arm: improve tests for vabdq*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vabdq_f16.c: Improve test.\n\t* gcc.target/arm/mve/intrinsics/vabdq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_x_u8.c: Likewise.", "tree": {"sha": "011742d3e4fe2732fc84b6d7e71099c499d3d172", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/011742d3e4fe2732fc84b6d7e71099c499d3d172"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c548e1b22363960b05b2c36257e677da920ea228", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c548e1b22363960b05b2c36257e677da920ea228", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c548e1b22363960b05b2c36257e677da920ea228", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c548e1b22363960b05b2c36257e677da920ea228/comments", "author": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8965dd164b1c72dec9e5f3dcc6506813f8fbe4c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8965dd164b1c72dec9e5f3dcc6506813f8fbe4c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8965dd164b1c72dec9e5f3dcc6506813f8fbe4c3"}], "stats": {"total": 537, "additions": 464, "deletions": 73}, "files": [{"sha": "f379b25c49e5f61ea467879fa071fcae94db6158", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_f16.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_f16.c?ref=c548e1b22363960b05b2c36257e677da920ea228", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvabd.f16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo (float16x8_t a, float16x8_t b)\n {\n   return vabdq_f16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vabd.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvabd.f16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo1 (float16x8_t a, float16x8_t b)\n {\n   return vabdq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vabd.f16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "3ba808e0b4d2c3e603c4069d4b4acfc45d12d435", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_f32.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_f32.c?ref=c548e1b22363960b05b2c36257e677da920ea228", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvabd.f32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo (float32x4_t a, float32x4_t b)\n {\n   return vabdq_f32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vabd.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvabd.f32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo1 (float32x4_t a, float32x4_t b)\n {\n   return vabdq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vabd.f32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "903c6dfe86181b09215209207d7cb6be3e8cba4d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_m_f16.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_f16.c?ref=c548e1b22363960b05b2c36257e677da920ea228", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabdt.f16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vabdq_m_f16 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vabdt.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabdt.f16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo1 (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vabdq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vabdt.f16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "4ddf4ee5c616798848ca046e915587a0cbcfc499", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_m_f32.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_f32.c?ref=c548e1b22363960b05b2c36257e677da920ea228", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabdt.f32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vabdq_m_f32 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vabdt.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabdt.f32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo1 (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vabdq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vabdt.f32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "c719a0b5e9c34498bea1f1dfc0ccfe2d8b4d7237", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_m_s16.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_s16.c?ref=c548e1b22363960b05b2c36257e677da920ea228", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabdt.s16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vabdq_m_s16 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vabdt.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabdt.s16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vabdq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vabdt.s16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "048554144cdcf1d5792becc4e6e78a318971d457", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_m_s32.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_s32.c?ref=c548e1b22363960b05b2c36257e677da920ea228", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabdt.s32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vabdq_m_s32 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vabdt.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabdt.s32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vabdq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vabdt.s32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "458b920b5cbd3c9c9eb98789fe54c0add0f57754", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_m_s8.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_s8.c?ref=c548e1b22363960b05b2c36257e677da920ea228", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabdt.s8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vabdq_m_s8 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vabdt.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabdt.s8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vabdq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vabdt.s8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "8e163edb1532167bada04a87e5dfc80b91af5a3a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_m_u16.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_u16.c?ref=c548e1b22363960b05b2c36257e677da920ea228", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabdt.u16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vabdq_m_u16 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vabdt.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabdt.u16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vabdq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vabdt.u16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "619d4706dc5283e492367713c8f9110380795048", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_m_u32.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_u32.c?ref=c548e1b22363960b05b2c36257e677da920ea228", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabdt.u32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vabdq_m_u32 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vabdt.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabdt.u32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vabdq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vabdt.u32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "079478df08ab6885905059daf03c5fb9f7f4be83", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_m_u8.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_u8.c?ref=c548e1b22363960b05b2c36257e677da920ea228", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabdt.u8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vabdq_m_u8 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vabdt.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabdt.u8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vabdq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vabdt.u8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "0dce4c482ac392ed75a25cea94e5ed9fdf3488c1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_s16.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_s16.c?ref=c548e1b22363960b05b2c36257e677da920ea228", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvabd.s16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t a, int16x8_t b)\n {\n   return vabdq_s16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vabd.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvabd.s16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t a, int16x8_t b)\n {\n   return vabdq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vabd.s16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "f5908fe81d884ed3de549a99ffee038ba6715123", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_s32.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_s32.c?ref=c548e1b22363960b05b2c36257e677da920ea228", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvabd.s32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t a, int32x4_t b)\n {\n   return vabdq_s32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vabd.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvabd.s32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t a, int32x4_t b)\n {\n   return vabdq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vabd.s32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "3f249e1a62267a29d44655554a959b907db4bea9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_s8.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_s8.c?ref=c548e1b22363960b05b2c36257e677da920ea228", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvabd.s8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t a, int8x16_t b)\n {\n   return vabdq_s8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vabd.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvabd.s8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t a, int8x16_t b)\n {\n   return vabdq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vabd.s8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "16a4b930d2c7cffd78833b851fa0fb31d8666327", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_u16.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_u16.c?ref=c548e1b22363960b05b2c36257e677da920ea228", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvabd.u16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16x8_t a, uint16x8_t b)\n {\n   return vabdq_u16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vabd.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvabd.u16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint16x8_t a, uint16x8_t b)\n {\n   return vabdq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vabd.u16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "2b5ee12945ceb61bf23fb3d58307e5016c507e35", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_u32.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_u32.c?ref=c548e1b22363960b05b2c36257e677da920ea228", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvabd.u32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32x4_t a, uint32x4_t b)\n {\n   return vabdq_u32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vabd.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvabd.u32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32x4_t a, uint32x4_t b)\n {\n   return vabdq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vabd.u32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "50a4c162c9b129700f58c825a8a334cef9ffc895", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_u8.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_u8.c?ref=c548e1b22363960b05b2c36257e677da920ea228", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvabd.u8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8x16_t a, uint8x16_t b)\n {\n   return vabdq_u8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vabd.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvabd.u8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint8x16_t a, uint8x16_t b)\n {\n   return vabdq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vabd.u8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "da142f4394b438efacb423c237c0192345750650", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_x_f16.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_f16.c?ref=c548e1b22363960b05b2c36257e677da920ea228", "patch": "@@ -1,22 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabdt.f16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo (float16x8_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vabdq_x_f16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vabdt.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabdt.f16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo1 (float16x8_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vabdq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "1ff1bef258fc0a6b36555e0965c5995e36059a1e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_x_f32.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_f32.c?ref=c548e1b22363960b05b2c36257e677da920ea228", "patch": "@@ -1,22 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabdt.f32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo (float32x4_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vabdq_x_f32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vabdt.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabdt.f32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo1 (float32x4_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vabdq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "6733e2bcc1407a33693840a415efc6226c32b99f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_x_s16.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_s16.c?ref=c548e1b22363960b05b2c36257e677da920ea228", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabdt.s16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vabdq_x_s16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vabdt.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabdt.s16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vabdq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vabdt.s16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "8d7631b9ac65dc17571a10939f26e48405561ea9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_x_s32.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_s32.c?ref=c548e1b22363960b05b2c36257e677da920ea228", "patch": "@@ -1,22 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabdt.s32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vabdq_x_s32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vabdt.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabdt.s32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vabdq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "90784c1d389c791f7b963a75a84fc575e77be8f0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_x_s8.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_s8.c?ref=c548e1b22363960b05b2c36257e677da920ea228", "patch": "@@ -1,22 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabdt.s8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vabdq_x_s8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vabdt.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabdt.s8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vabdq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "f376374564a3104ebc57436340b8800174091bc3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_x_u16.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_u16.c?ref=c548e1b22363960b05b2c36257e677da920ea228", "patch": "@@ -1,22 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabdt.u16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vabdq_x_u16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vabdt.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabdt.u16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vabdq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "d9467a1ccd700b8fff1c42eb5cd923558e27343d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_x_u32.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_u32.c?ref=c548e1b22363960b05b2c36257e677da920ea228", "patch": "@@ -1,22 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabdt.u32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vabdq_x_u32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vabdt.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabdt.u32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vabdq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "1ea3713d12bf05e04dbcc1361d9ca56210d80d03", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_x_u8.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c548e1b22363960b05b2c36257e677da920ea228/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_u8.c?ref=c548e1b22363960b05b2c36257e677da920ea228", "patch": "@@ -1,22 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabdt.u8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vabdq_x_u8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vabdt.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabdt.u8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vabdq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}]}