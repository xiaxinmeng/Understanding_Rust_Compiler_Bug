{"sha": "cbf06187d5f246634272e3d2892501563bff3d99", "node_id": "C_kwDOANBUbNoAKGNiZjA2MTg3ZDVmMjQ2NjM0MjcyZTNkMjg5MjUwMTU2M2JmZjNkOTk", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-14T11:09:19Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-14T11:09:19Z"}, "message": "c++: Avoid some -Wreturn-type false positives with const{expr,eval} if [PR103991]\n\nThe changes done to genericize_if_stmt in order to improve\n-Wunreachable-code* warning (which Richi didn't actually commit\nfor GCC 12) are I think fine for normal ifs, but for constexpr if\nand consteval if we have two competing warnings.\nThe problem is that we replace the non-taken clause (then or else)\nwith void_node and keep the if (cond) { something } else {}\nor if (cond) {} else { something }; in the IL.\nThis helps -Wunreachable-code*, if something can't fallthru but the\nnon-taken clause can, we don't warn about code after it because it\nis still (in theory) reachable.\nBut if the non-taken branch can't fallthru, we can get false positive\n-Wreturn-type warnings (which are enabled by default) if there is\nnothing after the if and the taken branch can't fallthru either.\n\nOne possibility to fix this is revert at least temporarily\nto the previous behavior for constexpr and consteval if, yes, we\ncan get false positive -Wunreachable-code* warnings but the warning\nisn't present in GCC 12.\nThe patch below implements that for constexpr if which throws its\nclauses very early (either during parsing or during instantiation),\nand for consteval if it decides based on block_may_fallthru on the\nnon-taken (for constant evaluation only) clause - if the non-taken\nbranch may fallthru, it does what you did in genericize_if_stmt\nfor consteval if, if it can't fallthru, it uses the older way\nof pretending there wasn't an if and just replacing it with the\ntaken clause.  There are some false positive risks with this though,\nblock_may_fallthru is optimistic and doesn't handle some statements\nat all (like FOR_STMT, WHILE_STMT, DO_STMT - of course handling those\nis quite hard).\nFor constexpr if (but perhaps for GCC 13?) we could try to\nblock_may_fallthru before we throw it away and remember it in some\nflag on the IF_STMT, but am not sure how dangerous would it be to call\nit on the discarded stmts.  Or if it is too dangerous e.g. just\nremember whether the discarded block of consteval if wasn't present\nor was empty, in that case assume fallthru, and otherwise assume\nit can't fallthru (-Wunreachable-code possible false positives).\n\n2022-01-14  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/103991\n\t* cp-objcp-common.c (cxx_block_may_fallthru) <case IF_STMT>: For\n\tIF_STMT_CONSTEXPR_P with constant false or true condition only\n\tcheck if the taken clause may fall through.\n\t* cp-gimplify.c (genericize_if_stmt): For consteval if, revert\n\tto r12-5638^ behavior if then_ block can't fall through.  For\n\tconstexpr if, revert to r12-5638^ behavior.\n\n\t* g++.dg/warn/Wreturn-type-13.C: New test.", "tree": {"sha": "e98844a258031e920236e78e4a167232179ec7ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e98844a258031e920236e78e4a167232179ec7ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cbf06187d5f246634272e3d2892501563bff3d99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbf06187d5f246634272e3d2892501563bff3d99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbf06187d5f246634272e3d2892501563bff3d99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbf06187d5f246634272e3d2892501563bff3d99/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d686d5d85c23451c03799dc55e456b73065f7333", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d686d5d85c23451c03799dc55e456b73065f7333", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d686d5d85c23451c03799dc55e456b73065f7333"}], "stats": {"total": 53, "additions": 51, "deletions": 2}, "files": [{"sha": "b80010e09830f4865019b447b33ffb6346a4761b", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbf06187d5f246634272e3d2892501563bff3d99/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbf06187d5f246634272e3d2892501563bff3d99/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=cbf06187d5f246634272e3d2892501563bff3d99", "patch": "@@ -166,8 +166,15 @@ genericize_if_stmt (tree *stmt_p)\n      can contain unfolded immediate function calls, we have to discard\n      the then_ block regardless of whether else_ has side-effects or not.  */\n   if (IF_STMT_CONSTEVAL_P (stmt))\n-    stmt = build3 (COND_EXPR, void_type_node, boolean_false_node,\n-\t\t   void_node, else_);\n+    {\n+      if (block_may_fallthru (then_))\n+\tstmt = build3 (COND_EXPR, void_type_node, boolean_false_node,\n+\t\t       void_node, else_);\n+      else\n+\tstmt = else_;\n+    }\n+  else if (IF_STMT_CONSTEXPR_P (stmt))\n+    stmt = integer_nonzerop (cond) ? then_ : else_;\n   else\n     stmt = build3 (COND_EXPR, void_type_node, cond, then_, else_);\n   protected_set_expr_location_if_unset (stmt, locus);"}, {"sha": "b31c9e3a63660b8b9a1369ea103c8d2b78d4c56b", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbf06187d5f246634272e3d2892501563bff3d99/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbf06187d5f246634272e3d2892501563bff3d99/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=cbf06187d5f246634272e3d2892501563bff3d99", "patch": "@@ -313,6 +313,13 @@ cxx_block_may_fallthru (const_tree stmt)\n       return false;\n \n     case IF_STMT:\n+      if (IF_STMT_CONSTEXPR_P (stmt))\n+\t{\n+\t  if (integer_nonzerop (IF_COND (stmt)))\n+\t    return block_may_fallthru (THEN_CLAUSE (stmt));\n+\t  if (integer_zerop (IF_COND (stmt)))\n+\t    return block_may_fallthru (ELSE_CLAUSE (stmt));\n+\t}\n       if (block_may_fallthru (THEN_CLAUSE (stmt)))\n \treturn true;\n       return block_may_fallthru (ELSE_CLAUSE (stmt));"}, {"sha": "fa2952b735c8489a9dbf31df52ddf5c5f39e3046", "filename": "gcc/testsuite/g++.dg/warn/Wreturn-type-13.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbf06187d5f246634272e3d2892501563bff3d99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWreturn-type-13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbf06187d5f246634272e3d2892501563bff3d99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWreturn-type-13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWreturn-type-13.C?ref=cbf06187d5f246634272e3d2892501563bff3d99", "patch": "@@ -0,0 +1,35 @@\n+// PR c++/103991\n+// { dg-do compile { target c++17 } }\n+\n+struct S { ~S(); };\n+int\n+foo ()\n+{\n+  S s;\n+  if constexpr (true)\n+    return 0;\n+  else\n+    return 1;\n+}\t\t\t// { dg-bogus \"control reaches end of non-void function\" }\n+\n+#if __cpp_if_consteval >= 202106L\n+constexpr int\n+bar ()\n+{\n+  S s;\n+  if consteval\n+    {\n+      return 0;\n+    }\n+  else\n+    {\n+      return 1;\n+    }\n+}\t\t\t// { dg-bogus \"control reaches end of non-void function\" }\n+\n+int\n+baz ()\n+{\n+  return bar ();\n+}\n+#endif"}]}