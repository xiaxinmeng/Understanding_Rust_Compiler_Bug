{"sha": "f416f18c7056fb704558230cb33abc52003b8928", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQxNmYxOGM3MDU2ZmI3MDQ1NTgyMzBjYjMzYWJjNTIwMDNiODkyOA==", "commit": {"author": {"name": "Michael Hayes", "email": "m.hayes@elec.canterbury.ac.nz", "date": "1999-10-15T04:32:37Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "1999-10-15T04:32:37Z"}, "message": "c4x.c (dst_operand): New.\n\n\t* config/c4x/c4x.c (dst_operand): New.\n\t(PREDICATE_CODES): Update.\n\t* config/c4x/c4x.h (dst_operand): Declare it.\n\t* config/c4x/c4x.md:  Define mode for each unspec usage.\n\t(move patterns):  Use dst_operand predicate instead of src_operand.\n\t(movqi_update, movqf_update): Delete.\n\nFrom-SVN: r29996", "tree": {"sha": "c5c64255bf2d59ad4da4a1b9ea3ac0e167f7b9a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5c64255bf2d59ad4da4a1b9ea3ac0e167f7b9a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f416f18c7056fb704558230cb33abc52003b8928", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f416f18c7056fb704558230cb33abc52003b8928", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f416f18c7056fb704558230cb33abc52003b8928", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f416f18c7056fb704558230cb33abc52003b8928/comments", "author": null, "committer": null, "parents": [{"sha": "556ffcc55247d9c77e0cca31a764dc56741da789", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/556ffcc55247d9c77e0cca31a764dc56741da789", "html_url": "https://github.com/Rust-GCC/gccrs/commit/556ffcc55247d9c77e0cca31a764dc56741da789"}], "stats": {"total": 110, "additions": 60, "deletions": 50}, "files": [{"sha": "2acb906a0132c4a2ba6e59d24d09c6a7ca9301ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f416f18c7056fb704558230cb33abc52003b8928/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f416f18c7056fb704558230cb33abc52003b8928/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f416f18c7056fb704558230cb33abc52003b8928", "patch": "@@ -1,3 +1,12 @@\n+Fri Oct 15 17:27:17 1999  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n+\n+\t* config/c4x/c4x.c (dst_operand): New.\n+\t(PREDICATE_CODES): Update.\n+\t* config/c4x/c4x.h (dst_operand): Declare it.\n+\t* config/c4x/c4x.md:  Define mode for each unspec usage.\n+\t(move patterns):  Use dst_operand predicate instead of src_operand.\n+\t(movqi_update, movqf_update): Delete.\n+\n Thu Oct 14 18:48:54 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* recog.c (pmode_register_operand): New."}, {"sha": "a731fbdabaa23f481e251ca616ab504522d7a299", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f416f18c7056fb704558230cb33abc52003b8928/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f416f18c7056fb704558230cb33abc52003b8928/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=f416f18c7056fb704558230cb33abc52003b8928", "patch": "@@ -3060,8 +3060,24 @@ symbolic_address_operand (op, mode)\n }\n \n \n-/* Check src operand of two operand arithmetic instructions.  */\n+/* Check dst operand of a move instruction.  */\n+int\n+dst_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  if (GET_CODE (op) == SUBREG\n+      && mixed_subreg_operand (op, mode))\n+    return 0;\n \n+  if (REG_P (op))\n+    return reg_operand (op, mode);\n+\n+  return memory_operand (op, mode);\n+}\n+\n+\n+/* Check src operand of two operand arithmetic instructions.  */\n int\n src_operand (op, mode)\n      rtx op;"}, {"sha": "3a4e13f7014a366833bbdf6beb99def6b3a67f82", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f416f18c7056fb704558230cb33abc52003b8928/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f416f18c7056fb704558230cb33abc52003b8928/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=f416f18c7056fb704558230cb33abc52003b8928", "patch": "@@ -2594,6 +2594,7 @@ if (final_sequence != NULL_RTX)\t\t\\\n   {\"st_reg_operand\", {REG}},\t\t\t\t\t\\\n   {\"rc_reg_operand\", {REG}},\t\t\t\t\t\\\n   {\"call_address_operand\", {REG, SYMBOL_REF, LABEL_REF, CONST}}, \\\n+  {\"dst_operand\", {SUBREG, REG, MEM}}, \\\n   {\"src_operand\", {SUBREG, REG, MEM, CONST_INT, CONST_DOUBLE}}, \\\n   {\"src_hi_operand\", {SUBREG, REG, MEM, CONST_DOUBLE}}, \t\\\n   {\"lsrc_operand\", {SUBREG, REG, MEM, CONST_INT, CONST_DOUBLE}}, \\\n@@ -2674,6 +2675,8 @@ extern int ext_reg_operand ();\n \n extern int std_reg_operand ();\n \n+extern int dst_operand ();\n+\n extern int src_operand ();\n \n extern int src_hi_operand ();"}, {"sha": "a2bb7c21ff2ac268e2cf2661100b5f1b980d1ec8", "filename": "gcc/config/c4x/c4x.md", "status": "modified", "additions": 31, "deletions": 49, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f416f18c7056fb704558230cb33abc52003b8928/gcc%2Fconfig%2Fc4x%2Fc4x.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f416f18c7056fb704558230cb33abc52003b8928/gcc%2Fconfig%2Fc4x%2Fc4x.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.md?ref=f416f18c7056fb704558230cb33abc52003b8928", "patch": "@@ -1216,7 +1216,7 @@\n    && ! IS_INT16_CONST (INTVAL (operands[1]))\n    && ! IS_HIGH_CONST (INTVAL (operands[1]))\n    && reload_completed\n-   && (TARGET_C3X && c4x_shiftable_constant (operands[1]) < 0\n+   && ((TARGET_C3X && c4x_shiftable_constant (operands[1]) < 0)\n        || ! std_reg_operand (operands[0], QImode))\"\n   [(set (match_dup 0) (match_dup 2))\n    (use (match_dup 1))]\n@@ -1325,7 +1325,7 @@\n ; We must provide an alternative to store to memory in case we have to\n ; spill a register.\n (define_insn \"movqi_noclobber\"\n-  [(set (match_operand:QI 0 \"src_operand\" \"=d,*c,m,r\")\n+  [(set (match_operand:QI 0 \"dst_operand\" \"=d,*c,m,r\")\n         (match_operand:QI 1 \"src_hi_operand\" \"rIm,rIm,r,O\"))]\n   \"(REG_P (operands[0]) || REG_P (operands[1])\n     || GET_CODE (operands[0]) == SUBREG\n@@ -1415,16 +1415,6 @@\n     DONE;\n }\")\n \n-(define_insn \"*movqi_update\"\n-  [(set (match_operand:QI 0 \"reg_operand\" \"=r\") \n-        (mem:QI (plus:QI (match_operand:QI 1 \"addr_reg_operand\" \"a\")\n-                         (match_operand:QI 2 \"index_reg_operand\" \"x\"))))\n-   (set (match_dup 1)\n-        (plus:QI (match_dup 1) (match_dup 2)))]\n-  \"\"\n-  \"ldiu\\\\t*%1++(%2),%0\"\n-  [(set_attr \"type\" \"unary\")\n-   (set_attr \"data\" \"int16\")])\n \n (define_insn \"movqi_parallel\"\n   [(set (match_operand:QI 0 \"parallel_operand\" \"=q,S<>,q,S<>\")\n@@ -1833,7 +1823,7 @@\n ; may be allocated to reload the PLUS and thus gen_reload will\n ; emit an add insn that may clobber CC.\n (define_insn \"*addqi3_noclobber_reload\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=c,c,c\")\n+  [(set (match_operand:QI 0 \"dst_operand\" \"=c,c,c\")\n         (plus:QI (match_operand:QI 1 \"src_operand\" \"%0,rR,rS<>\")\n                  (match_operand:QI 2 \"src_operand\" \"rIm,JR,rS<>\")))]\n   \"reload_in_progress\"\n@@ -3183,7 +3173,7 @@\n ; This can generate invalid stack slot displacements\n (define_split\n  [(set (match_operand:QI 0 \"reg_operand\" \"=r\")\n-       (unspec [(match_operand:QF 1 \"reg_operand\" \"f\")] 12))]\n+       (unspec:QI [(match_operand:QF 1 \"reg_operand\" \"f\")] 12))]\n   \"reload_completed\"\n   [(set (match_dup 3) (match_dup 1))\n    (set (match_dup 0) (match_dup 2))]\n@@ -3194,14 +3184,14 @@\n \n (define_insn \"storeqf_int\"\n  [(set (match_operand:QI 0 \"reg_operand\" \"=r\")\n-       (unspec [(match_operand:QF 1 \"reg_operand\" \"f\")] 12))]\n+       (unspec:QI [(match_operand:QF 1 \"reg_operand\" \"f\")] 12))]\n  \"\"\n  \"#\"\n   [(set_attr \"type\" \"multi\")])\n \n (define_split\n  [(parallel [(set (match_operand:QI 0 \"reg_operand\" \"=r\")\n-                  (unspec [(match_operand:QF 1 \"reg_operand\" \"f\")] 12))\n+                  (unspec:QI [(match_operand:QF 1 \"reg_operand\" \"f\")] 12))\n              (clobber (reg:CC 21))])]\n   \"reload_completed\"\n   [(set (mem:QF (pre_inc:QI (reg:QI 20)))\n@@ -3226,7 +3216,7 @@\n \n (define_insn \"storeqf_int_clobber\"\n  [(parallel [(set (match_operand:QI 0 \"reg_operand\" \"=r\")\n-                  (unspec [(match_operand:QF 1 \"reg_operand\" \"f\")] 12))\n+                  (unspec:QI [(match_operand:QF 1 \"reg_operand\" \"f\")] 12))\n              (clobber (reg:CC 21))])]\n  \"\"\n  \"#\"\n@@ -3236,7 +3226,7 @@\n ; This can generate invalid stack slot displacements\n (define_split\n  [(set (match_operand:QF 0 \"reg_operand\" \"=f\")\n-       (unspec [(match_operand:QI 1 \"reg_operand\" \"r\")] 11))]\n+       (unspec:QF [(match_operand:QI 1 \"reg_operand\" \"r\")] 11))]\n   \"reload_completed\"\n   [(set (match_dup 2) (match_dup 1))\n    (set (match_dup 0) (match_dup 3))]\n@@ -3247,14 +3237,14 @@\n \n (define_insn \"loadqf_int\"\n  [(set (match_operand:QF 0 \"reg_operand\" \"=f\")\n-       (unspec [(match_operand:QI 1 \"reg_operand\" \"r\")] 11))]\n+       (unspec:QF [(match_operand:QI 1 \"reg_operand\" \"r\")] 11))]\n  \"\"\n  \"#\"\n   [(set_attr \"type\" \"multi\")])\n \n (define_split\n  [(parallel [(set (match_operand:QF 0 \"reg_operand\" \"=f\")\n-                  (unspec [(match_operand:QI 1 \"reg_operand\" \"r\")] 11))\n+                  (unspec:QF [(match_operand:QI 1 \"reg_operand\" \"r\")] 11))\n              (clobber (reg:CC 21))])]\n   \"reload_completed\"\n   [(set (mem:QI (pre_inc:QI (reg:QI 20)))\n@@ -3266,7 +3256,7 @@\n \n (define_insn \"loadqf_int_clobber\"\n  [(parallel [(set (match_operand:QF 0 \"reg_operand\" \"=f\")\n-                  (unspec [(match_operand:QI 1 \"reg_operand\" \"r\")] 11))\n+                  (unspec:QF [(match_operand:QI 1 \"reg_operand\" \"r\")] 11))\n              (clobber (reg:CC 21))])]\n  \"\"\n  \"#\"\n@@ -3275,7 +3265,7 @@\n ; We must provide an alternative to store to memory in case we have to\n ; spill a register.\n (define_insn \"movqf_noclobber\"\n- [(set (match_operand:QF 0 \"src_operand\" \"=f,m\")\n+ [(set (match_operand:QF 0 \"dst_operand\" \"=f,m\")\n        (match_operand:QF 1 \"src_operand\" \"fHm,f\"))]\n  \"REG_P (operands[0]) || REG_P (operands[1])\"\n  \"@\n@@ -3310,15 +3300,6 @@\n  \"ldf\\\\t%1,%0\"\n   [(set_attr \"type\" \"unarycc\")])\n \n-(define_insn \"*movqf_update\"\n-  [(set (match_operand:QF 0 \"reg_operand\" \"=r\") \n-        (mem:QF (plus:QI (match_operand:QI 1 \"addr_reg_operand\" \"a\")\n-                         (match_operand:QI 2 \"index_reg_operand\" \"x\"))))\n-   (set (match_dup 1)\n-        (plus:QI (match_dup 1) (match_dup 2)))]\n-  \"\"\n-  \"ldfu\\\\t*%1++(%2),%0\"\n-  [(set_attr \"type\" \"unary\")])\n \n (define_insn \"*movqf_parallel\"\n  [(set (match_operand:QF 0 \"parallel_operand\" \"=q,S<>,q,S<>\")\n@@ -3574,7 +3555,7 @@\n ;\n (define_insn \"*rcpfqf_clobber\"\n   [(set (match_operand:QF 0 \"reg_operand\" \"=f\")\n-        (unspec [(match_operand:QF 1 \"src_operand\" \"fHm\")] 5))\n+        (unspec:QF [(match_operand:QF 1 \"src_operand\" \"fHm\")] 5))\n    (clobber (reg:CC_NOOV 21))]\n   \"! TARGET_C3X\"\n   \"rcpf\\\\t%1,%0\"\n@@ -3585,7 +3566,7 @@\n ;\n (define_insn \"*rsqrfqf_clobber\"\n   [(set (match_operand:QF 0 \"reg_operand\" \"=f\")\n-        (unspec [(match_operand:QF 1 \"src_operand\" \"fHm\")] 10))\n+        (unspec:QF [(match_operand:QF 1 \"src_operand\" \"fHm\")] 10))\n    (clobber (reg:CC_NOOV 21))]\n   \"! TARGET_C3X\"\n   \"rsqrf\\\\t%1,%0\"\n@@ -3596,7 +3577,7 @@\n ;\n (define_insn \"*rndqf_clobber\"\n   [(set (match_operand:QF 0 \"reg_operand\" \"=f\")\n-        (unspec [(match_operand:QF 1 \"src_operand\" \"fHm\")] 6))\n+        (unspec:QF [(match_operand:QF 1 \"src_operand\" \"fHm\")] 6))\n    (clobber (reg:CC_NOOV 21))]\n   \"! TARGET_C3X\"\n   \"rnd\\\\t%1,%0\"\n@@ -4103,7 +4084,7 @@\n \n (define_split\n   [(set (match_operand:QI 0 \"reg_operand\" \"\")\n-        (match_operator 1 \"comparison_operator\" [(reg:CC 21) (const_int 0)]))]\n+        (match_operator:QI 1 \"comparison_operator\" [(reg:CC 21) (const_int 0)]))]\n   \"reload_completed\"\n   [(set (match_dup 0) (const_int 0))\n    (set (match_dup 0)\n@@ -4114,7 +4095,7 @@\n \n (define_split\n   [(set (match_operand:QI 0 \"reg_operand\" \"\")\n-        (match_operator 1 \"comparison_operator\" [(reg:CC_NOOV 21) (const_int 0)]))]\n+        (match_operator:QI 1 \"comparison_operator\" [(reg:CC_NOOV 21) (const_int 0)]))]\n   \"reload_completed\"\n   [(set (match_dup 0) (const_int 0))\n    (set (match_dup 0)\n@@ -5234,7 +5215,7 @@\n   [(set_attr \"type\" \"unary\")])\n \n (define_insn \"*movhf_noclobber\"\n- [(set (match_operand:HF 0 \"src_operand\" \"=h,m\")\n+ [(set (match_operand:HF 0 \"dst_operand\" \"=h,m\")\n        (match_operand:HF 1 \"src_operand\" \"Hm,h\"))]\n  \"reg_operand (operands[0], HFmode) ^ reg_operand (operands[1], HFmode)\"\n  \"#\"\n@@ -5302,7 +5283,7 @@\n \n (define_insn \"*loadhf_int\"\n  [(set (match_operand:HF 0 \"reg_operand\" \"=h\")\n-       (unspec[(subreg:QI (match_dup 0) 0)\n+       (unspec:HF [(subreg:QI (match_dup 0) 0)\n                (match_operand:QI 1 \"src_operand\" \"rIm\")] 8))]\n  \"\"\n  \"@\n@@ -5318,7 +5299,7 @@\n \n (define_insn \"*storehf_int\"\n  [(set (match_operand:QI 0 \"memory_operand\" \"=m\")\n-       (unspec [(match_operand:HF 1 \"reg_operand\" \"h\")] 9))]\n+       (unspec:QI [(match_operand:HF 1 \"reg_operand\" \"h\")] 9))]\n  \"\"\n  \"@\n   sti\\\\t%1,%0\"\n@@ -5368,7 +5349,7 @@\n \n (define_insn \"pushhf_int\"\n   [(set (mem:QI (pre_inc:QI (reg:QI 20)))\n-        (unspec [(match_operand:HF 0 \"reg_operand\" \"h\")] 9))]\n+        (unspec:QI [(match_operand:HF 0 \"reg_operand\" \"h\")] 9))]\n  \"\"\n  \"push\\\\t%0\"\n  [(set_attr \"type\" \"push\")])\n@@ -5398,7 +5379,7 @@\n \n (define_insn \"*pophf_int\"\n  [(set (match_operand:HF 0 \"reg_operand\" \"=h\")\n-       (unspec[(subreg:QI (match_dup 0) 0)\n+       (unspec:HF [(subreg:QI (match_dup 0) 0)\n                (mem:QI (post_dec:QI (reg:QI 20)))] 8))\n   (clobber (reg:CC 21))]\n  \"\"\n@@ -5506,7 +5487,7 @@\n ;\n (define_insn \"*rcpfhf_clobber\"\n   [(set (match_operand:HF 0 \"reg_operand\" \"=h\")\n-        (unspec [(match_operand:HF 1 \"reg_or_const_operand\" \"hH\")] 5))\n+        (unspec:HF [(match_operand:HF 1 \"reg_or_const_operand\" \"hH\")] 5))\n    (clobber (reg:CC_NOOV 21))]\n   \"! TARGET_C3X\"\n   \"rcpf\\\\t%1,%0\"\n@@ -5517,7 +5498,7 @@\n ;\n (define_insn \"*rsqrfhf_clobber\"\n   [(set (match_operand:HF 0 \"reg_operand\" \"=h\")\n-        (unspec [(match_operand:HF 1 \"reg_or_const_operand\" \"hH\")] 10))\n+        (unspec:HF [(match_operand:HF 1 \"reg_or_const_operand\" \"hH\")] 10))\n    (clobber (reg:CC_NOOV 21))]\n   \"! TARGET_C3X\"\n   \"rsqrf\\\\t%1,%0\"\n@@ -5528,7 +5509,7 @@\n ;\n (define_insn \"*rndhf_clobber\"\n   [(set (match_operand:HF 0 \"reg_operand\" \"=h\")\n-        (unspec [(match_operand:HF 1 \"reg_or_const_operand\" \"hH\")] 6))\n+        (unspec:HF [(match_operand:HF 1 \"reg_or_const_operand\" \"hH\")] 6))\n    (clobber (reg:CC_NOOV 21))]\n   \"! TARGET_C3X\"\n   \"rnd\\\\t%1,%0\"\n@@ -5764,7 +5745,7 @@\n ; we can get RC, R8 allocated as a pair.  We want more\n ; votes for FP_REGS so we use dr as the constraints.\n (define_insn \"*movhi_noclobber\"\n-  [(set (match_operand:HI 0 \"src_operand\" \"=dr,m\")\n+  [(set (match_operand:HI 0 \"dst_operand\" \"=dr,m\")\n         (match_operand:HI 1 \"src_operand\" \"drIm,r\"))]\n   \"reg_operand (operands[0], HImode)\n    || reg_operand (operands[1], HImode)\"\n@@ -5786,7 +5767,7 @@\n ; However, things are likely to be very screwed up if we get this.\n \n (define_split\n-  [(set (match_operand:HI 0 \"src_operand\" \"\")\n+  [(set (match_operand:HI 0 \"dst_operand\" \"\")\n \t(match_operand:HI 1 \"src_operand\" \"\"))]\n   \"reload_completed\n    && (reg_operand (operands[0], HImode)\n@@ -6509,7 +6490,7 @@\n  \n (define_insn \"cmphi_cc\"\n   [(set (reg:CC 21)\n-        (unspec [(compare:CC (match_operand:HI 0 \"src_operand\" \"rR,rS<>\")\n+        (unspec:CC [(compare:CC (match_operand:HI 0 \"src_operand\" \"rR,rS<>\")\n                              (match_operand:HI 1 \"src_operand\" \"R,rS<>\"))] 4))\n    (clobber (match_scratch:QI 2 \"=&d,&d\"))\n    (clobber (match_scratch:QI 3 \"=&c,&c\"))]\n@@ -6525,8 +6506,9 @@\n \n (define_insn \"cmphi_cc_noov\"\n   [(set (reg:CC_NOOV 21)\n-        (unspec [(compare:CC_NOOV (match_operand:HI 0 \"src_operand\" \"rR,rS<>\")\n-                                  (match_operand:HI 1 \"src_operand\" \"R,rS<>\"))] 4))\n+        (unspec:CC_NOOV [\n+          (compare:CC_NOOV (match_operand:HI 0 \"src_operand\" \"rR,rS<>\")\n+                           (match_operand:HI 1 \"src_operand\" \"R,rS<>\"))] 4))\n    (clobber (match_scratch:QI 2 \"=&d,&d\"))\n    (clobber (match_scratch:QI 3 \"=&c,&c\"))]\n   \"valid_operands (COMPARE, operands, HImode)\""}]}