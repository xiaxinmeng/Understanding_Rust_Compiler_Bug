{"sha": "a5d3826f7648c4c7763dba8882e6722deae0c116", "node_id": "C_kwDOANBUbNoAKGE1ZDM4MjZmNzY0OGM0Yzc3NjNkYmE4ODgyZTY3MjJkZWFlMGMxMTY", "commit": {"author": {"name": "Xi Ruoyao", "email": "xry111@xry111.site", "date": "2022-07-06T05:45:55Z"}, "committer": {"name": "Xi Ruoyao", "email": "xry111@xry111.site", "date": "2022-07-10T03:36:11Z"}, "message": "loongarch: add alternatives for idiv insns to improve code generation\n\nCurrently in the description of LoongArch integer division instructions,\nthe output is marked as earlyclobbered ('&').  It's necessary when\nloongarch_check_zero_div_p() because clobbering operand 2 (divisor) will\nmake the checking for zero divisor impossible.\n\nBut, for -mno-check-zero-division (the default of GCC >= 12.2 for\noptimized code), the output is not earlyclobbered at all.  And, the\nread of operand 1 only occurs before clobbering the output.  So we make\nthree alternatives for an idiv instruction:\n\n* (=r,r,r): For -mno-check-zero-division.\n* (=&r,r,r): For -mcheck-zero-division.\n* (=&r,0,r): For -mcheck-zero-division, to explicitly allow patterns\n  like \"div.d $a0, $a0, $a1\".\n\ngcc/ChangeLog:\n\n\t* config/loongarch/loongarch.cc (loongarch_check_zero_div_p):\n\tRemove static, for use in the machine description file.\n\t* config/loongarch/loongarch-protos.h:\n\t(loongarch_check_zero_div_p): Add prototype.\n\t* config/loongarch/loongarch.md (enabled): New attr.\n\t(*<optab><mode>3): Add (=r,r,r) and (=&r,0,r) alternatives for\n\tidiv.  Conditionally enable the alternatives using\n\tloongarch_check_zero_div_p.\n\t(<optab>di3_fake): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/loongarch/div-1.c: New test.\n\t* gcc.target/loongarch/div-2.c: New test.\n\t* gcc.target/loongarch/div-3.c: New test.", "tree": {"sha": "4b69cbd80c7182ef0e5d1e116f0fb16f2ad46cbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b69cbd80c7182ef0e5d1e116f0fb16f2ad46cbe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5d3826f7648c4c7763dba8882e6722deae0c116", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQSR0PV2MB+STX3t3OisqtIOGecQ4wUCYspJKwAKCRCsqtIOGecQ\n4zEiAQDfc/vJO5E86Bi9Z8nv+BLvMvbneJDXCDVJQUomVVe7YQEAuMDRG3guHDUr\nu7446Uhqb58gOQNhcMvvsuFhzheOAQk=\n=6LCV\n-----END PGP SIGNATURE-----", "payload": "tree 4b69cbd80c7182ef0e5d1e116f0fb16f2ad46cbe\nparent 1fa42d62140b56589771eb3d46f89c810bfc8e0a\nauthor Xi Ruoyao <xry111@xry111.site> 1657086355 +0800\ncommitter Xi Ruoyao <xry111@xry111.site> 1657424171 +0800\n\nloongarch: add alternatives for idiv insns to improve code generation\n\nCurrently in the description of LoongArch integer division instructions,\nthe output is marked as earlyclobbered ('&').  It's necessary when\nloongarch_check_zero_div_p() because clobbering operand 2 (divisor) will\nmake the checking for zero divisor impossible.\n\nBut, for -mno-check-zero-division (the default of GCC >= 12.2 for\noptimized code), the output is not earlyclobbered at all.  And, the\nread of operand 1 only occurs before clobbering the output.  So we make\nthree alternatives for an idiv instruction:\n\n* (=r,r,r): For -mno-check-zero-division.\n* (=&r,r,r): For -mcheck-zero-division.\n* (=&r,0,r): For -mcheck-zero-division, to explicitly allow patterns\n  like \"div.d $a0, $a0, $a1\".\n\ngcc/ChangeLog:\n\n\t* config/loongarch/loongarch.cc (loongarch_check_zero_div_p):\n\tRemove static, for use in the machine description file.\n\t* config/loongarch/loongarch-protos.h:\n\t(loongarch_check_zero_div_p): Add prototype.\n\t* config/loongarch/loongarch.md (enabled): New attr.\n\t(*<optab><mode>3): Add (=r,r,r) and (=&r,0,r) alternatives for\n\tidiv.  Conditionally enable the alternatives using\n\tloongarch_check_zero_div_p.\n\t(<optab>di3_fake): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/loongarch/div-1.c: New test.\n\t* gcc.target/loongarch/div-2.c: New test.\n\t* gcc.target/loongarch/div-3.c: New test.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5d3826f7648c4c7763dba8882e6722deae0c116", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5d3826f7648c4c7763dba8882e6722deae0c116", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5d3826f7648c4c7763dba8882e6722deae0c116/comments", "author": {"login": "xry111", "id": 8733039, "node_id": "MDQ6VXNlcjg3MzMwMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8733039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xry111", "html_url": "https://github.com/xry111", "followers_url": "https://api.github.com/users/xry111/followers", "following_url": "https://api.github.com/users/xry111/following{/other_user}", "gists_url": "https://api.github.com/users/xry111/gists{/gist_id}", "starred_url": "https://api.github.com/users/xry111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xry111/subscriptions", "organizations_url": "https://api.github.com/users/xry111/orgs", "repos_url": "https://api.github.com/users/xry111/repos", "events_url": "https://api.github.com/users/xry111/events{/privacy}", "received_events_url": "https://api.github.com/users/xry111/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xry111", "id": 8733039, "node_id": "MDQ6VXNlcjg3MzMwMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8733039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xry111", "html_url": "https://github.com/xry111", "followers_url": "https://api.github.com/users/xry111/followers", "following_url": "https://api.github.com/users/xry111/following{/other_user}", "gists_url": "https://api.github.com/users/xry111/gists{/gist_id}", "starred_url": "https://api.github.com/users/xry111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xry111/subscriptions", "organizations_url": "https://api.github.com/users/xry111/orgs", "repos_url": "https://api.github.com/users/xry111/repos", "events_url": "https://api.github.com/users/xry111/events{/privacy}", "received_events_url": "https://api.github.com/users/xry111/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fa42d62140b56589771eb3d46f89c810bfc8e0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fa42d62140b56589771eb3d46f89c810bfc8e0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fa42d62140b56589771eb3d46f89c810bfc8e0a"}], "stats": {"total": 58, "additions": 49, "deletions": 9}, "files": [{"sha": "2287fd3763c812bddbd2c04e98af037c5986e83e", "filename": "gcc/config/loongarch/loongarch-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5d3826f7648c4c7763dba8882e6722deae0c116/gcc%2Fconfig%2Floongarch%2Floongarch-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5d3826f7648c4c7763dba8882e6722deae0c116/gcc%2Fconfig%2Floongarch%2Floongarch-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch-protos.h?ref=a5d3826f7648c4c7763dba8882e6722deae0c116", "patch": "@@ -130,6 +130,7 @@ extern bool loongarch_symbol_binds_local_p (const_rtx);\n extern const char *current_section_name (void);\n extern unsigned int current_section_flags (void);\n extern bool loongarch_use_ins_ext_p (rtx, HOST_WIDE_INT, HOST_WIDE_INT);\n+extern bool loongarch_check_zero_div_p (void);\n \n union loongarch_gen_fn_ptrs\n {"}, {"sha": "8b0d7f459e0d7685c44cae22efc670a4e665175e", "filename": "gcc/config/loongarch/loongarch.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5d3826f7648c4c7763dba8882e6722deae0c116/gcc%2Fconfig%2Floongarch%2Floongarch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5d3826f7648c4c7763dba8882e6722deae0c116/gcc%2Fconfig%2Floongarch%2Floongarch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch.cc?ref=a5d3826f7648c4c7763dba8882e6722deae0c116", "patch": "@@ -2110,7 +2110,7 @@ loongarch_load_store_insns (rtx mem, rtx_insn *insn)\n \n /* Return true if we need to trap on division by zero.  */\n \n-static bool\n+bool\n loongarch_check_zero_div_p (void)\n {\n   /* if -m[no-]check-zero-division is given explicitly.  */"}, {"sha": "6bca2ed39932bd549b7bf4cabcb8ad659458c8cd", "filename": "gcc/config/loongarch/loongarch.md", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5d3826f7648c4c7763dba8882e6722deae0c116/gcc%2Fconfig%2Floongarch%2Floongarch.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5d3826f7648c4c7763dba8882e6722deae0c116/gcc%2Fconfig%2Floongarch%2Floongarch.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch.md?ref=a5d3826f7648c4c7763dba8882e6722deae0c116", "patch": "@@ -110,6 +110,8 @@\n ;;\n ;; ....................\n \n+(define_attr \"enabled\" \"no,yes\" (const_string \"yes\"))\n+\n (define_attr \"got\" \"unset,load\"\n   (const_string \"unset\"))\n \n@@ -763,26 +765,36 @@\n })\n \n (define_insn \"*<optab><mode>3\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=&r\")\n-\t(any_div:GPR (match_operand:GPR 1 \"register_operand\" \"r\")\n-\t\t     (match_operand:GPR 2 \"register_operand\" \"r\")))]\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=r,&r,&r\")\n+\t(any_div:GPR (match_operand:GPR 1 \"register_operand\" \"r,r,0\")\n+\t\t     (match_operand:GPR 2 \"register_operand\" \"r,r,r\")))]\n   \"\"\n {\n   return loongarch_output_division (\"<insn>.<d><u>\\t%0,%1,%2\", operands);\n }\n   [(set_attr \"type\" \"idiv\")\n-   (set_attr \"mode\" \"<MODE>\")])\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set (attr \"enabled\")\n+      (if_then_else\n+\t(match_test \"!!which_alternative == loongarch_check_zero_div_p()\")\n+\t(const_string \"yes\")\n+\t(const_string \"no\")))])\n \n (define_insn \"<optab>di3_fake\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=&r\")\n-\t(any_div:SI (match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t    (match_operand:DI 2 \"register_operand\" \"r\")))]\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,&r,&r\")\n+\t(any_div:SI (match_operand:DI 1 \"register_operand\" \"r,r,0\")\n+\t\t    (match_operand:DI 2 \"register_operand\" \"r,r,r\")))]\n   \"\"\n {\n   return loongarch_output_division (\"<insn>.w<u>\\t%0,%1,%2\", operands);\n }\n   [(set_attr \"type\" \"idiv\")\n-   (set_attr \"mode\" \"SI\")])\n+   (set_attr \"mode\" \"SI\")\n+   (set (attr \"enabled\")\n+      (if_then_else\n+\t(match_test \"!!which_alternative == loongarch_check_zero_div_p()\")\n+\t(const_string \"yes\")\n+\t(const_string \"no\")))])\n \n ;; Floating point multiply accumulate instructions.\n "}, {"sha": "b1683f8535fbfb179e8335bd853e5d952a0c37ed", "filename": "gcc/testsuite/gcc.target/loongarch/div-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5d3826f7648c4c7763dba8882e6722deae0c116/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fdiv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5d3826f7648c4c7763dba8882e6722deae0c116/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fdiv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fdiv-1.c?ref=a5d3826f7648c4c7763dba8882e6722deae0c116", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mcheck-zero-division\" } */\n+/* { dg-final { scan-assembler \"div.\\[wd\\]\\t\\\\\\$r4,\\\\\\$r4,\\\\\\$r5\" } } */\n+\n+long\n+div(long a, long b)\n+{\n+  return a / b;\n+}"}, {"sha": "4c2beb5b930563ccf89765f50abe3caf53213c90", "filename": "gcc/testsuite/gcc.target/loongarch/div-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5d3826f7648c4c7763dba8882e6722deae0c116/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fdiv-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5d3826f7648c4c7763dba8882e6722deae0c116/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fdiv-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fdiv-2.c?ref=a5d3826f7648c4c7763dba8882e6722deae0c116", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mno-check-zero-division\" } */\n+/* { dg-final { scan-assembler \"div.\\[wd\\]\\t\\\\\\$r4,\\\\\\$r5,\\\\\\$r4\" } } */\n+\n+long\n+div(long a, long b)\n+{\n+  return b / a;\n+}"}, {"sha": "d25969263f5164f24f19628dbd55f66d7c465ca5", "filename": "gcc/testsuite/gcc.target/loongarch/div-3.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5d3826f7648c4c7763dba8882e6722deae0c116/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fdiv-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5d3826f7648c4c7763dba8882e6722deae0c116/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fdiv-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fdiv-3.c?ref=a5d3826f7648c4c7763dba8882e6722deae0c116", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mcheck-zero-division\" } */\n+/* { dg-final { scan-assembler-not \"div.\\[wd\\]\\t\\\\\\$r4,\\\\\\$r5,\\\\\\$r4\" } } */\n+\n+long\n+div(long a, long b)\n+{\n+  return b / a;\n+}"}]}