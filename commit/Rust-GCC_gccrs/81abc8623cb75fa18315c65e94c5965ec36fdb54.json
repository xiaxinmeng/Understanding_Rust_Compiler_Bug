{"sha": "81abc8623cb75fa18315c65e94c5965ec36fdb54", "node_id": "C_kwDOANBUbNoAKDgxYWJjODYyM2NiNzVmYTE4MzE1YzY1ZTk0YzU5NjVlYzM2ZmRiNTQ", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-06-29T14:07:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-29T14:07:33Z"}, "message": "Merge #1151 #1343\n\n1151: backend: handle deprecated attribute r=philberty a=liushuyu\n\n- handle the `deprecated` attribute\n\n1343: Ensure we support generic arguments on mangled type-paths r=philberty a=philberty\n\nThis allows us to have the generic arguments within type paths for mangled\r\nsymbols such as those in impl-blocks. This also updates our symbol\r\nmanagling to mangle comma's to $C$.\r\n\n\nCo-authored-by: liushuyu <liushuyu011@gmail.com>\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "4ebe4f56f6cbdee08aea1d34ae6726b6f65d05a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ebe4f56f6cbdee08aea1d34ae6726b6f65d05a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81abc8623cb75fa18315c65e94c5965ec36fdb54", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJivFylCRBK7hj4Ov3rIwAApFAIAC/C0AEYcrxfgbsEkPdkQpPv\n5CioI6L0UNyRaepsRv+QBE41Q6GY8MaWk4SbKMlnlK4xkn1q0gjL0h78dfTKN25n\nRtfbqrIZGTpCMZ47texJ1KrymXIupwhXFsGk7AxYcMyjEzXbEtlXzNNRXgVYubVZ\nw9WBlLj2tV07ocRBPz09UoeSJb2W8DSTzJgarwL2OPx8BMRPuUAjR4c4ZPV6my/i\nYxpp2bu1V9kKNQklEXlh0/gQ0XoNKOlM1I2RsVAMfA6WYihIz2heNiMlkVbUXJQx\n8tCJVmAeHAr0PnRgSBrIi8M8CJ+g/FbinAMu1qlJ3Ko7vvQsaTP1DYdcTZ5iPZc=\n=EDKI\n-----END PGP SIGNATURE-----\n", "payload": "tree 4ebe4f56f6cbdee08aea1d34ae6726b6f65d05a1\nparent 9976c571ff14dc8e3da3ecd719f42b903a30f466\nparent 0c290e7c6f3a227829ffe70d8fd9280f1a1da668\nparent 1282974cf899f9486c62054bcbadf41346915dd5\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1656511653 +0000\ncommitter GitHub <noreply@github.com> 1656511653 +0000\n\nMerge #1151 #1343\n\n1151: backend: handle deprecated attribute r=philberty a=liushuyu\n\n- handle the `deprecated` attribute\n\n1343: Ensure we support generic arguments on mangled type-paths r=philberty a=philberty\n\nThis allows us to have the generic arguments within type paths for mangled\r\nsymbols such as those in impl-blocks. This also updates our symbol\r\nmanagling to mangle comma's to $C$.\r\n\n\nCo-authored-by: liushuyu <liushuyu011@gmail.com>\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81abc8623cb75fa18315c65e94c5965ec36fdb54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81abc8623cb75fa18315c65e94c5965ec36fdb54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81abc8623cb75fa18315c65e94c5965ec36fdb54/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9976c571ff14dc8e3da3ecd719f42b903a30f466", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9976c571ff14dc8e3da3ecd719f42b903a30f466", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9976c571ff14dc8e3da3ecd719f42b903a30f466"}, {"sha": "0c290e7c6f3a227829ffe70d8fd9280f1a1da668", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c290e7c6f3a227829ffe70d8fd9280f1a1da668", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c290e7c6f3a227829ffe70d8fd9280f1a1da668"}, {"sha": "1282974cf899f9486c62054bcbadf41346915dd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1282974cf899f9486c62054bcbadf41346915dd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1282974cf899f9486c62054bcbadf41346915dd5"}], "stats": {"total": 184, "additions": 181, "deletions": 3}, "files": [{"sha": "81791135bc4dbc140268dbf77d3dfad7158e2ad0", "filename": "gcc/rust/ast/rust-ast-full-test.cc", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81abc8623cb75fa18315c65e94c5965ec36fdb54/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81abc8623cb75fa18315c65e94c5965ec36fdb54/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-test.cc?ref=81abc8623cb75fa18315c65e94c5965ec36fdb54", "patch": "@@ -20,10 +20,12 @@ along with GCC; see the file COPYING3.  If not see\n // FIXME: This does not work on Windows\n #include <string>\n #include <unistd.h>\n+#include <memory>\n \n #include \"rust-ast-full.h\"\n #include \"rust-diagnostics.h\"\n #include \"rust-ast-visitor.h\"\n+#include \"rust-macro.h\"\n #include \"rust-session-manager.h\"\n #include \"rust-lex.h\"\n #include \"rust-parse.h\"\n@@ -3862,7 +3864,12 @@ MetaItemInner::~MetaItemInner () = default;\n std::unique_ptr<MetaNameValueStr>\n MetaItemInner::to_meta_name_value_str () const\n {\n-  // TODO parse foo = bar\n+  if (is_key_value_pair ())\n+    {\n+      auto converted_item = static_cast<const MetaNameValueStr *> (this);\n+      return converted_item->to_meta_name_value_str ();\n+    }\n+  // TODO actually parse foo = bar\n   return nullptr;\n }\n "}, {"sha": "51fe3c49c59137a9b9a4af3b1d751e2db197c219", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81abc8623cb75fa18315c65e94c5965ec36fdb54/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81abc8623cb75fa18315c65e94c5965ec36fdb54/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=81abc8623cb75fa18315c65e94c5965ec36fdb54", "patch": "@@ -645,6 +645,8 @@ class MetaItemInner\n   virtual Attribute to_attribute () const { return Attribute::create_empty (); }\n \n   virtual bool check_cfg_predicate (const Session &session) const = 0;\n+\n+  virtual bool is_key_value_pair () const { return false; }\n };\n \n // Container used to store MetaItems as AttrInput (bridge-ish kinda thing)"}, {"sha": "ce515db0aad20c0b4785429d212860dd236369c3", "filename": "gcc/rust/ast/rust-macro.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81abc8623cb75fa18315c65e94c5965ec36fdb54/gcc%2Frust%2Fast%2Frust-macro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81abc8623cb75fa18315c65e94c5965ec36fdb54/gcc%2Frust%2Fast%2Frust-macro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-macro.h?ref=81abc8623cb75fa18315c65e94c5965ec36fdb54", "patch": "@@ -21,6 +21,7 @@\n \n #include \"rust-ast.h\"\n #include \"rust-location.h\"\n+#include <string>\n \n namespace Rust {\n namespace AST {\n@@ -816,6 +817,13 @@ class MetaNameValueStr : public MetaItem\n \n   Attribute to_attribute () const override;\n \n+  inline std::pair<Identifier, std::string> get_name_value_pair () const\n+  {\n+    return std::pair<Identifier, std::string> (ident, str);\n+  }\n+\n+  bool is_key_value_pair () const override { return true; }\n+\n protected:\n   // Use covariance to implement clone function as returning this type\n   MetaNameValueStr *clone_meta_item_inner_impl () const override"}, {"sha": "066ef43ca2376787d354bfe9049feed3b95a02ca", "filename": "gcc/rust/backend/rust-compile-base.cc", "status": "modified", "additions": 72, "deletions": 1, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81abc8623cb75fa18315c65e94c5965ec36fdb54/gcc%2Frust%2Fbackend%2Frust-compile-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81abc8623cb75fa18315c65e94c5965ec36fdb54/gcc%2Frust%2Fbackend%2Frust-compile-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.cc?ref=81abc8623cb75fa18315c65e94c5965ec36fdb54", "patch": "@@ -22,7 +22,8 @@\n #include \"rust-compile-fnparam.h\"\n #include \"rust-compile-var-decl.h\"\n \n-#include \"rust-expr.h\" // for AST::AttrInputLiteral\n+#include \"rust-expr.h\"\t// for AST::AttrInputLiteral\n+#include \"rust-macro.h\" // for AST::MetaNameValueStr\n \n #include \"fold-const.h\"\n #include \"stringpool.h\"\n@@ -66,6 +67,9 @@ HIRCompileBase::setup_fndecl (tree fndecl, bool is_main_entry_point,\n       bool is_link_section\n \t= attr.get_path ().as_string ().compare (\"link_section\") == 0;\n       bool no_mangle = attr.get_path ().as_string ().compare (\"no_mangle\") == 0;\n+      bool is_deprecated\n+\t= attr.get_path ().as_string ().compare (\"deprecated\") == 0;\n+\n       if (is_inline)\n \t{\n \t  handle_inline_attribute_on_fndecl (fndecl, attr);\n@@ -82,6 +86,10 @@ HIRCompileBase::setup_fndecl (tree fndecl, bool is_main_entry_point,\n \t{\n \t  handle_link_section_attribute_on_fndecl (fndecl, attr);\n \t}\n+      else if (is_deprecated)\n+\t{\n+\t  handle_deprecated_attribute_on_fndecl (fndecl, attr);\n+\t}\n       else if (no_mangle)\n \t{\n \t  handle_no_mangle_attribute_on_fndecl (fndecl, attr);\n@@ -147,6 +155,69 @@ HIRCompileBase::handle_no_mangle_attribute_on_fndecl (\n \t\t\t\t\tDECL_ATTRIBUTES (fndecl));\n }\n \n+void\n+HIRCompileBase::handle_deprecated_attribute_on_fndecl (\n+  tree fndecl, const AST::Attribute &attr)\n+{\n+  tree value = NULL_TREE;\n+  TREE_DEPRECATED (fndecl) = 1;\n+\n+  // simple #[deprecated]\n+  if (!attr.has_attr_input ())\n+    return;\n+\n+  const AST::AttrInput &input = attr.get_attr_input ();\n+  auto input_type = input.get_attr_input_type ();\n+\n+  if (input_type == AST::AttrInput::AttrInputType::LITERAL)\n+    {\n+      // handle #[deprecated = \"message\"]\n+      auto &literal\n+\t= static_cast<AST::AttrInputLiteral &> (attr.get_attr_input ());\n+      const auto &msg_str = literal.get_literal ().as_string ();\n+      value = build_string (msg_str.size (), msg_str.c_str ());\n+    }\n+  else if (input_type == AST::AttrInput::AttrInputType::TOKEN_TREE)\n+    {\n+      // handle #[deprecated(since = \"...\", note = \"...\")]\n+      const auto &option = static_cast<const AST::DelimTokenTree &> (input);\n+      AST::AttrInputMetaItemContainer *meta_item = option.parse_to_meta_item ();\n+      for (const auto &item : meta_item->get_items ())\n+\t{\n+\t  auto converted_item = item->to_meta_name_value_str ();\n+\t  if (!converted_item)\n+\t    continue;\n+\t  auto key_value = converted_item->get_name_value_pair ();\n+\t  if (key_value.first.compare (\"since\") == 0)\n+\t    {\n+\t      // valid, but this is handled by Cargo and some third-party audit\n+\t      // tools\n+\t      continue;\n+\t    }\n+\t  else if (key_value.first.compare (\"note\") == 0)\n+\t    {\n+\t      const auto &msg_str = key_value.second;\n+\t      if (value)\n+\t\trust_error_at (attr.get_locus (), \"multiple %<note%> items\");\n+\t      value = build_string (msg_str.size (), msg_str.c_str ());\n+\t    }\n+\t  else\n+\t    {\n+\t      rust_error_at (attr.get_locus (), \"unknown meta item %qs\",\n+\t\t\t     key_value.first.c_str ());\n+\t    }\n+\t}\n+    }\n+\n+  if (value)\n+    {\n+      tree attr_list = build_tree_list (NULL_TREE, value);\n+      DECL_ATTRIBUTES (fndecl)\n+\t= tree_cons (get_identifier (\"deprecated\"), attr_list,\n+\t\t     DECL_ATTRIBUTES (fndecl));\n+    }\n+}\n+\n void\n HIRCompileBase::handle_inline_attribute_on_fndecl (tree fndecl,\n \t\t\t\t\t\t   const AST::Attribute &attr)"}, {"sha": "f993d06cb33c52e24dbc3e12c1d54df9909dde50", "filename": "gcc/rust/backend/rust-compile-base.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81abc8623cb75fa18315c65e94c5965ec36fdb54/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81abc8623cb75fa18315c65e94c5965ec36fdb54/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.h?ref=81abc8623cb75fa18315c65e94c5965ec36fdb54", "patch": "@@ -92,6 +92,9 @@ class HIRCompileBase\n   static void\n   handle_link_section_attribute_on_fndecl (tree fndecl,\n \t\t\t\t\t   const AST::Attribute &attr);\n+  static void\n+  handle_deprecated_attribute_on_fndecl (tree fndecl,\n+\t\t\t\t\t const AST::Attribute &attr);\n \n   static void handle_no_mangle_attribute_on_fndecl (tree fndecl,\n \t\t\t\t\t\t    const AST::Attribute &attr);"}, {"sha": "4d202078a70ee7bc1a9ee1826a1ee51190122240", "filename": "gcc/rust/backend/rust-mangle.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81abc8623cb75fa18315c65e94c5965ec36fdb54/gcc%2Frust%2Fbackend%2Frust-mangle.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81abc8623cb75fa18315c65e94c5965ec36fdb54/gcc%2Frust%2Fbackend%2Frust-mangle.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-mangle.cc?ref=81abc8623cb75fa18315c65e94c5965ec36fdb54", "patch": "@@ -14,6 +14,7 @@ static const std::string kMangledPtr = \"$BP$\";\n static const std::string kMangledLeftSqParen = \"$u5b$\";\t // [\n static const std::string kMangledRightSqParen = \"$u5d$\"; // ]\n static const std::string kQualPathBegin = \"_\" + kMangledSubstBegin;\n+static const std::string kMangledComma = \"$C$\";\n \n namespace Rust {\n namespace Compile {\n@@ -39,6 +40,9 @@ legacy_mangle_name (const std::string &name)\n   //\n   // example::Foo<T>::new:\n   // _ZN7example12Foo$LT$T$GT$3new17h9a2aacb7fd783515E:\n+  //\n+  // <example::Identity as example::FnLike<&T,&T>>::call\n+  // _ZN74_$LT$example..Identity$u20$as$u20$example..FnLike$LT$$RF$T$C$$RF$T$GT$$GT$4call17ha9ee58935895acb3E\n \n   std::string buffer;\n   for (size_t i = 0; i < name.size (); i++)\n@@ -62,6 +66,8 @@ legacy_mangle_name (const std::string &name)\n \tm = kMangledLeftSqParen;\n       else if (c == ']')\n \tm = kMangledRightSqParen;\n+      else if (c == ',')\n+\tm = kMangledComma;\n       else if (c == ':')\n \t{\n \t  rust_assert (i + 1 < name.size ());"}, {"sha": "a823543e18d9c1bb304f485fdc93a8cbfbffa08c", "filename": "gcc/rust/resolve/rust-ast-resolve-type.cc", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81abc8623cb75fa18315c65e94c5965ec36fdb54/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81abc8623cb75fa18315c65e94c5965ec36fdb54/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc?ref=81abc8623cb75fa18315c65e94c5965ec36fdb54", "patch": "@@ -356,7 +356,52 @@ ResolveTypeToCanonicalPath::visit (AST::TypePath &path)\n   if (mappings->lookup_canonical_path (mappings->get_current_crate (),\n \t\t\t\t       resolved_node, &type_path))\n     {\n-      result = *type_path;\n+      auto &final_seg = path.get_segments ().back ();\n+      switch (final_seg->get_type ())\n+\t{\n+\t  case AST::TypePathSegment::SegmentType::GENERIC: {\n+\t    AST::TypePathSegmentGeneric *s\n+\t      = static_cast<AST::TypePathSegmentGeneric *> (final_seg.get ());\n+\n+\t    std::vector<CanonicalPath> args;\n+\t    if (s->has_generic_args ())\n+\t      {\n+\t\tfor (auto &gt : s->get_generic_args ().get_type_args ())\n+\t\t  {\n+\t\t    CanonicalPath arg = CanonicalPath::create_empty ();\n+\t\t    bool ok = ResolveTypeToCanonicalPath::go (gt.get (), arg);\n+\t\t    if (ok)\n+\t\t      args.push_back (std::move (arg));\n+\t\t  }\n+\t      }\n+\n+\t    result = *type_path;\n+\t    if (!args.empty ())\n+\t      {\n+\t\t// append this onto the path\n+\t\tstd::string buf;\n+\t\tfor (size_t i = 0; i < args.size (); i++)\n+\t\t  {\n+\t\t    bool has_next = (i + 1) < args.size ();\n+\t\t    const auto &arg = args.at (i);\n+\n+\t\t    buf += arg.get ();\n+\t\t    if (has_next)\n+\t\t      buf += \", \";\n+\t\t  }\n+\n+\t\tstd::string arg_seg = \"<\" + buf + \">\";\n+\t\tCanonicalPath argument_seg\n+\t\t  = CanonicalPath::new_seg (s->get_node_id (), arg_seg);\n+\t\tresult = result.append (argument_seg);\n+\t      }\n+\t  }\n+\t  break;\n+\n+\tdefault:\n+\t  result = *type_path;\n+\t  break;\n+\t}\n     }\n }\n "}, {"sha": "4fea6fbd7fca3f24561718418c510cf92ce2157e", "filename": "gcc/rust/rust-gcc.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81abc8623cb75fa18315c65e94c5965ec36fdb54/gcc%2Frust%2Frust-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81abc8623cb75fa18315c65e94c5965ec36fdb54/gcc%2Frust%2Frust-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-gcc.cc?ref=81abc8623cb75fa18315c65e94c5965ec36fdb54", "patch": "@@ -51,6 +51,8 @@\n #include \"rust-backend.h\"\n #include \"rust-object-export.h\"\n \n+#include \"backend/rust-tree.h\"\n+\n // TODO: this will have to be significantly modified to work with Rust\n \n // Bvariable is a bit more complicated, because of zero-sized types.\n@@ -1852,6 +1854,14 @@ Gcc_backend::call_expression (tree fn, const std::vector<tree> &fn_args,\n \t\t\t    excess_type != NULL_TREE ? excess_type : rettype,\n \t\t\t    fn, nargs, args);\n \n+  // check for deprecated function usage\n+  if (fndecl && TREE_DEPRECATED (fndecl))\n+    {\n+      // set up the call-site information for `warn_deprecated_use`\n+      input_location = location.gcc_location ();\n+      warn_deprecated_use (fndecl, NULL_TREE);\n+    }\n+\n   if (chain_expr)\n     CALL_EXPR_STATIC_CHAIN (ret) = chain_expr;\n "}, {"sha": "870ca21f87cbe542be915b66c28e962128127088", "filename": "gcc/rust/util/rust-attributes.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81abc8623cb75fa18315c65e94c5965ec36fdb54/gcc%2Frust%2Futil%2Frust-attributes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81abc8623cb75fa18315c65e94c5965ec36fdb54/gcc%2Frust%2Futil%2Frust-attributes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-attributes.cc?ref=81abc8623cb75fa18315c65e94c5965ec36fdb54", "patch": "@@ -27,6 +27,7 @@ static const BuiltinAttrDefinition __definitions[] = {\n   {\"cold\", CODE_GENERATION},\n   {\"cfg\", EXPANSION},\n   {\"cfg_attr\", EXPANSION},\n+  {\"deprecated\", STATIC_ANALYSIS},\n   {\"allow\", STATIC_ANALYSIS},\n   {\"doc\", HIR_LOWERING},\n   {\"must_use\", STATIC_ANALYSIS},"}, {"sha": "01bc9c415022976eab2dad4ad698f5416563f4c6", "filename": "gcc/testsuite/rust/compile/attr_deprecated.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81abc8623cb75fa18315c65e94c5965ec36fdb54/gcc%2Ftestsuite%2Frust%2Fcompile%2Fattr_deprecated.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81abc8623cb75fa18315c65e94c5965ec36fdb54/gcc%2Ftestsuite%2Frust%2Fcompile%2Fattr_deprecated.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fattr_deprecated.rs?ref=81abc8623cb75fa18315c65e94c5965ec36fdb54", "patch": "@@ -0,0 +1,14 @@\n+#[deprecated(since=\"1.0\", note=\"do not use this function\")]\n+fn test1() {}\n+\n+#[deprecated]\n+fn test() {}\n+\n+#[deprecated = \"a different message\"]\n+fn test2() {}\n+\n+fn main() {\n+    test(); // { dg-warning \".attr_deprecated::test. is deprecated\" }\n+    test1(); // { dg-warning \".attr_deprecated::test1. is deprecated: do not use this function\" }\n+    test2(); // { dg-warning \".attr_deprecated::test2. is deprecated: a different message\" }\n+}"}, {"sha": "66f4ce3b076b6c9a236f23e4bbcceb0b07c37282", "filename": "gcc/testsuite/rust/compile/attr_deprecated_2.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81abc8623cb75fa18315c65e94c5965ec36fdb54/gcc%2Ftestsuite%2Frust%2Fcompile%2Fattr_deprecated_2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81abc8623cb75fa18315c65e94c5965ec36fdb54/gcc%2Ftestsuite%2Frust%2Fcompile%2Fattr_deprecated_2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fattr_deprecated_2.rs?ref=81abc8623cb75fa18315c65e94c5965ec36fdb54", "patch": "@@ -0,0 +1,11 @@\n+#[deprecated(since=\"1.0\")]\n+fn test1() {}\n+\n+// { dg-excess-errors \"unknown meta item ....\" }\n+#[deprecated(invalid=\"invalid\")]\n+fn test2() {}\n+\n+fn main() {\n+    test1(); // { dg-warning \".attr_deprecated_2::test1. is deprecated\" }\n+    test2();\n+}"}]}