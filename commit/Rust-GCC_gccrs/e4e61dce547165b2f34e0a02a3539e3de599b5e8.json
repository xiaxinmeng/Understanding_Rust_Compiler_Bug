{"sha": "e4e61dce547165b2f34e0a02a3539e3de599b5e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRlNjFkY2U1NDcxNjViMmYzNGUwYTAyYTM1MzllM2RlNTk5YjVlOA==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2013-07-05T09:51:55Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-07-05T09:51:55Z"}, "message": "gnat_rm.texi: Add missing doc for various pragmas.\n\n2013-07-05  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_rm.texi: Add missing doc for various pragmas.\n\nFrom-SVN: r200696", "tree": {"sha": "f9c2bb701ee34086d70c71cc0de965436242424b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9c2bb701ee34086d70c71cc0de965436242424b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4e61dce547165b2f34e0a02a3539e3de599b5e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4e61dce547165b2f34e0a02a3539e3de599b5e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4e61dce547165b2f34e0a02a3539e3de599b5e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4e61dce547165b2f34e0a02a3539e3de599b5e8/comments", "author": null, "committer": null, "parents": [{"sha": "bbf1aec2f2fe43f4afd7afe413b9953f0dc458f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbf1aec2f2fe43f4afd7afe413b9953f0dc458f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbf1aec2f2fe43f4afd7afe413b9953f0dc458f8"}], "stats": {"total": 261, "additions": 210, "deletions": 51}, "files": [{"sha": "26d7be15e6900a01e44fa76649af6e4068543bd1", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4e61dce547165b2f34e0a02a3539e3de599b5e8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4e61dce547165b2f34e0a02a3539e3de599b5e8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e4e61dce547165b2f34e0a02a3539e3de599b5e8", "patch": "@@ -1,3 +1,7 @@\n+2013-07-05  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_rm.texi: Add missing doc for various pragmas.\n+\n 2013-07-05  Robert Dewar  <dewar@adacore.com>\n \n \t* par_sco.adb, sem_ch12.adb, par-ch5.adb: Minor reformatting."}, {"sha": "11d81862beeb34fa39870c8d3456e6a8e9e4b292", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 206, "deletions": 51, "changes": 257, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4e61dce547165b2f34e0a02a3539e3de599b5e8/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4e61dce547165b2f34e0a02a3539e3de599b5e8/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=e4e61dce547165b2f34e0a02a3539e3de599b5e8", "patch": "@@ -202,14 +202,20 @@ Implementation Defined Pragmas\n * Pragma Postcondition::\n * Pragma Precondition::\n * Pragma Preelaborable_Initialization::\n+* Pragma Preelaborate_05::\n * Pragma Priority_Specific_Dispatching::\n * Pragma Profile::\n * Pragma Profile_Warnings::\n * Pragma Psect_Object::\n+* Pragma Pure_05::\n+* Pragma Pure_12::\n * Pragma Pure_Function::\n+* Pragma Ravenscar::\n * Pragma Relative_Deadline::\n * Pragma Remote_Access_Type::\n+* Pragma Restricted_Run_Time::\n * Pragma Restriction_Warnings::\n+* Pragma Share_Generic::\n * Pragma Shared::\n * Pragma Short_Circuit_And_Or::\n * Pragma Short_Descriptors::\n@@ -223,6 +229,7 @@ Implementation Defined Pragmas\n * Pragma Subtitle::\n * Pragma Suppress::\n * Pragma Suppress_All::\n+* Pragma Suppress_Debug_Info::\n * Pragma Suppress_Exception_Locations::\n * Pragma Suppress_Initialization::\n * Pragma Task_Info::\n@@ -999,14 +1006,20 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Postcondition::\n * Pragma Precondition::\n * Pragma Preelaborable_Initialization::\n+* Pragma Preelaborate_05::\n * Pragma Priority_Specific_Dispatching::\n * Pragma Profile::\n * Pragma Profile_Warnings::\n * Pragma Psect_Object::\n+* Pragma Pure_05::\n+* Pragma Pure_12::\n * Pragma Pure_Function::\n+* Pragma Ravenscar::\n * Pragma Relative_Deadline::\n * Pragma Remote_Access_Type::\n+* Pragma Restricted_Run_Time::\n * Pragma Restriction_Warnings::\n+* Pragma Share_Generic::\n * Pragma Shared::\n * Pragma Short_Circuit_And_Or::\n * Pragma Short_Descriptors::\n@@ -1020,6 +1033,7 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Subtitle::\n * Pragma Suppress::\n * Pragma Suppress_All::\n+* Pragma Suppress_Debug_Info::\n * Pragma Suppress_Exception_Locations::\n * Pragma Suppress_Initialization::\n * Pragma Task_Info::\n@@ -2200,8 +2214,12 @@ that is, they never return an object whose type is a descendant of type T.\n @cindex Interfacing to C++\n @findex CPP_Virtual\n @noindent\n-This pragma is now obsolete has has no effect because GNAT generates\n-the same object layout than the G++ compiler.\n+This pragma is now obsolete and, other than generating a warning if warnings\n+on obsolescent features are enabled, is completely ignored.\n+It is retained for compatibility\n+purposes. It used to be required to ensure compoatibility with C++, but\n+is no longer required for that purpose because GNAT generates\n+the same object layout as the G++ compiler by default.\n \n See @ref{Interfacing to C++} for related information.\n \n@@ -2210,8 +2228,11 @@ See @ref{Interfacing to C++} for related information.\n @cindex Interfacing with C++\n @findex CPP_Vtable\n @noindent\n-This pragma is now obsolete has has no effect because GNAT generates\n-the same object layout than the G++ compiler.\n+This pragma is now obsolete and, other than generating a warning if warnings\n+on obsolescent features are enabled, is completely ignored.\n+It used to be required to ensure compatibility with C++, but\n+is no longer required for that purpose because GNAT generates\n+the same object layout than the G++ compiler by default.\n \n See @ref{Interfacing to C++} for related information.\n \n@@ -3536,13 +3557,16 @@ happens regardless of whether these options are used.\n Syntax:\n \n @smallexample @c ada\n-pragma Inline_Generic (generic_package_NAME);\n+pragma Inline_Generic (GNAME @{, GNAME@});\n+\n+GNAME ::= generic_unit_NAME | generic_instance_NAME\n @end smallexample\n \n @noindent\n-This is implemented for compatibility with DEC Ada 83 and is recognized,\n-but otherwise ignored, by GNAT@.  All generic instantiations are inlined\n-by default when using GNAT@.\n+This pragma is provided for compatibility with Dec Ada 83. It has\n+no effect in @code{GNAT} (which always inlines generics), other\n+than to check that the given names are all names of generic units or\n+generic instances.\n \n @node Pragma Interface\n @unnumberedsec Pragma Interface\n@@ -4038,9 +4062,9 @@ this pragma, the standard runtime libraries must be recompiled.\n @findex Loop_Invariant\n @noindent\n Syntax:\n+\n @smallexample @c ada\n pragma Loop_Invariant ( boolean_EXPRESSION );\n-\n @end smallexample\n \n @noindent\n@@ -4830,7 +4854,7 @@ details.\n \n @node Pragma Postcondition\n @unnumberedsec Pragma Postcondition\n-@cindex Postconditions\n+@cindex Postcondition\n @cindex Checks, postconditions\n @findex Postconditions\n @noindent\n@@ -4985,45 +5009,6 @@ inlining (-gnatN option set) are accepted and legality-checked\n by the compiler, but are ignored at run-time even if postcondition\n checking is enabled.\n \n-@node Pragma Preelaborable_Initialization\n-@unnumberedsec Pragma Preelaborable_Initialization\n-@findex Preelaborable_Initialization\n-@noindent\n-Syntax:\n-\n-@smallexample @c ada\n-pragma Preelaborable_Initialization (DIRECT_NAME);\n-@end smallexample\n-\n-@noindent\n-This pragma is standard in Ada 2005, but is available in all earlier\n-versions of Ada as an implementation-defined pragma.\n-See Ada 2012 Reference Manual for details.\n-\n-@node Pragma Priority_Specific_Dispatching\n-@unnumberedsec Pragma Priority_Specific_Dispatching\n-@findex Priority_Specific_Dispatching\n-@noindent\n-Syntax:\n-\n-@smallexample @c ada\n-pragma Priority_Specific_Dispatching (\n-   POLICY_IDENTIFIER,\n-   first_priority_EXPRESSION,\n-   last_priority_EXPRESSION)\n-\n-POLICY_IDENTIFIER ::=\n-   EDF_Across_Priorities            |\n-   FIFO_Within_Priorities           |\n-   Non_Preemptive_Within_Priorities |\n-   Round_Robin_Within_Priorities\n-@end smallexample\n-\n-@noindent\n-This pragma is standard in Ada 2005, but is available in all earlier\n-versions of Ada as an implementation-defined pragma.\n-See Ada 2012 Reference Manual for details.\n-\n @node Pragma Precondition\n @unnumberedsec Pragma Precondition\n @cindex Preconditions\n@@ -5066,12 +5051,69 @@ declarations of a subprogram body. Only other pragmas may intervene\n postconditions, or appear before the postcondition in the\n declaration sequence in a subprogram body).\n \n-Note: postcondition pragmas associated with subprograms that are\n+Note: precondition pragmas associated with subprograms that are\n marked as Inline_Always, or those marked as Inline with front-end\n inlining (-gnatN option set) are accepted and legality-checked\n-by the compiler, but are ignored at run-time even if postcondition\n+by the compiler, but are ignored at run-time even if precondition\n checking is enabled.\n \n+@node Pragma Preelaborable_Initialization\n+@unnumberedsec Pragma Preelaborable_Initialization\n+@findex Preelaborable_Initialization\n+@noindent\n+Syntax:\n+\n+@smallexample @c ada\n+pragma Preelaborable_Initialization (DIRECT_NAME);\n+@end smallexample\n+\n+@noindent\n+This pragma is standard in Ada 2005, but is available in all earlier\n+versions of Ada as an implementation-defined pragma.\n+See Ada 2012 Reference Manual for details.\n+\n+@node Pragma Preelaborate_05\n+@unnumberedsec Pragma Preelaborate_05\n+@findex Preelaborate_05\n+@noindent\n+Syntax:\n+\n+@smallexample @c ada\n+pragma Preelaborate_05 [(library_unit_NAME)];\n+@end smallexample\n+\n+@noindent\n+This pragma is only available in GNAT mode (@option{-gnatg} switch set)\n+and is intended for use in the standard run-time library only. It has\n+no effect in Ada 83 or Ada 95 mode, but is\n+equivalent to @code{pragma Prelaborate} when operating in later\n+Ada versions. This is used to handle some cases where packages\n+not previously preelaborable became so in Ada 2005.\n+\n+@node Pragma Priority_Specific_Dispatching\n+@unnumberedsec Pragma Priority_Specific_Dispatching\n+@findex Priority_Specific_Dispatching\n+@noindent\n+Syntax:\n+\n+@smallexample @c ada\n+pragma Priority_Specific_Dispatching (\n+   POLICY_IDENTIFIER,\n+   first_priority_EXPRESSION,\n+   last_priority_EXPRESSION)\n+\n+POLICY_IDENTIFIER ::=\n+   EDF_Across_Priorities            |\n+   FIFO_Within_Priorities           |\n+   Non_Preemptive_Within_Priorities |\n+   Round_Robin_Within_Priorities\n+@end smallexample\n+\n+@noindent\n+This pragma is standard in Ada 2005, but is available in all earlier\n+versions of Ada as an implementation-defined pragma.\n+See Ada 2012 Reference Manual for details.\n+\n @node Pragma Profile\n @unnumberedsec Pragma Profile\n @findex Profile\n@@ -5267,6 +5309,42 @@ EXTERNAL_SYMBOL ::=\n @noindent\n This pragma is identical in effect to pragma @code{Common_Object}.\n \n+@node Pragma Pure_05\n+@unnumberedsec Pragma Pure_05\n+@findex Pure_05\n+@noindent\n+Syntax:\n+\n+@smallexample @c ada\n+pragma Pure_05 [(library_unit_NAME)];\n+@end smallexample\n+\n+@noindent\n+This pragma is only available in GNAT mode (@option{-gnatg} switch set)\n+and is intended for use in the standard run-time library only. It has\n+no effect in Ada 83 or Ada 95 mode, but is\n+equivalent to @code{pragma Pure} when operating in later\n+Ada versions. This is used to handle some cases where packages\n+not previously pure became so in Ada 2005.\n+\n+@node Pragma Pure_12\n+@unnumberedsec Pragma Pure_12\n+@findex Pure_12\n+@noindent\n+Syntax:\n+\n+@smallexample @c ada\n+pragma Pure_12 [(library_unit_NAME)];\n+@end smallexample\n+\n+@noindent\n+This pragma is only available in GNAT mode (@option{-gnatg} switch set)\n+and is intended for use in the standard run-time library only. It has\n+no effect in Ada 83, Ada 95, or Ada 2005 modes, but is\n+equivalent to @code{pragma Pure} when operating in later\n+Ada versions. This is used to handle some cases where packages\n+not previously pure became so in Ada 2012.\n+\n @node Pragma Pure_Function\n @unnumberedsec Pragma Pure_Function\n @findex Pure_Function\n@@ -5330,6 +5408,27 @@ function is also considered pure from an optimization point of view, but the\n unit is not a Pure unit in the categorization sense. So for example, a function\n thus marked is free to @code{with} non-pure units.\n \n+@node Pragma Ravenscar\n+@unnumberedsec Pragma Ravenscar\n+@findex Pragma Ravenscar\n+@noindent\n+Syntax:\n+\n+@smallexample @c ada\n+pragma Ravenscar;\n+@end smallexample\n+\n+@noindent\n+This pragma is considered obsolescent, but is retained for\n+compatibility purposes. It is equivalent to:\n+\n+@smallexample @c ada\n+pragma Profile (Ravenscar);\n+@end smallexample\n+\n+@noindent\n+which is the preferred method of setting the @code{Ravenscar} profile.\n+\n @node Pragma Relative_Deadline\n @unnumberedsec Pragma Relative_Deadline\n @findex Relative_Deadline\n@@ -5371,6 +5470,28 @@ In the generic unit, the formal type is subject to all restrictions\n pertaining to remote access to class-wide types. At instantiation, the\n actual type must be a remote access to class-wide type.\n \n+@node Pragma Restricted_Run_Time\n+@unnumberedsec Pragma Restricted_Run_Time\n+@findex Pragma Restricted_Run_Time\n+@noindent\n+Syntax:\n+\n+@smallexample @c ada\n+pragma Restricted_Run_Time;\n+@end smallexample\n+\n+@noindent\n+This pragma is considered obsolescent, but is retained for\n+compatibility purposes. It is equivalent to:\n+\n+@smallexample @c ada\n+pragma Profile (Restricted);\n+@end smallexample\n+\n+@noindent\n+which is the preferred method of setting the restricted run time\n+profile.\n+\n @node Pragma Restriction_Warnings\n @unnumberedsec Pragma Restriction_Warnings\n @findex Restriction_Warnings\n@@ -5390,6 +5511,24 @@ the compiler checks for violations of the restriction, but\n generates a warning message rather than an error message\n if the restriction is violated.\n \n+@node Pragma Share_Generic\n+@unnumberedsec Pragma Share_Generic\n+@findex Share_Generic\n+@noindent\n+Syntax:\n+\n+@smallexample @c ada\n+pragma Share_Generic (GNAME @{, GNAME@});\n+\n+GNAME ::= generic_unit_NAME | generic_instance_NAME\n+@end smallexample\n+\n+@noindent\n+This pragma is provided for compatibility with Dec Ada 83. It has\n+no effect in @code{GNAT} (which does not implement shared generics), other\n+than to check that the given names are all names of generic units or\n+generic instances.\n+\n @node Pragma Shared\n @unnumberedsec Pragma Shared\n @findex Shared\n@@ -5906,6 +6045,21 @@ with Rational Ada, where it appears as a program unit pragma.\n The use of the standard Ada pragma @code{Suppress (All_Checks)}\n as a normal configuration pragma is the preferred usage in GNAT@.\n \n+@node Pragma Suppress_Debug_Info\n+@unnumberedsec Pragma Suppress_Debug_Info\n+@findex Suppress_Debug_Info\n+@noindent\n+Syntax:\n+\n+@smallexample @c ada\n+Suppress_Debug_Info ([Entity =>] LOCAL_NAME);\n+@end smallexample\n+\n+@noindent\n+This pragma can be used to suppress generation of debug information\n+for the specified entity. It is intended primarily for use in debugging\n+the debugger, and navigating around debugger problems.\n+\n @node Pragma Suppress_Exception_Locations\n @unnumberedsec Pragma Suppress_Exception_Locations\n @findex Suppress_Exception_Locations\n@@ -20451,3 +20605,4 @@ this kind of implementation dependent addition.\n \n @bye\n tablishes the following set of restrictions:\n+Pragma Shared"}]}