{"sha": "c86ee18adc5f021703d4f5814ebbbfe59395274f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg2ZWUxOGFkYzVmMDIxNzAzZDRmNTgxNGViYmJmZTU5Mzk1Mjc0Zg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-08T10:13:14Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-08T10:13:14Z"}, "message": "[multiple changes]\n\n2010-10-08  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_util.adb, sem_prag.adb: Minor reformatting\n\n2010-10-08  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* gnat_rm.texi: Remove the section on pragma Implemented_By_Entry.\n\tAdd section on pragma Implemented.\n\n2010-10-08  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Derive_Subprogram): If an abstract extension has a\n\tconcrete parent with a concrete constructor, the inherited constructor\n\tis abstract even if the derived type is a null extension.\n\nFrom-SVN: r165155", "tree": {"sha": "1b7c4c75726a13e7fbea21124d3e703023630543", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b7c4c75726a13e7fbea21124d3e703023630543"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c86ee18adc5f021703d4f5814ebbbfe59395274f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c86ee18adc5f021703d4f5814ebbbfe59395274f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c86ee18adc5f021703d4f5814ebbbfe59395274f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c86ee18adc5f021703d4f5814ebbbfe59395274f/comments", "author": null, "committer": null, "parents": [{"sha": "bfae1846ce6fb95a064520e4560fbd191abd2f04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfae1846ce6fb95a064520e4560fbd191abd2f04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfae1846ce6fb95a064520e4560fbd191abd2f04"}], "stats": {"total": 89, "additions": 62, "deletions": 27}, "files": [{"sha": "9f90c6e67cfd8c206e603c44d7c978fb0588740b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c86ee18adc5f021703d4f5814ebbbfe59395274f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c86ee18adc5f021703d4f5814ebbbfe59395274f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c86ee18adc5f021703d4f5814ebbbfe59395274f", "patch": "@@ -1,3 +1,18 @@\n+2010-10-08  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_util.adb, sem_prag.adb: Minor reformatting\n+\n+2010-10-08  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* gnat_rm.texi: Remove the section on pragma Implemented_By_Entry.\n+\tAdd section on pragma Implemented.\n+\n+2010-10-08  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Derive_Subprogram): If an abstract extension has a\n+\tconcrete parent with a concrete constructor, the inherited constructor\n+\tis abstract even if the derived type is a null extension.\n+\n 2010-10-08  Thomas Quinot  <quinot@adacore.com>\n \n \t* sem_ch4.adb: Minor reformatting."}, {"sha": "77f27c7f62ec54f65ef662dd4f99bec8ec2a2c91", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 33, "deletions": 23, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c86ee18adc5f021703d4f5814ebbbfe59395274f/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c86ee18adc5f021703d4f5814ebbbfe59395274f/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=c86ee18adc5f021703d4f5814ebbbfe59395274f", "patch": "@@ -142,7 +142,7 @@ Implementation Defined Pragmas\n * Pragma Finalize_Storage_Only::\n * Pragma Float_Representation::\n * Pragma Ident::\n-* Pragma Implemented_By_Entry::\n+* Pragma Implemented::\n * Pragma Implicit_Packing::\n * Pragma Import_Exception::\n * Pragma Import_Function::\n@@ -760,7 +760,7 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Finalize_Storage_Only::\n * Pragma Float_Representation::\n * Pragma Ident::\n-* Pragma Implemented_By_Entry::\n+* Pragma Implemented::\n * Pragma Implicit_Packing::\n * Pragma Import_Exception::\n * Pragma Import_Function::\n@@ -2474,41 +2474,51 @@ maximum allowed length is 31 characters, so if it is important to\n maintain compatibility with this compiler, you should obey this length\n limit.\n \n-@node Pragma Implemented_By_Entry\n-@unnumberedsec Pragma Implemented_By_Entry\n-@findex Implemented_By_Entry\n+@node Pragma Implemented\n+@unnumberedsec Pragma Implemented\n+@findex Implemented\n @noindent\n Syntax:\n \n @smallexample @c ada\n-pragma Implemented_By_Entry (LOCAL_NAME);\n+pragma Implemented (procedure_LOCAL_NAME, implementation_kind);\n+\n+implementation_kind ::= By_Entry | By_Protected_Procedure | By_Any\n @end smallexample\n \n @noindent\n-This is a representation pragma which applies to protected, synchronized and\n-task interface primitives. If the pragma is applied to primitive operation Op\n-of interface Iface, it is illegal to override Op in a type that implements\n-Iface, with anything other than an entry.\n+This is an Ada 2012 representation pragma which applies to protected, task\n+and synchronized interface primitives. The use of pragma Implemented provides\n+a way to impose a static requirement on the overriding opreration by adhering\n+to one of the three implementation kids: entry, protected procedure or any of\n+the above.\n \n @smallexample @c ada\n-type Iface is protected interface;\n-procedure Do_Something (Object : in out Iface) is abstract;\n-pragma Implemented_By_Entry (Do_Something);\n+type Synch_Iface is synchronized interface;\n+procedure Prim_Op (Obj : in out Iface) is abstract;\n+pragma Implemented (Prim_Op, By_Protected_Procedure);\n \n-protected type P is new Iface with\n-   procedure Do_Something;  --  Illegal\n-end P;\n+protected type Prot_1 is new Synch_Iface with\n+   procedure Prim_Op;  --  Legal\n+end Prot_1;\n \n-task type T is new Iface with\n-   entry Do_Something;      --  Legal\n-end T;\n+protected type Prot_2 is new Synch_Iface with\n+   entry Prim_Op;      --  Illegal\n+end Prot_2;\n+\n+task type Task_Typ is new Synch_Iface with\n+   entry Prim_Op;      --  Illegal\n+end Task_Typ;\n @end smallexample\n \n @noindent\n-NOTE: The pragma is still in its design stage by the Ada Rapporteur Group. It\n-is intended to be used in conjunction with dispatching requeue statements as\n-described in AI05-0030. Should the ARG decide on an official name and syntax,\n-this pragma will become language-defined rather than GNAT-specific.\n+When applied to the procedure_or_entry_NAME of a requeue statement, pragma\n+Implemented determines the runtime behavior of the requeue. Implementation kind\n+By_Entry guarantees that the action of requeueing will procede from an entry to\n+another entry. Implementation kind By_Protected_Procedure transforms the\n+requeue into a dispatching call, thus eliminating the chance of blocking. Kind\n+By_Any shares the behavior of By_Entry and By_Protected_Procedure depending on\n+the target's overriding subprogram kind.\n \n @node Pragma Implicit_Packing\n @unnumberedsec Pragma Implicit_Packing"}, {"sha": "fcb7f6d2ab158a19cc179ef5c8c85dc161fb69fb", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c86ee18adc5f021703d4f5814ebbbfe59395274f/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c86ee18adc5f021703d4f5814ebbbfe59395274f/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=c86ee18adc5f021703d4f5814ebbbfe59395274f", "patch": "@@ -12601,6 +12601,9 @@ package body Sem_Ch3 is\n       if Ekind (Parent_Subp) = E_Procedure then\n          Set_Is_Valued_Procedure\n            (New_Subp, Is_Valued_Procedure (Parent_Subp));\n+      else\n+         Set_Has_Controlling_Result\n+           (New_Subp, Has_Controlling_Result (Parent_Subp));\n       end if;\n \n       --  No_Return must be inherited properly. If this is overridden in the\n@@ -12654,6 +12657,15 @@ package body Sem_Ch3 is\n       then\n          Set_Is_Abstract_Subprogram (New_Subp);\n \n+      --  AI05-0097 : an inherited operation that dispatches on result is\n+      --  abstract if the derived type is abstract, even if the parent type\n+      --  is concrete and the derived type is a null extension.\n+\n+      elsif Has_Controlling_Result (Alias (New_Subp))\n+        and then Is_Abstract_Type (Etype (New_Subp))\n+      then\n+         Set_Is_Abstract_Subprogram (New_Subp);\n+\n       --  Finally, if the parent type is abstract we must verify that all\n       --  inherited operations are either non-abstract or overridden, or that\n       --  the derived type itself is abstract (this check is performed at the"}, {"sha": "c361161b8ee0f76b26deb5397b35b89caef90e23", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c86ee18adc5f021703d4f5814ebbbfe59395274f/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c86ee18adc5f021703d4f5814ebbbfe59395274f/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=c86ee18adc5f021703d4f5814ebbbfe59395274f", "patch": "@@ -8074,8 +8074,8 @@ package body Sem_Prag is\n                return;\n             end if;\n \n-            --  Ada 2012 (AI05-0030): Implementation_kind \"By_Protected_\n-            --  Procedure\" cannot be applied to the primitive procedure of a\n+            --  Ada 2012 (AI05-0030): Cannot apply the Implementation_kind\n+            --  \"By_Protected_Procedure\" to the primitive procedure of a\n             --  task interface.\n \n             if Chars (Arg2) = Name_By_Protected_Procedure"}, {"sha": "c1d3fb411d76c4f6b5baf5c3664bdaf3c3e74f2d", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c86ee18adc5f021703d4f5814ebbbfe59395274f/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c86ee18adc5f021703d4f5814ebbbfe59395274f/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=c86ee18adc5f021703d4f5814ebbbfe59395274f", "patch": "@@ -5243,10 +5243,8 @@ package body Sem_Util is\n \n    function Implementation_Kind (Subp : Entity_Id) return Name_Id is\n       Impl_Prag : constant Node_Id := Get_Rep_Pragma (Subp, Name_Implemented);\n-\n    begin\n       pragma Assert (Present (Impl_Prag));\n-\n       return\n         Chars (Expression (Last (Pragma_Argument_Associations (Impl_Prag))));\n    end Implementation_Kind;"}]}