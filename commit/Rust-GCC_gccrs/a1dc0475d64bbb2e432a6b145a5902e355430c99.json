{"sha": "a1dc0475d64bbb2e432a6b145a5902e355430c99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFkYzA0NzVkNjRiYmIyZTQzMmE2YjE0NWE1OTAyZTM1NTQzMGM5OQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "erich@gnu.org", "date": "1994-06-01T08:53:42Z"}, "committer": {"name": "Richard Earnshaw", "email": "erich@gnu.org", "date": "1994-06-01T08:53:42Z"}, "message": "(all patterns): length attribute now describes length in bytes.\n\nFrom-SVN: r7415", "tree": {"sha": "ca43412001510880addef4f8620381a173e1e201", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca43412001510880addef4f8620381a173e1e201"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1dc0475d64bbb2e432a6b145a5902e355430c99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1dc0475d64bbb2e432a6b145a5902e355430c99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1dc0475d64bbb2e432a6b145a5902e355430c99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1dc0475d64bbb2e432a6b145a5902e355430c99/comments", "author": null, "committer": null, "parents": [{"sha": "5472d00b23e73c0da5f1ea4becf13f7e7fb1f62e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5472d00b23e73c0da5f1ea4becf13f7e7fb1f62e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5472d00b23e73c0da5f1ea4becf13f7e7fb1f62e"}], "stats": {"total": 196, "additions": 98, "deletions": 98}, "files": [{"sha": "3228e6476bd453be42087fe519842944d7c4aade", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 98, "deletions": 98, "changes": 196, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1dc0475d64bbb2e432a6b145a5902e355430c99/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1dc0475d64bbb2e432a6b145a5902e355430c99/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=a1dc0475d64bbb2e432a6b145a5902e355430c99", "patch": "@@ -70,13 +70,13 @@\n \n (define_attr \"cpu\" \"arm2,arm3,arm6\" (const (symbol_ref \"arm_cpu_attr\")))\n \n-; LENGTH, all instructions are 4 bytes\n-(define_attr \"length\" \"\" (const_int 1))\n+; LENGTH of an instruction (in bytes)\n+(define_attr \"length\" \"\" (const_int 4))\n \n ; An assembler sequence may clobber the condition codes without us knowing\n (define_asm_attributes\n  [(set_attr \"conds\" \"clob\")\n-  (set_attr \"length\" \"1\")])\n+  (set_attr \"length\" \"4\")])\n \n ; TYPE attribute is used to detect floating point instructions which, if\n ; running on a co-processor can run in parallel with other, basic instructions\n@@ -154,7 +154,7 @@\n   return (arm_output_asm_insn (\\\"adc\\\\t%R0, %R1, %R2\\\", operands));\n \"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"2\")])\n+ (set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r\")\n@@ -168,7 +168,7 @@\n   return (arm_output_asm_insn (\\\"adc\\\\t%R0, %R2, %1, asr #31\\\", operands));\n \"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"2\")])\n+ (set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r\")\n@@ -182,7 +182,7 @@\n   return (arm_output_asm_insn (\\\"adc\\\\t%R0, %R2, #0\\\", operands));\n \"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"2\")])\n+ (set_attr \"length\" \"8\")])\n \n (define_insn \"addsi3\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n@@ -248,7 +248,7 @@\n   return arm_output_asm_insn (\\\"add%d2\\\\t%0, %1, #1\\\", operands);\n \"\n [(set_attr \"conds\" \"use\")\n- (set_attr \"length\" \"*,2\")])\n+ (set_attr \"length\" \"*,8\")])\n \n ; If a constant is too big to fit in a single instruction then the constant\n ; will be pre-loaded into a register taking at least two insns, we might be\n@@ -433,7 +433,7 @@\n   return (arm_output_asm_insn (\\\"sbc\\\\t%R0, %R1, %R2\\\", operands));\n \"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"2\")])\n+ (set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r\")\n@@ -447,7 +447,7 @@\n   return (arm_output_asm_insn (\\\"sbc\\\\t%R0, %R1, #0\\\", operands));\n \"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"2\")])\n+ (set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r\")\n@@ -461,7 +461,7 @@\n   return (arm_output_asm_insn (\\\"sbc\\\\t%R0, %R1, %2, asr #31\\\", operands));\n \"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"2\")])\n+ (set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r\")\n@@ -475,7 +475,7 @@\n   return (arm_output_asm_insn (\\\"rsc\\\\t%R0, %R1, #0\\\", operands));\n \"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"2\")])\n+ (set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r\")\n@@ -489,7 +489,7 @@\n   return (arm_output_asm_insn (\\\"rsc\\\\t%R0, %R1, %2, asr #31\\\", operands));\n \"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"2\")])\n+ (set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n@@ -505,7 +505,7 @@\n \t  operands));\n \"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"2\")])\n+ (set_attr \"length\" \"8\")])\n \n (define_insn \"subsi3\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n@@ -553,7 +553,7 @@\n   return arm_output_asm_insn (\\\"sub%d2\\\\t%0, %1, #1\\\", operands);\n \"\n [(set_attr \"conds\" \"use\")\n- (set_attr \"length\" \"*,2\")])\n+ (set_attr \"length\" \"*,8\")])\n \n (define_insn \"subsf3\"\n   [(set (match_operand:SF 0 \"s_register_operand\" \"=f,f\")\n@@ -952,7 +952,7 @@\n   arm_output_asm_insn (\\\"and\\\\t%0, %1, %2\\\", operands);\n   return (arm_output_asm_insn (\\\"and\\\\t%R0, %R1, %R2\\\", operands));\n \"\n-[(set_attr \"length\" \"2\")])\n+[(set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r\")\n@@ -964,7 +964,7 @@\n   arm_output_asm_insn (\\\"and\\\\t%0, %1, %2\\\", operands);\n   return arm_output_asm_insn (\\\"mov\\\\t%R0, #0\\\", operands);\n \"\n-[(set_attr \"length\" \"2\")])\n+[(set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r\")\n@@ -976,7 +976,7 @@\n   arm_output_asm_insn (\\\"and\\\\t%0, %1, %2\\\", operands);\n   return arm_output_asm_insn (\\\"and\\\\t%R0, %R1, %2, asr #31\\\", operands);\n \"\n-[(set_attr \"length\" \"2\")])\n+[(set_attr \"length\" \"8\")])\n \n (define_insn \"andsi3\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n@@ -1083,7 +1083,7 @@\n }\n \"\n [(set_attr \"conds\" \"set\")\n- (set_attr \"length\" \"2\")])\n+ (set_attr \"length\" \"8\")])\n \n ;; constants for op 2 will never be given to these patterns.\n (define_insn \"\"\n@@ -1095,7 +1095,7 @@\n   arm_output_asm_insn (\\\"bic\\\\t%0, %1, %2\\\", operands);\n   return arm_output_asm_insn (\\\"bic\\\\t%R0, %R1, %R2\\\", operands);\n \"\n-[(set_attr \"length\" \"2\")])\n+[(set_attr \"length\" \"8\")])\n   \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r\")\n@@ -1109,7 +1109,7 @@\n     return arm_output_asm_insn (\\\"mov\\\\t%R0, %R1\\\", operands);\n   return \\\"\\\";\n \"\n-[(set_attr \"length\" \"2,1\")])\n+[(set_attr \"length\" \"8,4\")])\n   \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r\")\n@@ -1121,7 +1121,7 @@\n   arm_output_asm_insn (\\\"bic\\\\t%0, %1, %2\\\", operands);\n   return arm_output_asm_insn (\\\"bic\\\\t%R0, %R1, %2, asr #31\\\", operands);\n \"\n-[(set_attr \"length\" \"2\")])\n+[(set_attr \"length\" \"8\")])\n   \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n@@ -1168,7 +1168,7 @@\n   arm_output_asm_insn (\\\"orr\\\\t%0, %1, %2\\\", operands);\n   return (arm_output_asm_insn (\\\"orr\\\\t%R0, %R1, %R2\\\", operands));\n \"\n-[(set_attr \"length\" \"2\")])\n+[(set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r\")\n@@ -1182,7 +1182,7 @@\n     return (arm_output_asm_insn (\\\"mov\\\\t%R0, %R1\\\", operands));\n   return \\\"\\\";\n \"\n-[(set_attr \"length\" \"2,1\")])\n+[(set_attr \"length\" \"8,4\")])\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r\")\n@@ -1194,7 +1194,7 @@\n   arm_output_asm_insn (\\\"orr\\\\t%0, %1, %2\\\", operands);\n   return (arm_output_asm_insn (\\\"orr\\\\t%R0, %R1, %2, asr #31\\\", operands));\n \"\n-[(set_attr \"length\" \"2\")])\n+[(set_attr \"length\" \"8\")])\n \n (define_insn \"iorsi3\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n@@ -1239,7 +1239,7 @@\n   arm_output_asm_insn (\\\"eor\\\\t%0, %1, %2\\\", operands);\n   return arm_output_asm_insn (\\\"eor\\\\t%R0, %R1, %R2\\\", operands);\n \"\n-[(set_attr \"length\" \"2\")])\n+[(set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r\")\n@@ -1253,7 +1253,7 @@\n     return arm_output_asm_insn (\\\"mov\\\\t%R0, %R1\\\", operands);\n   return \\\"\\\";\n \"\n-[(set_attr \"length\" \"2,1\")])\n+[(set_attr \"length\" \"8,4\")])\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r\")\n@@ -1265,7 +1265,7 @@\n   arm_output_asm_insn (\\\"eor\\\\t%0, %1, %2\\\", operands);\n   return arm_output_asm_insn (\\\"eor\\\\t%R0, %R1, %2, asr #31\\\", operands);\n \"\n-[(set_attr \"length\" \"2\")])\n+[(set_attr \"length\" \"8\")])\n \n (define_insn \"xorsi3\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n@@ -1327,7 +1327,7 @@\n   arm_output_asm_insn (\\\"orr\\\\t%0, %1, %2\\\", operands);\n   return arm_output_asm_insn (\\\"bic\\\\t%0, %0, %3\\\", operands);\n \"\n-[(set_attr \"length\" \"2\")])\n+[(set_attr \"length\" \"8\")])\n \n \f\n \n@@ -1348,7 +1348,7 @@\n   return \\\"\\\";\n \"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"2,2,3\")])\n+ (set_attr \"length\" \"8,8,12\")])\n \n (define_insn \"sminsi3\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n@@ -1365,7 +1365,7 @@\n   return \\\"\\\";\n \"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"2,2,3\")])\n+ (set_attr \"length\" \"8,8,12\")])\n \n (define_insn \"umaxsi3\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n@@ -1382,7 +1382,7 @@\n   return \\\"\\\";\n \"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"2,2,3\")])\n+ (set_attr \"length\" \"8,8,12\")])\n \n (define_insn \"uminsi3\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n@@ -1399,7 +1399,7 @@\n   return \\\"\\\";\n \"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"2,2,3\")])\n+ (set_attr \"length\" \"8,8,12\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"memory_operand\" \"=m\")\n@@ -1416,7 +1416,7 @@\n   return arm_output_asm_insn (\\\"str%D3\\\\t%2, %0\\\", operands);\n \"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"3\")\n+ (set_attr \"length\" \"12\")\n  (set_attr \"type\" \"store1\")])\n \n (define_insn \"\"\n@@ -1449,7 +1449,7 @@\n }\n \"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"3\")])\n+ (set_attr \"length\" \"12\")])\n \n \f\n ;; Shift and rotation insns\n@@ -1603,7 +1603,7 @@\n   return (arm_output_asm_insn (\\\"rsc\\\\t%R0, %R1, #0\\\", operands));\n \"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"2\")])\n+ (set_attr \"length\" \"8\")])\n \n (define_insn \"negsi2\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n@@ -1672,7 +1672,7 @@\n     }\n \"\n [(set_attr \"conds\" \"clob,*\")\n- (set_attr \"length\" \"2\")])\n+ (set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,&r\")\n@@ -1691,7 +1691,7 @@\n     }\n \"\n [(set_attr \"conds\" \"clob,*\")\n- (set_attr \"length\" \"2\")])\n+ (set_attr \"length\" \"8\")])\n \n (define_insn \"abssf2\"\n   [(set (match_operand:SF 0 \"s_register_operand\" \"=f\")\n@@ -1849,7 +1849,7 @@\n   arm_output_asm_insn (\\\"mvn\\\\t%0, %1\\\", operands);\n   return arm_output_asm_insn (\\\"mvn\\\\t%R0, %R1\\\", operands);\n \"\n-[(set_attr \"length\" \"2\")])\n+[(set_attr \"length\" \"8\")])\n \n (define_insn \"one_cmplsi2\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n@@ -1981,7 +1981,7 @@\n     arm_output_asm_insn (\\\"mov\\\\t%0, %1\\\", operands);\n   return arm_output_asm_insn (\\\"mov\\\\t%R0, #0\\\", operands);\n \"\n-[(set_attr \"length\" \"2\")])\n+[(set_attr \"length\" \"8\")])\n \n (define_insn \"zero_extendqidi2\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=r,r\")\n@@ -1999,7 +1999,7 @@\n     }\n   return arm_output_asm_insn (\\\"mov\\\\t%R0, #0\\\", operands);\n \"\n-[(set_attr \"length\" \"2\")\n+[(set_attr \"length\" \"8\")\n  (set_attr \"type\" \"*,load\")])\n \n (define_insn \"extendsidi2\"\n@@ -2011,7 +2011,7 @@\n     arm_output_asm_insn (\\\"mov\\\\t%0, %1\\\", operands);\n   return arm_output_asm_insn (\\\"mov\\\\t%R0, %0, asr #31\\\", operands);\n \"\n-[(set_attr \"length\" \"2\")])\n+[(set_attr \"length\" \"8\")])\n \n (define_expand \"zero_extendhisi2\"\n   [(set (match_dup 2)\n@@ -2228,7 +2228,7 @@\n   \"*\n   return (output_move_double (operands));\n \"\n-[(set_attr \"length\" \"2,8,2,2,8\")\n+[(set_attr \"length\" \"8,32,8,8,32\")\n  (set_attr \"type\" \"*,*,load,store2,*\")])\n \n (define_expand \"movsi\"\n@@ -2378,7 +2378,7 @@\n       return output_load_symbol (operands);\n     }\n \"\n-[(set_attr \"length\" \"2,*,*,*,4\")\n+[(set_attr \"length\" \"8,*,*,*,16\")\n  (set_attr \"type\" \"load,*,*,store1,*\")])\n \n ;; If copying one reg to another we can set the condition codes according to\n@@ -2639,7 +2639,7 @@\n   }\n }\n \"\n-[(set_attr \"length\" \"1,1,1,1,2,2,1,1,1\")\n+[(set_attr \"length\" \"4,4,4,4,8,8,4,4,4\")\n  (set_attr \"type\" \"float,float,f_load,f_store,r_mem_f,f_mem_r,*,load,store1\")])\n \n (define_expand \"movdf\"\n@@ -2719,7 +2719,7 @@\n     }\n }\n \"\n-[(set_attr \"length\" \"1,1,2,2,1,1,1,1,1,2,2,2\")\n+[(set_attr \"length\" \"4,4,8,8,4,4,4,4,4,8,8,8\")\n  (set_attr \"type\" \n \"load,store2,load,store2,float,float,float,f_load,f_store,r_mem_f,f_mem_r,*\")])\n \n@@ -2747,7 +2747,7 @@\n     }\n }\n \"\n-[(set_attr \"length\" \"1,1,1,1,2,2,3\")\n+[(set_attr \"length\" \"4,4,4,4,8,8,12\")\n  (set_attr \"type\" \"float,float,f_load,f_store,r_mem_f,f_mem_r,*\")])\n \f\n \n@@ -3626,7 +3626,7 @@\n   return arm_output_asm_insn (\\\"mov%D1\\\\t%0, #0\\\", operands);\n \"\n [(set_attr \"conds\" \"use\")\n- (set_attr \"length\" \"2\")])\n+ (set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n@@ -3638,7 +3638,7 @@\n   return arm_output_asm_insn (\\\"mov%D1\\\\t%0, #0\\\", operands);\n \"\n [(set_attr \"conds\" \"use\")\n- (set_attr \"length\" \"2\")])\n+ (set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n@@ -3650,7 +3650,7 @@\n   return arm_output_asm_insn (\\\"mov%D1\\\\t%0, #0\\\", operands);\n \"\n [(set_attr \"conds\" \"use\")\n- (set_attr \"length\" \"2\")])\n+ (set_attr \"length\" \"8\")])\n \n \f\n ;; Jump and linkage insns\n@@ -3691,7 +3691,7 @@\n \t\t    (const_string \"clob\")\n \t\t    (const_string \"nocond\")))\n ;; length is worst case, normally it is only two\n- (set_attr \"length\" \"3\")\n+ (set_attr \"length\" \"12\")\n  (set_attr \"type\" \"call\")])\n \n (define_insn \"\"\n@@ -3706,7 +3706,7 @@\n       (if_then_else (eq_attr \"cpu\" \"arm6\")\n \t\t    (const_string \"clob\")\n \t\t    (const_string \"nocond\")))\n- (set_attr \"length\" \"3\")\n+ (set_attr \"length\" \"12\")\n  (set_attr \"type\" \"call\")])\n \n (define_expand \"call_value\"\n@@ -3730,7 +3730,7 @@\n       (if_then_else (eq_attr \"cpu\" \"arm6\")\n \t\t    (const_string \"clob\")\n \t\t    (const_string \"nocond\")))\n- (set_attr \"length\" \"3\")\n+ (set_attr \"length\" \"12\")\n  (set_attr \"type\" \"call\")])\n \n (define_insn \"\"\n@@ -3746,7 +3746,7 @@\n       (if_then_else (eq_attr \"cpu\" \"arm6\")\n \t\t    (const_string \"clob\")\n \t\t    (const_string \"nocond\")))\n- (set_attr \"length\" \"3\")\n+ (set_attr \"length\" \"12\")\n  (set_attr \"type\" \"call\")])\n \n ;; Allow calls to SYMBOL_REFs specially as they are not valid general addresses\n@@ -4074,7 +4074,7 @@\n   return output_add_immediate (operands);\n }\"\n ; we have no idea how long the add_immediate is, it could be up to 4.\n-[(set_attr \"length\" \"5\")])\n+[(set_attr \"length\" \"20\")])\n \n (define_insn \"\"\n   [(set (reg:CC_NOOV 24)\n@@ -4100,7 +4100,7 @@\n   return arm_output_asm_insn (instr, operands);\n }\"\n [(set_attr \"conds\" \"set\")\n- (set_attr \"length\" \"5\")])\n+ (set_attr \"length\" \"20\")])\n \n (define_insn \"\"\n   [(set (reg:CC_NOOV 24)\n@@ -4123,7 +4123,7 @@\n   return arm_output_asm_insn (instr, operands);\n }\"\n [(set_attr \"conds\" \"set\")\n- (set_attr \"length\" \"5\")])\n+ (set_attr \"length\" \"20\")])\n \n ;; These are similar, but are needed when the mla pattern contains the\n ;; eliminated register as operand 3.\n@@ -4141,7 +4141,7 @@\n   operands[1] = operands[0];\n   return output_add_immediate (operands);\n \"\n-[(set_attr \"length\" \"5\")])\n+[(set_attr \"length\" \"20\")])\n \n (define_insn \"\"\n   [(set (reg:CC_NOOV 24)\n@@ -4159,7 +4159,7 @@\n   output_add_immediate (operands);\n   return arm_output_asm_insn (\\\"mlas\\\\t%0, %3, %4, %0\\\", operands);\n \"\n-[(set_attr \"length\" \"5\")\n+[(set_attr \"length\" \"20\")\n  (set_attr \"conds\" \"set\")])\n \n (define_insn \"\"\n@@ -4176,7 +4176,7 @@\n   output_add_immediate (operands);\n   return arm_output_asm_insn (\\\"mlas\\\\t%0, %3, %4, %0\\\", operands);\n \"\n-[(set_attr \"length\" \"5\")\n+[(set_attr \"length\" \"20\")\n  (set_attr \"conds\" \"set\")])\n \n \n@@ -4193,7 +4193,7 @@\n   return arm_output_asm_insn (\\\"and%d1\\\\t%0, %2, #1\\\", operands);\n \"\n [(set_attr \"conds\" \"use\")\n- (set_attr \"length\" \"2\")])\n+ (set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n@@ -4207,7 +4207,7 @@\n   return arm_output_asm_insn (\\\"orr%d2\\\\t%0, %1, #1\\\", operands);\n \"\n [(set_attr \"conds\" \"use\")\n- (set_attr \"length\" \"1,2\")])\n+ (set_attr \"length\" \"4,8\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n@@ -4242,7 +4242,7 @@\n   return arm_output_asm_insn (\\\"mov%d1\\\\t%0, #1\\\", operands);\n \"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"3\")])\n+ (set_attr \"length\" \"12\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=&r\")\n@@ -4281,7 +4281,7 @@\n \"\n [(set_attr \"conds\" \"clob\")\n ; worst case length\n- (set_attr \"length\" \"5\")])\n+ (set_attr \"length\" \"20\")])\n \n (define_split\n   [(set (pc)\n@@ -4367,7 +4367,7 @@\n   return arm_output_asm_insn (\\\"b%d6\\\\t%l4\\\", operands);\n }\"\n [(set_attr \"conds\" \"jump_clob\")\n- (set_attr \"length\" \"4\")])\n+ (set_attr \"length\" \"16\")])\n \n (define_insn \"\"\n   [(set (reg:CC 24)\n@@ -4405,7 +4405,7 @@\n   return arm_output_asm_insn (\\\"cmp%D4\\\\t%2, %3\\\", operands);\n \"\n [(set_attr \"conds\" \"set\")\n- (set_attr \"length\" \"2\")])\n+ (set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n@@ -4432,7 +4432,7 @@\n   return \\\"\\\";\n \"\n [(set_attr \"conds\" \"use\")\n- (set_attr \"length\" \"1,1,2\")])\n+ (set_attr \"length\" \"4,4,8\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n@@ -4463,7 +4463,7 @@\n }\n \"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"3\")])\n+ (set_attr \"length\" \"12\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n@@ -4480,7 +4480,7 @@\n   return arm_output_asm_insn (\\\"sub%d4\\\\t%0, %1, #1\\\", operands);\n \"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"2,3\")])\n+ (set_attr \"length\" \"8,12\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=&r\")\n@@ -4519,7 +4519,7 @@\n }\n \"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"5\")])\n+ (set_attr \"length\" \"20\")])\n \n (define_split\n   [(set (pc)\n@@ -4616,7 +4616,7 @@\n   return arm_output_asm_insn (\\\"b%D4\\\\t%l0\\\", operands);\n }\"\n [(set_attr \"conds\" \"jump_clob\")\n- (set_attr \"length\" \"4\")])\n+ (set_attr \"length\" \"16\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n@@ -4643,7 +4643,7 @@\n   return arm_output_asm_insn (\\\"mvn%d3\\\\t%0, #0\\\", operands);\n \"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"3\")])\n+ (set_attr \"length\" \"12\")])\n \n (define_insn \"movcond\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n@@ -4707,7 +4707,7 @@\n   return \\\"\\\";\n \"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"2,2,3\")])\n+ (set_attr \"length\" \"8,8,12\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n@@ -4740,7 +4740,7 @@\n }\n \"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"3\")])\n+ (set_attr \"length\" \"12\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n@@ -4801,7 +4801,7 @@\n }\n \"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"2,3\")])\n+ (set_attr \"length\" \"8,12\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n@@ -4861,7 +4861,7 @@\n }\n \"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"2,3\")])\n+ (set_attr \"length\" \"8,12\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n@@ -4897,7 +4897,7 @@\n }\n \"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"2,3\")])\n+ (set_attr \"length\" \"8,12\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n@@ -4933,7 +4933,7 @@\n }\n \"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"2,3\")])\n+ (set_attr \"length\" \"8,12\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n@@ -4947,7 +4947,7 @@\n   \"\"\n   \"#\"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"2,3\")])\n+ (set_attr \"length\" \"8,12\")])\n \n ;;  if (GET_CODE (operands[3]) == CONST_INT\n ;;      && !const_ok_for_arm (INTVAL (operands[3])))\n@@ -4984,7 +4984,7 @@\n }\n \"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"2,3\")])\n+ (set_attr \"length\" \"8,12\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n@@ -5014,7 +5014,7 @@\n }\n \"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"2,3\")])\n+ (set_attr \"length\" \"8,12\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n@@ -5044,7 +5044,7 @@\n }\n \"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"2,3\")])\n+ (set_attr \"length\" \"8,12\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n@@ -5077,7 +5077,7 @@\n }\n \"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"3\")])\n+ (set_attr \"length\" \"12\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n@@ -5106,7 +5106,7 @@\n }\n \"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"3\")])\n+ (set_attr \"length\" \"12\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n@@ -5135,7 +5135,7 @@\n }\n \"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"3\")])\n+ (set_attr \"length\" \"12\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n@@ -5158,7 +5158,7 @@\n   return arm_output_asm_insn (\\\"rsb%d5\\\\t%0, %2, #0\\\", operands);\n \"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"2,3\")])\n+ (set_attr \"length\" \"8,12\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n@@ -5181,7 +5181,7 @@\n   return arm_output_asm_insn (\\\"rsb%D5\\\\t%0, %2, #0\\\", operands);\n \"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"2,3\")])\n+ (set_attr \"length\" \"8,12\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n@@ -5255,7 +5255,7 @@\n   return arm_output_asm_insn (pattern, arith);\n }\n \"\n-[(set_attr \"length\" \"3\")\n+[(set_attr \"length\" \"12\")\n  (set_attr \"type\" \"load\")])\n \n ;; the arm can support extended pre-inc instructions\n@@ -5929,7 +5929,7 @@\n       (if_then_else (eq_attr \"cpu\" \"arm6\")\n \t\t    (const_string \"clob\")\n \t\t    (const_string \"nocond\")))\n- (set_attr \"length\" \"2\")])\n+ (set_attr \"length\" \"8\")])\n \n (define_peephole\n   [(parallel [(set (match_operand 0 \"s_register_operand\" \"=rf\")\n@@ -5960,7 +5960,7 @@\n       (if_then_else (eq_attr \"cpu\" \"arm6\")\n \t\t    (const_string \"clob\")\n \t\t    (const_string \"nocond\")))\n- (set_attr \"length\" \"2\")])\n+ (set_attr \"length\" \"8\")])\n \n ;; As above but when this function is not void, we must be returning the\n ;; result of the called subroutine.\n@@ -5995,7 +5995,7 @@\n       (if_then_else (eq_attr \"cpu\" \"arm6\")\n \t\t    (const_string \"clob\")\n \t\t    (const_string \"nocond\")))\n- (set_attr \"length\" \"2\")])\n+ (set_attr \"length\" \"8\")])\n \n ;; If calling a subroutine and then jumping back to somewhere else, but not\n ;; too far away, then we can set the link register with the branch address\n@@ -6046,8 +6046,8 @@\n \t\t    (const_string \"nocond\")))\n  (set (attr \"length\")\n       (if_then_else (eq_attr \"cpu\" \"arm6\")\n-\t\t    (const_int 2)\n-\t\t    (const_int 3)))])\n+\t\t    (const_int 8)\n+\t\t    (const_int 12)))])\n \n (define_peephole\n   [(parallel[(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n@@ -6092,8 +6092,8 @@\n \t\t    (const_string \"nocond\")))\n  (set (attr \"length\")\n       (if_then_else (eq_attr \"cpu\" \"arm6\")\n-\t\t    (const_int 2)\n-\t\t    (const_int 3)))])\n+\t\t    (const_int 8)\n+\t\t    (const_int 12)))])\n \n (define_split\n   [(set (pc)\n@@ -6152,7 +6152,7 @@\n   return arm_output_asm_insn (\\\"cmp\\\\t%2, %1\\\", operands);\n \"\n [(set_attr \"conds\" \"set\")\n- (set_attr \"length\" \"2\")\n+ (set_attr \"length\" \"8\")\n  (set_attr \"type\" \"load\")])\n \n (define_expand \"save_stack_nonlocal\"\n@@ -6226,7 +6226,7 @@\n   return arm_output_asm_insn (\\\"mvn%D4\\\\t%0, %2\\\", operands);\n \"\n [(set_attr \"conds\" \"use\")\n- (set_attr \"length\" \"1,2\")])\n+ (set_attr \"length\" \"4,8\")])\n \n ;; The next two patterns occur when an AND operation is followed by a\n ;; scc insn sequence \n@@ -6243,7 +6243,7 @@\n   return arm_output_asm_insn (\\\"mvnne\\\\t%0, #0\\\", operands);\n \"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"2\")])\n+ (set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n@@ -6259,4 +6259,4 @@\n   return arm_output_asm_insn (\\\"movne\\\\t%0, #0\\\", operands);\n \"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"3\")])\n+ (set_attr \"length\" \"12\")])"}]}