{"sha": "709e7c9f87f9d58c77f2b9595234e56b3ae9c965", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzA5ZTdjOWY4N2Y5ZDU4Yzc3ZjJiOTU5NTIzNGU1NmIzYWU5Yzk2NQ==", "commit": {"author": {"name": "Jerry Quinn", "email": "jlquinn@optonline.net", "date": "2003-07-15T06:15:57Z"}, "committer": {"name": "Jerry Quinn", "email": "jlquinn@gcc.gnu.org", "date": "2003-07-15T06:15:57Z"}, "message": "stl_list.h: Document more functions.\n\n2003-07-15  Jerry Quinn  <jlquinn@optonline.net>\n\n        *  include/bits/stl_list.h:  Document more functions.\n\t* docs/doxygen/TODO:  Update c23 todo.\n\nFrom-SVN: r69385", "tree": {"sha": "5e1a9bfbab783f46ddb3eaa8127cd6ef99136af3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e1a9bfbab783f46ddb3eaa8127cd6ef99136af3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/709e7c9f87f9d58c77f2b9595234e56b3ae9c965", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/709e7c9f87f9d58c77f2b9595234e56b3ae9c965", "html_url": "https://github.com/Rust-GCC/gccrs/commit/709e7c9f87f9d58c77f2b9595234e56b3ae9c965", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/709e7c9f87f9d58c77f2b9595234e56b3ae9c965/comments", "author": {"login": "jlquinn", "id": 826841, "node_id": "MDQ6VXNlcjgyNjg0MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/826841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlquinn", "html_url": "https://github.com/jlquinn", "followers_url": "https://api.github.com/users/jlquinn/followers", "following_url": "https://api.github.com/users/jlquinn/following{/other_user}", "gists_url": "https://api.github.com/users/jlquinn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlquinn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlquinn/subscriptions", "organizations_url": "https://api.github.com/users/jlquinn/orgs", "repos_url": "https://api.github.com/users/jlquinn/repos", "events_url": "https://api.github.com/users/jlquinn/events{/privacy}", "received_events_url": "https://api.github.com/users/jlquinn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "72de27eaff3d77f5c386bef917a77261ab98f4ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72de27eaff3d77f5c386bef917a77261ab98f4ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72de27eaff3d77f5c386bef917a77261ab98f4ec"}], "stats": {"total": 117, "additions": 96, "deletions": 21}, "files": [{"sha": "7bd3dae97b10ff4d808bd9c8e71290fe0f228e2b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/709e7c9f87f9d58c77f2b9595234e56b3ae9c965/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/709e7c9f87f9d58c77f2b9595234e56b3ae9c965/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=709e7c9f87f9d58c77f2b9595234e56b3ae9c965", "patch": "@@ -1,3 +1,8 @@\n+2003-07-15  Jerry Quinn  <jlquinn@optonline.net>\n+\n+\t* include/bits/stl_list.h:  Document more functions.\n+\t* docs/doxygen/TODO:  Update c23 todo.\n+\n 2003-07-14  Paolo Carlini  <pcarlini@unitus.it>\n \n \t* config/locale/gnu/c_locale.h (__convert_from_v): One more"}, {"sha": "640bd8741802f285800a99317b279939c0c308c4", "filename": "libstdc++-v3/docs/doxygen/TODO", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/709e7c9f87f9d58c77f2b9595234e56b3ae9c965/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2FTODO", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/709e7c9f87f9d58c77f2b9595234e56b3ae9c965/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2FTODO", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2FTODO?ref=709e7c9f87f9d58c77f2b9595234e56b3ae9c965", "patch": "@@ -26,8 +26,7 @@ c21             Untouched (top-level class note for basic_string done),\n                 Note B\n c22             Untouched; see docs/html/22_locale/*\n c23             See doxygroups.cc and Note B.  Notes on what invalidates\n-                iterators need to be added.  std::list-specific memfns need\n-                to be filled out.\n+                iterators need to be added.\n c24             stl_iterator.h (__normal_iterator, other small TODO bits)\n                 stream iterators\n c25             stl_algo.h (lots of stuff)"}, {"sha": "4533aee0bed472b272f9f041046647ad883f76ec", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 90, "deletions": 19, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/709e7c9f87f9d58c77f2b9595234e56b3ae9c965/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/709e7c9f87f9d58c77f2b9595234e56b3ae9c965/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=709e7c9f87f9d58c77f2b9595234e56b3ae9c965", "patch": "@@ -489,8 +489,9 @@ namespace std\n      *  @param  first  An input iterator.\n      *  @param  last  An input iterator.\n      * \n-     *  Create a %list consisting of copies of the elements from [first,last).\n-     *  This is linear in N (where N is distance(first,last)).\n+     *  Create a %list consisting of copies of the elements from\n+     *  [@a first,@a last).  This is linear in N (where N is\n+     *  distance(@a first,@a last)).\n      *\n      *  @if maint\n      *  We don't need any dispatching tricks here, because insert does all of\n@@ -539,7 +540,7 @@ namespace std\n      *  @param  last   An input iterator.\n      *\n      *  This function fills a %list with copies of the elements in the\n-     *  range [first,last).\n+     *  range [@a first,@a last).\n      *\n      *  Note that the assignment completely changes the %list and that the\n      *  resulting %list's size is the same as the number of elements assigned.\n@@ -780,8 +781,9 @@ namespace std\n      *  @param  first  An input iterator.\n      *  @param  last   An input iterator.\n      *\n-     *  This function will insert copies of the data in the range [first,last)\n-     *  into the %list before the location specified by @a pos.\n+     *  This function will insert copies of the data in the range\n+     *  [@a first,@a last) into the %list before the location specified by @a\n+     *  position.\n      *\n      *  Due to the nature of a %list this operation can be done in constant\n      *  time, and does not invalidate iterators and references.\n@@ -822,7 +824,7 @@ namespace std\n      *  @return  An iterator pointing to the element pointed to by @a last\n      *           prior to erasing (or end()).\n      *\n-     *  This function will erase the elements in the range [first,last) and\n+     *  This function will erase the elements in the range @a [first,last) and\n      *  shorten the %list accordingly.\n      *\n      *  Due to the nature of a %list this operation can be done in constant\n@@ -863,7 +865,12 @@ namespace std\n   \n     // [23.2.2.4] list operations\n     /**\n-     *  @doctodo\n+     *  @brief  Insert contents of another %list.\n+     *  @param  position  Iterator referencing the element to insert before.\n+     *  @param  x  Source list.\n+     *\n+     *  The elements of @a x are inserted in constant time in front of the\n+     *  element referenced by @a position.  @a x becomes an empty list.\n     */\n     void\n     splice(iterator __position, list& __x)\n@@ -873,7 +880,13 @@ namespace std\n     }\n   \n     /**\n-     *  @doctodo\n+     *  @brief  Insert element from another %list.\n+     *  @param  position  Iterator referencing the element to insert before.\n+     *  @param  x  Source list.\n+     *  @param  i  Iterator referencing the element to move.\n+     *\n+     *  Removes the element in list @a x referenced by @a i and inserts it into the\n+     *  current list before @a position.\n     */\n     void\n     splice(iterator __position, list&, iterator __i)\n@@ -885,8 +898,17 @@ namespace std\n     }\n   \n     /**\n-     *  @doctodo\n-    */\n+     *  @brief  Insert range from another %list.\n+     *  @param  position  Iterator referencing the element to insert before.\n+     *  @param  x  Source list.\n+     *  @param  first  Iterator referencing the start of range in x.\n+     *  @param  last  Iterator referencing the end of range in x.\n+     *\n+     *  Removes elements in the range [first,last) and inserts them before\n+     *  @a position in constant time.\n+     *\n+     *  Undefined if @a position is in [first,last).\n+   */\n     void\n     splice(iterator __position, list&, iterator __first, iterator __last)\n     {\n@@ -895,58 +917,107 @@ namespace std\n     }\n   \n     /**\n-     *  @doctodo\n+     *  @brief  Remove all elements equal to value.\n+     *  @param  value  The value to remove.\n+     *\n+     *  Removes every element in the list equal to @a value.  Remaining\n+     *  elements stay in list order.  Note that this function only erases the\n+     *  elements, and that if the elements themselves are pointers, the\n+     *  pointed-to memory is not touched in any way.  Managing the pointer is\n+     *  the user's responsibilty.\n     */\n     void\n     remove(const _Tp& __value);\n   \n     /**\n-     *  @doctodo\n+     *  @brief  Remove all elements satisfying a predicate.\n+     *  @param  Predicate  Unary predicate function or object.\n+     *\n+     *  Removes every element in the list for which the predicate returns\n+     *  true.  Remaining elements stay in list order.  Note that this function\n+     *  only erases the elements, and that if the elements themselves are\n+     *  pointers, the pointed-to memory is not touched in any way.  Managing\n+     *  the pointer is the user's responsibilty.\n     */\n     template<typename _Predicate>\n       void\n       remove_if(_Predicate);\n   \n     /**\n-     *  @doctodo\n+     *  @brief  Remove consecutive duplicate elements.\n+     *\n+     *  For each consecutive set of elements with the same value, remove all\n+     *  but the first one.  Remaining elements stay in list order.  Note that\n+     *  this function only erases the elements, and that if the elements\n+     *  themselves are pointers, the pointed-to memory is not touched in any\n+     *  way.  Managing the pointer is the user's responsibilty.\n     */\n     void\n     unique();\n   \n     /**\n-     *  @doctodo\n+     *  @brief  Remove consecutive elements satisfying a predicate.\n+     *  @param  BinaryPredicate  Binary predicate function or object.\n+     *\n+     *  For each consecutive set of elements [first,last) that satisfy\n+     *  predicate(first,i) where i is an iterator in [first,last), remove all\n+     *  but the first one.  Remaining elements stay in list order.  Note that\n+     *  this function only erases the elements, and that if the elements\n+     *  themselves are pointers, the pointed-to memory is not touched in any\n+     *  way.  Managing the pointer is the user's responsibilty.\n     */\n     template<typename _BinaryPredicate>\n       void\n       unique(_BinaryPredicate);\n   \n     /**\n-     *  @doctodo\n+     *  @brief  Merge sorted lists.\n+     *  @param  x  Sorted list to merge.\n+     *\n+     *  Assumes that both @a x and this list are sorted according to\n+     *  operator<().  Merges elements of @a x into this list in sorted order,\n+     *  leaving @a x empty when complete.  Elements in this list precede\n+     *  elements in @a x that are equal.\n     */\n     void\n     merge(list& __x);\n   \n     /**\n-     *  @doctodo\n+     *  @brief  Merge sorted lists according to comparison function.\n+     *  @param  x  Sorted list to merge.\n+     *  @param  StrictWeakOrdering  Comparison function definining sort order.\n+     *\n+     *  Assumes that both @a x and this list are sorted according to\n+     *  StrictWeakOrdering.  Merges elements of @a x into this list in sorted\n+     *  order, leaving @a x empty when complete.  Elements in this list precede\n+     *  elements in @a x that are equivalent according to StrictWeakOrdering().\n     */\n     template<typename _StrictWeakOrdering>\n       void\n       merge(list&, _StrictWeakOrdering);\n   \n     /**\n-     *  @doctodo\n+     *  @brief  Reverse the elements in list.\n+     *\n+     *  Reverse the order of elements in the list in linear time.\n     */\n     void\n     reverse() { __List_base_reverse(&this->_M_node); }\n   \n     /**\n-     *  @doctodo\n+     *  @brief  Sort the elements.\n+     *\n+     *  Sorts the elements of this list in NlogN time.  Equivalent elements\n+     *  remain in list order.\n     */\n     void\n     sort();\n   \n     /**\n-     *  @doctodo\n+     *  @brief  Sort the elements according to comparison function.\n+     *\n+     *  Sorts the elements of this list in NlogN time.  Equivalent elements\n+     *  remain in list order.\n     */\n     template<typename _StrictWeakOrdering>\n       void"}]}