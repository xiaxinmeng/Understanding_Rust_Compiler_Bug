{"sha": "9880492caa6f56e7abe10163157d0c2149d72ba4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg4MDQ5MmNhYTZmNTZlN2FiZTEwMTYzMTU3ZDBjMjE0OWQ3MmJhNA==", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2021-02-08T12:55:05Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-06-15T10:19:23Z"}, "message": "[Ada] Remove redundant guard from Find_Overlaid_Entity\n\ngcc/ada/\n\n\t* sem_util.ads (Find_Overlaid_Entity): Simplify comment for\n\tspec.\n\t* sem_util.adb (Find_Overlaid_Entity): Remove defensive code\n\tfrom body.", "tree": {"sha": "b3e6df2c0812615dd3d62bae59b7b0df3d7acd64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3e6df2c0812615dd3d62bae59b7b0df3d7acd64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9880492caa6f56e7abe10163157d0c2149d72ba4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9880492caa6f56e7abe10163157d0c2149d72ba4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9880492caa6f56e7abe10163157d0c2149d72ba4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9880492caa6f56e7abe10163157d0c2149d72ba4/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86347b2d8d48fa2d18658d241f2df54665dac627", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86347b2d8d48fa2d18658d241f2df54665dac627", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86347b2d8d48fa2d18658d241f2df54665dac627"}], "stats": {"total": 92, "additions": 45, "deletions": 47}, "files": [{"sha": "98ca0466e0bdec184c01ee94bce25f690a1c03bb", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 40, "deletions": 41, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9880492caa6f56e7abe10163157d0c2149d72ba4/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9880492caa6f56e7abe10163157d0c2149d72ba4/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=9880492caa6f56e7abe10163157d0c2149d72ba4", "patch": "@@ -9371,6 +9371,10 @@ package body Sem_Util is\n       Ent : out Entity_Id;\n       Off : out Boolean)\n    is\n+      pragma Assert\n+        (Nkind (N) = N_Attribute_Definition_Clause\n+         and then Chars (N) = Name_Address);\n+\n       Expr : Node_Id;\n \n    begin\n@@ -9390,61 +9394,56 @@ package body Sem_Util is\n       Ent := Empty;\n       Off := False;\n \n-      if Nkind (N) = N_Attribute_Definition_Clause\n-        and then Chars (N) = Name_Address\n-      then\n-         Expr := Expression (N);\n+      Expr := Expression (N);\n \n-         --  This loop checks the form of the expression for Y'Address,\n-         --  using recursion to deal with intermediate constants.\n+      --  This loop checks the form of the expression for Y'Address, using\n+      --  recursion to deal with intermediate constants.\n \n-         loop\n-            --  Check for Y'Address\n+      loop\n+         --  Check for Y'Address\n \n-            if Nkind (Expr) = N_Attribute_Reference\n-              and then Attribute_Name (Expr) = Name_Address\n-            then\n-               Expr := Prefix (Expr);\n-               exit;\n+         if Nkind (Expr) = N_Attribute_Reference\n+           and then Attribute_Name (Expr) = Name_Address\n+         then\n+            Expr := Prefix (Expr);\n+            exit;\n \n-            --  Check for Const where Const is a constant entity\n+         --  Check for Const where Const is a constant entity\n \n-            elsif Is_Entity_Name (Expr)\n-              and then Ekind (Entity (Expr)) = E_Constant\n-            then\n-               Expr := Constant_Value (Entity (Expr));\n+         elsif Is_Entity_Name (Expr)\n+           and then Ekind (Entity (Expr)) = E_Constant\n+         then\n+            Expr := Constant_Value (Entity (Expr));\n \n-            --  Anything else does not need checking\n+         --  Anything else does not need checking\n \n-            else\n-               return;\n-            end if;\n-         end loop;\n+         else\n+            return;\n+         end if;\n+      end loop;\n \n-         --  This loop checks the form of the prefix for an entity, using\n-         --  recursion to deal with intermediate components.\n+      --  This loop checks the form of the prefix for an entity, using\n+      --  recursion to deal with intermediate components.\n \n-         loop\n-            --  Check for Y where Y is an entity\n+      loop\n+         --  Check for Y where Y is an entity\n \n-            if Is_Entity_Name (Expr) then\n-               Ent := Entity (Expr);\n-               return;\n+         if Is_Entity_Name (Expr) then\n+            Ent := Entity (Expr);\n+            return;\n \n-            --  Check for components\n+         --  Check for components\n \n-            elsif Nkind (Expr) in N_Selected_Component | N_Indexed_Component\n-            then\n-               Expr := Prefix (Expr);\n-               Off := True;\n+         elsif Nkind (Expr) in N_Selected_Component | N_Indexed_Component then\n+            Expr := Prefix (Expr);\n+            Off  := True;\n \n-            --  Anything else does not need checking\n+         --  Anything else does not need checking\n \n-            else\n-               return;\n-            end if;\n-         end loop;\n-      end if;\n+         else\n+            return;\n+         end if;\n+      end loop;\n    end Find_Overlaid_Entity;\n \n    -------------------------"}, {"sha": "a986ae655471daad28836a1d9387c3f1d35c9112", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9880492caa6f56e7abe10163157d0c2149d72ba4/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9880492caa6f56e7abe10163157d0c2149d72ba4/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=9880492caa6f56e7abe10163157d0c2149d72ba4", "patch": "@@ -900,12 +900,11 @@ package Sem_Util is\n      (N   : Node_Id;\n       Ent : out Entity_Id;\n       Off : out Boolean);\n-   --  The node N should be an address representation clause. Determines if\n-   --  the target expression is the address of an entity with an optional\n-   --  offset. If so, set Ent to the entity and, if there is an offset, set\n-   --  Off to True, otherwise to False. If N is not an address representation\n-   --  clause, or if it is not possible to determine that the address is of\n-   --  this form, then set Ent to Empty.\n+   --  The node N should be an address representation clause. Determines if the\n+   --  target expression is the address of an entity with an optional offset.\n+   --  If so, set Ent to the entity and, if there is an offset, set Off to\n+   --  True, otherwise to False. If it is not possible to determine that the\n+   --  address is of this form, then set Ent to Empty.\n \n    function Find_Parameter_Type (Param : Node_Id) return Entity_Id;\n    --  Return the type of formal parameter Param as determined by its"}]}