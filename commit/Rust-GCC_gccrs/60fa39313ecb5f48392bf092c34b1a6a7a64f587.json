{"sha": "60fa39313ecb5f48392bf092c34b1a6a7a64f587", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBmYTM5MzEzZWNiNWY0ODM5MmJmMDkyYzM0YjFhNmE3YTY0ZjU4Nw==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-04-11T13:08:32Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-04-11T13:08:32Z"}, "message": "re PR fortran/52729 (Symbol has no implicit type in SELECT TYPE block)\n\n2012-04-11  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/52729\n        * resolve.c (resolve_symbol): Fix searching for parent NS decl.\n\n2012-04-11  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/52729\n        * gfortran.dg/block_11.f90: New.\n\nFrom-SVN: r186318", "tree": {"sha": "e2321a8cbf2af07bdd89c5a50d411a2e5266026a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2321a8cbf2af07bdd89c5a50d411a2e5266026a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60fa39313ecb5f48392bf092c34b1a6a7a64f587", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60fa39313ecb5f48392bf092c34b1a6a7a64f587", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60fa39313ecb5f48392bf092c34b1a6a7a64f587", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60fa39313ecb5f48392bf092c34b1a6a7a64f587/comments", "author": null, "committer": null, "parents": [{"sha": "84e60183679b852992c536ef73b11df600ab3cbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84e60183679b852992c536ef73b11df600ab3cbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84e60183679b852992c536ef73b11df600ab3cbb"}], "stats": {"total": 90, "additions": 86, "deletions": 4}, "files": [{"sha": "99063d30ec564978cadd697c331167af176429a8", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60fa39313ecb5f48392bf092c34b1a6a7a64f587/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60fa39313ecb5f48392bf092c34b1a6a7a64f587/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=60fa39313ecb5f48392bf092c34b1a6a7a64f587", "patch": "@@ -1,3 +1,8 @@\n+2012-04-11  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/52729\n+\t* resolve.c (resolve_symbol): Fix searching for parent NS decl.\n+\n 2012-04-08  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/52751"}, {"sha": "34b3e9e23726304c93c6f8408d8f82cdf6c5180b", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60fa39313ecb5f48392bf092c34b1a6a7a64f587/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60fa39313ecb5f48392bf092c34b1a6a7a64f587/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=60fa39313ecb5f48392bf092c34b1a6a7a64f587", "patch": "@@ -12246,7 +12246,10 @@ resolve_symbol (gfc_symbol *sym)\n   symbol_attribute class_attr;\n   gfc_array_spec *as;\n \n-  if (sym->attr.flavor == FL_UNKNOWN)\n+  if (sym->attr.flavor == FL_UNKNOWN\n+      || (sym->attr.flavor == FL_PROCEDURE && !sym->attr.intrinsic\n+\t  && !sym->attr.generic && !sym->attr.external\n+\t  && sym->attr.if_source == IFSRC_UNKNOWN))\n     {\n \n     /* If we find that a flavorless symbol is an interface in one of the\n@@ -12270,9 +12273,10 @@ resolve_symbol (gfc_symbol *sym)\n \n       /* Otherwise give it a flavor according to such attributes as\n \t it has.  */\n-      if (sym->attr.external == 0 && sym->attr.intrinsic == 0)\n+      if (sym->attr.flavor == FL_UNKNOWN && sym->attr.external == 0\n+\t  && sym->attr.intrinsic == 0)\n \tsym->attr.flavor = FL_VARIABLE;\n-      else\n+      else if (sym->attr.flavor == FL_UNKNOWN)\n \t{\n \t  sym->attr.flavor = FL_PROCEDURE;\n \t  if (sym->attr.dimension)"}, {"sha": "d657e47ee60ec7bdd6b020c5038b02ffb5e90d0d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60fa39313ecb5f48392bf092c34b1a6a7a64f587/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60fa39313ecb5f48392bf092c34b1a6a7a64f587/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=60fa39313ecb5f48392bf092c34b1a6a7a64f587", "patch": "@@ -1,3 +1,8 @@\n+2012-04-11  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/52729\n+\t* gfortran.dg/block_11.f90: New.\n+\n 2012-04-11  Nick Clifton  <nickc@redhat.com>\n \n \t* gcc.dg/stack-usage-1.c (SIZE): Define for the RL78.\n@@ -20,7 +25,7 @@\n 2012-04-11  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR 24985\n-        * lib/prune.exp: Add -fno-diagnostics-show-caret.\n+\t* lib/prune.exp: Add -fno-diagnostics-show-caret.\n \n 2012-04-11  Richard Guenther  <rguenther@suse.de>\n "}, {"sha": "83c6519d970f56972967f70e4b6dccb8dbdc04c3", "filename": "gcc/testsuite/gfortran.dg/block_11.f90", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60fa39313ecb5f48392bf092c34b1a6a7a64f587/gcc%2Ftestsuite%2Fgfortran.dg%2Fblock_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60fa39313ecb5f48392bf092c34b1a6a7a64f587/gcc%2Ftestsuite%2Fgfortran.dg%2Fblock_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fblock_11.f90?ref=60fa39313ecb5f48392bf092c34b1a6a7a64f587", "patch": "@@ -0,0 +1,68 @@\n+! { dg-do link }\n+!\n+! PR fortran/52729\n+!\n+! Based on a contribution of Andrew Benson\n+!\n+module testMod\n+  type testType\n+  end type testType\n+contains\n+  subroutine testSub()\n+    implicit none\n+    procedure(double precision ), pointer :: r\n+    class    (testType         ), pointer :: testObject\n+    double precision                      :: testVal\n+\n+    ! Failed as testFunc was BT_UNKNOWN\n+    select type (testObject)\n+    class is (testType)\n+       testVal=testFunc()\n+       r => testFunc\n+    end select\n+    return\n+  end subroutine testSub\n+\n+  double precision function testFunc()\n+    implicit none\n+    return\n+  end function testFunc\n+end module testMod\n+\n+module testMod2\n+  implicit none\n+contains\n+  subroutine testSub()\n+    procedure(double precision ), pointer :: r\n+    double precision                      :: testVal\n+    ! Failed as testFunc was BT_UNKNOWN\n+    block\n+      r => testFunc\n+      testVal=testFunc()\n+    end block\n+  end subroutine testSub\n+\n+  double precision function testFunc()\n+  end function testFunc\n+end module testMod2\n+\n+module m3\n+  implicit none\n+contains\n+  subroutine my_test()\n+    procedure(), pointer :: ptr\n+    ! Before the fix, one had the link error\n+    ! \"undefined reference to `sub.1909'\"\n+    block\n+      ptr => sub\n+      call sub()\n+    end block\n+  end subroutine my_test\n+  subroutine sub(a)\n+    integer, optional :: a\n+  end subroutine sub\n+end module m3\n+\n+end\n+\n+! { dg-final { cleanup-modules \"testmod testmod2 m3\" } }"}]}