{"sha": "739e7bbf1bcd96174b51012936bf9fd5e2b0d82d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM5ZTdiYmYxYmNkOTYxNzRiNTEwMTI5MzZiZjlmZDVlMmIwZDgyZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-12-05T10:06:51Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-12-05T10:06:51Z"}, "message": "[multiple changes]\n\n2012-12-05  Thomas Quinot  <quinot@adacore.com>\n\n\t* err_vars.ads: Fix minor typo in comment.\n\n2012-12-05  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_attr.adb (Analyze_Attribute): Do not analyze the attribute\n\targuments when processing Loop_Entry. Rewrite the analysis of\n\tattribute Loop_Entry to handle an optional loop name.\n\t(Convert_To_Indexed_Component): New routine.\n\t(Eval_Attribute): Remove ??? comment and explain\n\twhy Loop_Entry does not need to be evaluated.\n\nFrom-SVN: r194189", "tree": {"sha": "ffae983d073798e5c3cd09ef3bc9e7537c3c90db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffae983d073798e5c3cd09ef3bc9e7537c3c90db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/739e7bbf1bcd96174b51012936bf9fd5e2b0d82d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/739e7bbf1bcd96174b51012936bf9fd5e2b0d82d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/739e7bbf1bcd96174b51012936bf9fd5e2b0d82d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/739e7bbf1bcd96174b51012936bf9fd5e2b0d82d/comments", "author": null, "committer": null, "parents": [{"sha": "698ef65e2fee6c848f3b6ae0bf4a099c811e0022", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/698ef65e2fee6c848f3b6ae0bf4a099c811e0022", "html_url": "https://github.com/Rust-GCC/gccrs/commit/698ef65e2fee6c848f3b6ae0bf4a099c811e0022"}], "stats": {"total": 129, "additions": 109, "deletions": 20}, "files": [{"sha": "4aafa83a827b60850d39521d20ebc7d4d576cc73", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/739e7bbf1bcd96174b51012936bf9fd5e2b0d82d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/739e7bbf1bcd96174b51012936bf9fd5e2b0d82d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=739e7bbf1bcd96174b51012936bf9fd5e2b0d82d", "patch": "@@ -1,3 +1,16 @@\n+2012-12-05  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* err_vars.ads: Fix minor typo in comment.\n+\n+2012-12-05  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute): Do not analyze the attribute\n+\targuments when processing Loop_Entry. Rewrite the analysis of\n+\tattribute Loop_Entry to handle an optional loop name.\n+\t(Convert_To_Indexed_Component): New routine.\n+\t(Eval_Attribute): Remove ??? comment and explain\n+\twhy Loop_Entry does not need to be evaluated.\n+\n 2012-12-01  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR ada/52110"}, {"sha": "64d68e0630c3a8dbbdc0080fd358740731b5f9a6", "filename": "gcc/ada/err_vars.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/739e7bbf1bcd96174b51012936bf9fd5e2b0d82d/gcc%2Fada%2Ferr_vars.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/739e7bbf1bcd96174b51012936bf9fd5e2b0d82d/gcc%2Fada%2Ferr_vars.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferr_vars.ads?ref=739e7bbf1bcd96174b51012936bf9fd5e2b0d82d", "patch": "@@ -40,7 +40,7 @@ package Err_Vars is\n \n    --  Note on error counts (Serious_Errors_Detected, Total_Errors_Detected,\n    --  Warnings_Detected). These counts might more logically appear in this\n-   --  unit, but we place them in atree.adb, because of licensing issues. We\n+   --  unit, but we place them in atree.ads, because of licensing issues. We\n    --  need to be able to access these counts from units that have the more\n    --  general licensing conditions.\n "}, {"sha": "cfb0983b856beeb915eeb098fc563a454df50b95", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 95, "deletions": 19, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/739e7bbf1bcd96174b51012936bf9fd5e2b0d82d/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/739e7bbf1bcd96174b51012936bf9fd5e2b0d82d/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=739e7bbf1bcd96174b51012936bf9fd5e2b0d82d", "patch": "@@ -875,7 +875,7 @@ package body Sem_Attr is\n       procedure Bad_Attribute_For_Predicate is\n       begin\n          if Is_Scalar_Type (P_Type)\n-           and then  Comes_From_Source (N)\n+           and then Comes_From_Source (N)\n          then\n             Error_Msg_Name_1 := Aname;\n             Bad_Predicated_Subtype_Use\n@@ -2120,6 +2120,20 @@ package body Sem_Attr is\n          E1 := Empty;\n          E2 := Empty;\n \n+      --  Do not analyze the expressions of attribute Loop_Entry. Depending on\n+      --  the number of arguments and/or the nature of the first argument, the\n+      --  whole attribute reference may be rewritten into an indexed component.\n+      --  In the case of two or more arguments, the expressions are analyzed\n+      --  when the indexed component is analyzed, otherwise the sole argument\n+      --  is preanalyzed to determine whether it is a loop name.\n+\n+      elsif Aname = Name_Loop_Entry then\n+         E1 := First (Exprs);\n+\n+         if Present (E1) then\n+            E2 := Next (E1);\n+         end if;\n+\n       else\n          E1 := First (Exprs);\n          Analyze (E1);\n@@ -3610,6 +3624,11 @@ package body Sem_Attr is\n          --  Inspect the prefix for any uses of entities declared within the\n          --  related loop. Loop_Id denotes the loop identifier.\n \n+         procedure Convert_To_Indexed_Component;\n+         --  Transform the attribute reference into an indexed component where\n+         --  the prefix is Prefix'Loop_Entry and the expressions are associated\n+         --  with the indexed component.\n+\n          --------------------------------\n          -- Check_References_In_Prefix --\n          --------------------------------\n@@ -3682,6 +3701,25 @@ package body Sem_Attr is\n             Check_References (P);\n          end Check_References_In_Prefix;\n \n+         ----------------------------------\n+         -- Convert_To_Indexed_Component --\n+         ----------------------------------\n+\n+         procedure Convert_To_Indexed_Component is\n+            New_Loop_Entry : constant Node_Id := Relocate_Node (N);\n+\n+         begin\n+            --  The new Loop_Entry loses its arguments. They will be converted\n+            --  into the expressions of the indexed component.\n+\n+            Set_Expressions (New_Loop_Entry, No_List);\n+\n+            Rewrite (N,\n+              Make_Indexed_Component (Loc,\n+                Prefix      => New_Loop_Entry,\n+                Expressions => Exprs));\n+         end Convert_To_Indexed_Component;\n+\n          --  Local variables\n \n          Enclosing_Loop    : Node_Id;\n@@ -3694,8 +3732,48 @@ package body Sem_Attr is\n \n       begin\n          S14_Attribute;\n-         Check_E1;\n-         Analyze (E1);\n+\n+         --  The attribute reference appears as\n+         --    Prefix'Loop_Entry (Expr1, Expr2, ... ExprN)\n+\n+         --  In this case, the loop name is omitted and the arguments are part\n+         --  of an indexed component. Transform the whole attribute reference\n+         --  to reflect this scenario.\n+\n+         if Present (E2) then\n+            Convert_To_Indexed_Component;\n+            Analyze (N);\n+            return;\n+\n+         --  The attribute reference appears as\n+         --    Prefix'Loop_Entry (Loop_Name)\n+         --      or\n+         --    Prefix'Loop_Entry (Expr1)\n+\n+         --  Depending on what Expr1 resolves to, either rewrite the reference\n+         --  into an indexed component or continue with the analysis.\n+\n+         elsif Present (E1) then\n+\n+            --  Do not expand the argument as it may have side effects. Simply\n+            --  preanalyze to determine whether it is a loop or something else.\n+\n+            Preanalyze_And_Resolve (E1);\n+\n+            if Is_Entity_Name (E1)\n+              and then Present (Entity (E1))\n+              and then Ekind (Entity (E1)) = E_Loop\n+            then\n+               Loop_Id := Entity (E1);\n+\n+            --  The argument is not a loop name\n+\n+            else\n+               Convert_To_Indexed_Component;\n+               Analyze (N);\n+               return;\n+            end if;\n+         end if;\n \n          --  The prefix must denote an object\n \n@@ -3711,20 +3789,6 @@ package body Sem_Attr is\n             Error_Attr_P (\"prefix of attribute % cannot be limited\");\n          end if;\n \n-         --  The sole argument of a Loop_Entry must be a loop name\n-\n-         if Is_Entity_Name (E1) then\n-            Loop_Id := Entity (E1);\n-         end if;\n-\n-         if No (Loop_Id)\n-           or else Ekind (Loop_Id) /= E_Loop\n-           or else not In_Open_Scopes (Loop_Id)\n-         then\n-            Error_Attr (\"argument of % must be a valid loop name\", E1);\n-            return;\n-         end if;\n-\n          --  Climb the parent chain to verify the location of the attribute and\n          --  find the enclosing loop.\n \n@@ -3751,6 +3815,15 @@ package body Sem_Attr is\n               and then Present (Identifier (Stmt))\n             then\n                Enclosing_Loop := Stmt;\n+\n+               --  The original attribute reference may lack a loop name. Use\n+               --  the name of the enclosing loop because it is the related\n+               --  loop.\n+\n+               if No (Loop_Id) then\n+                  Loop_Id := Entity (Identifier (Enclosing_Loop));\n+               end if;\n+\n                exit;\n \n             --  Prevent the search from going too far\n@@ -3790,7 +3863,7 @@ package body Sem_Attr is\n \n             else\n                Error_Attr\n-                 (\"cannot appear in program unit or accept statement\", N);\n+                 (\"attribute % cannot appear in body or accept statement\", N);\n                exit;\n             end if;\n          end loop;\n@@ -7235,7 +7308,10 @@ package body Sem_Attr is\n       -- Loop_Entry --\n       ----------------\n \n-      --  This null processing requires an explanatory comment???\n+      --  Loop_Entry acts as an alias of a constant initialized to the prefix\n+      --  of the said attribute at the point of entry into the related loop. As\n+      --  such, the attribute reference does not need to be evaluated because\n+      --  the prefix is the one that is evaluted.\n \n       when Attribute_Loop_Entry =>\n          null;"}]}