{"sha": "67f5655f98d39da5e593381ebcc35a1af9540ffa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdmNTY1NWY5OGQzOWRhNWU1OTMzODFlYmNjMzVhMWFmOTU0MGZmYQ==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2006-01-29T09:10:48Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2006-01-29T09:10:48Z"}, "message": "call.c (alloc_conversion): Use cast when converting from void *.\n\n        * call.c (alloc_conversion): Use cast when converting from\n\tvoid *.\n        (alloc_conversions): Likewise.\n        (add_candidate): Likewise.\n        (print_z_candidates): Likewise.\n        (add_warning): Likewise.\n        * pt.c (retrieve_local_specialization): Likewise.\n        (process_partial_specialization): Likewise.\n        (mangle_class_name_for_template): Likewise.\n        (tsubst_template_args): Likewise.\n        * typeck2.c (pat_calc_hash): Likewise.\n        (pat_compare): Likewise.\n        (abstract_virtuals_error): Likewise.\n        * class.c (method_name_cmp): Likewise.\n        (resort_method_name_cmp): Likewise.\n        (get_vfield_name): Likewise.\n        * decl2.c (generate_ctor_and_dtor_functions_for_priority):\n\tLikewise.\n        * lex.c (init_reswords): Likewise.\n        * rtti.c (create_pseudo_type_info): Likewise.\n        * search.c (dfs_lookup_base): Likewise.\n        (dfs_dcast_hint_pre): Likewise.\n        (dfs_dcast_hint_post): Likewise.\n        * tree.c (hash_tree_cons): Likewise.\n        * repo.c (extract_string): Likewise.\n        (afgets): Likewise.\n        * cp-objcp-common.c (decl_shadowed_for_var_lookup): Likewise.\n        * g++spec.c (lang_specific_driver): Likewise.\n\nFrom-SVN: r110366", "tree": {"sha": "7c783a02942f4003c69cd3138d64a9042883668f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c783a02942f4003c69cd3138d64a9042883668f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67f5655f98d39da5e593381ebcc35a1af9540ffa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67f5655f98d39da5e593381ebcc35a1af9540ffa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67f5655f98d39da5e593381ebcc35a1af9540ffa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67f5655f98d39da5e593381ebcc35a1af9540ffa/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2990f854e5290b9b23b6f6aeea977d958d80eb58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2990f854e5290b9b23b6f6aeea977d958d80eb58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2990f854e5290b9b23b6f6aeea977d958d80eb58"}], "stats": {"total": 99, "additions": 65, "deletions": 34}, "files": [{"sha": "05d7756d0579d7e96fee8cdb8a18350d3d287358", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67f5655f98d39da5e593381ebcc35a1af9540ffa/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67f5655f98d39da5e593381ebcc35a1af9540ffa/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=67f5655f98d39da5e593381ebcc35a1af9540ffa", "patch": "@@ -1,3 +1,32 @@\n+2006-01-29  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* call.c (alloc_conversion): Use cast when converting from void *.\n+\t(alloc_conversions): Likewise.\n+\t(add_candidate): Likewise.\n+\t(print_z_candidates): Likewise.\n+\t(add_warning): Likewise.\n+\t* pt.c (retrieve_local_specialization): Likewise.\n+\t(process_partial_specialization): Likewise.\n+\t(mangle_class_name_for_template): Likewise.\n+\t(tsubst_template_args): Likewise.\n+\t* typeck2.c (pat_calc_hash): Likewise.\n+\t(pat_compare): Likewise.\n+\t(abstract_virtuals_error): Likewise.\n+\t* class.c (method_name_cmp): Likewise.\n+\t(resort_method_name_cmp): Likewise.\n+\t(get_vfield_name): Likewise.\n+\t* decl2.c (generate_ctor_and_dtor_functions_for_priority): Likewise.\n+\t* lex.c (init_reswords): Likewise.\n+\t* rtti.c (create_pseudo_type_info): Likewise.\n+\t* search.c (dfs_lookup_base): Likewise.\n+\t(dfs_dcast_hint_pre): Likewise.\n+\t(dfs_dcast_hint_post): Likewise.\n+\t* tree.c (hash_tree_cons): Likewise.\n+\t* repo.c (extract_string): Likewise.\n+\t(afgets): Likewise.\n+\t* cp-objcp-common.c (decl_shadowed_for_var_lookup): Likewise.\n+\t* g++spec.c (lang_specific_driver): Likewise.\n+\n 2006-01-28  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* class.c (check_bases): Likewise."}, {"sha": "b5998fa13e54e62c28fbc40bbb45c9e766501f2f", "filename": "gcc/cp/call.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67f5655f98d39da5e593381ebcc35a1af9540ffa/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67f5655f98d39da5e593381ebcc35a1af9540ffa/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=67f5655f98d39da5e593381ebcc35a1af9540ffa", "patch": "@@ -468,7 +468,7 @@ static conversion *\n alloc_conversion (conversion_kind kind)\n {\n   conversion *c;\n-  c = conversion_obstack_alloc (sizeof (conversion));\n+  c = (conversion *) conversion_obstack_alloc (sizeof (conversion));\n   c->kind = kind;\n   return c;\n }\n@@ -493,7 +493,7 @@ validate_conversion_obstack (void)\n static conversion **\n alloc_conversions (size_t n)\n {\n-  return conversion_obstack_alloc (n * sizeof (conversion *));\n+  return (conversion **) conversion_obstack_alloc (n * sizeof (conversion *));\n }\n \n static conversion *\n@@ -1269,8 +1269,8 @@ add_candidate (struct z_candidate **candidates,\n \t       tree access_path, tree conversion_path,\n \t       int viable)\n {\n-  struct z_candidate *cand\n-    = conversion_obstack_alloc (sizeof (struct z_candidate));\n+  struct z_candidate *cand = (struct z_candidate *)\n+    conversion_obstack_alloc (sizeof (struct z_candidate));\n \n   cand->fn = fn;\n   cand->args = args;\n@@ -2442,7 +2442,7 @@ print_z_candidates (struct z_candidate *candidates)\n       /* Indent successive candidates by the width of the translation\n \t of the above string.  */\n       size_t len = gcc_gettext_width (str) + 1;\n-      char *spaces = alloca (len);\n+      char *spaces = (char *) alloca (len);\n       memset (spaces, ' ', len-1);\n       spaces[len - 1] = '\\0';\n \n@@ -5931,9 +5931,8 @@ source_type (conversion *t)\n static void\n add_warning (struct z_candidate *winner, struct z_candidate *loser)\n {\n-  candidate_warning *cw;\n-\n-  cw = conversion_obstack_alloc (sizeof (candidate_warning));\n+  candidate_warning *cw = (candidate_warning *)\n+    conversion_obstack_alloc (sizeof (candidate_warning));\n   cw->loser = loser;\n   cw->next = winner->warnings;\n   winner->warnings = cw;"}, {"sha": "fd50f1733f69f265da3c4034ffb22785aca9e15c", "filename": "gcc/cp/class.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67f5655f98d39da5e593381ebcc35a1af9540ffa/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67f5655f98d39da5e593381ebcc35a1af9540ffa/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=67f5655f98d39da5e593381ebcc35a1af9540ffa", "patch": "@@ -1617,8 +1617,8 @@ static struct {\n static int\n method_name_cmp (const void* m1_p, const void* m2_p)\n {\n-  const tree *const m1 = m1_p;\n-  const tree *const m2 = m2_p;\n+  const tree *const m1 = (const tree *) m1_p;\n+  const tree *const m2 = (const tree *) m2_p;\n \n   if (*m1 == NULL_TREE && *m2 == NULL_TREE)\n     return 0;\n@@ -1637,8 +1637,8 @@ method_name_cmp (const void* m1_p, const void* m2_p)\n static int\n resort_method_name_cmp (const void* m1_p, const void* m2_p)\n {\n-  const tree *const m1 = m1_p;\n-  const tree *const m2 = m2_p;\n+  const tree *const m1 = (const tree *) m1_p;\n+  const tree *const m2 = (const tree *) m2_p;\n   if (*m1 == NULL_TREE && *m2 == NULL_TREE)\n     return 0;\n   if (*m1 == NULL_TREE)\n@@ -6194,7 +6194,8 @@ get_vfield_name (tree type)\n     }\n \n   type = BINFO_TYPE (binfo);\n-  buf = alloca (sizeof (VFIELD_NAME_FORMAT) + TYPE_NAME_LENGTH (type) + 2);\n+  buf = (char *) alloca (sizeof (VFIELD_NAME_FORMAT)\n+                         + TYPE_NAME_LENGTH (type) + 2);\n   sprintf (buf, VFIELD_NAME_FORMAT,\n \t   IDENTIFIER_POINTER (constructor_name (type)));\n   return get_identifier (buf);"}, {"sha": "8dae00f742a88ce5d0dacd0aba40ca506bda1098", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67f5655f98d39da5e593381ebcc35a1af9540ffa/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67f5655f98d39da5e593381ebcc35a1af9540ffa/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=67f5655f98d39da5e593381ebcc35a1af9540ffa", "patch": "@@ -214,8 +214,8 @@ decl_shadowed_for_var_lookup (tree from)\n   struct tree_map *h, in;\n   in.from = from;\n \n-  h = htab_find_with_hash (shadowed_var_for_decl, &in, \n-\t\t\t   htab_hash_pointer (from));\n+  h = (struct tree_map *) htab_find_with_hash (shadowed_var_for_decl, &in, \n+                                               htab_hash_pointer (from));\n   if (h)\n     return h->to;\n   return NULL_TREE;"}, {"sha": "be9f326b156035a7df87b197a8253e29786129f0", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67f5655f98d39da5e593381ebcc35a1af9540ffa/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67f5655f98d39da5e593381ebcc35a1af9540ffa/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=67f5655f98d39da5e593381ebcc35a1af9540ffa", "patch": "@@ -2683,7 +2683,7 @@ generate_ctor_or_dtor_function (bool constructor_p, int priority,\n static int\n generate_ctor_and_dtor_functions_for_priority (splay_tree_node n, void * data)\n {\n-  location_t *locus = data;\n+  location_t *locus = (location_t *) data;\n   int priority = (int) n->key;\n   priority_info pi = (priority_info) n->value;\n "}, {"sha": "7e10bc9996f99dcb7d81926bac5daaa8a719b983", "filename": "gcc/cp/g++spec.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67f5655f98d39da5e593381ebcc35a1af9540ffa/gcc%2Fcp%2Fg%2B%2Bspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67f5655f98d39da5e593381ebcc35a1af9540ffa/gcc%2Fcp%2Fg%2B%2Bspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fg%2B%2Bspec.c?ref=67f5655f98d39da5e593381ebcc35a1af9540ffa", "patch": "@@ -113,7 +113,7 @@ lang_specific_driver (int *in_argc, const char *const **in_argv,\n   argv = *in_argv;\n   added_libraries = *in_added_libraries;\n \n-  args = xcalloc (argc, sizeof (int));\n+  args = XCNEWVEC (int, argc);\n \n   for (i = 1; i < argc; i++)\n     {"}, {"sha": "b3d8b608f75867463f3d7b03b15b2ee2a9bade29", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67f5655f98d39da5e593381ebcc35a1af9540ffa/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67f5655f98d39da5e593381ebcc35a1af9540ffa/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=67f5655f98d39da5e593381ebcc35a1af9540ffa", "patch": "@@ -316,7 +316,7 @@ init_reswords (void)\n \t      | D_OBJC\n \t      | (flag_no_gnu_keywords ? D_EXT : 0));\n \n-  ridpointers = ggc_calloc ((int) RID_MAX, sizeof (tree));\n+  ridpointers = GGC_CNEWVEC (tree, (int) RID_MAX);\n   for (i = 0; i < ARRAY_SIZE (reswords); i++)\n     {\n       id = get_identifier (reswords[i].word);"}, {"sha": "c8c470e901849e2808a4cac89aaab51b91e02371", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67f5655f98d39da5e593381ebcc35a1af9540ffa/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67f5655f98d39da5e593381ebcc35a1af9540ffa/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=67f5655f98d39da5e593381ebcc35a1af9540ffa", "patch": "@@ -899,8 +899,8 @@ retrieve_specialization (tree tmpl, tree args,\n static tree\n retrieve_local_specialization (tree tmpl)\n {\n-  tree spec = htab_find_with_hash (local_specializations, tmpl,\n-\t\t\t\t   htab_hash_pointer (tmpl));\n+  tree spec = (tree) htab_find_with_hash (local_specializations, tmpl,\n+                                          htab_hash_pointer (tmpl));\n   return spec ? TREE_PURPOSE (spec) : NULL_TREE;\n }\n \n@@ -2635,10 +2635,10 @@ process_partial_specialization (tree decl)\n \n      or some such would have been OK.  */\n   tpd.level = TMPL_PARMS_DEPTH (current_template_parms);\n-  tpd.parms = alloca (sizeof (int) * ntparms);\n+  tpd.parms = (int *) alloca (sizeof (int) * ntparms);\n   memset (tpd.parms, 0, sizeof (int) * ntparms);\n \n-  tpd.arg_uses_template_parms = alloca (sizeof (int) * nargs);\n+  tpd.arg_uses_template_parms = (int *) alloca (sizeof (int) * nargs);\n   memset (tpd.arg_uses_template_parms, 0, sizeof (int) * nargs);\n   for (i = 0; i < nargs; ++i)\n     {\n@@ -2709,11 +2709,11 @@ process_partial_specialization (tree decl)\n \t\t{\n \t\t  /* We haven't yet initialized TPD2.  Do so now.  */\n \t\t  tpd2.arg_uses_template_parms\n-\t\t    = alloca (sizeof (int) * nargs);\n+\t\t    = (int *) alloca (sizeof (int) * nargs);\n \t\t  /* The number of parameters here is the number in the\n \t\t     main template, which, as checked in the assertion\n \t\t     above, is NARGS.  */\n-\t\t  tpd2.parms = alloca (sizeof (int) * nargs);\n+\t\t  tpd2.parms = (int *) alloca (sizeof (int) * nargs);\n \t\t  tpd2.level =\n \t\t    TMPL_PARMS_DEPTH (DECL_TEMPLATE_PARMS (maintmpl));\n \t\t}\n@@ -4123,7 +4123,7 @@ mangle_class_name_for_template (const char* name, tree parms, tree arglist)\n     gcc_obstack_init (&scratch_obstack);\n   else\n     obstack_free (&scratch_obstack, scratch_firstobj);\n-  scratch_firstobj = obstack_alloc (&scratch_obstack, 1);\n+  scratch_firstobj = (char *) obstack_alloc (&scratch_obstack, 1);\n \n #define ccat(C)\tobstack_1grow (&scratch_obstack, (C));\n #define cat(S)\tobstack_grow (&scratch_obstack, (S), strlen (S))\n@@ -5981,7 +5981,7 @@ tsubst_template_args (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n {\n   int len = TREE_VEC_LENGTH (t);\n   int need_new = 0, i;\n-  tree *elts = alloca (len * sizeof (tree));\n+  tree *elts = (tree *) alloca (len * sizeof (tree));\n \n   for (i = 0; i < len; i++)\n     {"}, {"sha": "54d82c7165ebb9bd7cba2d5adaf5a759b654ef74", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67f5655f98d39da5e593381ebcc35a1af9540ffa/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67f5655f98d39da5e593381ebcc35a1af9540ffa/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=67f5655f98d39da5e593381ebcc35a1af9540ffa", "patch": "@@ -1124,7 +1124,7 @@ create_pseudo_type_info (int tk, const char *real_name, ...)\n   va_start (ap, real_name);\n \n   /* Generate the pseudo type name.  */\n-  pseudo_name = alloca (strlen (real_name) + 30);\n+  pseudo_name = (char *) alloca (strlen (real_name) + 30);\n   strcpy (pseudo_name, real_name);\n   strcat (pseudo_name, \"_pseudo\");\n   if (tk >= TK_FIXED)"}, {"sha": "ec572d0b6df67c1c410c767024514b85a318cd9a", "filename": "gcc/cp/search.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67f5655f98d39da5e593381ebcc35a1af9540ffa/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67f5655f98d39da5e593381ebcc35a1af9540ffa/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=67f5655f98d39da5e593381ebcc35a1af9540ffa", "patch": "@@ -97,7 +97,7 @@ struct lookup_base_data_s\n static tree\n dfs_lookup_base (tree binfo, void *data_)\n {\n-  struct lookup_base_data_s *data = data_;\n+  struct lookup_base_data_s *data = (struct lookup_base_data_s *) data_;\n \n   if (SAME_BINFO_TYPE_P (BINFO_TYPE (binfo), data->base))\n     {\n@@ -306,7 +306,7 @@ struct dcast_data_s\n static tree\n dfs_dcast_hint_pre (tree binfo, void *data_)\n {\n-  struct dcast_data_s *data = data_;\n+  struct dcast_data_s *data = (struct dcast_data_s *) data_;\n \n   if (BINFO_VIRTUAL_P (binfo))\n     data->virt_depth++;\n@@ -334,7 +334,7 @@ dfs_dcast_hint_pre (tree binfo, void *data_)\n static tree\n dfs_dcast_hint_post (tree binfo, void *data_)\n {\n-  struct dcast_data_s *data = data_;\n+  struct dcast_data_s *data = (struct dcast_data_s *) data_;\n \n   if (BINFO_VIRTUAL_P (binfo))\n     data->virt_depth--;"}, {"sha": "16e87ec2d63e0e9df9ff2e719412381faa9e49c3", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67f5655f98d39da5e593381ebcc35a1af9540ffa/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67f5655f98d39da5e593381ebcc35a1af9540ffa/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=67f5655f98d39da5e593381ebcc35a1af9540ffa", "patch": "@@ -756,7 +756,7 @@ hash_tree_cons (tree purpose, tree value, tree chain)\n   /* If not, create a new node.  */\n   if (!*slot)\n     *slot = tree_cons (purpose, value, chain);\n-  return *slot;\n+  return (tree) *slot;\n }\n \n /* Constructor for hashed lists.  */"}, {"sha": "fe5b3dff78e84939bbd5ab8c821fd78a20b3c84f", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67f5655f98d39da5e593381ebcc35a1af9540ffa/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67f5655f98d39da5e593381ebcc35a1af9540ffa/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=67f5655f98d39da5e593381ebcc35a1af9540ffa", "patch": "@@ -145,7 +145,8 @@ struct pending_abstract_type GTY((chain_next (\"%h.next\")))\n static hashval_t\n pat_calc_hash (const void* val)\n {\n-  const struct pending_abstract_type* pat = val;\n+  const struct pending_abstract_type *pat =\n+     (const struct pending_abstract_type *) val;\n   return (hashval_t) TYPE_UID (pat->type);\n }\n \n@@ -156,7 +157,8 @@ pat_calc_hash (const void* val)\n static int\n pat_compare (const void* val1, const void* val2)\n {\n-  const struct pending_abstract_type* pat1 = val1;\n+  const struct pending_abstract_type *pat1 =\n+     (const struct pending_abstract_type *) val1;\n   tree type2 = (tree)val2;\n \n   return (pat1->type == type2);\n@@ -270,7 +272,7 @@ abstract_virtuals_error (tree decl, tree type)\n \t\t    ? DECL_SOURCE_LOCATION (decl)\n \t\t    : input_location);\n \n-      pat->next = *slot;\n+      pat->next = (struct pending_abstract_type *) *slot;\n       *slot = pat;\n \n       return 0;"}]}