{"sha": "cf5d0fc2d1adcd53b52c5d3f946822b687546c0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y1ZDBmYzJkMWFkY2Q1M2I1MmM1ZDNmOTQ2ODIyYjY4NzU0NmMwYg==", "commit": {"author": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2020-05-21T20:21:34Z"}, "committer": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2020-07-30T17:40:12Z"}, "message": "[PATCH] RS6000 Add testlsbb by Byte operations\n\nAdd support for new instructions to test LSB by Byte.\n\n2020-07-29  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\ngcc/ChangeLog:\n\n\t* config/rs6000/altivec.h (vec_test_lsbb_all_ones): New define.\n\t(vec_test_lsbb_all_zeros): New define.\n\t* config/rs6000/rs6000-builtin.def (BU_P10_VSX_1): New built-in\n\thandling macro.\n\t(XVTLSBB_ZEROS, XVTLSBB_ONES): New builtin defines.\n\t(xvtlsbb_all_zeros, xvtlsbb_all_ones): New builtin overloads.\n\t* config/rs6000/rs6000-call.c (P10_BUILTIN_VEC_XVTLSBB_ZEROS,\n\tP10_BUILTIN_VEC_XVTLSBB_ONES): New altivec_builtin_types entries.\n\t* config/rs6000/rs6000.md (UNSPEC_XVTLSBB):  New unspec.\n\t* config/rs6000/vsx.md (*xvtlsbb_internal): New instruction define.\n\t(xvtlsbbo, xvtlsbbz): New instruction expands.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/powerpc/lsbb-runnable.c: New test.\n\t* gcc.target/powerpc/lsbb.c: New test.", "tree": {"sha": "7eee2dee44493b6b85cece27991332f7e18ede1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7eee2dee44493b6b85cece27991332f7e18ede1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf5d0fc2d1adcd53b52c5d3f946822b687546c0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf5d0fc2d1adcd53b52c5d3f946822b687546c0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf5d0fc2d1adcd53b52c5d3f946822b687546c0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf5d0fc2d1adcd53b52c5d3f946822b687546c0b/comments", "author": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c931e8d5a96463427040b0d11f9c4352ac22b2b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c931e8d5a96463427040b0d11f9c4352ac22b2b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c931e8d5a96463427040b0d11f9c4352ac22b2b0"}], "stats": {"total": 152, "additions": 152, "deletions": 0}, "files": [{"sha": "119fb1caba4706518fa3f9ad805d12f1681e8c77", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf5d0fc2d1adcd53b52c5d3f946822b687546c0b/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf5d0fc2d1adcd53b52c5d3f946822b687546c0b/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=cf5d0fc2d1adcd53b52c5d3f946822b687546c0b", "patch": "@@ -493,6 +493,9 @@\n #define vec_cntlz_lsbb __builtin_vec_vclzlsbb\n #define vec_cnttz_lsbb __builtin_vec_vctzlsbb\n \n+#define vec_test_lsbb_all_ones __builtin_vec_xvtlsbb_all_ones\n+#define vec_test_lsbb_all_zeros __builtin_vec_xvtlsbb_all_zeros\n+\n #define vec_xlx __builtin_vec_vextulx\n #define vec_xrx __builtin_vec_vexturx\n #endif"}, {"sha": "38f859f04557bda780ebc3d61c5b4f5bf9a519b7", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf5d0fc2d1adcd53b52c5d3f946822b687546c0b/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf5d0fc2d1adcd53b52c5d3f946822b687546c0b/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=cf5d0fc2d1adcd53b52c5d3f946822b687546c0b", "patch": "@@ -1062,6 +1062,14 @@\n \t\t     | RS6000_BTC_QUATERNARY),\t\t\t\t\\\n \t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n \n+#define BU_P10_VSX_1(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n+  RS6000_BUILTIN_1 (P10_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+\t\t    \"__builtin_vsx_\" NAME,\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_P10,\t\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_UNARY),\t\t\t\t\\\n+\t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n+\n #define BU_P10_OVERLOAD_1(ENUM, NAME)\t\t\t\t\t\\\n   RS6000_BUILTIN_1 (P10_BUILTIN_VEC_ ## ENUM,\t\t/* ENUM */\t\\\n \t\t    \"__builtin_vec_\" NAME,\t\t/* NAME */\t\\\n@@ -2736,6 +2744,9 @@ BU_P10V_1 (VSTRIHR_P, \"vstrihr_p\", CONST, vstrir_p_v8hi)\n BU_P10V_1 (VSTRIBL_P, \"vstribl_p\", CONST, vstril_p_v16qi)\n BU_P10V_1 (VSTRIHL_P, \"vstrihl_p\", CONST, vstril_p_v8hi)\n \n+BU_P10_VSX_1 (XVTLSBB_ZEROS, \"xvtlsbb_all_zeros\", CONST, xvtlsbbz)\n+BU_P10_VSX_1 (XVTLSBB_ONES, \"xvtlsbb_all_ones\", CONST, xvtlsbbo)\n+\n BU_P10V_1 (MTVSRBM, \"mtvsrbm\", CONST, vec_mtvsr_v16qi)\n BU_P10V_1 (MTVSRHM, \"mtvsrhm\", CONST, vec_mtvsr_v8hi)\n BU_P10V_1 (MTVSRWM, \"mtvsrwm\", CONST, vec_mtvsr_v4si)\n@@ -2771,6 +2782,10 @@ BU_P10_OVERLOAD_1 (VSTRIL, \"stril\")\n \n BU_P10_OVERLOAD_1 (VSTRIR_P, \"strir_p\")\n BU_P10_OVERLOAD_1 (VSTRIL_P, \"stril_p\")\n+\n+BU_P10_OVERLOAD_1 (XVTLSBB_ZEROS, \"xvtlsbb_all_zeros\")\n+BU_P10_OVERLOAD_1 (XVTLSBB_ONES, \"xvtlsbb_all_ones\")\n+\n \f\n BU_P10_OVERLOAD_1 (MTVSRBM, \"mtvsrbm\")\n BU_P10_OVERLOAD_1 (MTVSRHM, \"mtvsrhm\")"}, {"sha": "ff4c2537fada2612effc6e04537ade9441924c03", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf5d0fc2d1adcd53b52c5d3f946822b687546c0b/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf5d0fc2d1adcd53b52c5d3f946822b687546c0b/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=cf5d0fc2d1adcd53b52c5d3f946822b687546c0b", "patch": "@@ -5681,6 +5681,11 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n   { P10_BUILTIN_VEC_VEXTRACTM, P10_BUILTIN_VEXTRACTMQ,\n     RS6000_BTI_INTSI, RS6000_BTI_unsigned_V1TI, 0, 0 },\n \n+ { P10_BUILTIN_VEC_XVTLSBB_ZEROS, P10_BUILTIN_XVTLSBB_ZEROS,\n+    RS6000_BTI_INTSI, RS6000_BTI_unsigned_V16QI, 0, 0 },\n+ { P10_BUILTIN_VEC_XVTLSBB_ONES, P10_BUILTIN_XVTLSBB_ONES,\n+    RS6000_BTI_INTSI, RS6000_BTI_unsigned_V16QI, 0, 0 },\n+\n   { RS6000_BUILTIN_NONE, RS6000_BUILTIN_NONE, 0, 0, 0, 0 }\n };\n \f"}, {"sha": "48f1f1c68765a3fc3d4bd212250dc7fe7411ecc8", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf5d0fc2d1adcd53b52c5d3f946822b687546c0b/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf5d0fc2d1adcd53b52c5d3f946822b687546c0b/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=cf5d0fc2d1adcd53b52c5d3f946822b687546c0b", "patch": "@@ -77,6 +77,7 @@\n    UNSPEC_TLS_GET_ADDR\n    UNSPEC_MOVESI_FROM_CR\n    UNSPEC_MOVESI_TO_CR\n+   UNSPEC_XVTLSBB\n    UNSPEC_TLSDTPREL\n    UNSPEC_TLSDTPRELHA\n    UNSPEC_TLSDTPRELLO"}, {"sha": "a4dded4845d013b3dfd27de43a0b11ec28c3d7ad", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf5d0fc2d1adcd53b52c5d3f946822b687546c0b/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf5d0fc2d1adcd53b52c5d3f946822b687546c0b/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=cf5d0fc2d1adcd53b52c5d3f946822b687546c0b", "patch": "@@ -1985,6 +1985,45 @@\n   \"xvcmpgt<sd>p. %x0,%x1,%x2\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n+;; xvtlsbb BF,XB\n+;; Set the CR field BF to indicate if the lowest bit (bit 7) of every byte\n+;; element in VSR[XB] is equal to 1 (ALL_TRUE) or equal to 0 (ALL_FALSE).\n+(define_insn \"*xvtlsbb_internal\"\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=y\")\n+\t(unspec:CC [(match_operand:V16QI 1 \"vsx_register_operand\" \"wa\")]\n+\t UNSPEC_XVTLSBB))]\n+  \"TARGET_POWER10\"\n+  \"xvtlsbb %0,%x1\"\n+  [(set_attr \"type\" \"logical\")])\n+\n+;; Vector Test Least Significant Bit by Byte\n+;; for the implementation of the builtin\n+;;     __builtin_vec_test_lsbb_all_ones\n+;;     int vec_test_lsbb_all_ones (vector unsigned char);\n+;; and\n+;;     __builtin_vec_test_lsbb_all_zeros\n+;;     int vec_test_lsbb_all_zeros (vector unsigned char);\n+(define_expand \"xvtlsbbo\"\n+  [(set (match_dup 2)\n+\t(unspec:CC [(match_operand:V16QI 1 \"vsx_register_operand\" \"v\")]\n+\t UNSPEC_XVTLSBB))\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(lt:SI (match_dup 2) (const_int 0)))]\n+  \"TARGET_POWER10\"\n+{\n+   operands[2] = gen_reg_rtx (CCmode);\n+})\n+(define_expand \"xvtlsbbz\"\n+  [(set (match_dup 2)\n+\t(unspec:CC [(match_operand:V16QI 1 \"vsx_register_operand\" \"v\")]\n+\t UNSPEC_XVTLSBB))\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(eq:SI (match_dup 2) (const_int 0)))]\n+  \"TARGET_POWER10\"\n+{\n+   operands[2] = gen_reg_rtx (CCmode);\n+})\n+\n (define_insn \"*vsx_ge_<mode>_p\"\n   [(set (reg:CC CR6_REGNO)\n \t(unspec:CC"}, {"sha": "7da530c8e6ecc707b140b509ba16ca75216fbd86", "filename": "gcc/testsuite/gcc.target/powerpc/lsbb-runnable.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf5d0fc2d1adcd53b52c5d3f946822b687546c0b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Flsbb-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf5d0fc2d1adcd53b52c5d3f946822b687546c0b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Flsbb-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Flsbb-runnable.c?ref=cf5d0fc2d1adcd53b52c5d3f946822b687546c0b", "patch": "@@ -0,0 +1,65 @@\n+/*\n+ Test the least significant bit by byte instruction\n+    xvtlsbb BF,XB\n+ Using the builtins\n+    int vec_test_lsbb_all_zeros (vector unsigned char);\n+    int vec_test_lsbb_all_ones (vector unsigned char);\n+ */\n+\n+/* { dg-do run } */\n+/* { dg-require-effective-target power10_hw } */\n+/* { dg-options \"-fno-inline -mdejagnu-cpu=power10 -O2\" } */\n+\n+#include <altivec.h>\n+#include <stdio.h>\n+\n+void abort (void);\n+\n+#define ITERS 7\n+vector char input_vec[ITERS] = {\n+  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},\n+  {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},\n+  {0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},\n+  {1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0},\n+  {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},\n+  {0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe},\n+  {0xfe, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9}\n+};\n+\n+int expected_allzeros_results[ITERS] = {1, 0, 0, 0, 0, 1, 0};\n+int expected_allones_results[ITERS] =  {0, 1, 0, 0, 1, 0, 0};\n+\n+int test_for_zeros(vector char vc) {\n+  return vec_test_lsbb_all_zeros(vc);\n+}\n+\n+int test_for_ones(vector char vc) {\n+  return vec_test_lsbb_all_ones(vc);\n+}\n+\n+int main ()\n+{\n+int allzeros,allones;\n+int iter;\n+int failcount=0;\n+vector char srcvec;\n+\n+for (iter=0;iter<ITERS;iter++) {\n+  srcvec = input_vec[iter];\n+  allzeros = test_for_zeros(srcvec);\n+  allones = test_for_ones(srcvec);\n+  if (allzeros != expected_allzeros_results[iter]) {\n+    printf(\"fail on allzero check. iter %d, result was %d \\n\", iter, allzeros);\n+    failcount++;\n+  }\n+  if (allones != expected_allones_results[iter]) {\n+    printf(\"fail on allones check. iter %d, result was %d \\n\", iter, allones);\n+    failcount++;\n+  }\n+}\n+\n+if (failcount)\n+  abort();\n+return 0;\n+}\n+"}, {"sha": "b5c037094a58ca76e62fe0200845e87b9e8eb6b0", "filename": "gcc/testsuite/gcc.target/powerpc/lsbb.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf5d0fc2d1adcd53b52c5d3f946822b687546c0b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Flsbb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf5d0fc2d1adcd53b52c5d3f946822b687546c0b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Flsbb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Flsbb.c?ref=cf5d0fc2d1adcd53b52c5d3f946822b687546c0b", "patch": "@@ -0,0 +1,24 @@\n+/*\n+ Test the least significant bit by byte instruction\n+    xvtlsbb BF,XB\n+ Using the builtins\n+    int vec_test_lsbb_all_zeros (vector unsigned char);\n+    int vec_test_lsbb_all_ones (vector unsigned char);\n+ */\n+\n+/* { dg-require-effective-target power10_ok } */\n+/* { dg-options \"-fno-inline -mdejagnu-cpu=power10 -O2\" } */\n+\n+/* { dg-final { scan-assembler-times {\\mxvtlsbb\\M} 2 } } */\n+/* { dg-final { scan-assembler-times {\\msetbc\\M} 2 } } */\n+\n+#include <altivec.h>\n+\n+int test_for_zeros(vector char vc) {\n+  return vec_test_lsbb_all_zeros(vc);\n+}\n+\n+int test_for_ones(vector char vc) {\n+  return vec_test_lsbb_all_ones(vc);\n+}\n+"}]}