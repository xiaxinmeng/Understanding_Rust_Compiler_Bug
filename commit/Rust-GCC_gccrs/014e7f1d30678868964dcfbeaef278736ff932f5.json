{"sha": "014e7f1d30678868964dcfbeaef278736ff932f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE0ZTdmMWQzMDY3ODg2ODk2NGRjZmJlYWVmMjc4NzM2ZmY5MzJmNQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-12-07T07:40:45Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-12-07T07:40:45Z"}, "message": "c-common.c (format_wanted_type): Add reading_from_flag.\n\n\t* c-common.c (format_wanted_type): Add reading_from_flag.\n\t(print_char_table): Mark %s and %S formats with flag \"R\".\n\t(check_format_info_main): Set up reading_from_flag appropriately.\n\tIf aflag, always set writing_in_flag rather than relying on the\n\tformat used being a scanf format and so having it set.\n\t(check_format_types): Check for formats reading through null\n\tpointers.\n\ntestsuite:\n\t* gcc.dg/c90-printf-1.c: Add test for printf formats reading\n\tthrough a null pointer.\n\nFrom-SVN: r38104", "tree": {"sha": "b240467cf5021de53c1a5fc93a3f6ef62f2878e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b240467cf5021de53c1a5fc93a3f6ef62f2878e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/014e7f1d30678868964dcfbeaef278736ff932f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/014e7f1d30678868964dcfbeaef278736ff932f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/014e7f1d30678868964dcfbeaef278736ff932f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/014e7f1d30678868964dcfbeaef278736ff932f5/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8308e0b7867616fda51ec1bd82833702880e85f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8308e0b7867616fda51ec1bd82833702880e85f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8308e0b7867616fda51ec1bd82833702880e85f4"}], "stats": {"total": 69, "additions": 54, "deletions": 15}, "files": [{"sha": "2119c93a63399d3549d9dd16f80f9b54c66e2b10", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/014e7f1d30678868964dcfbeaef278736ff932f5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/014e7f1d30678868964dcfbeaef278736ff932f5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=014e7f1d30678868964dcfbeaef278736ff932f5", "patch": "@@ -1,3 +1,13 @@\n+2000-12-07  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* c-common.c (format_wanted_type): Add reading_from_flag.\n+\t(print_char_table): Mark %s and %S formats with flag \"R\".\n+\t(check_format_info_main): Set up reading_from_flag appropriately.\n+\tIf aflag, always set writing_in_flag rather than relying on the\n+\tformat used being a scanf format and so having it set.\n+\t(check_format_types): Check for formats reading through null\n+\tpointers.\n+\n 2000-12-07  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* invoke.texi (-Wformat): Document what format features are"}, {"sha": "7359b04822fc518c8eb1dc1e2dd83672f52f8526", "filename": "gcc/c-common.c", "status": "modified", "additions": 38, "deletions": 15, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/014e7f1d30678868964dcfbeaef278736ff932f5/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/014e7f1d30678868964dcfbeaef278736ff932f5/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=014e7f1d30678868964dcfbeaef278736ff932f5", "patch": "@@ -1416,6 +1416,7 @@ typedef struct\n      years in some locales, \"4\" for \"2\" which becomes \"3\" with an \"E\" modifier,\n      \"o\" if use of strftime \"O\" is a GNU extension beyond C99,\n      \"W\" if the argument is a pointer which is dereferenced and written into,\n+     \"R\" if the argument is a pointer which is dereferenced and read from,\n      \"i\" for printf integer formats where the '0' flag is ignored with\n      precision, and \"[\" for the starting character of a scanf scanset.  */\n   const char *flags2;\n@@ -1521,6 +1522,9 @@ typedef struct format_wanted_type\n   /* Whether the argument, dereferenced once, is written into and so the\n      argument must not be a pointer to a const-qualified type.  */\n   int writing_in_flag;\n+  /* Whether the argument, dereferenced once, is read from and so\n+     must not be a NULL pointer.  */\n+  int reading_from_flag;\n   /* If warnings should be of the form \"field precision is not type int\",\n      the name to use (in this case \"field precision\"), otherwise NULL,\n      for \"%s format, %s arg\" type messages.  If (in an extension), this\n@@ -1694,23 +1698,23 @@ static const format_flag_pair strftime_flag_pairs[] =\n static const format_char_info print_char_table[] =\n {\n   /* C89 conversion specifiers.  */\n-  { \"di\",  0, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T99_LL,  TEX_LL,  T99_SST, T99_PD,  T99_IM  }, \"-wp0 +'I\", \"i\" },\n-  { \"oxX\", 0, STD_C89, { T89_UI,  T99_UC,  T89_US,  T89_UL,  T99_ULL, TEX_ULL, T99_ST,  T99_UPD, T99_UIM }, \"-wp0#\",    \"i\" },\n-  { \"u\",   0, STD_C89, { T89_UI,  T99_UC,  T89_US,  T89_UL,  T99_ULL, TEX_ULL, T99_ST,  T99_UPD, T99_UIM }, \"-wp0'I\",   \"i\" },\n-  { \"fgG\", 0, STD_C89, { T89_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T89_LD,  BADLEN,  BADLEN,  BADLEN  }, \"-wp0 +#'\", \"\"  },\n-  { \"eE\",  0, STD_C89, { T89_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T89_LD,  BADLEN,  BADLEN,  BADLEN  }, \"-wp0 +#\",  \"\"  },\n-  { \"c\",   0, STD_C89, { T89_I,   BADLEN,  BADLEN,  T94_WI,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"-w\",       \"\"  },\n-  { \"s\",   1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"-wp\",      \"c\" },\n-  { \"p\",   1, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"-w\",       \"c\" },\n-  { \"n\",   1, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T99_LL,  BADLEN,  T99_SST, T99_PD,  T99_IM  }, \"\",         \"W\" },\n+  { \"di\",  0, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T99_LL,  TEX_LL,  T99_SST, T99_PD,  T99_IM  }, \"-wp0 +'I\", \"i\"  },\n+  { \"oxX\", 0, STD_C89, { T89_UI,  T99_UC,  T89_US,  T89_UL,  T99_ULL, TEX_ULL, T99_ST,  T99_UPD, T99_UIM }, \"-wp0#\",    \"i\"  },\n+  { \"u\",   0, STD_C89, { T89_UI,  T99_UC,  T89_US,  T89_UL,  T99_ULL, TEX_ULL, T99_ST,  T99_UPD, T99_UIM }, \"-wp0'I\",   \"i\"  },\n+  { \"fgG\", 0, STD_C89, { T89_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T89_LD,  BADLEN,  BADLEN,  BADLEN  }, \"-wp0 +#'\", \"\"   },\n+  { \"eE\",  0, STD_C89, { T89_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T89_LD,  BADLEN,  BADLEN,  BADLEN  }, \"-wp0 +#\",  \"\"   },\n+  { \"c\",   0, STD_C89, { T89_I,   BADLEN,  BADLEN,  T94_WI,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"-w\",       \"\"   },\n+  { \"s\",   1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"-wp\",      \"cR\" },\n+  { \"p\",   1, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"-w\",       \"c\"  },\n+  { \"n\",   1, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T99_LL,  BADLEN,  T99_SST, T99_PD,  T99_IM  }, \"\",         \"W\"  },\n   /* C99 conversion specifiers.  */\n-  { \"F\",   0, STD_C99, { T99_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_LD,  BADLEN,  BADLEN,  BADLEN  }, \"-wp0 +#'\", \"\"  },\n-  { \"aA\",  0, STD_C99, { T99_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_LD,  BADLEN,  BADLEN,  BADLEN  }, \"-wp0 +#\",  \"\"  },\n+  { \"F\",   0, STD_C99, { T99_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_LD,  BADLEN,  BADLEN,  BADLEN  }, \"-wp0 +#'\", \"\"   },\n+  { \"aA\",  0, STD_C99, { T99_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_LD,  BADLEN,  BADLEN,  BADLEN  }, \"-wp0 +#\",  \"\"   },\n   /* X/Open conversion specifiers.  */\n-  { \"C\",   0, STD_EXT, { TEX_WI,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"-w\",       \"\"  },\n-  { \"S\",   1, STD_EXT, { TEX_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"-wp\",      \"\"  },\n+  { \"C\",   0, STD_EXT, { TEX_WI,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"-w\",       \"\"   },\n+  { \"S\",   1, STD_EXT, { TEX_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"-wp\",      \"R\"  },\n   /* GNU conversion specifiers.  */\n-  { \"m\",   0, STD_EXT, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"-wp\",      \"\"  },\n+  { \"m\",   0, STD_EXT, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"-wp\",      \"\"   },\n   { NULL,  0, 0, NOLENGTHS, NULL, NULL }\n };\n \n@@ -2718,6 +2722,7 @@ check_format_info_main (status, res, info, format_chars, format_length,\n \t\t  width_wanted_type.pointer_count = 0;\n \t\t  width_wanted_type.char_lenient_flag = 0;\n \t\t  width_wanted_type.writing_in_flag = 0;\n+\t\t  width_wanted_type.reading_from_flag = 0;\n \t\t  width_wanted_type.name = _(\"field width\");\n \t\t  width_wanted_type.param = cur_param;\n \t\t  width_wanted_type.arg_num = arg_num;\n@@ -2803,6 +2808,7 @@ check_format_info_main (status, res, info, format_chars, format_length,\n \t\t  precision_wanted_type.pointer_count = 0;\n \t\t  precision_wanted_type.char_lenient_flag = 0;\n \t\t  precision_wanted_type.writing_in_flag = 0;\n+\t\t  precision_wanted_type.reading_from_flag = 0;\n \t\t  precision_wanted_type.name = _(\"field precision\");\n \t\t  precision_wanted_type.param = cur_param;\n \t\t  precision_wanted_type.arg_num = arg_num;\n@@ -3129,8 +3135,16 @@ check_format_info_main (status, res, info, format_chars, format_length,\n \t  if (strchr (fci->flags2, 'c') != 0)\n \t    main_wanted_type.char_lenient_flag = 1;\n \t  main_wanted_type.writing_in_flag = 0;\n-\t  if (strchr (fci->flags2, 'W') != 0)\n+\t  main_wanted_type.reading_from_flag = 0;\n+\t  if (aflag)\n \t    main_wanted_type.writing_in_flag = 1;\n+\t  else\n+\t    {\n+\t      if (strchr (fci->flags2, 'W') != 0)\n+\t\tmain_wanted_type.writing_in_flag = 1;\n+\t      if (strchr (fci->flags2, 'R') != 0)\n+\t\tmain_wanted_type.reading_from_flag = 1;\n+\t    }\n \t  main_wanted_type.name = NULL;\n \t  main_wanted_type.param = cur_param;\n \t  main_wanted_type.arg_num = arg_num;\n@@ -3208,6 +3222,15 @@ check_format_types (status, types)\n \t\t\t\t\"writing through null pointer (arg %d)\",\n \t\t\t\targ_num);\n \n+\t      /* Check for reading through a NULL pointer.  */\n+\t      if (types->reading_from_flag\n+\t\t  && i == 0\n+\t\t  && cur_param != 0\n+\t\t  && integer_zerop (cur_param))\n+\t\tstatus_warning (status,\n+\t\t\t\t\"reading through null pointer (arg %d)\",\n+\t\t\t\targ_num);\n+\n \t      if (cur_param != 0 && TREE_CODE (cur_param) == ADDR_EXPR)\n \t\tcur_param = TREE_OPERAND (cur_param, 0);\n \t      else"}, {"sha": "444f2d62de1e5a22a40e93f72b03839a1dd18de7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/014e7f1d30678868964dcfbeaef278736ff932f5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/014e7f1d30678868964dcfbeaef278736ff932f5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=014e7f1d30678868964dcfbeaef278736ff932f5", "patch": "@@ -1,3 +1,8 @@\n+2000-12-07  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.dg/c90-printf-1.c: Add test for printf formats reading\n+\tthrough a null pointer.\n+\n 2000-12-06  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \t* g++.old-deja/g++.oliva/partspec1.C: Remove XFAIL."}, {"sha": "5058066b9466a4977701e44d8a3a7714a3f4cede", "filename": "gcc/testsuite/gcc.dg/c90-printf-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/014e7f1d30678868964dcfbeaef278736ff932f5/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-printf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/014e7f1d30678868964dcfbeaef278736ff932f5/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-printf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-printf-1.c?ref=014e7f1d30678868964dcfbeaef278736ff932f5", "patch": "@@ -245,4 +245,5 @@ foo (int i, int i1, int i2, unsigned int u, double d, char *s, void *p,\n   printf (\"%n\", cn); /* { dg-warning \"constant\" \"%n with const\" } */\n   printf ((const char *)L\"foo\"); /* { dg-warning \"wide\" \"wide string\" } */\n   printf (\"%n\", (int *)0); /* { dg-warning \"null\" \"%n with NULL\" } */\n+  printf (\"%s\", (char *)0); /* { dg-warning \"null\" \"%s with NULL\" } */\n }"}]}