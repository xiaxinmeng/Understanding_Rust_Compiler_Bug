{"sha": "f90af2e02022f16ac27524f282b2061e90ea43b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjkwYWYyZTAyMDIyZjE2YWMyNzUyNGYyODJiMjA2MWU5MGVhNDNiMQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-22T19:38:50Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-22T19:38:50Z"}, "message": "postreload.c: Use rtx_insn (also touches rtl.h and cprop.c)\n\ngcc/\n\t* rtl.h (fis_get_condition): Strengthen param \"jump\" from rtx to\n\trtx_insn *.\n\n\t* cprop.c (fis_get_condition): Likewise.\n\n\t* postreload.c (reload_cse_regs): Likewise for param \"first\".\n\t(reload_cse_simplify): Likewise for param \"insn\".\n\t(reload_cse_regs_1): Likewise for local \"insn\".\n\t(reload_cse_simplify_set): Likewise for param \"insn\".\n\t(reload_cse_simplify_operands): Likewise.\n\t(struct reg_use): Likewise for field \"insn\".\n\t(reload_combine_purge_insn_uses): Likewise for param \"insn\".\n\t(fixup_debug_insns): Likewise for params \"from\", \"to\" and local\n\t\"insn\".\n\t(try_replace_in_use): Likewise for local \"use_insn\".\n\t(reload_combine_recognize_const_pattern): Likewise for param\n\t\"insn\" and locals \"add_moved_after_insn\", \"use_insn\".\n\t(reload_combine_recognize_pattern): Likewise for param \"insn\" and\n\tlocal \"prev\".\n\t(reload_combine): Likewise for locals \"insn\", \"prev\".\n\t(reload_combine_note_use): Likewise for param \"insn\".\n\t(move2add_use_add2_insn): Likewise.\n\t(move2add_use_add3_insn): Likewise.\n\t(reload_cse_move2add): Likewise, also for local \"next\".\n\t(move2add_note_store): Likewise for local \"insn\".\n\nFrom-SVN: r214358", "tree": {"sha": "53ad22734838df49138bb59b6d5a311d45c0df84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53ad22734838df49138bb59b6d5a311d45c0df84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f90af2e02022f16ac27524f282b2061e90ea43b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f90af2e02022f16ac27524f282b2061e90ea43b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f90af2e02022f16ac27524f282b2061e90ea43b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f90af2e02022f16ac27524f282b2061e90ea43b1/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b65eff46797a017f6ff524c87e8513948073c089", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b65eff46797a017f6ff524c87e8513948073c089", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b65eff46797a017f6ff524c87e8513948073c089"}], "stats": {"total": 88, "additions": 58, "deletions": 30}, "files": [{"sha": "0bdcef7d8b526a41f159356411b840300338408e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f90af2e02022f16ac27524f282b2061e90ea43b1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f90af2e02022f16ac27524f282b2061e90ea43b1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f90af2e02022f16ac27524f282b2061e90ea43b1", "patch": "@@ -1,3 +1,31 @@\n+2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* rtl.h (fis_get_condition): Strengthen param \"jump\" from rtx to\n+\trtx_insn *.\n+\n+\t* cprop.c (fis_get_condition): Likewise.\n+\n+\t* postreload.c (reload_cse_regs): Likewise for param \"first\".\n+\t(reload_cse_simplify): Likewise for param \"insn\".\n+\t(reload_cse_regs_1): Likewise for local \"insn\".\n+\t(reload_cse_simplify_set): Likewise for param \"insn\".\n+\t(reload_cse_simplify_operands): Likewise.\n+\t(struct reg_use): Likewise for field \"insn\".\n+\t(reload_combine_purge_insn_uses): Likewise for param \"insn\".\n+\t(fixup_debug_insns): Likewise for params \"from\", \"to\" and local\n+\t\"insn\".\n+\t(try_replace_in_use): Likewise for local \"use_insn\".\n+\t(reload_combine_recognize_const_pattern): Likewise for param\n+\t\"insn\" and locals \"add_moved_after_insn\", \"use_insn\".\n+\t(reload_combine_recognize_pattern): Likewise for param \"insn\" and\n+\tlocal \"prev\".\n+\t(reload_combine): Likewise for locals \"insn\", \"prev\".\n+\t(reload_combine_note_use): Likewise for param \"insn\".\n+\t(move2add_use_add2_insn): Likewise.\n+\t(move2add_use_add3_insn): Likewise.\n+\t(reload_cse_move2add): Likewise, also for local \"next\".\n+\t(move2add_note_store): Likewise for local \"insn\".\n+\n 2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n \n \t* postreload-gcse.c (struct occr): Strengthen field \"insn\" from"}, {"sha": "1f73781bb11a72f5f20e7742fedcc2a15126cd4a", "filename": "gcc/cprop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f90af2e02022f16ac27524f282b2061e90ea43b1/gcc%2Fcprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f90af2e02022f16ac27524f282b2061e90ea43b1/gcc%2Fcprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcprop.c?ref=f90af2e02022f16ac27524f282b2061e90ea43b1", "patch": "@@ -1285,7 +1285,7 @@ local_cprop_pass (void)\n    but this would require some code reorganization.  */\n \n rtx\n-fis_get_condition (rtx jump)\n+fis_get_condition (rtx_insn *jump)\n {\n   return get_condition (jump, NULL, false, true);\n }"}, {"sha": "dae4bd89be184040196452043280d9c634d97b5a", "filename": "gcc/postreload.c", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f90af2e02022f16ac27524f282b2061e90ea43b1/gcc%2Fpostreload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f90af2e02022f16ac27524f282b2061e90ea43b1/gcc%2Fpostreload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload.c?ref=f90af2e02022f16ac27524f282b2061e90ea43b1", "patch": "@@ -46,23 +46,23 @@ along with GCC; see the file COPYING3.  If not see\n #include \"dbgcnt.h\"\n \n static int reload_cse_noop_set_p (rtx);\n-static bool reload_cse_simplify (rtx, rtx);\n+static bool reload_cse_simplify (rtx_insn *, rtx);\n static void reload_cse_regs_1 (void);\n-static int reload_cse_simplify_set (rtx, rtx);\n-static int reload_cse_simplify_operands (rtx, rtx);\n+static int reload_cse_simplify_set (rtx, rtx_insn *);\n+static int reload_cse_simplify_operands (rtx_insn *, rtx);\n \n static void reload_combine (void);\n-static void reload_combine_note_use (rtx *, rtx, int, rtx);\n+static void reload_combine_note_use (rtx *, rtx_insn *, int, rtx);\n static void reload_combine_note_store (rtx, const_rtx, void *);\n \n-static bool reload_cse_move2add (rtx);\n+static bool reload_cse_move2add (rtx_insn *);\n static void move2add_note_store (rtx, const_rtx, void *);\n \n /* Call cse / combine like post-reload optimization phases.\n    FIRST is the first instruction.  */\n \n static void\n-reload_cse_regs (rtx first ATTRIBUTE_UNUSED)\n+reload_cse_regs (rtx_insn *first ATTRIBUTE_UNUSED)\n {\n   bool moves_converted;\n   reload_cse_regs_1 ();\n@@ -88,7 +88,7 @@ reload_cse_noop_set_p (rtx set)\n \n /* Try to simplify INSN.  Return true if the CFG may have changed.  */\n static bool\n-reload_cse_simplify (rtx insn, rtx testreg)\n+reload_cse_simplify (rtx_insn *insn, rtx testreg)\n {\n   rtx body = PATTERN (insn);\n   basic_block insn_bb = BLOCK_FOR_INSN (insn);\n@@ -207,7 +207,7 @@ reload_cse_regs_1 (void)\n {\n   bool cfg_changed = false;\n   basic_block bb;\n-  rtx insn;\n+  rtx_insn *insn;\n   rtx testreg = gen_rtx_REG (VOIDmode, -1);\n \n   cselib_init (CSELIB_RECORD_MEMORY);\n@@ -236,7 +236,7 @@ reload_cse_regs_1 (void)\n    and change the set into a register copy.  */\n \n static int\n-reload_cse_simplify_set (rtx set, rtx insn)\n+reload_cse_simplify_set (rtx set, rtx_insn *insn)\n {\n   int did_change = 0;\n   int dreg;\n@@ -380,7 +380,7 @@ reload_cse_simplify_set (rtx set, rtx insn)\n    hard registers.  */\n \n static int\n-reload_cse_simplify_operands (rtx insn, rtx testreg)\n+reload_cse_simplify_operands (rtx_insn *insn, rtx testreg)\n {\n   int i, j;\n \n@@ -672,7 +672,7 @@ reload_cse_simplify_operands (rtx insn, rtx testreg)\n struct reg_use\n {\n   /* The insn where a register has been used.  */\n-  rtx insn;\n+  rtx_insn *insn;\n   /* Points to the memory reference enclosing the use, if any, NULL_RTX\n      otherwise.  */\n   rtx containing_mem;\n@@ -770,7 +770,7 @@ reload_combine_split_ruids (int split_ruid)\n    information about uses in that particular insn.  */\n \n static void\n-reload_combine_purge_insn_uses (rtx insn)\n+reload_combine_purge_insn_uses (rtx_insn *insn)\n {\n   unsigned i;\n \n@@ -855,9 +855,9 @@ reload_combine_closest_single_use (unsigned regno, int ruid_limit)\n    should make this change on debug insns.  */\n \n static void\n-fixup_debug_insns (rtx reg, rtx replacement, rtx from, rtx to)\n+fixup_debug_insns (rtx reg, rtx replacement, rtx_insn *from, rtx_insn *to)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n   for (insn = from; insn != to; insn = NEXT_INSN (insn))\n     {\n       rtx t;\n@@ -878,7 +878,7 @@ fixup_debug_insns (rtx reg, rtx replacement, rtx from, rtx to)\n static bool\n try_replace_in_use (struct reg_use *use, rtx reg, rtx src)\n {\n-  rtx use_insn = use->insn;\n+  rtx_insn *use_insn = use->insn;\n   rtx mem = use->containing_mem;\n   bool speed = optimize_bb_for_speed_p (BLOCK_FOR_INSN (use_insn));\n \n@@ -933,14 +933,14 @@ try_replace_in_use (struct reg_use *use, rtx reg, rtx src)\n    recognized and should be handled normally.  */\n \n static bool\n-reload_combine_recognize_const_pattern (rtx insn)\n+reload_combine_recognize_const_pattern (rtx_insn *insn)\n {\n   int from_ruid = reload_combine_ruid;\n   rtx set, pat, reg, src, addreg;\n   unsigned int regno;\n   struct reg_use *use;\n   bool must_move_add;\n-  rtx add_moved_after_insn = NULL_RTX;\n+  rtx_insn *add_moved_after_insn = NULL;\n   int add_moved_after_ruid = 0;\n   int clobbered_regno = -1;\n \n@@ -996,7 +996,7 @@ reload_combine_recognize_const_pattern (rtx insn)\n       if (use && GET_MODE (*use->usep) == Pmode)\n \t{\n \t  bool delete_add = false;\n-\t  rtx use_insn = use->insn;\n+\t  rtx_insn *use_insn = use->insn;\n \t  int use_ruid = use->ruid;\n \n \t  /* Avoid moving the add insn past a jump.  */\n@@ -1077,7 +1077,7 @@ reload_combine_recognize_const_pattern (rtx insn)\n    INSN; false if it wasn't recognized and should be handled normally.  */\n \n static bool\n-reload_combine_recognize_pattern (rtx insn)\n+reload_combine_recognize_pattern (rtx_insn *insn)\n {\n   rtx set, reg, src;\n   unsigned int regno;\n@@ -1119,7 +1119,7 @@ reload_combine_recognize_pattern (rtx insn)\n       && last_label_ruid < reg_state[regno].use_ruid)\n     {\n       rtx base = XEXP (src, 1);\n-      rtx prev = prev_nonnote_nondebug_insn (insn);\n+      rtx_insn *prev = prev_nonnote_nondebug_insn (insn);\n       rtx prev_set = prev ? single_set (prev) : NULL_RTX;\n       rtx index_reg = NULL_RTX;\n       rtx reg_sum = NULL_RTX;\n@@ -1228,7 +1228,7 @@ reload_combine_recognize_pattern (rtx insn)\n static void\n reload_combine (void)\n {\n-  rtx insn, prev;\n+  rtx_insn *insn, *prev;\n   basic_block bb;\n   unsigned int r;\n   int min_labelno, n_labels;\n@@ -1493,7 +1493,7 @@ reload_combine_note_store (rtx dst, const_rtx set, void *data ATTRIBUTE_UNUSED)\n    *XP is the pattern of INSN, or a part of it.\n    Called from reload_combine, and recursively by itself.  */\n static void\n-reload_combine_note_use (rtx *xp, rtx insn, int ruid, rtx containing_mem)\n+reload_combine_note_use (rtx *xp, rtx_insn *insn, int ruid, rtx containing_mem)\n {\n   rtx x = *xp;\n   enum rtx_code code = x->code;\n@@ -1747,7 +1747,7 @@ move2add_valid_value_p (int regno, enum machine_mode mode)\n    Return true if we made a change.  */\n \n static bool\n-move2add_use_add2_insn (rtx reg, rtx sym, rtx off, rtx insn)\n+move2add_use_add2_insn (rtx reg, rtx sym, rtx off, rtx_insn *insn)\n {\n   rtx pat = PATTERN (insn);\n   rtx src = SET_SRC (pat);\n@@ -1832,7 +1832,7 @@ move2add_use_add2_insn (rtx reg, rtx sym, rtx off, rtx insn)\n    Return true iff we made a change.  */\n \n static bool\n-move2add_use_add3_insn (rtx reg, rtx sym, rtx off, rtx insn)\n+move2add_use_add3_insn (rtx reg, rtx sym, rtx off, rtx_insn *insn)\n {\n   rtx pat = PATTERN (insn);\n   rtx src = SET_SRC (pat);\n@@ -1906,10 +1906,10 @@ move2add_use_add3_insn (rtx reg, rtx sym, rtx off, rtx insn)\n /* Convert move insns with constant inputs to additions if they are cheaper.\n    Return true if any changes were made.  */\n static bool\n-reload_cse_move2add (rtx first)\n+reload_cse_move2add (rtx_insn *first)\n {\n   int i;\n-  rtx insn;\n+  rtx_insn *insn;\n   bool changed = false;\n \n   for (i = FIRST_PSEUDO_REGISTER - 1; i >= 0; i--)\n@@ -1989,7 +1989,7 @@ reload_cse_move2add (rtx first)\n \t\t       && reg_base_reg[regno] == reg_base_reg[REGNO (src)]\n \t\t       && move2add_valid_value_p (REGNO (src), GET_MODE (reg)))\n \t\t{\n-\t\t  rtx next = next_nonnote_nondebug_insn (insn);\n+\t\t  rtx_insn *next = next_nonnote_nondebug_insn (insn);\n \t\t  rtx set = NULL_RTX;\n \t\t  if (next)\n \t\t    set = single_set (next);\n@@ -2157,7 +2157,7 @@ reload_cse_move2add (rtx first)\n static void\n move2add_note_store (rtx dst, const_rtx set, void *data)\n {\n-  rtx insn = (rtx) data;\n+  rtx_insn *insn = (rtx_insn *) data;\n   unsigned int regno = 0;\n   enum machine_mode mode = GET_MODE (dst);\n "}, {"sha": "82d694ed7f0aa1c874bf213f40378162cbfe8907", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f90af2e02022f16ac27524f282b2061e90ea43b1/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f90af2e02022f16ac27524f282b2061e90ea43b1/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=f90af2e02022f16ac27524f282b2061e90ea43b1", "patch": "@@ -3188,7 +3188,7 @@ extern void init_lower_subreg (void);\n /* In gcse.c */\n extern bool can_copy_p (enum machine_mode);\n extern bool can_assign_to_reg_without_clobbers_p (rtx);\n-extern rtx fis_get_condition (rtx);\n+extern rtx fis_get_condition (rtx_insn *);\n \n /* In ira.c */\n #ifdef HARD_CONST"}]}