{"sha": "8e66def0a1bc07d210f40e5df3e12745c8453043", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU2NmRlZjBhMWJjMDdkMjEwZjQwZTVkZjNlMTI3NDVjODQ1MzA0Mw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2008-11-05T09:36:35Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2008-11-05T09:36:35Z"}, "message": "re PR libstdc++/38017 (30_threads/thread/cons/X.cc)\n\n\tPR libstdc++/38017\n\tRevert:\n\t* include/tr1_impl/functional (result_of,reference_wrapper): Update\n\tto use C++0x features.\n\t* testsuite/20_util/function_objects/return_types/result_of.cc: New.\n\t* testsuite/20_util/function_objects/return_types/result_of_neg.cc:\n\tNew.\n\t* testsuite/20_util/function_objects/return_types/result_of_ref.cc:\n\tNew.\n\t* testsuite/20_util/reference_wrapper/24803.cc: Uncomment FIXMEs.\n\nFrom-SVN: r141602", "tree": {"sha": "b06c65566a11c9435d0f18f964872ff5f6ea3a53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b06c65566a11c9435d0f18f964872ff5f6ea3a53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e66def0a1bc07d210f40e5df3e12745c8453043", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e66def0a1bc07d210f40e5df3e12745c8453043", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e66def0a1bc07d210f40e5df3e12745c8453043", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e66def0a1bc07d210f40e5df3e12745c8453043/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b738068cc32169f7f4cd8accca857b1e90607c4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b738068cc32169f7f4cd8accca857b1e90607c4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b738068cc32169f7f4cd8accca857b1e90607c4a"}], "stats": {"total": 351, "additions": 15, "deletions": 336}, "files": [{"sha": "1952e40abd5ed711fdd0bc5a384644f14397b3ee", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e66def0a1bc07d210f40e5df3e12745c8453043/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e66def0a1bc07d210f40e5df3e12745c8453043/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8e66def0a1bc07d210f40e5df3e12745c8453043", "patch": "@@ -1,3 +1,16 @@\n+2008-11-05  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\tPR libstdc++/38017\n+\tRevert:\n+\t* include/tr1_impl/functional (result_of,reference_wrapper): Update\n+\tto use C++0x features.\n+\t* testsuite/20_util/function_objects/return_types/result_of.cc: New.\n+\t* testsuite/20_util/function_objects/return_types/result_of_neg.cc:\n+\tNew.\n+\t* testsuite/20_util/function_objects/return_types/result_of_ref.cc:\n+\tNew.\n+\t* testsuite/20_util/reference_wrapper/24803.cc: Uncomment FIXMEs.\n+\n 2008-11-05  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \tPR libstdc++/24803"}, {"sha": "b819374f92d42df50c422f45c7de1802b0a210b8", "filename": "libstdc++-v3/include/tr1_impl/functional", "status": "modified", "additions": 0, "deletions": 161, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e66def0a1bc07d210f40e5df3e12745c8453043/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e66def0a1bc07d210f40e5df3e12745c8453043/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ffunctional?ref=8e66def0a1bc07d210f40e5df3e12745c8453043", "patch": "@@ -153,7 +153,6 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n   template<typename _Signature>\n     class result_of;\n \n-#ifdef _GLIBCXX_INCLUDE_AS_TR1\n   /**\n    *  Actual implementation of result_of. When _Has_result_type is\n    *  true, gets its result from _Weak_result_type. Otherwise, uses\n@@ -211,104 +210,6 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n       typedef void type;\n     };\n \n-#else\n-  /**\n-   *  Actual implementation of std::result_of.\n-  */\n-  template<bool _Is_mem_obj_ptr, bool _Is_mem_fun_ptr, typename _Signature>\n-    struct _Result_of_impl;\n-\n-  // Helper functions used by _Result_of_impl.\n-  template<typename _ArgT>\n-    struct _Result_of_arg\n-    {\n-      // http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#904\n-#if 0\n-      static typename conditional<is_reference<_ArgT>::value,\n-                      typename add_lvalue_reference<_ArgT>::type,\n-                      typename add_rvalue_reference<_ArgT>::type>::type\n-      _S_fwd();\n-#else\n-      static typename add_rvalue_reference<_ArgT>::type\n-      _S_fwd();\n-#endif\n-    };\n-\n-  template<typename _Tp, bool _NoDeref>\n-    struct _Result_of_lhs\n-    {\n-      static _Tp _S_fwd();\n-    };\n-  template<typename _Tp>\n-    struct _Result_of_lhs<_Tp, false>\n-    {\n-      static decltype( *_Result_of_lhs<_Tp,true>::_S_fwd() ) _S_fwd();\n-    };\n-\n-  // Handle member data pointers.\n-  template<typename _Res, typename _Class, typename _T1>\n-    class _Result_of_impl<true, false, _Res _Class::* (_T1)>\n-    {\n-      typedef typename remove_reference<_T1>::type _T2;\n-      typedef _Result_of_lhs<_T1, is_base_of<_Class, _T2>::value> _Fwd_lhs;\n-      typedef _Res _Class::*_MemPtr;\n-\n-    public:\n-      typedef decltype( (_Fwd_lhs::_S_fwd().*(_MemPtr())) ) type;\n-    };\n-\n-  // Handle member function pointers.\n-  template<typename _MemFun, typename _T1, typename... _ArgTypes>\n-    class _Result_of_impl<false, true, _MemFun (_T1, _ArgTypes...)>\n-    {\n-      template<typename>\n-        struct _Get_class;\n-\n-      template<typename _Res, typename _Class, typename... _Args>\n-        struct _Get_class<_Res (_Class::*)(_Args...)>\n-        { typedef _Class type; };\n-      template<typename _Res, typename _Class, typename... _Args>\n-        struct _Get_class<_Res (_Class::*)(_Args...) const>\n-        { typedef _Class type; };\n-      template<typename _Res, typename _Class, typename... _Args>\n-        struct _Get_class<_Res (_Class::*)(_Args...) volatile>\n-        { typedef _Class type; };\n-      template<typename _Res, typename _Class, typename... _Args>\n-        struct _Get_class<_Res (_Class::*)(_Args...) const volatile>\n-        { typedef _Class type; };\n-\n-      typedef typename _Get_class<_MemFun>::type _Class;\n-      typedef typename remove_reference<_T1>::type _T2;\n-      typedef _Result_of_lhs<_T1, is_base_of<_Class, _T2>::value> _Fwd_lhs;\n-\n-    public:\n-      typedef decltype( (_Fwd_lhs::_S_fwd().*(_MemFun())) (\n-            _Result_of_arg<_ArgTypes>::_S_fwd() ... ) ) type;\n-    };\n-\n-  // Handle other callable types.\n-  template<typename _Functor, typename... _ArgTypes>\n-    class _Result_of_impl<false, false, _Functor(_ArgTypes...)>\n-    {\n-      // get an example of the callable type\n-      static typename add_rvalue_reference<_Functor>::type\n-      _S_fwd_functor();\n-\n-    public:\n-      typedef decltype( _Result_of_impl::_S_fwd_functor() (\n-            _Result_of_arg<_ArgTypes>::_S_fwd() ... ) ) type;\n-    };\n-\n-  template<typename _Functor, typename... _ArgTypes>\n-    class result_of<_Functor(_ArgTypes...)>\n-    : public _Result_of_impl<\n-      is_member_object_pointer<_Functor>::value,\n-      is_member_function_pointer<_Functor>::value,\n-      _Functor(_ArgTypes...)>\n-    {\n-    };\n-#endif\n-\n   /// Determines if the type _Tp derives from unary_function.\n   template<typename _Tp>\n     struct _Derives_from_unary_function : __sfinae_types\n@@ -354,7 +255,6 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n       typedef _Tp* type;\n     };\n \n-#ifdef _GLIBCXX_INCLUDE_AS_TR1\n   /**\n    * Invoke a function object, which may be either a member pointer or a\n    * function object. The first parameter will tell which.\n@@ -397,50 +297,6 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n     {\n       return __f(__args...);\n     }\n-#else\n-  /**\n-   * Invoke a function object, which may be either a member pointer or a\n-   * function object. The first parameter will tell which.\n-   */\n-  template<typename _Functor, typename... _Args>\n-    inline\n-    typename enable_if<\n-             (!is_member_pointer<_Functor>::value\n-              && !is_function<_Functor>::value\n-              && !is_function<typename remove_pointer<_Functor>::type>::value),\n-             typename result_of<_Functor(_Args...)>::type\n-           >::type\n-    __invoke(_Functor& __f, _Args&&... __args)\n-    {\n-      return __f(std::forward<_Args>(__args)...);\n-    }\n-\n-  template<typename _Functor, typename... _Args>\n-    inline\n-    typename enable_if<\n-             (is_member_pointer<_Functor>::value\n-              && !is_function<_Functor>::value\n-              && !is_function<typename remove_pointer<_Functor>::type>::value),\n-             typename result_of<_Functor(_Args...)>::type\n-           >::type\n-    __invoke(_Functor& __f, _Args&&... __args)\n-    {\n-      return mem_fn(__f)(std::forward<_Args>(__args)...);\n-    }\n-\n-  // To pick up function references (that will become function pointers)\n-  template<typename _Functor, typename... _Args>\n-    inline\n-    typename enable_if<\n-             (is_pointer<_Functor>::value\n-              && is_function<typename remove_pointer<_Functor>::type>::value),\n-             typename result_of<_Functor(_Args...)>::type\n-           >::type\n-    __invoke(_Functor __f, _Args&&... __args)\n-    {\n-      return __f(std::forward<_Args>(__args)...);\n-    }\n-#endif\n \n   /**\n    *  Knowing which of unary_function and binary_function _Tp derives\n@@ -584,17 +440,9 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n     public:\n       typedef _Tp type;\n \n-#ifdef _GLIBCXX_INCLUDE_AS_TR1\n       explicit\n       reference_wrapper(_Tp& __indata): _M_data(&__indata)\n       { }\n-#else\n-      reference_wrapper(_Tp& __indata): _M_data(&__indata)\n-      { }\n-\n-      explicit\n-      reference_wrapper(_Tp&&) = delete;\n-#endif\n \n       reference_wrapper(const reference_wrapper<_Tp>& __inref):\n       _M_data(__inref._M_data)\n@@ -614,21 +462,12 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n       get() const\n       { return *_M_data; }\n \n-#ifdef _GLIBCXX_INCLUDE_AS_TR1\n       template<typename... _Args>\n         typename result_of<_M_func_type(_Args...)>::type\n         operator()(_Args&... __args) const\n         {\n \t  return __invoke(get(), __args...);\n \t}\n-#else\n-      template<typename... _Args>\n-        typename result_of<_M_func_type(_Args...)>::type\n-        operator()(_Args&&... __args) const\n-        {\n-\t  return __invoke(get(), std::forward<_Args>(__args)...);\n-\t}\n-#endif\n     };\n \n "}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "libstdc++-v3/testsuite/20_util/function_objects/return_types/result_of.cc", "status": "modified", "additions": 0, "deletions": 76, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e66def0a1bc07d210f40e5df3e12745c8453043/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Freturn_types%2Fresult_of.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e66def0a1bc07d210f40e5df3e12745c8453043/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Freturn_types%2Fresult_of.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Freturn_types%2Fresult_of.cc?ref=8e66def0a1bc07d210f40e5df3e12745c8453043", "patch": "@@ -1,76 +0,0 @@\n-// { dg-options \"-std=gnu++0x\" }\n-// Copyright (C) 2008 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-//\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-//\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n-\n-// 20.6.4 function object return types [func.ret]\n-#include <functional>\n-#include <testsuite_hooks.h>\n-\n-struct nested_result_type\n-{\n-    typedef float result_type;\n-    int operator()();\n-};\n-\n-struct nested_result_template\n-{\n-  template<typename F> struct result { typedef float type; };\n-  int operator()(int);\n-};\n-\n-struct cv_overload\n-{\n-  int operator()(int);\n-  char operator()(char) const;\n-  float operator()(float) volatile;\n-};\n-\n-struct default_args\n-{\n-    int operator()(int* = 0, int* = 0);\n-    void operator()(void*);\n-};\n-\n-class X {};\n-\n-void test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  using std::result_of;\n-  using std::is_same;\n-\n-  typedef int (*func_ptr)(float, double);\n-  typedef int (&func_ref)(float, double);\n-\n-  VERIFY((is_same<result_of<nested_result_type()>::type, int>::value));\n-  VERIFY((is_same<result_of<nested_result_template(int)>::type, int>::value));\n-  VERIFY((is_same<result_of<cv_overload(int)>::type, int>::value));\n-  VERIFY((is_same<result_of<const cv_overload(int)>::type, char>::value));\n-  VERIFY((is_same<result_of<volatile cv_overload(int)>::type, float>::value));\n-  VERIFY((is_same<result_of<default_args(int*)>::type, int>::value));\n-  VERIFY((is_same<result_of<default_args(char*)>::type, void>::value));\n-  VERIFY((is_same<result_of<func_ptr(char, float)>::type, int>::value));\n-  VERIFY((is_same<result_of<func_ref(char, float)>::type, int>::value));\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "libstdc++-v3/testsuite/20_util/function_objects/return_types/result_of_neg.cc", "status": "modified", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e66def0a1bc07d210f40e5df3e12745c8453043/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Freturn_types%2Fresult_of_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e66def0a1bc07d210f40e5df3e12745c8453043/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Freturn_types%2Fresult_of_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Freturn_types%2Fresult_of_neg.cc?ref=8e66def0a1bc07d210f40e5df3e12745c8453043", "patch": "@@ -1,48 +0,0 @@\n-// { dg-options \"-std=gnu++0x\" }\n-// { dg-do compile }\n-// Copyright (C) 2008 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-//\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-//\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n-\n-// 20.6.4 function object return types [func.ret]\n-#include <functional>\n-#include <testsuite_hooks.h>\n-\n-struct X\n-{\n-    int i;\n-    int f();\n-};\n-\n-void test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  using std::result_of;\n-  using std::is_same;\n-\n-  typedef int X::*pm;\n-  typedef int (X::*pmf)();\n-  typedef int (*pf)();\n-\n-  result_of<pmf(X*, int)>::type test2; // { dg-error \"here\" }\n-  // { dg-error \"too many arguments to function\" \"\" { target *-*-* } 286 }\n-  result_of<pf(int)>::type test3; // { dg-error \"here\" }\n-  // { dg-error \"too many arguments to function\" \"\" { target *-*-* } 299 }\n-}\n-\n-// { dg-excess-errors \"\" }"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "libstdc++-v3/testsuite/20_util/function_objects/return_types/result_of_ref.cc", "status": "modified", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e66def0a1bc07d210f40e5df3e12745c8453043/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Freturn_types%2Fresult_of_ref.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e66def0a1bc07d210f40e5df3e12745c8453043/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Freturn_types%2Fresult_of_ref.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Freturn_types%2Fresult_of_ref.cc?ref=8e66def0a1bc07d210f40e5df3e12745c8453043", "patch": "@@ -1,49 +0,0 @@\n-// { dg-options \"-std=gnu++0x\" }\n-// Copyright (C) 2008 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-//\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-//\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n-\n-// 20.6.4 function object return types [func.ret]\n-#include <functional>\n-#include <testsuite_hooks.h>\n-\n-struct X\n-{\n-    int operator()(int&);\n-    float operator()(int&&);\n-};\n-\n-void test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  using std::result_of;\n-  using std::is_same;\n-\n-  typedef int (*func_ptr)(int&);\n-\n-  VERIFY((is_same<result_of<X(int)>::type, float>::value));\n-  VERIFY((is_same<result_of<X(int&)>::type, int>::value));\n-  VERIFY((is_same<result_of<X(int&&)>::type, float>::value));\n-  VERIFY((is_same<result_of<func_ptr(int&)>::type, int>::value));\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "d948235409b181081ee8202b8b26c9644f34f9c9", "filename": "libstdc++-v3/testsuite/20_util/reference_wrapper/24803.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e66def0a1bc07d210f40e5df3e12745c8453043/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Freference_wrapper%2F24803.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e66def0a1bc07d210f40e5df3e12745c8453043/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Freference_wrapper%2F24803.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Freference_wrapper%2F24803.cc?ref=8e66def0a1bc07d210f40e5df3e12745c8453043", "patch": "@@ -70,7 +70,7 @@ void test01()\n    std::reference_wrapper<functor1>* pr5(0);\n \n    // libstdc++/24803\n-   verify_return_type((*pr5)(0), double());\n+   // FIXME: verify_return_type((*pr5)(0), double());\n    verify_return_type((*pr5)(zero), double());\n \n    std::reference_wrapper<double (int, char)>* pr1b(0);\n@@ -84,6 +84,6 @@ void test01()\n    std::reference_wrapper<functor2>* pr5b(0);\n \n    // libstdc++/24803\n-   verify_return_type((*pr5b)(0,0), double());\n+   // FIXME: verify_return_type((*pr5b)(0,0), double());\n    verify_return_type((*pr5b)(zero,zero), double());\n }"}]}