{"sha": "1f33f6b4c779919d3dd77be7001747a621de0e6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWYzM2Y2YjRjNzc5OTE5ZDNkZDc3YmU3MDAxNzQ3YTYyMWRlMGU2YQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-07-09T21:00:12Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-07-09T21:00:12Z"}, "message": "unicode-muncher.pl: Updated to version 2.1 from GNU classpath.\n\n2004-07-09  Michael Koch  <konqueror@gmx.de>\n\n\t* scripts/unicode-muncher.pl: Updated to version 2.1\n\tfrom GNU classpath. Added some clarifications on where to find the\n\tneeded files from www.unicode.org.\n\t* gnu/gcj/convert/UnicodeCharacterDatabase-3.0.0.html,\n\tgnu/gcj/convert/UnicodeData-3.0.0.txt:\n\tRemoved, these can directly be downloaded from www.unicode.org if\n\tneeded.\n\t* gnu/java/lang/CharData.java: Regenerated.\n\t* include/java-chartables.h: Regenerated.\n\t* Makefile.am (ordinary_java_source_files):\n\tRemoved gnu/java/lang/CharData.java.\n\t* Makefile.in: Regenerated.\n\nFrom-SVN: r84399", "tree": {"sha": "fd18fa952051e6da0d867427ea834e6635fa89e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd18fa952051e6da0d867427ea834e6635fa89e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f33f6b4c779919d3dd77be7001747a621de0e6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f33f6b4c779919d3dd77be7001747a621de0e6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f33f6b4c779919d3dd77be7001747a621de0e6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f33f6b4c779919d3dd77be7001747a621de0e6a/comments", "author": null, "committer": null, "parents": [{"sha": "dae1dd2e3c6e3500678daa9a458b5a15565c7ab7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dae1dd2e3c6e3500678daa9a458b5a15565c7ab7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dae1dd2e3c6e3500678daa9a458b5a15565c7ab7"}], "stats": {"total": 14281, "additions": 1747, "deletions": 12534}, "files": [{"sha": "3a2a9b2b6877467b06bb14cacb4b62ddc163e885", "filename": "libjava/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f33f6b4c779919d3dd77be7001747a621de0e6a/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f33f6b4c779919d3dd77be7001747a621de0e6a/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=1f33f6b4c779919d3dd77be7001747a621de0e6a", "patch": "@@ -1,3 +1,18 @@\n+2004-07-09  Michael Koch  <konqueror@gmx.de>\n+\n+\t* scripts/unicode-muncher.pl: Updated to version 2.1\n+\tfrom GNU classpath. Added some clarifications on where to find the\n+\tneeded files from www.unicode.org.\n+\t* gnu/gcj/convert/UnicodeCharacterDatabase-3.0.0.html,\n+\tgnu/gcj/convert/UnicodeData-3.0.0.txt:\n+\tRemoved, these can directly be downloaded from www.unicode.org if\n+\tneeded. \n+\t* gnu/java/lang/CharData.java: Regenerated.\n+\t* include/java-chartables.h: Regenerated.\n+\t* Makefile.am (ordinary_java_source_files):\n+\tRemoved gnu/java/lang/CharData.java.\n+\t* Makefile.in: Regenerated.\n+\n 2004-07-09  Michael Koch  <konqueror@gmx.de>\n \n \t* java/security/AccessControlContext.java,"}, {"sha": "dea851ddb42587207cac65e055317bfd476d3c7e", "filename": "libjava/Makefile.am", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f33f6b4c779919d3dd77be7001747a621de0e6a/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f33f6b4c779919d3dd77be7001747a621de0e6a/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=1f33f6b4c779919d3dd77be7001747a621de0e6a", "patch": "@@ -2289,7 +2289,6 @@ gnu/java/io/NullOutputStream.java \\\n gnu/java/io/ObjectIdentityWrapper.java \\\n gnu/java/lang/ArrayHelper.java \\\n gnu/java/lang/ClassHelper.java \\\n-gnu/java/lang/CharData.java \\\n gnu/java/lang/MainThread.java \\\n gnu/java/lang/reflect/TypeSignature.java \\\n gnu/java/locale/Calendar.java \\"}, {"sha": "1e90c35c046ecbd928e09fd60b47a69a5ab8a003", "filename": "libjava/Makefile.in", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f33f6b4c779919d3dd77be7001747a621de0e6a/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f33f6b4c779919d3dd77be7001747a621de0e6a/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=1f33f6b4c779919d3dd77be7001747a621de0e6a", "patch": "@@ -1961,7 +1961,6 @@ gnu/java/io/NullOutputStream.java \\\n gnu/java/io/ObjectIdentityWrapper.java \\\n gnu/java/lang/ArrayHelper.java \\\n gnu/java/lang/ClassHelper.java \\\n-gnu/java/lang/CharData.java \\\n gnu/java/lang/MainThread.java \\\n gnu/java/lang/reflect/TypeSignature.java \\\n gnu/java/locale/Calendar.java \\\n@@ -3237,9 +3236,8 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/gnu/java/io/ClassLoaderObjectInputStream.P \\\n .deps/gnu/java/io/NullOutputStream.P \\\n .deps/gnu/java/io/ObjectIdentityWrapper.P \\\n-.deps/gnu/java/lang/ArrayHelper.P .deps/gnu/java/lang/CharData.P \\\n-.deps/gnu/java/lang/ClassHelper.P .deps/gnu/java/lang/MainThread.P \\\n-.deps/gnu/java/lang/natMainThread.P \\\n+.deps/gnu/java/lang/ArrayHelper.P .deps/gnu/java/lang/ClassHelper.P \\\n+.deps/gnu/java/lang/MainThread.P .deps/gnu/java/lang/natMainThread.P \\\n .deps/gnu/java/lang/reflect/TypeSignature.P \\\n .deps/gnu/java/locale/Calendar.P .deps/gnu/java/locale/Calendar_de.P \\\n .deps/gnu/java/locale/Calendar_en.P .deps/gnu/java/locale/Calendar_nl.P \\"}, {"sha": "113d311f01b27d8aee8d408a97bb53bd7046c651", "filename": "libjava/gnu/gcj/convert/UnicodeCharacterDatabase-3.0.0.html", "status": "removed", "additions": 0, "deletions": 345, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dae1dd2e3c6e3500678daa9a458b5a15565c7ab7/libjava%2Fgnu%2Fgcj%2Fconvert%2FUnicodeCharacterDatabase-3.0.0.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dae1dd2e3c6e3500678daa9a458b5a15565c7ab7/libjava%2Fgnu%2Fgcj%2Fconvert%2FUnicodeCharacterDatabase-3.0.0.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fconvert%2FUnicodeCharacterDatabase-3.0.0.html?ref=dae1dd2e3c6e3500678daa9a458b5a15565c7ab7", "patch": "@@ -1,345 +0,0 @@\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\"\n-\n-       \"http://www.w3.org/TR/REC-html40/loose.dtd\"> \n-\n-<html>\n-\n-\n-\n-<head>\n-\n-<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n-\n-<meta http-equiv=\"Content-Language\" content=\"en-us\">\n-\n-<meta name=\"GENERATOR\" content=\"Microsoft FrontPage 4.0\">\n-\n-<meta name=\"ProgId\" content=\"FrontPage.Editor.Document\">\n-\n-<link rel=\"stylesheet\" href=\"http://www.unicode.org/unicode.css\" type=\"text/css\">\n-\n-<title>Unicode Character Database</title>\n-\n-</head>\n-\n-\n-\n-<body>\n-\n-\n-\n-<h1>UNICODE CHARACTER DATABASE<br>  \n-Version 3.0.0</h1>\n-\n-<table border=\"1\" cellspacing=\"2\" cellpadding=\"0\" height=\"87\" width=\"100%\">\n-\n-  <tr>\n-\n-    <td valign=\"TOP\" width=\"144\">Revision</td>\n-\n-    <td valign=\"TOP\">3.0.0</td>\n-\n-  </tr>\n-\n-  <tr>\n-\n-    <td valign=\"TOP\" width=\"144\">Authors</td>\n-\n-    <td valign=\"TOP\">Mark Davis and Ken Whistler</td>\n-\n-  </tr>\n-\n-  <tr>\n-\n-    <td valign=\"TOP\" width=\"144\">Date</td>\n-\n-    <td valign=\"TOP\">1999-09-11</td>\n-\n-  </tr>\n-\n-  <tr>\n-\n-    <td valign=\"TOP\" width=\"144\">This Version</td>\n-\n-    <td valign=\"TOP\"><a href=\"ftp://ftp.unicode.org/Public/3.0-Update/UnicodeCharacterDatabase-3.0.0.html\">ftp://ftp.unicode.org/Public/3.0-Update/UnicodeCharacterDatabase-3.0.0.html</a></td>\n-\n-  </tr>\n-\n-  <tr>\n-\n-    <td valign=\"TOP\" width=\"144\">Previous Version</td>\n-\n-    <td valign=\"TOP\">n/a</td>\n-\n-  </tr>\n-\n-  <tr>\n-\n-    <td valign=\"TOP\" width=\"144\">Latest Version</td>\n-\n-    <td valign=\"TOP\"><a href=\"ftp://ftp.unicode.org/Public/3.0-Update/UnicodeCharacterDatabase-3.0.0.html\">ftp://ftp.unicode.org/Public/3.0-Update/UnicodeCharacterDatabase-3.0.0.html</a></td>\n-\n-  </tr>\n-\n-</table>\n-\n-<p align=\"center\">Copyright \u00a9 1995-1999 Unicode, Inc. All Rights reserved.</p>  \n-  \n-<h2>Disclaimer</h2>  \n-  \n-<p>The Unicode Character Database is provided as is by Unicode, Inc. No claims   \n-  \n-are made as to fitness for any particular purpose. No warranties of any kind are   \n-  \n-expressed or implied. The recipient agrees to determine applicability of   \n-  \n-information provided. If this file has been purchased on magnetic or optical   \n-  \n-media from Unicode, Inc., the sole remedy for any claim will be exchange of   \n-  \n-defective media within 90 days of receipt.</p>  \n-  \n-<p>This disclaimer is applicable for all other data files accompanying the   \n-  \n-Unicode Character Database, some of which have been compiled by the Unicode   \n-  \n-Consortium, and some of which have been supplied by other sources.</p>  \n-  \n-<h2>Limitations on Rights to Redistribute This Data</h2>  \n-  \n-<p>Recipient is granted the right to make copies in any form for internal   \n-  \n-distribution and to freely use the information supplied in the creation of   \n-  \n-products supporting the Unicode<sup>TM</sup> Standard. The files in the Unicode   \n-  \n-Character Database can be redistributed to third parties or other organizations   \n-  \n-(whether for profit or not) as long as this notice and the disclaimer notice are   \n-  \n-retained. Information can be extracted from these files and used in   \n-  \n-documentation or programs, as long as there is an accompanying notice indicating   \n-  \n-the source.</p>  \n-  \n-<h2>Introduction</h2>  \n-  \n-<p>The Unicode Character Database is a set of files that define the Unicode   \n-  \n-character properties and internal mappings. For more information about character   \n-  \n-properties and mappings, see <i><a href=\"http://www.unicode.org/unicode/uni2book/u2.html\">The   \n-  \n-Unicode Standard</a></i>.</p>  \n-  \n-<p>The Unicode Character Database has been updated to reflect Version 3.0 of the   \n-  \n-Unicode Standard, with many characters added to those published in Version 2.0.   \n-  \n-A number of corrections have also been made to case mappings or other errors in   \n-  \n-the database noted since the publication of Version 2.0. Normative bidirectional   \n-  \n-properties have also been modified to reflect decisions of the Unicode Technical   \n-  \n-Committee.</p>  \n-  \n-<p>For more information on versions of the Unicode Standard and how to reference   \n-  \n-them, see <a href=\"http://www.unicode.org/unicode/standard/versions/\">http://www.unicode.org/unicode/standard/versions/</a>.</p>  \n-  \n-<h2>Conformance</h2>  \n-  \n-<p>Character properties may be either normative or informative. <i>Normative</i>   \n-  \n-means that implementations that claim conformance to the Unicode Standard (at a   \n-  \n-particular version) and which make use of a particular property or field must   \n-  \n-follow the specifications of the standard for that property or field in order to   \n-  \n-be conformant. The term <i>normative</i> when applied to a property or field of   \n-  \n-the Unicode Character Database, does <i>not</i> mean that the value of that   \n-  \n-field will never change. Corrections and extensions to the standard in the   \n-  \n-future may require minor changes to normative values, even though the Unicode   \n-  \n-Technical Committee strives to minimize such changes. An<i> informative </i>property   \n-  \n-or field is strongly recommended, but a conformant implementation is free to use   \n-  \n-or change such values as it may require while still being conformant to the   \n-  \n-standard. Particular implementations may choose to override the properties and   \n-  \n-mappings that are not normative. In that case, it is up to the implementer to   \n-  \n-establish a protocol to convey that information.</p>  \n-  \n-<h2>Files</h2>  \n-  \n-<p>The following summarizes the files in the Unicode Character Database. &nbsp;For   \n-  \n-more information about these files, see the referenced technical report or   \n-  \n-section of Unicode Standard, Version 3.0.</p>  \n-  \n-<p><b>UnicodeData.txt (Chapter 4)</b>  \n-  \n-<ul>  \n-  \n-  <li>The main file in the Unicode Character Database.</li>  \n-  \n-  <li>For detailed information on the format, see <a href=\"UnicodeData.html\">UnicodeData.html</a>.   \n-  \n-    This file also characterizes which properties are normative and which are   \n-  \n-    informative.</li>  \n-  \n-</ul>  \n-  \n-<p><b>PropList.txt (Chapter 4)</b>  \n-  \n-<ul>  \n-  \n-  <li>Additional informative properties list: <i>Alphabetic, Ideographic,</i>   \n-  \n-    and <i>Mathematical</i>, among others.</li>  \n-  \n-</ul>  \n-  \n-<p><b>SpecialCasing.txt (Chapter 4)</b>  \n-  \n-<ul>  \n-  \n-  <li>List of informative special casing properties, including one-to-many   \n-  \n-    mappings such as SHARP S =&gt; &quot;SS&quot;, and locale-specific mappings,   \n-  \n-    such as for Turkish <i>dotless i</i>.</li>  \n-  \n-</ul>  \n-  \n-<p><b>Blocks.txt (Chapter 14)</b>  \n-  \n-<ul>  \n-  \n-  <li>List of normative block names.</li>  \n-  \n-</ul>  \n-  \n-<p><b>Jamo.txt (Chapter 4)</b>  \n-  \n-<ul>  \n-  \n-  <li>List of normative Jamo short names, used in deriving HANGUL SYLLABLE names   \n-  \n-    algorithmically.</li>  \n-  \n-</ul>  \n-  \n-<p><b>ArabicShaping.txt (Section 8.2)</b>  \n-  \n-<ul>  \n-  \n-  <li>Basic Arabic and Syriac character shaping properties, such as initial,   \n-  \n-    medial and final shapes. These properties are normative for minimal shaping   \n-  \n-    of Arabic and Syriac. </li>  \n-  \n-</ul>  \n-  \n-<p><b>NamesList.txt (Chapter 14)</b>  \n-  \n-<ul>  \n-  \n-  <li>This file duplicates some of the material in the UnicodeData file, and   \n-  \n-    adds informative annotations uses in the character charts, as printed in the   \n-  \n-    Unicode Standard. </li>  \n-  \n-  <li><b>Note: </b>The information in NamesList.txt and Index.txt files matches   \n-  \n-    the appropriate version of the book. Changes in the Unicode Character   \n-  \n-    Database since then may not be reflected in these files, since they are   \n-  \n-    primarily of archival interest.</li>  \n-  \n-</ul>  \n-  \n-<p><b>Index.txt (Chapter 14)</b>  \n-  \n-<ul>  \n-  \n-  <li>Informative index to Unicode characters, as printed in the Unicode   \n-  \n-    Standard</li>  \n-  \n-  <li><b>Note: </b>The information in NamesList.txt and Index.txt files matches   \n-  \n-    the appropriate version of the book. Changes in the Unicode Character   \n-  \n-    Database since then may not be reflected in these files, since they are   \n-  \n-    primarily of archival interest.</li>  \n-  \n-</ul>  \n-  \n-<p><b>CompositionExclusions.txt (<a href=\"http://www.unicode.org/unicode/reports/tr15/\">UTR#15   \n-  \n-Unicode Normalization Forms</a>)</b>  \n-  \n-<ul>  \n-  \n-  <li>Normative properties for normalization.</li>  \n-  \n-</ul>  \n-  \n-<p><b>LineBreak.txt (<a href=\"http://www.unicode.org/unicode/reports/tr14/\">UTR   \n-  \n-#14: Line Breaking Properties</a>)</b>  \n-  \n-<ul>  \n-  \n-  <li>Normative and informative properties for line breaking. To see which   \n-  \n-    properties are informative and which are normative, consult UTR#14.</li>  \n-  \n-</ul>  \n-  \n-<p><b>EastAsianWidth.txt (<a href=\"http://www.unicode.org/unicode/reports/tr11/\">UTR   \n-  \n-#11: East Asian Character Width</a>)</b>  \n-  \n-<ul>  \n-  \n-  <li>Informative properties for determining the choice of wide vs. narrow   \n-  \n-    glyphs in East Asian contexts.</li>  \n-  \n-</ul>  \n-  \n-<p><b>diffXvY.txt</b>  \n-  \n-<ul>  \n-  \n-  <li>Mechanically-generated informative files containing accumulated   \n-  \n-    differences between successive versions of UnicodeData.txt</li>  \n-  \n-</ul>  \n-  \n-  \n-  \n-</body>  \n-  \n-  \n-  \n-</html>  \n-  "}, {"sha": "6a54d3d74e933ba8d1c741248debfce8917ddd70", "filename": "libjava/gnu/gcj/convert/UnicodeData-3.0.0.txt", "status": "removed", "additions": 0, "deletions": 10617, "changes": 10617, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dae1dd2e3c6e3500678daa9a458b5a15565c7ab7/libjava%2Fgnu%2Fgcj%2Fconvert%2FUnicodeData-3.0.0.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dae1dd2e3c6e3500678daa9a458b5a15565c7ab7/libjava%2Fgnu%2Fgcj%2Fconvert%2FUnicodeData-3.0.0.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fconvert%2FUnicodeData-3.0.0.txt?ref=dae1dd2e3c6e3500678daa9a458b5a15565c7ab7"}, {"sha": "a0a3d36a4422cd4568efeb0741688defbe465ea9", "filename": "libjava/gnu/java/lang/CharData.java", "status": "modified", "additions": 818, "deletions": 753, "changes": 1571, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f33f6b4c779919d3dd77be7001747a621de0e6a/libjava%2Fgnu%2Fjava%2Flang%2FCharData.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f33f6b4c779919d3dd77be7001747a621de0e6a/libjava%2Fgnu%2Fjava%2Flang%2FCharData.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Flang%2FCharData.java?ref=1f33f6b4c779919d3dd77be7001747a621de0e6a"}, {"sha": "4a02c13dd459ee4c921aa362ae8c34394f175f02", "filename": "libjava/include/java-chartables.h", "status": "modified", "additions": 768, "deletions": 767, "changes": 1535, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f33f6b4c779919d3dd77be7001747a621de0e6a/libjava%2Finclude%2Fjava-chartables.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f33f6b4c779919d3dd77be7001747a621de0e6a/libjava%2Finclude%2Fjava-chartables.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjava-chartables.h?ref=1f33f6b4c779919d3dd77be7001747a621de0e6a"}, {"sha": "906034136edb8fd4fb8e9ab6b311f8fdee0c77b9", "filename": "libjava/scripts/unicode-muncher.pl", "status": "modified", "additions": 144, "deletions": 47, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f33f6b4c779919d3dd77be7001747a621de0e6a/libjava%2Fscripts%2Funicode-muncher.pl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f33f6b4c779919d3dd77be7001747a621de0e6a/libjava%2Fscripts%2Funicode-muncher.pl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fscripts%2Funicode-muncher.pl?ref=1f33f6b4c779919d3dd77be7001747a621de0e6a", "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/perl -w\n # unicode-muncher.pl -- generate Unicode database for java.lang.Character\n-# Copyright (C) 1998, 2002 Free Software Foundation, Inc.\n+# Copyright (C) 1998, 2002, 2004  Free Software Foundation, Inc.\n #\n # This file is part of GNU Classpath.\n #\n@@ -36,18 +36,22 @@\n # obligated to do so.  If you do not wish to do so, delete this\n # exception statement from your version.\n \n-# Code for reading UnicodeData.txt and generating the code for\n-# gnu.java.lang.CharData.  For now, the relevant Unicode definition files\n-# are found in libjava/gnu/gcj/convert/.\n+# Code for reading UnicodeData-3.0.0.txt and SpecialCasing-2.txt to generate\n+# the code for gnu.java.lang.CharData. The relevant files can be found here:\n+#\n+#   http://www.unicode.org/Public/3.0-Update/UnicodeData-3.0.0.txt\n+#   http://www.unicode.org/Public/3.0-Update/SpecialCasing-2.txt\n #\n # Inspired by code from Jochen Hoenicke.\n # author Eric Blake <ebb9@email.byu.edu>\n #\n-# Usage: ./unicode-muncher <UnicodeData.txt> <CharData.java>\n+# Usage: ./unicode-muncher <UnicodeData.txt> <SpecialCasing> <CharData.java>\n #   where <UnicodeData.txt> is obtained from www.unicode.org (named\n-#   UnicodeData-3.0.0.txt for Unicode version 3.0.0), and <CharData.java>\n-#   is the final location for the Java interface gnu.java.lang.CharData.\n-#   As of JDK 1.4, use Unicode version 3.0.0 for best results.\n+#   UnicodeData-3.0.0.txt for Unicode version 3.0.0), <SpecialCasing>\n+#   is obtained from www.unicode too (named SpecialCasing-2.txt for Unicode\n+#   version 3.0.0), and <CharData.java> is the final location for the Java\n+#   interface gnu.java.lang.CharData. As of JDK 1.4, use Unicode version 3.0.0\n+#   for best results.\n \n ##\n ## Convert a 16-bit integer to a Java source code String literal character\n@@ -75,20 +79,42 @@ ($)\n my $NOBREAK_FLAG  = 32;\n my $MIRRORED_FLAG = 64;\n \n+my %special = ();\n my @info = ();\n my $titlecase = \"\";\n my $count = 0;\n my $range = 0;\n \n-die \"Usage: $0 <UnicodeData.txt> <CharData.java>\" unless @ARGV == 2;\n-open (UNICODE, \"< $ARGV[0]\") || die \"Can't open Unicode attribute file: $!\\n\";\n-\n-# Stage 1: Parse the attribute file\n+die \"Usage: $0 <UnicodeData.txt> <SpecialCasing.txt> <CharData.java>\"\n+    unless @ARGV == 3;\n $| = 1;\n-print \"GNU Classpath Unicode Attribute Database Generator 2.0\\n\";\n+print \"GNU Classpath Unicode Attribute Database Generator 2.1\\n\";\n print \"Copyright (C) 1998, 2002 Free Software Foundation, Inc.\\n\";\n+\n+# Stage 0: Parse the special casing file\n+print \"Parsing special casing file\\n\";\n+open (SPECIAL, \"< $ARGV[1]\") || die \"Can't open special casing file: $!\\n\";\n+while (<SPECIAL>) {\n+    next if /^\\#/;\n+    my ($ch, undef, undef, $upper) = split / *; */;\n+\n+    # This grabs only the special casing for multi-char uppercase. Note that\n+    # there are no multi-char lowercase, and that Sun ignores multi-char\n+    # titlecase rules. This script omits 3 special cases in Unicode 3.0.0,\n+    # which must be hardcoded in java.lang.String:\n+    #  \\u03a3 (Sun ignores this special case)\n+    #  \\u0049 - lowercases to \\u0131, but only in Turkish locale\n+    #  \\u0069 - uppercases to \\u0130, but only in Turkish locale\n+    next unless defined $upper and $upper =~ / /;\n+    $special{hex $ch} = [map {hex} split ' ', $upper];\n+}\n+\n+close SPECIAL;\n+\n+# Stage 1: Parse the attribute file\n print \"Parsing attributes file\";\n-while(<UNICODE>) {\n+open (UNICODE, \"< $ARGV[0]\") || die \"Can't open Unicode attribute file: $!\\n\";\n+while (<UNICODE>) {\n     print \".\" unless $count++ % 1000;\n     chomp;\n     s/\\r//g;\n@@ -142,6 +168,8 @@ ($)\n             last;\n         }\n     }\n+    $direction <<= 2;\n+    $direction += $#{$special{$ch}} if defined $special{$ch};\n \n     if ($range) {\n         die \"Expecting end of range at $ch\\n\" unless $name =~ /Last>$/;\n@@ -167,9 +195,7 @@ ($)\n \n for my $ch (0 .. 0xffff) {\n     print \".\" unless $count++ % 0x1000;\n-    if (! defined $info[$ch]) {\n-        $info[$ch] = pack(\"n5\", 0, -1, 0, 0, -1);\n-    }\n+    $info[$ch] = pack(\"n5\", 0, -1, 0, 0, -4) unless defined $info[$ch];\n \n     my ($type, $numVal, $upper, $lower, $direction) = unpack(\"n5\", $info[$ch]);\n     if (! exists $charhash{$info[$ch]}) {\n@@ -209,7 +235,7 @@ ($)\n     for ($j = $blksize - 1; $j > 0; $j--) {\n         my %tails = ();\n         for $k (0 .. $#blkarray) {\n-            next if ! defined $blkarray[$k];\n+            next unless defined $blkarray[$k];\n             my $len = length $blkarray[$k];\n             my $tail = substr $blkarray[$k], $len - $j * 2;\n             if (exists $tails{$tail}) {\n@@ -222,12 +248,12 @@ ($)\n         # tails are calculated, now calculate the heads and merge.\n       BLOCK:\n         for $k (0 .. $#blkarray) {\n-            next if ! defined $blkarray[$k];\n+            next unless defined $blkarray[$k];\n             my $tomerge = $k;\n             while (1) {\n                 my $head = substr($blkarray[$tomerge], 0, $j * 2);\n                 my $entry = $tails{$head};\n-                next BLOCK if ! defined $entry;\n+                next BLOCK unless defined $entry;\n \n                 my $other = shift @{$entry};\n                 if ($other == $tomerge) {\n@@ -297,10 +323,10 @@ ($)\n die \"UTF-8 limit of data may be exceeded: \" . length($bestblkstr) . \"\\n\"\n     if length($bestblkstr) > 0xffff / 3;\n {\n-    print \"Generating $ARGV[1] with shift of $bestshift\";\n+    print \"Generating $ARGV[2] with shift of $bestshift\";\n     my ($i, $j);\n \n-    open OUTPUT, \"> $ARGV[1]\" or die \"Failed creating output file: $!\\n\";\n+    open OUTPUT, \"> $ARGV[2]\" or die \"Failed creating output file: $!\\n\";\n     print OUTPUT <<EOF;\n /* gnu/java/lang/CharData -- Database for java.lang.Character Unicode info\n    Copyright (C) 2002 Free Software Foundation, Inc.\n@@ -345,8 +371,9 @@ package gnu.java.lang;\n /**\n  * This contains the info about the unicode characters, that\n  * java.lang.Character needs.  It is generated automatically from\n- * <code>$ARGV[0]</code>, by some\n- * perl scripts. This Unicode definition file can be found on the\n+ * <code>$ARGV[0]</code> and\n+ * <code>$ARGV[1]</code>, by some\n+ * perl scripts. These Unicode definition files can be found on the\n  * <a href=\"http://www.unicode.org\">http://www.unicode.org</a> website.\n  * JDK 1.4 uses Unicode version 3.0.0.\n  *\n@@ -358,13 +385,18 @@ package gnu.java.lang;\n  * into the attribute tables <code>UPPER</code>, <code>LOWER</code>,\n  * <code>NUM_VALUE</code>, and <code>DIRECTION</code>.  Notice that the\n  * attribute tables are much smaller than 0xffff entries; as many characters\n- * in Unicode share common attributes.  Finally, there is a listing for\n- * <code>TITLE</code> exceptions (most characters just have the same\n- * title case as upper case).\n+ * in Unicode share common attributes.  The DIRECTION table also contains\n+ * a field for detecting characters with multi-character uppercase expansions.\n+ * Next, there is a listing for <code>TITLE</code> exceptions (most characters\n+ * just have the same title case as upper case).  Finally, there are two\n+ * tables for multi-character capitalization, <code>UPPER_SPECIAL</code>\n+ * which lists the characters which are special cased, and\n+ * <code>UPPER_EXPAND</code>, which lists their expansion.\n  *\n  * \\@author scripts/unicode-muncher.pl (written by Jochen Hoenicke,\n  *         Eric Blake)\n  * \\@see Character\n+ * \\@see String\n  */\n public interface CharData\n {\n@@ -417,7 +449,7 @@ package gnu.java.lang;\n         print OUTPUT $i ? \"\\n    + \\\"\" : \"    = \\\"\";\n         for $j (0 .. 10) {\n             last if $len <= $i * 11 + $j;\n-            my $val = unpack \"n\", substr($bestblkstr, 2 * ($i*11 + $j), 2);\n+            my $val = unpack \"n\", substr($bestblkstr, 2 * ($i * 11 + $j), 2);\n             print OUTPUT javaChar($val);\n         }\n         print OUTPUT \"\\\"\";\n@@ -451,10 +483,12 @@ package gnu.java.lang;\n ;\n \n   /**\n-   * This is the attribute table for computing the uppercase representation\n-   * of a character.  The value is the signed difference between the\n-   * character and its uppercase version.  Note that this is stored as an\n-   * unsigned char since this is a String literal.\n+   * This is the attribute table for computing the single-character uppercase\n+   * representation of a character.  The value is the signed difference\n+   * between the character and its uppercase version.  Note that this is\n+   * stored as an unsigned char since this is a String literal.  When\n+   * capitalizing a String, you must first check if a multi-character uppercase\n+   * sequence exists before using this character.\n    */\n   String UPPER\n EOF\n@@ -483,11 +517,11 @@ package gnu.java.lang;\n EOF\n \n     $len = @charinfo;\n-    for ($i = 0; $i < $len / 11; $i++) {\n+    for ($i = 0; $i < $len / 13; $i++) {\n         print OUTPUT $i ? \"\\n    + \\\"\" : \"    = \\\"\";\n-        for $j (0 .. 10) {\n-            last if $len <= $i * 11 + $j;\n-            my $val = $charinfo[$i * 11 + $j][2];\n+        for $j (0 .. 12) {\n+            last if $len <= $i * 13 + $j;\n+            my $val = $charinfo[$i * 13 + $j][2];\n             print OUTPUT javaChar($val);\n         }\n         print OUTPUT \"\\\"\";\n@@ -498,19 +532,25 @@ package gnu.java.lang;\n \n   /**\n    * This is the attribute table for computing the directionality class\n-   * of a character.  At present, the value is in the range 0 - 18 if the\n-   * character has a direction, otherwise it is -1.  Note that this is\n-   * stored as an unsigned char since this is a String literal.\n+   * of a character, as well as a marker of characters with a multi-character\n+   * capitalization.  The direction is taken by performing a signed shift\n+   * right by 2 (where a result of -1 means an unknown direction, such as\n+   * for undefined characters). The lower 2 bits form a count of the\n+   * additional characters that will be added to a String when performing\n+   * multi-character uppercase expansion. This count is also used, along with\n+   * the offset in UPPER_SPECIAL, to determine how much of UPPER_EXPAND to use\n+   * when performing the case conversion. Note that this information is stored\n+   * as an unsigned char since this is a String literal.\n    */\n   String DIRECTION\n EOF\n \n     $len = @charinfo;\n-    for ($i = 0; $i < $len / 11; $i++) {\n+    for ($i = 0; $i < $len / 17; $i++) {\n         print OUTPUT $i ? \"\\n    + \\\"\" : \"    = \\\"\";\n-        for $j (0 .. 10) {\n-            last if $len <= $i * 11 + $j;\n-            my $val = $charinfo[$i * 11 + $j][3];\n+        for $j (0 .. 16) {\n+            last if $len <= $i * 17 + $j;\n+            my $val = $charinfo[$i * 17 + $j][3];\n             print OUTPUT javaChar($val);\n         }\n         print OUTPUT \"\\\"\";\n@@ -520,10 +560,10 @@ package gnu.java.lang;\n ;\n \n   /**\n-   * This is the listing of titlecase special cases (all other character\n+   * This is the listing of titlecase special cases (all other characters\n    * can use <code>UPPER</code> to determine their titlecase).  The listing\n-   * is a sequence of character pairs; converting the first character of the\n-   * pair to titlecase produces the second character.\n+   * is a sorted sequence of character pairs; converting the first character\n+   * of the pair to titlecase produces the second character.\n    */\n   String TITLE\n EOF\n@@ -533,7 +573,64 @@ package gnu.java.lang;\n         print OUTPUT $i ? \"\\n    + \\\"\" : \"    = \\\"\";\n         for $j (0 .. 10) {\n             last if $len <= $i * 11 + $j;\n-            my $val = unpack \"n\", substr($titlecase, 2 * ($i*11 + $j), 2);\n+            my $val = unpack \"n\", substr($titlecase, 2 * ($i * 11 + $j), 2);\n+            print OUTPUT javaChar($val);\n+        }\n+        print OUTPUT \"\\\"\";\n+    }\n+\n+    print OUTPUT <<EOF;\n+;\n+\n+  /**\n+   * This is a listing of characters with multi-character uppercase sequences.\n+   * A character appears in this list exactly when it has a non-zero entry\n+   * in the low-order 2-bit field of DIRECTION.  The listing is a sorted\n+   * sequence of pairs (hence a binary search on the even elements is an\n+   * efficient way to lookup a character). The first element of a pair is the\n+   * character with the expansion, and the second is the index into\n+   * UPPER_EXPAND where the expansion begins. Use the 2-bit field of\n+   * DIRECTION to determine where the expansion ends.\n+   */\n+  String UPPER_SPECIAL\n+EOF\n+\n+    my @list = sort {$a <=> $b} keys %special;\n+    my $expansion = \"\";\n+    my $offset = 0;\n+    $len = @list;\n+    for ($i = 0; $i < $len / 5; $i++) {\n+        print OUTPUT $i ? \"\\n    + \\\"\" : \"    = \\\"\";\n+        for $j (0 .. 4) {\n+            last if $len <= $i * 5 + $j;\n+            my $ch = $list[$i * 5 + $j];\n+            print OUTPUT javaChar($ch);\n+            print OUTPUT javaChar($offset);\n+            $offset += @{$special{$ch}};\n+            $expansion .= pack \"n*\", @{$special{$ch}};\n+        }\n+        print OUTPUT \"\\\"\";\n+    }\n+\n+    print OUTPUT <<EOF;\n+;\n+\n+  /**\n+   * This is the listing of special case multi-character uppercase sequences.\n+   * Characters listed in UPPER_SPECIAL index into this table to find their\n+   * uppercase expansion. Remember that you must also perform special-casing\n+   * on two single-character sequences in the Turkish locale, which are not\n+   * covered here in CharData.\n+   */\n+  String UPPER_EXPAND\n+EOF\n+\n+    $len = length($expansion) / 2;\n+    for ($i = 0; $i < $len / 11; $i++) {\n+        print OUTPUT $i ? \"\\n    + \\\"\" : \"    = \\\"\";\n+        for $j (0 .. 10) {\n+            last if $len <= $i * 11 + $j;\n+            my $val = unpack \"n\", substr($expansion, 2 * ($i * 11 + $j), 2);\n             print OUTPUT javaChar($val);\n         }\n         print OUTPUT \"\\\"\";"}]}