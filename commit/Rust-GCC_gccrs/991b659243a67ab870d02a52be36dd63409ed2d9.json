{"sha": "991b659243a67ab870d02a52be36dd63409ed2d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTkxYjY1OTI0M2E2N2FiODcwZDAyYTUyYmUzNmRkNjM0MDllZDJkOQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2002-09-29T13:16:44Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-09-29T13:16:44Z"}, "message": "builtins.def: Fix comment formatting.\n\n\t* builtins.def: Fix comment formatting.\n\t* c-common.def: Likewise.\n\t* cfgcleanup.c: Likewise.\n\t* combine.c: Likewise.\n\t* gengtype.c: Likewise.\n\t* params.def: Likewise.\n\t* predict.def: Likewise.\n\t* rtl.def: Likewise.\n\t* stab.def: Likewise.\n\t* stor-layout.c: Likewise.\n\t* tree.def: Likewise.\n\t* config/darwin.c: Likewise.\n\t* config/darwin.h: Likewise.\n\t* config/dbxcoff.h: Likewise.\n\t* config/elfos.h: Likewise.\n\t* config/fp-bit.c: Likewise.\n\t* config/freebsd-spec.h: Likewise.\n\t* config/interix.h: Likewise.\n\t* config/libgloss.h: Likewise.\n\t* config/linux-aout.h: Likewise.\n\t* config/linux.h: Likewise.\n\t* config/lynx-ng.h: Likewise.\n\t* config/lynx.h: Likewise.\n\t* config/netbsd-aout.h: Likewise.\n\t* config/netbsd.h: Likewise.\n\t* config/netware.h: Likewise.\n\t* config/psos.h: Likewise.\n\t* config/ptx4.h: Likewise.\n\nFrom-SVN: r57624", "tree": {"sha": "24cbb8cf9da08986b3e7df17c094d53287981603", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24cbb8cf9da08986b3e7df17c094d53287981603"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/991b659243a67ab870d02a52be36dd63409ed2d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/991b659243a67ab870d02a52be36dd63409ed2d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/991b659243a67ab870d02a52be36dd63409ed2d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/991b659243a67ab870d02a52be36dd63409ed2d9/comments", "author": null, "committer": null, "parents": [{"sha": "27631daef50f6bca3b23a6532caf570b74a28c6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27631daef50f6bca3b23a6532caf570b74a28c6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27631daef50f6bca3b23a6532caf570b74a28c6a"}], "stats": {"total": 223, "additions": 127, "deletions": 96}, "files": [{"sha": "89f1d7e07fecd5c4adeabadeeb1e1d512cb7d164", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=991b659243a67ab870d02a52be36dd63409ed2d9", "patch": "@@ -1,3 +1,34 @@\n+2002-09-29  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* builtins.def: Fix comment formatting.\n+\t* c-common.def: Likewise.\n+\t* cfgcleanup.c: Likewise.\n+\t* combine.c: Likewise.\n+\t* gengtype.c: Likewise.\n+\t* params.def: Likewise.\n+\t* predict.def: Likewise.\n+\t* rtl.def: Likewise.\n+\t* stab.def: Likewise.\n+\t* stor-layout.c: Likewise.\n+\t* tree.def: Likewise.\n+\t* config/darwin.c: Likewise.\n+\t* config/darwin.h: Likewise.\n+\t* config/dbxcoff.h: Likewise.\n+\t* config/elfos.h: Likewise.\n+\t* config/fp-bit.c: Likewise.\n+\t* config/freebsd-spec.h: Likewise.\n+\t* config/interix.h: Likewise.\n+\t* config/libgloss.h: Likewise.\n+\t* config/linux-aout.h: Likewise.\n+\t* config/linux.h: Likewise.\n+\t* config/lynx-ng.h: Likewise.\n+\t* config/lynx.h: Likewise.\n+\t* config/netbsd-aout.h: Likewise.\n+\t* config/netbsd.h: Likewise.\n+\t* config/netware.h: Likewise.\n+\t* config/psos.h: Likewise.\n+\t* config/ptx4.h: Likewise.\n+\n 2002-09-28  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* ChangeLog.4: Fix typos."}, {"sha": "8c6a68e1ce0037542eb393f45af1306e94eaddcf", "filename": "gcc/builtins.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=991b659243a67ab870d02a52be36dd63409ed2d9", "patch": "@@ -87,7 +87,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    `__builtin' version, we will create an ordinary version (e.g,\n    `strchr') as well.  If we cannot compute the answer using the\n    builtin function, we will fall back to the standard library\n-   version. */\n+   version.  */\n #undef DEF_LIB_BUILTIN\t\t\t\t\t\n #define DEF_LIB_BUILTIN(ENUM, NAME, TYPE, ATTRS)\t\\\n   DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\"}, {"sha": "802238a65a2c4703b11f77b9de436628c677fea7", "filename": "gcc/c-common.def", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fc-common.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fc-common.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.def?ref=991b659243a67ab870d02a52be36dd63409ed2d9", "patch": "@@ -23,7 +23,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n 02111-1307, USA.  */\n \n /* Tree nodes relevant to both C and C++. These were originally in\n-cp-tree.def in the cp subdir. */\n+cp-tree.def in the cp subdir.  */\n \n /* A node to remember a source position.  */\n DEFTREECODE (SRCLOC, \"srcloc\", 'x', 2)\n@@ -33,55 +33,55 @@ DEFTREECODE (ARROW_EXPR, \"arrow_expr\", 'e', 1)\n DEFTREECODE (ALIGNOF_EXPR, \"alignof_expr\", '1', 1)\n \n /* Used to represent an expression statement.  Use `EXPR_STMT_EXPR' to\n-   obtain the expression. */\n+   obtain the expression.  */\n DEFTREECODE (EXPR_STMT, \"expr_stmt\", 'e', 1)\n \n /* Used to represent a brace-enclosed block.  The operand is\n-   COMPOUND_BODY. */ \n+   COMPOUND_BODY.  */\n DEFTREECODE (COMPOUND_STMT, \"compound_stmt\", 'e', 1)\n \n /* Used to represent a local declaration. The operand is\n-   DECL_STMT_DECL. */\n+   DECL_STMT_DECL.  */\n DEFTREECODE (DECL_STMT, \"decl_stmt\", 'e', 1)\n \n /* Represents an 'if' statement. The operands are IF_COND,\n-   THEN_CLAUSE, and ELSE_CLAUSE, respectively. */\n+   THEN_CLAUSE, and ELSE_CLAUSE, respectively.  */\n DEFTREECODE (IF_STMT, \"if_stmt\", 'e', 3)\n \n /* Used to represent a `for' statement. The operands are\n-   FOR_INIT_STMT, FOR_COND, FOR_EXPR, and FOR_BODY, respectively. */\n+   FOR_INIT_STMT, FOR_COND, FOR_EXPR, and FOR_BODY, respectively.  */\n DEFTREECODE (FOR_STMT, \"for_stmt\", 'e', 4)\n \n /* Used to represent a 'while' statement. The operands are WHILE_COND\n-   and WHILE_BODY, respectively. */\n+   and WHILE_BODY, respectively.  */\n DEFTREECODE (WHILE_STMT, \"while_stmt\", 'e', 2)\n \n /* Used to represent a 'do' statement. The operands are DO_BODY and\n-   DO_COND, respectively. */\n+   DO_COND, respectively.  */\n DEFTREECODE (DO_STMT, \"do_stmt\", 'e', 2)\n \n /* Used to represent a 'return' statement. The operand is\n-   RETURN_STMT_EXPR. */\n+   RETURN_STMT_EXPR.  */\n DEFTREECODE (RETURN_STMT, \"return_stmt\", 'e', 1)\n \n-/* Used to represent a 'break' statement. */\n+/* Used to represent a 'break' statement.  */\n DEFTREECODE (BREAK_STMT, \"break_stmt\", 'e', 0)\n \n-/* Used to represent a 'continue' statement. */\n+/* Used to represent a 'continue' statement.  */\n DEFTREECODE (CONTINUE_STMT, \"continue_stmt\", 'e', 0)\n \n /* Used to represent a 'switch' statement. The operands are\n-   SWITCH_COND, SWITCH_BODY and SWITCH_TYPE, respectively. */\n+   SWITCH_COND, SWITCH_BODY and SWITCH_TYPE, respectively.  */\n DEFTREECODE (SWITCH_STMT, \"switch_stmt\", 'e', 3)\n \n-/* Used to represent a 'goto' statement. The operand is GOTO_DESTINATION. */\n+/* Used to represent a 'goto' statement. The operand is GOTO_DESTINATION.  */\n DEFTREECODE (GOTO_STMT, \"goto_stmt\", 'e', 1)\n \n /* Used to represent a 'label' statement. The operand is a LABEL_DECL\n-   and can be obtained through the macro LABEL_STMT_LABEL. */\n+   and can be obtained through the macro LABEL_STMT_LABEL.  */\n DEFTREECODE (LABEL_STMT, \"label_stmt\", 'e', 1)\n \n-/* Used to represent an inline assembly statement. */\n+/* Used to represent an inline assembly statement.  */\n DEFTREECODE (ASM_STMT, \"asm_stmt\", 'e', 5)\n \n /* A SCOPE_STMT marks the beginning or end of a scope.  If"}, {"sha": "c706ed774e4be1fb0524d579129d9d7346ed6b14", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=991b659243a67ab870d02a52be36dd63409ed2d9", "patch": "@@ -518,7 +518,7 @@ try_forward_edges (mode, b)\n \n \t      /* Do not clean up branches to just past the end of a loop\n \t\t at this time; it can mess up the loop optimizer's\n-\t\t recognition of some patterns. */\n+\t\t recognition of some patterns.  */\n \n \t      insn = PREV_INSN (target->head);\n \t      if (insn && GET_CODE (insn) == NOTE"}, {"sha": "e735519ad12bdee2eaa0cedcce18893a3233ea54", "filename": "gcc/combine.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=991b659243a67ab870d02a52be36dd63409ed2d9", "patch": "@@ -6132,7 +6132,7 @@ make_extraction (mode, inner, pos, pos_rtx, len,\n \t\t\t       - GET_MODE_SIZE (tmode)) % UNITS_PER_WORD;\n \n \t      /* Avoid creating invalid subregs, for example when\n-\t\t simplifying (x>>32)&255. */\n+\t\t simplifying (x>>32)&255.  */\n \t      if (final_word >= GET_MODE_SIZE (inner_mode))\n \t\treturn NULL_RTX;\n "}, {"sha": "3722950f63432d963f7787620dc0c0d45a1b6319", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=991b659243a67ab870d02a52be36dd63409ed2d9", "patch": "@@ -217,7 +217,7 @@ machopic_define_name (name)\n }\n \n /* This is a static to make inline functions work.  The rtx\n-   representing the PIC base symbol always points to here. */\n+   representing the PIC base symbol always points to here.  */\n \n static char function_base[32];\n \n@@ -1023,7 +1023,7 @@ update_non_lazy_ptrs (name)\n \n /* Function NAME is being defined, and its label has just been output.\n    If there's already a reference to a stub for this function, we can\n-   just emit the stub label now and we don't bother emitting the stub later. */\n+   just emit the stub label now and we don't bother emitting the stub later.  */\n \n void\n machopic_output_possible_stub_label (file, name)\n@@ -1214,7 +1214,7 @@ machopic_select_section (exp, reloc, align)\n }\n \n /* This can be called with address expressions as \"rtx\".\n-   They must go in \"const\". */\n+   They must go in \"const\".  */\n \n void\n machopic_select_rtx_section (mode, x, align)"}, {"sha": "f215a7567b4fa70e74a4b684114c1000efc45d1d", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=991b659243a67ab870d02a52be36dd63409ed2d9", "patch": "@@ -94,7 +94,7 @@ Boston, MA 02111-1307, USA.  */\n #undef\tLIB_SPEC\n #define LIB_SPEC \"%{!static:-lSystem}\"\n \n-/* We specify crt0.o as -lcrt0.o so that ld will search the library path. */\n+/* We specify crt0.o as -lcrt0.o so that ld will search the library path.  */\n \n #undef\tSTARTFILE_SPEC\n #define STARTFILE_SPEC  \\\n@@ -120,7 +120,7 @@ Boston, MA 02111-1307, USA.  */\n \n #define DBX_CONTIN_LENGTH 0\n \n-/* gdb needs a null N_SO at the end of each file for scattered loading. */\n+/* gdb needs a null N_SO at the end of each file for scattered loading.  */\n \n #undef\tDBX_OUTPUT_MAIN_SOURCE_FILE_END\n #define DBX_OUTPUT_MAIN_SOURCE_FILE_END(FILE, FILENAME)\t\t\t\\\n@@ -166,7 +166,7 @@ do { text_section ();\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n   fprintf (FILE, \"\\t.space %d\\n\", SIZE)\n \n-/* Give ObjC methods pretty symbol names. */\n+/* Give ObjC methods pretty symbol names.  */\n \n #undef\tOBJC_GEN_METHOD_LABEL\n #define OBJC_GEN_METHOD_LABEL(BUF,IS_INST,CLASS_NAME,CAT_NAME,SEL_NAME,NUM) \\\n@@ -290,7 +290,7 @@ do { text_section ();\t\t\t\t\t\t\t\\\n #undef\tMAX_OFILE_ALIGNMENT\n #define MAX_OFILE_ALIGNMENT 0x8000\n \n-/* Create new Mach-O sections. */\n+/* Create new Mach-O sections.  */\n \n #undef\tSECTION_FUNCTION\n #define SECTION_FUNCTION(FUNCTION, SECTION, DIRECTIVE, OBJC)\t\t\\"}, {"sha": "b955932797c77e6c3a529305d1dedf89ff6e255a", "filename": "gcc/config/dbxcoff.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fconfig%2Fdbxcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fconfig%2Fdbxcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdbxcoff.h?ref=991b659243a67ab870d02a52be36dd63409ed2d9", "patch": "@@ -26,7 +26,7 @@ Boston, MA 02111-1307, USA.  */\n \n #define DBX_DEBUGGING_INFO 1\n \n-/* Generate SDB debugging information by default. */\n+/* Generate SDB debugging information by default.  */\n \n #ifndef PREFERRED_DEBUGGING_TYPE\n #define PREFERRED_DEBUGGING_TYPE SDB_DEBUG"}, {"sha": "0eaf3a39d0c6f4427c55e84abe860af07c6c01dd", "filename": "gcc/config/elfos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fconfig%2Felfos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fconfig%2Felfos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felfos.h?ref=991b659243a67ab870d02a52be36dd63409ed2d9", "patch": "@@ -400,7 +400,7 @@ Boston, MA 02111-1307, USA.  */\n    generated assembly code more compact (and thus faster to assemble)\n    as well as more readable, especially for targets like the i386\n    (where the only alternative is to output character sequences as\n-   comma separated lists of numbers).   */\n+   comma separated lists of numbers).  */\n \n #define ASM_OUTPUT_LIMITED_STRING(FILE, STR)\t\t\\\n   do\t\t\t\t\t\t\t\\"}, {"sha": "105772667771c8db55f5d86763ee981e24a11025", "filename": "gcc/config/fp-bit.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fconfig%2Ffp-bit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fconfig%2Ffp-bit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffp-bit.c?ref=991b659243a67ab870d02a52be36dd63409ed2d9", "patch": "@@ -136,7 +136,7 @@ INLINE\n static fp_number_type *\n nan (void)\n {\n-  /* Discard the const qualifier... */\n+  /* Discard the const qualifier...  */\n #ifdef FLOAT  \n   return (fp_number_type *) (& __thenan_sf);\n #else\n@@ -745,14 +745,14 @@ _fpmul_parts ( fp_number_type *  a,\n \thigh |= 1;\n       low <<= 1;\n     }\n-  /* rounding is tricky. if we only round if it won't make us round later. */\n+  /* rounding is tricky. if we only round if it won't make us round later.  */\n #if 0\n   if (low & FRACHIGH2)\n     {\n       if (((high & GARDMASK) != GARDMSB)\n \t  && (((high + 1) & GARDMASK) == GARDMSB))\n \t{\n-\t  /* don't round, it gets done again later. */\n+\t  /* don't round, it gets done again later.  */\n \t}\n       else\n \t{\n@@ -920,7 +920,7 @@ int\n __fpcmp_parts (fp_number_type * a, fp_number_type * b)\n {\n #if 0\n-  /* either nan -> unordered. Must be checked outside of this routine. */\n+  /* either nan -> unordered. Must be checked outside of this routine.  */\n   if (isnan (a) && isnan (b))\n     {\n       return 1;\t\t\t/* still unordered! */\n@@ -944,7 +944,7 @@ __fpcmp_parts (fp_number_type * a, fp_number_type * b)\n        */\n       return b->sign - a->sign;\n     }\n-  /* but not both... */\n+  /* but not both...  */\n   if (isinf (a))\n     {\n       return a->sign ? -1 : 1;\n@@ -965,7 +965,7 @@ __fpcmp_parts (fp_number_type * a, fp_number_type * b)\n     {\n       return a->sign ? -1 : 1;\n     }\n-  /* now both are \"normal\". */\n+  /* now both are \"normal\".  */\n   if (a->sign != b->sign)\n     {\n       /* opposite signs */\n@@ -980,7 +980,7 @@ __fpcmp_parts (fp_number_type * a, fp_number_type * b)\n     {\n       return a->sign ? 1 : -1;\n     }\n-  /* same exponents; check size. */\n+  /* same exponents; check size.  */\n   if (a->fraction.ll > b->fraction.ll)\n     {\n       return a->sign ? -1 : 1;\n@@ -989,7 +989,7 @@ __fpcmp_parts (fp_number_type * a, fp_number_type * b)\n     {\n       return a->sign ? 1 : -1;\n     }\n-  /* after all that, they're equal. */\n+  /* after all that, they're equal.  */\n   return 0;\n }\n #endif\n@@ -1246,7 +1246,7 @@ float_to_si (FLO_type arg_a)\n     return 0;\n   if (isnan (&a))\n     return 0;\n-  /* get reasonable MAX_SI_INT... */\n+  /* get reasonable MAX_SI_INT...  */\n   if (isinf (&a))\n     return a.sign ? (-MAX_SI_INT)-1 : MAX_SI_INT;\n   /* it is a number, but a small one */\n@@ -1283,7 +1283,7 @@ float_to_usi (FLO_type arg_a)\n   /* it is a negative number */\n   if (a.sign)\n     return 0;\n-  /* get reasonable MAX_USI_INT... */\n+  /* get reasonable MAX_USI_INT...  */\n   if (isinf (&a))\n     return MAX_USI_INT;\n   /* it is a number, but a small one */"}, {"sha": "3fc4dcc7a412e6ea63a750fc48e2444422bc5020", "filename": "gcc/config/freebsd-spec.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fconfig%2Ffreebsd-spec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fconfig%2Ffreebsd-spec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffreebsd-spec.h?ref=991b659243a67ab870d02a52be36dd63409ed2d9", "patch": "@@ -84,7 +84,7 @@ Boston, MA 02111-1307, USA.  */\n /* Provide a STARTFILE_SPEC appropriate for FreeBSD.  Here we add\n    the magical crtbegin.o file (see crtstuff.c) which provides part \n \tof the support for getting C++ file-scope static object constructed \n-\tbefore entering `main'. */\n+\tbefore entering `main'.  */\n    \n #define FBSD_STARTFILE_SPEC \\\n   \"%{!shared: \\"}, {"sha": "aea3a73425e8583fdbbe61a9ffcac35524d9d5ce", "filename": "gcc/config/interix.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fconfig%2Finterix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fconfig%2Finterix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Finterix.h?ref=991b659243a67ab870d02a52be36dd63409ed2d9", "patch": "@@ -104,7 +104,7 @@ for windows/multi thread */\n #define WCHAR_TYPE_SIZE 16\n \n /* Our strategy for finding global constructors is a bit different, although\n-   not a lot. */\n+   not a lot.  */\n #define DO_GLOBAL_CTORS_BODY\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n   int i;\t\t\t\t\t\t\t\t\\"}, {"sha": "f73982b8634f83632002ed0cc56fc3a4c969c97f", "filename": "gcc/config/libgloss.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fconfig%2Flibgloss.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fconfig%2Flibgloss.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flibgloss.h?ref=991b659243a67ab870d02a52be36dd63409ed2d9", "patch": "@@ -23,7 +23,7 @@ Boston, MA 02111-1307, USA.  */\n    STARTFILE_SPEC is all wrong.  */\n \n /* The libgloss standard for crt0.s has the name based on the command line\n-   option. */\n+   option.  */\n #undef STARTFILE_SPEC\n #define STARTFILE_SPEC \"%{!shared:%{pg:pgcrt0%O%s}%{!pg:%{p:pcrt0%O%s}%{!p:crt0%O%s}}}\"\n "}, {"sha": "8193c61136408c7c50447389e82a8ec5c632c0b6", "filename": "gcc/config/linux-aout.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fconfig%2Flinux-aout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fconfig%2Flinux-aout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flinux-aout.h?ref=991b659243a67ab870d02a52be36dd63409ed2d9", "patch": "@@ -19,11 +19,11 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* Don't assume anything about the header files. */\n+/* Don't assume anything about the header files.  */\n #define NO_IMPLICIT_EXTERN_C\n \n /* GNU/Linux uses ctype from glibc.a. I am not sure how complete it is.\n-   For now, we play safe. It may change later. */\n+   For now, we play safe. It may change later.  */\n \n #if 0\n #undef MULTIBYTE_CHARS\n@@ -41,5 +41,5 @@ Boston, MA 02111-1307, USA.  */\n \n #define SET_ASM_OP\t\"\\t.set\\t\"\n \n-/* We need that too. */\n+/* We need that too.  */\n #define HANDLE_SYSV_PRAGMA"}, {"sha": "5b7311c169746ad45db6fcf1c3bacce1889c7c32", "filename": "gcc/config/linux.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fconfig%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fconfig%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flinux.h?ref=991b659243a67ab870d02a52be36dd63409ed2d9", "patch": "@@ -20,11 +20,11 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* Don't assume anything about the header files. */\n+/* Don't assume anything about the header files.  */\n #define NO_IMPLICIT_EXTERN_C\n \n /* GNU/Linux uses ctype from glibc.a. I am not sure how complete it is.\n-   For now, we play safe. It may change later. */\n+   For now, we play safe. It may change later.  */\n \n #if 0\n #undef MULTIBYTE_CHARS\n@@ -43,7 +43,7 @@ Boston, MA 02111-1307, USA.  */\n /* Provide a STARTFILE_SPEC appropriate for GNU/Linux.  Here we add\n    the GNU/Linux magical crtbegin.o file (see crtstuff.c) which\n    provides part of the support for getting C++ file-scope static\n-   object constructed before entering `main'. */\n+   object constructed before entering `main'.  */\n    \n #undef\tSTARTFILE_SPEC\n #ifdef USE_GNULIBC_1\n@@ -73,7 +73,7 @@ Boston, MA 02111-1307, USA.  */\n #define ENDFILE_SPEC \\\n   \"%{!shared:crtend.o%s} %{shared:crtendS.o%s} crtn.o%s\"\n \n-/* This is for -profile to use -lc_p instead of -lc. */\n+/* This is for -profile to use -lc_p instead of -lc.  */\n #ifndef CC1_SPEC\n #define CC1_SPEC \"%{profile:-p}\"\n #endif\n@@ -85,7 +85,7 @@ Boston, MA 02111-1307, USA.  */\n #undef\tLIB_SPEC\n /* We no longer link with libc_p.a or libg.a by default. If you\n    want to profile or debug the GNU/Linux C library, please add\n-   -profile or -ggdb to LDFLAGS at the link time, respectively. */\n+   -profile or -ggdb to LDFLAGS at the link time, respectively.  */\n #if 1\n #ifdef USE_GNULIBC_1\n #define LIB_SPEC \\"}, {"sha": "9d9480153228d9d5853223759def59e95a756f1d", "filename": "gcc/config/lynx-ng.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fconfig%2Flynx-ng.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fconfig%2Flynx-ng.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flynx-ng.h?ref=991b659243a67ab870d02a52be36dd63409ed2d9", "patch": "@@ -19,7 +19,7 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n /* This is for backwards compatibility with older Lynx tools, which use\n-   a version of a.out format. */\n+   a version of a.out format.  */\n \n #undef ASM_SPEC\n #define ASM_SPEC \"%{mcoff:-C}\"\n@@ -103,7 +103,7 @@ Boston, MA 02111-1307, USA.  */\n \n #define MD_EXEC_PREFIX \"/usr/local/lib/gcc-\"\n \n-/* This is needed because /bin/ld does not handle -L options correctly. */\n+/* This is needed because /bin/ld does not handle -L options correctly.  */\n \n #define LINK_LIBGCC_SPECIAL_1\n "}, {"sha": "7f1cb547a4287b9fa77ae8eb3bcbd3ba816620b1", "filename": "gcc/config/lynx.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fconfig%2Flynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fconfig%2Flynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flynx.h?ref=991b659243a67ab870d02a52be36dd63409ed2d9", "patch": "@@ -20,35 +20,35 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n /* LynxOS is a multi-platform Unix, similar to SVR3, but not identical.\n-   We can get quite a bit from generic svr3, but have to do some overrides. */\n+   We can get quite a bit from generic svr3, but have to do some overrides.  */\n \n #include \"svr3.h\"\n \n-/* Define various macros, depending on the combination of flags. */\n+/* Define various macros, depending on the combination of flags.  */\n \n #undef CPP_SPEC\n #define CPP_SPEC \"%{mthreads:-D_MULTITHREADED}  \\\n   %{mposix:-D_POSIX_SOURCE}  \\\n   %{msystem-v:-I/usr/include_v}\"\n \n-/* No asm spec needed, since using GNU assembler always. */\n+/* No asm spec needed, since using GNU assembler always.  */\n \n-/* No linker spec needed, since using GNU linker always. */\n+/* No linker spec needed, since using GNU linker always.  */\n \n #undef LIB_SPEC\n #define LIB_SPEC \"%{mthreads:-L/lib/thread/}  \\\n   %{msystem-v:-lc_v}  \\\n   %{!msystem-v:%{mposix:-lc_p} -lc -lm}\"\n \n-/* Set the appropriate names for the Lynx startfiles. */\n+/* Set the appropriate names for the Lynx startfiles.  */\n \n #undef STARTFILE_SPEC\n #define STARTFILE_SPEC \"%{p:%{mthreads:thread/pinit1.o%s}%{!mthreads:pinit1.o%s}}%{!p:%{msystem-v:vinit1.o%s -e_start}%{!msystem-v:%{mthreads:thread/init1.o%s}%{!mthreads:init1.o%s}}}\"\n \n #undef ENDFILE_SPEC\n #define ENDFILE_SPEC \"%{p:_etext.o%s}%{!p:initn.o%s}\"\n \n-/* Override the svr3 versions. */\n+/* Override the svr3 versions.  */\n \n #undef WCHAR_TYPE\n #define WCHAR_TYPE \"int\"\n@@ -63,11 +63,11 @@ Boston, MA 02111-1307, USA.  */\n #define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n \n /* It is convenient to be able to generate standard coff debugging\n-   if requested via -gcoff. */\n+   if requested via -gcoff.  */\n \n #define SDB_DEBUGGING_INFO 1\n \n-/* Be function-relative for block and source line stab directives. */\n+/* Be function-relative for block and source line stab directives.  */\n \n #define DBX_BLOCKS_FUNCTION_RELATIVE 1\n \n@@ -97,7 +97,7 @@ Boston, MA 02111-1307, USA.  */\n \n #define HANDLE_SYSV_PRAGMA\n \n-/* Some additional command-line options. */\n+/* Some additional command-line options.  */\n \n #define TARGET_THREADS\t(target_flags & MASK_THREADS)\n #define MASK_THREADS\t0x40000000\n@@ -124,7 +124,7 @@ do {\t\t\t\t\t\t\t\t\\\n } while (0)\n \n /* Since init.o et al put all sorts of stuff into the init section,\n-   we can't use the standard init section support in crtbegin.o. */\n+   we can't use the standard init section support in crtbegin.o.  */\n \n #undef INIT_SECTION_ASM_OP\n \n@@ -143,6 +143,6 @@ do {\t\t\t\t\t\t\t\t\\\n #undef DO_GLOBAL_CTORS_BODY\n #undef DO_GLOBAL_DTORS_BODY\n \n-/* LynxOS doesn't have mcount. */\n+/* LynxOS doesn't have mcount.  */\n #undef FUNCTION_PROFILER\n #define FUNCTION_PROFILER(file, profile_label_no)"}, {"sha": "7c2f86573ce09790ae83d938a2319d9d3c0c9798", "filename": "gcc/config/netbsd-aout.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fconfig%2Fnetbsd-aout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fconfig%2Fnetbsd-aout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnetbsd-aout.h?ref=991b659243a67ab870d02a52be36dd63409ed2d9", "patch": "@@ -27,7 +27,7 @@ Boston, MA 02111-1307, USA.  */\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-/* This defines which switch letters take arguments. */\n+/* This defines which switch letters take arguments.  */\n \n #undef SWITCH_TAKES_ARG\n #define SWITCH_TAKES_ARG(CHAR)\t\t\\"}, {"sha": "19df77ffcd8d1750ee30fccc5d9ca1a6b57d1d09", "filename": "gcc/config/netbsd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fconfig%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fconfig%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnetbsd.h?ref=991b659243a67ab870d02a52be36dd63409ed2d9", "patch": "@@ -42,7 +42,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* NETBSD_NATIVE is defined when gcc is integrated into the NetBSD\n    source tree so it can be configured appropriately without using\n-   the GNU configure/build mechanism. */\n+   the GNU configure/build mechanism.  */\n \n #ifdef NETBSD_NATIVE\n "}, {"sha": "52bfb4e0d310b0b184d65c0c461cb666767ad816", "filename": "gcc/config/netware.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fconfig%2Fnetware.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fconfig%2Fnetware.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnetware.h?ref=991b659243a67ab870d02a52be36dd63409ed2d9", "patch": "@@ -25,7 +25,7 @@ Boston, MA 02111-1307, USA.  */\n    anyway for cross-compilers, and the other specs won't get picked up\n    'coz the user is supposed to do ld -r (hmm, perhaps that should be\n    the default).  In any case, setting them thus will catch some\n-   common user errors. */\n+   common user errors.  */\n \n #undef MD_EXEC_PREFIX\n #undef MD_STARTFILE_PREFIX"}, {"sha": "72825d458df645671ca033e3581e307c707f1693", "filename": "gcc/config/psos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fconfig%2Fpsos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fconfig%2Fpsos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpsos.h?ref=991b659243a67ab870d02a52be36dd63409ed2d9", "patch": "@@ -51,13 +51,13 @@ Boston, MA 02111-1307, USA.\n    board-support package (e.g. M162) and the run-time configuration\n    (e.g. application vs. ram-image vs. rom-image). Specify the\n    startfile in a linker-script created from the generic\n-   architecture-specific linker-scripts. */\n+   architecture-specific linker-scripts.  */\n \n #undef\tSTARTFILE_SPEC\n #define STARTFILE_SPEC \"\"\n \n \n-/* Predefined macros (independent of processor type). */\n+/* Predefined macros (independent of processor type).  */\n \n #undef CPP_PREDEFINES\n #define CPP_PREDEFINES \"-Dpsos\""}, {"sha": "3d8e527856729d035f81f849b033da20b1503204", "filename": "gcc/config/ptx4.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fconfig%2Fptx4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fconfig%2Fptx4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fptx4.h?ref=991b659243a67ab870d02a52be36dd63409ed2d9", "patch": "@@ -180,7 +180,7 @@ Boston, MA 02111-1307, USA.\n \t\t\t%{!ansi:values-Xa.o%s} \\\n  \t\t\tcrtbegin.o%s\"\n \n-/* Don't use bcopy, which doesn't handle overlaps before DYNIX/ptx 4.6. */\n+/* Don't use bcopy, which doesn't handle overlaps before DYNIX/ptx 4.6.  */\n \n #undef HAVE_BCOPY\n \n@@ -239,7 +239,7 @@ while (0)\n /* This says how to output assembler code to declare an uninitialized\n    external linkage data item.  There's a bug in the DYNIX/ptx linker\n    (PR 254649) when the alignment for such an object is specified, so\n-   ignore the ALIGN parameter. */\n+   ignore the ALIGN parameter.  */\n \n #undef ASM_OUTPUT_ALIGNED_COMMON\n #define ASM_OUTPUT_ALIGNED_COMMON(FILE, NAME, SIZE, ALIGN)\t\t\\"}, {"sha": "ffb5b4bc7549eccc3cc24c670fa2f48519f2a783", "filename": "gcc/gengtype.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=991b659243a67ab870d02a52be36dd63409ed2d9", "patch": "@@ -254,7 +254,7 @@ find_structure (name, isunion)\n \n /* Return the previously-defined parameterised structure for structure\n    T and parameters PARAM, or a new parameterised empty structure or\n-   union if none was defined previously.    */\n+   union if none was defined previously.  */\n \n static type_p\n find_param_structure (t, param)\n@@ -594,7 +594,7 @@ adjust_field_rtx_def (t, opt)\n \t    }\n \t  else if (t == basic_block_tp)\n \t    {\n-\t      /* We don't presently GC basic block structures... */\n+\t      /* We don't presently GC basic block structures...  */\n \t      subfields->opt = xmalloc (sizeof (*subfields->opt));\n \t      subfields->opt->next = nodot;\n \t      subfields->opt->name = \"skip\";"}, {"sha": "1427819d2b8003533529eebf104adc25a4e314c4", "filename": "gcc/params.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=991b659243a67ab870d02a52be36dd63409ed2d9", "patch": "@@ -138,7 +138,7 @@ DEFPARAM(PARAM_MAX_GCSE_MEMORY,\n \t \"max-gcse-memory\",\n \t \"The maximum amount of memory to be allocated by GCSE\",\n \t 50 * 1024 * 1024)\n-/* The number of repetitions of copy/const prop and PRE to run. */\n+/* The number of repetitions of copy/const prop and PRE to run.  */\n DEFPARAM(PARAM_MAX_GCSE_PASSES,\n \t\"max-gcse-passes\",\n \t\"The maximum number of passes to make when doing GCSE\","}, {"sha": "238e0f262fcbfb9f67931f1555c374bf291cc4f8", "filename": "gcc/predict.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fpredict.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fpredict.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.def?ref=991b659243a67ab870d02a52be36dd63409ed2d9", "patch": "@@ -74,7 +74,7 @@ DEF_PREDICTOR (PRED_NORETURN, \"noreturn call\", HITRATE (99),\n DEF_PREDICTOR (PRED_LOOP_BRANCH, \"loop branch\", HITRATE (89),\n \t       PRED_FLAG_FIRST_MATCH)\n \n-/* Edge causing loop to terminate is probably not taken. */\n+/* Edge causing loop to terminate is probably not taken.  */\n DEF_PREDICTOR (PRED_LOOP_EXIT, \"loop exit\", HITRATE (90),\n \t       PRED_FLAG_FIRST_MATCH)\n "}, {"sha": "353a225dcd9316b2e89830b033a30c61fe116075", "filename": "gcc/rtl.def", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=991b659243a67ab870d02a52be36dd63409ed2d9", "patch": "@@ -207,7 +207,7 @@ DEF_RTL_EXPR(DEFINE_PEEPHOLE, \"define_peephole\", \"EsTV\", 'x')\n \tinsns.  This might, for example, create some RTX's and store them in\n \telements of `recog_data.operand' for use by the vector of\n \tinsn-patterns.\n-\t(`operands' is an alias here for `recog_data.operand').   */\n+\t(`operands' is an alias here for `recog_data.operand').  */\n DEF_RTL_EXPR(DEFINE_SPLIT, \"define_split\", \"EsES\", 'x')\n \n /* Definition of an insn and associated split.\n@@ -497,10 +497,10 @@ DEF_RTL_EXPR(DEFINE_INSN_RESERVATION, \"define_insn_reservation\", \"sies\", 'x')\n /* Definition of an insn attribute.\n    1st operand: name of the attribute\n    2nd operand: comma-separated list of possible attribute values\n-   3rd operand: expression for the default value of the attribute. */\n+   3rd operand: expression for the default value of the attribute.  */\n DEF_RTL_EXPR(DEFINE_ATTR, \"define_attr\", \"sse\", 'x')\n \n-/* Marker for the name of an attribute. */\n+/* Marker for the name of an attribute.  */\n DEF_RTL_EXPR(ATTR, \"attr\", \"s\", 'x')\n \n /* For use in the last (optional) operand of DEFINE_INSN or DEFINE_PEEPHOLE and\n@@ -964,7 +964,7 @@ DEF_RTL_EXPR(LTU, \"ltu\", \"ee\", '<')\n DEF_RTL_EXPR(UNORDERED, \"unordered\", \"ee\", '<')\n DEF_RTL_EXPR(ORDERED, \"ordered\", \"ee\", '<')\n \n-/* These are equivalent to unordered or ... */\n+/* These are equivalent to unordered or ...  */\n DEF_RTL_EXPR(UNEQ, \"uneq\", \"ee\", '<')\n DEF_RTL_EXPR(UNGE, \"unge\", \"ee\", '<')\n DEF_RTL_EXPR(UNGT, \"ungt\", \"ee\", '<')\n@@ -1067,7 +1067,7 @@ DEF_RTL_EXPR(RANGE_INFO, \"range_info\", \"uuEiiiiiibbii\", 'x')\n    live length.  Operand 7 is the number of calls that this register is live\n    across.  Operand 8 is the symbol node of the variable if the register is a\n    user variable.  Operand 9 is the block node that the variable is declared\n-   in if the register is a user variable. */\n+   in if the register is a user variable.  */\n DEF_RTL_EXPR(RANGE_REG, \"range_reg\", \"iiiiiiiitt\", 'x')\n \n /* Information about a local variable's ranges.  Operand 0 is an EXPR_LIST of\n@@ -1082,7 +1082,7 @@ DEF_RTL_EXPR(RANGE_LIVE, \"range_live\", \"bi\", 'x')\n \n /* A unary `__builtin_constant_p' expression.  These are only emitted\n    during RTL generation, and then only if optimize > 0.  They are\n-   eliminated by the first CSE pass. */\n+   eliminated by the first CSE pass.  */\n DEF_RTL_EXPR(CONSTANT_P_RTX, \"constant_p_rtx\", \"e\", 'x')\n \n /* A placeholder for a CALL_INSN which may be turned into a normal call,"}, {"sha": "7a0b84960b11a7d95eb400efa5ee0ceaf9c2d3f5", "filename": "gcc/stab.def", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fstab.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fstab.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstab.def?ref=991b659243a67ab870d02a52be36dd63409ed2d9", "patch": "@@ -47,10 +47,10 @@ __define_stab (N_MAIN, 0x2a, \"MAIN\")\n    Supposedly the value is its line number; I'm skeptical.  */\n __define_stab (N_PC, 0x30, \"PC\")\n \n-/* Number of symbols:  0, files,,funcs,lines according to Ultrix V4.0. */\n+/* Number of symbols:  0, files,,funcs,lines according to Ultrix V4.0.  */\n __define_stab (N_NSYMS, 0x32, \"NSYMS\")\n \n-/* \"No DST map for sym: name, ,0,type,ignored\"  according to Ultrix V4.0. */\n+/* \"No DST map for sym: name, ,0,type,ignored\"  according to Ultrix V4.0.  */\n __define_stab (N_NOMAP, 0x34, \"NOMAP\")\n \n /* New stab from Solaris.  I don't know what it means, but it\n@@ -90,7 +90,7 @@ __define_stab (N_BROWS, 0x48, \"BROWS\")\n __define_stab(N_DEFD, 0x4a, \"DEFD\")\n \n /* THE FOLLOWING TWO STAB VALUES CONFLICT.  Happily, one is for Modula-2\n-   and one is for C++.   Still,... */\n+   and one is for C++.   Still,...  */\n /* GNU C++ exception variable.  Name is variable name.  */\n __define_stab (N_EHDECL, 0x50, \"EHDECL\")\n /* Modula2 info \"for imc\":  name,,0,0,0  according to Ultrix V4.0.  */\n@@ -168,7 +168,7 @@ __define_stab (N_ECOML, 0xe8, \"ECOML\")\n \n /* These STAB's are used on Gould systems for Non-Base register symbols\n    or something like that.  FIXME.  I have assigned the values at random\n-   since I don't have a Gould here.  Fixups from Gould folk welcome... */\n+   since I don't have a Gould here.  Fixups from Gould folk welcome...  */\n __define_stab (N_NBTEXT, 0xF0, \"NBTEXT\")\n __define_stab (N_NBDATA, 0xF2, \"NBDATA\")\n __define_stab (N_NBBSS,  0xF4, \"NBBSS\")"}, {"sha": "e468a2b8ebecd30ee487a45758417618ed66a065", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=991b659243a67ab870d02a52be36dd63409ed2d9", "patch": "@@ -1022,12 +1022,12 @@ place_field (rli, field)\n  \t  || (rli->prev_field && ! DECL_PACKED (rli->prev_field))))\n     {\n       /* At this point, either the prior or current are bitfields,\n-\t (possibly both), and we're dealing with MS packing. */\n+\t (possibly both), and we're dealing with MS packing.  */\n       tree prev_saved = rli->prev_field;\n \n       /* Is the prior field a bitfield?  If so, handle \"runs\" of same\n-\t type size fields. */\n-      if (rli->prev_field /* necessarily a bitfield if it exists. */) \n+\t type size fields.  */\n+      if (rli->prev_field /* necessarily a bitfield if it exists.  */)\n \t{\n \t  /* If both are bitfields, nonzero, and the same size, this is\n \t     the middle of a run.  Zero declared size fields are special\n@@ -1049,7 +1049,7 @@ place_field (rli, field)\n \n \t      if (rli->remaining_in_alignment < bitsize)\n \t\t{\n-\t\t  /* out of bits; bump up to next 'word'. */\n+\t\t  /* out of bits; bump up to next 'word'.  */\n \t\t  rli->bitpos = size_binop (PLUS_EXPR,\n \t\t\t\t      type_size,\n \t\t\t\t      DECL_FIELD_BIT_OFFSET(rli->prev_field));\n@@ -1079,12 +1079,12 @@ place_field (rli, field)\n \t      else\n \t\t{\n \t\t  /* We \"use up\" size zero fields; the code below should behave\n-\t\t     as if the prior field was not a bitfield. */\n+\t\t     as if the prior field was not a bitfield.  */\n \t\t  prev_saved = NULL;\n \t\t}\n \n \t      /* Cause a new bitfield to be captured, either this time (if \n-\t\t currently a bitfield) or next time we see one. */\n+\t\t currently a bitfield) or next time we see one.  */\n \t      if (!DECL_BIT_FIELD_TYPE(field)\n \t\t || integer_zerop (DECL_SIZE (field)))\n \t\t{\n@@ -1124,7 +1124,7 @@ place_field (rli, field)\n \t\t  = TREE_INT_CST_LOW (TYPE_SIZE(TREE_TYPE(field)))\n \t\t    - TREE_INT_CST_LOW (DECL_SIZE (field));\n \n-\t  /* Now align (conventionally) for the new type. */\n+\t  /* Now align (conventionally) for the new type.  */\n \t  if (!DECL_PACKED(field))\n \t      type_align = MAX(TYPE_ALIGN (type), type_align);\n \n@@ -1142,7 +1142,7 @@ place_field (rli, field)\n \n \t  rli->bitpos = round_up (rli->bitpos, type_align);\n           /* If we really aligned, don't allow subsequent bitfields\n-\t     to undo that. */\n+\t     to undo that.  */\n \t  rli->prev_field = NULL;\n \t}\n     }\n@@ -1173,7 +1173,7 @@ place_field (rli, field)\n   if (known_align != actual_align)\n     layout_decl (field, actual_align);\n \n-  /* Only the MS bitfields use this. */\n+  /* Only the MS bitfields use this.  */\n   if (rli->prev_field == NULL && DECL_BIT_FIELD_TYPE(field))\n       rli->prev_field = field;\n "}, {"sha": "c04b486fe1598bca5c802632b74bf81c6d6e17c8", "filename": "gcc/tree.def", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991b659243a67ab870d02a52be36dd63409ed2d9/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=991b659243a67ab870d02a52be36dd63409ed2d9", "patch": "@@ -204,14 +204,14 @@ DEFTREECODE (FILE_TYPE, \"file_type\", 't', 0)\n  The field TYPE_POINTER_TO (TREE_TYPE (array_type)) is always nonzero\n  and holds the type to coerce a value of that array type to in C.\n  TYPE_STRING_FLAG indicates a string (in contrast to an array of chars)\n- in languages (such as Chill) that make a distinction. */\n+ in languages (such as Chill) that make a distinction.  */\n /* Array types in C or Pascal */\n DEFTREECODE (ARRAY_TYPE, \"array_type\", 't', 0)\n \n /* Types of sets for Pascal.  Special fields are the same as\n    in an array type.  The target type is always a boolean type.\n    Used for both bitstrings and powersets in Chill;\n-   TYPE_STRING_FLAG indicates a bitstring. */\n+   TYPE_STRING_FLAG indicates a bitstring.  */\n DEFTREECODE (SET_TYPE, \"set_type\", 't', 0)\n \n /* Struct in C, or record in Pascal.  */\n@@ -369,7 +369,7 @@ DEFTREECODE (INDIRECT_REF, \"indirect_ref\", 'r', 1)\n DEFTREECODE (BUFFER_REF, \"buffer_ref\", 'r', 1)\n \n /* Array indexing.\n-   Operand 0 is the array; operand 1 is a (single) array index. */\n+   Operand 0 is the array; operand 1 is a (single) array index.  */\n DEFTREECODE (ARRAY_REF, \"array_ref\", 'r', 2)\n \n /* Likewise, except that the result is a range (\"slice\") of the array.  The\n@@ -670,7 +670,7 @@ DEFTREECODE (NE_EXPR, \"ne_expr\", '<', 2)\n DEFTREECODE (UNORDERED_EXPR, \"unordered_expr\", '<', 2)\n DEFTREECODE (ORDERED_EXPR, \"ordered_expr\", '<', 2)\n \n-/* These are equivalent to unordered or ... */\n+/* These are equivalent to unordered or ...  */\n DEFTREECODE (UNLT_EXPR, \"unlt_expr\", '<', 2)\n DEFTREECODE (UNLE_EXPR, \"unle_expr\", '<', 2)\n DEFTREECODE (UNGT_EXPR, \"ungt_expr\", '<', 2)\n@@ -846,7 +846,7 @@ DEFTREECODE (EXPR_WITH_FILE_LOCATION, \"expr_with_file_location\", 'e', 3)\n /* Switch expression.\n    Operand 0 is the expression used to perform the branch,\n    Operand 1 contains the case values. The way they're organized is\n-   front-end implementation defined. */\n+   front-end implementation defined.  */\n DEFTREECODE (SWITCH_EXPR, \"switch_expr\", 'e', 2)\n \n /* The exception object from the runtime.  */"}]}