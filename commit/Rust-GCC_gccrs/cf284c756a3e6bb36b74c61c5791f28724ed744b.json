{"sha": "cf284c756a3e6bb36b74c61c5791f28724ed744b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2YyODRjNzU2YTNlNmJiMzZiNzRjNjFjNTc5MWYyODcyNGVkNzQ0Yg==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2007-12-19T16:23:09Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-12-19T16:23:09Z"}, "message": "exp_attr.adb (Expand_N_Attribute_Reference, case Size): Fix error in handling compile time known size of record or array (case of front...\n\n2007-12-19  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_attr.adb (Expand_N_Attribute_Reference, case Size): Fix error in\n\thandling compile time known size of record or array (case of front end\n\tlayout active, e.g. in GNAAMP).\n\nFrom-SVN: r131072", "tree": {"sha": "75c582a077c9d81d589519d70a412888458375d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75c582a077c9d81d589519d70a412888458375d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf284c756a3e6bb36b74c61c5791f28724ed744b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf284c756a3e6bb36b74c61c5791f28724ed744b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf284c756a3e6bb36b74c61c5791f28724ed744b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf284c756a3e6bb36b74c61c5791f28724ed744b/comments", "author": null, "committer": null, "parents": [{"sha": "4a76b687c424b460021ad90e7ade96e66e4c0bf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a76b687c424b460021ad90e7ade96e66e4c0bf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a76b687c424b460021ad90e7ade96e66e4c0bf1"}], "stats": {"total": 24, "additions": 20, "deletions": 4}, "files": [{"sha": "b7c7d1d56035dd28d5eba0cf45cd18eb3b08914d", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf284c756a3e6bb36b74c61c5791f28724ed744b/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf284c756a3e6bb36b74c61c5791f28724ed744b/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=cf284c756a3e6bb36b74c61c5791f28724ed744b", "patch": "@@ -3756,13 +3756,29 @@ package body Exp_Attr is\n          --  Common processing for record and array component case\n \n          if Siz /= No_Uint and then Siz /= 0 then\n-            Rewrite (N, Make_Integer_Literal (Loc, Siz));\n+            declare\n+               CS : constant Boolean := Comes_From_Source (N);\n \n-            Analyze_And_Resolve (N, Typ);\n+            begin\n+               Rewrite (N, Make_Integer_Literal (Loc, Siz));\n+\n+               --  This integer literal is not a static expression. We do not\n+               --  call Analyze_And_Resolve here, because this would activate\n+               --  the circuit for deciding that a static value was out of\n+               --  range, and we don't want that.\n \n-            --  The result is not a static expression\n+               --  So just manually set the type, mark the expression as non-\n+               --  static, and then ensure that the result is checked properly\n+               --  if the attribute comes from source (if it was internally\n+               --  generated, we never need a constraint check).\n \n-            Set_Is_Static_Expression (N, False);\n+               Set_Etype (N, Typ);\n+               Set_Is_Static_Expression (N, False);\n+\n+               if CS then\n+                  Apply_Constraint_Check (N, Typ);\n+               end if;\n+            end;\n          end if;\n       end Size;\n "}]}