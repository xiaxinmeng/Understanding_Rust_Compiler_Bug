{"sha": "b33ab7a9b05c55d942817dac4d8a9b473da7d3c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjMzYWI3YTliMDVjNTVkOTQyODE3ZGFjNGQ4YTliNDczZGE3ZDNjMg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2003-07-29T16:38:48Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2003-07-29T16:38:48Z"}, "message": "natIconv.cc (write): Handle case where output buffer is too small.\n\n\t* gnu/gcj/convert/natIconv.cc (write): Handle case where\n\toutput buffer is too small.\n\nFrom-SVN: r69927", "tree": {"sha": "80c8fab2377be531c263136d07f8841302646c4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80c8fab2377be531c263136d07f8841302646c4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b33ab7a9b05c55d942817dac4d8a9b473da7d3c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b33ab7a9b05c55d942817dac4d8a9b473da7d3c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b33ab7a9b05c55d942817dac4d8a9b473da7d3c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b33ab7a9b05c55d942817dac4d8a9b473da7d3c2/comments", "author": null, "committer": null, "parents": [{"sha": "399dedb996c18f40e5eb60d8707d86701b27db0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/399dedb996c18f40e5eb60d8707d86701b27db0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/399dedb996c18f40e5eb60d8707d86701b27db0e"}], "stats": {"total": 47, "additions": 33, "deletions": 14}, "files": [{"sha": "4af6516a69337167d9fe40dfb866a671b1a74961", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b33ab7a9b05c55d942817dac4d8a9b473da7d3c2/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b33ab7a9b05c55d942817dac4d8a9b473da7d3c2/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=b33ab7a9b05c55d942817dac4d8a9b473da7d3c2", "patch": "@@ -1,3 +1,8 @@\n+2003-07-29  Tom Tromey  <tromey@redhat.com>\n+\n+\t* gnu/gcj/convert/natIconv.cc (write): Handle case where\n+\toutput buffer is too small.\n+\n 2003-07-28  Tom Tromey  <tromey@redhat.com>\n \n \t* java/lang/natString.cc (init(gnu.gcj.runtime.StringBuffer)):"}, {"sha": "d98e449677a058027cdecf7af1dfaadaf0fa4770", "filename": "libjava/gnu/gcj/convert/natIconv.cc", "status": "modified", "additions": 28, "deletions": 14, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b33ab7a9b05c55d942817dac4d8a9b473da7d3c2/libjava%2Fgnu%2Fgcj%2Fconvert%2FnatIconv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b33ab7a9b05c55d942817dac4d8a9b473da7d3c2/libjava%2Fgnu%2Fgcj%2Fconvert%2FnatIconv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fconvert%2FnatIconv.cc?ref=b33ab7a9b05c55d942817dac4d8a9b473da7d3c2", "patch": "@@ -1,6 +1,6 @@\n-// Input_iconv.java -- Java side of iconv() reader.\n+// natIconv.cc -- Java side of iconv() reader.\n \n-/* Copyright (C) 2000, 2001  Free Software Foundation\n+/* Copyright (C) 2000, 2001, 2003  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -201,25 +201,39 @@ gnu::gcj::convert::Output_iconv::write (jcharArray inbuffer,\n       inbuf = (char *) temp_buffer;\n     }\n \n-  // If the conversion fails on the very first character, then we\n-  // assume that the character can't be represented in the output\n-  // encoding.  There's nothing useful we can do here, so we simply\n-  // omit that character.  Note that we can't check `errno' because\n-  // glibc 2.1.3 doesn't set it correctly.  We could check it if we\n-  // really needed to, but we'd have to disable support for 2.1.3.\n   size_t loop_old_in = old_in;\n   while (1)\n     {\n       size_t r = iconv_adapter (iconv, (iconv_t) handle,\n \t\t\t\t&inbuf, &inavail,\n \t\t\t\t&outbuf, &outavail);\n-      if (r == (size_t) -1 && inavail == loop_old_in)\n+      if (r == (size_t) -1)\n \t{\n-\t  inavail -= 2;\n-\t  if (inavail == 0)\n-\t    break;\n-\t  loop_old_in -= 2;\n-\t  inbuf += 2;\n+\t  if (errno == EINVAL)\n+\t    {\n+\t      // Incomplete byte sequence at the end of the input\n+\t      // buffer.  This shouldn't be able to happen here.\n+\t      break;\n+\t    }\n+\t  else if (errno == E2BIG)\n+\t    {\n+\t      // Output buffer is too small.\n+\t      break;\n+\t    }\n+\t  else if (errno == EILSEQ || inavail == loop_old_in)\n+\t    {\n+\t      // Untranslatable sequence.  Since glibc 2.1.3 doesn't\n+\t      // properly set errno, we also assume that this is what\n+\t      // is happening if no conversions took place.  (This can\n+\t      // be a bogus assumption if in fact the output buffer is\n+\t      // too small.)  We skip the first character and try\n+\t      // again.\n+\t      inavail -= 2;\n+\t      if (inavail == 0)\n+\t\tbreak;\n+\t      loop_old_in -= 2;\n+\t      inbuf += 2;\n+\t    }\n \t}\n       else\n \tbreak;"}]}