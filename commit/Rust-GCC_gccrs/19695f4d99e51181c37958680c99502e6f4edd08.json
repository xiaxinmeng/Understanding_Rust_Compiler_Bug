{"sha": "19695f4d99e51181c37958680c99502e6f4edd08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk2OTVmNGQ5OWU1MTE4MWMzNzk1ODY4MGM5OTUwMmU2ZjRlZGQwOA==", "commit": {"author": {"name": "Chung-Lin Tang", "email": "cltang@codesourcery.com", "date": "2019-02-19T14:10:15Z"}, "committer": {"name": "Chung-Lin Tang", "email": "cltang@gcc.gnu.org", "date": "2019-02-19T14:10:15Z"}, "message": "re PR c/87924 (OpenACC wait clauses without async-arguments)\n\n2019-02-19  Chung-Lin Tang <cltang@codesourcery.com>\n\n\tPR c/87924\n\tgcc/c/\n\t* c-parser.c (c_parser_oacc_clause_wait): Add representation of wait\n\tclause without argument as 'wait (GOMP_ASYNC_NOVAL)', adjust comments.\n\n\tgcc/cp/\n\t* parser.c (cp_parser_oacc_clause_wait): Add representation of wait\n\tclause without argument as 'wait (GOMP_ASYNC_NOVAL)', adjust comments.\n\n\tgcc/fortran/\n\t* openmp.c (gfc_match_omp_clauses): Add representation of wait clause\n\twithout argument as 'wait (GOMP_ASYNC_NOVAL)'.\n\n\tlibgomp/\n\t* oacc-parallel.c (GOACC_parallel_keyed): Remove condition on call to\n\tgoacc_wait().\n\t(goacc_wait): Handle ACC_ASYNC_NOVAL case, remove goacc_thread() call\n\tand related adjustment.\n\n\tReviewed-by: Thomas Schwinge  <thomas@codesourcery.com>\n\nFrom-SVN: r269016", "tree": {"sha": "c8cfec47a9c4cbc6e7d3353936b79246d8014e3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8cfec47a9c4cbc6e7d3353936b79246d8014e3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19695f4d99e51181c37958680c99502e6f4edd08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19695f4d99e51181c37958680c99502e6f4edd08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19695f4d99e51181c37958680c99502e6f4edd08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19695f4d99e51181c37958680c99502e6f4edd08/comments", "author": {"login": "cltang", "id": 4055966, "node_id": "MDQ6VXNlcjQwNTU5NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/4055966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cltang", "html_url": "https://github.com/cltang", "followers_url": "https://api.github.com/users/cltang/followers", "following_url": "https://api.github.com/users/cltang/following{/other_user}", "gists_url": "https://api.github.com/users/cltang/gists{/gist_id}", "starred_url": "https://api.github.com/users/cltang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cltang/subscriptions", "organizations_url": "https://api.github.com/users/cltang/orgs", "repos_url": "https://api.github.com/users/cltang/repos", "events_url": "https://api.github.com/users/cltang/events{/privacy}", "received_events_url": "https://api.github.com/users/cltang/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "83fce9004a100215ac1b5e1ea5e1084bd2667c66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83fce9004a100215ac1b5e1ea5e1084bd2667c66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83fce9004a100215ac1b5e1ea5e1084bd2667c66"}], "stats": {"total": 85, "additions": 71, "deletions": 14}, "files": [{"sha": "b76f5b1fae694c3174d532c5a2b6b61b13ce778f", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19695f4d99e51181c37958680c99502e6f4edd08/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19695f4d99e51181c37958680c99502e6f4edd08/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=19695f4d99e51181c37958680c99502e6f4edd08", "patch": "@@ -1,3 +1,9 @@\n+2019-02-19  Chung-Lin Tang <cltang@codesourcery.com>\n+\n+\tPR c/87924\n+\t* c-parser.c (c_parser_oacc_clause_wait): Add representation of wait\n+\tclause without argument as 'wait (GOMP_ASYNC_NOVAL)', adjust comments.\n+\n 2019-02-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/89340"}, {"sha": "6c1f3076241fe67398fa145a5b2b930a7b26fd0d", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19695f4d99e51181c37958680c99502e6f4edd08/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19695f4d99e51181c37958680c99502e6f4edd08/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=19695f4d99e51181c37958680c99502e6f4edd08", "patch": "@@ -13412,7 +13412,7 @@ c_parser_oacc_clause_tile (c_parser *parser, tree list)\n }\n \n /* OpenACC:\n-   wait ( int-expr-list ) */\n+   wait [( int-expr-list )] */\n \n static tree\n c_parser_oacc_clause_wait (c_parser *parser, tree list)\n@@ -13421,6 +13421,14 @@ c_parser_oacc_clause_wait (c_parser *parser, tree list)\n \n   if (c_parser_peek_token (parser)->type == CPP_OPEN_PAREN)\n     list = c_parser_oacc_wait_list (parser, clause_loc, list);\n+  else\n+    {\n+      tree c = build_omp_clause (clause_loc, OMP_CLAUSE_WAIT);\n+\n+      OMP_CLAUSE_DECL (c) = build_int_cst (integer_type_node, GOMP_ASYNC_NOVAL);\n+      OMP_CLAUSE_CHAIN (c) = list;\n+      list = c;\n+    }\n \n   return list;\n }"}, {"sha": "9c42190f04a8c96e07682558d8e497c482e81cc7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19695f4d99e51181c37958680c99502e6f4edd08/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19695f4d99e51181c37958680c99502e6f4edd08/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=19695f4d99e51181c37958680c99502e6f4edd08", "patch": "@@ -1,3 +1,9 @@\n+2019-02-19  Chung-Lin Tang <cltang@codesourcery.com>\n+\n+\tPR c/87924\n+\t* parser.c (cp_parser_oacc_clause_wait): Add representation of wait\n+\tclause without argument as 'wait (GOMP_ASYNC_NOVAL)', adjust comments.\n+\n 2019-02-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/89387"}, {"sha": "f8d44e06ec351247f3b487cda08b1ec6a04f1885", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19695f4d99e51181c37958680c99502e6f4edd08/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19695f4d99e51181c37958680c99502e6f4edd08/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=19695f4d99e51181c37958680c99502e6f4edd08", "patch": "@@ -32867,17 +32867,23 @@ cp_parser_oacc_wait_list (cp_parser *parser, location_t clause_loc, tree list)\n }\n \n /* OpenACC:\n-   wait ( int-expr-list ) */\n+   wait [( int-expr-list )] */\n \n static tree\n cp_parser_oacc_clause_wait (cp_parser *parser, tree list)\n {\n   location_t location = cp_lexer_peek_token (parser->lexer)->location;\n \n-  if (cp_lexer_peek_token (parser->lexer)->type != CPP_OPEN_PAREN)\n-    return list;\n+  if (cp_lexer_peek_token (parser->lexer)->type == CPP_OPEN_PAREN)\n+    list = cp_parser_oacc_wait_list (parser, location, list);\n+  else\n+    {\n+      tree c = build_omp_clause (location, OMP_CLAUSE_WAIT);\n \n-  list = cp_parser_oacc_wait_list (parser, location, list);\n+      OMP_CLAUSE_DECL (c) = build_int_cst (integer_type_node, GOMP_ASYNC_NOVAL);\n+      OMP_CLAUSE_CHAIN (c) = list;\n+      list = c;\n+    }\n \n   return list;\n }"}, {"sha": "989bf9aba74c8553cb05b4a0d97dd00b76cf07c1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19695f4d99e51181c37958680c99502e6f4edd08/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19695f4d99e51181c37958680c99502e6f4edd08/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=19695f4d99e51181c37958680c99502e6f4edd08", "patch": "@@ -1,3 +1,9 @@\n+2019-02-19  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\tPR c/87924\n+\t* openmp.c (gfc_match_omp_clauses): Add representation of wait clause\n+\twithout argument as 'wait (GOMP_ASYNC_NOVAL)'.\n+\n 2019-02-18  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/87689"}, {"sha": "11dd3ae0ada5a917223f23988ee51e6b935e54b8", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19695f4d99e51181c37958680c99502e6f4edd08/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19695f4d99e51181c37958680c99502e6f4edd08/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=19695f4d99e51181c37958680c99502e6f4edd08", "patch": "@@ -1885,7 +1885,19 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t\t  break;\n \t\t}\n \t      else if (m == MATCH_NO)\n-\t\tneeds_space = true;\n+\t\t{\n+\t\t  gfc_expr *expr\n+\t\t    = gfc_get_constant_expr (BT_INTEGER,\n+\t\t\t\t\t     gfc_default_integer_kind,\n+\t\t\t\t\t     &gfc_current_locus);\n+\t\t  mpz_set_si (expr->value.integer, GOMP_ASYNC_NOVAL);\n+\t\t  gfc_expr_list **expr_list = &c->wait_list;\n+\t\t  while (*expr_list)\n+\t\t    expr_list = &(*expr_list)->next;\n+\t\t  *expr_list = gfc_get_expr_list ();\n+\t\t  (*expr_list)->expr = expr;\n+\t\t  needs_space = true;\n+\t\t}\n \t      continue;\n \t    }\n \t  if ((mask & OMP_CLAUSE_WORKER)"}, {"sha": "f310c2f6c2490a595b0113bd533ebe7797fd13b8", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19695f4d99e51181c37958680c99502e6f4edd08/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19695f4d99e51181c37958680c99502e6f4edd08/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=19695f4d99e51181c37958680c99502e6f4edd08", "patch": "@@ -1,3 +1,11 @@\n+2019-02-19  Chung-Lin Tang <cltang@codesourcery.com>\n+\n+\tPR c/87924\n+\t* oacc-parallel.c (GOACC_parallel_keyed): Remove condition on call to\n+\tgoacc_wait().\n+\t(goacc_wait): Handle ACC_ASYNC_NOVAL case, remove goacc_thread() call\n+\tand related adjustment.\n+\n 2019-01-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/88988"}, {"sha": "b77c5e8b9c5d8da5fe1334a423818752b1db80db", "filename": "libgomp/oacc-parallel.c", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19695f4d99e51181c37958680c99502e6f4edd08/libgomp%2Foacc-parallel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19695f4d99e51181c37958680c99502e6f4edd08/libgomp%2Foacc-parallel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-parallel.c?ref=19695f4d99e51181c37958680c99502e6f4edd08", "patch": "@@ -206,9 +206,7 @@ GOACC_parallel_keyed (int flags_m, void (*fn) (void *),\n \tcase GOMP_LAUNCH_WAIT:\n \t  {\n \t    unsigned num_waits = GOMP_LAUNCH_OP (tag);\n-\n-\t    if (num_waits)\n-\t      goacc_wait (async, num_waits, &ap);\n+\t    goacc_wait (async, num_waits, &ap);\n \t    break;\n \t  }\n \n@@ -514,13 +512,20 @@ GOACC_enter_exit_data (int flags_m, size_t mapnum,\n static void\n goacc_wait (int async, int num_waits, va_list *ap)\n {\n-  struct goacc_thread *thr = goacc_thread ();\n-  struct gomp_device_descr *acc_dev = thr->dev;\n-\n   while (num_waits--)\n     {\n       int qid = va_arg (*ap, int);\n-      \n+\n+      /* Waiting on ACC_ASYNC_NOVAL maps to 'wait all'.  */\n+      if (qid == acc_async_noval)\n+\t{\n+\t  if (async == acc_async_sync)\n+\t    acc_wait_all ();\n+\t  else\n+\t    acc_wait_all_async (async);\n+\t  break;\n+\t}\n+\n       if (acc_async_test (qid))\n \tcontinue;\n \n@@ -531,7 +536,7 @@ goacc_wait (int async, int num_waits, va_list *ap)\n \t    launching on, the queue itself will order work as\n \t    required, so there's no need to wait explicitly.  */\n       else\n-\tacc_dev->openacc.async_wait_async_func (qid, async);\n+\tacc_wait_async (qid, async);\n     }\n }\n "}]}