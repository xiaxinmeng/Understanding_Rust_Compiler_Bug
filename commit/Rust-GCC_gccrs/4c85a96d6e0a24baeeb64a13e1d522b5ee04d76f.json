{"sha": "4c85a96d6e0a24baeeb64a13e1d522b5ee04d76f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM4NWE5NmQ2ZTBhMjRiYWVlYjY0YTEzZTFkNTIyYjVlZTA0ZDc2Zg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-04-07T09:24:06Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-04-07T09:24:06Z"}, "message": "ggc.h (struct rtx_def): Forward declare.\n\n        * ggc.h (struct rtx_def): Forward declare.\n\n        * print-rtl.c (debug_rtx_range): New.\n        * rtl.h (debug_rtx_range): Declare.\n\n        * varray.h (VARRAY_ACTIVE_SIZE, VARRAY_POP_ALL): New.\n\nFrom-SVN: r32996", "tree": {"sha": "8f84c5a6db1901dc589ad46eae5388cda4a8d7fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f84c5a6db1901dc589ad46eae5388cda4a8d7fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c85a96d6e0a24baeeb64a13e1d522b5ee04d76f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c85a96d6e0a24baeeb64a13e1d522b5ee04d76f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c85a96d6e0a24baeeb64a13e1d522b5ee04d76f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c85a96d6e0a24baeeb64a13e1d522b5ee04d76f/comments", "author": null, "committer": null, "parents": [{"sha": "a18820c64c3148a53112cb1f740d2b03a5c08538", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a18820c64c3148a53112cb1f740d2b03a5c08538", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a18820c64c3148a53112cb1f740d2b03a5c08538"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "c28a597d78a9366385b63c6043f9a8775522a028", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c85a96d6e0a24baeeb64a13e1d522b5ee04d76f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c85a96d6e0a24baeeb64a13e1d522b5ee04d76f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c85a96d6e0a24baeeb64a13e1d522b5ee04d76f", "patch": "@@ -1,5 +1,12 @@\n 2000-04-07  Richard Henderson  <rth@cygnus.com>\n \n+\t* ggc.h (struct rtx_def): Forward declare.\n+\n+\t* print-rtl.c (debug_rtx_range): New.\n+\t* rtl.h (debug_rtx_range): Declare.\n+\n+\t* varray.h (VARRAY_ACTIVE_SIZE, VARRAY_POP_ALL): New.\n+\n \t* gcse.c (gcse_main): Don't rebuild the CFG here.\n \t(delete_null_pointer_checks): Likewise.\n \t* ssa.c (convert_to_ssa): Likewise."}, {"sha": "9ee6c3dd7a9d32fc35ebde69dccaed4a3212a91c", "filename": "gcc/ggc.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c85a96d6e0a24baeeb64a13e1d522b5ee04d76f/gcc%2Fggc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c85a96d6e0a24baeeb64a13e1d522b5ee04d76f/gcc%2Fggc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc.h?ref=4c85a96d6e0a24baeeb64a13e1d522b5ee04d76f", "patch": "@@ -37,6 +37,7 @@ struct emit_status;\n struct expr_status;\n struct hash_table;\n struct label_node;\n+struct rtx_def;\n struct rtvec_def;\n struct stmt_status;\n union  tree_node;"}, {"sha": "4c5916321239db60a5b00f64de3c2e07cf7a4112", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c85a96d6e0a24baeeb64a13e1d522b5ee04d76f/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c85a96d6e0a24baeeb64a13e1d522b5ee04d76f/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=4c85a96d6e0a24baeeb64a13e1d522b5ee04d76f", "patch": "@@ -450,6 +450,21 @@ debug_rtx_list (x, n)\n     debug_rtx (insn);\n }\n \n+/* Call this function to print an rtx list from START to END inclusive.  */\n+\n+void\n+debug_rtx_range (start, end)\n+     rtx start, end;\n+{\n+  while (1)\n+    {\n+      debug_rtx (start);\n+      if (!start || start == end)\n+\tbreak;\n+      start = NEXT_INSN (start);\n+    }\n+}\n+\n /* Call this function to search an rtx list to find one with insn uid UID,\n    and then call debug_rtx_list to print it, using DEBUG_RTX_COUNT.\n    The found insn is returned to enable further debugging analysis.  */"}, {"sha": "517a0dbd8db4130837a30ed918928624512bc1e4", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c85a96d6e0a24baeeb64a13e1d522b5ee04d76f/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c85a96d6e0a24baeeb64a13e1d522b5ee04d76f/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=4c85a96d6e0a24baeeb64a13e1d522b5ee04d76f", "patch": "@@ -1564,6 +1564,7 @@ extern void fix_sched_param\t\tPARAMS ((const char *, const char *));\n /* In print-rtl.c */\n extern void debug_rtx\t\t\tPARAMS ((rtx));\n extern void debug_rtx_list\t\tPARAMS ((rtx, int));\n+extern void debug_rtx_range\t\tPARAMS ((rtx, rtx));\n extern rtx debug_rtx_find\t\tPARAMS ((rtx, int));\n #ifdef BUFSIZ\n extern void print_rtl\t\t\tPARAMS ((FILE *, rtx));"}, {"sha": "4e9b62f842122c733192d11dbd7085ba7ed01b68", "filename": "gcc/varray.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c85a96d6e0a24baeeb64a13e1d522b5ee04d76f/gcc%2Fvarray.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c85a96d6e0a24baeeb64a13e1d522b5ee04d76f/gcc%2Fvarray.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarray.h?ref=4c85a96d6e0a24baeeb64a13e1d522b5ee04d76f", "patch": "@@ -168,6 +168,9 @@ extern varray_type varray_grow\tPARAMS ((varray_type, size_t));\n \n #define VARRAY_SIZE(VA)\t((VA)->num_elements)\n \n+#define VARRAY_ACTIVE_SIZE(VA)\t((VA)->elements_used)\n+#define VARRAY_POP_ALL(VA)\t((VA)->elements_used = 0)\n+\n /* Check for VARRAY_xxx macros being in bound.  */\n #if defined ENABLE_CHECKING && (GCC_VERSION >= 2007)\n extern void varray_check_failed PARAMS ((varray_type, size_t,"}]}