{"sha": "f62ce24ff7570cf14d351c15d2799ad91ee54335", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjYyY2UyNGZmNzU3MGNmMTRkMzUxYzE1ZDI3OTlhZDkxZWU1NDMzNQ==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2013-10-11T14:02:07Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2013-10-11T14:02:07Z"}, "message": "sse.md (V_512): New.\n\n        * config/i386/sse.md (V_512): New.\n        (VI_512): Ditto.\n        (vcond<V_512:mode><VF_512:mode>): Ditto.\n        (vcond<V_512:mode><VI_512:mode>): Ditto.\n        (vcondu<V_512:mode><VI_512:mode>): Ditto.\n\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\nCo-Authored-By: Sergey Lega <sergey.s.lega@intel.com>\n\nFrom-SVN: r203440", "tree": {"sha": "ca6c3898b2416d1cfa6cda1b78db0ab30968d8a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca6c3898b2416d1cfa6cda1b78db0ab30968d8a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f62ce24ff7570cf14d351c15d2799ad91ee54335", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f62ce24ff7570cf14d351c15d2799ad91ee54335", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f62ce24ff7570cf14d351c15d2799ad91ee54335", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f62ce24ff7570cf14d351c15d2799ad91ee54335/comments", "author": null, "committer": null, "parents": [{"sha": "558d9f795b5c7f560bef4539e19c4f2e9e99533b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/558d9f795b5c7f560bef4539e19c4f2e9e99533b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/558d9f795b5c7f560bef4539e19c4f2e9e99533b"}], "stats": {"total": 75, "additions": 74, "deletions": 1}, "files": [{"sha": "8eea69f0cbe7575b71d0255caeadcaf0e8ed4ea0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62ce24ff7570cf14d351c15d2799ad91ee54335/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62ce24ff7570cf14d351c15d2799ad91ee54335/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f62ce24ff7570cf14d351c15d2799ad91ee54335", "patch": "@@ -1,3 +1,19 @@\n+2013-10-11  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Sergey Lega  <sergey.s.lega@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* config/i386/sse.md (V_512): New.\n+\t(VI_512): Ditto.\n+\t(vcond<V_512:mode><VF_512:mode>): Ditto.\n+\t(vcond<V_512:mode><VI_512:mode>): Ditto.\n+\t(vcondu<V_512:mode><VI_512:mode>): Ditto.\n+\n 2013-10-11  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Sergey Lega  <sergey.s.lega@intel.com>"}, {"sha": "34215cd8c1ed28b7f5861ac729acb053c486bffa", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 58, "deletions": 1, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62ce24ff7570cf14d351c15d2799ad91ee54335/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62ce24ff7570cf14d351c15d2799ad91ee54335/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=f62ce24ff7570cf14d351c15d2799ad91ee54335", "patch": "@@ -122,6 +122,9 @@\n (define_mode_iterator V_256\n   [V32QI V16HI V8SI V4DI V8SF V4DF])\n \n+;; All 512bit vector modes\n+(define_mode_iterator V_512 [V64QI V32HI V16SI V8DI V16SF V8DF])\n+\n ;; All 256bit and 512bit vector modes\n (define_mode_iterator V_256_512\n   [V32QI V16HI V8SI V4DI V8SF V4DF\n@@ -337,7 +340,10 @@\n ;; All 256bit vector integer modes\n (define_mode_iterator VI_256 [V32QI V16HI V8SI V4DI])\n \n-;; Random 128bit vector integer mode combinations\n+;; All 512bit vector integer modes\n+(define_mode_iterator VI_512 [V64QI V32HI V16SI V8DI])\n+\n+;; Various 128bit vector integer mode combinations\n (define_mode_iterator VI12_128 [V16QI V8HI])\n (define_mode_iterator VI14_128 [V16QI V4SI])\n (define_mode_iterator VI124_128 [V16QI V8HI V4SI])\n@@ -1853,6 +1859,23 @@\n \t\t      (const_string \"0\")))\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_expand \"vcond<V_512:mode><VF_512:mode>\"\n+  [(set (match_operand:V_512 0 \"register_operand\")\n+\t(if_then_else:V_512\n+\t  (match_operator 3 \"\"\n+\t    [(match_operand:VF_512 4 \"nonimmediate_operand\")\n+\t     (match_operand:VF_512 5 \"nonimmediate_operand\")])\n+\t  (match_operand:V_512 1 \"general_operand\")\n+\t  (match_operand:V_512 2 \"general_operand\")))]\n+  \"TARGET_AVX512F\n+   && (GET_MODE_NUNITS (<V_512:MODE>mode)\n+       == GET_MODE_NUNITS (<VF_512:MODE>mode))\"\n+{\n+  bool ok = ix86_expand_fp_vcond (operands);\n+  gcc_assert (ok);\n+  DONE;\n+})\n+\n (define_expand \"vcond<V_256:mode><VF_256:mode>\"\n   [(set (match_operand:V_256 0 \"register_operand\")\n \t(if_then_else:V_256\n@@ -6461,6 +6484,23 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_expand \"vcond<V_512:mode><VI_512:mode>\"\n+  [(set (match_operand:V_512 0 \"register_operand\")\n+\t(if_then_else:V_512\n+\t  (match_operator 3 \"\"\n+\t    [(match_operand:VI_512 4 \"nonimmediate_operand\")\n+\t     (match_operand:VI_512 5 \"general_operand\")])\n+\t  (match_operand:V_512 1)\n+\t  (match_operand:V_512 2)))]\n+  \"TARGET_AVX512F\n+   && (GET_MODE_NUNITS (<V_512:MODE>mode)\n+       == GET_MODE_NUNITS (<VI_512:MODE>mode))\"\n+{\n+  bool ok = ix86_expand_int_vcond (operands);\n+  gcc_assert (ok);\n+  DONE;\n+})\n+\n (define_expand \"vcond<V_256:mode><VI_256:mode>\"\n   [(set (match_operand:V_256 0 \"register_operand\")\n \t(if_then_else:V_256\n@@ -6510,6 +6550,23 @@\n   DONE;\n })\n \n+(define_expand \"vcondu<V_512:mode><VI_512:mode>\"\n+  [(set (match_operand:V_512 0 \"register_operand\")\n+\t(if_then_else:V_512\n+\t  (match_operator 3 \"\"\n+\t    [(match_operand:VI_512 4 \"nonimmediate_operand\")\n+\t     (match_operand:VI_512 5 \"nonimmediate_operand\")])\n+\t  (match_operand:V_512 1 \"general_operand\")\n+\t  (match_operand:V_512 2 \"general_operand\")))]\n+  \"TARGET_AVX512F\n+   && (GET_MODE_NUNITS (<V_512:MODE>mode)\n+       == GET_MODE_NUNITS (<VI_512:MODE>mode))\"\n+{\n+  bool ok = ix86_expand_int_vcond (operands);\n+  gcc_assert (ok);\n+  DONE;\n+})\n+\n (define_expand \"vcondu<V_256:mode><VI_256:mode>\"\n   [(set (match_operand:V_256 0 \"register_operand\")\n \t(if_then_else:V_256"}]}