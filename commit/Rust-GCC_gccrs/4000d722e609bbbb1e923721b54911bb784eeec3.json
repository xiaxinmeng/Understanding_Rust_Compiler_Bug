{"sha": "4000d722e609bbbb1e923721b54911bb784eeec3", "node_id": "C_kwDOANBUbNoAKDQwMDBkNzIyZTYwOWJiYmIxZTkyMzcyMWI1NDkxMWJiNzg0ZWVlYzM", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-09-24T12:21:34Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-09-28T19:22:51Z"}, "message": "libstdc++: Fix tests that use invalid types in ordered containers\n\nTypes used in ordered containers need to be comparable, or the container\nneeds to use a custom comparison function. These tests fail when\n_GLIBCXX_CONCEPT_CHECKS is defined, because the element types aren't\ncomparable.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/20_util/is_nothrow_swappable/value.h: Use custom\n\tcomparison function for priority_queue of type with no\n\trelational operators.\n\t* testsuite/20_util/is_swappable/value.h: Likewise.\n\t* testsuite/24_iterators/output/concept.cc: Add operator< to\n\ttype used in set.", "tree": {"sha": "7e0fe4d60cee8f1d4e6d89e346c2c23065cdf7c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e0fe4d60cee8f1d4e6d89e346c2c23065cdf7c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4000d722e609bbbb1e923721b54911bb784eeec3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4000d722e609bbbb1e923721b54911bb784eeec3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4000d722e609bbbb1e923721b54911bb784eeec3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4000d722e609bbbb1e923721b54911bb784eeec3/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45a8cd256934be3770f7e000db7b13f10eabee9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45a8cd256934be3770f7e000db7b13f10eabee9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45a8cd256934be3770f7e000db7b13f10eabee9a"}], "stats": {"total": 17, "additions": 14, "deletions": 3}, "files": [{"sha": "d6f166bee4676b6ee4d6a97201f137454e40654e", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_swappable/value.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4000d722e609bbbb1e923721b54911bb784eeec3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable%2Fvalue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4000d722e609bbbb1e923721b54911bb784eeec3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable%2Fvalue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable%2Fvalue.h?ref=4000d722e609bbbb1e923721b54911bb784eeec3", "patch": "@@ -285,7 +285,9 @@ void test01()\n   static_assert(test_property<is_nothrow_swappable,\n \t\tstd::queue<ThrowCopyConsClass>>(true), \"\");\n   static_assert(test_property<is_nothrow_swappable,\n-\t\tstd::priority_queue<ThrowCopyConsClass>>(true), \"\");\n+\t\tstd::priority_queue<ThrowCopyConsClass,\n+\t\t\t\t    std::vector<ThrowCopyConsClass>,\n+\t\t\t\t    comps::CompareNoThrowCopyable>>(true), \"\");\n   static_assert(test_property<is_nothrow_swappable,\n \t\tstd::stack<ThrowCopyConsClass>>(true), \"\");\n   static_assert(test_property<is_nothrow_swappable,"}, {"sha": "eb3f96dc0b1bae6d1934060d8fcdb988af945966", "filename": "libstdc++-v3/testsuite/20_util/is_swappable/value.h", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4000d722e609bbbb1e923721b54911bb784eeec3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_swappable%2Fvalue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4000d722e609bbbb1e923721b54911bb784eeec3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_swappable%2Fvalue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_swappable%2Fvalue.h?ref=4000d722e609bbbb1e923721b54911bb784eeec3", "patch": "@@ -55,6 +55,13 @@ namespace funny {\n   {\n     friend void swap(F3&, F3) {}\n   };\n+\n+  struct DummyCmp\n+  {\n+    template<class T>\n+      bool operator()(const T&, const T&) const\n+      { return false; }\n+  };\n }\n void test01()\n {\n@@ -152,7 +159,9 @@ void test01()\n   static_assert(test_property<is_swappable,\n \t\tstd::priority_queue<int>[1][2][3]>(true), \"\");\n   static_assert(test_property<is_swappable,\n-\t\tstd::priority_queue<construct::Nontrivial>>(true), \"\");\n+\t\tstd::priority_queue<construct::Nontrivial,\n+\t\t\t\t    std::vector<construct::Nontrivial>,\n+\t\t\t\t    funny::DummyCmp>>(true), \"\");\n   static_assert(test_property<is_swappable,\n \t\tstd::stack<int>>(true), \"\");\n   static_assert(test_property<is_swappable,"}, {"sha": "a0524387dab7744a14a9003d54d3886c8a080ca0", "filename": "libstdc++-v3/testsuite/24_iterators/output/concept.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4000d722e609bbbb1e923721b54911bb784eeec3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Foutput%2Fconcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4000d722e609bbbb1e923721b54911bb784eeec3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Foutput%2Fconcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Foutput%2Fconcept.cc?ref=4000d722e609bbbb1e923721b54911bb784eeec3", "patch": "@@ -68,7 +68,7 @@ using std::string;\n using std::string_view;\n using std::vector;\n \n-struct B { };\n+struct B { bool operator<(const B&) const; };\n \n static_assert( output_iterator< array<int, 1>::iterator, int > );\n static_assert( output_iterator< array<B, 1>::iterator, B > );"}]}