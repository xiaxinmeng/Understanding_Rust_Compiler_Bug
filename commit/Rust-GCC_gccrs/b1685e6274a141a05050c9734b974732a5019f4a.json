{"sha": "b1685e6274a141a05050c9734b974732a5019f4a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE2ODVlNjI3NGExNDFhMDUwNTBjOTczNGI5NzQ3MzJhNTAxOWY0YQ==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2014-05-16T09:01:28Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2014-05-16T09:01:28Z"}, "message": "[AArch64 costs 10/18] Improve costs for sign/zero extend operations\n\ngcc/\n\n\t* config/aarch64/aarch64.c (aarch64_rtx_costs): Cost\n\tZERO_EXTEND and SIGN_EXTEND better.\n\n\nCo-Authored-By: Philipp Tomsich <philipp.tomsich@theobroma-systems.com>\n\nFrom-SVN: r210502", "tree": {"sha": "68b09a7214a34cd4e6939ea2d72daeb1bdc5c4d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68b09a7214a34cd4e6939ea2d72daeb1bdc5c4d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1685e6274a141a05050c9734b974732a5019f4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1685e6274a141a05050c9734b974732a5019f4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1685e6274a141a05050c9734b974732a5019f4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1685e6274a141a05050c9734b974732a5019f4a/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "268c3b4758fd7fc54f8cc8220f0a6193ed862a42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/268c3b4758fd7fc54f8cc8220f0a6193ed862a42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/268c3b4758fd7fc54f8cc8220f0a6193ed862a42"}], "stats": {"total": 59, "additions": 53, "deletions": 6}, "files": [{"sha": "38a66e730cdae246aa115ccc159987537cfc3372", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1685e6274a141a05050c9734b974732a5019f4a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1685e6274a141a05050c9734b974732a5019f4a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b1685e6274a141a05050c9734b974732a5019f4a", "patch": "@@ -1,3 +1,9 @@\n+2014-05-16  James Greenhalgh  <james.greenhalgh@arm.com>\n+\t    Philipp Tomsich  <philipp.tomsich@theobroma-systems.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_rtx_costs): Cost\n+\tZERO_EXTEND and SIGN_EXTEND better.\n+\n 2014-05-16  James Greenhalgh  <james.greenhalgh@arm.com>\n \t    Philipp Tomsich  <philipp.tomsich@theobroma-systems.com>\n "}, {"sha": "76ef7ce89bfde8c5c1875933b3792ec92e2fe4dc", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 47, "deletions": 6, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1685e6274a141a05050c9734b974732a5019f4a/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1685e6274a141a05050c9734b974732a5019f4a/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=b1685e6274a141a05050c9734b974732a5019f4a", "patch": "@@ -5281,21 +5281,62 @@ aarch64_rtx_costs (rtx x, int code, int outer ATTRIBUTE_UNUSED,\n       return false;\n \n     case ZERO_EXTEND:\n-      if ((GET_MODE (x) == DImode\n-\t   && GET_MODE (XEXP (x, 0)) == SImode)\n-\t  || GET_CODE (XEXP (x, 0)) == MEM)\n+\n+      op0 = XEXP (x, 0);\n+      /* If a value is written in SI mode, then zero extended to DI\n+\t mode, the operation will in general be free as a write to\n+\t a 'w' register implicitly zeroes the upper bits of an 'x'\n+\t register.  However, if this is\n+\n+\t   (set (reg) (zero_extend (reg)))\n+\n+\t we must cost the explicit register move.  */\n+      if (mode == DImode\n+\t  && GET_MODE (op0) == SImode\n+\t  && outer == SET)\n+\t{\n+\t  int op_cost = rtx_cost (XEXP (x, 0), ZERO_EXTEND, 0, speed);\n+\n+\t  if (!op_cost && speed)\n+\t    /* MOV.  */\n+\t    *cost += extra_cost->alu.extend;\n+\t  else\n+\t    /* Free, the cost is that of the SI mode operation.  */\n+\t    *cost = op_cost;\n+\n+\t  return true;\n+\t}\n+      else if (MEM_P (XEXP (x, 0)))\n \t{\n-\t  *cost += rtx_cost (XEXP (x, 0), ZERO_EXTEND, 0, speed);\n+\t  /* All loads can zero extend to any size for free.  */\n+\t  *cost = rtx_cost (XEXP (x, 0), ZERO_EXTEND, param, speed);\n \t  return true;\n \t}\n+\n+      /* UXTB/UXTH.  */\n+      if (speed)\n+\t*cost += extra_cost->alu.extend;\n+\n       return false;\n \n     case SIGN_EXTEND:\n-      if (GET_CODE (XEXP (x, 0)) == MEM)\n+      if (MEM_P (XEXP (x, 0)))\n \t{\n-\t  *cost += rtx_cost (XEXP (x, 0), SIGN_EXTEND, 0, speed);\n+\t  /* LDRSH.  */\n+\t  if (speed)\n+\t    {\n+\t      rtx address = XEXP (XEXP (x, 0), 0);\n+\t      *cost += extra_cost->ldst.load_sign_extend;\n+\n+\t      *cost +=\n+\t\tCOSTS_N_INSNS (aarch64_address_cost (address, mode,\n+\t\t\t\t\t\t     0, speed));\n+\t    }\n \t  return true;\n \t}\n+\n+      if (speed)\n+\t*cost += extra_cost->alu.extend;\n       return false;\n \n     case ROTATE:"}]}