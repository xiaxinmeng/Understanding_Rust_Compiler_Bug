{"sha": "03a1a86b5ee40d4e2402516cbcdf39d981e433b3", "node_id": "C_kwDOANBUbNoAKDAzYTFhODZiNWVlNDBkNGUyNDAyNTE2Y2JjZGYzOWQ5ODFlNDMzYjM", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-01-12T08:45:08Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-01-12T11:54:49Z"}, "message": "Fix -Wformat-diag for aarch64 target.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64.c (aarch64_parse_boolean_options): Use\n\t%qs where possible.\n\t(aarch64_parse_sve_width_string): Likewise.\n\t(aarch64_override_options_internal): Likewise.\n\t(aarch64_print_hint_for_extensions): Likewise.\n\t(aarch64_validate_sls_mitigation): Likewise.\n\t(aarch64_handle_attr_arch): Likewise.\n\t(aarch64_handle_attr_cpu): Likewise.\n\t(aarch64_handle_attr_tune): Likewise.\n\t(aarch64_handle_attr_isa_flags): Likewise.", "tree": {"sha": "7e073ed65d68415314f85873b0c138b5a74518af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e073ed65d68415314f85873b0c138b5a74518af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03a1a86b5ee40d4e2402516cbcdf39d981e433b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03a1a86b5ee40d4e2402516cbcdf39d981e433b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03a1a86b5ee40d4e2402516cbcdf39d981e433b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03a1a86b5ee40d4e2402516cbcdf39d981e433b3/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4ce10fb4d57d427cb8bed33b36b9cf56a1dd17c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4ce10fb4d57d427cb8bed33b36b9cf56a1dd17c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4ce10fb4d57d427cb8bed33b36b9cf56a1dd17c"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "1bca2a31a1b7d3dc02999e2c08b53c0028697a07", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a1a86b5ee40d4e2402516cbcdf39d981e433b3/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a1a86b5ee40d4e2402516cbcdf39d981e433b3/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=03a1a86b5ee40d4e2402516cbcdf39d981e433b3", "patch": "@@ -16337,7 +16337,7 @@ aarch64_parse_boolean_options (const char *option,\n   /* We ended with a comma, print something.  */\n   if (!(*specs))\n     {\n-      error (\"%s string ill-formed\\n\", option_name);\n+      error (\"%qs string ill-formed\", option_name);\n       return 0;\n     }\n \n@@ -16393,7 +16393,7 @@ aarch64_parse_sve_width_string (const char *tune_string,\n   int n = sscanf (tune_string, \"%d\", &width);\n   if (n == EOF)\n     {\n-      error (\"invalid format for sve_width\");\n+      error (\"invalid format for %<sve_width%>\");\n       return;\n     }\n   switch (width)\n@@ -16405,7 +16405,7 @@ aarch64_parse_sve_width_string (const char *tune_string,\n     case SVE_2048:\n       break;\n     default:\n-      error (\"invalid sve_width value: %d\", width);\n+      error (\"invalid %<sve_width%> value: %d\", width);\n     }\n   tune->sve_width = (enum aarch64_sve_vector_bits_enum) width;\n }\n@@ -16628,7 +16628,7 @@ aarch64_override_options_internal (struct gcc_options *opts)\n   if (opts->x_aarch64_stack_protector_guard_reg_str)\n     {\n       if (strlen (opts->x_aarch64_stack_protector_guard_reg_str) > 100)\n-\t  error (\"specify a system register with a small string length.\");\n+\t  error (\"specify a system register with a small string length\");\n     }\n \n   if (opts->x_aarch64_stack_protector_guard_offset_str)\n@@ -16832,7 +16832,7 @@ aarch64_print_hint_for_extensions (const std::string &str)\n     inform (input_location, \"valid arguments are: %s;\"\n \t\t\t     \" did you mean %qs?\", s, hint);\n   else\n-    inform (input_location, \"valid arguments are: %s;\", s);\n+    inform (input_location, \"valid arguments are: %s\", s);\n \n   XDELETEVEC (s);\n }\n@@ -16933,7 +16933,7 @@ aarch64_validate_sls_mitigation (const char *const_str)\n \ttemp |= SLS_RETBR;\n       else if (strcmp (str, \"none\") == 0 || strcmp (str, \"all\") == 0)\n \t{\n-\t  error (\"%<%s%> must be by itself for %<-mharden-sls=%>\", str);\n+\t  error (\"%qs must be by itself for %<-mharden-sls=%>\", str);\n \t  break;\n \t}\n       else\n@@ -17572,11 +17572,11 @@ aarch64_handle_attr_arch (const char *str)\n \terror (\"missing name in %<target(\\\"arch=\\\")%> pragma or attribute\");\n \tbreak;\n       case AARCH64_PARSE_INVALID_ARG:\n-\terror (\"invalid name (\\\"%s\\\") in %<target(\\\"arch=\\\")%> pragma or attribute\", str);\n+\terror (\"invalid name (%qs) in %<target(\\\"arch=\\\")%> pragma or attribute\", str);\n \taarch64_print_hint_for_arch (str);\n \tbreak;\n       case AARCH64_PARSE_INVALID_FEATURE:\n-\terror (\"invalid feature modifier %s of value (\\\"%s\\\") in \"\n+\terror (\"invalid feature modifier %s of value (%qs) in \"\n \t       \"%<target()%> pragma or attribute\", invalid_extension.c_str (), str);\n \taarch64_print_hint_for_extensions (invalid_extension);\n \tbreak;\n@@ -17614,11 +17614,11 @@ aarch64_handle_attr_cpu (const char *str)\n \terror (\"missing name in %<target(\\\"cpu=\\\")%> pragma or attribute\");\n \tbreak;\n       case AARCH64_PARSE_INVALID_ARG:\n-\terror (\"invalid name (\\\"%s\\\") in %<target(\\\"cpu=\\\")%> pragma or attribute\", str);\n+\terror (\"invalid name (%qs) in %<target(\\\"cpu=\\\")%> pragma or attribute\", str);\n \taarch64_print_hint_for_core (str);\n \tbreak;\n       case AARCH64_PARSE_INVALID_FEATURE:\n-\terror (\"invalid feature modifier %s of value (\\\"%s\\\") in \"\n+\terror (\"invalid feature modifier %s of value (%qs) in \"\n \t       \"%<target()%> pragma or attribute\", invalid_extension.c_str (), str);\n \taarch64_print_hint_for_extensions (invalid_extension);\n \tbreak;\n@@ -17645,7 +17645,7 @@ aarch64_handle_attr_cpu (const char *str)\n \t      \" attribute\");\n        break;\n      case AARCH64_PARSE_INVALID_ARG:\n-       error (\"invalid protection type (\\\"%s\\\") in %<target(\\\"branch-protection\"\n+       error (\"invalid protection type (%qs) in %<target(\\\"branch-protection\"\n \t      \"=\\\")%> pragma or attribute\", err_str);\n        break;\n      case AARCH64_PARSE_OK:\n@@ -17680,7 +17680,7 @@ aarch64_handle_attr_tune (const char *str)\n   switch (parse_res)\n     {\n       case AARCH64_PARSE_INVALID_ARG:\n-\terror (\"invalid name (\\\"%s\\\") in %<target(\\\"tune=\\\")%> pragma or attribute\", str);\n+\terror (\"invalid name (%qs) in %<target(\\\"tune=\\\")%> pragma or attribute\", str);\n \taarch64_print_hint_for_core (str);\n \tbreak;\n       default:\n@@ -17725,7 +17725,7 @@ aarch64_handle_attr_isa_flags (char *str)\n \tbreak;\n \n       case AARCH64_PARSE_INVALID_FEATURE:\n-\terror (\"invalid feature modifier %s of value (\\\"%s\\\") in \"\n+\terror (\"invalid feature modifier %s of value (%qs) in \"\n \t       \"%<target()%> pragma or attribute\", invalid_extension.c_str (), str);\n \tbreak;\n "}]}