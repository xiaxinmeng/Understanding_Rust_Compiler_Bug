{"sha": "39be2171e0fa8da0d5bbfd3aecd11f5709f8f309", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzliZTIxNzFlMGZhOGRhMGQ1YmJmZDNhZWNkMTFmNTcwOWY4ZjMwOQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-04-17T19:10:27Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-04-17T19:10:27Z"}, "message": "compiler: Define immutability for numeric, constant, type info, type conversion, and addressof expressions.\n\nFrom-SVN: r209493", "tree": {"sha": "c429a9855c58a915da40e7a6d799948153afb0d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c429a9855c58a915da40e7a6d799948153afb0d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39be2171e0fa8da0d5bbfd3aecd11f5709f8f309", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39be2171e0fa8da0d5bbfd3aecd11f5709f8f309", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39be2171e0fa8da0d5bbfd3aecd11f5709f8f309", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39be2171e0fa8da0d5bbfd3aecd11f5709f8f309/comments", "author": null, "committer": null, "parents": [{"sha": "5e750dc69f9e2580bed0d45bd0383622cc272b39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e750dc69f9e2580bed0d45bd0383622cc272b39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e750dc69f9e2580bed0d45bd0383622cc272b39"}], "stats": {"total": 55, "additions": 54, "deletions": 1}, "files": [{"sha": "199461061d9dc32b3c47c82e80ca7783fae0fb04", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 54, "deletions": 1, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39be2171e0fa8da0d5bbfd3aecd11f5709f8f309/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39be2171e0fa8da0d5bbfd3aecd11f5709f8f309/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=39be2171e0fa8da0d5bbfd3aecd11f5709f8f309", "patch": "@@ -554,6 +554,10 @@ class Error_expression : public Expression\n   do_is_constant() const\n   { return true; }\n \n+  bool\n+  do_is_immutable() const\n+  { return true; }\n+\n   bool\n   do_numeric_constant_value(Numeric_constant* nc) const\n   {\n@@ -1422,6 +1426,10 @@ class Boolean_expression : public Expression\n   do_is_constant() const\n   { return true; }\n \n+  bool\n+  do_is_immutable() const\n+  { return true; }\n+\n   Type*\n   do_type();\n \n@@ -1789,6 +1797,10 @@ class Integer_expression : public Expression\n   do_is_constant() const\n   { return true; }\n \n+  bool\n+  do_is_immutable() const\n+  { return true; }\n+\n   bool\n   do_numeric_constant_value(Numeric_constant* nc) const;\n \n@@ -2108,6 +2120,10 @@ class Float_expression : public Expression\n   do_is_constant() const\n   { return true; }\n \n+  bool\n+  do_is_immutable() const\n+  { return true; }\n+\n   bool\n   do_numeric_constant_value(Numeric_constant* nc) const\n   {\n@@ -2291,6 +2307,10 @@ class Complex_expression : public Expression\n   do_is_constant() const\n   { return true; }\n \n+  bool\n+  do_is_immutable() const\n+  { return true; }\n+\n   bool\n   do_numeric_constant_value(Numeric_constant* nc) const\n   {\n@@ -2505,6 +2525,10 @@ class Const_expression : public Expression\n   do_is_constant() const\n   { return true; }\n \n+  bool\n+  do_is_immutable() const\n+  { return true; }\n+\n   bool\n   do_numeric_constant_value(Numeric_constant* nc) const;\n \n@@ -2993,6 +3017,9 @@ class Type_conversion_expression : public Expression\n   bool\n   do_is_constant() const;\n \n+  bool\n+  do_is_immutable() const;\n+\n   bool\n   do_numeric_constant_value(Numeric_constant*) const;\n \n@@ -3175,6 +3202,27 @@ Type_conversion_expression::do_is_constant() const\n   return true;\n }\n \n+// Return whether a type conversion is immutable.\n+\n+bool\n+Type_conversion_expression::do_is_immutable() const\n+{\n+  Type* type = this->type_;\n+  Type* expr_type = this->expr_->type();\n+\n+  if (type->interface_type() != NULL\n+      || expr_type->interface_type() != NULL)\n+    return false;\n+\n+  if (!this->expr_->is_immutable())\n+    return false;\n+\n+  if (Type::are_identical(type, expr_type, false, NULL))\n+    return true;\n+\n+  return type->is_basic_type() && expr_type->is_basic_type();\n+}\n+\n // Return the constant numeric value if there is one.\n \n bool\n@@ -3599,7 +3647,8 @@ class Unary_expression : public Expression\n \n   bool\n   do_is_immutable() const\n-  { return this->expr_->is_immutable(); }\n+  { return this->expr_->is_immutable()\n+      || (this->op_ == OPERATOR_AND && this->expr_->is_variable()); }\n \n   bool\n   do_numeric_constant_value(Numeric_constant*) const;\n@@ -14076,6 +14125,10 @@ class Type_info_expression : public Expression\n   { }\n \n  protected:\n+  bool\n+  do_is_immutable() const\n+  { return true; }\n+\n   Type*\n   do_type();\n "}]}