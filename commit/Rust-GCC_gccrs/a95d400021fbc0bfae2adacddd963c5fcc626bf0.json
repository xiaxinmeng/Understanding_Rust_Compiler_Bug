{"sha": "a95d400021fbc0bfae2adacddd963c5fcc626bf0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTk1ZDQwMDAyMWZiYzBiZmFlMmFkYWNkZGQ5NjNjNWZjYzYyNmJmMA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-04-06T17:39:27Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-04-06T17:39:27Z"}, "message": "sse.md (AVXMODEDCVTDQ2PS): Remove.\n\n\t* config/i386/sse.md (AVXMODEDCVTDQ2PS): Remove.\n\t(AVXMODEDCVTPS2DQ): Ditto.\n\t(VEC_FLOAT_MODE): Ditto.\n\t(<sse>_andnot<mode>3): Merge with avx_andnot<mode>3.  Use VF mode\n\titerator.  Handle TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL target flag.\n\t(<any_logic:code><mode>3): Use VF mode iterator.\n\t(*<any_logic:code><mode>3): Merge with *avx_<any_logic:code><mode>3.\n\tUse VF mode iterator.\n\t(copysign<mode>3): Use VF mode iterator.\n\t(*andnot<MODEF:mode>3): Merge with *avx_andnot<MODEF:mode>3.  Handle\n\tTARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL target flag.\n\t(*<any_logic:code><MODEF:mode>3): Merge with\n\t*avx_<any_logic:code><MODEF:mode>3.\n\t(sse_cvtsi2ss): Merge with *avx_cvtsi2ss.\n\t(sse_cvtsi2ssq): Merge with *avx_cvtsi2ssq.\n\t(avx_cvtdq2ps256): Split from avx_cvtdq2ps<avxmodesuffix>.\n\t(avx_cvtdq2ps<avxmodesuffix>): Remove.\n\t(sse2_cvtdq2ps): Use %v modifier.\n\t(avx_cvtps2dq256): Split from avx_cvtps2dq<avxmodesuffix>.\n\t(avx_cvtps2dq<avxmodesuffix>): Remove.\n\t(sse2_cvtps2dq): Use %v modifier.\n\t(avx_cvttps2dq256): Split from avx_cvttps2dq<avxmodesuffix>.\n\t(avx_cvttps2dq<avxmodesuffix>): Remove.\n\t(sse2_cvttps2dq): Use %v modifier.\n\t(sse2_cvtsi2sd): Merge with *avx_cvtsi2sd.\n\t(sse2_cvtsi2sdq): Merge with *avx_cvtsi2sdq.\n\t(sse2_cvtsd2siq): Fix insn template.\n\t(sse2_cvtsd2siq_2): Ditto.\n\t(sse2_cvttsd2siq): Ditto.\n\t(sse2_cvtsd2ss): Merge with *avx_cvtsd2ss.\n\t(sse2_cvtss2sd): Merge with *avx_cvtss2sd.\n\nFrom-SVN: r172058", "tree": {"sha": "c86a2fbbe9ef67a52721ee54deeff32dbf3951ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c86a2fbbe9ef67a52721ee54deeff32dbf3951ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a95d400021fbc0bfae2adacddd963c5fcc626bf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a95d400021fbc0bfae2adacddd963c5fcc626bf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a95d400021fbc0bfae2adacddd963c5fcc626bf0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a95d400021fbc0bfae2adacddd963c5fcc626bf0/comments", "author": null, "committer": null, "parents": [{"sha": "4e927875b0d31633b35aca17252ffdbc56706ef0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e927875b0d31633b35aca17252ffdbc56706ef0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e927875b0d31633b35aca17252ffdbc56706ef0"}], "stats": {"total": 665, "additions": 334, "deletions": 331}, "files": [{"sha": "e3b8aa8aa66c925db66fe37685d9a8cca2270a93", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 5, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a95d400021fbc0bfae2adacddd963c5fcc626bf0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a95d400021fbc0bfae2adacddd963c5fcc626bf0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a95d400021fbc0bfae2adacddd963c5fcc626bf0", "patch": "@@ -1,3 +1,37 @@\n+2011-04-06  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sse.md (AVXMODEDCVTDQ2PS): Remove.\n+\t(AVXMODEDCVTPS2DQ): Ditto.\n+\t(VEC_FLOAT_MODE): Ditto.\n+\t(<sse>_andnot<mode>3): Merge with avx_andnot<mode>3.  Use VF mode\n+\titerator.  Handle TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL target flag.\n+\t(<any_logic:code><mode>3): Use VF mode iterator.\n+\t(*<any_logic:code><mode>3): Merge with *avx_<any_logic:code><mode>3.\n+\tUse VF mode iterator.\n+\t(copysign<mode>3): Use VF mode iterator.\n+\t(*andnot<MODEF:mode>3): Merge with *avx_andnot<MODEF:mode>3.  Handle\n+\tTARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL target flag.\n+\t(*<any_logic:code><MODEF:mode>3): Merge with\n+\t*avx_<any_logic:code><MODEF:mode>3.\n+\t(sse_cvtsi2ss): Merge with *avx_cvtsi2ss.\n+\t(sse_cvtsi2ssq): Merge with *avx_cvtsi2ssq.\n+\t(avx_cvtdq2ps256): Split from avx_cvtdq2ps<avxmodesuffix>.\n+\t(avx_cvtdq2ps<avxmodesuffix>): Remove.\n+\t(sse2_cvtdq2ps): Use %v modifier.\n+\t(avx_cvtps2dq256): Split from avx_cvtps2dq<avxmodesuffix>.\n+\t(avx_cvtps2dq<avxmodesuffix>): Remove.\n+\t(sse2_cvtps2dq): Use %v modifier.\n+\t(avx_cvttps2dq256): Split from avx_cvttps2dq<avxmodesuffix>.\n+\t(avx_cvttps2dq<avxmodesuffix>): Remove.\n+\t(sse2_cvttps2dq): Use %v modifier.\n+\t(sse2_cvtsi2sd): Merge with *avx_cvtsi2sd.\n+\t(sse2_cvtsi2sdq): Merge with *avx_cvtsi2sdq.\n+\t(sse2_cvtsd2siq): Fix insn template.\n+\t(sse2_cvtsd2siq_2): Ditto.\n+\t(sse2_cvttsd2siq): Ditto.\n+\t(sse2_cvtsd2ss): Merge with *avx_cvtsd2ss.\n+\t(sse2_cvtss2sd): Merge with *avx_cvtss2sd.\n+\n 2011-04-06  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcov-io.c: Use GCC Runtime Library Exception.\n@@ -48,23 +82,21 @@\n \tdeclare.\n \t* config/darwin.h (TARGET_OBJC_CONSTRUCT_STRING_OBJECT,\n \tTARGET_STRING_OBJECT_REF_TYPE_P,\n-\tTARGET_CHECK_STRING_OBJECT_FORMAT_ARG, TARGET_HAS_TARGETCM):\n-\tRemove.\n+\tTARGET_CHECK_STRING_OBJECT_FORMAT_ARG, TARGET_HAS_TARGETCM): Remove.\n \t* config/t-darwin (darwin-c.o): Update dependencies.\n \t* system.h (TARGET_HAS_TARGETCM): Poison.\n \t* Makefile.in (TARGET_H): Update.\n \t(TARGET_DEF, C_TARGET_DEF, C_TARGET_H, C_TARGET_DEF_H): Define.\n \t(c-family/c-format.o, c-family/c-opts.o): Update dependencies.\n \t(default-c.o): New target.\n \t(s-target-hooks-def-h): Pass \"Target Hook\" string to genhooks.\n-\t(c-family/c-target-hooks-def.h, s-c-target-hooks-def-h): New\n-\ttargets.\n+\t(c-family/c-target-hooks-def.h, s-c-target-hooks-def-h): New targets.\n \t(s-tm-texi): Pass -d option to genhooks.  Also test timestamp on\n \tc-target.def.\n \t(build/genhooks.o): Update dependencies.\n \n 2011-04-06  Richard Guenther  <rguenther@suse.de>\n- \n+\n \t* ipa-inline.c (enum inlining_mode): Remove.\n \t(cgraph_flatten): Use some other token.\n \t(cgraph_edge_early_inlinable_p): New function, split out from ..."}, {"sha": "7d386bc5c5df4414d16dac969d3227696a179058", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 297, "deletions": 326, "changes": 623, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a95d400021fbc0bfae2adacddd963c5fcc626bf0/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a95d400021fbc0bfae2adacddd963c5fcc626bf0/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=a95d400021fbc0bfae2adacddd963c5fcc626bf0", "patch": "@@ -84,8 +84,6 @@\n (define_mode_iterator AVXMODEF4P [V4SF V4DF])\n (define_mode_iterator AVXMODEFDP [V2DF V4DF])\n (define_mode_iterator AVXMODEFSP [V4SF V8SF])\n-(define_mode_iterator AVXMODEDCVTDQ2PS [V4SF V8SF])\n-(define_mode_iterator AVXMODEDCVTPS2DQ [V4SI V8SI])\n \n (define_mode_iterator FMAMODE [SF DF V4SF V2DF V8SF V4DF])\n \n@@ -112,11 +110,6 @@\n    (V4SF \"TARGET_SSE\")\n    (V4DF \"TARGET_AVX\") (V8SF \"TARGET_AVX\")])\n \n-;; Modes handled by vector float patterns.\n-(define_mode_iterator VEC_FLOAT_MODE\n-  [(V2DF \"TARGET_SSE2\") (V4SF \"TARGET_SSE\")\n-   (V4DF \"TARGET_AVX\") (V8SF \"TARGET_AVX\")])\n-\n ;; Modes handled by vector extract patterns.\n (define_mode_iterator VEC_EXTRACT_MODE\n   [(V2DI \"TARGET_SSE\") (V4SI \"TARGET_SSE\")\n@@ -1384,88 +1377,89 @@\n ;;\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \n-(define_insn \"avx_andnot<mode>3\"\n-  [(set (match_operand:AVXMODEF2P 0 \"register_operand\" \"=x\")\n-\t(and:AVXMODEF2P\n-\t  (not:AVXMODEF2P\n-\t    (match_operand:AVXMODEF2P 1 \"register_operand\" \"x\"))\n-\t  (match_operand:AVXMODEF2P 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"AVX_VEC_FLOAT_MODE_P (<MODE>mode)\"\n-  \"vandn<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"<avxvecmode>\")])\n-\n (define_insn \"<sse>_andnot<mode>3\"\n-  [(set (match_operand:SSEMODEF2P 0 \"register_operand\" \"=x\")\n-\t(and:SSEMODEF2P\n-\t  (not:SSEMODEF2P\n-\t    (match_operand:SSEMODEF2P 1 \"register_operand\" \"0\"))\n-\t  (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"SSE_VEC_FLOAT_MODE_P (<MODE>mode)\"\n-  \"andn<ssemodesuffix>\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"mode\" \"<MODE>\")])\n+  [(set (match_operand:VF 0 \"register_operand\" \"=x,x\")\n+\t(and:VF\n+\t  (not:VF\n+\t    (match_operand:VF 1 \"register_operand\" \"0,x\"))\n+\t  (match_operand:VF 2 \"nonimmediate_operand\" \"xm,xm\")))]\n+  \"\"\n+{\n+  static char buf[32];\n+  const char *insn;\n+  const char *suffix\n+    = TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL ? \"ps\" : \"<ssemodesuffix>\";\n \n-(define_expand \"<code><mode>3\"\n-  [(set (match_operand:AVX256MODEF2P 0 \"register_operand\" \"\")\n-\t(any_logic:AVX256MODEF2P\n-\t  (match_operand:AVX256MODEF2P 1 \"nonimmediate_operand\" \"\")\n-\t  (match_operand:AVX256MODEF2P 2 \"nonimmediate_operand\" \"\")))]\n-  \"AVX256_VEC_FLOAT_MODE_P (<MODE>mode)\"\n-  \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n+  switch (which_alternative)\n+    {\n+    case 0:\n+      insn = \"andn%s\\t{%%2, %%0|%%0, %%2}\";\n+      break;\n+    case 1:\n+      insn = \"vandn%s\\t{%%2, %%1, %%0|%%0, %%1, %%2}\";\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n \n-(define_insn \"*avx_<code><mode>3\"\n-  [(set (match_operand:AVXMODEF2P 0 \"register_operand\" \"=x\")\n-\t(any_logic:AVXMODEF2P\n-\t  (match_operand:AVXMODEF2P 1 \"nonimmediate_operand\" \"%x\")\n-\t  (match_operand:AVXMODEF2P 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"AVX_VEC_FLOAT_MODE_P (<MODE>mode)\n-   && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n-{\n-  if (TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL)\n-    return \"v<logic>ps\\t{%2, %1, %0|%0, %1, %2}\";\n-  else\n-    return \"v<logic><ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\";\n+  snprintf (buf, sizeof (buf), insn, suffix);\n+  return buf;\n }\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"<avxvecmode>\")])\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"mode\" \"<MODE>\")])\n \n (define_expand \"<code><mode>3\"\n-  [(set (match_operand:SSEMODEF2P 0 \"register_operand\" \"\")\n-\t(any_logic:SSEMODEF2P\n-\t  (match_operand:SSEMODEF2P 1 \"nonimmediate_operand\" \"\")\n-\t  (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"\")))]\n-  \"SSE_VEC_FLOAT_MODE_P (<MODE>mode)\"\n+  [(set (match_operand:VF 0 \"register_operand\" \"\")\n+\t(any_logic:VF\n+\t  (match_operand:VF 1 \"nonimmediate_operand\" \"\")\n+\t  (match_operand:VF 2 \"nonimmediate_operand\" \"\")))]\n+  \"\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n (define_insn \"*<code><mode>3\"\n-  [(set (match_operand:SSEMODEF2P 0 \"register_operand\" \"=x\")\n-\t(any_logic:SSEMODEF2P\n-\t  (match_operand:SSEMODEF2P 1 \"nonimmediate_operand\" \"%0\")\n-\t  (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"SSE_VEC_FLOAT_MODE_P (<MODE>mode)\n-   && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n+  [(set (match_operand:VF 0 \"register_operand\" \"=x,x\")\n+\t(any_logic:VF\n+\t  (match_operand:VF 1 \"nonimmediate_operand\" \"%0,x\")\n+\t  (match_operand:VF 2 \"nonimmediate_operand\" \"xm,xm\")))]\n+  \"ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n {\n-  if (TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL)\n-    return \"<logic>ps\\t{%2, %0|%0, %2}\";\n-  else\n-    return \"<logic><ssemodesuffix>\\t{%2, %0|%0, %2}\";\n+  static char buf[32];\n+  const char *insn;\n+  const char *suffix\n+    = TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL ? \"ps\" : \"<ssemodesuffix>\";\n+\n+  switch (which_alternative)\n+    {\n+    case 0:\n+      insn = \"<logic>%s\\t{%%2, %%0|%%0, %%2}\";\n+      break;\n+    case 1:\n+      insn = \"v<logic>%s\\t{%%2, %%1, %%0|%%0, %%1, %%2}\";\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  snprintf (buf, sizeof (buf), insn, suffix);\n+  return buf;\n }\n-  [(set_attr \"type\" \"sselog\")\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_expand \"copysign<mode>3\"\n   [(set (match_dup 4)\n-\t(and:VEC_FLOAT_MODE\n-\t  (not:VEC_FLOAT_MODE (match_dup 3))\n-\t  (match_operand:VEC_FLOAT_MODE 1 \"nonimmediate_operand\" \"\")))\n+\t(and:VF\n+\t  (not:VF (match_dup 3))\n+\t  (match_operand:VF 1 \"nonimmediate_operand\" \"\")))\n    (set (match_dup 5)\n-\t(and:VEC_FLOAT_MODE (match_dup 3)\n-\t\t\t    (match_operand:VEC_FLOAT_MODE 2 \"nonimmediate_operand\" \"\")))\n-   (set (match_operand:VEC_FLOAT_MODE 0 \"register_operand\" \"\")\n-\t(ior:VEC_FLOAT_MODE (match_dup 4) (match_dup 5)))]\n+\t(and:VF (match_dup 3)\n+\t\t(match_operand:VF 2 \"nonimmediate_operand\" \"\")))\n+   (set (match_operand:VF 0 \"register_operand\" \"\")\n+\t(ior:VF (match_dup 4) (match_dup 5)))]\n   \"\"\n {\n   operands[3] = ix86_build_signbit_mask (<MODE>mode, 1, 0);\n@@ -1479,58 +1473,69 @@\n ;; allocation lossage.  These patterns do not allow memory operands\n ;; because the native instructions read the full 128-bits.\n \n-(define_insn \"*avx_andnot<mode>3\"\n-  [(set (match_operand:MODEF 0 \"register_operand\" \"=x\")\n-\t(and:MODEF\n-\t  (not:MODEF\n-\t    (match_operand:MODEF 1 \"register_operand\" \"x\"))\n-\t    (match_operand:MODEF 2 \"register_operand\" \"x\")))]\n-  \"AVX_FLOAT_MODE_P (<MODE>mode)\"\n-  \"vandnp<ssemodefsuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"<ssevecmode>\")])\n-\n (define_insn \"*andnot<mode>3\"\n-  [(set (match_operand:MODEF 0 \"register_operand\" \"=x\")\n+  [(set (match_operand:MODEF 0 \"register_operand\" \"=x,x\")\n \t(and:MODEF\n \t  (not:MODEF\n-\t    (match_operand:MODEF 1 \"register_operand\" \"0\"))\n-\t    (match_operand:MODEF 2 \"register_operand\" \"x\")))]\n+\t    (match_operand:MODEF 1 \"register_operand\" \"0,x\"))\n+\t    (match_operand:MODEF 2 \"register_operand\" \"x,x\")))]\n   \"SSE_FLOAT_MODE_P (<MODE>mode)\"\n-  \"andnp<ssemodefsuffix>\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"mode\" \"<ssevecmode>\")])\n-\n-(define_insn \"*avx_<code><mode>3\"\n-  [(set (match_operand:MODEF 0 \"register_operand\" \"=x\")\n-\t(any_logic:MODEF\n-\t  (match_operand:MODEF 1 \"register_operand\" \"x\")\n-\t  (match_operand:MODEF 2 \"register_operand\" \"x\")))]\n-  \"AVX_FLOAT_MODE_P (<MODE>mode)\"\n {\n-  if (TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL)\n-    return \"v<logic>ps\\t{%2, %1, %0|%0, %1, %2}\";\n-  else\n-    return \"v<logic>p<ssemodefsuffix>\\t{%2, %1, %0|%0, %1, %2}\";\n+  static char buf[32];\n+  const char *insn;\n+  const char *suffix\n+    = TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL ? \"s\" : \"<ssemodefsuffix>\";\n+\n+  switch (which_alternative)\n+    {\n+    case 0:\n+      insn = \"andnp%s\\t{%%2, %%0|%%0, %%2}\";\n+      break;\n+    case 1:\n+      insn = \"vandnp%s\\t{%%2, %%1, %%0|%%0, %%1, %%2}\";\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  snprintf (buf, sizeof (buf), insn, suffix);\n+  return buf;\n }\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix\" \"vex\")\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"<ssevecmode>\")])\n \n (define_insn \"*<code><mode>3\"\n-  [(set (match_operand:MODEF 0 \"register_operand\" \"=x\")\n+  [(set (match_operand:MODEF 0 \"register_operand\" \"=x,x\")\n \t(any_logic:MODEF\n-\t  (match_operand:MODEF 1 \"register_operand\" \"0\")\n-\t  (match_operand:MODEF 2 \"register_operand\" \"x\")))]\n+\t  (match_operand:MODEF 1 \"register_operand\" \"%0,x\")\n+\t  (match_operand:MODEF 2 \"register_operand\" \"x,x\")))]\n   \"SSE_FLOAT_MODE_P (<MODE>mode)\"\n {\n-  if (TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL)\n-    return \"<logic>ps\\t{%2, %0|%0, %2}\";\n-  else\n-    return \"<logic>p<ssemodefsuffix>\\t{%2, %0|%0, %2}\";\n+  static char buf[32];\n+  const char *insn;\n+  const char *suffix\n+    = TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL ? \"s\" : \"<ssemodefsuffix>\";\n+\n+  switch (which_alternative)\n+    {\n+    case 0:\n+      insn = \"<logic>p%s\\t{%%2, %%0|%%0, %%2}\";\n+      break;\n+    case 1:\n+      insn = \"v<logic>p%s\\t{%%2, %%1, %%0|%%0, %%1, %%2}\";\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  snprintf (buf, sizeof (buf), insn, suffix);\n+  return buf;\n }\n-  [(set_attr \"type\" \"sselog\")\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"<ssevecmode>\")])\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n@@ -1919,62 +1924,46 @@\n    (set_attr \"prefix_rep\" \"0\")\n    (set_attr \"mode\" \"SF\")])\n \n-(define_insn \"*avx_cvtsi2ss\"\n-  [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n-\t(vec_merge:V4SF\n-\t  (vec_duplicate:V4SF\n-\t    (float:SF (match_operand:SI 2 \"nonimmediate_operand\" \"rm\")))\n-\t  (match_operand:V4SF 1 \"register_operand\" \"x\")\n-\t  (const_int 1)))]\n-  \"TARGET_AVX\"\n-  \"vcvtsi2ss\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sseicvt\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"SF\")])\n-\n (define_insn \"sse_cvtsi2ss\"\n-  [(set (match_operand:V4SF 0 \"register_operand\" \"=x,x\")\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=x,x,x\")\n \t(vec_merge:V4SF\n \t  (vec_duplicate:V4SF\n-\t    (float:SF (match_operand:SI 2 \"nonimmediate_operand\" \"r,m\")))\n-\t  (match_operand:V4SF 1 \"register_operand\" \"0,0\")\n+\t    (float:SF (match_operand:SI 2 \"nonimmediate_operand\" \"r,m,rm\")))\n+\t  (match_operand:V4SF 1 \"register_operand\" \"0,0,x\")\n \t  (const_int 1)))]\n   \"TARGET_SSE\"\n-  \"cvtsi2ss\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sseicvt\")\n-   (set_attr \"athlon_decode\" \"vector,double\")\n-   (set_attr \"amdfam10_decode\" \"vector,double\")\n-   (set_attr \"bdver1_decode\" \"double,direct\")\n-   (set_attr \"mode\" \"SF\")])\n-\n-(define_insn \"*avx_cvtsi2ssq\"\n-  [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n-\t(vec_merge:V4SF\n-\t  (vec_duplicate:V4SF\n-\t    (float:SF (match_operand:DI 2 \"nonimmediate_operand\" \"rm\")))\n-\t  (match_operand:V4SF 1 \"register_operand\" \"x\")\n-\t  (const_int 1)))]\n-  \"TARGET_AVX && TARGET_64BIT\"\n-  \"vcvtsi2ssq\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sseicvt\")\n-   (set_attr \"length_vex\" \"4\")\n-   (set_attr \"prefix\" \"vex\")\n+  \"@\n+   cvtsi2ss\\t{%2, %0|%0, %2}\n+   cvtsi2ss\\t{%2, %0|%0, %2}\n+   vcvtsi2ss\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n+   (set_attr \"type\" \"sseicvt\")\n+   (set_attr \"athlon_decode\" \"vector,double,*\")\n+   (set_attr \"amdfam10_decode\" \"vector,double,*\")\n+   (set_attr \"bdver1_decode\" \"double,direct,*\")\n+   (set_attr \"prefix\" \"orig,orig,vex\")\n    (set_attr \"mode\" \"SF\")])\n \n (define_insn \"sse_cvtsi2ssq\"\n-  [(set (match_operand:V4SF 0 \"register_operand\" \"=x,x\")\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=x,x,x\")\n \t(vec_merge:V4SF\n \t  (vec_duplicate:V4SF\n-\t    (float:SF (match_operand:DI 2 \"nonimmediate_operand\" \"r,rm\")))\n-\t  (match_operand:V4SF 1 \"register_operand\" \"0,0\")\n+\t    (float:SF (match_operand:DI 2 \"nonimmediate_operand\" \"r,m,rm\")))\n+\t  (match_operand:V4SF 1 \"register_operand\" \"0,0,x\")\n \t  (const_int 1)))]\n   \"TARGET_SSE && TARGET_64BIT\"\n-  \"cvtsi2ssq\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sseicvt\")\n-   (set_attr \"prefix_rex\" \"1\")\n-   (set_attr \"athlon_decode\" \"vector,double\")\n-   (set_attr \"amdfam10_decode\" \"vector,double\")\n-   (set_attr \"bdver1_decode\" \"double,direct\")\n+  \"@\n+   cvtsi2ssq\\t{%2, %0|%0, %2}\n+   cvtsi2ssq\\t{%2, %0|%0, %2}\n+   vcvtsi2ssq\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n+   (set_attr \"type\" \"sseicvt\")\n+   (set_attr \"athlon_decode\" \"vector,double,*\")\n+   (set_attr \"amdfam10_decode\" \"vector,double,*\")\n+   (set_attr \"bdver1_decode\" \"double,direct,*\")\n+   (set_attr \"length_vex\" \"*,*,4\")\n+   (set_attr \"prefix_rex\" \"1,1,*\")\n+   (set_attr \"prefix\" \"orig,orig,vex\")\n    (set_attr \"mode\" \"SF\")])\n \n (define_insn \"sse_cvtss2si\"\n@@ -2069,22 +2058,22 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"avx_cvtdq2ps<avxmodesuffix>\"\n-  [(set (match_operand:AVXMODEDCVTDQ2PS 0 \"register_operand\" \"=x\")\n-\t(float:AVXMODEDCVTDQ2PS\n-\t  (match_operand:<avxcvtvecmode> 1 \"nonimmediate_operand\" \"xm\")))]\n+(define_insn \"avx_cvtdq2ps256\"\n+  [(set (match_operand:V8SF 0 \"register_operand\" \"=x\")\n+\t(float:V8SF (match_operand:V8SI 1 \"nonimmediate_operand\" \"xm\")))]\n   \"TARGET_AVX\"\n   \"vcvtdq2ps\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"<avxvecmode>\")])\n+   (set_attr \"mode\" \"V8SF\")])\n \n (define_insn \"sse2_cvtdq2ps\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n \t(float:V4SF (match_operand:V4SI 1 \"nonimmediate_operand\" \"xm\")))]\n   \"TARGET_SSE2\"\n-  \"cvtdq2ps\\t{%1, %0|%0, %1}\"\n+  \"%vcvtdq2ps\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"V4SF\")])\n \n (define_expand \"sse2_cvtudq2ps\"\n@@ -2113,45 +2102,58 @@\n     operands[i] = gen_reg_rtx (V4SFmode);\n })\n \n-(define_insn \"avx_cvtps2dq<avxmodesuffix>\"\n-  [(set (match_operand:AVXMODEDCVTPS2DQ 0 \"register_operand\" \"=x\")\n-\t(unspec:AVXMODEDCVTPS2DQ\n-\t  [(match_operand:<avxcvtvecmode> 1 \"nonimmediate_operand\" \"xm\")]\n-\t  UNSPEC_FIX_NOTRUNC))]\n+(define_insn \"avx_cvtps2dq256\"\n+  [(set (match_operand:V8SI 0 \"register_operand\" \"=x\")\n+\t(unspec:V8SI [(match_operand:V8SF 1 \"nonimmediate_operand\" \"xm\")]\n+\t\t     UNSPEC_FIX_NOTRUNC))]\n   \"TARGET_AVX\"\n   \"vcvtps2dq\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"<avxvecmode>\")])\n+   (set_attr \"mode\" \"OI\")])\n \n (define_insn \"sse2_cvtps2dq\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n \t(unspec:V4SI [(match_operand:V4SF 1 \"nonimmediate_operand\" \"xm\")]\n \t\t     UNSPEC_FIX_NOTRUNC))]\n   \"TARGET_SSE2\"\n-  \"cvtps2dq\\t{%1, %0|%0, %1}\"\n+  \"%vcvtps2dq\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n-   (set_attr \"prefix_data16\" \"1\")\n+   (set (attr \"prefix_data16\")\n+     (if_then_else\n+       (ne (symbol_ref \"TARGET_AVX\") (const_int 0))\n+     (const_string \"*\")\n+     (const_string \"1\")))\n+   (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"avx_cvttps2dq<avxmodesuffix>\"\n-  [(set (match_operand:AVXMODEDCVTPS2DQ 0 \"register_operand\" \"=x\")\n-\t(fix:AVXMODEDCVTPS2DQ\n-\t  (match_operand:<avxcvtvecmode> 1 \"nonimmediate_operand\" \"xm\")))]\n+(define_insn \"avx_cvttps2dq256\"\n+  [(set (match_operand:V8SI 0 \"register_operand\" \"=x\")\n+\t(fix:V8SI (match_operand:V8SF 1 \"nonimmediate_operand\" \"xm\")))]\n   \"TARGET_AVX\"\n   \"vcvttps2dq\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"<avxvecmode>\")])\n+   (set_attr \"mode\" \"OI\")])\n \n (define_insn \"sse2_cvttps2dq\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n \t(fix:V4SI (match_operand:V4SF 1 \"nonimmediate_operand\" \"xm\")))]\n   \"TARGET_SSE2\"\n-  \"cvttps2dq\\t{%1, %0|%0, %1}\"\n+  \"%vcvttps2dq\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n-   (set_attr \"prefix_rep\" \"1\")\n+   (set (attr \"prefix_rep\")\n+     (if_then_else\n+       (ne (symbol_ref \"TARGET_AVX\") (const_int 0))\n+     (const_string \"*\")\n+     (const_string \"1\")))\n+   (set (attr \"prefix_data16\")\n+     (if_then_else\n+       (ne (symbol_ref \"TARGET_AVX\") (const_int 0))\n+     (const_string \"*\")\n+     (const_string \"0\")))\n    (set_attr \"prefix_data16\" \"0\")\n+   (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n@@ -2178,9 +2180,9 @@\n   \"cvtpd2pi\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"unit\" \"mmx\")\n+   (set_attr \"bdver1_decode\" \"double\")\n    (set_attr \"prefix_data16\" \"1\")\n-   (set_attr \"mode\" \"DI\")\n-   (set_attr \"bdver1_decode\" \"double\")])\n+   (set_attr \"mode\" \"DI\")])\n \n (define_insn \"sse2_cvttpd2pi\"\n   [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n@@ -2189,67 +2191,51 @@\n   \"cvttpd2pi\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"unit\" \"mmx\")\n+   (set_attr \"bdver1_decode\" \"double\")\n    (set_attr \"prefix_data16\" \"1\")\n-   (set_attr \"mode\" \"TI\")\n-   (set_attr \"bdver1_decode\" \"double\")])\n-\n-(define_insn \"*avx_cvtsi2sd\"\n-  [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n-\t(vec_merge:V2DF\n-\t  (vec_duplicate:V2DF\n-\t    (float:DF (match_operand:SI 2 \"nonimmediate_operand\" \"rm\")))\n-\t  (match_operand:V2DF 1 \"register_operand\" \"x\")\n-\t  (const_int 1)))]\n-  \"TARGET_AVX\"\n-  \"vcvtsi2sd\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sseicvt\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"DF\")])\n+   (set_attr \"mode\" \"TI\")])\n \n (define_insn \"sse2_cvtsi2sd\"\n-  [(set (match_operand:V2DF 0 \"register_operand\" \"=x,x\")\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=x,x,x\")\n \t(vec_merge:V2DF\n \t  (vec_duplicate:V2DF\n-\t    (float:DF (match_operand:SI 2 \"nonimmediate_operand\" \"r,m\")))\n-\t  (match_operand:V2DF 1 \"register_operand\" \"0,0\")\n+\t    (float:DF (match_operand:SI 2 \"nonimmediate_operand\" \"r,m,rm\")))\n+\t  (match_operand:V2DF 1 \"register_operand\" \"0,0,x\")\n \t  (const_int 1)))]\n   \"TARGET_SSE2\"\n-  \"cvtsi2sd\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sseicvt\")\n-   (set_attr \"mode\" \"DF\")\n-   (set_attr \"athlon_decode\" \"double,direct\")\n-   (set_attr \"amdfam10_decode\" \"vector,double\")\n-   (set_attr \"bdver1_decode\" \"double,direct\")])\n-\n-(define_insn \"*avx_cvtsi2sdq\"\n-  [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n-\t(vec_merge:V2DF\n-\t  (vec_duplicate:V2DF\n-\t    (float:DF (match_operand:DI 2 \"nonimmediate_operand\" \"rm\")))\n-\t  (match_operand:V2DF 1 \"register_operand\" \"x\")\n-\t  (const_int 1)))]\n-  \"TARGET_AVX && TARGET_64BIT\"\n-  \"vcvtsi2sdq\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sseicvt\")\n-   (set_attr \"length_vex\" \"4\")\n-   (set_attr \"prefix\" \"vex\")\n+  \"@\n+   cvtsi2sd\\t{%2, %0|%0, %2}\n+   cvtsi2sd\\t{%2, %0|%0, %2}\n+   vcvtsi2sd\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n+   (set_attr \"type\" \"sseicvt\")\n+   (set_attr \"athlon_decode\" \"double,direct,*\")\n+   (set_attr \"amdfam10_decode\" \"vector,double,*\")\n+   (set_attr \"bdver1_decode\" \"double,direct,*\")\n+   (set_attr \"prefix\" \"orig,orig,vex\")\n    (set_attr \"mode\" \"DF\")])\n \n (define_insn \"sse2_cvtsi2sdq\"\n-  [(set (match_operand:V2DF 0 \"register_operand\" \"=x,x\")\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=x,x,x\")\n \t(vec_merge:V2DF\n \t  (vec_duplicate:V2DF\n-\t    (float:DF (match_operand:DI 2 \"nonimmediate_operand\" \"r,m\")))\n-\t  (match_operand:V2DF 1 \"register_operand\" \"0,0\")\n+\t    (float:DF (match_operand:DI 2 \"nonimmediate_operand\" \"r,m,rm\")))\n+\t  (match_operand:V2DF 1 \"register_operand\" \"0,0,x\")\n \t  (const_int 1)))]\n   \"TARGET_SSE2 && TARGET_64BIT\"\n-  \"cvtsi2sdq\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sseicvt\")\n-   (set_attr \"prefix_rex\" \"1\")\n-   (set_attr \"mode\" \"DF\")\n-   (set_attr \"athlon_decode\" \"double,direct\")\n-   (set_attr \"amdfam10_decode\" \"vector,double\")\n-   (set_attr \"bdver1_decode\" \"double,direct\")])\n+  \"@\n+   cvtsi2sdq\\t{%2, %0|%0, %2}\n+   cvtsi2sdq\\t{%2, %0|%0, %2}\n+   vcvtsi2sdq\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n+   (set_attr \"type\" \"sseicvt\")\n+   (set_attr \"athlon_decode\" \"double,direct,*\")\n+   (set_attr \"amdfam10_decode\" \"vector,double,*\")\n+   (set_attr \"bdver1_decode\" \"double,direct,*\")\n+   (set_attr \"length_vex\" \"*,*,4\")\n+   (set_attr \"prefix_rex\" \"1,1,*\")\n+   (set_attr \"prefix\" \"orig,orig,vex\")\n+   (set_attr \"mode\" \"DF\")])\n \n (define_insn \"sse2_cvtsd2si\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n@@ -2289,7 +2275,7 @@\n \t     (parallel [(const_int 0)]))]\n \t  UNSPEC_FIX_NOTRUNC))]\n   \"TARGET_SSE2 && TARGET_64BIT\"\n-  \"%vcvtsd2siq\\t{%1, %0|%0, %1}\"\n+  \"%vcvtsd2si{q}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"athlon_decode\" \"double,vector\")\n    (set_attr \"bdver1_decode\" \"double,double\")\n@@ -2302,7 +2288,7 @@\n \t(unspec:DI [(match_operand:DF 1 \"nonimmediate_operand\" \"x,m\")]\n \t\t   UNSPEC_FIX_NOTRUNC))]\n   \"TARGET_SSE2 && TARGET_64BIT\"\n-  \"%vcvtsd2siq\\t{%1, %0|%0, %1}\"\n+  \"%vcvtsd2si{q}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"athlon_decode\" \"double,vector\")\n    (set_attr \"amdfam10_decode\" \"double,double\")\n@@ -2320,12 +2306,12 @@\n   \"TARGET_SSE2\"\n   \"%vcvttsd2si\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sseicvt\")\n-   (set_attr \"prefix_rep\" \"1\")\n-   (set_attr \"prefix\" \"maybe_vex\")\n-   (set_attr \"mode\" \"SI\")\n    (set_attr \"athlon_decode\" \"double,vector\")\n    (set_attr \"amdfam10_decode\" \"double,double\")\n-   (set_attr \"bdver1_decode\" \"double,double\")])\n+   (set_attr \"bdver1_decode\" \"double,double\")\n+   (set_attr \"prefix_rep\" \"1\")\n+   (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"mode\" \"SI\")])\n \n (define_insn \"sse2_cvttsd2siq\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n@@ -2334,14 +2320,14 @@\n \t    (match_operand:V2DF 1 \"nonimmediate_operand\" \"x,m\")\n \t    (parallel [(const_int 0)]))))]\n   \"TARGET_SSE2 && TARGET_64BIT\"\n-  \"%vcvttsd2siq\\t{%1, %0|%0, %1}\"\n+  \"%vcvttsd2si{q}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sseicvt\")\n-   (set_attr \"prefix_rep\" \"1\")\n-   (set_attr \"prefix\" \"maybe_vex\")\n-   (set_attr \"mode\" \"DI\")\n    (set_attr \"athlon_decode\" \"double,vector\")\n    (set_attr \"amdfam10_decode\" \"double,double\")\n-   (set_attr \"bdver1_decode\" \"double,double\")])\n+   (set_attr \"bdver1_decode\" \"double,double\")\n+   (set_attr \"prefix_rep\" \"1\")\n+   (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"mode\" \"DI\")])\n \n (define_insn \"avx_cvtdq2pd256\"\n   [(set (match_operand:V4DF 0 \"register_operand\" \"=x\")\n@@ -2357,7 +2343,8 @@\n \t(float:V4DF\n \t  (vec_select:V4SI\n \t    (match_operand:V8SI 1 \"nonimmediate_operand\" \"xm\")\n-\t    (parallel [(const_int 0) (const_int 1) (const_int 2) (const_int 3)]))))]\n+\t    (parallel [(const_int 0) (const_int 1)\n+\t\t       (const_int 2) (const_int 3)]))))]\n   \"TARGET_AVX\"\n   \"vcvtdq2pd\\t{%x1, %0|%0, %x1}\"\n   [(set_attr \"type\" \"ssecvt\")\n@@ -2402,8 +2389,12 @@\n \t\t       UNSPEC_FIX_NOTRUNC)\n \t  (match_operand:V2SI 2 \"const0_operand\" \"\")))]\n   \"TARGET_SSE2\"\n-  \"* return TARGET_AVX ? \\\"vcvtpd2dq{x}\\t{%1, %0|%0, %1}\\\"\n-\t\t       : \\\"cvtpd2dq\\t{%1, %0|%0, %1}\\\";\"\n+{\n+  if (TARGET_AVX)\n+    return \"vcvtpd2dq{x}\\t{%1, %0|%0, %1}\";\n+  else\n+    return \"cvtpd2dq\\t{%1, %0|%0, %1}\";\n+}\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"prefix_data16\" \"0\")\n@@ -2436,75 +2427,60 @@\n \t  (fix:V2SI (match_operand:V2DF 1 \"nonimmediate_operand\" \"xm\"))\n \t  (match_operand:V2SI 2 \"const0_operand\" \"\")))]\n   \"TARGET_SSE2\"\n-  \"* return TARGET_AVX ? \\\"vcvttpd2dq{x}\\t{%1, %0|%0, %1}\\\"\n-\t\t       : \\\"cvttpd2dq\\t{%1, %0|%0, %1}\\\";\"\n+{\n+  if (TARGET_AVX)\n+    return \"vcvttpd2dq{x}\\t{%1, %0|%0, %1}\";\n+  else\n+    return \"cvttpd2dq\\t{%1, %0|%0, %1}\";\n+}\n   [(set_attr \"type\" \"ssecvt\")\n-   (set_attr \"prefix\" \"maybe_vex\")\n-   (set_attr \"mode\" \"TI\")\n    (set_attr \"amdfam10_decode\" \"double\")\n    (set_attr \"athlon_decode\" \"vector\")\n-   (set_attr \"bdver1_decode\" \"double\")])\n-\n-(define_insn \"*avx_cvtsd2ss\"\n-  [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n-\t(vec_merge:V4SF\n-\t  (vec_duplicate:V4SF\n-\t    (float_truncate:V2SF\n-\t      (match_operand:V2DF 2 \"nonimmediate_operand\" \"xm\")))\n-\t  (match_operand:V4SF 1 \"register_operand\" \"x\")\n-\t  (const_int 1)))]\n-  \"TARGET_AVX\"\n-  \"vcvtsd2ss\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"ssecvt\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"SF\")])\n+   (set_attr \"bdver1_decode\" \"double\")\n+   (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"mode\" \"TI\")])\n \n (define_insn \"sse2_cvtsd2ss\"\n-  [(set (match_operand:V4SF 0 \"register_operand\" \"=x,x\")\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=x,x,x\")\n \t(vec_merge:V4SF\n \t  (vec_duplicate:V4SF\n \t    (float_truncate:V2SF\n-\t      (match_operand:V2DF 2 \"nonimmediate_operand\" \"x,m\")))\n-\t  (match_operand:V4SF 1 \"register_operand\" \"0,0\")\n+\t      (match_operand:V2DF 2 \"nonimmediate_operand\" \"x,m,xm\")))\n+\t  (match_operand:V4SF 1 \"register_operand\" \"0,0,x\")\n \t  (const_int 1)))]\n   \"TARGET_SSE2\"\n-  \"cvtsd2ss\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"ssecvt\")\n-   (set_attr \"athlon_decode\" \"vector,double\")\n-   (set_attr \"amdfam10_decode\" \"vector,double\")\n-   (set_attr \"bdver1_decode\" \"direct,direct\")\n+  \"@\n+   cvtsd2ss\\t{%2, %0|%0, %2}\n+   cvtsd2ss\\t{%2, %0|%0, %2}\n+   vcvtsd2ss\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n+   (set_attr \"type\" \"ssecvt\")\n+   (set_attr \"athlon_decode\" \"vector,double,*\")\n+   (set_attr \"amdfam10_decode\" \"vector,double,*\")\n+   (set_attr \"bdver1_decode\" \"direct,direct,*\")\n+   (set_attr \"prefix\" \"orig,orig,vex\")\n    (set_attr \"mode\" \"SF\")])\n \n-(define_insn \"*avx_cvtss2sd\"\n-  [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n-\t(vec_merge:V2DF\n-\t  (float_extend:V2DF\n-\t    (vec_select:V2SF\n-\t      (match_operand:V4SF 2 \"nonimmediate_operand\" \"xm\")\n-\t      (parallel [(const_int 0) (const_int 1)])))\n-\t  (match_operand:V2DF 1 \"register_operand\" \"x\")\n-\t  (const_int 1)))]\n-  \"TARGET_AVX\"\n-  \"vcvtss2sd\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"ssecvt\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"DF\")])\n-\n (define_insn \"sse2_cvtss2sd\"\n-  [(set (match_operand:V2DF 0 \"register_operand\" \"=x,x\")\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=x,x,x\")\n \t(vec_merge:V2DF\n \t  (float_extend:V2DF\n \t    (vec_select:V2SF\n-\t      (match_operand:V4SF 2 \"nonimmediate_operand\" \"x,m\")\n+\t      (match_operand:V4SF 2 \"nonimmediate_operand\" \"x,m,xm\")\n \t      (parallel [(const_int 0) (const_int 1)])))\n-\t  (match_operand:V2DF 1 \"register_operand\" \"0,0\")\n+\t  (match_operand:V2DF 1 \"register_operand\" \"0,0,x\")\n \t  (const_int 1)))]\n   \"TARGET_SSE2\"\n-  \"cvtss2sd\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"ssecvt\")\n-   (set_attr \"amdfam10_decode\" \"vector,double\")\n-   (set_attr \"athlon_decode\" \"direct,direct\")\n-   (set_attr \"bdver1_decode\" \"direct,direct\")\n+  \"@\n+   cvtss2sd\\t{%2, %0|%0, %2}\n+   cvtss2sd\\t{%2, %0|%0, %2}\n+   vcvtss2sd\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n+   (set_attr \"type\" \"ssecvt\")\n+   (set_attr \"amdfam10_decode\" \"vector,double,*\")\n+   (set_attr \"athlon_decode\" \"direct,direct,*\")\n+   (set_attr \"bdver1_decode\" \"direct,direct,*\")\n+   (set_attr \"prefix\" \"orig,orig,vex\")\n    (set_attr \"mode\" \"DF\")])\n \n (define_insn \"avx_cvtpd2ps256\"\n@@ -2533,15 +2509,19 @@\n \t    (match_operand:V2DF 1 \"nonimmediate_operand\" \"xm\"))\n \t  (match_operand:V2SF 2 \"const0_operand\" \"\")))]\n   \"TARGET_SSE2\"\n-  \"* return TARGET_AVX ? \\\"vcvtpd2ps{x}\\t{%1, %0|%0, %1}\\\"\n-\t\t       : \\\"cvtpd2ps\\t{%1, %0|%0, %1}\\\";\"\n+{\n+  if (TARGET_AVX)\n+    return \"vcvtpd2ps{x}\\t{%1, %0|%0, %1}\";\n+  else\n+    return \"cvtpd2ps\\t{%1, %0|%0, %1}\";\n+}\n   [(set_attr \"type\" \"ssecvt\")\n-   (set_attr \"prefix_data16\" \"1\")\n-   (set_attr \"prefix\" \"maybe_vex\")\n-   (set_attr \"mode\" \"V4SF\")\n    (set_attr \"amdfam10_decode\" \"double\")\n    (set_attr \"athlon_decode\" \"vector\")\n-   (set_attr \"bdver1_decode\" \"double\")])\n+   (set_attr \"bdver1_decode\" \"double\")\n+   (set_attr \"prefix_data16\" \"1\")\n+   (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"mode\" \"V4SF\")])\n \n (define_insn \"avx_cvtps2pd256\"\n   [(set (match_operand:V4DF 0 \"register_operand\" \"=x\")\n@@ -2558,7 +2538,8 @@\n \t(float_extend:V4DF\n \t  (vec_select:V4SF\n \t    (match_operand:V8SF 1 \"nonimmediate_operand\" \"xm\")\n-\t    (parallel [(const_int 0) (const_int 1) (const_int 2) (const_int 3)]))))]\n+\t    (parallel [(const_int 0) (const_int 1)\n+\t\t       (const_int 2) (const_int 3)]))))]\n   \"TARGET_AVX\"\n   \"vcvtps2pd\\t{%x1, %0|%0, %x1}\"\n   [(set_attr \"type\" \"ssecvt\")\n@@ -2574,23 +2555,21 @@\n   \"TARGET_SSE2\"\n   \"%vcvtps2pd\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n-   (set_attr \"prefix\" \"maybe_vex\")\n-   (set_attr \"mode\" \"V2DF\")\n-   (set_attr \"prefix_data16\" \"0\")\n    (set_attr \"amdfam10_decode\" \"direct\")\n    (set_attr \"athlon_decode\" \"double\")\n-   (set_attr \"bdver1_decode\" \"double\")])\n+   (set_attr \"bdver1_decode\" \"double\")\n+   (set_attr \"prefix_data16\" \"0\")\n+   (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"mode\" \"V2DF\")])\n \n (define_expand \"vec_unpacks_hi_v4sf\"\n   [(set (match_dup 2)\n    (vec_select:V4SF\n      (vec_concat:V8SF\n        (match_dup 2)\n        (match_operand:V4SF 1 \"nonimmediate_operand\" \"\"))\n-     (parallel [(const_int 6)\n-\t\t(const_int 7)\n-\t\t(const_int 2)\n-\t\t(const_int 3)])))\n+     (parallel [(const_int 6) (const_int 7)\n+\t\t(const_int 2) (const_int 3)])))\n   (set (match_operand:V2DF 0 \"register_operand\" \"\")\n    (float_extend:V2DF\n      (vec_select:V2SF\n@@ -2603,17 +2582,13 @@\n   [(set (match_dup 2)\n \t(vec_select:V4SF\n \t  (match_operand:V8SF 1 \"nonimmediate_operand\" \"\")\n-\t  (parallel [(const_int 4)\n-\t\t     (const_int 5)\n-\t\t     (const_int 6)\n-\t\t     (const_int 7)])))\n+\t  (parallel [(const_int 4) (const_int 5)\n+\t\t     (const_int 6) (const_int 7)])))\n    (set (match_operand:V4DF 0 \"register_operand\" \"\")\n \t(float_extend:V4DF\n \t  (match_dup 2)))]\n   \"TARGET_AVX\"\n-{\n-  operands[2] = gen_reg_rtx (V4SFmode);\n-})\n+  \"operands[2] = gen_reg_rtx (V4SFmode);\")\n \n (define_expand \"vec_unpacks_lo_v4sf\"\n   [(set (match_operand:V2DF 0 \"register_operand\" \"\")\n@@ -2628,7 +2603,8 @@\n \t(float_extend:V4DF\n \t  (vec_select:V4SF\n \t    (match_operand:V8SF 1 \"nonimmediate_operand\" \"\")\n-\t    (parallel [(const_int 0) (const_int 1) (const_int 2) (const_int 3)]))))]\n+\t    (parallel [(const_int 0) (const_int 1)\n+\t\t       (const_int 2) (const_int 3)]))))]\n   \"TARGET_AVX\")\n \n (define_expand \"vec_unpacks_float_hi_v8hi\"\n@@ -2683,10 +2659,8 @@\n   [(set (match_dup 2)\n \t(vec_select:V4SI\n \t  (match_operand:V4SI 1 \"nonimmediate_operand\" \"\")\n-\t  (parallel [(const_int 2)\n-\t\t     (const_int 3)\n-\t\t     (const_int 2)\n-\t\t     (const_int 3)])))\n+\t  (parallel [(const_int 2) (const_int 3)\n+\t\t     (const_int 2) (const_int 3)])))\n    (set (match_operand:V2DF 0 \"register_operand\" \"\")\n         (float:V2DF\n \t  (vec_select:V2SI\n@@ -2707,10 +2681,8 @@\n   [(set (match_dup 2)\n \t(vec_select:V4SI\n \t  (match_operand:V8SI 1 \"nonimmediate_operand\" \"\")\n-\t  (parallel [(const_int 4)\n-\t\t     (const_int 5)\n-\t\t     (const_int 6)\n-\t\t     (const_int 7)])))\n+\t  (parallel [(const_int 4) (const_int 5)\n+\t\t     (const_int 6) (const_int 7)])))\n    (set (match_operand:V4DF 0 \"register_operand\" \"\")\n         (float:V4DF\n \t  (match_dup 2)))]\n@@ -2722,17 +2694,16 @@\n \t(float:V4DF\n \t  (vec_select:V4SI\n \t    (match_operand:V8SI 1 \"nonimmediate_operand\" \"\")\n-\t    (parallel [(const_int 0) (const_int 1) (const_int 2) (const_int 3)]))))]\n+\t    (parallel [(const_int 0) (const_int 1)\n+\t\t       (const_int 2) (const_int 3)]))))]\n   \"TARGET_AVX\")\n \n (define_expand \"vec_unpacku_float_hi_v4si\"\n   [(set (match_dup 5)\n \t(vec_select:V4SI\n \t  (match_operand:V4SI 1 \"nonimmediate_operand\" \"\")\n-\t  (parallel [(const_int 2)\n-\t\t     (const_int 3)\n-\t\t     (const_int 2)\n-\t\t     (const_int 3)])))\n+\t  (parallel [(const_int 2) (const_int 3)\n+\t\t     (const_int 2) (const_int 3)])))\n    (set (match_dup 6)\n         (float:V2DF\n \t  (vec_select:V2SI"}]}