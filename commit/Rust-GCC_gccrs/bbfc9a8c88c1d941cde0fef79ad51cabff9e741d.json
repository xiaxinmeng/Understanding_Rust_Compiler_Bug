{"sha": "bbfc9a8c88c1d941cde0fef79ad51cabff9e741d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJmYzlhOGM4OGMxZDk0MWNkZTBmZWY3OWFkNTFjYWJmZjllNzQxZA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-03-22T22:38:56Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-03-22T22:38:56Z"}, "message": "m32c.c: Don't include opts.h.\n\n\t* config/m32c/m32c.c: Don't include opts.h.\n\t(target_memregs, target_memregs_set, TARGET_HANDLE_OPTION,\n\tm32c_handle_option): Remove.\n\t(m32c_option_override): Check global_options_set.x_target_memregs\n\tinstead of target_memregs_set.\n\t* config/m32c/m32c.h (target_memregs): Remove.\n\t* config/m32c/m32c.opt (memregs=): Use UInteger with integer\n\tvariable.\n\nFrom-SVN: r171320", "tree": {"sha": "0f92dfe67df8f5f0e951dcad65707d9bd2060d81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f92dfe67df8f5f0e951dcad65707d9bd2060d81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbfc9a8c88c1d941cde0fef79ad51cabff9e741d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbfc9a8c88c1d941cde0fef79ad51cabff9e741d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbfc9a8c88c1d941cde0fef79ad51cabff9e741d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbfc9a8c88c1d941cde0fef79ad51cabff9e741d/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e24b8335fad88c8aeb933f6a2ef3c5f0c877a7a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e24b8335fad88c8aeb933f6a2ef3c5f0c877a7a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e24b8335fad88c8aeb933f6a2ef3c5f0c877a7a0"}], "stats": {"total": 42, "additions": 14, "deletions": 28}, "files": [{"sha": "b5936dd2601e618eff807cfff32e66204de328dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbfc9a8c88c1d941cde0fef79ad51cabff9e741d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbfc9a8c88c1d941cde0fef79ad51cabff9e741d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bbfc9a8c88c1d941cde0fef79ad51cabff9e741d", "patch": "@@ -1,3 +1,14 @@\n+2011-03-22  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/m32c/m32c.c: Don't include opts.h.\n+\t(target_memregs, target_memregs_set, TARGET_HANDLE_OPTION,\n+\tm32c_handle_option): Remove.\n+\t(m32c_option_override): Check global_options_set.x_target_memregs\n+\tinstead of target_memregs_set.\n+\t* config/m32c/m32c.h (target_memregs): Remove.\n+\t* config/m32c/m32c.opt (memregs=): Use UInteger with integer\n+\tvariable.\n+\n 2011-03-22  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/iq2000/iq2000-opts.h: New."}, {"sha": "055f34e9320d0971617bb8d9d3c7e369256e854a", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbfc9a8c88c1d941cde0fef79ad51cabff9e741d/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbfc9a8c88c1d941cde0fef79ad51cabff9e741d/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=bbfc9a8c88c1d941cde0fef79ad51cabff9e741d", "patch": "@@ -48,7 +48,6 @@\n #include \"langhooks.h\"\n #include \"gimple.h\"\n #include \"df.h\"\n-#include \"opts.h\"\n \n /* Prototypes */\n \n@@ -408,31 +407,8 @@ class_can_hold_mode (reg_class_t rclass, enum machine_mode mode)\n    Memregs are provided by m32c-lib1.S.\n */\n \n-int target_memregs = 16;\n-static bool target_memregs_set = FALSE;\n int ok_to_change_target_memregs = TRUE;\n \n-#undef  TARGET_HANDLE_OPTION\n-#define TARGET_HANDLE_OPTION m32c_handle_option\n-static bool\n-m32c_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n-\t\t    const struct cl_decoded_option *decoded,\n-\t\t    location_t loc ATTRIBUTE_UNUSED)\n-{\n-  size_t code = decoded->opt_index;\n-  const char *arg = decoded->arg;\n-\n-  gcc_assert (opts == &global_options);\n-  gcc_assert (opts_set == &global_options_set);\n-\n-  if (code == OPT_memregs_)\n-    {\n-      target_memregs_set = TRUE;\n-      target_memregs = atoi (arg);\n-    }\n-  return TRUE;\n-}\n-\n /* Implements TARGET_OPTION_OVERRIDE.  */\n \n #undef TARGET_OPTION_OVERRIDE\n@@ -442,7 +418,7 @@ static void\n m32c_option_override (void)\n {\n   /* We limit memregs to 0..16, and provide a default.  */\n-  if (target_memregs_set)\n+  if (global_options_set.x_target_memregs)\n     {\n       if (target_memregs < 0 || target_memregs > 16)\n \terror (\"invalid target memregs value '%d'\", target_memregs);"}, {"sha": "28072abc2ba31b47f9c27ffff023f3e35a955491", "filename": "gcc/config/m32c/m32c.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbfc9a8c88c1d941cde0fef79ad51cabff9e741d/gcc%2Fconfig%2Fm32c%2Fm32c.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbfc9a8c88c1d941cde0fef79ad51cabff9e741d/gcc%2Fconfig%2Fm32c%2Fm32c.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.h?ref=bbfc9a8c88c1d941cde0fef79ad51cabff9e741d", "patch": "@@ -86,7 +86,6 @@\n    beginning of the file.  This variable starts off TRUE and later\n    becomes FALSE.  */\n extern int ok_to_change_target_memregs;\n-extern int target_memregs;\n \n /* TARGET_CPU is a multi-way option set in m32c.opt.  While we could\n    use enums or defines for this, this and m32c.opt are the only"}, {"sha": "b3029b0e4d1f0faab8d235db89d3b985c9b1c120", "filename": "gcc/config/m32c/m32c.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbfc9a8c88c1d941cde0fef79ad51cabff9e741d/gcc%2Fconfig%2Fm32c%2Fm32c.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbfc9a8c88c1d941cde0fef79ad51cabff9e741d/gcc%2Fconfig%2Fm32c%2Fm32c.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.opt?ref=bbfc9a8c88c1d941cde0fef79ad51cabff9e741d", "patch": "@@ -1,5 +1,5 @@\n ; Target Options for R8C/M16C/M32C\n-; Copyright (C) 2005 2007\n+; Copyright (C) 2005, 2007, 2011\n ; Free Software Foundation, Inc.\n ; Contributed by Red Hat.\n ;\n@@ -40,5 +40,5 @@ Target RejectNegative Var(target_cpu,'3')\n -mcpu=m32c\tCompile code for M32C variants\n \n memregs=\n-Target RejectNegative Joined Var(target_memregs_string)\n+Target RejectNegative Joined UInteger Var(target_memregs) Init(16)\n -memregs=\tNumber of memreg bytes (default: 16, range: 0..16)"}]}