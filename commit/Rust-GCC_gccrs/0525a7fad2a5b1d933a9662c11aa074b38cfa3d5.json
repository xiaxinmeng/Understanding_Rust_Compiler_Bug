{"sha": "0525a7fad2a5b1d933a9662c11aa074b38cfa3d5", "node_id": "C_kwDOANBUbNoAKDA1MjVhN2ZhZDJhNWIxZDkzM2E5NjYyYzExYWEwNzRiMzhjZmEzZDU", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-12-06T09:23:55Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-12-06T09:23:55Z"}, "message": "range-op-float: Fix up ICE in lower_bound [PR107975]\n\nAccording to https://gcc.gnu.org/pipermail/gcc-regression/2022-December/077258.html\nmy patch caused some ICEs, e.g. the following testcase ICEs.\nThe problem is that lower_bound and upper_bound methods on a france assert\nthat the range isn't VR_NAN or VR_UNDEFINED.\nAll the op1_range/op2_range methods already return early if lhs.undefined_p,\nbut the other cases (when lhs is VR_NAN or the other opN is VR_NAN or\nVR_UNDEFINED) aren't.  float_binary_op_range_finish will DTRT for those\ncases already.\n\n2022-12-06  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/107975\n\t* range-op-float.cc (foperator_mult::op1_range,\n\tfoperator_div::op1_range, foperator_div::op2_range): Just\n\treturn float_binary_op_range_finish result if lhs is known\n\tNAN, or the other operand is known NAN or UNDEFINED.\n\n\t* gcc.dg/pr107975.c: New test.", "tree": {"sha": "f3c1a4d33a99178060ac3e5e793608f6df62f0dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3c1a4d33a99178060ac3e5e793608f6df62f0dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0525a7fad2a5b1d933a9662c11aa074b38cfa3d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0525a7fad2a5b1d933a9662c11aa074b38cfa3d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0525a7fad2a5b1d933a9662c11aa074b38cfa3d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0525a7fad2a5b1d933a9662c11aa074b38cfa3d5/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f80367e539839fff1df2c85fc2640638199fc9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f80367e539839fff1df2c85fc2640638199fc9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f80367e539839fff1df2c85fc2640638199fc9e"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "ac57c8a61d08962d05c295b2fa66c027dbd05dea", "filename": "gcc/range-op-float.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0525a7fad2a5b1d933a9662c11aa074b38cfa3d5/gcc%2Frange-op-float.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0525a7fad2a5b1d933a9662c11aa074b38cfa3d5/gcc%2Frange-op-float.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op-float.cc?ref=0525a7fad2a5b1d933a9662c11aa074b38cfa3d5", "patch": "@@ -2146,6 +2146,8 @@ class foperator_mult : public foperator_mult_div_base\n     bool ret = rdiv.fold_range (r, type, lhs, op2);\n     if (ret == false)\n       return false;\n+    if (lhs.known_isnan () || op2.known_isnan () || op2.undefined_p ())\n+      return float_binary_op_range_finish (ret, r, type, lhs);\n     const REAL_VALUE_TYPE &lhs_lb = lhs.lower_bound ();\n     const REAL_VALUE_TYPE &lhs_ub = lhs.upper_bound ();\n     const REAL_VALUE_TYPE &op2_lb = op2.lower_bound ();\n@@ -2296,6 +2298,8 @@ class foperator_div : public foperator_mult_div_base\n     bool ret = fop_mult.fold_range (r, type, lhs, op2);\n     if (!ret)\n       return ret;\n+    if (lhs.known_isnan () || op2.known_isnan () || op2.undefined_p ())\n+      return float_binary_op_range_finish (ret, r, type, lhs);\n     const REAL_VALUE_TYPE &lhs_lb = lhs.lower_bound ();\n     const REAL_VALUE_TYPE &lhs_ub = lhs.upper_bound ();\n     const REAL_VALUE_TYPE &op2_lb = op2.lower_bound ();\n@@ -2325,6 +2329,8 @@ class foperator_div : public foperator_mult_div_base\n     bool ret = fold_range (r, type, op1, lhs);\n     if (!ret)\n       return ret;\n+    if (lhs.known_isnan () || op1.known_isnan () || op1.undefined_p ())\n+      return float_binary_op_range_finish (ret, r, type, lhs);\n     const REAL_VALUE_TYPE &lhs_lb = lhs.lower_bound ();\n     const REAL_VALUE_TYPE &lhs_ub = lhs.upper_bound ();\n     const REAL_VALUE_TYPE &op1_lb = op1.lower_bound ();"}, {"sha": "7710f6f4a5d18e26b2fc2ce9315e0b438cf59fad", "filename": "gcc/testsuite/gcc.dg/pr107975.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0525a7fad2a5b1d933a9662c11aa074b38cfa3d5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr107975.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0525a7fad2a5b1d933a9662c11aa074b38cfa3d5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr107975.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr107975.c?ref=0525a7fad2a5b1d933a9662c11aa074b38cfa3d5", "patch": "@@ -0,0 +1,15 @@\n+/* PR tree-optimization/107975 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-add-options ieee } */\n+\n+double\n+foo (double x, double y)\n+{\n+  if (x == 42.0)\n+    return 1.0;\n+  double r = x * y;\n+  if (!__builtin_isnan (r))\n+    __builtin_unreachable ();\n+  return r;\n+}"}]}