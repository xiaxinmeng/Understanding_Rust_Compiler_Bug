{"sha": "eb0430f02e045c3539a9d4120bc1bbde8925e7ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWIwNDMwZjAyZTA0NWMzNTM5YTlkNDEyMGJjMWJiZGU4OTI1ZTdhZA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1995-04-18T10:56:20Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1995-04-18T10:56:20Z"}, "message": "Make weak symbols work again.\n\nFrom-SVN: r9407", "tree": {"sha": "3797b4898ef256a0d0a50f9f2fe8ea17a160bebc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3797b4898ef256a0d0a50f9f2fe8ea17a160bebc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb0430f02e045c3539a9d4120bc1bbde8925e7ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb0430f02e045c3539a9d4120bc1bbde8925e7ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb0430f02e045c3539a9d4120bc1bbde8925e7ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb0430f02e045c3539a9d4120bc1bbde8925e7ad/comments", "author": null, "committer": null, "parents": [{"sha": "a07a2d17c5061bfea5a5a457c935450d7c1e979e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a07a2d17c5061bfea5a5a457c935450d7c1e979e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a07a2d17c5061bfea5a5a457c935450d7c1e979e"}], "stats": {"total": 58, "additions": 41, "deletions": 17}, "files": [{"sha": "d82261398289ced06586e3cd3d5f625b8088de7d", "filename": "gcc/varasm.c", "status": "modified", "additions": 41, "deletions": 17, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0430f02e045c3539a9d4120bc1bbde8925e7ad/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0430f02e045c3539a9d4120bc1bbde8925e7ad/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=eb0430f02e045c3539a9d4120bc1bbde8925e7ad", "patch": "@@ -96,13 +96,23 @@ int size_directive_output;\n \n tree last_assemble_variable_decl;\n \n-/* Nonzero if at least one function definition has been seen.  */\n-\n-static int function_defined;\n \n+#if defined (HANDLE_PRAGMA_WEAK) || (defined (WEAK_ASM_OP) && defined (ASM_OUTPUT_DEF))\n /* Any weak symbol declarations waiting to be emitted.  */\n \n-static tree weak_decls;\n+struct weak_syms\n+{\n+  struct weak_syms *next;\n+  char *name;\n+  char *value;\n+};\n+\n+static struct weak_syms *weak_decls;\n+#endif\n+\n+/* Nonzero if at least one function definition has been seen.  */\n+\n+static int function_defined;\n \n struct addr_const;\n struct constant_descriptor;\n@@ -3942,15 +3952,29 @@ enum pragma_state\n \n /* Output asm to handle ``#pragma weak'' */\n void\n-handle_pragma_weak (what, asm_out_file, name, value)\n+handle_pragma_weak (what, out_file, name, value)\n      enum pragma_state what;\n-     FILE *asm_out_file;\n+     FILE *out_file;\n      char *name, *value;\n {\n   if (what == ps_name || what == ps_value)\n     {\n-      weak_decls = perm_tree_cons (what == ps_value ? value : NULL_TREE,\n-\t\t\t\t   name, weak_decls);\n+      struct weak_syms *weak =\n+\t(struct weak_syms *)permalloc (sizeof (struct weak_syms));\n+      weak->next = weak_decls;\n+      weak->name = permalloc (strlen (name) + 1);\n+      strcpy (weak->name, name);\n+\n+      if (what != ps_value)\n+\tweak->value = NULL_PTR;\n+\n+      else\n+\t{\n+\t  weak->value = permalloc (strlen (value) + 1);\n+\t  strcpy (weak->value, value);\n+\t}\n+\n+      weak_decls = weak;\n     }\n   else if (! (what == ps_done || what == ps_start))\n     warning (\"malformed `#pragma weak'\");\n@@ -3967,8 +3991,9 @@ declare_weak (decl)\n   if (! TREE_PUBLIC (decl))\n     error_with_decl (decl, \"weak declaration of `%s' must be public\");\n   else\n-    weak_decls = perm_tree_cons (NULL_TREE, DECL_ASSEMBLER_NAME (decl),\n-\t\t\t\t weak_decls);\n+    handle_pragma_weak (ps_name, asm_out_file,\n+\t\t\tIDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)),\n+\t\t\tNULL_PTR);\n }\n \n /* Emit any pending weak declarations.  */\n@@ -3979,20 +4004,19 @@ weak_finish ()\n #ifdef HANDLE_PRAGMA_WEAK\n   if (HANDLE_PRAGMA_WEAK)\n     {\n-      tree t;\n-      for (t = weak_decls; t; t = TREE_CHAIN (t))\n+      struct weak_syms *t;\n+      for (t = weak_decls; t; t = t->next)\n \t{\n-\t  tree decl = TREE_VALUE (t);\n-\t  char *name = XSTR (XEXP (DECL_RTL (decl), 0), 0);\n-\n \t  fprintf (asm_out_file, \"\\t%s\\t\", WEAK_ASM_OP);\n \n \t  if (output_bytecode)\n-\t    BC_OUTPUT_LABELREF (asm_out_file, name);\n+\t    BC_OUTPUT_LABELREF (asm_out_file, t->name);\n \t  else\n-\t    ASM_OUTPUT_LABELREF (asm_out_file, name);\n+\t    ASM_OUTPUT_LABELREF (asm_out_file, t->name);\n \n \t  fputc ('\\n', asm_out_file);\n+\t  if (t->value)\n+\t    ASM_OUTPUT_DEF (asm_out_file, t->name, t->value);\n \t}\n     }\n #endif"}]}