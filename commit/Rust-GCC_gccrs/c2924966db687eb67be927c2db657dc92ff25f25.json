{"sha": "c2924966db687eb67be927c2db657dc92ff25f25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI5MjQ5NjZkYjY4N2ViNjdiZTkyN2MyZGI2NTdkYzkyZmYyNWYyNQ==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2006-03-02T19:00:11Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2006-03-02T19:00:11Z"}, "message": "tree-vrp.c (execute_vrp): Return value.\n\n2006-03-02  Daniel Berlin <dberlin@dberlin.org>\n\n\t* gcc/tree-vrp.c (execute_vrp): Return value.\n\t* gcc/regrename.c (rest_of_handle_regrename): Ditto.\n\t* gcc/tree-into-ssa.c (rewrite_into_ssa): Ditto.\n\t* gcc/tree-complex.c (tree_lower_complex): Ditto.\n\t(tree_lower_complex_O0): Ditto.\n\t* gcc/tracer.c (rest_of_handle_tracer): Ditto.\n\t* gcc/postreload-gcse.c (rest_of_handle_gcse2): Ditto.\n\t* gcc/postreload.c (rest_of_handle_postreload): Ditto.\n\t* gcc/tree-tailcall.c (execute_tail_recursion): Ditto.\n\t(execute_tail_calls): Ditto.\n\t* gcc/tree-ssa-loop-ch.c (copy_loop_headers): Ditto.\n\t* gcc/tree.h (init_function_for_compilation): Ditto.\n\t* gcc/ipa-cp.c (ipcp_driver): Ditto.\n\t* gcc/tree-scalar-evolution.c (scev_const_prop): Ditto.\n\t* gcc/tree-scalar-evolution.h (scev_const_prop): Ditto.\n\t* gcc/final.c (compute_alignments): Ditto.\n\t(rest_of_handle_final): Ditto.\n\t(rest_of_handle_shorten_branches): Ditto.\n\t(rest_of_clean_state): Ditto.\n\t* gcc/omp-low.c (execute_expand_omp): Ditto.\n\t(execute_lower_omp): Ditto.\n\t* gcc/tree-ssa-dse.c (tree_ssa_dse): Ditto.\n\t* gcc/ipa-reference.c (static_execute): Ditto.\n\t* gcc/tree-ssa-uncprop.c (tree_ssa_uncprop): Ditto.\n\t* gcc/reorg.c (rest_of_handle_delay_slots): Ditto.\n\t(rest_of_handle_machine_reorg): Ditto.\n\t* gcc/cgraphunit.c (rebuild_cgraph_edges): Ditto.\n\t* gcc/flow.c (recompute_reg_usage): Ditto.\n\t(rest_of_handle_remove_death_notes): Ditto.\n\t(rest_of_handle_life): Ditto.\n\t(rest_of_handle_flow2): Ditto.\n\t* gcc/tree-ssa-copyrename.c (rename_ssa_copies): Ditto.\n\t* gcc/tree-ssa-ccp.c (do_ssa_ccp): Ditto.\n\t(do_ssa_store_ccp): Ditto.\n\t(execute_fold_all_builtins): Ditto.\n\t* gcc/mode-switching.c (rest_of_handle_mode_switching): Ditto.\n\t* gcc/modulo-sched.c (rest_of_handle_sms): Ditto.\n\t* gcc/ipa-pure-const.c (static_execute): Ditto.\n\t* gcc/cse.c (rest_of_handle_cse): Ditto.\n\t(rest_of_handle_cse2): Ditto.\n\t* gcc/web.c (rest_of_handle_web): Ditto.\n\t* gcc/tree-stdarg.c (execute_optimize_stdarg): Ditto.\n\t* gcc/tree-ssa-math-opts.c (execute_cse_reciprocals): Ditto.\n\t* gcc/tree-ssa-dom.c (tree_ssa_dominator_optimize): Ditto.\n\t* gcc/tree-nrv.c (tree_nrv): Ditto.\n\t(execute_return_slot_opt): Ditto.\n\t* gcc/tree-ssa-alias.c (compute_may_aliases): Ditto.\n\t(create_structure_vars): Ditto.\n\t* gcc/loop-init.c (rtl_loop_init): Ditto.\n\t(rtl_loop_done): Ditto.\n\t(rtl_move_loop_invariants): Ditto.\n\t(rtl_unswitch): Ditto.\n\t(rtl_unroll_and_peel_loops): Ditto.\n\t(rtl_doloop): Ditto.\n\t* gcc/gimple-low.c (lower_function_body): Ditto.\n\t(mark_used_blocks): Ditto.\n\t* gcc/tree-ssa-sink.c (execute_sink_code): Ditto.\n\t* gcc/ipa-inline.c (cgraph_decide_inlining): Ditto.\n\t(cgraph_early_inlining): Ditto.\n\t* gcc/global.c (rest_of_handle_global_alloc): Ditto.\n\t* gcc/jump.c (cleanup_barriers): Ditto.\n\t(purge_line_number_notes): Ditto.\n\t* gcc/ifcvt.c (rest_of_handle_if_conversion): Ditto.\n\t(rest_of_handle_if_after_reload): Ditto.\n\t* gcc/tree-ssa-loop.c (tree_ssa_loop_init): Ditto.\n\t(tree_ssa_loop_im): Ditto.\n\t(tree_ssa_loop_unswitch): Ditto.\n\t(tree_vectorize): Ditto.\n\t(tree_linear_transform): Ditto.\n\t(tree_ssa_loop_ivcanon): Ditto.\n\t(tree_ssa_empty_loop): Ditto.\n\t(tree_ssa_loop_bounds): Ditto.\n\t(tree_complete_unroll): Ditto.\n\t(tree_ssa_loop_prefetch): Ditto.\n\t(tree_ssa_loop_ivopts): Ditto.\n\t(tree_ssa_loop_done): Ditto.\n\t* gcc/predict.c (tree_estimate_probability): Ditto.\n\t* gcc/recog.c (split_all_insns_noflow): Ditto.\n\t(rest_of_handle_peephole2): Ditto.\n\t(rest_of_handle_split_all_insns): Ditto.\n\t* gcc/tree-eh.c (lower_eh_constructs): Ditto.\n\t* gcc/regmove.c (rest_of_handle_regmove): Ditto.\n\t(rest_of_handle_stack_adjustments): Ditto.\n\t* gcc/local-alloc.c (rest_of_handle_local_alloc): Ditto.\n\t* gcc/function.c (instantiate_virtual_regs): Ditto.\n\t(init_function_for_compilation): Ditto.\n\t(rest_of_handle_check_leaf_regs): Ditto.\n\t* gcc/gcse.c (rest_of_handle_jump_bypass): Ditto.\n\t(rest_of_handle_gcse): Ditto.\n\t* gcc/ipa-type-escape.c (type_escape_execute): Ditto.\n\t* gcc/alias.c (rest_of_handle_cfg): Ditto.\n\t* gcc/tree-if-conv.c (main_tree_if_conversion): Ditto.\n\t* gcc/profile.c (rest_of_handle_branch_prob): Ditto.\n\t* gcc/tree-ssa-phiopt.c (tree_ssa_phiopt): Ditto.\n\t* gcc/rtl-factoring.c (rest_of_rtl_seqabstr): Ditto.\n\t* gcc/bt-load.c (rest_of_handle_branch_target_load_optimize): Ditto\n\t* gcc/tree-dfa.c (find_referenced_vars): Ditto.\n\t* gcc/except.c (set_nothrow_function_flags): Ditto.\n\t(convert_to_eh_region_ranges): Ditto.\n\t(rest_of_handle_eh): Ditto.\n\t* gcc/emit-rtl.c (unshare_all_rtl): Ditto.\n\t(remove_unnecessary_notes): Ditto.\n\t* gcc/except.h (set_nothrow_function_flags): Ditto.\n\t(convert_to_eh_region_ranges): Ditto.\n\t* gcc/cfgexpand.c (tree_expand_cfg): Ditto.\n\t* gcc/tree-cfgcleanup.c (merge_phi_nodes): Ditto.\n\t* gcc/tree-ssa-pre.c (do_pre): Ditto.\n\t(execute_fre): Ditto.\n\t* gcc/cfgcleanup.c (rest_of_handle_jump): Ditto.\n\t(rest_of_handle_jump2): Ditto.\n\t* gcc/tree-sra.c (tree_sra): Ditto.\n\t* gcc/tree-mudflap.c (execute_mudflap_function_ops): Ditto.\n\t(execute_mudflap_function_decls): Ditto.\n\t* gcc/tree-ssa-copy.c (do_copy_prop): Ditto.\n\t(do_store_copy_prop): Ditto.\n\t* gcc/ipa-prop.h (ipcp_driver): Ditto.\n\t* gcc/cfglayout.c (insn_locators_initialize): Ditto.\n\t* gcc/tree-ssa-forwprop.c\n\t(tree_ssa_forward_propagate_single_use_vars): Ditto.\n\t* gcc/cfglayout.h (insn_locators_initialize): Ditto.\n\t* gcc/tree-ssa-dce.c (tree_ssa_dce): Ditto.\n\t* gcc/tree-ssa.c (execute_early_warn_uninitialized): Ditto.\n\t(execute_late_warn_uninitialized): Ditto.\n\t* gcc/rtl.h (cleanup_barriers): Ditto.\n\t(split_all_insns_noflow): Ditto.\n\t(purge_line_number_notes): Ditto.\n\t(unshare_all_rtl): Ditto.\n\t(remove_unnecessary_notes): Ditto.\n\t(recompute_reg_usage): Ditto.\n\t(variable_tracking_main): Ditto.\n\t* gcc/integrate.c (emit_initial_value_sets): Ditto.\n\t* gcc/integrate.h (emit_initial_value_sets): Ditto.\n\t* gcc/tree-optimize.c (execute_free_datastructures): Ditto\n\t(execute_free_cfg_annotations): Ditto.\n\t(execute_fixup_cfg): Ditto.\n\t(execute_cleanup_cfg_pre_ipa): Ditto.\n\t(execute_cleanup_cfg_post_optimizing): Ditto.\n\t(execute_init_datastructures): Ditto.\n\t* gcc/tree-object-size.c (compute_object_sizes): Ditto.\n\t* gcc/combine.c (rest_of_handle_combine): Ditto.\n\t* gcc/tree-outof-ssa.c (rewrite_out_of_ssa): Ditto.\n\t* gcc/bb-reorder.c (duplicate_computed_gotos): Ditto.\n\t(rest_of_handle_reorder_blocks): Ditto.\n\t(rest_of_handle_partition_blocks): Ditto.\n\t* gcc/var-tracking.c (variable_tracking_main): Ditto.\n\t* gcc/tree-profile.c (tree_profiling): Ditto.\n\t* gcc/tree-vect-generic.c (expand_vector_operations): Ditto.\n\t* gcc/reg-stack.c (rest_of_handle_stack_regs): Ditto.\n\t* gcc/sched-rgn.c (rest_of_handle_sched): Ditto.\n\t(rest_of_handle_sched2): Ditto.\n\t* gcc/basic-block.h (free_bb_insn): Ditto.\n\t* gcc/tree-ssa-structalias.c (ipa_pta_execute): Ditto.\n\t* gcc/tree-cfg.c (execute_build_cfg): Ditto.\n\t(remove_useless_stmts): Ditto.\n\t(split_critical_edges): Ditto.\n\t(execute_warn_function_return): Ditto.\n\t(execute_warn_function_noreturn): Ditto.\n\t* gcc/tree-ssa-reassoc.c (execute_reassoc): Ditto.\n\t* gcc/cfgrtl.c (free_bb_for_insn): Ditto.\n\t* gcc/passes.c (execute_one_pass): Run additional\n\ttodos returned by execute function.\n\t* gcc/tree-pass.h (struct tree_opt_pass): Make execute\n\treturn a value.\n\nFrom-SVN: r111643", "tree": {"sha": "be719a0fce98aa79e9d0bba9d312f8c1fc708aec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be719a0fce98aa79e9d0bba9d312f8c1fc708aec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2924966db687eb67be927c2db657dc92ff25f25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2924966db687eb67be927c2db657dc92ff25f25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2924966db687eb67be927c2db657dc92ff25f25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2924966db687eb67be927c2db657dc92ff25f25/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d349339d334659de743cd6435b068237369226e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d349339d334659de743cd6435b068237369226e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d349339d334659de743cd6435b068237369226e4"}], "stats": {"total": 729, "additions": 520, "deletions": 209}, "files": [{"sha": "7967d68fd04630845ea6d82378994e787a3ff0ea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 166, "deletions": 0, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -1,3 +1,169 @@\n+2006-03-02  Daniel Berlin <dberlin@dberlin.org>\n+\n+\t* gcc/tree-vrp.c (execute_vrp): Return value.\n+\t* gcc/regrename.c (rest_of_handle_regrename): Ditto.\n+\t* gcc/tree-into-ssa.c (rewrite_into_ssa): Ditto.\n+\t* gcc/tree-complex.c (tree_lower_complex): Ditto.\n+\t(tree_lower_complex_O0): Ditto.\n+\t* gcc/tracer.c (rest_of_handle_tracer): Ditto.\n+\t* gcc/postreload-gcse.c (rest_of_handle_gcse2): Ditto.\n+\t* gcc/postreload.c (rest_of_handle_postreload): Ditto.\n+\t* gcc/tree-tailcall.c (execute_tail_recursion): Ditto.\n+\t(execute_tail_calls): Ditto.\n+\t* gcc/tree-ssa-loop-ch.c (copy_loop_headers): Ditto.\n+\t* gcc/tree.h (init_function_for_compilation): Ditto.\n+\t* gcc/ipa-cp.c (ipcp_driver): Ditto.\n+\t* gcc/tree-scalar-evolution.c (scev_const_prop): Ditto.\n+\t* gcc/tree-scalar-evolution.h (scev_const_prop): Ditto.\n+\t* gcc/final.c (compute_alignments): Ditto.\n+\t(rest_of_handle_final): Ditto.\n+\t(rest_of_handle_shorten_branches): Ditto.\n+\t(rest_of_clean_state): Ditto.\n+\t* gcc/omp-low.c (execute_expand_omp): Ditto.\n+\t(execute_lower_omp): Ditto.\n+\t* gcc/tree-ssa-dse.c (tree_ssa_dse): Ditto.\n+\t* gcc/ipa-reference.c (static_execute): Ditto.\n+\t* gcc/tree-ssa-uncprop.c (tree_ssa_uncprop): Ditto.\n+\t* gcc/reorg.c (rest_of_handle_delay_slots): Ditto.\n+\t(rest_of_handle_machine_reorg): Ditto.\n+\t* gcc/cgraphunit.c (rebuild_cgraph_edges): Ditto.\n+\t* gcc/flow.c (recompute_reg_usage): Ditto.\n+\t(rest_of_handle_remove_death_notes): Ditto.\n+\t(rest_of_handle_life): Ditto.\n+\t(rest_of_handle_flow2): Ditto.\n+\t* gcc/tree-ssa-copyrename.c (rename_ssa_copies): Ditto.\n+\t* gcc/tree-ssa-ccp.c (do_ssa_ccp): Ditto.\n+\t(do_ssa_store_ccp): Ditto.\n+\t(execute_fold_all_builtins): Ditto.\n+\t* gcc/mode-switching.c (rest_of_handle_mode_switching): Ditto.\n+\t* gcc/modulo-sched.c (rest_of_handle_sms): Ditto.\n+\t* gcc/ipa-pure-const.c (static_execute): Ditto.\n+\t* gcc/cse.c (rest_of_handle_cse): Ditto.\n+\t(rest_of_handle_cse2): Ditto.\n+\t* gcc/web.c (rest_of_handle_web): Ditto.\n+\t* gcc/tree-stdarg.c (execute_optimize_stdarg): Ditto.\n+\t* gcc/tree-ssa-math-opts.c (execute_cse_reciprocals): Ditto.\n+\t* gcc/tree-ssa-dom.c (tree_ssa_dominator_optimize): Ditto.\n+\t* gcc/tree-nrv.c (tree_nrv): Ditto.\n+\t(execute_return_slot_opt): Ditto.\n+\t* gcc/tree-ssa-alias.c (compute_may_aliases): Ditto.\n+\t(create_structure_vars): Ditto.\n+\t* gcc/loop-init.c (rtl_loop_init): Ditto.\n+\t(rtl_loop_done): Ditto.\n+\t(rtl_move_loop_invariants): Ditto.\n+\t(rtl_unswitch): Ditto.\n+\t(rtl_unroll_and_peel_loops): Ditto.\n+\t(rtl_doloop): Ditto.\n+\t* gcc/gimple-low.c (lower_function_body): Ditto.\n+\t(mark_used_blocks): Ditto.\n+\t* gcc/tree-ssa-sink.c (execute_sink_code): Ditto.\n+\t* gcc/ipa-inline.c (cgraph_decide_inlining): Ditto.\n+\t(cgraph_early_inlining): Ditto.\n+\t* gcc/global.c (rest_of_handle_global_alloc): Ditto.\n+\t* gcc/jump.c (cleanup_barriers): Ditto.\n+\t(purge_line_number_notes): Ditto.\n+\t* gcc/ifcvt.c (rest_of_handle_if_conversion): Ditto.\n+\t(rest_of_handle_if_after_reload): Ditto.\n+\t* gcc/tree-ssa-loop.c (tree_ssa_loop_init): Ditto.\n+\t(tree_ssa_loop_im): Ditto.\n+\t(tree_ssa_loop_unswitch): Ditto.\n+\t(tree_vectorize): Ditto.\n+\t(tree_linear_transform): Ditto.\n+\t(tree_ssa_loop_ivcanon): Ditto.\n+\t(tree_ssa_empty_loop): Ditto.\n+\t(tree_ssa_loop_bounds): Ditto.\n+\t(tree_complete_unroll): Ditto.\n+\t(tree_ssa_loop_prefetch): Ditto.\n+\t(tree_ssa_loop_ivopts): Ditto.\n+\t(tree_ssa_loop_done): Ditto.\n+\t* gcc/predict.c (tree_estimate_probability): Ditto.\n+\t* gcc/recog.c (split_all_insns_noflow): Ditto.\n+\t(rest_of_handle_peephole2): Ditto.\n+\t(rest_of_handle_split_all_insns): Ditto.\n+\t* gcc/tree-eh.c (lower_eh_constructs): Ditto.\n+\t* gcc/regmove.c (rest_of_handle_regmove): Ditto.\n+\t(rest_of_handle_stack_adjustments): Ditto.\n+\t* gcc/local-alloc.c (rest_of_handle_local_alloc): Ditto.\n+\t* gcc/function.c (instantiate_virtual_regs): Ditto.\n+\t(init_function_for_compilation): Ditto.\n+\t(rest_of_handle_check_leaf_regs): Ditto.\n+\t* gcc/gcse.c (rest_of_handle_jump_bypass): Ditto.\n+\t(rest_of_handle_gcse): Ditto.\n+\t* gcc/ipa-type-escape.c (type_escape_execute): Ditto.\n+\t* gcc/alias.c (rest_of_handle_cfg): Ditto.\n+\t* gcc/tree-if-conv.c (main_tree_if_conversion): Ditto.\n+\t* gcc/profile.c (rest_of_handle_branch_prob): Ditto.\n+\t* gcc/tree-ssa-phiopt.c (tree_ssa_phiopt): Ditto.\n+\t* gcc/rtl-factoring.c (rest_of_rtl_seqabstr): Ditto.\n+\t* gcc/bt-load.c (rest_of_handle_branch_target_load_optimize): Ditto\n+\t* gcc/tree-dfa.c (find_referenced_vars): Ditto.\n+\t* gcc/except.c (set_nothrow_function_flags): Ditto.\n+\t(convert_to_eh_region_ranges): Ditto.\n+\t(rest_of_handle_eh): Ditto.\n+\t* gcc/emit-rtl.c (unshare_all_rtl): Ditto.\n+\t(remove_unnecessary_notes): Ditto.\n+\t* gcc/except.h (set_nothrow_function_flags): Ditto.\n+\t(convert_to_eh_region_ranges): Ditto.\n+\t* gcc/cfgexpand.c (tree_expand_cfg): Ditto.\n+\t* gcc/tree-cfgcleanup.c (merge_phi_nodes): Ditto.\n+\t* gcc/tree-ssa-pre.c (do_pre): Ditto.\n+\t(execute_fre): Ditto.\n+\t* gcc/cfgcleanup.c (rest_of_handle_jump): Ditto.\n+\t(rest_of_handle_jump2): Ditto.\n+\t* gcc/tree-sra.c (tree_sra): Ditto.\n+\t* gcc/tree-mudflap.c (execute_mudflap_function_ops): Ditto.\n+\t(execute_mudflap_function_decls): Ditto.\n+\t* gcc/tree-ssa-copy.c (do_copy_prop): Ditto.\n+\t(do_store_copy_prop): Ditto.\n+\t* gcc/ipa-prop.h (ipcp_driver): Ditto.\n+\t* gcc/cfglayout.c (insn_locators_initialize): Ditto.\n+\t* gcc/tree-ssa-forwprop.c\n+\t(tree_ssa_forward_propagate_single_use_vars): Ditto.\n+\t* gcc/cfglayout.h (insn_locators_initialize): Ditto.\n+\t* gcc/tree-ssa-dce.c (tree_ssa_dce): Ditto.\n+\t* gcc/tree-ssa.c (execute_early_warn_uninitialized): Ditto.\n+\t(execute_late_warn_uninitialized): Ditto.\n+\t* gcc/rtl.h (cleanup_barriers): Ditto.\n+\t(split_all_insns_noflow): Ditto.\n+\t(purge_line_number_notes): Ditto.\n+\t(unshare_all_rtl): Ditto.\n+\t(remove_unnecessary_notes): Ditto.\n+\t(recompute_reg_usage): Ditto.\n+\t(variable_tracking_main): Ditto.\n+\t* gcc/integrate.c (emit_initial_value_sets): Ditto.\n+\t* gcc/integrate.h (emit_initial_value_sets): Ditto.\n+\t* gcc/tree-optimize.c (execute_free_datastructures): Ditto\n+\t(execute_free_cfg_annotations): Ditto.\n+\t(execute_fixup_cfg): Ditto.\n+\t(execute_cleanup_cfg_pre_ipa): Ditto.\n+\t(execute_cleanup_cfg_post_optimizing): Ditto.\n+\t(execute_init_datastructures): Ditto.\n+\t* gcc/tree-object-size.c (compute_object_sizes): Ditto.\n+\t* gcc/combine.c (rest_of_handle_combine): Ditto.\n+\t* gcc/tree-outof-ssa.c (rewrite_out_of_ssa): Ditto.\n+\t* gcc/bb-reorder.c (duplicate_computed_gotos): Ditto.\n+\t(rest_of_handle_reorder_blocks): Ditto.\n+\t(rest_of_handle_partition_blocks): Ditto.\n+\t* gcc/var-tracking.c (variable_tracking_main): Ditto.\n+\t* gcc/tree-profile.c (tree_profiling): Ditto.\n+\t* gcc/tree-vect-generic.c (expand_vector_operations): Ditto.\n+\t* gcc/reg-stack.c (rest_of_handle_stack_regs): Ditto.\n+\t* gcc/sched-rgn.c (rest_of_handle_sched): Ditto.\n+\t(rest_of_handle_sched2): Ditto.\n+\t* gcc/basic-block.h (free_bb_insn): Ditto.\n+\t* gcc/tree-ssa-structalias.c (ipa_pta_execute): Ditto.\n+\t* gcc/tree-cfg.c (execute_build_cfg): Ditto.\n+\t(remove_useless_stmts): Ditto.\n+\t(split_critical_edges): Ditto.\n+\t(execute_warn_function_return): Ditto.\n+\t(execute_warn_function_noreturn): Ditto.\n+\t* gcc/tree-ssa-reassoc.c (execute_reassoc): Ditto.\n+\t* gcc/cfgrtl.c (free_bb_for_insn): Ditto.\n+\t* gcc/passes.c (execute_one_pass): Run additional\n+\ttodos returned by execute function.\n+\t* gcc/tree-pass.h (struct tree_opt_pass): Make execute\n+\treturn a value.\n+\n 2006-03-02  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-alias.c (find_used_portions): Consider taking"}, {"sha": "d66d0c7e586cf30f0aa14ea8e9e72a47ee2e096a", "filename": "gcc/alias.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -2645,14 +2645,15 @@ end_alias_analysis (void)\n \f\n /* Do control and data flow analysis; write some of the results to the\n    dump file.  */\n-static void\n+static unsigned int\n rest_of_handle_cfg (void)\n {\n   if (dump_file)\n     dump_flow_info (dump_file, dump_flags);\n   if (optimize)\n     cleanup_cfg (CLEANUP_EXPENSIVE\n                  | (flag_thread_jumps ? CLEANUP_THREADING : 0));\n+  return 0;\n }\n \n struct tree_opt_pass pass_cfg ="}, {"sha": "e8e08a011be43b2a9bf14a17c29c85a9773de0c5", "filename": "gcc/basic-block.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -483,7 +483,7 @@ extern bitmap_obstack reg_obstack;\n #define set_block_for_insn(INSN, BB)  (BLOCK_FOR_INSN (INSN) = BB)\n \n extern void compute_bb_for_insn (void);\n-extern void free_bb_for_insn (void);\n+extern unsigned int free_bb_for_insn (void);\n extern void update_bb_for_insn (basic_block);\n \n extern void free_basic_block_vars (void);"}, {"sha": "412f78a24da80eaa586d78253ef6c0151c6769fd", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -1979,18 +1979,18 @@ gate_duplicate_computed_gotos (void)\n }\n \n \n-static void\n+static unsigned int\n duplicate_computed_gotos (void)\n {\n   basic_block bb, new_bb;\n   bitmap candidates;\n   int max_size;\n \n   if (n_basic_blocks <= NUM_FIXED_BLOCKS + 1)\n-    return;\n+    return 0;\n \n   if (targetm.cannot_modify_jumps_p ())\n-    return;\n+    return 0;\n \n   cfg_layout_initialize (0);\n \n@@ -2083,6 +2083,7 @@ duplicate_computed_gotos (void)\n   cfg_layout_finalize ();\n \n   BITMAP_FREE (candidates);\n+  return 0;\n }\n \n struct tree_opt_pass pass_duplicate_computed_gotos =\n@@ -2201,7 +2202,7 @@ gate_handle_reorder_blocks (void)\n \n \n /* Reorder basic blocks.  */\n-static void\n+static unsigned int\n rest_of_handle_reorder_blocks (void)\n {\n   bool changed;\n@@ -2234,6 +2235,7 @@ rest_of_handle_reorder_blocks (void)\n \n   /* Add NOTE_INSN_SWITCH_TEXT_SECTIONS notes.  */\n   insert_section_boundary_note ();\n+  return 0;\n }\n \n struct tree_opt_pass pass_reorder_blocks =\n@@ -2267,7 +2269,7 @@ gate_handle_partition_blocks (void)\n }\n \n /* Partition hot and cold basic blocks.  */\n-static void\n+static unsigned int\n rest_of_handle_partition_blocks (void)\n {\n   no_new_pseudos = 0;\n@@ -2276,6 +2278,7 @@ rest_of_handle_partition_blocks (void)\n   update_life_info (NULL, UPDATE_LIFE_GLOBAL_RM_NOTES,\n                     PROP_LOG_LINKS | PROP_REG_INFO | PROP_DEATH_NOTES);\n   no_new_pseudos = 1;\n+  return 0;\n }\n \n struct tree_opt_pass pass_partition_blocks ="}, {"sha": "853155526f7dafb257f7230d7bfb2c840918a723", "filename": "gcc/bt-load.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fbt-load.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fbt-load.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbt-load.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -1489,7 +1489,7 @@ gate_handle_branch_target_load_optimize (void)\n }\n \n \n-static void\n+static unsigned int\n rest_of_handle_branch_target_load_optimize (void)\n {\n   static int warned = 0;\n@@ -1508,6 +1508,7 @@ rest_of_handle_branch_target_load_optimize (void)\n     }\n \n   branch_target_load_optimize (epilogue_completed);\n+  return 0;\n }\n \n struct tree_opt_pass pass_branch_target_load_optimize ="}, {"sha": "2dd4ff2bbcf9ce45c248b9a0eccd21ddb2d0e837", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -2268,13 +2268,14 @@ cleanup_cfg (int mode)\n   return changed;\n }\n \f\n-static void\n+static unsigned int\n rest_of_handle_jump (void)\n {\n   delete_unreachable_blocks ();\n \n   if (cfun->tail_call_emit)\n     fixup_tail_calls ();\n+  return 0;\n }\n \n struct tree_opt_pass pass_jump =\n@@ -2296,7 +2297,7 @@ struct tree_opt_pass pass_jump =\n };\n \n \n-static void\n+static unsigned int\n rest_of_handle_jump2 (void)\n {\n   /* Turn NOTE_INSN_EXPECTED_VALUE into REG_BR_PROB.  Do this\n@@ -2324,6 +2325,7 @@ rest_of_handle_jump2 (void)\n      maximum instruction UID, so if we can reduce the maximum UID\n      we'll save big on memory.  */\n   renumber_insns ();\n+  return 0;\n }\n \n "}, {"sha": "65ebdb71fcc7e66048f095bec83d7b11f9e5d497", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -1572,7 +1572,7 @@ discover_nonconstant_array_refs (void)\n    confuse the CFG hooks, so be careful to not manipulate CFG during\n    the expansion.  */\n \n-static void\n+static unsigned int\n tree_expand_cfg (void)\n {\n   basic_block bb, init_block;\n@@ -1685,6 +1685,7 @@ tree_expand_cfg (void)\n   /* After expanding, the return labels are no longer needed. */\n   return_label = NULL;\n   naked_return_label = NULL;\n+  return 0;\n }\n \n struct tree_opt_pass pass_expand ="}, {"sha": "bcdeb96c1309a95667a0289378118ca5b3f353d5", "filename": "gcc/cfglayout.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fcfglayout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fcfglayout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfglayout.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -246,7 +246,7 @@ int epilogue_locator;\n    represented via INSN_NOTEs.  Replace them by representation using\n    INSN_LOCATORs.  */\n \n-void\n+unsigned int\n insn_locators_initialize (void)\n {\n   tree block = NULL;\n@@ -329,6 +329,7 @@ insn_locators_initialize (void)\n   set_block_levels (DECL_INITIAL (cfun->decl), 0);\n \n   free_block_changes ();\n+  return 0;\n }\n \n struct tree_opt_pass pass_insn_locators_initialize ="}, {"sha": "4bc1e6759c8d98c029117d62ac6f2350ac813ee5", "filename": "gcc/cfglayout.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fcfglayout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fcfglayout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfglayout.h?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -27,7 +27,7 @@ extern rtx cfg_layout_function_footer;\n \n extern void cfg_layout_initialize (unsigned int);\n extern void cfg_layout_finalize (void);\n-extern void insn_locators_initialize (void);\n+extern unsigned int insn_locators_initialize (void);\n extern void reemit_insn_block_notes (void);\n extern bool can_copy_bbs_p (basic_block *, unsigned);\n extern void copy_bbs (basic_block *, unsigned, basic_block *,"}, {"sha": "f8de04bb0581d1bd327004e55c903e9234ae11b6", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -414,13 +414,14 @@ compute_bb_for_insn (void)\n \n /* Release the basic_block_for_insn array.  */\n \n-void\n+unsigned int\n free_bb_for_insn (void)\n {\n   rtx insn;\n   for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n     if (!BARRIER_P (insn))\n       BLOCK_FOR_INSN (insn) = NULL;\n+  return 0;\n }\n \n struct tree_opt_pass pass_free_cfg ="}, {"sha": "f6540c02b02e492f1303dcdff21aa65ce948ff71", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -618,7 +618,7 @@ initialize_inline_failed (struct cgraph_node *node)\n \n /* Rebuild call edges from current function after a passes not aware\n    of cgraph updating.  */\n-static void\n+static unsigned int\n rebuild_cgraph_edges (void)\n {\n   basic_block bb;\n@@ -643,6 +643,7 @@ rebuild_cgraph_edges (void)\n       }\n   initialize_inline_failed (node);\n   gcc_assert (!node->global.inlined_to);\n+  return 0;\n }\n \n struct tree_opt_pass pass_rebuild_cgraph_edges ="}, {"sha": "b7199addbd4fc92688e950463ed2b710b405a441", "filename": "gcc/combine.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -12578,7 +12578,7 @@ gate_handle_combine (void)\n }\n \n /* Try combining insns through substitution.  */\n-static void\n+static unsigned int\n rest_of_handle_combine (void)\n {\n   int rebuild_jump_labels_after_combine\n@@ -12596,6 +12596,7 @@ rest_of_handle_combine (void)\n       delete_dead_jumptables ();\n       cleanup_cfg (CLEANUP_EXPENSIVE | CLEANUP_UPDATE_LIFE);\n     }\n+  return 0;\n }\n \n struct tree_opt_pass pass_combine ="}, {"sha": "681e94160213345fcda2eefe1238884f9beb97af", "filename": "gcc/cse.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -7838,7 +7838,7 @@ gate_handle_cse (void)\n   return optimize > 0;\n }\n \n-static void\n+static unsigned int\n rest_of_handle_cse (void)\n {\n   int tem;\n@@ -7865,6 +7865,7 @@ rest_of_handle_cse (void)\n \n   if (tem || optimize > 1)\n     cleanup_cfg (CLEANUP_EXPENSIVE | CLEANUP_PRE_LOOP);\n+  return 0;\n }\n \n struct tree_opt_pass pass_cse =\n@@ -7893,7 +7894,7 @@ gate_handle_cse2 (void)\n }\n \n /* Run second CSE pass after loop optimizations.  */\n-static void\n+static unsigned int\n rest_of_handle_cse2 (void)\n {\n   int tem;\n@@ -7922,6 +7923,7 @@ rest_of_handle_cse2 (void)\n     }\n   reg_scan (get_insns (), max_reg_num ());\n   cse_not_expected = 1;\n+  return 0;\n }\n \n "}, {"sha": "06721c6c4677f82c3c95a47fd294c3fe45eb770b", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -2142,10 +2142,11 @@ unshare_all_rtl_again (rtx insn)\n   unshare_all_rtl_1 (cfun->decl, insn);\n }\n \n-void\n+unsigned int\n unshare_all_rtl (void)\n {\n   unshare_all_rtl_1 (current_function_decl, get_insns ());\n+  return 0;\n }\n \n struct tree_opt_pass pass_unshare_all_rtl =\n@@ -3678,7 +3679,7 @@ find_line_note (rtx insn)\n \n /* Remove unnecessary notes from the instruction stream.  */\n \n-void\n+unsigned int\n remove_unnecessary_notes (void)\n {\n   rtx eh_stack = NULL_RTX;\n@@ -3730,6 +3731,7 @@ remove_unnecessary_notes (void)\n \n   /* Too many EH_REGION_BEG notes.  */\n   gcc_assert (!eh_stack);\n+  return 0;\n }\n \n struct tree_opt_pass pass_remove_unnecessary_notes ="}, {"sha": "90a75adeb7dfffff1d685124ce468018040f3abc", "filename": "gcc/except.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -2694,7 +2694,7 @@ can_throw_external (rtx insn)\n \n /* Set TREE_NOTHROW and cfun->all_throwers_are_sibcalls.  */\n \n-void\n+unsigned int\n set_nothrow_function_flags (void)\n {\n   rtx insn;\n@@ -2710,7 +2710,7 @@ set_nothrow_function_flags (void)\n   cfun->all_throwers_are_sibcalls = 1;\n \n   if (! flag_exceptions)\n-    return;\n+    return 0;\n \n   for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n     if (can_throw_external (insn))\n@@ -2720,7 +2720,7 @@ set_nothrow_function_flags (void)\n \tif (!CALL_P (insn) || !SIBLING_CALL_P (insn))\n \t  {\n \t    cfun->all_throwers_are_sibcalls = 0;\n-\t    return;\n+\t    return 0;\n \t  }\n       }\n \n@@ -2733,9 +2733,10 @@ set_nothrow_function_flags (void)\n \tif (!CALL_P (insn) || !SIBLING_CALL_P (insn))\n \t  {\n \t    cfun->all_throwers_are_sibcalls = 0;\n-\t    return;\n+\t    return 0;\n \t  }\n       }\n+  return 0;\n }\n \n struct tree_opt_pass pass_set_nothrow_function_flags =\n@@ -3141,7 +3142,7 @@ add_call_site (rtx landing_pad, int action)\n    The new note numbers will not refer to region numbers, but\n    instead to call site entries.  */\n \n-void\n+unsigned int\n convert_to_eh_region_ranges (void)\n {\n   rtx insn, iter, note;\n@@ -3153,7 +3154,7 @@ convert_to_eh_region_ranges (void)\n   int call_site = 0;\n \n   if (USING_SJLJ_EXCEPTIONS || cfun->eh->region_tree == NULL)\n-    return;\n+    return 0;\n \n   VARRAY_UCHAR_INIT (cfun->eh->action_record_data, 64, \"action_record_data\");\n \n@@ -3262,6 +3263,7 @@ convert_to_eh_region_ranges (void)\n     }\n \n   htab_delete (ar_hash);\n+  return 0;\n }\n \n struct tree_opt_pass pass_convert_to_eh_region_ranges =\n@@ -3858,12 +3860,13 @@ gate_handle_eh (void)\n }\n \n /* Complete generation of exception handling code.  */\n-static void\n+static unsigned int\n rest_of_handle_eh (void)\n {\n   cleanup_cfg (CLEANUP_PRE_LOOP | CLEANUP_NO_INSN_DEL);\n   finish_eh_generation ();\n   cleanup_cfg (CLEANUP_PRE_LOOP | CLEANUP_NO_INSN_DEL);\n+  return 0;\n }\n \n struct tree_opt_pass pass_rtl_eh ="}, {"sha": "46914d4205ce3bdf64ef4e774c62694e24ae9f8f", "filename": "gcc/except.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.h?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -52,7 +52,7 @@ extern bool can_throw_external_1 (int, bool);\n extern bool can_throw_external (rtx);\n \n /* Set TREE_NOTHROW and cfun->all_throwers_are_sibcalls.  */\n-extern void set_nothrow_function_flags (void);\n+extern unsigned int set_nothrow_function_flags (void);\n \n /* After initial rtl generation, call back to finish generating\n    exception support code.  */\n@@ -65,7 +65,7 @@ extern rtx reachable_handlers (rtx);\n extern void maybe_remove_eh_handler (rtx);\n \n extern void convert_from_eh_region_ranges (void);\n-extern void convert_to_eh_region_ranges (void);\n+extern unsigned int convert_to_eh_region_ranges (void);\n extern void find_exception_handler_labels (void);\n extern bool current_function_has_exception_handlers (void);\n extern void output_function_exception_table (void);"}, {"sha": "04596646b3eda6098919e6369ff7f5f445e4bf5a", "filename": "gcc/final.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -679,7 +679,7 @@ insn_current_reference_address (rtx branch)\n /* Compute branch alignments based on frequency information in the\n    CFG.  */\n \n-static void\n+static unsigned int\n compute_alignments (void)\n {\n   int log, max_skip, max_log;\n@@ -697,7 +697,7 @@ compute_alignments (void)\n \n   /* If not optimizing or optimizing for size, don't assign any alignments.  */\n   if (! optimize || optimize_size)\n-    return;\n+    return 0;\n \n   FOR_EACH_BB (bb)\n     {\n@@ -760,6 +760,7 @@ compute_alignments (void)\n       LABEL_TO_ALIGNMENT (label) = max_log;\n       LABEL_TO_MAX_SKIP (label) = max_skip;\n     }\n+  return 0;\n }\n \n struct tree_opt_pass pass_compute_alignments =\n@@ -3903,7 +3904,7 @@ debug_free_queue (void)\n }\n \f\n /* Turn the RTL into assembly.  */\n-static void\n+static unsigned int\n rest_of_handle_final (void)\n {\n   rtx x;\n@@ -3958,6 +3959,7 @@ rest_of_handle_final (void)\n   timevar_push (TV_SYMOUT);\n   (*debug_hooks->function_decl) (current_function_decl);\n   timevar_pop (TV_SYMOUT);\n+  return 0;\n }\n \n struct tree_opt_pass pass_final =\n@@ -3978,11 +3980,12 @@ struct tree_opt_pass pass_final =\n };\n \n \n-static void\n+static unsigned int\n rest_of_handle_shorten_branches (void)\n {\n   /* Shorten branches.  */\n   shorten_branches (get_insns ());\n+  return 0;\n }\n  \n struct tree_opt_pass pass_shorten_branches =\n@@ -4003,7 +4006,7 @@ struct tree_opt_pass pass_shorten_branches =\n };\n \n \n-static void\n+static unsigned int\n rest_of_clean_state (void)\n {\n   rtx insn, next;\n@@ -4065,6 +4068,7 @@ rest_of_clean_state (void)\n   /* We're done with this function.  Free up memory if we can.  */\n   free_after_parsing (cfun);\n   free_after_compilation (cfun);\n+  return 0;\n }\n \n struct tree_opt_pass pass_clean_state ="}, {"sha": "ff03ca6fc2afa3e99cab6a0e95c3a64f8459a2fa", "filename": "gcc/flow.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -4409,7 +4409,7 @@ debug_regset (regset r)\n    It might be worthwhile to update REG_LIVE_LENGTH, REG_BASIC_BLOCK and\n    possibly other information which is used by the register allocators.  */\n \n-void\n+unsigned int\n recompute_reg_usage (void)\n {\n   allocate_reg_life_data ();\n@@ -4421,6 +4421,7 @@ recompute_reg_usage (void)\n \n   if (dump_file)\n     dump_flow_info (dump_file, dump_flags);\n+  return 0;\n }\n \n struct tree_opt_pass pass_recompute_reg_usage =\n@@ -4608,10 +4609,11 @@ gate_remove_death_notes (void)\n   return flag_profile_values;\n }\n \n-static void\n+static unsigned int\n rest_of_handle_remove_death_notes (void)\n {\n   count_or_remove_death_notes (NULL, 1);\n+  return 0;\n }\n \n struct tree_opt_pass pass_remove_death_notes =\n@@ -4632,7 +4634,7 @@ struct tree_opt_pass pass_remove_death_notes =\n };\n \n /* Perform life analysis.  */\n-static void\n+static unsigned int\n rest_of_handle_life (void)\n {\n   regclass_init ();\n@@ -4661,6 +4663,7 @@ rest_of_handle_life (void)\n     }\n \n   no_new_pseudos = 1;\n+  return 0;\n }\n \n struct tree_opt_pass pass_life =\n@@ -4681,7 +4684,7 @@ struct tree_opt_pass pass_life =\n   'f'                                   /* letter */\n };\n \n-static void\n+static unsigned int\n rest_of_handle_flow2 (void)\n {\n   /* If optimizing, then go ahead and split insns now.  */\n@@ -4703,6 +4706,7 @@ rest_of_handle_flow2 (void)\n   thread_prologue_and_epilogue_insns (get_insns ());\n   epilogue_completed = 1;\n   flow2_completed = 1;\n+  return 0;\n }\n \n struct tree_opt_pass pass_flow2 ="}, {"sha": "9283b50d8418b2444ccf69eefded3ca233c5a118", "filename": "gcc/function.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -1665,7 +1665,7 @@ instantiate_decls (tree fndecl)\n /* Pass through the INSNS of function FNDECL and convert virtual register\n    references to hard register references.  */\n \n-static void\n+static unsigned int\n instantiate_virtual_regs (void)\n {\n   rtx insn;\n@@ -1717,6 +1717,7 @@ instantiate_virtual_regs (void)\n   /* Indicate that, from now on, assign_stack_local should use\n      frame_pointer_rtx.  */\n   virtuals_instantiated = 1;\n+  return 0;\n }\n \n struct tree_opt_pass pass_instantiate_virtual_regs =\n@@ -3934,7 +3935,7 @@ init_function_start (tree subr)\n \n /* Make sure all values used by the optimization passes have sane\n    defaults.  */\n-void\n+unsigned int\n init_function_for_compilation (void)\n {\n   reg_renumber = 0;\n@@ -3944,6 +3945,7 @@ init_function_for_compilation (void)\n   gcc_assert (VEC_length (int, prologue) == 0);\n   gcc_assert (VEC_length (int, epilogue) == 0);\n   gcc_assert (VEC_length (int, sibcall_epilogue) == 0);\n+  return 0;\n }\n \n struct tree_opt_pass pass_init_function =\n@@ -5568,13 +5570,14 @@ current_function_name (void)\n }\n \f\n \n-static void\n+static unsigned int\n rest_of_handle_check_leaf_regs (void)\n {\n #ifdef LEAF_REGISTERS\n   current_function_uses_only_leaf_regs\n     = optimize > 0 && only_leaf_regs_used () && leaf_function_p ();\n #endif\n+  return 0;\n }\n \n struct tree_opt_pass pass_leaf_regs ="}, {"sha": "a3ec8c0cbedf26203bfb20755aea5ea48450e490", "filename": "gcc/gcse.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -6621,7 +6621,7 @@ gate_handle_jump_bypass (void)\n }\n \n /* Perform jump bypassing and control flow optimizations.  */\n-static void\n+static unsigned int\n rest_of_handle_jump_bypass (void)\n {\n   cleanup_cfg (CLEANUP_EXPENSIVE);\n@@ -6633,6 +6633,7 @@ rest_of_handle_jump_bypass (void)\n       cleanup_cfg (CLEANUP_EXPENSIVE);\n       delete_trivially_dead_insns (get_insns (), max_reg_num ());\n     }\n+  return 0;\n }\n \n struct tree_opt_pass pass_jump_bypass =\n@@ -6661,7 +6662,7 @@ gate_handle_gcse (void)\n }\n \n \n-static void\n+static unsigned int\n rest_of_handle_gcse (void)\n {\n   int save_csb, save_cfj;\n@@ -6701,6 +6702,7 @@ rest_of_handle_gcse (void)\n \n   flag_cse_skip_blocks = save_csb;\n   flag_cse_follow_jumps = save_cfj;\n+  return 0;\n }\n \n struct tree_opt_pass pass_gcse ="}, {"sha": "6de2b8f185550bf294a0e55efaf7093e6076d525", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -58,7 +58,7 @@ static void lower_return_expr (tree_stmt_iterator *, struct lower_data *);\n \n /* Lowers the body of current_function_decl.  */\n \n-static void\n+static unsigned int\n lower_function_body (void)\n {\n   struct lower_data data;\n@@ -118,6 +118,7 @@ lower_function_body (void)\n     = blocks_nreverse (BLOCK_SUBBLOCKS (data.block));\n \n   clear_block_marks (data.block);\n+  return 0;\n }\n \n struct tree_opt_pass pass_lower_cf = \n@@ -610,10 +611,11 @@ mark_blocks_with_used_vars (tree block)\n \n /* Mark the used attribute on blocks correctly.  */\n   \n-static void\n+static unsigned int\n mark_used_blocks (void)\n {  \n   mark_blocks_with_used_vars (DECL_INITIAL (current_function_decl));\n+  return 0;\n }\n \n "}, {"sha": "0642a708d04966a93ef7f8fbf7ebc9caa776ac3d", "filename": "gcc/global.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -2499,7 +2499,7 @@ make_accurate_live_analysis (void)\n }\n /* Run old register allocator.  Return TRUE if we must exit\n    rest_of_compilation upon return.  */\n-static void\n+static unsigned int\n rest_of_handle_global_alloc (void)\n {\n   bool failure;\n@@ -2524,6 +2524,7 @@ rest_of_handle_global_alloc (void)\n \n   gcc_assert (reload_completed || failure);\n   reload_completed = !failure;\n+  return 0;\n }\n \n struct tree_opt_pass pass_global_alloc ="}, {"sha": "23a9b3c7c36ae9e5d969650ee65f61f53bd3ed33", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -3896,7 +3896,7 @@ gate_handle_if_conversion (void)\n }\n \n /* If-conversion and CFG cleanup.  */\n-static void\n+static unsigned int\n rest_of_handle_if_conversion (void)\n {\n   if (flag_if_conversion)\n@@ -3912,6 +3912,7 @@ rest_of_handle_if_conversion (void)\n   cleanup_cfg (CLEANUP_EXPENSIVE);\n   reg_scan (get_insns (), max_reg_num ());\n   timevar_pop (TV_JUMP);\n+  return 0;\n }\n \n struct tree_opt_pass pass_rtl_ifcvt =\n@@ -3940,12 +3941,13 @@ gate_handle_if_after_combine (void)\n \n /* Rerun if-conversion, as combine may have simplified things enough\n    to now meet sequence length restrictions.  */\n-static void\n+static unsigned int\n rest_of_handle_if_after_combine (void)\n {\n   no_new_pseudos = 0;\n   if_convert (1);\n   no_new_pseudos = 1;\n+  return 0;\n }\n \n struct tree_opt_pass pass_if_after_combine =\n@@ -3973,7 +3975,7 @@ gate_handle_if_after_reload (void)\n   return (optimize > 0);\n }\n \n-static void\n+static unsigned int\n rest_of_handle_if_after_reload (void)\n {\n   /* Last attempt to optimize CFG, as scheduling, peepholing and insn\n@@ -3983,6 +3985,7 @@ rest_of_handle_if_after_reload (void)\n                | (flag_crossjumping ? CLEANUP_CROSSJUMP : 0));\n   if (flag_if_conversion2)\n     if_convert (1);\n+  return 0;\n }\n \n "}, {"sha": "98769354ddff8d8ff7d2d63858c2956ce225617f", "filename": "gcc/integrate.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -278,15 +278,15 @@ has_hard_reg_initial_val (enum machine_mode mode, unsigned int regno)\n   return NULL_RTX;\n }\n \n-void\n+unsigned int\n emit_initial_value_sets (void)\n {\n   struct initial_value_struct *ivs = cfun->hard_reg_initial_vals;\n   int i;\n   rtx seq;\n \n   if (ivs == 0)\n-    return;\n+    return 0;\n \n   start_sequence ();\n   for (i = 0; i < ivs->num_entries; i++)\n@@ -295,6 +295,7 @@ emit_initial_value_sets (void)\n   end_sequence ();\n \n   emit_insn_after (seq, entry_of_function ());\n+  return 0;\n }\n \n struct tree_opt_pass pass_initial_value_sets ="}, {"sha": "2c9009811d3209c6f12ec051fd8a5df2b71e353e", "filename": "gcc/integrate.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fintegrate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fintegrate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.h?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -27,7 +27,7 @@ extern rtx has_hard_reg_initial_val (enum machine_mode, unsigned int);\n    it, else return NULL_RTX.  */\n extern rtx get_hard_reg_initial_reg (struct function *, rtx);\n /* Called from rest_of_compilation.  */\n-extern void emit_initial_value_sets (void);\n+extern unsigned int emit_initial_value_sets (void);\n extern void allocate_initial_values (rtx *);\n \n /* Check whether there's any attribute in a function declaration that"}, {"sha": "898d95e82124ed73e50a61af4dbad3a31f8772c1", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -1079,7 +1079,7 @@ ipcp_insert_stage (void)\n }\n \n /* The IPCP driver.  */\n-void\n+unsigned int\n ipcp_driver (void)\n {\n   if (dump_file)\n@@ -1117,6 +1117,7 @@ ipcp_driver (void)\n   if (dump_file)\n     fprintf (dump_file, \"\\nIPA constant propagation end\\n\");\n   cgraph_remove_unreachable_nodes (true, NULL);\n+  return 0;\n }\n \n /* Gate for IPCP optimization.  */"}, {"sha": "9ba2f109b3c36d1f2288168f6e00d140e36b6063", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -863,7 +863,7 @@ cgraph_decide_inlining_of_small_functions (void)\n /* Decide on the inlining.  We do so in the topological order to avoid\n    expenses on updating data structures.  */\n \n-static void\n+static unsigned int\n cgraph_decide_inlining (void)\n {\n   struct cgraph_node *node;\n@@ -1034,6 +1034,7 @@ cgraph_decide_inlining (void)\n \t     overall_insns);\n   free (order);\n   timevar_pop (TV_INLINE_HEURISTICS);\n+  return 0;\n }\n \n /* Decide on the inlining.  We do so in the topological order to avoid\n@@ -1132,7 +1133,7 @@ struct tree_opt_pass pass_ipa_inline =\n /* Do inlining of small functions.  Doing so early helps profiling and other\n    passes to be somewhat more effective and avoids some code duplication in\n    later real inlining pass for testcases with very many function calls.  */\n-static void\n+static unsigned int\n cgraph_early_inlining (void)\n {\n   struct cgraph_node *node;\n@@ -1142,7 +1143,7 @@ cgraph_early_inlining (void)\n   int i;\n \n   if (sorrycount || errorcount)\n-    return;\n+    return 0;\n #ifdef ENABLE_CHECKING\n   for (node = cgraph_nodes; node; node = node->next)\n     gcc_assert (!node->aux);\n@@ -1163,6 +1164,7 @@ cgraph_early_inlining (void)\n     gcc_assert (!node->global.inlined_to);\n #endif\n   free (order);\n+  return 0;\n }\n \n /* When inlining shall be performed.  */"}, {"sha": "b5c5f2deaa0a8582ff4b525bfbeeeea9f09fa50b", "filename": "gcc/ipa-prop.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fipa-prop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fipa-prop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.h?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -199,6 +199,6 @@ void ipa_nodes_free (void);\n void ipa_method_tree_print (FILE *);\n void ipa_method_modify_print (FILE *);\n \n-void ipcp_driver (void);\n+unsigned int ipcp_driver (void);\n \n #endif /* IPA_PROP_H */"}, {"sha": "079af5e12e2e7e8b42088c613b2f90045ec07011", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -572,7 +572,7 @@ analyze_function (struct cgraph_node *fn)\n    on the local information that was produced by ipa_analyze_function\n    and ipa_analyze_variable.  */\n \n-static void\n+static unsigned int\n static_execute (void)\n {\n   struct cgraph_node *node;\n@@ -703,6 +703,7 @@ static_execute (void)\n       }\n \n   free (order);\n+  return 0;\n }\n \n static bool"}, {"sha": "077aa18d72377ae476a7c919105d8381a5e032e1", "filename": "gcc/ipa-reference.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fipa-reference.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fipa-reference.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-reference.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -888,7 +888,7 @@ clean_function (struct cgraph_node *fn)\n    on the local information that was produced by ipa_analyze_function\n    and ipa_analyze_variable.  */\n \n-static void\n+static unsigned int\n static_execute (void)\n {\n   struct cgraph_node *node;\n@@ -1302,6 +1302,7 @@ static_execute (void)\n \t  && (cgraph_function_body_availability (node) == AVAIL_OVERWRITABLE))\n \tclean_function (node);\n     }\n+  return 0;\n }\n \n "}, {"sha": "b2ee148268ed0b5c5dbafa83228e7ccb3f2d5c52", "filename": "gcc/ipa-type-escape.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fipa-type-escape.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fipa-type-escape.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-type-escape.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -1670,7 +1670,7 @@ close_addressof_down (int uid)\n \f\n /* The main entry point for type escape analysis.  */\n \n-static void\n+static unsigned int\n type_escape_execute (void)\n {\n   struct cgraph_node *node;\n@@ -1817,6 +1817,7 @@ type_escape_execute (void)\n   BITMAP_FREE (been_there_done_that);\n   BITMAP_FREE (bitmap_tmp);\n   BITMAP_FREE (results_of_malloc);\n+  return 0;\n }\n \n static bool"}, {"sha": "38d1146ff2260713ff8319ce6a87dc0b203ef459", "filename": "gcc/jump.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -104,7 +104,7 @@ rebuild_jump_labels (rtx f)\n    This simple pass moves barriers and removes duplicates so that the\n    old code is happy.\n  */\n-void\n+unsigned int\n cleanup_barriers (void)\n {\n   rtx insn, next, prev;\n@@ -120,6 +120,7 @@ cleanup_barriers (void)\n \t    reorder_insns (insn, insn, prev);\n \t}\n     }\n+  return 0;\n }\n \n struct tree_opt_pass pass_cleanup_barriers =\n@@ -139,7 +140,7 @@ struct tree_opt_pass pass_cleanup_barriers =\n   0                                     /* letter */\n };\n \n-void\n+unsigned int\n purge_line_number_notes (void)\n {\n   rtx last_note = 0;\n@@ -175,6 +176,7 @@ purge_line_number_notes (void)\n \t    last_note = insn;\n \t  }\n       }\n+  return 0;\n }\n \n struct tree_opt_pass pass_purge_lineno_notes ="}, {"sha": "f751c0fc31f3d21cfb3be237bd46b21ddfcfe37b", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -2523,7 +2523,7 @@ dump_local_alloc (FILE *file)\n \n /* Run old register allocator.  Return TRUE if we must exit\n    rest_of_compilation upon return.  */\n-static void\n+static unsigned int\n rest_of_handle_local_alloc (void)\n {\n   int rebuild_notes;\n@@ -2566,6 +2566,7 @@ rest_of_handle_local_alloc (void)\n       dump_local_alloc (dump_file);\n       timevar_pop (TV_DUMP);\n     }\n+  return 0;\n }\n \n struct tree_opt_pass pass_local_alloc ="}, {"sha": "d2c63404516a10e61602c6f38906559bf971c9b0", "filename": "gcc/loop-init.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Floop-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Floop-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-init.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -164,7 +164,7 @@ struct tree_opt_pass pass_loop2 =\n \n \f\n /* Initialization of the RTL loop passes.  */\n-static void\n+static unsigned int\n rtl_loop_init (void)\n {\n   if (dump_file)\n@@ -174,6 +174,7 @@ rtl_loop_init (void)\n   cfg_layout_initialize (0);\n \n   current_loops = loop_optimizer_init (LOOPS_NORMAL);\n+  return 0;\n }\n \n struct tree_opt_pass pass_rtl_loop_init =\n@@ -195,7 +196,7 @@ struct tree_opt_pass pass_rtl_loop_init =\n \n \f\n /* Finalization of the RTL loop passes.  */\n-static void\n+static unsigned int\n rtl_loop_done (void)\n {\n   basic_block bb;\n@@ -218,6 +219,7 @@ rtl_loop_done (void)\n     dump_flow_info (dump_file, dump_flags);\n \n   current_loops = NULL;\n+  return 0;\n }\n \n struct tree_opt_pass pass_rtl_loop_done =\n@@ -245,11 +247,12 @@ gate_rtl_move_loop_invariants (void)\n   return flag_move_loop_invariants;\n }\n \n-static void\n+static unsigned int\n rtl_move_loop_invariants (void)\n {\n   if (current_loops)\n     move_loop_invariants (current_loops);\n+  return 0;\n }\n \n struct tree_opt_pass pass_rtl_move_loop_invariants =\n@@ -277,11 +280,12 @@ gate_rtl_unswitch (void)\n   return flag_unswitch_loops;\n }\n \n-static void\n+static unsigned int\n rtl_unswitch (void)\n {\n   if (current_loops)\n     unswitch_loops (current_loops);\n+  return 0;\n }\n \n struct tree_opt_pass pass_rtl_unswitch =\n@@ -309,7 +313,7 @@ gate_rtl_unroll_and_peel_loops (void)\n   return (flag_peel_loops || flag_unroll_loops || flag_unroll_all_loops);\n }\n \n-static void\n+static unsigned int\n rtl_unroll_and_peel_loops (void)\n {\n   if (current_loops)\n@@ -325,6 +329,7 @@ rtl_unroll_and_peel_loops (void)\n \n       unroll_and_peel_loops (current_loops, flags);\n     }\n+  return 0;\n }\n \n struct tree_opt_pass pass_rtl_unroll_and_peel_loops =\n@@ -356,13 +361,14 @@ gate_rtl_doloop (void)\n #endif\n }\n \n-static void\n+static unsigned int\n rtl_doloop (void)\n {\n #ifdef HAVE_doloop_end\n   if (current_loops)\n     doloop_optimize_loops (current_loops);\n #endif\n+  return 0;\n }\n \n struct tree_opt_pass pass_rtl_doloop ="}, {"sha": "0d485dd0a1e0ba90d4d290f028b341072487b2ae", "filename": "gcc/mode-switching.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fmode-switching.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fmode-switching.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmode-switching.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -735,14 +735,15 @@ gate_mode_switching (void)\n #endif\n }\n \n-static void\n+static unsigned int\n rest_of_handle_mode_switching (void)\n {\n #ifdef OPTIMIZE_MODE_SWITCHING\n   no_new_pseudos = 0;\n   optimize_mode_switching ();\n   no_new_pseudos = 1;\n #endif /* OPTIMIZE_MODE_SWITCHING */\n+  return 0;\n }\n \n "}, {"sha": "ee1a23641b5d513b518b465548bf6426fdf0bb75", "filename": "gcc/modulo-sched.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fmodulo-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fmodulo-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -2500,7 +2500,7 @@ gate_handle_sms (void)\n \n /* Run instruction scheduler.  */\n /* Perform SMS module scheduling.  */\n-static void\n+static unsigned int\n rest_of_handle_sms (void)\n {\n #ifdef INSN_SCHEDULING\n@@ -2530,6 +2530,7 @@ rest_of_handle_sms (void)\n   cfg_layout_finalize ();\n   free_dominance_info (CDI_DOMINATORS);\n #endif /* INSN_SCHEDULING */\n+  return 0;\n }\n \n struct tree_opt_pass pass_sms ="}, {"sha": "74be1e8e8ccca02247ef0425ccd08b841a9d98a5", "filename": "gcc/omp-low.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -3331,7 +3331,7 @@ build_omp_regions (void)\n \n /* Main entry point for expanding OMP-GIMPLE into runtime calls.  */\n \n-static void\n+static unsigned int\n execute_expand_omp (void)\n {\n   build_omp_regions ();\n@@ -3350,6 +3350,7 @@ execute_expand_omp (void)\n       root_omp_region = NULL;\n       omp_regions = NULL;\n     }\n+  return 0;\n }\n \n static bool\n@@ -4105,7 +4106,7 @@ lower_omp (tree *stmt_p, omp_context *ctx)\n \f\n /* Main entry point.  */\n \n-static void\n+static unsigned int\n execute_lower_omp (void)\n {\n   all_contexts = splay_tree_new (splay_tree_compare_pointers, 0,\n@@ -4122,6 +4123,7 @@ execute_lower_omp (void)\n       splay_tree_delete (all_contexts);\n       all_contexts = NULL;\n     }\n+  return 0;\n }\n \n static bool"}, {"sha": "c3702ef46dedfe610ad43933efb13850e41abb68", "filename": "gcc/passes.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -807,6 +807,7 @@ static bool\n execute_one_pass (struct tree_opt_pass *pass)\n {\n   bool initializing_dump;\n+  unsigned int todo_after = 0;\n \n   /* See if we're supposed to run this pass.  */\n   if (pass->gate && !pass->gate ())\n@@ -858,7 +859,7 @@ execute_one_pass (struct tree_opt_pass *pass)\n   /* Do it!  */\n   if (pass->execute)\n     {\n-      pass->execute ();\n+      todo_after = pass->execute ();\n       last_verified = 0;\n     }\n \n@@ -880,7 +881,7 @@ execute_one_pass (struct tree_opt_pass *pass)\n     }\n \n   /* Run post-pass cleanup and verification.  */\n-  execute_todo (pass->todo_flags_finish);\n+  execute_todo (todo_after | pass->todo_flags_finish);\n \n   /* Flush and close dump file.  */\n   if (dump_file_name)"}, {"sha": "76b7b8c9ae0c54572f1138798c3f8beef5bb0390", "filename": "gcc/postreload-gcse.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fpostreload-gcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fpostreload-gcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload-gcse.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -1365,12 +1365,13 @@ gate_handle_gcse2 (void)\n }\n \n \n-static void\n+static unsigned int\n rest_of_handle_gcse2 (void)\n {\n   gcse_after_reload_main (get_insns ());\n   rebuild_jump_labels (get_insns ());\n   delete_trivially_dead_insns (get_insns (), max_reg_num ());\n+  return 0;\n }\n \n struct tree_opt_pass pass_gcse2 ="}, {"sha": "5f4ae4f5b18249c62d892b177d8e856993021888", "filename": "gcc/postreload.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fpostreload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fpostreload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -1572,7 +1572,7 @@ gate_handle_postreload (void)\n }\n \n \n-static void\n+static unsigned int\n rest_of_handle_postreload (void)\n {\n   /* Do a very simple CSE pass over just the hard registers.  */\n@@ -1581,6 +1581,7 @@ rest_of_handle_postreload (void)\n      Remove any EH edges associated with them.  */\n   if (flag_non_call_exceptions)\n     purge_all_dead_edges ();\n+  return 0;\n }\n \n struct tree_opt_pass pass_postreload_cse ="}, {"sha": "c59e57b0c5ea5eab03d08cca43b57d8aa99de740", "filename": "gcc/predict.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -1308,7 +1308,7 @@ call_expr:;\n }\n \n /* Predict branch probabilities and estimate profile of the tree CFG.  */\n-static void\n+static unsigned int\n tree_estimate_probability (void)\n {\n   basic_block bb;\n@@ -1396,6 +1396,7 @@ tree_estimate_probability (void)\n     dump_tree_cfg (dump_file, dump_flags);\n   if (profile_status == PROFILE_ABSENT)\n     profile_status = PROFILE_GUESSED;\n+  return 0;\n }\n \f\n /* __builtin_expect dropped tokens into the insn stream describing expected"}, {"sha": "7fa9aad03ef81626c478ee0342cca8abf840d5ef", "filename": "gcc/profile.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -1338,7 +1338,7 @@ tree_register_profile_hooks (void)\n \n \f\n /* Do branch profiling and static profile estimation passes.  */\n-static void\n+static unsigned int\n rest_of_handle_branch_prob (void)\n {\n   struct loops loops;\n@@ -1357,6 +1357,7 @@ rest_of_handle_branch_prob (void)\n \n   flow_loops_free (&loops);\n   free_dominance_info (CDI_DOMINATORS);\n+  return 0;\n }\n \n struct tree_opt_pass pass_branch_prob ="}, {"sha": "fde429ccf9ca25f29bb615792a9f754325f8aa0c", "filename": "gcc/recog.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -2813,7 +2813,7 @@ split_all_insns (int upd_life)\n /* Same as split_all_insns, but do not expect CFG to be available.\n    Used by machine dependent reorg passes.  */\n \n-void\n+unsigned int\n split_all_insns_noflow (void)\n {\n   rtx next, insn;\n@@ -2843,6 +2843,7 @@ split_all_insns_noflow (void)\n \t    split_insn (insn);\n \t}\n     }\n+  return 0;\n }\n \f\n #ifdef HAVE_peephole2\n@@ -3446,12 +3447,13 @@ gate_handle_peephole2 (void)\n   return (optimize > 0 && flag_peephole2);\n }\n \n-static void\n+static unsigned int\n rest_of_handle_peephole2 (void)\n {\n #ifdef HAVE_peephole2\n   peephole2_optimize ();\n #endif\n+  return 0;\n }\n \n struct tree_opt_pass pass_peephole2 =\n@@ -3471,10 +3473,11 @@ struct tree_opt_pass pass_peephole2 =\n   'z'                                   /* letter */\n };\n \n-static void\n+static unsigned int\n rest_of_handle_split_all_insns (void)\n {\n   split_all_insns (1);\n+  return 0;\n }\n \n struct tree_opt_pass pass_split_all_insns ="}, {"sha": "73c132fda220c67932937764c2a9152897cc19f3", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -3136,7 +3136,7 @@ gate_handle_stack_regs (void)\n \n /* Convert register usage from flat register file usage to a stack\n    register file.  */\n-static void\n+static unsigned int\n rest_of_handle_stack_regs (void)\n {\n #ifdef STACK_REGS\n@@ -3151,6 +3151,7 @@ rest_of_handle_stack_regs (void)\n         }\n     }\n #endif\n+  return 0;\n }\n \n struct tree_opt_pass pass_stack_regs ="}, {"sha": "31f1851a362a26034ca2966cf2ad493f8e91ad67", "filename": "gcc/regmove.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -2470,11 +2470,12 @@ gate_handle_regmove (void)\n \n /* Register allocation pre-pass, to reduce number of moves necessary\n    for two-address machines.  */\n-static void\n+static unsigned int\n rest_of_handle_regmove (void)\n {\n   regmove_optimize (get_insns (), max_reg_num ());\n   cleanup_cfg (CLEANUP_EXPENSIVE | CLEANUP_UPDATE_LIFE);\n+  return 0;\n }\n \n struct tree_opt_pass pass_regmove =\n@@ -2502,7 +2503,7 @@ gate_handle_stack_adjustments (void)\n   return (optimize > 0);\n }\n \n-static void\n+static unsigned int\n rest_of_handle_stack_adjustments (void)\n {\n   life_analysis (PROP_POSTRELOAD);\n@@ -2517,6 +2518,7 @@ rest_of_handle_stack_adjustments (void)\n   if (!ACCUMULATE_OUTGOING_ARGS)\n #endif\n     combine_stack_adjustments ();\n+  return 0;\n }\n \n struct tree_opt_pass pass_stack_adjustments ="}, {"sha": "49e18c4a7c22687fef95e8bbe7996f4ddc89ba49", "filename": "gcc/regrename.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -1953,13 +1953,14 @@ gate_handle_regrename (void)\n \n \n /* Run the regrename and cprop passes.  */\n-static void\n+static unsigned int\n rest_of_handle_regrename (void)\n {\n   if (flag_rename_registers)\n     regrename_optimize ();\n   if (flag_cprop_registers)\n     copyprop_hardreg_forward ();\n+  return 0;\n }\n \n struct tree_opt_pass pass_regrename ="}, {"sha": "7781d27606c22148bbf6c0cd531678d79756e0ec", "filename": "gcc/reorg.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -3775,12 +3775,13 @@ gate_handle_delay_slots (void)\n }\n \n /* Run delay slot optimization.  */\n-static void\n+static unsigned int\n rest_of_handle_delay_slots (void)\n {\n #ifdef DELAY_SLOTS\n   dbr_schedule (get_insns ());\n #endif\n+  return 0;\n }   \n \n struct tree_opt_pass pass_delay_slots =\n@@ -3809,10 +3810,11 @@ gate_handle_machine_reorg (void)\n }\n \n \n-static void\n+static unsigned int\n rest_of_handle_machine_reorg (void)\n {\n   targetm.machine_dependent_reorg ();\n+  return 0;\n }\n \n struct tree_opt_pass pass_machine_reorg ="}, {"sha": "0cd1aaa4dbb41f9ccadd45ebb00ab775d4550d4f", "filename": "gcc/rtl-factoring.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Frtl-factoring.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Frtl-factoring.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl-factoring.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -1414,7 +1414,7 @@ gate_rtl_seqabstr (void)\n \n /* The entry point of the sequence abstraction algorithm.  */\n \n-static void\n+static unsigned int\n rest_of_rtl_seqabstr (void)\n {\n   life_analysis (PROP_DEATH_NOTES | PROP_SCAN_DEAD_CODE | PROP_KILL_DEAD_CODE);\n@@ -1425,6 +1425,7 @@ rest_of_rtl_seqabstr (void)\n \n   /* Abstract out common insn sequences. */\n   rtl_seqabstr ();\n+  return 0;\n }\n \n struct tree_opt_pass pass_rtl_seqabstr = {"}, {"sha": "4ee188cadcef680d58e2f40d072755f841abfbb5", "filename": "gcc/rtl.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -1600,7 +1600,7 @@ extern enum rtx_code swap_condition (enum rtx_code);\n extern enum rtx_code unsigned_condition (enum rtx_code);\n extern enum rtx_code signed_condition (enum rtx_code);\n extern void mark_jump_label (rtx, rtx, int);\n-extern void cleanup_barriers (void);\n+extern unsigned int cleanup_barriers (void);\n \n /* In jump.c */\n extern bool squeeze_notes (rtx *, rtx *);\n@@ -1781,7 +1781,7 @@ extern enum reg_class reg_preferred_class (int);\n extern enum reg_class reg_alternate_class (int);\n \n extern void split_all_insns (int);\n-extern void split_all_insns_noflow (void);\n+extern unsigned int split_all_insns_noflow (void);\n \n #define MAX_SAVED_CONST_INT 64\n extern GTY(()) rtx const_int_rtx[MAX_SAVED_CONST_INT * 2 + 1];\n@@ -2027,7 +2027,7 @@ extern enum rtx_code reversed_comparison_code_parts (enum rtx_code,\n \t\t\t\t\t\t     rtx, rtx, rtx);\n extern void delete_for_peephole (rtx, rtx);\n extern int condjump_in_parallel_p (rtx);\n-extern void purge_line_number_notes (void);\n+extern unsigned int purge_line_number_notes (void);\n \n /* In emit-rtl.c.  */\n extern int max_reg_num (void);\n@@ -2049,7 +2049,7 @@ extern void init_emit_once (int);\n extern void push_topmost_sequence (void);\n extern void pop_topmost_sequence (void);\n extern void set_new_first_and_last_insn (rtx, rtx);\n-extern void unshare_all_rtl (void);\n+extern unsigned int unshare_all_rtl (void);\n extern void unshare_all_rtl_again (rtx);\n extern void unshare_all_rtl_in_chain (rtx);\n extern void verify_rtl_sharing (void);\n@@ -2063,7 +2063,7 @@ extern void remove_insn (rtx);\n extern void emit_insn_after_with_line_notes (rtx, rtx, rtx);\n extern rtx emit (rtx);\n extern void renumber_insns (void);\n-extern void remove_unnecessary_notes (void);\n+extern unsigned int remove_unnecessary_notes (void);\n extern rtx delete_insn (rtx);\n extern rtx entry_of_function (void);\n extern void delete_insn_chain (rtx, rtx);\n@@ -2133,7 +2133,7 @@ extern rtx move_by_pieces (rtx, rtx, unsigned HOST_WIDE_INT,\n \t\t\t   unsigned int, int);\n \n /* In flow.c */\n-extern void recompute_reg_usage (void);\n+extern unsigned int recompute_reg_usage (void);\n extern void delete_dead_jumptables (void);\n extern void print_rtl_with_bb (FILE *, rtx);\n extern void dump_flow_info (FILE *, int);\n@@ -2256,7 +2256,7 @@ extern bool expensive_function_p (int);\n extern void tracer (unsigned int);\n \n /* In var-tracking.c */\n-extern void variable_tracking_main (void);\n+extern unsigned int variable_tracking_main (void);\n \n /* In stor-layout.c.  */\n extern void get_mode_bounds (enum machine_mode, int, enum machine_mode,"}, {"sha": "62392403eb079357025f60aef52c446a98ac858d", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -2635,7 +2635,7 @@ gate_handle_sched (void)\n }\n \n /* Run instruction scheduler.  */\n-static void\n+static unsigned int\n rest_of_handle_sched (void)\n {\n #ifdef INSN_SCHEDULING\n@@ -2644,6 +2644,7 @@ rest_of_handle_sched (void)\n \n   schedule_insns ();\n #endif\n+  return 0;\n }\n \n static bool\n@@ -2657,7 +2658,7 @@ gate_handle_sched2 (void)\n }\n \n /* Run second scheduling pass after reload.  */\n-static void\n+static unsigned int\n rest_of_handle_sched2 (void)\n {\n #ifdef INSN_SCHEDULING\n@@ -2677,6 +2678,7 @@ rest_of_handle_sched2 (void)\n   else\n     schedule_insns ();\n #endif\n+  return 0;\n }\n \n struct tree_opt_pass pass_sched ="}, {"sha": "c7bd2bd1d6cd3c359ba2e3e1e4d55a54085c6edd", "filename": "gcc/tracer.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftracer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftracer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftracer.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -387,14 +387,15 @@ gate_handle_tracer (void)\n }\n \n /* Run tracer.  */\n-static void\n+static unsigned int\n rest_of_handle_tracer (void)\n {\n   if (dump_file)\n     dump_flow_info (dump_file, dump_flags);\n   tracer (0);\n   cleanup_cfg (CLEANUP_EXPENSIVE);\n   reg_scan (get_insns (), max_reg_num ());\n+  return 0;\n }\n \n struct tree_opt_pass pass_tracer ="}, {"sha": "1c689e2037c3d1dab0f04c8dbed56935425a55ca", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -106,7 +106,7 @@ static void make_switch_expr_edges (basic_block);\n static void make_goto_expr_edges (basic_block);\n static edge tree_redirect_edge_and_branch (edge, basic_block);\n static edge tree_try_redirect_by_replacing_jump (edge, basic_block);\n-static void split_critical_edges (void);\n+static unsigned int split_critical_edges (void);\n \n /* Various helpers.  */\n static inline bool stmt_starts_bb_p (tree, tree);\n@@ -224,10 +224,11 @@ build_tree_cfg (tree *tp)\n     dump_tree_cfg (dump_file, dump_flags);\n }\n \n-static void\n+static unsigned int\n execute_build_cfg (void)\n {\n   build_tree_cfg (&DECL_SAVED_TREE (current_function_decl));\n+  return 0;\n }\n \n struct tree_opt_pass pass_build_cfg =\n@@ -1994,7 +1995,7 @@ remove_useless_stmts_1 (tree *tp, struct rus_data *data)\n     }\n }\n \n-static void\n+static unsigned int\n remove_useless_stmts (void)\n {\n   struct rus_data data;\n@@ -2007,6 +2008,7 @@ remove_useless_stmts (void)\n       remove_useless_stmts_1 (&DECL_SAVED_TREE (current_function_decl), &data);\n     }\n   while (data.repeat);\n+  return 0;\n }\n \n \n@@ -5445,7 +5447,7 @@ struct cfg_hooks tree_cfg_hooks = {\n \n /* Split all critical edges.  */\n \n-static void\n+static unsigned int\n split_critical_edges (void)\n {\n   basic_block bb;\n@@ -5465,6 +5467,7 @@ split_critical_edges (void)\n \t  }\n     }\n   end_recording_case_labels ();\n+  return 0;\n }\n \n struct tree_opt_pass pass_split_crit_edges = \n@@ -5559,7 +5562,7 @@ gimplify_build1 (block_stmt_iterator *bsi, enum tree_code code, tree type,\n \f\n /* Emit return warnings.  */\n \n-static void\n+static unsigned int\n execute_warn_function_return (void)\n {\n #ifdef USE_MAPPED_LOCATION\n@@ -5632,6 +5635,7 @@ execute_warn_function_return (void)\n \t    }\n \t}\n     }\n+  return 0;\n }\n \n \n@@ -5678,7 +5682,7 @@ struct tree_opt_pass pass_warn_function_return =\n \n /* Emit noreturn warnings.  */\n \n-static void\n+static unsigned int\n execute_warn_function_noreturn (void)\n {\n   if (warn_missing_noreturn\n@@ -5688,6 +5692,7 @@ execute_warn_function_noreturn (void)\n     warning (OPT_Wmissing_noreturn, \"%Jfunction might be possible candidate \"\n \t     \"for attribute %<noreturn%>\",\n \t     cfun->decl);\n+  return 0;\n }\n \n struct tree_opt_pass pass_warn_function_noreturn ="}, {"sha": "57315d4c9806602bb288b2a9f235f5dd8134a77e", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -717,7 +717,7 @@ remove_forwarder_block_with_phi (basic_block bb)\n <L10>:;\n */\n \n-static void\n+static unsigned int\n merge_phi_nodes (void)\n {\n   basic_block *worklist = XNEWVEC (basic_block, n_basic_blocks);\n@@ -797,6 +797,7 @@ merge_phi_nodes (void)\n     }\n \n   free (worklist);\n+  return 0;\n }\n \n static bool"}, {"sha": "0529131301a16829aebd8ec8ae3978e55d4f9d22", "filename": "gcc/tree-complex.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-complex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-complex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-complex.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -1480,15 +1480,15 @@ expand_complex_operations_1 (block_stmt_iterator *bsi)\n \f\n /* Entry point for complex operation lowering during optimization.  */\n \n-static void\n+static unsigned int\n tree_lower_complex (void)\n {\n   int old_last_basic_block;\n   block_stmt_iterator bsi;\n   basic_block bb;\n \n   if (!init_dont_simulate_again ())\n-    return;\n+    return 0;\n \n   complex_lattice_values = VEC_alloc (complex_lattice_t, heap, num_ssa_names);\n   VEC_safe_grow (complex_lattice_t, heap,\n@@ -1525,6 +1525,7 @@ tree_lower_complex (void)\n   htab_delete (complex_variable_components);\n   VEC_free (tree, heap, complex_ssa_name_components);\n   VEC_free (complex_lattice_t, heap, complex_lattice_values);\n+  return 0;\n }\n \n struct tree_opt_pass pass_lower_complex = \n@@ -1549,7 +1550,7 @@ struct tree_opt_pass pass_lower_complex =\n \f\n /* Entry point for complex operation lowering without optimization.  */\n \n-static void\n+static unsigned int\n tree_lower_complex_O0 (void)\n {\n   int old_last_basic_block = last_basic_block;\n@@ -1563,6 +1564,7 @@ tree_lower_complex_O0 (void)\n       for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))\n \texpand_complex_operations_1 (&bsi);\n     }\n+  return 0;\n }\n \n static bool"}, {"sha": "27f51de271d08fc819f1321b8a4db2a29ea6e768", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -103,7 +103,7 @@ htab_t default_defs;\n    various attributes for each variable used by alias analysis and the\n    optimizer.  */\n \n-static void\n+static unsigned int\n find_referenced_vars (void)\n {\n   htab_t vars_found;\n@@ -123,6 +123,7 @@ find_referenced_vars (void)\n       }\n \n   htab_delete (vars_found);\n+  return 0;\n }\n \n struct tree_opt_pass pass_referenced_vars ="}, {"sha": "202073d3534ae932ef4c02e0b1127ef25f104116", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -1671,7 +1671,7 @@ lower_eh_constructs_1 (struct leh_state *state, tree *tp)\n     }\n }\n \n-static void\n+static unsigned int\n lower_eh_constructs (void)\n {\n   struct leh_state null_state;\n@@ -1687,6 +1687,7 @@ lower_eh_constructs (void)\n   htab_delete (finally_tree);\n \n   collect_eh_region_array ();\n+  return 0;\n }\n \n struct tree_opt_pass pass_lower_eh ="}, {"sha": "2a6102026efd5bd3f0d9834c2a839893fb8d25cd", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -102,7 +102,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"target.h\"\n \n /* local function prototypes */\n-static void main_tree_if_conversion (void);\n+static unsigned int main_tree_if_conversion (void);\n static tree tree_if_convert_stmt (struct loop *loop, tree, tree,\n \t\t\t\t  block_stmt_iterator *);\n static void tree_if_convert_cond_expr (struct loop *, tree, tree,\n@@ -1098,14 +1098,14 @@ bb_with_exit_edge_p (struct loop *loop, basic_block bb)\n \n /* Tree if-conversion pass management.  */\n \n-static void\n+static unsigned int\n main_tree_if_conversion (void)\n {\n   unsigned i, loop_num;\n   struct loop *loop;\n \n   if (!current_loops)\n-    return;\n+    return 0;\n \n   loop_num = current_loops->num;\n   for (i = 0; i < loop_num; i++)\n@@ -1116,7 +1116,7 @@ main_tree_if_conversion (void)\n \n       tree_if_conversion (loop, true);\n     }\n-\n+  return 0;\n }\n \n static bool"}, {"sha": "e0b6e6e16d2a0f1555dabd113688bcc9ea2375ee", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -1731,7 +1731,7 @@ mark_def_site_blocks (sbitmap interesting_blocks)\n    Steps 3 and 4 are done using the dominator tree walker\n    (walk_dominator_tree).  */\n \n-static void\n+static unsigned int\n rewrite_into_ssa (void)\n {\n   bitmap *dfs;\n@@ -1775,6 +1775,7 @@ rewrite_into_ssa (void)\n \n   timevar_pop (TV_TREE_SSA_OTHER);\n   in_ssa_p = true;\n+  return 0;\n }\n \n "}, {"sha": "5a1444d1dbab093ebe7f6aa568fea6ea3bd0883d", "filename": "gcc/tree-mudflap.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-mudflap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-mudflap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-mudflap.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -57,13 +57,13 @@ static tree mf_file_function_line_tree (location_t);\n static void mf_decl_cache_locals (void);\n static void mf_decl_clear_locals (void);\n static void mf_xform_derefs (void);\n-static void execute_mudflap_function_ops (void);\n+static unsigned int execute_mudflap_function_ops (void);\n \n /* Addressable variables instrumentation.  */\n static void mf_xform_decls (tree, tree);\n static tree mx_xfn_xform_decls (tree *, int *, void *);\n static void mx_register_decls (tree, tree *);\n-static void execute_mudflap_function_decls (void);\n+static unsigned int execute_mudflap_function_decls (void);\n \n \n /* ------------------------------------------------------------------------ */\n@@ -409,14 +409,14 @@ mudflap_init (void)\n    tree optimizations have been performed, but we have to preserve the CFG\n    for expansion from trees to RTL.  */\n \n-static void\n+static unsigned int\n execute_mudflap_function_ops (void)\n {\n   /* Don't instrument functions such as the synthetic constructor\n      built during mudflap_finish_file.  */\n   if (mf_marked_p (current_function_decl) ||\n       DECL_ARTIFICIAL (current_function_decl))\n-    return;\n+    return 0;\n \n   push_gimplify_context ();\n \n@@ -430,6 +430,7 @@ execute_mudflap_function_ops (void)\n     mf_decl_clear_locals ();\n \n   pop_gimplify_context (NULL);\n+  return 0;\n }\n \n /* Create and initialize local shadow variables for the lookup cache\n@@ -940,21 +941,22 @@ mf_xform_derefs (void)\n    of their BIND_EXPR binding context, and we lose liveness information\n    for the declarations we wish to instrument.  */\n \n-static void\n+static unsigned int\n execute_mudflap_function_decls (void)\n {\n   /* Don't instrument functions such as the synthetic constructor\n      built during mudflap_finish_file.  */\n   if (mf_marked_p (current_function_decl) ||\n       DECL_ARTIFICIAL (current_function_decl))\n-    return;\n+    return 0;\n \n   push_gimplify_context ();\n \n   mf_xform_decls (DECL_SAVED_TREE (current_function_decl),\n                   DECL_ARGUMENTS (current_function_decl));\n \n   pop_gimplify_context (NULL);\n+  return 0;\n }\n \n /* This struct is passed between mf_xform_decls to store state needed"}, {"sha": "54b964f258343a3d35fdc898884be4d30dfd7b2f", "filename": "gcc/tree-nrv.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-nrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-nrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nrv.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -101,7 +101,7 @@ finalize_nrv_r (tree *tp, int *walk_subtrees, void *data)\n    then we could either have the languages register the optimization or\n    we could change the gating function to check the current language.  */\n    \n-static void\n+static unsigned int\n tree_nrv (void)\n {\n   tree result = DECL_RESULT (current_function_decl);\n@@ -114,7 +114,7 @@ tree_nrv (void)\n   /* If this function does not return an aggregate type in memory, then\n      there is nothing to do.  */\n   if (!aggregate_value_p (result, current_function_decl))\n-    return;\n+    return 0;\n \n   /* Look through each block for assignments to the RESULT_DECL.  */\n   FOR_EACH_BB (bb)\n@@ -146,7 +146,7 @@ tree_nrv (void)\n \t\t     than previous return statements, then we can not perform\n \t\t     NRV optimizations.  */\n \t\t  if (found != ret_expr)\n-\t\t    return;\n+\t\t    return 0;\n \t\t}\n \t      else\n \t\tfound = ret_expr;\n@@ -161,13 +161,13 @@ tree_nrv (void)\n \t\t  || DECL_ALIGN (found) > DECL_ALIGN (result)\n \t\t  || !lang_hooks.types_compatible_p (TREE_TYPE (found), \n \t\t\t\t\t\t     result_type))\n-\t\treturn;\n+\t\treturn 0;\n \t    }\n \t}\n     }\n \n   if (!found)\n-    return;\n+    return 0;\n \n   /* If dumping details, then note once and only the NRV replacement.  */\n   if (dump_file && (dump_flags & TDF_DETAILS))\n@@ -211,6 +211,7 @@ tree_nrv (void)\n \n   /* FOUND is no longer used.  Ensure it gets removed.  */\n   var_ann (found)->used = 0;\n+  return 0;\n }\n \n struct tree_opt_pass pass_nrv = \n@@ -242,7 +243,7 @@ struct tree_opt_pass pass_nrv =\n    escaped prior to the call.  If it has, modifications to the local\n    variable will produce visible changes elsewhere, as in PR c++/19317.  */\n \n-static void\n+static unsigned int\n execute_return_slot_opt (void)\n {\n   basic_block bb;\n@@ -287,6 +288,7 @@ execute_return_slot_opt (void)\n \t    }\n \t}\n     }\n+  return 0;\n }\n \n struct tree_opt_pass pass_return_slot = "}, {"sha": "068bacf46454b0f2f1893c1223fcb6aa3ce908a8", "filename": "gcc/tree-object-size.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-object-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-object-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -50,7 +50,7 @@ static void expr_object_size (struct object_size_info *, tree, tree);\n static bool merge_object_sizes (struct object_size_info *, tree, tree,\n \t\t\t\tunsigned HOST_WIDE_INT);\n static bool plus_expr_object_size (struct object_size_info *, tree, tree);\n-static void compute_object_sizes (void);\n+static unsigned int compute_object_sizes (void);\n static void init_offset_limit (void);\n static void check_for_plus_in_loops (struct object_size_info *, tree);\n static void check_for_plus_in_loops_1 (struct object_size_info *, tree,\n@@ -982,7 +982,7 @@ fini_object_sizes (void)\n \n /* Simple pass to optimize all __builtin_object_size () builtins.  */\n \n-static void\n+static unsigned int\n compute_object_sizes (void)\n {\n   basic_block bb;\n@@ -1054,6 +1054,7 @@ compute_object_sizes (void)\n     }\n \n   fini_object_sizes ();\n+  return 0;\n }\n \n struct tree_opt_pass pass_object_sizes ="}, {"sha": "fdf8ca1c46bb454f04179d31779868ba9fa1b38f", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -100,10 +100,11 @@ struct tree_opt_pass pass_early_local_passes =\n    because after the tree optimizers have run such cleanups may\n    be necessary.  */\n \n-static void \n+static unsigned int\n execute_cleanup_cfg_pre_ipa (void)\n {\n   cleanup_tree_cfg ();\n+  return 0;\n }\n \n struct tree_opt_pass pass_cleanup_cfg =\n@@ -129,13 +130,14 @@ struct tree_opt_pass pass_cleanup_cfg =\n    because after the tree optimizers have run such cleanups may\n    be necessary.  */\n \n-static void \n+static unsigned int\n execute_cleanup_cfg_post_optimizing (void)\n {\n   fold_cond_expr_cond ();\n   cleanup_tree_cfg ();\n   cleanup_dead_labels ();\n   group_case_labels ();\n+  return 0;\n }\n \n struct tree_opt_pass pass_cleanup_cfg_post_optimizing =\n@@ -158,7 +160,7 @@ struct tree_opt_pass pass_cleanup_cfg_post_optimizing =\n /* Pass: do the actions required to finish with tree-ssa optimization\n    passes.  */\n \n-static void\n+static unsigned int\n execute_free_datastructures (void)\n {\n   /* ??? This isn't the right place for this.  Worse, it got computed\n@@ -169,6 +171,7 @@ execute_free_datastructures (void)\n   /* Remove the ssa structures.  Do it here since this includes statement\n      annotations that need to be intact during disband_implicit_edges.  */\n   delete_tree_ssa ();\n+  return 0;\n }\n \n struct tree_opt_pass pass_free_datastructures =\n@@ -189,7 +192,7 @@ struct tree_opt_pass pass_free_datastructures =\n };\n /* Pass: free cfg annotations.  */\n \n-static void\n+static unsigned int\n execute_free_cfg_annotations (void)\n {\n   basic_block bb;\n@@ -215,6 +218,7 @@ execute_free_cfg_annotations (void)\n      the integrity of statements in the EH throw table.  */\n   verify_eh_throw_table_statements ();\n #endif\n+  return 0;\n }\n \n struct tree_opt_pass pass_free_cfg_annotations =\n@@ -237,7 +241,7 @@ struct tree_opt_pass pass_free_cfg_annotations =\n    changed some properties - such as marked functions nothrow.  Remove now\n    redundant edges and basic blocks.  */\n \n-static void\n+static unsigned int\n execute_fixup_cfg (void)\n {\n   basic_block bb;\n@@ -260,6 +264,7 @@ execute_fixup_cfg (void)\n       }\n     \n   cleanup_tree_cfg ();\n+  return 0;\n }\n \n struct tree_opt_pass pass_fixup_cfg =\n@@ -282,11 +287,12 @@ struct tree_opt_pass pass_fixup_cfg =\n /* Do the actions required to initialize internal data structures used\n    in tree-ssa optimization passes.  */\n \n-static void\n+static unsigned int\n execute_init_datastructures (void)\n {\n   /* Allocate hash tables, arrays and other structures.  */\n   init_tree_ssa ();\n+  return 0;\n }\n \n struct tree_opt_pass pass_init_datastructures ="}, {"sha": "f2841ae00e8c8f20ed315bdc6b9d68edf4eb0f11", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -2505,7 +2505,7 @@ insert_backedge_copies (void)\n    R. Morgan, ``Building an Optimizing Compiler'',\n    Butterworth-Heinemann, Boston, MA, 1998. pp 176-186.  */\n \n-static void\n+static unsigned int\n rewrite_out_of_ssa (void)\n {\n   var_map map;\n@@ -2548,6 +2548,7 @@ rewrite_out_of_ssa (void)\n   delete_var_map (map);\n \n   in_ssa_p = false;\n+  return 0;\n }\n \n "}, {"sha": "a7c3f0062240467a5c3539431500155113ed3d08", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -97,8 +97,9 @@ struct tree_opt_pass\n   bool (*gate) (void);\n \n   /* This is the code to run.  If null, then there should be sub-passes\n-     otherwise this pass does nothing.  */\n-  void (*execute) (void);\n+     otherwise this pass does nothing.  The return value contains\n+     TODOs to execute in addition to those in TODO_flags_finish.   */\n+  unsigned int (*execute) (void);\n \n   /* A list of sub-passes to run, dependent on gate predicate.  */\n   struct tree_opt_pass *sub;"}, {"sha": "fe42309ccc7d3e0f171ddce2e43ae07eabc80782", "filename": "gcc/tree-profile.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -234,7 +234,7 @@ do_tree_profiling (void)\n   return false;\n }\n \n-static void\n+static unsigned int\n tree_profiling (void)\n {\n   branch_prob ();\n@@ -247,6 +247,7 @@ tree_profiling (void)\n      easy to adjust it, if and when there is some.  */\n   free_dominance_info (CDI_DOMINATORS);\n   free_dominance_info (CDI_POST_DOMINATORS);\n+  return 0;\n }\n \n struct tree_opt_pass pass_tree_profile = "}, {"sha": "998b6aa459f00d358401442b52ae3c22cb3ca2b5", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -2671,7 +2671,7 @@ expression_expensive_p (tree expr)\n    We only consider SSA names defined by phi nodes; rest is left to the\n    ordinary constant propagation pass.  */\n \n-void\n+unsigned int\n scev_const_prop (void)\n {\n   basic_block bb;\n@@ -2681,7 +2681,7 @@ scev_const_prop (void)\n   unsigned i;\n \n   if (!current_loops)\n-    return;\n+    return 0;\n \n   FOR_EACH_BB (bb)\n     {\n@@ -2802,4 +2802,5 @@ scev_const_prop (void)\n \t  update_stmt (ass);\n \t}\n     }\n+  return 0;\n }"}, {"sha": "4f947a852f5bf945c118545074d7655eea84bb45", "filename": "gcc/tree-scalar-evolution.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-scalar-evolution.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-scalar-evolution.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.h?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -32,7 +32,7 @@ extern tree analyze_scalar_evolution (struct loop *, tree);\n extern tree instantiate_parameters (struct loop *, tree);\n extern void gather_stats_on_scev_database (void);\n extern void scev_analysis (void);\n-void scev_const_prop (void);\n+unsigned int scev_const_prop (void);\n \n extern bool simple_iv (struct loop *, tree, tree, affine_iv *, bool);\n "}, {"sha": "0b594b945e2e465126e4a233851fa1402d537e56", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -2178,7 +2178,7 @@ sra_init_cache (void)\n \n /* Main entry point.  */\n \n-static void\n+static unsigned int\n tree_sra (void)\n {\n   /* Initialize local variables.  */\n@@ -2204,6 +2204,7 @@ tree_sra (void)\n   BITMAP_FREE (sra_type_decomp_cache);\n   BITMAP_FREE (sra_type_inst_cache);\n   obstack_free (&sra_obstack, NULL);\n+  return 0;\n }\n \n static bool"}, {"sha": "8f8fbfa04b99c18e98a82fcb936e0f1f01bed6af", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -603,7 +603,7 @@ recalculate_used_alone (void)\n    max-aliased-vops}), alias sets are grouped to avoid severe\n    compile-time slow downs and memory consumption.  See group_aliases.  */\n \n-static void\n+static unsigned int\n compute_may_aliases (void)\n {\n   struct alias_info *ai;\n@@ -676,6 +676,7 @@ compute_may_aliases (void)\n   }\n   recalculate_used_alone ();\n   updating_used_alone = false;\n+  return 0;\n }\n \n \n@@ -3125,7 +3126,7 @@ find_used_portions (tree *tp, int *walk_subtrees, void *lhs_p)\n \n /* Create structure field variables for structures used in this function.  */\n \n-static void\n+static unsigned int\n create_structure_vars (void)\n {\n   basic_block bb;\n@@ -3158,7 +3159,7 @@ create_structure_vars (void)\n     }\n   htab_delete (used_portions);\n   VEC_free (tree, heap, varvec);\n-\n+  return 0;\n }\n \n static bool"}, {"sha": "ae441fa3cc4c756979ae50b0f5a4c943296e338d", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -1378,10 +1378,11 @@ execute_ssa_ccp (bool store_ccp)\n }\n \n \n-static void\n+static unsigned int\n do_ssa_ccp (void)\n {\n   execute_ssa_ccp (false);\n+  return 0;\n }\n \n \n@@ -1412,11 +1413,12 @@ struct tree_opt_pass pass_ccp =\n };\n \n \n-static void\n+static unsigned int\n do_ssa_store_ccp (void)\n {\n   /* If STORE-CCP is not enabled, we just run regular CCP.  */\n   execute_ssa_ccp (flag_tree_store_ccp != 0);\n+  return 0;\n }\n \n static bool\n@@ -2469,7 +2471,7 @@ convert_to_gimple_builtin (block_stmt_iterator *si_p, tree expr)\n /* A simple pass that attempts to fold all builtin functions.  This pass\n    is run after we've propagated as many constants as we can.  */\n \n-static void\n+static unsigned int\n execute_fold_all_builtins (void)\n {\n   bool cfg_changed = false;\n@@ -2561,6 +2563,7 @@ execute_fold_all_builtins (void)\n   /* Delete unreachable blocks.  */\n   if (cfg_changed)\n     cleanup_tree_cfg ();\n+  return 0;\n }\n \n "}, {"sha": "e0e2a4faf1f8fccb92b4a4d51350593a73b77aff", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -1042,10 +1042,11 @@ gate_copy_prop (void)\n   return flag_tree_copy_prop != 0;\n }\n \n-static void\n+static unsigned int\n do_copy_prop (void)\n {\n   execute_copy_prop (false, false);\n+  return 0;\n }\n \n struct tree_opt_pass pass_copy_prop =\n@@ -1070,10 +1071,11 @@ struct tree_opt_pass pass_copy_prop =\n };\n \n \n-static void\n+static unsigned int\n do_phi_only_copy_prop (void)\n {\n   execute_copy_prop (false, true);\n+  return 0;\n }\n \n struct tree_opt_pass pass_phi_only_copy_prop =\n@@ -1108,11 +1110,12 @@ gate_store_copy_prop (void)\n   return flag_tree_store_copy_prop != 0 || flag_tree_copy_prop != 0;\n }\n \n-static void\n+static unsigned int\n store_copy_prop (void)\n {\n   /* If STORE-COPY-PROP is not enabled, we just run regular COPY-PROP.  */\n   execute_copy_prop (flag_tree_store_copy_prop != 0, false);\n+  return 0;\n }\n \n struct tree_opt_pass pass_store_copy_prop ="}, {"sha": "45f65678e1a01ee1b09c6eaec5908854e5b3ad2f", "filename": "gcc/tree-ssa-copyrename.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-ssa-copyrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-ssa-copyrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copyrename.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -292,7 +292,7 @@ copy_rename_partition_coalesce (var_map map, tree var1, tree var2, FILE *debug)\n    then cause the SSA->normal pass to attempt to coalesce them all to the same \n    variable.  */\n \n-static void\n+static unsigned int\n rename_ssa_copies (void)\n {\n   var_map map;\n@@ -374,6 +374,7 @@ rename_ssa_copies (void)\n     }\n \n   delete_var_map (map);\n+  return 0;\n }\n \n /* Return true if copy rename is to be performed.  */"}, {"sha": "15c2ee417ff389777e731ba407a02908f9356df0", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -926,24 +926,27 @@ perform_tree_ssa_dce (bool aggressive)\n }\n \n /* Pass entry points.  */\n-static void\n+static unsigned int\n tree_ssa_dce (void)\n {\n   perform_tree_ssa_dce (/*aggressive=*/false);\n+  return 0;\n }\n \n-static void\n+static unsigned int\n tree_ssa_dce_loop (void)\n {\n   perform_tree_ssa_dce (/*aggressive=*/false);\n   free_numbers_of_iterations_estimates (current_loops);\n   scev_reset ();\n+  return 0;\n }\n \n-static void\n+static unsigned int\n tree_ssa_cd_dce (void)\n {\n   perform_tree_ssa_dce (/*aggressive=*/optimize >= 2);\n+  return 0;\n }\n \n static bool"}, {"sha": "5a28e7830e2fcb1b44e27ac371e440d3fd60c192", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -235,7 +235,7 @@ free_all_edge_infos (void)\n    every new symbol exposed, its corresponding bit will be set in\n    VARS_TO_RENAME.  */\n \n-static void\n+static unsigned int\n tree_ssa_dominator_optimize (void)\n {\n   struct dom_walk_data walk_data;\n@@ -358,6 +358,7 @@ tree_ssa_dominator_optimize (void)\n   VEC_free (tree, heap, avail_exprs_stack);\n   VEC_free (tree, heap, const_and_copies_stack);\n   VEC_free (tree, heap, stmts_to_rescan);\n+  return 0;\n }\n \n static bool"}, {"sha": "17ed1297affb9b66abd2b6c13a6e2cafa287e465", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -91,7 +91,7 @@ struct address_walk_data\n };\n \n static bool gate_dse (void);\n-static void tree_ssa_dse (void);\n+static unsigned int tree_ssa_dse (void);\n static void dse_initialize_block_local_data (struct dom_walk_data *,\n \t\t\t\t\t     basic_block,\n \t\t\t\t\t     bool);\n@@ -398,7 +398,7 @@ dse_finalize_block (struct dom_walk_data *walk_data,\n       }\n }\n \n-static void\n+static unsigned int\n tree_ssa_dse (void)\n {\n   struct dom_walk_data walk_data;\n@@ -455,6 +455,7 @@ tree_ssa_dse (void)\n \n   /* For now, just wipe the post-dominator information.  */\n   free_dominance_info (CDI_POST_DOMINATORS);\n+  return 0;\n }\n \n static bool"}, {"sha": "d91ab45b331a04696f9f938d32c2df2ff02b2881", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -927,7 +927,7 @@ simplify_switch_expr (tree stmt)\n \n /* Main entry point for the forward propagation optimizer.  */\n \n-static void\n+static unsigned int\n tree_ssa_forward_propagate_single_use_vars (void)\n {\n   basic_block bb;\n@@ -991,6 +991,7 @@ tree_ssa_forward_propagate_single_use_vars (void)\n \n   if (cfg_changed)\n     cleanup_tree_cfg ();\n+  return 0;\n }\n \n "}, {"sha": "1663807127a51a0c2993ae9b1f91af818e86decd", "filename": "gcc/tree-ssa-loop-ch.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-ssa-loop-ch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-ssa-loop-ch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ch.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -120,7 +120,7 @@ do_while_loop_p (struct loop *loop)\n    of the loop.  This is beneficial since it increases efficiency of\n    code motion optimizations.  It also saves one jump on entry to the loop.  */\n \n-static void\n+static unsigned int\n copy_loop_headers (void)\n {\n   struct loops *loops;\n@@ -135,7 +135,7 @@ copy_loop_headers (void)\n   loops = loop_optimizer_init (LOOPS_HAVE_PREHEADERS\n \t\t\t       | LOOPS_HAVE_SIMPLE_LATCHES);\n   if (!loops)\n-    return;\n+    return 0;\n \n #ifdef ENABLE_CHECKING\n   verify_loop_structure (loops);\n@@ -214,6 +214,7 @@ copy_loop_headers (void)\n   free (copied_bbs);\n \n   loop_optimizer_finalize (loops);\n+  return 0;\n }\n \n static bool"}, {"sha": "ee1b9b374eaeca632a7eea1c92453a5541775c8b", "filename": "gcc/tree-ssa-loop.c", "status": "modified", "additions": 35, "deletions": 23, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-ssa-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-ssa-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -87,14 +87,15 @@ struct tree_opt_pass pass_tree_loop =\n \n /* Loop optimizer initialization.  */\n \n-static void\n+static unsigned int\n tree_ssa_loop_init (void)\n {\n   current_loops = tree_loop_optimizer_init ();\n   if (!current_loops)\n-    return;\n+    return 0;\n \n   scev_initialize (current_loops);\n+  return 0;\n }\n   \n struct tree_opt_pass pass_tree_loop_init = \n@@ -116,13 +117,14 @@ struct tree_opt_pass pass_tree_loop_init =\n \n /* Loop invariant motion pass.  */\n \n-static void\n+static unsigned int\n tree_ssa_loop_im (void)\n {\n   if (!current_loops)\n-    return;\n+    return 0;\n \n   tree_ssa_lim (current_loops);\n+  return 0;\n }\n \n static bool\n@@ -150,13 +152,14 @@ struct tree_opt_pass pass_lim =\n \n /* Loop unswitching pass.  */\n \n-static void\n+static unsigned int\n tree_ssa_loop_unswitch (void)\n {\n   if (!current_loops)\n-    return;\n+    return 0;\n \n   tree_ssa_unswitch_loops (current_loops);\n+  return 0;\n }\n \n static bool\n@@ -184,10 +187,11 @@ struct tree_opt_pass pass_tree_unswitch =\n \n /* Loop autovectorization.  */\n \n-static void\n+static unsigned int\n tree_vectorize (void)\n {\n   vectorize_loops (current_loops);\n+  return 0;\n }\n \n static bool\n@@ -215,13 +219,14 @@ struct tree_opt_pass pass_vectorize =\n \n /* Loop nest optimizations.  */\n \n-static void\n+static unsigned int\n tree_linear_transform (void)\n {\n   if (!current_loops)\n-    return;\n+    return 0;\n \n   linear_transform_loops (current_loops);\n+  return 0;\n }\n \n static bool\n@@ -249,13 +254,14 @@ struct tree_opt_pass pass_linear_transform =\n \n /* Canonical induction variable creation pass.  */\n \n-static void\n+static unsigned int\n tree_ssa_loop_ivcanon (void)\n {\n   if (!current_loops)\n-    return;\n+    return 0;\n \n   canonicalize_induction_variables (current_loops);\n+  return 0;\n }\n \n static bool\n@@ -310,13 +316,14 @@ struct tree_opt_pass pass_scev_cprop =\n \n /* Remove empty loops.  */\n \n-static void\n+static unsigned int\n tree_ssa_empty_loop (void)\n {\n   if (!current_loops)\n-    return;\n+    return 0;\n \n   remove_empty_loops (current_loops);\n+  return 0;\n }\n \n struct tree_opt_pass pass_empty_loop =\n@@ -338,14 +345,15 @@ struct tree_opt_pass pass_empty_loop =\n \n /* Record bounds on numbers of iterations of loops.  */\n \n-static void\n+static unsigned int\n tree_ssa_loop_bounds (void)\n {\n   if (!current_loops)\n-    return;\n+    return 0;\n \n   estimate_numbers_of_iterations (current_loops);\n   scev_reset ();\n+  return 0;\n }\n \n struct tree_opt_pass pass_record_bounds =\n@@ -367,16 +375,17 @@ struct tree_opt_pass pass_record_bounds =\n \n /* Complete unrolling of loops.  */\n \n-static void\n+static unsigned int\n tree_complete_unroll (void)\n {\n   if (!current_loops)\n-    return;\n+    return 0;\n \n   tree_unroll_loops_completely (current_loops,\n \t\t\t\tflag_unroll_loops\n \t\t\t\t|| flag_peel_loops\n \t\t\t\t|| optimize >= 3);\n+  return 0;\n }\n \n static bool\n@@ -404,13 +413,14 @@ struct tree_opt_pass pass_complete_unroll =\n \n /* Prefetching.  */\n \n-static void\n+static unsigned int\n tree_ssa_loop_prefetch (void)\n {\n   if (!current_loops)\n-    return;\n+    return 0;\n \n   tree_ssa_prefetch_arrays (current_loops);\n+  return 0;\n }\n \n static bool\n@@ -438,13 +448,14 @@ struct tree_opt_pass pass_loop_prefetch =\n \n /* Induction variable optimizations.  */\n \n-static void\n+static unsigned int\n tree_ssa_loop_ivopts (void)\n {\n   if (!current_loops)\n-    return;\n+    return 0;\n \n   tree_ssa_iv_optimize (current_loops);\n+  return 0;\n }\n \n static bool\n@@ -474,16 +485,17 @@ struct tree_opt_pass pass_iv_optimize =\n \n /* Loop optimizer finalization.  */\n \n-static void\n+static unsigned int\n tree_ssa_loop_done (void)\n {\n   if (!current_loops)\n-    return;\n+    return 0;\n \n   free_numbers_of_iterations_estimates (current_loops);\n   scev_finalize ();\n   loop_optimizer_finalize (current_loops);\n   current_loops = NULL;\n+  return 0;\n }\n   \n struct tree_opt_pass pass_tree_loop_done = "}, {"sha": "609c408ed8cad492cc17b9ec2ba651781bd7f49c", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -447,7 +447,7 @@ gate_cse_reciprocals (void)\n \n /* Go through all the floating-point SSA_NAMEs, and call\n    execute_cse_reciprocals_1 on each of them.  */\n-static void\n+static unsigned int\n execute_cse_reciprocals (void)\n {\n   basic_block bb;\n@@ -496,6 +496,7 @@ execute_cse_reciprocals (void)\n \n   free_dominance_info (CDI_DOMINATORS | CDI_POST_DOMINATORS);\n   free_alloc_pool (occ_pool);\n+  return 0;\n }\n \n struct tree_opt_pass pass_cse_reciprocals ="}, {"sha": "ff96065eb41d9ecd928c53ee5b15cc74040b592d", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -35,7 +35,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"tree-dump.h\"\n #include \"langhooks.h\"\n \n-static void tree_ssa_phiopt (void);\n+static unsigned int tree_ssa_phiopt (void);\n static bool conditional_replacement (basic_block, basic_block,\n \t\t\t\t     edge, edge, tree, tree, tree);\n static bool value_replacement (basic_block, basic_block,\n@@ -133,7 +133,7 @@ static basic_block *blocks_in_phiopt_order (void);\n \n    A similar transformation is done for MAX_EXPR.  */\n \n-static void\n+static unsigned int\n tree_ssa_phiopt (void)\n {\n   basic_block bb;\n@@ -237,6 +237,7 @@ tree_ssa_phiopt (void)\n     }\n \n   free (bb_order);\n+  return 0;\n }\n \n /* Returns the list of basic blocks in the function in an order that guarantees"}, {"sha": "305ee3e938b9dfc534788e4d1efdf0db212cf0c5", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -3803,10 +3803,11 @@ execute_pre (bool do_fre)\n \n /* Gate and execute functions for PRE.  */\n \n-static void\n+static unsigned int\n do_pre (void)\n {\n   execute_pre (false);\n+  return 0;\n }\n \n static bool\n@@ -3837,10 +3838,11 @@ struct tree_opt_pass pass_pre =\n \n /* Gate and execute functions for FRE.  */\n \n-static void\n+static unsigned int\n execute_fre (void)\n {\n   execute_pre (true);\n+  return 0;\n }\n \n static bool"}, {"sha": "4d298fe9495da42188e2cfcdac026bd4db638edf", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -1489,7 +1489,7 @@ fini_reassoc (void)\n \n /* Gate and execute functions for Reassociation.  */\n \n-static void\n+static unsigned int\n execute_reassoc (void)\n {\n   init_reassoc ();\n@@ -1498,6 +1498,7 @@ execute_reassoc (void)\n   repropagate_negates ();\n \n   fini_reassoc ();\n+  return 0;\n }\n \n struct tree_opt_pass pass_reassoc ="}, {"sha": "4db67c524cebbe75e09d45e61a941e193b470839", "filename": "gcc/tree-ssa-sink.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-ssa-sink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-ssa-sink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sink.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -537,10 +537,11 @@ execute_sink_code (void)\n \n /* Gate and execute functions for PRE.  */\n \n-static void\n+static unsigned int\n do_sink (void)\n {\n   execute_sink_code ();\n+  return 0;\n }\n \n static bool"}, {"sha": "a84a32c581b369f185b6293b90e8508db19c9e6e", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -4552,7 +4552,7 @@ gate_ipa_pta (void)\n }\n \n /* Execute the driver for IPA PTA.  */\n-static void\n+static unsigned int\n ipa_pta_execute (void)\n {\n   struct cgraph_node *node;\n@@ -4647,6 +4647,7 @@ ipa_pta_execute (void)\n   in_ipa_mode = 0;\n   delete_alias_heapvars ();\n   delete_points_to_sets ();\n+  return 0;\n }\n   \n struct tree_opt_pass pass_ipa_pta ="}, {"sha": "2271613c3eb7f4a8dfae01735cc8b3074c51d39d", "filename": "gcc/tree-ssa-uncprop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-ssa-uncprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-ssa-uncprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uncprop.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -382,7 +382,7 @@ record_equiv (tree value, tree equivalence)\n \n /* Main driver for un-cprop.  */\n \n-static void\n+static unsigned int\n tree_ssa_uncprop (void)\n {\n   struct dom_walk_data walk_data;\n@@ -441,7 +441,7 @@ tree_ssa_uncprop (void)\n \t    }\n \t}\n     }\n-\n+  return 0;\n }\n \n "}, {"sha": "2dab5c6835d9a7109566e2b321626a62c3486379", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -1196,7 +1196,7 @@ warn_uninitialized_phi (tree phi)\n     }\n }\n \n-static void\n+static unsigned int\n execute_early_warn_uninitialized (void)\n {\n   block_stmt_iterator bsi;\n@@ -1209,9 +1209,10 @@ execute_early_warn_uninitialized (void)\n \twalk_tree (bsi_stmt_ptr (bsi), warn_uninitialized_var,\n \t\t   context, NULL);\n       }\n+  return 0;\n }\n \n-static void\n+static unsigned int\n execute_late_warn_uninitialized (void)\n {\n   basic_block bb;\n@@ -1225,6 +1226,7 @@ execute_late_warn_uninitialized (void)\n   FOR_EACH_BB (bb)\n     for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n       warn_uninitialized_phi (phi);\n+  return 0;\n }\n \n static bool"}, {"sha": "4a67bc850f6944abda255c0c18ed28320e307de7", "filename": "gcc/tree-stdarg.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-stdarg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-stdarg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-stdarg.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -603,7 +603,7 @@ gate_optimize_stdarg (void)\n \n /* Entry point to the stdarg optimization pass.  */\n \n-static void\n+static unsigned int\n execute_optimize_stdarg (void)\n {\n   basic_block bb;\n@@ -903,6 +903,7 @@ execute_optimize_stdarg (void)\n \tfprintf (dump_file, \"%d\", cfun->va_list_fpr_size);\n       fputs (\" FPR units.\\n\", dump_file);\n     }\n+  return 0;\n }\n \n "}, {"sha": "bdc5c95de8849045fcd1ca2e7ae3df1409cc749a", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -994,10 +994,11 @@ tree_optimize_tail_calls_1 (bool opt_tailcalls)\n     add_virtual_phis ();\n }\n \n-static void\n+static unsigned int\n execute_tail_recursion (void)\n {\n   tree_optimize_tail_calls_1 (false);\n+  return 0;\n }\n \n static bool\n@@ -1006,10 +1007,11 @@ gate_tail_calls (void)\n   return flag_optimize_sibling_calls != 0;\n }\n \n-static void\n+static unsigned int\n execute_tail_calls (void)\n {\n   tree_optimize_tail_calls_1 (true);\n+  return 0;\n }\n \n struct tree_opt_pass pass_tail_recursion = "}, {"sha": "b1e567aa870de2409a44dbbdaa5330e2f14f2f6e", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -469,7 +469,7 @@ gate_expand_vector_operations (void)\n   return flag_tree_vectorize != 0;\n }\n \n-static void\n+static unsigned int\n expand_vector_operations (void)\n {\n   block_stmt_iterator bsi;\n@@ -483,6 +483,7 @@ expand_vector_operations (void)\n \t  update_stmt_if_modified (bsi_stmt (bsi));\n \t}\n     }\n+  return 0;\n }\n \n struct tree_opt_pass pass_lower_vector = "}, {"sha": "d8ff9fd37100b22115ff67daf27f26f46e47121b", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -4518,7 +4518,7 @@ vrp_finalize (void)\n    DON'T KNOW.  In the future, it may be worthwhile to propagate\n    probabilities to aid branch prediction.  */\n \n-static void\n+static unsigned int\n execute_vrp (void)\n {\n   insert_range_assertions ();\n@@ -4551,7 +4551,7 @@ execute_vrp (void)\n   update_ssa (TODO_update_ssa);\n \n   finalize_jump_threads ();\n-\n+  return 0;\n }\n \n static bool"}, {"sha": "be7f5d85895b7677f34abd40eacf3f3d6c4026e9", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -4284,7 +4284,7 @@ extern tree find_compatible_field (tree, tree);\n extern void expand_main_function (void);\n extern void init_dummy_function_start (void);\n extern void expand_dummy_function_end (void);\n-extern void init_function_for_compilation (void);\n+extern unsigned int init_function_for_compilation (void);\n extern void allocate_struct_function (tree);\n extern void init_function_start (tree);\n extern bool use_register_for_decl (tree);"}, {"sha": "7e910d6bcba4e3a3dd075993cfa1564278d912ea", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -2676,11 +2676,11 @@ vt_finalize (void)\n \n /* The entry point to variable tracking pass.  */\n \n-void\n+unsigned int\n variable_tracking_main (void)\n {\n   if (n_basic_blocks > 500 && n_edges / n_basic_blocks >= 20)\n-    return;\n+    return 0;\n \n   mark_dfs_back_edges ();\n   vt_initialize ();\n@@ -2689,7 +2689,7 @@ variable_tracking_main (void)\n       if (!vt_stack_adjustments ())\n \t{\n \t  vt_finalize ();\n-\t  return;\n+\t  return 0;\n \t}\n     }\n \n@@ -2703,6 +2703,7 @@ variable_tracking_main (void)\n     }\n \n   vt_finalize ();\n+  return 0;\n }\n \f\n static bool"}, {"sha": "b729be7b9eee30eafa47cd64f52d43952288f717", "filename": "gcc/web.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fweb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2924966db687eb67be927c2db657dc92ff25f25/gcc%2Fweb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fweb.c?ref=c2924966db687eb67be927c2db657dc92ff25f25", "patch": "@@ -285,13 +285,14 @@ gate_handle_web (void)\n   return (optimize > 0 && flag_web);\n }\n \n-static void\n+static unsigned int\n rest_of_handle_web (void)\n {\n   web_main ();\n   delete_trivially_dead_insns (get_insns (), max_reg_num ());\n   cleanup_cfg (CLEANUP_EXPENSIVE);\n   reg_scan (get_insns (), max_reg_num ());\n+  return 0;\n }\n \n struct tree_opt_pass pass_web ="}]}