{"sha": "0ece93214a1e4547b01fcb2e61c8672b33965a5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGVjZTkzMjE0YTFlNDU0N2IwMWZjYjJlNjFjODY3MmIzMzk2NWE1ZA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-22T14:09:42Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-22T14:09:42Z"}, "message": "dce.c: Use rtx subclasses\n\ngcc/\n\t* dce.c (worklist): Strengthen from vec<rtx> to vec<rtx_insn *>.\n\t(deletable_insn_p): Strengthen param \"insn\" from rtx to\n\trtx_insn *.  Add checked cast to rtx_call_insn when invoking\n\tfind_call_stack_args, since this is guarded by CALL_P (insn).\n\t(marked_insn_p): Strengthen param \"insn\" from rtx to\n\trtx_insn *.\n\t(mark_insn): Likewise.  Add checked cast to rtx_call_insn when\n\tinvoking find_call_stack_args, since this is guarded by\n\tCALL_P (insn).\n\t(mark_nonreg_stores_1): Strengthen cast of \"data\" from rtx to\n\trtx_insn *; we know this is an insn since this was called by\n\tmark_nonreg_stores.\n\t(mark_nonreg_stores_2): Likewise.\n\t(mark_nonreg_stores): Strengthen param \"insn\" from rtx to\n\trtx_insn *.\n\t(find_call_stack_args): Strengthen param \"call_insn\" from rtx to\n\trtx_call_insn *; strengthen locals \"insn\" and \"prev_insn\" from rtx\n\tto rtx_insn *.\n\t(remove_reg_equal_equiv_notes_for_defs): Strengthen param \"insn\"\n\tfrom rtx to rtx_insn *.\n\t(reset_unmarked_insns_debug_uses): Likewise for locals \"insn\",\n\t\"next\", \"ref_insn\".\n\t(delete_unmarked_insns): Likewise for locals \"insn\", \"next\".\n\t(prescan_insns_for_dce): Likewise for locals \"insn\", \"prev\".\n\t(mark_reg_dependencies): Likewise for param \"insn\".\n\t(rest_of_handle_ud_dce): Likewise for local \"insn\".\n\t(word_dce_process_block): Likewise.\n\t(dce_process_block): Likewise.\n\nFrom-SVN: r214316", "tree": {"sha": "ffc956ebec10147ce8c5e6ab284c789d1bae6de9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffc956ebec10147ce8c5e6ab284c789d1bae6de9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ece93214a1e4547b01fcb2e61c8672b33965a5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ece93214a1e4547b01fcb2e61c8672b33965a5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ece93214a1e4547b01fcb2e61c8672b33965a5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ece93214a1e4547b01fcb2e61c8672b33965a5d/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "204688845f355eb9af36a85558ea0bf706ab28a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/204688845f355eb9af36a85558ea0bf706ab28a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/204688845f355eb9af36a85558ea0bf706ab28a5"}], "stats": {"total": 77, "additions": 55, "deletions": 22}, "files": [{"sha": "69085a0eff696a953540ef81c5224ff495b10cfb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ece93214a1e4547b01fcb2e61c8672b33965a5d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ece93214a1e4547b01fcb2e61c8672b33965a5d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0ece93214a1e4547b01fcb2e61c8672b33965a5d", "patch": "@@ -1,3 +1,34 @@\n+2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* dce.c (worklist): Strengthen from vec<rtx> to vec<rtx_insn *>.\n+\t(deletable_insn_p): Strengthen param \"insn\" from rtx to\n+\trtx_insn *.  Add checked cast to rtx_call_insn when invoking\n+\tfind_call_stack_args, since this is guarded by CALL_P (insn).\n+\t(marked_insn_p): Strengthen param \"insn\" from rtx to\n+\trtx_insn *.\n+\t(mark_insn): Likewise.  Add checked cast to rtx_call_insn when\n+\tinvoking find_call_stack_args, since this is guarded by\n+\tCALL_P (insn).\n+\t(mark_nonreg_stores_1): Strengthen cast of \"data\" from rtx to\n+\trtx_insn *; we know this is an insn since this was called by\n+\tmark_nonreg_stores.\n+\t(mark_nonreg_stores_2): Likewise.\n+\t(mark_nonreg_stores): Strengthen param \"insn\" from rtx to\n+\trtx_insn *.\n+\t(find_call_stack_args): Strengthen param \"call_insn\" from rtx to\n+\trtx_call_insn *; strengthen locals \"insn\" and \"prev_insn\" from rtx\n+\tto rtx_insn *.\n+\t(remove_reg_equal_equiv_notes_for_defs): Strengthen param \"insn\"\n+\tfrom rtx to rtx_insn *.\n+\t(reset_unmarked_insns_debug_uses): Likewise for locals \"insn\",\n+\t\"next\", \"ref_insn\".\n+\t(delete_unmarked_insns): Likewise for locals \"insn\", \"next\".\n+\t(prescan_insns_for_dce): Likewise for locals \"insn\", \"prev\".\n+\t(mark_reg_dependencies): Likewise for param \"insn\".\n+\t(rest_of_handle_ud_dce): Likewise for local \"insn\".\n+\t(word_dce_process_block): Likewise.\n+\t(dce_process_block): Likewise.\n+\n 2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n \n \t* cse.c (struct qty_table_elem): Strengthen field \"const_insn\""}, {"sha": "5b7d36ee15671911190917b443058862a375b749", "filename": "gcc/dce.c", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ece93214a1e4547b01fcb2e61c8672b33965a5d/gcc%2Fdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ece93214a1e4547b01fcb2e61c8672b33965a5d/gcc%2Fdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdce.c?ref=0ece93214a1e4547b01fcb2e61c8672b33965a5d", "patch": "@@ -51,7 +51,7 @@ static bool can_alter_cfg = false;\n \n /* Instructions that have been marked but whose dependencies have not\n    yet been processed.  */\n-static vec<rtx> worklist;\n+static vec<rtx_insn *> worklist;\n \n /* Bitmap of instructions marked as needed indexed by INSN_UID.  */\n static sbitmap marked;\n@@ -60,7 +60,7 @@ static sbitmap marked;\n static bitmap_obstack dce_blocks_bitmap_obstack;\n static bitmap_obstack dce_tmp_bitmap_obstack;\n \n-static bool find_call_stack_args (rtx, bool, bool, bitmap);\n+static bool find_call_stack_args (rtx_call_insn *, bool, bool, bitmap);\n \n /* A subroutine for which BODY is part of the instruction being tested;\n    either the top-level pattern, or an element of a PARALLEL.  The\n@@ -92,7 +92,7 @@ deletable_insn_p_1 (rtx body)\n    the DCE pass.  */\n \n static bool\n-deletable_insn_p (rtx insn, bool fast, bitmap arg_stores)\n+deletable_insn_p (rtx_insn *insn, bool fast, bitmap arg_stores)\n {\n   rtx body, x;\n   int i;\n@@ -110,7 +110,8 @@ deletable_insn_p (rtx insn, bool fast, bitmap arg_stores)\n          infinite loop.  */\n       && (RTL_CONST_OR_PURE_CALL_P (insn)\n \t  && !RTL_LOOPING_CONST_OR_PURE_CALL_P (insn)))\n-    return find_call_stack_args (insn, false, fast, arg_stores);\n+    return find_call_stack_args (as_a <rtx_call_insn *> (insn), false,\n+\t\t\t\t fast, arg_stores);\n \n   /* Don't delete jumps, notes and the like.  */\n   if (!NONJUMP_INSN_P (insn))\n@@ -164,7 +165,7 @@ deletable_insn_p (rtx insn, bool fast, bitmap arg_stores)\n /* Return true if INSN has been marked as needed.  */\n \n static inline int\n-marked_insn_p (rtx insn)\n+marked_insn_p (rtx_insn *insn)\n {\n   /* Artificial defs are always needed and they do not have an insn.\n      We should never see them here.  */\n@@ -177,7 +178,7 @@ marked_insn_p (rtx insn)\n    the worklist.  */\n \n static void\n-mark_insn (rtx insn, bool fast)\n+mark_insn (rtx_insn *insn, bool fast)\n {\n   if (!marked_insn_p (insn))\n     {\n@@ -191,7 +192,7 @@ mark_insn (rtx insn, bool fast)\n \t  && !SIBLING_CALL_P (insn)\n \t  && (RTL_CONST_OR_PURE_CALL_P (insn)\n \t      && !RTL_LOOPING_CONST_OR_PURE_CALL_P (insn)))\n-\tfind_call_stack_args (insn, true, fast, NULL);\n+\tfind_call_stack_args (as_a <rtx_call_insn *> (insn), true, fast, NULL);\n     }\n }\n \n@@ -203,7 +204,7 @@ static void\n mark_nonreg_stores_1 (rtx dest, const_rtx pattern, void *data)\n {\n   if (GET_CODE (pattern) != CLOBBER && !REG_P (dest))\n-    mark_insn ((rtx) data, true);\n+    mark_insn ((rtx_insn *) data, true);\n }\n \n \n@@ -214,14 +215,14 @@ static void\n mark_nonreg_stores_2 (rtx dest, const_rtx pattern, void *data)\n {\n   if (GET_CODE (pattern) != CLOBBER && !REG_P (dest))\n-    mark_insn ((rtx) data, false);\n+    mark_insn ((rtx_insn *) data, false);\n }\n \n \n /* Mark INSN if BODY stores to a non-register destination.  */\n \n static void\n-mark_nonreg_stores (rtx body, rtx insn, bool fast)\n+mark_nonreg_stores (rtx body, rtx_insn *insn, bool fast)\n {\n   if (fast)\n     note_stores (body, mark_nonreg_stores_1, insn);\n@@ -258,10 +259,11 @@ check_argument_store (rtx mem, HOST_WIDE_INT off, HOST_WIDE_INT min_sp_off,\n    going to be marked called again with DO_MARK true.  */\n \n static bool\n-find_call_stack_args (rtx call_insn, bool do_mark, bool fast,\n+find_call_stack_args (rtx_call_insn *call_insn, bool do_mark, bool fast,\n \t\t      bitmap arg_stores)\n {\n-  rtx p, insn, prev_insn;\n+  rtx p;\n+  rtx_insn *insn, *prev_insn;\n   bool ret;\n   HOST_WIDE_INT min_sp_off, max_sp_off;\n   bitmap sp_bytes;\n@@ -397,7 +399,7 @@ find_call_stack_args (rtx call_insn, bool do_mark, bool fast,\n       HOST_WIDE_INT off;\n \n       if (insn == BB_HEAD (BLOCK_FOR_INSN (call_insn)))\n-\tprev_insn = NULL_RTX;\n+\tprev_insn = NULL;\n       else\n \tprev_insn = PREV_INSN (insn);\n \n@@ -495,7 +497,7 @@ find_call_stack_args (rtx call_insn, bool do_mark, bool fast,\n    writes to.  */\n \n static void\n-remove_reg_equal_equiv_notes_for_defs (rtx insn)\n+remove_reg_equal_equiv_notes_for_defs (rtx_insn *insn)\n {\n   df_ref def;\n \n@@ -510,7 +512,7 @@ static void\n reset_unmarked_insns_debug_uses (void)\n {\n   basic_block bb;\n-  rtx insn, next;\n+  rtx_insn *insn, *next;\n \n   FOR_EACH_BB_REVERSE_FN (bb, cfun)\n     FOR_BB_INSNS_REVERSE_SAFE (bb, insn, next)\n@@ -523,7 +525,7 @@ reset_unmarked_insns_debug_uses (void)\n \t      struct df_link *defs;\n \t      for (defs = DF_REF_CHAIN (use); defs; defs = defs->next)\n \t\t{\n-\t\t  rtx ref_insn;\n+\t\t  rtx_insn *ref_insn;\n \t\t  if (DF_REF_IS_ARTIFICIAL (defs->ref))\n \t\t    continue;\n \t\t  ref_insn = DF_REF_INSN (defs->ref);\n@@ -547,7 +549,7 @@ static void\n delete_unmarked_insns (void)\n {\n   basic_block bb;\n-  rtx insn, next;\n+  rtx_insn *insn, *next;\n   bool must_clean = false;\n \n   FOR_EACH_BB_REVERSE_FN (bb, cfun)\n@@ -614,7 +616,7 @@ static void\n prescan_insns_for_dce (bool fast)\n {\n   basic_block bb;\n-  rtx insn, prev;\n+  rtx_insn *insn, *prev;\n   bitmap arg_stores = NULL;\n \n   if (dump_file)\n@@ -674,7 +676,7 @@ mark_artificial_uses (void)\n /* Mark every instruction that defines a register value that INSN uses.  */\n \n static void\n-mark_reg_dependencies (rtx insn)\n+mark_reg_dependencies (rtx_insn *insn)\n {\n   struct df_link *defs;\n   df_ref use;\n@@ -749,7 +751,7 @@ fini_dce (bool fast)\n static unsigned int\n rest_of_handle_ud_dce (void)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n \n   init_dce (false);\n \n@@ -834,7 +836,7 @@ word_dce_process_block (basic_block bb, bool redo_out,\n \t\t\tstruct dead_debug_global *global_debug)\n {\n   bitmap local_live = BITMAP_ALLOC (&dce_tmp_bitmap_obstack);\n-  rtx insn;\n+  rtx_insn *insn;\n   bool block_changed;\n   struct dead_debug_local debug;\n \n@@ -932,7 +934,7 @@ dce_process_block (basic_block bb, bool redo_out, bitmap au,\n \t\t   struct dead_debug_global *global_debug)\n {\n   bitmap local_live = BITMAP_ALLOC (&dce_tmp_bitmap_obstack);\n-  rtx insn;\n+  rtx_insn *insn;\n   bool block_changed;\n   df_ref def;\n   struct dead_debug_local debug;"}]}