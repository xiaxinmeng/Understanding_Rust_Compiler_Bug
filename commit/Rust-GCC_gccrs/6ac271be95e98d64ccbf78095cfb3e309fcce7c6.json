{"sha": "6ac271be95e98d64ccbf78095cfb3e309fcce7c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFjMjcxYmU5NWU5OGQ2NGNjYmY3ODA5NWNmYjNlMzA5ZmNjZTdjNg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-04-17T21:42:44Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-04-17T21:42:44Z"}, "message": "(uid_block_number): Likewise.\n\n(flow_analysis): Allocate uid_block_number and reg_basic_block as array\nof ints.\n\nFrom-SVN: r4174", "tree": {"sha": "10d7ae20db54771361a8b86cb6fba4042424c52b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10d7ae20db54771361a8b86cb6fba4042424c52b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ac271be95e98d64ccbf78095cfb3e309fcce7c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ac271be95e98d64ccbf78095cfb3e309fcce7c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ac271be95e98d64ccbf78095cfb3e309fcce7c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ac271be95e98d64ccbf78095cfb3e309fcce7c6/comments", "author": null, "committer": null, "parents": [{"sha": "09d2cd9b91f97444bd264af58beab7a7b52e7968", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09d2cd9b91f97444bd264af58beab7a7b52e7968", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09d2cd9b91f97444bd264af58beab7a7b52e7968"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "5a8b44733dad564fe217075a90f54ad136335c6b", "filename": "gcc/flow.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ac271be95e98d64ccbf78095cfb3e309fcce7c6/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ac271be95e98d64ccbf78095cfb3e309fcce7c6/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=6ac271be95e98d64ccbf78095cfb3e309fcce7c6", "patch": "@@ -138,7 +138,7 @@ static int max_uid_for_flow;\n    This is set up by find_basic_blocks and used there and in life_analysis,\n    and then freed.  */\n \n-static short *uid_block_number;\n+static int *uid_block_number;\n \n /* INSN_VOLATILE (insn) is 1 if the insn refers to anything volatile.  */\n \n@@ -168,7 +168,7 @@ static int num_scratch;\n    This information remains valid for the rest of the compilation\n    of the current function; it is used to control register allocation.  */\n \n-short *reg_basic_block;\n+int *reg_basic_block;\n \n /* Indexed by n, gives number of times (REG n) is used or set, each\n    weighted by its loop-depth.\n@@ -364,7 +364,7 @@ flow_analysis (f, nregs, file)\n   basic_block_drops_in = (char *) alloca (n_basic_blocks);\n   basic_block_loop_depth = (short *) alloca (n_basic_blocks * sizeof (short));\n   uid_block_number\n-    = (short *) alloca ((max_uid_for_flow + 1) * sizeof (short));\n+    = (int *) alloca ((max_uid_for_flow + 1) * sizeof (int));\n   uid_volatile = (char *) alloca (max_uid_for_flow + 1);\n   bzero (uid_volatile, max_uid_for_flow + 1);\n \n@@ -1113,7 +1113,7 @@ allocate_for_life_analysis ()\n   reg_n_calls_crossed = (int *) oballoc (max_regno * sizeof (int));\n   bzero (reg_n_calls_crossed, max_regno * sizeof (int));\n \n-  reg_basic_block = (short *) oballoc (max_regno * sizeof (short));\n+  reg_basic_block = (int *) oballoc (max_regno * sizeof (int));\n   for (i = 0; i < max_regno; i++)\n     reg_basic_block[i] = REG_BLOCK_UNKNOWN;\n "}]}