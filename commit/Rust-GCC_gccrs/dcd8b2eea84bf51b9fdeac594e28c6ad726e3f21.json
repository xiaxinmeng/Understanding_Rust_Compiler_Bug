{"sha": "dcd8b2eea84bf51b9fdeac594e28c6ad726e3f21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNkOGIyZWVhODRiZjUxYjlmZGVhYzU5NGUyOGM2YWQ3MjZlM2YyMQ==", "commit": {"author": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2010-05-28T16:07:33Z"}, "committer": {"name": "Julian Brown", "email": "jules@gcc.gnu.org", "date": "2010-05-28T16:07:33Z"}, "message": "thumb2.md (*thumb2_addsi3_compare0): New.\n\n\tgcc/\n\t* config/arm/thumb2.md (*thumb2_addsi3_compare0): New.\n\t(*thumb2_addsi3_compare0_scratch): New.\n\t* config/arm/constraints.md (Pv): New.\n\t* config/arm/arm.md (*addsi3_compare0): Remove FIXME comment. Use\n\tfor ARM mode only.\n\t(*addsi3_compare0_scratch): Likewise.\n\nFrom-SVN: r159983", "tree": {"sha": "35e7785cbba67b939297d00f27840974a2264969", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35e7785cbba67b939297d00f27840974a2264969"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcd8b2eea84bf51b9fdeac594e28c6ad726e3f21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcd8b2eea84bf51b9fdeac594e28c6ad726e3f21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcd8b2eea84bf51b9fdeac594e28c6ad726e3f21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcd8b2eea84bf51b9fdeac594e28c6ad726e3f21/comments", "author": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "df24c2b88d3ca69d5a7fe29d8a527714fb3aec16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df24c2b88d3ca69d5a7fe29d8a527714fb3aec16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df24c2b88d3ca69d5a7fe29d8a527714fb3aec16"}], "stats": {"total": 71, "additions": 67, "deletions": 4}, "files": [{"sha": "aac8fcdffa786ed5f88c8af602988458b2bba29b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcd8b2eea84bf51b9fdeac594e28c6ad726e3f21/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcd8b2eea84bf51b9fdeac594e28c6ad726e3f21/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dcd8b2eea84bf51b9fdeac594e28c6ad726e3f21", "patch": "@@ -1,3 +1,12 @@\n+2010-05-28  Julian Brown  <julian@codesourcery.com>\n+\n+\t* config/arm/thumb2.md (*thumb2_addsi3_compare0): New.\n+\t(*thumb2_addsi3_compare0_scratch): New.\n+\t* config/arm/constraints.md (Pv): New.\n+\t* config/arm/arm.md (*addsi3_compare0): Remove FIXME comment. Use\n+\tfor ARM mode only.\n+\t(*addsi3_compare0_scratch): Likewise.\n+\n 2010-05-28  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa-reference.c (add_static_var): Remove redundant all_module_statics check."}, {"sha": "628bd62ae627114d9f077f6635d922fe2865163b", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcd8b2eea84bf51b9fdeac594e28c6ad726e3f21/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcd8b2eea84bf51b9fdeac594e28c6ad726e3f21/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=dcd8b2eea84bf51b9fdeac594e28c6ad726e3f21", "patch": "@@ -693,7 +693,6 @@\n   \"\"\n )\n \n-;; ??? Make Thumb-2 variants which prefer low regs\n (define_insn \"*addsi3_compare0\"\n   [(set (reg:CC_NOOV CC_REGNUM)\n \t(compare:CC_NOOV\n@@ -702,7 +701,7 @@\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_32BIT\"\n+  \"TARGET_ARM\"\n   \"@\n    add%.\\\\t%0, %1, %2\n    sub%.\\\\t%0, %1, #%n2\"\n@@ -715,7 +714,7 @@\n \t (plus:SI (match_operand:SI 0 \"s_register_operand\" \"r, r\")\n \t\t  (match_operand:SI 1 \"arm_add_operand\"    \"rI,L\"))\n \t (const_int 0)))]\n-  \"TARGET_32BIT\"\n+  \"TARGET_ARM\"\n   \"@\n    cmn%?\\\\t%0, %1\n    cmp%?\\\\t%0, #%n1\""}, {"sha": "575d0ac4e9a2f00076a74cfb7b73924156e3925c", "filename": "gcc/config/arm/constraints.md", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcd8b2eea84bf51b9fdeac594e28c6ad726e3f21/gcc%2Fconfig%2Farm%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcd8b2eea84bf51b9fdeac594e28c6ad726e3f21/gcc%2Fconfig%2Farm%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconstraints.md?ref=dcd8b2eea84bf51b9fdeac594e28c6ad726e3f21", "patch": "@@ -31,7 +31,7 @@\n ;; The following multi-letter normal constraints have been used:\n ;; in ARM/Thumb-2 state: Da, Db, Dc, Dn, Dl, DL, Dv, Dy\n ;; in Thumb-1 state: Pa, Pb\n-;; in Thumb-2 state: Ps, Pt, Pu\n+;; in Thumb-2 state: Ps, Pt, Pu, Pv\n \n ;; The following memory constraints have been used:\n ;; in ARM/Thumb-2 state: Q, Ut, Uv, Uy, Un, Um, Us\n@@ -163,6 +163,11 @@\n   (and (match_code \"const_int\")\n        (match_test \"TARGET_THUMB2 && ival >= 1 && ival <= 8\")))\n \n+(define_constraint \"Pv\"\n+  \"@internal In Thumb-2 state a constant in the range -255 to 0\"\n+  (and (match_code \"const_int\")\n+       (match_test \"TARGET_THUMB2 && ival >= -255 && ival <= 0\")))\n+\n (define_constraint \"G\"\n  \"In ARM/Thumb-2 state a valid FPA immediate constant.\"\n  (and (match_code \"const_double\")"}, {"sha": "fa325b171e354180a6d5d5d4baaef4a4eea22601", "filename": "gcc/config/arm/thumb2.md", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcd8b2eea84bf51b9fdeac594e28c6ad726e3f21/gcc%2Fconfig%2Farm%2Fthumb2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcd8b2eea84bf51b9fdeac594e28c6ad726e3f21/gcc%2Fconfig%2Farm%2Fthumb2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb2.md?ref=dcd8b2eea84bf51b9fdeac594e28c6ad726e3f21", "patch": "@@ -1254,6 +1254,56 @@\n    (set_attr \"length\" \"2\")]\n )\n \n+(define_insn \"*thumb2_addsi3_compare0\"\n+  [(set (reg:CC_NOOV CC_REGNUM)\n+\t(compare:CC_NOOV\n+\t  (plus:SI (match_operand:SI 1 \"s_register_operand\" \"l,  0, r\")\n+\t\t   (match_operand:SI 2 \"arm_add_operand\"    \"lPt,Ps,rIL\"))\n+\t  (const_int 0)))\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=l,l,r\")\n+\t(plus:SI (match_dup 1) (match_dup 2)))]\n+  \"TARGET_THUMB2\"\n+  \"*\n+    HOST_WIDE_INT val;\n+\n+    if (GET_CODE (operands[2]) == CONST_INT)\n+      val = INTVAL (operands[2]);\n+    else\n+      val = 0;\n+\n+    if (val < 0 && const_ok_for_arm (ARM_SIGN_EXTEND (-val)))\n+      return \\\"subs\\\\t%0, %1, #%n2\\\";\n+    else\n+      return \\\"adds\\\\t%0, %1, %2\\\";\n+  \"\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"length\" \"2,2,4\")]\n+)\n+\n+(define_insn \"*thumb2_addsi3_compare0_scratch\"\n+  [(set (reg:CC_NOOV CC_REGNUM)\n+\t(compare:CC_NOOV\n+\t  (plus:SI (match_operand:SI 0 \"s_register_operand\" \"l,  r\")\n+\t\t   (match_operand:SI 1 \"arm_add_operand\"    \"lPv,rIL\"))\n+\t  (const_int 0)))]\n+  \"TARGET_THUMB2\"\n+  \"*\n+    HOST_WIDE_INT val;\n+\n+    if (GET_CODE (operands[1]) == CONST_INT)\n+      val = INTVAL (operands[1]);\n+    else\n+      val = 0;\n+\n+    if (val < 0 && const_ok_for_arm (ARM_SIGN_EXTEND (-val)))\n+      return \\\"cmp\\\\t%0, #%n1\\\";\n+    else\n+      return \\\"cmn\\\\t%0, %1\\\";\n+  \"\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"length\" \"2,4\")]\n+)\n+\n ;; 16-bit encodings of \"muls\" and \"mul<c>\".  We only use these when\n ;; optimizing for size since \"muls\" is slow on all known\n ;; implementations and since \"mul<c>\" will be generated by"}]}