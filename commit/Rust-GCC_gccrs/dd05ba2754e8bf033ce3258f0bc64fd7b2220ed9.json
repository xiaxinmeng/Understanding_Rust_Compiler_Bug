{"sha": "dd05ba2754e8bf033ce3258f0bc64fd7b2220ed9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQwNWJhMjc1NGU4YmYwMzNjZTMyNThmMGJjNjRmZDdiMjIyMGVkOQ==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2007-09-26T10:43:45Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-09-26T10:43:45Z"}, "message": "g-calend.adb (Has_53_Weeks): Rename to Last_Year_Has_53_Weeks.\n\n2007-09-26  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* g-calend.adb (Has_53_Weeks): Rename to Last_Year_Has_53_Weeks. Add a\n\tcall to Jan_1_Day _Of_Week to optimize its performance.\n\t(Is_Leap): Move the routine to the scope of Week_In_Year.\n\t(Jan_1_Day_Of_Week): New routine in Week_In_Year which calculates the\n\tweekday on which January 1 falls of Year - 1 and Year + 1. This function\n\tavoids calling Time_Of and Split, thus making it more efficent.\n\t(Week_In_Year): Reimplemented in oder to follow ISO 8601.\n\n\t* g-calend.ads (Week_In_Year): Change comment to reflect new\n\timplementation.\n\nFrom-SVN: r128790", "tree": {"sha": "e707496e9d85fb88cda71972a74e18f56f9a75e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e707496e9d85fb88cda71972a74e18f56f9a75e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd05ba2754e8bf033ce3258f0bc64fd7b2220ed9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd05ba2754e8bf033ce3258f0bc64fd7b2220ed9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd05ba2754e8bf033ce3258f0bc64fd7b2220ed9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd05ba2754e8bf033ce3258f0bc64fd7b2220ed9/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "31b5873d01cfb8aa27f5da175b8e8740c3e76370", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31b5873d01cfb8aa27f5da175b8e8740c3e76370", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31b5873d01cfb8aa27f5da175b8e8740c3e76370"}], "stats": {"total": 258, "additions": 243, "deletions": 15}, "files": [{"sha": "f34a0d9d7c959f8db499d44ee8074ee47ab40b6a", "filename": "gcc/ada/g-calend.adb", "status": "modified", "additions": 235, "deletions": 13, "changes": 248, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd05ba2754e8bf033ce3258f0bc64fd7b2220ed9/gcc%2Fada%2Fg-calend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd05ba2754e8bf033ce3258f0bc64fd7b2220ed9/gcc%2Fada%2Fg-calend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-calend.adb?ref=dd05ba2754e8bf033ce3258f0bc64fd7b2220ed9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 1999-2006, AdaCore                     --\n+--                     Copyright (C) 1999-2007, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -45,10 +45,8 @@ package body GNAT.Calendar is\n       Month    : Month_Number;\n       Day      : Day_Number;\n       Day_Secs : Day_Duration;\n-\n    begin\n       Split (Date, Year, Month, Day, Day_Secs);\n-\n       return Julian_Day (Year, Month, Day) - Julian_Day (Year, 1, 1) + 1;\n    end Day_In_Year;\n \n@@ -61,10 +59,8 @@ package body GNAT.Calendar is\n       Month    : Month_Number;\n       Day      : Day_Number;\n       Day_Secs : Day_Duration;\n-\n    begin\n       Split (Date, Year, Month, Day, Day_Secs);\n-\n       return Day_Name'Val ((Julian_Day (Year, Month, Day)) mod 7);\n    end Day_Of_Week;\n \n@@ -80,7 +76,6 @@ package body GNAT.Calendar is\n       Minute     : Minute_Number;\n       Second     : Second_Number;\n       Sub_Second : Second_Duration;\n-\n    begin\n       Split (Date, Year, Month, Day, Hour, Minute, Second, Sub_Second);\n       return Hour;\n@@ -140,7 +135,6 @@ package body GNAT.Calendar is\n       Minute     : Minute_Number;\n       Second     : Second_Number;\n       Sub_Second : Second_Duration;\n-\n    begin\n       Split (Date, Year, Month, Day, Hour, Minute, Second, Sub_Second);\n       return Minute;\n@@ -158,7 +152,6 @@ package body GNAT.Calendar is\n       Minute     : Minute_Number;\n       Second     : Second_Number;\n       Sub_Second : Second_Duration;\n-\n    begin\n       Split (Date, Year, Month, Day, Hour, Minute, Second, Sub_Second);\n       return Second;\n@@ -209,7 +202,6 @@ package body GNAT.Calendar is\n       Minute     : Minute_Number;\n       Second     : Second_Number;\n       Sub_Second : Second_Duration;\n-\n    begin\n       Split (Date, Year, Month, Day, Hour, Minute, Second, Sub_Second);\n       return Sub_Second;\n@@ -301,16 +293,246 @@ package body GNAT.Calendar is\n       Minute     : Minute_Number;\n       Second     : Second_Number;\n       Sub_Second : Second_Duration;\n-      Offset     : Natural;\n+      Jan_1      : Day_Name;\n+      Shift      : Week_In_Year_Number;\n+      Start_Week : Week_In_Year_Number;\n+\n+      function Is_Leap (Year : Year_Number) return Boolean;\n+      --  Return True if Year denotes a leap year. Leap centential years are\n+      --  properly handled.\n+\n+      function Jan_1_Day_Of_Week\n+        (Jan_1     : Day_Name;\n+         Year      : Year_Number;\n+         Last_Year : Boolean := False;\n+         Next_Year : Boolean := False) return Day_Name;\n+      --  Given the weekday of January 1 in Year, determine the weekday on\n+      --  which January 1 fell last year or will fall next year as set by\n+      --  the two flags. This routine does not call Time_Of or Split.\n+\n+      function Last_Year_Has_53_Weeks\n+        (Jan_1 : Day_Name;\n+         Year  : Year_Number) return Boolean;\n+      --  Given the weekday of January 1 in Year, determine whether last year\n+      --  has 53 weeks. A False value implies that the year has 52 weeks.\n+\n+      -------------\n+      -- Is_Leap --\n+      -------------\n+\n+      function Is_Leap (Year : Year_Number) return Boolean is\n+      begin\n+         if Year mod 400 = 0 then\n+            return True;\n+         elsif Year mod 100 = 0 then\n+            return False;\n+         else\n+            return Year mod 4 = 0;\n+         end if;\n+      end Is_Leap;\n+\n+      -----------------------\n+      -- Jan_1_Day_Of_Week --\n+      -----------------------\n+\n+      function Jan_1_Day_Of_Week\n+        (Jan_1     : Day_Name;\n+         Year      : Year_Number;\n+         Last_Year : Boolean := False;\n+         Next_Year : Boolean := False) return Day_Name\n+      is\n+         Shift : Integer := 0;\n+\n+      begin\n+         if Last_Year then\n+            if Is_Leap (Year - 1) then\n+               Shift := -2;\n+            else\n+               Shift := -1;\n+            end if;\n+\n+         elsif Next_Year then\n+            if Is_Leap (Year) then\n+               Shift := 2;\n+            else\n+               Shift := 1;\n+            end if;\n+         end if;\n+\n+         return Day_Name'Val ((Day_Name'Pos (Jan_1) + Shift) mod 7);\n+      end Jan_1_Day_Of_Week;\n+\n+      ----------------------------\n+      -- Last_Year_Has_53_Weeks --\n+      ----------------------------\n+\n+      function Last_Year_Has_53_Weeks\n+        (Jan_1 : Day_Name;\n+         Year  : Year_Number) return Boolean\n+      is\n+         Last_Jan_1 : constant Day_Name :=\n+                        Jan_1_Day_Of_Week (Jan_1, Year, Last_Year => True);\n+      begin\n+         --  These two cases are illustrated in the table below\n+\n+         return\n+           Last_Jan_1 = Thursday\n+             or else\n+               (Last_Jan_1 = Wednesday\n+                  and then Is_Leap (Year - 1));\n+      end Last_Year_Has_53_Weeks;\n+\n+   --  Start of processing for Week_In_Year\n \n    begin\n       Split (Date, Year, Month, Day, Hour, Minute, Second, Sub_Second);\n \n-      --  Day offset number for the first week of the year\n+      --  According to ISO 8601, the first week of year Y is the week that\n+      --  contains the first Thursday in year Y. The following table contains\n+      --  all possible combinations of years and weekdays along with examples.\n+\n+      --    +-------+------+-------+---------+\n+      --    | Jan 1 | Leap | Weeks | Example |\n+      --    +-------+------+-------+---------+\n+      --    |  Mon  |  No  |  52   |  2007   |\n+      --    +-------+------+-------+---------+\n+      --    |  Mon  | Yes  |  52   |  1996   |\n+      --    +-------+------+-------+---------+\n+      --    |  Tue  |  No  |  52   |  2002   |\n+      --    +-------+------+-------+---------+\n+      --    |  Tue  | Yes  |  52   |  1980   |\n+      --    +-------+------+-------+---------+\n+      --    |  Wed  |  No  |  52   |  2003   |\n+      --    +-------+------#########---------+\n+      --    |  Wed  | Yes  #  53   #  1992   |\n+      --    +-------+------#-------#---------+\n+      --    |  Thu  |  No  #  53   #  1998   |\n+      --    +-------+------#-------#---------+\n+      --    |  Thu  | Yes  #  53   #  2004   |\n+      --    +-------+------#########---------+\n+      --    |  Fri  |  No  |  52   |  1999   |\n+      --    +-------+------+-------+---------+\n+      --    |  Fri  | Yes  |  52   |  1988   |\n+      --    +-------+------+-------+---------+\n+      --    |  Sat  |  No  |  52   |  1994   |\n+      --    +-------+------+-------+---------+\n+      --    |  Sat  | Yes  |  52   |  1972   |\n+      --    +-------+------+-------+---------+\n+      --    |  Sun  |  No  |  52   |  1995   |\n+      --    +-------+------+-------+---------+\n+      --    |  Sun  | Yes  |  52   |  1956   |\n+      --    +-------+------+-------+---------+\n+\n+      --  A small optimization, the input date is January 1. Note that this\n+      --  is a key day since it determines the number of weeks and is used\n+      --  when special casing the first week of January and the last week of\n+      --  December.\n+\n+      if Day = 1\n+        and then Month = 1\n+      then\n+         Jan_1 := Day_Of_Week (Date);\n+      else\n+         Jan_1 := Day_Of_Week (Time_Of (Year, 1, 1, 0.0));\n+      end if;\n+\n+      if Month = 1 then\n+\n+         --  Special case 1: January 1, 2 and 3. These three days may belong\n+         --  to last year's last week which can be week number 52 or 53.\n+\n+         --    +-----+-----+-----+=====+-----+-----+-----+\n+         --    | Mon | Tue | Wed # Thu # Fri | Sat | Sun |\n+         --    +-----+-----+-----+-----+-----+-----+-----+\n+         --    | 26  | 27  | 28  # 29  # 30  | 31  |  1  |\n+         --    +-----+-----+-----+-----+-----+-----+-----+\n+         --    | 27  | 28  | 29  # 30  # 31  |  1  |  2  |\n+         --    +-----+-----+-----+-----+-----+-----+-----+\n+         --    | 28  | 29  | 30  # 31  #  1  |  2  |  3  |\n+         --    +-----+-----+-----+=====+-----+-----+-----+\n+\n+         if (Day = 1 and then Jan_1 in Friday .. Sunday)\n+           or else\n+            (Day = 2 and then Jan_1 in Friday .. Saturday)\n+           or else\n+            (Day = 3 and then Jan_1 = Friday)\n+         then\n+            if Last_Year_Has_53_Weeks (Jan_1, Year) then\n+               return 53;\n+            else\n+               return 52;\n+            end if;\n+\n+         --  Special case 2: January 1, 2, 3, 4, 5 and 6 of the first week. In\n+         --  this scenario January 1 does not fall on a Monday.\n+\n+         --    +-----+-----+-----+=====+-----+-----+-----+\n+         --    | Mon | Tue | Wed # Thu # Fri | Sat | Sun |\n+         --    +-----+-----+-----+-----+-----+-----+-----+\n+         --    | 29  | 30  | 31  #  1  #  2  |  3  |  4  |\n+         --    +-----+-----+-----+-----+-----+-----+-----+\n+         --    | 30  | 31  |  1  #  2  #  3  |  4  |  5  |\n+         --    +-----+-----+-----+-----+-----+-----+-----+\n+         --    | 31  |  1  |  2  #  3  #  4  |  5  |  6  |\n+         --    +-----+-----+-----+-----+-----+-----+-----+\n+\n+         elsif (Day <= 4 and then Jan_1 in Tuesday .. Thursday)\n+           or else\n+               (Day = 5  and then Jan_1 in Tuesday .. Wednesday)\n+           or else\n+               (Day = 6  and then Jan_1 = Tuesday)\n+         then\n+            return 1;\n+         end if;\n+\n+      --  Special case 3: December 29, 30 and 31. These days may belong to\n+      --  next year's first week.\n+\n+      --    +-----+-----+-----+=====+-----+-----+-----+\n+      --    | Mon | Tue | Wed # Thu # Fri | Sat | Sun |\n+      --    +-----+-----+-----+-----+-----+-----+-----+\n+      --    | 29  | 30  | 31  #  1  #  2  |  3  |  4  |\n+      --    +-----+-----+-----+-----+-----+-----+-----+\n+      --    | 30  | 31  |  1  #  2  #  3  |  4  |  5  |\n+      --    +-----+-----+-----+-----+-----+-----+-----+\n+      --    | 31  |  1  |  2  #  3  #  4  |  5  |  6  |\n+      --    +-----+-----+-----+=====+-----+-----+-----+\n+\n+      elsif Month = 12\n+        and then Day > 28\n+      then\n+         declare\n+            Next_Jan_1 : constant Day_Name :=\n+                           Jan_1_Day_Of_Week (Jan_1, Year, Next_Year => True);\n+         begin\n+            if (Day = 29 and then Next_Jan_1 = Thursday)\n+              or else\n+               (Day = 30 and then Next_Jan_1 in Wednesday .. Thursday)\n+              or else\n+               (Day = 31 and then Next_Jan_1 in Tuesday .. Thursday)\n+            then\n+               return 1;\n+            end if;\n+         end;\n+      end if;\n+\n+      --  Determine the week from which to start counting. If January 1 does\n+      --  not belong to the first week of the input year, then the next week\n+      --  is the first week.\n+\n+      if Jan_1 in Friday .. Sunday then\n+         Start_Week := 1;\n+      else\n+         Start_Week := 2;\n+      end if;\n \n-      Offset := Julian_Day (Year, 1, 1) mod 7;\n+      --  At this point all special combinations have been accounted for and\n+      --  the proper start week has been found. Since January 1 may not fall\n+      --  on a Monday, shift 7 - Day_Name'Pos (Jan_1). This action ensures an\n+      --  origin which falls on Monday.\n \n-      return 1 + ((Day_In_Year (Date) - 1) + Offset) / 7;\n+      Shift := 7 - Day_Name'Pos (Jan_1);\n+      return Start_Week + (Day_In_Year (Date) - Shift - 1) / 7;\n    end Week_In_Year;\n \n end GNAT.Calendar;"}, {"sha": "cc7ae324267b23ffcfdadfb567d5a7f067829d06", "filename": "gcc/ada/g-calend.ads", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd05ba2754e8bf033ce3258f0bc64fd7b2220ed9/gcc%2Fada%2Fg-calend.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd05ba2754e8bf033ce3258f0bc64fd7b2220ed9/gcc%2Fada%2Fg-calend.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-calend.ads?ref=dd05ba2754e8bf033ce3258f0bc64fd7b2220ed9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1999-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1999-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -72,7 +72,13 @@ package GNAT.Calendar is\n    --  December is day 365 or 366 for leap year).\n \n    function Week_In_Year (Date : Ada.Calendar.Time) return Week_In_Year_Number;\n-   --  Returns the week number in the year with Monday as first day of week\n+   --  Returns the week number as defined in ISO 8601. A week always starts on\n+   --  a Monday and the first week of a particular year is the one containing\n+   --  the first Thursday. A year may have 53 weeks when January 1st is a\n+   --  Wednesday and the year is leap or January 1st is a Thursday. Note that\n+   --  the last days of December may belong to the first week on the next year\n+   --  and conversely, the first days of January may belong to the last week\n+   --  of the last year.\n \n    procedure Split\n      (Date       : Ada.Calendar.Time;"}]}