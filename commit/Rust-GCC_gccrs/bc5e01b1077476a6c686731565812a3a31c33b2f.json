{"sha": "bc5e01b1077476a6c686731565812a3a31c33b2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmM1ZTAxYjEwNzc0NzZhNmM2ODY3MzE1NjU4MTJhM2EzMWMzM2IyZg==", "commit": {"author": {"name": "Doug Evans", "email": "dje@google.com", "date": "2012-11-29T21:35:07Z"}, "committer": {"name": "Doug Evans", "email": "devans@gcc.gnu.org", "date": "2012-11-29T21:35:07Z"}, "message": "validate_failures.py: Store options in global variable _OPTIONS.\n\n\t* testsuite-management/validate_failures.py: Store options in global\n\tvariable _OPTIONS.\n\nFrom-SVN: r193967", "tree": {"sha": "c26e9657bfb438882384c011f3876b32bfb7af8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c26e9657bfb438882384c011f3876b32bfb7af8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc5e01b1077476a6c686731565812a3a31c33b2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc5e01b1077476a6c686731565812a3a31c33b2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc5e01b1077476a6c686731565812a3a31c33b2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc5e01b1077476a6c686731565812a3a31c33b2f/comments", "author": null, "committer": null, "parents": [{"sha": "cd1d95bd62d22a06cd79ebb6c3016e4c42f42d38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd1d95bd62d22a06cd79ebb6c3016e4c42f42d38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd1d95bd62d22a06cd79ebb6c3016e4c42f42d38"}], "stats": {"total": 63, "additions": 35, "deletions": 28}, "files": [{"sha": "c5b77e47976120ec002ea55e240a181e7eac2cb1", "filename": "contrib/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc5e01b1077476a6c686731565812a3a31c33b2f/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc5e01b1077476a6c686731565812a3a31c33b2f/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=bc5e01b1077476a6c686731565812a3a31c33b2f", "patch": "@@ -1,5 +1,8 @@\n 2012-11-29  Doug Evans  <dje@google.com>\n \n+\t* testsuite-management/validate_failures.py: Store options in global\n+\tvariable _OPTIONS.\n+\n \t* testsuite-management/validate_failures.py: Rename variable\n \tmanifest_name to manifest_path everywhere.\n "}, {"sha": "24b61aa132fd99561b5c3e55ce6a6771cff49c4d", "filename": "contrib/testsuite-management/validate_failures.py", "status": "modified", "additions": 32, "deletions": 28, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc5e01b1077476a6c686731565812a3a31c33b2f/contrib%2Ftestsuite-management%2Fvalidate_failures.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc5e01b1077476a6c686731565812a3a31c33b2f/contrib%2Ftestsuite-management%2Fvalidate_failures.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Ftestsuite-management%2Fvalidate_failures.py?ref=bc5e01b1077476a6c686731565812a3a31c33b2f", "patch": "@@ -60,6 +60,9 @@\n # target triple used during the build.\n _MANIFEST_PATH_PATTERN = '%s/contrib/testsuite-management/%s.xfail'\n \n+# The options passed to the program.\n+_OPTIONS = None\n+\n def Error(msg):\n   print >>sys.stderr, '\\nerror: %s' % msg\n   sys.exit(1)\n@@ -229,7 +232,7 @@ def GetManifest(manifest_path):\n   If no manifest file exists for this target, it returns an empty set.\n   \"\"\"\n   if os.path.exists(manifest_path):\n-    return ParseManifest(manifest_path)\n+    return ParseSummary(manifest_path)\n   else:\n     return set()\n \n@@ -281,12 +284,12 @@ def CompareResults(manifest, actual):\n   return actual_vs_manifest, manifest_vs_actual\n \n \n-def GetBuildData(options):\n-  target = GetMakefileValue('%s/Makefile' % options.build_dir, 'target_alias=')\n-  srcdir = GetMakefileValue('%s/Makefile' % options.build_dir, 'srcdir =')\n-  if not ValidBuildDirectory(options.build_dir, target):\n+def GetBuildData():\n+  target = GetMakefileValue('%s/Makefile' % _OPTIONS.build_dir, 'target_alias=')\n+  srcdir = GetMakefileValue('%s/Makefile' % _OPTIONS.build_dir, 'srcdir =')\n+  if not ValidBuildDirectory(_OPTIONS.build_dir, target):\n     Error('%s is not a valid GCC top level build directory.' %\n-          options.build_dir)\n+          _OPTIONS.build_dir)\n   print 'Source directory: %s' % srcdir\n   print 'Build target:     %s' % target\n   return srcdir, target, True\n@@ -329,40 +332,40 @@ def PerformComparison(expected, actual, ignore_missing_failures):\n   return tests_ok\n \n \n-def CheckExpectedResults(options):\n-  if not options.manifest:\n-    (srcdir, target, valid_build) = GetBuildData(options)\n+def CheckExpectedResults():\n+  if not _OPTIONS.manifest:\n+    (srcdir, target, valid_build) = GetBuildData()\n     if not valid_build:\n       return False\n     manifest_path = _MANIFEST_PATH_PATTERN % (srcdir, target)\n   else:\n-    manifest_path = options.manifest\n+    manifest_path = _OPTIONS.manifest\n     if not os.path.exists(manifest_path):\n       Error('Manifest file %s does not exist.' % manifest_path)\n \n   print 'Manifest:         %s' % manifest_path\n   manifest = GetManifest(manifest_path)\n-  sum_files = GetSumFiles(options.results, options.build_dir)\n+  sum_files = GetSumFiles(_OPTIONS.results, _OPTIONS.build_dir)\n   actual = GetResults(sum_files)\n \n-  if options.verbosity >= 1:\n+  if _OPTIONS.verbosity >= 1:\n     PrintSummary('Tests expected to fail', manifest)\n     PrintSummary('\\nActual test results', actual)\n \n-  return PerformComparison(manifest, actual, options.ignore_missing_failures)\n+  return PerformComparison(manifest, actual, _OPTIONS.ignore_missing_failures)\n \n \n-def ProduceManifest(options):\n-  (srcdir, target, valid_build) = GetBuildData(options)\n+def ProduceManifest():\n+  (srcdir, target, valid_build) = GetBuildData()\n   if not valid_build:\n     return False\n \n   manifest_path = _MANIFEST_PATH_PATTERN % (srcdir, target)\n-  if os.path.exists(manifest_path) and not options.force:\n+  if os.path.exists(manifest_path) and not _OPTIONS.force:\n     Error('Manifest file %s already exists.\\nUse --force to overwrite.' %\n           manifest_path)\n \n-  sum_files = GetSumFiles(options.results, options.build_dir)\n+  sum_files = GetSumFiles(_OPTIONS.results, _OPTIONS.build_dir)\n   actual = GetResults(sum_files)\n   manifest_file = open(manifest_path, 'w')\n   for result in sorted(actual):\n@@ -373,18 +376,18 @@ def ProduceManifest(options):\n   return True\n \n \n-def CompareBuilds(options):\n-  (srcdir, target, valid_build) = GetBuildData(options)\n+def CompareBuilds():\n+  (srcdir, target, valid_build) = GetBuildData()\n   if not valid_build:\n     return False\n \n-  sum_files = GetSumFiles(options.results, options.build_dir)\n+  sum_files = GetSumFiles(_OPTIONS.results, _OPTIONS.build_dir)\n   actual = GetResults(sum_files)\n \n-  clean_sum_files = GetSumFiles(options.results, options.clean_build)\n+  clean_sum_files = GetSumFiles(_OPTIONS.results, _OPTIONS.clean_build)\n   clean = GetResults(clean_sum_files)\n \n-  return PerformComparison(clean, actual, options.ignore_missing_failures)\n+  return PerformComparison(clean, actual, _OPTIONS.ignore_missing_failures)\n \n \n def Main(argv):\n@@ -430,14 +433,15 @@ def Main(argv):\n                     '.sum files collected from the build directory).')\n   parser.add_option('--verbosity', action='store', dest='verbosity',\n                     type='int', default=0, help='Verbosity level (default = 0)')\n-  (options, _) = parser.parse_args(argv[1:])\n+  global _OPTIONS\n+  (_OPTIONS, _) = parser.parse_args(argv[1:])\n \n-  if options.produce_manifest:\n-    retval = ProduceManifest(options)\n-  elif options.clean_build:\n-    retval = CompareBuilds(options)\n+  if _OPTIONS.produce_manifest:\n+    retval = ProduceManifest()\n+  elif _OPTIONS.clean_build:\n+    retval = CompareBuilds()\n   else:\n-    retval = CheckExpectedResults(options)\n+    retval = CheckExpectedResults()\n \n   if retval:\n     return 0"}]}