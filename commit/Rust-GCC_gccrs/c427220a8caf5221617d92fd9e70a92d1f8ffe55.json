{"sha": "c427220a8caf5221617d92fd9e70a92d1f8ffe55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQyNzIyMGE4Y2FmNTIyMTYxN2Q5MmZkOWU3MGE5MmQxZjhmZmU1NQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2008-06-08T19:06:49Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2008-06-08T19:06:49Z"}, "message": "* except.h: Correct checks for when SJLJ exceptions must be used.\n\nFrom-SVN: r136568", "tree": {"sha": "c239db95c5d9709c60ea31eb408225b5f86f7fa1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c239db95c5d9709c60ea31eb408225b5f86f7fa1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c427220a8caf5221617d92fd9e70a92d1f8ffe55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c427220a8caf5221617d92fd9e70a92d1f8ffe55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c427220a8caf5221617d92fd9e70a92d1f8ffe55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c427220a8caf5221617d92fd9e70a92d1f8ffe55/comments", "author": null, "committer": null, "parents": [{"sha": "cf0fd6189a81b785f9ff33be381d4f4485c972ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf0fd6189a81b785f9ff33be381d4f4485c972ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf0fd6189a81b785f9ff33be381d4f4485c972ef"}], "stats": {"total": 27, "additions": 19, "deletions": 8}, "files": [{"sha": "1892d25562aca6cf5d9cc8daaf1f89a9c3c6afe4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c427220a8caf5221617d92fd9e70a92d1f8ffe55/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c427220a8caf5221617d92fd9e70a92d1f8ffe55/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c427220a8caf5221617d92fd9e70a92d1f8ffe55", "patch": "@@ -1,3 +1,7 @@\n+2008-06-08  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* except.h: Correct checks for when SJLJ exceptions must be used.\n+\n 2008-06-08  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \t* doc/invoke.texi (Wenum-compare): Mention that it is enabled by"}, {"sha": "ae3264e6f3efba560a8746be2ebf47183ab2fa6e", "filename": "gcc/except.h", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c427220a8caf5221617d92fd9e70a92d1f8ffe55/gcc%2Fexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c427220a8caf5221617d92fd9e70a92d1f8ffe55/gcc%2Fexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.h?ref=c427220a8caf5221617d92fd9e70a92d1f8ffe55", "patch": "@@ -135,14 +135,14 @@ extern tree (*lang_eh_runtime_type) (tree);\n    has appropriate support.  */\n \n #ifndef MUST_USE_SJLJ_EXCEPTIONS\n-# if !(defined (EH_RETURN_DATA_REGNO)\t\t\t\\\n+# if defined (EH_RETURN_DATA_REGNO)\t\t\t\\\n        && (defined (TARGET_UNWIND_INFO)\t\t\t\\\n \t   || (DWARF2_UNWIND_INFO\t\t\t\\\n \t       && (defined (EH_RETURN_HANDLER_RTX)\t\\\n-\t\t   || defined (HAVE_eh_return)))))\n-#  define MUST_USE_SJLJ_EXCEPTIONS\t1\n-# else\n+\t\t   || defined (HAVE_eh_return))))\n #  define MUST_USE_SJLJ_EXCEPTIONS\t0\n+# else\n+#  define MUST_USE_SJLJ_EXCEPTIONS\t1\n # endif\n #endif\n \n@@ -152,14 +152,21 @@ extern tree (*lang_eh_runtime_type) (tree);\n # endif\n # if CONFIG_SJLJ_EXCEPTIONS == 0\n #  define USING_SJLJ_EXCEPTIONS\t\t0\n-#  ifndef EH_RETURN_DATA_REGNO\n+#  if !defined(EH_RETURN_DATA_REGNO)\n     #error \"EH_RETURN_DATA_REGNO required\"\n #  endif\n-#  if !defined(EH_RETURN_HANDLER_RTX) && !defined(HAVE_eh_return)\n+#  if ! (defined(TARGET_UNWIND_INFO) || DWARF2_UNWIND_INFO)\n+    #error \"{DWARF2,TARGET}_UNWIND_INFO required\"\n+#  endif\n+#  if !defined(TARGET_UNWIND_INFO) \\\n+\t&& !(defined(EH_RETURN_HANDLER_RTX) || defined(HAVE_eh_return))\n     #error \"EH_RETURN_HANDLER_RTX or eh_return required\"\n #  endif\n-#  if !defined(DWARF2_UNWIND_INFO) && !defined(TARGET_UNWIND_INFO)\n-    #error \"{DWARF2,TARGET}_UNWIND_INFO required\"\n+/* Usually the above error checks will have already triggered an\n+   error, but backends may set MUST_USE_SJLJ_EXCEPTIONS for their own\n+   reasons.  */\n+#  if MUST_USE_SJLJ_EXCEPTIONS\n+    #error \"Must use SJLJ exceptions but configured not to\"\n #  endif\n # endif\n #else"}]}