{"sha": "1578fa9545eb2ddfa81f70f56a0088d9b7078b0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU3OGZhOTU0NWViMmRkZmE4MWY3MGY1NmEwMDg4ZDliNzA3OGIwZA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2001-11-20T00:38:40Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2001-11-20T00:38:40Z"}, "message": "verify.cc (_Jv_BytecodeVerifier::require_array_type): Special case for boolean arrays.\n\n\t* verify.cc (_Jv_BytecodeVerifier::require_array_type): Special\n\tcase for boolean arrays.\n\n\t* verify.cc (_Jv_BytecodeVerifier::compute_jump): Put PC into\n\terror message.\n\nFrom-SVN: r47190", "tree": {"sha": "31dffbc4c9cad6ccd8dbf2c7dff459fb06d16429", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31dffbc4c9cad6ccd8dbf2c7dff459fb06d16429"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1578fa9545eb2ddfa81f70f56a0088d9b7078b0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1578fa9545eb2ddfa81f70f56a0088d9b7078b0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1578fa9545eb2ddfa81f70f56a0088d9b7078b0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1578fa9545eb2ddfa81f70f56a0088d9b7078b0d/comments", "author": null, "committer": null, "parents": [{"sha": "497e89e14f87f1533a7d4e032be88c8e2666503a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/497e89e14f87f1533a7d4e032be88c8e2666503a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/497e89e14f87f1533a7d4e032be88c8e2666503a"}], "stats": {"total": 22, "additions": 19, "deletions": 3}, "files": [{"sha": "01b089abc64da4d701816e4c8fff9e7bfbc1494d", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1578fa9545eb2ddfa81f70f56a0088d9b7078b0d/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1578fa9545eb2ddfa81f70f56a0088d9b7078b0d/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=1578fa9545eb2ddfa81f70f56a0088d9b7078b0d", "patch": "@@ -1,5 +1,11 @@\n 2001-11-19  Tom Tromey  <tromey@redhat.com>\n \n+\t* verify.cc (_Jv_BytecodeVerifier::require_array_type): Special\n+\tcase for boolean arrays.\n+\n+\t* verify.cc (_Jv_BytecodeVerifier::compute_jump): Put PC into\n+\terror message.\n+\n \t* verify.cc (_Jv_BytecodeVerifier::verify_instructions_0)\n \t[op_lshl, op_lshr, op_lushr]: Shift argument is an int, not a\n \tlong."}, {"sha": "b9571c4b8708a09d50ace5a0f7cb5070e2535858", "filename": "libjava/verify.cc", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1578fa9545eb2ddfa81f70f56a0088d9b7078b0d/libjava%2Fverify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1578fa9545eb2ddfa81f70f56a0088d9b7078b0d/libjava%2Fverify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fverify.cc?ref=1578fa9545eb2ddfa81f70f56a0088d9b7078b0d", "patch": "@@ -28,7 +28,6 @@ details.  */\n \n // TO DO\n // * read more about when classes must be loaded\n-// * there are bugs with boolean arrays?\n // * class loader madness\n // * Lots and lots of debugging and testing\n // * type representation is still ugly.  look for the big switches\n@@ -951,7 +950,18 @@ class _Jv_BytecodeVerifier\n \n     type t = array.element_type ();\n     if (! element.compatible (t))\n-      verify_fail (\"incompatible array element type\");\n+      {\n+\t// Special case for byte arrays, which must also be boolean\n+\t// arrays.\n+\tbool ok = true;\n+\tif (element.key == byte_type)\n+\t  {\n+\t    type e2 (boolean_type);\n+\t    ok = e2.compatible (t);\n+\t  }\n+\tif (! ok)\n+\t  verify_fail (\"incompatible array element type\");\n+      }\n \n     // Return T and not ELEMENT, because T might be specialized.\n     return t;\n@@ -992,7 +1002,7 @@ class _Jv_BytecodeVerifier\n   {\n     int npc = start_PC + offset;\n     if (npc < 0 || npc >= current_method->code_length)\n-      verify_fail (\"branch out of range\");\n+      verify_fail (\"branch out of range\", start_PC);\n     return npc;\n   }\n "}]}