{"sha": "e91f04de4bb14746e48091a26234c87287e73163", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTkxZjA0ZGU0YmIxNDc0NmU0ODA5MWEyNjIzNGM4NzI4N2U3MzE2Mw==", "commit": {"author": {"name": "Casper S. Hornstrup", "email": "chorns@users.sourceforge.net", "date": "2002-12-19T22:00:33Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-12-19T22:00:33Z"}, "message": "i386.c (ix86_handle_cdecl_attribute): Check for attributes incompatible with fastcall attribute.\n\n        * config/i386/i386.c (ix86_handle_cdecl_attribute): Check for\n        attributes incompatible with fastcall attribute.\n        (ix86_handle_regparm_attribute): Likewise.\n\n        * config/i386/i386.c (ix86_comp_type_attributes): Check for mismatched\n        fastcall types.\n\n        * config/i386/cygwin.h (TARGET_OS_CPP_BUILTINS): Add fastcall\n        attributes.\n        (ASM_OUTPUT_LABELREF): Define as i386_pe_output_labelref.\n        * config/i386/i386-protos.h (i386_pe_output_labelref): Declare.\n        * config/i386/winnt.c (i386_pe_mark_dllimport). Add __imp_ prefix in\n        i386_pe_output_labelref rather than here.\n        (gen_fastcall_suffix): New function. Decorates a label name with the\n        fastcall prefix (@) and the stdcall suffix.\n        (i386_pe_encode_section_info): Call gen_fastcall_suffix() if a symbol\n        has a fastcall attribute.\n        (i386_pe_output_labelref): New function. Outputs a label reference.\n        * config/i386/i386.c (ix86_attribute_table): Accept 'fastcall' as a\n        valid attribute.\n        (ix86_return_pops_args): Fastcall functions pop the stack.\n        (init_cumulative_args): Reserve registers ECX and EDX if function has\n        fastcall attribute.\n        (function_arg): Use registers ECX and EDX if function has fastcall\n        attribute.\n        * config/i386/i386.h (CUMULATIVE_ARGS): Add fastcall attribute flag.\n        (DLL_IMPORT_EXPORT_PREFIX): Redefine as '#'.\n        (FASTCALL_PREFIX): Define as '@'.\n        * config/i386/mingw32.h (TARGET_OS_CPP_BUILTINS): Add fastcall\n        attributes.\n        * doc/extend.texi: Add documentation of fastcall attribute.\n\n        * testsuite/gcc.dg/i386-fastcall-1.c: New.\n\nCo-Authored-By: Danny Smith <dannysmith@users.sourceforge.net>\nCo-Authored-By: Eric Kohl <ekohl@rz-online.de>\n\nFrom-SVN: r60337", "tree": {"sha": "21891e9229467b063b2f39b501b4c0fe4d386c1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21891e9229467b063b2f39b501b4c0fe4d386c1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e91f04de4bb14746e48091a26234c87287e73163", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e91f04de4bb14746e48091a26234c87287e73163", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e91f04de4bb14746e48091a26234c87287e73163", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e91f04de4bb14746e48091a26234c87287e73163/comments", "author": null, "committer": null, "parents": [{"sha": "61138bb628f5774e6877f2a336db898c28677a14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61138bb628f5774e6877f2a336db898c28677a14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61138bb628f5774e6877f2a336db898c28677a14"}], "stats": {"total": 250, "additions": 234, "deletions": 16}, "files": [{"sha": "7ca33750c02665e7df7dcd3d2d5e87f2e4d72a7e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e91f04de4bb14746e48091a26234c87287e73163/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e91f04de4bb14746e48091a26234c87287e73163/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e91f04de4bb14746e48091a26234c87287e73163", "patch": "@@ -1,3 +1,39 @@\n+2002-12-19  Casper S. Hornstrup  <chorns@users.sourceforge.net>\n+\t    Danny Smith  <dannysmith@users.sourceforge.net>\n+\t    Eric Kohl  <ekohl@rz-online.de>\n+\n+\t* config/i386/i386.c (ix86_handle_cdecl_attribute): Check for\n+\tattributes incompatible with fastcall attribute.\n+\t(ix86_handle_regparm_attribute): Likewise.\n+\n+\t* config/i386/i386.c (ix86_comp_type_attributes): Check for mismatched\n+\tfastcall types.\n+\n+\t* config/i386/cygwin.h (TARGET_OS_CPP_BUILTINS): Add fastcall\n+\tattributes.\n+\t(ASM_OUTPUT_LABELREF): Define as i386_pe_output_labelref.\n+\t* config/i386/i386-protos.h (i386_pe_output_labelref): Declare.\n+\t* config/i386/winnt.c (i386_pe_mark_dllimport). Add __imp_ prefix in\n+\ti386_pe_output_labelref rather than here.\n+\t(gen_fastcall_suffix): New function. Decorates a label name with the\n+\tfastcall prefix (@) and the stdcall suffix.\n+\t(i386_pe_encode_section_info): Call gen_fastcall_suffix() if a symbol\n+\thas a fastcall attribute.\n+\t(i386_pe_output_labelref): New function. Outputs a label reference.\n+\t* config/i386/i386.c (ix86_attribute_table): Accept 'fastcall' as a\n+\tvalid attribute.\n+\t(ix86_return_pops_args): Fastcall functions pop the stack.\n+\t(init_cumulative_args): Reserve registers ECX and EDX if function has\n+\tfastcall attribute.\n+\t(function_arg): Use registers ECX and EDX if function has fastcall\n+\tattribute.\n+\t* config/i386/i386.h (CUMULATIVE_ARGS): Add fastcall attribute flag.\n+\t(DLL_IMPORT_EXPORT_PREFIX): Redefine as '#'.\n+\t(FASTCALL_PREFIX): Define as '@'.\n+\t* config/i386/mingw32.h (TARGET_OS_CPP_BUILTINS): Add fastcall\n+\tattributes.\n+\t* doc/extend.texi: Add documentation of fastcall attribute.\n+\n 2002-12-19  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n \t* configure.in: FORBUILD when build!=host changed from "}, {"sha": "76978980c28ff9c0d17e0e94fff6345863d091ca", "filename": "gcc/config/i386/cygwin.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e91f04de4bb14746e48091a26234c87287e73163/gcc%2Fconfig%2Fi386%2Fcygwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e91f04de4bb14746e48091a26234c87287e73163/gcc%2Fconfig%2Fi386%2Fcygwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin.h?ref=e91f04de4bb14746e48091a26234c87287e73163", "patch": "@@ -61,11 +61,13 @@ Boston, MA 02111-1307, USA.  */\n \tbuiltin_define (\"_X86_=1\");\t\t\t\t\t\\\n \tbuiltin_assert (\"system=winnt\");\t\t\t\t\\\n \tbuiltin_define (\"__stdcall=__attribute__((__stdcall__))\");\t\\\n+\tbuiltin_define (\"__fastcall=__attribute__((__fastcall__))\");\t\\\n \tbuiltin_define (\"__cdecl=__attribute__((__cdecl__))\");\t\t\\\n \tbuiltin_define (\"__declspec(x)=__attribute__((x))\");\t\t\\\n \tif (!flag_iso)\t\t\t\t\t\t\t\\\n \t  {\t\t\t\t\t\t\t\t\\\n \t    builtin_define (\"_stdcall=__attribute__((__stdcall__))\");\t\\\n+\t    builtin_define (\"_fastcall=__attribute__((__fastcall__))\");\t\\\n \t    builtin_define (\"_cdecl=__attribute__((__cdecl__))\");\t\\\n \t  }\t\t\t\t\t\t\t\t\\\n \tMAYBE_UWIN_CPP_BUILTINS ();\t\t\t\t\t\\\n@@ -271,9 +273,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \f\n /* Output a reference to a label.  */\n #undef ASM_OUTPUT_LABELREF\n-#define ASM_OUTPUT_LABELREF(STREAM, NAME)  \t\t\\\n-  fprintf (STREAM, \"%s%s\", USER_LABEL_PREFIX, \t\t\\\n-\t   i386_pe_strip_name_encoding (NAME))\t\t\\\n+#define ASM_OUTPUT_LABELREF  i386_pe_output_labelref\n \n /* Output a common block.  */\n #undef ASM_OUTPUT_COMMON"}, {"sha": "a06a160bfbc3a4c42cf91fb0be07018d6565e18e", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e91f04de4bb14746e48091a26234c87287e73163/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e91f04de4bb14746e48091a26234c87287e73163/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=e91f04de4bb14746e48091a26234c87287e73163", "patch": "@@ -233,3 +233,4 @@ extern void i386_pe_asm_file_end PARAMS ((FILE *));\n extern void i386_pe_encode_section_info PARAMS ((tree, int));\n extern const char *i386_pe_strip_name_encoding PARAMS ((const char *));\n extern const char *i386_pe_strip_name_encoding_full PARAMS ((const char *));\n+extern void i386_pe_output_labelref PARAMS ((FILE *, const char *));"}, {"sha": "4ebf16b0875baa69e3114d4de831940709d992ff", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 69, "deletions": 5, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e91f04de4bb14746e48091a26234c87287e73163/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e91f04de4bb14746e48091a26234c87287e73163/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e91f04de4bb14746e48091a26234c87287e73163", "patch": "@@ -1443,6 +1443,9 @@ const struct attribute_spec ix86_attribute_table[] =\n   /* Stdcall attribute says callee is responsible for popping arguments\n      if they are not variable.  */\n   { \"stdcall\",   0, 0, false, true,  true,  ix86_handle_cdecl_attribute },\n+  /* Fastcall attribute says callee is responsible for popping arguments\n+     if they are not variable.  */\n+  { \"fastcall\",  0, 0, false, true,  true,  ix86_handle_cdecl_attribute },\n   /* Cdecl attribute says the callee is a normal C declaration */\n   { \"cdecl\",     0, 0, false, true,  true,  ix86_handle_cdecl_attribute },\n   /* Regparm attribute specifies how many integer arguments are to be\n@@ -1510,7 +1513,7 @@ ix86_function_ok_for_sibcall (decl, exp)\n   return true;\n }\n \n-/* Handle a \"cdecl\" or \"stdcall\" attribute;\n+/* Handle a \"cdecl\", \"stdcall\", or \"fastcall\" attribute;\n    arguments as in struct attribute_spec.handler.  */\n static tree\n ix86_handle_cdecl_attribute (node, name, args, flags, no_add_attrs)\n@@ -1529,6 +1532,27 @@ ix86_handle_cdecl_attribute (node, name, args, flags, no_add_attrs)\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n+  else\n+    {\n+      if (is_attribute_p (\"fastcall\", name))\n+        {\n+          if (lookup_attribute (\"stdcall\", TYPE_ATTRIBUTES (*node)))\n+            {\n+              error (\"fastcall and stdcall attributes are not compatible\");\n+            }\n+           else if (lookup_attribute (\"regparm\", TYPE_ATTRIBUTES (*node)))\n+            {\n+              error (\"fastcall and regparm attributes are not compatible\");\n+            }\n+        }\n+      else if (is_attribute_p (\"stdcall\", name))\n+        {\n+          if (lookup_attribute (\"fastcall\", TYPE_ATTRIBUTES (*node)))\n+            {\n+              error (\"fastcall and stdcall attributes are not compatible\");\n+            }\n+        }\n+    }\n \n   if (TARGET_64BIT)\n     {\n@@ -1575,6 +1599,11 @@ ix86_handle_regparm_attribute (node, name, args, flags, no_add_attrs)\n \t\t   IDENTIFIER_POINTER (name), REGPARM_MAX);\n \t  *no_add_attrs = true;\n \t}\n+\n+      if (lookup_attribute (\"fastcall\", TYPE_ATTRIBUTES (*node)))\n+    {\n+      error (\"fastcall and regparm attributes are not compatible\");\n+    }\n     }\n \n   return NULL_TREE;\n@@ -1595,6 +1624,11 @@ ix86_comp_type_attributes (type1, type2)\n   if (TREE_CODE (type1) != FUNCTION_TYPE)\n     return 1;\n \n+  /*  Check for mismatched fastcall types */ \n+  if (!lookup_attribute (\"fastcall\", TYPE_ATTRIBUTES (type1))\n+      != !lookup_attribute (\"fastcall\", TYPE_ATTRIBUTES (type2)))\n+    return 0; \n+\n   /* Check for mismatched return types (cdecl vs stdcall).  */\n   if (!lookup_attribute (rtdstr, TYPE_ATTRIBUTES (type1))\n       != !lookup_attribute (rtdstr, TYPE_ATTRIBUTES (type2)))\n@@ -1645,8 +1679,9 @@ ix86_return_pops_args (fundecl, funtype, size)\n     /* Cdecl functions override -mrtd, and never pop the stack.  */\n   if (! lookup_attribute (\"cdecl\", TYPE_ATTRIBUTES (funtype))) {\n \n-    /* Stdcall functions will pop the stack if not variable args.  */\n-    if (lookup_attribute (\"stdcall\", TYPE_ATTRIBUTES (funtype)))\n+    /* Stdcall and fastcall functions will pop the stack if not variable args. */\n+    if (lookup_attribute (\"stdcall\", TYPE_ATTRIBUTES (funtype))\n+        || lookup_attribute (\"fastcall\", TYPE_ATTRIBUTES (funtype)))\n       rtd = 1;\n \n     if (rtd\n@@ -1732,6 +1767,17 @@ init_cumulative_args (cum, fntype, libname)\n     }\n   cum->maybe_vaarg = false;\n \n+  /* Use ecx and edx registers if function has fastcall attribute */\n+  if (fntype && !TARGET_64BIT)\n+    {\n+      if (lookup_attribute (\"fastcall\", TYPE_ATTRIBUTES (fntype)))\n+\t{\n+\t  cum->nregs = 2;\n+\t  cum->fastcall = 1;\n+\t}\n+    }\n+\n+\n   /* Determine if this function has variable arguments.  This is\n      indicated by the last argument being 'void_type_mode' if there\n      are no variable arguments.  If there are variable arguments, then\n@@ -1746,7 +1792,10 @@ init_cumulative_args (cum, fntype, libname)\n \t  if (next_param == 0 && TREE_VALUE (param) != void_type_node)\n \t    {\n \t      if (!TARGET_64BIT)\n-\t\tcum->nregs = 0;\n+\t\t{\n+\t\t  cum->nregs = 0;\n+\t\t  cum->fastcall = 0;\n+\t\t}\n \t      cum->maybe_vaarg = true;\n \t    }\n \t}\n@@ -2396,7 +2445,22 @@ function_arg (cum, mode, type, named)\n       case HImode:\n       case QImode:\n \tif (words <= cum->nregs)\n-\t  ret = gen_rtx_REG (mode, cum->regno);\n+ \t  {\n+ \t    int regno = cum->regno;\n+\n+ \t    /* Fastcall allocates the first two DWORD (SImode) or\n+ \t       smaller arguments to ECX and EDX.  */\n+ \t    if (cum->fastcall)\n+ \t      {\n+ \t        if (mode == BLKmode || mode == DImode)\n+ \t          break;\n+ \n+ \t        /* ECX not EAX is the first allocated register.  */\n+ \t        if (regno == 0)\n+ \t\t      regno = 2;\n+ \t      }\n+ \t    ret = gen_rtx_REG (mode, regno);\n+ \t  }\n \tbreak;\n       case TImode:\n \tif (cum->sse_nregs)"}, {"sha": "964237d10bb3f49624703c402d4b8aa004be1914", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e91f04de4bb14746e48091a26234c87287e73163/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e91f04de4bb14746e48091a26234c87287e73163/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=e91f04de4bb14746e48091a26234c87287e73163", "patch": "@@ -1710,6 +1710,7 @@ typedef struct ix86_args {\n   int words;\t\t\t/* # words passed so far */\n   int nregs;\t\t\t/* # registers available for passing */\n   int regno;\t\t\t/* next available register number */\n+  int fastcall;\t\t/* fastcall calling convention is used */\n   int sse_words;\t\t/* # sse words passed so far */\n   int sse_nregs;\t\t/* # sse registers available for passing */\n   int sse_regno;\t\t/* next available sse register number */\n@@ -3479,7 +3480,9 @@ enum fp_cw_mode {FP_CW_STORED, FP_CW_UNINITIALIZED, FP_CW_ANY};\n \f\n #define MACHINE_DEPENDENT_REORG(X) x86_machine_dependent_reorg(X)\n \n-#define DLL_IMPORT_EXPORT_PREFIX '@'\n+#define DLL_IMPORT_EXPORT_PREFIX '#'\n+\n+#define FASTCALL_PREFIX '@'\n \n /*\n Local variables:"}, {"sha": "78dd19bdd81a591425985c4b857ea7d92737ea52", "filename": "gcc/config/i386/mingw32.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e91f04de4bb14746e48091a26234c87287e73163/gcc%2Fconfig%2Fi386%2Fmingw32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e91f04de4bb14746e48091a26234c87287e73163/gcc%2Fconfig%2Fi386%2Fmingw32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmingw32.h?ref=e91f04de4bb14746e48091a26234c87287e73163", "patch": "@@ -50,11 +50,13 @@ Boston, MA 02111-1307, USA.  */\n \tbuiltin_define_std (\"WINNT\");\t\t\t\t\t\\\n \tbuiltin_define (\"_X86_=1\");\t\t\t\t\t\\\n \tbuiltin_define (\"__stdcall=__attribute__((__stdcall__))\");\t\\\n+\tbuiltin_define (\"__fastcall=__attribute__((__fastcall__))\");\t\\\n \tbuiltin_define (\"__cdecl=__attribute__((__cdecl__))\");\t\t\\\n \tbuiltin_define (\"__declspec(x)=__attribute__((x))\");\t\t\\\n \tif (!flag_iso)\t\t\t\t\t\t\t\\\n \t  {\t\t\t\t\t\t\t\t\\\n \t    builtin_define (\"_stdcall=__attribute__((__stdcall__))\");\t\\\n+\t    builtin_define (\"_fastcall=__attribute__((__fastcall__))\");\t\\\n \t    builtin_define (\"_cdecl=__attribute__((__cdecl__))\");\t\\\n \t  }\t\t\t\t\t\t\t\t\\\n \tEXTRA_OS_CPP_BUILTINS ();\t\t\t\t\t\\"}, {"sha": "89dd007693c588d78e3dcf85140728b5cc0d33f0", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 90, "deletions": 7, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e91f04de4bb14746e48091a26234c87287e73163/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e91f04de4bb14746e48091a26234c87287e73163/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=e91f04de4bb14746e48091a26234c87287e73163", "patch": "@@ -48,6 +48,7 @@ Boston, MA 02111-1307, USA.  */\n \n static tree associated_type PARAMS ((tree));\n const char * gen_stdcall_suffix PARAMS ((tree));\n+const char * gen_fastcall_suffix PARAMS ((tree));\n int i386_pe_dllexport_p PARAMS ((tree));\n int i386_pe_dllimport_p PARAMS ((tree));\n void i386_pe_mark_dllexport PARAMS ((tree));\n@@ -315,8 +316,8 @@ i386_pe_mark_dllimport (decl)\n       return;\n     }\n \n-  newname = alloca (strlen (oldname) + 11);\n-  sprintf (newname, \"%ci._imp__%s\", DLL_IMPORT_EXPORT_PREFIX, oldname);\n+  newname = alloca (strlen (oldname) + 4);\n+  sprintf (newname, \"%ci.%s\", DLL_IMPORT_EXPORT_PREFIX, oldname);\n \n   /* We pass newname through get_identifier to ensure it has a unique\n      address.  RTL processing can sometimes peek inside the symbol ref\n@@ -333,6 +334,43 @@ i386_pe_mark_dllimport (decl)\n   DECL_NON_ADDR_CONST_P (decl) = 1;\n }\n \n+/* Return string which is the former assembler name modified with a \n+   prefix consisting of FASTCALL_PREFIX and a suffix consisting of an\n+   atsign (@) followed by the number of bytes of arguments.  */\n+\n+const char *\n+gen_fastcall_suffix (decl)\n+  tree decl;\n+{\n+  int total = 0;\n+\n+  const char *asmname = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n+  char *newsym;\n+\n+  if (TYPE_ARG_TYPES (TREE_TYPE (decl)))\n+    if (TREE_VALUE (tree_last (TYPE_ARG_TYPES (TREE_TYPE (decl))))\n+        == void_type_node)\n+      {\n+\ttree formal_type = TYPE_ARG_TYPES (TREE_TYPE (decl));\n+\n+\twhile (TREE_VALUE (formal_type) != void_type_node)\n+\t  {\n+\t    int parm_size\n+\t      = TREE_INT_CST_LOW (TYPE_SIZE (TREE_VALUE (formal_type)));\n+\t    /* Must round up to include padding.  This is done the same\n+\t       way as in store_one_arg.  */\n+\t    parm_size = ((parm_size + PARM_BOUNDARY - 1)\n+\t\t\t / PARM_BOUNDARY * PARM_BOUNDARY);\n+\t    total += parm_size;\n+\t    formal_type = TREE_CHAIN (formal_type);\n+\t  }\n+      }\n+\n+  newsym = xmalloc (strlen (asmname) + 11);\n+  sprintf (newsym, \"%c%s@%d\", FASTCALL_PREFIX, asmname, total/BITS_PER_UNIT);\n+  return IDENTIFIER_POINTER (get_identifier (newsym));\n+}\n+\n /* Return string which is the former assembler name modified with a \n    suffix consisting of an atsign (@) followed by the number of bytes of \n    arguments */\n@@ -389,10 +427,16 @@ i386_pe_encode_section_info (decl, first)\n     }\n \n   if (TREE_CODE (decl) == FUNCTION_DECL)\n-    if (lookup_attribute (\"stdcall\",\n-\t\t\t  TYPE_ATTRIBUTES (TREE_TYPE (decl))))\n-      XEXP (DECL_RTL (decl), 0) = \n-\tgen_rtx (SYMBOL_REF, Pmode, gen_stdcall_suffix (decl));\n+    {\n+      if (lookup_attribute (\"stdcall\",\n+\t\t\t    TYPE_ATTRIBUTES (TREE_TYPE (decl))))\n+        XEXP (DECL_RTL (decl), 0) = \n+\t  gen_rtx (SYMBOL_REF, Pmode, gen_stdcall_suffix (decl));\n+      else if (lookup_attribute (\"fastcall\",\n+\t\t\t\t TYPE_ATTRIBUTES (TREE_TYPE (decl))))\n+        XEXP (DECL_RTL (decl), 0) =\n+\t  gen_rtx (SYMBOL_REF, Pmode, gen_fastcall_suffix (decl));\n+    }\n \n   /* Mark the decl so we can tell from the rtl whether the object is\n      dllexport'd or dllimport'd.  */\n@@ -426,7 +470,8 @@ i386_pe_encode_section_info (decl, first)\n     }\n }\n \n-/* Strip only the leading encoding, leaving the stdcall suffix.  */\n+/* Strip only the leading encoding, leaving the stdcall suffix and fastcall\n+   prefix if it exists.  */\n \n const char *\n i386_pe_strip_name_encoding (str)\n@@ -455,6 +500,44 @@ i386_pe_strip_name_encoding_full (str)\n   return name;\n }\n \n+/* Output a reference to a label. Fastcall symbols are prefixed with @,\n+   whereas symbols for functions using other calling conventions don't\n+   have a prefix (unless they are marked dllimport or dllexport).  */\n+\n+void i386_pe_output_labelref (stream, name)\n+     FILE *stream;\n+     const char *name;\n+{\n+  char prefix[4];\n+\n+  sprintf (prefix, \"%ci.\", DLL_IMPORT_EXPORT_PREFIX);\n+  if (strncmp (name, prefix, strlen (prefix)) == 0)\n+    {\n+      if (name[3] == FASTCALL_PREFIX)\n+        {\n+          fprintf (stream, \"__imp_%s\",\n+                   i386_pe_strip_name_encoding (name));\n+        }\n+      else\n+        {\n+          fprintf (stream, \"__imp__%s\",\n+                   i386_pe_strip_name_encoding (name));\n+        }\n+    }\n+  else if ((name[0] == FASTCALL_PREFIX)\n+           || ((name[0] == DLL_IMPORT_EXPORT_PREFIX)\n+               && (name[3] == FASTCALL_PREFIX)))\n+    {\n+      fprintf (stream, \"%s\",\n+               i386_pe_strip_name_encoding (name));\n+    }\n+  else\n+    {\n+      fprintf (stream, \"%s%s\", USER_LABEL_PREFIX,\n+               i386_pe_strip_name_encoding (name));\n+    }\n+}\n+\n void\n i386_pe_unique_section (decl, reloc)\n      tree decl;"}, {"sha": "e18ad13bfa88184f5a78a8c604157dca7c944563", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e91f04de4bb14746e48091a26234c87287e73163/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e91f04de4bb14746e48091a26234c87287e73163/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=e91f04de4bb14746e48091a26234c87287e73163", "patch": "@@ -2370,6 +2370,14 @@ pass arguments, unless it takes a variable number of arguments.\n The PowerPC compiler for Windows NT currently ignores the @code{stdcall}\n attribute.\n \n+@item fastcall\n+@cindex functions that pop the argument stack on the 386\n+On the Intel 386, the @code{fastcall} attribute causes the compiler to\n+pass the first two arguments in the registers ECX and EDX. Subsequent\n+arguments are passed on the stack. The called function will pop the \n+arguments off the stack. If the number of arguments is variable all\n+arguments are pushed on the stack.\n+\n @item cdecl\n @cindex functions that do pop the argument stack on the 386\n @opindex mrtd"}, {"sha": "2db4a8e43aed8266a7ae4f4feee2cd880e0540a9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e91f04de4bb14746e48091a26234c87287e73163/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e91f04de4bb14746e48091a26234c87287e73163/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e91f04de4bb14746e48091a26234c87287e73163", "patch": "@@ -1,3 +1,7 @@\n+2002-12-19  Casper S. Hornstrup  <chorns@users.sourceforge.net>\n+\n+\t* gcc.dg/i386-fastcall-1.c: New.\n+\n 2002-12-19  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* gcc.c-torture/execute/20021219-1.c: New test."}, {"sha": "c286ed3aec7b18947eff68b72153bddc6baf2363", "filename": "gcc/testsuite/gcc.dg/i386-fastcall-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e91f04de4bb14746e48091a26234c87287e73163/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-fastcall-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e91f04de4bb14746e48091a26234c87287e73163/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-fastcall-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-fastcall-1.c?ref=e91f04de4bb14746e48091a26234c87287e73163", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target i386-pc-mingw32* i386-pc-cygwin* } } */\n+\n+void\n+__attribute__ ((fastcall))\n+f1() { }\n+\n+void\n+_fastcall\n+f2() { }\n+\n+void\n+__fastcall\n+f3() { }\n+\n+int\n+__attribute__ ((fastcall))\n+f4(int x, int y, int z) { }"}]}