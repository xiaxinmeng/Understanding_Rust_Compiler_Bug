{"sha": "1769232d2607e9219b1932090c1036a6ed334152", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc2OTIzMmQyNjA3ZTkyMTliMTkzMjA5MGMxMDM2YTZlZDMzNDE1Mg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-03-02T16:21:30Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-03-02T16:21:30Z"}, "message": "re PR libstdc++/28080 (header dependencies)\n\n2007-03-02  Paolo Carlini  <pcarlini@suse.de>\n\n\t* testsuite/thread/pthread1.cc: Include <pthread.h>.\n\t* testsuite/thread/pthread2.cc: Likewise.\n\t* testsuite/thread/pthread3.cc: Likewise.\n\t* testsuite/thread/pthread4.cc: Likewise.\n\t* testsuite/thread/pthread5.cc: Likewise.\n\t* testsuite/thread/pthread6.cc: Likewise.\n\t* testsuite/thread/pthread7-rope.cc: Likewise.\n\n2007-03-02  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/28080 (partial)\n\t* include/tr1/random (class random_device): Rework to use simple\n\t<cstdio> input, do not include <fstream>.\n\t* include/tr1/random.tcc (all inserters and extractors): Refer\n\tto ios_base as base class of basic_istream or basic_ostream.\n\nFrom-SVN: r122478", "tree": {"sha": "e52eaced466cf7de7cf45af492ba4bcb23c5d65c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e52eaced466cf7de7cf45af492ba4bcb23c5d65c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1769232d2607e9219b1932090c1036a6ed334152", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1769232d2607e9219b1932090c1036a6ed334152", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1769232d2607e9219b1932090c1036a6ed334152", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1769232d2607e9219b1932090c1036a6ed334152/comments", "author": null, "committer": null, "parents": [{"sha": "7393f7f8d04844ab976238ceffcc8f8c00214c92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7393f7f8d04844ab976238ceffcc8f8c00214c92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7393f7f8d04844ab976238ceffcc8f8c00214c92"}], "stats": {"total": 276, "additions": 179, "deletions": 97}, "files": [{"sha": "e43a953324538242371110234928a844b5d7bdb2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1769232d2607e9219b1932090c1036a6ed334152/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1769232d2607e9219b1932090c1036a6ed334152/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1769232d2607e9219b1932090c1036a6ed334152", "patch": "@@ -1,3 +1,21 @@\n+2007-03-02  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* testsuite/thread/pthread1.cc: Include <pthread.h>.\n+\t* testsuite/thread/pthread2.cc: Likewise.\n+\t* testsuite/thread/pthread3.cc: Likewise.\n+\t* testsuite/thread/pthread4.cc: Likewise.\n+\t* testsuite/thread/pthread5.cc: Likewise.\n+\t* testsuite/thread/pthread6.cc: Likewise.\n+\t* testsuite/thread/pthread7-rope.cc: Likewise.\n+\n+2007-03-02  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/28080 (partial)\n+\t* include/tr1/random (class random_device): Rework to use simple\n+\t<cstdio> input, do not include <fstream>.\n+\t* include/tr1/random.tcc (all inserters and extractors): Refer\n+\tto ios_base as base class of basic_istream or basic_ostream.\n+\n 2007-03-01  Brooks Moses  <brooks.moses@codesourcery.com>\n \n \t* Makefile.am: Add dummy install-pdf target."}, {"sha": "e8483c7efb9ebcd7daf54976d75ddc42a7619cb9", "filename": "libstdc++-v3/include/tr1/random", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1769232d2607e9219b1932090c1036a6ed334152/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1769232d2607e9219b1932090c1036a6ed334152/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom?ref=1769232d2607e9219b1932090c1036a6ed334152", "patch": "@@ -35,17 +35,16 @@\n #ifndef _TR1_RANDOM\n #define _TR1_RANDOM 1\n \n-#include <bits/stl_algobase.h>\n-#include <bits/concept_check.h>\n #include <cmath>\n-#include <debug/debug.h>\n-#include <iterator>\n+#include <cstdio>\n+#include <string>\n #include <iosfwd>\n #include <limits>\n #include <tr1/type_traits>\n #include <tr1/cmath>\n-#include <fstream>\n #include <ext/type_traits.h>\n+#include <bits/concept_check.h>\n+#include <debug/debug.h>\n \n namespace std\n {\n@@ -1421,14 +1420,13 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     random_device(const std::string& __token = \"/dev/urandom\")\n     {\n       if ((__token != \"/dev/urandom\" && __token != \"/dev/random\")\n-\t  || !_M_filebuf.open(__token.c_str(),\n-\t\t\t      std::ios_base::in | std::ios_base::binary))\n+\t  || !(_M_file = std::fopen(__token.c_str(), \"rb\")))\n \tstd::__throw_runtime_error(__N(\"random_device::\"\n \t\t\t\t       \"random_device(const std::string&)\"));\n     }\n \n     ~random_device()\n-    { _M_filebuf.close(); }\n+    { std::fclose(_M_file); }\n \n #else\n \n@@ -1474,7 +1472,8 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     {\n #ifdef _GLIBCXX_USE_RANDOM_TR1\n       result_type __ret;\n-      _M_filebuf.sgetn(reinterpret_cast<char*>(&__ret), sizeof(result_type));\n+      std::fread(reinterpret_cast<void*>(&__ret), sizeof(result_type),\n+\t\t 1, _M_file);\n       return __ret;\n #else\n       return _M_mt();\n@@ -1486,7 +1485,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     void operator=(const random_device&);\n \n #ifdef _GLIBCXX_USE_RANDOM_TR1\n-    std::filebuf _M_filebuf;\n+    FILE*        _M_file;\n #else\n     mt19937      _M_mt;\n #endif"}, {"sha": "3962816c8cef94ccb1f347b47564546238c85996", "filename": "libstdc++-v3/include/tr1/random.tcc", "status": "modified", "additions": 132, "deletions": 59, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1769232d2607e9219b1932090c1036a6ed334152/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1769232d2607e9219b1932090c1036a6ed334152/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc?ref=1769232d2607e9219b1932090c1036a6ed334152", "patch": "@@ -1,6 +1,6 @@\n // random number generation (out of line) -*- C++ -*-\n \n-// Copyright (C) 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -143,10 +143,12 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n \t       const linear_congruential<_UIntType, __a, __c, __m>& __lcr)\n     {\n-      const std::ios_base::fmtflags __flags = __os.flags();\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n       const _CharT __fill = __os.fill();\n-      __os.flags(std::ios_base::dec | std::ios_base::fixed\n-\t\t | std::ios_base::left);\n+      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);\n       __os.fill(__os.widen(' '));\n \n       __os << __lcr._M_x;\n@@ -162,8 +164,11 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     operator>>(std::basic_istream<_CharT, _Traits>& __is,\n \t       linear_congruential<_UIntType, __a, __c, __m>& __lcr)\n     {\n-      const std::ios_base::fmtflags __flags = __is.flags();\n-      __is.flags(std::ios_base::dec);\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec);\n \n       __is >> __lcr._M_x;\n \n@@ -268,11 +273,13 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t       const mersenne_twister<_UIntType, __w, __n, __m,\n \t       __r, __a, __u, __s, __b, __t, __c, __l>& __x)\n     {\n-      const std::ios_base::fmtflags __flags = __os.flags();\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n       const _CharT __fill = __os.fill();\n       const _CharT __space = __os.widen(' ');\n-      __os.flags(std::ios_base::dec | std::ios_base::fixed\n-\t\t | std::ios_base::left);\n+      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);\n       __os.fill(__space);\n \n       for (int __i = 0; __i < __n - 1; ++__i)\n@@ -293,8 +300,11 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t       mersenne_twister<_UIntType, __w, __n, __m,\n \t       __r, __a, __u, __s, __b, __t, __c, __l>& __x)\n     {\n-      const std::ios_base::fmtflags __flags = __is.flags();\n-      __is.flags(std::ios_base::dec | std::ios_base::skipws);\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n \n       for (int __i = 0; __i < __n; ++__i)\n \t__is >> __x._M_x[__i];\n@@ -385,11 +395,13 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n \t       const subtract_with_carry<_IntType, __m, __s, __r>& __x)\n     {\n-      const std::ios_base::fmtflags __flags = __os.flags();\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n       const _CharT __fill = __os.fill();\n       const _CharT __space = __os.widen(' ');\n-      __os.flags(std::ios_base::dec | std::ios_base::fixed\n-\t\t | std::ios_base::left);\n+      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);\n       __os.fill(__space);\n \n       for (int __i = 0; __i < __r; ++__i)\n@@ -407,8 +419,11 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     operator>>(std::basic_istream<_CharT, _Traits>& __is,\n \t       subtract_with_carry<_IntType, __m, __s, __r>& __x)\n     {\n-      const std::ios_base::fmtflags __flags = __is.flags();\n-      __is.flags(std::ios_base::dec | std::ios_base::skipws);\n+      typedef std::basic_ostream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n \n       for (int __i = 0; __i < __r; ++__i)\n \t__is >> __x._M_x[__i];\n@@ -524,11 +539,13 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n \t       const subtract_with_carry_01<_RealType, __w, __s, __r>& __x)\n     {\n-      const std::ios_base::fmtflags __flags = __os.flags();\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n       const _CharT __fill = __os.fill();\n       const _CharT __space = __os.widen(' ');\n-      __os.flags(std::ios_base::dec | std::ios_base::fixed\n-\t\t | std::ios_base::left);\n+      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);\n       __os.fill(__space);\n \n       for (int __i = 0; __i < __r; ++__i)\n@@ -547,8 +564,11 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     operator>>(std::basic_istream<_CharT, _Traits>& __is,\n \t       subtract_with_carry_01<_RealType, __w, __s, __r>& __x)\n     {\n-      const std::ios_base::fmtflags __flags = __is.flags();\n-      __is.flags(std::ios_base::dec | std::ios_base::skipws);\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n \n       for (int __i = 0; __i < __r; ++__i)\n \tfor (int __j = 0; __j < __x.__n; ++__j)\n@@ -586,11 +606,14 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t       const discard_block<_UniformRandomNumberGenerator,\n \t       __p, __r>& __x)\n     {\n-      const std::ios_base::fmtflags __flags = __os.flags();\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n       const _CharT __fill = __os.fill();\n       const _CharT __space = __os.widen(' ');\n-      __os.flags(std::ios_base::dec | std::ios_base::fixed\n-\t\t | std::ios_base::left);\n+      __os.flags(__ios_base::dec | __ios_base::fixed\n+\t\t | __ios_base::left);\n       __os.fill(__space);\n \n       __os << __x._M_b << __space << __x._M_n;\n@@ -606,8 +629,11 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     operator>>(std::basic_istream<_CharT, _Traits>& __is,\n \t       discard_block<_UniformRandomNumberGenerator, __p, __r>& __x)\n     {\n-      const std::ios_base::fmtflags __flags = __is.flags();\n-      __is.flags(std::ios_base::dec | std::ios_base::skipws);\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n \n       __is >> __x._M_b >> __x._M_n;\n \n@@ -686,11 +712,13 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t       const xor_combine<_UniformRandomNumberGenerator1, __s1,\n \t       _UniformRandomNumberGenerator2, __s2>& __x)\n     {\n-      const std::ios_base::fmtflags __flags = __os.flags();\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n       const _CharT __fill = __os.fill();\n       const _CharT __space = __os.widen(' ');\n-      __os.flags(std::ios_base::dec | std::ios_base::fixed \n-\t\t | std::ios_base::left);\n+      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);\n       __os.fill(__space);\n \n       __os << __x.base1() << __space << __x.base2();\n@@ -708,8 +736,11 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t       xor_combine<_UniformRandomNumberGenerator1, __s1,\n \t       _UniformRandomNumberGenerator2, __s2>& __x)\n     {\n-      const std::ios_base::fmtflags __flags = __is.flags();\n-      __is.flags(std::ios_base::skipws);\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::skipws);\n \n       __is >> __x._M_b1 >> __x._M_b2;\n \n@@ -723,10 +754,13 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n \t       const uniform_int<_IntType>& __x)\n     {\n-      const std::ios_base::fmtflags __flags = __os.flags();\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n       const _CharT __fill = __os.fill();\n       const _CharT __space = __os.widen(' ');\n-      __os.flags(std::ios_base::scientific | std::ios_base::left);\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n       __os.fill(__space);\n \n       __os << __x.min() << __space << __x.max();\n@@ -741,8 +775,11 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     operator>>(std::basic_istream<_CharT, _Traits>& __is,\n \t       uniform_int<_IntType>& __x)\n     {\n-      const std::ios_base::fmtflags __flags = __is.flags();\n-      __is.flags(std::ios_base::dec | std::ios_base::skipws);\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n \n       __is >> __x._M_min >> __x._M_max;\n \n@@ -756,10 +793,13 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n \t       const bernoulli_distribution& __x)\n     {\n-      const std::ios_base::fmtflags __flags = __os.flags();\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n       const _CharT __fill = __os.fill();\n       const std::streamsize __precision = __os.precision();\n-      __os.flags(std::ios_base::scientific | std::ios_base::left);\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n       __os.fill(__os.widen(' '));\n       __os.precision(__gnu_cxx::__numeric_traits<double>::__max_digits10);\n \n@@ -800,10 +840,13 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n \t       const geometric_distribution<_IntType, _RealType>& __x)\n     {\n-      const std::ios_base::fmtflags __flags = __os.flags();\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n       const _CharT __fill = __os.fill();\n       const std::streamsize __precision = __os.precision();\n-      __os.flags(std::ios_base::scientific | std::ios_base::left);\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n       __os.fill(__os.widen(' '));\n       __os.precision(__gnu_cxx::__numeric_traits<_RealType>::__max_digits10);\n \n@@ -960,11 +1003,14 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n \t       const poisson_distribution<_IntType, _RealType>& __x)\n     {\n-      const std::ios_base::fmtflags __flags = __os.flags();\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n       const _CharT __fill = __os.fill();\n       const std::streamsize __precision = __os.precision();\n       const _CharT __space = __os.widen(' ');\n-      __os.flags(std::ios_base::scientific | std::ios_base::left);\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n       __os.fill(__space);\n       __os.precision(__gnu_cxx::__numeric_traits<_RealType>::__max_digits10);\n \n@@ -982,8 +1028,11 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     operator>>(std::basic_istream<_CharT, _Traits>& __is,\n \t       poisson_distribution<_IntType, _RealType>& __x)\n     {\n-      const std::ios_base::fmtflags __flags = __is.flags();\n-      __is.flags(std::ios_base::skipws);\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::skipws);\n \n       __is >> __x._M_mean >> __x._M_nd;\n       __x._M_initialize();\n@@ -1192,11 +1241,14 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n \t       const binomial_distribution<_IntType, _RealType>& __x)\n     {\n-      const std::ios_base::fmtflags __flags = __os.flags();\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n       const _CharT __fill = __os.fill();\n       const std::streamsize __precision = __os.precision();\n       const _CharT __space = __os.widen(' ');\n-      __os.flags(std::ios_base::scientific | std::ios_base::left);\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n       __os.fill(__space);\n       __os.precision(__gnu_cxx::__numeric_traits<_RealType>::__max_digits10);\n \n@@ -1215,8 +1267,11 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     operator>>(std::basic_istream<_CharT, _Traits>& __is,\n \t       binomial_distribution<_IntType, _RealType>& __x)\n     {\n-      const std::ios_base::fmtflags __flags = __is.flags();\n-      __is.flags(std::ios_base::dec | std::ios_base::skipws);\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n \n       __is >> __x._M_t >> __x._M_p >> __x._M_nd;\n       __x._M_initialize();\n@@ -1231,11 +1286,14 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n \t       const uniform_real<_RealType>& __x)\n     {\n-      const std::ios_base::fmtflags __flags = __os.flags();\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n       const _CharT __fill = __os.fill();\n       const std::streamsize __precision = __os.precision();\n       const _CharT __space = __os.widen(' ');\n-      __os.flags(std::ios_base::scientific | std::ios_base::left);\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n       __os.fill(__space);\n       __os.precision(__gnu_cxx::__numeric_traits<_RealType>::__max_digits10);\n \n@@ -1252,8 +1310,11 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     operator>>(std::basic_istream<_CharT, _Traits>& __is,\n \t       uniform_real<_RealType>& __x)\n     {\n-      const std::ios_base::fmtflags __flags = __is.flags();\n-      __is.flags(std::ios_base::skipws);\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::skipws);\n \n       __is >> __x._M_min >> __x._M_max;\n \n@@ -1267,10 +1328,13 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n \t       const exponential_distribution<_RealType>& __x)\n     {\n-      const std::ios_base::fmtflags __flags = __os.flags();\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n       const _CharT __fill = __os.fill();\n       const std::streamsize __precision = __os.precision();\n-      __os.flags(std::ios_base::scientific | std::ios_base::left);\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n       __os.fill(__os.widen(' '));\n       __os.precision(__gnu_cxx::__numeric_traits<_RealType>::__max_digits10);\n \n@@ -1328,11 +1392,14 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n \t       const normal_distribution<_RealType>& __x)\n     {\n-      const std::ios_base::fmtflags __flags = __os.flags();\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n       const _CharT __fill = __os.fill();\n       const std::streamsize __precision = __os.precision();\n       const _CharT __space = __os.widen(' ');\n-      __os.flags(std::ios_base::scientific | std::ios_base::left);\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n       __os.fill(__space);\n       __os.precision(__gnu_cxx::__numeric_traits<_RealType>::__max_digits10);\n \n@@ -1353,8 +1420,11 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     operator>>(std::basic_istream<_CharT, _Traits>& __is,\n \t       normal_distribution<_RealType>& __x)\n     {\n-      const std::ios_base::fmtflags __flags = __is.flags();\n-      __is.flags(std::ios_base::dec | std::ios_base::skipws);\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n \n       __is >> __x._M_saved_available >> __x._M_mean\n \t   >> __x._M_sigma;\n@@ -1455,10 +1525,13 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n \t       const gamma_distribution<_RealType>& __x)\n     {\n-      const std::ios_base::fmtflags __flags = __os.flags();\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n       const _CharT __fill = __os.fill();\n       const std::streamsize __precision = __os.precision();\n-      __os.flags(std::ios_base::scientific | std::ios_base::left);\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n       __os.fill(__os.widen(' '));\n       __os.precision(__gnu_cxx::__numeric_traits<_RealType>::__max_digits10);\n "}, {"sha": "f66c3c9e8467034f60b1437918f00d5703652521", "filename": "libstdc++-v3/testsuite/thread/pthread1.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1769232d2607e9219b1932090c1036a6ed334152/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2Fpthread1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1769232d2607e9219b1932090c1036a6ed334152/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2Fpthread1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2Fpthread1.cc?ref=1769232d2607e9219b1932090c1036a6ed334152", "patch": "@@ -1,6 +1,7 @@\n // 2002-01-23  Loren J. Rittle <rittle@labs.mot.com> <ljrittle@acm.org>\n //\n-// Copyright (C) 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -30,9 +31,7 @@\n // if the STL threading support is fubar'd).\n \n #include <list>\n-\n-// Do not include <pthread.h> explicitly; if threads are properly\n-// configured for the port, then it is picked up free from STL headers.\n+#include <pthread.h>\n \n using namespace std;\n "}, {"sha": "73a3da596dfb9566c2b721526de36af551e4b374", "filename": "libstdc++-v3/testsuite/thread/pthread2.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1769232d2607e9219b1932090c1036a6ed334152/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2Fpthread2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1769232d2607e9219b1932090c1036a6ed334152/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2Fpthread2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2Fpthread2.cc?ref=1769232d2607e9219b1932090c1036a6ed334152", "patch": "@@ -1,7 +1,8 @@\n // 2002-01-23  Loren J. Rittle <rittle@labs.mot.com> <ljrittle@acm.org>\n // Adpated from libstdc++/5347 submitted by markus.breuer@materna.de\n //\n-// Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -24,9 +25,7 @@\n // { dg-options \"-pthreads\" { target *-*-solaris* } }\n \n #include <fstream>\n-\n-// Do not include <pthread.h> explicitly; if threads are properly\n-// configured for the port, then it is picked up free from STL headers.\n+#include <pthread.h>\n \n const int max_thread_count = 2;\n const int max_loop_count = 1000000;"}, {"sha": "740c9098b6906957193c48f30ed8fa59c1a8f826", "filename": "libstdc++-v3/testsuite/thread/pthread3.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1769232d2607e9219b1932090c1036a6ed334152/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2Fpthread3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1769232d2607e9219b1932090c1036a6ed334152/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2Fpthread3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2Fpthread3.cc?ref=1769232d2607e9219b1932090c1036a6ed334152", "patch": "@@ -1,7 +1,8 @@\n // 2002-01-23  Loren J. Rittle <rittle@labs.mot.com> <ljrittle@acm.org>\n // Adpated from libstdc++/5347 submitted by markus.breuer@materna.de\n //\n-// Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -24,9 +25,7 @@\n // { dg-options \"-pthreads\" { target *-*-solaris* } }\n \n #include <sstream>\n-\n-// Do not include <pthread.h> explicitly; if threads are properly\n-// configured for the port, then it is picked up free from STL headers.\n+#include <pthread.h>\n \n const int max_thread_count = 2;\n const int max_loop_count = 1000000;"}, {"sha": "f910f9c40b5ccc5856b4f427cfd94b55a4af1ebb", "filename": "libstdc++-v3/testsuite/thread/pthread4.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1769232d2607e9219b1932090c1036a6ed334152/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2Fpthread4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1769232d2607e9219b1932090c1036a6ed334152/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2Fpthread4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2Fpthread4.cc?ref=1769232d2607e9219b1932090c1036a6ed334152", "patch": "@@ -2,7 +2,8 @@\n // Adapted from http://gcc.gnu.org/ml/gcc-bugs/2002-01/msg00679.html\n // which was adapted from pthread1.cc by Mike Lu <MLu@dynamicsoft.com>\n //\n-// Copyright (C) 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -26,9 +27,7 @@\n \n #include <string>\n #include <list>\n-\n-// Do not include <pthread.h> explicitly; if threads are properly\n-// configured for the port, then it is picked up free from STL headers.\n+#include <pthread.h>\n \n using namespace std;\n "}, {"sha": "4d5aac4365b460031883158432eb9ea0546b5736", "filename": "libstdc++-v3/testsuite/thread/pthread5.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1769232d2607e9219b1932090c1036a6ed334152/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2Fpthread5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1769232d2607e9219b1932090c1036a6ed334152/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2Fpthread5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2Fpthread5.cc?ref=1769232d2607e9219b1932090c1036a6ed334152", "patch": "@@ -2,7 +2,8 @@\n // Adpated from libstdc++/5464 submitted by jjessel@amadeus.net\n // Jean-Francois JESSEL (Amadeus SAS Development) \n //\n-// Copyright (C) 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,9 +28,7 @@\n #include <vector>\n #include <list>\n #include <string>\n-\n-// Do not include <pthread.h> explicitly; if threads are properly\n-// configured for the port, then it is picked up free from STL headers.\n+#include <pthread.h>\n \n #ifdef _GLIBCXX_HAVE_UNISTD_H\n #include <unistd.h>\t// To test for _POSIX_THREAD_PRIORITY_SCHEDULING"}, {"sha": "64b7a3d5318a9c9fbab9644d6b05d520d94d5eb1", "filename": "libstdc++-v3/testsuite/thread/pthread6.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1769232d2607e9219b1932090c1036a6ed334152/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2Fpthread6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1769232d2607e9219b1932090c1036a6ed334152/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2Fpthread6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2Fpthread6.cc?ref=1769232d2607e9219b1932090c1036a6ed334152", "patch": "@@ -1,7 +1,8 @@\n // 2002-01-23  Loren J. Rittle <rittle@labs.mot.com> <ljrittle@acm.org>\n // Adpated from libstdc++/5444 submitted by markus.breuer@materna.de\n //\n-// Copyright (C) 2002, 2003, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -26,9 +27,7 @@\n #include <string>\n #include <map>\n #include <vector>\n-\n-// Do not include <pthread.h> explicitly; if threads are properly\n-// configured for the port, then it is picked up free from STL headers.\n+#include <pthread.h>\n \n const int max_thread_count = 8;\n const int loops = 100000;"}, {"sha": "323366572fa60422b773d322718e1f94c3e1d17b", "filename": "libstdc++-v3/testsuite/thread/pthread7-rope.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1769232d2607e9219b1932090c1036a6ed334152/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2Fpthread7-rope.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1769232d2607e9219b1932090c1036a6ed334152/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2Fpthread7-rope.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2Fpthread7-rope.cc?ref=1769232d2607e9219b1932090c1036a6ed334152", "patch": "@@ -1,6 +1,6 @@\n // 2003-05-03  Loren J. Rittle <rittle@labs.mot.com> <ljrittle@acm.org>\n //\n-// Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -24,11 +24,9 @@\n \n #include <ext/rope>\n #include <cstring>\n+#include <pthread.h>\n #include <testsuite_hooks.h>\n \n-// Do not include <pthread.h> explicitly; if threads are properly\n-// configured for the port, then it is picked up free from STL headers.\n-\n const int max_thread_count = 4;\n const int max_loop_count = 10000;\n "}]}