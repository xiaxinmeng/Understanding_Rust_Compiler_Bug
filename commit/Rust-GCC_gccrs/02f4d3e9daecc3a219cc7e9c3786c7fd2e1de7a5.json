{"sha": "02f4d3e9daecc3a219cc7e9c3786c7fd2e1de7a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJmNGQzZTlkYWVjYzNhMjE5Y2M3ZTljMzc4NmM3ZmQyZTFkZTdhNQ==", "commit": {"author": {"name": "Maxim Ostapenko", "email": "chefmax@gcc.gnu.org", "date": "2015-10-23T08:50:30Z"}, "committer": {"name": "Maxim Ostapenko", "email": "chefmax@gcc.gnu.org", "date": "2015-10-23T08:50:30Z"}, "message": "Update HOWTO_MERGE file for libsanitizer.\n\nFrom-SVN: r229215", "tree": {"sha": "351d702cb624f55df131a0f7077c2a3c613e5262", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/351d702cb624f55df131a0f7077c2a3c613e5262"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02f4d3e9daecc3a219cc7e9c3786c7fd2e1de7a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02f4d3e9daecc3a219cc7e9c3786c7fd2e1de7a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02f4d3e9daecc3a219cc7e9c3786c7fd2e1de7a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02f4d3e9daecc3a219cc7e9c3786c7fd2e1de7a5/comments", "author": null, "committer": null, "parents": [{"sha": "956dd14e45acb7c4f255206fe7a60428ff8fb9b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/956dd14e45acb7c4f255206fe7a60428ff8fb9b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/956dd14e45acb7c4f255206fe7a60428ff8fb9b4"}], "stats": {"total": 49, "additions": 31, "deletions": 18}, "files": [{"sha": "d0eca40ec066ee9e4eb0d83c52588fc8f4ab4c91", "filename": "libsanitizer/HOWTO_MERGE", "status": "modified", "additions": 31, "deletions": 18, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f4d3e9daecc3a219cc7e9c3786c7fd2e1de7a5/libsanitizer%2FHOWTO_MERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f4d3e9daecc3a219cc7e9c3786c7fd2e1de7a5/libsanitizer%2FHOWTO_MERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FHOWTO_MERGE?ref=02f4d3e9daecc3a219cc7e9c3786c7fd2e1de7a5", "patch": "@@ -2,25 +2,38 @@ In general, merging process should not be very difficult, but we need to\n track various ABI changes and GCC-specific patches carefully.  Here is a\n general list of actions required to perform the merge:\n \n-- Checkout recent GCC tree.\n-- Run merge.sh script from libsanitizer directory.\n-- Modify Makefile.am files into asan/tsan/lsan/ubsan/sanitizer_common/interception\n+* Checkout recent GCC tree.\n+* Run merge.sh script from libsanitizer directory.\n+* Modify Makefile.am files into asan/tsan/lsan/ubsan/sanitizer_common/interception\n   directories if needed.  In particular, you may need to add new source files\n   and remove old ones in source files list, add new flags to {C, CXX}FLAGS if\n-  needed and update DEFS with new defined variables.\n-- Apply all needed GCC-specific patches to libsanitizer (note that some of\n+  needed and update DEFS with new defined variables.  You can find these changes\n+  in corresponding CMakeLists.txt and config-ix.cmake files from compiler-rt source\n+  directory.\n+* Apply all needed GCC-specific patches to libsanitizer (note that some of\n   them might be already included to upstream).\n-- Apply all necessary compiler changes.  Be especially careful here, you must\n-  not break ABI between compiler and library.\n-- Modify configure.ac file if needed (e.g. if you need to add link against new\n+* Apply all necessary compiler changes.  Be especially careful here, you must\n+  not break ABI between compiler and library.  You can reveal these changes by\n+  inspecting the history of AddressSanitizer.cpp and ThreadSanitizer.cpp files\n+  from LLVM source tree.\n+* Update ASan testsuite with corresponding tests from lib/asan/tests directory.\n+  Not all tests can be migrated easily, so you don't need them all to be adapted.\n+* Modify configure.ac file if needed (e.g. if you need to add link against new\n   library for sanitizer lilbs).\n-- Remove unused (deleted by merge) files from all source and include\n-  directories.  Be especially careful with headers, because they aren't listed\n-  in Makefiles explicitly.\n-- Regenerate configure script and all Makefiles by autoreconf.  You should use\n-  exactly the same autotools version as for other GCC directories (current\n-  version is 2.64, https://www.gnu.org/software/automake/faq/autotools-faq.html\n-  for details how to install/use it).\n-- Run regression testing on at least three platforms (e.g. x86-linux-gnu,\n-  x86_64-linux-gnu, aarch64-linux-gnu).\n-- Run {A, UB}San bootstrap on at least three platforms.\n+* Add new target platforms in configure.tgt script if needed.\n+* Bump SONAME for sanitizer libraries in asan/tsan/ubsan libtool-version files\n+  if ABI has changed.\n+* Regenerate configure script and all Makefiles by autoreconf.  You should use\n+  exactly the same autoconf and automake versions as for other GCC directories (current\n+  versions are written in Makefile.in and configure files).\n+* Run regression testing on at least three platforms (e.g. x86-linux-gnu, x86_64-linux-gnu,\n+  aarch64-linux-gnu, arm-linux-gnueabi).\n+* Run {A, UB}San bootstrap on at least three platforms.\n+* Compare ABI of corresponding libclang_rt-asan and newly build libasan libraries.\n+  You can use a pretty good libabigail tool (https://sourceware.org/libabigail/index.html)\n+  to perform such a comparision.  Note, that the list of exported symbols may differ,\n+  e.g. because libasan currently does not include UBSan runtime.\n+* Split your changes into logical parts (e.g. raw merge, compiler changes, GCC-specific changes\n+  in libasan, configure/Makefile changes). The review process has O(N^2) complexity, so you\n+  would simplify and probably speed up the review process by doing this.\n+* Send your patches for review to GCC Patches Mailing List (gcc-patches@gcc.gnu.org)."}]}