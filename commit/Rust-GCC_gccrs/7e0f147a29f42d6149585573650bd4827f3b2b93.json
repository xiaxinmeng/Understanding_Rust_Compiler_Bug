{"sha": "7e0f147a29f42d6149585573650bd4827f3b2b93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2UwZjE0N2EyOWY0MmQ2MTQ5NTg1NTczNjUwYmQ0ODI3ZjNiMmI5Mw==", "commit": {"author": {"name": "Anthony Sharp", "email": "anthonysharp15@gmail.com", "date": "2021-01-22T22:36:06Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-01-23T22:48:31Z"}, "message": "c++: private inheritance access diagnostics fix [PR17314]\n\nThis patch fixes PR17314. Previously, when class C attempted\nto access member a declared in class A through class B, where class B\nprivately inherits from A and class C inherits from B, GCC would correctly\nreport an access violation, but would erroneously report that the reason was\nbecause a was \"protected\", when in fact, from the point of view of class C,\nit was really \"private\". This patch updates the diagnostics code to generate\nmore correct errors in cases of failed inheritance such as these.\n\nThe reason this bug happened was because GCC was examining the\ndeclared access of decl, instead of looking at it in the\ncontext of class inheritance.\n\ngcc/cp/ChangeLog:\n\n2021-01-21  Anthony Sharp  <anthonysharp15@gmail.com>\n\n\t* call.c (complain_about_access): Altered function.\n\t* cp-tree.h (complain_about_access): Changed parameters of function.\n\t(get_parent_with_private_access): Declared new function.\n\t* search.c (get_parent_with_private_access): Defined new function.\n\t* semantics.c (enforce_access): Modified function.\n\t* typeck.c (complain_about_unrecognized_member): Updated function\n\targuments in complain_about_access.\n\ngcc/testsuite/ChangeLog:\n\n2021-01-21  Anthony Sharp  <anthonysharp15@gmail.com>\n\n\t* g++.dg/lookup/scoped1.C: Modified testcase to run successfully\n\twith changes.\n\t* g++.dg/tc1/dr142.C: Same as above.\n\t* g++.dg/tc1/dr52.C: Same as above.\n\t* g++.old-deja/g++.brendan/visibility6.C: Same as above.\n\t* g++.old-deja/g++.brendan/visibility8.C: Same as above.\n\t* g++.old-deja/g++.jason/access8.C: Same as above.\n\t* g++.old-deja/g++.law/access4.C: Same as above.\n\t* g++.old-deja/g++.law/visibility12.C: Same as above.\n\t* g++.old-deja/g++.law/visibility4.C: Same as above.\n\t* g++.old-deja/g++.law/visibility8.C: Same as above.\n\t* g++.old-deja/g++.other/access4.C: Same as above.", "tree": {"sha": "a852452165cc39e93ebf00c3de49a1158aae09ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a852452165cc39e93ebf00c3de49a1158aae09ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e0f147a29f42d6149585573650bd4827f3b2b93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e0f147a29f42d6149585573650bd4827f3b2b93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e0f147a29f42d6149585573650bd4827f3b2b93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e0f147a29f42d6149585573650bd4827f3b2b93/comments", "author": {"login": "anthonysharpy", "id": 55365296, "node_id": "MDQ6VXNlcjU1MzY1Mjk2", "avatar_url": "https://avatars.githubusercontent.com/u/55365296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anthonysharpy", "html_url": "https://github.com/anthonysharpy", "followers_url": "https://api.github.com/users/anthonysharpy/followers", "following_url": "https://api.github.com/users/anthonysharpy/following{/other_user}", "gists_url": "https://api.github.com/users/anthonysharpy/gists{/gist_id}", "starred_url": "https://api.github.com/users/anthonysharpy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anthonysharpy/subscriptions", "organizations_url": "https://api.github.com/users/anthonysharpy/orgs", "repos_url": "https://api.github.com/users/anthonysharpy/repos", "events_url": "https://api.github.com/users/anthonysharpy/events{/privacy}", "received_events_url": "https://api.github.com/users/anthonysharpy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c63f091db89a56ae56b2bfa2ba4d9e956bd9693f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c63f091db89a56ae56b2bfa2ba4d9e956bd9693f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c63f091db89a56ae56b2bfa2ba4d9e956bd9693f"}], "stats": {"total": 168, "additions": 129, "deletions": 39}, "files": [{"sha": "5977582e2797548e55c405626d2b3c5070f4bf4e", "filename": "gcc/cp/call.c", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e0f147a29f42d6149585573650bd4827f3b2b93/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e0f147a29f42d6149585573650bd4827f3b2b93/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=7e0f147a29f42d6149585573650bd4827f3b2b93", "patch": "@@ -7142,27 +7142,45 @@ build_op_delete_call (enum tree_code code, tree addr, tree size,\n /* Issue diagnostics about a disallowed access of DECL, using DIAG_DECL\n    in the diagnostics.\n \n-   If ISSUE_ERROR is true, then issue an error about the\n-   access, followed by a note showing the declaration.\n-   Otherwise, just show the note.  */\n+   If ISSUE_ERROR is true, then issue an error about the access, followed\n+   by a note showing the declaration.  Otherwise, just show the note.\n+\n+   DIAG_DECL and DIAG_LOCATION will almost always be the same.\n+   DIAG_LOCATION is just another DECL.  NO_ACCESS_REASON is an optional\n+   parameter used to specify why DECL wasn't accessible (e.g. ak_private\n+   would be because DECL was private).  If not using NO_ACCESS_REASON,\n+   then it must be ak_none, and the access failure reason will be\n+   figured out by looking at the protection of DECL.  */\n \n void\n-complain_about_access (tree decl, tree diag_decl, bool issue_error)\n+complain_about_access (tree decl, tree diag_decl, tree diag_location,\n+\t\t       bool issue_error, access_kind no_access_reason)\n {\n-  if (TREE_PRIVATE (decl))\n+  /* If we have not already figured out why DECL is inaccessible...  */\n+  if (no_access_reason == ak_none)\n+    {\n+      /* Examine the access of DECL to find out why.  */\n+      if (TREE_PRIVATE (decl))\n+\tno_access_reason = ak_private;\n+      else if (TREE_PROTECTED (decl))\n+\tno_access_reason = ak_protected;\n+    }\n+\n+  /* Now generate an error message depending on calculated access.  */\n+  if (no_access_reason == ak_private)\n     {\n       if (issue_error)\n \terror (\"%q#D is private within this context\", diag_decl);\n-      inform (DECL_SOURCE_LOCATION (diag_decl),\n-\t      \"declared private here\");\n+      inform (DECL_SOURCE_LOCATION (diag_location), \"declared private here\");\n     }\n-  else if (TREE_PROTECTED (decl))\n+  else if (no_access_reason == ak_protected)\n     {\n       if (issue_error)\n \terror (\"%q#D is protected within this context\", diag_decl);\n-      inform (DECL_SOURCE_LOCATION (diag_decl),\n-\t      \"declared protected here\");\n+      inform (DECL_SOURCE_LOCATION (diag_location), \"declared protected here\");\n     }\n+  /* Couldn't figure out why DECL is inaccesible, so just say it's\n+     inaccessible.  */\n   else\n     {\n       if (issue_error)"}, {"sha": "bef452f592a45371a780ae4af6311b0aba3fb964", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e0f147a29f42d6149585573650bd4827f3b2b93/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e0f147a29f42d6149585573650bd4827f3b2b93/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=7e0f147a29f42d6149585573650bd4827f3b2b93", "patch": "@@ -6434,7 +6434,8 @@ class access_failure_info\n   tree m_diag_decl;\n };\n \n-extern void complain_about_access\t\t(tree, tree, bool);\n+extern void complain_about_access\t\t(tree, tree, tree, bool,\n+\t\t\t\t\t\t access_kind);\n extern void push_defarg_context\t\t\t(tree);\n extern void pop_defarg_context\t\t\t(void);\n extern tree convert_default_arg\t\t\t(tree, tree, tree, int,\n@@ -7274,6 +7275,7 @@ extern unsigned get_pseudo_tinfo_index\t\t(tree);\n extern tree get_pseudo_tinfo_type\t\t(unsigned);\n \n /* in search.c */\n+extern tree get_parent_with_private_access \t(tree decl, tree binfo);\n extern bool accessible_base_p\t\t\t(tree, tree, bool);\n extern tree lookup_base                         (tree, tree, base_access,\n \t\t\t\t\t\t base_kind *, tsubst_flags_t);"}, {"sha": "7b18368547676141cc46aff0a406014ee5652428", "filename": "gcc/cp/search.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e0f147a29f42d6149585573650bd4827f3b2b93/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e0f147a29f42d6149585573650bd4827f3b2b93/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=7e0f147a29f42d6149585573650bd4827f3b2b93", "patch": "@@ -122,6 +122,41 @@ dfs_lookup_base (tree binfo, void *data_)\n   return NULL_TREE;\n }\n \n+/* This deals with bug PR17314.\n+\n+   DECL is a declaration and BINFO represents a class that has attempted (but\n+   failed) to access DECL.\n+\n+   Examine the parent binfos of BINFO and determine whether any of them had\n+   private access to DECL.  If they did, return the parent binfo.  This helps\n+   in figuring out the correct error message to show (if the parents had\n+   access, it's their fault for not giving sufficient access to BINFO).\n+\n+   If no parents had access, return NULL_TREE.  */\n+\n+tree\n+get_parent_with_private_access (tree decl, tree binfo)\n+{\n+  /* Only BINFOs should come through here.  */\n+  gcc_assert (TREE_CODE (binfo) == TREE_BINFO);\n+\n+  tree base_binfo = NULL_TREE;\n+\n+  /* Iterate through immediate parent classes.  */\n+  for (int i = 0; BINFO_BASE_ITERATE (binfo, i, base_binfo); i++)\n+    {\n+      /* This parent had private access.  Therefore that's why BINFO can't\n+\t  access DECL.  */\n+      if (access_in_type (BINFO_TYPE (base_binfo), decl) == ak_private)\n+\treturn base_binfo;\n+    }\n+\n+  /* None of the parents had access.  Note: it's impossible for one of the\n+     parents to have had public or protected access to DECL, since then\n+     BINFO would have been able to access DECL too.  */\n+  return NULL_TREE;\n+}\n+\n /* Returns true if type BASE is accessible in T.  (BASE is known to be\n    a (possibly non-proper) base class of T.)  If CONSIDER_LOCAL_P is\n    true, consider any special access of the current scope, or access"}, {"sha": "73834467fcaef48026a6fa6b4e8117591aabc9d0", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e0f147a29f42d6149585573650bd4827f3b2b93/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e0f147a29f42d6149585573650bd4827f3b2b93/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=7e0f147a29f42d6149585573650bd4827f3b2b93", "patch": "@@ -316,7 +316,36 @@ enforce_access (tree basetype_path, tree decl, tree diag_decl,\n       if (flag_new_inheriting_ctors)\n \tdiag_decl = strip_inheriting_ctors (diag_decl);\n       if (complain & tf_error)\n-\tcomplain_about_access (decl, diag_decl, true);\n+\t{\n+\t  /* We will usually want to point to the same place as\n+\t     diag_decl but not always.  */\n+\t  tree diag_location = diag_decl;\n+\t  access_kind parent_access = ak_none;\n+\n+\t  /* See if any of BASETYPE_PATH's parents had private access\n+\t     to DECL.  If they did, that will tell us why we don't.  */\n+\t  tree parent_binfo = get_parent_with_private_access (decl,\n+\t\t\t\t\t\t\t      basetype_path);\n+\n+\t  /* If a parent had private access, then the diagnostic\n+\t     location DECL should be that of the parent class, since it\n+\t     failed to give suitable access by using a private\n+\t     inheritance.  But if DECL was actually defined in the parent,\n+\t     it wasn't privately inherited, and so we don't need to do\n+\t     this, and complain_about_access will figure out what to\n+\t     do.  */\n+\t  if (parent_binfo != NULL_TREE\n+\t      && (context_for_name_lookup (decl)\n+\t\t  != BINFO_TYPE (parent_binfo)))\n+\t    {\n+\t      diag_location = TYPE_NAME (BINFO_TYPE (parent_binfo));\n+\t      parent_access = ak_private;\n+\t    }\n+\n+\t  /* Finally, generate an error message.  */\n+\t  complain_about_access (decl, diag_decl, diag_location, true,\n+\t\t\t\t parent_access);\n+\t}\n       if (afi)\n \tafi->record_access_failure (basetype_path, decl, diag_decl);\n       return false;"}, {"sha": "315f706de733f2d7290df3ad667966addc990688", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e0f147a29f42d6149585573650bd4827f3b2b93/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e0f147a29f42d6149585573650bd4827f3b2b93/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=7e0f147a29f42d6149585573650bd4827f3b2b93", "patch": "@@ -2980,7 +2980,8 @@ complain_about_unrecognized_member (tree access_path, tree name,\n \t\t    TREE_CODE (access_path) == TREE_BINFO\n \t\t    ? TREE_TYPE (access_path) : object_type,\n \t\t    name, afi.get_diag_decl ());\n-\t  complain_about_access (afi.get_decl (), afi.get_diag_decl (), false);\n+\t  complain_about_access (afi.get_decl (), afi.get_diag_decl (),\n+\t\t\t\t afi.get_diag_decl (), false, ak_none);\n \t}\n     }\n   else"}, {"sha": "2f7f603b49f7caf4ebbc7b6f3a9b2bff0f23c545", "filename": "gcc/testsuite/g++.dg/lookup/scoped1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e0f147a29f42d6149585573650bd4827f3b2b93/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fscoped1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e0f147a29f42d6149585573650bd4827f3b2b93/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fscoped1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fscoped1.C?ref=7e0f147a29f42d6149585573650bd4827f3b2b93", "patch": "@@ -4,12 +4,12 @@\n struct A\n {\n   static int i1;\n-  int i2; // { dg-message \"declared\" }\n+  int i2; \n   static void f1 ();\n   void f2 ();\n };\n \n-struct B: private A { };\n+struct B: private A { }; // { dg-message \"declared\" }\n struct C: public B\n {\n   void g ()"}, {"sha": "6e216da89f080fef25c300576457fbc20ce5cf37", "filename": "gcc/testsuite/g++.dg/tc1/dr142.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e0f147a29f42d6149585573650bd4827f3b2b93/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr142.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e0f147a29f42d6149585573650bd4827f3b2b93/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr142.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr142.C?ref=7e0f147a29f42d6149585573650bd4827f3b2b93", "patch": "@@ -2,13 +2,13 @@\n // Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n // DR142: Injection-related errors in access example \n \n-class B {                 // { dg-message \"declared\" }\n+class B {                 \n public:\n-  int mi;                 // { dg-message \"declared\" }\n-  static int si;          // { dg-message \"declared\" }\n+  int mi;                 \n+  static int si;          \n };\n \n-class D: private B {\n+class D: private B { // { dg-message \"declared\" }\n };\n \n class DD: public D {"}, {"sha": "17b6496916cf8cc716297b7a0bf3d7d3de1faf70", "filename": "gcc/testsuite/g++.dg/tc1/dr52.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e0f147a29f42d6149585573650bd4827f3b2b93/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr52.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e0f147a29f42d6149585573650bd4827f3b2b93/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr52.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr52.C?ref=7e0f147a29f42d6149585573650bd4827f3b2b93", "patch": "@@ -17,11 +17,11 @@ struct B1 : B {};\n struct B2 : B {};\n \n struct C\n-{ // { dg-message \"declared\" }\n-  void foo(void);\n+{ \n+  void foo(void); \n };\n \n-struct D : private C {};\n+struct D : private C {}; // { dg-message \"declared\" }\n \n struct X: A, B1, B2, D\n {"}, {"sha": "8d6c6f10806fb69574ba09cd88606caa38ea296c", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/visibility6.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e0f147a29f42d6149585573650bd4827f3b2b93/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fvisibility6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e0f147a29f42d6149585573650bd4827f3b2b93/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fvisibility6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fvisibility6.C?ref=7e0f147a29f42d6149585573650bd4827f3b2b93", "patch": "@@ -3,9 +3,9 @@\n class bottom\n {\n public:\n-  int b; // { dg-message \"\" } private\n+  int b; \n };\n-class middle : private bottom\n+class middle : private bottom // { dg-message \"\" } private\n {\n public:\n   void foo () { b; }"}, {"sha": "c165b0874a05edba8c78f658061cd27f829401c6", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/visibility8.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e0f147a29f42d6149585573650bd4827f3b2b93/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fvisibility8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e0f147a29f42d6149585573650bd4827f3b2b93/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fvisibility8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fvisibility8.C?ref=7e0f147a29f42d6149585573650bd4827f3b2b93", "patch": "@@ -5,9 +5,9 @@\n class foo\n {\n public:\n-  static int y; // { dg-message \"\" } private\n+  static int y; \n };\n-class foo1 : private foo\n+class foo1 : private foo // { dg-message \"\" } private\n { };\n class foo2 : public foo1\n { public:"}, {"sha": "0aa85d0457c082a4669f20218f36ca148cd63c3f", "filename": "gcc/testsuite/g++.old-deja/g++.jason/access8.C", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e0f147a29f42d6149585573650bd4827f3b2b93/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Faccess8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e0f147a29f42d6149585573650bd4827f3b2b93/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Faccess8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Faccess8.C?ref=7e0f147a29f42d6149585573650bd4827f3b2b93", "patch": "@@ -3,13 +3,14 @@\n // Date: 25 Jan 1994 23:41:33 -0500\n // Bug: g++ forgets access decls after the definition.\n \n-class inh { // { dg-message \"\" } inaccessible\n+class inh { \n         int a;\n protected:\n         void myf(int);\n };\n \n-class mel : private inh {\n+class mel : private inh // { dg-message \"\" } inaccessible\n+{\n protected:\n         int t;\n \tinh::myf;  // { dg-warning \"deprecated\" }"}, {"sha": "57fa24a0dde739be2ac5866847ad4082847d148c", "filename": "gcc/testsuite/g++.old-deja/g++.law/access4.C", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e0f147a29f42d6149585573650bd4827f3b2b93/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Faccess4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e0f147a29f42d6149585573650bd4827f3b2b93/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Faccess4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Faccess4.C?ref=7e0f147a29f42d6149585573650bd4827f3b2b93", "patch": "@@ -6,12 +6,13 @@\n // Subject:  g++ 2.5.5 doesn't warn about inaccessible virtual base ctor\n // Message-ID: <9403030024.AA04534@ses.com>\n \n-class ForceLeafSterile { // { dg-message \"\" } \n+class ForceLeafSterile { \n     friend class Sterile;\n       ForceLeafSterile() {} // { dg-message \"\" } \n };\n \n-class Sterile : private virtual ForceLeafSterile {\n+class Sterile : private virtual ForceLeafSterile // { dg-message \"\" } \n+{\n public:\n     Sterile() {}\n     Sterile(const char* /*blah*/) {}"}, {"sha": "6b7ff75d2caf3a655ff36318753de5967bf0a668", "filename": "gcc/testsuite/g++.old-deja/g++.law/visibility12.C", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e0f147a29f42d6149585573650bd4827f3b2b93/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fvisibility12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e0f147a29f42d6149585573650bd4827f3b2b93/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fvisibility12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fvisibility12.C?ref=7e0f147a29f42d6149585573650bd4827f3b2b93", "patch": "@@ -6,11 +6,12 @@\n // Subject:  member access rule bug\n // Message-ID: <9306300528.AA17185@coda.mel.dit.CSIRO.AU>\n struct a {\n-  int aa; // { dg-message \"\" } private\n+  int aa; \n         };\n \n-class b : private a {\n-        };\n+class b : private a // { dg-message \"\" } private\n+{\n+};\n \n class c : public b {\n         int xx(void) { return (aa); }  // aa should be invisible// { dg-error \"\" } .*"}, {"sha": "644154e66fb4e8511c0f366304778127874d5d25", "filename": "gcc/testsuite/g++.old-deja/g++.law/visibility4.C", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e0f147a29f42d6149585573650bd4827f3b2b93/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fvisibility4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e0f147a29f42d6149585573650bd4827f3b2b93/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fvisibility4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fvisibility4.C?ref=7e0f147a29f42d6149585573650bd4827f3b2b93", "patch": "@@ -8,10 +8,11 @@\n \n class A {\n public:\n-     int b; // { dg-message \"\" } private\n+     int b; \n };\n \n-class C : private A {                   // NOTE WELL. private, not public\n+class C : private A // { dg-message \"\" } private\n+{                   \n public:\n         int d;\n };"}, {"sha": "4457ddf46c77d54e47a07d6d2aa25e4dc8f3c9e7", "filename": "gcc/testsuite/g++.old-deja/g++.law/visibility8.C", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e0f147a29f42d6149585573650bd4827f3b2b93/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fvisibility8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e0f147a29f42d6149585573650bd4827f3b2b93/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fvisibility8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fvisibility8.C?ref=7e0f147a29f42d6149585573650bd4827f3b2b93", "patch": "@@ -7,11 +7,12 @@\n // Message-ID: <m0nof3E-0021ifC@jts.com\n class t1 {\n protected:\n-    int a; // { dg-message \"\" } protected\n+    int a; \n };\n \n \n-class t2 : private t1 {\n+class t2 : private t1 // { dg-message \"\" } protected\n+{ \n public:\n     int b;\n };"}, {"sha": "6c47700db19a0642b8d35ea9f5e90d7f1f5d8e8a", "filename": "gcc/testsuite/g++.old-deja/g++.other/access4.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e0f147a29f42d6149585573650bd4827f3b2b93/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Faccess4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e0f147a29f42d6149585573650bd4827f3b2b93/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Faccess4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Faccess4.C?ref=7e0f147a29f42d6149585573650bd4827f3b2b93", "patch": "@@ -1,10 +1,10 @@\n // { dg-do assemble  }\n \n-struct A { // { dg-message \"\" } inaccessible\n+struct A { \n   static int i;\n };\n \n-struct B : private A { };\n+struct B : private A { }; // { dg-message \"\" } inaccessible\n \n struct C : public B {\n   int f () { return A::i; } // { dg-error \"\" } context"}]}