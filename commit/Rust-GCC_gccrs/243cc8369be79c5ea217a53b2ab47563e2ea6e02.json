{"sha": "243cc8369be79c5ea217a53b2ab47563e2ea6e02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQzY2M4MzY5YmU3OWM1ZWEyMTdhNTNiMmFiNDc1NjNlMmVhNmUwMg==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2006-03-24T07:51:32Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2006-03-24T07:51:32Z"}, "message": "tree-ssa-dom.c (propagate_rhs_into_lhs): Temporarily work around bug in immediate-use iterator.\n\n\n\t* tree-ssa-dom.c (propagate_rhs_into_lhs): Temporarily work\n\taround bug in immediate-use iterator.\n\n\t* gcc.c-torture/compile/pr26833.c: New test.\n\t* gfortran.fortran-torture/compile/pr26806.f90: New test.\n\nFrom-SVN: r112348", "tree": {"sha": "f6d9e217688cbacc0e4fc00e34997e441fd5b063", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6d9e217688cbacc0e4fc00e34997e441fd5b063"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/243cc8369be79c5ea217a53b2ab47563e2ea6e02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/243cc8369be79c5ea217a53b2ab47563e2ea6e02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/243cc8369be79c5ea217a53b2ab47563e2ea6e02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/243cc8369be79c5ea217a53b2ab47563e2ea6e02/comments", "author": null, "committer": null, "parents": [{"sha": "b5b3739a4618fd9769d19ef2fb77eb7e1cbaa04d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5b3739a4618fd9769d19ef2fb77eb7e1cbaa04d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5b3739a4618fd9769d19ef2fb77eb7e1cbaa04d"}], "stats": {"total": 59, "additions": 59, "deletions": 0}, "files": [{"sha": "5215e63bc09b6be300100a6f6b36caef05985b25", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243cc8369be79c5ea217a53b2ab47563e2ea6e02/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243cc8369be79c5ea217a53b2ab47563e2ea6e02/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=243cc8369be79c5ea217a53b2ab47563e2ea6e02", "patch": "@@ -1,3 +1,8 @@\n+2006-03-24  Jeff Law  <law@redhat.com>\n+\n+\t* tree-ssa-dom.c (propagate_rhs_into_lhs): Temporarily work\n+\taround bug in immediate-use iterator.\n+\n 2006-03-24  Alan Modra  <amodra@bigpond.net.au>\n \n \tPR target/26607"}, {"sha": "4d5e5db5e710d1e43749a873a34ac7a9e6173a46", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243cc8369be79c5ea217a53b2ab47563e2ea6e02/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243cc8369be79c5ea217a53b2ab47563e2ea6e02/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=243cc8369be79c5ea217a53b2ab47563e2ea6e02", "patch": "@@ -1,3 +1,8 @@\n+2006-03-24  Jeff Law  <law@redhat.com>\n+\n+\t* gcc.c-torture/compile/pr26833.c: New test.\n+\t* gfortran.fortran-torture/compile/pr26806.f90: New test.\n+\n 2006-03-22  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gfortran.dg/endfile_2.f90: Delete temp file."}, {"sha": "76c201c6ea08c196473dd96a7a88f78f7300aa63", "filename": "gcc/testsuite/gcc.c-torture/compile/pr26833.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243cc8369be79c5ea217a53b2ab47563e2ea6e02/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr26833.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243cc8369be79c5ea217a53b2ab47563e2ea6e02/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr26833.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr26833.c?ref=243cc8369be79c5ea217a53b2ab47563e2ea6e02", "patch": "@@ -0,0 +1,19 @@\n+void yasm_lc3b__parse_insn( int num_info, int *num_operands\n+ , int *operands, int op)\n+{\n+  int found = 0;\n+  int i;\n+  for (; num_info>0 && !found; num_info--)\n+   {\n+    int mismatch = 0;\n+     for(i = 0;op && (i<*num_operands)&& !mismatch; i++)\n+     {\n+       if (!(int)(operands[i] & 0x1))\n+         mismatch = 1;\n+       if (mismatch)\n+         break;\n+     }\n+    if (!mismatch)\n+      found = 1;\n+  }\n+}"}, {"sha": "fad5e9d56768864e3fa48f22b081e39bc7be8cc9", "filename": "gcc/testsuite/gfortran.fortran-torture/compile/pr26806.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243cc8369be79c5ea217a53b2ab47563e2ea6e02/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Fpr26806.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243cc8369be79c5ea217a53b2ab47563e2ea6e02/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Fpr26806.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Fpr26806.f90?ref=243cc8369be79c5ea217a53b2ab47563e2ea6e02", "patch": "@@ -0,0 +1,11 @@\n+module solv_cap\n+  integer,       private, save :: Ng1=0, Ng2=0\n+contains\n+  subroutine FourirG(G)\n+    real, intent(in out), dimension(0:,0:) :: G\n+    complex, allocatable, dimension(:,:)   :: t\n+    allocate( t(0:2*Ng1-1,0:2*Ng2-1) )\n+    t(0:Ng1,0:Ng2-1)    = G(:,0:Ng2-1)      ! Fill one quadrant (one extra row)\n+    t(0:Ng1,Ng2:2*Ng2-1) = G(:,Ng2:1:-1)    ! This quadrant using symmetry\n+  end subroutine FourirG\n+end module solv_cap"}, {"sha": "9df59e9dc5289a397043e9550ee2b9c9d94832d2", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243cc8369be79c5ea217a53b2ab47563e2ea6e02/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243cc8369be79c5ea217a53b2ab47563e2ea6e02/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=243cc8369be79c5ea217a53b2ab47563e2ea6e02", "patch": "@@ -2134,6 +2134,7 @@ propagate_rhs_into_lhs (tree stmt, tree lhs, tree rhs, bitmap interesting_names)\n       /* Walk over every use of LHS and try to replace the use with RHS. \n \t At this point the only reason why such a propagation would not\n \t be successful would be if the use occurs in an ASM_EXPR.  */\n+    repeat:\n       FOR_EACH_IMM_USE_SAFE (use_p, iter, lhs)\n \t{\n \t  tree use_stmt = USE_STMT (use_p);\n@@ -2264,6 +2265,24 @@ propagate_rhs_into_lhs (tree stmt, tree lhs, tree rhs, bitmap interesting_names)\n \t    }\n \t}\n \n+      /* Due to a bug in the immediate use iterator code, we can\n+\t miss visiting uses in some cases when there is more than\n+\t one use in a statement.  Missing a use can cause a multitude\n+         of problems if we expected to eliminate all uses and remove\n+         the defining statement.\n+\n+\t Until Andrew can fix the iterator, this hack will detect\n+\t the cases which cause us problems.  Namely if ALL is set\n+\t and we still have some immediate uses, then we must have\n+\t skipped one or more in the loop above.  So just re-execute\n+\t the loop.\n+\n+\t The maximum number of times we can re-execute the loop is\n+\t bounded by the maximum number of times a given SSA_NAME\n+\t appears in a single statement.  */\n+      if (all && num_imm_uses (lhs) != 0)\n+\tgoto repeat;\n+\n       /* If we were able to propagate away all uses of LHS, then\n \t we can remove STMT.  */\n       if (all)"}]}