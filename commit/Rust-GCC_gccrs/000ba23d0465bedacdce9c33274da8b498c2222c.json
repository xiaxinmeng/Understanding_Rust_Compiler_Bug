{"sha": "000ba23d0465bedacdce9c33274da8b498c2222c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAwYmEyM2QwNDY1YmVkYWNkY2U5YzMzMjc0ZGE4YjQ5OGMyMjIyYw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2005-11-29T05:17:20Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2005-11-29T05:17:20Z"}, "message": "re PR middle-end/20109 (printf optimizations and non-ASCII character sets)\n\n\tPR middle-end/20109\n\tPR middle-end/25120\n\t* builtins.c (init_target_chars): New.\n\t(expand_builtin_printf, expand_builtin_fprintf,\n\texpand_builtin_sprintf, fold_builtin_sprintf,\n\tmaybe_emit_sprintf_chk_warning, fold_builtin_sprintf_chk,\n\tfold_builtin_snprintf_chk, fold_builtin_printf,\n\tfold_builtin_fprintf): Check for matching format strings using\n\tthe target charset.\n\t\ntestsuite:\n\t* gcc.dg/charset/builtin2.c: New test.\n\nFrom-SVN: r107652", "tree": {"sha": "06742bbf23f884a91f39fba3c642b62451a1d03a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06742bbf23f884a91f39fba3c642b62451a1d03a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/000ba23d0465bedacdce9c33274da8b498c2222c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/000ba23d0465bedacdce9c33274da8b498c2222c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/000ba23d0465bedacdce9c33274da8b498c2222c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/000ba23d0465bedacdce9c33274da8b498c2222c/comments", "author": null, "committer": null, "parents": [{"sha": "8fdb0857e96aee3af730b7d12be80cb50aabb24d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fdb0857e96aee3af730b7d12be80cb50aabb24d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fdb0857e96aee3af730b7d12be80cb50aabb24d"}], "stats": {"total": 168, "additions": 143, "deletions": 25}, "files": [{"sha": "3d3a8d1974d3f65c3addb241573c095cf31bdf41", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/000ba23d0465bedacdce9c33274da8b498c2222c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/000ba23d0465bedacdce9c33274da8b498c2222c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=000ba23d0465bedacdce9c33274da8b498c2222c", "patch": "@@ -1,3 +1,15 @@\n+2005-11-29  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\tPR middle-end/20109\n+\tPR middle-end/25120\n+\t* builtins.c (init_target_chars): New.\n+\t(expand_builtin_printf, expand_builtin_fprintf,\n+\texpand_builtin_sprintf, fold_builtin_sprintf,\n+\tmaybe_emit_sprintf_chk_warning, fold_builtin_sprintf_chk,\n+\tfold_builtin_snprintf_chk, fold_builtin_printf,\n+\tfold_builtin_fprintf): Check for matching format strings using\n+\tthe target charset.\n+\n 2005-11-29  Paul Brook  <paul@codesourcery.com>\n \n \t* config.gcc: Do not use fixproto on m68k-elf."}, {"sha": "2f7b23a49e8c25ca96d47dc8949ec0a8fbd26405", "filename": "gcc/builtins.c", "status": "modified", "additions": 95, "deletions": 25, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/000ba23d0465bedacdce9c33274da8b498c2222c/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/000ba23d0465bedacdce9c33274da8b498c2222c/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=000ba23d0465bedacdce9c33274da8b498c2222c", "patch": "@@ -199,6 +199,15 @@ static tree fold_builtin_strncat_chk (tree, tree);\n static tree fold_builtin_sprintf_chk (tree, enum built_in_function);\n static tree fold_builtin_printf (tree, tree, bool, enum built_in_function);\n static tree fold_builtin_fprintf (tree, tree, bool, enum built_in_function);\n+static bool init_target_chars (void);\n+\n+static unsigned HOST_WIDE_INT target_newline;\n+static unsigned HOST_WIDE_INT target_percent;\n+static unsigned HOST_WIDE_INT target_c;\n+static unsigned HOST_WIDE_INT target_s;\n+static char target_percent_c[3];\n+static char target_percent_s[3];\n+static char target_percent_s_newline[4];\n \n /* Return true if NODE should be considered for inline expansion regardless\n    of the optimization level.  This means whenever a function is invoked with\n@@ -4869,8 +4878,11 @@ expand_builtin_printf (tree exp, rtx target, enum machine_mode mode,\n   if (fmt_str == NULL)\n     return 0;\n \n+  if (!init_target_chars())\n+    return 0;\n+  \n   /* If the format specifier was \"%s\\n\", call __builtin_puts(arg).  */\n-  if (strcmp (fmt_str, \"%s\\n\") == 0)\n+  if (strcmp (fmt_str, target_percent_s_newline) == 0)\n     {\n       if (! arglist\n           || ! POINTER_TYPE_P (TREE_TYPE (TREE_VALUE (arglist)))\n@@ -4879,7 +4891,7 @@ expand_builtin_printf (tree exp, rtx target, enum machine_mode mode,\n       fn = fn_puts;\n     }\n   /* If the format specifier was \"%c\", call __builtin_putchar(arg).  */\n-  else if (strcmp (fmt_str, \"%c\") == 0)\n+  else if (strcmp (fmt_str, target_percent_c) == 0)\n     {\n       if (! arglist\n \t  || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != INTEGER_TYPE\n@@ -4890,7 +4902,7 @@ expand_builtin_printf (tree exp, rtx target, enum machine_mode mode,\n   else\n     {\n       /* We can't handle anything else with % args or %% ... yet.  */\n-      if (strchr (fmt_str, '%'))\n+      if (strchr (fmt_str, target_percent))\n         return 0;\n \n       if (arglist)\n@@ -4913,7 +4925,7 @@ expand_builtin_printf (tree exp, rtx target, enum machine_mode mode,\n \t{\n \t  /* If the format specifier was \"string\\n\", call puts(\"string\").  */\n \t  size_t len = strlen (fmt_str);\n-\t  if (fmt_str[len - 1] == '\\n')\n+\t  if ((unsigned char)fmt_str[len - 1] == target_newline)\n \t    {\n \t      /* Create a NUL-terminated string that's one char shorter\n \t\t than the original, stripping off the trailing '\\n'.  */\n@@ -4982,8 +4994,11 @@ expand_builtin_fprintf (tree exp, rtx target, enum machine_mode mode,\n   if (fmt_str == NULL)\n     return 0;\n \n+  if (!init_target_chars())\n+    return 0;\n+  \n   /* If the format specifier was \"%s\", call __builtin_fputs(arg,fp).  */\n-  if (strcmp (fmt_str, \"%s\") == 0)\n+  if (strcmp (fmt_str, target_percent_s) == 0)\n     {\n       if (! arglist\n           || ! POINTER_TYPE_P (TREE_TYPE (TREE_VALUE (arglist)))\n@@ -4995,7 +5010,7 @@ expand_builtin_fprintf (tree exp, rtx target, enum machine_mode mode,\n       fn = fn_fputs;\n     }\n   /* If the format specifier was \"%c\", call __builtin_fputc(arg,fp).  */\n-  else if (strcmp (fmt_str, \"%c\") == 0)\n+  else if (strcmp (fmt_str, target_percent_c) == 0)\n     {\n       if (! arglist\n \t  || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != INTEGER_TYPE\n@@ -5009,7 +5024,7 @@ expand_builtin_fprintf (tree exp, rtx target, enum machine_mode mode,\n   else\n     {\n       /* We can't handle anything else with % args or %% ... yet.  */\n-      if (strchr (fmt_str, '%'))\n+      if (strchr (fmt_str, target_percent))\n         return 0;\n \n       if (arglist)\n@@ -5071,8 +5086,11 @@ expand_builtin_sprintf (tree arglist, rtx target, enum machine_mode mode)\n   if (fmt_str == NULL)\n     return 0;\n \n+  if (!init_target_chars())\n+    return 0;\n+\n   /* If the format doesn't contain % args or %%, use strcpy.  */\n-  if (strchr (fmt_str, '%') == 0)\n+  if (strchr (fmt_str, target_percent) == 0)\n     {\n       tree fn = implicit_built_in_decls[BUILT_IN_STRCPY];\n       tree exp;\n@@ -5087,7 +5105,7 @@ expand_builtin_sprintf (tree arglist, rtx target, enum machine_mode mode)\n       return expand_expr (exp, target, mode, EXPAND_NORMAL);\n     }\n   /* If the format is \"%s\", use strcpy if the result isn't used.  */\n-  else if (strcmp (fmt_str, \"%s\") == 0)\n+  else if (strcmp (fmt_str, target_percent_s) == 0)\n     {\n       tree fn, arg, len;\n       fn = implicit_built_in_decls[BUILT_IN_STRCPY];\n@@ -9790,8 +9808,11 @@ fold_builtin_sprintf (tree arglist, int ignored)\n   call = NULL_TREE;\n   retval = NULL_TREE;\n \n+  if (!init_target_chars())\n+    return 0;\n+\n   /* If the format doesn't contain % args or %%, use strcpy.  */\n-  if (strchr (fmt_str, '%') == NULL)\n+  if (strchr (fmt_str, target_percent) == NULL)\n     {\n       tree fn = implicit_built_in_decls[BUILT_IN_STRCPY];\n \n@@ -9808,7 +9829,7 @@ fold_builtin_sprintf (tree arglist, int ignored)\n     }\n \n   /* If the format is \"%s\", use strcpy if the result isn't used.  */\n-  else if (fmt_str && strcmp (fmt_str, \"%s\") == 0)\n+  else if (fmt_str && strcmp (fmt_str, target_percent_s) == 0)\n     {\n       tree fn, orig;\n       fn = implicit_built_in_decls[BUILT_IN_STRCPY];\n@@ -10105,12 +10126,15 @@ maybe_emit_sprintf_chk_warning (tree exp, enum built_in_function fcode)\n   if (fmt_str == NULL)\n     return;\n \n+  if (!init_target_chars())\n+    return;\n+\n   /* If the format doesn't contain % args or %%, we know its size.  */\n-  if (strchr (fmt_str, '%') == 0)\n+  if (strchr (fmt_str, target_percent) == 0)\n     len = build_int_cstu (size_type_node, strlen (fmt_str));\n   /* If the format is \"%s\" and first ... argument is a string literal,\n      we know it too.  */\n-  else if (fcode == BUILT_IN_SPRINTF_CHK && strcmp (fmt_str, \"%s\") == 0)\n+  else if (fcode == BUILT_IN_SPRINTF_CHK && strcmp (fmt_str, target_percent_s) == 0)\n     {\n       tree arg;\n \n@@ -10565,19 +10589,22 @@ fold_builtin_sprintf_chk (tree arglist, enum built_in_function fcode)\n \n   len = NULL_TREE;\n \n+  if (!init_target_chars())\n+    return 0;\n+\n   /* Check whether the format is a literal string constant.  */\n   fmt_str = c_getstr (fmt);\n   if (fmt_str != NULL)\n     {\n       /* If the format doesn't contain % args or %%, we know the size.  */\n-      if (strchr (fmt_str, '%') == 0)\n+      if (strchr (fmt_str, target_percent) == 0)\n \t{\n \t  if (fcode != BUILT_IN_SPRINTF_CHK || arglist == NULL_TREE)\n \t    len = build_int_cstu (size_type_node, strlen (fmt_str));\n \t}\n       /* If the format is \"%s\" and first ... argument is a string literal,\n \t we know the size too.  */\n-      else if (fcode == BUILT_IN_SPRINTF_CHK && strcmp (fmt_str, \"%s\") == 0)\n+      else if (fcode == BUILT_IN_SPRINTF_CHK && strcmp (fmt_str, target_percent_s) == 0)\n \t{\n \t  tree arg;\n \n@@ -10606,7 +10633,7 @@ fold_builtin_sprintf_chk (tree arglist, enum built_in_function fcode)\n     {\n       if (fmt_str == NULL)\n \treturn 0;\n-      if (strchr (fmt_str, '%') != NULL && strcmp (fmt_str, \"%s\"))\n+      if (strchr (fmt_str, target_percent) != NULL && strcmp (fmt_str, target_percent_s))\n \treturn 0;\n     }\n \n@@ -10687,14 +10714,17 @@ fold_builtin_snprintf_chk (tree arglist, tree maxlen,\n \treturn 0;\n     }\n \n+  if (!init_target_chars())\n+    return 0;\n+\n   /* Only convert __{,v}snprintf_chk to {,v}snprintf if flag is 0\n      or if format doesn't contain % chars or is \"%s\".  */\n   if (! integer_zerop (flag))\n     {\n       fmt_str = c_getstr (fmt);\n       if (fmt_str == NULL)\n \treturn 0;\n-      if (strchr (fmt_str, '%') != NULL && strcmp (fmt_str, \"%s\"))\n+      if (strchr (fmt_str, target_percent) != NULL && strcmp (fmt_str, target_percent_s))\n \treturn 0;\n     }\n \n@@ -10768,11 +10798,14 @@ fold_builtin_printf (tree fndecl, tree arglist, bool ignore,\n       fn_puts = implicit_built_in_decls[BUILT_IN_PUTS];\n     }\n \n-  if (strcmp (fmt_str, \"%s\") == 0 || strchr (fmt_str, '%') == NULL)\n+  if (!init_target_chars())\n+    return 0;\n+  \n+  if (strcmp (fmt_str, target_percent_s) == 0 || strchr (fmt_str, target_percent) == NULL)\n     {\n       const char *str;\n \n-      if (strcmp (fmt_str, \"%s\") == 0)\n+      if (strcmp (fmt_str, target_percent_s) == 0)\n \t{\n \t  if (fcode == BUILT_IN_VPRINTF || fcode == BUILT_IN_VPRINTF_CHK)\n \t    return 0;\n@@ -10813,7 +10846,7 @@ fold_builtin_printf (tree fndecl, tree arglist, bool ignore,\n \t{\n \t  /* If the string was \"string\\n\", call puts(\"string\").  */\n \t  size_t len = strlen (str);\n-\t  if (str[len - 1] == '\\n')\n+\t  if ((unsigned char)str[len - 1] == target_newline)\n \t    {\n \t      /* Create a NUL-terminated string that's one char shorter\n \t\t than the original, stripping off the trailing '\\n'.  */\n@@ -10837,7 +10870,7 @@ fold_builtin_printf (tree fndecl, tree arglist, bool ignore,\n     return 0;\n \n   /* If the format specifier was \"%s\\n\", call __builtin_puts(arg).  */\n-  else if (strcmp (fmt_str, \"%s\\n\") == 0)\n+  else if (strcmp (fmt_str, target_percent_s_newline) == 0)\n     {\n       if (! arglist\n \t  || ! POINTER_TYPE_P (TREE_TYPE (TREE_VALUE (arglist)))\n@@ -10847,7 +10880,7 @@ fold_builtin_printf (tree fndecl, tree arglist, bool ignore,\n     }\n \n   /* If the format specifier was \"%c\", call __builtin_putchar(arg).  */\n-  else if (strcmp (fmt_str, \"%c\") == 0)\n+  else if (strcmp (fmt_str, target_percent_c) == 0)\n     {\n       if (! arglist\n \t  || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != INTEGER_TYPE\n@@ -10926,8 +10959,11 @@ fold_builtin_fprintf (tree fndecl, tree arglist, bool ignore,\n       fn_fputs = implicit_built_in_decls[BUILT_IN_FPUTS];\n     }\n \n+  if (!init_target_chars())\n+    return 0;\n+  \n   /* If the format doesn't contain % args or %%, use strcpy.  */\n-  if (strchr (fmt_str, '%') == NULL)\n+  if (strchr (fmt_str, target_percent) == NULL)\n     {\n       if (fcode != BUILT_IN_VFPRINTF && fcode != BUILT_IN_VFPRINTF_CHK\n \t  && arglist)\n@@ -10957,7 +10993,7 @@ fold_builtin_fprintf (tree fndecl, tree arglist, bool ignore,\n     return 0;\n \n   /* If the format specifier was \"%s\", call __builtin_fputs (arg, fp).  */\n-  else if (strcmp (fmt_str, \"%s\") == 0)\n+  else if (strcmp (fmt_str, target_percent_s) == 0)\n     {\n       if (! arglist\n \t  || ! POINTER_TYPE_P (TREE_TYPE (TREE_VALUE (arglist)))\n@@ -10970,7 +11006,7 @@ fold_builtin_fprintf (tree fndecl, tree arglist, bool ignore,\n     }\n \n   /* If the format specifier was \"%c\", call __builtin_fputc (arg, fp).  */\n-  else if (strcmp (fmt_str, \"%c\") == 0)\n+  else if (strcmp (fmt_str, target_percent_c) == 0)\n     {\n       if (! arglist\n \t  || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != INTEGER_TYPE\n@@ -10988,3 +11024,37 @@ fold_builtin_fprintf (tree fndecl, tree arglist, bool ignore,\n   call = build_function_call_expr (fn, arglist);\n   return fold_convert (TREE_TYPE (TREE_TYPE (fndecl)), call);\n }\n+\n+/* Initialize format string characters in the target charset.  */\n+\n+static bool\n+init_target_chars (void)\n+{\n+  static bool init;\n+  if (!init)\n+    {\n+      target_newline = lang_hooks.to_target_charset ('\\n');\n+      target_percent = lang_hooks.to_target_charset ('%');\n+      target_c = lang_hooks.to_target_charset ('c');\n+      target_s = lang_hooks.to_target_charset ('s');\n+      if (target_newline == 0 || target_percent == 0 || target_c == 0\n+\t  || target_s == 0)\n+\treturn false;\n+\n+      target_percent_c[0] = target_percent;\n+      target_percent_c[1] = target_c;\n+      target_percent_c[2] = '\\0';\n+\n+      target_percent_s[0] = target_percent;\n+      target_percent_s[1] = target_s;\n+      target_percent_s[2] = '\\0';\n+\n+      target_percent_s_newline[0] = target_percent;\n+      target_percent_s_newline[1] = target_s;\n+      target_percent_s_newline[2] = target_newline;\n+      target_percent_s_newline[3] = '\\0';\n+      \n+      init = true;\n+    }\n+  return true;\n+}"}, {"sha": "fc737a8b1a9fc0cd337926232fd9eb1dca37924f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/000ba23d0465bedacdce9c33274da8b498c2222c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/000ba23d0465bedacdce9c33274da8b498c2222c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=000ba23d0465bedacdce9c33274da8b498c2222c", "patch": "@@ -1,3 +1,7 @@\n+2005-11-29  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/charset/builtin2.c: New test.\n+\n 2005-11-28  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/compat/struct-layout-1_generate.c: Add -w option"}, {"sha": "bfe9a20e25b3ed3971f6b0aa1946894a38e08d4c", "filename": "gcc/testsuite/gcc.dg/charset/builtin2.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/000ba23d0465bedacdce9c33274da8b498c2222c/gcc%2Ftestsuite%2Fgcc.dg%2Fcharset%2Fbuiltin2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/000ba23d0465bedacdce9c33274da8b498c2222c/gcc%2Ftestsuite%2Fgcc.dg%2Fcharset%2Fbuiltin2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcharset%2Fbuiltin2.c?ref=000ba23d0465bedacdce9c33274da8b498c2222c", "patch": "@@ -0,0 +1,32 @@\n+/* Ensure that transformations of *printf are performed correctly\n+   regardless of -fexec-charset.  See PR 25120.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-iconv \"IBM1047\" } */\n+/* { dg-options \"-O2 -fexec-charset=IBM1047\" } */\n+/* { dg-final { scan-assembler-not \"printf\" } } */\n+/* { dg-final { scan-assembler-not \"fprintf\" } } */\n+/* { dg-final { scan-assembler-not \"sprintf\" } } */\n+\n+#include <stdio.h>\n+\n+void foo (char *dst, const char *src)\n+{\n+  printf (\"\\n\");\n+  printf (\"hello world\\n\");\n+  printf (\"%s\", \"\\n\");\n+  printf (\"%s\", \"hello world\\n\");\n+  printf (\"%c\", '\\n');\n+  printf (\"%s\\n\", \"hello world\");\n+  printf (\"%s\\n\", src);\n+  \n+  fprintf (stdout, \"\\n\");\n+  fprintf (stdout, \"hello world\\n\");\n+  fprintf (stdout, \"%s\", \"\\n\");\n+  fprintf (stdout, \"%s\", \"hello world\\n\");\n+  fprintf (stdout, \"%c\", '\\n');\n+  fprintf (stdout, \"%s\", src);\n+\n+  sprintf (dst, \"hello world\\n\");\n+  sprintf (dst, \"%s\", src);\n+}"}]}