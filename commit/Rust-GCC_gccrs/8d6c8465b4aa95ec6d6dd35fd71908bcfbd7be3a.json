{"sha": "8d6c8465b4aa95ec6d6dd35fd71908bcfbd7be3a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQ2Yzg0NjViNGFhOTVlYzZkNmRkMzVmZDcxOTA4YmNmYmQ3YmUzYQ==", "commit": {"author": {"name": "Charles Hannum", "email": "mycroft@gnu.org", "date": "1992-06-24T03:58:10Z"}, "committer": {"name": "Charles Hannum", "email": "mycroft@gnu.org", "date": "1992-06-24T03:58:10Z"}, "message": "entered into RCS\n\nFrom-SVN: r1262", "tree": {"sha": "468ba5a246b03b6a6f71644b793be0748860c002", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/468ba5a246b03b6a6f71644b793be0748860c002"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d6c8465b4aa95ec6d6dd35fd71908bcfbd7be3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d6c8465b4aa95ec6d6dd35fd71908bcfbd7be3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d6c8465b4aa95ec6d6dd35fd71908bcfbd7be3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d6c8465b4aa95ec6d6dd35fd71908bcfbd7be3a/comments", "author": null, "committer": null, "parents": [{"sha": "ef66cdfecd417f16a5a3484b7839bc844449ea8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef66cdfecd417f16a5a3484b7839bc844449ea8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef66cdfecd417f16a5a3484b7839bc844449ea8f"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "8e9c92425c5eaea88515c424509dd5b72a5c88b2", "filename": "gcc/enquire.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d6c8465b4aa95ec6d6dd35fd71908bcfbd7be3a/gcc%2Fenquire.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d6c8465b4aa95ec6d6dd35fd71908bcfbd7be3a/gcc%2Fenquire.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fenquire.c?ref=8d6c8465b4aa95ec6d6dd35fd71908bcfbd7be3a", "patch": "@@ -900,7 +900,7 @@ int exponent(x, fract, exp) Long_double x; double *fract; int *exp; {\n \n /* Print a value of type TYPE with value VAL,\n    assuming that sprintf can't handle this type properly (without truncation).\n-   We create an expession that uses type casting to create the value from\n+   We create an expression that uses type casting to create the value from\n    a bit pattern.  */\n \n char *fake_f_rep(type, val) char *type; Long_double val; {"}]}