{"sha": "486fd3c90cedb06ebe160362a9e98d1166604b9c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg2ZmQzYzkwY2VkYjA2ZWJlMTYwMzYyYTllOThkMTE2NjYwNGI5Yw==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2005-12-29T06:11:21Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2005-12-29T06:11:21Z"}, "message": "re PR fortran/25532 (ICE in gfc_conv_component_ref, at fortran/trans-expr.c:269)\n\n2005-12-29  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/25532\n\t* trans-types.c (copy_dt_decls_ifequal): Copy declarations for\n\tcomponents of derived type components by recursing into\n\tgfc_get_derived_type.\n\n2005-12-29  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/25532\n\t*gfortran.dg/host_used_types_1.f90: Check that host associated\n\tderived type components of derived types are properly declared\n\tin contained procedures.\n\nFrom-SVN: r109138", "tree": {"sha": "f48093f6a7494da506dda25e6dfbab2cf3e92673", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f48093f6a7494da506dda25e6dfbab2cf3e92673"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/486fd3c90cedb06ebe160362a9e98d1166604b9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/486fd3c90cedb06ebe160362a9e98d1166604b9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/486fd3c90cedb06ebe160362a9e98d1166604b9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/486fd3c90cedb06ebe160362a9e98d1166604b9c/comments", "author": null, "committer": null, "parents": [{"sha": "b69542f7705b3d216fe85c5562fc4e81a5d90e58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b69542f7705b3d216fe85c5562fc4e81a5d90e58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b69542f7705b3d216fe85c5562fc4e81a5d90e58"}], "stats": {"total": 65, "additions": 64, "deletions": 1}, "files": [{"sha": "73b11ea65dab56f0d17be5017d02f4b7863911dd", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/486fd3c90cedb06ebe160362a9e98d1166604b9c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/486fd3c90cedb06ebe160362a9e98d1166604b9c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=486fd3c90cedb06ebe160362a9e98d1166604b9c", "patch": "@@ -1,3 +1,10 @@\n+2005-12-29  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/25532\n+\t* trans-types.c (copy_dt_decls_ifequal): Copy declarations for\n+\tcomponents of derived type components by recursing into\n+\tgfc_get_derived_type.\n+\n 2005-12-28  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR fortran/25587"}, {"sha": "b41940c1cdc874bc5f5d0e498c1301179c58f6fd", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/486fd3c90cedb06ebe160362a9e98d1166604b9c/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/486fd3c90cedb06ebe160362a9e98d1166604b9c/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=486fd3c90cedb06ebe160362a9e98d1166604b9c", "patch": "@@ -1414,8 +1414,17 @@ copy_dt_decls_ifequal (gfc_symbol *from, gfc_symbol *to)\n   to_cm = to->components;\n   from_cm = from->components;\n \n+  /* Copy the component declarations.  If a component is itself\n+     a derived type, we need a copy of its component declarations.\n+     This is done by recursing into gfc_get_derived_type and\n+     ensures that the component's component declarations have\n+     been built.  */\n   for (; to_cm; to_cm = to_cm->next, from_cm = from_cm->next)\n-    to_cm->backend_decl = from_cm->backend_decl;\n+    {\n+      to_cm->backend_decl = from_cm->backend_decl;\n+      if (from_cm->ts.type == BT_DERIVED)\n+\tgfc_get_derived_type (to_cm->ts.derived);\n+    }\n \n   return 1;\n }"}, {"sha": "c92d87878f7a39d4cf2e078eb4571b21366273d8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/486fd3c90cedb06ebe160362a9e98d1166604b9c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/486fd3c90cedb06ebe160362a9e98d1166604b9c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=486fd3c90cedb06ebe160362a9e98d1166604b9c", "patch": "@@ -1,3 +1,10 @@\n+2005-12-29  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/25532\n+\t*gfortran.dg/host_used_types_1.f90: New test. Check that host\n+\tassociated derived type components of derived types are\n+\tproperly declared in contained procedures.\n+\n 2005-12-28  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/25139"}, {"sha": "89da583a406630026fcea6ef7b760ef682a45358", "filename": "gcc/testsuite/gfortran.dg/host_used_types_1.f90", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/486fd3c90cedb06ebe160362a9e98d1166604b9c/gcc%2Ftestsuite%2Fgfortran.dg%2Fhost_used_types_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/486fd3c90cedb06ebe160362a9e98d1166604b9c/gcc%2Ftestsuite%2Fgfortran.dg%2Fhost_used_types_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fhost_used_types_1.f90?ref=486fd3c90cedb06ebe160362a9e98d1166604b9c", "patch": "@@ -0,0 +1,40 @@\n+! { dg-do compile }\n+! Tests the fix for PR25532, which was a regression introduced by\n+! the fix for PR20244.\n+!\n+! Contributed by Erik Edelmann  <eedelman@gcc.gnu.org>\n+module ModelParams\n+        implicit none\n+\n+        type ReionizationParams\n+             real   :: fraction\n+        end type ReionizationParams\n+\n+        type CAMBparams\n+             type(ReionizationParams) :: Reion\n+         end type CAMBparams\n+\n+        type(CAMBparams) CP\n+end module ModelParams\n+\n+\n+module ThermoData\n+    use ModelParams\n+    implicit none\n+\n+contains\n+\n+    subroutine inithermo()\n+        use ModelParams\n+        if (0 < CP%Reion%fraction) then\n+        end if\n+    end subroutine inithermo\n+\n+! The bug expressed itself in this subroutine because the component type\n+! information was not being copied from the parent namespace.\n+    subroutine SetTimeSteps\n+        if (0 < CP%Reion%fraction) then\n+        end if\n+    end subroutine SetTimeSteps\n+\n+end module ThermoData\n\\ No newline at end of file"}]}