{"sha": "6e498949dba764fa067f14f5d03b763bebda905d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU0OTg5NDlkYmE3NjRmYTA2N2YxNGY1ZDAzYjc2M2JlYmRhOTA1ZA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-05-28T05:59:04Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-05-28T05:59:04Z"}, "message": "(simplify_and_const_int, case IOR, XOR, NOT): Don't\ncreate constant wider than mode of VAROP.\n\nFrom-SVN: r4583", "tree": {"sha": "d51f801287ff5928153279f9e43dda8fcbe81fc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d51f801287ff5928153279f9e43dda8fcbe81fc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e498949dba764fa067f14f5d03b763bebda905d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e498949dba764fa067f14f5d03b763bebda905d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e498949dba764fa067f14f5d03b763bebda905d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e498949dba764fa067f14f5d03b763bebda905d/comments", "author": null, "committer": null, "parents": [{"sha": "53f269222aeae2ecaa14965463dbb7ab040add5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53f269222aeae2ecaa14965463dbb7ab040add5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53f269222aeae2ecaa14965463dbb7ab040add5e"}], "stats": {"total": 14, "additions": 11, "deletions": 3}, "files": [{"sha": "7a93f2bd515731dad1e9f6d0f2d7f59748c2be62", "filename": "gcc/combine.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e498949dba764fa067f14f5d03b763bebda905d/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e498949dba764fa067f14f5d03b763bebda905d/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=6e498949dba764fa067f14f5d03b763bebda905d", "patch": "@@ -5968,13 +5968,18 @@ simplify_and_const_int (x, mode, varop, constop)\n \tcase XOR:\n \t  /* If VAROP is (ior (lshiftrt FOO C1) C2), try to commute the IOR and\n \t     LSHIFT so we end up with an (and (lshiftrt (ior ...) ...) ...)\n-\t     operation which may be a bitfield extraction.  */\n+\t     operation which may be a bitfield extraction.  Ensure\n+\t     that the constant we form is not wider than the mode of\n+\t     VAROP.  */\n \n \t  if (GET_CODE (XEXP (varop, 0)) == LSHIFTRT\n \t      && GET_CODE (XEXP (XEXP (varop, 0), 1)) == CONST_INT\n \t      && INTVAL (XEXP (XEXP (varop, 0), 1)) >= 0\n \t      && INTVAL (XEXP (XEXP (varop, 0), 1)) < HOST_BITS_PER_WIDE_INT\n \t      && GET_CODE (XEXP (varop, 1)) == CONST_INT\n+\t      && ((INTVAL (XEXP (XEXP (varop, 0), 1))\n+\t\t  + floor_log2 (INTVAL (XEXP (varop, 1))))\n+\t\t  < GET_MODE_BITSIZE (GET_MODE (varop)))\n \t      && (INTVAL (XEXP (varop, 1))\n \t\t  & ~ nonzero_bits (XEXP (varop, 0), GET_MODE (varop)) == 0))\n \t    {\n@@ -6003,12 +6008,15 @@ simplify_and_const_int (x, mode, varop, constop)\n \t\t\t\t\t XEXP (varop, 1), constop))));\n \n \tcase NOT:\n-\t  /* (and (not FOO)) is (and (xor FOO CONST_OP)) so if FOO is an\n-\t     LSHIFTRT we can do the same as above.  */\n+\t  /* (and (not FOO)) is (and (xor FOO CONST)), so if FOO is an\n+\t     LSHIFTRT, we can do the same as above.  Ensure that the constant\n+\t     we form is not wider than the mode of VAROP.  */\n \n \t  if (GET_CODE (XEXP (varop, 0)) == LSHIFTRT\n \t      && GET_CODE (XEXP (XEXP (varop, 0), 1)) == CONST_INT\n \t      && INTVAL (XEXP (XEXP (varop, 0), 1)) >= 0\n+\t      && (INTVAL (XEXP (XEXP (varop, 0), 1)) + floor_log2 (constop)\n+\t\t  < GET_MODE_BITSIZE (GET_MODE (varop)))\n \t      && INTVAL (XEXP (XEXP (varop, 0), 1)) < HOST_BITS_PER_WIDE_INT)\n \t    {\n \t      temp = GEN_INT (constop << INTVAL (XEXP (XEXP (varop, 0), 1)));"}]}