{"sha": "5328710be314dee43da8027dbff547d48b85e35e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTMyODcxMGJlMzE0ZGVlNDNkYTgwMjdkYmZmNTQ3ZDQ4Yjg1ZTM1ZQ==", "commit": {"author": {"name": "Fei Yang", "email": "felix.yang@huawei.com", "date": "2020-04-27T10:08:04Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-04-27T10:08:04Z"}, "message": "forwprop: Fix ICE when building an identity constructor [PR94784]\n\nIn the testcase for PR94784, we have two vectors with the same ABI identity\nbut with different TYPE_MODEs. It would be better to flip the assert around\nso that it checks that the two vectors have equal TYPE_VECTOR_SUBPARTS and\nthat converting the corresponding element types is a useless_type_conversion_p.\n\n2020-04-27  Felix Yang  <felix.yang@huawei.com>\n\ngcc/\n\tPR tree-optimization/94784\n\t* tree-ssa-forwprop.c (simplify_vector_constructor): Flip the\n\tassert around so that it checks that the two vectors have equal\n\tTYPE_VECTOR_SUBPARTS and that converting the corresponding element\n\ttypes is a useless_type_conversion_p.\n\ngcc/testsuite/\n\tPR tree-optimization/94784\n\t* gcc.dg/pr94784.c: New test.", "tree": {"sha": "0f46d7f00baf8311a781d1d411cb858da977bab2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f46d7f00baf8311a781d1d411cb858da977bab2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5328710be314dee43da8027dbff547d48b85e35e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5328710be314dee43da8027dbff547d48b85e35e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5328710be314dee43da8027dbff547d48b85e35e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5328710be314dee43da8027dbff547d48b85e35e/comments", "author": null, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acdf733634745548c0167c40bad80e6140ac2eeb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acdf733634745548c0167c40bad80e6140ac2eeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acdf733634745548c0167c40bad80e6140ac2eeb"}], "stats": {"total": 39, "additions": 37, "deletions": 2}, "files": [{"sha": "bd5e95a9133aa2cecfb9581299c9e26e6482bb6b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5328710be314dee43da8027dbff547d48b85e35e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5328710be314dee43da8027dbff547d48b85e35e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5328710be314dee43da8027dbff547d48b85e35e", "patch": "@@ -1,3 +1,11 @@\n+2020-04-27  Felix Yang  <felix.yang@huawei.com>\n+\n+\tPR tree-optimization/94784\n+\t* tree-ssa-forwprop.c (simplify_vector_constructor): Flip the\n+\tassert around so that it checks that the two vectors have equal\n+\tTYPE_VECTOR_SUBPARTS and that converting the corresponding element\n+\ttypes is a useless_type_conversion_p.\n+\n 2020-04-27  Szabolcs Nagy  <szabolcs.nagy@arm.com>\n \n \tPR target/94515"}, {"sha": "f61955dabb94f0497401833ef6fc328931773a3d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5328710be314dee43da8027dbff547d48b85e35e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5328710be314dee43da8027dbff547d48b85e35e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5328710be314dee43da8027dbff547d48b85e35e", "patch": "@@ -1,3 +1,8 @@\n+2020-04-27  Felix Yang  <felix.yang@huawei.com>\n+\n+\tPR tree-optimization/94784\n+\t* gcc.dg/pr94784.c: New test.\n+\n 2020-04-27  Szabolcs Nagy  <szabolcs.nagy@arm.com>\n \n \tPR target/94515"}, {"sha": "df6972f64aaee438bc578f145ff90729d1b3c831", "filename": "gcc/testsuite/gcc.dg/pr94784.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5328710be314dee43da8027dbff547d48b85e35e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94784.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5328710be314dee43da8027dbff547d48b85e35e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94784.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94784.c?ref=5328710be314dee43da8027dbff547d48b85e35e", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target aarch64*-*-* } } */\n+/* { dg-options \"-O2 -ftree-slp-vectorize -march=armv8.2-a+sve -msve-vector-bits=256\" } */\n+\n+typedef short __attribute__((vector_size (8))) v4hi;\n+\n+typedef union U4HI { v4hi v; short a[4]; } u4hi;\n+\n+short a[4];\n+\n+void pass_v4hi (v4hi v) {\n+    int j;\n+    u4hi u;\n+    u.v = v;\n+    for (j = 0; j < 4; j++)\n+      a[j] = u.a[j];\n+};"}, {"sha": "4358732ccb007bfb7c94026d41d66806f281bb62", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5328710be314dee43da8027dbff547d48b85e35e/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5328710be314dee43da8027dbff547d48b85e35e/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=5328710be314dee43da8027dbff547d48b85e35e", "patch": "@@ -2479,7 +2479,10 @@ simplify_vector_constructor (gimple_stmt_iterator *gsi)\n \t  tree src_type = TREE_TYPE (orig[0]);\n \t  if (!useless_type_conversion_p (type, src_type))\n \t    {\n-\t      gcc_assert (!targetm.compatible_vector_types_p (type, src_type));\n+\t      gcc_assert (known_eq (TYPE_VECTOR_SUBPARTS (type),\n+\t\t\t\t    TYPE_VECTOR_SUBPARTS (src_type))\n+\t\t\t  && useless_type_conversion_p (TREE_TYPE (type),\n+\t\t\t\t\t\t\tTREE_TYPE (src_type)));\n \t      tree rhs = build1 (VIEW_CONVERT_EXPR, type, orig[0]);\n \t      orig[0] = make_ssa_name (type);\n \t      gassign *assign = gimple_build_assign (orig[0], rhs);\n@@ -2611,7 +2614,10 @@ simplify_vector_constructor (gimple_stmt_iterator *gsi)\n \tres = gimple_build (&stmts, conv_code, type, res);\n       else if (!useless_type_conversion_p (type, TREE_TYPE (res)))\n \t{\n-\t  gcc_assert (!targetm.compatible_vector_types_p (type, perm_type));\n+\t  gcc_assert (known_eq (TYPE_VECTOR_SUBPARTS (type),\n+\t\t\t\tTYPE_VECTOR_SUBPARTS (perm_type))\n+\t\t      && useless_type_conversion_p (TREE_TYPE (type),\n+\t\t\t\t\t\t    TREE_TYPE (perm_type)));\n \t  res = gimple_build (&stmts, VIEW_CONVERT_EXPR, type, res);\n \t}\n       /* Blend in the actual constant.  */"}]}