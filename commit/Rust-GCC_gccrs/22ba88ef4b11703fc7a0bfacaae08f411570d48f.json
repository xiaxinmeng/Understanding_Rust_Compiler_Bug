{"sha": "22ba88ef4b11703fc7a0bfacaae08f411570d48f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJiYTg4ZWY0YjExNzAzZmM3YTBiZmFjYWFlMDhmNDExNTcwZDQ4Zg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2006-10-28T18:11:28Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2006-10-28T18:11:28Z"}, "message": "except.h (output_function_exception_table): Add 'const char*' param.\n\n\t* except.h (output_function_exception_table): Add 'const char*' param.\n\t* except.c (switch_to_exception_section): Add 'const char*' param.\n\tIf named sections are supported and HAVE_LD_EH_GC_SECTIONS is defined\n\tand flag_function_sections is set, use a function-specific section.\n\t(output_function_exception_table): Add 'const char*' param.\n\tAdjust call to switch_to_exception_section.\n\t* final.c (rest_of_handle_final): Adjust calls to\n\toutput_function_exception_table.\n\t* configure.ac (HAVE_LD_EH_GC_SECTIONS): New check.\n\t* config.in: Regenerate.\n\t* configure: Likewise.\n\nFrom-SVN: r118107", "tree": {"sha": "b8b495ff787a48ab2e5b9ab8e18f98a7e4c17bcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8b495ff787a48ab2e5b9ab8e18f98a7e4c17bcf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22ba88ef4b11703fc7a0bfacaae08f411570d48f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22ba88ef4b11703fc7a0bfacaae08f411570d48f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22ba88ef4b11703fc7a0bfacaae08f411570d48f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22ba88ef4b11703fc7a0bfacaae08f411570d48f/comments", "author": null, "committer": null, "parents": [{"sha": "e73dbcaefc086d603fcd8707d06aa9599ccd9476", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e73dbcaefc086d603fcd8707d06aa9599ccd9476", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e73dbcaefc086d603fcd8707d06aa9599ccd9476"}], "stats": {"total": 133, "additions": 127, "deletions": 6}, "files": [{"sha": "344caf396e059c4192e6efc79d4a5e81d19ab8e4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ba88ef4b11703fc7a0bfacaae08f411570d48f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ba88ef4b11703fc7a0bfacaae08f411570d48f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=22ba88ef4b11703fc7a0bfacaae08f411570d48f", "patch": "@@ -1,3 +1,17 @@\n+2006-10-28  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* except.h (output_function_exception_table): Add 'const char*' param.\n+\t* except.c (switch_to_exception_section): Add 'const char*' param.\n+\tIf named sections are supported and HAVE_LD_EH_GC_SECTIONS is defined\n+\tand flag_function_sections is set, use a function-specific section.\n+\t(output_function_exception_table): Add 'const char*' param.\n+\tAdjust call to switch_to_exception_section.\n+\t* final.c (rest_of_handle_final): Adjust calls to\n+\toutput_function_exception_table.\n+\t* configure.ac (HAVE_LD_EH_GC_SECTIONS): New check.\n+\t* config.in: Regenerate.\n+\t* configure: Likewise.\n+\n 2006-10-28  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/26899"}, {"sha": "91146bb21428d3753eaf5ad1dfc5a100c605af62", "filename": "gcc/config.in", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ba88ef4b11703fc7a0bfacaae08f411570d48f/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ba88ef4b11703fc7a0bfacaae08f411570d48f/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=22ba88ef4b11703fc7a0bfacaae08f411570d48f", "patch": "@@ -883,6 +883,13 @@\n /* Define if your linker supports --eh-frame-hdr option. */\n #undef HAVE_LD_EH_FRAME_HDR\n \n+/* Define if your linker supports garbage collection of sections in presence\n+   of EH frames. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_LD_EH_GC_SECTIONS\n+#endif\n+\n+\n /* Define if your PowerPC64 linker only needs function descriptor syms. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_LD_NO_DOT_SYMS"}, {"sha": "54a2a17feca781c8e207d6bf75568c526f15685a", "filename": "gcc/configure", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ba88ef4b11703fc7a0bfacaae08f411570d48f/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ba88ef4b11703fc7a0bfacaae08f411570d48f/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=22ba88ef4b11703fc7a0bfacaae08f411570d48f", "patch": "@@ -15889,6 +15889,53 @@ fi\n echo \"$as_me:$LINENO: result: $gcc_cv_ld_pie\" >&5\n echo \"${ECHO_T}$gcc_cv_ld_pie\" >&6\n \n+echo \"$as_me:$LINENO: checking linker EH-compatible garbage collection of sections\" >&5\n+echo $ECHO_N \"checking linker EH-compatible garbage collection of sections... $ECHO_C\" >&6\n+gcc_cv_ld_eh_gc_sections=no\n+if test $in_tree_ld = yes ; then\n+  if test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 17 -o \"$gcc_cv_gld_major_version\" -gt 2 \\\n+     && test $in_tree_ld_is_elf = yes; then\n+    gcc_cv_ld_eh_gc_sections=yes\n+  fi\n+elif test x$gcc_cv_as != x -a x$gcc_cv_ld != x -a x$gcc_cv_objdump != x ; then\n+  cat > conftest.s <<EOF\n+\t.section\t.text\n+.globl _start\n+        .type _start, @function\n+_start:\n+\t.long foo\n+\t.size _start, .-_start\n+\t.section\t.text.foo,\"ax\",@progbits\n+\t.type foo, @function\n+foo:\n+\t.long 0\n+\t.size foo, .-foo\n+\t.section\t.gcc_except_table.foo,\"a\",@progbits\n+.L0:\n+\t.long 0\n+\t.section\t.eh_frame,\"a\",@progbits\n+\t.long .L0\n+EOF\n+  if $gcc_cv_as -o conftest.o conftest.s > /dev/null 2>&1; then\n+    if $gcc_cv_ld -o conftest conftest.o --entry=_start --gc-sections 2>&1 \\\n+\t | grep \"gc-sections option ignored\" > /dev/null; then\n+      gcc_cv_ld_eh_gc_sections=no\n+    elif $gcc_cv_objdump -h conftest | grep gcc_except_table > /dev/null; then\n+      gcc_cv_ld_eh_gc_sections=yes\n+    fi\n+  fi\n+  rm -f conftest.s conftest.o conftest\n+fi\n+if test x$gcc_cv_ld_eh_gc_sections = xyes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_LD_EH_GC_SECTIONS 1\n+_ACEOF\n+\n+fi\n+echo \"$as_me:$LINENO: result: $gcc_cv_ld_eh_gc_sections\" >&5\n+echo \"${ECHO_T}$gcc_cv_ld_eh_gc_sections\" >&6\n+\n # --------\n # UNSORTED\n # --------"}, {"sha": "1dafd858f7b61763735b0349d1bbbbe4753fd762", "filename": "gcc/configure.ac", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ba88ef4b11703fc7a0bfacaae08f411570d48f/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ba88ef4b11703fc7a0bfacaae08f411570d48f/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=22ba88ef4b11703fc7a0bfacaae08f411570d48f", "patch": "@@ -3119,6 +3119,49 @@ if test x\"$gcc_cv_ld_pie\" = xyes; then\n fi\n AC_MSG_RESULT($gcc_cv_ld_pie)\n \n+AC_MSG_CHECKING(linker EH-compatible garbage collection of sections)\n+gcc_cv_ld_eh_gc_sections=no\n+if test $in_tree_ld = yes ; then\n+  if test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 17 -o \"$gcc_cv_gld_major_version\" -gt 2 \\\n+     && test $in_tree_ld_is_elf = yes; then\n+    gcc_cv_ld_eh_gc_sections=yes\n+  fi\n+elif test x$gcc_cv_as != x -a x$gcc_cv_ld != x -a x$gcc_cv_objdump != x ; then\n+  cat > conftest.s <<EOF\n+\t.section\t.text\n+.globl _start\n+        .type _start, @function\n+_start:\n+\t.long foo\n+\t.size _start, .-_start\n+\t.section\t.text.foo,\"ax\",@progbits\n+\t.type foo, @function\n+foo:\n+\t.long 0\n+\t.size foo, .-foo\n+\t.section\t.gcc_except_table.foo,\"a\",@progbits\n+.L0:\n+\t.long 0\n+\t.section\t.eh_frame,\"a\",@progbits\n+\t.long .L0\n+EOF\n+  if $gcc_cv_as -o conftest.o conftest.s > /dev/null 2>&1; then\n+    if $gcc_cv_ld -o conftest conftest.o --entry=_start --gc-sections 2>&1 \\\n+\t | grep \"gc-sections option ignored\" > /dev/null; then\n+      gcc_cv_ld_eh_gc_sections=no\n+    elif $gcc_cv_objdump -h conftest | grep gcc_except_table > /dev/null; then\n+      gcc_cv_ld_eh_gc_sections=yes\n+    fi\n+  fi\n+  rm -f conftest.s conftest.o conftest\n+fi\n+if test x$gcc_cv_ld_eh_gc_sections = xyes; then\n+\tAC_DEFINE(HAVE_LD_EH_GC_SECTIONS, 1,\n+  [Define if your linker supports garbage collection of\n+   sections in presence of EH frames.])\n+fi\n+AC_MSG_RESULT($gcc_cv_ld_eh_gc_sections)\n+\n # --------\n # UNSORTED\n # --------"}, {"sha": "306916968e8189582d1560b6d8389d2b7a8cc236", "filename": "gcc/except.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ba88ef4b11703fc7a0bfacaae08f411570d48f/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ba88ef4b11703fc7a0bfacaae08f411570d48f/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=22ba88ef4b11703fc7a0bfacaae08f411570d48f", "patch": "@@ -3520,7 +3520,7 @@ sjlj_output_call_site_table (void)\n /* Switch to the section that should be used for exception tables.  */\n \n static void\n-switch_to_exception_section (void)\n+switch_to_exception_section (const char * ARG_UNUSED (fnname))\n {\n   if (exception_section == 0)\n     {\n@@ -3539,6 +3539,16 @@ switch_to_exception_section (void)\n \t    }\n \t  else\n \t    flags = SECTION_WRITE;\n+#ifdef HAVE_LD_EH_GC_SECTIONS\n+\t  if (flag_function_sections)\n+\t    {\n+\t      char *section_name = xmalloc (strlen (fnname) + 32);\n+\t      sprintf (section_name, \".gcc_except_table.%s\", fnname);\n+\t      exception_section = get_section (section_name, flags, NULL);\n+\t      free (section_name);\n+\t    }\n+\t  else\n+#endif\n \t  exception_section = get_section (\".gcc_except_table\", flags, NULL);\n \t}\n       else\n@@ -3599,7 +3609,7 @@ output_ttype (tree type, int tt_format, int tt_format_size)\n }\n \n void\n-output_function_exception_table (void)\n+output_function_exception_table (const char * ARG_UNUSED (fnname))\n {\n   int tt_format, cs_format, lp_format, i, n;\n #ifdef HAVE_AS_LEB128\n@@ -3627,7 +3637,7 @@ output_function_exception_table (void)\n   /* Note that varasm still thinks we're in the function's code section.\n      The \".endp\" directive that will immediately follow will take us back.  */\n #else\n-  switch_to_exception_section ();\n+  switch_to_exception_section (fnname);\n #endif\n \n   /* If the target wants a label to begin the table, emit it here.  */"}, {"sha": "5efad71647fe9014acbc46e30dac0c710f2bad65", "filename": "gcc/except.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ba88ef4b11703fc7a0bfacaae08f411570d48f/gcc%2Fexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ba88ef4b11703fc7a0bfacaae08f411570d48f/gcc%2Fexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.h?ref=22ba88ef4b11703fc7a0bfacaae08f411570d48f", "patch": "@@ -68,7 +68,7 @@ extern void convert_from_eh_region_ranges (void);\n extern unsigned int convert_to_eh_region_ranges (void);\n extern void find_exception_handler_labels (void);\n extern bool current_function_has_exception_handlers (void);\n-extern void output_function_exception_table (void);\n+extern void output_function_exception_table (const char *);\n \n extern void expand_builtin_unwind_init (void);\n extern rtx expand_builtin_eh_return_data_regno (tree);"}, {"sha": "9e35d535d34ad17d9516fd409d805f127e884eec", "filename": "gcc/final.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ba88ef4b11703fc7a0bfacaae08f411570d48f/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ba88ef4b11703fc7a0bfacaae08f411570d48f/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=22ba88ef4b11703fc7a0bfacaae08f411570d48f", "patch": "@@ -3920,14 +3920,14 @@ rest_of_handle_final (void)\n #ifdef TARGET_UNWIND_INFO\n   /* ??? The IA-64 \".handlerdata\" directive must be issued before\n      the \".endp\" directive that closes the procedure descriptor.  */\n-  output_function_exception_table ();\n+  output_function_exception_table (fnname);\n #endif\n \n   assemble_end_function (current_function_decl, fnname);\n \n #ifndef TARGET_UNWIND_INFO\n   /* Otherwise, it feels unclean to switch sections in the middle.  */\n-  output_function_exception_table ();\n+  output_function_exception_table (fnname);\n #endif\n \n   user_defined_section_attribute = false;"}]}