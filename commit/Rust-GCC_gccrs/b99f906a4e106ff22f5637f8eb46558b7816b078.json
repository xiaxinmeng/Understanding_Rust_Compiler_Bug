{"sha": "b99f906a4e106ff22f5637f8eb46558b7816b078", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk5ZjkwNmE0ZTEwNmZmMjJmNTYzN2Y4ZWI0NjU1OGI3ODE2YjA3OA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2011-10-29T18:38:27Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-10-29T18:38:27Z"}, "message": "i386.md (xop_sha<mode>3): Rename from xop_ashl<mode>3.\n\n\t* config/i386/i386.md (xop_sha<mode>3): Rename from xop_ashl<mode>3.\n\tUpdate all uses.\n\t(xop_shl<mode>3): Rename from xop_lshl<mode>3.  Update all uses.\n\t* config/i386/i386.c: Update all uses.\n\nFrom-SVN: r180659", "tree": {"sha": "7aa94c0e43bdda035ff77c2ad921ff3c42641de6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7aa94c0e43bdda035ff77c2ad921ff3c42641de6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b99f906a4e106ff22f5637f8eb46558b7816b078", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b99f906a4e106ff22f5637f8eb46558b7816b078", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b99f906a4e106ff22f5637f8eb46558b7816b078", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b99f906a4e106ff22f5637f8eb46558b7816b078/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f327a48e6ed515dea67126a5a5b77a894f750f25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f327a48e6ed515dea67126a5a5b77a894f750f25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f327a48e6ed515dea67126a5a5b77a894f750f25"}], "stats": {"total": 47, "additions": 27, "deletions": 20}, "files": [{"sha": "4d7d8ff0fd8e0b7b950076f8251d48bba4a1b97f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b99f906a4e106ff22f5637f8eb46558b7816b078/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b99f906a4e106ff22f5637f8eb46558b7816b078/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b99f906a4e106ff22f5637f8eb46558b7816b078", "patch": "@@ -1,3 +1,10 @@\n+2011-10-29  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (xop_sha<mode>3): Rename from xop_ashl<mode>3.\n+\tUpdate all uses.\n+\t(xop_shl<mode>3): Rename from xop_lshl<mode>3.  Update all uses.\n+\t* config/i386/i386.c: Update all uses.\n+\n 2011-10-29  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (lshlv16qi3): Remove expander."}, {"sha": "148fcfbb823e5142ec855fec8680f81194629cfa", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b99f906a4e106ff22f5637f8eb46558b7816b078/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b99f906a4e106ff22f5637f8eb46558b7816b078/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=b99f906a4e106ff22f5637f8eb46558b7816b078", "patch": "@@ -26538,14 +26538,14 @@ static const struct builtin_description bdesc_multi_arg[] =\n   { OPTION_MASK_ISA_XOP, CODE_FOR_xop_rotlv4si3,         \"__builtin_ia32_vprotdi\",     IX86_BUILTIN_VPROTD_IMM,  UNKNOWN,      (int)MULTI_ARG_2_SI_IMM },\n   { OPTION_MASK_ISA_XOP, CODE_FOR_xop_rotlv8hi3,         \"__builtin_ia32_vprotwi\",     IX86_BUILTIN_VPROTW_IMM,  UNKNOWN,      (int)MULTI_ARG_2_HI_IMM },\n   { OPTION_MASK_ISA_XOP, CODE_FOR_xop_rotlv16qi3,        \"__builtin_ia32_vprotbi\",     IX86_BUILTIN_VPROTB_IMM,  UNKNOWN,      (int)MULTI_ARG_2_QI_IMM },\n-  { OPTION_MASK_ISA_XOP, CODE_FOR_xop_ashlv2di3,         \"__builtin_ia32_vpshaq\",      IX86_BUILTIN_VPSHAQ,      UNKNOWN,      (int)MULTI_ARG_2_DI },\n-  { OPTION_MASK_ISA_XOP, CODE_FOR_xop_ashlv4si3,         \"__builtin_ia32_vpshad\",      IX86_BUILTIN_VPSHAD,      UNKNOWN,      (int)MULTI_ARG_2_SI },\n-  { OPTION_MASK_ISA_XOP, CODE_FOR_xop_ashlv8hi3,         \"__builtin_ia32_vpshaw\",      IX86_BUILTIN_VPSHAW,      UNKNOWN,      (int)MULTI_ARG_2_HI },\n-  { OPTION_MASK_ISA_XOP, CODE_FOR_xop_ashlv16qi3,        \"__builtin_ia32_vpshab\",      IX86_BUILTIN_VPSHAB,      UNKNOWN,      (int)MULTI_ARG_2_QI },\n-  { OPTION_MASK_ISA_XOP, CODE_FOR_xop_lshlv2di3,         \"__builtin_ia32_vpshlq\",      IX86_BUILTIN_VPSHLQ,      UNKNOWN,      (int)MULTI_ARG_2_DI },\n-  { OPTION_MASK_ISA_XOP, CODE_FOR_xop_lshlv4si3,         \"__builtin_ia32_vpshld\",      IX86_BUILTIN_VPSHLD,      UNKNOWN,      (int)MULTI_ARG_2_SI },\n-  { OPTION_MASK_ISA_XOP, CODE_FOR_xop_lshlv8hi3,         \"__builtin_ia32_vpshlw\",      IX86_BUILTIN_VPSHLW,      UNKNOWN,      (int)MULTI_ARG_2_HI },\n-  { OPTION_MASK_ISA_XOP, CODE_FOR_xop_lshlv16qi3,        \"__builtin_ia32_vpshlb\",      IX86_BUILTIN_VPSHLB,      UNKNOWN,      (int)MULTI_ARG_2_QI },\n+  { OPTION_MASK_ISA_XOP, CODE_FOR_xop_shav2di3,         \"__builtin_ia32_vpshaq\",      IX86_BUILTIN_VPSHAQ,      UNKNOWN,      (int)MULTI_ARG_2_DI },\n+  { OPTION_MASK_ISA_XOP, CODE_FOR_xop_shav4si3,         \"__builtin_ia32_vpshad\",      IX86_BUILTIN_VPSHAD,      UNKNOWN,      (int)MULTI_ARG_2_SI },\n+  { OPTION_MASK_ISA_XOP, CODE_FOR_xop_shav8hi3,         \"__builtin_ia32_vpshaw\",      IX86_BUILTIN_VPSHAW,      UNKNOWN,      (int)MULTI_ARG_2_HI },\n+  { OPTION_MASK_ISA_XOP, CODE_FOR_xop_shav16qi3,        \"__builtin_ia32_vpshab\",      IX86_BUILTIN_VPSHAB,      UNKNOWN,      (int)MULTI_ARG_2_QI },\n+  { OPTION_MASK_ISA_XOP, CODE_FOR_xop_shlv2di3,         \"__builtin_ia32_vpshlq\",      IX86_BUILTIN_VPSHLQ,      UNKNOWN,      (int)MULTI_ARG_2_DI },\n+  { OPTION_MASK_ISA_XOP, CODE_FOR_xop_shlv4si3,         \"__builtin_ia32_vpshld\",      IX86_BUILTIN_VPSHLD,      UNKNOWN,      (int)MULTI_ARG_2_SI },\n+  { OPTION_MASK_ISA_XOP, CODE_FOR_xop_shlv8hi3,         \"__builtin_ia32_vpshlw\",      IX86_BUILTIN_VPSHLW,      UNKNOWN,      (int)MULTI_ARG_2_HI },\n+  { OPTION_MASK_ISA_XOP, CODE_FOR_xop_shlv16qi3,        \"__builtin_ia32_vpshlb\",      IX86_BUILTIN_VPSHLB,      UNKNOWN,      (int)MULTI_ARG_2_QI },\n \n   { OPTION_MASK_ISA_XOP, CODE_FOR_xop_vmfrczv4sf2,       \"__builtin_ia32_vfrczss\",     IX86_BUILTIN_VFRCZSS,     UNKNOWN,      (int)MULTI_ARG_2_SF },\n   { OPTION_MASK_ISA_XOP, CODE_FOR_xop_vmfrczv2df2,       \"__builtin_ia32_vfrczsd\",     IX86_BUILTIN_VFRCZSD,     UNKNOWN,      (int)MULTI_ARG_2_DF },"}, {"sha": "30262b09a79ec52498c60e59696db29da38a858e", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b99f906a4e106ff22f5637f8eb46558b7816b078/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b99f906a4e106ff22f5637f8eb46558b7816b078/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=b99f906a4e106ff22f5637f8eb46558b7816b078", "patch": "@@ -11253,7 +11253,7 @@\n {\n   rtx neg = gen_reg_rtx (<MODE>mode);\n   emit_insn (gen_neg<mode>2 (neg, operands[2]));\n-  emit_insn (gen_xop_lshl<mode>3 (operands[0], operands[1], neg));\n+  emit_insn (gen_xop_shl<mode>3 (operands[0], operands[1], neg));\n   DONE;\n })\n \n@@ -11268,7 +11268,7 @@\n     {\n       rtx neg = gen_reg_rtx (<MODE>mode);\n       emit_insn (gen_neg<mode>2 (neg, operands[2]));\n-      emit_insn (gen_xop_lshl<mode>3 (operands[0], operands[1], neg));\n+      emit_insn (gen_xop_shl<mode>3 (operands[0], operands[1], neg));\n       DONE;\n     }\n })\n@@ -11289,7 +11289,7 @@\n {\n   rtx neg = gen_reg_rtx (<MODE>mode);\n   emit_insn (gen_neg<mode>2 (neg, operands[2]));\n-  emit_insn (gen_xop_ashl<mode>3 (operands[0], operands[1], neg));\n+  emit_insn (gen_xop_sha<mode>3 (operands[0], operands[1], neg));\n   DONE;\n })\n \n@@ -11303,7 +11303,7 @@\n     {\n       rtx neg = gen_reg_rtx (V4SImode);\n       emit_insn (gen_negv4si2 (neg, operands[2]));\n-      emit_insn (gen_xop_ashlv4si3 (operands[0], operands[1], neg));\n+      emit_insn (gen_xop_shav4si3 (operands[0], operands[1], neg));\n       DONE;\n     }\n })\n@@ -11321,7 +11321,7 @@\n \t  (match_operand:VI12_128 2 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_XOP\"\n {\n-  emit_insn (gen_xop_ashl<mode>3 (operands[0], operands[1], operands[2]));\n+  emit_insn (gen_xop_sha<mode>3 (operands[0], operands[1], operands[2]));\n   DONE;\n })\n \n@@ -11335,7 +11335,7 @@\n   if (!TARGET_AVX2)\n     {\n       operands[2] = force_reg (<MODE>mode, operands[2]);\n-      emit_insn (gen_xop_ashl<mode>3 (operands[0], operands[1], operands[2]));\n+      emit_insn (gen_xop_sha<mode>3 (operands[0], operands[1], operands[2]));\n       DONE;\n     }\n })\n@@ -11347,7 +11347,7 @@\n \t  (match_operand:VI48_256 2 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_AVX2\")\n \n-(define_insn \"xop_ashl<mode>3\"\n+(define_insn \"xop_sha<mode>3\"\n   [(set (match_operand:VI_128 0 \"register_operand\" \"=x,x\")\n \t(if_then_else:VI_128\n \t (ge:VI_128\n@@ -11366,7 +11366,7 @@\n    (set_attr \"prefix_extra\" \"2\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"xop_lshl<mode>3\"\n+(define_insn \"xop_shl<mode>3\"\n   [(set (match_operand:VI_128 0 \"register_operand\" \"=x,x\")\n \t(if_then_else:VI_128\n \t (ge:VI_128\n@@ -11402,7 +11402,7 @@\n     XVECEXP (par, 0, i) = operands[2];\n \n   emit_insn (gen_vec_initv16qi (reg, par));\n-  emit_insn (gen_xop_ashlv16qi3 (operands[0], operands[1], reg));\n+  emit_insn (gen_xop_shav16qi3 (operands[0], operands[1], reg));\n   DONE;\n })\n \n@@ -11434,9 +11434,9 @@\n     emit_insn (gen_negv16qi2 (reg, reg));\n \n   if (<CODE> == LSHIFTRT)\n-    shift_insn = gen_xop_lshlv16qi3;\n+    shift_insn = gen_xop_shlv16qi3;\n   else\n-    shift_insn = gen_xop_ashlv16qi3;\n+    shift_insn = gen_xop_shav16qi3;\n \n   emit_insn (shift_insn (operands[0], operands[1], reg));\n   DONE;\n@@ -11468,7 +11468,7 @@\n   if (negate)\n     emit_insn (gen_negv2di2 (reg, reg));\n \n-  emit_insn (gen_xop_ashlv2di3 (operands[0], operands[1], reg));\n+  emit_insn (gen_xop_shav2di3 (operands[0], operands[1], reg));\n   DONE;\n })\n "}]}