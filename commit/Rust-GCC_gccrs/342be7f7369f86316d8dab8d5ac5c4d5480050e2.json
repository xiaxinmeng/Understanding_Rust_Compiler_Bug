{"sha": "342be7f7369f86316d8dab8d5ac5c4d5480050e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQyYmU3ZjczNjlmODYzMTZkOGRhYjhkNWFjNWM0ZDU0ODAwNTBlMg==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2012-11-20T12:10:37Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2012-11-20T12:10:37Z"}, "message": "gcc/\n\t* config/aarch64/aarch64-builtins.c\n\t(aarch64_simd_builtin_type_bits): Rename to...\n\t(aarch64_simd_builtin_type_mode): ...this, make sequential.\n\t(aarch64_simd_builtin_datum): Refactor members.\n\t(VAR1, VAR2, ..., VAR12): Update accordingly.\n\t(aarch64_simd_builtin_data): Include from aarch64-simd-builtins.def.\n\t(aarch64_builtins): Update accordingly.\n\t(init_aarch64_simd_builtins): Refactor, rename to...\n\t(aarch64_init_simd_builtins): ...this.\n\t(aarch64_simd_builtin_compare): Remove.\n\t(locate_simd_builtin_icode): Likewise.\n\t* config/aarch64/aarch64-protos.h (aarch64_init_builtins): New.\n\t(aarch64_expand_builtin): New.\n\t* config/aarch64/aarch64-simd-builtins.def: New file.\n\t* config/aarch64/aarch64.c (aarch64_init_builtins):\n\tMove to aarch64-builtins.c.\n\t(aarch64_expand_builtin): Likewise.\n\t* config/aarch64/aarch64.h\n\t(aarch64_builtins): Move to aarch64-builtins.c.\n\n\nCo-Authored-By: Tejas Belagod <tejas.belagod@arm.com>\n\nFrom-SVN: r193658", "tree": {"sha": "8b3208bc255a1166d02508e13fa6d036efe8fef5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b3208bc255a1166d02508e13fa6d036efe8fef5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/342be7f7369f86316d8dab8d5ac5c4d5480050e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/342be7f7369f86316d8dab8d5ac5c4d5480050e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/342be7f7369f86316d8dab8d5ac5c4d5480050e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/342be7f7369f86316d8dab8d5ac5c4d5480050e2/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dffdd6e5b031ed6cc3a32aba17669ea69aa6538c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dffdd6e5b031ed6cc3a32aba17669ea69aa6538c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dffdd6e5b031ed6cc3a32aba17669ea69aa6538c"}], "stats": {"total": 1429, "additions": 762, "deletions": 667}, "files": [{"sha": "1403715cda79873aa72fb48ceecc32e583099ebf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/342be7f7369f86316d8dab8d5ac5c4d5480050e2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/342be7f7369f86316d8dab8d5ac5c4d5480050e2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=342be7f7369f86316d8dab8d5ac5c4d5480050e2", "patch": "@@ -1,3 +1,26 @@\n+2012-11-20  James Greenhalgh  <james.greenhalgh@arm.com>\n+\t    Tejas Belagod  <tejas.belagod@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c\n+\t(aarch64_simd_builtin_type_bits): Rename to...\n+\t(aarch64_simd_builtin_type_mode): ...this, make sequential.\n+\t(aarch64_simd_builtin_datum): Refactor members.\n+\t(VAR1, VAR2, ..., VAR12): Update accordingly.\n+\t(aarch64_simd_builtin_data): Include from aarch64-simd-builtins.def.\n+\t(aarch64_builtins): Update accordingly.\n+\t(init_aarch64_simd_builtins): Refactor, rename to...\n+\t(aarch64_init_simd_builtins): ...this.\n+\t(aarch64_simd_builtin_compare): Remove.\n+\t(locate_simd_builtin_icode): Likewise.\n+\t* config/aarch64/aarch64-protos.h (aarch64_init_builtins): New.\n+\t(aarch64_expand_builtin): New.\n+\t* config/aarch64/aarch64-simd-builtins.def: New file.\n+\t* config/aarch64/aarch64.c (aarch64_init_builtins):\n+\tMove to aarch64-builtins.c.\n+\t(aarch64_expand_builtin): Likewise.\n+\t* config/aarch64/aarch64.h\n+\t(aarch64_builtins): Move to aarch64-builtins.c.\n+\n 2012-11-20  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/55260"}, {"sha": "0ce57d311f60a77591e7e3002a7d6c1b0f947b4c", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 524, "deletions": 634, "changes": 1158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/342be7f7369f86316d8dab8d5ac5c4d5480050e2/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/342be7f7369f86316d8dab8d5ac5c4d5480050e2/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=342be7f7369f86316d8dab8d5ac5c4d5480050e2", "patch": "@@ -31,27 +31,28 @@\n #include \"diagnostic-core.h\"\n #include \"optabs.h\"\n \n-enum aarch64_simd_builtin_type_bits\n+enum aarch64_simd_builtin_type_mode\n {\n-  T_V8QI = 0x0001,\n-  T_V4HI = 0x0002,\n-  T_V2SI = 0x0004,\n-  T_V2SF = 0x0008,\n-  T_DI = 0x0010,\n-  T_DF = 0x0020,\n-  T_V16QI = 0x0040,\n-  T_V8HI = 0x0080,\n-  T_V4SI = 0x0100,\n-  T_V4SF = 0x0200,\n-  T_V2DI = 0x0400,\n-  T_V2DF = 0x0800,\n-  T_TI = 0x1000,\n-  T_EI = 0x2000,\n-  T_OI = 0x4000,\n-  T_XI = 0x8000,\n-  T_SI = 0x10000,\n-  T_HI = 0x20000,\n-  T_QI = 0x40000\n+  T_V8QI,\n+  T_V4HI,\n+  T_V2SI,\n+  T_V2SF,\n+  T_DI,\n+  T_DF,\n+  T_V16QI,\n+  T_V8HI,\n+  T_V4SI,\n+  T_V4SF,\n+  T_V2DI,\n+  T_V2DF,\n+  T_TI,\n+  T_EI,\n+  T_OI,\n+  T_XI,\n+  T_SI,\n+  T_HI,\n+  T_QI,\n+  T_MAX\n };\n \n #define v8qi_UP  T_V8QI\n@@ -76,8 +77,6 @@ enum aarch64_simd_builtin_type_bits\n \n #define UP(X) X##_UP\n \n-#define T_MAX 19\n-\n typedef enum\n {\n   AARCH64_SIMD_BINOP,\n@@ -124,253 +123,174 @@ typedef struct\n {\n   const char *name;\n   const aarch64_simd_itype itype;\n-  const int bits;\n-  const enum insn_code codes[T_MAX];\n-  const unsigned int num_vars;\n-  unsigned int base_fcode;\n+  enum aarch64_simd_builtin_type_mode mode;\n+  const enum insn_code code;\n+  unsigned int fcode;\n } aarch64_simd_builtin_datum;\n \n #define CF(N, X) CODE_FOR_aarch64_##N##X\n \n #define VAR1(T, N, A) \\\n-  #N, AARCH64_SIMD_##T, UP (A), { CF (N, A) }, 1, 0\n+  {#N, AARCH64_SIMD_##T, UP (A), CF (N, A), 0},\n #define VAR2(T, N, A, B) \\\n-  #N, AARCH64_SIMD_##T, UP (A) | UP (B), { CF (N, A), CF (N, B) }, 2, 0\n+  VAR1 (T, N, A) \\\n+  VAR1 (T, N, B)\n #define VAR3(T, N, A, B, C) \\\n-  #N, AARCH64_SIMD_##T, UP (A) | UP (B) | UP (C), \\\n-  { CF (N, A), CF (N, B), CF (N, C) }, 3, 0\n+  VAR2 (T, N, A, B) \\\n+  VAR1 (T, N, C)\n #define VAR4(T, N, A, B, C, D) \\\n-  #N, AARCH64_SIMD_##T, UP (A) | UP (B) | UP (C) | UP (D), \\\n-  { CF (N, A), CF (N, B), CF (N, C), CF (N, D) }, 4, 0\n+  VAR3 (T, N, A, B, C) \\\n+  VAR1 (T, N, D)\n #define VAR5(T, N, A, B, C, D, E) \\\n-  #N, AARCH64_SIMD_##T, UP (A) | UP (B) | UP (C) | UP (D) | UP (E), \\\n-  { CF (N, A), CF (N, B), CF (N, C), CF (N, D), CF (N, E) }, 5, 0\n+  VAR4 (T, N, A, B, C, D) \\\n+  VAR1 (T, N, E)\n #define VAR6(T, N, A, B, C, D, E, F) \\\n-  #N, AARCH64_SIMD_##T, UP (A) | UP (B) | UP (C) | UP (D) | UP (E) | UP (F), \\\n-  { CF (N, A), CF (N, B), CF (N, C), CF (N, D), CF (N, E), CF (N, F) }, 6, 0\n+  VAR5 (T, N, A, B, C, D, E) \\\n+  VAR1 (T, N, F)\n #define VAR7(T, N, A, B, C, D, E, F, G) \\\n-  #N, AARCH64_SIMD_##T, UP (A) | UP (B) | UP (C) | UP (D) \\\n-\t\t\t| UP (E) | UP (F) | UP (G), \\\n-  { CF (N, A), CF (N, B), CF (N, C), CF (N, D), CF (N, E), CF (N, F), \\\n-    CF (N, G) }, 7, 0\n+  VAR6 (T, N, A, B, C, D, E, F) \\\n+  VAR1 (T, N, G)\n #define VAR8(T, N, A, B, C, D, E, F, G, H) \\\n-  #N, AARCH64_SIMD_##T, UP (A) | UP (B) | UP (C) | UP (D) \\\n-\t\t| UP (E) | UP (F) | UP (G) \\\n-\t\t| UP (H), \\\n-  { CF (N, A), CF (N, B), CF (N, C), CF (N, D), CF (N, E), CF (N, F), \\\n-    CF (N, G), CF (N, H) }, 8, 0\n+  VAR7 (T, N, A, B, C, D, E, F, G) \\\n+  VAR1 (T, N, H)\n #define VAR9(T, N, A, B, C, D, E, F, G, H, I) \\\n-  #N, AARCH64_SIMD_##T, UP (A) | UP (B) | UP (C) | UP (D) \\\n-\t\t| UP (E) | UP (F) | UP (G) \\\n-\t\t| UP (H) | UP (I), \\\n-  { CF (N, A), CF (N, B), CF (N, C), CF (N, D), CF (N, E), CF (N, F), \\\n-    CF (N, G), CF (N, H), CF (N, I) }, 9, 0\n+  VAR8 (T, N, A, B, C, D, E, F, G, H) \\\n+  VAR1 (T, N, I)\n #define VAR10(T, N, A, B, C, D, E, F, G, H, I, J) \\\n-  #N, AARCH64_SIMD_##T, UP (A) | UP (B) | UP (C) | UP (D) \\\n-\t\t| UP (E) | UP (F) | UP (G) \\\n-\t\t| UP (H) | UP (I) | UP (J), \\\n-  { CF (N, A), CF (N, B), CF (N, C), CF (N, D), CF (N, E), CF (N, F), \\\n-    CF (N, G), CF (N, H), CF (N, I), CF (N, J) }, 10, 0\n-\n+  VAR9 (T, N, A, B, C, D, E, F, G, H, I) \\\n+  VAR1 (T, N, J)\n #define VAR11(T, N, A, B, C, D, E, F, G, H, I, J, K) \\\n-  #N, AARCH64_SIMD_##T, UP (A) | UP (B) | UP (C) | UP (D) \\\n-\t\t| UP (E) | UP (F) | UP (G) \\\n-\t\t| UP (H) | UP (I) | UP (J) | UP (K), \\\n-  { CF (N, A), CF (N, B), CF (N, C), CF (N, D), CF (N, E), CF (N, F), \\\n-    CF (N, G), CF (N, H), CF (N, I), CF (N, J), CF (N, K) }, 11, 0\n-\n+  VAR10 (T, N, A, B, C, D, E, F, G, H, I, J) \\\n+  VAR1 (T, N, K)\n #define VAR12(T, N, A, B, C, D, E, F, G, H, I, J, K, L) \\\n-  #N, AARCH64_SIMD_##T, UP (A) | UP (B) | UP (C) | UP (D) \\\n-\t\t| UP (E) | UP (F) | UP (G) \\\n-\t\t| UP (H) | UP (I) | UP (J) | UP (K) | UP (L), \\\n-  { CF (N, A), CF (N, B), CF (N, C), CF (N, D), CF (N, E), CF (N, F), \\\n-    CF (N, G), CF (N, H), CF (N, I), CF (N, J), CF (N, K), CF (N, L) }, 12, 0\n-\n-\n-/* The mode entries in the following table correspond to the \"key\" type of the\n-   instruction variant, i.e. equivalent to that which would be specified after\n-   the assembler mnemonic, which usually refers to the last vector operand.\n-   (Signed/unsigned/polynomial types are not differentiated between though, and\n-   are all mapped onto the same mode for a given element size.) The modes\n-   listed per instruction should be the same as those defined for that\n-   instruction's pattern in aarch64_simd.md.\n-   WARNING: Variants should be listed in the same increasing order as\n-   aarch64_simd_builtin_type_bits.  */\n+  VAR11 (T, N, A, B, C, D, E, F, G, H, I, J, K) \\\n+  VAR1 (T, N, L)\n+\n+/* BUILTIN_<ITERATOR> macros should expand to cover the same range of\n+   modes as is given for each define_mode_iterator in\n+   config/aarch64/iterators.md.  */\n+\n+#define BUILTIN_DX(T, N) \\\n+  VAR2 (T, N, di, df)\n+#define BUILTIN_SDQ_I(T, N) \\\n+  VAR4 (T, N, qi, hi, si, di)\n+#define BUILTIN_SD_HSI(T, N) \\\n+  VAR2 (T, N, hi, si)\n+#define BUILTIN_V2F(T, N) \\\n+  VAR2 (T, N, v2sf, v2df)\n+#define BUILTIN_VALL(T, N) \\\n+  VAR10 (T, N, v8qi, v16qi, v4hi, v8hi, v2si, v4si, v2di, v2sf, v4sf, v2df)\n+#define BUILTIN_VB(T, N) \\\n+  VAR2 (T, N, v8qi, v16qi)\n+#define BUILTIN_VD(T, N) \\\n+  VAR4 (T, N, v8qi, v4hi, v2si, v2sf)\n+#define BUILTIN_VDC(T, N) \\\n+  VAR6 (T, N, v8qi, v4hi, v2si, v2sf, di, df)\n+#define BUILTIN_VDIC(T, N) \\\n+  VAR3 (T, N, v8qi, v4hi, v2si)\n+#define BUILTIN_VDN(T, N) \\\n+  VAR3 (T, N, v4hi, v2si, di)\n+#define BUILTIN_VDQ(T, N) \\\n+  VAR7 (T, N, v8qi, v16qi, v4hi, v8hi, v2si, v4si, v2di)\n+#define BUILTIN_VDQF(T, N) \\\n+  VAR3 (T, N, v2sf, v4sf, v2df)\n+#define BUILTIN_VDQHS(T, N) \\\n+  VAR4 (T, N, v4hi, v8hi, v2si, v4si)\n+#define BUILTIN_VDQIF(T, N) \\\n+  VAR9 (T, N, v8qi, v16qi, v4hi, v8hi, v2si, v4si, v2sf, v4sf, v2df)\n+#define BUILTIN_VDQM(T, N) \\\n+  VAR6 (T, N, v8qi, v16qi, v4hi, v8hi, v2si, v4si)\n+#define BUILTIN_VDQV(T, N) \\\n+  VAR5 (T, N, v8qi, v16qi, v4hi, v8hi, v4si)\n+#define BUILTIN_VDQ_BHSI(T, N) \\\n+  VAR6 (T, N, v8qi, v16qi, v4hi, v8hi, v2si, v4si)\n+#define BUILTIN_VDQ_I(T, N) \\\n+  VAR7 (T, N, v8qi, v16qi, v4hi, v8hi, v2si, v4si, v2di)\n+#define BUILTIN_VDW(T, N) \\\n+  VAR3 (T, N, v8qi, v4hi, v2si)\n+#define BUILTIN_VD_BHSI(T, N) \\\n+  VAR3 (T, N, v8qi, v4hi, v2si)\n+#define BUILTIN_VD_HSI(T, N) \\\n+  VAR2 (T, N, v4hi, v2si)\n+#define BUILTIN_VD_RE(T, N) \\\n+  VAR6 (T, N, v8qi, v4hi, v2si, v2sf, di, df)\n+#define BUILTIN_VQ(T, N) \\\n+  VAR6 (T, N, v16qi, v8hi, v4si, v2di, v4sf, v2df)\n+#define BUILTIN_VQN(T, N) \\\n+  VAR3 (T, N, v8hi, v4si, v2di)\n+#define BUILTIN_VQW(T, N) \\\n+  VAR3 (T, N, v16qi, v8hi, v4si)\n+#define BUILTIN_VQ_HSI(T, N) \\\n+  VAR2 (T, N, v8hi, v4si)\n+#define BUILTIN_VQ_S(T, N) \\\n+  VAR6 (T, N, v8qi, v16qi, v4hi, v8hi, v2si, v4si)\n+#define BUILTIN_VSDQ_HSI(T, N) \\\n+  VAR6 (T, N, v4hi, v8hi, v2si, v4si, hi, si)\n+#define BUILTIN_VSDQ_I(T, N) \\\n+  VAR11 (T, N, v8qi, v16qi, v4hi, v8hi, v2si, v4si, v2di, qi, hi, si, di)\n+#define BUILTIN_VSDQ_I_BHSI(T, N) \\\n+  VAR10 (T, N, v8qi, v16qi, v4hi, v8hi, v2si, v4si, v2di, qi, hi, si)\n+#define BUILTIN_VSDQ_I_DI(T, N) \\\n+  VAR8 (T, N, v8qi, v16qi, v4hi, v8hi, v2si, v4si, v2di, di)\n+#define BUILTIN_VSD_HSI(T, N) \\\n+  VAR4 (T, N, v4hi, v2si, hi, si)\n+#define BUILTIN_VSQN_HSDI(T, N) \\\n+  VAR6 (T, N, v8hi, v4si, v2di, hi, si, di)\n+#define BUILTIN_VSTRUCT(T, N) \\\n+  VAR3 (T, N, oi, ci, xi)\n \n static aarch64_simd_builtin_datum aarch64_simd_builtin_data[] = {\n-  {VAR6 (CREATE, create, v8qi, v4hi, v2si, v2sf, di, df)},\n-  {VAR6 (GETLANE, get_lane_signed,\n-\t  v8qi, v4hi, v2si, v16qi, v8hi, v4si)},\n-  {VAR7 (GETLANE, get_lane_unsigned,\n-\t  v8qi, v4hi, v2si, v16qi, v8hi, v4si, v2di)},\n-  {VAR4 (GETLANE, get_lane, v2sf, di, v4sf, v2df)},\n-  {VAR6 (GETLANE, get_dregoi, v8qi, v4hi, v2si, v2sf, di, df)},\n-  {VAR6 (GETLANE, get_qregoi, v16qi, v8hi, v4si, v4sf, v2di, v2df)},\n-  {VAR6 (GETLANE, get_dregci, v8qi, v4hi, v2si, v2sf, di, df)},\n-  {VAR6 (GETLANE, get_qregci, v16qi, v8hi, v4si, v4sf, v2di, v2df)},\n-  {VAR6 (GETLANE, get_dregxi, v8qi, v4hi, v2si, v2sf, di, df)},\n-  {VAR6 (GETLANE, get_qregxi, v16qi, v8hi, v4si, v4sf, v2di, v2df)},\n-  {VAR6 (SETLANE, set_qregoi, v16qi, v8hi, v4si, v4sf, v2di, v2df)},\n-  {VAR6 (SETLANE, set_qregci, v16qi, v8hi, v4si, v4sf, v2di, v2df)},\n-  {VAR6 (SETLANE, set_qregxi, v16qi, v8hi, v4si, v4sf, v2di, v2df)},\n-\n-  {VAR5 (REINTERP, reinterpretv8qi, v8qi, v4hi, v2si, v2sf, di)},\n-  {VAR5 (REINTERP, reinterpretv4hi, v8qi, v4hi, v2si, v2sf, di)},\n-  {VAR5 (REINTERP, reinterpretv2si, v8qi, v4hi, v2si, v2sf, di)},\n-  {VAR5 (REINTERP, reinterpretv2sf, v8qi, v4hi, v2si, v2sf, di)},\n-  {VAR5 (REINTERP, reinterpretdi, v8qi, v4hi, v2si, v2sf, di)},\n-  {VAR6 (REINTERP, reinterpretv16qi, v16qi, v8hi, v4si, v4sf, v2di, v2df)},\n-  {VAR6 (REINTERP, reinterpretv8hi, v16qi, v8hi, v4si, v4sf, v2di, v2df)},\n-  {VAR6 (REINTERP, reinterpretv4si, v16qi, v8hi, v4si, v4sf, v2di, v2df)},\n-  {VAR6 (REINTERP, reinterpretv4sf, v16qi, v8hi, v4si, v4sf, v2di, v2df)},\n-  {VAR6 (REINTERP, reinterpretv2di, v16qi, v8hi, v4si, v4sf, v2di, v2df)},\n-  {VAR6 (COMBINE, combine, v8qi, v4hi, v2si, v2sf, di, df)},\n-\n-  {VAR3 (BINOP, saddl, v8qi, v4hi, v2si)},\n-  {VAR3 (BINOP, uaddl, v8qi, v4hi, v2si)},\n-  {VAR3 (BINOP, saddl2, v16qi, v8hi, v4si)},\n-  {VAR3 (BINOP, uaddl2, v16qi, v8hi, v4si)},\n-  {VAR3 (BINOP, saddw, v8qi, v4hi, v2si)},\n-  {VAR3 (BINOP, uaddw, v8qi, v4hi, v2si)},\n-  {VAR3 (BINOP, saddw2, v16qi, v8hi, v4si)},\n-  {VAR3 (BINOP, uaddw2, v16qi, v8hi, v4si)},\n-  {VAR6 (BINOP, shadd, v8qi, v4hi, v2si, v16qi, v8hi, v4si)},\n-  {VAR6 (BINOP, uhadd, v8qi, v4hi, v2si, v16qi, v8hi, v4si)},\n-  {VAR6 (BINOP, srhadd, v8qi, v4hi, v2si, v16qi, v8hi, v4si)},\n-  {VAR6 (BINOP, urhadd, v8qi, v4hi, v2si, v16qi, v8hi, v4si)},\n-  {VAR3 (BINOP, addhn, v8hi, v4si, v2di)},\n-  {VAR3 (BINOP, raddhn, v8hi, v4si, v2di)},\n-  {VAR3 (TERNOP, addhn2, v8hi, v4si, v2di)},\n-  {VAR3 (TERNOP, raddhn2, v8hi, v4si, v2di)},\n-  {VAR3 (BINOP, ssubl, v8qi, v4hi, v2si)},\n-  {VAR3 (BINOP, usubl, v8qi, v4hi, v2si)},\n-  {VAR3 (BINOP, ssubl2, v16qi, v8hi, v4si) },\n-  {VAR3 (BINOP, usubl2, v16qi, v8hi, v4si) },\n-  {VAR3 (BINOP, ssubw, v8qi, v4hi, v2si) },\n-  {VAR3 (BINOP, usubw, v8qi, v4hi, v2si) },\n-  {VAR3 (BINOP, ssubw2, v16qi, v8hi, v4si) },\n-  {VAR3 (BINOP, usubw2, v16qi, v8hi, v4si) },\n-  {VAR11 (BINOP, sqadd, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di,\n-\t  si, hi, qi)},\n-  {VAR11 (BINOP, uqadd, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di,\n-\t  si, hi, qi)},\n-  {VAR11 (BINOP, sqsub, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di,\n-\t  si, hi, qi)},\n-  {VAR11 (BINOP, uqsub, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di,\n-\t  si, hi, qi)},\n-  {VAR11 (BINOP, suqadd, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di,\n-\t  si, hi, qi)},\n-  {VAR11 (BINOP, usqadd, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di,\n-\t  si, hi, qi)},\n-  {VAR6 (UNOP, sqmovun, di, v8hi, v4si, v2di, si, hi)},\n-  {VAR6 (UNOP, sqmovn, di, v8hi, v4si, v2di, si, hi)},\n-  {VAR6 (UNOP, uqmovn, di, v8hi, v4si, v2di, si, hi)},\n-  {VAR10 (UNOP, sqabs, v8qi, v4hi, v2si, v16qi, v8hi, v4si, v2di, si, hi, qi)},\n-  {VAR10 (UNOP, sqneg, v8qi, v4hi, v2si, v16qi, v8hi, v4si, v2di, si, hi, qi)},\n-  {VAR2 (BINOP, pmul, v8qi, v16qi)},\n-  {VAR4 (TERNOP, sqdmlal, v4hi, v2si, si, hi)},\n-  {VAR4 (QUADOP, sqdmlal_lane, v4hi, v2si, si, hi) },\n-  {VAR2 (QUADOP, sqdmlal_laneq, v4hi, v2si) },\n-  {VAR2 (TERNOP, sqdmlal_n, v4hi, v2si) },\n-  {VAR2 (TERNOP, sqdmlal2, v8hi, v4si)},\n-  {VAR2 (QUADOP, sqdmlal2_lane, v8hi, v4si) },\n-  {VAR2 (QUADOP, sqdmlal2_laneq, v8hi, v4si) },\n-  {VAR2 (TERNOP, sqdmlal2_n, v8hi, v4si) },\n-  {VAR4 (TERNOP, sqdmlsl, v4hi, v2si, si, hi)},\n-  {VAR4 (QUADOP, sqdmlsl_lane, v4hi, v2si, si, hi) },\n-  {VAR2 (QUADOP, sqdmlsl_laneq, v4hi, v2si) },\n-  {VAR2 (TERNOP, sqdmlsl_n, v4hi, v2si) },\n-  {VAR2 (TERNOP, sqdmlsl2, v8hi, v4si)},\n-  {VAR2 (QUADOP, sqdmlsl2_lane, v8hi, v4si) },\n-  {VAR2 (QUADOP, sqdmlsl2_laneq, v8hi, v4si) },\n-  {VAR2 (TERNOP, sqdmlsl2_n, v8hi, v4si) },\n-  {VAR4 (BINOP, sqdmull, v4hi, v2si, si, hi)},\n-  {VAR4 (TERNOP, sqdmull_lane, v4hi, v2si, si, hi) },\n-  {VAR2 (TERNOP, sqdmull_laneq, v4hi, v2si) },\n-  {VAR2 (BINOP, sqdmull_n, v4hi, v2si) },\n-  {VAR2 (BINOP, sqdmull2, v8hi, v4si) },\n-  {VAR2 (TERNOP, sqdmull2_lane, v8hi, v4si) },\n-  {VAR2 (TERNOP, sqdmull2_laneq, v8hi, v4si) },\n-  {VAR2 (BINOP, sqdmull2_n, v8hi, v4si) },\n-  {VAR6 (BINOP, sqdmulh, v4hi, v2si, v8hi, v4si, si, hi)},\n-  {VAR6 (BINOP, sqrdmulh, v4hi, v2si, v8hi, v4si, si, hi)},\n-  {VAR8 (BINOP, sshl, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di) },\n-  {VAR3 (SHIFTIMM, sshll_n, v8qi, v4hi, v2si) },\n-  {VAR3 (SHIFTIMM, ushll_n, v8qi, v4hi, v2si) },\n-  {VAR3 (SHIFTIMM, sshll2_n, v16qi, v8hi, v4si) },\n-  {VAR3 (SHIFTIMM, ushll2_n, v16qi, v8hi, v4si) },\n-  {VAR8 (BINOP, ushl, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di) },\n-  {VAR8 (BINOP, sshl_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di) },\n-  {VAR8 (BINOP, ushl_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di) },\n-  {VAR11 (BINOP, sqshl, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di,\n-\t  si, hi, qi) },\n-  {VAR11 (BINOP, uqshl, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di,\n-\t  si, hi, qi) },\n-  {VAR8 (BINOP, srshl, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di) },\n-  {VAR8 (BINOP, urshl, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di) },\n-  {VAR11 (BINOP, sqrshl, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di,\n-\t  si, hi, qi) },\n-  {VAR11 (BINOP, uqrshl, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di,\n-\t  si, hi, qi) },\n-  {VAR8 (SHIFTIMM, sshr_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di) },\n-  {VAR8 (SHIFTIMM, ushr_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di) },\n-  {VAR8 (SHIFTIMM, srshr_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di) },\n-  {VAR8 (SHIFTIMM, urshr_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di) },\n-  {VAR8 (SHIFTACC, ssra_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di) },\n-  {VAR8 (SHIFTACC, usra_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di) },\n-  {VAR8 (SHIFTACC, srsra_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di) },\n-  {VAR8 (SHIFTACC, ursra_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di) },\n-  {VAR8 (SHIFTINSERT, ssri_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di) },\n-  {VAR8 (SHIFTINSERT, usri_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di) },\n-  {VAR8 (SHIFTINSERT, ssli_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di) },\n-  {VAR8 (SHIFTINSERT, usli_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di) },\n-  {VAR11 (SHIFTIMM, sqshlu_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di,\n-\t  si, hi, qi) },\n-  {VAR11 (SHIFTIMM, sqshl_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di,\n-\t  si, hi, qi) },\n-  {VAR11 (SHIFTIMM, uqshl_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di,\n-\t  si, hi, qi) },\n-  { VAR6 (SHIFTIMM, sqshrun_n, di, v8hi, v4si, v2di, si, hi) },\n-  { VAR6 (SHIFTIMM, sqrshrun_n, di, v8hi, v4si, v2di, si, hi) },\n-  { VAR6 (SHIFTIMM, sqshrn_n, di, v8hi, v4si, v2di, si, hi) },\n-  { VAR6 (SHIFTIMM, uqshrn_n, di, v8hi, v4si, v2di, si, hi) },\n-  { VAR6 (SHIFTIMM, sqrshrn_n, di, v8hi, v4si, v2di, si, hi) },\n-  { VAR6 (SHIFTIMM, uqrshrn_n, di, v8hi, v4si, v2di, si, hi) },\n-  { VAR8 (BINOP, cmeq, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di) },\n-  { VAR8 (BINOP, cmge, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di) },\n-  { VAR8 (BINOP, cmgt, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di) },\n-  { VAR8 (BINOP, cmle, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di) },\n-  { VAR8 (BINOP, cmlt, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di) },\n-  { VAR8 (BINOP, cmhs, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di) },\n-  { VAR8 (BINOP, cmhi, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di) },\n-  { VAR8 (BINOP, cmtst, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di) },\n-  { VAR6 (TERNOP, sqdmulh_lane, v4hi, v2si, v8hi, v4si, si, hi) },\n-  { VAR6 (TERNOP, sqrdmulh_lane, v4hi, v2si, v8hi, v4si, si, hi) },\n-  { VAR3 (BINOP, addp, v8qi, v4hi, v2si) },\n-  { VAR1 (UNOP, addp, di) },\n-  { VAR11 (BINOP, dup_lane, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di,\n-\t  si, hi, qi) },\n-  { VAR3 (BINOP, fmax, v2sf, v4sf, v2df) },\n-  { VAR3 (BINOP, fmin, v2sf, v4sf, v2df) },\n-  { VAR6 (BINOP, smax, v8qi, v4hi, v2si, v16qi, v8hi, v4si) },\n-  { VAR6 (BINOP, smin, v8qi, v4hi, v2si, v16qi, v8hi, v4si) },\n-  { VAR6 (BINOP, umax, v8qi, v4hi, v2si, v16qi, v8hi, v4si) },\n-  { VAR6 (BINOP, umin, v8qi, v4hi, v2si, v16qi, v8hi, v4si) },\n-  { VAR3 (UNOP, sqrt, v2sf, v4sf, v2df) },\n-  {VAR12 (LOADSTRUCT, ld2,\n-\t v8qi, v4hi, v2si, v2sf, di, df, v16qi, v8hi, v4si, v4sf, v2di, v2df)},\n-  {VAR12 (LOADSTRUCT, ld3,\n-\t v8qi, v4hi, v2si, v2sf, di, df, v16qi, v8hi, v4si, v4sf, v2di, v2df)},\n-  {VAR12 (LOADSTRUCT, ld4,\n-\t v8qi, v4hi, v2si, v2sf, di, df, v16qi, v8hi, v4si, v4sf, v2di, v2df)},\n-  {VAR12 (STORESTRUCT, st2,\n-\t v8qi, v4hi, v2si, v2sf, di, df, v16qi, v8hi, v4si, v4sf, v2di, v2df)},\n-  {VAR12 (STORESTRUCT, st3,\n-\t v8qi, v4hi, v2si, v2sf, di, df, v16qi, v8hi, v4si, v4sf, v2di, v2df)},\n-  {VAR12 (STORESTRUCT, st4,\n-\t v8qi, v4hi, v2si, v2sf, di, df, v16qi, v8hi, v4si, v4sf, v2di, v2df)},\n+#include \"aarch64-simd-builtins.def\"\n+};\n+\n+#undef VAR1\n+#define VAR1(T, N, A) \\\n+  AARCH64_SIMD_BUILTIN_##N##A,\n+\n+enum aarch64_builtins\n+{\n+  AARCH64_BUILTIN_MIN,\n+  AARCH64_SIMD_BUILTIN_BASE,\n+#include \"aarch64-simd-builtins.def\"\n+  AARCH64_SIMD_BUILTIN_MAX = AARCH64_SIMD_BUILTIN_BASE\n+\t\t\t      + ARRAY_SIZE (aarch64_simd_builtin_data),\n+  AARCH64_BUILTIN_MAX\n };\n \n+#undef BUILTIN_DX\n+#undef BUILTIN_SDQ_I\n+#undef BUILTIN_SD_HSI\n+#undef BUILTIN_V2F\n+#undef BUILTIN_VALL\n+#undef BUILTIN_VB\n+#undef BUILTIN_VD\n+#undef BUILTIN_VDC\n+#undef BUILTIN_VDIC\n+#undef BUILTIN_VDN\n+#undef BUILTIN_VDQ\n+#undef BUILTIN_VDQF\n+#undef BUILTIN_VDQHS\n+#undef BUILTIN_VDQIF\n+#undef BUILTIN_VDQM\n+#undef BUILTIN_VDQV\n+#undef BUILTIN_VDQ_BHSI\n+#undef BUILTIN_VDQ_I\n+#undef BUILTIN_VDW\n+#undef BUILTIN_VD_BHSI\n+#undef BUILTIN_VD_HSI\n+#undef BUILTIN_VD_RE\n+#undef BUILTIN_VQ\n+#undef BUILTIN_VQN\n+#undef BUILTIN_VQW\n+#undef BUILTIN_VQ_HSI\n+#undef BUILTIN_VQ_S\n+#undef BUILTIN_VSDQ_HSI\n+#undef BUILTIN_VSDQ_I\n+#undef BUILTIN_VSDQ_I_BHSI\n+#undef BUILTIN_VSDQ_I_DI\n+#undef BUILTIN_VSD_HSI\n+#undef BUILTIN_VSQN_HSDI\n+#undef BUILTIN_VSTRUCT\n #undef CF\n #undef VAR1\n #undef VAR2\n@@ -388,9 +308,9 @@ static aarch64_simd_builtin_datum aarch64_simd_builtin_data[] = {\n #define NUM_QREG_TYPES 6\n \n void\n-init_aarch64_simd_builtins (void)\n+aarch64_init_simd_builtins (void)\n {\n-  unsigned int i, fcode = AARCH64_SIMD_BUILTIN_BASE;\n+  unsigned int i, fcode = AARCH64_SIMD_BUILTIN_BASE + 1;\n \n   /* Scalar type nodes.  */\n   tree aarch64_simd_intQI_type_node;\n@@ -680,417 +600,367 @@ init_aarch64_simd_builtins (void)\n \t}\n     }\n \n-  for (i = 0; i < ARRAY_SIZE (aarch64_simd_builtin_data); i++)\n+  for (i = 0; i < ARRAY_SIZE (aarch64_simd_builtin_data); i++, fcode++)\n     {\n       aarch64_simd_builtin_datum *d = &aarch64_simd_builtin_data[i];\n-      unsigned int j, codeidx = 0;\n+      const char *const modenames[] =\n+      {\n+\t\"v8qi\", \"v4hi\", \"v2si\", \"v2sf\", \"di\", \"df\",\n+\t\"v16qi\", \"v8hi\", \"v4si\", \"v4sf\", \"v2di\", \"v2df\",\n+\t\"ti\", \"ei\", \"oi\", \"xi\", \"si\", \"hi\", \"qi\"\n+      };\n+      char namebuf[60];\n+      tree ftype = NULL;\n+      int is_load = 0;\n+      int is_store = 0;\n+\n+      gcc_assert (ARRAY_SIZE (modenames) == T_MAX);\n \n-      d->base_fcode = fcode;\n+      d->fcode = fcode;\n \n-      for (j = 0; j < T_MAX; j++)\n+      switch (d->itype)\n \t{\n-\t  const char *const modenames[] = {\n-\t    \"v8qi\", \"v4hi\", \"v2si\", \"v2sf\", \"di\", \"df\",\n-\t    \"v16qi\", \"v8hi\", \"v4si\", \"v4sf\", \"v2di\", \"v2df\",\n-\t    \"ti\", \"ei\", \"oi\", \"xi\", \"si\", \"hi\", \"qi\"\n-\t  };\n-\t  char namebuf[60];\n-\t  tree ftype = NULL;\n-\t  enum insn_code icode;\n-\t  int is_load = 0;\n-\t  int is_store = 0;\n-\n-\t  /* Skip if particular mode not supported.  */\n-\t  if ((d->bits & (1 << j)) == 0)\n-\t    continue;\n-\n-\t  icode = d->codes[codeidx++];\n-\n-\t  switch (d->itype)\n-\t    {\n-\t    case AARCH64_SIMD_LOAD1:\n-\t    case AARCH64_SIMD_LOAD1LANE:\n-\t    case AARCH64_SIMD_LOADSTRUCTLANE:\n-\t    case AARCH64_SIMD_LOADSTRUCT:\n-\t      is_load = 1;\n-\t      /* Fall through.  */\n-\t    case AARCH64_SIMD_STORE1:\n-\t    case AARCH64_SIMD_STORE1LANE:\n-\t    case AARCH64_SIMD_STORESTRUCTLANE:\n-\t    case AARCH64_SIMD_STORESTRUCT:\n-\t      if (!is_load)\n-\t\tis_store = 1;\n-\t      /* Fall through.  */\n-\t    case AARCH64_SIMD_UNOP:\n-\t    case AARCH64_SIMD_BINOP:\n-\t    case AARCH64_SIMD_LOGICBINOP:\n-\t    case AARCH64_SIMD_SHIFTINSERT:\n-\t    case AARCH64_SIMD_TERNOP:\n-\t    case AARCH64_SIMD_QUADOP:\n-\t    case AARCH64_SIMD_GETLANE:\n-\t    case AARCH64_SIMD_SETLANE:\n-\t    case AARCH64_SIMD_CREATE:\n-\t    case AARCH64_SIMD_DUP:\n-\t    case AARCH64_SIMD_DUPLANE:\n-\t    case AARCH64_SIMD_SHIFTIMM:\n-\t    case AARCH64_SIMD_SHIFTACC:\n-\t    case AARCH64_SIMD_COMBINE:\n-\t    case AARCH64_SIMD_SPLIT:\n-\t    case AARCH64_SIMD_CONVERT:\n-\t    case AARCH64_SIMD_FIXCONV:\n-\t    case AARCH64_SIMD_LANEMUL:\n-\t    case AARCH64_SIMD_LANEMULL:\n-\t    case AARCH64_SIMD_LANEMULH:\n-\t    case AARCH64_SIMD_LANEMAC:\n-\t    case AARCH64_SIMD_SCALARMUL:\n-\t    case AARCH64_SIMD_SCALARMULL:\n-\t    case AARCH64_SIMD_SCALARMULH:\n-\t    case AARCH64_SIMD_SCALARMAC:\n-\t    case AARCH64_SIMD_SELECT:\n-\t    case AARCH64_SIMD_VTBL:\n-\t    case AARCH64_SIMD_VTBX:\n+\tcase AARCH64_SIMD_LOAD1:\n+\tcase AARCH64_SIMD_LOAD1LANE:\n+\tcase AARCH64_SIMD_LOADSTRUCT:\n+\tcase AARCH64_SIMD_LOADSTRUCTLANE:\n+\t    is_load = 1;\n+\t  /* Fall through.  */\n+\tcase AARCH64_SIMD_STORE1:\n+\tcase AARCH64_SIMD_STORE1LANE:\n+\tcase AARCH64_SIMD_STORESTRUCT:\n+\tcase AARCH64_SIMD_STORESTRUCTLANE:\n+\t    if (!is_load)\n+\t      is_store = 1;\n+\t  /* Fall through.  */\n+\tcase AARCH64_SIMD_UNOP:\n+\tcase AARCH64_SIMD_BINOP:\n+\tcase AARCH64_SIMD_TERNOP:\n+\tcase AARCH64_SIMD_QUADOP:\n+\tcase AARCH64_SIMD_COMBINE:\n+\tcase AARCH64_SIMD_CONVERT:\n+\tcase AARCH64_SIMD_CREATE:\n+\tcase AARCH64_SIMD_DUP:\n+\tcase AARCH64_SIMD_DUPLANE:\n+\tcase AARCH64_SIMD_FIXCONV:\n+\tcase AARCH64_SIMD_GETLANE:\n+\tcase AARCH64_SIMD_LANEMAC:\n+\tcase AARCH64_SIMD_LANEMUL:\n+\tcase AARCH64_SIMD_LANEMULH:\n+\tcase AARCH64_SIMD_LANEMULL:\n+\tcase AARCH64_SIMD_LOGICBINOP:\n+\tcase AARCH64_SIMD_SCALARMAC:\n+\tcase AARCH64_SIMD_SCALARMUL:\n+\tcase AARCH64_SIMD_SCALARMULH:\n+\tcase AARCH64_SIMD_SCALARMULL:\n+\tcase AARCH64_SIMD_SELECT:\n+\tcase AARCH64_SIMD_SETLANE:\n+\tcase AARCH64_SIMD_SHIFTACC:\n+\tcase AARCH64_SIMD_SHIFTIMM:\n+\tcase AARCH64_SIMD_SHIFTINSERT:\n+\tcase AARCH64_SIMD_SPLIT:\n+\tcase AARCH64_SIMD_VTBL:\n+\tcase AARCH64_SIMD_VTBX:\n+\t  {\n+\t    int k;\n+\t    tree return_type = void_type_node, args = void_list_node;\n+\t    tree eltype;\n+\t    /* Build a function type directly from the insn_data for this\n+\t       builtin.  The build_function_type () function takes care of\n+\t       removing duplicates for us.  */\n+\n+\t    for (k = insn_data[d->code].n_operands -1; k >= 0; k--)\n \t      {\n-\t\tint k;\n-\t\ttree return_type = void_type_node, args = void_list_node;\n+\t\t/* Skip an internal operand for vget_{low, high}.  */\n+\t\tif (k == 2 && d->itype == AARCH64_SIMD_SPLIT)\n+\t\t  continue;\n \n-\t\t/* Build a function type directly from the insn_data for this\n-\t\t   builtin.  The build_function_type() function takes care of\n-\t\t   removing duplicates for us.  */\n-\t\tfor (k = insn_data[icode].n_operands - 1; k >= 0; k--)\n+\t\tif (is_load && k == 1)\n \t\t  {\n-\t\t    tree eltype;\n+\t\t    /* AdvSIMD load patterns always have the memory operand\n+\t\t       (a DImode pointer) in the operand 1 position.  We\n+\t\t       want a const pointer to the element type in that\n+\t\t       position.  */\n+\t\t    gcc_assert (insn_data[d->code].operand[k].mode == DImode);\n \n-\t\t    /* Skip an internal operand for vget_{low, high}.  */\n-\t\t    if (k == 2 && d->itype == AARCH64_SIMD_SPLIT)\n-\t\t      continue;\n-\n-\t\t    if (is_load && k == 1)\n+\t\t    switch (d->mode)\n \t\t      {\n-\t\t\t/* AdvSIMD load patterns always have the memory operand\n-\t\t\t   (a DImode pointer) in the operand 1 position.  We\n-\t\t\t   want a const pointer to the element type in that\n-\t\t\t   position.  */\n-\t\t\tgcc_assert (insn_data[icode].operand[k].mode ==\n-\t\t\t\t    DImode);\n-\n-\t\t\tswitch (1 << j)\n-\t\t\t  {\n-\t\t\t  case T_V8QI:\n-\t\t\t  case T_V16QI:\n-\t\t\t    eltype = const_intQI_pointer_node;\n-\t\t\t    break;\n-\n-\t\t\t  case T_V4HI:\n-\t\t\t  case T_V8HI:\n-\t\t\t    eltype = const_intHI_pointer_node;\n-\t\t\t    break;\n-\n-\t\t\t  case T_V2SI:\n-\t\t\t  case T_V4SI:\n-\t\t\t    eltype = const_intSI_pointer_node;\n-\t\t\t    break;\n-\n-\t\t\t  case T_V2SF:\n-\t\t\t  case T_V4SF:\n-\t\t\t    eltype = const_float_pointer_node;\n-\t\t\t    break;\n-\n-\t\t\t  case T_DI:\n-\t\t\t  case T_V2DI:\n-\t\t\t    eltype = const_intDI_pointer_node;\n-\t\t\t    break;\n-\n-\t\t\t  case T_DF:\n-\t\t\t  case T_V2DF:\n-\t\t\t    eltype = const_double_pointer_node;\n-\t\t\t    break;\n-\n-\t\t\t  default:\n-\t\t\t    gcc_unreachable ();\n-\t\t\t  }\n+\t\t      case T_V8QI:\n+\t\t      case T_V16QI:\n+\t\t\teltype = const_intQI_pointer_node;\n+\t\t\tbreak;\n+\n+\t\t      case T_V4HI:\n+\t\t      case T_V8HI:\n+\t\t\teltype = const_intHI_pointer_node;\n+\t\t\tbreak;\n+\n+\t\t      case T_V2SI:\n+\t\t      case T_V4SI:\n+\t\t\teltype = const_intSI_pointer_node;\n+\t\t\tbreak;\n+\n+\t\t      case T_V2SF:\n+\t\t      case T_V4SF:\n+\t\t\teltype = const_float_pointer_node;\n+\t\t\tbreak;\n+\n+\t\t      case T_DI:\n+\t\t      case T_V2DI:\n+\t\t\teltype = const_intDI_pointer_node;\n+\t\t\tbreak;\n+\n+\t\t      case T_DF:\n+\t\t      case T_V2DF:\n+\t\t\teltype = const_double_pointer_node;\n+\t\t\tbreak;\n+\n+\t\t      default:\n+\t\t\tgcc_unreachable ();\n \t\t      }\n-\t\t    else if (is_store && k == 0)\n+\t\t  }\n+\t\telse if (is_store && k == 0)\n+\t\t  {\n+\t\t    /* Similarly, AdvSIMD store patterns use operand 0 as\n+\t\t       the memory location to store to (a DImode pointer).\n+\t\t       Use a pointer to the element type of the store in\n+\t\t       that position.  */\n+\t\t    gcc_assert (insn_data[d->code].operand[k].mode == DImode);\n+\n+\t\t    switch (d->mode)\n \t\t      {\n-\t\t\t/* Similarly, AdvSIMD store patterns use operand 0 as\n-\t\t\t   the memory location to store to (a DImode pointer).\n-\t\t\t   Use a pointer to the element type of the store in\n-\t\t\t   that position.  */\n-\t\t\tgcc_assert (insn_data[icode].operand[k].mode ==\n-\t\t\t\t    DImode);\n-\n-\t\t\tswitch (1 << j)\n-\t\t\t  {\n-\t\t\t  case T_V8QI:\n-\t\t\t  case T_V16QI:\n-\t\t\t    eltype = intQI_pointer_node;\n-\t\t\t    break;\n-\n-\t\t\t  case T_V4HI:\n-\t\t\t  case T_V8HI:\n-\t\t\t    eltype = intHI_pointer_node;\n-\t\t\t    break;\n-\n-\t\t\t  case T_V2SI:\n-\t\t\t  case T_V4SI:\n-\t\t\t    eltype = intSI_pointer_node;\n-\t\t\t    break;\n-\n-\t\t\t  case T_V2SF:\n-\t\t\t  case T_V4SF:\n-\t\t\t    eltype = float_pointer_node;\n-\t\t\t    break;\n-\n-\t\t\t  case T_DI:\n-\t\t\t  case T_V2DI:\n-\t\t\t    eltype = intDI_pointer_node;\n-\t\t\t    break;\n-\n-\t\t\t  case T_DF:\n-\t\t\t  case T_V2DF:\n-\t\t\t    eltype = double_pointer_node;\n-\t\t\t    break;\n-\n-\t\t\t  default:\n-\t\t\t    gcc_unreachable ();\n-\t\t\t  }\n+\t\t      case T_V8QI:\n+\t\t      case T_V16QI:\n+\t\t\teltype = intQI_pointer_node;\n+\t\t\tbreak;\n+\n+\t\t      case T_V4HI:\n+\t\t      case T_V8HI:\n+\t\t\teltype = intHI_pointer_node;\n+\t\t\tbreak;\n+\n+\t\t      case T_V2SI:\n+\t\t      case T_V4SI:\n+\t\t\teltype = intSI_pointer_node;\n+\t\t\tbreak;\n+\n+\t\t      case T_V2SF:\n+\t\t      case T_V4SF:\n+\t\t\teltype = float_pointer_node;\n+\t\t\tbreak;\n+\n+\t\t      case T_DI:\n+\t\t      case T_V2DI:\n+\t\t\teltype = intDI_pointer_node;\n+\t\t\tbreak;\n+\n+\t\t      case T_DF:\n+\t\t      case T_V2DF:\n+\t\t\teltype = double_pointer_node;\n+\t\t\tbreak;\n+\n+\t\t      default:\n+\t\t\tgcc_unreachable ();\n \t\t      }\n-\t\t    else\n+\t\t  }\n+\t\telse\n+\t\t  {\n+\t\t    switch (insn_data[d->code].operand[k].mode)\n \t\t      {\n-\t\t\tswitch (insn_data[icode].operand[k].mode)\n-\t\t\t  {\n-\t\t\t  case VOIDmode:\n-\t\t\t    eltype = void_type_node;\n-\t\t\t    break;\n-\t\t\t    /* Scalars.  */\n-\t\t\t  case QImode:\n-\t\t\t    eltype = aarch64_simd_intQI_type_node;\n-\t\t\t    break;\n-\t\t\t  case HImode:\n-\t\t\t    eltype = aarch64_simd_intHI_type_node;\n-\t\t\t    break;\n-\t\t\t  case SImode:\n-\t\t\t    eltype = aarch64_simd_intSI_type_node;\n-\t\t\t    break;\n-\t\t\t  case SFmode:\n-\t\t\t    eltype = aarch64_simd_float_type_node;\n-\t\t\t    break;\n-\t\t\t  case DFmode:\n-\t\t\t    eltype = aarch64_simd_double_type_node;\n-\t\t\t    break;\n-\t\t\t  case DImode:\n-\t\t\t    eltype = aarch64_simd_intDI_type_node;\n-\t\t\t    break;\n-\t\t\t  case TImode:\n-\t\t\t    eltype = intTI_type_node;\n-\t\t\t    break;\n-\t\t\t  case EImode:\n-\t\t\t    eltype = intEI_type_node;\n-\t\t\t    break;\n-\t\t\t  case OImode:\n-\t\t\t    eltype = intOI_type_node;\n-\t\t\t    break;\n-\t\t\t  case CImode:\n-\t\t\t    eltype = intCI_type_node;\n-\t\t\t    break;\n-\t\t\t  case XImode:\n-\t\t\t    eltype = intXI_type_node;\n-\t\t\t    break;\n-\t\t\t    /* 64-bit vectors.  */\n-\t\t\t  case V8QImode:\n-\t\t\t    eltype = V8QI_type_node;\n-\t\t\t    break;\n-\t\t\t  case V4HImode:\n-\t\t\t    eltype = V4HI_type_node;\n-\t\t\t    break;\n-\t\t\t  case V2SImode:\n-\t\t\t    eltype = V2SI_type_node;\n-\t\t\t    break;\n-\t\t\t  case V2SFmode:\n-\t\t\t    eltype = V2SF_type_node;\n-\t\t\t    break;\n-\t\t\t    /* 128-bit vectors.  */\n-\t\t\t  case V16QImode:\n-\t\t\t    eltype = V16QI_type_node;\n-\t\t\t    break;\n-\t\t\t  case V8HImode:\n-\t\t\t    eltype = V8HI_type_node;\n-\t\t\t    break;\n-\t\t\t  case V4SImode:\n-\t\t\t    eltype = V4SI_type_node;\n-\t\t\t    break;\n-\t\t\t  case V4SFmode:\n-\t\t\t    eltype = V4SF_type_node;\n-\t\t\t    break;\n-\t\t\t  case V2DImode:\n-\t\t\t    eltype = V2DI_type_node;\n-\t\t\t    break;\n-\t\t\t  case V2DFmode:\n-\t\t\t    eltype = V2DF_type_node;\n-\t\t\t    break;\n-\t\t\t  default:\n-\t\t\t    gcc_unreachable ();\n-\t\t\t  }\n+\t\t      case VOIDmode:\n+\t\t\teltype = void_type_node;\n+\t\t\tbreak;\n+\t\t\t/* Scalars.  */\n+\t\t      case QImode:\n+\t\t\teltype = aarch64_simd_intQI_type_node;\n+\t\t\tbreak;\n+\t\t      case HImode:\n+\t\t\teltype = aarch64_simd_intHI_type_node;\n+\t\t\tbreak;\n+\t\t      case SImode:\n+\t\t\teltype = aarch64_simd_intSI_type_node;\n+\t\t\tbreak;\n+\t\t      case SFmode:\n+\t\t\teltype = aarch64_simd_float_type_node;\n+\t\t\tbreak;\n+\t\t      case DFmode:\n+\t\t\teltype = aarch64_simd_double_type_node;\n+\t\t\tbreak;\n+\t\t      case DImode:\n+\t\t\teltype = aarch64_simd_intDI_type_node;\n+\t\t\tbreak;\n+\t\t      case TImode:\n+\t\t\teltype = intTI_type_node;\n+\t\t\tbreak;\n+\t\t      case EImode:\n+\t\t\teltype = intEI_type_node;\n+\t\t\tbreak;\n+\t\t      case OImode:\n+\t\t\teltype = intOI_type_node;\n+\t\t\tbreak;\n+\t\t      case CImode:\n+\t\t\teltype = intCI_type_node;\n+\t\t\tbreak;\n+\t\t      case XImode:\n+\t\t\teltype = intXI_type_node;\n+\t\t\tbreak;\n+\t\t\t/* 64-bit vectors.  */\n+\t\t      case V8QImode:\n+\t\t\teltype = V8QI_type_node;\n+\t\t\tbreak;\n+\t\t      case V4HImode:\n+\t\t\teltype = V4HI_type_node;\n+\t\t\tbreak;\n+\t\t      case V2SImode:\n+\t\t\teltype = V2SI_type_node;\n+\t\t\tbreak;\n+\t\t      case V2SFmode:\n+\t\t\teltype = V2SF_type_node;\n+\t\t\tbreak;\n+\t\t\t/* 128-bit vectors.  */\n+\t\t      case V16QImode:\n+\t\t\teltype = V16QI_type_node;\n+\t\t\tbreak;\n+\t\t      case V8HImode:\n+\t\t\teltype = V8HI_type_node;\n+\t\t\tbreak;\n+\t\t      case V4SImode:\n+\t\t\teltype = V4SI_type_node;\n+\t\t\tbreak;\n+\t\t      case V4SFmode:\n+\t\t\teltype = V4SF_type_node;\n+\t\t\tbreak;\n+\t\t      case V2DImode:\n+\t\t\teltype = V2DI_type_node;\n+\t\t\tbreak;\n+\t\t      case V2DFmode:\n+\t\t\teltype = V2DF_type_node;\n+\t\t\tbreak;\n+\t\t      default:\n+\t\t\tgcc_unreachable ();\n \t\t      }\n-\n-\t\t    if (k == 0 && !is_store)\n-\t\t      return_type = eltype;\n-\t\t    else\n-\t\t      args = tree_cons (NULL_TREE, eltype, args);\n \t\t  }\n \n-\t\tftype = build_function_type (return_type, args);\n+\t\tif (k == 0 && !is_store)\n+\t\t  return_type = eltype;\n+\t\telse\n+\t\t  args = tree_cons (NULL_TREE, eltype, args);\n \t      }\n-\t      break;\n+\t    ftype = build_function_type (return_type, args);\n+\t  }\n+\t  break;\n \n-\t    case AARCH64_SIMD_RESULTPAIR:\n+\tcase AARCH64_SIMD_RESULTPAIR:\n+\t  {\n+\t    switch (insn_data[d->code].operand[1].mode)\n \t      {\n-\t\tswitch (insn_data[icode].operand[1].mode)\n-\t\t  {\n-\t\t  case V8QImode:\n-\t\t    ftype = void_ftype_pv8qi_v8qi_v8qi;\n-\t\t    break;\n-\t\t  case V4HImode:\n-\t\t    ftype = void_ftype_pv4hi_v4hi_v4hi;\n-\t\t    break;\n-\t\t  case V2SImode:\n-\t\t    ftype = void_ftype_pv2si_v2si_v2si;\n-\t\t    break;\n-\t\t  case V2SFmode:\n-\t\t    ftype = void_ftype_pv2sf_v2sf_v2sf;\n-\t\t    break;\n-\t\t  case DImode:\n-\t\t    ftype = void_ftype_pdi_di_di;\n-\t\t    break;\n-\t\t  case V16QImode:\n-\t\t    ftype = void_ftype_pv16qi_v16qi_v16qi;\n-\t\t    break;\n-\t\t  case V8HImode:\n-\t\t    ftype = void_ftype_pv8hi_v8hi_v8hi;\n-\t\t    break;\n-\t\t  case V4SImode:\n-\t\t    ftype = void_ftype_pv4si_v4si_v4si;\n-\t\t    break;\n-\t\t  case V4SFmode:\n-\t\t    ftype = void_ftype_pv4sf_v4sf_v4sf;\n-\t\t    break;\n-\t\t  case V2DImode:\n-\t\t    ftype = void_ftype_pv2di_v2di_v2di;\n-\t\t    break;\n-\t\t  case V2DFmode:\n-\t\t    ftype = void_ftype_pv2df_v2df_v2df;\n-\t\t    break;\n-\t\t  default:\n-\t\t    gcc_unreachable ();\n-\t\t  }\n+\t      case V8QImode:\n+\t\tftype = void_ftype_pv8qi_v8qi_v8qi;\n+\t\tbreak;\n+\t      case V4HImode:\n+\t\tftype = void_ftype_pv4hi_v4hi_v4hi;\n+\t\tbreak;\n+\t      case V2SImode:\n+\t\tftype = void_ftype_pv2si_v2si_v2si;\n+\t\tbreak;\n+\t      case V2SFmode:\n+\t\tftype = void_ftype_pv2sf_v2sf_v2sf;\n+\t\tbreak;\n+\t      case DImode:\n+\t\tftype = void_ftype_pdi_di_di;\n+\t\tbreak;\n+\t      case V16QImode:\n+\t\tftype = void_ftype_pv16qi_v16qi_v16qi;\n+\t\tbreak;\n+\t      case V8HImode:\n+\t\tftype = void_ftype_pv8hi_v8hi_v8hi;\n+\t\tbreak;\n+\t      case V4SImode:\n+\t\tftype = void_ftype_pv4si_v4si_v4si;\n+\t\tbreak;\n+\t      case V4SFmode:\n+\t\tftype = void_ftype_pv4sf_v4sf_v4sf;\n+\t\tbreak;\n+\t      case V2DImode:\n+\t\tftype = void_ftype_pv2di_v2di_v2di;\n+\t\tbreak;\n+\t      case V2DFmode:\n+\t\tftype = void_ftype_pv2df_v2df_v2df;\n+\t\tbreak;\n+\t      default:\n+\t\tgcc_unreachable ();\n \t      }\n-\t      break;\n-\n-\t    case AARCH64_SIMD_REINTERP:\n+\t  }\n+\t  break;\n+\n+\tcase AARCH64_SIMD_REINTERP:\n+\t  {\n+\t    /* We iterate over 6 doubleword types, then 6 quadword\n+\t       types.  */\n+\t    int rhs_d = d->mode % NUM_DREG_TYPES;\n+\t    int rhs_q = (d->mode - NUM_DREG_TYPES) % NUM_QREG_TYPES;\n+\t    switch (insn_data[d->code].operand[0].mode)\n \t      {\n-\t\t/* We iterate over 6 doubleword types, then 6 quadword\n-\t\t   types.  */\n-\t\tint rhs_d = j % NUM_DREG_TYPES;\n-\t\tint rhs_q = (j - NUM_DREG_TYPES) % NUM_QREG_TYPES;\n-\t\tswitch (insn_data[icode].operand[0].mode)\n-\t\t  {\n-\t\t  case V8QImode:\n-\t\t    ftype = reinterp_ftype_dreg[0][rhs_d];\n-\t\t    break;\n-\t\t  case V4HImode:\n-\t\t    ftype = reinterp_ftype_dreg[1][rhs_d];\n-\t\t    break;\n-\t\t  case V2SImode:\n-\t\t    ftype = reinterp_ftype_dreg[2][rhs_d];\n-\t\t    break;\n-\t\t  case V2SFmode:\n-\t\t    ftype = reinterp_ftype_dreg[3][rhs_d];\n-\t\t    break;\n-\t\t  case DImode:\n-\t\t    ftype = reinterp_ftype_dreg[4][rhs_d];\n-\t\t    break;\n-\t\t  case DFmode:\n-\t\t    ftype = reinterp_ftype_dreg[5][rhs_d];\n-\t\t    break;\n-\t\t  case V16QImode:\n-\t\t    ftype = reinterp_ftype_qreg[0][rhs_q];\n-\t\t    break;\n-\t\t  case V8HImode:\n-\t\t    ftype = reinterp_ftype_qreg[1][rhs_q];\n-\t\t    break;\n-\t\t  case V4SImode:\n-\t\t    ftype = reinterp_ftype_qreg[2][rhs_q];\n-\t\t    break;\n-\t\t  case V4SFmode:\n-\t\t    ftype = reinterp_ftype_qreg[3][rhs_q];\n-\t\t    break;\n-\t\t  case V2DImode:\n-\t\t    ftype = reinterp_ftype_qreg[4][rhs_q];\n-\t\t    break;\n-\t\t  case V2DFmode:\n-\t\t    ftype = reinterp_ftype_qreg[5][rhs_q];\n-\t\t    break;\n-\t\t  default:\n-\t\t    gcc_unreachable ();\n-\t\t  }\n+\t      case V8QImode:\n+\t\tftype = reinterp_ftype_dreg[0][rhs_d];\n+\t\tbreak;\n+\t      case V4HImode:\n+\t\tftype = reinterp_ftype_dreg[1][rhs_d];\n+\t\tbreak;\n+\t      case V2SImode:\n+\t\tftype = reinterp_ftype_dreg[2][rhs_d];\n+\t\tbreak;\n+\t      case V2SFmode:\n+\t\tftype = reinterp_ftype_dreg[3][rhs_d];\n+\t\tbreak;\n+\t      case DImode:\n+\t\tftype = reinterp_ftype_dreg[4][rhs_d];\n+\t\tbreak;\n+\t      case DFmode:\n+\t\tftype = reinterp_ftype_dreg[5][rhs_d];\n+\t\tbreak;\n+\t      case V16QImode:\n+\t\tftype = reinterp_ftype_qreg[0][rhs_q];\n+\t\tbreak;\n+\t      case V8HImode:\n+\t\tftype = reinterp_ftype_qreg[1][rhs_q];\n+\t\tbreak;\n+\t      case V4SImode:\n+\t\tftype = reinterp_ftype_qreg[2][rhs_q];\n+\t\tbreak;\n+\t      case V4SFmode:\n+\t\tftype = reinterp_ftype_qreg[3][rhs_q];\n+\t\tbreak;\n+\t      case V2DImode:\n+\t\tftype = reinterp_ftype_qreg[4][rhs_q];\n+\t\tbreak;\n+\t      case V2DFmode:\n+\t\tftype = reinterp_ftype_qreg[5][rhs_q];\n+\t\tbreak;\n+\t      default:\n+\t\tgcc_unreachable ();\n \t      }\n-\t      break;\n+\t  }\n+\t  break;\n \n-\t    default:\n-\t      gcc_unreachable ();\n-\t    }\n-\n-\t  gcc_assert (ftype != NULL);\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+      gcc_assert (ftype != NULL);\n \n-\t  snprintf (namebuf, sizeof (namebuf), \"__builtin_aarch64_%s%s\",\n-\t\t    d->name, modenames[j]);\n+      snprintf (namebuf, sizeof (namebuf), \"__builtin_aarch64_%s%s\",\n+\t\td->name, modenames[d->mode]);\n \n-\t  add_builtin_function (namebuf, ftype, fcode++, BUILT_IN_MD, NULL,\n-\t\t\t\tNULL_TREE);\n-\t}\n+      add_builtin_function (namebuf, ftype, fcode, BUILT_IN_MD, NULL,\n+\t\t\t    NULL_TREE);\n     }\n }\n \n-static int\n-aarch64_simd_builtin_compare (const void *a, const void *b)\n-{\n-  const aarch64_simd_builtin_datum *const key =\n-    (const aarch64_simd_builtin_datum *) a;\n-  const aarch64_simd_builtin_datum *const memb =\n-    (const aarch64_simd_builtin_datum *) b;\n-  unsigned int soughtcode = key->base_fcode;\n-\n-  if (soughtcode >= memb->base_fcode\n-      && soughtcode < memb->base_fcode + memb->num_vars)\n-    return 0;\n-  else if (soughtcode < memb->base_fcode)\n-    return -1;\n-  else\n-    return 1;\n-}\n-\n-\n-static enum insn_code\n-locate_simd_builtin_icode (int fcode, aarch64_simd_itype * itype)\n+void\n+aarch64_init_builtins (void)\n {\n-  aarch64_simd_builtin_datum key\n-    = { NULL, (aarch64_simd_itype) 0, 0, {CODE_FOR_nothing}, 0, 0};\n-  aarch64_simd_builtin_datum *found;\n-  int idx;\n-\n-  key.base_fcode = fcode;\n-  found = (aarch64_simd_builtin_datum *)\n-    bsearch (&key, &aarch64_simd_builtin_data[0],\n-\t     ARRAY_SIZE (aarch64_simd_builtin_data),\n-\t     sizeof (aarch64_simd_builtin_data[0]),\n-\t     aarch64_simd_builtin_compare);\n-  gcc_assert (found);\n-  idx = fcode - (int) found->base_fcode;\n-  gcc_assert (idx >= 0 && idx < T_MAX && idx < (int) found->num_vars);\n-\n-  if (itype)\n-    *itype = found->itype;\n-\n-  return found->codes[idx];\n+  if (TARGET_SIMD)\n+    aarch64_init_simd_builtins ();\n }\n \n typedef enum\n@@ -1225,8 +1095,10 @@ aarch64_simd_expand_args (rtx target, int icode, int have_retval,\n rtx\n aarch64_simd_expand_builtin (int fcode, tree exp, rtx target)\n {\n-  aarch64_simd_itype itype;\n-  enum insn_code icode = locate_simd_builtin_icode (fcode, &itype);\n+  aarch64_simd_builtin_datum *d =\n+\t\t&aarch64_simd_builtin_data[fcode - (AARCH64_SIMD_BUILTIN_BASE + 1)];\n+  aarch64_simd_itype itype = d->itype;\n+  enum insn_code icode = d->code;\n \n   switch (itype)\n     {\n@@ -1318,3 +1190,21 @@ aarch64_simd_expand_builtin (int fcode, tree exp, rtx target)\n       gcc_unreachable ();\n     }\n }\n+\n+/* Expand an expression EXP that calls a built-in function,\n+   with result going to TARGET if that's convenient.  */\n+rtx\n+aarch64_expand_builtin (tree exp,\n+\t\t     rtx target,\n+\t\t     rtx subtarget ATTRIBUTE_UNUSED,\n+\t\t     enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t     int ignore ATTRIBUTE_UNUSED)\n+{\n+  tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n+  int fcode = DECL_FUNCTION_CODE (fndecl);\n+\n+  if (fcode >= AARCH64_SIMD_BUILTIN_BASE)\n+    return aarch64_simd_expand_builtin (fcode, exp, target);\n+\n+  return NULL_RTX;\n+}"}, {"sha": "b5a32b39cf129f193e07ee5552d3012a1a023769", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/342be7f7369f86316d8dab8d5ac5c4d5480050e2/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/342be7f7369f86316d8dab8d5ac5c4d5480050e2/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=342be7f7369f86316d8dab8d5ac5c4d5480050e2", "patch": "@@ -228,4 +228,11 @@ void aarch64_split_atomic_op (enum rtx_code, rtx, rtx, rtx, rtx, rtx, rtx);\n \n #endif /* RTX_CODE */\n \n+void aarch64_init_builtins (void);\n+rtx aarch64_expand_builtin (tree exp,\n+\t\t\t    rtx target,\n+\t\t\t    rtx subtarget ATTRIBUTE_UNUSED,\n+\t\t\t    enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t\t    int ignore ATTRIBUTE_UNUSED);\n+\n #endif /* GCC_AARCH64_PROTOS_H */"}, {"sha": "2e3c4e1ca5faf7a5ce0f619a6c29af5ef45c314d", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "added", "additions": 208, "deletions": 0, "changes": 208, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/342be7f7369f86316d8dab8d5ac5c4d5480050e2/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/342be7f7369f86316d8dab8d5ac5c4d5480050e2/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=342be7f7369f86316d8dab8d5ac5c4d5480050e2", "patch": "@@ -0,0 +1,208 @@\n+\n+/* In the list below, the BUILTIN_<ITERATOR> macros should\n+   correspond to the iterator used to construct the instruction's\n+   patterns in aarch64-simd.md.  A helpful idiom to follow when\n+   adding new builtins is to add a line for each pattern in the md\n+   file.  Thus, ADDP, which has one pattern defined for the VD_BHSI\n+   iterator, and one for DImode, has two entries below.  */\n+\n+  BUILTIN_VD_RE (CREATE, create)\n+  BUILTIN_VQ_S (GETLANE, get_lane_signed)\n+  BUILTIN_VDQ (GETLANE, get_lane_unsigned)\n+  BUILTIN_VDQF (GETLANE, get_lane)\n+  VAR1 (GETLANE, get_lane, di)\n+  BUILTIN_VDC (COMBINE, combine)\n+  BUILTIN_VB (BINOP, pmul)\n+  BUILTIN_VDQF (UNOP, sqrt)\n+  BUILTIN_VD_BHSI (BINOP, addp)\n+  VAR1 (UNOP, addp, di)\n+\n+  BUILTIN_VD_RE (REINTERP, reinterpretdi)\n+  BUILTIN_VDC (REINTERP, reinterpretv8qi)\n+  BUILTIN_VDC (REINTERP, reinterpretv4hi)\n+  BUILTIN_VDC (REINTERP, reinterpretv2si)\n+  BUILTIN_VDC (REINTERP, reinterpretv2sf)\n+  BUILTIN_VQ (REINTERP, reinterpretv16qi)\n+  BUILTIN_VQ (REINTERP, reinterpretv8hi)\n+  BUILTIN_VQ (REINTERP, reinterpretv4si)\n+  BUILTIN_VQ (REINTERP, reinterpretv4sf)\n+  BUILTIN_VQ (REINTERP, reinterpretv2di)\n+  BUILTIN_VQ (REINTERP, reinterpretv2df)\n+\n+  BUILTIN_VDQ_I (BINOP, dup_lane)\n+  BUILTIN_SDQ_I (BINOP, dup_lane)\n+  /* Implemented by aarch64_<sur>q<r>shl<mode>.  */\n+  BUILTIN_VSDQ_I (BINOP, sqshl)\n+  BUILTIN_VSDQ_I (BINOP, uqshl)\n+  BUILTIN_VSDQ_I (BINOP, sqrshl)\n+  BUILTIN_VSDQ_I (BINOP, uqrshl)\n+  /* Implemented by aarch64_<su_optab><optab><mode>.  */\n+  BUILTIN_VSDQ_I (BINOP, sqadd)\n+  BUILTIN_VSDQ_I (BINOP, uqadd)\n+  BUILTIN_VSDQ_I (BINOP, sqsub)\n+  BUILTIN_VSDQ_I (BINOP, uqsub)\n+  /* Implemented by aarch64_<sur>qadd<mode>.  */\n+  BUILTIN_VSDQ_I (BINOP, suqadd)\n+  BUILTIN_VSDQ_I (BINOP, usqadd)\n+\n+  /* Implemented by aarch64_get_dreg<VSTRUCT:mode><VDC:mode>.  */\n+  BUILTIN_VDC (GETLANE, get_dregoi)\n+  BUILTIN_VDC (GETLANE, get_dregci)\n+  BUILTIN_VDC (GETLANE, get_dregxi)\n+  /* Implemented by aarch64_get_qreg<VSTRUCT:mode><VQ:mode>.  */\n+  BUILTIN_VQ (GETLANE, get_qregoi)\n+  BUILTIN_VQ (GETLANE, get_qregci)\n+  BUILTIN_VQ (GETLANE, get_qregxi)\n+  /* Implemented by aarch64_set_qreg<VSTRUCT:mode><VQ:mode>.  */\n+  BUILTIN_VQ (SETLANE, set_qregoi)\n+  BUILTIN_VQ (SETLANE, set_qregci)\n+  BUILTIN_VQ (SETLANE, set_qregxi)\n+  /* Implemented by aarch64_ld<VSTRUCT:nregs><VDC:mode>.  */\n+  BUILTIN_VDC (LOADSTRUCT, ld2)\n+  BUILTIN_VDC (LOADSTRUCT, ld3)\n+  BUILTIN_VDC (LOADSTRUCT, ld4)\n+  /* Implemented by aarch64_ld<VSTRUCT:nregs><VQ:mode>.  */\n+  BUILTIN_VQ (LOADSTRUCT, ld2)\n+  BUILTIN_VQ (LOADSTRUCT, ld3)\n+  BUILTIN_VQ (LOADSTRUCT, ld4)\n+  /* Implemented by aarch64_st<VSTRUCT:nregs><VDC:mode>.  */\n+  BUILTIN_VDC (STORESTRUCT, st2)\n+  BUILTIN_VDC (STORESTRUCT, st3)\n+  BUILTIN_VDC (STORESTRUCT, st4)\n+  /* Implemented by aarch64_st<VSTRUCT:nregs><VQ:mode>.  */\n+  BUILTIN_VQ (STORESTRUCT, st2)\n+  BUILTIN_VQ (STORESTRUCT, st3)\n+  BUILTIN_VQ (STORESTRUCT, st4)\n+\n+  BUILTIN_VQW (BINOP, saddl2)\n+  BUILTIN_VQW (BINOP, uaddl2)\n+  BUILTIN_VQW (BINOP, ssubl2)\n+  BUILTIN_VQW (BINOP, usubl2)\n+  BUILTIN_VQW (BINOP, saddw2)\n+  BUILTIN_VQW (BINOP, uaddw2)\n+  BUILTIN_VQW (BINOP, ssubw2)\n+  BUILTIN_VQW (BINOP, usubw2)\n+  /* Implemented by aarch64_<ANY_EXTEND:su><ADDSUB:optab>l<mode>.  */\n+  BUILTIN_VDW (BINOP, saddl)\n+  BUILTIN_VDW (BINOP, uaddl)\n+  BUILTIN_VDW (BINOP, ssubl)\n+  BUILTIN_VDW (BINOP, usubl)\n+  /* Implemented by aarch64_<ANY_EXTEND:su><ADDSUB:optab>w<mode>.  */\n+  BUILTIN_VDW (BINOP, saddw)\n+  BUILTIN_VDW (BINOP, uaddw)\n+  BUILTIN_VDW (BINOP, ssubw)\n+  BUILTIN_VDW (BINOP, usubw)\n+  /* Implemented by aarch64_<sur>h<addsub><mode>.  */\n+  BUILTIN_VQ_S (BINOP, shadd)\n+  BUILTIN_VQ_S (BINOP, uhadd)\n+  BUILTIN_VQ_S (BINOP, srhadd)\n+  BUILTIN_VQ_S (BINOP, urhadd)\n+  /* Implemented by aarch64_<sur><addsub>hn<mode>.  */\n+  BUILTIN_VQN (BINOP, addhn)\n+  BUILTIN_VQN (BINOP, raddhn)\n+  /* Implemented by aarch64_<sur><addsub>hn2<mode>.  */\n+  BUILTIN_VQN (TERNOP, addhn2)\n+  BUILTIN_VQN (TERNOP, raddhn2)\n+\n+  BUILTIN_VSQN_HSDI (UNOP, sqmovun)\n+  /* Implemented by aarch64_<sur>qmovn<mode>.  */\n+  BUILTIN_VSQN_HSDI (UNOP, sqmovn)\n+  BUILTIN_VSQN_HSDI (UNOP, uqmovn)\n+  /* Implemented by aarch64_s<optab><mode>.  */\n+  BUILTIN_VSDQ_I_BHSI (UNOP, sqabs)\n+  BUILTIN_VSDQ_I_BHSI (UNOP, sqneg)\n+\n+  BUILTIN_VSD_HSI (QUADOP, sqdmlal_lane)\n+  BUILTIN_VSD_HSI (QUADOP, sqdmlsl_lane)\n+  BUILTIN_VSD_HSI (QUADOP, sqdmlal_laneq)\n+  BUILTIN_VSD_HSI (QUADOP, sqdmlsl_laneq)\n+  BUILTIN_VQ_HSI (TERNOP, sqdmlal2)\n+  BUILTIN_VQ_HSI (TERNOP, sqdmlsl2)\n+  BUILTIN_VQ_HSI (QUADOP, sqdmlal2_lane)\n+  BUILTIN_VQ_HSI (QUADOP, sqdmlsl2_lane)\n+  BUILTIN_VQ_HSI (QUADOP, sqdmlal2_laneq)\n+  BUILTIN_VQ_HSI (QUADOP, sqdmlsl2_laneq)\n+  BUILTIN_VQ_HSI (TERNOP, sqdmlal2_n)\n+  BUILTIN_VQ_HSI (TERNOP, sqdmlsl2_n)\n+  /* Implemented by aarch64_sqdml<SBINQOPS:as>l<mode>.  */\n+  BUILTIN_VSD_HSI (TERNOP, sqdmlal)\n+  BUILTIN_VSD_HSI (TERNOP, sqdmlsl)\n+  /* Implemented by aarch64_sqdml<SBINQOPS:as>l_n<mode>.  */\n+  BUILTIN_VD_HSI (TERNOP, sqdmlal_n)\n+  BUILTIN_VD_HSI (TERNOP, sqdmlsl_n)\n+\n+  BUILTIN_VSD_HSI (BINOP, sqdmull)\n+  BUILTIN_VSD_HSI (TERNOP, sqdmull_lane)\n+  BUILTIN_VD_HSI (TERNOP, sqdmull_laneq)\n+  BUILTIN_VD_HSI (BINOP, sqdmull_n)\n+  BUILTIN_VQ_HSI (BINOP, sqdmull2)\n+  BUILTIN_VQ_HSI (TERNOP, sqdmull2_lane)\n+  BUILTIN_VQ_HSI (TERNOP, sqdmull2_laneq)\n+  BUILTIN_VQ_HSI (BINOP, sqdmull2_n)\n+  /* Implemented by aarch64_sq<r>dmulh<mode>.  */\n+  BUILTIN_VSDQ_HSI (BINOP, sqdmulh)\n+  BUILTIN_VSDQ_HSI (BINOP, sqrdmulh)\n+  /* Implemented by aarch64_sq<r>dmulh_lane<mode>.  */\n+  BUILTIN_VSDQ_HSI (TERNOP, sqdmulh_lane)\n+  BUILTIN_VSDQ_HSI (TERNOP, sqrdmulh_lane)\n+\n+  BUILTIN_VSDQ_I_DI (BINOP, sshl_n)\n+  BUILTIN_VSDQ_I_DI (BINOP, ushl_n)\n+  /* Implemented by aarch64_<sur>shl<mode>.  */\n+  BUILTIN_VSDQ_I_DI (BINOP, sshl)\n+  BUILTIN_VSDQ_I_DI (BINOP, ushl)\n+  BUILTIN_VSDQ_I_DI (BINOP, srshl)\n+  BUILTIN_VSDQ_I_DI (BINOP, urshl)\n+\n+  BUILTIN_VSDQ_I_DI (SHIFTIMM, sshr_n)\n+  BUILTIN_VSDQ_I_DI (SHIFTIMM, ushr_n)\n+  /* Implemented by aarch64_<sur>shr_n<mode>.  */\n+  BUILTIN_VSDQ_I_DI (SHIFTIMM, srshr_n)\n+  BUILTIN_VSDQ_I_DI (SHIFTIMM, urshr_n)\n+  /* Implemented by aarch64_<sur>sra_n<mode>.  */\n+  BUILTIN_VSDQ_I_DI (SHIFTACC, ssra_n)\n+  BUILTIN_VSDQ_I_DI (SHIFTACC, usra_n)\n+  BUILTIN_VSDQ_I_DI (SHIFTACC, srsra_n)\n+  BUILTIN_VSDQ_I_DI (SHIFTACC, ursra_n)\n+  /* Implemented by aarch64_<sur>shll_n<mode>.  */\n+  BUILTIN_VDW (SHIFTIMM, sshll_n)\n+  BUILTIN_VDW (SHIFTIMM, ushll_n)\n+  /* Implemented by aarch64_<sur>shll2_n<mode>.  */\n+  BUILTIN_VQW (SHIFTIMM, sshll2_n)\n+  BUILTIN_VQW (SHIFTIMM, ushll2_n)\n+  /* Implemented by aarch64_<sur>q<r>shr<u>n_n<mode>.  */\n+  BUILTIN_VSQN_HSDI (SHIFTIMM, sqshrun_n)\n+  BUILTIN_VSQN_HSDI (SHIFTIMM, sqrshrun_n)\n+  BUILTIN_VSQN_HSDI (SHIFTIMM, sqshrn_n)\n+  BUILTIN_VSQN_HSDI (SHIFTIMM, uqshrn_n)\n+  BUILTIN_VSQN_HSDI (SHIFTIMM, sqrshrn_n)\n+  BUILTIN_VSQN_HSDI (SHIFTIMM, uqrshrn_n)\n+  /* Implemented by aarch64_<sur>s<lr>i_n<mode>.  */\n+  BUILTIN_VSDQ_I_DI (SHIFTINSERT, ssri_n)\n+  BUILTIN_VSDQ_I_DI (SHIFTINSERT, usri_n)\n+  BUILTIN_VSDQ_I_DI (SHIFTINSERT, ssli_n)\n+  BUILTIN_VSDQ_I_DI (SHIFTINSERT, usli_n)\n+  /* Implemented by aarch64_<sur>qshl<u>_n<mode>.  */\n+  BUILTIN_VSDQ_I (SHIFTIMM, sqshlu_n)\n+  BUILTIN_VSDQ_I (SHIFTIMM, sqshl_n)\n+  BUILTIN_VSDQ_I (SHIFTIMM, uqshl_n)\n+\n+  /* Implemented by aarch64_cm<cmp><mode>.  */\n+  BUILTIN_VSDQ_I_DI (BINOP, cmeq)\n+  BUILTIN_VSDQ_I_DI (BINOP, cmge)\n+  BUILTIN_VSDQ_I_DI (BINOP, cmgt)\n+  BUILTIN_VSDQ_I_DI (BINOP, cmle)\n+  BUILTIN_VSDQ_I_DI (BINOP, cmlt)\n+  /* Implemented by aarch64_cm<cmp><mode>.  */\n+  BUILTIN_VSDQ_I_DI (BINOP, cmhs)\n+  BUILTIN_VSDQ_I_DI (BINOP, cmhi)\n+  BUILTIN_VSDQ_I_DI (BINOP, cmtst)\n+\n+  /* Implemented by aarch64_<fmaxmin><mode>.  */\n+  BUILTIN_VDQF (BINOP, fmax)\n+  BUILTIN_VDQF (BINOP, fmin)\n+  /* Implemented by aarch64_<maxmin><mode>.  */\n+  BUILTIN_VDQ_BHSI (BINOP, smax)\n+  BUILTIN_VDQ_BHSI (BINOP, smin)\n+  BUILTIN_VDQ_BHSI (BINOP, umax)\n+  BUILTIN_VDQ_BHSI (BINOP, umin)"}, {"sha": "d4708bfa6760dce0a094f5c7bbba68218d2fad8f", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/342be7f7369f86316d8dab8d5ac5c4d5480050e2/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/342be7f7369f86316d8dab8d5ac5c4d5480050e2/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=342be7f7369f86316d8dab8d5ac5c4d5480050e2", "patch": "@@ -5008,13 +5008,6 @@ aarch64_legitimate_constant_p (enum machine_mode mode, rtx x)\n   return aarch64_constant_address_p (x);\n }\n \n-static void\n-aarch64_init_builtins (void)\n-{\n-  if (TARGET_SIMD)\n-    init_aarch64_simd_builtins ();\n-}\n-\n rtx\n aarch64_load_tp (rtx target)\n {\n@@ -5028,24 +5021,6 @@ aarch64_load_tp (rtx target)\n   return target;\n }\n \n-/* Expand an expression EXP that calls a built-in function,\n-   with result going to TARGET if that's convenient.  */\n-static rtx\n-aarch64_expand_builtin (tree exp,\n-\t\t     rtx target,\n-\t\t     rtx subtarget ATTRIBUTE_UNUSED,\n-\t\t     enum machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t     int ignore ATTRIBUTE_UNUSED)\n-{\n-  tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n-  int fcode = DECL_FUNCTION_CODE (fndecl);\n-\n-  if (fcode >= AARCH64_SIMD_BUILTIN_BASE)\n-    return aarch64_simd_expand_builtin (fcode, exp, target);\n-\n-  return NULL_RTX;\n-}\n-\n /* On AAPCS systems, this is the \"struct __va_list\".  */\n static GTY(()) tree va_list_type;\n "}, {"sha": "9724e94835fe26a04a5eb1391416defe9f6c5b8f", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/342be7f7369f86316d8dab8d5ac5c4d5480050e2/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/342be7f7369f86316d8dab8d5ac5c4d5480050e2/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=342be7f7369f86316d8dab8d5ac5c4d5480050e2", "patch": "@@ -789,14 +789,6 @@ do {\t\t\t\t\t\t\t\t\t     \\\n   extern void  __aarch64_sync_cache_range (void *, void *);\t\\\n   __aarch64_sync_cache_range (beg, end)\n \n-/* This should be integrated with the equivalent in the 32 bit\n-   world.  */\n-enum aarch64_builtins\n-{\n-  AARCH64_BUILTIN_MIN,\n-  AARCH64_SIMD_BUILTIN_BASE\n-};\n-\n /*  VFP registers may only be accessed in the mode they\n    were set.  */\n #define CANNOT_CHANGE_MODE_CLASS(FROM, TO, CLASS)\t\\"}]}