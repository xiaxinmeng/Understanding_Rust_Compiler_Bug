{"sha": "5e6597064b0c7eb93b8f720afc4aa970eefb0628", "node_id": "C_kwDOANBUbNoAKDVlNjU5NzA2NGIwYzdlYjkzYjhmNzIwYWZjNGFhOTcwZWVmYjA2Mjg", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-04-08T07:14:44Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-04-08T07:14:44Z"}, "message": "fold-const: Fix up make_range_step [PR105189]\n\nThe following testcase is miscompiled, because fold_truth_andor\nincorrectly folds\n(unsigned) foo () >= 0U && 1\ninto\nfoo () >= 0\nFor the unsigned comparison (which is useless in this case,\nas >= 0U is always true, but hasn't been folded yet), previous\nmake_range_step derives exp (unsigned) foo () and +[0U, -]\nrange for it.  Next we process the NOP_EXPR.  We have special code\nfor unsigned to signed casts, already earlier punt if low or high\naren't representable in arg0_type or if it is a narrowing conversion.\nFor the signed to unsigned casts, I think if high is specified we\nare still fine, as we punt for non-representable values in arg0_type,\nn_high is then still representable and so was smaller or equal to\nsigned maximum and either low is not present (equivalent to 0U), or\nlow must be smaller or equal to high and so for unsigned exp\n+[low, high] the signed exp +[n_low, n_high] will be correct.\nSimilarly, if both low and high aren't specified (always true or\nalways false), it is ok too.\nBut if we have for unsigned exp +[low, -] or -[low, -], using\n+[n_low, -] or -[n_high, -] is incorrect.  Because low is smaller\nor equal to signed maximum and high is unspecified (i.e. unsigned\nmaximum), when signed that range is a union of +[n_low, -] and\n+[-, -1] which is equivalent to -[0, n_low-1], unless low\nis 0, in that case we can treat it as [-, -].\n\n2022-04-08  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/105189\n\t* fold-const.cc (make_range_step): Fix up handling of\n\t(unsigned) x +[low, -] ranges for signed x if low fits into\n\ttypeof (x).\n\n\t* g++.dg/torture/pr105189.C: New test.", "tree": {"sha": "151b7b9cca7a8bc0c7114fd33bd09eb99d05fe50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/151b7b9cca7a8bc0c7114fd33bd09eb99d05fe50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e6597064b0c7eb93b8f720afc4aa970eefb0628", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e6597064b0c7eb93b8f720afc4aa970eefb0628", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e6597064b0c7eb93b8f720afc4aa970eefb0628", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e6597064b0c7eb93b8f720afc4aa970eefb0628/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cef03728234644b1a9ad5bd8e94daeac8650a71b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cef03728234644b1a9ad5bd8e94daeac8650a71b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cef03728234644b1a9ad5bd8e94daeac8650a71b"}], "stats": {"total": 47, "additions": 46, "deletions": 1}, "files": [{"sha": "7226bc5af01a8ce662827ef0bad813dddc06ff31", "filename": "gcc/fold-const.cc", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e6597064b0c7eb93b8f720afc4aa970eefb0628/gcc%2Ffold-const.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e6597064b0c7eb93b8f720afc4aa970eefb0628/gcc%2Ffold-const.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.cc?ref=5e6597064b0c7eb93b8f720afc4aa970eefb0628", "patch": "@@ -5212,7 +5212,7 @@ make_range_step (location_t loc, enum tree_code code, tree arg0, tree arg1,\n \tn_high = fold_convert_loc (loc, arg0_type, n_high);\n \n       /* If we're converting arg0 from an unsigned type, to exp,\n-\t a signed type,  we will be doing the comparison as unsigned.\n+\t a signed type, we will be doing the comparison as unsigned.\n \t The tests above have already verified that LOW and HIGH\n \t are both positive.\n \n@@ -5274,6 +5274,32 @@ make_range_step (location_t loc, enum tree_code code, tree arg0, tree arg1,\n \t    }\n \t}\n \n+      /* Otherwise, if we are converting arg0 from signed type, to exp,\n+\t an unsigned type, we will do the comparison as signed.  If\n+\t high is non-NULL, we punt above if it doesn't fit in the signed\n+\t type, so if we get through here, +[-, high] or +[low, high] are\n+\t equivalent to +[-, n_high] or +[n_low, n_high].  Similarly,\n+\t +[-, -] or -[-, -] are equivalent too.  But if low is specified and\n+\t high is not, the +[low, -] range is equivalent to union of\n+\t +[n_low, -] and +[-, -1] ranges, so +[low, -] is equivalent to\n+\t -[0, n_low-1] and similarly -[low, -] to +[0, n_low-1], except for\n+\t low being 0, which should be treated as [-, -].  */\n+      else if (TYPE_UNSIGNED (exp_type)\n+\t       && !TYPE_UNSIGNED (arg0_type)\n+\t       && low\n+\t       && !high)\n+\t{\n+\t  if (integer_zerop (low))\n+\t    n_low = NULL_TREE;\n+\t  else\n+\t    {\n+\t      n_high = fold_build2_loc (loc, PLUS_EXPR, arg0_type,\n+\t\t\t\t\tn_low, build_int_cst (arg0_type, -1));\n+\t      n_low = build_zero_cst (arg0_type);\n+\t      in_p = !in_p;\n+\t    }\n+\t}\n+\n       *p_low = n_low;\n       *p_high = n_high;\n       *p_in_p = in_p;"}, {"sha": "a3870772cfe202b662339f9019168bda8a020b83", "filename": "gcc/testsuite/g++.dg/torture/pr105189.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e6597064b0c7eb93b8f720afc4aa970eefb0628/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr105189.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e6597064b0c7eb93b8f720afc4aa970eefb0628/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr105189.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr105189.C?ref=5e6597064b0c7eb93b8f720afc4aa970eefb0628", "patch": "@@ -0,0 +1,19 @@\n+// PR tree-optimization/105189\n+// { dg-do run }\n+\n+int\n+foo ()\n+{\n+  return -1;\n+}\n+\n+int\n+main ()\n+{\n+  int c = foo () >= 0U && 1;\n+  if (c != 1)\n+    __builtin_abort ();\n+  int d = foo () >= 3U && 1;\n+  if (d != 1)\n+    __builtin_abort ();\n+}"}]}