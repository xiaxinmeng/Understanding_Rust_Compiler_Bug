{"sha": "4af46a327e490e1a24a353bc55f0d64631ba85de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGFmNDZhMzI3ZTQ5MGUxYTI0YTM1M2JjNTVmMGQ2NDYzMWJhODVkZQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2004-10-28T12:29:36Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2004-10-28T12:29:36Z"}, "message": "* function.c (assign_parm_setup_block): Handle parallels correctly.\n\nFrom-SVN: r89750", "tree": {"sha": "54dc9e1493a74735f8202d93c489ce24b19e01a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54dc9e1493a74735f8202d93c489ce24b19e01a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4af46a327e490e1a24a353bc55f0d64631ba85de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4af46a327e490e1a24a353bc55f0d64631ba85de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4af46a327e490e1a24a353bc55f0d64631ba85de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4af46a327e490e1a24a353bc55f0d64631ba85de/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5921f276c7e038adb243e7e3145b6bb899e60ef6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5921f276c7e038adb243e7e3145b6bb899e60ef6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5921f276c7e038adb243e7e3145b6bb899e60ef6"}], "stats": {"total": 28, "additions": 26, "deletions": 2}, "files": [{"sha": "4eb71fbc1496abd0d166a85c5088e4717b5a2226", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4af46a327e490e1a24a353bc55f0d64631ba85de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4af46a327e490e1a24a353bc55f0d64631ba85de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4af46a327e490e1a24a353bc55f0d64631ba85de", "patch": "@@ -1,3 +1,7 @@\n+2004-10-28  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* function.c (assign_parm_setup_block): Handle parallels correctly.\n+\n 2004-10-28  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* final.c (shorten_branches): Initialize flags structure."}, {"sha": "82776e7cd7a3491990f2ea4d355164442f1480d4", "filename": "gcc/function.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4af46a327e490e1a24a353bc55f0d64631ba85de/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4af46a327e490e1a24a353bc55f0d64631ba85de/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=4af46a327e490e1a24a353bc55f0d64631ba85de", "patch": "@@ -2550,8 +2550,28 @@ assign_parm_setup_block (tree parm, struct assign_parm_data_one *data)\n     {\n       rtx parmreg = gen_reg_rtx (data->nominal_mode);\n \n-      emit_group_store (parmreg, entry_parm, data->nominal_type,\n-\t\t\tint_size_in_bytes (data->nominal_type));\n+      /* For values returned in multiple registers, handle possible\n+\t incompatible calls to emit_group_store.\n+\n+\t For example, the following would be invalid, and would have to\n+\t be fixed by the conditional below:\n+\n+\t   emit_group_store ((reg:SF), (parallel:DF))\n+\t   emit_group_store ((reg:SI), (parallel:DI))\n+\n+\t An example of this are doubles in e500 v2:\n+\t   (parallel:DF (expr_list (reg:SI) (const_int 0))\n+\t                (expr_list (reg:SI) (const_int 4))).  */\n+      if (data->nominal_mode != data->passed_mode)\n+\t{\n+\t  rtx t = gen_reg_rtx (GET_MODE (entry_parm));\n+\t  emit_group_store (t, entry_parm, NULL_TREE,\n+\t\t\t    GET_MODE_SIZE (GET_MODE (entry_parm)));\n+\t  convert_move (parmreg, t, 0);\n+\t}\n+      else\n+\temit_group_store (parmreg, entry_parm, data->nominal_type,\n+\t\t\t  int_size_in_bytes (data->nominal_type));\n       SET_DECL_RTL (parm, parmreg);\n       return;\n     }"}]}