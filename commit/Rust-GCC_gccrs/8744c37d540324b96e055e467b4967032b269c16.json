{"sha": "8744c37d540324b96e055e467b4967032b269c16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc0NGMzN2Q1NDAzMjRiOTZlMDU1ZTQ2N2I0OTY3MDMyYjI2OWMxNg==", "commit": {"author": {"name": "Tom Honermann", "email": "tom@honermann.net", "date": "2019-08-05T19:34:23Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-08-05T19:34:23Z"}, "message": "PR c++/88095, CTAD for literal operator templates per P0732\n\nThis patch fixes PR c++/88095: class nontype template parameter UDL string\nliterals doesn't accepts deduction placeholder\n\nIt also addresses a latent issue; literal operator templates with template\nparameter packs of literal class type were previously accepted.  The patch\ncorrects this and adds a test (udlit-class-nttp-neg.C).\n\nThis fix is needed for one of the char8_t remediation approaches documented\nin P1423, and may be helpful for existing code bases impacted by the char8_t\nchanges adopted via P0482 for C++20.\n\ngcc/cp/ChangeLog:\n\n2019-08-02  Tom Honermann  <tom@honermann.net>\n\n        * parser.c (cp_parser_template_declaration_after_parameters): Enable\n        class template argument deduction for non-type template parameters\n        in literal operator templates.\n\ngcc/testsuite/ChangeLog:\n\n2019-08-02  Tom Honermann  <tom@honermann.net>\n\n        PR c++/88095\n        * g++.dg/cpp2a/udlit-class-nttp-ctad.C: New test.\n        * g++.dg/cpp2a/udlit-class-nttp-ctad-neg.C: New test.\n        * g++.dg/cpp2a/udlit-class-nttp-ctad-neg2.C: New test.\n        * g++.dg/cpp2a/udlit-class-nttp.C: New test.\n        * g++.dg/cpp2a/udlit-class-nttp-neg.C: New test.\n        * g++.dg/cpp2a/udlit-class-nttp-neg2.C: New test.\n\nFrom-SVN: r274123", "tree": {"sha": "b923f065cd07d81546aefe0f29f3f8090bae8fa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b923f065cd07d81546aefe0f29f3f8090bae8fa0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8744c37d540324b96e055e467b4967032b269c16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8744c37d540324b96e055e467b4967032b269c16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8744c37d540324b96e055e467b4967032b269c16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8744c37d540324b96e055e467b4967032b269c16/comments", "author": {"login": "tahonermann", "id": 2211804, "node_id": "MDQ6VXNlcjIyMTE4MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2211804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tahonermann", "html_url": "https://github.com/tahonermann", "followers_url": "https://api.github.com/users/tahonermann/followers", "following_url": "https://api.github.com/users/tahonermann/following{/other_user}", "gists_url": "https://api.github.com/users/tahonermann/gists{/gist_id}", "starred_url": "https://api.github.com/users/tahonermann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tahonermann/subscriptions", "organizations_url": "https://api.github.com/users/tahonermann/orgs", "repos_url": "https://api.github.com/users/tahonermann/repos", "events_url": "https://api.github.com/users/tahonermann/events{/privacy}", "received_events_url": "https://api.github.com/users/tahonermann/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "719f5a10e750ab216700d13074122ac410bf106f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/719f5a10e750ab216700d13074122ac410bf106f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/719f5a10e750ab216700d13074122ac410bf106f"}], "stats": {"total": 132, "additions": 130, "deletions": 2}, "files": [{"sha": "0c3bdffbcab2cb5218fa6f91d1882293969b1488", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8744c37d540324b96e055e467b4967032b269c16/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8744c37d540324b96e055e467b4967032b269c16/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8744c37d540324b96e055e467b4967032b269c16", "patch": "@@ -1,3 +1,9 @@\n+2019-08-05  Tom Honermann  <tom@honermann.net>\n+\n+\t* parser.c (cp_parser_template_declaration_after_parameters): Enable\n+\tclass template argument deduction for non-type template parameters\n+\tin literal operator templates.\n+\n 2019-08-05  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/91338 - Implement P1161R3: Deprecate a[b,c]."}, {"sha": "dd2fe79c95a4b339c864b268ba0dac7488f8db41", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8744c37d540324b96e055e467b4967032b269c16/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8744c37d540324b96e055e467b4967032b269c16/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=8744c37d540324b96e055e467b4967032b269c16", "patch": "@@ -28169,7 +28169,10 @@ cp_parser_template_declaration_after_parameters (cp_parser* parser,\n \t    {\n \t      tree parm_list = TREE_VEC_ELT (parameter_list, 0);\n \t      tree parm = INNERMOST_TEMPLATE_PARMS (parm_list);\n-\t      if (CLASS_TYPE_P (TREE_TYPE (parm)))\n+\t      if (TREE_CODE (parm) != PARM_DECL)\n+\t\tok = false;\n+\t      else if (MAYBE_CLASS_TYPE_P (TREE_TYPE (parm))\n+\t\t       && !TEMPLATE_PARM_PARAMETER_PACK (DECL_INITIAL (parm)))\n \t\t/* OK, C++20 string literal operator template.  We don't need\n \t\t   to warn in lower dialects here because we will have already\n \t\t   warned about the template parameter.  */;\n@@ -28183,7 +28186,7 @@ cp_parser_template_declaration_after_parameters (cp_parser* parser,\n \t      tree type = INNERMOST_TEMPLATE_PARMS (parm_type);\n \t      tree parm_list = TREE_VEC_ELT (parameter_list, 1);\n \t      tree parm = INNERMOST_TEMPLATE_PARMS (parm_list);\n-\t      if (parm == error_mark_node\n+\t      if (TREE_CODE (parm) != PARM_DECL\n \t\t  || TREE_TYPE (parm) != TREE_TYPE (type)\n \t\t  || !TEMPLATE_PARM_PARAMETER_PACK (DECL_INITIAL (parm)))\n \t\tok = false;"}, {"sha": "34a919901ffdfa829d18e224fc82680d6f78a56a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8744c37d540324b96e055e467b4967032b269c16/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8744c37d540324b96e055e467b4967032b269c16/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8744c37d540324b96e055e467b4967032b269c16", "patch": "@@ -1,3 +1,13 @@\n+2019-08-02  Tom Honermann  <tom@honermann.net>\n+\n+\tPR c++/88095\n+\t* g++.dg/cpp2a/udlit-class-nttp-ctad.C: New test.\n+\t* g++.dg/cpp2a/udlit-class-nttp-ctad-neg.C: New test.\n+\t* g++.dg/cpp2a/udlit-class-nttp-ctad-neg2.C: New test.\n+\t* g++.dg/cpp2a/udlit-class-nttp.C: New test.\n+\t* g++.dg/cpp2a/udlit-class-nttp-neg.C: New test.\n+\t* g++.dg/cpp2a/udlit-class-nttp-neg2.C: New test.\n+\n 2019-08-05  Steven g. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/91372"}, {"sha": "437fa9b5ab8965914aab0b10f70073dad82eb56f", "filename": "gcc/testsuite/g++.dg/cpp2a/udlit-class-nttp-ctad-neg.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8744c37d540324b96e055e467b4967032b269c16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fudlit-class-nttp-ctad-neg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8744c37d540324b96e055e467b4967032b269c16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fudlit-class-nttp-ctad-neg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fudlit-class-nttp-ctad-neg.C?ref=8744c37d540324b96e055e467b4967032b269c16", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/88095\n+// Test class non-type template parameters for literal operator templates.\n+// Validate handling of failed class template argument deduction.\n+// { dg-do compile { target c++2a } }\n+\n+namespace std {\n+using size_t = decltype(sizeof(int));\n+}\n+\n+template <typename CharT, std::size_t N>\n+struct fixed_string {\n+  constexpr static std::size_t length = N;\n+  constexpr fixed_string(...) { }\n+  // auto operator<=> (const fixed_string&) = default;\n+};\n+// Missing deduction guide.\n+\n+template <fixed_string fs>\n+constexpr std::size_t operator\"\" _udl() {\n+  return decltype(fs)::length;\n+}\n+\n+static_assert(\"test\"_udl == 5); // { dg-error \"15:no matching function for call to\" }\n+                                // { dg-error \"15:class template argument deduction failed\" \"\" { target *-*-* } .-1 }"}, {"sha": "89bb5d39d7dbfc6988b0e6388275ed700a47b656", "filename": "gcc/testsuite/g++.dg/cpp2a/udlit-class-nttp-ctad-neg2.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8744c37d540324b96e055e467b4967032b269c16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fudlit-class-nttp-ctad-neg2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8744c37d540324b96e055e467b4967032b269c16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fudlit-class-nttp-ctad-neg2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fudlit-class-nttp-ctad-neg2.C?ref=8744c37d540324b96e055e467b4967032b269c16", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/88095\n+// Test class non-type template parameters for literal operator templates.\n+// Validate rejection of class template parameter packs.\n+// { dg-do compile { target c++2a } }\n+\n+namespace std {\n+using size_t = decltype(sizeof(int));\n+}\n+\n+template <typename CharT, std::size_t N>\n+struct fixed_string {\n+  constexpr static std::size_t length = N;\n+  constexpr fixed_string(...) { }\n+  // auto operator<=> (const fixed_string&) = default;\n+};\n+template <typename CharT, std::size_t N>\n+fixed_string(const CharT (&str)[N]) -> fixed_string<CharT, N>;\n+\n+template <fixed_string...>\n+int operator\"\" _udl();     // { dg-error \"5:literal operator template .int operator\\\"\\\"_udl\\\\(\\\\). has invalid parameter list\" }"}, {"sha": "f6877a960c95b65c9c571602790145e4c53050d0", "filename": "gcc/testsuite/g++.dg/cpp2a/udlit-class-nttp-ctad.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8744c37d540324b96e055e467b4967032b269c16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fudlit-class-nttp-ctad.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8744c37d540324b96e055e467b4967032b269c16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fudlit-class-nttp-ctad.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fudlit-class-nttp-ctad.C?ref=8744c37d540324b96e055e467b4967032b269c16", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/88095\n+// Test class non-type template parameters for literal operator templates.\n+// Validate support for class template argument deduction.\n+// { dg-do compile { target c++2a } }\n+\n+namespace std {\n+using size_t = decltype(sizeof(int));\n+}\n+\n+template <typename CharT, std::size_t N>\n+struct fixed_string {\n+  constexpr static std::size_t length = N;\n+  constexpr fixed_string(...) { }\n+  // auto operator<=> (const fixed_string&) = default;\n+};\n+template <typename CharT, std::size_t N>\n+fixed_string(const CharT (&str)[N]) -> fixed_string<CharT, N>;\n+\n+template <fixed_string fs>\n+constexpr std::size_t operator\"\" _udl() {\n+  return decltype(fs)::length;\n+}\n+\n+static_assert(\"test\"_udl == 5);"}, {"sha": "8f7e3f295117d008111d5019f7d5b96257f6fb2a", "filename": "gcc/testsuite/g++.dg/cpp2a/udlit-class-nttp-neg.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8744c37d540324b96e055e467b4967032b269c16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fudlit-class-nttp-neg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8744c37d540324b96e055e467b4967032b269c16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fudlit-class-nttp-neg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fudlit-class-nttp-neg.C?ref=8744c37d540324b96e055e467b4967032b269c16", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/88095\n+// Test class non-type template parameters for literal operator templates.\n+// Validate that parameter packs are rejected.\n+// { dg-do compile { target c++2a } }\n+\n+struct literal_class {\n+  constexpr literal_class(...) { }\n+  // auto operator<=> (const fixed_string&) = default;\n+};\n+\n+template <literal_class...>\n+int operator\"\" _udl();      // { dg-error \"5:literal operator template .int operator\\\"\\\"_udl\\\\(\\\\). has invalid parameter list\" }"}, {"sha": "2c00c5c6b881dcd64fe61ba9cba111d301740e3e", "filename": "gcc/testsuite/g++.dg/cpp2a/udlit-class-nttp-neg2.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8744c37d540324b96e055e467b4967032b269c16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fudlit-class-nttp-neg2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8744c37d540324b96e055e467b4967032b269c16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fudlit-class-nttp-neg2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fudlit-class-nttp-neg2.C?ref=8744c37d540324b96e055e467b4967032b269c16", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/88095\n+// Test class non-type template parameters for literal operator templates.\n+// Validate that non-literal class types are rejected.\n+// { dg-do compile { target c++2a } }\n+\n+struct non_literal_class {\n+  constexpr non_literal_class(...) { }\n+  ~non_literal_class() {}\n+  // auto operator<=> (const non_literal_fixed_string&) = default;\n+};\n+\n+template <non_literal_class> // { dg-error \"11:is not a valid type for a template non-type parameter because it is not literal\" }\n+int operator\"\" _udl();       // { dg-error \"5:literal operator template .int operator\\\"\\\"_udl\\\\(\\\\). has invalid parameter list\" }"}, {"sha": "dcaca3e4070115dfa792facae0fc9ada0e6538b6", "filename": "gcc/testsuite/g++.dg/cpp2a/udlit-class-nttp.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8744c37d540324b96e055e467b4967032b269c16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fudlit-class-nttp.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8744c37d540324b96e055e467b4967032b269c16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fudlit-class-nttp.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fudlit-class-nttp.C?ref=8744c37d540324b96e055e467b4967032b269c16", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/88095\n+// Test class non-type template parameters for literal operator templates.\n+// Validate basic support.\n+// { dg-do compile { target c++2a } }\n+\n+struct literal_class {\n+  constexpr literal_class(...) { }\n+  // auto operator<=> (const fixed_string&) = default;\n+};\n+\n+template <literal_class>\n+constexpr int operator\"\" _udl() {\n+  return 1;\n+}\n+\n+static_assert(\"test\"_udl == 1);"}]}