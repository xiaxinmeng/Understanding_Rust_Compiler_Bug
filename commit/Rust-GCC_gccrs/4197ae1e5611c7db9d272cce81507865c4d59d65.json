{"sha": "4197ae1e5611c7db9d272cce81507865c4d59d65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE5N2FlMWU1NjExYzdkYjlkMjcyY2NlODE1MDc4NjVjNGQ1OWQ2NQ==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2006-02-17T16:08:28Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-02-17T16:08:28Z"}, "message": "sem_res.adb (Resolve_Type_Conversion): In case of conversion to an abstract interface type...\n\n2006-02-17  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_res.adb (Resolve_Type_Conversion): In case of conversion to an\n\tabstract interface type, the static analysis is not enough to know if\n\tthe interface is implemented or not by the source tagged type. Hence\n\twe must pass the work to the expander to generate the required code to\n\tevaluate the conversion at run-time.\n\t(Resolve_Equality_Op): Do not apply previous\n\ttransformation if expansion is disasbled, to prevent anomalies when\n\tlocating global references in a generic unit.\n\nFrom-SVN: r111195", "tree": {"sha": "79854d884bf8111343b5d92c9c4f2272801a0cb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79854d884bf8111343b5d92c9c4f2272801a0cb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4197ae1e5611c7db9d272cce81507865c4d59d65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4197ae1e5611c7db9d272cce81507865c4d59d65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4197ae1e5611c7db9d272cce81507865c4d59d65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4197ae1e5611c7db9d272cce81507865c4d59d65/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "08402a6d65a25da348c28c0a539dd0923ff976d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08402a6d65a25da348c28c0a539dd0923ff976d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08402a6d65a25da348c28c0a539dd0923ff976d6"}], "stats": {"total": 61, "additions": 24, "deletions": 37}, "files": [{"sha": "1a9ab72b66a54f114758d2245561b0253d78a7c8", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 24, "deletions": 37, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4197ae1e5611c7db9d272cce81507865c4d59d65/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4197ae1e5611c7db9d272cce81507865c4d59d65/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=4197ae1e5611c7db9d272cce81507865c4d59d65", "patch": "@@ -4962,8 +4962,9 @@ package body Sem_Res is\n          --  We apply the same conversion in the case one of the operands is\n          --  a private subtype of the type of the other.\n \n-         if Ekind (T) =  E_Anonymous_Access_Type\n-           or else Is_Private_Type (T)\n+         if Expander_Active\n+           and then (Ekind (T) =  E_Anonymous_Access_Type\n+                       or else Is_Private_Type (T))\n          then\n             if Etype (L) /= T then\n                Rewrite (L,\n@@ -6747,45 +6748,31 @@ package body Sem_Res is\n                Opnd_Type := Directly_Designated_Type (Opnd_Type);\n             end if;\n \n-            declare\n-               Save_Typ : constant Entity_Id := Opnd_Type;\n-\n-            begin\n-               if Is_Class_Wide_Type (Opnd_Type) then\n-                  Opnd_Type := Etype (Opnd_Type);\n-               end if;\n-\n-               --  Handle subtypes\n+            if Is_Class_Wide_Type (Opnd_Type) then\n+               Opnd_Type := Etype (Opnd_Type);\n+            end if;\n \n-               if Ekind (Opnd_Type) = E_Protected_Subtype\n-                 or else Ekind (Opnd_Type) = E_Task_Subtype\n-               then\n-                  Opnd_Type := Etype (Opnd_Type);\n-               end if;\n+            --  Handle subtypes\n \n-               if not Interface_Present_In_Ancestor\n-                        (Typ   => Opnd_Type,\n-                         Iface => Target_Type)\n-               then\n-                  --  The static analysis is not enough to know if the\n-                  --  interface is implemented or not. Hence we must pass the\n-                  --  work to the expander to generate the required code to\n-                  --  evaluate the conversion at run-time.\n+            if Ekind (Opnd_Type) = E_Protected_Subtype\n+              or else Ekind (Opnd_Type) = E_Task_Subtype\n+            then\n+               Opnd_Type := Etype (Opnd_Type);\n+            end if;\n \n-                  if Is_Class_Wide_Type (Save_Typ)\n-                    and then Is_Interface (Save_Typ)\n-                  then\n-                     Expand_Interface_Conversion (N, Is_Static => False);\n-                  else\n-                     Error_Msg_NE\n-                       (\"(Ada 2005) does not implement interface }\",\n-                        Operand, Target_Type);\n-                  end if;\n+            if not Interface_Present_In_Ancestor\n+                     (Typ   => Opnd_Type,\n+                      Iface => Target_Type)\n+            then\n+               --  The static analysis is not enough to know if the interface\n+               --  is implemented or not. Hence we must pass the work to the\n+               --  expander to generate the required code to evaluate the\n+               --  conversion at run-time.\n \n-               else\n-                  Expand_Interface_Conversion (N);\n-               end if;\n-            end;\n+               Expand_Interface_Conversion (N, Is_Static => False);\n+            else\n+               Expand_Interface_Conversion (N);\n+            end if;\n          end if;\n       end if;\n    end Resolve_Type_Conversion;"}]}