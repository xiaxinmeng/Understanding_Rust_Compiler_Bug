{"sha": "9b389a5e64f957b30eb05315b7e15a649a8e1f66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWIzODlhNWU2NGY5NTdiMzBlYjA1MzE1YjdlMTVhNjQ5YThlMWY2Ng==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-09-18T23:13:17Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-09-18T23:13:17Z"}, "message": "re PR tree-optimization/45453 (ICE: verify_cgraph_node failed: inlined_to pointer set for noninline callers with -O2 -fno-early-inlining)\n\n\n\tPR tree-optimization/45453\n\t* cgraphunit.c (cgraph_finalize_function): Consider comdat & external\n\tvirtual functions are reachable.\n\t* ipa-inline.c (cgraph_clone_inlined_nodes): Likewise.\n\t* ipa.c (cgraph_remove_unreachable_nodes): Likewise.\n\t* ipa-prop.c (ipa_modify_formal_parameters): Clear DECL_VIRTUAL_P\n\twhen modifying function.\n\n\t* g++.dg/tree-ssa/pr45453.C: New testcase.\n\nFrom-SVN: r164405", "tree": {"sha": "863c05e9f2399d3ae354b494076e8a668b4ee323", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/863c05e9f2399d3ae354b494076e8a668b4ee323"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b389a5e64f957b30eb05315b7e15a649a8e1f66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b389a5e64f957b30eb05315b7e15a649a8e1f66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b389a5e64f957b30eb05315b7e15a649a8e1f66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b389a5e64f957b30eb05315b7e15a649a8e1f66/comments", "author": null, "committer": null, "parents": [{"sha": "1151446c17ede83ed30b2bfc68137e7573ed0d99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1151446c17ede83ed30b2bfc68137e7573ed0d99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1151446c17ede83ed30b2bfc68137e7573ed0d99"}], "stats": {"total": 56, "additions": 54, "deletions": 2}, "files": [{"sha": "125840938a9c89d335bd5b0fe7dd59c20e1326a4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b389a5e64f957b30eb05315b7e15a649a8e1f66/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b389a5e64f957b30eb05315b7e15a649a8e1f66/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9b389a5e64f957b30eb05315b7e15a649a8e1f66", "patch": "@@ -1,3 +1,13 @@\n+2010-09-18  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR tree-optimization/45453\n+\t* cgraphunit.c (cgraph_finalize_function): Consider comdat & external\n+\tvirtual functions are reachable.\n+\t* ipa-inline.c (cgraph_clone_inlined_nodes): Likewise.\n+\t* ipa.c (cgraph_remove_unreachable_nodes): Likewise.\n+\t* ipa-prop.c (ipa_modify_formal_parameters): Clear DECL_VIRTUAL_P\n+\twhen modifying function.\n+\n 2010-09-18  Jan Hubicka  <jh@suse.cz>\n \n \tPR tree-optimization/45605"}, {"sha": "e390ec61706143a7bb48ef12e9817f0991f101a1", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b389a5e64f957b30eb05315b7e15a649a8e1f66/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b389a5e64f957b30eb05315b7e15a649a8e1f66/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=9b389a5e64f957b30eb05315b7e15a649a8e1f66", "patch": "@@ -363,7 +363,13 @@ cgraph_finalize_function (tree decl, bool nested)\n      there.  */\n   if ((TREE_PUBLIC (decl) && !DECL_COMDAT (decl) && !DECL_EXTERNAL (decl))\n       || DECL_STATIC_CONSTRUCTOR (decl)\n-      || DECL_STATIC_DESTRUCTOR (decl))\n+      || DECL_STATIC_DESTRUCTOR (decl)\n+      /* COMDAT virtual functions may be referenced by vtable from\n+\t other compilatoin unit.  Still we want to devirtualize calls\n+\t to those so we need to analyze them.\n+\t FIXME: We should introduce may edges for this purpose and update\n+\t their handling in unreachable function removal and inliner too.  */\n+      || (DECL_VIRTUAL_P (decl) && (DECL_COMDAT (decl) || DECL_EXTERNAL (decl))))\n     cgraph_mark_reachable_node (node);\n \n   /* If we've not yet emitted decl, tell the debug info about it.  */"}, {"sha": "21e0b647973e9d1f8d23f7439c9990b5dca5f09f", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b389a5e64f957b30eb05315b7e15a649a8e1f66/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b389a5e64f957b30eb05315b7e15a649a8e1f66/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=9b389a5e64f957b30eb05315b7e15a649a8e1f66", "patch": "@@ -251,6 +251,12 @@ cgraph_clone_inlined_nodes (struct cgraph_edge *e, bool duplicate,\n \t In that case just go ahead and re-use it.  */\n       if (!e->callee->callers->next_caller\n \t  && cgraph_can_remove_if_no_direct_calls_p (e->callee)\n+\t  /* Inlining might enable more devirtualizing, so we want to remove\n+\t     those only after all devirtualizable virtual calls are processed.\n+\t     Lacking may edges in callgraph we just preserve them post\n+\t     inlining.  */\n+\t  && (!DECL_VIRTUAL_P (e->callee->decl)\n+\t      || (!DECL_COMDAT (e->callee->decl) && !DECL_EXTERNAL (e->callee->decl)))\n \t  /* Don't reuse if more than one function shares a comdat group.\n \t     If the other function(s) are needed, we need to emit even\n \t     this function out of line.  */"}, {"sha": "e1d821e39883727d613ea10ba42b60b7187e5bd2", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b389a5e64f957b30eb05315b7e15a649a8e1f66/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b389a5e64f957b30eb05315b7e15a649a8e1f66/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=9b389a5e64f957b30eb05315b7e15a649a8e1f66", "patch": "@@ -2120,6 +2120,7 @@ ipa_modify_formal_parameters (tree fndecl, ipa_parm_adjustment_vec adjustments,\n     }\n \n   TREE_TYPE (fndecl) = new_type;\n+  DECL_VIRTUAL_P (fndecl) = 0;\n   if (otypes)\n     VEC_free (tree, heap, otypes);\n   VEC_free (tree, heap, oparms);"}, {"sha": "e4835c1e03f42a1208e9a938037c5d999f8b6ddf", "filename": "gcc/ipa.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b389a5e64f957b30eb05315b7e15a649a8e1f66/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b389a5e64f957b30eb05315b7e15a649a8e1f66/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=9b389a5e64f957b30eb05315b7e15a649a8e1f66", "patch": "@@ -238,7 +238,12 @@ cgraph_remove_unreachable_nodes (bool before_inlining_p, FILE *file)\n #endif\n   varpool_reset_queue ();\n   for (node = cgraph_nodes; node; node = node->next)\n-    if (!cgraph_can_remove_if_no_direct_calls_and_refs_p (node)\n+    if ((!cgraph_can_remove_if_no_direct_calls_and_refs_p (node)\n+\t /* Keep around virtual functions for possible devirtualization.  */\n+\t || (!before_inlining_p\n+\t     && !node->global.inlined_to\n+\t     && DECL_VIRTUAL_P (node->decl)\n+\t     && (DECL_COMDAT (node->decl) || DECL_EXTERNAL (node->decl))))\n \t&& ((!DECL_EXTERNAL (node->decl))\n             || before_inlining_p))\n       {"}, {"sha": "805e4b89357c8081a1fc91e04967045d30714f0c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b389a5e64f957b30eb05315b7e15a649a8e1f66/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b389a5e64f957b30eb05315b7e15a649a8e1f66/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9b389a5e64f957b30eb05315b7e15a649a8e1f66", "patch": "@@ -1,3 +1,8 @@\n+2010-09-18  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR tree-optimization/45453\n+\t* g++.dg/tree-ssa/pr45453.C: New testcase.\n+\n 2010-09-18  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/cpp0x/initlist44.C: New."}, {"sha": "78c6460f7273b4d292a3fa771ec30f55f678ac28", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr45453.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b389a5e64f957b30eb05315b7e15a649a8e1f66/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr45453.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b389a5e64f957b30eb05315b7e15a649a8e1f66/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr45453.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr45453.C?ref=9b389a5e64f957b30eb05315b7e15a649a8e1f66", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+struct S\n+{\n+  S();\n+  virtual inline void foo ()\n+  {\n+    foo();\n+  }\n+};\n+\n+void\n+B ()\n+{\n+  S().foo ();\n+}\n+/* We should inline foo and devirtualize call to foo in the inlined version.  */\n+// { dg-final { scan-tree-dump-times \"OBJ_TYPE_REF\" 1 \"optimized\" } }\n+// { dg-final { cleanup-tree-dump \"optimized\" } }"}]}