{"sha": "27fa4044f10f2a28e3e33b8b126462276f8fdc4f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdmYTQwNDRmMTBmMmEyOGUzZTMzYjhiMTI2NDYyMjc2ZjhmZGM0Zg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-11-23T14:28:59Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-11-23T14:28:59Z"}, "message": "re PR tree-optimization/34176 (SCCVN breaks gettext)\n\n2007-11-23  Richard Guenther  <rguenther@suse.de>\n\tMichael Matz  <matz@suse.de>\n\n\tPR tree-optimization/34176\n\t* alloc-pool.h (empty_alloc_pool): Declare.\n\t* alloc-pool.c (empty_alloc_pool): New function.\n\t* tree-ssa-sccvn.c (vn_reference_lookup): Also lookup from the\n\tvalid table if a lookup from the optimistic table failed.\n\t(vn_unary_op_lookup): Likewise.\n\t(vn_binary_op_lookup): Likewise.\n\t(vn_phi_lookup): Likewise.\n\t(process_scc): Clear optimistic tables before every iteration.\n\n\t* gcc.c-torture/execute/pr34176.c: New testcase.\n\nCo-Authored-By: Michael Matz <matz@suse.de>\n\nFrom-SVN: r130379", "tree": {"sha": "48a10a4d1d5afd593e94941b3bf4da1a06912d68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48a10a4d1d5afd593e94941b3bf4da1a06912d68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27fa4044f10f2a28e3e33b8b126462276f8fdc4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27fa4044f10f2a28e3e33b8b126462276f8fdc4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27fa4044f10f2a28e3e33b8b126462276f8fdc4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27fa4044f10f2a28e3e33b8b126462276f8fdc4f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bdcfbbfccba6c7f843908b7b5d1bef1acd23ccbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdcfbbfccba6c7f843908b7b5d1bef1acd23ccbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdcfbbfccba6c7f843908b7b5d1bef1acd23ccbc"}], "stats": {"total": 126, "additions": 125, "deletions": 1}, "files": [{"sha": "687c8b63dec27eabc3e44e76c3ad380ef226738e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27fa4044f10f2a28e3e33b8b126462276f8fdc4f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27fa4044f10f2a28e3e33b8b126462276f8fdc4f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=27fa4044f10f2a28e3e33b8b126462276f8fdc4f", "patch": "@@ -1,3 +1,16 @@\n+2007-11-23  Richard Guenther  <rguenther@suse.de>\n+\tMichael Matz  <matz@suse.de>\n+\n+\tPR tree-optimization/34176\n+\t* alloc-pool.h (empty_alloc_pool): Declare.\n+\t* alloc-pool.c (empty_alloc_pool): New function.\n+\t* tree-ssa-sccvn.c (vn_reference_lookup): Also lookup from the\n+\tvalid table if a lookup from the optimistic table failed.\n+\t(vn_unary_op_lookup): Likewise.\n+\t(vn_binary_op_lookup): Likewise.\n+\t(vn_phi_lookup): Likewise.\n+\t(process_scc): Clear optimistic tables before every iteration.\n+\n 2007-11-23  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-copy.c (may_propagate_copy): Remove redundant"}, {"sha": "d5d1fab79afc38a57f7bf7bbbf36452283d18a33", "filename": "gcc/alloc-pool.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27fa4044f10f2a28e3e33b8b126462276f8fdc4f/gcc%2Falloc-pool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27fa4044f10f2a28e3e33b8b126462276f8fdc4f/gcc%2Falloc-pool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falloc-pool.c?ref=27fa4044f10f2a28e3e33b8b126462276f8fdc4f", "patch": "@@ -183,7 +183,7 @@ create_alloc_pool (const char *name, size_t size, size_t num)\n \n /* Free all memory allocated for the given memory pool.  */\n void\n-free_alloc_pool (alloc_pool pool)\n+empty_alloc_pool (alloc_pool pool)\n {\n   alloc_pool_list block, next_block;\n #ifdef GATHER_STATISTICS\n@@ -201,6 +201,22 @@ free_alloc_pool (alloc_pool pool)\n       desc->current -= pool->block_size;\n #endif\n     }\n+\n+  pool->returned_free_list = NULL;\n+  pool->virgin_free_list = NULL;\n+  pool->virgin_elts_remaining = 0;\n+  pool->elts_allocated = 0;\n+  pool->elts_free = 0;\n+  pool->blocks_allocated = 0;\n+  pool->block_list = NULL;\n+}\n+\n+/* Free all memory allocated for the given memory pool and the pool itself.  */\n+void\n+free_alloc_pool (alloc_pool pool)\n+{\n+  /* First empty the pool.  */\n+  empty_alloc_pool (pool);\n #ifdef ENABLE_CHECKING\n   memset (pool, 0xaf, sizeof (*pool));\n #endif"}, {"sha": "1fc3c575093778844e992e414500ffb25d7040eb", "filename": "gcc/alloc-pool.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27fa4044f10f2a28e3e33b8b126462276f8fdc4f/gcc%2Falloc-pool.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27fa4044f10f2a28e3e33b8b126462276f8fdc4f/gcc%2Falloc-pool.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falloc-pool.h?ref=27fa4044f10f2a28e3e33b8b126462276f8fdc4f", "patch": "@@ -59,6 +59,7 @@ typedef struct alloc_pool_def\n \n extern alloc_pool create_alloc_pool (const char *, size_t, size_t);\n extern void free_alloc_pool (alloc_pool);\n+extern void empty_alloc_pool (alloc_pool);\n extern void free_alloc_pool_if_empty (alloc_pool *);\n extern void *pool_alloc (alloc_pool);\n extern void pool_free (alloc_pool, void *);"}, {"sha": "9f893c3909640bfbd200c1db995b8f643759fecd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27fa4044f10f2a28e3e33b8b126462276f8fdc4f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27fa4044f10f2a28e3e33b8b126462276f8fdc4f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=27fa4044f10f2a28e3e33b8b126462276f8fdc4f", "patch": "@@ -1,3 +1,9 @@\n+2007-11-23  Richard Guenther  <rguenther@suse.de>\n+\tMichael Matz  <matz@suse.de>\n+\n+\tPR tree-optimization/34176\n+\t* gcc.c-torture/execute/pr34176.c: New testcase.\n+\n 2007-11-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/34198"}, {"sha": "3bbdb22c74cdc9cbc5acdb1f1c98741e11286c08", "filename": "gcc/testsuite/gcc.c-torture/execute/pr34176.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27fa4044f10f2a28e3e33b8b126462276f8fdc4f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr34176.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27fa4044f10f2a28e3e33b8b126462276f8fdc4f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr34176.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr34176.c?ref=27fa4044f10f2a28e3e33b8b126462276f8fdc4f", "patch": "@@ -0,0 +1,68 @@\n+\n+typedef __SIZE_TYPE__ size_t;\n+typedef unsigned int index_ty;\n+typedef index_ty *index_list_ty;\n+\n+struct mult_index\n+{\n+  index_ty index;\n+  unsigned int count;\n+};\n+\n+struct mult_index_list\n+{\n+  struct mult_index *item;\n+  size_t nitems;\n+  size_t nitems_max;\n+\n+  struct mult_index *item2;\n+  size_t nitems2_max;\n+};\n+\n+int __attribute__((noinline))\n+hash_find_entry (size_t *result)\n+{\n+    *result = 2;\n+    return 0;\n+}\n+\n+extern void abort (void);\n+struct mult_index * __attribute__((noinline))\n+foo (size_t n)\n+{\n+  static count = 0;\n+  if (count++ > 0)\n+    abort ();\n+  return 0;\n+}\n+\n+int\n+main (void)\n+{\n+    size_t nitems = 0;\n+\n+    for (;;)\n+    {\n+        size_t list;\n+\n+        hash_find_entry (&list);\n+        {\n+            size_t len2 = list;\n+            struct mult_index *destptr;\n+            struct mult_index *dest;\n+            size_t new_max  = nitems + len2;\n+\n+            if (new_max != len2)\n+                break;\n+            dest = foo (new_max);\n+\n+            destptr = dest;\n+            while (len2--)\n+                destptr++;\n+\n+            nitems = destptr - dest;\n+        }\n+    }\n+\n+    return 0;\n+}"}, {"sha": "8edd03b9ad7caa3e53dea47d54ccfa657c21a0e1", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27fa4044f10f2a28e3e33b8b126462276f8fdc4f/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27fa4044f10f2a28e3e33b8b126462276f8fdc4f/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=27fa4044f10f2a28e3e33b8b126462276f8fdc4f", "patch": "@@ -655,6 +655,9 @@ vn_reference_lookup (tree op, VEC (tree, gc) *vuses)\n   vr1.hashcode = vn_reference_compute_hash (&vr1);\n   slot = htab_find_slot_with_hash (current_info->references, &vr1, vr1.hashcode,\n \t\t\t\t   NO_INSERT);\n+  if (!slot && current_info == optimistic_info)\n+    slot = htab_find_slot_with_hash (valid_info->references, &vr1, vr1.hashcode,\n+\t\t\t\t     NO_INSERT);\n   if (!slot)\n     return NULL_TREE;\n \n@@ -742,6 +745,9 @@ vn_unary_op_lookup (tree op)\n   vuo1.hashcode = vn_unary_op_compute_hash (&vuo1);\n   slot = htab_find_slot_with_hash (current_info->unary, &vuo1, vuo1.hashcode,\n \t\t\t\t   NO_INSERT);\n+  if (!slot && current_info == optimistic_info)\n+    slot = htab_find_slot_with_hash (valid_info->unary, &vuo1, vuo1.hashcode,\n+\t\t\t\t     NO_INSERT);\n   if (!slot)\n     return NULL_TREE;\n   return ((vn_unary_op_t)*slot)->result;\n@@ -834,6 +840,9 @@ vn_binary_op_lookup (tree op)\n   vbo1.hashcode = vn_binary_op_compute_hash (&vbo1);\n   slot = htab_find_slot_with_hash (current_info->binary, &vbo1, vbo1.hashcode,\n \t\t\t\t   NO_INSERT);\n+  if (!slot && current_info == optimistic_info)\n+    slot = htab_find_slot_with_hash (valid_info->binary, &vbo1, vbo1.hashcode,\n+\t\t\t\t     NO_INSERT);\n   if (!slot)\n     return NULL_TREE;\n   return ((vn_binary_op_t)*slot)->result;\n@@ -960,6 +969,9 @@ vn_phi_lookup (tree phi)\n   vp1.hashcode = vn_phi_compute_hash (&vp1);\n   slot = htab_find_slot_with_hash (current_info->phis, &vp1, vp1.hashcode,\n \t\t\t\t   NO_INSERT);\n+  if (!slot && current_info == optimistic_info)\n+    slot = htab_find_slot_with_hash (valid_info->phis, &vp1, vp1.hashcode,\n+\t\t\t\t     NO_INSERT);\n   if (!slot)\n     return NULL_TREE;\n   return ((vn_phi_t)*slot)->result;\n@@ -1799,6 +1811,14 @@ process_scc (VEC (tree, heap) *scc)\n \t{\n \t  changed = false;\n \t  iterations++;\n+\t  htab_empty (optimistic_info->unary);\n+\t  htab_empty (optimistic_info->binary);\n+\t  htab_empty (optimistic_info->phis);\n+\t  htab_empty (optimistic_info->references);\n+\t  empty_alloc_pool (optimistic_info->unary_op_pool);\n+\t  empty_alloc_pool (optimistic_info->binary_op_pool);\n+\t  empty_alloc_pool (optimistic_info->phis_pool);\n+\t  empty_alloc_pool (optimistic_info->references_pool);\n \t  for (i = 0; VEC_iterate (tree, scc, i, var); i++)\n \t    changed |= visit_use (var);\n \t}"}]}