{"sha": "f45ccc7c0dd88d2526422ae6fe4cafa368adb931", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ1Y2NjN2MwZGQ4OGQyNTI2NDIyYWU2ZmU0Y2FmYTM2OGFkYjkzMQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-02-17T14:26:20Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-02-17T14:26:20Z"}, "message": "[multiple changes]\n\n2012-02-17  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch6.adb (Legal_Copy): If layout is not\n\tdetermined in the front-end, do not emit error message when\n\tby-reference actual is potentially unaligned.\n\t* gcc-interface/decl.c (gnat_to_gnu_field): Better error message for\n\tillegal representation clause on tagged or aliased component, or on\n\tby-reference type with forced alignment.\n\n2012-02-17  Nicolas Roche  <roche@adacore.com>\n\n\t* gcc-interface/Makefile.in: Ensure FORCE_DEBUG_ADAFLAGS variables is\n\tpropagated by gnatlib-sjlj and gnatlib-zcx targets.\n\t* gcc-interface/Make-lang.in: Update dependencies.\n\n2012-02-17  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_ch12.adb (Analyze_Package_Instantiation): For an\n\tinstantiation in an RCI library unit, omit the instance body\n\tif the RCI library unit is the instance itself (E.2.3(18)),\n\tbut include the body if the instantiation is within the RCI\n\tdeclaration (12.3(12)).\n\nFrom-SVN: r184343", "tree": {"sha": "9f4f2af6e3113b2ef899126881507ca2e11f8c19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f4f2af6e3113b2ef899126881507ca2e11f8c19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f45ccc7c0dd88d2526422ae6fe4cafa368adb931", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f45ccc7c0dd88d2526422ae6fe4cafa368adb931", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f45ccc7c0dd88d2526422ae6fe4cafa368adb931", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f45ccc7c0dd88d2526422ae6fe4cafa368adb931/comments", "author": null, "committer": null, "parents": [{"sha": "acf49e88aaf315ea29c1b96950a91bffd7e7ea3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acf49e88aaf315ea29c1b96950a91bffd7e7ea3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acf49e88aaf315ea29c1b96950a91bffd7e7ea3d"}], "stats": {"total": 1831, "additions": 950, "deletions": 881}, "files": [{"sha": "be95913fe49777ca9f5e41dee7bd2802eac0c848", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f45ccc7c0dd88d2526422ae6fe4cafa368adb931/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f45ccc7c0dd88d2526422ae6fe4cafa368adb931/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f45ccc7c0dd88d2526422ae6fe4cafa368adb931", "patch": "@@ -1,3 +1,26 @@\n+2012-02-17  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch6.adb (Legal_Copy): If layout is not\n+\tdetermined in the front-end, do not emit error message when\n+\tby-reference actual is potentially unaligned.\n+\t* gcc-interface/decl.c (gnat_to_gnu_field): Better error message for\n+\tillegal representation clause on tagged or aliased component, or on\n+\tby-reference type with forced alignment.\n+\n+2012-02-17  Nicolas Roche  <roche@adacore.com>\n+\n+\t* gcc-interface/Makefile.in: Ensure FORCE_DEBUG_ADAFLAGS variables is\n+\tpropagated by gnatlib-sjlj and gnatlib-zcx targets.\n+\t* gcc-interface/Make-lang.in: Update dependencies.\n+\n+2012-02-17  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_ch12.adb (Analyze_Package_Instantiation): For an\n+\tinstantiation in an RCI library unit, omit the instance body\n+\tif the RCI library unit is the instance itself (E.2.3(18)),\n+\tbut include the body if the instantiation is within the RCI\n+\tdeclaration (12.3(12)).\n+\n 2012-02-17  Steve Baird  <baird@adacore.com>\n \n \t* sem_prag.adb (Analyze_PPC_In_Decl_Part): Pre'Class and"}, {"sha": "b4d46b4c1aa6fc7e24199cf6496f7d52828e510d", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f45ccc7c0dd88d2526422ae6fe4cafa368adb931/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f45ccc7c0dd88d2526422ae6fe4cafa368adb931/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=f45ccc7c0dd88d2526422ae6fe4cafa368adb931", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1417,8 +1417,18 @@ package body Exp_Ch6 is\n          --  representation clauses give the actual a misaligned address.\n \n          if Is_By_Reference_Type (Etype (Formal)) then\n-            Error_Msg_N\n-              (\"misaligned actual cannot be passed by reference\", Actual);\n+\n+         --  If the front-end does not perform full type layout, the actual\n+         --  may in fact be properly aligned but there is not enough front-end\n+         --  information to determine this. In that case gigi will emit an\n+         --  error if a copy is not legal, or generate the proper code.\n+         --  For other backends we report the error now.\n+\n+            if Frontend_Layout_On_Target then\n+               Error_Msg_N\n+                 (\"misaligned actual cannot be passed by reference\", Actual);\n+            end if;\n+\n             return False;\n \n          --  For users of Starlet, we assume that the specification of by-\n@@ -6120,6 +6130,7 @@ package body Exp_Ch6 is\n \n          begin\n             Set_Has_Completion (Subp, False);\n+            --  Set_Has_Delayed_Freeze (Subp);\n             Append_Freeze_Action (Subp, Bod);\n \n             --  The body now contains raise statements, so calls to it will"}, {"sha": "46ee5434429542f83275493ff0c1620495025291", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 874, "deletions": 860, "changes": 1734, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f45ccc7c0dd88d2526422ae6fe4cafa368adb931/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f45ccc7c0dd88d2526422ae6fe4cafa368adb931/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=f45ccc7c0dd88d2526422ae6fe4cafa368adb931"}, {"sha": "d81c66312a0e7d9cc1bc5a90c304d3e247124f14", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f45ccc7c0dd88d2526422ae6fe4cafa368adb931/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f45ccc7c0dd88d2526422ae6fe4cafa368adb931/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=f45ccc7c0dd88d2526422ae6fe4cafa368adb931", "patch": "@@ -2773,6 +2773,7 @@ gnatlib-sjlj:\n \t     GNATLIBFLAGS=\"$(GNATLIBFLAGS)\" \\\n \t     GNATLIBCFLAGS=\"$(GNATLIBCFLAGS)\" \\\n \t     GNATLIBCFLAGS_FOR_C=\"$(GNATLIBCFLAGS_FOR_C)\" \\\n+\t     FORCE_DEBUG_ADAFLAGS=\"$(FORCE_DEBUG_ADAFLAGS)\" \\\n \t     MULTISUBDIR=\"$(MULTISUBDIR)\" \\\n \t     THREAD_KIND=\"$(THREAD_KIND)\" \\\n \t     PICFLAG_FOR_TARGET=\"$(PICFLAG_FOR_TARGET)\" gnatlib\n@@ -2787,6 +2788,7 @@ gnatlib-zcx:\n \t     GNATLIBFLAGS=\"$(GNATLIBFLAGS)\" \\\n \t     GNATLIBCFLAGS=\"$(GNATLIBCFLAGS)\" \\\n \t     GNATLIBCFLAGS_FOR_C=\"$(GNATLIBCFLAGS_FOR_C)\" \\\n+\t     FORCE_DEBUG_ADAFLAGS=\"$(FORCE_DEBUG_ADAFLAGS)\" \\\n \t     MULTISUBDIR=\"$(MULTISUBDIR)\" \\\n \t     THREAD_KIND=\"$(THREAD_KIND)\" \\\n \t     PICFLAG_FOR_TARGET=\"$(PICFLAG_FOR_TARGET)\" gnatlib"}, {"sha": "c3c4f994fe670e45dd8a4cebb65dda7dc8452f49", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f45ccc7c0dd88d2526422ae6fe4cafa368adb931/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f45ccc7c0dd88d2526422ae6fe4cafa368adb931/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=f45ccc7c0dd88d2526422ae6fe4cafa368adb931", "patch": "@@ -7032,10 +7032,10 @@ gnat_to_gnu_field (Entity_Id gnat_field, tree gnu_record_type, int packed,\n \t\t   TYPE_ALIGN (gnu_field_type));\n \n \t      else if (Strict_Alignment (gnat_field_type))\n-\t\tpost_error_ne_num\n-  (\"position of & with aliased or tagged components not multiple of ^ bits\",\n-\t\t   First_Bit (Component_Clause (gnat_field)), gnat_field,\n-\t\t   TYPE_ALIGN (gnu_field_type));\n+\t\tpost_error_ne\n+\t\t  (\"position of & is not compatible with alignment required \"\n+\t\t   \"by its components\",\n+\t\t    First_Bit (Component_Clause (gnat_field)), gnat_field);\n \n \t      else\n \t\tgcc_unreachable ();\n@@ -7132,8 +7132,8 @@ gnat_to_gnu_field (Entity_Id gnat_field, tree gnu_record_type, int packed,\n   return gnu_field;\n }\n \f\n-/* Return true if TYPE is a type with variable size, a padding type with a\n-   field of variable size or is a record that has a field such a field.  */\n+/* Return true if TYPE is a type with variable size or a padding type with a\n+   field of variable size or a record that has a field with such a type.  */\n \n static bool\n type_has_variable_size (tree type)"}, {"sha": "9d823164145e4e451dea38b7b42b8b277d626c35", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 31, "deletions": 12, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f45ccc7c0dd88d2526422ae6fe4cafa368adb931/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f45ccc7c0dd88d2526422ae6fe4cafa368adb931/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=f45ccc7c0dd88d2526422ae6fe4cafa368adb931", "patch": "@@ -3704,18 +3704,37 @@ package body Sem_Ch12 is\n             end if;\n          end;\n \n-         --  Note that we generate the instance body even when generating\n-         --  calling stubs for an RCI unit: it may be required e.g. if it\n-         --  provides stream attributes for some type used in the profile of a\n-         --  remote subprogram. If the instantiation is within the visible part\n-         --  of the RCI, then calling stubs for any relevant subprogram will\n-         --  be inserted immediately after the subprogram declaration, and\n-         --  will take precedence over the subsequent (original) body. (The\n-         --  stub and original body will be complete homographs, but this is\n-         --  permitted in an instance).\n-\n-         --  Could we do better and remove the original subprogram body in that\n-         --  case???\n+         --  For RCI unit calling stubs, we omit the instance body if the\n+         --  instance is the RCI library unit itself.\n+\n+         --  However there is a special case for nested instances: in this case\n+         --  we do generate the instance body, as it might be required, e.g.\n+         --  because it provides stream attributes for some type used in the\n+         --  profile of a remote subprogram. This is consistent with 12.3(12),\n+         --  which indicates that the instance body occurs at the place of the\n+         --  instantiation, and thus is part of the RCI declaration, which is\n+         --  present on all client partitions (this is E.2.3(18)).\n+\n+         --  Note that AI12-0002 may make it illegal at some point to have\n+         --  stream attributes defined in an RCI unit, in which case this\n+         --  special case will become unnecessary. In the meantime, there\n+         --  is known application code in production that depends on this\n+         --  being possible, so we definitely cannot eliminate the body in\n+         --  the case of nested instances for the time being.\n+\n+         --  When we generate a nested instance body, calling stubs for any\n+         --  relevant subprogram will be be inserted immediately after the\n+         --  subprogram declarations, and will take precedence over the\n+         --  subsequent (original) body. (The stub and original body will be\n+         --  complete homographs, but this is permitted in an instance).\n+         --  (Could we do better and remove the original body???)\n+\n+         if Distribution_Stub_Mode = Generate_Caller_Stub_Body\n+              and then Comes_From_Source (N)\n+              and then Nkind (Parent (N)) = N_Compilation_Unit\n+         then\n+            Needs_Body := False;\n+         end if;\n \n          if Needs_Body then\n "}]}