{"sha": "db36994b97e9bf3677575904a5fabb62b2bc81e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGIzNjk5NGI5N2U5YmYzNjc3NTc1OTA0YTVmYWJiNjJiMmJjODFlOA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2002-10-14T07:15:39Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2002-10-14T07:15:39Z"}, "message": "tm.texi (DRIVER_SELF_SPECS): Document.\n\n\t* doc/tm.texi (DRIVER_SELF_SPECS): Document.\n\t* gcc.c (driver_self_specs): New variable.\n\t(do_self_spec): New function.\n\t(main): Use it to process driver_self_specs.\n\nFrom-SVN: r58109", "tree": {"sha": "0cc93a95de2023f1fadaefdc7bf5081a6ac353b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cc93a95de2023f1fadaefdc7bf5081a6ac353b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db36994b97e9bf3677575904a5fabb62b2bc81e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db36994b97e9bf3677575904a5fabb62b2bc81e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db36994b97e9bf3677575904a5fabb62b2bc81e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db36994b97e9bf3677575904a5fabb62b2bc81e8/comments", "author": null, "committer": null, "parents": [{"sha": "11e5489b1ecfb256cc64970a87b32f0cd856ec15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11e5489b1ecfb256cc64970a87b32f0cd856ec15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11e5489b1ecfb256cc64970a87b32f0cd856ec15"}], "stats": {"total": 76, "additions": 76, "deletions": 0}, "files": [{"sha": "4268d240a7a3a9484b2c9b22dcd5ee1225f37f6d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db36994b97e9bf3677575904a5fabb62b2bc81e8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db36994b97e9bf3677575904a5fabb62b2bc81e8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=db36994b97e9bf3677575904a5fabb62b2bc81e8", "patch": "@@ -1,3 +1,10 @@\n+2002-10-14  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* doc/tm.texi (DRIVER_SELF_SPECS): Document.\n+\t* gcc.c (driver_self_specs): New variable.\n+\t(do_self_spec): New function.\n+\t(main): Use it to process driver_self_specs.\n+\n 2002-10-13  Richard Henderson  <rth@redhat.com>\n \n \t* rtl.c (shallow_copy_rtx): Use memcpy for the entire node."}, {"sha": "bf94d584a884c960f7ff4de9e2e3765aadc5b38f", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db36994b97e9bf3677575904a5fabb62b2bc81e8/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db36994b97e9bf3677575904a5fabb62b2bc81e8/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=db36994b97e9bf3677575904a5fabb62b2bc81e8", "patch": "@@ -163,6 +163,23 @@ multilibs.  Example nonsensical definition, where @code{-malt-abi},\n @{ \"-compat\", \"-EB -malign=4 -mspoo\" @}\n @end smallexample\n \n+@findex DRIVER_SELF_SPECS\n+@item DRIVER_SELF_SPECS\n+A list of specs for the driver itself.  It should be a suitable\n+initializer for an array of strings, with no surrounding braces.\n+\n+The driver applies these specs to its own command line before choosing\n+the multilib directory or running any subcommands.  It applies them in\n+the order given, so each spec can depend on the options added by\n+earlier ones.  It is also possible to remove options using\n+@samp{%<@var{option}} in the usual way.\n+\n+This macro can be useful when a port has several interdependent target\n+options.  It provides a way of standardizing the command line so\n+that the other specs are easier to write.\n+\n+Do not define this macro if it does not need to do anything.\n+\n @findex CPP_SPEC\n @item CPP_SPEC\n A C string constant that tells the GCC driver program options to"}, {"sha": "291712dcfa158b817189f64a4314cfdb6d863f78", "filename": "gcc/gcc.c", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db36994b97e9bf3677575904a5fabb62b2bc81e8/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db36994b97e9bf3677575904a5fabb62b2bc81e8/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=db36994b97e9bf3677575904a5fabb62b2bc81e8", "patch": "@@ -296,6 +296,7 @@ static char *save_string\tPARAMS ((const char *, int));\n static void set_collect_gcc_options PARAMS ((void));\n static int do_spec_1\t\tPARAMS ((const char *, int, const char *));\n static int do_spec_2\t\tPARAMS ((const char *));\n+static void do_self_spec\tPARAMS ((const char *));\n static const char *find_file\tPARAMS ((const char *));\n static int is_directory\t\tPARAMS ((const char *, const char *, int));\n static void validate_switches\tPARAMS ((const char *));\n@@ -738,6 +739,12 @@ static const char *multilib_exclusions;\n \n static const char *const multilib_defaults_raw[] = MULTILIB_DEFAULTS;\n \n+#ifndef DRIVER_SELF_SPECS\n+#define DRIVER_SELF_SPECS \"\"\n+#endif\n+\n+static const char *const driver_self_specs[] = { DRIVER_SELF_SPECS };\n+\n struct user_specs\n {\n   struct user_specs *next;\n@@ -4268,6 +4275,45 @@ do_spec_2 (spec)\n   return do_spec_1 (spec, 0, NULL);\n }\n \n+\n+/* Process the given spec string and add any new options to the end\n+   of the switches/n_switches array.  */\n+\n+static void\n+do_self_spec (spec)\n+     const char *spec;\n+{\n+  do_spec_2 (spec);\n+  do_spec_1 (\" \", 0, NULL);\n+\n+  if (argbuf_index > 0)\n+    {\n+      int i, first;\n+\n+      first = n_switches;\n+      n_switches += argbuf_index;\n+      switches = xrealloc (switches,\n+\t\t\t   sizeof (struct switchstr) * (n_switches + 1));\n+\n+      switches[n_switches] = switches[first];\n+      for (i = 0; i < argbuf_index; i++)\n+\t{\n+\t  struct switchstr *sw;\n+\n+\t  /* Each switch should start with '-'.  */\n+\t  if (argbuf[i][0] != '-')\n+\t    abort ();\n+\n+\t  sw = &switches[i + first];\n+\t  sw->part1 = &argbuf[i][1];\n+\t  sw->args = 0;\n+\t  sw->live_cond = SWITCH_OK;\n+\t  sw->validated = 0;\n+\t  sw->ordering = 0;\n+\t}\n+    }\n+}\n+\n /* Process the sub-spec SPEC as a portion of a larger spec.\n    This is like processing a whole spec except that we do\n    not initialize at the beginning and we do not supply a\n@@ -5917,6 +5963,12 @@ main (argc, argv)\n \n   process_command (argc, argv);\n \n+  /* Process DRIVER_SELF_SPECS, adding any new options to the end\n+     of the command line.  */\n+\n+  for (i = 0; i < ARRAY_SIZE (driver_self_specs); i++)\n+    do_self_spec (driver_self_specs[i]);\n+\n   /* Initialize the vector of specs to just the default.\n      This means one element containing 0s, as a terminator.  */\n "}]}