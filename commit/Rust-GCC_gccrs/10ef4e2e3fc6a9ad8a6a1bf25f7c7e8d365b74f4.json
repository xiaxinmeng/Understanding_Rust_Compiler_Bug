{"sha": "10ef4e2e3fc6a9ad8a6a1bf25f7c7e8d365b74f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBlZjRlMmUzZmM2YTlhZDhhNmExYmYyNWY3YzdlOGQzNjViNzRmNA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-07-04T16:36:26Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-07-04T16:36:26Z"}, "message": "2003-07-04  Paolo Carlini  <pcarlini@unitus.it>\n\n\tRevert the fix for libstdc++/11378.\n\nFrom-SVN: r68922", "tree": {"sha": "a144c0efae7c0040d3b2f8180e06d8ece3a5291e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a144c0efae7c0040d3b2f8180e06d8ece3a5291e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10ef4e2e3fc6a9ad8a6a1bf25f7c7e8d365b74f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10ef4e2e3fc6a9ad8a6a1bf25f7c7e8d365b74f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10ef4e2e3fc6a9ad8a6a1bf25f7c7e8d365b74f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10ef4e2e3fc6a9ad8a6a1bf25f7c7e8d365b74f4/comments", "author": null, "committer": null, "parents": [{"sha": "ac2c48d70fd44b51642ab5d2b88e1487ca11bb4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac2c48d70fd44b51642ab5d2b88e1487ca11bb4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac2c48d70fd44b51642ab5d2b88e1487ca11bb4f"}], "stats": {"total": 152, "additions": 7, "deletions": 145}, "files": [{"sha": "c6170d8ca992d845cbbc974088cf7a03b592cbe7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10ef4e2e3fc6a9ad8a6a1bf25f7c7e8d365b74f4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10ef4e2e3fc6a9ad8a6a1bf25f7c7e8d365b74f4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=10ef4e2e3fc6a9ad8a6a1bf25f7c7e8d365b74f4", "patch": "@@ -1,3 +1,7 @@\n+2003-07-04  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\tRevert the fix for libstdc++/11378.\n+\n 2003-07-04  Paolo Carlini  <pcarlini@unitus.it>\n \n \tPR libstdc++/11378"}, {"sha": "b97c9443de955069eeb29a6b5df8084071beb815", "filename": "libstdc++-v3/include/std/std_fstream.h", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10ef4e2e3fc6a9ad8a6a1bf25f7c7e8d365b74f4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10ef4e2e3fc6a9ad8a6a1bf25f7c7e8d365b74f4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h?ref=10ef4e2e3fc6a9ad8a6a1bf25f7c7e8d365b74f4", "patch": "@@ -397,21 +397,9 @@ namespace std\n       virtual streamsize\n       xsputn(const char_type* __s, streamsize __n)\n       {\n-\tstreamsize __ret = 0;\n- \n-\tconst bool __testout = this->_M_mode & ios_base::out;\n-\tif (__testout && !_M_reading && this->_M_buf_size == 1\n-\t    && __check_facet(_M_codecvt).always_noconv())\n-\t  {\n-\t    __ret = _M_file.xsputn(reinterpret_cast<const char*>(__s), __n);\n-\t    if (__ret == __n)\n-\t      _M_writing = true;\n-\t  }\n-\telse\n-\t  __ret = __streambuf_type::xsputn(__s, __n);\n-      \n-\treturn __ret;\n-      }          \n+\t_M_destroy_pback();\n+\treturn __streambuf_type::xsputn(__s, __n);\n+      }\n \n       /**\n        *  @if maint"}, {"sha": "17b0c46a09df8d707de712f31ccc7a631db5de8c", "filename": "libstdc++-v3/testsuite/performance/filebuf_unbuf_sputn.cc", "status": "removed", "additions": 0, "deletions": 130, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac2c48d70fd44b51642ab5d2b88e1487ca11bb4f/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Ffilebuf_unbuf_sputn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac2c48d70fd44b51642ab5d2b88e1487ca11bb4f/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Ffilebuf_unbuf_sputn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Ffilebuf_unbuf_sputn.cc?ref=ac2c48d70fd44b51642ab5d2b88e1487ca11bb4f", "patch": "@@ -1,130 +0,0 @@\n-// 2003-07-04  Petur Runolfsson <peturr02@ru.is>\n-//\n-// Copyright (C) 2003 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-#include <cstdio>\n-#include <cstring>\n-#include <fstream>\n-#include <iostream>\n-\n-// Contributed as part of libstdc++/11378.\n-int main(int argc, char** argv)\n-{\n-  using namespace std;\n-  \n-  if (argc < 3)\n-    {\n-      cerr << \"Usage: \" << argv[0] << \" type iters [chunksize]\\n\";\n-      return -1;\n-    }\n-\n-  enum { type_stdio, type_iostream } type;\n-  \n-  if (!strcmp(argv[1], \"stdio\"))\n-    type = type_stdio;\n-  else if (!strcmp(argv[1], \"iostream\"))\n-    type = type_iostream;\n-  else\n-    {\n-      cerr << \"Type must be one of {stdio, iostream}\\n\";\n-      return -1;\n-    }\n-\n-  int iters = atoi(argv[2]);\n-  if (iters < 1)\n-    {\n-      cerr << \"Iters must be an positive integer\\n\";\n-      return -1;\n-    }\n-  \n-  int chunksize = 1;\n-  if (argc > 3)\n-    chunksize = atoi(argv[3]);\n-  \n-  if (iters < 1)\n-    {\n-      cerr << \"Chunksize must be an positive integer\\n\";\n-      return -1;\n-    }\n-  \n-  char* chunk = 0;\n-  if (chunksize > 1)\n-    {\n-      chunk = new char[chunksize];\n-      memset(chunk, 'a', chunksize);\n-    }\n-\n-  switch (type)\n-    {\n-    case type_stdio:\n-      {\n-\tFILE* f = fopen(\"tmp\", \"w\");\n-\tsetvbuf(f, 0, _IONBF, 0);\n-\t\n-\tif (chunksize > 1)\n-\t  {\n-\t    for (int i = 0; i < iters; ++i)\n-\t      fwrite_unlocked(chunk, 1, chunksize, f);\n-\t  }\n-\telse\n-\t  {\n-\t    for (int i = 0; i < iters; ++i)\n-\t      putc_unlocked('a', f);\n-\t  }\n-\t\n-\tfclose(f);\n-\tbreak;\n-      }\n-\n-    case type_iostream:\n-      {\n-\tfilebuf f;\n-\tf.pubsetbuf(0, 0);\n-\t\n-\tf.open(\"tmp\", ios_base::out);\n-\n-\tif (chunksize > 1)\n-\t  {\n-\t    for (int i = 0; i < iters; ++i)\n-\t      f.sputn(chunk, chunksize);\n-\t  }\n-\telse\n-\t  {\n-\t    for (int i = 0; i < iters; ++i)\n-\t      f.sputc('a');\n-\t  }\n-\t\n-\tf.close();\n-\t\n-\tbreak;\n-      }\n-    }\n-\n-  delete[] chunk;\n-  return 0;\n-}"}]}