{"sha": "465d00877e3d96ff827f02a699e7398ef62bef67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY1ZDAwODc3ZTNkOTZmZjgyN2YwMmE2OTllNzM5OGVmNjJiZWY2Nw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-04-13T19:55:15Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-04-13T19:55:15Z"}, "message": "re PR rtl-optimization/85393 (Miscompilation with hot/cold partitioning starting with r254832)\n\n\tPR rtl-optimization/85393\n\t* except.h (expand_dw2_landing_pad_for_region): Remove declaration.\n\t* except.c (expand_dw2_landing_pad_for_region): Make static.\n\t* bb-reorder.c (fix_up_crossing_landing_pad): In new_bb emit just\n\ta label and unconditional jump to old_bb, rather than\n\texpand_dw2_landing_pad_for_region insn(s) and jump to single_succ\n\tbasic block.\n\n\t* g++.dg/opt/pr85393.C: New test.\n\t* g++.dg/opt/pr85393-aux.cc: New file.\n\nFrom-SVN: r259378", "tree": {"sha": "7f4ab9bb1912581694938de5c77978fedb10f791", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f4ab9bb1912581694938de5c77978fedb10f791"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/465d00877e3d96ff827f02a699e7398ef62bef67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/465d00877e3d96ff827f02a699e7398ef62bef67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/465d00877e3d96ff827f02a699e7398ef62bef67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/465d00877e3d96ff827f02a699e7398ef62bef67/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9b91582429ca0b78f235e3c11b809a861b3d0f19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b91582429ca0b78f235e3c11b809a861b3d0f19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b91582429ca0b78f235e3c11b809a861b3d0f19"}], "stats": {"total": 71, "additions": 56, "deletions": 15}, "files": [{"sha": "96247862f447421940c0c62de0c8bf2b63f1e827", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/465d00877e3d96ff827f02a699e7398ef62bef67/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/465d00877e3d96ff827f02a699e7398ef62bef67/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=465d00877e3d96ff827f02a699e7398ef62bef67", "patch": "@@ -1,5 +1,13 @@\n 2018-04-13  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR rtl-optimization/85393\n+\t* except.h (expand_dw2_landing_pad_for_region): Remove declaration.\n+\t* except.c (expand_dw2_landing_pad_for_region): Make static.\n+\t* bb-reorder.c (fix_up_crossing_landing_pad): In new_bb emit just\n+\ta label and unconditional jump to old_bb, rather than\n+\texpand_dw2_landing_pad_for_region insn(s) and jump to single_succ\n+\tbasic block.\n+\n \tPR rtl-optimization/85376\n \t* simplify-rtx.c (simplify_const_unary_operation): For CLZ and CTZ and\n \tzero op0, if C?Z_DEFINED_VALUE_AT_ZERO is false, return NULL_RTX"}, {"sha": "d2b41606a1422706d8b4b77d56b82db8551f1411", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/465d00877e3d96ff827f02a699e7398ef62bef67/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/465d00877e3d96ff827f02a699e7398ef62bef67/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=465d00877e3d96ff827f02a699e7398ef62bef67", "patch": "@@ -1409,14 +1409,14 @@ get_uncond_jump_length (void)\n }\n \n /* The landing pad OLD_LP, in block OLD_BB, has edges from both partitions.\n-   Duplicate the landing pad and split the edges so that no EH edge\n-   crosses partitions.  */\n+   Add a new landing pad that will just jump to the old one and split the\n+   edges so that no EH edge crosses partitions.  */\n \n static void\n fix_up_crossing_landing_pad (eh_landing_pad old_lp, basic_block old_bb)\n {\n   eh_landing_pad new_lp;\n-  basic_block new_bb, last_bb, post_bb;\n+  basic_block new_bb, last_bb;\n   rtx_insn *jump;\n   unsigned new_partition;\n   edge_iterator ei;\n@@ -1431,24 +1431,20 @@ fix_up_crossing_landing_pad (eh_landing_pad old_lp, basic_block old_bb)\n   /* Put appropriate instructions in new bb.  */\n   rtx_code_label *new_label = emit_label (new_lp->landing_pad);\n \n-  expand_dw2_landing_pad_for_region (old_lp->region);\n-\n-  post_bb = BLOCK_FOR_INSN (old_lp->landing_pad);\n-  post_bb = single_succ (post_bb);\n-  rtx_code_label *post_label = block_label (post_bb);\n-  jump = emit_jump_insn (targetm.gen_jump (post_label));\n-  JUMP_LABEL (jump) = post_label;\n+  rtx_code_label *old_label = block_label (old_bb);\n+  jump = emit_jump_insn (targetm.gen_jump (old_label));\n+  JUMP_LABEL (jump) = old_label;\n \n   /* Create new basic block to be dest for lp.  */\n   last_bb = EXIT_BLOCK_PTR_FOR_FN (cfun)->prev_bb;\n   new_bb = create_basic_block (new_label, jump, last_bb);\n   new_bb->aux = last_bb->aux;\n-  new_bb->count = post_bb->count;\n+  new_bb->count = old_bb->count;\n   last_bb->aux = new_bb;\n \n   emit_barrier_after_bb (new_bb);\n \n-  make_single_succ_edge (new_bb, post_bb, 0);\n+  make_single_succ_edge (new_bb, old_bb, 0);\n \n   /* Make sure new bb is in the other partition.  */\n   new_partition = BB_PARTITION (old_bb);\n@@ -1457,7 +1453,7 @@ fix_up_crossing_landing_pad (eh_landing_pad old_lp, basic_block old_bb)\n \n   /* Fix up the edges.  */\n   for (ei = ei_start (old_bb->preds); (e = ei_safe_edge (ei)) != NULL; )\n-    if (BB_PARTITION (e->src) == new_partition)\n+    if (e->src != new_bb && BB_PARTITION (e->src) == new_partition)\n       {\n \trtx_insn *insn = BB_END (e->src);\n \trtx note = find_reg_note (insn, REG_EH_REGION, NULL_RTX);"}, {"sha": "ba42bf68b43e9f4411c927e8e6fc718c5a5dc962", "filename": "gcc/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/465d00877e3d96ff827f02a699e7398ef62bef67/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/465d00877e3d96ff827f02a699e7398ef62bef67/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=465d00877e3d96ff827f02a699e7398ef62bef67", "patch": "@@ -947,7 +947,7 @@ emit_to_new_bb_before (rtx_insn *seq, rtx_insn *insn)\n    at the rtl level.  Emit the code required by the target at a landing\n    pad for the given region.  */\n \n-void\n+static void\n expand_dw2_landing_pad_for_region (eh_region region)\n {\n   if (targetm.have_exception_receiver ())"}, {"sha": "caa375ef670b0797405c7af65ec3778207fa0782", "filename": "gcc/except.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/465d00877e3d96ff827f02a699e7398ef62bef67/gcc%2Fexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/465d00877e3d96ff827f02a699e7398ef62bef67/gcc%2Fexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.h?ref=465d00877e3d96ff827f02a699e7398ef62bef67", "patch": "@@ -243,7 +243,6 @@ extern rtx expand_builtin_dwarf_sp_column (void);\n extern void expand_builtin_eh_return (tree, tree);\n extern void expand_eh_return (void);\n extern rtx expand_builtin_extend_pointer (tree);\n-extern void expand_dw2_landing_pad_for_region (eh_region);\n \n typedef tree (*duplicate_eh_regions_map) (tree, void *);\n extern hash_map<void *, void *> *duplicate_eh_regions"}, {"sha": "88c7185cf4664adcd8555ef98c47c075b2870a07", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/465d00877e3d96ff827f02a699e7398ef62bef67/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/465d00877e3d96ff827f02a699e7398ef62bef67/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=465d00877e3d96ff827f02a699e7398ef62bef67", "patch": "@@ -1,5 +1,9 @@\n 2018-04-13  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR rtl-optimization/85393\n+\t* g++.dg/opt/pr85393.C: New test.\n+\t* g++.dg/opt/pr85393-aux.cc: New file.\n+\n \tPR rtl-optimization/85376\n \t* gcc.dg/pr85376.c: New test.\n "}, {"sha": "45e47673e56f29b1cebc3e34aba0d72bc2c33970", "filename": "gcc/testsuite/g++.dg/opt/pr85393-aux.cc", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/465d00877e3d96ff827f02a699e7398ef62bef67/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr85393-aux.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/465d00877e3d96ff827f02a699e7398ef62bef67/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr85393-aux.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr85393-aux.cc?ref=465d00877e3d96ff827f02a699e7398ef62bef67", "patch": "@@ -0,0 +1,5 @@\n+// PR rtl-optimization/85393\n+// { dg-do compile }\n+// { dg-options \"\" }\n+\n+void foo (char const *) {}"}, {"sha": "a2a3162300eaf274f1475cd927fe7460687fbe61", "filename": "gcc/testsuite/g++.dg/opt/pr85393.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/465d00877e3d96ff827f02a699e7398ef62bef67/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr85393.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/465d00877e3d96ff827f02a699e7398ef62bef67/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr85393.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr85393.C?ref=465d00877e3d96ff827f02a699e7398ef62bef67", "patch": "@@ -0,0 +1,29 @@\n+// PR rtl-optimization/85393\n+// { dg-do run { target c++11 } }\n+// { dg-options \"-O2\" }\n+// { dg-additional-sources \"pr85393-aux.cc\" }\n+\n+#include <stdexcept>\n+#include <vector>\n+\n+void foo (char const *s);\n+struct S { ~S () noexcept (false) { throw std::runtime_error (\"foo\"); } };\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  std::vector <std::vector <char> > args;\n+  try\n+    {\n+      {\n+        S k;\n+        foo (\"A\");\n+      }\n+\n+      if (argv)\n+        throw std::runtime_error (\"foo\");\n+      args.push_back ({});\n+    }\n+  catch (std::runtime_error const& e)\n+    {}\n+}"}]}