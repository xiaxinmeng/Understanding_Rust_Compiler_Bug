{"sha": "6078f50a123e3801db6d548dfcb5131677b3baae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA3OGY1MGExMjNlMzgwMWRiNmQ1NDhkZmNiNTEzMTY3N2IzYmFhZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2009-12-04T18:41:59Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-12-04T18:41:59Z"}, "message": "re PR libffi/41908 (closures fail for some structure arguments containing floats)\n\n\tPR libffi/41908\n\t* src/x86/ffi64.c (classify_argument): Update from\n\tgcc/config/i386/i386.c.\n\t(ffi_closure_unix64_inner): Do not use the address of two consecutive\n\tSSE registers directly.\n\t* testsuite/libffi.call/cls_dbls_struct.c (main): Remove xfail\n\tfor x86_64 linux targets.\n\nFrom-SVN: r154988", "tree": {"sha": "7023e428e5aab63f24b55d12fced3602b2ad7087", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7023e428e5aab63f24b55d12fced3602b2ad7087"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6078f50a123e3801db6d548dfcb5131677b3baae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6078f50a123e3801db6d548dfcb5131677b3baae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6078f50a123e3801db6d548dfcb5131677b3baae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6078f50a123e3801db6d548dfcb5131677b3baae/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d0e4968c33c257bcfa1afa4f499661c18c80e5bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0e4968c33c257bcfa1afa4f499661c18c80e5bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0e4968c33c257bcfa1afa4f499661c18c80e5bc"}], "stats": {"total": 100, "additions": 82, "deletions": 18}, "files": [{"sha": "7c877a1f4cca7775ac031b702312b2c88c3f0abc", "filename": "libffi/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6078f50a123e3801db6d548dfcb5131677b3baae/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6078f50a123e3801db6d548dfcb5131677b3baae/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=6078f50a123e3801db6d548dfcb5131677b3baae", "patch": "@@ -1,3 +1,13 @@\n+2009-12-04  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR libffi/41908\n+\t* src/x86/ffi64.c (classify_argument): Update from\n+\tgcc/config/i386/i386.c.\n+\t(ffi_closure_unix64_inner): Do not use the address of two consecutive\n+\tSSE registers directly.\n+\t* testsuite/libffi.call/cls_dbls_struct.c (main): Remove xfail\n+\tfor x86_64 linux targets.\n+\n 2009-12-04  David Edelsohn  <edelsohn@gnu.org>\n \n \t* src/powerpc/ffi_darwin.c (ffi_closure_helper_DARWIN): Increment"}, {"sha": "51ada0e879faf88abc339302ca47cee9001a1702", "filename": "libffi/src/x86/ffi64.c", "status": "modified", "additions": 71, "deletions": 17, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6078f50a123e3801db6d548dfcb5131677b3baae/libffi%2Fsrc%2Fx86%2Fffi64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6078f50a123e3801db6d548dfcb5131677b3baae/libffi%2Fsrc%2Fx86%2Fffi64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fx86%2Fffi64.c?ref=6078f50a123e3801db6d548dfcb5131677b3baae", "patch": "@@ -145,13 +145,35 @@ classify_argument (ffi_type *type, enum x86_64_reg_class classes[],\n     case FFI_TYPE_UINT64:\n     case FFI_TYPE_SINT64:\n     case FFI_TYPE_POINTER:\n-      if (byte_offset + type->size <= 4)\n-\tclasses[0] = X86_64_INTEGERSI_CLASS;\n-      else\n-\tclasses[0] = X86_64_INTEGER_CLASS;\n-      return 1;\n+      {\n+\tint size = byte_offset + type->size;\n+\n+\tif (size <= 4)\n+\t  {\n+\t    classes[0] = X86_64_INTEGERSI_CLASS;\n+\t    return 1;\n+\t  }\n+\telse if (size <= 8)\n+\t  {\n+\t    classes[0] = X86_64_INTEGER_CLASS;\n+\t    return 1;\n+\t  }\n+\telse if (size <= 12)\n+\t  {\n+\t    classes[0] = X86_64_INTEGER_CLASS;\n+\t    classes[1] = X86_64_INTEGERSI_CLASS;\n+\t    return 2;\n+\t  }\n+\telse if (size <= 16)\n+\t  {\n+\t    classes[0] = classes[1] = X86_64_INTEGERSI_CLASS;\n+\t    return 2;\n+\t  }\n+\telse\n+\t  FFI_ASSERT (0);\n+      }\n     case FFI_TYPE_FLOAT:\n-      if (byte_offset == 0)\n+      if (!(byte_offset % 8))\n \tclasses[0] = X86_64_SSESF_CLASS;\n       else\n \tclasses[0] = X86_64_SSE_CLASS;\n@@ -171,13 +193,21 @@ classify_argument (ffi_type *type, enum x86_64_reg_class classes[],\n \tint i;\n \tenum x86_64_reg_class subclasses[MAX_CLASSES];\n \n-\t/* If the struct is larger than 16 bytes, pass it on the stack.  */\n-\tif (type->size > 16)\n+\t/* If the struct is larger than 32 bytes, pass it on the stack.  */\n+\tif (type->size > 32)\n \t  return 0;\n \n \tfor (i = 0; i < words; i++)\n \t  classes[i] = X86_64_NO_CLASS;\n \n+\t/* Zero sized arrays or structures are NO_CLASS.  We return 0 to\n+\t   signalize memory class, so handle it as special case.  */\n+\tif (!words)\n+\t  {\n+\t    classes[0] = X86_64_NO_CLASS;\n+\t    return 1;\n+\t  }\n+\n \t/* Merge the fields of structure.  */\n \tfor (ptr = type->elements; *ptr != NULL; ptr++)\n \t  {\n@@ -198,6 +228,20 @@ classify_argument (ffi_type *type, enum x86_64_reg_class classes[],\n \t    byte_offset += (*ptr)->size;\n \t  }\n \n+\tif (words > 2)\n+\t  {\n+\t    /* When size > 16 bytes, if the first one isn't\n+\t       X86_64_SSE_CLASS or any other ones aren't\n+\t       X86_64_SSEUP_CLASS, everything should be passed in\n+\t       memory.  */\n+\t    if (classes[0] != X86_64_SSE_CLASS)\n+\t      return 0;\n+\n+\t    for (i = 1; i < words; i++)\n+\t      if (classes[i] != X86_64_SSEUP_CLASS)\n+\t\treturn 0;\n+\t  }\n+\n \t/* Final merger cleanup.  */\n \tfor (i = 0; i < words; i++)\n \t  {\n@@ -207,15 +251,25 @@ classify_argument (ffi_type *type, enum x86_64_reg_class classes[],\n \t      return 0;\n \n \t    /* The X86_64_SSEUP_CLASS should be always preceded by\n-\t       X86_64_SSE_CLASS.  */\n+\t       X86_64_SSE_CLASS or X86_64_SSEUP_CLASS.  */\n \t    if (classes[i] == X86_64_SSEUP_CLASS\n-\t\t&& (i == 0 || classes[i - 1] != X86_64_SSE_CLASS))\n-\t      classes[i] = X86_64_SSE_CLASS;\n+\t\t&& classes[i - 1] != X86_64_SSE_CLASS\n+\t\t&& classes[i - 1] != X86_64_SSEUP_CLASS)\n+\t      {\n+\t\t/* The first one should never be X86_64_SSEUP_CLASS.  */\n+\t\tFFI_ASSERT (i != 0);\n+\t\tclasses[i] = X86_64_SSE_CLASS;\n+\t      }\n \n-\t    /*  X86_64_X87UP_CLASS should be preceded by X86_64_X87_CLASS.  */\n+\t    /*  If X86_64_X87UP_CLASS isn't preceded by X86_64_X87_CLASS,\n+\t\teverything should be passed in memory.  */\n \t    if (classes[i] == X86_64_X87UP_CLASS\n-\t\t&& (i == 0 || classes[i - 1] != X86_64_X87_CLASS))\n-\t      classes[i] = X86_64_SSE_CLASS;\n+\t\t&& (classes[i - 1] != X86_64_X87_CLASS))\n+\t      {\n+\t\t/* The first one should never be X86_64_X87UP_CLASS.  */\n+\t\tFFI_ASSERT (i != 0);\n+\t\treturn 0;\n+\t      }\n \t  }\n \treturn words;\n       }\n@@ -528,10 +582,10 @@ ffi_closure_unix64_inner(ffi_closure *closure, void *rvalue,\n \t  argp += arg_types[i]->size;\n \t}\n       /* If the argument is in a single register, or two consecutive\n-\t registers, then we can use that address directly.  */\n+\t integer registers, then we can use that address directly.  */\n       else if (n == 1\n-\t       || (n == 2\n-\t\t   && SSE_CLASS_P (classes[0]) == SSE_CLASS_P (classes[1])))\n+\t       || (n == 2 && !(SSE_CLASS_P (classes[0])\n+\t\t\t       || SSE_CLASS_P (classes[1]))))\n \t{\n \t  /* The argument is in a single register.  */\n \t  if (SSE_CLASS_P (classes[0]))"}, {"sha": "660dabb883b1f7b86f501e3b29eefe80ed497c00", "filename": "libffi/testsuite/libffi.call/cls_dbls_struct.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6078f50a123e3801db6d548dfcb5131677b3baae/libffi%2Ftestsuite%2Flibffi.call%2Fcls_dbls_struct.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6078f50a123e3801db6d548dfcb5131677b3baae/libffi%2Ftestsuite%2Flibffi.call%2Fcls_dbls_struct.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fcls_dbls_struct.c?ref=6078f50a123e3801db6d548dfcb5131677b3baae", "patch": "@@ -57,7 +57,7 @@ int main(int argc __UNUSED__, char** argv __UNUSED__)\n \tCHECK(ffi_prep_closure_loc(pcl, &cif, closure_test_gn, NULL, code) == FFI_OK);\n \n \t((void*(*)(Dbls))(code))(arg);\n-\t/* { dg-output \"1.0 2.0\\n\" { xfail x86_64-*-linux-* } } */\n+\t/* { dg-output \"1.0 2.0\\n\" } */\n \n \tclosure_test_fn(arg);\n \t/* { dg-output \"1.0 2.0\\n\" } */"}]}