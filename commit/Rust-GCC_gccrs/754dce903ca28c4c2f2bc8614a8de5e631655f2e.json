{"sha": "754dce903ca28c4c2f2bc8614a8de5e631655f2e", "node_id": "C_kwDOANBUbNoAKDc1NGRjZTkwM2NhMjhjNGMyZjJiYzg2MTRhOGRlNWU2MzE2NTVmMmU", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-02-16T04:15:18Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-02-17T10:58:22Z"}, "message": "Restrict the two sources of vect_recog_cond_expr_convert_pattern to be of the same type when convert is extension.\n\nIt's not equal to transform\n\n (cond (cmp @1 @2) (convert@3 @4) (convert@5 @6))\n\n to\n\n (convert (cmp @1 @2) (convert)@4 @6)\n\nwhen(convert@3 @4) is extension because it's zero_extend vs sign_extend.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/104551\n\tPR tree-optimization/103771\n\t* match.pd (cond_expr_convert_p): Add types_match check when\n\tconvert is extension.\n\t* tree-vect-patterns.cc\n\t(gimple_cond_expr_convert_p): Adjust comments.\n\t(vect_recog_cond_expr_convert_pattern): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr104551.c: New test.", "tree": {"sha": "d433f227d832ec19e1cd87a5c5ed1bba6abadb41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d433f227d832ec19e1cd87a5c5ed1bba6abadb41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/754dce903ca28c4c2f2bc8614a8de5e631655f2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/754dce903ca28c4c2f2bc8614a8de5e631655f2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/754dce903ca28c4c2f2bc8614a8de5e631655f2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/754dce903ca28c4c2f2bc8614a8de5e631655f2e/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c2b44b52364cb5661095b346de794bc7ff02866", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c2b44b52364cb5661095b346de794bc7ff02866", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c2b44b52364cb5661095b346de794bc7ff02866"}], "stats": {"total": 36, "additions": 34, "deletions": 2}, "files": [{"sha": "8b6f22f1065835cdc8025086fdd993c000ed190c", "filename": "gcc/match.pd", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754dce903ca28c4c2f2bc8614a8de5e631655f2e/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754dce903ca28c4c2f2bc8614a8de5e631655f2e/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=754dce903ca28c4c2f2bc8614a8de5e631655f2e", "patch": "@@ -7698,5 +7698,11 @@ and,\n \t  == TYPE_PRECISION (TREE_TYPE (@2))\n        && TYPE_PRECISION (TREE_TYPE (@0))\n \t  == TYPE_PRECISION (TREE_TYPE (@3))\n+       /* For vect_recog_cond_expr_convert_pattern, @2 and @3 can differ in\n+\t  signess when convert is truncation, but not ok for extension since\n+\t  it's sign_extend vs zero_extend.  */\n+       && (TYPE_PRECISION (TREE_TYPE (@0)) > TYPE_PRECISION (type)\n+\t   || (TYPE_UNSIGNED (TREE_TYPE (@2))\n+\t       == TYPE_UNSIGNED (TREE_TYPE (@3))))\n        && single_use (@4)\n        && single_use (@5))))"}, {"sha": "6300f25c0d500021d4427876465216c5af7cf482", "filename": "gcc/testsuite/gcc.target/i386/pr104551.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754dce903ca28c4c2f2bc8614a8de5e631655f2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr104551.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754dce903ca28c4c2f2bc8614a8de5e631655f2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr104551.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr104551.c?ref=754dce903ca28c4c2f2bc8614a8de5e631655f2e", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mavx2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+unsigned int\n+__attribute__((noipa))\n+test(unsigned int a, unsigned char p[16]) {\n+  unsigned int res = 0;\n+  for (unsigned b = 0; b < a; b += 1)\n+    res = p[b] ? p[b] : (char) b;\n+  return res;\n+}\n+\n+int main ()\n+{\n+  unsigned int a = 16U;\n+  unsigned char p[16];\n+  for (int i = 0; i != 16; i++)\n+    p[i] = (unsigned char)128;\n+  unsigned int res = test (a, p);\n+  if (res != 128)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "217bdfd7045a22578a35bb891a4318d741071872", "filename": "gcc/tree-vect-patterns.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754dce903ca28c4c2f2bc8614a8de5e631655f2e/gcc%2Ftree-vect-patterns.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754dce903ca28c4c2f2bc8614a8de5e631655f2e/gcc%2Ftree-vect-patterns.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.cc?ref=754dce903ca28c4c2f2bc8614a8de5e631655f2e", "patch": "@@ -929,8 +929,10 @@ vect_reassociating_reduction_p (vec_info *vinfo,\n    with conditions:\n    1) @1, @2, c, d, a, b are all integral type.\n    2) There's single_use for both @1 and @2.\n-   3) a, c and d have same precision.\n+   3) a, c have same precision.\n    4) c and @1 have different precision.\n+   5) c, d are the same type or they can differ in sign when convert is\n+   truncation.\n \n    record a and c and d and @3.  */\n \n@@ -952,7 +954,7 @@ extern bool gimple_cond_expr_convert_p (tree, tree*, tree (*)(tree));\n    TYPE_PRECISION (TYPE_E) != TYPE_PRECISION (TYPE_CD);\n    TYPE_PRECISION (TYPE_AB) == TYPE_PRECISION (TYPE_CD);\n    single_use of op_true and op_false.\n-   TYPE_AB could differ in sign.\n+   TYPE_AB could differ in sign when (TYPE_E) A is a truncation.\n \n    Input:\n "}]}