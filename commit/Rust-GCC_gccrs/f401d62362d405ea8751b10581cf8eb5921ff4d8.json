{"sha": "f401d62362d405ea8751b10581cf8eb5921ff4d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQwMWQ2MjM2MmQ0MDVlYTg3NTFiMTA1ODFjZjhlYjU5MjFmZjRkOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2019-04-02T17:05:59Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2019-04-02T17:05:59Z"}, "message": "re PR target/89902 (ICE: in extract_insn, at recog.c:2310: unrecognizable insn with -mavx512bitalg)\n\n\tPR target/89902\n\tPR target/89903\n\t* config/i386/i386.c (dimode_scalar_to_vector_candidate_p):\n\tReturn false for variable DImode shifts.\n\t(dimode_scalar_chain::compute_convert_gain): Do not handle\n\tregister count operand in variable DImode shifts.\n\t(dimode_scalar_chain::make_vector_copies): Remove support to copy\n\tcount argument of a variable shift instruction to a vector register.\n\t(dimode_scalar_chain::convert_reg): Remove support to convert\n\tcount argument of a variable shift instruction.\n\ntestsuite/ChangeLog:\n\n\tPR target/89902\n\tPR target/89903\n\t* gcc.target/i386/pr70799-4.c: Remove.\n\t* gcc.target/i386/pr70799-5.c: Remove.\n\t* gcc.target/i386/pr89902.c: New test.\n\t* gcc.target/i386/pr89903.c: Ditto.\n\nFrom-SVN: r270102", "tree": {"sha": "a9595a8273801e964addfdbf6bec3f9be84152e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9595a8273801e964addfdbf6bec3f9be84152e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f401d62362d405ea8751b10581cf8eb5921ff4d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f401d62362d405ea8751b10581cf8eb5921ff4d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f401d62362d405ea8751b10581cf8eb5921ff4d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f401d62362d405ea8751b10581cf8eb5921ff4d8/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6fb8055edde15e304f77fbac2c2f317a5a44d6e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fb8055edde15e304f77fbac2c2f317a5a44d6e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fb8055edde15e304f77fbac2c2f317a5a44d6e9"}], "stats": {"total": 213, "additions": 58, "deletions": 155}, "files": [{"sha": "cb503b1c46d4da8732d967d9f460719f3993042e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f401d62362d405ea8751b10581cf8eb5921ff4d8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f401d62362d405ea8751b10581cf8eb5921ff4d8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f401d62362d405ea8751b10581cf8eb5921ff4d8", "patch": "@@ -1,3 +1,16 @@\n+2019-04-02  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/89902\n+\tPR target/89903\n+\t* config/i386/i386.c (dimode_scalar_to_vector_candidate_p):\n+\tReturn false for variable DImode shifts.\n+\t(dimode_scalar_chain::compute_convert_gain): Do not handle\n+\tregister count operand in variable DImode shifts.\n+\t(dimode_scalar_chain::make_vector_copies): Remove support to copy\n+\tcount argument of a variable shift instruction to a vector register.\n+\t(dimode_scalar_chain::convert_reg): Remove support to convert\n+\tcount argument of a variable shift instruction.\n+\n 2019-04-02  Andrey Belevantsev  <abel@ispras.ru>\n \n \tPR rtl-optimization/84206"}, {"sha": "a7544946e0adce44001dfbe95b9838cdba04ff87", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 9, "deletions": 121, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f401d62362d405ea8751b10581cf8eb5921ff4d8/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f401d62362d405ea8751b10581cf8eb5921ff4d8/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f401d62362d405ea8751b10581cf8eb5921ff4d8", "patch": "@@ -1058,16 +1058,8 @@ dimode_scalar_to_vector_candidate_p (rtx_insn *insn)\n \n     case ASHIFT:\n     case LSHIFTRT:\n-      if (!REG_P (XEXP (src, 1))\n-\t  && (!SUBREG_P (XEXP (src, 1))\n-\t      || SUBREG_BYTE (XEXP (src, 1)) != 0\n-\t      || !REG_P (SUBREG_REG (XEXP (src, 1))))\n-\t  && (!CONST_INT_P (XEXP (src, 1))\n-\t      || !IN_RANGE (INTVAL (XEXP (src, 1)), 0, 63)))\n-\treturn false;\n-\n-      if (GET_MODE (XEXP (src, 1)) != QImode\n-\t  && !CONST_INT_P (XEXP (src, 1)))\n+      if (!CONST_INT_P (XEXP (src, 1))\n+\t  || !IN_RANGE (INTVAL (XEXP (src, 1)), 0, 63))\n \treturn false;\n       break;\n \n@@ -1664,15 +1656,10 @@ dimode_scalar_chain::compute_convert_gain ()\n \t{\n     \t  if (CONST_INT_P (XEXP (src, 0)))\n \t    gain -= vector_const_cost (XEXP (src, 0));\n-\t  if (CONST_INT_P (XEXP (src, 1)))\n-\t    {\n-\t      gain += ix86_cost->shift_const;\n-\t      if (INTVAL (XEXP (src, 1)) >= 32)\n-\t\tgain -= COSTS_N_INSNS (1);\n-\t    }\n-\t  else\n-\t    /* Additional gain for omitting two CMOVs.  */\n-\t    gain += ix86_cost->shift_var + COSTS_N_INSNS (2);\n+\n+\t  gain += ix86_cost->shift_const;\n+\t  if (INTVAL (XEXP (src, 1)) >= 32)\n+\t    gain -= COSTS_N_INSNS (1);\n \t}\n       else if (GET_CODE (src) == PLUS\n \t       || GET_CODE (src) == MINUS\n@@ -1788,60 +1775,14 @@ dimode_scalar_chain::make_vector_copies (unsigned regno)\n {\n   rtx reg = regno_reg_rtx[regno];\n   rtx vreg = gen_reg_rtx (DImode);\n-  bool count_reg = false;\n   df_ref ref;\n \n   for (ref = DF_REG_DEF_CHAIN (regno); ref; ref = DF_REF_NEXT_REG (ref))\n     if (!bitmap_bit_p (insns, DF_REF_INSN_UID (ref)))\n       {\n-\tdf_ref use;\n-\n-\t/* Detect the count register of a shift instruction.  */\n-\tfor (use = DF_REG_USE_CHAIN (regno); use; use = DF_REF_NEXT_REG (use))\n-\t  if (bitmap_bit_p (insns, DF_REF_INSN_UID (use)))\n-\t    {\n-\t      rtx_insn *insn = DF_REF_INSN (use);\n-\t      rtx def_set = single_set (insn);\n-\n-\t      gcc_assert (def_set);\n-\n-\t      rtx src = SET_SRC (def_set);\n-\n-\t      if ((GET_CODE (src) == ASHIFT\n-\t\t   || GET_CODE (src) == ASHIFTRT\n-\t\t   || GET_CODE (src) == LSHIFTRT)\n-\t\t  && !CONST_INT_P (XEXP (src, 1))\n-\t\t  && reg_or_subregno (XEXP (src, 1)) == regno)\n-\t\tcount_reg = true;\n-\t    }\n-\n \tstart_sequence ();\n-\tif (count_reg)\n-\t  {\n-\t    rtx qreg = gen_lowpart (QImode, reg);\n-\t    rtx tmp = gen_reg_rtx (SImode);\n \n-\t    if (TARGET_ZERO_EXTEND_WITH_AND\n-\t\t&& optimize_function_for_speed_p (cfun))\n-\t      {\n-\t\temit_move_insn (tmp, const0_rtx);\n-\t\temit_insn (gen_movstrictqi\n-\t\t\t   (gen_lowpart (QImode, tmp), qreg));\n-\t      }\n-\t    else\n-\t      emit_insn (gen_rtx_SET\n-\t\t\t (tmp, gen_rtx_ZERO_EXTEND (SImode, qreg)));\n-\n-\t    if (!TARGET_INTER_UNIT_MOVES_TO_VEC)\n-\t      {\n-\t\trtx slot = assign_386_stack_local (SImode, SLOT_STV_TEMP);\n-\t\temit_move_insn (slot, tmp);\n-\t\ttmp = copy_rtx (slot);\n-\t      }\n-\n-\t    emit_insn (gen_zero_extendsidi2 (vreg, tmp));\n-\t  }\n-\telse if (!TARGET_INTER_UNIT_MOVES_TO_VEC)\n+\tif (!TARGET_INTER_UNIT_MOVES_TO_VEC)\n \t  {\n \t    rtx tmp = assign_386_stack_local (DImode, SLOT_STV_TEMP);\n \t    emit_move_insn (adjust_address (tmp, SImode, 0),\n@@ -1889,25 +1830,8 @@ dimode_scalar_chain::make_vector_copies (unsigned regno)\n     if (bitmap_bit_p (insns, DF_REF_INSN_UID (ref)))\n       {\n \trtx_insn *insn = DF_REF_INSN (ref);\n-\tif (count_reg)\n-\t  {\n-\t    rtx def_set = single_set (insn);\n-\t    gcc_assert (def_set);\n \n-\t    rtx src = SET_SRC (def_set);\n-\n-\t    if ((GET_CODE (src) == ASHIFT\n-\t\t || GET_CODE (src) == ASHIFTRT\n-\t\t || GET_CODE (src) == LSHIFTRT)\n-\t\t&& !CONST_INT_P (XEXP (src, 1))\n-\t\t&& reg_or_subregno (XEXP (src, 1)) == regno)\n-\t      {\n-\t\tXEXP (src, 0) = replace_with_subreg (XEXP (src, 0), reg, reg);\n-\t\tXEXP (src, 1) = vreg;\n-\t      }\n-\t  }\n-\telse\n-\t  replace_with_subreg_in_insn (insn, reg, vreg);\n+\treplace_with_subreg_in_insn (insn, reg, vreg);\n \n \tif (dump_file)\n \t  fprintf (dump_file, \"  Replaced r%d with r%d in insn %d\\n\",\n@@ -2010,43 +1934,7 @@ dimode_scalar_chain::convert_reg (unsigned regno)\n \t    rtx src = SET_SRC (def_set);\n \t    rtx dst = SET_DEST (def_set);\n \n-\t    if ((GET_CODE (src) == ASHIFT\n-\t\t || GET_CODE (src) == ASHIFTRT\n-\t\t || GET_CODE (src) == LSHIFTRT)\n-\t\t&& !CONST_INT_P (XEXP (src, 1))\n-\t\t&& reg_or_subregno (XEXP (src, 1)) == regno)\n-\t      {\n-\t\trtx tmp2 = gen_reg_rtx (V2DImode);\n-\n-\t\tstart_sequence ();\n-\n-\t\tif (TARGET_SSE4_1)\n-\t\t  emit_insn (gen_sse4_1_zero_extendv2qiv2di2\n-\t\t\t     (tmp2, gen_rtx_SUBREG (V16QImode, reg, 0)));\n-\t\telse\n-\t\t  {\n-\t\t    rtx vec_cst\n-\t\t      = gen_rtx_CONST_VECTOR (V2DImode,\n-\t\t\t\t\t      gen_rtvec (2, GEN_INT (0xff),\n-\t\t\t\t\t\t\t const0_rtx));\n-\t\t    vec_cst\n-\t\t      = validize_mem (force_const_mem (V2DImode, vec_cst));\n-\n-\t\t    emit_insn (gen_rtx_SET\n-\t\t\t       (tmp2,\n-\t\t\t\tgen_rtx_AND (V2DImode,\n-\t\t\t\t\t     gen_rtx_SUBREG (V2DImode, reg, 0),\n-\t\t\t\t\t     vec_cst)));\n-\t\t  }\n-\t\trtx_insn *seq = get_insns ();\n-\t\tend_sequence ();\n-\n-\t\temit_insn_before (seq, insn);\n-\n-\t\tXEXP (src, 0) = replace_with_subreg (XEXP (src, 0), reg, reg);\n-\t\tXEXP (src, 1) = gen_rtx_SUBREG (DImode, tmp2, 0);\n-\t      }\n-\t    else if (!MEM_P (dst) || !REG_P (src))\n+\t    if (!MEM_P (dst) || !REG_P (src))\n \t      replace_with_subreg_in_insn (insn, reg, reg);\n \n \t    bitmap_clear_bit (conv, INSN_UID (insn));"}, {"sha": "d36dedfe3d76a497866718770359a8e3c4a1e848", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f401d62362d405ea8751b10581cf8eb5921ff4d8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f401d62362d405ea8751b10581cf8eb5921ff4d8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f401d62362d405ea8751b10581cf8eb5921ff4d8", "patch": "@@ -1,3 +1,12 @@\n+2019-04-02  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/89902\n+\tPR target/89903\n+\t* gcc.target/i386/pr70799-4.c: Remove.\n+\t* gcc.target/i386/pr70799-5.c: Remove.\n+\t* gcc.target/i386/pr89902.c: New test.\n+\t* gcc.target/i386/pr89903.c: Ditto.\n+\n 2019-04-02  Andrey Belevantsev  <abel@ispras.ru>\n \n \tPR rtl-optimization/84206"}, {"sha": "3e415d590b86c4c1bca12f2fef797f472b4e4f46", "filename": "gcc/testsuite/gcc.target/i386/pr70799-4.c", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fb8055edde15e304f77fbac2c2f317a5a44d6e9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70799-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fb8055edde15e304f77fbac2c2f317a5a44d6e9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70799-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70799-4.c?ref=6fb8055edde15e304f77fbac2c2f317a5a44d6e9", "patch": "@@ -1,17 +0,0 @@\n-/* PR target/pr70799 */\n-/* { dg-do compile { target ia32 } } */\n-/* { dg-options \"-O2 -march=slm -mno-stackrealign\" } */\n-/* { dg-final { scan-assembler \"psllq\" } } */\n-/* { dg-final { scan-assembler \"psrlq\" } } */\n-\n-unsigned long long a, b;\n-\n-void test1 (int c)\n-{\n-  a = b << c;\n-}\n-\n-void test2 (int c)\n-{\n-  a = b >> c;\n-}"}, {"sha": "ea17071a1f4e5fa675315010d4c9b9f5c8a57377", "filename": "gcc/testsuite/gcc.target/i386/pr70799-5.c", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fb8055edde15e304f77fbac2c2f317a5a44d6e9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70799-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fb8055edde15e304f77fbac2c2f317a5a44d6e9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70799-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70799-5.c?ref=6fb8055edde15e304f77fbac2c2f317a5a44d6e9", "patch": "@@ -1,17 +0,0 @@\n-/* PR target/pr70799 */\n-/* { dg-do compile { target ia32 } } */\n-/* { dg-options \"-O2 -march=slm -mavx512vl -mno-stackrealign\" } */\n-/* { dg-final { scan-assembler \"psllq\" } } */\n-/* { dg-final { scan-assembler \"psraq\" } } */\n-\n-long long a, b;\n-\n-void test1 (int c)\n-{\n-  a = b << c;\n-}\n-\n-void test2 (int c)\n-{\n-  a = b >> c;\n-}"}, {"sha": "30c95bc2a3ac533cce2220edf29b08a8de96aab4", "filename": "gcc/testsuite/gcc.target/i386/pr89902.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f401d62362d405ea8751b10581cf8eb5921ff4d8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89902.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f401d62362d405ea8751b10581cf8eb5921ff4d8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89902.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89902.c?ref=f401d62362d405ea8751b10581cf8eb5921ff4d8", "patch": "@@ -0,0 +1,13 @@\n+/* PR target/89902 */\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-O2 -fno-tree-coalesce-vars -mavx512bitalg\" } */\n+\n+void bar (void);\n+\n+int\n+foo (long long x)\n+{\n+  x <<= (char) x;\n+  bar ();\n+  return x;\n+}"}, {"sha": "03dccacfbb9b2eafe420f321c4f660855ee04368", "filename": "gcc/testsuite/gcc.target/i386/pr89903.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f401d62362d405ea8751b10581cf8eb5921ff4d8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89903.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f401d62362d405ea8751b10581cf8eb5921ff4d8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89903.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89903.c?ref=f401d62362d405ea8751b10581cf8eb5921ff4d8", "patch": "@@ -0,0 +1,14 @@\n+/* PR target/89903 */\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-O2 -march=skylake\" } */\n+\n+int a, b;\n+\n+void\n+foo (void)\n+{\n+  unsigned long long d = 983040;\n+  d += a;\n+  d >>= (short) d;\n+  b = d;\n+}"}]}