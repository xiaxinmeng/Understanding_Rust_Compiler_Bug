{"sha": "29d9ed9799340b4b3cb2ff9f3d4da07c2f22dbe2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjlkOWVkOTc5OTM0MGI0YjNjYjJmZjlmM2Q0ZGEwN2MyZjIyZGJlMg==", "commit": {"author": {"name": "Nathan C. Myers", "email": "ncm-nospam@cantrip.org", "date": "2003-06-25T18:27:53Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-06-25T18:27:53Z"}, "message": "streambuf.tcc (sbumpc, [...]): Move inline, from here...\n\n2003-06-25  Nathan C. Myers  <ncm-nospam@cantrip.org>\n\n\t* include/bits/streambuf.tcc (sbumpc, sputbackc, sungetc,\n\tsputc): Move inline, from here...\n\t* include/std/std_streambuf.h: ... to here.\n\n\t* include/std/std_streambuf.h (snextc, sbumpc, sgetc,\n\tsputbackc, sungetc, sputc): Use __builtin_expect.\n\nFrom-SVN: r68486", "tree": {"sha": "958806b73621b764f86c411b54e706c2fb5a878f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/958806b73621b764f86c411b54e706c2fb5a878f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29d9ed9799340b4b3cb2ff9f3d4da07c2f22dbe2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29d9ed9799340b4b3cb2ff9f3d4da07c2f22dbe2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29d9ed9799340b4b3cb2ff9f3d4da07c2f22dbe2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29d9ed9799340b4b3cb2ff9f3d4da07c2f22dbe2/comments", "author": null, "committer": null, "parents": [{"sha": "b1dcf523e99275de2fa402ef3c2b602f95c84c43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1dcf523e99275de2fa402ef3c2b602f95c84c43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1dcf523e99275de2fa402ef3c2b602f95c84c43"}], "stats": {"total": 135, "additions": 63, "deletions": 72}, "files": [{"sha": "2a494a148b93fa2d0d3289c784f3590aecdf743f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d9ed9799340b4b3cb2ff9f3d4da07c2f22dbe2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d9ed9799340b4b3cb2ff9f3d4da07c2f22dbe2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=29d9ed9799340b4b3cb2ff9f3d4da07c2f22dbe2", "patch": "@@ -1,3 +1,12 @@\n+2003-06-25  Nathan C. Myers  <ncm-nospam@cantrip.org>\n+\n+\t* include/bits/streambuf.tcc (sbumpc, sputbackc, sungetc,\n+\tsputc): Move inline, from here...\n+\t* include/std/std_streambuf.h: ... to here.\n+\n+\t* include/std/std_streambuf.h (snextc, sbumpc, sgetc,\n+\tsputbackc, sungetc, sputc): Use __builtin_expect.\n+\n 2003-06-24  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* docs/doxygen/mainpage.html:  Use a useful title."}, {"sha": "a16169ad5efbfd6aa638ea68018594daf523e8b2", "filename": "libstdc++-v3/include/bits/streambuf.tcc", "status": "modified", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d9ed9799340b4b3cb2ff9f3d4da07c2f22dbe2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d9ed9799340b4b3cb2ff9f3d4da07c2f22dbe2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc?ref=29d9ed9799340b4b3cb2ff9f3d4da07c2f22dbe2", "patch": "@@ -39,72 +39,6 @@\n \n namespace std \n {\n-  template<typename _CharT, typename _Traits>\n-    typename basic_streambuf<_CharT, _Traits>::int_type\n-    basic_streambuf<_CharT, _Traits>::\n-    sbumpc()\n-    {\n-      int_type __ret;\n-      if (this->gptr() < this->egptr())\n-\t{\n-\t  __ret = traits_type::to_int_type(*this->gptr());\n-\t  this->gbump(1);\n-\t}\n-      else \n-\t__ret = this->uflow();\n-      return __ret;\n-    }\n-\n-  template<typename _CharT, typename _Traits>\n-    typename basic_streambuf<_CharT, _Traits>::int_type\n-    basic_streambuf<_CharT, _Traits>::\n-    sputbackc(char_type __c) \n-    {\n-      int_type __ret;\n-      const bool __testpos = this->eback() < this->gptr();\n-      if (!__testpos || !traits_type::eq(__c, this->gptr()[-1]))\n-\t__ret = this->pbackfail(traits_type::to_int_type(__c));\n-      else \n-\t{\n-\t  this->gbump(-1);\n-\t  __ret = traits_type::to_int_type(*this->gptr());\n-\t}\n-      return __ret;\n-    }\n-  \n-  template<typename _CharT, typename _Traits>\n-    typename basic_streambuf<_CharT, _Traits>::int_type\n-    basic_streambuf<_CharT, _Traits>::\n-    sungetc()\n-    {\n-      int_type __ret;\n-      if (this->eback() < this->gptr())\n-\t{\n-\t  this->gbump(-1);\n-\t  __ret = traits_type::to_int_type(*this->gptr());\n-\t}\n-      else \n-\t__ret = this->pbackfail();\n-      return __ret;\n-    }\n-\n-  template<typename _CharT, typename _Traits>\n-    typename basic_streambuf<_CharT, _Traits>::int_type\n-    basic_streambuf<_CharT, _Traits>::\n-    sputc(char_type __c)\n-    {\n-      int_type __ret;\n-      if (this->pptr() < this->epptr())\n-\t{\n-\t  *this->pptr() = __c;\n-\t  this->pbump(1);\n-\t  __ret = traits_type::to_int_type(__c);\n-\t}\n-      else\n-\t__ret = this->overflow(traits_type::to_int_type(__c));\n-      return __ret;\n-    }\n-\n   template<typename _CharT, typename _Traits>\n     streamsize\n     basic_streambuf<_CharT, _Traits>::"}, {"sha": "bf6aa4282801816b317c9b31bf69cf9d9a476d86", "filename": "libstdc++-v3/include/std/std_streambuf.h", "status": "modified", "additions": 54, "deletions": 6, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d9ed9799340b4b3cb2ff9f3d4da07c2f22dbe2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d9ed9799340b4b3cb2ff9f3d4da07c2f22dbe2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h?ref=29d9ed9799340b4b3cb2ff9f3d4da07c2f22dbe2", "patch": "@@ -287,7 +287,8 @@ namespace std\n       snextc()\n       {\n \tint_type __ret = traits_type::eof();\n-\tif (!traits_type::eq_int_type(this->sbumpc(), __ret))\n+\tif (__builtin_expect(!traits_type::eq_int_type(this->sbumpc(), \n+\t\t\t\t\t\t       __ret), true))\n \t  __ret = this->sgetc();\n \treturn __ret;\n       }\n@@ -301,7 +302,18 @@ namespace std\n        *  @c uflow().\n       */\n       int_type \n-      sbumpc();\n+      sbumpc()\n+      {\n+\tint_type __ret;\n+\tif (__builtin_expect(this->gptr() < this->egptr(), true))\n+\t  {\n+\t    __ret = traits_type::to_int_type(*this->gptr());\n+\t    this->gbump(1);\n+\t  }\n+\telse \n+\t  __ret = this->uflow();\n+\treturn __ret;\n+      }\n \n       /**\n        *  @brief  Getting the next character.\n@@ -315,7 +327,7 @@ namespace std\n       sgetc()\n       {\n \tint_type __ret;\n-\tif (this->gptr() < this->egptr())\n+\tif (__builtin_expect(this->gptr() < this->egptr(), true))\n \t  __ret = traits_type::to_int_type(*this->gptr());\n \telse \n \t  __ret = this->underflow();\n@@ -345,7 +357,20 @@ namespace std\n        *  fetched from the input stream will be @a c.\n       */\n       int_type \n-      sputbackc(char_type __c);\n+      sputbackc(char_type __c)\n+      {\n+\tint_type __ret;\n+\tconst bool __testpos = this->eback() < this->gptr();\n+\tif (__builtin_expect(!__testpos || \n+\t\t\t     !traits_type::eq(__c, this->gptr()[-1]), false))\n+\t  __ret = this->pbackfail(traits_type::to_int_type(__c));\n+\telse \n+\t  {\n+\t    this->gbump(-1);\n+\t    __ret = traits_type::to_int_type(*this->gptr());\n+\t  }\n+\treturn __ret;\n+      }\n \n       /**\n        *  @brief  Moving backwards in the input stream.\n@@ -357,7 +382,18 @@ namespace std\n        *  \"gotten\".\n       */\n       int_type \n-      sungetc();\n+      sungetc()\n+      {\n+\tint_type __ret;\n+\tif (__builtin_expect(this->eback() < this->gptr(), true))\n+\t  {\n+\t    this->gbump(-1);\n+\t    __ret = traits_type::to_int_type(*this->gptr());\n+\t  }\n+\telse \n+\t  __ret = this->pbackfail();\n+\treturn __ret;\n+      }\n \n       // [27.5.2.2.5] put area\n       /**\n@@ -373,7 +409,19 @@ namespace std\n        *  position is not available, returns @c overflow(c).\n       */\n       int_type \n-      sputc(char_type __c);\n+      sputc(char_type __c)\n+      {\n+\tint_type __ret;\n+\tif (__builtin_expect(this->pptr() < this->epptr(), true))\n+\t  {\n+\t    *this->pptr() = __c;\n+\t    this->pbump(1);\n+\t    __ret = traits_type::to_int_type(__c);\n+\t  }\n+\telse\n+\t  __ret = this->overflow(traits_type::to_int_type(__c));\n+\treturn __ret;\n+      }\n \n       /**\n        *  @brief  Entry point for all single-character output functions."}]}