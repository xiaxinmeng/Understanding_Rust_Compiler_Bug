{"sha": "8c157f90f945fbaa356d381f19a43dd712168673", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGMxNTdmOTBmOTQ1ZmJhYTM1NmQzODFmMTlhNDNkZDcxMjE2ODY3Mw==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2010-08-22T16:23:38Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2010-08-22T16:23:38Z"}, "message": "re PR boehm-gc/34544 (pthread_default_stacksize_np failed.)\n\n\tPR boehm-gc/34544\n\t* gthr-posix.h (__gthread_active_init): Delete.\n\t(__gthread_active_p): Do activity check here.\n\tDon't include errno.h on hppa-hpux.  Update comment.\n\t* gthr-posix95.h (__gthread_active_init): Delete.\n\t(__gthread_active_p): Do activity check here.\n\tDon't include errno.h on hppa-hpux.  Update comment.\n\t* config.gcc (hppa[12]*-*-hpux11*): Define extra_parts.\n\t* config/pa/pa64-hpux.h (LIB_SPEC): When -static is specified, only\n\tadd -lpthread when -mt or -pthread is specified.\n\t* config/pa/pa-hpux11.h (LIB_SPEC): likewise.\n\t(LINK_GCC_C_SEQUENCE_SPEC): Define.\n\t* config/pa/t-pa-hpux11 (LIBGCCSTUB_OBJS): Define.\n\t(stublib.c, pthread_default_stacksize_np-stub.o,\n\tpthread_mutex_lock-stub.o, pthread_mutex_unlock-stub.o,\n\t$(T)libgcc_stub.a): Add methods.\n\t* config/pa/t-pa64 (LIBGCCSTUB_OBJS): Add pthread stubs.\n\t(stublib.c, pthread_default_stacksize_np-stub.o,\n\tpthread_mutex_lock-stub.o, pthread_mutex_unlock-stub.o): Add methods.\n\t* config/pa/stublib.c (pthread_default_stacksize_np, pthread_mutex_lock,\n\tpthread_mutex_unlock): New stubs.\n\nFrom-SVN: r163461", "tree": {"sha": "c172392bd61f9817efc08bc65e8eeb051391b0ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c172392bd61f9817efc08bc65e8eeb051391b0ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c157f90f945fbaa356d381f19a43dd712168673", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c157f90f945fbaa356d381f19a43dd712168673", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c157f90f945fbaa356d381f19a43dd712168673", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c157f90f945fbaa356d381f19a43dd712168673/comments", "author": null, "committer": null, "parents": [{"sha": "11aa2577399fcd9ed88834ceab7359c3872f7bb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11aa2577399fcd9ed88834ceab7359c3872f7bb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11aa2577399fcd9ed88834ceab7359c3872f7bb7"}], "stats": {"total": 215, "additions": 144, "deletions": 71}, "files": [{"sha": "13eb21bf6dcceb6b3c4907ab867fbff9669faa99", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c157f90f945fbaa356d381f19a43dd712168673/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c157f90f945fbaa356d381f19a43dd712168673/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c157f90f945fbaa356d381f19a43dd712168673", "patch": "@@ -1,3 +1,27 @@\n+2010-08-22  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\tPR boehm-gc/34544\n+\t* gthr-posix.h (__gthread_active_init): Delete.\n+\t(__gthread_active_p): Do activity check here.\n+\tDon't include errno.h on hppa-hpux.  Update comment.\n+\t* gthr-posix95.h (__gthread_active_init): Delete.\n+\t(__gthread_active_p): Do activity check here.\n+\tDon't include errno.h on hppa-hpux.  Update comment.\n+\t* config.gcc (hppa[12]*-*-hpux11*): Define extra_parts.\n+\t* config/pa/pa64-hpux.h (LIB_SPEC): When -static is specified, only\n+\tadd -lpthread when -mt or -pthread is specified.\n+\t* config/pa/pa-hpux11.h (LIB_SPEC): likewise.\n+\t(LINK_GCC_C_SEQUENCE_SPEC): Define.\n+\t* config/pa/t-pa-hpux11 (LIBGCCSTUB_OBJS): Define.\n+\t(stublib.c, pthread_default_stacksize_np-stub.o,\n+\tpthread_mutex_lock-stub.o, pthread_mutex_unlock-stub.o,\n+\t$(T)libgcc_stub.a): Add methods.\n+\t* config/pa/t-pa64 (LIBGCCSTUB_OBJS): Add pthread stubs.\n+\t(stublib.c, pthread_default_stacksize_np-stub.o,\n+\tpthread_mutex_lock-stub.o, pthread_mutex_unlock-stub.o): Add methods.\n+\t* config/pa/stublib.c (pthread_default_stacksize_np, pthread_mutex_lock,\n+\tpthread_mutex_unlock): New stubs.\n+\n 2010-08-22  Joseph Myers  <joseph@codesourcery.com>\n \n \t* Makefile.in (gccspec.o, cppspec.o): Update dependencies."}, {"sha": "148c99b815117dc0d503d5eb7165ff778811c645", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c157f90f945fbaa356d381f19a43dd712168673/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c157f90f945fbaa356d381f19a43dd712168673/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=8c157f90f945fbaa356d381f19a43dd712168673", "patch": "@@ -1106,6 +1106,7 @@ hppa[12]*-*-hpux11*)\n \telse\n \t    tmake_file=\"$tmake_file pa/t-slibgcc-dwarf-ver\"\n \tfi\n+\textra_parts=\"libgcc_stub.a\"\n \tcase x${enable_threads} in\n \tx | xyes | xposix )\n \t\tthread_file=posix"}, {"sha": "dd9f9b565926d85c9e4da29498bcacc7ebbdc0a7", "filename": "gcc/config/pa/pa-hpux11.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c157f90f945fbaa356d381f19a43dd712168673/gcc%2Fconfig%2Fpa%2Fpa-hpux11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c157f90f945fbaa356d381f19a43dd712168673/gcc%2Fconfig%2Fpa%2Fpa-hpux11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux11.h?ref=8c157f90f945fbaa356d381f19a43dd712168673", "patch": "@@ -121,11 +121,16 @@ along with GCC; see the file COPYING3.  If not see\n #undef LIB_SPEC\n #define LIB_SPEC \\\n   \"%{!shared:\\\n-     %{static|mt|pthread:%{fopenmp:%{static:-a archive_shared} -lrt\\\n-       %{static:-a archive}} -lpthread} -lc\\\n+     %{fopenmp:%{static:-a archive_shared} -lrt %{static:-a archive}}\\\n+     %{mt|pthread:-lpthread} -lc\\\n      %{static:%{!nolibdld:-a archive_shared -ldld -a archive -lc}}}\\\n    %{shared:%{mt|pthread:-lpthread}}\"\n \n+/* The libgcc_stub.a library needs to come last.  */\n+#undef LINK_GCC_C_SEQUENCE_SPEC\n+#define LINK_GCC_C_SEQUENCE_SPEC \\\n+  \"%G %L %G %{!nostdlib:%{!nodefaultlibs:%{!shared:-lgcc_stub}}}\"\n+\n #undef STARTFILE_SPEC\n #define STARTFILE_SPEC \\\n   \"%{!shared:%{pg:gcrt0%O%s}%{!pg:%{p:mcrt0%O%s}%{!p:crt0%O%s}} \\"}, {"sha": "5132b2fe5e437cffd2b46b2a416dca39f026afe2", "filename": "gcc/config/pa/pa64-hpux.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c157f90f945fbaa356d381f19a43dd712168673/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c157f90f945fbaa356d381f19a43dd712168673/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h?ref=8c157f90f945fbaa356d381f19a43dd712168673", "patch": "@@ -59,35 +59,35 @@ along with GCC; see the file COPYING3.  If not see\n #if ((TARGET_DEFAULT | TARGET_CPU_DEFAULT) & MASK_GNU_LD)\n #define LIB_SPEC \\\n   \"%{!shared:\\\n-     %{!p:%{!pg:%{static|mt|pthread:%{fopenmp:%{static:-a shared} -lrt\\\n-\t\t  %{static:-a archive}} -lpthread} -lc\\\n+     %{!p:%{!pg:%{fopenmp:%{static:-a shared} -lrt %{static:-a archive}}\\\n+\t    %{mt|pthread:-lpthread} -lc\\\n \t    %{static:%{!nolibdld:-a shared -ldld -a archive -lc}}}}\\\n      %{p:%{!pg:%{static:%{!mhp-ld:-a shared}%{mhp-ld:-a archive_shared}}\\\n \t   -lprof %{static:-a archive}\\\n-\t   %{static|mt|pthread:%{fopenmp:%{static:-a shared} -lrt\\\n-\t     %{static:-a archive}} -lpthread} -lc\\\n+\t   %{fopenmp:%{static:-a shared} -lrt %{static:-a archive}}\\\n+\t   %{mt|pthread:-lpthread} -lc\\\n \t   %{static:%{!nolibdld:-a shared -ldld -a archive -lc}}}}\\\n      %{pg:%{static:%{!mhp-ld:-a shared}%{mhp-ld:-a archive_shared}}\\\n        -lgprof %{static:-a archive}\\\n-       %{static|mt|pthread:%{fopenmp:%{static:-a shared} -lrt\\\n-\t %{static:-a archive}} -lpthread} -lc\\\n+       %{fopenmp:%{static:-a shared} -lrt %{static:-a archive}}\\\n+       %{mt|pthread:-lpthread} -lc\\\n        %{static:%{!nolibdld:-a shared -ldld -a archive -lc}}}}\\\n    %{shared:%{mt|pthread:-lpthread}}\"\n #else\n #define LIB_SPEC \\\n   \"%{!shared:\\\n-     %{!p:%{!pg:%{static|mt|pthread:%{fopenmp:%{static:-a shared} -lrt\\\n-\t\t  %{static:-a archive}} -lpthread} -lc\\\n+     %{!p:%{!pg:%{fopenmp:%{static:-a shared} -lrt %{static:-a archive}}\\\n+\t    %{mt|pthread:-lpthread} -lc\\\n \t    %{static:%{!nolibdld:-a shared -ldld -a archive -lc}}}}\\\n      %{p:%{!pg:%{static:%{mgnu-ld:-a shared}%{!mgnu-ld:-a archive_shared}}\\\n \t   -lprof %{static:-a archive}\\\n-\t   %{static|mt|pthread:%{fopenmp:%{static:-a shared} -lrt\\\n-\t     %{static:-a archive}} -lpthread} -lc\\\n+\t   %{fopenmp:%{static:-a shared} -lrt %{static:-a archive}}\\\n+\t   %{mt|pthread:-lpthread} -lc\\\n \t   %{static:%{!nolibdld:-a shared -ldld -a archive -lc}}}}\\\n      %{pg:%{static:%{mgnu-ld:-a shared}%{!mgnu-ld:-a archive_shared}}\\\n        -lgprof %{static:-a archive}\\\n-       %{static|mt|pthread:%{fopenmp:%{static:-a shared} -lrt\\\n-\t %{static:-a archive}} -lpthread} -lc\\\n+       %{fopenmp:%{static:-a shared} -lrt %{static:-a archive}}\\\n+       %{mt|pthread:-lpthread} -lc\\\n        %{static:%{!nolibdld:-a shared -ldld -a archive -lc}}}}\\\n    %{shared:%{mt|pthread:-lpthread}}\"\n #endif"}, {"sha": "bcf0a37c452ccbfabf797b05708e534a925a7b5d", "filename": "gcc/config/pa/stublib.c", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c157f90f945fbaa356d381f19a43dd712168673/gcc%2Fconfig%2Fpa%2Fstublib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c157f90f945fbaa356d381f19a43dd712168673/gcc%2Fconfig%2Fpa%2Fstublib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fstublib.c?ref=8c157f90f945fbaa356d381f19a43dd712168673", "patch": "@@ -1,5 +1,5 @@\n /* Stub functions.\n-   Copyright (C) 2006, 2009 Free Software Foundation, Inc.\n+   Copyright (C) 2006, 2009, 2010 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -56,3 +56,33 @@ _Jv_RegisterClasses (void *p)\n {\n }\n #endif\n+\n+#ifdef L_pthread_default_stacksize_np\n+int pthread_default_stacksize_np (unsigned long __attribute__((unused)),\n+\t\t\t\t  unsigned long *);\n+int\n+pthread_default_stacksize_np (unsigned long new, unsigned long *old)\n+{\n+  if (old)\n+    *old = 0;\n+  return 0;\n+}\n+#endif\n+\n+#ifdef L_pthread_mutex_lock\n+int pthread_mutex_lock (void * __attribute__((unused)));\n+int\n+pthread_mutex_lock (void *p)\n+{\n+  return 0;\n+}\n+#endif\n+\n+#ifdef L_pthread_mutex_unlock\n+int pthread_mutex_unlock (void * __attribute__((unused)));\n+int\n+pthread_mutex_unlock (void *p)\n+{\n+  return 0;\n+}\n+#endif"}, {"sha": "15b0a85e166a457acfbb7d39f9f92b20d5b92dcc", "filename": "gcc/config/pa/t-pa-hpux11", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c157f90f945fbaa356d381f19a43dd712168673/gcc%2Fconfig%2Fpa%2Ft-pa-hpux11", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c157f90f945fbaa356d381f19a43dd712168673/gcc%2Fconfig%2Fpa%2Ft-pa-hpux11", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Ft-pa-hpux11?ref=8c157f90f945fbaa356d381f19a43dd712168673", "patch": "@@ -1,2 +1,26 @@\n TARGET_LIBGCC2_CFLAGS = -fPIC -frandom-seed=fixed-seed\n LIB2FUNCS_EXTRA=lib2funcs.asm quadlib.c\n+LIBGCCSTUB_OBJS = pthread_default_stacksize_np-stub.o \\\n+\tpthread_mutex_lock-stub.o \\\n+\tpthread_mutex_unlock-stub.o\n+\n+stublib.c: $(srcdir)/config/pa/stublib.c\n+\trm -f stublib.c\n+\tcp $(srcdir)/config/pa/stublib.c .\n+\n+pthread_default_stacksize_np-stub.o: stublib.c $(GCC_PASSES)\n+\t$(GCC_FOR_TARGET) -c -O2 -DL_pthread_default_stacksize_np stublib.c \\\n+\t  -o pthread_default_stacksize_np-stub.o\n+\n+pthread_mutex_lock-stub.o: stublib.c $(GCC_PASSES)\n+\t$(GCC_FOR_TARGET) -c -O2 -DL_pthread_mutex_lock stublib.c \\\n+\t  -o pthread_mutex_lock-stub.o\n+\n+pthread_mutex_unlock-stub.o: stublib.c $(GCC_PASSES)\n+\t$(GCC_FOR_TARGET) -c -O2 -DL_pthread_mutex_unlock stublib.c \\\n+\t  -o pthread_mutex_unlock-stub.o\n+\n+$(T)libgcc_stub.a: $(LIBGCCSTUB_OBJS)\n+\t-rm -rf $(T)libgcc_stub.a\n+\t$(AR) rc $(T)libgcc_stub.a $(LIBGCCSTUB_OBJS)\n+\t$(RANLIB) $(T)libgcc_stub.a"}, {"sha": "0a4827ee34c517e426b1fb28ae1afb441a1b0676", "filename": "gcc/config/pa/t-pa64", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c157f90f945fbaa356d381f19a43dd712168673/gcc%2Fconfig%2Fpa%2Ft-pa64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c157f90f945fbaa356d381f19a43dd712168673/gcc%2Fconfig%2Fpa%2Ft-pa64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Ft-pa64?ref=8c157f90f945fbaa356d381f19a43dd712168673", "patch": "@@ -1,5 +1,5 @@\n # Copyright (C) 2000, 2001, 2002, 2004, 2006,\n-# 2007 Free Software Foundation, Inc.\n+# 2007, 2010 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -19,7 +19,10 @@\n \n TARGET_LIBGCC2_CFLAGS = -fPIC -Dpa64=1 -DELF=1 -mlong-calls\n LIB2FUNCS_EXTRA = quadlib.c\n-LIBGCCSTUB_OBJS = rfi-stub.o dfi-stub.o jvrc-stub.o cxaf-stub.o\n+LIBGCCSTUB_OBJS = rfi-stub.o dfi-stub.o jvrc-stub.o cxaf-stub.o \\\n+\tpthread_default_stacksize_np-stub.o \\\n+\tpthread_mutex_lock-stub.o \\\n+\tpthread_mutex_unlock-stub.o\n \n stublib.c: $(srcdir)/config/pa/stublib.c\n \trm -f stublib.c\n@@ -41,6 +44,18 @@ jvrc-stub.o: stublib.c $(GCC_PASSES)\n \t$(GCC_FOR_TARGET) -c -O2 -DL_Jv_RegisterClasses stublib.c \\\n \t  -o jvrc-stub.o\n \n+pthread_default_stacksize_np-stub.o: stublib.c $(GCC_PASSES)\n+\t$(GCC_FOR_TARGET) -c -O2 -DL_pthread_default_stacksize_np stublib.c \\\n+\t  -o pthread_default_stacksize_np-stub.o\n+\n+pthread_mutex_lock-stub.o: stublib.c $(GCC_PASSES)\n+\t$(GCC_FOR_TARGET) -c -O2 -DL_pthread_mutex_lock stublib.c \\\n+\t  -o pthread_mutex_lock-stub.o\n+\n+pthread_mutex_unlock-stub.o: stublib.c $(GCC_PASSES)\n+\t$(GCC_FOR_TARGET) -c -O2 -DL_pthread_mutex_unlock stublib.c \\\n+\t  -o pthread_mutex_unlock-stub.o\n+\n $(T)libgcc_stub.a: $(LIBGCCSTUB_OBJS)\n \t-rm -rf $(T)libgcc_stub.a\n \t$(AR) rc $(T)libgcc_stub.a $(LIBGCCSTUB_OBJS)"}, {"sha": "bda43cd33c3dd78594d3e6db44e8c9952deae0c0", "filename": "gcc/gthr-posix.h", "status": "modified", "additions": 14, "deletions": 27, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c157f90f945fbaa356d381f19a43dd712168673/gcc%2Fgthr-posix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c157f90f945fbaa356d381f19a43dd712168673/gcc%2Fgthr-posix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-posix.h?ref=8c157f90f945fbaa356d381f19a43dd712168673", "patch": "@@ -260,47 +260,34 @@ __gthread_active_p (void)\n    calls in shared flavors of the HP-UX C library.  Most of the stubs\n    have no functionality.  The details are described in the \"libc cumulative\n    patch\" for each subversion of HP-UX 11.  There are two special interfaces\n-   provided for checking whether an application is linked to a pthread\n+   provided for checking whether an application is linked to a shared pthread\n    library or not.  However, these interfaces aren't available in early\n-   libc versions.  We also can't use pthread_once as some libc versions\n-   call the init function.  So, we use pthread_create to check whether it\n-   is possible to create a thread or not.  The stub implementation returns\n-   the error number ENOSYS.  */\n+   libpthread libraries.  We also need a test that works for archive\n+   libraries.  We can't use pthread_once as some libc versions call the\n+   init function.  We also can't use pthread_create or pthread_attr_init\n+   as these create a thread and thereby prevent changing the default stack\n+   size.  The function pthread_default_stacksize_np is available in both\n+   the archive and shared versions of libpthread.   It can be used to\n+   determine the default pthread stack size.  There is a stub in some\n+   shared libc versions which returns a zero size if pthreads are not\n+   active.  We provide an equivalent stub to handle cases where libc\n+   doesn't provide one.  */\n \n #if defined(__hppa__) && defined(__hpux__)\n \n-#include <errno.h>\n-\n static volatile int __gthread_active = -1;\n \n-static void __gthread_active_init (void) __attribute__((noinline));\n-static void\n-__gthread_active_init (void)\n-{\n-  static pthread_mutex_t __gthread_active_mutex = PTHREAD_MUTEX_INITIALIZER;\n-  size_t __s;\n-\n-  __gthrw_(pthread_mutex_lock) (&__gthread_active_mutex);\n-  if (__gthread_active < 0)\n-    {\n-      pthread_default_stacksize_np (0, &__s);\n-      __gthread_active = __s ? 1 : 0;\n-    }\n-  __gthrw_(pthread_mutex_unlock) (&__gthread_active_mutex);\n-}\n-\n static inline int\n __gthread_active_p (void)\n {\n   /* Avoid reading __gthread_active twice on the main code path.  */\n   int __gthread_active_latest_value = __gthread_active;\n+  size_t __s;\n \n-  /* This test is not protected to avoid taking a lock on the main code\n-     path so every update of __gthread_active in a threaded program must\n-     be atomic with regard to the result of the test.  */\n   if (__builtin_expect (__gthread_active_latest_value < 0, 0))\n     {\n-      __gthread_active_init ();\n+      pthread_default_stacksize_np (0, &__s);\n+      __gthread_active = __s ? 1 : 0;\n       __gthread_active_latest_value = __gthread_active;\n     }\n "}, {"sha": "2b26f2da59dc44492ee0add652c3f31e49451a0a", "filename": "gcc/gthr-posix95.h", "status": "modified", "additions": 14, "deletions": 27, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c157f90f945fbaa356d381f19a43dd712168673/gcc%2Fgthr-posix95.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c157f90f945fbaa356d381f19a43dd712168673/gcc%2Fgthr-posix95.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-posix95.h?ref=8c157f90f945fbaa356d381f19a43dd712168673", "patch": "@@ -184,47 +184,34 @@ __gthread_active_p (void)\n    calls in shared flavors of the HP-UX C library.  Most of the stubs\n    have no functionality.  The details are described in the \"libc cumulative\n    patch\" for each subversion of HP-UX 11.  There are two special interfaces\n-   provided for checking whether an application is linked to a pthread\n+   provided for checking whether an application is linked to a shared pthread\n    library or not.  However, these interfaces aren't available in early\n-   libc versions.  We also can't use pthread_once as some libc versions\n-   call the init function.  So, we use pthread_create to check whether it\n-   is possible to create a thread or not.  The stub implementation returns\n-   the error number ENOSYS.  */\n+   pthread libraries.  We also need a test that works for archive\n+   libraries.  We can't use pthread_once as some libc versions call the\n+   init function.  We also can't use pthread_create or pthread_attr_init\n+   as these create a thread and thereby prevent changing the default stack\n+   size.  The function pthread_default_stacksize_np is available in both\n+   the archive and shared versions of libpthread.   It can be used to\n+   determine the default pthread stack size.  There is a stub in some\n+   shared libc versions which returns a zero size if pthreads are not\n+   active.  We provide an equivalent stub to handle cases where libc\n+   doesn't provide one.  */\n \n #if defined(__hppa__) && defined(__hpux__)\n \n-#include <errno.h>\n-\n static volatile int __gthread_active = -1;\n \n-static void __gthread_active_init (void) __attribute__((noinline));\n-static void\n-__gthread_active_init (void)\n-{\n-  static pthread_mutex_t __gthread_active_mutex = PTHREAD_MUTEX_INITIALIZER;\n-  size_t __s;\n-\n-  __gthrw_(pthread_mutex_lock) (&__gthread_active_mutex);\n-  if (__gthread_active < 0)\n-    {\n-      pthread_default_stacksize_np (0, &__s);\n-      __gthread_active = __s ? 1 : 0;\n-    }\n-  __gthrw_(pthread_mutex_unlock) (&__gthread_active_mutex);\n-}\n-\n static inline int\n __gthread_active_p (void)\n {\n   /* Avoid reading __gthread_active twice on the main code path.  */\n   int __gthread_active_latest_value = __gthread_active;\n+  size_t __s;\n \n-  /* This test is not protected to avoid taking a lock on the main code\n-     path so every update of __gthread_active in a threaded program must\n-     be atomic with regard to the result of the test.  */\n   if (__builtin_expect (__gthread_active_latest_value < 0, 0))\n     {\n-      __gthread_active_init ();\n+      pthread_default_stacksize_np (0, &__s);\n+      __gthread_active = __s ? 1 : 0;\n       __gthread_active_latest_value = __gthread_active;\n     }\n "}]}