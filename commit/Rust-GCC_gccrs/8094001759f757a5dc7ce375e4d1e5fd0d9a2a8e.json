{"sha": "8094001759f757a5dc7ce375e4d1e5fd0d9a2a8e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA5NDAwMTc1OWY3NTdhNWRjN2NlMzc1ZTRkMWU1ZmQwZDlhMmE4ZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-11-06T20:02:49Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-11-06T20:02:49Z"}, "message": "[AArch64] Pass number of units to aarch64_expand_vec_perm(_const)\n\nThis patch passes the number of units to aarch64_expand_vec_perm\nand aarch64_expand_vec_perm_const, which avoids a to_constant ()\nonce GET_MODE_NUNITS is variable.\n\n2017-11-06  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64-protos.h (aarch64_expand_vec_perm)\n\t(aarch64_expand_vec_perm_const): Take the number of units too.\n\t* config/aarch64/aarch64.c (aarch64_expand_vec_perm)\n\t(aarch64_expand_vec_perm_const): Likewise.\n\t* config/aarch64/aarch64-simd.md (vec_perm_const<mode>)\n\t(vec_perm<mode>): Update accordingly.\n\nReviewed-by: James Greenhalgh <james.greenhalgh@arm.com>\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r254469", "tree": {"sha": "febc464d11da1b18798cc76439d27a731222ba17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/febc464d11da1b18798cc76439d27a731222ba17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8094001759f757a5dc7ce375e4d1e5fd0d9a2a8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8094001759f757a5dc7ce375e4d1e5fd0d9a2a8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8094001759f757a5dc7ce375e4d1e5fd0d9a2a8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8094001759f757a5dc7ce375e4d1e5fd0d9a2a8e/comments", "author": null, "committer": null, "parents": [{"sha": "f5cbabc1ccfe4ac8dc3226553cbc6a8fbe6286a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5cbabc1ccfe4ac8dc3226553cbc6a8fbe6286a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5cbabc1ccfe4ac8dc3226553cbc6a8fbe6286a3"}], "stats": {"total": 37, "additions": 26, "deletions": 11}, "files": [{"sha": "46bffaee9c375f95d77340d6da9ca35f2e830144", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8094001759f757a5dc7ce375e4d1e5fd0d9a2a8e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8094001759f757a5dc7ce375e4d1e5fd0d9a2a8e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8094001759f757a5dc7ce375e4d1e5fd0d9a2a8e", "patch": "@@ -1,3 +1,14 @@\n+2017-11-06  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h (aarch64_expand_vec_perm)\n+\t(aarch64_expand_vec_perm_const): Take the number of units too.\n+\t* config/aarch64/aarch64.c (aarch64_expand_vec_perm)\n+\t(aarch64_expand_vec_perm_const): Likewise.\n+\t* config/aarch64/aarch64-simd.md (vec_perm_const<mode>)\n+\t(vec_perm<mode>): Update accordingly.\n+\n 2017-11-06  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "15c3b46ebef8f305f960e60a8b4e85d8be07e8c7", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8094001759f757a5dc7ce375e4d1e5fd0d9a2a8e/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8094001759f757a5dc7ce375e4d1e5fd0d9a2a8e/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=8094001759f757a5dc7ce375e4d1e5fd0d9a2a8e", "patch": "@@ -471,11 +471,11 @@ tree aarch64_builtin_rsqrt (unsigned int);\n tree aarch64_builtin_vectorized_function (unsigned int, tree, tree);\n \n extern void aarch64_split_combinev16qi (rtx operands[3]);\n-extern void aarch64_expand_vec_perm (rtx target, rtx op0, rtx op1, rtx sel);\n+extern void aarch64_expand_vec_perm (rtx, rtx, rtx, rtx, unsigned int);\n extern bool aarch64_madd_needs_nop (rtx_insn *);\n extern void aarch64_final_prescan_insn (rtx_insn *);\n extern bool\n-aarch64_expand_vec_perm_const (rtx target, rtx op0, rtx op1, rtx sel);\n+aarch64_expand_vec_perm_const (rtx, rtx, rtx, rtx, unsigned int);\n void aarch64_atomic_assign_expand_fenv (tree *, tree *, tree *);\n int aarch64_ccmp_mode_to_code (machine_mode mode);\n "}, {"sha": "9aeeffd27b02901c6bbca7917de592a35b4a2cd5", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8094001759f757a5dc7ce375e4d1e5fd0d9a2a8e/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8094001759f757a5dc7ce375e4d1e5fd0d9a2a8e/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=8094001759f757a5dc7ce375e4d1e5fd0d9a2a8e", "patch": "@@ -5239,7 +5239,7 @@\n   \"TARGET_SIMD\"\n {\n   if (aarch64_expand_vec_perm_const (operands[0], operands[1],\n-\t\t\t\t     operands[2], operands[3]))\n+\t\t\t\t     operands[2], operands[3], <nunits>))\n     DONE;\n   else\n     FAIL;\n@@ -5253,7 +5253,7 @@\n   \"TARGET_SIMD\"\n {\n   aarch64_expand_vec_perm (operands[0], operands[1],\n-\t\t\t   operands[2], operands[3]);\n+\t\t\t   operands[2], operands[3], <nunits>);\n   DONE;\n })\n "}, {"sha": "62ce7d69bf193ad4e1de24a08afecdf4d3d0826d", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8094001759f757a5dc7ce375e4d1e5fd0d9a2a8e/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8094001759f757a5dc7ce375e4d1e5fd0d9a2a8e/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=8094001759f757a5dc7ce375e4d1e5fd0d9a2a8e", "patch": "@@ -13242,11 +13242,14 @@ aarch64_expand_vec_perm_1 (rtx target, rtx op0, rtx op1, rtx sel)\n     }\n }\n \n+/* Expand a vec_perm with the operands given by TARGET, OP0, OP1 and SEL.\n+   NELT is the number of elements in the vector.  */\n+\n void\n-aarch64_expand_vec_perm (rtx target, rtx op0, rtx op1, rtx sel)\n+aarch64_expand_vec_perm (rtx target, rtx op0, rtx op1, rtx sel,\n+\t\t\t unsigned int nelt)\n {\n   machine_mode vmode = GET_MODE (target);\n-  unsigned int nelt = GET_MODE_NUNITS (vmode);\n   bool one_vector_p = rtx_equal_p (op0, op1);\n   rtx mask;\n \n@@ -13602,13 +13605,15 @@ aarch64_expand_vec_perm_const_1 (struct expand_vec_perm_d *d)\n   return false;\n }\n \n-/* Expand a vec_perm_const pattern.  */\n+/* Expand a vec_perm_const pattern with the operands given by TARGET,\n+   OP0, OP1 and SEL.  NELT is the number of elements in the vector.  */\n \n bool\n-aarch64_expand_vec_perm_const (rtx target, rtx op0, rtx op1, rtx sel)\n+aarch64_expand_vec_perm_const (rtx target, rtx op0, rtx op1, rtx sel,\n+\t\t\t       unsigned int nelt)\n {\n   struct expand_vec_perm_d d;\n-  int i, nelt, which;\n+  unsigned int i, which;\n \n   d.target = target;\n   d.op0 = op0;\n@@ -13618,12 +13623,11 @@ aarch64_expand_vec_perm_const (rtx target, rtx op0, rtx op1, rtx sel)\n   gcc_assert (VECTOR_MODE_P (d.vmode));\n   d.testing_p = false;\n \n-  nelt = GET_MODE_NUNITS (d.vmode);\n   d.perm.reserve (nelt);\n   for (i = which = 0; i < nelt; ++i)\n     {\n       rtx e = XVECEXP (sel, 0, i);\n-      int ei = INTVAL (e) & (2 * nelt - 1);\n+      unsigned int ei = INTVAL (e) & (2 * nelt - 1);\n       which |= (ei < nelt ? 1 : 2);\n       d.perm.quick_push (ei);\n     }"}]}