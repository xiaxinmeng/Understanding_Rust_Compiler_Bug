{"sha": "c25f170d2d44ec8ed5424c86743fb5b8360273b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI1ZjE3MGQyZDQ0ZWM4ZWQ1NDI0Yzg2NzQzZmI1YjgzNjAyNzNiMw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2016-04-21T10:06:40Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-21T10:06:40Z"}, "message": "gnat_rm.texi, [...]: Update doc.\n\n        * gnat_rm.texi, gnat_ugn.texi,\n        doc/gnat_ugn/gnat_project_manager.rst,\n        doc/gnat_ugn/building_executable_programs_with_gnat.rst,\n        doc/gnat_ugn/gnat_and_program_execution.rst,\n        doc/gnat_ugn/gnat_utility_programs.rst,\n        doc/gnat_ugn/the_gnat_compilation_model.rst,\n        doc/gnat_rm/implementation_defined_attributes.rst,\n        doc/gnat_rm/standard_and_implementation_defined_restrictions.rst,\n        doc/gnat_rm/implementation_defined_pragmas.rst,\n        doc/gnat_rm/the_gnat_library.rst,\n        doc/gnat_rm/implementation_defined_aspects.rst: Update doc.\n        * doc/Makefile: Cleanups.\n\nFrom-SVN: r235328", "tree": {"sha": "8f493136ecf5e38b8254a8ed55a849b65bf42444", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f493136ecf5e38b8254a8ed55a849b65bf42444"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c25f170d2d44ec8ed5424c86743fb5b8360273b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c25f170d2d44ec8ed5424c86743fb5b8360273b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c25f170d2d44ec8ed5424c86743fb5b8360273b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c25f170d2d44ec8ed5424c86743fb5b8360273b3/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f76647c2ec8c53d40d3f011d35ab2a3691eda62c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f76647c2ec8c53d40d3f011d35ab2a3691eda62c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f76647c2ec8c53d40d3f011d35ab2a3691eda62c"}], "stats": {"total": 2049, "additions": 1130, "deletions": 919}, "files": [{"sha": "3e89814ed8243f102d550b101e7edcdbd5a8ec6a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25f170d2d44ec8ed5424c86743fb5b8360273b3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25f170d2d44ec8ed5424c86743fb5b8360273b3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c25f170d2d44ec8ed5424c86743fb5b8360273b3", "patch": "@@ -1,3 +1,18 @@\n+2016-04-21  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gnat_rm.texi, gnat_ugn.texi,\n+\tdoc/gnat_ugn/gnat_project_manager.rst,\n+\tdoc/gnat_ugn/building_executable_programs_with_gnat.rst,\n+\tdoc/gnat_ugn/gnat_and_program_execution.rst,\n+\tdoc/gnat_ugn/gnat_utility_programs.rst,\n+\tdoc/gnat_ugn/the_gnat_compilation_model.rst,\n+\tdoc/gnat_rm/implementation_defined_attributes.rst,\n+\tdoc/gnat_rm/standard_and_implementation_defined_restrictions.rst,\n+\tdoc/gnat_rm/implementation_defined_pragmas.rst,\n+\tdoc/gnat_rm/the_gnat_library.rst,\n+\tdoc/gnat_rm/implementation_defined_aspects.rst: Update doc.\n+\t* doc/Makefile: Cleanups.\n+\n 2016-04-21  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_pakd.adb, sem_ch13.adb: Minor reformatting."}, {"sha": "df10fca169aba781ea295054e62e0eb23de1346b", "filename": "gcc/ada/doc/Makefile", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25f170d2d44ec8ed5424c86743fb5b8360273b3/gcc%2Fada%2Fdoc%2FMakefile", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25f170d2d44ec8ed5424c86743fb5b8360273b3/gcc%2Fada%2Fdoc%2FMakefile", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2FMakefile?ref=c25f170d2d44ec8ed5424c86743fb5b8360273b3", "patch": "@@ -24,26 +24,23 @@ help:\n \t@echo \"  DOC_NAME.html       to make standalone HTML files\"\n \t@echo \"  DOC_NAME.pdf        to make LaTeX files and run them through pdflatex\"\n \t@echo \"  DOC_NAME.txt        to make text files\"\n-\t@echo \"  DOC_NAME.texinfo    to make Texinfo files\"\n \t@echo \"  DOC_NAME.info       to make info files\"\n+\t@echo \"  DOC_NAME.texinfo    to make Texinfo files\"\n \t@echo \"  DOC_NAME.all        to build DOC_NAME for all previous formats\"\n \t@echo \"  all                 to build all documentations in all formats\"\n \t@echo \"  html-all            same as previous rule but only for HTML format\"\n \t@echo \"  pdf-all             same as previous rule but only for PDF format\"\n \t@echo \"  txt-all             same as previous rule but only for text format\"\n-\t@echo \"  texinfo-all         same as previous rule but only for texinfo format\"\n \t@echo \"  info-all            same as previous rule but only for info format\"\n+\t@echo \"  texinfo-all         same as previous rule but only for texinfo format\"\n \t@echo \"\"\n \t@echo \"DOC_NAME should be a documentation name in the following list:\"\n \t@echo \"  $(DOC_LIST)\"\n \t@echo \"\"\n-\t@echo \"source and location can be overriden using SOURCEDIR and BUILDDIR variables\"\n+\t@echo \"source and location can be overridden using SOURCEDIR and BUILDDIR variables\"\n \n clean:\n-\t-rm -rf $(BUILDDIR)/*/html \\\n-\t\t$(BUILDDIR)/*/pdf \\\n-\t\t$(BUILDDIR)/*/txt \\\n-\t\t$(BUILDDIR)/*/info\n+\t-rm -rf $(BUILDDIR)\n \n %.html:\n \t$(SPHINXBUILD) -b html $(ALLSPHINXOPTS) $(BUILDDIR)/$*/html\n@@ -65,16 +62,23 @@ clean:\n \t$(SPHINXBUILD) -b texinfo $(ALLSPHINXOPTS) $(BUILDDIR)/$*/texinfo\n \tsed -e 's/^@dircategory/@dircategory GNU Ada Tools/g' < $(BUILDDIR)/$*/texinfo/$*.texi > $(BUILDDIR)/../../$*.texi\n \n+.PHONY: html-all\n html-all: $(foreach doc, $(DOC_LIST), $(doc).html)\n \n+.PHONY: pdf-all\n pdf-all: $(foreach doc, $(DOC_LIST), $(doc).pdf)\n \n+.PHONY: txt-all\n txt-all: $(foreach doc, $(DOC_LIST), $(doc).txt)\n \n+.PHONY: info-all\n+info-all: $(foreach doc, $(DOC_LIST), $(doc).info)\n+\n+.PHONY: texinfo-all\n texinfo-all: $(foreach doc, $(DOC_LIST), $(doc).texinfo)\n \n %.all:\n \t$(MAKE) $(foreach fmt, $(FMT_LIST), $*.$(fmt))\n \n-all: $(foreach fmt, $(FMT_LIST), $(fmt).all)\n-\n+.PHONY: all\n+all: $(foreach fmt, $(FMT_LIST), $(fmt)-all)"}, {"sha": "c567548556b675ef52cbf7464f791ea4a3a13b28", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_aspects.rst", "status": "modified", "additions": 54, "deletions": 57, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25f170d2d44ec8ed5424c86743fb5b8360273b3/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_aspects.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25f170d2d44ec8ed5424c86743fb5b8360273b3/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_aspects.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_aspects.rst?ref=c25f170d2d44ec8ed5424c86743fb5b8360273b3", "patch": "@@ -64,14 +64,15 @@ Aspect Abstract_State\n \n .. index:: Abstract_State\n \n-This aspect is equivalent to pragma `Abstract_State`.\n+This aspect is equivalent to :ref:`pragma Abstract_State<Pragma-Abstract_State>`.\n \n Annotate\n ========\n .. index:: Annotate\n \n There are three forms of this aspect (where ID is an identifier,\n-and ARG is a general expression).\n+and ARG is a general expression),\n+corresponding to :ref:`pragma Annotate<Pragma-Annotate>`.\n \n \n \n@@ -90,39 +91,39 @@ Aspect Async_Readers\n ====================\n .. index:: Async_Readers\n \n-This boolean aspect is equivalent to pragma `Async_Readers`.\n+This boolean aspect is equivalent to :ref:`pragma Async_Readers<Pragma-Async_Readers>`.\n \n Aspect Async_Writers\n ====================\n .. index:: Async_Writers\n \n-This boolean aspect is equivalent to pragma `Async_Writers`.\n+This boolean aspect is equivalent to :ref:`pragma Async_Writers<Pragma-Async_Writers>`.\n \n Aspect Constant_After_Elaboration\n =================================\n .. index:: Constant_After_Elaboration\n \n-This aspect is equivalent to pragma `Constant_After_Elaboration`.\n+This aspect is equivalent to :ref:`pragma Constant_After_Elaboration<Pragma-Constant_After_Elaboration>`.\n \n Aspect Contract_Cases\n =====================\n .. index:: Contract_Cases\n \n-This aspect is equivalent to pragma `Contract_Cases`, the sequence\n+This aspect is equivalent to :ref:`pragma Contract_Cases<Pragma-Contract_Cases>`, the sequence\n of clauses being enclosed in parentheses so that syntactically it is an\n aggregate.\n \n Aspect Depends\n ==============\n .. index:: Depends\n \n-This aspect is equivalent to pragma `Depends`.\n+This aspect is equivalent to :ref:`pragma Depends<Pragma-Depends>`.\n \n Aspect Default_Initial_Condition\n ================================\n .. index:: Default_Initial_Condition\n \n-This aspect is equivalent to pragma `Default_Initial_Condition`.\n+This aspect is equivalent to :ref:`pragma Default_Initial_Condition<Pragma-Default_Initial_Condition>`.\n \n Aspect Dimension\n ================\n@@ -227,69 +228,69 @@ Aspect Effective_Reads\n ======================\n .. index:: Effective_Reads\n \n-This aspect is equivalent to pragma `Effective_Reads`.\n+This aspect is equivalent to :ref:`pragma Effective_Reads<Pragma-Effective_Reads>`.\n \n Aspect Effective_Writes\n =======================\n .. index:: Effective_Writes\n \n-This aspect is equivalent to pragma `Effective_Writes`.\n+This aspect is equivalent to :ref:`pragma Effective_Writes<Pragma-Effective_Writes>`.\n \n Aspect Extensions_Visible\n =========================\n .. index:: Extensions_Visible\n \n-This aspect is equivalent to pragma `Extensions_Visible`.\n+This aspect is equivalent to :ref:`pragma Extensions_Visible<Pragma-Extensions_Visible>`.\n \n Aspect Favor_Top_Level\n ======================\n .. index:: Favor_Top_Level\n \n-This boolean aspect is equivalent to pragma `Favor_Top_Level`.\n+This boolean aspect is equivalent to :ref:`pragma Favor_Top_Level<Pragma-Favor_Top_Level>`.\n \n Aspect Ghost\n =============\n .. index:: Ghost\n \n-This aspect is equivalent to pragma `Ghost`.\n+This aspect is equivalent to :ref:`pragma Ghost<Pragma-Ghost>`.\n \n Aspect Global\n =============\n .. index:: Global\n \n-This aspect is equivalent to pragma `Global`.\n+This aspect is equivalent to :ref:`pragma Global<Pragma-Global>`.\n \n Aspect Initial_Condition\n ========================\n .. index:: Initial_Condition\n \n-This aspect is equivalent to pragma `Initial_Condition`.\n+This aspect is equivalent to :ref:`pragma Initial_Condition<Pragma-Initial_Condition>`.\n \n Aspect Initializes\n ==================\n .. index:: Initializes\n \n-This aspect is equivalent to pragma `Initializes`.\n+This aspect is equivalent to :ref:`pragma Initializes<Pragma-Initializes>`.\n \n Aspect Inline_Always\n ====================\n .. index:: Inline_Always\n \n-This boolean aspect is equivalent to pragma `Inline_Always`.\n+This boolean aspect is equivalent to :ref:`pragma Inline_Always<Pragma-Inline_Always>`.\n \n Aspect Invariant\n ================\n .. index:: Invariant\n \n-This aspect is equivalent to pragma `Invariant`. It is a\n+This aspect is equivalent to :ref:`pragma Invariant<Pragma-Invariant>`. It is a\n synonym for the language defined aspect `Type_Invariant` except\n that it is separately controllable using pragma `Assertion_Policy`.\n \n Aspect Invariant'Class\n ======================\n .. index:: Invariant'Class\n \n-This aspect is equivalent to pragma `Type_Invariant_Class`. It is a\n+This aspect is equivalent to :ref:`pragma Type_Invariant_Class<Pragma-Type_Invariant_Class>`. It is a\n synonym for the language defined aspect `Type_Invariant'Class` except\n that it is separately controllable using pragma `Assertion_Policy`.\n \n@@ -350,61 +351,60 @@ Aspect Linker_Section\n =====================\n .. index:: Linker_Section\n \n-This aspect is equivalent to an `Linker_Section` pragma.\n+This aspect is equivalent to :ref:`pragma Linker_Section<Pragma-Linker_Section>`.\n \n Aspect Lock_Free\n ================\n .. index:: Lock_Free\n \n-This boolean aspect is equivalent to pragma `Lock_Free`.\n+This boolean aspect is equivalent to :ref:`pragma Lock_Free<Pragma-Lock_Free>`.\n \n Aspect No_Elaboration_Code_All\n ==============================\n .. index:: No_Elaboration_Code_All\n \n-This aspect is equivalent to a `pragma No_Elaboration_Code_All`\n-statement for a program unit.\n+This aspect is equivalent to :ref:`pragma No_Elaboration_Code_All<Pragma-No_Elaboration_Code_All>`\n+for a program unit.\n \n Aspect No_Tagged_Streams\n ========================\n .. index:: No_Tagged_Streams\n \n-This aspect is equivalent to a `pragma No_Tagged_Streams` with an\n+This aspect is equivalent to :ref:`pragma No_Tagged_Streams<Pragma-No_Tagged_Streams>` with an\n argument specifying a root tagged type (thus this aspect can only be\n applied to such a type).\n \n Aspect Object_Size\n ==================\n .. index:: Object_Size\n \n-This aspect is equivalent to an `Object_Size` attribute definition\n-clause.\n+This aspect is equivalent to :ref:`attribute Object_Size<Attribute-Object_Size>`.\n \n Aspect Obsolescent\n ==================\n .. index:: Obsolsecent\n \n-This aspect is equivalent to an `Obsolescent` pragma. Note that the\n+This aspect is equivalent to :ref:`pragma Obsolescent<Pragma_Obsolescent>`. Note that the\n evaluation of this aspect happens at the point of occurrence, it is not\n delayed until the freeze point.\n \n Aspect Part_Of\n ==============\n .. index:: Part_Of\n \n-This aspect is equivalent to pragma `Part_Of`.\n+This aspect is equivalent to :ref:`pragma Part_Of<Pragma-Part_Of>`.\n \n Aspect Persistent_BSS\n =====================\n .. index:: Persistent_BSS\n \n-This boolean aspect is equivalent to pragma `Persistent_BSS`.\n+This boolean aspect is equivalent to :ref:`pragma Persistent_BSS<Pragma-Persistent_BSS>`.\n \n Aspect Predicate\n ================\n .. index:: Predicate\n \n-This aspect is equivalent to pragma `Predicate`. It is thus\n+This aspect is equivalent to :ref:`pragma Predicate<Pragma-Predicate>`. It is thus\n similar to the language defined aspects `Dynamic_Predicate`\n and `Static_Predicate` except that whether the resulting\n predicate is static or dynamic is controlled by the form of the\n@@ -415,152 +415,149 @@ Aspect Pure_Function\n ====================\n .. index:: Pure_Function\n \n-This boolean aspect is equivalent to pragma `Pure_Function`.\n+This boolean aspect is equivalent to :ref:`pragma Pure_Function<Pragma-Pure_Function>`.\n \n Aspect Refined_Depends\n ======================\n .. index:: Refined_Depends\n \n-This aspect is equivalent to pragma `Refined_Depends`.\n+This aspect is equivalent to :ref:`pragma Refined_Depends<Pragma-Refined_Depends>`.\n \n Aspect Refined_Global\n =====================\n .. index:: Refined_Global\n \n-This aspect is equivalent to pragma `Refined_Global`.\n+This aspect is equivalent to :ref:`pragma Refined_Global<Pragma-Refined_Global>`.\n \n Aspect Refined_Post\n ===================\n .. index:: Refined_Post\n \n-This aspect is equivalent to pragma `Refined_Post`.\n+This aspect is equivalent to :ref:`pragma Refined_Post<Pragma-Refined_Post>`.\n \n Aspect Refined_State\n ====================\n .. index:: Refined_State\n \n-This aspect is equivalent to pragma `Refined_State`.\n+This aspect is equivalent to :ref:`pragma Refined_State<Pragma-Refined_State>`.\n \n Aspect Remote_Access_Type\n =========================\n .. index:: Remote_Access_Type\n \n-This aspect is equivalent to pragma `Remote_Access_Type`.\n+This aspect is equivalent to :ref:`pragma Remote_Access_Type<Pragma-Remote_Access_Type>`.\n \n Aspect Scalar_Storage_Order\n ===========================\n .. index:: Scalar_Storage_Order\n \n-This aspect is equivalent to a `Scalar_Storage_Order`\n-attribute definition clause.\n+This aspect is equivalent to a :ref:`attribute Scalar_Storage_Order<Attribute-Scalar_Storage_Order>`.\n \n Aspect Shared\n =============\n .. index:: Shared\n \n-This boolean aspect is equivalent to pragma `Shared`,\n+This boolean aspect is equivalent to :ref:`pragma Shared<Pragma-Shared>`\n and is thus a synonym for aspect `Atomic`.\n \n Aspect Simple_Storage_Pool\n ==========================\n .. index:: Simple_Storage_Pool\n \n-This aspect is equivalent to a `Simple_Storage_Pool`\n-attribute definition clause.\n+This aspect is equivalent to :ref:`attribute Simple_Storage_Pool<Attribute_Simple_Storage_Pool>`.\n \n Aspect Simple_Storage_Pool_Type\n ===============================\n .. index:: Simple_Storage_Pool_Type\n \n-This boolean aspect is equivalent to pragma `Simple_Storage_Pool_Type`.\n+This boolean aspect is equivalent to :ref:`pragma Simple_Storage_Pool_Type<Pragma-Simple_Storage_Pool_Type>`.\n \n Aspect SPARK_Mode\n =================\n .. index:: SPARK_Mode\n \n-This aspect is equivalent to pragma `SPARK_Mode` and\n+This aspect is equivalent to :ref:`pragma SPARK_Mode<Pragma-SPARK_Mode>` and\n may be specified for either or both of the specification and body\n of a subprogram or package.\n \n Aspect Suppress_Debug_Info\n ==========================\n .. index:: Suppress_Debug_Info\n \n-This boolean aspect is equivalent to pragma `Suppress_Debug_Info`.\n+This boolean aspect is equivalent to :ref:`pragma Suppress_Debug_Info<Pragma-Suppress_Debug_Info>`.\n \n Aspect Suppress_Initialization\n ==============================\n .. index:: Suppress_Initialization\n \n-This boolean aspect is equivalent to pragma `Suppress_Initialization`.\n+This boolean aspect is equivalent to :ref:`pragma Suppress_Initialization<Pragma-Suppress_Initialization>`.\n \n Aspect Test_Case\n ================\n .. index:: Test_Case\n \n-This aspect is equivalent to pragma `Test_Case`.\n+This aspect is equivalent to :ref:`pragma Test_Case<Pragma-Test_Case>`.\n \n Aspect Thread_Local_Storage\n ===========================\n .. index:: Thread_Local_Storage\n \n-This boolean aspect is equivalent to pragma `Thread_Local_Storage`.\n+This boolean aspect is equivalent to :ref:`pragma Thread_Local_Storage<Pragma-Thread_Local_Storage>`.\n \n Aspect Universal_Aliasing\n =========================\n .. index:: Universal_Aliasing\n \n-This boolean aspect is equivalent to pragma `Universal_Aliasing`.\n+This boolean aspect is equivalent to :ref:`pragma Universal_Aliasing<Pragma-Universal_Aliasing>`.\n \n Aspect Universal_Data\n =====================\n .. index:: Universal_Data\n \n-This aspect is equivalent to pragma `Universal_Data`.\n+This aspect is equivalent to :ref:`pragma Universal_Data<Pragma-Universal_Data>`.\n \n Aspect Unmodified\n =================\n .. index:: Unmodified\n \n-This boolean aspect is equivalent to pragma `Unmodified`.\n+This boolean aspect is equivalent to :ref:`pragma Unmodified<Pragma-Unmodified>`.\n \n Aspect Unreferenced\n ===================\n .. index:: Unreferenced\n \n-This boolean aspect is equivalent to pragma `Unreferenced`. Note that\n+This boolean aspect is equivalent to :ref:`pragma Unreferenced<Pragma-Unreferenced>`. Note that\n in the case of formal parameters, it is not permitted to have aspects for\n a formal parameter, so in this case the pragma form must be used.\n \n Aspect Unreferenced_Objects\n ===========================\n .. index:: Unreferenced_Objects\n \n-This boolean aspect is equivalent to pragma `Unreferenced_Objects`.\n+This boolean aspect is equivalent to :ref:`pragma Unreferenced_Objects<Pragma-Unreferenced_Objects>`.\n \n Aspect Value_Size\n =================\n .. index:: Value_Size\n \n-This aspect is equivalent to a `Value_Size`\n-attribute definition clause.\n+This aspect is equivalent to :ref:`attribute Value_Size<Attribute-Value_Size>`.\n \n Aspect Volatile_Full_Access\n ===========================\n .. index:: Volatile_Full_Access\n \n-This boolean aspect is equivalent to pragma `Volatile_Full_Access`.\n+This boolean aspect is equivalent to :ref:`pragma Volatile_Full_Access<Pragma-Volatile_Full_Access>`.\n \n Aspect Volatile_Function\n ===========================\n .. index:: Volatile_Function\n \n-This boolean aspect is equivalent to pragma `Volatile_Function`.\n+This boolean aspect is equivalent to :ref:`pragma Volatile_Function<Pragma-Volatile_Function>`.\n \n Aspect Warnings\n ===============\n .. index:: Warnings\n \n-This aspect is equivalent to the two argument form of pragma `Warnings`,\n+This aspect is equivalent to the two argument form of :ref:`pragma Warnings<Pragma_Warnings>`,\n where the first argument is `ON` or `OFF` and the second argument\n is the entity."}, {"sha": "432db36441a764618c8e28064349f216117a947c", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_attributes.rst", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25f170d2d44ec8ed5424c86743fb5b8360273b3/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25f170d2d44ec8ed5424c86743fb5b8360273b3/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_attributes.rst?ref=c25f170d2d44ec8ed5424c86743fb5b8360273b3", "patch": "@@ -670,6 +670,8 @@ passed for a record or other composite object passed by reference.\n There is no way of indicating this without the `Null_Parameter`\n attribute.\n \n+.. _Attribute-Object_Size:\n+\n Attribute Object_Size\n =====================\n .. index:: Size, used for objects\n@@ -901,6 +903,8 @@ The `Safe_Small` attribute is provided for compatibility with Ada 83.  See\n the Ada 83 reference manual for an exact description of the semantics of\n this attribute.\n \n+.. _Attribute-Scalar_Storage_Order:\n+\n Attribute Scalar_Storage_Order\n ==============================\n .. index:: Endianness\n@@ -1556,6 +1560,8 @@ typical machines).  In addition `'VADS_Size` applied to an object\n gives the result that would be obtained by applying the attribute to\n the corresponding type.\n \n+.. _Attribute-Value_Size:\n+\n Attribute Value_Size\n ====================\n .. index:: Size, setting for not-first subtype"}, {"sha": "b2cb149a2523c30044eb7ff4d2fc4939ad849744", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_pragmas.rst", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25f170d2d44ec8ed5424c86743fb5b8360273b3/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25f170d2d44ec8ed5424c86743fb5b8360273b3/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst?ref=c25f170d2d44ec8ed5424c86743fb5b8360273b3", "patch": "@@ -37,6 +37,8 @@ the effect of deferring aborts for the sequence of statements (but not\n for the declarations or handlers, if any, associated with this statement\n sequence).\n \n+.. _Pragma-Abstract_State:\n+\n Pragma Abstract_State\n =====================\n \n@@ -266,6 +268,8 @@ this pragma serves no purpose but is ignored\n rather than rejected to allow common sets of sources to be used\n in the two situations.\n \n+.. _Pragma-Annotate:\n+\n Pragma Annotate\n ===============\n \n@@ -549,6 +553,8 @@ values will generally give an exception, though formally the program\n is erroneous so there are no guarantees that this will always be the\n case, and it is recommended that these two options not be used together.\n \n+.. _Pragma-Async_Readers:\n+\n Pragma Async_Readers\n ====================\n \n@@ -561,6 +567,8 @@ Syntax:\n For the semantics of this pragma, see the entry for aspect `Async_Readers` in\n the SPARK 2014 Reference Manual, section 7.1.2.\n \n+.. _Pragma-Async_Writers:\n+\n Pragma Async_Writers\n ====================\n \n@@ -1100,6 +1108,8 @@ If the alignment for a record or array type is not specified (using\n pragma `Pack`, pragma `Component_Alignment`, or a record rep\n clause), the GNAT uses the default alignment as described previously.\n \n+.. _Pragma-Constant_After_Elaboration:\n+\n Pragma Constant_After_Elaboration\n =================================\n \n@@ -1112,6 +1122,8 @@ Syntax:\n For the semantics of this pragma, see the entry for aspect\n `Constant_After_Elaboration` in the SPARK 2014 Reference Manual, section 3.3.1.\n \n+.. _Pragma-Contract_Cases:\n+\n Pragma Contract_Cases\n =====================\n .. index:: Contract cases\n@@ -1366,6 +1378,8 @@ This pragma is standard in Ada 2012, but is available in all earlier\n versions of Ada as an implementation-defined pragma.\n See Ada 2012 Reference Manual for details.\n \n+.. _Pragma-Default_Initial_Condition:\n+\n Pragma Default_Initial_Condition\n ================================\n \n@@ -1513,6 +1527,8 @@ This pragma is standard in Ada 2012, but is available in all earlier\n versions of Ada as an implementation-defined pragma.\n See Ada 2012 Reference Manual for details.\n \n+.. _Pragma-Depends:\n+\n Pragma Depends\n ==============\n \n@@ -1601,6 +1617,8 @@ This pragma is standard in Ada 2012, but is available in all earlier\n versions of Ada as an implementation-defined pragma.\n See Ada 2012 Reference Manual for details.\n \n+.. _Pragma-Effective_Reads:\n+\n Pragma Effective_Reads\n ======================\n \n@@ -1613,6 +1631,8 @@ Syntax:\n For the semantics of this pragma, see the entry for aspect `Effective_Reads` in\n the SPARK 2014 Reference Manual, section 7.1.2.\n \n+.. _Pragma-Effective_Writes:\n+\n Pragma Effective_Writes\n =======================\n \n@@ -2066,6 +2086,7 @@ of GNAT specific extensions are recognized as follows:\n   generic types. The result indicates if the corresponding actual\n   is constrained.\n \n+.. _Pragma-Extensions_Visible:\n \n Pragma Extensions_Visible\n =========================\n@@ -2212,6 +2233,8 @@ following operations are affected:\n   must instantiate your own version of `Ada.Numerics.Generic_Complex_Types`\n   under control of the pragma, rather than use the preinstantiated versions.\n \n+.. _Pragma-Favor_Top_Level:\n+\n Pragma Favor_Top_Level\n ======================\n \n@@ -2275,6 +2298,8 @@ be `IEEE_Float` to specify the use of IEEE format, as follows:\n *\n   No other value of digits is permitted.\n \n+.. _Pragma-Ghost:\n+\n Pragma Ghost\n ============\n \n@@ -2287,6 +2312,8 @@ Syntax:\n For the semantics of this pragma, see the entry for aspect `Ghost` in the SPARK\n 2014 Reference Manual, section 6.9.\n \n+.. _Pragma-Global:\n+\n Pragma Global\n =============\n \n@@ -2704,6 +2731,8 @@ manipulate separate components in the composite object. This may place\n constraints on the representation of the object (for instance prohibiting\n tight packing).\n \n+.. _Pragma-Initial_Condition:\n+\n Pragma Initial_Condition\n ========================\n \n@@ -2778,6 +2807,8 @@ of stack required, so it is probably a good idea to turn on stack\n checking (see description of stack checking in the GNAT\n User's Guide) when using this pragma.\n \n+.. _Pragma-Initializes:\n+\n Pragma Initializes\n ==================\n \n@@ -2803,6 +2834,8 @@ Syntax:\n For the semantics of this pragma, see the entry for aspect `Initializes` in the\n SPARK 2014 Reference Manual, section 7.1.5.\n \n+.. _Pragma-Inline_Always:\n+\n Pragma Inline_Always\n ====================\n \n@@ -2978,6 +3011,8 @@ Overriding the default state of signals used by the Ada runtime may interfere\n with an application's runtime behavior in the cases of the synchronous signals,\n and in the case of the signal used to implement the `abort` statement.\n \n+.. _Pragma-Invariant:\n+\n Pragma Invariant\n ================\n \n@@ -3245,6 +3280,8 @@ after the Ada run-time environment is shut down.\n See `pragma Linker_Constructor` for the set of restrictions that apply\n because of these specific contexts.\n \n+.. _Pragma-Linker_Section:\n+\n Pragma Linker_Section\n =====================\n \n@@ -3320,6 +3357,7 @@ section). See also `pragma Persistent_BSS`.\n     procedure Q with Linker_Section => \"Qsection\";\n   end IO_Card;\n \n+.. _Pragma-Lock_Free:\n \n Pragma Lock_Free\n ================\n@@ -3546,6 +3584,8 @@ such a way that a body needed before is no longer needed. The provision of a\n dummy body with a No_Body pragma ensures that there is no interference from\n earlier versions of the package body.\n \n+.. _Pragma-No_Elaboration_Code_All:\n+\n Pragma No_Elaboration_Code_All\n ==============================\n \n@@ -3648,6 +3688,8 @@ in the :title:`GNAT User's Guide`.\n \n This pragma currently has no effects on access to unconstrained array types.\n \n+.. _Pragma-No_Tagged_Streams:\n+\n Pragma No_Tagged_Streams\n ========================\n \n@@ -4143,6 +4185,8 @@ This pragma is standard in Ada 2005, but is available in all earlier\n versions of Ada as an implementation-defined pragma.\n See Ada 2012 Reference Manual for details.\n \n+.. _Pragma-Part_Of:\n+\n Pragma Part_Of\n ==============\n \n@@ -4181,6 +4225,8 @@ optimized.  GNAT does not attempt to optimize any tasks in this manner\n For more information on the subject of passive tasks, see the section\n 'Passive Task Optimization' in the GNAT Users Guide.\n \n+.. _Pragma-Persistent_BSS:\n+\n Pragma Persistent_BSS\n =====================\n \n@@ -4568,6 +4614,8 @@ use of the pragma identifier `Check`. Historically, pragma\n Ada 2012, and has been retained in its original form for\n compatibility purposes.\n \n+.. _Pragma-Predicate:\n+\n Pragma Predicate\n ================\n \n@@ -5002,6 +5050,8 @@ Syntax:\n \n This pragma is identical in effect to pragma `Common_Object`.\n \n+.. _Pragma-Pure_Function:\n+\n Pragma Pure_Function\n ====================\n \n@@ -5106,6 +5156,8 @@ compatibility purposes. It is equivalent to:\n \n which is the preferred method of setting the `Ravenscar` profile.\n \n+.. _Pragma-Refined_Depends:\n+\n Pragma Refined_Depends\n ======================\n \n@@ -5137,6 +5189,8 @@ Syntax:\n For the semantics of this pragma, see the entry for aspect `Refined_Depends` in\n the SPARK 2014 Reference Manual, section 6.1.5.\n \n+.. _Pragma-Refined_Global:\n+\n Pragma Refined_Global\n =====================\n \n@@ -5160,6 +5214,8 @@ Syntax:\n For the semantics of this pragma, see the entry for aspect `Refined_Global` in\n the SPARK 2014 Reference Manual, section 6.1.4.\n \n+.. _Pragma-Refined_Post:\n+\n Pragma Refined_Post\n ===================\n \n@@ -5172,6 +5228,8 @@ Syntax:\n For the semantics of this pragma, see the entry for aspect `Refined_Post` in\n the SPARK 2014 Reference Manual, section 7.2.7.\n \n+.. _Pragma-Refined_State:\n+\n Pragma Refined_State\n ====================\n \n@@ -5211,6 +5269,8 @@ This pragma is standard in Ada 2005, but is available in all earlier\n versions of Ada as an implementation-defined pragma.\n See Ada 2012 Reference Manual for details.\n \n+.. _Pragma-Remote_Access_Type:\n+\n Pragma Remote_Access_Type\n =========================\n \n@@ -5429,6 +5489,8 @@ no effect in `GNAT` (which does not implement shared generics), other\n than to check that the given names are all names of generic units or\n generic instances.\n \n+.. _Pragma-Shared:\n+\n Pragma Shared\n =============\n \n@@ -5468,6 +5530,8 @@ Syntax:\n This pragma is provided for compatibility with other Ada implementations. It\n is recognized but ignored by all current versions of GNAT.\n \n+.. _Pragma-Simple_Storage_Pool_Type:\n+\n Pragma Simple_Storage_Pool_Type\n ===============================\n .. index:: Storage pool, simple\n@@ -5688,6 +5752,8 @@ The second argument must be a string literal, it cannot be a static\n string expression other than a string literal.  This is because its value\n is needed for error messages issued by all phases of the compiler.\n \n+.. _Pragma-SPARK_Mode:\n+\n Pragma SPARK_Mode\n =================\n \n@@ -6047,6 +6113,8 @@ with Rational Ada, where it appears as a program unit pragma.\n The use of the standard Ada pragma `Suppress (All_Checks)`\n as a normal configuration pragma is the preferred usage in GNAT.\n \n+.. _Pragma-Suppress_Debug_Info:\n+\n Pragma Suppress_Debug_Info\n ==========================\n \n@@ -6085,6 +6153,8 @@ usual. It is not required that this pragma be used consistently within\n a partition, so it is fine to have some units within a partition compiled\n with this pragma and others compiled in normal mode without it.\n \n+.. _Pragma-Suppress_Initialization:\n+\n Pragma Suppress_Initialization\n ==============================\n .. index:: Suppressing initialization\n@@ -6205,6 +6275,8 @@ created, depending on the target.  This pragma can appear anywhere a\n `Storage_Size` attribute definition clause is allowed for a task\n type.\n \n+.. _Pragma-Test_Case:\n+\n Pragma Test_Case\n ================\n .. index:: Test cases\n@@ -6263,6 +6335,8 @@ precondition of the subprogram, and the output context should also satisfy its\n postcondition. Mode `Robustness` indicates that the precondition and\n postcondition of the subprogram should be ignored for this test case.\n \n+.. _Pragma-Thread_Local_Storage:\n+\n Pragma Thread_Local_Storage\n ===========================\n .. index:: Task specific storage\n@@ -6358,6 +6432,8 @@ does not permit a string parameter, and it is\n controlled by the assertion identifier `Type_Invariant`\n rather than `Invariant`.\n \n+.. _Pragma-Type_Invariant_Class:\n+\n Pragma Type_Invariant_Class\n ===========================\n \n@@ -6482,6 +6558,8 @@ a clean manner.\n The abort only happens if code is being generated.  Thus you can use\n specs of unimplemented packages in syntax or semantic checking mode.\n \n+.. _Pragma-Universal_Aliasing:\n+\n Pragma Universal_Aliasing\n =========================\n \n@@ -6501,6 +6579,8 @@ For a detailed description of the strict aliasing optimization, and the\n situations in which it must be suppressed, see the section on\n `Optimization and Strict Aliasing` in the :title:`GNAT User's Guide`.\n \n+.. _Pragma-Universal_Data:\n+\n Pragma Universal_Data\n =====================\n \n@@ -6525,6 +6605,8 @@ a library unit pragma, but can also be used as a configuration pragma\n of this pragma is also available by applying the -univ switch on the\n compilations of units where universal addressing of the data is desired.\n \n+.. _Pragma-Unmodified:\n+\n Pragma Unmodified\n =================\n .. index:: Warnings, unmodified\n@@ -6557,6 +6639,8 @@ are typically to be used in cases where such warnings are expected.\n Thus it is never necessary to use `pragma Unmodified` for such\n variables, though it is harmless to do so.\n \n+.. _Pragma-Unreferenced:\n+\n Pragma Unreferenced\n ===================\n .. index:: Warnings, unreferenced\n@@ -6615,6 +6699,8 @@ are typically to be used in cases where such warnings are expected.\n Thus it is never necessary to use `pragma Unreferenced` for such\n variables, though it is harmless to do so.\n \n+.. _Pragma-Unreferenced_Objects:\n+\n Pragma Unreferenced_Objects\n ===========================\n .. index:: Warnings, unreferenced\n@@ -6812,6 +6898,8 @@ in some Ada 83 compilers, including DEC Ada 83.  The Ada 95 / Ada 2005\n implementation of pragma Volatile is upwards compatible with the\n implementation in DEC Ada 83.\n \n+.. _Pragma-Volatile_Full_Access:\n+\n Pragma Volatile_Full_Access\n ===========================\n \n@@ -6844,6 +6932,8 @@ the same object.\n It is not permissible to specify `Volatile_Full_Access` for a composite\n (record or array) type or object that has at least one `Aliased` component.\n \n+.. _Pragma-Volatile_Function:\n+\n Pragma Volatile_Function\n ========================\n "}, {"sha": "6288ebfa70b1d35cc7e6f7943e31efa3ce44c60e", "filename": "gcc/ada/doc/gnat_rm/standard_and_implementation_defined_restrictions.rst", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25f170d2d44ec8ed5424c86743fb5b8360273b3/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fstandard_and_implementation_defined_restrictions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25f170d2d44ec8ed5424c86743fb5b8360273b3/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fstandard_and_implementation_defined_restrictions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fstandard_and_implementation_defined_restrictions.rst?ref=c25f170d2d44ec8ed5424c86743fb5b8360273b3", "patch": "@@ -525,7 +525,7 @@ No_Multiple_Elaboration\n .. index:: No_Multiple_Elaboration\n \n [GNAT] When this restriction is active, we are not requesting control-flow\n-preservation with -fpreserve-control-flow and the static elaboration model is\n+preservation with -fpreserve-control-flow, and the static elaboration model is\n used, the compiler is allowed to suppress the elaboration counter normally\n associated with the unit, even if the unit has elaboration code. This counter\n is typically used to check for access before elaboration and to control\n@@ -877,10 +877,10 @@ code generation. If it is used in conjunction with \"semantics only\"\n checking, then some cases of violations may be missed.\n \n When this restriction is active, we are not requesting control-flow\n-preservation with -fpreserve-control-flow and the static elaboration model is\n+preservation with -fpreserve-control-flow, and the static elaboration model is\n used, the compiler is allowed to suppress the elaboration counter normally\n-associated with the unit, used to check for access before elaboration and to\n-control.\n+associated with the unit. This counter is typically used to check for access\n+before elaboration and to control multiple elaboration attempts.\n \n No_Dynamic_Sized_Objects\n ------------------------"}, {"sha": "dce95878122a3c087f60b0a5d65176835fc6b87b", "filename": "gcc/ada/doc/gnat_rm/the_gnat_library.rst", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25f170d2d44ec8ed5424c86743fb5b8360273b3/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fthe_gnat_library.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25f170d2d44ec8ed5424c86743fb5b8360273b3/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fthe_gnat_library.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fthe_gnat_library.rst?ref=c25f170d2d44ec8ed5424c86743fb5b8360273b3", "patch": "@@ -930,7 +930,7 @@ obtaining information about exceptions provided by Ada 83 compilers.\n .. index:: Memory corruption debugging\n \n Provide a debugging storage pools that helps tracking memory corruption\n-problems.  \n+problems.\n See `The GNAT Debug_Pool Facility` section in the :title:`GNAT User's Guide`.\n \n .. _`GNAT.Debug_Utilities_(g-debuti.ads)`:\n@@ -1735,6 +1735,18 @@ introduction to the binding contents and use.\n \n SSE vector types for use with SSE related intrinsics.\n \n+.. _`GNAT.String_Hash(g-strhas.ads)`:\n+\n+`GNAT.String_Hash` (:file:`g-strhas.ads`)\n+=========================================\n+\n+.. index:: GNAT.String_Hash (g-strhas.ads)\n+\n+.. index:: Hash functions\n+\n+Provides a generic hash function working on arrays of scalars. Both the scalar\n+type and the hash result type are parameters.\n+\n .. _`GNAT.Strings_(g-string.ads)`:\n \n `GNAT.Strings` (:file:`g-string.ads`)\n@@ -2228,4 +2240,3 @@ This package provides definitions and descriptions of\n the various methods used for encoding wide characters\n in ordinary strings.  These definitions are used by\n the package `System.Wch_Cnv`.\n-"}, {"sha": "6952ee377017231d7435a27870cfda5b2e4166ca", "filename": "gcc/ada/doc/gnat_ugn/building_executable_programs_with_gnat.rst", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25f170d2d44ec8ed5424c86743fb5b8360273b3/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25f170d2d44ec8ed5424c86743fb5b8360273b3/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst?ref=c25f170d2d44ec8ed5424c86743fb5b8360273b3", "patch": "@@ -3055,11 +3055,10 @@ of the pragma in the :title:`GNAT_Reference_manual`).\n \n   .. index:: Hiding of Declarations\n \n-  This switch activates warnings on hiding declarations.\n-  A declaration is considered hiding\n-  if it is for a non-overloadable entity, and it declares an entity with the\n-  same name as some other entity that is directly or use-visible. The default\n-  is that such warnings are not generated.\n+  This switch activates warnings on hiding declarations that are considered\n+  potentially confusing. Not all cases of hiding cause warnings; for example an\n+  overriding declaration hides an implicit declaration, which is just normal\n+  code. The default is that warnings on hiding are not generated.\n \n \n .. index:: -gnatwH  (gcc)"}, {"sha": "6cf6c6c39ab24b97480fd91a19a50438710869fe", "filename": "gcc/ada/doc/gnat_ugn/gnat_and_program_execution.rst", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25f170d2d44ec8ed5424c86743fb5b8360273b3/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25f170d2d44ec8ed5424c86743fb5b8360273b3/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst?ref=c25f170d2d44ec8ed5424c86743fb5b8360273b3", "patch": "@@ -2790,8 +2790,6 @@ appropriate options.\n     indicate that the analysed set of sources is incomplete to make up a\n     partition and that some subprogram bodies are missing are not generated.\n \n-  Note: to invoke *gnatelim* with a project file, use the `gnat`\n-  driver (see :ref:`The_GNAT_Driver_and_Project_Files`).\n \n \n   .. _Processing_Precompiled_Libraries:"}, {"sha": "95f6ebd7183ea3c029c84699e8dd0a4e371c6af7", "filename": "gcc/ada/doc/gnat_ugn/gnat_project_manager.rst", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25f170d2d44ec8ed5424c86743fb5b8360273b3/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_project_manager.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25f170d2d44ec8ed5424c86743fb5b8360273b3/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_project_manager.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_project_manager.rst?ref=c25f170d2d44ec8ed5424c86743fb5b8360273b3", "patch": "@@ -4156,9 +4156,9 @@ Package Builder Attributes\n * **Global_Compilation_Switches**: list, optional index, indexed,\n   case-insensitive index\n \n-  Index is either a language name or a source file name. Value is the list of\n-  compilation switches to be used when building an executable. Index is either\n-  the source file name of the executable to be built or its language name.\n+  Index is a language name. Value is the list of compilation switches to be\n+  used when building an executable. Index is either the source file name of\n+  the executable to be built or its language name.\n \n * **Executable**: single, indexed, case-insensitive index\n "}, {"sha": "792d698c52fdb4a5a77427805eccde6c2534bd1a", "filename": "gcc/ada/doc/gnat_ugn/gnat_utility_programs.rst", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25f170d2d44ec8ed5424c86743fb5b8360273b3/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_utility_programs.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25f170d2d44ec8ed5424c86743fb5b8360273b3/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_utility_programs.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_utility_programs.rst?ref=c25f170d2d44ec8ed5424c86743fb5b8360273b3", "patch": "@@ -4962,6 +4962,7 @@ Alternatively, you may run the script using the following command line:\n     not supported;\n   * tests for protected subprograms and entries are not supported;\n   * pragma *No_Run_Time* is not supported;\n+  * pragma *No_Secondary_Stack* is not supported;\n   * if pragmas for interfacing with foreign languages are used, manual\n     adjustments might be necessary to make the test harness compilable;\n   * use of elaboration control pragmas may result in elaboration circularities"}, {"sha": "0304a536411b4b4e1bddb0f52f116114b3946e12", "filename": "gcc/ada/doc/gnat_ugn/the_gnat_compilation_model.rst", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25f170d2d44ec8ed5424c86743fb5b8360273b3/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fthe_gnat_compilation_model.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25f170d2d44ec8ed5424c86743fb5b8360273b3/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fthe_gnat_compilation_model.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fthe_gnat_compilation_model.rst?ref=c25f170d2d44ec8ed5424c86743fb5b8360273b3", "patch": "@@ -2865,6 +2865,17 @@ where\n Switches for `gnatprep`\n ^^^^^^^^^^^^^^^^^^^^^^^\n \n+.. index:: --version (gnatprep)\n+\n+:samp:`--version`\n+  Display Copyright and version, then exit disregarding all other options.\n+\n+.. index:: --help (gnatprep)\n+\n+:samp:`--help`\n+  If *--version* was not used, display usage, then exit disregarding\n+  all other options.\n+\n .. index:: -b (gnatprep)\n \n :samp:`-b`\n@@ -2922,13 +2933,24 @@ Switches for `gnatprep`\n   Causes a sorted list of symbol names and values to be\n   listed on the standard output file.\n \n+.. index:: -T (gnatprep)\n+\n+:samp:`-T`\n+  Use LF as line terminators when writing files. By default the line terminator\n+  of the host (LF under unix, CR/LF under Windows) is used.\n+\n .. index:: -u (gnatprep)\n \n :samp:`-u`\n   Causes undefined symbols to be treated as having the value FALSE in the context\n   of a preprocessor test. In the absence of this option, an undefined symbol in\n   a `#if` or `#elsif` test will be treated as an error.\n \n+.. index:: -v (gnatprep)\n+\n+:samp:`-v`\n+  Verbose mode: generates more output about work done.\n+\n \n Note: if neither *-b* nor *-c* is present,\n then preprocessor lines and\n@@ -3126,10 +3148,18 @@ preprocessing is triggered and parameterized.\n :samp:`-gnatep={file}`\n   This switch indicates to the compiler the file name (without directory\n   information) of the preprocessor data file to use. The preprocessor data file\n-  should be found in the source directories. Note that when the compiler is\n-  called by a builder such as (*gnatmake* with a project\n-  file, if the object directory is not also a source directory, the builder needs\n-  to be called with *-x*.\n+  should be found in the source directories. Alternatively when using project\n+  files, you can reference to the project file's directory via the\n+  ``project name'Project_Dir`` project attribute, e.g:\n+\n+  .. code-block:: gpr\n+\n+      project Prj is\n+         package Compiler is\n+            for Switches (\"Ada\") use\n+              (\"-gnatep=\" & Prj'Project_Dir & \"prep.def\");\n+         end Compiler;\n+      end Prj;\n \n   A preprocessing data file is a text file with significant lines indicating\n   how should be preprocessed either a specific source or all sources not"}, {"sha": "665d858d1dbb68e4c5dbed551f440c897d0f35de", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 831, "deletions": 820, "changes": 1651, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25f170d2d44ec8ed5424c86743fb5b8360273b3/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25f170d2d44ec8ed5424c86743fb5b8360273b3/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=c25f170d2d44ec8ed5424c86743fb5b8360273b3"}, {"sha": "0074b1bc650e515840fbc9d7d6c43c4b2d52d97e", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 62, "deletions": 13, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25f170d2d44ec8ed5424c86743fb5b8360273b3/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25f170d2d44ec8ed5424c86743fb5b8360273b3/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=c25f170d2d44ec8ed5424c86743fb5b8360273b3", "patch": "@@ -21,7 +21,7 @@\n \n @copying\n @quotation\n-GNAT User's Guide for Native Platforms , November 18, 2015\n+GNAT User's Guide for Native Platforms , April 21, 2016\n \n AdaCore\n \n@@ -4828,6 +4828,27 @@ optional, and can be replaced by the use of the @emph{-D} switch.\n @subsubsection Switches for @cite{gnatprep}\n \n \n+@geindex --version (gnatprep)\n+\n+\n+@table @asis\n+\n+@item @code{--version}\n+\n+Display Copyright and version, then exit disregarding all other options.\n+@end table\n+\n+@geindex --help (gnatprep)\n+\n+\n+@table @asis\n+\n+@item @code{--help}\n+\n+If @emph{--version} was not used, display usage, then exit disregarding\n+all other options.\n+@end table\n+\n @geindex -b (gnatprep)\n \n \n@@ -4915,6 +4936,17 @@ Causes a sorted list of symbol names and values to be\n listed on the standard output file.\n @end table\n \n+@geindex -T (gnatprep)\n+\n+\n+@table @asis\n+\n+@item @code{-T}\n+\n+Use LF as line terminators when writing files. By default the line terminator\n+of the host (LF under unix, CR/LF under Windows) is used.\n+@end table\n+\n @geindex -u (gnatprep)\n \n \n@@ -4927,6 +4959,16 @@ of a preprocessor test. In the absence of this option, an undefined symbol in\n a @cite{#if} or @cite{#elsif} test will be treated as an error.\n @end table\n \n+@geindex -v (gnatprep)\n+\n+\n+@table @asis\n+\n+@item @code{-v}\n+\n+Verbose mode: generates more output about work done.\n+@end table\n+\n Note: if neither @emph{-b} nor @emph{-c} is present,\n then preprocessor lines and\n deleted lines are completely removed from the output, unless -r is\n@@ -5138,10 +5180,18 @@ preprocessing is triggered and parameterized.\n \n This switch indicates to the compiler the file name (without directory\n information) of the preprocessor data file to use. The preprocessor data file\n-should be found in the source directories. Note that when the compiler is\n-called by a builder such as (@emph{gnatmake} with a project\n-file, if the object directory is not also a source directory, the builder needs\n-to be called with @emph{-x}.\n+should be found in the source directories. Alternatively when using project\n+files, you can reference to the project file's directory via the\n+@code{project name'Project_Dir} project attribute, e.g:\n+\n+@example\n+project Prj is\n+   package Compiler is\n+      for Switches (\"Ada\") use\n+        (\"-gnatep=\" & Prj'Project_Dir & \"prep.def\");\n+   end Compiler;\n+end Prj;\n+@end example\n \n A preprocessing data file is a text file with significant lines indicating\n how should be preprocessed either a specific source or all sources not\n@@ -11287,11 +11337,10 @@ but more warnings may be added in the future without advanced notice.\n \n @geindex Hiding of Declarations\n \n-This switch activates warnings on hiding declarations.\n-A declaration is considered hiding\n-if it is for a non-overloadable entity, and it declares an entity with the\n-same name as some other entity that is directly or use-visible. The default\n-is that such warnings are not generated.\n+This switch activates warnings on hiding declarations that are considered\n+potentially confusing. Not all cases of hiding cause warnings; for example an\n+overriding declaration hides an implicit declaration, which is just normal\n+code. The default is that warnings on hiding are not generated.\n @end table\n \n @geindex -gnatwH (gcc)\n@@ -21645,9 +21694,9 @@ source file name of the executable to be built or its language name.\n @strong{Global_Compilation_Switches}: list, optional index, indexed,\n case-insensitive index\n \n-Index is either a language name or a source file name. Value is the list of\n-compilation switches to be used when building an executable. Index is either\n-the source file name of the executable to be built or its language name.\n+Index is a language name. Value is the list of compilation switches to be\n+used when building an executable. Index is either the source file name of\n+the executable to be built or its language name.\n \n @item \n @strong{Executable}: single, indexed, case-insensitive index"}]}