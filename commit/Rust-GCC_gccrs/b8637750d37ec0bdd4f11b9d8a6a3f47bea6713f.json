{"sha": "b8637750d37ec0bdd4f11b9d8a6a3f47bea6713f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg2Mzc3NTBkMzdlYzBiZGQ0ZjExYjlkOGE2YTNmNDdiZWE2NzEzZg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2007-06-01T10:09:40Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2007-06-01T10:09:40Z"}, "message": "throw_allocator.h (__throw_allocator::allocate): Throw bad_alloc for out of memory conditions.\n\n2007-06-01  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/ext/throw_allocator.h (__throw_allocator::allocate):\n\tThrow bad_alloc for out of memory conditions.\t\n\t* testsuite/ext/throw_allocator/deallocate_global.cc: New.\n\t* testsuite/ext/throw_allocator/check_delete.cc: Same.\n\t* testsuite/ext/throw_allocator/check_allocate_max_size.cc: Same.\n\t* testsuite/ext/throw_allocator/check_deallocate_null.cc: Same.\n\t* testsuite/ext/throw_allocator/explicit_instantiation.cc: Same.\n\t* testsuite/ext/throw_allocator/check_new.cc: Same.\n\t* testsuite/ext/throw_allocator/deallocate_local.cc: Same.\n\nFrom-SVN: r125261", "tree": {"sha": "ee33ea2741f0a470133a6d3aaf97e5dd0337bd6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee33ea2741f0a470133a6d3aaf97e5dd0337bd6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8637750d37ec0bdd4f11b9d8a6a3f47bea6713f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8637750d37ec0bdd4f11b9d8a6a3f47bea6713f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8637750d37ec0bdd4f11b9d8a6a3f47bea6713f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8637750d37ec0bdd4f11b9d8a6a3f47bea6713f/comments", "author": null, "committer": null, "parents": [{"sha": "5fda945dd9670937fc1e8ed6635220ab336f8f73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fda945dd9670937fc1e8ed6635220ab336f8f73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fda945dd9670937fc1e8ed6635220ab336f8f73"}], "stats": {"total": 374, "additions": 362, "deletions": 12}, "files": [{"sha": "463cbf6304cf9daf6f1164f5349bd88ff6aaad87", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8637750d37ec0bdd4f11b9d8a6a3f47bea6713f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8637750d37ec0bdd4f11b9d8a6a3f47bea6713f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b8637750d37ec0bdd4f11b9d8a6a3f47bea6713f", "patch": "@@ -1,3 +1,15 @@\n+2007-06-01  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/ext/throw_allocator.h (__throw_allocator::allocate):\n+\tThrow bad_alloc for out of memory conditions.\t\n+\t* testsuite/ext/throw_allocator/deallocate_global.cc: New.\n+\t* testsuite/ext/throw_allocator/check_delete.cc: Same.\n+\t* testsuite/ext/throw_allocator/check_allocate_max_size.cc: Same.\n+\t* testsuite/ext/throw_allocator/check_deallocate_null.cc: Same.\n+\t* testsuite/ext/throw_allocator/explicit_instantiation.cc: Same.\n+\t* testsuite/ext/throw_allocator/check_new.cc: Same.\n+\t* testsuite/ext/throw_allocator/deallocate_local.cc: Same.\n+\n 2007-05-31  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/31426"}, {"sha": "240a3ccbe4fbf0b96d22ca2d9f6ef8920c88eda8", "filename": "libstdc++-v3/include/ext/throw_allocator.h", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8637750d37ec0bdd4f11b9d8a6a3f47bea6713f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8637750d37ec0bdd4f11b9d8a6a3f47bea6713f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h?ref=b8637750d37ec0bdd4f11b9d8a6a3f47bea6713f", "patch": "@@ -210,32 +210,35 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       { return std::allocator<value_type>().max_size(); }\n \n       pointer\n-      allocate(size_type num, std::allocator<void>::const_pointer hint = 0)\n+      allocate(size_type __n, std::allocator<void>::const_pointer hint = 0)\n       {\n+\tif (__builtin_expect(__n > this->max_size(), false))\n+\t  std::__throw_bad_alloc();\n+\n \tthrow_conditionally();\n-\tvalue_type* const a = std::allocator<value_type>().allocate(num, hint);\n-\tinsert(a, sizeof(value_type) * num);\n+\tvalue_type* const a = std::allocator<value_type>().allocate(__n, hint);\n+\tinsert(a, sizeof(value_type) * __n);\n \treturn a;\n       }\n \n       void\n-      construct(pointer p, const T& val)\n-      { return std::allocator<value_type>().construct(p, val); }\n+      construct(pointer __p, const T& val)\n+      { return std::allocator<value_type>().construct(__p, val); }\n \n       void\n-      destroy(pointer p)\n-      { std::allocator<value_type>().destroy(p); }\n+      destroy(pointer __p)\n+      { std::allocator<value_type>().destroy(__p); }\n \n       void\n-      deallocate(pointer p, size_type num)\n+      deallocate(pointer __p, size_type __n)\n       {\n-\terase(p, sizeof(value_type) * num);\n-\tstd::allocator<value_type>().deallocate(p, num);\n+\terase(__p, sizeof(value_type) * __n);\n+\tstd::allocator<value_type>().deallocate(__p, __n);\n       }\n \n       void\n-      check_allocated(pointer p, size_type num)\n-      { throw_allocator_base::check_allocated(p, sizeof(value_type) * num); }\n+      check_allocated(pointer __p, size_type __n)\n+      { throw_allocator_base::check_allocated(__p, sizeof(value_type) * __n); }\n \n       void\n       check_allocated(size_type label)"}, {"sha": "902361eff0d71bf1a43c3cbd4748027a5746ebfb", "filename": "libstdc++-v3/testsuite/ext/throw_allocator/check_allocate_max_size.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8637750d37ec0bdd4f11b9d8a6a3f47bea6713f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fcheck_allocate_max_size.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8637750d37ec0bdd4f11b9d8a6a3f47bea6713f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fcheck_allocate_max_size.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fcheck_allocate_max_size.cc?ref=b8637750d37ec0bdd4f11b9d8a6a3f47bea6713f", "patch": "@@ -0,0 +1,29 @@\n+//\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <ext/throw_allocator.h>\n+#include <testsuite_allocator.h>\n+\n+int main()\n+{\n+  typedef int value_type;\n+  typedef __gnu_cxx::throw_allocator<value_type> allocator_type;\n+  __gnu_test::check_allocate_max_size<allocator_type>();\n+  return 0;\n+}"}, {"sha": "8e6e1a025aa04a61fa7fddaa1c3d488a05361a9a", "filename": "libstdc++-v3/testsuite/ext/throw_allocator/check_deallocate_null.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8637750d37ec0bdd4f11b9d8a6a3f47bea6713f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fcheck_deallocate_null.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8637750d37ec0bdd4f11b9d8a6a3f47bea6713f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fcheck_deallocate_null.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fcheck_deallocate_null.cc?ref=b8637750d37ec0bdd4f11b9d8a6a3f47bea6713f", "patch": "@@ -0,0 +1,36 @@\n+//\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <ext/throw_allocator.h>\n+#include <testsuite_allocator.h>\n+\n+int main()\n+{ \n+  typedef int value_type;\n+  typedef __gnu_cxx::throw_allocator<value_type> allocator_type;\n+  \n+  try { __gnu_test::check_deallocate_null<allocator_type>(); }\n+  catch (std::logic_error&)\n+    {\n+      // Should throw logic_error to catch null erase.\n+    }\n+\n+  return 0;\n+}\n+"}, {"sha": "a8e716798fef53ae2d2adff392a791216bcd6c34", "filename": "libstdc++-v3/testsuite/ext/throw_allocator/check_delete.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8637750d37ec0bdd4f11b9d8a6a3f47bea6713f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fcheck_delete.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8637750d37ec0bdd4f11b9d8a6a3f47bea6713f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fcheck_delete.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fcheck_delete.cc?ref=b8637750d37ec0bdd4f11b9d8a6a3f47bea6713f", "patch": "@@ -0,0 +1,54 @@\n+//\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <cstdlib>\n+#include <ext/throw_allocator.h>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+using __gnu_cxx::throw_allocator;\n+\n+void* \n+operator new(std::size_t n) throw(std::bad_alloc)\n+{\n+  new_called = true;\n+  return std::malloc(n);\n+}\n+\n+void\n+operator delete(void *v) throw()\n+{\n+  delete_called = true;\n+  return std::free(v);\n+}\n+\n+// These just help tracking down error messages.\n+void test01() \n+{ \n+  bool test __attribute__((unused)) = true;\n+  typedef throw_allocator<unsigned int> allocator_type;\n+  VERIFY( bool(__gnu_test::check_delete<allocator_type, true>()) ); \n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+"}, {"sha": "1b00412918f05cc0cf5b7e6b294ba341dcac423b", "filename": "libstdc++-v3/testsuite/ext/throw_allocator/check_new.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8637750d37ec0bdd4f11b9d8a6a3f47bea6713f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fcheck_new.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8637750d37ec0bdd4f11b9d8a6a3f47bea6713f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fcheck_new.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fcheck_new.cc?ref=b8637750d37ec0bdd4f11b9d8a6a3f47bea6713f", "patch": "@@ -0,0 +1,54 @@\n+//\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <cstdlib>\n+#include <ext/throw_allocator.h>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+using __gnu_cxx::throw_allocator;\n+\n+void* \n+operator new(std::size_t n) throw(std::bad_alloc)\n+{\n+  new_called = true;\n+  return std::malloc(n);\n+}\n+\n+void\n+operator delete(void *v) throw()\n+{\n+  delete_called = true;\n+  return std::free(v);\n+}\n+\n+// These just help tracking down error messages.\n+void test01() \n+{ \n+  bool test __attribute__((unused)) = true;\n+  typedef throw_allocator<unsigned int> allocator_type;\n+  VERIFY( bool(__gnu_test::check_new<allocator_type, true>()) ); \n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+"}, {"sha": "c8bbe510c9b44180560409e7c6883e83b5fb4928", "filename": "libstdc++-v3/testsuite/ext/throw_allocator/deallocate_global.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8637750d37ec0bdd4f11b9d8a6a3f47bea6713f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fdeallocate_global.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8637750d37ec0bdd4f11b9d8a6a3f47bea6713f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fdeallocate_global.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fdeallocate_global.cc?ref=b8637750d37ec0bdd4f11b9d8a6a3f47bea6713f", "patch": "@@ -0,0 +1,73 @@\n+//\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <string>\n+#include <stdexcept>\n+#include <ext/throw_allocator.h>\n+#include <testsuite_hooks.h>\n+\n+static size_t count;\n+\n+struct count_check\n+{\n+  count_check() {}\n+  ~count_check()\n+  {\n+    if (count != 0)\n+      throw std::runtime_error(\"count isn't zero\");\n+  }\n+};\n+ \n+static count_check check;\n+\n+void* operator new(size_t size) throw(std::bad_alloc)\n+{\n+  printf(\"operator new is called \\n\");\n+  void* p = malloc(size);\n+  if (p == NULL)\n+    throw std::bad_alloc();\n+  count++;\n+  return p;\n+}\n+ \n+void operator delete(void* p) throw()\n+{\n+  printf(\"operator delete is called \\n\");\n+  if (p == NULL)\n+    return;\n+  count--;\n+  if (count == 0)\n+    printf(\"All memory released \\n\");\n+  else\n+    printf(\"%lu allocations to be released \\n\",\n+\t   static_cast<unsigned long>(count));\n+  free(p);\n+}\n+\n+typedef char char_t;\n+typedef std::char_traits<char_t> traits_t;\n+typedef __gnu_cxx::throw_allocator<char_t> allocator_t;\n+typedef std::basic_string<char_t, traits_t, allocator_t> string_t;\n+\n+string_t s(\"bayou bend\");\n+\n+int main()\n+{\n+  return 0;\n+}"}, {"sha": "794232e914ed95a6ac63f7079bd7e73f7fcc92b4", "filename": "libstdc++-v3/testsuite/ext/throw_allocator/deallocate_local.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8637750d37ec0bdd4f11b9d8a6a3f47bea6713f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fdeallocate_local.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8637750d37ec0bdd4f11b9d8a6a3f47bea6713f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fdeallocate_local.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fdeallocate_local.cc?ref=b8637750d37ec0bdd4f11b9d8a6a3f47bea6713f", "patch": "@@ -0,0 +1,64 @@\n+//\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <string>\n+#include <ext/throw_allocator.h>\n+#include <testsuite_hooks.h>\n+\n+static size_t alloc_cnt;\n+ \n+void* operator new(size_t size) throw(std::bad_alloc)\n+{\n+  printf(\"operator new is called \\n\");\n+  void* p = malloc(size);\n+  if (p == NULL)\n+    throw std::bad_alloc();\n+  alloc_cnt++;\n+  return p;\n+}\n+ \n+void operator delete(void* p) throw()\n+{\n+  printf(\"operator delete is called \\n\");\n+  if (p == NULL)\n+    return;\n+  alloc_cnt--;\n+  if (alloc_cnt == 0)\n+    printf(\"All memory released \\n\");\n+  else\n+    printf(\"%lu allocations to be released \\n\",\n+\t   static_cast<unsigned long>(alloc_cnt));\n+  free(p);\n+}\n+\n+typedef char char_t;\n+typedef std::char_traits<char_t> traits_t;\n+typedef __gnu_cxx::throw_allocator<char_t> allocator_t;\n+typedef std::basic_string<char_t, traits_t, allocator_t> string_t;\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  {\n+    string_t s;\n+    s += \"bayou bend\";\n+  }\n+  VERIFY( alloc_cnt == 0 );\n+  return 0;\n+}"}, {"sha": "2ef7d3a9303f03b2ef6639ac9e685318e46826d9", "filename": "libstdc++-v3/testsuite/ext/throw_allocator/explicit_instantiation.cc", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8637750d37ec0bdd4f11b9d8a6a3f47bea6713f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8637750d37ec0bdd4f11b9d8a6a3f47bea6713f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fexplicit_instantiation.cc?ref=b8637750d37ec0bdd4f11b9d8a6a3f47bea6713f", "patch": "@@ -0,0 +1,25 @@\n+// { dg-do compile }\n+\n+//\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <cstdlib>\n+#include <ext/throw_allocator.h>\n+\n+template class __gnu_cxx::throw_allocator<int>;"}]}