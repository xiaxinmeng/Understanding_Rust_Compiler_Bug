{"sha": "3f5a8feea3381fb0311e4d1a264c0661f37432dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y1YThmZWVhMzM4MWZiMDMxMWU0ZDFhMjY0YzA2NjFmMzc0MzJkZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-03T08:32:57Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-03T08:32:57Z"}, "message": "[multiple changes]\n\n2011-08-03  Olivier Hainque  <hainque@adacore.com>\n\n\t* tracebak.c (STOP_FRAME ppc AIX): Stop at null return address as well.\n\n2011-08-03  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch8.adb (Analyze_Object_Renaming): if the renamed object is an\n\texplicit dereference of an unconstrained type, create a constrained\n\tsubtype for it, as is done for function calls that return an\n\tunconstrained type.\n\n2011-08-03  Thomas Quinot  <quinot@adacore.com>\n\n\t* g-pehage.adb (Finalize): Avoid possible double-free.\n\n2011-08-03  Steve Baird  <baird@adacore.com>\n\n\t* exp_attr.adb (Expand_N_Attribute_Reference): Don't expand\n\tElab_Spec/Body attrs in CodePeer_Mode.\n\n2011-08-03  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_aggr.adb (Flatten): Convert to positional form aggregates whose\n\tlow bound is not known at compile time but they have no others choice.\n\tDone because in this case the bounds can be obtained directly from the\n\taggregate.\n\n2011-08-03  Ed Falis  <falis@adacore.com>\n\n\t* s-tasinf-vxworks.ads: Update comment to reflect 0 indexing of CPUs\n\ton VxWorks SMP. Remove unusable constant ANY_CPU.\n\nFrom-SVN: r177242", "tree": {"sha": "834b7da4b7d5b685e4e2c9e4b200ee9d3e306393", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/834b7da4b7d5b685e4e2c9e4b200ee9d3e306393"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f5a8feea3381fb0311e4d1a264c0661f37432dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f5a8feea3381fb0311e4d1a264c0661f37432dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f5a8feea3381fb0311e4d1a264c0661f37432dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f5a8feea3381fb0311e4d1a264c0661f37432dd/comments", "author": null, "committer": null, "parents": [{"sha": "a96ca6001f1e6236b550e26c7459bfaa9deb57b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a96ca6001f1e6236b550e26c7459bfaa9deb57b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a96ca6001f1e6236b550e26c7459bfaa9deb57b0"}], "stats": {"total": 197, "additions": 151, "deletions": 46}, "files": [{"sha": "ecb09e0d43e30f0e4cfd2bc6a2a1811291829e43", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f5a8feea3381fb0311e4d1a264c0661f37432dd/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f5a8feea3381fb0311e4d1a264c0661f37432dd/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3f5a8feea3381fb0311e4d1a264c0661f37432dd", "patch": "@@ -1,3 +1,35 @@\n+2011-08-03  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* tracebak.c (STOP_FRAME ppc AIX): Stop at null return address as well.\n+\n+2011-08-03  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch8.adb (Analyze_Object_Renaming): if the renamed object is an\n+\texplicit dereference of an unconstrained type, create a constrained\n+\tsubtype for it, as is done for function calls that return an\n+\tunconstrained type.\n+\n+2011-08-03  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* g-pehage.adb (Finalize): Avoid possible double-free.\n+\n+2011-08-03  Steve Baird  <baird@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute_Reference): Don't expand\n+\tElab_Spec/Body attrs in CodePeer_Mode.\n+\n+2011-08-03  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_aggr.adb (Flatten): Convert to positional form aggregates whose\n+\tlow bound is not known at compile time but they have no others choice.\n+\tDone because in this case the bounds can be obtained directly from the\n+\taggregate.\n+\n+2011-08-03  Ed Falis  <falis@adacore.com>\n+\n+\t* s-tasinf-vxworks.ads: Update comment to reflect 0 indexing of CPUs\n+\ton VxWorks SMP. Remove unusable constant ANY_CPU.\n+\n 2011-08-03  Emmanuel Briot  <briot@adacore.com>\n \n \t* gnatcmd.adb, make.adb, prj-part.adb, prj-part.ads, prj-makr.adb,"}, {"sha": "b797648e7d52b29b4847125253cb3d808276dc43", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f5a8feea3381fb0311e4d1a264c0661f37432dd/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f5a8feea3381fb0311e4d1a264c0661f37432dd/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=3f5a8feea3381fb0311e4d1a264c0661f37432dd", "patch": "@@ -3825,6 +3825,8 @@ package body Exp_Aggr is\n          Lov : Uint;\n          Hiv : Uint;\n \n+         Others_Present : Boolean := False;\n+\n       begin\n          if Nkind (Original_Node (N)) = N_String_Literal then\n             return True;\n@@ -3839,8 +3841,44 @@ package body Exp_Aggr is\n          Lov := Expr_Value (Lo);\n          Hiv := Expr_Value (Hi);\n \n+         --  Check if there is an others choice\n+\n+         if Present (Component_Associations (N)) then\n+            declare\n+               Assoc   : Node_Id;\n+               Choice  : Node_Id;\n+\n+            begin\n+               Assoc := First (Component_Associations (N));\n+               while Present (Assoc) loop\n+                  Choice := First (Choices (Assoc));\n+\n+                  while Present (Choice) loop\n+                     if Nkind (Choice) = N_Others_Choice then\n+                        Others_Present := True;\n+                     end if;\n+\n+                     Next (Choice);\n+                  end loop;\n+\n+                  Next (Assoc);\n+               end loop;\n+            end;\n+         end if;\n+\n+         --  If the low bound is not known at compile time and others is not\n+         --  present we can proceed since the bounds can be obtained from the\n+         --  aggregate.\n+\n+         --  Note: This case is required in VM platforms since their backends\n+         --  normalize array indexes in the range 0 .. N-1. Hence, if we do\n+         --  not flat an array whose bounds cannot be obtained from the type\n+         --  of the index the backend has no way to properly generate the code.\n+         --  See ACATS c460010 for an example.\n+\n          if Hiv < Lov\n-           or else not Compile_Time_Known_Value (Blo)\n+           or else (not Compile_Time_Known_Value (Blo)\n+                     and then Others_Present)\n          then\n             return False;\n          end if;"}, {"sha": "a2c2bcc8d4c7bc4416f505786550e27c127d3a3a", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f5a8feea3381fb0311e4d1a264c0661f37432dd/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f5a8feea3381fb0311e4d1a264c0661f37432dd/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=3f5a8feea3381fb0311e4d1a264c0661f37432dd", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1808,6 +1808,13 @@ package body Exp_Attr is\n       when Attribute_Elab_Body |\n            Attribute_Elab_Spec =>\n \n+         --  Leave attribute unexpanded in CodePeer mode: the gnat2scil\n+         --  back-end knows how to handle this attribute directly.\n+\n+         if CodePeer_Mode then\n+            return;\n+         end if;\n+\n          Elab_Body : declare\n             Ent  : constant Entity_Id := Make_Temporary (Loc, 'E');\n             Str  : String_Id;"}, {"sha": "b08f530b434ccf910e9df7229d379a4c902a9766", "filename": "gcc/ada/g-pehage.adb", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f5a8feea3381fb0311e4d1a264c0661f37432dd/gcc%2Fada%2Fg-pehage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f5a8feea3381fb0311e4d1a264c0661f37432dd/gcc%2Fada%2Fg-pehage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-pehage.adb?ref=3f5a8feea3381fb0311e4d1a264c0661f37432dd", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2002-2010, AdaCore                     --\n+--                     Copyright (C) 2002-2011, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -103,7 +103,7 @@ package body GNAT.Perfect_Hash_Generators is\n    No_Table  : constant Table_Id  := -1;\n \n    type Word_Type is new String_Access;\n-   procedure Free_Word (W : in out Word_Type);\n+   procedure Free_Word (W : in out Word_Type) renames Free;\n    function New_Word (S : String) return Word_Type;\n \n    procedure Resize_Word (W : in out Word_Type; Len : Natural);\n@@ -913,8 +913,14 @@ package body GNAT.Perfect_Hash_Generators is\n       --  ones) to avoid memory leaks.\n \n       for W in 0 .. WT.Last loop\n-         Free_Word (WT.Table (W));\n+         --  Note: WT.Table (NK) is a temporary variable, do not free it since\n+         --  this would cause a double free.\n+\n+         if W /= NK then\n+            Free_Word (WT.Table (W));\n+         end if;\n       end loop;\n+\n       WT.Release;\n       IT.Release;\n \n@@ -948,17 +954,6 @@ package body GNAT.Perfect_Hash_Generators is\n       Min_Key_Len := 0;\n    end Finalize;\n \n-   ---------------\n-   -- Free_Word --\n-   ---------------\n-\n-   procedure Free_Word (W : in out Word_Type) is\n-   begin\n-      if W /= null then\n-         Free (W);\n-      end if;\n-   end Free_Word;\n-\n    ----------------------------\n    -- Generate_Mapping_Table --\n    ----------------------------\n@@ -1258,6 +1253,11 @@ package body GNAT.Perfect_Hash_Generators is\n       --  explicitly initialized to null.\n \n       WT.Set_Last (Reduced (NK - 1));\n+\n+      --  Note: Reduced (0) = NK + 1\n+\n+      WT.Table (NK) := null;\n+\n       for W in 0 .. NK - 1 loop\n          WT.Table (Reduced (W)) := null;\n       end loop;"}, {"sha": "db6bc56af605face8a65206e8daf5a904d0abdc0", "filename": "gcc/ada/s-tasinf-vxworks.ads", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f5a8feea3381fb0311e4d1a264c0661f37432dd/gcc%2Fada%2Fs-tasinf-vxworks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f5a8feea3381fb0311e4d1a264c0661f37432dd/gcc%2Fada%2Fs-tasinf-vxworks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasinf-vxworks.ads?ref=3f5a8feea3381fb0311e4d1a264c0661f37432dd", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -76,10 +76,7 @@ package System.Task_Info is\n    ------------------\n \n    subtype Task_Info_Type is Interfaces.C.int;\n-   --  This is a CPU number (positive)\n-\n-   Any_CPU : constant Task_Info_Type := 0;\n-   --  Allow task to run on any CPU\n+   --  This is a CPU number (natural - CPUs are 0-indexed on VxWorks)\n \n    use type Interfaces.C.int;\n "}, {"sha": "fddb704c96f1897502f9feb6dae0d7e787a88255", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 48, "deletions": 24, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f5a8feea3381fb0311e4d1a264c0661f37432dd/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f5a8feea3381fb0311e4d1a264c0661f37432dd/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=3f5a8feea3381fb0311e4d1a264c0661f37432dd", "patch": "@@ -688,9 +688,55 @@ package body Sem_Ch8 is\n       T   : Entity_Id;\n       T2  : Entity_Id;\n \n+      procedure Check_Constrained_Object;\n+      --  If the nominal type is unconstrained but the renamed object is\n+      --  constrained, as can happen with renaming an explicit dereference or\n+      --  a function return, build a constrained subtype from the object. If\n+      --  the renaming is for a formal in an accept statement, the analysis\n+      --  has already established its actual subtype. This is only relevant\n+      --  if the renamed object is an explicit dereference.\n+\n       function In_Generic_Scope (E : Entity_Id) return Boolean;\n       --  Determine whether entity E is inside a generic cope\n \n+      ------------------------------\n+      -- Check_Constrained_Object --\n+      ------------------------------\n+\n+      procedure Check_Constrained_Object is\n+         Loc  : constant Source_Ptr := Sloc (N);\n+         Subt : Entity_Id;\n+\n+      begin\n+         if (Nkind (Nam) = N_Function_Call\n+              or else Nkind (Nam) = N_Explicit_Dereference)\n+           and then Is_Composite_Type (Etype (Nam))\n+           and then not Is_Constrained (Etype (Nam))\n+           and then not Has_Unknown_Discriminants (Etype (Nam))\n+           and then Expander_Active\n+         then\n+            --  If Actual_Sbutype is already set, nothing to do.\n+\n+            if (Ekind (Id) = E_Variable\n+                 or else Ekind (Id) = E_Constant)\n+              and then Present (Actual_Subtype (Id))\n+            then\n+               null;\n+\n+            else\n+               Subt := Make_Temporary (Loc, 'T');\n+               Remove_Side_Effects (Nam);\n+               Insert_Action (N,\n+                 Make_Subtype_Declaration (Loc,\n+                   Defining_Identifier => Subt,\n+                   Subtype_Indication  =>\n+                     Make_Subtype_From_Expr (Nam, Etype (Nam))));\n+               Rewrite (Subtype_Mark (N), New_Occurrence_Of (Subt, Loc));\n+               Set_Etype (Nam, Subt);\n+            end if;\n+         end if;\n+      end Check_Constrained_Object;\n+\n       ----------------------\n       -- In_Generic_Scope --\n       ----------------------\n@@ -910,33 +956,11 @@ package body Sem_Ch8 is\n                      Nam);\n                end if;\n \n-               --  If the function call returns an unconstrained type, we must\n-               --  build a constrained subtype for the new entity, in a way\n-               --  similar to what is done for an object declaration with an\n-               --  unconstrained nominal type.\n-\n-               if Is_Composite_Type (Etype (Nam))\n-                 and then not Is_Constrained (Etype (Nam))\n-                 and then not Has_Unknown_Discriminants (Etype (Nam))\n-                 and then Expander_Active\n-               then\n-                  declare\n-                     Loc  : constant Source_Ptr := Sloc (N);\n-                     Subt : constant Entity_Id  := Make_Temporary (Loc, 'T');\n-                  begin\n-                     Remove_Side_Effects (Nam);\n-                     Insert_Action (N,\n-                       Make_Subtype_Declaration (Loc,\n-                         Defining_Identifier => Subt,\n-                         Subtype_Indication  =>\n-                           Make_Subtype_From_Expr (Nam, Etype (Nam))));\n-                     Rewrite (Subtype_Mark (N), New_Occurrence_Of (Subt, Loc));\n-                     Set_Etype (Nam, Subt);\n-                  end;\n-               end if;\n          end case;\n       end if;\n \n+      Check_Constrained_Object;\n+\n       --  An object renaming requires an exact match of the type. Class-wide\n       --  matching is not allowed.\n "}, {"sha": "2e292857e617bd9b9baf2ed2c290ba50dc0fa419", "filename": "gcc/ada/tracebak.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f5a8feea3381fb0311e4d1a264c0661f37432dd/gcc%2Fada%2Ftracebak.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f5a8feea3381fb0311e4d1a264c0661f37432dd/gcc%2Fada%2Ftracebak.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftracebak.c?ref=3f5a8feea3381fb0311e4d1a264c0661f37432dd", "patch": "@@ -219,7 +219,14 @@ struct layout\n \n #define FRAME_OFFSET(FP) 0\n #define PC_ADJUST -4\n-#define STOP_FRAME(CURRENT, TOP_STACK) ((void *) (CURRENT) < (TOP_STACK))\n+\n+/* Eventhough the base PPC ABI states that a toplevel frame entry\n+   should to feature a null backchain, AIX might expose a null return\n+   address instead.  */\n+\n+#define STOP_FRAME(CURRENT, TOP_STACK) \\\n+  (((void *) (CURRENT) < (TOP_STACK)) \\\n+   || (CURRENT)->return_address == NULL)\n \n /* The PPC ABI has an interesting specificity: the return address saved by a\n    function is located in it's caller's frame, and the save operation only"}]}