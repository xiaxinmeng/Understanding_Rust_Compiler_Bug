{"sha": "2025a48d089d09011b60c1f5eb981ef71c79be4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjAyNWE0OGQwODlkMDkwMTFiNjBjMWY1ZWI5ODFlZjcxYzc5YmU0ZQ==", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@vnet.ibm.com", "date": "2018-01-10T20:49:36Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@gcc.gnu.org", "date": "2018-01-10T20:49:36Z"}, "message": "re PR target/83399 (Power8 ICE During LRA with 2-op rtl pattern for lvx instruction)\n\ngcc/\n\tPR target/83399\n\t* config/rs6000/rs6000.c (print_operand) <'y'>: Use\n\tVECTOR_MEM_ALTIVEC_OR_VSX_P.\n\t* config/rs6000/vsx.md (*vsx_le_perm_load_<mode> for VSX_D): Use\n\tindexed_or_indirect_operand predicate.\n\t(*vsx_le_perm_load_<mode> for VSX_W): Likewise.\n\t(*vsx_le_perm_load_v8hi): Likewise.\n\t(*vsx_le_perm_load_v16qi): Likewise.\n\t(*vsx_le_perm_store_<mode> for VSX_D): Likewise.\n\t(*vsx_le_perm_store_<mode> for VSX_W): Likewise.\n\t(*vsx_le_perm_store_v8hi): Likewise.\n\t(*vsx_le_perm_store_v16qi): Likewise.\n\t(eight unnamed splitters): Likewise.\n\ngcc/testsuite/\n\tPR target/83399\n\t* gcc.target/powerpc/pr83399.c: New test.\n\nFrom-SVN: r256453", "tree": {"sha": "dd941c40ec43f7481695020d937b5a5fbb5072b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd941c40ec43f7481695020d937b5a5fbb5072b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2025a48d089d09011b60c1f5eb981ef71c79be4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2025a48d089d09011b60c1f5eb981ef71c79be4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2025a48d089d09011b60c1f5eb981ef71c79be4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2025a48d089d09011b60c1f5eb981ef71c79be4e/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9e0fa36ae82efe128f5dcbc85dc24365f7390fe1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e0fa36ae82efe128f5dcbc85dc24365f7390fe1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e0fa36ae82efe128f5dcbc85dc24365f7390fe1"}], "stats": {"total": 70, "additions": 53, "deletions": 17}, "files": [{"sha": "7a989b42c4c1cc51f9d9ac87483d03c347a0adc8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2025a48d089d09011b60c1f5eb981ef71c79be4e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2025a48d089d09011b60c1f5eb981ef71c79be4e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2025a48d089d09011b60c1f5eb981ef71c79be4e", "patch": "@@ -1,3 +1,19 @@\n+2018-01-10  Peter Bergner  <bergner@vnet.ibm.com>\n+\n+\tPR target/83399\n+\t* config/rs6000/rs6000.c (print_operand) <'y'>: Use\n+\tVECTOR_MEM_ALTIVEC_OR_VSX_P.\n+\t* config/rs6000/vsx.md (*vsx_le_perm_load_<mode> for VSX_D): Use\n+\tindexed_or_indirect_operand predicate.\n+\t(*vsx_le_perm_load_<mode> for VSX_W): Likewise.\n+\t(*vsx_le_perm_load_v8hi): Likewise.\n+\t(*vsx_le_perm_load_v16qi): Likewise.\n+\t(*vsx_le_perm_store_<mode> for VSX_D): Likewise.\n+\t(*vsx_le_perm_store_<mode> for VSX_W): Likewise.\n+\t(*vsx_le_perm_store_v8hi): Likewise.\n+\t(*vsx_le_perm_store_v16qi): Likewise.\n+\t(eight unnamed splitters): Likewise.\n+\n 2018-01-10  Peter Bergner  <bergner@vnet.ibm.com>\n \n \t* config/rs6000/x86intrin.h: Change #warning to #error. Update message."}, {"sha": "f3df0b984626897c279f22a9e37ef05cbceb560d", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2025a48d089d09011b60c1f5eb981ef71c79be4e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2025a48d089d09011b60c1f5eb981ef71c79be4e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=2025a48d089d09011b60c1f5eb981ef71c79be4e", "patch": "@@ -21671,7 +21671,7 @@ print_operand (FILE *file, rtx x, int code)\n \n \ttmp = XEXP (x, 0);\n \n-\tif (VECTOR_MEM_ALTIVEC_P (GET_MODE (x))\n+\tif (VECTOR_MEM_ALTIVEC_OR_VSX_P (GET_MODE (x))\n \t    && GET_CODE (tmp) == AND\n \t    && GET_CODE (XEXP (tmp, 1)) == CONST_INT\n \t    && INTVAL (XEXP (tmp, 1)) == -16)"}, {"sha": "e0d76b1e382bbceb6451352a5c7a6ff002dda2a3", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2025a48d089d09011b60c1f5eb981ef71c79be4e/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2025a48d089d09011b60c1f5eb981ef71c79be4e/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=2025a48d089d09011b60c1f5eb981ef71c79be4e", "patch": "@@ -431,7 +431,7 @@\n ;; VSX moves so they match first.\n (define_insn_and_split \"*vsx_le_perm_load_<mode>\"\n   [(set (match_operand:VSX_D 0 \"vsx_register_operand\" \"=<VSa>\")\n-        (match_operand:VSX_D 1 \"memory_operand\" \"Z\"))]\n+        (match_operand:VSX_D 1 \"indexed_or_indirect_operand\" \"Z\"))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\"\n   \"#\"\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\"\n@@ -454,7 +454,7 @@\n \n (define_insn_and_split \"*vsx_le_perm_load_<mode>\"\n   [(set (match_operand:VSX_W 0 \"vsx_register_operand\" \"=<VSa>\")\n-        (match_operand:VSX_W 1 \"memory_operand\" \"Z\"))]\n+        (match_operand:VSX_W 1 \"indexed_or_indirect_operand\" \"Z\"))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\"\n   \"#\"\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\"\n@@ -479,7 +479,7 @@\n \n (define_insn_and_split \"*vsx_le_perm_load_v8hi\"\n   [(set (match_operand:V8HI 0 \"vsx_register_operand\" \"=wa\")\n-        (match_operand:V8HI 1 \"memory_operand\" \"Z\"))]\n+        (match_operand:V8HI 1 \"indexed_or_indirect_operand\" \"Z\"))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\"\n   \"#\"\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\"\n@@ -508,7 +508,7 @@\n \n (define_insn_and_split \"*vsx_le_perm_load_v16qi\"\n   [(set (match_operand:V16QI 0 \"vsx_register_operand\" \"=wa\")\n-        (match_operand:V16QI 1 \"memory_operand\" \"Z\"))]\n+        (match_operand:V16QI 1 \"indexed_or_indirect_operand\" \"Z\"))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\"\n   \"#\"\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\"\n@@ -544,15 +544,15 @@\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"*vsx_le_perm_store_<mode>\"\n-  [(set (match_operand:VSX_D 0 \"memory_operand\" \"=Z\")\n+  [(set (match_operand:VSX_D 0 \"indexed_or_indirect_operand\" \"=Z\")\n         (match_operand:VSX_D 1 \"vsx_register_operand\" \"+<VSa>\"))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\"\n   \"#\"\n   [(set_attr \"type\" \"vecstore\")\n    (set_attr \"length\" \"12\")])\n \n (define_split\n-  [(set (match_operand:VSX_D 0 \"memory_operand\" \"\")\n+  [(set (match_operand:VSX_D 0 \"indexed_or_indirect_operand\" \"\")\n         (match_operand:VSX_D 1 \"vsx_register_operand\" \"\"))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR && !reload_completed\"\n   [(set (match_dup 2)\n@@ -571,7 +571,7 @@\n ;; The post-reload split requires that we re-permute the source\n ;; register in case it is still live.\n (define_split\n-  [(set (match_operand:VSX_D 0 \"memory_operand\" \"\")\n+  [(set (match_operand:VSX_D 0 \"indexed_or_indirect_operand\" \"\")\n         (match_operand:VSX_D 1 \"vsx_register_operand\" \"\"))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR && reload_completed\"\n   [(set (match_dup 1)\n@@ -589,15 +589,15 @@\n   \"\")\n \n (define_insn \"*vsx_le_perm_store_<mode>\"\n-  [(set (match_operand:VSX_W 0 \"memory_operand\" \"=Z\")\n+  [(set (match_operand:VSX_W 0 \"indexed_or_indirect_operand\" \"=Z\")\n         (match_operand:VSX_W 1 \"vsx_register_operand\" \"+<VSa>\"))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\"\n   \"#\"\n   [(set_attr \"type\" \"vecstore\")\n    (set_attr \"length\" \"12\")])\n \n (define_split\n-  [(set (match_operand:VSX_W 0 \"memory_operand\" \"\")\n+  [(set (match_operand:VSX_W 0 \"indexed_or_indirect_operand\" \"\")\n         (match_operand:VSX_W 1 \"vsx_register_operand\" \"\"))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR && !reload_completed\"\n   [(set (match_dup 2)\n@@ -618,7 +618,7 @@\n ;; The post-reload split requires that we re-permute the source\n ;; register in case it is still live.\n (define_split\n-  [(set (match_operand:VSX_W 0 \"memory_operand\" \"\")\n+  [(set (match_operand:VSX_W 0 \"indexed_or_indirect_operand\" \"\")\n         (match_operand:VSX_W 1 \"vsx_register_operand\" \"\"))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR && reload_completed\"\n   [(set (match_dup 1)\n@@ -639,15 +639,15 @@\n   \"\")\n \n (define_insn \"*vsx_le_perm_store_v8hi\"\n-  [(set (match_operand:V8HI 0 \"memory_operand\" \"=Z\")\n+  [(set (match_operand:V8HI 0 \"indexed_or_indirect_operand\" \"=Z\")\n         (match_operand:V8HI 1 \"vsx_register_operand\" \"+wa\"))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\"\n   \"#\"\n   [(set_attr \"type\" \"vecstore\")\n    (set_attr \"length\" \"12\")])\n \n (define_split\n-  [(set (match_operand:V8HI 0 \"memory_operand\" \"\")\n+  [(set (match_operand:V8HI 0 \"indexed_or_indirect_operand\" \"\")\n         (match_operand:V8HI 1 \"vsx_register_operand\" \"\"))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR && !reload_completed\"\n   [(set (match_dup 2)\n@@ -672,7 +672,7 @@\n ;; The post-reload split requires that we re-permute the source\n ;; register in case it is still live.\n (define_split\n-  [(set (match_operand:V8HI 0 \"memory_operand\" \"\")\n+  [(set (match_operand:V8HI 0 \"indexed_or_indirect_operand\" \"\")\n         (match_operand:V8HI 1 \"vsx_register_operand\" \"\"))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR && reload_completed\"\n   [(set (match_dup 1)\n@@ -699,15 +699,15 @@\n   \"\")\n \n (define_insn \"*vsx_le_perm_store_v16qi\"\n-  [(set (match_operand:V16QI 0 \"memory_operand\" \"=Z\")\n+  [(set (match_operand:V16QI 0 \"indexed_or_indirect_operand\" \"=Z\")\n         (match_operand:V16QI 1 \"vsx_register_operand\" \"+wa\"))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\"\n   \"#\"\n   [(set_attr \"type\" \"vecstore\")\n    (set_attr \"length\" \"12\")])\n \n (define_split\n-  [(set (match_operand:V16QI 0 \"memory_operand\" \"\")\n+  [(set (match_operand:V16QI 0 \"indexed_or_indirect_operand\" \"\")\n         (match_operand:V16QI 1 \"vsx_register_operand\" \"\"))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR && !reload_completed\"\n   [(set (match_dup 2)\n@@ -740,7 +740,7 @@\n ;; The post-reload split requires that we re-permute the source\n ;; register in case it is still live.\n (define_split\n-  [(set (match_operand:V16QI 0 \"memory_operand\" \"\")\n+  [(set (match_operand:V16QI 0 \"indexed_or_indirect_operand\" \"\")\n         (match_operand:V16QI 1 \"vsx_register_operand\" \"\"))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR && reload_completed\"\n   [(set (match_dup 1)"}, {"sha": "5fdb4701b06f8f1550cabd69164855e6374bd46e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2025a48d089d09011b60c1f5eb981ef71c79be4e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2025a48d089d09011b60c1f5eb981ef71c79be4e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2025a48d089d09011b60c1f5eb981ef71c79be4e", "patch": "@@ -1,3 +1,8 @@\n+2018-01-10  Peter Bergner  <bergner@vnet.ibm.com>\n+\n+\tPR target/83399\n+\t* gcc.target/powerpc/pr83399.c: New test.\n+\n 2018-01-10  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/43486"}, {"sha": "96d9b382184259e6f40d01e8acbc9697684ecf85", "filename": "gcc/testsuite/gcc.target/powerpc/pr83399.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2025a48d089d09011b60c1f5eb981ef71c79be4e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr83399.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2025a48d089d09011b60c1f5eb981ef71c79be4e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr83399.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr83399.c?ref=2025a48d089d09011b60c1f5eb981ef71c79be4e", "patch": "@@ -0,0 +1,15 @@\n+/* PR target/83399 */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-O1 -mabi=elfv2 -mlittle -mvsx\" } */\n+\n+typedef __attribute__((altivec(vector__))) int v4si_t;\n+int\n+foo (void)\n+{\n+  v4si_t a, u, v, y;\n+  u = __builtin_altivec_lvx (32, ((void *) &a) - 32);\n+  v = __builtin_altivec_lvx (64, ((void *) &a) - 32);\n+  y = u + v;\n+  return y[0];\n+}"}]}