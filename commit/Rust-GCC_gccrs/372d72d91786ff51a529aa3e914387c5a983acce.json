{"sha": "372d72d91786ff51a529aa3e914387c5a983acce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzcyZDcyZDkxNzg2ZmY1MWE1MjlhYTNlOTE0Mzg3YzVhOTgzYWNjZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2005-03-10T00:12:31Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-03-10T00:12:31Z"}, "message": "re PR inline-asm/20314 (Bogus differ in number of alternatives error)\n\n\tPR inline-asm/20314\n\t* gimplify.c (gimplify_asm_expr): Handle input/output constraints\n\twith multiple alternatives.\n\n\t* stmt.c (parse_output_constraint): Fix a typo.\n\n\t* gcc.dg/torture/pr20314-1.c: New test.\n\t* gcc.dg/torture/pr20314-2.c: New test.\n\nFrom-SVN: r96222", "tree": {"sha": "0f56e51681b1d311672d24291622c75a76181353", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f56e51681b1d311672d24291622c75a76181353"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/372d72d91786ff51a529aa3e914387c5a983acce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/372d72d91786ff51a529aa3e914387c5a983acce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/372d72d91786ff51a529aa3e914387c5a983acce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/372d72d91786ff51a529aa3e914387c5a983acce/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d5fc240649a04222d1b363d06b9cd749a7e260f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5fc240649a04222d1b363d06b9cd749a7e260f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5fc240649a04222d1b363d06b9cd749a7e260f1"}], "stats": {"total": 188, "additions": 185, "deletions": 3}, "files": [{"sha": "a55928f06bbe2c003b057fff7c7898afcb34a350", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/372d72d91786ff51a529aa3e914387c5a983acce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/372d72d91786ff51a529aa3e914387c5a983acce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=372d72d91786ff51a529aa3e914387c5a983acce", "patch": "@@ -1,3 +1,11 @@\n+2005-03-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR inline-asm/20314\n+\t* gimplify.c (gimplify_asm_expr): Handle input/output constraints\n+\twith multiple alternatives.\n+\n+\t* stmt.c (parse_output_constraint): Fix a typo.\n+\n 2005-03-09  Bob Wilson  <bob.wilson@acm.org>\n \n \t* config/xtensa/xtensa.h (TRAMPOLINE_TEMPLATE): Use \"no-transform\""}, {"sha": "341ca7baa3f5070adfc937f113443399640311a4", "filename": "gcc/gimplify.c", "status": "modified", "additions": 67, "deletions": 2, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/372d72d91786ff51a529aa3e914387c5a983acce/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/372d72d91786ff51a529aa3e914387c5a983acce/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=372d72d91786ff51a529aa3e914387c5a983acce", "patch": "@@ -3330,16 +3330,81 @@ gimplify_asm_expr (tree *expr_p, tree *pre_p, tree *post_p)\n \t  char *p = xstrdup (constraint);\n \t  p[0] = '=';\n \t  TREE_VALUE (TREE_PURPOSE (link)) = build_string (constraint_len, p);\n-\t  free (p);\n \n \t  /* And add a matching input constraint.  */\n \t  if (allows_reg)\n \t    {\n \t      sprintf (buf, \"%d\", i);\n-\t      input = build_string (strlen (buf), buf);\n+\n+\t      /* If there are multiple alternatives in the constraint,\n+\t\t handle each of them individually.  Those that allow register\n+\t\t will be replaced with operand number, the others will stay\n+\t\t unchanged.  */\n+\t      if (strchr (p, ',') != NULL)\n+\t\t{\n+\t\t  size_t len = 0, buflen = strlen (buf);\n+\t\t  char *beg, *end, *str, *dst;\n+\n+\t\t  for (beg = p + 1;;)\n+\t\t    {\n+\t\t      end = strchr (beg, ',');\n+\t\t      if (end == NULL)\n+\t\t\tend = strchr (beg, '\\0');\n+\t\t      if ((size_t) (end - beg) < buflen)\n+\t\t\tlen += buflen + 1;\n+\t\t      else\n+\t\t\tlen += end - beg + 1;\n+\t\t      if (*end)\n+\t\t\tbeg = end + 1;\n+\t\t      else\n+\t\t\tbreak;\n+\t\t    }\n+\n+\t\t  str = alloca (len);\n+\t\t  for (beg = p + 1, dst = str;;)\n+\t\t    {\n+\t\t      const char *tem;\n+\t\t      bool mem_p, reg_p, inout_p;\n+\n+\t\t      end = strchr (beg, ',');\n+\t\t      if (end)\n+\t\t\t*end = '\\0';\n+\t\t      beg[-1] = '=';\n+\t\t      tem = beg - 1;\n+\t\t      parse_output_constraint (&tem, i, 0, 0,\n+\t\t\t\t\t       &mem_p, &reg_p, &inout_p);\n+\t\t      if (dst != str)\n+\t\t\t*dst++ = ',';\n+\t\t      if (reg_p)\n+\t\t\t{\n+\t\t\t  memcpy (dst, buf, buflen);\n+\t\t\t  dst += buflen;\n+\t\t\t}\n+\t\t      else\n+\t\t\t{\n+\t\t\t  if (end)\n+\t\t\t    len = end - beg;\n+\t\t\t  else\n+\t\t\t    len = strlen (beg);\n+\t\t\t  memcpy (dst, beg, len);\n+\t\t\t  dst += len;\n+\t\t\t}\n+\t\t      if (end)\n+\t\t\tbeg = end + 1;\n+\t\t      else\n+\t\t\tbreak;\n+\t\t    }\n+\t\t  *dst = '\\0';\n+\t\t  input = build_string (dst - str, str);\n+\t\t}\n+\t      else\n+\t\tinput = build_string (strlen (buf), buf);\n \t    }\n \t  else\n \t    input = build_string (constraint_len - 1, constraint + 1);\n+\n+\t  free (p);\n+\n \t  input = build_tree_list (build_tree_list (NULL_TREE, input),\n \t\t\t\t   unshare_expr (TREE_VALUE (link)));\n \t  ASM_INPUTS (expr) = chainon (ASM_INPUTS (expr), input);"}, {"sha": "a23c23c0a6e47d0539a779593e90ae0a996d8d8e", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/372d72d91786ff51a529aa3e914387c5a983acce/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/372d72d91786ff51a529aa3e914387c5a983acce/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=372d72d91786ff51a529aa3e914387c5a983acce", "patch": "@@ -323,7 +323,7 @@ parse_output_constraint (const char **constraint_p, int operand_num,\n   *is_inout = (*p == '+');\n \n   /* Canonicalize the output constraint so that it begins with `='.  */\n-  if (p != constraint || is_inout)\n+  if (p != constraint || *is_inout)\n     {\n       char *buf;\n       size_t c_len = strlen (constraint);"}, {"sha": "53daac00c963c800f4d5f1e75e211670f790cc3c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/372d72d91786ff51a529aa3e914387c5a983acce/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/372d72d91786ff51a529aa3e914387c5a983acce/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=372d72d91786ff51a529aa3e914387c5a983acce", "patch": "@@ -1,3 +1,9 @@\n+2005-03-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR inline-asm/20314\n+\t* gcc.dg/torture/pr20314-1.c: New test.\n+\t* gcc.dg/torture/pr20314-2.c: New test.\n+\n 2005-03-09  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* gcc.dg/20050309-1.c: New test."}, {"sha": "8a69c2dcaf54569a00e823d5ec94c2dd4787838c", "filename": "gcc/testsuite/gcc.dg/torture/pr20314-1.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/372d72d91786ff51a529aa3e914387c5a983acce/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr20314-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/372d72d91786ff51a529aa3e914387c5a983acce/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr20314-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr20314-1.c?ref=372d72d91786ff51a529aa3e914387c5a983acce", "patch": "@@ -0,0 +1,56 @@\n+/* PR inline-asm/20314 */\n+/* { dg-do compile { target i?86-*-* x86_64-*-* powerpc*-*-* ia64-*-* } } */\n+\n+int\n+f1 (void)\n+{\n+  int x = 4, y;\n+  __asm__ volatile (\"\" : \"+r,r\" (x), \"=r,r\" (y)\n+\t\t       : \"%r,r\" (x), \"m,r\" (8), \"r,r\" (2));\n+  return x;\n+}\n+\n+int\n+f2 (void)\n+{\n+  int x = 4, y;\n+  __asm__ volatile (\"\" : \"=r,r\" (x), \"=r,r\" (y)\n+\t\t       : \"%0,0\" (x), \"m,r\" (8), \"r,r\" (2));\n+  return x;\n+}\n+\n+int\n+f3 (void)\n+{\n+  int x = 4, y;\n+  __asm__ volatile (\"\" : \"+r,r\" (x), \"=r,r\" (y)\n+\t\t       : \"%m,r\" (8), \"r,r\" (2));\n+  return x;\n+}\n+\n+int\n+f4 (void)\n+{\n+  int x = 4, y;\n+  __asm__ volatile (\"\" : \"+r\" (x), \"=r\" (y)\n+\t\t       : \"r\" (x), \"r\" (8), \"r\" (2));\n+  return x;\n+}\n+\n+int\n+f5 (void)\n+{\n+  int x = 4, y;\n+  __asm__ volatile (\"\" : \"=r\" (x), \"=r\" (y)\n+\t\t       : \"0\" (x), \"r\" (8), \"r\" (2));\n+  return x;\n+}\n+\n+int\n+f6 (void)\n+{\n+  int x = 4, y;\n+  __asm__ volatile (\"\" : \"+r\" (x), \"=r\" (y)\n+\t\t       : \"r\" (8), \"r\" (2));\n+  return x;\n+}"}, {"sha": "ad1b8f9724ab11246154331c8c44011773fdd995", "filename": "gcc/testsuite/gcc.dg/torture/pr20314-2.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/372d72d91786ff51a529aa3e914387c5a983acce/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr20314-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/372d72d91786ff51a529aa3e914387c5a983acce/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr20314-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr20314-2.c?ref=372d72d91786ff51a529aa3e914387c5a983acce", "patch": "@@ -0,0 +1,47 @@\n+/* PR inline-asm/20314 */\n+/* { dg-do compile { target { x86_64-*-* && lp64 } } } */\n+/* { dg-do compile { target ia64-*-* powerpc*-*-* } } */\n+\n+int a, b, c, d, e, f, g, h, i, j, k, l;\n+\n+void\n+f1 (void)\n+{\n+  __asm__ volatile (\"\"\n+\t\t    : [a] \"+r\" (a), [b] \"+r\" (b), [c] \"+r\" (c), [d] \"+r\" (d),\n+\t\t      [e] \"+r\" (e), [f] \"+r\" (f), [g] \"+r\" (g), [h] \"+r\" (h),\n+\t\t      [i] \"+r\" (i), [j] \"+r\" (j), [k] \"+r\" (k), [l] \"+r\" (l));\n+}\n+\n+void\n+f2 (void)\n+{\n+  __asm__ volatile (\"\"\n+\t\t    : [a] \"+r,m\" (a), [b] \"+r,m\" (b), [c] \"+r,m\" (c), [d] \"+r,m\" (d),\n+\t\t      [e] \"+r,m\" (e), [f] \"+r,m\" (f), [g] \"+r,m\" (g), [h] \"+r,m\" (h),\n+\t\t      [i] \"+r,m\" (i), [j] \"+r,m\" (j), [k] \"+r,m\" (k), [l] \"+r,m\" (l));\n+}\n+\n+void\n+f3 (void)\n+{\n+  __asm__ volatile (\"\"\n+\t\t    : [a] \"=r\" (a), [b] \"=r\" (b), [c] \"=r\" (c), [d] \"=r\" (d),\n+\t\t      [e] \"=r\" (e), [f] \"=r\" (f), [g] \"=r\" (g), [h] \"=r\" (h),\n+\t\t      [i] \"=r\" (i), [j] \"=r\" (j), [k] \"=r\" (k), [l] \"=r\" (l)\n+\t\t    : \"[a]\" (a), \"[b]\" (b), \"[c]\" (c), \"[d]\" (d),\n+\t\t      \"[e]\" (e), \"[f]\" (f), \"[g]\" (g), \"[h]\" (h),\n+\t\t      \"[i]\" (i), \"[j]\" (j), \"[k]\" (k), \"[l]\" (l));\n+}\n+\n+void\n+f4 (void)\n+{\n+  __asm__ volatile (\"\"\n+\t\t    : [a] \"=r,m\" (a), [b] \"=r,m\" (b), [c] \"=r,m\" (c), [d] \"=r,m\" (d),\n+\t\t      [e] \"=r,m\" (e), [f] \"=r,m\" (f), [g] \"=r,m\" (g), [h] \"=r,m\" (h),\n+\t\t      [i] \"=r,m\" (i), [j] \"=r,m\" (j), [k] \"=r,m\" (k), [l] \"=r,m\" (l)\n+\t\t    : \"[a],m\" (a), \"[b],m\" (b), \"[c],m\" (c), \"[d],m\" (d),\n+\t\t      \"[e],m\" (e), \"[f],m\" (f), \"[g],m\" (g), \"[h],m\" (h),\n+\t\t      \"[i],m\" (i), \"[j],m\" (j), \"[k],m\" (k), \"[l],m\" (l));\n+}"}]}