{"sha": "46ecc2bc5c8455615f9739847277cbc5fe746c25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZlY2MyYmM1Yzg0NTU2MTVmOTczOTg0NzI3N2NiYzVmZTc0NmMyNQ==", "commit": {"author": {"name": "David Daney", "email": "ddaney@avtrex.com", "date": "2007-03-23T00:06:41Z"}, "committer": {"name": "David Daney", "email": "daney@gcc.gnu.org", "date": "2007-03-23T00:06:41Z"}, "message": "re PR libgcj/31228 (Race condition between setting close-on-exec and Runtime.exec())\n\n\tPR libgcj/31228\n\t* configure.ac: Add checks for getrlimit and sys/resource.h.\n\t* include/posix.h (_Jv_platform_close_on_exec): Remove.\n\t* include/config.h.in: Regenerate.\n\t* configure: Regenerate.\n\t* gnu/java/nio/channels/natFileChannelPosix.cc (open): Remove call to\n\t_Jv_platform_close_on_exec;\n\t* gnu/java/net/natPlainSocketImplPosix.cc (create): Likewise.\n\t(accept): Likewise.\n\t* gnu/java/net/natPlainDatagramSocketImplPosix.cc (create):Likewise.\n\t* java/lang/natPosixProcess.cc: Include sys/resource.h.\n\t(nativeSpawn): Close all file descriptors.  Don't set FD_CLOEXEC on\n\tpipes.\n\nFrom-SVN: r123138", "tree": {"sha": "c1ef9bb4fb3b4432ae7bce87707fc879e3e8af77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1ef9bb4fb3b4432ae7bce87707fc879e3e8af77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46ecc2bc5c8455615f9739847277cbc5fe746c25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46ecc2bc5c8455615f9739847277cbc5fe746c25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46ecc2bc5c8455615f9739847277cbc5fe746c25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46ecc2bc5c8455615f9739847277cbc5fe746c25/comments", "author": null, "committer": null, "parents": [{"sha": "92ef5cf99970d490ebdd508c774b86bd4a821887", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92ef5cf99970d490ebdd508c774b86bd4a821887", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92ef5cf99970d490ebdd508c774b86bd4a821887"}], "stats": {"total": 86, "additions": 56, "deletions": 30}, "files": [{"sha": "281fb22fd388930d7376f7b215f05a5c9830a6e6", "filename": "libjava/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ecc2bc5c8455615f9739847277cbc5fe746c25/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ecc2bc5c8455615f9739847277cbc5fe746c25/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=46ecc2bc5c8455615f9739847277cbc5fe746c25", "patch": "@@ -1,3 +1,19 @@\n+2007-03-22  David Daney  <ddaney@avtrex.com>\n+\n+\tPR libgcj/31228\n+\t* configure.ac: Add checks for getrlimit and sys/resource.h.\n+\t* include/posix.h (_Jv_platform_close_on_exec): Remove.\n+\t* include/config.h.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* gnu/java/nio/channels/natFileChannelPosix.cc (open): Remove call to\n+\t_Jv_platform_close_on_exec;\n+\t* gnu/java/net/natPlainSocketImplPosix.cc (create): Likewise.\n+\t(accept): Likewise.\n+\t* gnu/java/net/natPlainDatagramSocketImplPosix.cc (create):Likewise.\n+\t* java/lang/natPosixProcess.cc: Include sys/resource.h.\n+\t(nativeSpawn): Close all file descriptors.  Don't set FD_CLOEXEC on\n+\tpipes.\n+\n 2007-03-20  Andrew Haley  <aph@redhat.com>\n \n \t* testsuite/libjava.lang/PR31264.java: New test."}, {"sha": "79806d34c76d45e7e3f9f86f9b1334c840db67eb", "filename": "libjava/configure", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ecc2bc5c8455615f9739847277cbc5fe746c25/libjava%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ecc2bc5c8455615f9739847277cbc5fe746c25/libjava%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure?ref=46ecc2bc5c8455615f9739847277cbc5fe746c25", "patch": "@@ -9600,14 +9600,15 @@ else\n \n \n \n+\n \n \n for ac_func in strerror ioctl select fstat open fsync sleep opendir \\\n                    gmtime_r localtime_r readdir_r getpwuid_r getcwd \\\n \t\t   access stat lstat mkdir rename rmdir unlink utime chmod readlink \\\n \t\t   nl_langinfo setlocale \\\n \t\t   inet_pton uname inet_ntoa \\\n-\t\t   fork execvp pipe sigaction ftruncate mmap \\\n+\t\t   fork execvp getrlimit pipe sigaction ftruncate mmap \\\n \t\t   getifaddrs\n do\n as_ac_var=`echo \"ac_cv_func_$ac_func\" | $as_tr_sh`\n@@ -10063,7 +10064,8 @@ done\n \n \n \n-for ac_header in execinfo.h unistd.h dlfcn.h\n+\n+for ac_header in execinfo.h unistd.h dlfcn.h sys/resource.h\n do\n as_ac_Header=`echo \"ac_cv_header_$ac_header\" | $as_tr_sh`\n if eval \"test \\\"\\${$as_ac_Header+set}\\\" = set\"; then"}, {"sha": "f5e27fab31307226420ccdaebec9aefeeca3f2be", "filename": "libjava/configure.ac", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ecc2bc5c8455615f9739847277cbc5fe746c25/libjava%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ecc2bc5c8455615f9739847277cbc5fe746c25/libjava%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.ac?ref=46ecc2bc5c8455615f9739847277cbc5fe746c25", "patch": "@@ -1006,10 +1006,10 @@ else\n \t\t   access stat lstat mkdir rename rmdir unlink utime chmod readlink \\\n \t\t   nl_langinfo setlocale \\\n \t\t   inet_pton uname inet_ntoa \\\n-\t\t   fork execvp pipe sigaction ftruncate mmap \\\n+\t\t   fork execvp getrlimit pipe sigaction ftruncate mmap \\\n \t\t   getifaddrs])\n    AC_CHECK_FUNCS(inet_aton inet_addr, break)\n-   AC_CHECK_HEADERS(execinfo.h unistd.h dlfcn.h)\n+   AC_CHECK_HEADERS(execinfo.h unistd.h dlfcn.h sys/resource.h)\n    # Do an additional check on dld, HP-UX for example has dladdr in libdld.sl\n    AC_CHECK_LIB(dl, dladdr, [\n        AC_DEFINE(HAVE_DLADDR, 1, [Define if you have dladdr()])], ["}, {"sha": "7cbf011ab50521d985f21549c72bbcb0d862b692", "filename": "libjava/gnu/java/net/natPlainDatagramSocketImplPosix.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ecc2bc5c8455615f9739847277cbc5fe746c25/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainDatagramSocketImplPosix.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ecc2bc5c8455615f9739847277cbc5fe746c25/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainDatagramSocketImplPosix.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainDatagramSocketImplPosix.cc?ref=46ecc2bc5c8455615f9739847277cbc5fe746c25", "patch": "@@ -83,8 +83,6 @@ gnu::java::net::PlainDatagramSocketImpl::create ()\n       throw new ::java::net::SocketException (JvNewStringUTF (strerr));\n     }\n \n-  _Jv_platform_close_on_exec (sock);\n-\n   // We use native_fd in place of fd here.  From leaving fd null we avoid\n   // the double close problem in FileDescriptor.finalize.\n   native_fd = sock;"}, {"sha": "d16f1d31f7b06adbb2c2560713760d6d7c5c2551", "filename": "libjava/gnu/java/net/natPlainSocketImplPosix.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ecc2bc5c8455615f9739847277cbc5fe746c25/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainSocketImplPosix.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ecc2bc5c8455615f9739847277cbc5fe746c25/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainSocketImplPosix.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainSocketImplPosix.cc?ref=46ecc2bc5c8455615f9739847277cbc5fe746c25", "patch": "@@ -72,8 +72,6 @@ gnu::java::net::PlainSocketImpl::create (jboolean stream)\n       throw new ::java::io::IOException (JvNewStringUTF (strerr));\n     }\n \n-  _Jv_platform_close_on_exec (sock);\n-\n   // We use native_fd in place of fd here.  From leaving fd null we avoid\n   // the double close problem in FileDescriptor.finalize.\n   native_fd = sock;\n@@ -285,8 +283,6 @@ gnu::java::net::PlainSocketImpl::accept (gnu::java::net::PlainSocketImpl *s)\n   if (new_socket < 0)\n     goto error;\n \n-  _Jv_platform_close_on_exec (new_socket);\n-\n   jbyteArray raddr;\n   jint rport;\n   if (u.address.sin_family == AF_INET)"}, {"sha": "52caf828345c173b324ff3a129deb4904b7eeb71", "filename": "libjava/gnu/java/nio/channels/natFileChannelPosix.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ecc2bc5c8455615f9739847277cbc5fe746c25/libjava%2Fgnu%2Fjava%2Fnio%2Fchannels%2FnatFileChannelPosix.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ecc2bc5c8455615f9739847277cbc5fe746c25/libjava%2Fgnu%2Fjava%2Fnio%2Fchannels%2FnatFileChannelPosix.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2Fchannels%2FnatFileChannelPosix.cc?ref=46ecc2bc5c8455615f9739847277cbc5fe746c25", "patch": "@@ -178,8 +178,6 @@ FileChannelImpl::open (jstring path, jint jflags)\n       throw new ::java::io::FileNotFoundException (msg->toString ());\n     }\n \n-  _Jv_platform_close_on_exec (fd);\n-\n   return fd;\n }\n "}, {"sha": "f0919e2673cf9cfc2d6770dd680cf181344efdd6", "filename": "libjava/include/config.h.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ecc2bc5c8455615f9739847277cbc5fe746c25/libjava%2Finclude%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ecc2bc5c8455615f9739847277cbc5fe746c25/libjava%2Finclude%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fconfig.h.in?ref=46ecc2bc5c8455615f9739847277cbc5fe746c25", "patch": "@@ -127,6 +127,9 @@\n /* Define to 1 if you have the `getpwuid_r' function. */\n #undef HAVE_GETPWUID_R\n \n+/* Define to 1 if you have the `getrlimit' function. */\n+#undef HAVE_GETRLIMIT\n+\n /* Define to 1 if you have the `gettimeofday' function. */\n #undef HAVE_GETTIMEOFDAY\n \n@@ -316,6 +319,9 @@\n /* Define to 1 if you have the <sys/ioctl.h> header file. */\n #undef HAVE_SYS_IOCTL_H\n \n+/* Define to 1 if you have the <sys/resource.h> header file. */\n+#undef HAVE_SYS_RESOURCE_H\n+\n /* Define to 1 if you have the <sys/rw_lock.h> header file. */\n #undef HAVE_SYS_RW_LOCK_H\n "}, {"sha": "5f522a3804aff679fe521598cfc90444e22e1281", "filename": "libjava/include/posix.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ecc2bc5c8455615f9739847277cbc5fe746c25/libjava%2Finclude%2Fposix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ecc2bc5c8455615f9739847277cbc5fe746c25/libjava%2Finclude%2Fposix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fposix.h?ref=46ecc2bc5c8455615f9739847277cbc5fe746c25", "patch": "@@ -98,15 +98,6 @@ extern jlong _Jv_platform_nanotime ();\n extern void _Jv_platform_initialize (void);\n extern void _Jv_platform_initProperties (java::util::Properties*);\n \n-inline void\n-_Jv_platform_close_on_exec (jint fd)\n-{\n-  // Ignore errors.\n-  ::fcntl (fd, F_SETFD, FD_CLOEXEC);\n-}\n-\n-#undef fcntl\n-\n #ifdef JV_HASH_SYNCHRONIZATION\n #ifndef HAVE_USLEEP_DECL\n extern \"C\" int usleep (useconds_t useconds);"}, {"sha": "6763273546cc5d68c48b19ad0418a1cf10fc9846", "filename": "libjava/java/lang/natPosixProcess.cc", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ecc2bc5c8455615f9739847277cbc5fe746c25/libjava%2Fjava%2Flang%2FnatPosixProcess.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ecc2bc5c8455615f9739847277cbc5fe746c25/libjava%2Fjava%2Flang%2FnatPosixProcess.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatPosixProcess.cc?ref=46ecc2bc5c8455615f9739847277cbc5fe746c25", "patch": "@@ -17,6 +17,9 @@ details.  */\n #include <fcntl.h>\n #include <sys/types.h>\n #include <sys/wait.h>\n+#ifdef HAVE_SYS_RESOURCE_H\n+#include <sys/resource.h>\n+#endif\n #include <signal.h>\n #include <string.h>\n #include <stdlib.h>\n@@ -352,7 +355,31 @@ java::lang::PosixProcess::nativeSpawn ()\n \t\t  _exit (127);\n \t\t}\n \t    }\n-\n+          // Make sure all file descriptors are closed.  In\n+          // multi-threaded programs, there is a race between when a\n+          // descriptor is obtained, when we can set FD_CLOEXEC, and\n+          // fork().  If the fork occurs before FD_CLOEXEC is set, the\n+          // descriptor would leak to the execed process if we did not\n+          // manually close it.  So that is what we do.  Since we\n+          // close all the descriptors, it is redundant to set\n+          // FD_CLOEXEC on them elsewhere.\n+          int max_fd;\n+#ifdef HAVE_GETRLIMIT\n+          rlimit rl;\n+          int rv = getrlimit(RLIMIT_NOFILE, &rl);\n+          if (rv == 0)\n+            max_fd = rl.rlim_max - 1;\n+          else\n+            max_fd = 1024 - 1;\n+#else\n+          max_fd = 1024 - 1;\n+#endif\n+          while(max_fd > 2)\n+            {\n+              if (max_fd != msgp[1])\n+                close (max_fd);\n+              max_fd--;\n+            }\n \t  // Make sure that SIGCHLD is unblocked for the new process.\n \t  sigset_t mask;\n \t  sigemptyset (&mask);\n@@ -438,12 +465,4 @@ java::lang::PosixProcess::nativeSpawn ()\n \n   myclose (msgp[0]);\n   cleanup (args, env, path);\n-\n-  if (exception == NULL)\n-    {\n-      fcntl (outp[1], F_SETFD, FD_CLOEXEC);\n-      fcntl (inp[0], F_SETFD, FD_CLOEXEC);\n-      if (! redirect)\n-\tfcntl (errp[0], F_SETFD, FD_CLOEXEC);\n-    }\n }"}]}