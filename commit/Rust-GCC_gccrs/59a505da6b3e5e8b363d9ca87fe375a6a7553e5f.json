{"sha": "59a505da6b3e5e8b363d9ca87fe375a6a7553e5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTlhNTA1ZGE2YjNlNWU4YjM2M2Q5Y2E4N2ZlMzc1YTZhNzU1M2U1Zg==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2017-01-12T22:02:57Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2017-01-12T22:02:57Z"}, "message": "re PR target/79004 (ICE in gcc.dg/torture/fp-int-convert-float128-ieee.c with -mcpu=power9)\n\n[gcc]\n2017-01-12  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/79004\n\t* config/rs6000/rs6000.md (FP_ISA3): Do not optimize converting\n\tchar or short to __float128/_Float128 directly.\n\n[gcc/testsuite]\n2017-01-12  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/79004\n\t* gcc.target/powerpc/pr79004.c: New test.\n\nFrom-SVN: r244386", "tree": {"sha": "00ddb5ee056560835990fc40509a5d43b93436d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00ddb5ee056560835990fc40509a5d43b93436d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59a505da6b3e5e8b363d9ca87fe375a6a7553e5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59a505da6b3e5e8b363d9ca87fe375a6a7553e5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59a505da6b3e5e8b363d9ca87fe375a6a7553e5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59a505da6b3e5e8b363d9ca87fe375a6a7553e5f/comments", "author": null, "committer": null, "parents": [{"sha": "bce6f76013fd5f2e88a235231231c7879597220c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bce6f76013fd5f2e88a235231231c7879597220c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bce6f76013fd5f2e88a235231231c7879597220c"}], "stats": {"total": 133, "additions": 129, "deletions": 4}, "files": [{"sha": "a635cc7d5698bbc78b9cf166771d0428f304722d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a505da6b3e5e8b363d9ca87fe375a6a7553e5f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a505da6b3e5e8b363d9ca87fe375a6a7553e5f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=59a505da6b3e5e8b363d9ca87fe375a6a7553e5f", "patch": "@@ -1,3 +1,9 @@\n+2017-01-12  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/79004\n+\t* config/rs6000/rs6000.md (FP_ISA3): Do not optimize converting\n+\tchar or short to __float128/_Float128 directly.\n+\n 2017-01-12  Martin Sebor  <msebor@redhat.com>\n \n \tto -Wformat-overflow."}, {"sha": "a094b92a96e81a27ce028f347bdbd1a4c7fc3704", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a505da6b3e5e8b363d9ca87fe375a6a7553e5f/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a505da6b3e5e8b363d9ca87fe375a6a7553e5f/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=59a505da6b3e5e8b363d9ca87fe375a6a7553e5f", "patch": "@@ -521,10 +521,7 @@\n \t\t\t       (TF \"FLOAT128_VECTOR_P (TFmode)\")])\n \n ; Iterator for ISA 3.0 supported floating point types\n-(define_mode_iterator FP_ISA3 [SF\n-\t\t\t       DF\n-\t\t\t       (KF \"FLOAT128_IEEE_P (KFmode)\")\n-\t\t\t       (TF \"FLOAT128_IEEE_P (TFmode)\")])\n+(define_mode_iterator FP_ISA3 [SF DF])\n \n ; SF/DF suffix for traditional floating instructions\n (define_mode_attr Ftrad\t\t[(SF \"s\") (DF \"\")])"}, {"sha": "e5b0f067362b9bd1e2fbb5968db8640f3dc3c7b3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a505da6b3e5e8b363d9ca87fe375a6a7553e5f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a505da6b3e5e8b363d9ca87fe375a6a7553e5f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=59a505da6b3e5e8b363d9ca87fe375a6a7553e5f", "patch": "@@ -1,3 +1,7 @@\n+2017-01-12  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/79004\n+\t* gcc.target/powerpc/pr79004.c: New test.\n 2017-01-12  Martin Sebor  <msebor@redhat.com>\n \n \t* gcc.dg/pr78138.c: Adjust."}, {"sha": "0c2dfe8edf7b83d28b9d394143d1ac347be0c780", "filename": "gcc/testsuite/gcc.target/powerpc/pr79004.c", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a505da6b3e5e8b363d9ca87fe375a6a7553e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr79004.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a505da6b3e5e8b363d9ca87fe375a6a7553e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr79004.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr79004.c?ref=59a505da6b3e5e8b363d9ca87fe375a6a7553e5f", "patch": "@@ -0,0 +1,118 @@\n+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-options \"-mcpu=power9 -O2\" } */\n+\n+#include <math.h>\n+\n+#ifndef TYPE\n+#define TYPE __float128\n+#endif\n+\n+TYPE from_double (double a) { return (TYPE)a; }\n+TYPE from_single (float a) { return (TYPE)a; }\n+\n+TYPE from_double_load (double *a) { return (TYPE)*a; }\n+TYPE from_single_load (float *a) { return (TYPE)*a; }\n+\n+double to_double (TYPE a) { return (double)a; }\n+float to_single (TYPE a) { return (float)a; }\n+\n+void to_double_store (TYPE a, double *p) { *p = (double)a; }\n+void to_single_store (TYPE a, float *p) { *p = (float)a; }\n+\n+TYPE from_sign_char (signed char a) { return (TYPE)a; }\n+TYPE from_sign_short (short a) { return (TYPE)a; }\n+TYPE from_sign_int (int a) { return (TYPE)a; }\n+TYPE from_sign_long (long a) { return (TYPE)a; }\n+\n+TYPE from_sign_char_load (signed char *a) { return (TYPE)*a; }\n+TYPE from_sign_short_load (short *a) { return (TYPE)*a; }\n+TYPE from_sign_int_load (int *a) { return (TYPE)*a; }\n+TYPE from_sign_long_load (long *a) { return (TYPE)*a; }\n+\n+TYPE from_sign_char_load_4 (signed char *a) { return (TYPE)a[4]; }\n+TYPE from_sign_short_load_4 (short *a) { return (TYPE)a[4]; }\n+TYPE from_sign_int_load_4 (int *a) { return (TYPE)a[4]; }\n+TYPE from_sign_long_load_4 (long *a) { return (TYPE)a[4]; }\n+\n+TYPE from_sign_char_load_n (signed char *a, long n) { return (TYPE)a[n]; }\n+TYPE from_sign_short_load_n (short *a, long n) { return (TYPE)a[n]; }\n+TYPE from_sign_int_load_n (int *a, long n) { return (TYPE)a[n]; }\n+TYPE from_sign_long_load_n (long *a, long n) { return (TYPE)a[n]; }\n+\n+signed char to_sign_char (TYPE a) { return (signed char)a; }\n+short to_sign_short (TYPE a) { return (short)a; }\n+int to_sign_int (TYPE a) { return (int)a; }\n+long to_sign_long (TYPE a) { return (long)a; }\n+\n+void to_sign_char_store (TYPE a, signed char *p) { *p = (signed char)a; }\n+void to_sign_short_store (TYPE a, short *p) { *p = (short)a; }\n+void to_sign_int_store (TYPE a, int *p) { *p = (int)a; }\n+void to_sign_long_store (TYPE a, long *p) { *p = (long)a; }\n+\n+void to_sign_char_store_4 (TYPE a, signed char *p) { p[4] = (signed char)a; }\n+void to_sign_short_store_4 (TYPE a, short *p) { p[4] = (short)a; }\n+void to_sign_int_store_4 (TYPE a, int *p) { p[4] = (int)a; }\n+void to_sign_long_store_4 (TYPE a, long *p) { p[4] = (long)a; }\n+\n+void to_sign_char_store_n (TYPE a, signed char *p, long n) { p[n] = (signed char)a; }\n+void to_sign_short_store_n (TYPE a, short *p, long n) { p[n] = (short)a; }\n+void to_sign_int_store_n (TYPE a, int *p, long n) { p[n] = (int)a; }\n+void to_sign_long_store_n (TYPE a, long *p, long n) { p[n] = (long)a; }\n+\n+TYPE from_uns_char (unsigned char a) { return (TYPE)a; }\n+TYPE from_uns_short (unsigned short a) { return (TYPE)a; }\n+TYPE from_uns_int (unsigned int a) { return (TYPE)a; }\n+TYPE from_uns_long (unsigned long a) { return (TYPE)a; }\n+\n+TYPE from_uns_char_load (unsigned char *a) { return (TYPE)*a; }\n+TYPE from_uns_short_load (unsigned short *a) { return (TYPE)*a; }\n+TYPE from_uns_int_load (unsigned int *a) { return (TYPE)*a; }\n+TYPE from_uns_long_load (unsigned long *a) { return (TYPE)*a; }\n+\n+TYPE from_uns_char_load_4 (unsigned char *a) { return (TYPE)a[4]; }\n+TYPE from_uns_short_load_4 (unsigned short *a) { return (TYPE)a[4]; }\n+TYPE from_uns_int_load_4 (unsigned int *a) { return (TYPE)a[4]; }\n+TYPE from_uns_long_load_4 (unsigned long *a) { return (TYPE)a[4]; }\n+\n+TYPE from_uns_char_load_n (unsigned char *a, long n) { return (TYPE)a[n]; }\n+TYPE from_uns_short_load_n (unsigned short *a, long n) { return (TYPE)a[n]; }\n+TYPE from_uns_int_load_n (unsigned int *a, long n) { return (TYPE)a[n]; }\n+TYPE from_uns_long_load_n (unsigned long *a, long n) { return (TYPE)a[n]; }\n+\n+unsigned char to_uns_char (TYPE a) { return (unsigned char)a; }\n+unsigned short to_uns_short (TYPE a) { return (unsigned short)a; }\n+unsigned int to_uns_int (TYPE a) { return (unsigned int)a; }\n+unsigned long to_uns_long (TYPE a) { return (unsigned long)a; }\n+\n+void to_uns_char_store (TYPE a, unsigned char *p) { *p = (unsigned char)a; }\n+void to_uns_short_store (TYPE a, unsigned short *p) { *p = (unsigned short)a; }\n+void to_uns_int_store (TYPE a, unsigned int *p) { *p = (unsigned int)a; }\n+void to_uns_long_store (TYPE a, unsigned long *p) { *p = (unsigned long)a; }\n+\n+void to_uns_char_store_4 (TYPE a, unsigned char *p) { p[4] = (unsigned char)a; }\n+void to_uns_short_store_4 (TYPE a, unsigned short *p) { p[4] = (unsigned short)a; }\n+void to_uns_int_store_4 (TYPE a, unsigned int *p) { p[4] = (unsigned int)a; }\n+void to_uns_long_store_4 (TYPE a, unsigned long *p) { p[4] = (unsigned long)a; }\n+\n+void to_uns_char_store_n (TYPE a, unsigned char *p, long n) { p[n] = (unsigned char)a; }\n+void to_uns_short_store_n (TYPE a, unsigned short *p, long n) { p[n] = (unsigned short)a; }\n+void to_uns_int_store_n (TYPE a, unsigned int *p, long n) { p[n] = (unsigned int)a; }\n+void to_uns_long_store_n (TYPE a, unsigned long *p, long n) { p[n] = (unsigned long)a; }\n+\n+/* { dg-final { scan-assembler-not \"\\mbl __\"       } } */\n+/* { dg-final { scan-assembler     \"\\mxscvdpqp\\M\"  } } */\n+/* { dg-final { scan-assembler     \"\\mxscvqpdp\\M\"  } } */\n+/* { dg-final { scan-assembler     \"\\mxscvqpdpo\\M\" } } */\n+/* { dg-final { scan-assembler     \"\\mxscvqpsdz\\M\" } } */\n+/* { dg-final { scan-assembler     \"\\mxscvqpswz\\M\" } } */\n+/* { dg-final { scan-assembler     \"\\mxscvsdqp\\M\"  } } */\n+/* { dg-final { scan-assembler     \"\\mxscvudqp\\M\"  } } */\n+/* { dg-final { scan-assembler     \"\\mlxsd\\M\"      } } */\n+/* { dg-final { scan-assembler     \"\\mlxsiwax\\M\"   } } */\n+/* { dg-final { scan-assembler     \"\\mlxsiwzx\\M\"   } } */\n+/* { dg-final { scan-assembler     \"\\mlxssp\\M\"     } } */\n+/* { dg-final { scan-assembler     \"\\mstxsd\\M\"     } } */\n+/* { dg-final { scan-assembler     \"\\mstxsiwx\\M\"   } } */\n+/* { dg-final { scan-assembler     \"\\mstxssp\\M\"    } } */"}]}