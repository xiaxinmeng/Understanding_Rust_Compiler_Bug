{"sha": "1d6657b0c0ee30abb4379edab4e9d208f56ad68e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ2NjU3YjBjMGVlMzBhYmI0Mzc5ZWRhYjRlOWQyMDhmNTZhZDY4ZQ==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-04-12T20:59:43Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-04-12T20:59:43Z"}, "message": "c_by_val.c: Use GCC extensions instead of including <complex.h>.\n\n\t* gfortran.dg/c_by_val.c: Use GCC extensions instead of including\n\t<complex.h>.\n\nFrom-SVN: r123768", "tree": {"sha": "6b73a00c7984ce14cd0f3f9f7abe58629dda637e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b73a00c7984ce14cd0f3f9f7abe58629dda637e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d6657b0c0ee30abb4379edab4e9d208f56ad68e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d6657b0c0ee30abb4379edab4e9d208f56ad68e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d6657b0c0ee30abb4379edab4e9d208f56ad68e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d6657b0c0ee30abb4379edab4e9d208f56ad68e/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5a31c9b43237577337b3ab4f27f9f43c4316ec6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5a31c9b43237577337b3ab4f27f9f43c4316ec6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5a31c9b43237577337b3ab4f27f9f43c4316ec6"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "269cc6f08d50e7077006ab6dd291f664a6f038f8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d6657b0c0ee30abb4379edab4e9d208f56ad68e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d6657b0c0ee30abb4379edab4e9d208f56ad68e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1d6657b0c0ee30abb4379edab4e9d208f56ad68e", "patch": "@@ -1,3 +1,8 @@\n+2007-04-12  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* gfortran.dg/c_by_val.c: Use GCC extensions instead of including\n+\t<complex.h>.\n+\n 2007-04-12  Tobias Schl\ufffdter  <tobi@gcc.gnu.org>\n \n \tPR fortran/31250"}, {"sha": "617668619614587c08cb01ba9cc2f61112a4b2d7", "filename": "gcc/testsuite/gfortran.dg/c_by_val.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d6657b0c0ee30abb4379edab4e9d208f56ad68e/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_by_val.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d6657b0c0ee30abb4379edab4e9d208f56ad68e/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_by_val.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_by_val.c?ref=1d6657b0c0ee30abb4379edab4e9d208f56ad68e", "patch": "@@ -1,14 +1,18 @@\n /*  Passing from fortran to C by value, using %VAL.  */\n \n #include <inttypes.h>\n-#include <complex.h>\n+\n+/* We used to #include <complex.h>, but this fails for some platforms\n+   (like cygwin) who don't have it yet.  */\n+#define complex __complex__\n+#define _Complex_I (1.0iF)\n \n extern void f_to_f__ (float*, float, float*, float**);\n extern void f_to_f8__ (double*, double, double*, double**);\n extern void i_to_i__ (int*, int, int*, int**);\n extern void i_to_i8__ (int64_t*, int64_t, int64_t*, int64_t**);\n-extern void c_to_c__ (float _Complex*, float _Complex, float _Complex*, float _Complex**);\n-extern void c_to_c8__ (double _Complex*, double _Complex, double _Complex*, double _Complex**);\n+extern void c_to_c__ (complex float*, complex float, complex float*, complex float**);\n+extern void c_to_c8__ (complex double*, complex double, complex double*, complex double**);\n extern void abort (void);\n \n void\n@@ -52,7 +56,7 @@ i_to_i8__(int64_t *retval, int64_t i1, int64_t *i2, int64_t **i3)\n }\n \n void\n-c_to_c__(float _Complex *retval, float _Complex c1, float _Complex *c2, float _Complex **c3)\n+c_to_c__(complex float *retval, complex float c1, complex float *c2, complex float **c3)\n {\n   if ( c1 != *c2    ) abort();\n   if ( c1 != *(*c3) ) abort();\n@@ -62,7 +66,7 @@ c_to_c__(float _Complex *retval, float _Complex c1, float _Complex *c2, float _C\n }\n \n void\n-c_to_c8__(double _Complex *retval, double _Complex c1, double _Complex *c2, double _Complex **c3)\n+c_to_c8__(complex double *retval, complex double c1, complex double *c2, complex double **c3)\n {\n   if ( c1 != *c2    ) abort();\n   if ( c1 != *(*c3) ) abort();"}]}