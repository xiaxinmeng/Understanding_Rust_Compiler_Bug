{"sha": "30bd42b979140de02d343bb1014e9aece2e683c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBiZDQyYjk3OTE0MGRlMDJkMzQzYmIxMDE0ZTlhZWNlMmU2ODNjMQ==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2018-12-06T17:47:52Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2018-12-06T17:47:52Z"}, "message": "asm qualifiers (PR55681)\n\nPR55681 observes that currently only one qualifier is allowed for\ninline asm, so that e.g. \"volatile asm\" is allowed, \"const asm\" is also\nokay (with a warning), but \"const volatile asm\" gives an error.  Also\n\"goto\" has to be last.\n\nThis patch changes things so that only \"asm-qualifiers\" are allowed,\nthat is \"volatile\" and \"goto\", in any combination, in any order, but\nwithout repetitions.\n\n\n\tPR inline-asm/55681\n\t* doc/extend.texi (Basic Asm): Update grammar.\n\t(Extended Asm): Update grammar.\n\ngcc/c/\n\tPR inline-asm/55681\n\t* c-parser.c (c_parser_asm_statement): Update grammar.  Allow any\n\tcombination of volatile and goto, in any order, without repetitions.\n\ngcc/cp/\n\tPR inline-asm/55681\n\t* parser.c (cp_parser_asm_definition): Update grammar.  Allow any\n\tcombination of volatile and goto, in any order, without repetitions.\n\ngcc/testsuite/\n\tPR inline-asm/55681\n\t* gcc.dg/asm-qual-1.c: Test that \"const\" and \"restrict\" are refused.\n\t* gcc.dg/asm-qual-2.c: New test, test that asm-qualifiers are allowed\n\tin any order, but that duplicates are not allowed.\n\nFrom-SVN: r266859", "tree": {"sha": "9425afdd3c7769016beca989282d7389695f48ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9425afdd3c7769016beca989282d7389695f48ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30bd42b979140de02d343bb1014e9aece2e683c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30bd42b979140de02d343bb1014e9aece2e683c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30bd42b979140de02d343bb1014e9aece2e683c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30bd42b979140de02d343bb1014e9aece2e683c1/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "415937b37d77d7a8ec11273060d45a04b1f3ca62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/415937b37d77d7a8ec11273060d45a04b1f3ca62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/415937b37d77d7a8ec11273060d45a04b1f3ca62"}], "stats": {"total": 215, "additions": 152, "deletions": 63}, "files": [{"sha": "acf327cd8ca6832dd4c35f36eb8e15a36dd7d17b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30bd42b979140de02d343bb1014e9aece2e683c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30bd42b979140de02d343bb1014e9aece2e683c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=30bd42b979140de02d343bb1014e9aece2e683c1", "patch": "@@ -1,3 +1,9 @@\n+2018-12-06  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR inline-asm/55681\n+\t* doc/extend.texi (Basic Asm): Update grammar.\n+\t(Extended Asm): Update grammar.\n+\n 2018-12-06  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR target/78444"}, {"sha": "c54223de26d2e3b7e5eda204f5c5f1254f4e635f", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30bd42b979140de02d343bb1014e9aece2e683c1/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30bd42b979140de02d343bb1014e9aece2e683c1/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=30bd42b979140de02d343bb1014e9aece2e683c1", "patch": "@@ -1,3 +1,9 @@\n+2018-12-06  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR inline-asm/55681\n+\t* c-parser.c (c_parser_asm_statement): Update grammar.  Allow any\n+\tcombination of volatile and goto, in any order, without repetitions.\n+\n 2018-12-04  James Norris  <jnorris@codesourcery.com>\n \t    Cesar Philippidis  <cesar@codesourcery.com>\n \t    Julian Brown  <julian@codesourcery.com>"}, {"sha": "a4a8745acffb1d391e74b6ab80c6c42eb94dd429", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 43, "deletions": 31, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30bd42b979140de02d343bb1014e9aece2e683c1/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30bd42b979140de02d343bb1014e9aece2e683c1/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=30bd42b979140de02d343bb1014e9aece2e683c1", "patch": "@@ -6329,60 +6329,72 @@ c_parser_for_statement (c_parser *parser, bool ivdep, unsigned short unroll,\n }\n \n /* Parse an asm statement, a GNU extension.  This is a full-blown asm\n-   statement with inputs, outputs, clobbers, and volatile tag\n+   statement with inputs, outputs, clobbers, and volatile and goto tag\n    allowed.\n \n+   asm-qualifier:\n+     volatile\n+     goto\n+\n+   asm-qualifier-list:\n+     asm-qualifier-list asm-qualifier\n+     asm-qualifier\n+\n    asm-statement:\n-     asm type-qualifier[opt] ( asm-argument ) ;\n-     asm type-qualifier[opt] goto ( asm-goto-argument ) ;\n+     asm asm-qualifier-list[opt] ( asm-argument ) ;\n \n    asm-argument:\n      asm-string-literal\n      asm-string-literal : asm-operands[opt]\n      asm-string-literal : asm-operands[opt] : asm-operands[opt]\n-     asm-string-literal : asm-operands[opt] : asm-operands[opt] : asm-clobbers[opt]\n-\n-   asm-goto-argument:\n+     asm-string-literal : asm-operands[opt] : asm-operands[opt] \\\n+       : asm-clobbers[opt]\n      asm-string-literal : : asm-operands[opt] : asm-clobbers[opt] \\\n        : asm-goto-operands\n \n-   Qualifiers other than volatile are accepted in the syntax but\n-   warned for.  */\n+   The form with asm-goto-operands is valid if and only if the\n+   asm-qualifier-list contains goto, and is the only allowed form in that case.\n+   Duplicate asm-qualifiers are not allowed.  */\n \n static tree\n c_parser_asm_statement (c_parser *parser)\n {\n   tree quals, str, outputs, inputs, clobbers, labels, ret;\n-  bool simple, is_goto;\n+  bool simple, is_volatile, is_goto;\n   location_t asm_loc = c_parser_peek_token (parser)->location;\n   int section, nsections;\n \n   gcc_assert (c_parser_next_token_is_keyword (parser, RID_ASM));\n   c_parser_consume_token (parser);\n-  if (c_parser_next_token_is_keyword (parser, RID_VOLATILE))\n-    {\n-      quals = c_parser_peek_token (parser)->value;\n-      c_parser_consume_token (parser);\n-    }\n-  else if (c_parser_next_token_is_keyword (parser, RID_CONST)\n-\t   || c_parser_next_token_is_keyword (parser, RID_RESTRICT))\n-    {\n-      warning_at (c_parser_peek_token (parser)->location,\n-\t\t  0,\n-\t\t  \"%E qualifier ignored on asm\",\n-\t\t  c_parser_peek_token (parser)->value);\n-      quals = NULL_TREE;\n-      c_parser_consume_token (parser);\n-    }\n-  else\n-    quals = NULL_TREE;\n \n+  quals = NULL_TREE;\n+  is_volatile = false;\n   is_goto = false;\n-  if (c_parser_next_token_is_keyword (parser, RID_GOTO))\n-    {\n-      c_parser_consume_token (parser);\n-      is_goto = true;\n-    }\n+  for (bool done = false; !done; )\n+    switch (c_parser_peek_token (parser)->keyword)\n+      {\n+      case RID_VOLATILE:\n+\tif (!is_volatile)\n+\t  {\n+\t    is_volatile = true;\n+\t    quals = c_parser_peek_token (parser)->value;\n+\t    c_parser_consume_token (parser);\n+\t  }\n+\telse\n+\t  done = true;\n+\tbreak;\n+      case RID_GOTO:\n+\tif (!is_goto)\n+\t  {\n+\t    is_goto = true;\n+\t    c_parser_consume_token (parser);\n+\t  }\n+\telse\n+\t  done = true;\n+\tbreak;\n+      default:\n+\tdone = true;\n+      }\n \n   /* ??? Follow the C++ parser rather than using the\n      lex_untranslated_string kludge.  */"}, {"sha": "26b83cffdff88cf9a82a520a4312173d8fc9c5ba", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30bd42b979140de02d343bb1014e9aece2e683c1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30bd42b979140de02d343bb1014e9aece2e683c1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=30bd42b979140de02d343bb1014e9aece2e683c1", "patch": "@@ -1,3 +1,9 @@\n+2018-12-06  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR inline-asm/55681\n+\t* parser.c (cp_parser_asm_definition): Update grammar.  Allow any\n+\tcombination of volatile and goto, in any order, without repetitions.\n+\n 2018-12-06  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/85110"}, {"sha": "ac953d0c61119c5751d41d677f3299bfd1469644", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 51, "deletions": 26, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30bd42b979140de02d343bb1014e9aece2e683c1/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30bd42b979140de02d343bb1014e9aece2e683c1/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=30bd42b979140de02d343bb1014e9aece2e683c1", "patch": "@@ -19590,22 +19590,34 @@ cp_parser_using_directive (cp_parser* parser)\n \n /* Parse an asm-definition.\n \n+  asm-qualifier:\n+    volatile\n+    goto\n+\n+  asm-qualifier-list:\n+    asm-qualifier\n+    asm-qualifier-list asm-qualifier\n+\n    asm-definition:\n      asm ( string-literal ) ;\n \n    GNU Extension:\n \n    asm-definition:\n-     asm volatile [opt] ( string-literal ) ;\n-     asm volatile [opt] ( string-literal : asm-operand-list [opt] ) ;\n-     asm volatile [opt] ( string-literal : asm-operand-list [opt]\n-\t\t\t  : asm-operand-list [opt] ) ;\n-     asm volatile [opt] ( string-literal : asm-operand-list [opt]\n-\t\t\t  : asm-operand-list [opt]\n+     asm asm-qualifier-list [opt] ( string-literal ) ;\n+     asm asm-qualifier-list [opt] ( string-literal : asm-operand-list [opt] ) ;\n+     asm asm-qualifier-list [opt] ( string-literal : asm-operand-list [opt]\n+\t\t\t\t    : asm-operand-list [opt] ) ;\n+     asm asm-qualifier-list [opt] ( string-literal : asm-operand-list [opt]\n+\t\t\t\t    : asm-operand-list [opt]\n \t\t\t  : asm-clobber-list [opt] ) ;\n-     asm volatile [opt] goto ( string-literal : : asm-operand-list [opt]\n-\t\t\t       : asm-clobber-list [opt]\n-\t\t\t       : asm-goto-list ) ;  */\n+     asm asm-qualifier-list [opt] ( string-literal : : asm-operand-list [opt]\n+\t\t\t\t    : asm-clobber-list [opt]\n+\t\t\t\t    : asm-goto-list ) ;\n+\n+  The form with asm-goto-list is valid if and only if the asm-qualifier-list\n+  contains goto, and is the only allowed form in that case.  No duplicates are\n+  allowed in an asm-qualifier-list.  */\n \n static void\n cp_parser_asm_definition (cp_parser* parser)\n@@ -19634,23 +19646,36 @@ cp_parser_asm_definition (cp_parser* parser)\n     }\n \n   /* See if the next token is `volatile'.  */\n-  if (cp_parser_allow_gnu_extensions_p (parser)\n-      && cp_lexer_next_token_is_keyword (parser->lexer, RID_VOLATILE))\n-    {\n-      /* Remember that we saw the `volatile' keyword.  */\n-      volatile_p = true;\n-      /* Consume the token.  */\n-      cp_lexer_consume_token (parser->lexer);\n-    }\n-  if (cp_parser_allow_gnu_extensions_p (parser)\n-      && parser->in_function_body\n-      && cp_lexer_next_token_is_keyword (parser->lexer, RID_GOTO))\n-    {\n-      /* Remember that we saw the `goto' keyword.  */\n-      goto_p = true;\n-      /* Consume the token.  */\n-      cp_lexer_consume_token (parser->lexer);\n-    }\n+  if (cp_parser_allow_gnu_extensions_p (parser))\n+    for (bool done = false; !done ; )\n+      switch (cp_lexer_peek_token (parser->lexer)->keyword)\n+\t{\n+\tcase RID_VOLATILE:\n+\t  if (!volatile_p)\n+\t    {\n+\t      /* Remember that we saw the `volatile' keyword.  */\n+\t      volatile_p = true;\n+\t      /* Consume the token.  */\n+\t      cp_lexer_consume_token (parser->lexer);\n+\t    }\n+\t  else\n+\t    done = true;\n+\t  break;\n+\tcase RID_GOTO:\n+\t  if (!goto_p && parser->in_function_body)\n+\t    {\n+\t      /* Remember that we saw the `goto' keyword.  */\n+\t      goto_p = true;\n+\t      /* Consume the token.  */\n+\t      cp_lexer_consume_token (parser->lexer);\n+\t    }\n+\t  else\n+\t    done = true;\n+\t  break;\n+\tdefault:\n+\t  done = true;\n+\t}\n+\n   /* Look for the opening `('.  */\n   if (!cp_parser_require (parser, CPP_OPEN_PAREN, RT_OPEN_PAREN))\n     return;"}, {"sha": "70c46cff5691e9d76364b2289b4fbf9105e3dd1b", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30bd42b979140de02d343bb1014e9aece2e683c1/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30bd42b979140de02d343bb1014e9aece2e683c1/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=30bd42b979140de02d343bb1014e9aece2e683c1", "patch": "@@ -8447,7 +8447,7 @@ for a C symbol, or to place a C variable in a specific register.\n A basic @code{asm} statement has the following syntax:\n \n @example\n-asm @r{[} volatile @r{]} ( @var{AssemblerInstructions} )\n+asm @var{asm-qualifiers} ( @var{AssemblerInstructions} )\n @end example\n \n The @code{asm} keyword is a GNU extension.\n@@ -8575,17 +8575,19 @@ Extended @code{asm} syntax uses colons (@samp{:}) to delimit\n the operand parameters after the assembler template:\n \n @example\n-asm @r{[}volatile@r{]} ( @var{AssemblerTemplate} \n+asm @var{asm-qualifiers} ( @var{AssemblerTemplate} \n                  : @var{OutputOperands} \n                  @r{[} : @var{InputOperands}\n                  @r{[} : @var{Clobbers} @r{]} @r{]})\n \n-asm @r{[}volatile@r{]} goto ( @var{AssemblerTemplate} \n+asm @var{asm-qualifiers} ( @var{AssemblerTemplate} \n                       : \n                       : @var{InputOperands}\n                       : @var{Clobbers}\n                       : @var{GotoLabels})\n @end example\n+where in the last form, @var{asm-qualifiers} contains @code{goto} (and in the\n+first form, not).\n \n The @code{asm} keyword is a GNU extension.\n When writing code that can be compiled with @option{-ansi} and the"}, {"sha": "11152d0ae3047aa6ec307ad12a882520b726106b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30bd42b979140de02d343bb1014e9aece2e683c1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30bd42b979140de02d343bb1014e9aece2e683c1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=30bd42b979140de02d343bb1014e9aece2e683c1", "patch": "@@ -1,3 +1,10 @@\n+2018-12-06  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR inline-asm/55681\n+\t* gcc.dg/asm-qual-1.c: Test that \"const\" and \"restrict\" are refused.\n+\t* gcc.dg/asm-qual-2.c: New test, test that asm-qualifiers are allowed\n+\tin any order, but that duplicates are not allowed.\n+\n 2018-12-06  Jeff Law  <law@redhat.com>\n \n \tPR testsuite/86540"}, {"sha": "cb37283d13f943d4f1bfc3751498b063d9653b1f", "filename": "gcc/testsuite/gcc.dg/asm-qual-1.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30bd42b979140de02d343bb1014e9aece2e683c1/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-qual-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30bd42b979140de02d343bb1014e9aece2e683c1/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-qual-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-qual-1.c?ref=30bd42b979140de02d343bb1014e9aece2e683c1", "patch": "@@ -1,4 +1,4 @@\n-/* Test that qualifiers other than volatile are ignored on asm.  */\n+/* Test that qualifiers other than volatile are disallowed on asm.  */\n /* Origin: Joseph Myers <joseph@codesourcery.com> */\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu99\" } */\n@@ -7,6 +7,10 @@ void\n f (void)\n {\n   asm volatile (\"\");\n-  asm const (\"\"); /* { dg-warning \"const qualifier ignored on asm\" } */\n-  asm restrict (\"\"); /* { dg-warning \"restrict qualifier ignored on asm\" } */\n+\n+  asm const (\"\"); /* { dg-error {expected '\\(' before 'const'} } */\n+  /* { dg-error {expected identifier} {} {target *-*-*} .-1 } */\n+\n+  asm restrict (\"\"); /* { dg-error {expected '\\(' before 'restrict'} } */\n+  /* { dg-error {expected identifier} {} {target *-*-*} .-1 } */\n }"}, {"sha": "37df2ad2b8d86915726d341ca87411c565f95669", "filename": "gcc/testsuite/gcc.dg/asm-qual-2.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30bd42b979140de02d343bb1014e9aece2e683c1/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-qual-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30bd42b979140de02d343bb1014e9aece2e683c1/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-qual-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-qual-2.c?ref=30bd42b979140de02d343bb1014e9aece2e683c1", "patch": "@@ -0,0 +1,21 @@\n+/* Test that qualifiers on asm are allowed in any order.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+void\n+f (void)\n+{\n+  asm volatile goto (\"\" :::: lab);\n+  asm goto volatile (\"\" :::: lab);\n+\n+  /* Duplicates are not allowed.  */\n+  asm goto volatile volatile (\"\" :::: lab);  /* { dg-error \"\" } */\n+  asm volatile goto volatile (\"\" :::: lab);  /* { dg-error \"\" } */\n+  asm volatile volatile goto (\"\" :::: lab);  /* { dg-error \"\" } */\n+  asm goto goto volatile (\"\" :::: lab);  /* { dg-error \"\" } */\n+  asm goto volatile goto (\"\" :::: lab);  /* { dg-error \"\" } */\n+  asm volatile goto goto (\"\" :::: lab);  /* { dg-error \"\" } */\n+\n+lab:\n+  ;\n+}"}]}