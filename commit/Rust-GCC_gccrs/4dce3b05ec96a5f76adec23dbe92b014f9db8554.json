{"sha": "4dce3b05ec96a5f76adec23dbe92b014f9db8554", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRjZTNiMDVlYzk2YTVmNzZhZGVjMjNkYmU5MmIwMTRmOWRiODU1NA==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-11-28T20:40:51Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-11-29T21:10:00Z"}, "message": "d: Add darwin support for D language front-end\n\ngcc/ChangeLog:\n\n\t* config.gcc (*-*-darwin*): Set d_target_objs and target_has_targetdm.\n\t* config/elfos.h (TARGET_D_MINFO_SECTION): New macro.\n\t(TARGET_D_MINFO_START_NAME): New macro.\n\t(TARGET_D_MINFO_END_NAME): New macro.\n\t* config/t-darwin: Add darwin-d.o.\n\t* doc/tm.texi: Regenerate.\n\t* doc/tm.texi.in (D language and ABI): Add @hook for\n\tTARGET_D_MINFO_SECTION, TARGET_D_MINFO_START_NAME, and\n\tTARGET_D_MINFO_END_NAME.\n\t* config/darwin-d.c: New file.\n\ngcc/d/ChangeLog:\n\n\t* d-target.def (d_minfo_section): New hook.\n\t(d_minfo_start_name): New hook.\n\t(d_minfo_end_name): New hook.\n\t* modules.cc: Include d-target.h.\n\t(register_moduleinfo): Update to use new targetdm hooks.", "tree": {"sha": "f1fab3a9ae5dd99563196f40134f9d337b28b8e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1fab3a9ae5dd99563196f40134f9d337b28b8e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4dce3b05ec96a5f76adec23dbe92b014f9db8554", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dce3b05ec96a5f76adec23dbe92b014f9db8554", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dce3b05ec96a5f76adec23dbe92b014f9db8554", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dce3b05ec96a5f76adec23dbe92b014f9db8554/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fdf75cb70d6bedd855205d6b05bbf6afac46730", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fdf75cb70d6bedd855205d6b05bbf6afac46730", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fdf75cb70d6bedd855205d6b05bbf6afac46730"}], "stats": {"total": 125, "additions": 122, "deletions": 3}, "files": [{"sha": "aacab0d91330f4ee7eeac573731c815d1d7eaf3b", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dce3b05ec96a5f76adec23dbe92b014f9db8554/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dce3b05ec96a5f76adec23dbe92b014f9db8554/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=4dce3b05ec96a5f76adec23dbe92b014f9db8554", "patch": "@@ -702,8 +702,10 @@ case ${target} in\n   extra_options=\"${extra_options} darwin.opt\"\n   c_target_objs=\"${c_target_objs} darwin-c.o\"\n   cxx_target_objs=\"${cxx_target_objs} darwin-c.o\"\n+  d_target_objs=\"${d_target_objs} darwin-d.o\"\n   fortran_target_objs=\"darwin-f.o\"\n   target_has_targetcm=yes\n+  target_has_targetdm=yes\n   extra_objs=\"${extra_objs} darwin.o\"\n   extra_gcc_objs=\"darwin-driver.o\"\n   default_use_cxa_atexit=yes"}, {"sha": "ced07ce006a694b90e9a438d3cad358c5a28644b", "filename": "gcc/config/darwin-d.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dce3b05ec96a5f76adec23dbe92b014f9db8554/gcc%2Fconfig%2Fdarwin-d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dce3b05ec96a5f76adec23dbe92b014f9db8554/gcc%2Fconfig%2Fdarwin-d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-d.c?ref=4dce3b05ec96a5f76adec23dbe92b014f9db8554", "patch": "@@ -0,0 +1,49 @@\n+/* Darwin support needed only by D front-end.\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm_d.h\"\n+#include \"d/d-target.h\"\n+#include \"d/d-target-def.h\"\n+\n+/* Implement TARGET_D_OS_VERSIONS for Darwin targets.  */\n+\n+static void\n+darwin_d_os_builtins (void)\n+{\n+  d_add_builtin_version (\"Posix\");\n+  d_add_builtin_version (\"OSX\");\n+  d_add_builtin_version (\"darwin\");\n+}\n+\n+#undef TARGET_D_OS_VERSIONS\n+#define TARGET_D_OS_VERSIONS darwin_d_os_builtins\n+\n+/* Define TARGET_D_MINFO_SECTION for Darwin targets.  */\n+\n+#undef TARGET_D_MINFO_SECTION\n+#define TARGET_D_MINFO_SECTION \"__DATA,__minfodata\"\n+\n+#undef TARGET_D_MINFO_START_NAME\n+#define TARGET_D_MINFO_START_NAME \"*section$start$__DATA$__minfodata\"\n+\n+#undef TARGET_D_MINFO_END_NAME\n+#define TARGET_D_MINFO_END_NAME \"*section$end$__DATA$__minfodata\"\n+\n+struct gcc_targetdm targetdm = TARGETDM_INITIALIZER;"}, {"sha": "d8f169f54df1059fee0cea2f547995cf8c172a16", "filename": "gcc/config/elfos.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dce3b05ec96a5f76adec23dbe92b014f9db8554/gcc%2Fconfig%2Felfos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dce3b05ec96a5f76adec23dbe92b014f9db8554/gcc%2Fconfig%2Felfos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felfos.h?ref=4dce3b05ec96a5f76adec23dbe92b014f9db8554", "patch": "@@ -474,3 +474,9 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #undef TARGET_LIBC_HAS_FUNCTION\n #define TARGET_LIBC_HAS_FUNCTION no_c99_libc_has_function\n+\n+/* ELF support needed only by D front-end.  */\n+\n+#define TARGET_D_MINFO_SECTION \"minfo\"\n+#define TARGET_D_MINFO_START_NAME \"__start_minfo\"\n+#define TARGET_D_MINFO_END_NAME \"__stop_minfo\""}, {"sha": "355389c60b4416441e670587fb7cbe4459bae7b0", "filename": "gcc/config/t-darwin", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dce3b05ec96a5f76adec23dbe92b014f9db8554/gcc%2Fconfig%2Ft-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dce3b05ec96a5f76adec23dbe92b014f9db8554/gcc%2Fconfig%2Ft-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-darwin?ref=4dce3b05ec96a5f76adec23dbe92b014f9db8554", "patch": "@@ -26,6 +26,9 @@ darwin-c.o: $(srcdir)/config/darwin-c.c\n \t$(COMPILE) $(PREPROCESSOR_DEFINES) $<\n \t$(POSTCOMPILE)\n \n+darwin-d.o: $(srcdir)/config/darwin-d.c\n+\t$(COMPILE) $<\n+\t$(POSTCOMPILE)\n \n darwin-f.o: $(srcdir)/config/darwin-f.c\n \t$(COMPILE) $<"}, {"sha": "728cba7033505326018b3540e41b30fc42ea42bf", "filename": "gcc/d/d-target.def", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dce3b05ec96a5f76adec23dbe92b014f9db8554/gcc%2Fd%2Fd-target.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dce3b05ec96a5f76adec23dbe92b014f9db8554/gcc%2Fd%2Fd-target.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-target.def?ref=4dce3b05ec96a5f76adec23dbe92b014f9db8554", "patch": "@@ -46,5 +46,30 @@ relating to the target operating system.\",\n  void, (void),\n  hook_void_void)\n \n+/* ModuleInfo section name and brackets.  */\n+DEFHOOKPOD\n+(d_minfo_section,\n+ \"Contains the name of the section in which module info references should be\\n\\\n+placed.  This section is expected to be bracketed by two symbols to indicate\\n\\\n+the start and end address of the section, so that the runtime library can\\n\\\n+collect all modules for each loaded shared library and executable.  The\\n\\\n+default value of @code{NULL} disables the use of sections altogether.\",\n+ const char *, NULL)\n+\n+DEFHOOKPOD\n+(d_minfo_start_name,\n+ \"If @code{TARGET_D_MINFO_SECTION} is defined, then this must also be defined\\n\\\n+as the name of the symbol indicating the start address of the module info\\n\\\n+section\",\n+ const char *, NULL)\n+\n+/* The name of the ModuleInfo section.  */\n+DEFHOOKPOD\n+(d_minfo_end_name,\n+ \"If @code{TARGET_D_MINFO_SECTION} is defined, then this must also be defined\\n\\\n+as the name of the symbol indicating the end address of the module info\\n\\\n+section\",\n+ const char *, NULL)\n+\n /* Close the 'struct gcc_targetdm' definition.  */\n HOOK_VECTOR_END (C90_EMPTY_HACK)"}, {"sha": "742a24ff0bb79c4540f3e30411ac75d7aa85ed18", "filename": "gcc/d/modules.cc", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dce3b05ec96a5f76adec23dbe92b014f9db8554/gcc%2Fd%2Fmodules.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dce3b05ec96a5f76adec23dbe92b014f9db8554/gcc%2Fd%2Fmodules.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fmodules.cc?ref=4dce3b05ec96a5f76adec23dbe92b014f9db8554", "patch": "@@ -36,6 +36,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"stringpool.h\"\n \n #include \"d-tree.h\"\n+#include \"d-target.h\"\n \n \n /* D generates module information to inform the runtime library which modules\n@@ -405,6 +406,10 @@ build_dso_registry_var (const char * name, tree type)\n static void\n register_moduleinfo (Module *decl, tree minfo)\n {\n+  /* No defined minfo section for target.  */\n+  if (targetdm.d_minfo_section == NULL)\n+    return;\n+\n   if (!targetm_common.have_named_sections)\n     sorry (\"%<-fmoduleinfo%> is not supported on this target\");\n \n@@ -420,7 +425,8 @@ register_moduleinfo (Module *decl, tree minfo)\n   DECL_EXTERNAL (mref) = 0;\n   DECL_PRESERVE_P (mref) = 1;\n \n-  set_decl_section_name (mref, \"minfo\");\n+  set_decl_section_name (mref, targetdm.d_minfo_section);\n+  symtab_node::get (mref)->implicit_section = true;\n   d_pushdecl (mref);\n   rest_of_decl_compilation (mref, 1, 0);\n \n@@ -431,10 +437,12 @@ register_moduleinfo (Module *decl, tree minfo)\n   if (!first_module)\n     return;\n \n-  start_minfo_node = build_dso_registry_var (\"__start_minfo\", ptr_type_node);\n+  start_minfo_node = build_dso_registry_var (targetdm.d_minfo_start_name,\n+\t\t\t\t\t     ptr_type_node);\n   rest_of_decl_compilation (start_minfo_node, 1, 0);\n \n-  stop_minfo_node = build_dso_registry_var (\"__stop_minfo\", ptr_type_node);\n+  stop_minfo_node = build_dso_registry_var (targetdm.d_minfo_end_name,\n+\t\t\t\t\t    ptr_type_node);\n   rest_of_decl_compilation (stop_minfo_node, 1, 0);\n \n   /* Declare dso_slot and dso_initialized.  */"}, {"sha": "9f700b1c7746438586a4a8280ef1f69cb89e5f6c", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dce3b05ec96a5f76adec23dbe92b014f9db8554/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dce3b05ec96a5f76adec23dbe92b014f9db8554/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=4dce3b05ec96a5f76adec23dbe92b014f9db8554", "patch": "@@ -10822,6 +10822,26 @@ Similarly to @code{TARGET_D_CPU_VERSIONS}, but is used for versions\n relating to the target operating system.\n @end deftypefn\n \n+@deftypevr {D Target Hook} {const char *} TARGET_D_MINFO_SECTION\n+Contains the name of the section in which module info references should be\n+placed.  This section is expected to be bracketed by two symbols to indicate\n+the start and end address of the section, so that the runtime library can\n+collect all modules for each loaded shared library and executable.  The\n+default value of @code{NULL} disables the use of sections altogether.\n+@end deftypevr\n+\n+@deftypevr {D Target Hook} {const char *} TARGET_D_MINFO_START_NAME\n+If @code{TARGET_D_MINFO_SECTION} is defined, then this must also be defined\n+as the name of the symbol indicating the start address of the module info\n+section\n+@end deftypevr\n+\n+@deftypevr {D Target Hook} {const char *} TARGET_D_MINFO_END_NAME\n+If @code{TARGET_D_MINFO_SECTION} is defined, then this must also be defined\n+as the name of the symbol indicating the end address of the module info\n+section\n+@end deftypevr\n+\n @node Named Address Spaces\n @section Adding support for named address spaces\n @cindex named address spaces"}, {"sha": "012cb1c53f07ec146474fcbed26b7749c328837b", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dce3b05ec96a5f76adec23dbe92b014f9db8554/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dce3b05ec96a5f76adec23dbe92b014f9db8554/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=4dce3b05ec96a5f76adec23dbe92b014f9db8554", "patch": "@@ -7353,6 +7353,12 @@ floating-point support; they are not included in this mechanism.\n \n @hook TARGET_D_OS_VERSIONS\n \n+@hook TARGET_D_MINFO_SECTION\n+\n+@hook TARGET_D_MINFO_START_NAME\n+\n+@hook TARGET_D_MINFO_END_NAME\n+\n @node Named Address Spaces\n @section Adding support for named address spaces\n @cindex named address spaces"}]}