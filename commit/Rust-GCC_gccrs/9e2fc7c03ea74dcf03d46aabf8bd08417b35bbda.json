{"sha": "9e2fc7c03ea74dcf03d46aabf8bd08417b35bbda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUyZmM3YzAzZWE3NGRjZjAzZDQ2YWFiZjhiZDA4NDE3YjM1YmJkYQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-03-30T11:18:41Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-03-30T11:18:41Z"}, "message": "Initial revision\n\nFrom-SVN: r9255", "tree": {"sha": "1bd258fcd427e1fb7fc2580c997412f937671265", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1bd258fcd427e1fb7fc2580c997412f937671265"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e2fc7c03ea74dcf03d46aabf8bd08417b35bbda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e2fc7c03ea74dcf03d46aabf8bd08417b35bbda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e2fc7c03ea74dcf03d46aabf8bd08417b35bbda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e2fc7c03ea74dcf03d46aabf8bd08417b35bbda/comments", "author": null, "committer": null, "parents": [{"sha": "e46540c368f6415b0e4337753dd908b658680b27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e46540c368f6415b0e4337753dd908b658680b27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e46540c368f6415b0e4337753dd908b658680b27"}], "stats": {"total": 226, "additions": 226, "deletions": 0}, "files": [{"sha": "f975d8c22939e2aa92a3c3dce7fe1326adfe61a1", "filename": "gcc/config/i386/linux-aout.h", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2fc7c03ea74dcf03d46aabf8bd08417b35bbda/gcc%2Fconfig%2Fi386%2Flinux-aout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2fc7c03ea74dcf03d46aabf8bd08417b35bbda/gcc%2Fconfig%2Fi386%2Flinux-aout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flinux-aout.h?ref=9e2fc7c03ea74dcf03d46aabf8bd08417b35bbda", "patch": "@@ -0,0 +1,75 @@\n+/* Definitions for Intel 386 running Linux\n+   Copyright (C) 1992, 1994, 1995 Free Software Foundation, Inc.\n+   Contributed by H.J. Lu (hjl@nynexst.com)\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+/* This is tested by i386/gas.h.  */\n+#define YES_UNDERSCORES\n+\n+#include \"i386/gstabs.h\"\n+#include \"linux-aout.h\"\t/* some common stuff */\n+\n+/* Specify predefined symbols in preprocessor.  */\n+\n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \"-Dunix -Di386 -Dlinux -Asystem(unix) -Asystem(posix) -Acpu(i386) -Amachine(i386)\"\n+\n+#undef CPP_SPEC\n+#if TARGET_CPU_DEFAULT == 2\n+#define CPP_SPEC \"%{!m386:-D__i486__} %{posix:-D_POSIX_SOURCE}\"\n+#else\n+#define CPP_SPEC \"%{m486:-D__i486__} %{posix:-D_POSIX_SOURCE}\"\n+#endif\n+\n+#undef SIZE_TYPE\n+#define SIZE_TYPE \"unsigned int\"\n+\n+#undef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"int\"\n+\n+#undef WCHAR_TYPE\n+#define WCHAR_TYPE \"long int\"\n+\n+#undef WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE BITS_PER_WORD\n+\n+/* Don't default to pcc-struct-return, because gcc is the only compiler,\n+   and we want to retain compatibility with older gcc versions.  */\n+#define DEFAULT_PCC_STRUCT_RETURN 0\n+\n+#undef LIB_SPEC\n+\n+#if 1\n+/* We no longer link with libc_p.a or libg.a by default. If you\n+ * want to profile or debug the Linux C library, please add\n+ * -lc_p or -ggdb to LDFLAGS at the link time, respectively.\n+ */\n+#define LIB_SPEC \\\n+\"%{mieee-fp:-lieee} %{p:-lgmon} %{pg:-lgmon} %{!ggdb:-lc} %{ggdb:-lg}\"\n+#else    \n+#define LIB_SPEC \\\n+\"%{mieee-fp:-lieee} %{p:-lgmon -lc_p} %{pg:-lgmon -lc_p} \\\n+ %{!p:%{!pg:%{!g*:-lc} %{g*:-lg -static}}}\" \n+#endif\n+\n+\f\n+#undef LINK_SPEC\n+#define LINK_SPEC\t\"-m i386linux\"\n+\n+/* Get perform_* macros to build libgcc.a.  */\n+#include \"i386/perform.h\""}, {"sha": "e36159f6c0cd2f7065ac9d7839869272b0c62559", "filename": "gcc/config/linux-aout.h", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2fc7c03ea74dcf03d46aabf8bd08417b35bbda/gcc%2Fconfig%2Flinux-aout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2fc7c03ea74dcf03d46aabf8bd08417b35bbda/gcc%2Fconfig%2Flinux-aout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flinux-aout.h?ref=9e2fc7c03ea74dcf03d46aabf8bd08417b35bbda", "patch": "@@ -0,0 +1,50 @@\n+/* Definitions for Linux\n+   Copyright (C) 1995 Free Software Foundation, Inc.\n+   Contributed by H.J. Lu (hjl@nynexst.com)\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+/* Don't assume anything about the header files. */\n+#define NO_IMPLICIT_EXTERN_C\n+\n+#undef HAVE_ATEXIT\n+#define HAVE_ATEXIT\n+\n+/* Linux uses ctype from glibc.a. I am not sure how complete it is.\n+   For now, we play safe. It may change later. */\n+\n+#if 0\n+#undef MULTIBYTE_CHARS\n+#define MULTIBYTE_CHARS\t1\n+#endif\n+\n+#undef STARTFILE_SPEC\n+#define STARTFILE_SPEC  \"%{pg:gcrt0.o%s} %{!pg:%{p:gcrt0.o%s} %{!p:crt0.o%s}} %{static:-static}\"\n+\n+/* There are conflicting reports about whether this system uses\n+   a different assembler syntax.  wilson@cygnus.com says # is right.  */\n+#undef COMMENT_BEGIN\n+#define COMMENT_BEGIN \"#\"\n+\n+#undef ASM_APP_ON\n+#define ASM_APP_ON \"#APP\\n\"\n+\n+#undef ASM_APP_OFF\n+#define ASM_APP_OFF \"#NO_APP\\n\"\n+\n+/* We need that too. */\n+#define HANDLE_SYSV_PRAGMA"}, {"sha": "1dbf6e5888d0982e35c24ccffd39d0de51221a2c", "filename": "gcc/config/linux.h", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2fc7c03ea74dcf03d46aabf8bd08417b35bbda/gcc%2Fconfig%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2fc7c03ea74dcf03d46aabf8bd08417b35bbda/gcc%2Fconfig%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flinux.h?ref=9e2fc7c03ea74dcf03d46aabf8bd08417b35bbda", "patch": "@@ -0,0 +1,87 @@\n+/* Definitions for Linux with ELF format\n+   Copyright (C) 1995 Free Software Foundation, Inc.\n+   Contributed by Eric Youngdale.\n+   Modified for stabs-in-ELF by H.J. Lu.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+/* Don't assume anything about the header files. */\n+#define NO_IMPLICIT_EXTERN_C\n+\n+#undef HAVE_ATEXIT\n+#define HAVE_ATEXIT\n+\n+/* Linux uses ctype from glibc.a. I am not sure how complete it is.\n+   For now, we play safe. It may change later. */\n+\n+#if 0\n+#undef MULTIBYTE_CHARS\n+#define MULTIBYTE_CHARS 1\n+#endif\n+\n+/* There are conflicting reports about whether this system uses\n+   a different assembler syntax.  wilson@cygnus.com says # is right.  */\n+#undef COMMENT_BEGIN\n+#define COMMENT_BEGIN \"#\"\n+\n+#undef ASM_APP_ON\n+#define ASM_APP_ON \"#APP\\n\"\n+\n+#undef ASM_APP_OFF\n+#define ASM_APP_OFF \"#NO_APP\\n\"\n+\n+/* Use stabs instead of DWARF debug format.  */\n+#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n+#include \"svr4.h\"\n+\n+#undef MD_EXEC_PREFIX\n+#undef MD_STARTFILE_PREFIX\n+\n+/* Output at beginning of assembler file.  */\n+/* The .file command should always begin the output.  */\n+#undef ASM_FILE_START\n+#define ASM_FILE_START(FILE)\t\t\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+\toutput_file_directive (FILE, main_input_filename);\t\t\\\n+\tfprintf (FILE, \"\\t.version\\t\\\"01.01\\\"\\n\");\t\t\t\\\n+  } while (0)\n+\n+#undef\tLIBGCC_SPEC\n+#define LIBGCC_SPEC \\\n+  \"%{!shared:-lgcc}\"\n+\n+\n+/* Provide a STARTFILE_SPEC appropriate for Linux.  Here we add\n+   the Linux magical crtbegin.o file (see crtstuff.c) which\n+   provides part of the support for getting C++ file-scope static\n+   object constructed before entering `main'. */\n+   \n+#undef\tSTARTFILE_SPEC\n+#define STARTFILE_SPEC \\\n+  \"%{!shared: \\\n+     %{pg:gcrt1.o%s} %{!pg:%{p:gcrt1.o%s} %{!p:crt1.o%s}}}\\\n+   crti.o%s %{!shared:crtbegin.o%s} %{shared:crtbeginS.o%s}\"\n+\n+/* Provide a ENDFILE_SPEC appropriate for Linux.  Here we tack on\n+   the Linux magical crtend.o file (see crtstuff.c) which\n+   provides part of the support for getting C++ file-scope static\n+   object constructed before entering `main', followed by a normal\n+   Linux \"finalizer\" file, `crtn.o'.  */\n+\n+#undef\tENDFILE_SPEC\n+#define ENDFILE_SPEC \\\n+  \"%{!shared:crtend.o%s} %{shared:crtendS.o%s} crtn.o%s\""}, {"sha": "ea2a5f270b39da105a8e4e7a80d6fdf4910a9521", "filename": "gcc/config/x-linux", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2fc7c03ea74dcf03d46aabf8bd08417b35bbda/gcc%2Fconfig%2Fx-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2fc7c03ea74dcf03d46aabf8bd08417b35bbda/gcc%2Fconfig%2Fx-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fx-linux?ref=9e2fc7c03ea74dcf03d46aabf8bd08417b35bbda", "patch": "@@ -0,0 +1,14 @@\n+# It is defined in config/xm-linux.h.\n+# X_CFLAGS = -DPOSIX\n+\n+# The following is needed when compiling stages 2 and 3 because gcc's\n+# limits.h must be picked up before /usr/include/limits.h.  This is because\n+# each does an #include_next of the other if the other hasn't been included.\n+# /usr/include/limits.h loses if it gets found first because /usr/include is\n+# at the end of the search order.  When a new version of gcc is released,\n+# gcc's limits.h hasn't been installed yet and hence isn't found.\n+\n+BOOT_CFLAGS = -O $(CFLAGS) -Iinclude\n+\n+# Don't run fixproto\n+STMP_FIXPROTO ="}]}