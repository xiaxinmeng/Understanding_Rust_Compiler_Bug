{"sha": "419831367ffe80b3e7902b86eb38e7f8c396852c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE5ODMxMzY3ZmZlODBiM2U3OTAyYjg2ZWIzOGU3ZjhjMzk2ODUyYw==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2002-06-11T17:33:22Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-06-11T17:33:22Z"}, "message": "Class.h (Class::desiredAssertionStatus): Declare.\n\n\t* java/lang/Class.h (Class::desiredAssertionStatus): Declare.\n\t(Class::getPackagePortion): Likewise.\n\t* java/lang/Class.java (desiredAssertionStatus): New method from\n\tClasspath.\n\t(getPackagePortion): Likewise.\n\t* java/lang/VMClassLoader.java (defaultAssertionStatus,\n\tpackageAssertionStatus, classAssertionStatus): New methods from\n\tClasspath.\n\t* java/lang/ClassLoader.java (defaultAssertionStatus,\n\tsystemPackageAssertionStatus, packageAssertionStatus,\n\tsystemClassAssertionStatus, classAssertionStatus): New fields from\n\tClasspath.\n\t(setDefaultAssertionStatus, setPackageAssertionStatus,\n\tsetClassAssertionStatus, clearAssertionStatus): New methods from\n\tClasspath.\n\t* Makefile.in: Rebuilt.\n\t* Makefile.am (core_java_source_files): Added AssertionError.java.\n\t* java/lang/AssertionError.java: New from Classpath.\n\nFrom-SVN: r54517", "tree": {"sha": "ebbe68b8e8e326e400af4e79b545b2dd31fd6942", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ebbe68b8e8e326e400af4e79b545b2dd31fd6942"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/419831367ffe80b3e7902b86eb38e7f8c396852c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/419831367ffe80b3e7902b86eb38e7f8c396852c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/419831367ffe80b3e7902b86eb38e7f8c396852c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/419831367ffe80b3e7902b86eb38e7f8c396852c/comments", "author": null, "committer": null, "parents": [{"sha": "c6226a7e2aabd8d28a282bcad0b0c62767fb6a17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6226a7e2aabd8d28a282bcad0b0c62767fb6a17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6226a7e2aabd8d28a282bcad0b0c62767fb6a17"}], "stats": {"total": 440, "additions": 428, "deletions": 12}, "files": [{"sha": "072c7b56945a784f15b1ecc411528131a109713a", "filename": "libjava/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419831367ffe80b3e7902b86eb38e7f8c396852c/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419831367ffe80b3e7902b86eb38e7f8c396852c/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=419831367ffe80b3e7902b86eb38e7f8c396852c", "patch": "@@ -1,3 +1,24 @@\n+2002-06-10  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/lang/Class.h (Class::desiredAssertionStatus): Declare.\n+\t(Class::getPackagePortion): Likewise.\n+\t* java/lang/Class.java (desiredAssertionStatus): New method from\n+\tClasspath.\n+\t(getPackagePortion): Likewise.\n+\t* java/lang/VMClassLoader.java (defaultAssertionStatus,\n+\tpackageAssertionStatus, classAssertionStatus): New methods from\n+\tClasspath.\n+\t* java/lang/ClassLoader.java (defaultAssertionStatus,\n+\tsystemPackageAssertionStatus, packageAssertionStatus,\n+\tsystemClassAssertionStatus, classAssertionStatus): New fields from\n+\tClasspath.\n+\t(setDefaultAssertionStatus, setPackageAssertionStatus,\n+\tsetClassAssertionStatus, clearAssertionStatus): New methods from\n+\tClasspath.\n+\t* Makefile.in: Rebuilt.\n+\t* Makefile.am (core_java_source_files): Added AssertionError.java.\n+\t* java/lang/AssertionError.java: New from Classpath.\n+\n 2002-06-10  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n \n \t* configure.host: Disable hash synchronization and slow_pthread_self"}, {"sha": "29ba7290a5f949102657c373356f1984a13f3993", "filename": "libjava/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419831367ffe80b3e7902b86eb38e7f8c396852c/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419831367ffe80b3e7902b86eb38e7f8c396852c/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=419831367ffe80b3e7902b86eb38e7f8c396852c", "patch": "@@ -1029,6 +1029,7 @@ java/lang/AbstractMethodError.java \\\n java/lang/ArithmeticException.java \\\n java/lang/ArrayIndexOutOfBoundsException.java \\\n java/lang/ArrayStoreException.java \\\n+java/lang/AssertionError.java \\\n java/lang/Boolean.java \\\n java/lang/Byte.java \\\n java/lang/Character.java \\"}, {"sha": "72b3dafd5d3b27d10385b6f47bcbc0560cfbd63e", "filename": "libjava/Makefile.in", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419831367ffe80b3e7902b86eb38e7f8c396852c/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419831367ffe80b3e7902b86eb38e7f8c396852c/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=419831367ffe80b3e7902b86eb38e7f8c396852c", "patch": "@@ -796,6 +796,7 @@ java/lang/AbstractMethodError.java \\\n java/lang/ArithmeticException.java \\\n java/lang/ArrayIndexOutOfBoundsException.java \\\n java/lang/ArrayStoreException.java \\\n+java/lang/AssertionError.java \\\n java/lang/Boolean.java \\\n java/lang/Byte.java \\\n java/lang/Character.java \\\n@@ -2235,7 +2236,8 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/lang/AbstractMethodError.P \\\n .deps/java/lang/ArithmeticException.P \\\n .deps/java/lang/ArrayIndexOutOfBoundsException.P \\\n-.deps/java/lang/ArrayStoreException.P .deps/java/lang/Boolean.P \\\n+.deps/java/lang/ArrayStoreException.P .deps/java/lang/AssertionError.P \\\n+.deps/java/lang/Boolean.P \\\n .deps/java/lang/Byte.P .deps/java/lang/CharSequence.P \\\n .deps/java/lang/Character.P .deps/java/lang/Class.P \\\n .deps/java/lang/ClassCastException.P \\"}, {"sha": "697d7ff909c94a22d09de4af9fb8b9f4e145d23f", "filename": "libjava/gcj/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419831367ffe80b3e7902b86eb38e7f8c396852c/libjava%2Fgcj%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419831367ffe80b3e7902b86eb38e7f8c396852c/libjava%2Fgcj%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgcj%2FMakefile.in?ref=419831367ffe80b3e7902b86eb38e7f8c396852c", "patch": "@@ -1,4 +1,4 @@\n-# Makefile.in generated automatically by automake 1.4 from Makefile.am\n+# Makefile.in generated automatically by automake 1.4-p4 from Makefile.am\n \n # Copyright (C) 1994, 1995-8, 1999 Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n@@ -258,7 +258,7 @@ distdir: $(DISTFILES)\n \t@for file in $(DISTFILES); do \\\n \t  d=$(srcdir); \\\n \t  if test -d $$d/$$file; then \\\n-\t    cp -pr $$/$$file $(distdir)/$$file; \\\n+\t    cp -pr $$d/$$file $(distdir)/$$file; \\\n \t  else \\\n \t    test -f $(distdir)/$$file \\\n \t    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \\"}, {"sha": "0dbe4528b3f5a129a0142db0073cdc8d017b3f55", "filename": "libjava/include/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419831367ffe80b3e7902b86eb38e7f8c396852c/libjava%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419831367ffe80b3e7902b86eb38e7f8c396852c/libjava%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2FMakefile.in?ref=419831367ffe80b3e7902b86eb38e7f8c396852c", "patch": "@@ -1,4 +1,4 @@\n-# Makefile.in generated automatically by automake 1.4 from Makefile.am\n+# Makefile.in generated automatically by automake 1.4-p4 from Makefile.am\n \n # Copyright (C) 1994, 1995-8, 1999 Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n@@ -239,7 +239,7 @@ distdir: $(DISTFILES)\n \t@for file in $(DISTFILES); do \\\n \t  d=$(srcdir); \\\n \t  if test -d $$d/$$file; then \\\n-\t    cp -pr $$/$$file $(distdir)/$$file; \\\n+\t    cp -pr $$d/$$file $(distdir)/$$file; \\\n \t  else \\\n \t    test -f $(distdir)/$$file \\\n \t    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \\"}, {"sha": "1ce00aee7af86c0b8bc9fe69a13d890872430efe", "filename": "libjava/java/lang/AssertionError.java", "status": "added", "additions": 148, "deletions": 0, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419831367ffe80b3e7902b86eb38e7f8c396852c/libjava%2Fjava%2Flang%2FAssertionError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419831367ffe80b3e7902b86eb38e7f8c396852c/libjava%2Fjava%2Flang%2FAssertionError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FAssertionError.java?ref=419831367ffe80b3e7902b86eb38e7f8c396852c", "patch": "@@ -0,0 +1,148 @@\n+/* AssertionError.java -- indication of a failed assertion\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package java.lang;\n+\n+/**\n+ * An assertion error normally occurs as a result of the <code>assert</code>\n+ * statement added in JDK 1.4, to indicate that an assertion failed. There\n+ * are enough constructors to ensure that\n+ * <code>new AssertionError(<em>expression</em)</code> will work for all\n+ * espressions, regardless of type, as if the error message were given by\n+ * the string <code>\"\" + <em>expression</em></code>. This extends Error,\n+ * because you usually do not want to inadvertently trap an assertion failure.\n+ *\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ * @since 1.4\n+ * @status updated to 1.4\n+ */\n+public class AssertionError extends Error\n+{\n+  /**\n+   * Compatible with JDK 1.4+.\n+   */\n+  private static final long serialVersionUID = -5013299493970297370L;\n+\n+  /**\n+   * Construct an AssertionError with no detail message.\n+   */\n+  public AssertionError()\n+  {\n+  }\n+\n+  /**\n+   * Construct an AssertionError with the string conversion of the given\n+   * object as its error message. If the object is a Throwable, it is also\n+   * set as the cause of this error.\n+   *\n+   * @param msg the source of the error message\n+   * @see Throwable#getCause()\n+   */\n+  public AssertionError(Object msg)\n+  {\n+    super(\"\" + msg);\n+    if (msg instanceof Throwable)\n+      initCause((Throwable) msg);\n+  }\n+\n+  /**\n+   * Construct an AssertionError with the string conversion of the given\n+   * boolean as its error message.\n+   *\n+   * @param msg the source of the error message\n+   */\n+  public AssertionError(boolean msg)\n+  {\n+    super(msg ? \"true\" : \"false\");\n+  }\n+\n+  /**\n+   * Construct an AssertionError with the string conversion of the given\n+   * char as its error message.\n+   *\n+   * @param msg the source of the error message\n+   */\n+  public AssertionError(char msg)\n+  {\n+    super(String.valueOf(msg));\n+  }\n+\n+  /**\n+   * Construct an AssertionError with the string conversion of the given\n+   * int as its error message.\n+   *\n+   * @param msg the source of the error message\n+   */\n+  public AssertionError(int msg)\n+  {\n+    super(Integer.toString(msg, 10));\n+  }\n+\n+  /**\n+   * Construct an AssertionError with the string conversion of the given\n+   * long as its error message.\n+   *\n+   * @param msg the source of the error message\n+   */\n+  public AssertionError(long msg)\n+  {\n+    super(Long.toString(msg));\n+  }\n+\n+  /**\n+   * Construct an AssertionError with the string conversion of the given\n+   * float as its error message.\n+   *\n+   * @param msg the source of the error message\n+   */\n+  public AssertionError(float msg)\n+  {\n+    super(Float.toString(msg));\n+  }\n+\n+  /**\n+   * Construct an AssertionError with the string conversion of the given\n+   * double as its error message.\n+   *\n+   * @param msg the source of the error message\n+   */\n+  public AssertionError(double msg)\n+  {\n+    super(Double.toString(msg));\n+  }\n+}"}, {"sha": "91a430a548b8cf492a05a339cb4c27ac03a4b37c", "filename": "libjava/java/lang/Class.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419831367ffe80b3e7902b86eb38e7f8c396852c/libjava%2Fjava%2Flang%2FClass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419831367ffe80b3e7902b86eb38e7f8c396852c/libjava%2Fjava%2Flang%2FClass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClass.h?ref=419831367ffe80b3e7902b86eb38e7f8c396852c", "patch": "@@ -1,6 +1,6 @@\n // Class.h - Header file for java.lang.Class.  -*- c++ -*-\n \n-/* Copyright (C) 1998, 1999, 2000, 2001  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001, 2002  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -210,6 +210,7 @@ class java::lang::Class : public java::lang::Object\n \n   jobject newInstance (void);\n   jstring toString (void);\n+  jboolean desiredAssertionStatus (void);\n \n   // FIXME: this probably shouldn't be public.\n   jint size (void)\n@@ -232,6 +233,8 @@ class java::lang::Class : public java::lang::Object\n \n   void initializeClass (void);\n \n+  static jstring getPackagePortion (jstring);\n+\n   // Friend functions implemented in natClass.cc.\n   friend _Jv_Method *_Jv_GetMethodLocal (jclass klass, _Jv_Utf8Const *name,\n \t\t\t\t\t _Jv_Utf8Const *signature);"}, {"sha": "7bd38dee01f85e69733e18f262914ee7d7fee860", "filename": "libjava/java/lang/Class.java", "status": "modified", "additions": 84, "deletions": 1, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419831367ffe80b3e7902b86eb38e7f8c396852c/libjava%2Fjava%2Flang%2FClass.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419831367ffe80b3e7902b86eb38e7f8c396852c/libjava%2Fjava%2Flang%2FClass.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClass.java?ref=419831367ffe80b3e7902b86eb38e7f8c396852c", "patch": "@@ -1,6 +1,6 @@\n // Class.java - Representation of a Java class.\n \n-/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2002  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -217,6 +217,75 @@ public String toString ()\n     return (isInterface () ? \"interface \" : \"class \") + getName ();\n   }\n \n+  /**\n+   * Returns the desired assertion status of this class, if it were to be\n+   * initialized at this moment. The class assertion status, if set, is\n+   * returned; the backup is the default package status; then if there is\n+   * a class loader, that default is returned; and finally the system default\n+   * is returned. This method seldom needs calling in user code, but exists\n+   * for compilers to implement the assert statement. Note that there is no\n+   * guarantee that the result of this method matches the class's actual\n+   * assertion status.\n+   *\n+   * @return the desired assertion status\n+   * @see ClassLoader#setClassAssertionStatus(String, boolean)\n+   * @see ClassLoader#setPackageAssertionStatus(String, boolean)\n+   * @see ClassLoader#setDefaultAssertionStatus(boolean)\n+   * @since 1.4\n+   */\n+  public boolean desiredAssertionStatus()\n+  {\n+    ClassLoader c = getClassLoader();\n+    Object status;\n+    if (c == null)\n+      return VMClassLoader.defaultAssertionStatus();\n+    if (c.classAssertionStatus != null)\n+      synchronized (c)\n+        {\n+          status = c.classAssertionStatus.get(getName());\n+          if (status != null)\n+            return status.equals(Boolean.TRUE);\n+        }\n+    else\n+      {\n+        status = ClassLoader.systemClassAssertionStatus.get(getName());\n+        if (status != null)\n+          return status.equals(Boolean.TRUE);\n+      }\n+    if (c.packageAssertionStatus != null)\n+      synchronized (c)\n+        {\n+          String name = getPackagePortion(getName());\n+          if (\"\".equals(name))\n+            status = c.packageAssertionStatus.get(null);\n+          else\n+            do\n+              {\n+                status = c.packageAssertionStatus.get(name);\n+                name = getPackagePortion(name);\n+              }\n+            while (! \"\".equals(name) && status == null);\n+          if (status != null)\n+            return status.equals(Boolean.TRUE);\n+        }\n+    else\n+      {\n+        String name = getPackagePortion(getName());\n+        if (\"\".equals(name))\n+          status = ClassLoader.systemPackageAssertionStatus.get(null);\n+        else\n+          do\n+            {\n+              status = ClassLoader.systemPackageAssertionStatus.get(name);\n+              name = getPackagePortion(name);\n+            }\n+          while (! \"\".equals(name) && status == null);\n+        if (status != null)\n+          return status.equals(Boolean.TRUE);\n+      }\n+    return c.defaultAssertionStatus;\n+  }\n+\n   // Don't allow new classes to be made.\n   private Class ()\n   {\n@@ -235,4 +304,18 @@ private void checkMemberAccess (int flags)\n \n   // finalization\n   protected native void finalize ();\n+\n+  /**\n+   * Strip the last portion of the name (after the last dot).\n+   *\n+   * @param name the name to get package of\n+   * @return the package name, or \"\" if no package\n+   */\n+  private static String getPackagePortion(String name)\n+  {\n+    int lastInd = name.lastIndexOf('.');\n+    if (lastInd == -1)\n+      return \"\";\n+    return name.substring(0, lastInd);\n+  }\n }"}, {"sha": "7925fe73d871149fd9e29ff809ff8d9d0835ebac", "filename": "libjava/java/lang/ClassLoader.java", "status": "modified", "additions": 117, "deletions": 4, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419831367ffe80b3e7902b86eb38e7f8c396852c/libjava%2Fjava%2Flang%2FClassLoader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419831367ffe80b3e7902b86eb38e7f8c396852c/libjava%2Fjava%2Flang%2FClassLoader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClassLoader.java?ref=419831367ffe80b3e7902b86eb38e7f8c396852c", "patch": "@@ -1,6 +1,6 @@\n // ClassLoader.java - Define policies for loading Java classes.\n \n-/* Copyright (C) 1998, 1999, 2000, 2001  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001, 2002  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -20,9 +20,7 @@\n import java.security.Permissions;\n import java.security.Policy;\n import java.security.ProtectionDomain;\n-import java.util.Enumeration;\n-import java.util.HashMap;\n-import java.util.Stack;\n+import java.util.*;\n \n /**\n  * The class <code>ClassLoader</code> is intended to be subclassed by\n@@ -34,6 +32,47 @@\n \n public abstract class ClassLoader\n {\n+  /**\n+   * The desired assertion status of classes loaded by this loader, if not\n+   * overridden by package or class instructions.\n+   */\n+  // Package visible for use by Class.\n+  boolean defaultAssertionStatus = VMClassLoader.defaultAssertionStatus();\n+\n+  /**\n+   * The command-line state of the package assertion status overrides. This\n+   * map is never modified, so it does not need to be synchronized.\n+   */\n+  // Package visible for use by Class.\n+  static final Map systemPackageAssertionStatus\n+    = VMClassLoader.packageAssertionStatus();\n+\n+  /**\n+   * The map of package assertion status overrides, or null if no package\n+   * overrides have been specified yet. The values of the map should be\n+   * Boolean.TRUE or Boolean.FALSE, and the unnamed package is represented\n+   * by the null key. This map must be synchronized on this instance.\n+   */\n+  // Package visible for use by Class.\n+  Map packageAssertionStatus;\n+\n+  /**\n+   * The command-line state of the class assertion status overrides. This\n+   * map is never modified, so it does not need to be synchronized.\n+   */\n+  // Package visible for use by Class.\n+  static final Map systemClassAssertionStatus\n+    = VMClassLoader.classAssertionStatus();\n+\n+  /**\n+   * The map of class assertion status overrides, or null if no class\n+   * overrides have been specified yet. The values of the map should be\n+   * Boolean.TRUE or Boolean.FALSE. This map must be synchronized on this\n+   * instance.\n+   */\n+  // Package visible for use by Class.\n+  Map classAssertionStatus;\n+\n   private ClassLoader parent;\n   private HashMap definedPackages = new HashMap();\n \n@@ -577,4 +616,78 @@ protected Enumeration findResources (String name) throws IOException\n     // Default to returning null.  Derived classes implement this.\n     return null;\n   }\n+\n+  /**\n+   * Set the default assertion status for classes loaded by this classloader,\n+   * used unless overridden by a package or class request.\n+   *\n+   * @param enabled true to set the default to enabled\n+   * @see #setClassAssertionStatus(String, boolean)\n+   * @see #setPackageAssertionStatus(String, boolean)\n+   * @see #clearAssertionStatus()\n+   * @since 1.4\n+   */\n+  public void setDefaultAssertionStatus(boolean enabled)\n+  {\n+    defaultAssertionStatus = enabled;\n+  }\n+\n+  /**\n+   * Set the default assertion status for packages, used unless overridden\n+   * by a class request. This default also covers subpackages, unless they\n+   * are also specified. The unnamed package should use null for the name.\n+   *\n+   * @param name the package (and subpackages) to affect\n+   * @param enabled true to set the default to enabled\n+   * @see #setDefaultAssertionStatus(String, boolean)\n+   * @see #setClassAssertionStatus(String, boolean)\n+   * @see #clearAssertionStatus()\n+   * @since 1.4\n+   */\n+  public synchronized void setPackageAssertionStatus(String name,\n+                                                     boolean enabled)\n+  {\n+    if (packageAssertionStatus == null)\n+      packageAssertionStatus\n+        = new HashMap(systemPackageAssertionStatus);\n+    packageAssertionStatus.put(name, Boolean.valueOf(enabled));\n+  }\n+  \n+  /**\n+   * Set the default assertion status for a class. This only affects the\n+   * status of top-level classes, any other string is harmless.\n+   *\n+   * @param name the class to affect\n+   * @param enabled true to set the default to enabled\n+   * @throws NullPointerException if name is null\n+   * @see #setDefaultAssertionStatus(String, boolean)\n+   * @see #setPackageAssertionStatus(String, boolean)\n+   * @see #clearAssertionStatus()\n+   * @since 1.4\n+   */\n+  public synchronized void setClassAssertionStatus(String name,\n+                                                   boolean enabled)\n+  {\n+    if (classAssertionStatus == null)\n+      classAssertionStatus = new HashMap(systemClassAssertionStatus);\n+    // The toString() hack catches null, as required.\n+    classAssertionStatus.put(name.toString(), Boolean.valueOf(enabled));\n+  }\n+  \n+  /**\n+   * Resets the default assertion status of this classloader, its packages\n+   * and classes, all to false. This allows overriding defaults inherited\n+   * from the command line.\n+   *\n+   * @see #setDefaultAssertionStatus(boolean)\n+   * @see #setClassAssertionStatus(String, boolean)\n+   * @see #setPackageAssertionStatus(String, boolean)\n+   * @since 1.4\n+   */\n+  public synchronized void clearAssertionStatus()\n+  {\n+    defaultAssertionStatus = false;\n+    packageAssertionStatus = new HashMap();\n+    classAssertionStatus = new HashMap();\n+  }\n }"}, {"sha": "445272b1bbacf86c76b1e68ac2d535d574ac3e66", "filename": "libjava/java/lang/VMClassLoader.java", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419831367ffe80b3e7902b86eb38e7f8c396852c/libjava%2Fjava%2Flang%2FVMClassLoader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419831367ffe80b3e7902b86eb38e7f8c396852c/libjava%2Fjava%2Flang%2FVMClassLoader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FVMClassLoader.java?ref=419831367ffe80b3e7902b86eb38e7f8c396852c", "patch": "@@ -1,6 +1,6 @@\n /*\n  * java.lang.ClassLoader: part of the Java Class Libraries project.\n- * Copyright (C) 1998, 2001 Free Software Foundation\n+ * Copyright (C) 1998, 2001, 2002 Free Software Foundation\n  *\n  * This library is free software; you can redistribute it and/or\n  * modify it under the terms of the GNU Library General Public\n@@ -20,6 +20,8 @@\n \n package java.lang;\n \n+import java.util.*;\n+\n /**\n  * java.lang.VMClassLoader is a package-private helper for VMs to implement\n  * on behalf of java.lang.ClassLoader.\n@@ -59,4 +61,47 @@ class VMClassLoader {\n      * @param type code for the primitive type.\n      */\n   static native Class getPrimitiveClass(char type);\n+\n+  /**\n+   * The system default for assertion status. This is used for all system\n+   * classes (those with a null ClassLoader), as well as the initial value for\n+   * every ClassLoader's default assertion status.\n+   *\n+   * XXX - Not implemented yet; this requires native help.\n+   *\n+   * @return the system-wide default assertion status\n+   */\n+  static final boolean defaultAssertionStatus()\n+  {\n+    return true;\n+  }\n+\n+  /**\n+   * The system default for package assertion status. This is used for all\n+   * ClassLoader's packageAssertionStatus defaults. It must be a map of\n+   * package names to Boolean.TRUE or Boolean.FALSE, with the unnamed package\n+   * represented as a null key.\n+   *\n+   * XXX - Not implemented yet; this requires native help.\n+   *\n+   * @return a (read-only) map for the default packageAssertionStatus\n+   */\n+  static final Map packageAssertionStatus()\n+  {\n+    return new HashMap();\n+  }\n+\n+  /**\n+   * The system default for class assertion status. This is used for all\n+   * ClassLoader's classAssertionStatus defaults. It must be a map of\n+   * class names to Boolean.TRUE or Boolean.FALSE\n+   *\n+   * XXX - Not implemented yet; this requires native help.\n+   *\n+   * @return a (read-only) map for the default classAssertionStatus\n+   */\n+  static final Map classAssertionStatus()\n+  {\n+    return new HashMap();\n+  }\n }"}]}