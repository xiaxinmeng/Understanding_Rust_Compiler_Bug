{"sha": "eb9008b7557ace9f273c3fa2372dbe99a9b2b9b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI5MDA4Yjc1NTdhY2U5ZjI3M2MzZmEyMzcyZGJlOTlhOWIyYjliMw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-05-22T10:11:36Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-05-22T10:11:36Z"}, "message": "[multiple changes]\n\n2015-05-22  Robert Dewar  <dewar@adacore.com>\n\n\t* a-reatim.ads: Add Compile_Time_Error to ensure Duration\n\tis 64-bits.\n\t* sem_ch13.adb: Improve error message.\n\t* exp_ch4.adb: Minor reformatting.\n\n2015-05-22  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_prag.adb (Analyze_Pragma): Constants without variable\n\tinput do not require indicator Part_Of.\n\t(Check_Missing_Part_Of): Constants without variable input do not\n\trequrie indicator Part_Of.\n\t(Collect_Visible_States): Constants without variable input are\n\tnot part of the hidden state of a package.\n\t* sem_util.ads, sem_util.adb (Has_Variable_Input): New routine.\n\nFrom-SVN: r223531", "tree": {"sha": "13cc6376357ed46aee564dbb53b25523e6a0f80d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13cc6376357ed46aee564dbb53b25523e6a0f80d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb9008b7557ace9f273c3fa2372dbe99a9b2b9b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb9008b7557ace9f273c3fa2372dbe99a9b2b9b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb9008b7557ace9f273c3fa2372dbe99a9b2b9b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb9008b7557ace9f273c3fa2372dbe99a9b2b9b3/comments", "author": null, "committer": null, "parents": [{"sha": "b7f016cb2285820e277eaeab3ae6193f4d95b15b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7f016cb2285820e277eaeab3ae6193f4d95b15b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7f016cb2285820e277eaeab3ae6193f4d95b15b"}], "stats": {"total": 142, "additions": 114, "deletions": 28}, "files": [{"sha": "e4320981b14daa28a5f7f4359d05fc0071fb54b9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb9008b7557ace9f273c3fa2372dbe99a9b2b9b3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb9008b7557ace9f273c3fa2372dbe99a9b2b9b3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=eb9008b7557ace9f273c3fa2372dbe99a9b2b9b3", "patch": "@@ -1,11 +1,28 @@\n-2015-05-21  Robert Dewar  <dewar@adacore.com>\n+2015-05-22  Robert Dewar  <dewar@adacore.com>\n+\n+\t* a-reatim.ads: Add Compile_Time_Error to ensure Duration\n+\tis 64-bits.\n+\t* sem_ch13.adb: Improve error message.\n+\t* exp_ch4.adb: Minor reformatting.\n+\n+2015-05-22  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma): Constants without variable\n+\tinput do not require indicator Part_Of.\n+\t(Check_Missing_Part_Of): Constants without variable input do not\n+\trequrie indicator Part_Of.\n+\t(Collect_Visible_States): Constants without variable input are\n+\tnot part of the hidden state of a package.\n+\t* sem_util.ads, sem_util.adb (Has_Variable_Input): New routine.\n+\n+2015-05-22  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_util.adb (Activate_Atomic_Synchronization): Do not set\n \tAtomic_Sync_Required for an object renaming declaration.\n \t* sem_ch8.adb (Analyze_Object_Renaming): Copy Is_Atomic and\n \tIs_Independent to renaming object.\n \n-2015-05-21  Ed Schonberg  <schonberg@adacore.com>\n+2015-05-22  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch5.adb (Analyze_Iterator_Specification): Diagnose\n \tvarious illegalities in iterators over arrays and containers:"}, {"sha": "7abbeb843d2e1d77e765abbb8a884e1a1ac5a940", "filename": "gcc/ada/a-reatim.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb9008b7557ace9f273c3fa2372dbe99a9b2b9b3/gcc%2Fada%2Fa-reatim.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb9008b7557ace9f273c3fa2372dbe99a9b2b9b3/gcc%2Fada%2Fa-reatim.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-reatim.ads?ref=eb9008b7557ace9f273c3fa2372dbe99a9b2b9b3", "patch": "@@ -38,6 +38,10 @@ pragma Elaborate_All (System.Task_Primitives.Operations);\n \n package Ada.Real_Time is\n \n+   pragma Compile_Time_Error\n+     (Duration'Size /= 64,\n+      \"this version of Ada.Real_Time requires 64-bit Duration\");\n+\n    type Time is private;\n    Time_First : constant Time;\n    Time_Last  : constant Time;"}, {"sha": "076bfafafcccdbe2da1324638c5936febba5e121", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb9008b7557ace9f273c3fa2372dbe99a9b2b9b3/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb9008b7557ace9f273c3fa2372dbe99a9b2b9b3/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=eb9008b7557ace9f273c3fa2372dbe99a9b2b9b3", "patch": "@@ -7688,12 +7688,13 @@ package body Exp_Ch4 is\n \n             begin\n                if (Nkind (P) = N_Op_Multiply\n-                   and then not Non_Binary_Modulus (Typ)\n-                   and then\n-                     ((Is_Integer_Type (Etype (L)) and then R = N)\n-                         or else\n-                      (Is_Integer_Type (Etype (R)) and then L = N))\n-                   and then not Do_Overflow_Check (P))\n+                    and then not Non_Binary_Modulus (Typ)\n+                    and then\n+                      ((Is_Integer_Type (Etype (L)) and then R = N)\n+                          or else\n+                       (Is_Integer_Type (Etype (R)) and then L = N))\n+                    and then not Do_Overflow_Check (P))\n+\n                  or else\n                   (Nkind (P) = N_Op_Divide\n                     and then Is_Integer_Type (Etype (L))\n@@ -7706,7 +7707,7 @@ package body Exp_Ch4 is\n                end if;\n             end;\n \n-         --  Now the other cases\n+         --  Now the other cases where we convert to 1 * (2 ** K)\n \n          elsif not Non_Binary_Modulus (Typ) then\n             Rewrite (N,"}, {"sha": "e985e93f10d547e7a8187fd572f37c12d85e3d40", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 31, "deletions": 17, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb9008b7557ace9f273c3fa2372dbe99a9b2b9b3/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb9008b7557ace9f273c3fa2372dbe99a9b2b9b3/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=eb9008b7557ace9f273c3fa2372dbe99a9b2b9b3", "patch": "@@ -3890,28 +3890,42 @@ package body Sem_Ch13 is\n \n             elsif No (Next_Formal (First_Formal (Subp))) then\n                Illegal_Indexing\n-                  (\"indexing function must have at least two parameters\");\n+                 (\"indexing function must have at least two parameters\");\n                return;\n \n             elsif Is_Derived_Type (Ent) then\n-               if (Attr = Name_Constant_Indexing\n-                    and then Present\n-                      (Find_Aspect (Etype (Ent), Aspect_Constant_Indexing)))\n-                 or else\n-                   (Attr = Name_Variable_Indexing\n-                     and then Present\n-                       (Find_Aspect (Etype (Ent), Aspect_Variable_Indexing)))\n-               then\n-                  if Debug_Flag_Dot_XX then\n-                     null;\n+               declare\n+                  Inherited : Node_Id;\n \n-                  else\n-                     Illegal_Indexing\n-                        (\"indexing function already inherited \"\n-                          & \"from parent type\");\n-                     return;\n+               begin\n+                  if Attr = Name_Constant_Indexing then\n+                     Inherited :=\n+                       Find_Aspect (Etype (Ent), Aspect_Constant_Indexing);\n+                  elsif Attr = Name_Variable_Indexing then\n+                     Inherited :=\n+                        Find_Aspect (Etype (Ent), Aspect_Variable_Indexing);\n                   end if;\n-               end if;\n+\n+                  --  What if neither branch taken above ???\n+\n+                  if Present (Inherited) then\n+                     if Debug_Flag_Dot_XX then\n+                        null;\n+\n+                     --  Indicate the operation that must be overridden,\n+                     --  rather than redefining the indexing aspect\n+\n+                     else\n+                        Illegal_Indexing\n+                          (\"indexing function already inherited \"\n+                           & \"from parent type\");\n+                        Error_Msg_NE\n+                          (\"!override& instead\",\n+                           N, Entity (Expression (Inherited)));\n+                        return;\n+                     end if;\n+                  end if;\n+               end;\n             end if;\n \n             if not Check_Primitive_Function (Subp) then"}, {"sha": "bdd2eec2466707f7942d329c4c13019f24d56039", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb9008b7557ace9f273c3fa2372dbe99a9b2b9b3/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb9008b7557ace9f273c3fa2372dbe99a9b2b9b3/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=eb9008b7557ace9f273c3fa2372dbe99a9b2b9b3", "patch": "@@ -2710,7 +2710,7 @@ package body Sem_Prag is\n          Legal   : out Boolean);\n       --  Subsidiary to the analysis of pragmas Abstract_State and Part_Of.\n       --  Perform full analysis of indicator Part_Of. Item_Id is the entity of\n-      --  an abstract state, variable or package instantiation. State is the\n+      --  an abstract state, object or package instantiation. State is the\n       --  encapsulating state. Indic is the Part_Of indicator. Flag Legal is\n       --  set when the indicator is legal.\n \n@@ -17557,6 +17557,20 @@ package body Sem_Prag is\n                Legal   => Legal);\n \n             if Legal then\n+\n+               --  Constants without \"variable input\" are not considered part\n+               --  of the hidden state of a package (SPARK RM 7.1.1(2)). As a\n+               --  result such constants do not require a Part_Of indicator.\n+\n+               if Ekind (Item_Id) = E_Constant\n+                 and then not Has_Variable_Input (Item_Id)\n+               then\n+                  SPARK_Msg_NE\n+                    (\"useless Part_Of indicator, constant & does not have \"\n+                     & \"variable input\", N, Item_Id);\n+                  return;\n+               end if;\n+\n                State_Id := Entity (State);\n \n                --  The Part_Of indicator turns an object into a constituent of\n@@ -24448,7 +24462,18 @@ package body Sem_Prag is\n                   --  formals to their actuals as the formals cannot be named\n                   --  from the outside and participate in refinement.\n \n-                  if No (Corresponding_Generic_Association (Decl)) then\n+                  if Present (Corresponding_Generic_Association (Decl)) then\n+                     null;\n+\n+                  --  Constants without \"variable input\" are not considered a\n+                  --  hidden state of a package (SPARK RM 7.1.1(2)).\n+\n+                  elsif Ekind (Item_Id) = E_Constant\n+                    and then not Has_Variable_Input (Item_Id)\n+                  then\n+                     null;\n+\n+                  else\n                      Add_Item (Item_Id, Result);\n                   end if;\n \n@@ -24993,6 +25018,14 @@ package body Sem_Prag is\n \n       elsif SPARK_Mode /= On then\n          return;\n+\n+      --  Do not consider constants without variable input because those are\n+      --  not part of the hidden state of a package (SPARK RM 7.1.1(2)).\n+\n+      elsif Ekind (Item_Id) = E_Constant\n+        and then not Has_Variable_Input (Item_Id)\n+      then\n+         return;\n       end if;\n \n       --  Find where the abstract state, variable or package instantiation"}, {"sha": "196310f365130cdf2500664d31c304e5e6d5f6aa", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb9008b7557ace9f273c3fa2372dbe99a9b2b9b3/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb9008b7557ace9f273c3fa2372dbe99a9b2b9b3/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=eb9008b7557ace9f273c3fa2372dbe99a9b2b9b3", "patch": "@@ -9317,6 +9317,18 @@ package body Sem_Util is\n       end if;\n    end Has_Tagged_Component;\n \n+   ------------------------\n+   -- Has_Variable_Input --\n+   ------------------------\n+\n+   function Has_Variable_Input (Const_Id : Entity_Id) return Boolean is\n+      Expr : constant Node_Id := Expression (Declaration_Node (Const_Id));\n+\n+   begin\n+      return\n+        Present (Expr) and then not Compile_Time_Known_Value_Or_Aggr (Expr);\n+   end Has_Variable_Input;\n+\n    ----------------------------\n    -- Has_Volatile_Component --\n    ----------------------------"}, {"sha": "4255e9624ac786fe3474fe8c0e721687291d61a2", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb9008b7557ace9f273c3fa2372dbe99a9b2b9b3/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb9008b7557ace9f273c3fa2372dbe99a9b2b9b3/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=eb9008b7557ace9f273c3fa2372dbe99a9b2b9b3", "patch": "@@ -1046,6 +1046,11 @@ package Sem_Util is\n    --  component is present. This function is used to check if \"=\" has to be\n    --  expanded into a bunch component comparisons.\n \n+   function Has_Variable_Input (Const_Id : Entity_Id) return Boolean;\n+   --  Determine whether the initialization expression of constant Const_Id has\n+   --  \"variable input\" (SPARK RM 7.1.1(2)). This roughly maps to the semantic\n+   --  concept of a compile-time known value.\n+\n    function Has_Volatile_Component (Typ : Entity_Id) return Boolean;\n    --  Given an arbitrary type, determine whether it contains at least one\n    --  volatile component."}]}