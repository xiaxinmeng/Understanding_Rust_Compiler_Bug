{"sha": "e53de54da399b14c108c994a81c047502cf4a513", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTUzZGU1NGRhMzk5YjE0YzEwOGM5OTRhODFjMDQ3NTAyY2Y0YTUxMw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2004-09-23T00:50:37Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2004-09-23T00:50:37Z"}, "message": "cfgexpand.c (add_reg_br_prob_note): New function.\n\n\t* cfgexpand.c (add_reg_br_prob_note): New function.\n\t(expand_gimple_cond_expr): Use it.\n\t(tree_expand_cfg): No longer kill the profile.\n\t* cfgrt.c (rtl_verify_flow_info_1): Check profile consistency\n\tonly if it is present.\n\t* passes.c (rest_of_handle_loop_optimize): Kill the profile.\n\t* predict.c (combine_predictions_for_insn): Set the probabilities\n\tbased on REG_BR_PROB note if present.\n\t* predict.c (branch_prob): Profile is read only with\n\tflag_branch_probabilities.\n\nFrom-SVN: r87910", "tree": {"sha": "b424c4477beb895f8bc28d96a8c822154f4b71bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b424c4477beb895f8bc28d96a8c822154f4b71bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e53de54da399b14c108c994a81c047502cf4a513", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e53de54da399b14c108c994a81c047502cf4a513", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e53de54da399b14c108c994a81c047502cf4a513", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e53de54da399b14c108c994a81c047502cf4a513/comments", "author": null, "committer": null, "parents": [{"sha": "d0259e11e7c68f2dbc212e5a31efc2a02dd79add", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0259e11e7c68f2dbc212e5a31efc2a02dd79add", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0259e11e7c68f2dbc212e5a31efc2a02dd79add"}], "stats": {"total": 79, "additions": 74, "deletions": 5}, "files": [{"sha": "5ece63e9e3ac527c3025e2dcb3d93341c3e1dded", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53de54da399b14c108c994a81c047502cf4a513/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53de54da399b14c108c994a81c047502cf4a513/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e53de54da399b14c108c994a81c047502cf4a513", "patch": "@@ -1,3 +1,16 @@\n+2004-09-23  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cfgexpand.c (add_reg_br_prob_note): New function.\n+\t(expand_gimple_cond_expr): Use it.\n+\t(tree_expand_cfg): No longer kill the profile.\n+\t* cfgrt.c (rtl_verify_flow_info_1): Check profile consistency\n+\tonly if it is present.\n+\t* passes.c (rest_of_handle_loop_optimize): Kill the profile.\n+\t* predict.c (combine_predictions_for_insn): Set the probabilities\n+\tbased on REG_BR_PROB note if present.\n+\t* predict.c (branch_prob): Profile is read only with\n+\tflag_branch_probabilities.\n+\n 2004-09-22  Kelley Cook  <kcook@gcc.gnu.org>\n \n \t* aclocal.m4: Add in gettext's m4 includes."}, {"sha": "5f8ec90028686c87813a9230b34d17652dabfe5b", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 47, "deletions": 3, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53de54da399b14c108c994a81c047502cf4a513/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53de54da399b14c108c994a81c047502cf4a513/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=e53de54da399b14c108c994a81c047502cf4a513", "patch": "@@ -38,6 +38,49 @@ Boston, MA 02111-1307, USA.  */\n #include \"diagnostic.h\"\n #include \"toplev.h\"\n \n+/* Verify that there is exactly single jump instruction since last and attach\n+   REG_BR_PROB note specifying probability.\n+   ??? We really ought to pass the probability down to RTL expanders and let it\n+   re-distribute it when the conditional expands into multiple coniditionals.\n+   This is however dificult to do.  */\n+static void\n+add_reg_br_prob_note (FILE *dump_file, rtx last, int probability)\n+{\n+  if (profile_status == PROFILE_ABSENT)\n+    return;\n+  for (last = NEXT_INSN (last); last && NEXT_INSN (last); last = NEXT_INSN (last))\n+    if (GET_CODE (last) == JUMP_INSN)\n+      {\n+\t/* It is common to emit condjump-around-jump sequence when we don't know\n+\t   how to reverse the conditional.  Special case this.  */\n+\tif (!any_condjump_p (last)\n+\t    || GET_CODE (NEXT_INSN (last)) != JUMP_INSN\n+\t    || !simplejump_p (NEXT_INSN (last))\n+\t    || GET_CODE (NEXT_INSN (NEXT_INSN (last))) != BARRIER\n+\t    || GET_CODE (NEXT_INSN (NEXT_INSN (NEXT_INSN (last)))) != CODE_LABEL\n+\t    || NEXT_INSN (NEXT_INSN (NEXT_INSN (NEXT_INSN (last)))))\n+\t  goto failed;\n+\tif (find_reg_note (last, REG_BR_PROB, 0))\n+\t  abort ();\n+\tREG_NOTES (last)\n+\t  = gen_rtx_EXPR_LIST (REG_BR_PROB,\n+\t\t\t       GEN_INT (REG_BR_PROB_BASE - probability),\n+\t\t\t       REG_NOTES (last));\n+\treturn;\n+      }\n+  if (!last || GET_CODE (last) != JUMP_INSN || !any_condjump_p (last))\n+      goto failed;\n+  if (find_reg_note (last, REG_BR_PROB, 0))\n+    abort ();\n+  REG_NOTES (last)\n+    = gen_rtx_EXPR_LIST (REG_BR_PROB,\n+\t\t\t GEN_INT (probability), REG_NOTES (last));\n+  return;\n+failed:\n+  if (dump_file)\n+    fprintf (dump_file, \"Failed to add probability note\\n\");\n+}\n+\n \n #ifndef LOCAL_ALIGNMENT\n #define LOCAL_ALIGNMENT(TYPE, ALIGNMENT) ALIGNMENT\n@@ -804,7 +847,7 @@ expand_gimple_cond_expr (basic_block bb, tree stmt)\n   tree pred = COND_EXPR_COND (stmt);\n   tree then_exp = COND_EXPR_THEN (stmt);\n   tree else_exp = COND_EXPR_ELSE (stmt);\n-  rtx last;\n+  rtx last = get_last_insn ();\n \n   extract_true_false_edges_from_block (bb, &true_edge, &false_edge);\n   if (EXPR_LOCUS (stmt))\n@@ -822,17 +865,20 @@ expand_gimple_cond_expr (basic_block bb, tree stmt)\n   if (TREE_CODE (then_exp) == GOTO_EXPR && IS_EMPTY_STMT (else_exp))\n     {\n       jumpif (pred, label_rtx (GOTO_DESTINATION (then_exp)));\n+      add_reg_br_prob_note (dump_file, last, true_edge->probability);\n       return NULL;\n     }\n   if (TREE_CODE (else_exp) == GOTO_EXPR && IS_EMPTY_STMT (then_exp))\n     {\n       jumpifnot (pred, label_rtx (GOTO_DESTINATION (else_exp)));\n+      add_reg_br_prob_note (dump_file, last, false_edge->probability);\n       return NULL;\n     }\n   gcc_assert (TREE_CODE (then_exp) == GOTO_EXPR\n \t      && TREE_CODE (else_exp) == GOTO_EXPR);\n \n   jumpif (pred, label_rtx (GOTO_DESTINATION (then_exp)));\n+  add_reg_br_prob_note (dump_file, last, true_edge->probability);\n   last = get_last_insn ();\n   expand_expr (else_exp, const0_rtx, VOIDmode, 0);\n \n@@ -1193,8 +1239,6 @@ tree_expand_cfg (void)\n   basic_block bb, init_block;\n   sbitmap blocks;\n \n-  profile_status = PROFILE_ABSENT;\n-\n   /* Some backends want to know that we are expanding to RTL.  */\n   currently_expanding_to_rtl = 1;\n "}, {"sha": "8664f0499018524638a504e18b9df6ee51d42e59", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53de54da399b14c108c994a81c047502cf4a513/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53de54da399b14c108c994a81c047502cf4a513/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=e53de54da399b14c108c994a81c047502cf4a513", "patch": "@@ -1969,7 +1969,8 @@ rtl_verify_flow_info_1 (void)\n \t  && bb->succ && bb->succ->succ_next\n \t  && any_condjump_p (BB_END (bb)))\n \t{\n-\t  if (INTVAL (XEXP (note, 0)) != BRANCH_EDGE (bb)->probability)\n+\t  if (INTVAL (XEXP (note, 0)) != BRANCH_EDGE (bb)->probability\n+\t      && profile_status != PROFILE_ABSENT)\n \t    {\n \t      error (\"verify_flow_info: REG_BR_PROB does not match cfg %wi %i\",\n \t\t     INTVAL (XEXP (note, 0)), BRANCH_EDGE (bb)->probability);"}, {"sha": "c62f2e9d4804ffa4494b788185b35fda42532e39", "filename": "gcc/passes.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53de54da399b14c108c994a81c047502cf4a513/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53de54da399b14c108c994a81c047502cf4a513/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=e53de54da399b14c108c994a81c047502cf4a513", "patch": "@@ -1138,6 +1138,7 @@ rest_of_handle_loop_optimize (void)\n \n   /* CFG is no longer maintained up-to-date.  */\n   free_bb_for_insn ();\n+  profile_status = PROFILE_ABSENT;\n \n   do_prefetch = flag_prefetch_loop_arrays ? LOOP_PREFETCH : 0;\n "}, {"sha": "cc314ecad742cb244d8f9ea6e739ef3f16184934", "filename": "gcc/predict.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53de54da399b14c108c994a81c047502cf4a513/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53de54da399b14c108c994a81c047502cf4a513/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=e53de54da399b14c108c994a81c047502cf4a513", "patch": "@@ -438,6 +438,15 @@ combine_predictions_for_insn (rtx insn, basic_block bb)\n \t    = REG_BR_PROB_BASE - combined_probability;\n \t}\n     }\n+  else if (bb->succ->succ_next)\n+    {\n+      int prob = INTVAL (XEXP (prob_note, 0));\n+\n+      BRANCH_EDGE (bb)->probability = prob;\n+      FALLTHRU_EDGE (bb)->probability = REG_BR_PROB_BASE - prob;\n+    }\n+  else\n+    bb->succ->probability = REG_BR_PROB_BASE;\n }\n \n /* Combine predictions into single probability and store them into CFG."}, {"sha": "b83e6c3e5d9ce20ea31b29f61d2ed0b3f4aa73a0", "filename": "gcc/profile.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53de54da399b14c108c994a81c047502cf4a513/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53de54da399b14c108c994a81c047502cf4a513/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=e53de54da399b14c108c994a81c047502cf4a513", "patch": "@@ -1104,7 +1104,8 @@ branch_prob (void)\n     }\n \n   free_edge_list (el);\n-  profile_status = PROFILE_READ;\n+  if (flag_branch_probabilities)\n+    profile_status = PROFILE_READ;\n }\n \f\n /* Union find algorithm implementation for the basic blocks using"}]}