{"sha": "4079cd635ee112a038e5f5af23ca335ca3d43d49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA3OWNkNjM1ZWUxMTJhMDM4ZTVmNWFmMjNjYTMzNWNhM2Q0M2Q0OQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-02-13T19:00:20Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-02-13T19:00:20Z"}, "message": "(last_spill_reg): Move definition to top of file.\n\nDon't initialize here.\n(reload): Intialize here to -1.\n\nFrom-SVN: r8930", "tree": {"sha": "50051f26983489e1a3c1127fcafc86abdb0c7c7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50051f26983489e1a3c1127fcafc86abdb0c7c7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4079cd635ee112a038e5f5af23ca335ca3d43d49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4079cd635ee112a038e5f5af23ca335ca3d43d49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4079cd635ee112a038e5f5af23ca335ca3d43d49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4079cd635ee112a038e5f5af23ca335ca3d43d49/comments", "author": null, "committer": null, "parents": [{"sha": "a4c80850bc9444e603fbbf725ee7f69d5f293aa7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4c80850bc9444e603fbbf725ee7f69d5f293aa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4c80850bc9444e603fbbf725ee7f69d5f293aa7"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "7b9aa9753a4a662056bdcf8c887a89190fc2e8be", "filename": "gcc/reload1.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4079cd635ee112a038e5f5af23ca335ca3d43d49/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4079cd635ee112a038e5f5af23ca335ca3d43d49/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=4079cd635ee112a038e5f5af23ca335ca3d43d49", "patch": "@@ -168,6 +168,11 @@ static HARD_REG_SET bad_spill_regs;\n    elements that are actually valid; new ones are added at the end.  */\n static short spill_regs[FIRST_PSEUDO_REGISTER];\n \n+/* Index of last register assigned as a spill register.  We allocate in\n+   a round-robin fashion.  */\n+\n+static int last_spill_reg;\n+\n /* Describes order of preference for putting regs into spill_regs.\n    Contains the numbers of all the hard regs, in order most preferred first.\n    This order is different for each function.\n@@ -691,6 +696,9 @@ reload (first, global, dumpfile)\n   for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n     spill_reg_order[i] = -1;\n \n+  /* Initialize to -1, which means take the first spill register.  */\n+  last_spill_reg = -1;\n+\n   /* On most machines, we can't use any register explicitly used in the\n      rtl as a spill register.  But on some, we have to.  Those will have\n      taken care to keep the life of hard regs as short as possible.  */\n@@ -4686,11 +4694,6 @@ rtx reload_override_in[MAX_RELOADS];\n    or -1 if we did not need one of the spill registers for this reload.  */\n int reload_spill_index[MAX_RELOADS];\n \n-/* Index of last register assigned as a spill register.  We allocate in\n-   a round-robin fashio.  */\n-\n-static int last_spill_reg = 0;\n-\n /* Find a spill register to use as a reload register for reload R.\n    LAST_RELOAD is non-zero if this is the last reload for the insn being\n    processed."}]}