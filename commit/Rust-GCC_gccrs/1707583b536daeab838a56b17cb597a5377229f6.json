{"sha": "1707583b536daeab838a56b17cb597a5377229f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTcwNzU4M2I1MzZkYWVhYjgzOGE1NmIxN2NiNTk3YTUzNzcyMjlmNg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-08-22T21:01:46Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-08-22T21:01:46Z"}, "message": "re PR target/50155 (AVX2 support broke -mavx)\n\n\tPR target/50155\n\t* config/i386/sse.md (VI_AVX2): New.\n\t(<plusminus_insn><mode>3): Use VI_AVX2 mode iterator.\n\t(*<plusminus_insn><mode>3): Ditto.\n\t(<sse2_avx2>_andnot<mode>3): Ditto.\n\t(*andnot<mode>3): Fix order of cond operands.\n\tAdd asserts for correct TARGET_xxx.\n\t(*<any_logic:code><mode>3): Ditto.\n\ntestsuite/ChangeLog:\n\n\tPR target/50155\n\t* gcc.target/i386/pr50155.c: New test.\n\nFrom-SVN: r177974", "tree": {"sha": "c052a708940ff5965cba9e58639763d063a81f37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c052a708940ff5965cba9e58639763d063a81f37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1707583b536daeab838a56b17cb597a5377229f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1707583b536daeab838a56b17cb597a5377229f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1707583b536daeab838a56b17cb597a5377229f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1707583b536daeab838a56b17cb597a5377229f6/comments", "author": null, "committer": null, "parents": [{"sha": "e3dfef44ef6b735ac7eea4202152d672ea0a91ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3dfef44ef6b735ac7eea4202152d672ea0a91ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3dfef44ef6b735ac7eea4202152d672ea0a91ef"}], "stats": {"total": 135, "additions": 104, "deletions": 31}, "files": [{"sha": "25d9ad72264f31a139804f9def6e28c06e3ada37", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1707583b536daeab838a56b17cb597a5377229f6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1707583b536daeab838a56b17cb597a5377229f6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1707583b536daeab838a56b17cb597a5377229f6", "patch": "@@ -1,3 +1,14 @@\n+2011-08-22  Uros Bizjak  <ubizjak@gmail.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\n+\tPR target/50155\n+\t* config/i386/sse.md (VI_AVX2): New.\n+\t(<plusminus_insn><mode>3): Use VI_AVX2 mode iterator.\n+\t(*<plusminus_insn><mode>3): Ditto.\n+\t(*andnot<mode>3): Fix order of cond operands.\n+\tAdd asserts for correct TARGET_xxx.\n+\t(*<any_logic:code><mode>3): Ditto.\n+\n 2011-08-22  Anatoly Sokolov  <aesok@post.ru>\n \n \t* config/m32c/m32c.h (CLASS_MAX_NREGS): Remove macro."}, {"sha": "809b7b0e6181bb9e6fbbec2f350477071eb63e4c", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 72, "deletions": 29, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1707583b536daeab838a56b17cb597a5377229f6/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1707583b536daeab838a56b17cb597a5377229f6/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=1707583b536daeab838a56b17cb597a5377229f6", "patch": "@@ -73,6 +73,12 @@\n    (V8SI \"TARGET_AVX\") V4SI\n    (V4DI \"TARGET_AVX\") V2DI])\n \n+(define_mode_iterator VI_AVX2\n+  [(V32QI \"TARGET_AVX2\") V16QI\n+   (V16HI \"TARGET_AVX2\") V8HI\n+   (V8SI \"TARGET_AVX2\") V4SI\n+   (V4DI \"TARGET_AVX2\") V2DI])\n+\n ;; All QImode vector integer modes\n (define_mode_iterator VI1\n   [(V32QI \"TARGET_AVX\") V16QI])\n@@ -124,8 +130,8 @@\n   [V4SI V4DI])\n \n (define_mode_iterator V48_AVX2\n-  [(V4SF \"TARGET_SSE\") (V2DF \"TARGET_SSE2\")\n-   (V8SF \"TARGET_AVX\") (V4DF \"TARGET_AVX\")\n+  [V4SF V2DF\n+   V8SF V4DF\n    (V4SI \"TARGET_AVX2\") (V2DI \"TARGET_AVX2\")\n    (V8SI \"TARGET_AVX2\") (V4DI \"TARGET_AVX2\")])\n \n@@ -170,9 +176,6 @@\n (define_mode_attr ssebytemode\n   [(V4DI \"V32QI\") (V2DI \"V16QI\")])\n \n-(define_mode_attr shortmode\n-  [(V4DI \"v4si\") (V2DI \"v2si\")])\n-\n ;; All 128bit vector integer modes\n (define_mode_iterator VI_128 [V16QI V8HI V4SI V2DI])\n \n@@ -4641,18 +4644,18 @@\n   \"operands[2] = force_reg (<MODE>mode, CONST0_RTX (<MODE>mode));\")\n \n (define_expand \"<plusminus_insn><mode>3\"\n-  [(set (match_operand:VI 0 \"register_operand\" \"\")\n-\t(plusminus:VI\n-\t  (match_operand:VI 1 \"nonimmediate_operand\" \"\")\n-\t  (match_operand:VI 2 \"nonimmediate_operand\" \"\")))]\n+  [(set (match_operand:VI_AVX2 0 \"register_operand\" \"\")\n+\t(plusminus:VI_AVX2\n+\t  (match_operand:VI_AVX2 1 \"nonimmediate_operand\" \"\")\n+\t  (match_operand:VI_AVX2 2 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_SSE2\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n (define_insn \"*<plusminus_insn><mode>3\"\n-  [(set (match_operand:VI 0 \"register_operand\" \"=x,x\")\n-\t(plusminus:VI\n-\t  (match_operand:VI 1 \"nonimmediate_operand\" \"<comm>0,x\")\n-\t  (match_operand:VI 2 \"nonimmediate_operand\" \"xm,xm\")))]\n+  [(set (match_operand:VI_AVX2 0 \"register_operand\" \"=x,x\")\n+\t(plusminus:VI_AVX2\n+\t  (match_operand:VI_AVX2 1 \"nonimmediate_operand\" \"<comm>0,x\")\n+\t  (match_operand:VI_AVX2 2 \"nonimmediate_operand\" \"xm,xm\")))]\n   \"TARGET_SSE2 && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n   \"@\n    p<plusminus_mnemonic><ssemodesuffix>\\t{%2, %0|%0, %2}\n@@ -6161,10 +6164,10 @@\n })\n \n (define_expand \"<sse2_avx2>_andnot<mode>3\"\n-  [(set (match_operand:VI 0 \"register_operand\" \"\")\n-\t(and:VI\n-\t  (not:VI (match_operand:VI 1 \"register_operand\" \"\"))\n-\t  (match_operand:VI 2 \"nonimmediate_operand\" \"\")))]\n+  [(set (match_operand:VI_AVX2 0 \"register_operand\" \"\")\n+\t(and:VI_AVX2\n+\t  (not:VI_AVX2 (match_operand:VI_AVX2 1 \"register_operand\" \"\"))\n+\t  (match_operand:VI_AVX2 2 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_SSE2\")\n \n (define_insn \"*andnot<mode>3\"\n@@ -6176,9 +6179,29 @@\n {\n   static char buf[32];\n   const char *ops;\n-  const char *tmp\n-    = ((get_attr_mode (insn) == MODE_TI) ||\n-       (get_attr_mode (insn) == MODE_OI)) ? \"pandn\" : \"andnps\";\n+  const char *tmp;\n+\n+  switch (get_attr_mode (insn))\n+    {\n+    case MODE_OI:\n+      gcc_assert (TARGET_AVX2);\n+    case MODE_TI:\n+      gcc_assert (TARGET_SSE2);\n+\n+      tmp = \"pandn\";\n+      break;\n+\n+   case MODE_V8SF:\n+      gcc_assert (TARGET_AVX);\n+   case MODE_V4SF:\n+      gcc_assert (TARGET_SSE);\n+\n+      tmp = \"andnps\";\n+      break;\n+\n+   default:\n+      gcc_unreachable ();\n+   }\n \n   switch (which_alternative)\n     {\n@@ -6205,12 +6228,12 @@\n        (const_string \"*\")))\n    (set_attr \"prefix\" \"orig,vex\")\n    (set (attr \"mode\")\n-     (cond [(ne (symbol_ref \"GET_MODE_SIZE (<MODE>mode) > 128\") (const_int 0))\n+     (cond [(ne (symbol_ref \"TARGET_AVX2\") (const_int 0))\n+\t      (const_string \"OI\")\n+\t    (ne (symbol_ref \"GET_MODE_SIZE (<MODE>mode) > 128\") (const_int 0))\n \t      (const_string \"V8SF\")\n \t    (ne (symbol_ref \"TARGET_SSE2\") (const_int 0))\n \t      (const_string \"TI\")\n-\t    (ne (symbol_ref \"TARGET_AVX2\") (const_int 0))\n-\t      (const_string \"OI\")\n \t   ]\n \t   (const_string \"V4SF\")))])\n \n@@ -6232,9 +6255,29 @@\n {\n   static char buf[32];\n   const char *ops;\n-  const char *tmp\n-    = (get_attr_mode (insn) == MODE_TI)||\n-      (get_attr_mode (insn) == MODE_OI) ? \"p<logic>\" : \"<logic>ps\";\n+  const char *tmp;\n+\n+  switch (get_attr_mode (insn))\n+    {\n+    case MODE_OI:\n+      gcc_assert (TARGET_AVX2);\n+    case MODE_TI:\n+      gcc_assert (TARGET_SSE2);\n+\n+      tmp = \"p<logic>\";\n+      break;\n+\n+   case MODE_V8SF:\n+      gcc_assert (TARGET_AVX);\n+   case MODE_V4SF:\n+      gcc_assert (TARGET_SSE);\n+\n+      tmp = \"<logic>ps\";\n+      break;\n+\n+   default:\n+      gcc_unreachable ();\n+   }\n \n   switch (which_alternative)\n     {\n@@ -6261,12 +6304,12 @@\n        (const_string \"*\")))\n    (set_attr \"prefix\" \"orig,vex\")\n    (set (attr \"mode\")\n-     (cond [(ne (symbol_ref \"GET_MODE_SIZE (<MODE>mode) > 128\") (const_int 0))\n+     (cond [(ne (symbol_ref \"TARGET_AVX2\") (const_int 0))\n+\t      (const_string \"OI\")\n+\t    (ne (symbol_ref \"GET_MODE_SIZE (<MODE>mode) > 128\") (const_int 0))\n \t      (const_string \"V8SF\")\n \t    (ne (symbol_ref \"TARGET_SSE2\") (const_int 0))\n \t      (const_string \"TI\")\n-\t    (ne (symbol_ref \"TARGET_AVX2\") (const_int 0))\n-\t      (const_string \"OI\")\n \t   ]\n \t   (const_string \"V4SF\")))])\n "}, {"sha": "57454939b9fadd063f58e9a8bafbdf385c7a75ba", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1707583b536daeab838a56b17cb597a5377229f6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1707583b536daeab838a56b17cb597a5377229f6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1707583b536daeab838a56b17cb597a5377229f6", "patch": "@@ -1,3 +1,9 @@\n+2011-08-22  Uros Bizjak  <ubizjak@gmail.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\n+\tPR target/50155\n+\t* gcc.target/i386/pr50155.c: New test.\n+\n 2011-08-22  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/50133\n@@ -12,7 +18,7 @@\n \t* gfortran.dg/alloc_comp_initializer_3.f90: New test.\n \n 2011-08-22  Georg-Johann Lay  <avr@gjlay.de>\n-\t\n+\n \t* gcc.dg/pr49994-2.c: Add dg-require-effective-target scheduling.\n \t* gcc.dg/pr49994-3.c: Ditto.\n \n@@ -255,7 +261,7 @@\n \t* gcc.target/i386/conversion.c: Ditto.\n \n 2011-08-11  Romain Geissler  <romain.geissler@gmail.com>\n-            Brian Hackett  <bhackett1024@gmail.com>\n+\t    Brian Hackett  <bhackett1024@gmail.com>\n \n \t* g++.dg/plugin/decl_plugin.c: New.\n \t* g++.dg/plugin/decl-plugin-test.C: New."}, {"sha": "c641d4c47af9a3e764141c4c81fedd9152c8df17", "filename": "gcc/testsuite/gcc.target/i386/pr50155.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1707583b536daeab838a56b17cb597a5377229f6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr50155.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1707583b536daeab838a56b17cb597a5377229f6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr50155.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr50155.c?ref=1707583b536daeab838a56b17cb597a5377229f6", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mavx -mno-avx2\" } */\n+\n+void\n+foo (int x, double *a, double *b, double c)\n+{\n+  int i;\n+\n+  for (i = 0; i < x; i++)\n+    *a++ = *b++ * i / c;\n+}\n+\n+/* { dg-final { scan-assembler-not \"vpaddd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */"}]}