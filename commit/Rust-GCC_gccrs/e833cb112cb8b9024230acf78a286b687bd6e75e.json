{"sha": "e833cb112cb8b9024230acf78a286b687bd6e75e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTgzM2NiMTEyY2I4YjkwMjQyMzBhY2Y3OGEyODZiNjg3YmQ2ZTc1ZQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-12-22T12:18:17Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1998-12-22T12:18:17Z"}, "message": "Warning fixes:\n\n        * Makefile.in (cvt.o): Depend on toplev.h.\n        * cp-tree.h (check_template_shadow, pod_type_p): Add prototypes.\n        * cvt.c: Include toplev.h.\n        * except.c (get_eh_caught, get_eh_handlers): Hide prototypes and\n        definitions.\n        * init.c (expand_vec_init): Initialize variable `itype'.\n        * lex.c (yyerror): Cast the argument passed to a ctype function to\n        an unsigned char.\n        * method.c (build_mangled_C9x_name): Wrap prototype and definition\n        in \"HOST_BITS_PER_WIDE_INT >= 64\".\n        * typeck.c (build_binary_op): Mark parameter `convert_p' with\n        ATTRIBUTE_UNUSED.\n\nFrom-SVN: r24395", "tree": {"sha": "21e618652a0cc0bdd053c11f957cdc45e47b5668", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21e618652a0cc0bdd053c11f957cdc45e47b5668"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e833cb112cb8b9024230acf78a286b687bd6e75e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e833cb112cb8b9024230acf78a286b687bd6e75e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e833cb112cb8b9024230acf78a286b687bd6e75e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e833cb112cb8b9024230acf78a286b687bd6e75e/comments", "author": null, "committer": null, "parents": [{"sha": "193306f7fd78865e114ff26f24a9df7b143e95d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/193306f7fd78865e114ff26f24a9df7b143e95d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/193306f7fd78865e114ff26f24a9df7b143e95d3"}], "stats": {"total": 43, "additions": 36, "deletions": 7}, "files": [{"sha": "a1d4d34b63a58926569bd1ec770b4bcba6a76648", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e833cb112cb8b9024230acf78a286b687bd6e75e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e833cb112cb8b9024230acf78a286b687bd6e75e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e833cb112cb8b9024230acf78a286b687bd6e75e", "patch": "@@ -1,3 +1,25 @@\n+Tue Dec 22 15:09:25 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* Makefile.in (cvt.o): Depend on toplev.h.\n+\n+\t* cp-tree.h (check_template_shadow, pod_type_p): Add prototypes.\n+\n+\t* cvt.c: Include toplev.h.\n+\n+\t* except.c (get_eh_caught, get_eh_handlers): Hide prototypes and\n+\tdefinitions.\n+\n+\t* init.c (expand_vec_init): Initialize variable `itype'.\n+\n+\t* lex.c (yyerror): Cast the argument passed to a ctype function to\n+\tan unsigned char.\n+\n+\t* method.c (build_mangled_C9x_name): Wrap prototype and definition\n+\tin \"HOST_BITS_PER_WIDE_INT >= 64\".\n+\n+\t* typeck.c (build_binary_op): Mark parameter `convert_p' with\n+\tATTRIBUTE_UNUSED.\n+\n 1998-12-22  Mark Mitchell  <mark@markmitchell.com>\n \n \t* cp-tree.h (TYPE_RAISES_EXCEPTIONS): Improve documentation."}, {"sha": "9fc861a32a207f7d4ca5c26bf648fd1ef504fcb3", "filename": "gcc/cp/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e833cb112cb8b9024230acf78a286b687bd6e75e/gcc%2Fcp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e833cb112cb8b9024230acf78a286b687bd6e75e/gcc%2Fcp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMakefile.in?ref=e833cb112cb8b9024230acf78a286b687bd6e75e", "patch": "@@ -269,7 +269,8 @@ init.o : init.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h $(RTL_H) \\\n   $(EXPR_H) $(srcdir)/../system.h $(srcdir)/../toplev.h\n method.o : method.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../system.h \\\n   $(srcdir)/../toplev.h\n-cvt.o : cvt.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../system.h\n+cvt.o : cvt.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../system.h \\\n+  $(srcdir)/../toplev.h\n search.o : search.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../stack.h \\\n   $(srcdir)/../flags.h $(srcdir)/../system.h $(srcdir)/../toplev.h\n tree.o : tree.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h \\"}, {"sha": "b255933a1ce0f4c7fee694e384db5c23f1c23cf4", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e833cb112cb8b9024230acf78a286b687bd6e75e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e833cb112cb8b9024230acf78a286b687bd6e75e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=e833cb112cb8b9024230acf78a286b687bd6e75e", "patch": "@@ -3024,6 +3024,7 @@ extern void synthesize_method\t\t\tPROTO((tree));\n extern tree get_id_2\t\t\t\tPROTO((char *, tree));\n \n /* in pt.c */\n+extern void check_template_shadow\t\tPROTO ((tree));\n extern tree innermost_args\t\t\tPROTO ((tree));\n extern tree tsubst\t\t\t\tPROTO ((tree, tree, tree));\n extern tree tsubst_expr\t\t\t\tPROTO ((tree, tree, tree));\n@@ -3220,6 +3221,7 @@ extern int yylex\t\t\t\tPROTO((void));\n extern tree arbitrate_lookup\t\t\tPROTO((tree, tree, tree));\n \n /* in tree.c */\n+extern int pod_type_p\t\t\t\tPROTO((tree));\n extern void unshare_base_binfos\t\t\tPROTO((tree));\n extern int member_p\t\t\t\tPROTO((tree));\n extern int real_lvalue_p\t\t\tPROTO((tree));"}, {"sha": "d11209691c9003746f7c76204e5603649b57e14b", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e833cb112cb8b9024230acf78a286b687bd6e75e/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e833cb112cb8b9024230acf78a286b687bd6e75e/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=e833cb112cb8b9024230acf78a286b687bd6e75e", "patch": "@@ -31,6 +31,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"flags.h\"\n #include \"cp-tree.h\"\n #include \"convert.h\"\n+#include \"toplev.h\"\n \n extern tree static_aggregates;\n "}, {"sha": "2216a7876339eed876556ad147e85ca45025bf6a", "filename": "gcc/cp/except.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e833cb112cb8b9024230acf78a286b687bd6e75e/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e833cb112cb8b9024230acf78a286b687bd6e75e/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=e833cb112cb8b9024230acf78a286b687bd6e75e", "patch": "@@ -54,9 +54,9 @@ static tree get_eh_info PROTO((void));\n static tree get_eh_value PROTO((void));\n #if 0\n static tree get_eh_type PROTO((void));\n-#endif\n static tree get_eh_caught PROTO((void));\n static tree get_eh_handlers PROTO((void));\n+#endif\n static tree do_pop_exception PROTO((void));\n static void process_start_catch_block PROTO((tree, tree));\n static tree build_eh_type_type_ref PROTO((tree));\n@@ -370,7 +370,6 @@ get_eh_type ()\n   return build_component_ref (get_eh_info (), get_identifier (\"type\"),\n \t\t\t      NULL_TREE, 0);\n }\n-#endif\n \n /* Returns a reference to whether or not the current exception\n    has been caught.  */\n@@ -391,6 +390,7 @@ get_eh_handlers ()\n   return build_component_ref (get_eh_info (), get_identifier (\"handlers\"),\n \t\t\t      NULL_TREE, 0);\n }\n+#endif\n \n /* Build a type value for use at runtime for a type that is matched\n    against by the exception handling system.  */"}, {"sha": "d6898ff13c7c0401172556cc0da05830f02ae361", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e833cb112cb8b9024230acf78a286b687bd6e75e/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e833cb112cb8b9024230acf78a286b687bd6e75e/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=e833cb112cb8b9024230acf78a286b687bd6e75e", "patch": "@@ -2759,7 +2759,7 @@ expand_vec_init (decl, base, maxindex, init, from_array)\n   tree base2 = NULL_TREE;\n   tree type = TREE_TYPE (TREE_TYPE (base));\n   tree size;\n-  tree itype;\n+  tree itype = NULL_TREE;\n   tree iterator;\n   int num_initialized_elts = 0;\n "}, {"sha": "0d8996f6eb282641c0a01bad04a07e660da701f4", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e833cb112cb8b9024230acf78a286b687bd6e75e/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e833cb112cb8b9024230acf78a286b687bd6e75e/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=e833cb112cb8b9024230acf78a286b687bd6e75e", "patch": "@@ -4774,7 +4774,7 @@ yyerror (string)\n     strcat (buf, \" before string constant\");\n   else if (token_buffer[0] == '\\'')\n     strcat (buf, \" before character constant\");\n-  else if (!ISGRAPH (token_buffer[0]))\n+  else if (!ISGRAPH ((unsigned char)token_buffer[0]))\n     sprintf (buf + strlen (buf), \" before character 0%o\",\n \t     (unsigned char) token_buffer[0]);\n   else"}, {"sha": "8c3aa21d9073c78f35c4b0d5fe0431a9fcd97114", "filename": "gcc/cp/method.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e833cb112cb8b9024230acf78a286b687bd6e75e/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e833cb112cb8b9024230acf78a286b687bd6e75e/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=e833cb112cb8b9024230acf78a286b687bd6e75e", "patch": "@@ -80,7 +80,9 @@ static int check_ktype PROTO((tree, int));\n static int issue_ktype PROTO((tree));\n static void build_overload_scope_ref PROTO((tree));\n static void build_mangled_template_parm_index PROTO((char *, tree));\n+#if HOST_BITS_PER_WIDE_INT >= 64\n static void build_mangled_C9x_name PROTO((int));\n+#endif\n static int is_back_referenceable_type PROTO((tree));\n static int check_btype PROTO((tree));\n static void build_mangled_name_for_type PROTO((tree));\n@@ -644,6 +646,7 @@ build_mangled_template_parm_index (s, index)\n \n    Given an integer in decimal format, mangle according to this scheme. */\n \n+#if HOST_BITS_PER_WIDE_INT >= 64\n static void\n build_mangled_C9x_name (bits)\n      int bits;\n@@ -657,7 +660,7 @@ build_mangled_C9x_name (bits)\n \n   OB_PUTCP (mangled);\n }\n-\n+#endif\n \n static void\n build_overload_value (type, value, in_template)"}, {"sha": "f9c2057e24989cc9a1b2f3acc1b98a2093d3f980", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e833cb112cb8b9024230acf78a286b687bd6e75e/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e833cb112cb8b9024230acf78a286b687bd6e75e/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=e833cb112cb8b9024230acf78a286b687bd6e75e", "patch": "@@ -3128,7 +3128,7 @@ tree\n build_binary_op (code, arg1, arg2, convert_p)\n      enum tree_code code;\n      tree arg1, arg2;\n-     int convert_p;\n+     int convert_p ATTRIBUTE_UNUSED;\n {\n   return build_binary_op_nodefault (code, arg1, arg2, code);\n }"}]}