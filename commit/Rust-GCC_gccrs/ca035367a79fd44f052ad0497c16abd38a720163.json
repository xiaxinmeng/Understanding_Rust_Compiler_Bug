{"sha": "ca035367a79fd44f052ad0497c16abd38a720163", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2EwMzUzNjdhNzlmZDQ0ZjA1MmFkMDQ5N2MxNmFiZDM4YTcyMDE2Mw==", "commit": {"author": {"name": "Joern Rennecke", "email": "joern.rennecke@embecosm.com", "date": "2013-05-30T11:07:05Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2013-05-30T11:07:05Z"}, "message": "re PR rtl-optimization/57439 (FAIL: gcc.c-torture/execute/920501-6.c execution,  -O1)\n\n        PR rtl-optimization/57439\n        * postreload.c (move2add_valid_value_p): Check that we have\n        a zero subreg_regno_offset when accessing the register in\n        the requested mode.\n\nFrom-SVN: r199449", "tree": {"sha": "e04afbe88c9a495644dda56fb1c9e33e6253b249", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e04afbe88c9a495644dda56fb1c9e33e6253b249"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca035367a79fd44f052ad0497c16abd38a720163", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca035367a79fd44f052ad0497c16abd38a720163", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca035367a79fd44f052ad0497c16abd38a720163", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca035367a79fd44f052ad0497c16abd38a720163/comments", "author": {"login": "amylaar", "id": 1663475, "node_id": "MDQ6VXNlcjE2NjM0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1663475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amylaar", "html_url": "https://github.com/amylaar", "followers_url": "https://api.github.com/users/amylaar/followers", "following_url": "https://api.github.com/users/amylaar/following{/other_user}", "gists_url": "https://api.github.com/users/amylaar/gists{/gist_id}", "starred_url": "https://api.github.com/users/amylaar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amylaar/subscriptions", "organizations_url": "https://api.github.com/users/amylaar/orgs", "repos_url": "https://api.github.com/users/amylaar/repos", "events_url": "https://api.github.com/users/amylaar/events{/privacy}", "received_events_url": "https://api.github.com/users/amylaar/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "582f2176b5abe7512e514d31c1770def11cb8e38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/582f2176b5abe7512e514d31c1770def11cb8e38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/582f2176b5abe7512e514d31c1770def11cb8e38"}], "stats": {"total": 28, "additions": 26, "deletions": 2}, "files": [{"sha": "f08cd613cfc9b9ffa8263f8beb5c9a14b845c77f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca035367a79fd44f052ad0497c16abd38a720163/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca035367a79fd44f052ad0497c16abd38a720163/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ca035367a79fd44f052ad0497c16abd38a720163", "patch": "@@ -1,3 +1,10 @@\n+2013-05-30  Joern Rennecke <joern.rennecke@embecosm.com>\n+\n+\tPR rtl-optimization/57439\n+\t* postreload.c (move2add_valid_value_p): Check that we have\n+\ta zero subreg_regno_offset when accessing the register in\n+\tthe requested mode.\n+\n 2013-05-30  Yuri Rumyantsev  <yuri.s.rumyantsev@intel.com>\n \t    Igor Zamyatin  <igor.zamyatin@intel.com>\n "}, {"sha": "f340503f69c23765d2c8d0b23e5fb4f82726f67a", "filename": "gcc/postreload.c", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca035367a79fd44f052ad0497c16abd38a720163/gcc%2Fpostreload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca035367a79fd44f052ad0497c16abd38a720163/gcc%2Fpostreload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload.c?ref=ca035367a79fd44f052ad0497c16abd38a720163", "patch": "@@ -1726,10 +1726,27 @@ move2add_record_sym_value (rtx reg, rtx sym, rtx off)\n static bool\n move2add_valid_value_p (int regno, enum machine_mode mode)\n {\n-  if (reg_set_luid[regno] <= move2add_last_label_luid\n-      || !MODES_OK_FOR_MOVE2ADD (mode, reg_mode[regno]))\n+  if (reg_set_luid[regno] <= move2add_last_label_luid)\n     return false;\n \n+  if (mode != reg_mode[regno])\n+    {\n+      if (!MODES_OK_FOR_MOVE2ADD (mode, reg_mode[regno]))\n+\treturn false;\n+      /* The value loaded into regno in reg_mode[regno] is also valid in\n+\t mode after truncation only if (REG:mode regno) is the lowpart of\n+\t (REG:reg_mode[regno] regno).  Now, for big endian, the starting\n+\t regno of the lowpart might be different.  */\n+      int s_off = subreg_lowpart_offset (mode, reg_mode[regno]);\n+      s_off = subreg_regno_offset (regno, reg_mode[regno], s_off, mode);\n+      if (s_off != 0)\n+\t/* We could in principle adjust regno, check reg_mode[regno] to be\n+\t   BLKmode, and return s_off to the caller (vs. -1 for failure),\n+\t   but we currently have no callers that could make use of this\n+\t   information.  */\n+\treturn false;\n+    }\n+\n   for (int i = hard_regno_nregs[regno][mode] - 1; i > 0; i--)\n     if (reg_mode[regno + i] != BLKmode)\n       return false;"}]}