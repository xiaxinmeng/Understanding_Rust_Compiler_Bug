{"sha": "b8815bd32f6029b77dc97143edc6d39aa5e014df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg4MTViZDMyZjYwMjliNzdkYzk3MTQzZWRjNmQzOWFhNWUwMTRkZg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-11-29T12:09:12Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-11-29T12:09:12Z"}, "message": "re PR middle-end/59338 (error: position plus size exceeds size of referenced object in BIT_FIELD_REF)\n\n2013-11-29  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/59338\n\t* tree-cfg.c (verify_expr): Restrict bounds verification of\n\tBIT_FIELD_REF arguments to non-aggregate typed base objects.\n\n\t* gcc.dg/torture/pr59338.c: New testcase.\n\nFrom-SVN: r205521", "tree": {"sha": "ea78b02f66385bff3c767df1f4fda696cf51412e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea78b02f66385bff3c767df1f4fda696cf51412e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8815bd32f6029b77dc97143edc6d39aa5e014df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8815bd32f6029b77dc97143edc6d39aa5e014df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8815bd32f6029b77dc97143edc6d39aa5e014df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8815bd32f6029b77dc97143edc6d39aa5e014df/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b54fc5b7ee19a2410460a2424a4fb8754a7467cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b54fc5b7ee19a2410460a2424a4fb8754a7467cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b54fc5b7ee19a2410460a2424a4fb8754a7467cb"}], "stats": {"total": 54, "additions": 41, "deletions": 13}, "files": [{"sha": "9e7e1873de0508e5142d78e930a011e271db8231", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8815bd32f6029b77dc97143edc6d39aa5e014df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8815bd32f6029b77dc97143edc6d39aa5e014df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b8815bd32f6029b77dc97143edc6d39aa5e014df", "patch": "@@ -1,3 +1,9 @@\n+2013-11-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/59338\n+\t* tree-cfg.c (verify_expr): Restrict bounds verification of\n+\tBIT_FIELD_REF arguments to non-aggregate typed base objects.\n+\n 2013-11-29  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/59334"}, {"sha": "411d5e963aa2550d7d3b5fc07764889ced896ffd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8815bd32f6029b77dc97143edc6d39aa5e014df/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8815bd32f6029b77dc97143edc6d39aa5e014df/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b8815bd32f6029b77dc97143edc6d39aa5e014df", "patch": "@@ -1,3 +1,8 @@\n+2013-11-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/59338\n+\t* gcc.dg/torture/pr59338.c: New testcase.\n+\n 2013-11-29  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR lto/59326"}, {"sha": "481c84d4ee71b3b8817ed0232872e60601ce7ed7", "filename": "gcc/testsuite/gcc.dg/torture/pr59338.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8815bd32f6029b77dc97143edc6d39aa5e014df/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr59338.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8815bd32f6029b77dc97143edc6d39aa5e014df/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr59338.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr59338.c?ref=b8815bd32f6029b77dc97143edc6d39aa5e014df", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+\n+typedef enum\n+{\n+  XYZZY,\n+} enumType;\n+\n+typedef struct\n+{\n+  unsigned char More : 1;\n+} tResp;\n+\n+typedef struct\n+{\n+  enumType QueryType;\n+  union\n+    {\n+      tResp l[0];\n+    } u;\n+} tQResp;\n+\n+void test(void)\n+{\n+  tQResp *qResp = (0);\n+  if (qResp->u.l[0].More == 0)\n+    return;\n+}"}, {"sha": "605990eed0e956b1c77db2280eea2e57b534bbf2", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8815bd32f6029b77dc97143edc6d39aa5e014df/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8815bd32f6029b77dc97143edc6d39aa5e014df/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=b8815bd32f6029b77dc97143edc6d39aa5e014df", "patch": "@@ -2715,17 +2715,6 @@ verify_expr (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n \t  tree t0 = TREE_OPERAND (t, 0);\n \t  tree t1 = TREE_OPERAND (t, 1);\n \t  tree t2 = TREE_OPERAND (t, 2);\n-\t  tree t0_type = TREE_TYPE (t0);\n-\t  unsigned HOST_WIDE_INT t0_size = 0;\n-\n-\t  if (tree_fits_uhwi_p (TYPE_SIZE (t0_type)))\n-\t    t0_size = tree_to_uhwi (TYPE_SIZE (t0_type));\n-\t  else \n-\t    {\n-\t      HOST_WIDE_INT t0_max_size = max_int_size_in_bytes (t0_type);\n-\t      if (t0_max_size > 0)\n-\t\tt0_size = t0_max_size * BITS_PER_UNIT;\n-\t    }\n \t  if (!tree_fits_uhwi_p (t1)\n \t      || !tree_fits_uhwi_p (t2))\n \t    {\n@@ -2749,8 +2738,9 @@ verify_expr (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n \t\t     \"match field size of BIT_FIELD_REF\");\n \t      return t;\n \t    }\n-\t  if (t0_size != 0\n-\t      && tree_to_uhwi (t1) + tree_to_uhwi (t2) > t0_size)\n+\t  if (!AGGREGATE_TYPE_P (TREE_TYPE (t0))\n+\t      && (tree_to_uhwi (t1) + tree_to_uhwi (t2)\n+\t\t  > tree_to_uhwi (TYPE_SIZE (TREE_TYPE (t0)))))\n \t    {\n \t      error (\"position plus size exceeds size of referenced object in \"\n \t\t     \"BIT_FIELD_REF\");"}]}