{"sha": "cde515d9f33b8d2ddc0f975cae3fe12d657ca0dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RlNTE1ZDlmMzNiOGQyZGRjMGY5NzVjYWUzZmUxMmQ2NTdjYTBkZA==", "commit": {"author": {"name": "Joel Brobecker", "email": "brobecker@adacore.com", "date": "2007-03-29T20:55:09Z"}, "committer": {"name": "Joel Brobecker", "email": "brobecke@gcc.gnu.org", "date": "2007-03-29T20:55:09Z"}, "message": "filename_cmp.c: New file.\n\n        * filename_cmp.c: New file.\n        * Makefile.in (CFILES): Add filename_cmp.c.\n        (REQUIRED_OFILES): Add filename_cmp.o\n        (filename_cmp.o): New rule.\n        * functions.texi: Regenerate.\n\nFrom-SVN: r123342", "tree": {"sha": "106ebdb208dd8b737d7e34ca9f4cbd3b5a5d00ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/106ebdb208dd8b737d7e34ca9f4cbd3b5a5d00ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cde515d9f33b8d2ddc0f975cae3fe12d657ca0dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cde515d9f33b8d2ddc0f975cae3fe12d657ca0dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cde515d9f33b8d2ddc0f975cae3fe12d657ca0dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cde515d9f33b8d2ddc0f975cae3fe12d657ca0dd/comments", "author": {"login": "brobecke", "id": 11981700, "node_id": "MDQ6VXNlcjExOTgxNzAw", "avatar_url": "https://avatars.githubusercontent.com/u/11981700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brobecke", "html_url": "https://github.com/brobecke", "followers_url": "https://api.github.com/users/brobecke/followers", "following_url": "https://api.github.com/users/brobecke/following{/other_user}", "gists_url": "https://api.github.com/users/brobecke/gists{/gist_id}", "starred_url": "https://api.github.com/users/brobecke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brobecke/subscriptions", "organizations_url": "https://api.github.com/users/brobecke/orgs", "repos_url": "https://api.github.com/users/brobecke/repos", "events_url": "https://api.github.com/users/brobecke/events{/privacy}", "received_events_url": "https://api.github.com/users/brobecke/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7761c0db85ad1d7f31a42024f6b3df69335cf149", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7761c0db85ad1d7f31a42024f6b3df69335cf149", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7761c0db85ad1d7f31a42024f6b3df69335cf149"}], "stats": {"total": 113, "additions": 108, "deletions": 5}, "files": [{"sha": "006c354c9878c39c9d24634ded43bccd912f5f0f", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde515d9f33b8d2ddc0f975cae3fe12d657ca0dd/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde515d9f33b8d2ddc0f975cae3fe12d657ca0dd/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=cde515d9f33b8d2ddc0f975cae3fe12d657ca0dd", "patch": "@@ -1,3 +1,11 @@\n+2007-03-29  Joel Brobecker  <brobecker@adacore.com>\n+\n+\t* filename_cmp.c: New file.\n+\t* Makefile.in (CFILES): Add filename_cmp.c.\n+\t(REQUIRED_OFILES): Add filename_cmp.o\n+\t(filename_cmp.o): New rule.\n+\t* functions.texi: Regenerate.\n+\n 2007-03-15  Geoffrey Keating  <geoffk@apple.com>\n \n \t* cp-demangle.c (d_encoding): Exit early on error."}, {"sha": "4f5e2152783a5b5267fee6050366aae845d201f7", "filename": "libiberty/Makefile.in", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde515d9f33b8d2ddc0f975cae3fe12d657ca0dd/libiberty%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde515d9f33b8d2ddc0f975cae3fe12d657ca0dd/libiberty%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FMakefile.in?ref=cde515d9f33b8d2ddc0f975cae3fe12d657ca0dd", "patch": "@@ -1,6 +1,6 @@\n #\n # Makefile\n-#   Copyright (C) 1990, 91-99, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n+#   Copyright (C) 1990, 91-99, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007\n #   Free Software Foundation\n #\n # This file is part of the libiberty library.\n@@ -131,8 +131,8 @@ CFILES = alloca.c argv.c asprintf.c atexit.c\t\t\t\t\\\n \tcalloc.c choose-temp.c clock.c concat.c cp-demangle.c\t\t\\\n \t cp-demint.c cplus-dem.c\t\t\t\t\t\\\n \tdyn-string.c\t\t\t\t\t\t\t\\\n-\tfdmatch.c ffs.c fibheap.c floatformat.c fnmatch.c\t\t\\\n-\t fopen_unlocked.c\t\t\t\t\t\t\\\n+\tfdmatch.c ffs.c fibheap.c filename_cmp.c floatformat.c\t\t\\\n+\tfnmatch.c fopen_unlocked.c\t\t\t\t\t\\\n \tgetcwd.c getopt.c getopt1.c getpagesize.c getpwd.c getruntime.c\t\\\n          gettimeofday.c                                                 \\\n \thashtab.c hex.c\t\t\t\t\t\t\t\\\n@@ -165,8 +165,8 @@ REQUIRED_OFILES = ./regex.o ./cplus-dem.o ./cp-demangle.o ./md5.o\t\\\n \t./alloca.o ./argv.o\t\t\t\t\t\t\\\n \t./choose-temp.o ./concat.o ./cp-demint.o\t\t\t\\\n \t./dyn-string.o\t\t\t\t\t\t\t\\\n-\t./fdmatch.o ./fibheap.o ./floatformat.o ./fnmatch.o\t\t\\\n-\t ./fopen_unlocked.o\t\t\t\t\t\t\\\n+\t./fdmatch.o ./fibheap.o ./filename_cmp.o ./floatformat.o\t\\\n+\t./fnmatch.o ./fopen_unlocked.o\t\t\t\t\t\\\n \t./getopt.o ./getopt1.o ./getpwd.o ./getruntime.o\t\t\\\n \t./hashtab.o ./hex.o\t\t\t\t\t\t\\\n \t./lbasename.o ./lrealpath.o\t\t\t\t\t\\\n@@ -651,6 +651,12 @@ $(CONFIGURED_OFILES): stamp-picdir\n \telse true; fi\n \t$(COMPILE.c) $(srcdir)/fibheap.c $(OUTPUT_OPTION)\n \n+./filename_cmp.o: $(srcdir)/filename_cmp.c $(INCDIR)/filenames.h\n+\tif [ x\"$(PICFLAG)\" != x ]; then \\\n+\t  $(COMPILE.c) $(PICFLAG) $(srcdir)/filename_cmp.c -o pic/$@; \\\n+\telse true; fi\n+\t$(COMPILE.c) $(srcdir)/filename_cmp.c $(OUTPUT_OPTION)\n+\n ./floatformat.o: $(srcdir)/floatformat.c config.h $(INCDIR)/ansidecl.h \\\n \t$(INCDIR)/floatformat.h $(INCDIR)/libiberty.h\n \tif [ x\"$(PICFLAG)\" != x ]; then \\"}, {"sha": "5e12c82ca41470cb18012d97effc092c81affcc8", "filename": "libiberty/filename_cmp.c", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde515d9f33b8d2ddc0f975cae3fe12d657ca0dd/libiberty%2Ffilename_cmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde515d9f33b8d2ddc0f975cae3fe12d657ca0dd/libiberty%2Ffilename_cmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffilename_cmp.c?ref=cde515d9f33b8d2ddc0f975cae3fe12d657ca0dd", "patch": "@@ -0,0 +1,73 @@\n+/* File name comparison routine.\n+\n+   Copyright (C) 2007 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2, or (at your option)\n+   any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; if not, write to the Free Software Foundation,\n+   Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  */\n+\n+#ifdef HAVE_STRING_H\n+#include <string.h>\n+#endif\n+\n+#include <ctype.h>\n+#include \"filenames.h\"\n+\n+/*\n+\n+@deftypefn Extension int filename_cmp (const char *@var{s1}, const char *@var{s2})\n+\n+Return zero if the two paths @var{s1} and @var{s2} are equivalent.\n+If not equivalent, the returned value is similar to what strcmp would\n+return.  In other words, it returns a negative value if @var{s1} is less\n+than @var{s2}, or a positive value if @var{s2} is greater than @var{s2}.\n+\n+This function does not normalize path names. As a result, this function\n+will treat filenames that are spelled differently as different even in\n+the case when the two filenames point to the same underlying file.\n+However, it does handle the fact that on DOS-like file systems, forward\n+and backward slashes are equal.\n+\n+@end deftypefn\n+\n+*/\n+\n+int\n+filename_cmp (const char *s1, const char *s2)\n+{\n+#ifndef HAVE_DOS_BASED_FILE_SYSTEM\n+  return strcmp(s1, s2);\n+#else\n+  for (;;)\n+    {\n+      int c1 = tolower (*s1);\n+      int c2 = tolower (*s2);\n+\n+      /* On DOS-based file systems, the '/' and the '\\' are equivalent.  */\n+      if (c1 == '/')\n+        c1 = '\\\\';\n+      if (c2 == '/')\n+        c2 = '\\\\';\n+\n+      if (c1 != c2)\n+        return (c1 - c2);\n+\n+      if (c1 == '\\0')\n+        return 0;\n+\n+      s1++;\n+      s2++;\n+    }\n+#endif\n+}\n+"}, {"sha": "fd3e8e74ea7b17565dfa00aadf3726071c6f9c2c", "filename": "libiberty/functions.texi", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde515d9f33b8d2ddc0f975cae3fe12d657ca0dd/libiberty%2Ffunctions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde515d9f33b8d2ddc0f975cae3fe12d657ca0dd/libiberty%2Ffunctions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffunctions.texi?ref=cde515d9f33b8d2ddc0f975cae3fe12d657ca0dd", "patch": "@@ -268,6 +268,22 @@ value 1).  If @var{valu} is zero, zero is returned.\n \n @end deftypefn\n \n+@c filename_cmp.c:28\n+@deftypefn Extension int filename_cmp (const char *@var{s1}, const char *@var{s2})\n+\n+Return zero if the two paths @var{s1} and @var{s2} are equivalent.\n+If not equivalent, the returned value is similar to what strcmp would\n+return.  In other words, it returns a negative value if @var{s1} is less\n+than @var{s2}, or a positive value if @var{s2} is greater than @var{s2}.\n+\n+This function does not normalize path names. As a result, this function\n+will treat filenames that are spelled differently as different even in\n+the case when the two filenames point to the same underlying file.\n+However, it does handle the fact that on DOS-like file systems, forward\n+and backward slashes are equal.\n+\n+@end deftypefn\n+\n @c fnmatch.txh:1\n @deftypefn Replacement int fnmatch (const char *@var{pattern}, const char *@var{string}, int @var{flags})\n "}]}