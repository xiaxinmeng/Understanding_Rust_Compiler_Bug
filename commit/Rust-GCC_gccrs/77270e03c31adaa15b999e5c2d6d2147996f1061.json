{"sha": "77270e03c31adaa15b999e5c2d6d2147996f1061", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzcyNzBlMDNjMzFhZGFhMTViOTk5ZTVjMmQ2ZDIxNDc5OTZmMTA2MQ==", "commit": {"author": {"name": "James E Wilson", "email": "wilson@specifixinc.com", "date": "2005-04-01T03:58:40Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2005-04-01T03:58:40Z"}, "message": "Handle static const initializers that contain arithmetic.\n\nPR c++/20505\n* dwarf2out.c (rtl_for_decl_init): New function.\n(rtl_for_decl_location): Extracted from here.\n(tree_add_const_value_attribute): Call rtl_for_decl_init and\nadd_const_value_attribute.  Delete initializer_constant_valid_p call.\n\nFrom-SVN: r97363", "tree": {"sha": "c5aefb5756da66331426d563ee291623154e912c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5aefb5756da66331426d563ee291623154e912c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77270e03c31adaa15b999e5c2d6d2147996f1061", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77270e03c31adaa15b999e5c2d6d2147996f1061", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77270e03c31adaa15b999e5c2d6d2147996f1061", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77270e03c31adaa15b999e5c2d6d2147996f1061/comments", "author": null, "committer": null, "parents": [{"sha": "aabcd30904d8ae69db59eedd1120e26ee89b9c61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aabcd30904d8ae69db59eedd1120e26ee89b9c61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aabcd30904d8ae69db59eedd1120e26ee89b9c61"}], "stats": {"total": 111, "additions": 61, "deletions": 50}, "files": [{"sha": "9f7604aa8fc816a6c4cc27a0ae37770d907aaa89", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77270e03c31adaa15b999e5c2d6d2147996f1061/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77270e03c31adaa15b999e5c2d6d2147996f1061/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=77270e03c31adaa15b999e5c2d6d2147996f1061", "patch": "@@ -1,3 +1,11 @@\n+2005-03-31  James E Wilson  <wilson@specifixinc.com>\n+\n+\tPR c++/20505\n+\t* dwarf2out.c (rtl_for_decl_init): New function.\n+\t(rtl_for_decl_location): Extracted from here.\n+\t(tree_add_const_value_attribute): Call rtl_for_decl_init and\n+\tadd_const_value_attribute.  Delete initializer_constant_valid_p call.\n+\n 2005-04-01  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* cgraphunit.c, dbxout.c, flow.c, gcse.c, gimplify.c,"}, {"sha": "5f1d6313f4c0808578b594e985ba865645b189eb", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 53, "deletions": 50, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77270e03c31adaa15b999e5c2d6d2147996f1061/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77270e03c31adaa15b999e5c2d6d2147996f1061/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=77270e03c31adaa15b999e5c2d6d2147996f1061", "patch": "@@ -9792,6 +9792,53 @@ add_const_value_attribute (dw_die_ref die, rtx rtl)\n \n }\n \n+/* Generate an RTL constant from a decl initializer INIT with decl type TYPE,\n+   for use in a later add_const_value_attribute call.  */\n+\n+static rtx\n+rtl_for_decl_init (tree init, tree type)\n+{\n+  rtx rtl = NULL_RTX;\n+\n+  /* If a variable is initialized with a string constant without embedded\n+     zeros, build CONST_STRING.  */\n+  if (TREE_CODE (init) == STRING_CST && TREE_CODE (type) == ARRAY_TYPE)\n+    {\n+      tree enttype = TREE_TYPE (type);\n+      tree domain = TYPE_DOMAIN (type);\n+      enum machine_mode mode = TYPE_MODE (enttype);\n+\n+      if (GET_MODE_CLASS (mode) == MODE_INT && GET_MODE_SIZE (mode) == 1\n+\t  && domain\n+\t  && integer_zerop (TYPE_MIN_VALUE (domain))\n+\t  && compare_tree_int (TYPE_MAX_VALUE (domain),\n+\t\t\t       TREE_STRING_LENGTH (init) - 1) == 0\n+\t  && ((size_t) TREE_STRING_LENGTH (init)\n+\t      == strlen (TREE_STRING_POINTER (init)) + 1))\n+\trtl = gen_rtx_CONST_STRING (VOIDmode,\n+\t\t\t\t    ggc_strdup (TREE_STRING_POINTER (init)));\n+    }\n+  /* If the initializer is something that we know will expand into an\n+     immediate RTL constant, expand it now.  Expanding anything else\n+     tends to produce unresolved symbols; see debug/5770 and c++/6381.  */\n+  /* Aggregate, vector, and complex types may contain constructors that may\n+     result in code being generated when expand_expr is called, so we can't\n+     handle them here.  Integer and float are useful and safe types to handle\n+     here.  */\n+  else if ((INTEGRAL_TYPE_P (type) || SCALAR_FLOAT_TYPE_P (type))\n+\t   && initializer_constant_valid_p (init, type) == null_pointer_node)\n+    {\n+      rtl = expand_expr (init, NULL_RTX, VOIDmode, EXPAND_INITIALIZER);\n+\n+      /* If expand_expr returns a MEM, it wasn't immediate.  */\n+      gcc_assert (!rtl || !MEM_P (rtl));\n+    }\n+\n+  return rtl;\n+}\n+\n+/* Generate RTL for the variable DECL to represent its location.  */\n+\n static rtx\n rtl_for_decl_location (tree decl)\n {\n@@ -9987,40 +10034,7 @@ rtl_for_decl_location (tree decl)\n      and will have been substituted directly into all expressions that use it.\n      C does not have such a concept, but C++ and other languages do.  */\n   else if (TREE_CODE (decl) == VAR_DECL && DECL_INITIAL (decl))\n-    {\n-      /* If a variable is initialized with a string constant without embedded\n-\t zeros, build CONST_STRING.  */\n-      if (TREE_CODE (DECL_INITIAL (decl)) == STRING_CST\n-\t  && TREE_CODE (TREE_TYPE (decl)) == ARRAY_TYPE)\n-\t{\n-\t  tree arrtype = TREE_TYPE (decl);\n-\t  tree enttype = TREE_TYPE (arrtype);\n-\t  tree domain = TYPE_DOMAIN (arrtype);\n-\t  tree init = DECL_INITIAL (decl);\n-\t  enum machine_mode mode = TYPE_MODE (enttype);\n-\n-\t  if (GET_MODE_CLASS (mode) == MODE_INT && GET_MODE_SIZE (mode) == 1\n-\t      && domain\n-\t      && integer_zerop (TYPE_MIN_VALUE (domain))\n-\t      && compare_tree_int (TYPE_MAX_VALUE (domain),\n-\t\t\t\t   TREE_STRING_LENGTH (init) - 1) == 0\n-\t      && ((size_t) TREE_STRING_LENGTH (init)\n-\t\t  == strlen (TREE_STRING_POINTER (init)) + 1))\n-\t    rtl = gen_rtx_CONST_STRING (VOIDmode,\n-\t\t\t\t\tggc_strdup (TREE_STRING_POINTER (init)));\n-\t}\n-      /* If the initializer is something that we know will expand into an\n-\t immediate RTL constant, expand it now.  Expanding anything else\n-\t tends to produce unresolved symbols; see debug/5770 and c++/6381.  */\n-      else if (TREE_CODE (DECL_INITIAL (decl)) == INTEGER_CST\n-\t       || TREE_CODE (DECL_INITIAL (decl)) == REAL_CST)\n-\t{\n-\t  rtl = expand_expr (DECL_INITIAL (decl), NULL_RTX, VOIDmode,\n-\t\t\t     EXPAND_INITIALIZER);\n-\t  /* If expand_expr returns a MEM, it wasn't immediate.  */\n-\t  gcc_assert (!rtl || !MEM_P (rtl));\n-\t}\n-    }\n+    rtl = rtl_for_decl_init (DECL_INITIAL (decl), TREE_TYPE (decl));\n \n   if (rtl)\n     rtl = targetm.delegitimize_address (rtl);\n@@ -10222,27 +10236,16 @@ tree_add_const_value_attribute (dw_die_ref var_die, tree decl)\n {\n   tree init = DECL_INITIAL (decl);\n   tree type = TREE_TYPE (decl);\n+  rtx rtl;\n \n-  if (TREE_READONLY (decl) && ! TREE_THIS_VOLATILE (decl) && init\n-      && initializer_constant_valid_p (init, type) == null_pointer_node)\n+  if (TREE_READONLY (decl) && ! TREE_THIS_VOLATILE (decl) && init)\n     /* OK */;\n   else\n     return;\n \n-  switch (TREE_CODE (type))\n-    {\n-    case INTEGER_TYPE:\n-      if (host_integerp (init, 0))\n-\tadd_AT_unsigned (var_die, DW_AT_const_value,\n-\t\t\t tree_low_cst (init, 0));\n-      else\n-\tadd_AT_long_long (var_die, DW_AT_const_value,\n-\t\t\t  TREE_INT_CST_HIGH (init),\n-\t\t\t  TREE_INT_CST_LOW (init));\n-      break;\n-\n-    default:;\n-    }\n+  rtl = rtl_for_decl_init (init, type);\n+  if (rtl)\n+    add_const_value_attribute (var_die, rtl);\n }\n \n /* Generate a DW_AT_name attribute given some string value to be included as"}]}