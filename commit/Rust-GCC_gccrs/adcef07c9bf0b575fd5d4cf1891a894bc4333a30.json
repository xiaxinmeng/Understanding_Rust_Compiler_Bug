{"sha": "adcef07c9bf0b575fd5d4cf1891a894bc4333a30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWRjZWYwN2M5YmYwYjU3NWZkNWQ0Y2YxODkxYTg5NGJjNDMzM2EzMA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2013-04-05T16:06:17Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2013-04-05T16:06:17Z"}, "message": "target-supports.exp (add_options_for_arm_v8_neon): Add -march=armv8-a when we use v8 NEON.\n\n2013-04-05  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n\n\t* lib/target-supports.exp (add_options_for_arm_v8_neon):\n\tAdd -march=armv8-a when we use v8 NEON.\n\t(check_effective_target_vect_call_btruncf): Remove arm-*-*-*.\n\t(check_effective_target_vect_call_ceilf): Likewise.\n\t(check_effective_target_vect_call_floorf): Likewise.\n\t(check_effective_target_vect_call_roundf): Likewise.\n\t(check_vect_support_and_set_flags): Remove check for arm_v8_neon.\n\t* gcc.target/arm/vect-rounding-btruncf.c: New testcase.\n\t* gcc.target/arm/vect-rounding-ceilf.c: Likewise.\n\t* gcc.target/arm/vect-rounding-floorf.c: Likewise.\n\t* gcc.target/arm/vect-rounding-roundf.c: Likewise.\n\nFrom-SVN: r197523", "tree": {"sha": "c52d829dbb3bd5bd40cdc74828ca8fcc0c5ff227", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c52d829dbb3bd5bd40cdc74828ca8fcc0c5ff227"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/adcef07c9bf0b575fd5d4cf1891a894bc4333a30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adcef07c9bf0b575fd5d4cf1891a894bc4333a30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adcef07c9bf0b575fd5d4cf1891a894bc4333a30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adcef07c9bf0b575fd5d4cf1891a894bc4333a30/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3f3bf1a8bfe2212d9a83b5316d93a4add718dbf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f3bf1a8bfe2212d9a83b5316d93a4add718dbf2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f3bf1a8bfe2212d9a83b5316d93a4add718dbf2"}], "stats": {"total": 112, "additions": 91, "deletions": 21}, "files": [{"sha": "a12f1f491a297c6023c729f3df9fbb636c9e9db9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adcef07c9bf0b575fd5d4cf1891a894bc4333a30/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adcef07c9bf0b575fd5d4cf1891a894bc4333a30/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=adcef07c9bf0b575fd5d4cf1891a894bc4333a30", "patch": "@@ -1,3 +1,17 @@\n+2013-04-05  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* lib/target-supports.exp (add_options_for_arm_v8_neon):\n+\tAdd -march=armv8-a when we use v8 NEON.\n+\t(check_effective_target_vect_call_btruncf): Remove arm-*-*-*.\n+\t(check_effective_target_vect_call_ceilf): Likewise.\n+\t(check_effective_target_vect_call_floorf): Likewise.\n+\t(check_effective_target_vect_call_roundf): Likewise.\n+\t(check_vect_support_and_set_flags): Remove check for arm_v8_neon.\n+\t* gcc.target/arm/vect-rounding-btruncf.c: New testcase.\n+\t* gcc.target/arm/vect-rounding-ceilf.c: Likewise.\n+\t* gcc.target/arm/vect-rounding-floorf.c: Likewise.\n+\t* gcc.target/arm/vect-rounding-roundf.c: Likewise.\n+\n 2013-04-05  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* gcc.target/powerpc/sd-vsx.c: Skip on AIX."}, {"sha": "ff033d437e6e29698b65b3c3b44c7da00669f3ce", "filename": "gcc/testsuite/gcc.target/arm/vect-rounding-btruncf.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adcef07c9bf0b575fd5d4cf1891a894bc4333a30/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvect-rounding-btruncf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adcef07c9bf0b575fd5d4cf1891a894bc4333a30/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvect-rounding-btruncf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvect-rounding-btruncf.c?ref=adcef07c9bf0b575fd5d4cf1891a894bc4333a30", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_v8_neon_ok } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize\" } */\n+/* { dg-add-options arm_v8_neon } */\n+\n+#define N 32\n+\n+void\n+foo (float *output, float *input)\n+{\n+  int i = 0;\n+  /* Vectorizable.  */\n+  for (i = 0; i < N; i++)\n+    output[i] = __builtin_truncf (input[i]);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_call_btruncf } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "b54f358f71b1f14a5f9c88be3399e133dddae81e", "filename": "gcc/testsuite/gcc.target/arm/vect-rounding-ceilf.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adcef07c9bf0b575fd5d4cf1891a894bc4333a30/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvect-rounding-ceilf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adcef07c9bf0b575fd5d4cf1891a894bc4333a30/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvect-rounding-ceilf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvect-rounding-ceilf.c?ref=adcef07c9bf0b575fd5d4cf1891a894bc4333a30", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_v8_neon_ok } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize\" } */\n+/* { dg-add-options arm_v8_neon } */\n+\n+#define N 32\n+\n+void\n+foo (float *output, float *input)\n+{\n+  int i = 0;\n+  /* Vectorizable.  */\n+  for (i = 0; i < N; i++)\n+    output[i] = __builtin_ceilf (input[i]);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_call_ceilf } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "02e188d96548aa527f0d3ea97f4a2c67ea7a946c", "filename": "gcc/testsuite/gcc.target/arm/vect-rounding-floorf.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adcef07c9bf0b575fd5d4cf1891a894bc4333a30/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvect-rounding-floorf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adcef07c9bf0b575fd5d4cf1891a894bc4333a30/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvect-rounding-floorf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvect-rounding-floorf.c?ref=adcef07c9bf0b575fd5d4cf1891a894bc4333a30", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_v8_neon_ok } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize\" } */\n+/* { dg-add-options arm_v8_neon } */\n+\n+#define N 32\n+\n+void\n+foo (float *output, float *input)\n+{\n+  int i = 0;\n+  /* Vectorizable.  */\n+  for (i = 0; i < N; i++)\n+    output[i] = __builtin_floorf (input[i]);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_call_floorf } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "85e205806a418a227c754b4c6ae61439290f9385", "filename": "gcc/testsuite/gcc.target/arm/vect-rounding-roundf.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adcef07c9bf0b575fd5d4cf1891a894bc4333a30/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvect-rounding-roundf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adcef07c9bf0b575fd5d4cf1891a894bc4333a30/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvect-rounding-roundf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvect-rounding-roundf.c?ref=adcef07c9bf0b575fd5d4cf1891a894bc4333a30", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_v8_neon_ok } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize\" } */\n+/* { dg-add-options arm_v8_neon } */\n+\n+#define N 32\n+\n+void\n+foo (float *output, float *input)\n+{\n+  int i = 0;\n+  /* Vectorizable.  */\n+  for (i = 0; i < N; i++)\n+    output[i] = __builtin_roundf (input[i]);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_call_roundf } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "4604af63b8990ec42de7a1b1cd8071418a500739", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 5, "deletions": 21, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adcef07c9bf0b575fd5d4cf1891a894bc4333a30/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adcef07c9bf0b575fd5d4cf1891a894bc4333a30/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=adcef07c9bf0b575fd5d4cf1891a894bc4333a30", "patch": "@@ -2211,7 +2211,7 @@ proc add_options_for_arm_v8_neon { flags } {\n         return \"$flags\"\n     }\n     global et_arm_v8_neon_flags\n-    return \"$flags $et_arm_v8_neon_flags\"\n+    return \"$flags $et_arm_v8_neon_flags -march=armv8-a\"\n }\n \n # Add the options needed for NEON.  We need either -mfloat-abi=softfp\n@@ -4082,9 +4082,7 @@ proc check_effective_target_vect_call_btruncf { } {\n \tverbose \"check_effective_target_vect_call_btruncf: using cached result\" 2\n     } else {\n \tset et_vect_call_btruncf_saved 0\n-\tif { [istarget aarch64*-*-*]\n-\t     || ([istarget arm*-*-*]\n-\t         && [check_effective_target_arm_v8_neon_ok]) } {\n+\tif { [istarget aarch64*-*-*] } {\n \t  set et_vect_call_btruncf_saved 1\n \t}\n     }\n@@ -4120,9 +4118,7 @@ proc check_effective_target_vect_call_ceilf { } {\n \tverbose \"check_effective_target_vect_call_ceilf: using cached result\" 2\n     } else {\n \tset et_vect_call_ceilf_saved 0\n-\tif { [istarget aarch64*-*-*]\n-\t     || ([istarget arm*-*-*]\n-\t         && [check_effective_target_arm_v8_neon_ok]) } {\n+\tif { [istarget aarch64*-*-*] } {\n \t  set et_vect_call_ceilf_saved 1\n \t}\n     }\n@@ -4158,9 +4154,7 @@ proc check_effective_target_vect_call_floorf { } {\n \tverbose \"check_effective_target_vect_call_floorf: using cached result\" 2\n     } else {\n \tset et_vect_call_floorf_saved 0\n-\tif { [istarget aarch64*-*-*]\n-\t     || ([istarget arm*-*-*]\n-\t         && [check_effective_target_arm_v8_neon_ok]) } {\n+\tif { [istarget aarch64*-*-*] } {\n \t  set et_vect_call_floorf_saved 1\n \t}\n     }\n@@ -4268,9 +4262,7 @@ proc check_effective_target_vect_call_roundf { } {\n \tverbose \"check_effective_target_vect_call_roundf: using cached result\" 2\n     } else {\n \tset et_vect_call_roundf_saved 0\n-\tif { [istarget aarch64*-*-*]\n-\t     || ([istarget arm*-*-*]\n-\t         && [check_effective_target_arm_v8_neon_ok]) } {\n+\tif { [istarget aarch64*-*-*] } {\n \t  set et_vect_call_roundf_saved 1\n \t}\n     }\n@@ -5172,14 +5164,6 @@ proc check_vect_support_and_set_flags { } {\n         }\n     } elseif [istarget ia64-*-*] {\n         set dg-do-what-default run\n-    } elseif [is-effective-target arm_v8_neon_ok] {\n-        eval lappend DEFAULT_VECTCFLAGS [add_options_for_arm_v8_neon \"\"]\n-        lappend DEFAULT_VECTCFLAGS \"-ffast-math\"\n-        if [is-effective-target arm_v8_neon_hw] {\n-            set dg-do-what-default run\n-        } else {\n-            set dg-do-what-default compile\n-        }\n     } elseif [is-effective-target arm_neon_ok] {\n         eval lappend DEFAULT_VECTCFLAGS [add_options_for_arm_neon \"\"]\n         # NEON does not support denormals, so is not used for vectorization by"}]}