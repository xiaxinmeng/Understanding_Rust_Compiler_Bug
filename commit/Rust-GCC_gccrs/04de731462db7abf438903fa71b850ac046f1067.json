{"sha": "04de731462db7abf438903fa71b850ac046f1067", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRkZTczMTQ2MmRiN2FiZjQzODkwM2ZhNzFiODUwYWMwNDZmMTA2Nw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-05-23T17:28:23Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-05-23T17:28:23Z"}, "message": "* c-decl.c (pushdecl): Invert sense of test for non-global types.\n\nFrom-SVN: r34107", "tree": {"sha": "095a04c45332e7988144ca8f836909bdc09004b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/095a04c45332e7988144ca8f836909bdc09004b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04de731462db7abf438903fa71b850ac046f1067", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04de731462db7abf438903fa71b850ac046f1067", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04de731462db7abf438903fa71b850ac046f1067", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04de731462db7abf438903fa71b850ac046f1067/comments", "author": null, "committer": null, "parents": [{"sha": "a3afe9205d962176ddc12f507072273d8629de90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3afe9205d962176ddc12f507072273d8629de90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3afe9205d962176ddc12f507072273d8629de90"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "76023f87633091b4eb099cb02445d3e7ec521f90", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04de731462db7abf438903fa71b850ac046f1067/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04de731462db7abf438903fa71b850ac046f1067/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=04de731462db7abf438903fa71b850ac046f1067", "patch": "@@ -1,3 +1,7 @@\n+2000-05-23  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* c-decl.c (pushdecl): Invert sense of test for non-global types.\n+\n Tue May 23 18:11:42 2000  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n \t* reload1.c (reload_cse_move2add): Honor TRULY_NOOP_TRUNCATION."}, {"sha": "20c60895c1844b58bf7886211ba8ff135e19bf7f", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04de731462db7abf438903fa71b850ac046f1067/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04de731462db7abf438903fa71b850ac046f1067/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=04de731462db7abf438903fa71b850ac046f1067", "patch": "@@ -2202,7 +2202,7 @@ pushdecl (x)\n \t    {\n \t      if (type == error_mark_node)\n \t\tbreak;\n-\t      if (! TYPE_CONTEXT (type))\n+\t      if (TYPE_CONTEXT (type))\n \t\t{\n \t\t  warning_with_decl (x, \"type of external `%s' is not global\");\n \t\t  /* By exiting the loop early, we leave TYPE nonzero,"}, {"sha": "cc772f574a30ce676eac4a1571db6b088ae561df", "filename": "gcc/testsuite/gcc.dg/ext-glob.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04de731462db7abf438903fa71b850ac046f1067/gcc%2Ftestsuite%2Fgcc.dg%2Fext-glob.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04de731462db7abf438903fa71b850ac046f1067/gcc%2Ftestsuite%2Fgcc.dg%2Fext-glob.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fext-glob.c?ref=04de731462db7abf438903fa71b850ac046f1067", "patch": "@@ -0,0 +1,18 @@\n+/* Test for the warning about external functions with non-global\n+   types.  In -traditional mode, these functions are globally visible\n+   even if declared in an inner scope, so their return types should\n+   also be visible.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options -traditional } */\n+\n+int\n+main ()\n+{\n+  struct foo { int a, b; };\n+\n+  extern struct foo *bar();  /* { dg-warning \"type of external\" \"good warn\" } */\n+  extern int baz();\t     /* { dg-bogus   \"type of external\" \"bad warn\"  } */\n+\n+  return 0;\n+}"}]}