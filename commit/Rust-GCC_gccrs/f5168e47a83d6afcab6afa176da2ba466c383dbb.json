{"sha": "f5168e47a83d6afcab6afa176da2ba466c383dbb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjUxNjhlNDdhODNkNmFmY2FiNmFmYTE3NmRhMmJhNDY2YzM4M2RiYg==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2014-07-09T20:32:12Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2014-07-09T20:32:12Z"}, "message": "libgfortran.h (support_fpu_underflow_control, [...]): New prototypes.\n\n\t* libgfortran.h (support_fpu_underflow_control,\n        get_fpu_underflow_mode, set_fpu_underflow_mode): New prototypes.\n\t* config/fpu-*.h (support_fpu_underflow_control,\n\tget_fpu_underflow_mode, set_fpu_underflow_mode):\n\tNew functions.\n\t* ieee/ieee_arithmetic.F90: Support underflow control.\n\n\t* gfortran.dg/ieee/underflow_1.f90: New file.\n\nFrom-SVN: r212407", "tree": {"sha": "cf7f1ee923c572de4622014e7f1078228cf3f283", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf7f1ee923c572de4622014e7f1078228cf3f283"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5168e47a83d6afcab6afa176da2ba466c383dbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5168e47a83d6afcab6afa176da2ba466c383dbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5168e47a83d6afcab6afa176da2ba466c383dbb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5168e47a83d6afcab6afa176da2ba466c383dbb/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "958c1d61b1503a70f900a38f6f832ec1beb29d8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/958c1d61b1503a70f900a38f6f832ec1beb29d8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/958c1d61b1503a70f900a38f6f832ec1beb29d8f"}], "stats": {"total": 340, "additions": 313, "deletions": 27}, "files": [{"sha": "e4cd3bc637471e5de81e9b8433a86721fcd2b75c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5168e47a83d6afcab6afa176da2ba466c383dbb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5168e47a83d6afcab6afa176da2ba466c383dbb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f5168e47a83d6afcab6afa176da2ba466c383dbb", "patch": "@@ -1,3 +1,7 @@\n+2014-07-09  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* gfortran.dg/ieee/underflow_1.f90: New file.\n+\n 2014-07-09  Richard Biener  <rguenther@suse.de>\n \n \tPR c-family/61741"}, {"sha": "b77a90c240dc4b71111b4015a54d3b4750304145", "filename": "gcc/testsuite/gfortran.dg/ieee/underflow_1.f90", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5168e47a83d6afcab6afa176da2ba466c383dbb/gcc%2Ftestsuite%2Fgfortran.dg%2Fieee%2Funderflow_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5168e47a83d6afcab6afa176da2ba466c383dbb/gcc%2Ftestsuite%2Fgfortran.dg%2Fieee%2Funderflow_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fieee%2Funderflow_1.f90?ref=f5168e47a83d6afcab6afa176da2ba466c383dbb", "patch": "@@ -0,0 +1,50 @@\n+! { dg-do run }\n+! { dg-require-effective-target sse2_runtime { target { i?86-*-* x86_64-*-* } } }\n+! { dg-additional-options \"-msse2 -mfpmath=sse\" { target { i?86-*-* x86_64-*-* } } }\n+\n+program test_underflow_control\n+  use ieee_arithmetic\n+  use iso_fortran_env\n+\n+  logical l\n+  real, volatile :: x\n+  double precision, volatile :: y\n+  integer, parameter :: kx = kind(x), ky = kind(y)\n+\n+  if (ieee_support_underflow_control(x)) then\n+\n+    x = tiny(x)\n+    call ieee_set_underflow_mode(.true.)\n+    x = x / 2000._kx\n+    if (x == 0) call abort\n+    call ieee_get_underflow_mode(l)\n+    if (.not. l) call abort\n+\n+    x = tiny(x)\n+    call ieee_set_underflow_mode(.false.)\n+    x = x / 2000._kx\n+    if (x > 0) call abort\n+    call ieee_get_underflow_mode(l)\n+    if (l) call abort\n+\n+  end if\n+\n+  if (ieee_support_underflow_control(y)) then\n+\n+    y = tiny(y)\n+    call ieee_set_underflow_mode(.true.)\n+    y = y / 2000._ky\n+    if (y == 0) call abort\n+    call ieee_get_underflow_mode(l)\n+    if (.not. l) call abort\n+\n+    y = tiny(y)\n+    call ieee_set_underflow_mode(.false.)\n+    y = y / 2000._ky\n+    if (y > 0) call abort\n+    call ieee_get_underflow_mode(l)\n+    if (l) call abort\n+\n+  end if\n+\n+end program"}, {"sha": "245e6dbed5b9038217421f3a1f2d1a6469cef715", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5168e47a83d6afcab6afa176da2ba466c383dbb/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5168e47a83d6afcab6afa176da2ba466c383dbb/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=f5168e47a83d6afcab6afa176da2ba466c383dbb", "patch": "@@ -1,3 +1,12 @@\n+2014-07-09  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* libgfortran.h (support_fpu_underflow_control,\n+\tget_fpu_underflow_mode, set_fpu_underflow_mode): New prototypes.\n+\t* config/fpu-*.h (support_fpu_underflow_control,\n+\tget_fpu_underflow_mode, set_fpu_underflow_mode):\n+\tNew functions.\n+\t* ieee/ieee_arithmetic.F90: Support underflow control.\n+\n 2014-07-08  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* config/fpu-sysv.h (get_fpu_rounding_mode): Use FP_RN, FP_RP,"}, {"sha": "201173e581316bdfde2f55777a9733cc5f388552", "filename": "libgfortran/config/fpu-387.h", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5168e47a83d6afcab6afa176da2ba466c383dbb/libgfortran%2Fconfig%2Ffpu-387.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5168e47a83d6afcab6afa176da2ba466c383dbb/libgfortran%2Fconfig%2Ffpu-387.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig%2Ffpu-387.h?ref=f5168e47a83d6afcab6afa176da2ba466c383dbb", "patch": "@@ -62,6 +62,11 @@ has_sse (void)\n \n #define _FPU_RC_MASK    0x3\n \n+/* Enable flush to zero mode.  */\n+\n+#define MXCSR_FTZ (1 << 15)\n+\n+\n /* This structure corresponds to the layout of the block\n    written by FSTENV.  */\n typedef struct\n@@ -82,7 +87,6 @@ typedef struct\n }\n my_fenv_t;\n \n-\n /* Check we can actually store the FPU state in the allocated size.  */\n _Static_assert (sizeof(my_fenv_t) <= (size_t) GFC_FPE_STATE_BUFFER_SIZE,\n \t\t\"GFC_FPE_STATE_BUFFER_SIZE is too small\");\n@@ -455,3 +459,47 @@ set_fpu_state (void *state)\n     __asm__ __volatile__ (\"%vldmxcsr\\t%0\" : : \"m\" (envp->__mxcsr));\n }\n \n+\n+int\n+support_fpu_underflow_control (int kind)\n+{\n+  if (!has_sse())\n+    return 0;\n+\n+  return (kind == 4 || kind == 8) ? 1 : 0;\n+}\n+\n+\n+int\n+get_fpu_underflow_mode (void)\n+{\n+  unsigned int cw_sse;\n+\n+  if (!has_sse())\n+    return 1;\n+\n+  __asm__ __volatile__ (\"%vstmxcsr\\t%0\" : \"=m\" (cw_sse));\n+\n+  /* Return 0 for abrupt underflow (flush to zero), 1 for gradual underflow.  */\n+  return (cw_sse & MXCSR_FTZ) ? 0 : 1;\n+}\n+\n+\n+void\n+set_fpu_underflow_mode (int gradual)\n+{\n+  unsigned int cw_sse;\n+\n+  if (!has_sse())\n+    return;\n+\n+  __asm__ __volatile__ (\"%vstmxcsr\\t%0\" : \"=m\" (cw_sse));\n+\n+  if (gradual)\n+    cw_sse &= ~MXCSR_FTZ;\n+  else\n+    cw_sse |= MXCSR_FTZ;\n+\n+  __asm__ __volatile__ (\"%vldmxcsr\\t%0\" : : \"m\" (cw_sse));\n+}\n+"}, {"sha": "aec7756fda506a411dc4bf6ecf11c6b4871c5c9f", "filename": "libgfortran/config/fpu-aix.h", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5168e47a83d6afcab6afa176da2ba466c383dbb/libgfortran%2Fconfig%2Ffpu-aix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5168e47a83d6afcab6afa176da2ba466c383dbb/libgfortran%2Fconfig%2Ffpu-aix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig%2Ffpu-aix.h?ref=f5168e47a83d6afcab6afa176da2ba466c383dbb", "patch": "@@ -417,3 +417,23 @@ set_fpu_state (void *state)\n   fesetenv (state);\n }\n \n+\n+int\n+support_fpu_underflow_control (int kind __attribute__((unused)))\n+{\n+  return 0;\n+}\n+\n+\n+int\n+get_fpu_underflow_mode (void)\n+{\n+  return 0;\n+}\n+\n+\n+void\n+set_fpu_underflow_mode (int gradual __attribute__((unused)))\n+{\n+}\n+"}, {"sha": "e739cd7bc26730a9717211e6a8af208f851cc12f", "filename": "libgfortran/config/fpu-generic.h", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5168e47a83d6afcab6afa176da2ba466c383dbb/libgfortran%2Fconfig%2Ffpu-generic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5168e47a83d6afcab6afa176da2ba466c383dbb/libgfortran%2Fconfig%2Ffpu-generic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig%2Ffpu-generic.h?ref=f5168e47a83d6afcab6afa176da2ba466c383dbb", "patch": "@@ -75,3 +75,24 @@ void\n set_fpu_rounding_mode (int round __attribute__((unused)))\n {\n }\n+\n+\n+int\n+support_fpu_underflow_control (int kind __attribute__((unused)))\n+{\n+  return 0;\n+}\n+\n+\n+int\n+get_fpu_underflow_mode (void)\n+{\n+  return 0;\n+}\n+\n+\n+void\n+set_fpu_underflow_mode (int gradual __attribute__((unused)))\n+{\n+}\n+"}, {"sha": "149e8a3ac92681ea24116afadfef6b6dfdbbd2f2", "filename": "libgfortran/config/fpu-glibc.h", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5168e47a83d6afcab6afa176da2ba466c383dbb/libgfortran%2Fconfig%2Ffpu-glibc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5168e47a83d6afcab6afa176da2ba466c383dbb/libgfortran%2Fconfig%2Ffpu-glibc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig%2Ffpu-glibc.h?ref=f5168e47a83d6afcab6afa176da2ba466c383dbb", "patch": "@@ -429,3 +429,53 @@ set_fpu_state (void *state)\n   fesetenv (state);\n }\n \n+\n+/* Underflow in glibc is currently only supported on alpha, through\n+   the FE_MAP_UMZ macro and __ieee_set_fp_control() function call.  */\n+\n+int\n+support_fpu_underflow_control (int kind __attribute__((unused)))\n+{\n+#if defined(__alpha__) && defined(FE_MAP_UMZ)\n+  return (kind == 4 || kind == 8) ? 1 : 0;\n+#else\n+  return 0;\n+#endif\n+}\n+\n+\n+int\n+get_fpu_underflow_mode (void)\n+{\n+#if defined(__alpha__) && defined(FE_MAP_UMZ)\n+\n+  fenv_t state = __ieee_get_fp_control ();\n+\n+  /* Return 0 for abrupt underflow (flush to zero), 1 for gradual underflow.  */\n+  return (state & FE_MAP_UMZ) ? 0 : 1;\n+\n+#else\n+\n+  return 0;\n+\n+#endif\n+}\n+\n+\n+void\n+set_fpu_underflow_mode (int gradual __attribute__((unused)))\n+{\n+#if defined(__alpha__) && defined(FE_MAP_UMZ)\n+\n+  fenv_t state = __ieee_get_fp_control ();\n+\n+  if (gradual)\n+    state &= ~FE_MAP_UMZ;\n+  else\n+    state |= FE_MAP_UMZ;\n+\n+  __ieee_set_fp_control (state);\n+\n+#endif\n+}\n+"}, {"sha": "225f591af720ded7d56691fe750905d9fae7b8ef", "filename": "libgfortran/config/fpu-sysv.h", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5168e47a83d6afcab6afa176da2ba466c383dbb/libgfortran%2Fconfig%2Ffpu-sysv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5168e47a83d6afcab6afa176da2ba466c383dbb/libgfortran%2Fconfig%2Ffpu-sysv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig%2Ffpu-sysv.h?ref=f5168e47a83d6afcab6afa176da2ba466c383dbb", "patch": "@@ -425,3 +425,23 @@ set_fpu_state (void *s)\n   fpsetround (state->round);\n }\n \n+\n+int\n+support_fpu_underflow_control (int kind __attribute__((unused)))\n+{\n+  return 0;\n+}\n+\n+\n+int\n+get_fpu_underflow_mode (void)\n+{\n+  return 0;\n+}\n+\n+\n+void\n+set_fpu_underflow_mode (int gradual __attribute__((unused)))\n+{\n+}\n+"}, {"sha": "22ff55b9a80f286cd2a74b93bc59c35ef537fd74", "filename": "libgfortran/ieee/ieee_arithmetic.F90", "status": "modified", "additions": 81, "deletions": 26, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5168e47a83d6afcab6afa176da2ba466c383dbb/libgfortran%2Fieee%2Fieee_arithmetic.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5168e47a83d6afcab6afa176da2ba466c383dbb/libgfortran%2Fieee%2Fieee_arithmetic.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fieee%2Fieee_arithmetic.F90?ref=f5168e47a83d6afcab6afa176da2ba466c383dbb", "patch": "@@ -349,6 +349,29 @@ pure integer function support_rounding_helper(flag) &\n     end function\n   end interface\n \n+  ! IEEE_SUPPORT_UNDERFLOW_CONTROL\n+\n+  interface IEEE_SUPPORT_UNDERFLOW_CONTROL\n+    module procedure IEEE_SUPPORT_UNDERFLOW_CONTROL_4, &\n+                     IEEE_SUPPORT_UNDERFLOW_CONTROL_8, &\n+#ifdef HAVE_GFC_REAL_10\n+                     IEEE_SUPPORT_UNDERFLOW_CONTROL_10, &\n+#endif\n+#ifdef HAVE_GFC_REAL_16\n+                     IEEE_SUPPORT_UNDERFLOW_CONTROL_16, &\n+#endif\n+                     IEEE_SUPPORT_UNDERFLOW_CONTROL_NOARG\n+  end interface\n+  public :: IEEE_SUPPORT_UNDERFLOW_CONTROL\n+  \n+  ! Interface to the FPU-specific function\n+  interface\n+    pure integer function support_underflow_control_helper(kind) &\n+        bind(c, name=\"_gfortrani_support_fpu_underflow_control\")\n+      integer, intent(in), value :: kind\n+    end function\n+  end interface\n+\n ! IEEE_SUPPORT_* generic functions\n \n #if defined(HAVE_GFC_REAL_10) && defined(HAVE_GFC_REAL_16)\n@@ -373,7 +396,6 @@ pure integer function support_rounding_helper(flag) &\n SUPPORTGENERIC(IEEE_SUPPORT_NAN)\n SUPPORTGENERIC(IEEE_SUPPORT_SQRT)\n SUPPORTGENERIC(IEEE_SUPPORT_STANDARD)\n-SUPPORTGENERIC(IEEE_SUPPORT_UNDERFLOW_CONTROL)\n \n contains\n \n@@ -560,17 +582,14 @@ elemental real(kind=8) function IEEE_VALUE_8(X, C) result(res)\n   subroutine IEEE_GET_ROUNDING_MODE (ROUND_VALUE)\n     implicit none\n     type(IEEE_ROUND_TYPE), intent(out) :: ROUND_VALUE\n-    integer :: i\n \n     interface\n       integer function helper() &\n         bind(c, name=\"_gfortrani_get_fpu_rounding_mode\")\n       end function\n     end interface\n \n-    ! FIXME: Use intermediate variable i to avoid triggering PR59023\n-    i = helper()\n-    ROUND_VALUE = IEEE_ROUND_TYPE(i)\n+    ROUND_VALUE = IEEE_ROUND_TYPE(helper())\n   end subroutine\n \n \n@@ -596,10 +615,14 @@ subroutine helper(val) &\n   subroutine IEEE_GET_UNDERFLOW_MODE (GRADUAL)\n     implicit none\n     logical, intent(out) :: GRADUAL\n-    ! We do not support getting/setting underflow mode yet. We still\n-    ! provide the procedures to avoid link-time error if a user program\n-    ! uses it protected by a call to IEEE_SUPPORT_UNDERFLOW_CONTROL\n-    call abort\n+\n+    interface\n+      integer function helper() &\n+        bind(c, name=\"_gfortrani_get_fpu_underflow_mode\")\n+      end function\n+    end interface\n+\n+    GRADUAL = (helper() /= 0)\n   end subroutine\n \n \n@@ -608,10 +631,15 @@ subroutine IEEE_GET_UNDERFLOW_MODE (GRADUAL)\n   subroutine IEEE_SET_UNDERFLOW_MODE (GRADUAL)\n     implicit none\n     logical, intent(in) :: GRADUAL\n-    ! We do not support getting/setting underflow mode yet. We still\n-    ! provide the procedures to avoid link-time error if a user program\n-    ! uses it protected by a call to IEEE_SUPPORT_UNDERFLOW_CONTROL\n-    call abort\n+\n+    interface\n+      subroutine helper(val) &\n+          bind(c, name=\"_gfortrani_set_fpu_underflow_mode\")\n+        integer, value :: val\n+      end subroutine\n+    end interface\n+\n+    call helper(merge(1, 0, GRADUAL))\n   end subroutine\n \n ! IEEE_SUPPORT_ROUNDING\n@@ -658,6 +686,46 @@ pure logical function IEEE_SUPPORT_ROUNDING_NOARG (ROUND_VALUE) result(res)\n #endif\n   end function\n \n+! IEEE_SUPPORT_UNDERFLOW_CONTROL\n+\n+  pure logical function IEEE_SUPPORT_UNDERFLOW_CONTROL_4 (X) result(res)\n+    implicit none\n+    real(kind=4), intent(in) :: X\n+    res = (support_underflow_control_helper(4) /= 0)\n+  end function\n+\n+  pure logical function IEEE_SUPPORT_UNDERFLOW_CONTROL_8 (X) result(res)\n+    implicit none\n+    real(kind=8), intent(in) :: X\n+    res = (support_underflow_control_helper(8) /= 0)\n+  end function\n+\n+#ifdef HAVE_GFC_REAL_10\n+  pure logical function IEEE_SUPPORT_UNDERFLOW_CONTROL_10 (X) result(res)\n+    implicit none\n+    real(kind=10), intent(in) :: X\n+    res = .false.\n+  end function\n+#endif\n+\n+#ifdef HAVE_GFC_REAL_16\n+  pure logical function IEEE_SUPPORT_UNDERFLOW_CONTROL_16 (X) result(res)\n+    implicit none\n+    real(kind=16), intent(in) :: X\n+    res = .false.\n+  end function\n+#endif\n+\n+  pure logical function IEEE_SUPPORT_UNDERFLOW_CONTROL_NOARG () result(res)\n+    implicit none\n+#if defined(HAVE_GFC_REAL_10) || defined(HAVE_GFC_REAL_16)\n+    res = .false.\n+#else\n+    res = (support_underflow_control_helper(4) /= 0 &\n+           .and. support_underflow_control_helper(8) /= 0)\n+#endif\n+  end function\n+\n ! IEEE_SUPPORT_* functions\n \n #define SUPPORTMACRO(NAME, INTKIND, VALUE) \\\n@@ -801,17 +869,4 @@ pure logical function NAME/**/_NOARG () result(res) ; \\\n SUPPORTMACRO_NOARG(IEEE_SUPPORT_STANDARD,.true.)\n #endif\n \n-! IEEE_SUPPORT_UNDERFLOW_CONTROL\n-\n-SUPPORTMACRO(IEEE_SUPPORT_UNDERFLOW_CONTROL,4,.false.)\n-SUPPORTMACRO(IEEE_SUPPORT_UNDERFLOW_CONTROL,8,.false.)\n-#ifdef HAVE_GFC_REAL_10\n-SUPPORTMACRO(IEEE_SUPPORT_UNDERFLOW_CONTROL,10,.false.)\n-#endif\n-#ifdef HAVE_GFC_REAL_16\n-SUPPORTMACRO(IEEE_SUPPORT_UNDERFLOW_CONTROL,16,.false.)\n-#endif\n-SUPPORTMACRO_NOARG(IEEE_SUPPORT_UNDERFLOW_CONTROL,.false.)\n-\n-\n end module IEEE_ARITHMETIC"}, {"sha": "d2de76fcb92730528730caa8e0a5ae06642ed15c", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5168e47a83d6afcab6afa176da2ba466c383dbb/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5168e47a83d6afcab6afa176da2ba466c383dbb/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=f5168e47a83d6afcab6afa176da2ba466c383dbb", "patch": "@@ -775,6 +775,15 @@ internal_proto(get_fpu_state);\n extern void set_fpu_state (void *);\n internal_proto(set_fpu_state);\n \n+extern int get_fpu_underflow_mode (void);\n+internal_proto(get_fpu_underflow_mode);\n+\n+extern void set_fpu_underflow_mode (int);\n+internal_proto(set_fpu_underflow_mode);\n+\n+extern int support_fpu_underflow_control (int);\n+internal_proto(support_fpu_underflow_control);\n+\n /* memory.c */\n \n extern void *xmalloc (size_t) __attribute__ ((malloc));"}]}