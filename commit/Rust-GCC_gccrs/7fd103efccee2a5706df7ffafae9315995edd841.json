{"sha": "7fd103efccee2a5706df7ffafae9315995edd841", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZkMTAzZWZjY2VlMmE1NzA2ZGY3ZmZhZmFlOTMxNTk5NWVkZDg0MQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2015-10-13T10:08:40Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2015-10-13T10:08:40Z"}, "message": "Handle original loop tree in expand_omp_for_generic\n\n2015-10-13  Tom de Vries  <tom@codesourcery.com>\n\n\tPR tree-optimization/67476\n\t* omp-low.c (expand_omp_for_generic): Handle original loop tree.\n\nFrom-SVN: r228754", "tree": {"sha": "0c4fd45db39c797571ee6e306937437b02fab080", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c4fd45db39c797571ee6e306937437b02fab080"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7fd103efccee2a5706df7ffafae9315995edd841", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fd103efccee2a5706df7ffafae9315995edd841", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fd103efccee2a5706df7ffafae9315995edd841", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fd103efccee2a5706df7ffafae9315995edd841/comments", "author": null, "committer": null, "parents": [{"sha": "b939ea86b96fcff3f4fe61ad794858ddae553563", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b939ea86b96fcff3f4fe61ad794858ddae553563", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b939ea86b96fcff3f4fe61ad794858ddae553563"}], "stats": {"total": 35, "additions": 26, "deletions": 9}, "files": [{"sha": "4632387b2ac0f258d0eca8fd95bc0ca688debda4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fd103efccee2a5706df7ffafae9315995edd841/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fd103efccee2a5706df7ffafae9315995edd841/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7fd103efccee2a5706df7ffafae9315995edd841", "patch": "@@ -1,3 +1,8 @@\n+2015-10-13  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR tree-optimization/67476\n+\t* omp-low.c (expand_omp_for_generic): Handle original loop tree.\n+\n 2015-10-13  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vect-data-refs.c (vect_analyze_data_ref_dependences): Allocate"}, {"sha": "7e894e4da7adf4d64886cdabf41096e51a4b976a", "filename": "gcc/omp-low.c", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fd103efccee2a5706df7ffafae9315995edd841/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fd103efccee2a5706df7ffafae9315995edd841/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=7fd103efccee2a5706df7ffafae9315995edd841", "patch": "@@ -6439,7 +6439,6 @@ expand_omp_for_generic (struct omp_region *region,\n       remove_edge (e);\n \n       make_edge (cont_bb, l2_bb, EDGE_FALSE_VALUE);\n-      add_bb_to_loop (l2_bb, cont_bb->loop_father);\n       e = find_edge (cont_bb, l1_bb);\n       if (e == NULL)\n \t{\n@@ -6516,17 +6515,30 @@ expand_omp_for_generic (struct omp_region *region,\n       set_immediate_dominator (CDI_DOMINATORS, l1_bb,\n \t\t\t       recompute_dominator (CDI_DOMINATORS, l1_bb));\n \n-      struct loop *outer_loop = alloc_loop ();\n-      outer_loop->header = l0_bb;\n-      outer_loop->latch = l2_bb;\n-      add_loop (outer_loop, l0_bb->loop_father);\n+      /* We enter expand_omp_for_generic with a loop.  This original loop may\n+\t have its own loop struct, or it may be part of an outer loop struct\n+\t (which may be the fake loop).  */\n+      struct loop *outer_loop = entry_bb->loop_father;\n+      bool orig_loop_has_loop_struct = l1_bb->loop_father != outer_loop;\n \n-      if (!gimple_omp_for_combined_p (fd->for_stmt))\n+      add_bb_to_loop (l2_bb, outer_loop);\n+\n+      /* We've added a new loop around the original loop.  Allocate the\n+\t corresponding loop struct.  */\n+      struct loop *new_loop = alloc_loop ();\n+      new_loop->header = l0_bb;\n+      new_loop->latch = l2_bb;\n+      add_loop (new_loop, outer_loop);\n+\n+      /* Allocate a loop structure for the original loop unless we already\n+\t had one.  */\n+      if (!orig_loop_has_loop_struct\n+\t  && !gimple_omp_for_combined_p (fd->for_stmt))\n \t{\n-\t  struct loop *loop = alloc_loop ();\n-\t  loop->header = l1_bb;\n+\t  struct loop *orig_loop = alloc_loop ();\n+\t  orig_loop->header = l1_bb;\n \t  /* The loop may have multiple latches.  */\n-\t  add_loop (loop, outer_loop);\n+\t  add_loop (orig_loop, new_loop);\n \t}\n     }\n }"}]}