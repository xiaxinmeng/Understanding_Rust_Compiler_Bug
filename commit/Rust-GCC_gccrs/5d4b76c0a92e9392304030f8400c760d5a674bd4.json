{"sha": "5d4b76c0a92e9392304030f8400c760d5a674bd4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ0Yjc2YzBhOTJlOTM5MjMwNDAzMGY4NDAwYzc2MGQ1YTY3NGJkNA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-02-09T13:09:45Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-02-09T13:09:45Z"}, "message": "builtin-bitops-1.c: When testing the int-wide bitops, use the constants of the same width.\n\n\t* gcc.c-torture/execute/builtin-bitops-1.c: When testing the\n\tint-wide bitops, use the constants of the same width.\n\tLikewise, if long long is 32-bit wide, test bitops using\n\t32-bit constants.\n\nFrom-SVN: r62603", "tree": {"sha": "db99035145e3bbb2e2db5ec04838a727334da9ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db99035145e3bbb2e2db5ec04838a727334da9ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d4b76c0a92e9392304030f8400c760d5a674bd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d4b76c0a92e9392304030f8400c760d5a674bd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d4b76c0a92e9392304030f8400c760d5a674bd4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d4b76c0a92e9392304030f8400c760d5a674bd4/comments", "author": null, "committer": null, "parents": [{"sha": "794aca5dcd2e727e0eece90381e11bf1de4f4df0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/794aca5dcd2e727e0eece90381e11bf1de4f4df0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/794aca5dcd2e727e0eece90381e11bf1de4f4df0"}], "stats": {"total": 104, "additions": 88, "deletions": 16}, "files": [{"sha": "781af018216386b5f7431e7fd46f128926e5b450", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d4b76c0a92e9392304030f8400c760d5a674bd4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d4b76c0a92e9392304030f8400c760d5a674bd4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5d4b76c0a92e9392304030f8400c760d5a674bd4", "patch": "@@ -1,3 +1,10 @@\n+2003-02-09  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* gcc.c-torture/execute/builtin-bitops-1.c: When testing the\n+\tint-wide bitops, use the constants of the same width.\n+\tLikewise, if long long is 32-bit wide, test bitops using\n+\t32-bit constants.\n+\n 2003-02-07  Loren James Rittle  <ljrittle@acm.org>\n \n \t* gcc.dg/20021014-1.c: Annotate with expected notice text."}, {"sha": "8c3122cc6332beea5a4648844b31d93fa7f22b00", "filename": "gcc/testsuite/gcc.c-torture/execute/builtin-bitops-1.c", "status": "modified", "additions": 81, "deletions": 16, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d4b76c0a92e9392304030f8400c760d5a674bd4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltin-bitops-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d4b76c0a92e9392304030f8400c760d5a674bd4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltin-bitops-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltin-bitops-1.c?ref=5d4b76c0a92e9392304030f8400c760d5a674bd4", "patch": "@@ -1,6 +1,40 @@\n #include <limits.h>\n #include <assert.h>\n \n+#if __INT_MAX__ > 2147483647L\n+# if __INT_MAX__ >= 9223372036854775807L\n+#  define BITSIZEOF_INT 64\n+# else\n+#  define BITSIZEOF_INT 32\n+# endif\n+#else\n+# if __INT_MAX__ >= 2147483647L\n+#  define BITSIZEOF_INT 32\n+# else\n+#  define BITSIZEOF_INT 16\n+# endif\n+#endif\n+\n+#if __LONG_MAX__ > 2147483647L\n+# if __LONG_MAX__ >= 9223372036854775807L\n+#  define BITSIZEOF_LONG 64\n+# else\n+#  define BITSIZEOF_LONG 32\n+# endif\n+#else\n+# define BITSIZEOF_LONG 32\n+#endif\n+\n+#if __LONG_LONG_MAX__ > 2147483647L\n+# if __LONG_LONG_MAX__ >= 9223372036854775807L\n+#  define BITSIZEOF_LONG_LONG 64\n+# else\n+#  define BITSIZEOF_LONG_LONG 32\n+# endif\n+#else\n+# define BITSIZEOF_LONG_LONG 32\n+#endif\n+\n #define MAKE_FUNS(suffix, type)\t\t\t\t\t\t\\\n int my_ffs##suffix(type x) {\t\t\t\t\t\t\\\n     int i;\t\t\t\t\t\t\t\t\\\n@@ -53,21 +87,36 @@ MAKE_FUNS (ll, unsigned long long);\n extern void abort (void);\n extern void exit (int);\n \n+#define NUMS16\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    0x0000U,\t\t\t\t\t\\\n+    0x0001U,\t\t\t\t\t\\\n+    0x8000U,\t\t\t\t\t\\\n+    0x0002U,\t\t\t\t\t\\\n+    0x4000U,\t\t\t\t\t\\\n+    0x0100U,\t\t\t\t\t\\\n+    0x0080U,\t\t\t\t\t\\\n+    0xa5a5U,\t\t\t\t\t\\\n+    0x5a5aU,\t\t\t\t\t\\\n+    0xcafeU,\t\t\t\t\t\\\n+    0xffffU\t\t\t\t\t\\\n+  }\n+\n #define NUMS32\t\t\t\t\t\\\n   {\t\t\t\t\t\t\\\n-    0x00000000U,\t\t\t\t\\\n-    0x00000001U,\t\t\t\t\\\n-    0x80000000U,\t\t\t\t\\\n-    0x00000002U,\t\t\t\t\\\n-    0x40000000U,\t\t\t\t\\\n-    0x00010000U,\t\t\t\t\\\n-    0x00008000U,\t\t\t\t\\\n-    0xa5a5a5a5U,\t\t\t\t\\\n-    0x5a5a5a5aU,\t\t\t\t\\\n-    0xcafe0000U,\t\t\t\t\\\n-    0x00cafe00U,\t\t\t\t\\\n-    0x0000cafeU,\t\t\t\t\\\n-    0xffffffffU\t\t\t\t\t\\\n+    0x00000000UL,\t\t\t\t\\\n+    0x00000001UL,\t\t\t\t\\\n+    0x80000000UL,\t\t\t\t\\\n+    0x00000002UL,\t\t\t\t\\\n+    0x40000000UL,\t\t\t\t\\\n+    0x00010000UL,\t\t\t\t\\\n+    0x00008000UL,\t\t\t\t\\\n+    0xa5a5a5a5UL,\t\t\t\t\\\n+    0x5a5a5a5aUL,\t\t\t\t\\\n+    0xcafe0000UL,\t\t\t\t\\\n+    0x00cafe00UL,\t\t\t\t\\\n+    0x0000cafeUL,\t\t\t\t\\\n+    0xffffffffUL\t\t\t\t\\\n   }\n \n #define NUMS64\t\t\t\t\t\\\n@@ -87,16 +136,28 @@ extern void exit (int);\n     0xffffffffffffffffULL\t\t\t\\\n   }\n \n-unsigned int ints[] = NUMS32;\n+unsigned int ints[] =\n+#if BITSIZEOF_INT == 64\n+NUMS64;\n+#elif BITSIZEOF_INT == 32\n+NUMS32;\n+#else\n+NUMS16;\n+#endif\n \n unsigned long longs[] =\n-#if __LONG_MAX__ >= 9223372036854775807L\n+#if BITSIZEOF_LONG == 64\n NUMS64;\n #else\n NUMS32;\n #endif\n \n-unsigned long long longlongs[] = NUMS64;\n+unsigned long long longlongs[] =\n+#if BITSIZEOF_LONG_LONG == 64\n+NUMS64;\n+#else\n+NUMS32;\n+#endif\n \n #define N(table) (sizeof (table) / sizeof (table[0]))\n \n@@ -167,6 +228,7 @@ main (void)\n   if (__builtin_parity##suffix (x) != my_parity##suffix (x))\t\t\\\n     abort ();\n \n+#if BITSIZEOF_INT == 32\n   TEST(0x00000000UL,);\n   TEST(0x00000001UL,);\n   TEST(0x80000000UL,);\n@@ -179,7 +241,9 @@ main (void)\n   TEST(0x00cafe00UL,);\n   TEST(0x0000cafeUL,);\n   TEST(0xffffffffUL,);\n+#endif\n \n+#if BITSIZEOF_LONG_LONG == 64\n   TEST(0x0000000000000000ULL, ll);\n   TEST(0x0000000000000001ULL, ll);\n   TEST(0x8000000000000000ULL, ll);\n@@ -193,6 +257,7 @@ main (void)\n   TEST(0x0000cafecafe0000ULL, ll);\n   TEST(0x00000000cafecafeULL, ll);\n   TEST(0xffffffffffffffffULL, ll);\n+#endif\n \n   exit (0);\n }"}]}