{"sha": "c7813484bc9fe2c578d7538d0a9e286bf2e64599", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc4MTM0ODRiYzlmZTJjNTc4ZDc1MzhkMGE5ZTI4NmJmMmU2NDU5OQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2018-09-25T22:17:45Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2018-09-25T22:17:45Z"}, "message": "re PR c/87387 (trunk/gcc/builtins.c:585:7: warning: -Wself-assign problem)\n\n\tPR c/87387\n        * builtins.c (unterminated_array): Simplify.\n\t* expr.c (string_constant): Handle SSA_NAME.  Add more exceptions\n\twhere pointer arithmetic is safe.\n\n\t* gcc.dg/warn-stpcpy-no-nul.c: Drop unnecessary xfails.\n\t* gcc.dg/warn-stplen-no-nul.c: Likewise.\n\nFrom-SVN: r264585", "tree": {"sha": "9e120ff490c0f193509af127eb4cae401e944f54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e120ff490c0f193509af127eb4cae401e944f54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7813484bc9fe2c578d7538d0a9e286bf2e64599", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7813484bc9fe2c578d7538d0a9e286bf2e64599", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7813484bc9fe2c578d7538d0a9e286bf2e64599", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7813484bc9fe2c578d7538d0a9e286bf2e64599/comments", "author": null, "committer": null, "parents": [{"sha": "a9f6e019d15819f52b312e1b10cd460b59b57780", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9f6e019d15819f52b312e1b10cd460b59b57780", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9f6e019d15819f52b312e1b10cd460b59b57780"}], "stats": {"total": 86, "additions": 57, "deletions": 29}, "files": [{"sha": "43857153e9f368d218016c59ac0cd5a5396a3382", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7813484bc9fe2c578d7538d0a9e286bf2e64599/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7813484bc9fe2c578d7538d0a9e286bf2e64599/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c7813484bc9fe2c578d7538d0a9e286bf2e64599", "patch": "@@ -1,3 +1,10 @@\n+2018-09-25  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR c/87387\n+        * builtins.c (unterminated_array): Simplify.\n+\t* expr.c (string_constant): Handle SSA_NAME.  Add more exceptions\n+\twhere pointer arithmetic is safe.\n+\n 2018-09-25  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR target/86987"}, {"sha": "5f00208ff090cf8afa3eaa30e1ffcdc063def20c", "filename": "gcc/builtins.c", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7813484bc9fe2c578d7538d0a9e286bf2e64599/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7813484bc9fe2c578d7538d0a9e286bf2e64599/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=c7813484bc9fe2c578d7538d0a9e286bf2e64599", "patch": "@@ -570,28 +570,9 @@ warn_string_no_nul (location_t loc, const char *fn, tree arg, tree decl)\n tree\n unterminated_array (tree exp)\n {\n-  if (TREE_CODE (exp) == SSA_NAME)\n-    {\n-      gimple *stmt = SSA_NAME_DEF_STMT (exp);\n-      if (!is_gimple_assign (stmt))\n-\treturn NULL_TREE;\n-\n-      tree rhs1 = gimple_assign_rhs1 (stmt);\n-      tree_code code = gimple_assign_rhs_code (stmt);\n-      if (code == ADDR_EXPR\n-\t  && TREE_CODE (TREE_OPERAND (rhs1, 0)) == ARRAY_REF)\n-\trhs1 = rhs1;\n-      else if (code != POINTER_PLUS_EXPR)\n-\treturn NULL_TREE;\n-\n-      exp = rhs1;\n-    }\n-\n   tree nonstr = NULL;\n-  if (c_strlen (exp, 1, &nonstr, 1) == NULL && nonstr)\n-    return nonstr;\n-\n-  return NULL_TREE;\n+  c_strlen (exp, 1, &nonstr);\n+  return nonstr;\n }\n \n /* Compute the length of a null-terminated character string or wide"}, {"sha": "583c7f008ffc3194d7e790c063d483866524da20", "filename": "gcc/expr.c", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7813484bc9fe2c578d7538d0a9e286bf2e64599/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7813484bc9fe2c578d7538d0a9e286bf2e64599/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=c7813484bc9fe2c578d7538d0a9e286bf2e64599", "patch": "@@ -11372,7 +11372,10 @@ string_constant (tree arg, tree *ptr_offset, tree *mem_size, tree *decl)\n \t  /* Avoid pointers to arrays (see bug 86622).  */\n \t  if (POINTER_TYPE_P (TREE_TYPE (arg))\n \t      && TREE_CODE (TREE_TYPE (TREE_TYPE (arg))) == ARRAY_TYPE\n-\t      && TREE_CODE (TREE_OPERAND (arg0, 0)) == ARRAY_REF)\n+\t      && !(decl && !*decl)\n+\t      && !(decl && tree_fits_uhwi_p (DECL_SIZE_UNIT (*decl))\n+\t\t   && mem_size && tree_fits_uhwi_p (*mem_size)\n+\t\t   && tree_int_cst_equal (*mem_size, DECL_SIZE_UNIT (*decl))))\n \t    return NULL_TREE;\n \n \t  tree type = TREE_TYPE (arg1);\n@@ -11381,6 +11384,38 @@ string_constant (tree arg, tree *ptr_offset, tree *mem_size, tree *decl)\n \t}\n       return NULL_TREE;\n     }\n+  else if (TREE_CODE (arg) == SSA_NAME)\n+    {\n+      gimple *stmt = SSA_NAME_DEF_STMT (arg);\n+      if (!is_gimple_assign (stmt))\n+\treturn NULL_TREE;\n+\n+      tree rhs1 = gimple_assign_rhs1 (stmt);\n+      tree_code code = gimple_assign_rhs_code (stmt);\n+      if (code == ADDR_EXPR)\n+\treturn string_constant (rhs1, ptr_offset, mem_size, decl);\n+      else if (code != POINTER_PLUS_EXPR)\n+\treturn NULL_TREE;\n+\n+      tree offset;\n+      if (tree str = string_constant (rhs1, &offset, mem_size, decl))\n+\t{\n+\t  /* Avoid pointers to arrays (see bug 86622).  */\n+\t  if (POINTER_TYPE_P (TREE_TYPE (rhs1))\n+\t      && TREE_CODE (TREE_TYPE (TREE_TYPE (rhs1))) == ARRAY_TYPE\n+\t      && !(decl && !*decl)\n+\t      && !(decl && tree_fits_uhwi_p (DECL_SIZE_UNIT (*decl))\n+\t\t   && mem_size && tree_fits_uhwi_p (*mem_size)\n+\t\t   && tree_int_cst_equal (*mem_size, DECL_SIZE_UNIT (*decl))))\n+\t    return NULL_TREE;\n+\n+\t  tree rhs2 = gimple_assign_rhs2 (stmt);\n+\t  tree type = TREE_TYPE (rhs2);\n+\t  *ptr_offset = fold_build2 (PLUS_EXPR, type, offset, rhs2);\n+\t  return str;\n+\t}\n+      return NULL_TREE;\n+    }\n   else if (DECL_P (arg))\n     array = arg;\n   else"}, {"sha": "7b26b894b1551b77724147ac4ef3f6d701a58165", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7813484bc9fe2c578d7538d0a9e286bf2e64599/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7813484bc9fe2c578d7538d0a9e286bf2e64599/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c7813484bc9fe2c578d7538d0a9e286bf2e64599", "patch": "@@ -1,3 +1,8 @@\n+2018-09-25  Jeff Law  <law@redhat.com>\n+\n+\t* gcc.dg/warn-stpcpy-no-nul.c: Drop unnecessary xfails.\n+\t* gcc.dg/warn-stplen-no-nul.c: Likewise.\n+\n 2018-09-25  Alexandre Oliva <oliva@adacore.com>\n \n \t* gnat.dg/dinst.adb: Adjust for locviews."}, {"sha": "e718010ec2a3b2509b7ac69179db3887780a8985", "filename": "gcc/testsuite/gcc.dg/warn-stpcpy-no-nul.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7813484bc9fe2c578d7538d0a9e286bf2e64599/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-stpcpy-no-nul.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7813484bc9fe2c578d7538d0a9e286bf2e64599/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-stpcpy-no-nul.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-stpcpy-no-nul.c?ref=c7813484bc9fe2c578d7538d0a9e286bf2e64599", "patch": "@@ -71,13 +71,13 @@ void test_two_dim_array (char *d)\n   T (&b[3][1] + 1);     /* { dg-warning \"nul\" }  */\n   T (&b[3][v0]);        /* { dg-warning \"nul\" }  */\n   T (&b[3][1] + v0);    /* { dg-warning \"nul\" }  */\n-  T (&b[3][v0] + v1);   /* { dg-warning \"nul\" \"bug ???\" { xfail *-*-* } }  */\n+  T (&b[3][v0] + v1);   /* { dg-warning \"nul\" }  */\n \n   T (&b[i3][i1]);       /* { dg-warning \"nul\" }  */\n   T (&b[i3][i1] + i1);  /* { dg-warning \"nul\" }  */\n   T (&b[i3][v0]);       /* { dg-warning \"nul\" }  */\n   T (&b[i3][i1] + v0);  /* { dg-warning \"nul\" }  */\n-  T (&b[i3][v0] + v1);  /* { dg-warning \"nul\" \"bug ???\" { xfail *-*-* } }  */\n+  T (&b[i3][v0] + v1);  /* { dg-warning \"nul\" }  */\n \n   T (v0 ? \"\" : b[0]);\n   T (v0 ? \"\" : b[1]);"}, {"sha": "b716aa4477097096117c5a3ece2536fc39714172", "filename": "gcc/testsuite/gcc.dg/warn-strlen-no-nul.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7813484bc9fe2c578d7538d0a9e286bf2e64599/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-strlen-no-nul.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7813484bc9fe2c578d7538d0a9e286bf2e64599/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-strlen-no-nul.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-strlen-no-nul.c?ref=c7813484bc9fe2c578d7538d0a9e286bf2e64599", "patch": "@@ -71,9 +71,9 @@ T (&b[3][v0] + v1);     /* { dg-warning \"nul\" }  */\n T (&b[i3][i1]);         /* { dg-warning \"nul\" }  */\n T (&b[i3][i1] + 1);     /* { dg-warning \"nul\" }  */\n T (&b[i3][i1] + i1);    /* { dg-warning \"nul\" }  */\n-T (&b[i3][v0]);         /* { dg-warning \"nul\" \"pr86919\" { xfail *-*-* } }  */\n-T (&b[i3][i1] + v0);    /* { dg-warning \"nul\" \"pr86919\" { xfail *-*-* } }  */\n-T (&b[i3][v0] + v1);    /* { dg-warning \"nul\" \"pr86919\" { xfail *-*-* } }  */\n+T (&b[i3][v0]);         /* { dg-warning \"nul\" }  */\n+T (&b[i3][i1] + v0);    /* { dg-warning \"nul\" }  */\n+T (&b[i3][v0] + v1);    /* { dg-warning \"nul\" }  */\n \n T (v0 ? \"\" : b[0]);\n T (v0 ? \"\" : b[1]);\n@@ -152,10 +152,10 @@ T (&s.b[1] + v0);     /* { dg-warning \"nul\" }  */\n \n T (&s.b[i0]);         /* { dg-warning \"nul\" }  */\n T (&s.b[i0] + i1);    /* { dg-warning \"nul\" }  */\n-T (&s.b[i0] + v0);    /* { dg-warning \"nul\" \"pr86919\" { xfail *-*-* } }  */\n+T (&s.b[i0] + v0);    /* { dg-warning \"nul\" }  */\n T (&s.b[i1]);         /* { dg-warning \"nul\" }  */\n T (&s.b[i1] + i1);    /* { dg-warning \"nul\" }  */\n-T (&s.b[i1] + v0);    /* { dg-warning \"nul\" \"pr86919\" { xfail *-*-* } }  */\n+T (&s.b[i1] + v0);    /* { dg-warning \"nul\" }  */\n \n struct B { struct A a[2]; };\n "}]}