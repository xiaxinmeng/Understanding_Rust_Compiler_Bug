{"sha": "d1427a17a7d98f096ee0b199ef8caf993c8f2e0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE0MjdhMTdhN2Q5OGYwOTZlZTBiMTk5ZWY4Y2FmOTkzYzhmMmUwZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-08-05T15:46:02Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-08-05T15:46:02Z"}, "message": "gensupport.h (get_c_test): Declare.\n\ngcc/\n\t* gensupport.h (get_c_test): Declare.\n\t* gensupport.c (get_c_test): New function.\n\t* genconditions.c (main): Use it.\n\t* genrecog.c (validate_pattern): Likewise.\n\t(match_pattern_1): Likewise.  Remove c_test argument.\n\t(match_pattern): Update accordingly and remove c_test argument.\n\t(main): Update accordingly.\n\nFrom-SVN: r226634", "tree": {"sha": "e2b87b455362f2a157c821a15173804ce016cdac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2b87b455362f2a157c821a15173804ce016cdac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1427a17a7d98f096ee0b199ef8caf993c8f2e0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1427a17a7d98f096ee0b199ef8caf993c8f2e0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1427a17a7d98f096ee0b199ef8caf993c8f2e0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1427a17a7d98f096ee0b199ef8caf993c8f2e0e/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ba0ee63dfe37e08aef608039525304e919c18187", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba0ee63dfe37e08aef608039525304e919c18187", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba0ee63dfe37e08aef608039525304e919c18187"}], "stats": {"total": 75, "additions": 49, "deletions": 26}, "files": [{"sha": "75ed73bd7e9d095b9a9ef4463fb5780cb4f71e05", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1427a17a7d98f096ee0b199ef8caf993c8f2e0e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1427a17a7d98f096ee0b199ef8caf993c8f2e0e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d1427a17a7d98f096ee0b199ef8caf993c8f2e0e", "patch": "@@ -1,3 +1,13 @@\n+2015-08-05  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gensupport.h (get_c_test): Declare.\n+\t* gensupport.c (get_c_test): New function.\n+\t* genconditions.c (main): Use it.\n+\t* genrecog.c (validate_pattern): Likewise.\n+\t(match_pattern_1): Likewise.  Remove c_test argument.\n+\t(match_pattern): Update accordingly and remove c_test argument.\n+\t(main): Update accordingly.\n+\n 2015-08-05  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gensupport.h (get_num_insn_codes): Declare."}, {"sha": "001e58eff8afdc78528cb1df7814bee42e7fece5", "filename": "gcc/genconditions.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1427a17a7d98f096ee0b199ef8caf993c8f2e0e/gcc%2Fgenconditions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1427a17a7d98f096ee0b199ef8caf993c8f2e0e/gcc%2Fgenconditions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconditions.c?ref=d1427a17a7d98f096ee0b199ef8caf993c8f2e0e", "patch": "@@ -222,25 +222,17 @@ main (int argc, char **argv)\n   while (read_md_rtx (&info))\n     {\n       rtx def = info.def;\n-      /* N.B. define_insn_and_split, define_cond_exec are handled\n-\t entirely within read_md_rtx; we never see them.  */\n+      add_c_test (get_c_test (def), -1);\n       switch (GET_CODE (def))\n \t{\n \tcase DEFINE_INSN:\n \tcase DEFINE_EXPAND:\n-\t  add_c_test (XSTR (def, 2), -1);\n \t  /* except.h needs to know whether there is an eh_return\n \t     pattern in the machine description.  */\n \t  if (!strcmp (XSTR (def, 0), \"eh_return\"))\n \t    saw_eh_return = 1;\n \t  break;\n \n-\tcase DEFINE_SPLIT:\n-\tcase DEFINE_PEEPHOLE:\n-\tcase DEFINE_PEEPHOLE2:\n-\t  add_c_test (XSTR (def, 1), -1);\n-\t  break;\n-\n \tdefault:\n \t  break;\n \t}"}, {"sha": "599121fb693da4e4388f574ec2538c9bd33f38c2", "filename": "gcc/genrecog.c", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1427a17a7d98f096ee0b199ef8caf993c8f2e0e/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1427a17a7d98f096ee0b199ef8caf993c8f2e0e/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=d1427a17a7d98f096ee0b199ef8caf993c8f2e0e", "patch": "@@ -519,10 +519,7 @@ validate_pattern (rtx pattern, md_rtx_info *info, rtx set, int set_code)\n \tconst struct pred_data *pred;\n \tconst char *c_test;\n \n-\tif (GET_CODE (info->def) == DEFINE_INSN)\n-\t  c_test = XSTR (info->def, 2);\n-\telse\n-\t  c_test = XSTR (info->def, 1);\n+\tc_test = get_c_test (info->def);\n \n \tif (pred_name[0] != 0)\n \t  {\n@@ -4080,13 +4077,13 @@ match_pattern_2 (state *s, md_rtx_info *info, position *pos, rtx pattern)\n \n    (1) the rtx doesn't match anything already matched by S\n    (2) the rtx matches TOP_PATTERN and\n-   (3) C_TEST is true.\n+   (3) the C test required by INFO->def is true\n \n    For peephole2, TOP_PATTERN is a SEQUENCE of the instruction patterns\n    to match, otherwise it is a single instruction pattern.  */\n \n static void\n-match_pattern_1 (state *s, md_rtx_info *info, rtx pattern, const char *c_test,\n+match_pattern_1 (state *s, md_rtx_info *info, rtx pattern,\n \t\t acceptance_type acceptance)\n {\n   if (acceptance.type == PEEPHOLE2)\n@@ -4120,6 +4117,7 @@ match_pattern_1 (state *s, md_rtx_info *info, rtx pattern, const char *c_test,\n     }\n \n   /* Make sure that the C test is true.  */\n+  const char *c_test = get_c_test (info->def);\n   if (maybe_eval_c_test (c_test) != 1)\n     s = add_decision (s, rtx_test::c_test (c_test), true, false);\n \n@@ -4132,19 +4130,19 @@ match_pattern_1 (state *s, md_rtx_info *info, rtx pattern, const char *c_test,\n    backtracking.  */\n \n static void\n-match_pattern (state *s, md_rtx_info *info, rtx pattern, const char *c_test,\n+match_pattern (state *s, md_rtx_info *info, rtx pattern,\n \t       acceptance_type acceptance)\n {\n   if (merge_states_p)\n     {\n       state root;\n       /* Add the decisions to a fresh state and then merge the full tree\n \t into the existing one.  */\n-      match_pattern_1 (&root, info, pattern, c_test, acceptance);\n+      match_pattern_1 (&root, info, pattern, acceptance);\n       merge_into_state (s, &root);\n     }\n   else\n-    match_pattern_1 (s, info, pattern, c_test, acceptance);\n+    match_pattern_1 (s, info, pattern, acceptance);\n }\n \n /* Begin the output file.  */\n@@ -5256,24 +5254,21 @@ main (int argc, char **argv)\n \t    acceptance.u.full.u.num_clobbers = 0;\n \t    pattern = add_implicit_parallel (XVEC (def, 1));\n \t    validate_pattern (pattern, &info, NULL_RTX, 0);\n-\t    match_pattern (&insn_root, &info, pattern,\n-\t\t\t   XSTR (def, 2), acceptance);\n+\t    match_pattern (&insn_root, &info, pattern, acceptance);\n \n \t    /* If the pattern is a PARALLEL with trailing CLOBBERs,\n \t       allow recog_for_combine to match without the clobbers.  */\n \t    if (GET_CODE (pattern) == PARALLEL\n \t\t&& remove_clobbers (&acceptance, &pattern))\n-\t      match_pattern (&insn_root, &info, pattern,\n-\t\t\t     XSTR (def, 2), acceptance);\n+\t      match_pattern (&insn_root, &info, pattern, acceptance);\n \t    break;\n \t  }\n \n \tcase DEFINE_SPLIT:\n \t  acceptance.type = SPLIT;\n \t  pattern = add_implicit_parallel (XVEC (def, 0));\n \t  validate_pattern (pattern, &info, NULL_RTX, 0);\n-\t  match_pattern (&split_root, &info, pattern,\n-\t\t\t XSTR (def, 1), acceptance);\n+\t  match_pattern (&split_root, &info, pattern, acceptance);\n \n \t  /* Declare the gen_split routine that we'll call if the\n \t     pattern matches.  The definition comes from insn-emit.c.  */\n@@ -5285,8 +5280,7 @@ main (int argc, char **argv)\n \t  acceptance.type = PEEPHOLE2;\n \t  pattern = get_peephole2_pattern (&info);\n \t  validate_pattern (pattern, &info, NULL_RTX, 0);\n-\t  match_pattern (&peephole2_root, &info, pattern,\n-\t\t\t XSTR (def, 1), acceptance);\n+\t  match_pattern (&peephole2_root, &info, pattern, acceptance);\n \n \t  /* Declare the gen_peephole2 routine that we'll call if the\n \t     pattern matches.  The definition comes from insn-emit.c.  */"}, {"sha": "687005808a7dbb38e717c526151bb304730f81b1", "filename": "gcc/gensupport.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1427a17a7d98f096ee0b199ef8caf993c8f2e0e/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1427a17a7d98f096ee0b199ef8caf993c8f2e0e/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=d1427a17a7d98f096ee0b199ef8caf993c8f2e0e", "patch": "@@ -2610,6 +2610,29 @@ get_num_insn_codes ()\n   return sequence_num;\n }\n \n+/* Return the C test that says whether definition rtx DEF can be used,\n+   or \"\" if it can be used unconditionally.  */\n+\n+const char *\n+get_c_test (rtx x)\n+{\n+  switch (GET_CODE (x))\n+    {\n+    case DEFINE_INSN:\n+    case DEFINE_EXPAND:\n+    case DEFINE_SUBST:\n+      return XSTR (x, 2);\n+\n+    case DEFINE_SPLIT:\n+    case DEFINE_PEEPHOLE:\n+    case DEFINE_PEEPHOLE2:\n+      return XSTR (x, 1);\n+\n+    default:\n+      return \"\";\n+    }\n+}\n+\n /* Helper functions for insn elision.  */\n \n /* Compute a hash function of a c_test structure, which is keyed"}, {"sha": "a15c36a10168dc55bb1d6c21490a6b818f9d2661", "filename": "gcc/gensupport.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1427a17a7d98f096ee0b199ef8caf993c8f2e0e/gcc%2Fgensupport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1427a17a7d98f096ee0b199ef8caf993c8f2e0e/gcc%2Fgensupport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.h?ref=d1427a17a7d98f096ee0b199ef8caf993c8f2e0e", "patch": "@@ -50,6 +50,10 @@ extern unsigned int get_num_insn_codes ();\n    Must be set before calling init_md_reader.  */\n extern int insn_elision;\n \n+/* Return the C test that says whether a definition rtx can be used,\n+   or \"\" if it can be used unconditionally.  */\n+extern const char *get_c_test (rtx);\n+\n /* If the C test passed as the argument can be evaluated at compile\n    time, return its truth value; else return -1.  The test must have\n    appeared somewhere in the machine description when genconditions"}]}