{"sha": "d544bc3983fbc512ee03566672751c07f71e1323", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU0NGJjMzk4M2ZiYzUxMmVlMDM1NjY2NzI3NTFjMDdmNzFlMTMyMw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2002-04-01T03:18:49Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2002-04-01T03:18:49Z"}, "message": "rtl.h (RTL_CHECK1, [...]): Const-ify.\n\n\t* rtl.h (RTL_CHECK1, RTL_CHECK2, RTL_CHECKC1, RTL_CHECKC2,\n\tRTVEC_ELT): Const-ify.\n\nFrom-SVN: r51676", "tree": {"sha": "cdce18d86e4e63b38fc857ab5996121284168553", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cdce18d86e4e63b38fc857ab5996121284168553"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d544bc3983fbc512ee03566672751c07f71e1323", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d544bc3983fbc512ee03566672751c07f71e1323", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d544bc3983fbc512ee03566672751c07f71e1323", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d544bc3983fbc512ee03566672751c07f71e1323/comments", "author": null, "committer": null, "parents": [{"sha": "b18101c75fb776da272be6c876a5fa03ecb74dca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b18101c75fb776da272be6c876a5fa03ecb74dca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b18101c75fb776da272be6c876a5fa03ecb74dca"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "08711640fc2ec2c07b63a9897e848bcb80e416d7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d544bc3983fbc512ee03566672751c07f71e1323/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d544bc3983fbc512ee03566672751c07f71e1323/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d544bc3983fbc512ee03566672751c07f71e1323", "patch": "@@ -1,3 +1,8 @@\n+2002-03-31  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* rtl.h (RTL_CHECK1, RTL_CHECK2, RTL_CHECKC1, RTL_CHECKC2,\n+\tRTVEC_ELT): Const-ify.\n+\n 2002-04-01  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* diagnostic.c: Include langhooks-def.h."}, {"sha": "d795a4a64b9fb8e53c77c0fbab927ce718a3c84c", "filename": "gcc/rtl.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d544bc3983fbc512ee03566672751c07f71e1323/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d544bc3983fbc512ee03566672751c07f71e1323/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=d544bc3983fbc512ee03566672751c07f71e1323", "patch": "@@ -264,8 +264,8 @@ struct rtvec_def {\n /* The bit with a star outside the statement expr and an & inside is\n    so that N can be evaluated only once.  */\n #define RTL_CHECK1(RTX, N, C1) __extension__\t\t\t\t\\\n-(*({ rtx _rtx = (RTX); int _n = (N);\t\t\t\t\t\\\n-     enum rtx_code _code = GET_CODE (_rtx);\t\t\t\t\\\n+(*({ rtx const _rtx = (RTX); const int _n = (N);\t\t\t\\\n+     const enum rtx_code _code = GET_CODE (_rtx);\t\t\t\\\n      if (_n < 0 || _n >= GET_RTX_LENGTH (_code))\t\t\t\\\n        rtl_check_failed_bounds (_rtx, _n, __FILE__, __LINE__,\t\t\\\n \t\t\t\t__FUNCTION__);\t\t\t\t\\\n@@ -275,8 +275,8 @@ struct rtvec_def {\n      &_rtx->fld[_n]; }))\n \n #define RTL_CHECK2(RTX, N, C1, C2) __extension__\t\t\t\\\n-(*({ rtx _rtx = (RTX); int _n = (N);\t\t\t\t\t\\\n-     enum rtx_code _code = GET_CODE (_rtx);\t\t\t\t\\\n+(*({ rtx const _rtx = (RTX); const int _n = (N);\t\t\t\\\n+     const enum rtx_code _code = GET_CODE (_rtx);\t\t\t\\\n      if (_n < 0 || _n >= GET_RTX_LENGTH (_code))\t\t\t\\\n        rtl_check_failed_bounds (_rtx, _n, __FILE__, __LINE__,\t\t\\\n \t\t\t\t__FUNCTION__);\t\t\t\t\\\n@@ -287,22 +287,22 @@ struct rtvec_def {\n      &_rtx->fld[_n]; }))\n \n #define RTL_CHECKC1(RTX, N, C) __extension__\t\t\t\t\\\n-(*({ rtx _rtx = (RTX); int _n = (N);\t\t\t\t\t\\\n+(*({ rtx const _rtx = (RTX); const int _n = (N);\t\t\t\\\n      if (GET_CODE (_rtx) != (C))\t\t\t\t\t\\\n        rtl_check_failed_code1 (_rtx, (C), __FILE__, __LINE__,\t\t\\\n \t\t\t       __FUNCTION__);\t\t\t\t\\\n      &_rtx->fld[_n]; }))\n \n #define RTL_CHECKC2(RTX, N, C1, C2) __extension__\t\t\t\\\n-(*({ rtx _rtx = (RTX); int _n = (N);\t\t\t\t\t\\\n-     enum rtx_code _code = GET_CODE (_rtx);\t\t\t\t\\\n+(*({ rtx const _rtx = (RTX); const int _n = (N);\t\t\t\\\n+     const enum rtx_code _code = GET_CODE (_rtx);\t\t\t\\\n      if (_code != (C1) && _code != (C2))\t\t\t\t\\\n        rtl_check_failed_code2 (_rtx, (C1), (C2), __FILE__, __LINE__,\t\\\n \t\t\t       __FUNCTION__); \\\n      &_rtx->fld[_n]; }))\n \n #define RTVEC_ELT(RTVEC, I) __extension__\t\t\t\t\\\n-(*({ rtvec _rtvec = (RTVEC); int _i = (I);\t\t\t\t\\\n+(*({ rtvec const _rtvec = (RTVEC); const int _i = (I);\t\t\t\\\n      if (_i < 0 || _i >= GET_NUM_ELEM (_rtvec))\t\t\t\t\\\n        rtvec_check_failed_bounds (_rtvec, _i, __FILE__, __LINE__,\t\\\n \t\t\t\t  __FUNCTION__);\t\t\t\\"}]}