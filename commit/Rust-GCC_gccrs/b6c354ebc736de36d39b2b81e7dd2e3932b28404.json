{"sha": "b6c354ebc736de36d39b2b81e7dd2e3932b28404", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZjMzU0ZWJjNzM2ZGUzNmQzOWIyYjgxZTdkZDJlMzkzMmIyODQwNA==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2017-07-17T11:04:37Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2017-07-17T11:04:37Z"}, "message": "[ARC] Consolidate PIC implementation.\n\nThis patch refactors a number of functions and compiler hooks into using a\nsingle function which checks if a rtx is suited for pic or not. Removed\nfunctions are arc_legitimate_pc_offset_p and arc_legitimate_pic_operand_p\nbeeing replaced by calls to arc_legitimate_pic_addr_p. Thus we have an\nunitary way of checking a rtx beeing pic.\n\ngcc/\n2017-07-17  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* config/arc/arc-protos.h (arc_legitimate_pc_offset_p): Remove\n\tproto.\n\t(arc_legitimate_pic_operand_p): Likewise.\n\t* config/arc/arc.c (arc_legitimate_pic_operand_p): Remove\n\tfunction.\n\t(arc_needs_pcl_p): Likewise.\n\t(arc_legitimate_pc_offset_p): Likewise.\n\t(arc_legitimate_pic_addr_p): Remove LABEL_REF case, as this\n\tfunction is also used in constrains.md.\n\t(arc_legitimate_constant_p): Use arc_legitimate_pic_addr_p to\n\tvalidate pic constants. Handle CONST_INT, CONST_DOUBLE, MINUS and\n\tPLUS.  Only return true/false in known cases, otherwise assert.\n\t(arc_legitimate_address_p): Remove arc_legitimate_pic_addr_p as it\n\tis already called in arc_legitimate_constant_p.\n\t* config/arc/arc.h (CONSTANT_ADDRESS_P): Consider also LABEL for\n\tpic addresses.\n\t(LEGITIMATE_PIC_OPERAND_P): Use\n\tarc_raw_symbolic_reference_mentioned_p function.\n\t* config/arc/constraints.md (Cpc): Use arc_legitimate_pic_addr_p\n\tfunction.\n\t(Cal): Likewise.\n\t(C32): Likewise.\n\ngcc/testsuite\n2017-07-17  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* gcc.target/arc/pr9000674901.c: New file.\n\t* gcc.target/arc/pic-1.c: Likewise.\n\t* gcc.target/arc/pr9001191897.c: Likewise.\n\nFrom-SVN: r250267", "tree": {"sha": "fff7e1a5f8954a5422284ff2bd280e617fb9fcfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fff7e1a5f8954a5422284ff2bd280e617fb9fcfc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6c354ebc736de36d39b2b81e7dd2e3932b28404", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6c354ebc736de36d39b2b81e7dd2e3932b28404", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6c354ebc736de36d39b2b81e7dd2e3932b28404", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6c354ebc736de36d39b2b81e7dd2e3932b28404/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1825c61e15cf34364792180ca017c998cab3fe34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1825c61e15cf34364792180ca017c998cab3fe34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1825c61e15cf34364792180ca017c998cab3fe34"}], "stats": {"total": 279, "additions": 167, "deletions": 112}, "files": [{"sha": "95c64c6e6387653d352a9940fd50da9fedbcbd13", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c354ebc736de36d39b2b81e7dd2e3932b28404/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c354ebc736de36d39b2b81e7dd2e3932b28404/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b6c354ebc736de36d39b2b81e7dd2e3932b28404", "patch": "@@ -1,3 +1,28 @@\n+2017-07-17  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc-protos.h (arc_legitimate_pc_offset_p): Remove\n+\tproto.\n+\t(arc_legitimate_pic_operand_p): Likewise.\n+\t* config/arc/arc.c (arc_legitimate_pic_operand_p): Remove\n+\tfunction.\n+\t(arc_needs_pcl_p): Likewise.\n+\t(arc_legitimate_pc_offset_p): Likewise.\n+\t(arc_legitimate_pic_addr_p): Remove LABEL_REF case, as this\n+\tfunction is also used in constrains.md.\n+\t(arc_legitimate_constant_p): Use arc_legitimate_pic_addr_p to\n+\tvalidate pic constants. Handle CONST_INT, CONST_DOUBLE, MINUS and\n+\tPLUS.  Only return true/false in known cases, otherwise assert.\n+\t(arc_legitimate_address_p): Remove arc_legitimate_pic_addr_p as it\n+\tis already called in arc_legitimate_constant_p.\n+\t* config/arc/arc.h (CONSTANT_ADDRESS_P): Consider also LABEL for\n+\tpic addresses.\n+\t(LEGITIMATE_PIC_OPERAND_P): Use\n+\tarc_raw_symbolic_reference_mentioned_p function.\n+\t* config/arc/constraints.md (Cpc): Use arc_legitimate_pic_addr_p\n+\tfunction.\n+\t(Cal): Likewise.\n+\t(C32): Likewise.\n+\n 2017-07-17  Claudiu Zissulescu  <claziss@synopsys.com>\n \tAndrew Burgess  <andrew.burgess@embecosm.com>\n "}, {"sha": "8a9af46486ece9dfe59cef42a89a41850170231e", "filename": "gcc/config/arc/arc-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c354ebc736de36d39b2b81e7dd2e3932b28404/gcc%2Fconfig%2Farc%2Farc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c354ebc736de36d39b2b81e7dd2e3932b28404/gcc%2Fconfig%2Farc%2Farc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-protos.h?ref=b6c354ebc736de36d39b2b81e7dd2e3932b28404", "patch": "@@ -61,10 +61,8 @@ extern rtx arc_return_addr_rtx (int , rtx);\n extern bool check_if_valid_regno_const (rtx *, int);\n extern bool check_if_valid_sleep_operand (rtx *, int);\n extern bool arc_legitimate_constant_p (machine_mode, rtx);\n-extern bool arc_legitimate_pc_offset_p (rtx);\n extern bool arc_legitimate_pic_addr_p (rtx);\n extern bool arc_raw_symbolic_reference_mentioned_p (rtx, bool);\n-extern bool arc_legitimate_pic_operand_p (rtx);\n extern bool arc_is_longcall_p (rtx);\n extern bool arc_is_shortcall_p (rtx);\n extern bool valid_brcc_with_delay_p (rtx *);"}, {"sha": "be5f1bd200378d3abd936944463f98b23232555f", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 48, "deletions": 102, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c354ebc736de36d39b2b81e7dd2e3932b28404/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c354ebc736de36d39b2b81e7dd2e3932b28404/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=b6c354ebc736de36d39b2b81e7dd2e3932b28404", "patch": "@@ -249,7 +249,6 @@ static rtx arc_expand_builtin (tree, rtx, rtx, machine_mode, int);\n static int branch_dest (rtx);\n \n static void  arc_output_pic_addr_const (FILE *,  rtx, int);\n-bool arc_legitimate_pic_operand_p (rtx);\n static bool arc_function_ok_for_sibcall (tree, tree);\n static rtx arc_function_value (const_tree, const_tree, bool);\n const char * output_shift (rtx *);\n@@ -5055,66 +5054,13 @@ arc_rtx_costs (rtx x, machine_mode mode, int outer_code,\n     }\n }\n \n-/* Helper used by arc_legitimate_pc_offset_p.  */\n-\n-static bool\n-arc_needs_pcl_p (rtx x)\n-{\n-  register const char *fmt;\n-  register int i, j;\n-\n-  if ((GET_CODE (x) == UNSPEC)\n-      && (XVECLEN (x, 0) == 1)\n-      && (GET_CODE (XVECEXP (x, 0, 0)) == SYMBOL_REF))\n-    switch (XINT (x, 1))\n-      {\n-      case ARC_UNSPEC_GOT:\n-      case ARC_UNSPEC_GOTOFFPC:\n-      case UNSPEC_TLS_GD:\n-      case UNSPEC_TLS_IE:\n-\treturn true;\n-      default:\n-\tbreak;\n-      }\n-\n-  fmt = GET_RTX_FORMAT (GET_CODE (x));\n-  for (i = GET_RTX_LENGTH (GET_CODE (x)) - 1; i >= 0; i--)\n-    {\n-      if (fmt[i] == 'e')\n-\t{\n-\t  if (arc_needs_pcl_p (XEXP (x, i)))\n-\t    return true;\n-\t}\n-      else if (fmt[i] == 'E')\n-\tfor (j = XVECLEN (x, i) - 1; j >= 0; j--)\n-\t  if (arc_needs_pcl_p (XVECEXP (x, i, j)))\n-\t    return true;\n-    }\n-\n-  return false;\n-}\n-\n-/* Return true if ADDR is an address that needs to be expressed as an\n-   explicit sum of pcl + offset.  */\n-\n-bool\n-arc_legitimate_pc_offset_p (rtx addr)\n-{\n-  if (GET_CODE (addr) != CONST)\n-    return false;\n-\n-  return arc_needs_pcl_p (addr);\n-}\n-\n /* Return true if ADDR is a valid pic address.\n    A valid pic address on arc should look like\n    const (unspec (SYMBOL_REF/LABEL) (ARC_UNSPEC_GOTOFF/ARC_UNSPEC_GOT))  */\n \n bool\n arc_legitimate_pic_addr_p (rtx addr)\n {\n-  if (GET_CODE (addr) == LABEL_REF)\n-    return true;\n   if (GET_CODE (addr) != CONST)\n     return false;\n \n@@ -5818,16 +5764,6 @@ arc_return_addr_rtx (int count, ATTRIBUTE_UNUSED rtx frame)\n   return get_hard_reg_initial_val (Pmode , RETURN_ADDR_REGNUM);\n }\n \n-/* Nonzero if the constant value X is a legitimate general operand\n-   when generating PIC code.  It is given that flag_pic is on and\n-   that X satisfies CONSTANT_P or is a CONST_DOUBLE.  */\n-\n-bool\n-arc_legitimate_pic_operand_p (rtx x)\n-{\n-  return !arc_raw_symbolic_reference_mentioned_p (x, true);\n-}\n-\n /* Determine if a given RTX is a valid constant.  We already know this\n    satisfies CONSTANT_P.  */\n \n@@ -5843,40 +5779,12 @@ arc_legitimate_constant_p (machine_mode mode, rtx x)\n   switch (GET_CODE (x))\n     {\n     case CONST:\n-      x = XEXP (x, 0);\n-\n-      if (GET_CODE (x) == PLUS)\n+      if (flag_pic)\n \t{\n-\t  if (flag_pic\n-\t      ? GET_CODE (XEXP (x, 1)) != CONST_INT\n-\t      : !arc_legitimate_constant_p (mode, XEXP (x, 1)))\n-\t    return false;\n-\t  x = XEXP (x, 0);\n-\t}\n-\n-      /* Only some unspecs are valid as \"constants\".  */\n-      if (GET_CODE (x) == UNSPEC)\n-\tswitch (XINT (x, 1))\n-\t  {\n-\t  case ARC_UNSPEC_PLT:\n-\t  case ARC_UNSPEC_GOTOFF:\n-\t  case ARC_UNSPEC_GOTOFFPC:\n-\t  case ARC_UNSPEC_GOT:\n-\t  case UNSPEC_TLS_GD:\n-\t  case UNSPEC_TLS_IE:\n-\t  case UNSPEC_TLS_OFF:\n+\t  if (arc_legitimate_pic_addr_p (x))\n \t    return true;\n-\n-\t  default:\n-\t    gcc_unreachable ();\n-\t  }\n-\n-      /* We must have drilled down to a symbol.  */\n-      if (arc_raw_symbolic_reference_mentioned_p (x, false))\n-\treturn false;\n-\n-      /* Return true.  */\n-      break;\n+\t}\n+      return arc_legitimate_constant_p (mode, XEXP (x, 0));\n \n     case SYMBOL_REF:\n       if (SYMBOL_REF_TLS_MODEL (x))\n@@ -5886,13 +5794,53 @@ arc_legitimate_constant_p (machine_mode mode, rtx x)\n       if (flag_pic)\n \treturn false;\n       /* Fall through.  */\n+    case CONST_INT:\n+    case CONST_DOUBLE:\n+      return true;\n+\n+    case NEG:\n+      return arc_legitimate_constant_p (mode, XEXP (x, 0));\n+\n+    case PLUS:\n+    case MINUS:\n+      {\n+\tbool t1 = arc_legitimate_constant_p (mode, XEXP (x, 0));\n+\tbool t2 = arc_legitimate_constant_p (mode, XEXP (x, 1));\n+\n+\treturn (t1 && t2);\n+      }\n+\n+    case CONST_VECTOR:\n+      switch (mode)\n+\t{\n+\tcase V2HImode:\n+\t  return TARGET_PLUS_DMPY;\n+\tcase V2SImode:\n+\tcase V4HImode:\n+\t  return TARGET_PLUS_QMACW;\n+\tdefault:\n+\t  return false;\n+\t}\n+\n+    case UNSPEC:\n+      switch (XINT (x, 1))\n+\t{\n+\tcase UNSPEC_TLS_GD:\n+\tcase UNSPEC_TLS_OFF:\n+\tcase UNSPEC_TLS_IE:\n+\t  return true;\n+\tdefault:\n+\t  /* Any other unspec ending here are pic related, hence the above\n+\t     constant pic address checking returned false.  */\n+\t  return false;\n+\t}\n+      /* Fall through.  */\n \n     default:\n-      break;\n+      fatal_insn (\"unrecognized supposed constant\", x);\n     }\n \n-  /* Otherwise we handle everything else in the move patterns.  */\n-  return true;\n+  gcc_unreachable ();\n }\n \n static bool\n@@ -5929,9 +5877,7 @@ arc_legitimate_address_p (machine_mode mode, rtx x, bool strict)\n \n   if ((GET_MODE_SIZE (mode) != 16) && CONSTANT_P (x))\n     {\n-      if (flag_pic ? arc_legitimate_pic_addr_p (x)\n-\t  : arc_legitimate_constant_p (Pmode, x))\n-\treturn true;\n+      return arc_legitimate_constant_p (mode, x);\n     }\n   if ((GET_CODE (x) == PRE_DEC || GET_CODE (x) == PRE_INC\n        || GET_CODE (x) == POST_DEC || GET_CODE (x) == POST_INC)"}, {"sha": "9216f9417e092ede3eb8e9f3e7215496f91cb00c", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c354ebc736de36d39b2b81e7dd2e3932b28404/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c354ebc736de36d39b2b81e7dd2e3932b28404/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=b6c354ebc736de36d39b2b81e7dd2e3932b28404", "patch": "@@ -901,10 +901,10 @@ extern int arc_initial_elimination_offset(int from, int to);\n    a special predicate for the memory operand of stores, like for the SH.  */\n \n /* Recognize any constant value that is a valid address.  */\n-#define CONSTANT_ADDRESS_P(X) \\\n-(flag_pic?arc_legitimate_pic_addr_p (X): \\\n-(GET_CODE (X) == LABEL_REF || GET_CODE (X) == SYMBOL_REF\t\\\n- || GET_CODE (X) == CONST_INT || GET_CODE (X) == CONST))\n+#define CONSTANT_ADDRESS_P(X)\t\t\t\t\t\\\n+  (flag_pic ? (arc_legitimate_pic_addr_p (X) || LABEL_P (X)):\t\\\n+   (GET_CODE (X) == LABEL_REF || GET_CODE (X) == SYMBOL_REF\t\\\n+    || GET_CODE (X) == CONST_INT || GET_CODE (X) == CONST))\n \n /* Is the argument a const_int rtx, containing an exact power of 2 */\n #define  IS_POWEROF2_P(X) (! ( (X) & ((X) - 1)) && (X))\n@@ -1083,7 +1083,8 @@ arc_select_cc_mode (OP, X, Y)\n    check it either.  You need not define this macro if all constants\n    (including SYMBOL_REF) can be immediate operands when generating\n    position independent code.  */\n-#define LEGITIMATE_PIC_OPERAND_P(X)  (arc_legitimate_pic_operand_p(X))\n+#define LEGITIMATE_PIC_OPERAND_P(X)  \\\n+  (!arc_raw_symbolic_reference_mentioned_p ((X), true))\n \n /* PIC and small data don't mix on ARC because they use the same register.  */\n #define SDATA_BASE_REGNUM 26"}, {"sha": "6620daf18e398379ad4a9c95e6c9275c184746fe", "filename": "gcc/config/arc/constraints.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c354ebc736de36d39b2b81e7dd2e3932b28404/gcc%2Fconfig%2Farc%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c354ebc736de36d39b2b81e7dd2e3932b28404/gcc%2Fconfig%2Farc%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Fconstraints.md?ref=b6c354ebc736de36d39b2b81e7dd2e3932b28404", "patch": "@@ -403,7 +403,7 @@\n \n (define_constraint \"Cpc\"\n   \"pc-relative constant\"\n-  (match_test \"arc_legitimate_pc_offset_p (op)\"))\n+  (match_test \"arc_legitimate_pic_addr_p (op)\"))\n \n (define_constraint \"Clb\"\n   \"label\"\n@@ -412,12 +412,12 @@\n \n (define_constraint \"Cal\"\n   \"constant for arithmetic/logical operations\"\n-  (match_test \"immediate_operand (op, VOIDmode) && !arc_legitimate_pc_offset_p (op)\"))\n+  (match_test \"immediate_operand (op, VOIDmode) && !arc_legitimate_pic_addr_p (op)\"))\n \n (define_constraint \"C32\"\n   \"32 bit constant for arithmetic/logical operations\"\n   (match_test \"immediate_operand (op, VOIDmode)\n-\t       && !arc_legitimate_pc_offset_p (op)\n+\t       && !arc_legitimate_pic_addr_p (op)\n \t       && !satisfies_constraint_I (op)\"))\n \n ; Note that the 'cryptic' register constraints will not make reload use the"}, {"sha": "68c718ed5c299e996ff16aa9cda140e750d5433b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c354ebc736de36d39b2b81e7dd2e3932b28404/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c354ebc736de36d39b2b81e7dd2e3932b28404/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b6c354ebc736de36d39b2b81e7dd2e3932b28404", "patch": "@@ -1,3 +1,9 @@\n+2017-07-17  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* gcc.target/arc/pr9000674901.c: New file.\n+\t* gcc.target/arc/pic-1.c: Likewise.\n+\t* gcc.target/arc/pr9001191897.c: Likewise.\n+\n 2017-07-17  Claudiu Zissulescu  <claziss@synopsys.com>\n \t    Andrew Burgess  <andrew.burgess@embecosm.com>\n "}, {"sha": "ab24763b67fd9443ac1cc13ac6d4ea613e75263a", "filename": "gcc/testsuite/gcc.target/arc/pic-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c354ebc736de36d39b2b81e7dd2e3932b28404/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fpic-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c354ebc736de36d39b2b81e7dd2e3932b28404/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fpic-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fpic-1.c?ref=b6c354ebc736de36d39b2b81e7dd2e3932b28404", "patch": "@@ -0,0 +1,11 @@\n+/* Tests how complex pic constant expressions are handled.  */\n+/* { dg-do assemble } */\n+/* { dg-skip-if \"PIC not available for ARC6xx\" { arc6xx } } */\n+/* { dg-options \"-mno-sdata -w -Os -fpic\" } */\n+\n+a() {\n+  char *b = \"\";\n+  char c;\n+  int d = &c - \" \\n\\t\\v\\b\\r\\f\\a/\\0\";\n+  e(b[d]);\n+}"}, {"sha": "2a15c1c1478e799f8358c315f47646982dd833c9", "filename": "gcc/testsuite/gcc.target/arc/pr9000674901.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c354ebc736de36d39b2b81e7dd2e3932b28404/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fpr9000674901.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c354ebc736de36d39b2b81e7dd2e3932b28404/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fpr9000674901.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fpr9000674901.c?ref=b6c354ebc736de36d39b2b81e7dd2e3932b28404", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { ! { clmcpu } } } */\n+/* { dg-options \"-mcpu=arc700 -O2 -fpic\" } */\n+\n+/* Test if the compiler generates a constant address having that uses\n+   a neg keyword on the pic unspec.  */\n+\n+typedef unsigned int uint32_t;\n+typedef unsigned char uint8_t;\n+typedef unsigned short int uint16_t;\n+typedef unsigned long long int uint64_t;\n+\n+enum type {\n+ t_undef = 0x01,\n+ t_group = 0x02,\n+ t_partition = 0x04,\n+ t_spare = 0x08,\n+ t_linear = 0x10,\n+ t_raid0 = 0x20,\n+ t_raid1 = 0x40,\n+ t_raid4 = 0x80,\n+ t_raid5_ls = 0x100,\n+ t_raid5_rs = 0x200,\n+ t_raid5_la = 0x400,\n+ t_raid5_ra = 0x800,\n+ t_raid6 = 0x1000,\n+};\n+\n+struct raid_set {\n+  enum type type;\n+};\n+\n+void\n+_find_factors (struct raid_set *rs, uint8_t * div, uint8_t * sub)\n+{\n+  struct factors {\n+    const uint8_t level;\n+    const uint8_t div, sub;\n+  };\n+  static struct factors factors[] = {\n+    {0, 1, 0},\n+    {1, 2, 0},\n+    {2, 2, 0},\n+    {5, 1, 1},\n+  };\n+  struct factors *f = (factors + (sizeof (factors) / sizeof (*factors)));\n+\n+  while (f-- > factors) {\n+    if (rs->type == f->level) {\n+      *div = f->div;\n+      *sub = f->sub;\n+      return;\n+    }\n+  }\n+\n+  *div = 1;\n+  *sub = 0;\n+}"}, {"sha": "fc3642629d339a1791afd61df68ed3cd8ce37f58", "filename": "gcc/testsuite/gcc.target/arc/pr9001191897.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c354ebc736de36d39b2b81e7dd2e3932b28404/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fpr9001191897.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c354ebc736de36d39b2b81e7dd2e3932b28404/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fpr9001191897.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fpr9001191897.c?ref=b6c354ebc736de36d39b2b81e7dd2e3932b28404", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { ! { clmcpu } } } */\n+/* { dg-options \"-mcpu=archs -Os -fpic -mno-sdata -mno-indexed-loads -w\" } */\n+a;\n+c() {\n+  static char b[25];\n+  for (; a >= 0; a--)\n+    if (b[a])\n+      b[a] = '\\0';\n+}"}]}