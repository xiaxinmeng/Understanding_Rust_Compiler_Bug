{"sha": "54dfd46bffb35c49935053bd9bc2997f77e26902", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRkZmQ0NmJmZmIzNWM0OTkzNTA1M2JkOWJjMjk5N2Y3N2UyNjkwMg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2008-07-29T17:10:55Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2008-07-29T17:10:55Z"}, "message": "c-decl.c (merge_decls): Do not handle DECL_INLINE.\n\n\n\t* c-decl.c (merge_decls): Do not handle DECL_INLINE.\n\t(grokdeclarator): Likewise.\n\t* langhooks.c (lhd_warn_unused_global_decl): Use\n\tDECL_DECLARED_INLINE_P.\n\t* print-tree.c (print_node): Remove DECL_INLINE check.\n\nFrom-SVN: r138258", "tree": {"sha": "ec580272d62cb4f74dab5323db176f00f81fd545", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec580272d62cb4f74dab5323db176f00f81fd545"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54dfd46bffb35c49935053bd9bc2997f77e26902", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54dfd46bffb35c49935053bd9bc2997f77e26902", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54dfd46bffb35c49935053bd9bc2997f77e26902", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54dfd46bffb35c49935053bd9bc2997f77e26902/comments", "author": null, "committer": null, "parents": [{"sha": "ce94d3547f81cc3dd105f4a3377e72cdbd2bbd2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce94d3547f81cc3dd105f4a3377e72cdbd2bbd2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce94d3547f81cc3dd105f4a3377e72cdbd2bbd2c"}], "stats": {"total": 49, "additions": 16, "deletions": 33}, "files": [{"sha": "406234289ea5460ebb3f4ad6837dcef08c11dde7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54dfd46bffb35c49935053bd9bc2997f77e26902/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54dfd46bffb35c49935053bd9bc2997f77e26902/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=54dfd46bffb35c49935053bd9bc2997f77e26902", "patch": "@@ -1,3 +1,11 @@\n+2008-07-29  Jan Hubicka  <jh@suse.cz>\n+\n+\t* c-decl.c (merge_decls): Do not handle DECL_INLINE.\n+\t(grokdeclarator): Likewise.\n+\t* langhooks.c (lhd_warn_unused_global_decl): Use\n+\tDECL_DECLARED_INLINE_P.\n+\t* print-tree.c (print_node): Remove DECL_INLINE check.\n+\n 2008-07-29  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/36945"}, {"sha": "ff23f6e4186a4fd4ab33edfdb4bcd91d7e614c4a", "filename": "gcc/c-decl.c", "status": "modified", "additions": 6, "deletions": 30, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54dfd46bffb35c49935053bd9bc2997f77e26902/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54dfd46bffb35c49935053bd9bc2997f77e26902/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=54dfd46bffb35c49935053bd9bc2997f77e26902", "patch": "@@ -1786,7 +1786,6 @@ merge_decls (tree newdecl, tree olddecl, tree newtype, tree oldtype)\n \t    (*debug_hooks->outlining_inline_function) (olddecl);\n \n \t  /* The new defn must not be inline.  */\n-\t  DECL_INLINE (newdecl) = 0;\n \t  DECL_UNINLINABLE (newdecl) = 1;\n \t}\n       else\n@@ -1841,22 +1840,10 @@ merge_decls (tree newdecl, tree olddecl, tree newtype, tree oldtype)\n \t  gimple_set_body (newdecl, gimple_body (olddecl));\n \t  DECL_ARGUMENTS (newdecl) = DECL_ARGUMENTS (olddecl);\n \n-\t  /* Set DECL_INLINE on the declaration if we've got a body\n-\t     from which to instantiate.  */\n-\t  if (DECL_INLINE (olddecl) && !DECL_UNINLINABLE (newdecl))\n-\t    {\n-\t      DECL_INLINE (newdecl) = 1;\n-\t      DECL_ABSTRACT_ORIGIN (newdecl)\n-\t\t= DECL_ABSTRACT_ORIGIN (olddecl);\n-\t    }\n-\t}\n-      else\n-\t{\n-\t  /* If a previous declaration said inline, mark the\n-\t     definition as inlinable.  */\n-\t  if (DECL_DECLARED_INLINE_P (newdecl)\n-\t      && !DECL_UNINLINABLE (newdecl))\n-\t    DECL_INLINE (newdecl) = 1;\n+\t  /* See if we've got a function to instantiate from.  */\n+\t  if (DECL_SAVED_TREE (olddecl))\n+\t    DECL_ABSTRACT_ORIGIN (newdecl)\n+\t      = DECL_ABSTRACT_ORIGIN (olddecl);\n \t}\n     }\n \n@@ -4851,19 +4838,8 @@ grokdeclarator (const struct c_declarator *declarator,\n \t      pedwarn (0, \"cannot inline function %<main%>\");\n \t  }\n \telse if (declspecs->inline_p)\n-\t  {\n-\t    /* Record that the function is declared `inline'.  */\n-\t    DECL_DECLARED_INLINE_P (decl) = 1;\n-\n-\t    /* Do not mark bare declarations as DECL_INLINE.  Doing so\n-\t       in the presence of multiple declarations can result in\n-\t       the abstract origin pointing between the declarations,\n-\t       which will confuse dwarf2out.  */\n-\t    if (initialized)\n-\t      DECL_INLINE (decl) = 1;\n-\t  }\n-\telse if (initialized)\n-\t  DECL_INLINE (decl) = 1;\n+\t  /* Record that the function is declared `inline'.  */\n+\t  DECL_DECLARED_INLINE_P (decl) = 1;\n       }\n     else\n       {"}, {"sha": "30e5bfa9f61acd82d59baee4cb8466a9ec369485", "filename": "gcc/langhooks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54dfd46bffb35c49935053bd9bc2997f77e26902/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54dfd46bffb35c49935053bd9bc2997f77e26902/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=54dfd46bffb35c49935053bd9bc2997f77e26902", "patch": "@@ -133,7 +133,7 @@ lhd_warn_unused_global_decl (const_tree decl)\n   /* This is what used to exist in check_global_declarations.  Probably\n      not many of these actually apply to non-C languages.  */\n \n-  if (TREE_CODE (decl) == FUNCTION_DECL && DECL_INLINE (decl))\n+  if (TREE_CODE (decl) == FUNCTION_DECL && DECL_DECLARED_INLINE_P (decl))\n     return false;\n   if (TREE_CODE (decl) == VAR_DECL && TREE_READONLY (decl))\n     return false;"}, {"sha": "b76a180fbdb17a5e57ee0661d6c282432cf5910c", "filename": "gcc/print-tree.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54dfd46bffb35c49935053bd9bc2997f77e26902/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54dfd46bffb35c49935053bd9bc2997f77e26902/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=54dfd46bffb35c49935053bd9bc2997f77e26902", "patch": "@@ -461,8 +461,7 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \t  print_node (file, \"size\", DECL_SIZE (node), indent + 4);\n \t  print_node (file, \"unit size\", DECL_SIZE_UNIT (node), indent + 4);\n \t  \n-\t  if (TREE_CODE (node) != FUNCTION_DECL\n-\t      || DECL_INLINE (node) || DECL_BUILT_IN (node))\n+\t  if (TREE_CODE (node) != FUNCTION_DECL || DECL_BUILT_IN (node))\n \t    indent_to (file, indent + 3);\n \t  \n \t  if (DECL_USER_ALIGN (node))"}]}