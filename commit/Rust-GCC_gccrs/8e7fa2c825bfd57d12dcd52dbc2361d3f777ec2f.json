{"sha": "8e7fa2c825bfd57d12dcd52dbc2361d3f777ec2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU3ZmEyYzgyNWJmZDU3ZDEyZGNkNTJkYmMyMzYxZDNmNzc3ZWMyZg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-03-16T01:14:47Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-03-16T01:14:47Z"}, "message": "dwarf2asm.c (dw2_asm_output_offset): Use ASM_OUTPUT_DWARF_OFFSET if provided by the target.\n\n        * dwarf2asm.c (dw2_asm_output_offset): Use ASM_OUTPUT_DWARF_OFFSET\n        if provided by the target.\n        (dw2_asm_output_pcrel): Likewise with ASM_OUTPUT_DWARF_PCREL.\n        (dw2_asm_output_addr): New.\n        * dwarf2asm.h (dw2_asm_output_addr): Declare.\n        * dwarf2out.c (output_cfi): Use it for program addresses.\n        (output_call_frame_info, output_die): Likewise.\n        (output_aranges, output_line_info): Likewise.\n\nFrom-SVN: r40524", "tree": {"sha": "683b0a77ec6ee6a85377d17c7a5e1ca1b24cede2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/683b0a77ec6ee6a85377d17c7a5e1ca1b24cede2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e7fa2c825bfd57d12dcd52dbc2361d3f777ec2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e7fa2c825bfd57d12dcd52dbc2361d3f777ec2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e7fa2c825bfd57d12dcd52dbc2361d3f777ec2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e7fa2c825bfd57d12dcd52dbc2361d3f777ec2f/comments", "author": null, "committer": null, "parents": [{"sha": "798bdf70eee560a3ca67a44dbb64397ee709b438", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/798bdf70eee560a3ca67a44dbb64397ee709b438", "html_url": "https://github.com/Rust-GCC/gccrs/commit/798bdf70eee560a3ca67a44dbb64397ee709b438"}], "stats": {"total": 116, "additions": 96, "deletions": 20}, "files": [{"sha": "1aa9b707743c7b45f2616dd18f56d1ff9d610a6f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e7fa2c825bfd57d12dcd52dbc2361d3f777ec2f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e7fa2c825bfd57d12dcd52dbc2361d3f777ec2f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8e7fa2c825bfd57d12dcd52dbc2361d3f777ec2f", "patch": "@@ -1,3 +1,14 @@\n+2001-03-15  Richard Henderson  <rth@redhat.com>\n+\n+\t* dwarf2asm.c (dw2_asm_output_offset): Use ASM_OUTPUT_DWARF_OFFSET\n+\tif provided by the target.\n+\t(dw2_asm_output_pcrel): Likewise with ASM_OUTPUT_DWARF_PCREL.\n+\t(dw2_asm_output_addr): New.\n+\t* dwarf2asm.h (dw2_asm_output_addr): Declare.\n+\t* dwarf2out.c (output_cfi): Use it for program addresses.\n+\t(output_call_frame_info, output_die): Likewise.\n+\t(output_aranges, output_line_info): Likewise.\n+\n 2001-03-15  Bruce Korb  <bkorb@gnu.org>\n \n \t* gcc.c(main): make more rigorous"}, {"sha": "464c2b17946c3251d6839681d7fd14ca0e6893bb", "filename": "gcc/dwarf2asm.c", "status": "modified", "additions": 65, "deletions": 4, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e7fa2c825bfd57d12dcd52dbc2361d3f777ec2f/gcc%2Fdwarf2asm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e7fa2c825bfd57d12dcd52dbc2361d3f777ec2f/gcc%2Fdwarf2asm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2asm.c?ref=8e7fa2c825bfd57d12dcd52dbc2361d3f777ec2f", "patch": "@@ -91,6 +91,8 @@ unaligned_integer_asm_op (size)\n }\n #endif /* UNALIGNED_INT_ASM_OP */\n \n+/* Output an immediate constant in a given size.  */\n+\n void\n dw2_asm_output_data VPARAMS ((int size, unsigned HOST_WIDE_INT value,\n \t\t\t      const char *comment, ...))\n@@ -127,6 +129,12 @@ dw2_asm_output_data VPARAMS ((int size, unsigned HOST_WIDE_INT value,\n   va_end (ap);\n }\n \n+/* Output the difference between two symbols in a given size.  */\n+/* ??? There appear to be assemblers that do not like such\n+   subtraction, but do support ASM_SET_OP.  It's unfortunately\n+   impossible to do here, since the ASM_SET_OP for the difference\n+   symbol must appear after both symbols are defined.  */\n+\n void\n dw2_asm_output_delta VPARAMS ((int size, const char *lab1, const char *lab2,\n \t\t\t       const char *comment, ...))\n@@ -169,6 +177,12 @@ dw2_asm_output_delta VPARAMS ((int size, const char *lab1, const char *lab2,\n   va_end (ap);\n }\n \n+/* Output a section-relative reference to a label.  In general this\n+   can only be done for debugging symbols.  E.g. on most targets with\n+   the GNU linker, this is accomplished with a direct reference and\n+   the knowledge that the debugging section will be placed at VMA 0.\n+   Some targets have special relocations for this that we must use.  */\n+\n void\n dw2_asm_output_offset VPARAMS ((int size, const char *label,\n \t\t\t       const char *comment, ...))\n@@ -188,11 +202,15 @@ dw2_asm_output_offset VPARAMS ((int size, const char *label,\n   comment = va_arg (ap, const char *);\n #endif\n \n+#ifdef ASM_OUTPUT_DWARF_OFFSET\n+  ASM_OUTPUT_DWARF_OFFSET (asm_out_file, size, label);\n+#else\n #ifdef UNALIGNED_INT_ASM_OP\n   fputs (unaligned_integer_asm_op (size), asm_out_file);\n   assemble_name (asm_out_file, label);\n #else\n   assemble_integer (gen_rtx_SYMBOL_REF (Pmode, label), size, 1);\n+#endif\n #endif\n \n   if (flag_debug_asm && comment)\n@@ -205,6 +223,9 @@ dw2_asm_output_offset VPARAMS ((int size, const char *label,\n   va_end (ap);\n }\n \n+/* Output a self-relative reference to a label, possibly in a\n+   different section or object file.  */\n+\n void\n dw2_asm_output_pcrel VPARAMS ((int size, const char *label,\n \t\t\t       const char *comment, ...))\n@@ -224,18 +245,56 @@ dw2_asm_output_pcrel VPARAMS ((int size, const char *label,\n   comment = va_arg (ap, const char *);\n #endif\n \n+#ifdef ASM_OUTPUT_DWARF_PCREL\n+  ASM_OUTPUT_DWARF_PCREL (asm_out_file, size, label);\n+#else\n #ifdef UNALIGNED_INT_ASM_OP\n   fputs (unaligned_integer_asm_op (size), asm_out_file);\n-\n-  /* ??? This needs target conditionalization.  E.g. the solaris\n-     assembler uses %r_disp32(label).  Others don't like \".\" and\n-     we need to generate a temporary label here.  */\n   assemble_name (asm_out_file, label);\n   fputc ('-', asm_out_file);\n   fputc ('.', asm_out_file);\n #else\n   abort ();\n #endif\n+#endif\n+\n+  if (flag_debug_asm && comment)\n+    {\n+      fprintf (asm_out_file, \"\\t%s \", ASM_COMMENT_START);\n+      vfprintf (asm_out_file, comment, ap);\n+    }\n+  fputc ('\\n', asm_out_file);\n+\n+  va_end (ap);\n+}\n+\n+/* Output an absolute reference to a label.  */\n+\n+void\n+dw2_asm_output_addr VPARAMS ((int size, const char *label,\n+\t\t\t      const char *comment, ...))\n+{\n+#ifndef ANSI_PROTOTYPES\n+  int size;\n+  const char *label;\n+  const char *comment;\n+#endif\n+  va_list ap;\n+\n+  VA_START (ap, comment);\n+\n+#ifndef ANSI_PROTOTYPES\n+  size = va_arg (ap, int);\n+  label = va_arg (ap, const char *);\n+  comment = va_arg (ap, const char *);\n+#endif\n+\n+#ifdef UNALIGNED_INT_ASM_OP\n+  fputs (unaligned_integer_asm_op (size), asm_out_file);\n+  assemble_name (asm_out_file, label);\n+#else\n+  assemble_integer (gen_rtx_SYMBOL_REF (Pmode, label), size, 1);\n+#endif\n \n   if (flag_debug_asm && comment)\n     {\n@@ -247,6 +306,8 @@ dw2_asm_output_pcrel VPARAMS ((int size, const char *label,\n   va_end (ap);\n }\n \n+/* Similar, but use an RTX expression instead of a text label.  */\n+\n void\n dw2_asm_output_addr_rtx VPARAMS ((int size, rtx addr,\n \t\t\t\t  const char *comment, ...))"}, {"sha": "51b67555cb3e12faf09c90b258b7ddee21e6501f", "filename": "gcc/dwarf2asm.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e7fa2c825bfd57d12dcd52dbc2361d3f777ec2f/gcc%2Fdwarf2asm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e7fa2c825bfd57d12dcd52dbc2361d3f777ec2f/gcc%2Fdwarf2asm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2asm.h?ref=8e7fa2c825bfd57d12dcd52dbc2361d3f777ec2f", "patch": "@@ -40,6 +40,10 @@ extern void dw2_asm_output_pcrel\tPARAMS ((int, const char *,\n \t\t\t\t\t\t const char *, ...))\n      /* ATTRIBUTE_PRINTF_3 */;\n \n+extern void dw2_asm_output_addr\t\tPARAMS ((int, const char *,\n+\t\t\t\t\t\t const char *, ...))\n+     /* ATTRIBUTE_PRINTF_3 */;\n+\n extern void dw2_asm_output_addr_rtx\tPARAMS ((int, rtx,\n \t\t\t\t\t\t const char *, ...))\n      /* ATTRIBUTE_PRINTF_3 */;"}, {"sha": "e4978930ce8d6cf652103f3d732bf64129b64806", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e7fa2c825bfd57d12dcd52dbc2361d3f777ec2f/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e7fa2c825bfd57d12dcd52dbc2361d3f777ec2f/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=8e7fa2c825bfd57d12dcd52dbc2361d3f777ec2f", "patch": "@@ -1546,8 +1546,8 @@ output_cfi (cfi, fde)\n       switch (cfi->dw_cfi_opc)\n \t{\n \tcase DW_CFA_set_loc:\n-\t  dw2_asm_output_offset (DWARF2_ADDR_SIZE, \n-\t\t\t\t   cfi->dw_cfi_oprnd1.dw_cfi_addr, NULL);\n+\t  dw2_asm_output_addr (DWARF2_ADDR_SIZE, \n+\t\t\t       cfi->dw_cfi_oprnd1.dw_cfi_addr, NULL);\n \t  break;\n \tcase DW_CFA_advance_loc1:\n \t  dw2_asm_output_delta (1, cfi->dw_cfi_oprnd1.dw_cfi_addr,\n@@ -1679,8 +1679,8 @@ output_call_frame_info (for_eh)\n          trailing null) so the pointer is 4-byte aligned.  The Solaris ld\n          can't handle unaligned relocs.  */\n       dw2_asm_output_nstring (\"eh\", -1, \"CIE Augmentation\");\n-      dw2_asm_output_offset (DWARF2_ADDR_SIZE, \"__EXCEPTION_TABLE__\",\n-\t\t\t     \"pointer to exception region info\");\n+      dw2_asm_output_addr (DWARF2_ADDR_SIZE, \"__EXCEPTION_TABLE__\",\n+\t\t\t   \"pointer to exception region info\");\n     }\n   else\n     {\n@@ -1743,8 +1743,8 @@ output_call_frame_info (for_eh)\n \t\t\t       stripattributes (FRAME_SECTION),\n \t\t\t       \"FDE CIE offset\");\n \n-      dw2_asm_output_offset (DWARF2_ADDR_SIZE, fde->dw_fde_begin,\n-\t\t\t     \"FDE initial location\");\n+      dw2_asm_output_addr (DWARF2_ADDR_SIZE, fde->dw_fde_begin,\n+\t\t\t   \"FDE initial location\");\n \n       dw2_asm_output_delta (DWARF2_ADDR_SIZE, fde->dw_fde_end,\n \t\t\t    fde->dw_fde_begin, \"FDE address range\");\n@@ -5724,7 +5724,7 @@ output_die (die)\n \t  break;\n \n \tcase dw_val_class_lbl_id:\n-\t  dw2_asm_output_offset (DWARF2_ADDR_SIZE, AT_lbl (a), \"%s\", name);\n+\t  dw2_asm_output_addr (DWARF2_ADDR_SIZE, AT_lbl (a), \"%s\", name);\n \t  break;\n \n \tcase dw_val_class_lbl_offset:\n@@ -5938,7 +5938,7 @@ output_aranges ()\n \tdw2_asm_output_data (2, 0, NULL);\n     }\n \n-  dw2_asm_output_offset (DWARF2_ADDR_SIZE, text_section_label, \"Address\");\n+  dw2_asm_output_addr (DWARF2_ADDR_SIZE, text_section_label, \"Address\");\n   dw2_asm_output_delta (DWARF2_ADDR_SIZE, text_end_label,\n \t\t\ttext_section_label, \"Length\");\n \n@@ -5952,7 +5952,7 @@ output_aranges ()\n \n       if (die->die_tag == DW_TAG_subprogram)\n \t{\n-\t  dw2_asm_output_offset (DWARF2_ADDR_SIZE, get_AT_low_pc (die),\n+\t  dw2_asm_output_addr (DWARF2_ADDR_SIZE, get_AT_low_pc (die),\n \t\t\t\t \"Address\");\n \t  dw2_asm_output_delta (DWARF2_ADDR_SIZE, get_AT_hi_pc (die),\n \t\t\t\tget_AT_low_pc (die), \"Length\");\n@@ -6440,7 +6440,7 @@ output_line_info ()\n \t  dw2_asm_output_data (1, 0, \"DW_LNE_set_address\");\n \t  dw2_asm_output_data_uleb128 (1 + DWARF2_ADDR_SIZE, NULL);\n \t  dw2_asm_output_data (1, DW_LNE_set_address, NULL);\n-\t  dw2_asm_output_offset (DWARF2_ADDR_SIZE, line_label, NULL);\n+\t  dw2_asm_output_addr (DWARF2_ADDR_SIZE, line_label, NULL);\n \t}\n       strcpy (prev_line_label, line_label);\n \n@@ -6451,7 +6451,7 @@ output_line_info ()\n \t  current_file = line_info->dw_file_num;\n \t  dw2_asm_output_data (1, DW_LNS_set_file, \"DW_LNS_set_file\");\n \t  dw2_asm_output_data_uleb128 (current_file, \"(\\\"%s\\\")\",\n-\t\t\t\t       line_file_table.table[current_file]);\n+\t\t\t\t       file_table.table[current_file]);\n \t}\n \n       /* Emit debug info for the current line number, choosing the encoding\n@@ -6498,7 +6498,7 @@ output_line_info ()\n       dw2_asm_output_data (1, 0, \"DW_LNE_set_address\");\n       dw2_asm_output_data_uleb128 (1 + DWARF2_ADDR_SIZE, NULL);\n       dw2_asm_output_data (1, DW_LNE_set_address, NULL);\n-      dw2_asm_output_offset (DWARF2_ADDR_SIZE, text_end_label, NULL);\n+      dw2_asm_output_addr (DWARF2_ADDR_SIZE, text_end_label, NULL);\n     }\n \n   dw2_asm_output_data (1, 0, \"DW_LNE_end_sequence\");\n@@ -6534,7 +6534,7 @@ output_line_info ()\n \t  dw2_asm_output_data (1, 0, \"DW_LNE_set_address\");\n \t  dw2_asm_output_data_uleb128 (1 + DWARF2_ADDR_SIZE, NULL);\n \t  dw2_asm_output_data (1, DW_LNE_set_address, NULL);\n-\t  dw2_asm_output_offset (DWARF2_ADDR_SIZE, line_label, NULL);\n+\t  dw2_asm_output_addr (DWARF2_ADDR_SIZE, line_label, NULL);\n \t}\n       else\n \t{\n@@ -6550,7 +6550,7 @@ output_line_info ()\n \t      dw2_asm_output_data (1, 0, \"DW_LNE_set_address\");\n \t      dw2_asm_output_data_uleb128 (1 + DWARF2_ADDR_SIZE, NULL);\n \t      dw2_asm_output_data (1, DW_LNE_set_address, NULL);\n-\t      dw2_asm_output_offset (DWARF2_ADDR_SIZE, line_label, NULL);\n+\t      dw2_asm_output_addr (DWARF2_ADDR_SIZE, line_label, NULL);\n \t    }\n \t}\n       strcpy (prev_line_label, line_label);\n@@ -6562,7 +6562,7 @@ output_line_info ()\n \t  current_file = line_info->dw_file_num;\n \t  dw2_asm_output_data (1, DW_LNS_set_file, \"DW_LNS_set_file\");\n \t  dw2_asm_output_data_uleb128 (current_file, \"(\\\"%s\\\")\",\n-\t\t\t\t       line_file_table.table[current_file]);\n+\t\t\t\t       file_table.table[current_file]);\n \t}\n \n       /* Emit debug info for the current line number, choosing the encoding\n@@ -6611,7 +6611,7 @@ output_line_info ()\n \t      dw2_asm_output_data (1, 0, \"DW_LNE_set_address\");\n \t      dw2_asm_output_data_uleb128 (1 + DWARF2_ADDR_SIZE, NULL);\n \t      dw2_asm_output_data (1, DW_LNE_set_address, NULL);\n-\t      dw2_asm_output_offset (DWARF2_ADDR_SIZE, line_label, NULL);\n+\t      dw2_asm_output_addr (DWARF2_ADDR_SIZE, line_label, NULL);\n \t    }\n \n \t  /* Output the marker for the end of this sequence.  */"}]}