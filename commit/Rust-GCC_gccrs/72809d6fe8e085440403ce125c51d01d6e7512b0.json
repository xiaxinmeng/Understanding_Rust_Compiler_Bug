{"sha": "72809d6fe8e085440403ce125c51d01d6e7512b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI4MDlkNmZlOGUwODU0NDA0MDNjZTEyNWM1MWQwMWQ2ZTc1MTJiMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-27T09:00:47Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-27T09:00:47Z"}, "message": "c++: Handle COMPOUND_EXPRs in ocp_convert [PR94339]\n\nMy recent change to get_narrower/warnings_for_convert_and_check broke\nthe following testcase, warnings_for_convert_and_check is upset that\nexpr is a COMPOUND_EXPR with INTEGER_CST at the rightmost operand, while\nresult is a COMPOUND_EXPR with a NOP_EXPR of INTEGER_CST at the rightmost\noperand, it expects such conversions to be simplified.\n\nThe easiest fix seems to be to handle COMPOUND_EXPRs in ocp_convert too,\nby converting the rightmost operand and recreating COMPOUND_EXPR(s) if that\nchanged.\n\nThe attr-copy-2.C change is a workaround for PR94346, where we now ICE on\nthe testcase, while previously we'd ICE only if it contained a comma\nexpression at the outer level rather than cast of a COMPOUND_EXPR to\nsomething.  I'll defer that to Martin.\n\n2020-03-27  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/94339\n\t* cvt.c (ocp_convert): Handle COMPOUND_EXPR by recursion on the second\n\toperand and creating a new COMPOUND_EXPR if anything changed.\n\n\t* g++.dg/other/pr94339.C: New test.\n\t* g++.dg/ext/attr-copy-2.C: Comment out failing tests due to PR94346.", "tree": {"sha": "58c817b44e0efb32a29324c34108ce76a61ebdfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58c817b44e0efb32a29324c34108ce76a61ebdfe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72809d6fe8e085440403ce125c51d01d6e7512b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72809d6fe8e085440403ce125c51d01d6e7512b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72809d6fe8e085440403ce125c51d01d6e7512b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72809d6fe8e085440403ce125c51d01d6e7512b0/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06d5d63d9944691bb4286e5f6b2422cc97148336", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06d5d63d9944691bb4286e5f6b2422cc97148336", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06d5d63d9944691bb4286e5f6b2422cc97148336"}], "stats": {"total": 42, "additions": 38, "deletions": 4}, "files": [{"sha": "46208b2d7561b374653681067de1b9343b665d7b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72809d6fe8e085440403ce125c51d01d6e7512b0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72809d6fe8e085440403ce125c51d01d6e7512b0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=72809d6fe8e085440403ce125c51d01d6e7512b0", "patch": "@@ -1,3 +1,9 @@\n+2020-03-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/94339\n+\t* cvt.c (ocp_convert): Handle COMPOUND_EXPR by recursion on the second\n+\toperand and creating a new COMPOUND_EXPR if anything changed.\n+\n 2020-03-26  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/94336 - template keyword accepted before destructor names."}, {"sha": "a3b80968b334882176f7faa55b19e1d8ed711af5", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72809d6fe8e085440403ce125c51d01d6e7512b0/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72809d6fe8e085440403ce125c51d01d6e7512b0/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=72809d6fe8e085440403ce125c51d01d6e7512b0", "patch": "@@ -697,6 +697,17 @@ ocp_convert (tree type, tree expr, int convtype, int flags,\n   if (error_operand_p (e) || type == error_mark_node)\n     return error_mark_node;\n \n+  if (TREE_CODE (e) == COMPOUND_EXPR)\n+    {\n+      e = ocp_convert (type, TREE_OPERAND (e, 1), convtype, flags, complain);\n+      if (e == error_mark_node)\n+\treturn error_mark_node;\n+      if (e == TREE_OPERAND (expr, 1))\n+\treturn expr;\n+      return build2_loc (EXPR_LOCATION (expr), COMPOUND_EXPR, TREE_TYPE (e),\n+\t\t\t TREE_OPERAND (expr, 0), e);\n+    }\n+\n   complete_type (type);\n   complete_type (TREE_TYPE (expr));\n "}, {"sha": "f0b1b5f006b41aa48de097c224188ad399e8155c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72809d6fe8e085440403ce125c51d01d6e7512b0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72809d6fe8e085440403ce125c51d01d6e7512b0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=72809d6fe8e085440403ce125c51d01d6e7512b0", "patch": "@@ -1,3 +1,9 @@\n+2020-03-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/94339\n+\t* g++.dg/other/pr94339.C: New test.\n+\t* g++.dg/ext/attr-copy-2.C: Comment out failing tests due to PR94346.\n+\n 2020-03-27  Roman Zhuykov  <zhroma@ispras.ru>\n \n \t* gcc.c-torture/execute/pr70127-debug-sms.c: New test."}, {"sha": "7c47a1554c489c1f15a8a602f9b5360162a1f06a", "filename": "gcc/testsuite/g++.dg/ext/attr-copy-2.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72809d6fe8e085440403ce125c51d01d6e7512b0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-copy-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72809d6fe8e085440403ce125c51d01d6e7512b0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-copy-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-copy-2.C?ref=72809d6fe8e085440403ce125c51d01d6e7512b0", "patch": "@@ -36,8 +36,8 @@ typedef struct C\n   ATTR (copy (*(struct A *)(0, 1))) long m_xpa_0_1;\n \n   ATTR (copy (((struct A *)0)[0])) short m_arpa_0;\n-  ATTR (copy (((struct A *)(1, 0))[0])) int m_arpa_1_0;\n-  ATTR (copy (((struct A *)(0, 1))[0])) long m_arpa_0_1;\n+//  ATTR (copy (((struct A *)(1, 0))[0])) int m_arpa_1_0;\n+//  ATTR (copy (((struct A *)(0, 1))[0])) long m_arpa_0_1;\n \n   ATTR (copy (a)) short m_a;\n   ATTR (copy (b.a)) int m_b_a;\n@@ -86,8 +86,8 @@ static_assert (__builtin_has_attribute (((C*)0)->m_xpa_0_1, packed));\n static_assert (__builtin_has_attribute (((C*)0)->m_ra, packed));\n \n static_assert (__builtin_has_attribute (((C*)0)->m_arpa_0, packed));\n-static_assert (__builtin_has_attribute (((C*)0)->m_arpa_1_0, packed));\n-static_assert (__builtin_has_attribute (((C*)0)->m_arpa_0_1, packed));\n+//static_assert (__builtin_has_attribute (((C*)0)->m_arpa_1_0, packed));\n+//static_assert (__builtin_has_attribute (((C*)0)->m_arpa_0_1, packed));\n \n static_assert (__builtin_has_attribute (((C*)0)->m_a, packed));\n static_assert (__builtin_has_attribute (((C*)0)->m_b_a, packed));"}, {"sha": "3892d780d9ecb06ea71663321d547ccc574f7f0d", "filename": "gcc/testsuite/g++.dg/other/pr94339.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72809d6fe8e085440403ce125c51d01d6e7512b0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr94339.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72809d6fe8e085440403ce125c51d01d6e7512b0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr94339.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr94339.C?ref=72809d6fe8e085440403ce125c51d01d6e7512b0", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/94339\n+// { dg-do compile }\n+\n+unsigned a;\n+void bar ();\n+\n+unsigned\n+foo (bool x)\n+{\n+  return x ? bar (), -1 : a;\n+}"}]}