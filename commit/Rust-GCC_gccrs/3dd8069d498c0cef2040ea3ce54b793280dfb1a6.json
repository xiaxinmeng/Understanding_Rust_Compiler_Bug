{"sha": "3dd8069d498c0cef2040ea3ce54b793280dfb1a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RkODA2OWQ0OThjMGNlZjIwNDBlYTNjZTU0Yjc5MzI4MGRmYjFhNg==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2004-06-15T10:27:30Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2004-06-15T10:27:30Z"}, "message": "fold-const.c (operand_equal_p): Update comment.\n\n2004-06-15  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* fold-const.c (operand_equal_p): Update comment.\n\nFrom-SVN: r83173", "tree": {"sha": "8346736ba3ab71b9fe4dcf8146e4e01203999424", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8346736ba3ab71b9fe4dcf8146e4e01203999424"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3dd8069d498c0cef2040ea3ce54b793280dfb1a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dd8069d498c0cef2040ea3ce54b793280dfb1a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dd8069d498c0cef2040ea3ce54b793280dfb1a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dd8069d498c0cef2040ea3ce54b793280dfb1a6/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7b14411a870638fb16f4a6052fcd64917ed1505d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b14411a870638fb16f4a6052fcd64917ed1505d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b14411a870638fb16f4a6052fcd64917ed1505d"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "d2c7c64e2542e701c0d118b5c9842bd0656782bd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dd8069d498c0cef2040ea3ce54b793280dfb1a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dd8069d498c0cef2040ea3ce54b793280dfb1a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3dd8069d498c0cef2040ea3ce54b793280dfb1a6", "patch": "@@ -1,3 +1,7 @@\n+2004-06-15  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* fold-const.c (operand_equal_p): Update comment.\n+\n 2004-06-15  Kazuhiro Inaoka  <inaoka.kazuhiro@renesas.com>\n \n \t* config/m32r/m32r.h (RETURN_ADDR_RTX): Define."}, {"sha": "3c5a81d7253dea41d0da1d77d7edc3eb5805ee2b", "filename": "gcc/fold-const.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dd8069d498c0cef2040ea3ce54b793280dfb1a6/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dd8069d498c0cef2040ea3ce54b793280dfb1a6/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=3dd8069d498c0cef2040ea3ce54b793280dfb1a6", "patch": "@@ -2337,10 +2337,10 @@ truth_value_p (enum tree_code code)\n    executed between the evaluation of its \"operands\" (which may often\n    be evaluated in arbitrary order).  Hence if the operands themselves\n    don't side-effect, the VAR_DECLs, PARM_DECLs etc... must hold the\n-   same value in each operand/subexpression.  Hence a zero value for\n-   ONLY_CONST assumes isochronic (or instantaneous) tree equivalence.\n-   If comparing arbitrary expression trees, such as from different\n-   statements, ONLY_CONST must usually be nonzero.\n+   same value in each operand/subexpression.  Hence leaving OEP_ONLY_CONST\n+   unset means assuming isochronic (or instantaneous) tree equivalence.\n+   Unless comparing arbitrary expression trees, such as from different\n+   statements, this flag can usually be left unset.\n \n    If OEP_PURE_SAME is set, then pure functions with identical arguments\n    are considered the same.  It is used when the caller has other ways"}]}