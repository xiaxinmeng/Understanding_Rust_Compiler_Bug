{"sha": "b89361c670cc86ff43dcf87de2b293c19b8dce35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg5MzYxYzY3MGNjODZmZjQzZGNmODdkZTJiMjkzYzE5YjhkY2UzNQ==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2005-04-04T19:02:16Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2005-04-04T19:02:16Z"}, "message": "Fix PR tree-optimization/20703 Fix PR tree-optimization/20725\n\n2005-04-02  Daniel Berlin  <dberlin@dberlin.org>\n\t    Diego Novillo <dnovillo@redhat.com>\n\n\tFix PR tree-optimization/20703\n\tFix PR tree-optimization/20725\n\n\t* tree-ssa-pre.c (phi_translate): Handle tcc_comparison.\n\t(create_expression_by_pieces): Ditto.\n\t(valid_in_set): Ditto. Also handle tcc_declaration.\n\t(find_or_generate_expression): Handle comparison class.\n\t(insert_into_preds_of_block): Ditto.\n\t(insert_aux): Ditto.\n\t(create_value_expr_from): Handle comparison class, recursively\n\thandle reference nodes.\n\t(compute_avail): Handle comparison classes, rewrite a little cleaner.\n\t(execute_pre): Fix spacing.\n\t(do_fre): Renamed to execute_fre.\n\nCo-Authored-By: Diego Novillo <dnovillo@redhat.com>\n\nFrom-SVN: r97567", "tree": {"sha": "3d8c8ff124a2a0ad303cc21d734adc4803674f99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d8c8ff124a2a0ad303cc21d734adc4803674f99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b89361c670cc86ff43dcf87de2b293c19b8dce35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b89361c670cc86ff43dcf87de2b293c19b8dce35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b89361c670cc86ff43dcf87de2b293c19b8dce35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b89361c670cc86ff43dcf87de2b293c19b8dce35/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6a5d24d70d5c0f4d53b1796ed5e8c3fd252dc268", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a5d24d70d5c0f4d53b1796ed5e8c3fd252dc268", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a5d24d70d5c0f4d53b1796ed5e8c3fd252dc268"}], "stats": {"total": 179, "additions": 138, "deletions": 41}, "files": [{"sha": "5c4716f1ba0a294c78d5aec4796802f5e91556b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b89361c670cc86ff43dcf87de2b293c19b8dce35/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b89361c670cc86ff43dcf87de2b293c19b8dce35/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b89361c670cc86ff43dcf87de2b293c19b8dce35", "patch": "@@ -1,3 +1,21 @@\n+2005-04-02  Daniel Berlin  <dberlin@dberlin.org>\n+\t    Diego Novillo <dnovillo@redhat.com>\n+\t    \n+\tFix PR tree-optimization/20703\n+\tFix PR tree-optimization/20725\n+\t\n+\t* tree-ssa-pre.c (phi_translate): Handle tcc_comparison.\n+\t(create_expression_by_pieces): Ditto.\n+\t(valid_in_set): Ditto. Also handle tcc_declaration.\n+\t(find_or_generate_expression): Handle comparison class.\n+\t(insert_into_preds_of_block): Ditto.\n+\t(insert_aux): Ditto.\n+\t(create_value_expr_from): Handle comparison class, recursively\n+\thandle reference nodes.\n+\t(compute_avail): Handle comparison classes, rewrite a little cleaner.\n+\t(execute_pre): Fix spacing.\n+\t(do_fre): Renamed to execute_fre.\n+\n 2005-04-04  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* doc/invoke.texi (SPARC options): Document that"}, {"sha": "3bdd204a604c065259f6653df4bc07eed5ddde78", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-pre-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b89361c670cc86ff43dcf87de2b293c19b8dce35/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b89361c670cc86ff43dcf87de2b293c19b8dce35/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-1.c?ref=b89361c670cc86ff43dcf87de2b293c19b8dce35", "patch": "@@ -17,5 +17,5 @@ int main(int argc, char **argv)\n }\n /* We should eliminate one evaluation of b + c along the main path, \n    causing one reload. */\n-/* { dg-final { scan-tree-dump-times \"Eliminated:1\" 1 \"pre\"} } */\n+/* { dg-final { scan-tree-dump-times \"Eliminated: 1\" 1 \"pre\"} } */\n /* { dg-final { cleanup-tree-dump \"pre\" } } */"}, {"sha": "6df2611b0f9722c6df20cf4a6ca66ef9bd96daba", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-pre-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b89361c670cc86ff43dcf87de2b293c19b8dce35/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b89361c670cc86ff43dcf87de2b293c19b8dce35/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-2.c?ref=b89361c670cc86ff43dcf87de2b293c19b8dce35", "patch": "@@ -17,5 +17,5 @@ int motion_test1(int data, int data_0, int data_3, int v)\n }\n /* We should eliminate one computation of data_0 + data_3 along the \n    main path, causing one reload. */\n-/* { dg-final { scan-tree-dump-times \"Eliminated:1\" 1 \"pre\"} } */\n+/* { dg-final { scan-tree-dump-times \"Eliminated: 1\" 1 \"pre\"} } */\n /* { dg-final { cleanup-tree-dump \"pre\" } } */"}, {"sha": "3925f7529eb92a43721295230495f3aa66372f87", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-pre-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b89361c670cc86ff43dcf87de2b293c19b8dce35/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b89361c670cc86ff43dcf87de2b293c19b8dce35/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-3.c?ref=b89361c670cc86ff43dcf87de2b293c19b8dce35", "patch": "@@ -11,5 +11,5 @@ unsigned foo1 (unsigned a, unsigned b)\n   return j + k;\n }\n /* We should eliminate both 4*b and 4*a from the main body of the loop */\n-/* { dg-final { scan-tree-dump-times \"Eliminated:2\" 1 \"pre\"} } */\n+/* { dg-final { scan-tree-dump-times \"Eliminated: 2\" 1 \"pre\"} } */\n /* { dg-final { cleanup-tree-dump \"pre\" } } */"}, {"sha": "6f4c2f3a82db09452aba5937ff06732056f36bf3", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-pre-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b89361c670cc86ff43dcf87de2b293c19b8dce35/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b89361c670cc86ff43dcf87de2b293c19b8dce35/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-4.c?ref=b89361c670cc86ff43dcf87de2b293c19b8dce35", "patch": "@@ -11,5 +11,5 @@ int main(void)\n }\n /* We should eliminate the x+1 computation from this routine, replacing\n    it with a phi of 3, 4 */\n-/* { dg-final { scan-tree-dump-times \"Eliminated:1\" 1 \"pre\"} } */\n+/* { dg-final { scan-tree-dump-times \"Eliminated: 1\" 1 \"pre\"} } */\n /* { dg-final { cleanup-tree-dump \"pre\" } } */"}, {"sha": "8756944b9600afddaae38c17ac713e729cbdb37e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-pre-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b89361c670cc86ff43dcf87de2b293c19b8dce35/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b89361c670cc86ff43dcf87de2b293c19b8dce35/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-5.c?ref=b89361c670cc86ff43dcf87de2b293c19b8dce35", "patch": "@@ -12,5 +12,5 @@ foo (int i)\n }\n /* We should detect that a+b is the same along both edges, and replace it with\n    5  */\n-/* { dg-final { scan-tree-dump-times \"Constified:1\" 1 \"pre\"} } */\n+/* { dg-final { scan-tree-dump-times \"Constified: 1\" 1 \"pre\"} } */\n /* { dg-final { cleanup-tree-dump \"pre\" } } */"}, {"sha": "a639e9dffe8bd92ec700171f22d80975802edb60", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-pre-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b89361c670cc86ff43dcf87de2b293c19b8dce35/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b89361c670cc86ff43dcf87de2b293c19b8dce35/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-6.c?ref=b89361c670cc86ff43dcf87de2b293c19b8dce35", "patch": "@@ -10,5 +10,5 @@ int main(int x)\n }\n /* We should eliminate one evaluation of x + 1 along the x = 2 path,\n    causing one elimination.  */\n-/* { dg-final { scan-tree-dump-times \"Eliminated:1\" 1 \"pre\"} } */\n+/* { dg-final { scan-tree-dump-times \"Eliminated: 1\" 1 \"pre\"} } */\n /* { dg-final { cleanup-tree-dump \"pre\" } } */"}, {"sha": "642c36cbf8c320a87e3853643e846bf3a2778f49", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-pre-7.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b89361c670cc86ff43dcf87de2b293c19b8dce35/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b89361c670cc86ff43dcf87de2b293c19b8dce35/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-7.c?ref=b89361c670cc86ff43dcf87de2b293c19b8dce35", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */ \n+/* { dg-options \"-O2 -fno-tree-dominator-opts -fdump-tree-pre-stats\" } */\n+int\n+foo (int *array)\n+{\n+    if (array[1] != 0)\n+          return array[1];\n+      return 0;\n+}\n+/* We should eliminate one address calculation, and one load.  */\n+/* { dg-final { scan-tree-dump-times \"Eliminated: 2\" 1 \"pre\"} } */\n+/* { dg-final { cleanup-tree-dump \"pre\" } } */"}, {"sha": "f8e19216ec351f4f6b9486b8dd1e5bea8bfb43a4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-pre-8.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b89361c670cc86ff43dcf87de2b293c19b8dce35/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b89361c670cc86ff43dcf87de2b293c19b8dce35/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-8.c?ref=b89361c670cc86ff43dcf87de2b293c19b8dce35", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */ \n+/* { dg-options \"-O2 -fno-tree-dominator-opts -fdump-tree-pre-stats\" } */\n+struct s {\n+      int *n;\n+};\n+\n+int\n+foo (unsigned int i, struct s *array)\n+{\n+  int *p = array[i].n;\n+  if (p)\n+    {\n+      int *q = array[i].n;\n+      if (p != q)\n+\treturn 1;\n+    }\n+  return 0;\n+}\n+/* We should eliminate two address calculations, one cast, and one load.  */\n+/* { dg-final { scan-tree-dump-times \"Eliminated: 4\" 1 \"pre\"} } */\n+/* { dg-final { cleanup-tree-dump \"pre\" } } */"}, {"sha": "6ca0b0ade9e9c3a53f9f61b1d2a085f982fb76ad", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 81, "deletions": 35, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b89361c670cc86ff43dcf87de2b293c19b8dce35/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b89361c670cc86ff43dcf87de2b293c19b8dce35/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=b89361c670cc86ff43dcf87de2b293c19b8dce35", "patch": "@@ -871,6 +871,7 @@ phi_translate (tree expr, value_set_t set, basic_block pred,\n       return NULL;\n \n     case tcc_binary:\n+    case tcc_comparison:\n       {\n \ttree oldop1 = TREE_OPERAND (expr, 0);\n \ttree oldop2 = TREE_OPERAND (expr, 1);\n@@ -1057,6 +1058,7 @@ valid_in_set (value_set_t set, tree expr)\n   switch (TREE_CODE_CLASS (TREE_CODE (expr)))\n     {\n     case tcc_binary:\n+    case tcc_comparison:\n       {\n \ttree op1 = TREE_OPERAND (expr, 0);\n \ttree op2 = TREE_OPERAND (expr, 1);\n@@ -1077,6 +1079,10 @@ valid_in_set (value_set_t set, tree expr)\n       gcc_assert (TREE_CODE (expr) == SSA_NAME);\n       return true;\n \n+    case tcc_declaration:\n+      /* VAR_DECL and PARM_DECL are never anticipatable.  */\n+      return false;\n+\n     default:\n       /* No other cases should be encountered.  */\n       gcc_unreachable (); \n@@ -1284,6 +1290,7 @@ find_or_generate_expression (basic_block block, tree expr, tree stmts)\n       genop = VALUE_HANDLE_EXPR_SET (expr)->head->expr;\n       gcc_assert (UNARY_CLASS_P (genop)\n \t\t  || BINARY_CLASS_P (genop)\n+\t\t  || COMPARISON_CLASS_P (genop)\n \t\t  || REFERENCE_CLASS_P (genop));\n       genop = create_expression_by_pieces (block, genop, stmts);\n     }\n@@ -1315,6 +1322,7 @@ create_expression_by_pieces (basic_block block, tree expr, tree stmts)\n   switch (TREE_CODE_CLASS (TREE_CODE (expr)))\n     {\n     case tcc_binary:\n+    case tcc_comparison:\n       {\n \ttree_stmt_iterator tsi;\n \ttree forced_stmts;\n@@ -1466,6 +1474,7 @@ insert_into_preds_of_block (basic_block block, value_set_node_t node,\n       bprime = pred->src;\n       eprime = avail[bprime->index];\n       if (BINARY_CLASS_P (eprime)\n+\t  || COMPARISON_CLASS_P (eprime)\n \t  || UNARY_CLASS_P (eprime))\n \t{\n \t  builtexpr = create_expression_by_pieces (bprime,\n@@ -1579,6 +1588,7 @@ insert_aux (basic_block block)\n \t\t   node = node->next)\n \t\t{\n \t\t  if (BINARY_CLASS_P (node->expr)\n+\t\t      || COMPARISON_CLASS_P (node->expr)\n \t\t      || UNARY_CLASS_P (node->expr))\n \t\t    {\n \t\t      tree *avail;\n@@ -1767,43 +1777,71 @@ add_to_sets (tree var, tree expr, vuse_optype vuses, bitmap_set_t s1,\n /* Given a unary or binary expression EXPR, create and return a new\n    expression with the same structure as EXPR but with its operands\n    replaced with the value handles of each of the operands of EXPR.\n-   Insert EXPR's operands into the EXP_GEN set for BLOCK.\n \n    VUSES represent the virtual use operands associated with EXPR (if\n-   any). They are used when computing the hash value for EXPR.  */\n+   any). They are used when computing the hash value for EXPR.\n+   Insert EXPR's operands into the EXP_GEN set for BLOCK. */\n \n static inline tree\n-create_value_expr_from (tree expr, basic_block block, vuse_optype vuses)\n+create_value_expr_from (tree expr, basic_block block,\n+\t\t\tvuse_optype vuses)\n+\n {\n   int i;\n   enum tree_code code = TREE_CODE (expr);\n   tree vexpr;\n+  alloc_pool pool;\n \n   gcc_assert (TREE_CODE_CLASS (code) == tcc_unary\n \t      || TREE_CODE_CLASS (code) == tcc_binary\n+\t      || TREE_CODE_CLASS (code) == tcc_comparison\n \t      || TREE_CODE_CLASS (code) == tcc_reference);\n \n   if (TREE_CODE_CLASS (code) == tcc_unary)\n-    vexpr = pool_alloc (unary_node_pool);\n+    pool = unary_node_pool;\n   else if (TREE_CODE_CLASS (code) == tcc_reference)\n-    vexpr = pool_alloc (reference_node_pool);\n+    pool = reference_node_pool;\n   else\n-    vexpr = pool_alloc (binary_node_pool);\n+    pool = binary_node_pool;\n \n+  vexpr = pool_alloc (pool);\n   memcpy (vexpr, expr, tree_size (expr));\n \n   for (i = 0; i < TREE_CODE_LENGTH (code); i++)\n     {\n-      tree op = TREE_OPERAND (expr, i);\n-      if (op != NULL)\n+      tree val, op;\n+      \n+      op = TREE_OPERAND (expr, i);\n+      if (op == NULL_TREE)\n+\tcontinue;\n+\n+      /* If OP is a constant that has overflowed, do not value number\n+\t this expression.  */\n+      if (TREE_CODE_CLASS (TREE_CODE (op)) == tcc_constant\n+\t  && TREE_OVERFLOW (op))\n+\t{\n+\t  pool_free (pool, vexpr);\n+\t  return NULL;\n+\t}\n+\n+      /* Recursively value-numberize reference ops */\n+      if (TREE_CODE_CLASS (TREE_CODE (op)) == tcc_reference)\n \t{\n-\t  tree val = vn_lookup_or_add (op, vuses);\n-\t  if (!is_undefined_value (op))\n-\t    value_insert_into_set (EXP_GEN (block), op);\n-\t  if (TREE_CODE (val) == VALUE_HANDLE)\n-\t    TREE_TYPE (val) = TREE_TYPE (TREE_OPERAND (vexpr, i));\n-\t  TREE_OPERAND (vexpr, i) = val;\n+\t  tree tempop = create_value_expr_from (op, block, vuses);\n+\t  op = tempop ? tempop : op;\n+\t  val = vn_lookup_or_add (op, vuses);\n \t}\n+      else       \n+\t/* Create a value handle for OP and add it to VEXPR.  */\n+\tval = vn_lookup_or_add (op, NULL);\n+\n+      if (!is_undefined_value (op))\n+\tvalue_insert_into_set (EXP_GEN (block), op);\n+\n+      if (TREE_CODE (val) == VALUE_HANDLE)\n+\tTREE_TYPE (val) = TREE_TYPE (TREE_OPERAND (vexpr, i));\n+\n+      TREE_OPERAND (vexpr, i) = val;\n     }\n \n   return vexpr;\n@@ -1902,8 +1940,29 @@ compute_avail (void)\n \t      vuse_optype vuses = STMT_VUSE_OPS (stmt);\n \n \t      STRIP_USELESS_TYPE_CONVERSION (rhs);\n-\t      if (TREE_CODE (rhs) == SSA_NAME\n-\t\t  || is_gimple_min_invariant (rhs))\n+\t      if (UNARY_CLASS_P (rhs)\n+\t\t  || BINARY_CLASS_P (rhs)\n+\t\t  || COMPARISON_CLASS_P (rhs)\n+\t\t  || REFERENCE_CLASS_P (rhs))\n+\t\t{\n+\t\t  /* For binary, unary, and reference expressions,\n+\t\t     create a duplicate expression with the operands\n+\t\t     replaced with the value handles of the original\n+\t\t     RHS.  */\n+\t\t  tree newt = create_value_expr_from (rhs, block, vuses);\n+\t\t  if (newt)\n+\t\t    {\n+\t\t      add_to_sets (lhs, newt, vuses, TMP_GEN (block),\n+\t\t\t\t   AVAIL_OUT (block));\n+\t\t      value_insert_into_set (EXP_GEN (block), newt);\n+\t\t      continue;\n+\t\t    }\n+\t\t}\n+\t      else if (TREE_CODE (rhs) == SSA_NAME\n+\t\t       || is_gimple_min_invariant (rhs)\n+\t\t       || TREE_INVARIANT (rhs)\n+\t\t       || TREE_CODE (rhs) == ADDR_EXPR\n+\t\t       || DECL_P (rhs))\n \t\t{\n \t\t  /* Compute a value number for the RHS of the statement\n \t\t     and add its value to the AVAIL_OUT set for the block.\n@@ -1916,19 +1975,6 @@ compute_avail (void)\n \t\t    value_insert_into_set (EXP_GEN (block), rhs);\n \t\t  continue;\n \t\t}\t   \n-\t      else if (UNARY_CLASS_P (rhs) || BINARY_CLASS_P (rhs)\n-\t\t       || TREE_CODE (rhs) == INDIRECT_REF)\n-\t\t{\n-\t\t  /* For binary, unary, and reference expressions,\n-\t\t     create a duplicate expression with the operands\n-\t\t     replaced with the value handles of the original\n-\t\t     RHS.  */\n-\t\t  tree newt = create_value_expr_from (rhs, block, vuses);\n-\t\t  add_to_sets (lhs, newt, vuses, TMP_GEN (block),\n-\t\t\t       AVAIL_OUT (block));\n-\t\t  value_insert_into_set (EXP_GEN (block), newt);\n-\t\t  continue;\n-\t\t}\n \t    }\n \n \t  /* For any other statement that we don't recognize, simply\n@@ -2286,10 +2332,10 @@ execute_pre (bool do_fre)\n \n   if (dump_file && (dump_flags & TDF_STATS))\n     {\n-      fprintf (dump_file, \"Insertions:%d\\n\", pre_stats.insertions);\n-      fprintf (dump_file, \"New PHIs:%d\\n\", pre_stats.phis);\n-      fprintf (dump_file, \"Eliminated:%d\\n\", pre_stats.eliminations);\n-      fprintf (dump_file, \"Constified:%d\\n\", pre_stats.constified);\n+      fprintf (dump_file, \"Insertions: %d\\n\", pre_stats.insertions);\n+      fprintf (dump_file, \"New PHIs: %d\\n\", pre_stats.phis);\n+      fprintf (dump_file, \"Eliminated: %d\\n\", pre_stats.eliminations);\n+      fprintf (dump_file, \"Constified: %d\\n\", pre_stats.constified);\n     }\n   \n   bsi_commit_edge_inserts ();\n@@ -2336,7 +2382,7 @@ struct tree_opt_pass pass_pre =\n /* Gate and execute functions for FRE.  */\n \n static void\n-do_fre (void)\n+execute_fre (void)\n {\n   execute_pre (true);\n }\n@@ -2351,7 +2397,7 @@ struct tree_opt_pass pass_fre =\n {\n   \"fre\",\t\t\t\t/* name */\n   gate_fre,\t\t\t\t/* gate */\n-  do_fre,\t\t\t\t/* execute */\n+  execute_fre,\t\t\t\t/* execute */\n   NULL,\t\t\t\t\t/* sub */\n   NULL,\t\t\t\t\t/* next */\n   0,\t\t\t\t\t/* static_pass_number */"}]}