{"sha": "700f19f09fdeb75c173cd31b38acee11f6f88356", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzAwZjE5ZjA5ZmRlYjc1YzE3M2NkMzFiMzhhY2VlMTFmNmY4ODM1Ng==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2000-01-01T00:07:54Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-01-01T00:07:54Z"}, "message": "function.c (update_temp_slot_address): Handle case where sum of temporary address plus offset in register is a valid...\n\n\t* function.c (update_temp_slot_address): Handle case where sum of\n\ttemporary address plus offset in register is a valid address.\n\nFrom-SVN: r31153", "tree": {"sha": "ba1be5dc0460b0f5df814a49d8c3db765366ce78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba1be5dc0460b0f5df814a49d8c3db765366ce78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/700f19f09fdeb75c173cd31b38acee11f6f88356", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/700f19f09fdeb75c173cd31b38acee11f6f88356", "html_url": "https://github.com/Rust-GCC/gccrs/commit/700f19f09fdeb75c173cd31b38acee11f6f88356", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/700f19f09fdeb75c173cd31b38acee11f6f88356/comments", "author": null, "committer": null, "parents": [{"sha": "2c33b220da50f14dd23e40cadcca51232a781579", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c33b220da50f14dd23e40cadcca51232a781579", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c33b220da50f14dd23e40cadcca51232a781579"}], "stats": {"total": 24, "additions": 20, "deletions": 4}, "files": [{"sha": "acf044a9c853b810402c8baac4d1219887145ce1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700f19f09fdeb75c173cd31b38acee11f6f88356/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700f19f09fdeb75c173cd31b38acee11f6f88356/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=700f19f09fdeb75c173cd31b38acee11f6f88356", "patch": "@@ -1,3 +1,8 @@\n+Fri Dec 31 19:10:31 1999  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* function.c (update_temp_slot_address): Handle case where sum of\n+\ttemporary address plus offset in register is a valid address.\n+\n 1999-12-30  Herman A.J. ten Brugge  <Haj.Ten.Brugge@net.HCC.nl>\n \n         * genrecog.c (change_state) Corrected typo."}, {"sha": "a551e24e109b358a3e1abacd1efd6d925eabe2e1", "filename": "gcc/function.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700f19f09fdeb75c173cd31b38acee11f6f88356/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700f19f09fdeb75c173cd31b38acee11f6f88356/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=700f19f09fdeb75c173cd31b38acee11f6f88356", "patch": "@@ -978,12 +978,23 @@ update_temp_slot_address (old, new)\n \n   p = find_temp_slot_from_address (old);\n \n-  /* If we didn't find one, see if both OLD and NEW are a PLUS and if\n-     there is a register in common between them.  If so, try a recursive\n-     call on those values.  */\n+  /* If we didn't find one, see if both OLD is a PLUS.  If so, and NEW\n+     is a register, see if one operand of the PLUS is a temporary\n+     location.  If so, NEW points into it.  Otherwise, if both OLD and\n+     NEW are a PLUS and if there is a register in common between them.\n+     If so, try a recursive call on those values.  */\n   if (p == 0)\n     {\n-      if (GET_CODE (old) != PLUS || GET_CODE (new) != PLUS)\n+      if (GET_CODE (old) != PLUS)\n+\treturn;\n+\n+      if (GET_CODE (new) == REG)\n+\t{\n+\t  update_temp_slot_address (XEXP (old, 0), new);\n+\t  update_temp_slot_address (XEXP (old, 1), new);\n+\t  return;\n+\t}\n+      else if (GET_CODE (new) != PLUS)\n \treturn;\n \n       if (rtx_equal_p (XEXP (old, 0), XEXP (new, 0)))"}]}