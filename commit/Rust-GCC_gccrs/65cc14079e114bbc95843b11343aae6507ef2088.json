{"sha": "65cc14079e114bbc95843b11343aae6507ef2088", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVjYzE0MDc5ZTExNGJiYzk1ODQzYjExMzQzYWFlNjUwN2VmMjA4OA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-05-22T16:00:35Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-05-22T16:00:35Z"}, "message": "name-lookup.h (parse_using_directive): Replace with ...\n\n\t* name-lookup.h (parse_using_directive): Replace with ...\n\t(finish_namespace_using_directive): ... this and ...\n\t(finish_local_using_directive): ... this.\n\t* name-lookup.c (add_using_namespace_1): Move later.\n\t(add_using_namespace): Move later, add namespace_p arg, remove\n\tindirect arg.\n\t(push_using_directive_1): Directly recurse.\n\t(do_using_directive, parse_using_directive): Delete, split into\n\t...\n\t(finish_namespace_using_directive): ... this and ...\n\t(finish_local_using_directive): ... this.\n\t(push_namespace): Use add_using_namespace.\n\t* parser.c (cp_parser_using_directive): Call\n\tfinish_namespace_using_directive or finish_local_using_directive.\n\t* pt.c (tsubst_expr): Call finish_local_using_directive.\n\nFrom-SVN: r248337", "tree": {"sha": "4858d389a0129aa43164c26a93acbfa89e0b1404", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4858d389a0129aa43164c26a93acbfa89e0b1404"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65cc14079e114bbc95843b11343aae6507ef2088", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65cc14079e114bbc95843b11343aae6507ef2088", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65cc14079e114bbc95843b11343aae6507ef2088", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65cc14079e114bbc95843b11343aae6507ef2088/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "27d020cf7db55e3cc9517a8bc79e14644f54bd5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27d020cf7db55e3cc9517a8bc79e14644f54bd5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27d020cf7db55e3cc9517a8bc79e14644f54bd5a"}], "stats": {"total": 280, "additions": 149, "deletions": 131}, "files": [{"sha": "ba03324ee8173731f5179e50f4761490155d280f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65cc14079e114bbc95843b11343aae6507ef2088/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65cc14079e114bbc95843b11343aae6507ef2088/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=65cc14079e114bbc95843b11343aae6507ef2088", "patch": "@@ -1,5 +1,20 @@\n 2017-05-22  Nathan Sidwell  <nathan@acm.org>\n \n+\t* name-lookup.h (parse_using_directive): Replace with ...\n+\t(finish_namespace_using_directive): ... this and ...\n+\t(finish_local_using_directive): ... this.\n+\t* name-lookup.c (add_using_namespace_1): Move later.\n+\t(add_using_namespace): Move later, add namespace_p arg, remove\n+\tindirect arg.\n+\t(push_using_directive_1): Directly recurse.\n+\t(do_using_directive, parse_using_directive): Delete, split into ...\n+\t(finish_namespace_using_directive): ... this and ...\n+\t(finish_local_using_directive): ... this.\n+\t(push_namespace): Use add_using_namespace.\n+\t* parser.c (cp_parser_using_directive): Call\n+\tfinish_namespace_using_directive or finish_local_using_directive.\n+\t* pt.c (tsubst_expr): Call finish_local_using_directive.\n+\n \t* cp-objcp-common.c (cp_register_dumps): Register raw dumper.\n \t* cp-tree.h (raw_dump_id): Declare.\n \t* decl2.c (raw_dump_id): Define."}, {"sha": "7178932e25f983f1b720a8e0d0cb3e3005bcfbcf", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 110, "deletions": 128, "changes": 238, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65cc14079e114bbc95843b11343aae6507ef2088/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65cc14079e114bbc95843b11343aae6507ef2088/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=65cc14079e114bbc95843b11343aae6507ef2088", "patch": "@@ -4337,60 +4337,6 @@ pushdecl_namespace_level (tree x, bool is_friend)\n   return t;\n }\n \n-/* Insert USED into the using list of USER. Set INDIRECT_flag if this\n-   directive is not directly from the source. Also find the common\n-   ancestor and let our users know about the new namespace */\n-\n-static void\n-add_using_namespace_1 (tree user, tree used, bool indirect)\n-{\n-  tree t;\n-  /* Using oneself is a no-op.  */\n-  if (user == used)\n-    return;\n-  gcc_assert (TREE_CODE (user) == NAMESPACE_DECL);\n-  gcc_assert (TREE_CODE (used) == NAMESPACE_DECL);\n-  /* Check if we already have this.  */\n-  t = purpose_member (used, DECL_NAMESPACE_USING (user));\n-  if (t != NULL_TREE)\n-    {\n-      if (!indirect)\n-\t/* Promote to direct usage.  */\n-\tTREE_INDIRECT_USING (t) = 0;\n-      return;\n-    }\n-\n-  /* Add used to the user's using list.  */\n-  DECL_NAMESPACE_USING (user)\n-    = tree_cons (used, namespace_ancestor (user, used),\n-\t\t DECL_NAMESPACE_USING (user));\n-\n-  TREE_INDIRECT_USING (DECL_NAMESPACE_USING (user)) = indirect;\n-\n-  /* Add user to the used's users list.  */\n-  DECL_NAMESPACE_USERS (used)\n-    = tree_cons (user, 0, DECL_NAMESPACE_USERS (used));\n-\n-  /* Recursively add all namespaces used.  */\n-  for (t = DECL_NAMESPACE_USING (used); t; t = TREE_CHAIN (t))\n-    /* indirect usage */\n-    add_using_namespace_1 (user, TREE_PURPOSE (t), 1);\n-\n-  /* Tell everyone using us about the new used namespaces.  */\n-  for (t = DECL_NAMESPACE_USERS (user); t; t = TREE_CHAIN (t))\n-    add_using_namespace_1 (TREE_PURPOSE (t), used, 1);\n-}\n-\n-/* Wrapper for add_using_namespace_1.  */\n-\n-static void\n-add_using_namespace (tree user, tree used, bool indirect)\n-{\n-  bool subtime = timevar_cond_start (TV_NAME_LOOKUP);\n-  add_using_namespace_1 (user, used, indirect);\n-  timevar_cond_stop (TV_NAME_LOOKUP, subtime);\n-}\n-\n /* Process a using-declaration not appearing in class or local scope.  */\n \n void\n@@ -4422,75 +4368,6 @@ do_toplevel_using_decl (tree decl, tree scope, tree name)\n     binding->type = newtype;\n }\n \n-/* Process a using-directive.  */\n-\n-void\n-do_using_directive (tree name_space)\n-{\n-  tree context = NULL_TREE;\n-\n-  if (name_space == error_mark_node)\n-    return;\n-\n-  gcc_assert (TREE_CODE (name_space) == NAMESPACE_DECL);\n-\n-  if (building_stmt_list_p ())\n-    add_stmt (build_stmt (input_location, USING_STMT, name_space));\n-  name_space = ORIGINAL_NAMESPACE (name_space);\n-\n-  if (!toplevel_bindings_p ())\n-    {\n-      push_using_directive (name_space);\n-    }\n-  else\n-    {\n-      /* direct usage */\n-      add_using_namespace (current_namespace, name_space, 0);\n-      if (current_namespace != global_namespace)\n-\tcontext = current_namespace;\n-\n-      /* Emit debugging info.  */\n-      if (!processing_template_decl)\n-\t(*debug_hooks->imported_module_or_decl) (name_space, NULL_TREE,\n-\t\t\t\t\t\t context, false);\n-    }\n-}\n-\n-/* Deal with a using-directive seen by the parser.  Currently we only\n-   handle attributes here, since they cannot appear inside a template.  */\n-\n-void\n-parse_using_directive (tree name_space, tree attribs)\n-{\n-  do_using_directive (name_space);\n-\n-  if (attribs == error_mark_node)\n-    return;\n-\n-  for (tree a = attribs; a; a = TREE_CHAIN (a))\n-    {\n-      tree name = get_attribute_name (a);\n-      if (is_attribute_p (\"strong\", name))\n-\t{\n-\t  warning (OPT_Wdeprecated, \"strong using is deprecated; use inline \"\n-\t\t   \"namespaces instead\");\n-\t  if (!toplevel_bindings_p ())\n-\t    error (\"strong using only meaningful at namespace scope\");\n-\t  else if (name_space != error_mark_node)\n-\t    {\n-\t      if (!is_ancestor (current_namespace, name_space))\n-\t\terror (\"current namespace %qD does not enclose strongly used namespace %qD\",\n-\t\t       current_namespace, name_space);\n-\t      DECL_NAMESPACE_ASSOCIATIONS (name_space)\n-\t\t= tree_cons (current_namespace, 0,\n-\t\t\t     DECL_NAMESPACE_ASSOCIATIONS (name_space));\n-\t    }\n-\t}\n-      else\n-\twarning (OPT_Wattributes, \"%qD attribute directive ignored\", name);\n-    }\n-}\n-\n /* Combines two sets of overloaded functions into an OVERLOAD chain, removing\n    duplicates.  The first list becomes the tail of the result.\n \n@@ -5827,7 +5704,7 @@ push_using_directive_1 (tree used)\n \n   /* Recursively add all namespaces used.  */\n   for (iter = DECL_NAMESPACE_USING (used); iter; iter = TREE_CHAIN (iter))\n-    push_using_directive (TREE_PURPOSE (iter));\n+    push_using_directive_1 (TREE_PURPOSE (iter));\n \n   return ud;\n }\n@@ -6363,6 +6240,113 @@ do_pop_nested_namespace (tree ns)\n   do_pop_from_top_level ();\n }\n \n+/* Insert USED into the using list of USER. Set INDIRECT_flag if this\n+   directive is not directly from the source. Also find the common\n+   ancestor and let our users know about the new namespace */\n+\n+static void\n+add_using_namespace_1 (tree user, tree used, bool indirect)\n+{\n+  tree t;\n+  /* Using oneself is a no-op.  */\n+  if (user == used)\n+    return;\n+  gcc_assert (TREE_CODE (user) == NAMESPACE_DECL);\n+  gcc_assert (TREE_CODE (used) == NAMESPACE_DECL);\n+  /* Check if we already have this.  */\n+  t = purpose_member (used, DECL_NAMESPACE_USING (user));\n+  if (t != NULL_TREE)\n+    {\n+      if (!indirect)\n+\t/* Promote to direct usage.  */\n+\tTREE_INDIRECT_USING (t) = 0;\n+      return;\n+    }\n+\n+  /* Add used to the user's using list.  */\n+  DECL_NAMESPACE_USING (user)\n+    = tree_cons (used, namespace_ancestor (user, used),\n+\t\t DECL_NAMESPACE_USING (user));\n+\n+  TREE_INDIRECT_USING (DECL_NAMESPACE_USING (user)) = indirect;\n+\n+  /* Add user to the used's users list.  */\n+  DECL_NAMESPACE_USERS (used)\n+    = tree_cons (user, 0, DECL_NAMESPACE_USERS (used));\n+\n+  /* Recursively add all namespaces used.  */\n+  for (t = DECL_NAMESPACE_USING (used); t; t = TREE_CHAIN (t))\n+    /* indirect usage */\n+    add_using_namespace_1 (user, TREE_PURPOSE (t), 1);\n+\n+  /* Tell everyone using us about the new used namespaces.  */\n+  for (t = DECL_NAMESPACE_USERS (user); t; t = TREE_CHAIN (t))\n+    add_using_namespace_1 (TREE_PURPOSE (t), used, 1);\n+}\n+\n+/* Wrapper for add_using_namespace_1.  */\n+\n+static void\n+add_using_namespace (bool namespace_level_p, tree from, tree target)\n+{\n+  bool subtime = timevar_cond_start (TV_NAME_LOOKUP);\n+  add_using_namespace_1 (from, target, false);\n+  if (namespace_level_p)\n+    {\n+      /* Emit debugging info.  */\n+      tree context = from != global_namespace ? from : NULL_TREE;\n+      debug_hooks->imported_module_or_decl (target, NULL_TREE, context, false);\n+    }\n+  timevar_cond_stop (TV_NAME_LOOKUP, subtime);\n+}\n+\n+/* Process a namespace-scope using directive.  */\n+\n+void\n+finish_namespace_using_directive (tree target, tree attribs)\n+{\n+  gcc_checking_assert (namespace_bindings_p ());\n+  if (target == error_mark_node)\n+    return;\n+\n+  add_using_namespace (true, current_namespace,\n+\t\t       ORIGINAL_NAMESPACE (target));\n+\n+  if (attribs == error_mark_node)\n+    return;\n+\n+  for (tree a = attribs; a; a = TREE_CHAIN (a))\n+    {\n+      tree name = get_attribute_name (a);\n+      if (is_attribute_p (\"strong\", name))\n+\t{\n+\t  warning (0, \"strong using directive no longer supported\");\n+\t  if (CP_DECL_CONTEXT (target) == current_namespace)\n+\t    inform (DECL_SOURCE_LOCATION (target),\n+\t\t    \"you may use an inline namespace instead\");\n+\t}\n+      else\n+\twarning (OPT_Wattributes, \"%qD attribute directive ignored\", name);\n+    }\n+}\n+\n+/* Process a function-scope using-directive.  */\n+\n+void\n+finish_local_using_directive (tree target, tree attribs)\n+{\n+  gcc_checking_assert (local_bindings_p ());\n+  if (target == error_mark_node)\n+    return;\n+\n+  if (attribs)\n+    warning (OPT_Wattributes, \"attributes ignored on local using directive\");\n+\n+  add_stmt (build_stmt (input_location, USING_STMT, target));\n+\n+  push_using_directive (ORIGINAL_NAMESPACE (target));\n+}\n+\n /* Pushes X into the global namespace.  */\n \n tree\n@@ -6468,7 +6452,7 @@ push_namespace (tree name, bool make_inline)\n \t      DECL_NAME (ns) = NULL_TREE;\n \n \t      if (!make_inline)\n-\t\tdo_using_directive (ns);\n+\t\tadd_using_namespace (true, current_namespace, ns);\n \t    }\n \t  else if (TREE_PUBLIC (current_namespace))\n \t    TREE_PUBLIC (ns) = 1;\n@@ -6480,7 +6464,7 @@ push_namespace (tree name, bool make_inline)\n \t      DECL_NAMESPACE_ASSOCIATIONS (ns)\n \t\t= tree_cons (current_namespace, NULL_TREE, NULL_TREE);\n \t      /* Import the contents of the inline namespace.  */\n-\t      do_using_directive (ns);\n+\t      add_using_namespace (true, current_namespace, ns);\n \t    }\n \t}\n     }\n@@ -6525,8 +6509,6 @@ push_to_top_level (void)\n   timevar_cond_stop (TV_NAME_LOOKUP, subtime);\n }\n \n-/* Wrapper for pop_from_top_level_1.  */\n-\n void\n pop_from_top_level (void)\n {"}, {"sha": "84ab2065337db50507aeb0b05cceab2505e26df1", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65cc14079e114bbc95843b11343aae6507ef2088/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65cc14079e114bbc95843b11343aae6507ef2088/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=65cc14079e114bbc95843b11343aae6507ef2088", "patch": "@@ -332,11 +332,12 @@ extern tree do_class_using_decl (tree, tree);\n extern void do_using_directive (tree);\n extern cp_expr lookup_arg_dependent (tree, tree, vec<tree, va_gc> *);\n extern bool is_associated_namespace (tree, tree);\n-extern void parse_using_directive (tree, tree);\n extern tree innermost_non_namespace_value (tree);\n extern cxx_binding *outer_binding (tree, cxx_binding *, bool);\n extern void cp_emit_debug_info_for_using (tree, tree);\n \n+extern void finish_namespace_using_directive (tree, tree);\n+extern void finish_local_using_directive (tree, tree);\n extern tree pushdecl_outermost_localscope (tree);\n extern tree pushdecl (tree, bool is_friend = false);\n extern tree pushdecl_top_level (tree, bool is_friend = false);"}, {"sha": "cdde7a0bf3eed17703500952db1666f9d9967c01", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65cc14079e114bbc95843b11343aae6507ef2088/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65cc14079e114bbc95843b11343aae6507ef2088/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=65cc14079e114bbc95843b11343aae6507ef2088", "patch": "@@ -18692,8 +18692,13 @@ cp_parser_using_directive (cp_parser* parser)\n   namespace_decl = cp_parser_namespace_name (parser);\n   /* And any specified attributes.  */\n   attribs = cp_parser_attributes_opt (parser);\n+\n   /* Update the symbol table.  */\n-  parse_using_directive (namespace_decl, attribs);\n+  if (namespace_bindings_p ())\n+    finish_namespace_using_directive (namespace_decl, attribs);\n+  else\n+    finish_local_using_directive (namespace_decl, attribs);\n+\n   /* Look for the final `;'.  */\n   cp_parser_require (parser, CPP_SEMICOLON, RT_SEMICOLON);\n }"}, {"sha": "f9980fef99127b1ffd085e088c50e5fc1220d3f1", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65cc14079e114bbc95843b11343aae6507ef2088/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65cc14079e114bbc95843b11343aae6507ef2088/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=65cc14079e114bbc95843b11343aae6507ef2088", "patch": "@@ -15672,7 +15672,8 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n       break;\n \n     case USING_STMT:\n-      do_using_directive (USING_STMT_NAMESPACE (t));\n+      finish_local_using_directive (USING_STMT_NAMESPACE (t),\n+\t\t\t\t    /*attribs=*/NULL_TREE);\n       break;\n \n     case DECL_EXPR:"}, {"sha": "e162c862e43aad4d2e1983da464cab78b66375c8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65cc14079e114bbc95843b11343aae6507ef2088/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65cc14079e114bbc95843b11343aae6507ef2088/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=65cc14079e114bbc95843b11343aae6507ef2088", "patch": "@@ -1,3 +1,7 @@\n+2017-05-22  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.dg/lookup/strong-using.C: New.\n+\n 2017-05-22  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \t* gcc.target/arm/movsi_movt.c: New test."}, {"sha": "9d58fddbb8fb3ddd814dbc8383cfb9e3e359a301", "filename": "gcc/testsuite/g++.dg/lookup/strong-using.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65cc14079e114bbc95843b11343aae6507ef2088/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fstrong-using.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65cc14079e114bbc95843b11343aae6507ef2088/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fstrong-using.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fstrong-using.C?ref=65cc14079e114bbc95843b11343aae6507ef2088", "patch": "@@ -0,0 +1,10 @@\n+// { dg-do compile { target c++11 } }\n+\n+namespace A\n+{\n+  namespace B // { dg-message \"inline namespace\" }\n+  {\n+  }\n+\n+  using namespace B __attribute__ ((strong)); // { dg-warning \"no longer supported\" \"\" }\n+}"}]}