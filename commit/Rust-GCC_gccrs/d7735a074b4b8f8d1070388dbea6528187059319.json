{"sha": "d7735a074b4b8f8d1070388dbea6528187059319", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc3MzVhMDc0YjRiOGY4ZDEwNzAzODhkYmVhNjUyODE4NzA1OTMxOQ==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1999-07-16T20:35:08Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-07-16T20:35:08Z"}, "message": "pa.c (compute_frame_size): Use UNITS_PER_WORD instead of hardwired value of 4.\n\n        * pa.c (compute_frame_size): Use UNITS_PER_WORD instead of hardwired\n        value of 4.  Allocate 8 bytes for each FP register save.\n        (hppa_expand_epilogue): Use UNITS_PER_WORD instead of harwarewired\n        value of 4.\n        (hppa_expand_prologue): Likewise.\n        * pa.h (PROMOTE_MODE): Likewise.\n        (HARD_REGNO_MODE_OK, FUNCTION_ARG_SIZE): Likewise.\n        (FUNCTION_ARG_BOUNDARY): Likewise.\n\nFrom-SVN: r28127", "tree": {"sha": "03d73223e5f14905f1aa32f43d6edd99a846282e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03d73223e5f14905f1aa32f43d6edd99a846282e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7735a074b4b8f8d1070388dbea6528187059319", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7735a074b4b8f8d1070388dbea6528187059319", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7735a074b4b8f8d1070388dbea6528187059319", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7735a074b4b8f8d1070388dbea6528187059319/comments", "author": null, "committer": null, "parents": [{"sha": "c8730d930d6839d96a828fcd0441a25128c0157e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8730d930d6839d96a828fcd0441a25128c0157e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8730d930d6839d96a828fcd0441a25128c0157e"}], "stats": {"total": 32, "additions": 22, "deletions": 10}, "files": [{"sha": "0e110c664ca65d485feefe169147e36ee1e6b321", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7735a074b4b8f8d1070388dbea6528187059319/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7735a074b4b8f8d1070388dbea6528187059319/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d7735a074b4b8f8d1070388dbea6528187059319", "patch": "@@ -1,5 +1,14 @@\n Fri Jul 16 13:48:09 1999  Jeffrey A Law  (law@cygnus.com)\n \n+\t* pa.c (compute_frame_size): Use UNITS_PER_WORD instead of hardwired\n+\tvalue of 4.  Allocate 8 bytes for each FP register save.\n+\t(hppa_expand_epilogue): Use UNITS_PER_WORD instead of harwarewired\n+\tvalue of 4.\n+\t(hppa_expand_prologue): Likewise.\n+\t* pa.h (PROMOTE_MODE): Likewise.\n+\t(HARD_REGNO_MODE_OK, FUNCTION_ARG_SIZE): Likewise.\n+\t(FUNCTION_ARG_BOUNDARY): Likewise.\n+\n \t* invoke.texi (HPPA Options): Remove -mspace/-mno-space.\n \n \t* pa.c (out_of_line_prologue_epilogue): Delete."}, {"sha": "a931857bda8bd5f6db1b630a616d65e57afb9190", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7735a074b4b8f8d1070388dbea6528187059319/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7735a074b4b8f8d1070388dbea6528187059319/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=d7735a074b4b8f8d1070388dbea6528187059319", "patch": "@@ -2559,7 +2559,7 @@ compute_frame_size (size, fregs_live)\n   for (i = 18; i >= 3; i--)\n     if (regs_ever_live[i])\n       {\n-\tfsize += 4;\n+\tfsize += UNITS_PER_WORD;\n \tbreak;\n       }\n \n@@ -2572,7 +2572,7 @@ compute_frame_size (size, fregs_live)\n \tif (fregs_live)\n \t  *fregs_live = 1;\n \n-\tfsize += 4;\n+\tfsize += 8;\n \tbreak;\n       }\n \n@@ -2807,7 +2807,7 @@ hppa_expand_prologue()\n \tif (regs_ever_live[i] && ! call_used_regs[i])\n \t  {\n \t    store_reg (i, offset, FRAME_POINTER_REGNUM);\n-\t    offset += 4;\n+\t    offset += UNITS_PER_WORD;\n \t    gr_saved++;\n \t  }\n       /* Account for %r3 which is saved in a special place.  */\n@@ -2830,7 +2830,7 @@ hppa_expand_prologue()\n \t      }\n \t    else\n \t      store_reg (i, offset, STACK_POINTER_REGNUM);\n-\t    offset += 4;\n+\t    offset += UNITS_PER_WORD;\n \t    gr_saved++;\n \t  }\n \n@@ -2958,7 +2958,7 @@ hppa_expand_epilogue ()\n \tif (regs_ever_live[i] && ! call_used_regs[i])\n \t  {\n \t    load_reg (i, offset, FRAME_POINTER_REGNUM);\n-\t    offset += 4;\n+\t    offset += UNITS_PER_WORD;\n \t  }\n     }\n   else\n@@ -2976,7 +2976,7 @@ hppa_expand_epilogue ()\n \t        merge_sp_adjust_with_load = i;\n \t      else\n \t        load_reg (i, offset, STACK_POINTER_REGNUM);\n-\t      offset += 4;\n+\t      offset += UNITS_PER_WORD;\n \t    }\n \t}\n     }"}, {"sha": "1f9a9179cd81482350670d28cdae5750a120ab0c", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7735a074b4b8f8d1070388dbea6528187059319/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7735a074b4b8f8d1070388dbea6528187059319/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=d7735a074b4b8f8d1070388dbea6528187059319", "patch": "@@ -319,7 +319,7 @@ int lhs_lshift_cint_operand ();\n \n #define PROMOTE_MODE(MODE,UNSIGNEDP,TYPE)  \\\n   if (GET_MODE_CLASS (MODE) == MODE_INT\t\\\n-      && GET_MODE_SIZE (MODE) < 4)  \t\\\n+      && GET_MODE_SIZE (MODE) < UNITS_PER_WORD)  \t\\\n     (MODE) = SImode;\n \n /* Define this if most significant bit is lowest numbered\n@@ -578,7 +578,7 @@ int lhs_lshift_cint_operand ();\n    : !TARGET_PA_11 && FP_REGNO_P (REGNO)\t\t\t\t\\\n      ? GET_MODE_SIZE (MODE) <= 4 || GET_MODE_CLASS (MODE) == MODE_FLOAT\t\\\n    /* Make wide modes be in aligned registers. */\t\t\t\\\n-   : GET_MODE_SIZE (MODE) <= 4 || ((REGNO) & 1) == 0)\n+   : GET_MODE_SIZE (MODE) <= UNITS_PER_WORD || ((REGNO) & 1) == 0)\n \n /* Value is 1 if it is a good idea to tie two pseudo registers\n    when one has mode MODE1 and one has mode MODE2.\n@@ -938,7 +938,9 @@ struct hppa_args {int words, nargs_prototype, indirect; };\n /* Figure out the size in words of the function argument. */\n \n #define FUNCTION_ARG_SIZE(MODE, TYPE)\t\\\n-  ((((MODE) != BLKmode ? GET_MODE_SIZE (MODE) : int_size_in_bytes (TYPE))+3)/4)\n+  ((((MODE) != BLKmode \\\n+     ? GET_MODE_SIZE (MODE) \\\n+     : int_size_in_bytes (TYPE)) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)\n \n /* Update the data in CUM to advance over an argument\n    of mode MODE and data type TYPE.\n@@ -1057,7 +1059,8 @@ struct hppa_args {int words, nargs_prototype, indirect; };\n \n #define FUNCTION_ARG_BOUNDARY(MODE, TYPE)\t\t\t\t\\\n   (((TYPE) != 0)\t\t\t\t\t\t\t\\\n-\t? (((int_size_in_bytes (TYPE)) + 3) / 4) * BITS_PER_WORD\t\\\n+\t? (((int_size_in_bytes (TYPE)) + UNITS_PER_WORD - 1)\t\t\\\n+\t   / UNITS_PER_WORD) * BITS_PER_WORD\t\t\t\t\\\n \t: ((GET_MODE_ALIGNMENT(MODE) <= PARM_BOUNDARY)\t\t\t\\\n \t\t? PARM_BOUNDARY\t\t\t\t\t\t\\\n \t\t: GET_MODE_ALIGNMENT(MODE)))"}]}