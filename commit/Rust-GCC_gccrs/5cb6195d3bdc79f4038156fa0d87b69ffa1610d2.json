{"sha": "5cb6195d3bdc79f4038156fa0d87b69ffa1610d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNiNjE5NWQzYmRjNzlmNDAzODE1NmZhMGQ4N2I2OWZmYTE2MTBkMg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1998-04-04T20:25:44Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1998-04-04T20:25:44Z"}, "message": "i386.c (asm_output_function_prefix, [...]): Use ASM_GENERATE_INTERNAL_LABEL properly.\n\n* i386.c (asm_output_function_prefix, load_pic_register):\nUse ASM_GENERATE_INTERNAL_LABEL properly.\n(output_pic_addr_const): Recognize %X to supress any PIC sym suffix.\n(print_operand): Ignore it.\n(load_pic_register): Use it for the got load call.\n* i386.md (prologue_set_got, prologue_get_pc): Likewise.\n(prologue_get_pc_and_set_got): Likewise.\n* i386.h: Update print_operand docs.\n\nFrom-SVN: r19000", "tree": {"sha": "c9c3d479c3c31e6428d8fd478a890d7a86e2f915", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9c3d479c3c31e6428d8fd478a890d7a86e2f915"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5cb6195d3bdc79f4038156fa0d87b69ffa1610d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cb6195d3bdc79f4038156fa0d87b69ffa1610d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cb6195d3bdc79f4038156fa0d87b69ffa1610d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cb6195d3bdc79f4038156fa0d87b69ffa1610d2/comments", "author": null, "committer": null, "parents": [{"sha": "ce1938523b2a93c11c46f6672c9b35f6b1d145d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce1938523b2a93c11c46f6672c9b35f6b1d145d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce1938523b2a93c11c46f6672c9b35f6b1d145d6"}], "stats": {"total": 42, "additions": 30, "deletions": 12}, "files": [{"sha": "e1798acf74d7b0494008928405bbab07ddee6a24", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cb6195d3bdc79f4038156fa0d87b69ffa1610d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cb6195d3bdc79f4038156fa0d87b69ffa1610d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5cb6195d3bdc79f4038156fa0d87b69ffa1610d2", "patch": "@@ -1,3 +1,14 @@\n+Sat Apr  4 20:16:46 1998  Richard Henderson  <rth@cygnus.com>\n+\n+\t* i386.c (asm_output_function_prefix, load_pic_register):\n+\tUse ASM_GENERATE_INTERNAL_LABEL properly.\n+\t(output_pic_addr_const): Recognize %X to supress any PIC sym suffix.\n+\t(print_operand): Ignore it.\n+\t(load_pic_register): Use it for the got load call.\n+\t* i386.md (prologue_set_got, prologue_get_pc): Likewise.\n+\t(prologue_get_pc_and_set_got): Likewise.\n+\t* i386.h: Update print_operand docs.\n+\n Sat Apr  4 19:08:37 1998  Richard Henderson  <rth@cygnus.com>\n \n \t* i386.md (ffssi, ffshi): Rewrite as define_expands."}, {"sha": "f4743faaf819d0c513a34f0bb110b3760623d2be", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cb6195d3bdc79f4038156fa0d87b69ffa1610d2/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cb6195d3bdc79f4038156fa0d87b69ffa1610d2/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=5cb6195d3bdc79f4038156fa0d87b69ffa1610d2", "patch": "@@ -1911,7 +1911,7 @@ asm_output_function_prefix (file, name)\n       if (pic_label_rtx == 0)\n \t{\n \t  pic_label_rtx = gen_label_rtx ();\n-\t  sprintf (pic_label_name, \"LPR%d\", pic_label_no++);\n+\t  ASM_GENERATE_INTERNAL_LABEL (pic_label_name, \"LPR\", pic_label_no++);\n \t  LABEL_NAME (pic_label_rtx) = pic_label_name;\n \t}\n \n@@ -1966,7 +1966,7 @@ load_pic_register (do_rtl)\n       if (pic_label_rtx == 0)\n \t{\n \t  pic_label_rtx = gen_label_rtx ();\n-\t  sprintf (pic_label_name, \"LPR%d\", pic_label_no++);\n+\t  ASM_GENERATE_INTERNAL_LABEL (pic_label_name, \"LPR\", pic_label_no++);\n \t  LABEL_NAME (pic_label_rtx) = pic_label_name;\n \t}\n \n@@ -1984,7 +1984,7 @@ load_pic_register (do_rtl)\n \t}\n       else\n \t{\n-\t  output_asm_insn (AS1 (call,%P1), xops);\n+\t  output_asm_insn (AS1 (call,%X1), xops);\n \t  output_asm_insn (\"addl $_GLOBAL_OFFSET_TABLE_,%0\", xops);\n \t  pic_label_rtx = 0;\n \t}\n@@ -2979,7 +2979,9 @@ output_pic_addr_const (file, x, code)\n \t  assemble_name (asm_out_file, buf);\n \t}\n \n-      if (GET_CODE (x) == SYMBOL_REF && CONSTANT_POOL_ADDRESS_P (x))\n+      if (code == 'X')\n+\t; /* No suffix, dammit. */\n+      else if (GET_CODE (x) == SYMBOL_REF && CONSTANT_POOL_ADDRESS_P (x))\n \tfprintf (file, \"@GOTOFF(%%ebx)\");\n       else if (code == 'P')\n \tfprintf (file, \"@PLT\");\n@@ -3272,6 +3274,7 @@ print_operand (file, x, code)\n \tcase 'h':\n \tcase 'y':\n \tcase 'P':\n+\tcase 'X':\n \t  break;\n \n \tcase 'J':\n@@ -3550,7 +3553,7 @@ print_operand_address (file, addr)\n \f\n /* Set the cc_status for the results of an insn whose pattern is EXP.\n    On the 80386, we assume that only test and compare insns, as well\n-   as SI, HI, & DI mode ADD, SUB, NEG, AND, IOR, XOR, ASHIFT,\n+   as SI, HI, & DI mode ADD, SUB, NEG, AND, IOR, XOR, BSF, ASHIFT,\n    ASHIFTRT, and LSHIFTRT instructions set the condition codes usefully.\n    Also, we assume that jumps, moves and sCOND don't affect the condition\n    codes.  All else clobbers the condition codes, by assumption."}, {"sha": "8775a5ba786870d00e85faf08fb88d3f07884d8c", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cb6195d3bdc79f4038156fa0d87b69ffa1610d2/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cb6195d3bdc79f4038156fa0d87b69ffa1610d2/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=5cb6195d3bdc79f4038156fa0d87b69ffa1610d2", "patch": "@@ -2509,9 +2509,13 @@ do { long l;\t\t\t\t\t\t\\\n    R -- print the prefix for register names.\n    z -- print the opcode suffix for the size of the current operand.\n    * -- print a star (in certain assembler syntax)\n-   w -- print the operand as if it's a \"word\" (HImode) even if it isn't.\n-   b -- print the operand as if it's a byte (QImode) even if it isn't.\n-   c -- don't print special prefixes before constant operands.  */\n+   P -- if PIC, print an @PLT suffix.\n+   X -- don't print any sort of PIC '@' suffix for a symbol.\n+   J -- print jump insn for arithmetic_comparison_operator.\n+   s -- ??? something to do with double shifts.  not actually used, afaik.\n+   C -- print a conditional move suffix corresponding to the op code.\n+   c -- likewise, but reverse the condition.\n+   F,f -- likewise, but for floating-point.  */\n \n #define PRINT_OPERAND_PUNCT_VALID_P(CODE)\t\t\t\t\\\n   ((CODE) == '*')"}, {"sha": "5bdb141fbba28189ec9c34c82f475c41a3e1c5da", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cb6195d3bdc79f4038156fa0d87b69ffa1610d2/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cb6195d3bdc79f4038156fa0d87b69ffa1610d2/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=5cb6195d3bdc79f4038156fa0d87b69ffa1610d2", "patch": "@@ -6657,7 +6657,7 @@ byte_xor_operation:\n     }\n   else  \n     {\n-      sprintf (buffer, \\\"addl %s+[.-%%P2],%%0\\\", XSTR (operands[1], 0));\n+      sprintf (buffer, \\\"addl %s+[.-%%X2],%%0\\\", XSTR (operands[1], 0));\n       output_asm_insn (buffer, operands);\n     }    \n   RET;\n@@ -6671,7 +6671,7 @@ byte_xor_operation:\n {\n   char buffer[64];\n \n-  output_asm_insn (AS1 (call,%P1), operands);\n+  output_asm_insn (AS1 (call,%X1), operands);\n   if (! TARGET_DEEP_BRANCH_PREDICTION) \n     {\n       ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\", CODE_LABEL_NUMBER (operands[1]));\n@@ -6685,11 +6685,11 @@ byte_xor_operation:\n   \"*\n {\n   operands[1] = gen_label_rtx ();\n-  output_asm_insn (AS1 (call,%P1), operands);\n+  output_asm_insn (AS1 (call,%X1), operands);\n   ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\",\n \t\t\t     CODE_LABEL_NUMBER (operands[1]));\n   output_asm_insn (AS1 (pop%L0,%0), operands);\n-  output_asm_insn (\\\"addl $_GLOBAL_OFFSET_TABLE_+[.-%P1],%0\\\", operands);\n+  output_asm_insn (\\\"addl $_GLOBAL_OFFSET_TABLE_+[.-%X1],%0\\\", operands);\n   RET;\n }\")\n "}]}