{"sha": "b966d3a966a20aaa3de54d6a7ea78703ffb22a8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk2NmQzYTk2NmEyMGFhYTNkZTU0ZDZhN2VhNzg3MDNmZmIyMmE4ZA==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2011-10-06T15:59:53Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2011-10-06T15:59:53Z"}, "message": "function.c (thread_prologue_and_epilogue_insns): Build a vector of unconverted simple return blocks rather than trying to...\n\n\t* function.c (thread_prologue_and_epilogue_insns): Build a vector\n\tof unconverted simple return blocks rather than trying to\n\trecompute them later based on bb_flags bitmap tests.\n\nFrom-SVN: r179619", "tree": {"sha": "1f632fb2106986c8874406dc3cfd87b856ebf378", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f632fb2106986c8874406dc3cfd87b856ebf378"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b966d3a966a20aaa3de54d6a7ea78703ffb22a8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b966d3a966a20aaa3de54d6a7ea78703ffb22a8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b966d3a966a20aaa3de54d6a7ea78703ffb22a8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b966d3a966a20aaa3de54d6a7ea78703ffb22a8d/comments", "author": null, "committer": null, "parents": [{"sha": "07f5041085113426037737a5bc3590218f17be7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07f5041085113426037737a5bc3590218f17be7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07f5041085113426037737a5bc3590218f17be7e"}], "stats": {"total": 34, "additions": 18, "deletions": 16}, "files": [{"sha": "ae8c6c94e6eaaae3900c7afe58b8f543dc8eee04", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b966d3a966a20aaa3de54d6a7ea78703ffb22a8d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b966d3a966a20aaa3de54d6a7ea78703ffb22a8d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b966d3a966a20aaa3de54d6a7ea78703ffb22a8d", "patch": "@@ -1,3 +1,9 @@\n+2011-10-06  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* function.c (thread_prologue_and_epilogue_insns): Build a vector\n+\tof unconverted simple return blocks rather than trying to\n+\trecompute them later based on bb_flags bitmap tests.\n+\n 2011-10-06  Michael Matz  <matz@suse.de>\n \n \t* tree-flow.h (get_var_ann): Don't declare."}, {"sha": "c535ff04d10e0d517664b3dbfa40bf62d1c9b229", "filename": "gcc/function.c", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b966d3a966a20aaa3de54d6a7ea78703ffb22a8d/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b966d3a966a20aaa3de54d6a7ea78703ffb22a8d/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=b966d3a966a20aaa3de54d6a7ea78703ffb22a8d", "patch": "@@ -5455,7 +5455,7 @@ thread_prologue_and_epilogue_insns (void)\n   basic_block last_bb;\n   bool last_bb_active ATTRIBUTE_UNUSED;\n #ifdef HAVE_simple_return\n-  bool unconverted_simple_returns = false;\n+  VEC (basic_block, heap) *unconverted_simple_returns = NULL;\n   basic_block simple_return_block_hot = NULL;\n   basic_block simple_return_block_cold = NULL;\n   bool nonempty_prologue;\n@@ -5876,7 +5876,8 @@ thread_prologue_and_epilogue_insns (void)\n \t\t{\n #ifdef HAVE_simple_return\n \t\t  if (simple_p)\n-\t\t    unconverted_simple_returns = true;\n+\t\t    VEC_safe_push (basic_block, heap,\n+\t\t\t\t   unconverted_simple_returns, bb);\n #endif\n \t\t  continue;\n \t\t}\n@@ -5894,7 +5895,8 @@ thread_prologue_and_epilogue_insns (void)\n \t    {\n #ifdef HAVE_simple_return\n \t      if (simple_p)\n-\t\tunconverted_simple_returns = true;\n+\t\tVEC_safe_push (basic_block, heap,\n+\t\t\t       unconverted_simple_returns, bb);\n #endif\n \t      continue;\n \t    }\n@@ -6042,10 +6044,11 @@ thread_prologue_and_epilogue_insns (void)\n      convert to conditional simple_returns, but couldn't for some\n      reason, create a block to hold a simple_return insn and redirect\n      those remaining edges.  */\n-  if (unconverted_simple_returns)\n+  if (!VEC_empty (basic_block, unconverted_simple_returns))\n     {\n-      edge_iterator ei2;\n       basic_block exit_pred = EXIT_BLOCK_PTR->prev_bb;\n+      basic_block src_bb;\n+      int i;\n \n       gcc_assert (entry_edge != orig_entry_edge);\n \n@@ -6062,19 +6065,12 @@ thread_prologue_and_epilogue_insns (void)\n \t    simple_return_block_cold = e->dest;\n \t}\n \n-    restart_scan:\n-      for (ei2 = ei_start (last_bb->preds); (e = ei_safe_edge (ei2)); )\n+      FOR_EACH_VEC_ELT (basic_block, unconverted_simple_returns, i, src_bb)\n \t{\n-\t  basic_block bb = e->src;\n+\t  edge e = find_edge (src_bb, last_bb);\n \t  basic_block *pdest_bb;\n \n-\t  if (bb == ENTRY_BLOCK_PTR\n-\t      || bitmap_bit_p (&bb_flags, bb->index))\n-\t    {\n-\t      ei_next (&ei2);\n-\t      continue;\n-\t    }\n-\t  if (BB_PARTITION (e->src) == BB_HOT_PARTITION)\n+\t  if (BB_PARTITION (src_bb) == BB_HOT_PARTITION)\n \t    pdest_bb = &simple_return_block_hot;\n \t  else\n \t    pdest_bb = &simple_return_block_cold;\n@@ -6094,8 +6090,8 @@ thread_prologue_and_epilogue_insns (void)\n \t      make_edge (bb, EXIT_BLOCK_PTR, 0);\n \t    }\n \t  redirect_edge_and_branch_force (e, *pdest_bb);\n-\t  goto restart_scan;\n \t}\n+      VEC_free (basic_block, heap, unconverted_simple_returns);\n     }\n #endif\n "}]}