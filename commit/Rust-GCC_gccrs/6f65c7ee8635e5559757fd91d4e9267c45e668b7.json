{"sha": "6f65c7ee8635e5559757fd91d4e9267c45e668b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY2NWM3ZWU4NjM1ZTU1NTk3NTdmZDkxZDRlOTI2N2M0NWU2NjhiNw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-07-08T08:15:05Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-08T08:15:05Z"}, "message": "[Ada] Small overhaul in Repinfo unit\n\nThis creates a List_Type_Info procedure to deal with type entities other\nthan arrays and records at top level and a List_Common_Type_Info\nprocedure to handle the common part between them.  No functional\nchanges.\n\n2019-07-08  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* repinfo.adb (List_Common_Type_Info): New procedure extracted\n\tfrom...\n\t(List_Type_Info): ...here.  Call it for the common information,\n\tstart with a blank line and output the linker section at the\n\tend, if any.\n\t(List_Mechanisms): Rename to...\n\t(List_Subprogram_Info): ...this.\n\t(List_Array_Info): Call List_Common_Type_Info.\n\t(List_Entities): Adjust to above change and renaming.\n\t(List_Record_Info): Call List_Common_Type_Info.\n\nFrom-SVN: r273226", "tree": {"sha": "cf21d170c26401b5f50251440713f4113feb9759", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf21d170c26401b5f50251440713f4113feb9759"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f65c7ee8635e5559757fd91d4e9267c45e668b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f65c7ee8635e5559757fd91d4e9267c45e668b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f65c7ee8635e5559757fd91d4e9267c45e668b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f65c7ee8635e5559757fd91d4e9267c45e668b7/comments", "author": null, "committer": null, "parents": [{"sha": "55d4e2ba076049f88c24011f2f63aa226e6c87a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55d4e2ba076049f88c24011f2f63aa226e6c87a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55d4e2ba076049f88c24011f2f63aa226e6c87a0"}], "stats": {"total": 522, "additions": 275, "deletions": 247}, "files": [{"sha": "09defe0cc67a82d736892cc46db3b4791518d141", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f65c7ee8635e5559757fd91d4e9267c45e668b7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f65c7ee8635e5559757fd91d4e9267c45e668b7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6f65c7ee8635e5559757fd91d4e9267c45e668b7", "patch": "@@ -1,3 +1,16 @@\n+2019-07-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* repinfo.adb (List_Common_Type_Info): New procedure extracted\n+\tfrom...\n+\t(List_Type_Info): ...here.  Call it for the common information,\n+\tstart with a blank line and output the linker section at the\n+\tend, if any.\n+\t(List_Mechanisms): Rename to...\n+\t(List_Subprogram_Info): ...this.\n+\t(List_Array_Info): Call List_Common_Type_Info.\n+\t(List_Entities): Adjust to above change and renaming.\n+\t(List_Record_Info): Call List_Common_Type_Info.\n+\n 2019-07-08  Dmitriy Anisimkov  <anisimko@adacore.com>\n \n \t* libgnat/g-sercom.ads"}, {"sha": "ff147ac6e98205bb84aac97ef36243f6082b7e22", "filename": "gcc/ada/repinfo.adb", "status": "modified", "additions": 262, "deletions": 247, "changes": 509, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f65c7ee8635e5559757fd91d4e9267c45e668b7/gcc%2Fada%2Frepinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f65c7ee8635e5559757fd91d4e9267c45e668b7/gcc%2Fada%2Frepinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo.adb?ref=6f65c7ee8635e5559757fd91d4e9267c45e668b7", "patch": "@@ -172,17 +172,16 @@ package body Repinfo is\n    procedure List_Array_Info (Ent : Entity_Id; Bytes_Big_Endian : Boolean);\n    --  List representation info for array type Ent\n \n+   procedure List_Common_Type_Info (Ent : Entity_Id);\n+   --  List common type info (name, size, alignment) for type Ent\n+\n    procedure List_Linker_Section (Ent : Entity_Id);\n    --  List linker section for Ent (caller has checked that Ent is an entity\n    --  for which the Linker_Section_Pragma field is defined).\n \n    procedure List_Location (Ent : Entity_Id);\n    --  List location information for Ent\n \n-   procedure List_Mechanisms (Ent : Entity_Id);\n-   --  List mechanism information for parameters of Ent, which is subprogram,\n-   --  subprogram type, or an entry or entry family.\n-\n    procedure List_Object_Info (Ent : Entity_Id);\n    --  List representation info for object Ent\n \n@@ -195,6 +194,9 @@ package body Repinfo is\n    --  List scalar storage order information for record or array type Ent.\n    --  Also includes bit order information for record types, if necessary.\n \n+   procedure List_Subprogram_Info (Ent : Entity_Id);\n+   --  List subprogram info for subprogram Ent\n+\n    procedure List_Type_Info (Ent : Entity_Id);\n    --  List type info for type Ent\n \n@@ -346,7 +348,7 @@ package body Repinfo is\n          Write_Line (\"{\");\n       end if;\n \n-      List_Type_Info (Ent);\n+      List_Common_Type_Info (Ent);\n \n       if List_Representation_Info_To_JSON then\n          Write_Line (\",\");\n@@ -370,6 +372,81 @@ package body Repinfo is\n       end if;\n    end List_Array_Info;\n \n+   ---------------------------\n+   -- List_Common_Type_Info --\n+   ---------------------------\n+\n+   procedure List_Common_Type_Info (Ent : Entity_Id) is\n+   begin\n+      if List_Representation_Info_To_JSON then\n+         Write_Str (\"  \"\"name\"\": \"\"\");\n+         List_Name (Ent);\n+         Write_Line (\"\"\",\");\n+         List_Location (Ent);\n+      end if;\n+\n+      --  Do not list size info for unconstrained arrays, not meaningful\n+\n+      if Is_Array_Type (Ent) and then not Is_Constrained (Ent) then\n+         null;\n+\n+      else\n+         --  If Esize and RM_Size are the same, list as Size. This is a common\n+         --  case, which we may as well list in simple form.\n+\n+         if Esize (Ent) = RM_Size (Ent) then\n+            if List_Representation_Info_To_JSON then\n+               Write_Str (\"  \"\"Size\"\": \");\n+               Write_Val (Esize (Ent));\n+               Write_Line (\",\");\n+            else\n+               Write_Str (\"for \");\n+               List_Name (Ent);\n+               Write_Str (\"'Size use \");\n+               Write_Val (Esize (Ent));\n+               Write_Line (\";\");\n+            end if;\n+\n+         --  Otherwise list size values separately\n+\n+         else\n+            if List_Representation_Info_To_JSON then\n+               Write_Str (\"  \"\"Object_Size\"\": \");\n+               Write_Val (Esize (Ent));\n+               Write_Line (\",\");\n+\n+               Write_Str (\"  \"\"Value_Size\"\": \");\n+               Write_Val (RM_Size (Ent));\n+               Write_Line (\",\");\n+\n+            else\n+               Write_Str (\"for \");\n+               List_Name (Ent);\n+               Write_Str (\"'Object_Size use \");\n+               Write_Val (Esize (Ent));\n+               Write_Line (\";\");\n+\n+               Write_Str (\"for \");\n+               List_Name (Ent);\n+               Write_Str (\"'Value_Size use \");\n+               Write_Val (RM_Size (Ent));\n+               Write_Line (\";\");\n+            end if;\n+         end if;\n+      end if;\n+\n+      if List_Representation_Info_To_JSON then\n+         Write_Str (\"  \"\"Alignment\"\": \");\n+         Write_Val (Alignment (Ent));\n+      else\n+         Write_Str (\"for \");\n+         List_Name (Ent);\n+         Write_Str (\"'Alignment use \");\n+         Write_Val (Alignment (Ent));\n+         Write_Line (\";\");\n+      end if;\n+   end List_Common_Type_Info;\n+\n    -------------------\n    -- List_Entities --\n    -------------------\n@@ -428,7 +505,7 @@ package body Repinfo is\n            and then not In_Subprogram\n          then\n             Need_Blank_Line := True;\n-            List_Mechanisms (Ent);\n+            List_Subprogram_Info (Ent);\n          end if;\n \n          E := First_Entity (Ent);\n@@ -457,7 +534,7 @@ package body Repinfo is\n             then\n                if Is_Subprogram (E) then\n                   if List_Representation_Info_Mechanisms then\n-                     List_Mechanisms (E);\n+                     List_Subprogram_Info (E);\n                   end if;\n \n                   --  Recurse into entities local to subprogram\n@@ -472,7 +549,7 @@ package body Repinfo is\n                                   E_Subprogram_Type)\n                then\n                   if List_Representation_Info_Mechanisms then\n-                     List_Mechanisms (E);\n+                     List_Subprogram_Info (E);\n                   end if;\n \n                elsif Is_Record_Type (E) then\n@@ -496,16 +573,7 @@ package body Repinfo is\n \n                elsif Is_Type (E) then\n                   if List_Representation_Info >= 2 then\n-                     Blank_Line;\n-                     if List_Representation_Info_To_JSON then\n-                        Write_Line (\"{\");\n-                     end if;\n                      List_Type_Info (E);\n-                     List_Linker_Section (E);\n-                     if List_Representation_Info_To_JSON then\n-                        Write_Eol;\n-                        Write_Line (\"}\");\n-                     end if;\n                   end if;\n \n                elsif Ekind_In (E, E_Variable, E_Constant) then\n@@ -842,188 +910,6 @@ package body Repinfo is\n       Write_Line (\"\"\",\");\n    end List_Location;\n \n-   ---------------------\n-   -- List_Mechanisms --\n-   ---------------------\n-\n-   procedure List_Mechanisms (Ent : Entity_Id) is\n-      First : Boolean := True;\n-      Plen  : Natural;\n-      Form  : Entity_Id;\n-\n-   begin\n-      Blank_Line;\n-\n-      if List_Representation_Info_To_JSON then\n-         Write_Line (\"{\");\n-         Write_Str (\"  \"\"name\"\": \"\"\");\n-         List_Name (Ent);\n-         Write_Line (\"\"\",\");\n-         List_Location (Ent);\n-\n-         Write_Str (\"  \"\"Convention\"\": \"\"\");\n-      else\n-         case Ekind (Ent) is\n-            when E_Function =>\n-               Write_Str (\"function \");\n-\n-            when E_Operator =>\n-               Write_Str (\"operator \");\n-\n-            when E_Procedure =>\n-               Write_Str (\"procedure \");\n-\n-            when E_Subprogram_Type =>\n-               Write_Str (\"type \");\n-\n-            when E_Entry\n-               | E_Entry_Family\n-            =>\n-               Write_Str (\"entry \");\n-\n-            when others =>\n-               raise Program_Error;\n-         end case;\n-\n-         List_Name (Ent);\n-         Write_Str (\" declared at \");\n-         Write_Location (Sloc (Ent));\n-         Write_Eol;\n-\n-         Write_Str (\"convention : \");\n-      end if;\n-\n-      case Convention (Ent) is\n-         when Convention_Ada =>\n-            Write_Str (\"Ada\");\n-\n-         when Convention_Ada_Pass_By_Copy =>\n-            Write_Str (\"Ada_Pass_By_Copy\");\n-\n-         when Convention_Ada_Pass_By_Reference =>\n-            Write_Str (\"Ada_Pass_By_Reference\");\n-\n-         when Convention_Intrinsic =>\n-            Write_Str (\"Intrinsic\");\n-\n-         when Convention_Entry =>\n-            Write_Str (\"Entry\");\n-\n-         when Convention_Protected =>\n-            Write_Str (\"Protected\");\n-\n-         when Convention_Assembler =>\n-            Write_Str (\"Assembler\");\n-\n-         when Convention_C =>\n-            Write_Str (\"C\");\n-\n-         when Convention_COBOL =>\n-            Write_Str (\"COBOL\");\n-\n-         when Convention_CPP =>\n-            Write_Str (\"C++\");\n-\n-         when Convention_Fortran =>\n-            Write_Str (\"Fortran\");\n-\n-         when Convention_Stdcall =>\n-            Write_Str (\"Stdcall\");\n-\n-         when Convention_Stubbed =>\n-            Write_Str (\"Stubbed\");\n-      end case;\n-\n-      if List_Representation_Info_To_JSON then\n-         Write_Line (\"\"\",\");\n-         Write_Str (\"  \"\"formal\"\": [\");\n-      else\n-         Write_Eol;\n-      end if;\n-\n-      --  Find max length of formal name\n-\n-      Plen := 0;\n-      Form := First_Formal (Ent);\n-      while Present (Form) loop\n-         Get_Unqualified_Decoded_Name_String (Chars (Form));\n-\n-         if Name_Len > Plen then\n-            Plen := Name_Len;\n-         end if;\n-\n-         Next_Formal (Form);\n-      end loop;\n-\n-      --  Output formals and mechanisms\n-\n-      Form := First_Formal (Ent);\n-      while Present (Form) loop\n-         Get_Unqualified_Decoded_Name_String (Chars (Form));\n-         Set_Casing (Unit_Casing);\n-\n-         if List_Representation_Info_To_JSON then\n-            if First then\n-               Write_Eol;\n-               First := False;\n-            else\n-               Write_Line (\",\");\n-            end if;\n-\n-            Write_Line (\"    {\");\n-            Write_Str (\"      \"\"name\"\": \"\"\");\n-            Write_Str (Name_Buffer (1 .. Name_Len));\n-            Write_Line (\"\"\",\");\n-\n-            Write_Str (\"      \"\"mechanism\"\": \"\"\");\n-            Write_Mechanism (Mechanism (Form));\n-            Write_Line (\"\"\"\");\n-            Write_Str (\"    }\");\n-         else\n-            while Name_Len <= Plen loop\n-               Name_Len := Name_Len + 1;\n-               Name_Buffer (Name_Len) := ' ';\n-            end loop;\n-\n-            Write_Str (\"   \");\n-            Write_Str (Name_Buffer (1 .. Plen + 1));\n-            Write_Str (\": passed by \");\n-\n-            Write_Mechanism (Mechanism (Form));\n-            Write_Eol;\n-         end if;\n-\n-         Next_Formal (Form);\n-      end loop;\n-\n-      if List_Representation_Info_To_JSON then\n-         Write_Eol;\n-         Write_Str (\"  ]\");\n-      end if;\n-\n-      if Ekind (Ent) = E_Function then\n-         if List_Representation_Info_To_JSON then\n-            Write_Line (\",\");\n-            Write_Str (\"  \"\"mechanism\"\": \"\"\");\n-            Write_Mechanism (Mechanism (Ent));\n-            Write_Str (\"\"\"\");\n-         else\n-            Write_Str (\"returns by \");\n-            Write_Mechanism (Mechanism (Ent));\n-            Write_Eol;\n-         end if;\n-      end if;\n-\n-      if not Is_Entry (Ent) then\n-         List_Linker_Section (Ent);\n-      end if;\n-\n-      if List_Representation_Info_To_JSON then\n-         Write_Eol;\n-         Write_Line (\"}\");\n-      end if;\n-   end List_Mechanisms;\n-\n    ---------------\n    -- List_Name --\n    ---------------\n@@ -1741,7 +1627,7 @@ package body Repinfo is\n          Write_Line (\"{\");\n       end if;\n \n-      List_Type_Info (Ent);\n+      List_Common_Type_Info (Ent);\n \n       --  First find out max line length and max starting position\n       --  length, for the purpose of lining things up nicely.\n@@ -1925,79 +1811,201 @@ package body Repinfo is\n       end if;\n    end List_Scalar_Storage_Order;\n \n-   --------------------\n-   -- List_Type_Info --\n-   --------------------\n+   --------------------------\n+   -- List_Subprogram_Info --\n+   --------------------------\n+\n+   procedure List_Subprogram_Info (Ent : Entity_Id) is\n+      First : Boolean := True;\n+      Plen  : Natural;\n+      Form  : Entity_Id;\n \n-   procedure List_Type_Info (Ent : Entity_Id) is\n    begin\n+      Blank_Line;\n+\n       if List_Representation_Info_To_JSON then\n+         Write_Line (\"{\");\n          Write_Str (\"  \"\"name\"\": \"\"\");\n          List_Name (Ent);\n          Write_Line (\"\"\",\");\n          List_Location (Ent);\n+\n+         Write_Str (\"  \"\"Convention\"\": \"\"\");\n+      else\n+         case Ekind (Ent) is\n+            when E_Function =>\n+               Write_Str (\"function \");\n+\n+            when E_Operator =>\n+               Write_Str (\"operator \");\n+\n+            when E_Procedure =>\n+               Write_Str (\"procedure \");\n+\n+            when E_Subprogram_Type =>\n+               Write_Str (\"type \");\n+\n+            when E_Entry\n+               | E_Entry_Family\n+            =>\n+               Write_Str (\"entry \");\n+\n+            when others =>\n+               raise Program_Error;\n+         end case;\n+\n+         List_Name (Ent);\n+         Write_Str (\" declared at \");\n+         Write_Location (Sloc (Ent));\n+         Write_Eol;\n+\n+         Write_Str (\"convention : \");\n       end if;\n \n-      --  Do not list size info for unconstrained arrays, not meaningful\n+      case Convention (Ent) is\n+         when Convention_Ada =>\n+            Write_Str (\"Ada\");\n \n-      if Is_Array_Type (Ent) and then not Is_Constrained (Ent) then\n-         null;\n+         when Convention_Ada_Pass_By_Copy =>\n+            Write_Str (\"Ada_Pass_By_Copy\");\n+\n+         when Convention_Ada_Pass_By_Reference =>\n+            Write_Str (\"Ada_Pass_By_Reference\");\n+\n+         when Convention_Intrinsic =>\n+            Write_Str (\"Intrinsic\");\n+\n+         when Convention_Entry =>\n+            Write_Str (\"Entry\");\n+\n+         when Convention_Protected =>\n+            Write_Str (\"Protected\");\n \n+         when Convention_Assembler =>\n+            Write_Str (\"Assembler\");\n+\n+         when Convention_C =>\n+            Write_Str (\"C\");\n+\n+         when Convention_COBOL =>\n+            Write_Str (\"COBOL\");\n+\n+         when Convention_CPP =>\n+            Write_Str (\"C++\");\n+\n+         when Convention_Fortran =>\n+            Write_Str (\"Fortran\");\n+\n+         when Convention_Stdcall =>\n+            Write_Str (\"Stdcall\");\n+\n+         when Convention_Stubbed =>\n+            Write_Str (\"Stubbed\");\n+      end case;\n+\n+      if List_Representation_Info_To_JSON then\n+         Write_Line (\"\"\",\");\n+         Write_Str (\"  \"\"formal\"\": [\");\n       else\n-         --  If Esize and RM_Size are the same, list as Size. This is a common\n-         --  case, which we may as well list in simple form.\n+         Write_Eol;\n+      end if;\n \n-         if Esize (Ent) = RM_Size (Ent) then\n-            if List_Representation_Info_To_JSON then\n-               Write_Str (\"  \"\"Size\"\": \");\n-               Write_Val (Esize (Ent));\n-               Write_Line (\",\");\n+      --  Find max length of formal name\n+\n+      Plen := 0;\n+      Form := First_Formal (Ent);\n+      while Present (Form) loop\n+         Get_Unqualified_Decoded_Name_String (Chars (Form));\n+\n+         if Name_Len > Plen then\n+            Plen := Name_Len;\n+         end if;\n+\n+         Next_Formal (Form);\n+      end loop;\n+\n+      --  Output formals and mechanisms\n+\n+      Form := First_Formal (Ent);\n+      while Present (Form) loop\n+         Get_Unqualified_Decoded_Name_String (Chars (Form));\n+         Set_Casing (Unit_Casing);\n+\n+         if List_Representation_Info_To_JSON then\n+            if First then\n+               Write_Eol;\n+               First := False;\n             else\n-               Write_Str (\"for \");\n-               List_Name (Ent);\n-               Write_Str (\"'Size use \");\n-               Write_Val (Esize (Ent));\n-               Write_Line (\";\");\n+               Write_Line (\",\");\n             end if;\n \n-         --  Otherwise list size values separately\n+            Write_Line (\"    {\");\n+            Write_Str (\"      \"\"name\"\": \"\"\");\n+            Write_Str (Name_Buffer (1 .. Name_Len));\n+            Write_Line (\"\"\",\");\n \n+            Write_Str (\"      \"\"mechanism\"\": \"\"\");\n+            Write_Mechanism (Mechanism (Form));\n+            Write_Line (\"\"\"\");\n+            Write_Str (\"    }\");\n          else\n-            if List_Representation_Info_To_JSON then\n-               Write_Str (\"  \"\"Object_Size\"\": \");\n-               Write_Val (Esize (Ent));\n-               Write_Line (\",\");\n+            while Name_Len <= Plen loop\n+               Name_Len := Name_Len + 1;\n+               Name_Buffer (Name_Len) := ' ';\n+            end loop;\n \n-               Write_Str (\"  \"\"Value_Size\"\": \");\n-               Write_Val (RM_Size (Ent));\n-               Write_Line (\",\");\n+            Write_Str (\"   \");\n+            Write_Str (Name_Buffer (1 .. Plen + 1));\n+            Write_Str (\": passed by \");\n \n-            else\n-               Write_Str (\"for \");\n-               List_Name (Ent);\n-               Write_Str (\"'Object_Size use \");\n-               Write_Val (Esize (Ent));\n-               Write_Line (\";\");\n+            Write_Mechanism (Mechanism (Form));\n+            Write_Eol;\n+         end if;\n \n-               Write_Str (\"for \");\n-               List_Name (Ent);\n-               Write_Str (\"'Value_Size use \");\n-               Write_Val (RM_Size (Ent));\n-               Write_Line (\";\");\n-            end if;\n+         Next_Formal (Form);\n+      end loop;\n+\n+      if List_Representation_Info_To_JSON then\n+         Write_Eol;\n+         Write_Str (\"  ]\");\n+      end if;\n+\n+      if Ekind (Ent) = E_Function then\n+         if List_Representation_Info_To_JSON then\n+            Write_Line (\",\");\n+            Write_Str (\"  \"\"mechanism\"\": \"\"\");\n+            Write_Mechanism (Mechanism (Ent));\n+            Write_Str (\"\"\"\");\n+         else\n+            Write_Str (\"returns by \");\n+            Write_Mechanism (Mechanism (Ent));\n+            Write_Eol;\n          end if;\n       end if;\n \n+      if not Is_Entry (Ent) then\n+         List_Linker_Section (Ent);\n+      end if;\n+\n       if List_Representation_Info_To_JSON then\n-         Write_Str (\"  \"\"Alignment\"\": \");\n-         Write_Val (Alignment (Ent));\n-      else\n-         Write_Str (\"for \");\n-         List_Name (Ent);\n-         Write_Str (\"'Alignment use \");\n-         Write_Val (Alignment (Ent));\n-         Write_Line (\";\");\n+         Write_Eol;\n+         Write_Line (\"}\");\n       end if;\n+   end List_Subprogram_Info;\n+\n+   --------------------\n+   -- List_Type_Info --\n+   --------------------\n+\n+   procedure List_Type_Info (Ent : Entity_Id) is\n+   begin\n+      Blank_Line;\n+\n+      if List_Representation_Info_To_JSON then\n+         Write_Line (\"{\");\n+      end if;\n+\n+      List_Common_Type_Info (Ent);\n \n       --  Special stuff for fixed-point\n \n@@ -2046,6 +2054,13 @@ package body Repinfo is\n             end if;\n          end;\n       end if;\n+\n+      List_Linker_Section (Ent);\n+\n+      if List_Representation_Info_To_JSON then\n+         Write_Eol;\n+         Write_Line (\"}\");\n+      end if;\n    end List_Type_Info;\n \n    ----------------------"}]}