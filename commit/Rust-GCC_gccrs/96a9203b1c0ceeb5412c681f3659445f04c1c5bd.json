{"sha": "96a9203b1c0ceeb5412c681f3659445f04c1c5bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZhOTIwM2IxYzBjZWViNTQxMmM2ODFmMzY1OTQ0NWYwNGMxYzViZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2009-04-09T23:37:08Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-04-09T23:37:08Z"}, "message": "PR libstdc++/39629 (final bits)\n\n2009-04-09  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/39629 (final bits)\n\t* include/bits/random.h (subtract_with_carry_engine<>::_S_modulus):\n\tRemove, consistently use __detail::_Shift<_UIntType, __w>::__value.\n\t* include/bits/random.tcc (shuffle_order_engine<>::operator()()):\n\tFix formula for __j.\n\t* include/bits/random.tcc (operator==(const normal_distribution<>&,\n\tconst normal_distribution<>&): Remove.\n\t* include/bits/random.h (operator==(const uniform_int_distribution<>&,\n\tconst uniform_int_distribution<>&), operator==(const\n\tuniform_real_distribution<>&, const uniform_real_distribution<>&),\n\toperator==(const normal_distribution<>&, const normal_distribution<>&), \n\toperator==(const lognormal_distribution<>&,\n\tconst lognormal_distribution<>&), operator==(const\n\tchi_squared_distribution<>&, const chi_squared_distribution<>&),\n\toperator==(const cauchy_distribution<>&, const cauchy_distribution<>&),\n\toperator==(const fisher_distribution<>&, const fisher_distribution<>&),\n\toperator==(const student_t_distribution<>&,\n\tconst student_t_distribution<>&), operator==(const\n\tbernoulli_distribution<>&, const bernoulli_distribution<>&),\n\toperator==(const binomial_distribution<>&, const\n\tbinomial_distribution<>&), operator==(const geometric_distribution<>&,\n\tconst geometric_distribution<>&), operator==(const\n\tnegative_binomial_distribution<>&, const \n\tnegative_binomial_distribution<>&), operator==(const\n\tpoisson_distribution<>&, const poisson_distribution<>&),\n\toperator==(const exponential_distribution<>&,\n\tconst exponential_distribution<>&), operator==(const\n\tgamma_distribution<>&, const gamma_distribution<>&), operator==(const\n\tweibull_distribution<>&, const weibull_distribution<>&),\n\toperator==(const extreme_value_distribution<>&,\n\tconst extreme_value_distribution<>&), operator==(const\n\tdiscrete_distribution<>&, const discrete_distribution<>&),\n\toperator==(const piecewise_constant_distribution<>&,\n\tconst piecewise_constant_distribution<>&), operator==(const\n\tpiecewise_linear_distribution<>&, const\n\tpiecewise_linear_distribution<>&)): Remove.\n\t* testsuite/26_numerics/random/uniform_real_distribution/operators/\n\tserialize.cc: Remove.\n\t* testsuite/26_numerics/random/piecewise_constant_distribution/\n\toperators/serialize.cc: Likewise.\n\t* testsuite/26_numerics/random/chi_squared_distribution/operators/\n\tserialize.cc: Likewise.\n\t* testsuite/26_numerics/random/normal_distribution/operators/\n\tserialize.cc: Likewise.\n\t* testsuite/26_numerics/random/uniform_int_distribution/operators/\n\tserialize.cc: Likewise.\n\t* testsuite/26_numerics/random/poisson_distribution/operators/\n\tserialize.cc: Likewise.\n\t* testsuite/26_numerics/random/bernoulli_distribution/operators/\n\tserialize.cc: Likewise.\n\t* testsuite/26_numerics/random/discrete_distribution/operators/\n\tserialize.cc: Likewise.\n\t* testsuite/26_numerics/random/weibull_distribution/operators/\n\tserialize.cc: Likewise.\n\t* testsuite/26_numerics/random/negative_binomial_distribution/\n\toperators/serialize.cc: Likewise.\n\t* testsuite/26_numerics/random/cauchy_distribution/operators/\n\tserialize.cc: Likewise.\n\t* testsuite/26_numerics/random/gamma_distribution/operators/\n\tserialize.cc: Likewise.\n\t* testsuite/26_numerics/random/fisher_f_distribution/operators/\n\tserialize.cc: Likewise.\n\t* testsuite/26_numerics/random/exponential_distribution/operators/\n\tserialize.cc: Likewise.\n\t* testsuite/26_numerics/random/lognormal_distribution/operators/\n\tserialize.cc: Likewise.\n\t* testsuite/26_numerics/random/binomial_distribution/operators/\n\tserialize.cc: Likewise.\n\t* testsuite/26_numerics/random/extreme_value_distribution/\n\toperators/serialize.cc: Likewise.\n\t* testsuite/26_numerics/random/piecewise_linear_distribution/\n\toperators/serialize.cc: Likewise.\n\t* testsuite/26_numerics/random/student_t_distribution/operators/\n\tserialize.cc: Likewise.\n\t* testsuite/26_numerics/random/geometric_distribution/operators/\n\tserialize.cc: Likewise.\n\n\t* include/bits/random.h (linear_congruential_engine<>::seed(_Gen&,\n\ttrue_type), linear_congruential_engine<>::seed(_Gen&, false_type),\n\tmersenne_twister_engine<>::seed(_Gen&,\n\ttrue_type), mersenne_twister_engine<>::seed(_Gen&, false_type),\n\tsubtract_with_carry_engine<>::seed(_Gen&,\n\ttrue_type), subtract_with_carry_engine<>::seed(_Gen&, false_type)):\n\tRemove, unused.\n\t* include/bits/random.tcc (linear_congruential_engine<>::\n\tseed(_Gen&, false_type): Likewise.\n\nFrom-SVN: r145867", "tree": {"sha": "417b0696f2415c88f09ffbf36d8d1e94884b84be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/417b0696f2415c88f09ffbf36d8d1e94884b84be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96a9203b1c0ceeb5412c681f3659445f04c1c5bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96a9203b1c0ceeb5412c681f3659445f04c1c5bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96a9203b1c0ceeb5412c681f3659445f04c1c5bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96a9203b1c0ceeb5412c681f3659445f04c1c5bd/comments", "author": null, "committer": null, "parents": [{"sha": "805586285dbb8f34cccd4d34295719f59979b649", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/805586285dbb8f34cccd4d34295719f59979b649", "html_url": "https://github.com/Rust-GCC/gccrs/commit/805586285dbb8f34cccd4d34295719f59979b649"}], "stats": {"total": 1523, "additions": 115, "deletions": 1408}, "files": [{"sha": "e5c79e80151bafb12662ef63278dff08f738d0ad", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a9203b1c0ceeb5412c681f3659445f04c1c5bd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a9203b1c0ceeb5412c681f3659445f04c1c5bd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=96a9203b1c0ceeb5412c681f3659445f04c1c5bd", "patch": "@@ -1,3 +1,92 @@\n+2009-04-09  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/39629 (final bits)\n+\t* include/bits/random.h (subtract_with_carry_engine<>::_S_modulus):\n+\tRemove, consistently use __detail::_Shift<_UIntType, __w>::__value.\n+\t* include/bits/random.tcc (shuffle_order_engine<>::operator()()):\n+\tFix formula for __j.\n+\t* include/bits/random.tcc (operator==(const normal_distribution<>&,\n+\tconst normal_distribution<>&): Remove.\n+\t* include/bits/random.h (operator==(const uniform_int_distribution<>&,\n+\tconst uniform_int_distribution<>&), operator==(const\n+\tuniform_real_distribution<>&, const uniform_real_distribution<>&),\n+\toperator==(const normal_distribution<>&, const normal_distribution<>&), \n+\toperator==(const lognormal_distribution<>&,\n+\tconst lognormal_distribution<>&), operator==(const\n+\tchi_squared_distribution<>&, const chi_squared_distribution<>&),\n+\toperator==(const cauchy_distribution<>&, const cauchy_distribution<>&),\n+\toperator==(const fisher_distribution<>&, const fisher_distribution<>&),\n+\toperator==(const student_t_distribution<>&,\n+\tconst student_t_distribution<>&), operator==(const\n+\tbernoulli_distribution<>&, const bernoulli_distribution<>&),\n+\toperator==(const binomial_distribution<>&, const\n+\tbinomial_distribution<>&), operator==(const geometric_distribution<>&,\n+\tconst geometric_distribution<>&), operator==(const\n+\tnegative_binomial_distribution<>&, const \n+\tnegative_binomial_distribution<>&), operator==(const\n+\tpoisson_distribution<>&, const poisson_distribution<>&),\n+\toperator==(const exponential_distribution<>&,\n+\tconst exponential_distribution<>&), operator==(const\n+\tgamma_distribution<>&, const gamma_distribution<>&), operator==(const\n+\tweibull_distribution<>&, const weibull_distribution<>&),\n+\toperator==(const extreme_value_distribution<>&,\n+\tconst extreme_value_distribution<>&), operator==(const\n+\tdiscrete_distribution<>&, const discrete_distribution<>&),\n+\toperator==(const piecewise_constant_distribution<>&,\n+\tconst piecewise_constant_distribution<>&), operator==(const\n+\tpiecewise_linear_distribution<>&, const\n+\tpiecewise_linear_distribution<>&)): Remove.\n+\t* testsuite/26_numerics/random/uniform_real_distribution/operators/\n+\tserialize.cc: Remove.\n+\t* testsuite/26_numerics/random/piecewise_constant_distribution/\n+\toperators/serialize.cc: Likewise.\n+\t* testsuite/26_numerics/random/chi_squared_distribution/operators/\n+\tserialize.cc: Likewise.\n+\t* testsuite/26_numerics/random/normal_distribution/operators/\n+\tserialize.cc: Likewise.\n+\t* testsuite/26_numerics/random/uniform_int_distribution/operators/\n+\tserialize.cc: Likewise.\n+\t* testsuite/26_numerics/random/poisson_distribution/operators/\n+\tserialize.cc: Likewise.\n+\t* testsuite/26_numerics/random/bernoulli_distribution/operators/\n+\tserialize.cc: Likewise.\n+\t* testsuite/26_numerics/random/discrete_distribution/operators/\n+\tserialize.cc: Likewise.\n+\t* testsuite/26_numerics/random/weibull_distribution/operators/\n+\tserialize.cc: Likewise.\n+\t* testsuite/26_numerics/random/negative_binomial_distribution/\n+\toperators/serialize.cc: Likewise.\n+\t* testsuite/26_numerics/random/cauchy_distribution/operators/\n+\tserialize.cc: Likewise.\n+\t* testsuite/26_numerics/random/gamma_distribution/operators/\n+\tserialize.cc: Likewise.\n+\t* testsuite/26_numerics/random/fisher_f_distribution/operators/\n+\tserialize.cc: Likewise.\n+\t* testsuite/26_numerics/random/exponential_distribution/operators/\n+\tserialize.cc: Likewise.\n+\t* testsuite/26_numerics/random/lognormal_distribution/operators/\n+\tserialize.cc: Likewise.\n+\t* testsuite/26_numerics/random/binomial_distribution/operators/\n+\tserialize.cc: Likewise.\n+\t* testsuite/26_numerics/random/extreme_value_distribution/\n+\toperators/serialize.cc: Likewise.\n+\t* testsuite/26_numerics/random/piecewise_linear_distribution/\n+\toperators/serialize.cc: Likewise.\n+\t* testsuite/26_numerics/random/student_t_distribution/operators/\n+\tserialize.cc: Likewise.\n+\t* testsuite/26_numerics/random/geometric_distribution/operators/\n+\tserialize.cc: Likewise.\n+\n+\t* include/bits/random.h (linear_congruential_engine<>::seed(_Gen&,\n+\ttrue_type), linear_congruential_engine<>::seed(_Gen&, false_type),\n+\tmersenne_twister_engine<>::seed(_Gen&,\n+\ttrue_type), mersenne_twister_engine<>::seed(_Gen&, false_type),\n+\tsubtract_with_carry_engine<>::seed(_Gen&,\n+\ttrue_type), subtract_with_carry_engine<>::seed(_Gen&, false_type)):\n+\tRemove, unused.\n+\t* include/bits/random.tcc (linear_congruential_engine<>::\n+\tseed(_Gen&, false_type): Likewise.\n+\n 2009-04-09  Nick Clifton  <nickc@redhat.com>\n \n \t* src/allocator-inst.cc: Change copyright header to refer to"}, {"sha": "366105caa8f8a18daae616a574abcb08c55d8b88", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 8, "deletions": 317, "changes": 325, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a9203b1c0ceeb5412c681f3659445f04c1c5bd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a9203b1c0ceeb5412c681f3659445f04c1c5bd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=96a9203b1c0ceeb5412c681f3659445f04c1c5bd", "patch": "@@ -70,8 +70,8 @@ namespace std\n \n     // XXX need constexpr\n     template<typename _UIntType, size_t __w,\n-\t     bool = __w <static_cast<size_t>\n-\t\t\t (std::numeric_limits<_UIntType>::digits)>\n+\t     bool = __w < static_cast<size_t>\n+\t\t\t  (std::numeric_limits<_UIntType>::digits)>\n       struct _ShiftMin1\n       {\n \tstatic const _UIntType __value =\n@@ -206,7 +206,7 @@ namespace std\n       static const result_type increment    = __c;\n       /** The modulus. */\n       static const result_type modulus      = __m;\n-      static const result_type default_seed = 1UL;\n+      static const result_type default_seed = 1u;\n \n       /**\n        * @brief Constructs a %linear_congruential_engine random number\n@@ -258,7 +258,7 @@ namespace std\n        */\n       result_type\n       min() const\n-      { return (__detail::__mod<_UIntType, 1, 0, __m>(__c) == 0) ? 1 : 0; }\n+      { return __c == 0u ? 1u : 0u; }\n \n       /**\n        * @brief Gets the largest possible value in the output range.\n@@ -267,7 +267,7 @@ namespace std\n        */\n       result_type\n       max() const\n-      { return __m - 1; }\n+      { return __m - 1u; }\n \n       /**\n        * @brief Discard a sequence of random numbers.\n@@ -340,15 +340,6 @@ namespace std\n \t\t   __c1, __m1>&);\n \n     private:\n-      template<typename _Gen>\n-\tvoid\n-\tseed(_Gen& __g, true_type)\n-\t{ return seed(static_cast<unsigned long>(__g)); }\n-\n-      template<typename _Gen>\n-\tvoid\n-\tseed(_Gen& __g, false_type);\n-\n       _UIntType _M_x;\n     };\n \n@@ -429,7 +420,7 @@ namespace std\n       static const result_type tempering_c               = __c;\n       static const size_t      tempering_l               = __l;\n       static const size_t      initialization_multiplier = __f;\n-      static const result_type default_seed = 5489UL;\n+      static const result_type default_seed = 5489u;\n \n       // constructors and member function\n       explicit\n@@ -554,15 +545,6 @@ namespace std\n \t\t   __l1, __f1>&);\n \n     private:\n-      template<typename _Gen>\n-\tvoid\n-\tseed(_Gen& __g, true_type)\n-\t{ return seed(static_cast<unsigned long>(__g)); }\n-\n-      template<typename _Gen>\n-\tvoid\n-\tseed(_Gen& __g, false_type);\n-\n       _UIntType _M_x[state_size];\n       size_t    _M_p;\n     };\n@@ -602,7 +584,7 @@ namespace std\n       static const size_t      word_size    = __w;\n       static const size_t      short_lag    = __s;\n       static const size_t      long_lag     = __r;\n-      static const result_type default_seed = 19780503;\n+      static const result_type default_seed = 19780503u;\n \n       /**\n        * @brief Constructs an explicitly seeded % subtract_with_carry_engine\n@@ -662,7 +644,7 @@ namespace std\n        */\n       result_type\n       max() const\n-      { return _S_modulus - 1U; }\n+      { return __detail::_ShiftMin1<_UIntType, __w>::__value; }\n \n       /**\n        * @brief Discard a sequence of random numbers.\n@@ -736,18 +718,6 @@ namespace std\n \t\t   __s1, __r1>&);\n \n     private:\n-      template<typename _Gen>\n-\tvoid\n-\tseed(_Gen& __g, true_type)\n-\t{ return seed(static_cast<unsigned long>(__g)); }\n-\n-      template<typename _Gen>\n-\tvoid\n-\tseed(_Gen& __g, false_type);\n-\n-      static const size_t _S_modulus\n-\t= __detail::_Shift<_UIntType, __w>::__value;\n-\n       _UIntType  _M_x[long_lag];\n       _UIntType  _M_carry;\n       size_t     _M_p;\n@@ -1564,10 +1534,6 @@ namespace std\n \tb() const\n \t{ return _M_b; }\n \n-\tfriend bool\n-\toperator==(const param_type& __p1, const param_type& __p2)\n-\t{ return (__p1._M_a == __p2._M_a) && (__p1._M_b == __p2._M_b); }\n-\n       private:\n \t_IntType _M_a;\n \t_IntType _M_b;\n@@ -1681,16 +1647,6 @@ namespace std\n       param_type _M_param;\n     };\n \n-  /**\n-   * @brief Return true if two uniform integer distributions have\n-   *        the same parameters.\n-   */\n-  template<typename _IntType>\n-    inline bool\n-    operator==(const std::uniform_int_distribution<_IntType>& __d1,\n-\t       const std::uniform_int_distribution<_IntType>& __d2)\n-    { return __d1.param() == __d2.param(); }\n-\n   /**\n    * @brief Inserts a %uniform_int_distribution random number\n    *        distribution @p __x into the output stream @p os.\n@@ -1755,10 +1711,6 @@ namespace std\n \tb() const\n \t{ return _M_b; }\n \n-\tfriend bool\n-\toperator==(const param_type& __p1, const param_type& __p2)\n-\t{ return (__p1._M_a == __p2._M_a) && (__p1._M_b == __p2._M_b); }\n-\n       private:\n \t_RealType _M_a;\n \t_RealType _M_b;\n@@ -1850,16 +1802,6 @@ namespace std\n       param_type _M_param;\n     };\n \n-  /**\n-   * @brief Return true if two uniform real distributions have\n-   *        the same parameters.\n-   */\n-  template<typename _IntType>\n-    inline bool\n-    operator==(const std::uniform_real_distribution<_IntType>& __d1,\n-\t       const std::uniform_real_distribution<_IntType>& __d2)\n-    { return __d1.param() == __d2.param(); }\n-\n   /**\n    * @brief Inserts a %uniform_real_distribution random number\n    *        distribution @p __x into the output stream @p __os.\n@@ -1931,11 +1873,6 @@ namespace std\n \tstddev() const\n \t{ return _M_stddev; }\n \n-\tfriend bool\n-\toperator==(const param_type& __p1, const param_type& __p2)\n-\t{ return (__p1._M_mean == __p2._M_mean)\n-\t      && (__p1._M_stddev == __p2._M_stddev); }\n-\n       private:\n \t_RealType _M_mean;\n \t_RealType _M_stddev;\n@@ -2017,15 +1954,6 @@ namespace std\n \toperator()(_UniformRandomNumberGenerator& __urng,\n \t\t   const param_type& __p);\n \n-      /**\n-       * @brief Return true if two normal distributions have\n-       *        the same parameters.\n-       */\n-      template<typename _RealType1>\n-\tfriend bool\n-        operator==(const std::normal_distribution<_RealType1>& __d1,\n-\t\t   const std::normal_distribution<_RealType1>& __d2);\n-\n       /**\n        * @brief Inserts a %normal_distribution random number distribution\n        * @p __x into the output stream @p __os.\n@@ -2095,10 +2023,6 @@ namespace std\n \ts() const\n \t{ return _M_s; }\n \n-\tfriend bool\n-\toperator==(const param_type& __p1, const param_type& __p2)\n-\t{ return (__p1._M_m == __p2._M_m) && (__p1._M_s == __p2._M_s); }\n-\n       private:\n \t_RealType _M_m;\n \t_RealType _M_s;\n@@ -2176,16 +2100,6 @@ namespace std\n       param_type _M_param;\n     };\n \n-  /**\n-   * @brief Return true if two lognormal distributions have\n-   *        the same parameters.\n-   */\n-  template<typename _RealType>\n-    inline bool\n-    operator==(const std::lognormal_distribution<_RealType>& __d1,\n-\t       const std::lognormal_distribution<_RealType>& __d2)\n-    { return __d1.param() == __d2.param(); }\n-\n   /**\n    * @brief Inserts a %lognormal_distribution random number distribution\n    * @p __x into the output stream @p __os.\n@@ -2243,10 +2157,6 @@ namespace std\n \tn() const\n \t{ return _M_n; }\n \n-\tfriend bool\n-\toperator==(const param_type& __p1, const param_type& __p2)\n-\t{ return __p1._M_n == __p2._M_n; }\n-\n       private:\n \t_RealType _M_n;\n       };\n@@ -2318,16 +2228,6 @@ namespace std\n       param_type _M_param;\n     };\n \n-  /**\n-   * @brief Return true if two Chi-squared distributions have\n-   *        the same parameters.\n-   */\n-  template<typename _RealType>\n-    inline bool\n-    operator==(const std::chi_squared_distribution<_RealType>& __d1,\n-\t       const std::chi_squared_distribution<_RealType>& __d2)\n-    { return __d1.param() == __d2.param(); }\n-\n   /**\n    * @brief Inserts a %chi_squared_distribution random number distribution\n    * @p __x into the output stream @p __os.\n@@ -2390,10 +2290,6 @@ namespace std\n \tb() const\n \t{ return _M_b; }\n \n-\tfriend bool\n-\toperator==(const param_type& __p1, const param_type& __p2)\n-\t{ return (__p1._M_a == __p2._M_a) && (__p1._M_b == __p2._M_b); }\n-\n       private:\n \t_RealType _M_a;\n \t_RealType _M_b;\n@@ -2471,16 +2367,6 @@ namespace std\n       param_type _M_param;\n     };\n \n-  /**\n-   * @brief Return true if two Cauchy distributions have\n-   *        the same parameters.\n-   */\n-  template<typename _RealType>\n-    inline bool\n-    operator==(const std::cauchy_distribution<_RealType>& __d1,\n-\t       const std::cauchy_distribution<_RealType>& __d2)\n-    { return __d1.param() == __d2.param(); }\n-\n   /**\n    * @brief Inserts a %cauchy_distribution random number distribution\n    * @p __x into the output stream @p __os.\n@@ -2545,10 +2431,6 @@ namespace std\n \tn() const\n \t{ return _M_n; }\n \n-\tfriend bool\n-\toperator==(const param_type& __p1, const param_type& __p2)\n-\t{ return (__p1._M_m == __p2._M_m) && (__p1._M_n == __p2._M_n); }\n-\n       private:\n \t_RealType _M_m;\n \t_RealType _M_n;\n@@ -2626,16 +2508,6 @@ namespace std\n       param_type _M_param;\n     };\n \n-  /**\n-   * @brief Return true if two Fisher f distributions have\n-   *        the same parameters.\n-   */\n-  template<typename _RealType>\n-    inline bool\n-    operator==(const std::fisher_f_distribution<_RealType>& __d1,\n-\t       const std::fisher_f_distribution<_RealType>& __d2)\n-    { return __d1.param() == __d2.param(); }\n-\n   /**\n    * @brief Inserts a %fisher_f_distribution random number distribution\n    * @p __x into the output stream @p __os.\n@@ -2694,10 +2566,6 @@ namespace std\n \tn() const\n \t{ return _M_n; }\n \n-\tfriend bool\n-\toperator==(const param_type& __p1, const param_type& __p2)\n-\t{ return __p1._M_n == __p2._M_n; }\n-\n       private:\n \t_RealType _M_n;\n       };\n@@ -2774,16 +2642,6 @@ namespace std\n       param_type _M_param;\n     };\n \n-  /**\n-   * @brief Return true if two Student t distributions have\n-   *        the same parameters.\n-   */\n-  template<typename _RealType>\n-    inline bool\n-    operator==(const std::student_t_distribution<_RealType>& __d1,\n-\t       const std::student_t_distribution<_RealType>& __d2)\n-    { return __d1.param() == __d2.param(); }\n-\n   /**\n    * @brief Inserts a %student_t_distribution random number distribution\n    * @p __x into the output stream @p __os.\n@@ -2849,10 +2707,6 @@ namespace std\n       p() const\n       { return _M_p; }\n \n-      friend bool\n-      operator==(const param_type& __p1, const param_type& __p2)\n-      { return __p1._M_p == __p2._M_p; }\n-\n     private:\n       double _M_p;\n     };\n@@ -2950,15 +2804,6 @@ namespace std\n     param_type _M_param;\n   };\n \n-  /**\n-   * @brief Return true if two Bernoulli distributions have\n-   *        the same parameters.\n-   */\n-  inline bool\n-  operator==(const std::bernoulli_distribution& __d1,\n-\t     const std::bernoulli_distribution& __d2)\n-  { return __d1.param() == __d2.param(); }\n-\n   /**\n    * @brief Inserts a %bernoulli_distribution random number distribution\n    * @p __x into the output stream @p __os.\n@@ -3034,10 +2879,6 @@ namespace std\n \tp() const\n \t{ return _M_p; }\n \n-\tfriend bool\n-\toperator==(const param_type& __p1, const param_type& __p2)\n-\t{ return (__p1._M_t == __p2._M_t) && (__p1._M_p == __p2._M_p); }\n-\n       private:\n \tvoid\n \t_M_initialize();\n@@ -3115,17 +2956,6 @@ namespace std\n       max() const\n       { return _M_param.t(); }\n \n-      /**\n-       * @brief Return true if two binomial distributions have\n-       *        the same parameters.\n-       */\n-      template<typename _IntType1>\n-\tfriend bool\n-        operator==(const std::binomial_distribution<_IntType1>& __d1,\n-\t\t   const std::binomial_distribution<_IntType1>& __d2)\n-\t{ return ((__d1.param() == __d2.param())\n-\t\t  && (__d1._M_nd == __d2._M_nd)); }\n-\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng)\n@@ -3214,10 +3044,6 @@ namespace std\n \tp() const\n \t{ return _M_p; }\n \n-\tfriend bool\n-\toperator==(const param_type& __p1, const param_type& __p2)\n-\t{ return __p1._M_p == __p2._M_p; }\n-\n       private:\n \tvoid\n \t_M_initialize()\n@@ -3297,16 +3123,6 @@ namespace std\n       param_type _M_param;\n     };\n \n-  /**\n-   * @brief Return true if two geometric distributions have\n-   *        the same parameters.\n-   */\n-  template<typename _IntType>\n-    inline bool\n-    operator==(const geometric_distribution<_IntType>& __d1,\n-\t       const geometric_distribution<_IntType>& __d2)\n-    { return __d1.param() == __d2.param(); }\n-\n   /**\n    * @brief Inserts a %geometric_distribution random number distribution\n    * @p __x into the output stream @p __os.\n@@ -3372,10 +3188,6 @@ namespace std\n \tp() const\n \t{ return _M_p; }\n \n-\tfriend bool\n-\toperator==(const param_type& __p1, const param_type& __p2)\n-\t{ return (__p1._M_k == __p2._M_k) && (__p1._M_p == __p2._M_p); }\n-\n       private:\n \t_IntType _M_k;\n \tdouble _M_p;\n@@ -3455,16 +3267,6 @@ namespace std\n       param_type _M_param;\n     };\n \n-  /**\n-   * @brief Return true if two negative binomial distributions have\n-   *        the same parameters.\n-   */\n-  template<typename _IntType>\n-    inline bool\n-    operator==(const std::negative_binomial_distribution<_IntType>& __d1,\n-\t       const std::negative_binomial_distribution<_IntType>& __d2)\n-    { return __d1.param() == __d2.param(); }\n-\n   /**\n    * @brief Inserts a %negative_binomial_distribution random\n    *        number distribution @p __x into the output stream @p __os.\n@@ -3537,10 +3339,6 @@ namespace std\n \tmean() const\n \t{ return _M_mean; }\n \n-\tfriend bool\n-\toperator==(const param_type& __p1, const param_type& __p2)\n-\t{ return __p1._M_mean == __p2._M_mean; }\n-\n       private:\n \t// Hosts either log(mean) or the threshold of the simple method.\n \tvoid\n@@ -3618,17 +3416,6 @@ namespace std\n \toperator()(_UniformRandomNumberGenerator& __urng,\n \t\t   const param_type& __p);\n \n-      /**\n-       * @brief Return true if two Poisson distributions have the same\n-       *        parameters.\n-       */\n-      template<typename _IntType1>\n-\tfriend bool\n-        operator==(const std::poisson_distribution<_IntType1>& __d1,\n-\t\t   const std::poisson_distribution<_IntType1>& __d2)\n-\t{ return ((__d1.param() == __d2.param())\n-\t\t  && (__d1._M_nd == __d2._M_nd)); }\n-\n       /**\n        * @brief Inserts a %poisson_distribution random number distribution\n        * @p __x into the output stream @p __os.\n@@ -3703,10 +3490,6 @@ namespace std\n \tlambda() const\n \t{ return _M_lambda; }\n \n-\tfriend bool\n-\toperator==(const param_type& __p1, const param_type& __p2)\n-\t{ return __p1._M_lambda == __p2._M_lambda; }\n-\n       private:\n \t_RealType _M_lambda;\n       };\n@@ -3793,16 +3576,6 @@ namespace std\n       param_type _M_param;\n     };\n \n-  /**\n-   * @brief Return true if two exponential distributions have the same\n-   *        parameters.\n-   */\n-  template<typename _RealType>\n-    inline bool\n-    operator==(const std::exponential_distribution<_RealType>& __d1,\n-\t       const std::exponential_distribution<_RealType>& __d2)\n-    { return __d1.param() == __d2.param(); }\n-\n   /**\n    * @brief Inserts a %exponential_distribution random number distribution\n    * @p __x into the output stream @p __os.\n@@ -3870,11 +3643,6 @@ namespace std\n \tbeta() const\n \t{ return _M_beta; }\n \n-\tfriend bool\n-\toperator==(const param_type& __p1, const param_type& __p2)\n-\t{ return ((__p1._M_alpha == __p2._M_alpha)\n-\t\t  && (__p1._M_beta == __p2._M_beta)); }\n-\n       private:\n \tvoid\n \t_M_initialize();\n@@ -3967,16 +3735,6 @@ namespace std\n       param_type _M_param;\n     };\n \n-  /**\n-   * @brief Return true if two gamma distributions have the same\n-   *        parameters.\n-   */\n-  template<typename _RealType>\n-    inline bool\n-    operator==(const std::gamma_distribution<_RealType>& __d1,\n-\t       const std::gamma_distribution<_RealType>& __d2)\n-    { return __d1.param() == __d2.param(); }\n-\n   /**\n    * @brief Inserts a %gamma_distribution random number distribution\n    * @p __x into the output stream @p __os.\n@@ -4039,10 +3797,6 @@ namespace std\n \tb() const\n \t{ return _M_b; }\n \n-\tfriend bool\n-\toperator==(const param_type& __p1, const param_type& __p2)\n-\t{ return (__p1._M_a == __p2._M_a) && (__p1._M_b == __p2._M_b); }\n-\n       private:\n \t_RealType _M_a;\n \t_RealType _M_b;\n@@ -4129,16 +3883,6 @@ namespace std\n       param_type _M_param;\n     };\n \n-  /**\n-   * @brief Return true if two Weibull distributions have the same\n-   *        parameters.\n-   */\n-  template<typename _RealType>\n-    inline bool\n-    operator==(const std::weibull_distribution<_RealType>& __d1,\n-\t       const std::weibull_distribution<_RealType>& __d2)\n-    { return __d1.param() == __d2.param(); }\n-\n   /**\n    * @brief Inserts a %weibull_distribution random number distribution\n    * @p __x into the output stream @p __os.\n@@ -4202,10 +3946,6 @@ namespace std\n \tb() const\n \t{ return _M_b; }\n \n-\tfriend bool\n-\toperator==(const param_type& __p1, const param_type& __p2)\n-\t{ return (__p1._M_a == __p2._M_a) && (__p1._M_b == __p2._M_b); }\n-\n       private:\n \t_RealType _M_a;\n \t_RealType _M_b;\n@@ -4286,15 +4026,6 @@ namespace std\n       param_type _M_param;\n     };\n \n-  /**\n-   *\n-   */\n-  template<typename _RealType>\n-    inline bool\n-    operator==(const std::extreme_value_distribution<_RealType>& __d1,\n-\t       const std::extreme_value_distribution<_RealType>& __d2)\n-    { return __d1.param() == __d2.param(); }\n-\n   /**\n    * @brief Inserts a %extreme_value_distribution random number distribution\n    * @p __x into the output stream @p __os.\n@@ -4368,10 +4099,6 @@ namespace std\n \tprobabilities() const\n \t{ return _M_prob; }\n \n-\tfriend bool\n-\toperator==(const param_type& __p1, const param_type& __p2)\n-\t{ return __p1._M_prob == __p2._M_prob; }\n-\n       private:\n \tvoid\n \t_M_initialize();\n@@ -4493,15 +4220,6 @@ namespace std\n       param_type _M_param;\n     };\n \n-  /**\n-   *\n-   */\n-  template<typename _IntType>\n-    inline bool\n-    operator==(const std::discrete_distribution<_IntType>& __d1,\n-\t       const std::discrete_distribution<_IntType>& __d2)\n-    { return __d1.param() == __d2.param(); }\n-\n \n   /**\n    * @brief A piecewise_constant_distribution random number distribution.\n@@ -4543,11 +4261,6 @@ namespace std\n \tdensities() const\n \t{ return _M_den; }\n \n-\tfriend bool\n-\toperator==(const param_type& __p1, const param_type& __p2)\n-\t{ return ((__p1._M_int == __p2._M_int)\n-\t\t  && (__p1._M_den == __p2._M_den)); }\n-\n       private:\n \tvoid\n \t_M_initialize();\n@@ -4683,15 +4396,6 @@ namespace std\n       param_type _M_param;\n     };\n \n-  /**\n-   *\n-   */\n-  template<typename _RealType>\n-    inline bool\n-    operator==(const std::piecewise_constant_distribution<_RealType>& __d1,\n-\t       const std::piecewise_constant_distribution<_RealType>& __d2)\n-    { return __d1.param() == __d2.param(); }\n-\n \n   /**\n    * @brief A piecewise_linear_distribution random number distribution.\n@@ -4733,11 +4437,6 @@ namespace std\n \tdensities() const\n \t{ return _M_den; }\n \n-\tfriend bool\n-\toperator==(const param_type& __p1, const param_type& __p2)\n-\t{ return ((__p1._M_int == __p2._M_int)\n-\t\t  && (__p1._M_den == __p2._M_den)); }\n-\n       private:\n \tvoid\n \t_M_initialize();\n@@ -4875,14 +4574,6 @@ namespace std\n       param_type _M_param;\n     };\n \n-  /**\n-   *\n-   */\n-  template<typename _RealType>\n-    inline bool\n-    operator==(const std::piecewise_linear_distribution<_RealType>& __d1,\n-\t       const std::piecewise_linear_distribution<_RealType>& __d2)\n-    { return __d1.param() == __d2.param(); }\n \n   /* @} */ // group std_random_distributions_poisson\n "}, {"sha": "9fed72ff8813ff8d82c6fe60e4231846e8b82a0b", "filename": "libstdc++-v3/include/bits/random.tcc", "status": "modified", "additions": 18, "deletions": 61, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a9203b1c0ceeb5412c681f3659445f04c1c5bd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a9203b1c0ceeb5412c681f3659445f04c1c5bd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc?ref=96a9203b1c0ceeb5412c681f3659445f04c1c5bd", "patch": "@@ -90,23 +90,23 @@ namespace std\n   } // namespace __detail\n \n   /**\n-   * Seeds the LCR with integral value @p __x0, adjusted so that the\n+   * Seeds the LCR with integral value @p __s, adjusted so that the\n    * ring identity is never a member of the convergence set.\n    */\n   template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>\n     void\n     linear_congruential_engine<_UIntType, __a, __c, __m>::\n-    seed(_UIntType __x0)\n+    seed(result_type __s)\n     {\n       if ((__detail::__mod<_UIntType, 1U, 0U, __m>(__c) == 0U)\n-\t  && (__detail::__mod<_UIntType, 1U, 0U, __m>(__x0) == 0U))\n+\t  && (__detail::__mod<_UIntType, 1U, 0U, __m>(__s) == 0U))\n \t_M_x = __detail::__mod<_UIntType, 1U, 0U, __m>(1U);\n       else\n-\t_M_x = __detail::__mod<_UIntType, 1U, 0U, __m>(__x0);\n+\t_M_x = __detail::__mod<_UIntType, 1U, 0U, __m>(__s);\n     }\n \n   /**\n-   * Seeds the LCR engine with a value generated by @p __g.\n+   * Seeds the LCR engine with a value generated by @p __q.\n    */\n   template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>\n     void\n@@ -117,39 +117,17 @@ namespace std\n \t                              : std::__lg(__m);\n       const _UIntType __k = (__k0 + 31) / 32;\n       _UIntType __arr[__k + 3];\n-      __q.generate(__arr + 0, __arr + 3);\n+      __q.generate(__arr + 0, __arr + __k + 3);\n       _UIntType __factor = 1U;\n       _UIntType __sum = 0U;\n-      for (size_t __i = 0; __i < __k; ++__i)\n+      for (size_t __j = 0; __j < __k; ++__j)\n         {\n-          __sum += __arr[__i + 3] * __factor;\n+          __sum += __arr[__j + 3] * __factor;\n           __factor *= __detail::_Shift<_UIntType, 32>::__value;\n         }\n-\n-      if ((__detail::__mod<_UIntType, 1U, 0U, __m>(__c) == 0U)\n-\t  && (__detail::__mod<_UIntType, 1U, 0U, __m>(__sum) == 0U))\n-        _M_x = __detail::__mod<_UIntType, 1U, 0U, __m>(1U);\n-      else\n-        _M_x = __detail::__mod<_UIntType, 1U, 0U, __m>(__sum);\n+      seed(__sum);\n     }\n \n-  /**\n-   * Seeds the LCR engine with a value generated by @p __g.\n-   */\n-  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>\n-    template<typename _Gen>\n-      void\n-      linear_congruential_engine<_UIntType, __a, __c, __m>::\n-      seed(_Gen& __g, false_type)\n-      {\n-\t_UIntType __x0 = __g();\n-\tif ((__detail::__mod<_UIntType, 1U, 0U, __m>(__c) == 0U)\n-\t    && (__detail::__mod<_UIntType, 1U, 0U, __m>(__x0) == 0U))\n-\t  _M_x = __detail::__mod<_UIntType, 1U, 0U, __m>(1U);\n-\telse\n-\t  _M_x = __detail::__mod<_UIntType, 1U, 0U, __m>(__x0);\n-      }\n-\n   /**\n    * Gets the next generated value in sequence.\n    */\n@@ -399,7 +377,8 @@ namespace std\n \t\t\t (__lcg()) * __factor;\n \t      __factor *= __detail::_Shift<_UIntType, 32>::__value;\n \t    }\n-\t  _M_x[__i] = __detail::__mod<_UIntType, 1, 0, _S_modulus>(__sum);\n+\t  _M_x[__i] = __detail::__mod<_UIntType, 1, 0,\n+\t    __detail::_Shift<_UIntType, __w>::__value>(__sum);\n \t}\n       _M_carry = (_M_x[long_lag - 1] == 0) ? 1 : 0;\n       _M_p = 0;\n@@ -411,7 +390,7 @@ namespace std\n     seed(seed_seq& __q)\n     {\n       const size_t __n = (word_size + 31) / 32;\n-      unsigned int __arr[long_lag + __n];\n+      _UIntType __arr[long_lag + __n];\n       __q.generate(__arr + 0, __arr + long_lag + __n);\n \n       for (size_t __i = 0; __i < long_lag; ++__i)\n@@ -424,7 +403,8 @@ namespace std\n \t\t         (__arr[__i * __n + __j]) * __factor;\n \t      __factor *= __detail::_Shift<_UIntType, 32>::__value;\n             }\n-          _M_x[__i] = __detail::__mod<_UIntType, 1, 0, _S_modulus>(__sum);\n+          _M_x[__i] = __detail::__mod<_UIntType, 1, 0,\n+\t    __detail::_Shift<_UIntType, __w>::__value>(__sum);\n         }\n       _M_carry = (_M_x[long_lag - 1] == 0) ? 1 : 0;\n       _M_p = 0;\n@@ -452,7 +432,8 @@ namespace std\n \t}\n       else\n \t{\n-\t  __xi = _S_modulus - _M_x[_M_p] - _M_carry + _M_x[__ps];\n+\t  __xi = (__detail::_Shift<_UIntType, __w>::__value\n+\t\t  - _M_x[_M_p] - _M_carry + _M_x[__ps]);\n \t  _M_carry = 1;\n \t}\n       _M_x[_M_p] = __xi;\n@@ -619,8 +600,8 @@ namespace std\n     shuffle_order_engine<_RandomNumberEngine, __k>::\n     operator()()\n     {\n-      size_t __j = (__k * (_M_y - _M_b.min()))\n-\t\t / (_M_b.max() - _M_b.min() + 1);\n+      size_t __j = __k * ((_M_y - _M_b.min())\n+\t\t\t  / (_M_b.max() - _M_b.min() + 1.0L));\n       _M_y = _M_v[__j];\n       _M_v[__j] = _M_b();\n \n@@ -1437,30 +1418,6 @@ namespace std\n     }\n \n \n-  template<typename _RealType>\n-    bool\n-    operator==(const normal_distribution<_RealType>& __d1,\n-\t       const normal_distribution<_RealType>& __d2)\n-    {\n-      if (__d1._M_param == __d2._M_param)\n-\t{\n-\t  if (__d1._M_saved_available == __d2._M_saved_available)\n-\t    {\n-\t      if (__d1._M_saved_available\n-\t       && __d1._M_saved == __d2._M_saved)\n-\t\treturn true;\n-\t      else if(!__d1._M_saved_available)\n-\t\treturn true;\n-\t      else\n-\t\treturn false;\n-\t    }\n-\t  else\n-\t    return false;\n-\t}\n-      else\n-\treturn false;\n-    }\n-\n   /**\n    * Polar method due to Marsaglia.\n    *"}, {"sha": "c78427cba7f301c0f3a8a73a3be48422f0271b1f", "filename": "libstdc++-v3/testsuite/26_numerics/random/bernoulli_distribution/operators/serialize.cc", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805586285dbb8f34cccd4d34295719f59979b649/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbernoulli_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805586285dbb8f34cccd4d34295719f59979b649/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbernoulli_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbernoulli_distribution%2Foperators%2Fserialize.cc?ref=805586285dbb8f34cccd4d34295719f59979b649", "patch": "@@ -1,51 +0,0 @@\n-// { dg-options \"-std=c++0x\" }\n-//\n-// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n-//\n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-//\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-//\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// 26.4.8.2.1 Class template bernoulli_distribution [rand.dist.bern.bernoulli]\n-// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n-\n-#include <random>\n-#include <sstream>\n-#include <testsuite_hooks.h>\n-\n-void\n-test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  std::stringstream str;\n-  std::bernoulli_distribution u(0.75), v;\n-  std::minstd_rand0 rng;\n-\n-  u(rng); // advance\n-  str << u;\n-\n-  VERIFY( !(u == v) );\n-\n-  str >> v;\n-  VERIFY( u == v );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "ae956ba117ed0db5a500ccdf5002c1d3cbe168ed", "filename": "libstdc++-v3/testsuite/26_numerics/random/binomial_distribution/operators/serialize.cc", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805586285dbb8f34cccd4d34295719f59979b649/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbinomial_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805586285dbb8f34cccd4d34295719f59979b649/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbinomial_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbinomial_distribution%2Foperators%2Fserialize.cc?ref=805586285dbb8f34cccd4d34295719f59979b649", "patch": "@@ -1,51 +0,0 @@\n-// { dg-options \"-std=c++0x\" }\n-//\n-// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n-//\n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-//\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-//\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// 26.4.8.2.2 Class template binomial_distribution [rand.dist.bern.bin]\n-// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n-\n-#include <random>\n-#include <sstream>\n-#include <testsuite_hooks.h>\n-\n-void\n-test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  std::stringstream str;\n-  std::binomial_distribution<int> u(3, 0.75), v;\n-  std::minstd_rand0 rng;\n-\n-  u(rng); // advance\n-  str << u;\n-\n-  VERIFY( !(u == v) );\n-\n-  str >> v;\n-  VERIFY( u == v );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "887907ad2988deabfdcc3b07c0e944136ea05e77", "filename": "libstdc++-v3/testsuite/26_numerics/random/cauchy_distribution/operators/serialize.cc", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805586285dbb8f34cccd4d34295719f59979b649/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fcauchy_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805586285dbb8f34cccd4d34295719f59979b649/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fcauchy_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fcauchy_distribution%2Foperators%2Fserialize.cc?ref=805586285dbb8f34cccd4d34295719f59979b649", "patch": "@@ -1,51 +0,0 @@\n-// { dg-options \"-std=c++0x\" }\n-//\n-// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n-//\n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-//\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-//\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// 26.4.4.1 class template discard_block_engine [rand.adapt.disc]\n-// 26.4.2.3 concept RandomNumberEngineAdaptor [rand.concept.adapt]\n-\n-#include <random>\n-#include <sstream>\n-#include <testsuite_hooks.h>\n-\n-void\n-test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  std::stringstream str;\n-  std::cauchy_distribution<double> u(5.0, 2.0), v;\n-  std::minstd_rand0 rng;\n-\n-  u(rng); // advance\n-  str << u;\n-\n-  VERIFY( !(u == v) );\n-\n-  str >> v;\n-  VERIFY( u == v );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "e48f42b4fd3aeb5f5657be9d96039809b1422ed3", "filename": "libstdc++-v3/testsuite/26_numerics/random/chi_squared_distribution/operators/serialize.cc", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805586285dbb8f34cccd4d34295719f59979b649/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fchi_squared_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805586285dbb8f34cccd4d34295719f59979b649/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fchi_squared_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fchi_squared_distribution%2Foperators%2Fserialize.cc?ref=805586285dbb8f34cccd4d34295719f59979b649", "patch": "@@ -1,51 +0,0 @@\n-// { dg-options \"-std=c++0x\" }\n-//\n-// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n-//\n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-//\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-//\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// 26.4.8.4.3 Class template chi_squared_distribution [rand.dist.norm.chisq]\n-// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n-\n-#include <random>\n-#include <sstream>\n-#include <testsuite_hooks.h>\n-\n-void\n-test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  std::stringstream str;\n-  std::chi_squared_distribution<double> u(1.5), v;\n-  std::minstd_rand0 rng;\n-\n-  u(rng); // advance\n-  str << u;\n-\n-  VERIFY( !(u == v) );\n-\n-  str >> v;\n-  VERIFY( u == v );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "1dbd5706a465b3f2cdd4a58290a70c6844755388", "filename": "libstdc++-v3/testsuite/26_numerics/random/discrete_distribution/operators/serialize.cc", "status": "removed", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805586285dbb8f34cccd4d34295719f59979b649/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscrete_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805586285dbb8f34cccd4d34295719f59979b649/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscrete_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscrete_distribution%2Foperators%2Fserialize.cc?ref=805586285dbb8f34cccd4d34295719f59979b649", "patch": "@@ -1,52 +0,0 @@\n-// { dg-options \"-std=c++0x\" }\n-//\n-// 2008-12-05  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n-//\n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-//\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-//\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// 26.4.8.5.1 Class template discrete_distribution [rand.dist.samp.discrete]\n-// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n-\n-#include <random>\n-#include <sstream>\n-#include <testsuite_hooks.h>\n-\n-void\n-test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  std::stringstream str;\n-  std::vector<double> wt = {0.5, 1.0, 2.5, 1.5, 0.5};\n-  std::discrete_distribution<int> u(wt.begin(), wt.end()), v;\n-  std::minstd_rand0 rng;\n-\n-  u(rng); // advance\n-  str << u;\n-\n-  VERIFY( !(u == v) );\n-\n-  str >> v;\n-  VERIFY( u == v );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "78c3e9d5a17ab6fc58d85fc7bc5486efab71cb4d", "filename": "libstdc++-v3/testsuite/26_numerics/random/exponential_distribution/operators/serialize.cc", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805586285dbb8f34cccd4d34295719f59979b649/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fexponential_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805586285dbb8f34cccd4d34295719f59979b649/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fexponential_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fexponential_distribution%2Foperators%2Fserialize.cc?ref=805586285dbb8f34cccd4d34295719f59979b649", "patch": "@@ -1,51 +0,0 @@\n-// { dg-options \"-std=c++0x\" }\n-//\n-// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n-//\n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-//\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-//\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// 26.4.8.3.2 Class template exponential_distribution [rand.dist.pois.exp]\n-// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n-\n-#include <random>\n-#include <sstream>\n-#include <testsuite_hooks.h>\n-\n-void\n-test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  std::stringstream str;\n-  std::exponential_distribution<double> u(0.5), v;\n-  std::minstd_rand0 rng;\n-\n-  u(rng); // advance\n-  str << u;\n-\n-  VERIFY( !(u == v) );\n-\n-  str >> v;\n-  VERIFY( u == v );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "bf976b0d8f04ccb160dee42dbb005945ea9e2dae", "filename": "libstdc++-v3/testsuite/26_numerics/random/extreme_value_distribution/operators/serialize.cc", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805586285dbb8f34cccd4d34295719f59979b649/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fextreme_value_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805586285dbb8f34cccd4d34295719f59979b649/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fextreme_value_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fextreme_value_distribution%2Foperators%2Fserialize.cc?ref=805586285dbb8f34cccd4d34295719f59979b649", "patch": "@@ -1,51 +0,0 @@\n-// { dg-options \"-std=c++0x\" }\n-//\n-// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n-//\n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-//\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-//\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// 26.4.8.3.5 Class template extreme_value_distribution [rand.dist.pois.extreme]\n-// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n-\n-#include <random>\n-#include <sstream>\n-#include <testsuite_hooks.h>\n-\n-void\n-test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  std::stringstream str;\n-  std::extreme_value_distribution<double> u, v(5.0, 2.0);\n-  std::minstd_rand0 rng;\n-\n-  u(rng); // advance\n-  str << u;\n-\n-  VERIFY( !(u == v) );\n-\n-  str >> v;\n-  VERIFY( u == v );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "8d53756c36e747bc6991f7437e8002b86ad0aab0", "filename": "libstdc++-v3/testsuite/26_numerics/random/fisher_f_distribution/operators/serialize.cc", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805586285dbb8f34cccd4d34295719f59979b649/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Ffisher_f_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805586285dbb8f34cccd4d34295719f59979b649/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Ffisher_f_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Ffisher_f_distribution%2Foperators%2Fserialize.cc?ref=805586285dbb8f34cccd4d34295719f59979b649", "patch": "@@ -1,51 +0,0 @@\n-// { dg-options \"-std=c++0x\" }\n-//\n-// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n-//\n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-//\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-//\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// 26.4.8.4.5 Class template fisher_f_distribution [rand.dist.norm.f]\n-// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n-\n-#include <random>\n-#include <sstream>\n-#include <testsuite_hooks.h>\n-\n-void\n-test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  std::stringstream str;\n-  std::fisher_f_distribution<double> u(2.0, 3.0), v;\n-  std::minstd_rand0 rng;\n-\n-  u(rng); // advance\n-  str << u;\n-\n-  VERIFY( !(u == v) );\n-\n-  str >> v;\n-  VERIFY( u == v );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "f7035df03f9c6ca7772eefab44ee8906a95d394e", "filename": "libstdc++-v3/testsuite/26_numerics/random/gamma_distribution/operators/serialize.cc", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805586285dbb8f34cccd4d34295719f59979b649/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgamma_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805586285dbb8f34cccd4d34295719f59979b649/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgamma_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgamma_distribution%2Foperators%2Fserialize.cc?ref=805586285dbb8f34cccd4d34295719f59979b649", "patch": "@@ -1,51 +0,0 @@\n-// { dg-options \"-std=c++0x\" }\n-//\n-// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n-//\n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-//\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-//\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// 26.4.8.3.3 Class template gamma_distribution [rand.dist.pois.gamma]\n-// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n-\n-#include <random>\n-#include <sstream>\n-#include <testsuite_hooks.h>\n-\n-void\n-test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  std::stringstream str;\n-  std::gamma_distribution<double> u(1.5, 3.0), v;\n-  std::minstd_rand0 rng;\n-\n-  u(rng); // advance\n-  str << u;\n-\n-  VERIFY( !(u == v) );\n-\n-  str >> v;\n-  VERIFY( u == v );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "907e59ecc22d6503995bef0cdd0098f5ac384c83", "filename": "libstdc++-v3/testsuite/26_numerics/random/geometric_distribution/operators/serialize.cc", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805586285dbb8f34cccd4d34295719f59979b649/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgeometric_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805586285dbb8f34cccd4d34295719f59979b649/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgeometric_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgeometric_distribution%2Foperators%2Fserialize.cc?ref=805586285dbb8f34cccd4d34295719f59979b649", "patch": "@@ -1,51 +0,0 @@\n-// { dg-options \"-std=c++0x\" }\n-//\n-// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n-//\n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-//\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-//\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// 26.4.8.2.3 Class template geometric_distribution [rand.dist.bern.geom]\n-// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n-\n-#include <random>\n-#include <sstream>\n-#include <testsuite_hooks.h>\n-\n-void\n-test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  std::stringstream str;\n-  std::geometric_distribution<int> u(0.75), v;\n-  std::minstd_rand0 rng;\n-\n-  u(rng); // advance\n-  str << u;\n-\n-  VERIFY( !(u == v) );\n-\n-  str >> v;\n-  VERIFY( u == v );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "acee3c0d9cedb3d672b5730716b45602b8f118bc", "filename": "libstdc++-v3/testsuite/26_numerics/random/lognormal_distribution/operators/serialize.cc", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805586285dbb8f34cccd4d34295719f59979b649/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flognormal_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805586285dbb8f34cccd4d34295719f59979b649/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flognormal_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flognormal_distribution%2Foperators%2Fserialize.cc?ref=805586285dbb8f34cccd4d34295719f59979b649", "patch": "@@ -1,51 +0,0 @@\n-// { dg-options \"-std=c++0x\" }\n-//\n-// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n-//\n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-//\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-//\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// 26.4.8.4.2 Class template lognormal_distribution [rand.dist.norm.lognormal]\n-// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n-\n-#include <random>\n-#include <sstream>\n-#include <testsuite_hooks.h>\n-\n-void\n-test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  std::stringstream str;\n-  std::lognormal_distribution<double> u(5.0, 2.0), v;\n-  std::minstd_rand0 rng;\n-\n-  u(rng); // advance\n-  str << u;\n-\n-  VERIFY( !(u == v) );\n-\n-  str >> v;\n-  VERIFY( u == v );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "dce6a89ecb8d54ce08fa54ae53dc899e0ac7cf32", "filename": "libstdc++-v3/testsuite/26_numerics/random/negative_binomial_distribution/operators/serialize.cc", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805586285dbb8f34cccd4d34295719f59979b649/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnegative_binomial_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805586285dbb8f34cccd4d34295719f59979b649/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnegative_binomial_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnegative_binomial_distribution%2Foperators%2Fserialize.cc?ref=805586285dbb8f34cccd4d34295719f59979b649", "patch": "@@ -1,51 +0,0 @@\n-// { dg-options \"-std=c++0x\" }\n-//\n-// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n-//\n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-//\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-//\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// 26.4.8.2.4 Class template negative_binomial_distribution [rand.dist.bern.negbin]\n-// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n-\n-#include <random>\n-#include <sstream>\n-#include <testsuite_hooks.h>\n-\n-void\n-test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  std::stringstream str;\n-  std::negative_binomial_distribution<int> u(3, 0.75), v;\n-  std::minstd_rand0 rng;\n-\n-  u(rng); // advance\n-  str << u;\n-\n-  VERIFY( !(u == v) );\n-\n-  str >> v;\n-  VERIFY( u == v );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "865aa4566a129e64071e31f12b551ecc7356da61", "filename": "libstdc++-v3/testsuite/26_numerics/random/normal_distribution/operators/serialize.cc", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805586285dbb8f34cccd4d34295719f59979b649/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805586285dbb8f34cccd4d34295719f59979b649/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_distribution%2Foperators%2Fserialize.cc?ref=805586285dbb8f34cccd4d34295719f59979b649", "patch": "@@ -1,51 +0,0 @@\n-// { dg-options \"-std=c++0x\" }\n-//\n-// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n-//\n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-//\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-//\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// 26.4.8.4.1 Class template normal_distribution [rand.dist.norm.normal]\n-// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n-\n-#include <random>\n-#include <sstream>\n-#include <testsuite_hooks.h>\n-\n-void\n-test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  std::stringstream str;\n-  std::normal_distribution<double> u(5.0, 2.0), v;\n-  std::minstd_rand0 rng;\n-\n-  u(rng); // advance\n-  str << u;\n-\n-  VERIFY( !(u == v) );\n-\n-  str >> v;\n-  VERIFY( u == v );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "fc1f15703c1d06b1893a65855981c3f36f003279", "filename": "libstdc++-v3/testsuite/26_numerics/random/piecewise_constant_distribution/operators/serialize.cc", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805586285dbb8f34cccd4d34295719f59979b649/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_constant_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805586285dbb8f34cccd4d34295719f59979b649/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_constant_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_constant_distribution%2Foperators%2Fserialize.cc?ref=805586285dbb8f34cccd4d34295719f59979b649", "patch": "@@ -1,54 +0,0 @@\n-// { dg-options \"-std=c++0x\" }\n-//\n-// 2008-12-05  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n-//\n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-//\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-//\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// 26.4.8.5.2 Class template piecewise_constant_distribution [rand.dist.samp.pconst]\n-// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n-\n-#include <random>\n-#include <sstream>\n-#include <testsuite_hooks.h>\n-\n-void\n-test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  std::stringstream str;\n-  std::vector<double> x = {0.0, 1.0, 2.0, 3.0, 4.0, 5.0};\n-  std::vector<double> wt = {0.5, 1.0, 2.5, 1.5, 0.5};\n-  std::piecewise_constant_distribution<double>\n-     u(x.begin(), x.end(), wt.begin()), v;\n-  std::minstd_rand0 rng;\n-\n-  u(rng); // advance\n-  str << u;\n-\n-  VERIFY( !(u == v) );\n-\n-  str >> v;\n-  VERIFY( u == v );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "fa846dc634eb1989441eab5fafb88cf1badf003a", "filename": "libstdc++-v3/testsuite/26_numerics/random/piecewise_linear_distribution/operators/serialize.cc", "status": "removed", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805586285dbb8f34cccd4d34295719f59979b649/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_linear_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805586285dbb8f34cccd4d34295719f59979b649/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_linear_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_linear_distribution%2Foperators%2Fserialize.cc?ref=805586285dbb8f34cccd4d34295719f59979b649", "patch": "@@ -1,57 +0,0 @@\n-// { dg-options \"-std=c++0x\" }\n-//\n-// 2008-12-05  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n-//\n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-//\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-//\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// 26.4.8.5.3 Class template piecewise_linear_distribution [rand.dist.samp.plinear]\n-// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n-\n-#include <random>\n-#include <sstream>\n-#include <testsuite_hooks.h>\n-\n-void\n-test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  std::stringstream str;\n-\n-  typedef double value_type;\n-  typedef std::piecewise_linear_distribution<double> distribution_type;\n-  std::vector<double> x = {0.0, 1.0, 2.0, 3.0, 4.0, 5.0};\n-  std::vector<double> wt = {0.0, 1.0, 2.5, 1.5, 0.5, 0.0};\n-  distribution_type u(x.begin(), x.end(), wt.begin());\n-  distribution_type v;\n-  std::minstd_rand0 rng;\n-\n-  u(rng); // advance\n-  str << u;\n-\n-  VERIFY( !(u == v) );\n-\n-  str >> v;\n-  VERIFY( u == v );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "bd4c83973b21b6baefd1e0a6e3002d91ffcca5c0", "filename": "libstdc++-v3/testsuite/26_numerics/random/poisson_distribution/operators/serialize.cc", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805586285dbb8f34cccd4d34295719f59979b649/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpoisson_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805586285dbb8f34cccd4d34295719f59979b649/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpoisson_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpoisson_distribution%2Foperators%2Fserialize.cc?ref=805586285dbb8f34cccd4d34295719f59979b649", "patch": "@@ -1,51 +0,0 @@\n-// { dg-options \"-std=c++0x\" }\n-//\n-// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n-//\n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-//\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-//\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// 26.4.8.3.1 Class template poisson_distribution [rand.dist.pois.poisson]\n-// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n-\n-#include <random>\n-#include <sstream>\n-#include <testsuite_hooks.h>\n-\n-void\n-test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  std::stringstream str;\n-  std::poisson_distribution<int> u(5.0), v;\n-  std::minstd_rand0 rng;\n-\n-  u(rng); // advance\n-  str << u;\n-\n-  VERIFY( !(u == v) );\n-\n-  str >> v;\n-  VERIFY( u == v );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "a5bbf299c96889511cb2ad6b2dbc354c73eddafe", "filename": "libstdc++-v3/testsuite/26_numerics/random/student_t_distribution/operators/serialize.cc", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805586285dbb8f34cccd4d34295719f59979b649/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fstudent_t_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805586285dbb8f34cccd4d34295719f59979b649/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fstudent_t_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fstudent_t_distribution%2Foperators%2Fserialize.cc?ref=805586285dbb8f34cccd4d34295719f59979b649", "patch": "@@ -1,51 +0,0 @@\n-// { dg-options \"-std=c++0x\" }\n-//\n-// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n-//\n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-//\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-//\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// 26.4.8.4.6 Class template student_t_distribution [rand.dist.norm.t]\n-// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n-\n-#include <random>\n-#include <sstream>\n-#include <testsuite_hooks.h>\n-\n-void\n-test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  std::stringstream str;\n-  std::student_t_distribution<double> u(1.5), v;\n-  std::minstd_rand0 rng;\n-\n-  u(rng); // advance\n-  str << u;\n-\n-  VERIFY( !(u == v) );\n-\n-  str >> v;\n-  VERIFY( u == v );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "5a100f1c07d1af6d8b067381f7d961aa6e2fd148", "filename": "libstdc++-v3/testsuite/26_numerics/random/uniform_int_distribution/operators/serialize.cc", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805586285dbb8f34cccd4d34295719f59979b649/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_int_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805586285dbb8f34cccd4d34295719f59979b649/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_int_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_int_distribution%2Foperators%2Fserialize.cc?ref=805586285dbb8f34cccd4d34295719f59979b649", "patch": "@@ -1,51 +0,0 @@\n-// { dg-options \"-std=c++0x\" }\n-//\n-// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n-//\n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-//\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-//\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// 26.4.8.1.1 Class template uniform_int_distribution [rand.dist_uni]\n-// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n-\n-#include <random>\n-#include <sstream>\n-#include <testsuite_hooks.h>\n-\n-void\n-test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  std::stringstream str;\n-  std::uniform_int_distribution<int> u(1, 20), v;\n-  std::minstd_rand0 rng;\n-\n-  u(rng); // advance\n-  str << u;\n-\n-  VERIFY( !(u == v) );\n-\n-  str >> v;\n-  VERIFY( u == v );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "d3b99356dc77d80d6385568d05124646e1fef0a8", "filename": "libstdc++-v3/testsuite/26_numerics/random/uniform_real_distribution/operators/serialize.cc", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805586285dbb8f34cccd4d34295719f59979b649/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_real_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805586285dbb8f34cccd4d34295719f59979b649/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_real_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_real_distribution%2Foperators%2Fserialize.cc?ref=805586285dbb8f34cccd4d34295719f59979b649", "patch": "@@ -1,51 +0,0 @@\n-// { dg-options \"-std=c++0x\" }\n-//\n-// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n-//\n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-//\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-//\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// 26.4.8.1.2 Class template uniform_real_distribution [rand.dist.uni.real]\n-// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n-\n-#include <random>\n-#include <sstream>\n-#include <testsuite_hooks.h>\n-\n-void\n-test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  std::stringstream str;\n-  std::uniform_real_distribution<double> u(-5.0, 5.0), v;\n-  std::minstd_rand0 rng;\n-\n-  u(rng); // advance\n-  str << u;\n-\n-  VERIFY( !(u == v) );\n-\n-  str >> v;\n-  VERIFY( u == v );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "d6b5116452ab585b6f90bad1882aed8155234fcd", "filename": "libstdc++-v3/testsuite/26_numerics/random/weibull_distribution/operators/serialize.cc", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805586285dbb8f34cccd4d34295719f59979b649/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fweibull_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805586285dbb8f34cccd4d34295719f59979b649/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fweibull_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fweibull_distribution%2Foperators%2Fserialize.cc?ref=805586285dbb8f34cccd4d34295719f59979b649", "patch": "@@ -1,51 +0,0 @@\n-// { dg-options \"-std=c++0x\" }\n-//\n-// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n-//\n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-//\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-//\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// 26.4.8.3.4 Class template weibull_distribution [rand.dist.pois.weibull]\n-// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n-\n-#include <random>\n-#include <sstream>\n-#include <testsuite_hooks.h>\n-\n-void\n-test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  std::stringstream str;\n-  std::weibull_distribution<double> u(2.0, 3.5), v;\n-  std::minstd_rand0 rng;\n-\n-  u(rng); // advance\n-  str << u;\n-\n-  VERIFY( !(u == v) );\n-\n-  str >> v;\n-  VERIFY( u == v );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n-}"}]}