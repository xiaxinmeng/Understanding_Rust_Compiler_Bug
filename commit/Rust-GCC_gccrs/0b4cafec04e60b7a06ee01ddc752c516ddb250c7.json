{"sha": "0b4cafec04e60b7a06ee01ddc752c516ddb250c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI0Y2FmZWMwNGU2MGI3YTA2ZWUwMWRkYzc1MmM1MTZkZGIyNTBjNw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2007-05-21T23:43:53Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2007-05-21T23:43:53Z"}, "message": "internal.h (struct cpp_reader): Add new fields: nonexistent_file_hash and nonexistent_file_ob.\n\n\t* internal.h (struct cpp_reader): Add new fields:\n\tnonexistent_file_hash and nonexistent_file_ob.\n\t* files.c: Include \"obstack.h\".\n\t(find_file_in_dir): Before trying to open the file, look up the\n\tpath name in the hash table of nonexistent files.  After failing\n\tto open the file, add the path name to the hash table.\n\t(_cpp_find_file): Cache the results of looking up the file name\n\tstarting with the quote and bracket chain heads, if we can.\n\t(nonexistent_file_hash_eq): New static function.\n\t(_cpp_init_files): Initialize pfile->nonexistent_file_hash and\n\tpfile->nonexistent_file_ob.\n\t(_cpp_cleanup_files): Free pfile->nonexistent_file_hash and\n\tpfile->nonexistent_file_ob.\n\nFrom-SVN: r124929", "tree": {"sha": "8192afa5cfab60d4b4ee6d27b517d13b9f66f4fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8192afa5cfab60d4b4ee6d27b517d13b9f66f4fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b4cafec04e60b7a06ee01ddc752c516ddb250c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b4cafec04e60b7a06ee01ddc752c516ddb250c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b4cafec04e60b7a06ee01ddc752c516ddb250c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b4cafec04e60b7a06ee01ddc752c516ddb250c7/comments", "author": null, "committer": null, "parents": [{"sha": "a50411de14fec4cf78acbe5dcc2ec0de7bb5e27f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a50411de14fec4cf78acbe5dcc2ec0de7bb5e27f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a50411de14fec4cf78acbe5dcc2ec0de7bb5e27f"}], "stats": {"total": 97, "additions": 93, "deletions": 4}, "files": [{"sha": "44023594743b1d988f05b7e8038c051692b9132b", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b4cafec04e60b7a06ee01ddc752c516ddb250c7/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b4cafec04e60b7a06ee01ddc752c516ddb250c7/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=0b4cafec04e60b7a06ee01ddc752c516ddb250c7", "patch": "@@ -1,3 +1,19 @@\n+2007-05-21  Ian Lance Taylor  <iant@google.com>\n+\n+\t* internal.h (struct cpp_reader): Add new fields:\n+\tnonexistent_file_hash and nonexistent_file_ob.\n+\t* files.c: Include \"obstack.h\".\n+\t(find_file_in_dir): Before trying to open the file, look up the\n+\tpath name in the hash table of nonexistent files.  After failing\n+\tto open the file, add the path name to the hash table.\n+\t(_cpp_find_file): Cache the results of looking up the file name\n+\tstarting with the quote and bracket chain heads, if we can.\n+\t(nonexistent_file_hash_eq): New static function.\n+\t(_cpp_init_files): Initialize pfile->nonexistent_file_hash and\n+\tpfile->nonexistent_file_ob.\n+\t(_cpp_cleanup_files): Free pfile->nonexistent_file_hash and\n+\tpfile->nonexistent_file_ob.\n+\n 2007-05-14  Janis Johnson  <janis187@us.ibm.com>\n \n         * expr.c (cpp_classify_number): Warn about dfp constant for -pedantic."}, {"sha": "3751184d02f092c56592604a5c171db208004fcc", "filename": "libcpp/files.c", "status": "modified", "additions": 73, "deletions": 4, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b4cafec04e60b7a06ee01ddc752c516ddb250c7/libcpp%2Ffiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b4cafec04e60b7a06ee01ddc752c516ddb250c7/libcpp%2Ffiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ffiles.c?ref=0b4cafec04e60b7a06ee01ddc752c516ddb250c7", "patch": "@@ -1,6 +1,7 @@\n /* Part of CPP library.  File handling.\n    Copyright (C) 1986, 1987, 1989, 1992, 1993, 1994, 1995, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+   Free Software Foundation, Inc.\n    Written by Per Bothner, 1994.\n    Based on CCCP program by Paul Rubin, June 1986\n    Adapted to ANSI C, Richard Stallman, Jan 1987\n@@ -26,6 +27,7 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */\n #include \"cpplib.h\"\n #include \"internal.h\"\n #include \"mkdeps.h\"\n+#include \"obstack.h\"\n #include \"hashtab.h\"\n #include \"md5.h\"\n #include <dirent.h>\n@@ -322,6 +324,16 @@ find_file_in_dir (cpp_reader *pfile, _cpp_file *file, bool *invalid_pch)\n \n   if (path)\n     {\n+      hashval_t hv = htab_hash_string (path);\n+      char *copy;\n+      void **pp;\n+\n+      if (htab_find_with_hash (pfile->nonexistent_file_hash, path, hv) != NULL)\n+\t{\n+\t  file->err_no = ENOENT;\n+\t  return false;\n+\t}\n+\n       file->path = path;\n       if (pch_open_file (pfile, file, invalid_pch))\n \treturn true;\n@@ -335,7 +347,16 @@ find_file_in_dir (cpp_reader *pfile, _cpp_file *file, bool *invalid_pch)\n \t  return true;\n \t}\n \n+      /* We copy the path name onto an obstack partly so that we don't\n+\t leak the memory, but mostly so that we don't fragment the\n+\t heap.  */\n+      copy = obstack_copy0 (&pfile->nonexistent_file_ob, path,\n+\t\t\t    strlen (path));\n       free (path);\n+      pp = htab_find_slot_with_hash (pfile->nonexistent_file_hash,\n+\t\t\t\t     copy, hv, INSERT);\n+      *pp = copy;\n+\n       file->path = file->name;\n     }\n   else\n@@ -396,6 +417,9 @@ _cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir, bool f\n   struct file_hash_entry *entry, **hash_slot;\n   _cpp_file *file;\n   bool invalid_pch = false;\n+  bool saw_bracket_include = false;\n+  bool saw_quote_include = false;\n+  struct cpp_dir *found_in_cache = NULL;\n \n   /* Ensure we get no confusion between cached files and directories.  */\n   if (start_dir == NULL)\n@@ -448,13 +472,19 @@ _cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir, bool f\n       /* Only check the cache for the starting location (done above)\n \t and the quote and bracket chain heads because there are no\n \t other possible starting points for searches.  */\n-      if (file->dir != pfile->bracket_include\n-\t  && file->dir != pfile->quote_include)\n+      if (file->dir == pfile->bracket_include)\n+\tsaw_bracket_include = true;\n+      else if (file->dir == pfile->quote_include)\n+\tsaw_quote_include = true;\n+      else\n \tcontinue;\n \n       entry = search_cache (*hash_slot, file->dir);\n       if (entry)\n-\tbreak;\n+\t{\n+\t  found_in_cache = file->dir;\n+\t  break;\n+\t}\n     }\n \n   if (entry)\n@@ -478,6 +508,29 @@ _cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir, bool f\n   entry->u.file = file;\n   *hash_slot = entry;\n \n+  /* If we passed the quote or bracket chain heads, cache them also.\n+     This speeds up processing if there are lots of -I options.  */\n+  if (saw_bracket_include\n+      && pfile->bracket_include != start_dir\n+      && found_in_cache != pfile->bracket_include)\n+    {\n+      entry = new_file_hash_entry (pfile);\n+      entry->next = *hash_slot;\n+      entry->start_dir = pfile->bracket_include;\n+      entry->u.file = file;\n+      *hash_slot = entry;\n+    }\n+  if (saw_quote_include\n+      && pfile->quote_include != start_dir\n+      && found_in_cache != pfile->quote_include)\n+    {\n+      entry = new_file_hash_entry (pfile);\n+      entry->next = *hash_slot;\n+      entry->start_dir = pfile->quote_include;\n+      entry->u.file = file;\n+      *hash_slot = entry;\n+    }\n+\n   return file;\n }\n \n@@ -997,6 +1050,14 @@ file_hash_eq (const void *p, const void *q)\n   return strcmp (hname, fname) == 0;\n }\n \n+/* Compare entries in the nonexistent file hash table.  These are just\n+   strings.  */\n+static int\n+nonexistent_file_hash_eq (const void *p, const void *q)\n+{\n+  return strcmp (p, q) == 0;\n+}\n+\n /* Initialize everything in this source file.  */\n void\n _cpp_init_files (cpp_reader *pfile)\n@@ -1006,6 +1067,12 @@ _cpp_init_files (cpp_reader *pfile)\n   pfile->dir_hash = htab_create_alloc (127, file_hash_hash, file_hash_eq,\n \t\t\t\t\tNULL, xcalloc, free);\n   allocate_file_hash_entries (pfile);\n+  pfile->nonexistent_file_hash = htab_create_alloc (127, htab_hash_string,\n+\t\t\t\t\t\t    nonexistent_file_hash_eq,\n+\t\t\t\t\t\t    NULL, xcalloc, free);\n+  _obstack_begin (&pfile->nonexistent_file_ob, 0, 0,\n+\t\t  (void *(*) (long)) xmalloc,\n+\t\t  (void (*) (void *)) free);\n }\n \n /* Finalize everything in this source file.  */\n@@ -1014,6 +1081,8 @@ _cpp_cleanup_files (cpp_reader *pfile)\n {\n   htab_delete (pfile->file_hash);\n   htab_delete (pfile->dir_hash);\n+  htab_delete (pfile->nonexistent_file_hash);\n+  obstack_free (&pfile->nonexistent_file_ob, 0);\n }\n \n /* Enter a file name in the hash for the sake of cpp_included.  */"}, {"sha": "9395f6aa10e4efee2679fc03f9ab43a164f79b3b", "filename": "libcpp/internal.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b4cafec04e60b7a06ee01ddc752c516ddb250c7/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b4cafec04e60b7a06ee01ddc752c516ddb250c7/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=0b4cafec04e60b7a06ee01ddc752c516ddb250c7", "patch": "@@ -355,6 +355,10 @@ struct cpp_reader\n   struct file_hash_entry *file_hash_entries;\n   unsigned int file_hash_entries_allocated, file_hash_entries_used;\n \n+  /* Negative path lookup hash table.  */\n+  struct htab *nonexistent_file_hash;\n+  struct obstack nonexistent_file_ob;\n+\n   /* Nonzero means don't look for #include \"foo\" the source-file\n      directory.  */\n   bool quote_ignores_source_dir;"}]}