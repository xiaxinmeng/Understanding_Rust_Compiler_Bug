{"sha": "07d8efe38503f0e330c788d8ad5949e55657d915", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdkOGVmZTM4NTAzZjBlMzMwYzc4OGQ4YWQ1OTQ5ZTU1NjU3ZDkxNQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2009-02-20T15:19:38Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2009-02-20T15:19:38Z"}, "message": "arm.c (arm_builtin_va_list): New function.\n\n2009-02-20  Mark Mitchell  <mark@codesourcery.com>\n            Joseph Myers  <joseph@codesourcery.com>\n\n\t* config/arm/arm.c (arm_builtin_va_list): New function.\n\t(arm_expand_builtin_va_start): Likewise.\n\t(arm_gimplify_va_arg_expr): Likewise.\n\t(TARGET_BUILD_BUILTIN_VA_LIST): Define.\n\t(TARGET_BUILD_BUILTIN_VA_START): Likewise.\n\t(TARGET_BUILD_BUILTIN_VA_ARG_EXPR): Likewise.\n\t(va_list_type): New variable.\n\t(arm_mangle_type): Mangle va_list_type appropriately.\n\ntestsuite:\n\t* gcc.target/arm/va_list.c: New test.\n\t* g++.dg/abi/arm_va_list.C: Likewise.\n\t* lib/target-supports.exp (check_effective_target_arm_eabi): New\n\tfunction.\n\t* g++.dg/cpp0x/temp-va-arg-bug.C, g++.dg/other/stdarg1.C,\n\tg++.dg/warn/miss-format-1.C, g++.dg/warn/miss-format-3.C,\n\tg++.dg/warn/miss-format-4.C, g++.dg/warn/miss-format-5.C,\n\tg++.dg/warn/miss-format-6.C, g++.old-deja/g++.other/vaarg2.C,\n\tg++.old-deja/g++.other/vaarg3.C, g++.old-deja/g++.other/vaarg4.C,\n\tg++.old-deja/g++.pt/builtin.C: Use -Wno-abi on ARM EABI targets.\n\nCo-Authored-By: Joseph Myers <joseph@codesourcery.com>\n\nFrom-SVN: r144323", "tree": {"sha": "e0abda07822fe87f536d61e16a682050bcc09cd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0abda07822fe87f536d61e16a682050bcc09cd1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07d8efe38503f0e330c788d8ad5949e55657d915", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07d8efe38503f0e330c788d8ad5949e55657d915", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07d8efe38503f0e330c788d8ad5949e55657d915", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07d8efe38503f0e330c788d8ad5949e55657d915/comments", "author": null, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1fb9f569958b2f6127f32495821a5b69c0a2c33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1fb9f569958b2f6127f32495821a5b69c0a2c33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1fb9f569958b2f6127f32495821a5b69c0a2c33"}], "stats": {"total": 207, "additions": 204, "deletions": 3}, "files": [{"sha": "70871ff12818d09872c4f0a30cdb4375d56b2f36", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07d8efe38503f0e330c788d8ad5949e55657d915/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07d8efe38503f0e330c788d8ad5949e55657d915/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=07d8efe38503f0e330c788d8ad5949e55657d915", "patch": "@@ -1,3 +1,15 @@\n+2009-02-20  Mark Mitchell  <mark@codesourcery.com>\n+            Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/arm/arm.c (arm_builtin_va_list): New function.\n+\t(arm_expand_builtin_va_start): Likewise.\n+\t(arm_gimplify_va_arg_expr): Likewise.\n+\t(TARGET_BUILD_BUILTIN_VA_LIST): Define.\n+\t(TARGET_BUILD_BUILTIN_VA_START): Likewise.\n+\t(TARGET_BUILD_BUILTIN_VA_ARG_EXPR): Likewise.\n+\t(va_list_type): New variable.\n+\t(arm_mangle_type): Mangle va_list_type appropriately.\n+\n 2009-02-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/39157"}, {"sha": "772f1fc5652aec0519d6cd7972271fb2f916b5c6", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07d8efe38503f0e330c788d8ad5949e55657d915/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07d8efe38503f0e330c788d8ad5949e55657d915/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=07d8efe38503f0e330c788d8ad5949e55657d915", "patch": "@@ -186,6 +186,9 @@ static void arm_cxx_determine_class_data_visibility (tree);\n static bool arm_cxx_class_data_always_comdat (void);\n static bool arm_cxx_use_aeabi_atexit (void);\n static void arm_init_libfuncs (void);\n+static tree arm_build_builtin_va_list (void);\n+static void arm_expand_builtin_va_start (tree, rtx);\n+static tree arm_gimplify_va_arg_expr (tree, tree, tree *, tree *);\n static bool arm_handle_option (size_t, const char *, int);\n static void arm_target_help (void);\n static unsigned HOST_WIDE_INT arm_shift_truncation_mask (enum machine_mode);\n@@ -383,6 +386,13 @@ static bool arm_allocate_stack_slots_for_args (void);\n #undef TARGET_MANGLE_TYPE\n #define TARGET_MANGLE_TYPE arm_mangle_type\n \n+#undef TARGET_BUILD_BUILTIN_VA_LIST\n+#define TARGET_BUILD_BUILTIN_VA_LIST arm_build_builtin_va_list\n+#undef TARGET_EXPAND_BUILTIN_VA_START\n+#define TARGET_EXPAND_BUILTIN_VA_START arm_expand_builtin_va_start\n+#undef TARGET_GIMPLIFY_VA_ARG_EXPR\n+#define TARGET_GIMPLIFY_VA_ARG_EXPR arm_gimplify_va_arg_expr\n+\n #ifdef HAVE_AS_TLS\n #undef TARGET_ASM_OUTPUT_DWARF_DTPREL\n #define TARGET_ASM_OUTPUT_DWARF_DTPREL arm_output_dwarf_dtprel\n@@ -914,6 +924,93 @@ arm_init_libfuncs (void)\n   set_optab_libfunc (umod_optab, SImode, NULL);\n }\n \n+/* On AAPCS systems, this is the \"struct __va_list\".  */\n+static GTY(()) tree va_list_type;\n+\n+/* Return the type to use as __builtin_va_list.  */\n+static tree\n+arm_build_builtin_va_list (void)\n+{\n+  tree va_list_name;\n+  tree ap_field;\n+  \n+  if (!TARGET_AAPCS_BASED)\n+    return std_build_builtin_va_list ();\n+\n+  /* AAPCS \\S 7.1.4 requires that va_list be a typedef for a type\n+     defined as:\n+\n+       struct __va_list \n+       {\n+\t void *__ap;\n+       };\n+\n+     The C Library ABI further reinforces this definition in \\S\n+     4.1.\n+\n+     We must follow this definition exactly.  The structure tag\n+     name is visible in C++ mangled names, and thus forms a part\n+     of the ABI.  The field name may be used by people who\n+     #include <stdarg.h>.  */\n+  /* Create the type.  */\n+  va_list_type = lang_hooks.types.make_type (RECORD_TYPE);\n+  /* Give it the required name.  */\n+  va_list_name = build_decl (TYPE_DECL,\n+\t\t\t     get_identifier (\"__va_list\"),\n+\t\t\t     va_list_type);\n+  DECL_ARTIFICIAL (va_list_name) = 1;\n+  TYPE_NAME (va_list_type) = va_list_name;\n+  /* Create the __ap field.  */\n+  ap_field = build_decl (FIELD_DECL, \n+\t\t\t get_identifier (\"__ap\"),\n+\t\t\t ptr_type_node);\n+  DECL_ARTIFICIAL (ap_field) = 1;\n+  DECL_FIELD_CONTEXT (ap_field) = va_list_type;\n+  TYPE_FIELDS (va_list_type) = ap_field;\n+  /* Compute its layout.  */\n+  layout_type (va_list_type);\n+\n+  return va_list_type;\n+}\n+\n+/* Return an expression of type \"void *\" pointing to the next\n+   available argument in a variable-argument list.  VALIST is the\n+   user-level va_list object, of type __builtin_va_list.  */\n+static tree\n+arm_extract_valist_ptr (tree valist)\n+{\n+  if (TREE_TYPE (valist) == error_mark_node)\n+    return error_mark_node;\n+\n+  /* On an AAPCS target, the pointer is stored within \"struct\n+     va_list\".  */\n+  if (TARGET_AAPCS_BASED)\n+    {\n+      tree ap_field = TYPE_FIELDS (TREE_TYPE (valist));\n+      valist = build3 (COMPONENT_REF, TREE_TYPE (ap_field), \n+\t\t       valist, ap_field, NULL_TREE);\n+    }\n+\n+  return valist;\n+}\n+\n+/* Implement TARGET_EXPAND_BUILTIN_VA_START.  */\n+static void\n+arm_expand_builtin_va_start (tree valist, rtx nextarg)\n+{\n+  valist = arm_extract_valist_ptr (valist);\n+  std_expand_builtin_va_start (valist, nextarg);\n+}\n+\n+/* Implement TARGET_GIMPLIFY_VA_ARG_EXPR.  */\n+static tree\n+arm_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p, \n+\t\t\t  tree *post_p)\n+{\n+  valist = arm_extract_valist_ptr (valist);\n+  return std_gimplify_va_arg_expr (valist, type, pre_p, post_p);\n+}\n+\n /* Implement TARGET_HANDLE_OPTION.  */\n \n static bool\n@@ -19506,6 +19603,21 @@ arm_mangle_type (const_tree type)\n {\n   arm_mangle_map_entry *pos = arm_mangle_map;\n \n+  /* The ARM ABI documents (10th October 2008) say that \"__va_list\"\n+     has to be managled as if it is in the \"std\" namespace.  */\n+  if (TARGET_AAPCS_BASED \n+      && lang_hooks.types_compatible_p (type, va_list_type))\n+    {\n+      static bool warned;\n+      if (!warned && warn_psabi)\n+\t{\n+\t  warned = true;\n+\t  inform (input_location,\n+\t\t  \"the mangling of %<va_list%> has changed in GCC 4.4\");\n+\t}\n+      return \"St9__va_list\";\n+    }\n+\n   if (TREE_CODE (type) != VECTOR_TYPE)\n     return NULL;\n "}, {"sha": "866f6ae3c33a24b803431f9b2a7747ebf9179d64", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07d8efe38503f0e330c788d8ad5949e55657d915/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07d8efe38503f0e330c788d8ad5949e55657d915/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=07d8efe38503f0e330c788d8ad5949e55657d915", "patch": "@@ -1,3 +1,17 @@\n+2009-02-20  Mark Mitchell  <mark@codesourcery.com>\n+            Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.target/arm/va_list.c: New test.\n+\t* g++.dg/abi/arm_va_list.C: Likewise.\n+\t* lib/target-supports.exp (check_effective_target_arm_eabi): New\n+\tfunction.\n+\t* g++.dg/cpp0x/temp-va-arg-bug.C, g++.dg/other/stdarg1.C,\n+\tg++.dg/warn/miss-format-1.C, g++.dg/warn/miss-format-3.C,\n+\tg++.dg/warn/miss-format-4.C, g++.dg/warn/miss-format-5.C,\n+\tg++.dg/warn/miss-format-6.C, g++.old-deja/g++.other/vaarg2.C,\n+\tg++.old-deja/g++.other/vaarg3.C, g++.old-deja/g++.other/vaarg4.C,\n+\tg++.old-deja/g++.pt/builtin.C: Use -Wno-abi on ARM EABI targets.\n+\n 2009-02-20  Jack Howarth  <howarth@bromo.med.uc.edu>\n \n \tPR testsuite/38164"}, {"sha": "45a426a4f388ef15fc2a48750fef73f58219f89c", "filename": "gcc/testsuite/g++.dg/abi/arm_va_list.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07d8efe38503f0e330c788d8ad5949e55657d915/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Farm_va_list.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07d8efe38503f0e330c788d8ad5949e55657d915/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Farm_va_list.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Farm_va_list.C?ref=07d8efe38503f0e330c788d8ad5949e55657d915", "patch": "@@ -0,0 +1,14 @@\n+// { dg-do compile }\n+// { dg-options \"-Wno-abi\" }\n+// { dg-require-effective-target arm_eabi }\n+\n+// AAPCS \\S 7.1.4 requires that va_list be a typedef for \"struct\n+// __va_list\".  The mangling is as if it were \"std::__va_list\".\n+// #include <stdarg.h>\n+typedef __builtin_va_list va_list;\n+\n+// { dg-final { scan-assembler \"\\n_Z1fPSt9__va_list:\" } }\n+void f(va_list*) {}\n+\n+// { dg-final { scan-assembler \"\\n_Z1gSt9__va_listS_:\" } }\n+void g(va_list, va_list) {}"}, {"sha": "085915f907edb5803d454092301986d4c79dd05f", "filename": "gcc/testsuite/g++.dg/cpp0x/temp-va-arg-bug.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07d8efe38503f0e330c788d8ad5949e55657d915/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftemp-va-arg-bug.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07d8efe38503f0e330c788d8ad5949e55657d915/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftemp-va-arg-bug.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftemp-va-arg-bug.C?ref=07d8efe38503f0e330c788d8ad5949e55657d915", "patch": "@@ -1,4 +1,5 @@\n // { dg-options \"--std=c++0x\" }\n+// { dg-options \"-Wno-abi --std=c++0x\" { target arm_eabi } }\n #include <stdarg.h>\n \n struct S { };"}, {"sha": "1ac9e8fb229ed906a8f2656932f061c98863e145", "filename": "gcc/testsuite/g++.dg/other/stdarg1.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07d8efe38503f0e330c788d8ad5949e55657d915/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fstdarg1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07d8efe38503f0e330c788d8ad5949e55657d915/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fstdarg1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fstdarg1.C?ref=07d8efe38503f0e330c788d8ad5949e55657d915", "patch": "@@ -1,5 +1,6 @@\n // Test stdarg function with anonymous argument\n // { dg-do run }\n+// { dg-options \"-Wno-abi\" { target arm_eabi } }\n \n #include <stdarg.h>\n "}, {"sha": "9d99cdbfff0c040f87da2d8cacdff39c2d613f4c", "filename": "gcc/testsuite/g++.dg/warn/miss-format-1.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07d8efe38503f0e330c788d8ad5949e55657d915/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmiss-format-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07d8efe38503f0e330c788d8ad5949e55657d915/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmiss-format-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmiss-format-1.C?ref=07d8efe38503f0e330c788d8ad5949e55657d915", "patch": "@@ -2,6 +2,7 @@\n /* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n /* { dg-do compile } */\n /* { dg-options \"-Wmissing-format-attribute\" } */\n+/* { dg-options \"-Wmissing-format-attribute -Wno-abi\" { target arm_eabi } } */\n /* VxWorks does not provide vscanf, either in kernel or RTP mode.  */\n /* { dg-error \"not declared\" \"\" { target *-*-solaris2.[7-8] *-*-vxworks* } 25 } */\n "}, {"sha": "d131d151175668a79e727ff9c67578e92d7fd5b6", "filename": "gcc/testsuite/g++.dg/warn/miss-format-3.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07d8efe38503f0e330c788d8ad5949e55657d915/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmiss-format-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07d8efe38503f0e330c788d8ad5949e55657d915/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmiss-format-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmiss-format-3.C?ref=07d8efe38503f0e330c788d8ad5949e55657d915", "patch": "@@ -2,6 +2,7 @@\n /* Origin: Kaveh Ghazi <ghazi@caip.rutgers.edu> */\n /* { dg-do compile } */\n /* { dg-options \"-Wmissing-format-attribute\" } */\n+/* { dg-options \"-Wmissing-format-attribute -Wno-abi\" { target arm_eabi } } */\n \n #include <stdarg.h>\n "}, {"sha": "73db0d50baa5ba7114651b1912c2183fd21828bd", "filename": "gcc/testsuite/g++.dg/warn/miss-format-4.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07d8efe38503f0e330c788d8ad5949e55657d915/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmiss-format-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07d8efe38503f0e330c788d8ad5949e55657d915/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmiss-format-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmiss-format-4.C?ref=07d8efe38503f0e330c788d8ad5949e55657d915", "patch": "@@ -2,6 +2,7 @@\n /* Origin: Kaveh Ghazi <ghazi@caip.rutgers.edu> */\n /* { dg-do compile } */\n /* { dg-options \"-Wmissing-format-attribute\" } */\n+/* { dg-options \"-Wmissing-format-attribute -Wno-abi\" { target arm_eabi } } */\n \n #include <stdarg.h>\n "}, {"sha": "cbc27b5e5727b089a61abac20e0f1544c453a61b", "filename": "gcc/testsuite/g++.dg/warn/miss-format-5.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07d8efe38503f0e330c788d8ad5949e55657d915/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmiss-format-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07d8efe38503f0e330c788d8ad5949e55657d915/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmiss-format-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmiss-format-5.C?ref=07d8efe38503f0e330c788d8ad5949e55657d915", "patch": "@@ -2,6 +2,7 @@\n /* Origin: Kaveh Ghazi <ghazi@caip.rutgers.edu> */\n /* { dg-do compile } */\n /* { dg-options \"-Wmissing-format-attribute\" } */\n+/* { dg-options \"-Wmissing-format-attribute -Wno-abi\" { target arm_eabi } } */\n \n #include <stdarg.h>\n "}, {"sha": "f78dbdfa1fd6eddc3eee192b9f689ab43f11fdd8", "filename": "gcc/testsuite/g++.dg/warn/miss-format-6.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07d8efe38503f0e330c788d8ad5949e55657d915/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmiss-format-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07d8efe38503f0e330c788d8ad5949e55657d915/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmiss-format-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmiss-format-6.C?ref=07d8efe38503f0e330c788d8ad5949e55657d915", "patch": "@@ -2,6 +2,7 @@\n /* Origin: Kaveh Ghazi <ghazi@caip.rutgers.edu> */\n /* { dg-do compile } */\n /* { dg-options \"-Wmissing-format-attribute\" } */\n+/* { dg-options \"-Wmissing-format-attribute -Wno-abi\" { target arm_eabi } } */\n \n #include <stdarg.h>\n "}, {"sha": "278f5376f43f3b1cd8a2ae3ff630828d6bb5f503", "filename": "gcc/testsuite/g++.old-deja/g++.other/vaarg2.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07d8efe38503f0e330c788d8ad5949e55657d915/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fvaarg2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07d8efe38503f0e330c788d8ad5949e55657d915/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fvaarg2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fvaarg2.C?ref=07d8efe38503f0e330c788d8ad5949e55657d915", "patch": "@@ -1,4 +1,5 @@\n // { dg-do run  }\n+// { dg-options \"-Wno-abi\" { target arm_eabi } }\n // Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n // Contributed by Nathan Sidwell 4 Oct 1999 <nathan@acm.org>\n "}, {"sha": "f852b08ce5ab23dd11a617a619980b850d4df854", "filename": "gcc/testsuite/g++.old-deja/g++.other/vaarg3.C", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07d8efe38503f0e330c788d8ad5949e55657d915/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fvaarg3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07d8efe38503f0e330c788d8ad5949e55657d915/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fvaarg3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fvaarg3.C?ref=07d8efe38503f0e330c788d8ad5949e55657d915", "patch": "@@ -1,4 +1,5 @@\n // { dg-do assemble  }\n+// { dg-options \"-Wno-abi\" { target arm_eabi } }\n \n // Copyright (C) 1999 Free Software Foundation, Inc.\n // Contributed by Nathan Sidwell 4 Oct 1999 <nathan@acm.org>\n@@ -21,10 +22,10 @@ void fn1(va_list args)\n   const Z &z2 = va_arg (args, Z);       // { dg-error \"incomplete\" } \n \n   va_arg (args, char);    // { dg-warning \"promote\" } \n-  // { dg-message \"should pass\" \"pass\" { target *-*-* } 23 }\n-  // { dg-message \"abort\" \"abort\" { target *-*-* } 23 }\n+  // { dg-message \"should pass\" \"pass\" { target *-*-* } 24 }\n+  // { dg-message \"abort\" \"abort\" { target *-*-* } 24 }\n   va_arg (args, int []);  // { dg-error \"array with unspecified bounds\" } promote\n   va_arg (args, int ());  // { dg-warning \"non-POD\" } promote\n   va_arg (args, bool);    // { dg-warning \"promote\" \"promote\" } \n-  // { dg-message \"abort\" \"abort\" { target *-*-* } 28 }\n+  // { dg-message \"abort\" \"abort\" { target *-*-* } 29 }\n }"}, {"sha": "9ea165bda74f738e96c8a808a97238e3c1372959", "filename": "gcc/testsuite/g++.old-deja/g++.other/vaarg4.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07d8efe38503f0e330c788d8ad5949e55657d915/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fvaarg4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07d8efe38503f0e330c788d8ad5949e55657d915/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fvaarg4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fvaarg4.C?ref=07d8efe38503f0e330c788d8ad5949e55657d915", "patch": "@@ -1,4 +1,5 @@\n // { dg-do assemble  }\n+// { dg-options \"-Wno-abi\" { target arm_eabi } }\n \n // Bug 845. We were treating __builtin_va_arg as a unary expr, not a primary,\n // and hence getting parse errors."}, {"sha": "0a2e241de00dc7272d39906baaec5040ac864e44", "filename": "gcc/testsuite/g++.old-deja/g++.pt/builtin.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07d8efe38503f0e330c788d8ad5949e55657d915/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fbuiltin.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07d8efe38503f0e330c788d8ad5949e55657d915/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fbuiltin.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fbuiltin.C?ref=07d8efe38503f0e330c788d8ad5949e55657d915", "patch": "@@ -1,4 +1,5 @@\n // { dg-do assemble  }\n+// { dg-options \"-Wno-abi\" { target arm_eabi } }\n // Bug: Checking whether A depends on template parms, we crash because\n // __builtin_va_list lacks TYPE_LANG_SPECIFIC.\n "}, {"sha": "b988a0d3365c5c5fe4b775f2ec9e079788c4e1d3", "filename": "gcc/testsuite/gcc.target/arm/va_list.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07d8efe38503f0e330c788d8ad5949e55657d915/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fva_list.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07d8efe38503f0e330c788d8ad5949e55657d915/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fva_list.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fva_list.c?ref=07d8efe38503f0e330c788d8ad5949e55657d915", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_eabi } */\n+\n+#include <stdarg.h>\n+#include <stddef.h>\n+\n+/* AAPCS \\S 7.1.4 requires that va_list match the structure shown\n+   here */\n+typedef struct my_va_list \n+{\n+  void *ap;\n+} my_va_list;\n+\n+int \n+main () {\n+  if (sizeof (va_list) != sizeof (my_va_list))\n+    return 1;\n+  /* This check confirms both that \"va_list\" has a member named \"__ap\"\n+     and that it is located at the correct position.  */\n+  if (offsetof (va_list, __ap) \n+      != offsetof (my_va_list, ap))\n+    return 2;\n+\n+  return 0;\n+}"}, {"sha": "03c1779a60048ed6071d01da006ca2185d1bbf0c", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07d8efe38503f0e330c788d8ad5949e55657d915/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07d8efe38503f0e330c788d8ad5949e55657d915/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=07d8efe38503f0e330c788d8ad5949e55657d915", "patch": "@@ -1451,6 +1451,19 @@ proc check_effective_target_mips_loongson { } {\n     }]\n }\n \n+# Return 1 if this is an ARM target that adheres to the ABI for the ARM\n+# Architecture.\n+\n+proc check_effective_target_arm_eabi { } {\n+    return [check_no_compiler_messages arm_eabi object {\n+\t#ifndef __ARM_EABI__\n+\t#error not EABI\n+\t#else\n+\tint dummy;\n+\t#endif\n+    }]\n+}\n+\n # Return 1 if this is a PowerPC target with floating-point registers.\n \n proc check_effective_target_powerpc_fprs { } {"}]}