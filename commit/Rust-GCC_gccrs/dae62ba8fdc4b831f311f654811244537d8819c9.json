{"sha": "dae62ba8fdc4b831f311f654811244537d8819c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFlNjJiYThmZGM0YjgzMWYzMTFmNjU0ODExMjQ0NTM3ZDg4MTljOQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-11-03T10:14:24Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-11-03T10:14:24Z"}, "message": "stl_numeric.h: Trivial formatting fixes.\n\n2004-11-03  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/stl_numeric.h: Trivial formatting fixes.\n\nFrom-SVN: r90024", "tree": {"sha": "b5f426834d819110035793729d463047ba23ae06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5f426834d819110035793729d463047ba23ae06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dae62ba8fdc4b831f311f654811244537d8819c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dae62ba8fdc4b831f311f654811244537d8819c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dae62ba8fdc4b831f311f654811244537d8819c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dae62ba8fdc4b831f311f654811244537d8819c9/comments", "author": null, "committer": null, "parents": [{"sha": "34a133a808b4c41ab76e81acccf85a1b6e67ccd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34a133a808b4c41ab76e81acccf85a1b6e67ccd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34a133a808b4c41ab76e81acccf85a1b6e67ccd6"}], "stats": {"total": 82, "additions": 50, "deletions": 32}, "files": [{"sha": "61246af8be81f877661c3ca65be35592ac56f67e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dae62ba8fdc4b831f311f654811244537d8819c9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dae62ba8fdc4b831f311f654811244537d8819c9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=dae62ba8fdc4b831f311f654811244537d8819c9", "patch": "@@ -1,3 +1,7 @@\n+2004-11-03  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/stl_numeric.h: Trivial formatting fixes.\n+\n 2004-11-03  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/bits/c++config: Spacing."}, {"sha": "fc15fe3fc527917c1703146fd53d9a893990f566", "filename": "libstdc++-v3/include/bits/stl_numeric.h", "status": "modified", "additions": 46, "deletions": 32, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dae62ba8fdc4b831f311f654811244537d8819c9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dae62ba8fdc4b831f311f654811244537d8819c9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h?ref=dae62ba8fdc4b831f311f654811244537d8819c9", "patch": "@@ -85,7 +85,7 @@ namespace std\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n       __glibcxx_requires_valid_range(__first, __last);\n \n-      for ( ; __first != __last; ++__first)\n+      for (; __first != __last; ++__first)\n \t__init = __init + *__first;\n       return __init;\n     }\n@@ -112,7 +112,7 @@ namespace std\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n       __glibcxx_requires_valid_range(__first, __last);\n \n-      for ( ; __first != __last; ++__first)\n+      for (; __first != __last; ++__first)\n \t__init = __binary_op(__init, *__first);\n       return __init;\n     }\n@@ -141,7 +141,7 @@ namespace std\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n       __glibcxx_requires_valid_range(__first1, __last1);\n \n-      for ( ; __first1 != __last1; ++__first1, ++__first2)\n+      for (; __first1 != __last1; ++__first1, ++__first2)\n \t__init = __init + (*__first1 * *__first2);\n       return __init;\n     }\n@@ -175,7 +175,7 @@ namespace std\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n       __glibcxx_requires_valid_range(__first1, __last1);\n \n-      for ( ; __first1 != __last1; ++__first1, ++__first2)\n+      for (; __first1 != __last1; ++__first1, ++__first2)\n \t__init = __binary_op1(__init, __binary_op2(*__first1, *__first2));\n       return __init;\n     }\n@@ -203,16 +203,19 @@ namespace std\n \n       // concept requirements\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n-      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator, _ValueType>)\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n+\t\t\t\t                         _ValueType>)\n       __glibcxx_requires_valid_range(__first, __last);\n \n-      if (__first == __last) return __result;\n+      if (__first == __last)\n+\treturn __result;\n       *__result = *__first;\n       _ValueType __value = *__first;\n-      while (++__first != __last) {\n-\t__value = __value + *__first;\n-\t*++__result = __value;\n-      }\n+      while (++__first != __last)\n+\t{\n+\t  __value = __value + *__first;\n+\t  *++__result = __value;\n+\t}\n       return ++__result;\n     }\n \n@@ -230,7 +233,8 @@ namespace std\n    *  @param  result  Output to write sums to.\n    *  @return  Iterator pointing just beyond the values written to result.\n    */\n-  template<typename _InputIterator, typename _OutputIterator, typename _BinaryOperation>\n+  template<typename _InputIterator, typename _OutputIterator,\n+\t   typename _BinaryOperation>\n     _OutputIterator\n     partial_sum(_InputIterator __first, _InputIterator __last,\n \t\t_OutputIterator __result, _BinaryOperation __binary_op)\n@@ -239,16 +243,19 @@ namespace std\n \n       // concept requirements\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n-      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator, _ValueType>)\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n+\t\t\t\t                         _ValueType>)\n       __glibcxx_requires_valid_range(__first, __last);\n \n-      if (__first == __last) return __result;\n+      if (__first == __last)\n+\treturn __result;\n       *__result = *__first;\n       _ValueType __value = *__first;\n-      while (++__first != __last) {\n-\t__value = __binary_op(__value, *__first);\n-\t*++__result = __value;\n-      }\n+      while (++__first != __last)\n+\t{\n+\t  __value = __binary_op(__value, *__first);\n+\t  *++__result = __value;\n+\t}\n       return ++__result;\n     }\n \n@@ -272,17 +279,20 @@ namespace std\n \n       // concept requirements\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n-      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator, _ValueType>)\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n+\t\t\t\t                         _ValueType>)\n       __glibcxx_requires_valid_range(__first, __last);\n \n-      if (__first == __last) return __result;\n+      if (__first == __last)\n+\treturn __result;\n       *__result = *__first;\n       _ValueType __value = *__first;\n-      while (++__first != __last) {\n-\t_ValueType __tmp = *__first;\n-\t*++__result = __tmp - __value;\n-\t__value = __tmp;\n-      }\n+      while (++__first != __last)\n+\t{\n+\t  _ValueType __tmp = *__first;\n+\t  *++__result = __tmp - __value;\n+\t  __value = __tmp;\n+\t}\n       return ++__result;\n     }\n \n@@ -298,7 +308,8 @@ namespace std\n    *  @param  result  Output to write sums to.\n    *  @return  Iterator pointing just beyond the values written to result.\n    */\n-  template<typename _InputIterator, typename _OutputIterator, typename _BinaryOperation>\n+  template<typename _InputIterator, typename _OutputIterator,\n+\t   typename _BinaryOperation>\n     _OutputIterator\n     adjacent_difference(_InputIterator __first, _InputIterator __last,\n \t\t\t_OutputIterator __result, _BinaryOperation __binary_op)\n@@ -307,17 +318,20 @@ namespace std\n \n       // concept requirements\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n-      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator, _ValueType>)\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n+\t\t\t\t                         _ValueType>)\n       __glibcxx_requires_valid_range(__first, __last);\n \n-      if (__first == __last) return __result;\n+      if (__first == __last)\n+\treturn __result;\n       *__result = *__first;\n       _ValueType __value = *__first;\n-      while (++__first != __last) {\n-\t_ValueType __tmp = *__first;\n-\t*++__result = __binary_op(__tmp, __value);\n-\t__value = __tmp;\n-      }\n+      while (++__first != __last)\n+\t{\n+\t  _ValueType __tmp = *__first;\n+\t  *++__result = __binary_op(__tmp, __value);\n+\t  __value = __tmp;\n+\t}\n       return ++__result;\n     }\n "}]}