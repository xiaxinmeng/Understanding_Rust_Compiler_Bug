{"sha": "30c2d8df173a6f3ca145cda9f9e261616fca8467", "node_id": "C_kwDOANBUbNoAKDMwYzJkOGRmMTczYTZmM2NhMTQ1Y2RhOWY5ZTI2MTYxNmZjYTg0Njc", "commit": {"author": {"name": "Philipp Tomsich", "email": "philipp.tomsich@vrull.eu", "date": "2022-11-08T19:45:51Z"}, "committer": {"name": "Philipp Tomsich", "email": "philipp.tomsich@vrull.eu", "date": "2022-11-18T20:15:24Z"}, "message": "RISC-V: split to allow formation of sh[123]add before 32bit divw\n\nWhen using strength-reduction, we will reduce a multiplication to a\nsequence of shifts and adds.  If this is performed with 32-bit types\nand followed by a division, the lack of w-form sh[123]add will make\ncombination impossible and lead to a slli + addw being generated.\n\nSplit the sequence with the knowledge that a w-form div will perform\nimplicit sign-extensions.\n\ngcc/ChangeLog:\n\n\t* config/riscv/bitmanip.md: Add a define_split to optimize\n\t  slliw + addiw + divw into sh[123]add + divw.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/zba-shNadd-05.c: New test.", "tree": {"sha": "0785511ec10ba37eb18538bddc3b6f458360e856", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0785511ec10ba37eb18538bddc3b6f458360e856"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30c2d8df173a6f3ca145cda9f9e261616fca8467", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30c2d8df173a6f3ca145cda9f9e261616fca8467", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30c2d8df173a6f3ca145cda9f9e261616fca8467", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30c2d8df173a6f3ca145cda9f9e261616fca8467/comments", "author": {"login": "ptomsich", "id": 14983582, "node_id": "MDQ6VXNlcjE0OTgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/14983582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptomsich", "html_url": "https://github.com/ptomsich", "followers_url": "https://api.github.com/users/ptomsich/followers", "following_url": "https://api.github.com/users/ptomsich/following{/other_user}", "gists_url": "https://api.github.com/users/ptomsich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptomsich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptomsich/subscriptions", "organizations_url": "https://api.github.com/users/ptomsich/orgs", "repos_url": "https://api.github.com/users/ptomsich/repos", "events_url": "https://api.github.com/users/ptomsich/events{/privacy}", "received_events_url": "https://api.github.com/users/ptomsich/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ptomsich", "id": 14983582, "node_id": "MDQ6VXNlcjE0OTgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/14983582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptomsich", "html_url": "https://github.com/ptomsich", "followers_url": "https://api.github.com/users/ptomsich/followers", "following_url": "https://api.github.com/users/ptomsich/following{/other_user}", "gists_url": "https://api.github.com/users/ptomsich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptomsich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptomsich/subscriptions", "organizations_url": "https://api.github.com/users/ptomsich/orgs", "repos_url": "https://api.github.com/users/ptomsich/repos", "events_url": "https://api.github.com/users/ptomsich/events{/privacy}", "received_events_url": "https://api.github.com/users/ptomsich/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acbb5ef06ee97849ecd5412ab56c1dff0f0d2fcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acbb5ef06ee97849ecd5412ab56c1dff0f0d2fcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acbb5ef06ee97849ecd5412ab56c1dff0f0d2fcf"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "73881a98f5ace0c6cd9351e675b92e6320e26433", "filename": "gcc/config/riscv/bitmanip.md", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c2d8df173a6f3ca145cda9f9e261616fca8467/gcc%2Fconfig%2Friscv%2Fbitmanip.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c2d8df173a6f3ca145cda9f9e261616fca8467/gcc%2Fconfig%2Friscv%2Fbitmanip.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fbitmanip.md?ref=30c2d8df173a6f3ca145cda9f9e261616fca8467", "patch": "@@ -39,6 +39,23 @@\n   [(set_attr \"type\" \"bitmanip\")\n    (set_attr \"mode\" \"<X:MODE>\")])\n \n+; When using strength-reduction, we will reduce a multiplication to a\n+; sequence of shifts and adds.  If this is performed with 32-bit types\n+; and followed by a division, the lack of w-form sh[123]add will make\n+; combination impossible and lead to a slli + addw being generated.\n+; Split the sequence with the knowledge that a w-form div will perform\n+; implicit sign-extensions.\n+(define_split\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(sign_extend:DI (div:SI (plus:SI (subreg:SI (ashift:DI (match_operand:DI 1 \"register_operand\")\n+\t\t\t\t\t\t\t       (match_operand:QI 2 \"imm123_operand\")) 0)\n+\t\t\t\t\t\t    (subreg:SI (match_operand:DI 3 \"register_operand\") 0))\n+\t\t(subreg:SI (match_operand:DI 4 \"register_operand\") 0))))\n+   (clobber (match_operand:DI 5 \"register_operand\"))]\n+  \"TARGET_64BIT && TARGET_ZBA\"\n+   [(set (match_dup 5) (plus:DI (ashift:DI (match_dup 1) (match_dup 2)) (match_dup 3)))\n+    (set (match_dup 0) (sign_extend:DI (div:SI (subreg:SI (match_dup 5) 0) (subreg:SI (match_dup 4) 0))))])\n+\n (define_insn \"*shNadduw\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(plus:DI"}, {"sha": "271c3a8c0ac0d01cdadbf5d919808125e17bb2f7", "filename": "gcc/testsuite/gcc.target/riscv/zba-shNadd-05.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c2d8df173a6f3ca145cda9f9e261616fca8467/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzba-shNadd-05.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c2d8df173a6f3ca145cda9f9e261616fca8467/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzba-shNadd-05.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzba-shNadd-05.c?ref=30c2d8df173a6f3ca145cda9f9e261616fca8467", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gc_zba -mabi=lp64\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-O0\" \"-O1\" \"-Os\" \"-Oz\" \"-Og\" } } */\n+\n+long long f(int a, int b)\n+{\n+  return (a * 3) / b;\n+}\n+\n+/* { dg-final { scan-assembler-times \"sh1add\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"divw\\t\" 1 } } */"}]}