{"sha": "36d2acbd78eaa275797be9f7dfd3f7bd1b010646", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZkMmFjYmQ3OGVhYTI3NTc5N2JlOWY3ZGZkM2Y3YmQxYjAxMDY0Ng==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-11-21T18:40:55Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-11-21T18:40:55Z"}, "message": "PR libstdc++/88111 Make maximum block size depend on size_t width\n\n\tPR libstdc++/88111\n\t* include/std/memory_resource (pool_options): Add Doxygen comments.\n\t* src/c++17/memory_resource.cc (pool_sizes): Only use suitable values\n\ton targets with 16-bit or 20-bit size_t type.\n\t(munge_options): Make default values depend on width of size_t type.\n\nFrom-SVN: r266353", "tree": {"sha": "ad61e8273862d4c2df08dc3789df1d6d7c98de3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad61e8273862d4c2df08dc3789df1d6d7c98de3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36d2acbd78eaa275797be9f7dfd3f7bd1b010646", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36d2acbd78eaa275797be9f7dfd3f7bd1b010646", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36d2acbd78eaa275797be9f7dfd3f7bd1b010646", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36d2acbd78eaa275797be9f7dfd3f7bd1b010646/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afd02e4c676dec5b06088a27c2152d772902e0be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afd02e4c676dec5b06088a27c2152d772902e0be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afd02e4c676dec5b06088a27c2152d772902e0be"}], "stats": {"total": 43, "additions": 37, "deletions": 6}, "files": [{"sha": "0ad33dac1ba78be2c2c188b7a3f2be2094566fcf", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36d2acbd78eaa275797be9f7dfd3f7bd1b010646/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36d2acbd78eaa275797be9f7dfd3f7bd1b010646/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=36d2acbd78eaa275797be9f7dfd3f7bd1b010646", "patch": "@@ -1,5 +1,11 @@\n 2018-11-21  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/88111\n+\t* include/std/memory_resource (pool_options): Add Doxygen comments.\n+\t* src/c++17/memory_resource.cc (pool_sizes): Only use suitable values\n+\ton targets with 16-bit or 20-bit size_t type.\n+\t(munge_options): Make default values depend on width of size_t type.\n+\n \tPR libstdc++/88113\n \t* src/c++17/memory_resource.cc (bitset::size_type): Use the smaller\n \tof uint32_t and size_t."}, {"sha": "e9a46a3b455f841c87cae632c14d9230bf17bcf2", "filename": "libstdc++-v3/include/std/memory_resource", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36d2acbd78eaa275797be9f7dfd3f7bd1b010646/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory_resource", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36d2acbd78eaa275797be9f7dfd3f7bd1b010646/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory_resource", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory_resource?ref=36d2acbd78eaa275797be9f7dfd3f7bd1b010646", "patch": "@@ -299,13 +299,25 @@ namespace pmr\n     { return !(__a == __b); }\n \n \n+  /// Parameters for tuning a pool resource's behaviour.\n   struct pool_options\n   {\n+    /** @brief Upper limit on number of blocks in a chunk.\n+     *\n+     * A lower value prevents allocating huge chunks that could remain mostly\n+     * unused, but means pools will need to replenished more frequently.\n+     */\n     size_t max_blocks_per_chunk = 0;\n+\n+    /* @brief Largest block size (in bytes) that should be served from pools.\n+     *\n+     * Larger allocations will be served directly by the upstream resource,\n+     * not from one of the pools managed by the pool resource.\n+     */\n     size_t largest_required_pool_block = 0;\n   };\n \n-  // Common implementation details for unsynchronized/synchronized pool resources.\n+  // Common implementation details for un-/synchronized pool resources.\n   class __pool_resource\n   {\n     friend class synchronized_pool_resource;"}, {"sha": "929df93233c0d868c6e0a87d55adfa124330eb6a", "filename": "libstdc++-v3/src/c++17/memory_resource.cc", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36d2acbd78eaa275797be9f7dfd3f7bd1b010646/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Fmemory_resource.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36d2acbd78eaa275797be9f7dfd3f7bd1b010646/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Fmemory_resource.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Fmemory_resource.cc?ref=36d2acbd78eaa275797be9f7dfd3f7bd1b010646", "patch": "@@ -825,10 +825,15 @@ namespace pmr\n       128, 192,\n       256, 320, 384, 448,\n       512, 768,\n+#if __SIZE_WIDTH__ > 16\n       1024, 1536,\n       2048, 3072,\n-      1<<12, 1<<13, 1<<14, 1<<15, 1<<16, 1<<17,\n+#if __SIZE_WIDTH__ > 20\n+      1<<12, 1<<13, 1<<14,\n+      1<<15, 1<<16, 1<<17,\n       1<<20, 1<<21, 1<<22 // 4MB should be enough for anybody\n+#endif\n+#endif\n   };\n \n   pool_options\n@@ -839,10 +844,13 @@ namespace pmr\n     // replaced with implementation-defined defaults, and sizes may be\n     // rounded to unspecified granularity.\n \n-    // Absolute maximum. Each pool might have a smaller maximum.\n+    // max_blocks_per_chunk sets the absolute maximum for the pool resource.\n+    // Each pool might have a smaller maximum, because pools for very large\n+    // objects might impose  smaller limit.\n     if (opts.max_blocks_per_chunk == 0)\n       {\n-\topts.max_blocks_per_chunk = 1024 * 10; // TODO a good default?\n+\t// Pick a default that depends on the number of bits in size_t.\n+\topts.max_blocks_per_chunk = __SIZE_WIDTH__ << 8;\n       }\n     else\n       {\n@@ -854,10 +862,15 @@ namespace pmr\n \topts.max_blocks_per_chunk = chunk::max_blocks_per_chunk();\n       }\n \n-    // Absolute minimum. Likely to be much larger in practice.\n+    // largest_required_pool_block specifies the largest block size that will\n+    // be allocated from a pool. Larger allocations will come directly from\n+    // the upstream resource and so will not be pooled.\n     if (opts.largest_required_pool_block == 0)\n       {\n-\topts.largest_required_pool_block = 4096; // TODO a good default?\n+\t// Pick a sensible default that depends on the number of bits in size_t\n+\t// (pools with larger block sizes must be explicitly requested by\n+\t// using a non-zero value for largest_required_pool_block).\n+\topts.largest_required_pool_block = __SIZE_WIDTH__ << 6;\n       }\n     else\n       {"}]}