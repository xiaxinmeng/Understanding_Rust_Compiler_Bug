{"sha": "c73356802f430fd51f0d4db1ec928fb093c7c4a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzczMzU2ODAyZjQzMGZkNTFmMGQ0ZGIxZWM5MjhmYjA5M2M3YzRhNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-03-17T02:38:50Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-03-17T02:38:50Z"}, "message": "re PR c++/54764 (In class initialization of non-static lambda member can't be used in class with default template paramer)\n\n\tPR c++/54764\n\tPR c++/55972\n\t* name-lookup.h (tag_scope): Add ts_lambda.\n\t* semantics.c (begin_lambda_type): Use it.\n\t* decl.c (xref_tag_1): Set CLASSTYPE_LAMBDA_EXPR.\n\t* pt.c (check_default_tmpl_args): Ignore lambdas.\n\t(push_template_decl_real): Handle lambdas.\n\t* tree.c (no_linkage_check): Adjust lambda check.\n\nFrom-SVN: r196742", "tree": {"sha": "327525948c4a7e69b6203fbe7bbe1911d384e157", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/327525948c4a7e69b6203fbe7bbe1911d384e157"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c73356802f430fd51f0d4db1ec928fb093c7c4a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c73356802f430fd51f0d4db1ec928fb093c7c4a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c73356802f430fd51f0d4db1ec928fb093c7c4a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c73356802f430fd51f0d4db1ec928fb093c7c4a6/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8e519a8b0a3543210d7103042cc0a2e1b3603832", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e519a8b0a3543210d7103042cc0a2e1b3603832", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e519a8b0a3543210d7103042cc0a2e1b3603832"}], "stats": {"total": 55, "additions": 51, "deletions": 4}, "files": [{"sha": "5f6932f2ef79051de1c5340970d85cfcbbb7a35a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73356802f430fd51f0d4db1ec928fb093c7c4a6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73356802f430fd51f0d4db1ec928fb093c7c4a6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c73356802f430fd51f0d4db1ec928fb093c7c4a6", "patch": "@@ -1,5 +1,14 @@\n 2013-03-16  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/54764\n+\tPR c++/55972\n+\t* name-lookup.h (tag_scope): Add ts_lambda.\n+\t* semantics.c (begin_lambda_type): Use it.\n+\t* decl.c (xref_tag_1): Set CLASSTYPE_LAMBDA_EXPR.\n+\t* pt.c (check_default_tmpl_args): Ignore lambdas.\n+\t(push_template_decl_real): Handle lambdas.\n+\t* tree.c (no_linkage_check): Adjust lambda check.\n+\n \tPR c++/56039\n \t* tree.c (strip_typedefs_expr): Complain about lambda, don't abort.\n "}, {"sha": "b67978de7c0113c35e9665841fc630270f2cbfeb", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73356802f430fd51f0d4db1ec928fb093c7c4a6/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73356802f430fd51f0d4db1ec928fb093c7c4a6/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c73356802f430fd51f0d4db1ec928fb093c7c4a6", "patch": "@@ -11887,11 +11887,12 @@ lookup_and_check_tag (enum tag_types tag_code, tree name,\n \n static tree\n xref_tag_1 (enum tag_types tag_code, tree name,\n-            tag_scope scope, bool template_header_p)\n+            tag_scope orig_scope, bool template_header_p)\n {\n   enum tree_code code;\n   tree t;\n   tree context = NULL_TREE;\n+  tag_scope scope;\n \n   gcc_assert (TREE_CODE (name) == IDENTIFIER_NODE);\n \n@@ -11911,6 +11912,11 @@ xref_tag_1 (enum tag_types tag_code, tree name,\n       gcc_unreachable ();\n     }\n \n+  if (orig_scope == ts_lambda)\n+    scope = ts_current;\n+  else\n+    scope = orig_scope;\n+\n   /* In case of anonymous name, xref_tag is only called to\n      make type node and push name.  Name lookup is not required.  */\n   if (ANON_AGGRNAME_P (name))\n@@ -11984,6 +11990,10 @@ xref_tag_1 (enum tag_types tag_code, tree name,\n \t{\n \t  t = make_class_type (code);\n \t  TYPE_CONTEXT (t) = context;\n+\t  if (orig_scope == ts_lambda)\n+\t    /* Remember that we're declaring a lambda to avoid bogus errors\n+\t       in push_template_decl.  */\n+\t    CLASSTYPE_LAMBDA_EXPR (t) = error_mark_node;\n \t  t = pushtag (name, t, scope);\n \t}\n     }"}, {"sha": "b88ada37c960d1e54bc7ff2af19916b5be0ca55c", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73356802f430fd51f0d4db1ec928fb093c7c4a6/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73356802f430fd51f0d4db1ec928fb093c7c4a6/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=c73356802f430fd51f0d4db1ec928fb093c7c4a6", "patch": "@@ -132,10 +132,11 @@ typedef enum tag_scope {\n   ts_global = 1,\t/* All scopes.  This is the 3.4.1\n \t\t\t   [basic.lookup.unqual] lookup mentioned\n \t\t\t   in [basic.lookup.elab]/2.  */\n-  ts_within_enclosing_non_class = 2\t/* Search within enclosing non-class\n+  ts_within_enclosing_non_class = 2,\t/* Search within enclosing non-class\n \t\t\t\t\t   only, for friend class lookup\n \t\t\t\t\t   according to [namespace.memdef]/3\n \t\t\t\t\t   and [class.friend]/9.  */\n+  ts_lambda = 3\t\t\t/* Declaring a lambda closure.  */\n } tag_scope;\n \n typedef struct GTY(()) cp_class_binding {"}, {"sha": "1bbcba2ac9fd2b3493fbad183643e390809309a6", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73356802f430fd51f0d4db1ec928fb093c7c4a6/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73356802f430fd51f0d4db1ec928fb093c7c4a6/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c73356802f430fd51f0d4db1ec928fb093c7c4a6", "patch": "@@ -4306,6 +4306,13 @@ check_default_tmpl_args (tree decl, tree parms, bool is_primary,\n        local scope.  */\n     return true;\n \n+  if (TREE_CODE (decl) == TYPE_DECL\n+      && TREE_TYPE (decl)\n+      && LAMBDA_TYPE_P (TREE_TYPE (decl)))\n+    /* A lambda doesn't have an explicit declaration; don't complain\n+       about the parms of the enclosing class.  */\n+    return true;\n+\n   if (current_class_type\n       && !TYPE_BEING_DEFINED (current_class_type)\n       && DECL_LANG_SPECIFIC (decl)\n@@ -4674,6 +4681,8 @@ push_template_decl_real (tree decl, bool is_friend)\n   if (!ctx\n       || TREE_CODE (ctx) == FUNCTION_DECL\n       || (CLASS_TYPE_P (ctx) && TYPE_BEING_DEFINED (ctx))\n+      || (TREE_CODE (decl) == TYPE_DECL\n+\t  && LAMBDA_TYPE_P (TREE_TYPE (decl)))\n       || (is_friend && !DECL_TEMPLATE_INFO (decl)))\n     {\n       if (DECL_LANG_SPECIFIC (decl)"}, {"sha": "9a2b7285dc91de8352cd91c4a414ba7672a7f386", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73356802f430fd51f0d4db1ec928fb093c7c4a6/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73356802f430fd51f0d4db1ec928fb093c7c4a6/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=c73356802f430fd51f0d4db1ec928fb093c7c4a6", "patch": "@@ -8984,7 +8984,7 @@ begin_lambda_type (tree lambda)\n     /* Create the new RECORD_TYPE for this lambda.  */\n     type = xref_tag (/*tag_code=*/record_type,\n                      name,\n-                     /*scope=*/ts_within_enclosing_non_class,\n+                     /*scope=*/ts_lambda,\n                      /*template_header_p=*/false);\n   }\n "}, {"sha": "a1cce647b24d6ede73c49e7d49d686ff431e0f6c", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73356802f430fd51f0d4db1ec928fb093c7c4a6/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73356802f430fd51f0d4db1ec928fb093c7c4a6/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=c73356802f430fd51f0d4db1ec928fb093c7c4a6", "patch": "@@ -2028,11 +2028,12 @@ no_linkage_check (tree t, bool relaxed_p)\n       if (TYPE_PTRMEMFUNC_P (t))\n \tgoto ptrmem;\n       /* Lambda types that don't have mangling scope have no linkage.  We\n-\t check CLASSTYPE_LAMBDA_EXPR here rather than LAMBDA_TYPE_P because\n+\t check CLASSTYPE_LAMBDA_EXPR for error_mark_node because\n \t when we get here from pushtag none of the lambda information is\n \t set up yet, so we want to assume that the lambda has linkage and\n \t fix it up later if not.  */\n       if (CLASSTYPE_LAMBDA_EXPR (t)\n+\t  && CLASSTYPE_LAMBDA_EXPR (t) != error_mark_node\n \t  && LAMBDA_TYPE_EXTRA_SCOPE (t) == NULL_TREE)\n \treturn t;\n       /* Fall through.  */"}, {"sha": "2217954596b4a650f99190ffc1a0e90f61a0ddcf", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-defarg4.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73356802f430fd51f0d4db1ec928fb093c7c4a6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-defarg4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73356802f430fd51f0d4db1ec928fb093c7c4a6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-defarg4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-defarg4.C?ref=c73356802f430fd51f0d4db1ec928fb093c7c4a6", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/54764\n+// { dg-require-effective-target c++11 }\n+\n+template<class T = void>\n+struct c\n+{\n+  int (*f)(int) = [](int i){return i + i;};\n+};"}, {"sha": "da7e0bfed20136562ced62b9be760d751ad08088", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-nsdmi3.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73356802f430fd51f0d4db1ec928fb093c7c4a6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-nsdmi3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73356802f430fd51f0d4db1ec928fb093c7c4a6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-nsdmi3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-nsdmi3.C?ref=c73356802f430fd51f0d4db1ec928fb093c7c4a6", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/55972\n+// { dg-do compile { target c++11 } }\n+\n+class C\n+{\n+  void f();\n+  int j = 10;\n+  int i = [this]() { return this->j; }();\n+};"}]}