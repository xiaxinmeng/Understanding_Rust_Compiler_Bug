{"sha": "9a2ef6b84822979f32c7279952c163bf0efac0af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWEyZWY2Yjg0ODIyOTc5ZjMyYzcyNzk5NTJjMTYzYmYwZWZhYzBhZg==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2006-02-09T22:28:23Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2006-02-09T22:28:23Z"}, "message": "tree-ssa-loop-ivopts.c (struct loop_data, loop_data): Removed.\n\n\t* tree-ssa-loop-ivopts.c (struct loop_data, loop_data): Removed.\n\t(struct ivopts_data): Add regs_used field.\n\t(tree_ssa_iv_optimize_init): Do not allocate aux fields for loops.\n\t(ivopts_global_cost_for_size, determine_set_costs): Use data->regs_used\n\tinstead of loop_data->regs_used;\n\t(free_loop_data): Do not free aux fields for loops.\n\t(tree_ssa_iv_optimize): Do not pass loops to tree_ssa_iv_optimize_init\n\tand tree_ssa_iv_optimize_finalize.\n\nFrom-SVN: r110813", "tree": {"sha": "e3ec8376453fc8a6d9beaa2b5ad3570b44e1dfd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3ec8376453fc8a6d9beaa2b5ad3570b44e1dfd2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a2ef6b84822979f32c7279952c163bf0efac0af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a2ef6b84822979f32c7279952c163bf0efac0af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a2ef6b84822979f32c7279952c163bf0efac0af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a2ef6b84822979f32c7279952c163bf0efac0af/comments", "author": null, "committer": null, "parents": [{"sha": "88a6e5f4c91eb9239388fd4acf41f43d6de5c55d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88a6e5f4c91eb9239388fd4acf41f43d6de5c55d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88a6e5f4c91eb9239388fd4acf41f43d6de5c55d"}], "stats": {"total": 60, "additions": 21, "deletions": 39}, "files": [{"sha": "f909aa944094c3003ee79a3b6eddc79638be5113", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a2ef6b84822979f32c7279952c163bf0efac0af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a2ef6b84822979f32c7279952c163bf0efac0af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a2ef6b84822979f32c7279952c163bf0efac0af", "patch": "@@ -1,3 +1,14 @@\n+2006-02-09  Zdenek Dvorak <dvorakz@suse.cz>\n+\n+\t* tree-ssa-loop-ivopts.c (struct loop_data, loop_data): Removed.\n+\t(struct ivopts_data): Add regs_used field.\n+\t(tree_ssa_iv_optimize_init): Do not allocate aux fields for loops.\n+\t(ivopts_global_cost_for_size, determine_set_costs): Use data->regs_used\n+\tinstead of loop_data->regs_used;\n+\t(free_loop_data): Do not free aux fields for loops.\n+\t(tree_ssa_iv_optimize): Do not pass loops to tree_ssa_iv_optimize_init\n+\tand tree_ssa_iv_optimize_finalize.\n+\n 2006-02-09  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* config/sh/sh.h (FUNCTION_VALUE): Don't handle CHAR_TYPE."}, {"sha": "1a181afb88d946f7b0f4f09b33c7560fe6ec7074", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 10, "deletions": 39, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a2ef6b84822979f32c7279952c163bf0efac0af/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a2ef6b84822979f32c7279952c163bf0efac0af/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=9a2ef6b84822979f32c7279952c163bf0efac0af", "patch": "@@ -121,12 +121,6 @@ struct version_info\n   bool preserve_biv;\t/* For the original biv, whether to preserve it.  */\n };\n \n-/* Information attached to loop.  */\n-struct loop_data\n-{\n-  unsigned regs_used;\t/* Number of registers used.  */\n-};\n-\n /* Types of uses.  */\n enum use_type\n {\n@@ -209,6 +203,9 @@ struct ivopts_data\n   /* The currently optimized loop.  */\n   struct loop *current_loop;\n \n+  /* Number of registers used in it.  */\n+  unsigned regs_used;\n+\n   /* Numbers of iterations for all exits of the current loop.  */\n   htab_t niters;\n \n@@ -347,14 +344,6 @@ iv_cand (struct ivopts_data *data, unsigned i)\n   return VEC_index (iv_cand_p, data->iv_candidates, i);\n }\n \n-/* The data for LOOP.  */\n-\n-static inline struct loop_data *\n-loop_data (struct loop *loop)\n-{\n-  return loop->aux;\n-}\n-\n /* The single loop exit if it dominates the latch, NULL otherwise.  */\n \n edge\n@@ -736,24 +725,17 @@ niter_for_single_dom_exit (struct ivopts_data *data)\n }\n \n /* Initializes data structures used by the iv optimization pass, stored\n-   in DATA.  LOOPS is the loop tree.  */\n+   in DATA.  */\n \n static void\n-tree_ssa_iv_optimize_init (struct loops *loops, struct ivopts_data *data)\n+tree_ssa_iv_optimize_init (struct ivopts_data *data)\n {\n-  unsigned i;\n-\n   data->version_info_size = 2 * num_ssa_names;\n   data->version_info = XCNEWVEC (struct version_info, data->version_info_size);\n   data->relevant = BITMAP_ALLOC (NULL);\n   data->important_candidates = BITMAP_ALLOC (NULL);\n   data->max_inv_id = 0;\n   data->niters = htab_create (10, nfe_hash, nfe_eq, free);\n-\n-  for (i = 1; i < loops->num; i++)\n-    if (loops->parray[i])\n-      loops->parray[i]->aux = xcalloc (1, sizeof (struct loop_data));\n-\n   data->iv_uses = VEC_alloc (iv_use_p, heap, 20);\n   data->iv_candidates = VEC_alloc (iv_cand_p, heap, 20);\n   decl_rtl_to_reset = VEC_alloc (tree, heap, 20);\n@@ -4227,9 +4209,7 @@ if (dump_file && (dump_flags & TDF_DETAILS))\n static unsigned\n ivopts_global_cost_for_size (struct ivopts_data *data, unsigned size)\n {\n-  return global_cost_for_size (size,\n-\t\t\t       loop_data (data->current_loop)->regs_used,\n-\t\t\t       n_iv_uses (data));\n+  return global_cost_for_size (size, data->regs_used, n_iv_uses (data));\n }\n \n /* For each size of the induction variable set determine the penalty.  */\n@@ -4293,7 +4273,7 @@ determine_set_costs (struct ivopts_data *data)\n \tn++;\n     }\n \n-  loop_data (loop)->regs_used = n;\n+  data->regs_used = n;\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     fprintf (dump_file, \"  regs_used %d\\n\", n);\n \n@@ -5718,17 +5698,8 @@ free_loop_data (struct ivopts_data *data)\n    loop tree.  */\n \n static void\n-tree_ssa_iv_optimize_finalize (struct loops *loops, struct ivopts_data *data)\n+tree_ssa_iv_optimize_finalize (struct ivopts_data *data)\n {\n-  unsigned i;\n-\n-  for (i = 1; i < loops->num; i++)\n-    if (loops->parray[i])\n-      {\n-\tfree (loops->parray[i]->aux);\n-\tloops->parray[i]->aux = NULL;\n-      }\n-\n   free_loop_data (data);\n   free (data->version_info);\n   BITMAP_FREE (data->relevant);\n@@ -5820,7 +5791,7 @@ tree_ssa_iv_optimize (struct loops *loops)\n   struct loop *loop;\n   struct ivopts_data data;\n \n-  tree_ssa_iv_optimize_init (loops, &data);\n+  tree_ssa_iv_optimize_init (&data);\n \n   /* Optimize the loops starting with the innermost ones.  */\n   loop = loops->tree_root;\n@@ -5845,5 +5816,5 @@ tree_ssa_iv_optimize (struct loops *loops)\n \tloop = loop->outer;\n     }\n \n-  tree_ssa_iv_optimize_finalize (loops, &data);\n+  tree_ssa_iv_optimize_finalize (&data);\n }"}]}