{"sha": "54f7877c8b5290d0a07c6ba26d040fa3f59fddb1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRmNzg3N2M4YjUyOTBkMGEwN2M2YmEyNmQwNDBmYTNmNTlmZGRiMQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-09-07T06:55:51Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-09-07T06:55:51Z"}, "message": "c-common.h (prep_stmt): Declare.\n\n\t* c-common.h (prep_stmt): Declare.\n\t(lang_expand_stmt): Likewise.\n\t* c-decl.c (lang_expand_stmt): Remove.\n\t* c-semantics.c (lang_expand_stmt): Define.\n\t(prep_stmt): New function.\n\t(expand_stmt): Handle common statement types here.\n\n\t* cp-tree.h (init_cp_semantics): Declare.\n\t(genrtl_try_block): Don't declare.\n\t(genrtl_handler): Likewise.\n\t(genrtl_catch_block): Likewise.\n\t(genrtl_ctor_stmt): Likewise.\n\t(genrtl_subobject): Likewise.\n\t(genrtl_do_poplevel): Likewise.\n\t(genrtl_named_return_value): Likewise.\n\t* lex.c (init_parse): Call init_cp_semantics.\n\t* semantics.c (genrtl_try_block): Give it internal linkage.\n\t(genrtl_handler): Likewise.\n\t(genrtl_catch_block): Likewise.\n\t(genrtl_ctor_stmt): Likewise.\n\t(genrtl_subobject): Likewise.\n\t(genrtl_do_poplevel): Likewise.\n\t(genrtl_named_return_value): Likewise.\n\t(lang_expand_stmt): Rename to ...\n\t(cp_expand_stmt): ... this.  Only handle C++-specific nodes.\n\t(init_cp_semantics): Define.\n\nFrom-SVN: r36229", "tree": {"sha": "26b71c56ba6d8b613dd53a45e0c6e5aa848ee50d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26b71c56ba6d8b613dd53a45e0c6e5aa848ee50d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54f7877c8b5290d0a07c6ba26d040fa3f59fddb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54f7877c8b5290d0a07c6ba26d040fa3f59fddb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54f7877c8b5290d0a07c6ba26d040fa3f59fddb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54f7877c8b5290d0a07c6ba26d040fa3f59fddb1/comments", "author": null, "committer": null, "parents": [{"sha": "d93998ecbe474c1485c13276487d17bd0f5406bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d93998ecbe474c1485c13276487d17bd0f5406bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d93998ecbe474c1485c13276487d17bd0f5406bc"}], "stats": {"total": 353, "additions": 193, "deletions": 160}, "files": [{"sha": "1605acc4e4c43824b3f9fd21c04487827df80a09", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54f7877c8b5290d0a07c6ba26d040fa3f59fddb1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54f7877c8b5290d0a07c6ba26d040fa3f59fddb1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=54f7877c8b5290d0a07c6ba26d040fa3f59fddb1", "patch": "@@ -1,3 +1,12 @@\n+2000-09-06  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* c-common.h (prep_stmt): Declare.\n+\t(lang_expand_stmt): Likewise.\n+\t* c-decl.c (lang_expand_stmt): Remove.\n+\t* c-semantics.c (lang_expand_stmt): Define.\n+\t(prep_stmt): New function.\n+\t(expand_stmt): Handle common statement types here.\n+\t\n 2000-09-07  Niibe Yutaka  <gniibe@m17n.org>, Kaz Kojima  <kkojima@rr.iij4u.or.jp>, Alexandre Oliva  <aoliva@redhat.com>\n \n \t* configure.in (sh-*-linux*): Added."}, {"sha": "e995b9978e0b9ac8ea976d534533403db2c116d9", "filename": "gcc/c-common.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54f7877c8b5290d0a07c6ba26d040fa3f59fddb1/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54f7877c8b5290d0a07c6ba26d040fa3f59fddb1/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=54f7877c8b5290d0a07c6ba26d040fa3f59fddb1", "patch": "@@ -264,6 +264,9 @@ extern int (*lang_statement_code_p)             PARAMS ((enum tree_code));\n extern tree walk_stmt_tree\t\t\tPARAMS ((tree *,\n \t\t\t\t\t\t\t walk_tree_fn,\n \t\t\t\t\t\t\t void *));\n+extern void prep_stmt                           PARAMS ((tree));\n+extern void (*lang_expand_stmt)                 PARAMS ((tree));\n+extern void expand_stmt                         PARAMS ((tree));\n \n /* The variant of the C language being processed.  Each C language\n    front-end defines this variable.  */\n@@ -585,8 +588,6 @@ extern int anon_aggr_type_p                     PARAMS ((tree));\n extern void emit_local_var                      PARAMS ((tree));\n extern void make_rtl_for_local_static           PARAMS ((tree));\n extern tree expand_cond                         PARAMS ((tree));\n-extern tree expand_stmt                         PARAMS ((tree));\n-extern tree lang_expand_stmt                    PARAMS ((tree));\n extern void c_expand_return\t\t\tPARAMS ((tree));\n extern tree c_expand_start_case\t\t\tPARAMS ((tree));\n extern void do_case\t\t\t\tPARAMS ((tree, tree));"}, {"sha": "8b006577f94947a408b6ac3de003a97e670e81ea", "filename": "gcc/c-decl.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54f7877c8b5290d0a07c6ba26d040fa3f59fddb1/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54f7877c8b5290d0a07c6ba26d040fa3f59fddb1/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=54f7877c8b5290d0a07c6ba26d040fa3f59fddb1", "patch": "@@ -7000,17 +7000,6 @@ do_case (low_value, high_value)\n     }\n }\n \n-/* Language specific handler of tree nodes used when generating RTL\n-   from a tree.  */\n-\n-tree\n-lang_expand_stmt (t)\n-     tree t ATTRIBUTE_UNUSED;\n-{\n-  abort ();\n-  return NULL_TREE;\n-}\n-\n /* Accessor to set the 'current_function_name_declared' flag.  */\n \n void"}, {"sha": "8a4cf91c6c461e67363d9e06edf7dd094848ed40", "filename": "gcc/c-semantics.c", "status": "modified", "additions": 103, "deletions": 4, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54f7877c8b5290d0a07c6ba26d040fa3f59fddb1/gcc%2Fc-semantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54f7877c8b5290d0a07c6ba26d040fa3f59fddb1/gcc%2Fc-semantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-semantics.c?ref=54f7877c8b5290d0a07c6ba26d040fa3f59fddb1", "patch": "@@ -36,6 +36,10 @@ Boston, MA 02111-1307, USA.  */\n #include \"output.h\"\n #include \"timevar.h\"\n \n+/* If non-NULL, the address of a language-specific function for\n+   expanding statements.  */\n+void (*lang_expand_stmt) PARAMS ((tree));\n+\n static tree prune_unused_decls PARAMS ((tree *, int *, void *));\n \n /* Create an empty statement tree rooted at T.  */\n@@ -643,15 +647,110 @@ genrtl_decl_cleanup (decl, cleanup)\n     expand_decl_cleanup (decl, cleanup);\n }\n \n+/* We're about to expand T, a statement.  Set up appropriate context\n+   for the substitution.  */\n+\n+void\n+prep_stmt (t)\n+     tree t;\n+{\n+  if (!STMT_LINENO_FOR_FN_P (t))\n+    lineno = STMT_LINENO (t);\n+  current_stmt_tree ()->stmts_are_full_exprs_p = STMT_IS_FULL_EXPR_P (t);\n+}\n+\n /* Generate the RTL for the statement T, its substatements, and any\n    other statements at its nesting level. */\n \n-tree\n+void\n expand_stmt (t)\n      tree t;\n {\n-  tree rval;\n-  rval = lang_expand_stmt (t);\n-  return rval;\n+  while (t && t != error_mark_node)\n+    {\n+      int saved_stmts_are_full_exprs_p;\n+\n+      /* Set up context appropriately for handling this statement.  */\n+      saved_stmts_are_full_exprs_p = stmts_are_full_exprs_p ();\n+      prep_stmt (t);\n+\n+      switch (TREE_CODE (t))\n+\t{\n+\tcase RETURN_STMT:\n+\t  genrtl_return_stmt (RETURN_EXPR (t));\n+\t  break;\n+\n+\tcase EXPR_STMT:\n+\t  genrtl_expr_stmt (EXPR_STMT_EXPR (t));\n+\t  break;\n+\n+\tcase DECL_STMT:\n+\t  genrtl_decl_stmt (t);\n+\t  break;\n+\n+\tcase FOR_STMT:\n+\t  genrtl_for_stmt (t);\n+\t  break;\n+\n+\tcase WHILE_STMT:\n+\t  genrtl_while_stmt (t);\n+\t  break;\n+\n+\tcase DO_STMT:\n+\t  genrtl_do_stmt (t);\n+\t  break;\n+\n+\tcase IF_STMT:\n+\t  genrtl_if_stmt (t);\n+\t  break;\n+\n+\tcase COMPOUND_STMT:\n+\t  genrtl_compound_stmt (t);\n+\t  break;\n+\n+\tcase BREAK_STMT:\n+\t  genrtl_break_stmt ();\n+\t  break;\n+\n+\tcase CONTINUE_STMT:\n+\t  genrtl_continue_stmt ();\n+\t  break;\n+\n+\tcase SWITCH_STMT:\n+\t  genrtl_switch_stmt (t);\n+\t  break;\n+\n+\tcase CASE_LABEL:\n+\t  genrtl_case_label (CASE_LOW (t), CASE_HIGH (t));\n+\t  break;\n+\n+\tcase LABEL_STMT:\n+\t  expand_label (LABEL_STMT_LABEL (t));\n+\t  break;\n+\n+\tcase GOTO_STMT:\n+\t  genrtl_goto_stmt (GOTO_DESTINATION (t));\n+\t  break;\n+\n+\tcase ASM_STMT:\n+\t  genrtl_asm_stmt (ASM_CV_QUAL (t), ASM_STRING (t),\n+\t\t\t   ASM_OUTPUTS (t), ASM_INPUTS (t), ASM_CLOBBERS (t));\n+\t  break;\n+\n+\tdefault:\n+\t  if (lang_expand_stmt)\n+\t    (*lang_expand_stmt) (t);\n+\t  else \n+\t    abort ();\n+\t  break;\n+\t}\n+\n+      /* Restore saved state.  */\n+      current_stmt_tree ()->stmts_are_full_exprs_p = \n+\tsaved_stmts_are_full_exprs_p;\n+\n+      /* Go on to the next statement in this scope.  */\n+      t = TREE_CHAIN (t);\n+    }\n }\n "}, {"sha": "396a03211f8a1cfbff345f270d2d7425023bd9f0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54f7877c8b5290d0a07c6ba26d040fa3f59fddb1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54f7877c8b5290d0a07c6ba26d040fa3f59fddb1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=54f7877c8b5290d0a07c6ba26d040fa3f59fddb1", "patch": "@@ -1,5 +1,25 @@\n 2000-09-06  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* cp-tree.h (init_cp_semantics): Declare.\n+\t(genrtl_try_block): Don't declare.\n+\t(genrtl_handler): Likewise.\n+\t(genrtl_catch_block): Likewise.\n+\t(genrtl_ctor_stmt): Likewise.\n+\t(genrtl_subobject): Likewise.\n+\t(genrtl_do_poplevel): Likewise.\n+\t(genrtl_named_return_value): Likewise.\n+\t* lex.c (init_parse): Call init_cp_semantics.\n+\t* semantics.c (genrtl_try_block): Give it internal linkage.\n+\t(genrtl_handler): Likewise.\n+\t(genrtl_catch_block): Likewise.\n+\t(genrtl_ctor_stmt): Likewise.\n+\t(genrtl_subobject): Likewise.\n+\t(genrtl_do_poplevel): Likewise.\n+\t(genrtl_named_return_value): Likewise.\n+\t(lang_expand_stmt): Rename to ...\n+\t(cp_expand_stmt): ... this.  Only handle C++-specific nodes.\n+\t(init_cp_semantics): Define.\n+\n \t* decl.c (initialize_local_var): Remove RTL-generating code.\n \t* semantics.c (genrtl_try_block): Fix formatting.\n "}, {"sha": "f29b04b35e6450bc0342e36ac29236d6a28a6ece", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54f7877c8b5290d0a07c6ba26d040fa3f59fddb1/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54f7877c8b5290d0a07c6ba26d040fa3f59fddb1/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=54f7877c8b5290d0a07c6ba26d040fa3f59fddb1", "patch": "@@ -4286,6 +4286,7 @@ extern tree binfo_for_vbase                     PARAMS ((tree, tree));\n extern void fixup_all_virtual_upcast_offsets    PARAMS ((tree));\n \n /* in semantics.c */\n+extern void init_cp_semantics                   PARAMS ((void));\n extern void finish_expr_stmt                    PARAMS ((tree));\n extern tree begin_if_stmt                       PARAMS ((void));\n extern void finish_if_stmt_cond                 PARAMS ((tree, tree));\n@@ -4375,14 +4376,7 @@ extern void do_pushlevel                        PARAMS ((void));\n extern tree do_poplevel                         PARAMS ((void));\n extern void finish_mem_initializers             PARAMS ((tree));\n \n-extern void genrtl_try_block                    PARAMS ((tree));\n-extern void genrtl_handler                      PARAMS ((tree));\n-extern void genrtl_catch_block                  PARAMS ((tree));\n-extern void genrtl_ctor_stmt                    PARAMS ((tree));\n-extern void genrtl_subobject                    PARAMS ((tree));\n-extern tree genrtl_do_poplevel                  PARAMS ((void));\n extern void clear_out_block                     PARAMS ((void));\n-extern void genrtl_named_return_value           PARAMS ((void));\n extern tree begin_global_stmt_expr              PARAMS ((void));\n extern tree finish_global_stmt_expr             PARAMS ((tree));\n "}, {"sha": "c9d56397259fa42e2f8eb14a248348d03f24a58c", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54f7877c8b5290d0a07c6ba26d040fa3f59fddb1/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54f7877c8b5290d0a07c6ba26d040fa3f59fddb1/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=54f7877c8b5290d0a07c6ba26d040fa3f59fddb1", "patch": "@@ -714,10 +714,10 @@ init_parse (filename)\n   init_reswords ();\n   init_pragma ();\n   init_cp_pragma ();\n-\n   init_spew ();\n   init_tree ();\n   init_cplus_expand ();\n+  init_cp_semantics ();\n \n   add_c_tree_codes ();\n "}, {"sha": "e1a73cee6bc2ec0afae1bfbfc5e65b9b75ee7057", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 56, "deletions": 135, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54f7877c8b5290d0a07c6ba26d040fa3f59fddb1/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54f7877c8b5290d0a07c6ba26d040fa3f59fddb1/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=54f7877c8b5290d0a07c6ba26d040fa3f59fddb1", "patch": "@@ -50,6 +50,14 @@ static tree maybe_convert_cond PARAMS ((tree));\n static tree simplify_aggr_init_exprs_r PARAMS ((tree *, int *, void *));\n static void deferred_type_access_control PARAMS ((void));\n static void emit_associated_thunks PARAMS ((tree));\n+static void genrtl_try_block PARAMS ((tree));\n+static void genrtl_handler PARAMS ((tree));\n+static void genrtl_catch_block PARAMS ((tree));\n+static void genrtl_ctor_stmt PARAMS ((tree));\n+static void genrtl_subobject PARAMS ((tree));\n+static tree genrtl_do_poplevel PARAMS ((void));\n+static void genrtl_named_return_value PARAMS ((void));\n+static void cp_expand_stmt PARAMS ((tree));\n \n /* When parsing a template, LAST_TREE contains the last statement\n    parsed.  These are chained together through the TREE_CHAIN field,\n@@ -592,7 +600,8 @@ finish_case_label (low_value, high_value)\n \n /* Generate the RTL for T, which is a TRY_BLOCK. */\n \n-void genrtl_try_block (t)\n+static void \n+genrtl_try_block (t)\n      tree t;\n {\n   if (CLEANUP_P (t))\n@@ -731,7 +740,7 @@ finish_function_handler_sequence (try_block)\n \n /* Generate the RTL for T, which is a HANDLER. */\n \n-void\n+static void\n genrtl_handler (t)\n      tree t;\n {\n@@ -791,7 +800,7 @@ finish_handler_parms (decl, handler)\n \n /* Generate the RTL for a CATCH_BLOCK. */\n \n-void\n+static void\n genrtl_catch_block (type)\n      tree type;\n {\n@@ -825,7 +834,7 @@ finish_handler (blocks, handler)\n \n /* Generate the RTL for T, which is a CTOR_STMT. */\n \n-void\n+static void\n genrtl_ctor_stmt (t)\n      tree t;\n {\n@@ -991,7 +1000,7 @@ add_decl_stmt (decl)\n \n /* Generate the RTL for a SUBOBJECT. */\n \n-void \n+static void \n genrtl_subobject (cleanup)\n      tree cleanup;\n {\n@@ -1022,7 +1031,7 @@ finish_decl_cleanup (decl, cleanup)\n \n /* Generate the RTL for a RETURN_INIT. */\n \n-void\n+static void\n genrtl_named_return_value ()\n {\n   tree decl;\n@@ -2216,147 +2225,51 @@ finish_typeof (expr)\n   return TREE_TYPE (expr);\n }\n \n-/* We're about to expand T, a statement.  Set up appropriate context\n-   for the substitution.  */\n-\n-void\n-prep_stmt (t)\n-     tree t;\n-{\n-  if (!STMT_LINENO_FOR_FN_P (t))\n-    lineno = STMT_LINENO (t);\n-  current_stmt_tree ()->stmts_are_full_exprs_p = STMT_IS_FULL_EXPR_P (t);\n-}\n-\n /* Generate RTL for the statement T, and its substatements, and any\n    other statements at its nesting level.  */\n \n-tree\n-lang_expand_stmt (t)\n+static void\n+cp_expand_stmt (t)\n      tree t;\n {\n-  tree rval = NULL_TREE;\n-\n-  while (t && t != error_mark_node)\n+  switch (TREE_CODE (t))\n     {\n-      int saved_stmts_are_full_exprs_p;\n+    case CLEANUP_STMT:\n+      genrtl_decl_cleanup (CLEANUP_DECL (t), CLEANUP_EXPR (t));\n+      break;\n \n-      /* Assume we'll have nothing to return.  */\n-      rval = NULL_TREE;\n+    case START_CATCH_STMT:\n+      genrtl_catch_block (TREE_TYPE (t));\n+      break;\n \n-      /* Set up context appropriately for handling this statement.  */\n-      saved_stmts_are_full_exprs_p = stmts_are_full_exprs_p ();\n-      prep_stmt (t);\n+    case CTOR_STMT:\n+      genrtl_ctor_stmt (t);\n+      break;\n \n-      switch (TREE_CODE (t))\n-\t{\n-\tcase RETURN_STMT:\n-\t  genrtl_return_stmt (RETURN_EXPR (t));\n-\t  break;\n-\n-\tcase EXPR_STMT:\n-\t  genrtl_expr_stmt (EXPR_STMT_EXPR (t));\n-\t  break;\n-\n-\tcase DECL_STMT:\n-\t  genrtl_decl_stmt (t);\n-\t  break;\n-\n-\tcase CLEANUP_STMT:\n-\t  genrtl_decl_cleanup (CLEANUP_DECL (t), CLEANUP_EXPR (t));\n-\t  break;\n-\n-\tcase START_CATCH_STMT:\n-\t  genrtl_catch_block (TREE_TYPE (t));\n-\t  break;\n-\n-\tcase CTOR_STMT:\n-\t  genrtl_ctor_stmt (t);\n-\t  break;\n-\n-\tcase FOR_STMT:\n-\t  genrtl_for_stmt (t);\n-\t  break;\n-\n-\tcase WHILE_STMT:\n-\t  genrtl_while_stmt (t);\n-\t  break;\n-\n-\tcase DO_STMT:\n-\t  genrtl_do_stmt (t);\n-\t  break;\n-\n-\tcase IF_STMT:\n-\t  genrtl_if_stmt (t);\n-\t  break;\n-\n-\tcase COMPOUND_STMT:\n-\t  genrtl_compound_stmt (t);\n-\t  break;\n-\n-\tcase BREAK_STMT:\n-\t  genrtl_break_stmt ();\n-\t  break;\n-\n-\tcase CONTINUE_STMT:\n-\t  genrtl_continue_stmt ();\n-\t  break;\n-\n-\tcase SWITCH_STMT:\n-\t  genrtl_switch_stmt (t);\n-\t  break;\n-\n-\tcase CASE_LABEL:\n-\t  genrtl_case_label (CASE_LOW (t), CASE_HIGH (t));\n-\t  break;\n-\n-\tcase LABEL_STMT:\n-\t  expand_label (LABEL_STMT_LABEL (t));\n-\t  break;\n-\n-\tcase GOTO_STMT:\n-\t  genrtl_goto_stmt (GOTO_DESTINATION (t));\n-\t  break;\n-\n-\tcase ASM_STMT:\n-\t  genrtl_asm_stmt (ASM_CV_QUAL (t), ASM_STRING (t),\n-\t\t\t   ASM_OUTPUTS (t), ASM_INPUTS (t), ASM_CLOBBERS (t));\n-\t  break;\n-\n-\tcase TRY_BLOCK:\n-\t  genrtl_try_block (t);\n-\t  break;\n-\n-\tcase HANDLER:\n-\t  genrtl_handler (t);\n-\t  break;\n-\n-\tcase SUBOBJECT:\n-\t  genrtl_subobject (SUBOBJECT_CLEANUP (t));\n-\t  break;\n-\n-\tcase SCOPE_STMT:\n-\t  genrtl_scope_stmt (t);\n-\t  break;\n-\n-\tcase RETURN_INIT:\n-\t  genrtl_named_return_value ();\n-\t  break;\n-\n-\tdefault:\n-\t  my_friendly_abort (19990810);\n-\t  break;\n-\t}\n+    case TRY_BLOCK:\n+      genrtl_try_block (t);\n+      break;\n \n-      /* Restore saved state.  */\n-      current_stmt_tree ()->stmts_are_full_exprs_p = \n-\tsaved_stmts_are_full_exprs_p;\n+    case HANDLER:\n+      genrtl_handler (t);\n+      break;\n \n-      /* Go on to the next statement in this scope.  */\n-      t = TREE_CHAIN (t);\n-    }\n+    case SUBOBJECT:\n+      genrtl_subobject (SUBOBJECT_CLEANUP (t));\n+      break;\n+\n+    case SCOPE_STMT:\n+      genrtl_scope_stmt (t);\n+      break;\n \n-  return rval;\n+    case RETURN_INIT:\n+      genrtl_named_return_value ();\n+      break;\n+\n+    default:\n+      my_friendly_abort (19990810);\n+      break;\n+    }\n }\n \n /* Called from expand_body via walk_tree.  Replace all AGGR_INIT_EXPRs\n@@ -2630,3 +2543,11 @@ expand_body (fn)\n \n   timevar_pop (TV_EXPAND);\n }\n+\n+/* Perform initialization related to this module.  */\n+\n+void\n+init_cp_semantics ()\n+{\n+  lang_expand_stmt = cp_expand_stmt;\n+}"}]}