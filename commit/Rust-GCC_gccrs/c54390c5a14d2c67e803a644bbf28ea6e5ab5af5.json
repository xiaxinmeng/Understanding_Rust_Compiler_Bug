{"sha": "c54390c5a14d2c67e803a644bbf28ea6e5ab5af5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzU0MzkwYzVhMTRkMmM2N2U4MDNhNjQ0YmJmMjhlYTZlNWFiNWFmNQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-03-28T08:59:41Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-03-28T08:59:41Z"}, "message": "2003\ufffd03-28  Michael Koch  <konqueror@gmx.de>\n\n\t* java/io/FileOutputStream.java:\n\tMerged class documentation and authors with classpath.\n\t(FileOutputStream): Partly merged with classpath.\n\t(write): Merged with classpath.\n\t(getChannel): Make it synchronized instead of explicit block in this\n\tmethod.\n\t* java/io/RandomAccessFile.java:\n\tMerged class documentation and authors with classpath.\n\nFrom-SVN: r64963", "tree": {"sha": "cd0b4ec0e8d4c924eb78e6228f94a6fceff29411", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd0b4ec0e8d4c924eb78e6228f94a6fceff29411"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c54390c5a14d2c67e803a644bbf28ea6e5ab5af5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c54390c5a14d2c67e803a644bbf28ea6e5ab5af5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c54390c5a14d2c67e803a644bbf28ea6e5ab5af5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c54390c5a14d2c67e803a644bbf28ea6e5ab5af5/comments", "author": null, "committer": null, "parents": [{"sha": "f7670e7ba14e01b614f15672a144dcdf0ac350de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7670e7ba14e01b614f15672a144dcdf0ac350de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7670e7ba14e01b614f15672a144dcdf0ac350de"}], "stats": {"total": 68, "additions": 48, "deletions": 20}, "files": [{"sha": "97dc76fa32e5b85a5b0697b55d4bb9d3a0efd694", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54390c5a14d2c67e803a644bbf28ea6e5ab5af5/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54390c5a14d2c67e803a644bbf28ea6e5ab5af5/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=c54390c5a14d2c67e803a644bbf28ea6e5ab5af5", "patch": "@@ -1,3 +1,14 @@\n+2003\ufffd03-28  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/io/FileOutputStream.java:\n+\tMerged class documentation and authors with classpath.\n+\t(FileOutputStream): Partly merged with classpath.\n+\t(write): Merged with classpath.\n+\t(getChannel): Make it synchronized instead of explicit block in this\n+\tmethod.\n+\t* java/io/RandomAccessFile.java:\n+\tMerged class documentation and authors with classpath.\n+\n 2003-03-26  Tom Tromey  <tromey@redhat.com>\n \n \t* java/lang/natRuntime.cc (insertSystemProperties): Set"}, {"sha": "1c75ccd04cd6d151d554b3a7a9a271f1d22e1fd6", "filename": "libjava/java/io/FileOutputStream.java", "status": "modified", "additions": 26, "deletions": 15, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54390c5a14d2c67e803a644bbf28ea6e5ab5af5/libjava%2Fjava%2Fio%2FFileOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54390c5a14d2c67e803a644bbf28ea6e5ab5af5/libjava%2Fjava%2Fio%2FFileOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFileOutputStream.java?ref=c54390c5a14d2c67e803a644bbf28ea6e5ab5af5", "patch": "@@ -47,8 +47,11 @@\n  */\n \n /**\n+ * This classes allows a stream of data to be written to a disk file or\n+ * any open <code>FileDescriptor</code>.\n+ *\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n  * @author Tom Tromey <tromey@cygnus.com>\n- * @date September 24, 1998 \n  */\n public class FileOutputStream extends OutputStream\n {\n@@ -174,9 +177,15 @@ public FileOutputStream (File file, boolean append)\n   public FileOutputStream (FileDescriptor fdObj)\n     throws SecurityException\n   {\n+    // Hmm, no other exception but this one to throw, but if the descriptor\n+    // isn't valid, we surely don't have \"permission\" to write to it.\n+    if (!fdObj.valid())\n+      throw new SecurityException(\"Invalid FileDescriptor\");\n+\n     SecurityManager s = System.getSecurityManager();\n     if (s != null)\n       s.checkWrite(fdObj);\n+\n     fd = fdObj;\n   }\n \n@@ -221,9 +230,10 @@ public void write (int b) throws IOException\n    *\n    * @exception IOException If an error occurs\n    */\n-  public void write (byte[] b) throws IOException, NullPointerException\n+  public void write (byte[] buf)\n+    throws IOException\n   {\n-    fd.write (b, 0, b.length);\n+    fd.write (buf, 0, buf.length);\n   }\n \n   /**\n@@ -236,12 +246,15 @@ public void write (byte[] b) throws IOException, NullPointerException\n    *\n    * @exception IOException If an error occurs\n    */\n-  public void write (byte[] b, int off, int len)\n-    throws IOException, NullPointerException, IndexOutOfBoundsException\n+  public void write (byte[] buf, int offset, int len)\n+    throws IOException\n   {\n-    if (off < 0 || len < 0 || off + len > b.length)\n+    if (offset < 0\n+        || len < 0\n+        || offset + len > buf.length)\n       throw new ArrayIndexOutOfBoundsException ();\n-    fd.write (b, off, len);\n+    \n+    fd.write (buf, offset, len);\n   }\n \n   /**\n@@ -263,15 +276,13 @@ public void close () throws IOException\n    * A file channel must be created by first creating an instance of\n    * Input/Output/RandomAccessFile and invoking the getChannel() method on it.\n    */\n-  public FileChannel getChannel ()\n+  public synchronized FileChannel getChannel() \n   {\n-    synchronized (this)\n-      {\n-        if (ch == null)\n-          ch = new FileChannelImpl (fd, true, this);\n+    if (ch == null)\n+      ch = new FileChannelImpl (fd, true, this);\n \n-        return ch;\n-      }\n+    return ch;\n   }\n \n-}\n+} // class FileOutputStream\n+"}, {"sha": "21838c5f0cc27226990df5d8f3a2527f3a2b4c1f", "filename": "libjava/java/io/RandomAccessFile.java", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54390c5a14d2c67e803a644bbf28ea6e5ab5af5/libjava%2Fjava%2Fio%2FRandomAccessFile.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54390c5a14d2c67e803a644bbf28ea6e5ab5af5/libjava%2Fjava%2Fio%2FRandomAccessFile.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FRandomAccessFile.java?ref=c54390c5a14d2c67e803a644bbf28ea6e5ab5af5", "patch": "@@ -41,16 +41,22 @@\n import java.nio.channels.FileChannel;\n import gnu.java.nio.FileChannelImpl;\n \n-/**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date September 25, 1998 \n- */\n-\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * Status: Believe complete and correct to 1.1.\n  */\n \n+/**\n+ * This class allows reading and writing of files at random locations.\n+ * Most Java I/O classes are either pure sequential input or output.  This\n+ * class fulfills the need to be able to read the bytes of a file in an\n+ * arbitrary order.  In addition, this class implements the\n+ * <code>DataInput</code> and <code>DataOutput</code> interfaces to allow\n+ * the reading and writing of Java primitives.\n+ *\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ */\n public class RandomAccessFile implements DataOutput, DataInput\n {\n "}]}