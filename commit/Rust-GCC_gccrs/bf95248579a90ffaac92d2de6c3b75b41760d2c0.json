{"sha": "bf95248579a90ffaac92d2de6c3b75b41760d2c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY5NTI0ODU3OWE5MGZmYWFjOTJkMmRlNmMzYjc1YjQxNzYwZDJjMA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2001-12-28T14:00:18Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2001-12-28T14:00:18Z"}, "message": "basic_string.h (insert(__pos, __s, __n)): Optimize by avoiding temporaries and working in-place when possible.\n\n2001-12-28  Paolo Carlini  <pcarlini@unitus.it>\n            Nathan Myers  <ncm@cantrip.org>\n\n\t* include/bits/basic_string.h (insert(__pos, __s, __n)):\n\tOptimize by avoiding temporaries and working in-place when possible.\n\t(insert(__pos1, __str)): Call insert(__pos1, __str, __pos2, __n).\n\t(insert(__pos1, __str, __pos2, __n)): Call insert(__pos, __s, __n).\n\t* testsuite/21_strings/insert.cc (test02): New testcases.\n\nCo-Authored-By: Nathan Myers <ncm@cantrip.org>\n\nFrom-SVN: r48345", "tree": {"sha": "7708534d0c4ac2441602a8463a62122c1c96af22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7708534d0c4ac2441602a8463a62122c1c96af22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf95248579a90ffaac92d2de6c3b75b41760d2c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf95248579a90ffaac92d2de6c3b75b41760d2c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf95248579a90ffaac92d2de6c3b75b41760d2c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf95248579a90ffaac92d2de6c3b75b41760d2c0/comments", "author": null, "committer": null, "parents": [{"sha": "17e9e88c2e9329a033e2559ae20105490d46ca4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17e9e88c2e9329a033e2559ae20105490d46ca4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17e9e88c2e9329a033e2559ae20105490d46ca4b"}], "stats": {"total": 121, "additions": 106, "deletions": 15}, "files": [{"sha": "af9d997dad9ab0ff6ba51d6f8ab429b93a1466c7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf95248579a90ffaac92d2de6c3b75b41760d2c0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf95248579a90ffaac92d2de6c3b75b41760d2c0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bf95248579a90ffaac92d2de6c3b75b41760d2c0", "patch": "@@ -1,3 +1,12 @@\n+2001-12-28  Paolo Carlini  <pcarlini@unitus.it>\n+            Nathan Myers  <ncm@cantrip.org>\n+\n+\t* include/bits/basic_string.h (insert(__pos, __s, __n)):\n+\tOptimize by avoiding temporaries and working in-place when possible.\n+\t(insert(__pos1, __str)): Call insert(__pos1, __str, __pos2, __n).\n+\t(insert(__pos1, __str, __pos2, __n)): Call insert(__pos, __s, __n).\n+\t* testsuite/21_strings/insert.cc (test02): New testcases.\n+\n 2001-12-27  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* testsuite/testsuite_hooks.h (gnu_counting_struct):  Add."}, {"sha": "d25d9def39b00b3008c2fea79b17f32383356273", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 39, "deletions": 15, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf95248579a90ffaac92d2de6c3b75b41760d2c0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf95248579a90ffaac92d2de6c3b75b41760d2c0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=bf95248579a90ffaac92d2de6c3b75b41760d2c0", "patch": "@@ -531,29 +531,53 @@ namespace std\n \n       basic_string& \n       insert(size_type __pos1, const basic_string& __str)\n-      { \n-\titerator __p = _M_check(__pos1);\n-\tthis->replace(__p, __p, __str._M_ibegin(), __str._M_iend());\n-        return *this; \n-      }\n+      { return this->insert(__pos1, __str, 0, __str.size()); }\n \n       basic_string& \n       insert(size_type __pos1, const basic_string& __str,\n \t     size_type __pos2, size_type __n)\n-      { \n-\titerator __p = _M_check(__pos1);\n-\tthis->replace(__p, __p, __str._M_check(__pos2), \n-\t\t      __str._M_fold(__pos2, __n));\n-        return *this; \n+      {\n+\tconst size_type __strsize = __str.size();\n+ \tif (__pos2 > __strsize)\n+\t  __throw_out_of_range(\"basic_string::insert\");\n+\tconst bool __testn = __n < __strsize - __pos2;\n+\tconst size_type __newsize = __testn ? __n : __strsize - __pos2;\n+\treturn this->insert(__pos1, __str._M_data() + __pos2, __newsize); \n       }\n \n       basic_string& \n       insert(size_type __pos, const _CharT* __s, size_type __n)\n-      { \n-\titerator __p = _M_check(__pos);\n-\tthis->replace(__p, __p, __s, __s + __n);\n-        return *this; \n-      }\n+      {\n+\tconst size_type __size = this->size();\n+ \tif (__pos > __size)\n+\t  __throw_out_of_range(\"basic_string::insert\");\n+\tif (__n + __size > this->max_size())\n+\t  __throw_length_error(\"basic_string::insert\");\n+\tif (_M_rep()->_M_is_shared() || less<const _CharT*>()(__s, _M_data())\n+\t    || less<const _CharT*>()(_M_data() + __size, __s))\n+\t  return _M_replace_safe(_M_ibegin() + __pos, _M_ibegin() + __pos,\n+\t\t\t\t __s, __s + __n);\n+\telse\n+\t  {\n+\t    // Work in-place. If _M_mutate reallocates the string, __s\n+\t    // does not point anymore to valid data, therefore we save its\n+\t    // offset, then we restore it.\n+\t    const size_type __off = __s - _M_data();\n+\t    _M_mutate(__pos, 0, __n);\n+\t    __s = _M_data() + __off;\n+\t    _CharT* __p = _M_data() + __pos;\n+\t    if (__s  + __n <= __p)\n+\t      traits_type::copy(__p, __s, __n);\n+\t    else if (__s >= __p)\n+\t      traits_type::copy(__p, __s + __n, __n);\n+\t    else\n+\t      {\n+\t\ttraits_type::copy(__p, __s, __p - __s);\n+\t\ttraits_type::copy(__p + (__p - __s), __p + __n, __n - (__p - __s));\n+\t      }\n+\t    return *this;\n+\t  }\n+       }\n \n       basic_string&  \n       insert(size_type __pos, const _CharT* __s)"}, {"sha": "e6140ac2e9bb24178bb14d4e4a2f3c7bfa31a840", "filename": "libstdc++-v3/testsuite/21_strings/insert.cc", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf95248579a90ffaac92d2de6c3b75b41760d2c0/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Finsert.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf95248579a90ffaac92d2de6c3b75b41760d2c0/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Finsert.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Finsert.cc?ref=bf95248579a90ffaac92d2de6c3b75b41760d2c0", "patch": "@@ -187,9 +187,67 @@ int test01(void)\n   return test;\n }\n \n+// Once more\n+//   string& insert(size_type __p, const char* s, size_type n);\n+//   string& insert(size_type __p, const char* s);\n+// but now s points inside the _Rep\n+int test02(void)\n+{\n+  bool test = true;\n+\n+  std::string str01;\n+  const char* title = \"Everything was beautiful, and nothing hurt\";\n+  // Increasing size: str01 is reallocated every time.\n+  str01 = title;\n+  str01.insert(0, str01.c_str() + str01.size() - 4, 4);\n+  VERIFY( str01 == \"hurtEverything was beautiful, and nothing hurt\" );\n+  str01 = title;\n+  str01.insert(0, str01.c_str(), 5);\n+  VERIFY( str01 == \"EveryEverything was beautiful, and nothing hurt\" );\n+  str01 = title;\n+  str01.insert(10, str01.c_str() + 4, 6);\n+  VERIFY( str01 == \"Everythingything was beautiful, and nothing hurt\" );\n+  str01 = title;\n+  str01.insert(15, str01.c_str(), 10);\n+  VERIFY( str01 == \"Everything was Everythingbeautiful, and nothing hurt\" );\n+  str01 = title;\n+  str01.insert(15, str01.c_str() + 11, 13);\n+  VERIFY( str01 == \"Everything was was beautifulbeautiful, and nothing hurt\" );\n+  str01 = title;\n+  str01.insert(0, str01.c_str());\n+  VERIFY( str01 == \"Everything was beautiful, and nothing hurt\"\n+\t  \"Everything was beautiful, and nothing hurt\");\n+  // Again: no reallocations.\n+  str01 = title;\n+  str01.insert(0, str01.c_str() + str01.size() - 4, 4);\n+  VERIFY( str01 == \"hurtEverything was beautiful, and nothing hurt\" );\n+  str01 = title;\n+  str01.insert(0, str01.c_str(), 5);\n+  VERIFY( str01 == \"EveryEverything was beautiful, and nothing hurt\" );\n+  str01 = title;\n+  str01.insert(10, str01.c_str() + 4, 6);\n+  VERIFY( str01 == \"Everythingything was beautiful, and nothing hurt\" );\n+  str01 = title;\n+  str01.insert(15, str01.c_str(), 10);\n+  VERIFY( str01 == \"Everything was Everythingbeautiful, and nothing hurt\" );\n+  str01 = title;\n+  str01.insert(15, str01.c_str() + 11, 13);\n+  VERIFY( str01 == \"Everything was was beautifulbeautiful, and nothing hurt\" );\n+  str01 = title;\n+  str01.insert(0, str01.c_str());\n+  VERIFY( str01 == \"Everything was beautiful, and nothing hurt\"\n+\t  \"Everything was beautiful, and nothing hurt\");\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+  return test;\n+}\n+\n int main()\n { \n   __set_testsuite_memlimit();\n   test01();\n+  test02();\n   return 0;\n }"}]}