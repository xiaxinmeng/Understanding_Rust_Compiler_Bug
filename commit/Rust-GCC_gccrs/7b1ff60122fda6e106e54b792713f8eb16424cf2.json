{"sha": "7b1ff60122fda6e106e54b792713f8eb16424cf2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2IxZmY2MDEyMmZkYTZlMTA2ZTU0Yjc5MjcxM2Y4ZWIxNjQyNGNmMg==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2018-12-11T04:56:54Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2018-12-11T04:56:54Z"}, "message": "re PR tree-optimization/80520 (Performance regression from missing if-conversion)\n\n\tPR tree-optimization/80520\n\t* gimple-ssa-split-paths.c (is_feasible_trace): Recognize half\n\tdiamonds that are likely if convertable.\n\n\t* gcc.dg/tree-ssa/split-path-5.c: Update expected output.\n\t* gcc.dg/tree-ssa/split-path-11.c: New test.\n\nFrom-SVN: r266971", "tree": {"sha": "09cffab5c6b9261ef9dc7e5e720905d5a37b2f04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09cffab5c6b9261ef9dc7e5e720905d5a37b2f04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b1ff60122fda6e106e54b792713f8eb16424cf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b1ff60122fda6e106e54b792713f8eb16424cf2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b1ff60122fda6e106e54b792713f8eb16424cf2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b1ff60122fda6e106e54b792713f8eb16424cf2/comments", "author": null, "committer": null, "parents": [{"sha": "72cfde41e5fddeeb3463a358e66d2c033cbfe20b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72cfde41e5fddeeb3463a358e66d2c033cbfe20b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72cfde41e5fddeeb3463a358e66d2c033cbfe20b"}], "stats": {"total": 120, "additions": 119, "deletions": 1}, "files": [{"sha": "eddcdc3f84399132e988472d62c40f4e2b5f0c72", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b1ff60122fda6e106e54b792713f8eb16424cf2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b1ff60122fda6e106e54b792713f8eb16424cf2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b1ff60122fda6e106e54b792713f8eb16424cf2", "patch": "@@ -1,3 +1,9 @@\n+2018-12-10  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/80520\n+\t* gimple-ssa-split-paths.c (is_feasible_trace): Recognize half\n+\tdiamonds that are likely if convertable.\n+\n 2018-12-10  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/86196"}, {"sha": "915965260459e045af73ed36900f979def3fc27a", "filename": "gcc/gimple-ssa-split-paths.c", "status": "modified", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b1ff60122fda6e106e54b792713f8eb16424cf2/gcc%2Fgimple-ssa-split-paths.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b1ff60122fda6e106e54b792713f8eb16424cf2/gcc%2Fgimple-ssa-split-paths.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-split-paths.c?ref=7b1ff60122fda6e106e54b792713f8eb16424cf2", "patch": "@@ -203,6 +203,98 @@ is_feasible_trace (basic_block bb)\n \t}\n     }\n \n+  /* Canonicalize the form.  */\n+  if (num_stmts_in_pred1 == 0 && num_stmts_in_pred2 == 1)\n+    {\n+      std::swap (pred1, pred2);\n+      std::swap (num_stmts_in_pred1, num_stmts_in_pred2);\n+    }\n+\n+  /* Another variant.  This one is half-diamond.  */\n+  if (num_stmts_in_pred1 == 1 && num_stmts_in_pred2 == 0\n+      && dominated_by_p (CDI_DOMINATORS, pred1, pred2))\n+    {\n+      gimple *stmt1 = last_and_only_stmt (pred1);\n+\n+      /* The only statement in PRED1 must be an assignment that is\n+\t not a good candidate for if-conversion.   This may need some\n+\t generalization.  */\n+      if (stmt1 && gimple_code (stmt1) == GIMPLE_ASSIGN)\n+\t{\n+\t  enum tree_code code1 = gimple_assign_rhs_code (stmt1);\n+\n+\t  if (!poor_ifcvt_candidate_code (code1))\n+\t    {\n+\t      tree lhs1 = gimple_assign_lhs (stmt1);\n+\t      tree rhs1 = gimple_assign_rhs1 (stmt1);\n+\n+\t      gimple_stmt_iterator gsi;\n+\t      for (gsi = gsi_start_phis (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n+\t\t{\n+\t\t  gimple *phi = gsi_stmt (gsi);\n+\t\t  if ((gimple_phi_arg_def (phi, 0) == lhs1\n+\t\t       && gimple_phi_arg_def (phi, 1) == rhs1)\n+\t\t      || (gimple_phi_arg_def (phi, 1) == lhs1\n+\t\t\t  && gimple_phi_arg_def (phi, 0) == rhs1))\n+\t\t    {\n+\t\t      if (dump_file && (dump_flags & TDF_DETAILS))\n+\t\t\tfprintf (dump_file,\n+\t\t\t\t \"Block %d appears to be a join point for \"\n+\t\t\t\t \"if-convertable half-diamond.\\n\",\n+\t\t\t\t bb->index);\n+\t\t      return false;\n+\t\t    }\n+\t\t}\n+\t    }\n+\t}\n+    }\n+\n+  /* Canonicalize the form.  */\n+  if (num_stmts_in_pred1 == 0 && num_stmts_in_pred2 == 1)\n+    {\n+      std::swap (pred1, pred2);\n+      std::swap (num_stmts_in_pred1, num_stmts_in_pred2);\n+    }\n+\n+  /* Another variant.  This one is half-diamond.  */\n+  if (num_stmts_in_pred1 == 1 && num_stmts_in_pred2 == 0\n+      && dominated_by_p (CDI_DOMINATORS, pred1, pred2))\n+    {\n+      gimple *stmt1 = last_and_only_stmt (pred1);\n+\n+      /* The only statement in PRED1 must be an assignment that is\n+\t not a good candidate for if-conversion.   This may need some\n+\t generalization.  */\n+      if (stmt1 && gimple_code (stmt1) == GIMPLE_ASSIGN)\n+\t{\n+\t  enum tree_code code1 = gimple_assign_rhs_code (stmt1);\n+\n+\t  if (!poor_ifcvt_candidate_code (code1))\n+\t    {\n+\t      tree lhs1 = gimple_assign_lhs (stmt1);\n+\t      tree rhs1 = gimple_assign_rhs1 (stmt1);\n+\n+\t      gimple_stmt_iterator gsi;\n+\t      for (gsi = gsi_start_phis (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n+\t\t{\n+\t\t  gimple *phi = gsi_stmt (gsi);\n+\t\t  if ((gimple_phi_arg_def (phi, 0) == lhs1\n+\t\t       && gimple_phi_arg_def (phi, 1) == rhs1)\n+\t\t      || (gimple_phi_arg_def (phi, 1) == lhs1\n+\t\t\t  && gimple_phi_arg_def (phi, 0) == rhs1))\n+\t\t    {\n+\t\t      if (dump_file && (dump_flags & TDF_DETAILS))\n+\t\t\tfprintf (dump_file,\n+\t\t\t\t \"Block %d appears to be a join point for \"\n+\t\t\t\t \"if-convertable half-diamond.\\n\",\n+\t\t\t\t bb->index);\n+\t\t      return false;\n+\t\t    }\n+\t\t}\n+\t    }\n+\t}\n+    }\n+\n   /* If the joiner has no PHIs with useful uses there is zero chance\n      of CSE/DCE/jump-threading possibilities exposed by duplicating it.  */\n   bool found_useful_phi = false;"}, {"sha": "0fde3cb395a5cacf4bc54a1c19d846be83e80fa5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b1ff60122fda6e106e54b792713f8eb16424cf2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b1ff60122fda6e106e54b792713f8eb16424cf2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7b1ff60122fda6e106e54b792713f8eb16424cf2", "patch": "@@ -1,3 +1,9 @@\n+2018-12-10  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/80520\n+\t* gcc.dg/tree-ssa/split-path-5.c: Update expected output.\n+\t* gcc.dg/tree-ssa/split-path-11.c: New test.\n+\n 2018-12-10  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/97922"}, {"sha": "f94f1a84e2cc865354e10ad04c87e32bcb136b5c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/split-path-11.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b1ff60122fda6e106e54b792713f8eb16424cf2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fsplit-path-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b1ff60122fda6e106e54b792713f8eb16424cf2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fsplit-path-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fsplit-path-11.c?ref=7b1ff60122fda6e106e54b792713f8eb16424cf2", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fsplit-paths -fdump-tree-split-paths-details -w\" } */\n+\n+void foo(unsigned long *M)\n+{\n+  for (unsigned long k = 0; k < 227; ++k)\n+    {\n+      unsigned long y =\n+\t((M[k] & 0xffffffff80000000) | (M[k + 1] & 0x7fffffff));\n+      M[k] = (M[k + 397] ^ (y >> 1) ^ ((y & 1) ? 2567483615 : 0));\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"join point for if-convertable half-diamond\" 1 \"split-paths\" } } */"}, {"sha": "83141a716edb5c914c3e8026da002cb20645cf7a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/split-path-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b1ff60122fda6e106e54b792713f8eb16424cf2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fsplit-path-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b1ff60122fda6e106e54b792713f8eb16424cf2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fsplit-path-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fsplit-path-5.c?ref=7b1ff60122fda6e106e54b792713f8eb16424cf2", "patch": "@@ -41,4 +41,4 @@ bmhi_init (const char *pattern)\n     }\n }\n \n-/* { dg-final { scan-tree-dump-times \"Duplicating join block\" 1 \"split-paths\" } } */\n+/* { dg-final { scan-tree-dump-times \"join point for if-convertable half-diamond\" 1 \"split-paths\" } } */"}]}