{"sha": "f7c8e4fc33d6386550568da002faf7804396606b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjdjOGU0ZmMzM2Q2Mzg2NTUwNTY4ZGEwMDJmYWY3ODA0Mzk2NjA2Yg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2006-01-26T21:21:42Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2006-01-26T21:21:42Z"}, "message": "genconditions.c (write_header): In generated code...\n\n\t* genconditions.c (write_header): In generated code, #ifdef out\n\tall includes and fake declarations, except includes of bconfig.h\n\tand system.h, unless GCC_VERSION >= 3001.  Do not include\n\tgensupport.h in any case.\n\t(write_conditions): Generate a definition of struct c_test.  Add\n\ta comment to the generated #endif.\n\t(write_one_condition): Escape backslashes in string too.\n\t(write_writer): Generated code must escape backslashes and quote\n\tmarks (but not newlines) in the strings it writes.\n\t* Makefile.in (build/gencondmd.o): Update dependencies.\n\nFrom-SVN: r110275", "tree": {"sha": "44e0ab313b71fa4c5524ede47fac2115629a7120", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44e0ab313b71fa4c5524ede47fac2115629a7120"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7c8e4fc33d6386550568da002faf7804396606b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7c8e4fc33d6386550568da002faf7804396606b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7c8e4fc33d6386550568da002faf7804396606b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7c8e4fc33d6386550568da002faf7804396606b/comments", "author": null, "committer": null, "parents": [{"sha": "63622a8169df9d39fa01a5543dece68ef5e6439c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63622a8169df9d39fa01a5543dece68ef5e6439c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63622a8169df9d39fa01a5543dece68ef5e6439c"}], "stats": {"total": 123, "additions": 84, "deletions": 39}, "files": [{"sha": "93c001b63d070894d86bd7324d082af7cd67aaf3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7c8e4fc33d6386550568da002faf7804396606b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7c8e4fc33d6386550568da002faf7804396606b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f7c8e4fc33d6386550568da002faf7804396606b", "patch": "@@ -1,3 +1,16 @@\n+2006-01-26  Zack Weinberg  <zackw@panix.com>\n+\n+\t* genconditions.c (write_header): In generated code, #ifdef out\n+\tall includes and fake declarations, except includes of bconfig.h\n+\tand system.h, unless GCC_VERSION >= 3001.  Do not include\n+\tgensupport.h in any case.\n+\t(write_conditions): Generate a definition of struct c_test.  Add\n+\ta comment to the generated #endif.\n+\t(write_one_condition): Escape backslashes in string too.\n+\t(write_writer): Generated code must escape backslashes and quote\n+\tmarks (but not newlines) in the strings it writes.\n+\t* Makefile.in (build/gencondmd.o): Update dependencies.\n+\n 2006-01-26  Steve Ellcey  <sje@cup.hp.com>\n \n \tPR target/25961\n@@ -30,7 +43,7 @@\n \tconstants provided by 80387 instructions in the destination mode.\n \n 2006-01-26  Richard Guenther  <rguenther@suse.de>\n-            Andrew Pinski  <pinskia@physics.uc.edu>\n+\t    Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR tree-opt/21470\n \tpartial PR tree-opt/17064\n@@ -212,7 +225,7 @@\n \trather than find_pool_constant.\n \t(get_pool_constant_for_function): Delete.\n \t(get_pool_mode, mark_constant): Use SYMBOL_REF_CONSTANT rather than\n-\tfind_pool_constant. \n+\tfind_pool_constant.\n \t* rtl.h (rtunion_def): Add rt_constant and rt_ptr fields.\n \t(X0CONSTANT, X0PTR, SYMBOL_REF_DATA): New macros.\n \t(SYMBOL_REF_DECL): Return NULL if CONSTANT_POOL_ADDRESS_P.\n@@ -288,10 +301,10 @@\n \n 2006-01-23  Paolo Bonzini  <bonzini@gnu.org>\n \n-        PR rtl-optimization/25890\n-        PR rtl-optimization/25905\n-        * combine.c (expand_compound_operation, expand_field_assignment):\n-        Fail if the bitfield's final position is out of bounds.\n+\tPR rtl-optimization/25890\n+\tPR rtl-optimization/25905\n+\t* combine.c (expand_compound_operation, expand_field_assignment):\n+\tFail if the bitfield's final position is out of bounds.\n \n 2006-01-24  Ian Lance Taylor  <ian@airs.com>\n \n@@ -301,7 +314,7 @@\n \n 2006-01-23  Adam Nemet  <anemet@caviumnetworks.com>\n \n-        * fix-header.c (read_scan_file): Add new parameter imultilib when\n+\t* fix-header.c (read_scan_file): Add new parameter imultilib when\n \tcalling register_include_chains.\n \n 2006-01-23  Diego Novillo  <dnovillo@redhat.com>\n@@ -313,7 +326,7 @@\n \n \tPR tree-opt/25315\n \tPR tree-opt/25857\n-\t* tree-ssa-pre.c (insert_extra_phis): If an incomming edge is abnormal \n+\t* tree-ssa-pre.c (insert_extra_phis): If an incomming edge is abnormal\n \treturn from the function.\n \n 2006-01-22  Zack Weinberg  <zackw@panix.com>"}, {"sha": "257fc6a51902ec0f921579d7c36be583e6b600a5", "filename": "gcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7c8e4fc33d6386550568da002faf7804396606b/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7c8e4fc33d6386550568da002faf7804396606b/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=f7c8e4fc33d6386550568da002faf7804396606b", "patch": "@@ -2900,10 +2900,10 @@ build/rtl.o: rtl.c $(BCONFIG_H) coretypes.h $(GTM_H) $(SYSTEM_H)\t\\\n   $(RTL_H) real.h $(GGC_H) errors.h\n build/vec.o : vec.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) coretypes.h vec.h \\\n    $(GGC_H) toplev.h\n-build/gencondmd.o : build/gencondmd.c $(CONFIG_H) $(SYSTEM_H) $(GTM_H)\t\\\n-  $(RTL_H) $(TM_P_H) $(REGS_H) $(FUNCTION_H) $(RECOG_H) real.h output.h\t\\\n-  $(FLAGS_H) hard-reg-set.h $(RESOURCE_H) toplev.h reload.h\t\t\\\n-  gensupport.h insn-constants.h coretypes.h\n+build/gencondmd.o : build/gencondmd.c $(BCONFIG_H) $(SYSTEM_H)\t\t\\\n+  coretypes.h $(GTM_H) insn-constants.h $(RTL_H) $(TM_P_H)\t\t\\\n+  $(FUNCTION_H) $(REGS_H) $(RECOG_H) real.h output.h $(FLAGS_H)\t\t\\\n+  $(RESOURCE_H) toplev.h reload.h except.h\n \n # ...these are the programs themselves.\n build/genattr.o : genattr.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\"}, {"sha": "bc4bfd57151e353404c43ba085ee45421eb41d2f", "filename": "gcc/genconditions.c", "status": "modified", "additions": 59, "deletions": 27, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7c8e4fc33d6386550568da002faf7804396606b/gcc%2Fgenconditions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7c8e4fc33d6386550568da002faf7804396606b/gcc%2Fgenconditions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconditions.c?ref=f7c8e4fc33d6386550568da002faf7804396606b", "patch": "@@ -52,9 +52,14 @@ write_header (void)\n    machine description file.  */\\n\\\n \\n\\\n #include \\\"bconfig.h\\\"\\n\\\n-#include \\\"insn-constants.h\\\"\\n\");\n+#include \\\"system.h\\\"\\n\");\n \n   puts (\"\\\n+/* It is necessary, but not entirely safe, to include the headers below\\n\\\n+   in a generator program.  As a defensive measure, don't do so when the\\n\\\n+   table isn't going to have anything in it.  */\\n\\\n+#if GCC_VERSION >= 3001\\n\\\n+\\n\\\n /* Do not allow checking to confuse the issue.  */\\n\\\n #undef ENABLE_CHECKING\\n\\\n #undef ENABLE_TREE_CHECKING\\n\\\n@@ -64,9 +69,9 @@ write_header (void)\n #undef ENABLE_GC_ALWAYS_COLLECT\\n\");\n \n   puts (\"\\\n-#include \\\"system.h\\\"\\n\\\n #include \\\"coretypes.h\\\"\\n\\\n #include \\\"tm.h\\\"\\n\\\n+#include \\\"insn-constants.h\\\"\\n\\\n #include \\\"rtl.h\\\"\\n\\\n #include \\\"tm_p.h\\\"\\n\\\n #include \\\"function.h\\\"\\n\");\n@@ -86,8 +91,7 @@ write_header (void)\n #include \\\"hard-reg-set.h\\\"\\n\\\n #include \\\"resource.h\\\"\\n\\\n #include \\\"toplev.h\\\"\\n\\\n-#include \\\"reload.h\\\"\\n\\\n-#include \\\"gensupport.h\\\"\\n\");\n+#include \\\"reload.h\\\"\\n\");\n \n   if (saw_eh_return)\n     puts (\"#define HAVE_eh_return 1\");\n@@ -97,7 +101,9 @@ write_header (void)\n /* Dummy external declarations.  */\\n\\\n extern rtx insn;\\n\\\n extern rtx ins1;\\n\\\n-extern rtx operands[];\\n\");\n+extern rtx operands[];\\n\\\n+\\n\\\n+#endif /* gcc >= 3.0.1 */\\n\");\n }\n \n /* Write out one entry in the conditions table, using the data pointed\n@@ -118,12 +124,14 @@ write_one_condition (void **slot, void * ARG_UNUSED (dummy))\n   fputs (\"  { \\\"\", stdout);\n   for (p = test->expr; *p; p++)\n     {\n-      if (*p == '\\n')\n-\tfputs (\"\\\\n\\\\\\n\", stdout);\n-      else if (*p == '\"')\n-\tfputs (\"\\\\\\\"\", stdout);\n-      else\n-\tputchar (*p);\n+      switch (*p)\n+\t{\n+\tcase '\\n': fputs (\"\\\\n\\\\\", stdout); break;\n+\tcase '\\\\':\n+\tcase '\\\"': putchar ('\\\\'); break;\n+\tdefault: break;\n+\t}\n+      putchar (*p);\n     }\n \n   printf (\"\\\",\\n    __builtin_constant_p \");\n@@ -139,21 +147,30 @@ write_one_condition (void **slot, void * ARG_UNUSED (dummy))\n static void\n write_conditions (void)\n {\n+  puts (\"\\\n+/* Structure definition duplicated from gensupport.h rather than\\n\\\n+   drag in that file and its dependencies.  */\\n\\\n+struct c_test\\n\\\n+{\\n\\\n+  const char *expr;\\n\\\n+  int value;\\n\\\n+};\\n\");\n+\n   puts (\"\\\n /* This table lists each condition found in the machine description.\\n\\\n    Each condition is mapped to its truth value (0 or 1), or -1 if that\\n\\\n-   cannot be calculated at compile time. */\\n\\\n-\\n\\\n-static const struct c_test insn_conditions[] = {\\n\t\t\t\\\n-/* If we don't have __builtin_constant_p, or it's not acceptable in array\\n\\\n+   cannot be calculated at compile time.\\n\\\n+   If we don't have __builtin_constant_p, or it's not acceptable in array\\n\\\n    initializers, fall back to assuming that all conditions potentially\\n\\\n    vary at run time.  It works in 3.0.1 and later; 3.0 only when not\\n\\\n    optimizing.  */\\n\\\n-#if GCC_VERSION >= 3001\");\n+\\n\\\n+static const struct c_test insn_conditions[] = {\\n\\\n+#if GCC_VERSION >= 3001\\n\");\n \n   traverse_c_tests (write_one_condition, 0);\n \n-  puts (\"#endif\\n};\\n\");\n+  puts (\"\\n#endif /* gcc >= 3.0.1 */\\n};\\n\");\n }\n \n /* Emit code which will convert the C-format table to a\n@@ -163,16 +180,31 @@ static const struct c_test insn_conditions[] = {\\n\t\t\t\\\n static void\n write_writer (void)\n {\n-  puts (\"int\\nmain(void)\\n{\\n\\\n-  unsigned int i;\\n\\\n-\\n\\\n-  puts (\\\"(define_conditions [\\\");\\n\\\n-  for (i = 0; i < ARRAY_SIZE (insn_conditions); i++)\\n\\\n-    printf (\\\"  (%d \\\\\\\"%s\\\\\\\")\\\\n\\\",\\n\\\n-\t    insn_conditions[i].value, insn_conditions[i].expr);\\n\\\n-  puts (\\\"])\\\");\\n\\\n-  fflush (stdout);\\n\\\n-  return (ferror (stdout) != 0 ? FATAL_EXIT_CODE : SUCCESS_EXIT_CODE);\\n}\");\n+  puts (\"int\\n\"\n+\t\"main(void)\\n\"\n+\t\"{\\n\"\n+\t\"  unsigned int i;\\n\"\n+        \"  const char *p;\\n\"\n+        \"  puts (\\\"(define_conditions [\\\");\\n\"\n+\t\"  for (i = 0; i < ARRAY_SIZE (insn_conditions); i++)\\n\"\n+\t\"    {\\n\"\n+\t\"      printf (\\\"  (%d \\\\\\\"\\\", insn_conditions[i].value);\\n\"\n+\t\"      for (p = insn_conditions[i].expr; *p; p++)\\n\"\n+\t\"        {\\n\"\n+\t\"          switch (*p)\\n\"\n+\t\"\t     {\\n\"\n+\t\"\t     case '\\\\\\\\':\\n\"\n+\t\"\t     case '\\\\\\\"': putchar ('\\\\\\\\'); break;\\n\"\n+\t\"\t     default: break;\\n\"\n+\t\"\t     }\\n\"\n+\t\"          putchar (*p);\\n\"\n+\t\"        }\\n\"\n+        \"      puts (\\\"\\\\\\\")\\\");\\n\"\n+        \"    }\");\n+  puts (\"  puts (\\\"])\\\");\\n\"\n+        \"  fflush (stdout);\\n\"\n+        \"return ferror (stdout) != 0 ? FATAL_EXIT_CODE : SUCCESS_EXIT_CODE;\\n\"\n+\t\"}\");\n }\n \n int"}]}