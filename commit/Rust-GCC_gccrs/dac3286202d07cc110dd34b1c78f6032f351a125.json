{"sha": "dac3286202d07cc110dd34b1c78f6032f351a125", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFjMzI4NjIwMmQwN2NjMTEwZGQzNGIxYzc4ZjYwMzJmMzUxYTEyNQ==", "commit": {"author": {"name": "Bruce Korb", "email": "korbb@gcc.gnu.org", "date": "2001-05-18T03:13:20Z"}, "committer": {"name": "Bruce Korb", "email": "korbb@gcc.gnu.org", "date": "2001-05-18T03:13:20Z"}, "message": "regeneration based on new engine\n\nFrom-SVN: r42236", "tree": {"sha": "e3eb68428272b5bda120fdef0f4627b94138a507", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3eb68428272b5bda120fdef0f4627b94138a507"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dac3286202d07cc110dd34b1c78f6032f351a125", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dac3286202d07cc110dd34b1c78f6032f351a125", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dac3286202d07cc110dd34b1c78f6032f351a125", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dac3286202d07cc110dd34b1c78f6032f351a125/comments", "author": null, "committer": null, "parents": [{"sha": "98c197fe3938b9a457412e81f58b51dc0ea82764", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98c197fe3938b9a457412e81f58b51dc0ea82764", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98c197fe3938b9a457412e81f58b51dc0ea82764"}], "stats": {"total": 191, "additions": 64, "deletions": 127}, "files": [{"sha": "1f50035e681a76733d09f0faed7ea1406a267535", "filename": "gcc/fixinc/fixincl.x", "status": "modified", "additions": 64, "deletions": 127, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dac3286202d07cc110dd34b1c78f6032f351a125/gcc%2Ffixinc%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dac3286202d07cc110dd34b1c78f6032f351a125/gcc%2Ffixinc%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixincl.x?ref=dac3286202d07cc110dd34b1c78f6032f351a125", "patch": "@@ -12,7 +12,7 @@\n  *  inclhack copyright (c) 1998, 1999, 2000, 2001\n  *  The Free Software Foundation, Inc.\n  *\n- *  inclhack is free software.\n+  *  inclhack is free software.\n  *  \n  *  You may redistribute it and/or modify it under the terms of the\n  *  GNU General Public License, as published by the Free Software\n@@ -285,64 +285,48 @@ tSCC zAab_Dgux_Int_VarargsList[] =\n  */\n static const char* apzAab_Dgux_Int_VarargsPatch[] = {\n \"#ifndef __INT_VARARGS_H\\n\\\n-#define __INT_VARARGS_H\\n\\\n-\\n\\\n+#define __INT_VARARGS_H\\n\\n\\\n /************************************************************************/\\n\\\n /* _INT_VARARGS.H - Define the common stuff for varargs/stdarg/stdio.   */\\n\\\n-/************************************************************************/\\n\\\n-\\n\\\n+/************************************************************************/\\n\\n\\\n /*\\n\\\n ** This file is a DG internal header.  Never include this\\n\\\n ** file directly.\\n\\\n-*/\\n\\\n-\\n\\\n+*/\\n\\n\\\n #ifndef ___int_features_h\\n\\\n #include <sys/_int_features.h>\\n\\\n-#endif\\n\\\n-\\n\\\n+#endif\\n\\n\\\n #if !(defined(_VA_LIST) || defined(_VA_LIST_))\\n\\\n #define _VA_LIST\\n\\\n-#define _VA_LIST_\\n\\\n-\\n\\\n-#ifdef __LINT__\\n\\\n-\\n\\\n+#define _VA_LIST_\\n\\n\\\n+#ifdef __LINT__\\n\\n\\\n #ifdef __STDC__\\n\\\n typedef void * va_list;\\n\\\n #else\\n\\\n typedef char * va_list;\\n\\\n-#endif\\n\\\n-\\n\\\n+#endif\\n\\n\\\n #else\\n\\\n-#if _M88K_ANY\\n\\\n-\\n\\\n-#if defined(__DCC__)\\n\\\n-\\n\\\n+#if _M88K_ANY\\n\\n\\\n+#if defined(__DCC__)\\n\\n\\\n typedef struct {\\n\\\n       int     next_arg;\\n\\\n       int     *mem_ptr;\\n\\\n       int     *reg_ptr;\\n\\\n-} va_list;\\n\\\n-\\n\\\n-#else  /* ! defined(__DCC__) */\\n\\\n-\\n\\\n+} va_list;\\n\\n\\\n+#else  /* ! defined(__DCC__) */\\n\\n\\\n typedef struct {\\n\\\n       int  __va_arg;       /* argument number */\\n\\\n       int *__va_stk;       /* start of args passed on stack */\\n\\\n       int *__va_reg;       /* start of args passed in regs */\\n\\\n-} va_list;\\n\\\n-\\n\\\n-#endif  /* ! defined(__DCC__) */\\n\\\n-\\n\\\n-#elif _IX86_ANY\\n\\\n-\\n\\\n+} va_list;\\n\\n\\\n+#endif  /* ! defined(__DCC__) */\\n\\n\\\n+#elif _IX86_ANY\\n\\n\\\n #if defined(__GNUC__) || defined(__STDC__)\\n\\\n typedef void * va_list;\\n\\\n #else\\n\\\n typedef char * va_list;\\n\\\n-#endif\\n\\\n-\\n\\\n-#endif  /*  _IX86_ANY */\\n\\\n-\\n\\\n+#endif\\n\\n\\\n+#endif  /*  _IX86_ANY */\\n\\n\\\n #endif /* __LINT__ */\\n\\\n #endif /*  !(defined(_VA_LIST) || defined(_VA_LIST_)) */\\n\\\n #endif /*  #ifndef __INT_VARARGS_H  */\\n\",\n@@ -386,8 +370,7 @@ static const char* apzAab_Fd_Zero_Asm_Posix_Types_HPatch[] = {\n    for older versions of the Linux kernel. */\\n\\\n #ifndef _POSIX_TYPES_H_WRAPPER\\n\\\n #include <features.h>\\n\\\n- #include_next <asm/posix_types.h>\\n\\\n-\\n\\\n+ #include_next <asm/posix_types.h>\\n\\n\\\n #if defined(__FD_ZERO) && !defined(__GLIBC__)\\n\\\n #undef __FD_ZERO\\n\\\n #define __FD_ZERO(fdsetp) \\\\\\n\\\n@@ -398,8 +381,7 @@ static const char* apzAab_Fd_Zero_Asm_Posix_Types_HPatch[] = {\n \\t\\t\\t: \\\"a\\\" (0), \\\"0\\\" (__FDSET_LONGS), \\\\\\n\\\n \\t\\t\\t  \\\"1\\\" ((__kernel_fd_set *) (fdsetp)) :\\\"memory\\\"); \\\\\\n\\\n   } while (0)\\n\\\n-#endif\\n\\\n-\\n\\\n+#endif\\n\\n\\\n #define _POSIX_TYPES_H_WRAPPER\\n\\\n #endif /* _POSIX_TYPES_H_WRAPPER */\\n\",\n     (char*)NULL };\n@@ -433,8 +415,7 @@ static const char* apzAab_Fd_Zero_Gnu_Types_HPatch[] = {\n \"/* This file fixes a bug in the __FD_ZERO macro present in glibc 1.x. */\\n\\\n #ifndef _TYPES_H_WRAPPER\\n\\\n #include <features.h>\\n\\\n- #include_next <gnu/types.h>\\n\\\n-\\n\\\n+ #include_next <gnu/types.h>\\n\\n\\\n #if defined(__FD_ZERO) && !defined(__GLIBC__)\\n\\\n #undef __FD_ZERO\\n\\\n # define __FD_ZERO(fdsetp) \\\\\\n\\\n@@ -445,8 +426,7 @@ static const char* apzAab_Fd_Zero_Gnu_Types_HPatch[] = {\n         \\t: \\\"a\\\" (0), \\\"0\\\" (__FDSET_LONGS), \\\\\\n\\\n \\t\\t  \\\"1\\\" ((__fd_set *) (fdsetp)) :\\\"memory\\\"); \\\\\\n\\\n   } while (0)\\n\\\n-#endif\\n\\\n-\\n\\\n+#endif\\n\\n\\\n #define _TYPES_H_WRAPPER\\n\\\n #endif /* _TYPES_H_WRAPPER */\\n\",\n     (char*)NULL };\n@@ -480,8 +460,7 @@ static const char* apzAab_Fd_Zero_Selectbits_HPatch[] = {\n \"/* This file fixes a bug in the __FD_ZERO macro present in glibc 2.0.x. */\\n\\\n #ifndef _SELECTBITS_H_WRAPPER\\n\\\n #include <features.h>\\n\\\n- #include_next <selectbits.h>\\n\\\n-\\n\\\n+ #include_next <selectbits.h>\\n\\n\\\n #if defined(__FD_ZERO) && defined(__GLIBC__) \\\\\\n\\\n \\t&& defined(__GLIBC_MINOR__) && __GLIBC__ == 2 \\\\\\n\\\n \\t&& __GLIBC_MINOR__ == 0\\n\\\n@@ -496,8 +475,7 @@ static const char* apzAab_Fd_Zero_Selectbits_HPatch[] = {\n                           \\\"1\\\" ((__fd_mask *) (fdsetp)) \\\\\\n\\\n                         : \\\"memory\\\"); \\\\\\n\\\n   } while (0)\\n\\\n-#endif\\n\\\n-\\n\\\n+#endif\\n\\n\\\n #define _SELECTBITS_H_WRAPPER\\n\\\n #endif /* _SELECTBITS_H_WRAPPER */\\n\",\n     (char*)NULL };\n@@ -536,8 +514,7 @@ static tTestDesc aAab_Sun_MemcpyTests[] = {\n static const char* apzAab_Sun_MemcpyPatch[] = {\n \"/* This file was generated by fixincludes */\\n\\\n #ifndef __memory_h__\\n\\\n-#define __memory_h__\\n\\\n-\\n\\\n+#define __memory_h__\\n\\n\\\n #ifdef __STDC__\\n\\\n extern void *memccpy();\\n\\\n extern void *memchr();\\n\\\n@@ -548,10 +525,8 @@ extern char *memccpy();\\n\\\n extern char *memchr();\\n\\\n extern char *memcpy();\\n\\\n extern char *memset();\\n\\\n-#endif /* __STDC__ */\\n\\\n-\\n\\\n-extern int memcmp();\\n\\\n-\\n\\\n+#endif /* __STDC__ */\\n\\n\\\n+extern int memcmp();\\n\\n\\\n #endif /* __memory_h__ */\\n\",\n     (char*)NULL };\n \n@@ -587,142 +562,106 @@ tSCC* apzAab_Svr4_Replace_ByteorderMachs[] = {\n  */\n static const char* apzAab_Svr4_Replace_ByteorderPatch[] = {\n \"#ifndef _SYS_BYTEORDER_H\\n\\\n-#define _SYS_BYTEORDER_H\\n\\\n-\\n\\\n+#define _SYS_BYTEORDER_H\\n\\n\\\n /* Functions to convert `short' and `long' quantities from host byte order\\n\\\n-   to (internet) network byte order (i.e. big-endian).\\n\\\n-\\n\\\n-   Written by Ron Guilmette (rfg@ncd.com).\\n\\\n-\\n\\\n-   This isn't actually used by GCC.  It is installed by fixinc.svr4.\\n\\\n-\\n\\\n-   For big-endian machines these functions are essentially no-ops.\\n\\\n-\\n\\\n+   to (internet) network byte order (i.e. big-endian).\\n\\n\\\n+   Written by Ron Guilmette (rfg@ncd.com).\\n\\n\\\n+   This isn't actually used by GCC.  It is installed by fixinc.svr4.\\n\\n\\\n+   For big-endian machines these functions are essentially no-ops.\\n\\n\\\n    For little-endian machines, we define the functions using specialized\\n\\\n-   asm sequences in cases where doing so yields better code (e.g. i386).  */\\n\\\n-\\n\\\n+   asm sequences in cases where doing so yields better code (e.g. i386).  */\\n\\n\\\n #if !defined (__GNUC__) && !defined (__GNUG__)\\n\\\n #error You lose!  This file is only useful with GNU compilers.\\n\\\n-#endif\\n\\\n-\\n\\\n+#endif\\n\\n\\\n #ifndef __BYTE_ORDER__\\n\\\n /* Byte order defines.  These are as defined on UnixWare 1.1, but with\\n\\\n    double underscores added at the front and back.  */\\n\\\n #define __LITTLE_ENDIAN__   1234\\n\\\n #define __BIG_ENDIAN__      4321\\n\\\n #define __PDP_ENDIAN__      3412\\n\\\n-#endif\\n\\\n-\\n\\\n+#endif\\n\\n\\\n #ifdef __STDC__\\n\\\n static __inline__ unsigned long htonl (unsigned long);\\n\\\n static __inline__ unsigned short htons (unsigned int);\\n\\\n static __inline__ unsigned long ntohl (unsigned long);\\n\\\n static __inline__ unsigned short ntohs (unsigned int);\\n\\\n-#endif /* defined (__STDC__) */\\n\\\n-\\n\\\n-#if defined (__i386__)\\n\\\n-\\n\\\n+#endif /* defined (__STDC__) */\\n\\n\\\n+#if defined (__i386__)\\n\\n\\\n #ifndef __BYTE_ORDER__\\n\\\n #define __BYTE_ORDER__ __LITTLE_ENDIAN__\\n\\\n-#endif\\n\\\n-\\n\\\n-/* Convert a host long to a network long.  */\\n\\\n-\\n\\\n+#endif\\n\\n\\\n+/* Convert a host long to a network long.  */\\n\\n\\\n /* We must use a new-style function definition, so that this will also\\n\\\n    be valid for C++.  */\\n\\\n static __inline__ unsigned long\\n\\\n htonl (unsigned long __arg)\\n\\\n {\\n\\\n-  register unsigned long __result;\\n\\\n-\\n\\\n+  register unsigned long __result;\\n\\n\\\n   __asm__ (\\\"xchg%B0 %b0,%h0\\n\\\n \\tror%L0 $16,%0\\n\\\n \\txchg%B0 %b0,%h0\\\" : \\\"=q\\\" (__result) : \\\"0\\\" (__arg));\\n\\\n   return __result;\\n\\\n-}\\n\\\n-\\n\\\n-/* Convert a host short to a network short.  */\\n\\\n-\\n\\\n+}\\n\\n\\\n+/* Convert a host short to a network short.  */\\n\\n\\\n static __inline__ unsigned short\\n\\\n htons (unsigned int __arg)\\n\\\n {\\n\\\n-  register unsigned short __result;\\n\\\n-\\n\\\n+  register unsigned short __result;\\n\\n\\\n   __asm__ (\\\"xchg%B0 %b0,%h0\\\" : \\\"=q\\\" (__result) : \\\"0\\\" (__arg));\\n\\\n   return __result;\\n\\\n-}\\n\\\n-\\n\\\n+}\\n\\n\\\n #elif ((defined (__i860__) && !defined (__i860_big_endian__))\\t\\\\\\n\\\n        || defined (__ns32k__) || defined (__vax__)\\t\\t\\\\\\n\\\n-       || defined (__spur__) || defined (__arm__))\\n\\\n-\\n\\\n+       || defined (__spur__) || defined (__arm__))\\n\\n\\\n #ifndef __BYTE_ORDER__\\n\\\n #define __BYTE_ORDER__ __LITTLE_ENDIAN__\\n\\\n-#endif\\n\\\n-\\n\\\n+#endif\\n\\n\\\n /* For other little-endian machines, using C code is just as efficient as\\n\\\n-   using assembly code.  */\\n\\\n-\\n\\\n-/* Convert a host long to a network long.  */\\n\\\n-\\n\\\n+   using assembly code.  */\\n\\n\\\n+/* Convert a host long to a network long.  */\\n\\n\\\n static __inline__ unsigned long\\n\\\n htonl (unsigned long __arg)\\n\\\n {\\n\\\n-  register unsigned long __result;\\n\\\n-\\n\\\n+  register unsigned long __result;\\n\\n\\\n   __result = (__arg >> 24) & 0x000000ff;\\n\\\n   __result |= (__arg >> 8) & 0x0000ff00;\\n\\\n   __result |= (__arg << 8) & 0x00ff0000;\\n\\\n   __result |= (__arg << 24) & 0xff000000;\\n\\\n   return __result;\\n\\\n-}\\n\\\n-\\n\\\n-/* Convert a host short to a network short.  */\\n\\\n-\\n\\\n+}\\n\\n\\\n+/* Convert a host short to a network short.  */\\n\\n\\\n static __inline__ unsigned short\\n\\\n htons (unsigned int __arg)\\n\\\n {\\n\\\n-  register unsigned short __result;\\n\\\n-\\n\\\n+  register unsigned short __result;\\n\\n\\\n   __result = (__arg << 8) & 0xff00;\\n\\\n   __result |= (__arg >> 8) & 0x00ff;\\n\\\n   return __result;\\n\\\n-}\\n\\\n-\\n\\\n-#else /* must be a big-endian machine */\\n\\\n-\\n\\\n+}\\n\\n\\\n+#else /* must be a big-endian machine */\\n\\n\\\n #ifndef __BYTE_ORDER__\\n\\\n #define __BYTE_ORDER__ __BIG_ENDIAN__\\n\\\n-#endif\\n\\\n-\\n\\\n-/* Convert a host long to a network long.  */\\n\\\n-\\n\\\n+#endif\\n\\n\\\n+/* Convert a host long to a network long.  */\\n\\n\\\n static __inline__ unsigned long\\n\\\n htonl (unsigned long __arg)\\n\\\n {\\n\\\n   return __arg;\\n\\\n-}\\n\\\n-\\n\\\n-/* Convert a host short to a network short.  */\\n\\\n-\\n\\\n+}\\n\\n\\\n+/* Convert a host short to a network short.  */\\n\\n\\\n static __inline__ unsigned short\\n\\\n htons (unsigned int __arg)\\n\\\n {\\n\\\n   return __arg;\\n\\\n-}\\n\\\n-\\n\\\n-#endif /* big-endian */\\n\\\n-\\n\\\n-/* Convert a network long to a host long.  */\\n\\\n-\\n\\\n+}\\n\\n\\\n+#endif /* big-endian */\\n\\n\\\n+/* Convert a network long to a host long.  */\\n\\n\\\n static __inline__ unsigned long\\n\\\n ntohl (unsigned long __arg)\\n\\\n {\\n\\\n   return htonl (__arg);\\n\\\n-}\\n\\\n-\\n\\\n-/* Convert a network short to a host short.  */\\n\\\n-\\n\\\n+}\\n\\n\\\n+/* Convert a network short to a host short.  */\\n\\n\\\n static __inline__ unsigned short\\n\\\n ntohs (unsigned int __arg)\\n\\\n {\\n\\\n@@ -2995,8 +2934,7 @@ static tTestDesc aMath_Huge_Val_From_Dbl_MaxTests[] = {\n  *  Fix Command Arguments for Math_Huge_Val_From_Dbl_Max\n  */\n static const char* apzMath_Huge_Val_From_Dbl_MaxPatch[] = { \"sh\", \"-c\",\n-    \"\\tdbl_max_def=`egrep 'define[ \\t]+DBL_MAX[ \\t]+.*' float.h | sed 's/.*DBL_MAX[ \\t]*//' 2>/dev/null`\\n\\\n-\\n\\\n+    \"\\tdbl_max_def=`egrep 'define[ \\t]+DBL_MAX[ \\t]+.*' float.h | sed 's/.*DBL_MAX[ \\t]*//' 2>/dev/null`\\n\\n\\\n \\tif ( test -n \\\"${dbl_max_def}\\\" ) > /dev/null 2>&1\\n\\\n \\tthen sed -e '/define[ \\t]*HUGE_VAL[ \\t]*DBL_MAX/s@DBL_MAX@'\\\"$dbl_max_def@\\\"\\n\\\n \\telse cat\\n\\\n@@ -4971,8 +4909,7 @@ static const char* apzUltrix_StatPatch[] = { \"sed\",\n     \"-e\", \"/^#define[ \\t]S_IFPORT[ \\t]*S_IFIFO$/a\\\\\\n\\\n \\\\\\n\\\n /* macro to test for symbolic link */\\\\\\n\\\n-#define S_ISLNK(mode) (((mode) & S_IFMT) == S_IFLNK)\\\\\\n\\\n-\\n\",\n+#define S_ISLNK(mode) (((mode) & S_IFMT) == S_IFLNK)\\\\\\n\\n\",\n     \"-e\", \"/^[ \\t]*fstat(),$/a\\\\\\n\\\n \\tlstat(),\\n\",\n     (char*)NULL };"}]}