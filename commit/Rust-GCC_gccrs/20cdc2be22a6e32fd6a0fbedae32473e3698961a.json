{"sha": "20cdc2be22a6e32fd6a0fbedae32473e3698961a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBjZGMyYmUyMmE2ZTMyZmQ2YTBmYmVkYWUzMjQ3M2UzNjk4OTYxYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2009-12-14T16:53:57Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-12-14T16:53:57Z"}, "message": "cgraph.h (cgraph_set_nothrow_flag, [...]): New prototypes.\n\n\t* cgraph.h (cgraph_set_nothrow_flag, cgraph_set_readonly_flag,\n\tcgraph_set_pure_flag, cgraph_set_looping_const_or_pure_flag): New\n\tprototypes.\n\t* cgraph.c (cgraph_set_nothrow_flag, cgraph_set_readonly_flag,\n\tcgraph_set_pure_flag, cgraph_set_looping_const_or_pure_flag): New\n\tfunctions.\n\t* except.h (set_nothrow_function_flags): Remove prototype.\n\t* except.c (set_nothrow_function_flags): Use cgraph_set_nothrow_flag.\n\tMake static.\n\t* ipa-pure-const.c (propagate): Use cgraph_set_nothrow_flag,\n\tcgraph_set_readonly_flag, cgraph_set_pure_flag\n\tand cgraph_set_looping_const_or_pure_flag.\n\t(local_pure_const): Likewise.\n\nFrom-SVN: r155220", "tree": {"sha": "c56a297fcbcb5b2a3c120a9cbdc79b0ad1dc5625", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c56a297fcbcb5b2a3c120a9cbdc79b0ad1dc5625"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20cdc2be22a6e32fd6a0fbedae32473e3698961a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20cdc2be22a6e32fd6a0fbedae32473e3698961a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20cdc2be22a6e32fd6a0fbedae32473e3698961a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20cdc2be22a6e32fd6a0fbedae32473e3698961a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7cb792f51087a104ac286ca9483c25849e437733", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cb792f51087a104ac286ca9483c25849e437733", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cb792f51087a104ac286ca9483c25849e437733"}], "stats": {"total": 111, "additions": 89, "deletions": 22}, "files": [{"sha": "1badea3d48033b6da5a1a810e3c89a7a2b2efdee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20cdc2be22a6e32fd6a0fbedae32473e3698961a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20cdc2be22a6e32fd6a0fbedae32473e3698961a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=20cdc2be22a6e32fd6a0fbedae32473e3698961a", "patch": "@@ -1,3 +1,19 @@\n+2009-12-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* cgraph.h (cgraph_set_nothrow_flag, cgraph_set_readonly_flag,\n+\tcgraph_set_pure_flag, cgraph_set_looping_const_or_pure_flag): New\n+\tprototypes.\n+\t* cgraph.c (cgraph_set_nothrow_flag, cgraph_set_readonly_flag,\n+\tcgraph_set_pure_flag, cgraph_set_looping_const_or_pure_flag): New\n+\tfunctions.\n+\t* except.h (set_nothrow_function_flags): Remove prototype.\n+\t* except.c (set_nothrow_function_flags): Use cgraph_set_nothrow_flag.\n+\tMake static.\n+\t* ipa-pure-const.c (propagate): Use cgraph_set_nothrow_flag,\n+\tcgraph_set_readonly_flag, cgraph_set_pure_flag\n+\tand cgraph_set_looping_const_or_pure_flag.\n+\t(local_pure_const): Likewise.\n+\n 2009-12-14  Jakub Jelinek  <jakub@redhat.com>\n \t    Sebastian Pop  <sebastian.pop@amd.com>\n "}, {"sha": "fc7ba1a50bab81367042a936de82e61e678147f7", "filename": "gcc/cgraph.c", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20cdc2be22a6e32fd6a0fbedae32473e3698961a/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20cdc2be22a6e32fd6a0fbedae32473e3698961a/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=20cdc2be22a6e32fd6a0fbedae32473e3698961a", "patch": "@@ -2208,4 +2208,53 @@ cgraph_make_node_local (struct cgraph_node *node)\n     }\n }\n \n+/* Set TREE_NOTHROW on NODE's decl and on same_body aliases of NODE\n+   if any to NOTHROW.  */\n+\n+void\n+cgraph_set_nothrow_flag (struct cgraph_node *node, bool nothrow)\n+{\n+  struct cgraph_node *alias;\n+  TREE_NOTHROW (node->decl) = nothrow;\n+  for (alias = node->same_body; alias; alias = alias->next)\n+    TREE_NOTHROW (alias->decl) = nothrow;\n+}\n+\n+/* Set TREE_READONLY on NODE's decl and on same_body aliases of NODE\n+   if any to READONLY.  */\n+\n+void\n+cgraph_set_readonly_flag (struct cgraph_node *node, bool readonly)\n+{\n+  struct cgraph_node *alias;\n+  TREE_READONLY (node->decl) = readonly;\n+  for (alias = node->same_body; alias; alias = alias->next)\n+    TREE_READONLY (alias->decl) = readonly;\n+}\n+\n+/* Set DECL_PURE_P on NODE's decl and on same_body aliases of NODE\n+   if any to PURE.  */\n+\n+void\n+cgraph_set_pure_flag (struct cgraph_node *node, bool pure)\n+{\n+  struct cgraph_node *alias;\n+  DECL_PURE_P (node->decl) = pure;\n+  for (alias = node->same_body; alias; alias = alias->next)\n+    DECL_PURE_P (alias->decl) = pure;\n+}\n+\n+/* Set DECL_LOOPING_CONST_OR_PURE_P on NODE's decl and on\n+   same_body aliases of NODE if any to LOOPING_CONST_OR_PURE.  */\n+\n+void\n+cgraph_set_looping_const_or_pure_flag (struct cgraph_node *node,\n+\t\t\t\t       bool looping_const_or_pure)\n+{\n+  struct cgraph_node *alias;\n+  DECL_LOOPING_CONST_OR_PURE_P (node->decl) = looping_const_or_pure;\n+  for (alias = node->same_body; alias; alias = alias->next)\n+    DECL_LOOPING_CONST_OR_PURE_P (alias->decl) = looping_const_or_pure;\n+}\n+\n #include \"gt-cgraph.h\""}, {"sha": "867a68aaf303276a29a5a57ff236c6acf7efc696", "filename": "gcc/cgraph.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20cdc2be22a6e32fd6a0fbedae32473e3698961a/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20cdc2be22a6e32fd6a0fbedae32473e3698961a/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=20cdc2be22a6e32fd6a0fbedae32473e3698961a", "patch": "@@ -475,6 +475,11 @@ struct cgraph_node * cgraph_create_virtual_clone (struct cgraph_node *old_node,\n \t\t\t                          VEC(ipa_replace_map_p,gc)* tree_map,\n \t\t\t                          bitmap args_to_skip);\n \n+void cgraph_set_nothrow_flag (struct cgraph_node *, bool);\n+void cgraph_set_readonly_flag (struct cgraph_node *, bool);\n+void cgraph_set_pure_flag (struct cgraph_node *, bool);\n+void cgraph_set_looping_const_or_pure_flag (struct cgraph_node *, bool);\n+\n /* In cgraphunit.c  */\n void cgraph_finalize_function (tree, bool);\n void cgraph_mark_if_needed (tree);"}, {"sha": "10b547dcf3c63d36b8352e5bd4b4c71b01959730", "filename": "gcc/except.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20cdc2be22a6e32fd6a0fbedae32473e3698961a/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20cdc2be22a6e32fd6a0fbedae32473e3698961a/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=20cdc2be22a6e32fd6a0fbedae32473e3698961a", "patch": "@@ -1835,7 +1835,7 @@ can_nonlocal_goto (const_rtx insn)\n \f\n /* Set TREE_NOTHROW and crtl->all_throwers_are_sibcalls.  */\n \n-unsigned int\n+static unsigned int\n set_nothrow_function_flags (void)\n {\n   rtx insn;\n@@ -1892,7 +1892,7 @@ set_nothrow_function_flags (void)\n       struct cgraph_edge *e;\n       for (e = node->callers; e; e = e->next_caller)\n         e->can_throw_external = false;\n-      TREE_NOTHROW (current_function_decl) = 1;\n+      cgraph_set_nothrow_flag (node, true);\n \n       if (dump_file)\n \tfprintf (dump_file, \"Marking function nothrow: %s\\n\\n\","}, {"sha": "99f620be0d69fa2c811c56df054be17ef40b713d", "filename": "gcc/except.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20cdc2be22a6e32fd6a0fbedae32473e3698961a/gcc%2Fexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20cdc2be22a6e32fd6a0fbedae32473e3698961a/gcc%2Fexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.h?ref=20cdc2be22a6e32fd6a0fbedae32473e3698961a", "patch": "@@ -228,9 +228,6 @@ extern int doing_eh (int);\n    loop hackery; should not be used by new code.  */\n extern void for_each_eh_label (void (*) (rtx));\n \n-/* Set TREE_NOTHROW and cfun->all_throwers_are_sibcalls.  */\n-extern unsigned int set_nothrow_function_flags (void);\n-\n extern void init_eh (void);\n extern void init_eh_for_function (void);\n "}, {"sha": "31883a22afd983788236635d229de53a34a63f0f", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20cdc2be22a6e32fd6a0fbedae32473e3698961a/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20cdc2be22a6e32fd6a0fbedae32473e3698961a/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=20cdc2be22a6e32fd6a0fbedae32473e3698961a", "patch": "@@ -941,17 +941,17 @@ propagate (void)\n \t\tfprintf (dump_file, \"Function found to be %sconst: %s\\n\",\n \t\t\t this_looping ? \"looping \" : \"\",\n \t\t\t cgraph_node_name (w));\n-\t      TREE_READONLY (w->decl) = 1;\n-\t      DECL_LOOPING_CONST_OR_PURE_P (w->decl) = this_looping;\n+\t      cgraph_set_readonly_flag (w, true);\n+\t      cgraph_set_looping_const_or_pure_flag (w, this_looping);\n \t      break;\n \n \t    case IPA_PURE:\n \t      if (!DECL_PURE_P (w->decl) && dump_file)\n \t\tfprintf (dump_file, \"Function found to be %spure: %s\\n\",\n \t\t\t this_looping ? \"looping \" : \"\",\n \t\t\t cgraph_node_name (w));\n-\t      DECL_PURE_P (w->decl) = 1;\n-\t      DECL_LOOPING_CONST_OR_PURE_P (w->decl) = this_looping;\n+\t      cgraph_set_pure_flag (w, true);\n+\t      cgraph_set_looping_const_or_pure_flag (w, this_looping);\n \t      break;\n \n \t    default:\n@@ -1032,7 +1032,7 @@ propagate (void)\n \t  if (!can_throw && !TREE_NOTHROW (w->decl))\n \t    {\n \t      struct cgraph_edge *e;\n-\t      TREE_NOTHROW (w->decl) = true;\n+\t      cgraph_set_nothrow_flag (w, true);\n \t      for (e = w->callers; e; e = e->next_caller)\n \t        e->can_throw_external = false;\n \t      if (dump_file)\n@@ -1110,6 +1110,7 @@ local_pure_const (void)\n {\n   bool changed = false;\n   funct_state l;\n+  struct cgraph_node *node;\n \n   /* Because we do not schedule pass_fixup_cfg over whole program after early optimizations\n      we must not promote functions that are called by already processed functions.  */\n@@ -1120,23 +1121,23 @@ local_pure_const (void)\n         fprintf (dump_file, \"Function called in recursive cycle; ignoring\\n\");\n       return 0;\n     }\n-  if (cgraph_function_body_availability (cgraph_node (current_function_decl))\n-      <= AVAIL_OVERWRITABLE)\n+  node = cgraph_node (current_function_decl);\n+  if (cgraph_function_body_availability (node) <= AVAIL_OVERWRITABLE)\n     {\n       if (dump_file)\n         fprintf (dump_file, \"Function has wrong visibility; ignoring\\n\");\n       return 0;\n     }\n \n-  l = analyze_function (cgraph_node (current_function_decl), false);\n+  l = analyze_function (node, false);\n \n   switch (l->pure_const_state)\n     {\n     case IPA_CONST:\n       if (!TREE_READONLY (current_function_decl))\n \t{\n-\t  TREE_READONLY (current_function_decl) = 1;\n-\t  DECL_LOOPING_CONST_OR_PURE_P (current_function_decl) = l->looping;\n+\t  cgraph_set_readonly_flag (node, true);\n+\t  cgraph_set_looping_const_or_pure_flag (node, l->looping);\n \t  changed = true;\n \t  if (dump_file)\n \t    fprintf (dump_file, \"Function found to be %sconst: %s\\n\",\n@@ -1147,7 +1148,7 @@ local_pure_const (void)\n       else if (DECL_LOOPING_CONST_OR_PURE_P (current_function_decl)\n \t       && !l->looping)\n \t{\n-\t  DECL_LOOPING_CONST_OR_PURE_P (current_function_decl) = false;\n+\t  cgraph_set_looping_const_or_pure_flag (node, false);\n \t  changed = true;\n \t  if (dump_file)\n \t    fprintf (dump_file, \"Function found to be non-looping: %s\\n\",\n@@ -1159,8 +1160,8 @@ local_pure_const (void)\n     case IPA_PURE:\n       if (!TREE_READONLY (current_function_decl))\n \t{\n-\t  DECL_PURE_P (current_function_decl) = 1;\n-\t  DECL_LOOPING_CONST_OR_PURE_P (current_function_decl) = l->looping;\n+\t  cgraph_set_pure_flag (node, true);\n+\t  cgraph_set_looping_const_or_pure_flag (node, l->looping);\n \t  changed = true;\n \t  if (dump_file)\n \t    fprintf (dump_file, \"Function found to be %spure: %s\\n\",\n@@ -1171,7 +1172,7 @@ local_pure_const (void)\n       else if (DECL_LOOPING_CONST_OR_PURE_P (current_function_decl)\n \t       && !l->looping)\n \t{\n-\t  DECL_LOOPING_CONST_OR_PURE_P (current_function_decl) = false;\n+\t  cgraph_set_looping_const_or_pure_flag (node, false);\n \t  changed = true;\n \t  if (dump_file)\n \t    fprintf (dump_file, \"Function found to be non-looping: %s\\n\",\n@@ -1187,9 +1188,8 @@ local_pure_const (void)\n     {\n       struct cgraph_edge *e;\n \n-      TREE_NOTHROW (current_function_decl) = true;\n-      for (e = cgraph_node (current_function_decl)->callers;\n-           e; e = e->next_caller)\n+      cgraph_set_nothrow_flag (node, true);\n+      for (e = node->callers; e; e = e->next_caller)\n \te->can_throw_external = false;\n       changed = true;\n       if (dump_file)"}]}