{"sha": "eb401400f59e4d1f28bbdc788c3234e0968081d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI0MDE0MDBmNTllNGQxZjI4YmJkYzc4OGMzMjM0ZTA5NjgwODFkNw==", "commit": {"author": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2016-12-14T11:52:09Z"}, "committer": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2016-12-14T11:52:09Z"}, "message": "re PR fortran/78672 (Gfortran test suite failures with a sanitized compiler)\n\ngcc/fortran/ChangeLog:\n\n2016-12-14  Andre Vehreschild  <vehre@gcc.gnu.org>\n\n\tPR fortran/78672\n\t* array.c (gfc_find_array_ref): Add flag to return NULL when no ref is\n\tfound instead of erroring out.\n\t* data.c (gfc_assign_data_value): Only constant expressions are valid\n\tfor initializers.\n\t* gfortran.h: Reflect change of gfc_find_array_ref's signature.\n\t* interface.c (compare_actual_formal): Access the non-elemental\n\tarray-ref.  Prevent taking a REF_COMPONENT for a REF_ARRAY.  Correct\n\tindentation.\n\t* module.c (load_omp_udrs): Clear typespec before reading into it.\n\t* trans-decl.c (gfc_build_qualified_array): Prevent accessing the array\n\twhen it is a coarray.\n\t* trans-expr.c (gfc_conv_cst_int_power): Use wi::abs()-function instead\n\tof crutch preventing sanitizer's bickering here.\n\t* trans-stmt.c (gfc_trans_deallocate): Only get data-component when it\n\tis a descriptor-array here.\n\nFrom-SVN: r243647", "tree": {"sha": "8a84929bf6cd9296cf8c3765d56781c6466033d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a84929bf6cd9296cf8c3765d56781c6466033d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb401400f59e4d1f28bbdc788c3234e0968081d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb401400f59e4d1f28bbdc788c3234e0968081d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb401400f59e4d1f28bbdc788c3234e0968081d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb401400f59e4d1f28bbdc788c3234e0968081d7/comments", "author": null, "committer": null, "parents": [{"sha": "e397febfb88c6cb7f72069057a7b8b12c5dfca06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e397febfb88c6cb7f72069057a7b8b12c5dfca06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e397febfb88c6cb7f72069057a7b8b12c5dfca06"}], "stats": {"total": 116, "additions": 76, "deletions": 40}, "files": [{"sha": "3b6cefcb371eb4b1862ef6e551a3857e50c2f154", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb401400f59e4d1f28bbdc788c3234e0968081d7/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb401400f59e4d1f28bbdc788c3234e0968081d7/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=eb401400f59e4d1f28bbdc788c3234e0968081d7", "patch": "@@ -1,3 +1,22 @@\n+2016-12-14  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/78672\n+\t* array.c (gfc_find_array_ref): Add flag to return NULL when no ref is\n+\tfound instead of erroring out.\n+\t* data.c (gfc_assign_data_value): Only constant expressions are valid\n+\tfor initializers.\n+\t* gfortran.h: Reflect change of gfc_find_array_ref's signature.\n+\t* interface.c (compare_actual_formal): Access the non-elemental\n+\tarray-ref.  Prevent taking a REF_COMPONENT for a REF_ARRAY.  Correct\n+\tindentation.\n+\t* module.c (load_omp_udrs): Clear typespec before reading into it.\n+\t* trans-decl.c (gfc_build_qualified_array): Prevent accessing the array\n+\twhen it is a coarray.\n+\t* trans-expr.c (gfc_conv_cst_int_power): Use wi::abs()-function instead\n+\tof crutch preventing sanitizer's bickering here.\n+\t* trans-stmt.c (gfc_trans_deallocate): Only get data-component when it\n+\tis a descriptor-array here.\n+\n 2016-12-13  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/78798"}, {"sha": "c531522f71f2f8906cbbf6ab180dc76efa8d8185", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb401400f59e4d1f28bbdc788c3234e0968081d7/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb401400f59e4d1f28bbdc788c3234e0968081d7/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=eb401400f59e4d1f28bbdc788c3234e0968081d7", "patch": "@@ -2563,7 +2563,7 @@ gfc_array_ref_shape (gfc_array_ref *ar, mpz_t *shape)\n    characterizes the reference.  */\n \n gfc_array_ref *\n-gfc_find_array_ref (gfc_expr *e)\n+gfc_find_array_ref (gfc_expr *e, bool allow_null)\n {\n   gfc_ref *ref;\n \n@@ -2573,7 +2573,12 @@ gfc_find_array_ref (gfc_expr *e)\n       break;\n \n   if (ref == NULL)\n-    gfc_internal_error (\"gfc_find_array_ref(): No ref found\");\n+    {\n+      if (allow_null)\n+\treturn NULL;\n+      else\n+\tgfc_internal_error (\"gfc_find_array_ref(): No ref found\");\n+    }\n \n   return &ref->u.ar;\n }"}, {"sha": "ea19732ccc34aef5c54eb3f79e13e3efefcbdfcf", "filename": "gcc/fortran/data.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb401400f59e4d1f28bbdc788c3234e0968081d7/gcc%2Ffortran%2Fdata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb401400f59e4d1f28bbdc788c3234e0968081d7/gcc%2Ffortran%2Fdata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdata.c?ref=eb401400f59e4d1f28bbdc788c3234e0968081d7", "patch": "@@ -483,7 +483,10 @@ gfc_assign_data_value (gfc_expr *lvalue, gfc_expr *rvalue, mpz_t index,\n \n   if (ref || last_ts->type == BT_CHARACTER)\n     {\n-      if (lvalue->ts.u.cl->length == NULL && !(ref && ref->u.ss.length != NULL))\n+      /* An initializer has to be constant.  */\n+      if (rvalue->expr_type != EXPR_CONSTANT\n+\t  || (lvalue->ts.u.cl->length == NULL\n+\t      && !(ref && ref->u.ss.length != NULL)))\n \treturn false;\n       expr = create_character_initializer (init, last_ts, ref, rvalue);\n     }"}, {"sha": "ae1a01b0ec4edf83454074141b274e1f40c4d102", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb401400f59e4d1f28bbdc788c3234e0968081d7/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb401400f59e4d1f28bbdc788c3234e0968081d7/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=eb401400f59e4d1f28bbdc788c3234e0968081d7", "patch": "@@ -3214,7 +3214,7 @@ bool gfc_check_constructor (gfc_expr *, bool (*)(gfc_expr *));\n bool gfc_array_size (gfc_expr *, mpz_t *);\n bool gfc_array_dimen_size (gfc_expr *, int, mpz_t *);\n bool gfc_array_ref_shape (gfc_array_ref *, mpz_t *);\n-gfc_array_ref *gfc_find_array_ref (gfc_expr *);\n+gfc_array_ref *gfc_find_array_ref (gfc_expr *, bool a = false);\n tree gfc_conv_array_initializer (tree type, gfc_expr *);\n bool spec_size (gfc_array_spec *, mpz_t *);\n bool spec_dimen_size (gfc_array_spec *, int, mpz_t *);"}, {"sha": "a6f4e7204e1fe83ea64634859a7446ff8454f876", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 38, "deletions": 31, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb401400f59e4d1f28bbdc788c3234e0968081d7/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb401400f59e4d1f28bbdc788c3234e0968081d7/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=eb401400f59e4d1f28bbdc788c3234e0968081d7", "patch": "@@ -2803,6 +2803,7 @@ compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n   int i, n, na;\n   unsigned long actual_size, formal_size;\n   bool full_array = false;\n+  gfc_array_ref *actual_arr_ref;\n \n   actual = *ap;\n \n@@ -2942,37 +2943,38 @@ compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t and assumed-shape dummies, the string length needs to match\n \t exactly.  */\n       if (a->expr->ts.type == BT_CHARACTER\n-\t   && a->expr->ts.u.cl && a->expr->ts.u.cl->length\n-\t   && a->expr->ts.u.cl->length->expr_type == EXPR_CONSTANT\n-\t   && f->sym->ts.u.cl && f->sym->ts.u.cl && f->sym->ts.u.cl->length\n-\t   && f->sym->ts.u.cl->length->expr_type == EXPR_CONSTANT\n-\t   && (f->sym->attr.pointer || f->sym->attr.allocatable\n-\t       || (f->sym->as && f->sym->as->type == AS_ASSUMED_SHAPE))\n-\t   && (mpz_cmp (a->expr->ts.u.cl->length->value.integer,\n-\t\t\tf->sym->ts.u.cl->length->value.integer) != 0))\n-\t {\n-\t   if (where && (f->sym->attr.pointer || f->sym->attr.allocatable))\n-\t     gfc_warning (OPT_Wargument_mismatch,\n-\t\t\t  \"Character length mismatch (%ld/%ld) between actual \"\n-\t\t\t  \"argument and pointer or allocatable dummy argument \"\n-\t\t\t  \"%qs at %L\",\n-\t\t\t  mpz_get_si (a->expr->ts.u.cl->length->value.integer),\n-\t\t\t  mpz_get_si (f->sym->ts.u.cl->length->value.integer),\n-\t\t\t  f->sym->name, &a->expr->where);\n-\t   else if (where)\n-\t     gfc_warning (OPT_Wargument_mismatch,\n-\t\t\t  \"Character length mismatch (%ld/%ld) between actual \"\n-\t\t\t  \"argument and assumed-shape dummy argument %qs \"\n-\t\t\t  \"at %L\",\n-\t\t\t  mpz_get_si (a->expr->ts.u.cl->length->value.integer),\n-\t\t\t  mpz_get_si (f->sym->ts.u.cl->length->value.integer),\n-\t\t\t  f->sym->name, &a->expr->where);\n-\t   return 0;\n-\t }\n+\t  && a->expr->ts.u.cl && a->expr->ts.u.cl->length\n+\t  && a->expr->ts.u.cl->length->expr_type == EXPR_CONSTANT\n+\t  && f->sym->ts.type == BT_CHARACTER && f->sym->ts.u.cl\n+\t  && f->sym->ts.u.cl->length\n+\t  && f->sym->ts.u.cl->length->expr_type == EXPR_CONSTANT\n+\t  && (f->sym->attr.pointer || f->sym->attr.allocatable\n+\t      || (f->sym->as && f->sym->as->type == AS_ASSUMED_SHAPE))\n+\t  && (mpz_cmp (a->expr->ts.u.cl->length->value.integer,\n+\t\t       f->sym->ts.u.cl->length->value.integer) != 0))\n+\t{\n+\t  if (where && (f->sym->attr.pointer || f->sym->attr.allocatable))\n+\t    gfc_warning (OPT_Wargument_mismatch,\n+\t\t\t \"Character length mismatch (%ld/%ld) between actual \"\n+\t\t\t \"argument and pointer or allocatable dummy argument \"\n+\t\t\t \"%qs at %L\",\n+\t\t\t mpz_get_si (a->expr->ts.u.cl->length->value.integer),\n+\t\t\t mpz_get_si (f->sym->ts.u.cl->length->value.integer),\n+\t\t\t f->sym->name, &a->expr->where);\n+\t  else if (where)\n+\t    gfc_warning (OPT_Wargument_mismatch,\n+\t\t\t \"Character length mismatch (%ld/%ld) between actual \"\n+\t\t\t \"argument and assumed-shape dummy argument %qs \"\n+\t\t\t \"at %L\",\n+\t\t\t mpz_get_si (a->expr->ts.u.cl->length->value.integer),\n+\t\t\t mpz_get_si (f->sym->ts.u.cl->length->value.integer),\n+\t\t\t f->sym->name, &a->expr->where);\n+\t  return 0;\n+\t}\n \n       if ((f->sym->attr.pointer || f->sym->attr.allocatable)\n-\t    && f->sym->ts.deferred != a->expr->ts.deferred\n-\t    && a->expr->ts.type == BT_CHARACTER)\n+\t  && f->sym->ts.deferred != a->expr->ts.deferred\n+\t  && a->expr->ts.type == BT_CHARACTER)\n \t{\n \t  if (where)\n \t    gfc_error (\"Actual argument at %L to allocatable or \"\n@@ -3195,15 +3197,20 @@ compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t  return 0;\n \t}\n \n+      /* Find the last array_ref.  */\n+      actual_arr_ref = NULL;\n+      if (a->expr->ref)\n+\tactual_arr_ref = gfc_find_array_ref (a->expr, true);\n+\n       if (f->sym->attr.volatile_\n-\t  && a->expr->ref && a->expr->ref->u.ar.type == AR_SECTION\n+\t  && actual_arr_ref && actual_arr_ref->type == AR_SECTION\n \t  && !(f->sym->as && f->sym->as->type == AS_ASSUMED_SHAPE))\n \t{\n \t  if (where)\n \t    gfc_error (\"Array-section actual argument at %L is \"\n \t\t       \"incompatible with the non-assumed-shape \"\n \t\t       \"dummy argument %qs due to VOLATILE attribute\",\n-\t\t       &a->expr->where,f->sym->name);\n+\t\t       &a->expr->where, f->sym->name);\n \t  return 0;\n \t}\n "}, {"sha": "713f27271de996ba5c11380561a58f23705d357c", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb401400f59e4d1f28bbdc788c3234e0968081d7/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb401400f59e4d1f28bbdc788c3234e0968081d7/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=eb401400f59e4d1f28bbdc788c3234e0968081d7", "patch": "@@ -4710,6 +4710,7 @@ load_omp_udrs (void)\n \n       mio_lparen ();\n       mio_pool_string (&name);\n+      gfc_clear_ts (&ts);\n       mio_typespec (&ts);\n       if (strncmp (name, \"operator \", sizeof (\"operator \") - 1) == 0)\n \t{"}, {"sha": "a7a5e2a4b6b6747e5360d925668e031762917cb9", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb401400f59e4d1f28bbdc788c3234e0968081d7/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb401400f59e4d1f28bbdc788c3234e0968081d7/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=eb401400f59e4d1f28bbdc788c3234e0968081d7", "patch": "@@ -1053,7 +1053,7 @@ gfc_build_qualified_array (tree decl, gfc_symbol * sym)\n       layout_type (type);\n     }\n \n-  if (TYPE_NAME (type) != NULL_TREE\n+  if (TYPE_NAME (type) != NULL_TREE && as->rank > 0\n       && GFC_TYPE_ARRAY_UBOUND (type, as->rank - 1) != NULL_TREE\n       && VAR_P (GFC_TYPE_ARRAY_UBOUND (type, as->rank - 1)))\n     {"}, {"sha": "2f45d40bec72350b0768a24a1a6e2061f3f97be0", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb401400f59e4d1f28bbdc788c3234e0968081d7/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb401400f59e4d1f28bbdc788c3234e0968081d7/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=eb401400f59e4d1f28bbdc788c3234e0968081d7", "patch": "@@ -2864,9 +2864,9 @@ gfc_conv_cst_int_power (gfc_se * se, tree lhs, tree rhs)\n     return 0;\n \n   m = wrhs.to_shwi ();\n-  /* There's no ABS for HOST_WIDE_INT, so here we go. It also takes care\n-     of the asymmetric range of the integer type.  */\n-  n = (unsigned HOST_WIDE_INT) (m < 0 ? -m : m);\n+  /* Use the wide_int's routine to reliably get the absolute value on all\n+     platforms.  Then convert it to a HOST_WIDE_INT like above.  */\n+  n = wi::abs (wrhs).to_shwi ();\n \n   type = TREE_TYPE (lhs);\n   sgn = tree_int_cst_sgn (rhs);"}, {"sha": "d9e185f292790dcb199701b883957faa74fb5bc4", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb401400f59e4d1f28bbdc788c3234e0968081d7/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb401400f59e4d1f28bbdc788c3234e0968081d7/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=eb401400f59e4d1f28bbdc788c3234e0968081d7", "patch": "@@ -6483,7 +6483,8 @@ gfc_trans_deallocate (gfc_code *code)\n \t\t    && !(!last && expr->symtree->n.sym->attr.pointer))\n \t\t{\n \t\t  if (is_coarray && expr->rank == 0\n-\t\t      && (!last || !last->u.c.component->attr.dimension))\n+\t\t      && (!last || !last->u.c.component->attr.dimension)\n+\t\t      && GFC_DESCRIPTOR_TYPE_P (TREE_TYPE (se.expr)))\n \t\t    {\n \t\t      /* Add the ref to the data member only, when this is not\n \t\t\t a regular array or deallocate_alloc_comp will try to"}]}