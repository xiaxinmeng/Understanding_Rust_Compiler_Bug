{"sha": "e9fff24cd2b365a236fcb31bdf186f6ec9e00f76", "node_id": "C_kwDOANBUbNoAKGU5ZmZmMjRjZDJiMzY1YTIzNmZjYjMxYmRmMTg2ZjZlYzllMDBmNzY", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-11-30T09:52:25Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-11-30T09:52:25Z"}, "message": "Canonicalize argument order for commutative functions\n\nThis patch uses information about internal functions to canonicalize\nthe argument order of calls.\n\ngcc/\n\t* gimple-fold.c: Include internal-fn.h.\n\t(fold_stmt_1): If a function maps to an internal one, use\n\tfirst_commutative_argument to canonicalize the order of\n\tcommutative arguments.\n\t* gimple-match-head.c (gimple_resimplify2, gimple_resimplify3)\n\t(gimple_resimplify4, gimple_resimplify5): Extend commutativity\n\tchecks to functions.\n\ngcc/testsuite/\n\t* gcc.dg/fmax-fmin-1.c: New test.", "tree": {"sha": "8bf1c8fe2dcdb1f22fe4a1eafb002f6ceb1b2872", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bf1c8fe2dcdb1f22fe4a1eafb002f6ceb1b2872"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9fff24cd2b365a236fcb31bdf186f6ec9e00f76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9fff24cd2b365a236fcb31bdf186f6ec9e00f76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9fff24cd2b365a236fcb31bdf186f6ec9e00f76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9fff24cd2b365a236fcb31bdf186f6ec9e00f76/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c"}], "stats": {"total": 95, "additions": 75, "deletions": 20}, "files": [{"sha": "1d8fd74f72c7656684d1867dad7911099649b230", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fff24cd2b365a236fcb31bdf186f6ec9e00f76/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fff24cd2b365a236fcb31bdf186f6ec9e00f76/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=e9fff24cd2b365a236fcb31bdf186f6ec9e00f76", "patch": "@@ -69,6 +69,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"varasm.h\"\n #include \"memmodel.h\"\n #include \"optabs.h\"\n+#include \"internal-fn.h\"\n \n enum strlen_range_kind {\n   /* Compute the exact constant string length.  */\n@@ -6109,18 +6110,36 @@ fold_stmt_1 (gimple_stmt_iterator *gsi, bool inplace, tree (*valueize) (tree))\n       break;\n     case GIMPLE_CALL:\n       {\n-\tfor (i = 0; i < gimple_call_num_args (stmt); ++i)\n+\tgcall *call = as_a<gcall *> (stmt);\n+\tfor (i = 0; i < gimple_call_num_args (call); ++i)\n \t  {\n-\t    tree *arg = gimple_call_arg_ptr (stmt, i);\n+\t    tree *arg = gimple_call_arg_ptr (call, i);\n \t    if (REFERENCE_CLASS_P (*arg)\n \t\t&& maybe_canonicalize_mem_ref_addr (arg))\n \t      changed = true;\n \t  }\n-\ttree *lhs = gimple_call_lhs_ptr (stmt);\n+\ttree *lhs = gimple_call_lhs_ptr (call);\n \tif (*lhs\n \t    && REFERENCE_CLASS_P (*lhs)\n \t    && maybe_canonicalize_mem_ref_addr (lhs))\n \t  changed = true;\n+\tif (*lhs)\n+\t  {\n+\t    combined_fn cfn = gimple_call_combined_fn (call);\n+\t    internal_fn ifn = associated_internal_fn (cfn, TREE_TYPE (*lhs));\n+\t    int opno = first_commutative_argument (ifn);\n+\t    if (opno >= 0)\n+\t      {\n+\t\ttree arg1 = gimple_call_arg (call, opno);\n+\t\ttree arg2 = gimple_call_arg (call, opno + 1);\n+\t\tif (tree_swap_operands_p (arg1, arg2))\n+\t\t  {\n+\t\t    gimple_call_set_arg (call, opno, arg2);\n+\t\t    gimple_call_set_arg (call, opno + 1, arg1);\n+\t\t    changed = true;\n+\t\t  }\n+\t      }\n+\t  }\n \tbreak;\n       }\n     case GIMPLE_ASM:"}, {"sha": "2d9364ca5defc9215aeafb83eaef5170105c789a", "filename": "gcc/gimple-match-head.c", "status": "modified", "additions": 35, "deletions": 17, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fff24cd2b365a236fcb31bdf186f6ec9e00f76/gcc%2Fgimple-match-head.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fff24cd2b365a236fcb31bdf186f6ec9e00f76/gcc%2Fgimple-match-head.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-match-head.c?ref=e9fff24cd2b365a236fcb31bdf186f6ec9e00f76", "patch": "@@ -294,18 +294,16 @@ gimple_resimplify2 (gimple_seq *seq, gimple_match_op *res_op,\n \n   /* Canonicalize operand order.  */\n   bool canonicalized = false;\n-  if (res_op->code.is_tree_code ())\n+  bool is_comparison\n+    = (res_op->code.is_tree_code ()\n+       && TREE_CODE_CLASS (tree_code (res_op->code)) == tcc_comparison);\n+  if ((is_comparison || commutative_binary_op_p (res_op->code, res_op->type))\n+      && tree_swap_operands_p (res_op->ops[0], res_op->ops[1]))\n     {\n-      auto code = tree_code (res_op->code);\n-      if ((TREE_CODE_CLASS (code) == tcc_comparison\n-\t   || commutative_tree_code (code))\n-\t  && tree_swap_operands_p (res_op->ops[0], res_op->ops[1]))\n-\t{\n-\t  std::swap (res_op->ops[0], res_op->ops[1]);\n-\t  if (TREE_CODE_CLASS (code) == tcc_comparison)\n-\t    res_op->code = swap_tree_comparison (code);\n-\t  canonicalized = true;\n-\t}\n+      std::swap (res_op->ops[0], res_op->ops[1]);\n+      if (is_comparison)\n+\tres_op->code = swap_tree_comparison (tree_code (res_op->code));\n+      canonicalized = true;\n     }\n \n   /* Limit recursion, see gimple_resimplify1.  */\n@@ -376,11 +374,11 @@ gimple_resimplify3 (gimple_seq *seq, gimple_match_op *res_op,\n \n   /* Canonicalize operand order.  */\n   bool canonicalized = false;\n-  if (res_op->code.is_tree_code ()\n-      && commutative_ternary_tree_code (tree_code (res_op->code))\n-      && tree_swap_operands_p (res_op->ops[0], res_op->ops[1]))\n+  int argno = first_commutative_argument (res_op->code, res_op->type);\n+  if (argno >= 0\n+      && tree_swap_operands_p (res_op->ops[argno], res_op->ops[argno + 1]))\n     {\n-      std::swap (res_op->ops[0], res_op->ops[1]);\n+      std::swap (res_op->ops[argno], res_op->ops[argno + 1]);\n       canonicalized = true;\n     }\n \n@@ -424,6 +422,16 @@ gimple_resimplify4 (gimple_seq *seq, gimple_match_op *res_op,\n {\n   /* No constant folding is defined for four-operand functions.  */\n \n+  /* Canonicalize operand order.  */\n+  bool canonicalized = false;\n+  int argno = first_commutative_argument (res_op->code, res_op->type);\n+  if (argno >= 0\n+      && tree_swap_operands_p (res_op->ops[argno], res_op->ops[argno + 1]))\n+    {\n+      std::swap (res_op->ops[argno], res_op->ops[argno + 1]);\n+      canonicalized = true;\n+    }\n+\n   /* Limit recursion, see gimple_resimplify1.  */\n   static unsigned depth;\n   if (depth > 10)\n@@ -450,7 +458,7 @@ gimple_resimplify4 (gimple_seq *seq, gimple_match_op *res_op,\n   if (maybe_resimplify_conditional_op (seq, res_op, valueize))\n     return true;\n \n-  return false;\n+  return canonicalized;\n }\n \n /* Helper that matches and simplifies the toplevel result from\n@@ -465,6 +473,16 @@ gimple_resimplify5 (gimple_seq *seq, gimple_match_op *res_op,\n {\n   /* No constant folding is defined for five-operand functions.  */\n \n+  /* Canonicalize operand order.  */\n+  bool canonicalized = false;\n+  int argno = first_commutative_argument (res_op->code, res_op->type);\n+  if (argno >= 0\n+      && tree_swap_operands_p (res_op->ops[argno], res_op->ops[argno + 1]))\n+    {\n+      std::swap (res_op->ops[argno], res_op->ops[argno + 1]);\n+      canonicalized = true;\n+    }\n+\n   gimple_match_op res_op2 (*res_op);\n   if (gimple_simplify (&res_op2, seq, valueize,\n \t\t       res_op->code, res_op->type,\n@@ -478,7 +496,7 @@ gimple_resimplify5 (gimple_seq *seq, gimple_match_op *res_op,\n   if (maybe_resimplify_conditional_op (seq, res_op, valueize))\n     return true;\n \n-  return false;\n+  return canonicalized;\n }\n \n /* Match and simplify the toplevel valueized operation THIS."}, {"sha": "e7e0518d8bbfcb9c78c44c77f9177ceaf77eb364", "filename": "gcc/testsuite/gcc.dg/fmax-fmin-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fff24cd2b365a236fcb31bdf186f6ec9e00f76/gcc%2Ftestsuite%2Fgcc.dg%2Ffmax-fmin-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fff24cd2b365a236fcb31bdf186f6ec9e00f76/gcc%2Ftestsuite%2Fgcc.dg%2Ffmax-fmin-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffmax-fmin-1.c?ref=e9fff24cd2b365a236fcb31bdf186f6ec9e00f76", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-options \"-O -fdump-tree-optimized\" } */\n+\n+void\n+f1 (double *res, double x, double y)\n+{\n+  res[0] = __builtin_fmax (x, y);\n+  res[1] = __builtin_fmax (y, x);\n+}\n+\n+void\n+f2 (double *res, double x, double y)\n+{\n+  res[0] = __builtin_fmin (x, y);\n+  res[1] = __builtin_fmin (y, x);\n+}\n+\n+/* { dg-final { scan-tree-dump-times {__builtin_fmax} 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times {__builtin_fmin} 1 \"optimized\" } } */"}]}