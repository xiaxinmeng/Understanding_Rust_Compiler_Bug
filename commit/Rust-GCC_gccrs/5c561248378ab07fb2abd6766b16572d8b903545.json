{"sha": "5c561248378ab07fb2abd6766b16572d8b903545", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM1NjEyNDgzNzhhYjA3ZmIyYWJkNjc2NmIxNjU3MmQ4YjkwMzU0NQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-02-25T10:32:38Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-02-25T10:32:38Z"}, "message": "re PR target/89434 (wrong code with -Og and __builtin_mul_overflow())\n\n\tPR target/89434\n\t* config/arm/arm.md (*subsi3_carryin_const): Use\n\tarm_neg_immediate_operand predicate instead of\n\tarm_not_immediate_operand, \"L\" constraint instead of \"K\" and\n\tprint it using %n2 instead of %B2.\n\t(*subsi3_carryin_const0): New define_insn.\n\t(*subsi3_carryin_compare_const): Use const_int_I_operand predicate\n\tinstead of arm_not_operand and \"I\" constraint instead of \"K\" and\n\tprint it using %n3 instead of %B2.  Instead of using match_dup 2 add\n\tanother match_operand and in the condition check that it is negation\n\tof operands[2].\n\t(*subsi3_carryin_compare_const0): New define_ins.\n\t(*subdi_di_zesidi): Adjust to use *subsi3_carryin_const0 instead of\n\t*subsi3_carryin_const.\n\t(*arm_cmpdi_insn): Fix splitting into *subsi3_carryin_compare_const,\n\tsplit into *subsi3_carryin_compare_const0 if the highpart is zero.\n\n\t* gcc.c-torture/execute/pr89434.c: New test.\n\nFrom-SVN: r269186", "tree": {"sha": "ed628bf6873ea15d090cf86a3a1800d38d42502e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed628bf6873ea15d090cf86a3a1800d38d42502e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c561248378ab07fb2abd6766b16572d8b903545", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c561248378ab07fb2abd6766b16572d8b903545", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c561248378ab07fb2abd6766b16572d8b903545", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c561248378ab07fb2abd6766b16572d8b903545/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4199c859ac95ee15433902b5d2a3a537b36e4752", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4199c859ac95ee15433902b5d2a3a537b36e4752", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4199c859ac95ee15433902b5d2a3a537b36e4752"}], "stats": {"total": 103, "additions": 91, "deletions": 12}, "files": [{"sha": "cce2741a809bfd7af041a9ce50f010aa51202fde", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c561248378ab07fb2abd6766b16572d8b903545/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c561248378ab07fb2abd6766b16572d8b903545/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c561248378ab07fb2abd6766b16572d8b903545", "patch": "@@ -1,5 +1,22 @@\n 2019-02-25  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/89434\n+\t* config/arm/arm.md (*subsi3_carryin_const): Use\n+\tarm_neg_immediate_operand predicate instead of\n+\tarm_not_immediate_operand, \"L\" constraint instead of \"K\" and\n+\tprint it using %n2 instead of %B2.\n+\t(*subsi3_carryin_const0): New define_insn.\n+\t(*subsi3_carryin_compare_const): Use const_int_I_operand predicate\n+\tinstead of arm_not_operand and \"I\" constraint instead of \"K\" and\n+\tprint it using %n3 instead of %B2.  Instead of using match_dup 2 add\n+\tanother match_operand and in the condition check that it is negation\n+\tof operands[2].\n+\t(*subsi3_carryin_compare_const0): New define_ins.\n+\t(*subdi_di_zesidi): Adjust to use *subsi3_carryin_const0 instead of\n+\t*subsi3_carryin_const.\n+\t(*arm_cmpdi_insn): Fix splitting into *subsi3_carryin_compare_const,\n+\tsplit into *subsi3_carryin_compare_const0 if the highpart is zero.\n+\n \tPR target/89438\n \t* config/arm.vfp.md (*negdf2_vfp): Use\n \tgen_int_mode (0x80000000, SImode) instead of GEN_INT (0x80000000)."}, {"sha": "349b0a5d07d2c966e4d178348312017940be482f", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 37, "deletions": 12, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c561248378ab07fb2abd6766b16572d8b903545/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c561248378ab07fb2abd6766b16572d8b903545/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=5c561248378ab07fb2abd6766b16572d8b903545", "patch": "@@ -1145,10 +1145,20 @@\n (define_insn \"*subsi3_carryin_const\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n         (minus:SI (plus:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n-                           (match_operand:SI 2 \"arm_not_immediate_operand\" \"K\"))\n+                           (match_operand:SI 2 \"arm_neg_immediate_operand\" \"L\"))\n                   (ltu:SI (reg:CC_C CC_REGNUM) (const_int 0))))]\n   \"TARGET_32BIT\"\n-  \"sbc\\\\t%0, %1, #%B2\"\n+  \"sbc\\\\t%0, %1, #%n2\"\n+  [(set_attr \"conds\" \"use\")\n+   (set_attr \"type\" \"adc_imm\")]\n+)\n+\n+(define_insn \"*subsi3_carryin_const0\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+        (minus:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n+                  (ltu:SI (reg:CC_C CC_REGNUM) (const_int 0))))]\n+  \"TARGET_32BIT\"\n+  \"sbc\\\\t%0, %1, #0\"\n   [(set_attr \"conds\" \"use\")\n    (set_attr \"type\" \"adc_imm\")]\n )\n@@ -1170,13 +1180,26 @@\n (define_insn \"*subsi3_carryin_compare_const\"\n   [(set (reg:CC CC_REGNUM)\n         (compare:CC (match_operand:SI 1 \"reg_or_int_operand\" \"r\")\n-                    (match_operand:SI 2 \"arm_not_operand\" \"K\")))\n+                    (match_operand:SI 2 \"const_int_I_operand\" \"I\")))\n    (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n         (minus:SI (plus:SI (match_dup 1)\n-                           (match_dup 2))\n+                           (match_operand:SI 3 \"arm_neg_immediate_operand\" \"L\"))\n+                  (ltu:SI (reg:CC_C CC_REGNUM) (const_int 0))))]\n+  \"TARGET_32BIT && UINTVAL (operands[2]) == -UINTVAL (operands[3])\"\n+  \"sbcs\\\\t%0, %1, #%n3\"\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"type\" \"adcs_imm\")]\n+)\n+\n+(define_insn \"*subsi3_carryin_compare_const0\"\n+  [(set (reg:CC CC_REGNUM)\n+        (compare:CC (match_operand:SI 1 \"reg_or_int_operand\" \"r\")\n+\t\t    (const_int 0)))\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+        (minus:SI (match_dup 1)\n                   (ltu:SI (reg:CC_C CC_REGNUM) (const_int 0))))]\n   \"TARGET_32BIT\"\n-  \"sbcs\\\\t%0, %1, #%B2\"\n+  \"sbcs\\\\t%0, %1, #0\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"type\" \"adcs_imm\")]\n )\n@@ -1301,14 +1324,13 @@\n   [(parallel [(set (reg:CC CC_REGNUM)\n \t\t   (compare:CC (match_dup 1) (match_dup 2)))\n \t      (set (match_dup 0) (minus:SI (match_dup 1) (match_dup 2)))])\n-   (set (match_dup 3) (minus:SI (plus:SI (match_dup 4) (match_dup 5))\n+   (set (match_dup 3) (minus:SI (match_dup 4)\n                                 (ltu:SI (reg:CC_C CC_REGNUM) (const_int 0))))]\n   {\n     operands[3] = gen_highpart (SImode, operands[0]);\n     operands[0] = gen_lowpart (SImode, operands[0]);\n     operands[4] = gen_highpart (SImode, operands[1]);\n     operands[1] = gen_lowpart (SImode, operands[1]);\n-    operands[5] = GEN_INT (~0);\n    }\n   [(set_attr \"conds\" \"clob\")\n    (set_attr \"length\" \"8\")\n@@ -7423,16 +7445,19 @@\n                    (compare:CC (match_dup 3) (match_dup 4)))\n               (set (match_dup 2)\n                    (minus:SI (match_dup 5)\n-                            (ltu:SI (reg:CC_C CC_REGNUM) (const_int 0))))])]\n+\t\t\t     (ltu:SI (reg:CC_C CC_REGNUM) (const_int 0))))])]\n   {\n     operands[3] = gen_highpart (SImode, operands[0]);\n     operands[0] = gen_lowpart (SImode, operands[0]);\n     if (CONST_INT_P (operands[1]))\n       {\n-        operands[4] = GEN_INT (~INTVAL (gen_highpart_mode (SImode,\n-                                                           DImode,\n-                                                           operands[1])));\n-        operands[5] = gen_rtx_PLUS (SImode, operands[3], operands[4]);\n+\toperands[4] = gen_highpart_mode (SImode, DImode, operands[1]);\n+\tif (operands[4] == const0_rtx)\n+\t  operands[5] = operands[3];\n+\telse\n+\t  operands[5] = gen_rtx_PLUS (SImode, operands[3],\n+\t\t\t\t      gen_int_mode (-UINTVAL (operands[4]),\n+\t\t\t\t\t\t    SImode));\n       }\n     else\n       {"}, {"sha": "70e692bcec775b58e35414a4c2309b77ee05c7c2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c561248378ab07fb2abd6766b16572d8b903545/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c561248378ab07fb2abd6766b16572d8b903545/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5c561248378ab07fb2abd6766b16572d8b903545", "patch": "@@ -1,5 +1,8 @@\n 2019-02-25  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/89434\n+\t* gcc.c-torture/execute/pr89434.c: New test.\n+\n \tPR target/89438\n \t* gcc.dg/pr89438.c: New test.\n "}, {"sha": "5c26266e522ab5922f54b595e6eaf25ae3bbf074", "filename": "gcc/testsuite/gcc.c-torture/execute/pr89434.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c561248378ab07fb2abd6766b16572d8b903545/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr89434.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c561248378ab07fb2abd6766b16572d8b903545/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr89434.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr89434.c?ref=5c561248378ab07fb2abd6766b16572d8b903545", "patch": "@@ -0,0 +1,29 @@\n+/* PR target/89434 */\n+\n+#if __SIZEOF_INT__ == 4 && __SIZEOF_LONG_LONG__ == 8 && __CHAR_BIT__ == 8\n+long g = 0;\n+\n+static inline unsigned long long\n+foo (unsigned long long u)\n+{\n+  unsigned x;\n+  __builtin_mul_overflow (-1, g, &x);\n+  u |= (unsigned) u < (unsigned short) x;\n+  return x - u;\n+}\n+\n+int\n+main ()\n+{\n+  unsigned long long x = foo (0x222222222ULL);\n+  if (x != 0xfffffffddddddddeULL)\n+    __builtin_abort ();\n+  return 0;\n+}\n+#else\n+int\n+main ()\n+{\n+  return 0;\n+}\n+#endif"}, {"sha": "477adb50c251b9a86a37cf787b4af010736ced04", "filename": "gcc/testsuite/gcc.dg/pr89434.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c561248378ab07fb2abd6766b16572d8b903545/gcc%2Ftestsuite%2Fgcc.dg%2Fpr89434.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c561248378ab07fb2abd6766b16572d8b903545/gcc%2Ftestsuite%2Fgcc.dg%2Fpr89434.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr89434.c?ref=5c561248378ab07fb2abd6766b16572d8b903545", "patch": "@@ -0,0 +1,5 @@\n+/* PR target/89434 */\n+/* { dg-do run } */\n+/* { dg-options \"-Og\" } */\n+\n+#include \"../gcc.c-torture/execute/pr89434.c\""}]}