{"sha": "7606865198b241b4c944f66761d6506b02ead951", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzYwNjg2NTE5OGIyNDFiNGM5NDRmNjY3NjFkNjUwNmIwMmVhZDk1MQ==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2021-05-17T12:31:58Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2021-05-17T12:31:58Z"}, "message": "arm: Auto-vectorization for MVE: add __fp16 support to VCMP\n\nThis patch adds __fp16 support to the previous patch that added vcmp\nsupport with MVE. For this we update existing expanders to use VDQWH\niterator, and add a new expander vcond<VH_cvtto><mode>.  In the\nprocess we need to create suitable iterators, and update v_cmp_result\nas needed.\n\n2021-05-17  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tgcc/\n\t* config/arm/iterators.md (V16): New iterator.\n\t(VH_cvtto): New iterator.\n\t(v_cmp_result): Added V4HF and V8HF support.\n\t* config/arm/vec-common.md (vec_cmp<mode><v_cmp_result>): Use VDQWH.\n\t(vcond<mode><mode>): Likewise.\n\t(vcond_mask_<mode><v_cmp_result>): Likewise.\n\t(vcond<VH_cvtto><mode>): New expander.\n\n\tgcc/testsuite/\n\t* gcc.target/arm/simd/mve-compare-3.c: New test with GCC vectors.\n\t* gcc.target/arm/simd/mve-vcmp-f16.c: New test for\n\tauto-vectorization.\n\t* gcc.target/arm/armv8_2-fp16-arith-1.c: Adjust since we now\n\tvectorize float16_t vectors.", "tree": {"sha": "ee96349b7fccdd8f7bf8800fa1990f4c411cb325", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee96349b7fccdd8f7bf8800fa1990f4c411cb325"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7606865198b241b4c944f66761d6506b02ead951", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7606865198b241b4c944f66761d6506b02ead951", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7606865198b241b4c944f66761d6506b02ead951", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7606865198b241b4c944f66761d6506b02ead951/comments", "author": null, "committer": null, "parents": [{"sha": "a6eacbf1055520e968d1a25f6d30d6ff4b66272d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6eacbf1055520e968d1a25f6d30d6ff4b66272d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6eacbf1055520e968d1a25f6d30d6ff4b66272d"}], "stats": {"total": 130, "additions": 116, "deletions": 14}, "files": [{"sha": "3042bafc6c6ee2e40311e46d8f345e18c1072220", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7606865198b241b4c944f66761d6506b02ead951/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7606865198b241b4c944f66761d6506b02ead951/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=7606865198b241b4c944f66761d6506b02ead951", "patch": "@@ -231,6 +231,9 @@\n ;; Vector modes for 16-bit floating-point support.\n (define_mode_iterator VH [V8HF V4HF])\n \n+;; Modes with 16-bit elements only.\n+(define_mode_iterator V16 [V4HI V4HF V8HI V8HF])\n+\n ;; 16-bit floating-point vector modes suitable for moving (includes BFmode).\n (define_mode_iterator VHFBF [V8HF V4HF V4BF V8BF])\n \n@@ -571,6 +574,8 @@\n ;; (Opposite) mode to convert to/from for vector-half mode conversions.\n (define_mode_attr VH_CVTTO [(V4HI \"V4HF\") (V4HF \"V4HI\")\n \t\t\t    (V8HI \"V8HF\") (V8HF \"V8HI\")])\n+(define_mode_attr VH_cvtto [(V4HI \"v4hf\") (V4HF \"v4hi\")\n+\t\t\t    (V8HI \"v8hf\") (V8HF \"v8hi\")])\n \n ;; Define element mode for each vector mode.\n (define_mode_attr V_elem [(V8QI \"QI\") (V16QI \"QI\")\n@@ -720,6 +725,7 @@\n (define_mode_attr v_cmp_result [(V8QI \"v8qi\") (V16QI \"v16qi\")\n \t\t\t\t(V4HI \"v4hi\") (V8HI  \"v8hi\")\n \t\t\t\t(V2SI \"v2si\") (V4SI  \"v4si\")\n+\t\t\t\t(V4HF \"v4hi\") (V8HF  \"v8hi\")\n \t\t\t\t(DI   \"di\")   (V2DI  \"v2di\")\n \t\t\t\t(V2SF \"v2si\") (V4SF  \"v4si\")])\n "}, {"sha": "265fa40e74734c98fb70ec75de7e707c33cab3ef", "filename": "gcc/config/arm/vec-common.md", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7606865198b241b4c944f66761d6506b02ead951/gcc%2Fconfig%2Farm%2Fvec-common.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7606865198b241b4c944f66761d6506b02ead951/gcc%2Fconfig%2Farm%2Fvec-common.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvec-common.md?ref=7606865198b241b4c944f66761d6506b02ead951", "patch": "@@ -366,8 +366,8 @@\n (define_expand \"vec_cmp<mode><v_cmp_result>\"\n   [(set (match_operand:<V_cmp_result> 0 \"s_register_operand\")\n \t(match_operator:<V_cmp_result> 1 \"comparison_operator\"\n-\t  [(match_operand:VDQW 2 \"s_register_operand\")\n-\t   (match_operand:VDQW 3 \"reg_or_zero_operand\")]))]\n+\t  [(match_operand:VDQWH 2 \"s_register_operand\")\n+\t   (match_operand:VDQWH 3 \"reg_or_zero_operand\")]))]\n   \"ARM_HAVE_<MODE>_ARITH\n    && !TARGET_REALLY_IWMMXT\n    && (!<Is_float_mode> || flag_unsafe_math_optimizations)\"\n@@ -399,13 +399,13 @@\n ;; element-wise.\n \n (define_expand \"vcond<mode><mode>\"\n-  [(set (match_operand:VDQW 0 \"s_register_operand\")\n-\t(if_then_else:VDQW\n+  [(set (match_operand:VDQWH 0 \"s_register_operand\")\n+\t(if_then_else:VDQWH\n \t  (match_operator 3 \"comparison_operator\"\n-\t    [(match_operand:VDQW 4 \"s_register_operand\")\n-\t     (match_operand:VDQW 5 \"reg_or_zero_operand\")])\n-\t  (match_operand:VDQW 1 \"s_register_operand\")\n-\t  (match_operand:VDQW 2 \"s_register_operand\")))]\n+\t    [(match_operand:VDQWH 4 \"s_register_operand\")\n+\t     (match_operand:VDQWH 5 \"reg_or_zero_operand\")])\n+\t  (match_operand:VDQWH 1 \"s_register_operand\")\n+\t  (match_operand:VDQWH 2 \"s_register_operand\")))]\n   \"ARM_HAVE_<MODE>_ARITH\n    && !TARGET_REALLY_IWMMXT\n    && (!<Is_float_mode> || flag_unsafe_math_optimizations)\"\n@@ -430,6 +430,22 @@\n   DONE;\n })\n \n+(define_expand \"vcond<VH_cvtto><mode>\"\n+  [(set (match_operand:<VH_CVTTO> 0 \"s_register_operand\")\n+\t(if_then_else:<VH_CVTTO>\n+\t  (match_operator 3 \"comparison_operator\"\n+\t    [(match_operand:V16 4 \"s_register_operand\")\n+\t     (match_operand:V16 5 \"reg_or_zero_operand\")])\n+\t  (match_operand:<VH_CVTTO> 1 \"s_register_operand\")\n+\t  (match_operand:<VH_CVTTO> 2 \"s_register_operand\")))]\n+  \"ARM_HAVE_<MODE>_ARITH\n+   && !TARGET_REALLY_IWMMXT\n+   && (!<Is_float_mode> || flag_unsafe_math_optimizations)\"\n+{\n+  arm_expand_vcond (operands, <V_cmp_result>mode);\n+  DONE;\n+})\n+\n (define_expand \"vcondu<mode><v_cmp_result>\"\n   [(set (match_operand:VDQW 0 \"s_register_operand\")\n \t(if_then_else:VDQW\n@@ -446,11 +462,11 @@\n })\n \n (define_expand \"vcond_mask_<mode><v_cmp_result>\"\n-  [(set (match_operand:VDQW 0 \"s_register_operand\")\n-        (if_then_else:VDQW\n+  [(set (match_operand:VDQWH 0 \"s_register_operand\")\n+        (if_then_else:VDQWH\n           (match_operand:<V_cmp_result> 3 \"s_register_operand\")\n-          (match_operand:VDQW 1 \"s_register_operand\")\n-          (match_operand:VDQW 2 \"s_register_operand\")))]\n+          (match_operand:VDQWH 1 \"s_register_operand\")\n+          (match_operand:VDQWH 2 \"s_register_operand\")))]\n   \"ARM_HAVE_<MODE>_ARITH\n    && !TARGET_REALLY_IWMMXT\n    && (!<Is_float_mode> || flag_unsafe_math_optimizations)\""}, {"sha": "52b87376dc782c9e6ef7e8427c782baa1813dc7f", "filename": "gcc/testsuite/gcc.target/arm/armv8_2-fp16-arith-1.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7606865198b241b4c944f66761d6506b02ead951/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farmv8_2-fp16-arith-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7606865198b241b4c944f66761d6506b02ead951/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farmv8_2-fp16-arith-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farmv8_2-fp16-arith-1.c?ref=7606865198b241b4c944f66761d6506b02ead951", "patch": "@@ -104,8 +104,20 @@ TEST_CMP (greaterthanqual, >=, int16x8_t, float16x8_t)\n /* { dg-final { scan-assembler-times {vmul\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n \n /* { dg-final { scan-assembler-times {vdiv\\.f16\\ts[0-9]+, s[0-9]+, s[0-9]+} 13 } }  */\n-/* { dg-final { scan-assembler-times {vcmp\\.f32\\ts[0-9]+, s[0-9]+} 26 } }  */\n-/* { dg-final { scan-assembler-times {vcmpe\\.f32\\ts[0-9]+, s[0-9]+} 52 } }  */\n+\n+/* For float16_t.  */\n+/* { dg-final { scan-assembler-times {vcmp\\.f32\\ts[0-9]+, s[0-9]+} 2 } }  */\n+/* { dg-final { scan-assembler-times {vcmpe\\.f32\\ts[0-9]+, s[0-9]+} 4 } }  */\n+\n+/* For float16x4_t.  */\n+/* { dg-final { scan-assembler-times {vceq\\.f16\\td[0-9]+, d[0-9]+} 2 } }  */\n+/* { dg-final { scan-assembler-times {vcge\\.f16\\td[0-9]+, d[0-9]+} 2 } }  */\n+/* { dg-final { scan-assembler-times {vcgt\\.f16\\td[0-9]+, d[0-9]+} 2 } }  */\n+\n+/* For float16x8_t.  */\n+/* { dg-final { scan-assembler-times {vceq\\.f16\\tq[0-9]+, q[0-9]+} 2 } }  */\n+/* { dg-final { scan-assembler-times {vcge\\.f16\\tq[0-9]+, q[0-9]+} 2 } }  */\n+/* { dg-final { scan-assembler-times {vcgt\\.f16\\tq[0-9]+, q[0-9]+} 2 } }  */\n \n /* { dg-final { scan-assembler-not {vadd\\.f32} } }  */\n /* { dg-final { scan-assembler-not {vsub\\.f32} } }  */"}, {"sha": "76f81e8df923e966f96829a6f26cea80dd30ef97", "filename": "gcc/testsuite/gcc.target/arm/simd/mve-compare-3.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7606865198b241b4c944f66761d6506b02ead951/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-compare-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7606865198b241b4c944f66761d6506b02ead951/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-compare-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-compare-3.c?ref=7606865198b241b4c944f66761d6506b02ead951", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O3 -funsafe-math-optimizations\" } */\n+\n+/* float 16 tests.  */\n+\n+#ifndef ELEM_TYPE\n+#define ELEM_TYPE __fp16\n+#endif\n+#ifndef INT_ELEM_TYPE\n+#define INT_ELEM_TYPE __INT16_TYPE__\n+#endif\n+\n+#define COMPARE(NAME, OP)\t\t\t\\\n+  int_vec\t\t\t\t\t\\\n+  cmp_##NAME##_reg (vec a, vec b)\t\t\\\n+  {\t\t\t\t\t\t\\\n+    return a OP b;\t\t\t\t\\\n+  }\n+\n+typedef INT_ELEM_TYPE int_vec __attribute__((vector_size(16)));\n+typedef ELEM_TYPE vec __attribute__((vector_size(16)));\n+\n+COMPARE (eq, ==)\n+COMPARE (ne, !=)\n+COMPARE (lt, <)\n+COMPARE (le, <=)\n+COMPARE (gt, >)\n+COMPARE (ge, >=)\n+\n+/* eq, ne, lt, le, gt, ge.\n+/* { dg-final { scan-assembler-times {\\tvcmp.f16\\teq, q[0-9]+, q[0-9]+\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tvcmp.f16\\tne, q[0-9]+, q[0-9]+\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tvcmp.f16\\tlt, q[0-9]+, q[0-9]+\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tvcmp.f16\\tle, q[0-9]+, q[0-9]+\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tvcmp.f16\\tgt, q[0-9]+, q[0-9]+\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tvcmp.f16\\tge, q[0-9]+, q[0-9]+\\n} 1 } } */"}, {"sha": "dbae2d17515c0559514ad46c7c72cca10e2b7ac5", "filename": "gcc/testsuite/gcc.target/arm/simd/mve-vcmp-f16.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7606865198b241b4c944f66761d6506b02ead951/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vcmp-f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7606865198b241b4c944f66761d6506b02ead951/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vcmp-f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vcmp-f16.c?ref=7606865198b241b4c944f66761d6506b02ead951", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O3 -funsafe-math-optimizations\" } */\n+\n+#include <stdint.h>\n+\n+#define NB 8\n+\n+#define FUNC(OP, NAME)\t\t\t\t\t\t\t\\\n+  void test_ ## NAME ##_f (__fp16 * __restrict__ dest, __fp16 *a, __fp16 *b) { \\\n+    int i;\t\t\t\t\t\t\t\t\\\n+    for (i=0; i<NB; i++) {\t\t\t\t\t\t\\\n+      dest[i] = a[i] OP b[i];\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  }\n+\n+FUNC(==, vcmpeq)\n+FUNC(!=, vcmpne)\n+FUNC(<, vcmplt)\n+FUNC(<=, vcmple)\n+FUNC(>, vcmpgt)\n+FUNC(>=, vcmpge)\n+\n+/* { dg-final { scan-assembler-times {\\tvcmp.f16\\teq, q[0-9]+, q[0-9]+\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tvcmp.f16\\tne, q[0-9]+, q[0-9]+\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tvcmp.f16\\tlt, q[0-9]+, q[0-9]+\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tvcmp.f16\\tle, q[0-9]+, q[0-9]+\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tvcmp.f16\\tgt, q[0-9]+, q[0-9]+\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tvcmp.f16\\tge, q[0-9]+, q[0-9]+\\n} 1 } } */"}]}