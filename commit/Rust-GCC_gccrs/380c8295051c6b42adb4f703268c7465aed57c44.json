{"sha": "380c8295051c6b42adb4f703268c7465aed57c44", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzgwYzgyOTUwNTFjNmI0MmFkYjRmNzAzMjY4Yzc0NjVhZWQ1N2M0NA==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-03-27T16:28:45Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-03-27T18:55:14Z"}, "message": "Init NodeId for NodeMappings on HIR::MethodCallExpr\n\nWe resolve methods during type resolution since it depends on the receiver\ntype being used. To ensure the function is marked as used we must then\nmark the method name as resolved, this is also used in the backend\nGENERIC compilation to lookup the function definition to be compiled.\nWhen this was unset multiple method calls would fail.\n\nFixes #310", "tree": {"sha": "24e8da9f594d5d3ddd33107b24a2f220bf40965e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24e8da9f594d5d3ddd33107b24a2f220bf40965e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/380c8295051c6b42adb4f703268c7465aed57c44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/380c8295051c6b42adb4f703268c7465aed57c44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/380c8295051c6b42adb4f703268c7465aed57c44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/380c8295051c6b42adb4f703268c7465aed57c44/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "573120551a0bc6813f32ed371df65311724e96dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/573120551a0bc6813f32ed371df65311724e96dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/573120551a0bc6813f32ed371df65311724e96dd"}], "stats": {"total": 47, "additions": 44, "deletions": 3}, "files": [{"sha": "b003334e52a271fba98602265fe00022cb592a2c", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/380c8295051c6b42adb4f703268c7465aed57c44/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/380c8295051c6b42adb4f703268c7465aed57c44/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=380c8295051c6b42adb4f703268c7465aed57c44", "patch": "@@ -241,9 +241,9 @@ class ASTLoweringExpr : public ASTLoweringBase\n     });\n \n     auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (\n-      crate_num, UNKNOWN_NODEID /* this can map back to the AST*/,\n-      mappings->get_next_hir_id (crate_num), UNKNOWN_LOCAL_DEFID);\n+    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n \n     translated\n       = new HIR::MethodCallExpr (mapping, std::unique_ptr<HIR::Expr> (receiver),"}, {"sha": "a71d04596dd83ec835690aab163dd9df3f96362f", "filename": "gcc/testsuite/rust.test/compile/methods3.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/380c8295051c6b42adb4f703268c7465aed57c44/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fmethods3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/380c8295051c6b42adb4f703268c7465aed57c44/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fmethods3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fmethods3.rs?ref=380c8295051c6b42adb4f703268c7465aed57c44", "patch": "@@ -0,0 +1,41 @@\n+struct Point {\n+    x: f64,\n+    y: f64,\n+}\n+\n+impl Point {\n+    fn origin() -> Point {\n+        Point { x: 0.0, y: 0.0 }\n+    }\n+\n+    fn new(x: f64, y: f64) -> Point {\n+        Point { x: x, y: y }\n+    }\n+}\n+\n+struct Rectangle {\n+    p1: Point,\n+    p2: Point,\n+}\n+\n+impl Rectangle {\n+    fn from(p1: Point, p2: Point) -> Self {\n+        Self { p1, p2 }\n+    }\n+\n+    fn sum_x(self) -> f64 {\n+        let p1 = self.p1;\n+        let p2 = self.p2;\n+        p1.x + p2.x\n+    }\n+}\n+\n+fn main() {\n+    let p1 = Point::origin();\n+    let p2 = Point::new(3.0, 4.0);\n+    let rect = Rectangle::from(p1, p2);\n+\n+    let sum = rect.sum_x();\n+    // multiple MethodCallExpr were causing issue #310\n+    let sum = rect.sum_x();\n+}"}]}