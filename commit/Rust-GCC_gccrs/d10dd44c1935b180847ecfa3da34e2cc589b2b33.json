{"sha": "d10dd44c1935b180847ecfa3da34e2cc589b2b33", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDEwZGQ0NGMxOTM1YjE4MDg0N2VjZmEzZGEzNGUyY2M1ODliMmIzMw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2002-01-10T21:30:32Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-01-10T21:30:32Z"}, "message": "h8300.h: Fix comment typos.\n\n\t* config/h8300/h8300.h: Fix comment typos.\n\t* config/h8300/h8300.md: Likewise.\n\t* config/h8300/lib1funcs.asm: Likewise.\n\nFrom-SVN: r48754", "tree": {"sha": "889bc1d0d351d4f8026e1723f16d3a30bcc59410", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/889bc1d0d351d4f8026e1723f16d3a30bcc59410"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d10dd44c1935b180847ecfa3da34e2cc589b2b33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d10dd44c1935b180847ecfa3da34e2cc589b2b33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d10dd44c1935b180847ecfa3da34e2cc589b2b33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d10dd44c1935b180847ecfa3da34e2cc589b2b33/comments", "author": null, "committer": null, "parents": [{"sha": "6c21456ca24d42a4ec2c20131945d13b8f075f6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c21456ca24d42a4ec2c20131945d13b8f075f6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c21456ca24d42a4ec2c20131945d13b8f075f6d"}], "stats": {"total": 25, "additions": 16, "deletions": 9}, "files": [{"sha": "88b566823df3bf68d50ba2277f7d794f3ab705a8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d10dd44c1935b180847ecfa3da34e2cc589b2b33/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d10dd44c1935b180847ecfa3da34e2cc589b2b33/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d10dd44c1935b180847ecfa3da34e2cc589b2b33", "patch": "@@ -1,3 +1,9 @@\n+2002-01-10  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* config/h8300/h8300.h: Fix comment typos.\n+\t* config/h8300/h8300.md: Likewise.\n+\t* config/h8300/lib1funcs.asm: Likewise.\n+\n 2002-01-10  Dale Johannesen  <dalej@apple.com>\n \n \tPR optimization/5269"}, {"sha": "3c782d482be357e3ded6d5647652962d9e46fdb6", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d10dd44c1935b180847ecfa3da34e2cc589b2b33/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d10dd44c1935b180847ecfa3da34e2cc589b2b33/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=d10dd44c1935b180847ecfa3da34e2cc589b2b33", "patch": "@@ -243,7 +243,7 @@ extern int target_flags;\n #define PCC_BITFIELD_TYPE_MATTERS  0\n \n /* No data type wants to be aligned rounder than this.\n-   32 bit values are aligned as such on the 300h for speed.  */\n+   32 bit values are aligned as such on the H8/300H and H8/S for speed.  */\n #define BIGGEST_ALIGNMENT \\\n (((TARGET_H8300H || TARGET_H8300S) && ! TARGET_ALIGN_300) ? 32 : 16)\n "}, {"sha": "b3aeb60c87b9b1eac41b6432750f736643300921", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d10dd44c1935b180847ecfa3da34e2cc589b2b33/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d10dd44c1935b180847ecfa3da34e2cc589b2b33/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=d10dd44c1935b180847ecfa3da34e2cc589b2b33", "patch": "@@ -44,11 +44,12 @@\n ;; \"worst case\" and then be adjusted to their correct values by\n ;; h8300_adjust_insn_length.\n \n-;; On the h8300h, adds/subs operate on the 32bit \"er\" registers.  Right\n-;; now GCC doesn't expose the \"e\" half to the compiler, so using add/subs\n-;; for addhi and subhi is safe.\n-;; Long term, we want to expose the \"e\" half to the compiler (gives us\n-;; 8 more 16bit registers).  At that point addhi and subhi can't use adds/subs.\n+;; On the H8/300H and H8/S, adds/subs operate on the 32bit \"er\"\n+;; registers.  Right now GCC doesn't expose the \"e\" half to the\n+;; compiler, so using add/subs for addhi and subhi is safe.  Long\n+;; term, we want to expose the \"e\" half to the compiler (gives us 8\n+;; more 16bit registers).  At that point addhi and subhi can't use\n+;; adds/subs.\n \n ;; There's currently no way to have a insv/extzv expander for the H8/300H\n ;; because word_mode is different for the H8/300 and H8/300H.\n@@ -1600,7 +1601,7 @@\n \n ;; Call subroutine with no return value.\n \n-;; ??? Even though we use HImode here, this works for the 300h.\n+;; ??? Even though we use HImode here, this works on the H8/300H and H8/S.\n \n (define_insn \"call\"\n   [(call (match_operand:QI 0 \"call_insn_operand\" \"or\")\n@@ -1623,7 +1624,7 @@\n ;; Call subroutine, returning value in operand 0\n ;; (which must be a hard register).\n \n-;; ??? Even though we use HImode here, this works on the 300h.\n+;; ??? Even though we use HImode here, this works on the H8/300H and H8/S.\n \n (define_insn \"call_value\"\n   [(set (match_operand 0 \"\" \"=r\")"}, {"sha": "a5a9f9559d58ce4970986765aff0b8d4a9475f88", "filename": "gcc/config/h8300/lib1funcs.asm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d10dd44c1935b180847ecfa3da34e2cc589b2b33/gcc%2Fconfig%2Fh8300%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d10dd44c1935b180847ecfa3da34e2cc589b2b33/gcc%2Fconfig%2Fh8300%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Flib1funcs.asm?ref=d10dd44c1935b180847ecfa3da34e2cc589b2b33", "patch": "@@ -767,7 +767,7 @@ _done:\n #ifdef L_fixunssfsi_asm\n /* For the h8300 we use asm to save some bytes, to\n    allow more programs to fit into the tiny address\n-   space.  For h8300h / h8s, the C version is good enough.  */\n+   space.  For the H8/300H and H8S, the C version is good enough.  */\n #ifdef __H8300__\n /* We still treat NANs different than libgcc2.c, but then, the\n    behaviour is undefined anyways.  */"}]}