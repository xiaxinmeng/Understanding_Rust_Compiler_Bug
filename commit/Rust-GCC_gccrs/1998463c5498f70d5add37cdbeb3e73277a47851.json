{"sha": "1998463c5498f70d5add37cdbeb3e73277a47851", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk5ODQ2M2M1NDk4ZjcwZDVhZGQzN2NkYmViM2U3MzI3N2E0Nzg1MQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2003-10-12T22:09:29Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2003-10-12T22:09:29Z"}, "message": "c-common.c (c_common_truthvalue_conversion): Warn if the address of a non-weak function is used as a truth value.\n\ngcc/\n\t* c-common.c (c_common_truthvalue_conversion): Warn if the\n\taddress of a non-weak function is used as a truth value.\n\ncp/\n\t* cvt.c (ocp_convert): Move warning to C common code.\n\ntestsuite/\n\t* gcc.dg/weak/weak-3.c: Fix for new warning.\n\nFrom-SVN: r72409", "tree": {"sha": "d8508ce937bd1981385a02639c802f8107997f26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8508ce937bd1981385a02639c802f8107997f26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1998463c5498f70d5add37cdbeb3e73277a47851", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1998463c5498f70d5add37cdbeb3e73277a47851", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1998463c5498f70d5add37cdbeb3e73277a47851", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1998463c5498f70d5add37cdbeb3e73277a47851/comments", "author": null, "committer": null, "parents": [{"sha": "d60004eecf62e69a63dae2a66f4688e003ca3a62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d60004eecf62e69a63dae2a66f4688e003ca3a62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d60004eecf62e69a63dae2a66f4688e003ca3a62"}], "stats": {"total": 66, "additions": 41, "deletions": 25}, "files": [{"sha": "052e74c196eb38e4aa930fe04624efa95e069133", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1998463c5498f70d5add37cdbeb3e73277a47851/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1998463c5498f70d5add37cdbeb3e73277a47851/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1998463c5498f70d5add37cdbeb3e73277a47851", "patch": "@@ -1,3 +1,8 @@\n+2003-10-12  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* c-common.c (c_common_truthvalue_conversion): Warn if the\n+\taddress of a non-weak function is used as a truth value.\n+\n 2003-10-12  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/h8300/h8300.c (WORD_REG_USED): Use SP_REG instead of"}, {"sha": "e8ed13b9363f7eb3ab4fcde1f556ebd9c2e3c7a0", "filename": "gcc/c-common.c", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1998463c5498f70d5add37cdbeb3e73277a47851/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1998463c5498f70d5add37cdbeb3e73277a47851/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=1998463c5498f70d5add37cdbeb3e73277a47851", "patch": "@@ -2602,6 +2602,9 @@ c_common_truthvalue_conversion (tree expr)\n   if (TREE_CODE (expr) == ERROR_MARK)\n     return expr;\n \n+  if (TREE_CODE (expr) == FUNCTION_DECL)\n+    expr = build_unary_op (ADDR_EXPR, expr, 0);\n+\n #if 0 /* This appears to be wrong for C++.  */\n   /* These really should return error_mark_node after 2.4 is stable.\n      But not all callers handle ERROR_MARK properly.  */\n@@ -2647,17 +2650,29 @@ c_common_truthvalue_conversion (tree expr)\n       return real_zerop (expr) ? truthvalue_false_node : truthvalue_true_node;\n \n     case ADDR_EXPR:\n-      /* If we are taking the address of an external decl, it might be zero\n-\t if it is weak, so we cannot optimize.  */\n-      if (DECL_P (TREE_OPERAND (expr, 0))\n-\t  && DECL_EXTERNAL (TREE_OPERAND (expr, 0)))\n-\tbreak;\n+      {\n+\tif (TREE_CODE (TREE_OPERAND (expr, 0)) == FUNCTION_DECL\n+\t    && ! DECL_WEAK (TREE_OPERAND (expr, 0)))\n+\t  {\n+\t    /* Common Ada/Pascal programmer's mistake.  We always warn\n+\t       about this since it is so bad.  */\n+\t    warning (\"the address of `%D', will always evaluate as `true'\",\n+\t\t     TREE_OPERAND (expr, 0));\n+\t    return truthvalue_true_node;\n+\t  }\n \n-      if (TREE_SIDE_EFFECTS (TREE_OPERAND (expr, 0)))\n-\treturn build (COMPOUND_EXPR, truthvalue_type_node,\n-\t\t      TREE_OPERAND (expr, 0), truthvalue_true_node);\n-      else\n-\treturn truthvalue_true_node;\n+\t/* If we are taking the address of an external decl, it might be\n+\t   zero if it is weak, so we cannot optimize.  */\n+\tif (DECL_P (TREE_OPERAND (expr, 0))\n+\t    && DECL_EXTERNAL (TREE_OPERAND (expr, 0)))\n+\t  break;\n+\n+\tif (TREE_SIDE_EFFECTS (TREE_OPERAND (expr, 0)))\n+\t  return build (COMPOUND_EXPR, truthvalue_type_node,\n+\t\t\tTREE_OPERAND (expr, 0), truthvalue_true_node);\n+\telse\n+\t  return truthvalue_true_node;\n+      }\n \n     case COMPLEX_EXPR:\n       return build_binary_op ((TREE_SIDE_EFFECTS (TREE_OPERAND (expr, 1))"}, {"sha": "9a0735bcca7cc373e8156cdf96e01bcf3190ff5d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1998463c5498f70d5add37cdbeb3e73277a47851/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1998463c5498f70d5add37cdbeb3e73277a47851/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1998463c5498f70d5add37cdbeb3e73277a47851", "patch": "@@ -1,3 +1,7 @@\n+2003-10-12  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* cvt.c (ocp_convert): Move warning to C common code.\n+\n 2003-10-09  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/6392"}, {"sha": "1479fbd69ebad6da1e8a68e6e4927195e6706c34", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1998463c5498f70d5add37cdbeb3e73277a47851/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1998463c5498f70d5add37cdbeb3e73277a47851/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=1998463c5498f70d5add37cdbeb3e73277a47851", "patch": "@@ -694,20 +694,8 @@ ocp_convert (tree type, tree expr, int convtype, int flags)\n \t  return error_mark_node;\n \t}\n       if (code == BOOLEAN_TYPE)\n-\t{\n-\t  tree fn = NULL_TREE;\n-\n-\t  /* Common Ada/Pascal programmer's mistake.  We always warn\n-             about this since it is so bad.  */\n-\t  if (TREE_CODE (expr) == FUNCTION_DECL)\n-\t    fn = expr;\n-\t  else if (TREE_CODE (expr) == ADDR_EXPR \n-\t\t   && TREE_CODE (TREE_OPERAND (expr, 0)) == FUNCTION_DECL)\n-\t    fn = TREE_OPERAND (expr, 0);\n-\t  if (fn && !DECL_WEAK (fn))\n-\t    warning (\"the address of `%D', will always be `true'\", fn);\n-\t  return cp_truthvalue_conversion (e);\n-\t}\n+\treturn cp_truthvalue_conversion (e);\n+\n       return fold (convert_to_integer (type, e));\n     }\n   if (POINTER_TYPE_P (type) || TYPE_PTR_TO_MEMBER_P (type))"}, {"sha": "84f7c92d5d979d5552ac7df6c5ca3da7c4dbf7b3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1998463c5498f70d5add37cdbeb3e73277a47851/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1998463c5498f70d5add37cdbeb3e73277a47851/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1998463c5498f70d5add37cdbeb3e73277a47851", "patch": "@@ -1,3 +1,7 @@\n+2003-10-12  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* gcc.dg/weak/weak-3.c: Fix for new warning.\n+\n 2003-10-12  Kelley Cook  <kcook@gcc.gnu.org>\n \n \tPR optimization/8750"}, {"sha": "da4367a71359b66824189a0e0c5682846159171a", "filename": "gcc/testsuite/gcc.dg/weak/weak-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1998463c5498f70d5add37cdbeb3e73277a47851/gcc%2Ftestsuite%2Fgcc.dg%2Fweak%2Fweak-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1998463c5498f70d5add37cdbeb3e73277a47851/gcc%2Ftestsuite%2Fgcc.dg%2Fweak%2Fweak-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fweak%2Fweak-3.c?ref=1998463c5498f70d5add37cdbeb3e73277a47851", "patch": "@@ -54,7 +54,7 @@ extern void * ffoo1f (void);\n extern void * ffoox1f (void);\n void * foo1f (void)\n {\n-  if (ffoo1f)\n+  if (ffoo1f) /* { dg-warning \"\" } */\n     ffoo1f ();\n   return 0;\n }"}]}