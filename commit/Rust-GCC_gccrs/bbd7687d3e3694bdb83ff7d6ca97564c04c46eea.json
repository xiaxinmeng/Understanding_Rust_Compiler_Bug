{"sha": "bbd7687d3e3694bdb83ff7d6ca97564c04c46eea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJkNzY4N2QzZTM2OTRiZGI4M2ZmN2Q2Y2E5NzU2NGMwNGM0NmVlYQ==", "commit": {"author": {"name": "David S. Miller", "email": "davem@redhat.com", "date": "2002-04-04T01:15:40Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2002-04-04T01:15:40Z"}, "message": "gcc.c (LINK_GCC_C_SEQUENCE_SPEC): New spec to override the gcc/c library sequence passed to the linker.\n\n2002-04-03  David S. Miller  <davem@redhat.com>\n\n\t* gcc.c (LINK_GCC_C_SEQUENCE_SPEC): New spec to override the gcc/c\n\tlibrary sequence passed to the linker.\n\t(LINK_COMMAND_SPEC): Use it.\n\t* doc/tm.texi: Document it, and mention from LINK_COMMAND_SPEC as\n\ta macro a target can use to avoid overriding LINK_COMMAND_SPEC.\n\t* config/sparc/sparc.h (LINK_GCC_C_SEQUENCE_SPEC): Define.\n\nFrom-SVN: r51834", "tree": {"sha": "dadbe364c517553bccee685542958c5b2aa45f23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dadbe364c517553bccee685542958c5b2aa45f23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbd7687d3e3694bdb83ff7d6ca97564c04c46eea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbd7687d3e3694bdb83ff7d6ca97564c04c46eea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbd7687d3e3694bdb83ff7d6ca97564c04c46eea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbd7687d3e3694bdb83ff7d6ca97564c04c46eea/comments", "author": null, "committer": null, "parents": [{"sha": "eb81f6ff2831e13915357daf193fd59f9bee5a01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb81f6ff2831e13915357daf193fd59f9bee5a01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb81f6ff2831e13915357daf193fd59f9bee5a01"}], "stats": {"total": 40, "additions": 38, "deletions": 2}, "files": [{"sha": "bb94eb1a812082a016f1874447bb0bd05d02290a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbd7687d3e3694bdb83ff7d6ca97564c04c46eea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbd7687d3e3694bdb83ff7d6ca97564c04c46eea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bbd7687d3e3694bdb83ff7d6ca97564c04c46eea", "patch": "@@ -1,3 +1,12 @@\n+2002-04-03  David S. Miller  <davem@redhat.com>\n+\n+\t* gcc.c (LINK_GCC_C_SEQUENCE_SPEC): New spec to override the gcc/c\n+\tlibrary sequence passed to the linker.\n+\t(LINK_COMMAND_SPEC): Use it.\n+\t* doc/tm.texi: Document it, and mention from LINK_COMMAND_SPEC as\n+\ta macro a target can use to avoid overriding LINK_COMMAND_SPEC.\n+\t* config/sparc/sparc.h (LINK_GCC_C_SEQUENCE_SPEC): Define.\n+\n 2002-04-03  Jason Merrill  <jason@redhat.com>\n \n \t* except.c (struct eh_status): Remove protect_list."}, {"sha": "040a4a38320a0584ab03663f6ec578eb8703460e", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbd7687d3e3694bdb83ff7d6ca97564c04c46eea/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbd7687d3e3694bdb83ff7d6ca97564c04c46eea/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=bbd7687d3e3694bdb83ff7d6ca97564c04c46eea", "patch": "@@ -358,6 +358,11 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n   SUBTARGET_EXTRA_SPECS\n \n #define SUBTARGET_EXTRA_SPECS\n+\n+/* Because libgcc can generate references back to libc (via .umul etc.) we have\n+   to list libc again after the second libgcc.  */\n+#define LINK_GCC_C_SEQUENCE_SPEC \"%G %L %G %L\"\n+\n \f\n #ifdef SPARC_BI_ARCH\n #define NO_BUILTIN_PTRDIFF_TYPE"}, {"sha": "c566c291e7f4f8aa1733bd209604500f4a7bc201", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbd7687d3e3694bdb83ff7d6ca97564c04c46eea/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbd7687d3e3694bdb83ff7d6ca97564c04c46eea/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=bbd7687d3e3694bdb83ff7d6ca97564c04c46eea", "patch": "@@ -377,14 +377,20 @@ the argument @option{-lgcc} to tell the linker to do the search.\n This macro is similar to @code{LINK_LIBGCC_SPECIAL}, except that it does\n not affect @option{-L} options.\n \n+@findex LINK_GCC_C_SEQUENCE_SPEC\n+@item LINK_GCC_C_SEQUENCE_SPEC\n+The sequence in which libgcc and libc are specified to the linker.\n+By default this is @code{%G %L %G}.\n+\n @findex LINK_COMMAND_SPEC\n @item LINK_COMMAND_SPEC\n A C string constant giving the complete command line need to execute the\n linker.  When you do this, you will need to update your port each time a\n change is made to the link command line within @file{gcc.c}.  Therefore,\n define this macro only if you need to completely redefine the command\n line for invoking the linker and there is no other way to accomplish\n-the effect you need.\n+the effect you need.  Overriding this macro may be avoidable by overriding\n+@code{LINK_GCC_C_SEQUENCE_SPEC} instead.\n \n @findex LINK_ELIMINATE_DUPLICATE_LDIRECTORIES\n @item LINK_ELIMINATE_DUPLICATE_LDIRECTORIES"}, {"sha": "9bb1abd0a3f582a5a6766f5cbf4f1d693b966289", "filename": "gcc/gcc.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbd7687d3e3694bdb83ff7d6ca97564c04c46eea/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbd7687d3e3694bdb83ff7d6ca97564c04c46eea/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=bbd7687d3e3694bdb83ff7d6ca97564c04c46eea", "patch": "@@ -448,6 +448,7 @@ or with constant text in a single argument.\n  %C     process CPP_SPEC as a spec.\n  %1\tprocess CC1_SPEC as a spec.\n  %2\tprocess CC1PLUS_SPEC as a spec.\n+ %3     process LINK_GCC_C_SEQUENCE_SPEC as a spec.\n  %|\toutput \"-\" if the input for the current command is coming from a pipe.\n  %*\tsubstitute the variable part of a matched option.  (See below.)\n \tNote that each comma in the substituted string is replaced by\n@@ -609,6 +610,13 @@ proper position among the other output files.  */\n \n /* Here is the spec for running the linker, after compiling all files.  */\n \n+/* This is overridable by the target in case they need to specify the\n+   -lgcc and -lc order specially, yet not require them to override all\n+   of LINK_COMMAND_SPEC.  */\n+#ifndef LINK_GCC_C_SEQUENCE_SPEC\n+#define LINK_GCC_C_SEQUENCE_SPEC \"%G %L %G\"\n+#endif\n+\n /* -u* was put back because both BSD and SysV seem to support it.  */\n /* %{static:} simply prevents an error message if the target machine\n    doesn't handle -static.  */\n@@ -620,7 +628,7 @@ proper position among the other output files.  */\n %{!fsyntax-only:%{!c:%{!M:%{!MM:%{!E:%{!S:\\\n     %(linker) %l %X %{o*} %{A} %{d} %{e*} %{m} %{N} %{n} %{r} %{s} %{t}\\\n     %{u*} %{x} %{z} %{Z} %{!A:%{!nostdlib:%{!nostartfiles:%S}}}\\\n-    %{static:} %{L*} %(link_libgcc) %o %{!nostdlib:%{!nodefaultlibs:%G %L %G}}\\\n+    %{static:} %{L*} %(link_libgcc) %o %{!nostdlib:%{!nodefaultlibs:%3}}\\\n     %{!A:%{!nostdlib:%{!nostartfiles:%E}}} %{T*} }}}}}}\"\n #endif\n \n@@ -639,6 +647,7 @@ static const char *cpp_spec = CPP_SPEC;\n static const char *cpp_predefines = CPP_PREDEFINES;\n static const char *cc1_spec = CC1_SPEC;\n static const char *cc1plus_spec = CC1PLUS_SPEC;\n+static const char *link_gcc_c_sequence_spec = LINK_GCC_C_SEQUENCE_SPEC;\n static const char *asm_spec = ASM_SPEC;\n static const char *asm_final_spec = ASM_FINAL_SPEC;\n static const char *link_spec = LINK_SPEC;\n@@ -1364,6 +1373,7 @@ static struct spec_list static_specs[] =\n   INIT_STATIC_SPEC (\"cc1\",\t\t\t&cc1_spec),\n   INIT_STATIC_SPEC (\"cc1_options\",\t\t&cc1_options),\n   INIT_STATIC_SPEC (\"cc1plus\",\t\t\t&cc1plus_spec),\n+  INIT_STATIC_SPEC (\"link_gcc_c_sequence\",\t&link_gcc_c_sequence_spec),\n   INIT_STATIC_SPEC (\"endfile\",\t\t\t&endfile_spec),\n   INIT_STATIC_SPEC (\"link\",\t\t\t&link_spec),\n   INIT_STATIC_SPEC (\"lib\",\t\t\t&lib_spec),\n@@ -4749,6 +4759,12 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t      return value;\n \t    break;\n \n+\t  case '3':\n+\t    value = do_spec_1 (link_gcc_c_sequence_spec, 0, NULL);\n+\t    if (value != 0)\n+\t      return value;\n+\t    break;\n+\n \t  case 'a':\n \t    value = do_spec_1 (asm_spec, 0, NULL);\n \t    if (value != 0)"}]}