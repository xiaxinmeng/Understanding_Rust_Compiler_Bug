{"sha": "ad0a3be4df5eecc79075d899fd79179d0f61270e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQwYTNiZTRkZjVlZWNjNzkwNzVkODk5ZmQ3OTE3OWQwZjYxMjcwZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-05-04T11:07:09Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-05-04T11:07:09Z"}, "message": "libstdc++: Remove _GLIBCXX_USE_INT128 autoconf macro\n\nWe don't need to decide whether to use __int128 when running configure,\nwe can do so at compilation time by seeing if __SIZEOF_INT128__ is\ndefined and if it's greater than __SIZEOF_LONG_LONG__.\n\nThis removes another unnecessary architecture-specific config macro in\n<bits/c++config.h>, so the same header can work for 32-bit or 64-bit\ncompilation on AIX.\n\nlibstdc++-v3/ChangeLog:\n\n\t* acinclude.m4 (GLIBCXX_ENABLE_INT128_FLOAT128): Remove\n\tchecks for __int128 and rename to GLIBCXX_ENABLE_FLOAT128.\n\t* config.h.in: Regenerate.\n\t* configure: Regenerate.\n\t* configure.ac: Adjust to use GLIBCXX_ENABLE_FLOAT128.\n\t* include/bits/random.h (_Select_uint_least_t<s, 1>):\n\tUse __SIZEOF_INT128__ to decide whether to use __int128.\n\t* include/std/charconv (__to_chars_unsigned_type): Likewise.", "tree": {"sha": "f6076b0429da786eee7a2e0107fb8346369c7241", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6076b0429da786eee7a2e0107fb8346369c7241"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad0a3be4df5eecc79075d899fd79179d0f61270e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad0a3be4df5eecc79075d899fd79179d0f61270e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad0a3be4df5eecc79075d899fd79179d0f61270e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad0a3be4df5eecc79075d899fd79179d0f61270e/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93f8cb4965cebee125f96376367f05e18ee5749b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93f8cb4965cebee125f96376367f05e18ee5749b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93f8cb4965cebee125f96376367f05e18ee5749b"}], "stats": {"total": 81, "additions": 8, "deletions": 73}, "files": [{"sha": "94897a654c9506f554466f54bdb86a7981f123be", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 4, "deletions": 32, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0a3be4df5eecc79075d899fd79179d0f61270e/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0a3be4df5eecc79075d899fd79179d0f61270e/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=ad0a3be4df5eecc79075d899fd79179d0f61270e", "patch": "@@ -3049,50 +3049,22 @@ EOF\n ])\n \n dnl\n-dnl Check for GNU 128-bit integer and floating point types.\n+dnl Check for GNU 128-bit floating point type.\n dnl\n-dnl Note: also checks that the types aren't standard types.\n+dnl Note: also checks that the type isn't a standard types.\n dnl\n dnl Defines:\n-dnl  _GLIBCXX_USE_INT128\n dnl  ENABLE_FLOAT128\n dnl\n-AC_DEFUN([GLIBCXX_ENABLE_INT128_FLOAT128], [\n+AC_DEFUN([GLIBCXX_ENABLE_FLOAT128], [\n \n   AC_LANG_SAVE\n   AC_LANG_CPLUSPLUS\n \n   # Fake what AC_TRY_COMPILE does, without linking as this is\n   # unnecessary for this test.\n \n-    cat > conftest.$ac_ext << EOF\n-[#]line __oline__ \"configure\"\n-template<typename T1, typename T2>\n-  struct same\n-  { typedef T2 type; };\n-\n-template<typename T>\n-  struct same<T, T>;\n-\n-int main()\n-{\n-  typename same<long, __int128>::type                i1;\n-  typename same<long long, __int128>::type           i2;\n-}\n-EOF\n-\n-    AC_MSG_CHECKING([for __int128])\n-    if AC_TRY_EVAL(ac_compile); then\n-      AC_DEFINE(_GLIBCXX_USE_INT128, 1,\n-      [Define if __int128 is supported on this host.])\n-      enable_int128=yes\n-    else\n-      enable_int128=no\n-    fi\n-    AC_MSG_RESULT($enable_int128)\n-    rm -f conftest*\n-\n-    cat > conftest.$ac_ext << EOF\n+  cat > conftest.$ac_ext << EOF\n [#]line __oline__ \"configure\"\n template<typename T1, typename T2>\n   struct same"}, {"sha": "e545488386a967188d931d28a4423bf616b2e602", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0a3be4df5eecc79075d899fd79179d0f61270e/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0a3be4df5eecc79075d899fd79179d0f61270e/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=ad0a3be4df5eecc79075d899fd79179d0f61270e", "patch": "@@ -929,9 +929,6 @@\n /* Define if get_nprocs is available in <sys/sysinfo.h>. */\n #undef _GLIBCXX_USE_GET_NPROCS\n \n-/* Define if __int128 is supported on this host. */\n-#undef _GLIBCXX_USE_INT128\n-\n /* Define if LFS support is available. */\n #undef _GLIBCXX_USE_LFS\n "}, {"sha": "067b5d1ae8ebf6474409fd964b2ef59f874c7a4f", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1, "deletions": 35, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0a3be4df5eecc79075d899fd79179d0f61270e/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0a3be4df5eecc79075d899fd79179d0f61270e/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=ad0a3be4df5eecc79075d899fd79179d0f61270e", "patch": "@@ -16218,7 +16218,7 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n   # Fake what AC_TRY_COMPILE does, without linking as this is\n   # unnecessary for this test.\n \n-    cat > conftest.$ac_ext << EOF\n+  cat > conftest.$ac_ext << EOF\n #line 16222 \"configure\"\n template<typename T1, typename T2>\n   struct same\n@@ -16227,40 +16227,6 @@ template<typename T1, typename T2>\n template<typename T>\n   struct same<T, T>;\n \n-int main()\n-{\n-  typename same<long, __int128>::type                i1;\n-  typename same<long long, __int128>::type           i2;\n-}\n-EOF\n-\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for __int128\" >&5\n-$as_echo_n \"checking for __int128... \" >&6; }\n-    if { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_compile\\\"\"; } >&5\n-  (eval $ac_compile) 2>&5\n-  ac_status=$?\n-  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n-  test $ac_status = 0; }; then\n-\n-$as_echo \"#define _GLIBCXX_USE_INT128 1\" >>confdefs.h\n-\n-      enable_int128=yes\n-    else\n-      enable_int128=no\n-    fi\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $enable_int128\" >&5\n-$as_echo \"$enable_int128\" >&6; }\n-    rm -f conftest*\n-\n-    cat > conftest.$ac_ext << EOF\n-#line 16256 \"configure\"\n-template<typename T1, typename T2>\n-  struct same\n-  { typedef T2 type; };\n-\n-template<typename T>\n-  struct same<T, T>;\n-\n int main()\n {\n   typename same<double, __float128>::type      f1;"}, {"sha": "a816ff79d16b49f753f2103ebaf40e79e92bd512", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0a3be4df5eecc79075d899fd79179d0f61270e/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0a3be4df5eecc79075d899fd79179d0f61270e/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=ad0a3be4df5eecc79075d899fd79179d0f61270e", "patch": "@@ -153,7 +153,7 @@ GLIBCXX_ENABLE_THREADS\n GLIBCXX_ENABLE_ATOMIC_BUILTINS\n GLIBCXX_ENABLE_LOCK_POLICY\n GLIBCXX_ENABLE_DECIMAL_FLOAT\n-GLIBCXX_ENABLE_INT128_FLOAT128\n+GLIBCXX_ENABLE_FLOAT128\n if test \"$enable_float128\" = yes; then\n   port_specific_symbol_files=\"$port_specific_symbol_files \\$(top_srcdir)/config/abi/pre/float128.ver\"\n fi"}, {"sha": "0da013c5f457f1802eae39a5ee728d6f02be9cab", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0a3be4df5eecc79075d899fd79179d0f61270e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0a3be4df5eecc79075d899fd79179d0f61270e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=ad0a3be4df5eecc79075d899fd79179d0f61270e", "patch": "@@ -99,7 +99,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       struct _Select_uint_least_t<__s, 2>\n       { typedef unsigned long long type; };\n \n-#ifdef _GLIBCXX_USE_INT128\n+#if __SIZEOF_INT128__ > __SIZEOF_LONG_LONG__\n     template<int __s>\n       struct _Select_uint_least_t<__s, 1>\n       { typedef unsigned __int128 type; };"}, {"sha": "193702e677a6af0c857e79a4a620d01227f4c1c2", "filename": "libstdc++-v3/include/std/charconv", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0a3be4df5eecc79075d899fd79179d0f61270e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0a3be4df5eecc79075d899fd79179d0f61270e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv?ref=ad0a3be4df5eecc79075d899fd79179d0f61270e", "patch": "@@ -94,7 +94,7 @@ namespace __detail\n     struct __to_chars_unsigned_type : __make_unsigned_selector_base\n     {\n       using _UInts = _List<unsigned int, unsigned long, unsigned long long\n-#if _GLIBCXX_USE_INT128\n+#if __SIZEOF_INT128__ > __SIZEOF_LONG_LONG__\n \t, unsigned __int128\n #endif\n \t>;"}]}