{"sha": "61514fe46313e7ecfdec799f9033c788e1e0f710", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE1MTRmZTQ2MzEzZTdlY2ZkZWM3OTlmOTAzM2M3ODhlMWUwZjcxMA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-09-21T12:44:07Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-09-21T12:44:07Z"}, "message": "re PR tree-optimization/54647 (Segmentation fault in get_expr_value_id with -O2)\n\n2012-09-21  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/54647\n\t* tree-ssa-pre.c (compute_avail): Do not put COND_EXPR\n\tor VEC_COND_EXPR into EXP_GEN again.\n\n\t* g++.dg/torture/pr54647.C: New testcase.\n\nFrom-SVN: r191613", "tree": {"sha": "341cbdd7ee2fc938b2fa3bacdf901ca539657dd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/341cbdd7ee2fc938b2fa3bacdf901ca539657dd6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61514fe46313e7ecfdec799f9033c788e1e0f710", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61514fe46313e7ecfdec799f9033c788e1e0f710", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61514fe46313e7ecfdec799f9033c788e1e0f710", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61514fe46313e7ecfdec799f9033c788e1e0f710/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0c105b723d92cb3508856069802c8a0f503cd011", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c105b723d92cb3508856069802c8a0f503cd011", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c105b723d92cb3508856069802c8a0f503cd011"}], "stats": {"total": 47, "additions": 46, "deletions": 1}, "files": [{"sha": "648eb10b101b74ceb3cc008d5d02192426afdcc5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61514fe46313e7ecfdec799f9033c788e1e0f710/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61514fe46313e7ecfdec799f9033c788e1e0f710/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=61514fe46313e7ecfdec799f9033c788e1e0f710", "patch": "@@ -1,3 +1,9 @@\n+2012-09-21  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/54647\n+\t* tree-ssa-pre.c (compute_avail): Do not put COND_EXPR\n+\tor VEC_COND_EXPR into EXP_GEN again.\n+\n 2012-09-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/54629"}, {"sha": "3723d6b2a63747ace7d644743217bd3f077f5cd1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61514fe46313e7ecfdec799f9033c788e1e0f710/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61514fe46313e7ecfdec799f9033c788e1e0f710/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=61514fe46313e7ecfdec799f9033c788e1e0f710", "patch": "@@ -1,3 +1,8 @@\n+2012-09-21  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/54647\n+\t* g++.dg/torture/pr54647.C: New testcase.\n+\n 2012-09-21  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR c++/54427"}, {"sha": "2177ecd6799cf1b8bf4308eabe80c52b6ead2e01", "filename": "gcc/testsuite/g++.dg/torture/pr54647.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61514fe46313e7ecfdec799f9033c788e1e0f710/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr54647.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61514fe46313e7ecfdec799f9033c788e1e0f710/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr54647.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr54647.C?ref=61514fe46313e7ecfdec799f9033c788e1e0f710", "patch": "@@ -0,0 +1,25 @@\n+// { dg-do compile }\n+\n+class A\n+{\n+};\n+template <class type> struct D:A\n+{\n+  type & operator[](int);\n+};\n+struct B\n+{\n+  typedef D <int *>Row;\n+  struct C\n+    {\n+      Row *row;\n+    };\n+};\n+B::C a;\n+B::Row & b = *a.row;\n+void\n+fn1 ()\n+{\n+  while (1)\n+    b[0] = b[0] ? (int *) -1 : 0;\n+}"}, {"sha": "d1d97b66abebc328b5c12549d899f0226c8e1f5b", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61514fe46313e7ecfdec799f9033c788e1e0f710/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61514fe46313e7ecfdec799f9033c788e1e0f710/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=61514fe46313e7ecfdec799f9033c788e1e0f710", "patch": "@@ -3981,9 +3981,18 @@ compute_avail (void)\n \t\t  {\n \t\t  case VN_NARY:\n \t\t    {\n+\t\t      enum tree_code code = gimple_assign_rhs_code (stmt);\n \t\t      vn_nary_op_t nary;\n+\n+\t\t      /* COND_EXPR and VEC_COND_EXPR are awkward in\n+\t\t\t that they contain an embedded complex expression.\n+\t\t\t Don't even try to shove those through PRE.  */\n+\t\t      if (code == COND_EXPR\n+\t\t\t  || code == VEC_COND_EXPR)\n+\t\t\tcontinue;\n+\n \t\t      vn_nary_op_lookup_pieces (gimple_num_ops (stmt) - 1,\n-\t\t\t\t\t\tgimple_assign_rhs_code (stmt),\n+\t\t\t\t\t\tcode,\n \t\t\t\t\t\tgimple_expr_type (stmt),\n \t\t\t\t\t\tgimple_assign_rhs1_ptr (stmt),\n \t\t\t\t\t\t&nary);"}]}