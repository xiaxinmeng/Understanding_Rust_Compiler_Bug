{"sha": "fb22178f7d94c8101146bcaf66c7703d0ef643e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmIyMjE3OGY3ZDk0YzgxMDExNDZiY2FmNjZjNzcwM2QwZWY2NDNlMA==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2013-08-26T03:12:38Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2013-08-26T03:12:38Z"}, "message": "c-pretty-print.h (c_pretty_printer::postfix_expression): Now a virtual member function.\n\nc-family/\n\t* c-pretty-print.h (c_pretty_printer::postfix_expression): Now a\n\tvirtual member function.\n\t(pp_postfix_expression): Adjust.\n\t(pp_c_postfix_expression): Remove.\n\t* c-pretty-print.c (c_pretty_printer::postfix_expression): Rename\n\tfrom pp_c_postfix_expression.  Adjust.\n\t(c_pretty_printer::c_pretty_printer): Do not assign to\n\tpostfix_expression.\n\ncp/\n\t* cxx-pretty-print.h (cxx_pretty_printer::postfix_expression):\n\tDeclare as overrider.\n\t* cxx-pretty-print.c (cxx_pretty_printer::postfix_expression):\n\tRename from pp_cxx_postfix_expression.  Adjust.\n\t(pp_cxx_expression): Use pp_postfix_expression.\n\t(cxx_pretty_printer::cxx_pretty_printer): Do not assign to\n\tpostfix_expression.\n\nFrom-SVN: r201985", "tree": {"sha": "296c5e4a19d1b43450a72087d4fbfb5b587e5f84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/296c5e4a19d1b43450a72087d4fbfb5b587e5f84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb22178f7d94c8101146bcaf66c7703d0ef643e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb22178f7d94c8101146bcaf66c7703d0ef643e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb22178f7d94c8101146bcaf66c7703d0ef643e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb22178f7d94c8101146bcaf66c7703d0ef643e0/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2c9d6efb4f958353c5c9b9ca56c2ddf7dd9a27a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c9d6efb4f958353c5c9b9ca56c2ddf7dd9a27a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c9d6efb4f958353c5c9b9ca56c2ddf7dd9a27a9"}], "stats": {"total": 249, "additions": 134, "deletions": 115}, "files": [{"sha": "c069d7c6caa22fa2216c53a4e701b9a58d9fef2f", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb22178f7d94c8101146bcaf66c7703d0ef643e0/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb22178f7d94c8101146bcaf66c7703d0ef643e0/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=fb22178f7d94c8101146bcaf66c7703d0ef643e0", "patch": "@@ -1,3 +1,14 @@\n+2013-08-25  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* c-pretty-print.h (c_pretty_printer::postfix_expression): Now a\n+\tvirtual member function.\n+\t(pp_postfix_expression): Adjust.\n+\t(pp_c_postfix_expression): Remove.\n+\t* c-pretty-print.c (c_pretty_printer::postfix_expression): Rename\n+\tfrom pp_c_postfix_expression.  Adjust.\n+\t(c_pretty_printer::c_pretty_printer): Do not assign to\n+\tpostfix_expression.\n+\n 2013-08-25  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* c-pretty-print.h (c_pretty_printer::primary_expression): Now a"}, {"sha": "3e2abadc975d2d1fb71af41c593fb7581cf89d07", "filename": "gcc/c-family/c-pretty-print.c", "status": "modified", "additions": 66, "deletions": 67, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb22178f7d94c8101146bcaf66c7703d0ef643e0/gcc%2Fc-family%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb22178f7d94c8101146bcaf66c7703d0ef643e0/gcc%2Fc-family%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pretty-print.c?ref=fb22178f7d94c8101146bcaf66c7703d0ef643e0", "patch": "@@ -1463,128 +1463,128 @@ c_pretty_printer::id_expression (tree t)\n       ( type-name ) { initializer-list , }  */\n \n void\n-pp_c_postfix_expression (c_pretty_printer *pp, tree e)\n+c_pretty_printer::postfix_expression (tree e)\n {\n   enum tree_code code = TREE_CODE (e);\n   switch (code)\n     {\n     case POSTINCREMENT_EXPR:\n     case POSTDECREMENT_EXPR:\n-      pp_postfix_expression (pp, TREE_OPERAND (e, 0));\n-      pp_string (pp, code == POSTINCREMENT_EXPR ? \"++\" : \"--\");\n+      postfix_expression (TREE_OPERAND (e, 0));\n+      pp_string (this, code == POSTINCREMENT_EXPR ? \"++\" : \"--\");\n       break;\n \n     case ARRAY_REF:\n-      pp_postfix_expression (pp, TREE_OPERAND (e, 0));\n-      pp_c_left_bracket (pp);\n-      pp_expression (pp, TREE_OPERAND (e, 1));\n-      pp_c_right_bracket (pp);\n+      postfix_expression (TREE_OPERAND (e, 0));\n+      pp_c_left_bracket (this);\n+      pp_expression (this, TREE_OPERAND (e, 1));\n+      pp_c_right_bracket (this);\n       break;\n \n     case ARRAY_NOTATION_REF:\n-      pp_postfix_expression (pp, ARRAY_NOTATION_ARRAY (e));\n-      pp_c_left_bracket (pp);\n-      pp_expression (pp, ARRAY_NOTATION_START (e));\n-      pp_colon (pp);\n-      pp_expression (pp, ARRAY_NOTATION_LENGTH (e));\n-      pp_colon (pp);\n-      pp_expression (pp, ARRAY_NOTATION_STRIDE (e));\n-      pp_c_right_bracket (pp);\n+      postfix_expression (ARRAY_NOTATION_ARRAY (e));\n+      pp_c_left_bracket (this);\n+      pp_expression (this, ARRAY_NOTATION_START (e));\n+      pp_colon (this);\n+      pp_expression (this, ARRAY_NOTATION_LENGTH (e));\n+      pp_colon (this);\n+      pp_expression (this, ARRAY_NOTATION_STRIDE (e));\n+      pp_c_right_bracket (this);\n       break;\n       \n     case CALL_EXPR:\n       {\n \tcall_expr_arg_iterator iter;\n \ttree arg;\n-\tpp_postfix_expression (pp, CALL_EXPR_FN (e));\n-\tpp_c_left_paren (pp);\n+\tpostfix_expression (CALL_EXPR_FN (e));\n+\tpp_c_left_paren (this);\n \tFOR_EACH_CALL_EXPR_ARG (arg, iter, e)\n \t  {\n-\t    pp_expression (pp, arg);\n+\t    pp_expression (this, arg);\n \t    if (more_call_expr_args_p (&iter))\n-\t      pp_separate_with (pp, ',');\n+\t      pp_separate_with (this, ',');\n \t  }\n-\tpp_c_right_paren (pp);\n+\tpp_c_right_paren (this);\n \tbreak;\n       }\n \n     case UNORDERED_EXPR:\n-      pp_c_ws_string (pp, flag_isoc99\n+      pp_c_ws_string (this, flag_isoc99\n \t\t\t   ? \"isunordered\"\n \t\t\t   : \"__builtin_isunordered\");\n       goto two_args_fun;\n \n     case ORDERED_EXPR:\n-      pp_c_ws_string (pp, flag_isoc99\n+      pp_c_ws_string (this, flag_isoc99\n \t\t\t   ? \"!isunordered\"\n \t\t\t   : \"!__builtin_isunordered\");\n       goto two_args_fun;\n \n     case UNLT_EXPR:\n-      pp_c_ws_string (pp, flag_isoc99\n+      pp_c_ws_string (this, flag_isoc99\n \t\t\t   ? \"!isgreaterequal\"\n \t\t\t   : \"!__builtin_isgreaterequal\");\n       goto two_args_fun;\n \n     case UNLE_EXPR:\n-      pp_c_ws_string (pp, flag_isoc99\n+      pp_c_ws_string (this, flag_isoc99\n \t\t\t   ? \"!isgreater\"\n \t\t\t   : \"!__builtin_isgreater\");\n       goto two_args_fun;\n \n     case UNGT_EXPR:\n-      pp_c_ws_string (pp, flag_isoc99\n+      pp_c_ws_string (this, flag_isoc99\n \t\t\t   ? \"!islessequal\"\n \t\t\t   : \"!__builtin_islessequal\");\n       goto two_args_fun;\n \n     case UNGE_EXPR:\n-      pp_c_ws_string (pp, flag_isoc99\n+      pp_c_ws_string (this, flag_isoc99\n \t\t\t   ? \"!isless\"\n \t\t\t   : \"!__builtin_isless\");\n       goto two_args_fun;\n \n     case UNEQ_EXPR:\n-      pp_c_ws_string (pp, flag_isoc99\n+      pp_c_ws_string (this, flag_isoc99\n \t\t\t   ? \"!islessgreater\"\n \t\t\t   : \"!__builtin_islessgreater\");\n       goto two_args_fun;\n \n     case LTGT_EXPR:\n-      pp_c_ws_string (pp, flag_isoc99\n+      pp_c_ws_string (this, flag_isoc99\n \t\t\t   ? \"islessgreater\"\n \t\t\t   : \"__builtin_islessgreater\");\n       goto two_args_fun;\n \n     two_args_fun:\n-      pp_c_left_paren (pp);\n-      pp_expression (pp, TREE_OPERAND (e, 0));\n-      pp_separate_with (pp, ',');\n-      pp_expression (pp, TREE_OPERAND (e, 1));\n-      pp_c_right_paren (pp);\n+      pp_c_left_paren (this);\n+      pp_expression (this, TREE_OPERAND (e, 0));\n+      pp_separate_with (this, ',');\n+      pp_expression (this, TREE_OPERAND (e, 1));\n+      pp_c_right_paren (this);\n       break;\n \n     case ABS_EXPR:\n-      pp_c_ws_string (pp, \"__builtin_abs\");\n-      pp_c_left_paren (pp);\n-      pp_expression (pp, TREE_OPERAND (e, 0));\n-      pp_c_right_paren (pp);\n+      pp_c_ws_string (this, \"__builtin_abs\");\n+      pp_c_left_paren (this);\n+      pp_expression (this, TREE_OPERAND (e, 0));\n+      pp_c_right_paren (this);\n       break;\n \n     case COMPONENT_REF:\n       {\n \ttree object = TREE_OPERAND (e, 0);\n \tif (TREE_CODE (object) == INDIRECT_REF)\n \t  {\n-\t    pp_postfix_expression (pp, TREE_OPERAND (object, 0));\n-\t    pp_c_arrow (pp);\n+\t    postfix_expression (TREE_OPERAND (object, 0));\n+\t    pp_c_arrow (this);\n \t  }\n \telse\n \t  {\n-\t    pp_postfix_expression (pp, object);\n-\t    pp_c_dot (pp);\n+\t    postfix_expression (object);\n+\t    pp_c_dot (this);\n \t  }\n-\tpp_expression (pp, TREE_OPERAND (e, 1));\n+\tpp_expression (this, TREE_OPERAND (e, 1));\n       }\n       break;\n \n@@ -1600,63 +1600,63 @@ pp_c_postfix_expression (c_pretty_printer *pp, tree e)\n \t    HOST_WIDE_INT size = tree_low_cst (TYPE_SIZE (type), 0);\n \t    if ((bitpos % size) == 0)\n \t      {\n-\t\tpp_c_left_paren (pp);\n-\t\tpp_c_left_paren (pp);\n-\t\tpp_type_id (pp, type);\n-\t\tpp_c_star (pp);\n-\t\tpp_c_right_paren (pp);\n-\t\tpp_c_ampersand (pp);\n-\t\tpp_expression (pp, TREE_OPERAND (e, 0));\n-\t\tpp_c_right_paren (pp);\n-\t\tpp_c_left_bracket (pp);\n-\t\tpp_wide_integer (pp, bitpos / size);\n-\t\tpp_c_right_bracket (pp);\n+\t\tpp_c_left_paren (this);\n+\t\tpp_c_left_paren (this);\n+\t\tpp_type_id (this, type);\n+\t\tpp_c_star (this);\n+\t\tpp_c_right_paren (this);\n+\t\tpp_c_ampersand (this);\n+\t\tpp_expression (this, TREE_OPERAND (e, 0));\n+\t\tpp_c_right_paren (this);\n+\t\tpp_c_left_bracket (this);\n+\t\tpp_wide_integer (this, bitpos / size);\n+\t\tpp_c_right_bracket (this);\n \t\tbreak;\n \t      }\n \t  }\n-\tpp_unsupported_tree (pp, e);\n+\tpp_unsupported_tree (this, e);\n       }\n       break;\n \n     case MEM_REF:\n-      pp_c_expression (pp, e);\n+      pp_c_expression (this, e);\n       break;\n \n     case COMPLEX_CST:\n     case VECTOR_CST:\n-      pp_c_compound_literal (pp, e);\n+      pp_c_compound_literal (this, e);\n       break;\n \n     case COMPLEX_EXPR:\n-      pp_c_complex_expr (pp, e);\n+      pp_c_complex_expr (this, e);\n       break;\n \n     case COMPOUND_LITERAL_EXPR:\n       e = DECL_INITIAL (COMPOUND_LITERAL_EXPR_DECL (e));\n       /* Fall through.  */\n     case CONSTRUCTOR:\n-      pp_initializer (pp, e);\n+      pp_initializer (this, e);\n       break;\n \n     case VA_ARG_EXPR:\n-      pp_c_ws_string (pp, \"__builtin_va_arg\");\n-      pp_c_left_paren (pp);\n-      pp_assignment_expression (pp, TREE_OPERAND (e, 0));\n-      pp_separate_with (pp, ',');\n-      pp_type_id (pp, TREE_TYPE (e));\n-      pp_c_right_paren (pp);\n+      pp_c_ws_string (this, \"__builtin_va_arg\");\n+      pp_c_left_paren (this);\n+      pp_assignment_expression (this, TREE_OPERAND (e, 0));\n+      pp_separate_with (this, ',');\n+      pp_type_id (this, TREE_TYPE (e));\n+      pp_c_right_paren (this);\n       break;\n \n     case ADDR_EXPR:\n       if (TREE_CODE (TREE_OPERAND (e, 0)) == FUNCTION_DECL)\n \t{\n-          pp_id_expression (pp, TREE_OPERAND (e, 0));\n+          id_expression (TREE_OPERAND (e, 0));\n \t  break;\n \t}\n       /* else fall through.  */\n \n     default:\n-      pp_primary_expression (pp, e);\n+      primary_expression (e);\n       break;\n     }\n }\n@@ -2344,7 +2344,6 @@ c_pretty_printer::c_pretty_printer ()\n \n   statement                 = pp_c_statement;\n \n-  postfix_expression        = pp_c_postfix_expression;\n   unary_expression          = pp_c_unary_expression;\n   initializer               = pp_c_initializer;\n   multiplicative_expression = pp_c_multiplicative_expression;"}, {"sha": "573b25b317f9e729d152511fe43dc2965ea54d80", "filename": "gcc/c-family/c-pretty-print.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb22178f7d94c8101146bcaf66c7703d0ef643e0/gcc%2Fc-family%2Fc-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb22178f7d94c8101146bcaf66c7703d0ef643e0/gcc%2Fc-family%2Fc-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pretty-print.h?ref=fb22178f7d94c8101146bcaf66c7703d0ef643e0", "patch": "@@ -57,6 +57,7 @@ struct c_pretty_printer : pretty_printer\n   virtual void constant (tree);\n   virtual void id_expression (tree);\n   virtual void primary_expression (tree);\n+  virtual void postfix_expression (tree);\n   /* Points to the first element of an array of offset-list.\n      Not used yet.  */\n   int *offset_list;\n@@ -82,7 +83,6 @@ struct c_pretty_printer : pretty_printer\n \n   c_pretty_print_fn statement;\n \n-  c_pretty_print_fn postfix_expression;\n   c_pretty_print_fn unary_expression;\n   c_pretty_print_fn multiplicative_expression;\n   c_pretty_print_fn conditional_expression;\n@@ -115,7 +115,7 @@ struct c_pretty_printer : pretty_printer\n #define pp_constant(PP, E)              (PP)->constant (E)\n #define pp_id_expression(PP, E)         (PP)->id_expression (E)\n #define pp_primary_expression(PP, E)    (PP)->primary_expression (E)\n-#define pp_postfix_expression(PP, E)    (PP)->postfix_expression (PP, E)\n+#define pp_postfix_expression(PP, E)    (PP)->postfix_expression (E)\n #define pp_unary_expression(PP, E)      (PP)->unary_expression (PP, E)\n #define pp_initializer(PP, E)           (PP)->initializer (PP, E)\n #define pp_multiplicative_expression(PP, E)      \\\n@@ -169,7 +169,6 @@ void pp_c_constructor_elts (c_pretty_printer *, vec<constructor_elt, va_gc> *);\n void pp_c_call_argument_list (c_pretty_printer *, tree);\n void pp_c_unary_expression (c_pretty_printer *, tree);\n void pp_c_cast_expression (c_pretty_printer *, tree);\n-void pp_c_postfix_expression (c_pretty_printer *, tree);\n void pp_c_init_declarator (c_pretty_printer *, tree);\n void pp_c_ws_string (c_pretty_printer *, const char *);\n void pp_c_identifier (c_pretty_printer *, const char *);"}, {"sha": "cfc7dd997a87f595f2560b22842dfe682b4651a0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb22178f7d94c8101146bcaf66c7703d0ef643e0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb22178f7d94c8101146bcaf66c7703d0ef643e0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fb22178f7d94c8101146bcaf66c7703d0ef643e0", "patch": "@@ -1,4 +1,14 @@\n-2013-08-25  Gabriel Dos Reis  <gdr@cs.tamu.edu>\n+2013-08-25  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* cxx-pretty-print.h (cxx_pretty_printer::postfix_expression):\n+\tDeclare as overrider.\n+\t* cxx-pretty-print.c (cxx_pretty_printer::postfix_expression):\n+\tRename from pp_cxx_postfix_expression.  Adjust.\n+\t(pp_cxx_expression): Use pp_postfix_expression.\n+\t(cxx_pretty_printer::cxx_pretty_printer): Do not assign to\n+\tpostfix_expression.\n+\n+2013-08-25  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* cxx-pretty-print.h (cxx_pretty_printer::primary_expression): Now\n \tan overrider of c_pretty_printer::primary_expression."}, {"sha": "799b8073bfad18a281d47aa0e9a7faea9fe89c6b", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 43, "deletions": 44, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb22178f7d94c8101146bcaf66c7703d0ef643e0/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb22178f7d94c8101146bcaf66c7703d0ef643e0/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=fb22178f7d94c8101146bcaf66c7703d0ef643e0", "patch": "@@ -487,8 +487,8 @@ cxx_pretty_printer::primary_expression (tree t)\n      typeid ( expression )\n      typeid ( type-id )  */\n \n-static void\n-pp_cxx_postfix_expression (cxx_pretty_printer *pp, tree t)\n+void\n+cxx_pretty_printer::postfix_expression (tree t)\n {\n   enum tree_code code = TREE_CODE (t);\n \n@@ -499,7 +499,7 @@ pp_cxx_postfix_expression (cxx_pretty_printer *pp, tree t)\n       {\n \ttree fun = (code == AGGR_INIT_EXPR ? AGGR_INIT_EXPR_FN (t)\n \t\t\t\t\t   : CALL_EXPR_FN (t));\n-\ttree saved_scope = pp->enclosing_scope;\n+\ttree saved_scope = enclosing_scope;\n \tbool skipfirst = false;\n \ttree arg;\n \n@@ -528,21 +528,21 @@ pp_cxx_postfix_expression (cxx_pretty_printer *pp, tree t)\n \n \t    if (!TYPE_PTR_P (TREE_TYPE (object)))\n \t      {\n-\t\tpp_cxx_postfix_expression (pp, object);\n-\t\tpp_cxx_dot (pp);\n+\t\tpostfix_expression (object);\n+\t\tpp_cxx_dot (this);\n \t      }\n \t    else\n \t      {\n-\t\tpp_cxx_postfix_expression (pp, object);\n-\t\tpp_cxx_arrow (pp);\n+\t\tpostfix_expression (object);\n+\t\tpp_cxx_arrow (this);\n \t      }\n \t    skipfirst = true;\n-\t    pp->enclosing_scope = strip_pointer_operator (TREE_TYPE (object));\n+\t    enclosing_scope = strip_pointer_operator (TREE_TYPE (object));\n \t  }\n \n-\tpp_cxx_postfix_expression (pp, fun);\n-\tpp->enclosing_scope = saved_scope;\n-\tpp_cxx_left_paren (pp);\n+\tpostfix_expression (fun);\n+\tenclosing_scope = saved_scope;\n+\tpp_cxx_left_paren (this);\n \tif (code == AGGR_INIT_EXPR)\n \t  {\n \t    aggr_init_expr_arg_iterator iter;\n@@ -552,9 +552,9 @@ pp_cxx_postfix_expression (cxx_pretty_printer *pp, tree t)\n \t\t  skipfirst = false;\n \t\telse\n \t\t  {\n-\t\t    pp_cxx_expression (pp, arg);\n+\t\t    pp_cxx_expression (this, arg);\n \t\t    if (more_aggr_init_expr_args_p (&iter))\n-\t\t      pp_cxx_separate_with (pp, ',');\n+\t\t      pp_cxx_separate_with (this, ',');\n \t\t  }\n \t      }\n \t  }\n@@ -567,18 +567,18 @@ pp_cxx_postfix_expression (cxx_pretty_printer *pp, tree t)\n \t\t  skipfirst = false;\n \t\telse\n \t\t  {\n-\t\t    pp_cxx_expression (pp, arg);\n+\t\t    pp_cxx_expression (this, arg);\n \t\t    if (more_call_expr_args_p (&iter))\n-\t\t      pp_cxx_separate_with (pp, ',');\n+\t\t      pp_cxx_separate_with (this, ',');\n \t\t  }\n \t      }\n \t  }\n-\tpp_cxx_right_paren (pp);\n+\tpp_cxx_right_paren (this);\n       }\n       if (code == AGGR_INIT_EXPR && AGGR_INIT_VIA_CTOR_P (t))\n \t{\n-\t  pp_cxx_separate_with (pp, ',');\n-\t  pp_cxx_postfix_expression (pp, AGGR_INIT_EXPR_SLOT (t));\n+\t  pp_cxx_separate_with (this, ',');\n+\t  postfix_expression (AGGR_INIT_EXPR_SLOT (t));\n \t}\n       break;\n \n@@ -591,55 +591,55 @@ pp_cxx_postfix_expression (cxx_pretty_printer *pp, tree t)\n     case CONST_DECL:\n     case TEMPLATE_DECL:\n     case RESULT_DECL:\n-      pp_primary_expression (pp, t);\n+      primary_expression (t);\n       break;\n \n     case DYNAMIC_CAST_EXPR:\n     case STATIC_CAST_EXPR:\n     case REINTERPRET_CAST_EXPR:\n     case CONST_CAST_EXPR:\n       if (code == DYNAMIC_CAST_EXPR)\n-\tpp_cxx_ws_string (pp, \"dynamic_cast\");\n+\tpp_cxx_ws_string (this, \"dynamic_cast\");\n       else if (code == STATIC_CAST_EXPR)\n-\tpp_cxx_ws_string (pp, \"static_cast\");\n+\tpp_cxx_ws_string (this, \"static_cast\");\n       else if (code == REINTERPRET_CAST_EXPR)\n-\tpp_cxx_ws_string (pp, \"reinterpret_cast\");\n+\tpp_cxx_ws_string (this, \"reinterpret_cast\");\n       else\n-\tpp_cxx_ws_string (pp, \"const_cast\");\n-      pp_cxx_begin_template_argument_list (pp);\n-      pp_cxx_type_id (pp, TREE_TYPE (t));\n-      pp_cxx_end_template_argument_list (pp);\n-      pp_left_paren (pp);\n-      pp_cxx_expression (pp, TREE_OPERAND (t, 0));\n-      pp_right_paren (pp);\n+\tpp_cxx_ws_string (this, \"const_cast\");\n+      pp_cxx_begin_template_argument_list (this);\n+      pp_cxx_type_id (this, TREE_TYPE (t));\n+      pp_cxx_end_template_argument_list (this);\n+      pp_left_paren (this);\n+      pp_cxx_expression (this, TREE_OPERAND (t, 0));\n+      pp_right_paren (this);\n       break;\n \n     case EMPTY_CLASS_EXPR:\n-      pp_cxx_type_id (pp, TREE_TYPE (t));\n-      pp_left_paren (pp);\n-      pp_right_paren (pp);\n+      pp_cxx_type_id (this, TREE_TYPE (t));\n+      pp_left_paren (this);\n+      pp_right_paren (this);\n       break;\n \n     case TYPEID_EXPR:\n-      pp_cxx_typeid_expression (pp, t);\n+      pp_cxx_typeid_expression (this, t);\n       break;\n \n     case PSEUDO_DTOR_EXPR:\n-      pp_cxx_postfix_expression (pp, TREE_OPERAND (t, 0));\n-      pp_cxx_dot (pp);\n-      pp_cxx_qualified_id (pp, TREE_OPERAND (t, 1));\n-      pp_cxx_colon_colon (pp);\n-      pp_complement (pp);\n-      pp_cxx_unqualified_id (pp, TREE_OPERAND (t, 2));\n+      postfix_expression (TREE_OPERAND (t, 0));\n+      pp_cxx_dot (this);\n+      pp_cxx_qualified_id (this, TREE_OPERAND (t, 1));\n+      pp_cxx_colon_colon (this);\n+      pp_complement (this);\n+      pp_cxx_unqualified_id (this, TREE_OPERAND (t, 2));\n       break;\n \n     case ARROW_EXPR:\n-      pp_cxx_postfix_expression (pp, TREE_OPERAND (t, 0));\n-      pp_cxx_arrow (pp);\n+      postfix_expression (TREE_OPERAND (t, 0));\n+      pp_cxx_arrow (this);\n       break;\n \n     default:\n-      pp_c_postfix_expression (pp, t);\n+      c_pretty_printer::postfix_expression (t);\n       break;\n     }\n }\n@@ -1085,7 +1085,7 @@ pp_cxx_expression (cxx_pretty_printer *pp, tree t)\n     case PSEUDO_DTOR_EXPR:\n     case AGGR_INIT_EXPR:\n     case ARROW_EXPR:\n-      pp_cxx_postfix_expression (pp, t);\n+      pp_postfix_expression (pp, t);\n       break;\n \n     case NEW_EXPR:\n@@ -2448,7 +2448,6 @@ cxx_pretty_printer::cxx_pretty_printer ()\n \n   /* pp->statement = (pp_fun) pp_cxx_statement;  */\n \n-  postfix_expression = (pp_fun) pp_cxx_postfix_expression;\n   unary_expression = (pp_fun) pp_cxx_unary_expression;\n   multiplicative_expression = (pp_fun) pp_cxx_multiplicative_expression;\n   conditional_expression = (pp_fun) pp_cxx_conditional_expression;"}, {"sha": "6b0416c7a74992991eee4e2c02d2caf5bf40b15f", "filename": "gcc/cp/cxx-pretty-print.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb22178f7d94c8101146bcaf66c7703d0ef643e0/gcc%2Fcp%2Fcxx-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb22178f7d94c8101146bcaf66c7703d0ef643e0/gcc%2Fcp%2Fcxx-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.h?ref=fb22178f7d94c8101146bcaf66c7703d0ef643e0", "patch": "@@ -36,6 +36,7 @@ struct cxx_pretty_printer : c_pretty_printer\n   void constant (tree);\n   void id_expression (tree);\n   void primary_expression (tree);\n+  void postfix_expression (tree);\n   /* This is the enclosing scope of the entity being pretty-printed.  */\n   tree enclosing_scope;\n };"}]}