{"sha": "9f33663b8d400e06d2d3cb514e952db0bb1e8c4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWYzMzY2M2I4ZDQwMGUwNmQyZDNjYjUxNGU5NTJkYjBiYjFlOGM0Yg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1999-07-21T08:52:14Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-07-21T08:52:14Z"}, "message": "decl.c (warn_extern_redeclared_static): Check DECL_ARTIFICIAL...\n\n\t* decl.c (warn_extern_redeclared_static): Check DECL_ARTIFICIAL,\n\tnot DECL_BUILT_IN, to determine if a function is internally declared.\n\t(duplicate_decls): Likewise.  Improve handling of builtins.\n\t(push_overloaded_decl): Remove special handling of builtins.\n\n\t* cp-tree.h (ANON_AGGR_TYPE_P): Use CLASS_TYPE_P.\n\n\t* decl.c (grokdeclarator): Pull out decl_constant_value in\n\ttemplates, too.\n\n\t* class.c (finish_struct, finish_struct_1): Remove 'warn_anon' parm.\n\t* cp-tree.h, pt.c, semantics.c: Adjust.\n\t* method.c (largest_union_member): Remove.\n\nFrom-SVN: r28204", "tree": {"sha": "9aa23e8bb2069a014b5c9f9a1f467a297e95d461", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9aa23e8bb2069a014b5c9f9a1f467a297e95d461"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f33663b8d400e06d2d3cb514e952db0bb1e8c4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f33663b8d400e06d2d3cb514e952db0bb1e8c4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f33663b8d400e06d2d3cb514e952db0bb1e8c4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f33663b8d400e06d2d3cb514e952db0bb1e8c4b/comments", "author": null, "committer": null, "parents": [{"sha": "aad2312110c2d6382b4627a006b117c8876ae5f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aad2312110c2d6382b4627a006b117c8876ae5f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aad2312110c2d6382b4627a006b117c8876ae5f2"}], "stats": {"total": 145, "additions": 70, "deletions": 75}, "files": [{"sha": "7df7bab8e3368c424df62eee3d288d799cb85711", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f33663b8d400e06d2d3cb514e952db0bb1e8c4b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f33663b8d400e06d2d3cb514e952db0bb1e8c4b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9f33663b8d400e06d2d3cb514e952db0bb1e8c4b", "patch": "@@ -1,5 +1,19 @@\n 1999-07-20  Jason Merrill  <jason@yorick.cygnus.com>\n \n+\t* decl.c (warn_extern_redeclared_static): Check DECL_ARTIFICIAL,\n+\tnot DECL_BUILT_IN, to determine if a function is internally declared.\n+\t(duplicate_decls): Likewise.  Improve handling of builtins.\n+\t(push_overloaded_decl): Remove special handling of builtins.\n+\n+\t* cp-tree.h (ANON_AGGR_TYPE_P): Use CLASS_TYPE_P.\n+\n+\t* decl.c (grokdeclarator): Pull out decl_constant_value in\n+\ttemplates, too.\n+\n+\t* class.c (finish_struct, finish_struct_1): Remove 'warn_anon' parm.\n+\t* cp-tree.h, pt.c, semantics.c: Adjust.\n+\t* method.c (largest_union_member): Remove.\n+\n \t* lang-specs.h (c++-cpp-output): Pass -fpreprocessed.\n \n \t* lex.c (token_getch, token_put_back): New fns."}, {"sha": "41f1d79a914410d1b9cfd1059e46ea94dc78e992", "filename": "gcc/cp/class.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f33663b8d400e06d2d3cb514e952db0bb1e8c4b/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f33663b8d400e06d2d3cb514e952db0bb1e8c4b/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=9f33663b8d400e06d2d3cb514e952db0bb1e8c4b", "patch": "@@ -3202,9 +3202,8 @@ add_fields_to_vec (fields, field_vec, idx)\n    ATTRIBUTES is the set of decl attributes to be applied, if any.  */\n \n void\n-finish_struct_1 (t, warn_anon)\n+finish_struct_1 (t)\n      tree t;\n-     int warn_anon;\n {\n   int old;\n   enum tree_code code = TREE_CODE (t);\n@@ -4279,9 +4278,8 @@ unreverse_member_declarations (t)\n }\n \n tree\n-finish_struct (t, attributes, warn_anon)\n+finish_struct (t, attributes)\n      tree t, attributes;\n-     int warn_anon;\n {\n   /* Append the fields we need for constructing signature tables.  */\n   if (IS_SIGNATURE (t))\n@@ -4299,7 +4297,7 @@ finish_struct (t, attributes, warn_anon)\n       TYPE_SIZE (t) = integer_zero_node;\n     }\n   else\n-    finish_struct_1 (t, warn_anon);\n+    finish_struct_1 (t);\n \n   TYPE_BEING_DEFINED (t) = 0;\n "}, {"sha": "55c93ea68b578fe27ffaeb73d935ab069c765a1c", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f33663b8d400e06d2d3cb514e952db0bb1e8c4b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f33663b8d400e06d2d3cb514e952db0bb1e8c4b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=9f33663b8d400e06d2d3cb514e952db0bb1e8c4b", "patch": "@@ -1848,8 +1848,7 @@ extern int flag_new_for_scope;\n    flag for this because \"A union for which objects or pointers are\n    declared is not an anonymous union\" [class.union].  */\n #define ANON_AGGR_TYPE_P(NODE)\t\t\t\t\\\n-  (TYPE_LANG_SPECIFIC (NODE)\t\t\t\t\\\n-   && TYPE_LANG_SPECIFIC (NODE)->type_flags.anon_aggr)\n+  (CLASS_TYPE_P (NODE) && TYPE_LANG_SPECIFIC (NODE)->type_flags.anon_aggr)\n #define SET_ANON_AGGR_TYPE_P(NODE)\t\t\t\\\n   (TYPE_LANG_SPECIFIC (NODE)->type_flags.anon_aggr = 1)\n \n@@ -2763,8 +2762,8 @@ extern void add_method\t\t\t\tPROTO((tree, tree *, tree));\n extern int currently_open_class\t\t\tPROTO((tree));\n extern tree get_vfield_offset\t\t\tPROTO((tree));\n extern void duplicate_tag_error\t\t\tPROTO((tree));\n-extern tree finish_struct\t\t\tPROTO((tree, tree, int));\n-extern void finish_struct_1\t\t\tPROTO((tree, int));\n+extern tree finish_struct\t\t\tPROTO((tree, tree));\n+extern void finish_struct_1\t\t\tPROTO((tree));\n extern int resolves_to_fixed_type_p\t\tPROTO((tree, int *));\n extern void init_class_processing\t\tPROTO((void));\n extern int is_empty_class\t\t\tPROTO((tree));"}, {"sha": "dda66fed65dc68a6a421d86fd9935afebc83de9b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 48, "deletions": 45, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f33663b8d400e06d2d3cb514e952db0bb1e8c4b/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f33663b8d400e06d2d3cb514e952db0bb1e8c4b/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=9f33663b8d400e06d2d3cb514e952db0bb1e8c4b", "patch": "@@ -3048,8 +3048,7 @@ warn_extern_redeclared_static (newdecl, olddecl)\n       if (! (TREE_CODE (newdecl) == FUNCTION_DECL\n \t     && olddecl != NULL_TREE\n \t     && TREE_CODE (olddecl) == FUNCTION_DECL\n-\t     && (DECL_BUILT_IN (olddecl)\n-\t\t || DECL_BUILT_IN_NONANSI (olddecl))))\n+\t     && DECL_ARTIFICIAL (olddecl)))\n \t{\n \t  cp_pedwarn (IDENTIFIER_IMPLICIT_DECL (name)\n \t\t      ? implicit_extern_static_warning\n@@ -3092,44 +3091,58 @@ duplicate_decls (newdecl, olddecl)\n  \n   /* Check for redeclaration and other discrepancies. */\n   if (TREE_CODE (olddecl) == FUNCTION_DECL\n-      && DECL_ARTIFICIAL (olddecl)\n-      && (DECL_BUILT_IN (olddecl) || DECL_BUILT_IN_NONANSI (olddecl)))\n-    {\n-      /* If you declare a built-in or predefined function name as static,\n-\t the old definition is overridden, but optionally warn this was a\n-\t bad choice of name.  Ditto for overloads.  */\n-      if (! TREE_PUBLIC (newdecl)\n-\t  || (TREE_CODE (newdecl) == FUNCTION_DECL\n-\t      && DECL_LANGUAGE (newdecl) != DECL_LANGUAGE (olddecl)))\n-\t{\n-\t  if (warn_shadow)\n-\t    cp_warning (\"shadowing %s function `%#D'\",\n-\t\t\tDECL_BUILT_IN (olddecl) ? \"built-in\" : \"library\",\n+      && DECL_ARTIFICIAL (olddecl))\n+    {\n+      if (TREE_CODE (newdecl) != FUNCTION_DECL)\n+\t{\n+\t  /* If you declare a built-in or predefined function name as static,\n+\t     the old definition is overridden, but optionally warn this was a\n+\t     bad choice of name.  */\n+\t  if (! TREE_PUBLIC (newdecl))\n+\t    {\n+\t      if (warn_shadow)\n+\t\tcp_warning (\"shadowing %s function `%#D'\",\n+\t\t\t    DECL_BUILT_IN (olddecl) ? \"built-in\" : \"library\",\n+\t\t\t    olddecl);\n+\t      /* Discard the old built-in function.  */\n+\t      return 0;\n+\t    }\n+\t  /* If the built-in is not ansi, then programs can override\n+\t     it even globally without an error.  */\n+\t  else if (! DECL_BUILT_IN (olddecl))\n+\t    cp_warning (\"library function `%#D' redeclared as non-function `%#D'\",\n+\t\t\tolddecl, newdecl);\n+\t  else\n+\t    {\n+\t      cp_error (\"declaration of `%#D'\", newdecl);\n+\t      cp_error (\"conflicts with built-in declaration `%#D'\",\n \t\t\tolddecl);\n-\t  /* Discard the old built-in function.  */\n+\t    }\n \t  return 0;\n \t}\n-      else if (! types_match)\n+      else if (!types_match)\n \t{\n-\t  if (TREE_CODE (newdecl) != FUNCTION_DECL)\n+\t  if ((DECL_LANGUAGE (newdecl) == lang_c\n+\t       && DECL_LANGUAGE (olddecl) == lang_c)\n+\t      || compparms (TYPE_ARG_TYPES (TREE_TYPE (newdecl)),\n+\t\t\t    TYPE_ARG_TYPES (TREE_TYPE (olddecl))))\n \t    {\n-\t      /* If the built-in is not ansi, then programs can override\n-\t\t it even globally without an error.  */\n-\t      if (! DECL_BUILT_IN (olddecl))\n-\t\tcp_warning (\"library function `%#D' redeclared as non-function `%#D'\",\n-\t\t\t    olddecl, newdecl);\n-\t      else\n+\t      /* A near match; override the builtin.  */\n+\n+\t      if (TREE_PUBLIC (newdecl))\n \t\t{\n-\t\t  cp_error (\"declaration of `%#D'\", newdecl);\n-\t\t  cp_error (\"conflicts with built-in declaration `%#D'\",\n-\t\t\t    olddecl);\n+\t\t  cp_warning (\"new declaration `%#D'\", newdecl);\n+\t\t  cp_warning (\"ambiguates built-in declaration `%#D'\",\n+\t\t\t      olddecl);\n \t\t}\n-\t      return 0;\n+\t      else if (warn_shadow)\n+\t\tcp_warning (\"shadowing %s function `%#D'\",\n+\t\t\t    DECL_BUILT_IN (olddecl) ? \"built-in\" : \"library\",\n+\t\t\t    olddecl);\n \t    }\n-\n-\t  cp_warning (\"declaration of `%#D'\", newdecl);\n-\t  cp_warning (\"conflicts with built-in declaration `%#D'\",\n-\t\t      olddecl);\n+\t  else\n+\t    /* Discard the old built-in function.  */\n+\t    return 0;\n \t}\n     }\n   else if (TREE_CODE (olddecl) != TREE_CODE (newdecl))\n@@ -4469,17 +4482,7 @@ push_overloaded_decl (decl, flags)\n   int doing_global = (namespace_bindings_p () || !(flags & PUSH_LOCAL));\n \n   if (doing_global)\n-    {\n-      old = namespace_binding (name, DECL_CONTEXT (decl));\n-      if (old && TREE_CODE (old) == FUNCTION_DECL\n-\t  && DECL_ARTIFICIAL (old)\n-\t  && (DECL_BUILT_IN (old) || DECL_BUILT_IN_NONANSI (old)))\n-\t{\n-\t  if (duplicate_decls (decl, old))\n-\t    return old;\n-\t  old = NULL_TREE;\n-\t}\n-    }\n+    old = namespace_binding (name, DECL_CONTEXT (decl));\n   else\n     old = lookup_name_current_level (name);\n \n@@ -10013,6 +10016,8 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t\tif (TREE_CODE (size) == NOP_EXPR\n \t\t    && TREE_TYPE (size) == TREE_TYPE (TREE_OPERAND (size, 0)))\n \t\t  size = TREE_OPERAND (size, 0);\n+\t\tif (TREE_READONLY_DECL_P (size))\n+\t\t  size = decl_constant_value (size);\n \n \t\t/* If this involves a template parameter, it will be a\n \t\t   constant at instantiation time, but we don't know\n@@ -10048,8 +10053,6 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t\t\t      dname);\n \t\t    size = integer_one_node;\n \t\t  }\n-\t\tif (TREE_READONLY_DECL_P (size))\n-\t\t  size = decl_constant_value (size);\n \t\tif (pedantic && integer_zerop (size))\n \t\t  cp_pedwarn (\"ANSI C++ forbids zero-size array `%D'\", dname);\n \t\tif (TREE_CONSTANT (size))"}, {"sha": "04f7b39ff3a4387ba075b7a8a4a2019b119e597b", "filename": "gcc/cp/method.c", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f33663b8d400e06d2d3cb514e952db0bb1e8c4b/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f33663b8d400e06d2d3cb514e952db0bb1e8c4b/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=9f33663b8d400e06d2d3cb514e952db0bb1e8c4b", "patch": "@@ -2180,24 +2180,6 @@ emit_thunk (thunk_fndecl)\n \f\n /* Code for synthesizing methods which have default semantics defined.  */\n \n-/* For the anonymous union in TYPE, return the member that is at least as\n-   large as the rest of the members, so we can copy it.  */\n-\n-static tree\n-largest_union_member (type)\n-     tree type;\n-{\n-  tree f, type_size = TYPE_SIZE (type);\n-\n-  for (f = TYPE_FIELDS (type); f; f = TREE_CHAIN (f))\n-    if (simple_cst_equal (DECL_SIZE (f), type_size) == 1)\n-      return f;\n-\n-  /* We should always find one.  */\n-  my_friendly_abort (323);\n-  return NULL_TREE;\n-}\n-\n /* Generate code for default X(X&) constructor.  */\n \n static void"}, {"sha": "0744812cfc752932f9436ae1fdbabd018379bb24", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f33663b8d400e06d2d3cb514e952db0bb1e8c4b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f33663b8d400e06d2d3cb514e952db0bb1e8c4b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=9f33663b8d400e06d2d3cb514e952db0bb1e8c4b", "patch": "@@ -5183,7 +5183,7 @@ instantiate_class_template (type)\n   input_filename = DECL_SOURCE_FILE (typedecl);\n \n   unreverse_member_declarations (type);\n-  finish_struct_1 (type, 0);\n+  finish_struct_1 (type);\n   CLASSTYPE_GOT_SEMICOLON (type) = 1;\n \n   /* Clear this now so repo_template_used is happy.  */"}, {"sha": "b66efdfebc7f58f5fcb3a7499280a0f0a880a90f", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f33663b8d400e06d2d3cb514e952db0bb1e8c4b/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f33663b8d400e06d2d3cb514e952db0bb1e8c4b/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=9f33663b8d400e06d2d3cb514e952db0bb1e8c4b", "patch": "@@ -1320,7 +1320,6 @@ begin_class_definition (t)\n   /* Don't change signatures.  */\n   if (! IS_SIGNATURE (t))\n     {\n-      int needs_writing;\n       tree name = TYPE_IDENTIFIER (t);\n       \n       if (! ANON_AGGRNAME_P (name))\n@@ -1464,7 +1463,7 @@ finish_class_definition (t, attributes, semi, pop_scope_p)\n     ;\n   else\n     {\n-      t = finish_struct (t, attributes, semi);\n+      t = finish_struct (t, attributes);\n       if (semi) \n \tnote_got_semicolon (t);\n     }"}]}