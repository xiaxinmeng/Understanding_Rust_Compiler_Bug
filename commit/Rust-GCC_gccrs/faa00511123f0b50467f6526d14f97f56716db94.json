{"sha": "faa00511123f0b50467f6526d14f97f56716db94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFhMDA1MTExMjNmMGI1MDQ2N2Y2NTI2ZDE0Zjk3ZjU2NzE2ZGI5NA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2011-05-28T00:24:11Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2011-05-28T00:24:11Z"}, "message": "future (launch): Update enumerators and define operators required for bitmask type.\n\n2011-05-28  Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\t* include/std/future (launch): Update enumerators and define\n\toperators required for bitmask type. Remove trailing whitespace.\n\t* src/future.cc: Remove trailing whitespace.\n\t* testsuite/30_threads/async/any.cc: Adjust.\n\t* testsuite/30_threads/async/sync.cc: Adjust.\n\t* testsuite/30_threads/async/launch.cc: New.\n\nFrom-SVN: r174374", "tree": {"sha": "82a61794458d0c99d6e8e6208bfc9651ec48894d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82a61794458d0c99d6e8e6208bfc9651ec48894d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/faa00511123f0b50467f6526d14f97f56716db94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faa00511123f0b50467f6526d14f97f56716db94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faa00511123f0b50467f6526d14f97f56716db94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faa00511123f0b50467f6526d14f97f56716db94/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ffe882a61fc933ba25df4b067614c85617dc9f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ffe882a61fc933ba25df4b067614c85617dc9f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ffe882a61fc933ba25df4b067614c85617dc9f2"}], "stats": {"total": 198, "additions": 165, "deletions": 33}, "files": [{"sha": "71b9adeecc2b2431a4501d611b24bed88c6e53b0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faa00511123f0b50467f6526d14f97f56716db94/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faa00511123f0b50467f6526d14f97f56716db94/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=faa00511123f0b50467f6526d14f97f56716db94", "patch": "@@ -1,3 +1,12 @@\n+2011-05-28  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* include/std/future (launch): Update enumerators and define\n+\toperators required for bitmask type. Remove trailing whitespace.\n+\t* src/future.cc: Remove trailing whitespace.\n+\t* testsuite/30_threads/async/any.cc: Adjust.\n+\t* testsuite/30_threads/async/sync.cc: Adjust.\n+\t* testsuite/30_threads/async/launch.cc: New.\n+\n 2011-05-28  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* include/std/future: Use noexcept."}, {"sha": "2b3e982200d6e2cecc62e4d9993248467ffe2049", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 57, "deletions": 28, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faa00511123f0b50467f6526d14f97f56716db94/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faa00511123f0b50467f6526d14f97f56716db94/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=faa00511123f0b50467f6526d14f97f56716db94", "patch": "@@ -75,12 +75,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   future_category() noexcept;\n \n   /// Overload for make_error_code.\n-  inline error_code \n+  inline error_code\n   make_error_code(future_errc __errc) noexcept\n   { return error_code(static_cast<int>(__errc), future_category()); }\n \n   /// Overload for make_error_condition.\n-  inline error_condition \n+  inline error_condition\n   make_error_condition(future_errc __errc) noexcept\n   { return error_condition(static_cast<int>(__errc), future_category()); }\n \n@@ -99,10 +99,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     virtual ~future_error() noexcept;\n \n-    virtual const char* \n+    virtual const char*\n     what() const noexcept;\n \n-    const error_code& \n+    const error_code&\n     code() const noexcept { return _M_code; }\n   };\n \n@@ -116,22 +116,51 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Res>\n     class atomic_future;\n \n-  template<typename _Signature> \n+  template<typename _Signature>\n     class packaged_task;\n \n   template<typename _Res>\n     class promise;\n \n   /// Launch code for futures\n-  enum class launch \n-  { \n-    any, \n-    async, \n-    sync \n+  enum class launch\n+  {\n+    async = 1,\n+    deferred = 2\n   };\n \n+  inline constexpr launch operator&(launch __x, launch __y)\n+  {\n+    return static_cast<launch>(\n+\tstatic_cast<int>(__x) & static_cast<int>(__y));\n+  }\n+\n+  inline constexpr launch operator|(launch __x, launch __y)\n+  {\n+    return static_cast<launch>(\n+\tstatic_cast<int>(__x) | static_cast<int>(__y));\n+  }\n+\n+  inline constexpr launch operator^(launch __x, launch __y)\n+  {\n+    return static_cast<launch>(\n+\tstatic_cast<int>(__x) ^ static_cast<int>(__y));\n+  }\n+\n+  inline constexpr launch operator~(launch __x)\n+  { return static_cast<launch>(~static_cast<int>(__x)); }\n+\n+  inline launch& operator&=(launch& __x, launch __y)\n+  { return __x = __x & __y; }\n+\n+  inline launch& operator|=(launch& __x, launch __y)\n+  { return __x = __x | __y; }\n+\n+  inline launch& operator^=(launch& __x, launch __y)\n+  { return __x = __x ^ __y; }\n+\n   /// Status code for futures\n-  enum class future_status \n+  enum class future_status\n   {\n     ready,\n     timeout,\n@@ -206,7 +235,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n \t// Return lvalue, future will add const or rvalue-reference\n-\t_Res& \n+\t_Res&\n \t_M_value() noexcept { return *static_cast<_Res*>(_M_addr()); }\n \n \tvoid\n@@ -484,7 +513,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     private:\n       _Res* \t\t\t_M_value_ptr;\n-      \n+\n       void _M_destroy() { delete this; }\n     };\n \n@@ -513,10 +542,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __basic_future(const __basic_future&) = delete;\n       __basic_future& operator=(const __basic_future&) = delete;\n \n-      bool \n+      bool\n       valid() const noexcept { return static_cast<bool>(_M_state); }\n \n-      void \n+      void\n       wait() const\n       {\n         _State_base::_S_check(_M_state);\n@@ -629,7 +658,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       shared_future<_Res> share();\n     };\n- \n+\n   /// Partial specialization for future<R&>\n   template<typename _Res>\n     class future<_Res&> : public __basic_future<_Res&>\n@@ -663,7 +692,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       /// Retrieving the value\n-      _Res& \n+      _Res&\n       get()\n       {\n         typename _Base_type::_Reset __reset(*this);\n@@ -706,7 +735,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       /// Retrieving the value\n-      void \n+      void\n       get()\n       {\n         typename _Base_type::_Reset __reset(*this);\n@@ -760,7 +789,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __rs;\n       }\n     };\n- \n+\n   /// Partial specialization for shared_future<R&>\n   template<typename _Res>\n     class shared_future<_Res&> : public __basic_future<_Res&>\n@@ -796,7 +825,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       /// Retrieving the value\n-      _Res& \n+      _Res&\n       get() { return this->_M_get_result()._M_get(); }\n     };\n \n@@ -835,7 +864,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       // Retrieving the value\n-      void \n+      void\n       get() { this->_M_get_result(); }\n     };\n \n@@ -880,7 +909,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef __future_base::_Result<_Res>\t\t\t_Res_type;\n       typedef typename __future_base::_Ptr<_Res_type>::type\t_Ptr_type;\n       template<typename, typename> friend class _State::_Setter;\n-      \n+\n       shared_ptr<_State>                        _M_future;\n       _Ptr_type                                 _M_storage;\n \n@@ -983,7 +1012,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { }\n \n       promise(promise&& __rhs) noexcept\n-      : _M_future(std::move(__rhs._M_future)), \n+      : _M_future(std::move(__rhs._M_future)),\n \t_M_storage(std::move(__rhs._M_storage))\n       { }\n \n@@ -1175,7 +1204,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n   template<typename _Res, typename... _Args>\n-    struct __future_base::_Task_state<_Res(_Args...)> \n+    struct __future_base::_Task_state<_Res(_Args...)>\n     : __future_base::_State_base\n     {\n       typedef _Res _Res_type;\n@@ -1334,7 +1363,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     public:\n       typedef _Res _Res_type;\n \n-      explicit \n+      explicit\n       _Async_state(std::function<_Res()>&& __fn)\n       : _M_result(new _Result<_Res>()), _M_fn(std::move(__fn)),\n \t_M_thread(mem_fn(&_Async_state::_M_do_run), this)\n@@ -1356,14 +1385,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       thread _M_thread;\n     };\n \n-  /// async \n+  /// async\n   template<typename _Fn, typename... _Args>\n     future<typename result_of<_Fn(_Args...)>::type>\n     async(launch __policy, _Fn&& __fn, _Args&&... __args)\n     {\n       typedef typename result_of<_Fn(_Args...)>::type result_type;\n       std::shared_ptr<__future_base::_State_base> __state;\n-      if (__policy == launch::async)\n+      if ((__policy & (launch::async|launch::deferred)) == launch::async)\n \t{\n \t  typedef typename __future_base::_Async_state<result_type> _State;\n \t  __state = std::make_shared<_State>(std::bind<result_type>(\n@@ -1384,7 +1413,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     __async_sfinae_helper<typename decay<_Fn>::type, _Fn, _Args...>::type\n     async(_Fn&& __fn, _Args&&... __args)\n     {\n-      return async(launch::any, std::forward<_Fn>(__fn),\n+      return async(launch::async|launch::deferred, std::forward<_Fn>(__fn),\n \t\t   std::forward<_Args>(__args)...);\n     }\n "}, {"sha": "94ae6f170d52f3d96fcd4217941d7f94ce7cdc98", "filename": "libstdc++-v3/src/future.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faa00511123f0b50467f6526d14f97f56716db94/libstdc%2B%2B-v3%2Fsrc%2Ffuture.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faa00511123f0b50467f6526d14f97f56716db94/libstdc%2B%2B-v3%2Fsrc%2Ffuture.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffuture.cc?ref=faa00511123f0b50467f6526d14f97f56716db94", "patch": "@@ -76,7 +76,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   future_error::~future_error() noexcept { }\n \n-  const char* \n+  const char*\n   future_error::what() const noexcept { return _M_code.message().c_str(); }\n \n #if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1) \\"}, {"sha": "fe4deeb52b96bb48e115ca06198a8fdbd59a1f8d", "filename": "libstdc++-v3/testsuite/30_threads/async/any.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faa00511123f0b50467f6526d14f97f56716db94/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2Fany.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faa00511123f0b50467f6526d14f97f56716db94/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2Fany.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2Fany.cc?ref=faa00511123f0b50467f6526d14f97f56716db94", "patch": "@@ -6,7 +6,7 @@\n // { dg-require-gthreads \"\" }\n // { dg-require-atomic-builtins \"\" }\n \n-// Copyright (C) 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -41,7 +41,7 @@ void test01()\n   int a = 1;\n   int b = 10;\n   int c = 100;\n-  future<int> f1 = async(launch::any, sum(), a, ref(b), cref(c));\n+  future<int> f1 = async(launch::async|launch::deferred, sum(), a, ref(b), cref(c));\n   future<int> f2 = async(sum(), a, ref(b), cref(c));\n \n   VERIFY( f1.valid() );"}, {"sha": "78fa2f70d76772ca7c85fa12f2ccc272a633396c", "filename": "libstdc++-v3/testsuite/30_threads/async/launch.cc", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faa00511123f0b50467f6526d14f97f56716db94/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2Flaunch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faa00511123f0b50467f6526d14f97f56716db94/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2Flaunch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2Flaunch.cc?ref=faa00511123f0b50467f6526d14f97f56716db94", "patch": "@@ -0,0 +1,94 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  using std::launch;\n+\n+  const launch none{};\n+  const launch both = launch::async|launch::deferred;\n+  const launch all = ~none;\n+\n+  VERIFY( (none & both) == none );\n+  VERIFY( (none | both) == both );\n+  VERIFY( (none ^ both) == both );\n+\n+  VERIFY( (none & all) == none );\n+  VERIFY( (none | all) == all );\n+  VERIFY( (none ^ all) == all );\n+\n+  VERIFY( (both & all) == both );\n+  VERIFY( (both | all) == all );\n+  VERIFY( (both ^ all) == ~both );\n+\n+  VERIFY( (none & launch::async) == none );\n+  VERIFY( (none & launch::deferred) == none );\n+\n+  VERIFY( (none | launch::async) == launch::async );\n+  VERIFY( (none | launch::deferred) == launch::deferred );\n+\n+  VERIFY( (none ^ launch::async) == launch::async );\n+  VERIFY( (none ^ launch::deferred) == launch::deferred );\n+\n+  VERIFY( (none & none) == none );\n+  VERIFY( (none | none) == none );\n+  VERIFY( (none ^ none) == none );\n+\n+  VERIFY( (both & both) == both );\n+  VERIFY( (both | both) == both );\n+  VERIFY( (both ^ both) == none );\n+\n+  VERIFY( (all & all) == all );\n+  VERIFY( (all | all) == all );\n+  VERIFY( (all ^ all) == none );\n+\n+  launch l = none;\n+\n+  l &= none;\n+  VERIFY( l == none );\n+  l |= none;\n+  VERIFY( l == none );\n+  l ^= none;\n+  VERIFY( l == none );\n+\n+  l &= both;\n+  VERIFY( l == none );\n+  l |= both;\n+  VERIFY( l == both );\n+  l ^= both;\n+  VERIFY( l == none );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "1daf01238a2322a3911f3b5ec8bfa2d291dc9350", "filename": "libstdc++-v3/testsuite/30_threads/async/sync.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faa00511123f0b50467f6526d14f97f56716db94/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2Fsync.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faa00511123f0b50467f6526d14f97f56716db94/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2Fsync.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2Fsync.cc?ref=faa00511123f0b50467f6526d14f97f56716db94", "patch": "@@ -6,7 +6,7 @@\n // { dg-require-gthreads \"\" }\n // { dg-require-atomic-builtins \"\" }\n \n-// Copyright (C) 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -41,7 +41,7 @@ void test01()\n   int a = 1;\n   int b = 10;\n   int c = 100;\n-  future<int> f1 = async(launch::sync, sum(), a, ref(b), cref(c));\n+  future<int> f1 = async(launch::deferred, sum(), a, ref(b), cref(c));\n \n   VERIFY( f1.valid() );\n   VERIFY( f1.get() == 111 );"}]}