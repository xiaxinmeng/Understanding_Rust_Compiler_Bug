{"sha": "61ce29b17fb82d4245d5ac288e2a2c921a3966ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFjZTI5YjE3ZmI4MmQ0MjQ1ZDVhYzI4OGUyYTJjOTIxYTM5NjZlYQ==", "commit": {"author": {"name": "Guilhem Lavaux", "email": "guilhem@kaffe.org", "date": "2004-07-17T08:46:14Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-07-17T08:46:14Z"}, "message": "2004-07-17  Guilhem Lavaux <guilhem@kaffe.org>\n\n\t* java/text/CollationElementIterator.java\n\t(text_decomposition): Changed type to RuleBasedCollator.CollationElement[]\n\t(setText): Use ArrayList instead of Vector.\n\nFrom-SVN: r84857", "tree": {"sha": "4da04c6d91bfb1315bab8d6026bdbfe0f74a7898", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4da04c6d91bfb1315bab8d6026bdbfe0f74a7898"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61ce29b17fb82d4245d5ac288e2a2c921a3966ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61ce29b17fb82d4245d5ac288e2a2c921a3966ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61ce29b17fb82d4245d5ac288e2a2c921a3966ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61ce29b17fb82d4245d5ac288e2a2c921a3966ea/comments", "author": null, "committer": null, "parents": [{"sha": "651ba822d019a847b5f503dfe5c173826508b472", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/651ba822d019a847b5f503dfe5c173826508b472", "html_url": "https://github.com/Rust-GCC/gccrs/commit/651ba822d019a847b5f503dfe5c173826508b472"}], "stats": {"total": 51, "additions": 28, "deletions": 23}, "files": [{"sha": "2648b5771d9a4da20a0537e441e67cd34f3bd432", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61ce29b17fb82d4245d5ac288e2a2c921a3966ea/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61ce29b17fb82d4245d5ac288e2a2c921a3966ea/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=61ce29b17fb82d4245d5ac288e2a2c921a3966ea", "patch": "@@ -1,3 +1,9 @@\n+2004-07-17  Guilhem Lavaux <guilhem@kaffe.org>\n+\n+\t* java/text/CollationElementIterator.java\n+\t(text_decomposition): Changed type to RuleBasedCollator.CollationElement[]\n+\t(setText): Use ArrayList instead of Vector.\n+\n 2004-07-17  Michael Koch  <konqueror@gmx.de>\n \n \t* java/nio/ByteOrder.java"}, {"sha": "90091e34884deeabbbd97e8b3dd12cf6f04357aa", "filename": "libjava/java/text/CollationElementIterator.java", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61ce29b17fb82d4245d5ac288e2a2c921a3966ea/libjava%2Fjava%2Ftext%2FCollationElementIterator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61ce29b17fb82d4245d5ac288e2a2c921a3966ea/libjava%2Fjava%2Ftext%2FCollationElementIterator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FCollationElementIterator.java?ref=61ce29b17fb82d4245d5ac288e2a2c921a3966ea", "patch": "@@ -38,7 +38,7 @@\n \n package java.text;\n \n-import java.util.Vector;\n+import java.util.ArrayList;\n \n /* Written using \"Java Class Libraries\", 2nd edition, plus online\n  * API docs for JDK 1.2 from http://www.javasoft.com.\n@@ -89,7 +89,7 @@\n    * Array containing the collation decomposition of the\n    * text given to the constructor.\n    */\n-  private Object[] text_decomposition;\n+  private RuleBasedCollator.CollationElement[] text_decomposition;\n \n   /**\n    * Array containing the index of the specified block.\n@@ -116,8 +116,7 @@ RuleBasedCollator.CollationElement nextBlock()\n     if (index >= text_decomposition.length)\n       return null;\n     \n-    RuleBasedCollator.CollationElement e =\n-      (RuleBasedCollator.CollationElement) text_decomposition[index];\n+    RuleBasedCollator.CollationElement e = text_decomposition[index];\n     \n     textIndex = text_indexes[index+1];\n \n@@ -132,8 +131,7 @@ RuleBasedCollator.CollationElement previousBlock()\n       return null;\n     \n     index--;\n-    RuleBasedCollator.CollationElement e =\n-      (RuleBasedCollator.CollationElement) text_decomposition[index];\n+    RuleBasedCollator.CollationElement e = text_decomposition[index];\n \n     textIndex = text_indexes[index+1];\n     \n@@ -247,8 +245,8 @@ public void setText(String text)\n \n     String work_text = text.intern();\n \n-    Vector v = new Vector();\n-    Vector vi = new Vector();\n+    ArrayList a_element = new ArrayList();\n+    ArrayList a_idx = new ArrayList();\n \n     // Build element collection ordered as they come in \"text\".\n     while (idx < work_text.length())\n@@ -301,8 +299,8 @@ public void setText(String text)\n \t\tRuleBasedCollator.CollationElement e =\n \t\t  collator.getDefaultAccentedElement (work_text.charAt (idx));\n \t\t\n-\t\tv.add (e);\n-\t\tvi.add (new Integer(idx_idx));\n+\t\ta_element.add (e);\n+\t\ta_idx.add (new Integer(idx_idx));\n \t\tidx++;\n \t\talreadyExpanded--;\n \t\tif (alreadyExpanded == 0)\n@@ -326,10 +324,10 @@ public void setText(String text)\n \t\t/* Don't forget to mark it as a special sequence so the\n \t\t * string can be ordered.\n \t\t */\n-\t\tv.add (RuleBasedCollator.SPECIAL_UNKNOWN_SEQ);\n-\t\tvi.add (i_ref);\n-\t\tv.add (e);\n-\t\tvi.add (i_ref);\n+\t\ta_element.add (RuleBasedCollator.SPECIAL_UNKNOWN_SEQ);\n+\t\ta_idx.add (i_ref);\n+\t\ta_element.add (e);\n+\t\ta_idx.add (i_ref);\n \t\tidx_idx++;\n \t\tidx++;\n \t      }\n@@ -346,8 +344,8 @@ public void setText(String text)\n \t    work_text = prefix.expansion\n \t      + work_text.substring (idx+prefix.key.length());\n \t    idx = 0;\n-\t    v.add (prefix);\n-\t    vi.add (new Integer(idx_idx));\n+\t    a_element.add (prefix);\n+\t    a_idx.add (new Integer(idx_idx));\n \t    if (alreadyExpanded == 0)\n \t      idxToMove = prefix.key.length();\n \t    alreadyExpanded += prefix.expansion.length()-prefix.key.length();\n@@ -357,8 +355,8 @@ public void setText(String text)\n \t    /* Third case: the simplest. We have got the prefix and it\n \t     * has not to be expanded.\n \t     */\n-\t    v.add (prefix);\n-\t    vi.add (new Integer(idx_idx));\n+\t    a_element.add (prefix);\n+\t    a_idx.add (new Integer(idx_idx));\n \t    idx += prefix.key.length();\n \t    /* If the sequence is in an expansion, we must decrease the\n \t     * counter.\n@@ -376,13 +374,14 @@ public void setText(String text)\n \t  }\n       }\n     \n-    text_decomposition = v.toArray();\n-    text_indexes = new int[vi.size()+1];\n-    for (int i = 0; i < vi.size(); i++) \n+    text_decomposition = (RuleBasedCollator.CollationElement[])\n+\t   a_element.toArray(new RuleBasedCollator.CollationElement[a_element.size()]);\n+    text_indexes = new int[a_idx.size()+1];\n+    for (int i = 0; i < a_idx.size(); i++) \n       {\n-\ttext_indexes[i] = ((Integer)vi.elementAt(i)).intValue();\n+\ttext_indexes[i] = ((Integer)a_idx.get(i)).intValue();\n       }\n-    text_indexes[vi.size()] = text.length();\n+    text_indexes[a_idx.size()] = text.length();\n   }\n \n   /**"}]}