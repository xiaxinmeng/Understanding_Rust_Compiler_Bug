{"sha": "1c1f2d29a05680416a17b64a9ee231e0e3ba2846", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWMxZjJkMjlhMDU2ODA0MTZhMTdiNjRhOWVlMjMxZTBlM2JhMjg0Ng==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1995-04-28T19:46:40Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1995-04-28T19:46:40Z"}, "message": "Tweak line numbers in output\n\nFrom-SVN: r9540", "tree": {"sha": "e658b16cd152f4916a49a396001e3cd58120439b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e658b16cd152f4916a49a396001e3cd58120439b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c1f2d29a05680416a17b64a9ee231e0e3ba2846", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c1f2d29a05680416a17b64a9ee231e0e3ba2846", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c1f2d29a05680416a17b64a9ee231e0e3ba2846", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c1f2d29a05680416a17b64a9ee231e0e3ba2846/comments", "author": null, "committer": null, "parents": [{"sha": "6e4e5f1b49a7b8263ce32178c2abfc2f79c7d077", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e4e5f1b49a7b8263ce32178c2abfc2f79c7d077", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e4e5f1b49a7b8263ce32178c2abfc2f79c7d077"}], "stats": {"total": 27, "additions": 9, "deletions": 18}, "files": [{"sha": "9ab7adf46354bca3b7d11ab87272e21335f785b3", "filename": "gcc/integrate.c", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c1f2d29a05680416a17b64a9ee231e0e3ba2846/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c1f2d29a05680416a17b64a9ee231e0e3ba2846/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=1c1f2d29a05680416a17b64a9ee231e0e3ba2846", "patch": "@@ -1226,14 +1226,6 @@ expand_inline_function (fndecl, parms, target, ignore, type, structure_value_add\n   /* Make a fresh binding contour that we can easily remove.  */\n   pushlevel (0);\n   expand_start_bindings (0);\n-  if (GET_CODE (parm_insns) == NOTE\n-      && NOTE_LINE_NUMBER (parm_insns) > 0)\n-    {\n-      rtx note = emit_note (NOTE_SOURCE_FILE (parm_insns),\n-\t\t\t    NOTE_LINE_NUMBER (parm_insns));\n-      if (note)\n-\tRTX_INTEGRATED_P (note) = 1;\n-    }\n \n   /* Expand the function arguments.  Do this first so that any\n      new registers get created before we allocate the maps.  */\n@@ -1252,16 +1244,6 @@ expand_inline_function (fndecl, parms, target, ignore, type, structure_value_add\n       enum machine_mode mode = TYPE_MODE (TREE_TYPE (formal));\n       int invisiref = 0;\n \n-      /* Make sure this formal has some correspondence in the users code\n-       * before emitting any line notes for it.  */\n-      if (DECL_SOURCE_LINE (formal))\n-\t{\n-\t  rtx note = emit_note (DECL_SOURCE_FILE (formal),\n-\t\t\t\tDECL_SOURCE_LINE (formal));\n-\t  if (note)\n-\t    RTX_INTEGRATED_P (note) = 1;\n-\t}\n-\n       arg_trees[i] = arg;\n       loc = RTVEC_ELT (arg_vector, i);\n \n@@ -1384,6 +1366,15 @@ expand_inline_function (fndecl, parms, target, ignore, type, structure_value_add\n   if (FUNCTION_FLAGS (header) & FUNCTION_FLAGS_NEEDS_CONTEXT)\n     static_chain_value = lookup_static_chain (fndecl);\n \n+  if (GET_CODE (parm_insns) == NOTE\n+      && NOTE_LINE_NUMBER (parm_insns) > 0)\n+    {\n+      rtx note = emit_note (NOTE_SOURCE_FILE (parm_insns),\n+\t\t\t    NOTE_LINE_NUMBER (parm_insns));\n+      if (note)\n+\tRTX_INTEGRATED_P (note) = 1;\n+    }\n+\n   /* Process each argument.  For each, set up things so that the function's\n      reference to the argument will refer to the argument being passed.\n      We only replace REG with REG here.  Any simplifications are done"}]}