{"sha": "99917bc339e5055880aa4e3423739907040fa121", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk5MTdiYzMzOWU1MDU1ODgwYWE0ZTM0MjM3Mzk5MDcwNDBmYTEyMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2005-05-11T13:08:50Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2005-05-11T13:08:50Z"}, "message": "* config/mips/24k.md: Remove trailing whitespace.\n\nFrom-SVN: r99578", "tree": {"sha": "a8f9fa036db5196b0f51bdbde7e5aeffdb01aad6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8f9fa036db5196b0f51bdbde7e5aeffdb01aad6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99917bc339e5055880aa4e3423739907040fa121", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99917bc339e5055880aa4e3423739907040fa121", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99917bc339e5055880aa4e3423739907040fa121", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99917bc339e5055880aa4e3423739907040fa121/comments", "author": null, "committer": null, "parents": [{"sha": "95177e176017ee6996f7915dbd005569e3da2090", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95177e176017ee6996f7915dbd005569e3da2090", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95177e176017ee6996f7915dbd005569e3da2090"}], "stats": {"total": 134, "additions": 69, "deletions": 65}, "files": [{"sha": "811ee3e257830cb862f1dc89ad59c3e050600140", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99917bc339e5055880aa4e3423739907040fa121/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99917bc339e5055880aa4e3423739907040fa121/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=99917bc339e5055880aa4e3423739907040fa121", "patch": "@@ -1,3 +1,7 @@\n+2005-05-11  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/24k.md: Remove trailing whitespace.\n+\n 2005-05-11  David Ung  <davidu@mips.com>\n \n \t* config/mips/mips.md (type): Add imul3."}, {"sha": "c558fa3c7a9d228b33ca72606ebff616596986aa", "filename": "gcc/config/mips/24k.md", "status": "modified", "additions": 65, "deletions": 65, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99917bc339e5055880aa4e3423739907040fa121/gcc%2Fconfig%2Fmips%2F24k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99917bc339e5055880aa4e3423739907040fa121/gcc%2Fconfig%2Fmips%2F24k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F24k.md?ref=99917bc339e5055880aa4e3423739907040fa121", "patch": "@@ -1,5 +1,5 @@\n ;; DFA-based pipeline descriptions for MIPS Technologies 24K core.\n-;; Contributed by Chao-ying Fu (fu@mips.com), Nigel Stephens (nigel@mips.com) \n+;; Contributed by Chao-ying Fu (fu@mips.com), Nigel Stephens (nigel@mips.com)\n ;;   and David Ung (davidu@mips.com)\n ;;\n ;; The 24K is a single-issue processor with a half-clocked fpu.\n@@ -41,123 +41,123 @@\n ;; --------------------------------------------------------------\n \n ;; 1. Loads: lb, lbu, lh, lhu, ll, lw, lwl, lwr, lwpc, lwxs\n-(define_insn_reservation \"r24k_int_load\" 2 \n+(define_insn_reservation \"r24k_int_load\" 2\n   (and (eq_attr \"cpu\" \"24k,24kx\")\n        (eq_attr \"type\" \"load\"))\n   \"r24k_iss+r24k_ixu_arith\")\n \n \n ;; 2. Arithmetic: add, addi, addiu, addiupc, addu, and, andi, clo, clz,\n-;;    ext, ins, lui, movn, movz, nor, or, ori, rotr, rotrv, seb, seh, sll, \n-;;    sllv, slt, slti, sltiu, sltu, sra, srav, srl, srlv, sub, subu, wsbh, \n+;;    ext, ins, lui, movn, movz, nor, or, ori, rotr, rotrv, seb, seh, sll,\n+;;    sllv, slt, slti, sltiu, sltu, sra, srav, srl, srlv, sub, subu, wsbh,\n ;;    xor, xori\n-;; (movn/movz is not matched, we'll need to split condmov to \n+;; (movn/movz is not matched, we'll need to split condmov to\n ;;  differentiate between integer/float moves)\n-(define_insn_reservation \"r24k_int_arith\" 1 \n+(define_insn_reservation \"r24k_int_arith\" 1\n   (and (eq_attr \"cpu\" \"24k,24kx\")\n-       (eq_attr \"type\" \"arith,const,nop,shift,slt\")) \n+       (eq_attr \"type\" \"arith,const,nop,shift,slt\"))\n   \"r24k_iss+r24k_ixu_arith\")\n \n \n ;; 3. Links: bgezal, bgezall, bltzal, bltzall, jal, jalr, jalx\n ;; 3a. jr/jalr consumer\n-(define_insn_reservation \"r24k_int_jump\" 1 \n+(define_insn_reservation \"r24k_int_jump\" 1\n   (and (eq_attr \"cpu\" \"24k,24kx\")\n        (eq_attr \"type\" \"call,jump\"))\n   \"r24k_iss+r24k_ixu_arith\")\n \n ;; 3b. branch consumer\n-(define_insn_reservation \"r24k_int_branch\" 1 \n+(define_insn_reservation \"r24k_int_branch\" 1\n   (and (eq_attr \"cpu\" \"24k,24kx\")\n        (eq_attr \"type\" \"branch\"))\n   \"r24k_iss+r24k_ixu_arith\")\n \n \n ;; 4. MDU: fully pipelined multiplier\n ;; mult - delivers result to hi/lo in 1 cycle (pipelined)\n-(define_insn_reservation \"r24k_int_mult\" 1 \n+(define_insn_reservation \"r24k_int_mult\" 1\n   (and (eq_attr \"cpu\" \"24k,24kx\")\n-       (eq_attr \"type\" \"imul\")) \n+       (eq_attr \"type\" \"imul\"))\n   \"r24k_iss+(r24k_mul3a|r24k_mul3b|r24k_mul3c)\")\n \n ;; madd, msub - delivers result to hi/lo in 1 cycle (pipelined)\n-(define_insn_reservation \"r24k_int_madd\" 1 \n+(define_insn_reservation \"r24k_int_madd\" 1\n   (and (eq_attr \"cpu\" \"24k,24kx\")\n-       (eq_attr \"type\" \"imadd\")) \n+       (eq_attr \"type\" \"imadd\"))\n   \"r24k_iss+(r24k_mul3a|r24k_mul3b|r24k_mul3c)\")\n \n-;; mul - delivers result to gpr in 5 cycles \n-(define_insn_reservation \"r24k_int_mul3\" 5 \n+;; mul - delivers result to gpr in 5 cycles\n+(define_insn_reservation \"r24k_int_mul3\" 5\n   (and (eq_attr \"cpu\" \"24k,24kx\")\n-       (eq_attr \"type\" \"imul3\")) \n+       (eq_attr \"type\" \"imul3\"))\n   \"r24k_iss+(r24k_mul3a|r24k_mul3b|r24k_mul3c)*5\")\n \n ;; mfhi, mflo, mflhxu - deliver result to gpr in 5 cycles\n-(define_insn_reservation \"r24k_int_mfhilo\" 5 \n+(define_insn_reservation \"r24k_int_mfhilo\" 5\n   (and (eq_attr \"cpu\" \"24k,24kx\")\n-       (eq_attr \"type\" \"mfhilo\")) \n+       (eq_attr \"type\" \"mfhilo\"))\n   \"r24k_iss+(r24k_mul3a|r24k_mul3b|r24k_mul3c)\")\n \n ;; mthi, mtlo, mtlhx - deliver result to hi/lo, thence madd, handled as bypass\n-(define_insn_reservation \"r24k_int_mthilo\" 1 \n+(define_insn_reservation \"r24k_int_mthilo\" 1\n   (and (eq_attr \"cpu\" \"24k,24kx\")\n-       (eq_attr \"type\" \"mthilo\")) \n+       (eq_attr \"type\" \"mthilo\"))\n   \"r24k_iss+(r24k_mul3a|r24k_mul3b|r24k_mul3c)\")\n \n-;; div - default to 36 cycles for 32bit operands.  Faster for 24bit, 16bit and \n+;; div - default to 36 cycles for 32bit operands.  Faster for 24bit, 16bit and\n ;; 8bit, but is tricky to identify.\n-(define_insn_reservation \"r24k_int_div\" 36 \n+(define_insn_reservation \"r24k_int_div\" 36\n   (and (eq_attr \"cpu\" \"24k,24kx\")\n-       (eq_attr \"type\" \"idiv\")) \n+       (eq_attr \"type\" \"idiv\"))\n   \"r24k_iss+(r24k_mul3a+r24k_mul3b+r24k_mul3c)*36\")\n \n \n ;; 5. Cop: cfc1, di, ei, mfc0, mtc0\n ;; (Disabled until we add proper cop0 support)\n-;;(define_insn_reservation \"r24k_int_cop\" 3 \n+;;(define_insn_reservation \"r24k_int_cop\" 3\n ;;  (and (eq_attr \"cpu\" \"24k,24kx\")\n ;;       (eq_attr \"type\" \"cop0\"))\n ;;  \"r24k_iss+r24k_ixu_arith\")\n \n \n ;; 6. Store\n-(define_insn_reservation \"r24k_int_store\" 1 \n+(define_insn_reservation \"r24k_int_store\" 1\n   (and (eq_attr \"cpu\" \"24k,24kx\")\n        (and (eq_attr \"type\" \"store\")\n \t    (eq_attr \"mode\" \"!unknown\")))\n   \"r24k_iss+r24k_ixu_arith\")\n \n ;; 6.1 Special case - matches the cprestore pattern which don't set the mode\n-;;     attrib. This avoids being set as r24k_int_store and have it checked \n+;;     attrib. This avoids being set as r24k_int_store and have it checked\n ;;     against store_data_bypass_p, which would then fail because cprestore\n ;;     does not have a normal SET pattern.\n-(define_insn_reservation \"r24k_unknown_store\" 1 \n+(define_insn_reservation \"r24k_unknown_store\" 1\n   (and (eq_attr \"cpu\" \"24k,24kx\")\n        (and (eq_attr \"type\" \"store\")\n \t    (eq_attr \"mode\" \"unknown\")))\n   \"r24k_iss+r24k_ixu_arith\")\n \n \n ;; 7. Multiple instructions\n-(define_insn_reservation \"r24k_int_multi\" 1 \n+(define_insn_reservation \"r24k_int_multi\" 1\n   (and (eq_attr \"cpu\" \"24k,24kx\")\n-       (eq_attr \"type\" \"multi\")) \n+       (eq_attr \"type\" \"multi\"))\n   \"r24k_iss+r24k_ixu_arith+r24k_fpu_arith+(r24k_mul3a+r24k_mul3b+r24k_mul3c)\")\n \n \n-;; 8. Unknowns - Currently these include blockage, consttable and alignment \n-;;    rtls. They do not really affect scheduling latency, (blockage affects \n+;; 8. Unknowns - Currently these include blockage, consttable and alignment\n+;;    rtls. They do not really affect scheduling latency, (blockage affects\n ;;    scheduling via log links, but not used here).\n-(define_insn_reservation \"r24k_int_unknown\" 0 \n+(define_insn_reservation \"r24k_int_unknown\" 0\n   (and (eq_attr \"cpu\" \"24k,24kx\")\n        (eq_attr \"type\" \"unknown\"))\n   \"r24k_iss\")\n \n \n ;; 9. Prefetch\n-(define_insn_reservation \"r24k_int_prefetch\" 1 \n+(define_insn_reservation \"r24k_int_prefetch\" 1\n   (and (eq_attr \"cpu\" \"24k,24kx\")\n-       (eq_attr \"type\" \"prefetch,prefetchx\")) \n+       (eq_attr \"type\" \"prefetch,prefetchx\"))\n   \"r24k_iss+r24k_ixu_arith\")\n \n \n@@ -189,8 +189,8 @@\n (define_bypass 6 \"r24k_int_mul3\" \"r24k_int_prefetch\")\n \n ;; mfhilo->next use  : 5 cycles (default)\n-;; mfhilo->l/s base  : 6 cycles \n-;; mfhilo->prefetch  : 6 cycles \n+;; mfhilo->l/s base  : 6 cycles\n+;; mfhilo->prefetch  : 6 cycles\n ;; mthilo->madd/msub : 2 cycle (only for mthi/lo not mfhi/lo)\n (define_bypass 6 \"r24k_int_mfhilo\" \"r24k_int_load\")\n (define_bypass 6 \"r24k_int_mfhilo\" \"r24k_int_store\" \"!store_data_bypass_p\")\n@@ -219,7 +219,7 @@\n ;; The 24k is a single issue cpu, and the fpu runs at half clock speed,\n ;; so each fpu instruction ties up the shared instruction scheduler for\n ;; 1 cycle, and the fpu scheduler for 2 cycles.\n-;; \n+;;\n ;; These timings are therefore twice the values in the 24K manual,\n ;; which are quoted in fpu clocks.\n ;;\n@@ -229,65 +229,65 @@\n (define_reservation \"r24k_fpu_iss\"\t\"r24k_iss+(r24k_fpu_arith*2)\")\n \n ;; fadd, fabs, fneg\n-(define_insn_reservation \"r24k_fadd\" 8 \n+(define_insn_reservation \"r24k_fadd\" 8\n   (and (eq_attr \"cpu\" \"24k\")\n        (eq_attr \"type\" \"fadd,fabs,fneg\"))\n   \"r24k_fpu_iss\")\n \n ;; fmove, fcmove\n-(define_insn_reservation \"r24k_fmove\" 8 \n+(define_insn_reservation \"r24k_fmove\" 8\n   (and (eq_attr \"cpu\" \"24k\")\n        (eq_attr \"type\" \"fmove,condmove\"))\n   \"r24k_fpu_iss\")\n \n ;; fload\n-(define_insn_reservation \"r24k_fload\" 6 \n+(define_insn_reservation \"r24k_fload\" 6\n   (and (eq_attr \"cpu\" \"24k\")\n        (eq_attr \"type\" \"fpload,fpidxload\"))\n   \"r24k_fpu_iss\")\n \n ;; fstore\n-(define_insn_reservation \"r24k_fstore\" 2 \n+(define_insn_reservation \"r24k_fstore\" 2\n   (and (eq_attr \"cpu\" \"24k\")\n        (eq_attr \"type\" \"fpstore\"))\n   \"r24k_fpu_iss\")\n \n ;; fmul, fmadd\n-(define_insn_reservation \"r24k_fmul_sf\" 8 \n+(define_insn_reservation \"r24k_fmul_sf\" 8\n   (and (eq_attr \"cpu\" \"24k\")\n        (and (eq_attr \"type\" \"fmul,fmadd\")\n \t    (eq_attr \"mode\" \"SF\")))\n   \"r24k_fpu_iss\")\n \n-(define_insn_reservation \"r24k_fmul_df\" 10 \n+(define_insn_reservation \"r24k_fmul_df\" 10\n   (and (eq_attr \"cpu\" \"24k\")\n        (and (eq_attr \"type\" \"fmul,fmadd\")\n \t    (eq_attr \"mode\" \"DF\")))\n   \"r24k_fpu_iss,(r24k_fpu_arith*2)\")\n \n \n ;; fdiv, fsqrt, frsqrt\n-(define_insn_reservation \"r24k_fdiv_sf\" 34 \n+(define_insn_reservation \"r24k_fdiv_sf\" 34\n   (and (eq_attr \"cpu\" \"24k\")\n        (and (eq_attr \"type\" \"fdiv,fsqrt,frsqrt\")\n \t    (eq_attr \"mode\" \"SF\")))\n   \"r24k_fpu_iss,(r24k_fpu_arith*26)\")\n \n-(define_insn_reservation \"r24k_fdiv_df\" 64 \n+(define_insn_reservation \"r24k_fdiv_df\" 64\n   (and (eq_attr \"cpu\" \"24k\")\n        (and (eq_attr \"type\" \"fdiv,fsqrt\")\n \t    (eq_attr \"mode\" \"DF\")))\n   \"r24k_fpu_iss,(r24k_fpu_arith*56)\")\n \n ;; frsqrt\n-(define_insn_reservation \"r24k_frsqrt_df\" 70 \n+(define_insn_reservation \"r24k_frsqrt_df\" 70\n   (and (eq_attr \"cpu\" \"24k\")\n        (and (eq_attr \"type\" \"frsqrt\")\n \t    (eq_attr \"mode\" \"DF\")))\n   \"r24k_fpu_iss,(r24k_fpu_arith*60)\")\n \n ;; fcmp\n-(define_insn_reservation \"r24k_fcmp\" 4 \n+(define_insn_reservation \"r24k_fcmp\" 4\n   (and (eq_attr \"cpu\" \"24k\")\n        (eq_attr \"type\" \"fcmp\"))\n   \"r24k_fpu_iss\")\n@@ -296,28 +296,28 @@\n (define_bypass 2 \"r24k_fcmp\" \"r24k_fmove\")\n \n ;; fcvt (cvt.d.s, cvt.[sd].[wl])\n-(define_insn_reservation \"r24k_fcvt_i2f_s2d\" 8 \n+(define_insn_reservation \"r24k_fcvt_i2f_s2d\" 8\n   (and (eq_attr \"cpu\" \"24k\")\n        (and (eq_attr \"type\" \"fcvt\")\n \t    (eq_attr \"cnv_mode\" \"I2S,I2D,S2D\")))\n   \"r24k_fpu_iss\")\n \n ;; fcvt (cvt.s.d)\n-(define_insn_reservation \"r24k_fcvt_s2d\" 12 \n+(define_insn_reservation \"r24k_fcvt_s2d\" 12\n   (and (eq_attr \"cpu\" \"24k\")\n        (and (eq_attr \"type\" \"fcvt\")\n \t    (eq_attr \"cnv_mode\" \"D2S\")))\n   \"r24k_fpu_iss\")\n \n ;; fcvt (cvt.[wl].[sd], etc)\n-(define_insn_reservation \"r24k_fcvt_f2i\" 10 \n+(define_insn_reservation \"r24k_fcvt_f2i\" 10\n   (and (eq_attr \"cpu\" \"24k\")\n        (and (eq_attr \"type\" \"fcvt\")\n \t    (eq_attr \"cnv_mode\" \"S2I,D2I\")))\n   \"r24k_fpu_iss\")\n \n ;; fxfer (mfc1, mfhc1, mtc1, mthc1)\n-(define_insn_reservation \"r24k_fxfer\" 4 \n+(define_insn_reservation \"r24k_fxfer\" 4\n   (and (eq_attr \"cpu\" \"24k\")\n        (eq_attr \"type\" \"xfer\"))\n   \"r24k_fpu_iss\")\n@@ -345,65 +345,65 @@\n (define_reservation \"r24kx_fpu_iss\"\t\"r24k_iss+r24k_fpu_arith\")\n \n ;; fadd, fabs, fneg\n-(define_insn_reservation \"r24kx_fadd\" 4 \n+(define_insn_reservation \"r24kx_fadd\" 4\n   (and (eq_attr \"cpu\" \"24kx\")\n        (eq_attr \"type\" \"fadd,fabs,fneg\"))\n   \"r24kx_fpu_iss\")\n \n ;; fmove, fcmove\n-(define_insn_reservation \"r24kx_fmove\" 4 \n+(define_insn_reservation \"r24kx_fmove\" 4\n   (and (eq_attr \"cpu\" \"24kx\")\n        (eq_attr \"type\" \"fmove,condmove\"))\n   \"r24kx_fpu_iss\")\n \n ;; fload\n-(define_insn_reservation \"r24kx_fload\" 3 \n+(define_insn_reservation \"r24kx_fload\" 3\n   (and (eq_attr \"cpu\" \"24kx\")\n        (eq_attr \"type\" \"fpload,fpidxload\"))\n   \"r24kx_fpu_iss\")\n \n ;; fstore\n-(define_insn_reservation \"r24kx_fstore\" 1 \n+(define_insn_reservation \"r24kx_fstore\" 1\n   (and (eq_attr \"cpu\" \"24kx\")\n        (eq_attr \"type\" \"fpstore\"))\n   \"r24kx_fpu_iss\")\n \n ;; fmul, fmadd\n-(define_insn_reservation \"r24kx_fmul_sf\" 4 \n+(define_insn_reservation \"r24kx_fmul_sf\" 4\n   (and (eq_attr \"cpu\" \"24kx\")\n        (and (eq_attr \"type\" \"fmul,fmadd\")\n \t    (eq_attr \"mode\" \"SF\")))\n   \"r24kx_fpu_iss\")\n \n-(define_insn_reservation \"r24kx_fmul_df\" 5 \n+(define_insn_reservation \"r24kx_fmul_df\" 5\n   (and (eq_attr \"cpu\" \"24kx\")\n        (and (eq_attr \"type\" \"fmul,fmadd\")\n \t    (eq_attr \"mode\" \"DF\")))\n   \"r24kx_fpu_iss,r24k_fpu_arith\")\n \n \n ;; fdiv, fsqrt, frsqrt\n-(define_insn_reservation \"r24kx_fdiv_sf\" 17 \n+(define_insn_reservation \"r24kx_fdiv_sf\" 17\n   (and (eq_attr \"cpu\" \"24kx\")\n        (and (eq_attr \"type\" \"fdiv,fsqrt,frsqrt\")\n \t    (eq_attr \"mode\" \"SF\")))\n   \"r24kx_fpu_iss,(r24k_fpu_arith*13)\")\n \n-(define_insn_reservation \"r24kx_fdiv_df\" 32 \n+(define_insn_reservation \"r24kx_fdiv_df\" 32\n   (and (eq_attr \"cpu\" \"24kx\")\n        (and (eq_attr \"type\" \"fdiv,fsqrt\")\n \t    (eq_attr \"mode\" \"DF\")))\n   \"r24kx_fpu_iss,(r24k_fpu_arith*28)\")\n \n ;; frsqrt\n-(define_insn_reservation \"r24kx_frsqrt_df\" 35 \n+(define_insn_reservation \"r24kx_frsqrt_df\" 35\n   (and (eq_attr \"cpu\" \"24kx\")\n        (and (eq_attr \"type\" \"frsqrt\")\n \t    (eq_attr \"mode\" \"DF\")))\n   \"r24kx_fpu_iss,(r24k_fpu_arith*30)\")\n \n ;; fcmp\n-(define_insn_reservation \"r24kx_fcmp\" 2 \n+(define_insn_reservation \"r24kx_fcmp\" 2\n   (and (eq_attr \"cpu\" \"24kx\")\n        (eq_attr \"type\" \"fcmp\"))\n   \"r24kx_fpu_iss\")\n@@ -412,28 +412,28 @@\n (define_bypass 1 \"r24kx_fcmp\" \"r24kx_fmove\")\n \n ;; fcvt (cvt.d.s, cvt.[sd].[wl])\n-(define_insn_reservation \"r24kx_fcvt_i2f_s2d\" 4 \n+(define_insn_reservation \"r24kx_fcvt_i2f_s2d\" 4\n   (and (eq_attr \"cpu\" \"24kx\")\n        (and (eq_attr \"type\" \"fcvt\")\n \t    (eq_attr \"cnv_mode\" \"I2S,I2D,S2D\")))\n   \"r24kx_fpu_iss\")\n \n ;; fcvt (cvt.s.d)\n-(define_insn_reservation \"r24kx_fcvt_s2d\" 6 \n+(define_insn_reservation \"r24kx_fcvt_s2d\" 6\n   (and (eq_attr \"cpu\" \"24kx\")\n        (and (eq_attr \"type\" \"fcvt\")\n \t    (eq_attr \"cnv_mode\" \"D2S\")))\n   \"r24kx_fpu_iss\")\n \n ;; fcvt (cvt.[wl].[sd], etc)\n-(define_insn_reservation \"r24kx_fcvt_f2i\" 5 \n+(define_insn_reservation \"r24kx_fcvt_f2i\" 5\n   (and (eq_attr \"cpu\" \"24kx\")\n        (and (eq_attr \"type\" \"fcvt\")\n \t    (eq_attr \"cnv_mode\" \"S2I,D2I\")))\n   \"r24kx_fpu_iss\")\n \n ;; fxfer (mfc1, mfhc1, mtc1, mthc1)\n-(define_insn_reservation \"r24kx_fxfer\" 2 \n+(define_insn_reservation \"r24kx_fxfer\" 2\n   (and (eq_attr \"cpu\" \"24kx\")\n        (eq_attr \"type\" \"xfer\"))\n   \"r24kx_fpu_iss\")"}]}