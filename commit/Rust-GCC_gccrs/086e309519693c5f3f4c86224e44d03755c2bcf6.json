{"sha": "086e309519693c5f3f4c86224e44d03755c2bcf6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg2ZTMwOTUxOTY5M2M1ZjNmNGM4NjIyNGU0NGQwMzc1NWMyYmNmNg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2004-06-28T16:10:55Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-06-28T16:10:55Z"}, "message": "cp-tree.h (VAR_OR_FUNCTION_DECL_CHECK, [...]): Use appropriate TREE_CHECK macro.:qOR_FUNCTION_DECL_CHECK,\n\n         * cp-tree.h (VAR_OR_FUNCTION_DECL_CHECK,\n        VAR_FUNCTION_OR_PARM_DECL_CHECK, RECORD_OR_UNION_TYPE_CHECK,\n        BOUND_TEMPLATE_TEMPLATE_PARM_TYPE_CHECK): Use appropriate\n        TREE_CHECK macro.:qOR_FUNCTION_DECL_CHECK,\n        * tree.h (tree_check_failed): Make varadic.\n        (tree_not_check_failed): New prototype.\n        (tree_check2_failed, tree_check3_failed,\n        tree_check4_failed, tree_check5_failed): Remove.\n        (TREE_CHECK, TREE_CHECK2, TREE_CHECK3, TREE_CHECK4,\n        TREE_CHECK5): Adjust.\n        (TREE_NOT_CHECK, TREE_NOT_CHECK2, TREE_NOT_CHECK3, TREE_NOT_CHECK4,\n        TREE_NOT_CHECK5): New.\n        (TREE_VEC_ELT_CHECK, PHI_NODE_ELT_CHECK, TREE_OPERAND_CHECK_CODE,\n        TREE_RTL_OPERAND_CHECK): Adjust.\n        * tree.c (tree_check_failed): Make varadic.\n        (tree_not_check_failed): New.\n        (tree_check2_failed, tree_check3_failed,\n        tree_check4_failed, tree_check5_failed): Remove.\ncp:\n        * cp-tree.h (VAR_OR_FUNCTION_DECL_CHECK,\n        VAR_FUNCTION_OR_PARM_DECL_CHECK, RECORD_OR_UNION_TYPE_CHECK,\n        BOUND_TEMPLATE_TEMPLATE_PARM_TYPE_CHECK): Use appropriate\n        TREE_CHECK macro.\n\nFrom-SVN: r83796", "tree": {"sha": "623394af53f572eb2919135f8e2d76eccdb1c8f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/623394af53f572eb2919135f8e2d76eccdb1c8f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/086e309519693c5f3f4c86224e44d03755c2bcf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/086e309519693c5f3f4c86224e44d03755c2bcf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/086e309519693c5f3f4c86224e44d03755c2bcf6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/086e309519693c5f3f4c86224e44d03755c2bcf6/comments", "author": null, "committer": null, "parents": [{"sha": "00a5aa9c30c9eeb2cfb3b691b88dbee1fbbe5a4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00a5aa9c30c9eeb2cfb3b691b88dbee1fbbe5a4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00a5aa9c30c9eeb2cfb3b691b88dbee1fbbe5a4b"}], "stats": {"total": 314, "additions": 169, "deletions": 145}, "files": [{"sha": "2058e1595637e5d6303b7ce6fff1e21c97024afa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/086e309519693c5f3f4c86224e44d03755c2bcf6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/086e309519693c5f3f4c86224e44d03755c2bcf6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=086e309519693c5f3f4c86224e44d03755c2bcf6", "patch": "@@ -1,3 +1,20 @@\n+2004-06-28  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* tree.h (tree_check_failed): Make varadic.\n+\t(tree_not_check_failed): New prototype.\n+\t(tree_check2_failed, tree_check3_failed,\n+\ttree_check4_failed, tree_check5_failed): Remove.\n+\t(TREE_CHECK, TREE_CHECK2, TREE_CHECK3, TREE_CHECK4,\n+\tTREE_CHECK5): Adjust.\n+\t(TREE_NOT_CHECK, TREE_NOT_CHECK2, TREE_NOT_CHECK3, TREE_NOT_CHECK4, \n+\tTREE_NOT_CHECK5): New.\n+\t(TREE_VEC_ELT_CHECK, PHI_NODE_ELT_CHECK, TREE_OPERAND_CHECK_CODE,\n+\tTREE_RTL_OPERAND_CHECK): Adjust.\n+\t* tree.c (tree_check_failed): Make varadic.\n+\t(tree_not_check_failed): New.\n+\t(tree_check2_failed, tree_check3_failed,\n+\ttree_check4_failed, tree_check5_failed): Remove.\n+\n 2004-06-28  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* combine.c (can_combine_p): Do not prevent building insns that use"}, {"sha": "ad782f26c60526277b5f6c2678d1f5ad3ab27b3f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/086e309519693c5f3f4c86224e44d03755c2bcf6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/086e309519693c5f3f4c86224e44d03755c2bcf6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=086e309519693c5f3f4c86224e44d03755c2bcf6", "patch": "@@ -1,3 +1,10 @@\n+2004-06-28  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* cp-tree.h (VAR_OR_FUNCTION_DECL_CHECK,\n+\tVAR_FUNCTION_OR_PARM_DECL_CHECK, RECORD_OR_UNION_TYPE_CHECK,\n+\tBOUND_TEMPLATE_TEMPLATE_PARM_TYPE_CHECK): Use appropriate\n+\tTREE_CHECK macro.\n+\n 2004-06-28  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* cp-tree.h (struct deferred_access): Move to ..."}, {"sha": "8dfe109893db6f054e62b6ef0c3476e306c219fb", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 12, "deletions": 54, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/086e309519693c5f3f4c86224e44d03755c2bcf6/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/086e309519693c5f3f4c86224e44d03755c2bcf6/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=086e309519693c5f3f4c86224e44d03755c2bcf6", "patch": "@@ -160,62 +160,20 @@ struct diagnostic_context;\n \n /* Language-specific tree checkers.  */\n \n-#if defined ENABLE_TREE_CHECKING && (GCC_VERSION >= 2007)\n+#define VAR_OR_FUNCTION_DECL_CHECK(NODE) \\\n+  TREE_CHECK2(NODE,VAR_DECL,FUNCTION_DECL)\n \n-#define VAR_OR_FUNCTION_DECL_CHECK(NODE) __extension__\t\t\\\n-({  const tree __t = (NODE);\t\t\t\t\t\\\n-    enum tree_code const __c = TREE_CODE(__t);\t\t\t\\\n-    if (__c != VAR_DECL && __c != FUNCTION_DECL)\t\t\\\n-      tree_check_failed (__t, VAR_DECL, __FILE__, __LINE__,\t\\\n-\t\t\t __FUNCTION__);\t\t\t\t\\\n-    __t; })\n-\n-#define VAR_FUNCTION_OR_PARM_DECL_CHECK(NODE) __extension__\t\\\n-({  const tree __t = (NODE);\t\t\t\t\t\\\n-    enum tree_code const __c = TREE_CODE(__t);\t\t\t\\\n-    if (__c != VAR_DECL\t\t\t\t\t\t\\\n-\t&& __c != FUNCTION_DECL\t\t\t\t\t\\\n-        && __c != PARM_DECL)\t\t\t\t\t\\\n-      tree_check_failed (__t, VAR_DECL, __FILE__, __LINE__,\t\\\n-\t\t\t __FUNCTION__);\t\t\t\t\\\n-    __t; })\n-\n-#define VAR_TEMPL_TYPE_OR_FUNCTION_DECL_CHECK(NODE) __extension__ \\\n-({  const tree __t = (NODE);\t\t\t\t\t\\\n-    enum tree_code const __c = TREE_CODE(__t);\t\t\t\\\n-    if (__c != VAR_DECL\t\t\t\t\t\t\\\n-\t&& __c != FUNCTION_DECL\t\t\t\t\t\\\n-\t&& __c != TYPE_DECL\t\t\t\t\t\\\n-\t&& __c != TEMPLATE_DECL)\t\t\t\t\\\n-      tree_check_failed (__t, VAR_DECL, __FILE__, __LINE__,\t\\\n-\t\t\t __FUNCTION__);\t\t\t\t\\\n-    __t; })\n-\n-#define RECORD_OR_UNION_TYPE_CHECK(NODE) __extension__\t\t\\\n-({  const tree __t = (NODE);\t\t\t\t\t\\\n-    enum tree_code const __c = TREE_CODE(__t);\t\t\t\\\n-    if (__c != RECORD_TYPE && __c != UNION_TYPE)\t\t\\\n-      tree_check_failed (__t, RECORD_TYPE, __FILE__, __LINE__,\t\\\n-\t\t\t __FUNCTION__);\t\t\t\t\\\n-    __t; })\n-\n-#define BOUND_TEMPLATE_TEMPLATE_PARM_TYPE_CHECK(NODE) __extension__ \\\n-({  const tree __t = (NODE);\t\t\t\t\t\\\n-    enum tree_code const __c = TREE_CODE(__t);\t\t\t\\\n-    if (__c != BOUND_TEMPLATE_TEMPLATE_PARM)\t\t\t\\\n-      tree_check_failed (__t, BOUND_TEMPLATE_TEMPLATE_PARM,\t\\\n-\t\t\t __FILE__, __LINE__, __FUNCTION__);\t\\\n-    __t; })\n-\n-#else /* not ENABLE_TREE_CHECKING, or not gcc */\n-\n-#define VAR_OR_FUNCTION_DECL_CHECK(NODE)\t\t(NODE)\n-#define VAR_FUNCTION_OR_PARM_DECL_CHECK(NODE)   \t(NODE)\n-#define VAR_TEMPL_TYPE_OR_FUNCTION_DECL_CHECK(NODE)\t(NODE)\n-#define RECORD_OR_UNION_TYPE_CHECK(NODE)\t\t(NODE)\n-#define BOUND_TEMPLATE_TEMPLATE_PARM_TYPE_CHECK(NODE)\t(NODE)\n+#define VAR_FUNCTION_OR_PARM_DECL_CHECK(NODE) \\\n+  TREE_CHECK3(NODE,VAR_DECL,FUNCTION_DECL,PARM_DECL)\n \n-#endif\n+#define VAR_TEMPL_TYPE_OR_FUNCTION_DECL_CHECK(NODE) \\\n+  TREE_CHECK4(NODE,VAR_DECL,FUNCTION_DECL,TYPE_DECL,TEMPLATE_DECL)\n+\n+#define RECORD_OR_UNION_TYPE_CHECK(NODE) \\\n+  TREE_CHECK2(NODE,RECORD_TYPE,UNION_TYPE)\n+\n+#define BOUND_TEMPLATE_TEMPLATE_PARM_TYPE_CHECK(NODE) \\\n+  TREE_CHECK(NODE,BOUND_TEMPLATE_TEMPLATE_PARM)\n \n \f\n /* Language-dependent contents of an identifier.  */"}, {"sha": "ba95e1546066404e5b3c13bfd9f8d2dfb9f1c449", "filename": "gcc/tree.c", "status": "modified", "additions": 63, "deletions": 58, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/086e309519693c5f3f4c86224e44d03755c2bcf6/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/086e309519693c5f3f4c86224e44d03755c2bcf6/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=086e309519693c5f3f4c86224e44d03755c2bcf6", "patch": "@@ -5108,75 +5108,80 @@ get_set_constructor_bytes (tree init, unsigned char *buffer, int wd_size)\n \f\n #if defined ENABLE_TREE_CHECKING && (GCC_VERSION >= 2007)\n \n-/* Complain that the tree code of NODE does not match the expected CODE.\n-   FILE, LINE, and FUNCTION are of the caller.  */\n+/* Complain that the tree code of NODE does not match the expected 0\n+   terminated list of trailing codes. FILE, LINE, and FUNCTION are of\n+   the caller.  */\n \n void\n-tree_check_failed (const tree node, enum tree_code code, const char *file,\n-\t\t   int line, const char *function)\n-{\n+tree_check_failed (const tree node, const char *file,\n+\t\t   int line, const char *function, ...)\n+{\n+  va_list args;\n+  char *buffer;\n+  unsigned length = 0;\n+  int code;\n+\n+  va_start (args, function);\n+  while ((code = va_arg (args, int)))\n+    length += 4 + strlen (tree_code_name[code]);\n+  va_end (args);\n+  va_start (args, function);\n+  buffer = alloca (length);\n+  length = 0;\n+  while ((code = va_arg (args, int)))\n+    {\n+      if (length)\n+\t{\n+\t  strcpy (buffer + length, \" or \");\n+\t  length += 4;\n+\t}\n+      strcpy (buffer + length, tree_code_name[code]);\n+      length += strlen (tree_code_name[code]);\n+    }\n+  va_end (args);\n+  \n   internal_error (\"tree check: expected %s, have %s in %s, at %s:%d\",\n-\t\t  tree_code_name[code], tree_code_name[TREE_CODE (node)],\n-\t\t  function, trim_filename (file), line);\n-}\n-\n-/* Similar to above except that we allowed the code to be one of two\n-   different codes.  */\n-\n-void\n-tree_check2_failed (const tree node, enum tree_code code1,\n-\t\t    enum tree_code code2, const char *file,\n-\t\t    int line, const char *function)\n-{\n-  internal_error (\"tree check: expected %s or %s, have %s in %s, at %s:%d\",\n-\t\t  tree_code_name[code1], tree_code_name[code2],\n-\t\t  tree_code_name[TREE_CODE (node)],\n+\t\t  buffer, tree_code_name[TREE_CODE (node)],\n \t\t  function, trim_filename (file), line);\n }\n \n-/* Likewise for three different codes.  */\n+/* Complain that the tree code of NODE does match the expected 0\n+   terminated list of trailing codes. FILE, LINE, and FUNCTION are of\n+   the caller.  */\n \n void\n-tree_check3_failed (const tree node, enum tree_code code1,\n-\t\t    enum tree_code code2, enum tree_code code3,\n-\t\t    const char *file, int line, const char *function)\n-{\n-  internal_error (\"tree check: expected %s, %s or %s; have %s in %s, at %s:%d\",\n-\t\t  tree_code_name[code1], tree_code_name[code2],\n-\t\t  tree_code_name[code3], tree_code_name[TREE_CODE (node)],\n+tree_not_check_failed (const tree node, const char *file,\n+\t\t       int line, const char *function, ...)\n+{\n+  va_list args;\n+  char *buffer;\n+  unsigned length = 0;\n+  int code;\n+\n+  va_start (args, function);\n+  while ((code = va_arg (args, int)))\n+    length += 4 + strlen (tree_code_name[code]);\n+  va_end (args);\n+  va_start (args, function);\n+  buffer = alloca (length);\n+  length = 0;\n+  while ((code = va_arg (args, int)))\n+    {\n+      if (length)\n+\t{\n+\t  strcpy (buffer + length, \" or \");\n+\t  length += 4;\n+\t}\n+      strcpy (buffer + length, tree_code_name[code]);\n+      length += strlen (tree_code_name[code]);\n+    }\n+  va_end (args);\n+  \n+  internal_error (\"tree check: expected none of %s, have %s in %s, at %s:%d\",\n+\t\t  buffer, tree_code_name[TREE_CODE (node)],\n \t\t  function, trim_filename (file), line);\n }\n \n-/* ... and for four different codes.  */\n-\n-void\n-tree_check4_failed (const tree node, enum tree_code code1,\n-\t\t    enum tree_code code2, enum tree_code code3,\n-\t\t    enum tree_code code4, const char *file, int line,\n-\t\t    const char *function)\n-{\n-  internal_error\n-    (\"tree check: expected %s, %s, %s or %s; have %s in %s, at %s:%d\",\n-     tree_code_name[code1], tree_code_name[code2], tree_code_name[code3],\n-     tree_code_name[code4], tree_code_name[TREE_CODE (node)], function,\n-     trim_filename (file), line);\n-}\n-\n-/* ... and for five different codes.  */\n-\n-void\n-tree_check5_failed (const tree node, enum tree_code code1,\n-\t\t    enum tree_code code2, enum tree_code code3,\n-\t\t    enum tree_code code4, enum tree_code code5,\n-\t\t    const char *file, int line, const char *function)\n-{\n-  internal_error\n-    (\"tree check: expected %s, %s, %s, %s or %s; have %s in %s, at %s:%d\",\n-     tree_code_name[code1], tree_code_name[code2], tree_code_name[code3],\n-     tree_code_name[code4], tree_code_name[code5],\n-     tree_code_name[TREE_CODE (node)], function, trim_filename (file), line);\n-}\n-\n /* Similar to tree_check_failed, except that we check for a class of tree\n    code, given in CL.  */\n "}, {"sha": "a9a450d2bd8026dddb0c1347dcf6828d7d2ed55b", "filename": "gcc/tree.h", "status": "modified", "additions": 70, "deletions": 33, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/086e309519693c5f3f4c86224e44d03755c2bcf6/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/086e309519693c5f3f4c86224e44d03755c2bcf6/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=086e309519693c5f3f4c86224e44d03755c2bcf6", "patch": "@@ -342,24 +342,49 @@ struct tree_common GTY(())\n #define TREE_CHECK(T, CODE) __extension__\t\t\t\t\\\n ({  const tree __t = (T);\t\t\t\t\t\t\\\n     if (TREE_CODE (__t) != (CODE))\t\t\t\t\t\\\n-      tree_check_failed (__t, (CODE), __FILE__, __LINE__, __FUNCTION__); \\\n+      tree_check_failed (__t, __FILE__, __LINE__, __FUNCTION__, \t\\\n+\t\t\t (CODE), 0);\t\t\t\t\t\\\n+    __t; })\n+\n+#define TREE_NOT_CHECK(T, CODE) __extension__\t\t\t\t\\\n+({  const tree __t = (T);\t\t\t\t\t\t\\\n+    if (TREE_CODE (__t) == (CODE))\t\t\t\t\t\\\n+      tree_not_check_failed (__t, __FILE__, __LINE__, __FUNCTION__,\t\\\n+\t\t\t     (CODE), 0);\t\t\t\t\\\n     __t; })\n \n #define TREE_CHECK2(T, CODE1, CODE2) __extension__\t\t\t\\\n ({  const tree __t = (T);\t\t\t\t\t\t\\\n     if (TREE_CODE (__t) != (CODE1)\t\t\t\t\t\\\n \t&& TREE_CODE (__t) != (CODE2))\t\t\t\t\t\\\n-      tree_check2_failed (__t, (CODE1), (CODE2), __FILE__, __LINE__,\t\\\n-\t\t\t  __FUNCTION__);\t\t\t\t\\\n+      tree_check_failed (__t, __FILE__, __LINE__, __FUNCTION__,\t\t\\\n+ \t\t\t (CODE1), (CODE2), 0);\t\t\t\t\\\n+    __t; })\n+\n+#define TREE_NOT_CHECK2(T, CODE1, CODE2) __extension__\t\t\t\\\n+({  const tree __t = (T);\t\t\t\t\t\t\\\n+    if (TREE_CODE (__t) == (CODE1)\t\t\t\t\t\\\n+\t|| TREE_CODE (__t) == (CODE2))\t\t\t\t\t\\\n+      tree_not_check_failed (__t, __FILE__, __LINE__, __FUNCTION__,\t\\\n+\t\t\t     (CODE1), (CODE2), 0);\t\t\t\\\n     __t; })\n \n #define TREE_CHECK3(T, CODE1, CODE2, CODE3) __extension__\t\t\\\n ({  const tree __t = (T);\t\t\t\t\t\t\\\n     if (TREE_CODE (__t) != (CODE1)\t\t\t\t\t\\\n \t&& TREE_CODE (__t) != (CODE2)\t\t\t\t\t\\\n \t&& TREE_CODE (__t) != (CODE3))\t\t\t\t\t\\\n-      tree_check3_failed (__t, (CODE1), (CODE2), (CODE3), __FILE__,\t\\\n-\t\t\t  __LINE__, __FUNCTION__);\t\t\t\\\n+      tree_check_failed (__t, __FILE__, __LINE__, __FUNCTION__,\t\t\\\n+\t\t\t     (CODE1), (CODE2), (CODE3), 0);\t\t\\\n+    __t; })\n+\n+#define TREE_NOT_CHECK3(T, CODE1, CODE2, CODE3) __extension__\t\t\\\n+({  const tree __t = (T);\t\t\t\t\t\t\\\n+    if (TREE_CODE (__t) == (CODE1)\t\t\t\t\t\\\n+\t|| TREE_CODE (__t) == (CODE2)\t\t\t\t\t\\\n+\t|| TREE_CODE (__t) == (CODE3))\t\t\t\t\t\\\n+      tree_not_check_failed (__t, __FILE__, __LINE__, __FUNCTION__,\t\\\n+\t\t\t     (CODE1), (CODE2), (CODE3), 0);\t\t\\\n     __t; })\n \n #define TREE_CHECK4(T, CODE1, CODE2, CODE3, CODE4) __extension__\t\\\n@@ -368,8 +393,18 @@ struct tree_common GTY(())\n \t&& TREE_CODE (__t) != (CODE2)\t\t\t\t\t\\\n \t&& TREE_CODE (__t) != (CODE3)\t\t\t\t\t\\\n \t&& TREE_CODE (__t) != (CODE4))\t\t\t\t\t\\\n-      tree_check4_failed (__t, (CODE1), (CODE2), (CODE3), (CODE4),\t\\\n-\t\t\t   __FILE__, __LINE__, __FUNCTION__);\t\t\\\n+      tree_check_failed (__t, __FILE__, __LINE__, __FUNCTION__,\t\t\\\n+\t\t\t     (CODE1), (CODE2), (CODE3), (CODE4), 0);\t\\\n+    __t; })\n+\n+#define NON_TREE_CHECK4(T, CODE1, CODE2, CODE3, CODE4) __extension__\t\\\n+({  const tree __t = (T);\t\t\t\t\t\t\\\n+    if (TREE_CODE (__t) == (CODE1)\t\t\t\t\t\\\n+\t|| TREE_CODE (__t) == (CODE2)\t\t\t\t\t\\\n+\t|| TREE_CODE (__t) == (CODE3)\t\t\t\t\t\\\n+\t|| TREE_CODE (__t) == (CODE4))\t\t\t\t\t\\\n+      tree_not_check_failed (__t, __FILE__, __LINE__, __FUNCTION__,\t\\\n+\t\t\t     (CODE1), (CODE2), (CODE3), (CODE4), 0);\t\\\n     __t; })\n \n #define TREE_CHECK5(T, CODE1, CODE2, CODE3, CODE4, CODE5) __extension__\t\\\n@@ -379,8 +414,19 @@ struct tree_common GTY(())\n \t&& TREE_CODE (__t) != (CODE3)\t\t\t\t\t\\\n \t&& TREE_CODE (__t) != (CODE4)\t\t\t\t\t\\\n \t&& TREE_CODE (__t) != (CODE5))\t\t\t\t\t\\\n-      tree_check5_failed (__t, (CODE1), (CODE2), (CODE3), (CODE4),\t\\\n-\t\t\t  (CODE5), __FILE__, __LINE__, __FUNCTION__);\t\\\n+      tree_check_failed (__t, __FILE__, __LINE__, __FUNCTION__,\t\t\\\n+\t\t\t     (CODE1), (CODE2), (CODE3), (CODE4), (CODE5), 0);\\\n+    __t; })\n+\n+#define TREE_NOT_CHECK5(T, CODE1, CODE2, CODE3, CODE4, CODE5) __extension__ \\\n+({  const tree __t = (T);\t\t\t\t\t\t\\\n+    if (TREE_CODE (__t) == (CODE1)\t\t\t\t\t\\\n+\t|| TREE_CODE (__t) == (CODE2)\t\t\t\t\t\\\n+\t|| TREE_CODE (__t) == (CODE3)\t\t\t\t\t\\\n+\t|| TREE_CODE (__t) == (CODE4)\t\t\t\t\t\\\n+\t|| TREE_CODE (__t) == (CODE5))\t\t\t\t\t\\\n+      tree_not_check_failed (__t, __FILE__, __LINE__, __FUNCTION__,\t\\\n+\t\t\t     (CODE1), (CODE2), (CODE3), (CODE4), (CODE5), 0);\\\n     __t; })\n \n #define TREE_CLASS_CHECK(T, CLASS) __extension__\t\t\t\\\n@@ -412,8 +458,8 @@ struct tree_common GTY(())\n (*({const tree __t = (T);\t\t\t\t\t\t\\\n     const int __i = (I);\t\t\t\t\t\t\\\n     if (TREE_CODE (__t) != TREE_VEC)\t\t\t\t\t\\\n-      tree_check_failed (__t, TREE_VEC,\t\t\t\t\t\\\n-\t\t\t __FILE__, __LINE__, __FUNCTION__);\t\t\\\n+      tree_check_failed (__t, __FILE__, __LINE__, __FUNCTION__,\t\t\\\n+  \t\t\t TREE_VEC, 0);\t\t\t\t\t\\\n     if (__i < 0 || __i >= __t->vec.length)\t\t\t\t\\\n       tree_vec_elt_check_failed (__i, __t->vec.length,\t\t\t\\\n \t\t\t\t __FILE__, __LINE__, __FUNCTION__);\t\\\n@@ -423,8 +469,8 @@ struct tree_common GTY(())\n (*({const tree __t = t;\t\t\t\t\t\t\t\\\n     const int __i = (i);\t\t\t\t\t\t\\\n     if (TREE_CODE (__t) != PHI_NODE)\t\t\t\t\t\\\n-      tree_check_failed (__t, PHI_NODE,\t\t\t\t\t\\\n-\t\t\t __FILE__, __LINE__, __FUNCTION__);\t\t\\\n+      tree_check_failed (__t, __FILE__, __LINE__, __FUNCTION__,  \t\\\n+\t\t\t PHI_NODE, 0);\t\t\t\t\t\\\n     if (__i < 0 || __i >= __t->phi.capacity)\t\t\t\t\\\n       phi_node_elt_check_failed (__i, __t->phi.num_args,\t\t\\\n \t\t\t\t __FILE__, __LINE__, __FUNCTION__);\t\\\n@@ -443,7 +489,7 @@ struct tree_common GTY(())\n (*({const tree __t = (T);\t\t\t\t\t\t\\\n     const int __i = (I);\t\t\t\t\t\t\\\n     if (TREE_CODE (__t) != CODE)\t\t\t\t\t\\\n-      tree_check_failed (__t, CODE, __FILE__, __LINE__, __FUNCTION__);\t\\\n+      tree_check_failed (__t, __FILE__, __LINE__, __FUNCTION__, (CODE), 0);\\\n     if (__i < 0 || __i >= TREE_CODE_LENGTH (CODE))\t\t\t\\\n       tree_operand_check_failed (__i, (CODE),\t\t\t\t\\\n \t\t\t\t __FILE__, __LINE__, __FUNCTION__);\t\\\n@@ -454,30 +500,16 @@ struct tree_common GTY(())\n  ({const tree __t = (T);\t\t\t\t\t\t\\\n     const int __i = (I);\t\t\t\t\t\t\\\n     if (TREE_CODE (__t) != (CODE))\t\t\t\t\t\\\n-      tree_check_failed (__t, (CODE), __FILE__, __LINE__, __FUNCTION__); \\\n+      tree_check_failed (__t, __FILE__, __LINE__, __FUNCTION__, (CODE), 0); \\\n     if (__i < 0 || __i >= TREE_CODE_LENGTH ((CODE)))\t\t\t\\\n       tree_operand_check_failed (__i, (CODE),\t\t\t\t\\\n \t\t\t\t __FILE__, __LINE__, __FUNCTION__);\t\\\n     &__t->exp.operands[__i]; }))\n \n-extern void tree_check_failed (const tree, enum tree_code,\n-\t\t\t       const char *, int, const char *)\n-    ATTRIBUTE_NORETURN;\n-extern void tree_check2_failed (const tree, enum tree_code, enum tree_code,\n-\t\t\t       const char *, int, const char *)\n-    ATTRIBUTE_NORETURN;\n-extern void tree_check3_failed (const tree, enum tree_code, enum tree_code,\n-\t\t\t\tenum tree_code, const char *, int,\n-\t\t\t\tconst char *)\n-    ATTRIBUTE_NORETURN;\n-extern void tree_check4_failed (const tree, enum tree_code, enum tree_code,\n-\t\t\t\tenum tree_code, enum tree_code,\n-\t\t\t\tconst char *, int, const char *)\n-    ATTRIBUTE_NORETURN;\n-extern void tree_check5_failed (const tree, enum tree_code, enum tree_code,\n-\t\t\t\tenum tree_code, enum tree_code, enum tree_code,\n-\t\t\t\tconst char *, int, const char *)\n-    ATTRIBUTE_NORETURN;\n+extern void tree_check_failed (const tree, const char *, int, const char *,\n+\t\t\t       ...) ATTRIBUTE_NORETURN;\n+extern void tree_not_check_failed (const tree, const char *, int, const char *,\n+\t\t\t\t   ...) ATTRIBUTE_NORETURN;\n extern void tree_class_check_failed (const tree, int,\n \t\t\t\t     const char *, int, const char *)\n     ATTRIBUTE_NORETURN;\n@@ -494,10 +526,15 @@ extern void tree_operand_check_failed (int, enum tree_code,\n #else /* not ENABLE_TREE_CHECKING, or not gcc */\n \n #define TREE_CHECK(T, CODE)\t\t\t(T)\n+#define TREE_NOT_CHECK(T, CODE)\t\t\t(T)\n #define TREE_CHECK2(T, CODE1, CODE2)\t\t(T)\n+#define TREE_NOT_CHECK2(T, CODE1, CODE2)\t(T)\n #define TREE_CHECK3(T, CODE1, CODE2, CODE3)\t(T)\n+#define TREE_NOT_CHECK3(T, CODE1, CODE2, CODE3)\t(T)\n #define TREE_CHECK4(T, CODE1, CODE2, CODE3, CODE4) (T)\n+#define TREE_NOT_CHECK4(T, CODE1, CODE2, CODE3, CODE4) (T)\n #define TREE_CHECK5(T, CODE1, CODE2, CODE3, CODE4, CODE5) (T)\n+#define TREE_NOT_CHECK5(T, CODE1, CODE2, CODE3, CODE4, CODE5) (T)\n #define TREE_CLASS_CHECK(T, CODE)\t\t(T)\n #define EXPR_CHECK(T)\t\t\t\t(T)\n #define NON_TYPE_CHECK(T)\t\t\t(T)"}]}