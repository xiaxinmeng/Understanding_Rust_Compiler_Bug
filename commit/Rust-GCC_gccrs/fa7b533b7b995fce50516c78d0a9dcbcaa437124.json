{"sha": "fa7b533b7b995fce50516c78d0a9dcbcaa437124", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE3YjUzM2I3Yjk5NWZjZTUwNTE2Yzc4ZDBhOWRjYmNhYTQzNzEyNA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2002-11-14T21:58:38Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2002-11-14T21:58:38Z"}, "message": "tree.c (tree_vec_elt_check_failed): New function.\n\n        * tree.c (tree_vec_elt_check_failed): New function.\n        * tree.h (TREE_VEC_ELT_CHECK): New checking macro.\n        (TREE_VEC_ELT): Use it.\n\n        * tree-inline.c (optimize_inline_calls): Don't copy a\n        zero-length vector.\ncp:\n        * search.c (dfs_push_decls): Do not try to reorder elements\n        3..n of method_vec if method_vec has only two elements.\n        Reverse order of two tests to avoid accessing unallocated\n        memory.\n\nFrom-SVN: r59114", "tree": {"sha": "30bf88ca9d454be99af8fdef0fb816fd40bdf399", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30bf88ca9d454be99af8fdef0fb816fd40bdf399"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa7b533b7b995fce50516c78d0a9dcbcaa437124", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa7b533b7b995fce50516c78d0a9dcbcaa437124", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa7b533b7b995fce50516c78d0a9dcbcaa437124", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa7b533b7b995fce50516c78d0a9dcbcaa437124/comments", "author": null, "committer": null, "parents": [{"sha": "9fc910d1ea18fde1720eaa8277d4ce6158772426", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fc910d1ea18fde1720eaa8277d4ce6158772426", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fc910d1ea18fde1720eaa8277d4ce6158772426"}], "stats": {"total": 60, "additions": 55, "deletions": 5}, "files": [{"sha": "ad002e1d05e212f2b734056a371e33242668cdc1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa7b533b7b995fce50516c78d0a9dcbcaa437124/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa7b533b7b995fce50516c78d0a9dcbcaa437124/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa7b533b7b995fce50516c78d0a9dcbcaa437124", "patch": "@@ -1,3 +1,12 @@\n+2002-11-14  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* tree.c (tree_vec_elt_check_failed): New function.\n+\t* tree.h (TREE_VEC_ELT_CHECK): New checking macro.\n+\t(TREE_VEC_ELT): Use it.\n+\n+\t* tree-inline.c (optimize_inline_calls): Don't copy a\n+\tzero-length vector.\n+\n 2002-11-14  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* diagnostic.c (sorry): Don't repeat \"sorry, unimplemented\" text."}, {"sha": "ad568b0d44e4b3a34e6c824b647cdb4ded8ee65e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa7b533b7b995fce50516c78d0a9dcbcaa437124/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa7b533b7b995fce50516c78d0a9dcbcaa437124/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fa7b533b7b995fce50516c78d0a9dcbcaa437124", "patch": "@@ -1,3 +1,10 @@\n+2002-11-14  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* search.c (dfs_push_decls): Do not try to reorder elements\n+\t3..n of method_vec if method_vec has only two elements.\n+\tReverse order of two tests to avoid accessing unallocated\n+\tmemory.\n+\n 2002-11-14  Mark Mitchell  <mark@codesourcery.com>\n \n \t* class.c (dfs_find_final_overrider): Adjust so that the most"}, {"sha": "a4025ac1fa24de8dbedf738780eb530456fbd2df", "filename": "gcc/cp/search.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa7b533b7b995fce50516c78d0a9dcbcaa437124/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa7b533b7b995fce50516c78d0a9dcbcaa437124/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=fa7b533b7b995fce50516c78d0a9dcbcaa437124", "patch": "@@ -2544,7 +2544,8 @@ dfs_push_decls (binfo, data)\n \t  \n       method_vec = (CLASS_TYPE_P (type) \n \t\t    ? CLASSTYPE_METHOD_VEC (type) : NULL_TREE);\n-      if (method_vec)\n+\n+      if (method_vec && TREE_VEC_LENGTH (method_vec) >= 3)\n \t{\n \t  tree *methods;\n \t  tree *end;\n@@ -2553,7 +2554,7 @@ dfs_push_decls (binfo, data)\n \t  end = TREE_VEC_END (method_vec);\n \n \t  for (methods = &TREE_VEC_ELT (method_vec, 2);\n-\t       *methods && methods != end;\n+\t       methods < end && *methods;\n \t       methods++)\n \t    setup_class_bindings (DECL_NAME (OVL_CURRENT (*methods)), \n \t\t\t\t  /*type_binding_p=*/0);"}, {"sha": "362ddd18b574890223f9a9d06221e662f07bb030", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa7b533b7b995fce50516c78d0a9dcbcaa437124/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa7b533b7b995fce50516c78d0a9dcbcaa437124/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=fa7b533b7b995fce50516c78d0a9dcbcaa437124", "patch": "@@ -1367,8 +1367,9 @@ optimize_inline_calls (fn)\n     {\n       tree ifn = make_tree_vec (VARRAY_ACTIVE_SIZE (id.inlined_fns));\n \n-      memcpy (&TREE_VEC_ELT (ifn, 0), &VARRAY_TREE (id.inlined_fns, 0),\n-\t      VARRAY_ACTIVE_SIZE (id.inlined_fns) * sizeof (tree));\n+      if (VARRAY_ACTIVE_SIZE (id.inlined_fns))\n+\tmemcpy (&TREE_VEC_ELT (ifn, 0), &VARRAY_TREE (id.inlined_fns, 0),\n+\t\tVARRAY_ACTIVE_SIZE (id.inlined_fns) * sizeof (tree));\n       DECL_INLINED_FNS (fn) = ifn;\n     }\n }"}, {"sha": "1bac17cb312567a7511edd4af9afc4793f83ee70", "filename": "gcc/tree.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa7b533b7b995fce50516c78d0a9dcbcaa437124/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa7b533b7b995fce50516c78d0a9dcbcaa437124/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=fa7b533b7b995fce50516c78d0a9dcbcaa437124", "patch": "@@ -4665,6 +4665,22 @@ tree_class_check_failed (node, cl, file, line, function)\n      tree_code_name[TREE_CODE (node)], function, trim_filename (file), line);\n }\n \n+/* Similar to above, except that the check is for the bounds of a TREE_VEC's\n+   (dynamically sized) vector.  */\n+\n+void\n+tree_vec_elt_check_failed (idx, len, file, line, function)\n+     int idx;\n+     int len;\n+     const char *file;\n+     int line;\n+     const char *function;\n+{\n+  internal_error\n+    (\"tree check: accessed elt %d of tree_vec with %d elts in %s, at %s:%d\",\n+     idx + 1, len, function, trim_filename (file), line);\n+}\n+\n #endif /* ENABLE_TREE_CHECKING */\n \f\n /* For a new vector type node T, build the information necessary for"}, {"sha": "8e8b168583d611f9bdaeb5a8fd3a5f8597966296", "filename": "gcc/tree.h", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa7b533b7b995fce50516c78d0a9dcbcaa437124/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa7b533b7b995fce50516c78d0a9dcbcaa437124/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=fa7b533b7b995fce50516c78d0a9dcbcaa437124", "patch": "@@ -317,19 +317,34 @@ struct tree_common GTY(())\n \t\t\t       __FUNCTION__);\t\t\t\t\\\n     __t; })\n \n+#define TREE_VEC_ELT_CHECK(t, i) __extension__\t\t\t\t\\\n+(*({const tree __t = t;\t\t\t\t\t\t\t\\\n+    const int __i = (i);\t\t\t\t\t\t\\\n+    if (TREE_CODE (__t) != TREE_VEC)\t\t\t\t\t\\\n+      tree_check_failed (__t, TREE_VEC,\t\t\t\t\t\\\n+\t\t\t __FILE__, __LINE__, __FUNCTION__);\t\t\\\n+    if (__i < 0 || __i >= __t->vec.length)\t\t\t\t\\\n+      tree_vec_elt_check_failed (__i, __t->vec.length,\t\t\t\\\n+\t\t\t\t __FILE__, __LINE__, __FUNCTION__);\t\\\n+    &__t->vec.a[__i]; }))\n+\n extern void tree_check_failed PARAMS ((const tree, enum tree_code,\n \t\t\t\t       const char *, int, const char *))\n     ATTRIBUTE_NORETURN;\n extern void tree_class_check_failed PARAMS ((const tree, int,\n \t\t\t\t\t     const char *, int, const char *))\n     ATTRIBUTE_NORETURN;\n+extern void tree_vec_elt_check_failed PARAMS ((int, int, const char *,\n+\t\t\t\t\t       int, const char *))\n+    ATTRIBUTE_NORETURN;\n \n #else /* not ENABLE_TREE_CHECKING, or not gcc */\n \n #define TREE_CHECK(t, code)\t\t(t)\n #define TREE_CLASS_CHECK(t, code)\t(t)\n #define CST_OR_CONSTRUCTOR_CHECK(t)\t(t)\n #define EXPR_CHECK(t)\t\t\t(t)\n+#define TREE_VEC_ELT_CHECK(t, i)\t((t)->vec.a[i])\n \n #endif\n \n@@ -810,10 +825,11 @@ struct tree_list GTY(())\n \n /* In a TREE_VEC node.  */\n #define TREE_VEC_LENGTH(NODE) (TREE_VEC_CHECK (NODE)->vec.length)\n-#define TREE_VEC_ELT(NODE,I) (TREE_VEC_CHECK (NODE)->vec.a[I])\n #define TREE_VEC_END(NODE) \\\n   ((void) TREE_VEC_CHECK (NODE), &((NODE)->vec.a[(NODE)->vec.length]))\n \n+#define TREE_VEC_ELT(NODE,I) TREE_VEC_ELT_CHECK (NODE, I)\n+\n struct tree_vec GTY(())\n {\n   struct tree_common common;"}]}