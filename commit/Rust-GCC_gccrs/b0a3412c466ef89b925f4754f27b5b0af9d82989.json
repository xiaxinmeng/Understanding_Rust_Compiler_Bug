{"sha": "b0a3412c466ef89b925f4754f27b5b0af9d82989", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBhMzQxMmM0NjZlZjg5YjkyNWY0NzU0ZjI3YjViMGFmOWQ4Mjk4OQ==", "commit": {"author": {"name": "Glen Nakamura", "email": "glen@imodulo.com", "date": "2003-04-07T22:57:41Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-04-07T22:57:41Z"}, "message": "re PR rtl-optimization/8634 (incorrect code for inlining of memcpy under -O2)\n\n        PR opt/8634\n        * explow.c (maybe_set_unchanging): Don't flag non-static const\n        aggregate type initializers with RTX_UNCHANGING_P.\n\nFrom-SVN: r65352", "tree": {"sha": "5c9af0f6f2b13994e8a18e00191c5bf0c49f5ad6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c9af0f6f2b13994e8a18e00191c5bf0c49f5ad6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0a3412c466ef89b925f4754f27b5b0af9d82989", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0a3412c466ef89b925f4754f27b5b0af9d82989", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0a3412c466ef89b925f4754f27b5b0af9d82989", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0a3412c466ef89b925f4754f27b5b0af9d82989/comments", "author": null, "committer": null, "parents": [{"sha": "c5a1e3d69af23fefe755f18ece4d76542766aa46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5a1e3d69af23fefe755f18ece4d76542766aa46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5a1e3d69af23fefe755f18ece4d76542766aa46"}], "stats": {"total": 18, "additions": 17, "deletions": 1}, "files": [{"sha": "ac37bd265e830594e3b4646bb9cba66cac77d747", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0a3412c466ef89b925f4754f27b5b0af9d82989/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0a3412c466ef89b925f4754f27b5b0af9d82989/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b0a3412c466ef89b925f4754f27b5b0af9d82989", "patch": "@@ -1,3 +1,9 @@\n+2003-04-07  Glen Nakamura  <glen@imodulo.com>\n+\n+\tPR opt/8634\n+\t* explow.c (maybe_set_unchanging): Don't flag non-static const\n+\taggregate type initializers with RTX_UNCHANGING_P.\n+\n 2003-04-07  Richard Henderson  <rth@redhat.com>\n \n         PR opt/8634"}, {"sha": "9ed034eb1a986805143f4764c6e07b710c742374", "filename": "gcc/explow.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0a3412c466ef89b925f4754f27b5b0af9d82989/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0a3412c466ef89b925f4754f27b5b0af9d82989/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=b0a3412c466ef89b925f4754f27b5b0af9d82989", "patch": "@@ -657,8 +657,18 @@ maybe_set_unchanging (ref, t)\n   /* We can set RTX_UNCHANGING_P from TREE_READONLY for decls whose\n      initialization is only executed once, or whose initializer always\n      has the same value.  Currently we simplify this to PARM_DECLs in the\n-     first case, and decls with TREE_CONSTANT initializers in the second.  */\n+     first case, and decls with TREE_CONSTANT initializers in the second.\n+\n+     We cannot do this for non-static aggregates, because of the double\n+     writes that can be generated by store_constructor, depending on the\n+     contents of the initializer.  Yes, this does eliminate a good fraction\n+     of the number of uses of RTX_UNCHANGING_P for a language like Ada.\n+     It also eliminates a good quantity of bugs.  Let this be incentive to\n+     eliminate RTX_UNCHANGING_P entirely in favour of a more reliable\n+     solution, perhaps based on alias sets.  */\n+\n   if ((TREE_READONLY (t) && DECL_P (t)\n+       && (TREE_STATIC (t) || ! AGGREGATE_TYPE_P (TREE_TYPE (t)))\n        && (TREE_CODE (t) == PARM_DECL\n \t   || (DECL_INITIAL (t) && TREE_CONSTANT (DECL_INITIAL (t)))))\n       || TREE_CODE_CLASS (TREE_CODE (t)) == 'c')"}]}