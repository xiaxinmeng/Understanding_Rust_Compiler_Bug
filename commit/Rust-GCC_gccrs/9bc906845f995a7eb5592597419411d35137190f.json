{"sha": "9bc906845f995a7eb5592597419411d35137190f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJjOTA2ODQ1Zjk5NWE3ZWI1NTkyNTk3NDE5NDExZDM1MTM3MTkwZg==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-01-27T17:06:08Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-01-27T17:06:08Z"}, "message": "pa.c (check_fp_mov): Delete unused function\n\n\t* pa.c (check_fp_mov): Delete unused function\n\t(register_or_short_operand): Likewise\n\t(eq_or_neq): Likewise\n\t(gen_compare_reg): Likewise\n\t(reverse_relop): Likewise\n\t(frame_base)name): Delete unused variable.\n\nFrom-SVN: r3365", "tree": {"sha": "22a68a772594e7ded6f5c5f870da3644b0ad5903", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22a68a772594e7ded6f5c5f870da3644b0ad5903"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bc906845f995a7eb5592597419411d35137190f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bc906845f995a7eb5592597419411d35137190f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bc906845f995a7eb5592597419411d35137190f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bc906845f995a7eb5592597419411d35137190f/comments", "author": null, "committer": null, "parents": [{"sha": "ec04655e33b457dc767d3d63e3ab7ea1d42bd611", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec04655e33b457dc767d3d63e3ab7ea1d42bd611", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec04655e33b457dc767d3d63e3ab7ea1d42bd611"}], "stats": {"total": 83, "additions": 0, "deletions": 83}, "files": [{"sha": "e55c0c3e1bf5990ec95a22bdedc91ab7c3416e77", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 0, "deletions": 83, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bc906845f995a7eb5592597419411d35137190f/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bc906845f995a7eb5592597419411d35137190f/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=9bc906845f995a7eb5592597419411d35137190f", "patch": "@@ -46,11 +46,6 @@ rtx hppa_save_pic_table_rtx;\n /* Set by the FUNCTION_PROFILER macro. */\n int hp_profile_labelno;\n \n-/* Name of where we pretend to think the frame pointer points.\n-   Normally, this is \"4\", but if we are in a leaf procedure,\n-   this is \"something(30)\".  Will this work? */\n-char *frame_base_name;\n-\n static rtx find_addr_reg ();\n \n /* Return non-zero only if OP is a register of mode MODE,\n@@ -186,18 +181,6 @@ short_memory_operand (op, mode)\n   return 0;\n }\n \n-int\n-register_or_short_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n-{\n-  if (register_operand (op, mode))\n-    return 1;\n-  if (GET_CODE (op) == SUBREG)\n-    op = SUBREG_REG (op);\n-  return short_memory_operand (op, mode);\n-}\n-\n int\n fp_reg_operand (op, mode)\n      rtx op;\n@@ -206,21 +189,6 @@ fp_reg_operand (op, mode)\n   return reg_renumber && FP_REG_P (op);\n }\n \n-int\n-check_fp_mov (operands)\n-     rtx *operands;\n-{\n-  enum machine_mode mode = GET_MODE (operands[0]);\n-\n-  if (fp_reg_operand (operands[0], mode))\n-    return (register_operand (operands[1], mode)\n-\t    || short_memory_operand (operands[1], mode));\n-  else if (fp_reg_operand (operands[1], mode))\n-    return (register_operand (operands[0], mode)\n-\t    || short_memory_operand (operands[0], mode));\n-  else\n-    return 1;\n-}\n \f\n extern int current_function_uses_pic_offset_table;\n extern rtx force_reg (), validize_mem ();\n@@ -249,16 +217,6 @@ check_pic (i)\n     }\n }\n \n-/* Return truth value of whether OP is EQ or NE.  */\n-\n-int\n-eq_or_neq (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n-{\n-  return (GET_CODE (op) == EQ || GET_CODE (op) == NE);\n-}\n-\n /* Return truth value of whether OP can be used as an operand in a\n    three operand arithmetic insn that accepts registers of mode MODE\n    or 14-bit signed integers.  */\n@@ -1854,20 +1812,6 @@ output_function_epilogue (file, size)\n   fprintf (file, \"\\t.EXIT\\n\\t.PROCEND\\n\");\n }\n \n-rtx\n-gen_compare_reg (code, x, y)\n-     enum rtx_code code;\n-     rtx x, y;\n-{\n-  enum machine_mode mode = SELECT_CC_MODE (code, x, y);\n-  rtx cc_reg = gen_rtx (REG, mode, 0);\n-\n-  emit_insn (gen_rtx (SET, VOIDmode, cc_reg,\n-\t\t      gen_rtx (COMPARE, mode, x, y)));\n-\n-  return cc_reg;\n-}\n-\n /* If there's a frame, it will be deallocated in the delay slot of the \n    bv 0(2) return instruction. */\n \n@@ -2252,33 +2196,6 @@ output_global_address (file, x)\n     output_addr_const (file, x);\n }\n \n-enum rtx_code\n-reverse_relop (code)\n-     enum rtx_code code;\n-{\n-  switch (code)\n-    {\n-    case GT:\n-      return LT;\n-    case LT:\n-      return GT;\n-    case GE:\n-      return LE;\n-    case LE:\n-      return GE;\n-    case LTU:\n-      return GTU;\n-    case GTU:\n-      return LTU;\n-    case GEU:\n-      return LEU;\n-    case LEU:\n-      return GEU;\n-    default:\n-      abort ();\n-    }\n-}\n-\n /* HP's millicode routines mean something special to the assembler.\n    Keep track of which ones we have used.  */\n "}]}