{"sha": "e278212eeea4f57d8478bf5c6be05fd7bdb2dc8e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI3ODIxMmVlZWE0ZjU3ZDg0NzhiZjVjNmJlMDVmZDdiZGIyZGM4ZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2018-03-27T06:52:04Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2018-03-27T06:52:04Z"}, "message": "re PR c++/84632 (internal compiler error: tree check: expected record_type or union_type or qual_union_type, have array_type in reduced_constant_expression_p, at cp/constexpr.c:1778)\n\n/cp\n2018-03-27  Paolo Carlini  <paolo.carlini@oracle.com>\n\t    Jason Merrill  <jason@redhat.com>\n\n\tPR c++/84632\n\t* init.c (build_aggr_init): When initializing from array,\n\treject anything but CONSTRUCTORs and TARGET_EXPRs.\n\t(build_vec_init): Handle separately ARRAY_TYPEs.\n\n/testsuite\n2018-03-27  Paolo Carlini  <paolo.carlini@oracle.com>\n\t    Jason Merrill  <jason@redhat.com>\n\n\tPR c++/84632\n\t* g++.dg/init/array49.C: New.\n\t* g++.dg/torture/pr70499.C: Adjust.\n\nCo-Authored-By: Jason Merrill <jason@redhat.com>\n\nFrom-SVN: r258870", "tree": {"sha": "62c90d8b8bc9300030a7e3c47be7ffb35d7c1441", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62c90d8b8bc9300030a7e3c47be7ffb35d7c1441"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e278212eeea4f57d8478bf5c6be05fd7bdb2dc8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e278212eeea4f57d8478bf5c6be05fd7bdb2dc8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e278212eeea4f57d8478bf5c6be05fd7bdb2dc8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e278212eeea4f57d8478bf5c6be05fd7bdb2dc8e/comments", "author": null, "committer": null, "parents": [{"sha": "74d2d97382ddfec2fd51c6a90950cf29c3ba9fd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74d2d97382ddfec2fd51c6a90950cf29c3ba9fd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74d2d97382ddfec2fd51c6a90950cf29c3ba9fd5"}], "stats": {"total": 53, "additions": 36, "deletions": 17}, "files": [{"sha": "654e608c6b5e864ab9df854eb4c824e32dc74d18", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e278212eeea4f57d8478bf5c6be05fd7bdb2dc8e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e278212eeea4f57d8478bf5c6be05fd7bdb2dc8e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e278212eeea4f57d8478bf5c6be05fd7bdb2dc8e", "patch": "@@ -1,3 +1,11 @@\n+2018-03-27  Paolo Carlini  <paolo.carlini@oracle.com>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/84632\n+\t* init.c (build_aggr_init): When initializing from array,\n+\treject anything but CONSTRUCTORs and TARGET_EXPRs.\n+\t(build_vec_init): Handle separately ARRAY_TYPEs.\n+\n 2018-03-26  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/85062 - ICE with alignas in wrong place."}, {"sha": "e52cd64acc8954937797bc0fa9ec102284187ae9", "filename": "gcc/cp/init.c", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e278212eeea4f57d8478bf5c6be05fd7bdb2dc8e/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e278212eeea4f57d8478bf5c6be05fd7bdb2dc8e/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=e278212eeea4f57d8478bf5c6be05fd7bdb2dc8e", "patch": "@@ -1688,14 +1688,6 @@ build_aggr_init (tree exp, tree init, int flags, tsubst_flags_t complain)\n \t}\n       else\n \t{\n-\t  /* An array may not be initialized use the parenthesized\n-\t     initialization form -- unless the initializer is \"()\".  */\n-\t  if (init && TREE_CODE (init) == TREE_LIST)\n-\t    {\n-\t      if (complain & tf_error)\n-\t\terror (\"bad array initializer\");\n-\t      return error_mark_node;\n-\t    }\n \t  /* Must arrange to initialize each element of EXP\n \t     from elements of INIT.  */\n \t  if (cv_qualified_p (type))\n@@ -1705,14 +1697,17 @@ build_aggr_init (tree exp, tree init, int flags, tsubst_flags_t complain)\n \t  from_array = (itype && same_type_p (TREE_TYPE (init),\n \t\t\t\t\t      TREE_TYPE (exp)));\n \n-\t  if (init && !from_array\n-\t      && !BRACE_ENCLOSED_INITIALIZER_P (init))\n+\t  if (init && !BRACE_ENCLOSED_INITIALIZER_P (init)\n+\t      && (!from_array\n+\t\t  || (TREE_CODE (init) != CONSTRUCTOR\n+\t\t      /* Can happen, eg, handling the compound-literals\n+\t\t\t extension (ext/complit12.C).  */\n+\t\t      && TREE_CODE (init) != TARGET_EXPR)))\n \t    {\n \t      if (complain & tf_error)\n-\t\tpermerror (init_loc, \"array must be initialized \"\n-\t\t\t   \"with a brace-enclosed initializer\");\n-\t      else\n-\t\treturn error_mark_node;\n+\t\terror_at (init_loc, \"array must be initialized \"\n+\t\t\t  \"with a brace-enclosed initializer\");\n+\t      return error_mark_node;\n \t    }\n \t}\n \n@@ -4367,7 +4362,10 @@ build_vec_init (tree base, tree maxindex, tree init,\n \t  else\n \t    from = NULL_TREE;\n \n-\t  if (from_array == 2)\n+\t  if (TREE_CODE (type) == ARRAY_TYPE)\n+\t    elt_init = build_vec_init (to, NULL_TREE, from, /*val_init*/false,\n+\t\t\t\t       from_array, complain);\n+\t  else if (from_array == 2)\n \t    elt_init = cp_build_modify_expr (input_location, to, NOP_EXPR,\n \t\t\t\t\t     from, complain);\n \t  else if (type_build_ctor_call (type))"}, {"sha": "87d9bd4b204bcd15291ee58c8c6c2349ead0c204", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e278212eeea4f57d8478bf5c6be05fd7bdb2dc8e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e278212eeea4f57d8478bf5c6be05fd7bdb2dc8e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e278212eeea4f57d8478bf5c6be05fd7bdb2dc8e", "patch": "@@ -1,3 +1,10 @@\n+2018-03-27  Paolo Carlini  <paolo.carlini@oracle.com>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/84632\n+\t* g++.dg/init/array49.C: New.\n+\t* g++.dg/torture/pr70499.C: Adjust.\n+\n 2018-03-26  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/85073"}, {"sha": "9905483f738cf0b31559b8ecfe7e08e91f2d045b", "filename": "gcc/testsuite/g++.dg/init/array49.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e278212eeea4f57d8478bf5c6be05fd7bdb2dc8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray49.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e278212eeea4f57d8478bf5c6be05fd7bdb2dc8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray49.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray49.C?ref=e278212eeea4f57d8478bf5c6be05fd7bdb2dc8e", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/84632\n+// { dg-additional-options \"-w\" }\n+\n+class {\n+  &a;  // { dg-error \"forbids declaration\" }\n+} b[2] = b;  // { dg-error \"initialized\" }"}, {"sha": "4b8b3329d6cc1c175bebe126124a38bfb4c1dfb7", "filename": "gcc/testsuite/g++.dg/torture/pr70499.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e278212eeea4f57d8478bf5c6be05fd7bdb2dc8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr70499.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e278212eeea4f57d8478bf5c6be05fd7bdb2dc8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr70499.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr70499.C?ref=e278212eeea4f57d8478bf5c6be05fd7bdb2dc8e", "patch": "@@ -1,5 +1,5 @@\n // { dg-do compile }\n-// { dg-additional-options \"-w -fpermissive -Wno-psabi\" }\n+// { dg-additional-options \"-w -Wno-psabi\" }\n // { dg-additional-options \"-mavx\" { target x86_64-*-* i?86-*-* } }\n \n typedef double __m256d __attribute__ ((__vector_size__ (32), __may_alias__));\n@@ -30,7 +30,7 @@ struct Foo {\n template<typename Tx>  \n __attribute__((__always_inline__)) inline void inlineFunc(Tx hx[]) {\n     Tx x = hx[0], y = hx[1];\n-    Tx lam[1] = (x*y);\n+    Tx lam[1] = {(x*y)};\n }\n \n void FooBarFunc () {"}]}