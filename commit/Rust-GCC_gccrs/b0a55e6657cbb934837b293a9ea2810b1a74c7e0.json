{"sha": "b0a55e6657cbb934837b293a9ea2810b1a74c7e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBhNTVlNjY1N2NiYjkzNDgzN2IyOTNhOWVhMjgxMGIxYTc0YzdlMA==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2019-06-16T07:50:20Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2019-06-16T07:50:20Z"}, "message": "re PR d/90559 (Out of memory because of negative length)\n\n\tPR d/90559\nd/dmd: Merge upstream dmd 7afcc60c3\n\nPartially fixes out of memory because of negative length.\n\nReviewed-on: https://github.com/dlang/dmd/pull/10025\n\ngcc/d/ChangeLog:\n\n2019-06-16  Iain Buclaw  <ibuclaw@gdcproject.org>\n\n\tPR d/90559\n\t* d-target.cc (Target::_init): Reduce max static data size to INT_MAX.\n\nFrom-SVN: r272351", "tree": {"sha": "84e3d719a3b7181744a750bb09ccd7984f277ea4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84e3d719a3b7181744a750bb09ccd7984f277ea4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0a55e6657cbb934837b293a9ea2810b1a74c7e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0a55e6657cbb934837b293a9ea2810b1a74c7e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0a55e6657cbb934837b293a9ea2810b1a74c7e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0a55e6657cbb934837b293a9ea2810b1a74c7e0/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e5d0ba591e28d8be1fb5775fb0418fee04af17d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5d0ba591e28d8be1fb5775fb0418fee04af17d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5d0ba591e28d8be1fb5775fb0418fee04af17d7"}], "stats": {"total": 113, "additions": 60, "deletions": 53}, "files": [{"sha": "51d17216816c695fd430ab63dae853e0fc60b1d6", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0a55e6657cbb934837b293a9ea2810b1a74c7e0/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0a55e6657cbb934837b293a9ea2810b1a74c7e0/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=b0a55e6657cbb934837b293a9ea2810b1a74c7e0", "patch": "@@ -1,3 +1,8 @@\n+2019-06-16  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/90559\n+\t* d-target.cc (Target::_init): Reduce max static data size to INT_MAX.\n+\n 2019-06-16  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/90651"}, {"sha": "8d85534f05444c8612d07d055ee5ffb1b8d3abe8", "filename": "gcc/d/d-target.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0a55e6657cbb934837b293a9ea2810b1a74c7e0/gcc%2Fd%2Fd-target.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0a55e6657cbb934837b293a9ea2810b1a74c7e0/gcc%2Fd%2Fd-target.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-target.cc?ref=b0a55e6657cbb934837b293a9ea2810b1a74c7e0", "patch": "@@ -140,8 +140,9 @@ Target::_init (void)\n   /* Size of run-time TypeInfo object.  */\n   Target::classinfosize = 19 * Target::ptrsize;\n \n-  /* Allow data sizes up to half of the address space.  */\n-  Target::maxStaticDataSize = tree_to_shwi (TYPE_MAX_VALUE (ptrdiff_type_node));\n+  /* Much of the dmd front-end uses ints for sizes and offsets, and cannot\n+     handle any larger data type without some pervasive rework.  */\n+  Target::maxStaticDataSize = tree_to_shwi (TYPE_MAX_VALUE (integer_type_node));\n \n   /* Define what type to use for size_t, ptrdiff_t.  */\n   if (POINTER_SIZE == 64)"}, {"sha": "4111fc97044b943ef638bf03f336c19c36d5f6ed", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0a55e6657cbb934837b293a9ea2810b1a74c7e0/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0a55e6657cbb934837b293a9ea2810b1a74c7e0/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=b0a55e6657cbb934837b293a9ea2810b1a74c7e0", "patch": "@@ -1,4 +1,4 @@\n-f8e38c001b9d7bd6586ee5b3dab7f7f199a69be7\n+7afcc60c30554e452eacdfbefc4951ebf601fccd\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "45b4e00a68c1dbc280e684c8cc732be85916c57c", "filename": "gcc/d/dmd/clone.c", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0a55e6657cbb934837b293a9ea2810b1a74c7e0/gcc%2Fd%2Fdmd%2Fclone.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0a55e6657cbb934837b293a9ea2810b1a74c7e0/gcc%2Fd%2Fdmd%2Fclone.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fclone.c?ref=b0a55e6657cbb934837b293a9ea2810b1a74c7e0", "patch": "@@ -841,12 +841,7 @@ FuncDeclaration *buildPostBlit(StructDeclaration *sd, Scope *sc)\n         {\n             // __ArrayPostblit((cast(S*)this.v.ptr)[0 .. n])\n \n-            uinteger_t n = 1;\n-            while (tv->ty == Tsarray)\n-            {\n-                n *= ((TypeSArray *)tv)->dim->toUInteger();\n-                tv = tv->nextOf()->toBasetype();\n-            }\n+            uinteger_t n = tv->numberOfElems(loc);\n             if (n == 0)\n                 continue;\n \n@@ -898,12 +893,7 @@ FuncDeclaration *buildPostBlit(StructDeclaration *sd, Scope *sc)\n         {\n             // __ArrayDtor((cast(S*)this.v.ptr)[0 .. n])\n \n-            uinteger_t n = 1;\n-            while (tv->ty == Tsarray)\n-            {\n-                n *= ((TypeSArray *)tv)->dim->toUInteger();\n-                tv = tv->nextOf()->toBasetype();\n-            }\n+            uinteger_t n = tv->numberOfElems(loc);\n             //if (n == 0)\n             //    continue;\n \n@@ -1049,12 +1039,7 @@ FuncDeclaration *buildDtor(AggregateDeclaration *ad, Scope *sc)\n         {\n             // __ArrayDtor((cast(S*)this.v.ptr)[0 .. n])\n \n-            uinteger_t n = 1;\n-            while (tv->ty == Tsarray)\n-            {\n-                n *= ((TypeSArray *)tv)->dim->toUInteger();\n-                tv = tv->nextOf()->toBasetype();\n-            }\n+            uinteger_t n = tv->numberOfElems(loc);\n             if (n == 0)\n                 continue;\n "}, {"sha": "88c59a9045b105cf96911749354ae99026a770a5", "filename": "gcc/d/dmd/expressionsem.c", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0a55e6657cbb934837b293a9ea2810b1a74c7e0/gcc%2Fd%2Fdmd%2Fexpressionsem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0a55e6657cbb934837b293a9ea2810b1a74c7e0/gcc%2Fd%2Fdmd%2Fexpressionsem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpressionsem.c?ref=b0a55e6657cbb934837b293a9ea2810b1a74c7e0", "patch": "@@ -5851,16 +5851,8 @@ class ExpressionSemanticVisitor : public Visitor\n                 if (exp->op != TOKassign)\n                 {\n                     // If multidimensional static array, treat as one large array\n-                    dinteger_t dim = ((TypeSArray *)t1)->dim->toInteger();\n-                    Type *t = t1;\n-                    while (1)\n-                    {\n-                        t = t->nextOf()->toBasetype();\n-                        if (t->ty != Tsarray)\n-                            break;\n-                        dim *= ((TypeSArray *)t)->dim->toInteger();\n-                        e1x->type = t->nextOf()->sarrayOf(dim);\n-                    }\n+                    dinteger_t dim = t1->numberOfElems(exp->loc);\n+                    e1x->type = t1->baseElemOf()->sarrayOf(dim);\n                 }\n                 SliceExp *sle = new SliceExp(e1x->loc, e1x, NULL, NULL);\n                 sle->arrayop = true;"}, {"sha": "906fb11b634c7475bd883ab86846d21721273887", "filename": "gcc/d/dmd/mtype.c", "status": "modified", "additions": 35, "deletions": 16, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0a55e6657cbb934837b293a9ea2810b1a74c7e0/gcc%2Fd%2Fdmd%2Fmtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0a55e6657cbb934837b293a9ea2810b1a74c7e0/gcc%2Fd%2Fdmd%2Fmtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fmtype.c?ref=b0a55e6657cbb934837b293a9ea2810b1a74c7e0", "patch": "@@ -2517,6 +2517,33 @@ void Type::checkComplexTransition(Loc loc)\n     }\n }\n \n+/*******************************************\n+ * Compute number of elements for a (possibly multidimensional) static array,\n+ * or 1 for other types.\n+ * Params:\n+ *  loc = for error message\n+ * Returns:\n+ *  number of elements, uint.max on overflow\n+ */\n+unsigned Type::numberOfElems(const Loc &loc)\n+{\n+  //printf(\"Type::numberOfElems()\\n\");\n+  uinteger_t n = 1;\n+  Type *tb = this;\n+  while ((tb = tb->toBasetype())->ty == Tsarray)\n+    {\n+      bool overflow = false;\n+      n = mulu(n, ((TypeSArray *)tb)->dim->toUInteger(), overflow);\n+      if (overflow || n >= UINT32_MAX)\n+      {\n+          error(loc, \"static array `%s` size overflowed to %llu\", toChars(), (unsigned long long)n);\n+          return UINT32_MAX;\n+      }\n+      tb = ((TypeSArray *)tb)->next;\n+    }\n+  return (unsigned)n;\n+}\n+\n /****************************************\n  * Return the mask that an integral type will\n  * fit into.\n@@ -3900,25 +3927,17 @@ Type *TypeSArray::syntaxCopy()\n d_uns64 TypeSArray::size(Loc loc)\n {\n     //printf(\"TypeSArray::size()\\n\");\n-    dinteger_t sz;\n-    if (!dim)\n-        return Type::size(loc);\n-    sz = dim->toInteger();\n-\n+    uinteger_t n = numberOfElems(loc);\n+    uinteger_t elemsize = baseElemOf()->size();\n+    bool overflow = false;\n+    uinteger_t sz = mulu(n, elemsize, overflow);\n+    if (overflow || sz >= UINT32_MAX)\n     {\n-        bool overflow = false;\n-\n-        sz = mulu(next->size(), sz, overflow);\n-        if (overflow)\n-            goto Loverflow;\n+        if (elemsize != SIZE_INVALID && n != UINT32_MAX)\n+            error(loc, \"static array `%s` size overflowed to %lld\", toChars(), (long long)sz);\n+        return SIZE_INVALID;\n     }\n-    if (sz > UINT32_MAX)\n-        goto Loverflow;\n     return sz;\n-\n-Loverflow:\n-    error(loc, \"static array %s size overflowed to %lld\", toChars(), (long long)sz);\n-    return SIZE_INVALID;\n }\n \n unsigned TypeSArray::alignsize()"}, {"sha": "aab0d034cf05c3d75f98b1ae35af70867a7c3fc2", "filename": "gcc/d/dmd/mtype.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0a55e6657cbb934837b293a9ea2810b1a74c7e0/gcc%2Fd%2Fdmd%2Fmtype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0a55e6657cbb934837b293a9ea2810b1a74c7e0/gcc%2Fd%2Fdmd%2Fmtype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fmtype.h?ref=b0a55e6657cbb934837b293a9ea2810b1a74c7e0", "patch": "@@ -332,6 +332,7 @@ class Type : public RootObject\n     virtual Type *nextOf();\n     Type *baseElemOf();\n     uinteger_t sizemask();\n+    unsigned numberOfElems(const Loc &loc);\n     virtual bool needsDestruction();\n     virtual bool needsNested();\n     void checkComplexTransition(Loc loc);"}, {"sha": "f419869236bc2cd142e9122964a4c1075fff3048", "filename": "gcc/testsuite/gdc.test/fail_compilation/staticarrayoverflow.d", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0a55e6657cbb934837b293a9ea2810b1a74c7e0/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fstaticarrayoverflow.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0a55e6657cbb934837b293a9ea2810b1a74c7e0/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fstaticarrayoverflow.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fstaticarrayoverflow.d?ref=b0a55e6657cbb934837b293a9ea2810b1a74c7e0", "patch": "@@ -2,11 +2,14 @@\n REQUIRED_ARGS: -m64\n PERMUTE_ARGS:\n ---\n-fail_compilation/staticarrayoverflow.d(21): Error: static array S[1879048192] size overflowed to 7516192768000\n-fail_compilation/staticarrayoverflow.d(21): Error: variable staticarrayoverflow.y size overflow\n-fail_compilation/staticarrayoverflow.d(22): Error: variable staticarrayoverflow.z size of x1000ae0 exceeds max allowed size 0x100_0000\n-fail_compilation/staticarrayoverflow.d(23): Error: static array S[8070450532247928832] size overflowed to 0\n-fail_compilation/staticarrayoverflow.d(23): Error: variable staticarrayoverflow.a size overflow\n+fail_compilation/staticarrayoverflow.d(24): Error: static array `S[1879048192]` size overflowed to 7516192768000\n+fail_compilation/staticarrayoverflow.d(24): Error: variable `staticarrayoverflow.y` size overflow\n+fail_compilation/staticarrayoverflow.d(26): Error: static array `S[8070450532247928832]` size overflowed to 8070450532247928832\n+fail_compilation/staticarrayoverflow.d(26): Error: variable `staticarrayoverflow.a` size overflow\n+fail_compilation/staticarrayoverflow.d(27): Error: static array `S[0][18446744073709551615LU]` size overflowed to 18446744073709551615\n+fail_compilation/staticarrayoverflow.d(27): Error: variable `staticarrayoverflow.b` size overflow\n+fail_compilation/staticarrayoverflow.d(28): Error: static array `S[0][4294967295]` size overflowed to 4294967295\n+fail_compilation/staticarrayoverflow.d(28): Error: variable `staticarrayoverflow.c` size overflow\n ---\n */\n \n@@ -20,4 +23,5 @@ struct S\n S[0x7000_0000] y;\n S[0x100_0000/(4*1000 - 1)] z;\n S[0x7000_0000_0000_0000] a;\n-\n+S[0][-1] b;\n+S[0][uint.max] c;"}]}