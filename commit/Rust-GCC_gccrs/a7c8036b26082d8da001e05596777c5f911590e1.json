{"sha": "a7c8036b26082d8da001e05596777c5f911590e1", "node_id": "C_kwDOANBUbNoAKGE3YzgwMzZiMjYwODJkOGRhMDAxZTA1NTk2Nzc3YzVmOTExNTkwZTE", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-12-19T19:59:43Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-12-19T20:26:37Z"}, "message": "c++: ICE with concepts TS multiple auto deduction [PR101886]\n\nIn extract_autos_r, we need to recompute TYPE_CANONICAL for the template\ntype parameter after adjusting its index, otherwise we end up with a\ncomptypes ICE for the below testcase.  Note that such in-place type\nadjustment isn't generally safe to do since the type could be the\nTYPE_CANONICAL of another (unadjusted) type, but in this case the\ncanonical auto (of some level and 0 index) is the first auto (of that\nlevel) that's created, and so any auto that we do end up adjusting can't\nbe the canonical one.\n\n\tPR c++/101886\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (extract_autos_r): Recompute TYPE_CANONICAL after\n\tadjusting the template type parameter's index.  Simplify\n\tby using TEMPLATE_TYPE_IDX.  Add some sanity checks.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/concepts/auto5.C: New test.", "tree": {"sha": "ea82a5dfb0304b3a29ece9f18a8da7ea45ef56a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea82a5dfb0304b3a29ece9f18a8da7ea45ef56a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7c8036b26082d8da001e05596777c5f911590e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7c8036b26082d8da001e05596777c5f911590e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7c8036b26082d8da001e05596777c5f911590e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7c8036b26082d8da001e05596777c5f911590e1/comments", "author": null, "committer": null, "parents": [{"sha": "a39f454f0faf0734c7d040c9d8523f71be821000", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a39f454f0faf0734c7d040c9d8523f71be821000", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a39f454f0faf0734c7d040c9d8523f71be821000"}], "stats": {"total": 21, "additions": 18, "deletions": 3}, "files": [{"sha": "2b7b3756b68b39d4165c7fe9444d4a299f90b1ac", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7c8036b26082d8da001e05596777c5f911590e1/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7c8036b26082d8da001e05596777c5f911590e1/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=a7c8036b26082d8da001e05596777c5f911590e1", "patch": "@@ -29243,18 +29243,24 @@ extract_autos_r (tree t, void *data)\n     {\n       /* All the autos were built with index 0; fix that up now.  */\n       tree *p = hash.find_slot (t, INSERT);\n-      unsigned idx;\n+      int idx;\n       if (*p)\n \t/* If this is a repeated constrained-type-specifier, use the index we\n \t   chose before.  */\n-\tidx = TEMPLATE_PARM_IDX (TEMPLATE_TYPE_PARM_INDEX (*p));\n+\tidx = TEMPLATE_TYPE_IDX (*p);\n       else\n \t{\n \t  /* Otherwise this is new, so use the current count.  */\n \t  *p = t;\n \t  idx = hash.elements () - 1;\n \t}\n-      TEMPLATE_PARM_IDX (TEMPLATE_TYPE_PARM_INDEX (t)) = idx;\n+      if (idx != TEMPLATE_TYPE_IDX (t))\n+\t{\n+\t  gcc_checking_assert (TEMPLATE_TYPE_IDX (t) == 0);\n+\t  gcc_checking_assert (TYPE_CANONICAL (t) != t);\n+\t  TEMPLATE_TYPE_IDX (t) = idx;\n+\t  TYPE_CANONICAL (t) = canonical_type_parameter (t);\n+\t}\n     }\n \n   /* Always keep walking.  */"}, {"sha": "f1d653efd87cded5d19d7abfa4f9776162fcac72", "filename": "gcc/testsuite/g++.dg/concepts/auto5.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7c8036b26082d8da001e05596777c5f911590e1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fauto5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7c8036b26082d8da001e05596777c5f911590e1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fauto5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fauto5.C?ref=a7c8036b26082d8da001e05596777c5f911590e1", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/101886\n+// { dg-do compile { target c++17_only } }\n+// { dg-options \"-fconcepts-ts\" }\n+\n+template<typename...> struct A { };\n+\n+A<int, int> a;\n+A<auto, auto> b1 = a;\n+A<auto, auto> b2 = a;"}]}