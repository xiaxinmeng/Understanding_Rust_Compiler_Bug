{"sha": "d6f0d0d4c18ef3209622fa47efadf999a21cd394", "node_id": "C_kwDOANBUbNoAKGQ2ZjBkMGQ0YzE4ZWYzMjA5NjIyZmE0N2VmYWRmOTk5YTIxY2QzOTQ", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2021-12-02T20:49:35Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-01-06T17:11:31Z"}, "message": "[Ada] Simplify GNAT AST printing with simple GNAT hash table\n\ngcc/ada/\n\n\t* treepr.ads (Treepr, Print_Tree_List, Print_Tree_Elist): Fix\n\tstyle in comments.\n\t* treepr.adb (Serial_Numbers): Hash table instance.\n\t(Hash): Hashing routine.\n\t(Print_Field): Fix style.\n\t(Print_Init): Adapt to simple hash table.\n\t(Print_Term): Likewise.\n\t(Serial_Numbers): Likewise.\n\t(Set_Serial_Number): Likewise.", "tree": {"sha": "7d4ac17bdb3c957209fe8da60341854e7d15c1cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d4ac17bdb3c957209fe8da60341854e7d15c1cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6f0d0d4c18ef3209622fa47efadf999a21cd394", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6f0d0d4c18ef3209622fa47efadf999a21cd394", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6f0d0d4c18ef3209622fa47efadf999a21cd394", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6f0d0d4c18ef3209622fa47efadf999a21cd394/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07793a58d0702ade3d7300c19be65cf1bb1504d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07793a58d0702ade3d7300c19be65cf1bb1504d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07793a58d0702ade3d7300c19be65cf1bb1504d2"}], "stats": {"total": 167, "additions": 75, "deletions": 92}, "files": [{"sha": "f317d8fd660f5887fbaa3fca6f0d73a806fd75d4", "filename": "gcc/ada/treepr.adb", "status": "modified", "additions": 72, "deletions": 89, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f0d0d4c18ef3209622fa47efadf999a21cd394/gcc%2Fada%2Ftreepr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f0d0d4c18ef3209622fa47efadf999a21cd394/gcc%2Fada%2Ftreepr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftreepr.adb?ref=d6f0d0d4c18ef3209622fa47efadf999a21cd394", "patch": "@@ -23,32 +23,32 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Aspects;        use Aspects;\n-with Atree;          use Atree;\n-with Csets;          use Csets;\n-with Debug;          use Debug;\n-with Einfo;          use Einfo;\n-with Einfo.Entities; use Einfo.Entities;\n-with Einfo.Utils;    use Einfo.Utils;\n-with Elists;         use Elists;\n-with Lib;            use Lib;\n-with Namet;          use Namet;\n-with Nlists;         use Nlists;\n-with Output;         use Output;\n-with Seinfo;         use Seinfo;\n-with Sinfo;          use Sinfo;\n-with Sinfo.Nodes;    use Sinfo.Nodes;\n-with Sinfo.Utils;    use Sinfo.Utils;\n-with Snames;         use Snames;\n-with Sinput;         use Sinput;\n-with Stand;          use Stand;\n-with Stringt;        use Stringt;\n-with SCIL_LL;        use SCIL_LL;\n-with Uintp;          use Uintp;\n-with Urealp;         use Urealp;\n-with Uname;          use Uname;\n+with Aspects;              use Aspects;\n+with Atree;                use Atree;\n+with Csets;                use Csets;\n+with Debug;                use Debug;\n+with Einfo;                use Einfo;\n+with Einfo.Entities;       use Einfo.Entities;\n+with Einfo.Utils;          use Einfo.Utils;\n+with Elists;               use Elists;\n+with GNAT.Dynamic_HTables; use GNAT.Dynamic_HTables;\n+with Lib;                  use Lib;\n+with Namet;                use Namet;\n+with Nlists;               use Nlists;\n+with Output;               use Output;\n+with Seinfo;               use Seinfo;\n+with Sinfo;                use Sinfo;\n+with Sinfo.Nodes;          use Sinfo.Nodes;\n+with Sinfo.Utils;          use Sinfo.Utils;\n+with Snames;               use Snames;\n+with Sinput;               use Sinput;\n+with Stand;                use Stand;\n+with Stringt;              use Stringt;\n+with SCIL_LL;              use SCIL_LL;\n+with Uintp;                use Uintp;\n+with Urealp;               use Urealp;\n+with Uname;                use Uname;\n with Unchecked_Conversion;\n-with Unchecked_Deallocation;\n \n package body Treepr is\n \n@@ -80,24 +80,30 @@ package body Treepr is\n    --  Set True to print low-level information useful for debugging Atree and\n    --  the like.\n \n-   type Hash_Record is record\n-      Serial : Nat;\n-      --  Serial number for hash table entry. A value of zero means that\n-      --  the entry is currently unused.\n-\n-      Id : Int;\n-      --  If serial number field is non-zero, contains corresponding Id value\n-   end record;\n-\n-   type Hash_Table_Type is array (Nat range <>) of Hash_Record;\n-   type Access_Hash_Table_Type is access Hash_Table_Type;\n-   Hash_Table : Access_Hash_Table_Type;\n+   function Hash (Key : Int) return GNAT.Bucket_Range_Type;\n+   --  Simple Hash function for Node_Ids, List_Ids and Elist_Ids\n+\n+   procedure Destroy (Value : in out Nat) is null;\n+   --  Dummy routine for destroing hashed values\n+\n+   package Serial_Numbers is new Dynamic_Hash_Tables\n+     (Key_Type              => Int,\n+      Value_Type            => Nat,\n+      No_Value              => 0,\n+      Expansion_Threshold   => 1.5,\n+      Expansion_Factor      => 2,\n+      Compression_Threshold => 0.3,\n+      Compression_Factor    => 2,\n+      \"=\"                   => \"=\",\n+      Destroy_Value         => Destroy,\n+      Hash                  => Hash);\n+   --  Hash tables with dynamic resizing based on load factor. They provide\n+   --  reasonable performance both when the printed AST is small (e.g. when\n+   --  printing from debugger) and large (e.g. when printing with -gnatdt).\n+\n+   Hash_Table : Serial_Numbers.Dynamic_Hash_Table;\n    --  The hash table itself, see Serial_Number function for details of use\n \n-   Hash_Table_Len : Nat;\n-   --  Range of Hash_Table is from 0 .. Hash_Table_Len - 1 so that dividing\n-   --  by Hash_Table_Len gives a remainder that is in Hash_Table'Range.\n-\n    Next_Serial_Number : Nat;\n    --  Number of last visited node or list. Used during the marking phase to\n    --  set proper node numbers in the hash table, and during the printing\n@@ -275,6 +281,17 @@ package body Treepr is\n       end return;\n    end Capitalize;\n \n+   ----------\n+   -- Hash --\n+   ----------\n+\n+   function Hash (Key : Int) return GNAT.Bucket_Range_Type is\n+      function Cast is new Unchecked_Conversion\n+        (Source => Int, Target => GNAT.Bucket_Range_Type);\n+   begin\n+      return Cast (Key);\n+   end Hash;\n+\n    -----------\n    -- Image --\n    -----------\n@@ -794,6 +811,10 @@ package body Treepr is\n       procedure Print_Initial;\n       --  Print the initial stuff that goes before the value\n \n+      -------------------\n+      -- Print_Initial --\n+      -------------------\n+\n       procedure Print_Initial is\n       begin\n          Printed := True;\n@@ -808,6 +829,8 @@ package body Treepr is\n          Write_Str (\" = \");\n       end Print_Initial;\n \n+   --  Start of processing for Print_Field\n+\n    begin\n       if Phase /= Printing then\n          return;\n@@ -1068,23 +1091,12 @@ package body Treepr is\n    ----------------\n \n    procedure Print_Init is\n-      Max_Hash_Entries : constant Nat :=\n-        Approx_Num_Nodes_And_Entities + Num_Lists + Num_Elists;\n    begin\n       Printing_Descendants := True;\n       Write_Eol;\n \n-      --  Allocate and clear serial number hash table. The size is 150% of\n-      --  the maximum possible number of entries, so that the hash table\n-      --  cannot get significantly overloaded.\n-\n-      Hash_Table_Len := (150 * Max_Hash_Entries) / 100;\n-      Hash_Table := new Hash_Table_Type  (0 .. Hash_Table_Len - 1);\n-\n-      for J in Hash_Table'Range loop\n-         Hash_Table (J).Serial := 0;\n-      end loop;\n-\n+      pragma Assert (not Serial_Numbers.Present (Hash_Table));\n+      Hash_Table := Serial_Numbers.Create (512);\n    end Print_Init;\n \n    ---------------\n@@ -1703,11 +1715,8 @@ package body Treepr is\n    ----------------\n \n    procedure Print_Term is\n-      procedure Free is new Unchecked_Deallocation\n-        (Hash_Table_Type, Access_Hash_Table_Type);\n-\n    begin\n-      Free (Hash_Table);\n+      Serial_Numbers.Destroy (Hash_Table);\n    end Print_Term;\n \n    ---------------------\n@@ -1812,40 +1821,14 @@ package body Treepr is\n    -- Serial_Number --\n    -------------------\n \n-   --  The hashing algorithm is to use the remainder of the ID value divided\n-   --  by the hash table length as the starting point in the table, and then\n-   --  handle collisions by serial searching wrapping at the end of the table.\n-\n-   Hash_Slot : Nat;\n+   Hash_Id : Int;\n    --  Set by an unsuccessful call to Serial_Number (one which returns zero)\n-   --  to save the slot that should be used if Set_Serial_Number is called.\n+   --  to save the Id that should be used if Set_Serial_Number is called.\n \n    function Serial_Number (Id : Int) return Nat is\n-      H : Int := Id mod Hash_Table_Len;\n-\n    begin\n-      while Hash_Table (H).Serial /= 0 loop\n-\n-         if Id = Hash_Table (H).Id then\n-            return Hash_Table (H).Serial;\n-         end if;\n-\n-         H := H + 1;\n-\n-         if H > Hash_Table'Last then\n-            H := 0;\n-         end if;\n-      end loop;\n-\n-      --  Entry was not found, save slot number for possible subsequent call\n-      --  to Set_Serial_Number, and unconditionally save the Id in this slot\n-      --  in case of such a call (the Id field is never read if the serial\n-      --  number of the slot is zero, so this is harmless in the case where\n-      --  Set_Serial_Number is not subsequently called).\n-\n-      Hash_Slot := H;\n-      Hash_Table (H).Id := Id;\n-      return 0;\n+      Hash_Id := Id;\n+      return Serial_Numbers.Get (Hash_Table, Id);\n    end Serial_Number;\n \n    -----------------------\n@@ -1854,7 +1837,7 @@ package body Treepr is\n \n    procedure Set_Serial_Number is\n    begin\n-      Hash_Table (Hash_Slot).Serial := Next_Serial_Number;\n+      Serial_Numbers.Put (Hash_Table, Hash_Id, Next_Serial_Number);\n       Next_Serial_Number := Next_Serial_Number + 1;\n    end Set_Serial_Number;\n "}, {"sha": "e57f6881431d23612b2b67956aef49f9528f5f57", "filename": "gcc/ada/treepr.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f0d0d4c18ef3209622fa47efadf999a21cd394/gcc%2Fada%2Ftreepr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f0d0d4c18ef3209622fa47efadf999a21cd394/gcc%2Fada%2Ftreepr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftreepr.ads?ref=d6f0d0d4c18ef3209622fa47efadf999a21cd394", "patch": "@@ -26,7 +26,7 @@\n with Types; use Types;\n package Treepr is\n \n---  This package provides printing routines for the abstract syntax tree\n+--  This package provides printing routines for the abstract syntax tree.\n --  These routines are intended only for debugging use.\n \n    procedure Tree_Dump;\n@@ -42,11 +42,11 @@ package Treepr is\n \n    procedure Print_Tree_List (L : List_Id);\n    --  Prints a single node list, without printing the descendants of any\n-   --  of the nodes in the list\n+   --  of the nodes in the list.\n \n    procedure Print_Tree_Elist (E : Elist_Id);\n    --  Prints a single node list, without printing the descendants of any\n-   --  of the nodes in the list\n+   --  of the nodes in the list.\n \n    procedure Print_Node_Subtree (N : Node_Id);\n    --  Prints the subtree rooted at a specified tree node, including all"}]}