{"sha": "984514ac2eee98afae88c833714fecf12abcf6ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg0NTE0YWMyZWVlOThhZmFlODhjODMzNzE0ZmVjZjEyYWJjZjZhYw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-04-21T10:01:54Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-04-21T10:01:54Z"}, "message": "alpha.c (struct machine_function): Use rtx, not struct rtx_def *.\n\n\t* config/alpha/alpha.c (struct machine_function): Use rtx, not\n\tstruct rtx_def *.\n\t* config/bfin/bfin.h (bfin_cc_rtx, bfin_rets_rtx): Use rtx, not\n\tstruct rtx_def *.\n\t* config/cris/cris-protos.h (STDIO_INCLUDED): Don't define.\n\t* config/h8300/h8300.h (struct cum_arg): Use rtx, not struct\n\trtx_def *.\n\t* config/iq2000/iq2000.h (struct iq2000_args): Use rtx, not struct\n\trtx_def *.\n\t* config/m32c/m32c-protos.h (MM, UINT): Don't define.  Expand\n\tdefinitions where used.\n\t* config/microblaze/microblaze.h (struct microblaze_args): Use\n\trtx, not struct rtx_def *.\n\t* config/pa/pa-protos.h (return_addr_rtx): Use rtx, not struct\n\trtx_def *.\n\t* config/pa/pa.h (hppa_pic_save_rtx): Use rtx, not struct rtx_def\n\t*.\n\t* config/pdp11/pdp11.h (cc0_reg_rtx): Use rtx, not struct rtx_def\n\t*.\n\t* config/sh/sh-protos.h (sfunc_uses_reg, get_fpscr_rtx): Use rtx,\n\tnot struct rtx_def *.\n\t* config/sh/sh.h (sh_compare_op0, sh_compare_op1): Use rtx, not\n\tstruct rtx_def *.\n\t* config/spu/spu-protos.h (spu_float_const): Use rtx, not struct\n\trtx_def *.\n\t* config/spu/spu.c (spu_float_const): Use rtx, not struct rtx_def\n\t*.\n\nFrom-SVN: r172818", "tree": {"sha": "e1f939951f3d7522608c44058d5e49b07b884f86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1f939951f3d7522608c44058d5e49b07b884f86"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/984514ac2eee98afae88c833714fecf12abcf6ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/984514ac2eee98afae88c833714fecf12abcf6ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/984514ac2eee98afae88c833714fecf12abcf6ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/984514ac2eee98afae88c833714fecf12abcf6ac/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b5a27249aa584eb385d9146d94ef1067241e155", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b5a27249aa584eb385d9146d94ef1067241e155", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b5a27249aa584eb385d9146d94ef1067241e155"}], "stats": {"total": 108, "additions": 65, "deletions": 43}, "files": [{"sha": "0519905a43ded2c30c4a682f037767096c28d631", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/984514ac2eee98afae88c833714fecf12abcf6ac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/984514ac2eee98afae88c833714fecf12abcf6ac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=984514ac2eee98afae88c833714fecf12abcf6ac", "patch": "@@ -1,3 +1,33 @@\n+2011-04-21  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/alpha/alpha.c (struct machine_function): Use rtx, not\n+\tstruct rtx_def *.\n+\t* config/bfin/bfin.h (bfin_cc_rtx, bfin_rets_rtx): Use rtx, not\n+\tstruct rtx_def *.\n+\t* config/cris/cris-protos.h (STDIO_INCLUDED): Don't define.\n+\t* config/h8300/h8300.h (struct cum_arg): Use rtx, not struct\n+\trtx_def *.\n+\t* config/iq2000/iq2000.h (struct iq2000_args): Use rtx, not struct\n+\trtx_def *.\n+\t* config/m32c/m32c-protos.h (MM, UINT): Don't define.  Expand\n+\tdefinitions where used.\n+\t* config/microblaze/microblaze.h (struct microblaze_args): Use\n+\trtx, not struct rtx_def *.\n+\t* config/pa/pa-protos.h (return_addr_rtx): Use rtx, not struct\n+\trtx_def *.\n+\t* config/pa/pa.h (hppa_pic_save_rtx): Use rtx, not struct rtx_def\n+\t*.\n+\t* config/pdp11/pdp11.h (cc0_reg_rtx): Use rtx, not struct rtx_def\n+\t*.\n+\t* config/sh/sh-protos.h (sfunc_uses_reg, get_fpscr_rtx): Use rtx,\n+\tnot struct rtx_def *.\n+\t* config/sh/sh.h (sh_compare_op0, sh_compare_op1): Use rtx, not\n+\tstruct rtx_def *.\n+\t* config/spu/spu-protos.h (spu_float_const): Use rtx, not struct\n+\trtx_def *.\n+\t* config/spu/spu.c (spu_float_const): Use rtx, not struct rtx_def\n+\t*.\n+\n 2011-04-21  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* tree-vect-data-refs.c (vect_drs_dependent_in_basic_block): Use"}, {"sha": "72ade3ef2d1f883627aca0b6ed3a1d5080252d6a", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/984514ac2eee98afae88c833714fecf12abcf6ac/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/984514ac2eee98afae88c833714fecf12abcf6ac/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=984514ac2eee98afae88c833714fecf12abcf6ac", "patch": "@@ -4605,7 +4605,7 @@ struct GTY(()) machine_function\n   const char *some_ld_name;\n \n   /* For TARGET_LD_BUGGY_LDGP.  */\n-  struct rtx_def *gp_save_rtx;\n+  rtx gp_save_rtx;\n \n   /* For VMS condition handlers.  */\n   bool uses_condition_handler;  "}, {"sha": "d3bdd5606b43fd9ee3f26ebed098ee428e4c1a89", "filename": "gcc/config/bfin/bfin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/984514ac2eee98afae88c833714fecf12abcf6ac/gcc%2Fconfig%2Fbfin%2Fbfin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/984514ac2eee98afae88c833714fecf12abcf6ac/gcc%2Fconfig%2Fbfin%2Fbfin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.h?ref=984514ac2eee98afae88c833714fecf12abcf6ac", "patch": "@@ -1137,7 +1137,7 @@ do { \t\t\t\t\t\t\\\n #define ASM_OUTPUT_REG_PUSH(FILE, REGNO) fprintf (FILE, \"[SP--] = %s;\\n\", reg_names[REGNO])\n #define ASM_OUTPUT_REG_POP(FILE, REGNO)  fprintf (FILE, \"%s = [SP++];\\n\", reg_names[REGNO])\n \n-extern struct rtx_def *bfin_cc_rtx, *bfin_rets_rtx;\n+extern rtx bfin_cc_rtx, bfin_rets_rtx;\n \n /* This works for GAS and some other assemblers.  */\n #define SET_ASM_OP              \".set \""}, {"sha": "ba91de1d81f32fb07376413543cae6f3d041a77e", "filename": "gcc/config/cris/cris-protos.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/984514ac2eee98afae88c833714fecf12abcf6ac/gcc%2Fconfig%2Fcris%2Fcris-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/984514ac2eee98afae88c833714fecf12abcf6ac/gcc%2Fconfig%2Fcris%2Fcris-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris-protos.h?ref=984514ac2eee98afae88c833714fecf12abcf6ac", "patch": "@@ -1,5 +1,6 @@\n /* Definitions for GCC.  Part of the machine description for CRIS.\n-   Copyright (C) 1998, 1999, 2000, 2001, 2004, 2005, 2006, 2007, 2009, 2010\n+   Copyright (C) 1998, 1999, 2000, 2001, 2004, 2005, 2006, 2007, 2009, 2010,\n+   2011\n    Free Software Foundation, Inc.\n    Contributed by Axis Communications.\n \n@@ -21,10 +22,6 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Prototypes for the CRIS port.  */\n \n-#if defined(FILE) || defined(stdin) || defined(stdout) || defined(getc) || defined(putc)\n-#define STDIO_INCLUDED\n-#endif\n-\n extern bool cris_simple_epilogue (void);\n #ifdef RTX_CODE\n extern const char *cris_op_str (rtx);"}, {"sha": "936aabfa2290e1350aac488c19c4df98454df3cc", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/984514ac2eee98afae88c833714fecf12abcf6ac/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/984514ac2eee98afae88c833714fecf12abcf6ac/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=984514ac2eee98afae88c833714fecf12abcf6ac", "patch": "@@ -463,7 +463,7 @@ enum reg_class {\n struct cum_arg\n {\n   int nbytes;\n-  struct rtx_def *libcall;\n+  rtx libcall;\n };\n \n /* Initialize a variable CUM of type CUMULATIVE_ARGS"}, {"sha": "e909ef94b575e162e1c2b00d79ebc4719819bd52", "filename": "gcc/config/iq2000/iq2000.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/984514ac2eee98afae88c833714fecf12abcf6ac/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/984514ac2eee98afae88c833714fecf12abcf6ac/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.h?ref=984514ac2eee98afae88c833714fecf12abcf6ac", "patch": "@@ -314,7 +314,7 @@ typedef struct iq2000_args\n   int fp_code;\t\t\t/* Mode of FP arguments.  */\n   unsigned int num_adjusts;\t/* Number of adjustments made.  */\n \t\t\t\t/* Adjustments made to args pass in regs.  */\n-  struct rtx_def * adjust[MAX_ARGS_IN_REGISTERS * 2];\n+  rtx adjust[MAX_ARGS_IN_REGISTERS * 2];\n } CUMULATIVE_ARGS;\n \n /* Initialize a variable CUM of type CUMULATIVE_ARGS"}, {"sha": "6c88a1dc9bc442a08396a3b4afc0b6b2ff9ac3b1", "filename": "gcc/config/m32c/m32c-protos.h", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/984514ac2eee98afae88c833714fecf12abcf6ac/gcc%2Fconfig%2Fm32c%2Fm32c-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/984514ac2eee98afae88c833714fecf12abcf6ac/gcc%2Fconfig%2Fm32c%2Fm32c-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c-protos.h?ref=984514ac2eee98afae88c833714fecf12abcf6ac", "patch": "@@ -1,5 +1,5 @@\n /* Target Prototypes for R8C/M16C/M32C\n-   Copyright (C) 2005, 2007, 2008, 2010\n+   Copyright (C) 2005, 2007, 2008, 2010, 2011\n    Free Software Foundation, Inc.\n    Contributed by Red Hat.\n \n@@ -19,12 +19,9 @@\n    along with GCC; see the file COPYING3.  If not see\n    <http://www.gnu.org/licenses/>.  */\n \n-#define MM enum machine_mode\n-#define UINT unsigned int\n-\n void m32c_conditional_register_usage (void);\n int  m32c_const_ok_for_constraint_p (HOST_WIDE_INT, char, const char *);\n-UINT m32c_dwarf_frame_regnum (int);\n+unsigned int m32c_dwarf_frame_regnum (int);\n int  m32c_eh_return_data_regno (int);\n void m32c_emit_epilogue (void);\n void m32c_emit_prologue (void);\n@@ -47,8 +44,8 @@ int  m32c_trampoline_size (void);\n \n #ifdef RTX_CODE\n \n-int  m32c_cannot_change_mode_class (MM, MM, int);\n-int  m32c_class_max_nregs (int, MM);\n+int  m32c_cannot_change_mode_class (enum machine_mode, enum machine_mode, int);\n+int  m32c_class_max_nregs (int, enum machine_mode);\n rtx  m32c_eh_return_stackadj_rtx (void);\n void m32c_emit_eh_epilogue (rtx);\n int  m32c_expand_cmpstr (rtx *);\n@@ -60,28 +57,28 @@ void m32c_expand_neg_mulpsi3 (rtx *);\n int  m32c_expand_setmemhi (rtx *);\n int  m32c_extra_constraint_p (rtx, char, const char *);\n int  m32c_extra_constraint_p2 (rtx, char, const char *);\n-int  m32c_hard_regno_nregs (int, MM);\n-int  m32c_hard_regno_ok (int, MM);\n+int  m32c_hard_regno_nregs (int, enum machine_mode);\n+int  m32c_hard_regno_ok (int, enum machine_mode);\n bool m32c_illegal_subreg_p (rtx);\n-bool m32c_immd_dbl_mov (rtx *, MM);\n+bool m32c_immd_dbl_mov (rtx *, enum machine_mode);\n rtx  m32c_incoming_return_addr_rtx (void);\n-int  m32c_legitimize_reload_address (rtx *, MM, int, int, int);\n-int  m32c_limit_reload_class (MM, int);\n-int  m32c_modes_tieable_p (MM, MM);\n-bool m32c_mov_ok (rtx *, MM);\n+int  m32c_legitimize_reload_address (rtx *, enum machine_mode, int, int, int);\n+int  m32c_limit_reload_class (enum machine_mode, int);\n+int  m32c_modes_tieable_p (enum machine_mode, enum machine_mode);\n+bool m32c_mov_ok (rtx *, enum machine_mode);\n char * m32c_output_compare (rtx, rtx *);\n int  m32c_preferred_output_reload_class (rtx, int);\n int  m32c_preferred_reload_class (rtx, int);\n-int  m32c_prepare_move (rtx *, MM);\n+int  m32c_prepare_move (rtx *, enum machine_mode);\n int  m32c_prepare_shift (rtx *, int, int);\n void m32c_print_operand (FILE *, rtx, int);\n void m32c_print_operand_address (FILE *, rtx);\n int  m32c_reg_ok_for_base_p (rtx, int);\n enum reg_class m32c_regno_reg_class (int);\n rtx  m32c_return_addr_rtx (int);\n const char *m32c_scc_pattern (rtx *, RTX_CODE);\n-int  m32c_secondary_reload_class (int, MM, rtx);\n-int  m32c_split_move (rtx *, MM, int);\n+int  m32c_secondary_reload_class (int, enum machine_mode, rtx);\n+int  m32c_split_move (rtx *, enum machine_mode, int);\n int  m32c_split_psi_p (rtx *);\n int current_function_special_page_vector (rtx);\n \n@@ -97,6 +94,3 @@ void m32c_output_aligned_common (FILE *, tree, const char *,\n \t\t\t\t int, int, int);\n \n #endif\n-\n-#undef MM\n-#undef UINT"}, {"sha": "a667acadaf8486f5c9cf65af4f889ca968a8df6c", "filename": "gcc/config/microblaze/microblaze.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/984514ac2eee98afae88c833714fecf12abcf6ac/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/984514ac2eee98afae88c833714fecf12abcf6ac/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h?ref=984514ac2eee98afae88c833714fecf12abcf6ac", "patch": "@@ -473,7 +473,7 @@ typedef struct microblaze_args\n   /* Adjustments made to args pass in regs.  */\n   /* ??? The size is doubled to work around a bug in the code that sets the \n      adjustments in function_arg.  */\n-  struct rtx_def *adjust[MAX_ARGS_IN_REGISTERS * 2];\n+  rtx adjust[MAX_ARGS_IN_REGISTERS * 2];\n } CUMULATIVE_ARGS;\n \n #define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,FNDECL,N_NAMED_ARGS)\t\\"}, {"sha": "d481c3d0ec2eb04e7022a5ea1e7510b6fd6340bd", "filename": "gcc/config/pa/pa-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/984514ac2eee98afae88c833714fecf12abcf6ac/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/984514ac2eee98afae88c833714fecf12abcf6ac/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-protos.h?ref=984514ac2eee98afae88c833714fecf12abcf6ac", "patch": "@@ -1,5 +1,5 @@\n /* Prototypes for pa.c functions used in the md file & elsewhere.\n-   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2010\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2010, 2011\n    Free Software Foundation,\n    Inc.\n \n@@ -72,7 +72,7 @@ extern int attr_length_save_restore_dltp (rtx);\n \n /* Declare functions defined in pa.c and used in templates.  */\n \n-extern struct rtx_def *return_addr_rtx (int, rtx);\n+extern rtx return_addr_rtx (int, rtx);\n \n #ifdef ARGS_SIZE_RTX\n /* expr.h defines ARGS_SIZE_RTX and `enum direction' */"}, {"sha": "05ebd217f30a2cf22d352bcb7defa5bcca652023", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/984514ac2eee98afae88c833714fecf12abcf6ac/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/984514ac2eee98afae88c833714fecf12abcf6ac/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=984514ac2eee98afae88c833714fecf12abcf6ac", "patch": "@@ -351,7 +351,7 @@ typedef struct GTY(()) machine_function\n \n /* Function to return the rtx used to save the pic offset table register\n    across function calls.  */\n-extern struct rtx_def *hppa_pic_save_rtx (void);\n+extern rtx hppa_pic_save_rtx (void);\n \n #define DEFAULT_PCC_STRUCT_RETURN 0\n "}, {"sha": "85941be540b73a7f3eb71322dfb6a6fedb921ec9", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/984514ac2eee98afae88c833714fecf12abcf6ac/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/984514ac2eee98afae88c833714fecf12abcf6ac/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=984514ac2eee98afae88c833714fecf12abcf6ac", "patch": "@@ -502,7 +502,7 @@ extern int may_call_alloca;\n \n \f\n /* Tell emit-rtl.c how to initialize special values on a per-function base.  */\n-extern struct rtx_def *cc0_reg_rtx;\n+extern rtx cc0_reg_rtx;\n \n #define CC_STATUS_MDEP rtx\n "}, {"sha": "ff94b1072f5de1d46d2727c70870cc5720e8d08a", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/984514ac2eee98afae88c833714fecf12abcf6ac/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/984514ac2eee98afae88c833714fecf12abcf6ac/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=984514ac2eee98afae88c833714fecf12abcf6ac", "patch": "@@ -51,7 +51,7 @@ extern const char *output_movedouble (rtx, rtx[], enum machine_mode);\n extern const char *output_movepcrel (rtx, rtx[], enum machine_mode);\n extern const char *output_far_jump (rtx, rtx);\n \n-extern struct rtx_def *sfunc_uses_reg (rtx);\n+extern rtx sfunc_uses_reg (rtx);\n extern int barrier_align (rtx);\n extern int sh_loop_align (rtx);\n extern int fp_zero_operand (rtx);\n@@ -126,7 +126,7 @@ extern bool sh_vector_mode_supported_p (enum machine_mode);\n \n extern const char *output_jump_label_table (void);\n extern int sh_handle_pragma (int (*)(void), void (*)(int), const char *);\n-extern struct rtx_def *get_fpscr_rtx (void);\n+extern rtx get_fpscr_rtx (void);\n extern int sh_media_register_for_return (void);\n extern void sh_expand_prologue (void);\n extern void sh_expand_epilogue (bool);"}, {"sha": "ef42a1bfc9d9caef3d0ecc44ab899db948ae2531", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/984514ac2eee98afae88c833714fecf12abcf6ac/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/984514ac2eee98afae88c833714fecf12abcf6ac/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=984514ac2eee98afae88c833714fecf12abcf6ac", "patch": "@@ -2291,8 +2291,8 @@ struct sh_args {\n   final_prescan_insn ((INSN), (OPVEC), (NOPERANDS))\n \n \f\n-extern struct rtx_def *sh_compare_op0;\n-extern struct rtx_def *sh_compare_op1;\n+extern rtx sh_compare_op0;\n+extern rtx sh_compare_op1;\n \n /* Which processor to schedule for.  The elements of the enumeration must\n    match exactly the cpu attribute in the sh.md file.  */"}, {"sha": "6774ad9c2bc01bedea57eee881646bb9c6b5b297", "filename": "gcc/config/spu/spu-protos.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/984514ac2eee98afae88c833714fecf12abcf6ac/gcc%2Fconfig%2Fspu%2Fspu-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/984514ac2eee98afae88c833714fecf12abcf6ac/gcc%2Fconfig%2Fspu%2Fspu-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu-protos.h?ref=984514ac2eee98afae88c833714fecf12abcf6ac", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2006, 2007, 2008, 2009, 2010\n+/* Copyright (C) 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n \n    This file is free software; you can redistribute it and/or modify it under\n@@ -42,8 +42,8 @@ extern rtx hwint_to_const_double (enum machine_mode mode, HOST_WIDE_INT v);\n extern rtx spu_const (enum machine_mode mode, HOST_WIDE_INT val);\n extern rtx spu_const_from_ints (enum machine_mode mode, \n \t\t\t        int a, int b, int c, int d);\n-extern struct rtx_def *spu_float_const (const char *string,\n-\t\t\t\t\tenum machine_mode mode);\n+extern rtx spu_float_const (const char *string,\n+\t\t\t    enum machine_mode mode);\n extern int immediate_load_p (rtx op, enum machine_mode mode);\n extern int logical_immediate_p (rtx op, enum machine_mode mode);\n extern int iohl_immediate_p (rtx op, enum machine_mode mode);"}, {"sha": "1ee1c9bdfb3b4ca9691cb32c79b8a3bc0f77e3f5", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/984514ac2eee98afae88c833714fecf12abcf6ac/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/984514ac2eee98afae88c833714fecf12abcf6ac/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=984514ac2eee98afae88c833714fecf12abcf6ac", "patch": "@@ -1,4 +1,5 @@\n-/* Copyright (C) 2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n+/* Copyright (C) 2006, 2007, 2008, 2009, 2010, 2011\n+   Free Software Foundation, Inc.\n \n    This file is free software; you can redistribute it and/or modify it under\n    the terms of the GNU General Public License as published by the Free\n@@ -3313,7 +3314,7 @@ spu_sched_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n }\n \f\n /* Create a CONST_DOUBLE from a string.  */\n-struct rtx_def *\n+rtx\n spu_float_const (const char *string, enum machine_mode mode)\n {\n   REAL_VALUE_TYPE value;"}]}