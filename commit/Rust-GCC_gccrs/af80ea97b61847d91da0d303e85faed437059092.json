{"sha": "af80ea97b61847d91da0d303e85faed437059092", "node_id": "C_kwDOANBUbNoAKGFmODBlYTk3YjYxODQ3ZDkxZGEwZDMwM2U4NWZhZWQ0MzcwNTkwOTI", "commit": {"author": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2022-04-12T21:16:45Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-04-12T21:16:45Z"}, "message": "libgccjit: Add support for sized integer types, including 128-bit integers [PR95325]\n\ngcc/jit/\n\tPR target/95325\n\t* docs/_build/texinfo/libgccjit.texi: Regenerate\n\t* docs/topics/compatibility.rst (LIBGCCJIT_ABI_20): New ABI tag.\n\t* docs/topics/types.rst: Add documentation for the new types\n\tGCC_JIT_TYPE_UINT8_T, GCC_JIT_TYPE_UINT16_T,\n\tGCC_JIT_TYPE_UINT32_T, GCC_JIT_TYPE_UINT64_T,\n\tGCC_JIT_TYPE_UINT128_T, GCC_JIT_TYPE_INT8_T, GCC_JIT_TYPE_INT16_T,\n\tGCC_JIT_TYPE_INT32_T, GCC_JIT_TYPE_INT64_T, GCC_JIT_TYPE_INT128_T and\n\tnew functions (gcc_jit_compatible_types, gcc_jit_type_get_size).\n\t* jit-builtins.cc: Add support for BT_UINT128.\n\t* jit-common.h: Update the value of NUM_GCC_JIT_TYPES.\n\t* jit-playback.cc: Add support for the sized integer types.\n\t* jit-recording.cc: Add support for the sized integer types.\n\t* jit-recording.h: Add support for comparing integer types\n\tand new function (is_signed).\n\t* libgccjit.cc (gcc_jit_compatible_types): New.\n\t(gcc_jit_type_get_size) New.\n\t* libgccjit.h: New enum variants for gcc_jit_types\n\t(GCC_JIT_TYPE_UINT8_T, GCC_JIT_TYPE_UINT16_T,\n\tGCC_JIT_TYPE_UINT32_T, GCC_JIT_TYPE_UINT64_T,\n\tGCC_JIT_TYPE_UINT128_T, GCC_JIT_TYPE_INT8_T,\n\tGCC_JIT_TYPE_INT16_T, GCC_JIT_TYPE_INT32_T,\n\tGCC_JIT_TYPE_INT64_T, GCC_JIT_TYPE_INT128_T) and new functions\n\t(gcc_jit_compatible_types, gcc_jit_type_get_size).\n\t* libgccjit.map (LIBGCCJIT_ABI_20): New ABI tag.\n\ngcc/testsuite/\n\tPR target/95325\n\t* jit.dg/test-types.c: Add tests for sized integer types.", "tree": {"sha": "88bd7c9a068ead6db362db4dc97907fe76d68669", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88bd7c9a068ead6db362db4dc97907fe76d68669"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af80ea97b61847d91da0d303e85faed437059092", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af80ea97b61847d91da0d303e85faed437059092", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af80ea97b61847d91da0d303e85faed437059092", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af80ea97b61847d91da0d303e85faed437059092/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "791a968630b3846b614a435b9a75a52f29147a08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/791a968630b3846b614a435b9a75a52f29147a08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/791a968630b3846b614a435b9a75a52f29147a08"}], "stats": {"total": 2084, "additions": 1352, "deletions": 732}, "files": [{"sha": "60ad3cbac14e8280e81b76e8517c93f364a628a8", "filename": "gcc/jit/docs/_build/texinfo/libgccjit.texi", "status": "modified", "additions": 888, "deletions": 715, "changes": 1603, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af80ea97b61847d91da0d303e85faed437059092/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af80ea97b61847d91da0d303e85faed437059092/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi?ref=af80ea97b61847d91da0d303e85faed437059092"}, {"sha": "297104abd0f1832b527acc65a4ad92f9ee2492bb", "filename": "gcc/jit/docs/topics/compatibility.rst", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af80ea97b61847d91da0d303e85faed437059092/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompatibility.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af80ea97b61847d91da0d303e85faed437059092/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompatibility.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompatibility.rst?ref=af80ea97b61847d91da0d303e85faed437059092", "patch": "@@ -314,3 +314,23 @@ of a global with an rvalue and to use constructors:\n   * :func:`gcc_jit_context_new_struct_constructor`\n   * :func:`gcc_jit_context_new_union_constructor`\n   * :func:`gcc_jit_global_set_initializer_rvalue`\n+\n+.. _LIBGCCJIT_ABI_20:\n+\n+``LIBGCCJIT_ABI_20``\n+-----------------------\n+``LIBGCCJIT_ABI_20`` covers the addition of sized integer types, including\n+128-bit integers and helper functions for types:\n+\n+  * :func:`gcc_jit_compatible_types`\n+  * :func:`gcc_jit_type_get_size`\n+  * :c:macro:`GCC_JIT_TYPE_UINT8_T`\n+  * :c:macro:`GCC_JIT_TYPE_UINT16_T`\n+  * :c:macro:`GCC_JIT_TYPE_UINT32_T`\n+  * :c:macro:`GCC_JIT_TYPE_UINT64_T`\n+  * :c:macro:`GCC_JIT_TYPE_UINT128_T`\n+  * :c:macro:`GCC_JIT_TYPE_INT8_T`\n+  * :c:macro:`GCC_JIT_TYPE_INT16_T`\n+  * :c:macro:`GCC_JIT_TYPE_INT32_T`\n+  * :c:macro:`GCC_JIT_TYPE_INT64_T`\n+  * :c:macro:`GCC_JIT_TYPE_INT128_T`"}, {"sha": "db7fac6b267a47fda53bc659e5c7c950cc289f31", "filename": "gcc/jit/docs/topics/types.rst", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af80ea97b61847d91da0d303e85faed437059092/gcc%2Fjit%2Fdocs%2Ftopics%2Ftypes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af80ea97b61847d91da0d303e85faed437059092/gcc%2Fjit%2Fdocs%2Ftopics%2Ftypes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Ftypes.rst?ref=af80ea97b61847d91da0d303e85faed437059092", "patch": "@@ -76,6 +76,16 @@ Standard types\n    :c:data:`GCC_JIT_TYPE_UNSIGNED_LONG`        C's ``unsigned long``\n    :c:data:`GCC_JIT_TYPE_LONG_LONG`            C99's ``long long`` (signed)\n    :c:data:`GCC_JIT_TYPE_UNSIGNED_LONG_LONG`   C99's ``unsigned long long``\n+   :c:data:`GCC_JIT_TYPE_UINT8_T`              C99's ``uint8_t``\n+   :c:data:`GCC_JIT_TYPE_UINT16_T`             C99's ``uint16_t``\n+   :c:data:`GCC_JIT_TYPE_UINT32_T`             C99's ``uint32_t``\n+   :c:data:`GCC_JIT_TYPE_UINT64_T`             C99's ``uint64_t``\n+   :c:data:`GCC_JIT_TYPE_UINT128_T`            C99's ``__uint128_t``\n+   :c:data:`GCC_JIT_TYPE_INT8_T`               C99's ``int8_t``\n+   :c:data:`GCC_JIT_TYPE_INT16_T`              C99's ``int16_t``\n+   :c:data:`GCC_JIT_TYPE_INT32_T`              C99's ``int32_t``\n+   :c:data:`GCC_JIT_TYPE_INT64_T`              C99's ``int64_t``\n+   :c:data:`GCC_JIT_TYPE_INT128_T`             C99's ``__int128_t``\n    :c:data:`GCC_JIT_TYPE_FLOAT`\n    :c:data:`GCC_JIT_TYPE_DOUBLE`\n    :c:data:`GCC_JIT_TYPE_LONG_DOUBLE`\n@@ -467,3 +477,34 @@ Reflection API\n       #ifdef LIBGCCJIT_HAVE_REFLECTION\n \n    .. type:: gcc_jit_case\n+\n+.. function::  int\\\n+               gcc_jit_compatible_types (gcc_jit_type *ltype,\\\n+                                         gcc_jit_type *rtype)\n+\n+     Return non-zero if the two types are compatible. For instance,\n+     if :c:data:`GCC_JIT_TYPE_UINT64_T` and :c:data:`GCC_JIT_TYPE_UNSIGNED_LONG`\n+     are the same size on the target, this will return non-zero.\n+     The parameters ``ltype`` and ``rtype`` must be non-NULL.\n+     Return 0 on errors.\n+\n+   This entrypoint was added in :ref:`LIBGCCJIT_ABI_20`; you can test for\n+   its presence using\n+\n+   .. code-block:: c\n+\n+      #ifdef LIBGCCJIT_HAVE_SIZED_INTEGERS\n+\n+.. function::  ssize_t\\\n+               gcc_jit_type_get_size (gcc_jit_type *type)\n+\n+     Return the size of a type, in bytes. It only works on integer types for now.\n+     The parameter ``type`` must be non-NULL.\n+     Return -1 on errors.\n+\n+   This entrypoint was added in :ref:`LIBGCCJIT_ABI_20`; you can test for\n+   its presence using\n+\n+   .. code-block:: c\n+\n+      #ifdef LIBGCCJIT_HAVE_SIZED_INTEGERS"}, {"sha": "b949b734332438e69bd020e364ca35849bf8ce44", "filename": "gcc/jit/jit-builtins.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af80ea97b61847d91da0d303e85faed437059092/gcc%2Fjit%2Fjit-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af80ea97b61847d91da0d303e85faed437059092/gcc%2Fjit%2Fjit-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-builtins.cc?ref=af80ea97b61847d91da0d303e85faed437059092", "patch": "@@ -483,6 +483,7 @@ builtins_manager::make_primitive_type (enum jit_builtin_type type_id)\n     case BT_UINT16: return m_ctxt->get_int_type (2, false);\n     case BT_UINT32: return m_ctxt->get_int_type (4, false);\n     case BT_UINT64: return m_ctxt->get_int_type (8, false);\n+    case BT_UINT128: return m_ctxt->get_int_type (16, false);\n     // case BT_WORD:\n     // case BT_UNWINDWORD:\n     case BT_FLOAT: return m_ctxt->get_type (GCC_JIT_TYPE_FLOAT);"}, {"sha": "8c52ddf80e1f742b9644bd8902464b3a2a3e8abd", "filename": "gcc/jit/jit-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af80ea97b61847d91da0d303e85faed437059092/gcc%2Fjit%2Fjit-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af80ea97b61847d91da0d303e85faed437059092/gcc%2Fjit%2Fjit-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-common.h?ref=af80ea97b61847d91da0d303e85faed437059092", "patch": "@@ -36,7 +36,7 @@ along with GCC; see the file COPYING3.  If not see\n #endif\n #endif\n \n-const int NUM_GCC_JIT_TYPES = GCC_JIT_TYPE_COMPLEX_LONG_DOUBLE + 1;\n+const int NUM_GCC_JIT_TYPES = GCC_JIT_TYPE_INT128_T + 1;\n \n /* This comment is included by the docs.\n "}, {"sha": "3133d3076ebc81deff3f55366b687eb04c735600", "filename": "gcc/jit/jit-playback.cc", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af80ea97b61847d91da0d303e85faed437059092/gcc%2Fjit%2Fjit-playback.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af80ea97b61847d91da0d303e85faed437059092/gcc%2Fjit%2Fjit-playback.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.cc?ref=af80ea97b61847d91da0d303e85faed437059092", "patch": "@@ -237,6 +237,38 @@ get_tree_node_for_type (enum gcc_jit_types type_)\n     case GCC_JIT_TYPE_UNSIGNED_INT:\n       return unsigned_type_node;\n \n+    case GCC_JIT_TYPE_UINT8_T:\n+      return unsigned_intQI_type_node;\n+    case GCC_JIT_TYPE_UINT16_T:\n+      return uint16_type_node;\n+    case GCC_JIT_TYPE_UINT32_T:\n+      return uint32_type_node;\n+    case GCC_JIT_TYPE_UINT64_T:\n+      return uint64_type_node;\n+    case GCC_JIT_TYPE_UINT128_T:\n+      if (targetm.scalar_mode_supported_p (TImode))\n+\treturn uint128_type_node;\n+\n+      add_error (NULL, \"gcc_jit_types value unsupported on this target: %i\",\n+\t\t type_);\n+      return NULL;\n+\n+    case GCC_JIT_TYPE_INT8_T:\n+      return intQI_type_node;\n+    case GCC_JIT_TYPE_INT16_T:\n+      return intHI_type_node;\n+    case GCC_JIT_TYPE_INT32_T:\n+      return intSI_type_node;\n+    case GCC_JIT_TYPE_INT64_T:\n+      return intDI_type_node;\n+    case GCC_JIT_TYPE_INT128_T:\n+      if (targetm.scalar_mode_supported_p (TImode))\n+\treturn intTI_type_node;\n+\n+      add_error (NULL, \"gcc_jit_types value unsupported on this target: %i\",\n+\t\t type_);\n+      return NULL;\n+\n     case GCC_JIT_TYPE_LONG:\n       return long_integer_type_node;\n     case GCC_JIT_TYPE_UNSIGNED_LONG:\n@@ -268,6 +300,9 @@ get_tree_node_for_type (enum gcc_jit_types type_)\n       return complex_long_double_type_node;\n     }\n \n+  add_error (NULL, \"unrecognized (enum gcc_jit_types) value: %i\",\n+\t     type_);\n+\n   return NULL;\n }\n \n@@ -280,10 +315,7 @@ get_type (enum gcc_jit_types type_)\n {\n   tree type_node = get_tree_node_for_type (type_);\n   if (type_node == NULL)\n-    {\n-      add_error (NULL, \"unrecognized (enum gcc_jit_types) value: %i\", type_);\n-      return NULL;\n-    }\n+    return NULL;\n \n   return new type (type_node);\n }"}, {"sha": "4ffdad0665ff625e531bb4b8c2769152fbfcaf64", "filename": "gcc/jit/jit-recording.cc", "status": "modified", "additions": 144, "deletions": 2, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af80ea97b61847d91da0d303e85faed437059092/gcc%2Fjit%2Fjit-recording.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af80ea97b61847d91da0d303e85faed437059092/gcc%2Fjit%2Fjit-recording.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.cc?ref=af80ea97b61847d91da0d303e85faed437059092", "patch": "@@ -822,6 +822,10 @@ recording::context::get_int_type (int num_bytes, int is_signed)\n     return get_type (is_signed\n \t\t     ? GCC_JIT_TYPE_LONG_LONG\n \t\t     : GCC_JIT_TYPE_UNSIGNED_LONG_LONG);\n+  if (num_bits == 128)\n+    return get_type (is_signed\n+\t\t     ? GCC_JIT_TYPE_INT128_T\n+\t\t     : GCC_JIT_TYPE_UINT128_T);\n \n   /* Some other size, not corresponding to the C int types.  */\n   /* To be written: support arbitrary other sizes, sharing by\n@@ -2325,6 +2329,26 @@ recording::memento_of_get_type::get_size ()\n     case GCC_JIT_TYPE_UNSIGNED_LONG_LONG:\n       size = LONG_LONG_TYPE_SIZE;\n       break;\n+    case GCC_JIT_TYPE_UINT8_T:\n+    case GCC_JIT_TYPE_INT8_T:\n+      size = 8;\n+      break;\n+    case GCC_JIT_TYPE_UINT16_T:\n+    case GCC_JIT_TYPE_INT16_T:\n+      size = 16;\n+      break;\n+    case GCC_JIT_TYPE_UINT32_T:\n+    case GCC_JIT_TYPE_INT32_T:\n+      size = 32;\n+      break;\n+    case GCC_JIT_TYPE_UINT64_T:\n+    case GCC_JIT_TYPE_INT64_T:\n+      size = 64;\n+      break;\n+    case GCC_JIT_TYPE_UINT128_T:\n+    case GCC_JIT_TYPE_INT128_T:\n+      size = 128;\n+      break;\n     case GCC_JIT_TYPE_FLOAT:\n       size = FLOAT_TYPE_SIZE;\n       break;\n@@ -2334,6 +2358,9 @@ recording::memento_of_get_type::get_size ()\n     case GCC_JIT_TYPE_LONG_DOUBLE:\n       size = LONG_DOUBLE_TYPE_SIZE;\n       break;\n+    case GCC_JIT_TYPE_SIZE_T:\n+      size = MAX_BITS_PER_WORD;\n+      break;\n     default:\n       /* As this function is called by\n \t 'gcc_jit_global_set_initializer' and\n@@ -2373,6 +2400,16 @@ recording::memento_of_get_type::dereference ()\n     case GCC_JIT_TYPE_UNSIGNED_LONG:\n     case GCC_JIT_TYPE_LONG_LONG:\n     case GCC_JIT_TYPE_UNSIGNED_LONG_LONG:\n+    case GCC_JIT_TYPE_UINT8_T:\n+    case GCC_JIT_TYPE_UINT16_T:\n+    case GCC_JIT_TYPE_UINT32_T:\n+    case GCC_JIT_TYPE_UINT64_T:\n+    case GCC_JIT_TYPE_UINT128_T:\n+    case GCC_JIT_TYPE_INT8_T:\n+    case GCC_JIT_TYPE_INT16_T:\n+    case GCC_JIT_TYPE_INT32_T:\n+    case GCC_JIT_TYPE_INT64_T:\n+    case GCC_JIT_TYPE_INT128_T:\n     case GCC_JIT_TYPE_FLOAT:\n     case GCC_JIT_TYPE_DOUBLE:\n     case GCC_JIT_TYPE_LONG_DOUBLE:\n@@ -2425,6 +2462,16 @@ recording::memento_of_get_type::is_int () const\n     case GCC_JIT_TYPE_UNSIGNED_LONG:\n     case GCC_JIT_TYPE_LONG_LONG:\n     case GCC_JIT_TYPE_UNSIGNED_LONG_LONG:\n+    case GCC_JIT_TYPE_UINT8_T:\n+    case GCC_JIT_TYPE_UINT16_T:\n+    case GCC_JIT_TYPE_UINT32_T:\n+    case GCC_JIT_TYPE_UINT64_T:\n+    case GCC_JIT_TYPE_UINT128_T:\n+    case GCC_JIT_TYPE_INT8_T:\n+    case GCC_JIT_TYPE_INT16_T:\n+    case GCC_JIT_TYPE_INT32_T:\n+    case GCC_JIT_TYPE_INT64_T:\n+    case GCC_JIT_TYPE_INT128_T:\n       return true;\n \n     case GCC_JIT_TYPE_FLOAT:\n@@ -2448,6 +2495,60 @@ recording::memento_of_get_type::is_int () const\n     }\n }\n \n+/* Implementation of pure virtual hook recording::type::is_signed for\n+   recording::memento_of_get_type.  */\n+\n+bool\n+recording::memento_of_get_type::is_signed () const\n+{\n+  switch (m_kind)\n+    {\n+    default: gcc_unreachable ();\n+\n+    case GCC_JIT_TYPE_SIGNED_CHAR:\n+    case GCC_JIT_TYPE_CHAR:\n+    case GCC_JIT_TYPE_SHORT:\n+    case GCC_JIT_TYPE_INT:\n+    case GCC_JIT_TYPE_LONG:\n+    case GCC_JIT_TYPE_LONG_LONG:\n+    case GCC_JIT_TYPE_INT8_T:\n+    case GCC_JIT_TYPE_INT16_T:\n+    case GCC_JIT_TYPE_INT32_T:\n+    case GCC_JIT_TYPE_INT64_T:\n+    case GCC_JIT_TYPE_INT128_T:\n+      return true;\n+\n+    case GCC_JIT_TYPE_VOID:\n+    case GCC_JIT_TYPE_VOID_PTR:\n+    case GCC_JIT_TYPE_BOOL:\n+    case GCC_JIT_TYPE_UNSIGNED_CHAR:\n+    case GCC_JIT_TYPE_UNSIGNED_SHORT:\n+    case GCC_JIT_TYPE_UNSIGNED_INT:\n+    case GCC_JIT_TYPE_UNSIGNED_LONG:\n+    case GCC_JIT_TYPE_UNSIGNED_LONG_LONG:\n+    case GCC_JIT_TYPE_UINT8_T:\n+    case GCC_JIT_TYPE_UINT16_T:\n+    case GCC_JIT_TYPE_UINT32_T:\n+    case GCC_JIT_TYPE_UINT64_T:\n+    case GCC_JIT_TYPE_UINT128_T:\n+\n+    case GCC_JIT_TYPE_FLOAT:\n+    case GCC_JIT_TYPE_DOUBLE:\n+    case GCC_JIT_TYPE_LONG_DOUBLE:\n+\n+    case GCC_JIT_TYPE_CONST_CHAR_PTR:\n+\n+    case GCC_JIT_TYPE_SIZE_T:\n+\n+    case GCC_JIT_TYPE_FILE_PTR:\n+\n+    case GCC_JIT_TYPE_COMPLEX_FLOAT:\n+    case GCC_JIT_TYPE_COMPLEX_DOUBLE:\n+    case GCC_JIT_TYPE_COMPLEX_LONG_DOUBLE:\n+      return false;\n+    }\n+}\n+\n /* Implementation of pure virtual hook recording::type::is_float for\n    recording::memento_of_get_type.  */\n \n@@ -2478,6 +2579,16 @@ recording::memento_of_get_type::is_float () const\n     case GCC_JIT_TYPE_UNSIGNED_LONG:\n     case GCC_JIT_TYPE_LONG_LONG:\n     case GCC_JIT_TYPE_UNSIGNED_LONG_LONG:\n+    case GCC_JIT_TYPE_UINT8_T:\n+    case GCC_JIT_TYPE_UINT16_T:\n+    case GCC_JIT_TYPE_UINT32_T:\n+    case GCC_JIT_TYPE_UINT64_T:\n+    case GCC_JIT_TYPE_UINT128_T:\n+    case GCC_JIT_TYPE_INT8_T:\n+    case GCC_JIT_TYPE_INT16_T:\n+    case GCC_JIT_TYPE_INT32_T:\n+    case GCC_JIT_TYPE_INT64_T:\n+    case GCC_JIT_TYPE_INT128_T:\n       return false;\n \n     case GCC_JIT_TYPE_FLOAT:\n@@ -2531,6 +2642,16 @@ recording::memento_of_get_type::is_bool () const\n     case GCC_JIT_TYPE_UNSIGNED_LONG:\n     case GCC_JIT_TYPE_LONG_LONG:\n     case GCC_JIT_TYPE_UNSIGNED_LONG_LONG:\n+    case GCC_JIT_TYPE_UINT8_T:\n+    case GCC_JIT_TYPE_UINT16_T:\n+    case GCC_JIT_TYPE_UINT32_T:\n+    case GCC_JIT_TYPE_UINT64_T:\n+    case GCC_JIT_TYPE_UINT128_T:\n+    case GCC_JIT_TYPE_INT8_T:\n+    case GCC_JIT_TYPE_INT16_T:\n+    case GCC_JIT_TYPE_INT32_T:\n+    case GCC_JIT_TYPE_INT64_T:\n+    case GCC_JIT_TYPE_INT128_T:\n       return false;\n \n     case GCC_JIT_TYPE_FLOAT:\n@@ -2601,7 +2722,18 @@ static const char * const get_type_strings[] = {\n \n   \"complex float\", /* GCC_JIT_TYPE_COMPLEX_FLOAT */\n   \"complex double\", /* GCC_JIT_TYPE_COMPLEX_DOUBLE */\n-  \"complex long double\"  /* GCC_JIT_TYPE_COMPLEX_LONG_DOUBLE */\n+  \"complex long double\",  /* GCC_JIT_TYPE_COMPLEX_LONG_DOUBLE */\n+\n+  \"__uint8_t\",    /* GCC_JIT_TYPE_UINT8_T */\n+  \"__uint16_t\",   /* GCC_JIT_TYPE_UINT16_T */\n+  \"__uint32_t\",   /* GCC_JIT_TYPE_UINT32_T */\n+  \"__uint64_t\",   /* GCC_JIT_TYPE_UINT64_T */\n+  \"__uint128_t\",  /* GCC_JIT_TYPE_UINT128_T */\n+  \"__int8_t\",     /* GCC_JIT_TYPE_INT8_T */\n+  \"__int16_t\",    /* GCC_JIT_TYPE_INT16_T */\n+  \"__int32_t\",    /* GCC_JIT_TYPE_INT32_T */\n+  \"__int64_t\",    /* GCC_JIT_TYPE_INT64_T */\n+  \"__int128_t\",   /* GCC_JIT_TYPE_INT128_T */\n \n };\n \n@@ -2637,7 +2769,17 @@ static const char * const get_type_enum_strings[] = {\n   \"GCC_JIT_TYPE_FILE_PTR\",\n   \"GCC_JIT_TYPE_COMPLEX_FLOAT\",\n   \"GCC_JIT_TYPE_COMPLEX_DOUBLE\",\n-  \"GCC_JIT_TYPE_COMPLEX_LONG_DOUBLE\"\n+  \"GCC_JIT_TYPE_COMPLEX_LONG_DOUBLE\",\n+  \"GCC_JIT_TYPE_UINT8_T\",\n+  \"GCC_JIT_TYPE_UINT16_T\",\n+  \"GCC_JIT_TYPE_UINT32_T\",\n+  \"GCC_JIT_TYPE_UINT64_T\",\n+  \"GCC_JIT_TYPE_UINT128_T\",\n+  \"GCC_JIT_TYPE_INT8_T\",\n+  \"GCC_JIT_TYPE_INT16_T\",\n+  \"GCC_JIT_TYPE_INT32_T\",\n+  \"GCC_JIT_TYPE_INT64_T\",\n+  \"GCC_JIT_TYPE_INT128_T\",\n };\n \n void"}, {"sha": "cf668e70e482b64e91a7ba71c11fdfd29c410294", "filename": "gcc/jit/jit-recording.h", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af80ea97b61847d91da0d303e85faed437059092/gcc%2Fjit%2Fjit-recording.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af80ea97b61847d91da0d303e85faed437059092/gcc%2Fjit%2Fjit-recording.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.h?ref=af80ea97b61847d91da0d303e85faed437059092", "patch": "@@ -564,6 +564,7 @@ class type : public memento\n   virtual bool is_void () const { return false; }\n   virtual vector_type *is_vector () { return NULL; }\n   virtual bool has_known_size () const { return true; }\n+  virtual bool is_signed () const = 0;\n \n   bool is_numeric () const\n   {\n@@ -604,12 +605,21 @@ class memento_of_get_type : public type\n   bool accepts_writes_from (type *rtype) FINAL OVERRIDE\n   {\n     if (m_kind == GCC_JIT_TYPE_VOID_PTR)\n-      if (rtype->is_pointer ())\n-\t{\n-\t  /* LHS (this) is type (void *), and the RHS is a pointer:\n-\t     accept it:  */\n-\t  return true;\n-\t}\n+      {\n+\tif (rtype->is_pointer ())\n+\t  {\n+\t    /* LHS (this) is type (void *), and the RHS is a pointer:\n+\t       accept it:  */\n+\t    return true;\n+\t  }\n+      } else if (is_int ()\n+\t\t && rtype->is_int ()\n+\t\t && get_size () == rtype->get_size ()\n+\t\t && is_signed () == rtype->is_signed ())\n+      {\n+\t/* LHS (this) is an integer of the same size and sign as rtype.  */\n+\treturn true;\n+      }\n \n     return type::accepts_writes_from (rtype);\n   }\n@@ -620,6 +630,7 @@ class memento_of_get_type : public type\n   type *is_pointer () FINAL OVERRIDE { return dereference (); }\n   type *is_array () FINAL OVERRIDE { return NULL; }\n   bool is_void () const FINAL OVERRIDE { return m_kind == GCC_JIT_TYPE_VOID; }\n+  bool is_signed () const FINAL OVERRIDE;\n \n public:\n   void replay_into (replayer *r) FINAL OVERRIDE;\n@@ -653,6 +664,7 @@ class memento_of_get_pointer : public type\n   bool is_bool () const FINAL OVERRIDE { return false; }\n   type *is_pointer () FINAL OVERRIDE { return m_other_type; }\n   type *is_array () FINAL OVERRIDE { return NULL; }\n+  bool is_signed () const FINAL OVERRIDE { return false; }\n \n private:\n   string * make_debug_string () FINAL OVERRIDE;\n@@ -674,12 +686,15 @@ class decorated_type : public type\n \n   type *dereference () FINAL OVERRIDE { return m_other_type->dereference (); }\n \n+  size_t get_size () FINAL OVERRIDE { return m_other_type->get_size (); };\n+\n   bool is_int () const FINAL OVERRIDE { return m_other_type->is_int (); }\n   bool is_float () const FINAL OVERRIDE { return m_other_type->is_float (); }\n   bool is_bool () const FINAL OVERRIDE { return m_other_type->is_bool (); }\n   type *is_pointer () FINAL OVERRIDE { return m_other_type->is_pointer (); }\n   type *is_array () FINAL OVERRIDE { return m_other_type->is_array (); }\n   struct_ *is_struct () FINAL OVERRIDE { return m_other_type->is_struct (); }\n+  bool is_signed () const FINAL OVERRIDE { return m_other_type->is_signed (); }\n \n protected:\n   type *m_other_type;\n@@ -811,6 +826,7 @@ class array_type : public type\n   type *is_pointer () FINAL OVERRIDE { return NULL; }\n   type *is_array () FINAL OVERRIDE { return m_element_type; }\n   int num_elements () { return m_num_elements; }\n+  bool is_signed () const FINAL OVERRIDE { return false; }\n \n   void replay_into (replayer *) FINAL OVERRIDE;\n \n@@ -844,6 +860,7 @@ class function_type : public type\n   bool is_bool () const FINAL OVERRIDE { return false; }\n   type *is_pointer () FINAL OVERRIDE { return NULL; }\n   type *is_array () FINAL OVERRIDE { return NULL; }\n+  bool is_signed () const FINAL OVERRIDE { return false; }\n \n   void replay_into (replayer *) FINAL OVERRIDE;\n \n@@ -957,6 +974,7 @@ class compound_type : public type\n   bool is_bool () const FINAL OVERRIDE { return false; }\n   type *is_pointer () FINAL OVERRIDE { return NULL; }\n   type *is_array () FINAL OVERRIDE { return NULL; }\n+  bool is_signed () const FINAL OVERRIDE { return false; }\n \n   bool has_known_size () const FINAL OVERRIDE { return m_fields != NULL; }\n "}, {"sha": "44395d773c661e29dfffc735a67753a1c9ab9f46", "filename": "gcc/jit/libgccjit.cc", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af80ea97b61847d91da0d303e85faed437059092/gcc%2Fjit%2Flibgccjit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af80ea97b61847d91da0d303e85faed437059092/gcc%2Fjit%2Flibgccjit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.cc?ref=af80ea97b61847d91da0d303e85faed437059092", "patch": "@@ -352,6 +352,17 @@ compatible_types (gcc::jit::recording::type *ltype,\n   return ltype->accepts_writes_from (rtype);\n }\n \n+/* Public entrypoint wrapping compatible_types.  */\n+\n+int\n+gcc_jit_compatible_types (gcc_jit_type *ltype,\n+\t\t\t  gcc_jit_type *rtype)\n+{\n+  RETURN_VAL_IF_FAIL (ltype, 0, NULL, NULL, \"NULL ltype\");\n+  RETURN_VAL_IF_FAIL (rtype, 0, NULL, NULL, \"NULL rtype\");\n+  return compatible_types (ltype, rtype);\n+}\n+\n /* Public entrypoint for acquiring a gcc_jit_context.\n    Note that this creates a new top-level context; contrast with\n    gcc_jit_context_new_child_context below.\n@@ -456,7 +467,7 @@ gcc_jit_context_get_type (gcc_jit_context *ctxt,\n   JIT_LOG_FUNC (ctxt->get_logger ());\n   RETURN_NULL_IF_FAIL_PRINTF1 (\n     (type >= GCC_JIT_TYPE_VOID\n-     && type <= GCC_JIT_TYPE_FILE_PTR),\n+     && type < NUM_GCC_JIT_TYPES),\n     ctxt, NULL,\n     \"unrecognized value for enum gcc_jit_types: %i\", type);\n \n@@ -523,6 +534,22 @@ gcc_jit_type_get_volatile (gcc_jit_type *type)\n   return (gcc_jit_type *)type->get_volatile ();\n }\n \n+/* Public entrypoint.  See description in libgccjit.h.\n+\n+   After error-checking, the real work is done by the\n+   gcc::jit::recording::type::get_size method, in\n+   jit-recording.cc.  */\n+\n+ssize_t\n+gcc_jit_type_get_size (gcc_jit_type *type)\n+{\n+  RETURN_VAL_IF_FAIL (type, -1, NULL, NULL, \"NULL type\");\n+  RETURN_VAL_IF_FAIL\n+    (type->is_int (), -1, NULL, NULL,\n+     \"only getting the size of an integer type is supported for now\");\n+  return type->get_size ();\n+}\n+\n /* Public entrypoint.  See description in libgccjit.h.\n \n    After error-checking, the real work is done by the\n@@ -2119,7 +2146,8 @@ gcc_jit_context_new_binary_op (gcc_jit_context *ctxt,\n   RETURN_NULL_IF_FAIL (a, ctxt, loc, \"NULL a\");\n   RETURN_NULL_IF_FAIL (b, ctxt, loc, \"NULL b\");\n   RETURN_NULL_IF_FAIL_PRINTF4 (\n-    a->get_type ()->unqualified () == b->get_type ()->unqualified (),\n+    compatible_types (a->get_type ()->unqualified (),\n+\t\t      b->get_type ()->unqualified ()),\n     ctxt, loc,\n     \"mismatching types for binary op:\"\n     \" a: %s (type: %s) b: %s (type: %s)\","}, {"sha": "5d3f5d58c5d236e37713c7e5b8d7521c8547dd97", "filename": "gcc/jit/libgccjit.h", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af80ea97b61847d91da0d303e85faed437059092/gcc%2Fjit%2Flibgccjit.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af80ea97b61847d91da0d303e85faed437059092/gcc%2Fjit%2Flibgccjit.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.h?ref=af80ea97b61847d91da0d303e85faed437059092", "patch": "@@ -574,8 +574,19 @@ enum gcc_jit_types\n   /* Complex numbers.  */\n   GCC_JIT_TYPE_COMPLEX_FLOAT,\n   GCC_JIT_TYPE_COMPLEX_DOUBLE,\n-  GCC_JIT_TYPE_COMPLEX_LONG_DOUBLE\n-\n+  GCC_JIT_TYPE_COMPLEX_LONG_DOUBLE,\n+\n+  /* Sized integer types.  */\n+  GCC_JIT_TYPE_UINT8_T,\n+  GCC_JIT_TYPE_UINT16_T,\n+  GCC_JIT_TYPE_UINT32_T,\n+  GCC_JIT_TYPE_UINT64_T,\n+  GCC_JIT_TYPE_UINT128_T,\n+  GCC_JIT_TYPE_INT8_T,\n+  GCC_JIT_TYPE_INT16_T,\n+  GCC_JIT_TYPE_INT32_T,\n+  GCC_JIT_TYPE_INT64_T,\n+  GCC_JIT_TYPE_INT128_T\n };\n \n extern gcc_jit_type *\n@@ -601,6 +612,23 @@ gcc_jit_type_get_const (gcc_jit_type *type);\n extern gcc_jit_type *\n gcc_jit_type_get_volatile (gcc_jit_type *type);\n \n+#define LIBGCCJIT_HAVE_SIZED_INTEGERS\n+\n+/* Given types LTYPE and RTYPE, return non-zero if they are compatible.\n+   This API entrypoint was added in LIBGCCJIT_ABI_20; you can test for its\n+   presence using\n+     #ifdef LIBGCCJIT_HAVE_SIZED_INTEGERS  */\n+extern int\n+gcc_jit_compatible_types (gcc_jit_type *ltype,\n+\t\t\t  gcc_jit_type *rtype);\n+\n+/* Given type \"T\", get its size.\n+   This API entrypoint was added in LIBGCCJIT_ABI_20; you can test for its\n+   presence using\n+     #ifdef LIBGCCJIT_HAVE_SIZED_INTEGERS  */\n+extern ssize_t\n+gcc_jit_type_get_size (gcc_jit_type *type);\n+\n /* Given type \"T\", get type \"T[N]\" (for a constant N).  */\n extern gcc_jit_type *\n gcc_jit_context_new_array_type (gcc_jit_context *ctxt,"}, {"sha": "1c002786e84f8b0ad18632ea91316ddf50a95361", "filename": "gcc/jit/libgccjit.map", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af80ea97b61847d91da0d303e85faed437059092/gcc%2Fjit%2Flibgccjit.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af80ea97b61847d91da0d303e85faed437059092/gcc%2Fjit%2Flibgccjit.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.map?ref=af80ea97b61847d91da0d303e85faed437059092", "patch": "@@ -243,3 +243,9 @@ LIBGCCJIT_ABI_19 {\n     gcc_jit_context_new_union_constructor;\n     gcc_jit_global_set_initializer_rvalue;\n } LIBGCCJIT_ABI_18;\n+\n+LIBGCCJIT_ABI_20 {\n+  global:\n+    gcc_jit_compatible_types;\n+    gcc_jit_type_get_size;\n+} LIBGCCJIT_ABI_19;"}, {"sha": "6836597d14e5963fc9ac44faa5816a9661f6997b", "filename": "gcc/testsuite/jit.dg/test-types.c", "status": "modified", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af80ea97b61847d91da0d303e85faed437059092/gcc%2Ftestsuite%2Fjit.dg%2Ftest-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af80ea97b61847d91da0d303e85faed437059092/gcc%2Ftestsuite%2Fjit.dg%2Ftest-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-types.c?ref=af80ea97b61847d91da0d303e85faed437059092", "patch": "@@ -1,3 +1,4 @@\n+#include <stdint.h>\n #include <stdlib.h>\n #include <stdio.h>\n #include <stddef.h>\n@@ -29,6 +30,21 @@ struct zoo\n   long long m_long_long;\n   unsigned long long m_unsigned_long_long;\n \n+  uint8_t m_u8;\n+  uint16_t m_u16;\n+  uint32_t m_u32;\n+  uint64_t m_u64;\n+\n+  int8_t m_i8;\n+  int16_t m_i16;\n+  int32_t m_i32;\n+  int64_t m_i64;\n+\n+#ifdef __SIZEOF_INT128__\n+  __uint128_t m_u128;\n+  __int128_t m_i128;\n+#endif\n+\n   int m_sized_int_type;\n \n   float m_float;\n@@ -101,6 +117,31 @@ create_code (gcc_jit_context *ctxt, void *user_data)\n   gcc_jit_field *field_m_unsigned_long_long =\n     CREATE_FIELD (GCC_JIT_TYPE_UNSIGNED_LONG_LONG, \"m_unsigned_long_long\");\n \n+  gcc_jit_field *field_m_u8 =\n+    CREATE_FIELD (GCC_JIT_TYPE_UINT8_T, \"m_u8\");\n+  gcc_jit_field *field_m_u16 =\n+    CREATE_FIELD (GCC_JIT_TYPE_UINT16_T, \"m_u16\");\n+  gcc_jit_field *field_m_u32 =\n+    CREATE_FIELD (GCC_JIT_TYPE_UINT32_T, \"m_u32\");\n+  gcc_jit_field *field_m_u64 =\n+    CREATE_FIELD (GCC_JIT_TYPE_UINT64_T, \"m_u64\");\n+\n+  gcc_jit_field *field_m_i8 =\n+    CREATE_FIELD (GCC_JIT_TYPE_INT8_T, \"m_i8\");\n+  gcc_jit_field *field_m_i16 =\n+    CREATE_FIELD (GCC_JIT_TYPE_INT16_T, \"m_i16\");\n+  gcc_jit_field *field_m_i32 =\n+    CREATE_FIELD (GCC_JIT_TYPE_INT32_T, \"m_i32\");\n+  gcc_jit_field *field_m_i64 =\n+    CREATE_FIELD (GCC_JIT_TYPE_INT64_T, \"m_i64\");\n+\n+#ifdef __SIZEOF_INT128__\n+  gcc_jit_field *field_m_u128 =\n+    CREATE_FIELD (GCC_JIT_TYPE_UINT128_T, \"m_u128\");\n+  gcc_jit_field *field_m_i128 =\n+    CREATE_FIELD (GCC_JIT_TYPE_INT128_T, \"m_i128\");\n+#endif\n+\n   /* Signed int type with sizeof (int): */\n   gcc_jit_type *sized_int_type =\n     gcc_jit_context_get_int_type (ctxt, sizeof (int), 1);\n@@ -147,6 +188,21 @@ create_code (gcc_jit_context *ctxt, void *user_data)\n     field_m_long_long,\n     field_m_unsigned_long_long,\n \n+    field_m_u8,\n+    field_m_u16,\n+    field_m_u32,\n+    field_m_u64,\n+\n+    field_m_i8,\n+    field_m_i16,\n+    field_m_i32,\n+    field_m_i64,\n+\n+#ifdef __SIZEOF_INT128__\n+    field_m_u128,\n+    field_m_i128,\n+#endif\n+\n     field_m_sized_int_type,\n \n     field_m_float,\n@@ -266,6 +322,61 @@ create_code (gcc_jit_context *ctxt, void *user_data)\n       gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_UNSIGNED_LONG_LONG),\n       123456789))\n \n+  ASSIGN(field_m_u8,\n+    gcc_jit_context_new_rvalue_from_int (\n+      ctxt,\n+      gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_UINT8_T),\n+      123))\n+  ASSIGN(field_m_u16,\n+    gcc_jit_context_new_rvalue_from_int (\n+      ctxt,\n+      gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_UINT16_T),\n+      12345))\n+  ASSIGN(field_m_u32,\n+    gcc_jit_context_new_rvalue_from_int (\n+      ctxt,\n+      gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_UINT32_T),\n+      123456789))\n+  ASSIGN(field_m_u64,\n+    gcc_jit_context_new_rvalue_from_int (\n+      ctxt,\n+      gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_UINT64_T),\n+      123456789))\n+\n+  ASSIGN(field_m_i8,\n+    gcc_jit_context_new_rvalue_from_int (\n+      ctxt,\n+      gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_INT8_T),\n+      -1))\n+  ASSIGN(field_m_i16,\n+    gcc_jit_context_new_rvalue_from_int (\n+      ctxt,\n+      gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_INT16_T),\n+      -2))\n+  ASSIGN(field_m_i32,\n+    gcc_jit_context_new_rvalue_from_int (\n+      ctxt,\n+      gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_INT32_T),\n+      -3))\n+  ASSIGN(field_m_i64,\n+    gcc_jit_context_new_rvalue_from_int (\n+      ctxt,\n+      gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_INT64_T),\n+      -4))\n+\n+#ifdef __SIZEOF_INT128__\n+  ASSIGN(field_m_u128,\n+    gcc_jit_context_new_rvalue_from_int (\n+      ctxt,\n+      gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_UINT128_T),\n+      123456789))\n+  ASSIGN(field_m_i128,\n+    gcc_jit_context_new_rvalue_from_int (\n+      ctxt,\n+      gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_INT128_T),\n+      -5))\n+#endif\n+\n   ASSIGN(field_m_sized_int_type,\n     gcc_jit_context_new_rvalue_from_int (\n       ctxt,\n@@ -347,6 +458,21 @@ verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n   CHECK_VALUE (z.m_long_long, -42);\n   CHECK_VALUE (z.m_unsigned_long_long, 123456789);\n \n+  CHECK_VALUE (z.m_u8, 123);\n+  CHECK_VALUE (z.m_u16, 12345);\n+  CHECK_VALUE (z.m_u32, 123456789);\n+  CHECK_VALUE (z.m_u64, 123456789);\n+\n+  CHECK_VALUE (z.m_i8, -1);\n+  CHECK_VALUE (z.m_i16, -2);\n+  CHECK_VALUE (z.m_i32, -3);\n+  CHECK_VALUE (z.m_i64, -4);\n+\n+#ifdef __SIZEOF_INT128__\n+  CHECK_VALUE (z.m_u128, 123456789);\n+  CHECK_VALUE (z.m_i128, -5);\n+#endif\n+\n   CHECK_VALUE (z.m_sized_int_type, 500);\n \n   CHECK_VALUE (z.m_float, 3.141f);\n@@ -358,4 +484,9 @@ verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n   CHECK_VALUE (z.m_size_t, sizeof (struct zoo));\n \n   CHECK_VALUE (z.m_FILE_ptr, stderr);\n+\n+  if (sizeof(long) == 8)\n+    CHECK (gcc_jit_compatible_types (\n+      gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_LONG),\n+      gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_INT64_T)));\n }"}]}