{"sha": "ee7904e91fcdafd4211f89e0244354467d78a3c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU3OTA0ZTkxZmNkYWZkNDIxMWY4OWUwMjQ0MzU0NDY3ZDc4YTNjMg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-07-04T07:35:12Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-07-04T07:35:12Z"}, "message": "tree-ssa-sccvn.h (vn_reference_lookup): Add last_vuse_ptr argument.\n\n2019-07-04  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-sccvn.h (vn_reference_lookup): Add last_vuse_ptr\n\targument.\n\t* tree-ssa-sccvn.c (last_vuse_ptr, vn_walk_kind): Move\n\tglobals into...\n\t(struct vn_walk_cb_data): New callback data struct.\n\t(vn_reference_lookup_2): Adjust.\n\t(vn_reference_lookup_3): Likewise.\n\t(vn_reference_lookup_pieces): Likewise.\n\t(vn_reference_lookup): Likewise, get last_vuse_ptr argument.\n\t(visit_reference_op_load): Adjust.\n\nFrom-SVN: r273042", "tree": {"sha": "631b7209bcc5a0b47ca9959a7d62d647e0d99936", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/631b7209bcc5a0b47ca9959a7d62d647e0d99936"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee7904e91fcdafd4211f89e0244354467d78a3c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee7904e91fcdafd4211f89e0244354467d78a3c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee7904e91fcdafd4211f89e0244354467d78a3c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee7904e91fcdafd4211f89e0244354467d78a3c2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6f01ad76c11eacc9f32539f769e4cb3fd169466a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f01ad76c11eacc9f32539f769e4cb3fd169466a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f01ad76c11eacc9f32539f769e4cb3fd169466a"}], "stats": {"total": 74, "additions": 47, "deletions": 27}, "files": [{"sha": "932eca2519c3acb158dd82ea42ed41352ea0b3fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee7904e91fcdafd4211f89e0244354467d78a3c2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee7904e91fcdafd4211f89e0244354467d78a3c2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ee7904e91fcdafd4211f89e0244354467d78a3c2", "patch": "@@ -1,3 +1,16 @@\n+2019-07-04  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-sccvn.h (vn_reference_lookup): Add last_vuse_ptr\n+\targument.\n+\t* tree-ssa-sccvn.c (last_vuse_ptr, vn_walk_kind): Move\n+\tglobals into...\n+\t(struct vn_walk_cb_data): New callback data struct.\n+\t(vn_reference_lookup_2): Adjust.\n+\t(vn_reference_lookup_3): Likewise.\n+\t(vn_reference_lookup_pieces): Likewise.\n+\t(vn_reference_lookup): Likewise, get last_vuse_ptr argument.\n+\t(visit_reference_op_load): Adjust.\n+\n 2019-07-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/91063"}, {"sha": "22dd8015e9dd99177f582e03b805754ed4fa558b", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 32, "deletions": 26, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee7904e91fcdafd4211f89e0244354467d78a3c2/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee7904e91fcdafd4211f89e0244354467d78a3c2/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=ee7904e91fcdafd4211f89e0244354467d78a3c2", "patch": "@@ -131,8 +131,6 @@ along with GCC; see the file COPYING3.  If not see\n /* There's no BB_EXECUTABLE but we can use BB_VISITED.  */\n #define BB_EXECUTABLE BB_VISITED\n \n-static tree *last_vuse_ptr;\n-static vn_lookup_kind vn_walk_kind;\n static vn_lookup_kind default_vn_walk_kind;\n \n /* vn_nary_op hashtable helpers.  */\n@@ -1648,18 +1646,26 @@ vn_reference_lookup_1 (vn_reference_t vr, vn_reference_t *vnresult)\n   return NULL_TREE;\n }\n \n+struct vn_walk_cb_data\n+{\n+  vn_reference_t vr;\n+  tree *last_vuse_ptr;\n+  vn_lookup_kind vn_walk_kind;\n+};\n+\n /* Callback for walk_non_aliased_vuses.  Adjusts the vn_reference_t VR_\n    with the current VUSE and performs the expression lookup.  */\n \n static void *\n-vn_reference_lookup_2 (ao_ref *op ATTRIBUTE_UNUSED, tree vuse, void *vr_)\n+vn_reference_lookup_2 (ao_ref *op ATTRIBUTE_UNUSED, tree vuse, void *data_)\n {\n-  vn_reference_t vr = (vn_reference_t)vr_;\n+  vn_walk_cb_data *data = (vn_walk_cb_data *)data_;\n+  vn_reference_t vr = data->vr;\n   vn_reference_s **slot;\n   hashval_t hash;\n \n-  if (last_vuse_ptr)\n-    *last_vuse_ptr = vuse;\n+  if (data->last_vuse_ptr)\n+    *data->last_vuse_ptr = vuse;\n \n   /* Fixup vuse and hash.  */\n   if (vr->vuse)\n@@ -1929,10 +1935,11 @@ basic_block vn_context_bb;\n    *DISAMBIGUATE_ONLY is set to true.  */\n \n static void *\n-vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_,\n+vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t\t       bool *disambiguate_only)\n {\n-  vn_reference_t vr = (vn_reference_t)vr_;\n+  vn_walk_cb_data *data = (vn_walk_cb_data *)data_;\n+  vn_reference_t vr = data->vr;\n   gimple *def_stmt = SSA_NAME_DEF_STMT (vuse);\n   tree base = ao_ref_base (ref);\n   HOST_WIDE_INT offseti, maxsizei;\n@@ -1979,7 +1986,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_,\n \t accesses as we then can use TBAA to disambiguate against the\n \t clobbering statement when looking up a load (thus the\n \t VN_WALKREWRITE guard).  */\n-      if (vn_walk_kind == VN_WALKREWRITE\n+      if (data->vn_walk_kind == VN_WALKREWRITE\n \t  && is_gimple_reg_type (TREE_TYPE (lhs))\n \t  && types_compatible_p (TREE_TYPE (lhs), vr->type)\n \t  /* The overlap restriction breaks down when either access\n@@ -1992,16 +1999,16 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_,\n \t      || (get_alias_set (lhs) != 0\n \t\t  && ao_ref_alias_set (ref) != 0)))\n \t{\n-\t  tree *saved_last_vuse_ptr = last_vuse_ptr;\n+\t  tree *saved_last_vuse_ptr = data->last_vuse_ptr;\n \t  /* Do not update last_vuse_ptr in vn_reference_lookup_2.  */\n-\t  last_vuse_ptr = NULL;\n+\t  data->last_vuse_ptr = NULL;\n \t  tree saved_vuse = vr->vuse;\n \t  hashval_t saved_hashcode = vr->hashcode;\n-\t  void *res = vn_reference_lookup_2 (ref, gimple_vuse (def_stmt), vr);\n+\t  void *res = vn_reference_lookup_2 (ref, gimple_vuse (def_stmt), data);\n \t  /* Need to restore vr->vuse and vr->hashcode.  */\n \t  vr->vuse = saved_vuse;\n \t  vr->hashcode = saved_hashcode;\n-\t  last_vuse_ptr = saved_last_vuse_ptr;\n+\t  data->last_vuse_ptr = saved_last_vuse_ptr;\n \t  if (res && res != (void *)-1)\n \t    {\n \t      vn_reference_t vnresult = (vn_reference_t) res;\n@@ -2306,7 +2313,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_,\n \n   /* 5) For aggregate copies translate the reference through them if\n      the copy kills ref.  */\n-  else if (vn_walk_kind == VN_WALKREWRITE\n+  else if (data->vn_walk_kind == VN_WALKREWRITE\n \t   && gimple_assign_single_p (def_stmt)\n \t   && (DECL_P (gimple_assign_rhs1 (def_stmt))\n \t       || TREE_CODE (gimple_assign_rhs1 (def_stmt)) == MEM_REF\n@@ -2426,15 +2433,15 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_,\n       *ref = r;\n \n       /* Do not update last seen VUSE after translating.  */\n-      last_vuse_ptr = NULL;\n+      data->last_vuse_ptr = NULL;\n \n       /* Keep looking for the adjusted *REF / VR pair.  */\n       return NULL;\n     }\n \n   /* 6) For memcpy copies translate the reference through them if\n      the copy kills ref.  */\n-  else if (vn_walk_kind == VN_WALKREWRITE\n+  else if (data->vn_walk_kind == VN_WALKREWRITE\n \t   && is_gimple_reg_type (vr->type)\n \t   /* ???  Handle BCOPY as well.  */\n \t   && (gimple_call_builtin_p (def_stmt, BUILT_IN_MEMCPY)\n@@ -2584,7 +2591,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_,\n       *ref = r;\n \n       /* Do not update last seen VUSE after translating.  */\n-      last_vuse_ptr = NULL;\n+      data->last_vuse_ptr = NULL;\n \n       /* Keep looking for the adjusted *REF / VR pair.  */\n       return NULL;\n@@ -2645,13 +2652,13 @@ vn_reference_lookup_pieces (tree vuse, alias_set_type set, tree type,\n     {\n       ao_ref r;\n       unsigned limit = PARAM_VALUE (PARAM_SCCVN_MAX_ALIAS_QUERIES_PER_ACCESS);\n-      vn_walk_kind = kind;\n+      vn_walk_cb_data data = { &vr1, NULL, kind };\n       if (ao_ref_init_from_vn_reference (&r, set, type, vr1.operands))\n \t*vnresult =\n \t  (vn_reference_t)walk_non_aliased_vuses (&r, vr1.vuse,\n \t\t\t\t\t\t  vn_reference_lookup_2,\n \t\t\t\t\t\t  vn_reference_lookup_3,\n-\t\t\t\t\t\t  vuse_valueize, limit, &vr1);\n+\t\t\t\t\t\t  vuse_valueize, limit, &data);\n       gcc_checking_assert (vr1.operands == shared_lookup_references);\n     }\n \n@@ -2666,11 +2673,12 @@ vn_reference_lookup_pieces (tree vuse, alias_set_type set, tree type,\n    not exist in the hash table or if the result field of the structure\n    was NULL..  VNRESULT will be filled in with the vn_reference_t\n    stored in the hashtable if one exists.  When TBAA_P is false assume\n-   we are looking up a store and treat it as having alias-set zero.  */\n+   we are looking up a store and treat it as having alias-set zero.\n+   *LAST_VUSE_PTR will be updated with the VUSE the value lookup succeeded.  */\n \n tree\n vn_reference_lookup (tree op, tree vuse, vn_lookup_kind kind,\n-\t\t     vn_reference_t *vnresult, bool tbaa_p)\n+\t\t     vn_reference_t *vnresult, bool tbaa_p, tree *last_vuse_ptr)\n {\n   vec<vn_reference_op_s> operands;\n   struct vn_reference_s vr1;\n@@ -2703,12 +2711,12 @@ vn_reference_lookup (tree op, tree vuse, vn_lookup_kind kind,\n \tao_ref_init (&r, op);\n       if (! tbaa_p)\n \tr.ref_alias_set = r.base_alias_set = 0;\n-      vn_walk_kind = kind;\n+      vn_walk_cb_data data = { &vr1, last_vuse_ptr, kind };\n       wvnresult =\n \t(vn_reference_t)walk_non_aliased_vuses (&r, vr1.vuse,\n \t\t\t\t\t\tvn_reference_lookup_2,\n \t\t\t\t\t\tvn_reference_lookup_3,\n-\t\t\t\t\t\tvuse_valueize, limit, &vr1);\n+\t\t\t\t\t\tvuse_valueize, limit, &data);\n       gcc_checking_assert (vr1.operands == shared_lookup_references);\n       if (wvnresult)\n \t{\n@@ -4063,10 +4071,8 @@ visit_reference_op_load (tree lhs, tree op, gimple *stmt)\n   tree result;\n \n   last_vuse = gimple_vuse (stmt);\n-  last_vuse_ptr = &last_vuse;\n   result = vn_reference_lookup (op, gimple_vuse (stmt),\n-\t\t\t\tdefault_vn_walk_kind, NULL, true);\n-  last_vuse_ptr = NULL;\n+\t\t\t\tdefault_vn_walk_kind, NULL, true, &last_vuse);\n \n   /* We handle type-punning through unions by value-numbering based\n      on offset and size of the access.  Be prepared to handle a"}, {"sha": "93718b2848f2be5e68c3ea80d6a4eaa15cfc70c6", "filename": "gcc/tree-ssa-sccvn.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee7904e91fcdafd4211f89e0244354467d78a3c2/gcc%2Ftree-ssa-sccvn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee7904e91fcdafd4211f89e0244354467d78a3c2/gcc%2Ftree-ssa-sccvn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.h?ref=ee7904e91fcdafd4211f89e0244354467d78a3c2", "patch": "@@ -234,7 +234,8 @@ vec<vn_reference_op_s> vn_reference_operands_for_lookup (tree);\n tree vn_reference_lookup_pieces (tree, alias_set_type, tree,\n \t\t\t\t vec<vn_reference_op_s> ,\n \t\t\t\t vn_reference_t *, vn_lookup_kind);\n-tree vn_reference_lookup (tree, tree, vn_lookup_kind, vn_reference_t *, bool);\n+tree vn_reference_lookup (tree, tree, vn_lookup_kind, vn_reference_t *, bool,\n+\t\t\t  tree * = NULL);\n void vn_reference_lookup_call (gcall *, vn_reference_t *, vn_reference_t);\n vn_reference_t vn_reference_insert_pieces (tree, alias_set_type, tree,\n \t\t\t\t\t   vec<vn_reference_op_s> ,"}]}