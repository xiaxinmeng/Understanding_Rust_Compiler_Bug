{"sha": "b4ea3a19464b9bc79dad9cf5bb9bffc660718632", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRlYTNhMTk0NjRiOWJjNzlkYWQ5Y2Y1YmI5YmZmYzY2MDcxODYzMg==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-13T11:33:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-13T11:33:26Z"}, "message": "Merge #562\n\n562: add some comments about how scan dead code pass handle PathInExpression and PathExprSegment r=philberty a=thomasyonug\n\nAdd some comments about how scan dead code pass handles PathInExpression and PathExprSegment.\r\n\r\n\n\nCo-authored-by: Thomas Young <wenzhang5800@gmail.com>", "tree": {"sha": "5f51ad082be6cb31d191648b548a93f00cef4fa6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f51ad082be6cb31d191648b548a93f00cef4fa6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4ea3a19464b9bc79dad9cf5bb9bffc660718632", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg7XoGCRBK7hj4Ov3rIwAAqc8IAA8BqG0Efc//PUgzL6aRuogP\nFfLrSlYIVtVYYfd80OJoHQkVJzBv/z0ca7GDPcRd+hKTosBiuirqyV6cmYSwIt0K\nB5nzKPXvB0cCghROta4t8kLwTb3xXHYOaDFNYjkGsF48kiWxzt8JmLcmGIe1zSkO\nBYPvdYJHkcVtBXlxTm9vUpsPqLIHp6SdIDEpokthXQVNiUzO8GaSUsJG8PiJe2ys\nRiUHk5HTCup5s+ndyiEO5pzLcvn4mrl2aL2MwcXkzkQSRJsVh5eKCzMvOWPxGVGH\nLZ3tzzyscCDfe6ZPZdVCGOlcg+NKCtljJfgI/+mE2UUnIu6fH1Vh/MU2g9l9s/k=\n=xdPC\n-----END PGP SIGNATURE-----\n", "payload": "tree 5f51ad082be6cb31d191648b548a93f00cef4fa6\nparent 9415a4b712371706d7f130695fd959fddb6506cc\nparent 29d84b2c1477769100559f9427028001fd07b113\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1626176006 +0000\ncommitter GitHub <noreply@github.com> 1626176006 +0000\n\nMerge #562\n\n562: add some comments about how scan dead code pass handle PathInExpression and PathExprSegment r=philberty a=thomasyonug\n\nAdd some comments about how scan dead code pass handles PathInExpression and PathExprSegment.\r\n\r\n\n\nCo-authored-by: Thomas Young <wenzhang5800@gmail.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4ea3a19464b9bc79dad9cf5bb9bffc660718632", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4ea3a19464b9bc79dad9cf5bb9bffc660718632", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4ea3a19464b9bc79dad9cf5bb9bffc660718632/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9415a4b712371706d7f130695fd959fddb6506cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9415a4b712371706d7f130695fd959fddb6506cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9415a4b712371706d7f130695fd959fddb6506cc"}, {"sha": "29d84b2c1477769100559f9427028001fd07b113", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29d84b2c1477769100559f9427028001fd07b113", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29d84b2c1477769100559f9427028001fd07b113"}], "stats": {"total": 11, "additions": 11, "deletions": 0}, "files": [{"sha": "8339345da4d7e324a65f3fc8d070aa1d799b306a", "filename": "gcc/rust/lint/rust-lint-marklive.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4ea3a19464b9bc79dad9cf5bb9bffc660718632/gcc%2Frust%2Flint%2Frust-lint-marklive.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4ea3a19464b9bc79dad9cf5bb9bffc660718632/gcc%2Frust%2Flint%2Frust-lint-marklive.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-marklive.cc?ref=b4ea3a19464b9bc79dad9cf5bb9bffc660718632", "patch": "@@ -106,6 +106,8 @@ MarkLive::go (HIR::Crate &crate)\n void\n MarkLive::visit (HIR::PathInExpression &expr)\n {\n+  // We should iterate every path segment in order to mark the function which is\n+  // called in the expression\n   expr.iterate_path_segments ([&] (HIR::PathExprSegment &seg) -> bool {\n     return visit_path_segment (seg);\n   });\n@@ -121,6 +123,7 @@ MarkLive::visit (HIR::MethodCallExpr &expr)\n     return true;\n   });\n \n+  // Trying to find the method definition and mark it alive.\n   NodeId ast_node_id = expr.get_mappings ().get_nodeid ();\n   NodeId ref_node_id = UNKNOWN_NODEID;\n   find_ref_node_id (ast_node_id, ref_node_id, expr.get_locus (),\n@@ -140,6 +143,14 @@ MarkLive::visit_path_segment (HIR::PathExprSegment seg)\n   NodeId ast_node_id = seg.get_mappings ().get_nodeid ();\n   NodeId ref_node_id = UNKNOWN_NODEID;\n \n+  // There are two different kinds of segment for us.\n+  // 1. function segment\n+  //      like the symbol \"foo\" in expression `foo()`.\n+  // 2. type segment\n+  //      like the symbol \"Foo\" in expression `Foo{a: 1, b: 2}`\n+  //\n+  // We should mark them alive all and ignoring other kind of segments.\n+  // If the segment we dont care then just return false is fine\n   if (resolver->lookup_resolved_name (ast_node_id, &ref_node_id))\n     {\n       Resolver::Definition def;"}]}