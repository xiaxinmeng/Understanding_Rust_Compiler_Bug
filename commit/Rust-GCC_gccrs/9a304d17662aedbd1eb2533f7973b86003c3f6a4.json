{"sha": "9a304d17662aedbd1eb2533f7973b86003c3f6a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWEzMDRkMTc2NjJhZWRiZDFlYjI1MzNmNzk3M2I4NjAwM2MzZjZhNA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2001-10-31T08:27:20Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-10-31T08:27:20Z"}, "message": "basic_string.h: Tweaks.\n\n\n2001-10-30  Paolo Carlini  <pcarlini@unitus.it>\n\t    Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/bits/basic_string.h: Tweaks.\n\t* include/bits/basic_string.tcc (string::_M_replace(iterator,\n\titerator, _ForwardIter, _ForwardIter, forward_iterator_tag): Fix.\n\t* src/string-inst.cc: Tweaks, add instantiation.\n\t* testsuite/21_strings/replace.cc (test02): Add test.\n\t* testsuite/21_strings/assign.cc (test01): New file.\n\n0\n\nCo-Authored-By: Benjamin Kosnik <bkoz@redhat.com>\n\nFrom-SVN: r46674", "tree": {"sha": "5576383af19838d1ade2b679e004f0b504a28d8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5576383af19838d1ade2b679e004f0b504a28d8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a304d17662aedbd1eb2533f7973b86003c3f6a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a304d17662aedbd1eb2533f7973b86003c3f6a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a304d17662aedbd1eb2533f7973b86003c3f6a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a304d17662aedbd1eb2533f7973b86003c3f6a4/comments", "author": null, "committer": null, "parents": [{"sha": "8f32f3ab9c7eecf656f9b2bb43a6854d74815cd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f32f3ab9c7eecf656f9b2bb43a6854d74815cd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f32f3ab9c7eecf656f9b2bb43a6854d74815cd1"}], "stats": {"total": 181, "additions": 131, "deletions": 50}, "files": [{"sha": "2fd8c5de9be483cae284f85f630dfb898ed17237", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a304d17662aedbd1eb2533f7973b86003c3f6a4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a304d17662aedbd1eb2533f7973b86003c3f6a4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9a304d17662aedbd1eb2533f7973b86003c3f6a4", "patch": "@@ -1,4 +1,14 @@\n-2001-10-30  Jakub Jelinek  <jakub@redhat.com>\n+2001-10-30  Paolo Carlini  <pcarlini@unitus.it>\n+\t    Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/bits/basic_string.h: Tweaks.\n+\t* include/bits/basic_string.tcc (string::_M_replace(iterator,\n+\titerator, _ForwardIter, _ForwardIter, forward_iterator_tag): Fix.\n+\t* src/string-inst.cc: Tweaks, add instantiation.\n+\t* testsuite/21_strings/replace.cc (test02): Add test.\n+\t* testsuite/21_strings/assign.cc (test01): New file.\n+\t\n+001-10-30  Jakub Jelinek  <jakub@redhat.com>\n \n \t* include/bits/stl_deque.h (_M_new_elements_at_front): Use\n \t__throw_exception_again."}, {"sha": "a2fb1e0932ddee679c8f1aeda657ffa436d25ca2", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a304d17662aedbd1eb2533f7973b86003c3f6a4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a304d17662aedbd1eb2533f7973b86003c3f6a4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=9a304d17662aedbd1eb2533f7973b86003c3f6a4", "patch": "@@ -40,7 +40,6 @@\n \n namespace std\n {\n-\n   // Documentation?  What's that? \n   // Nathan Myers <ncm@cantrip.org>.\n   //\n@@ -284,7 +283,7 @@ namespace std\n         _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)\n         { \n \t  for (; __k1 != __k2; ++__k1, ++__p) \n-\t    traits_type::assign(*__p, *__k1); //these types are off\n+\t    traits_type::assign(*__p, *__k1); // These types are off.\n \t}\n \n       static void\n@@ -337,7 +336,7 @@ namespace std\n       basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc());\n \n       template<class _InputIterator>\n-        basic_string(_InputIterator __begin, _InputIterator __end,\n+        basic_string(_InputIterator __beg, _InputIterator __end,\n \t\t     const _Alloc& __a = _Alloc());\n \n       ~basic_string() "}, {"sha": "84ec0cfc132aaeed6c8edb70069edf0143a9c65a", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 29, "deletions": 23, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a304d17662aedbd1eb2533f7973b86003c3f6a4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a304d17662aedbd1eb2533f7973b86003c3f6a4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=9a304d17662aedbd1eb2533f7973b86003c3f6a4", "patch": "@@ -130,7 +130,7 @@ namespace std\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     template <class _InIter>\n       _CharT*\n-      basic_string<_CharT,_Traits,_Alloc>::\n+      basic_string<_CharT, _Traits, _Alloc>::\n       _S_construct(_InIter __beg, _InIter __end, const _Alloc& __a, \n \t\t   forward_iterator_tag)\n       {\n@@ -156,7 +156,7 @@ namespace std\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n     _CharT*\n-    basic_string<_CharT,_Traits, _Alloc>::\n+    basic_string<_CharT, _Traits, _Alloc>::\n     _S_construct(size_type __n, _CharT __c, const _Alloc& __a)\n     {\n       if (__n == 0 && __a == _Alloc())\n@@ -446,18 +446,24 @@ namespace std\n       _M_replace(iterator __i1, iterator __i2, _ForwardIter __k1, \n \t\t _ForwardIter __k2, forward_iterator_tag)\n       {\n+\tsize_type __dnew = static_cast<size_type>(distance(__k1, __k2));\n \tsize_type __dold = __i2 - __i1;\n \tsize_type __dmax = this->max_size();\n-\tsize_type __dnew = static_cast<size_type>(distance(__k1, __k2));\n \n \tif (__dmax <= __dnew)\n \t  __throw_length_error(\"basic_string::_M_replace\");\n \tsize_type __off = __i1 - _M_ibegin();\n+\n+\t// Save concerned source string data in a temporary.\n+\tbasic_string __temp(__k1, __k2);\n \t_M_mutate(__off, __dold, __dnew);\n-\t// Invalidated __i1, __i2\n-\tif (__dnew)\n-\t  _S_copy_chars(_M_data() + __off, __k1, __k2);\n \t\n+\t// Invalidated __i1, __i2 (and clobbered original source string\n+\t// data when destination string == source string and the string\n+\t// is unshared).\n+        if (__dnew)\n+\t  _S_copy_chars(_M_data() + __off, __temp.begin(), __temp.end());\n+\n \treturn *this;\n       }\n \n@@ -473,8 +479,8 @@ namespace std\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    basic_string<_CharT,_Traits,_Alloc>&\n-    basic_string<_CharT,_Traits,_Alloc>::\n+    basic_string<_CharT, _Traits, _Alloc>&\n+    basic_string<_CharT, _Traits, _Alloc>::\n     append(const basic_string& __str)\n     {\n       // Iff appending itself, string needs to pre-reserve the\n@@ -489,8 +495,8 @@ namespace std\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    basic_string<_CharT,_Traits,_Alloc>&\n-    basic_string<_CharT,_Traits,_Alloc>::\n+    basic_string<_CharT, _Traits, _Alloc>&\n+    basic_string<_CharT, _Traits, _Alloc>::\n     append(const basic_string& __str, size_type __pos, size_type __n)\n     {\n       // Iff appending itself, string needs to pre-reserve the\n@@ -504,8 +510,8 @@ namespace std\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    basic_string<_CharT,_Traits,_Alloc>&\n-    basic_string<_CharT,_Traits,_Alloc>::\n+    basic_string<_CharT, _Traits, _Alloc>&\n+    basic_string<_CharT, _Traits, _Alloc>::\n     append(const _CharT* __s, size_type __n)\n     {\n       size_type __len = __n + this->size();\n@@ -515,8 +521,8 @@ namespace std\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    basic_string<_CharT,_Traits,_Alloc>&\n-    basic_string<_CharT,_Traits,_Alloc>::\n+    basic_string<_CharT, _Traits, _Alloc>&\n+    basic_string<_CharT, _Traits, _Alloc>::\n     append(size_type __n, _CharT __c)\n     {\n       size_type __len = __n + this->size();\n@@ -526,11 +532,11 @@ namespace std\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    basic_string<_CharT,_Traits,_Alloc>\n+    basic_string<_CharT, _Traits, _Alloc>\n     operator+(const _CharT* __lhs,\n-             const basic_string<_CharT,_Traits,_Alloc>& __rhs)\n+\t      const basic_string<_CharT, _Traits, _Alloc>& __rhs)\n     {\n-      typedef basic_string<_CharT,_Traits,_Alloc> __string_type;\n+      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;\n       typedef typename __string_type::size_type\t  __size_type;\n       __size_type __len = _Traits::length(__lhs);\n       __string_type __str;\n@@ -541,10 +547,10 @@ namespace std\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    basic_string<_CharT,_Traits,_Alloc>\n-    operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs)\n+    basic_string<_CharT, _Traits, _Alloc>\n+    operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)\n     {\n-      typedef basic_string<_CharT,_Traits,_Alloc> __string_type;\n+      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;\n       typedef typename __string_type::size_type\t  __size_type;\n       __string_type __str;\n       __size_type __len = __rhs.size();\n@@ -627,7 +633,7 @@ namespace std\n       size_type __size = this->size();\n       if (__n <= __size)\n \t{\n-\t  __pos = std::min(__size - __n ,__pos);\n+\t  __pos = std::min(__size - __n, __pos);\n \t  const _CharT* __data = _M_data();\n \t  do \n \t    {\n@@ -811,7 +817,7 @@ namespace std\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n     int\n-    basic_string <_CharT,_Traits,_Alloc>::\n+    basic_string <_CharT, _Traits, _Alloc>::\n     compare(size_type __pos, size_type __n1, const _CharT* __s) const\n     {\n       size_type __size = this->size();\n@@ -829,7 +835,7 @@ namespace std\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n     int\n-    basic_string <_CharT,_Traits,_Alloc>::\n+    basic_string <_CharT, _Traits, _Alloc>::\n     compare(size_type __pos, size_type __n1, const _CharT* __s, \n \t    size_type __n2) const\n     {"}, {"sha": "05f6d54257af15d191647df0d7e7f36152c419c5", "filename": "libstdc++-v3/src/string-inst.cc", "status": "modified", "additions": 27, "deletions": 21, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a304d17662aedbd1eb2533f7973b86003c3f6a4/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a304d17662aedbd1eb2533f7973b86003c3f6a4/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc?ref=9a304d17662aedbd1eb2533f7973b86003c3f6a4", "patch": "@@ -56,22 +56,6 @@ namespace std\n   // Only one template keyword allowed here. \n   // See core issue #46 (NAD)\n   // http://anubis.dkuug.dk/jtc1/sc22/wg21/docs/cwg_closed.html#46\n-  template \n-    S& \n-    S::_M_replace<S::iterator>\n-    (S::iterator, S::iterator, S::iterator, S::iterator, forward_iterator_tag);\n-\n-  template \n-    S& \n-    S::_M_replace<S::const_iterator>\n-    (S::iterator, S::iterator, \n-     S::const_iterator, S::const_iterator, forward_iterator_tag);\n-\n-  template \n-    C* \n-    S::_S_construct<S::iterator>\n-    (S::iterator, S::iterator, const allocator<C>&, forward_iterator_tag);\n-\n   template\n     S::basic_string(C*, C*, const allocator<C>&);\n \n@@ -81,24 +65,46 @@ namespace std\n   template \n     S::basic_string(S::iterator, S::iterator, const allocator<C>&);\n \n+  template \n+    S::basic_string(S::const_iterator, S::const_iterator, const allocator<C>&);\n+\n+  template \n+    S& \n+    S::_M_replace(S::iterator, S::iterator, S::iterator, S::iterator, \n+\t\t  forward_iterator_tag);\n+\n+  template \n+    S& \n+    S::_M_replace(S::iterator, S::iterator, S::const_iterator, \n+\t\t  S::const_iterator, forward_iterator_tag);\n+\n   template\n     S&\n-    S::_M_replace(S::iterator, S::iterator, C*, C*, forward_iterator_tag);  \n+    S::_M_replace(S::iterator, S::iterator, C*, C*, forward_iterator_tag); \n \n   template\n     S&\n     S::_M_replace(S::iterator, S::iterator, const C*, const C*, \n \t\t  forward_iterator_tag);  \n \n+  template \n+    C* \n+    S::_S_construct(S::iterator, S::iterator, \n+\t\t    const allocator<C>&, forward_iterator_tag);\n+\n+  template \n+    C* \n+    S::_S_construct(S::const_iterator, S::const_iterator, \n+\t\t    const allocator<C>&, forward_iterator_tag);\n+\n   template\n     C*\n-    S::_S_construct(const C*, const C*, const allocator<C>&, \n-\t\t    forward_iterator_tag);\n+    S::_S_construct(C*, C*, const allocator<C>&, forward_iterator_tag);\n \n   template\n     C*\n-    S::_S_construct (C*, C*, const allocator<C>&, \n-\t\t     forward_iterator_tag);\n+    S::_S_construct(const C*, const C*, const allocator<C>&,\n+\t\t    forward_iterator_tag);\n \n   template\n     void"}, {"sha": "271ef65ca7847f0a3c70a29727bb35eba3a4127e", "filename": "libstdc++-v3/testsuite/21_strings/assign.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a304d17662aedbd1eb2533f7973b86003c3f6a4/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fassign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a304d17662aedbd1eb2533f7973b86003c3f6a4/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fassign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fassign.cc?ref=9a304d17662aedbd1eb2533f7973b86003c3f6a4", "patch": "@@ -0,0 +1,46 @@\n+// 2001-10-30 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.5 string modifiers\n+\n+#include <string>\n+#include <cstdio>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test = true;\n+\n+  using namespace std;\n+\n+  const char* strlit = \"../the long pier/Hanalei Bay/Kauai/Hawaii\";\n+  string aux = strlit;\n+  string::size_type i = aux.rfind(\"/\");\n+  if (i != string::npos)\n+    aux.assign(aux, i + 1, string::npos);\n+  VERIFY(aux == \"Hawaii\");\n+}\n+\n+int main()\n+{ \n+  test01();\n+  return 0;\n+}"}, {"sha": "b42ae8d3fa66bfb6657696489a0a997d7bd0ff11", "filename": "libstdc++-v3/testsuite/21_strings/replace.cc", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a304d17662aedbd1eb2533f7973b86003c3f6a4/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Freplace.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a304d17662aedbd1eb2533f7973b86003c3f6a4/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Freplace.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Freplace.cc?ref=9a304d17662aedbd1eb2533f7973b86003c3f6a4", "patch": "@@ -52,7 +52,6 @@ bool test01(void)\n   // template<typename InputIter>\n   //   string& replace(iterator it1, iterator it2, InputIter j1, InputIter j2)\n \n-#if 1\n   // with mods, from tstring.cc, from jason merrill, et. al.\n   std::string X = \"Hello\";\n   std::string x = X;\n@@ -75,16 +74,31 @@ bool test01(void)\n \t    std::find(x.rbegin(), x.rend(), 'l').base(), ar, \n \t    ar + sizeof(ar) / sizeof(ar[0]));\n   VERIFY( x == \"jeHelloo\" );\n-#endif\n \n #ifdef DEBUG_ASSERT\n   assert(test);\n #endif\n   return test;\n }\n \n+void\n+test02()\n+{\n+  const char* strlit = \"../the long pier/Hanalei Bay/Kauai/Hawaii\";\n+  std::string aux = strlit;\n+  aux.replace(aux.begin()+5, aux.begin()+20,\n+\t      aux.begin()+10, aux.begin()+15);\n+  VERIFY(aux == \"../thg piealei Bay/Kauai/Hawaii\");\n+  \n+  aux = strlit;\n+  aux.replace(aux.begin() + 10, aux.begin() + 15,\n+\t      aux.begin() + 5, aux.begin() + 20);\n+  VERIFY(aux == \"../the lone long pier/Hanr/Hanalei Bay/Kauai/Hawaii\");\n+}\n+\n int main()\n { \n   test01();\n+  test02();\n   return 0;\n }"}]}