{"sha": "26771da72fa978a233ed03aa4b29068798fdac19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY3NzFkYTcyZmE5NzhhMjMzZWQwM2FhNGIyOTA2ODc5OGZkYWMxOQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-01-25T15:00:51Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-01-25T15:00:51Z"}, "message": "i386.c (ix86_expand_movstr, [...]): Consistently do libcall for large blocks.\n\n\t* i386.c (ix86_expand_movstr, ix86_expand_clrstr): Consistently\n\tdo libcall for large blocks.\n\t* i386.md (comi patterns): Set type to ssecomi.\n\t(sse2_unpck?pd): Fix mode of vec_select.\n\n\t* cse.c: Include except.h\n\t(cse_set_around_loop):  Do not create new basic blocks.\n\t* Makefile.in (cse.o): Add dependnecy on except.h\n\nFrom-SVN: r61772", "tree": {"sha": "8253b892533105e767c0e62418a27fbd8be36e36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8253b892533105e767c0e62418a27fbd8be36e36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26771da72fa978a233ed03aa4b29068798fdac19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26771da72fa978a233ed03aa4b29068798fdac19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26771da72fa978a233ed03aa4b29068798fdac19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26771da72fa978a233ed03aa4b29068798fdac19/comments", "author": null, "committer": null, "parents": [{"sha": "c506155455a3f51e34a252d7ca00715b792d1537", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c506155455a3f51e34a252d7ca00715b792d1537", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c506155455a3f51e34a252d7ca00715b792d1537"}], "stats": {"total": 63, "additions": 43, "deletions": 20}, "files": [{"sha": "515a57d8eacfe6d06d60cf046b30072c09a2ba91", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26771da72fa978a233ed03aa4b29068798fdac19/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26771da72fa978a233ed03aa4b29068798fdac19/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=26771da72fa978a233ed03aa4b29068798fdac19", "patch": "@@ -1,3 +1,14 @@\n+Sat Jan 25 15:55:08 CET 2003  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.c (ix86_expand_movstr, ix86_expand_clrstr): Consistently\n+\tdo libcall for large blocks.\n+\t* i386.md (comi patterns): Set type to ssecomi.\n+\t(sse2_unpck?pd): Fix mode of vec_select.\n+\n+\t* cse.c: Include except.h\n+\t(cse_set_around_loop):  Do not create new basic blocks.\n+\t* Makefile.in (cse.o): Add dependnecy on except.h\n+\n Sat Jan 25 12:05:17 CET 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* builtins.c (fold_trunc_transparent_mathfn): New function."}, {"sha": "ecb1b33b5b83c1c747bc4e68d3b27beb714713ec", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26771da72fa978a233ed03aa4b29068798fdac19/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26771da72fa978a233ed03aa4b29068798fdac19/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=26771da72fa978a233ed03aa4b29068798fdac19", "patch": "@@ -1530,7 +1530,7 @@ cselib.o : cselib.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(REGS_\n    output.h function.h cselib.h $(GGC_H) $(TM_P_H) gt-cselib.h\n cse.o : cse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(REGS_H) \\\n    hard-reg-set.h flags.h real.h insn-config.h $(RECOG_H) $(EXPR_H) toplev.h output.h \\\n-   function.h $(BASIC_BLOCK_H) $(GGC_H) $(TM_P_H) $(TIMEVAR_H)\n+   function.h $(BASIC_BLOCK_H) $(GGC_H) $(TM_P_H) $(TIMEVAR_H) except.h\n gcse.o : gcse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(REGS_H) \\\n    hard-reg-set.h flags.h real.h insn-config.h ggc.h $(RECOG_H) $(EXPR_H) \\\n    $(BASIC_BLOCK_H) function.h output.h toplev.h $(TM_P_H) $(PARAMS_H) except.h gt-gcse.h"}, {"sha": "fe76c91562b9d97bf4ebefbfab8602edbce1cc16", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26771da72fa978a233ed03aa4b29068798fdac19/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26771da72fa978a233ed03aa4b29068798fdac19/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=26771da72fa978a233ed03aa4b29068798fdac19", "patch": "@@ -10639,7 +10639,6 @@ ix86_expand_movstr (dst, src, count_exp, align_exp)\n   unsigned HOST_WIDE_INT count = 0;\n   rtx insns;\n \n-  start_sequence ();\n \n   if (GET_CODE (align_exp) == CONST_INT)\n     align = INTVAL (align_exp);\n@@ -10649,7 +10648,11 @@ ix86_expand_movstr (dst, src, count_exp, align_exp)\n     align = 64;\n \n   if (GET_CODE (count_exp) == CONST_INT)\n-    count = INTVAL (count_exp);\n+    {\n+      count = INTVAL (count_exp);\n+      if (!TARGET_INLINE_ALL_STRINGOPS && count > 64)\n+\treturn 0;\n+    }\n \n   /* Figure out proper mode for counter.  For 32bits it is always SImode,\n      for 64bits use SImode when possible, otherwise DImode.\n@@ -10660,6 +10663,8 @@ ix86_expand_movstr (dst, src, count_exp, align_exp)\n   else\n     counter_mode = DImode;\n \n+  start_sequence ();\n+\n   if (counter_mode != SImode && counter_mode != DImode)\n     abort ();\n \n@@ -10877,7 +10882,11 @@ ix86_expand_clrstr (src, count_exp, align_exp)\n     align = 32;\n \n   if (GET_CODE (count_exp) == CONST_INT)\n-    count = INTVAL (count_exp);\n+    {\n+      count = INTVAL (count_exp);\n+      if (!TARGET_INLINE_ALL_STRINGOPS && count > 64)\n+\treturn 0;\n+    }\n   /* Figure out proper mode for counter.  For 32bits it is always SImode,\n      for 64bits use SImode when possible, otherwise DImode.\n      Set count to number of bytes copied when known at compile time.  */"}, {"sha": "02874dc60fc38ee829ef7a8cc5c64da5a801d652", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26771da72fa978a233ed03aa4b29068798fdac19/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26771da72fa978a233ed03aa4b29068798fdac19/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=26771da72fa978a233ed03aa4b29068798fdac19", "patch": "@@ -999,7 +999,7 @@\n    && SSE_FLOAT_MODE_P (GET_MODE (operands[0]))\n    && GET_MODE (operands[0]) == GET_MODE (operands[0])\"\n   \"* return output_fp_compare (insn, operands, 1, 0);\"\n-  [(set_attr \"type\" \"fcmp,ssecmp\")\n+  [(set_attr \"type\" \"fcmp,ssecomi\")\n    (set (attr \"mode\")\n      (if_then_else (match_operand:SF 1 \"\" \"\")\n         (const_string \"SF\")\n@@ -1013,7 +1013,7 @@\n   \"SSE_FLOAT_MODE_P (GET_MODE (operands[0]))\n    && GET_MODE (operands[0]) == GET_MODE (operands[0])\"\n   \"* return output_fp_compare (insn, operands, 1, 0);\"\n-  [(set_attr \"type\" \"ssecmp\")\n+  [(set_attr \"type\" \"ssecomi\")\n    (set (attr \"mode\")\n      (if_then_else (match_operand:SF 1 \"\" \"\")\n         (const_string \"SF\")\n@@ -1047,7 +1047,7 @@\n    && SSE_FLOAT_MODE_P (GET_MODE (operands[0]))\n    && GET_MODE (operands[0]) == GET_MODE (operands[1])\"\n   \"* return output_fp_compare (insn, operands, 1, 1);\"\n-  [(set_attr \"type\" \"fcmp,ssecmp\")\n+  [(set_attr \"type\" \"fcmp,ssecomi\")\n    (set (attr \"mode\")\n      (if_then_else (match_operand:SF 1 \"\" \"\")\n         (const_string \"SF\")\n@@ -1061,7 +1061,7 @@\n   \"SSE_FLOAT_MODE_P (GET_MODE (operands[0]))\n    && GET_MODE (operands[0]) == GET_MODE (operands[1])\"\n   \"* return output_fp_compare (insn, operands, 1, 1);\"\n-  [(set_attr \"type\" \"ssecmp\")\n+  [(set_attr \"type\" \"ssecomi\")\n    (set (attr \"mode\")\n      (if_then_else (match_operand:SF 1 \"\" \"\")\n         (const_string \"SF\")\n@@ -19769,7 +19769,7 @@\n \t\t       (parallel [(const_int 0)]))))]\n   \"TARGET_SSE\"\n   \"comiss\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"ssecmp\")\n+  [(set_attr \"type\" \"ssecomi\")\n    (set_attr \"mode\" \"SF\")])\n \n (define_insn \"sse_ucomi\"\n@@ -19782,7 +19782,7 @@\n \t\t\t(parallel [(const_int 0)]))))]\n   \"TARGET_SSE\"\n   \"ucomiss\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"ssecmp\")\n+  [(set_attr \"type\" \"ssecomi\")\n    (set_attr \"mode\" \"SF\")])\n \n \n@@ -21348,7 +21348,7 @@\n \t\t       (parallel [(const_int 0)]))))]\n   \"TARGET_SSE2\"\n   \"comisd\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"ssecmp\")\n+  [(set_attr \"type\" \"ssecomi\")\n    (set_attr \"mode\" \"DF\")])\n \n (define_insn \"sse2_ucomi\"\n@@ -21361,7 +21361,7 @@\n \t\t\t (parallel [(const_int 0)]))))]\n   \"TARGET_SSE2\"\n   \"ucomisd\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"ssecmp\")\n+  [(set_attr \"type\" \"ssecomi\")\n    (set_attr \"mode\" \"DF\")])\n \n ;; SSE Strange Moves.\n@@ -22244,10 +22244,10 @@\n (define_insn \"sse2_unpckhpd\"\n   [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n \t(vec_concat:V2DF\n-\t (vec_select:V2DF (match_operand:V2DF 1 \"register_operand\" \"0\")\n-\t\t\t  (parallel [(const_int 1)]))\n-\t (vec_select:V2DF (match_operand:V2DF 2 \"register_operand\" \"x\")\n-\t\t\t  (parallel [(const_int 0)]))))]\n+\t (vec_select:DF (match_operand:V2DF 1 \"register_operand\" \"0\")\n+\t\t\t(parallel [(const_int 1)]))\n+\t (vec_select:DF (match_operand:V2DF 2 \"register_operand\" \"x\")\n+\t\t\t(parallel [(const_int 0)]))))]\n   \"TARGET_SSE2\"\n   \"unpckhpd\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ssecvt\")\n@@ -22256,10 +22256,10 @@\n (define_insn \"sse2_unpcklpd\"\n   [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n \t(vec_concat:V2DF\n-\t (vec_select:V2DF (match_operand:V2DF 1 \"register_operand\" \"0\")\n-\t\t\t  (parallel [(const_int 0)]))\n-\t (vec_select:V2DF (match_operand:V2DF 2 \"register_operand\" \"x\")\n-\t\t\t  (parallel [(const_int 1)]))))]\n+\t (vec_select:DF (match_operand:V2DF 1 \"register_operand\" \"0\")\n+\t\t\t(parallel [(const_int 0)]))\n+\t (vec_select:DF (match_operand:V2DF 2 \"register_operand\" \"x\")\n+\t\t\t(parallel [(const_int 1)]))))]\n   \"TARGET_SSE2\"\n   \"unpcklpd\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ssecvt\")"}, {"sha": "180c31e96358e8d6ef1ee5a74ad4b6dd0ebef015", "filename": "gcc/cse.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26771da72fa978a233ed03aa4b29068798fdac19/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26771da72fa978a233ed03aa4b29068798fdac19/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=26771da72fa978a233ed03aa4b29068798fdac19", "patch": "@@ -40,6 +40,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"output.h\"\n #include \"ggc.h\"\n #include \"timevar.h\"\n+#include \"except.h\"\n \n /* The basic idea of common subexpression elimination is to go\n    through the code, keeping a record of expressions that would\n@@ -6809,6 +6810,8 @@ cse_set_around_loop (x, insn, loop_start)\n \t\t       SET_SRC, add an insn after P to copy its destination\n \t\t       to what we will be replacing SET_SRC with.  */\n \t\t    if (cse_check_loop_start_value\n+\t\t\t&& single_set (p)\n+\t\t\t&& !can_throw_internal (insn)\n \t\t\t&& validate_change (insn, &SET_SRC (x),\n \t\t\t\t\t    src_elt->exp, 0))\n \t\t      {"}]}