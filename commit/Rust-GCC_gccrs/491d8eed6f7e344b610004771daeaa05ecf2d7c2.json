{"sha": "491d8eed6f7e344b610004771daeaa05ecf2d7c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDkxZDhlZWQ2ZjdlMzQ0YjYxMDAwNDc3MWRhZWFhMDVlY2YyZDdjMg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-05-29T21:33:27Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-05-29T21:33:27Z"}, "message": "i386.md (*movoi_internal_avx): Use standard_sse_constant_opcode for alternative 0.\n\n\t* config/i386/i386.md (*movoi_internal_avx): Use\n\tstandard_sse_constant_opcode for alternative 0.\n\t(*movti_internal_sse): Ditto.\n\t(*movti_internal_rex64): Use standard_sse_constant_opcode for\n\talternative 2.\n\t(*movdi_internal_rex64): Use standard_sse_constant_opcode for\n\tsselog1 type moves.\n\t(*movsi_internal): Ditto.\n\t(*movdi_internal): Ditto.  Add ssecvt type moves.\n\nFrom-SVN: r174417", "tree": {"sha": "ac003118a9d1b52c17ec140c15f51b2f574f607d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac003118a9d1b52c17ec140c15f51b2f574f607d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/491d8eed6f7e344b610004771daeaa05ecf2d7c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/491d8eed6f7e344b610004771daeaa05ecf2d7c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/491d8eed6f7e344b610004771daeaa05ecf2d7c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/491d8eed6f7e344b610004771daeaa05ecf2d7c2/comments", "author": null, "committer": null, "parents": [{"sha": "5e7bb2b9b1c145d426011d5807931e1bc7ab246f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e7bb2b9b1c145d426011d5807931e1bc7ab246f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e7bb2b9b1c145d426011d5807931e1bc7ab246f"}], "stats": {"total": 124, "additions": 86, "deletions": 38}, "files": [{"sha": "02c1bf734ce63342d1d3c4fc2cf268e9cd2f68f7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/491d8eed6f7e344b610004771daeaa05ecf2d7c2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/491d8eed6f7e344b610004771daeaa05ecf2d7c2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=491d8eed6f7e344b610004771daeaa05ecf2d7c2", "patch": "@@ -1,3 +1,15 @@\n+2011-05-29  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*movoi_internal_avx): Use\n+\tstandard_sse_constant_opcode for alternative 0.\n+\t(*movti_internal_sse): Ditto.\n+\t(*movti_internal_rex64): Use standard_sse_constant_opcode for\n+\talternative 2.\n+\t(*movdi_internal_rex64): Use standard_sse_constant_opcode for\n+\tsselog1 type moves.\n+\t(*movsi_internal): Ditto.\n+\t(*movdi_internal): Ditto.  Add ssecvt type moves.\n+\n 2011-05-29  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR target/48830\n@@ -45,8 +57,8 @@\n \t(lto_output_location_bitpack): Update.\n \t(lto_output_builtin_tree): Update.\n \t* lto-streamer.h (struct output_block): Add obstack.\n-\t(lto_output_string, lto_output_string_with_length): Remove declarations;\n-\tfunctions are static now.\n+\t(lto_output_string, lto_output_string_with_length): Remove\n+\tdeclarations; functions are static now.\n \n 2011-05-28  Jan Hubicka  <jh@suse.cz>\n \n@@ -108,7 +120,7 @@\n \t(build_and_insert_call): New.\n \t(gimple_expand_builtin_pow): Add handling for pow(x,y) when y is\n \t0.5, 0.25, 0.75, 1./3., or 1./6.\n-\t\n+\n 2011-05-27  Alexander Monakov  <amonakov@ispras.ru>\n \n \t* doc/contrib.texi: Update copyright years.\n@@ -231,7 +243,7 @@\n \tlen values.\n \t* lto-streamer-in.c (string_for_index): Break out from ...; offset\n \tvalues by 1.\n-\t(input_string_internal): ... here; \n+\t(input_string_internal): ... here;\n \t(input_string_cst, input_identifier, lto_input_string): Update handling\n \tof NULL strings.\n \t(lto_input_location_bitpack): New function\n@@ -322,7 +334,7 @@\n 2011-05-26  Hariharan Sandanagobalane <hariharan@picochip.com>\n \n \t* config/picochip/picochip.md (cbranchhi4): No :CC for match_operator.\n-\t  The instruction is then expanded explicitly.\n+\tThe instruction is then expanded explicitly.\n \t(supported_compare): Callable instruction.\n \t(compare): Likewise.\n "}, {"sha": "89e11730faa087c8f28b64c1f7602da4ab7c081d", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 69, "deletions": 33, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/491d8eed6f7e344b610004771daeaa05ecf2d7c2/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/491d8eed6f7e344b610004771daeaa05ecf2d7c2/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=491d8eed6f7e344b610004771daeaa05ecf2d7c2", "patch": "@@ -1855,7 +1855,7 @@\n   switch (which_alternative)\n     {\n     case 0:\n-      return \"vxorps\\t%0, %0, %0\";\n+      return standard_sse_constant_opcode (insn, operands[1]);\n     case 1:\n     case 2:\n       if (misaligned_operand (operands[0], OImode)\n@@ -1882,10 +1882,7 @@\n     case 1:\n       return \"#\";\n     case 2:\n-      if (get_attr_mode (insn) == MODE_V4SF)\n-\treturn \"%vxorps\\t%0, %d0\";\n-      else\n-\treturn \"%vpxor\\t%0, %d0\";\n+      return standard_sse_constant_opcode (insn, operands[1]);\n     case 3:\n     case 4:\n       /* TDmode values are passed as TImode on the stack.  Moving them\n@@ -1945,10 +1942,7 @@\n   switch (which_alternative)\n     {\n     case 0:\n-      if (get_attr_mode (insn) == MODE_V4SF)\n-\treturn \"%vxorps\\t%0, %d0\";\n-      else\n-\treturn \"%vpxor\\t%0, %d0\";\n+      return standard_sse_constant_opcode (insn, operands[1]);\n     case 1:\n     case 2:\n       /* TDmode values are passed as TImode on the stack.  Moving them\n@@ -2017,7 +2011,7 @@\n \treturn \"movq\\t{%1, %0|%0, %1}\";\n \n     case TYPE_SSELOG1:\n-      return \"%vpxor\\t%0, %d0\";\n+      return standard_sse_constant_opcode (insn, operands[1]);\n \n     case TYPE_MMX:\n       return \"pxor\\t%0, %0\";\n@@ -2065,8 +2059,14 @@\n        (and (eq_attr \"alternative\" \"2\") (eq_attr \"type\" \"imov\"))\n \t (const_string \"8\")\n \t (const_string \"*\")))\n-   (set_attr \"prefix_rex\" \"*,*,*,*,*,*,*,1,*,1,*,*,*,*,*,*,*,*,*\")\n-   (set_attr \"prefix_data16\" \"*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,1,*,*,*\")\n+   (set (attr \"prefix_rex\")\n+     (if_then_else (eq_attr \"alternative\" \"7,9\")\n+       (const_string \"1\")\n+       (const_string \"*\")))\n+   (set (attr \"prefix_data16\")\n+     (if_then_else (eq_attr \"alternative\" \"15\")\n+       (const_string \"1\")\n+       (const_string \"*\")))\n    (set (attr \"prefix\")\n      (if_then_else (eq_attr \"alternative\" \"11,12,13,14,15,16\")\n        (const_string \"maybe_vex\")\n@@ -2110,34 +2110,72 @@\n \n (define_insn \"*movdi_internal\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n-\t\t\t\"=r  ,o  ,*y,m*y,*y,*Y2,m  ,*Y2,*Y2,*x,m ,*x,*x\")\n+\t  \"=r  ,o  ,*y,m*y,*y,*Y2,m  ,*Y2,*Y2,*x,m ,*x,*x,?*Y2,?*Ym\")\n \t(match_operand:DI 1 \"general_operand\"\n-\t\t\t\"riFo,riF,C ,*y ,m ,C  ,*Y2,*Y2,m  ,C ,*x,*x,m \"))]\n+\t  \"riFo,riF,C ,*y ,m ,C  ,*Y2,*Y2,m  ,C ,*x,*x,m ,*Ym ,*Y2\"))]\n   \"!TARGET_64BIT && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n-  \"@\n-   #\n-   #\n-   pxor\\t%0, %0\n-   movq\\t{%1, %0|%0, %1}\n-   movq\\t{%1, %0|%0, %1}\n-   %vpxor\\t%0, %d0\n-   %vmovq\\t{%1, %0|%0, %1}\n-   %vmovdqa\\t{%1, %0|%0, %1}\n-   %vmovq\\t{%1, %0|%0, %1}\n-   xorps\\t%0, %0\n-   movlps\\t{%1, %0|%0, %1}\n-   movaps\\t{%1, %0|%0, %1}\n-   movlps\\t{%1, %0|%0, %1}\"\n+{\n+  switch (get_attr_type (insn))\n+    {\n+    case TYPE_SSECVT:\n+      if (SSE_REG_P (operands[0]))\n+\treturn \"movq2dq\\t{%1, %0|%0, %1}\";\n+      else\n+\treturn \"movdq2q\\t{%1, %0|%0, %1}\";\n+\n+    case TYPE_SSEMOV:\n+      switch (get_attr_mode (insn))\n+\t{\n+\tcase MODE_TI:\n+\t  return \"%vmovdqa\\t{%1, %0|%0, %1}\";\n+\tcase MODE_DI:\n+\t   return \"%vmovq\\t{%1, %0|%0, %1}\";\n+\tcase MODE_V4SF:\n+\t  return \"movaps\\t{%1, %0|%0, %1}\";\n+\tcase MODE_V2SF:\n+\t  return \"movlps\\t{%1, %0|%0, %1}\";\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+\n+    case TYPE_MMXMOV:\n+      return \"movq\\t{%1, %0|%0, %1}\";\n+\n+    case TYPE_SSELOG1:\n+      return standard_sse_constant_opcode (insn, operands[1]);\n+\n+    case TYPE_MMX:\n+      return \"pxor\\t%0, %0\";\n+\n+    case TYPE_MULTI:\n+      return \"#\";\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n   [(set (attr \"isa\")\n      (if_then_else (eq_attr \"alternative\" \"9,10,11,12\")\n        (const_string \"noavx\")\n        (const_string \"base\")))\n-   (set_attr \"type\" \"*,*,mmx,mmxmov,mmxmov,sselog1,ssemov,ssemov,ssemov,sselog1,ssemov,ssemov,ssemov\")\n+   (set (attr \"type\")\n+     (cond [(eq_attr \"alternative\" \"0,1\")\n+\t      (const_string \"multi\")\n+\t    (eq_attr \"alternative\" \"2\")\n+\t      (const_string \"mmx\")\n+\t    (eq_attr \"alternative\" \"3,4\")\n+\t      (const_string \"mmxmov\")\n+\t    (eq_attr \"alternative\" \"5,9\")\n+\t      (const_string \"sselog1\")\n+\t    (eq_attr \"alternative\" \"13,14\")\n+\t      (const_string \"ssecvt\")\n+\t   ]\n+\t   (const_string \"ssemov\")))\n    (set (attr \"prefix\")\n      (if_then_else (eq_attr \"alternative\" \"5,6,7,8\")\n        (const_string \"maybe_vex\")\n        (const_string \"orig\")))\n-   (set_attr \"mode\" \"DI,DI,DI,DI,DI,TI,DI,TI,DI,V4SF,V2SF,V4SF,V2SF\")])\n+   (set_attr \"mode\" \"DI,DI,DI,DI,DI,TI,DI,TI,DI,V4SF,V2SF,V4SF,V2SF,DI,DI\")])\n \n (define_split\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n@@ -2158,9 +2196,7 @@\n   switch (get_attr_type (insn))\n     {\n     case TYPE_SSELOG1:\n-      if (get_attr_mode (insn) == MODE_TI)\n-        return \"%vpxor\\t%0, %d0\";\n-      return \"%vxorps\\t%0, %d0\";\n+      return standard_sse_constant_opcode (insn, operands[1]);\n \n     case TYPE_SSEMOV:\n       switch (get_attr_mode (insn))"}]}