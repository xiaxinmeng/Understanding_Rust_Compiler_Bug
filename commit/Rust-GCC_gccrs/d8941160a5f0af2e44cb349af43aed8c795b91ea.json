{"sha": "d8941160a5f0af2e44cb349af43aed8c795b91ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg5NDExNjBhNWYwYWYyZTQ0Y2IzNDlhZjQzYWVkOGM3OTViOTFlYQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2014-07-17T07:04:32Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-17T07:04:32Z"}, "message": "bindgen.adb (Gen_Elab_Calls): Skip reference to elab entity if none exists (Gen_Elab_Calls): Complain if...\n\n2014-07-17  Robert Dewar  <dewar@adacore.com>\n\n\t* bindgen.adb (Gen_Elab_Calls): Skip reference to elab\n\tentity if none exists (Gen_Elab_Calls): Complain if clash with\n\tNo_Multiple_Elaboration.\n\t* s-rident.ads, restrict.ads: Add restriction No_Multiple_Elaboration.\n\t* sem_util.adb (Build_Elaboration_Entity): Skip building entity\n\tif not needed.\n\t* gnat_rm.texi: Document restriction No_Multiple_Elaboration.\n\t* sem_ch4.adb: Minor comment updates.\n\nFrom-SVN: r212735", "tree": {"sha": "352d2db8f4189df2df675f4be0af31df5b8b4d3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/352d2db8f4189df2df675f4be0af31df5b8b4d3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8941160a5f0af2e44cb349af43aed8c795b91ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8941160a5f0af2e44cb349af43aed8c795b91ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8941160a5f0af2e44cb349af43aed8c795b91ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8941160a5f0af2e44cb349af43aed8c795b91ea/comments", "author": null, "committer": null, "parents": [{"sha": "bf561f2ba32d1a67ff832688a0117ece05578034", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf561f2ba32d1a67ff832688a0117ece05578034", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf561f2ba32d1a67ff832688a0117ece05578034"}], "stats": {"total": 130, "additions": 112, "deletions": 18}, "files": [{"sha": "b3f3ce6385e042f49db27b94c5b80a79317aa762", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8941160a5f0af2e44cb349af43aed8c795b91ea/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8941160a5f0af2e44cb349af43aed8c795b91ea/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d8941160a5f0af2e44cb349af43aed8c795b91ea", "patch": "@@ -1,3 +1,14 @@\n+2014-07-17  Robert Dewar  <dewar@adacore.com>\n+\n+\t* bindgen.adb (Gen_Elab_Calls): Skip reference to elab\n+\tentity if none exists (Gen_Elab_Calls): Complain if clash with\n+\tNo_Multiple_Elaboration.\n+\t* s-rident.ads, restrict.ads: Add restriction No_Multiple_Elaboration.\n+\t* sem_util.adb (Build_Elaboration_Entity): Skip building entity\n+\tif not needed.\n+\t* gnat_rm.texi: Document restriction No_Multiple_Elaboration.\n+\t* sem_ch4.adb: Minor comment updates.\n+\n 2014-07-17  Ed Schonberg  <schonberg@adacore.com>\n \n \t* exp_ch9.adb (Buid_Protected_Subprogram_Call): Preserve type"}, {"sha": "a192953fbbcb6c9355ce0f8e2b54e27fc632f8bf", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 47, "deletions": 12, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8941160a5f0af2e44cb349af43aed8c795b91ea/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8941160a5f0af2e44cb349af43aed8c795b91ea/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=d8941160a5f0af2e44cb349af43aed8c795b91ea", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1068,6 +1068,8 @@ package body Bindgen is\n       Check_Elab_Flag : Boolean;\n \n    begin\n+      --  Loop through elaboration order entries\n+\n       for E in Elab_Order.First .. Elab_Order.Last loop\n          declare\n             Unum : constant Unit_Id := Elab_Order.Table (E);\n@@ -1098,20 +1100,23 @@ package body Bindgen is\n \n             --  Case of no elaboration code\n \n-            --  In CodePeer mode, we special case subprogram bodies which\n-            --  are handled in the 'else' part below, and lead to a call to\n-            --  <subp>'Elab_Subp_Body.\n-\n             elsif U.No_Elab\n+\n+              --  In CodePeer mode, we special case subprogram bodies which\n+              --  are handled in the 'else' part below, and lead to a call\n+              --  to <subp>'Elab_Subp_Body.\n+\n               and then (not CodePeer_Mode\n+\n+                         --  Test for spec\n+\n                          or else U.Utype = Is_Spec\n                          or else U.Utype = Is_Spec_Only\n                          or else U.Unit_Kind /= 's')\n             then\n-\n                --  In the case of a body with a separate spec, where the\n                --  separate spec has an elaboration entity defined, this is\n-               --  where we increment the elaboration entity.\n+               --  where we increment the elaboration entity if one exists\n \n                if U.Utype = Is_Body\n                  and then Units.Table (Unum_Spec).Set_Elab_Entity\n@@ -1142,8 +1147,7 @@ package body Bindgen is\n                --  a spec with a body, the elaboration entity is initialized\n                --  here. This is done because it's the only way to accomplish\n                --  initialization of such entities, as there is no mechanism\n-               --  provided for initializing global variables at load time on\n-               --  AAMP.\n+               --  for load time global variable initialization on AAMP.\n \n                elsif AAMP_On_Target\n                  and then U.Utype = Is_Spec\n@@ -1179,8 +1183,7 @@ package body Bindgen is\n                --  a spec with a body, the elaboration entity is initialized\n                --  here. This is done because it's the only way to accomplish\n                --  initialization of such entities, as there is no mechanism\n-               --  provided for initializing global variables at load time on\n-               --  AAMP.\n+               --  for load time global variable initialization on AAMP.\n \n                if AAMP_On_Target\n                  and then U.Utype = Is_Spec\n@@ -1192,8 +1195,39 @@ package body Bindgen is\n                   Write_Statement_Buffer;\n                end if;\n \n+               --  Check incompatibilities with No_Multiple_Elaboration\n+\n+               if not CodePeer_Mode\n+                 and then Cumulative_Restrictions.Set (No_Multiple_Elaboration)\n+               then\n+                  --  Force_Checking_Of_Elaboration_Flags (-F) not allowed\n+\n+                  if Force_Checking_Of_Elaboration_Flags then\n+                     Osint.Fail\n+                       (\"-F (force elaboration checks) switch not allowed \"\n+                        & \"with restriction No_Multiple_Elaboration active\");\n+\n+                  --  Interfacing of libraries not allowed\n+\n+                  elsif Interface_Library_Unit then\n+                     Osint.Fail\n+                       (\"binding of interfaced libraries not allowed \"\n+                        & \"with restriction No_Multiple_Elaboration active\");\n+\n+                  --  Non-Ada main program not allowed\n+\n+                  elsif not Bind_Main_Program then\n+                     Osint.Fail\n+                       (\"non-Ada main program not allowed \"\n+                        & \"with restriction No_Multiple_Elaboration active\");\n+                  end if;\n+               end if;\n+\n+               --  OK, see if we need to test elaboration flag\n+\n                Check_Elab_Flag :=\n-                 not CodePeer_Mode\n+                 Units.Table (Unum_Spec).Set_Elab_Entity\n+                   and then not CodePeer_Mode\n                    and then (Force_Checking_Of_Elaboration_Flags\n                               or Interface_Library_Unit\n                               or not Bind_Main_Program);\n@@ -1253,6 +1287,7 @@ package body Bindgen is\n \n                if U.Utype /= Is_Spec\n                  and then not CodePeer_Mode\n+                 and then Units.Table (Unum_Spec).Set_Elab_Entity\n                then\n                   Set_String (\"      E\");\n                   Set_Unit_Number (Unum_Spec);"}, {"sha": "3fd1c59621d722b0afff325dd6e7c51723c77c87", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8941160a5f0af2e44cb349af43aed8c795b91ea/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8941160a5f0af2e44cb349af43aed8c795b91ea/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=d8941160a5f0af2e44cb349af43aed8c795b91ea", "patch": "@@ -1,3 +1,4 @@\n+\n \\input texinfo   @c -*-texinfo-*-\n \n @c %**start of header\n@@ -446,6 +447,7 @@ Partition-Wide Restrictions\n * No_Local_Protected_Objects::\n * No_Local_Timing_Events::\n * No_Long_Long_Integers::\n+* No_Multiple_Elaboration::\n * No_Nested_Finalization::\n * No_Protected_Type_Allocators::\n * No_Protected_Types::\n@@ -9941,6 +9943,7 @@ then all compilation units in the partition must obey the restriction).\n * No_Local_Protected_Objects::\n * No_Local_Timing_Events::\n * No_Long_Long_Integers::\n+* No_Multiple_Elaboration::\n * No_Nested_Finalization::\n * No_Protected_Type_Allocators::\n * No_Protected_Types::\n@@ -10398,6 +10401,23 @@ type Standard.Long_Long_Integer, and also forbids declaring range types whose\n implicit base type is Long_Long_Integer, and modular types whose size exceeds\n Long_Integer'Size.\n \n+@node No_Multiple_Elaboration\n+@unnumberedsubsec No_Multiple_Elaboration\n+@findex No_Multiple_Elaboration\n+[GNAT] Normally each package contains a 16-bit counter used to check for access\n+before elaboration, and to control multiple elaboration attempts.\n+This counter is eliminated for units compiled with the static model\n+of elaboration if restriction @code{No_Elaboration_Code}\n+is active but because of\n+the need to check for multiple elaboration in the general case, these\n+counters cannot be eliminated if elaboration code may be present. The\n+restriction @code{No_Multiple_Elaboration}\n+allows suppression of these counters\n+in static elaboration units even if they do have elaboration code. If this\n+restriction is used, then the situations in which multiple elaboration is\n+possible, including non-Ada main programs, and Stand Alone libraries, are not\n+permitted, and will be diagnosed by the binder.\n+\n @node No_Nested_Finalization\n @unnumberedsubsec No_Nested_Finalization\n @findex No_Nested_Finalization"}, {"sha": "5cae0d6bd5853df9a575b5283e97ef090697cbde", "filename": "gcc/ada/restrict.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8941160a5f0af2e44cb349af43aed8c795b91ea/gcc%2Fada%2Frestrict.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8941160a5f0af2e44cb349af43aed8c795b91ea/gcc%2Fada%2Frestrict.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frestrict.ads?ref=d8941160a5f0af2e44cb349af43aed8c795b91ea", "patch": "@@ -130,6 +130,7 @@ package Restrict is\n       No_Initialize_Scalars              => True,\n       No_Local_Protected_Objects         => True,\n       No_Long_Long_Integers              => True,\n+      No_Multiple_Elaboration            => True,\n       No_Protected_Type_Allocators       => True,\n       No_Relative_Delay                  => True,\n       No_Requeue_Statements              => True,"}, {"sha": "3b777f706ca9b01b9c346e61df2063d5e9a52198", "filename": "gcc/ada/s-rident.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8941160a5f0af2e44cb349af43aed8c795b91ea/gcc%2Fada%2Fs-rident.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8941160a5f0af2e44cb349af43aed8c795b91ea/gcc%2Fada%2Fs-rident.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-rident.ads?ref=d8941160a5f0af2e44cb349af43aed8c795b91ea", "patch": "@@ -125,6 +125,7 @@ package System.Rident is\n       No_Local_Timing_Events,                    -- (RM D.7(10.2/2))\n       No_Local_Protected_Objects,                -- Ada 2012 (D.7(10/1.3))\n       No_Long_Long_Integers,                     -- GNAT\n+      No_Multiple_Elaboration,                   -- GNAT\n       No_Nested_Finalization,                    -- (RM D.7(4))\n       No_Protected_Type_Allocators,              -- Ada 2012 (D.7 (10.3/2))\n       No_Protected_Types,                        -- (RM H.4(5))"}, {"sha": "21077f662d715ff63660f7f2a9403a22c99b9b8d", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8941160a5f0af2e44cb349af43aed8c795b91ea/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8941160a5f0af2e44cb349af43aed8c795b91ea/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=d8941160a5f0af2e44cb349af43aed8c795b91ea", "patch": "@@ -408,7 +408,7 @@ package body Sem_Ch4 is\n \n       --  In accordance with H.4(7), the No_Allocators restriction only applies\n       --  to user-written allocators. The same consideration applies to the\n-      --  No_Allocators_Before_Elaboration restriction.\n+      --  No_Standard_Allocators_Before_Elaboration restriction.\n \n       if Comes_From_Source (N) then\n          Check_Restriction (No_Allocators, N);\n@@ -428,7 +428,8 @@ package body Sem_Ch4 is\n               and then List_Containing (C) = Statements (P)\n             then\n                --  Check for allocator within task body, this is a definite\n-               --  violation of No_Allocators_After_Elaboration we can detect.\n+               --  violation of No_Allocators_After_Elaboration we can detect\n+               --  at compile time.\n \n                if Nkind (Original_Node (Parent (P))) = N_Task_Body then\n                   Check_Restriction"}, {"sha": "072383eaa50ca66dbbe8f745fec693a7906d5aaf", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8941160a5f0af2e44cb349af43aed8c795b91ea/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8941160a5f0af2e44cb349af43aed8c795b91ea/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=d8941160a5f0af2e44cb349af43aed8c795b91ea", "patch": "@@ -1289,19 +1289,44 @@ package body Sem_Util is\n    --  Start of processing for Build_Elaboration_Entity\n \n    begin\n-      --  Ignore if already constructed\n+      --  Ignore call if already constructed\n \n       if Present (Elaboration_Entity (Spec_Id)) then\n          return;\n-      end if;\n \n       --  Ignore in ASIS mode, elaboration entity is not in source and plays\n       --  no role in analysis.\n \n-      if ASIS_Mode then\n+      elsif ASIS_Mode then\n+         return;\n+\n+      --  See if we need elaboration entity. We always need it for the dynamic\n+      --  elaboration model, since it is needed to properly generate the PE\n+      --  exception for access before elaboration.\n+\n+      elsif Dynamic_Elaboration_Checks then\n+         null;\n+\n+      --  For the static model, we don't need the elaboration counter if this\n+      --  unit is sure to have no elaboration code, since that means there\n+      --  is no elaboration unit to be called. Note that we can't just decide\n+      --  after the fact by looking to see whether there was elaboration code,\n+      --  because that's too late to make this decision.\n+\n+      elsif Restriction_Active (No_Elaboration_Code) then\n+         return;\n+\n+      --  Similarly, for the static model, we can skip the elaboration counter\n+      --  if we have the No_Multiple_Elaboration restriction, since for the\n+      --  static model, that's the only purpose of the counter (to avoid\n+      --  multiple elaboration).\n+\n+      elsif Restriction_Active (No_Multiple_Elaboration) then\n          return;\n       end if;\n \n+      --  Here we need the elaboration entity\n+\n       --  Construct name of elaboration entity as xxx_E, where xxx is the unit\n       --  name with dots replaced by double underscore. We have to manually\n       --  construct this name, since it will be elaborated in the outer scope,\n@@ -1351,8 +1376,8 @@ package body Sem_Util is\n       Disc : Entity_Id)\n    is\n       Loc : constant Source_Ptr := Sloc (Expr);\n-   begin\n \n+   begin\n       --  An entity of a type with a reference aspect is overloaded with\n       --  both interpretations: with and without the dereference. Now that\n       --  the dereference is made explicit, set the type of the node properly,"}]}