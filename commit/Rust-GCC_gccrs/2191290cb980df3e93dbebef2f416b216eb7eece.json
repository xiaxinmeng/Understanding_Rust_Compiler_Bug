{"sha": "2191290cb980df3e93dbebef2f416b216eb7eece", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE5MTI5MGNiOTgwZGYzZTkzZGJlYmVmMmY0MTZiMjE2ZWI3ZWVjZQ==", "commit": {"author": {"name": "Doug Evans", "email": "devans@gcc.gnu.org", "date": "1997-10-17T23:25:26Z"}, "committer": {"name": "Doug Evans", "email": "devans@gcc.gnu.org", "date": "1997-10-17T23:25:26Z"}, "message": "Rewrite v9 support.\n\nFrom-SVN: r15986", "tree": {"sha": "608806aaea5d1d8d596284a1f16adcf6e6aa74f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/608806aaea5d1d8d596284a1f16adcf6e6aa74f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2191290cb980df3e93dbebef2f416b216eb7eece", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2191290cb980df3e93dbebef2f416b216eb7eece", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2191290cb980df3e93dbebef2f416b216eb7eece", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2191290cb980df3e93dbebef2f416b216eb7eece/comments", "author": null, "committer": null, "parents": [{"sha": "bf65b159eca3b3a5b4ff6dd0d923b83223b3e3f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf65b159eca3b3a5b4ff6dd0d923b83223b3e3f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf65b159eca3b3a5b4ff6dd0d923b83223b3e3f2"}], "stats": {"total": 111, "additions": 35, "deletions": 76}, "files": [{"sha": "73c9de1cd9a0bed1b75775d28b8ad0ba9f89bb34", "filename": "gcc/ginclude/va-sparc.h", "status": "modified", "additions": 35, "deletions": 76, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2191290cb980df3e93dbebef2f416b216eb7eece/gcc%2Fginclude%2Fva-sparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2191290cb980df3e93dbebef2f416b216eb7eece/gcc%2Fginclude%2Fva-sparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fva-sparc.h?ref=2191290cb980df3e93dbebef2f416b216eb7eece", "patch": "@@ -5,19 +5,7 @@\n \n #ifndef __GNUC_VA_LIST\n #define __GNUC_VA_LIST\n-\n-#ifdef __arch64__\n-typedef long long __va_greg;\n-typedef double __va_freg;\n-typedef struct {\n-  __va_greg * __va_next_o;\t\t/* next available %o* register */\n-  __va_greg * __va_next_o_limit;\t/* past last available %o* register */\n-  __va_freg * __va_next_fp;\t\t/* next available %f* register */\n-  __va_freg * __va_next_fp_limit;\t/* last available %f* register */\n-  __va_greg * __va_next_stack;\t\t/* next extended word on stack */\n-} __gnuc_va_list;\n-#else\n-#if ! defined (__svr4__) && ! defined (__linux__)\n+#if ! defined (__svr4__) && ! defined (__linux__) && ! defined (__arch64__)\n /* This has to be a char * to be compatible with Sun.\n    i.e., we have to pass a `va_list' to vsprintf.  */\n typedef char * __gnuc_va_list;\n@@ -26,7 +14,6 @@ typedef char * __gnuc_va_list;\n    i.e., we have to pass a `va_list' to vsprintf.  */\n typedef void * __gnuc_va_list;\n #endif\n-#endif /* not __arch64__ */\n #endif /* not __GNUC_VA_LIST */\n \n /* If this is for internal libc use, don't define anything but\n@@ -35,56 +22,27 @@ typedef void * __gnuc_va_list;\n \n #ifdef _STDARG_H\n \n-#ifdef __arch64__\n-#define va_start(AP, LASTARG) \\\n-__extension__ \\\n-  ({ \\\n-     AP.__va_next_o = (__va_greg *) __builtin_saveregs (); \\\n-     AP.__va_next_o_limit = (AP.__va_next_o + \\\n-\t\t\t     (__builtin_args_info (0) < 6 ? 6 - __builtin_args_info (0) : 0)); \\\n-     AP.__va_next_fp = (__va_freg *) AP.__va_next_o_limit; \\\n-     AP.__va_next_fp_limit = (AP.__va_next_fp + \\\n-\t\t\t      (__builtin_args_info (1) < 16 ? (16 - __builtin_args_info (1) + 1) / 2 : 0)); \\\n-     AP.__va_next_stack = (__va_greg *) __builtin_next_arg (LASTARG); \\\n-  })\n-#else\n /* Call __builtin_next_arg even though we aren't using its value, so that\n    we can verify that LASTARG is correct.  */\n-#ifdef __GCC_NEW_VARARGS__\n+#if defined (__GCC_NEW_VARARGS__) || defined (__arch64__)\n #define va_start(AP, LASTARG) \\\n   (__builtin_next_arg (LASTARG), AP = (char *) __builtin_saveregs ())\n #else\n #define va_start(AP, LASTARG)\t\t\t\t\t\\\n   (__builtin_saveregs (), AP = ((char *) __builtin_next_arg (LASTARG)))\n #endif\n-#endif /* not __arch64__ */\n \n #else\n \n #define va_alist  __builtin_va_alist\n #define va_dcl    int __builtin_va_alist;...\n \n-#ifdef __arch64__\n-#define va_start(AP) \\\n-__extension__ \\\n-  ({ \\\n-     AP.__va_next_o = (__va_greg *) __builtin_saveregs (); \\\n-     AP.__va_next_o_limit = (AP.__va_next_o + \\\n-\t\t\t     (__builtin_args_info (0) < 6 ? 6 - __builtin_args_info (0) : 0)); \\\n-     AP.__va_next_fp = (__va_freg *) AP.__va_next_o_limit; \\\n-     AP.__va_next_fp_limit = (AP.__va_next_fp + \\\n-\t\t\t      (__builtin_args_info (1) < 16 ? (16 - __builtin_args_info (1) + 1) / 2 : 0)); \\\n-     AP.__va_next_stack = (__va_greg *) __builtin_next_arg (__builtin_va_alist) \\\n-       - (__builtin_args_info (0) >= 6 || __builtin_args_info (1) >= 16 ? 1 : 0); \\\n-  })\n+#if defined (__GCC_NEW_VARARGS__) || defined (__arch64__)\n+#define va_start(AP)\t((AP) = (char *) __builtin_saveregs ())\n #else\n-#ifdef __GCC_NEW_VARARGS__\n-#define va_start(AP)\t\t((AP) = (char *) __builtin_saveregs ())\n-#else\n-#define va_start(AP) \t\t\t\t\t\t\\\n- (__builtin_saveregs (), (AP) = ((char *) &__builtin_va_alist))\n+#define va_start(AP) \\\n+  (__builtin_saveregs (), (AP) = ((char *) &__builtin_va_alist))\n #endif\n-#endif /* not __arch64__ */\n \n #endif\n \n@@ -131,45 +89,45 @@ enum __va_type_classes {\n \n #ifdef __arch64__\n \n-#define va_arg(pvar,TYPE)\t\t\t\t\t\\\n+typedef unsigned int __ptrint __attribute__ ((__mode__ (__DI__)));\n+\n+/* ??? TODO: little endian support */\n+\n+#define va_arg(pvar, TYPE) \\\n __extension__\t\t\t\t\t\t\t\\\n (*({int __type = __builtin_classify_type (* (TYPE *) 0);\t\\\n-  void * __result;\t\t\t\t\t\t\\\n+  char * __result;\t\t\t\t\t\t\\\n   if (__type == __real_type_class)\t\t/* float? */\t\\\n     {\t\t\t\t\t\t\t\t\\\n-      __va_freg *__r;\t\t\t\t\t\t\\\n-      /* see PASS_IN_REG_P in gcc's sparc.h */\t\t\t\\\n-      if (pvar.__va_next_fp < pvar.__va_next_fp_limit\t\t\\\n-\t  && ((__r = (__va_freg *) (((__va_greg) pvar.__va_next_fp + sizeof (TYPE) - 1) & ~(__va_greg) (sizeof (TYPE) - 1))) \\\n-\t      < pvar.__va_next_fp_limit))\t\t\t\\\n-\t{\t\t\t\t\t\t\t\\\n-\t  pvar.__va_next_fp = __r + (sizeof (TYPE) + 7) / 8;\t\\\n-\t}\t\t\t\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\\\n-\t  __r = (__va_freg *) pvar.__va_next_stack;\t\t\\\n-\t  pvar.__va_next_stack += (sizeof (TYPE) + 7) / 8;\t\\\n-\t}\t\t\t\t\t\t\t\\\n-      __result = __r;\t\t\t\t\t\t\\\n+      if (__alignof__ (TYPE) == 16)\t\t\t\t\\\n+\t(pvar) = (void *) (((__ptrint) (pvar) + 15) & -16);\t\\\n+      __result = (pvar);\t\t\t\t\t\\\n+      (pvar) = (char *) (pvar) + sizeof (TYPE);\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   else if (__type < __record_type_class)\t/* integer? */\t\\\n     {\t\t\t\t\t\t\t\t\\\n-      __va_greg *__r;\t\t\t\t\t\t\\\n-      if (pvar.__va_next_o < pvar.__va_next_o_limit)\t\t\\\n-\t__r = pvar.__va_next_o++;\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\\\n-\t__r = pvar.__va_next_stack++;\t\t\t\t\\\n-      /* adjust for 4 byte ints */\t\t\t\t\\\n-      __result = (char *) __r + 8 - sizeof (TYPE);\t\t\\\n+      (pvar) = (char *) (pvar) + 8;\t\t\t\t\\\n+      __result = (char *) (pvar) - sizeof (TYPE);\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   else /* aggregate object */\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n-      void **__r;\t\t\t\t\t\t\\\n-      if (pvar.__va_next_o < pvar.__va_next_o_limit)\t\t\\\n-\t__r = (void **) pvar.__va_next_o++;\t\t\t\\\n+      if (sizeof (TYPE) <= 8)\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  __result = (pvar);\t\t\t\t\t\\\n+\t  (pvar) = (char *) (pvar) + 8;\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+      else if (sizeof (TYPE) <= 16)\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  if (__alignof__ (TYPE) == 16)\t\t\t\t\\\n+\t    (pvar) = (void *) (((__ptrint) (pvar) + 15) & -16);\t\\\n+\t  __result = (pvar);\t\t\t\t\t\\\n+\t  (pvar) = (char *) (pvar) + 16;\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n       else\t\t\t\t\t\t\t\\\n-\t__r = (void **) pvar.__va_next_stack++;\t\t\t\\\n-      __result = *__r;\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  __result = * (void **) (pvar);\t\t\t\\\n+\t  (pvar) = (char *) (pvar) + 8;\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   (TYPE *) __result;}))\n \n@@ -198,6 +156,7 @@ __extension__\t\t\t\t\t\t\t\\\n \t (TYPE *) (void *) __u.__d; })\t\t\t\t\\\n     : ((pvar) = (char *)(pvar) + __va_rounded_size (TYPE),\t\\\n        ((TYPE *) (void *) ((char *)(pvar) - __va_rounded_size (TYPE)))));}))\n+\n #endif /* not __arch64__ */\n \n /* Copy __gnuc_va_list into another variable of this type.  */"}]}