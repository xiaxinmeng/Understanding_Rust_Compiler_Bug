{"sha": "6c0c245e30e159720d62954a978ec2eb4d526d88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmMwYzI0NWUzMGUxNTk3MjBkNjI5NTRhOTc4ZWMyZWI0ZDUyNmQ4OA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-12-17T21:11:46Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-12-17T21:11:46Z"}, "message": "sreal.h (sreal::normalize): Implement inline.\n\n\t* sreal.h (sreal::normalize): Implement inline.\n\t(sreal::normalize_up): New function.\n\t(sreal::normalize_down): New function.\n\t* sreal.c (sreal::normalize): Remove.\n\nFrom-SVN: r218833", "tree": {"sha": "78d1b62334419d5a244d634c647dc1fd0ac08abb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78d1b62334419d5a244d634c647dc1fd0ac08abb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c0c245e30e159720d62954a978ec2eb4d526d88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c0c245e30e159720d62954a978ec2eb4d526d88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c0c245e30e159720d62954a978ec2eb4d526d88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c0c245e30e159720d62954a978ec2eb4d526d88/comments", "author": null, "committer": null, "parents": [{"sha": "12d9ce19034428072b3779eff017c5e129ee4c0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12d9ce19034428072b3779eff017c5e129ee4c0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12d9ce19034428072b3779eff017c5e129ee4c0e"}], "stats": {"total": 150, "additions": 91, "deletions": 59}, "files": [{"sha": "eb016cdbc96d683eaf1a9a38150a47cf8e370832", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c0c245e30e159720d62954a978ec2eb4d526d88/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c0c245e30e159720d62954a978ec2eb4d526d88/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c0c245e30e159720d62954a978ec2eb4d526d88", "patch": "@@ -1,3 +1,10 @@\n+2014-12-17  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* sreal.h (sreal::normalize): Implement inline.\n+\t(sreal::normalize_up): New function.\n+\t(sreal::normalize_down): New function.\n+\t* sreal.c (sreal::normalize): Remove.\n+\n 2014-12-17  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/aarch64/aarch64.md (generic_sched): Delete it."}, {"sha": "cf6b738cf48c2c42cddb8f77d3954f85fa700369", "filename": "gcc/sreal.c", "status": "modified", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c0c245e30e159720d62954a978ec2eb4d526d88/gcc%2Fsreal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c0c245e30e159720d62954a978ec2eb4d526d88/gcc%2Fsreal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsreal.c?ref=6c0c245e30e159720d62954a978ec2eb4d526d88", "patch": "@@ -96,64 +96,6 @@ sreal::shift_right (int s)\n   m_sig >>= s;\n }\n \n-/* Normalize *this.  */\n-\n-void\n-sreal::normalize ()\n-{\n-  int64_t s = m_sig < 0 ? -1 : 1;\n-  unsigned HOST_WIDE_INT sig = absu_hwi (m_sig);\n-\n-  if (sig == 0)\n-    {\n-      m_exp = -SREAL_MAX_EXP;\n-    }\n-  else if (sig < SREAL_MIN_SIG)\n-    {\n-      do\n-\t{\n-\t  sig <<= 1;\n-\t  m_exp--;\n-\t}\n-      while (sig < SREAL_MIN_SIG);\n-\n-      /* Check underflow.  */\n-      if (m_exp < -SREAL_MAX_EXP)\n-\t{\n-\t  m_exp = -SREAL_MAX_EXP;\n-\t  sig = 0;\n-\t}\n-    }\n-  else if (sig > SREAL_MAX_SIG)\n-    {\n-      int last_bit;\n-      do\n-\t{\n-\t  last_bit = sig & 1;\n-\t  sig >>= 1;\n-\t  m_exp++;\n-\t}\n-      while (sig > SREAL_MAX_SIG);\n-\n-      /* Round the number.  */\n-      sig += last_bit;\n-      if (sig > SREAL_MAX_SIG)\n-\t{\n-\t  sig >>= 1;\n-\t  m_exp++;\n-\t}\n-\n-      /* Check overflow.  */\n-      if (m_exp > SREAL_MAX_EXP)\n-\t{\n-\t  m_exp = SREAL_MAX_EXP;\n-\t  sig = SREAL_MAX_SIG;\n-\t}\n-    }\n-\n-  m_sig = s * sig;\n-}\n-\n /* Return integer value of *this.  */\n \n int64_t"}, {"sha": "2bee542a68cacf2a977e1fb251eb5cc33d8d7efa", "filename": "gcc/sreal.h", "status": "modified", "additions": 84, "deletions": 1, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c0c245e30e159720d62954a978ec2eb4d526d88/gcc%2Fsreal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c0c245e30e159720d62954a978ec2eb4d526d88/gcc%2Fsreal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsreal.h?ref=6c0c245e30e159720d62954a978ec2eb4d526d88", "patch": "@@ -116,7 +116,9 @@ class sreal\n   }\n \n private:\n-  void normalize ();\n+  inline void normalize ();\n+  inline void normalize_up ();\n+  inline void normalize_down ();\n   void shift_right (int amount);\n   static sreal signedless_plus (const sreal &a, const sreal &b, bool negative);\n   static sreal signedless_minus (const sreal &a, const sreal &b, bool negative);\n@@ -178,4 +180,85 @@ inline sreal operator>> (const sreal &a, int exp)\n   return a.shift (-exp);\n }\n \n+/* Make significant to be >= SREAL_MIN_SIG.\n+\n+   Make this separate method so inliner can handle hot path better.  */\n+\n+inline void\n+sreal::normalize_up ()\n+{\n+  int64_t s = m_sig < 0 ? -1 : 1;\n+  unsigned HOST_WIDE_INT sig = absu_hwi (m_sig);\n+  int shift = SREAL_PART_BITS - 2 - floor_log2 (sig);\n+\n+  gcc_checking_assert (shift > 0);\n+  sig <<= shift;\n+  m_exp -= shift;\n+  gcc_checking_assert (sig <= SREAL_MAX_SIG && sig >= SREAL_MIN_SIG);\n+\n+  /* Check underflow.  */\n+  if (m_exp < -SREAL_MAX_EXP)\n+    {\n+      m_exp = -SREAL_MAX_EXP;\n+      sig = 0;\n+    }\n+  if (s == -1)\n+    m_sig = -sig;\n+  else\n+    m_sig = sig;\n+}\n+\n+/* Make significant to be <= SREAL_MAX_SIG.\n+\n+   Make this separate method so inliner can handle hot path better.  */\n+\n+inline void\n+sreal::normalize_down ()\n+{\n+  int64_t s = m_sig < 0 ? -1 : 1;\n+  int last_bit;\n+  unsigned HOST_WIDE_INT sig = absu_hwi (m_sig);\n+  int shift = floor_log2 (sig) - SREAL_PART_BITS + 2;\n+\n+  gcc_checking_assert (shift > 0);\n+  last_bit = (sig >> (shift-1)) & 1;\n+  sig >>= shift;\n+  m_exp += shift;\n+  gcc_checking_assert (sig <= SREAL_MAX_SIG && sig >= SREAL_MIN_SIG);\n+\n+  /* Round the number.  */\n+  sig += last_bit;\n+  if (sig > SREAL_MAX_SIG)\n+    {\n+      sig >>= 1;\n+      m_exp++;\n+    }\n+\n+  /* Check overflow.  */\n+  if (m_exp > SREAL_MAX_EXP)\n+    {\n+      m_exp = SREAL_MAX_EXP;\n+      sig = SREAL_MAX_SIG;\n+    }\n+  if (s == -1)\n+    m_sig = -sig;\n+  else\n+    m_sig = sig;\n+}\n+\n+/* Normalize *this; the hot path.  */\n+\n+inline void\n+sreal::normalize ()\n+{\n+  unsigned HOST_WIDE_INT sig = absu_hwi (m_sig);\n+\n+  if (sig == 0)\n+    m_exp = -SREAL_MAX_EXP;\n+  else if (sig > SREAL_MAX_SIG)\n+    normalize_down ();\n+  else if (sig < SREAL_MIN_SIG)\n+    normalize_up ();\n+}\n+\n #endif"}]}