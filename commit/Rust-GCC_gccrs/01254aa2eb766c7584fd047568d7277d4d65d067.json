{"sha": "01254aa2eb766c7584fd047568d7277d4d65d067", "node_id": "C_kwDOANBUbNoAKDAxMjU0YWEyZWI3NjZjNzU4NGZkMDQ3NTY4ZDcyNzdkNGQ2NWQwNjc", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2022-12-09T21:13:45Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2022-12-09T21:19:26Z"}, "message": "Fortran: ICE on recursive derived types with allocatable components [PR107872]\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/107872\n\t* resolve.cc (derived_inaccessible): Skip over allocatable components\n\tto prevent an infinite loop.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/107872\n\t* gfortran.dg/pr107872.f90: New test.", "tree": {"sha": "8726f23de1cf1d42aa0c37e0b78c2dde810c6384", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8726f23de1cf1d42aa0c37e0b78c2dde810c6384"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01254aa2eb766c7584fd047568d7277d4d65d067", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01254aa2eb766c7584fd047568d7277d4d65d067", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01254aa2eb766c7584fd047568d7277d4d65d067", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01254aa2eb766c7584fd047568d7277d4d65d067/comments", "author": null, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2e1c49b4a4592f9e96ae9ece8af7d0e6527b194", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2e1c49b4a4592f9e96ae9ece8af7d0e6527b194", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2e1c49b4a4592f9e96ae9ece8af7d0e6527b194"}], "stats": {"total": 43, "additions": 42, "deletions": 1}, "files": [{"sha": "158bf08ec2676b2bac55c5edf3266739d174e750", "filename": "gcc/fortran/resolve.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01254aa2eb766c7584fd047568d7277d4d65d067/gcc%2Ffortran%2Fresolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01254aa2eb766c7584fd047568d7277d4d65d067/gcc%2Ffortran%2Fresolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.cc?ref=01254aa2eb766c7584fd047568d7277d4d65d067", "patch": "@@ -7536,7 +7536,8 @@ derived_inaccessible (gfc_symbol *sym)\n   for (c = sym->components; c; c = c->next)\n     {\n \t/* Prevent an infinite loop through this function.  */\n-\tif (c->ts.type == BT_DERIVED && c->attr.pointer\n+\tif (c->ts.type == BT_DERIVED\n+\t    && (c->attr.pointer || c->attr.allocatable)\n \t    && sym == c->ts.u.derived)\n \t  continue;\n "}, {"sha": "09838479e920edbe8ac04bd164fa2416c43d469f", "filename": "gcc/testsuite/gfortran.dg/pr107872.f90", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01254aa2eb766c7584fd047568d7277d4d65d067/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr107872.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01254aa2eb766c7584fd047568d7277d4d65d067/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr107872.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr107872.f90?ref=01254aa2eb766c7584fd047568d7277d4d65d067", "patch": "@@ -0,0 +1,40 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR107872, where an ICE occurred in\n+! resolve.cc(derived_inaccessible) because derived types with\n+! recursive allocatable components were not catered for.\n+!\n+module mod1\n+  type t\n+     integer :: data\n+     type(t), allocatable :: next\n+   contains\n+     procedure, private :: write_t\n+     generic :: write(formatted) => write_t\n+  end type\n+contains\n+  recursive subroutine write_t(this, unit, iotype, v_list, iostat, iomsg)\n+    class(t), intent(in) :: this\n+    integer, intent(in) :: unit\n+    character(*), intent(in) :: iotype\n+    integer, intent(in) :: v_list(:)\n+    integer, intent(out) :: iostat\n+    character(*), intent(inout) :: iomsg\n+    if (ALLOCATED(this%next)) &\n+         write (unit, '(dt)') this%next\n+    write (unit, '(i2)') this%data\n+  end subroutine\n+end module\n+\n+  use mod1\n+  type(t) :: a\n+  character (8) :: buffer\n+  a%data = 1\n+  allocate (a%next)\n+  a%next%data = 2\n+  allocate (a%next%next)\n+  a%next%next%data = 3\n+  write (buffer, '(dt)')a\n+  deallocate (a%next)\n+  if (trim (buffer) .ne. ' 3 2 1') stop 1\n+end"}]}