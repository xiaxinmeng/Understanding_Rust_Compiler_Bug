{"sha": "4dc7b0f0df446347e8b72908b567865f2021641e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRjN2IwZjBkZjQ0NjM0N2U4YjcyOTA4YjU2Nzg2NWYyMDIxNjQxZQ==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2005-10-17T00:48:54Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2005-10-17T00:48:54Z"}, "message": "SVN version\n\nFrom-SVN: r105483", "tree": {"sha": "d7775ba6efde814e0b570fae0952202677866d19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7775ba6efde814e0b570fae0952202677866d19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4dc7b0f0df446347e8b72908b567865f2021641e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dc7b0f0df446347e8b72908b567865f2021641e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dc7b0f0df446347e8b72908b567865f2021641e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dc7b0f0df446347e8b72908b567865f2021641e/comments", "author": null, "committer": null, "parents": [{"sha": "a0d50d73d68bccda8fa74080d8bd42980ce9c250", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0d50d73d68bccda8fa74080d8bd42980ce9c250", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0d50d73d68bccda8fa74080d8bd42980ce9c250"}], "stats": {"total": 205, "additions": 205, "deletions": 0}, "files": [{"sha": "7732101da25bf3e94e51a88903dcb14680f0211d", "filename": "maintainer-scripts/update_web_docs_svn", "status": "added", "additions": 205, "deletions": 0, "changes": 205, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc7b0f0df446347e8b72908b567865f2021641e/maintainer-scripts%2Fupdate_web_docs_svn", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc7b0f0df446347e8b72908b567865f2021641e/maintainer-scripts%2Fupdate_web_docs_svn", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/maintainer-scripts%2Fupdate_web_docs_svn?ref=4dc7b0f0df446347e8b72908b567865f2021641e", "patch": "@@ -0,0 +1,205 @@\n+#!/bin/sh -x\n+\n+# Generate HTML documentation from GCC Texinfo docs.\n+# This version is for GCC 3.1 and later versions.\n+\n+# Run this from /tmp.\n+SVNROOT=${SVNROOT:-\"file:///svn/gcc\"}\n+export SVNROOT\n+\n+PATH=/usr/local/bin:$PATH\n+\n+WWWBASE=/www/gcc/htdocs\n+WWWBASE_PREFORMATTED=/www/gcc/htdocs-preformatted\n+WWWPREPROCESS='/www/gcc/bin/preprocess -r'\n+\n+# Process options -rrelease and -ddirectory\n+RELEASE=\"\"\n+SUBDIR=\"\"\n+\n+while [ $# -gt 0 ]; do\n+  case $1 in\n+    -r*)\n+      if [ -n \"$RELEASE\" ]; then\n+        echo \"Multiple releases specified\" >&2\n+\texit 1\n+      fi\n+      RELEASE=\"${1#-r}\"\n+      if [ -z \"$RELEASE\" ]; then\n+\tshift\n+\tRELEASE=\"$1\"\n+\tif [ -z \"$RELEASE\" ]; then\n+\t  echo \"No release specified with -r\" >&2\n+\t  exit 1\n+\tfi\n+      fi\n+      ;;\n+    -d*)\n+      if [ -n \"$SUBDIR\" ]; then\n+        echo \"Multiple subdirectories specified\" >&2\n+\texit 1\n+      fi\n+      SUBDIR=\"${1#-d}\"\n+      if [ -z \"$SUBDIR\" ]; then\n+\tshift\n+\tSUBDIR=\"$1\"\n+\tif [ -z \"$SUBDIR\" ]; then\n+\t  echo \"No subdirectory specified with -d\" >&2\n+\t  exit 1\n+\tfi\n+      fi\n+      ;;\n+    *)\n+      echo \"Unknown argument \\\"$1\\\"\" >&2\n+      exit 1\n+      ;;\n+  esac\n+  shift\n+done\n+\n+if [ -n \"$RELEASE\" ] && [ -z \"$SUBDIR\" ]; then\n+  echo \"Release specified without subdirectory\" >&2\n+  exit 1\n+fi\n+\n+if [ -z \"$SUBDIR\" ]; then\n+  DOCSDIR=$WWWBASE/onlinedocs\n+else\n+  DOCSDIR=$WWWBASE/onlinedocs/$SUBDIR\n+fi\n+\n+if [ ! -d $DOCSDIR ]; then\n+  mkdir $DOCSDIR\n+fi\n+\n+if [ -z \"$RELEASE\" ]; then\n+  RELEASE=trunk\n+fi\n+\n+WORKDIR=/tmp/gcc-doc-update.$$\n+\n+/bin/rm -rf $WORKDIR\n+/bin/mkdir $WORKDIR\n+cd $WORKDIR\n+# Find all the texi files in the repository, except those in directories\n+# we do not care about (texinfo, etc).\n+if [ \"$RELEASE\" = \"trunk\" ]; then\n+  svn ls -R $SVNROOT/$RELEASE/gcc | grep \"\\.texi$\" |fgrep -v -f/home/gccadmin/scripts/doc_exclude > FILES\n+  # SVN export doesn't function like CVS, in that it doesn't create an entire empty path structure\n+  # Thus, it's easiest to just export the entire tree\n+  svn export $SVNROOT/$RELEASE gcc\n+#  # Checkout all the texi files.\n+#  for i in `cat FILES`; do\n+#    svn -q export $SVNROOT/$RELEASE/gcc/$i\n+#  done\n+#  svn -q export $SVNROOT/$RELEASE/gcc/doc/install.texi2html \n+#  svn -q export $SVNROOT/$RELEASE/gcc/doc/include/texinfo.tex \n+#  svn -q export $SVNROOT/$RELEASE/gcc/ada/xgnatugn.adb \n+#  svn -q export $SVNROOT/$RELEASE/gcc/ada/ug_words\n+#  svn -q export $SVNROOT/$RELEASE/gcc/BASE-VER\n+#  svn -q export $SVNROOT/$RELEASE/gcc/DEV-PHASE\n+else\n+  svn ls -R $SVNROOT/tags/$RELEASE/gcc | grep \"\\.texi$\" |fgrep -v -f/home/gccadmin/scripts/doc_exclude > FILES\n+  # SVN export doesn't function like CVS, in that it doesn't create an entire empty path structure\n+  # Thus, it's easiest to just export the entire tree\n+  svn export $SVNROOT/tags/$RELEASE gcc\n+#  # Checkout all the texi files.\n+#  for i in `cat FILES`; do\n+#    svn -q export $SVNROOT/tags/$RELEASE/gcc/$i\n+#  done\n+#  svn -q export $SVNROOT/tags/$RELEASE/gcc/doc/install.texi2html \n+#  svn -q export $SVNROOT/tags/$RELEASE/gcc/doc/include/texinfo.tex \n+#  svn -q export $SVNROOT/tags/$RELEASE/gcc/ada/xgnatugn.adb \n+#  svn -q export $SVNROOT/tags/$RELEASE/gcc/ada/ug_words\n+#  svn -q export $SVNROOT/tags/$RELEASE/gcc/BASE-VER\n+#  svn -q export $SVNROOT/tags/$RELEASE/gcc/DEV-PHASE\n+fi\n+\n+# Build a tarball of the sources.\n+tar cf docs-sources.tar gcc\n+\n+# The directory to pass to -I; this is the one with texinfo.tex\n+# and fdl.texi.\n+includedir=gcc/gcc/doc/include\n+\n+MANUALS=\"cpp cppinternals fastjar gcc gccint gcj g77 gfortran gnat_ug_unx gnat_ug_vms gnat_ug_vxw gnat_ug_wnt gnat_ugn_unw gnat-style gnat_rm libiberty porting\"\n+\n+# Generate gnat_ugn_unw\n+\n+if [ -f gcc/gcc/ada/xgnatugn.adb ]; then\n+   gnatmake -q gcc/gcc/ada/xgnatugn\n+   ./xgnatugn unw gcc/gcc/ada/gnat_ugn.texi \\\n+     gcc/gcc/ada/ug_words gnat_ugn_unw.texi\n+fi\n+\n+# Generate gcc-vers.texi.\n+(\n+   echo \"@set version-GCC $(cat gcc/gcc/BASE-VER)\"\n+   if [ \"$(cat gcc/gcc/DEV-PHASE)\" = \"experimental\" ]; then\n+      echo \"@set DEVELOPMENT\"\n+   else\n+      echo \"@clear DEVELOPMENT\"\n+   fi\n+) > $includedir/gcc-vers.texi\n+\n+# Now convert the relevant files from texi to HTML, PDF and PostScript.\n+for file in $MANUALS; do\n+  filename=`find . -name ${file}.texi`\n+  if [ \"${filename}\" ]; then\n+    makeinfo --html -I ${includedir} -I `dirname ${filename}` ${filename}\n+    tar cf ${file}-html.tar ${file}/*.html\n+    texi2dvi -I ${includedir} ${filename} </dev/null && dvips -o ${file}.ps ${file}.dvi\n+    texi2pdf -I ${includedir} ${filename} </dev/null\n+    mkdir -p $DOCSDIR/$file\n+  fi\n+done\n+\n+# Then build a gzipped copy of each of the resulting .html, .ps and .tar files\n+for file in */*.html *.ps *.pdf *.tar; do\n+  cat $file | gzip --best > $file.gz\n+done\n+\n+# On the 15th of the month, wipe all the old files from the\n+# web server.\n+today=`date +%d`\n+if test $today = 15; then\n+  find $DOCSDIR -type f -maxdepth 1 -print | grep -v index.html | xargs rm\n+  for m in $MANUALS; do\n+    rm $DOCSDIR/$m/*.html $DOCSDIR/$m/*.html.gz\n+  done\n+fi\n+\n+# And copy the resulting files to the web server\n+for file in */*.html *.ps *.pdf *.tar; do\n+  cat $DOCSDIR/$file | \n+    sed -e '/^<meta name=generator/d' \\\n+        -e '/^%DVIPSSource:/d' > file1\n+  cat $file |\n+    sed -e '/^<meta name=generator/d' \\\n+        -e '/^%DVIPSSource:/d' > file2\n+  if cmp -s file1 file2; then\n+    :\n+  else\n+    cp $file $DOCSDIR/$file\n+    cp $file.gz $DOCSDIR/$file.gz\n+  fi\n+done\n+\n+cd $DOCSDIR\n+\n+# Finally, generate the installation documentation\n+if [ \"$RELEASE\" = \"trunk\" ]; then\n+  SOURCEDIR=$WORKDIR/gcc/gcc/doc\n+  DESTDIR=$WWWBASE_PREFORMATTED/install\n+  export SOURCEDIR\n+  export DESTDIR\n+  $WORKDIR/gcc/gcc/doc/install.texi2html\n+\n+  # Preprocess the entire web site, not just the install docs!\n+  echo \"Invoking $WWWPREPROCESS\"\n+  $WWWPREPROCESS |grep -v '^  Warning: Keeping'\n+fi\n+\n+# Clean up behind us.\n+\n+rm -rf $WORKDIR"}]}