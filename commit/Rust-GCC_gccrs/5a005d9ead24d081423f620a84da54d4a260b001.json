{"sha": "5a005d9ead24d081423f620a84da54d4a260b001", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWEwMDVkOWVhZDI0ZDA4MTQyM2Y2MjBhODRkYTU0ZDRhMjYwYjAwMQ==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1998-12-23T10:46:45Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1998-12-23T10:46:45Z"}, "message": "expr.c (process_jvm_instruction): Do load_type_state after JSR.\n\nd\n\t* expr.c (process_jvm_instruction):  Do load_type_state after JSR.\n\t* verify.c (verify_jvm_instructions):  Fix off-by-one error.\n\t* jcf-write.c (CHECK_PUT):  Add (void) cast to avoid -Wall warnings.\n\t(localvar_alloc):  Change return type to void,\n\t(emit_unop):  Remove unused variable size.\n\t* jcf-write.c (struct jcf_block):  Add new union.\n\t(PENDING_CLEANUP_PC, PENDING_EXIT_PC, UNDEFINED_PC):  New macros.\n\t(call_cleanups):  New functions.\n\t(struct jcf_partial):  New fields num_finalizers and return_value_decl.\n\t(generate_bytecode_insns):  Support CLEANUP_POINT_EXPR and\n\tWITH_CLEANUP_EXPR.  Handle cleanups in RETURN_EXPR and EXIT_BLOCK_EXPR.\n\t* lang.c (lang_init):  Call using_eh_for_cleanups.\n\t* parse.y (java_complete_lhs):  For SYNCHRONIZED_EXPR, defer\n\tcompleting operands to patch_synchronized_statement.\n\tSupport CLEANUP_POINT_EXPR, WITH_CLEANUP_EXPR.\n\t(patch_synchronized_statement): Re-write suing CLEANUP_POINT_EXPR and\n\tWITH_CLEANUP_EXPR instead of TRY_EXPR.\n\nFrom-SVN: r24406", "tree": {"sha": "d2caa4d11dd4417a98a74be6e8b0a49a2e9c6768", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2caa4d11dd4417a98a74be6e8b0a49a2e9c6768"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a005d9ead24d081423f620a84da54d4a260b001", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a005d9ead24d081423f620a84da54d4a260b001", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a005d9ead24d081423f620a84da54d4a260b001", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a005d9ead24d081423f620a84da54d4a260b001/comments", "author": null, "committer": null, "parents": [{"sha": "e402ca989ba0d54124f90b6a95cc595e272f7919", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e402ca989ba0d54124f90b6a95cc595e272f7919", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e402ca989ba0d54124f90b6a95cc595e272f7919"}], "stats": {"total": 161, "additions": 88, "deletions": 73}, "files": [{"sha": "e07f84d7f978c065170faeae70bf8b2848189dfa", "filename": "gcc/java/expr.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a005d9ead24d081423f620a84da54d4a260b001/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a005d9ead24d081423f620a84da54d4a260b001/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=5a005d9ead24d081423f620a84da54d4a260b001", "patch": "@@ -2191,6 +2191,7 @@ process_jvm_instruction (PC, byte_ops, length)\n     tree where = lookup_label (oldpc+OPERAND_VALUE);\t\\\n     tree ret   = lookup_label (PC);\t\t\t\\\n     build_java_jsr (where, ret);\t\t\t\\\n+    load_type_state (ret);\t\t\t\t\\\n   }\n \n /* Push a constant onto the stack. */"}, {"sha": "1b6c71ab49d0ecf8393227fd0b30a962573cf9d3", "filename": "gcc/java/parse.c", "status": "modified", "additions": 42, "deletions": 35, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a005d9ead24d081423f620a84da54d4a260b001/gcc%2Fjava%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a005d9ead24d081423f620a84da54d4a260b001/gcc%2Fjava%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.c?ref=5a005d9ead24d081423f620a84da54d4a260b001", "patch": "@@ -2272,7 +2272,7 @@ static const short yycheck[] = {     3,\n \n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software\n-   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n+   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n /* As a special exception, when this file is copied by Bison into a\n    Bison output file, you may use that output file without restriction.\n@@ -10129,13 +10129,24 @@ java_complete_lhs (node)\n \n     case SYNCHRONIZED_EXPR:\n       wfl_op1 = TREE_OPERAND (node, 0);\n-      COMPLETE_CHECK_OP_0 (node);\n-      COMPLETE_CHECK_OP_1 (node);\n       return patch_synchronized_statement (node, wfl_op1);\n \n     case TRY_EXPR:\n       return patch_try_statement (node);\n \n+    case CLEANUP_POINT_EXPR:\n+      COMPLETE_CHECK_OP_0 (node);\n+      TREE_TYPE (node) = void_type_node;\n+      CAN_COMPLETE_NORMALLY (node) = CAN_COMPLETE_NORMALLY (TREE_OPERAND (node, 0));\n+      return node;\n+\n+    case WITH_CLEANUP_EXPR:\n+      COMPLETE_CHECK_OP_0 (node);\n+      COMPLETE_CHECK_OP_2 (node);\n+      CAN_COMPLETE_NORMALLY (node) = CAN_COMPLETE_NORMALLY (TREE_OPERAND (node, 0));\n+      TREE_TYPE (node) = void_type_node;\n+      return node;\n+\n     case LABELED_BLOCK_EXPR:\n       PUSH_LABELED_BLOCK (node);\n       if (LABELED_BLOCK_BODY (node))\n@@ -13378,12 +13389,19 @@ static tree\n patch_synchronized_statement (node, wfl_op1)\n     tree node, wfl_op1;\n {\n-  tree expr = TREE_OPERAND (node, 0);\n+  tree expr = java_complete_tree (TREE_OPERAND (node, 0));\n   tree block = TREE_OPERAND (node, 1);\n-  tree try_block, catch_all, stmt, compound, decl;\n+\n+  tree enter, exit, finally, expr_decl;\n+\n+  if (expr == error_mark_node)\n+    {\n+      block = java_complete_tree (block);\n+      return expr;\n+    }\n \n   /* The TYPE of expr must be a reference type */\n-  if (!JREFERENCE_TYPE_P (TREE_TYPE (TREE_OPERAND (node, 0))))\n+  if (!JREFERENCE_TYPE_P (TREE_TYPE (expr)))\n     {\n       SET_WFL_OPERATOR (wfl_operator, node, wfl_op1);\n       parse_error_context (wfl_operator, \"Incompatible type for `synchronized'\"\n@@ -13409,34 +13427,23 @@ patch_synchronized_statement (node, wfl_op1)\n \t Throw (e);\n        } */\n \n-  /* TRY block */\n-  BUILD_MONITOR_ENTER (stmt, expr);\n-  compound = add_stmt_to_compound (NULL_TREE, int_type_node, stmt);\n-  compound = add_stmt_to_compound (compound, void_type_node, block);\n-  if (CAN_COMPLETE_NORMALLY (block))\n-    {\n-      BUILD_MONITOR_EXIT (stmt, expr);\n-      compound = add_stmt_to_compound (compound, int_type_node, stmt);\n-    }\n-  try_block = build_expr_block (compound, NULL_TREE);\n-  CAN_COMPLETE_NORMALLY (try_block) = CAN_COMPLETE_NORMALLY (block);\n-\n-  /* CATCH_ALL block */\n-  decl = build_decl (VAR_DECL, generate_name (), ptr_type_node);\n-  BUILD_ASSIGN_EXCEPTION_INFO (stmt, decl);\n-  compound = add_stmt_to_compound (NULL_TREE, void_type_node, stmt);\n-  BUILD_MONITOR_EXIT (stmt, expr);\n-  compound = add_stmt_to_compound (compound, int_type_node, stmt);\n-  BUILD_THROW (stmt, decl);\n-  compound = add_stmt_to_compound (compound, void_type_node, stmt);\n-  catch_all = build_expr_block (compound, decl);\n-  catch_all = build_expr_block (catch_all, NULL_TREE);\n-  catch_all = build1 (CATCH_EXPR, void_type_node, catch_all);\n-\n-  /* TRY-CATCH statement */\n-  compound = build (TRY_EXPR, void_type_node, try_block, catch_all, NULL_TREE);\n-  CAN_COMPLETE_NORMALLY (compound) = CAN_COMPLETE_NORMALLY (try_block);\n-  return compound;\n+  expr_decl = build_decl (VAR_DECL, generate_name (), TREE_TYPE (expr));\n+  BUILD_MONITOR_ENTER (enter, expr_decl);\n+  BUILD_MONITOR_EXIT (exit, expr_decl);\n+  CAN_COMPLETE_NORMALLY (enter) = 1;\n+  CAN_COMPLETE_NORMALLY (exit) = 1;\n+  node = build1 (CLEANUP_POINT_EXPR, NULL_TREE,\n+\t\t build (COMPOUND_EXPR, NULL_TREE,\n+\t\t\tbuild (WITH_CLEANUP_EXPR, NULL_TREE,\n+\t\t\t       build (COMPOUND_EXPR, NULL_TREE,\n+\t\t\t\t      build (MODIFY_EXPR, NULL_TREE,\n+\t\t\t\t\t     expr_decl, expr),\n+\t\t\t\t      enter),\n+\t\t\t       NULL_TREE, exit),\n+\t\t\tblock));\n+  node = build_expr_block (node, expr_decl);\n+\n+  return java_complete_tree (node);\n }\n \n /* 14.16 The throw Statement */\n@@ -13764,7 +13771,7 @@ fold_constant_for_init (node, context)\n       if (val == NULL_TREE || ! TREE_CONSTANT (val))\n \treturn NULL_TREE;\n       TREE_OPERAND (node, 0) = val;\n-      node = patch_unaryop (node, op0);\n+      return patch_unaryop (node, op0);\n       break;\n \n     case COND_EXPR:"}, {"sha": "60065d248e603ae2eb85853228fd58b53de1941a", "filename": "gcc/java/parse.y", "status": "modified", "additions": 41, "deletions": 34, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a005d9ead24d081423f620a84da54d4a260b001/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a005d9ead24d081423f620a84da54d4a260b001/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=5a005d9ead24d081423f620a84da54d4a260b001", "patch": "@@ -7491,13 +7491,24 @@ java_complete_lhs (node)\n \n     case SYNCHRONIZED_EXPR:\n       wfl_op1 = TREE_OPERAND (node, 0);\n-      COMPLETE_CHECK_OP_0 (node);\n-      COMPLETE_CHECK_OP_1 (node);\n       return patch_synchronized_statement (node, wfl_op1);\n \n     case TRY_EXPR:\n       return patch_try_statement (node);\n \n+    case CLEANUP_POINT_EXPR:\n+      COMPLETE_CHECK_OP_0 (node);\n+      TREE_TYPE (node) = void_type_node;\n+      CAN_COMPLETE_NORMALLY (node) = CAN_COMPLETE_NORMALLY (TREE_OPERAND (node, 0));\n+      return node;\n+\n+    case WITH_CLEANUP_EXPR:\n+      COMPLETE_CHECK_OP_0 (node);\n+      COMPLETE_CHECK_OP_2 (node);\n+      CAN_COMPLETE_NORMALLY (node) = CAN_COMPLETE_NORMALLY (TREE_OPERAND (node, 0));\n+      TREE_TYPE (node) = void_type_node;\n+      return node;\n+\n     case LABELED_BLOCK_EXPR:\n       PUSH_LABELED_BLOCK (node);\n       if (LABELED_BLOCK_BODY (node))\n@@ -10740,12 +10751,19 @@ static tree\n patch_synchronized_statement (node, wfl_op1)\n     tree node, wfl_op1;\n {\n-  tree expr = TREE_OPERAND (node, 0);\n+  tree expr = java_complete_tree (TREE_OPERAND (node, 0));\n   tree block = TREE_OPERAND (node, 1);\n-  tree try_block, catch_all, stmt, compound, decl;\n+\n+  tree enter, exit, finally, expr_decl;\n+\n+  if (expr == error_mark_node)\n+    {\n+      block = java_complete_tree (block);\n+      return expr;\n+    }\n \n   /* The TYPE of expr must be a reference type */\n-  if (!JREFERENCE_TYPE_P (TREE_TYPE (TREE_OPERAND (node, 0))))\n+  if (!JREFERENCE_TYPE_P (TREE_TYPE (expr)))\n     {\n       SET_WFL_OPERATOR (wfl_operator, node, wfl_op1);\n       parse_error_context (wfl_operator, \"Incompatible type for `synchronized'\"\n@@ -10771,34 +10789,23 @@ patch_synchronized_statement (node, wfl_op1)\n \t Throw (e);\n        } */\n \n-  /* TRY block */\n-  BUILD_MONITOR_ENTER (stmt, expr);\n-  compound = add_stmt_to_compound (NULL_TREE, int_type_node, stmt);\n-  compound = add_stmt_to_compound (compound, void_type_node, block);\n-  if (CAN_COMPLETE_NORMALLY (block))\n-    {\n-      BUILD_MONITOR_EXIT (stmt, expr);\n-      compound = add_stmt_to_compound (compound, int_type_node, stmt);\n-    }\n-  try_block = build_expr_block (compound, NULL_TREE);\n-  CAN_COMPLETE_NORMALLY (try_block) = CAN_COMPLETE_NORMALLY (block);\n-\n-  /* CATCH_ALL block */\n-  decl = build_decl (VAR_DECL, generate_name (), ptr_type_node);\n-  BUILD_ASSIGN_EXCEPTION_INFO (stmt, decl);\n-  compound = add_stmt_to_compound (NULL_TREE, void_type_node, stmt);\n-  BUILD_MONITOR_EXIT (stmt, expr);\n-  compound = add_stmt_to_compound (compound, int_type_node, stmt);\n-  BUILD_THROW (stmt, decl);\n-  compound = add_stmt_to_compound (compound, void_type_node, stmt);\n-  catch_all = build_expr_block (compound, decl);\n-  catch_all = build_expr_block (catch_all, NULL_TREE);\n-  catch_all = build1 (CATCH_EXPR, void_type_node, catch_all);\n-\n-  /* TRY-CATCH statement */\n-  compound = build (TRY_EXPR, void_type_node, try_block, catch_all, NULL_TREE);\n-  CAN_COMPLETE_NORMALLY (compound) = CAN_COMPLETE_NORMALLY (try_block);\n-  return compound;\n+  expr_decl = build_decl (VAR_DECL, generate_name (), TREE_TYPE (expr));\n+  BUILD_MONITOR_ENTER (enter, expr_decl);\n+  BUILD_MONITOR_EXIT (exit, expr_decl);\n+  CAN_COMPLETE_NORMALLY (enter) = 1;\n+  CAN_COMPLETE_NORMALLY (exit) = 1;\n+  node = build1 (CLEANUP_POINT_EXPR, NULL_TREE,\n+\t\t build (COMPOUND_EXPR, NULL_TREE,\n+\t\t\tbuild (WITH_CLEANUP_EXPR, NULL_TREE,\n+\t\t\t       build (COMPOUND_EXPR, NULL_TREE,\n+\t\t\t\t      build (MODIFY_EXPR, NULL_TREE,\n+\t\t\t\t\t     expr_decl, expr),\n+\t\t\t\t      enter),\n+\t\t\t       NULL_TREE, exit),\n+\t\t\tblock));\n+  node = build_expr_block (node, expr_decl);\n+\n+  return java_complete_tree (node);\n }\n \n /* 14.16 The throw Statement */\n@@ -11126,7 +11133,7 @@ fold_constant_for_init (node, context)\n       if (val == NULL_TREE || ! TREE_CONSTANT (val))\n \treturn NULL_TREE;\n       TREE_OPERAND (node, 0) = val;\n-      node = patch_unaryop (node, op0);\n+      return patch_unaryop (node, op0);\n       break;\n \n     case COND_EXPR:"}, {"sha": "4e89f4560b2a431b0b70d2c1df3bad691d3eaa49", "filename": "gcc/java/verify.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a005d9ead24d081423f620a84da54d4a260b001/gcc%2Fjava%2Fverify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a005d9ead24d081423f620a84da54d4a260b001/gcc%2Fjava%2Fverify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fverify.c?ref=5a005d9ead24d081423f620a84da54d4a260b001", "patch": "@@ -1035,10 +1035,10 @@ verify_jvm_instructions (jcf, byte_ops, length)\n \t\tint nlocals = DECL_MAX_LOCALS (current_function_decl);\n \t\tindex = nlocals + DECL_MAX_STACK (current_function_decl);\n \t\treturn_type_map = make_tree_vec (index);\n-\t\twhile (--index >= nlocals)\n-\t\t  TREE_VEC_ELT (return_type_map, index) = TYPE_UNKNOWN;\n-\t\twhile (--index >= 0)\n-\t\t  TREE_VEC_ELT (return_type_map, index) = TYPE_UNUSED;\n+\t\twhile (index > nlocals)\n+\t\t  TREE_VEC_ELT (return_type_map, --index) = TYPE_UNKNOWN;\n+\t\twhile (index > 0)\n+\t\t  TREE_VEC_ELT (return_type_map, --index) = TYPE_UNUSED;\n \t\tLABEL_RETURN_LABEL (target)\n \t\t  = build_decl (LABEL_DECL, NULL_TREE, TREE_TYPE (target));\n \t\tLABEL_PC (LABEL_RETURN_LABEL (target)) = -1;"}]}