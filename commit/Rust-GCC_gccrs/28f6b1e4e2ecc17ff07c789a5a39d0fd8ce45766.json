{"sha": "28f6b1e4e2ecc17ff07c789a5a39d0fd8ce45766", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhmNmIxZTRlMmVjYzE3ZmYwN2M3ODlhNWEzOWQwZmQ4Y2U0NTc2Ng==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@google.com", "date": "2007-11-07T03:00:22Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2007-11-07T03:00:22Z"}, "message": "tree-flow.h (struct fieldoff): Reformat comment.\n\n\n\t* tree-flow.h (struct fieldoff): Reformat comment.\n\tDocument fields.\n\t* tree-ssa-operands.c: Tidy top-level comments.\n\t(add_vop): Likewise.\n\t(add_vars_for_offset): Tidy parameter formatting..\n\t(get_addr_dereference_operands): Likewise.\n\t(get_indirect_ref_operands): Likewise.\n\t(get_expr_operands) <OMP_ATOMIC_LOAD>: Reformat.\n\t<OMP_ATOMIC_STORE>: Likewise.\n\nFrom-SVN: r129956", "tree": {"sha": "a5f5f8a3d7fa800583b70a8716f7a8b0928b4e74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5f5f8a3d7fa800583b70a8716f7a8b0928b4e74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28f6b1e4e2ecc17ff07c789a5a39d0fd8ce45766", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28f6b1e4e2ecc17ff07c789a5a39d0fd8ce45766", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28f6b1e4e2ecc17ff07c789a5a39d0fd8ce45766", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28f6b1e4e2ecc17ff07c789a5a39d0fd8ce45766/comments", "author": {"login": "dnovillo", "id": 7295335, "node_id": "MDQ6VXNlcjcyOTUzMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/7295335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dnovillo", "html_url": "https://github.com/dnovillo", "followers_url": "https://api.github.com/users/dnovillo/followers", "following_url": "https://api.github.com/users/dnovillo/following{/other_user}", "gists_url": "https://api.github.com/users/dnovillo/gists{/gist_id}", "starred_url": "https://api.github.com/users/dnovillo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dnovillo/subscriptions", "organizations_url": "https://api.github.com/users/dnovillo/orgs", "repos_url": "https://api.github.com/users/dnovillo/repos", "events_url": "https://api.github.com/users/dnovillo/events{/privacy}", "received_events_url": "https://api.github.com/users/dnovillo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "31de5c748de62335e990e67c9f0cf6d73e7d410d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31de5c748de62335e990e67c9f0cf6d73e7d410d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31de5c748de62335e990e67c9f0cf6d73e7d410d"}], "stats": {"total": 99, "additions": 62, "deletions": 37}, "files": [{"sha": "ad8d3324acdea5728a590872f680c8d415a84a20", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f6b1e4e2ecc17ff07c789a5a39d0fd8ce45766/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f6b1e4e2ecc17ff07c789a5a39d0fd8ce45766/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=28f6b1e4e2ecc17ff07c789a5a39d0fd8ce45766", "patch": "@@ -5,6 +5,18 @@\n \t* haifa-sched.c (check_sched_flags): Remove.\n \t(sched_init): Don't call it.\n \n+2007-11-06  Diego Novillo  <dnovillo@google.com>\n+\n+\t* tree-flow.h (struct fieldoff): Reformat comment.\n+\tDocument fields.\n+\t* tree-ssa-operands.c: Tidy top-level comments.\n+\t(add_vop): Likewise.\n+\t(add_vars_for_offset): Tidy parameter formatting..\n+\t(get_addr_dereference_operands): Likewise.\n+\t(get_indirect_ref_operands): Likewise.\n+\t(get_expr_operands) <OMP_ATOMIC_LOAD>: Reformat.\n+\t<OMP_ATOMIC_STORE>: Likewise.\n+\n 2007-11-06  Rask Ingemann Lambertsen  <rask@sygehus.dk>\n \n \tPR target/32787"}, {"sha": "3421c14b97deaf77efbd07e769a984869d95cc50", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f6b1e4e2ecc17ff07c789a5a39d0fd8ce45766/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f6b1e4e2ecc17ff07c789a5a39d0fd8ce45766/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=28f6b1e4e2ecc17ff07c789a5a39d0fd8ce45766", "patch": "@@ -1143,17 +1143,26 @@ rtx addr_for_mem_ref (struct mem_address *, bool);\n void get_address_description (tree, struct mem_address *);\n tree maybe_fold_tmr (tree);\n \n-/* This structure is simply used during pushing fields onto the fieldstack\n-   to track the offset of the field, since bitpos_of_field gives it relative\n-   to its immediate containing type, and we want it relative to the ultimate\n-   containing object.  */\n+/* This structure is used during pushing fields onto the fieldstack\n+   to track the offset of the field, since bitpos_of_field gives it\n+   relative to its immediate containing type, and we want it relative\n+   to the ultimate containing object.  */\n \n struct fieldoff\n {\n+  /* Type of the field.  */\n   tree type;\n+\n+  /* Size, in bits, of the field.  */\n   tree size;\n+\n+  /* Field.  */\n   tree decl;\n+\n+  /* Offset from the base of the base containing object to this field.  */\n   HOST_WIDE_INT offset;  \n+\n+  /* Alias set for the field.  */\n   alias_set_type alias_set;\n };\n typedef struct fieldoff fieldoff_s;"}, {"sha": "9ce133d5eae3421bce55f2eceafe663c6ac33392", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 37, "deletions": 33, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f6b1e4e2ecc17ff07c789a5a39d0fd8ce45766/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f6b1e4e2ecc17ff07c789a5a39d0fd8ce45766/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=28f6b1e4e2ecc17ff07c789a5a39d0fd8ce45766", "patch": "@@ -70,9 +70,9 @@ along with GCC; see the file COPYING3.  If not see\n    variable, and that same variable occurs in the same operands cache, then \n    the new cache vector will also get the same SSA_NAME.\n \n-  i.e., if a stmt had a VUSE of 'a_5', and 'a' occurs in the new operand \n-  vector for VUSE, then the new vector will also be modified such that \n-  it contains 'a_5' rather than 'a'.  */\n+   i.e., if a stmt had a VUSE of 'a_5', and 'a' occurs in the new\n+   operand vector for VUSE, then the new vector will also be modified\n+   such that it contains 'a_5' rather than 'a'.  */\n \n \n /* Structure storing statistics on how many call clobbers we have, and\n@@ -615,9 +615,9 @@ add_use_op (tree stmt, tree *op, use_optype_p last)\n }\n \n \n-/* Return a virtual op pointer with NUM elements which are all initialized to OP\n-   and are linked into the immediate uses for STMT.  The new vop is appended\n-   after PREV.  */\n+/* Return a virtual op pointer with NUM elements which are all\n+   initialized to OP and are linked into the immediate uses for STMT.\n+   The new vop is appended after PREV.  */\n \n static inline voptype_p\n add_vop (tree stmt, tree op, int num, voptype_p prev)\n@@ -1389,9 +1389,8 @@ access_can_touch_variable (tree ref, tree alias, HOST_WIDE_INT offset,\n    SFT's for a structure.  */\n \n static bool\n-add_vars_for_offset (tree var,\n-\t\t     unsigned HOST_WIDE_INT offset, unsigned HOST_WIDE_INT size,\n-\t\t     bool is_def)\n+add_vars_for_offset (tree var, unsigned HOST_WIDE_INT offset,\n+\t\t     unsigned HOST_WIDE_INT size, bool is_def)\n {\n   bool added = false;\n   tree subvar;\n@@ -1423,6 +1422,7 @@ add_vars_for_offset (tree var,\n   return added;\n }\n \n+\n /* Add VAR to the virtual operands array.  FLAGS is as in\n    get_expr_operands.  FULL_REF is a tree that contains the entire\n    pointer dereference expression, if available, or NULL otherwise.\n@@ -1597,12 +1597,11 @@ add_stmt_operand (tree *var_p, stmt_ann_t s_ann, int flags)\n    is the same as in get_indirect_ref_operands.  */\n \n static void\n-get_addr_dereference_operands (tree stmt, tree *addr, int flags,\n-                                                      tree full_ref,\n-                                                       HOST_WIDE_INT offset, HOST_WIDE_INT size,\n-                                                       bool recurse_on_base)\n-  {\n- tree ptr = *addr;\n+get_addr_dereference_operands (tree stmt, tree *addr, int flags, tree full_ref,\n+\t\t\t       HOST_WIDE_INT offset, HOST_WIDE_INT size,\n+\t\t\t       bool recurse_on_base)\n+{\n+  tree ptr = *addr;\n   stmt_ann_t s_ann = stmt_ann (stmt);\n \n   s_ann->references_memory = true;\n@@ -1678,6 +1677,7 @@ get_addr_dereference_operands (tree stmt, tree *addr, int flags,\n     get_expr_operands (stmt, addr, opf_use);\n }\n \n+\n /* A subroutine of get_expr_operands to handle INDIRECT_REF,\n    ALIGN_INDIRECT_REF and MISALIGNED_INDIRECT_REF.  \n \n@@ -1697,21 +1697,21 @@ get_addr_dereference_operands (tree stmt, tree *addr, int flags,\n       something else will do it for us.  */\n \n static void\n-get_indirect_ref_operands (tree stmt, tree expr, int flags,\n-\t\t \t\t \t\t    tree full_ref,\n-\t\t \t\t \t\t    HOST_WIDE_INT offset, HOST_WIDE_INT size,\n-\t\t \t\t \t\t    bool recurse_on_base)\n+get_indirect_ref_operands (tree stmt, tree expr, int flags, tree full_ref,\n+\t\t\t   HOST_WIDE_INT offset, HOST_WIDE_INT size,\n+\t\t\t   bool recurse_on_base)\n {\n   tree *pptr = &TREE_OPERAND (expr, 0);\n   stmt_ann_t s_ann = stmt_ann (stmt);\n \n   if (TREE_THIS_VOLATILE (expr))\n     s_ann->has_volatile_ops = true; \n \n-  get_addr_dereference_operands (stmt, pptr, flags, full_ref,\n-\t\t \t\t \t\t \t\t  offset, size, recurse_on_base);\n+  get_addr_dereference_operands (stmt, pptr, flags, full_ref, offset, size,\n+\t\t\t\t recurse_on_base);\n }\n \n+\n /* A subroutine of get_expr_operands to handle TARGET_MEM_REF.  */\n \n static void\n@@ -2274,7 +2274,8 @@ get_expr_operands (tree stmt, tree *expr_p, int flags)\n \tget_expr_operands (stmt, &GIMPLE_STMT_OPERAND (init, 0), opf_def);\n \tget_expr_operands (stmt, &GIMPLE_STMT_OPERAND (init, 1), opf_use);\n \tget_expr_operands (stmt, &TREE_OPERAND (cond, 1), opf_use);\n-\tget_expr_operands (stmt, &TREE_OPERAND (GIMPLE_STMT_OPERAND (incr, 1), 1),\n+\tget_expr_operands (stmt,\n+\t                   &TREE_OPERAND (GIMPLE_STMT_OPERAND (incr, 1), 1),\n \t\t\t   opf_use);\n \n \tc = find_omp_clause (clauses, OMP_CLAUSE_SCHEDULE);\n@@ -2319,21 +2320,21 @@ get_expr_operands (tree stmt, tree *expr_p, int flags)\n \n     case OMP_ATOMIC_LOAD:\n       {\n-\t\t tree *addr = &TREE_OPERAND (expr, 1);\n-\t\t get_expr_operands (stmt, &TREE_OPERAND (expr, 0), opf_def);\n-\n-\t\t if (TREE_CODE (*addr) == ADDR_EXPR)\n-\t\t   get_expr_operands (stmt, &TREE_OPERAND (*addr, 0), opf_def);\n-\t\t else\n-\t\t   get_addr_dereference_operands (stmt, addr, opf_def,\n-\t\t \t\t \t\t \t\t \t\t  NULL_TREE, 0, -1, true);\n-\t\t return;\n+\ttree *addr = &TREE_OPERAND (expr, 1);\n+\tget_expr_operands (stmt, &TREE_OPERAND (expr, 0), opf_def);\n+\n+\tif (TREE_CODE (*addr) == ADDR_EXPR)\n+\t  get_expr_operands (stmt, &TREE_OPERAND (*addr, 0), opf_def);\n+\telse\n+\t  get_addr_dereference_operands (stmt, addr, opf_def,\n+\t\t\t\t\t NULL_TREE, 0, -1, true);\n+\treturn;\n       }\n \n     case OMP_ATOMIC_STORE:\n       {\n-\t\t get_expr_operands (stmt, &TREE_OPERAND (expr, 0), opf_use);\n-\t\t return;\n+\tget_expr_operands (stmt, &TREE_OPERAND (expr, 0), opf_use);\n+\treturn;\n       }\n \n     case BLOCK:\n@@ -2455,12 +2456,14 @@ build_ssa_operands (tree stmt)\n \n   if (ann->addresses_taken && bitmap_empty_p (ann->addresses_taken))\n     ann->addresses_taken = NULL;\n+\n   /* For added safety, assume that statements with volatile operands\n      also reference memory.  */\n   if (ann->has_volatile_ops)\n     ann->references_memory = true;\n }\n \n+\n /* Releases the operands of STMT back to their freelists, and clears\n    the stmt operand lists.  */\n \n@@ -2512,6 +2515,7 @@ free_stmt_operands (tree stmt)\n     }\n }\n \n+\n /* Free any operands vectors in OPS.  */\n \n void "}]}