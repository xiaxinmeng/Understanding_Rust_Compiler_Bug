{"sha": "7c4d86c9ccbafef2cdfd92f3b6f382aa498a2c83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M0ZDg2YzljY2JhZmVmMmNkZmQ5MmYzYjZmMzgyYWE0OThhMmM4Mw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-05-12T09:17:45Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-05-12T09:17:45Z"}, "message": "[multiple changes]\n\n2015-05-12  Pierre-Marie de Rodat  <derodat@adacore.com>\n\n\t* exp_pakd.adb: Make clearer the comment in exp_pakd.adb about\n\t___XP suffixes.\n\n2015-05-12  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch3.adb, sem_util.adb, sem_ch6.adb: Minor reformatting.\n\n2015-05-12  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_unst.adb (Visit_Node): Deal with subprogram and package stubs.\n\n2015-05-12  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_intr.adb (Expand_Dispatching_Constructor_Call): The\n\ttag to be retrieved for the generated call is the first entry\n\tin the dispatch table for the return type of the instantiated\n\tconstructor.\n\n2015-05-12  Bob Duff  <duff@adacore.com>\n\n\t* exp_ch7.adb, exp_ch7.ads, exp_intr.adb, exp_util.adb,\n\texp_util.ads: Update comments.\n\nFrom-SVN: r223050", "tree": {"sha": "9c5f6b35112479602cf10952306f0ad6ef2c3ef9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c5f6b35112479602cf10952306f0ad6ef2c3ef9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c4d86c9ccbafef2cdfd92f3b6f382aa498a2c83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c4d86c9ccbafef2cdfd92f3b6f382aa498a2c83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c4d86c9ccbafef2cdfd92f3b6f382aa498a2c83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c4d86c9ccbafef2cdfd92f3b6f382aa498a2c83/comments", "author": null, "committer": null, "parents": [{"sha": "0d780006d49eadebc93e0b7ad4cd56a8d0eb3125", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d780006d49eadebc93e0b7ad4cd56a8d0eb3125", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d780006d49eadebc93e0b7ad4cd56a8d0eb3125"}], "stats": {"total": 86, "additions": 58, "deletions": 28}, "files": [{"sha": "aa71397e3b1fc0f297389841cb7748d2d63a39b6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c4d86c9ccbafef2cdfd92f3b6f382aa498a2c83/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c4d86c9ccbafef2cdfd92f3b6f382aa498a2c83/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7c4d86c9ccbafef2cdfd92f3b6f382aa498a2c83", "patch": "@@ -1,3 +1,28 @@\n+2015-05-12  Pierre-Marie de Rodat  <derodat@adacore.com>\n+\n+\t* exp_pakd.adb: Make clearer the comment in exp_pakd.adb about\n+\t___XP suffixes.\n+\n+2015-05-12  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch3.adb, sem_util.adb, sem_ch6.adb: Minor reformatting.\n+\n+2015-05-12  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_unst.adb (Visit_Node): Deal with subprogram and package stubs.\n+\n+2015-05-12  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_intr.adb (Expand_Dispatching_Constructor_Call): The\n+\ttag to be retrieved for the generated call is the first entry\n+\tin the dispatch table for the return type of the instantiated\n+\tconstructor.\n+\n+2015-05-12  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_ch7.adb, exp_ch7.ads, exp_intr.adb, exp_util.adb,\n+\texp_util.ads: Update comments.\n+\n 2015-05-12  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch3.adb (Add_Internal_Interface_Entities): Do no generate"}, {"sha": "5c78bf811406a8539fcd3d096033bfd6706689cd", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c4d86c9ccbafef2cdfd92f3b6f382aa498a2c83/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c4d86c9ccbafef2cdfd92f3b6f382aa498a2c83/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=7c4d86c9ccbafef2cdfd92f3b6f382aa498a2c83", "patch": "@@ -6999,7 +6999,7 @@ package body Exp_Ch7 is\n          --       end if;\n          --       ...\n \n-         --  When Deep_Finalize is invokes for field _parent, a value of False\n+         --  When Deep_Finalize is invoked for field _parent, a value of False\n          --  is provided for the flag:\n \n          --    Deep_Finalize (Obj._parent, False);"}, {"sha": "0fcc0458615ea8d6aba1c06e97507f8ae6171290", "filename": "gcc/ada/exp_ch7.ads", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c4d86c9ccbafef2cdfd92f3b6f382aa498a2c83/gcc%2Fada%2Fexp_ch7.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c4d86c9ccbafef2cdfd92f3b6f382aa498a2c83/gcc%2Fada%2Fexp_ch7.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.ads?ref=7c4d86c9ccbafef2cdfd92f3b6f382aa498a2c83", "patch": "@@ -221,14 +221,13 @@ package Exp_Ch7 is\n      (Typ : Entity_Id;\n       Nam : Entity_Id) return Node_Id;\n    --  Create a special version of Deep_Finalize with identifier Nam. The\n-   --  routine has state information and can parform partial finalization.\n+   --  routine has state information and can perform partial finalization.\n \n    function Make_Set_Finalize_Address_Call\n      (Loc     : Source_Ptr;\n       Ptr_Typ : Entity_Id) return Node_Id;\n    --  Associate the Finalize_Address primitive of the designated type with the\n    --  finalization master of access type Ptr_Typ. The returned call is:\n-   --  Generate the following call:\n    --\n    --    Set_Finalize_Address\n    --      (<Ptr_Typ>FM, <Desig_Typ>FD'Unrestricted_Access);\n@@ -265,7 +264,7 @@ package Exp_Ch7 is\n    --  Check whether composite type contains a simple protected component\n \n    function Is_Simple_Protected_Type (T : Entity_Id) return Boolean;\n-   --  Determine whether T denotes a protected type without entires whose\n+   --  Determine whether T denotes a protected type without entries whose\n    --  _object field is of type System.Tasking.Protected_Objects.Protection.\n    --  Something wrong here, implementation was changed to test Lock_Free\n    --  but this spec does not mention that ???"}, {"sha": "7e68600a980e7a8c651b68fbc426ac91e005d3b5", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c4d86c9ccbafef2cdfd92f3b6f382aa498a2c83/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c4d86c9ccbafef2cdfd92f3b6f382aa498a2c83/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=7c4d86c9ccbafef2cdfd92f3b6f382aa498a2c83", "patch": "@@ -345,6 +345,9 @@ package body Exp_Intr is\n             begin\n                pragma Assert (not Is_Interface (Etype (Tag_Arg)));\n \n+               --  The tag is the first entry in the dispatch table of the\n+               --  return type of the constructor.\n+\n                Iface_Tag :=\n                  Make_Object_Declaration (Loc,\n                    Defining_Identifier => Make_Temporary (Loc, 'V'),\n@@ -357,7 +360,7 @@ package body Exp_Intr is\n                          Relocate_Node (Tag_Arg),\n                          New_Occurrence_Of\n                            (Node (First_Elmt (Access_Disp_Table\n-                                               (Etype (Etype (Act_Constr))))),\n+                                               (Etype (Act_Constr)))),\n                             Loc))));\n                Insert_Action (N, Iface_Tag);\n             end;"}, {"sha": "0dda40800d9a3b3787b3fa278f5ce633055a4d9c", "filename": "gcc/ada/exp_pakd.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c4d86c9ccbafef2cdfd92f3b6f382aa498a2c83/gcc%2Fada%2Fexp_pakd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c4d86c9ccbafef2cdfd92f3b6f382aa498a2c83/gcc%2Fada%2Fexp_pakd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_pakd.adb?ref=7c4d86c9ccbafef2cdfd92f3b6f382aa498a2c83", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -764,7 +764,8 @@ package body Exp_Pakd is\n \n       elsif not Is_Constrained (Typ) then\n \n-         --  When generating standard DWARF, the ___XP suffix will be stripped\n+         --  When generating standard DWARF (i.e when GNAT_Encodings is\n+         --  DWARF_GNAT_Encodings_Minimal), the ___XP suffix will be stripped\n          --  by the back-end but generate it anyway to ease compiler debugging.\n          --  This will help to distinguish implementation types from original\n          --  packed arrays."}, {"sha": "ec99e07d2a47dad68335760f3297563c0f51c9d4", "filename": "gcc/ada/exp_unst.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c4d86c9ccbafef2cdfd92f3b6f382aa498a2c83/gcc%2Fada%2Fexp_unst.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c4d86c9ccbafef2cdfd92f3b6f382aa498a2c83/gcc%2Fada%2Fexp_unst.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_unst.adb?ref=7c4d86c9ccbafef2cdfd92f3b6f382aa498a2c83", "patch": "@@ -730,6 +730,11 @@ package body Exp_Unst is\n                   end if;\n                end if;\n \n+            --  If we have a body stub, visit the associated subunit\n+\n+            elsif Nkind (N) in N_Body_Stub then\n+               Visit (Library_Unit (N));\n+\n             --  Skip generic declarations\n \n             elsif Nkind (N) in N_Generic_Declaration then"}, {"sha": "986b304546089a89d54ae2bee8fb00fd7df5879b", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c4d86c9ccbafef2cdfd92f3b6f382aa498a2c83/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c4d86c9ccbafef2cdfd92f3b6f382aa498a2c83/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=7c4d86c9ccbafef2cdfd92f3b6f382aa498a2c83", "patch": "@@ -5067,7 +5067,7 @@ package body Exp_Util is\n           and then not Is_Allocated (Obj_Id)\n \n           --  If the transient object is a pointer, check that it is not\n-          --  initialized by a function which returns a pointer or acts as a\n+          --  initialized by a function that returns a pointer or acts as a\n           --  renaming of another pointer.\n \n           and then"}, {"sha": "393857e97489234b7aaa2d7c4412ad9f7816d55d", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c4d86c9ccbafef2cdfd92f3b6f382aa498a2c83/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c4d86c9ccbafef2cdfd92f3b6f382aa498a2c83/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=7c4d86c9ccbafef2cdfd92f3b6f382aa498a2c83", "patch": "@@ -635,7 +635,7 @@ package Exp_Util is\n       Rel_Node : Node_Id) return Boolean;\n    --  Determine whether declaration Decl denotes a controlled transient which\n    --  should be finalized. Rel_Node is the related context. Even though some\n-   --  transient are controlled, they may act as renamings of other objects or\n+   --  transients are controlled, they may act as renamings of other objects or\n    --  function calls.\n \n    function Is_Fully_Repped_Tagged_Type (T : Entity_Id) return Boolean;"}, {"sha": "3b72073a1f815987db093729d14980117e1dea5b", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c4d86c9ccbafef2cdfd92f3b6f382aa498a2c83/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c4d86c9ccbafef2cdfd92f3b6f382aa498a2c83/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=7c4d86c9ccbafef2cdfd92f3b6f382aa498a2c83", "patch": "@@ -1759,22 +1759,22 @@ package body Sem_Ch3 is\n                   Set_Etype (New_Subp, Etype (Iface_Prim));\n                end if;\n \n-               --  Internal entities associated with interface types are\n-               --  only registered in the list of primitives of the tagged\n-               --  type. They are only used to fill the contents of the\n-               --  secondary dispatch tables. Therefore they are not needed\n-               --  in the homonym chains.\n+               --  Internal entities associated with interface types are only\n+               --  registered in the list of primitives of the tagged type.\n+               --  They are only used to fill the contents of the secondary\n+               --  dispatch tables. Therefore they are not needed in the\n+               --  homonym chains.\n \n                Remove_Homonym (New_Subp);\n \n                --  Hidden entities associated with interfaces must have set\n-               --  the Has_Delay_Freeze attribute to ensure that, in case of\n-               --  locally defined tagged types (or compiling with static\n+               --  the Has_Delay_Freeze attribute to ensure that, in case\n+               --  of locally defined tagged types (or compiling with static\n                --  dispatch tables generation disabled) the corresponding\n-               --  entry of the secondary dispatch table is filled when\n-               --  such an entity is frozen. This is an expansion activity\n-               --  that must be suppressed for ASIS because it leads to\n-               --  gigi elaboration issues in annotate mode.\n+               --  entry of the secondary dispatch table is filled when such\n+               --  an entity is frozen. This is an expansion activity that must\n+               --  be suppressed for ASIS because it leads to gigi elaboration\n+               --  issues in annotate mode.\n \n                if not ASIS_Mode then\n                   Set_Has_Delayed_Freeze (New_Subp);\n@@ -2145,8 +2145,7 @@ package body Sem_Ch3 is\n          begin\n             Set_Etype (Id, Act_T);\n \n-            --  Rewrite the component definition to use the constrained\n-            --  subtype.\n+            --  Rewrite component definition to use the constrained subtype\n \n             Rewrite (Component_Definition (N),\n               Make_Component_Definition (Loc,"}, {"sha": "d31cd905a965afc4e35dda0dc53a9d64317868ee", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c4d86c9ccbafef2cdfd92f3b6f382aa498a2c83/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c4d86c9ccbafef2cdfd92f3b6f382aa498a2c83/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=7c4d86c9ccbafef2cdfd92f3b6f382aa498a2c83", "patch": "@@ -3747,8 +3747,8 @@ package body Sem_Ch6 is\n         and then Full_Analysis\n         and then not Inside_A_Generic\n         and then Present (Spec_Id)\n-        and then Nkind (Unit_Declaration_Node (Spec_Id)) =\n-                   N_Subprogram_Declaration\n+        and then\n+          Nkind (Unit_Declaration_Node (Spec_Id)) = N_Subprogram_Declaration\n         and then Can_Be_Inlined_In_GNATprove_Mode (Spec_Id, Body_Id)\n         and then not Body_Has_Contract\n       then\n@@ -3933,8 +3933,7 @@ package body Sem_Ch6 is\n             --  from precondition and postcondition pragmas).\n \n             if No (Last_Entity (Body_Id)) then\n-               Set_First_Entity\n-                 (Body_Id, Next_Entity (Last_Real_Spec_Entity));\n+               Set_First_Entity (Body_Id, Next_Entity (Last_Real_Spec_Entity));\n \n             --  Body entities present (formals), so chain stuff past them\n "}, {"sha": "b35a28c2be6de90235271246eaa730f1794a3d62", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c4d86c9ccbafef2cdfd92f3b6f382aa498a2c83/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c4d86c9ccbafef2cdfd92f3b6f382aa498a2c83/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=7c4d86c9ccbafef2cdfd92f3b6f382aa498a2c83", "patch": "@@ -10551,8 +10551,7 @@ package body Sem_Util is\n          Nam := Pragma_Name (Item);\n       end if;\n \n-      return\n-        Nam = Name_Abstract_State\n+      return      Nam = Name_Abstract_State\n           or else Nam = Name_Contract_Cases\n           or else Nam = Name_Depends\n           or else Nam = Name_Extensions_Visible"}]}