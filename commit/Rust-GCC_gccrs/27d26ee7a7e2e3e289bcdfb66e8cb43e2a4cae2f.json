{"sha": "27d26ee7a7e2e3e289bcdfb66e8cb43e2a4cae2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdkMjZlZTdhN2UyZTNlMjg5YmNkZmI2NmU4Y2I0M2UyYTRjYWUyZg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-02-27T02:46:57Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-02-27T02:46:57Z"}, "message": "cp-tree.h (DECL_NEEDED_P): Tweak to correct usage before EOF.\n\n\t* cp-tree.h (DECL_NEEDED_P): Tweak to correct usage before EOF.\n\t(import_export_class): Remove declaration.\n\t* decl2.c (import_export_class): Make it static.\n\t* dump.c (dequeue_and_dump): Handle PREDECREMENT_EXPR,\n\tPREINCREMENT_EXPR, POSTDECREMENT_EXPR, POSTINCREMENT_EXPR,\n\tEXPR_WITH_FILE_LOCATION.\n\t* lex.c (check_newline): Tweak filename/lineno setting.\n\t* semantics.c (begin_while_stmt): Fix typo in comment.\n\nFrom-SVN: r32208", "tree": {"sha": "dd9a6cccef715d349ab52fd4c1b8113bce46cab9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd9a6cccef715d349ab52fd4c1b8113bce46cab9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27d26ee7a7e2e3e289bcdfb66e8cb43e2a4cae2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27d26ee7a7e2e3e289bcdfb66e8cb43e2a4cae2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27d26ee7a7e2e3e289bcdfb66e8cb43e2a4cae2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27d26ee7a7e2e3e289bcdfb66e8cb43e2a4cae2f/comments", "author": null, "committer": null, "parents": [{"sha": "a8f8d1cce570f2ef6efb3163e07b07a7c1d58ae0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8f8d1cce570f2ef6efb3163e07b07a7c1d58ae0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8f8d1cce570f2ef6efb3163e07b07a7c1d58ae0"}], "stats": {"total": 60, "additions": 53, "deletions": 7}, "files": [{"sha": "b90484fa6b7887f8d8f855392f3bad302bf3da7a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d26ee7a7e2e3e289bcdfb66e8cb43e2a4cae2f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d26ee7a7e2e3e289bcdfb66e8cb43e2a4cae2f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=27d26ee7a7e2e3e289bcdfb66e8cb43e2a4cae2f", "patch": "@@ -1,3 +1,14 @@\n+2000-02-26  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (DECL_NEEDED_P): Tweak to correct usage before EOF.\n+\t(import_export_class): Remove declaration.\n+\t* decl2.c (import_export_class): Make it static.\n+\t* dump.c (dequeue_and_dump): Handle PREDECREMENT_EXPR,\n+\tPREINCREMENT_EXPR, POSTDECREMENT_EXPR, POSTINCREMENT_EXPR,\n+\tEXPR_WITH_FILE_LOCATION.\n+\t* lex.c (check_newline): Tweak filename/lineno setting.\n+\t* semantics.c (begin_while_stmt): Fix typo in comment.\n+\t\n Sat Feb 26 19:50:23 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* lang-options.h (-fmessage-length=): Add missing option."}, {"sha": "f3209186153e96b104215cb2e20bc58bb44002c8", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d26ee7a7e2e3e289bcdfb66e8cb43e2a4cae2f/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d26ee7a7e2e3e289bcdfb66e8cb43e2a4cae2f/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=27d26ee7a7e2e3e289bcdfb66e8cb43e2a4cae2f", "patch": "@@ -2870,17 +2870,19 @@ extern int flag_new_for_scope;\n \n /* An integer indicating how many bytes should be subtracted from the\n    vtable for the `this' pointer to find the vcall offset.  (The vptr\n-   is always located at offset zero from the `this' pointer.)  If\n+   is always located at offset zero from the f `this' pointer.)  If\n    zero, then there is no vcall offset.  */\n #define THUNK_VCALL_OFFSET(DECL) (DECL_FIELD_SIZE (DECL))\n \n /* DECL_NEEDED_P holds of a declaration when we need to emit its\n    definition.  This is true when the back-end tells us that\n    the symbol has been referenced in the generated code.  If, however,\n    we are not generating code, then it is also true when a symbol has\n-   just been used somewhere, even if it's not really needed.  */\n+   just been used somewhere, even if it's not really needed.  We need\n+   anything that isn't comdat, but we don't know for sure whether or\n+   not something is comdat until end-of-file.  */\n #define DECL_NEEDED_P(DECL)\t\t\t\t\t\\\n-  (! DECL_COMDAT (DECL)\t\t\t\t\t\t\\\n+  ((at_eof && !DECL_COMDAT (DECL))\t\t\t\t\\\n    || (TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME ((DECL))))\t\\\n    || (flag_syntax_only && TREE_USED ((DECL))))\n \n@@ -3831,7 +3833,6 @@ extern void finish_builtin_type\t\t\tPARAMS ((tree, const char *,\n extern tree coerce_new_type\t\t\tPARAMS ((tree));\n extern tree coerce_delete_type\t\t\tPARAMS ((tree));\n extern void comdat_linkage\t\t\tPARAMS ((tree));\n-extern void import_export_class\t\t\tPARAMS ((tree));\n extern void import_export_vtable\t\tPARAMS ((tree, tree, int));\n extern void import_export_decl\t\t\tPARAMS ((tree));\n extern tree build_cleanup\t\t\tPARAMS ((tree));"}, {"sha": "2f9c574249ec00ed88c80720863c7920b6300cb0", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d26ee7a7e2e3e289bcdfb66e8cb43e2a4cae2f/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d26ee7a7e2e3e289bcdfb66e8cb43e2a4cae2f/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=27d26ee7a7e2e3e289bcdfb66e8cb43e2a4cae2f", "patch": "@@ -91,6 +91,7 @@ static int generate_ctor_and_dtor_functions_for_priority\n                                   PARAMS ((splay_tree_node, void *));\n static tree prune_vars_needing_no_initialization PARAMS ((tree));\n static void write_out_vars PARAMS ((tree));\n+static void import_export_class\tPARAMS ((tree));\n \n extern int current_class_depth;\n \n@@ -2440,13 +2441,20 @@ import_export_vtable (decl, type, final)\n /* Determine whether or not we want to specifically import or export CTYPE,\n    using various heuristics.  */\n \n-void\n+static void\n import_export_class (ctype)\n      tree ctype;\n {\n   /* -1 for imported, 1 for exported.  */\n   int import_export = 0;\n \n+  /* It only makes sense to call this function at EOF.  The reason is\n+     that this function looks at whether or not the first non-inline\n+     non-abstract virtual member function has been defined in this\n+     translation unit.  But, we can't possibly know that until we've\n+     seen the entire translation unit.  */\n+  my_friendly_assert (at_eof, 20000226);\n+\n   if (CLASSTYPE_INTERFACE_KNOWN (ctype))\n     return;\n "}, {"sha": "dc8f75401201e3c2940b70571307714808059346", "filename": "gcc/cp/dump.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d26ee7a7e2e3e289bcdfb66e8cb43e2a4cae2f/gcc%2Fcp%2Fdump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d26ee7a7e2e3e289bcdfb66e8cb43e2a4cae2f/gcc%2Fcp%2Fdump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdump.c?ref=27d26ee7a7e2e3e289bcdfb66e8cb43e2a4cae2f", "patch": "@@ -804,6 +804,10 @@ dequeue_and_dump (di)\n     case COMPONENT_REF:\n     case COMPOUND_EXPR:\n     case ARRAY_REF:\n+    case PREDECREMENT_EXPR:\n+    case PREINCREMENT_EXPR:\n+    case POSTDECREMENT_EXPR:\n+    case POSTINCREMENT_EXPR:\n       /* These nodes are binary, but do not have code class `2'.  */\n       dump_child (\"op 0\", TREE_OPERAND (t, 0));\n       dump_child (\"op 1\", TREE_OPERAND (t, 1));\n@@ -858,6 +862,10 @@ dequeue_and_dump (di)\n       dump_child (\"args\", TREE_OPERAND (t, 1));\n       dump_child (\"decl\", TREE_OPERAND (t, 2));\n       break;\n+      \n+    case EXPR_WITH_FILE_LOCATION:\n+      dump_child (\"expr\", EXPR_WFL_NODE (t));\n+      break;\n \n     default:\n       /* There are no additional fields to print.  */"}, {"sha": "f522031a110c9e24ade2cdea3d0a685d07b4c044", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d26ee7a7e2e3e289bcdfb66e8cb43e2a4cae2f/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d26ee7a7e2e3e289bcdfb66e8cb43e2a4cae2f/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=27d26ee7a7e2e3e289bcdfb66e8cb43e2a4cae2f", "patch": "@@ -2630,13 +2630,15 @@ check_newline ()\n \n \t  pop_srcloc ();\n \t  input_file_stack->name = new_file;\n-\t  lineno = l;\n \t  debug_end_source_file (input_file_stack->line);\n \t}\n       else\n \terror (\"#-lines for entering and leaving files don't match\");\n     }\n \n+  input_filename = new_file;\n+  lineno = l;\n+\n   extract_interface_info ();\n \n   /* skip the rest of this line.  */"}, {"sha": "52ab681ea59eb38d71838c87af7030945536cc1a", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d26ee7a7e2e3e289bcdfb66e8cb43e2a4cae2f/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d26ee7a7e2e3e289bcdfb66e8cb43e2a4cae2f/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=27d26ee7a7e2e3e289bcdfb66e8cb43e2a4cae2f", "patch": "@@ -281,7 +281,7 @@ begin_while_stmt ()\n   return r;\n }\n \n-/* Process the COND of an if-statement, which may be given by\n+/* Process the COND of a while-statement, which may be given by\n    WHILE_STMT.  */\n \n void "}, {"sha": "c3f54398f133fc7b454964f6b35b68f1912da5b1", "filename": "gcc/testsuite/g++.old-deja/g++.other/inline7.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d26ee7a7e2e3e289bcdfb66e8cb43e2a4cae2f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Finline7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d26ee7a7e2e3e289bcdfb66e8cb43e2a4cae2f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Finline7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Finline7.C?ref=27d26ee7a7e2e3e289bcdfb66e8cb43e2a4cae2f", "patch": "@@ -0,0 +1,16 @@\n+// Origin: Mark Mitchell <mark@codesourcery.com>\n+\n+#include <list>\n+\n+list<int*> li;\n+\n+void f ()\n+{\n+  li.size ();\n+}\n+\n+int main ()\n+{\n+  li.push_back (0);\n+  f ();\n+}"}]}