{"sha": "e61e7d28462eb89a7933ea77ef17a511a07e8418", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTYxZTdkMjg0NjJlYjg5YTc5MzNlYTc3ZWYxN2E1MTFhMDdlODQxOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2013-05-08T14:43:01Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-05-08T14:43:01Z"}, "message": "sse.md (PEXTR_MODE, [...]): Remove.\n\n\t* config/i386/sse.md (PEXTR_MODE, PEXTR_MODEx): Remove.\n\t(*vec_extract<mode>): Use VI12_128 mode iterator.\n\t(*vec_extract<mode>_mem): Ditto.\n\t(*vec_extract*_mem splitters): Merge splitters using VI_128 mode\n\tattribute.\n\nFrom-SVN: r198713", "tree": {"sha": "f5eb5769d5a09301cc8fbfe68abd971516690867", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5eb5769d5a09301cc8fbfe68abd971516690867"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e61e7d28462eb89a7933ea77ef17a511a07e8418", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e61e7d28462eb89a7933ea77ef17a511a07e8418", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e61e7d28462eb89a7933ea77ef17a511a07e8418", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e61e7d28462eb89a7933ea77ef17a511a07e8418/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4fbfcf44ba41e67136d3f470c98f657335052e84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fbfcf44ba41e67136d3f470c98f657335052e84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fbfcf44ba41e67136d3f470c98f657335052e84"}], "stats": {"total": 75, "additions": 31, "deletions": 44}, "files": [{"sha": "aa0274f32aab399c94a92495a2bc730346e267b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61e7d28462eb89a7933ea77ef17a511a07e8418/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61e7d28462eb89a7933ea77ef17a511a07e8418/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e61e7d28462eb89a7933ea77ef17a511a07e8418", "patch": "@@ -1,17 +1,23 @@\n+2013-05-08  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sse.md (PEXTR_MODE, PEXTR_MODEx): Remove.\n+\t(*vec_extract<mode>): Use VI12_128 mode iterator.\n+\t(*vec_extract<mode>_mem): Ditto.\n+\t(*vec_extract*_mem splitters): Merge splitters using VI_128 mode\n+\tattribute.\n+\n 2013-05-08  Diego Novillo  <dnovillo@google.com>\n \n \tPR bootstrap/54659\n \n \tRevert:\n-\n \t2012-08-17  Diego Novillo  <dnovillo@google.com>\n \n-\t\tPR bootstrap/54281\n-\t\t* configure.ac: Add libintl.h to AC_CHECK_HEADERS list.\n-\t\t* config.in: Regenerate.\n-\t\t* configure: Regenerate.\n-\t\t* intl.h: Always include libintl.h if HAVE_LIBINTL_H is\n-\t\tset.\n+\tPR bootstrap/54281\n+\t* configure.ac: Add libintl.h to AC_CHECK_HEADERS list.\n+\t* config.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* intl.h: Always include libintl.h if HAVE_LIBINTL_H is set.\n \n 2013-05-08  Jan Hubicka  <jh@suse.cz>\n "}, {"sha": "5f1fb2c9aec4030a53a2dc5c8fc436e2d4b4c2d0", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 18, "deletions": 37, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61e7d28462eb89a7933ea77ef17a511a07e8418/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61e7d28462eb89a7933ea77ef17a511a07e8418/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=e61e7d28462eb89a7933ea77ef17a511a07e8418", "patch": "@@ -7268,17 +7268,10 @@\n    (set_attr \"prefix\" \"maybe_vex,maybe_vex,orig,orig,vex\")\n    (set_attr \"mode\" \"TI,TI,V4SF,SF,SF\")])\n \n-;; Modes handled by pextr patterns.\n-(define_mode_iterator PEXTR_MODEx\n-  [V16QI V8HI])\n-\n-(define_mode_iterator PEXTR_MODE\n-  [(V16QI \"TARGET_SSE4_1\") V8HI])\n-\n (define_insn \"*vec_extract<mode>\"\n   [(set (match_operand:<ssescalarmode> 0 \"nonimmediate_operand\" \"=r,m\")\n \t(vec_select:<ssescalarmode>\n-\t  (match_operand:PEXTR_MODE 1 \"register_operand\" \"x,x\")\n+\t  (match_operand:VI12_128 1 \"register_operand\" \"x,x\")\n \t  (parallel\n \t    [(match_operand:SI 2 \"const_0_to_<ssescalarnummask>_operand\")])))]\n   \"TARGET_SSE4_1\"\n@@ -7345,21 +7338,14 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn_and_split \"*vec_extract<mode>_mem\"\n+(define_insn \"*vec_extract<mode>_mem\"\n   [(set (match_operand:<ssescalarmode> 0 \"register_operand\" \"=r\")\n \t(vec_select:<ssescalarmode>\n-\t  (match_operand:PEXTR_MODEx 1 \"memory_operand\" \"o\")\n+\t  (match_operand:VI12_128 1 \"memory_operand\" \"o\")\n \t  (parallel\n \t    [(match_operand 2 \"const_0_to_<ssescalarnummask>_operand\")])))]\n   \"TARGET_SSE\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(set (match_dup 0) (match_dup 1))]\n-{\n-  int offs = INTVAL (operands[2]) * GET_MODE_SIZE (<ssescalarmode>mode);\n-\n-  operands[1] = adjust_address (operands[1], <ssescalarmode>mode, offs);\n-})\n+  \"#\")\n \n (define_insn \"*vec_extract<ssevecmodelower>_0\"\n   [(set (match_operand:SWI48 0 \"nonimmediate_operand\"\t       \"=r ,r,x ,m\")\n@@ -7382,16 +7368,11 @@\n (define_split\n   [(set (match_operand:SWI48x 0 \"nonimmediate_operand\")\n \t(vec_select:SWI48x\n-\t  (match_operand:<ssevecmode> 1 \"nonimmediate_operand\")\n+\t  (match_operand:<ssevecmode> 1 \"register_operand\")\n \t  (parallel [(const_int 0)])))]\n   \"TARGET_SSE && reload_completed\"\n   [(set (match_dup 0) (match_dup 1))]\n-{\n-  if (REG_P (operands[1]))\n-    operands[1] = gen_rtx_REG (<MODE>mode, REGNO (operands[1]));\n-  else\n-    operands[1] = adjust_address (operands[1], <MODE>mode, 0);\n-})\n+  \"operands[1] = gen_rtx_REG (<MODE>mode, REGNO (operands[1]));\")\n \n (define_insn \"*vec_extractv4si\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n@@ -7420,18 +7401,13 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn_and_split \"*vec_extractv4si_mem\"\n+(define_insn \"*vec_extractv4si_mem\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=x,r\")\n \t(vec_select:SI\n \t  (match_operand:V4SI 1 \"memory_operand\" \"o,o\")\n \t  (parallel [(match_operand 2 \"const_0_to_3_operand\")])))]\n   \"TARGET_SSE\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(set (match_dup 0) (match_dup 1))]\n-{\n-  operands[1] = adjust_address (operands[1], SImode, INTVAL (operands[2]) * 4);\n-})\n+  \"#\")\n \n (define_insn \"*vec_extractv2di_1\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"     \"=rm,m,x,x,x,x,r\")\n@@ -7457,13 +7433,18 @@\n    (set_attr \"mode\" \"TI,V2SF,TI,TI,V4SF,DI,DI\")])\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\")\n-\t(vec_select:DI\n-\t  (match_operand:V2DI 1 \"memory_operand\")\n-\t  (parallel [(const_int 1)])))]\n+  [(set (match_operand:<ssescalarmode> 0 \"register_operand\")\n+\t(vec_select:<ssescalarmode>\n+\t  (match_operand:VI_128 1 \"memory_operand\")\n+\t  (parallel\n+\t    [(match_operand 2 \"const_0_to_<ssescalarnummask>_operand\")])))]\n   \"TARGET_SSE && reload_completed\"\n   [(set (match_dup 0) (match_dup 1))]\n-  \"operands[1] = adjust_address (operands[1], DImode, 8);\")\n+{\n+  int offs = INTVAL (operands[2]) * GET_MODE_SIZE (<ssescalarmode>mode);\n+\n+  operands[1] = adjust_address (operands[1], <ssescalarmode>mode, offs);\n+})\n \n (define_insn \"*vec_dupv4si\"\n   [(set (match_operand:V4SI 0 \"register_operand\"     \"=x,x,x\")"}]}