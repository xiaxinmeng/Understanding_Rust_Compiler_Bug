{"sha": "af5bdf6ad76dec71b64412212300e7eb1033c829", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY1YmRmNmFkNzZkZWM3MWI2NDQxMjIxMjMwMGU3ZWIxMDMzYzgyOQ==", "commit": {"author": {"name": "Waldek Hebisch", "email": "hebisch@math.uni.wroc.pl", "date": "2004-04-01T22:30:09Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-04-01T22:30:09Z"}, "message": "* fold-const.c (folda): Preserve types of comparisons.\n\nFrom-SVN: r80327", "tree": {"sha": "baed5283e106a0930dc3d836569e989ea0e9d651", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/baed5283e106a0930dc3d836569e989ea0e9d651"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af5bdf6ad76dec71b64412212300e7eb1033c829", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af5bdf6ad76dec71b64412212300e7eb1033c829", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af5bdf6ad76dec71b64412212300e7eb1033c829", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af5bdf6ad76dec71b64412212300e7eb1033c829/comments", "author": {"login": "hebisch", "id": 423725, "node_id": "MDQ6VXNlcjQyMzcyNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/423725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hebisch", "html_url": "https://github.com/hebisch", "followers_url": "https://api.github.com/users/hebisch/followers", "following_url": "https://api.github.com/users/hebisch/following{/other_user}", "gists_url": "https://api.github.com/users/hebisch/gists{/gist_id}", "starred_url": "https://api.github.com/users/hebisch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hebisch/subscriptions", "organizations_url": "https://api.github.com/users/hebisch/orgs", "repos_url": "https://api.github.com/users/hebisch/repos", "events_url": "https://api.github.com/users/hebisch/events{/privacy}", "received_events_url": "https://api.github.com/users/hebisch/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "354d4c68c6e258ffa3341febb7e54ca51685a0e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/354d4c68c6e258ffa3341febb7e54ca51685a0e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/354d4c68c6e258ffa3341febb7e54ca51685a0e5"}], "stats": {"total": 18, "additions": 11, "deletions": 7}, "files": [{"sha": "0d3b02b64fa6349d91a51e4921b94f434b032597", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af5bdf6ad76dec71b64412212300e7eb1033c829/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af5bdf6ad76dec71b64412212300e7eb1033c829/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=af5bdf6ad76dec71b64412212300e7eb1033c829", "patch": "@@ -1,3 +1,7 @@\n+2004-04-01  Waldek Hebisch  <hebisch@math.uni.wroc.pl>\n+\n+\t* fold-const.c (folda): Preserve types of comparisons.\n+\n 2004-04-01  Richard Henderson  <rth@redhat.com>\n \n \t* toplev.c (backend_init): Move init_optimization_passes call ..."}, {"sha": "3fc6dd27d0b204b022175b9220f6f566bb306a40", "filename": "gcc/fold-const.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af5bdf6ad76dec71b64412212300e7eb1033c829/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af5bdf6ad76dec71b64412212300e7eb1033c829/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=af5bdf6ad76dec71b64412212300e7eb1033c829", "patch": "@@ -5366,7 +5366,7 @@ tree_swap_operands_p (tree arg0, tree arg1, bool reorder)\n    The related simplifications include x*1 => x, x*0 => 0, etc.,\n    and application of the associative law.\n    NOP_EXPR conversions may be removed freely (as long as we\n-   are careful not to change the C type of the overall expression)\n+   are careful not to change the type of the overall expression).\n    We cannot simplify through a CONVERT_EXPR, FIX_EXPR or FLOAT_EXPR,\n    but we can constant-fold them if they have constant operands.  */\n \n@@ -7173,9 +7173,9 @@ fold (tree expr)\n \t  && integer_zerop (arg1))\n \t{\n \t  if (code == EQ_EXPR)\n-\t    return integer_zero_node;\n+\t    return fold_convert (type, integer_zero_node);\n \t  else\n-\t    return integer_one_node;\n+\t    return fold_convert (type, integer_one_node);\n \t}\n \n       /* If this is an equality comparison of the address of two non-weak,\n@@ -7196,11 +7196,11 @@ fold (tree expr)\n \t  && ! DECL_EXTERNAL (TREE_OPERAND (arg1, 0)))\n \t{\n \t  if (code == EQ_EXPR)\n-\t    return (operand_equal_p (arg0, arg1, 0)\n-\t\t    ? integer_one_node : integer_zero_node);\n+\t    return fold_convert (type, (operand_equal_p (arg0, arg1, 0)\n+\t\t    ? integer_one_node : integer_zero_node));\n \t  else\n-\t    return (operand_equal_p (arg0, arg1, 0)\n-\t\t    ? integer_zero_node : integer_one_node);\n+\t    return fold_convert (type, (operand_equal_p (arg0, arg1, 0)\n+\t\t    ? integer_zero_node : integer_one_node));\n \t}\n \n       if (FLOAT_TYPE_P (TREE_TYPE (arg0)))"}]}