{"sha": "e7e6663285f1afc242a733d3d0f24626c9b0b4da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdlNjY2MzI4NWYxYWZjMjQyYTczM2QzZDBmMjQ2MjZjOWIwYjRkYQ==", "commit": {"author": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@scf.usc.edu", "date": "1998-02-03T22:30:26Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-02-03T22:30:26Z"}, "message": "error.c (dump_decl): Fix type of default arguments for template template parameters and nontype...\n\n\t* error.c (dump_decl): Fix type of default arguments for template\n\ttemplate parameters and nontype template parameters.\n\t* parse.y (template_parm): Handle invalid default template\n\ttemplate arguments here.\n\t* parse.y (template_parm): Use template_arg instead of PTYPENAME\n\tfor default template template argument.\n\t* pt.c (coerce_template_parms): Merge default template argument\n\tcodes.  Can treat RECORD_TYPE as template name if it is implicitly\n\tcreated.  Fix argument index in error message.\n\t* typeck.c (comptypes): Merge template argument comparison codes in\n\tTEMPLATE_TEMPLATE_PARM and RECORD_TYPE.\n\nFrom-SVN: r17650", "tree": {"sha": "55e154b8c10f7bdc2b913ed6e2b8530c5def5bd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55e154b8c10f7bdc2b913ed6e2b8530c5def5bd8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7e6663285f1afc242a733d3d0f24626c9b0b4da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7e6663285f1afc242a733d3d0f24626c9b0b4da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7e6663285f1afc242a733d3d0f24626c9b0b4da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7e6663285f1afc242a733d3d0f24626c9b0b4da/comments", "author": null, "committer": null, "parents": [{"sha": "d47d138a7d9f475a8c72859b20023a003026269b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d47d138a7d9f475a8c72859b20023a003026269b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d47d138a7d9f475a8c72859b20023a003026269b"}], "stats": {"total": 2471, "additions": 1225, "deletions": 1246}, "files": [{"sha": "2fe13c94d0d54d93e64fcde3b9487350d618eb1c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7e6663285f1afc242a733d3d0f24626c9b0b4da/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7e6663285f1afc242a733d3d0f24626c9b0b4da/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e7e6663285f1afc242a733d3d0f24626c9b0b4da", "patch": "@@ -1,3 +1,18 @@\n+Tue Feb  3 22:04:01 1998  Kriang Lerdsuwanakij  <lerdsuwa@scf.usc.edu>\n+\n+\t* error.c (dump_decl): Fix type of default arguments for template\n+\ttemplate parameters and nontype template parameters.\n+\t* parse.y (template_parm): Handle invalid default template \n+\ttemplate arguments here.\n+\n+\t* parse.y (template_parm): Use template_arg instead of PTYPENAME \n+\tfor default template template argument.\n+\t* pt.c (coerce_template_parms): Merge default template argument \n+\tcodes.  Can treat RECORD_TYPE as template name if it is implicitly\n+\tcreated.  Fix argument index in error message.\n+\t* typeck.c (comptypes): Merge template argument comparison codes in \n+\tTEMPLATE_TEMPLATE_PARM and RECORD_TYPE.\n+\n Tue Jan  6 01:42:44 1998  Mumit Khan <khan@xraylith.wisc.edu>\n \n \t* lex.c (file_name_nondirectory): Also check for '/'."}, {"sha": "22d0f1169557f73bface6a3c12753769adcbea09", "filename": "gcc/cp/error.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7e6663285f1afc242a733d3d0f24626c9b0b4da/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7e6663285f1afc242a733d3d0f24626c9b0b4da/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=e7e6663285f1afc242a733d3d0f24626c9b0b4da", "patch": "@@ -789,10 +789,11 @@ dump_decl (t, v)\n \t\tif (defval)\n \t\t  {\n \t\t    OB_PUTS (\" = \");\n-\t\t    if (TREE_CODE (arg) == TYPE_DECL)\n+\t\t    if (TREE_CODE (arg) == TYPE_DECL\n+\t\t\t|| TREE_CODE (arg) == TEMPLATE_DECL)\n \t\t      dump_type (defval, 1);\n \t\t    else\n-\t\t      dump_decl (defval, 1);\n+\t\t      dump_expr (defval, 1);\n \t\t  }\n \t\t\n \t\tOB_PUTC2 (',', ' ');"}, {"sha": "2085e1bc9a804787a566c6ea30904b1295156ed7", "filename": "gcc/cp/parse.c", "status": "modified", "additions": 1157, "deletions": 1162, "changes": 2319, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7e6663285f1afc242a733d3d0f24626c9b0b4da/gcc%2Fcp%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7e6663285f1afc242a733d3d0f24626c9b0b4da/gcc%2Fcp%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.c?ref=e7e6663285f1afc242a733d3d0f24626c9b0b4da"}, {"sha": "ef68898754beed642bbce87144fa3b6010188054", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7e6663285f1afc242a733d3d0f24626c9b0b4da/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7e6663285f1afc242a733d3d0f24626c9b0b4da/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=e7e6663285f1afc242a733d3d0f24626c9b0b4da", "patch": "@@ -512,19 +512,17 @@ template_parm:\n \t\t{ $$ = build_tree_list ($3, $1.t); }\n \t| template_template_parm\n \t\t{ $$ = build_tree_list (NULL_TREE, $1); }\n-\t| template_template_parm '=' PTYPENAME\n-\t  \t{\n-\t\t  tree defarg;\n-\t  \t  arg_looking_for_template = 1;\n-\t  \t  defarg = lookup_name ($3, 0);\n-\t  \t  arg_looking_for_template = 0;\n-\t\t\t\n-\t\t  if (!defarg || defarg == error_mark_node\n-\t\t      || (TREE_CODE (defarg) != TEMPLATE_DECL\n-\t\t\t  && TREE_CODE (defarg) != TEMPLATE_TEMPLATE_PARM))\n-\t\t    defarg = do_identifier ($3, 1);\n-\t\t  $$ = build_tree_list (defarg, $1);\n-\t  \t}\n+\t| template_template_parm '=' template_arg\n+\t\t{\n+\t\t  if (TREE_CODE ($3) != TEMPLATE_DECL\n+\t\t      && TREE_CODE ($3) != TEMPLATE_TEMPLATE_PARM\n+\t\t      && TREE_CODE ($3) != TYPE_DECL)\n+\t\t    {\n+\t\t      error (\"invalid default template argument\");\n+\t\t      $3 = error_mark_node;\n+\t\t    }\n+\t\t  $$ = build_tree_list ($3, $1);\n+\t\t}\n \t;\n \n template_def:\n@@ -3071,10 +3069,7 @@ nonnested_type:\n \t\t{\n \t\t  if (TREE_CODE ($1) == IDENTIFIER_NODE)\n \t\t    {\n-\t\t      arg_looking_for_template = processing_template_arg;\n \t\t      $$ = lookup_name ($1, 1);\n-\t\t      arg_looking_for_template = 0;\n-\n \t\t      if (current_class_type\n \t\t\t  && TYPE_BEING_DEFINED (current_class_type)\n \t\t\t  && ! IDENTIFIER_CLASS_VALUE ($1))"}, {"sha": "508719a59abd9b1384d9d7cc58b49d4fd27ea267", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 27, "deletions": 34, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7e6663285f1afc242a733d3d0f24626c9b0b4da/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7e6663285f1afc242a733d3d0f24626c9b0b4da/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e7e6663285f1afc242a733d3d0f24626c9b0b4da", "patch": "@@ -1744,36 +1744,14 @@ coerce_template_parms (parms, arglist, in_decl,\n       return error_mark_node;\n     }\n \n-  if (arglist && TREE_CODE (arglist) == TREE_VEC)\n-    {\n-      if (nargs == nparms)\n-\tvec = copy_node (arglist);\n-      else\n-\t{\n-\t  /* We arrive here when a template with some default arguments\n-\t     is used as template template argument.  */\n-\t  is_tmpl_parm = 1;\n-\t  vec = make_tree_vec (nparms);\n-\t  for (i = 0; i < nparms; i++)\n-\t    {\n-\t      tree arg;\n-\t      \n-\t      if (i < nargs)\n-\t      arg = TREE_VEC_ELT (arglist, i);\n-\t      else if (TREE_CODE (TREE_VALUE (TREE_VEC_ELT (parms, i)))\n-\t\t       == TYPE_DECL)\n-\t\targ = tsubst (TREE_PURPOSE (TREE_VEC_ELT (parms, i)),\n-\t\t\t      vec, i, in_decl);\n-\t      else\n-\t\targ = tsubst_expr (TREE_PURPOSE (TREE_VEC_ELT (parms, i)),\n-\t\t\t\t   vec, i, in_decl);\n-\t      \n-\t      TREE_VEC_ELT (vec, i) = arg;\n-\t    }\n-\t}\n-    }\n+  if (arglist && TREE_CODE (arglist) == TREE_VEC && nargs == nparms)\n+    vec = copy_node (arglist);\n   else\n     {\n+      /* We can arrive here with arglist being a TREE_VEC when a \n+\t template with some default arguments is used as template \n+\t template argument.  */\n+      is_tmpl_parm = TREE_CODE (arglist) == TREE_VEC;\n       vec = make_tree_vec (nparms);\n \n       for (i = 0; i < nparms; i++)\n@@ -1791,6 +1769,12 @@ coerce_template_parms (parms, arglist, in_decl,\n \t      else\n \t\targ = TREE_VALUE (arg);\n \t    }\n+\t  else if (is_tmpl_parm && i < nargs)\n+\t    {\n+\t      arg = TREE_VEC_ELT (arglist, i);\n+\t      if (arg == error_mark_node)\n+\t\tlost++;\n+\t    }\n \t  else if (TREE_PURPOSE (parm) == NULL_TREE)\n \t    {\n \t      my_friendly_assert (!require_all_arguments, 0);\n@@ -1846,20 +1830,29 @@ coerce_template_parms (parms, arglist, in_decl,\n \t  arg = TREE_VALUE (arg);\n \t}\n \n-      /* Check if it is a class template.  */\n+      requires_tmpl_type = TREE_CODE (parm) == TEMPLATE_DECL;\n+      requires_type = TREE_CODE (parm) == TYPE_DECL\n+\t\t      || requires_tmpl_type;\n+\n+      /* Check if it is a class template.  If REQUIRES_TMPL_TYPE is true,\n+\t we also accept implicitly created TYPE_DECL as a valid argument.  */\n       is_tmpl_type = (TREE_CODE (arg) == TEMPLATE_DECL\n \t\t      && TREE_CODE (DECL_TEMPLATE_RESULT (arg)) == TYPE_DECL)\n \t\t     || (TREE_CODE (arg) == TEMPLATE_TEMPLATE_PARM\n-\t\t\t && !CLASSTYPE_TEMPLATE_INFO (arg));\n+\t\t\t && !CLASSTYPE_TEMPLATE_INFO (arg))\n+\t\t     || (TREE_CODE (arg) == RECORD_TYPE\n+\t\t         && CLASSTYPE_TEMPLATE_INFO (arg)\n+\t\t         && TREE_CODE (TYPE_NAME (arg)) == TYPE_DECL\n+\t\t\t && DECL_ARTIFICIAL (TYPE_NAME (arg))\n+\t\t\t && requires_tmpl_type);\n       if (is_tmpl_type && TREE_CODE (arg) == TEMPLATE_TEMPLATE_PARM)\n \targ = TYPE_STUB_DECL (arg);\n+      else if (is_tmpl_type && TREE_CODE (arg) == RECORD_TYPE)\n+\targ = CLASSTYPE_TI_TEMPLATE (arg);\n       \n-      requires_tmpl_type = TREE_CODE (parm) == TEMPLATE_DECL;\n       is_type = TREE_CODE_CLASS (TREE_CODE (arg)) == 't'\n \t\t|| is_tmpl_type\n \t\t|| (is_tmpl_parm && TREE_CODE (arg) == TYPE_DECL);\n-      requires_type = TREE_CODE (parm) == TYPE_DECL\n-\t\t      || requires_tmpl_type;\n \n       if (requires_type && ! is_type && TREE_CODE (arg) == SCOPE_REF\n \t  && TREE_CODE (TREE_OPERAND (arg, 0)) == TEMPLATE_TYPE_PARM)\n@@ -1896,7 +1889,7 @@ coerce_template_parms (parms, arglist, in_decl,\n \t  if (in_decl)\n \t    {\n \t      cp_error (\"type/value mismatch at argument %d in template parameter list for `%D'\",\n-\t\t\ti, in_decl);\n+\t\t\ti + 1, in_decl);\n \t      if (is_tmpl_type)\n \t\tcp_error (\"  expected a type, got `%T'\", DECL_NAME (arg));\n \t      else"}, {"sha": "04f7ddaef2c3017b00d8ab4ade42baa23c5b1515", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 12, "deletions": 32, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7e6663285f1afc242a733d3d0f24626c9b0b4da/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7e6663285f1afc242a733d3d0f24626c9b0b4da/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=e7e6663285f1afc242a733d3d0f24626c9b0b4da", "patch": "@@ -749,10 +749,21 @@ comptypes (type1, type2, strict)\n \n   switch (TREE_CODE (t1))\n     {\n+    case TEMPLATE_TEMPLATE_PARM:\n+      if (TEMPLATE_TYPE_IDX (t1) != TEMPLATE_TYPE_IDX (t2)\n+\t  || TEMPLATE_TYPE_LEVEL (t1) != TEMPLATE_TYPE_LEVEL (t2))\n+\treturn 0;\n+      if (! CLASSTYPE_TEMPLATE_INFO (t1) && ! CLASSTYPE_TEMPLATE_INFO (t2))\n+\treturn 1;\n+      /* Don't check inheritance.  */\n+      strict = 1;\n+      /* fall through */\n+\n     case RECORD_TYPE:\n     case UNION_TYPE:\n       if (CLASSTYPE_TEMPLATE_INFO (t1) && CLASSTYPE_TEMPLATE_INFO (t2)\n-\t  && CLASSTYPE_TI_TEMPLATE (t1) == CLASSTYPE_TI_TEMPLATE (t2))\n+\t  && (CLASSTYPE_TI_TEMPLATE (t1) == CLASSTYPE_TI_TEMPLATE (t2)\n+\t      || TREE_CODE (t1) == TEMPLATE_TEMPLATE_PARM))\n \t{\n \t  int i = TREE_VEC_LENGTH (CLASSTYPE_TI_ARGS (t1));\n \t  tree *p1 = &TREE_VEC_ELT (CLASSTYPE_TI_ARGS (t1), 0);\n@@ -845,37 +856,6 @@ comptypes (type1, type2, strict)\n       val = comp_array_types (comptypes, t1, t2, strict);\n       break;\n \n-    case TEMPLATE_TEMPLATE_PARM:\n-      if (TEMPLATE_TYPE_IDX (t1) != TEMPLATE_TYPE_IDX (t2)\n-\t  || TEMPLATE_TYPE_LEVEL (t1) != TEMPLATE_TYPE_LEVEL (t2))\n-\treturn 0;\n-\n-      if (CLASSTYPE_TEMPLATE_INFO (t1) && CLASSTYPE_TEMPLATE_INFO (t2))\n-\t{\n-\t  int i = TREE_VEC_LENGTH (CLASSTYPE_TI_ARGS (t1));\n-\t  tree *p1 = &TREE_VEC_ELT (CLASSTYPE_TI_ARGS (t1), 0);\n-\t  tree *p2 = &TREE_VEC_ELT (CLASSTYPE_TI_ARGS (t2), 0);\n-\t\n-\t  while (i--)\n-\t    {\n-\t      if (TREE_CODE_CLASS (TREE_CODE (p1[i])) == 't')\n-\t\t{\n-\t\t  if (! comptypes (p1[i], p2[i], 1))\n-\t\t    return 0;\n-\t\t}\n-\t      else\n-\t\t{\n-\t\t  if (simple_cst_equal (p1[i], p2[i]) <= 0)\n-\t\t    return 0;\n-\t\t}\n-\t    }\n-\t  return 1;\n-\t}\n-      else if (CLASSTYPE_TEMPLATE_INFO (t1) || CLASSTYPE_TEMPLATE_INFO (t2))\n-\treturn 0;\n-      else\n-\treturn 1;\n-\n     case TEMPLATE_TYPE_PARM:\n       return TEMPLATE_TYPE_IDX (t1) == TEMPLATE_TYPE_IDX (t2)\n \t&& TEMPLATE_TYPE_LEVEL (t1) == TEMPLATE_TYPE_LEVEL (t2);"}]}