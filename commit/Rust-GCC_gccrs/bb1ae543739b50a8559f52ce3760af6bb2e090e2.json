{"sha": "bb1ae543739b50a8559f52ce3760af6bb2e090e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmIxYWU1NDM3MzliNTBhODU1OWY1MmNlMzc2MGFmNmJiMmUwOTBlMg==", "commit": {"author": {"name": "Tejas Belagod", "email": "tejas.belagod@arm.com", "date": "2013-09-06T10:57:14Z"}, "committer": {"name": "Tejas Belagod", "email": "belagod@gcc.gnu.org", "date": "2013-09-06T10:57:14Z"}, "message": "arm_neon.h: Fix all vdup<bhsd_lane<q> intrinsics to have the correct lane parameter.\n\n2013-09-06  Tejas Belagod  <tejas.belagod@arm.com>\n\ngcc/\n\t* config/aarch64/arm_neon.h: Fix all vdup<bhsd_lane<q> intrinsics to\n\thave the correct lane parameter.\n\nFrom-SVN: r202321", "tree": {"sha": "88dbb0dfd350f1d15db2c38eaf8bccfb3df745ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88dbb0dfd350f1d15db2c38eaf8bccfb3df745ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb1ae543739b50a8559f52ce3760af6bb2e090e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb1ae543739b50a8559f52ce3760af6bb2e090e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb1ae543739b50a8559f52ce3760af6bb2e090e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb1ae543739b50a8559f52ce3760af6bb2e090e2/comments", "author": {"login": "tejas-belagod-arm", "id": 92718852, "node_id": "U_kgDOBYbHBA", "avatar_url": "https://avatars.githubusercontent.com/u/92718852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tejas-belagod-arm", "html_url": "https://github.com/tejas-belagod-arm", "followers_url": "https://api.github.com/users/tejas-belagod-arm/followers", "following_url": "https://api.github.com/users/tejas-belagod-arm/following{/other_user}", "gists_url": "https://api.github.com/users/tejas-belagod-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/tejas-belagod-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tejas-belagod-arm/subscriptions", "organizations_url": "https://api.github.com/users/tejas-belagod-arm/orgs", "repos_url": "https://api.github.com/users/tejas-belagod-arm/repos", "events_url": "https://api.github.com/users/tejas-belagod-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/tejas-belagod-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f23c07427173f7d0f1d89d2b7dc247adb98ea523", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f23c07427173f7d0f1d89d2b7dc247adb98ea523", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f23c07427173f7d0f1d89d2b7dc247adb98ea523"}], "stats": {"total": 87, "additions": 46, "deletions": 41}, "files": [{"sha": "f9fb662ed2d0fc0301cdbc18ea18a3c096837faa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb1ae543739b50a8559f52ce3760af6bb2e090e2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb1ae543739b50a8559f52ce3760af6bb2e090e2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bb1ae543739b50a8559f52ce3760af6bb2e090e2", "patch": "@@ -1,3 +1,8 @@\n+2013-09-06  Tejas Belagod  <tejas.belagod@arm.com>\n+\n+\t* config/aarch64/arm_neon.h: Fix all vdup<bhsd_lane<q> intrinsics to\n+\thave the correct lane parameter.\n+\n 2013-09-06  Richard Biener <rguenther@suse.de>\n \n \t* cfganal.c (control_dependences::~control_dependences):"}, {"sha": "93ed6d3e0568d99576ec724c55a85d33e26cce74", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb1ae543739b50a8559f52ce3760af6bb2e090e2/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb1ae543739b50a8559f52ce3760af6bb2e090e2/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=bb1ae543739b50a8559f52ce3760af6bb2e090e2", "patch": "@@ -19750,59 +19750,59 @@ vdupq_laneq_u64 (uint64x2_t __a, const int __b)\n \n /* vdupb_lane  */\n __extension__ static __inline poly8_t __attribute__ ((__always_inline__))\n-vdupb_lane_p8 (poly8x8_t __a, const int __attribute__ ((unused)) __b)\n+vdupb_lane_p8 (poly8x8_t __a, const int __b)\n {\n-  return __aarch64_vget_lane_p8 (__a, 0);\n+  return __aarch64_vget_lane_p8 (__a, __b);\n }\n \n __extension__ static __inline int8_t __attribute__ ((__always_inline__))\n-vdupb_lane_s8 (int8x8_t __a, const int __attribute__ ((unused)) __b)\n+vdupb_lane_s8 (int8x8_t __a, const int __b)\n {\n-  return __aarch64_vget_lane_s8 (__a, 0);\n+  return __aarch64_vget_lane_s8 (__a, __b);\n }\n \n __extension__ static __inline uint8_t __attribute__ ((__always_inline__))\n-vdupb_lane_u8 (uint8x8_t __a, const int __attribute__ ((unused)) __b)\n+vdupb_lane_u8 (uint8x8_t __a, const int __b)\n {\n-  return __aarch64_vget_lane_u8 (__a, 0);\n+  return __aarch64_vget_lane_u8 (__a, __b);\n }\n \n /* vduph_lane  */\n __extension__ static __inline poly16_t __attribute__ ((__always_inline__))\n-vduph_lane_p16 (poly16x4_t __a, const int __attribute__ ((unused)) __b)\n+vduph_lane_p16 (poly16x4_t __a, const int __b)\n {\n-  return __aarch64_vget_lane_p16 (__a, 0);\n+  return __aarch64_vget_lane_p16 (__a, __b);\n }\n \n __extension__ static __inline int16_t __attribute__ ((__always_inline__))\n-vduph_lane_s16 (int16x4_t __a, const int __attribute__ ((unused)) __b)\n+vduph_lane_s16 (int16x4_t __a, const int __b)\n {\n-  return __aarch64_vget_lane_s16 (__a, 0);\n+  return __aarch64_vget_lane_s16 (__a, __b);\n }\n \n __extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n-vduph_lane_u16 (uint16x4_t __a, const int __attribute__ ((unused)) __b)\n+vduph_lane_u16 (uint16x4_t __a, const int __b)\n {\n-  return __aarch64_vget_lane_u16 (__a, 0);\n+  return __aarch64_vget_lane_u16 (__a, __b);\n }\n \n /* vdups_lane  */\n __extension__ static __inline float32_t __attribute__ ((__always_inline__))\n-vdups_lane_f32 (float32x2_t __a, const int __attribute__ ((unused)) __b)\n+vdups_lane_f32 (float32x2_t __a, const int __b)\n {\n-  return __aarch64_vget_lane_f32 (__a, 0);\n+  return __aarch64_vget_lane_f32 (__a, __b);\n }\n \n __extension__ static __inline int32_t __attribute__ ((__always_inline__))\n-vdups_lane_s32 (int32x2_t __a, const int __attribute__ ((unused)) __b)\n+vdups_lane_s32 (int32x2_t __a, const int __b)\n {\n-  return __aarch64_vget_lane_s32 (__a, 0);\n+  return __aarch64_vget_lane_s32 (__a, __b);\n }\n \n __extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n-vdups_lane_u32 (uint32x2_t __a, const int __attribute__ ((unused)) __b)\n+vdups_lane_u32 (uint32x2_t __a, const int __b)\n {\n-  return __aarch64_vget_lane_u32 (__a, 0);\n+  return __aarch64_vget_lane_u32 (__a, __b);\n }\n \n /* vdupd_lane  */\n@@ -19826,78 +19826,78 @@ vdupd_lane_u64 (uint64x1_t __a, const int __attribute__ ((unused)) __b)\n \n /* vdupb_laneq  */\n __extension__ static __inline poly8_t __attribute__ ((__always_inline__))\n-vdupb_laneq_p8 (poly8x16_t __a, const int __attribute__ ((unused)) __b)\n+vdupb_laneq_p8 (poly8x16_t __a, const int __b)\n {\n-  return __aarch64_vgetq_lane_p8 (__a, 0);\n+  return __aarch64_vgetq_lane_p8 (__a, __b);\n }\n \n __extension__ static __inline int8_t __attribute__ ((__always_inline__))\n vdupb_laneq_s8 (int8x16_t __a, const int __attribute__ ((unused)) __b)\n {\n-  return __aarch64_vgetq_lane_s8 (__a, 0);\n+  return __aarch64_vgetq_lane_s8 (__a, __b);\n }\n \n __extension__ static __inline uint8_t __attribute__ ((__always_inline__))\n-vdupb_laneq_u8 (uint8x16_t __a, const int __attribute__ ((unused)) __b)\n+vdupb_laneq_u8 (uint8x16_t __a, const int __b)\n {\n-  return __aarch64_vgetq_lane_u8 (__a, 0);\n+  return __aarch64_vgetq_lane_u8 (__a, __b);\n }\n \n /* vduph_laneq  */\n __extension__ static __inline poly16_t __attribute__ ((__always_inline__))\n-vduph_laneq_p16 (poly16x8_t __a, const int __attribute__ ((unused)) __b)\n+vduph_laneq_p16 (poly16x8_t __a, const int __b)\n {\n-  return __aarch64_vgetq_lane_p16 (__a, 0);\n+  return __aarch64_vgetq_lane_p16 (__a, __b);\n }\n \n __extension__ static __inline int16_t __attribute__ ((__always_inline__))\n-vduph_laneq_s16 (int16x8_t __a, const int __attribute__ ((unused)) __b)\n+vduph_laneq_s16 (int16x8_t __a, const int __b)\n {\n-  return __aarch64_vgetq_lane_s16 (__a, 0);\n+  return __aarch64_vgetq_lane_s16 (__a, __b);\n }\n \n __extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n-vduph_laneq_u16 (uint16x8_t __a, const int __attribute__ ((unused)) __b)\n+vduph_laneq_u16 (uint16x8_t __a, const int __b)\n {\n-  return __aarch64_vgetq_lane_u16 (__a, 0);\n+  return __aarch64_vgetq_lane_u16 (__a, __b);\n }\n \n /* vdups_laneq  */\n __extension__ static __inline float32_t __attribute__ ((__always_inline__))\n-vdups_laneq_f32 (float32x4_t __a, const int __attribute__ ((unused)) __b)\n+vdups_laneq_f32 (float32x4_t __a, const int __b)\n {\n-  return __aarch64_vgetq_lane_f32 (__a, 0);\n+  return __aarch64_vgetq_lane_f32 (__a, __b);\n }\n \n __extension__ static __inline int32_t __attribute__ ((__always_inline__))\n-vdups_laneq_s32 (int32x4_t __a, const int __attribute__ ((unused)) __b)\n+vdups_laneq_s32 (int32x4_t __a, const int __b)\n {\n-  return __aarch64_vgetq_lane_s32 (__a, 0);\n+  return __aarch64_vgetq_lane_s32 (__a, __b);\n }\n \n __extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n-vdups_laneq_u32 (uint32x4_t __a, const int __attribute__ ((unused)) __b)\n+vdups_laneq_u32 (uint32x4_t __a, const int __b)\n {\n-  return __aarch64_vgetq_lane_u32 (__a, 0);\n+  return __aarch64_vgetq_lane_u32 (__a, __b);\n }\n \n /* vdupd_laneq  */\n __extension__ static __inline float64_t __attribute__ ((__always_inline__))\n-vdupd_laneq_f64 (float64x2_t __a, const int __attribute__ ((unused)) __b)\n+vdupd_laneq_f64 (float64x2_t __a, const int __b)\n {\n-  return __aarch64_vgetq_lane_f64 (__a, 0);\n+  return __aarch64_vgetq_lane_f64 (__a, __b);\n }\n \n __extension__ static __inline int64_t __attribute__ ((__always_inline__))\n-vdupd_laneq_s64 (int64x2_t __a, const int __attribute__ ((unused)) __b)\n+vdupd_laneq_s64 (int64x2_t __a, const int __b)\n {\n-  return __aarch64_vgetq_lane_s64 (__a, 0);\n+  return __aarch64_vgetq_lane_s64 (__a, __b);\n }\n \n __extension__ static __inline uint64_t __attribute__ ((__always_inline__))\n-vdupd_laneq_u64 (uint64x2_t __a, const int __attribute__ ((unused)) __b)\n+vdupd_laneq_u64 (uint64x2_t __a, const int __b)\n {\n-  return __aarch64_vgetq_lane_u64 (__a, 0);\n+  return __aarch64_vgetq_lane_u64 (__a, __b);\n }\n \n /* vld1 */"}]}