{"sha": "5eb387b858bbec655fa5faa258af1e0451ca796e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWViMzg3Yjg1OGJiZWM2NTVmYTVmYWEyNThhZjFlMDQ1MWNhNzk2ZQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1995-07-25T14:17:45Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1995-07-25T14:17:45Z"}, "message": "store LR in caller's frame, not current frame for V.4\n\nFrom-SVN: r10154", "tree": {"sha": "9ef079e9848c3afc594121b8934c7771a81251df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ef079e9848c3afc594121b8934c7771a81251df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5eb387b858bbec655fa5faa258af1e0451ca796e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5eb387b858bbec655fa5faa258af1e0451ca796e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5eb387b858bbec655fa5faa258af1e0451ca796e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5eb387b858bbec655fa5faa258af1e0451ca796e/comments", "author": null, "committer": null, "parents": [{"sha": "abeeaf0fe808966cddff734553d23476b800db87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abeeaf0fe808966cddff734553d23476b800db87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abeeaf0fe808966cddff734553d23476b800db87"}], "stats": {"total": 347, "additions": 254, "deletions": 93}, "files": [{"sha": "38674dd723481e163f64f86dd70a9382fab30b1c", "filename": "gcc/config/rs6000/eabi.asm", "status": "modified", "additions": 252, "deletions": 73, "changes": 325, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb387b858bbec655fa5faa258af1e0451ca796e/gcc%2Fconfig%2Frs6000%2Feabi.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb387b858bbec655fa5faa258af1e0451ca796e/gcc%2Fconfig%2Frs6000%2Feabi.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Feabi.asm?ref=5eb387b858bbec655fa5faa258af1e0451ca796e", "patch": "@@ -110,91 +110,270 @@ __eabi:\tmflr\t0\n # Called with r11 pointing to the stack header word of the caller of the\n # function, just beyond the end of the floating point save area.\n \n-\t.globl\t_savefpr_14_l\n-\t.globl\t_savefpr_15_l\n-\t.globl\t_savefpr_16_l\n-\t.globl\t_savefpr_17_l\n-\t.globl\t_savefpr_18_l\n-\t.globl\t_savefpr_19_l\n-\t.globl\t_savefpr_20_l\n-\t.globl\t_savefpr_21_l\n-\t.globl\t_savefpr_22_l\n-\t.globl\t_savefpr_23_l\n-\t.globl\t_savefpr_24_l\n-\t.globl\t_savefpr_25_l\n-\t.globl\t_savefpr_26_l\n-\t.globl\t_savefpr_27_l\n-\t.globl\t_savefpr_28_l\n-\t.globl\t_savefpr_29_l\n-\t.globl\t_savefpr_30_l\n-\t.globl\t_savefpr_31_l\n+\t.globl\t_savefpr_14\n+\t.globl\t_savefpr_15\n+\t.globl\t_savefpr_16\n+\t.globl\t_savefpr_17\n+\t.globl\t_savefpr_18\n+\t.globl\t_savefpr_19\n+\t.globl\t_savefpr_20\n+\t.globl\t_savefpr_21\n+\t.globl\t_savefpr_22\n+\t.globl\t_savefpr_23\n+\t.globl\t_savefpr_24\n+\t.globl\t_savefpr_25\n+\t.globl\t_savefpr_26\n+\t.globl\t_savefpr_27\n+\t.globl\t_savefpr_28\n+\t.globl\t_savefpr_29\n+\t.globl\t_savefpr_30\n+\t.globl\t_savefpr_31\n \n \t\t.long\t0x00400000\t# traceback tag\n-_savefpr_14_l:\tstfd\t14,-144(11)\t# save fp registers\n-_savefpr_15_l:  stfd\t15,-136(11)\n-_savefpr_16_l:  stfd\t16,-128(11)\n-_savefpr_17_l:  stfd\t17,-120(11)\n-_savefpr_18_l:  stfd\t18,-112(11)\n-_savefpr_19_l:  stfd\t19,-104(11)\n-_savefpr_20_l:  stfd\t20,-96(11)\n-_savefpr_21_l:  stfd\t21,-88(11)\n-_savefpr_22_l:  stfd\t22,-80(11)\n-_savefpr_23_l:  stfd\t23,-72(11)\n-_savefpr_24_l:  stfd\t24,-64(11)\n-_savefpr_25_l:  stfd\t25,-56(11)\n-_savefpr_26_l:  stfd\t26,-48(11)\n-_savefpr_27_l:  stfd\t27,-40(11)\n-_savefpr_28_l:  stfd\t28,-32(11)\n-_savefpr_29_l:  stfd\t29,-24(11)\n-_savefpr_30_l:  stfd\t30,-16(11)\n-_savefpr_31_l:  stfd\t31,-8(11)\n-\t\tstw\t0,4(11)\t\t# save return address also\n+_savefpr_14:\tstfd\t14,-144(11)\t# save fp registers\n+_savefpr_15:\tstfd\t15,-136(11)\n+_savefpr_16:\tstfd\t16,-128(11)\n+_savefpr_17:\tstfd\t17,-120(11)\n+_savefpr_18:\tstfd\t18,-112(11)\n+_savefpr_19:\tstfd\t19,-104(11)\n+_savefpr_20:\tstfd\t20,-96(11)\n+_savefpr_21:\tstfd\t21,-88(11)\n+_savefpr_22:\tstfd\t22,-80(11)\n+_savefpr_23:\tstfd\t23,-72(11)\n+_savefpr_24:\tstfd\t24,-64(11)\n+_savefpr_25:\tstfd\t25,-56(11)\n+_savefpr_26:\tstfd\t26,-48(11)\n+_savefpr_27:\tstfd\t27,-40(11)\n+_savefpr_28:\tstfd\t28,-32(11)\n+_savefpr_29:\tstfd\t29,-24(11)\n+_savefpr_30:\tstfd\t30,-16(11)\n+_savefpr_31:\tstfd\t31,-8(11)\n \t\tblr\n \n+# Routines for saving integer registers, called by the compiler.\n+# Called with r11 pointing to the stack header word of the caller of the\n+# function, just beyond the end of the integer save area.\n+\n+\t.globl\t_savegpr_14\n+\t.globl\t_savegpr_15\n+\t.globl\t_savegpr_16\n+\t.globl\t_savegpr_17\n+\t.globl\t_savegpr_18\n+\t.globl\t_savegpr_19\n+\t.globl\t_savegpr_20\n+\t.globl\t_savegpr_21\n+\t.globl\t_savegpr_22\n+\t.globl\t_savegpr_23\n+\t.globl\t_savegpr_24\n+\t.globl\t_savegpr_25\n+\t.globl\t_savegpr_26\n+\t.globl\t_savegpr_27\n+\t.globl\t_savegpr_28\n+\t.globl\t_savegpr_29\n+\t.globl\t_savegpr_30\n+\t.globl\t_savegpr_31\n+\n+\t\t.long\t0x00400000\t# traceback tag\n+_savegpr_14:\tstw\t14,-72(11)\t# save gp registers\n+_savegpr_15:\tstw\t15,-68(11)\n+_savegpr_16:\tstw\t16,-64(11)\n+_savegpr_17:\tstw\t17,-60(11)\n+_savegpr_18:\tstw\t18,-56(11)\n+_savegpr_19:\tstw\t19,-52(11)\n+_savegpr_20:\tstw\t20,-48(11)\n+_savegpr_21:\tstw\t21,-44(11)\n+_savegpr_22:\tstw\t22,-40(11)\n+_savegpr_23:\tstw\t23,-36(11)\n+_savegpr_24:\tstw\t24,-32(11)\n+_savegpr_25:\tstw\t25,-28(11)\n+_savegpr_26:\tstw\t26,-24(11)\n+_savegpr_27:\tstw\t27,-20(11)\n+_savegpr_28:\tstw\t28,-16(11)\n+_savegpr_29:\tstw\t29,-12(11)\n+_savegpr_30:\tstw\t30,-8(11)\n+_savegpr_31:\tstw\t31,-4(11)\n+\t\tblr\n \n # Routines for restoring floating point registers, called by the compiler.\n # Called with r11 pointing to the stack header word of the caller of the\n # function, just beyond the end of the floating point save area.\n \n-\t.globl\t_restfpr_14_l\n-\t.globl\t_restfpr_15_l\n-\t.globl\t_restfpr_16_l\n-\t.globl\t_restfpr_17_l\n-\t.globl\t_restfpr_18_l\n-\t.globl\t_restfpr_19_l\n-\t.globl\t_restfpr_20_l\n-\t.globl\t_restfpr_21_l\n-\t.globl\t_restfpr_22_l\n-\t.globl\t_restfpr_23_l\n-\t.globl\t_restfpr_24_l\n-\t.globl\t_restfpr_25_l\n-\t.globl\t_restfpr_26_l\n-\t.globl\t_restfpr_27_l\n-\t.globl\t_restfpr_28_l\n-\t.globl\t_restfpr_29_l\n-\t.globl\t_restfpr_30_l\n-\t.globl\t_restfpr_31_l\n+\t.globl\t_restfpr_14\n+\t.globl\t_restfpr_15\n+\t.globl\t_restfpr_16\n+\t.globl\t_restfpr_17\n+\t.globl\t_restfpr_18\n+\t.globl\t_restfpr_19\n+\t.globl\t_restfpr_20\n+\t.globl\t_restfpr_21\n+\t.globl\t_restfpr_22\n+\t.globl\t_restfpr_23\n+\t.globl\t_restfpr_24\n+\t.globl\t_restfpr_25\n+\t.globl\t_restfpr_26\n+\t.globl\t_restfpr_27\n+\t.globl\t_restfpr_28\n+\t.globl\t_restfpr_29\n+\t.globl\t_restfpr_30\n+\t.globl\t_restfpr_31\n+\n+\t\t.long\t0x00600000\t# traceback tag\n+_restfpr_14:\tlfd\t14,-144(11)\t# restore fp registers\n+_restfpr_15:\tlfd\t15,-136(11)\n+_restfpr_16:\tlfd\t16,-128(11)\n+_restfpr_17:\tlfd\t17,-120(11)\n+_restfpr_18:\tlfd\t18,-112(11)\n+_restfpr_19:\tlfd\t19,-104(11)\n+_restfpr_20:\tlfd\t20,-96(11)\n+_restfpr_21:\tlfd\t21,-88(11)\n+_restfpr_22:\tlfd\t22,-80(11)\n+_restfpr_23:\tlfd\t23,-72(11)\n+_restfpr_24:\tlfd\t24,-64(11)\n+_restfpr_25:\tlfd\t25,-56(11)\n+_restfpr_26:\tlfd\t26,-48(11)\n+_restfpr_27:\tlfd\t27,-40(11)\n+_restfpr_28:\tlfd\t28,-32(11)\n+_restfpr_29:\tlfd\t29,-24(11)\n+_restfpr_30:\tlfd\t30,-16(11)\n+_restfpr_31:\tlfd\t31,-8(11)\n+\t\tblr\n+\n+# Routines for restoring integer registers, called by the compiler.\n+# Called with r11 pointing to the stack header word of the caller of the\n+# function, just beyond the end of the integer restore area.\n+\n+\t.globl\t_restgpr_14\n+\t.globl\t_restgpr_15\n+\t.globl\t_restgpr_16\n+\t.globl\t_restgpr_17\n+\t.globl\t_restgpr_18\n+\t.globl\t_restgpr_19\n+\t.globl\t_restgpr_20\n+\t.globl\t_restgpr_21\n+\t.globl\t_restgpr_22\n+\t.globl\t_restgpr_23\n+\t.globl\t_restgpr_24\n+\t.globl\t_restgpr_25\n+\t.globl\t_restgpr_26\n+\t.globl\t_restgpr_27\n+\t.globl\t_restgpr_28\n+\t.globl\t_restgpr_29\n+\t.globl\t_restgpr_30\n+\t.globl\t_restgpr_31\n \n \t\t.long\t0x00600000\t# traceback tag\n-_restfpr_14_l:\tlfd\t14,-144(11)\t# restore fp registers\n-_restfpr_15_l:  lfd\t15,-136(11)\n-_restfpr_16_l:  lfd\t16,-128(11)\n-_restfpr_17_l:  lfd\t17,-120(11)\n-_restfpr_18_l:  lfd\t18,-112(11)\n-_restfpr_19_l:  lfd\t19,-104(11)\n-_restfpr_20_l:  lfd\t20,-96(11)\n-_restfpr_21_l:  lfd\t21,-88(11)\n-_restfpr_22_l:  lfd\t22,-80(11)\n-_restfpr_23_l:  lfd\t23,-72(11)\n-_restfpr_24_l:  lfd\t24,-64(11)\n-_restfpr_25_l:  lfd\t25,-56(11)\n-_restfpr_26_l:  lfd\t26,-48(11)\n-_restfpr_27_l:  lfd\t27,-40(11)\n-_restfpr_28_l:  lfd\t28,-32(11)\n-_restfpr_29_l:  lfd\t29,-24(11)\n-_restfpr_30_l:  lfd\t30,-16(11)\n-_restfpr_31_l:  lwz\t0,4(11)\t\t# caller's caller address\n+_restgpr_14:\tlwz\t14,-72(11)\t# rest gp registers\n+_restgpr_15:\tlwz\t15,-68(11)\n+_restgpr_16:\tlwz\t16,-64(11)\n+_restgpr_17:\tlwz\t17,-60(11)\n+_restgpr_18:\tlwz\t18,-56(11)\n+_restgpr_19:\tlwz\t19,-52(11)\n+_restgpr_20:\tlwz\t20,-48(11)\n+_restgpr_21:\tlwz\t21,-44(11)\n+_restgpr_22:\tlwz\t22,-40(11)\n+_restgpr_23:\tlwz\t23,-36(11)\n+_restgpr_24:\tlwz\t24,-32(11)\n+_restgpr_25:\tlwz\t25,-28(11)\n+_restgpr_26:\tlwz\t26,-24(11)\n+_restgpr_27:\tlwz\t27,-20(11)\n+_restgpr_28:\tlwz\t28,-16(11)\n+_restgpr_29:\tlwz\t29,-12(11)\n+_restgpr_30:\tlwz\t30,-8(11)\n+_restgpr_31:\tlwz\t31,-4(11)\n+\t\tblr\n+\n+# Routines for restoring floating point registers, called by the compiler.\n+# Called with r11 pointing to the stack header word of the caller of the\n+# function, just beyond the end of the floating point save area.\n+# In addition to restoring the fp registers, it will return to the caller's\n+# caller\n+\n+\t.globl\t_restfpr_14_x\n+\t.globl\t_restfpr_15_x\n+\t.globl\t_restfpr_16_x\n+\t.globl\t_restfpr_17_x\n+\t.globl\t_restfpr_18_x\n+\t.globl\t_restfpr_19_x\n+\t.globl\t_restfpr_20_x\n+\t.globl\t_restfpr_21_x\n+\t.globl\t_restfpr_22_x\n+\t.globl\t_restfpr_23_x\n+\t.globl\t_restfpr_24_x\n+\t.globl\t_restfpr_25_x\n+\t.globl\t_restfpr_26_x\n+\t.globl\t_restfpr_27_x\n+\t.globl\t_restfpr_28_x\n+\t.globl\t_restfpr_29_x\n+\t.globl\t_restfpr_30_x\n+\t.globl\t_restfpr_31_x\n+\n+\t\t.long\t0x00600000\t# traceback tag\n+_restfpr_14_x:\tlfd\t14,-144(11)\t# restore fp registers\n+_restfpr_15_x:\tlfd\t15,-136(11)\n+_restfpr_16_x:\tlfd\t16,-128(11)\n+_restfpr_17_x:\tlfd\t17,-120(11)\n+_restfpr_18_x:\tlfd\t18,-112(11)\n+_restfpr_19_x:\tlfd\t19,-104(11)\n+_restfpr_20_x:\tlfd\t20,-96(11)\n+_restfpr_21_x:\tlfd\t21,-88(11)\n+_restfpr_22_x:\tlfd\t22,-80(11)\n+_restfpr_23_x:\tlfd\t23,-72(11)\n+_restfpr_24_x:\tlfd\t24,-64(11)\n+_restfpr_25_x:\tlfd\t25,-56(11)\n+_restfpr_26_x:\tlfd\t26,-48(11)\n+_restfpr_27_x:\tlfd\t27,-40(11)\n+_restfpr_28_x:\tlfd\t28,-32(11)\n+_restfpr_29_x:\tlfd\t29,-24(11)\n+_restfpr_30_x:\tlfd\t30,-16(11)\n+_restfpr_31_x:\tlwz\t0,4(11)\n \t\tlfd\t31,-8(11)\n \t\tmtlr\t0\n \t\tmr\t1,11\n \t\tblr\n+\n+# Routines for restoring integer registers, called by the compiler.\n+# Called with r11 pointing to the stack header word of the caller of the\n+# function, just beyond the end of the integer restore area.\n+\n+\t.globl\t_restgpr_14_x\n+\t.globl\t_restgpr_15_x\n+\t.globl\t_restgpr_16_x\n+\t.globl\t_restgpr_17_x\n+\t.globl\t_restgpr_18_x\n+\t.globl\t_restgpr_19_x\n+\t.globl\t_restgpr_20_x\n+\t.globl\t_restgpr_21_x\n+\t.globl\t_restgpr_22_x\n+\t.globl\t_restgpr_23_x\n+\t.globl\t_restgpr_24_x\n+\t.globl\t_restgpr_25_x\n+\t.globl\t_restgpr_26_x\n+\t.globl\t_restgpr_27_x\n+\t.globl\t_restgpr_28_x\n+\t.globl\t_restgpr_29_x\n+\t.globl\t_restgpr_30_x\n+\t.globl\t_restgpr_31_x\n+\n+\t\t.long\t0x00600000\t# traceback tag\n+_restgpr_14_x:\tlwz\t14,-72(11)\t# rest gp registers\n+_restgpr_15_x:\tlwz\t15,-68(11)\n+_restgpr_16_x:\tlwz\t16,-64(11)\n+_restgpr_17_x:\tlwz\t17,-60(11)\n+_restgpr_18_x:\tlwz\t18,-56(11)\n+_restgpr_19_x:\tlwz\t19,-52(11)\n+_restgpr_20_x:\tlwz\t20,-48(11)\n+_restgpr_21_x:\tlwz\t21,-44(11)\n+_restgpr_22_x:\tlwz\t22,-40(11)\n+_restgpr_23_x:\tlwz\t23,-36(11)\n+_restgpr_24_x:\tlwz\t24,-32(11)\n+_restgpr_25_x:\tlwz\t25,-28(11)\n+_restgpr_26_x:\tlwz\t26,-24(11)\n+_restgpr_27_x:\tlwz\t27,-20(11)\n+_restgpr_28_x:\tlwz\t28,-16(11)\n+_restgpr_29_x:\tlwz\t29,-12(11)\n+_restgpr_30_x:\tlwz\t30,-8(11)\n+_restgpr_31_x:\tlwz\t0,4(11)\n+\t\tlwz\t31,-4(11)\n+\t\tmtlr\t0\n+\t\tmr\t1,11\n+\t\tblr"}, {"sha": "bb87a7865779f144732052edbd02e9f910d52c0e", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb387b858bbec655fa5faa258af1e0451ca796e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb387b858bbec655fa5faa258af1e0451ca796e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=5eb387b858bbec655fa5faa258af1e0451ca796e", "patch": "@@ -2166,7 +2166,7 @@ rs6000_makes_calls ()\n \tSP---->\t+---------------------------------------+\n \t\t| back chain to caller\t\t\t| 0\n \t\t+---------------------------------------+\n-\t\t| saved LR\t\t\t\t| 4\n+\t\t| caller's saved LR\t\t\t| 4\n \t\t+---------------------------------------+\n \t\t| Parameter save area (P)\t\t| 8\n \t\t+---------------------------------------+\n@@ -2274,7 +2274,7 @@ rs6000_stack_info ()\n   if (v4_call_p)\n     {\n       info_ptr->cr_save_offset = info_ptr->gp_save_offset - reg_size;\n-      info_ptr->lr_save_offset = - info_ptr->total_size + reg_size;\n+      info_ptr->lr_save_offset = reg_size;\n     }\n   else\n     {"}, {"sha": "cda871bd16ec706298f2ae222d33d18c2a39f7e8", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb387b858bbec655fa5faa258af1e0451ca796e/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb387b858bbec655fa5faa258af1e0451ca796e/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=5eb387b858bbec655fa5faa258af1e0451ca796e", "patch": "@@ -5251,22 +5251,9 @@\n { rtx chain = gen_reg_rtx (Pmode);\n   rtx stack_bot = gen_rtx (MEM, Pmode, stack_pointer_rtx);\n   rtx neg_op0;\n-  rtx lr_addr = NULL_RTX;\n-  rtx lr = NULL_RTX;\n \n   emit_move_insn (chain, stack_bot);\n \n-#ifdef TARGET_V4_CALLS\n-  if (TARGET_V4_CALLS)\n-    {\n-      lr = gen_reg_rtx (Pmode);\n-      lr_addr = gen_rtx (MEM, Pmode, gen_rtx (PLUS, Pmode,\n-\t\t\t\t\t      stack_pointer_rtx,\n-\t\t\t\t\t      GEN_INT (4)));\n-      emit_move_insn (lr, lr_addr);\n-    }\n-#endif\n-\n   if (GET_CODE (operands[0]) != CONST_INT\n       || INTVAL (operands[0]) < -32767\n       || INTVAL (operands[0]) > 32768)\n@@ -5285,11 +5272,6 @@\n   else\n     emit_insn (gen_movsi_update (stack_pointer_rtx, stack_pointer_rtx, neg_op0, chain));\n \n-#ifdef TARGET_V4_CALLS\n-  if (TARGET_V4_CALLS)\n-    emit_move_insn (lr_addr, lr);\n-#endif\n-\n   DONE;\n }\")\n "}]}