{"sha": "117c64266405e244da4dae3ae7b60905af63b955", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE3YzY0MjY2NDA1ZTI0NGRhNGRhZTNhZTdiNjA5MDVhZjYzYjk1NQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-06-11T13:50:34Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-06-11T13:52:23Z"}, "message": "c++: Add C++23 consteval if support - P1938R3 [PR100974]\n\nThe following patch implements consteval if support.\nThere is a new IF_STMT_CONSTEVAL_P flag on IF_STMT and IF_COND is\nboolean_false_node to match the non-manifestly constant evaluation\nbehavior, while constexpr evaluation special-cases it.  Perhaps cleaner\nwould be to set the condition to __builtin_is_constant_evaluated () call\nbut we need the IF_STMT_CONSTEVAL_P flag anyway and the IL would be larger.\n\nAnd I'm not changing the libstdc++ side, where perhaps we could change\nstd::is_constant_evaluated definition for\n #ifdef __cpp_if_consteval\ncase to if consteval { return true; } else { return false; }\nbut we need to keep it defined to __builtin_is_constant_evaluated ()\nfor C++20 or older.\n\n2021-06-11  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/100974\ngcc/c-family/\n\t* c-cppbuiltin.c (c_cpp_builtins): Predefine __cpp_if_consteval for\n\t-std=c++2b for P1938R3 consteval if support.\ngcc/cp/\n\t* cp-tree.h (struct saved_scope): Add consteval_if_p\n\tmember.  Formatting fix for the discarded_stmt comment.\n\t(in_consteval_if_p, IF_STMT_CONSTEVAL_P): Define.\n\t* parser.c (cp_parser_lambda_expression): Temporarily disable\n\tin_consteval_if_p when parsing lambda body.\n\t(cp_parser_selection_statement): Parse consteval if.\n\t* decl.c (struct named_label_entry): Add in_consteval_if member.\n\t(level_for_consteval_if): New function.\n\t(poplevel_named_label_1, check_previous_goto_1, check_goto): Handle\n\tconsteval if.\n\t* constexpr.c (cxx_eval_builtin_function_call): Clarify in comment\n\twhy CP_BUILT_IN_IS_CONSTANT_EVALUATED needs to *non_constant_p\n\tfor !ctx->manifestly_const_eval.\n\t(cxx_eval_conditional_expression): For IF_STMT_CONSTEVAL_P evaluate\n\tcondition as if it was __builtin_is_constant_evaluated call.\n\t(potential_constant_expression_1): For IF_STMT_CONSTEVAL_P always\n\trecurse on both branches.\n\t* cp-gimplify.c (genericize_if_stmt): Genericize IF_STMT_CONSTEVAL_P\n\tas the else branch.\n\t* pt.c (tsubst_expr) <case IF_STMT>: Copy IF_STMT_CONSTEVAL_P.\n\tTemporarily set in_consteval_if_p when recursing on\n\tIF_STMT_CONSTEVAL_P then branch.\n\t(tsubst_lambda_expr): Temporarily disable\n\tin_consteval_if_p when instantiating lambda body.\n\t* call.c (immediate_invocation_p): Return false when\n\tin_consteval_if_p.\ngcc/testsuite/\n\t* g++.dg/cpp23/consteval-if1.C: New test.\n\t* g++.dg/cpp23/consteval-if2.C: New test.\n\t* g++.dg/cpp23/consteval-if3.C: New test.\n\t* g++.dg/cpp23/consteval-if4.C: New test.\n\t* g++.dg/cpp23/consteval-if5.C: New test.\n\t* g++.dg/cpp23/consteval-if6.C: New test.\n\t* g++.dg/cpp23/consteval-if7.C: New test.\n\t* g++.dg/cpp23/consteval-if8.C: New test.\n\t* g++.dg/cpp23/consteval-if9.C: New test.\n\t* g++.dg/cpp23/consteval-if10.C: New test.\n\t* g++.dg/cpp23/feat-cxx2b.C: Add __cpp_if_consteval tests.", "tree": {"sha": "54db8563f16d0bb55f7d4b90929984386071d3ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54db8563f16d0bb55f7d4b90929984386071d3ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/117c64266405e244da4dae3ae7b60905af63b955", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/117c64266405e244da4dae3ae7b60905af63b955", "html_url": "https://github.com/Rust-GCC/gccrs/commit/117c64266405e244da4dae3ae7b60905af63b955", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/117c64266405e244da4dae3ae7b60905af63b955/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d20ec97475b1102d6ca005ad165056d34615a3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d20ec97475b1102d6ca005ad165056d34615a3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d20ec97475b1102d6ca005ad165056d34615a3d"}], "stats": {"total": 660, "additions": 650, "deletions": 10}, "files": [{"sha": "f79f939bd10f025bf9cad2a015dd0fa67af0d103", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/117c64266405e244da4dae3ae7b60905af63b955/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/117c64266405e244da4dae3ae7b60905af63b955/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=117c64266405e244da4dae3ae7b60905af63b955", "patch": "@@ -1029,6 +1029,7 @@ c_cpp_builtins (cpp_reader *pfile)\n \t{\n \t  /* Set feature test macros for C++23.  */\n \t  cpp_define (pfile, \"__cpp_size_t_suffix=202011L\");\n+\t  cpp_define (pfile, \"__cpp_if_consteval=202106L\");\n \t}\n       if (flag_concepts)\n         {"}, {"sha": "9f03534c20c7dff4ab56b30345862e0a1f2b2142", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/117c64266405e244da4dae3ae7b60905af63b955/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/117c64266405e244da4dae3ae7b60905af63b955/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=117c64266405e244da4dae3ae7b60905af63b955", "patch": "@@ -8840,6 +8840,7 @@ immediate_invocation_p (tree fn, int nargs)\n \t      || !DECL_IMMEDIATE_FUNCTION_P (current_function_decl))\n \t  && (current_binding_level->kind != sk_function_parms\n \t      || !current_binding_level->immediate_fn_ctx_p)\n+\t  && !in_consteval_if_p\n \t  /* As an exception, we defer std::source_location::current ()\n \t     invocations until genericization because LWG3396 mandates\n \t     special behavior for it.  */"}, {"sha": "4f1c3d661296eaa70d35b2cf7e070e41698ff283", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/117c64266405e244da4dae3ae7b60905af63b955/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/117c64266405e244da4dae3ae7b60905af63b955/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=117c64266405e244da4dae3ae7b60905af63b955", "patch": "@@ -1315,7 +1315,10 @@ cxx_eval_builtin_function_call (const constexpr_ctx *ctx, tree t, tree fun,\n     }\n \n   /* For __builtin_is_constant_evaluated, defer it if not\n-     ctx->manifestly_const_eval, otherwise fold it to true.  */\n+     ctx->manifestly_const_eval (as sometimes we try to constant evaluate\n+     without manifestly_const_eval even expressions or parts thereof which\n+     will later be manifestly const_eval evaluated), otherwise fold it to\n+     true.  */\n   if (fndecl_built_in_p (fun, CP_BUILT_IN_IS_CONSTANT_EVALUATED,\n \t\t\t BUILT_IN_FRONTEND))\n     {\n@@ -3298,6 +3301,22 @@ cxx_eval_conditional_expression (const constexpr_ctx *ctx, tree t,\n \t\t\t\t\t   /*lval*/false,\n \t\t\t\t\t   non_constant_p, overflow_p);\n   VERIFY_CONSTANT (val);\n+  if (TREE_CODE (t) == IF_STMT && IF_STMT_CONSTEVAL_P (t))\n+    {\n+      /* Evaluate the condition as if it was\n+\t if (__builtin_is_constant_evaluated ()), i.e. defer it if not\n+\t ctx->manifestly_const_eval (as sometimes we try to constant evaluate\n+\t without manifestly_const_eval even expressions or parts thereof which\n+\t will later be manifestly const_eval evaluated), otherwise fold it to\n+\t true.  */\n+      if (ctx->manifestly_const_eval)\n+\tval = boolean_true_node;\n+      else\n+\t{\n+\t  *non_constant_p = true;\n+\t  return t;\n+\t}\n+    }\n   /* Don't VERIFY_CONSTANT the other operands.  */\n   if (integer_zerop (val))\n     val = TREE_OPERAND (t, 2);\n@@ -8809,10 +8828,17 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n \treturn false;\n       if (!processing_template_decl)\n \ttmp = cxx_eval_outermost_constant_expr (tmp, true);\n-      if (integer_zerop (tmp))\n-\treturn RECUR (TREE_OPERAND (t, 2), want_rval);\n-      else if (TREE_CODE (tmp) == INTEGER_CST)\n-\treturn RECUR (TREE_OPERAND (t, 1), want_rval);\n+      /* potential_constant_expression* isn't told if it is called for\n+\t manifestly_const_eval or not, so for consteval if always\n+\t process both branches as if the condition is not a known\n+\t constant.  */\n+      if (TREE_CODE (t) != IF_STMT || !IF_STMT_CONSTEVAL_P (t))\n+\t{\n+\t  if (integer_zerop (tmp))\n+\t    return RECUR (TREE_OPERAND (t, 2), want_rval);\n+\t  else if (TREE_CODE (tmp) == INTEGER_CST)\n+\t    return RECUR (TREE_OPERAND (t, 1), want_rval);\n+\t}\n       tmp = *jump_target;\n       for (i = 1; i < 3; ++i)\n \t{"}, {"sha": "96d91b6ef2fbf7cdd20853b09eef214b8c4e12f5", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/117c64266405e244da4dae3ae7b60905af63b955/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/117c64266405e244da4dae3ae7b60905af63b955/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=117c64266405e244da4dae3ae7b60905af63b955", "patch": "@@ -161,7 +161,13 @@ genericize_if_stmt (tree *stmt_p)\n   if (!else_)\n     else_ = build_empty_stmt (locus);\n \n-  if (integer_nonzerop (cond) && !TREE_SIDE_EFFECTS (else_))\n+  /* consteval if has been verified not to have the then_/else_ blocks\n+     entered by gotos/case labels from elsewhere, and as then_ block\n+     can contain unfolded immediate function calls, we have to discard\n+     the then_ block regardless of whether else_ has side-effects or not.  */\n+  if (IF_STMT_CONSTEVAL_P (stmt))\n+    stmt = else_;\n+  else if (integer_nonzerop (cond) && !TREE_SIDE_EFFECTS (else_))\n     stmt = then_;\n   else if (integer_zerop (cond) && !TREE_SIDE_EFFECTS (then_))\n     stmt = else_;"}, {"sha": "36f99ccf189718759e73b897562f26fb56cb3f75", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/117c64266405e244da4dae3ae7b60905af63b955/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/117c64266405e244da4dae3ae7b60905af63b955/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=117c64266405e244da4dae3ae7b60905af63b955", "patch": "@@ -478,6 +478,7 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n       AGGR_INIT_ZERO_FIRST (in AGGR_INIT_EXPR)\n       CONSTRUCTOR_MUTABLE_POISON (in CONSTRUCTOR)\n       OVL_HIDDEN_P (in OVERLOAD)\n+      IF_STMT_CONSTEVAL_P (in IF_STMT)\n       SWITCH_STMT_NO_BREAK_P (in SWITCH_STMT)\n       LAMBDA_EXPR_CAPTURE_OPTIMIZED (in LAMBDA_EXPR)\n       IMPLICIT_CONV_EXPR_BRACED_INIT (in IMPLICIT_CONV_EXPR)\n@@ -1813,9 +1814,12 @@ struct GTY(()) saved_scope {\n   BOOL_BITFIELD x_processing_explicit_instantiation : 1;\n   BOOL_BITFIELD need_pop_function_context : 1;\n \n-/* Nonzero if we are parsing the discarded statement of a constexpr\n-   if-statement.  */\n+  /* Nonzero if we are parsing the discarded statement of a constexpr\n+     if-statement.  */\n   BOOL_BITFIELD discarded_stmt : 1;\n+  /* Nonzero if we are parsing or instantiating the compound-statement\n+     of consteval if statement.  */\n+  BOOL_BITFIELD consteval_if_p : 1;\n \n   int unevaluated_operand;\n   int inhibit_evaluation_warnings;\n@@ -1879,6 +1883,7 @@ extern GTY(()) struct saved_scope *scope_chain;\n #define processing_explicit_instantiation scope_chain->x_processing_explicit_instantiation\n \n #define in_discarded_stmt scope_chain->discarded_stmt\n+#define in_consteval_if_p scope_chain->consteval_if_p\n \n #define current_ref_temp_count scope_chain->ref_temp_count\n \n@@ -5211,6 +5216,7 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n #define ELSE_CLAUSE(NODE)\tTREE_OPERAND (IF_STMT_CHECK (NODE), 2)\n #define IF_SCOPE(NODE)\t\tTREE_OPERAND (IF_STMT_CHECK (NODE), 3)\n #define IF_STMT_CONSTEXPR_P(NODE) TREE_LANG_FLAG_0 (IF_STMT_CHECK (NODE))\n+#define IF_STMT_CONSTEVAL_P(NODE) TREE_LANG_FLAG_2 (IF_STMT_CHECK (NODE))\n \n /* Like PACK_EXPANSION_EXTRA_ARGS, for constexpr if.  IF_SCOPE is used while\n    building an IF_STMT; IF_STMT_EXTRA_ARGS is used after it is complete.  */"}, {"sha": "da254d8bcc253359d46d8671cf191f82754ef9da", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/117c64266405e244da4dae3ae7b60905af63b955/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/117c64266405e244da4dae3ae7b60905af63b955/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=117c64266405e244da4dae3ae7b60905af63b955", "patch": "@@ -222,6 +222,7 @@ struct GTY((for_user)) named_label_entry {\n   bool in_omp_scope;\n   bool in_transaction_scope;\n   bool in_constexpr_if;\n+  bool in_consteval_if;\n };\n \n #define named_labels cp_function_chain->x_named_labels\n@@ -491,6 +492,16 @@ level_for_constexpr_if (cp_binding_level *b)\n \t  && IF_STMT_CONSTEXPR_P (b->this_entity));\n }\n \n+/* True if B is the level for the condition of a consteval if.  */\n+\n+static bool\n+level_for_consteval_if (cp_binding_level *b)\n+{\n+  return (b->kind == sk_cond && b->this_entity\n+\t  && TREE_CODE (b->this_entity) == IF_STMT\n+\t  && IF_STMT_CONSTEVAL_P (b->this_entity));\n+}\n+\n /* Update data for defined and undefined labels when leaving a scope.  */\n \n int\n@@ -530,6 +541,8 @@ poplevel_named_label_1 (named_label_entry **slot, cp_binding_level *bl)\n \tcase sk_block:\n \t  if (level_for_constexpr_if (bl->level_chain))\n \t    ent->in_constexpr_if = true;\n+\t  else if (level_for_consteval_if (bl->level_chain))\n+\t    ent->in_consteval_if = true;\n \t  break;\n \tdefault:\n \t  break;\n@@ -3391,6 +3404,7 @@ check_previous_goto_1 (tree decl, cp_binding_level* level, tree names,\n   bool complained = false;\n   int identified = 0;\n   bool saw_eh = false, saw_omp = false, saw_tm = false, saw_cxif = false;\n+  bool saw_ceif = false;\n \n   if (exited_omp)\n     {\n@@ -3470,6 +3484,12 @@ check_previous_goto_1 (tree decl, cp_binding_level* level, tree names,\n \t      loc = EXPR_LOCATION (b->level_chain->this_entity);\n \t      saw_cxif = true;\n \t    }\n+\t  else if (!saw_ceif && level_for_consteval_if (b->level_chain))\n+\t    {\n+\t      inf = G_(\"  enters %<consteval if%> statement\");\n+\t      loc = EXPR_LOCATION (b->level_chain->this_entity);\n+\t      saw_ceif = true;\n+\t    }\n \t  break;\n \n \tdefault:\n@@ -3551,12 +3571,13 @@ check_goto (tree decl)\n   unsigned ix;\n \n   if (ent->in_try_scope || ent->in_catch_scope || ent->in_transaction_scope\n-      || ent->in_constexpr_if\n+      || ent->in_constexpr_if || ent->in_consteval_if\n       || ent->in_omp_scope || !vec_safe_is_empty (ent->bad_decls))\n     {\n       diagnostic_t diag_kind = DK_PERMERROR;\n       if (ent->in_try_scope || ent->in_catch_scope || ent->in_constexpr_if\n-\t  || ent->in_transaction_scope || ent->in_omp_scope)\n+\t  || ent->in_consteval_if || ent->in_transaction_scope\n+\t  || ent->in_omp_scope)\n \tdiag_kind = DK_ERROR;\n       complained = identify_goto (decl, DECL_SOURCE_LOCATION (decl),\n \t\t\t\t  &input_location, diag_kind);\n@@ -3602,6 +3623,8 @@ check_goto (tree decl)\n \tinform (input_location, \"  enters synchronized or atomic statement\");\n       else if (ent->in_constexpr_if)\n \tinform (input_location, \"  enters %<constexpr if%> statement\");\n+      else if (ent->in_consteval_if)\n+\tinform (input_location, \"  enters %<consteval if%> statement\");\n     }\n \n   if (ent->in_omp_scope)"}, {"sha": "686f98bc4f1b11e1caf9398ac7b9962ce95d5904", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/117c64266405e244da4dae3ae7b60905af63b955/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/117c64266405e244da4dae3ae7b60905af63b955/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=117c64266405e244da4dae3ae7b60905af63b955", "patch": "@@ -10902,6 +10902,11 @@ cp_parser_lambda_expression (cp_parser* parser)\n     bool discarded = in_discarded_stmt;\n     in_discarded_stmt = 0;\n \n+    /* Similarly the body of a lambda in immediate function context is not\n+       in immediate function context.  */\n+    bool save_in_consteval_if_p = in_consteval_if_p;\n+    in_consteval_if_p = false;\n+\n     /* By virtue of defining a local class, a lambda expression has access to\n        the private variables of enclosing classes.  */\n \n@@ -10932,6 +10937,7 @@ cp_parser_lambda_expression (cp_parser* parser)\n \n     finish_struct (type, /*attributes=*/NULL_TREE);\n \n+    in_consteval_if_p = save_in_consteval_if_p;\n     in_discarded_stmt = discarded;\n \n     parser->num_template_parameter_lists = saved_num_template_parameter_lists;\n@@ -12324,6 +12330,102 @@ cp_parser_selection_statement (cp_parser* parser, bool *if_p,\n \t\t       \"%<if constexpr%> only available with \"\n \t\t       \"%<-std=c++17%> or %<-std=gnu++17%>\");\n \t  }\n+\tint ce = 0;\n+\tif (keyword == RID_IF && !cx)\n+\t  {\n+\t    if (cp_lexer_next_token_is_keyword (parser->lexer,\n+\t\t\t\t\t\tRID_CONSTEVAL))\n+\t      ce = 1;\n+\t    else if (cp_lexer_next_token_is (parser->lexer, CPP_NOT)\n+\t\t     && cp_lexer_nth_token_is_keyword (parser->lexer, 2,\n+\t\t\t\t\t\t       RID_CONSTEVAL))\n+\t      {\n+\t\tce = -1;\n+\t\tcp_lexer_consume_token (parser->lexer);\n+\t      }\n+\t  }\n+\tif (ce)\n+\t  {\n+\t    cp_token *tok = cp_lexer_consume_token (parser->lexer);\n+\t    if (cxx_dialect < cxx23)\n+\t      pedwarn (tok->location, OPT_Wc__23_extensions,\n+\t\t       \"%<if consteval%> only available with \"\n+\t\t       \"%<-std=c++2b%> or %<-std=gnu++2b%>\");\n+\n+\t    bool save_in_consteval_if_p = in_consteval_if_p;\n+\t    statement = begin_if_stmt ();\n+\t    IF_STMT_CONSTEVAL_P (statement) = true;\n+\t    condition = finish_if_stmt_cond (boolean_false_node, statement);\n+\n+\t    gcc_rich_location richloc = tok->location;\n+\t    bool non_compound_stmt_p = false;\n+\t    if (cp_lexer_next_token_is_not (parser->lexer, CPP_OPEN_BRACE))\n+\t      {\n+\t\tnon_compound_stmt_p = true;\n+\t\trichloc.add_fixit_insert_after (tok->location, \"{\");\n+\t      }\n+\n+\t    in_consteval_if_p |= ce > 0;\n+\t    cp_parser_implicitly_scoped_statement (parser, NULL, guard_tinfo);\n+\n+\t    if (non_compound_stmt_p)\n+\t      {\n+\t\tlocation_t before_loc\n+\t\t  = cp_lexer_peek_token (parser->lexer)->location;\n+\t\trichloc.add_fixit_insert_before (before_loc, \"}\");\n+\t\terror_at (&richloc,\n+\t\t\t  \"%<if consteval%> requires compound statement\");\n+\t\tnon_compound_stmt_p = false;\n+\t      }\n+\n+\t    finish_then_clause (statement);\n+\n+\t    /* If the next token is `else', parse the else-clause.  */\n+\t    if (cp_lexer_next_token_is_keyword (parser->lexer,\n+\t\t\t\t\t\tRID_ELSE))\n+\t      {\n+\t\tcp_token *else_tok = cp_lexer_peek_token (parser->lexer);\n+\t\tgcc_rich_location else_richloc = else_tok->location;\n+\t\tguard_tinfo = get_token_indent_info (else_tok);\n+\t\t/* Consume the `else' keyword.  */\n+\t\tcp_lexer_consume_token (parser->lexer);\n+\n+\t\tbegin_else_clause (statement);\n+\n+\t\tif (cp_lexer_next_token_is_not (parser->lexer, CPP_OPEN_BRACE))\n+\t\t  {\n+\t\t    non_compound_stmt_p = true;\n+\t\t    else_richloc.add_fixit_insert_after (else_tok->location,\n+\t\t\t\t\t\t\t \"{\");\n+\t\t  }\n+\n+\t\tin_consteval_if_p = save_in_consteval_if_p | (ce < 0);\n+\t\tcp_parser_implicitly_scoped_statement (parser, NULL,\n+\t\t\t\t\t\t       guard_tinfo);\n+\n+\t\tif (non_compound_stmt_p)\n+\t\t  {\n+\t\t    location_t before_loc\n+\t\t      = cp_lexer_peek_token (parser->lexer)->location;\n+\t\t    else_richloc.add_fixit_insert_before (before_loc, \"}\");\n+\t\t    error_at (&else_richloc,\n+\t\t\t      \"%<if consteval%> requires compound statement\");\n+\t\t  }\n+\n+\t\tfinish_else_clause (statement);\n+\t      }\n+\n+\t    in_consteval_if_p = save_in_consteval_if_p;\n+\t    if (ce < 0)\n+\t      {\n+\t\tstd::swap (THEN_CLAUSE (statement), ELSE_CLAUSE (statement));\n+\t\tif (THEN_CLAUSE (statement) == NULL_TREE)\n+\t\t  THEN_CLAUSE (statement) = build_empty_stmt (tok->location);\n+\t      }\n+\n+\t    finish_if_stmt (statement);\n+\t    return statement;\n+\t  }\n \n \t/* Look for the `('.  */\n \tmatching_parens parens;"}, {"sha": "b53df9e2ad636c3396eba0658156ba4e219a87f2", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/117c64266405e244da4dae3ae7b60905af63b955/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/117c64266405e244da4dae3ae7b60905af63b955/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=117c64266405e244da4dae3ae7b60905af63b955", "patch": "@@ -18413,6 +18413,7 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n     case IF_STMT:\n       stmt = begin_if_stmt ();\n       IF_STMT_CONSTEXPR_P (stmt) = IF_STMT_CONSTEXPR_P (t);\n+      IF_STMT_CONSTEVAL_P (stmt) = IF_STMT_CONSTEVAL_P (t);\n       if (IF_STMT_CONSTEXPR_P (t))\n \targs = add_extra_args (IF_STMT_EXTRA_ARGS (t), args);\n       tmp = RECUR (IF_COND (t));\n@@ -18433,6 +18434,13 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n \t}\n       if (IF_STMT_CONSTEXPR_P (t) && integer_zerop (tmp))\n \t/* Don't instantiate the THEN_CLAUSE. */;\n+      else if (IF_STMT_CONSTEVAL_P (t))\n+\t{\n+\t  bool save_in_consteval_if_p = in_consteval_if_p;\n+\t  in_consteval_if_p = true;\n+\t  RECUR (THEN_CLAUSE (t));\n+\t  in_consteval_if_p = save_in_consteval_if_p;\n+\t}\n       else\n \t{\n \t  tree folded = fold_non_dependent_expr (tmp, complain);\n@@ -19385,6 +19393,9 @@ tsubst_lambda_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \n       local_specialization_stack s (lss_copy);\n \n+      bool save_in_consteval_if_p = in_consteval_if_p;\n+      in_consteval_if_p = false;\n+\n       tree body = start_lambda_function (fn, r);\n \n       /* Now record them for lookup_init_capture_pack.  */\n@@ -19425,6 +19436,8 @@ tsubst_lambda_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \n       finish_lambda_function (body);\n \n+      in_consteval_if_p = save_in_consteval_if_p;\n+\n       if (nested)\n \tpop_function_context ();\n       else"}, {"sha": "cff9946bfcdf69880bdf59428531daf16ee657a2", "filename": "gcc/testsuite/g++.dg/cpp23/consteval-if1.C", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/117c64266405e244da4dae3ae7b60905af63b955/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconsteval-if1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/117c64266405e244da4dae3ae7b60905af63b955/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconsteval-if1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconsteval-if1.C?ref=117c64266405e244da4dae3ae7b60905af63b955", "patch": "@@ -0,0 +1,103 @@\n+// P1938R3\n+// { dg-do run { target c++20 } }\n+// { dg-options \"\" }\n+\n+extern \"C\" void abort ();\n+\n+namespace std {\n+  constexpr inline bool\n+  is_constant_evaluated () noexcept\n+  {\n+    if consteval {\t// { dg-warning \"'if consteval' only available with\" \"\" { target c++20_only } }\n+      return true;\n+    } else {\n+      return false;\n+    }\n+  }\n+}\n+\n+consteval int foo (int x) { return x; }\n+consteval int bar () { return 2; }\n+\n+constexpr int\n+baz (int x)\n+{\n+  int r = 0;\n+  if consteval\t\t// { dg-warning \"'if consteval' only available with\" \"\" { target c++20_only } }\n+    {\n+      r += foo (x);\n+    }\n+  else\n+    {\n+      r += bar ();\n+    }\n+  if ! consteval\t// { dg-warning \"'if consteval' only available with\" \"\" { target c++20_only } }\n+    {\n+      r += 2 * bar ();\n+    }\n+  else\n+    {\n+      r += foo (8 * x);\n+    }\n+  if (std::is_constant_evaluated ())\n+    r = -r;\n+  if consteval\t\t// { dg-warning \"'if consteval' only available with\" \"\" { target c++20_only } }\n+    {\n+      r += foo (32 * x);\n+    }\n+  if not consteval\t// { dg-warning \"'if consteval' only available with\" \"\" { target c++20_only } }\n+    {\n+      r += 32 * bar ();\n+    }\n+  return r;\n+}\n+\n+template <typename T>\n+constexpr int\n+qux (T x)\n+{\n+  T r = 0;\n+  if consteval\t\t// { dg-warning \"'if consteval' only available with\" \"\" { target c++20_only } }\n+    {\n+      r += foo (x);\n+    }\n+  else\n+    {\n+      r += bar ();\n+    }\n+  if ! consteval\t// { dg-warning \"'if consteval' only available with\" \"\" { target c++20_only } }\n+    {\n+      r += 2 * bar ();\n+    }\n+  else\n+    {\n+      r += foo (8 * x);\n+    }\n+  if (std::is_constant_evaluated ())\n+    r = -r;\n+  if consteval\t\t// { dg-warning \"'if consteval' only available with\" \"\" { target c++20_only } }\n+    {\n+      r += foo (32 * x);\n+    }\n+  if not consteval\t// { dg-warning \"'if consteval' only available with\" \"\" { target c++20_only } }\n+    {\n+      r += 32 * bar ();\n+    }\n+  return r;\n+}\n+\n+constexpr int a = baz (1);\n+static_assert (a == 23);\n+int b = baz (1);\n+constexpr int c = qux (1);\n+static_assert (c == 23);\n+int d = qux<int> (1);\n+\n+int\n+main ()\n+{\n+  if (b != 23 || d != 23)\n+    abort ();\n+  if (baz (1) != 70 || qux (1) != 70 || qux (1LL) != 70)\n+    abort ();\n+}"}, {"sha": "4c0523fe1d0ecc0fb7cb6bdbd730e7f251394f34", "filename": "gcc/testsuite/g++.dg/cpp23/consteval-if10.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/117c64266405e244da4dae3ae7b60905af63b955/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconsteval-if10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/117c64266405e244da4dae3ae7b60905af63b955/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconsteval-if10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconsteval-if10.C?ref=117c64266405e244da4dae3ae7b60905af63b955", "patch": "@@ -0,0 +1,36 @@\n+// P1938R3\n+// { dg-do compile { target c++20 } }\n+// { dg-options \"\" }\n+\n+consteval int foo (int x) { return x; }\n+\n+constexpr int\n+bar (int x)\n+{\n+  int r = 0;\n+  if consteval\t\t// { dg-warning \"'if consteval' only available with\" \"\" { target c++20_only } }\n+    {\n+      auto y = [=] { foo (x); };\t// { dg-error \"'x' is not a constant expression\" }\n+      y ();\n+    }\n+  return r;\n+}\n+\n+template <typename T>\n+constexpr T\n+baz (T x)\n+{\n+  T r = 0;\n+  if consteval\t\t// { dg-warning \"'if consteval' only available with\" \"\" { target c++20_only } }\n+    {\n+      auto y = [=] { foo (x); };\t// { dg-error \"'x' is not a constant expression\" }\n+      y ();\n+    }\n+  return r;\n+}\n+\n+int\n+qux (int x)\n+{\n+  return baz (x);\n+}"}, {"sha": "f7053b91c3c2ddbb04577a0a6aa0be98d6da62e1", "filename": "gcc/testsuite/g++.dg/cpp23/consteval-if2.C", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/117c64266405e244da4dae3ae7b60905af63b955/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconsteval-if2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/117c64266405e244da4dae3ae7b60905af63b955/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconsteval-if2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconsteval-if2.C?ref=117c64266405e244da4dae3ae7b60905af63b955", "patch": "@@ -0,0 +1,129 @@\n+// P1938R3\n+// { dg-do compile { target c++20 } }\n+// { dg-options \"\" }\n+\n+constexpr bool f()\n+{\n+  if consteval (true) {}\t// { dg-error \"'if consteval' requires compound statement\" }\n+\t\t\t\t// { dg-error \"expected\" \"\" { target *-*-* } .-1 }\n+\t\t\t\t// { dg-warning \"'if consteval' only available with\" \"\" { target c++20_only } .-2 }\n+  if not consteval (false) {}\t// { dg-error \"'if consteval' requires compound statement\" }\n+\t\t\t\t// { dg-error \"expected\" \"\" { target *-*-* } .-1 }\n+\t\t\t\t// { dg-warning \"'if consteval' only available with\" \"\" { target c++20_only } .-2 }\n+  if consteval if (true) {}\t// { dg-error \"'if consteval' requires compound statement\" }\n+\t\t\t\t// { dg-warning \"'if consteval' only available with\" \"\" { target c++20_only } .-1 }\n+  if ! consteval {} else ;\t// { dg-error \"'if consteval' requires compound statement\" }\n+\t\t\t\t// { dg-warning \"'if consteval' only available with\" \"\" { target c++20_only } .-1 }\n+  if consteval {} else if (true) {}\t// { dg-error \"'if consteval' requires compound statement\" }\n+\t\t\t\t// { dg-warning \"'if consteval' only available with\" \"\" { target c++20_only } .-1 }\n+  if (true)\n+    if consteval\t\t// { dg-warning \"'if consteval' only available with\" \"\" { target c++20_only } }\n+      {\n+      }\n+    else ;\t\t\t// { dg-error \"'if consteval' requires compound statement\" }\n+  return false;\n+}\n+\n+consteval int foo (int x) { return x; }\n+consteval int bar () { return 2; }\n+\n+constexpr int\n+baz (int x)\n+{\n+  int r = 0;\n+  if not consteval\t// { dg-warning \"'if consteval' only available with\" \"\" { target c++20_only } }\n+    {\n+      r += foo (x);\t// { dg-error \"'x' is not a constant expression\" }\n+    }\n+  else\n+    {\n+      r += bar ();\n+    }\n+  if consteval\t\t// { dg-warning \"'if consteval' only available with\" \"\" { target c++20_only } }\n+    {\n+      r += 2 * bar ();\n+    }\n+  else\n+    {\n+      r += foo (8 * x);\t// { dg-error \"'x' is not a constant expression\" }\n+    }\n+  if ! consteval\t// { dg-warning \"'if consteval' only available with\" \"\" { target c++20_only } }\n+    {\n+      r += foo (32 * x);// { dg-error \"'x' is not a constant expression\" }\n+    }\n+  if consteval\t\t// { dg-warning \"'if consteval' only available with\" \"\" { target c++20_only } }\n+    {\n+      r += 32 * bar ();\n+    }\n+  return r;\n+}\n+\n+template <typename T>\n+constexpr int\n+qux (int x)\n+{\n+  int r = 0;\n+  if not consteval\t// { dg-warning \"'if consteval' only available with\" \"\" { target c++20_only } }\n+    {\n+      r += foo (x);\t// { dg-error \"'x' is not a constant expression\" }\n+    }\n+  else\n+    {\n+      r += bar ();\n+    }\n+  if consteval\t\t// { dg-warning \"'if consteval' only available with\" \"\" { target c++20_only } }\n+    {\n+      r += 2 * bar ();\n+    }\n+  else\n+    {\n+      r += foo (8 * x);\t// { dg-error \"is not a constant expression\" }\n+    }\n+  if ! consteval\t// { dg-warning \"'if consteval' only available with\" \"\" { target c++20_only } }\n+    {\n+      r += foo (32 * x);// { dg-error \"is not a constant expression\" }\n+    }\n+  if consteval\t\t// { dg-warning \"'if consteval' only available with\" \"\" { target c++20_only } }\n+    {\n+      r += 32 * bar ();\n+    }\n+  return r;\n+}\n+\n+template <typename T>\n+constexpr T\n+corge (T x)\n+{\n+  T r = 0;\n+  if not consteval\t// { dg-warning \"'if consteval' only available with\" \"\" { target c++20_only } }\n+    {\n+      r += foo (x);\t// { dg-error \"'x' is not a constant expression\" }\n+    }\n+  else\n+    {\n+      r += bar ();\n+    }\n+  if consteval\t\t// { dg-warning \"'if consteval' only available with\" \"\" { target c++20_only } }\n+    {\n+      r += 2 * bar ();\n+    }\n+  else\n+    {\n+      r += foo (8 * x);\t// { dg-error \"is not a constant expression\" }\n+    }\n+  if ! consteval\t// { dg-warning \"'if consteval' only available with\" \"\" { target c++20_only } }\n+    {\n+      r += foo (32 * x);// { dg-error \"is not a constant expression\" }\n+    }\n+  if consteval\t\t// { dg-warning \"'if consteval' only available with\" \"\" { target c++20_only } }\n+    {\n+      r += 32 * bar ();\n+    }\n+  return r;\n+}\n+\n+int\n+garply (int x)\n+{\n+  return corge (x);\n+}"}, {"sha": "9c7e3aa7f60be9f5d408be132111ca241272c0c0", "filename": "gcc/testsuite/g++.dg/cpp23/consteval-if3.C", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/117c64266405e244da4dae3ae7b60905af63b955/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconsteval-if3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/117c64266405e244da4dae3ae7b60905af63b955/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconsteval-if3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconsteval-if3.C?ref=117c64266405e244da4dae3ae7b60905af63b955", "patch": "@@ -0,0 +1,73 @@\n+// P1938R3\n+// { dg-do run { target c++20 } }\n+// { dg-options \"\" }\n+\n+constexpr inline bool\n+is_constant_evaluated () noexcept\n+{\n+  if consteval { return true; } else { return false; }\t// { dg-warning \"'if consteval' only available with\" \"\" { target c++20_only } }\n+}\n+\n+template<int N> struct X { int v = N; };\n+X<is_constant_evaluated ()> x; // type X<true>\n+int y = 4;\n+int a = is_constant_evaluated () ? y : 1; // initializes a to 1\n+int b = is_constant_evaluated () ? 2 : y; // initializes b to 2\n+int c = y + (is_constant_evaluated () ? 2 : y); // initializes c to 2*y\n+int d = is_constant_evaluated (); // initializes d to 1\n+int e = d + is_constant_evaluated (); // initializes e to 1 + 0\n+\n+struct false_type { static constexpr bool value = false; };\n+struct true_type { static constexpr bool value = true; };\n+template<class T, class U>\n+struct is_same : false_type {};\n+template<class T>\n+struct is_same<T, T> : true_type {};\n+\n+constexpr int\n+foo (int x)\n+{\n+  const int n = is_constant_evaluated () ? 13 : 17; // n == 13\n+  int m = is_constant_evaluated () ? 13 : 17; // m might be 13 or 17 (see below)\n+  char arr[n] = {}; // char[13]\n+  return m + sizeof (arr) + x;\n+}\n+\n+constexpr int\n+bar ()\n+{\n+  const int n = is_constant_evaluated() ? 13 : 17;\n+  X<n> x1;\n+  X<is_constant_evaluated() ? 13 : 17> x2;\n+  static_assert (is_same<decltype (x1), decltype (x2)>::value, \"x1/x2's type\");\n+  return x1.v + x2.v;\n+}\n+\n+int p = foo (0); // m == 13; initialized to 26\n+int q = p + foo (0); // m == 17 for this call; initialized to 56\n+static_assert (bar () == 26, \"bar\");\n+\n+struct S { int a, b; };\n+\n+S s = { is_constant_evaluated () ? 2 : 3, y };\n+S t = { is_constant_evaluated () ? 2 : 3, 4 };\n+\n+static_assert (is_same<decltype (x), X<true> >::value, \"x's type\");\n+\n+int\n+main ()\n+{\n+  if (a != 1 || b != 2 || c != 8 || d != 1 || e != 1 || p != 26 || q != 56)\n+    __builtin_abort ();\n+  if (s.a != 3 || s.b != 4 || t.a != 2 || t.b != 4)\n+    __builtin_abort ();\n+  if (foo (y) != 34)\n+    __builtin_abort ();\n+#if __cplusplus >= 201703L\n+  if constexpr (foo (0) != 26)\n+    __builtin_abort ();\n+#endif\n+  constexpr int w = foo (0);\n+  if (w != 26)\n+    __builtin_abort ();\n+}"}, {"sha": "2760c1c2d9732ab921c18d0b96b6be187878b582", "filename": "gcc/testsuite/g++.dg/cpp23/consteval-if4.C", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/117c64266405e244da4dae3ae7b60905af63b955/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconsteval-if4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/117c64266405e244da4dae3ae7b60905af63b955/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconsteval-if4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconsteval-if4.C?ref=117c64266405e244da4dae3ae7b60905af63b955", "patch": "@@ -0,0 +1,44 @@\n+// { dg-do compile { target c++20 } }\n+// { dg-options \"-w\" }\n+\n+void f()\n+{\n+  goto l;\t\t\t// { dg-message \"from here\" }\n+  if consteval\t\t\t// { dg-message \"enters 'consteval if'\" }\n+    {\n+    l:;\t\t\t\t// { dg-error \"jump to label\" }\n+    }\n+}\n+\n+void g()\n+{\n+  goto l;\t\t\t// { dg-message \"from here\" }\n+  if not consteval\t\t// { dg-message \"enters 'consteval if'\" }\n+    {\n+    l:;\t\t\t\t// { dg-error \"jump to label\" }\n+    }\n+}\n+\n+void h()\n+{\n+  goto l;\t\t\t// { dg-message \"from here\" }\n+  if consteval\t\t\t// { dg-message \"enters 'consteval if'\" }\n+    {\n+    }\n+  else\n+    {\n+    l:;\t\t\t\t// { dg-error \"jump to label\" }\n+    }\n+}\n+\n+void i()\n+{\n+  goto l;\t\t\t// { dg-message \"from here\" }\n+  if not consteval\t\t// { dg-message \"enters 'consteval if'\" }\n+    {\n+    }\n+  else\n+    {\n+    l:;\t\t\t\t// { dg-error \"jump to label\" }\n+    }\n+}"}, {"sha": "b1c6192705cddd66d21450f622622d815a00a08f", "filename": "gcc/testsuite/g++.dg/cpp23/consteval-if5.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/117c64266405e244da4dae3ae7b60905af63b955/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconsteval-if5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/117c64266405e244da4dae3ae7b60905af63b955/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconsteval-if5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconsteval-if5.C?ref=117c64266405e244da4dae3ae7b60905af63b955", "patch": "@@ -0,0 +1,14 @@\n+// { dg-do compile { target c++20 } }\n+// { dg-options \"-w\" }\n+\n+void f()\n+{\n+  if consteval\t\t\t// { dg-message \"enters 'consteval if'\" }\n+    {\n+      goto l;\t\t\t// { dg-message \"from here\" }\n+    }\n+  else\n+    {\n+    l:;\t\t\t\t// { dg-error \"jump to label\" }\n+    }\n+}"}, {"sha": "2b92cccb832ad711b8921ade54ecd8cd3fa45dd6", "filename": "gcc/testsuite/g++.dg/cpp23/consteval-if6.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/117c64266405e244da4dae3ae7b60905af63b955/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconsteval-if6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/117c64266405e244da4dae3ae7b60905af63b955/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconsteval-if6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconsteval-if6.C?ref=117c64266405e244da4dae3ae7b60905af63b955", "patch": "@@ -0,0 +1,16 @@\n+// { dg-do compile { target c++20 } }\n+// { dg-options \"-w\" }\n+\n+void f()\n+{\n+  if consteval\n+    {\n+      goto l;\n+    l:;\n+    }\n+  else\n+    {\n+      goto l2;\n+    l2:;\n+    }\n+}"}, {"sha": "ab9da084015531e9c5798cd2bd3695b52e5a324f", "filename": "gcc/testsuite/g++.dg/cpp23/consteval-if7.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/117c64266405e244da4dae3ae7b60905af63b955/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconsteval-if7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/117c64266405e244da4dae3ae7b60905af63b955/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconsteval-if7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconsteval-if7.C?ref=117c64266405e244da4dae3ae7b60905af63b955", "patch": "@@ -0,0 +1,16 @@\n+// { dg-do compile { target c++20 } }\n+// { dg-options \"-w\" }\n+\n+void f()\n+{\n+  if not consteval\n+    {\n+    l:;\n+      goto l;\n+    }\n+  else\n+    {\n+    l2:;\n+      goto l2;\n+    }\n+}"}, {"sha": "36adaf92a7f1759957c068153316c3b39b6866bc", "filename": "gcc/testsuite/g++.dg/cpp23/consteval-if8.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/117c64266405e244da4dae3ae7b60905af63b955/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconsteval-if8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/117c64266405e244da4dae3ae7b60905af63b955/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconsteval-if8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconsteval-if8.C?ref=117c64266405e244da4dae3ae7b60905af63b955", "patch": "@@ -0,0 +1,14 @@\n+// { dg-do compile { target c++20 } }\n+// { dg-options \"-w\" }\n+\n+void f()\n+{\n+  if consteval\n+    {\n+    l:;\t\t\t\t// { dg-error \"jump to label\" }\n+    }\n+  else\n+    {\n+      goto l;\t\t\t// { dg-message \"from here\" }\n+    }\n+}"}, {"sha": "1c7db1ac906f14854ff3f2ebf091f4e2b60e46a5", "filename": "gcc/testsuite/g++.dg/cpp23/consteval-if9.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/117c64266405e244da4dae3ae7b60905af63b955/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconsteval-if9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/117c64266405e244da4dae3ae7b60905af63b955/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconsteval-if9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconsteval-if9.C?ref=117c64266405e244da4dae3ae7b60905af63b955", "patch": "@@ -0,0 +1,11 @@\n+// { dg-do compile { target c++20 } }\n+// { dg-options \"-w\" }\n+\n+constexpr void f(int i)\n+{\n+  switch (i)\n+    if consteval\t\t// { dg-message \"enters 'consteval if'\" }\n+      {\n+      case 42:;\t\t\t// { dg-error \"jump to case label\" }\n+      }\n+}"}, {"sha": "7070f598d395fe1bf863894ee6530b79a3c04a4d", "filename": "gcc/testsuite/g++.dg/cpp23/feat-cxx2b.C", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/117c64266405e244da4dae3ae7b60905af63b955/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Ffeat-cxx2b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/117c64266405e244da4dae3ae7b60905af63b955/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Ffeat-cxx2b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Ffeat-cxx2b.C?ref=117c64266405e244da4dae3ae7b60905af63b955", "patch": "@@ -545,3 +545,9 @@\n #elif __cpp_size_t_suffix != 202011\n #  error \"__cpp_size_t_suffix != 202011\"\n #endif\n+\n+#ifndef __cpp_if_consteval\n+#  error \"__cpp_if_consteval\"\n+#elif __cpp_if_consteval != 202106\n+#  error \"__cpp_if_consteval != 202106\"\n+#endif"}]}