{"sha": "af3b4e599c01847d050f491fe3e88fc5ce801b71", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWYzYjRlNTk5YzAxODQ3ZDA1MGY0OTFmZTNlODhmYzVjZTgwMWI3MQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-09-30T17:43:44Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-30T17:43:44Z"}, "message": "cp-tree.h (lang_decl_flags): Add global_ctor_p and global_dtor_p.\n\n\t* cp-tree.h (lang_decl_flags): Add global_ctor_p and\n\tglobal_dtor_p.  Add init_priority.\n\t(DECL_ACCESS): Adjust accordingly.\n\t(DECL_GLOBAL_CTOR_P, DECL_GLOBAL_DTOR_P): New macros.\n\t(GLOBAL_INIT_PRIORITY): Likewise.\n\t* decl.c (lang_mark_tree): Adjust accordingly.\n\t(start_objects): Set DECL_GLOBAL_CTOR_P, DECL_GLOBAL_DTOR_P,\n\tand GLOBAL_INIT_PRIORITY.\n\t* dump.c (dequeue_and_dump): Print them.\n\t* ir.texi: Document them.\n\nFrom-SVN: r29733", "tree": {"sha": "9c7a0b079ee897b64ab59317dccda35e632b164a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c7a0b079ee897b64ab59317dccda35e632b164a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af3b4e599c01847d050f491fe3e88fc5ce801b71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af3b4e599c01847d050f491fe3e88fc5ce801b71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af3b4e599c01847d050f491fe3e88fc5ce801b71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af3b4e599c01847d050f491fe3e88fc5ce801b71/comments", "author": null, "committer": null, "parents": [{"sha": "f793a95e2e771fa6f849fab0a717a61df35857ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f793a95e2e771fa6f849fab0a717a61df35857ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f793a95e2e771fa6f849fab0a717a61df35857ed"}], "stats": {"total": 73, "additions": 69, "deletions": 4}, "files": [{"sha": "85a03fea03e391af0df00bebc1d6f1124d720d0d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af3b4e599c01847d050f491fe3e88fc5ce801b71/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af3b4e599c01847d050f491fe3e88fc5ce801b71/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=af3b4e599c01847d050f491fe3e88fc5ce801b71", "patch": "@@ -1,5 +1,16 @@\n 1999-09-30  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* cp-tree.h (lang_decl_flags): Add global_ctor_p and\n+\tglobal_dtor_p.  Add init_priority.\n+\t(DECL_ACCESS): Adjust accordingly.\n+\t(DECL_GLOBAL_CTOR_P, DECL_GLOBAL_DTOR_P): New macros.\n+\t(GLOBAL_INIT_PRIORITY): Likewise.\n+\t* decl.c (lang_mark_tree): Adjust accordingly.\n+\t(start_objects): Set DECL_GLOBAL_CTOR_P, DECL_GLOBAL_DTOR_P, \n+\tand GLOBAL_INIT_PRIORITY.\n+\t* dump.c (dequeue_and_dump): Print them.\n+\t* ir.texi: Document them.\n+\n \t* decl2.c (struct priority_info_s): Remove initialization_sequence\n \tand destruction_sequence.\n \t(start_static_storage_duration_function): Return the body of the"}, {"sha": "c5886fc30b40de308f00c8b080ad54b511c0d164", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af3b4e599c01847d050f491fe3e88fc5ce801b71/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af3b4e599c01847d050f491fe3e88fc5ce801b71/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=af3b4e599c01847d050f491fe3e88fc5ce801b71", "patch": "@@ -1585,9 +1585,10 @@ struct lang_decl_flags\n   unsigned bitfield : 1;\n   unsigned defined_in_class : 1;\n   unsigned pending_inline_p : 1;\n-  unsigned dummy : 5;\n+  unsigned global_ctor_p : 1;\n+  unsigned global_dtor_p : 1;\n+  unsigned dummy : 3;\n \n-  tree access;\n   tree context;\n \n   union {\n@@ -1597,6 +1598,15 @@ struct lang_decl_flags\n     /* In a NAMESPACE_DECL, this is NAMESPACE_LEVEL.  */\n     struct binding_level *level;\n   } u;\n+\n+  union {\n+    /* This is DECL_ACCESS.  */\n+    tree access;\n+\n+    /* In a namespace-scope FUNCTION_DECL, this is\n+       GLOBAL_INIT_PRIORITY.  */\n+    int init_priority;\n+  } u2;\n };\n \n struct lang_decl\n@@ -2347,7 +2357,22 @@ extern int flag_new_for_scope;\n    For example, if a member that would normally be public in a\n    derived class is made protected, then the derived class and the\n    protected_access_node will appear in the DECL_ACCESS for the node.  */\n-#define DECL_ACCESS(NODE) (DECL_LANG_SPECIFIC(NODE)->decl_flags.access)\n+#define DECL_ACCESS(NODE) (DECL_LANG_SPECIFIC(NODE)->decl_flags.u2.access)\n+\n+/* Nonzero if the FUNCTION_DECL is a global constructor.  */\n+#define DECL_GLOBAL_CTOR_P(NODE) \\\n+  (DECL_LANG_SPECIFIC ((NODE))->decl_flags.global_ctor_p)\n+\n+/* Nonzero if the FUNCTION_DECL is a global destructor.  */\n+#define DECL_GLOBAL_DTOR_P(NODE) \\\n+  (DECL_LANG_SPECIFIC ((NODE))->decl_flags.global_dtor_p)\n+\n+/* If DECL_GLOBAL_CTOR_P or DECL_GLOBAL_DTOR_P holds, this macro\n+   returns the initialization priority for the function.  Constructors\n+   with lower numbers should be run first.  Destructors should be run\n+   in the reverse order of constructors.  */\n+#define GLOBAL_INIT_PRIORITY(NODE) \\\n+  (DECL_LANG_SPECIFIC ((NODE))->decl_flags.u2.init_priority)\n \n /* Accessor macros for C++ template decl nodes.  */\n "}, {"sha": "49d80dc93875811efcbbf64a7c5a02a5f74f465e", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af3b4e599c01847d050f491fe3e88fc5ce801b71/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af3b4e599c01847d050f491fe3e88fc5ce801b71/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=af3b4e599c01847d050f491fe3e88fc5ce801b71", "patch": "@@ -14293,7 +14293,8 @@ lang_mark_tree (t)\n       if (ld)\n \t{\n \t  ggc_mark (ld);\n-\t  ggc_mark_tree (ld->decl_flags.access);\n+\t  if (!DECL_GLOBAL_CTOR_P (t) && !DECL_GLOBAL_DTOR_P (t))\n+\t    ggc_mark_tree (ld->decl_flags.u2.access);\n \t  ggc_mark_tree (ld->decl_flags.context);\n \t  if (TREE_CODE (t) != NAMESPACE_DECL)\n \t    ggc_mark_tree (ld->decl_flags.u.template_info);"}, {"sha": "7420c972ae0ffa752950719f506ed0b17ecc325f", "filename": "gcc/cp/dump.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af3b4e599c01847d050f491fe3e88fc5ce801b71/gcc%2Fcp%2Fdump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af3b4e599c01847d050f491fe3e88fc5ce801b71/gcc%2Fcp%2Fdump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdump.c?ref=af3b4e599c01847d050f491fe3e88fc5ce801b71", "patch": "@@ -625,6 +625,15 @@ dequeue_and_dump (di)\n \t    dump_string (di, \"operator\");\n \t  if (DECL_CONV_FN_P (t))\n \t    dump_string (di, \"conversion\");\n+\t  if (DECL_GLOBAL_CTOR_P (t) || DECL_GLOBAL_DTOR_P (t))\n+\t    {\n+\t      if (DECL_GLOBAL_CTOR_P (t))\n+\t\tdump_string (di, \"global init\");\n+\t      if (DECL_GLOBAL_DTOR_P (t))\n+\t\tdump_string (di, \"global fini\");\n+\t      dump_int (di, \"prio\", GLOBAL_INIT_PRIORITY (t));\n+\t    }\n+\n \t  if (dump_children_p)\n \t    dump_child (\"body\", DECL_SAVED_TREE (t));\n \t}"}, {"sha": "2831e3b7037f21ae6a3b8f3c3fe93091616cda5d", "filename": "gcc/cp/ir.texi", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af3b4e599c01847d050f491fe3e88fc5ce801b71/gcc%2Fcp%2Fir.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af3b4e599c01847d050f491fe3e88fc5ce801b71/gcc%2Fcp%2Fir.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fir.texi?ref=af3b4e599c01847d050f491fe3e88fc5ce801b71", "patch": "@@ -948,6 +948,9 @@ the @code{DECL_REAL_CONTEXT} for @code{f} will be the\n @findex DECL_OVERLOADED_OPERATOR_P\n @findex DECL_CONV_FN_P\n @findex DECL_ARTIFIICIAL\n+@findex DECL_GLOBAL_CTOR_P\n+@findex DECL_GLOBAL_DTOR_P\n+@findex GLOBAL_INIT_PRIORITY\n \n The following macros and functions can be used on a @code{FUNCTION_DECL}:\n @ftable @code\n@@ -1006,6 +1009,22 @@ This macro holds if the function is an overloaded operator.\n @item DECL_CONV_FN_P\n This macro holds if the function is a type-conversion operator.\n \n+@item DECL_GLOBAL_CTOR_P\n+This predicate holds if the function is a file-scope initialization\n+function.\n+\n+@item DECL_GLOBAL_DTOR_P\n+This predicate holds if the function is a file-scope finalization\n+function.\n+\n+@item GLOBAL_INIT_PRIORITY\n+If either @code{DECL_GLOBAL_CTOR_P} or @code{DECL_GLOBAL_DTOR_P} holds,\n+then this gives the initialization priority for the function.  The\n+linker will arrange that all functions for which\n+@code{DECL_GLOBAL_CTOR_P} holds are run in increasing order of priority\n+before @code{main} is called.  When the program exits, all functions for\n+which @code{DECL_GLOBAL_DTOR_P} holds are run in the reverse order.\n+\n @item DECL_ARTIFICIAL\n This macro holds if the function was implicitly generated by the\n compiler, rather than explicitly declared.  In addition to implicitly"}]}