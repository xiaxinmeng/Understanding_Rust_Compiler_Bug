{"sha": "b017a17489a1e89510a224a3796275ec5cac97c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjAxN2ExNzQ4OWExZTg5NTEwYTIyNGEzNzk2Mjc1ZWM1Y2FjOTdjNA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-05-28T12:44:11Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-05-28T12:44:11Z"}, "message": "re PR middle-end/61045 (Wrong constant folding)\n\n2014-05-28  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/61045\n\t* fold-const.c (fold_comparison): When folding\n\tX +- C1 CMP Y +- C2 to X CMP Y +- C2 +- C1 also ensure\n\tthe sign of the remaining constant operand stays the same.\n\n\t* gcc.dg/pr61045.c: New testcase.\n\nFrom-SVN: r211018", "tree": {"sha": "1be500648cca150639fee9e44beec23154844c0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1be500648cca150639fee9e44beec23154844c0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b017a17489a1e89510a224a3796275ec5cac97c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b017a17489a1e89510a224a3796275ec5cac97c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b017a17489a1e89510a224a3796275ec5cac97c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b017a17489a1e89510a224a3796275ec5cac97c4/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a4d6bf7e9fb614acec6d0df6932b60a88c13007c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4d6bf7e9fb614acec6d0df6932b60a88c13007c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4d6bf7e9fb614acec6d0df6932b60a88c13007c"}], "stats": {"total": 49, "additions": 38, "deletions": 11}, "files": [{"sha": "76d4a66f3226a70851371f00f1439e5252435e72", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b017a17489a1e89510a224a3796275ec5cac97c4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b017a17489a1e89510a224a3796275ec5cac97c4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b017a17489a1e89510a224a3796275ec5cac97c4", "patch": "@@ -1,3 +1,10 @@\n+2014-05-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/61045\n+\t* fold-const.c (fold_comparison): When folding\n+\tX +- C1 CMP Y +- C2 to X CMP Y +- C2 +- C1 also ensure\n+\tthe sign of the remaining constant operand stays the same.\n+\n 2014-05-28  Kaushik Phatak  <kaushik.phatak@kpit.com>\n \n \t* config/rl78/rl78.h (TARGET_CPU_CPP_BUILTINS): Define"}, {"sha": "0451b6a90beea7b12624003cebffb0b592ddb8be", "filename": "gcc/fold-const.c", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b017a17489a1e89510a224a3796275ec5cac97c4/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b017a17489a1e89510a224a3796275ec5cac97c4/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=b017a17489a1e89510a224a3796275ec5cac97c4", "patch": "@@ -9239,7 +9239,7 @@ fold_comparison (location_t loc, enum tree_code code, tree type,\n   /* Transform comparisons of the form X +- C1 CMP Y +- C2 to\n      X CMP Y +- C2 +- C1 for signed X, Y.  This is valid if\n      the resulting offset is smaller in absolute value than the\n-     original one.  */\n+     original one and has the same sign.  */\n   if (TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (arg0))\n       && (TREE_CODE (arg0) == PLUS_EXPR || TREE_CODE (arg0) == MINUS_EXPR)\n       && (TREE_CODE (TREE_OPERAND (arg0, 1)) == INTEGER_CST\n@@ -9258,32 +9258,35 @@ fold_comparison (location_t loc, enum tree_code code, tree type,\n \t\t\t\t      \"a comparison\");\n \n       /* Put the constant on the side where it doesn't overflow and is\n-\t of lower absolute value than before.  */\n+\t of lower absolute value and of same sign than before.  */\n       cst = int_const_binop (TREE_CODE (arg0) == TREE_CODE (arg1)\n \t\t\t     ? MINUS_EXPR : PLUS_EXPR,\n \t\t\t     const2, const1);\n       if (!TREE_OVERFLOW (cst)\n-\t  && tree_int_cst_compare (const2, cst) == tree_int_cst_sgn (const2))\n+\t  && tree_int_cst_compare (const2, cst) == tree_int_cst_sgn (const2)\n+\t  && tree_int_cst_sgn (cst) == tree_int_cst_sgn (const2))\n \t{\n \t  fold_overflow_warning (warnmsg, WARN_STRICT_OVERFLOW_COMPARISON);\n \t  return fold_build2_loc (loc, code, type,\n-\t\t\t      variable1,\n-\t\t\t      fold_build2_loc (loc,\n-\t\t\t\t\t   TREE_CODE (arg1), TREE_TYPE (arg1),\n-\t\t\t\t\t   variable2, cst));\n+\t\t\t\t  variable1,\n+\t\t\t\t  fold_build2_loc (loc, TREE_CODE (arg1),\n+\t\t\t\t\t\t   TREE_TYPE (arg1),\n+\t\t\t\t\t\t   variable2, cst));\n \t}\n \n       cst = int_const_binop (TREE_CODE (arg0) == TREE_CODE (arg1)\n \t\t\t     ? MINUS_EXPR : PLUS_EXPR,\n \t\t\t     const1, const2);\n       if (!TREE_OVERFLOW (cst)\n-\t  && tree_int_cst_compare (const1, cst) == tree_int_cst_sgn (const1))\n+\t  && tree_int_cst_compare (const1, cst) == tree_int_cst_sgn (const1)\n+\t  && tree_int_cst_sgn (cst) == tree_int_cst_sgn (const1))\n \t{\n \t  fold_overflow_warning (warnmsg, WARN_STRICT_OVERFLOW_COMPARISON);\n \t  return fold_build2_loc (loc, code, type,\n-\t\t\t      fold_build2_loc (loc, TREE_CODE (arg0), TREE_TYPE (arg0),\n-\t\t\t\t\t   variable1, cst),\n-\t\t\t      variable2);\n+\t\t\t\t  fold_build2_loc (loc, TREE_CODE (arg0),\n+\t\t\t\t\t\t   TREE_TYPE (arg0),\n+\t\t\t\t\t\t   variable1, cst),\n+\t\t\t\t  variable2);\n \t}\n     }\n "}, {"sha": "ab4641343a3cbdf790d0758d5c33bd4e80613b4b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b017a17489a1e89510a224a3796275ec5cac97c4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b017a17489a1e89510a224a3796275ec5cac97c4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b017a17489a1e89510a224a3796275ec5cac97c4", "patch": "@@ -1,3 +1,8 @@\n+2014-05-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/61045\n+\t* gcc.dg/pr61045.c: New testcase.\n+\n 2014-05-28  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* lib/clearcap.exp: New file."}, {"sha": "1808cdc259ff8020ec4de97a717227cb993c8e1a", "filename": "gcc/testsuite/gcc.dg/pr61045.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b017a17489a1e89510a224a3796275ec5cac97c4/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61045.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b017a17489a1e89510a224a3796275ec5cac97c4/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61045.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61045.c?ref=b017a17489a1e89510a224a3796275ec5cac97c4", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fstrict-overflow\" } */\n+\n+int main ()\n+{\n+  int a = 0;\n+  int b = __INT_MAX__;\n+  int t = (a - 2) > (b - 1);\n+  if (t != 0)\n+    __builtin_abort();\n+  return 0;\n+}"}]}