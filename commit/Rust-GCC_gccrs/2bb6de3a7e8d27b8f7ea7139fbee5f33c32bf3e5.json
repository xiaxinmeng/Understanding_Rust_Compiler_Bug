{"sha": "2bb6de3a7e8d27b8f7ea7139fbee5f33c32bf3e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJiNmRlM2E3ZThkMjdiOGY3ZWE3MTM5ZmJlZTVmMzNjMzJiZjNlNQ==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2007-07-15T16:26:22Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2007-07-15T16:26:22Z"}, "message": "re PR libfortran/32611 (Print sign of negative zero)\n\n2007-07-15  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\t    Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n\n\tPR fortran/32611\n\t* runtime/compile_options.c (set_std): Remove.\n\t(set_options): New function.\n\t(init_compile_options): Add initialization for -fsign-zero option.\n\t* gfortran.map (GFORTRAN_1.0): Rename _gfortran_set_std into\n\t_gfortran_set_options.\n\t* libgfortran.h (compile_options_t): Add sign_zero field.\n\t* io/write.c (output_float): Use the sign bit of the value to determine\n\tif a negative sign should be emitted for zero values.  Do not emit the\n\tnegative sign for zero if -fno-sign-zero was set during compile.\n\nCo-Authored-By: Francois-Xavier Coudert <fxcoudert@gcc.gnu.org>\n\nFrom-SVN: r126654", "tree": {"sha": "5dd0bb4b6a1ee0a04fd08df75bf78b4ef75d74d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5dd0bb4b6a1ee0a04fd08df75bf78b4ef75d74d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bb6de3a7e8d27b8f7ea7139fbee5f33c32bf3e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bb6de3a7e8d27b8f7ea7139fbee5f33c32bf3e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bb6de3a7e8d27b8f7ea7139fbee5f33c32bf3e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bb6de3a7e8d27b8f7ea7139fbee5f33c32bf3e5/comments", "author": null, "committer": null, "parents": [{"sha": "639d3040d458f520302f700c5bcc51412c9b47b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/639d3040d458f520302f700c5bcc51412c9b47b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/639d3040d458f520302f700c5bcc51412c9b47b1"}], "stats": {"total": 72, "additions": 52, "deletions": 20}, "files": [{"sha": "a6b20fb751181a2dec1c079ef889c0281adfc489", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bb6de3a7e8d27b8f7ea7139fbee5f33c32bf3e5/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bb6de3a7e8d27b8f7ea7139fbee5f33c32bf3e5/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=2bb6de3a7e8d27b8f7ea7139fbee5f33c32bf3e5", "patch": "@@ -1,3 +1,17 @@\n+2007-07-15  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\t    Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/32611\n+\t* runtime/compile_options.c (set_std): Remove.\n+\t(set_options): New function.\n+\t(init_compile_options): Add initialization for -fsign-zero option.\n+\t* gfortran.map (GFORTRAN_1.0): Rename _gfortran_set_std into\n+\t_gfortran_set_options.\n+\t* libgfortran.h (compile_options_t): Add sign_zero field.\n+\t* io/write.c (output_float): Use the sign bit of the value to determine\n+\tif a negative sign should be emitted for zero values.  Do not emit the\n+\tnegative sign for zero if -fno-sign-zero was set during compile.\n+\t\n 2007-07-14  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/32752"}, {"sha": "76dba0ce40659bdf5888992ac0f2c5c87411f88d", "filename": "libgfortran/gfortran.map", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bb6de3a7e8d27b8f7ea7139fbee5f33c32bf3e5/libgfortran%2Fgfortran.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bb6de3a7e8d27b8f7ea7139fbee5f33c32bf3e5/libgfortran%2Fgfortran.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgfortran.map?ref=2bb6de3a7e8d27b8f7ea7139fbee5f33c32bf3e5", "patch": "@@ -590,7 +590,7 @@ GFORTRAN_1.0 {\n     _gfortran_set_fpe;\n     _gfortran_set_max_subrecord_length;\n     _gfortran_set_record_marker;\n-    _gfortran_set_std;\n+    _gfortran_set_options;\n     _gfortran_shape_16;\n     _gfortran_shape_4;\n     _gfortran_shape_8;"}, {"sha": "b4e5d3efb8fe8901a907999e717cf31a21330fcc", "filename": "libgfortran/io/write.c", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bb6de3a7e8d27b8f7ea7139fbee5f33c32bf3e5/libgfortran%2Fio%2Fwrite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bb6de3a7e8d27b8f7ea7139fbee5f33c32bf3e5/libgfortran%2Fio%2Fwrite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite.c?ref=2bb6de3a7e8d27b8f7ea7139fbee5f33c32bf3e5", "patch": "@@ -465,6 +465,7 @@ output_float (st_parameter_dt *dtp, const fnode *f, GFC_REAL_LARGEST value)\n   int leadzero;\n   int nblanks;\n   int i;\n+  int sign_bit;\n   sign_t sign;\n \n   ft = f->format;\n@@ -482,6 +483,7 @@ output_float (st_parameter_dt *dtp, const fnode *f, GFC_REAL_LARGEST value)\n      For an N digit exponent, this gives us (MIN_FIELD_WIDTH-5)-N digits\n      after the decimal point, plus another one before the decimal point.  */\n   sign = calculate_sign (dtp, value < 0.0);\n+  sign_bit = signbit (value);\n   if (value < 0)\n     value = -value;\n \n@@ -547,9 +549,15 @@ output_float (st_parameter_dt *dtp, const fnode *f, GFC_REAL_LARGEST value)\n   /* Read the exponent back in.  */\n   e = atoi (&buffer[ndigits + 3]) + 1;\n \n-  /* Make sure zero comes out as 0.0e0.  */\n+  /* Make sure zero comes out as 0.0e0.   */\n   if (value == 0.0)\n-    e = 0;\n+    {\n+      e = 0;\n+      if (compile_options.sign_zero == 1)\n+        sign = calculate_sign (dtp, sign_bit);\n+      else\n+\tsign = calculate_sign (dtp, 0);\n+    }\n \n   /* Normalize the fractional component.  */\n   buffer[2] = buffer[1];\n@@ -751,7 +759,14 @@ output_float (st_parameter_dt *dtp, const fnode *f, GFC_REAL_LARGEST value)\n \tbreak;\n     }\n   if (i == ndigits)\n-    sign = calculate_sign (dtp, 0);\n+    {\n+      /* The output is zero, so set the sign according to the sign bit unless\n+\t -fno-sign-zero was specified.  */\n+      if (compile_options.sign_zero == 1)\n+        sign = calculate_sign (dtp, sign_bit);\n+      else\n+\tsign = calculate_sign (dtp, 0);\n+    }\n \n   /* Work out how much padding is needed.  */\n   nblanks = w - (nbefore + nzero + nafter + edigits + 1);\n@@ -776,7 +791,6 @@ output_float (st_parameter_dt *dtp, const fnode *f, GFC_REAL_LARGEST value)\n \n   /* Pad to full field width.  */\n \n-\n   if ( ( nblanks > 0 ) && !dtp->u.p.no_leading_blank)\n     {\n       memset (out, ' ', nblanks);"}, {"sha": "e0cfa450e29f45c783d0571a3acb22734e3faf77", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bb6de3a7e8d27b8f7ea7139fbee5f33c32bf3e5/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bb6de3a7e8d27b8f7ea7139fbee5f33c32bf3e5/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=2bb6de3a7e8d27b8f7ea7139fbee5f33c32bf3e5", "patch": "@@ -382,6 +382,7 @@ typedef struct\n   int convert;\n   int dump_core;\n   int backtrace;\n+  int sign_zero;\n   size_t record_marker;\n   int max_subrecord_length;\n }"}, {"sha": "0976a39eadee4f7ed1a6e8f109065832103a6776", "filename": "libgfortran/runtime/compile_options.c", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bb6de3a7e8d27b8f7ea7139fbee5f33c32bf3e5/libgfortran%2Fruntime%2Fcompile_options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bb6de3a7e8d27b8f7ea7139fbee5f33c32bf3e5/libgfortran%2Fruntime%2Fcompile_options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fcompile_options.c?ref=2bb6de3a7e8d27b8f7ea7139fbee5f33c32bf3e5", "patch": "@@ -1,5 +1,5 @@\n /* Handling of compile-time options that influence the library.\n-   Copyright (C) 2005 Free Software Foundation, Inc.\n+   Copyright (C) 2005, 2007 Free Software Foundation, Inc.\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n \n@@ -35,23 +35,25 @@ Boston, MA 02110-1301, USA.  */\n /* Useful compile-time options will be stored in here.  */\n compile_options_t compile_options;\n \n-\n-/* Prototypes */\n-extern void set_std (GFC_INTEGER_4, GFC_INTEGER_4, GFC_INTEGER_4,\n-\t\t     GFC_INTEGER_4, GFC_INTEGER_4);\n-export_proto(set_std);\n-\n+/* Set the usual compile-time options.  */\n+extern void set_options (int , int []);\n+export_proto(set_options);\n \n void\n-set_std (GFC_INTEGER_4 warn_std, GFC_INTEGER_4 allow_std,\n-\t GFC_INTEGER_4 pedantic, GFC_INTEGER_4 dump_core,\n-\t GFC_INTEGER_4 backtrace)\n+set_options (int num, int options[])\n {\n-  compile_options.pedantic = pedantic;\n-  compile_options.warn_std = warn_std;\n-  compile_options.allow_std = allow_std;\n-  compile_options.dump_core = dump_core;\n-  compile_options.backtrace = backtrace;\n+  if (num >= 1)\n+    compile_options.warn_std = options[0];\n+  if (num >= 2)\n+    compile_options.allow_std = options[1];\n+  if (num >= 3)\n+    compile_options.pedantic = options[2];\n+  if (num >= 4)\n+    compile_options.dump_core = options[3];\n+  if (num >= 5)\n+    compile_options.backtrace = options[4];\n+  if (num >= 6)\n+    compile_options.sign_zero = options[5];\n }\n \n \n@@ -67,6 +69,7 @@ init_compile_options (void)\n   compile_options.pedantic = 0;\n   compile_options.dump_core = 0;\n   compile_options.backtrace = 0;\n+  compile_options.sign_zero = 1;\n }\n \n /* Function called by the front-end to tell us the"}]}