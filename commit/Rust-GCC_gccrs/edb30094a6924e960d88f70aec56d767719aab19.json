{"sha": "edb30094a6924e960d88f70aec56d767719aab19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRiMzAwOTRhNjkyNGU5NjBkODhmNzBhZWM1NmQ3Njc3MTlhYWIxOQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-09-10T16:21:45Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-09-10T16:21:45Z"}, "message": "ira-conflicts.c: Use fputs or putc instead of fprintf where appropriate.\n\n\t* ira-conflicts.c: Use fputs or putc instead of fprintf\n\twhere appropriate.\n\t* cfg.c: Ditto.\n\t* toplev.c: Ditto.\n\t* tree-switch-conversion.c: Ditto.\n\nFrom-SVN: r151598", "tree": {"sha": "31c9fdbe7bb2efe370625610c20193438b280c38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31c9fdbe7bb2efe370625610c20193438b280c38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/edb30094a6924e960d88f70aec56d767719aab19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edb30094a6924e960d88f70aec56d767719aab19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edb30094a6924e960d88f70aec56d767719aab19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edb30094a6924e960d88f70aec56d767719aab19/comments", "author": null, "committer": null, "parents": [{"sha": "f3d9e91bccfac76d92b48ea45a0b4e3056638a33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3d9e91bccfac76d92b48ea45a0b4e3056638a33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3d9e91bccfac76d92b48ea45a0b4e3056638a33"}], "stats": {"total": 76, "additions": 42, "deletions": 34}, "files": [{"sha": "70a460d2a11c88d7821e9fb0b886da51d80625b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edb30094a6924e960d88f70aec56d767719aab19/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edb30094a6924e960d88f70aec56d767719aab19/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=edb30094a6924e960d88f70aec56d767719aab19", "patch": "@@ -1,9 +1,17 @@\n-2009-09-10  Hariharan Sandanagobalane <hariharan@picochip.com>\n+2009-09-10  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* ira-conflicts.c: Use fputs or putc instead of fprintf\n+\twhere appropriate.\n+\t* cfg.c: Ditto.\n+\t* toplev.c: Ditto.\n+\t* tree-switch-conversion.c: Ditto.\n+\n+2009-09-10  Hariharan Sandanagobalane  <hariharan@picochip.com>\n \n \t* config/picochip/picochip.c : Ignore DEBUG_INSN_P instructions\n         introduced by the VTA branch merge.\n \n-2009-09-10  Uros Bizjak <ubizjak@gmail.com>\n+2009-09-10  Uros Bizjak  <ubizjak@gmail.com>\n \n \tRevert:\n \t2009-09-09  Uros Bizjak  <ubizjak@gmail.com>"}, {"sha": "550f8f13d3be7b93039679e6ea7db115fd46bd06", "filename": "gcc/cfg.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edb30094a6924e960d88f70aec56d767719aab19/gcc%2Fcfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edb30094a6924e960d88f70aec56d767719aab19/gcc%2Fcfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.c?ref=edb30094a6924e960d88f70aec56d767719aab19", "patch": "@@ -546,10 +546,10 @@ dump_bb_info (basic_block bb, bool header, bool footer, int flags,\n       /* Both maybe_hot_bb_p & probably_never_executed_bb_p functions\n \t crash without cfun. */ \n       if (cfun && maybe_hot_bb_p (bb))\n-\tfprintf (file, \", maybe hot\");\n+\tfputs (\", maybe hot\", file);\n       if (cfun && probably_never_executed_bb_p (bb))\n-\tfprintf (file, \", probably never executed\");\n-      fprintf (file, \".\\n\");\n+\tfputs (\", probably never executed\", file);\n+      fputs (\".\\n\", file);\n \n       fprintf (file, \"%sPredecessors: \", prefix);\n       FOR_EACH_EDGE (e, ei, bb->preds)\n@@ -559,7 +559,7 @@ dump_bb_info (basic_block bb, bool header, bool footer, int flags,\n \t  && (bb->flags & BB_RTL)\n \t  && df)\n \t{\n-\t  fprintf (file, \"\\n\");\n+\t  putc ('\\n', file);\n \t  df_dump_top (bb, file);\n \t}\n    }\n@@ -574,7 +574,7 @@ dump_bb_info (basic_block bb, bool header, bool footer, int flags,\n \t  && (bb->flags & BB_RTL)\n \t  && df)\n \t{\n-\t  fprintf (file, \"\\n\");\n+\t  putc ('\\n', file);\n \t  df_dump_bottom (bb, file);\n \t}\n    }\n@@ -615,11 +615,11 @@ dump_reg_info (FILE *file)\n \tfprintf (file, \"; set %d time%s\", DF_REG_DEF_COUNT (i),\n \t\t (DF_REG_DEF_COUNT (i) == 1) ? \"\" : \"s\");\n       if (regno_reg_rtx[i] != NULL && REG_USERVAR_P (regno_reg_rtx[i]))\n-\tfprintf (file, \"; user var\");\n+\tfputs (\"; user var\", file);\n       if (REG_N_DEATHS (i) != 1)\n \tfprintf (file, \"; dies in %d places\", REG_N_DEATHS (i));\n       if (REG_N_CALLS_CROSSED (i) == 1)\n-\tfprintf (file, \"; crosses 1 call\");\n+\tfputs (\"; crosses 1 call\", file);\n       else if (REG_N_CALLS_CROSSED (i))\n \tfprintf (file, \"; crosses %d calls\", REG_N_CALLS_CROSSED (i));\n       if (REG_FREQ_CALLS_CROSSED (i))\n@@ -643,8 +643,8 @@ dump_reg_info (FILE *file)\n \t}\n       \n       if (regno_reg_rtx[i] != NULL && REG_POINTER (regno_reg_rtx[i]))\n-\tfprintf (file, \"; pointer\");\n-      fprintf (file, \".\\n\");\n+\tfputs (\"; pointer\", file);\n+      fputs (\".\\n\", file);\n     }\n }\n \n@@ -691,7 +691,7 @@ dump_edge_info (FILE *file, edge e, int do_succ)\n \n   if (e->count)\n     {\n-      fprintf (file, \" count:\");\n+      fputs (\" count:\", file);\n       fprintf (file, HOST_WIDEST_INT_PRINT_DEC, e->count);\n     }\n \n@@ -904,24 +904,24 @@ dump_cfg_bb_info (FILE *file, basic_block bb)\n     if (bb->flags & (1 << i))\n       {\n \tif (first)\n-\t  fprintf (file, \" (\");\n+\t  fputs (\" (\", file);\n \telse\n-\t  fprintf (file, \", \");\n+\t  fputs (\", \", file);\n \tfirst = false;\n-\tfprintf (file, bb_bitnames[i]);\n+\tfputs (bb_bitnames[i], file);\n       }\n   if (!first)\n-    fprintf (file, \")\");\n-  fprintf (file, \"\\n\");\n+    putc (')', file);\n+  putc ('\\n', file);\n \n-  fprintf (file, \"Predecessors: \");\n+  fputs (\"Predecessors: \", file);\n   FOR_EACH_EDGE (e, ei, bb->preds)\n     dump_edge_info (file, e, 0);\n \n   fprintf (file, \"\\nSuccessors: \");\n   FOR_EACH_EDGE (e, ei, bb->succs)\n     dump_edge_info (file, e, 1);\n-  fprintf (file, \"\\n\\n\");\n+  fputs (\"\\n\\n\", file);\n }\n \n /* Dumps a brief description of cfg to FILE.  */"}, {"sha": "6d84e5643b5e4d49891db67f4a3e1d7fd687a759", "filename": "gcc/ira-conflicts.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edb30094a6924e960d88f70aec56d767719aab19/gcc%2Fira-conflicts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edb30094a6924e960d88f70aec56d767719aab19/gcc%2Fira-conflicts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-conflicts.c?ref=edb30094a6924e960d88f70aec56d767719aab19", "patch": "@@ -662,7 +662,7 @@ print_hard_reg_set (FILE *file, const char *title, HARD_REG_SET set)\n {\n   int i, start;\n \n-  fprintf (file, title);\n+  fputs (title, file);\n   for (start = -1, i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n     {\n       if (TEST_HARD_REG_BIT (set, i))\n@@ -682,7 +682,7 @@ print_hard_reg_set (FILE *file, const char *title, HARD_REG_SET set)\n \t  start = -1;\n \t}\n     }\n-  fprintf (file, \"\\n\");\n+  putc ('\\n', file);\n }\n \n /* Print information about allocno or only regno (if REG_P) conflicts\n@@ -709,9 +709,9 @@ print_conflicts (FILE *file, bool reg_p)\n \t    fprintf (file, \"b%d\", bb->index);\n \t  else\n \t    fprintf (file, \"l%d\", ALLOCNO_LOOP_TREE_NODE (a)->loop->num);\n-\t  fprintf (file, \")\");\n+\t  putc (')', file);\n \t}\n-      fprintf (file, \" conflicts:\");\n+      fputs (\" conflicts:\", file);\n       if (ALLOCNO_CONFLICT_ALLOCNO_ARRAY (a) != NULL)\n \tFOR_EACH_ALLOCNO_CONFLICT (a, conflict_a, aci)\n \t  {\n@@ -743,7 +743,7 @@ print_conflicts (FILE *file, bool reg_p)\n       print_hard_reg_set (file, \";;     conflict hard regs:\",\n \t\t\t  conflicting_hard_regs);\n     }\n-  fprintf (file, \"\\n\");\n+  putc ('\\n', file);\n }\n \n /* Print information about allocno or only regno (if REG_P) conflicts"}, {"sha": "cf035d8b3fc541976107bf911751c5eee0aea3b9", "filename": "gcc/toplev.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edb30094a6924e960d88f70aec56d767719aab19/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edb30094a6924e960d88f70aec56d767719aab19/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=edb30094a6924e960d88f70aec56d767719aab19", "patch": "@@ -711,7 +711,7 @@ output_file_directive (FILE *asm_file, const char *input_name)\n #else\n   fprintf (asm_file, \"\\t.file\\t\");\n   output_quoted_string (asm_file, na);\n-  fputc ('\\n', asm_file);\n+  putc ('\\n', asm_file);\n #endif\n }\n \n@@ -1271,7 +1271,7 @@ print_to_asm_out_file (print_switch_type type, const char * text)\n     case SWITCH_TYPE_ENABLED:\n       if (prepend_sep)\n \tfputc (' ', asm_out_file);\n-      fprintf (asm_out_file, text);\n+      fputs (text, asm_out_file);\n       /* No need to return the length here as\n \t print_single_switch has already done it.  */\n       return 0;\n@@ -1300,7 +1300,7 @@ print_to_stderr (print_switch_type type, const char * text)\n       /* Drop through.  */\n \n     case SWITCH_TYPE_DESCRIPTIVE:\n-      fprintf (stderr, text);\n+      fputs (text, stderr);\n       /* No need to return the length here as\n \t print_single_switch has already done it.  */\n       return 0;\n@@ -1460,7 +1460,7 @@ init_asm_output (const char *name)\n \t     into the assembler file as comments.  */\n \t  print_version (asm_out_file, ASM_COMMENT_START);\n \t  print_switch_values (print_to_asm_out_file);\n-\t  fprintf (asm_out_file, \"\\n\");\n+\t  putc ('\\n', asm_out_file);\n \t}\n #endif\n     }"}, {"sha": "3409ef83259b237275b8fed4844c6445cfaabaf7", "filename": "gcc/tree-switch-conversion.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edb30094a6924e960d88f70aec56d767719aab19/gcc%2Ftree-switch-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edb30094a6924e960d88f70aec56d767719aab19/gcc%2Ftree-switch-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.c?ref=edb30094a6924e960d88f70aec56d767719aab19", "patch": "@@ -875,26 +875,26 @@ do_switchconv (void)\n \t\t     \"SWITCH statement (%s:%d) : ------- \\n\",\n \t\t     loc.file, loc.line);\n \t    print_gimple_stmt (dump_file, stmt, 0, TDF_SLIM);\n-\t    fprintf (dump_file, \"\\n\");\n+\t    putc ('\\n', dump_file);\n \t  }\n \n \tinfo.reason = NULL;\n \tif (process_switch (stmt))\n \t  {\n \t    if (dump_file)\n \t      {\n-\t\tfprintf (dump_file, \"Switch converted\\n\");\n-\t\tfprintf (dump_file, \"--------------------------------\\n\");\n+\t\tfputs (\"Switch converted\\n\", dump_file);\n+\t\tfputs (\"--------------------------------\\n\", dump_file);\n \t      }\n \t  }\n \telse\n \t  {\n \t    if (dump_file)\n \t      {\n \t\tgcc_assert (info.reason);\n-\t\tfprintf (dump_file, \"Bailing out - \");\n-\t\tfprintf (dump_file, info.reason);\n-\t\tfprintf (dump_file, \"--------------------------------\\n\");\n+\t\tfputs (\"Bailing out - \", dump_file);\n+\t\tfputs (info.reason, dump_file);\n+\t\tfputs (\"--------------------------------\\n\", dump_file);\n \t      }\n \t  }\n       }"}]}