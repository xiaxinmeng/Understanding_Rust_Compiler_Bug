{"sha": "0bd75e44cd11925fe09d7e9048bc14d9e976a92a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJkNzVlNDRjZDExOTI1ZmUwOWQ3ZTkwNDhiYzE0ZDllOTc2YTkyYQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2014-01-20T13:53:22Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-20T13:53:22Z"}, "message": "sem_prag.adb (Process_Import_Or_Interface): In Relaxed_RM_Semantics, support old Ada 83 style of pragma Import.\n\n2014-01-20  Arnaud Charlet  <charlet@adacore.com>\n\n\t* sem_prag.adb (Process_Import_Or_Interface): In\n\tRelaxed_RM_Semantics, support old Ada 83 style of pragma Import.\n\t(Analyze_Pragma): Ditto for pragma Export.\n\t* exp_prag.adb (Expand_Pragma_Import_Or_Interface): Handle old pragma\n\tImport style.\n\nFrom-SVN: r206810", "tree": {"sha": "34198d4dd966543d04bd6d4276df282a7f31134b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34198d4dd966543d04bd6d4276df282a7f31134b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bd75e44cd11925fe09d7e9048bc14d9e976a92a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bd75e44cd11925fe09d7e9048bc14d9e976a92a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bd75e44cd11925fe09d7e9048bc14d9e976a92a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bd75e44cd11925fe09d7e9048bc14d9e976a92a/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aca90db9e258f2c5644ead687d604337839f0db0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aca90db9e258f2c5644ead687d604337839f0db0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aca90db9e258f2c5644ead687d604337839f0db0"}], "stats": {"total": 96, "additions": 85, "deletions": 11}, "files": [{"sha": "c3e5d630d16902503444d532bbb4905d87383923", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bd75e44cd11925fe09d7e9048bc14d9e976a92a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bd75e44cd11925fe09d7e9048bc14d9e976a92a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0bd75e44cd11925fe09d7e9048bc14d9e976a92a", "patch": "@@ -1,3 +1,11 @@\n+2014-01-20  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_prag.adb (Process_Import_Or_Interface): In\n+\tRelaxed_RM_Semantics, support old Ada 83 style of pragma Import.\n+\t(Analyze_Pragma): Ditto for pragma Export.\n+\t* exp_prag.adb (Expand_Pragma_Import_Or_Interface): Handle old pragma\n+\tImport style.\n+\n 2014-01-20  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* einfo.ads: E_Abstract_State is now part of the entities that"}, {"sha": "a1bb03ca78d4b1db35f5a4b5e376604cab39df4f", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bd75e44cd11925fe09d7e9048bc14d9e976a92a/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bd75e44cd11925fe09d7e9048bc14d9e976a92a/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=0bd75e44cd11925fe09d7e9048bc14d9e976a92a", "patch": "@@ -548,7 +548,18 @@ package body Exp_Prag is\n       Init_Call : Node_Id;\n \n    begin\n-      Def_Id := Entity (Arg2 (N));\n+      --  In Relaxed_RM_Semantics, support old Ada 83 style:\n+      --  pragma Import (Entity, \"external name\");\n+\n+      if Relaxed_RM_Semantics\n+        and then List_Length (Pragma_Argument_Associations (N)) = 2\n+        and then Chars (Pragma_Identifier (N)) = Name_Import\n+        and then Nkind (Arg2 (N)) = N_String_Literal\n+      then\n+         Def_Id := Entity (Arg1 (N));\n+      else\n+         Def_Id := Entity (Arg2 (N));\n+      end if;\n \n       --  Variable case\n "}, {"sha": "b9773742d9c5e1962a9a7f21aa9f32fc62884894", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 65, "deletions": 10, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bd75e44cd11925fe09d7e9048bc14d9e976a92a/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bd75e44cd11925fe09d7e9048bc14d9e976a92a/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=0bd75e44cd11925fe09d7e9048bc14d9e976a92a", "patch": "@@ -7107,9 +7107,31 @@ package body Sem_Prag is\n          Hom_Id : Entity_Id;\n \n       begin\n-         Process_Convention (C, Def_Id);\n-         Kill_Size_Check_Code (Def_Id);\n-         Note_Possible_Modification (Get_Pragma_Arg (Arg2), Sure => False);\n+         --  In Relaxed_RM_Semantics, support old Ada 83 style:\n+         --  pragma Import (Entity, \"external name\");\n+\n+         if Relaxed_RM_Semantics\n+           and then Arg_Count = 2\n+           and then Prag_Id = Pragma_Import\n+           and then Nkind (Expression (Arg2)) = N_String_Literal\n+         then\n+            C := Convention_C;\n+            Def_Id := Get_Pragma_Arg (Arg1);\n+            Analyze (Def_Id);\n+\n+            if not Is_Entity_Name (Def_Id) then\n+               Error_Pragma_Arg (\"entity name required\", Arg1);\n+            end if;\n+\n+            Def_Id := Entity (Def_Id);\n+            Kill_Size_Check_Code (Def_Id);\n+            Note_Possible_Modification (Get_Pragma_Arg (Arg1), Sure => False);\n+\n+         else\n+            Process_Convention (C, Def_Id);\n+            Kill_Size_Check_Code (Def_Id);\n+            Note_Possible_Modification (Get_Pragma_Arg (Arg2), Sure => False);\n+         end if;\n \n          if Ekind_In (Def_Id, E_Variable, E_Constant) then\n \n@@ -8602,6 +8624,18 @@ package body Sem_Prag is\n          --  or Export pragma), then the external names must match\n \n          if Present (Interface_Name (Internal_Ent)) then\n+\n+            --  Ignore mismatching names in CodePeer mode, to support some\n+            --  old compilers which would export the same procedure under\n+            --  different names, e.g:\n+            --     procedure P;\n+            --     pragma Export_Procedure (P, \"a\");\n+            --     pragma Export_Procedure (P, \"b\");\n+\n+            if CodePeer_Mode then\n+               return;\n+            end if;\n+\n             Check_Matching_Internal_Names : declare\n                S1 : constant String_Id := Strval (Old_Name);\n                S2 : constant String_Id := Strval (New_Name);\n@@ -12225,15 +12259,36 @@ package body Sem_Prag is\n \n             Check_At_Least_N_Arguments (2);\n             Check_At_Most_N_Arguments  (4);\n-            Process_Convention (C, Def_Id);\n \n-            if Ekind (Def_Id) /= E_Constant then\n-               Note_Possible_Modification\n-                 (Get_Pragma_Arg (Arg2), Sure => False);\n-            end if;\n+            --  In Relaxed_RM_Semantics, support old Ada 83 style:\n+            --  pragma Export (Entity, \"external name\");\n \n-            Process_Interface_Name (Def_Id, Arg3, Arg4);\n-            Set_Exported (Def_Id, Arg2);\n+            if Relaxed_RM_Semantics\n+              and then Arg_Count = 2\n+              and then Nkind (Expression (Arg2)) = N_String_Literal\n+            then\n+               C := Convention_C;\n+               Def_Id := Get_Pragma_Arg (Arg1);\n+               Analyze (Def_Id);\n+\n+               if not Is_Entity_Name (Def_Id) then\n+                  Error_Pragma_Arg (\"entity name required\", Arg1);\n+               end if;\n+\n+               Def_Id := Entity (Def_Id);\n+               Set_Exported (Def_Id, Arg1);\n+\n+            else\n+               Process_Convention (C, Def_Id);\n+\n+               if Ekind (Def_Id) /= E_Constant then\n+                  Note_Possible_Modification\n+                    (Get_Pragma_Arg (Arg2), Sure => False);\n+               end if;\n+\n+               Process_Interface_Name (Def_Id, Arg3, Arg4);\n+               Set_Exported (Def_Id, Arg2);\n+            end if;\n \n             --  If the entity is a deferred constant, propagate the information\n             --  to the full view, because gigi elaborates the full view only."}]}