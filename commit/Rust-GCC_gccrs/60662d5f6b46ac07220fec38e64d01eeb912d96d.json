{"sha": "60662d5f6b46ac07220fec38e64d01eeb912d96d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA2NjJkNWY2YjQ2YWMwNzIyMGZlYzM4ZTY0ZDAxZWViOTEyZDk2ZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-07-07T17:55:26Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-07-07T17:55:26Z"}, "message": "re PR c++/37816 ([c++0x] Invalid handling of scoped enums defined at class scope)\n\n\tPR c++/37816\n\t* decl.c (build_enumerator): Don't add enumerators for a\n\tscoped enum to the enclosing class.\n\n\tPR c++/40639\n\t* decl.c (start_enum): Allow dependent underlying type.\n\n\tPR c++/40633\n\t* decl.c (finish_enum): Finish scope even in a template.\n\nFrom-SVN: r149341", "tree": {"sha": "10ea675a39bd0af7e05a1c3383ae729e5ebb46db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10ea675a39bd0af7e05a1c3383ae729e5ebb46db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60662d5f6b46ac07220fec38e64d01eeb912d96d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60662d5f6b46ac07220fec38e64d01eeb912d96d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60662d5f6b46ac07220fec38e64d01eeb912d96d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60662d5f6b46ac07220fec38e64d01eeb912d96d/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "72f90fdede20e1f9fcbc34e8001f7b28180699bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72f90fdede20e1f9fcbc34e8001f7b28180699bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72f90fdede20e1f9fcbc34e8001f7b28180699bf"}], "stats": {"total": 86, "additions": 84, "deletions": 2}, "files": [{"sha": "a0eedebf113f82905be3d5ca3ce5ea126a30d942", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60662d5f6b46ac07220fec38e64d01eeb912d96d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60662d5f6b46ac07220fec38e64d01eeb912d96d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=60662d5f6b46ac07220fec38e64d01eeb912d96d", "patch": "@@ -1,3 +1,15 @@\n+2009-07-07  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/37816\n+\t* decl.c (build_enumerator): Don't add enumerators for a\n+\tscoped enum to the enclosing class.\n+\n+\tPR c++/40639\n+\t* decl.c (start_enum): Allow dependent underlying type.\n+\n+\tPR c++/40633\n+\t* decl.c (finish_enum): Finish scope even in a template.\n+\n 2009-07-07  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* init.c: Replace %J by an explicit location. Update all calls."}, {"sha": "d7a0e0d9693099fc31a9ddb8ba26a06bbd6fb3ee", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60662d5f6b46ac07220fec38e64d01eeb912d96d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60662d5f6b46ac07220fec38e64d01eeb912d96d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=60662d5f6b46ac07220fec38e64d01eeb912d96d", "patch": "@@ -11049,7 +11049,7 @@ start_enum (tree name, tree underlying_type, bool scoped_enum_p)\n           TYPE_UNSIGNED (enumtype) = TYPE_UNSIGNED (underlying_type);\n           ENUM_UNDERLYING_TYPE (enumtype) = underlying_type;\n         }\n-      else\n+      else if (!dependent_type_p (underlying_type))\n         error (\"underlying type %<%T%> of %<%T%> must be an integral type\", \n                underlying_type, enumtype);\n     }\n@@ -11095,6 +11095,8 @@ finish_enum (tree enumtype)\n \tTREE_TYPE (TREE_VALUE (values)) = enumtype;\n       if (at_function_scope_p ())\n \tadd_stmt (build_min (TAG_DEFN, enumtype));\n+      if (SCOPED_ENUM_P (enumtype))\n+\tfinish_scope ();\n       return;\n     }\n \n@@ -11410,7 +11412,7 @@ build_enumerator (tree name, tree value, tree enumtype)\n   TREE_READONLY (decl) = 1;\n   DECL_INITIAL (decl) = value;\n \n-  if (context && context == current_class_type)\n+  if (context && context == current_class_type && !SCOPED_ENUM_P (enumtype))\n     /* In something like `struct S { enum E { i = 7 }; };' we put `i'\n        on the TYPE_FIELDS list for `S'.  (That's so that you can say\n        things like `S::i' later.)  */"}, {"sha": "9e4ec3defb15aad55c086365a12eb5eb88366c45", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60662d5f6b46ac07220fec38e64d01eeb912d96d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60662d5f6b46ac07220fec38e64d01eeb912d96d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=60662d5f6b46ac07220fec38e64d01eeb912d96d", "patch": "@@ -1,3 +1,17 @@\n+2009-07-07  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/37816\n+\t* g++.dg/cpp0x/enum7.C: New.\n+\n+\tPR c++/37946\n+\t* g++.dg/cpp0x/enum6.C: New.\n+\n+\tPR c++/40639\n+\t* g++.dg/cpp0x/enum5.C: New.\n+\n+\tPR c++/40633\n+\t* g++.dg/cpp0x/enum4.C: New.\n+\n 2009-07-07  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* gcc.dg/format/gcc_diag-1.c: Remove tests for %J."}, {"sha": "002edf0923ec4551177a5c53a6e96be16faef880", "filename": "gcc/testsuite/g++.dg/cpp0x/enum4.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60662d5f6b46ac07220fec38e64d01eeb912d96d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60662d5f6b46ac07220fec38e64d01eeb912d96d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum4.C?ref=60662d5f6b46ac07220fec38e64d01eeb912d96d", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/40633\n+// { dg-options \"-std=c++0x\" }\n+\n+template< typename T >\n+struct wrap {\n+   enum class E { val };\n+};\n+"}, {"sha": "c4ceebed71ef57e979c1ae91a5f7b3c9be210cc7", "filename": "gcc/testsuite/g++.dg/cpp0x/enum5.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60662d5f6b46ac07220fec38e64d01eeb912d96d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60662d5f6b46ac07220fec38e64d01eeb912d96d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum5.C?ref=60662d5f6b46ac07220fec38e64d01eeb912d96d", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/40639\n+// { dg-options \"-std=c++0x\" }\n+\n+template< typename T >\n+struct wrap {\n+   enum E : T { val };\n+};\n+\n+template< typename T >\n+struct dependant {\n+   enum E : typename T::type { val };\n+};\n+\n+template<typename T>\n+struct identity {\n+   typedef T type;\n+};\n+\n+wrap<int> x;\n+dependant<identity<int>> y;"}, {"sha": "e063984712552705bb4d4dcc08e23a1762367a67", "filename": "gcc/testsuite/g++.dg/cpp0x/enum6.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60662d5f6b46ac07220fec38e64d01eeb912d96d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60662d5f6b46ac07220fec38e64d01eeb912d96d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum6.C?ref=60662d5f6b46ac07220fec38e64d01eeb912d96d", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/37946\n+// { dg-options \"-std=c++0x\" }\n+\n+enum class E : char\n+{\n+    e1,\n+    e2\n+};\n+\n+inline E operator| (E a1, E a2)\n+{\n+    char ret = static_cast<char> (a1)\n+        | static_cast<char> (a2);\n+    return static_cast<E>(ret);\n+}"}, {"sha": "407672a4799685ec90a0a3b325e8538e039a47df", "filename": "gcc/testsuite/g++.dg/cpp0x/enum7.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60662d5f6b46ac07220fec38e64d01eeb912d96d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60662d5f6b46ac07220fec38e64d01eeb912d96d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum7.C?ref=60662d5f6b46ac07220fec38e64d01eeb912d96d", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/37816\n+// { dg-options \"-std=c++0x\" }\n+\n+class A\n+{\n+  enum class Color { Red, Orange, Yellow, Green, Blue, Violet };\n+  enum class Alert { Green, Yellow, Red };\n+  static const Color x = Red;\t// { dg-error \"\" }\n+  static const Color y = Color::Red;\n+  static const Alert z = Alert::Red;\n+};"}]}