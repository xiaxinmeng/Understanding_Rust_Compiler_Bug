{"sha": "9fc75b97f9394537d2e07849ecdbc38ab169f34e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZjNzViOTdmOTM5NDUzN2QyZTA3ODQ5ZWNkYmMzOGFiMTY5ZjM0ZQ==", "commit": {"author": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2006-01-01T22:00:46Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2006-01-01T22:00:46Z"}, "message": "rs6000.c (rs6000_expand_compare_and_swapqhi): New.\n\n        * config/rs6000/rs6000.c (rs6000_expand_compare_and_swapqhi): New.\n        (rs6000_split_compare_and_swapqhi): New.\n        * config/rs6000/sync.md (sync_compare_and_swap{hi,qi}): New.\n        (sync_compare_and_swapqhi_internal): New.\n        * config/rs6000/rs6000-protos.h: Declare.\n\nFrom-SVN: r109226", "tree": {"sha": "cb210fda84354e74042ad3bd3e9ca3a46603cc81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb210fda84354e74042ad3bd3e9ca3a46603cc81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fc75b97f9394537d2e07849ecdbc38ab169f34e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fc75b97f9394537d2e07849ecdbc38ab169f34e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fc75b97f9394537d2e07849ecdbc38ab169f34e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fc75b97f9394537d2e07849ecdbc38ab169f34e/comments", "author": null, "committer": null, "parents": [{"sha": "f1d592bed30e345d3dae465dca7aaa96f5addea5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1d592bed30e345d3dae465dca7aaa96f5addea5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1d592bed30e345d3dae465dca7aaa96f5addea5"}], "stats": {"total": 148, "additions": 147, "deletions": 1}, "files": [{"sha": "331c059eeac52f61274b0c81750d91690658720f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc75b97f9394537d2e07849ecdbc38ab169f34e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc75b97f9394537d2e07849ecdbc38ab169f34e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9fc75b97f9394537d2e07849ecdbc38ab169f34e", "patch": "@@ -1,4 +1,12 @@\n-2005-12-31  Andrew Pinski  <pinskia@ohysics.uc.edu>\n+2006-01-01  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/rs6000.c (rs6000_expand_compare_and_swapqhi): New.\n+\t(rs6000_split_compare_and_swapqhi): New.\n+\t* config/rs6000/sync.md (sync_compare_and_swap{hi,qi}): New.\n+\t(sync_compare_and_swapqhi_internal): New.\n+\t* config/rs6000/rs6000-protos.h: Declare.\n+\n+2005-12-31  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR tree-opt/25612\n \t* tree-ssa-pre.c (compute_avail): Treat the static chain decl as a"}, {"sha": "c1f6a045b4802b739742f6b9f5fc844ca069e383", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc75b97f9394537d2e07849ecdbc38ab169f34e/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc75b97f9394537d2e07849ecdbc38ab169f34e/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=9fc75b97f9394537d2e07849ecdbc38ab169f34e", "patch": "@@ -86,6 +86,8 @@ extern void rs6000_emit_sync (enum rtx_code, enum machine_mode,\n \t\t\t      rtx, rtx, rtx, rtx, bool);\n extern void rs6000_split_atomic_op (enum rtx_code, rtx, rtx, rtx, rtx, rtx);\n extern void rs6000_split_compare_and_swap (rtx, rtx, rtx, rtx, rtx);\n+extern void rs6000_expand_compare_and_swapqhi (rtx, rtx, rtx, rtx);\n+extern void rs6000_split_compare_and_swapqhi (rtx, rtx, rtx, rtx, rtx, rtx);\n extern void rs6000_split_lock_test_and_set (rtx, rtx, rtx, rtx);\n extern void rs6000_emit_swdivsf (rtx, rtx, rtx);\n extern void rs6000_emit_swdivdf (rtx, rtx, rtx);"}, {"sha": "196fb2f87a05d3fa42bafb00d1d12a157abf4095", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc75b97f9394537d2e07849ecdbc38ab169f34e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc75b97f9394537d2e07849ecdbc38ab169f34e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=9fc75b97f9394537d2e07849ecdbc38ab169f34e", "patch": "@@ -12275,6 +12275,96 @@ rs6000_split_lock_test_and_set (rtx retval, rtx mem, rtx val, rtx scratch)\n   emit_insn (gen_isync ());\n }\n \n+void\n+rs6000_expand_compare_and_swapqhi (rtx dst, rtx mem, rtx oldval, rtx newval)\n+{\n+  enum machine_mode mode = GET_MODE (mem);\n+  rtx addrSI, align, wdst, shift, mask;\n+  HOST_WIDE_INT shift_mask = mode == QImode ? 0x18 : 0x10;\n+  HOST_WIDE_INT imask = GET_MODE_MASK (mode);\n+\n+  /* Shift amount for subword relative to aligned word.  */\n+  addrSI = force_reg (SImode, gen_lowpart_common (SImode, XEXP (mem, 0)));\n+  shift = gen_reg_rtx (SImode);\n+  emit_insn (gen_rlwinm (shift, addrSI, GEN_INT (3),\n+\t\t\t GEN_INT (shift_mask)));\n+  emit_insn (gen_xorsi3 (shift, shift, GEN_INT (shift_mask)));\n+\n+  /* Shift and mask old value into position within word.  */\n+  oldval = convert_modes (SImode, mode, oldval, 1);\n+  oldval = expand_binop (SImode, and_optab,\n+\t\t\t oldval, GEN_INT (imask), NULL_RTX,\n+\t\t\t 1, OPTAB_LIB_WIDEN);\n+  emit_insn (gen_ashlsi3 (oldval, oldval, shift));\n+\n+  /* Shift and mask new value into position within word.  */\n+  newval = convert_modes (SImode, mode, newval, 1);\n+  newval = expand_binop (SImode, and_optab,\n+\t\t\t newval, GEN_INT (imask), NULL_RTX,\n+\t\t\t 1, OPTAB_LIB_WIDEN);\n+  emit_insn (gen_ashlsi3 (newval, newval, shift));\n+\n+  /* Mask for insertion.  */\n+  mask = gen_reg_rtx (SImode);\n+  emit_move_insn (mask, GEN_INT (imask));\n+  emit_insn (gen_ashlsi3 (mask, mask, shift));\n+\n+  /* Address of aligned word containing subword.  */\n+  align = expand_binop (Pmode, and_optab, XEXP (mem, 0), GEN_INT (-4),\n+\t\t\tNULL_RTX, 1, OPTAB_LIB_WIDEN);\n+  mem = change_address (mem, SImode, align);\n+  set_mem_align (mem, 32);\n+  MEM_VOLATILE_P (mem) = 1;\n+\n+  wdst = gen_reg_rtx (SImode);\n+  emit_insn (gen_sync_compare_and_swapqhi_internal (wdst, mask,\n+\t\t\t\t\t\t    oldval, newval, mem));\n+\n+  emit_move_insn (dst, gen_lowpart (mode, wdst));\n+}\n+\n+void\n+rs6000_split_compare_and_swapqhi (rtx dest, rtx mask,\n+\t\t\t\t  rtx oldval, rtx newval, rtx mem,\n+\t\t\t\t  rtx scratch)\n+{\n+  rtx label1, label2, x, cond = gen_rtx_REG (CCmode, CR0_REGNO);\n+\n+  emit_insn (gen_memory_barrier ());\n+  label1 = gen_rtx_LABEL_REF (VOIDmode, gen_label_rtx ());\n+  label2 = gen_rtx_LABEL_REF (VOIDmode, gen_label_rtx ());\n+  emit_label (XEXP (label1, 0));\n+\n+  emit_load_locked (SImode, scratch, mem);\n+\n+  /* Mask subword within loaded value for comparison with oldval.\n+     Use UNSPEC_AND to avoid clobber.*/\n+  emit_insn (gen_rtx_SET (SImode, dest,\n+\t\t\t  gen_rtx_UNSPEC (SImode,\n+\t\t\t\t\t  gen_rtvec (2, scratch, mask),\n+\t\t\t\t\t  UNSPEC_AND)));\n+\n+  x = gen_rtx_COMPARE (CCmode, dest, oldval);\n+  emit_insn (gen_rtx_SET (VOIDmode, cond, x));\n+\n+  x = gen_rtx_NE (VOIDmode, cond, const0_rtx);\n+  emit_unlikely_jump (x, label2);\n+\n+  /* Clear subword within loaded value for insertion of new value.  */\n+  emit_insn (gen_rtx_SET (SImode, scratch,\n+\t\t\t  gen_rtx_AND (SImode,\n+\t\t\t\t       gen_rtx_NOT (SImode, mask), scratch)));\n+  emit_insn (gen_iorsi3 (scratch, scratch, newval));\n+  emit_store_conditional (SImode, cond, mem, scratch);\n+\n+  x = gen_rtx_NE (VOIDmode, cond, const0_rtx);\n+  emit_unlikely_jump (x, label1);\n+\n+  emit_insn (gen_isync ());\n+  emit_label (XEXP (label2, 0));\n+}\n+\n+\n   /* Emit instructions to move SRC to DST.  Called by splitters for\n    multi-register moves.  It will emit at most one instruction for\n    each register that is accessed; that is, it won't emit li/lis pairs"}, {"sha": "b244ef639863a074929c1a3278c4b7d3580a75aa", "filename": "gcc/config/rs6000/sync.md", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc75b97f9394537d2e07849ecdbc38ab169f34e/gcc%2Fconfig%2Frs6000%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc75b97f9394537d2e07849ecdbc38ab169f34e/gcc%2Fconfig%2Frs6000%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsync.md?ref=9fc75b97f9394537d2e07849ecdbc38ab169f34e", "patch": "@@ -86,6 +86,52 @@\n   DONE;\n })\n \n+(define_expand \"sync_compare_and_swaphi\"\n+  [(match_operand:HI 0 \"gpc_reg_operand\" \"\")\n+   (match_operand:HI 1 \"memory_operand\" \"\")\n+   (match_operand:HI 2 \"gpc_reg_operand\" \"\")\n+   (match_operand:HI 3 \"gpc_reg_operand\" \"\")]\n+  \"TARGET_POWERPC\"\n+{\n+  rs6000_expand_compare_and_swapqhi (operands[0], operands[1],\n+\t\t\t\t     operands[2], operands[3]);\n+  DONE;\n+})\n+\n+(define_expand \"sync_compare_and_swapqi\"\n+  [(match_operand:QI 0 \"gpc_reg_operand\" \"\")\n+   (match_operand:QI 1 \"memory_operand\" \"\")\n+   (match_operand:QI 2 \"gpc_reg_operand\" \"\")\n+   (match_operand:QI 3 \"gpc_reg_operand\" \"\")]\n+  \"TARGET_POWERPC\"\n+{\n+  rs6000_expand_compare_and_swapqhi (operands[0], operands[1],\n+\t\t\t\t     operands[2], operands[3]);\n+  DONE;\n+})\n+\n+(define_insn_and_split \"sync_compare_and_swapqhi_internal\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r\")\n+\t(match_operand:SI 4 \"memory_operand\" \"+Z\"))\n+   (set (match_dup 4)\n+        (unspec:SI\n+          [(match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n+           (match_operand:SI 2 \"gpc_reg_operand\" \"r\")\n+           (match_operand:SI 3 \"gpc_reg_operand\" \"r\")]\n+          UNSPEC_CMPXCHG))\n+   (clobber (match_scratch:SI 5 \"=&r\"))\n+   (clobber (match_scratch:CC 6 \"=&x\"))]\n+  \"TARGET_POWERPC\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+{\n+  rs6000_split_compare_and_swapqhi (operands[0], operands[1],\n+\t\t\t\t    operands[2], operands[3], operands[4],\n+\t\t\t\t    operands[5]);\n+  DONE;\n+})\n+\n (define_insn_and_split \"sync_lock_test_and_set<mode>\"\n   [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=&r\")\n \t(match_operand:GPR 1 \"memory_operand\" \"+Z\"))"}]}