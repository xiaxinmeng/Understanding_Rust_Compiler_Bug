{"sha": "446f52f40bb4083e0e4e92de0442141a1d3d633d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ2ZjUyZjQwYmI0MDgzZTBlNGU5MmRlMDQ0MjE0MWExZDNkNjMzZA==", "commit": {"author": {"name": "Graham Stott", "email": "grahams@gcc.gnu.org", "date": "2004-06-05T07:59:39Z"}, "committer": {"name": "Graham Stott", "email": "grahams@gcc.gnu.org", "date": "2004-06-05T07:59:39Z"}, "message": "combine.c (simplify_shift_const): Check shift amount is a CONST_INT.\n\n\n\t* combine.c(simplify_shift_const): Check shift amount is a\n\tCONST_INT.\n\nFrom-SVN: r82644", "tree": {"sha": "90e178a8dd180582334958da2b47f629ea619198", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90e178a8dd180582334958da2b47f629ea619198"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/446f52f40bb4083e0e4e92de0442141a1d3d633d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/446f52f40bb4083e0e4e92de0442141a1d3d633d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/446f52f40bb4083e0e4e92de0442141a1d3d633d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/446f52f40bb4083e0e4e92de0442141a1d3d633d/comments", "author": null, "committer": null, "parents": [{"sha": "90aa6719a03ca37a01bf94240dbf02fb4b1eb3e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90aa6719a03ca37a01bf94240dbf02fb4b1eb3e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90aa6719a03ca37a01bf94240dbf02fb4b1eb3e0"}], "stats": {"total": 67, "additions": 37, "deletions": 30}, "files": [{"sha": "1e010f18dc7726e71e685d5941ff4d6fb00de5ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 27, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/446f52f40bb4083e0e4e92de0442141a1d3d633d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/446f52f40bb4083e0e4e92de0442141a1d3d633d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=446f52f40bb4083e0e4e92de0442141a1d3d633d", "patch": "@@ -1,32 +1,37 @@\n+2004-06-05  Graham Stott  <graham.stott@btinternet.com>\n+\n+\t* combine.c(simplify_shift_const): Check shift amount is a\n+\tCONST_INT.\n+\n 2004-06-05  Danny Smith  <dannysmith@users.sourceforge.net>\n \n-        * toplev.c (init_asm_output): Add explicit 'b' to mode when\n-        opening asm_out_file. \n-        * c-pch.c (c_common_write_pch): Remove unnecessary fflush before\n-        reading asm_out_file. Replace fflush after reading asm_out_file\n-        with fseek.\n-        * hosthooks-def.h (HOST_HOOKS_GT_PCH_ALLOC_GRANULARITY): Define\n-        default and add to HOST_HOOKS_INITIALIZER. \n-        * hosthooks.h (gt_pch_alloc_granularity): Declare hook function.\n-        * ggc-common.c (default_gt_pch_alloc_granularity): New function.\n-        (gt_pch_save): Use host_hooks.gt_pch_alloc_granularity \n-        to set mmi.offset padding.\n-         * config.gcc (i[34567]86-*-mingw32*): Set target_gtfiles to\n-        $(srcdir)/config/i386/winnt.c.\n-        (i[34567]86-*-pe | i[34567]86-*-cygwin*): Likewise.\n-        (i[34567]86-*-uwin*): Likewise.\n-        *i[34567]86-*-interix3*): Likewise.\n-        * config.host (i[34567]86-*-mingw32*): Set out_host_hook_obj.\n-        * config/i386/host-mingw32.c: New file.\n-        * config/i386/x-mingw32: Add rule for host-mingw32.o.\n-        * config/i386/winnt.c: (struct extern_list) Tag as GTY.\n-        (extern_head): Likewise.\n-        (struct export_list) Likewise.\n-        (export_head): Likewise.\n-        (i386_pe_record_external_function): Use ggc_alloc.\n-        (i386_pe_record_exported_symbol): Likewise.\n-        Include \"gt-winnt.h\" at end.\n-        * doc/hostconfig.texi: Document\n+\t* toplev.c (init_asm_output): Add explicit 'b' to mode when\n+\topening asm_out_file. \n+\t* c-pch.c (c_common_write_pch): Remove unnecessary fflush before\n+\treading asm_out_file. Replace fflush after reading asm_out_file\n+\twith fseek.\n+\t* hosthooks-def.h (HOST_HOOKS_GT_PCH_ALLOC_GRANULARITY): Define\n+\tdefault and add to HOST_HOOKS_INITIALIZER. \n+\t* hosthooks.h (gt_pch_alloc_granularity): Declare hook function.\n+\t* ggc-common.c (default_gt_pch_alloc_granularity): New function.\n+\t(gt_pch_save): Use host_hooks.gt_pch_alloc_granularity \n+\tto set mmi.offset padding.\n+\t * config.gcc (i[34567]86-*-mingw32*): Set target_gtfiles to\n+\t$(srcdir)/config/i386/winnt.c.\n+\t(i[34567]86-*-pe | i[34567]86-*-cygwin*): Likewise.\n+\t(i[34567]86-*-uwin*): Likewise.\n+\t*i[34567]86-*-interix3*): Likewise.\n+\t* config.host (i[34567]86-*-mingw32*): Set out_host_hook_obj.\n+\t* config/i386/host-mingw32.c: New file.\n+\t* config/i386/x-mingw32: Add rule for host-mingw32.o.\n+\t* config/i386/winnt.c: (struct extern_list) Tag as GTY.\n+\t(extern_head): Likewise.\n+\t(struct export_list) Likewise.\n+\t(export_head): Likewise.\n+\t(i386_pe_record_external_function): Use ggc_alloc.\n+\t(i386_pe_record_exported_symbol): Likewise.\n+\tInclude \"gt-winnt.h\" at end.\n+\t* doc/hostconfig.texi: Document\n \tHOST_HOOKS_GT_PCH_ALLOC_GRANULARITY.\n \n 2004-06-04  Bernardo Innocenti  <bernie@develer.com>"}, {"sha": "44ca720bc19fbdc59aeb57cfd39e7d65fdc99253", "filename": "gcc/combine.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/446f52f40bb4083e0e4e92de0442141a1d3d633d/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/446f52f40bb4083e0e4e92de0442141a1d3d633d/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=446f52f40bb4083e0e4e92de0442141a1d3d633d", "patch": "@@ -8763,9 +8763,10 @@ simplify_shift_const (rtx x, enum rtx_code code,\n \t     logical expression, make a new logical expression, and apply\n \t     the inverse distributive law.  This also can't be done\n \t     for some (ashiftrt (xor)).  */\n-\t  if (code != ASHIFTRT || GET_CODE (varop)!= XOR\n-\t      || 0 <= trunc_int_for_mode (INTVAL (XEXP (varop, 1)),\n-\t\t\t\t\t  shift_mode))\n+\t  if (GET_CODE (XEXP (varop, 1)) == CONST_INT\n+\t     && !(code == ASHIFTRT && GET_CODE (varop) == XOR\n+\t          && 0 > trunc_int_for_mode (INTVAL (XEXP (varop, 1)),\n+\t\t\t\t\t     shift_mode)))\n \t    {\n \t      rtx lhs = simplify_shift_const (NULL_RTX, code, shift_mode,\n \t\t\t\t\t      XEXP (varop, 0), count);\n@@ -8776,6 +8777,7 @@ simplify_shift_const (rtx x, enum rtx_code code,\n \t      varop = apply_distributive_law (varop);\n \n \t      count = 0;\n+\t      continue; \n \t    }\n \t  break;\n "}]}