{"sha": "ec1db2a9949e828d4b65757c8a3de2bde37ef493", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWMxZGIyYTk5NDllODI4ZDRiNjU3NTdjOGEzZGUyYmRlMzdlZjQ5Mw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-10-11T07:38:08Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-10-11T07:38:08Z"}, "message": "lto-streamer-out.c (collect_block_tree_leafs): New helper.\n\n2016-10-11  Richard Biener  <rguenther@suse.de>\n\n\t* lto-streamer-out.c (collect_block_tree_leafs): New helper.\n\t(output_function): Properly stream the whole block tree.\n\t* lto-streamer-in.c (input_function): Likewise.\n\nFrom-SVN: r240964", "tree": {"sha": "389f2ee21069cd3fbc3717a0d83c00f200c8a926", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/389f2ee21069cd3fbc3717a0d83c00f200c8a926"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec1db2a9949e828d4b65757c8a3de2bde37ef493", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec1db2a9949e828d4b65757c8a3de2bde37ef493", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec1db2a9949e828d4b65757c8a3de2bde37ef493", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec1db2a9949e828d4b65757c8a3de2bde37ef493/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "038b5cc0d5f5e5df2be06844d9f53e9c08fc985a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/038b5cc0d5f5e5df2be06844d9f53e9c08fc985a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/038b5cc0d5f5e5df2be06844d9f53e9c08fc985a"}], "stats": {"total": 33, "additions": 30, "deletions": 3}, "files": [{"sha": "61d94b801bfb7dd1dc41f90d972cebf5a591f6a5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec1db2a9949e828d4b65757c8a3de2bde37ef493/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec1db2a9949e828d4b65757c8a3de2bde37ef493/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ec1db2a9949e828d4b65757c8a3de2bde37ef493", "patch": "@@ -1,3 +1,9 @@\n+2016-10-11  Richard Biener  <rguenther@suse.de>\n+\n+\t* lto-streamer-out.c (collect_block_tree_leafs): New helper.\n+\t(output_function): Properly stream the whole block tree.\n+\t* lto-streamer-in.c (input_function): Likewise.\n+\n 2016-10-11  Marek Polacek  <polacek@redhat.com>\n \n \t* Makefile.in (C_COMMON_OBJS): Add c-family/c-warn.o."}, {"sha": "f852bf942078b3de3b02e1210b07afce3f706383", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec1db2a9949e828d4b65757c8a3de2bde37ef493/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec1db2a9949e828d4b65757c8a3de2bde37ef493/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=ec1db2a9949e828d4b65757c8a3de2bde37ef493", "patch": "@@ -1036,6 +1036,9 @@ input_function (tree fn_decl, struct data_in *data_in,\n \n   /* Read the tree of lexical scopes for the function.  */\n   DECL_INITIAL (fn_decl) = stream_read_tree (ib, data_in);\n+  unsigned block_leaf_count = streamer_read_uhwi (ib);\n+  while (block_leaf_count--)\n+    stream_read_tree (ib, data_in);\n \n   if (!streamer_read_uhwi (ib))\n     return;"}, {"sha": "22c4140cca8a2eecb66e21662654148bd20778b7", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec1db2a9949e828d4b65757c8a3de2bde37ef493/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec1db2a9949e828d4b65757c8a3de2bde37ef493/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=ec1db2a9949e828d4b65757c8a3de2bde37ef493", "patch": "@@ -2016,6 +2016,18 @@ output_struct_function_base (struct output_block *ob, struct function *fn)\n }\n \n \n+/* Collect all leaf BLOCKs beyond ROOT into LEAFS.  */\n+\n+static void\n+collect_block_tree_leafs (tree root, vec<tree> &leafs)\n+{\n+  for (root = BLOCK_SUBBLOCKS (root); root; root = BLOCK_CHAIN (root))\n+    if (! BLOCK_SUBBLOCKS (root))\n+      leafs.safe_push (root);\n+    else\n+      collect_block_tree_leafs (BLOCK_SUBBLOCKS (root), leafs);\n+}\n+\n /* Output the body of function NODE->DECL.  */\n \n static void\n@@ -2048,10 +2060,16 @@ output_function (struct cgraph_node *node)\n   streamer_write_chain (ob, DECL_ARGUMENTS (function), true);\n \n   /* Output DECL_INITIAL for the function, which contains the tree of\n-     lexical scopes.\n-     ???  This only streams the outermost block because we do not\n-     recurse into BLOCK_SUBBLOCKS but re-build those on stream-in.  */\n+     lexical scopes.  */\n   stream_write_tree (ob, DECL_INITIAL (function), true);\n+  /* As we do not recurse into BLOCK_SUBBLOCKS but only BLOCK_SUPERCONTEXT\n+     collect block tree leafs and stream those.  */\n+  auto_vec<tree> block_tree_leafs;\n+  if (DECL_INITIAL (function))\n+    collect_block_tree_leafs (DECL_INITIAL (function), block_tree_leafs);\n+  streamer_write_uhwi (ob, block_tree_leafs.length ());\n+  for (unsigned i = 0; i < block_tree_leafs.length (); ++i)\n+    stream_write_tree (ob, block_tree_leafs[i], true);\n \n   /* We also stream abstract functions where we stream only stuff needed for\n      debug info.  */"}]}