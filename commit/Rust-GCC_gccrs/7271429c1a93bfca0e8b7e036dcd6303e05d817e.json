{"sha": "7271429c1a93bfca0e8b7e036dcd6303e05d817e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI3MTQyOWMxYTkzYmZjYTBlOGI3ZTAzNmRjZDYzMDNlMDVkODE3ZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-25T10:24:16Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-25T10:24:16Z"}, "message": "[multiple changes]\n\n2013-04-25  Matthew Heaney  <heaney@adacore.com>\n\n\t* a-rbtgbo.adb, a-crbtgo.adb (Generic_Equal): do not test for\n\ttampering when container empty.\n\t* a-crbtgk.adb (Ceiling, Find, Floor): ditto.\n\t(Generic_Conditional_Insert, Generic_Conditional_Insert_With_Hint):\n\tditto.\n\n2013-04-25  Ed Schonberg  <schonberg@adacore.com>\n\n\t* par-ch12.adb: Move aspects from package specification to\n\tgeneric package declaration.\n\t* sem_ch12.adb: Analyze aspect specifications before building\n\tand analyzing the generic copy, so that the generated pragmas\n\tare properly taken into account.\n\t* sem_ch13.adb: For compilation unit aspects that apply to a\n\tgeneric package declaration, insert corresponding pragmas ahead\n\tof visible declarations.\n\t* sprint.adb: Display properly the aspects of a generic type\n\tdeclaration.\n\n2013-04-25  Robert Dewar  <dewar@adacore.com>\n\n\t* frontend.adb: Minor reformatting.\n\n2013-04-25  Ed Schonberg  <schonberg@adacore.com>\n\n\t* einfo.ads: Extend documentation on use of Is_Private_Ancestor\n\tfor untagged types.\n\t* sem_ch3.adb (Is_Visible_Component): Refine predicate for the\n\tcase of untagged types derived from private types, to reject\n\tillegal selected components.\n\nFrom-SVN: r198285", "tree": {"sha": "5b761ff8a3430f85f2fe71c6bd7fb50553b2d45c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b761ff8a3430f85f2fe71c6bd7fb50553b2d45c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7271429c1a93bfca0e8b7e036dcd6303e05d817e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7271429c1a93bfca0e8b7e036dcd6303e05d817e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7271429c1a93bfca0e8b7e036dcd6303e05d817e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7271429c1a93bfca0e8b7e036dcd6303e05d817e/comments", "author": null, "committer": null, "parents": [{"sha": "a5226d6cf63c9e43cf34783278df4b803f6f5e1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5226d6cf63c9e43cf34783278df4b803f6f5e1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5226d6cf63c9e43cf34783278df4b803f6f5e1a"}], "stats": {"total": 172, "additions": 145, "deletions": 27}, "files": [{"sha": "21f43ac81a1b6422365f3b86e9dd63155cde688e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7271429c1a93bfca0e8b7e036dcd6303e05d817e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7271429c1a93bfca0e8b7e036dcd6303e05d817e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7271429c1a93bfca0e8b7e036dcd6303e05d817e", "patch": "@@ -1,3 +1,36 @@\n+2013-04-25  Matthew Heaney  <heaney@adacore.com>\n+\n+\t* a-rbtgbo.adb, a-crbtgo.adb (Generic_Equal): do not test for\n+\ttampering when container empty.\n+\t* a-crbtgk.adb (Ceiling, Find, Floor): ditto.\n+\t(Generic_Conditional_Insert, Generic_Conditional_Insert_With_Hint):\n+\tditto.\n+\n+2013-04-25  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* par-ch12.adb: Move aspects from package specification to\n+\tgeneric package declaration.\n+\t* sem_ch12.adb: Analyze aspect specifications before building\n+\tand analyzing the generic copy, so that the generated pragmas\n+\tare properly taken into account.\n+\t* sem_ch13.adb: For compilation unit aspects that apply to a\n+\tgeneric package declaration, insert corresponding pragmas ahead\n+\tof visible declarations.\n+\t* sprint.adb: Display properly the aspects of a generic type\n+\tdeclaration.\n+\n+2013-04-25  Robert Dewar  <dewar@adacore.com>\n+\n+\t* frontend.adb: Minor reformatting.\n+\n+2013-04-25  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* einfo.ads: Extend documentation on use of Is_Private_Ancestor\n+\tfor untagged types.\n+\t* sem_ch3.adb (Is_Visible_Component): Refine predicate for the\n+\tcase of untagged types derived from private types, to reject\n+\tillegal selected components.\n+\n 2013-04-25  Gary Dismukes  <dismukes@adacore.com>\n \n \t* sem_util.adb (Is_Dependent_Component_Of_Mutable_Object): Test"}, {"sha": "7cc3b250c5af8e8bb134f3aec0d81d92e716a9b3", "filename": "gcc/ada/a-crbtgk.adb", "status": "modified", "additions": 47, "deletions": 9, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7271429c1a93bfca0e8b7e036dcd6303e05d817e/gcc%2Fada%2Fa-crbtgk.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7271429c1a93bfca0e8b7e036dcd6303e05d817e/gcc%2Fada%2Fa-crbtgk.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-crbtgk.adb?ref=7271429c1a93bfca0e8b7e036dcd6303e05d817e", "patch": "@@ -45,6 +45,13 @@ package body Ada.Containers.Red_Black_Trees.Generic_Keys is\n       X : Node_Access;\n \n    begin\n+      --  If the container is empty, return a result immediately, so that we do\n+      --  not manipulate the tamper bits unnecessarily.\n+\n+      if Tree.Root = null then\n+         return null;\n+      end if;\n+\n       --  Per AI05-0022, the container implementation is required to detect\n       --  element tampering by a generic actual subprogram.\n \n@@ -87,6 +94,13 @@ package body Ada.Containers.Red_Black_Trees.Generic_Keys is\n       Result : Node_Access;\n \n    begin\n+      --  If the container is empty, return a result immediately, so that we do\n+      --  not manipulate the tamper bits unnecessarily.\n+\n+      if Tree.Root = null then\n+         return null;\n+      end if;\n+\n       --  Per AI05-0022, the container implementation is required to detect\n       --  element tampering by a generic actual subprogram.\n \n@@ -137,6 +151,13 @@ package body Ada.Containers.Red_Black_Trees.Generic_Keys is\n       X : Node_Access;\n \n    begin\n+      --  If the container is empty, return a result immediately, so that we do\n+      --  not manipulate the tamper bits unnecessarily.\n+\n+      if Tree.Root = null then\n+         return null;\n+      end if;\n+\n       --  Per AI05-0022, the container implementation is required to detect\n       --  element tampering by a generic actual subprogram.\n \n@@ -198,6 +219,15 @@ package body Ada.Containers.Red_Black_Trees.Generic_Keys is\n       --  its previous neighbor, in order for the conditional insertion to\n       --  succeed.\n \n+      --  Handle insertion into an empty container as a special case, so that\n+      --  we do not manipulate the tamper bits unnecessarily.\n+\n+      if Tree.Root = null then\n+         Insert_Post (Tree, null, True, Node);\n+         Inserted := True;\n+         return;\n+      end if;\n+\n       --  We search the tree to find the nearest neighbor of Key, which is\n       --  either the smallest node greater than Key (Inserted is True), or the\n       --  largest node less or equivalent to Key (Inserted is False).\n@@ -227,9 +257,9 @@ package body Ada.Containers.Red_Black_Trees.Generic_Keys is\n \n       if Inserted then\n \n-         --  Either Tree is empty, or Key is less than Y. If Y is the first\n-         --  node in the tree, then there are no other nodes that we need to\n-         --  search for, and we insert a new node into the tree.\n+         --  Key is less than Y. If Y is the first node in the tree, then there\n+         --  are no other nodes that we need to search for, and we insert a new\n+         --  node into the tree.\n \n          if Y = Tree.First then\n             Insert_Post (Tree, Y, True, Node);\n@@ -316,18 +346,26 @@ package body Ada.Containers.Red_Black_Trees.Generic_Keys is\n       --  is not a search and the only comparisons that occur are with\n       --  the hint and its neighbor.\n \n-      --  If Position is null, this is interpreted to mean that Key is\n-      --  large relative to the nodes in the tree. If the tree is empty,\n-      --  or Key is greater than the last node in the tree, then we're\n-      --  done; otherwise the hint was \"wrong\" and we must search.\n+      --  Handle insertion into an empty container as a special case, so that\n+      --  we do not manipulate the tamper bits unnecessarily.\n+\n+      if Tree.Root = null then\n+         Insert_Post (Tree, null, True, Node);\n+         Inserted := True;\n+         return;\n+      end if;\n+\n+      --  If Position is null, this is interpreted to mean that Key is large\n+      --  relative to the nodes in the tree. If Key is greater than the last\n+      --  node in the tree, then we're done; otherwise the hint was \"wrong\" and\n+      --  we must search.\n \n       if Position = null then  -- largest\n          begin\n             B := B + 1;\n             L := L + 1;\n \n-            Compare :=\n-              Tree.Last = null or else Is_Greater_Key_Node (Key, Tree.Last);\n+            Compare := Is_Greater_Key_Node (Key, Tree.Last);\n \n             L := L - 1;\n             B := B - 1;"}, {"sha": "1255ff591559f8229a1de22c8cef12adadfbee28", "filename": "gcc/ada/a-crbtgo.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7271429c1a93bfca0e8b7e036dcd6303e05d817e/gcc%2Fada%2Fa-crbtgo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7271429c1a93bfca0e8b7e036dcd6303e05d817e/gcc%2Fada%2Fa-crbtgo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-crbtgo.adb?ref=7271429c1a93bfca0e8b7e036dcd6303e05d817e", "patch": "@@ -646,6 +646,13 @@ package body Ada.Containers.Red_Black_Trees.Generic_Operations is\n          return False;\n       end if;\n \n+      --  If the containers are empty, return a result immediately, so as to\n+      --  not manipulate the tamper bits unnecessarily.\n+\n+      if Left.Length = 0 then\n+         return True;\n+      end if;\n+\n       --  Per AI05-0022, the container implementation is required to detect\n       --  element tampering by a generic actual subprogram.\n "}, {"sha": "ddf3fe2262a184baf8522c493675003bfb7b1c7a", "filename": "gcc/ada/a-rbtgbo.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7271429c1a93bfca0e8b7e036dcd6303e05d817e/gcc%2Fada%2Fa-rbtgbo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7271429c1a93bfca0e8b7e036dcd6303e05d817e/gcc%2Fada%2Fa-rbtgbo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-rbtgbo.adb?ref=7271429c1a93bfca0e8b7e036dcd6303e05d817e", "patch": "@@ -626,6 +626,13 @@ package body Ada.Containers.Red_Black_Trees.Generic_Bounded_Operations is\n          return False;\n       end if;\n \n+      --  If the containers are empty, return a result immediately, so as to\n+      --  not manipulate the tamper bits unnecessarily.\n+\n+      if Left.Length = 0 then\n+         return True;\n+      end if;\n+\n       --  Per AI05-0022, the container implementation is required to detect\n       --  element tampering by a generic actual subprogram.\n "}, {"sha": "bd58928e37b005ea22f7919bf28ef649d6baafb8", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7271429c1a93bfca0e8b7e036dcd6303e05d817e/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7271429c1a93bfca0e8b7e036dcd6303e05d817e/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=7271429c1a93bfca0e8b7e036dcd6303e05d817e", "patch": "@@ -1753,12 +1753,14 @@ package Einfo is\n --       is defined for the type.\n \n --    Has_Private_Ancestor (Flag151)\n---       Applies to type extensions. True if some ancestor is derived from a\n---       private type, making some components invisible and aggregates illegal.\n---       This flag is set at the point of derivation. The legality of the\n---       aggregate must be rechecked because it also depends on the visibility\n---       at the point the aggregate is resolved. See sem_aggr.adb.\n---       This is part of AI05-0115.\n+--       Applies to untagged derived types and to type extensions. True when\n+--       some ancestor is derived from a private type, making some components\n+--       invisible and aggregates illegal. Used to check the legality of\n+--       selected components and aggregates. The flag is set at the point of\n+--       derivation.\n+--       The legality of an aggregate of a type with a private ancestor  must\n+--       be checked because it also depends on the visibility at the point the\n+--       aggregate is resolved. See sem_aggr.adb. This is part of AI05-0115.\n \n --    Has_Private_Declaration (Flag155)\n --       Defined in all entities. Returns True if it is the defining entity"}, {"sha": "7c56ac9789f0a950fd9fbce4097262cd37391abd", "filename": "gcc/ada/frontend.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7271429c1a93bfca0e8b7e036dcd6303e05d817e/gcc%2Fada%2Ffrontend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7271429c1a93bfca0e8b7e036dcd6303e05d817e/gcc%2Fada%2Ffrontend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffrontend.adb?ref=7271429c1a93bfca0e8b7e036dcd6303e05d817e", "patch": "@@ -185,10 +185,13 @@ begin\n       --  Check for VAX Float\n \n       if Targparm.VAX_Float_On_Target then\n+\n          --  pragma Float_Representation (VAX_Float);\n+\n          Opt.Float_Format := 'V';\n \n          --  pragma Long_Float (G_Float);\n+\n          Opt.Float_Format_Long := 'G';\n \n          Set_Standard_Fpt_Formats;"}, {"sha": "3c192f2877b80a1ef4743bc5fb83a0ae83c6dd1a", "filename": "gcc/ada/par-ch12.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7271429c1a93bfca0e8b7e036dcd6303e05d817e/gcc%2Fada%2Fpar-ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7271429c1a93bfca0e8b7e036dcd6303e05d817e/gcc%2Fada%2Fpar-ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch12.adb?ref=7271429c1a93bfca0e8b7e036dcd6303e05d817e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -204,6 +204,11 @@ package body Ch12 is\n          Gen_Decl := New_Node (N_Generic_Package_Declaration, Gen_Sloc);\n          Set_Specification (Gen_Decl, P_Package (Pf_Spcn));\n \n+         --  Aspects have been parsed by the package spec. Move them to the\n+         --  generic declaration where they belong.\n+\n+         Move_Aspects (Specification (Gen_Decl), Gen_Decl);\n+\n       else\n          Gen_Decl := New_Node (N_Generic_Subprogram_Declaration, Gen_Sloc);\n "}, {"sha": "8652c706c85838d8409d290196c5711ee51d8fe1", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7271429c1a93bfca0e8b7e036dcd6303e05d817e/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7271429c1a93bfca0e8b7e036dcd6303e05d817e/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=7271429c1a93bfca0e8b7e036dcd6303e05d817e", "patch": "@@ -3021,6 +3021,13 @@ package body Sem_Ch12 is\n       Id := Defining_Entity (N);\n       Generate_Definition (Id);\n \n+      --  Analyze aspects now, so that generated pragmas appear in the\n+      --  declarations before building and analyzing the generic copy.\n+\n+      if Has_Aspects (N) then\n+         Analyze_Aspect_Specifications (N, Id);\n+      end if;\n+\n       --  Expansion is not applied to generic units\n \n       Start_Generic;\n@@ -3079,9 +3086,6 @@ package body Sem_Ch12 is\n          end if;\n       end if;\n \n-      if Has_Aspects (N) then\n-         Analyze_Aspect_Specifications (N, Id);\n-      end if;\n    end Analyze_Generic_Package_Declaration;\n \n    --------------------------------------------"}, {"sha": "1496912cdb4f823367f377a4006214fac53f94a7", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7271429c1a93bfca0e8b7e036dcd6303e05d817e/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7271429c1a93bfca0e8b7e036dcd6303e05d817e/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=7271429c1a93bfca0e8b7e036dcd6303e05d817e", "patch": "@@ -1986,7 +1986,9 @@ package body Sem_Ch13 is\n                   --  issue of visibility delay for these aspects.\n \n                   if A_Id in Library_Unit_Aspects\n-                    and then Nkind (N) = N_Package_Declaration\n+                    and then\n+                      Nkind_In (N, N_Package_Declaration,\n+                                   N_Generic_Package_Declaration)\n                     and then Nkind (Parent (N)) /= N_Compilation_Unit\n                   then\n                      Error_Msg_N\n@@ -2041,7 +2043,9 @@ package body Sem_Ch13 is\n             --  In the context of a compilation unit, we directly put the\n             --  pragma in the Pragmas_After list of the N_Compilation_Unit_Aux\n             --  node (no delay is required here) except for aspects on a\n-            --  subprogram body (see below).\n+            --  subprogram body (see below) and a generic package, for which\n+            --  we need to introduce the pragma before building the generic\n+            --  copy (see sem_ch12).\n \n             elsif Nkind (Parent (N)) = N_Compilation_Unit\n               and then (Present (Aitem) or else Is_Boolean_Aspect (Aspect))\n@@ -2082,6 +2086,14 @@ package body Sem_Ch13 is\n \n                      Prepend (Aitem, Declarations (N));\n \n+                  elsif Nkind (N) = N_Generic_Package_Declaration then\n+                     if No (Visible_Declarations (Specification (N))) then\n+                        Set_Visible_Declarations (Specification (N), New_List);\n+                     end if;\n+\n+                     Prepend (Aitem,\n+                       Visible_Declarations (Specification (N)));\n+\n                   else\n                      if No (Pragmas_After (Aux)) then\n                         Set_Pragmas_After (Aux, New_List);"}, {"sha": "29abd554c8a0ed0c78783c7699f54be113d7e56b", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7271429c1a93bfca0e8b7e036dcd6303e05d817e/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7271429c1a93bfca0e8b7e036dcd6303e05d817e/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=7271429c1a93bfca0e8b7e036dcd6303e05d817e", "patch": "@@ -16468,10 +16468,15 @@ package body Sem_Ch3 is\n          Type_Scope     := Scope (Base_Type (Scope (C)));\n       end if;\n \n-      --  This test only concerns tagged types\n+      --  For an untagged type derived from a private type, the only\n+      --  visible components are new discriminants.\n \n       if not Is_Tagged_Type (Original_Scope) then\n-         return True;\n+         return not Has_Private_Ancestor (Original_Scope)\n+            or else In_Open_Scopes (Scope (Original_Scope))\n+            or else\n+              (Ekind (Original_Comp) = E_Discriminant\n+                 and then Original_Scope = Type_Scope);\n \n       --  If it is _Parent or _Tag, there is no visibility issue\n \n@@ -17383,8 +17388,6 @@ package body Sem_Ch3 is\n          --  now. We have to create a new entity with the same name, Thus we\n          --  can't use Create_Itype.\n \n-         --  This is messy, should be fixed ???\n-\n          Full := Make_Defining_Identifier (Sloc (Id), Chars (Id));\n          Set_Is_Itype (Full);\n          Set_Associated_Node_For_Itype (Full, Related_Nod);"}, {"sha": "8526716e08ef6c575ad18d67f1346f141a6526ea", "filename": "gcc/ada/sprint.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7271429c1a93bfca0e8b7e036dcd6303e05d817e/gcc%2Fada%2Fsprint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7271429c1a93bfca0e8b7e036dcd6303e05d817e/gcc%2Fada%2Fsprint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsprint.adb?ref=7271429c1a93bfca0e8b7e036dcd6303e05d817e", "patch": "@@ -2499,7 +2499,8 @@ package body Sprint is\n             Write_Str_With_Col_Check_Sloc (\"package \");\n             Sprint_Node (Defining_Unit_Name (Node));\n \n-            if Nkind (Parent (Node)) = N_Package_Declaration\n+            if Nkind_In (Parent (Node), N_Package_Declaration,\n+                                        N_Generic_Package_Declaration)\n               and then Has_Aspects (Parent (Node))\n             then\n                Sprint_Aspect_Specifications\n@@ -3304,7 +3305,10 @@ package body Sprint is\n       --  Print aspects, except for special case of package declaration,\n       --  where the aspects are printed inside the package specification.\n \n-      if Has_Aspects (Node) and Nkind (Node) /= N_Package_Declaration then\n+      if Has_Aspects (Node)\n+         and then not Nkind_In (Node, N_Package_Declaration,\n+                                      N_Generic_Package_Declaration)\n+      then\n          Sprint_Aspect_Specifications (Node, Semicolon => True);\n       end if;\n "}]}