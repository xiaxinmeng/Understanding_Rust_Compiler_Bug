{"sha": "6c142b14a07b166fcb2809cd3c3fcd59a748ce7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmMxNDJiMTRhMDdiMTY2ZmNiMjgwOWNkM2MzZmNkNTlhNzQ4Y2U3ZQ==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2019-10-10T15:25:08Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-10-10T15:25:08Z"}, "message": "[Ada] Unnesting issues with entry families and accept statements\n\n2019-10-10  Gary Dismukes  <dismukes@adacore.com>\n\ngcc/ada/\n\n\t* sem_util.adb (Enclosing_Subprogram): Handle the case of\n\tE_Entry_Family, returning the entry family's associated\n\tProtected_Body_Subprogram (as was already done for E_Entry).\n\t* exp_ch9.adb (Expand_N_Accept_Statement): Call Reset_Scopes_To\n\ton the block created for an accept statement to reset the scopes\n\tof any local entities to the block scope.\n\nFrom-SVN: r276830", "tree": {"sha": "edf436e3c3c8c5b5d838648d74a63ec55bcef53d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/edf436e3c3c8c5b5d838648d74a63ec55bcef53d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c142b14a07b166fcb2809cd3c3fcd59a748ce7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c142b14a07b166fcb2809cd3c3fcd59a748ce7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c142b14a07b166fcb2809cd3c3fcd59a748ce7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c142b14a07b166fcb2809cd3c3fcd59a748ce7e/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "55160f6c7c838a2e35895cb741fff5ea237b1260", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55160f6c7c838a2e35895cb741fff5ea237b1260", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55160f6c7c838a2e35895cb741fff5ea237b1260"}], "stats": {"total": 31, "additions": 20, "deletions": 11}, "files": [{"sha": "9cf5172802287fcf7bdfbea4a3921251466558ea", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c142b14a07b166fcb2809cd3c3fcd59a748ce7e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c142b14a07b166fcb2809cd3c3fcd59a748ce7e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6c142b14a07b166fcb2809cd3c3fcd59a748ce7e", "patch": "@@ -1,6 +1,8 @@\n-2019-10-10  Ed Schonberg  <schonberg@adacore.com>\n+2019-10-10  Gary Dismukes  <dismukes@adacore.com>\n \n-\t* sem_ch12.adb (Analyze_Formal_Package_Declaration): Propagate\n-\tan aspect specification for Abstract_State from generic package\n-\tto formal package, so that it is available when analyzing the\n-\tconstructed formal.\n\\ No newline at end of file\n+\t* sem_util.adb (Enclosing_Subprogram): Handle the case of\n+\tE_Entry_Family, returning the entry family's associated\n+\tProtected_Body_Subprogram (as was already done for E_Entry).\n+\t* exp_ch9.adb (Expand_N_Accept_Statement): Call Reset_Scopes_To\n+\ton the block created for an accept statement to reset the scopes\n+\tof any local entities to the block scope.\n\\ No newline at end of file"}, {"sha": "720c1a9a23727ae50a3364085a35ce22dec51da6", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c142b14a07b166fcb2809cd3c3fcd59a748ce7e/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c142b14a07b166fcb2809cd3c3fcd59a748ce7e/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=6c142b14a07b166fcb2809cd3c3fcd59a748ce7e", "patch": "@@ -6624,6 +6624,13 @@ package body Exp_Ch9 is\n              Declarations               => Declarations (N),\n              Handled_Statement_Sequence => Build_Accept_Body (N));\n \n+         --  Reset the Scope of local entities associated with the accept\n+         --  statement (that currently reference the entry scope) to the\n+         --  block scope, to avoid having references to the locals treated\n+         --  as up-level references.\n+\n+         Reset_Scopes_To (Block, Blkent);\n+\n          --  For the analysis of the generated declarations, the parent node\n          --  must be properly set.\n "}, {"sha": "f4885735f3596de5ebb9f93957d1f01d13b20fbe", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c142b14a07b166fcb2809cd3c3fcd59a748ce7e/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c142b14a07b166fcb2809cd3c3fcd59a748ce7e/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=6c142b14a07b166fcb2809cd3c3fcd59a748ce7e", "patch": "@@ -6997,17 +6997,17 @@ package body Sem_Util is\n       elsif Ekind_In (Dyn_Scop, E_Block, E_Loop, E_Return_Statement) then\n          return Enclosing_Subprogram (Dyn_Scop);\n \n-      elsif Ekind (Dyn_Scop) = E_Entry then\n+      elsif Ekind_In (Dyn_Scop, E_Entry, E_Entry_Family) then\n \n-         --  For a task entry, return the enclosing subprogram of the\n-         --  task itself.\n+         --  For a task entry or entry family, return the enclosing subprogram\n+         --  of the task itself.\n \n          if Ekind (Scope (Dyn_Scop)) = E_Task_Type then\n             return Enclosing_Subprogram (Dyn_Scop);\n \n-         --  A protected entry is rewritten as a protected procedure which is\n-         --  the desired enclosing subprogram. This is relevant when unnesting\n-         --  a procedure local to an entry body.\n+         --  A protected entry or entry family is rewritten as a protected\n+         --  procedure which is the desired enclosing subprogram. This is\n+         --  relevant when unnesting a procedure local to an entry body.\n \n          else\n             return Protected_Body_Subprogram (Dyn_Scop);"}]}