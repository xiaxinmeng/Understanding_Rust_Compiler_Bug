{"sha": "3d2e25a240c7115c3deaaa9dea856588300dd05b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2QyZTI1YTI0MGM3MTE1YzNkZWFhYTlkZWE4NTY1ODgzMDBkZDA1Yg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-06-09T20:13:44Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-06-09T20:13:44Z"}, "message": "Fix array decay handling in constant expressions.\n\n\t* parser.c (cp_parser_constant_expression): Check\n\tpotential_rvalue_constant_expression after decay_conversion.\n\t* pt.c (convert_nontype_argument): Don't require linkage in C++17.\n\nFrom-SVN: r249079", "tree": {"sha": "d62877692ea79f92fd2ed3df7896feb329728f5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d62877692ea79f92fd2ed3df7896feb329728f5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d2e25a240c7115c3deaaa9dea856588300dd05b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d2e25a240c7115c3deaaa9dea856588300dd05b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d2e25a240c7115c3deaaa9dea856588300dd05b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d2e25a240c7115c3deaaa9dea856588300dd05b/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "55c5c0ad3c32a5c9e5be4a606b9c9925f5416046", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55c5c0ad3c32a5c9e5be4a606b9c9925f5416046", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55c5c0ad3c32a5c9e5be4a606b9c9925f5416046"}], "stats": {"total": 78, "additions": 72, "deletions": 6}, "files": [{"sha": "7bc9c204a2907152b6d26532f57539b8af961640", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d2e25a240c7115c3deaaa9dea856588300dd05b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d2e25a240c7115c3deaaa9dea856588300dd05b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3d2e25a240c7115c3deaaa9dea856588300dd05b", "patch": "@@ -1,5 +1,9 @@\n 2017-06-09  Jason Merrill  <jason@redhat.com>\n \n+\t* parser.c (cp_parser_constant_expression): Check\n+\tpotential_rvalue_constant_expression after decay_conversion.\n+\t* pt.c (convert_nontype_argument): Don't require linkage in C++17.\n+\n \tPR c++/80384 - ICE with dependent noexcept-specifier\n \t* pt.c (dependent_type_p_r) [FUNCTION_TYPE]: Check for dependent\n \tnoexcept-specifier."}, {"sha": "78f7d66f3bbe08a10e611363a0a29e0c8115ee67", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d2e25a240c7115c3deaaa9dea856588300dd05b/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d2e25a240c7115c3deaaa9dea856588300dd05b/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=3d2e25a240c7115c3deaaa9dea856588300dd05b", "patch": "@@ -9462,10 +9462,14 @@ cp_parser_constant_expression (cp_parser* parser,\n       /* Require an rvalue constant expression here; that's what our\n \t callers expect.  Reference constant expressions are handled\n \t separately in e.g. cp_parser_template_argument.  */\n-      bool is_const = potential_rvalue_constant_expression (expression);\n+      tree decay = expression;\n+      if (TREE_TYPE (expression)\n+\t  && TREE_CODE (TREE_TYPE (expression)) == ARRAY_TYPE)\n+\tdecay = build_address (expression);\n+      bool is_const = potential_rvalue_constant_expression (decay);\n       parser->non_integral_constant_expression_p = !is_const;\n       if (!is_const && !allow_non_constant_p)\n-\trequire_potential_rvalue_constant_expression (expression);\n+\trequire_potential_rvalue_constant_expression (decay);\n     }\n   if (allow_non_constant_p)\n     *non_constant_p = parser->non_integral_constant_expression_p;"}, {"sha": "d8f8d467200974d9ff92c4eb984112d8f409f00b", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d2e25a240c7115c3deaaa9dea856588300dd05b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d2e25a240c7115c3deaaa9dea856588300dd05b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=3d2e25a240c7115c3deaaa9dea856588300dd05b", "patch": "@@ -6683,13 +6683,46 @@ convert_nontype_argument (tree type, tree expr, tsubst_flags_t complain)\n \t\t       expr, type, decl);\n \t      return NULL_TREE;\n \t    }\n-\t  else if (cxx_dialect >= cxx11 && decl_linkage (decl) == lk_none)\n+\t  else if ((cxx_dialect >= cxx11 && cxx_dialect < cxx1z)\n+\t\t   && decl_linkage (decl) == lk_none)\n \t    {\n \t      if (complain & tf_error)\n \t\terror (\"%qE is not a valid template argument of type %qT \"\n \t\t       \"because %qD has no linkage\", expr, type, decl);\n \t      return NULL_TREE;\n \t    }\n+\t  /* C++17: For a non-type template-parameter of reference or pointer\n+\t     type, the value of the constant expression shall not refer to (or\n+\t     for a pointer type, shall not be the address of):\n+\t       * a subobject (4.5),\n+\t       * a temporary object (15.2),\n+\t       * a string literal (5.13.5),\n+\t       * the result of a typeid expression (8.2.8), or\n+\t       * a predefined __func__ variable (11.4.1).  */\n+\t  else if (DECL_ARTIFICIAL (decl))\n+\t    {\n+\t      if (complain & tf_error)\n+\t\terror (\"the address of %qD is not a valid template argument\",\n+\t\t       decl);\n+\t      return NULL_TREE;\n+\t    }\n+\t  else if (!same_type_ignoring_top_level_qualifiers_p\n+\t\t   (strip_array_types (TREE_TYPE (type)),\n+\t\t    strip_array_types (TREE_TYPE (decl))))\n+\t    {\n+\t      if (complain & tf_error)\n+\t\terror (\"the address of the %qT subobject of %qD is not a \"\n+\t\t       \"valid template argument\", TREE_TYPE (type), decl);\n+\t      return NULL_TREE;\n+\t    }\n+\t  else if (!TREE_STATIC (decl) && !DECL_EXTERNAL (decl))\n+\t    {\n+\t      if (complain & tf_error)\n+\t\terror (\"the address of %qD is not a valid template argument \"\n+\t\t       \"because it does not have static storage duration\",\n+\t\t       decl);\n+\t      return NULL_TREE;\n+\t    }\n \t}\n \n       expr = decay_conversion (expr, complain);"}, {"sha": "4bab2e4e9bf8704f4cebd032dab4e595bfb58c54", "filename": "gcc/testsuite/g++.dg/template/function1.C", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d2e25a240c7115c3deaaa9dea856588300dd05b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffunction1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d2e25a240c7115c3deaaa9dea856588300dd05b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffunction1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffunction1.C?ref=3d2e25a240c7115c3deaaa9dea856588300dd05b", "patch": "@@ -1,10 +1,8 @@\n // PR c++/38647\n-// { dg-do compile { target { ! c++1z } } }\n-// { dg-prune-output \"note\" }\n \n template<const char *, int> struct A {};\n const char func[] = \"abc\";\n-template<int N> struct A<func, N> {};\t// { dg-error \"cannot appear|is invalid|not a valid|constant expression\" }\n+template<int N> struct A<func, N> {};\t// { dg-error \"cannot appear|is invalid|not a valid|constant expression\" \"\" { target c++98_only } }\n \n char a1[1];\n A<a1, 0> a;"}, {"sha": "cf21908481b67885a787fa9e79964b08f9548568", "filename": "gcc/testsuite/g++.dg/template/nontype-array1.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d2e25a240c7115c3deaaa9dea856588300dd05b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype-array1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d2e25a240c7115c3deaaa9dea856588300dd05b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype-array1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype-array1.C?ref=3d2e25a240c7115c3deaaa9dea856588300dd05b", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile { target c++11 } }\n+\n+template <char const* STR>\n+class Message {\n+};\n+\n+extern char const s1[] = \"hi\";\n+char const s2[] = \"hi\";\n+constexpr char const s3[] = \"hi\";  // OK since C++11\n+\n+constexpr char const * f() { return s3; }\n+\n+int main()\n+{\n+  Message<s1> m1;  // OK (all versions)\n+  Message<s2> m2;  // OK for clang since C++14, for gcc since C++17\n+  Message<s3> m3;  // OK for clang/gcc since C++11\n+\n+  static char const s4[] = \"hi\";\n+  static constexpr char const s5[] = \"hi\";  // OK since C++11\n+  Message<s4> m4;  // { dg-error \"no linkage\" \"\" { target c++14_down } }\n+  Message<s5> m5;  // { dg-error \"no linkage\" \"\" { target c++14_down } }\n+  Message<f()> m6; // { dg-error \"\" \"\" { target c++14_down } }\n+\n+  char const s8[] = \"hi\";\n+  Message<s8> m8;  // { dg-error \"\" }\n+}"}]}