{"sha": "ffdd52487888d3c45cf02e66b79587d2cf2839a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZkZDUyNDg3ODg4ZDNjNDVjZjAyZTY2Yjc5NTg3ZDJjZjI4MzlhMw==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2018-05-23T10:23:48Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-23T10:23:48Z"}, "message": "[Ada] Spurious error on instantiation with type with unknown discriminants\n\nThis patch fixes a spurious error when instantiating an indefinite container\nwith a private type with unknown discriminants, when its full view is an\nunconstrained array type. It also cleans up the inheritance of dynamic\npredicates inherited by anonymous subtypes of array types.\n\n2018-05-23  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* einfo.ads: New attribute on types: Predicated_Parent, to simplify the\n\tretrieval of the applicable predicate function to an itype created for\n\ta constrained array component.\n\t* einfo.adb: Subprograms for Predicated_Parent.\n\t(Predicate_Function): Use new attribute.\n\t* exp_util.adb (Make_Predicate_Call): If the predicate function is not\n\tavailable for a subtype, retrieve it from the base type, which may have\n\tbeen frozen after the subtype declaration and not captured by the\n\tsubtype declaration.\n\t* sem_aggr.adb (Resolve_Array_Aggregate): An Others association is\n\tlegal within a generated initiqlization procedure, as may happen with a\n\tpredicate check on a component, when the predicate function applies to\n\tthe base type of the component.\n\t* sem_ch3.adb (Analyze_Subtype_Declaration): Clean up inheritance of\n\tpredicates for subtype declarations and for subtype indications in\n\tother contexts.\n\t(Process_Subtype): Likewise. Handle properly the case of a private type\n\twith unknown discriminants whose full view is an unconstrained array.\n\tUse Predicated_Parent to indicate source of predicate function on an\n\titype whose parent is itself an itype.\n\t(Complete_Private_Subtype): If the private view has unknown\n\tdiscriminants and the full view is an unconstrained array, set base\n\ttype of completion to the full view of parent.\n\t(Inherit_Predicate_Flags): Prevent double assignment of predicate\n\tfunction and flags.\n\t(Build_Subtype): For a constrained array component, propagate predicate\n\tinformation from original component type declaration.\n\ngcc/testsuite/\n\n\t* gnat.dg/discr51.adb: New testcase.\n\nFrom-SVN: r260596", "tree": {"sha": "55b00c6b7d642b0ff79eb2dc8ba06ae0ea963bd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55b00c6b7d642b0ff79eb2dc8ba06ae0ea963bd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffdd52487888d3c45cf02e66b79587d2cf2839a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffdd52487888d3c45cf02e66b79587d2cf2839a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffdd52487888d3c45cf02e66b79587d2cf2839a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffdd52487888d3c45cf02e66b79587d2cf2839a3/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "39a4daf955c1b431a0fdc7f664e40208ef3b622d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39a4daf955c1b431a0fdc7f664e40208ef3b622d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39a4daf955c1b431a0fdc7f664e40208ef3b622d"}], "stats": {"total": 188, "additions": 176, "deletions": 12}, "files": [{"sha": "2be21310c988245fcfecb6ece49bbaaf82eab9ef", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffdd52487888d3c45cf02e66b79587d2cf2839a3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffdd52487888d3c45cf02e66b79587d2cf2839a3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ffdd52487888d3c45cf02e66b79587d2cf2839a3", "patch": "@@ -1,3 +1,33 @@\n+2018-05-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* einfo.ads: New attribute on types: Predicated_Parent, to simplify the\n+\tretrieval of the applicable predicate function to an itype created for\n+\ta constrained array component.\n+\t* einfo.adb: Subprograms for Predicated_Parent.\n+\t(Predicate_Function): Use new attribute.\n+\t* exp_util.adb (Make_Predicate_Call): If the predicate function is not\n+\tavailable for a subtype, retrieve it from the base type, which may have\n+\tbeen frozen after the subtype declaration and not captured by the\n+\tsubtype declaration.\n+\t* sem_aggr.adb (Resolve_Array_Aggregate): An Others association is\n+\tlegal within a generated initiqlization procedure, as may happen with a\n+\tpredicate check on a component, when the predicate function applies to\n+\tthe base type of the component.\n+\t* sem_ch3.adb (Analyze_Subtype_Declaration): Clean up inheritance of\n+\tpredicates for subtype declarations and for subtype indications in\n+\tother contexts.\n+\t(Process_Subtype): Likewise. Handle properly the case of a private type\n+\twith unknown discriminants whose full view is an unconstrained array.\n+\tUse Predicated_Parent to indicate source of predicate function on an\n+\titype whose parent is itself an itype.\n+\t(Complete_Private_Subtype): If the private view has unknown\n+\tdiscriminants and the full view is an unconstrained array, set base\n+\ttype of completion to the full view of parent.\n+\t(Inherit_Predicate_Flags): Prevent double assignment of predicate\n+\tfunction and flags.\n+\t(Build_Subtype): For a constrained array component, propagate predicate\n+\tinformation from original component type declaration.\n+\n 2018-05-23  Boris Yakobowski  <yakobowski@adacore.com>\n \n \t* libgnat/a-ngelfu.ads (Arctanh, Arccoth): Fix faulty preconditions."}, {"sha": "7ba43278ef57f52a03f81e24834a08123c9d1239", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffdd52487888d3c45cf02e66b79587d2cf2839a3/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffdd52487888d3c45cf02e66b79587d2cf2839a3/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=ffdd52487888d3c45cf02e66b79587d2cf2839a3", "patch": "@@ -276,6 +276,7 @@ package body Einfo is\n \n    --    Nested_Scenarios                Elist36\n    --    Validated_Object                Node36\n+   --    Predicated_Parent               Node36\n \n    --    Class_Wide_Clone                Node38\n \n@@ -3082,6 +3083,12 @@ package body Einfo is\n       return Node14 (Id);\n    end Postconditions_Proc;\n \n+   function Predicated_Parent (Id : E) return E is\n+   begin\n+      pragma Assert (Is_Type (Id));\n+      return Node36 (Id);\n+   end Predicated_Parent;\n+\n    function Predicates_Ignored (Id : E) return B is\n    begin\n       pragma Assert (Is_Type (Id));\n@@ -6311,6 +6318,12 @@ package body Einfo is\n       Set_Node14 (Id, V);\n    end Set_Postconditions_Proc;\n \n+   procedure Set_Predicated_Parent (Id : E; V : E) is\n+   begin\n+      pragma Assert (Is_Type (Id));\n+      Set_Node36 (Id, V);\n+   end Set_Predicated_Parent;\n+\n    procedure Set_Predicates_Ignored (Id : E; V : B) is\n    begin\n       pragma Assert (Is_Type (Id));\n@@ -8829,6 +8842,9 @@ package body Einfo is\n       then\n          Typ := Full_View (Id);\n \n+      elsif Is_Itype (Id) and then Present (Predicated_Parent (Id)) then\n+         Typ := Predicated_Parent (Id);\n+\n       else\n          Typ := Id;\n       end if;\n@@ -11200,6 +11216,11 @@ package body Einfo is\n          when E_Variable =>\n             Write_Str (\"Validated_Object\");\n \n+         when E_Array_Subtype\n+            | E_Record_Subtype\n+         =>\n+            Write_Str (\"predicated parent\");\n+\n          when others =>\n             Write_Str (\"Field36??\");\n       end case;"}, {"sha": "1baac0551f695753a75b9afaa15fc5aa747623ad", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffdd52487888d3c45cf02e66b79587d2cf2839a3/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffdd52487888d3c45cf02e66b79587d2cf2839a3/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=ffdd52487888d3c45cf02e66b79587d2cf2839a3", "patch": "@@ -3932,6 +3932,14 @@ package Einfo is\n --       is the special version created for membership tests, where if one of\n --       these raise expressions is executed, the result is to return False.\n \n+--    Predicated_Parent (Node36)\n+--       Defined on itypes created by subtype indications, when the parent\n+--       subtype has predicates. The itype shares the Predicate_Function\n+--       of the predicated parent, but this function may not have been built\n+--       at the point the Itype is constructed, so this attribute allows its\n+--       retrieval at the point a predicate check needs to be generated.\n+--       The utility Predicate_Function takes this link into account.\n+\n --    Predicates_Ignored (Flag288)\n --       Defined on all types. Indicates whether the subtype declaration is in\n --       a context where Assertion_Policy is Ignore, in which case no checks\n@@ -7427,6 +7435,7 @@ package Einfo is\n    function Partial_View_Has_Unknown_Discr      (Id : E) return B;\n    function Pending_Access_Types                (Id : E) return L;\n    function Postconditions_Proc                 (Id : E) return E;\n+   function Predicated_Parent                   (Id : E) return E;\n    function Predicates_Ignored                  (Id : E) return B;\n    function Prival                              (Id : E) return E;\n    function Prival_Link                         (Id : E) return E;\n@@ -7789,6 +7798,7 @@ package Einfo is\n    procedure Set_Depends_On_Private              (Id : E; V : B := True);\n    procedure Set_Derived_Type_Link               (Id : E; V : E);\n    procedure Set_Digits_Value                    (Id : E; V : U);\n+   procedure Set_Predicated_Parent               (Id : E; V : E);\n    procedure Set_Predicates_Ignored              (Id : E; V : B);\n    procedure Set_Direct_Primitive_Operations     (Id : E; V : L);\n    procedure Set_Directly_Designated_Type        (Id : E; V : E);\n@@ -8988,6 +8998,7 @@ package Einfo is\n    pragma Inline (Partial_View_Has_Unknown_Discr);\n    pragma Inline (Pending_Access_Types);\n    pragma Inline (Postconditions_Proc);\n+   pragma Inline (Predicated_Parent);\n    pragma Inline (Predicates_Ignored);\n    pragma Inline (Prival);\n    pragma Inline (Prival_Link);\n@@ -9475,6 +9486,7 @@ package Einfo is\n    pragma Inline (Set_Partial_View_Has_Unknown_Discr);\n    pragma Inline (Set_Pending_Access_Types);\n    pragma Inline (Set_Postconditions_Proc);\n+   pragma Inline (Set_Predicated_Parent);\n    pragma Inline (Set_Predicates_Ignored);\n    pragma Inline (Set_Prival);\n    pragma Inline (Set_Prival_Link);"}, {"sha": "5a8541dd0b7d4de9c1c9d0ac3bbaf78eb3ae9f3c", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffdd52487888d3c45cf02e66b79587d2cf2839a3/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffdd52487888d3c45cf02e66b79587d2cf2839a3/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=ffdd52487888d3c45cf02e66b79587d2cf2839a3", "patch": "@@ -9261,7 +9261,8 @@ package body Exp_Util is\n       Func_Id : Entity_Id;\n \n    begin\n-      pragma Assert (Present (Predicate_Function (Typ)));\n+      Func_Id := Predicate_Function (Typ);\n+      pragma Assert (Present (Func_Id));\n \n       --  The related type may be subject to pragma Ghost. Set the mode now to\n       --  ensure that the call is properly marked as Ghost.\n@@ -9272,8 +9273,6 @@ package body Exp_Util is\n \n       if Mem and then Present (Predicate_Function_M (Typ)) then\n          Func_Id := Predicate_Function_M (Typ);\n-      else\n-         Func_Id := Predicate_Function (Typ);\n       end if;\n \n       --  Case of calling normal predicate function"}, {"sha": "5eaf4622d80bd32379891d6f1acc712a8baa8e7c", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffdd52487888d3c45cf02e66b79587d2cf2839a3/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffdd52487888d3c45cf02e66b79587d2cf2839a3/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=ffdd52487888d3c45cf02e66b79587d2cf2839a3", "patch": "@@ -1068,7 +1068,9 @@ package body Sem_Aggr is\n             --  object may be its unconstrained nominal type. However, if the\n             --  context is an assignment, we assume that OTHERS is allowed,\n             --  because the target of the assignment will have a constrained\n-            --  subtype when fully compiled.\n+            --  subtype when fully compiled. Ditto if the context is an\n+            --  initialization procedure where a component may have a predicate\n+            --  function that carries the base type.\n \n             --  Note that there is no node for Explicit_Actual_Parameter.\n             --  To test for this context we therefore have to test for node\n@@ -1083,6 +1085,7 @@ package body Sem_Aggr is\n             Set_Etype (N, Aggr_Typ);  --  May be overridden later on\n \n             if Pkind = N_Assignment_Statement\n+              or else Inside_Init_Proc\n               or else (Is_Constrained (Typ)\n                         and then\n                           (Pkind = N_Parameter_Association     or else"}, {"sha": "50b99100296694dec4b4628518d4fbd2c3311543", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 71, "deletions": 8, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffdd52487888d3c45cf02e66b79587d2cf2839a3/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffdd52487888d3c45cf02e66b79587d2cf2839a3/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=ffdd52487888d3c45cf02e66b79587d2cf2839a3", "patch": "@@ -5338,11 +5338,13 @@ package body Sem_Ch3 is\n          if not Comes_From_Source (N) then\n             Set_Ekind (Id, Ekind (T));\n \n-            if Present (Predicate_Function (T)) then\n+            if Present (Predicate_Function (Id)) then\n+               null;\n+\n+            elsif Present (Predicate_Function (T)) then\n                Set_Predicate_Function (Id, Predicate_Function (T));\n \n             elsif Present (Ancestor_Subtype (T))\n-              and then Has_Predicates (Ancestor_Subtype (T))\n               and then Present (Predicate_Function (Ancestor_Subtype (T)))\n             then\n                Set_Predicate_Function (Id,\n@@ -5443,7 +5445,6 @@ package body Sem_Ch3 is\n                Set_Is_Constrained       (Id, Is_Constrained     (T));\n                Set_Is_Known_Valid       (Id, Is_Known_Valid     (T));\n                Set_RM_Size              (Id, RM_Size            (T));\n-               Inherit_Predicate_Flags  (Id, T);\n \n             when Ordinary_Fixed_Point_Kind =>\n                Set_Ekind                (Id, E_Ordinary_Fixed_Point_Subtype);\n@@ -5469,15 +5470,13 @@ package body Sem_Ch3 is\n                Set_Is_Constrained       (Id, Is_Constrained     (T));\n                Set_Is_Known_Valid       (Id, Is_Known_Valid     (T));\n                Set_RM_Size              (Id, RM_Size            (T));\n-               Inherit_Predicate_Flags  (Id, T);\n \n             when Modular_Integer_Kind =>\n                Set_Ekind                (Id, E_Modular_Integer_Subtype);\n                Set_Scalar_Range         (Id, Scalar_Range       (T));\n                Set_Is_Constrained       (Id, Is_Constrained     (T));\n                Set_Is_Known_Valid       (Id, Is_Known_Valid     (T));\n                Set_RM_Size              (Id, RM_Size            (T));\n-               Inherit_Predicate_Flags  (Id, T);\n \n             when Class_Wide_Kind =>\n                Set_Ekind                (Id, E_Class_Wide_Subtype);\n@@ -5694,6 +5693,11 @@ package body Sem_Ch3 is\n             when others =>\n                raise Program_Error;\n          end case;\n+\n+         --  If there is no constraint in the subtype indication, the\n+         --  declared entity inherits predicates from the parent.\n+\n+         Inherit_Predicate_Flags (Id, T);\n       end if;\n \n       if Etype (Id) = Any_Type then\n@@ -12345,6 +12349,15 @@ package body Sem_Ch3 is\n       Set_RM_Size          (Full, RM_Size (Full_Base));\n       Set_Is_Itype         (Full);\n \n+      --  For the unusual case of a type with unknown discriminants whose\n+      --  completion is an array, use the proper full base.\n+\n+      if Is_Array_Type (Full_Base)\n+        and then Has_Unknown_Discriminants (Priv)\n+      then\n+         Set_Etype (Full, Full_Base);\n+      end if;\n+\n       --  A subtype of a private-type-without-discriminants, whose full-view\n       --  has discriminants with default expressions, is not constrained.\n \n@@ -13427,6 +13440,27 @@ package body Sem_Ch3 is\n \n          Analyze (Subtyp_Decl, Suppress => All_Checks);\n \n+         if Is_Itype (Def_Id) and then Has_Predicates (T) then\n+            Inherit_Predicate_Flags (Def_Id, T);\n+\n+            --  Indicate where the predicate function may be found.\n+\n+            if Is_Itype (T) then\n+               if Present (Predicate_Function (Def_Id)) then\n+                  null;\n+\n+               elsif Present (Predicate_Function (T)) then\n+                  Set_Predicate_Function (Def_Id, Predicate_Function (T));\n+\n+               else\n+                  Set_Predicated_Parent (Def_Id, Predicated_Parent (T));\n+               end if;\n+\n+            elsif No (Predicate_Function (Def_Id)) then\n+               Set_Predicated_Parent (Def_Id, T);\n+            end if;\n+         end if;\n+\n          return Def_Id;\n       end Build_Subtype;\n \n@@ -18550,6 +18584,10 @@ package body Sem_Ch3 is\n \n    procedure Inherit_Predicate_Flags (Subt, Par : Entity_Id) is\n    begin\n+      if Present (Predicate_Function (Subt)) then\n+         return;\n+      end if;\n+\n       Set_Has_Predicates (Subt, Has_Predicates (Par));\n       Set_Has_Static_Predicate_Aspect\n         (Subt, Has_Static_Predicate_Aspect (Par));\n@@ -21606,7 +21644,6 @@ package body Sem_Ch3 is\n \n             when Enumeration_Kind =>\n                Constrain_Enumeration (Def_Id, S);\n-               Inherit_Predicate_Flags (Def_Id, Subtype_Mark_Id);\n \n             when Ordinary_Fixed_Point_Kind =>\n                Constrain_Ordinary_Fixed (Def_Id, S);\n@@ -21616,7 +21653,6 @@ package body Sem_Ch3 is\n \n             when Integer_Kind =>\n                Constrain_Integer (Def_Id, S);\n-               Inherit_Predicate_Flags (Def_Id, Subtype_Mark_Id);\n \n             when Class_Wide_Kind\n                | E_Incomplete_Type\n@@ -21630,7 +21666,21 @@ package body Sem_Ch3 is\n                end if;\n \n             when Private_Kind =>\n-               Constrain_Discriminated_Type (Def_Id, S, Related_Nod);\n+\n+               --  A private type with unknown discriminants may be completed\n+               --  by an unconstrained array type.\n+\n+               if Has_Unknown_Discriminants (Subtype_Mark_Id)\n+                 and then Present (Full_View (Subtype_Mark_Id))\n+                 and then Is_Array_Type (Full_View (Subtype_Mark_Id))\n+               then\n+                  Constrain_Array (Def_Id, S, Related_Nod, Related_Id, Suffix);\n+\n+                  --  ... but more comonly by a discriminated record type.\n+\n+               else\n+                  Constrain_Discriminated_Type (Def_Id, S, Related_Nod);\n+               end if;\n \n                --  The base type may be private but Def_Id may be a full view\n                --  in an instance.\n@@ -21696,6 +21746,19 @@ package body Sem_Ch3 is\n          Set_Rep_Info   (Def_Id,            (Subtype_Mark_Id));\n          Set_Convention (Def_Id, Convention (Subtype_Mark_Id));\n \n+         --  The anonymous subtype created for the subtype indication\n+         --  inherits the predicates of the parent.\n+\n+         if Has_Predicates (Subtype_Mark_Id) then\n+            Inherit_Predicate_Flags (Def_Id, Subtype_Mark_Id);\n+\n+            --  Indicate where the predicate function may be found.\n+\n+            if No (Predicate_Function (Def_Id)) then\n+               Set_Predicated_Parent (Def_Id, Subtype_Mark_Id);\n+            end if;\n+         end if;\n+\n          return Def_Id;\n       end if;\n    end Process_Subtype;"}, {"sha": "254db69dfd6a8264ef9b4614d24fda02d563b582", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffdd52487888d3c45cf02e66b79587d2cf2839a3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffdd52487888d3c45cf02e66b79587d2cf2839a3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ffdd52487888d3c45cf02e66b79587d2cf2839a3", "patch": "@@ -1,3 +1,7 @@\n+2018-05-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* gnat.dg/discr51.adb: New testcase.\n+\n 2018-05-23  Javier Miranda  <miranda@adacore.com>\n \n \t* gnat.dg/valid_scalars1.adb: New testcase."}, {"sha": "71a342050fd4d295cd612da9ee5934883f260b91", "filename": "gcc/testsuite/gnat.dg/discr51.adb", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffdd52487888d3c45cf02e66b79587d2cf2839a3/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr51.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffdd52487888d3c45cf02e66b79587d2cf2839a3/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr51.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr51.adb?ref=ffdd52487888d3c45cf02e66b79587d2cf2839a3", "patch": "@@ -0,0 +1,32 @@\n+--  { dg-do compile }\n+\n+with Ada.Containers.Indefinite_Holders;\n+\n+procedure Discr51 is\n+\n+   package Inner is\n+      type Str (<>) is private;\n+   private\n+      type Str is array (Positive range <>) of Character;\n+   end Inner;\n+\n+   package Inner2 is\n+      type Str2 (<>) is private;\n+   private\n+      type str2 is new inner.Str;\n+   end Inner2;\n+\n+   type Str3 is new Inner.str;\n+\n+   package Str_Holders is new Ada.Containers.Indefinite_Holders\n+      (Inner.Str, Inner.\"=\");\n+\n+   package Str2_Holders is new Ada.Containers.Indefinite_Holders\n+      (Inner2.Str2, Inner2.\"=\");\n+\n+   package Str3_Holders is new Ada.Containers.Indefinite_Holders\n+      (Str3, \"=\");\n+\n+begin\n+   null;\n+end Discr51;"}]}