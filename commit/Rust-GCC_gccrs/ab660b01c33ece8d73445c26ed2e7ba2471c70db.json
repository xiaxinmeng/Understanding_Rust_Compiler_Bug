{"sha": "ab660b01c33ece8d73445c26ed2e7ba2471c70db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWI2NjBiMDFjMzNlY2U4ZDczNDQ1YzI2ZWQyZTdiYTI0NzFjNzBkYg==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-07-18T00:16:24Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-07-18T00:16:24Z"}, "message": "Daily bump.", "tree": {"sha": "8824e7959997b5e1dde1bfae38eb7c96acb45c48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8824e7959997b5e1dde1bfae38eb7c96acb45c48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab660b01c33ece8d73445c26ed2e7ba2471c70db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab660b01c33ece8d73445c26ed2e7ba2471c70db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab660b01c33ece8d73445c26ed2e7ba2471c70db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab660b01c33ece8d73445c26ed2e7ba2471c70db/comments", "author": null, "committer": null, "parents": [{"sha": "d5dfd4793febee6526e9ca84e06b5e207e0fbcee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5dfd4793febee6526e9ca84e06b5e207e0fbcee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5dfd4793febee6526e9ca84e06b5e207e0fbcee"}], "stats": {"total": 194, "additions": 193, "deletions": 1}, "files": [{"sha": "54c52077f66842767b691b6fc98a3e224fa12273", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab660b01c33ece8d73445c26ed2e7ba2471c70db/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab660b01c33ece8d73445c26ed2e7ba2471c70db/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=ab660b01c33ece8d73445c26ed2e7ba2471c70db", "patch": "@@ -1,3 +1,7 @@\n+2020-07-17  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* gcc-changelog/git_update_version.py: Fix typo.\n+\n 2020-07-10  Mike Nolta  <mike@nolta.net>\n \n \t* download_prerequisites: Don't pass wget options to curl."}, {"sha": "964e6c229f7f300a55017642bfdcc5e86e140d1e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab660b01c33ece8d73445c26ed2e7ba2471c70db/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab660b01c33ece8d73445c26ed2e7ba2471c70db/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ab660b01c33ece8d73445c26ed2e7ba2471c70db", "patch": "@@ -1,3 +1,99 @@\n+2020-07-17  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* function.c (assign_parm_setup_block): Use the macro\n+\tTRULY_NOOP_TRUNCATION_MODES_P instead of calling\n+\ttargetm.truly_noop_truncation directly.\n+\n+2020-07-17  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/96186\n+\tPR target/88713\n+\t* config/i386/sse.md (VF_AVX512VL_VF1_128_256): Renamed to ...\n+\t(VF1_AVX512ER_128_256): This.  Drop DF vector modes.\n+\t(rsqrt<mode>2): Replace VF_AVX512VL_VF1_128_256 with\n+\tVF1_AVX512ER_128_256.\n+\n+2020-07-17  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* doc/sourcebuild.texi (dg-set-compiler-env-var,\n+\tdg-set-target-env-var): Document.\n+\n+2020-07-17  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/arm/driver-arm.c (host_detect_local_cpu): Add GCC_CPUINFO.\n+\n+2020-07-17  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/aarch64/driver-aarch64.c (host_detect_local_cpu):\n+\tAdd GCC_CPUINFO.\n+\n+2020-07-17  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/aarch64/driver-aarch64.c (INCLUDE_SET): New.\n+\t(parse_field): Use std::string.\n+\t(split_words, readline, find_field): New.\n+\t(host_detect_local_cpu): Fix truncation issues.\n+\n+2020-07-17  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/mkoffload.c (EM_AMDGPU): Undefine before defining.\n+\t(ELFOSABI_AMDGPU_HSA): Likewise.\n+\t(ELFABIVERSION_AMDGPU_HSA): Likewise.\n+\t(EF_AMDGPU_MACH_AMDGCN_GFX803): Likewise.\n+\t(EF_AMDGPU_MACH_AMDGCN_GFX900): Likewise.\n+\t(EF_AMDGPU_MACH_AMDGCN_GFX906): Likewise.\n+\t(reserved): Delete.\n+\n+2020-07-17  Andrew Pinski  <apinksi@marvell.com>\n+\t    Dmitrij Pochepko  <dmitrij.pochepko@bell-sw.com>\n+\n+\tPR target/93720\n+\t* config/aarch64/aarch64.c (aarch64_evpc_ins): New function.\n+\t(aarch64_expand_vec_perm_const_1): Call it.\n+\t* config/aarch64/aarch64-simd.md (aarch64_simd_vec_copy_lane): Make\n+\tpublic, and add a \"@\" prefix.\n+\n+2020-07-17  Andrew Pinski  <apinksi@marvell.com>\n+\t    Dmitrij Pochepko  <dmitrij.pochepko@bell-sw.com>\n+\n+\tPR target/82199\n+\t* config/aarch64/aarch64.c (aarch64_evpc_reencode): New function.\n+\t(aarch64_expand_vec_perm_const_1): Call it.\n+\n+2020-07-17  Zhiheng Xie  <xiezhiheng@huawei.com>\n+\n+\t* config/aarch64/aarch64-builtins.c (enum aarch64_type_qualifiers):\n+\tAdd new field flags.\n+\t(VAR1): Add new field FLAG in macro.\n+\t(VAR2): Likewise.\n+\t(VAR3): Likewise.\n+\t(VAR4): Likewise.\n+\t(VAR5): Likewise.\n+\t(VAR6): Likewise.\n+\t(VAR7): Likewise.\n+\t(VAR8): Likewise.\n+\t(VAR9): Likewise.\n+\t(VAR10): Likewise.\n+\t(VAR11): Likewise.\n+\t(VAR12): Likewise.\n+\t(VAR13): Likewise.\n+\t(VAR14): Likewise.\n+\t(VAR15): Likewise.\n+\t(VAR16): Likewise.\n+\t(aarch64_general_fold_builtin): Likewise.\n+\t(aarch64_general_gimple_fold_builtin): Likewise.\n+\t* config/aarch64/aarch64-simd-builtins.def: Add default flag for\n+\teach built-in function.\n+\t* config/aarch64/geniterators.sh: Add new field in BUILTIN macro.\n+\n+2020-07-17  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\tPR target/96127\n+\t* config/s390/s390.c (s390_expand_insv): Invoke the movstrict\n+\texpanders to generate the pattern.\n+\t* config/s390/s390.md (\"*movstricthi\", \"*movstrictqi\"): Remove the\n+\t'*' to have callable expanders.\n+\n 2020-07-16  Hans-Peter Nilsson  <hp@axis.com>\n \t    Segher Boessenkool  <segher@kernel.crashing.org>\n "}, {"sha": "3e86f30bbb2369d2134963ead0cc40132e611c20", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab660b01c33ece8d73445c26ed2e7ba2471c70db/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab660b01c33ece8d73445c26ed2e7ba2471c70db/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=ab660b01c33ece8d73445c26ed2e7ba2471c70db", "patch": "@@ -1 +1 @@\n-20200717\n+20200718"}, {"sha": "782546e1d76ff88057510c93eeb76a48aa30fbbf", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab660b01c33ece8d73445c26ed2e7ba2471c70db/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab660b01c33ece8d73445c26ed2e7ba2471c70db/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ab660b01c33ece8d73445c26ed2e7ba2471c70db", "patch": "@@ -1,3 +1,9 @@\n+2020-07-17  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/79815\n+\t* decl.c (grokdeclarator): Detect cv-qual decltype(auto).\n+\t* pt.c (do_auto_deduction): Likewise.\n+\n 2020-07-16  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR c++/95591"}, {"sha": "f4ee211ad5322c7743e476e38461a14715100b27", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab660b01c33ece8d73445c26ed2e7ba2471c70db/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab660b01c33ece8d73445c26ed2e7ba2471c70db/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ab660b01c33ece8d73445c26ed2e7ba2471c70db", "patch": "@@ -1,3 +1,84 @@\n+2020-07-17  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/79815\n+\t* g++.dg/cpp1y/auto-fn59.C: New test.\n+\n+2020-07-17  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/96186\n+\tPR target/88713\n+\t* gcc.target/i386/pr88713-3.c: New test.\n+\n+2020-07-17  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.target/aarch64/cpunative/aarch64-cpunative.exp: New test.\n+\t* gcc.target/aarch64/cpunative/info_0: New test.\n+\t* gcc.target/aarch64/cpunative/info_1: New test.\n+\t* gcc.target/aarch64/cpunative/info_10: New test.\n+\t* gcc.target/aarch64/cpunative/info_11: New test.\n+\t* gcc.target/aarch64/cpunative/info_12: New test.\n+\t* gcc.target/aarch64/cpunative/info_13: New test.\n+\t* gcc.target/aarch64/cpunative/info_14: New test.\n+\t* gcc.target/aarch64/cpunative/info_15: New test.\n+\t* gcc.target/aarch64/cpunative/info_2: New test.\n+\t* gcc.target/aarch64/cpunative/info_3: New test.\n+\t* gcc.target/aarch64/cpunative/info_4: New test.\n+\t* gcc.target/aarch64/cpunative/info_5: New test.\n+\t* gcc.target/aarch64/cpunative/info_6: New test.\n+\t* gcc.target/aarch64/cpunative/info_7: New test.\n+\t* gcc.target/aarch64/cpunative/info_8: New test.\n+\t* gcc.target/aarch64/cpunative/info_9: New test.\n+\t* gcc.target/aarch64/cpunative/native_cpu_0.c: New test.\n+\t* gcc.target/aarch64/cpunative/native_cpu_1.c: New test.\n+\t* gcc.target/aarch64/cpunative/native_cpu_10.c: New test.\n+\t* gcc.target/aarch64/cpunative/native_cpu_11.c: New test.\n+\t* gcc.target/aarch64/cpunative/native_cpu_12.c: New test.\n+\t* gcc.target/aarch64/cpunative/native_cpu_13.c: New test.\n+\t* gcc.target/aarch64/cpunative/native_cpu_14.c: New test.\n+\t* gcc.target/aarch64/cpunative/native_cpu_15.c: New test.\n+\t* gcc.target/aarch64/cpunative/native_cpu_2.c: New test.\n+\t* gcc.target/aarch64/cpunative/native_cpu_3.c: New test.\n+\t* gcc.target/aarch64/cpunative/native_cpu_4.c: New test.\n+\t* gcc.target/aarch64/cpunative/native_cpu_5.c: New test.\n+\t* gcc.target/aarch64/cpunative/native_cpu_6.c: New test.\n+\t* gcc.target/aarch64/cpunative/native_cpu_7.c: New test.\n+\t* gcc.target/aarch64/cpunative/native_cpu_8.c: New test.\n+\t* gcc.target/aarch64/cpunative/native_cpu_9.c: New test.\n+\n+2020-07-17  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* lib/gcc-dg.exp (dg-set-compiler-env-var, dg-set-target-env-var): Add\n+\tverbose output.\n+\n+2020-07-17  Andrew Pinski  <apinksi@marvell.com>\n+\t    Dmitrij Pochepko  <dmitrij.pochepko@bell-sw.com>\n+\n+\tPR target/93720\n+\t* gcc.target/aarch64/vins-1.c: New test.\n+\t* gcc.target/aarch64/vins-2.c: New test.\n+\t* gcc.target/aarch64/vins-3.c: New test.\n+\n+2020-07-17  Andrew Pinski  <apinksi@marvell.com>\n+\t    Dmitrij Pochepko  <dmitrij.pochepko@bell-sw.com>\n+\n+\tPR target/82199\n+\t* gcc.target/aarch64/vdup_n_3.c: New test.\n+\t* gcc.target/aarch64/vzip_1.c: New test.\n+\t* gcc.target/aarch64/vzip_2.c: New test.\n+\t* gcc.target/aarch64/vzip_3.c: New test.\n+\t* gcc.target/aarch64/vzip_4.c: New test.\n+\n+2020-07-17  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\tPR target/96127\n+\t* gcc.target/s390/pr96127.c: New test.\n+\n+2020-07-17  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/conv-vectorize-1.c: Add option\n+\t-fno-vect-cost-model.\n+\t* gcc.target/powerpc/conv-vectorize-2.c: Likewise.\n+\n 2020-07-16  Julian Brown  <julian@codesourcery.com>\n \t    Thomas Schwinge  <thomas@codesourcery.com>\n "}, {"sha": "d2dbc746df7181c3211f6ca9dad407001c5aeee1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab660b01c33ece8d73445c26ed2e7ba2471c70db/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab660b01c33ece8d73445c26ed2e7ba2471c70db/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ab660b01c33ece8d73445c26ed2e7ba2471c70db", "patch": "@@ -1,3 +1,8 @@\n+2020-07-17  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* include/std/coroutine: Mark the methods of the\n+\ttrivial awaitables as constexpr.\n+\n 2020-07-14  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* config/os/aix/t-aix: Set BITS from compiler cpp macro."}]}