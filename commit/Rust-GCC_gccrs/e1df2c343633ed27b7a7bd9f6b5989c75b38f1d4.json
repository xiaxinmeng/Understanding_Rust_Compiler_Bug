{"sha": "e1df2c343633ed27b7a7bd9f6b5989c75b38f1d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFkZjJjMzQzNjMzZWQyN2I3YTdiZDlmNmI1OTg5Yzc1YjM4ZjFkNA==", "commit": {"author": {"name": "Pat Haugen", "email": "pthaugen@linux.ibm.com", "date": "2021-03-19T20:51:22Z"}, "committer": {"name": "Pat Haugen", "email": "pthaugen@linux.ibm.com", "date": "2021-03-19T20:51:22Z"}, "message": "Add Power10 scheduling description.\n\n2021-03-19  Pat Haugen  <pthaugen@linux.ibm.com>\n\ngcc/\n\n\t* config/rs6000/rs6000.c (power10_cost): New.\n\t(rs6000_option_override_internal): Set Power10 costs.\n\t(rs6000_issue_rate): Set Power10 issue rate.\n\t* config/rs6000/power10.md: Rewrite for Power10.", "tree": {"sha": "22cf5b0a35c801d28961fc5ec16f7fa2617c3b75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22cf5b0a35c801d28961fc5ec16f7fa2617c3b75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1df2c343633ed27b7a7bd9f6b5989c75b38f1d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1df2c343633ed27b7a7bd9f6b5989c75b38f1d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1df2c343633ed27b7a7bd9f6b5989c75b38f1d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1df2c343633ed27b7a7bd9f6b5989c75b38f1d4/comments", "author": null, "committer": null, "parents": [{"sha": "b8ecdc772703729b75fba8b4bb94acfcb6f7cfae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8ecdc772703729b75fba8b4bb94acfcb6f7cfae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8ecdc772703729b75fba8b4bb94acfcb6f7cfae"}], "stats": {"total": 547, "additions": 294, "deletions": 253}, "files": [{"sha": "665f0f22c62eb90cd112c3db5d1c8972637c0328", "filename": "gcc/config/rs6000/power10.md", "status": "modified", "additions": 268, "deletions": 251, "changes": 519, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1df2c343633ed27b7a7bd9f6b5989c75b38f1d4/gcc%2Fconfig%2Frs6000%2Fpower10.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1df2c343633ed27b7a7bd9f6b5989c75b38f1d4/gcc%2Fconfig%2Frs6000%2Fpower10.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpower10.md?ref=e1df2c343633ed27b7a7bd9f6b5989c75b38f1d4", "patch": "@@ -1,9 +1,7 @@\n-;; Scheduling description for IBM POWER10 processor.\n-;; Copyright (C) 2016-2021 Free Software Foundation, Inc.\n+;; Scheduling description for the IBM POWER10 processor.\n+;; Copyright (C) 2020-2021 Free Software Foundation, Inc.\n ;;\n-;; This is a clone of power9.md.  It is intended to be a placeholder until a\n-;; real scheduler model can be contributed.\n-;; The original power9.md was contributed by Pat Haugen (pthaugen@us.ibm.com).\n+;; Contributed by Pat Haugen (pthaugen@us.ibm.com).\n \n ;; This file is part of GCC.\n ;;\n@@ -21,240 +19,215 @@\n ;; along with GCC; see the file COPYING3.  If not see\n ;; <http://www.gnu.org/licenses/>.\n \n-;; This file was cloned from power9.md, it does not (yet) describe the actual\n-;; POWER10 processor.\n-\n-(define_automaton \"power10dsp,power10lsu,power10vsu,power10fpdiv,power10misc\")\n-\n-(define_cpu_unit \"lsu0_power10,lsu1_power10,lsu2_power10,lsu3_power10\" \"power10lsu\")\n-(define_cpu_unit \"vsu0_power10,vsu1_power10,vsu2_power10,vsu3_power10\" \"power10vsu\")\n-; Two vector permute units, part of vsu\n-(define_cpu_unit \"prm0_power10,prm1_power10\" \"power10vsu\")\n-; Two fixed point divide units, not pipelined\n-(define_cpu_unit \"fx_div0_power10,fx_div1_power10\" \"power10misc\")\n-(define_cpu_unit \"bru_power10,cryptu_power10,dfu_power10\" \"power10misc\")\n-; Create a false unit for use by non-pipelined FP div/sqrt\n-(define_cpu_unit \"fp_div0_power10,fp_div1_power10,fp_div2_power10,fp_div3_power10\"\n-\t\t \"power10fpdiv\")\n-\n-\n-(define_cpu_unit \"x0_power10,x1_power10,xa0_power10,xa1_power10,\n-\t\t  x2_power10,x3_power10,xb0_power10,xb1_power10,\n-\t\t  br0_power10,br1_power10\" \"power10dsp\")\n+; For Power10 we model (and try to pack) the in-order decode/dispatch groups\n+; which consist of 8 instructions max.  We do not try to model the details of\n+; the out-of-order issue queues and how insns flow to the various execution\n+; units except for the simple representation of the issue limitation of at\n+; most 4 insns to the execution units/2 insns to the load units/2 insns to\n+; the store units.\n+(define_automaton \"power10dispatch,power10issue\")\n+\n+; Decode/dispatch slots\n+(define_cpu_unit \"du0_power10,du1_power10,du2_power10,du3_power10,\n+\t\t  du4_power10,du5_power10,du6_power10,du7_power10\" \"power10dispatch\")\n+\n+; Four execution units\n+(define_cpu_unit \"exu0_power10,exu1_power10,exu2_power10,exu3_power10\"\n+\t\t \"power10issue\")\n+; Two load units and two store units\n+(define_cpu_unit \"lu0_power10,lu1_power10\" \"power10issue\")\n+(define_cpu_unit \"stu0_power10,stu1_power10\" \"power10issue\")\n+\n+\n+; Dispatch slots are allocated in order conforming to program order.\n+(absence_set \"du0_power10\" \"du1_power10,du2_power10,du3_power10,du4_power10,\\\n+              du5_power10,du6_power10,du7_power10\")\n+(absence_set \"du1_power10\" \"du2_power10,du3_power10,du4_power10,du5_power10,\\\n+              du6_power10,du7_power10\")\n+(absence_set \"du2_power10\" \"du3_power10,du4_power10,du5_power10,du6_power10,\\\n+\t      du7_power10\")\n+(absence_set \"du3_power10\" \"du4_power10,du5_power10,du6_power10,du7_power10\")\n+(absence_set \"du4_power10\" \"du5_power10,du6_power10,du7_power10\")\n+(absence_set \"du5_power10\" \"du6_power10,du7_power10\")\n+(absence_set \"du6_power10\" \"du7_power10\")\n \n \n ; Dispatch port reservations\n ;\n-; The processor can dispatch a maximum of 6 iops per cycle with the following\n-; general restrictions (other restrictions also apply):\n-;   1) At most 2 iops per execution slice\n-;   2) At most 2 iops to the branch unit\n-; Note that insn position in a dispatch group of 6 insns does not infer which\n-; execution slice the insn is routed to.  The units are used to infer the\n-; conflicts that exist (i.e. an 'even' requirement will preclude dispatch\n-; with 2 insns with 'superslice' requirement).\n-\n-; The xa0/xa1 units really represent the 3rd dispatch port for a superslice but\n-; are listed as separate units to allow those insns that preclude its use to\n-; still be scheduled two to a superslice while reserving the 3rd slot.  The\n-; same applies for xb0/xb1.\n-(define_reservation \"DU_xa_power10\" \"xa0_power10+xa1_power10\")\n-(define_reservation \"DU_xb_power10\" \"xb0_power10+xb1_power10\")\n-\n-; Any execution slice dispatch\n-(define_reservation \"DU_any_power10\"\n-\t\t    \"x0_power10|x1_power10|DU_xa_power10|x2_power10|x3_power10|\n-\t\t     DU_xb_power10\")\n-\n-; Even slice, actually takes even/odd slots\n-(define_reservation \"DU_even_power10\" \"x0_power10+x1_power10|x2_power10+x3_power10\")\n+; Power10 can dispatch a maximum of 8 iops per cycle. With a maximum of\n+; 4 VSU/2 Load/2 Store per cycle.\n \n-; Slice plus 3rd slot\n-(define_reservation \"DU_slice_3_power10\"\n-\t\t    \"x0_power10+xa0_power10|x1_power10+xa1_power10|\n-\t\t     x2_power10+xb0_power10|x3_power10+xb1_power10\")\n-\n-; Superslice\n-(define_reservation \"DU_super_power10\"\n-\t\t    \"x0_power10+x1_power10|x2_power10+x3_power10\")\n-\n-; 2-way cracked\n-(define_reservation \"DU_C2_power10\" \"x0_power10+x1_power10|\n-\t\t\t\t    x1_power10+DU_xa_power10|\n-\t\t\t\t    x1_power10+x2_power10|\n-\t\t\t\t    DU_xa_power10+x2_power10|\n-\t\t\t\t    x2_power10+x3_power10|\n-\t\t\t\t    x3_power10+DU_xb_power10\")\n-\n-; 2-way cracked plus 3rd slot\n-(define_reservation \"DU_C2_3_power10\" \"x0_power10+x1_power10+xa0_power10|\n-\t\t\t\t      x1_power10+x2_power10+xa1_power10|\n-\t\t\t\t      x2_power10+x3_power10+xb0_power10\")\n+; Any dispatch slot\n+(define_reservation \"DU_any_power10\"\n+\t\t    \"du0_power10|du1_power10|du2_power10|du3_power10|\n+\t\t     du4_power10|du5_power10|du6_power10|du7_power10\")\n \n-; 3-way cracked (consumes whole decode/dispatch cycle)\n-(define_reservation \"DU_C3_power10\"\n-\t\t    \"x0_power10+x1_power10+xa0_power10+xa1_power10+x2_power10+\n-\t\t     x3_power10+xb0_power10+xb1_power10+br0_power10+br1_power10\")\n+; Even slot, actually takes even/odd slots\n+(define_reservation \"DU_even_power10\"\n+\t\t    \"du0_power10+du1_power10|du2_power10+du3_power10|\n+\t\t     du4_power10+du5_power10|du6_power10+du7_power10\")\n \n-; Branch ports\n-(define_reservation \"DU_branch_power10\" \"br0_power10|br1_power10\")\n+; 4-way cracked (consumes whole decode/dispatch cycle)\n+(define_reservation \"DU_all_power10\"\n+\t\t    \"du0_power10+du1_power10+du2_power10+du3_power10+\n+\t\t     du4_power10+du5_power10+du6_power10+du7_power10\")\n \n \n ; Execution unit reservations\n-(define_reservation \"LSU_power10\"\n-\t\t    \"lsu0_power10|lsu1_power10|lsu2_power10|lsu3_power10\")\n-\n-(define_reservation \"LSU_pair_power10\"\n-\t\t    \"lsu0_power10+lsu1_power10|lsu1_power10+lsu2_power10|\n-\t\t     lsu2_power10+lsu3_power10|lsu3_power10+lsu0_power10\")\n+(define_reservation \"LU_power10\"\n+\t\t    \"lu0_power10|lu1_power10\")\n \n-(define_reservation \"VSU_power10\"\n-\t\t    \"vsu0_power10|vsu1_power10|vsu2_power10|vsu3_power10\")\n+(define_reservation \"STU_power10\"\n+\t\t    \"stu0_power10|stu1_power10\")\n \n-(define_reservation \"VSU_super_power10\"\n-\t\t    \"vsu0_power10+vsu1_power10|vsu2_power10+vsu3_power10\")\n+; Certain simple fixed-point insns can execute in the Store-agen pipe\n+(define_reservation \"SXU_power10\"\n+\t\t    \"stu0_power10|stu1_power10\")\n \n-(define_reservation \"VSU_PRM_power10\" \"prm0_power10|prm1_power10\")\n+(define_reservation \"EXU_power10\"\n+\t\t    \"exu0_power10|exu1_power10|exu2_power10|exu3_power10\")\n \n-; Define the reservation to be used by FP div/sqrt which allows other insns\n-; to be issued to the VSU, but blocks other div/sqrt for a number of cycles.\n-; Note that the number of cycles blocked varies depending on insn, but we\n-; just use the same number for all in order to keep the number of DFA states\n-; reasonable.\n-(define_reservation \"FP_DIV_power10\"\n-\t\t    \"fp_div0_power10*8|fp_div1_power10*8|fp_div2_power10*8|\n-\t\t     fp_div3_power10*8\")\n-(define_reservation \"VEC_DIV_power10\"\n-\t\t    \"fp_div0_power10*8+fp_div1_power10*8|\n-\t\t     fp_div2_power10*8+fp_div3_power10*8\")\n+(define_reservation \"EXU_super_power10\"\n+\t\t    \"exu0_power10+exu1_power10|exu2_power10+exu3_power10\")\n \n \n-; LS Unit\n+; Load Unit\n (define_insn_reservation \"power10-load\" 4\n   (and (eq_attr \"type\" \"load\")\n-       (eq_attr \"sign_extend\" \"no\")\n        (eq_attr \"update\" \"no\")\n+       (eq_attr \"size\" \"!128\")\n+       (eq_attr \"prefixed\" \"no\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_any_power10,LSU_power10\")\n-\n-(define_insn_reservation \"power10-load-update\" 4\n-  (and (eq_attr \"type\" \"load\")\n-       (eq_attr \"sign_extend\" \"no\")\n-       (eq_attr \"update\" \"yes\")\n-       (eq_attr \"cpu\" \"power10\"))\n-  \"DU_C2_power10,LSU_power10+VSU_power10\")\n+  \"DU_any_power10,LU_power10\")\n \n-(define_insn_reservation \"power10-load-ext\" 6\n+(define_insn_reservation \"power10-prefixed-load\" 4\n   (and (eq_attr \"type\" \"load\")\n-       (eq_attr \"sign_extend\" \"yes\")\n        (eq_attr \"update\" \"no\")\n+       (eq_attr \"size\" \"!128\")\n+       (eq_attr \"prefixed\" \"yes\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_C2_power10,LSU_power10\")\n+  \"DU_even_power10,LU_power10\")\n \n-(define_insn_reservation \"power10-load-ext-update\" 6\n+(define_insn_reservation \"power10-load-update\" 4\n   (and (eq_attr \"type\" \"load\")\n-       (eq_attr \"sign_extend\" \"yes\")\n        (eq_attr \"update\" \"yes\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_C3_power10,LSU_power10+VSU_power10\")\n+  \"DU_even_power10,LU_power10+SXU_power10\")\n \n (define_insn_reservation \"power10-fpload-double\" 4\n   (and (eq_attr \"type\" \"fpload\")\n        (eq_attr \"update\" \"no\")\n        (eq_attr \"size\" \"64\")\n+       (eq_attr \"prefixed\" \"no\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_slice_3_power10,LSU_power10\")\n+  \"DU_any_power10,LU_power10\")\n+\n+(define_insn_reservation \"power10-prefixed-fpload-double\" 4\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"size\" \"64\")\n+       (eq_attr \"prefixed\" \"yes\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_even_power10,LU_power10\")\n \n (define_insn_reservation \"power10-fpload-update-double\" 4\n   (and (eq_attr \"type\" \"fpload\")\n        (eq_attr \"update\" \"yes\")\n        (eq_attr \"size\" \"64\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_C2_3_power10,LSU_power10+VSU_power10\")\n+  \"DU_even_power10,LU_power10+SXU_power10\")\n \n-; SFmode loads are cracked and have additional 2 cycles over DFmode\n-(define_insn_reservation \"power10-fpload-single\" 6\n+; SFmode loads are cracked and have additional 3 cycles over DFmode\n+; Prefixed forms behave the same\n+(define_insn_reservation \"power10-fpload-single\" 7\n   (and (eq_attr \"type\" \"fpload\")\n        (eq_attr \"update\" \"no\")\n        (eq_attr \"size\" \"32\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_C2_3_power10,LSU_power10\")\n+  \"DU_even_power10,LU_power10\")\n \n-(define_insn_reservation \"power10-fpload-update-single\" 6\n+(define_insn_reservation \"power10-fpload-update-single\" 7\n   (and (eq_attr \"type\" \"fpload\")\n        (eq_attr \"update\" \"yes\")\n        (eq_attr \"size\" \"32\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_C3_power10,LSU_power10+VSU_power10\")\n+  \"DU_even_power10,LU_power10+SXU_power10\")\n \n-(define_insn_reservation \"power10-vecload\" 5\n+(define_insn_reservation \"power10-vecload\" 4\n   (and (eq_attr \"type\" \"vecload\")\n+       (eq_attr \"size\" \"!256\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_any_power10,LSU_pair_power10\")\n+  \"DU_any_power10,LU_power10\")\n \n-; Store data can issue 2 cycles after AGEN issue, 3 cycles for vector store\n-(define_insn_reservation \"power10-store\" 0\n-  (and (eq_attr \"type\" \"store\")\n-       (eq_attr \"update\" \"no\")\n-       (eq_attr \"indexed\" \"no\")\n+; lxvp\n+(define_insn_reservation \"power10-vecload-pair\" 4\n+  (and (eq_attr \"type\" \"vecload\")\n+       (eq_attr \"size\" \"256\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_slice_3_power10,LSU_power10\")\n+  \"DU_even_power10,LU_power10+SXU_power10\")\n \n-(define_insn_reservation \"power10-store-indexed\" 0\n-  (and (eq_attr \"type\" \"store\")\n+; Store Unit\n+(define_insn_reservation \"power10-store\" 0\n+  (and (eq_attr \"type\" \"store,fpstore,vecstore\")\n        (eq_attr \"update\" \"no\")\n-       (eq_attr \"indexed\" \"yes\")\n-       (eq_attr \"cpu\" \"power10\"))\n-  \"DU_slice_3_power10,LSU_power10\")\n-\n-; Update forms have 2 cycle latency for updated addr reg\n-(define_insn_reservation \"power10-store-update\" 2\n-  (and (eq_attr \"type\" \"store\")\n-       (eq_attr \"update\" \"yes\")\n-       (eq_attr \"indexed\" \"no\")\n-       (eq_attr \"cpu\" \"power10\"))\n-  \"DU_C2_3_power10,LSU_power10+VSU_power10\")\n-\n-; Update forms have 2 cycle latency for updated addr reg\n-(define_insn_reservation \"power10-store-update-indexed\" 2\n-  (and (eq_attr \"type\" \"store\")\n-       (eq_attr \"update\" \"yes\")\n-       (eq_attr \"indexed\" \"yes\")\n+       (eq_attr \"prefixed\" \"no\")\n+       (eq_attr \"size\" \"!128\")\n+       (eq_attr \"size\" \"!256\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_C2_3_power10,LSU_power10+VSU_power10\")\n+  \"DU_any_power10,STU_power10\")\n \n-(define_insn_reservation \"power10-fpstore\" 0\n-  (and (eq_attr \"type\" \"fpstore\")\n-       (eq_attr \"update\" \"no\")\n+(define_insn_reservation \"power10-prefixed-store\" 0\n+  (and (eq_attr \"type\" \"store,fpstore,vecstore\")\n+       (eq_attr \"prefixed\" \"yes\")\n+       (eq_attr \"size\" \"!128\")\n+       (eq_attr \"size\" \"!256\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_slice_3_power10,LSU_power10\")\n+  \"DU_even_power10,STU_power10\")\n \n ; Update forms have 2 cycle latency for updated addr reg\n-(define_insn_reservation \"power10-fpstore-update\" 2\n-  (and (eq_attr \"type\" \"fpstore\")\n+(define_insn_reservation \"power10-store-update\" 2\n+  (and (eq_attr \"type\" \"store,fpstore\")\n        (eq_attr \"update\" \"yes\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_C2_3_power10,LSU_power10+VSU_power10\")\n+  \"DU_any_power10,STU_power10\")\n \n-(define_insn_reservation \"power10-vecstore\" 0\n+; stxvp\n+(define_insn_reservation \"power10-vecstore-pair\" 0\n   (and (eq_attr \"type\" \"vecstore\")\n+       (eq_attr \"size\" \"256\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_super_power10,LSU_pair_power10\")\n+  \"DU_even_power10,stu0_power10+stu1_power10\")\n \n (define_insn_reservation \"power10-larx\" 4\n   (and (eq_attr \"type\" \"load_l\")\n+       (eq_attr \"size\" \"!128\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_any_power10,LU_power10\")\n+\n+; All load quad forms\n+(define_insn_reservation \"power10-lq\" 4\n+  (and (eq_attr \"type\" \"load,load_l\")\n+       (eq_attr \"size\" \"128\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_any_power10,LSU_power10\")\n+  \"DU_even_power10,LU_power10+SXU_power10\")\n \n-(define_insn_reservation \"power10-stcx\" 2\n+(define_insn_reservation \"power10-stcx\" 0\n   (and (eq_attr \"type\" \"store_c\")\n+       (eq_attr \"size\" \"!128\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_any_power10,STU_power10\")\n+\n+; All store quad forms\n+(define_insn_reservation \"power10-stq\" 0\n+  (and (eq_attr \"type\" \"store,store_c\")\n+       (eq_attr \"size\" \"128\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_C2_3_power10,LSU_power10+VSU_power10\")\n+  \"DU_even_power10,stu0_power10+stu1_power10\")\n \n-(define_insn_reservation \"power10-sync\" 4\n+(define_insn_reservation \"power10-sync\" 1\n   (and (eq_attr \"type\" \"sync,isync\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_any_power10,LSU_power10\")\n+  \"DU_even_power10,STU_power10\")\n \n \n ; VSU Execution Unit\n@@ -264,258 +237,302 @@\n ; Most ALU insns are simple 2 cycle, including record form\n (define_insn_reservation \"power10-alu\" 2\n   (and (eq_attr \"type\" \"add,exts,integer,logical,isel\")\n+       (eq_attr \"prefixed\" \"no\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_any_power10,VSU_power10\")\n-; 5 cycle CR latency\n-(define_bypass 5 \"power10-alu\"\n+  \"DU_any_power10,EXU_power10\")\n+; 4 cycle CR latency\n+(define_bypass 4 \"power10-alu\"\n \t\t \"power10-crlogical,power10-mfcr,power10-mfcrf\")\n \n-; Rotate/shift prevent use of third slot\n+; paddi\n+(define_insn_reservation \"power10-paddi\" 2\n+  (and (eq_attr \"type\" \"add\")\n+       (eq_attr \"prefixed\" \"yes\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_even_power10,EXU_power10\")\n+\n+; Rotate/shift (non-record form)\n (define_insn_reservation \"power10-rot\" 2\n   (and (eq_attr \"type\" \"insert,shift\")\n        (eq_attr \"dot\" \"no\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_slice_3_power10,VSU_power10\")\n+  \"DU_any_power10,EXU_power10\")\n \n-; Record form rotate/shift are cracked\n-(define_insn_reservation \"power10-cracked-alu\" 2\n+; Record form rotate/shift\n+(define_insn_reservation \"power10-rot-compare\" 3\n   (and (eq_attr \"type\" \"insert,shift\")\n        (eq_attr \"dot\" \"yes\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_C2_3_power10,VSU_power10\")\n-; 7 cycle CR latency\n-(define_bypass 7 \"power10-cracked-alu\"\n+  \"DU_any_power10,EXU_power10\")\n+; 5 cycle CR latency\n+(define_bypass 5 \"power10-rot-compare\"\n \t\t \"power10-crlogical,power10-mfcr,power10-mfcrf\")\n \n (define_insn_reservation \"power10-alu2\" 3\n   (and (eq_attr \"type\" \"cntlz,popcnt,trap\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_any_power10,VSU_power10\")\n-; 6 cycle CR latency\n-(define_bypass 6 \"power10-alu2\"\n+  \"DU_any_power10,EXU_power10\")\n+; 5 cycle CR latency\n+(define_bypass 5 \"power10-alu2\"\n \t\t \"power10-crlogical,power10-mfcr,power10-mfcrf\")\n \n (define_insn_reservation \"power10-cmp\" 2\n   (and (eq_attr \"type\" \"cmp\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_any_power10,VSU_power10\")\n-\n+  \"DU_any_power10,EXU_power10\")\n \n ; Treat 'two' and 'three' types as 2 or 3 way cracked\n (define_insn_reservation \"power10-two\" 4\n   (and (eq_attr \"type\" \"two\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_C2_power10,VSU_power10\")\n+  \"DU_even_power10,EXU_power10\")\n \n (define_insn_reservation \"power10-three\" 6\n   (and (eq_attr \"type\" \"three\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_C3_power10,VSU_power10\")\n+  \"DU_all_power10,EXU_power10\")\n \n (define_insn_reservation \"power10-mul\" 5\n   (and (eq_attr \"type\" \"mul\")\n        (eq_attr \"dot\" \"no\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_slice_3_power10,VSU_power10\")\n+  \"DU_any_power10,EXU_power10\")\n+; 4 cycle MUL->MUL latency\n+(define_bypass 4 \"power10-mul\"\n+\t\t \"power10-mul,power10-mul-compare\")\n \n (define_insn_reservation \"power10-mul-compare\" 5\n   (and (eq_attr \"type\" \"mul\")\n        (eq_attr \"dot\" \"yes\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_C2_3_power10,VSU_power10\")\n-; 10 cycle CR latency\n-(define_bypass 10 \"power10-mul-compare\"\n+  \"DU_even_power10,EXU_power10\")\n+; 4 cycle MUL->MUL latency\n+(define_bypass 4 \"power10-mul-compare\"\n+\t\t \"power10-mul,power10-mul-compare\")\n+; 7 cycle CR latency\n+(define_bypass 7 \"power10-mul-compare\"\n \t\t \"power10-crlogical,power10-mfcr,power10-mfcrf\")\n \n-; Fixed point divides reserve the divide units for a minimum of 8 cycles\n-(define_insn_reservation \"power10-idiv\" 16\n+(define_insn_reservation \"power10-div\" 12\n   (and (eq_attr \"type\" \"div\")\n-       (eq_attr \"size\" \"32\")\n+       (eq_attr \"dot\" \"no\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_even_power10,fx_div0_power10*8|fx_div1_power10*8\")\n+  \"DU_any_power10,EXU_power10\")\n \n-(define_insn_reservation \"power10-ldiv\" 24\n+(define_insn_reservation \"power10-div-compare\" 12\n   (and (eq_attr \"type\" \"div\")\n-       (eq_attr \"size\" \"64\")\n+       (eq_attr \"dot\" \"yes\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_even_power10,fx_div0_power10*8|fx_div1_power10*8\")\n+  \"DU_even_power10,EXU_power10\")\n+; 14 cycle CR latency\n+(define_bypass 14 \"power10-div-compare\"\n+\t\t \"power10-crlogical,power10-mfcr,power10-mfcrf\")\n \n (define_insn_reservation \"power10-crlogical\" 2\n   (and (eq_attr \"type\" \"cr_logical\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_any_power10,VSU_power10\")\n+  \"DU_any_power10,EXU_power10\")\n \n (define_insn_reservation \"power10-mfcrf\" 2\n   (and (eq_attr \"type\" \"mfcrf\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_any_power10,VSU_power10\")\n+  \"DU_any_power10,EXU_power10\")\n \n-(define_insn_reservation \"power10-mfcr\" 6\n+(define_insn_reservation \"power10-mfcr\" 3\n   (and (eq_attr \"type\" \"mfcr\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_C3_power10,VSU_power10\")\n+  \"DU_even_power10,EXU_power10\")\n \n ; Should differentiate between 1 cr field and > 1 since target of > 1 cr\n ; is cracked\n-(define_insn_reservation \"power10-mtcr\" 2\n+(define_insn_reservation \"power10-mtcr\" 3\n   (and (eq_attr \"type\" \"mtcr\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_any_power10,VSU_power10\")\n+  \"DU_any_power10,EXU_power10\")\n \n-; Move to LR/CTR are executed in VSU\n-(define_insn_reservation \"power10-mtjmpr\" 5\n+(define_insn_reservation \"power10-mtjmpr\" 3\n   (and (eq_attr \"type\" \"mtjmpr\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_any_power10,VSU_power10\")\n+  \"DU_any_power10,EXU_power10\")\n+\n+(define_insn_reservation \"power10-mfjmpr\" 2\n+  (and (eq_attr \"type\" \"mfjmpr\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_any_power10,EXU_power10\")\n+\n \n ; Floating point/Vector ops\n-(define_insn_reservation \"power10-fpsimple\" 2\n+\n+(define_insn_reservation \"power10-fpsimple\" 3\n   (and (eq_attr \"type\" \"fpsimple\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_slice_3_power10,VSU_power10\")\n+  \"DU_any_power10,EXU_power10\")\n \n (define_insn_reservation \"power10-fp\" 5\n   (and (eq_attr \"type\" \"fp,dmul\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_slice_3_power10,VSU_power10\")\n+  \"DU_any_power10,EXU_power10\")\n \n (define_insn_reservation \"power10-fpcompare\" 3\n   (and (eq_attr \"type\" \"fpcompare\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_slice_3_power10,VSU_power10\")\n+  \"DU_any_power10,EXU_power10\")\n \n-; FP div/sqrt are executed in the VSU slices.  They are not pipelined wrt other\n-; div/sqrt insns, but for the most part do not block pipelined ops.\n (define_insn_reservation \"power10-sdiv\" 22\n   (and (eq_attr \"type\" \"sdiv\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_slice_3_power10,VSU_power10,FP_DIV_power10\")\n+  \"DU_any_power10,EXU_power10\")\n \n (define_insn_reservation \"power10-ddiv\" 27\n   (and (eq_attr \"type\" \"ddiv\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_slice_3_power10,VSU_power10,FP_DIV_power10\")\n+  \"DU_any_power10,EXU_power10\")\n \n (define_insn_reservation \"power10-sqrt\" 26\n   (and (eq_attr \"type\" \"ssqrt\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_slice_3_power10,VSU_power10,FP_DIV_power10\")\n+  \"DU_any_power10,EXU_power10\")\n \n (define_insn_reservation \"power10-dsqrt\" 36\n   (and (eq_attr \"type\" \"dsqrt\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_slice_3_power10,VSU_power10,FP_DIV_power10\")\n+  \"DU_any_power10,EXU_power10\")\n \n (define_insn_reservation \"power10-vec-2cyc\" 2\n   (and (eq_attr \"type\" \"vecmove,veclogical,vecexts,veccmpfx\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_super_power10,VSU_super_power10\")\n+  \"DU_any_power10,EXU_power10\")\n \n (define_insn_reservation \"power10-veccmp\" 3\n   (and (eq_attr \"type\" \"veccmp\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_super_power10,VSU_super_power10\")\n+  \"DU_any_power10,EXU_power10\")\n \n-(define_insn_reservation \"power10-vecsimple\" 3\n+(define_insn_reservation \"power10-vecsimple\" 2\n   (and (eq_attr \"type\" \"vecsimple\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_super_power10,VSU_super_power10\")\n+  \"DU_any_power10,EXU_power10\")\n \n-(define_insn_reservation \"power10-vecnormal\" 7\n+(define_insn_reservation \"power10-vecnormal\" 5\n   (and (eq_attr \"type\" \"vecfloat,vecdouble\")\n        (eq_attr \"size\" \"!128\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_super_power10,VSU_super_power10\")\n+  \"DU_any_power10,EXU_power10\")\n \n-; Quad-precision FP ops, execute in DFU\n (define_insn_reservation \"power10-qp\" 12\n   (and (eq_attr \"type\" \"vecfloat,vecdouble\")\n        (eq_attr \"size\" \"128\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_super_power10,dfu_power10\")\n+  \"DU_any_power10,EXU_power10\")\n \n (define_insn_reservation \"power10-vecperm\" 3\n   (and (eq_attr \"type\" \"vecperm\")\n+       (eq_attr \"prefixed\" \"no\")\n+       (eq_attr \"dot\" \"no\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_super_power10,VSU_PRM_power10\")\n+  \"DU_any_power10,EXU_power10\")\n \n-(define_insn_reservation \"power10-veccomplex\" 7\n+(define_insn_reservation \"power10-vecperm-compare\" 3\n+  (and (eq_attr \"type\" \"vecperm\")\n+       (eq_attr \"dot\" \"yes\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_even_power10,EXU_power10\")\n+\n+(define_insn_reservation \"power10-prefixed-vecperm\" 3\n+  (and (eq_attr \"type\" \"vecperm\")\n+       (eq_attr \"prefixed\" \"yes\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_even_power10,EXU_power10\")\n+\n+(define_insn_reservation \"power10-veccomplex\" 6\n   (and (eq_attr \"type\" \"veccomplex\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_super_power10,VSU_super_power10\")\n+  \"DU_any_power10,EXU_power10\")\n \n (define_insn_reservation \"power10-vecfdiv\" 24\n   (and (eq_attr \"type\" \"vecfdiv\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_super_power10,VSU_super_power10,VEC_DIV_power10\")\n+  \"DU_any_power10,EXU_power10\")\n \n (define_insn_reservation \"power10-vecdiv\" 27\n   (and (eq_attr \"type\" \"vecdiv\")\n        (eq_attr \"size\" \"!128\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_super_power10,VSU_super_power10,VEC_DIV_power10\")\n+  \"DU_any_power10,EXU_power10\")\n \n-; Use 8 for DFU reservation on QP div/mul to limit DFA state size\n (define_insn_reservation \"power10-qpdiv\" 56\n   (and (eq_attr \"type\" \"vecdiv\")\n        (eq_attr \"size\" \"128\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_super_power10,dfu_power10*8\")\n+  \"DU_any_power10,EXU_power10\")\n \n (define_insn_reservation \"power10-qpmul\" 24\n   (and (eq_attr \"type\" \"qmul\")\n        (eq_attr \"size\" \"128\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_super_power10,dfu_power10*8\")\n+  \"DU_any_power10,EXU_power10\")\n \n (define_insn_reservation \"power10-mtvsr\" 2\n   (and (eq_attr \"type\" \"mtvsr\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_slice_3_power10,VSU_power10\")\n+  \"DU_any_power10,EXU_power10\")\n \n (define_insn_reservation \"power10-mfvsr\" 2\n   (and (eq_attr \"type\" \"mfvsr\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_slice_3_power10,VSU_power10\")\n+  \"DU_any_power10,EXU_power10\")\n \n \n-; Branch Unit\n-; Move from LR/CTR are executed in BRU but consume a writeback port from an\n-; execution slice.\n-(define_insn_reservation \"power10-mfjmpr\" 6\n-  (and (eq_attr \"type\" \"mfjmpr\")\n-       (eq_attr \"cpu\" \"power10\"))\n-  \"DU_branch_power10,bru_power10+VSU_power10\")\n-\n-; Branch is 2 cycles\n+; Branch\n+; Branch is 2 cycles, grouped with STU for issue\n (define_insn_reservation \"power10-branch\" 2\n   (and (eq_attr \"type\" \"jmpreg,branch\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_branch_power10,bru_power10\")\n+  \"DU_any_power10,STU_power10\")\n \n \n-; Crypto Unit\n-(define_insn_reservation \"power10-crypto\" 6\n+; Crypto\n+(define_insn_reservation \"power10-crypto\" 4\n   (and (eq_attr \"type\" \"crypto\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_super_power10,cryptu_power10\")\n-\n+  \"DU_any_power10,EXU_power10\")\n \n-; HTM Unit\n-(define_insn_reservation \"power10-htm\" 4\n-  (and (eq_attr \"type\" \"htm\")\n-       (eq_attr \"cpu\" \"power10\"))\n-  \"DU_C2_power10,LSU_power10\")\n \n-(define_insn_reservation \"power10-htm-simple\" 2\n-  (and (eq_attr \"type\" \"htmsimple\")\n+; HTM\n+(define_insn_reservation \"power10-htm\" 2\n+  (and (eq_attr \"type\" \"htmsimple,htm\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_any_power10,VSU_power10\")\n+  \"DU_any_power10,EXU_power10\")\n \n \n-; DFP Unit\n+; DFP\n+; Use the minimum 12 cycle latency for all DFP insns\n (define_insn_reservation \"power10-dfp\" 12\n   (and (eq_attr \"type\" \"dfp\")\n+       (eq_attr \"size\" \"!128\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_any_power10,EXU_power10\")\n+\n+(define_insn_reservation \"power10-dfpq\" 12\n+  (and (eq_attr \"type\" \"dfp\")\n+       (eq_attr \"size\" \"128\")\n        (eq_attr \"cpu\" \"power10\"))\n-  \"DU_even_power10,dfu_power10\")\n+  \"DU_even_power10,EXU_power10\")\n+\n+; MMA\n+(define_insn_reservation \"power10-mma\" 9\n+  (and (eq_attr \"type\" \"mma\")\n+       (eq_attr \"prefixed\" \"no\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_any_power10,EXU_super_power10\")\n+\n+(define_insn_reservation \"power10-prefixed-mma\" 9\n+  (and (eq_attr \"type\" \"mma\")\n+       (eq_attr \"prefixed\" \"yes\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_even_power10,EXU_super_power10\")\n+; 4 cycle MMA->MMA latency\n+(define_bypass 4 \"power10-mma,power10-prefixed-mma\"\n+\t\t \"power10-mma,power10-prefixed-mma\")\n+\n "}, {"sha": "712dd1c460b37e92d05c307c68011dfe46ad5165", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1df2c343633ed27b7a7bd9f6b5989c75b38f1d4/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1df2c343633ed27b7a7bd9f6b5989c75b38f1d4/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=e1df2c343633ed27b7a7bd9f6b5989c75b38f1d4", "patch": "@@ -1080,6 +1080,26 @@ struct processor_costs power9_cost = {\n   COSTS_N_INSNS (3),\t/* SF->DF convert */\n };\n \n+/* Instruction costs on POWER10 processors.  */\n+static const\n+struct processor_costs power10_cost = {\n+  COSTS_N_INSNS (2),\t/* mulsi */\n+  COSTS_N_INSNS (2),\t/* mulsi_const */\n+  COSTS_N_INSNS (2),\t/* mulsi_const9 */\n+  COSTS_N_INSNS (2),\t/* muldi */\n+  COSTS_N_INSNS (6),\t/* divsi */\n+  COSTS_N_INSNS (6),\t/* divdi */\n+  COSTS_N_INSNS (2),\t/* fp */\n+  COSTS_N_INSNS (2),\t/* dmul */\n+  COSTS_N_INSNS (11),\t/* sdiv */\n+  COSTS_N_INSNS (13),\t/* ddiv */\n+  128,\t\t\t/* cache line size */\n+  32,\t\t\t/* l1 cache */\n+  512,\t\t\t/* l2 cache */\n+  16,\t\t\t/* prefetch streams */\n+  COSTS_N_INSNS (2),\t/* SF->DF convert */\n+};\n+\n /* Instruction costs on POWER A2 processors.  */\n static const\n struct processor_costs ppca2_cost = {\n@@ -4774,10 +4794,13 @@ rs6000_option_override_internal (bool global_init_p)\n \tbreak;\n \n       case PROCESSOR_POWER9:\n-      case PROCESSOR_POWER10:\n \trs6000_cost = &power9_cost;\n \tbreak;\n \n+      case PROCESSOR_POWER10:\n+\trs6000_cost = &power10_cost;\n+\tbreak;\n+\n       case PROCESSOR_PPCA2:\n \trs6000_cost = &ppca2_cost;\n \tbreak;\n@@ -18443,8 +18466,9 @@ rs6000_issue_rate (void)\n   case PROCESSOR_POWER8:\n     return 7;\n   case PROCESSOR_POWER9:\n-  case PROCESSOR_POWER10:\n     return 6;\n+  case PROCESSOR_POWER10:\n+    return 8;\n   default:\n     return 1;\n   }"}]}