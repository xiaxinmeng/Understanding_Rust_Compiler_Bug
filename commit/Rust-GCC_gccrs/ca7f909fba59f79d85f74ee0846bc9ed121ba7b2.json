{"sha": "ca7f909fba59f79d85f74ee0846bc9ed121ba7b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E3ZjkwOWZiYTU5Zjc5ZDg1Zjc0ZWUwODQ2YmM5ZWQxMjFiYTdiMg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2019-03-15T13:56:55Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2019-03-15T13:56:55Z"}, "message": "[PR88534] accept VAR_DECL in class literal template parms\n\nP0732R2 / C++ 2a introduce class literals as template parameters.  The\nfront-end uses VAR_DECLs constructed from such literals to bind the\ntemplate PARM_DECLs, but dwarf2out.c used to reject such VAR_DECLs.\n\nTaking DECL_INITIAL from such VAR_DECLs enables the generation of\nDW_AT_const_value for them, at least when the class literal can\nactually be represented as such.\n\n\nfor  gcc/ChangeLog\n\n\tPR c++/88534\n\tPR c++/88537\n\t* dwarf2out.c (generic_parameter_die): Follow DECL_INITIAL of\n\tVAR_DECL args.\n\nfor  gcc/testsuite/ChangeLog\n\n\tPR c++/88534\n\tPR c++/88537\n\t* g++.dg/cpp2a/pr88534.C: New.\n\t* g++.dg/cpp2a/pr88537.C: New.\n\nFrom-SVN: r269709", "tree": {"sha": "161d051727d53d881f25c5dbea2f6177cdc476be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/161d051727d53d881f25c5dbea2f6177cdc476be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca7f909fba59f79d85f74ee0846bc9ed121ba7b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca7f909fba59f79d85f74ee0846bc9ed121ba7b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca7f909fba59f79d85f74ee0846bc9ed121ba7b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca7f909fba59f79d85f74ee0846bc9ed121ba7b2/comments", "author": null, "committer": null, "parents": [{"sha": "d2025512b3fb357768d85ccde8e21f571481d00f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2025512b3fb357768d85ccde8e21f571481d00f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2025512b3fb357768d85ccde8e21f571481d00f"}], "stats": {"total": 102, "additions": 102, "deletions": 0}, "files": [{"sha": "dfec5891a93835d79ed65439d20032df8a6c5f55", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca7f909fba59f79d85f74ee0846bc9ed121ba7b2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca7f909fba59f79d85f74ee0846bc9ed121ba7b2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ca7f909fba59f79d85f74ee0846bc9ed121ba7b2", "patch": "@@ -1,3 +1,10 @@\n+2019-03-15  Alexandre Oliva <aoliva@redhat.com>\n+\n+\tPR c++/88534\n+\tPR c++/88537\n+\t* dwarf2out.c (generic_parameter_die): Follow DECL_INITIAL of\n+\tVAR_DECL args.\n+\n 2019-03-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/89709"}, {"sha": "251fff7b9ae961cd49196077624129ad45db58be", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca7f909fba59f79d85f74ee0846bc9ed121ba7b2/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca7f909fba59f79d85f74ee0846bc9ed121ba7b2/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=ca7f909fba59f79d85f74ee0846bc9ed121ba7b2", "patch": "@@ -13603,6 +13603,13 @@ generic_parameter_die (tree parm, tree arg,\n   dw_die_ref tmpl_die = NULL;\n   const char *name = NULL;\n \n+  /* C++2a accepts class literals as template parameters, and var\n+     decls with initializers represent them.  The VAR_DECLs would be\n+     rejected, but we can take the DECL_INITIAL constructor and\n+     attempt to expand it.  */\n+  if (arg && VAR_P (arg))\n+    arg = DECL_INITIAL (arg);\n+\n   if (!parm || !DECL_NAME (parm) || !arg)\n     return NULL;\n "}, {"sha": "139e45a68029691cb87bde91b2829ae9c379e5a5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca7f909fba59f79d85f74ee0846bc9ed121ba7b2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca7f909fba59f79d85f74ee0846bc9ed121ba7b2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ca7f909fba59f79d85f74ee0846bc9ed121ba7b2", "patch": "@@ -1,3 +1,10 @@\n+2019-03-15  Alexandre Oliva <aoliva@redhat.com>\n+\n+\tPR c++/88534\n+\tPR c++/88537\n+\t* g++.dg/cpp2a/pr88534.C: New.\n+\t* g++.dg/cpp2a/pr88537.C: New.\n+\n 2019-03-15  Robin Dapp  <rdapp@linux.ibm.com>\n \n \t* gcc.target/s390/target-attribute/tattr-1.c (htm0): -mhtm -> '-mhtm'."}, {"sha": "54faf385f11aa21d76f7982296c360ae4a9f5c6a", "filename": "gcc/testsuite/g++.dg/cpp2a/pr88534.C", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca7f909fba59f79d85f74ee0846bc9ed121ba7b2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fpr88534.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca7f909fba59f79d85f74ee0846bc9ed121ba7b2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fpr88534.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fpr88534.C?ref=ca7f909fba59f79d85f74ee0846bc9ed121ba7b2", "patch": "@@ -0,0 +1,65 @@\n+// { dg-do compile { target c++2a } }\n+// { dg-options \"-g\" }\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+namespace std\n+{\n+\n+template <typename T, T... I>\n+struct integer_sequence\n+{\n+  typedef T value_type;\n+  static constexpr size_t size () noexcept { return sizeof...(I); }\n+};\n+\n+template <typename T, T N>\n+using make_integer_sequence = integer_sequence<T, __integer_pack (N)...>;\n+\n+template <size_t... I>\n+using index_sequence = integer_sequence<size_t, I...>;\n+\n+template <size_t N>\n+using make_index_sequence = make_integer_sequence<size_t, N>;\n+}\n+\n+template <typename T, size_t N> struct S\n+{\n+  T content[N];\n+  using char_type = T;\n+  template <size_t... I>\n+  constexpr S (const T (&input)[N], std::index_sequence<I...>) noexcept : content{input[I]...} { }\n+  constexpr S (const T (&input)[N]) noexcept : S (input, std::make_index_sequence<N> ()) { }\n+  constexpr size_t size () const noexcept\n+  {\n+    if (content[N - 1] == '\\0')\n+      return N - 1;\n+    else\n+      return N;\n+  }\n+  constexpr T operator[] (size_t i) const noexcept\n+  {\n+    return content[i];\n+  }\n+  constexpr const T *begin () const noexcept\n+  {\n+    return content;\n+  }\n+  constexpr const T *end () const noexcept\n+  {\n+    return content + size ();\n+  }\n+};\n+\n+template <typename T, size_t N> S (const T (&)[N]) -> S<T, N>;\n+\n+template <S S>\n+struct F\n+{\n+};\n+\n+auto\n+foo ()\n+{\n+  F<\"test\"> f;\n+}"}, {"sha": "d558d45f5783086554607ca0537b3bd44f424a9e", "filename": "gcc/testsuite/g++.dg/cpp2a/pr88537.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca7f909fba59f79d85f74ee0846bc9ed121ba7b2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fpr88537.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca7f909fba59f79d85f74ee0846bc9ed121ba7b2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fpr88537.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fpr88537.C?ref=ca7f909fba59f79d85f74ee0846bc9ed121ba7b2", "patch": "@@ -0,0 +1,16 @@\n+// { dg-do compile { target c++2a } }\n+// { dg-options \"-g\" }\n+\n+struct pair {\n+\tunsigned a;\n+\tunsigned b;\n+\tconstexpr pair(unsigned _a, unsigned _b) noexcept: a{_a}, b{_b} { }\n+};\n+\n+template <pair p> void fnc() {\n+\t\n+}\n+\n+void f() {\n+    fnc<pair(10,20)>();\n+}"}]}