{"sha": "f4e4284dcccf30faabdb7d56eb9481717c9eb535", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRlNDI4NGRjY2NmMzBmYWFiZGI3ZDU2ZWI5NDgxNzE3YzllYjUzNQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-03-05T00:22:48Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-03-05T00:22:48Z"}, "message": "type_traits: Add is_base_of.\n\n2005-03-04  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/type_traits: Add is_base_of.\n\t* testsuite/tr1/4_metaprogramming/relationships_between_types/\n\tis_base_of/is_base_of.cc: New.\n\t* testsuite/tr1/4_metaprogramming/relationships_between_types/\n\tis_base_of/typedefs.cc: Likewise.\n\nFrom-SVN: r95911", "tree": {"sha": "efce5374a01e36396abcf2be3ed9384e24f5efb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efce5374a01e36396abcf2be3ed9384e24f5efb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4e4284dcccf30faabdb7d56eb9481717c9eb535", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4e4284dcccf30faabdb7d56eb9481717c9eb535", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4e4284dcccf30faabdb7d56eb9481717c9eb535", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4e4284dcccf30faabdb7d56eb9481717c9eb535/comments", "author": null, "committer": null, "parents": [{"sha": "ce11b6e146973a79a5e9ab2e5303dff6d73b0237", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce11b6e146973a79a5e9ab2e5303dff6d73b0237", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce11b6e146973a79a5e9ab2e5303dff6d73b0237"}], "stats": {"total": 177, "additions": 176, "deletions": 1}, "files": [{"sha": "4ec4808e56d07f3f8398dba5f84043fb9a08e6a3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e4284dcccf30faabdb7d56eb9481717c9eb535/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e4284dcccf30faabdb7d56eb9481717c9eb535/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f4e4284dcccf30faabdb7d56eb9481717c9eb535", "patch": "@@ -1,3 +1,11 @@\n+2005-03-04  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/type_traits: Add is_base_of.\n+\t* testsuite/tr1/4_metaprogramming/relationships_between_types/\n+\tis_base_of/is_base_of.cc: New.\n+\t* testsuite/tr1/4_metaprogramming/relationships_between_types/\n+\tis_base_of/typedefs.cc: Likewise.\n+\n 2005-03-03  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/tr1/functional: Convert relative path."}, {"sha": "afdea0c2ad2f5d32ec6d93864c1300edba640a3d", "filename": "libstdc++-v3/include/tr1/type_traits", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e4284dcccf30faabdb7d56eb9481717c9eb535/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e4284dcccf30faabdb7d56eb9481717c9eb535/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits?ref=f4e4284dcccf30faabdb7d56eb9481717c9eb535", "patch": "@@ -42,7 +42,7 @@ namespace std\n {\n namespace tr1\n {\n-  // For use in is_enum, is_abstract and elsewhere.\n+  // For use in __conv_helper, is_abstract and elsewhere.\n   struct __sfinae_types\n   {\n     typedef char __one;\n@@ -456,6 +456,43 @@ namespace tr1\n     struct is_same<_Tp, _Tp>\n     : public true_type { };\n \n+  // See Daveed Vandevoorde explanation in http://tinyurl.com/502f.\n+  // Also see Rani Sharoni in http://tinyurl.com/6jvyq.\n+  template<typename _Base, typename _Derived,\n+\t   bool = (!__is_union_or_class<_Base>::value\n+\t\t   || !__is_union_or_class<_Derived>::value\n+\t\t   || is_same<_Base, _Derived>::value)>\n+    struct __is_base_of_helper\n+    : public __sfinae_types\n+    {\n+    private:\n+      typedef typename remove_cv<_Base>::type     _NoCv_Base;      \n+      typedef typename remove_cv<_Derived>::type  _NoCv_Derived;\n+      \n+      template<typename _Up>\n+        static __one __test(_NoCv_Derived&, _Up);\n+      static __two __test(_NoCv_Base&, int);\n+   \n+      struct _Conv\n+      {\n+\toperator _NoCv_Derived&();\n+\toperator _NoCv_Base&() const;\n+      };\n+   \n+    public:\n+      static const bool __value = sizeof(__test(_Conv(), 0)) == 1;\n+    };\n+\n+  template<typename _Base, typename _Derived>\n+    struct __is_base_of_helper<_Base, _Derived, true>\n+    { static const bool __value = is_same<_Base, _Derived>::value; };\n+\n+  template<typename _Base, typename _Derived>\n+    struct is_base_of\n+    : public integral_constant<bool,\n+\t\t\t       __is_base_of_helper<_Base, _Derived>::__value>\n+    { };\n+\n   template<typename _Tp>\n     struct __is_int_or_cref\n     {"}, {"sha": "cac05b2cb3e4c55a8aac4adc6c2d949942c52e40", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/relationships_between_types/is_base_of/is_base_of.cc", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e4284dcccf30faabdb7d56eb9481717c9eb535/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Frelationships_between_types%2Fis_base_of%2Fis_base_of.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e4284dcccf30faabdb7d56eb9481717c9eb535/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Frelationships_between_types%2Fis_base_of%2Fis_base_of.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Frelationships_between_types%2Fis_base_of%2Fis_base_of.cc?ref=f4e4284dcccf30faabdb7d56eb9481717c9eb535", "patch": "@@ -0,0 +1,94 @@\n+// 2005-03-04  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 4.6 Relationships between types\n+\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+class HiddenCons\n+{\n+  HiddenCons();\n+  HiddenCons(const HiddenCons&);\n+};\n+\n+class DerivedHiddenCons\n+: private HiddenCons\n+{\n+  DerivedHiddenCons();\n+  DerivedHiddenCons(const DerivedHiddenCons&);\n+};\n+\n+class MultiDerivedHiddenCons\n+: private HiddenCons, private __gnu_test::ClassType \n+{\n+  MultiDerivedHiddenCons();\n+  MultiDerivedHiddenCons(const MultiDerivedHiddenCons&);\n+};\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::is_base_of;\n+  using namespace __gnu_test;\n+\n+  // Positive tests.\n+  VERIFY( (test_relationship<is_base_of, int, int>(true)) );\n+  VERIFY( (test_relationship<is_base_of, EnumType, EnumType>(true)) );\n+  VERIFY( (test_relationship<is_base_of, UnionType, UnionType>(true)) );\n+  VERIFY( (test_relationship<is_base_of, AbstractClass,\n+\t   AbstractClass>(true)) );\n+  VERIFY( (test_relationship<is_base_of, ClassType, DerivedType>(true)) );\n+  VERIFY( (test_relationship<is_base_of, ClassType, const DerivedType>(true)) );\n+  VERIFY( (test_relationship<is_base_of, volatile ClassType,\n+\t   volatile DerivedType>(true)) );  \n+  VERIFY( (test_relationship<is_base_of, PolymorphicClass,\n+\t   DerivedPolymorphic>(true)) );\n+  VERIFY( (test_relationship<is_base_of, HiddenCons,\n+\t   DerivedHiddenCons>(true)) );\n+  VERIFY( (test_relationship<is_base_of, HiddenCons,\n+\t   MultiDerivedHiddenCons>(true)) );\n+  VERIFY( (test_relationship<is_base_of, ClassType,\n+\t   MultiDerivedHiddenCons>(true)) );\n+\n+  // Negative tests.\n+  VERIFY( (test_relationship<is_base_of, int, const int>(false)) );\n+  VERIFY( (test_relationship<is_base_of, volatile UnionType,\n+\t   UnionType>(false)) );\n+  VERIFY( (test_relationship<is_base_of, int&, ClassType>(false)) );\n+  VERIFY( (test_relationship<is_base_of, AbstractClass, ClassType>(false)) );\n+  VERIFY( (test_relationship<is_base_of, ClassType, AbstractClass>(false)) );  \n+  VERIFY( (test_relationship<is_base_of, DerivedType, ClassType>(false)) );\n+  VERIFY( (test_relationship<is_base_of, DerivedPolymorphic,\n+\t   PolymorphicClass>(false)) );\n+  VERIFY( (test_relationship<is_base_of, DerivedHiddenCons,\n+\t   HiddenCons>(false)) );\n+  VERIFY( (test_relationship<is_base_of, MultiDerivedHiddenCons,\n+\t   HiddenCons>(false)) );\n+  VERIFY( (test_relationship<is_base_of, MultiDerivedHiddenCons,\n+\t   ClassType>(false)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "0223f4d25f4034027f88e7c1390f831b06b14881", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/relationships_between_types/is_base_of/typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e4284dcccf30faabdb7d56eb9481717c9eb535/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Frelationships_between_types%2Fis_base_of%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e4284dcccf30faabdb7d56eb9481717c9eb535/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Frelationships_between_types%2Fis_base_of%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Frelationships_between_types%2Fis_base_of%2Ftypedefs.cc?ref=f4e4284dcccf30faabdb7d56eb9481717c9eb535", "patch": "@@ -0,0 +1,36 @@\n+// 2005-03-04  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// \n+// NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n+\n+#include <tr1/type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::tr1::is_base_of<int, int>      test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}]}