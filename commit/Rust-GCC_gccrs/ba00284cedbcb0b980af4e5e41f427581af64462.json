{"sha": "ba00284cedbcb0b980af4e5e41f427581af64462", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmEwMDI4NGNlZGJjYjBiOTgwYWY0ZTVlNDFmNDI3NTgxYWY2NDQ2Mg==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2017-06-07T10:49:09Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2017-06-07T10:49:09Z"}, "message": "tree-affine.c (ssa.h): Include header file.\n\n\t* tree-affine.c (ssa.h): Include header file.\n\t(tree_to_aff_combination): Handle (T1)(X - CST) when inner type\n\thas wrapping overflow behavior.\n\nFrom-SVN: r248957", "tree": {"sha": "b19b90322a38f30446e0196c1c32f130ed39a972", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b19b90322a38f30446e0196c1c32f130ed39a972"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba00284cedbcb0b980af4e5e41f427581af64462", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba00284cedbcb0b980af4e5e41f427581af64462", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba00284cedbcb0b980af4e5e41f427581af64462", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba00284cedbcb0b980af4e5e41f427581af64462/comments", "author": null, "committer": null, "parents": [{"sha": "8813f50d2c8653bbc65450fd1244a85c1ba7902f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8813f50d2c8653bbc65450fd1244a85c1ba7902f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8813f50d2c8653bbc65450fd1244a85c1ba7902f"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "708051d9b495ed6c591caed26fcff22c2052fdf0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba00284cedbcb0b980af4e5e41f427581af64462/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba00284cedbcb0b980af4e5e41f427581af64462/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ba00284cedbcb0b980af4e5e41f427581af64462", "patch": "@@ -1,3 +1,9 @@\n+2017-06-07  Bin Cheng  <bin.cheng@arm.com>\n+\n+\t* tree-affine.c (ssa.h): Include header file.\n+\t(tree_to_aff_combination): Handle (T1)(X - CST) when inner type\n+\thas wrapping overflow behavior.\n+\n 2017-06-07  Bin Cheng  <bin.cheng@arm.com>\n \n \t* tree-affine.c (tree_to_aff_combination): Handle (T1)(X + X)."}, {"sha": "f7a5f121c9c9ed74498a2f9ba5d702c17d7b025c", "filename": "gcc/tree-affine.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba00284cedbcb0b980af4e5e41f427581af64462/gcc%2Ftree-affine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba00284cedbcb0b980af4e5e41f427581af64462/gcc%2Ftree-affine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-affine.c?ref=ba00284cedbcb0b980af4e5e41f427581af64462", "patch": "@@ -24,6 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"rtl.h\"\n #include \"tree.h\"\n #include \"gimple.h\"\n+#include \"ssa.h\"\n #include \"tree-pretty-print.h\"\n #include \"fold-const.h\"\n #include \"tree-affine.h\"\n@@ -393,6 +394,30 @@ tree_to_aff_combination (tree expr, tree type, aff_tree *comb)\n \t\ttree_to_aff_combination (expr, type, comb);\n \t\treturn;\n \t      }\n+\t    wide_int minv, maxv;\n+\t    /* If inner type has wrapping overflow behavior, fold conversion\n+\t       for below case:\n+\t\t (T1)(X - CST) -> (T1)X - (T1)CST\n+\t       if X - CST doesn't overflow by range information.  Also handle\n+\t       (T1)(X + CST) as (T1)(X - (-CST)).  */\n+\t    if (TYPE_UNSIGNED (itype)\n+\t\t&& TYPE_OVERFLOW_WRAPS (itype)\n+\t\t&& TREE_CODE (op0) == SSA_NAME\n+\t\t&& TREE_CODE (op1) == INTEGER_CST\n+\t\t&& icode != MULT_EXPR\n+\t\t&& get_range_info (op0, &minv, &maxv) == VR_RANGE)\n+\t      {\n+\t\tif (icode == PLUS_EXPR)\n+\t\t  op1 = wide_int_to_tree (itype, wi::neg (op1));\n+\t\tif (wi::geu_p (minv, op1))\n+\t\t  {\n+\t\t    op0 = fold_convert (otype, op0);\n+\t\t    op1 = fold_convert (otype, op1);\n+\t\t    expr = fold_build2 (MINUS_EXPR, otype, op0, op1);\n+\t\t    tree_to_aff_combination (expr, type, comb);\n+\t\t    return;\n+\t\t  }\n+\t      }\n \t  }\n       }\n       break;"}]}