{"sha": "47d0866c79c04d8d86ce3d1eff9dda7899179c4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdkMDg2NmM3OWMwNGQ4ZDg2Y2UzZDFlZmY5ZGRhNzg5OTE3OWM0Yg==", "commit": {"author": {"name": "Jeff Sturm", "email": "jsturm@one-point.com", "date": "2002-03-28T02:08:36Z"}, "committer": {"name": "Jeff Sturm", "email": "jsturm@gcc.gnu.org", "date": "2002-03-28T02:08:36Z"}, "message": "* java/net/PlainDatagramSocketImpl.java\n\t(close): Use native implementation.\n\t(finalize): New method.\n\n\t* java/net/PlainSocketImpl.java (finalize): New method.\n\n\t* java/net/natPlainDatagramSocketImpl.cc\n\t(java/io/FileDescriptor.h): Don't include.\n\t(close): Implement method here.\n\t(create): Don't assign fd.\n\n\t* java/net/natPlainSocketImpl.cc\n\t(java/io/FileDescriptor.h): Don't include.\n\t(create): Don't assign fd.\n\t(accept): Likewise.\n\t(close): Synchronize.\n\nFrom-SVN: r51492", "tree": {"sha": "51916c05d0f82e2a643314cf640e5e7582d021d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51916c05d0f82e2a643314cf640e5e7582d021d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47d0866c79c04d8d86ce3d1eff9dda7899179c4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47d0866c79c04d8d86ce3d1eff9dda7899179c4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47d0866c79c04d8d86ce3d1eff9dda7899179c4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47d0866c79c04d8d86ce3d1eff9dda7899179c4b/comments", "author": null, "committer": null, "parents": [{"sha": "1b58660a9d302afe516eca5023066585ae6ceb85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b58660a9d302afe516eca5023066585ae6ceb85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b58660a9d302afe516eca5023066585ae6ceb85"}], "stats": {"total": 104, "additions": 73, "deletions": 31}, "files": [{"sha": "fb9476da9cbeb096726d5f726f65106c43b92f47", "filename": "libjava/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47d0866c79c04d8d86ce3d1eff9dda7899179c4b/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47d0866c79c04d8d86ce3d1eff9dda7899179c4b/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=47d0866c79c04d8d86ce3d1eff9dda7899179c4b", "patch": "@@ -1,3 +1,22 @@\n+2002-03-27  Jeff Sturm  <jsturm@one-point.com>\n+\n+\t* java/net/PlainDatagramSocketImpl.java\n+\t(close): Use native implementation.\n+\t(finalize): New method.\n+\n+\t* java/net/PlainSocketImpl.java (finalize): New method.\n+\n+\t* java/net/natPlainDatagramSocketImpl.cc\n+\t(java/io/FileDescriptor.h): Don't include.\n+\t(close): Implement method here.\n+\t(create): Don't assign fd.\n+\n+\t* java/net/natPlainSocketImpl.cc\n+\t(java/io/FileDescriptor.h): Don't include.\n+\t(create): Don't assign fd.\n+\t(accept): Likewise.\n+\t(close): Synchronize.\n+\n 2002-03-27  Richard Henderson  <rth@redhat.com>\n \n \t* include/posix-threads.h [alpha] (_Jv_ThreadSelf): Avoid a copy."}, {"sha": "55ea468dadc19de80d951e7c0aaf63b6942cb5e2", "filename": "libjava/java/net/PlainDatagramSocketImpl.java", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47d0866c79c04d8d86ce3d1eff9dda7899179c4b/libjava%2Fjava%2Fnet%2FPlainDatagramSocketImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47d0866c79c04d8d86ce3d1eff9dda7899179c4b/libjava%2Fjava%2Fnet%2FPlainDatagramSocketImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FPlainDatagramSocketImpl.java?ref=47d0866c79c04d8d86ce3d1eff9dda7899179c4b", "patch": "@@ -67,27 +67,7 @@ protected native void bind(int lport, InetAddress laddr)\n   public native Object getOption(int optID) throws SocketException;\n   private native void mcastGrp(InetAddress inetaddr, boolean join)\n \tthrows IOException;\n-\n-  protected void close()\n-  {\n-    // FIXME: The close method in each of the DatagramSocket* classes does\n-    // not throw an IOException.  The issue is that FileDescriptor.close()\n-    // in natFileDescriptorPosix.cc can throw one, so we have to catch\n-    // it here.  It seems that FileDescriptor.close is properly throwing\n-    // the IOException on errors since many of the java.io classes depend\n-    // on that.  This probably requires a bit more research but for now,\n-    // we'll catch the IOException here.\n-    try\n-      {\n-        if (fd.valid())\n-\t  fd.close();\n-      }\n-    catch (IOException e)\n-      {\n-\tSystem.err.println(\"PlainDatagramSocketImpl.close: Error closing - \" +\n-\t  e.getMessage());\n-      }\n-  }\n+  protected native void close();\n \n   // Deprecated in JDK 1.2.\n   protected byte getTTL() throws IOException\n@@ -110,4 +90,14 @@ protected void leave(InetAddress inetaddr) throws IOException\n   {\n     mcastGrp(inetaddr, false);\n   }\n+\n+  protected void finalize() throws Throwable\n+  {\n+    synchronized (this)\n+      {\n+\tif (fnum != -1)\n+\t  close();\n+      }\n+    super.finalize();\n+  }\n }"}, {"sha": "354d652a5bf6863e93722a96d4d5a89c16064060", "filename": "libjava/java/net/PlainSocketImpl.java", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47d0866c79c04d8d86ce3d1eff9dda7899179c4b/libjava%2Fjava%2Fnet%2FPlainSocketImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47d0866c79c04d8d86ce3d1eff9dda7899179c4b/libjava%2Fjava%2Fnet%2FPlainSocketImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FPlainSocketImpl.java?ref=47d0866c79c04d8d86ce3d1eff9dda7899179c4b", "patch": "@@ -39,11 +39,6 @@ class PlainSocketImpl extends SocketImpl\n    * This is used for reads and writes to/from the socket and\n    * to close it.\n    *\n-   * {@link SocketImpl#fd} is created from this like so:\n-   * <pre>\n-   *   fd = new FileDescriptor (fnum);\n-   * </pre>\n-   *\n    * When the socket is closed this is reset to -1.\n    */\n   int fnum = -1;\n@@ -108,6 +103,22 @@ private native int read(byte[] buffer, int offset, int count)\n   private native void write(byte[] buffer, int offset, int count)\n     throws IOException;\n \n+  protected void finalize() throws Throwable\n+  {\n+    synchronized (this)\n+      {\n+\tif (fnum != -1)\n+\t  try\n+\t    {\n+\t      close();\n+\t    }\n+\t  catch (IOException ex)\n+\t    {\n+\t      // ignore\n+\t    }\n+      }\n+    super.finalize();\n+  }\n \n   /** @return the input stream attached to the socket.\n    */"}, {"sha": "071d3679e518ca373fa33005709cd6e486af1ffb", "filename": "libjava/java/net/natPlainDatagramSocketImpl.cc", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47d0866c79c04d8d86ce3d1eff9dda7899179c4b/libjava%2Fjava%2Fnet%2FnatPlainDatagramSocketImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47d0866c79c04d8d86ce3d1eff9dda7899179c4b/libjava%2Fjava%2Fnet%2FnatPlainDatagramSocketImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FnatPlainDatagramSocketImpl.cc?ref=47d0866c79c04d8d86ce3d1eff9dda7899179c4b", "patch": "@@ -51,7 +51,6 @@ _Jv_bind (int fd, struct sockaddr *addr, int addrlen)\n \n #include <gcj/cni.h>\n #include <java/io/IOException.h>\n-#include <java/io/FileDescriptor.h>\n #include <java/io/InterruptedIOException.h>\n #include <java/net/BindException.h>\n #include <java/net/SocketException.h>\n@@ -90,6 +89,13 @@ java::net::PlainDatagramSocketImpl::peek (java::net::InetAddress *)\n     JvNewStringLatin1 (\"DatagramSocketImpl.peek: unimplemented\"));\n }\n \n+void\n+java::net::PlainDatagramSocketImpl::close ()\n+{\n+  throw new java::io::IOException (\n+    JvNewStringLatin1 (\"DatagramSocketImpl.close: unimplemented\"));\n+}\n+\n void\n java::net::PlainDatagramSocketImpl::send (java::net::DatagramPacket *)\n {\n@@ -188,8 +194,9 @@ java::net::PlainDatagramSocketImpl::create ()\n \n   _Jv_platform_close_on_exec (sock);\n \n+  // We use fnum in place of fd here.  From leaving fd null we avoid\n+  // the double close problem in FileDescriptor.finalize.\n   fnum = sock;\n-  fd = new java::io::FileDescriptor (sock);\n }\n \n void\n@@ -284,6 +291,19 @@ java::net::PlainDatagramSocketImpl::peek (java::net::InetAddress *i)\n   throw new java::io::IOException (JvNewStringUTF (strerr));\n }\n \n+// Close(shutdown) the socket.\n+void\n+java::net::PlainDatagramSocketImpl::close ()\n+{\n+  // Avoid races from asynchronous finalization.\n+  JvSynchronize sync (this);\n+\n+  // The method isn't declared to throw anything, so we disregard\n+  // the return value.\n+  ::close (fnum);\n+  fnum = -1;\n+}\n+\n void\n java::net::PlainDatagramSocketImpl::send (java::net::DatagramPacket *p)\n {"}, {"sha": "85f831332b8ad2d928ba51e88b838cbe55fc782b", "filename": "libjava/java/net/natPlainSocketImpl.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47d0866c79c04d8d86ce3d1eff9dda7899179c4b/libjava%2Fjava%2Fnet%2FnatPlainSocketImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47d0866c79c04d8d86ce3d1eff9dda7899179c4b/libjava%2Fjava%2Fnet%2FnatPlainSocketImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FnatPlainSocketImpl.cc?ref=47d0866c79c04d8d86ce3d1eff9dda7899179c4b", "patch": "@@ -102,7 +102,6 @@ _Jv_accept (int fd, struct sockaddr *addr, socklen_t *addrlen)\n #include <gcj/cni.h>\n #include <gcj/javaprims.h>\n #include <java/io/IOException.h>\n-#include <java/io/FileDescriptor.h>\n #include <java/io/InterruptedIOException.h>\n #include <java/net/BindException.h>\n #include <java/net/ConnectException.h>\n@@ -234,8 +233,9 @@ java::net::PlainSocketImpl::create (jboolean stream)\n \n   _Jv_platform_close_on_exec (sock);\n \n+  // We use fnum in place of fd here.  From leaving fd null we avoid\n+  // the double close problem in FileDescriptor.finalize.\n   fnum = sock;\n-  fd = new java::io::FileDescriptor (sock);\n }\n \n void\n@@ -402,7 +402,6 @@ java::net::PlainSocketImpl::accept (java::net::PlainSocketImpl *s)\n   s->localport = localport;\n   s->address = new InetAddress (raddr, NULL);\n   s->port = rport;\n-  s->fd = new java::io::FileDescriptor (new_socket);\n   return;\n  error:\n   char* strerr = strerror (errno);\n@@ -413,6 +412,9 @@ java::net::PlainSocketImpl::accept (java::net::PlainSocketImpl *s)\n void\n java::net::PlainSocketImpl::close()\n {\n+  // Avoid races from asynchronous finalization.\n+  JvSynchronize sync (this);\n+\n   // should we use shutdown here? how would that effect so_linger?\n   int res = ::close (fnum);\n "}]}