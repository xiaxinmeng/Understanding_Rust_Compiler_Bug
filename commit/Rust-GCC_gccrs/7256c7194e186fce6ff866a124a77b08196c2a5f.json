{"sha": "7256c7194e186fce6ff866a124a77b08196c2a5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI1NmM3MTk0ZTE4NmZjZTZmZjg2NmExMjRhNzdiMDgxOTZjMmE1Zg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-20T08:53:23Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-20T08:53:23Z"}, "message": "Use function_arg_info for TARGET_CALLEE_COPIES\n\nThe hook is passed the unpromoted type mode instead of the promoted mode.\n\nThe aarch64 definition is redundant, but worth keeping for emphasis.\n\n2019-08-20  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* target.def (callee_copies): Take a function_arg_info instead\n\tof a mode, type and named flag.\n\t* doc/tm.texi: Regenerate.\n\t* targhooks.h (hook_callee_copies_named): Take a function_arg_info\n\tinstead of a mode, type and named flag.\n\t(hook_bool_CUMULATIVE_ARGS_mode_tree_bool_false): Delete.\n\t(hook_bool_CUMULATIVE_ARGS_mode_tree_bool_true): Likewise.\n\t(hook_bool_CUMULATIVE_ARGS_arg_info_true): New function.\n\t* targhooks.c (hook_callee_copies_named): Take a function_arg_info\n\tinstead of a mode, type and named flag.\n\t(hook_bool_CUMULATIVE_ARGS_mode_tree_bool_false): Delete.\n\t(hook_bool_CUMULATIVE_ARGS_mode_tree_bool_true): Likewise.\n\t(hook_bool_CUMULATIVE_ARGS_arg_info_true): New function.\n\t* calls.h (reference_callee_copied): Take a function_arg_info\n\tinstead of a mode, type and named flag.\n\t* calls.c (reference_callee_copied): Likewise.\n\t(initialize_argument_information): Update call accordingly.\n\t(emit_library_call_value_1): Likewise.\n\t* function.c (gimplify_parameters): Likewise.\n\t* config/aarch64/aarch64.c (TARGET_CALLEE_COPIES): Define to\n\thook_bool_CUMULATIVE_ARGS_arg_info_false instead of\n\thook_bool_CUMULATIVE_ARGS_mode_tree_bool_false.\n\t* config/c6x/c6x.c (c6x_callee_copies): Delete.\n\t(TARGET_CALLEE_COPIES): Define to\n\thook_bool_CUMULATIVE_ARGS_arg_info_true instead.\n\t* config/epiphany/epiphany.c (TARGET_CALLEE_COPIES): Define to\n\thook_bool_CUMULATIVE_ARGS_arg_info_true instead of\n\thook_bool_CUMULATIVE_ARGS_mode_tree_bool_true.\n\t* config/mips/mips.c (mips_callee_copies): Take a function_arg_info\n\tinstead of a mode, type and named flag.\n\t* config/mmix/mmix.c (TARGET_CALLEE_COPIES): Define to\n\thook_bool_CUMULATIVE_ARGS_arg_info_true instead of\n\thook_bool_CUMULATIVE_ARGS_mode_tree_bool_true.\n\t* config/mn10300/mn10300.c (TARGET_CALLEE_COPIES): Likewise.\n\t* config/msp430/msp430.c (msp430_callee_copies): Delete.\n\t(TARGET_CALLEE_COPIES): Define to\n\thook_bool_CUMULATIVE_ARGS_arg_info_true instead.\n\t* config/pa/pa.c (pa_callee_copies): Take a function_arg_info\n\tinstead of a mode, type and named flag.\n\t* config/sh/sh.c (sh_callee_copies): Likewise.\n\t* config/v850/v850.c (TARGET_CALLEE_COPIES): Define to\n\thook_bool_CUMULATIVE_ARGS_arg_info_true instead of\n\thook_bool_CUMULATIVE_ARGS_mode_tree_bool_true.\n\nFrom-SVN: r274702", "tree": {"sha": "24b47c0624b9395db68addd8cb07d4e5b581050b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24b47c0624b9395db68addd8cb07d4e5b581050b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7256c7194e186fce6ff866a124a77b08196c2a5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7256c7194e186fce6ff866a124a77b08196c2a5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7256c7194e186fce6ff866a124a77b08196c2a5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7256c7194e186fce6ff866a124a77b08196c2a5f/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6930c98c69ad695469ee7daa74b3b6d578afdd0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6930c98c69ad695469ee7daa74b3b6d578afdd0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6930c98c69ad695469ee7daa74b3b6d578afdd0d"}], "stats": {"total": 170, "additions": 85, "deletions": 85}, "files": [{"sha": "e57cc99779bef93d55f482693bd67923f74a18eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7256c7194e186fce6ff866a124a77b08196c2a5f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7256c7194e186fce6ff866a124a77b08196c2a5f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7256c7194e186fce6ff866a124a77b08196c2a5f", "patch": "@@ -1,3 +1,49 @@\n+2019-08-20  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* target.def (callee_copies): Take a function_arg_info instead\n+\tof a mode, type and named flag.\n+\t* doc/tm.texi: Regenerate.\n+\t* targhooks.h (hook_callee_copies_named): Take a function_arg_info\n+\tinstead of a mode, type and named flag.\n+\t(hook_bool_CUMULATIVE_ARGS_mode_tree_bool_false): Delete.\n+\t(hook_bool_CUMULATIVE_ARGS_mode_tree_bool_true): Likewise.\n+\t(hook_bool_CUMULATIVE_ARGS_arg_info_true): New function.\n+\t* targhooks.c (hook_callee_copies_named): Take a function_arg_info\n+\tinstead of a mode, type and named flag.\n+\t(hook_bool_CUMULATIVE_ARGS_mode_tree_bool_false): Delete.\n+\t(hook_bool_CUMULATIVE_ARGS_mode_tree_bool_true): Likewise.\n+\t(hook_bool_CUMULATIVE_ARGS_arg_info_true): New function.\n+\t* calls.h (reference_callee_copied): Take a function_arg_info\n+\tinstead of a mode, type and named flag.\n+\t* calls.c (reference_callee_copied): Likewise.\n+\t(initialize_argument_information): Update call accordingly.\n+\t(emit_library_call_value_1): Likewise.\n+\t* function.c (gimplify_parameters): Likewise.\n+\t* config/aarch64/aarch64.c (TARGET_CALLEE_COPIES): Define to\n+\thook_bool_CUMULATIVE_ARGS_arg_info_false instead of\n+\thook_bool_CUMULATIVE_ARGS_mode_tree_bool_false.\n+\t* config/c6x/c6x.c (c6x_callee_copies): Delete.\n+\t(TARGET_CALLEE_COPIES): Define to\n+\thook_bool_CUMULATIVE_ARGS_arg_info_true instead.\n+\t* config/epiphany/epiphany.c (TARGET_CALLEE_COPIES): Define to\n+\thook_bool_CUMULATIVE_ARGS_arg_info_true instead of\n+\thook_bool_CUMULATIVE_ARGS_mode_tree_bool_true.\n+\t* config/mips/mips.c (mips_callee_copies): Take a function_arg_info\n+\tinstead of a mode, type and named flag.\n+\t* config/mmix/mmix.c (TARGET_CALLEE_COPIES): Define to\n+\thook_bool_CUMULATIVE_ARGS_arg_info_true instead of\n+\thook_bool_CUMULATIVE_ARGS_mode_tree_bool_true.\n+\t* config/mn10300/mn10300.c (TARGET_CALLEE_COPIES): Likewise.\n+\t* config/msp430/msp430.c (msp430_callee_copies): Delete.\n+\t(TARGET_CALLEE_COPIES): Define to\n+\thook_bool_CUMULATIVE_ARGS_arg_info_true instead.\n+\t* config/pa/pa.c (pa_callee_copies): Take a function_arg_info\n+\tinstead of a mode, type and named flag.\n+\t* config/sh/sh.c (sh_callee_copies): Likewise.\n+\t* config/v850/v850.c (TARGET_CALLEE_COPIES): Define to\n+\thook_bool_CUMULATIVE_ARGS_arg_info_true instead of\n+\thook_bool_CUMULATIVE_ARGS_mode_tree_bool_true.\n+\n 2019-08-20  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* target.def (function_arg_advance): Take a function_arg_info instead"}, {"sha": "6be8acd38e346df8d154a4278892e53a66288551", "filename": "gcc/calls.c", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7256c7194e186fce6ff866a124a77b08196c2a5f/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7256c7194e186fce6ff866a124a77b08196c2a5f/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=7256c7194e186fce6ff866a124a77b08196c2a5f", "patch": "@@ -935,17 +935,15 @@ pass_va_arg_by_reference (tree type)\n   return pass_by_reference (NULL, function_arg_info (type, /*named=*/false));\n }\n \n-/* Return true if TYPE, which is passed by reference, should be callee\n+/* Return true if ARG, which is passed by reference, should be callee\n    copied instead of caller copied.  */\n \n bool\n-reference_callee_copied (CUMULATIVE_ARGS *ca, machine_mode mode,\n-\t\t\t tree type, bool named_arg)\n+reference_callee_copied (CUMULATIVE_ARGS *ca, const function_arg_info &arg)\n {\n-  if (type && TREE_ADDRESSABLE (type))\n+  if (arg.type && TREE_ADDRESSABLE (arg.type))\n     return false;\n-  return targetm.calls.callee_copies (pack_cumulative_args (ca), mode, type,\n-\t\t\t\t      named_arg);\n+  return targetm.calls.callee_copies (pack_cumulative_args (ca), arg);\n }\n \n \n@@ -2002,9 +2000,7 @@ initialize_argument_information (int num_actuals ATTRIBUTE_UNUSED,\n \t  bool callee_copies;\n \t  tree base = NULL_TREE;\n \n-\t  callee_copies\n-\t    = reference_callee_copied (args_so_far_pnt, TYPE_MODE (type),\n-\t\t\t\t       type, argpos < n_named_args);\n+\t  callee_copies = reference_callee_copied (args_so_far_pnt, orig_arg);\n \n \t  /* If we're compiling a thunk, pass through invisible references\n \t     instead of making a copy.  */\n@@ -4911,8 +4907,7 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n       if (pass_by_reference (&args_so_far_v, orig_arg))\n \t{\n \t  rtx slot;\n-\t  int must_copy\n-\t    = !reference_callee_copied (&args_so_far_v, mode, NULL_TREE, 1);\n+\t  int must_copy = !reference_callee_copied (&args_so_far_v, orig_arg);\n \n \t  /* If this was a CONST function, it is now PURE since it now\n \t     reads memory.  */"}, {"sha": "709a0769b768a07fd2eb97a8fb75a38f1e779f75", "filename": "gcc/calls.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7256c7194e186fce6ff866a124a77b08196c2a5f/gcc%2Fcalls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7256c7194e186fce6ff866a124a77b08196c2a5f/gcc%2Fcalls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.h?ref=7256c7194e186fce6ff866a124a77b08196c2a5f", "patch": "@@ -118,8 +118,8 @@ extern void fixup_tail_calls (void);\n \n extern bool pass_by_reference (CUMULATIVE_ARGS *, function_arg_info);\n extern bool pass_va_arg_by_reference (tree);\n-extern bool reference_callee_copied (CUMULATIVE_ARGS *, machine_mode,\n-\t\t\t\t     tree, bool);\n+extern bool reference_callee_copied (CUMULATIVE_ARGS *,\n+\t\t\t\t     const function_arg_info &);\n extern void maybe_warn_alloc_args_overflow (tree, tree, tree[2], int[2]);\n extern tree get_attr_nonstring_decl (tree, tree * = NULL);\n extern void maybe_warn_nonstring_arg (tree, tree);"}, {"sha": "146d0201f50e0f02a9c7a3e0f8515070fdb42f76", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7256c7194e186fce6ff866a124a77b08196c2a5f/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7256c7194e186fce6ff866a124a77b08196c2a5f/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=7256c7194e186fce6ff866a124a77b08196c2a5f", "patch": "@@ -20346,7 +20346,7 @@ aarch64_run_selftests (void)\n #define TARGET_BUILD_BUILTIN_VA_LIST aarch64_build_builtin_va_list\n \n #undef TARGET_CALLEE_COPIES\n-#define TARGET_CALLEE_COPIES hook_bool_CUMULATIVE_ARGS_mode_tree_bool_false\n+#define TARGET_CALLEE_COPIES hook_bool_CUMULATIVE_ARGS_arg_info_false\n \n #undef TARGET_CAN_ELIMINATE\n #define TARGET_CAN_ELIMINATE aarch64_can_eliminate"}, {"sha": "37da9a419db0e69b004915c31796d7502393176f", "filename": "gcc/config/c6x/c6x.c", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7256c7194e186fce6ff866a124a77b08196c2a5f/gcc%2Fconfig%2Fc6x%2Fc6x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7256c7194e186fce6ff866a124a77b08196c2a5f/gcc%2Fconfig%2Fc6x%2Fc6x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.c?ref=7256c7194e186fce6ff866a124a77b08196c2a5f", "patch": "@@ -635,7 +635,7 @@ c6x_function_value_regno_p (const unsigned int regno)\n }\n \n /* Types larger than 64 bit, and variable sized types, are passed by\n-   reference.  The callee must copy them; see c6x_callee_copies.  */\n+   reference.  The callee must copy them; see TARGET_CALLEE_COPIES.  */\n \n static bool\n c6x_pass_by_reference (cumulative_args_t, const function_arg_info &arg)\n@@ -669,17 +669,6 @@ c6x_return_in_msb (const_tree valtype)\n   return TARGET_BIG_ENDIAN && AGGREGATE_TYPE_P (valtype) && size == 3;\n }\n \n-/* Implement TARGET_CALLEE_COPIES.  */\n-\n-static bool\n-c6x_callee_copies (cumulative_args_t cum_v ATTRIBUTE_UNUSED,\n-\t\t   machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t   const_tree type ATTRIBUTE_UNUSED,\n-\t\t   bool named ATTRIBUTE_UNUSED)\n-{\n-  return true;\n-}\n-\n /* Return the type to use as __builtin_va_list.  */\n static tree\n c6x_build_builtin_va_list (void)\n@@ -6726,7 +6715,7 @@ c6x_modes_tieable_p (machine_mode mode1, machine_mode mode2)\n #undef TARGET_PASS_BY_REFERENCE\n #define TARGET_PASS_BY_REFERENCE c6x_pass_by_reference\n #undef TARGET_CALLEE_COPIES\n-#define TARGET_CALLEE_COPIES c6x_callee_copies\n+#define TARGET_CALLEE_COPIES hook_bool_CUMULATIVE_ARGS_arg_info_true\n #undef TARGET_STRUCT_VALUE_RTX\n #define TARGET_STRUCT_VALUE_RTX c6x_struct_value_rtx\n #undef TARGET_FUNCTION_OK_FOR_SIBCALL"}, {"sha": "cc51cfaaf98073bc0cba06255a716a271b7ba134", "filename": "gcc/config/epiphany/epiphany.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7256c7194e186fce6ff866a124a77b08196c2a5f/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7256c7194e186fce6ff866a124a77b08196c2a5f/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.c?ref=7256c7194e186fce6ff866a124a77b08196c2a5f", "patch": "@@ -90,7 +90,7 @@ static rtx_insn *frame_insn (rtx);\n \n #define TARGET_RETURN_IN_MEMORY epiphany_return_in_memory\n #define TARGET_PASS_BY_REFERENCE epiphany_pass_by_reference\n-#define TARGET_CALLEE_COPIES hook_bool_CUMULATIVE_ARGS_mode_tree_bool_true\n+#define TARGET_CALLEE_COPIES hook_bool_CUMULATIVE_ARGS_arg_info_true\n #define TARGET_FUNCTION_VALUE epiphany_function_value\n #define TARGET_LIBCALL_VALUE epiphany_libcall_value\n #define TARGET_FUNCTION_VALUE_REGNO_P epiphany_function_value_regno_p"}, {"sha": "37ebde577b7b9886332fc7c06b82e339bcf1916a", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7256c7194e186fce6ff866a124a77b08196c2a5f/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7256c7194e186fce6ff866a124a77b08196c2a5f/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=7256c7194e186fce6ff866a124a77b08196c2a5f", "patch": "@@ -6259,11 +6259,9 @@ mips_pass_by_reference (cumulative_args_t, const function_arg_info &arg)\n /* Implement TARGET_CALLEE_COPIES.  */\n \n static bool\n-mips_callee_copies (cumulative_args_t cum ATTRIBUTE_UNUSED,\n-\t\t    machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t    const_tree type ATTRIBUTE_UNUSED, bool named)\n+mips_callee_copies (cumulative_args_t, const function_arg_info &arg)\n {\n-  return mips_abi == ABI_EABI && named;\n+  return mips_abi == ABI_EABI && arg.named;\n }\n \f\n /* See whether VALTYPE is a record whose fields should be returned in"}, {"sha": "7c12e74a73dc0edcd13f2a162c9353eae181d343", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7256c7194e186fce6ff866a124a77b08196c2a5f/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7256c7194e186fce6ff866a124a77b08196c2a5f/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=7256c7194e186fce6ff866a124a77b08196c2a5f", "patch": "@@ -263,7 +263,7 @@ static HOST_WIDE_INT mmix_starting_frame_offset (void);\n #undef TARGET_PASS_BY_REFERENCE\n #define TARGET_PASS_BY_REFERENCE mmix_pass_by_reference\n #undef TARGET_CALLEE_COPIES\n-#define TARGET_CALLEE_COPIES hook_bool_CUMULATIVE_ARGS_mode_tree_bool_true\n+#define TARGET_CALLEE_COPIES hook_bool_CUMULATIVE_ARGS_arg_info_true\n \n #undef TARGET_PREFERRED_RELOAD_CLASS\n #define TARGET_PREFERRED_RELOAD_CLASS mmix_preferred_reload_class"}, {"sha": "5502d65c4caac9757f886799148f5d9dfbe21cb5", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7256c7194e186fce6ff866a124a77b08196c2a5f/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7256c7194e186fce6ff866a124a77b08196c2a5f/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=7256c7194e186fce6ff866a124a77b08196c2a5f", "patch": "@@ -3354,7 +3354,7 @@ mn10300_reorg (void)\n #undef  TARGET_PASS_BY_REFERENCE\n #define TARGET_PASS_BY_REFERENCE mn10300_pass_by_reference\n #undef  TARGET_CALLEE_COPIES\n-#define TARGET_CALLEE_COPIES hook_bool_CUMULATIVE_ARGS_mode_tree_bool_true\n+#define TARGET_CALLEE_COPIES hook_bool_CUMULATIVE_ARGS_arg_info_true\n #undef  TARGET_ARG_PARTIAL_BYTES\n #define TARGET_ARG_PARTIAL_BYTES mn10300_arg_partial_bytes\n #undef  TARGET_FUNCTION_ARG"}, {"sha": "c5cf7044aeffd6a6720824cbd693630b735143a0", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7256c7194e186fce6ff866a124a77b08196c2a5f/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7256c7194e186fce6ff866a124a77b08196c2a5f/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=7256c7194e186fce6ff866a124a77b08196c2a5f", "patch": "@@ -750,16 +750,7 @@ msp430_pass_by_reference (cumulative_args_t, const function_arg_info &arg)\n }\n \n #undef  TARGET_CALLEE_COPIES\n-#define TARGET_CALLEE_COPIES msp430_callee_copies\n-\n-static bool\n-msp430_callee_copies (cumulative_args_t cap ATTRIBUTE_UNUSED,\n-\t\t      machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t      const_tree type ATTRIBUTE_UNUSED,\n-\t\t      bool named ATTRIBUTE_UNUSED)\n-{\n-  return true;\n-}\n+#define TARGET_CALLEE_COPIES hook_bool_CUMULATIVE_ARGS_arg_info_true\n \n #undef  TARGET_FUNCTION_ARG_ADVANCE\n #define TARGET_FUNCTION_ARG_ADVANCE msp430_function_arg_advance"}, {"sha": "9366b106b32f87df79b8a1f00cde24a91d4949ae", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7256c7194e186fce6ff866a124a77b08196c2a5f/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7256c7194e186fce6ff866a124a77b08196c2a5f/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=7256c7194e186fce6ff866a124a77b08196c2a5f", "patch": "@@ -197,8 +197,7 @@ static bool pa_cannot_force_const_mem (machine_mode, rtx);\n static bool pa_legitimate_constant_p (machine_mode, rtx);\n static unsigned int pa_section_type_flags (tree, const char *, int);\n static bool pa_legitimate_address_p (machine_mode, rtx, bool);\n-static bool pa_callee_copies (cumulative_args_t, machine_mode,\n-\t\t\t      const_tree, bool);\n+static bool pa_callee_copies (cumulative_args_t, const function_arg_info &);\n static unsigned int pa_hard_regno_nregs (unsigned int, machine_mode);\n static bool pa_hard_regno_mode_ok (unsigned int, machine_mode);\n static bool pa_modes_tieable_p (machine_mode, machine_mode);\n@@ -10764,10 +10763,7 @@ pa_maybe_emit_compare_and_swap_exchange_loop (rtx target, rtx mem, rtx val)\n    in the 64-bit HP runtime.  */\n \n static bool\n-pa_callee_copies (cumulative_args_t cum ATTRIBUTE_UNUSED,\n-\t\t  machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t  const_tree type ATTRIBUTE_UNUSED,\n-\t\t  bool named ATTRIBUTE_UNUSED)\n+pa_callee_copies (cumulative_args_t, const function_arg_info &)\n {\n   return !TARGET_CALLER_COPIES;\n }"}, {"sha": "da912ca9abdcb296744d08104df4c1e336d7b56f", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7256c7194e186fce6ff866a124a77b08196c2a5f/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7256c7194e186fce6ff866a124a77b08196c2a5f/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=7256c7194e186fce6ff866a124a77b08196c2a5f", "patch": "@@ -296,8 +296,7 @@ static machine_mode sh_promote_function_mode (const_tree type,\n \t\t\t\t\t\t   int for_return);\n static bool sh_pass_by_reference (cumulative_args_t,\n \t\t\t\t  const function_arg_info &);\n-static bool sh_callee_copies (cumulative_args_t, machine_mode,\n-\t\t\t      const_tree, bool);\n+static bool sh_callee_copies (cumulative_args_t, const function_arg_info &);\n static int sh_arg_partial_bytes (cumulative_args_t, const function_arg_info &);\n static void sh_function_arg_advance (cumulative_args_t,\n \t\t\t\t     const function_arg_info &);\n@@ -7915,14 +7914,15 @@ sh_pass_by_reference (cumulative_args_t cum_v, const function_arg_info &arg)\n }\n \n static bool\n-sh_callee_copies (cumulative_args_t cum, machine_mode mode,\n-\t\t  const_tree type, bool named ATTRIBUTE_UNUSED)\n+sh_callee_copies (cumulative_args_t cum, const function_arg_info &arg)\n {\n   /* ??? How can it possibly be correct to return true only on the\n      caller side of the equation?  Is there someplace else in the\n      sh backend that's magically producing the copies?  */\n   return (get_cumulative_args (cum)->outgoing\n-\t  && ((mode == BLKmode ? TYPE_ALIGN (type) : GET_MODE_ALIGNMENT (mode))\n+\t  && ((arg.mode == BLKmode\n+\t       ? TYPE_ALIGN (arg.type)\n+\t       : GET_MODE_ALIGNMENT (arg.mode))\n \t      % SH_MIN_ALIGN_FOR_CALLEE_COPY == 0));\n }\n "}, {"sha": "d5c9ba7d925c558d77887a3e7df061353b6f3307", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7256c7194e186fce6ff866a124a77b08196c2a5f/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7256c7194e186fce6ff866a124a77b08196c2a5f/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=7256c7194e186fce6ff866a124a77b08196c2a5f", "patch": "@@ -3263,7 +3263,7 @@ v850_modes_tieable_p (machine_mode mode1, machine_mode mode2)\n #define TARGET_PASS_BY_REFERENCE v850_pass_by_reference\n \n #undef  TARGET_CALLEE_COPIES\n-#define TARGET_CALLEE_COPIES hook_bool_CUMULATIVE_ARGS_mode_tree_bool_true\n+#define TARGET_CALLEE_COPIES hook_bool_CUMULATIVE_ARGS_arg_info_true\n \n #undef  TARGET_ARG_PARTIAL_BYTES\n #define TARGET_ARG_PARTIAL_BYTES v850_arg_partial_bytes"}, {"sha": "99dbfb8d0fb26942eab74ab8c67c7616f7dec477", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7256c7194e186fce6ff866a124a77b08196c2a5f/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7256c7194e186fce6ff866a124a77b08196c2a5f/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=7256c7194e186fce6ff866a124a77b08196c2a5f", "patch": "@@ -4080,7 +4080,7 @@ The pointer is passed in whatever way is appropriate for passing a pointer\n to that type.\n @end deftypefn\n \n-@deftypefn {Target Hook} bool TARGET_CALLEE_COPIES (cumulative_args_t @var{cum}, machine_mode @var{mode}, const_tree @var{type}, bool @var{named})\n+@deftypefn {Target Hook} bool TARGET_CALLEE_COPIES (cumulative_args_t @var{cum}, const function_arg_info @var{&arg})\n The function argument described by the parameters to this hook is\n known to be passed by reference.  The hook should return true if the\n function argument should be copied by the callee instead of copied"}, {"sha": "1d7687aebce4f588881790c84e46e8bab29028ac", "filename": "gcc/function.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7256c7194e186fce6ff866a124a77b08196c2a5f/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7256c7194e186fce6ff866a124a77b08196c2a5f/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=7256c7194e186fce6ff866a124a77b08196c2a5f", "patch": "@@ -3881,8 +3881,8 @@ gimplify_parameters (gimple_seq *cleanup)\n       if (data.passed_pointer)\n \t{\n           tree type = TREE_TYPE (data.passed_type);\n-\t  if (reference_callee_copied (&all.args_so_far_v, TYPE_MODE (type),\n-\t\t\t\t       type, data.named_arg))\n+\t  function_arg_info orig_arg (type, data.named_arg);\n+\t  if (reference_callee_copied (&all.args_so_far_v, orig_arg))\n \t    {\n \t      tree local, t;\n "}, {"sha": "4f8acfd2276a097390261fa76806dc08768b6587", "filename": "gcc/target.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7256c7194e186fce6ff866a124a77b08196c2a5f/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7256c7194e186fce6ff866a124a77b08196c2a5f/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=7256c7194e186fce6ff866a124a77b08196c2a5f", "patch": "@@ -4653,8 +4653,8 @@ not be generated.\\n\\\n \\n\\\n The default version of this hook always returns false.\",\n  bool,\n- (cumulative_args_t cum, machine_mode mode, const_tree type, bool named),\n- hook_bool_CUMULATIVE_ARGS_mode_tree_bool_false)\n+ (cumulative_args_t cum, const function_arg_info &arg),\n+ hook_bool_CUMULATIVE_ARGS_arg_info_false)\n \n /* Return zero for arguments passed entirely on the stack or entirely\n    in registers.  If passed in both, return the number of bytes passed"}, {"sha": "5a0ed2f72de5086ad67d1659f114bed1836510c4", "filename": "gcc/targhooks.c", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7256c7194e186fce6ff866a124a77b08196c2a5f/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7256c7194e186fce6ff866a124a77b08196c2a5f/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=7256c7194e186fce6ff866a124a77b08196c2a5f", "patch": "@@ -330,11 +330,9 @@ hook_pass_by_reference_must_pass_in_stack (cumulative_args_t,\n    version of the hook is true for all named arguments.  */\n \n bool\n-hook_callee_copies_named (cumulative_args_t ca ATTRIBUTE_UNUSED,\n-\t\t\t  machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t\t  const_tree type ATTRIBUTE_UNUSED, bool named)\n+hook_callee_copies_named (cumulative_args_t, const function_arg_info &arg)\n {\n-  return named;\n+  return arg.named;\n }\n \n /* Emit to STREAM the assembler syntax for insn operand X.  */\n@@ -746,30 +744,19 @@ default_builtin_reciprocal (tree)\n }\n \n bool\n-hook_bool_CUMULATIVE_ARGS_mode_tree_bool_false (\n-\tcumulative_args_t ca ATTRIBUTE_UNUSED,\n-\tmachine_mode mode ATTRIBUTE_UNUSED,\n-\tconst_tree type ATTRIBUTE_UNUSED, bool named ATTRIBUTE_UNUSED)\n+hook_bool_CUMULATIVE_ARGS_arg_info_false (cumulative_args_t,\n+\t\t\t\t\t  const function_arg_info &)\n {\n   return false;\n }\n \n bool\n-hook_bool_CUMULATIVE_ARGS_mode_tree_bool_true (\n-\tcumulative_args_t ca ATTRIBUTE_UNUSED,\n-\tmachine_mode mode ATTRIBUTE_UNUSED,\n-\tconst_tree type ATTRIBUTE_UNUSED, bool named ATTRIBUTE_UNUSED)\n+hook_bool_CUMULATIVE_ARGS_arg_info_true (cumulative_args_t,\n+\t\t\t\t\t const function_arg_info &)\n {\n   return true;\n }\n \n-bool\n-hook_bool_CUMULATIVE_ARGS_arg_info_false (cumulative_args_t,\n-\t\t\t\t\t  const function_arg_info &)\n-{\n-  return false;\n-}\n-\n int\n hook_int_CUMULATIVE_ARGS_arg_info_0 (cumulative_args_t,\n \t\t\t\t     const function_arg_info &)"}, {"sha": "20a6e79d2d23b2899c523612433f5a3458ef475e", "filename": "gcc/targhooks.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7256c7194e186fce6ff866a124a77b08196c2a5f/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7256c7194e186fce6ff866a124a77b08196c2a5f/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=7256c7194e186fce6ff866a124a77b08196c2a5f", "patch": "@@ -67,7 +67,7 @@ extern tree default_cxx_get_cookie_size (tree);\n extern bool hook_pass_by_reference_must_pass_in_stack\n   (cumulative_args_t, const function_arg_info &);\n extern bool hook_callee_copies_named\n-  (cumulative_args_t ca, machine_mode, const_tree, bool);\n+  (cumulative_args_t ca, const function_arg_info &);\n \n extern void default_print_operand (FILE *, rtx, int);\n extern void default_print_operand_address (FILE *, machine_mode, rtx);\n@@ -135,12 +135,10 @@ extern void default_goacc_reduction (gcall *);\n extern bool hook_bool_CUMULATIVE_ARGS_false (cumulative_args_t);\n extern bool hook_bool_CUMULATIVE_ARGS_true (cumulative_args_t);\n \n-extern bool hook_bool_CUMULATIVE_ARGS_mode_tree_bool_false\n-  (cumulative_args_t, machine_mode, const_tree, bool);\n-extern bool hook_bool_CUMULATIVE_ARGS_mode_tree_bool_true\n-  (cumulative_args_t, machine_mode, const_tree, bool);\n extern bool hook_bool_CUMULATIVE_ARGS_arg_info_false\n   (cumulative_args_t, const function_arg_info &);\n+extern bool hook_bool_CUMULATIVE_ARGS_arg_info_true\n+  (cumulative_args_t, const function_arg_info &);\n extern int hook_int_CUMULATIVE_ARGS_arg_info_0\n   (cumulative_args_t, const function_arg_info &);\n extern void hook_void_CUMULATIVE_ARGS_tree"}]}