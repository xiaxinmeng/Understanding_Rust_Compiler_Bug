{"sha": "d1e0e1480b0210a6a5cfff7bc8be2bfea298a95b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFlMGUxNDgwYjAyMTBhNmE1Y2ZmZjdiYzhiZTJiZmVhMjk4YTk1Yg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-31T13:29:58Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-31T13:29:58Z"}, "message": "[multiple changes]\n\n2014-07-31  Pascal Obry  <obry@adacore.com>\n\n\t* a-stream.ads (Stream_Element_Offset): Now a signed 64bit type.\n\t* i-cstrea.ads, s-crtl.ads (fseek64): Offset is always a 64bit value.\n\t(ftell64): Always returns a 64bit value.\n\t* cstreams.c (int64): New definition.\n\t(_FILE_OFFSET_BITS): Set to 64 to enable 64bit offset support.\n\t(__gnat_ftell64): Always returns a 64bit value. The implemenation now\n\tuses ftello() on UNIX.\n\t(__gnat_fseek64): Offset is always a 64bit value. The\n\timplementation now uses fseeko() on UNIX.\n\t* a-ststio.adb, s-direio.adb (Set_Position): Simplify code,\n\talways use fseek64 to set the offset.\n\t(Size): Simplify code, always use fseek64/ftell64.\n\t* s-direio.ads (Count): Now an int64.\n\t* g-socket.ads (Vector_Element): Adjust definition for Length\n\tto be a size_t. This matches the C definition and avoid using\n\ta 64bit integer on 32bit platforms now that Count is always 64bit.\n\t* g-socthi-mingw.adb (Ada.Streams): Removed as not used anymore.\n\t(C_Recvmsg): Change some conversion to account for change in\n\tVector_Element.\n\t(C_Sendmsg): Likewise.\n\n2014-07-31  Robert Dewar  <dewar@adacore.com>\n\n\t* cstand.adb (Create_Standard): Remove handling of -gnatdm flag.\n\t* debug.adb: Remove documentation of -gnatdm flag.\n\t* gnat1drv.adb (Adjust_Global_Switches): Remove handling of\n\t-gnatdm flag.\n\nFrom-SVN: r213365", "tree": {"sha": "10012e7856220cfaf4ab1f30d7681354236337a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10012e7856220cfaf4ab1f30d7681354236337a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1e0e1480b0210a6a5cfff7bc8be2bfea298a95b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1e0e1480b0210a6a5cfff7bc8be2bfea298a95b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1e0e1480b0210a6a5cfff7bc8be2bfea298a95b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1e0e1480b0210a6a5cfff7bc8be2bfea298a95b/comments", "author": null, "committer": null, "parents": [{"sha": "fce547639dcebba692c4c864287cb371360a6661", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fce547639dcebba692c4c864287cb371360a6661", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fce547639dcebba692c4c864287cb371360a6661"}], "stats": {"total": 175, "additions": 91, "deletions": 84}, "files": [{"sha": "6f0cda8e3487064266927f8cd581ed939ff5a8e3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e0e1480b0210a6a5cfff7bc8be2bfea298a95b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e0e1480b0210a6a5cfff7bc8be2bfea298a95b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d1e0e1480b0210a6a5cfff7bc8be2bfea298a95b", "patch": "@@ -1,3 +1,33 @@\n+2014-07-31  Pascal Obry  <obry@adacore.com>\n+\n+\t* a-stream.ads (Stream_Element_Offset): Now a signed 64bit type.\n+\t* i-cstrea.ads, s-crtl.ads (fseek64): Offset is always a 64bit value.\n+\t(ftell64): Always returns a 64bit value.\n+\t* cstreams.c (int64): New definition.\n+\t(_FILE_OFFSET_BITS): Set to 64 to enable 64bit offset support.\n+\t(__gnat_ftell64): Always returns a 64bit value. The implemenation now\n+\tuses ftello() on UNIX.\n+\t(__gnat_fseek64): Offset is always a 64bit value. The\n+\timplementation now uses fseeko() on UNIX.\n+\t* a-ststio.adb, s-direio.adb (Set_Position): Simplify code,\n+\talways use fseek64 to set the offset.\n+\t(Size): Simplify code, always use fseek64/ftell64.\n+\t* s-direio.ads (Count): Now an int64.\n+\t* g-socket.ads (Vector_Element): Adjust definition for Length\n+\tto be a size_t. This matches the C definition and avoid using\n+\ta 64bit integer on 32bit platforms now that Count is always 64bit.\n+\t* g-socthi-mingw.adb (Ada.Streams): Removed as not used anymore.\n+\t(C_Recvmsg): Change some conversion to account for change in\n+\tVector_Element.\n+\t(C_Sendmsg): Likewise.\n+\n+2014-07-31  Robert Dewar  <dewar@adacore.com>\n+\n+\t* cstand.adb (Create_Standard): Remove handling of -gnatdm flag.\n+\t* debug.adb: Remove documentation of -gnatdm flag.\n+\t* gnat1drv.adb (Adjust_Global_Switches): Remove handling of\n+\t-gnatdm flag.\n+\n 2014-07-31  Arnaud Charlet  <charlet@adacore.com>\n \n \t* lib-writ.adb (Write_Unit_Information): Fix case where U ="}, {"sha": "388b5da27db281a5f87d507ca7cec31c22caf740", "filename": "gcc/ada/a-stream.ads", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e0e1480b0210a6a5cfff7bc8be2bfea298a95b/gcc%2Fada%2Fa-stream.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e0e1480b0210a6a5cfff7bc8be2bfea298a95b/gcc%2Fada%2Fa-stream.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stream.ads?ref=d1e0e1480b0210a6a5cfff7bc8be2bfea298a95b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -41,9 +41,7 @@ package Ada.Streams is\n \n    type Stream_Element is mod 2 ** Standard'Storage_Unit;\n \n-   type Stream_Element_Offset is range\n-     -(2 ** (Standard'Address_Size - 1)) ..\n-     +(2 ** (Standard'Address_Size - 1)) - 1;\n+   type Stream_Element_Offset is range -(2 ** 63) .. +(2 ** 63) - 1;\n \n    subtype Stream_Element_Count is\n       Stream_Element_Offset range 0 .. Stream_Element_Offset'Last;"}, {"sha": "fb3b59cc8827b9cda2c422568f63d1901d5d6b39", "filename": "gcc/ada/a-ststio.adb", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e0e1480b0210a6a5cfff7bc8be2bfea298a95b/gcc%2Fada%2Fa-ststio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e0e1480b0210a6a5cfff7bc8be2bfea298a95b/gcc%2Fada%2Fa-ststio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ststio.adb?ref=d1e0e1480b0210a6a5cfff7bc8be2bfea298a95b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -382,17 +382,10 @@ package body Ada.Streams.Stream_IO is\n    ------------------\n \n    procedure Set_Position (File : File_Type) is\n-      use type System.CRTL.long;\n-      use type System.CRTL.ssize_t;\n+      use type System.CRTL.int64;\n       R : int;\n    begin\n-      if Standard'Address_Size = 64 then\n-         R := fseek64 (File.Stream,\n-                       System.CRTL.ssize_t (File.Index) - 1, SEEK_SET);\n-      else\n-         R := fseek (File.Stream,\n-                     System.CRTL.long (File.Index) - 1, SEEK_SET);\n-      end if;\n+      R := fseek64 (File.Stream, System.CRTL.int64 (File.Index) - 1, SEEK_SET);\n \n       if R /= 0 then\n          raise Use_Error;\n@@ -410,14 +403,14 @@ package body Ada.Streams.Stream_IO is\n       if File.File_Size = -1 then\n          File.Last_Op := Op_Other;\n \n-         if fseek (File.Stream, 0, SEEK_END) /= 0 then\n+         if fseek64 (File.Stream, 0, SEEK_END) /= 0 then\n             raise Device_Error;\n          end if;\n \n-         if Standard'Address_Size = 64 then\n-            File.File_Size := Stream_Element_Offset (ftell64 (File.Stream));\n-         else\n-            File.File_Size := Stream_Element_Offset (ftell (File.Stream));\n+         File.File_Size := Stream_Element_Offset (ftell64 (File.Stream));\n+\n+         if File.File_Size = -1 then\n+            raise Use_Error;\n          end if;\n       end if;\n "}, {"sha": "c4a8b1d43944c0fe7364adc914f8ee29f6374d2b", "filename": "gcc/ada/cstand.adb", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e0e1480b0210a6a5cfff7bc8be2bfea298a95b/gcc%2Fada%2Fcstand.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e0e1480b0210a6a5cfff7bc8be2bfea298a95b/gcc%2Fada%2Fcstand.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstand.adb?ref=d1e0e1480b0210a6a5cfff7bc8be2bfea298a95b", "patch": "@@ -740,17 +740,8 @@ package body CStand is\n       Build_Signed_Integer_Type\n         (Standard_Integer, Standard_Integer_Size);\n \n-      declare\n-         LIS : Nat;\n-      begin\n-         if Debug_Flag_M then\n-            LIS := 64;\n-         else\n-            LIS := Standard_Long_Integer_Size;\n-         end if;\n-\n-         Build_Signed_Integer_Type (Standard_Long_Integer, LIS);\n-      end;\n+      Build_Signed_Integer_Type\n+        (Standard_Long_Integer, Standard_Long_Integer_Size);\n \n       Build_Signed_Integer_Type\n         (Standard_Long_Long_Integer, Standard_Long_Long_Integer_Size);"}, {"sha": "3de270f942f8ae6096080fbc06934f4b345fa859", "filename": "gcc/ada/cstreams.c", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e0e1480b0210a6a5cfff7bc8be2bfea298a95b/gcc%2Fada%2Fcstreams.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e0e1480b0210a6a5cfff7bc8be2bfea298a95b/gcc%2Fada%2Fcstreams.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstreams.c?ref=d1e0e1480b0210a6a5cfff7bc8be2bfea298a95b", "patch": "@@ -31,6 +31,12 @@\n \n /* Routines required for implementing routines in Interfaces.C.Streams.  */\n \n+#define _FILE_OFFSET_BITS 64\n+/* the define above will make off_t a 64bit type on GNU/Linux */\n+\n+#include <stdio.h>\n+#include <sys/types.h>\n+\n #ifdef __vxworks\n #include \"vxWorks.h\"\n #endif\n@@ -247,8 +253,10 @@ __gnat_full_name (char *nam, char *buffer)\n   return buffer;\n }\n \n-#ifdef _WIN64\n-  /* On Windows 64 we want to use the fseek/fteel supporting large files. This\n+#define __int64 long long\n+\n+#ifdef _WIN32\n+  /* On Windows we want to use the fseek/fteel supporting large files. This\n      issue is due to the fact that a long on Win64 is still a 32 bits value */\n __int64\n __gnat_ftell64 (FILE *stream)\n@@ -263,16 +271,22 @@ __gnat_fseek64 (FILE *stream, __int64 offset, int origin)\n }\n \n #else\n-long\n+__int64\n __gnat_ftell64 (FILE *stream)\n {\n-  return ftell (stream);\n+  return (__int64)ftello (stream);\n }\n \n int\n-__gnat_fseek64 (FILE *stream, long offset, int origin)\n+__gnat_fseek64 (FILE *stream, __int64 offset, int origin)\n {\n-  return fseek (stream, offset, origin);\n+  /* make sure that the offset is not bigger than the OS off_t, if so return\n+     with error as this mean that we are trying to handle files larger than\n+     2Gb on a patform not supporting it. */\n+  if ((off_t)offset == offset)\n+    return fseeko (stream, (off_t) offset, origin);\n+  else\n+    return -1;\n }\n #endif\n "}, {"sha": "9bf4faf3ab2fe69b4f23c6e9f793d0e7fab76d1e", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e0e1480b0210a6a5cfff7bc8be2bfea298a95b/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e0e1480b0210a6a5cfff7bc8be2bfea298a95b/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=d1e0e1480b0210a6a5cfff7bc8be2bfea298a95b", "patch": "@@ -49,7 +49,7 @@ package body Debug is\n    --  dj   Suppress \"junk null check\" for access parameter values\n    --  dk   Generate GNATBUG message on abort, even if previous errors\n    --  dl   Generate unit load trace messages\n-   --  dm   Allow VMS features even if not OpenVMS version\n+   --  dm\n    --  dn   Generate messages for node/list allocation\n    --  do   Print source from tree (original code only)\n    --  dp   Generate messages for parser scope stack push/pops\n@@ -281,14 +281,6 @@ package body Debug is\n    --       generated each time a request is made to the library manager to\n    --       load a new unit.\n \n-   --  dm   Some features are permitted only in OpenVMS ports of GNAT (e.g.\n-   --       the specification of passing by descriptor). Normally any use\n-   --       of these features will be flagged as an error, but this debug\n-   --       flag allows acceptance of these features in non OpenVMS ports.\n-   --       Of course they may not have any useful effect, and in particular\n-   --       attempting to generate code with this flag set may blow up.\n-   --       The flag also forces the use of 64-bits for Long_Integer.\n-\n    --  dn   Generate messages for node/list allocation. Each time a node or\n    --       list header is allocated, a line of output is generated. Certain\n    --       other basic tree operations also cause a line of output to be"}, {"sha": "d93536cb26b19b4f3826fbd5aca677cbc7e8201f", "filename": "gcc/ada/g-socket.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e0e1480b0210a6a5cfff7bc8be2bfea298a95b/gcc%2Fada%2Fg-socket.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e0e1480b0210a6a5cfff7bc8be2bfea298a95b/gcc%2Fada%2Fg-socket.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.ads?ref=d1e0e1480b0210a6a5cfff7bc8be2bfea298a95b", "patch": "@@ -797,7 +797,7 @@ package GNAT.Sockets is\n \n    type Vector_Element is record\n       Base   : Stream_Element_Reference;\n-      Length : Ada.Streams.Stream_Element_Count;\n+      Length : Interfaces.C.size_t;\n    end record;\n \n    type Vector_Type is array (Integer range <>) of Vector_Element;"}, {"sha": "e8ee6dcc6303434c71de18822066f83f569a2649", "filename": "gcc/ada/g-socthi-mingw.adb", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e0e1480b0210a6a5cfff7bc8be2bfea298a95b/gcc%2Fada%2Fg-socthi-mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e0e1480b0210a6a5cfff7bc8be2bfea298a95b/gcc%2Fada%2Fg-socthi-mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-mingw.adb?ref=d1e0e1480b0210a6a5cfff7bc8be2bfea298a95b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2001-2013, AdaCore                     --\n+--                     Copyright (C) 2001-2014, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,7 +35,6 @@\n \n --  This version is for NT\n \n-with Ada.Streams;             use Ada.Streams;\n with Ada.Unchecked_Conversion;\n with Interfaces.C.Strings;    use Interfaces.C.Strings;\n with System;                  use System;\n@@ -334,11 +333,11 @@ package body GNAT.Sockets.Thin is\n             exit;\n \n          else\n-            pragma Assert (Stream_Element_Count (Res) <= Current_Iovec.Length);\n+            pragma Assert (Interfaces.C.size_t (Res) <= Current_Iovec.Length);\n \n             Count := Count + Res;\n             Current_Iovec.Length :=\n-              Current_Iovec.Length - Stream_Element_Count (Res);\n+              Current_Iovec.Length - Interfaces.C.size_t (Res);\n             Current_Iovec.Base :=\n               To_Access (Current_Iovec.Base.all'Address\n                 + Storage_Offset (Res));\n@@ -507,7 +506,7 @@ package body GNAT.Sockets.Thin is\n \n          --  Exit now if the buffer is not fully transmitted\n \n-         exit when Stream_Element_Count (Res) < Iovec (J).Length;\n+         exit when Interfaces.C.size_t (Res) < Iovec (J).Length;\n       end loop;\n \n       return System.CRTL.ssize_t (Count);"}, {"sha": "a816f4ebcfee845f4de014b95651f22affdcbaeb", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e0e1480b0210a6a5cfff7bc8be2bfea298a95b/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e0e1480b0210a6a5cfff7bc8be2bfea298a95b/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=d1e0e1480b0210a6a5cfff7bc8be2bfea298a95b", "patch": "@@ -38,7 +38,6 @@ with Fname;    use Fname;\n with Fname.UF; use Fname.UF;\n with Frontend;\n with Gnatvsn;  use Gnatvsn;\n-with Hostparm;\n with Inline;\n with Lib;      use Lib;\n with Lib.Writ; use Lib.Writ;\n@@ -477,17 +476,11 @@ procedure Gnat1drv is\n          Ttypes.Bytes_Big_Endian := not Ttypes.Bytes_Big_Endian;\n       end if;\n \n-      --  Deal with forcing OpenVMS switches True if debug flag M is set, but\n-      --  record the setting of Targparm.Open_VMS_On_Target in True_VMS_Target\n-      --  before doing this, so we know if we are in real OpenVMS or not.\n+      --  Temporarily set True_VMS_Target to OpenVMS_On_Target. This is just\n+      --  temporary, we no longer deal with the debug flag -gnatdm here.\n \n       Opt.True_VMS_Target := Targparm.OpenVMS_On_Target;\n \n-      if Debug_Flag_M then\n-         Targparm.OpenVMS_On_Target := True;\n-         Hostparm.OpenVMS := True;\n-      end if;\n-\n       --  Activate front end layout if debug flag -gnatdF is set\n \n       if Debug_Flag_FF then"}, {"sha": "9a00b4961d8231c0ddb291abbbb5839c08a5c34a", "filename": "gcc/ada/i-cstrea.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e0e1480b0210a6a5cfff7bc8be2bfea298a95b/gcc%2Fada%2Fi-cstrea.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e0e1480b0210a6a5cfff7bc8be2bfea298a95b/gcc%2Fada%2Fi-cstrea.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fi-cstrea.ads?ref=d1e0e1480b0210a6a5cfff7bc8be2bfea298a95b", "patch": "@@ -43,6 +43,7 @@ package Interfaces.C_Streams is\n    subtype long is System.CRTL.long;\n    subtype size_t is System.CRTL.size_t;\n    subtype ssize_t is System.CRTL.ssize_t;\n+   subtype int64 is System.CRTL.int64;\n    subtype voids is System.Address;\n \n    NULL_Stream : constant FILEs;\n@@ -159,14 +160,14 @@ package Interfaces.C_Streams is\n \n    function fseek64\n      (stream : FILEs;\n-      offset : ssize_t;\n+      offset : int64;\n       origin : int) return int\n      renames System.CRTL.fseek64;\n \n    function ftell (stream : FILEs) return long\n      renames System.CRTL.ftell;\n \n-   function ftell64 (stream : FILEs) return ssize_t\n+   function ftell64 (stream : FILEs) return int64\n      renames System.CRTL.ftell64;\n \n    function fwrite"}, {"sha": "ba7332df791635b9083a699a8bb2a2342ef7254a", "filename": "gcc/ada/s-crtl.ads", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e0e1480b0210a6a5cfff7bc8be2bfea298a95b/gcc%2Fada%2Fs-crtl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e0e1480b0210a6a5cfff7bc8be2bfea298a95b/gcc%2Fada%2Fs-crtl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-crtl.ads?ref=d1e0e1480b0210a6a5cfff7bc8be2bfea298a95b", "patch": "@@ -62,6 +62,8 @@ package System.CRTL is\n    type ssize_t is range -(2 ** (Standard'Address_Size - 1))\n                       .. +(2 ** (Standard'Address_Size - 1)) - 1;\n \n+   type int64 is range -(2 ** 63) .. (2 ** 63) - 1;\n+\n    type Filename_Encoding is (UTF8, ASCII_8bits, Unspecified);\n    for Filename_Encoding use (UTF8 => 0, ASCII_8bits => 1, Unspecified => 2);\n    pragma Convention (C, Filename_Encoding);\n@@ -147,14 +149,14 @@ package System.CRTL is\n \n    function fseek64\n      (stream : FILEs;\n-      offset : ssize_t;\n+      offset : int64;\n       origin : int) return int;\n    pragma Import (C, fseek64, \"__gnat_fseek64\");\n \n    function ftell (stream : FILEs) return long;\n    pragma Import (C, ftell, \"ftell\");\n \n-   function ftell64 (stream : FILEs) return ssize_t;\n+   function ftell64 (stream : FILEs) return int64;\n    pragma Import (C, ftell64, \"__gnat_ftell64\");\n \n    function getenv (S : String) return System.Address;"}, {"sha": "297454e471cf23fbc8942042369aa464132e7316", "filename": "gcc/ada/s-direio.adb", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e0e1480b0210a6a5cfff7bc8be2bfea298a95b/gcc%2Fada%2Fs-direio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e0e1480b0210a6a5cfff7bc8be2bfea298a95b/gcc%2Fada%2Fs-direio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-direio.adb?ref=d1e0e1480b0210a6a5cfff7bc8be2bfea298a95b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -45,7 +45,7 @@ package body System.Direct_IO is\n    subtype AP is FCB.AFCB_Ptr;\n    use type FCB.Shared_Status_Type;\n \n-   use type System.CRTL.long;\n+   use type System.CRTL.int64;\n    use type System.CRTL.size_t;\n \n    -----------------------\n@@ -280,18 +280,10 @@ package body System.Direct_IO is\n    ------------------\n \n    procedure Set_Position (File : File_Type) is\n-      use type System.CRTL.ssize_t;\n       R : int;\n    begin\n-      if Standard'Address_Size = 64 then\n-         R := fseek64\n-           (File.Stream, ssize_t (File.Bytes) *\n-              ssize_t (File.Index - 1), SEEK_SET);\n-      else\n-         R := fseek\n-           (File.Stream, long (File.Bytes) *\n-              long (File.Index - 1), SEEK_SET);\n-      end if;\n+      R := fseek64\n+        (File.Stream, int64 (File.Bytes) * int64 (File.Index - 1), SEEK_SET);\n \n       if R /= 0 then\n          raise Use_Error;\n@@ -303,20 +295,22 @@ package body System.Direct_IO is\n    ----------\n \n    function Size (File : File_Type) return Count is\n-      use type System.CRTL.ssize_t;\n+      Pos : int64;\n    begin\n       FIO.Check_File_Open (AP (File));\n       File.Last_Op := Op_Other;\n \n-      if fseek (File.Stream, 0, SEEK_END) /= 0 then\n+      if fseek64 (File.Stream, 0, SEEK_END) /= 0 then\n          raise Device_Error;\n       end if;\n \n-      if Standard'Address_Size = 64 then\n-         return Count (ftell64 (File.Stream) / ssize_t (File.Bytes));\n-      else\n-         return Count (ftell (File.Stream) / long (File.Bytes));\n+      Pos := ftell64 (File.Stream);\n+\n+      if Pos = -1 then\n+         raise Use_Error;\n       end if;\n+\n+      return Count (Pos / int64 (File.Bytes));\n    end Size;\n \n    -----------"}, {"sha": "4a60ee72e8e93f4d6a5d4bb88590096ed991635d", "filename": "gcc/ada/s-direio.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e0e1480b0210a6a5cfff7bc8be2bfea298a95b/gcc%2Fada%2Fs-direio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e0e1480b0210a6a5cfff7bc8be2bfea298a95b/gcc%2Fada%2Fs-direio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-direio.ads?ref=d1e0e1480b0210a6a5cfff7bc8be2bfea298a95b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -45,7 +45,7 @@ package System.Direct_IO is\n    type Operation is (Op_Read, Op_Write, Op_Other);\n    --  Type used to record last operation (to optimize sequential operations)\n \n-   subtype Count is Interfaces.C_Streams.long;\n+   subtype Count is Interfaces.C_Streams.int64;\n    --  The Count type in each instantiation is derived from this type\n \n    subtype Positive_Count is Count range 1 .. Count'Last;"}]}