{"sha": "e3df376d22bdd92e4cc62e2b290f76d39ddebcca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNkZjM3NmQyMmJkZDkyZTRjYzYyZTJiMjkwZjc2ZDM5ZGRlYmNjYQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2006-04-10T19:26:18Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2006-04-10T19:26:18Z"}, "message": "Makefile.in (tree-into-ssa.o, [...]): Depend on vecprim.h.\n\n\t* Makefile.in (tree-into-ssa.o, tree-outof-ssa.o,\n\ttree-ssa-live.o, tree-ssa-alias.o, function.o, df-problems.o,\n\tglobal.o, cfglayout.o, lambda-code.o, reg-stack.o,\n\tbuild/genextract.o): Depend on vecprim.h.\n\t* cfglayout.c, df-problems.c, function.c, genextract.c,\n\tglobal.c, lambda-code.c, reg-stack.c, tree-into-ssa.c,\n\ttree-outof-ssa.c, tree-ssa-alias.c, tree-ssa-live.c: Include\n\tvecprim.h.\n\t* vecprim.h: New.\n\nFrom-SVN: r112830", "tree": {"sha": "72369ac3330cae599d4bd914c7fefe3531387b4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72369ac3330cae599d4bd914c7fefe3531387b4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3df376d22bdd92e4cc62e2b290f76d39ddebcca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3df376d22bdd92e4cc62e2b290f76d39ddebcca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3df376d22bdd92e4cc62e2b290f76d39ddebcca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3df376d22bdd92e4cc62e2b290f76d39ddebcca/comments", "author": null, "committer": null, "parents": [{"sha": "1a27722fa1d681f3e2267478db7829fbce70fc56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a27722fa1d681f3e2267478db7829fbce70fc56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a27722fa1d681f3e2267478db7829fbce70fc56"}], "stats": {"total": 112, "additions": 64, "deletions": 48}, "files": [{"sha": "923be6c3e14acebd010df9cda0467bf9c53d3446", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3df376d22bdd92e4cc62e2b290f76d39ddebcca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3df376d22bdd92e4cc62e2b290f76d39ddebcca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e3df376d22bdd92e4cc62e2b290f76d39ddebcca", "patch": "@@ -1,3 +1,15 @@\n+2006-04-10  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* Makefile.in (tree-into-ssa.o, tree-outof-ssa.o,\n+\ttree-ssa-live.o, tree-ssa-alias.o, function.o, df-problems.o,\n+\tglobal.o, cfglayout.o, lambda-code.o, reg-stack.o,\n+\tbuild/genextract.o): Depend on vecprim.h.\n+\t* cfglayout.c, df-problems.c, function.c, genextract.c,\n+\tglobal.c, lambda-code.c, reg-stack.c, tree-into-ssa.c,\n+\ttree-outof-ssa.c, tree-ssa-alias.c, tree-ssa-live.c: Include\n+\tvecprim.h.\n+\t* vecprim.h: New.\n+\n 2006-04-10  Geoffrey Keating  <geoffk@apple.com>\n \n \t* dwarf2out.c (struct dw_attr_struct): Remove dw_attr_next."}, {"sha": "25559e4ab33cdb0b1e72c17eae7fcd52b77b725b", "filename": "gcc/Makefile.in", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3df376d22bdd92e4cc62e2b290f76d39ddebcca/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3df376d22bdd92e4cc62e2b290f76d39ddebcca/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=e3df376d22bdd92e4cc62e2b290f76d39ddebcca", "patch": "@@ -1823,13 +1823,13 @@ tree-into-ssa.o : tree-into-ssa.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(FUNCTION_H) $(TIMEVAR_H) $(TM_H) coretypes.h $(TREE_DUMP_H) \\\n    langhooks.h domwalk.h tree-pass.h $(GGC_H) $(PARAMS_H) $(BASIC_BLOCK_H) \\\n    bitmap.h $(CFGLOOP_H) $(FLAGS_H) hard-reg-set.h $(HASHTAB_H) \\\n-   $(TREE_GIMPLE_H) $(TREE_INLINE_H) $(VARRAY_H)\n+   $(TREE_GIMPLE_H) $(TREE_INLINE_H) $(VARRAY_H) vecprim.h\n tree-outof-ssa.o : tree-outof-ssa.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(RTL_H) $(TREE_H) $(TM_P_H) $(EXPR_H) output.h $(DIAGNOSTIC_H) \\\n    $(FUNCTION_H) $(TIMEVAR_H) $(TM_H) coretypes.h $(TREE_DUMP_H) \\\n    langhooks.h tree-pass.h $(TREE_SSA_LIVE_H) $(BASIC_BLOCK_H) bitmap.h \\\n    $(FLAGS_H) $(GGC_H) hard-reg-set.h $(HASHTAB_H) $(TREE_GIMPLE_H) \\\n-   $(TREE_INLINE_H) $(VARRAY_H) toplev.h\n+   $(TREE_INLINE_H) $(VARRAY_H) toplev.h vecprim.h\n tree-ssa-dse.o : tree-ssa-dse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(GGC_H) $(TREE_H) $(RTL_H) $(TM_P_H) $(BASIC_BLOCK_H) \\\n    $(TREE_FLOW_H) tree-pass.h $(TREE_DUMP_H) domwalk.h $(FLAGS_H) \\\n@@ -1884,7 +1884,7 @@ tree-ssa-live.o : tree-ssa-live.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(TREE_H) $(DIAGNOSTIC_H) $(FUNCTION_H) $(TIMEVAR_H) \\\n    $(TM_H) coretypes.h $(TREE_DUMP_H) $(TREE_SSA_LIVE_H) $(BASIC_BLOCK_H) \\\n    bitmap.h $(FLAGS_H) $(HASHTAB_H) $(TREE_GIMPLE_H) $(TREE_INLINE_H) \\\n-   $(VARRAY_H) toplev.h\n+   $(VARRAY_H) toplev.h vecprim.h\n tree-ssa-copyrename.o : tree-ssa-copyrename.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(TREE_H) $(DIAGNOSTIC_H) $(FUNCTION_H) $(TIMEVAR_H) tree-pass.h \\\n    $(TM_H) coretypes.h $(TREE_DUMP_H) $(TREE_SSA_LIVE_H) $(BASIC_BLOCK_H) \\\n@@ -2009,7 +2009,7 @@ tree-ssa-alias.o : tree-ssa-alias.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(FUNCTION_H) $(TIMEVAR_H) convert.h $(TM_H) coretypes.h langhooks.h \\\n    $(TREE_DUMP_H) tree-pass.h $(PARAMS_H) $(BASIC_BLOCK_H) $(DIAGNOSTIC_H) \\\n    hard-reg-set.h $(TREE_GIMPLE_H) vec.h tree-ssa-structalias.h \\\n-   $(IPA_TYPE_ESCAPE_H)\n+   $(IPA_TYPE_ESCAPE_H) vecprim.h\n tree-ssa-reassoc.o : tree-ssa-reassoc.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(TREE_H) $(GGC_H) $(DIAGNOSTIC_H) errors.h $(TIMEVAR_H) \\\n    $(TM_H) coretypes.h $(TREE_DUMP_H) tree-pass.h $(FLAGS_H) tree-iterator.h\\\n@@ -2166,7 +2166,7 @@ function.o : function.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(OPTABS_H) libfuncs.h $(REGS_H) hard-reg-set.h insn-config.h $(RECOG_H) \\\n    output.h toplev.h except.h $(HASHTAB_H) $(GGC_H) $(TM_P_H) langhooks.h \\\n    gt-function.h $(TARGET_H) $(BASIC_BLOCK_H) $(INTEGRATE_H) $(PREDICT_H) \\\n-   tree-pass.h\n+   tree-pass.h vecprim.h\n stmt.o : stmt.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(FLAGS_H) $(FUNCTION_H) insn-config.h hard-reg-set.h $(EXPR_H) \\\n    libfuncs.h except.h $(RECOG_H) toplev.h output.h $(GGC_H) $(TM_P_H) \\\n@@ -2352,7 +2352,7 @@ df-core.o : df-core.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n df-problems.o : df-problems.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) insn-config.h $(RECOG_H) $(FUNCTION_H) $(REGS_H) alloc-pool.h \\\n    hard-reg-set.h $(BASIC_BLOCK_H) $(DF_H) bitmap.h sbitmap.h $(TM_P_H) \\\n-   $(FLAGS_H) output.h\n+   $(FLAGS_H) output.h vecprim.h\n df-scan.o : df-scan.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    insn-config.h $(RECOG_H) $(FUNCTION_H) $(REGS_H) alloc-pool.h \\\n    hard-reg-set.h $(BASIC_BLOCK_H) $(DF_H) bitmap.h sbitmap.h $(TM_P_H) \\\n@@ -2460,7 +2460,7 @@ bitmap.o : bitmap.c $(CONFIG_H) $(SYSTEM_H)  coretypes.h $(TM_H) $(RTL_H) \\\n global.o : global.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(FLAGS_H) reload.h $(FUNCTION_H) $(RECOG_H) $(REGS_H) hard-reg-set.h \\\n    insn-config.h output.h toplev.h $(TM_P_H) $(MACHMODE_H) tree-pass.h \\\n-   timevar.h\n+   timevar.h vecprim.h\n varray.o : varray.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(GGC_H) \\\n    $(HASHTAB_H) $(BCONFIG_H) $(VARRAY_H) toplev.h\n vec.o : vec.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) coretypes.h vec.h $(GGC_H) \\\n@@ -2549,7 +2549,7 @@ reg-stack.o : reg-stack.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(TREE_H) $(RECOG_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) \\\n    insn-config.h toplev.h reload.h $(FUNCTION_H) $(TM_P_H) $(GGC_H) \\\n    $(BASIC_BLOCK_H) output.h $(VARRAY_H) timevar.h tree-pass.h \\\n-   target.h\n+   target.h vecprim.h\n sreal.o: sreal.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) sreal.h\n predict.o: predict.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(FLAGS_H) insn-config.h $(BASIC_BLOCK_H) $(REGS_H) \\\n@@ -2570,7 +2570,7 @@ tracer.o : tracer.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n cfglayout.o : cfglayout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(TREE_H) insn-config.h $(BASIC_BLOCK_H) hard-reg-set.h output.h \\\n    $(FUNCTION_H) $(CFGLAYOUT_H) $(CFGLOOP_H) $(TARGET_H) gt-cfglayout.h \\\n-   $(GGC_H) alloc-pool.h $(FLAGS_H) $(OBSTACK_H) tree-pass.h\n+   $(GGC_H) alloc-pool.h $(FLAGS_H) $(OBSTACK_H) tree-pass.h vecprim.h\n timevar.o : timevar.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TIMEVAR_H) $(FLAGS_H) intl.h toplev.h $(RTL_H) timevar.def\n regrename.o : regrename.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n@@ -2589,7 +2589,7 @@ lambda-code.o: lambda-code.c $(LAMBDA_H) $(GGC_H) $(SYSTEM_H) $(CONFIG_H) \\\n    $(TM_H) $(OPTABS_H) $(TREE_H) $(RTL_H) $(BASIC_BLOCK_H) \\\n    $(DIAGNOSTIC_H) $(TREE_FLOW_H) $(TREE_DUMP_H) $(TIMEVAR_H) $(CFGLOOP_H) \\\n    $(TREE_DATA_REF_H) $(SCEV_H) $(EXPR_H) coretypes.h $(TARGET_H) \\\n-   tree-chrec.h tree-pass.h vec.h\n+   tree-chrec.h tree-pass.h vec.h vecprim.h\n params.o : params.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(PARAMS_H) toplev.h\n pointer-set.o: pointer-set.c pointer-set.h $(CONFIG_H) $(SYSTEM_H)\n hooks.o: hooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(HOOKS_H)\n@@ -2949,7 +2949,7 @@ build/genconstants.o : genconstants.c $(RTL_BASE_H) $(BCONFIG_H)\t\\\n build/genemit.o : genemit.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n   coretypes.h $(GTM_H) errors.h gensupport.h\n build/genextract.o : genextract.c $(RTL_BASE_H) $(BCONFIG_H)\t\t\\\n-  $(SYSTEM_H) coretypes.h $(GTM_H) errors.h gensupport.h\n+  $(SYSTEM_H) coretypes.h $(GTM_H) errors.h gensupport.h vecprim.h\n build/genflags.o : genflags.c $(RTL_BASE_H) $(OBSTACK_H) $(BCONFIG_H)\t\\\n   $(SYSTEM_H) coretypes.h $(GTM_H) errors.h gensupport.h\n build/gengenrtl.o : gengenrtl.c $(BCONFIG_H) $(SYSTEM_H) rtl.def"}, {"sha": "841f2a8a8bbe9b7149065649f4825de09a76afa1", "filename": "gcc/cfglayout.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3df376d22bdd92e4cc62e2b290f76d39ddebcca/gcc%2Fcfglayout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3df376d22bdd92e4cc62e2b290f76d39ddebcca/gcc%2Fcfglayout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfglayout.c?ref=e3df376d22bdd92e4cc62e2b290f76d39ddebcca", "patch": "@@ -37,6 +37,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"alloc-pool.h\"\n #include \"flags.h\"\n #include \"tree-pass.h\"\n+#include \"vecprim.h\"\n \n /* Holds the interesting trailing notes for the function.  */\n rtx cfg_layout_function_footer, cfg_layout_function_header;\n@@ -221,9 +222,6 @@ record_effective_endpoints (void)\n     cfg_layout_function_footer = unlink_insn_chain (cfg_layout_function_footer, get_last_insn ());\n }\n \f\n-DEF_VEC_I(int);\n-DEF_VEC_ALLOC_I(int,heap);\n-\n /* Data structures representing mapping of INSN_LOCATOR into scope blocks, line\n    numbers and files.  In order to be GGC friendly we need to use separate\n    varrays.  This also slightly improve the memory locality in binary search."}, {"sha": "8dd3446acc91b438f3dc82689f8454a7c9abbe51", "filename": "gcc/df-problems.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3df376d22bdd92e4cc62e2b290f76d39ddebcca/gcc%2Fdf-problems.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3df376d22bdd92e4cc62e2b290f76d39ddebcca/gcc%2Fdf-problems.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-problems.c?ref=e3df376d22bdd92e4cc62e2b290f76d39ddebcca", "patch": "@@ -42,6 +42,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"bitmap.h\"\n #include \"timevar.h\"\n #include \"df.h\"\n+#include \"vecprim.h\"\n \n #define DF_SPARSE_THRESHOLD 32\n \n@@ -2208,9 +2209,6 @@ df_urec_mark_reg_change (rtx reg, rtx setter, void *data)\n /* Classes of registers which could be early clobbered in the current\n    insn.  */\n \n-DEF_VEC_I(int);\n-DEF_VEC_ALLOC_I(int,heap);\n-\n static VEC(int,heap) *earlyclobber_regclass;\n \n /* This function finds and stores register classes that could be early"}, {"sha": "fd5eeb983fe325675ebe1d89115362df16247f17", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3df376d22bdd92e4cc62e2b290f76d39ddebcca/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3df376d22bdd92e4cc62e2b290f76d39ddebcca/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=e3df376d22bdd92e4cc62e2b290f76d39ddebcca", "patch": "@@ -63,6 +63,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"tree-gimple.h\"\n #include \"tree-pass.h\"\n #include \"predict.h\"\n+#include \"vecprim.h\"\n \n #ifndef LOCAL_ALIGNMENT\n #define LOCAL_ALIGNMENT(TYPE, ALIGNMENT) ALIGNMENT\n@@ -123,9 +124,6 @@ struct machine_function * (*init_machine_status) (void);\n /* The currently compiled function.  */\n struct function *cfun = 0;\n \n-DEF_VEC_I(int);\n-DEF_VEC_ALLOC_I(int,heap);\n-\n /* These arrays record the INSN_UIDs of the prologue and epilogue insns.  */\n static VEC(int,heap) *prologue;\n static VEC(int,heap) *epilogue;"}, {"sha": "591a697deef99070c24a0f3f72b5dd96686a1794", "filename": "gcc/genextract.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3df376d22bdd92e4cc62e2b290f76d39ddebcca/gcc%2Fgenextract.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3df376d22bdd92e4cc62e2b290f76d39ddebcca/gcc%2Fgenextract.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenextract.c?ref=e3df376d22bdd92e4cc62e2b290f76d39ddebcca", "patch": "@@ -29,6 +29,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"errors.h\"\n #include \"gensupport.h\"\n #include \"vec.h\"\n+#include \"vecprim.h\"\n \n /* This structure contains all the information needed to describe one\n    set of extractions methods.  Each method may be used by more than\n@@ -69,11 +70,7 @@ static struct code_ptr *peepholes;\n /* This structure is used by gen_insn and walk_rtx to accumulate the\n    data that will be used to produce an extractions structure.  */\n \n-DEF_VEC_I(int);\n-DEF_VEC_I(char);\n DEF_VEC_P(locstr);\n-DEF_VEC_ALLOC_I(int,heap);\n-DEF_VEC_ALLOC_I(char,heap);\n DEF_VEC_ALLOC_P(locstr,heap);\n \n struct accum_extract"}, {"sha": "b3c13ed065ce3902b1989e03235e6015da618136", "filename": "gcc/global.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3df376d22bdd92e4cc62e2b290f76d39ddebcca/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3df376d22bdd92e4cc62e2b290f76d39ddebcca/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=e3df376d22bdd92e4cc62e2b290f76d39ddebcca", "patch": "@@ -38,6 +38,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"toplev.h\"\n #include \"tree-pass.h\"\n #include \"timevar.h\"\n+#include \"vecprim.h\"\n \n /* This pass of the compiler performs global register allocation.\n    It assigns hard register numbers to all the pseudo registers\n@@ -2124,9 +2125,6 @@ mark_reg_change (rtx reg, rtx setter, void *data)\n /* Classes of registers which could be early clobbered in the current\n    insn.  */\n \n-DEF_VEC_I(int);\n-DEF_VEC_ALLOC_I(int,heap);\n-\n static VEC(int,heap) *earlyclobber_regclass;\n \n /* This function finds and stores register classes that could be early"}, {"sha": "bf00c053d95280177f00830b3bfc49d497dfaf2b", "filename": "gcc/lambda-code.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3df376d22bdd92e4cc62e2b290f76d39ddebcca/gcc%2Flambda-code.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3df376d22bdd92e4cc62e2b290f76d39ddebcca/gcc%2Flambda-code.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flambda-code.c?ref=e3df376d22bdd92e4cc62e2b290f76d39ddebcca", "patch": "@@ -41,6 +41,7 @@\n #include \"tree-scalar-evolution.h\"\n #include \"vec.h\"\n #include \"lambda.h\"\n+#include \"vecprim.h\"\n \n /* This loop nest code generation is based on non-singular matrix\n    math.\n@@ -114,9 +115,6 @@\n  Fourier-Motzkin elimination is used to compute the bounds of the base space\n  of the lattice.  */\n \n-DEF_VEC_I(int);\n-DEF_VEC_ALLOC_I(int,heap);\n-\n static bool perfect_nestify (struct loops *, \n \t\t\t     struct loop *, VEC(tree,heap) *, \n \t\t\t     VEC(tree,heap) *, VEC(int,heap) *,"}, {"sha": "4ed72047ab7be79bc7bd23fcdb8b62e2c196ab6e", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3df376d22bdd92e4cc62e2b290f76d39ddebcca/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3df376d22bdd92e4cc62e2b290f76d39ddebcca/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=e3df376d22bdd92e4cc62e2b290f76d39ddebcca", "patch": "@@ -173,9 +173,7 @@\n #include \"timevar.h\"\n #include \"tree-pass.h\"\n #include \"target.h\"\n-\n-DEF_VEC_I(char);\n-DEF_VEC_ALLOC_I(char,heap);\n+#include \"vecprim.h\"\n \n #ifdef STACK_REGS\n "}, {"sha": "29ad2fc6d603e06ed9bf9426acbb4f71c355c492", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3df376d22bdd92e4cc62e2b290f76d39ddebcca/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3df376d22bdd92e4cc62e2b290f76d39ddebcca/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=e3df376d22bdd92e4cc62e2b290f76d39ddebcca", "patch": "@@ -47,6 +47,7 @@ Boston, MA 02110-1301, USA.  */\n #include \"domwalk.h\"\n #include \"ggc.h\"\n #include \"params.h\"\n+#include \"vecprim.h\"\n \n /* This file builds the SSA form for a function as described in:\n    R. Cytron, J. Ferrante, B. Rosen, M. Wegman, and K. Zadeck. Efficiently\n@@ -103,12 +104,6 @@ static htab_t def_blocks;\n      associated with the current block.  */\n static VEC(tree,heap) *block_defs_stack;\n \n-/* Basic block vectors used in this file ought to be allocated in the\n-   heap.  We use pointer vector, because ints can be easily passed by\n-   value.  */\n-DEF_VEC_I(int);\n-DEF_VEC_ALLOC_I(int,heap);\n-\n /* Set of existing SSA names being replaced by update_ssa.  */\n static sbitmap old_ssa_names;\n "}, {"sha": "32f354487d8bef248ad57b4c0e8a2446e6c8299d", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3df376d22bdd92e4cc62e2b290f76d39ddebcca/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3df376d22bdd92e4cc62e2b290f76d39ddebcca/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=e3df376d22bdd92e4cc62e2b290f76d39ddebcca", "patch": "@@ -46,16 +46,14 @@ Boston, MA 02110-1301, USA.  */\n #include \"tree-ssa-live.h\"\n #include \"tree-pass.h\"\n #include \"toplev.h\"\n+#include \"vecprim.h\"\n \n /* Flags to pass to remove_ssa_form.  */\n \n #define SSANORM_PERFORM_TER\t\t0x1\n #define SSANORM_COMBINE_TEMPS\t\t0x2\n #define SSANORM_COALESCE_PARTITIONS\t0x4\n \n-DEF_VEC_I(int);\n-DEF_VEC_ALLOC_I(int,heap);\n-\n /* Used to hold all the components required to do SSA PHI elimination.\n    The node and pred/succ list is a simple linear list of nodes and\n    edges represented as pairs of nodes."}, {"sha": "cc652e75e6546e796639220c50fbac5ba2c49682", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3df376d22bdd92e4cc62e2b290f76d39ddebcca/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3df376d22bdd92e4cc62e2b290f76d39ddebcca/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=e3df376d22bdd92e4cc62e2b290f76d39ddebcca", "patch": "@@ -46,6 +46,7 @@ Boston, MA 02110-1301, USA.  */\n #include \"ipa-type-escape.h\"\n #include \"vec.h\"\n #include \"bitmap.h\"\n+#include \"vecprim.h\"\n \n /* Obstack used to hold grouping bitmaps and other temporary bitmaps used by\n    aliasing  */\n@@ -135,9 +136,6 @@ bitmap addressable_vars;\n    having to keep track of too many V_MAY_DEF expressions at call sites.  */\n tree global_var;\n \n-DEF_VEC_I(int);\n-DEF_VEC_ALLOC_I(int,heap);\n-\n /* qsort comparison function to sort type/name tags by DECL_UID.  */\n \n static int"}, {"sha": "84abc967c34227ae6d785cdd433c9e1be6d68b3e", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3df376d22bdd92e4cc62e2b290f76d39ddebcca/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3df376d22bdd92e4cc62e2b290f76d39ddebcca/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=e3df376d22bdd92e4cc62e2b290f76d39ddebcca", "patch": "@@ -38,6 +38,7 @@ Boston, MA 02110-1301, USA.  */\n #include \"tree-dump.h\"\n #include \"tree-ssa-live.h\"\n #include \"toplev.h\"\n+#include \"vecprim.h\"\n \n static void live_worklist (tree_live_info_p, int *, int);\n static tree_live_info_p new_tree_live_info (var_map);\n@@ -1385,9 +1386,6 @@ add_conflicts_if_valid (tpa_p tpa, conflict_graph graph,\n     }\n }\n \n-DEF_VEC_I(int);\n-DEF_VEC_ALLOC_I(int,heap);\n-\n /* Return a conflict graph for the information contained in LIVE_INFO.  Only\n    conflicts between items in the same TPA list are added.  If optional \n    coalesce list CL is passed in, any copies encountered are added.  */"}, {"sha": "f27e44a6bebdc49a4b71d42a1192d53b16a007dd", "filename": "gcc/vecprim.h", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3df376d22bdd92e4cc62e2b290f76d39ddebcca/gcc%2Fvecprim.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3df376d22bdd92e4cc62e2b290f76d39ddebcca/gcc%2Fvecprim.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvecprim.h?ref=e3df376d22bdd92e4cc62e2b290f76d39ddebcca", "patch": "@@ -0,0 +1,30 @@\n+/* VEC types for primitive types\n+   Copyright (C) 2006 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301, USA.  */\n+\n+#ifndef GCC_VECPRIM_H\n+#define GCC_VECPRIM_H\n+\n+DEF_VEC_I(char);\n+DEF_VEC_ALLOC_I(char,heap);\n+\n+DEF_VEC_I(int);\n+DEF_VEC_ALLOC_I(int,heap);\n+\n+#endif /* GCC_VECPRIM_H */"}]}