{"sha": "1c35f5b6a0b9e6fcc374f2edfb6703503817ce13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWMzNWY1YjZhMGI5ZTZmY2MzNzRmMmVkZmI2NzAzNTAzODE3Y2UxMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-07-16T17:48:39Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-07-16T17:48:39Z"}, "message": "init.c (build_offset_ref): Don't call mark_used on an OVERLOAD.\n\n\t* init.c (build_offset_ref): Don't call mark_used on an OVERLOAD.\n\t* decl.c (select_decl): Extract a lone function from an OVERLOAD.\n\t(lookup_namespace_name): Likewise.\n\t* typeck.c (build_unary_op): Not here anymore.\n\t* decl2.c (do_class_using_decl): Make sure we get an identifier.\n\t* class.c (handle_using_decl): Ignore TYPE_DECLs.\n\nFrom-SVN: r21219", "tree": {"sha": "f8158dfa7be88a8b702a464e209aacbb73bc0121", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8158dfa7be88a8b702a464e209aacbb73bc0121"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c35f5b6a0b9e6fcc374f2edfb6703503817ce13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c35f5b6a0b9e6fcc374f2edfb6703503817ce13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c35f5b6a0b9e6fcc374f2edfb6703503817ce13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c35f5b6a0b9e6fcc374f2edfb6703503817ce13/comments", "author": null, "committer": null, "parents": [{"sha": "52c11ef6a3eb0e205899df0f54c1c41be31c8ae9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52c11ef6a3eb0e205899df0f54c1c41be31c8ae9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52c11ef6a3eb0e205899df0f54c1c41be31c8ae9"}], "stats": {"total": 49, "additions": 37, "deletions": 12}, "files": [{"sha": "85e8e05490c8cbd3c3b785950fb149eae28acf63", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c35f5b6a0b9e6fcc374f2edfb6703503817ce13/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c35f5b6a0b9e6fcc374f2edfb6703503817ce13/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1c35f5b6a0b9e6fcc374f2edfb6703503817ce13", "patch": "@@ -1,5 +1,13 @@\n 1998-07-16  Jason Merrill  <jason@yorick.cygnus.com>\n \n+\t* init.c (build_offset_ref): Don't call mark_used on an OVERLOAD.\n+\t* decl.c (select_decl): Extract a lone function from an OVERLOAD.\n+\t(lookup_namespace_name): Likewise.\n+\t* typeck.c (build_unary_op): Not here anymore.\n+\n+\t* decl2.c (do_class_using_decl): Make sure we get an identifier.\n+\t* class.c (handle_using_decl): Ignore TYPE_DECLs.\n+\n \t* decl.c (qualify_lookup): New fn.\n \t(lookup_name_real): Use it.\n "}, {"sha": "1c98b3b4e4d4be665819d373da65bb5462ef7bd6", "filename": "gcc/cp/class.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c35f5b6a0b9e6fcc374f2edfb6703503817ce13/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c35f5b6a0b9e6fcc374f2edfb6703503817ce13/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=1c35f5b6a0b9e6fcc374f2edfb6703503817ce13", "patch": "@@ -1381,6 +1381,10 @@ handle_using_decl (using_decl, t, method_vec, fields)\n \t\t     OVL_CURRENT (TREE_VEC_ELT (method_vec, i)));\n \treturn;\n       }\n+\n+  if (! DECL_LANG_SPECIFIC (fdecl))\n+    /* We don't currently handle DECL_ACCESS for TYPE_DECLs; just return.  */\n+    return;\n   \n   for (tmp = fields; tmp; tmp = TREE_CHAIN (tmp))\n     if (DECL_NAME (tmp) == name)"}, {"sha": "8071386c22ad8abb31bb4f7bb687a71d3204e72c", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c35f5b6a0b9e6fcc374f2edfb6703503817ce13/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c35f5b6a0b9e6fcc374f2edfb6703503817ce13/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=1c35f5b6a0b9e6fcc374f2edfb6703503817ce13", "patch": "@@ -4650,7 +4650,15 @@ lookup_namespace_name (namespace, name)\n     return error_mark_node;\n \n   if (BINDING_VALUE (val))\n-    return BINDING_VALUE (val);\n+    {\n+      val = BINDING_VALUE (val);\n+\n+      /* If we have a single function from a using decl, pull it out.  */\n+      if (TREE_CODE (val) == OVERLOAD && ! really_overloaded_fn (val))\n+\tval = OVL_FUNCTION (val);\n+      return val;\n+    }\n+\n   cp_error (\"`%D' undeclared in namespace `%D'\", name, namespace);\n   return error_mark_node;\n }\n@@ -4760,6 +4768,11 @@ select_decl (binding, flags)\n   else if (val && LOOKUP_TYPES_ONLY (flags)  && TREE_CODE (val) != TYPE_DECL\n \t   && (!looking_for_template || TREE_CODE (val) != TEMPLATE_DECL))\n     val = NULL_TREE;\n+\n+  /* If we have a single function from a using decl, pull it out.  */\n+  if (val && TREE_CODE (val) == OVERLOAD && ! really_overloaded_fn (val))\n+    val = OVL_FUNCTION (val);\n+\n   return val;\n }\n "}, {"sha": "5384e98e066ede672b238747c40bf6b6b0b99ced", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c35f5b6a0b9e6fcc374f2edfb6703503817ce13/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c35f5b6a0b9e6fcc374f2edfb6703503817ce13/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=1c35f5b6a0b9e6fcc374f2edfb6703503817ce13", "patch": "@@ -3985,7 +3985,7 @@ ambiguous_decl (name, old, new, flags)\n     type = NULL_TREE;\n   if (!BINDING_TYPE (old))\n     BINDING_TYPE (old) = type;\n-  else if(type && BINDING_TYPE (old) != type)\n+  else if (type && BINDING_TYPE (old) != type)\n     {\n       if (flags & LOOKUP_COMPLAIN)\n         {\n@@ -4604,6 +4604,10 @@ do_class_using_decl (decl)\n       cp_error (\"using-declaration for destructor\");\n       return NULL_TREE;\n     }\n+  if (TREE_CODE (name) == TYPE_DECL)\n+    name = DECL_NAME (name);\n+\n+  my_friendly_assert (TREE_CODE (name) == IDENTIFIER_NODE, 980716);\n \n   value = build_lang_field_decl (USING_DECL, name, void_type_node);\n   DECL_INITIAL (value) = TREE_OPERAND (decl, 0);"}, {"sha": "dfe07b5239a4a92fd2d6d20883142a9572673d96", "filename": "gcc/cp/init.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c35f5b6a0b9e6fcc374f2edfb6703503817ce13/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c35f5b6a0b9e6fcc374f2edfb6703503817ce13/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=1c35f5b6a0b9e6fcc374f2edfb6703503817ce13", "patch": "@@ -1540,8 +1540,12 @@ build_offset_ref (type, name)\n   if (TREE_CODE (type) == NAMESPACE_DECL)\n     {\n       t = lookup_namespace_name (type, name);\n-      mark_used (t);\n-      return convert_from_reference (t);\n+      if (! type_unknown_p (t))\n+\t{\n+\t  mark_used (t);\n+\t  t = convert_from_reference (t);\n+\t}\n+      return t;\n     }\n \n   if (type == NULL_TREE || ! is_aggr_type (type, 1))"}, {"sha": "2c1421eecfa1d9c96abc0d25cf9fa52f52479d60", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c35f5b6a0b9e6fcc374f2edfb6703503817ce13/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c35f5b6a0b9e6fcc374f2edfb6703503817ce13/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=1c35f5b6a0b9e6fcc374f2edfb6703503817ce13", "patch": "@@ -4547,14 +4547,6 @@ build_unary_op (code, xarg, noconvert)\n \t  return build1 (ADDR_EXPR, unknown_type_node, arg);\n \t}\n \n-      /* If we have a single function from a using decl, pull it out.  */\n-      if (TREE_CODE (arg) == OVERLOAD\n-\t  && ! really_overloaded_fn (arg))\n-\t{\n-\t  arg = OVL_FUNCTION (arg);\n-\t  argtype = TREE_TYPE (arg);\n-\t}\n-\n       if (TREE_CODE (arg) == OVERLOAD \n \t  || (TREE_CODE (arg) == OFFSET_REF\n \t      && TREE_CODE (TREE_OPERAND (arg, 1)) == TEMPLATE_ID_EXPR))"}]}