{"sha": "8789b9fa5c893b2eefb47acb5ec84eb46128b057", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc4OWI5ZmE1Yzg5M2IyZWVmYjQ3YWNiNWVjODRlYjQ2MTI4YjA1Nw==", "commit": {"author": {"name": "Per Bothner", "email": "per@bothner.com", "date": "2001-04-26T18:32:22Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2001-04-26T18:32:22Z"}, "message": "jcf-write.c (generate_bytecode_insns case SWITCH_EXPR): Fix thinko: If a single case, use if_icmpeq, not ifeq.\n\n\n\t* jcf-write.c (generate_bytecode_insns case SWITCH_EXPR):\n\tFix thinko:  If a single case, use if_icmpeq, not ifeq.\n\n\t* constants.c (find_methodref_with_class_index):  New function.\n\t(find_methodref_index):  Use find_methodref_with_class_index.\n\t* java-tree.h (find_methodref_with_class_index):  New declaration.\n\t* jcf-write.c (generate_bytecode_insns case CALL_EXPR):  Don't change\n\tDECL_CONTEXT, instead use new find_methodref_with_class_index function.\n\tIf context changed from interface to class, don't use invokeinterface.\n\nFrom-SVN: r41601", "tree": {"sha": "e624daa90013162473950afc7f26bad2458e20b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e624daa90013162473950afc7f26bad2458e20b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8789b9fa5c893b2eefb47acb5ec84eb46128b057", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8789b9fa5c893b2eefb47acb5ec84eb46128b057", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8789b9fa5c893b2eefb47acb5ec84eb46128b057", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8789b9fa5c893b2eefb47acb5ec84eb46128b057/comments", "author": {"login": "PerBothner", "id": 10293361, "node_id": "MDQ6VXNlcjEwMjkzMzYx", "avatar_url": "https://avatars.githubusercontent.com/u/10293361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PerBothner", "html_url": "https://github.com/PerBothner", "followers_url": "https://api.github.com/users/PerBothner/followers", "following_url": "https://api.github.com/users/PerBothner/following{/other_user}", "gists_url": "https://api.github.com/users/PerBothner/gists{/gist_id}", "starred_url": "https://api.github.com/users/PerBothner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PerBothner/subscriptions", "organizations_url": "https://api.github.com/users/PerBothner/orgs", "repos_url": "https://api.github.com/users/PerBothner/repos", "events_url": "https://api.github.com/users/PerBothner/events{/privacy}", "received_events_url": "https://api.github.com/users/PerBothner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5acea42bfb17b59aff01ce77fe63d880b4ef5878", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5acea42bfb17b59aff01ce77fe63d880b4ef5878", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5acea42bfb17b59aff01ce77fe63d880b4ef5878"}], "stats": {"total": 51, "additions": 36, "deletions": 15}, "files": [{"sha": "b9bef8a6cb917fac5803677ae93d4b7b208488bb", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8789b9fa5c893b2eefb47acb5ec84eb46128b057/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8789b9fa5c893b2eefb47acb5ec84eb46128b057/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=8789b9fa5c893b2eefb47acb5ec84eb46128b057", "patch": "@@ -1,3 +1,15 @@\n+2001-04-26  Per Bothner  <per@bothner.com>\n+\n+\t* jcf-write.c (generate_bytecode_insns case SWITCH_EXPR):\n+\tFix thinko:  If a single case, use if_icmpeq, not ifeq.\n+\n+\t* constants.c (find_methodref_with_class_index):  New function.\n+\t(find_methodref_index):  Use find_methodref_with_class_index.\n+\t* java-tree.h (find_methodref_with_class_index):  New declaration.\n+\t* jcf-write.c (generate_bytecode_insns case CALL_EXPR):  Don't change\n+\tDECL_CONTEXT, instead use new find_methodref_with_class_index function.\n+\tIf context changed from interface to class, don't use invokeinterface.\n+\n 2001-04-25  Per Bothner  <per@bothner.com>\n \n \t* verify.c (verify_jvm_instructions):  For field instructions,"}, {"sha": "c51cec9a7a409b11a9fff08e480dc1aef1a00a24", "filename": "gcc/java/constants.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8789b9fa5c893b2eefb47acb5ec84eb46128b057/gcc%2Fjava%2Fconstants.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8789b9fa5c893b2eefb47acb5ec84eb46128b057/gcc%2Fjava%2Fconstants.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fconstants.c?ref=8789b9fa5c893b2eefb47acb5ec84eb46128b057", "patch": "@@ -197,7 +197,15 @@ find_methodref_index (cpool, decl)\n      CPool *cpool;\n      tree decl;\n {\n-  tree mclass = DECL_CONTEXT (decl);\n+  return find_methodref_with_class_index (cpool, decl, DECL_CONTEXT (decl));\n+}\n+\n+int\n+find_methodref_with_class_index (cpool, decl, mclass)\n+     CPool *cpool;\n+     tree decl;\n+     tree mclass;\n+{\n   int class_index = find_class_constant (cpool, mclass);\n   tree name = DECL_CONSTRUCTOR_P (decl) ? init_identifier_node\n     : DECL_NAME (decl);"}, {"sha": "9d62ef3cff94542e6c493c90388bc6718003297b", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8789b9fa5c893b2eefb47acb5ec84eb46128b057/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8789b9fa5c893b2eefb47acb5ec84eb46128b057/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=8789b9fa5c893b2eefb47acb5ec84eb46128b057", "patch": "@@ -1099,6 +1099,7 @@ extern int find_string_constant PARAMS ((struct CPool *, tree));\n extern int find_class_constant PARAMS ((struct CPool *, tree));\n extern int find_fieldref_index PARAMS ((struct CPool *, tree));\n extern int find_methodref_index PARAMS ((struct CPool *, tree));\n+extern int find_methodref_with_class_index PARAMS ((struct CPool *, tree, tree));\n extern void write_constant_pool PARAMS ((struct CPool *, unsigned char *, int));\n extern int count_constant_pool_bytes PARAMS ((struct CPool *));\n extern int encode_newarray_type PARAMS ((tree));"}, {"sha": "5ff0fe2775b0460dcf5c9668de819fd953eb5b97", "filename": "gcc/java/jcf-write.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8789b9fa5c893b2eefb47acb5ec84eb46128b057/gcc%2Fjava%2Fjcf-write.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8789b9fa5c893b2eefb47acb5ec84eb46128b057/gcc%2Fjava%2Fjcf-write.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-write.c?ref=8789b9fa5c893b2eefb47acb5ec84eb46128b057", "patch": "@@ -1721,7 +1721,7 @@ generate_bytecode_insns (exp, target, state)\n \t      {\n \t\tpush_int_const (sw_state.cases->offset, state);\n \t\temit_if (sw_state.cases->label,\n-\t\t\t OPCODE_ifeq, OPCODE_ifne, state);\n+\t\t\t OPCODE_if_icmpeq, OPCODE_if_icmpne, state);\n \t      }\n \t    emit_goto (sw_state.default_label, state);\n \t  }\n@@ -2547,32 +2547,32 @@ generate_bytecode_insns (exp, target, state)\n \t  NOTE_POP (1);  /* Pop implicit this. */\n \tif (TREE_CODE (f) == FUNCTION_DECL && DECL_CONTEXT (f) != NULL_TREE)\n \t  {\n-\t    tree saved_context = NULL_TREE;\n+\t    tree context = DECL_CONTEXT (f);\n \t    int index, interface = 0;\n \t    RESERVE (5);\n \t    if (METHOD_STATIC (f))\n \t      OP1 (OPCODE_invokestatic);\n \t    else if (DECL_CONSTRUCTOR_P (f) || CALL_USING_SUPER (exp)\n \t\t|| METHOD_PRIVATE (f))\n \t      OP1 (OPCODE_invokespecial);\n-\t    else if (CLASS_INTERFACE (TYPE_NAME (DECL_CONTEXT (f))))\n-\t      {\n-\t\tOP1 (OPCODE_invokeinterface);\n-\t\tinterface = 1;\n-\t      }\n \t    else\n-\t      OP1 (OPCODE_invokevirtual);\n-\t    if (interface)\n \t      {\n-\t\tsaved_context = DECL_CONTEXT (f);\n-\t\tDECL_CONTEXT (f) = \n-\t\t  TREE_TYPE (TREE_TYPE (TREE_VALUE (TREE_OPERAND (exp, 1))));\n+\t\tif (CLASS_INTERFACE (TYPE_NAME (context)))\n+\t\t  {\n+\t\t    tree arg1 = TREE_VALUE (TREE_OPERAND (exp, 1));\n+\t\t    context = TREE_TYPE (TREE_TYPE (arg1));\n+\t\t    if (CLASS_INTERFACE (TYPE_NAME (context)))\n+\t\t      interface = 1;\n+\t\t  }\n+\t\tif (interface)\n+\t\t  OP1 (OPCODE_invokeinterface);\n+\t\telse\n+\t\t  OP1 (OPCODE_invokevirtual);\n \t      }\n-\t    index = find_methodref_index (&state->cpool, f);\n+\t    index = find_methodref_with_class_index (&state->cpool, f, context);\n \t    OP2 (index);\n \t    if (interface)\n \t      {\n-\t\tDECL_CONTEXT (f) = saved_context;\n \t\tif (nargs <= 0)\n \t\t  abort ();\n "}]}