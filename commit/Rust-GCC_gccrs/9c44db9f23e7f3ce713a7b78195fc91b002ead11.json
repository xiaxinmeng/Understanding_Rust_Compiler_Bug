{"sha": "9c44db9f23e7f3ce713a7b78195fc91b002ead11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM0NGRiOWYyM2U3ZjNjZTcxM2E3Yjc4MTk1ZmM5MWIwMDJlYWQxMQ==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2018-08-23T08:35:17Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2018-08-23T08:35:17Z"}, "message": "Signed zero for {max,min}val intrinsics\n\nThe Fortran standard specifies (e.g. F2018 7.4.3.2) that intrinsic\nprocedures shall treat positive and negative real zero as equivalent,\nunless it is explicitly specified otherwise.  For {max,min}val there\nis no such explicit mention.  Thus, remove code to handle signed\nzeros.\n\n2018-08-23  Janne Blomqvist  <blomqvist.janne@gmail.com>\n\n\t* trans-intrinsic.c (gfc_conv_intrinsic_minmaxval): Delete\n\tHONOR_SIGNED_ZEROS checks.\n\nFrom-SVN: r263802", "tree": {"sha": "c93de882bbf966319823abe0489a97710c6f1c99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c93de882bbf966319823abe0489a97710c6f1c99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c44db9f23e7f3ce713a7b78195fc91b002ead11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c44db9f23e7f3ce713a7b78195fc91b002ead11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c44db9f23e7f3ce713a7b78195fc91b002ead11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c44db9f23e7f3ce713a7b78195fc91b002ead11/comments", "author": null, "committer": null, "parents": [{"sha": "0aa2934aaa0e22917cfb32a8478c3d973eff8969", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0aa2934aaa0e22917cfb32a8478c3d973eff8969", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0aa2934aaa0e22917cfb32a8478c3d973eff8969"}], "stats": {"total": 33, "additions": 12, "deletions": 21}, "files": [{"sha": "c58e12c45ec1d1800adb141920761005e0274afb", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c44db9f23e7f3ce713a7b78195fc91b002ead11/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c44db9f23e7f3ce713a7b78195fc91b002ead11/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9c44db9f23e7f3ce713a7b78195fc91b002ead11", "patch": "@@ -1,4 +1,9 @@\n-2017-08-23  Paul Thomas  <pault@gcc.gnu.org>\n+2018-08-23  Janne Blomqvist  <blomqvist.janne@gmail.com>\n+\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_minmaxval): Delete\n+\tHONOR_SIGNED_ZEROS checks.\n+\n+2018-08-23  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/86863\n \t* resolve.c (resolve_typebound_call): If the TBP is not marked"}, {"sha": "b2cea93742a10ff19e7dc0f0be2db3c6d791eed4", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 6, "deletions": 20, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c44db9f23e7f3ce713a7b78195fc91b002ead11/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c44db9f23e7f3ce713a7b78195fc91b002ead11/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=9c44db9f23e7f3ce713a7b78195fc91b002ead11", "patch": "@@ -5511,22 +5511,10 @@ gfc_conv_intrinsic_minmaxval (gfc_se * se, gfc_expr * expr, enum tree_code op)\n     {\n       /* MIN_EXPR/MAX_EXPR has unspecified behavior with NaNs or\n \t signed zeros.  */\n-      if (HONOR_SIGNED_ZEROS (DECL_MODE (limit)))\n-\t{\n-\t  tmp = fold_build2_loc (input_location, op, logical_type_node,\n-\t\t\t\t arrayse.expr, limit);\n-\t  ifbody = build2_v (MODIFY_EXPR, limit, arrayse.expr);\n-\t  tmp = build3_v (COND_EXPR, tmp, ifbody,\n-\t\t\t  build_empty_stmt (input_location));\n-\t  gfc_add_expr_to_block (&block2, tmp);\n-\t}\n-      else\n-\t{\n-\t  tmp = fold_build2_loc (input_location,\n-\t\t\t\t op == GT_EXPR ? MAX_EXPR : MIN_EXPR,\n-\t\t\t\t type, arrayse.expr, limit);\n-\t  gfc_add_modify (&block2, limit, tmp);\n-\t}\n+      tmp = fold_build2_loc (input_location,\n+\t\t\t     op == GT_EXPR ? MAX_EXPR : MIN_EXPR,\n+\t\t\t     type, arrayse.expr, limit);\n+      gfc_add_modify (&block2, limit, tmp);\n     }\n \n   if (fast)\n@@ -5535,8 +5523,7 @@ gfc_conv_intrinsic_minmaxval (gfc_se * se, gfc_expr * expr, enum tree_code op)\n \n       /* MIN_EXPR/MAX_EXPR has unspecified behavior with NaNs or\n \t signed zeros.  */\n-      if (HONOR_NANS (DECL_MODE (limit))\n-\t  || HONOR_SIGNED_ZEROS (DECL_MODE (limit)))\n+      if (HONOR_NANS (DECL_MODE (limit)))\n \t{\n \t  tmp = fold_build2_loc (input_location, op, logical_type_node,\n \t\t\t\t arrayse.expr, limit);\n@@ -5598,8 +5585,7 @@ gfc_conv_intrinsic_minmaxval (gfc_se * se, gfc_expr * expr, enum tree_code op)\n \n       /* MIN_EXPR/MAX_EXPR has unspecified behavior with NaNs or\n \t signed zeros.  */\n-      if (HONOR_NANS (DECL_MODE (limit))\n-\t  || HONOR_SIGNED_ZEROS (DECL_MODE (limit)))\n+      if (HONOR_NANS (DECL_MODE (limit)))\n \t{\n \t  tmp = fold_build2_loc (input_location, op, logical_type_node,\n \t\t\t\t arrayse.expr, limit);"}]}