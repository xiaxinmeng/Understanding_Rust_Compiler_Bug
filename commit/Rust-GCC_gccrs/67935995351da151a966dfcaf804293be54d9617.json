{"sha": "67935995351da151a966dfcaf804293be54d9617", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njc5MzU5OTUzNTFkYTE1MWE5NjZkZmNhZjgwNDI5M2JlNTRkOTYxNw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-02-23T06:52:08Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-02-23T06:52:08Z"}, "message": "re PR c++/20073 (ICE initializing const array)\n\n\tPR c++/20073\n\t* decl.c (start_decl_1): Don't clear TREE_READONLY.\n\t(cp_finish_decl): Likewise.\n\t(complete_vars): Call cp_apply_type_quals_to_decl.\n\t* typeck.c (cp_apply_type_quals): Avoid setting TREE_READONLY in\n\tcases where that's not valid.\n\n\tPR c++/20073\n\t* g++.dg/init/const1.C: New test.\n\nFrom-SVN: r95441", "tree": {"sha": "9a11503ef0327d6e92a1bee2233d9b9330f316b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a11503ef0327d6e92a1bee2233d9b9330f316b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67935995351da151a966dfcaf804293be54d9617", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67935995351da151a966dfcaf804293be54d9617", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67935995351da151a966dfcaf804293be54d9617", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67935995351da151a966dfcaf804293be54d9617/comments", "author": null, "committer": null, "parents": [{"sha": "bba6afa6ac6703bde83f9c6b5f4a926ff107dd6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bba6afa6ac6703bde83f9c6b5f4a926ff107dd6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bba6afa6ac6703bde83f9c6b5f4a926ff107dd6d"}], "stats": {"total": 58, "additions": 31, "deletions": 27}, "files": [{"sha": "a224efc466b1a73aa747a52acd56a55741daddab", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 27, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67935995351da151a966dfcaf804293be54d9617/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67935995351da151a966dfcaf804293be54d9617/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=67935995351da151a966dfcaf804293be54d9617", "patch": "@@ -3823,14 +3823,6 @@ start_decl_1 (tree decl)\n      instantiation has occurred that TYPE_HAS_NONTRIVIAL_DESTRUCTOR\n      will be set correctly.  */\n   maybe_push_cleanup_level (type);\n-\n-  /* An object declared 'const' is only readonly after it is\n-     initialized.  We don't have any way of expressing this currently,\n-     so we need to be conservative and unset TREE_READONLY for types\n-     with constructors.  Otherwise aliasing code will ignore stores in\n-     an inline constructor.  */\n-   if (type != error_mark_node && TYPE_NEEDS_CONSTRUCTING (type))\n-     TREE_READONLY (decl) = 0;\n }\n \n /* Handle initialization of references.  DECL, TYPE, and INIT have the\n@@ -4757,9 +4749,6 @@ cp_finish_decl (tree decl, tree init, tree asmspec_tree, int flags)\n   if (type == error_mark_node)\n     goto finish_end;\n \n-  if (TYPE_HAS_MUTABLE_P (type))\n-    TREE_READONLY (decl) = 0;\n-\n   if (processing_template_decl)\n     {\n       /* Add this declaration to the statement-tree.  */\n@@ -4806,16 +4795,13 @@ cp_finish_decl (tree decl, tree init, tree asmspec_tree, int flags)\n     ttype = target_type (type);\n \n \n-  /* Currently, GNU C++ puts constants in text space, making them\n-     impossible to initialize.  In the future, one would hope for\n-     an operating system which understood the difference between\n-     initialization and the running of a program.  */\n-  if (! DECL_EXTERNAL (decl) && TREE_READONLY (decl))\n+  /* A reference will be modified here, as it is initialized.  */\n+  if (! DECL_EXTERNAL (decl) \n+      && TREE_READONLY (decl)\n+      && TREE_CODE (type) == REFERENCE_TYPE)\n     {\n       was_readonly = 1;\n-      if (TYPE_NEEDS_CONSTRUCTING (type)\n-\t  || TREE_CODE (type) == REFERENCE_TYPE)\n-\tTREE_READONLY (decl) = 0;\n+      TREE_READONLY (decl) = 0;\n     }\n \n   if (TREE_CODE (decl) == VAR_DECL)\n@@ -10959,16 +10945,11 @@ complete_vars (tree type)\n       if (same_type_p (type, TREE_PURPOSE (*list)))\n \t{\n \t  tree var = TREE_VALUE (*list);\n+\t  tree type = TREE_TYPE (var);\n \t  /* Complete the type of the variable.  The VAR_DECL itself\n \t     will be laid out in expand_expr.  */\n-\t  complete_type (TREE_TYPE (var));\n-\t  /* An object declared 'const' is only readonly after it is\n-\t     initialized.  We don't have any way of expressing this currently,\n-\t     so we need to be conservative and unset TREE_READONLY for types\n-\t     with constructors.  Otherwise aliasing code will ignore stores in\n-\t     an inline constructor.  */\n-\t  if (TYPE_NEEDS_CONSTRUCTING (TREE_TYPE (var)))\n-\t    TREE_READONLY (var) = 0;\n+\t  complete_type (type);\n+\t  cp_apply_type_quals_to_decl (cp_type_quals (type), var);\n \t  /* Remove this entry from the list.  */\n \t  *list = TREE_CHAIN (*list);\n \t}"}, {"sha": "330e8f1ea1a8683335f17d69e5af2cae63318317", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67935995351da151a966dfcaf804293be54d9617/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67935995351da151a966dfcaf804293be54d9617/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=67935995351da151a966dfcaf804293be54d9617", "patch": "@@ -6409,6 +6409,18 @@ cp_apply_type_quals_to_decl (int type_quals, tree decl)\n       return;\n     }\n \n+  /* Avoid setting TREE_READONLY incorrectly.  */\n+  if (/* If the object has a constructor, the constructor may modify\n+\t the object.  */\n+      TYPE_NEEDS_CONSTRUCTING (type)\n+      /* If the type isn't complete, we don't know yet if it will need\n+\t constructing.  */\n+      || !COMPLETE_TYPE_P (type) \n+      /* If the type has a mutable component, that component might be\n+\t modified.  */\n+      || TYPE_HAS_MUTABLE_P (type))\n+    type_quals &= ~TYPE_QUAL_CONST;\n+\n   c_apply_type_quals_to_decl (type_quals, decl);\n }\n "}, {"sha": "5edbd1408c40ebe1267822d9a124f275c2a15c1d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67935995351da151a966dfcaf804293be54d9617/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67935995351da151a966dfcaf804293be54d9617/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=67935995351da151a966dfcaf804293be54d9617", "patch": "@@ -1,5 +1,8 @@\n 2005-02-22  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/20073\n+\t* g++.dg/init/const1.C: New test.\n+\n \tPR c++/19991\n \t* g++.dg/parse/constant7.C: New test.\n "}, {"sha": "af4427d9ab3bb55d922e9685112666a72782e4b9", "filename": "gcc/testsuite/g++.dg/init/const1.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67935995351da151a966dfcaf804293be54d9617/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fconst1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67935995351da151a966dfcaf804293be54d9617/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fconst1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fconst1.C?ref=67935995351da151a966dfcaf804293be54d9617", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/20073\n+\n+template<int> struct A\n+{\n+    A();\n+};\n+\n+const A<0> x[] = { A<0>() };"}]}