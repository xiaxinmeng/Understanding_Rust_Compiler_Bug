{"sha": "7ec6356e22e1644f3fee6314790b2680098778de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VjNjM1NmUyMmUxNjQ0ZjNmZWU2MzE0NzkwYjI2ODAwOTg3NzhkZQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2010-07-05T12:36:21Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2010-07-05T12:36:21Z"}, "message": "arm.c (get_arm_condition_code): Remove CC_NOTBmode case.\n\n\t* config/arm/arm.c (get_arm_condition_code): Remove CC_NOTBmode case.\n\t* arm-modes.def (CC_NOTB): Don't define.\n\t* config/arm/arm.md (arm_adddi3): Generate canonical RTL.\n\t(adddi_sesidi_di, adddi_zesidi_di): Likewise.\n\t(LTUGEU): New code_iterator.\n\t(cnb, optab): New corresponding code_attrs.\n\t(addsi3_carryin_<optab>): Renamed from addsi3_carryin.  Change pattern\n\tto canonical form.  Operands 1 and 2 are commutative.  Parametrize\n\tusing LTUGEU.\n\t(addsi3_carryin_shift_<optab>): Likewise.\n\t(addsi3_carryin_alt2_<optab>): Renamed from addsi3_carryin_alt2.\n\tOperands 1 and 2 are commutative.  Parametrize using LTUGEU.\n\t(addsi3_carryin_alt1, addsi3_carryin_alt3): Remove.\n\t(subsi3_compare): Renamed from subsi3_compare0_c.  Change CC_NOTB to\n\tCC.\n\t(arm_subsi3_insn): Allow constants for operand 0.\n\t(compare_scc peephole for eq case): New.\n\t(compare_scc splitters): Change CC_NOTB to CC.\n\nFrom-SVN: r161831", "tree": {"sha": "a74059309eedad7741bd05692fc61f1f4d9ecedf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a74059309eedad7741bd05692fc61f1f4d9ecedf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ec6356e22e1644f3fee6314790b2680098778de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ec6356e22e1644f3fee6314790b2680098778de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ec6356e22e1644f3fee6314790b2680098778de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ec6356e22e1644f3fee6314790b2680098778de/comments", "author": null, "committer": null, "parents": [{"sha": "75421dcdc6d8586a69b7a06fdf3151518e91ac0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75421dcdc6d8586a69b7a06fdf3151518e91ac0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75421dcdc6d8586a69b7a06fdf3151518e91ac0e"}], "stats": {"total": 158, "additions": 88, "deletions": 70}, "files": [{"sha": "d44736001f949cb255b09dc0b96b50d98f6ebe58", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ec6356e22e1644f3fee6314790b2680098778de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ec6356e22e1644f3fee6314790b2680098778de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ec6356e22e1644f3fee6314790b2680098778de", "patch": "@@ -1,3 +1,24 @@\n+2010-07-05  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* config/arm/arm.c (get_arm_condition_code): Remove CC_NOTBmode case.\n+\t* arm-modes.def (CC_NOTB): Don't define.\n+\t* config/arm/arm.md (arm_adddi3): Generate canonical RTL.\n+\t(adddi_sesidi_di, adddi_zesidi_di): Likewise.\n+\t(LTUGEU): New code_iterator.\n+\t(cnb, optab): New corresponding code_attrs.\n+\t(addsi3_carryin_<optab>): Renamed from addsi3_carryin.  Change pattern\n+\tto canonical form.  Operands 1 and 2 are commutative.  Parametrize\n+\tusing LTUGEU.\n+\t(addsi3_carryin_shift_<optab>): Likewise.\n+\t(addsi3_carryin_alt2_<optab>): Renamed from addsi3_carryin_alt2.\n+\tOperands 1 and 2 are commutative.  Parametrize using LTUGEU.\n+\t(addsi3_carryin_alt1, addsi3_carryin_alt3): Remove.\n+\t(subsi3_compare): Renamed from subsi3_compare0_c.  Change CC_NOTB to\n+\tCC.\n+\t(arm_subsi3_insn): Allow constants for operand 0.\n+\t(compare_scc peephole for eq case): New.\n+\t(compare_scc splitters): Change CC_NOTB to CC.\n+\n 2010-07-05  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-loop-im.c (for_each_index): Do not handle"}, {"sha": "db6cc92dd288233df56ad16daca5024a9e872c89", "filename": "gcc/config/arm/arm-modes.def", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ec6356e22e1644f3fee6314790b2680098778de/gcc%2Fconfig%2Farm%2Farm-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ec6356e22e1644f3fee6314790b2680098778de/gcc%2Fconfig%2Farm%2Farm-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-modes.def?ref=7ec6356e22e1644f3fee6314790b2680098778de", "patch": "@@ -36,8 +36,6 @@ ADJUST_FLOAT_FORMAT (HF, ((arm_fp16_format == ARM_FP16_FORMAT_ALTERNATIVE)\n    CC_Zmode should be used if only the Z flag is set correctly\n    CC_Cmode should be used if only the C flag is set correctly, after an\n      addition.\n-   CC_NOTBmode should be used if only the C flag is set as a not-borrow\n-     flag, after a subtraction.\n    CC_Nmode should be used if only the N (sign) flag is set correctly\n    CC_CZmode should be used if only the C and Z flags are correct\n    (used for DImode unsigned comparisons).\n@@ -63,7 +61,6 @@ CC_MODE (CC_DLTU);\n CC_MODE (CC_DGEU);\n CC_MODE (CC_DGTU);\n CC_MODE (CC_C);\n-CC_MODE (CC_NOTB);\n CC_MODE (CC_N);\n \n /* Vector modes.  */"}, {"sha": "1a327bb53dd4ab09726803a0728ccafe0e2dc527", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ec6356e22e1644f3fee6314790b2680098778de/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ec6356e22e1644f3fee6314790b2680098778de/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=7ec6356e22e1644f3fee6314790b2680098778de", "patch": "@@ -16341,14 +16341,6 @@ get_arm_condition_code (rtx comparison)\n \tdefault: gcc_unreachable ();\n \t}\n \n-    case CC_NOTBmode:\n-      switch (comp_code)\n-\t{\n-\tcase LTU: return ARM_CC;\n-\tcase GEU: return ARM_CS;\n-\tdefault: gcc_unreachable ();\n-\t}\n-\n     case CC_CZmode:\n       switch (comp_code)\n \t{"}, {"sha": "90cf2c61eb80c000f5d07023547737adfba0901e", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 67, "deletions": 59, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ec6356e22e1644f3fee6314790b2680098778de/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ec6356e22e1644f3fee6314790b2680098778de/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=7ec6356e22e1644f3fee6314790b2680098778de", "patch": "@@ -503,8 +503,8 @@\n \t\t   (compare:CC_C (plus:SI (match_dup 1) (match_dup 2))\n \t\t\t\t (match_dup 1)))\n \t      (set (match_dup 0) (plus:SI (match_dup 1) (match_dup 2)))])\n-   (set (match_dup 3) (plus:SI (ltu:SI (reg:CC_C CC_REGNUM) (const_int 0))\n-\t\t\t       (plus:SI (match_dup 4) (match_dup 5))))]\n+   (set (match_dup 3) (plus:SI (plus:SI (match_dup 4) (match_dup 5))\n+\t\t\t       (ltu:SI (reg:CC_C CC_REGNUM) (const_int 0))))]\n   \"\n   {\n     operands[3] = gen_highpart (SImode, operands[0]);\n@@ -531,10 +531,10 @@\n \t\t   (compare:CC_C (plus:SI (match_dup 1) (match_dup 2))\n \t\t\t\t (match_dup 1)))\n \t      (set (match_dup 0) (plus:SI (match_dup 1) (match_dup 2)))])\n-   (set (match_dup 3) (plus:SI (ltu:SI (reg:CC_C CC_REGNUM) (const_int 0))\n-\t\t\t       (plus:SI (ashiftrt:SI (match_dup 2)\n+   (set (match_dup 3) (plus:SI (plus:SI (ashiftrt:SI (match_dup 2)\n \t\t\t\t\t\t     (const_int 31))\n-\t\t\t\t\t(match_dup 4))))]\n+\t\t\t\t\t(match_dup 4))\n+\t\t\t       (ltu:SI (reg:CC_C CC_REGNUM) (const_int 0))))]\n   \"\n   {\n     operands[3] = gen_highpart (SImode, operands[0]);\n@@ -560,8 +560,8 @@\n \t\t   (compare:CC_C (plus:SI (match_dup 1) (match_dup 2))\n \t\t\t\t (match_dup 1)))\n \t      (set (match_dup 0) (plus:SI (match_dup 1) (match_dup 2)))])\n-   (set (match_dup 3) (plus:SI (ltu:SI (reg:CC_C CC_REGNUM) (const_int 0))\n-\t\t\t       (plus:SI (match_dup 4) (const_int 0))))]\n+   (set (match_dup 3) (plus:SI (plus:SI (match_dup 4) (const_int 0))\n+\t\t\t       (ltu:SI (reg:CC_C CC_REGNUM) (const_int 0))))]\n   \"\n   {\n     operands[3] = gen_highpart (SImode, operands[0]);\n@@ -849,60 +849,44 @@\n   [(set_attr \"conds\" \"set\")]\n )\n \n-(define_insn \"*addsi3_carryin\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(plus:SI (ltu:SI (reg:CC_C CC_REGNUM) (const_int 0))\n-\t\t (plus:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n-\t\t\t  (match_operand:SI 2 \"arm_rhs_operand\" \"rI\"))))]\n-  \"TARGET_32BIT\"\n-  \"adc%?\\\\t%0, %1, %2\"\n-  [(set_attr \"conds\" \"use\")]\n-)\n-\n-(define_insn \"*addsi3_carryin_shift\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(plus:SI (ltu:SI (reg:CC_C CC_REGNUM) (const_int 0))\n-\t\t (plus:SI\n-\t\t   (match_operator:SI 2 \"shift_operator\"\n-\t\t      [(match_operand:SI 3 \"s_register_operand\" \"r\")\n-\t\t       (match_operand:SI 4 \"reg_or_int_operand\" \"rM\")])\n-\t\t    (match_operand:SI 1 \"s_register_operand\" \"r\"))))]\n-  \"TARGET_32BIT\"\n-  \"adc%?\\\\t%0, %1, %3%S2\"\n-  [(set_attr \"conds\" \"use\")\n-   (set (attr \"type\") (if_then_else (match_operand 4 \"const_int_operand\" \"\")\n-\t\t      (const_string \"alu_shift\")\n-\t\t      (const_string \"alu_shift_reg\")))]\n-)\n+(define_code_iterator LTUGEU [ltu geu])\n+(define_code_attr cnb [(ltu \"CC_C\") (geu \"CC\")])\n+(define_code_attr optab [(ltu \"ltu\") (geu \"geu\")])\n \n-(define_insn \"*addsi3_carryin_alt1\"\n+(define_insn \"*addsi3_carryin_<optab>\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(plus:SI (plus:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n+\t(plus:SI (plus:SI (match_operand:SI 1 \"s_register_operand\" \"%r\")\n \t\t\t  (match_operand:SI 2 \"arm_rhs_operand\" \"rI\"))\n-\t\t (ltu:SI (reg:CC_C CC_REGNUM) (const_int 0))))]\n+\t\t (LTUGEU:SI (reg:<cnb> CC_REGNUM) (const_int 0))))]\n   \"TARGET_32BIT\"\n   \"adc%?\\\\t%0, %1, %2\"\n   [(set_attr \"conds\" \"use\")]\n )\n \n-(define_insn \"*addsi3_carryin_alt2\"\n+(define_insn \"*addsi3_carryin_alt2_<optab>\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(plus:SI (plus:SI (ltu:SI (reg:CC_C CC_REGNUM) (const_int 0))\n-\t\t\t  (match_operand:SI 1 \"s_register_operand\" \"r\"))\n+\t(plus:SI (plus:SI (LTUGEU:SI (reg:<cnb> CC_REGNUM) (const_int 0))\n+\t\t\t  (match_operand:SI 1 \"s_register_operand\" \"%r\"))\n \t\t (match_operand:SI 2 \"arm_rhs_operand\" \"rI\")))]\n   \"TARGET_32BIT\"\n   \"adc%?\\\\t%0, %1, %2\"\n   [(set_attr \"conds\" \"use\")]\n )\n \n-(define_insn \"*addsi3_carryin_alt3\"\n+(define_insn \"*addsi3_carryin_shift_<optab>\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(plus:SI (plus:SI (ltu:SI (reg:CC_C CC_REGNUM) (const_int 0))\n-\t\t\t  (match_operand:SI 2 \"arm_rhs_operand\" \"rI\"))\n-\t\t (match_operand:SI 1 \"s_register_operand\" \"r\")))]\n+\t(plus:SI (plus:SI\n+\t\t  (match_operator:SI 2 \"shift_operator\"\n+\t\t    [(match_operand:SI 3 \"s_register_operand\" \"r\")\n+\t\t     (match_operand:SI 4 \"reg_or_int_operand\" \"rM\")])\n+\t\t  (match_operand:SI 1 \"s_register_operand\" \"r\"))\n+\t\t (LTUGEU:SI (reg:<cnb> CC_REGNUM) (const_int 0))))]\n   \"TARGET_32BIT\"\n-  \"adc%?\\\\t%0, %1, %2\"\n-  [(set_attr \"conds\" \"use\")]\n+  \"adc%?\\\\t%0, %1, %3%S2\"\n+  [(set_attr \"conds\" \"use\")\n+   (set (attr \"type\") (if_then_else (match_operand 4 \"const_int_operand\" \"\")\n+\t\t      (const_string \"alu_shift\")\n+\t\t      (const_string \"alu_shift_reg\")))]\n )\n \n (define_expand \"incscc\"\n@@ -1104,24 +1088,27 @@\n \n ; ??? Check Thumb-2 split length\n (define_insn_and_split \"*arm_subsi3_insn\"\n-  [(set (match_operand:SI           0 \"s_register_operand\" \"=r,rk,r\")\n-\t(minus:SI (match_operand:SI 1 \"reg_or_int_operand\" \"rI,!k,?n\")\n-\t\t  (match_operand:SI 2 \"s_register_operand\" \"r, r, r\")))]\n+  [(set (match_operand:SI           0 \"s_register_operand\" \"=r,r,rk,r,r\")\n+\t(minus:SI (match_operand:SI 1 \"reg_or_int_operand\" \"rI,r,!k,?n,r\")\n+\t\t  (match_operand:SI 2 \"reg_or_int_operand\" \"r,rI, r, r,?n\")))]\n   \"TARGET_32BIT\"\n   \"@\n    rsb%?\\\\t%0, %2, %1\n    sub%?\\\\t%0, %1, %2\n+   sub%?\\\\t%0, %1, %2\n+   #\n    #\"\n-  \"TARGET_32BIT\n-   && GET_CODE (operands[1]) == CONST_INT\n-   && !const_ok_for_arm (INTVAL (operands[1]))\"\n+  \"&& ((GET_CODE (operands[1]) == CONST_INT\n+       \t&& !const_ok_for_arm (INTVAL (operands[1])))\n+       || (GET_CODE (operands[2]) == CONST_INT\n+\t   && !const_ok_for_arm (INTVAL (operands[2]))))\"\n   [(clobber (const_int 0))]\n   \"\n   arm_split_constant (MINUS, SImode, curr_insn,\n                       INTVAL (operands[1]), operands[0], operands[2], 0);\n   DONE;\n   \"\n-  [(set_attr \"length\" \"4,4,16\")\n+  [(set_attr \"length\" \"4,4,4,16,16\")\n    (set_attr \"predicable\" \"yes\")]\n )\n \n@@ -1153,10 +1140,10 @@\n   [(set_attr \"conds\" \"set\")]\n )\n \n-(define_insn \"*subsi3_compare0_c\"\n-  [(set (reg:CC_NOTB CC_REGNUM)\n-\t(compare:CC_NOTB (match_operand:SI 1 \"arm_rhs_operand\" \"r,I\")\n-\t\t\t (match_operand:SI 2 \"arm_rhs_operand\" \"rI,r\")))\n+(define_insn \"*subsi3_compare\"\n+  [(set (reg:CC CC_REGNUM)\n+\t(compare:CC (match_operand:SI 1 \"arm_rhs_operand\" \"r,I\")\n+\t\t    (match_operand:SI 2 \"arm_rhs_operand\" \"rI,r\")))\n    (set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(minus:SI (match_dup 1) (match_dup 2)))]\n   \"TARGET_32BIT\"\n@@ -9306,11 +9293,11 @@\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_32BIT && reload_completed\"\n   [(parallel\n-    [(set (reg:CC_NOTB CC_REGNUM)\n-\t  (compare:CC_NOTB (const_int 1) (match_dup 1)))\n+    [(set (reg:CC CC_REGNUM)\n+\t  (compare:CC (const_int 1) (match_dup 1)))\n      (set (match_dup 0)\n \t  (minus:SI (const_int 1) (match_dup 1)))])\n-   (cond_exec (ltu:CC_NOTB (reg:CC_NOTB CC_REGNUM) (const_int 0))\n+   (cond_exec (ltu:CC (reg:CC CC_REGNUM) (const_int 0))\n \t      (set (match_dup 0) (const_int 0)))])\n \n (define_split\n@@ -9362,7 +9349,7 @@\n   enum rtx_code rc = GET_CODE (operands[1]);\n \n   tmp1 = gen_rtx_REG (mode, CC_REGNUM);\n-  \n+\n   operands[5] = gen_rtx_fmt_ee (rc, VOIDmode, tmp1, const0_rtx);\n   if (mode == CCFPmode || mode == CCFPEmode)\n     rc = reverse_condition_maybe_unordered (rc);\n@@ -9371,6 +9358,27 @@\n   operands[4] = gen_rtx_fmt_ee (rc, VOIDmode, tmp1, const0_rtx);\n })\n \n+;; Attempt to improve the sequence generated by the compare_scc splitters\n+;; not to use conditional execution.\n+(define_peephole2\n+  [(set (reg:CC CC_REGNUM)\n+\t(compare:CC (match_operand:SI 1 \"register_operand\" \"\")\n+\t\t    (match_operand:SI 2 \"arm_rhs_operand\" \"\")))\n+   (cond_exec (ne (reg:CC CC_REGNUM) (const_int 0))\n+\t      (set (match_operand:SI 0 \"register_operand\" \"\") (const_int 0)))\n+   (cond_exec (eq (reg:CC CC_REGNUM) (const_int 0))\n+\t      (set (match_dup 0) (const_int 1)))\n+   (match_scratch:SI 3 \"r\")]\n+  \"TARGET_32BIT\"\n+  [(set (match_dup 3) (minus:SI (match_dup 1) (match_dup 2)))\n+   (parallel\n+    [(set (reg:CC CC_REGNUM)\n+\t  (compare:CC (const_int 0) (match_dup 3)))\n+     (set (match_dup 0) (minus:SI (const_int 0) (match_dup 3)))])\n+   (set (match_dup 0)\n+\t(plus:SI (plus:SI (match_dup 0) (match_dup 3))\n+\t\t (geu:SI (reg:CC CC_REGNUM) (const_int 0))))])\n+\n (define_insn \"*cond_move\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n \t(if_then_else:SI (match_operator 3 \"equality_operator\""}]}