{"sha": "d6de75d526bf5958fe9e66195dc0bf1c458e9b06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZkZTc1ZDUyNmJmNTk1OGZlOWU2NjE5NWRjMGJmMWM0NThlOWIwNg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-02-16T08:00:11Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-05-07T09:29:13Z"}, "message": "[Ada] Fix type mismatch warnings during LTO bootstrap #2\n\ngcc/ada/\n\n\t* init.c (__gnat_raise_program_error): Fix parameter type.\n\t(Raise_From_Signal_Handler): Likewise and mark as no-return.\n\t* raise-gcc.c (__gnat_others_value): Fix type.\n\t(__gnat_all_others_value): Likewise.\n\t(__gnat_unhandled_others_value): Likewise.\n\t* seh_init.c (Raise_From_Signal_Handler): Fix parameter type.\n\t* libgnat/a-except.ads (Raise_From_Signal_Handler): Use convention C\n\tand new symbol name, move declaration to...\n\t(Raise_From_Controlled_Operation): Minor tweak.\n\t* libgnat/a-except.adb (Raise_From_Signal_Handler): ...here.\n\t* libgnat/a-exexpr.adb (bool): New C compatible boolean type.\n\t(Is_Handled_By_Others): Use it as return type for the function.", "tree": {"sha": "cf6f7cffd901b1bce80ac5ef76b48dd9cc166af5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf6f7cffd901b1bce80ac5ef76b48dd9cc166af5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6de75d526bf5958fe9e66195dc0bf1c458e9b06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6de75d526bf5958fe9e66195dc0bf1c458e9b06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6de75d526bf5958fe9e66195dc0bf1c458e9b06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6de75d526bf5958fe9e66195dc0bf1c458e9b06/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0ba442b047dcffd54055c9d0ab591d020a284d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0ba442b047dcffd54055c9d0ab591d020a284d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0ba442b047dcffd54055c9d0ab591d020a284d8"}], "stats": {"total": 84, "additions": 41, "deletions": 43}, "files": [{"sha": "08ff8d78b1e6e0030b6c9695f6b252256e6b22f9", "filename": "gcc/ada/init.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6de75d526bf5958fe9e66195dc0bf1c458e9b06/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6de75d526bf5958fe9e66195dc0bf1c458e9b06/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=d6de75d526bf5958fe9e66195dc0bf1c458e9b06", "patch": "@@ -78,7 +78,7 @@\n extern \"C\" {\n #endif\n \n-extern void __gnat_raise_program_error (const char *, int);\n+extern void __gnat_raise_program_error (const void *, int);\n \n /* Addresses of exception data blocks for predefined exceptions.  Tasking_Error\n    is not used in this unit, and the abort signal is only used on IRIX.\n@@ -89,17 +89,16 @@ extern struct Exception_Data program_error;\n extern struct Exception_Data storage_error;\n \n /* For the Cert run time we use the regular raise exception routine because\n-   Raise_From_Signal_Handler is not available.  */\n+   __gnat_raise_from_signal_handler is not available.  */\n #ifdef CERT\n-#define Raise_From_Signal_Handler \\\n-                      __gnat_raise_exception\n-extern void Raise_From_Signal_Handler (struct Exception_Data *, const char *);\n+#define Raise_From_Signal_Handler __gnat_raise_exception\n #else\n-#define Raise_From_Signal_Handler \\\n-                      ada__exceptions__raise_from_signal_handler\n-extern void Raise_From_Signal_Handler (struct Exception_Data *, const char *);\n+#define Raise_From_Signal_Handler __gnat_raise_from_signal_handler\n #endif\n \n+extern void Raise_From_Signal_Handler (struct Exception_Data *, const void *)\n+  ATTRIBUTE_NORETURN;\n+\n /* Global values computed by the binder.  Note that these variables are\n    declared here, not in the binder file, to avoid having unresolved\n    references in the shared libgnat.  */"}, {"sha": "c332afad0f8a12c13ee78c664cf3f1ef8396d4c7", "filename": "gcc/ada/libgnat/a-except.adb", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6de75d526bf5958fe9e66195dc0bf1c458e9b06/gcc%2Fada%2Flibgnat%2Fa-except.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6de75d526bf5958fe9e66195dc0bf1c458e9b06/gcc%2Fada%2Flibgnat%2Fa-except.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-except.adb?ref=d6de75d526bf5958fe9e66195dc0bf1c458e9b06", "patch": "@@ -279,6 +279,23 @@ package body Ada.Exceptions is\n    pragma No_Return (Raise_Exception_No_Defer);\n    --  Similar to Raise_Exception, but with no abort deferral\n \n+   procedure Raise_From_Signal_Handler\n+     (E : Exception_Id;\n+      M : System.Address);\n+   pragma Export\n+     (C, Raise_From_Signal_Handler, \"__gnat_raise_from_signal_handler\");\n+   pragma No_Return (Raise_From_Signal_Handler);\n+   --  This routine is used to raise an exception from a signal handler. The\n+   --  signal handler has already stored the machine state (i.e. the state that\n+   --  corresponds to the location at which the signal was raised). E is the\n+   --  Exception_Id specifying what exception is being raised, and M is a\n+   --  pointer to a null-terminated string which is the message to be raised.\n+   --  Note that this routine never returns, so it is permissible to simply\n+   --  jump to this routine, rather than call it. This may be appropriate for\n+   --  systems where the right way to get out of signal handler is to alter the\n+   --  PC value in the machine state or in some other way ask the operating\n+   --  system to return here rather than to the original location.\n+\n    procedure Raise_With_Msg (E : Exception_Id);\n    pragma No_Return (Raise_With_Msg);\n    pragma Export (C, Raise_With_Msg, \"__gnat_raise_with_msg\");"}, {"sha": "2b27adb6ca1b89b556bbc6f8052637769034b1b0", "filename": "gcc/ada/libgnat/a-except.ads", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6de75d526bf5958fe9e66195dc0bf1c458e9b06/gcc%2Fada%2Flibgnat%2Fa-except.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6de75d526bf5958fe9e66195dc0bf1c458e9b06/gcc%2Fada%2Flibgnat%2Fa-except.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-except.ads?ref=d6de75d526bf5958fe9e66195dc0bf1c458e9b06", "patch": "@@ -184,26 +184,7 @@ private\n    --  Raise_Exception_Always if it can determine this is the case. The Export\n    --  allows this routine to be accessed from Pure units.\n \n-   procedure Raise_From_Signal_Handler\n-     (E : Exception_Id;\n-      M : System.Address);\n-   pragma Export\n-     (Ada, Raise_From_Signal_Handler,\n-           \"ada__exceptions__raise_from_signal_handler\");\n-   pragma No_Return (Raise_From_Signal_Handler);\n-   --  This routine is used to raise an exception from a signal handler. The\n-   --  signal handler has already stored the machine state (i.e. the state that\n-   --  corresponds to the location at which the signal was raised). E is the\n-   --  Exception_Id specifying what exception is being raised, and M is a\n-   --  pointer to a null-terminated string which is the message to be raised.\n-   --  Note that this routine never returns, so it is permissible to simply\n-   --  jump to this routine, rather than call it. This may be appropriate for\n-   --  systems where the right way to get out of signal handler is to alter the\n-   --  PC value in the machine state or in some other way ask the operating\n-   --  system to return here rather than to the original location.\n-\n-   procedure Raise_From_Controlled_Operation\n-     (X : Ada.Exceptions.Exception_Occurrence);\n+   procedure Raise_From_Controlled_Operation (X : Exception_Occurrence);\n    pragma No_Return (Raise_From_Controlled_Operation);\n    pragma Export\n      (Ada, Raise_From_Controlled_Operation,"}, {"sha": "f79a499639eb20818cd2ab95c13d66ef6a22140e", "filename": "gcc/ada/libgnat/a-exexpr.adb", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6de75d526bf5958fe9e66195dc0bf1c458e9b06/gcc%2Fada%2Flibgnat%2Fa-exexpr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6de75d526bf5958fe9e66195dc0bf1c458e9b06/gcc%2Fada%2Flibgnat%2Fa-exexpr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-exexpr.adb?ref=d6de75d526bf5958fe9e66195dc0bf1c458e9b06", "patch": "@@ -91,6 +91,9 @@ package body Exception_Propagation is\n \n    use Exception_Traces;\n \n+   type bool is new Boolean;\n+   pragma Convention (C, bool);\n+\n    Foreign_Exception : aliased System.Standard_Library.Exception_Data;\n    pragma Import (Ada, Foreign_Exception,\n                   \"system__exceptions__foreign_exception\");\n@@ -277,7 +280,7 @@ package body Exception_Propagation is\n    --  painful and error prone. These subprograms could be moved to a more\n    --  widely visible location if need be.\n \n-   function Is_Handled_By_Others (E : Exception_Data_Ptr) return Boolean;\n+   function Is_Handled_By_Others (E : Exception_Data_Ptr) return bool;\n    pragma Export (C, Is_Handled_By_Others, \"__gnat_is_handled_by_others\");\n    pragma Warnings (Off, Is_Handled_By_Others);\n \n@@ -685,9 +688,7 @@ package body Exception_Propagation is\n    -- Foreign_Data_For --\n    ----------------------\n \n-   function Foreign_Data_For\n-     (E : SSL.Exception_Data_Ptr) return Address\n-   is\n+   function Foreign_Data_For (E : SSL.Exception_Data_Ptr) return Address is\n    begin\n       return E.Foreign_Data;\n    end Foreign_Data_For;\n@@ -696,9 +697,9 @@ package body Exception_Propagation is\n    -- Is_Handled_By_Others --\n    --------------------------\n \n-   function Is_Handled_By_Others (E : SSL.Exception_Data_Ptr) return Boolean is\n+   function Is_Handled_By_Others (E : SSL.Exception_Data_Ptr) return bool is\n    begin\n-      return not E.all.Not_Handled_By_Others;\n+      return not bool (E.all.Not_Handled_By_Others);\n    end Is_Handled_By_Others;\n \n    ------------------"}, {"sha": "6a50a516c96832f75e2fe3744c4b3efbe3d03417", "filename": "gcc/ada/raise-gcc.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6de75d526bf5958fe9e66195dc0bf1c458e9b06/gcc%2Fada%2Fraise-gcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6de75d526bf5958fe9e66195dc0bf1c458e9b06/gcc%2Fada%2Fraise-gcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fraise-gcc.c?ref=d6de75d526bf5958fe9e66195dc0bf1c458e9b06", "patch": "@@ -542,17 +542,17 @@ typedef struct\n   /* ABI header, maximally aligned. */\n } _GNAT_Exception;\n \n-/* The two constants below are specific ttype identifiers for special\n+/* The three constants below are specific ttype identifiers for special\n    exception ids.  Their type should match what a-exexpr exports.  */\n \n-extern const int __gnat_others_value;\n-#define GNAT_OTHERS      ((_Unwind_Ptr) &__gnat_others_value)\n+extern const char __gnat_others_value;\n+#define GNAT_OTHERS ((_Unwind_Ptr) &__gnat_others_value)\n \n-extern const int __gnat_all_others_value;\n-#define GNAT_ALL_OTHERS  ((_Unwind_Ptr) &__gnat_all_others_value)\n+extern const char __gnat_all_others_value;\n+#define GNAT_ALL_OTHERS ((_Unwind_Ptr) &__gnat_all_others_value)\n \n-extern const int __gnat_unhandled_others_value;\n-#define GNAT_UNHANDLED_OTHERS  ((_Unwind_Ptr) &__gnat_unhandled_others_value)\n+extern const char __gnat_unhandled_others_value;\n+#define GNAT_UNHANDLED_OTHERS ((_Unwind_Ptr) &__gnat_unhandled_others_value)\n \n /* Describe the useful region data associated with an unwind context.  */\n "}, {"sha": "6d169a9ee5c76e0d94a7e46dc40bfa425f6c162c", "filename": "gcc/ada/seh_init.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6de75d526bf5958fe9e66195dc0bf1c458e9b06/gcc%2Fada%2Fseh_init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6de75d526bf5958fe9e66195dc0bf1c458e9b06/gcc%2Fada%2Fseh_init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fseh_init.c?ref=d6de75d526bf5958fe9e66195dc0bf1c458e9b06", "patch": "@@ -64,8 +64,8 @@ extern struct Exception_Data storage_error;\n extern struct Exception_Data tasking_error;\n extern struct Exception_Data _abort_signal;\n \n-#define Raise_From_Signal_Handler ada__exceptions__raise_from_signal_handler\n-extern void Raise_From_Signal_Handler (struct Exception_Data *, const char *)\n+#define Raise_From_Signal_Handler __gnat_raise_from_signal_handler\n+extern void Raise_From_Signal_Handler (struct Exception_Data *, const void *)\n   ATTRIBUTE_NORETURN;\n \n "}]}