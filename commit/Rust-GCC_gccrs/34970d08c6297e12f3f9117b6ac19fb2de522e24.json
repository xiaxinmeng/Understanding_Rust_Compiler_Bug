{"sha": "34970d08c6297e12f3f9117b6ac19fb2de522e24", "node_id": "C_kwDOANBUbNoAKDM0OTcwZDA4YzYyOTdlMTJmM2Y5MTE3YjZhYzE5ZmIyZGU1MjJlMjQ", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-05-25T16:38:58Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-05-25T18:49:18Z"}, "message": "c++: CTAD with alias and nested template [PR105655]\n\nHere, alias_ctad_tweaks expect tsubst_decl of a FUNCTION_DECL to return a\nFUNCTION_DECL.  A reasonable expectation, but in this case we were replacing\nthe template args of the class-scope deduction guide with equivalent args,\nso looking in the hash table we found the partial instantiation stored when\ninstantiating A<int>, which is a TEMPLATE_DECL.  It's fine for that to be\nwhat is stored, but tsubst_function_decl should never return it.\n\n\tPR c++/105655\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (build_template_decl): Add assert.\n\t(tsubst_function_decl): Don't return a template.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/class-deduction-alias13.C: New test.", "tree": {"sha": "6ba9da082de8468325cbeb73cf29bac5dd5621d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ba9da082de8468325cbeb73cf29bac5dd5621d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34970d08c6297e12f3f9117b6ac19fb2de522e24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34970d08c6297e12f3f9117b6ac19fb2de522e24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34970d08c6297e12f3f9117b6ac19fb2de522e24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34970d08c6297e12f3f9117b6ac19fb2de522e24/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "850a9ce8bcca59c7efabcdeeca14c5bd905e8363", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/850a9ce8bcca59c7efabcdeeca14c5bd905e8363", "html_url": "https://github.com/Rust-GCC/gccrs/commit/850a9ce8bcca59c7efabcdeeca14c5bd905e8363"}], "stats": {"total": 30, "additions": 29, "deletions": 1}, "files": [{"sha": "021af0198401ec163d14040fa944ce89dab6f88d", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34970d08c6297e12f3f9117b6ac19fb2de522e24/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34970d08c6297e12f3f9117b6ac19fb2de522e24/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=34970d08c6297e12f3f9117b6ac19fb2de522e24", "patch": "@@ -5021,6 +5021,8 @@ maybe_update_decl_type (tree orig_type, tree scope)\n static tree\n build_template_decl (tree decl, tree parms, bool member_template_p)\n {\n+  gcc_checking_assert (TREE_CODE (decl) != TEMPLATE_DECL);\n+\n   tree tmpl = build_lang_decl (TEMPLATE_DECL, DECL_NAME (decl), NULL_TREE);\n   SET_DECL_LANGUAGE (tmpl, DECL_LANGUAGE (decl));\n   DECL_TEMPLATE_PARMS (tmpl) = parms;\n@@ -14074,7 +14076,9 @@ tsubst_function_decl (tree t, tree args, tsubst_flags_t complain,\n \t{\n \t  hash = hash_tmpl_and_args (gen_tmpl, argvec);\n \t  if (tree spec = retrieve_specialization (gen_tmpl, argvec, hash))\n-\t    return spec;\n+\t    /* The spec for these args might be a partial instantiation of the\n+\t       template, but here what we want is the FUNCTION_DECL.  */\n+\t    return STRIP_TEMPLATE (spec);\n \t}\n     }\n   else"}, {"sha": "0a90a83081b8627a79d5eb3855571ebaa469b29b", "filename": "gcc/testsuite/g++.dg/cpp2a/class-deduction-alias13.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34970d08c6297e12f3f9117b6ac19fb2de522e24/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-alias13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34970d08c6297e12f3f9117b6ac19fb2de522e24/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-alias13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-alias13.C?ref=34970d08c6297e12f3f9117b6ac19fb2de522e24", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/105655\n+// { dg-do compile { target c++20 } }\n+\n+template <class T>\n+struct A\n+{\n+  template <class L, class R>\n+  struct B\n+  {\n+    B(const L & left, const R & right)\n+    {}\n+  };\n+\n+  template <class L, class R>\n+  B(const L &, const R &) -> B<L, R>;\n+};\n+\n+template <class L, class R>\n+using C = A<int>::B<L, R>;\n+\n+int main()\n+{\n+  C x{0, 0};\n+}"}]}