{"sha": "76773d3fea4daaaf5b0f6d79d9f48ffe6b3c97fd", "node_id": "C_kwDOANBUbNoAKDc2NzczZDNmZWE0ZGFhYWY1YjBmNmQ3OWQ5ZjQ4ZmZlNmIzYzk3ZmQ", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-09-26T05:44:58Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-09-27T10:37:28Z"}, "message": "Fix PR c/94726: ICE with __builtin_shuffle and changing of types\n\nThe problem here is __builtin_shuffle when called with two arguments\ninstead of 1, uses a SAVE_EXPR to put in for the 1st and 2nd operand\nof VEC_PERM_EXPR and when we go and gimplify the SAVE_EXPR, the type\nis now error_mark_node and that fails hard.\nThis fixes the problem by adding a simple check for type of operand\nof SAVE_EXPR not to be error_mark_node.\n\nOK? Bootstrapped and tested on aarch64-linux-gnu with no regressions.\n\ngcc/ChangeLog:\n\n\tPR c/94726\n\t* gimplify.c (gimplify_save_expr): Return early\n\tif the type of val is error_mark_node.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c/94726\n\t* gcc.dg/pr94726.c: New test.", "tree": {"sha": "ed14fe1b825df651ce04d07ea69a56d85f3ee273", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed14fe1b825df651ce04d07ea69a56d85f3ee273"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76773d3fea4daaaf5b0f6d79d9f48ffe6b3c97fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76773d3fea4daaaf5b0f6d79d9f48ffe6b3c97fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76773d3fea4daaaf5b0f6d79d9f48ffe6b3c97fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76773d3fea4daaaf5b0f6d79d9f48ffe6b3c97fd/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5f8abe1d3f718a75cbff0a453c1d961be5939b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5f8abe1d3f718a75cbff0a453c1d961be5939b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5f8abe1d3f718a75cbff0a453c1d961be5939b7"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "943c5cb8f2d14814a4c44fba07e8542bc0bf6fe0", "filename": "gcc/gimplify.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76773d3fea4daaaf5b0f6d79d9f48ffe6b3c97fd/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76773d3fea4daaaf5b0f6d79d9f48ffe6b3c97fd/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=76773d3fea4daaaf5b0f6d79d9f48ffe6b3c97fd", "patch": "@@ -6232,6 +6232,9 @@ gimplify_save_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n   gcc_assert (TREE_CODE (*expr_p) == SAVE_EXPR);\n   val = TREE_OPERAND (*expr_p, 0);\n \n+  if (TREE_TYPE (val) == error_mark_node)\n+    return GS_ERROR;\n+\n   /* If the SAVE_EXPR has not been resolved, then evaluate it once.  */\n   if (!SAVE_EXPR_RESOLVED_P (*expr_p))\n     {"}, {"sha": "d6911a644a47d64d374c274c05721ca50db501ec", "filename": "gcc/testsuite/gcc.dg/pr94726.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76773d3fea4daaaf5b0f6d79d9f48ffe6b3c97fd/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94726.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76773d3fea4daaaf5b0f6d79d9f48ffe6b3c97fd/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94726.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94726.c?ref=76773d3fea4daaaf5b0f6d79d9f48ffe6b3c97fd", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+typedef unsigned int type __attribute__ ( ( vector_size ( 2*sizeof(int) ) ) ) ; \n+type a , b; \n+/* { dg-message \"note: previous declaration\" \"previous declaration\" { target *-*-* } .-1 } */\n+void foo ( void ) { \n+\ttype var = { 2 , 2 } ; \n+\tb = __builtin_shuffle ( a , var ) ;\n+} \n+\n+void * a [ ] = { } ; /* { dg-error \"conflicting types\" } */"}]}