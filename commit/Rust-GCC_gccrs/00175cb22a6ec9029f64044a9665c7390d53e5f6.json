{"sha": "00175cb22a6ec9029f64044a9665c7390d53e5f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAxNzVjYjIyYTZlYzkwMjlmNjQwNDRhOTY2NWM3MzkwZDUzZTVmNg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-11-17T18:34:47Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-11-17T18:34:47Z"}, "message": "Add a combined_fn enum\n\nI'm working on a patch series that needs to be able to treat built-in\nfunctions and internal functions in a similar way.  This patch adds a\nnew enum, combined_fn, that combines the two together.  It also adds\nutility functions for seeing which combined_fn (if any) is called by\na given CALL_EXPR or gcall.\n\nTested on x86_64-linux-gnu, aarch64-linux-gnu and arm-linux-gnueabi.\n\ngcc/\n\t* tree-core.h (internal_fn): Move immediately after the definition\n\tof built_in_function.\n\t(combined_fn): New enum.\n\t* tree.h (as_combined_fn, builtin_fn_p, as_builtin_fn)\n\t(internal_fn_p, as_internal_fn): New functions.\n\t(get_call_combined_fn, combined_fn_name): Declare.\n\t* tree.c (get_call_combined_fn): New function.\n\t(combined_fn_name): Likewise.\n\t* gimple.h (gimple_call_combined_fn): Declare.\n\t* gimple.c (gimple_call_combined_fn): New function.\n\nFrom-SVN: r230472", "tree": {"sha": "b256b1ce82752ff2bfe63d20fcfd0cc3bdde69f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b256b1ce82752ff2bfe63d20fcfd0cc3bdde69f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00175cb22a6ec9029f64044a9665c7390d53e5f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00175cb22a6ec9029f64044a9665c7390d53e5f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00175cb22a6ec9029f64044a9665c7390d53e5f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00175cb22a6ec9029f64044a9665c7390d53e5f6/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3e44547c936be9e741411e812fc1565f539641c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e44547c936be9e741411e812fc1565f539641c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e44547c936be9e741411e812fc1565f539641c1"}], "stats": {"total": 158, "additions": 151, "deletions": 7}, "files": [{"sha": "74c7cf939d7deeb92c03444b1aef59cc46fd1c4b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00175cb22a6ec9029f64044a9665c7390d53e5f6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00175cb22a6ec9029f64044a9665c7390d53e5f6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=00175cb22a6ec9029f64044a9665c7390d53e5f6", "patch": "@@ -1,3 +1,16 @@\n+2015-11-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-core.h (internal_fn): Move immediately after the definition\n+\tof built_in_function.\n+\t(combined_fn): New enum.\n+\t* tree.h (as_combined_fn, builtin_fn_p, as_builtin_fn)\n+\t(internal_fn_p, as_internal_fn): New functions.\n+\t(get_call_combined_fn, combined_fn_name): Declare.\n+\t* tree.c (get_call_combined_fn): New function.\n+\t(combined_fn_name): Likewise.\n+\t* gimple.h (gimple_call_combined_fn): Declare.\n+\t* gimple.c (gimple_call_combined_fn): New function.\n+\n 2015-11-17  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/68308"}, {"sha": "2764df8818600a19f9bfc749ab6011caedd7be84", "filename": "gcc/gimple.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00175cb22a6ec9029f64044a9665c7390d53e5f6/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00175cb22a6ec9029f64044a9665c7390d53e5f6/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=00175cb22a6ec9029f64044a9665c7390d53e5f6", "patch": "@@ -2531,6 +2531,27 @@ gimple_call_builtin_p (const gimple *stmt, enum built_in_function code)\n   return false;\n }\n \n+/* If CALL is a call to a combined_fn (i.e. an internal function or\n+   a normal built-in function), return its code, otherwise return\n+   CFN_LAST.  */\n+\n+combined_fn\n+gimple_call_combined_fn (const gimple *stmt)\n+{\n+  if (const gcall *call = dyn_cast <const gcall *> (stmt))\n+    {\n+      if (gimple_call_internal_p (call))\n+\treturn as_combined_fn (gimple_call_internal_fn (call));\n+\n+      tree fndecl = gimple_call_fndecl (stmt);\n+      if (fndecl\n+\t  && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL\n+\t  && gimple_builtin_call_types_compatible_p (stmt, fndecl))\n+\treturn as_combined_fn (DECL_FUNCTION_CODE (fndecl));\n+    }\n+  return CFN_LAST;\n+}\n+\n /* Return true if STMT clobbers memory.  STMT is required to be a\n    GIMPLE_ASM.  */\n "}, {"sha": "6eb22de1e5e42abba5b2cae14e4c69efab418522", "filename": "gcc/gimple.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00175cb22a6ec9029f64044a9665c7390d53e5f6/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00175cb22a6ec9029f64044a9665c7390d53e5f6/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=00175cb22a6ec9029f64044a9665c7390d53e5f6", "patch": "@@ -1500,6 +1500,7 @@ extern tree gimple_signed_type (tree);\n extern alias_set_type gimple_get_alias_set (tree);\n extern bool gimple_ior_addresses_taken (bitmap, gimple *);\n extern bool gimple_builtin_call_types_compatible_p (const gimple *, tree);\n+extern combined_fn gimple_call_combined_fn (const gimple *);\n extern bool gimple_call_builtin_p (const gimple *);\n extern bool gimple_call_builtin_p (const gimple *, enum built_in_class);\n extern bool gimple_call_builtin_p (const gimple *, enum built_in_function);"}, {"sha": "9cc64d92e34bc3375ccbd5250f2d3d8cfa002a2e", "filename": "gcc/tree-core.h", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00175cb22a6ec9029f64044a9665c7390d53e5f6/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00175cb22a6ec9029f64044a9665c7390d53e5f6/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=00175cb22a6ec9029f64044a9665c7390d53e5f6", "patch": "@@ -184,6 +184,35 @@ enum built_in_function {\n   END_BUILTINS\n };\n \n+/* Internal functions.  */\n+enum internal_fn {\n+#define DEF_INTERNAL_FN(CODE, FLAGS, FNSPEC) IFN_##CODE,\n+#include \"internal-fn.def\"\n+  IFN_LAST\n+};\n+\n+/* An enum that combines target-independent built-in functions with\n+   internal functions, so that they can be treated in a similar way.\n+   The numbers for built-in functions are the same as for the\n+   built_in_function enum.  The numbers for internal functions\n+   start at END_BUITLINS.  */\n+enum combined_fn {\n+#define DEF_BUILTIN(ENUM, N, C, T, LT, B, F, NA, AT, IM, COND) \\\n+  CFN_##ENUM = int (ENUM),\n+#include \"builtins.def\"\n+\n+#define DEF_BUILTIN(ENUM, N, C, T, LT, B, F, NA, AT, IM, COND)\n+#define DEF_BUILTIN_CHKP(ENUM, N, C, T, LT, B, F, NA, AT, IM, COND) \\\n+  CFN_##ENUM##_CHKP = int (ENUM##_CHKP),\n+#include \"builtins.def\"\n+\n+#define DEF_INTERNAL_FN(CODE, FLAGS, FNSPEC) \\\n+  CFN_##CODE = int (END_BUILTINS) + int (IFN_##CODE),\n+#include \"internal-fn.def\"\n+\n+  CFN_LAST\n+};\n+\n /* Tree code classes.  Each tree_code has an associated code class\n    represented by a TREE_CODE_CLASS.  */\n enum tree_code_class {\n@@ -766,13 +795,6 @@ enum annot_expr_kind {\n   annot_expr_kind_last\n };\n \n-/* Internal functions.  */\n-enum internal_fn {\n-#define DEF_INTERNAL_FN(CODE, FLAGS, FNSPEC) IFN_##CODE,\n-#include \"internal-fn.def\"\n-  IFN_LAST\n-};\n-\n /*---------------------------------------------------------------------------\n                                 Type definitions\n ---------------------------------------------------------------------------*/"}, {"sha": "29c5f4c9f4110b051f627c408d6ac51f97c5d4a5", "filename": "gcc/tree.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00175cb22a6ec9029f64044a9665c7390d53e5f6/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00175cb22a6ec9029f64044a9665c7390d53e5f6/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=00175cb22a6ec9029f64044a9665c7390d53e5f6", "patch": "@@ -9317,6 +9317,25 @@ get_callee_fndecl (const_tree call)\n   return NULL_TREE;\n }\n \n+/* If CALL_EXPR CALL calls a normal built-in function or an internal function,\n+   return the associated function code, otherwise return CFN_LAST.  */\n+\n+combined_fn\n+get_call_combined_fn (const_tree call)\n+{\n+  /* It's invalid to call this function with anything but a CALL_EXPR.  */\n+  gcc_assert (TREE_CODE (call) == CALL_EXPR);\n+\n+  if (!CALL_EXPR_FN (call))\n+    return as_combined_fn (CALL_EXPR_IFN (call));\n+\n+  tree fndecl = get_callee_fndecl (call);\n+  if (fndecl && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL)\n+    return as_combined_fn (DECL_FUNCTION_CODE (fndecl));\n+\n+  return CFN_LAST;\n+}\n+\n #define TREE_MEM_USAGE_SPACES 40\n \n /* Print debugging information about tree nodes generated during the compile,\n@@ -13866,4 +13885,18 @@ set_source_range (tree expr, source_range src_range)\n   SET_EXPR_LOCATION (expr, adhoc);\n }\n \n+/* Return the name of combined function FN, for debugging purposes.  */\n+\n+const char *\n+combined_fn_name (combined_fn fn)\n+{\n+  if (builtin_fn_p (fn))\n+    {\n+      tree fndecl = builtin_decl_explicit (as_builtin_fn (fn));\n+      return IDENTIFIER_POINTER (DECL_NAME (fndecl));\n+    }\n+  else\n+    return internal_fn_name (as_internal_fn (fn));\n+}\n+\n #include \"gt-tree.h\""}, {"sha": "6a8354e2204bfac724d94795e15740a10c5fad7b", "filename": "gcc/tree.h", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00175cb22a6ec9029f64044a9665c7390d53e5f6/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00175cb22a6ec9029f64044a9665c7390d53e5f6/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=00175cb22a6ec9029f64044a9665c7390d53e5f6", "patch": "@@ -22,6 +22,58 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"tree-core.h\"\n \n+/* Convert a target-independent built-in function code to a combined_fn.  */\n+\n+inline combined_fn\n+as_combined_fn (built_in_function fn)\n+{\n+  return combined_fn (int (fn));\n+}\n+\n+/* Convert an internal function code to a combined_fn.  */\n+\n+inline combined_fn\n+as_combined_fn (internal_fn fn)\n+{\n+  return combined_fn (int (fn) + int (END_BUILTINS));\n+}\n+\n+/* Return true if CODE is a target-independent built-in function.  */\n+\n+inline bool\n+builtin_fn_p (combined_fn code)\n+{\n+  return int (code) < int (END_BUILTINS);\n+}\n+\n+/* Return the target-independent built-in function represented by CODE.\n+   Only valid if builtin_fn_p (CODE).  */\n+\n+inline built_in_function\n+as_builtin_fn (combined_fn code)\n+{\n+  gcc_checking_assert (builtin_fn_p (code));\n+  return built_in_function (int (code));\n+}\n+\n+/* Return true if CODE is an internal function.  */\n+\n+inline bool\n+internal_fn_p (combined_fn code)\n+{\n+  return int (code) >= int (END_BUILTINS);\n+}\n+\n+/* Return the internal function represented by CODE.  Only valid if\n+   internal_fn_p (CODE).  */\n+\n+inline internal_fn\n+as_internal_fn (combined_fn code)\n+{\n+  gcc_checking_assert (internal_fn_p (code));\n+  return internal_fn (int (code) - int (END_BUILTINS));\n+}\n+\n /* Macros for initializing `tree_contains_struct'.  */\n #define MARK_TS_BASE(C)\t\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\\\n@@ -4529,6 +4581,7 @@ extern unsigned crc32_unsigned (unsigned, unsigned);\n extern void clean_symbol_name (char *);\n extern tree get_file_function_name (const char *);\n extern tree get_callee_fndecl (const_tree);\n+extern combined_fn get_call_combined_fn (const_tree);\n extern int type_num_arguments (const_tree);\n extern bool associative_tree_code (enum tree_code);\n extern bool commutative_tree_code (enum tree_code);\n@@ -4554,6 +4607,7 @@ extern tree lhd_gcc_personality (void);\n extern void assign_assembler_name_if_neeeded (tree);\n extern void warn_deprecated_use (tree, tree);\n extern void cache_integer_cst (tree);\n+extern const char *combined_fn_name (combined_fn);\n \n /* Return the memory model from a host integer.  */\n static inline enum memmodel"}]}