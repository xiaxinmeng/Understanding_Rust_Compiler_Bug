{"sha": "1ddde8dca28e6e8d35db1782938d33e5320145e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRkZGU4ZGNhMjhlNmU4ZDM1ZGIxNzgyOTM4ZDMzZTUzMjAxNDVlMg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-10-02T09:18:34Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-10-02T09:18:34Z"}, "message": "ada-tree.h (DECL_RESTRICTED_ALIASING_P): New flag.\n\n\t* gcc-interface/ada-tree.h (DECL_RESTRICTED_ALIASING_P): New flag.\n\t* gcc-interface/decl.c (gnat_to_gnu_param): For parameters passed by\n\treference but whose type isn't by-ref and whose mechanism hasn't been\n\tforced to by-ref, set the DECL_RESTRICTED_ALIASING_P flag directly on\n\tthem instead of changing their type.\n\t* gcc-interface/trans.c (scan_rhs_r): New helper function.\n\t(independent_iterations_p): New predicate.\n\t(Loop_Statement_to_gnu): For a loop with an iteration scheme, set an\n\tivdep pragma if the iterations are independent.\n\nFrom-SVN: r228377", "tree": {"sha": "0c86523efe143f65b5f0ec98fe758a0d5d63d52a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c86523efe143f65b5f0ec98fe758a0d5d63d52a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ddde8dca28e6e8d35db1782938d33e5320145e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ddde8dca28e6e8d35db1782938d33e5320145e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ddde8dca28e6e8d35db1782938d33e5320145e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ddde8dca28e6e8d35db1782938d33e5320145e2/comments", "author": null, "committer": null, "parents": [{"sha": "7262aee97867264a6cd283ea8a7739c5dfcf13f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7262aee97867264a6cd283ea8a7739c5dfcf13f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7262aee97867264a6cd283ea8a7739c5dfcf13f7"}], "stats": {"total": 230, "additions": 224, "deletions": 6}, "files": [{"sha": "0e5d83abddfa914780c1740e1ebe573640144f3a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ddde8dca28e6e8d35db1782938d33e5320145e2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ddde8dca28e6e8d35db1782938d33e5320145e2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1ddde8dca28e6e8d35db1782938d33e5320145e2", "patch": "@@ -1,3 +1,15 @@\n+2015-10-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/ada-tree.h (DECL_RESTRICTED_ALIASING_P): New flag.\n+\t* gcc-interface/decl.c (gnat_to_gnu_param): For parameters passed by\n+\treference but whose type isn't by-ref and whose mechanism hasn't been\n+\tforced to by-ref, set the DECL_RESTRICTED_ALIASING_P flag directly on\n+\tthem instead of changing their type.\n+\t* gcc-interface/trans.c (scan_rhs_r): New helper function.\n+\t(independent_iterations_p): New predicate.\n+\t(Loop_Statement_to_gnu): For a loop with an iteration scheme, set an\n+\tivdep pragma if the iterations are independent.\n+\n 2015-10-02  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (find_loop_for): Use FOR_EACH_VEC_ELT_REVERSE."}, {"sha": "686445125f132734f0285c8705a208e9cfc3626e", "filename": "gcc/ada/gcc-interface/ada-tree.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ddde8dca28e6e8d35db1782938d33e5320145e2/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ddde8dca28e6e8d35db1782938d33e5320145e2/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fada-tree.h?ref=1ddde8dca28e6e8d35db1782938d33e5320145e2", "patch": "@@ -369,6 +369,21 @@ do {\t\t\t\t\t\t   \\\n    in the main unit, i.e. the full declaration is available.  */\n #define DECL_TAFT_TYPE_P(NODE) DECL_LANG_FLAG_0 (TYPE_DECL_CHECK (NODE))\n \n+/* Nonzero in a PARM_DECL passed by reference but for which only a restricted\n+   form of aliasing is allowed.  The first restriction comes explicitly from\n+   the RM 6.2(12) clause: there is no read-after-write dependency between a\n+   store based on such a PARM_DECL and a load not based on this PARM_DECL,\n+   so stores based on such PARM_DECLs can be sunk past all loads based on\n+   a distinct object.  The second restriction can be inferred from the same\n+   clause: there is no write-after-write dependency between a store based\n+   on such a PARM_DECL and a store based on a distinct such PARM_DECL, as\n+   the compiler would be allowed to pass the parameters by copy and the\n+   order of assignment to actual parameters after a call is arbitrary as\n+   per the RM 6.4.1(17) clause, so stores based on distinct such PARM_DECLs\n+   can be swapped.  */\n+#define DECL_RESTRICTED_ALIASING_P(NODE) \\\n+  DECL_LANG_FLAG_0 (PARM_DECL_CHECK (NODE))\n+\n /* Nonzero in a DECL if it is always used by reference, i.e. an INDIRECT_REF\n    is needed to access the object.  */\n #define DECL_BY_REF_P(NODE) DECL_LANG_FLAG_1 (NODE)"}, {"sha": "ca36ce5180acbf25eca19f2ceb6ce5f4796fd899", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ddde8dca28e6e8d35db1782938d33e5320145e2/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ddde8dca28e6e8d35db1782938d33e5320145e2/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=1ddde8dca28e6e8d35db1782938d33e5320145e2", "patch": "@@ -5585,6 +5585,7 @@ gnat_to_gnu_param (Entity_Id gnat_param, Mechanism_Type mech,\n   bool ro_param = in_param && !Address_Taken (gnat_param);\n   bool by_return = false, by_component_ptr = false;\n   bool by_ref = false;\n+  bool restricted_aliasing_p = false;\n   tree gnu_param;\n \n   /* Copy-return is used only for the first parameter of a valued procedure.\n@@ -5675,15 +5676,12 @@ gnat_to_gnu_param (Entity_Id gnat_param, Mechanism_Type mech,\n \t\t   || (!foreign\n \t\t       && default_pass_by_ref (gnu_param_type)))))\n     {\n+      gnu_param_type = build_reference_type (gnu_param_type);\n       /* We take advantage of 6.2(12) by considering that references built for\n \t parameters whose type isn't by-ref and for which the mechanism hasn't\n-\t been forced to by-ref are restrict-qualified in the C sense.  */\n-      bool restrict_p\n+\t been forced to by-ref allow only a restricted form of aliasing.  */\n+      restricted_aliasing_p\n \t= !TYPE_IS_BY_REFERENCE_P (gnu_param_type) && mech != By_Reference;\n-      gnu_param_type = build_reference_type (gnu_param_type);\n-      if (restrict_p)\n-\tgnu_param_type\n-\t  = change_qualified_type (gnu_param_type, TYPE_QUAL_RESTRICT);\n       by_ref = true;\n     }\n \n@@ -5731,6 +5729,7 @@ gnat_to_gnu_param (Entity_Id gnat_param, Mechanism_Type mech,\n   DECL_POINTS_TO_READONLY_P (gnu_param)\n     = (ro_param && (by_ref || by_component_ptr));\n   DECL_CAN_NEVER_BE_NULL_P (gnu_param) = Can_Never_Be_Null (gnat_param);\n+  DECL_RESTRICTED_ALIASING_P (gnu_param) = restricted_aliasing_p;\n \n   /* If no Mechanism was specified, indicate what we're using, then\n      back-annotate it.  */"}, {"sha": "1da381b9cc67b139d0fcad87c9698ca52fa88ddb", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ddde8dca28e6e8d35db1782938d33e5320145e2/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ddde8dca28e6e8d35db1782938d33e5320145e2/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=1ddde8dca28e6e8d35db1782938d33e5320145e2", "patch": "@@ -2714,6 +2714,89 @@ can_be_lower_p (tree val1, tree val2)\n   return tree_int_cst_lt (val1, val2);\n }\n \n+/* Helper function for walk_tree, used by independent_iterations_p below.  */\n+\n+static tree\n+scan_rhs_r (tree *tp, int *walk_subtrees, void *data)\n+{\n+  bitmap *params = (bitmap *)data;\n+  tree t = *tp;\n+\n+  /* No need to walk into types or decls.  */\n+  if (IS_TYPE_OR_DECL_P (t))\n+    *walk_subtrees = 0;\n+\n+  if (TREE_CODE (t) == PARM_DECL && bitmap_bit_p (*params, DECL_UID (t)))\n+    return t;\n+\n+  return NULL_TREE;\n+}\n+\n+/* Return true if STMT_LIST generates independent iterations in a loop.  */\n+\n+static bool\n+independent_iterations_p (tree stmt_list)\n+{\n+  tree_stmt_iterator tsi;\n+  bitmap params = BITMAP_GGC_ALLOC();\n+  auto_vec<tree> rhs;\n+  tree iter;\n+  int i;\n+\n+  if (TREE_CODE (stmt_list) == BIND_EXPR)\n+    stmt_list = BIND_EXPR_BODY (stmt_list);\n+\n+  /* Scan the list and return false on anything that is not either a check\n+     or an assignment to a parameter with restricted aliasing.  */\n+  for (tsi = tsi_start (stmt_list); !tsi_end_p (tsi); tsi_next (&tsi))\n+    {\n+      tree stmt = tsi_stmt (tsi);\n+\n+      switch (TREE_CODE (stmt))\n+\t{\n+\tcase COND_EXPR:\n+\t  {\n+\t    if (COND_EXPR_ELSE (stmt))\n+\t      return false;\n+\t    if (TREE_CODE (COND_EXPR_THEN (stmt)) != CALL_EXPR)\n+\t      return false;\n+\t    tree func = get_callee_fndecl (COND_EXPR_THEN (stmt));\n+\t    if (!(func && TREE_THIS_VOLATILE (func)))\n+\t      return false;\n+\t    break;\n+\t  }\n+\n+\tcase MODIFY_EXPR:\n+\t  {\n+\t    tree lhs = TREE_OPERAND (stmt, 0);\n+\t    while (handled_component_p (lhs))\n+\t      lhs = TREE_OPERAND (lhs, 0);\n+\t    if (TREE_CODE (lhs) != INDIRECT_REF)\n+\t      return false;\n+\t    lhs = TREE_OPERAND (lhs, 0);\n+\t    if (!(TREE_CODE (lhs) == PARM_DECL\n+\t\t  && DECL_RESTRICTED_ALIASING_P (lhs)))\n+\t      return false;\n+\t    bitmap_set_bit (params, DECL_UID (lhs));\n+\t    rhs.safe_push (TREE_OPERAND (stmt, 1));\n+\t    break;\n+\t  }\n+\n+\tdefault:\n+\t  return false;\n+\t}\n+    }\n+\n+  /* At this point we know that the list contains only statements that will\n+     modify parameters with restricted aliasing.  Check that the statements\n+     don't at the time read from these parameters.  */\n+  FOR_EACH_VEC_ELT (rhs, i, iter)\n+    if (walk_tree_without_duplicates (&iter, scan_rhs_r, &params))\n+      return false;\n+\n+  return true;\n+}\n+\n /* Subroutine of gnat_to_gnu to translate gnat_node, an N_Loop_Statement,\n    to a GCC tree, which is returned.  */\n \n@@ -3038,6 +3121,13 @@ Loop_Statement_to_gnu (Node_Id gnat_node)\n \t    add_stmt_with_node_force (rci->invariant_cond, gnat_node);\n \t  }\n \n+      /* Second, if loop vectorization is enabled and the iterations of the\n+\t loop can easily be proved as independent, mark the loop.  */\n+      if (optimize\n+\t  && flag_tree_loop_vectorize\n+\t  && independent_iterations_p (LOOP_STMT_BODY (gnu_loop_stmt)))\n+\tLOOP_STMT_IVDEP (gnu_loop_stmt) = 1;\n+\n       add_stmt (gnu_loop_stmt);\n       gnat_poplevel ();\n       gnu_loop_stmt = end_stmt_group ();"}, {"sha": "ae4f5aa4efd2915d1d3dbd787fcb7dd339ad9b79", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ddde8dca28e6e8d35db1782938d33e5320145e2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ddde8dca28e6e8d35db1782938d33e5320145e2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1ddde8dca28e6e8d35db1782938d33e5320145e2", "patch": "@@ -1,3 +1,10 @@\n+2015-10-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/vect15.ad[sb]: New test.\n+\t* gnat.dg/vect16.ad[sb]: Likewise.\n+\t* gnat.dg/vect17.ad[sb]: Likewise.\n+\t* gnat.dg/vect18.ad[sb]: Likewise.\n+\n 2015-10-02  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR rtl-optimization/67786"}, {"sha": "ad66836a40182a29309e31aec9532200ff16804e", "filename": "gcc/testsuite/gnat.dg/vect15.adb", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ddde8dca28e6e8d35db1782938d33e5320145e2/gcc%2Ftestsuite%2Fgnat.dg%2Fvect15.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ddde8dca28e6e8d35db1782938d33e5320145e2/gcc%2Ftestsuite%2Fgnat.dg%2Fvect15.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fvect15.adb?ref=1ddde8dca28e6e8d35db1782938d33e5320145e2", "patch": "@@ -0,0 +1,15 @@\n+-- { dg-do compile { target i?86-*-* x86_64-*-* } }\n+-- { dg-options \"-O3 -msse2 -fdump-tree-vect-details\" }\n+\n+package body Vect15 is\n+\n+   procedure Add (X, Y : Sarray; R : out Sarray) is\n+   begin\n+      for I in Sarray'Range loop\n+         R(I) := X(I) + Y(I);\n+      end loop;\n+   end;\n+\n+end Vect15;\n+\n+-- { dg-final { scan-tree-dump-not \"possible aliasing\" \"vect\"  } }"}, {"sha": "91375127deb088314fb73ed0b6f44834d08b47ac", "filename": "gcc/testsuite/gnat.dg/vect15.ads", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ddde8dca28e6e8d35db1782938d33e5320145e2/gcc%2Ftestsuite%2Fgnat.dg%2Fvect15.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ddde8dca28e6e8d35db1782938d33e5320145e2/gcc%2Ftestsuite%2Fgnat.dg%2Fvect15.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fvect15.ads?ref=1ddde8dca28e6e8d35db1782938d33e5320145e2", "patch": "@@ -0,0 +1,8 @@\n+package Vect15 is\n+\n+   type Sarray is array (1 .. 4) of Long_Float;\n+   for Sarray'Alignment use 16;\n+\n+   procedure Add (X, Y : Sarray; R : out Sarray);\n+\n+end Vect15;"}, {"sha": "99fe32081de089d087a0067f9d2bf40161cd2a71", "filename": "gcc/testsuite/gnat.dg/vect16.adb", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ddde8dca28e6e8d35db1782938d33e5320145e2/gcc%2Ftestsuite%2Fgnat.dg%2Fvect16.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ddde8dca28e6e8d35db1782938d33e5320145e2/gcc%2Ftestsuite%2Fgnat.dg%2Fvect16.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fvect16.adb?ref=1ddde8dca28e6e8d35db1782938d33e5320145e2", "patch": "@@ -0,0 +1,16 @@\n+-- { dg-do compile { target i?86-*-* x86_64-*-* } }\n+-- { dg-options \"-O3 -msse2 -fdump-tree-vect-details\" }\n+\n+package body Vect16 is\n+\n+   procedure Add_Sub (X, Y : Sarray; R,S : out Sarray) is\n+   begin\n+      for I in Sarray'Range loop\n+         R(I) := X(I) + Y(I);\n+         S(I) := X(I) - Y(I);\n+      end loop;\n+   end;\n+\n+end Vect16;\n+\n+-- { dg-final { scan-tree-dump-not \"possible aliasing\" \"vect\"  } }"}, {"sha": "0192dccb13ee28eef691df26918cdb49ca345a7e", "filename": "gcc/testsuite/gnat.dg/vect16.ads", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ddde8dca28e6e8d35db1782938d33e5320145e2/gcc%2Ftestsuite%2Fgnat.dg%2Fvect16.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ddde8dca28e6e8d35db1782938d33e5320145e2/gcc%2Ftestsuite%2Fgnat.dg%2Fvect16.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fvect16.ads?ref=1ddde8dca28e6e8d35db1782938d33e5320145e2", "patch": "@@ -0,0 +1,8 @@\n+package Vect16 is\n+\n+   type Sarray is array (1 .. 4) of Long_Float;\n+   for Sarray'Alignment use 16;\n+\n+   procedure Add_Sub (X, Y : Sarray; R,S : out Sarray);\n+\n+end Vect16;"}, {"sha": "f574ea22157d70ea34ee2806c4a917170a6e9e0f", "filename": "gcc/testsuite/gnat.dg/vect17.adb", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ddde8dca28e6e8d35db1782938d33e5320145e2/gcc%2Ftestsuite%2Fgnat.dg%2Fvect17.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ddde8dca28e6e8d35db1782938d33e5320145e2/gcc%2Ftestsuite%2Fgnat.dg%2Fvect17.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fvect17.adb?ref=1ddde8dca28e6e8d35db1782938d33e5320145e2", "patch": "@@ -0,0 +1,15 @@\n+-- { dg-do compile { target i?86-*-* x86_64-*-* } }\n+-- { dg-options \"-O3 -msse2 -fdump-tree-vect-details\" }\n+\n+package body Vect17 is\n+\n+   procedure Add (X, Y : aliased Sarray; R : aliased out Sarray) is\n+   begin\n+      for I in Sarray'Range loop\n+         R(I) := X(I) + Y(I);\n+      end loop;\n+   end;\n+\n+end Vect17;\n+\n+-- { dg-final { scan-tree-dump \"possible aliasing\" \"vect\"  } }"}, {"sha": "5c26157924e3093a9f0df6902d540d62d47a839c", "filename": "gcc/testsuite/gnat.dg/vect17.ads", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ddde8dca28e6e8d35db1782938d33e5320145e2/gcc%2Ftestsuite%2Fgnat.dg%2Fvect17.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ddde8dca28e6e8d35db1782938d33e5320145e2/gcc%2Ftestsuite%2Fgnat.dg%2Fvect17.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fvect17.ads?ref=1ddde8dca28e6e8d35db1782938d33e5320145e2", "patch": "@@ -0,0 +1,8 @@\n+package Vect17 is\n+\n+   type Sarray is array (1 .. 4) of Long_Float;\n+   for Sarray'Alignment use 16;\n+\n+   procedure Add (X, Y : aliased Sarray; R : aliased out Sarray);\n+\n+end Vect17;"}, {"sha": "91b1175248d44182200a808abd3a8627bdf370e2", "filename": "gcc/testsuite/gnat.dg/vect18.adb", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ddde8dca28e6e8d35db1782938d33e5320145e2/gcc%2Ftestsuite%2Fgnat.dg%2Fvect18.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ddde8dca28e6e8d35db1782938d33e5320145e2/gcc%2Ftestsuite%2Fgnat.dg%2Fvect18.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fvect18.adb?ref=1ddde8dca28e6e8d35db1782938d33e5320145e2", "patch": "@@ -0,0 +1,17 @@\n+-- { dg-do compile { target i?86-*-* x86_64-*-* } }\n+-- { dg-options \"-O3 -msse2 -fdump-tree-vect-details\" }\n+\n+package body Vect18 is\n+\n+   procedure Comp (X, Y : Sarray; R : in out Sarray) is\n+      Tmp : Long_Float := R(4);\n+   begin\n+      for I in 1 .. 3 loop\n+         R(I+1) := R(I) + X(I) + Y(I);\n+      end loop;\n+      R(1) := Tmp + X(4) + Y(4);\n+   end;\n+\n+end Vect18;\n+\n+-- { dg-final { scan-tree-dump \"bad data dependence\" \"vect\"  } }"}, {"sha": "a0ad135c26ab1bdc62fc37540d0702038dc616b6", "filename": "gcc/testsuite/gnat.dg/vect18.ads", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ddde8dca28e6e8d35db1782938d33e5320145e2/gcc%2Ftestsuite%2Fgnat.dg%2Fvect18.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ddde8dca28e6e8d35db1782938d33e5320145e2/gcc%2Ftestsuite%2Fgnat.dg%2Fvect18.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fvect18.ads?ref=1ddde8dca28e6e8d35db1782938d33e5320145e2", "patch": "@@ -0,0 +1,8 @@\n+package Vect18 is\n+\n+   type Sarray is array (1 .. 4) of Long_Float;\n+   for Sarray'Alignment use 16;\n+\n+   procedure Comp (X, Y : Sarray; R : in out Sarray);\n+\n+end Vect18;"}]}