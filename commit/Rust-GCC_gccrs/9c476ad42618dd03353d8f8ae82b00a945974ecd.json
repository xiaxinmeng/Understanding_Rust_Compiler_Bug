{"sha": "9c476ad42618dd03353d8f8ae82b00a945974ecd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM0NzZhZDQyNjE4ZGQwMzM1M2Q4ZjhhZTgyYjAwYTk0NTk3NGVjZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-04-19T18:02:32Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-04-19T18:02:32Z"}, "message": "Add noexcept to Filesystem TS operators\n\n\t* include/experimental/bits/fs_fwd.h (operator&, operator|, operator^,\n\toperator~ operator&=, operator|=, operator^=): Add noexcept to\n\toverloaded operators for copy_options, perms and directory_options.\n\t* src/filesystem/ops.cc (make_file_type, make_file_status,\n\tis_not_found_errno, file_time): Add noexcept.\n\nFrom-SVN: r235214", "tree": {"sha": "c7255456e57e2191b9bdcac4f2923dae3a7aaa1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7255456e57e2191b9bdcac4f2923dae3a7aaa1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c476ad42618dd03353d8f8ae82b00a945974ecd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c476ad42618dd03353d8f8ae82b00a945974ecd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c476ad42618dd03353d8f8ae82b00a945974ecd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c476ad42618dd03353d8f8ae82b00a945974ecd/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1e47084d33b547a9bd9a76a0b9e28610908c1d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1e47084d33b547a9bd9a76a0b9e28610908c1d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1e47084d33b547a9bd9a76a0b9e28610908c1d9"}], "stats": {"total": 58, "additions": 33, "deletions": 25}, "files": [{"sha": "3562b25f3ccc8fab9ae1f2746928f6e61ddb0df5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c476ad42618dd03353d8f8ae82b00a945974ecd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c476ad42618dd03353d8f8ae82b00a945974ecd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9c476ad42618dd03353d8f8ae82b00a945974ecd", "patch": "@@ -1,3 +1,11 @@\n+2016-04-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/experimental/bits/fs_fwd.h (operator&, operator|, operator^,\n+\toperator~ operator&=, operator|=, operator^=): Add noexcept to\n+\toverloaded operators for copy_options, perms and directory_options.\n+\t* src/filesystem/ops.cc (make_file_type, make_file_status,\n+\tis_not_found_errno, file_time): Add noexcept.\n+\n 2016-04-19  Edward Smith-Rowland  <3dw4rd@verizon.net>\n \n \t* include/bits/c++14_warning.h: Do not refer C++14 as experimental."}, {"sha": "57aa4d3ee79fc9459d822ef0345bbe9ad6330ca8", "filename": "libstdc++-v3/include/experimental/bits/fs_fwd.h", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c476ad42618dd03353d8f8ae82b00a945974ecd/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_fwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c476ad42618dd03353d8f8ae82b00a945974ecd/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_fwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_fwd.h?ref=9c476ad42618dd03353d8f8ae82b00a945974ecd", "patch": "@@ -93,46 +93,46 @@ _GLIBCXX_END_NAMESPACE_CXX11\n   };\n \n   constexpr copy_options\n-  operator&(copy_options __x, copy_options __y)\n+  operator&(copy_options __x, copy_options __y) noexcept\n   {\n     using __utype = typename std::underlying_type<copy_options>::type;\n     return static_cast<copy_options>(\n \tstatic_cast<__utype>(__x) & static_cast<__utype>(__y));\n   }\n \n   constexpr copy_options\n-  operator|(copy_options __x, copy_options __y)\n+  operator|(copy_options __x, copy_options __y) noexcept\n   {\n     using __utype = typename std::underlying_type<copy_options>::type;\n     return static_cast<copy_options>(\n \tstatic_cast<__utype>(__x) | static_cast<__utype>(__y));\n   }\n \n   constexpr copy_options\n-  operator^(copy_options __x, copy_options __y)\n+  operator^(copy_options __x, copy_options __y) noexcept\n   {\n     using __utype = typename std::underlying_type<copy_options>::type;\n     return static_cast<copy_options>(\n \tstatic_cast<__utype>(__x) ^ static_cast<__utype>(__y));\n   }\n \n   constexpr copy_options\n-  operator~(copy_options __x)\n+  operator~(copy_options __x) noexcept\n   {\n     using __utype = typename std::underlying_type<copy_options>::type;\n     return static_cast<copy_options>(~static_cast<__utype>(__x));\n   }\n \n   inline copy_options&\n-  operator&=(copy_options& __x, copy_options __y)\n+  operator&=(copy_options& __x, copy_options __y) noexcept\n   { return __x = __x & __y; }\n \n   inline copy_options&\n-  operator|=(copy_options& __x, copy_options __y)\n+  operator|=(copy_options& __x, copy_options __y) noexcept\n   { return __x = __x | __y; }\n \n   inline copy_options&\n-  operator^=(copy_options& __x, copy_options __y)\n+  operator^=(copy_options& __x, copy_options __y) noexcept\n   { return __x = __x ^ __y; }\n \n \n@@ -163,46 +163,46 @@ _GLIBCXX_END_NAMESPACE_CXX11\n   };\n \n   constexpr perms\n-  operator&(perms __x, perms __y)\n+  operator&(perms __x, perms __y) noexcept\n   {\n     using __utype = typename std::underlying_type<perms>::type;\n     return static_cast<perms>(\n \tstatic_cast<__utype>(__x) & static_cast<__utype>(__y));\n   }\n \n   constexpr perms\n-  operator|(perms __x, perms __y)\n+  operator|(perms __x, perms __y) noexcept\n   {\n     using __utype = typename std::underlying_type<perms>::type;\n     return static_cast<perms>(\n \tstatic_cast<__utype>(__x) | static_cast<__utype>(__y));\n   }\n \n   constexpr perms\n-  operator^(perms __x, perms __y)\n+  operator^(perms __x, perms __y) noexcept\n   {\n     using __utype = typename std::underlying_type<perms>::type;\n     return static_cast<perms>(\n \tstatic_cast<__utype>(__x) ^ static_cast<__utype>(__y));\n   }\n \n   constexpr perms\n-  operator~(perms __x)\n+  operator~(perms __x) noexcept\n   {\n     using __utype = typename std::underlying_type<perms>::type;\n     return static_cast<perms>(~static_cast<__utype>(__x));\n   }\n \n   inline perms&\n-  operator&=(perms& __x, perms __y)\n+  operator&=(perms& __x, perms __y) noexcept\n   { return __x = __x & __y; }\n \n   inline perms&\n-  operator|=(perms& __x, perms __y)\n+  operator|=(perms& __x, perms __y) noexcept\n   { return __x = __x | __y; }\n \n   inline perms&\n-  operator^=(perms& __x, perms __y)\n+  operator^=(perms& __x, perms __y) noexcept\n   { return __x = __x ^ __y; }\n \n   // Bitmask type\n@@ -211,46 +211,46 @@ _GLIBCXX_END_NAMESPACE_CXX11\n   };\n \n   constexpr directory_options\n-  operator&(directory_options __x, directory_options __y)\n+  operator&(directory_options __x, directory_options __y) noexcept\n   {\n     using __utype = typename std::underlying_type<directory_options>::type;\n     return static_cast<directory_options>(\n \tstatic_cast<__utype>(__x) & static_cast<__utype>(__y));\n   }\n \n   constexpr directory_options\n-  operator|(directory_options __x, directory_options __y)\n+  operator|(directory_options __x, directory_options __y) noexcept\n   {\n     using __utype = typename std::underlying_type<directory_options>::type;\n     return static_cast<directory_options>(\n \tstatic_cast<__utype>(__x) | static_cast<__utype>(__y));\n   }\n \n   constexpr directory_options\n-  operator^(directory_options __x, directory_options __y)\n+  operator^(directory_options __x, directory_options __y) noexcept\n   {\n     using __utype = typename std::underlying_type<directory_options>::type;\n     return static_cast<directory_options>(\n \tstatic_cast<__utype>(__x) ^ static_cast<__utype>(__y));\n   }\n \n   constexpr directory_options\n-  operator~(directory_options __x)\n+  operator~(directory_options __x) noexcept\n   {\n     using __utype = typename std::underlying_type<directory_options>::type;\n     return static_cast<directory_options>(~static_cast<__utype>(__x));\n   }\n \n   inline directory_options&\n-  operator&=(directory_options& __x, directory_options __y)\n+  operator&=(directory_options& __x, directory_options __y) noexcept\n   { return __x = __x & __y; }\n \n   inline directory_options&\n-  operator|=(directory_options& __x, directory_options __y)\n+  operator|=(directory_options& __x, directory_options __y) noexcept\n   { return __x = __x | __y; }\n \n   inline directory_options&\n-  operator^=(directory_options& __x, directory_options __y)\n+  operator^=(directory_options& __x, directory_options __y) noexcept\n   { return __x = __x ^ __y; }\n \n   typedef chrono::time_point<chrono::system_clock> file_time_type;"}, {"sha": "756e140d709767e3d52be4eff0acaf738740a2ee", "filename": "libstdc++-v3/src/filesystem/ops.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c476ad42618dd03353d8f8ae82b00a945974ecd/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c476ad42618dd03353d8f8ae82b00a945974ecd/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc?ref=9c476ad42618dd03353d8f8ae82b00a945974ecd", "patch": "@@ -249,7 +249,7 @@ namespace\n   typedef struct ::stat stat_type;\n \n   inline fs::file_type\n-  make_file_type(const stat_type& st)\n+  make_file_type(const stat_type& st) noexcept\n   {\n     using fs::file_type;\n #ifdef _GLIBCXX_HAVE_S_ISREG\n@@ -273,7 +273,7 @@ namespace\n   }\n \n   inline fs::file_status\n-  make_file_status(const stat_type& st)\n+  make_file_status(const stat_type& st) noexcept\n   {\n     return fs::file_status{\n \tmake_file_type(st),\n@@ -282,13 +282,13 @@ namespace\n   }\n \n   inline bool\n-  is_not_found_errno(int err)\n+  is_not_found_errno(int err) noexcept\n   {\n     return err == ENOENT || err == ENOTDIR;\n   }\n \n   inline fs::file_time_type\n-  file_time(const stat_type& st)\n+  file_time(const stat_type& st) noexcept\n   {\n     using namespace std::chrono;\n     return fs::file_time_type{"}]}