{"sha": "93d7668704bbd18bfdc52deddb247e9412a20d85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNkNzY2ODcwNGJiZDE4YmZkYzUyZGVkZGIyNDdlOTQxMmEyMGQ4NQ==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-10-07T10:54:35Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-10-07T10:54:35Z"}, "message": "expr.c (gfc_check_pointer_assign): Do the correct type checking when CLASS variables are involved.\n\n2009-10-07  Janus Weil  <janus@gcc.gnu.org>\n\n\t* expr.c (gfc_check_pointer_assign): Do the correct type checking when\n\tCLASS variables are involved.\n\t* match.c (gfc_match_select_type): Parse associate-name in SELECT TYPE\n\tstatements, and set up a local namespace for the SELECT TYPE block.\n\t* parse.h (gfc_build_block_ns): New prototype.\n\t* parse.c (parse_select_type_block): Return from local namespace to its\n\tparent after SELECT TYPE block.\n\t(gfc_build_block_ns): New function for setting up the local namespace\n\tfor a BLOCK construct.\n\t(parse_block_construct): Use gfc_build_block_ns.\n\t* resolve.c (resolve_select_type): Insert assignment for the selector\n\tvariable, in case an associate-name is given, and put the SELECT TYPE\n\tstatement inside a BLOCK.\n\t(resolve_code): Call resolve_class_assign after checking the assignment.\n\t* symbol.c (gfc_find_sym_tree): Moved some code here from\n\tgfc_get_ha_sym_tree.\n\t(gfc_get_ha_sym_tree): Moved some code to gfc_find_sym_tree.\n\n\n2009-10-07  Janus Weil  <janus@gcc.gnu.org>\n\n\t* gfortran.dg/same_type_as_2.f03: Modified (was illegal).\n\t* gfortran.dg/select_type_1.f03: Modified error message.\n\t* gfortran.dg/select_type_5.f03: New test.\n\nFrom-SVN: r152526", "tree": {"sha": "3bf167a3aed6e5f0c7dbf6adee8b94b78307052c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3bf167a3aed6e5f0c7dbf6adee8b94b78307052c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93d7668704bbd18bfdc52deddb247e9412a20d85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93d7668704bbd18bfdc52deddb247e9412a20d85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93d7668704bbd18bfdc52deddb247e9412a20d85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93d7668704bbd18bfdc52deddb247e9412a20d85/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b9036f4d1c5a4e3dce4e8be4e7ea3dfe7050d8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b9036f4d1c5a4e3dce4e8be4e7ea3dfe7050d8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b9036f4d1c5a4e3dce4e8be4e7ea3dfe7050d8d"}], "stats": {"total": 226, "additions": 176, "deletions": 50}, "files": [{"sha": "7b4ecc60a1ebe7a77992669a663fe0f6446322f5", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d7668704bbd18bfdc52deddb247e9412a20d85/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d7668704bbd18bfdc52deddb247e9412a20d85/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=93d7668704bbd18bfdc52deddb247e9412a20d85", "patch": "@@ -1,3 +1,23 @@\n+2009-10-07  Janus Weil  <janus@gcc.gnu.org>\n+\n+\t* expr.c (gfc_check_pointer_assign): Do the correct type checking when\n+\tCLASS variables are involved.\n+\t* match.c (gfc_match_select_type): Parse associate-name in SELECT TYPE\n+\tstatements, and set up a local namespace for the SELECT TYPE block.\n+\t* parse.h (gfc_build_block_ns): New prototype.\n+\t* parse.c (parse_select_type_block): Return from local namespace to its\n+\tparent after SELECT TYPE block.\n+\t(gfc_build_block_ns): New function for setting up the local namespace\n+\tfor a BLOCK construct.\n+\t(parse_block_construct): Use gfc_build_block_ns.\n+\t* resolve.c (resolve_select_type): Insert assignment for the selector\n+\tvariable, in case an associate-name is given, and put the SELECT TYPE\n+\tstatement inside a BLOCK.\n+\t(resolve_code): Call resolve_class_assign after checking the assignment.\n+\t* symbol.c (gfc_find_sym_tree): Moved some code here from\n+\tgfc_get_ha_sym_tree.\n+\t(gfc_get_ha_sym_tree): Moved some code to gfc_find_sym_tree.\n+\n 2009-10-07  Paul Thomas <pault@gcc.gnu.org>\n \n         PR fortran/41613"}, {"sha": "cbd3172b454793fea349503037f2cab83439141a", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d7668704bbd18bfdc52deddb247e9412a20d85/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d7668704bbd18bfdc52deddb247e9412a20d85/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=93d7668704bbd18bfdc52deddb247e9412a20d85", "patch": "@@ -3277,8 +3277,7 @@ gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue)\n       return SUCCESS;\n     }\n \n-  if (lvalue->ts.type != BT_CLASS && lvalue->symtree->n.sym->ts.type != BT_CLASS\n-\t&& !gfc_compare_types (&lvalue->ts, &rvalue->ts))\n+  if (!gfc_compare_types (&lvalue->ts, &rvalue->ts))\n     {\n       gfc_error (\"Different types in pointer assignment at %L; attempted \"\n \t\t \"assignment of %s to %s\", &lvalue->where, "}, {"sha": "d2c3ef021f42b60703f07bb187e5848fc3cac950", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d7668704bbd18bfdc52deddb247e9412a20d85/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d7668704bbd18bfdc52deddb247e9412a20d85/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=93d7668704bbd18bfdc52deddb247e9412a20d85", "patch": "@@ -4026,51 +4026,63 @@ gfc_match_select (void)\n match\n gfc_match_select_type (void)\n {\n-  gfc_expr *expr;\n+  gfc_expr *expr1, *expr2 = NULL;\n   match m;\n+  char name[GFC_MAX_SYMBOL_LEN];\n \n   m = gfc_match_label ();\n   if (m == MATCH_ERROR)\n     return m;\n \n-  m = gfc_match (\" select type ( %e \", &expr);\n+  m = gfc_match (\" select type ( \");\n   if (m != MATCH_YES)\n     return m;\n \n-  /* TODO: Implement ASSOCIATE.  */\n-  m = gfc_match (\" => \");\n+  gfc_current_ns = gfc_build_block_ns (gfc_current_ns);\n+\n+  m = gfc_match (\" %n => %e\", name, &expr2);\n   if (m == MATCH_YES)\n     {\n-      gfc_error (\"Associate-name in SELECT TYPE statement at %C \"\n-\t\t \"is not yet supported\");\n-      return MATCH_ERROR;\n+      expr1 = gfc_get_expr();\n+      expr1->expr_type = EXPR_VARIABLE;\n+      if (gfc_get_sym_tree (name, NULL, &expr1->symtree, false))\n+\treturn MATCH_ERROR;\n+      expr1->symtree->n.sym->ts = expr2->ts;\n+      expr1->symtree->n.sym->attr.referenced = 1;\n+    }\n+  else\n+    {\n+      m = gfc_match (\" %e \", &expr1);\n+      if (m != MATCH_YES)\n+\treturn m;\n     }\n \n   m = gfc_match (\" )%t\");\n   if (m != MATCH_YES)\n     return m;\n \n-  /* Check for F03:C811.\n-     TODO: Change error message once ASSOCIATE is implemented.  */\n-  if (expr->expr_type != EXPR_VARIABLE || expr->ref != NULL)\n+  /* Check for F03:C811.  */\n+  if (!expr2 && (expr1->expr_type != EXPR_VARIABLE || expr1->ref != NULL))\n     {\n-      gfc_error (\"Selector must be a named variable in SELECT TYPE statement \"\n-\t\t \"at %C\");\n+      gfc_error (\"Selector in SELECT TYPE at %C is not a named variable; \"\n+\t\t \"use associate-name=>\");\n       return MATCH_ERROR;\n     }\n \n   /* Check for F03:C813.  */\n-  if (expr->ts.type != BT_CLASS)\n+  if (expr1->ts.type != BT_CLASS && !(expr2 && expr2->ts.type == BT_CLASS))\n     {\n       gfc_error (\"Selector shall be polymorphic in SELECT TYPE statement \"\n \t\t \"at %C\");\n       return MATCH_ERROR;\n     }\n \n   new_st.op = EXEC_SELECT_TYPE;\n-  new_st.expr1 = expr;\n+  new_st.expr1 = expr1;\n+  new_st.expr2 = expr2;\n+  new_st.ext.ns = gfc_current_ns;\n \n-  type_selector = expr->symtree->n.sym;\n+  type_selector = expr1->symtree->n.sym;\n \n   return MATCH_YES;\n }"}, {"sha": "770c7efe9f6a02390dd6a39eb82e7ee1a2f15f72", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d7668704bbd18bfdc52deddb247e9412a20d85/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d7668704bbd18bfdc52deddb247e9412a20d85/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=93d7668704bbd18bfdc52deddb247e9412a20d85", "patch": "@@ -2909,12 +2909,8 @@ parse_select_type_block (void)\n       if (st == ST_NONE)\n \tunexpected_eof ();\n       if (st == ST_END_SELECT)\n-\t{\n-\t  /* Empty SELECT CASE is OK.  */\n-\t  accept_statement (st);\n-\t  pop_state ();\n-\t  return;\n-\t}\n+\t/* Empty SELECT CASE is OK.  */\n+\tgoto done;\n       if (st == ST_TYPE_IS || st == ST_CLASS_IS)\n \tbreak;\n \n@@ -2959,8 +2955,10 @@ parse_select_type_block (void)\n     }\n   while (st != ST_END_SELECT);\n \n+done:\n   pop_state ();\n   accept_statement (st);\n+  gfc_current_ns = gfc_current_ns->parent;\n }\n \n \n@@ -3033,18 +3031,13 @@ check_do_closure (void)\n static void parse_progunit (gfc_statement);\n \n \n-/* Parse a BLOCK construct.  */\n+/* Set up the local namespace for a BLOCK construct.  */\n \n-static void\n-parse_block_construct (void)\n+gfc_namespace*\n+gfc_build_block_ns (gfc_namespace *parent_ns)\n {\n-  gfc_namespace* parent_ns;\n   gfc_namespace* my_ns;\n-  gfc_state_data s;\n \n-  gfc_notify_std (GFC_STD_F2008, \"Fortran 2008: BLOCK construct at %C\");\n-\n-  parent_ns = gfc_current_ns;\n   my_ns = gfc_get_namespace (parent_ns, 1);\n   my_ns->construct_entities = 1;\n \n@@ -3066,6 +3059,22 @@ parse_block_construct (void)\n     }\n   my_ns->proc_name->attr.recursive = parent_ns->proc_name->attr.recursive;\n \n+  return my_ns;\n+}\n+\n+\n+/* Parse a BLOCK construct.  */\n+\n+static void\n+parse_block_construct (void)\n+{\n+  gfc_namespace* my_ns;\n+  gfc_state_data s;\n+\n+  gfc_notify_std (GFC_STD_F2008, \"Fortran 2008: BLOCK construct at %C\");\n+\n+  my_ns = gfc_build_block_ns (gfc_current_ns);\n+\n   new_st.op = EXEC_BLOCK;\n   new_st.ext.ns = my_ns;\n   accept_statement (ST_BLOCK);\n@@ -3075,7 +3084,7 @@ parse_block_construct (void)\n \n   parse_progunit (ST_NONE);\n \n-  gfc_current_ns = parent_ns;\n+  gfc_current_ns = gfc_current_ns->parent;\n   pop_state ();\n }\n "}, {"sha": "e0a2969c2a384f4b0051206e473698bc2ee266fb", "filename": "gcc/fortran/parse.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d7668704bbd18bfdc52deddb247e9412a20d85/gcc%2Ffortran%2Fparse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d7668704bbd18bfdc52deddb247e9412a20d85/gcc%2Ffortran%2Fparse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.h?ref=93d7668704bbd18bfdc52deddb247e9412a20d85", "patch": "@@ -70,4 +70,5 @@ match gfc_match_enumerator_def (void);\n void gfc_free_enum_history (void);\n extern bool gfc_matching_function;\n match gfc_match_prefix (gfc_typespec *);\n+gfc_namespace* gfc_build_block_ns (gfc_namespace *);\n #endif  /* GFC_PARSE_H  */"}, {"sha": "4092891f2c95fda10d91d63d8ade076416865ffa", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 40, "deletions": 7, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d7668704bbd18bfdc52deddb247e9412a20d85/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d7668704bbd18bfdc52deddb247e9412a20d85/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=93d7668704bbd18bfdc52deddb247e9412a20d85", "patch": "@@ -6661,8 +6661,15 @@ resolve_select_type (gfc_code *code)\n   gfc_case *c, *default_case;\n   gfc_symtree *st;\n   char name[GFC_MAX_SYMBOL_LEN];\n+  gfc_namespace *ns;\n+\n+  ns = code->ext.ns;\n+  gfc_resolve (ns);\n \n-  selector_type = code->expr1->ts.u.derived->components->ts.u.derived;\n+  if (code->expr2)\n+    selector_type = code->expr2->ts.u.derived->components->ts.u.derived;\n+  else\n+    selector_type = code->expr1->ts.u.derived->components->ts.u.derived;\n \n   /* Assume there is no DEFAULT case.  */\n   default_case = NULL;\n@@ -6704,6 +6711,32 @@ resolve_select_type (gfc_code *code)\n \t}\n     }\n \n+  if (code->expr2)\n+    {\n+      /* Insert assignment for selector variable.  */\n+      new_st = gfc_get_code ();\n+      new_st->op = EXEC_ASSIGN;\n+      new_st->expr1 = gfc_copy_expr (code->expr1);\n+      new_st->expr2 = gfc_copy_expr (code->expr2);\n+      ns->code = new_st;\n+    }\n+\n+  /* Put SELECT TYPE statement inside a BLOCK.  */\n+  new_st = gfc_get_code ();\n+  new_st->op = code->op;\n+  new_st->expr1 = code->expr1;\n+  new_st->expr2 = code->expr2;\n+  new_st->block = code->block;\n+  if (!ns->code)\n+    ns->code = new_st;\n+  else\n+    ns->code->next = new_st;\n+  code->op = EXEC_BLOCK;\n+  code->expr1 = code->expr2 =  NULL;\n+  code->block = NULL;\n+\n+  code = new_st;\n+\n   /* Transform to EXEC_SELECT.  */\n   code->op = EXEC_SELECT;\n   gfc_add_component_ref (code->expr1, \"$vindex\");\n@@ -6723,7 +6756,7 @@ resolve_select_type (gfc_code *code)\n \tcontinue;\n       /* Assign temporary to selector.  */\n       sprintf (name, \"tmp$%s\", c->ts.u.derived->name);\n-      st = gfc_find_symtree (code->expr1->symtree->n.sym->ns->sym_root, name);\n+      st = gfc_find_symtree (ns->sym_root, name);\n       new_st = gfc_get_code ();\n       new_st->op = EXEC_POINTER_ASSIGN;\n       new_st->expr1 = gfc_get_variable_expr (st);\n@@ -7669,9 +7702,6 @@ resolve_code (gfc_code *code, gfc_namespace *ns)\n \t  if (t == FAILURE)\n \t    break;\n \n-\t  if (code->expr1->ts.type == BT_CLASS)\n-\t    resolve_class_assign (code);\n-\n \t  if (resolve_ordinary_assign (code, ns))\n \t    {\n \t      if (code->op == EXEC_COMPCALL)\n@@ -7680,6 +7710,9 @@ resolve_code (gfc_code *code, gfc_namespace *ns)\n \t\tgoto call;\n \t    }\n \n+\t  if (code->expr1->ts.type == BT_CLASS)\n+\t    resolve_class_assign (code);\n+\n \t  break;\n \n \tcase EXEC_LABEL_ASSIGN:\n@@ -7700,11 +7733,11 @@ resolve_code (gfc_code *code, gfc_namespace *ns)\n \t  if (t == FAILURE)\n \t    break;\n \n+\t  gfc_check_pointer_assign (code->expr1, code->expr2);\n+\n \t  if (code->expr1->ts.type == BT_CLASS)\n \t    resolve_class_assign (code);\n \n-\t  gfc_check_pointer_assign (code->expr1, code->expr2);\n-\n \t  break;\n \n \tcase EXEC_ARITHMETIC_IF:"}, {"sha": "befa90b8c49d6f7225aa7a8323e67cb0ecc7ea0d", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d7668704bbd18bfdc52deddb247e9412a20d85/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d7668704bbd18bfdc52deddb247e9412a20d85/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=93d7668704bbd18bfdc52deddb247e9412a20d85", "patch": "@@ -2479,6 +2479,12 @@ gfc_find_sym_tree (const char *name, gfc_namespace *ns, int parent_flag,\n       st = gfc_find_symtree (ns->sym_root, name);\n       if (st != NULL)\n \t{\n+\t  /* Special case: If we're in a SELECT TYPE block,\n+\t    replace the selector variable by a temporary.  */\n+\t  if (gfc_current_state () == COMP_SELECT_TYPE\n+\t      && st && st->n.sym == type_selector)\n+\t    st = select_type_tmp;\n+\n \t  *result = st;\n \t  /* Ambiguous generic interfaces are permitted, as long\n \t     as the specific interfaces are different.  */\n@@ -2645,12 +2651,6 @@ gfc_get_ha_sym_tree (const char *name, gfc_symtree **result)\n \n   i = gfc_find_sym_tree (name, gfc_current_ns, 0, &st);\n \n-  /* Special case: If we're in a SELECT TYPE block,\n-     replace the selector variable by a temporary.  */\n-  if (gfc_current_state () == COMP_SELECT_TYPE\n-      && st && st->n.sym == type_selector)\n-    st = select_type_tmp;\n-\n   if (st != NULL)\n     {\n       save_symbol_data (st->n.sym);"}, {"sha": "f67f6716f1275e57e93c6ea5c50cb08554a9cdd2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d7668704bbd18bfdc52deddb247e9412a20d85/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d7668704bbd18bfdc52deddb247e9412a20d85/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=93d7668704bbd18bfdc52deddb247e9412a20d85", "patch": "@@ -1,3 +1,9 @@\n+2009-10-07  Janus Weil  <janus@gcc.gnu.org>\n+\n+\t* gfortran.dg/same_type_as_2.f03: Modified (was illegal).\n+\t* gfortran.dg/select_type_1.f03: Modified error message.\n+\t* gfortran.dg/select_type_5.f03: New test.\n+\n 2009-10-06  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/41612"}, {"sha": "6fd031170070b8ffbb98f99fb30fce8d0c7139d5", "filename": "gcc/testsuite/gfortran.dg/same_type_as_2.f03", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d7668704bbd18bfdc52deddb247e9412a20d85/gcc%2Ftestsuite%2Fgfortran.dg%2Fsame_type_as_2.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d7668704bbd18bfdc52deddb247e9412a20d85/gcc%2Ftestsuite%2Fgfortran.dg%2Fsame_type_as_2.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsame_type_as_2.f03?ref=93d7668704bbd18bfdc52deddb247e9412a20d85", "patch": "@@ -8,12 +8,11 @@\n   integer :: i\n  end type \n \n- type :: t2\n+ type, extends(t1) :: t2\n   integer :: j\n  end type\n \n- CLASS(t1), pointer :: c1\n- CLASS(t2), pointer :: c2\n+ CLASS(t1), pointer :: c1,c2\n  TYPE(t1), target :: x1\n  TYPE(t2) ,target :: x2\n "}, {"sha": "6a7db2e8954083f3f293917e7d3cee3ceb6cb22c", "filename": "gcc/testsuite/gfortran.dg/select_type_1.f03", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d7668704bbd18bfdc52deddb247e9412a20d85/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_1.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d7668704bbd18bfdc52deddb247e9412a20d85/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_1.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_1.f03?ref=93d7668704bbd18bfdc52deddb247e9412a20d85", "patch": "@@ -30,8 +30,8 @@\n \n   type is (t1)  ! { dg-error \"Unexpected TYPE IS statement\" }\n \n-  select type (3.5)  ! { dg-error \"Selector must be a named variable\" }\n-  select type (a%cp) ! { dg-error \"Selector must be a named variable\" }\n+  select type (3.5)  ! { dg-error \"is not a named variable\" }\n+  select type (a%cp) ! { dg-error \"is not a named variable\" }\n   select type (b)    ! { dg-error \"Selector shall be polymorphic\" }\n \n   select type (a)"}, {"sha": "ec9d3cd8d17f7178f333b02ffdfd5b5acdc34227", "filename": "gcc/testsuite/gfortran.dg/select_type_5.f03", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d7668704bbd18bfdc52deddb247e9412a20d85/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_5.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d7668704bbd18bfdc52deddb247e9412a20d85/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_5.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_5.f03?ref=93d7668704bbd18bfdc52deddb247e9412a20d85", "patch": "@@ -0,0 +1,47 @@\n+! { dg-do run }\n+!\n+! SELECT TYPE with associate-name\n+!\n+! Contributed by Janus Weil <janus@gcc.gnu.org>\n+\n+  type :: t1\n+    integer :: i = -1\n+    class(t1), pointer :: c\n+  end type t1\n+\n+  type, extends(t1) :: t2\n+    integer :: j = -1\n+  end type t2\n+\n+  type(t2), target :: b\n+  integer :: aa\n+\n+  b%c => b\n+  aa = 5\n+\n+  select type (aa => b%c)\n+  type is (t1)\n+    aa%i = 1\n+  type is (t2)\n+    aa%j = 2\n+  end select\n+\n+  print *,b%i,b%j\n+  if (b%i /= -1) call abort()\n+  if (b%j /= 2) call abort()\n+\n+  select type (aa => b%c)\n+  type is (t1)\n+    aa%i = 4\n+  type is (t2)\n+    aa%i = 3*aa%j\n+  end select\n+\n+  print *,b%i,b%j\n+  if (b%i /= 6) call abort()\n+  if (b%j /= 2) call abort()\n+\n+  print *,aa\n+  if (aa/=5) call abort()\n+\n+end"}]}