{"sha": "628781031e0b4f75bb9a59a045b5ed2a4daf568b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI4NzgxMDMxZTBiNGY3NWJiOWE1OWEwNDViNWVkMmE0ZGFmNTY4Yg==", "commit": {"author": {"name": "Victor Kaplansky", "email": "victork@il.ibm.com", "date": "2008-03-12T06:06:00Z"}, "committer": {"name": "Victor Kaplansky", "email": "victork@gcc.gnu.org", "date": "2008-03-12T06:06:00Z"}, "message": "tree-vectorizer.c (free_stmt_vec_info): New function.\n\n\n2008-03-12  Victor Kaplansky  <victork@il.ibm.com>\n            Ira Rosen  <irar@il.ibm.com>\n\n        * tree-vectorizer.c (free_stmt_vec_info): New function.\n        (destroy_loop_vec_info): Move code to free_stmt_vec_info().\n        Call free_stmt_vec_info(). Free LOOP_VINFO_STRIDED_STORES..\n        * tree-vectorizer.h (free_stmt_vec_info): Declare.\n        * tree-vect-transform.c (vectorizable_conversion): Free\n        vec_oprnds0 if it was allocated.\n        (vect_permute_store_chain): Remove unused VECs.\n        (vectorizable_store): Free VECs that are allocated in the..\n        function.\n        (vect_transform_strided_load, vectorizable_load): Likewise.\n        (vect_remove_stores): Simplify the code.\n        (vect_transform_loop): Move code to vect_remove_stores().\n        Call vect_remove_stores() and free_stmt_vec_info().\n\n\nCo-Authored-By: Ira Rosen <irar@il.ibm.com>\n\nFrom-SVN: r133134", "tree": {"sha": "3f8f1ec99cc8e6149bfb3ef986a0c63b812091e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f8f1ec99cc8e6149bfb3ef986a0c63b812091e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/628781031e0b4f75bb9a59a045b5ed2a4daf568b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/628781031e0b4f75bb9a59a045b5ed2a4daf568b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/628781031e0b4f75bb9a59a045b5ed2a4daf568b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/628781031e0b4f75bb9a59a045b5ed2a4daf568b/comments", "author": null, "committer": null, "parents": [{"sha": "dedba682444ffb964500c483a6ab3f4267f652f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dedba682444ffb964500c483a6ab3f4267f652f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dedba682444ffb964500c483a6ab3f4267f652f5"}], "stats": {"total": 99, "additions": 56, "deletions": 43}, "files": [{"sha": "5075eaf7633030769e67a52038badd97fdb9b1b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628781031e0b4f75bb9a59a045b5ed2a4daf568b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628781031e0b4f75bb9a59a045b5ed2a4daf568b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=628781031e0b4f75bb9a59a045b5ed2a4daf568b", "patch": "@@ -1,3 +1,20 @@\n+2008-03-12  Victor Kaplansky  <victork@il.ibm.com>\n+\t    Ira Rosen  <irar@il.ibm.com>\n+\n+\t* tree-vectorizer.c (free_stmt_vec_info): New function.\n+\t(destroy_loop_vec_info): Move code to free_stmt_vec_info().\n+\tCall free_stmt_vec_info(). Free LOOP_VINFO_STRIDED_STORES..\n+\t* tree-vectorizer.h (free_stmt_vec_info): Declare.\n+\t* tree-vect-transform.c (vectorizable_conversion): Free\n+\tvec_oprnds0 if it was allocated.\n+\t(vect_permute_store_chain): Remove unused VECs.\n+\t(vectorizable_store): Free VECs that are allocated in the..\n+\tfunction.\n+\t(vect_transform_strided_load, vectorizable_load): Likewise.\n+\t(vect_remove_stores): Simplify the code.\n+\t(vect_transform_loop): Move code to vect_remove_stores().\n+\tCall vect_remove_stores() and free_stmt_vec_info().\n+\n 2008-03-11  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* pa.h (TARGET_LONG_PIC_SDIFF_CALL): Conditionalize define on"}, {"sha": "59fa6d5de8078ffeb6a5d7fd72b451d9d2cb5b4f", "filename": "gcc/tree-vect-transform.c", "status": "modified", "additions": 19, "deletions": 31, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628781031e0b4f75bb9a59a045b5ed2a4daf568b/gcc%2Ftree-vect-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628781031e0b4f75bb9a59a045b5ed2a4daf568b/gcc%2Ftree-vect-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-transform.c?ref=628781031e0b4f75bb9a59a045b5ed2a4daf568b", "patch": "@@ -3631,6 +3631,9 @@ vectorizable_conversion (tree stmt, block_stmt_iterator *bsi,\n       *vec_stmt = STMT_VINFO_VEC_STMT (stmt_info);\n     }\n \n+  if (vec_oprnds0)\n+    VEC_free (tree, heap, vec_oprnds0); \n+\n   return true;\n }\n \n@@ -4582,11 +4585,8 @@ vect_permute_store_chain (VEC(tree,heap) *dr_chain,\n   tree scalar_dest, tmp;\n   int i;\n   unsigned int j;\n-  VEC(tree,heap) *first, *second;\n   \n   scalar_dest = GIMPLE_STMT_OPERAND (stmt, 0);\n-  first = VEC_alloc (tree, heap, length/2);\n-  second = VEC_alloc (tree, heap, length/2);\n \n   /* Check that the operation is supported.  */\n   if (!vect_strided_store_supported (vectype))\n@@ -4969,6 +4969,11 @@ vectorizable_store (tree stmt, block_stmt_iterator *bsi, tree *vec_stmt,\n \t}\n     }\n \n+  VEC_free (tree, heap, dr_chain);  \n+  VEC_free (tree, heap, oprnds);  \n+  if (result_chain)\n+    VEC_free (tree, heap, result_chain);  \n+\n   return true;\n }\n \n@@ -5474,6 +5479,8 @@ vect_transform_strided_load (tree stmt, VEC(tree,heap) *dr_chain, int size,\n \t    break;\n         }\n     }\n+\n+  VEC_free (tree, heap, result_chain);\n   return true;\n }\n \n@@ -5911,6 +5918,7 @@ vectorizable_load (tree stmt, block_stmt_iterator *bsi, tree *vec_stmt,\n \t  if (!vect_transform_strided_load (stmt, dr_chain, group_size, bsi))\n \t    return false;\t  \n \t  *vec_stmt = STMT_VINFO_VEC_STMT (stmt_info);\n+          VEC_free (tree, heap, dr_chain);\n \t  dr_chain = VEC_alloc (tree, heap, group_size);\n \t}\n       else\n@@ -5923,6 +5931,9 @@ vectorizable_load (tree stmt, block_stmt_iterator *bsi, tree *vec_stmt,\n \t}\n     }\n \n+  if (dr_chain)\n+    VEC_free (tree, heap, dr_chain);\n+\n   return true;\n }\n \n@@ -7259,22 +7270,17 @@ vect_loop_versioning (loop_vec_info loop_vinfo)\n static void\n vect_remove_stores (tree first_stmt)\n {\n-  stmt_ann_t ann;\n   tree next = first_stmt;\n   tree tmp;\n-  stmt_vec_info next_stmt_info;\n   block_stmt_iterator next_si;\n \n   while (next)\n     {\n       /* Free the attached stmt_vec_info and remove the stmt.  */\n       next_si = bsi_for_stmt (next);\n       bsi_remove (&next_si, true);\n-      next_stmt_info = vinfo_for_stmt (next);\n-      ann = stmt_ann (next);\n-      tmp = DR_GROUP_NEXT_DR (next_stmt_info);\n-      free (next_stmt_info);\n-      set_stmt_info (ann, NULL);\n+      tmp = DR_GROUP_NEXT_DR (vinfo_for_stmt (next));\n+      free_stmt_vec_info (next);\n       next = tmp;\n     }\n }\n@@ -7373,7 +7379,7 @@ vect_transform_loop (loop_vec_info loop_vinfo)\n   struct loop *loop = LOOP_VINFO_LOOP (loop_vinfo);\n   basic_block *bbs = LOOP_VINFO_BBS (loop_vinfo);\n   int nbbs = loop->num_nodes;\n-  block_stmt_iterator si, next_si;\n+  block_stmt_iterator si;\n   int i;\n   tree ratio = NULL;\n   int vectorization_factor = LOOP_VINFO_VECT_FACTOR (loop_vinfo);\n@@ -7538,37 +7544,19 @@ vect_transform_loop (loop_vec_info loop_vinfo)\n \t  is_store = vect_transform_stmt (stmt, &si, &strided_store, NULL);\n           if (is_store)\n             {\n-\t      stmt_ann_t ann;\n \t      if (STMT_VINFO_STRIDED_ACCESS (stmt_info))\n \t\t{\n \t\t  /* Interleaving. If IS_STORE is TRUE, the vectorization of the\n \t\t     interleaving chain was completed - free all the stores in\n \t\t     the chain.  */\n-\t\t  tree next = DR_GROUP_FIRST_DR (stmt_info);\n-\t\t  tree tmp;\n-\t\t  stmt_vec_info next_stmt_info;\n-\n-\t\t  while (next)\n-\t\t    {\n-\t\t      next_si = bsi_for_stmt (next);\n-\t\t      next_stmt_info = vinfo_for_stmt (next);\n-\t\t      /* Free the attached stmt_vec_info and remove the stmt.  */\n-\t\t      ann = stmt_ann (next);\n-\t\t      tmp = DR_GROUP_NEXT_DR (next_stmt_info);\n-\t\t      free (next_stmt_info);\n-\t\t      set_stmt_info (ann, NULL);\n-\t\t      bsi_remove (&next_si, true);\n-\t\t      next = tmp;\n-\t\t    }\n+\t\t  vect_remove_stores (DR_GROUP_FIRST_DR (stmt_info));\n \t\t  bsi_remove (&si, true);\n \t\t  continue;\n \t\t}\n \t      else\n \t\t{\n \t\t  /* Free the attached stmt_vec_info and remove the stmt.  */\n-\t\t  ann = stmt_ann (stmt);\n-\t\t  free (stmt_info);\n-\t\t  set_stmt_info (ann, NULL);\n+\t\t  free_stmt_vec_info (stmt);\n \t\t  bsi_remove (&si, true);\n \t\t  continue;\n \t\t}"}, {"sha": "7f631fb6f61a970662f3c7450e00f758c6829a9d", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628781031e0b4f75bb9a59a045b5ed2a4daf568b/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628781031e0b4f75bb9a59a045b5ed2a4daf568b/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=628781031e0b4f75bb9a59a045b5ed2a4daf568b", "patch": "@@ -1545,6 +1545,22 @@ new_stmt_vec_info (tree stmt, loop_vec_info loop_vinfo)\n }\n \n \n+/* Free stmt vectorization related info.  */\n+\n+void\n+free_stmt_vec_info (tree stmt)\n+{\n+  stmt_vec_info stmt_info = vinfo_for_stmt (stmt);\n+\n+  if (!stmt_info)\n+    return;\n+\n+  VEC_free (dr_p, heap, STMT_VINFO_SAME_ALIGN_REFS (stmt_info));\n+  free (stmt_info);\n+  set_stmt_info (stmt_ann (stmt), NULL);\n+}\n+\n+\n /* Function bb_in_loop_p\n \n    Used as predicate for dfs order traversal of the loop bbs.  */\n@@ -1701,21 +1717,13 @@ destroy_loop_vec_info (loop_vec_info loop_vinfo, bool clean_stmts)\n     {\n       basic_block bb = bbs[j];\n       tree phi;\n-      stmt_vec_info stmt_info;\n \n       for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n-        {\n-          stmt_ann_t ann = stmt_ann (phi);\n-\n-          stmt_info = vinfo_for_stmt (phi);\n-          free (stmt_info);\n-          set_stmt_info (ann, NULL);\n-        }\n+        free_stmt_vec_info (phi);\n \n       for (si = bsi_start (bb); !bsi_end_p (si); )\n \t{\n \t  tree stmt = bsi_stmt (si);\n-\t  stmt_ann_t ann = stmt_ann (stmt);\n \t  stmt_vec_info stmt_info = vinfo_for_stmt (stmt);\n \n \t  if (stmt_info)\n@@ -1733,9 +1741,7 @@ destroy_loop_vec_info (loop_vec_info loop_vinfo, bool clean_stmts)\n \t\t}\n \t\t\t\n \t      /* Free stmt_vec_info.  */\n-\t      VEC_free (dr_p, heap, STMT_VINFO_SAME_ALIGN_REFS (stmt_info));\n-\t      free (stmt_info);\n-\t      set_stmt_info (ann, NULL);\n+\t      free_stmt_vec_info (stmt);\n \n \t      /* Remove dead \"pattern stmts\".  */\n \t      if (remove_stmt_p)\n@@ -1754,6 +1760,7 @@ destroy_loop_vec_info (loop_vec_info loop_vinfo, bool clean_stmts)\n   for (j = 0; VEC_iterate (slp_instance, slp_instances, j, instance); j++)\n     vect_free_slp_tree (SLP_INSTANCE_TREE (instance));\n   VEC_free (slp_instance, heap, LOOP_VINFO_SLP_INSTANCES (loop_vinfo));\n+  VEC_free (tree, heap, LOOP_VINFO_STRIDED_STORES (loop_vinfo));\n \n   free (loop_vinfo);\n   loop->aux = NULL;"}, {"sha": "1c082f85bef92303cdb0f158106fc80edc768ee2", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628781031e0b4f75bb9a59a045b5ed2a4daf568b/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628781031e0b4f75bb9a59a045b5ed2a4daf568b/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=628781031e0b4f75bb9a59a045b5ed2a4daf568b", "patch": "@@ -660,6 +660,7 @@ extern bool supportable_narrowing_operation (enum tree_code, const_tree,\n extern loop_vec_info new_loop_vec_info (struct loop *loop);\n extern void destroy_loop_vec_info (loop_vec_info, bool);\n extern stmt_vec_info new_stmt_vec_info (tree stmt, loop_vec_info);\n+extern void free_stmt_vec_info (tree stmt);\n \n \n /** In tree-vect-analyze.c  **/"}]}