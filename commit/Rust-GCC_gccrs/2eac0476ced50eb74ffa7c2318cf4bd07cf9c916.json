{"sha": "2eac0476ced50eb74ffa7c2318cf4bd07cf9c916", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVhYzA0NzZjZWQ1MGViNzRmZmE3YzIzMThjZjRiZDA3Y2Y5YzkxNg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2013-03-19T07:36:15Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-03-19T07:36:15Z"}, "message": "i386.md (*movti_internal): Merge from *movti_internal_rex64 and *movti_internal_sse.\n\n\t* config/i386/i386.md (*movti_internal): Merge from\n\t*movti_internal_rex64 and *movti_internal_sse.  Use x64 isa attribute.\n\t(*movdi_internal): Merge with *movdi_internal_rex64.  Use x64 and\n\tnox64 isa attributes.\n\nFrom-SVN: r196784", "tree": {"sha": "d70f2370a8d8723ed3ebda3f46ef4be8e0bce39d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d70f2370a8d8723ed3ebda3f46ef4be8e0bce39d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2eac0476ced50eb74ffa7c2318cf4bd07cf9c916", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2eac0476ced50eb74ffa7c2318cf4bd07cf9c916", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2eac0476ced50eb74ffa7c2318cf4bd07cf9c916", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2eac0476ced50eb74ffa7c2318cf4bd07cf9c916/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6e55eda727cb9635c57de146ba53d35044c85589", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e55eda727cb9635c57de146ba53d35044c85589", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e55eda727cb9635c57de146ba53d35044c85589"}], "stats": {"total": 350, "additions": 124, "deletions": 226}, "files": [{"sha": "e7a3cc1dbcfab18e6ca6f65e5ba8f701d352e71a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eac0476ced50eb74ffa7c2318cf4bd07cf9c916/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eac0476ced50eb74ffa7c2318cf4bd07cf9c916/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2eac0476ced50eb74ffa7c2318cf4bd07cf9c916", "patch": "@@ -1,3 +1,10 @@\n+2013-03-19  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*movti_internal): Merge from\n+\t*movti_internal_rex64 and *movti_internal_sse.  Use x64 isa attribute.\n+\t(*movdi_internal): Merge with *movdi_internal_rex64.  Use x64 and\n+\tnox64 isa attributes.\n+\n 2013-03-18  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-structalias.c (find): Use gcc_checking_assert."}, {"sha": "e7eaabb333c3b467e0d529bd5af272031e379c55", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 117, "deletions": 226, "changes": 343, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eac0476ced50eb74ffa7c2318cf4bd07cf9c916/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eac0476ced50eb74ffa7c2318cf4bd07cf9c916/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=2eac0476ced50eb74ffa7c2318cf4bd07cf9c916", "patch": "@@ -1656,6 +1656,40 @@\n \f\n ;; Move instructions.\n \n+;; Reload patterns to support multi-word load/store\n+;; with non-offsetable address.\n+(define_expand \"reload_noff_store\"\n+  [(parallel [(match_operand 0 \"memory_operand\" \"=m\")\n+              (match_operand 1 \"register_operand\" \"r\")\n+              (match_operand:DI 2 \"register_operand\" \"=&r\")])]\n+  \"TARGET_64BIT\"\n+{\n+  rtx mem = operands[0];\n+  rtx addr = XEXP (mem, 0);\n+\n+  emit_move_insn (operands[2], addr);\n+  mem = replace_equiv_address_nv (mem, operands[2]);\n+\n+  emit_insn (gen_rtx_SET (VOIDmode, mem, operands[1]));\n+  DONE;\n+})\n+\n+(define_expand \"reload_noff_load\"\n+  [(parallel [(match_operand 0 \"register_operand\" \"=r\")\n+              (match_operand 1 \"memory_operand\" \"m\")\n+              (match_operand:DI 2 \"register_operand\" \"=r\")])]\n+  \"TARGET_64BIT\"\n+{\n+  rtx mem = operands[1];\n+  rtx addr = XEXP (mem, 0);\n+\n+  emit_move_insn (operands[2], addr);\n+  mem = replace_equiv_address_nv (mem, operands[2]);\n+\n+  emit_insn (gen_rtx_SET (VOIDmode, operands[0], mem));\n+  DONE;\n+})\n+\n (define_expand \"movoi\"\n   [(set (match_operand:OI 0 \"nonimmediate_operand\")\n \t(match_operand:OI 1 \"general_operand\"))]\n@@ -1760,10 +1794,11 @@\n \t      ]\n \t      (const_string \"OI\")))])\n \n-(define_insn \"*movti_internal_rex64\"\n+(define_insn \"*movti_internal\"\n   [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=!r ,o ,x,x ,m\")\n \t(match_operand:TI 1 \"general_operand\"      \"riFo,re,C,xm,x\"))]\n-  \"TARGET_64BIT && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n+  \"(TARGET_64BIT || TARGET_SSE)\n+   && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {\n   switch (which_alternative)\n     {\n@@ -1795,12 +1830,14 @@\n       gcc_unreachable ();\n     }\n }\n-  [(set_attr \"type\" \"*,*,sselog1,ssemov,ssemov\")\n+  [(set_attr \"isa\" \"x64,x64,*,*,*\")\n+   (set_attr \"type\" \"*,*,sselog1,ssemov,ssemov\")\n    (set_attr \"prefix\" \"*,*,maybe_vex,maybe_vex,maybe_vex\")\n    (set (attr \"mode\")\n    \t(cond [(eq_attr \"alternative\" \"0,1\")\n \t\t (const_string \"DI\")\n-\t       (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n+\t       (ior (not (match_test \"TARGET_SSE2\"))\n+\t\t    (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\"))\n \t\t (const_string \"V4SF\")\n \t       (and (eq_attr \"alternative\" \"4\")\n \t\t    (match_test \"TARGET_SSE_TYPELESS_STORES\"))\n@@ -1820,81 +1857,20 @@\n   [(const_int 0)]\n   \"ix86_split_long_move (operands); DONE;\")\n \n-(define_insn \"*movti_internal_sse\"\n-  [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=x,x ,m\")\n-\t(match_operand:TI 1 \"vector_move_operand\"  \"C ,xm,x\"))]\n-  \"TARGET_SSE && !TARGET_64BIT\n-   && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n-{\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      return standard_sse_constant_opcode (insn, operands[1]);\n-    case 1:\n-    case 2:\n-      /* TDmode values are passed as TImode on the stack.  Moving them\n-\t to stack may result in unaligned memory access.  */\n-      if (misaligned_operand (operands[0], TImode)\n-\t  || misaligned_operand (operands[1], TImode))\n-\t{\n-\t  if (get_attr_mode (insn) == MODE_V4SF)\n-\t    return \"%vmovups\\t{%1, %0|%0, %1}\";\n-\t  else\n-\t    return \"%vmovdqu\\t{%1, %0|%0, %1}\";\n-\t}\n-      else\n-\t{\n-\t  if (get_attr_mode (insn) == MODE_V4SF)\n-\t    return \"%vmovaps\\t{%1, %0|%0, %1}\";\n-\t  else\n-\t    return \"%vmovdqa\\t{%1, %0|%0, %1}\";\n-\t}\n-    default:\n-      gcc_unreachable ();\n-    }\n-}\n-  [(set_attr \"type\" \"sselog1,ssemov,ssemov\")\n-   (set_attr \"prefix\" \"maybe_vex\")\n-   (set (attr \"mode\")\n-\t(cond [(match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n-\t\t (const_string \"V4SF\")\n-\t       (and (eq_attr \"alternative\" \"2\")\n-\t\t    (match_test \"TARGET_SSE_TYPELESS_STORES\"))\n-\t\t (const_string \"V4SF\")\n-\t       (match_test \"TARGET_AVX\")\n-\t\t (const_string \"TI\")\n-\t       (ior (not (match_test \"TARGET_SSE2\"))\n-\t\t    (match_test \"optimize_function_for_size_p (cfun)\"))\n-\t\t (const_string \"V4SF\")\n-\t      ]\n-\t      (const_string \"TI\")))])\n-\n-(define_insn \"*movdi_internal_rex64\"\n+(define_insn \"*movdi_internal\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n-\t  \"=r,r  ,r,m ,*y,m*y,?*y,?r ,?*Ym,*x,m ,*x,*x,?r ,?*Yi,?*x,?*Ym\")\n+    \"=r  ,o  ,r,r  ,r,m ,*y,m*y,*y,?*y,?r ,?*Ym,*x,m ,*x,*x,?r ,?*Yi,?*x,?*Ym\")\n \t(match_operand:DI 1 \"general_operand\"\n-\t  \"Z ,rem,i,re,C ,*y ,m  ,*Ym,r   ,C ,*x,*x,m ,*Yi,r   ,*Ym,*x\"))]\n-  \"TARGET_64BIT && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n+    \"riFo,riF,Z,rem,i,re,C ,*y ,m ,m  ,*Ym,r   ,C ,*x,*x,m ,*Yi,r   ,*Ym,*x\"))]\n+  \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {\n   switch (get_attr_type (insn))\n     {\n-    case TYPE_SSECVT:\n-      if (SSE_REG_P (operands[0]))\n-\treturn \"movq2dq\\t{%1, %0|%0, %1}\";\n-      else\n-\treturn \"movdq2q\\t{%1, %0|%0, %1}\";\n-\n-    case TYPE_SSEMOV:\n-      if (get_attr_mode (insn) == MODE_V4SF)\n-\treturn \"%vmovaps\\t{%1, %0|%0, %1}\";\n-      else if (get_attr_mode (insn) == MODE_TI)\n-\treturn \"%vmovdqa\\t{%1, %0|%0, %1}\";\n+    case TYPE_MULTI:\n+      return \"#\";\n \n-      /* Handle broken assemblers that require movd instead of movq.  */\n-      if (GENERAL_REG_P (operands[0]) || GENERAL_REG_P (operands[1]))\n-\treturn \"%vmovd\\t{%1, %0|%0, %1}\";\n-      else\n-\treturn \"%vmovq\\t{%1, %0|%0, %1}\";\n+    case TYPE_MMX:\n+      return \"pxor\\t%0, %0\";\n \n     case TYPE_MMXMOV:\n       /* Handle broken assemblers that require movd instead of movq.  */\n@@ -1906,8 +1882,27 @@\n     case TYPE_SSELOG1:\n       return standard_sse_constant_opcode (insn, operands[1]);\n \n-    case TYPE_MMX:\n-      return \"pxor\\t%0, %0\";\n+    case TYPE_SSEMOV:\n+      switch (get_attr_mode (insn))\n+\t{\n+\tcase MODE_DI:\n+\t   return \"%vmovq\\t{%1, %0|%0, %1}\";\n+\tcase MODE_TI:\n+\t  return \"%vmovdqa\\t{%1, %0|%0, %1}\";\n+\tcase MODE_V4SF:\n+\t  return \"%vmovaps\\t{%1, %0|%0, %1}\";\n+\tcase MODE_V2SF:\n+\t  gcc_assert (!TARGET_AVX);\n+\t  return \"movlps\\t{%1, %0|%0, %1}\";\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+\n+    case TYPE_SSECVT:\n+      if (SSE_REG_P (operands[0]))\n+\treturn \"movq2dq\\t{%1, %0|%0, %1}\";\n+      else\n+\treturn \"movdq2q\\t{%1, %0|%0, %1}\";\n \n     case TYPE_LEA:\n       return \"lea{q}\\t{%E1, %0|%0, %E1}\";\n@@ -1916,184 +1911,79 @@\n       gcc_assert (!flag_pic || LEGITIMATE_PIC_OPERAND_P (operands[1]));\n       if (get_attr_mode (insn) == MODE_SI)\n \treturn \"mov{l}\\t{%k1, %k0|%k0, %k1}\";\n-      else if (which_alternative == 2)\n+      else if (which_alternative == 4)\n \treturn \"movabs{q}\\t{%1, %0|%0, %1}\";\n       else if (ix86_use_lea_for_mov (insn, operands))\n \treturn \"lea{q}\\t{%E1, %0|%0, %E1}\";\n       else\n \treturn \"mov{q}\\t{%1, %0|%0, %1}\";\n     }\n }\n-  [(set (attr \"type\")\n-     (cond [(eq_attr \"alternative\" \"4\")\n+  [(set (attr \"isa\")\n+     (cond [(eq_attr \"alternative\" \"0,1,8\")\n+\t      (const_string \"nox64\")\n+\t    (eq_attr \"alternative\" \"2,3,4,5,9,10,11,16,17\")\n+\t      (const_string \"x64\")\n+\t    (eq_attr \"alternative\" \"18,19\")\n+\t      (const_string \"sse2\")\n+\t   ]\n+\t   (const_string \"*\")))\n+   (set (attr \"type\")\n+     (cond [(eq_attr \"alternative\" \"0,1\")\n+\t      (const_string \"multi\")\n+\t    (eq_attr \"alternative\" \"6\")\n \t      (const_string \"mmx\")\n-\t    (eq_attr \"alternative\" \"5,6,7,8\")\n+\t    (eq_attr \"alternative\" \"7,8,9,10,11\")\n \t      (const_string \"mmxmov\")\n-\t    (eq_attr \"alternative\" \"9\")\n+\t    (eq_attr \"alternative\" \"12\")\n \t      (const_string \"sselog1\")\n-\t    (eq_attr \"alternative\" \"10,11,12,13,14\")\n+\t    (eq_attr \"alternative\" \"13,14,15,16,17\")\n \t      (const_string \"ssemov\")\n-\t    (eq_attr \"alternative\" \"15,16\")\n+\t    (eq_attr \"alternative\" \"18,19\")\n \t      (const_string \"ssecvt\")\n  \t    (match_operand 1 \"pic_32bit_operand\")\n \t      (const_string \"lea\")\n \t   ]\n \t   (const_string \"imov\")))\n    (set (attr \"modrm\")\n      (if_then_else\n-       (and (eq_attr \"alternative\" \"2\") (eq_attr \"type\" \"imov\"))\n+       (and (eq_attr \"alternative\" \"4\") (eq_attr \"type\" \"imov\"))\n \t (const_string \"0\")\n \t (const_string \"*\")))\n    (set (attr \"length_immediate\")\n      (if_then_else\n-       (and (eq_attr \"alternative\" \"2\") (eq_attr \"type\" \"imov\"))\n+       (and (eq_attr \"alternative\" \"4\") (eq_attr \"type\" \"imov\"))\n \t (const_string \"8\")\n \t (const_string \"*\")))\n    (set (attr \"prefix_rex\")\n-     (if_then_else (eq_attr \"alternative\" \"7,8\")\n-       (const_string \"1\")\n-       (const_string \"*\")))\n-   (set (attr \"prefix_data16\")\n-     (if_then_else (eq_attr \"alternative\" \"10\")\n+     (if_then_else (eq_attr \"alternative\" \"10,11\")\n        (const_string \"1\")\n        (const_string \"*\")))\n    (set (attr \"prefix\")\n-     (if_then_else (eq_attr \"alternative\" \"9,10,11,12,13,14\")\n+     (if_then_else (eq_attr \"type\" \"sselog1,ssemov\")\n        (const_string \"maybe_vex\")\n        (const_string \"orig\")))\n+   (set (attr \"prefix_data16\")\n+     (if_then_else (and (eq_attr \"type\" \"ssemov\") (eq_attr \"mode\" \"DI\"))\n+       (const_string \"1\")\n+       (const_string \"*\")))\n    (set (attr \"mode\")\n-   \t(cond [(eq_attr \"alternative\" \"0\")\n-\t\t  (const_string \"SI\")\n-\t       (eq_attr \"alternative\" \"9,11\")\n-\t\t  (cond [(match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n-\t\t\t   (const_string \"V4SF\")\n-\t\t\t (match_test \"TARGET_AVX\")\n-\t\t\t   (const_string \"TI\")\n-\t\t\t (match_test \"optimize_function_for_size_p (cfun)\")\n-\t\t\t   (const_string \"V4SF\")\n-\t\t\t]\n-\t\t\t(const_string \"TI\"))\n-\t      ]\n-\t      (const_string \"DI\")))])\n-\n-;; Reload patterns to support multi-word load/store\n-;; with non-offsetable address.\n-(define_expand \"reload_noff_store\"\n-  [(parallel [(match_operand 0 \"memory_operand\" \"=m\")\n-              (match_operand 1 \"register_operand\" \"r\")\n-              (match_operand:DI 2 \"register_operand\" \"=&r\")])]\n-  \"TARGET_64BIT\"\n-{\n-  rtx mem = operands[0];\n-  rtx addr = XEXP (mem, 0);\n-\n-  emit_move_insn (operands[2], addr);\n-  mem = replace_equiv_address_nv (mem, operands[2]);\n-\n-  emit_insn (gen_rtx_SET (VOIDmode, mem, operands[1]));\n-  DONE;\n-})\n-\n-(define_expand \"reload_noff_load\"\n-  [(parallel [(match_operand 0 \"register_operand\" \"=r\")\n-              (match_operand 1 \"memory_operand\" \"m\")\n-              (match_operand:DI 2 \"register_operand\" \"=r\")])]\n-  \"TARGET_64BIT\"\n-{\n-  rtx mem = operands[1];\n-  rtx addr = XEXP (mem, 0);\n-\n-  emit_move_insn (operands[2], addr);\n-  mem = replace_equiv_address_nv (mem, operands[2]);\n-\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], mem));\n-  DONE;\n-})\n-\n-(define_insn \"*movdi_internal\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\"\n-\t  \"=r  ,o  ,*y,m*y,*y,*x,m ,*x,*x,*x,m ,*x,*x,?*x,?*Ym\")\n-\t(match_operand:DI 1 \"general_operand\"\n-\t  \"riFo,riF,C ,*y ,m ,C ,*x,*x,m ,C ,*x,*x,m ,*Ym,*x\"))]\n-  \"!TARGET_64BIT && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n-{\n-  switch (get_attr_type (insn))\n-    {\n-    case TYPE_SSECVT:\n-      if (SSE_REG_P (operands[0]))\n-\treturn \"movq2dq\\t{%1, %0|%0, %1}\";\n-      else\n-\treturn \"movdq2q\\t{%1, %0|%0, %1}\";\n-\n-    case TYPE_SSEMOV:\n-      switch (get_attr_mode (insn))\n-\t{\n-\tcase MODE_TI:\n-\t  return \"%vmovdqa\\t{%1, %0|%0, %1}\";\n-\tcase MODE_DI:\n-\t   return \"%vmovq\\t{%1, %0|%0, %1}\";\n-\tcase MODE_V4SF:\n-\t  return \"%vmovaps\\t{%1, %0|%0, %1}\";\n-\tcase MODE_V2SF:\n-\t  return \"movlps\\t{%1, %0|%0, %1}\";\n-\tdefault:\n-\t  gcc_unreachable ();\n-\t}\n-\n-    case TYPE_MMXMOV:\n-      return \"movq\\t{%1, %0|%0, %1}\";\n-\n-    case TYPE_SSELOG1:\n-      return standard_sse_constant_opcode (insn, operands[1]);\n-\n-    case TYPE_MMX:\n-      return \"pxor\\t%0, %0\";\n-\n-    case TYPE_MULTI:\n-      return \"#\";\n+     (cond [(eq_attr \"alternative\" \"2\")\n+\t      (const_string \"SI\")\n+\t    (eq_attr \"alternative\" \"12,14\")\n+\t      (cond [(ior (not (match_test \"TARGET_SSE2\"))\n+\t\t\t  (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\"))\n+\t\t       (const_string \"V4SF\")\n+\t\t     (match_test \"TARGET_AVX\")\n+\t\t       (const_string \"TI\")\n+\t\t     (match_test \"optimize_function_for_size_p (cfun)\")\n+\t\t       (const_string \"V4SF\")\n+\t\t    ]\n+\t\t    (const_string \"TI\"))\n \n-    default:\n-      gcc_unreachable ();\n-    }\n-}\n-  [(set (attr \"isa\")\n-     (cond [(eq_attr \"alternative\" \"5,6,7,8,13,14\")\n-\t      (const_string \"sse2\")\n-\t    (eq_attr \"alternative\" \"9,10,11,12\")\n-\t      (const_string \"noavx\")\n-\t   ]\n-           (const_string \"*\")))\n-   (set (attr \"type\")\n-     (cond [(eq_attr \"alternative\" \"0,1\")\n-\t      (const_string \"multi\")\n-\t    (eq_attr \"alternative\" \"2\")\n-\t      (const_string \"mmx\")\n-\t    (eq_attr \"alternative\" \"3,4\")\n-\t      (const_string \"mmxmov\")\n-\t    (eq_attr \"alternative\" \"5,9\")\n-\t      (const_string \"sselog1\")\n-\t    (eq_attr \"alternative\" \"13,14\")\n-\t      (const_string \"ssecvt\")\n-\t   ]\n-\t   (const_string \"ssemov\")))\n-   (set (attr \"prefix\")\n-     (if_then_else (eq_attr \"alternative\" \"5,6,7,8\")\n-       (const_string \"maybe_vex\")\n-       (const_string \"orig\")))\n-   (set (attr \"mode\")\n-   \t(cond [(eq_attr \"alternative\" \"9,11\")\n-\t\t  (const_string \"V4SF\")\n-\t       (eq_attr \"alternative\" \"10,12\")\n-\t\t  (const_string \"V2SF\")\n-\t       (eq_attr \"alternative\" \"5,7\")\n-\t\t  (cond [(match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n-\t\t\t   (const_string \"V4SF\")\n-\t\t\t (match_test \"TARGET_AVX\")\n-\t\t\t   (const_string \"TI\")\n-\t\t\t (match_test \"optimize_function_for_size_p (cfun)\")\n-\t\t\t   (const_string \"V4SF\")\n-\t\t\t]\n-\t\t\t(const_string \"TI\"))\n+\t       (and (eq_attr \"alternative\" \"13,15\")\n+\t\t    (not (match_test \"TARGET_SSE2\")))\n+\t\t (const_string \"V2SF\")\n \t      ]\n \t      (const_string \"DI\")))])\n \n@@ -2186,6 +2076,7 @@\n \t\t       (const_string \"V4SF\")\n \t\t    ]\n \t\t    (const_string \"TI\"))\n+\n \t    (and (eq_attr \"alternative\" \"8,9,10,11\")\n \t         (not (match_test \"TARGET_SSE2\")))\n \t      (const_string \"SF\")\n@@ -2896,7 +2787,8 @@\n \tcase MODE_V1DF:\n \t  return \"%vmovlpd\\t{%1, %d0|%d0, %1}\";\n \tcase MODE_V2SF:\n-\t  return \"%vmovlps\\t{%1, %d0|%d0, %1}\";\n+\t  gcc_assert (!TARGET_AVX);\n+\t  return \"movlps\\t{%1, %0|%0, %1}\";\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n@@ -2994,10 +2886,9 @@\n \t\t   ]\n \t\t   (const_string \"DF\"))\n \n-\t       (eq_attr \"alternative\" \"12,16\")\n-\t\t (if_then_else (match_test \"TARGET_SSE2\")\n-\t\t   (const_string \"DF\")\n-\t\t   (const_string \"V2SF\"))\n+\t       (and (eq_attr \"alternative\" \"12,16\")\n+\t\t    (not (match_test \"TARGET_SSE2\")))\n+\t\t (const_string \"V2SF\")\n \t      ]\n \t      (const_string \"DF\")))])\n "}]}