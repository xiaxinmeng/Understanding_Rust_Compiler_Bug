{"sha": "f0414b973f9b399bd726605943fbca39dea8ef77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA0MTRiOTczZjliMzk5YmQ3MjY2MDU5NDNmYmNhMzlkZWE4ZWY3Nw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-10-28T18:48:43Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-10-28T18:48:43Z"}, "message": "Make filesystem::path work with basic_string_view (P0392R0)\n\n\t* include/experimental/bits/fs_path.h (__is_path_src)\n\t(_S_range_begin, _S_range_end): Overload to treat string_view as a\n\tSource object.\n\t(path::operator+=, path::compare): Overload for basic_string_view.\n\t* testsuite/experimental/filesystem/path/construct/string_view.cc:\n\tNew test.\n\t* testsuite/experimental/filesystem/path/construct/\n\tstring_view_cxx17.cc: New test.\n\nFrom-SVN: r241658", "tree": {"sha": "b8d8ead6210099927ae2c0ccb69e76e0c44fc424", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8d8ead6210099927ae2c0ccb69e76e0c44fc424"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0414b973f9b399bd726605943fbca39dea8ef77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0414b973f9b399bd726605943fbca39dea8ef77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0414b973f9b399bd726605943fbca39dea8ef77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0414b973f9b399bd726605943fbca39dea8ef77/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47135167124c764f351caf0f0f461e3c865e58fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47135167124c764f351caf0f0f461e3c865e58fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47135167124c764f351caf0f0f461e3c865e58fa"}], "stats": {"total": 114, "additions": 114, "deletions": 0}, "files": [{"sha": "71ef4cfa26938efbc7c65fcac652fa9a0f7e53ae", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0414b973f9b399bd726605943fbca39dea8ef77/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0414b973f9b399bd726605943fbca39dea8ef77/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f0414b973f9b399bd726605943fbca39dea8ef77", "patch": "@@ -1,5 +1,14 @@\n 2016-10-28  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/experimental/bits/fs_path.h (__is_path_src)\n+\t(_S_range_begin, _S_range_end): Overload to treat string_view as a\n+\tSource object.\n+\t(path::operator+=, path::compare): Overload for basic_string_view.\n+\t* testsuite/experimental/filesystem/path/construct/string_view.cc:\n+\tNew test.\n+\t* testsuite/experimental/filesystem/path/construct/\n+\tstring_view_cxx17.cc: New test.\n+\n \t* include/experimental/bits/fs_path.h\n \t(path::_S_convert<_Iter>(_Iter, _Iter)): Remove cv-qualifiers from\n \titerator's value_type."}, {"sha": "70a5445dfa8ce526d1d4e823f3df52dc07d7848c", "filename": "libstdc++-v3/include/experimental/bits/fs_path.h", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0414b973f9b399bd726605943fbca39dea8ef77/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0414b973f9b399bd726605943fbca39dea8ef77/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h?ref=f0414b973f9b399bd726605943fbca39dea8ef77", "patch": "@@ -44,6 +44,9 @@\n #include <bits/stl_algobase.h>\n #include <bits/quoted_string.h>\n #include <bits/locale_conv.h>\n+#if __cplusplus == 201402L\n+# include <experimental/string_view>\n+#endif\n \n #if defined(_WIN32) && !defined(__CYGWIN__)\n # define _GLIBCXX_FILESYSTEM_IS_WINDOWS 1\n@@ -61,6 +64,12 @@ inline namespace v1\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n+#if __cplusplus == 201402L\n+  using std::experimental::basic_string_view;\n+#elif __cplusplus > 201402L\n+  using std::basic_string_view;\n+#endif\n+\n   /**\n    * @ingroup filesystem\n    * @{\n@@ -87,6 +96,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       static __is_encoded_char<_CharT>\n       __is_path_src(const basic_string<_CharT, _Traits, _Alloc>&, int);\n \n+#if __cplusplus >= 201402L\n+    template<typename _CharT, typename _Traits>\n+      static __is_encoded_char<_CharT>\n+      __is_path_src(const basic_string_view<_CharT, _Traits>&, int);\n+#endif\n+\n     template<typename _Unknown>\n       static std::false_type\n       __is_path_src(const _Unknown&, ...);\n@@ -130,6 +145,18 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       _S_range_end(const basic_string<_CharT, _Traits, _Alloc>& __str)\n       { return __str.data() + __str.size(); }\n \n+#if __cplusplus >= 201402L\n+    template<typename _CharT, typename _Traits>\n+      static const _CharT*\n+      _S_range_begin(const basic_string_view<_CharT, _Traits>& __str)\n+      { return __str.data(); }\n+\n+    template<typename _CharT, typename _Traits>\n+      static const _CharT*\n+      _S_range_end(const basic_string_view<_CharT, _Traits>& __str)\n+      { return __str.data() + __str.size(); }\n+#endif\n+\n     template<typename _Tp,\n \t     typename _Iter = decltype(_S_range_begin(std::declval<_Tp>())),\n \t     typename _Val = typename std::iterator_traits<_Iter>::value_type>\n@@ -243,6 +270,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     path& operator+=(const string_type& __x);\n     path& operator+=(const value_type* __x);\n     path& operator+=(value_type __x);\n+#if __cplusplus >= 201402L\n+    path& operator+=(basic_string_view<value_type> __x);\n+#endif\n \n     template<typename _Source>\n       _Path<_Source>&\n@@ -311,6 +341,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     int compare(const path& __p) const noexcept;\n     int compare(const string_type& __s) const;\n     int compare(const value_type* __s) const;\n+#if __cplusplus >= 201402L\n+    int compare(const basic_string_view<value_type> __s) const;\n+#endif\n \n     // decomposition\n \n@@ -768,6 +801,16 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     return *this;\n   }\n \n+#if __cplusplus >= 201402L\n+  inline path&\n+  path::operator+=(basic_string_view<value_type> __x)\n+  {\n+    _M_pathname.append(__x.data(), __x.size());\n+    _M_split_cmpts();\n+    return *this;\n+  }\n+#endif\n+\n   template<typename _CharT>\n     inline path::_Path<_CharT*, _CharT*>&\n     path::operator+=(_CharT __x)\n@@ -909,6 +952,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   inline int\n   path::compare(const value_type* __s) const { return compare(path(__s)); }\n \n+#if __cplusplus >= 201402L\n+  inline int\n+  path::compare(basic_string_view<value_type> __s) const\n+  { return compare(path(__s)); }\n+#endif\n+\n   inline path\n   path::filename() const { return empty() ? path() : *--end(); }\n "}, {"sha": "13ebaaa905a13df3c97e3ecae98a9902d0c074fe", "filename": "libstdc++-v3/testsuite/experimental/filesystem/path/construct/string_view.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0414b973f9b399bd726605943fbca39dea8ef77/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fconstruct%2Fstring_view.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0414b973f9b399bd726605943fbca39dea8ef77/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fconstruct%2Fstring_view.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fconstruct%2Fstring_view.cc?ref=f0414b973f9b399bd726605943fbca39dea8ef77", "patch": "@@ -0,0 +1,56 @@\n+// { dg-options \"-lstdc++fs -std=gnu++1z\" }\n+// { dg-do run { target c++1z } }\n+// { dg-require-filesystem-ts \"\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.4.1 path constructors [path.construct]\n+\n+#include <experimental/filesystem>\n+#include <string_view>\n+#include <string>\n+#include <testsuite_fs.h>\n+\n+using std::experimental::filesystem::path;\n+using __gnu_test::compare_paths;\n+\n+void\n+test01()\n+{\n+  for (std::string s : __gnu_test::test_paths)\n+  {\n+    path p1 = s;\n+    std::string_view sv(s);\n+    path p2 = sv;\n+    compare_paths(p1, p2);\n+\n+#if _GLIBCXX_USE_WCHAR_T\n+    std::wstring ws(s.begin(), s.end());\n+    path p3 = ws;\n+    std::wstring_view wsv(ws);\n+    path p4 = wsv;\n+    compare_paths(p1, p4);\n+#endif\n+  }\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}