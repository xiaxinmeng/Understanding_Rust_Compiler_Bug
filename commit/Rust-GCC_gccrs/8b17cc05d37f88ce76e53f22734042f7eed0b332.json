{"sha": "8b17cc05d37f88ce76e53f22734042f7eed0b332", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGIxN2NjMDVkMzdmODhjZTc2ZTUzZjIyNzM0MDQyZjdlZWQwYjMzMg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-09-09T11:26:45Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-09-09T11:26:45Z"}, "message": "re PR tree-optimization/37354 (ICE: in find_func_aliases, at tree-ssa-structalias.c:3906)\n\n2008-09-09  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/37354\n\tPR middle-end/30165\n\t* gimplify.c (gimplify_conversion): Change conversions of\n\tnon-register type to VIEW_CONVERT_EXPRs.\n\t(gimplify_addr_expr): If we need to make the operand\n\taddressable make sure to use a properly initialized\n\ttemporary for that so it gets a valid gimple store.\n\n\t* g++.dg/torture/pr37354.C: New testcase.\n\nFrom-SVN: r140145", "tree": {"sha": "343871c9be1bd0b54caffbbb5f379ca0a5dc8833", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/343871c9be1bd0b54caffbbb5f379ca0a5dc8833"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b17cc05d37f88ce76e53f22734042f7eed0b332", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b17cc05d37f88ce76e53f22734042f7eed0b332", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b17cc05d37f88ce76e53f22734042f7eed0b332", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b17cc05d37f88ce76e53f22734042f7eed0b332/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1751ecd619cd564d1e1b0c203c9ae65c75c7c216", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1751ecd619cd564d1e1b0c203c9ae65c75c7c216", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1751ecd619cd564d1e1b0c203c9ae65c75c7c216"}], "stats": {"total": 69, "additions": 58, "deletions": 11}, "files": [{"sha": "bccdea9ec240de8ed11c7a2bf0f800645ea071c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b17cc05d37f88ce76e53f22734042f7eed0b332/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b17cc05d37f88ce76e53f22734042f7eed0b332/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8b17cc05d37f88ce76e53f22734042f7eed0b332", "patch": "@@ -1,3 +1,13 @@\n+2008-09-09  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/37354\n+\tPR middle-end/30165\n+\t* gimplify.c (gimplify_conversion): Change conversions of\n+\tnon-register type to VIEW_CONVERT_EXPRs.\n+\t(gimplify_addr_expr): If we need to make the operand\n+\taddressable make sure to use a properly initialized\n+\ttemporary for that so it gets a valid gimple store.\n+\n 2008-09-09  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* function.h (struct function): Add function_start_locus."}, {"sha": "55c5fb258891a0ac1dd1cdfe8e2a733d811e1b6c", "filename": "gcc/gimplify.c", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b17cc05d37f88ce76e53f22734042f7eed0b332/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b17cc05d37f88ce76e53f22734042f7eed0b332/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=8b17cc05d37f88ce76e53f22734042f7eed0b332", "patch": "@@ -1872,6 +1872,12 @@ gimplify_conversion (tree *expr_p)\n \tcanonicalize_addr_expr (expr_p);\n     }\n \n+  /* If we have a conversion to a non-register type force the\n+     use of a VIEW_CONVERT_EXPR instead.  */\n+  if (!is_gimple_reg_type (TREE_TYPE (*expr_p)))\n+    *expr_p = fold_build1 (VIEW_CONVERT_EXPR, TREE_TYPE (*expr_p),\n+\t\t\t   TREE_OPERAND (*expr_p, 0));\n+\n   return GS_OK;\n }\n \n@@ -4555,20 +4561,31 @@ gimplify_addr_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n       /* Mark the RHS addressable.  */\n       ret = gimplify_expr (&TREE_OPERAND (expr, 0), pre_p, post_p,\n \t\t\t   is_gimple_addressable, fb_either);\n-      if (ret != GS_ERROR)\n-\t{\n-\t  op0 = TREE_OPERAND (expr, 0);\n+      if (ret == GS_ERROR)\n+\tbreak;\n \n-\t  /* For various reasons, the gimplification of the expression\n-\t     may have made a new INDIRECT_REF.  */\n-\t  if (TREE_CODE (op0) == INDIRECT_REF)\n-\t    goto do_indirect_ref;\n+      /* We cannot rely on making the RHS addressable if it is\n+\t a temporary created by gimplification.  In this case create a\n+\t new temporary that is initialized by a copy (which will\n+\t become a store after we mark it addressable).\n+\t This mostly happens if the frontend passed us something that\n+\t it could not mark addressable yet, like a fortran\n+\t pass-by-reference parameter (int) floatvar.  */\n+      if (is_gimple_formal_tmp_var (TREE_OPERAND (expr, 0)))\n+\tTREE_OPERAND (expr, 0)\n+\t  = get_initialized_tmp_var (TREE_OPERAND (expr, 0), pre_p, post_p);\n \n-\t  /* Make sure TREE_CONSTANT and TREE_SIDE_EFFECTS are set properly.  */\n-\t  recompute_tree_invariant_for_addr_expr (expr);\n+      op0 = TREE_OPERAND (expr, 0);\n \n-\t  mark_addressable (TREE_OPERAND (expr, 0));\n-\t}\n+      /* For various reasons, the gimplification of the expression\n+\t may have made a new INDIRECT_REF.  */\n+      if (TREE_CODE (op0) == INDIRECT_REF)\n+\tgoto do_indirect_ref;\n+\n+      /* Make sure TREE_CONSTANT and TREE_SIDE_EFFECTS are set properly.  */\n+      recompute_tree_invariant_for_addr_expr (expr);\n+\n+      mark_addressable (TREE_OPERAND (expr, 0));\n       break;\n     }\n "}, {"sha": "5393493a65b2bdc4e4524ba17fe6ced6441a9a75", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b17cc05d37f88ce76e53f22734042f7eed0b332/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b17cc05d37f88ce76e53f22734042f7eed0b332/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8b17cc05d37f88ce76e53f22734042f7eed0b332", "patch": "@@ -1,3 +1,9 @@\n+2008-09-09  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/37354\n+\tPR middle-end/30165\n+\t* g++.dg/torture/pr37354.C: New testcase.\n+\n 2008-09-09  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* gcc.dg/always_inline.c: Place error message on function"}, {"sha": "acdf29110638d387539d3ac8bb0038edeaaeb0ae", "filename": "gcc/testsuite/g++.dg/torture/pr37354.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b17cc05d37f88ce76e53f22734042f7eed0b332/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr37354.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b17cc05d37f88ce76e53f22734042f7eed0b332/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr37354.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr37354.C?ref=8b17cc05d37f88ce76e53f22734042f7eed0b332", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+\n+class GenericClass;\n+struct AlsaDriver\n+{\n+  virtual int _read (unsigned nframes);\n+};\n+typedef void (GenericClass::*GenericMemFuncType) ();\n+GenericMemFuncType m_pFunction;\n+void AlsaDriver1 ()\n+{\n+  m_pFunction = reinterpret_cast < GenericMemFuncType > (&AlsaDriver::_read);\n+}\n+"}]}