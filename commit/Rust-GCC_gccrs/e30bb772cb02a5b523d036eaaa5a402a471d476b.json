{"sha": "e30bb772cb02a5b523d036eaaa5a402a471d476b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTMwYmI3NzJjYjAyYTViNTIzZDAzNmVhYWE1YTQwMmE0NzFkNDc2Yg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2004-07-03T13:40:47Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2004-07-03T13:40:47Z"}, "message": "langhooks-def.h (LANG_HOOKS_TYPE_MAX_SIZE): New langhook.\n\n\t* langhooks-def.h (LANG_HOOKS_TYPE_MAX_SIZE): New langhook.\n\t* langhooks.h (strct lang_hooks): New field type_max_size.\n\t* function.c (assign_temp): Call it.\n\nFrom-SVN: r84053", "tree": {"sha": "7bd88a4c0b05c32d50e4e322adfc7539f8ada941", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7bd88a4c0b05c32d50e4e322adfc7539f8ada941"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e30bb772cb02a5b523d036eaaa5a402a471d476b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e30bb772cb02a5b523d036eaaa5a402a471d476b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e30bb772cb02a5b523d036eaaa5a402a471d476b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e30bb772cb02a5b523d036eaaa5a402a471d476b/comments", "author": null, "committer": null, "parents": [{"sha": "52c27e16fdfee3fdda117195c05768e27f37cc8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52c27e16fdfee3fdda117195c05768e27f37cc8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52c27e16fdfee3fdda117195c05768e27f37cc8e"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "7a161eb53712ab6399c069b4f9e664f2ce450d64", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e30bb772cb02a5b523d036eaaa5a402a471d476b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e30bb772cb02a5b523d036eaaa5a402a471d476b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e30bb772cb02a5b523d036eaaa5a402a471d476b", "patch": "@@ -1,3 +1,9 @@\n+2004-07-03  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\t\n+\t* langhooks-def.h (LANG_HOOKS_TYPE_MAX_SIZE): New langhook.\n+\t* langhooks.h (strct lang_hooks): New field type_max_size.\n+\t* function.c (assign_temp): Call it.\n+\n 2004-07-03  Steven Bosscher  <stevenb@suse.de>\n \n \t* config/sh/sh.c (sh_use_dfa_interface): Add TARGET_SH1."}, {"sha": "c3ab96dbae3a6e83f18a0327bf39ca194a41537c", "filename": "gcc/function.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e30bb772cb02a5b523d036eaaa5a402a471d476b/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e30bb772cb02a5b523d036eaaa5a402a471d476b/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=e30bb772cb02a5b523d036eaaa5a402a471d476b", "patch": "@@ -914,6 +914,7 @@ assign_temp (tree type_or_decl, int keep, int memory_required,\n   if (mode == BLKmode || memory_required)\n     {\n       HOST_WIDE_INT size = int_size_in_bytes (type);\n+      tree size_tree;\n       rtx tmp;\n \n       /* Zero sized arrays are GNU C extension.  Set size to 1 to avoid\n@@ -930,6 +931,13 @@ assign_temp (tree type_or_decl, int keep, int memory_required,\n \t  && host_integerp (TYPE_ARRAY_MAX_SIZE (type), 1))\n \tsize = tree_low_cst (TYPE_ARRAY_MAX_SIZE (type), 1);\n \n+      /* If we still haven't been able to get a size, see if the language\n+\t can compute a maximum size.  */\n+      if (size == -1\n+\t  && (size_tree = lang_hooks.type_max_size (type)) != 0\n+\t  && host_integerp (size_tree, 1))\n+\tsize = tree_low_cst (size_tree, 1);\n+\n       /* The size of the temporary may be too large to fit into an integer.  */\n       /* ??? Not sure this should happen except for user silliness, so limit\n \t this to things that aren't compiler-generated temporaries.  The"}, {"sha": "2cbd3fd2d1442b724e067699bf57409baae69529", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e30bb772cb02a5b523d036eaaa5a402a471d476b/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e30bb772cb02a5b523d036eaaa5a402a471d476b/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=e30bb772cb02a5b523d036eaaa5a402a471d476b", "patch": "@@ -127,6 +127,7 @@ extern int lhd_gimplify_expr (tree *, tree *, tree *);\n #define LANG_HOOKS_DECL_PRINTABLE_NAME\tlhd_decl_printable_name\n #define LANG_HOOKS_GET_CALLEE_FNDECL\tlhd_return_null_tree\n #define LANG_HOOKS_EXPR_SIZE\t\tlhd_expr_size\n+#define LANG_HOOKS_TYPE_MAX_SIZE\tlhd_return_null_tree\n #define LANG_HOOKS_TREE_SIZE\t\tlhd_tree_size\n #define LANG_HOOKS_TYPES_COMPATIBLE_P\tlhd_types_compatible_p\n #define LANG_HOOKS_UPDATE_DECL_AFTER_SAVING NULL\n@@ -305,6 +306,7 @@ extern tree lhd_make_node (enum tree_code);\n   LANG_HOOKS_GET_CALLEE_FNDECL, \\\n   LANG_HOOKS_PRINT_ERROR_FUNCTION, \\\n   LANG_HOOKS_EXPR_SIZE, \\\n+  LANG_HOOKS_TYPE_MAX_SIZE, \\\n   LANG_HOOKS_UPDATE_DECL_AFTER_SAVING, \\\n   LANG_HOOKS_ATTRIBUTE_TABLE, \\\n   LANG_HOOKS_COMMON_ATTRIBUTE_TABLE, \\"}, {"sha": "6f526ef898d5caa8c0cfcc42ac9c6acdca5b0ef0", "filename": "gcc/langhooks.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e30bb772cb02a5b523d036eaaa5a402a471d476b/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e30bb772cb02a5b523d036eaaa5a402a471d476b/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=e30bb772cb02a5b523d036eaaa5a402a471d476b", "patch": "@@ -390,6 +390,10 @@ struct lang_hooks\n      semantics in cases that it doesn't want to handle specially.  */\n   tree (*expr_size) (tree);\n \n+  /* Called from assign_temp to return the maximum size, if there is one,\n+     for a type.  */\n+  tree (*type_max_size) PARAMS ((tree));\n+\n   /* Update lang specific fields after duplicating function body.  */\n   void (*update_decl_after_saving) (tree, void *);\n "}]}