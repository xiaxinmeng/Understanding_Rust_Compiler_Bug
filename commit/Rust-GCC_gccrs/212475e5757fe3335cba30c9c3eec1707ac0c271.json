{"sha": "212475e5757fe3335cba30c9c3eec1707ac0c271", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjEyNDc1ZTU3NTdmZTMzMzVjYmEzMGM5YzNlZWMxNzA3YWMwYzI3MQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2020-06-27T05:40:48Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2020-06-27T05:40:48Z"}, "message": "Add PowerPC tests for power10.\n\n2020-06-27  Michael Meissner  <meissner@linux.ibm.com>\n\n\t* gcc.target/powerpc/prefix-add.c: New test.\n\t* gcc.target/powerpc/prefix-si-constant.c: New test.\n\t* gcc.target/powerpc/prefix-di-constant.c: New test.\n\t* gcc.target/powerpc/prefix-ds-dq.c: New test.\n\t* gcc.target/powerpc/prefix-no-update.c: New test.\n\t* gcc.target/powerpc/prefix-large-dd.c: New test.\n\t* gcc.target/powerpc/prefix-large-df.c: New test.\n\t* gcc.target/powerpc/prefix-large-di.c: New test.\n\t* gcc.target/powerpc/prefix-large-hi.c: New test.\n\t* gcc.target/powerpc/prefix-large-kf.c: New test.\n\t* gcc.target/powerpc/prefix-large-qi.c: New test.\n\t* gcc.target/powerpc/prefix-large-sd.c: New test.\n\t* gcc.target/powerpc/prefix-large-sf.c: New test.\n\t* gcc.target/powerpc/prefix-large-si.c: New test.\n\t* gcc.target/powerpc/prefix-large-udi.c: New test.\n\t* gcc.target/powerpc/prefix-large-uhi.c: New test.\n\t* gcc.target/powerpc/prefix-large-uqi.c: New test.\n\t* gcc.target/powerpc/prefix-large-usi.c: New test.\n\t* gcc.target/powerpc/prefix-large-v2df.c: New test.\n\t* gcc.target/powerpc/prefix-large.h: Include file for new tests.\n\t* gcc.target/powerpc/prefix-pcrel-dd.c: New test.\n\t* gcc.target/powerpc/prefix-pcrel-df.c: New test.\n\t* gcc.target/powerpc/prefix-pcrel-di.c: New test.\n\t* gcc.target/powerpc/prefix-pcrel-hi.c: New test.\n\t* gcc.target/powerpc/prefix-pcrel-kf.c: New test.\n\t* gcc.target/powerpc/prefix-pcrel-qi.c: New test.\n\t* gcc.target/powerpc/prefix-pcrel-sd.c: New test.\n\t* gcc.target/powerpc/prefix-pcrel-sf.c: New test.\n\t* gcc.target/powerpc/prefix-pcrel-si.c: New test.\n\t* gcc.target/powerpc/prefix-pcrel-udi.c: New test.\n\t* gcc.target/powerpc/prefix-pcrel-uhi.c: New test.\n\t* gcc.target/powerpc/prefix-pcrel-uqi.c: New test.\n\t* gcc.target/powerpc/prefix-pcrel-usi.c: New test.\n\t* gcc.target/powerpc/prefix-pcrel-v2df.c: New test.\n\t* gcc.target/powerpc/prefix-pcrel.h: Include file for new tests.\n\t* gcc.target/powerpc/prefix-stack-protect.c: New test.", "tree": {"sha": "b7190484181a1ce1a801511ecd3778e7e9269540", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7190484181a1ce1a801511ecd3778e7e9269540"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/212475e5757fe3335cba30c9c3eec1707ac0c271", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/212475e5757fe3335cba30c9c3eec1707ac0c271", "html_url": "https://github.com/Rust-GCC/gccrs/commit/212475e5757fe3335cba30c9c3eec1707ac0c271", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/212475e5757fe3335cba30c9c3eec1707ac0c271/comments", "author": null, "committer": null, "parents": [{"sha": "c9c05f7323f2d92252c46aea042a2c2d5b11a4dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9c05f7323f2d92252c46aea042a2c2d5b11a4dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9c05f7323f2d92252c46aea042a2c2d5b11a4dd"}], "stats": {"total": 729, "additions": 729, "deletions": 0}, "files": [{"sha": "0027406e4579dc095dc1e1cac3358aefe20bdcd7", "filename": "gcc/testsuite/gcc.target/powerpc/prefix-add.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-add.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-add.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-add.c?ref=212475e5757fe3335cba30c9c3eec1707ac0c271", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_prefixed_addr } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power10\" } */\n+\n+/* Test that PADDI is generated to add a large constant.  */\n+unsigned long\n+add (unsigned long a)\n+{\n+  return a + 0x12345U;\n+}\n+\n+/* { dg-final { scan-assembler     {\\mpaddi\\M} } } */\n+/* { dg-final { scan-assembler-not {\\maddi\\M}  } } */\n+/* { dg-final { scan-assembler-not {\\maddis\\M} } } */"}, {"sha": "aca7897cd9207050cfcf3c4374abc7623f476624", "filename": "gcc/testsuite/gcc.target/powerpc/prefix-di-constant.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-di-constant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-di-constant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-di-constant.c?ref=212475e5757fe3335cba30c9c3eec1707ac0c271", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_prefixed_addr } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power10\" } */\n+\n+/* Test that PLI (PADDI) is generated to load a large constant.  */\n+unsigned long long\n+large (void)\n+{\n+  return 0x12345678ULL;\n+}\n+\n+/* { dg-final { scan-assembler {\\mpli\\M} } } */"}, {"sha": "554cd0c1beac08c51ad65fb75a29f1300ec25b00", "filename": "gcc/testsuite/gcc.target/powerpc/prefix-ds-dq.c", "status": "added", "additions": 161, "deletions": 0, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-ds-dq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-ds-dq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-ds-dq.c?ref=212475e5757fe3335cba30c9c3eec1707ac0c271", "patch": "@@ -0,0 +1,161 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_prefixed_addr } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power10\" } */\n+\n+/* Tests whether we generate a prefixed load/store operation for addresses that\n+   don't meet DS/DQ offset constraints.  64-bit is needed for testing the use\n+   of the PLWA instruciton.  */\n+\n+struct packed_struct\n+{\n+  long long pad;\t\t\t/* offset  0 bytes.  */\n+  unsigned char pad_uc;\t\t\t/* offset  8 bytes.  */\n+  unsigned char uc;\t\t\t/* offset  9 bytes.  */\n+\n+  unsigned char pad_sc[sizeof (long long) - sizeof (unsigned char)];\n+  unsigned char sc;\t\t\t/* offset  17 bytes.  */\n+\n+  unsigned char pad_us[sizeof (long long) - sizeof (signed char)];\n+  unsigned short us;\t\t\t/* offset  25 bytes.  */\n+\n+  unsigned char pad_ss[sizeof (long long) - sizeof (unsigned short)];\n+  short ss;\t\t\t\t/* offset 33 bytes.  */\n+\n+  unsigned char pad_ui[sizeof (long long) - sizeof (short)];\n+  unsigned int ui;\t\t\t/* offset 41 bytes.  */\n+\n+  unsigned char pad_si[sizeof (long long) - sizeof (unsigned int)];\n+  unsigned int si;\t\t\t/* offset 49 bytes.  */\n+\n+  unsigned char pad_f[sizeof (long long) - sizeof (int)];\n+  float f;\t\t\t\t/* offset 57 bytes.  */\n+\n+  unsigned char pad_d[sizeof (long long) - sizeof (float)];\n+  double d;\t\t\t\t/* offset 65 bytes.  */\n+  __float128 f128;\t\t\t/* offset 73 bytes.  */\n+} __attribute__((packed));\n+\n+unsigned char\n+load_uc (struct packed_struct *p)\n+{\n+  return p->uc;\t\t\t\t/* LBZ 3,9(3).  */\n+}\n+\n+signed char\n+load_sc (struct packed_struct *p)\n+{\n+  return p->sc;\t\t\t\t/* LBZ 3,17(3) + EXTSB 3,3.  */\n+}\n+\n+unsigned short\n+load_us (struct packed_struct *p)\n+{\n+  return p->us;\t\t\t\t/* LHZ 3,25(3).  */\n+}\n+\n+short\n+load_ss (struct packed_struct *p)\n+{\n+  return p->ss;\t\t\t\t/* LHA 3,33(3).  */\n+}\n+\n+unsigned int\n+load_ui (struct packed_struct *p)\n+{\n+  return p->ui;\t\t\t\t/* LWZ 3,41(3).  */\n+}\n+\n+int\n+load_si (struct packed_struct *p)\n+{\n+  return p->si;\t\t\t\t/* PLWA 3,49(3).  */\n+}\n+\n+float\n+load_float (struct packed_struct *p)\n+{\n+  return p->f;\t\t\t\t/* LFS 1,57(3).  */\n+}\n+\n+double\n+load_double (struct packed_struct *p)\n+{\n+  return p->d;\t\t\t\t/* LFD 1,65(3).  */\n+}\n+\n+__float128\n+load_float128 (struct packed_struct *p)\n+{\n+  return p->f128;\t\t\t/* PLXV 34,73(3).  */\n+}\n+\n+void\n+store_uc (struct packed_struct *p, unsigned char uc)\n+{\n+  p->uc = uc;\t\t\t\t/* STB 4,9(3).  */\n+}\n+\n+void\n+store_sc (struct packed_struct *p, signed char sc)\n+{\n+  p->sc = sc;\t\t\t\t/* STB 4,17(3).  */\n+}\n+\n+void\n+store_us (struct packed_struct *p, unsigned short us)\n+{\n+  p->us = us;\t\t\t\t/* STH 4,25(3).  */\n+}\n+\n+void\n+store_ss (struct packed_struct *p, signed short ss)\n+{\n+  p->ss = ss;\t\t\t\t/* STH 4,33(3).  */\n+}\n+\n+void\n+store_ui (struct packed_struct *p, unsigned int ui)\n+{\n+  p->ui = ui;\t\t\t\t/* STW 4,41(3).  */\n+}\n+\n+void\n+store_si (struct packed_struct *p, signed int si)\n+{\n+  p->si = si;\t\t\t\t/* STW 4,49(3).  */\n+}\n+\n+void\n+store_float (struct packed_struct *p, float f)\n+{\n+  p->f = f;\t\t\t\t/* STFS 1,57(3).  */\n+}\n+\n+void\n+store_double (struct packed_struct *p, double d)\n+{\n+  p->d = d;\t\t\t\t/* STFD 1,65(3).  */\n+}\n+\n+void\n+store_float128 (struct packed_struct *p, __float128 f128)\n+{\n+  p->f128 = f128;\t\t\t/* PSTXV 34,1(3).  */\n+}\n+\n+/* { dg-final { scan-assembler-times {\\mextsb\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mlbz\\M}   2 } } */\n+/* { dg-final { scan-assembler-times {\\mlfd\\M}   1 } } */\n+/* { dg-final { scan-assembler-times {\\mlfs\\M}   1 } } */\n+/* { dg-final { scan-assembler-times {\\mlha\\M}   1 } } */\n+/* { dg-final { scan-assembler-times {\\mlhz\\M}   1 } } */\n+/* { dg-final { scan-assembler-times {\\mlwz\\M}   1 } } */\n+/* { dg-final { scan-assembler-times {\\mplwa\\M}  1 } } */\n+/* { dg-final { scan-assembler-times {\\mplxv\\M}  1 } } */\n+/* { dg-final { scan-assembler-times {\\mpstxv\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mstb\\M}   2 } } */\n+/* { dg-final { scan-assembler-times {\\mstfd\\M}  1 } } */\n+/* { dg-final { scan-assembler-times {\\mstfs\\M}  1 } } */\n+/* { dg-final { scan-assembler-times {\\msth\\M}   2 } } */\n+/* { dg-final { scan-assembler-times {\\mstw\\M}   2 } } */"}, {"sha": "d3a35977de82aaea9d2c2087db65d5aedf8f19c8", "filename": "gcc/testsuite/gcc.target/powerpc/prefix-large-dd.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-large-dd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-large-dd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-large-dd.c?ref=212475e5757fe3335cba30c9c3eec1707ac0c271", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_prefixed_addr } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power10\" } */\n+\n+/* Tests whether prefixed instructions with large numeric offsets are generated\n+   for the _Decimal64 type.  */\n+\n+#define TYPE _Decimal64\n+\n+#include \"prefix-large.h\"\n+\n+/* { dg-final { scan-assembler-times {\\mplfd\\M}  2 } } */\n+/* { dg-final { scan-assembler-times {\\mpstfd\\M} 2 } } */"}, {"sha": "49a049b777a814669e617928d3b8e631332e4f11", "filename": "gcc/testsuite/gcc.target/powerpc/prefix-large-df.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-large-df.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-large-df.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-large-df.c?ref=212475e5757fe3335cba30c9c3eec1707ac0c271", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_prefixed_addr } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power10\" } */\n+\n+/* Tests whether prefixed instructions with large numeric offsets are generated\n+   for the double type.  */\n+\n+#define TYPE double\n+\n+#include \"prefix-large.h\"\n+\n+/* { dg-final { scan-assembler-times {\\mplfd\\M}  2 } } */\n+/* { dg-final { scan-assembler-times {\\mpstfd\\M} 2 } } */"}, {"sha": "399f6967ed90da983143c089a10f239683f886a1", "filename": "gcc/testsuite/gcc.target/powerpc/prefix-large-di.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-large-di.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-large-di.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-large-di.c?ref=212475e5757fe3335cba30c9c3eec1707ac0c271", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_prefixed_addr } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power10\" } */\n+\n+/* Tests whether prefixed instructions with large numeric offsets are generated\n+   for the long long type.  */\n+\n+#define TYPE long long\n+\n+#include \"prefix-large.h\"\n+\n+/* { dg-final { scan-assembler-times {\\mpld\\M}  2 } } */\n+/* { dg-final { scan-assembler-times {\\mpstd\\M} 2 } } */"}, {"sha": "18380cac49b4a1c0eb7447ad0330d86b194a0ac2", "filename": "gcc/testsuite/gcc.target/powerpc/prefix-large-hi.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-large-hi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-large-hi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-large-hi.c?ref=212475e5757fe3335cba30c9c3eec1707ac0c271", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_prefixed_addr } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power10\" } */\n+\n+/* Tests whether prefixed instructions with large numeric offsets are generated\n+   for the short type.  */\n+\n+#define TYPE short\n+\n+#include \"prefix-large.h\"\n+\n+/* { dg-final { scan-assembler-times {\\mplh[az]\\M}  2 } } */\n+/* { dg-final { scan-assembler-times {\\mpsth\\M}     2 } } */"}, {"sha": "a6038bd86acf854d4e05e18e15f21c6463b0b141", "filename": "gcc/testsuite/gcc.target/powerpc/prefix-large-kf.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-large-kf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-large-kf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-large-kf.c?ref=212475e5757fe3335cba30c9c3eec1707ac0c271", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_prefixed_addr } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power10\" } */\n+\n+/* Tests whether prefixed instructions with large numeric offsets are generated\n+   for the _Float128 type.  */\n+\n+#define TYPE _Float128\n+\n+#include \"prefix-large.h\"\n+\n+/* { dg-final { scan-assembler-times {\\mplxv\\M}  2 } } */\n+/* { dg-final { scan-assembler-times {\\mpstxv\\M} 2 } } */"}, {"sha": "24cdac16e9968f7a60039aeb3aa44815e1e28ef6", "filename": "gcc/testsuite/gcc.target/powerpc/prefix-large-qi.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-large-qi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-large-qi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-large-qi.c?ref=212475e5757fe3335cba30c9c3eec1707ac0c271", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_prefixed_addr } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power10\" } */\n+\n+/* Tests whether prefixed instructions with large numeric offsets are generated\n+   for the signed char type.  */\n+\n+#define TYPE signed char\n+\n+#include \"prefix-large.h\"\n+\n+/* { dg-final { scan-assembler-times {\\mplbz\\M}  2 } } */\n+/* { dg-final { scan-assembler-times {\\mpstb\\M}  2 } } */"}, {"sha": "beb2d9f62b02eee020674fe288ca2a36b979924a", "filename": "gcc/testsuite/gcc.target/powerpc/prefix-large-sd.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-large-sd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-large-sd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-large-sd.c?ref=212475e5757fe3335cba30c9c3eec1707ac0c271", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_prefixed_addr } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power10\" } */\n+\n+/* Tests whether prefixed instructions with large numeric offsets are generated\n+   for the _Decimal32 type.  Note, the _Decimal32 type will not generate any\n+   prefixed load or stores, because there is no prefixed load/store instruction\n+   to load up a vector register as a zero extended 32-bit integer.  So we count\n+   the number of load addresses that are generated.  */\n+\n+#define TYPE _Decimal32\n+\n+#include \"prefix-large.h\"\n+\n+/* { dg-final { scan-assembler-times {\\mpli\\M}    3 } } */\n+/* { dg-final { scan-assembler-times {\\mlfiwzx\\M} 2 } } */\n+/* { dg-final { scan-assembler-times {\\mstfiwx\\M} 2 } } */\n+\n+"}, {"sha": "9fde1f0a7a6d50838d82bc89d21577cd93fdcc22", "filename": "gcc/testsuite/gcc.target/powerpc/prefix-large-sf.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-large-sf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-large-sf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-large-sf.c?ref=212475e5757fe3335cba30c9c3eec1707ac0c271", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_prefixed_addr } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power10\" } */\n+\n+/* Tests whether prefixed instructions with large numeric offsets are generated\n+   for the float type.  */\n+\n+#define TYPE float\n+\n+#include \"prefix-large.h\"\n+\n+/* { dg-final { scan-assembler-times {\\mplfs\\M}  2 } } */\n+/* { dg-final { scan-assembler-times {\\mpstfs\\M} 2 } } */"}, {"sha": "876a013a2ac2ad220e9a80f3c15941d6e5c3cfc7", "filename": "gcc/testsuite/gcc.target/powerpc/prefix-large-si.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-large-si.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-large-si.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-large-si.c?ref=212475e5757fe3335cba30c9c3eec1707ac0c271", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_prefixed_addr } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power10\" } */\n+\n+/* Tests whether prefixed instructions with large numeric offsets are generated\n+   for the _Decimal64 type.  */\n+\n+#define TYPE int\n+\n+#include \"prefix-large.h\"\n+\n+/* { dg-final { scan-assembler-times {\\mplw[az]\\M}  2 } } */\n+/* { dg-final { scan-assembler-times {\\mpstw\\M}     2 } } */"}, {"sha": "e6365d37d0cf78f570b0de396f6196b8412fa1c6", "filename": "gcc/testsuite/gcc.target/powerpc/prefix-large-udi.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-large-udi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-large-udi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-large-udi.c?ref=212475e5757fe3335cba30c9c3eec1707ac0c271", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_prefixed_addr } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power10\" } */\n+\n+/* Tests whether prefixed instructions with large numeric offsets are generated\n+   for the unsigned long long type.  */\n+\n+#define TYPE unsigned long long\n+\n+#include \"prefix-large.h\"\n+\n+/* { dg-final { scan-assembler-times {\\mpld\\M}  2 } } */\n+/* { dg-final { scan-assembler-times {\\mpstd\\M} 2 } } */"}, {"sha": "3523767a6f0e4c8e4d493e91a303212775edc130", "filename": "gcc/testsuite/gcc.target/powerpc/prefix-large-uhi.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-large-uhi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-large-uhi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-large-uhi.c?ref=212475e5757fe3335cba30c9c3eec1707ac0c271", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_prefixed_addr } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power10\" } */\n+\n+/* Tests whether prefixed instructions with large numeric offsets are generated\n+   for the unsigned short type.  */\n+\n+#define TYPE unsigned short\n+\n+#include \"prefix-large.h\"\n+\n+/* { dg-final { scan-assembler-times {\\mplhz\\M}  2 } } */\n+/* { dg-final { scan-assembler-times {\\mpsth\\M}  2 } } */"}, {"sha": "f251c4a12c2858bf55c5ea49613cf2892da7920f", "filename": "gcc/testsuite/gcc.target/powerpc/prefix-large-uqi.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-large-uqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-large-uqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-large-uqi.c?ref=212475e5757fe3335cba30c9c3eec1707ac0c271", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_prefixed_addr } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power10\" } */\n+\n+/* Tests whether prefixed instructions with large numeric offsets are generated\n+   for the unsigned char type.  */\n+\n+#define TYPE unsigned char\n+\n+#include \"prefix-large.h\"\n+\n+/* { dg-final { scan-assembler-times {\\mplbz\\M}  2 } } */\n+/* { dg-final { scan-assembler-times {\\mpstb\\M}  2 } } */"}, {"sha": "d60036da02673f6add0086717876c9326943740e", "filename": "gcc/testsuite/gcc.target/powerpc/prefix-large-usi.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-large-usi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-large-usi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-large-usi.c?ref=212475e5757fe3335cba30c9c3eec1707ac0c271", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_prefixed_addr } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power10\" } */\n+\n+/* Tests whether prefixed instructions with large numeric offsets are generated\n+   for the unsigned int type.  */\n+\n+#define TYPE unsigned int\n+\n+#include \"prefix-large.h\"\n+\n+/* { dg-final { scan-assembler-times {\\mplwz\\M}  2 } } */\n+/* { dg-final { scan-assembler-times {\\mpstw\\M}  2 } } */"}, {"sha": "f6d042f098406f223eac32f1e8fb21067eac70f9", "filename": "gcc/testsuite/gcc.target/powerpc/prefix-large-v2df.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-large-v2df.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-large-v2df.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-large-v2df.c?ref=212475e5757fe3335cba30c9c3eec1707ac0c271", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_prefixed_addr } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power10\" } */\n+\n+/* Tests whether prefixed instructions with large numeric offsets are generated\n+   for the vector double type.  */\n+\n+#define TYPE vector double\n+\n+#include \"prefix-large.h\"\n+\n+/* { dg-final { scan-assembler-times {\\mplxv\\M}  2 } } */\n+/* { dg-final { scan-assembler-times {\\mpstxv\\M} 2 } } */"}, {"sha": "07b38ae08752d002ae8f2e538a42c5404e53a26a", "filename": "gcc/testsuite/gcc.target/powerpc/prefix-large.h", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-large.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-large.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-large.h?ref=212475e5757fe3335cba30c9c3eec1707ac0c271", "patch": "@@ -0,0 +1,40 @@\n+/* Common tests for prefixed instructions testing whether we can generate a\n+   34-bit offset using 1 instruction.  */\n+\n+#ifndef TYPE\n+#define TYPE unsigned int\n+#endif\n+\n+#if !defined(DO_ADD) && !defined(DO_VALUE) && !defined(DO_SET)\n+#define DO_ADD\t\t1\n+#define DO_VALUE\t1\n+#define DO_SET\t\t1\n+#endif\n+\n+#ifndef CONSTANT\n+#define CONSTANT\t0x12480UL\n+#endif\n+\n+#if DO_ADD\n+void\n+add (TYPE *p, TYPE a)\n+{\n+  p[CONSTANT] += a;\n+}\n+#endif\n+\n+#if DO_VALUE\n+TYPE\n+value (TYPE *p)\n+{\n+  return p[CONSTANT];\n+}\n+#endif\n+\n+#if DO_SET\n+void\n+set (TYPE *p, TYPE a)\n+{\n+  p[CONSTANT] = a;\n+}\n+#endif"}, {"sha": "837fcd77c0b06af551b0479de7850e3f0e1ec7dc", "filename": "gcc/testsuite/gcc.target/powerpc/prefix-no-update.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-no-update.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-no-update.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-no-update.c?ref=212475e5757fe3335cba30c9c3eec1707ac0c271", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_prefixed_addr } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power10\" } */\n+\n+/* Make sure that we don't generate a prefixed form of the load and store with\n+   update instructions (i.e. instead of generating LWZU we have to generate\n+   PLWZ plus a PADDI).  */\n+\n+#ifndef SIZE\n+#define SIZE 50000\n+#endif\n+\n+struct foo {\n+  unsigned int field;\n+  char pad[SIZE];\n+};\n+\n+struct foo *inc_load (struct foo *p, unsigned int *q)\n+{\n+  *q = (++p)->field;\t/* PLWZ, PADDI, STW.  */\n+  return p;\n+}\n+\n+struct foo *dec_load (struct foo *p, unsigned int *q)\n+{\n+  *q = (--p)->field;\t/* PLWZ, PADDI, STW.  */\n+  return p;\n+}\n+\n+struct foo *inc_store (struct foo *p, unsigned int *q)\n+{\n+  (++p)->field = *q;\t/* LWZ, PADDI, PSTW.  */\n+  return p;\n+}\n+\n+struct foo *dec_store (struct foo *p, unsigned int *q)\n+{\n+  (--p)->field = *q;\t/* LWZ, PADDI, PSTW.  */\n+  return p;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\mlwz\\M}    2 } } */\n+/* { dg-final { scan-assembler-times {\\mstw\\M}    2 } } */\n+/* { dg-final { scan-assembler-times {\\mpaddi\\M}  4 } } */\n+/* { dg-final { scan-assembler-times {\\mplwz\\M}   2 } } */\n+/* { dg-final { scan-assembler-times {\\mpstw\\M}   2 } } */\n+/* { dg-final { scan-assembler-not   {\\mplwzu\\M}    } } */\n+/* { dg-final { scan-assembler-not   {\\mpstwu\\M}    } } */\n+/* { dg-final { scan-assembler-not   {\\maddis\\M}    } } */\n+/* { dg-final { scan-assembler-not   {\\maddi\\M}     } } */"}, {"sha": "165aa2f9aa015b53693a5bd99b47bb89a89dbf08", "filename": "gcc/testsuite/gcc.target/powerpc/prefix-pcrel-dd.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-pcrel-dd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-pcrel-dd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-pcrel-dd.c?ref=212475e5757fe3335cba30c9c3eec1707ac0c271", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_pcrel } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power10\" } */\n+\n+/* Tests whether pc-relative prefixed instructions are generated for the\n+   _Decimal64 type.  */\n+\n+#define TYPE _Decimal64\n+\n+#include \"prefix-pcrel.h\"\n+\n+/* { dg-final { scan-assembler-times {\\mplfd\\M}  2 } } */\n+/* { dg-final { scan-assembler-times {\\mpstfd\\M} 2 } } */"}, {"sha": "b7fd84e7de282536c2137d8096552a34841fd17c", "filename": "gcc/testsuite/gcc.target/powerpc/prefix-pcrel-df.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-pcrel-df.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-pcrel-df.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-pcrel-df.c?ref=212475e5757fe3335cba30c9c3eec1707ac0c271", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_pcrel } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power10\" } */\n+\n+/* Tests whether pc-relative prefixed instructions are generated for the\n+   double type.  */\n+\n+#define TYPE double\n+\n+#include \"prefix-pcrel.h\"\n+\n+/* { dg-final { scan-assembler-times {\\mplfd\\M}  2 } } */\n+/* { dg-final { scan-assembler-times {\\mpstfd\\M} 2 } } */"}, {"sha": "90081e452a280f186951852d433a11ad86e617b3", "filename": "gcc/testsuite/gcc.target/powerpc/prefix-pcrel-di.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-pcrel-di.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-pcrel-di.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-pcrel-di.c?ref=212475e5757fe3335cba30c9c3eec1707ac0c271", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_pcrel } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power10\" } */\n+\n+/* Tests whether pc-relative prefixed instructions are generated for the\n+   long long type.  */\n+\n+#define TYPE long long\n+\n+#include \"prefix-pcrel.h\"\n+\n+/* { dg-final { scan-assembler-times {\\mpld\\M}  2 } } */\n+/* { dg-final { scan-assembler-times {\\mpstd\\M} 2 } } */"}, {"sha": "71357b7d1499b044058a7f92d92712065b00af53", "filename": "gcc/testsuite/gcc.target/powerpc/prefix-pcrel-hi.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-pcrel-hi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-pcrel-hi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-pcrel-hi.c?ref=212475e5757fe3335cba30c9c3eec1707ac0c271", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_pcrel } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power10\" } */\n+\n+/* Tests whether pc-relative prefixed instructions are generated for the\n+   short type.  */\n+\n+#define TYPE short\n+\n+#include \"prefix-pcrel.h\"\n+\n+/* { dg-final { scan-assembler-times {\\mplh[az]\\M}  2 } } */\n+/* { dg-final { scan-assembler-times {\\mpsth\\M}     2 } } */"}, {"sha": "94bcbdc67d920b91d757659a7f6ce53fe80fe9e1", "filename": "gcc/testsuite/gcc.target/powerpc/prefix-pcrel-kf.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-pcrel-kf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-pcrel-kf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-pcrel-kf.c?ref=212475e5757fe3335cba30c9c3eec1707ac0c271", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_pcrel } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power10\" } */\n+\n+/* Tests whether pc-relative prefixed instructions are generated for the\n+   _Float128 type.  */\n+\n+#define TYPE _Float128\n+\n+#include \"prefix-pcrel.h\"\n+\n+/* { dg-final { scan-assembler-times {\\mplxv\\M}  2 } } */\n+/* { dg-final { scan-assembler-times {\\mpstxv\\M} 2 } } */"}, {"sha": "472360c08f647e681a7aa22174795c8f35d1a0aa", "filename": "gcc/testsuite/gcc.target/powerpc/prefix-pcrel-qi.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-pcrel-qi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-pcrel-qi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-pcrel-qi.c?ref=212475e5757fe3335cba30c9c3eec1707ac0c271", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_pcrel } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power10\" } */\n+\n+/* Tests whether pc-relative prefixed instructions are generated for the\n+   signed char type.  */\n+\n+#define TYPE signed char\n+\n+#include \"prefix-pcrel.h\"\n+\n+/* { dg-final { scan-assembler-times {\\mplbz\\M}  2 } } */\n+/* { dg-final { scan-assembler-times {\\mpstb\\M}  2 } } */"}, {"sha": "94c076d3ed6de6cc0f8910a93694512add851b4a", "filename": "gcc/testsuite/gcc.target/powerpc/prefix-pcrel-sd.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-pcrel-sd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-pcrel-sd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-pcrel-sd.c?ref=212475e5757fe3335cba30c9c3eec1707ac0c271", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_pcrel } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power10\" } */\n+\n+/* Tests whether pc-relative prefixed instructions are generated for the\n+   _Decimal32 type.  Note, the _Decimal32 type will not generate any prefixed\n+   load or stores, because there is no prefixed load/store instruction to load\n+   up a vector register as a zero extended 32-bit integer.  So we count the\n+   number of load addresses that are generated.  */\n+\n+#define TYPE _Decimal32\n+\n+#include \"prefix-pcrel.h\"\n+\n+/* { dg-final { scan-assembler-times {\\mpla\\M}  3 } } */"}, {"sha": "0e907e07d0076c86aa23697b91d849d68bfb5cba", "filename": "gcc/testsuite/gcc.target/powerpc/prefix-pcrel-sf.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-pcrel-sf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-pcrel-sf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-pcrel-sf.c?ref=212475e5757fe3335cba30c9c3eec1707ac0c271", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_pcrel } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power10\" } */\n+\n+/* Tests whether pc-relative prefixed instructions are generated for the\n+   float type.  */\n+\n+#define TYPE float\n+\n+#include \"prefix-pcrel.h\"\n+\n+/* { dg-final { scan-assembler-times {\\mplfs\\M}  2 } } */\n+/* { dg-final { scan-assembler-times {\\mpstfs\\M} 2 } } */"}, {"sha": "fb90fcd878f2c2d74a6a6a8e6af1bab4009e4203", "filename": "gcc/testsuite/gcc.target/powerpc/prefix-pcrel-si.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-pcrel-si.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-pcrel-si.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-pcrel-si.c?ref=212475e5757fe3335cba30c9c3eec1707ac0c271", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_pcrel } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power10\" } */\n+\n+/* Tests whether pc-relative prefixed instructions are generated for the\n+   int type.  */\n+\n+#define TYPE int\n+\n+#include \"prefix-pcrel.h\"\n+\n+/* { dg-final { scan-assembler-times {\\mplw[az]\\M}  2 } } */\n+/* { dg-final { scan-assembler-times {\\mpstw\\M}     2 } } */"}, {"sha": "940040fc5aa970ccedc71bc1f83c9126c2035e96", "filename": "gcc/testsuite/gcc.target/powerpc/prefix-pcrel-udi.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-pcrel-udi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-pcrel-udi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-pcrel-udi.c?ref=212475e5757fe3335cba30c9c3eec1707ac0c271", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_pcrel } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power10\" } */\n+\n+/* Tests whether pc-relative prefixed instructions are generated for the\n+   unsigned long long type.  */\n+\n+#define TYPE unsigned long long\n+\n+#include \"prefix-pcrel.h\"\n+\n+/* { dg-final { scan-assembler-times {\\mpld\\M}  2 } } */\n+/* { dg-final { scan-assembler-times {\\mpstd\\M} 2 } } */"}, {"sha": "5c8d082e8318220c0e6f20119c845e10fc715e84", "filename": "gcc/testsuite/gcc.target/powerpc/prefix-pcrel-uhi.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-pcrel-uhi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-pcrel-uhi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-pcrel-uhi.c?ref=212475e5757fe3335cba30c9c3eec1707ac0c271", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_pcrel } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power10\" } */\n+\n+/* Tests whether pc-relative prefixed instructions are generated for the\n+   unsigned short type.  */\n+\n+#define TYPE unsigned short\n+\n+#include \"prefix-pcrel.h\"\n+\n+/* { dg-final { scan-assembler-times {\\mplhz\\M}  2 } } */\n+/* { dg-final { scan-assembler-times {\\mpsth\\M}  2 } } */"}, {"sha": "68999192d546ad65071b59845f9de38e8f60e44e", "filename": "gcc/testsuite/gcc.target/powerpc/prefix-pcrel-uqi.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-pcrel-uqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-pcrel-uqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-pcrel-uqi.c?ref=212475e5757fe3335cba30c9c3eec1707ac0c271", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_pcrel } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power10\" } */\n+\n+/* Tests whether pc-relative prefixed instructions are generated for the\n+   unsigned char type.  */\n+\n+#define TYPE unsigned char\n+\n+#include \"prefix-pcrel.h\"\n+\n+/* { dg-final { scan-assembler-times {\\mplbz\\M}  2 } } */\n+/* { dg-final { scan-assembler-times {\\mpstb\\M}  2 } } */"}, {"sha": "5948f8254c3e1985f74f6a5edad74c1a3631c40f", "filename": "gcc/testsuite/gcc.target/powerpc/prefix-pcrel-usi.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-pcrel-usi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-pcrel-usi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-pcrel-usi.c?ref=212475e5757fe3335cba30c9c3eec1707ac0c271", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_pcrel } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power10\" } */\n+\n+/* Tests whether pc-relative prefixed instructions are generated for the\n+   unsigned int type.  */\n+\n+#define TYPE unsigned int\n+\n+#include \"prefix-pcrel.h\"\n+\n+/* { dg-final { scan-assembler-times {\\mplwz\\M}  2 } } */\n+/* { dg-final { scan-assembler-times {\\mpstw\\M}  2 } } */"}, {"sha": "d626b8a128ebe039add1342b96ee58f3f1bbce7f", "filename": "gcc/testsuite/gcc.target/powerpc/prefix-pcrel-v2df.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-pcrel-v2df.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-pcrel-v2df.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-pcrel-v2df.c?ref=212475e5757fe3335cba30c9c3eec1707ac0c271", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_pcrel } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power10\" } */\n+\n+/* Tests whether pc-relative prefixed instructions are generated for the\n+   vector double type.  */\n+\n+#define TYPE vector double\n+\n+#include \"prefix-pcrel.h\"\n+\n+/* { dg-final { scan-assembler-times {\\mplxv\\M}  2 } } */\n+/* { dg-final { scan-assembler-times {\\mpstxv\\M} 2 } } */"}, {"sha": "26175dc7d1eb7fe17f8625eae8652dae42dda9ef", "filename": "gcc/testsuite/gcc.target/powerpc/prefix-pcrel.h", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-pcrel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-pcrel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-pcrel.h?ref=212475e5757fe3335cba30c9c3eec1707ac0c271", "patch": "@@ -0,0 +1,41 @@\n+/* Common tests for prefixed instructions testing whether pc-relative prefixed\n+   instructions are generated for each type.  */\n+\n+#ifndef TYPE\n+#define TYPE unsigned int\n+#endif\n+\n+static TYPE a;\n+\n+/* Make sure a is not optimized away.  */\n+TYPE *p = &a;\n+\n+#if !defined(DO_ADD) && !defined(DO_VALUE) && !defined(DO_SET)\n+#define DO_ADD\t\t1\n+#define DO_VALUE\t1\n+#define DO_SET\t\t1\n+#endif\n+\n+#if DO_ADD\n+void\n+add (TYPE b)\n+{\n+  a += b;\n+}\n+#endif\n+\n+#if DO_VALUE\n+TYPE\n+value (void)\n+{\n+  return a;\n+}\n+#endif\n+\n+#if DO_SET\n+void\n+set (TYPE b)\n+{\n+  a = b;\n+}\n+#endif"}, {"sha": "6403aa8024c33b014c05d011072b0e9e817e8ddc", "filename": "gcc/testsuite/gcc.target/powerpc/prefix-si-constant.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-si-constant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-si-constant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-si-constant.c?ref=212475e5757fe3335cba30c9c3eec1707ac0c271", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_prefixed_addr } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power10\" } */\n+\n+/* Test that PLI (PADDI) is generated to load a large constant for SImode.  */\n+void\n+large_si (unsigned int *p)\n+{\n+  *p = 0x12345U;\n+}\n+\n+/* { dg-final { scan-assembler {\\mpli\\M} } } */"}, {"sha": "ca3b3dfd89f7c838857c2dc28df8aa445ab62db0", "filename": "gcc/testsuite/gcc.target/powerpc/prefix-stack-protect.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-stack-protect.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212475e5757fe3335cba30c9c3eec1707ac0c271/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-stack-protect.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fprefix-stack-protect.c?ref=212475e5757fe3335cba30c9c3eec1707ac0c271", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_prefixed_addr } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power10 -fstack-protector-strong\" } */\n+\n+/* Test that we can handle large stack frames with -fstack-protector-strong and\n+   prefixed addressing.  This was originally discovered when trying to build\n+   glibc with -mcpu=power10, and vfwprintf.c failed because it used\n+   -fstack-protector-strong.  It needs 64-bit due to the size of the stack.  */\n+\n+extern long foo (char *);\n+\n+long\n+bar (void)\n+{\n+  char buffer[0x20000];\n+  return foo (buffer) + 1;\n+}\n+\n+/* { dg-final { scan-assembler {\\mpld\\M}  } } */\n+/* { dg-final { scan-assembler {\\mpstd\\M} } } */"}]}