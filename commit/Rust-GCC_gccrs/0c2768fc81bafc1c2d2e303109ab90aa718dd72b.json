{"sha": "0c2768fc81bafc1c2d2e303109ab90aa718dd72b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGMyNzY4ZmM4MWJhZmMxYzJkMmUzMDMxMDlhYjkwYWE3MThkZDcyYg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1991-12-11T00:33:02Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1991-12-11T00:33:02Z"}, "message": "Initial revision\n\nFrom-SVN: r113", "tree": {"sha": "95411506ac0eb188a9fac43fcdbac207960ce38f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95411506ac0eb188a9fac43fcdbac207960ce38f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c2768fc81bafc1c2d2e303109ab90aa718dd72b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c2768fc81bafc1c2d2e303109ab90aa718dd72b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c2768fc81bafc1c2d2e303109ab90aa718dd72b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c2768fc81bafc1c2d2e303109ab90aa718dd72b/comments", "author": null, "committer": null, "parents": [{"sha": "6ea68a57a9a89ac0bf79497a0aef92071dad4732", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ea68a57a9a89ac0bf79497a0aef92071dad4732", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ea68a57a9a89ac0bf79497a0aef92071dad4732"}], "stats": {"total": 143, "additions": 143, "deletions": 0}, "files": [{"sha": "c75929c90f66727d07305c1143140dde753f080d", "filename": "gcc/output.h", "status": "added", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c2768fc81bafc1c2d2e303109ab90aa718dd72b/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c2768fc81bafc1c2d2e303109ab90aa718dd72b/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=0c2768fc81bafc1c2d2e303109ab90aa718dd72b", "patch": "@@ -0,0 +1,143 @@\n+/* Declarations for insn-output.c.  These functions are defined in recog.c,\n+   final.c, and varasm.c.\n+   Copyright (C) 1987-1991 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+/* Output a string of assembler code, substituting insn operands.\n+   Defined in final.c.  */\n+void output_asm_insn ();\n+\n+/* Output a string of assembler code, substituting numbers, strings\n+   and fixed syntactic prefixes.  */\n+void asm_fprintf ();\n+\n+/* When outputting assembler code, indicates which alternative\n+   of the constraints was actually satisfied.  */\n+extern int which_alternative;\n+\n+/* When outputting delayed branch sequences, this rtx holds the\n+   sequence being output.  It is null when no delayed branch\n+   sequence is being output, so it can be used as a test in the\n+   insn output code.\n+\n+   This variable is defined  in final.c.  */\n+extern rtx final_sequence;\n+\n+/* Number of bytes of args popped by function being compiled on its return.\n+   Zero if no bytes are to be popped.\n+   May affect compilation of return insn or of function epilogue.  */\n+\n+extern int current_function_pops_args;\n+\n+/* Nonzero if function being compiled needs to be given an address\n+   where the value should be stored.  */\n+\n+extern int current_function_returns_struct;\n+\n+/* Nonzero if function being compiled needs to\n+   return the address of where it has put a structure value.  */\n+\n+extern int current_function_returns_pcc_struct;\n+\n+/* Nonzero if function being compiled needs to be passed a static chain.  */\n+\n+extern int current_function_needs_context;\n+\n+/* Nonzero if function being compiled can call setjmp.  */\n+\n+extern int current_function_calls_setjmp;\n+\n+/* Nonzero if function being compiled can call longjmp.  */\n+\n+extern int current_function_calls_longjmp;\n+\n+/* Nonzero if function being compiled can call alloca,\n+   either as a subroutine or builtin.  */\n+\n+extern int current_function_calls_alloca;\n+\n+/* Nonzero if function being compiled receives nonlocal gotos\n+   from nested functions.  */\n+\n+extern int current_function_has_nonlocal_label;\n+\n+/* Nonzero if function being compiled contains nested functions.  */\n+\n+extern int current_function_contains_functions;\n+\n+/* Nonzero if the current function returns a pointer type */\n+\n+extern int current_function_returns_pointer;\n+\n+/* If function's args have a fixed size, this is that size, in bytes.\n+   Otherwise, it is -1.\n+   May affect compilation of return insn or of function epilogue.  */\n+\n+extern int current_function_args_size;\n+\n+/* # bytes the prologue should push and pretend that the caller pushed them.\n+   The prologue must do this, but only if parms can be passed in registers.  */\n+\n+extern int current_function_pretend_args_size;\n+\n+/* # of bytes of outgoing arguments required to be pushed by the prologue.\n+   If this is non-zero, it means that ACCUMULATE_OUTGOING_ARGS was defined\n+   and no stack adjusts will be done on function calls.  */\n+\n+extern int current_function_outgoing_args_size;\n+\n+/* Nonzero if current function uses varargs.h or equivalent.\n+   Zero for functions that use stdarg.h.  */\n+\n+extern int current_function_varargs;\n+\n+/* Quantities of various kinds of registers\n+   used for the current function's args.  */\n+\n+extern CUMULATIVE_ARGS current_function_args_info;\n+\n+/* Name of function now being compiled.  */\n+\n+extern char *current_function_name;\n+\n+/* If non-zero, an RTL expression for that location at which the current\n+   function returns its result.  Usually equal to\n+   DECL_RTL (DECL_RESULT (current_function_decl)).  */\n+\n+extern rtx current_function_return_rtx;\n+\n+/* If some insns can be deferred to the delay slots of the epilogue, the\n+   delay list for them is recorded here.  */\n+\n+extern rtx current_function_epilogue_delay_list;\n+\n+/* This is nonzero if the current function uses pic_offset_table_rtx.  */\n+extern int current_function_uses_pic_offset_table;\n+\n+/* The line number of the beginning of the current function.\n+   sdbout.c needs this so that it can output relative linenumbers.  */\n+\n+#ifdef SDB_DEBUGGING_INFO /* Avoid undef sym in certain broken linkers.  */\n+extern int sdb_begin_function_line;\n+#endif\n+\n+/* File in which assembler code is being written.  */\n+\n+#ifdef BUFSIZ  /* The hope is that any kind of stdio.h must define BUFSIZ.  */\n+extern FILE *asm_out_file;\n+#endif"}]}