{"sha": "b255a03659c00eef213ffbeab6ce371f56e089e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI1NWEwMzY1OWMwMGVlZjIxM2ZmYmVhYjZjZTM3MWY1NmUwODllNw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-03-05T22:19:33Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-03-05T22:19:33Z"}, "message": "Makefile.in (calls.o, [...]): Depend on cgraph.h\n\n\t* Makefile.in (calls.o, toplev.o alias.o): Depend on cgraph.h\n\t* alias.c:  Include cgraph.h\n\t(mark_constant_function): Use cgraph_rtl_info.\n\t* calls.c:  Include cgraph.h\n\t(flags_from_decl_or_type): Use cgraph_rtl_info to find pure and const\n\tcalls.\n\t(expand_call): Use cgraph_rtl_info to set preferred stack boundary.\n\t* cgraph.c (cgraph_rtl_info): New function.\n\t* cgraph.h (cgraph_rtl_info): Declare\n\t(cgraph_rtl_info): Likewise.\n\t* function.h (struct function): Add recursive_call_emit.\n\t* toplev.c: Include cgraph.h.\n\t(rest_of_compilation): Set preferred_incoming_stack_boundary.\n\n\t* gcc.dg/i386-local2.c: New.\n\nFrom-SVN: r63868", "tree": {"sha": "6d8310470c10ca87b4dc63ecaa076fb112326f11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d8310470c10ca87b4dc63ecaa076fb112326f11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b255a03659c00eef213ffbeab6ce371f56e089e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b255a03659c00eef213ffbeab6ce371f56e089e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b255a03659c00eef213ffbeab6ce371f56e089e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b255a03659c00eef213ffbeab6ce371f56e089e7/comments", "author": null, "committer": null, "parents": [{"sha": "0eb933a0d0199d0c42da23f3b49880fee7d63358", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0eb933a0d0199d0c42da23f3b49880fee7d63358", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0eb933a0d0199d0c42da23f3b49880fee7d63358"}], "stats": {"total": 109, "additions": 104, "deletions": 5}, "files": [{"sha": "e3e5cb49af15e7684066a2198aecb7744b48391f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b255a03659c00eef213ffbeab6ce371f56e089e7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b255a03659c00eef213ffbeab6ce371f56e089e7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b255a03659c00eef213ffbeab6ce371f56e089e7", "patch": "@@ -1,3 +1,19 @@\n+Wed Mar  5 23:16:57 CET 2003  Jan Hubicka  <jh@suse.cz>\n+\n+\t* Makefile.in (calls.o, toplev.o alias.o): Depend on cgraph.h\n+\t* alias.c:  Include cgraph.h\n+\t(mark_constant_function): Use cgraph_rtl_info.\n+\t* calls.c:  Include cgraph.h\n+\t(flags_from_decl_or_type): Use cgraph_rtl_info to find pure and const\n+\tcalls.\n+\t(expand_call): Use cgraph_rtl_info to set preferred stack boundary.\n+\t* cgraph.c (cgraph_rtl_info): New function.\n+\t* cgraph.h (cgraph_rtl_info): Declare\n+\t(cgraph_rtl_info): Likewise.\n+\t* function.h (struct function): Add recursive_call_emit.\n+\t* toplev.c: Include cgraph.h.\n+\t(rest_of_compilation): Set preferred_incoming_stack_boundary.\n+\n 2003-03-05  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/h8300/h8300.c (output_simode_bld): Clear the"}, {"sha": "f4c3ba54e71d2c372b44f588a2f5afeb61dad774", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b255a03659c00eef213ffbeab6ce371f56e089e7/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b255a03659c00eef213ffbeab6ce371f56e089e7/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=b255a03659c00eef213ffbeab6ce371f56e089e7", "patch": "@@ -1438,7 +1438,7 @@ toplev.o : toplev.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(RTL_\n    graph.h $(LOOP_H) except.h $(REGS_H) $(TIMEVAR_H) $(lang_options_files) \\\n    ssa.h $(PARAMS_H) $(TM_P_H) reload.h dwarf2asm.h $(TARGET_H) \\\n    langhooks.h insn-flags.h options.h cfglayout.h real.h cfgloop.h \\\n-   hosthooks.h $(LANGHOOKS_DEF_H)\n+   hosthooks.h $(LANGHOOKS_DEF_H) cgraph.h\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t  -DTARGET_NAME=\\\"$(target_alias)\\\" \\\n \t  -c $(srcdir)/toplev.c $(OUTPUT_OPTION)\n@@ -1489,7 +1489,7 @@ builtins.o : builtins.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(T\n    except.h $(TM_P_H) $(PREDICT_H) libfuncs.h real.h langhooks.h\n calls.o : calls.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) flags.h \\\n    $(EXPR_H) langhooks.h $(TARGET_H) \\\n-   libfuncs.h $(REGS_H) toplev.h output.h function.h $(TIMEVAR_H) $(TM_P_H)\n+   libfuncs.h $(REGS_H) toplev.h output.h function.h $(TIMEVAR_H) $(TM_P_H) cgraph.h\n expmed.o : expmed.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n    flags.h insn-config.h $(EXPR_H) $(OPTABS_H) $(RECOG_H) real.h \\\n    toplev.h $(TM_P_H) langhooks.h\n@@ -1671,7 +1671,7 @@ reorg.o : reorg.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) condition\n alias.o : alias.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) flags.h \\\n    hard-reg-set.h $(BASIC_BLOCK_H) $(REGS_H) toplev.h output.h $(EXPR_H) \\\n    $(GGC_H) function.h cselib.h $(TREE_H) $(TM_P_H) langhooks.h $(TARGET_H) \\\n-   gt-alias.h $(TIMEVAR_H)\n+   gt-alias.h $(TIMEVAR_H) cgraph.h\n regmove.o : regmove.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) insn-config.h \\\n    $(RECOG_H) output.h $(REGS_H) hard-reg-set.h flags.h function.h \\\n    $(EXPR_H) $(BASIC_BLOCK_H) toplev.h $(TM_P_H) except.h reload.h"}, {"sha": "f1b0530b443ac7b15e5071f557b8c81a7c85d673", "filename": "gcc/alias.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b255a03659c00eef213ffbeab6ce371f56e089e7/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b255a03659c00eef213ffbeab6ce371f56e089e7/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=b255a03659c00eef213ffbeab6ce371f56e089e7", "patch": "@@ -41,6 +41,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"langhooks.h\"\n #include \"timevar.h\"\n #include \"target.h\"\n+#include \"cgraph.h\"\n \n /* The alias sets assigned to MEMs assist the back-end in determining\n    which MEMs can alias which other MEMs.  In general, two MEMs in\n@@ -2668,9 +2669,9 @@ mark_constant_function ()\n   if (insn)\n     ;\n   else if (nonlocal_memory_referenced)\n-    DECL_IS_PURE (current_function_decl) = 1;\n+    cgraph_rtl_info (current_function_decl)->pure_function = 1;\n   else\n-    TREE_READONLY (current_function_decl) = 1;\n+    cgraph_rtl_info (current_function_decl)->const_function = 1;\n }\n \f\n "}, {"sha": "509a689b0950cb4702c16d8effe063642be354fd", "filename": "gcc/calls.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b255a03659c00eef213ffbeab6ce371f56e089e7/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b255a03659c00eef213ffbeab6ce371f56e089e7/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=b255a03659c00eef213ffbeab6ce371f56e089e7", "patch": "@@ -37,6 +37,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"sbitmap.h\"\n #include \"langhooks.h\"\n #include \"target.h\"\n+#include \"cgraph.h\"\n \n /* Decide whether a function's arguments should be processed\n    from first to last or from last to first.\n@@ -798,8 +799,14 @@ flags_from_decl_or_type (exp)\n   /* ??? We can't set IS_MALLOC for function types?  */\n   if (DECL_P (exp))\n     {\n+      struct cgraph_rtl_info *i = cgraph_rtl_info (exp);\n       type = TREE_TYPE (exp);\n \n+      if (i && i->pure_function)\n+\tflags |= ECF_PURE | ECF_LIBCALL_BLOCK;\n+      if (i && i->const_function)\n+\tflags |= ECF_CONST | ECF_LIBCALL_BLOCK;\n+\n       /* The function exp may have the `malloc' attribute.  */\n       if (DECL_P (exp) && DECL_IS_MALLOC (exp))\n \tflags |= ECF_MALLOC;\n@@ -2344,6 +2351,12 @@ expand_call (exp, target, ignore)\n \n   /* Figure out the amount to which the stack should be aligned.  */\n   preferred_stack_boundary = PREFERRED_STACK_BOUNDARY;\n+  if (fndecl)\n+    {\n+      struct cgraph_rtl_info *i = cgraph_rtl_info (fndecl);\n+      if (i && i->preferred_incoming_stack_boundary)\n+\tpreferred_stack_boundary = i->preferred_incoming_stack_boundary;\n+    }\n \n   /* Operand 0 is a pointer-to-function; get the type of the function.  */\n   funtype = TREE_TYPE (addr);\n@@ -2630,6 +2643,8 @@ expand_call (exp, target, ignore)\n   if (cfun->preferred_stack_boundary < preferred_stack_boundary\n       && fndecl != current_function_decl)\n     cfun->preferred_stack_boundary = preferred_stack_boundary;\n+  if (fndecl == current_function_decl)\n+    cfun->recursive_call_emit = true;\n \n   preferred_unit_stack_boundary = preferred_stack_boundary / BITS_PER_UNIT;\n "}, {"sha": "185a97b56519780517f81a7b7926782ac86420f3", "filename": "gcc/cgraph.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b255a03659c00eef213ffbeab6ce371f56e089e7/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b255a03659c00eef213ffbeab6ce371f56e089e7/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=b255a03659c00eef213ffbeab6ce371f56e089e7", "patch": "@@ -204,6 +204,22 @@ cgraph_global_info (decl)\n   return &node->global;\n }\n \n+/* Return local info for the compiled function.  */\n+\n+struct cgraph_rtl_info *\n+cgraph_rtl_info (decl)\n+     tree decl;\n+{\n+  struct cgraph_node *node;\n+  if (TREE_CODE (decl) != FUNCTION_DECL)\n+    abort ();\n+  node = cgraph_node (decl);\n+  if (decl != current_function_decl\n+      && !TREE_ASM_WRITTEN (node->decl))\n+    return NULL;\n+  return &node->rtl;\n+}\n+\n \n /* Dump the callgraph.  */\n "}, {"sha": "6c8c8afece01fb1327372d9f4cbf8cdeb264acf4", "filename": "gcc/cgraph.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b255a03659c00eef213ffbeab6ce371f56e089e7/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b255a03659c00eef213ffbeab6ce371f56e089e7/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=b255a03659c00eef213ffbeab6ce371f56e089e7", "patch": "@@ -42,6 +42,15 @@ struct cgraph_global_info\n   int dummy;\n };\n \n+/* Information about the function that is propagated by the RTL backend.\n+   Available only for functions that has been already assembled.  */\n+\n+struct cgraph_rtl_info\n+{\n+   bool const_function, pure_function;\n+   int preferred_incoming_stack_boundary;\n+};\n+\n \n /* The cgraph data strutcture.\n    Each function decl has assigned cgraph_node listing calees and callers.  */\n@@ -74,6 +83,7 @@ struct cgraph_node\n   bool output;\n   struct cgraph_local_info local;\n   struct cgraph_global_info global;\n+  struct cgraph_rtl_info rtl;\n };\n \n struct cgraph_edge\n@@ -95,6 +105,7 @@ struct cgraph_node *cgraph_node\t\tPARAMS ((tree decl));\n bool cgraph_calls_p\t\t\tPARAMS ((tree, tree));\n struct cgraph_local_info *cgraph_local_info PARAMS ((tree));\n struct cgraph_global_info *cgraph_global_info PARAMS ((tree));\n+struct cgraph_rtl_info *cgraph_rtl_info PARAMS ((tree));\n \n /* In cgraphunit.c  */\n void cgraph_finalize_function\t\tPARAMS ((tree, tree));"}, {"sha": "6a6977e742f0ffc45cdbd8a0278924aa908f1bff", "filename": "gcc/function.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b255a03659c00eef213ffbeab6ce371f56e089e7/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b255a03659c00eef213ffbeab6ce371f56e089e7/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=b255a03659c00eef213ffbeab6ce371f56e089e7", "patch": "@@ -378,6 +378,8 @@ struct function GTY(())\n   int stack_alignment_needed;\n   /* Preferred alignment of the end of stack frame.  */\n   int preferred_stack_boundary;\n+  /* Set when the call to function itself has been emit.  */\n+  bool recursive_call_emit;\n \n   /* Language-specific code can use this to store whatever it likes.  */\n   struct language_function * language;"}, {"sha": "646ed6fd4c9b530f71857e42b43de3a103b0d861", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b255a03659c00eef213ffbeab6ce371f56e089e7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b255a03659c00eef213ffbeab6ce371f56e089e7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b255a03659c00eef213ffbeab6ce371f56e089e7", "patch": "@@ -1,3 +1,7 @@\n+Wed Mar  5 23:18:11 CET 2003  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.dg/i386-local2.c: New.\n+\n 2003-03-05  Mark Mitchell  <mark@codesourcery.com>\n \n \t* g++.dg/abi/layout3.C: New test."}, {"sha": "89ef87e4755292140d7638f0e869fc1281c29215", "filename": "gcc/testsuite/gcc.dg/i386-local2.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b255a03659c00eef213ffbeab6ce371f56e089e7/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-local2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b255a03659c00eef213ffbeab6ce371f56e089e7/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-local2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-local2.c?ref=b255a03659c00eef213ffbeab6ce371f56e089e7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -funit-at-a-time -fomit-frame-pointer\" } */\n+/* { dg-final { scan-assembler-not \"sub.*[re]sp\" } } */\n+\n+static __attribute__ ((noinline)) q ();\n+int a;\n+\n+/* This function should not require any stack manipulation\n+   for preferred stack bounday.  */\n+void\n+e ()\n+{\n+  if (a)\n+  {\n+    e ();\n+    a--;\n+  }\n+  q ();\n+}\n+\n+static __attribute__ ((noinline)) q ()\n+{\n+}"}, {"sha": "085641897344c87451c6a05116afa7413a008405", "filename": "gcc/toplev.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b255a03659c00eef213ffbeab6ce371f56e089e7/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b255a03659c00eef213ffbeab6ce371f56e089e7/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=b255a03659c00eef213ffbeab6ce371f56e089e7", "patch": "@@ -75,6 +75,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"cfglayout.h\"\n #include \"cfgloop.h\"\n #include \"hosthooks.h\"\n+#include \"cgraph.h\"\n \n #if defined (DWARF2_UNWIND_INFO) || defined (DWARF2_DEBUGGING_INFO)\n #include \"dwarf2out.h\"\n@@ -3772,6 +3773,16 @@ rest_of_compilation (decl)\n \n   timevar_pop (TV_FINAL);\n \n+  if ((*targetm.binds_local_p) (current_function_decl))\n+    {\n+      int pref = cfun->preferred_stack_boundary;\n+      if (cfun->recursive_call_emit\n+          && cfun->stack_alignment_needed > cfun->preferred_stack_boundary)\n+\tpref = cfun->stack_alignment_needed;\n+      cgraph_rtl_info (current_function_decl)->preferred_incoming_stack_boundary\n+        = pref;\n+    }\n+\n   /* Make sure volatile mem refs aren't considered valid operands for\n      arithmetic insns.  We must call this here if this is a nested inline\n      function, since the above code leaves us in the init_recog state"}]}