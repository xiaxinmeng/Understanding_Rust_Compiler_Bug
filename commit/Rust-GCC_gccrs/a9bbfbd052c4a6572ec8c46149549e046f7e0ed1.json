{"sha": "a9bbfbd052c4a6572ec8c46149549e046f7e0ed1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTliYmZiZDA1MmM0YTY1NzJlYzhjNDYxNDk1NDllMDQ2ZjdlMGVkMQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-10-20T14:11:43Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-10-20T14:11:43Z"}, "message": "[multiple changes]\n\n2014-10-20  Arnaud Charlet  <charlet@adacore.com>\n\n\t* set_targ.adb (Write_Target_Dependent_Values, Write_Line):\n\tFix calling C APIs with no trailing NUL char by calling better\n\twrappers instead.\n\n2014-10-20  Tristan Gingold  <gingold@adacore.com>\n\n\t* gnat_ugn.texi: Document that gdb users must be in group\n\t_developer on mac os.\n\n2014-10-20  Arnaud Charlet  <charlet@adacore.com>\n\n\t* a-tgdico.ads: Fix typo.\n\n2014-10-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_aggr.adb (Convert_To_Assignments): Do not create a\n\ttransient scope for a component whose type requires it, if the\n\tcontext is an initialization procedure, because the target of\n\tthe assignment must be visible outside of the block.\n\n2014-10-20  Tristan Gingold  <gingold@adacore.com>\n\n\t* tracebak.c: Define PC_ADJUST for arm-darwin.\n\t* env.c: Remove darwin specific code.\n\t* raise-gcc.c (__gnat_Unwind_ForcedUnwind): Error on arm-darwin.\n\n2014-10-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Analyze_Full_Type_Declaration): If previous view\n\tis incomplete rather than private, and full type declaration\n\thas aspects, analyze aspects on the full view rather than\n\tthe incomplete view, to prevent freezing anomalies with the\n\tclass-wide type.\n\nFrom-SVN: r216470", "tree": {"sha": "1abd647c917b89f192eaaf92c9bbddcb0d7eaadf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1abd647c917b89f192eaaf92c9bbddcb0d7eaadf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9bbfbd052c4a6572ec8c46149549e046f7e0ed1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9bbfbd052c4a6572ec8c46149549e046f7e0ed1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9bbfbd052c4a6572ec8c46149549e046f7e0ed1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9bbfbd052c4a6572ec8c46149549e046f7e0ed1/comments", "author": null, "committer": null, "parents": [{"sha": "8bc598fffb6b83ca7c55e3d5abb0d12b82d2449d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bc598fffb6b83ca7c55e3d5abb0d12b82d2449d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bc598fffb6b83ca7c55e3d5abb0d12b82d2449d"}], "stats": {"total": 83, "additions": 69, "deletions": 14}, "files": [{"sha": "a304daaeb5ba40584ece6e0c9094253ca5726a77", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9bbfbd052c4a6572ec8c46149549e046f7e0ed1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9bbfbd052c4a6572ec8c46149549e046f7e0ed1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a9bbfbd052c4a6572ec8c46149549e046f7e0ed1", "patch": "@@ -1,3 +1,39 @@\n+2014-10-20  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* set_targ.adb (Write_Target_Dependent_Values, Write_Line):\n+\tFix calling C APIs with no trailing NUL char by calling better\n+\twrappers instead.\n+\n+2014-10-20  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* gnat_ugn.texi: Document that gdb users must be in group\n+\t_developer on mac os.\n+\n+2014-10-20  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* a-tgdico.ads: Fix typo.\n+\n+2014-10-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_aggr.adb (Convert_To_Assignments): Do not create a\n+\ttransient scope for a component whose type requires it, if the\n+\tcontext is an initialization procedure, because the target of\n+\tthe assignment must be visible outside of the block.\n+\n+2014-10-20  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* tracebak.c: Define PC_ADJUST for arm-darwin.\n+\t* env.c: Remove darwin specific code.\n+\t* raise-gcc.c (__gnat_Unwind_ForcedUnwind): Error on arm-darwin.\n+\n+2014-10-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Full_Type_Declaration): If previous view\n+\tis incomplete rather than private, and full type declaration\n+\thas aspects, analyze aspects on the full view rather than\n+\tthe incomplete view, to prevent freezing anomalies with the\n+\tclass-wide type.\n+\n 2014-10-17  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_ch9.adb (Expand_N_Task_Body): Add defense against"}, {"sha": "3aae768805cc24f91ae41fecc31892ed3cf17e43", "filename": "gcc/ada/a-tgdico.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9bbfbd052c4a6572ec8c46149549e046f7e0ed1/gcc%2Fada%2Fa-tgdico.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9bbfbd052c4a6572ec8c46149549e046f7e0ed1/gcc%2Fada%2Fa-tgdico.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tgdico.ads?ref=a9bbfbd052c4a6572ec8c46149549e046f7e0ed1", "patch": "@@ -14,7 +14,7 @@\n ------------------------------------------------------------------------------\n \n pragma Warnings (Off);\n---  Turn of categorization warnings\n+--  Turn off categorization warnings\n \n generic\n    type T (<>) is abstract tagged limited private;"}, {"sha": "95308130cbcbb118b071546943e08227cc03db08", "filename": "gcc/ada/env.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9bbfbd052c4a6572ec8c46149549e046f7e0ed1/gcc%2Fada%2Fenv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9bbfbd052c4a6572ec8c46149549e046f7e0ed1/gcc%2Fada%2Fenv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fenv.c?ref=a9bbfbd052c4a6572ec8c46149549e046f7e0ed1", "patch": "@@ -76,10 +76,6 @@\n extern \"C\" {\n #endif\n \n-#if defined (__APPLE__)\n-#include <crt_externs.h>\n-#endif\n-\n #ifdef VMS\n #include <vms/descrip.h>\n #endif\n@@ -208,9 +204,6 @@ __gnat_environ (void)\n #if defined (VMS) || defined (RTX)\n   /* Not implemented */\n   return NULL;\n-#elif defined (__APPLE__)\n-  char ***result = _NSGetEnviron ();\n-  return *result;\n #elif defined (__MINGW32__)\n   return _environ;\n #elif defined (sun)"}, {"sha": "ac67a5724e2c9054eb13f5a0a240e9615d15cc0a", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9bbfbd052c4a6572ec8c46149549e046f7e0ed1/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9bbfbd052c4a6572ec8c46149549e046f7e0ed1/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=a9bbfbd052c4a6572ec8c46149549e046f7e0ed1", "patch": "@@ -3396,7 +3396,7 @@ package body Exp_Aggr is\n          --  that any finalization chain will be associated with that scope.\n          --  For extended returns, we delay expansion to avoid the creation\n          --  of an unwanted transient scope that could result in premature\n-         --  finalization of the return object (which is built in in place\n+         --  finalization of the return object (which is built in place\n          --  within the caller's scope).\n \n          or else\n@@ -3409,7 +3409,14 @@ package body Exp_Aggr is\n          return;\n       end if;\n \n-      if Requires_Transient_Scope (Typ) then\n+      --  Otherwise, if a transient scope is required, create it now. If we\n+      --  are within an initialization procedure do not create such, because\n+      --  the target of the assignment must not be declared within a local\n+      --  block, and because cleanup will take place on return from the\n+      --  initialization procedure.\n+      --  Should the condition be more restrictive ???\n+\n+      if Requires_Transient_Scope (Typ) and then not Inside_Init_Proc then\n          Establish_Transient_Scope (N, Sec_Stack => Needs_Finalization (Typ));\n       end if;\n "}, {"sha": "f586f87b17b269d3d51158952d5de366b5defed3", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9bbfbd052c4a6572ec8c46149549e046f7e0ed1/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9bbfbd052c4a6572ec8c46149549e046f7e0ed1/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=a9bbfbd052c4a6572ec8c46149549e046f7e0ed1", "patch": "@@ -29282,7 +29282,8 @@ codesign -f -s  \"gdb-cert\"  <gnat_install_prefix>/bin/gdb\n \n ... where \"gdb-cert\" should be replaced by the actual certificate\n name chosen above, and <gnat_install_prefix> should be replaced by\n-the location where you installed GNAT.\n+the location where you installed GNAT.  Also, be sure that users are\n+in the Unix group @samp{_developer}.\n \n @c **********************************\n @c * GNU Free Documentation License *"}, {"sha": "507412b0c362fffede7de6e39349ba66bdde98e9", "filename": "gcc/ada/raise-gcc.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9bbfbd052c4a6572ec8c46149549e046f7e0ed1/gcc%2Fada%2Fraise-gcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9bbfbd052c4a6572ec8c46149549e046f7e0ed1/gcc%2Fada%2Fraise-gcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fraise-gcc.c?ref=a9bbfbd052c4a6572ec8c46149549e046f7e0ed1", "patch": "@@ -1384,7 +1384,14 @@ __gnat_Unwind_ForcedUnwind (_Unwind_Exception *e,\n \t\t\t    void *argument)\n {\n #ifdef __USING_SJLJ_EXCEPTIONS__\n+\n+# if defined (__APPLE__) && defined (__arm__)\n+  /* There is not ForcedUnwind routine in ios system library.  */\n+  return _URC_FATAL_PHASE1_ERROR;\n+# else\n   return _Unwind_SjLj_ForcedUnwind (e, handler, argument);\n+# endif\n+\n #else\n   return _Unwind_ForcedUnwind (e, handler, argument);\n #endif"}, {"sha": "608307e44705d37174face5d170992e5fa09e008", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9bbfbd052c4a6572ec8c46149549e046f7e0ed1/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9bbfbd052c4a6572ec8c46149549e046f7e0ed1/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=a9bbfbd052c4a6572ec8c46149549e046f7e0ed1", "patch": "@@ -2777,9 +2777,18 @@ package body Sem_Ch3 is\n       --  them to the entity for the type which is currently the partial\n       --  view, but which is the one that will be frozen.\n \n+      --  In most cases the partial view is a private type, and both views\n+      --  appear in different declarative parts. In the unusual case where the\n+      --  partial view is incomplete, perform the analysis on the full view,\n+      --  to prevent freezing anomalies with the corresponding class-wide type,\n+      --  which otherwise might be frozen before the dispatch table is built.\n+\n       if Has_Aspects (N) then\n-         if Prev /= Def_Id then\n+         if Prev /= Def_Id\n+           and then Ekind (Prev) /= E_Incomplete_Type\n+         then\n             Analyze_Aspect_Specifications (N, Prev);\n+\n          else\n             Analyze_Aspect_Specifications (N, Def_Id);\n          end if;"}, {"sha": "8c201ea39928d7bb57d6b8d7a12a33fe95606cae", "filename": "gcc/ada/set_targ.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9bbfbd052c4a6572ec8c46149549e046f7e0ed1/gcc%2Fada%2Fset_targ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9bbfbd052c4a6572ec8c46149549e046f7e0ed1/gcc%2Fada%2Fset_targ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fset_targ.adb?ref=a9bbfbd052c4a6572ec8c46149549e046f7e0ed1", "patch": "@@ -370,7 +370,7 @@ package body Set_Targ is\n          AddC (ASCII.LF);\n \n          if Buflen /= Write (Fdesc, Buffer'Address, Buflen) then\n-            Delete_File (Target_Dependent_Info_Write_Name'Address, OK);\n+            Delete_File (Target_Dependent_Info_Write_Name.all, OK);\n             Fail (\"disk full writing file \"\n                   & Target_Dependent_Info_Write_Name.all);\n          end if;\n@@ -382,7 +382,7 @@ package body Set_Targ is\n \n    begin\n       Fdesc :=\n-        Create_File (Target_Dependent_Info_Write_Name.all'Address, Text);\n+        Create_File (Target_Dependent_Info_Write_Name.all, Text);\n \n       if Fdesc = Invalid_FD then\n          Fail (\"cannot create file \" & Target_Dependent_Info_Write_Name.all);"}, {"sha": "d5f9b9c6ba8d0adfb118a83ba347664a2451c2d3", "filename": "gcc/ada/tracebak.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9bbfbd052c4a6572ec8c46149549e046f7e0ed1/gcc%2Fada%2Ftracebak.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9bbfbd052c4a6572ec8c46149549e046f7e0ed1/gcc%2Fada%2Ftracebak.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftracebak.c?ref=a9bbfbd052c4a6572ec8c46149549e046f7e0ed1", "patch": "@@ -272,6 +272,8 @@ __gnat_backtrace (void **array,\n #define PC_ADJUST -2\n #elif defined (__ppc__) || defined (__ppc64__)\n #define PC_ADJUST -4\n+#elif defined (__arm__)\n+#define PC_ADJUST -2\n #else\n #error Unhandled darwin architecture.\n #endif"}]}