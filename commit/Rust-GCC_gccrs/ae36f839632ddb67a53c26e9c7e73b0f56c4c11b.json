{"sha": "ae36f839632ddb67a53c26e9c7e73b0f56c4c11b", "node_id": "C_kwDOANBUbNoAKGFlMzZmODM5NjMyZGRiNjdhNTNjMjZlOWM3ZTczYjBmNTZjNGMxMWI", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-01-20T00:05:22Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-01-24T22:48:23Z"}, "message": "preprocessor: -Wbidi-chars and UCNs [PR104030]\n\nStephan Bergmann reported that our -Wbidi-chars breaks the build\nof LibreOffice because we warn about UCNs even when their usage\nis correct: LibreOffice constructs strings piecewise, as in:\n\n  aText = u\"\\u202D\" + aText;\n\nand warning about that is overzealous.  Since no editor (AFAIK)\ninterprets UCNs to show them as Unicode characters, there's less\nrisk in misinterpreting them, and so perhaps we shouldn't warn\nabout them by default.  However, identifiers containing UCNs or\nprograms generating other programs could still cause confusion,\nso I'm keeping the UCN checking.  To turn it on, you just need\nto use -Wbidi-chars=unpaired,ucn or -Wbidi-chars=any,ucn.\n\nThe implementation is done by using the new EnumSet feature.\n\n\tPR preprocessor/104030\n\ngcc/c-family/ChangeLog:\n\n\t* c.opt (Wbidi-chars): Mark as EnumSet.  Also accept =ucn.\n\ngcc/ChangeLog:\n\n\t* doc/invoke.texi: Update documentation for -Wbidi-chars.\n\nlibcpp/ChangeLog:\n\n\t* include/cpplib.h (enum cpp_bidirectional_level): Add\n\tbidirectional_ucn.  Set values explicitly.\n\t* internal.h (cpp_reader): Adjust warn_bidi_p.\n\t* lex.cc (maybe_warn_bidi_on_close): Don't warn about UCNs\n\tunless UCN checking is on.\n\t(maybe_warn_bidi_on_char): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* c-c++-common/Wbidi-chars-10.c: Turn on UCN checking.\n\t* c-c++-common/Wbidi-chars-11.c: Likewise.\n\t* c-c++-common/Wbidi-chars-14.c: Likewise.\n\t* c-c++-common/Wbidi-chars-16.c: Likewise.\n\t* c-c++-common/Wbidi-chars-17.c: Likewise.\n\t* c-c++-common/Wbidi-chars-4.c: Likewise.\n\t* c-c++-common/Wbidi-chars-5.c: Likewise.\n\t* c-c++-common/Wbidi-chars-6.c: Likewise.\n\t* c-c++-common/Wbidi-chars-7.c: Likewise.\n\t* c-c++-common/Wbidi-chars-8.c: Likewise.\n\t* c-c++-common/Wbidi-chars-9.c: Likewise.\n\t* c-c++-common/Wbidi-chars-ranges.c: Likewise.\n\t* c-c++-common/Wbidi-chars-18.c: New test.\n\t* c-c++-common/Wbidi-chars-19.c: New test.\n\t* c-c++-common/Wbidi-chars-20.c: New test.\n\t* c-c++-common/Wbidi-chars-21.c: New test.\n\t* c-c++-common/Wbidi-chars-22.c: New test.\n\t* c-c++-common/Wbidi-chars-23.c: New test.", "tree": {"sha": "79e2972dff52b095ab4272a276dd1042aa6eb23e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79e2972dff52b095ab4272a276dd1042aa6eb23e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e89d0befe3ec3238fca6de2cb078eb403b8c7e99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e89d0befe3ec3238fca6de2cb078eb403b8c7e99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e89d0befe3ec3238fca6de2cb078eb403b8c7e99"}], "stats": {"total": 141, "additions": 110, "deletions": 31}, "files": [{"sha": "9cfd2a6bc4e00a590156ac28fb89256756ed2364", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=ae36f839632ddb67a53c26e9c7e73b0f56c4c11b", "patch": "@@ -379,8 +379,8 @@ C ObjC C++ ObjC++ Warning Alias(Wbidi-chars=,any,none)\n ;\n \n Wbidi-chars=\n-C ObjC C++ ObjC++ RejectNegative Joined Warning CPP(cpp_warn_bidirectional) CppReason(CPP_W_BIDIRECTIONAL) Var(warn_bidirectional) Init(bidirectional_unpaired) Enum(cpp_bidirectional_level)\n--Wbidi-chars=[none|unpaired|any] Warn about UTF-8 bidirectional control characters.\n+C ObjC C++ ObjC++ RejectNegative Joined Warning CPP(cpp_warn_bidirectional) CppReason(CPP_W_BIDIRECTIONAL) Var(warn_bidirectional) Init(bidirectional_unpaired) Enum(cpp_bidirectional_level) EnumSet\n+-Wbidi-chars=[none|unpaired|any|ucn] Warn about UTF-8 bidirectional control characters.\n \n ; Required for these enum values.\n SourceInclude\n@@ -390,13 +390,16 @@ Enum\n Name(cpp_bidirectional_level) Type(int) UnknownError(argument %qs to %<-Wbidi-chars%> not recognized)\n \n EnumValue\n-Enum(cpp_bidirectional_level) String(none) Value(bidirectional_none)\n+Enum(cpp_bidirectional_level) String(none) Value(bidirectional_none) Set(1)\n \n EnumValue\n-Enum(cpp_bidirectional_level) String(unpaired) Value(bidirectional_unpaired)\n+Enum(cpp_bidirectional_level) String(unpaired) Value(bidirectional_unpaired) Set(1)\n \n EnumValue\n-Enum(cpp_bidirectional_level) String(any) Value(bidirectional_any)\n+Enum(cpp_bidirectional_level) String(any) Value(bidirectional_any) Set(1)\n+\n+EnumValue\n+Enum(cpp_bidirectional_level) String(ucn) Value(bidirectional_ucn) Set(2)\n \n Wbool-compare\n C ObjC C++ ObjC++ Var(warn_bool_compare) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)"}, {"sha": "9e588db4fce6f7bcbfda8a98e80910b4cacabf25", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=ae36f839632ddb67a53c26e9c7e73b0f56c4c11b", "patch": "@@ -328,7 +328,7 @@ Objective-C and Objective-C++ Dialects}.\n -Warray-bounds  -Warray-bounds=@var{n}  -Warray-compare @gol\n -Wno-attributes  -Wattribute-alias=@var{n} -Wno-attribute-alias @gol\n -Wno-attribute-warning  @gol\n--Wbidi-chars=@r{[}none@r{|}unpaired@r{|}any@r{]} @gol\n+-Wbidi-chars=@r{[}none@r{|}unpaired@r{|}any@r{|}ucn@r{]} @gol\n -Wbool-compare  -Wbool-operation @gol\n -Wno-builtin-declaration-mismatch @gol\n -Wno-builtin-macro-redefined  -Wc90-c99-compat  -Wc99-c11-compat @gol\n@@ -7803,7 +7803,7 @@ Attributes considered include @code{alloc_align}, @code{alloc_size},\n This is the default.  You can disable these warnings with either\n @option{-Wno-attribute-alias} or @option{-Wattribute-alias=0}.\n \n-@item -Wbidi-chars=@r{[}none@r{|}unpaired@r{|}any@r{]}\n+@item -Wbidi-chars=@r{[}none@r{|}unpaired@r{|}any@r{|}ucn@r{]}\n @opindex Wbidi-chars=\n @opindex Wbidi-chars\n @opindex Wno-bidi-chars\n@@ -7820,6 +7820,10 @@ bidi contexts.  @option{-Wbidi-chars=none} turns the warning off.\n @option{-Wbidi-chars=any} warns about any use of bidirectional control\n characters.\n \n+By default, this warning does not warn about UCNs.  It is, however, possible\n+to turn on such checking by using @option{-Wbidi-chars=unpaired,ucn} or\n+@option{-Wbidi-chars=any,ucn}.\n+\n @item -Wbool-compare\n @opindex Wno-bool-compare\n @opindex Wbool-compare"}, {"sha": "cdcdce2be089c4c09635d4423da9b3bf3e3fe4e0", "filename": "gcc/testsuite/c-c++-common/Wbidi-chars-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-10.c?ref=ae36f839632ddb67a53c26e9c7e73b0f56c4c11b", "patch": "@@ -1,6 +1,6 @@\n /* PR preprocessor/103026 */\n /* { dg-do compile } */\n-/* { dg-options \"-Wbidi-chars=unpaired\" } */\n+/* { dg-options \"-Wbidi-chars=unpaired,ucn\" } */\n /* More nesting testing.  */\n \n /* RLE\u202b LRI\u2066 PDF\u202c PDI\u2069*/"}, {"sha": "ea83029d6b99718c7851d4ba2cb0178ef7fb9b40", "filename": "gcc/testsuite/c-c++-common/Wbidi-chars-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-11.c?ref=ae36f839632ddb67a53c26e9c7e73b0f56c4c11b", "patch": "@@ -1,6 +1,6 @@\n /* PR preprocessor/103026 */\n /* { dg-do compile } */\n-/* { dg-options \"-Wbidi-chars=unpaired\" } */\n+/* { dg-options \"-Wbidi-chars=unpaired,ucn\" } */\n /* Test that we warn when mixing UCN and UTF-8.  */\n \n int LRE_\u202a_PDF_\\u202c;"}, {"sha": "cb6b05efac1bc56af66686bf9809f111ff88bf6a", "filename": "gcc/testsuite/c-c++-common/Wbidi-chars-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-14.c?ref=ae36f839632ddb67a53c26e9c7e73b0f56c4c11b", "patch": "@@ -1,6 +1,6 @@\n /* PR preprocessor/103026 */\n /* { dg-do compile } */\n-/* { dg-options \"-Wbidi-chars=unpaired\" } */\n+/* { dg-options \"-Wbidi-chars=unpaired,ucn\" } */\n /* Test PDI handling, which also pops any subsequent LREs, RLEs, LROs,\n    or RLOs.  */\n "}, {"sha": "eaf0ec9a77717632f0c8d6e2701c3fb01f0ac1a2", "filename": "gcc/testsuite/c-c++-common/Wbidi-chars-16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-16.c?ref=ae36f839632ddb67a53c26e9c7e73b0f56c4c11b", "patch": "@@ -1,6 +1,6 @@\n /* PR preprocessor/103026 */\n /* { dg-do compile } */\n-/* { dg-options \"-Wbidi-chars=any\" } */\n+/* { dg-options \"-Wbidi-chars=any,ucn\" } */\n /* Test LTR/RTL chars.  */\n \n /* LTR<\u200e> */"}, {"sha": "341922146a711bdc9453f4c1af178869cd70b794", "filename": "gcc/testsuite/c-c++-common/Wbidi-chars-17.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-17.c?ref=ae36f839632ddb67a53c26e9c7e73b0f56c4c11b", "patch": "@@ -1,6 +1,6 @@\n /* PR preprocessor/103026 */\n /* { dg-do compile } */\n-/* { dg-options \"-Wbidi-chars=unpaired\" } */\n+/* { dg-options \"-Wbidi-chars=unpaired,ucn\" } */\n /* Test LTR/RTL chars.  */\n \n /* LTR<\u200e> */"}, {"sha": "ae586d5e08c55306d4971a79831b8fa805a3d215", "filename": "gcc/testsuite/c-c++-common/Wbidi-chars-18.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-18.c?ref=ae36f839632ddb67a53c26e9c7e73b0f56c4c11b", "patch": "@@ -0,0 +1,11 @@\n+/* PR preprocessor/104030 */\n+/* { dg-do compile } */\n+/* By default, don't warn about UCNs.  */\n+\n+const char *\n+fn ()\n+{\n+  const char *aText = \"\\u202D\" \"abc\";\n+/* { dg-bogus \"unpaired\" \"\" { target *-*-* } .-1 } */\n+  return aText;\n+}"}, {"sha": "9985c3be7a58e9998b808b900a47b37da0fa199a", "filename": "gcc/testsuite/c-c++-common/Wbidi-chars-19.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-19.c?ref=ae36f839632ddb67a53c26e9c7e73b0f56c4c11b", "patch": "@@ -0,0 +1,11 @@\n+/* PR preprocessor/104030 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wbidi-chars=unpaired,ucn\" } */\n+\n+const char *\n+fn ()\n+{\n+  const char *aText = \"\\u202D\" \"abc\";\n+/* { dg-warning \"unpaired\" \"\" { target *-*-* } .-1 } */\n+  return aText;\n+}"}, {"sha": "859f3d53779dcc6d9c99eb6cce94432fd50fd96f", "filename": "gcc/testsuite/c-c++-common/Wbidi-chars-20.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-20.c?ref=ae36f839632ddb67a53c26e9c7e73b0f56c4c11b", "patch": "@@ -0,0 +1,11 @@\n+/* PR preprocessor/104030 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wbidi-chars=any\" } */\n+\n+const char *\n+fn ()\n+{\n+  const char *aText = \"\\u202D\" \"abc\";\n+/* { dg-bogus \"U\\\\+202D\" \"\" { target *-*-* } .-1 } */\n+  return aText;\n+}"}, {"sha": "2720b8a883ec35a0712f00c2b29b9b5257e00371", "filename": "gcc/testsuite/c-c++-common/Wbidi-chars-21.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-21.c?ref=ae36f839632ddb67a53c26e9c7e73b0f56c4c11b", "patch": "@@ -0,0 +1,11 @@\n+/* PR preprocessor/104030 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wbidi-chars=ucn,any\" } */\n+\n+const char *\n+fn ()\n+{\n+  const char *aText = \"\\u202D\" \"abc\";\n+/* { dg-warning \"U\\\\+202D\" \"\" { target *-*-* } .-1 } */\n+  return aText;\n+}"}, {"sha": "f960e597c5938f51e40b44c1e6d9a8cc95e11ad7", "filename": "gcc/testsuite/c-c++-common/Wbidi-chars-22.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-22.c?ref=ae36f839632ddb67a53c26e9c7e73b0f56c4c11b", "patch": "@@ -0,0 +1,11 @@\n+/* PR preprocessor/104030 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wbidi-chars=none,ucn\" } */\n+\n+const char *\n+fn ()\n+{\n+  const char *aText = \"\\u202D\" \"abc\";\n+/* { dg-bogus \"\" \"\" { target *-*-* } .-1 } */\n+  return aText;\n+}"}, {"sha": "7de0a11070aaf3ba49b5ee00a279cb2f3f7d09fa", "filename": "gcc/testsuite/c-c++-common/Wbidi-chars-23.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-23.c?ref=ae36f839632ddb67a53c26e9c7e73b0f56c4c11b", "patch": "@@ -0,0 +1,11 @@\n+/* PR preprocessor/104030 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wbidi-chars=ucn\" } */\n+\n+const char *\n+fn ()\n+{\n+  const char *aText = \"\\u202D\" \"abc\";\n+/* { dg-warning \"unpaired\" \"\" { target *-*-* } .-1 } */\n+  return aText;\n+}"}, {"sha": "d2f0739dae06bc1a7b5168a03326021b8fe3712a", "filename": "gcc/testsuite/c-c++-common/Wbidi-chars-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-4.c?ref=ae36f839632ddb67a53c26e9c7e73b0f56c4c11b", "patch": "@@ -1,6 +1,6 @@\n /* PR preprocessor/103026 */\n /* { dg-do compile } */\n-/* { dg-options \"-Wbidi-chars=any -Wno-multichar -Wno-overflow\" } */\n+/* { dg-options \"-Wbidi-chars=any,ucn -Wno-multichar -Wno-overflow\" } */\n /* Test all bidi chars in various contexts (identifiers, comments,\n    string literals, character constants), both UCN and UTF-8.  The bidi\n    chars here are properly terminated, except for the character constants.  */"}, {"sha": "ad49498fe234e5bbb5f8e89be0aebb96e1d2eff5", "filename": "gcc/testsuite/c-c++-common/Wbidi-chars-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-5.c?ref=ae36f839632ddb67a53c26e9c7e73b0f56c4c11b", "patch": "@@ -1,6 +1,6 @@\n /* PR preprocessor/103026 */\n /* { dg-do compile } */\n-/* { dg-options \"-Wbidi-chars=unpaired -Wno-multichar -Wno-overflow\" } */\n+/* { dg-options \"-Wbidi-chars=unpaired,ucn -Wno-multichar -Wno-overflow\" } */\n /* Test all bidi chars in various contexts (identifiers, comments,\n    string literals, character constants), both UCN and UTF-8.  The bidi\n    chars here are properly terminated, except for the character constants.  */"}, {"sha": "8c1c1b2a2705f222a5b1f4fc29642cdf95ef38f7", "filename": "gcc/testsuite/c-c++-common/Wbidi-chars-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-6.c?ref=ae36f839632ddb67a53c26e9c7e73b0f56c4c11b", "patch": "@@ -1,6 +1,6 @@\n /* PR preprocessor/103026 */\n /* { dg-do compile } */\n-/* { dg-options \"-Wbidi-chars=unpaired\" } */\n+/* { dg-options \"-Wbidi-chars=ucn,unpaired\" } */\n /* Test nesting of bidi chars in various contexts.  */\n \n /* Terminated by the wrong char:  */"}, {"sha": "3270952a09a45c209834136af74634ab47792c65", "filename": "gcc/testsuite/c-c++-common/Wbidi-chars-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-7.c?ref=ae36f839632ddb67a53c26e9c7e73b0f56c4c11b", "patch": "@@ -1,6 +1,6 @@\n /* PR preprocessor/103026 */\n /* { dg-do compile } */\n-/* { dg-options \"-Wbidi-chars=any\" } */\n+/* { dg-options \"-Wbidi-chars=any,ucn\" } */\n /* Test we ignore UCNs in comments.  */\n \n // a b c \\u202a 1 2 3"}, {"sha": "3983168c9f1e3a08ba88283692b8b0c81c280b66", "filename": "gcc/testsuite/c-c++-common/Wbidi-chars-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-8.c?ref=ae36f839632ddb67a53c26e9c7e73b0f56c4c11b", "patch": "@@ -1,6 +1,6 @@\n /* PR preprocessor/103026 */\n /* { dg-do compile } */\n-/* { dg-options \"-Wbidi-chars=any\" } */\n+/* { dg-options \"-Wbidi-chars=any,ucn\" } */\n /* Test \\u vs \\U.  */\n \n int a_\\u202A;"}, {"sha": "0ddb0d931088c9207e7faa2332473f7dfb157f8d", "filename": "gcc/testsuite/c-c++-common/Wbidi-chars-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-9.c?ref=ae36f839632ddb67a53c26e9c7e73b0f56c4c11b", "patch": "@@ -1,6 +1,6 @@\n /* PR preprocessor/103026 */\n /* { dg-do compile } */\n-/* { dg-options \"-Wbidi-chars=unpaired\" } */\n+/* { dg-options \"-Wbidi-chars=unpaired,ucn\" } */\n /* Test that we properly separate bidi contexts (comment/identifier/character\n    constant/string literal).  */\n "}, {"sha": "0c71f306dbc73c5911e25075295ef43c536ecc2c", "filename": "gcc/testsuite/c-c++-common/Wbidi-chars-ranges.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-ranges.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-ranges.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbidi-chars-ranges.c?ref=ae36f839632ddb67a53c26e9c7e73b0f56c4c11b", "patch": "@@ -1,6 +1,6 @@\n /* PR preprocessor/103026 */\n /* { dg-do compile } */\n-/* { dg-options \"-Wbidi-chars=unpaired -fdiagnostics-show-caret\" } */\n+/* { dg-options \"-Wbidi-chars=unpaired,ucn -fdiagnostics-show-caret\" } */\n /* Verify that we escape and underline pertinent bidirectional\n    control characters when quoting the source.  */\n "}, {"sha": "3eba6f74b5726c13489b11db9807060f4d37daf3", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=ae36f839632ddb67a53c26e9c7e73b0f56c4c11b", "patch": "@@ -319,15 +319,16 @@ enum cpp_main_search\n   CMS_system,  /* Search the system INCLUDE path.  */\n };\n \n-/* The possible bidirectional control characters checking levels, from least\n-   restrictive to most.  */\n+/* The possible bidirectional control characters checking levels.  */\n enum cpp_bidirectional_level {\n   /* No checking.  */\n-  bidirectional_none,\n+  bidirectional_none = 0,\n   /* Only detect unpaired uses of bidirectional control characters.  */\n-  bidirectional_unpaired,\n+  bidirectional_unpaired = 1,\n   /* Detect any use of bidirectional control characters.  */\n-  bidirectional_any\n+  bidirectional_any = 2,\n+  /* Also warn about UCNs.  */\n+  bidirectional_ucn = 4\n };\n \n /* This structure is nested inside struct cpp_reader, and"}, {"sha": "badfd1b40daa54d791105204be5d587a493d8dba", "filename": "libcpp/internal.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=ae36f839632ddb67a53c26e9c7e73b0f56c4c11b", "patch": "@@ -605,7 +605,8 @@ struct cpp_reader\n      characters.  */\n   bool warn_bidi_p () const\n   {\n-    return CPP_OPTION (this, cpp_warn_bidirectional) != bidirectional_none;\n+    return (CPP_OPTION (this, cpp_warn_bidirectional)\n+\t    & (bidirectional_unpaired|bidirectional_any));\n   }\n };\n "}, {"sha": "fb1dfabb7afef0d52fe4a42703370482e14cb037", "filename": "libcpp/lex.cc", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/libcpp%2Flex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae36f839632ddb67a53c26e9c7e73b0f56c4c11b/libcpp%2Flex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.cc?ref=ae36f839632ddb67a53c26e9c7e73b0f56c4c11b", "patch": "@@ -1560,8 +1560,11 @@ class unpaired_bidi_rich_location : public rich_location\n static void\n maybe_warn_bidi_on_close (cpp_reader *pfile, const uchar *p)\n {\n-  if (CPP_OPTION (pfile, cpp_warn_bidirectional) == bidirectional_unpaired\n-      && bidi::vec.count () > 0)\n+  const auto warn_bidi = CPP_OPTION (pfile, cpp_warn_bidirectional);\n+  if (bidi::vec.count () > 0\n+      && (warn_bidi & bidirectional_unpaired\n+\t  && (!bidi::current_ctx_ucn_p ()\n+\t      || (warn_bidi & bidirectional_ucn))))\n     {\n       const location_t loc\n \t= linemap_position_for_column (pfile->line_table,\n@@ -1597,18 +1600,18 @@ maybe_warn_bidi_on_char (cpp_reader *pfile, bidi::kind kind,\n \n   const auto warn_bidi = CPP_OPTION (pfile, cpp_warn_bidirectional);\n \n-  if (warn_bidi != bidirectional_none)\n+  if (warn_bidi & (bidirectional_unpaired|bidirectional_any))\n     {\n       rich_location rich_loc (pfile->line_table, loc);\n       rich_loc.set_escape_on_output (true);\n \n       /* It seems excessive to warn about a PDI/PDF that is closing\n \t an opened context because we've already warned about the\n \t opening character.  Except warn when we have a UCN x UTF-8\n-\t mismatch.  */\n+\t mismatch, if UCN checking is enabled.  */\n       if (kind == bidi::current_ctx ())\n \t{\n-\t  if (warn_bidi == bidirectional_unpaired\n+\t  if (warn_bidi == (bidirectional_unpaired|bidirectional_ucn)\n \t      && bidi::current_ctx_ucn_p () != ucn_p)\n \t    {\n \t      rich_loc.add_range (bidi::current_ctx_loc ());\n@@ -1617,7 +1620,8 @@ maybe_warn_bidi_on_char (cpp_reader *pfile, bidi::kind kind,\n \t\t\t      \"a context by \\\"%s\\\"\", bidi::to_str (kind));\n \t    }\n \t}\n-      else if (warn_bidi == bidirectional_any)\n+      else if (warn_bidi & bidirectional_any\n+\t       && (!ucn_p || (warn_bidi & bidirectional_ucn)))\n \t{\n \t  if (kind == bidi::kind::PDF || kind == bidi::kind::PDI)\n \t    cpp_warning_at (pfile, CPP_W_BIDIRECTIONAL, &rich_loc,"}]}