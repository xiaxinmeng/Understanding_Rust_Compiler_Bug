{"sha": "f54e31ddefe3ea7146624eabcb75b1c90dc59f1a", "node_id": "C_kwDOANBUbNoAKGY1NGUzMWRkZWZlM2VhNzE0NjYyNGVhYmNiNzViMWM5MGRjNTlmMWE", "commit": {"author": {"name": "Murray Steele", "email": "murray.steele@arm.com", "date": "2021-12-22T15:55:58Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2023-01-18T11:58:14Z"}, "message": "arm: fix __arm_vld1q_z* and __arm_vst1q_p* intrinsics [PR108442]\n\nThe MVE ACLE allows for __ARM_MVE_PRESERVE_USER_NAMESPACE to be defined,\nwhich removes definitions for intrinsic functions without the __arm_\nprefix. __arm_vld1q_z* and __arm_vst1q_p* are currently implemented via\ncalls to vldr* and vstr*, which results in several compile-time errors when\n__ARM_MVE_PRESERVE_USER_NAMESPACE is defined. This patch replaces these\nwith calls to their prefixed counterparts, __arm_vldr* and __arm_str*,\nand adds a test covering the definition of __ARM_MVE_PRESERVE_USER_NAMESPACE.\n\ngcc/ChangeLog:\n\n\tPR target/108442\n\t* config/arm/arm_mve.h (__arm_vst1q_p_u8): Use prefixed intrinsic\n\tfunction.\n\t(__arm_vst1q_p_s8): Likewise.\n\t(__arm_vld1q_z_u8): Likewise.\n\t(__arm_vld1q_z_s8): Likewise.\n\t(__arm_vst1q_p_u16): Likewise.\n\t(__arm_vst1q_p_s16): Likewise.\n\t(__arm_vld1q_z_u16): Likewise.\n\t(__arm_vld1q_z_s16): Likewise.\n\t(__arm_vst1q_p_u32): Likewise.\n\t(__arm_vst1q_p_s32): Likewise.\n\t(__arm_vld1q_z_u32): Likewise.\n\t(__arm_vld1q_z_s32): Likewise.\n\t(__arm_vld1q_z_f16): Likewise.\n\t(__arm_vst1q_p_f16): Likewise.\n\t(__arm_vld1q_z_f32): Likewise.\n\t(__arm_vst1q_p_f32): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/general/preserve_user_namespace_1.c: New test.", "tree": {"sha": "7ba29e333a252483384f453d95feac90c20f0a11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ba29e333a252483384f453d95feac90c20f0a11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f54e31ddefe3ea7146624eabcb75b1c90dc59f1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f54e31ddefe3ea7146624eabcb75b1c90dc59f1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f54e31ddefe3ea7146624eabcb75b1c90dc59f1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f54e31ddefe3ea7146624eabcb75b1c90dc59f1a/comments", "author": {"login": "arm-murray", "id": 137165131, "node_id": "U_kgDOCCz5Sw", "avatar_url": "https://avatars.githubusercontent.com/u/137165131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arm-murray", "html_url": "https://github.com/arm-murray", "followers_url": "https://api.github.com/users/arm-murray/followers", "following_url": "https://api.github.com/users/arm-murray/following{/other_user}", "gists_url": "https://api.github.com/users/arm-murray/gists{/gist_id}", "starred_url": "https://api.github.com/users/arm-murray/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arm-murray/subscriptions", "organizations_url": "https://api.github.com/users/arm-murray/orgs", "repos_url": "https://api.github.com/users/arm-murray/repos", "events_url": "https://api.github.com/users/arm-murray/events{/privacy}", "received_events_url": "https://api.github.com/users/arm-murray/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a4b05944b7d409682197a9f50759a4ed97145e23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4b05944b7d409682197a9f50759a4ed97145e23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4b05944b7d409682197a9f50759a4ed97145e23"}], "stats": {"total": 38, "additions": 22, "deletions": 16}, "files": [{"sha": "bfbe1cdeabd24500d2d35da1e1415dfc456e5da2", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f54e31ddefe3ea7146624eabcb75b1c90dc59f1a/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f54e31ddefe3ea7146624eabcb75b1c90dc59f1a/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=f54e31ddefe3ea7146624eabcb75b1c90dc59f1a", "patch": "@@ -16171,14 +16171,14 @@ __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vst1q_p_u8 (uint8_t * __addr, uint8x16_t __value, mve_pred16_t __p)\n {\n-  return vstrbq_p_u8 (__addr, __value, __p);\n+  return __arm_vstrbq_p_u8 (__addr, __value, __p);\n }\n \n __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vst1q_p_s8 (int8_t * __addr, int8x16_t __value, mve_pred16_t __p)\n {\n-  return vstrbq_p_s8 (__addr, __value, __p);\n+  return __arm_vstrbq_p_s8 (__addr, __value, __p);\n }\n \n __extension__ extern __inline void\n@@ -16203,14 +16203,14 @@ __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vld1q_z_u8 (uint8_t const *__base, mve_pred16_t __p)\n {\n-  return vldrbq_z_u8 ( __base, __p);\n+  return __arm_vldrbq_z_u8 ( __base, __p);\n }\n \n __extension__ extern __inline int8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vld1q_z_s8 (int8_t const *__base, mve_pred16_t __p)\n {\n-  return vldrbq_z_s8 ( __base, __p);\n+  return __arm_vldrbq_z_s8 ( __base, __p);\n }\n \n __extension__ extern __inline int8x16x2_t\n@@ -16253,14 +16253,14 @@ __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vst1q_p_u16 (uint16_t * __addr, uint16x8_t __value, mve_pred16_t __p)\n {\n-  return vstrhq_p_u16 (__addr, __value, __p);\n+  return __arm_vstrhq_p_u16 (__addr, __value, __p);\n }\n \n __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vst1q_p_s16 (int16_t * __addr, int16x8_t __value, mve_pred16_t __p)\n {\n-  return vstrhq_p_s16 (__addr, __value, __p);\n+  return __arm_vstrhq_p_s16 (__addr, __value, __p);\n }\n \n __extension__ extern __inline void\n@@ -16285,14 +16285,14 @@ __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vld1q_z_u16 (uint16_t const *__base, mve_pred16_t __p)\n {\n-  return vldrhq_z_u16 ( __base, __p);\n+  return __arm_vldrhq_z_u16 ( __base, __p);\n }\n \n __extension__ extern __inline int16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vld1q_z_s16 (int16_t const *__base, mve_pred16_t __p)\n {\n-  return vldrhq_z_s16 ( __base, __p);\n+  return __arm_vldrhq_z_s16 ( __base, __p);\n }\n \n __extension__ extern __inline int16x8x2_t\n@@ -16335,14 +16335,14 @@ __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vst1q_p_u32 (uint32_t * __addr, uint32x4_t __value, mve_pred16_t __p)\n {\n-  return vstrwq_p_u32 (__addr, __value, __p);\n+  return __arm_vstrwq_p_u32 (__addr, __value, __p);\n }\n \n __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vst1q_p_s32 (int32_t * __addr, int32x4_t __value, mve_pred16_t __p)\n {\n-  return vstrwq_p_s32 (__addr, __value, __p);\n+  return __arm_vstrwq_p_s32 (__addr, __value, __p);\n }\n \n __extension__ extern __inline void\n@@ -16367,14 +16367,14 @@ __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vld1q_z_u32 (uint32_t const *__base, mve_pred16_t __p)\n {\n-  return vldrwq_z_u32 ( __base, __p);\n+  return __arm_vldrwq_z_u32 ( __base, __p);\n }\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vld1q_z_s32 (int32_t const *__base, mve_pred16_t __p)\n {\n-  return vldrwq_z_s32 ( __base, __p);\n+  return __arm_vldrwq_z_s32 ( __base, __p);\n }\n \n __extension__ extern __inline int32x4x2_t\n@@ -19837,7 +19837,7 @@ __extension__ extern __inline float16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vld1q_z_f16 (float16_t const *__base, mve_pred16_t __p)\n {\n-  return vldrhq_z_f16 (__base, __p);\n+  return __arm_vldrhq_z_f16 (__base, __p);\n }\n \n __extension__ extern __inline void\n@@ -19853,7 +19853,7 @@ __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vst1q_p_f16 (float16_t * __addr, float16x8_t __value, mve_pred16_t __p)\n {\n-  return vstrhq_p_f16 (__addr, __value, __p);\n+  return __arm_vstrhq_p_f16 (__addr, __value, __p);\n }\n \n __extension__ extern __inline float32x4x4_t\n@@ -19878,7 +19878,7 @@ __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vld1q_z_f32 (float32_t const *__base, mve_pred16_t __p)\n {\n-  return vldrwq_z_f32 (__base, __p);\n+  return __arm_vldrwq_z_f32 (__base, __p);\n }\n \n __extension__ extern __inline void\n@@ -19894,7 +19894,7 @@ __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vst1q_p_f32 (float32_t * __addr, float32x4_t __value, mve_pred16_t __p)\n {\n-  return vstrwq_p_f32 (__addr, __value, __p);\n+  return __arm_vstrwq_p_f32 (__addr, __value, __p);\n }\n \n __extension__ extern __inline float16x8_t"}, {"sha": "f107ac44ca9c6810a9429f332126f82f3f8656ee", "filename": "gcc/testsuite/gcc.target/arm/mve/general/preserve_user_namespace_1.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f54e31ddefe3ea7146624eabcb75b1c90dc59f1a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fgeneral%2Fpreserve_user_namespace_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f54e31ddefe3ea7146624eabcb75b1c90dc59f1a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fgeneral%2Fpreserve_user_namespace_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fgeneral%2Fpreserve_user_namespace_1.c?ref=f54e31ddefe3ea7146624eabcb75b1c90dc59f1a", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+\n+#define __ARM_MVE_PRESERVE_USER_NAMESPACE\n+#include <arm_mve.h>"}]}