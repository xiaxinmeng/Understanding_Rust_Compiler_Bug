{"sha": "71a4f307bd76b74e824acd45c6579932325da6c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFhNGYzMDdiZDc2Yjc0ZTgyNGFjZDQ1YzY1Nzk5MzIzMjVkYTZjNg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2005-05-09T21:55:08Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2005-05-09T21:55:08Z"}, "message": "arm.c (arm_gen_constant): Add new heuristic for generating constant integers that can be expressed as the...\n\n\t* arm.c (arm_gen_constant): Add new heuristic for generating\n\tconstant integers that can be expressed as the difference of two\n\tvalid immediates.\n\nFrom-SVN: r99472", "tree": {"sha": "7297e5bc9c199d8424196e39c140d44184b116ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7297e5bc9c199d8424196e39c140d44184b116ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71a4f307bd76b74e824acd45c6579932325da6c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71a4f307bd76b74e824acd45c6579932325da6c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71a4f307bd76b74e824acd45c6579932325da6c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71a4f307bd76b74e824acd45c6579932325da6c6/comments", "author": null, "committer": null, "parents": [{"sha": "43f6dfd3ec224e73a7175987f651b3d455f7803f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43f6dfd3ec224e73a7175987f651b3d455f7803f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43f6dfd3ec224e73a7175987f651b3d455f7803f"}], "stats": {"total": 37, "additions": 24, "deletions": 13}, "files": [{"sha": "e6fd1afebdcaeb234698261ffbb528755b8844f4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a4f307bd76b74e824acd45c6579932325da6c6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a4f307bd76b74e824acd45c6579932325da6c6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=71a4f307bd76b74e824acd45c6579932325da6c6", "patch": "@@ -1,3 +1,9 @@\n+2005-05-09  Richard Earnshaw  <richard.earnshaw@arm.com>\n+\n+\t* arm.c (arm_gen_constant): Add new heuristic for generating\n+\tconstant integers that can be expressed as the difference of two\n+\tvalid immediates.\n+\n 2005-05-09  Roger Sayle  <roger@eyesopen.com>\n \n \t* c-tree.h (parser_build_unary_op): New prototype."}, {"sha": "aaa9daaeaecc072b9afab1eab5c1b2a157b056b4", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a4f307bd76b74e824acd45c6579932325da6c6/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a4f307bd76b74e824acd45c6579932325da6c6/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=71a4f307bd76b74e824acd45c6579932325da6c6", "patch": "@@ -1531,8 +1531,8 @@ use_return_insn (int iscond, rtx sibling)\n int\n const_ok_for_arm (HOST_WIDE_INT i)\n {\n-  unsigned HOST_WIDE_INT mask = ~(unsigned HOST_WIDE_INT)0xFF;\n-\n+  int lowbit;\n+  \n   /* For machines with >32 bit HOST_WIDE_INT, the bits above bit 31 must\n      be all zero, or all one.  */\n   if ((i & ~(unsigned HOST_WIDE_INT) 0xffffffff) != 0\n@@ -1541,19 +1541,24 @@ const_ok_for_arm (HOST_WIDE_INT i)\n \t      & ~(unsigned HOST_WIDE_INT) 0xffffffff)))\n     return FALSE;\n \n-  /* Fast return for 0 and powers of 2 */\n-  if ((i & (i - 1)) == 0)\n+  i &= (unsigned HOST_WIDE_INT) 0xffffffff;\n+  \n+  /* Fast return for 0 and small values.  We must do this for zero, since\n+     the code below can't handle that one case.  */\n+  if ((i & ~(unsigned HOST_WIDE_INT) 0xff) == 0)\n     return TRUE;\n \n-  do\n-    {\n-      if ((i & mask & (unsigned HOST_WIDE_INT) 0xffffffff) == 0)\n-        return TRUE;\n-      mask =\n-\t  (mask << 2) | ((mask & (unsigned HOST_WIDE_INT) 0xffffffff)\n-\t\t\t  >> (32 - 2)) | ~(unsigned HOST_WIDE_INT) 0xffffffff;\n-    }\n-  while (mask != ~(unsigned HOST_WIDE_INT) 0xFF);\n+  /* Get the number of trailing zeros, rounded down to the nearest even\n+     number.  */\n+  lowbit = (ffs ((int) i) - 1) & ~1;\n+\n+  if ((i & ~(((unsigned HOST_WIDE_INT) 0xff) << lowbit)) == 0)\n+    return TRUE;\n+  else if (lowbit <= 4\n+\t   && ((i & ~0xc000003f) == 0\n+\t       || (i & ~0xf000000f) == 0\n+\t       || (i & ~0xfc000003) == 0))\n+    return TRUE;\n \n   return FALSE;\n }"}]}