{"sha": "b6f63e898498e62e78b51ee135fd8dc686c11d60", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZmNjNlODk4NDk4ZTYyZTc4YjUxZWUxMzVmZDhkYzY4NmMxMWQ2MA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2007-11-23T21:03:48Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2007-11-23T21:03:48Z"}, "message": "re PR fortran/34192 (NEAREST can return wrong numbers)\n\n2007-11-23  Tobias Burnus  <burnus@net-b.de>\n            Steven G. Kargl  <kargl@gcc.gnu.org>\n\n        PR fortran/34192\n        * simplify.c (gfc_simplify_nearest): Fix NEAREST for\n        subnormal numbers.\n\n2007-11-23  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/34192\n        * gfortran.dg/nearest_2.f90: New.\n\n\nCo-Authored-By: Steven G. Kargl <kargl@gcc.gnu.org>\n\nFrom-SVN: r130383", "tree": {"sha": "33a3082ca3ff1ade65a130eaf92e76d8574a7fcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33a3082ca3ff1ade65a130eaf92e76d8574a7fcd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6f63e898498e62e78b51ee135fd8dc686c11d60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6f63e898498e62e78b51ee135fd8dc686c11d60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6f63e898498e62e78b51ee135fd8dc686c11d60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6f63e898498e62e78b51ee135fd8dc686c11d60/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "360f866c16da467d7851b72b3d9c6c3fd1653721", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/360f866c16da467d7851b72b3d9c6c3fd1653721", "html_url": "https://github.com/Rust-GCC/gccrs/commit/360f866c16da467d7851b72b3d9c6c3fd1653721"}], "stats": {"total": 202, "additions": 194, "deletions": 8}, "files": [{"sha": "93f775ee0950f0fe3d01ddd078fd11758ce63358", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6f63e898498e62e78b51ee135fd8dc686c11d60/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6f63e898498e62e78b51ee135fd8dc686c11d60/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b6f63e898498e62e78b51ee135fd8dc686c11d60", "patch": "@@ -1,3 +1,10 @@\n+2007-11-23  Tobias Burnus  <burnus@net-b.de>\n+\t    Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/34192\n+\t* simplify.c (gfc_simplify_nearest): Fix NEAREST for\n+\tsubnormal numbers.\n+\n 2007-11-23  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* trans-expr.c (gfc_trans_string_copy): Use \"void *\" when building a"}, {"sha": "687e87f71778fd6a1bfecf4ee6cf992c0b548fb0", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 34, "deletions": 8, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6f63e898498e62e78b51ee135fd8dc686c11d60/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6f63e898498e62e78b51ee135fd8dc686c11d60/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=b6f63e898498e62e78b51ee135fd8dc686c11d60", "patch": "@@ -2691,8 +2691,8 @@ gfc_expr *\n gfc_simplify_nearest (gfc_expr *x, gfc_expr *s)\n {\n   gfc_expr *result;\n-  mpfr_t tmp;\n-  int sgn;\n+  mp_exp_t emin, emax;\n+  int kind;\n \n   if (x->expr_type != EXPR_CONSTANT || s->expr_type != EXPR_CONSTANT)\n     return NULL;\n@@ -2707,13 +2707,39 @@ gfc_simplify_nearest (gfc_expr *x, gfc_expr *s)\n   gfc_set_model_kind (x->ts.kind);\n   result = gfc_copy_expr (x);\n \n-  sgn = mpfr_sgn (s->value.real); \n-  mpfr_init (tmp);\n-  mpfr_set_inf (tmp, sgn);\n-  mpfr_nexttoward (result->value.real, tmp);\n-  mpfr_clear (tmp);\n+  /* Save current values of emin and emax.  */\n+  emin = mpfr_get_emin ();\n+  emax = mpfr_get_emax ();\n+\n+  /* Set emin and emax for the current model number.  */\n+  kind = gfc_validate_kind (BT_REAL, x->ts.kind, 0);\n+  mpfr_set_emin ((mp_exp_t) gfc_real_kinds[kind].min_exponent -\n+\t\tmpfr_get_prec(result->value.real) + 1);\n+  mpfr_set_emax ((mp_exp_t) gfc_real_kinds[kind].max_exponent - 1);\n+\n+  if (mpfr_sgn (s->value.real) > 0)\n+    {\n+      mpfr_nextabove (result->value.real);\n+      mpfr_subnormalize (result->value.real, 0, GMP_RNDU);\n+    }\n+  else\n+    {\n+      mpfr_nextbelow (result->value.real);\n+      mpfr_subnormalize (result->value.real, 0, GMP_RNDD);\n+    }\n+\n+  mpfr_set_emin (emin);\n+  mpfr_set_emax (emax);\n \n-  return range_check (result, \"NEAREST\");\n+  /* Only NaN can occur. Do not use range check as it gives an\n+     error for denormal numbers.  */\n+  if (mpfr_nan_p (result->value.real) && gfc_option.flag_range_check)\n+    {\n+      gfc_error (\"Result of NEAREST is NaN at %L\", &result->where);\n+      return &gfc_bad_expr;\n+    }\n+\n+  return result;\n }\n \n "}, {"sha": "d87601f419dc521d39d6b9919c32f8f2518c4977", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6f63e898498e62e78b51ee135fd8dc686c11d60/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6f63e898498e62e78b51ee135fd8dc686c11d60/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b6f63e898498e62e78b51ee135fd8dc686c11d60", "patch": "@@ -1,3 +1,9 @@\n+2007-11-23  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/34192\n+\t* gfortran.dg/nearest_2.f90: New.\n+\n+\n 2007-11-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/30293"}, {"sha": "4bdad31c8c8ca9c5a3643a0be9a5ac7f8fc4cef7", "filename": "gcc/testsuite/gfortran.dg/nearest_2.f90", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6f63e898498e62e78b51ee135fd8dc686c11d60/gcc%2Ftestsuite%2Fgfortran.dg%2Fnearest_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6f63e898498e62e78b51ee135fd8dc686c11d60/gcc%2Ftestsuite%2Fgfortran.dg%2Fnearest_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnearest_2.f90?ref=b6f63e898498e62e78b51ee135fd8dc686c11d60", "patch": "@@ -0,0 +1,147 @@\n+! { dg-do run }\n+!\n+! PR fortran/34192\n+!\n+! Test compile-time implementation of NEAREST\n+!\n+program test\n+  implicit none\n+\n+! Single precision\n+\n+  ! 0+ > 0\n+  if (nearest(0.0, 1.0) &\n+      <= 0.0) &\n+    call abort()\n+  ! 0++ > 0+\n+  if (nearest(nearest(0.0, 1.0), 1.0) &\n+      <= nearest(0.0, 1.0)) &\n+    call abort()\n+  ! 0+++ > 0++\n+  if (nearest(nearest(nearest(0.0, 1.0), 1.0), 1.0) &\n+      <= nearest(nearest(0.0, 1.0), 1.0)) &\n+    call abort()\n+  ! 0+- = 0\n+  if (nearest(nearest(0.0, 1.0), -1.0) &\n+      /= 0.0) &\n+    call abort()\n+  ! 0++- = 0+\n+  if (nearest(nearest(nearest(0.0, 1.0), 1.0), -1.0) &\n+      /= nearest(0.0, 1.0)) &\n+    call abort()\n+  ! 0++-- = 0\n+  if (nearest(nearest(nearest(nearest(0.0, 1.0), 1.0), -1.0), -1.0) &\n+      /= 0.0) &\n+    call abort()\n+\n+  ! 0- < 0\n+  if (nearest(0.0, -1.0) &\n+      >= 0.0) &\n+    call abort()\n+  ! 0-- < 0+\n+  if (nearest(nearest(0.0, -1.0), -1.0) &\n+      >= nearest(0.0, -1.0)) &\n+    call abort()\n+  ! 0--- < 0--\n+  if (nearest(nearest(nearest(0.0, -1.0), -1.0), -1.0) &\n+      >= nearest(nearest(0.0, -1.0), -1.0)) &\n+    call abort()\n+  ! 0-+ = 0\n+  if (nearest(nearest(0.0, -1.0), 1.0) &\n+      /= 0.0) &\n+    call abort()\n+  ! 0--+ = 0-\n+  if (nearest(nearest(nearest(0.0, -1.0), -1.0), 1.0) &\n+      /= nearest(0.0, -1.0)) &\n+    call abort()\n+  ! 0--++ = 0\n+  if (nearest(nearest(nearest(nearest(0.0, -1.0), -1.0), 1.0), 1.0) &\n+      /= 0.0) &\n+    call abort()\n+\n+  ! 42++ > 42+\n+  if (nearest(nearest(42.0, 1.0), 1.0) &\n+      <= nearest(42.0, 1.0)) &\n+    call abort()\n+  ! 42-- < 42-\n+  if (nearest(nearest(42.0, -1.0), -1.0) &\n+      >= nearest(42.0, -1.0)) &\n+    call abort()\n+  ! 42-+ = 42\n+  if (nearest(nearest(42.0, -1.0), 1.0) &\n+      /= 42.0) &\n+    call abort()\n+  ! 42+- = 42\n+  if (nearest(nearest(42.0, 1.0), -1.0) &\n+      /= 42.0) &\n+    call abort()\n+\n+! Double precision\n+\n+  ! 0+ > 0\n+  if (nearest(0.0d0, 1.0) &\n+      <= 0.0d0) &\n+    call abort()\n+  ! 0++ > 0+\n+  if (nearest(nearest(0.0d0, 1.0), 1.0) &\n+      <= nearest(0.0d0, 1.0)) &\n+    call abort()\n+  ! 0+++ > 0++\n+  if (nearest(nearest(nearest(0.0d0, 1.0), 1.0), 1.0) &\n+      <= nearest(nearest(0.0d0, 1.0), 1.0)) &\n+    call abort()\n+  ! 0+- = 0\n+  if (nearest(nearest(0.0d0, 1.0), -1.0) &\n+      /= 0.0d0) &\n+    call abort()\n+  ! 0++- = 0+\n+  if (nearest(nearest(nearest(0.0d0, 1.0), 1.0), -1.0) &\n+      /= nearest(0.0d0, 1.0)) &\n+    call abort()\n+  ! 0++-- = 0\n+  if (nearest(nearest(nearest(nearest(0.0d0, 1.0), 1.0), -1.0), -1.0) &\n+      /= 0.0d0) &\n+    call abort()\n+\n+  ! 0- < 0\n+  if (nearest(0.0d0, -1.0) &\n+      >= 0.0d0) &\n+    call abort()\n+  ! 0-- < 0+\n+  if (nearest(nearest(0.0d0, -1.0), -1.0) &\n+      >= nearest(0.0d0, -1.0)) &\n+    call abort()\n+  ! 0--- < 0--\n+  if (nearest(nearest(nearest(0.0d0, -1.0), -1.0), -1.0) &\n+      >= nearest(nearest(0.0d0, -1.0), -1.0)) &\n+    call abort()\n+  ! 0-+ = 0\n+  if (nearest(nearest(0.0d0, -1.0), 1.0) &\n+      /= 0.0d0) &\n+    call abort()\n+  ! 0--+ = 0-\n+  if (nearest(nearest(nearest(0.0d0, -1.0), -1.0), 1.0) &\n+      /= nearest(0.0d0, -1.0)) &\n+    call abort()\n+  ! 0--++ = 0\n+  if (nearest(nearest(nearest(nearest(0.0d0, -1.0), -1.0), 1.0), 1.0) &\n+      /= 0.0d0) &\n+    call abort()\n+\n+  ! 42++ > 42+\n+  if (nearest(nearest(42.0d0, 1.0), 1.0) &\n+      <= nearest(42.0d0, 1.0)) &\n+    call abort()\n+  ! 42-- < 42-\n+  if (nearest(nearest(42.0d0, -1.0), -1.0) &\n+      >= nearest(42.0d0, -1.0)) &\n+    call abort()\n+  ! 42-+ = 42\n+  if (nearest(nearest(42.0d0, -1.0), 1.0) &\n+      /= 42.0d0) &\n+    call abort()\n+  ! 42+- = 42\n+  if (nearest(nearest(42.0d0, 1.0), -1.0) &\n+      /= 42.0d0) &\n+    call abort()\n+end program test"}]}