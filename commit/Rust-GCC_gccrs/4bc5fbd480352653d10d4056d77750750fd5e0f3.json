{"sha": "4bc5fbd480352653d10d4056d77750750fd5e0f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGJjNWZiZDQ4MDM1MjY1M2QxMGQ0MDU2ZDc3NzUwNzUwZmQ1ZTBmMw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-03-27T15:31:46Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-03-27T15:31:46Z"}, "message": "system.h: Include symcat.h.\n\n\t* system.h: Include symcat.h.\n\t(STRINGIFY): Don't define.\n\n\t* configure.in: Adjust comment.\n\n\t* builtins.c: Use STRINGX, not STRINGIFY.\n\t* gencheck.c: Likewise.\n\t* gengenrtl.c: Likewise.\n\t* protoize.c: Likewise.\n\n\t* cpplex.c: Don't include symcat.h.\n\t* cpplib.c: Likewise.\n\n\t* gansidecl.h (HAVE_STRINGIZE): Don't define.\n\nFrom-SVN: r40875", "tree": {"sha": "2e592a2ad0d4637b55b1458012395d2ab9c692b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e592a2ad0d4637b55b1458012395d2ab9c692b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4bc5fbd480352653d10d4056d77750750fd5e0f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bc5fbd480352653d10d4056d77750750fd5e0f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bc5fbd480352653d10d4056d77750750fd5e0f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bc5fbd480352653d10d4056d77750750fd5e0f3/comments", "author": null, "committer": null, "parents": [{"sha": "313e46b92977bedbd2c2ed30e38ceabda495178d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/313e46b92977bedbd2c2ed30e38ceabda495178d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/313e46b92977bedbd2c2ed30e38ceabda495178d"}], "stats": {"total": 54, "additions": 25, "deletions": 29}, "files": [{"sha": "b67ace66a5513cb91deae7a3b603028483d59fa9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc5fbd480352653d10d4056d77750750fd5e0f3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc5fbd480352653d10d4056d77750750fd5e0f3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4bc5fbd480352653d10d4056d77750750fd5e0f3", "patch": "@@ -1,3 +1,20 @@\n+2001-03-27  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* system.h: Include symcat.h.\n+\t(STRINGIFY): Don't define.\n+\n+\t* configure.in: Adjust comment.\n+\n+\t* builtins.c: Use STRINGX, not STRINGIFY.\n+\t* gencheck.c: Likewise.\n+\t* gengenrtl.c: Likewise.\n+\t* protoize.c: Likewise.\n+\n+\t* cpplex.c: Don't include symcat.h.\n+\t* cpplib.c: Likewise.\n+\n+\t* gansidecl.h (HAVE_STRINGIZE): Don't define.\n+\n 2001-03-27  Alan Modra  <alan@linuxcare.com.au>\n \n \t* c-typeck.c (digest_init): Fold init expression."}, {"sha": "88127ca7366db3738270f6ed76768570be98c4ea", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc5fbd480352653d10d4056d77750750fd5e0f3/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc5fbd480352653d10d4056d77750750fd5e0f3/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=4bc5fbd480352653d10d4056d77750750fd5e0f3", "patch": "@@ -57,7 +57,7 @@ Boston, MA 02111-1307, USA.  */\n const char *const built_in_class_names[4]\n   = {\"NOT_BUILT_IN\", \"BUILT_IN_FRONTEND\", \"BUILT_IN_MD\", \"BUILT_IN_NORMAL\"};\n \n-#define DEF_BUILTIN(x) STRINGIFY(x),\n+#define DEF_BUILTIN(x) STRINGX(x),\n const char *const built_in_names[(int) END_BUILTINS] =\n {\n #include \"builtins.def\""}, {"sha": "4e8e33c939d0215f2595c35260813a3e9d16e39b", "filename": "gcc/configure", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc5fbd480352653d10d4056d77750750fd5e0f3/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc5fbd480352653d10d4056d77750750fd5e0f3/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=4bc5fbd480352653d10d4056d77750750fd5e0f3", "patch": "@@ -2016,7 +2016,7 @@ EOF\n fi\n \n # Find some useful tools\n-for ac_prog in gawk mawk nawk awk\n+for ac_prog in mawk gawk nawk awk\n do\n # Extract the first word of \"$ac_prog\", so it can be a program name with args.\n set dummy $ac_prog; ac_word=$2\n@@ -3021,7 +3021,7 @@ fi\n fi\n \n # See if the stage1 system preprocessor understands the ANSI C\n-# preprocessor stringification operator.\n+# preprocessor stringification operator.  (Used by symcat.h.)\n \n \n echo $ac_n \"checking for preprocessor stringizing operator\"\"... $ac_c\" 1>&6"}, {"sha": "a891a050421b5bcdf10031a8c9efcc66fe105242", "filename": "gcc/configure.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc5fbd480352653d10d4056d77750750fd5e0f3/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc5fbd480352653d10d4056d77750750fd5e0f3/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=4bc5fbd480352653d10d4056d77750750fd5e0f3", "patch": "@@ -522,7 +522,7 @@ else\n fi\n \n # See if the stage1 system preprocessor understands the ANSI C\n-# preprocessor stringification operator.\n+# preprocessor stringification operator.  (Used by symcat.h.)\n AC_C_STRINGIZE\n \n # Use <inttypes.h> only if it exists,"}, {"sha": "efc0aa570c76b1eb7e7a021721d23c62d7de3d3f", "filename": "gcc/cpplex.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc5fbd480352653d10d4056d77750750fd5e0f3/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc5fbd480352653d10d4056d77750750fd5e0f3/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=4bc5fbd480352653d10d4056d77750750fd5e0f3", "patch": "@@ -38,7 +38,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n #include \"system.h\"\n #include \"cpplib.h\"\n #include \"cpphash.h\"\n-#include \"symcat.h\"\n \n /* Tokens with SPELL_STRING store their spelling in the token list,\n    and it's length in the token->val.name.len.  */"}, {"sha": "5a523e034a1038d3d9adfbe8712f9ac4208419bc", "filename": "gcc/cpplib.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc5fbd480352653d10d4056d77750750fd5e0f3/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc5fbd480352653d10d4056d77750750fd5e0f3/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=4bc5fbd480352653d10d4056d77750750fd5e0f3", "patch": "@@ -26,7 +26,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n #include \"cpphash.h\"\n #include \"intl.h\"\n #include \"obstack.h\"\n-#include \"symcat.h\"\n \n /* Chained list of answers to an assertion.  */\n struct answer"}, {"sha": "57d71a664d283a09b51cab84f43c8b637fd3ef14", "filename": "gcc/gansidecl.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc5fbd480352653d10d4056d77750750fd5e0f3/gcc%2Fgansidecl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc5fbd480352653d10d4056d77750750fd5e0f3/gcc%2Fgansidecl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgansidecl.h?ref=4bc5fbd480352653d10d4056d77750750fd5e0f3", "patch": "@@ -43,11 +43,6 @@ Boston, MA 02111-1307, USA.  */\n # ifndef HAVE_LONG_DOUBLE\n #  define HAVE_LONG_DOUBLE 1\n # endif\n-/* Assume that (non-traditional) gcc used in stage2 or later has the\n-   stringize feature.  */\n-# if !defined (HAVE_STRINGIZE) && __STDC__\n-#  define HAVE_STRINGIZE 1\n-# endif /* ! HAVE_STRINGIZE && __STDC__ */\n #endif /* GCC >= 2.7 */\n \n #ifndef NULL_PTR"}, {"sha": "bfd8c366d66ab68c007d514a741f3b67c48b7805", "filename": "gcc/gencheck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc5fbd480352653d10d4056d77750750fd5e0f3/gcc%2Fgencheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc5fbd480352653d10d4056d77750750fd5e0f3/gcc%2Fgencheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgencheck.c?ref=4bc5fbd480352653d10d4056d77750750fd5e0f3", "patch": "@@ -21,7 +21,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"hconfig.h\"\n #include \"system.h\"\n \n-#define DEFTREECODE(SYM, NAME, TYPE, LEN)   STRINGIFY(SYM),\n+#define DEFTREECODE(SYM, NAME, TYPE, LEN)   STRINGX(SYM),\n \n const char *tree_codes[] = {\n #include \"tree.def\""}, {"sha": "d656b4aca3ca50064dc480417f640b6d16307176", "filename": "gcc/gengenrtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc5fbd480352653d10d4056d77750750fd5e0f3/gcc%2Fgengenrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc5fbd480352653d10d4056d77750750fd5e0f3/gcc%2Fgengenrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengenrtl.c?ref=4bc5fbd480352653d10d4056d77750750fd5e0f3", "patch": "@@ -98,7 +98,7 @@ struct rtx_definition\n   const char *enumname, *name, *format;\n };\n \n-#define DEF_RTL_EXPR(ENUM, NAME, FORMAT, CLASS) { STRINGIFY(ENUM), NAME, FORMAT },\n+#define DEF_RTL_EXPR(ENUM, NAME, FORMAT, CLASS) { STRINGX(ENUM), NAME, FORMAT },\n \n struct rtx_definition defs[] = \n {  "}, {"sha": "08ec75256784a943cf6bcc252200f65d88ae9726", "filename": "gcc/protoize.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc5fbd480352653d10d4056d77750750fd5e0f3/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc5fbd480352653d10d4056d77750750fd5e0f3/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=4bc5fbd480352653d10d4056d77750750fd5e0f3", "patch": "@@ -278,7 +278,7 @@ static const char * const other_var_style = \"stdarg\";\n static const char * const other_var_style = \"varargs\";\n /* Note that this is a string containing the expansion of va_alist.\n    But in `main' we discard all but the first token.  */\n-static const char *varargs_style_indicator = STRINGIFY (va_alist);\n+static const char *varargs_style_indicator = STRINGX (va_alist);\n #endif /* !defined (UNPROTOIZE) */\n \n /* The following two types are used to create hash tables.  In this program,"}, {"sha": "516ad5c30256266a4d76e5ce67f98370690fb893", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc5fbd480352653d10d4056d77750750fd5e0f3/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc5fbd480352653d10d4056d77750750fd5e0f3/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=4bc5fbd480352653d10d4056d77750750fd5e0f3", "patch": "@@ -355,21 +355,6 @@ extern void abort PARAMS ((void));\n #endif\n \n \n-\n-/* Define a STRINGIFY macro that's right for ANSI or traditional C.\n-   Note: if the argument passed to STRINGIFY is itself a macro, eg\n-   #define foo bar, STRINGIFY(foo) will produce \"foo\", not \"bar\".\n-   Although the __STDC__ case could be made to expand this via a layer\n-   of indirection, the traditional C case can not do so.  Therefore\n-   this behavior is not supported. */\n-#ifndef STRINGIFY\n-# ifdef HAVE_STRINGIZE\n-#  define STRINGIFY(STRING) #STRING\n-# else\n-#  define STRINGIFY(STRING) \"STRING\"\n-# endif\n-#endif /* ! STRINGIFY */\n-\n #if HAVE_SYS_STAT_H\n # include <sys/stat.h>\n #endif\n@@ -481,6 +466,7 @@ extern void abort PARAMS ((void));\n \n /* Get libiberty declarations. */\n #include \"libiberty.h\"\n+#include \"symcat.h\"\n \n /* Provide a default for the HOST_BIT_BUCKET.\n    This suffices for POSIX-like hosts.  */"}]}