{"sha": "ca3b3e200a6f43d0ba196b268c79c7a6741a5eea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2EzYjNlMjAwYTZmNDNkMGJhMTk2YjI2OGM3OWM3YTY3NDFhNWVlYQ==", "commit": {"author": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2004-03-22T06:19:44Z"}, "committer": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2004-03-22T06:19:44Z"}, "message": "Makefile.tpl: Clean up experimental top level bootstrap support...\n\n2004-03-22  Nathanael Nerode  <neroden@gcc.gnu.org>\n\n\t* Makefile.tpl: Clean up experimental top level bootstrap support:\n\tnote known problems; set CONFIG_SHELL; don't set BUILD_CC; relocate\n\tprev-gcc in configure- targets as well as all- targets.\n\t* Makefile.in: Regenerate.\n\nFrom-SVN: r79812", "tree": {"sha": "d2cbae9dd6c73714526d0d61b70b49de14d4dc81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2cbae9dd6c73714526d0d61b70b49de14d4dc81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca3b3e200a6f43d0ba196b268c79c7a6741a5eea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca3b3e200a6f43d0ba196b268c79c7a6741a5eea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca3b3e200a6f43d0ba196b268c79c7a6741a5eea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca3b3e200a6f43d0ba196b268c79c7a6741a5eea/comments", "author": null, "committer": null, "parents": [{"sha": "400e39e37d046a34d076806ecb5d5a8dc1611ceb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/400e39e37d046a34d076806ecb5d5a8dc1611ceb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/400e39e37d046a34d076806ecb5d5a8dc1611ceb"}], "stats": {"total": 51, "additions": 31, "deletions": 20}, "files": [{"sha": "f9e684197ea409d531b0b5beb98bc5bb602d99a4", "filename": "ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3b3e200a6f43d0ba196b268c79c7a6741a5eea/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3b3e200a6f43d0ba196b268c79c7a6741a5eea/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=ca3b3e200a6f43d0ba196b268c79c7a6741a5eea", "patch": "@@ -1,3 +1,10 @@\n+2004-03-22  Nathanael Nerode  <neroden@gcc.gnu.org>\n+\n+\t* Makefile.tpl: Clean up experimental top level bootstrap support:\n+\tnote known problems; set CONFIG_SHELL; don't set BUILD_CC; relocate\n+\tprev-gcc in configure- targets as well as all- targets.\n+\t* Makefile.in: Regenerate.\n+\n 2004-03-21  Kelley Cook  <kcook@gcc.gnu.org>\n \n \t* compile: New file imported from automake."}, {"sha": "dff7fde62376b58139c71d58787bb5bdfbd1dfd9", "filename": "Makefile.in", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3b3e200a6f43d0ba196b268c79c7a6741a5eea/Makefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3b3e200a6f43d0ba196b268c79c7a6741a5eea/Makefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.in?ref=ca3b3e200a6f43d0ba196b268c79c7a6741a5eea", "patch": "@@ -23777,6 +23777,7 @@ STAMP = echo timestamp >\n STAGE1_CFLAGS=@stage1_cflags@\n STAGE1_LANGUAGES=@stage1_languages@\n \n+# TODO: deal with OBJS-onestep\n configure-stage1-gcc:\n \techo configure-stage1-gcc > stage_last ; \\\n \tif [ -f stage1-gcc/Makefile ] ; then \\\n@@ -23789,11 +23790,12 @@ configure-stage1-gcc:\n \tmv stage1-gcc gcc ; \\\n \tr=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tCONFIG_SHELL=\"$(SHELL)\"; export CONFIG_SHELL; \\\n+\tTOPLEVEL_CONFIGURE_ARGUMENTS=\"$(TOPLEVEL_CONFIGURE_ARGUMENTS)\"; export TOPLEVEL_CONFIGURE_ARGUMENTS; \\\n \tCC=\"$(CC)\"; export CC; \\\n \tCFLAGS=\"$(CFLAGS)\"; export CFLAGS; \\\n \tCXX=\"$(CXX)\"; export CXX; \\\n \tCXXFLAGS=\"$(CXXFLAGS)\"; export CXXFLAGS; \\\n-\tTOPLEVEL_CONFIGURE_ARGUMENTS=\"$(TOPLEVEL_CONFIGURE_ARGUMENTS)\"; export TOPLEVEL_CONFIGURE_ARGUMENTS; \\\n \tAR=\"$(AR)\"; export AR; \\\n \tAS=\"$(AS)\"; export AS; \\\n \tCC_FOR_BUILD=\"$(CC_FOR_BUILD)\"; export CC_FOR_BUILD; \\\n@@ -23837,6 +23839,7 @@ all-stage1-gcc: configure-stage1-gcc all-bootstrap\n \tmv gcc stage1-gcc ; \\\n \t$(STAMP) all-stage1-gcc\n \n+# TODO: Deal with STAGE_PREFIX (which is only for ada, incidentally)\n configure-stage2-gcc: all-stage1-gcc\n \techo configure-stage2-gcc > stage_last ; \\\n \tif [ -f stage2-gcc/Makefile ] ; then \\\n@@ -23847,13 +23850,15 @@ configure-stage2-gcc: all-stage1-gcc\n \tfi ; \\\n \t[ -d stage2-gcc ] || mkdir stage2-gcc; \\\n \tmv stage2-gcc gcc ; \\\n+\tmv stage1-gcc prev-gcc ; \\\n \tr=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tCONFIG_SHELL=\"$(SHELL)\"; export CONFIG_SHELL; \\\n+\tTOPLEVEL_CONFIGURE_ARGUMENTS=\"$(TOPLEVEL_CONFIGURE_ARGUMENTS)\"; export TOPLEVEL_CONFIGURE_ARGUMENTS; \\\n \tCC=\"$(CC)\"; export CC; \\\n \tCFLAGS=\"$(CFLAGS)\"; export CFLAGS; \\\n \tCXX=\"$(CXX)\"; export CXX; \\\n \tCXXFLAGS=\"$(CXXFLAGS)\"; export CXXFLAGS; \\\n-\tTOPLEVEL_CONFIGURE_ARGUMENTS=\"$(TOPLEVEL_CONFIGURE_ARGUMENTS)\"; export TOPLEVEL_CONFIGURE_ARGUMENTS; \\\n \tAR=\"$(AR)\"; export AR; \\\n \tAS=\"$(AS)\"; export AS; \\\n \tCC_FOR_BUILD=\"$(CC_FOR_BUILD)\"; export CC_FOR_BUILD; \\\n@@ -23881,6 +23886,7 @@ configure-stage2-gcc: all-stage1-gcc\n \t  $(HOST_CONFIGARGS) $${srcdiroption} ; \\\n \tcd .. ; \\\n \tmv gcc stage2-gcc ; \\\n+\tmv prev-gcc stage1-gcc ; \\\n \t$(STAMP) configure-stage2-gcc\n \n # Flags to pass to stage2 and later makes.\n@@ -23901,7 +23907,6 @@ all-stage2-gcc: all-stage1-gcc configure-stage2-gcc\n \tcd gcc && \\\n \t$(MAKE) $(GCC_FLAGS_TO_PASS) \\\n \t\tCC=\"$(STAGE_CC_WRAPPER) $$r/prev-gcc/xgcc$(exeext) -B$$r/prev-gcc/ -B$(build_tooldir)/bin/\" \\\n-\t\tBUILD_CC=\"$(STAGE_CC_WRAPPER) $$r/prev-gcc/xgcc$(exeext) -B$$r/prev-gcc/ -B$(build_tooldir)/bin/\" \\\n \t\tCC_FOR_BUILD=\"$(STAGE_CC_WRAPPER) $$r/prev-gcc/xgcc$(exeext) -B$$r/prev-gcc/ -B$(build_tooldir)/bin/\" \\\n \t\tSTAGE_PREFIX=$$r/prev-gcc/ \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS) || exit 1 ; \\\n@@ -23920,13 +23925,15 @@ configure-stage3-gcc: all-stage2-gcc\n \tfi ; \\\n \t[ -d stage3-gcc ] || mkdir stage3-gcc; \\\n \tmv stage3-gcc gcc ; \\\n+\tmv stage1-gcc prev-gcc ; \\\n \tr=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tCONFIG_SHELL=\"$(SHELL)\"; export CONFIG_SHELL; \\\n+\tTOPLEVEL_CONFIGURE_ARGUMENTS=\"$(TOPLEVEL_CONFIGURE_ARGUMENTS)\"; export TOPLEVEL_CONFIGURE_ARGUMENTS; \\\n \tCC=\"$(CC)\"; export CC; \\\n \tCFLAGS=\"$(CFLAGS)\"; export CFLAGS; \\\n \tCXX=\"$(CXX)\"; export CXX; \\\n \tCXXFLAGS=\"$(CXXFLAGS)\"; export CXXFLAGS; \\\n-\tTOPLEVEL_CONFIGURE_ARGUMENTS=\"$(TOPLEVEL_CONFIGURE_ARGUMENTS)\"; export TOPLEVEL_CONFIGURE_ARGUMENTS; \\\n \tAR=\"$(AR)\"; export AR; \\\n \tAS=\"$(AS)\"; export AS; \\\n \tCC_FOR_BUILD=\"$(CC_FOR_BUILD)\"; export CC_FOR_BUILD; \\\n@@ -23954,13 +23961,9 @@ configure-stage3-gcc: all-stage2-gcc\n \t  $(HOST_CONFIGARGS) $${srcdiroption} ; \\\n \tcd .. ; \\\n \tmv gcc stage3-gcc ; \\\n+\tmv prev-gcc stage2-gcc ; \\\n \t$(STAMP) configure-stage3-gcc\n \n-# Some files might not exist.  This is disabled 'cause it don't work.\n-# cp prev-gcc/objc/objc-parse.c gcc/objc/objc-parse.c || true ; \\\n-# cp prev-gcc/java/parse.c gcc/java/parse.c || true ; \\\n-# cp prev-gcc/java/parse-scan.c gcc/java/parse-scan.c || true ; \\\n-\n all-stage3-gcc: all-stage2-gcc configure-stage3-gcc\n \techo all-stage3-gcc > stage_last ; \\\n \tr=`${PWD_COMMAND}`; export r; \\\n@@ -23970,7 +23973,6 @@ all-stage3-gcc: all-stage2-gcc configure-stage3-gcc\n \tcd gcc && \\\n \t$(MAKE) $(GCC_FLAGS_TO_PASS) \\\n \t\tCC=\"$(STAGE_CC_WRAPPER) $$r/prev-gcc/xgcc$(exeext) -B$$r/prev-gcc/ -B$(build_tooldir)/bin/\" \\\n-\t\tBUILD_CC=\"$(STAGE_CC_WRAPPER) $$r/prev-gcc/xgcc$(exeext) -B$$r/prev-gcc/ -B$(build_tooldir)/bin/\" \\\n \t\tCC_FOR_BUILD=\"$(STAGE_CC_WRAPPER) $$r/prev-gcc/xgcc$(exeext) -B$$r/prev-gcc/ -B$(build_tooldir)/bin/\" \\\n \t\tSTAGE_PREFIX=$$r/prev-gcc/ \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS) || exit 1 ; \\"}, {"sha": "a44cc40113427e2395c01e2ce1c2473f355e35f8", "filename": "Makefile.tpl", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3b3e200a6f43d0ba196b268c79c7a6741a5eea/Makefile.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3b3e200a6f43d0ba196b268c79c7a6741a5eea/Makefile.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.tpl?ref=ca3b3e200a6f43d0ba196b268c79c7a6741a5eea", "patch": "@@ -1294,6 +1294,7 @@ STAMP = echo timestamp >\n STAGE1_CFLAGS=@stage1_cflags@\n STAGE1_LANGUAGES=@stage1_languages@\n \n+# TODO: deal with OBJS-onestep\n configure-stage1-gcc:\n \techo configure-stage1-gcc > stage_last ; \\\n \tif [ -f stage1-gcc/Makefile ] ; then \\\n@@ -1306,11 +1307,12 @@ configure-stage1-gcc:\n \tmv stage1-gcc gcc ; \\\n \tr=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tCONFIG_SHELL=\"$(SHELL)\"; export CONFIG_SHELL; \\\n+\tTOPLEVEL_CONFIGURE_ARGUMENTS=\"$(TOPLEVEL_CONFIGURE_ARGUMENTS)\"; export TOPLEVEL_CONFIGURE_ARGUMENTS; \\\n \tCC=\"$(CC)\"; export CC; \\\n \tCFLAGS=\"$(CFLAGS)\"; export CFLAGS; \\\n \tCXX=\"$(CXX)\"; export CXX; \\\n \tCXXFLAGS=\"$(CXXFLAGS)\"; export CXXFLAGS; \\\n-\tTOPLEVEL_CONFIGURE_ARGUMENTS=\"$(TOPLEVEL_CONFIGURE_ARGUMENTS)\"; export TOPLEVEL_CONFIGURE_ARGUMENTS; \\\n \tAR=\"$(AR)\"; export AR; \\\n \tAS=\"$(AS)\"; export AS; \\\n \tCC_FOR_BUILD=\"$(CC_FOR_BUILD)\"; export CC_FOR_BUILD; \\\n@@ -1354,6 +1356,7 @@ all-stage1-gcc: configure-stage1-gcc all-bootstrap\n \tmv gcc stage1-gcc ; \\\n \t$(STAMP) all-stage1-gcc\n \n+# TODO: Deal with STAGE_PREFIX (which is only for ada, incidentally)\n configure-stage2-gcc: all-stage1-gcc\n \techo configure-stage2-gcc > stage_last ; \\\n \tif [ -f stage2-gcc/Makefile ] ; then \\\n@@ -1364,13 +1367,15 @@ configure-stage2-gcc: all-stage1-gcc\n \tfi ; \\\n \t[ -d stage2-gcc ] || mkdir stage2-gcc; \\\n \tmv stage2-gcc gcc ; \\\n+\tmv stage1-gcc prev-gcc ; \\\n \tr=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tCONFIG_SHELL=\"$(SHELL)\"; export CONFIG_SHELL; \\\n+\tTOPLEVEL_CONFIGURE_ARGUMENTS=\"$(TOPLEVEL_CONFIGURE_ARGUMENTS)\"; export TOPLEVEL_CONFIGURE_ARGUMENTS; \\\n \tCC=\"$(CC)\"; export CC; \\\n \tCFLAGS=\"$(CFLAGS)\"; export CFLAGS; \\\n \tCXX=\"$(CXX)\"; export CXX; \\\n \tCXXFLAGS=\"$(CXXFLAGS)\"; export CXXFLAGS; \\\n-\tTOPLEVEL_CONFIGURE_ARGUMENTS=\"$(TOPLEVEL_CONFIGURE_ARGUMENTS)\"; export TOPLEVEL_CONFIGURE_ARGUMENTS; \\\n \tAR=\"$(AR)\"; export AR; \\\n \tAS=\"$(AS)\"; export AS; \\\n \tCC_FOR_BUILD=\"$(CC_FOR_BUILD)\"; export CC_FOR_BUILD; \\\n@@ -1398,6 +1403,7 @@ configure-stage2-gcc: all-stage1-gcc\n \t  $(HOST_CONFIGARGS) $${srcdiroption} ; \\\n \tcd .. ; \\\n \tmv gcc stage2-gcc ; \\\n+\tmv prev-gcc stage1-gcc ; \\\n \t$(STAMP) configure-stage2-gcc\n \n # Flags to pass to stage2 and later makes.\n@@ -1418,7 +1424,6 @@ all-stage2-gcc: all-stage1-gcc configure-stage2-gcc\n \tcd gcc && \\\n \t$(MAKE) $(GCC_FLAGS_TO_PASS) \\\n \t\tCC=\"$(STAGE_CC_WRAPPER) $$r/prev-gcc/xgcc$(exeext) -B$$r/prev-gcc/ -B$(build_tooldir)/bin/\" \\\n-\t\tBUILD_CC=\"$(STAGE_CC_WRAPPER) $$r/prev-gcc/xgcc$(exeext) -B$$r/prev-gcc/ -B$(build_tooldir)/bin/\" \\\n \t\tCC_FOR_BUILD=\"$(STAGE_CC_WRAPPER) $$r/prev-gcc/xgcc$(exeext) -B$$r/prev-gcc/ -B$(build_tooldir)/bin/\" \\\n \t\tSTAGE_PREFIX=$$r/prev-gcc/ \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS) || exit 1 ; \\\n@@ -1437,13 +1442,15 @@ configure-stage3-gcc: all-stage2-gcc\n \tfi ; \\\n \t[ -d stage3-gcc ] || mkdir stage3-gcc; \\\n \tmv stage3-gcc gcc ; \\\n+\tmv stage1-gcc prev-gcc ; \\\n \tr=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tCONFIG_SHELL=\"$(SHELL)\"; export CONFIG_SHELL; \\\n+\tTOPLEVEL_CONFIGURE_ARGUMENTS=\"$(TOPLEVEL_CONFIGURE_ARGUMENTS)\"; export TOPLEVEL_CONFIGURE_ARGUMENTS; \\\n \tCC=\"$(CC)\"; export CC; \\\n \tCFLAGS=\"$(CFLAGS)\"; export CFLAGS; \\\n \tCXX=\"$(CXX)\"; export CXX; \\\n \tCXXFLAGS=\"$(CXXFLAGS)\"; export CXXFLAGS; \\\n-\tTOPLEVEL_CONFIGURE_ARGUMENTS=\"$(TOPLEVEL_CONFIGURE_ARGUMENTS)\"; export TOPLEVEL_CONFIGURE_ARGUMENTS; \\\n \tAR=\"$(AR)\"; export AR; \\\n \tAS=\"$(AS)\"; export AS; \\\n \tCC_FOR_BUILD=\"$(CC_FOR_BUILD)\"; export CC_FOR_BUILD; \\\n@@ -1471,13 +1478,9 @@ configure-stage3-gcc: all-stage2-gcc\n \t  $(HOST_CONFIGARGS) $${srcdiroption} ; \\\n \tcd .. ; \\\n \tmv gcc stage3-gcc ; \\\n+\tmv prev-gcc stage2-gcc ; \\\n \t$(STAMP) configure-stage3-gcc\n \n-# Some files might not exist.  This is disabled 'cause it don't work.\n-# cp prev-gcc/objc/objc-parse.c gcc/objc/objc-parse.c || true ; \\\n-# cp prev-gcc/java/parse.c gcc/java/parse.c || true ; \\\n-# cp prev-gcc/java/parse-scan.c gcc/java/parse-scan.c || true ; \\\n-\n all-stage3-gcc: all-stage2-gcc configure-stage3-gcc\n \techo all-stage3-gcc > stage_last ; \\\n \tr=`${PWD_COMMAND}`; export r; \\\n@@ -1487,7 +1490,6 @@ all-stage3-gcc: all-stage2-gcc configure-stage3-gcc\n \tcd gcc && \\\n \t$(MAKE) $(GCC_FLAGS_TO_PASS) \\\n \t\tCC=\"$(STAGE_CC_WRAPPER) $$r/prev-gcc/xgcc$(exeext) -B$$r/prev-gcc/ -B$(build_tooldir)/bin/\" \\\n-\t\tBUILD_CC=\"$(STAGE_CC_WRAPPER) $$r/prev-gcc/xgcc$(exeext) -B$$r/prev-gcc/ -B$(build_tooldir)/bin/\" \\\n \t\tCC_FOR_BUILD=\"$(STAGE_CC_WRAPPER) $$r/prev-gcc/xgcc$(exeext) -B$$r/prev-gcc/ -B$(build_tooldir)/bin/\" \\\n \t\tSTAGE_PREFIX=$$r/prev-gcc/ \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS) || exit 1 ; \\"}]}