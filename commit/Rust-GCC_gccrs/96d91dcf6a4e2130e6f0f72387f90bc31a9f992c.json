{"sha": "96d91dcf6a4e2130e6f0f72387f90bc31a9f992c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZkOTFkY2Y2YTRlMjEzMGU2ZjBmNzIzODdmOTBiYzMxYTlmOTkyYw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-05-24T12:40:28Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-05-24T12:40:28Z"}, "message": "re PR bootstrap/49078 (LTO bootstrap failed with bootstrap-profiled)\n\n2011-05-24  Richard Guenther  <rguenther@suse.de>\n\n\tPR bootstrap/49078\n\t* gimple.c (gimple_register_canonical_type): Revert\n\tprevious change.\n\t* alias.c (get_alias_set): Only assert that TYPE_CANONICAL\n\tdoes not for a tree for the case where it matters.  Cache\n\tpointer-type alias-sets.\n\nFrom-SVN: r174113", "tree": {"sha": "4d0ee86ac31210e10293afa2014bd8a23fbabb5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d0ee86ac31210e10293afa2014bd8a23fbabb5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96d91dcf6a4e2130e6f0f72387f90bc31a9f992c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96d91dcf6a4e2130e6f0f72387f90bc31a9f992c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96d91dcf6a4e2130e6f0f72387f90bc31a9f992c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96d91dcf6a4e2130e6f0f72387f90bc31a9f992c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1ed1641d71f9fe8380d3edd80e1dbd17998543f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ed1641d71f9fe8380d3edd80e1dbd17998543f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ed1641d71f9fe8380d3edd80e1dbd17998543f5"}], "stats": {"total": 53, "additions": 27, "deletions": 26}, "files": [{"sha": "84724f0c5ba45af3728b10b47754f100d0865657", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d91dcf6a4e2130e6f0f72387f90bc31a9f992c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d91dcf6a4e2130e6f0f72387f90bc31a9f992c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96d91dcf6a4e2130e6f0f72387f90bc31a9f992c", "patch": "@@ -1,3 +1,12 @@\n+2011-05-24  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR bootstrap/49078\n+\t* gimple.c (gimple_register_canonical_type): Revert\n+\tprevious change.\n+\t* alias.c (get_alias_set): Only assert that TYPE_CANONICAL\n+\tdoes not for a tree for the case where it matters.  Cache\n+\tpointer-type alias-sets.\n+\n 2011-05-24  Joseph Myers  <joseph@codesourcery.com>\n \n \t* Makefile.in (GCC_OBJS): Remove opts-common.o and options.o."}, {"sha": "b32e6b37cac2c15cbb76f841de6165c08c8147d5", "filename": "gcc/alias.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d91dcf6a4e2130e6f0f72387f90bc31a9f992c/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d91dcf6a4e2130e6f0f72387f90bc31a9f992c/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=96d91dcf6a4e2130e6f0f72387f90bc31a9f992c", "patch": "@@ -709,10 +709,8 @@ get_alias_set (tree t)\n \n   t = TYPE_CANONICAL (t);\n \n-  /* Canonical types shouldn't form a tree nor should the canonical\n-     type require structural equality checks.  */\n-  gcc_checking_assert (TYPE_CANONICAL (t) == t\n-\t\t       && !TYPE_STRUCTURAL_EQUALITY_P (t));\n+  /* The canonical type should not require structural equality checks.  */\n+  gcc_checking_assert (!TYPE_STRUCTURAL_EQUALITY_P (t));\n \n   /* If this is a type with a known alias set, return it.  */\n   if (TYPE_ALIAS_SET_KNOWN_P (t))\n@@ -813,11 +811,19 @@ get_alias_set (tree t)\n      That's simple and avoids all the above problems.  */\n   else if (POINTER_TYPE_P (t)\n \t   && t != ptr_type_node)\n-    return get_alias_set (ptr_type_node);\n+    set = get_alias_set (ptr_type_node);\n \n   /* Otherwise make a new alias set for this type.  */\n   else\n-    set = new_alias_set ();\n+    {\n+      /* Each canonical type gets its own alias set, so canonical types\n+\t shouldn't form a tree.  It doesn't really matter for types\n+\t we handle specially above, so only check it where it possibly\n+\t would result in a bogus alias set.  */\n+      gcc_checking_assert (TYPE_CANONICAL (t) == t);\n+\n+      set = new_alias_set ();\n+    }\n \n   TYPE_ALIAS_SET (t) = set;\n "}, {"sha": "4c0e4a387df2abaf28332e1275184d94652a9247", "filename": "gcc/gimple.c", "status": "modified", "additions": 6, "deletions": 20, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d91dcf6a4e2130e6f0f72387f90bc31a9f992c/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d91dcf6a4e2130e6f0f72387f90bc31a9f992c/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=96d91dcf6a4e2130e6f0f72387f90bc31a9f992c", "patch": "@@ -4779,7 +4779,12 @@ gimple_canonical_type_eq (const void *p1, const void *p2)\n /* Register type T in the global type table gimple_types.\n    If another type T', compatible with T, already existed in\n    gimple_types then return T', otherwise return T.  This is used by\n-   LTO to merge identical types read from different TUs.  */\n+   LTO to merge identical types read from different TUs.\n+\n+   ???  This merging does not exactly match how the tree.c middle-end\n+   functions will assign TYPE_CANONICAL when new types are created\n+   during optimization (which at least happens for pointer and array\n+   types).  */\n \n tree\n gimple_register_canonical_type (tree t)\n@@ -4800,25 +4805,6 @@ gimple_register_canonical_type (tree t)\n   if (TYPE_CANONICAL (t))\n     return TYPE_CANONICAL (t);\n \n-  /* For pointer and reference types do as the middle-end does - the\n-     canonical type is a pointer to the canonical pointed-to type.  */\n-  if (TREE_CODE (t) == POINTER_TYPE)\n-    {\n-      TYPE_CANONICAL (t)\n-\t  = build_pointer_type_for_mode\n-\t  (gimple_register_canonical_type (TREE_TYPE (t)),\n-\t   TYPE_MODE (t), TYPE_REF_CAN_ALIAS_ALL (t));\n-      return TYPE_CANONICAL (t);\n-    }\n-  else if (TREE_CODE (t) == REFERENCE_TYPE)\n-    {\n-      TYPE_CANONICAL (t)\n-\t  = build_reference_type_for_mode\n-\t  (gimple_register_canonical_type (TREE_TYPE (t)),\n-\t   TYPE_MODE (t), TYPE_REF_CAN_ALIAS_ALL (t));\n-      return TYPE_CANONICAL (t);\n-    }\n-\n   if (gimple_canonical_types == NULL)\n     gimple_canonical_types = htab_create_ggc (16381, gimple_canonical_type_hash,\n \t\t\t\t\t      gimple_canonical_type_eq, 0);"}]}