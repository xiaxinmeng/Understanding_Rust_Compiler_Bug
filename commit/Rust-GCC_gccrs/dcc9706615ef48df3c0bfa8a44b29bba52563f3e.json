{"sha": "dcc9706615ef48df3c0bfa8a44b29bba52563f3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNjOTcwNjYxNWVmNDhkZjNjMGJmYThhNDRiMjliYmE1MjU2M2YzZQ==", "commit": {"author": {"name": "Mark Wielaard", "email": "mjw@redhat.com", "date": "2014-11-21T16:00:06Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2014-11-21T16:00:06Z"}, "message": "PR debug/38757 gcc does not emit DW_LANG_C99.\n\nFor C and C++ add the language standard version in use to lang_hooks.name.\nChange users of lang_hook.name to check with new functions lang_GNU_C or\nlang_GNU_CXX. In dwarf2out.c output the DW_LANG_C version from the\nlang_hooks.name and merge any LTO TRANSLATION_UNIT_LANGUAGE found. Adds\ntwo testcases to dwarf2.exp to check the right DWARF DW_AT_language is set\non the compile_unit depending on the -std=c89 or -std=c99 setting.\n\ngcc/c-family/ChangeLog\n\n\tPR debug/38757\n\t* c-opts.c (set_std_c89): Set lang_hooks.name.\n\t(set_std_c99): Likewise.\n\t(set_std_c11): Likewise.\n\t(set_std_cxx98): Likewise.\n\t(set_std_cxx11): Likewise.\n\t(set_std_cxx14): Likewise.\n\t(set_std_cxx1z): Likewise.\n\ngcc/ChangeLog\n\n\tPR debug/38757\n\t* config/avr/avr-c.c (avr_cpu_cpp_builtins): Use lang_GNU_C.\n\t* config/darwin.c (darwin_file_end): Use lang_GNU_CXX.\n\t(darwin_override_options): Likewise.\n\t* config/ia64/ia64.c (ia64_struct_retval_addr_is_first_parm_p):\n\tLikewise.\n\t* config/rs6000/rs6000.c (rs6000_output_function_epilogue):\n\tLikewise.\n\t* dbxout.c (get_lang_number): Likewise.\n\t(dbxout_type): Likewise.\n\t(dbxout_symbol_location): Likewise.\n\t* dwarf2out.c (add_prototyped_attribute): Add DW_AT_prototype\n\talso for DW_LANG_{C,C99,ObjC}.\n\t(highest_c_language): New function.\n\t(gen_compile_unit_die): Call highest_c_language to merge LTO\n\tTRANSLATION_UNIT_LANGUAGE. Use strncmp language_string to\n\tdetermine if DW_LANG_C99 or DW_LANG_C89 should be returned.\n\t* fold-const.c (fold_cond_expr_with_comparison): Use lang_GNU_CXX.\n\t* langhooks.h (struct lang_hooks): Add version comment to name.\n\t(lang_GNU_C): New function declaration.\n\t(lang_GNU_CXX): Likewise.\n\t* langhooks.c (lang_GNU_C): New function.\n\t(lang_GNU_CXX): Likewise.\n\t* vmsdbgout.c (vmsdbgout_init): Use lang_GNU_C and lang_GNU_CXX.\n\ngcc/testsuite/ChangeLog\n\n\tPR debug/38757\n\t* gcc.dg/debug/dwarf2/lang-c89.c: New test.\n\t* gcc.dg/debug/dwarf2/lang-c99.c: Likewise.\n\nFrom-SVN: r217934", "tree": {"sha": "c8584e5b3baab5f7a57b97d1119bfefc9b0fe7da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8584e5b3baab5f7a57b97d1119bfefc9b0fe7da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcc9706615ef48df3c0bfa8a44b29bba52563f3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcc9706615ef48df3c0bfa8a44b29bba52563f3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcc9706615ef48df3c0bfa8a44b29bba52563f3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcc9706615ef48df3c0bfa8a44b29bba52563f3e/comments", "author": null, "committer": null, "parents": [{"sha": "9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c3bca1143bb406aa359e68ab9e2e7bbdb2f694c"}], "stats": {"total": 169, "additions": 148, "deletions": 21}, "files": [{"sha": "ab639d636a8d10de199316a1595f9b2f5b99c8e4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc9706615ef48df3c0bfa8a44b29bba52563f3e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc9706615ef48df3c0bfa8a44b29bba52563f3e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dcc9706615ef48df3c0bfa8a44b29bba52563f3e", "patch": "@@ -1,3 +1,30 @@\n+2014-11-20  Mark Wielaard  <mjw@redhat.com>\n+\n+\tPR debug/38757\n+\t* config/avr/avr-c.c (avr_cpu_cpp_builtins): Use lang_GNU_C.\n+\t* config/darwin.c (darwin_file_end): Use lang_GNU_CXX.\n+\t(darwin_override_options): Likewise.\n+\t* config/ia64/ia64.c (ia64_struct_retval_addr_is_first_parm_p):\n+\tLikewise.\n+\t* config/rs6000/rs6000.c (rs6000_output_function_epilogue):\n+\tLikewise.\n+\t* dbxout.c (get_lang_number): Likewise.\n+\t(dbxout_type): Likewise.\n+\t(dbxout_symbol_location): Likewise.\n+\t* dwarf2out.c (add_prototyped_attribute): Add DW_AT_prototype\n+\talso for DW_LANG_{C,C99,ObjC}.\n+\t(highest_c_language): New function.\n+\t(gen_compile_unit_die): Call highest_c_language to merge LTO\n+\tTRANSLATION_UNIT_LANGUAGE. Use strncmp language_string to\n+\tdetermine if DW_LANG_C99 or DW_LANG_C89 should be returned.\n+\t* fold-const.c (fold_cond_expr_with_comparison): Use lang_GNU_CXX.\n+\t* langhooks.h (struct lang_hooks): Add version comment to name.\n+\t(lang_GNU_C): New function declaration.\n+\t(lang_GNU_CXX): Likewise.\n+\t* langhooks.c (lang_GNU_C): New function.\n+\t(lang_GNU_CXX): Likewise.\n+\t* vmsdbgout.c (vmsdbgout_init): Use lang_GNU_C and lang_GNU_CXX.\n+\n 2014-11-21  Ilya Tocar  <ilya.tocar@intel.com>\n \n \t* common/config/i386/i386-common.c (OPTION_MASK_ISA_CLWB_UNSET,"}, {"sha": "74172f9624207b9b36ff3ab8d039fee32e0f12fd", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc9706615ef48df3c0bfa8a44b29bba52563f3e/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc9706615ef48df3c0bfa8a44b29bba52563f3e/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=dcc9706615ef48df3c0bfa8a44b29bba52563f3e", "patch": "@@ -1,3 +1,14 @@\n+2014-11-20  Mark Wielaard  <mjw@redhat.com>\n+\n+\tPR debug/38757\n+\t* c-opts.c (set_std_c89): Set lang_hooks.name.\n+\t(set_std_c99): Likewise.\n+\t(set_std_c11): Likewise.\n+\t(set_std_cxx98): Likewise.\n+\t(set_std_cxx11): Likewise.\n+\t(set_std_cxx14): Likewise.\n+\t(set_std_cxx1z): Likewise.\n+\n 2014-11-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/63764"}, {"sha": "08a36f03c8ccef079c9f8ea149599b30d4c88582", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc9706615ef48df3c0bfa8a44b29bba52563f3e/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc9706615ef48df3c0bfa8a44b29bba52563f3e/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=dcc9706615ef48df3c0bfa8a44b29bba52563f3e", "patch": "@@ -1450,6 +1450,7 @@ set_std_c89 (int c94, int iso)\n   flag_isoc94 = c94;\n   flag_isoc99 = 0;\n   flag_isoc11 = 0;\n+  lang_hooks.name = \"GNU C89\";\n }\n \n /* Set the C 99 standard (without GNU extensions if ISO).  */\n@@ -1463,6 +1464,7 @@ set_std_c99 (int iso)\n   flag_isoc11 = 0;\n   flag_isoc99 = 1;\n   flag_isoc94 = 1;\n+  lang_hooks.name = \"GNU C99\";\n }\n \n /* Set the C 11 standard (without GNU extensions if ISO).  */\n@@ -1476,6 +1478,7 @@ set_std_c11 (int iso)\n   flag_isoc11 = 1;\n   flag_isoc99 = 1;\n   flag_isoc94 = 1;\n+  lang_hooks.name = \"GNU C11\";\n }\n \n /* Set the C++ 98 standard (without GNU extensions if ISO).  */\n@@ -1487,6 +1490,7 @@ set_std_cxx98 (int iso)\n   flag_no_nonansi_builtin = iso;\n   flag_iso = iso;\n   cxx_dialect = cxx98;\n+  lang_hooks.name = \"GNU C++98\";\n }\n \n /* Set the C++ 2011 standard (without GNU extensions if ISO).  */\n@@ -1501,6 +1505,7 @@ set_std_cxx11 (int iso)\n   flag_isoc94 = 1;\n   flag_isoc99 = 1;\n   cxx_dialect = cxx11;\n+  lang_hooks.name = \"GNU C++11\";\n }\n \n /* Set the C++ 2014 draft standard (without GNU extensions if ISO).  */\n@@ -1515,6 +1520,7 @@ set_std_cxx14 (int iso)\n   flag_isoc94 = 1;\n   flag_isoc99 = 1;\n   cxx_dialect = cxx14;\n+  lang_hooks.name = \"GNU C++14\";\n }\n \n /* Set the C++ 201z draft standard (without GNU extensions if ISO).  */\n@@ -1530,6 +1536,7 @@ set_std_cxx1z (int iso)\n   flag_isoc99 = 1;\n   flag_isoc11 = 1;\n   cxx_dialect = cxx1z;\n+  lang_hooks.name = \"GNU C++14\"; /* Pretend C++14 till standarization.  */\n }\n \n /* Args to -d specify what to dump.  Silently ignore"}, {"sha": "324afb37db2839bfa9008d3293ec46c1a0c73411", "filename": "gcc/config/avr/avr-c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc9706615ef48df3c0bfa8a44b29bba52563f3e/gcc%2Fconfig%2Favr%2Favr-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc9706615ef48df3c0bfa8a44b29bba52563f3e/gcc%2Fconfig%2Favr%2Favr-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-c.c?ref=dcc9706615ef48df3c0bfa8a44b29bba52563f3e", "patch": "@@ -386,7 +386,7 @@ avr_cpu_cpp_builtins (struct cpp_reader *pfile)\n      (as mentioned in ISO/IEC DTR 18037; Annex F.2) which is not\n      implemented in GCC up to now.  */\n \n-  if (!strcmp (lang_hooks.name, \"GNU C\"))\n+  if (lang_GNU_C ())\n     {\n       for (i = 0; i < ADDR_SPACE_COUNT; i++)\n         if (!ADDR_SPACE_GENERIC_P (i)"}, {"sha": "1785e85cf2d7b4362115ac698177277a75af6034", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc9706615ef48df3c0bfa8a44b29bba52563f3e/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc9706615ef48df3c0bfa8a44b29bba52563f3e/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=dcc9706615ef48df3c0bfa8a44b29bba52563f3e", "patch": "@@ -2909,7 +2909,7 @@ darwin_file_end (void)\n      }\n \n   machopic_finish (asm_out_file);\n-  if (strcmp (lang_hooks.name, \"GNU C++\") == 0)\n+  if (lang_GNU_CXX ())\n     {\n       switch_to_section (darwin_sections[constructor_section]);\n       switch_to_section (darwin_sections[destructor_section]);\n@@ -3162,7 +3162,7 @@ darwin_override_options (void)\n   if (flag_mkernel || flag_apple_kext)\n     {\n       /* -mkernel implies -fapple-kext for C++ */\n-      if (strcmp (lang_hooks.name, \"GNU C++\") == 0)\n+      if (lang_GNU_CXX ())\n \tflag_apple_kext = 1;\n \n       flag_no_common = 1;"}, {"sha": "73d328904f2fa89cc9c619465ec2bf7c9009017a", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc9706615ef48df3c0bfa8a44b29bba52563f3e/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc9706615ef48df3c0bfa8a44b29bba52563f3e/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=dcc9706615ef48df3c0bfa8a44b29bba52563f3e", "patch": "@@ -10772,7 +10772,7 @@ ia64_struct_retval_addr_is_first_parm_p (tree fntype)\n \t  && ret_type\n \t  && TYPE_MODE (ret_type) == BLKmode \n \t  && TREE_ADDRESSABLE (ret_type)\n-\t  && strcmp (lang_hooks.name, \"GNU C++\") == 0);\n+\t  && lang_GNU_CXX ());\n }\n \n /* Output the assembler code for a thunk function.  THUNK_DECL is the"}, {"sha": "ea3e51120140c31c23e67d407e0dd1d59558c960", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc9706615ef48df3c0bfa8a44b29bba52563f3e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc9706615ef48df3c0bfa8a44b29bba52563f3e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=dcc9706615ef48df3c0bfa8a44b29bba52563f3e", "patch": "@@ -25431,7 +25431,7 @@ rs6000_output_function_epilogue (FILE *file,\n \t Java is 13.  Objective-C is 14.  Objective-C++ isn't assigned\n \t a number, so for now use 9.  LTO and Go aren't assigned numbers\n \t either, so for now use 0.  */\n-      if (! strcmp (language_string, \"GNU C\")\n+      if (lang_GNU_C ()\n \t  || ! strcmp (language_string, \"GNU GIMPLE\")\n \t  || ! strcmp (language_string, \"GNU Go\"))\n \ti = 0;\n@@ -25442,7 +25442,7 @@ rs6000_output_function_epilogue (FILE *file,\n \ti = 2;\n       else if (! strcmp (language_string, \"GNU Ada\"))\n \ti = 3;\n-      else if (! strcmp (language_string, \"GNU C++\")\n+      else if (lang_GNU_CXX ()\n \t       || ! strcmp (language_string, \"GNU Objective-C++\"))\n \ti = 9;\n       else if (! strcmp (language_string, \"GNU Java\"))"}, {"sha": "1f04f72cbb53e5754ed3ff69b2e65bd19b53556c", "filename": "gcc/dbxout.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc9706615ef48df3c0bfa8a44b29bba52563f3e/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc9706615ef48df3c0bfa8a44b29bba52563f3e/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=dcc9706615ef48df3c0bfa8a44b29bba52563f3e", "patch": "@@ -946,10 +946,9 @@ static unsigned int ATTRIBUTE_UNUSED\n get_lang_number (void)\n {\n   const char *language_string = lang_hooks.name;\n-\n-  if (strcmp (language_string, \"GNU C\") == 0)\n+  if (lang_GNU_C ())\n     return N_SO_C;\n-  else if (strcmp (language_string, \"GNU C++\") == 0)\n+  else if (lang_GNU_CXX ())\n     return N_SO_CC;\n   else if (strcmp (language_string, \"GNU F77\") == 0)\n     return N_SO_FORTRAN;\n@@ -2167,7 +2166,7 @@ dbxout_type (tree type, int full)\n \t\t\t\t   access == access_protected_node\n \t\t\t\t   ? '1' :'0');\n \t\t    if (BINFO_VIRTUAL_P (child)\n-\t\t\t&& (strcmp (lang_hooks.name, \"GNU C++\") == 0\n+\t\t\t&& (lang_GNU_CXX ()\n \t\t\t    || strcmp (lang_hooks.name, \"GNU Objective-C++\") == 0))\n \t\t      /* For a virtual base, print the (negative)\n \t\t     \t offset within the vtable where we must look\n@@ -3028,7 +3027,7 @@ dbxout_symbol_location (tree decl, tree type, const char *suffix, rtx home)\n \t     we rely on the fact that error_mark_node initializers always\n \t     end up in bss for C++ and never end up in bss for C.  */\n \t  if (DECL_INITIAL (decl) == 0\n-\t      || (!strcmp (lang_hooks.name, \"GNU C++\")\n+\t      || (lang_GNU_CXX ()\n \t\t  && DECL_INITIAL (decl) == error_mark_node))\n \t    {\n \t      int offs;"}, {"sha": "3d50ac984f307cce0247a127bbe57485d2f353bc", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 48, "deletions": 6, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc9706615ef48df3c0bfa8a44b29bba52563f3e/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc9706615ef48df3c0bfa8a44b29bba52563f3e/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=dcc9706615ef48df3c0bfa8a44b29bba52563f3e", "patch": "@@ -16741,9 +16741,18 @@ add_bit_size_attribute (dw_die_ref die, tree decl)\n static inline void\n add_prototyped_attribute (dw_die_ref die, tree func_type)\n {\n-  if (get_AT_unsigned (comp_unit_die (), DW_AT_language) == DW_LANG_C89\n-      && prototype_p (func_type))\n-    add_AT_flag (die, DW_AT_prototyped, 1);\n+  switch (get_AT_unsigned (comp_unit_die (), DW_AT_language))\n+    {\n+    case DW_LANG_C:\n+    case DW_LANG_C89:\n+    case DW_LANG_C99:\n+    case DW_LANG_ObjC:\n+      if (prototype_p (func_type))\n+\tadd_AT_flag (die, DW_AT_prototyped, 1);\n+      break;\n+    default:\n+      break;\n+    }\n }\n \n /* Add an 'abstract_origin' attribute below a given DIE.  The DIE is found\n@@ -19503,6 +19512,30 @@ gen_producer_string (void)\n   return producer;\n }\n \n+/* Given a C and/or C++ language/version string return the \"highest\".\n+   C++ is assumed to be \"higher\" than C in this case.  Used for merging\n+   LTO translation unit languages.  */\n+static const char *\n+highest_c_language (const char *lang1, const char *lang2)\n+{\n+  if (strcmp (\"GNU C++14\", lang1) == 0 || strcmp (\"GNU C++14\", lang2) == 0)\n+    return \"GNU C++14\";\n+  if (strcmp (\"GNU C++11\", lang1) == 0 || strcmp (\"GNU C++11\", lang2) == 0)\n+    return \"GNU C++11\";\n+  if (strcmp (\"GNU C++98\", lang1) == 0 || strcmp (\"GNU C++98\", lang2) == 0)\n+    return \"GNU C++98\";\n+\n+  if (strcmp (\"GNU C11\", lang1) == 0 || strcmp (\"GNU C11\", lang2) == 0)\n+    return \"GNU C11\";\n+  if (strcmp (\"GNU C99\", lang1) == 0 || strcmp (\"GNU C99\", lang2) == 0)\n+    return \"GNU C99\";\n+  if (strcmp (\"GNU C89\", lang1) == 0 || strcmp (\"GNU C89\", lang2) == 0)\n+    return \"GNU C89\";\n+\n+  gcc_unreachable ();\n+}\n+\n+\n /* Generate the DIE for the compilation unit.  */\n \n static dw_die_ref\n@@ -19543,7 +19576,8 @@ gen_compile_unit_die (const char *filename)\n \t  else if (strncmp (common_lang, \"GNU C\", 5) == 0\n \t\t    && strncmp (TRANSLATION_UNIT_LANGUAGE (t), \"GNU C\", 5) == 0)\n \t    /* Mixing C and C++ is ok, use C++ in that case.  */\n-\t    common_lang = \"GNU C++\";\n+\t    common_lang = highest_c_language (common_lang,\n+\t\t\t\t\t      TRANSLATION_UNIT_LANGUAGE (t));\n \t  else\n \t    {\n \t      /* Fall back to C.  */\n@@ -19556,8 +19590,16 @@ gen_compile_unit_die (const char *filename)\n \tlanguage_string = common_lang;\n     }\n \n-  language = DW_LANG_C89;\n-  if (strcmp (language_string, \"GNU C++\") == 0)\n+  language = DW_LANG_C;\n+  if (strncmp (language_string, \"GNU C\", 5) == 0\n+      && (language_string[5] == 0 || ISDIGIT (language_string[5])))\n+    {\n+      language = DW_LANG_C89;\n+      if (dwarf_version >= 3 || !dwarf_strict)\n+\tif (strcmp (language_string, \"GNU C99\") == 0)\n+\t  language = DW_LANG_C99;\n+    }\n+  else if (strncmp (language_string, \"GNU C++\", 7) == 0)\n     language = DW_LANG_C_plus_plus;\n   else if (strcmp (language_string, \"GNU F77\") == 0)\n     language = DW_LANG_Fortran77;"}, {"sha": "04a195c2bf8b4af77cac2274b4eb004a72a5a378", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc9706615ef48df3c0bfa8a44b29bba52563f3e/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc9706615ef48df3c0bfa8a44b29bba52563f3e/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=dcc9706615ef48df3c0bfa8a44b29bba52563f3e", "patch": "@@ -4683,7 +4683,7 @@ fold_cond_expr_with_comparison (location_t loc, tree type,\n \t as an lvalue in the C++ front-end.  PR c++/19199.  */\n       && (in_gimple_form\n \t  || VECTOR_TYPE_P (type)\n-\t  || (strcmp (lang_hooks.name, \"GNU C++\") != 0\n+\t  || (! lang_GNU_CXX ()\n \t      && strcmp (lang_hooks.name, \"GNU Objective-C++\") != 0)\n \t  || ! maybe_lvalue_p (arg1)\n \t  || ! maybe_lvalue_p (arg2)))"}, {"sha": "e24dabbb2e0fd9189a0092d4e2697e3f6498198e", "filename": "gcc/langhooks.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc9706615ef48df3c0bfa8a44b29bba52563f3e/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc9706615ef48df3c0bfa8a44b29bba52563f3e/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=dcc9706615ef48df3c0bfa8a44b29bba52563f3e", "patch": "@@ -709,3 +709,20 @@ lhd_enum_underlying_base_type (const_tree enum_type)\n   return lang_hooks.types.type_for_size (TYPE_PRECISION (enum_type),\n \t\t\t\t\t TYPE_UNSIGNED (enum_type));\n }\n+\n+/* Returns true if the current lang_hooks represents the GNU C frontend.  */\n+\n+bool\n+lang_GNU_C (void)\n+{\n+  return (strncmp (lang_hooks.name, \"GNU C\", 5) == 0\n+\t  && (lang_hooks.name[5] == '\\0' || ISDIGIT (lang_hooks.name[5])));\n+}\n+\n+/* Returns true if the current lang_hooks represents the GNU C++ frontend.  */\n+\n+bool\n+lang_GNU_CXX (void)\n+{\n+  return strncmp (lang_hooks.name, \"GNU C++\", 7) == 0;\n+}"}, {"sha": "6ab8b0f321d3458eb56cba7eac75b6e879b125f3", "filename": "gcc/langhooks.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc9706615ef48df3c0bfa8a44b29bba52563f3e/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc9706615ef48df3c0bfa8a44b29bba52563f3e/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=dcc9706615ef48df3c0bfa8a44b29bba52563f3e", "patch": "@@ -261,7 +261,8 @@ struct lang_hooks_for_lto\n \n struct lang_hooks\n {\n-  /* String identifying the front end.  e.g. \"GNU C++\".  */\n+  /* String identifying the front end and optionally language standard\n+     version, e.g. \"GNU C++98\" or \"GNU Java\".  */\n   const char *name;\n \n   /* sizeof (struct lang_identifier), so make_node () creates\n@@ -503,5 +504,10 @@ extern tree add_builtin_function_ext_scope (const char *name, tree type,\n \t\t\t\t\t    const char *library_name,\n \t\t\t\t\t    tree attrs);\n extern tree add_builtin_type (const char *name, tree type);\n+\n+/* Language helper functions.  */\n+\n+extern bool lang_GNU_C (void);\n+extern bool lang_GNU_CXX (void);\n  \n #endif /* GCC_LANG_HOOKS_H */"}, {"sha": "3f21c30dbbdbc75a01a1e54f254e5b422d7e5c71", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc9706615ef48df3c0bfa8a44b29bba52563f3e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc9706615ef48df3c0bfa8a44b29bba52563f3e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dcc9706615ef48df3c0bfa8a44b29bba52563f3e", "patch": "@@ -1,3 +1,9 @@\n+2014-11-20  Mark Wielaard  <mjw@redhat.com>\n+\n+\tPR debug/38757\n+\t* gcc.dg/debug/dwarf2/lang-c89.c: New test.\n+\t* gcc.dg/debug/dwarf2/lang-c99.c: Likewise.\n+\n 2014-11-21  Ilya Tocar  <ilya.tocar@intel.com>\n \n \t* g++.dg/other/i386-2.C: Add -mclwb."}, {"sha": "6292cf8f9c99070f598186c65af50531f3b6cb42", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/lang-c89.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc9706615ef48df3c0bfa8a44b29bba52563f3e/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Flang-c89.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc9706615ef48df3c0bfa8a44b29bba52563f3e/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Flang-c89.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Flang-c89.c?ref=dcc9706615ef48df3c0bfa8a44b29bba52563f3e", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -std=c89 -g -dA\" } */\n+/* DW_LANG_C89 = 0x0001 */\n+/* { dg-final { scan-assembler \"0x1.*DW_AT_language\" } } */\n+\n+int version;"}, {"sha": "d09d31636f0bcdeda9c575e0141c8b0b73bf9763", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/lang-c99.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc9706615ef48df3c0bfa8a44b29bba52563f3e/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Flang-c99.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc9706615ef48df3c0bfa8a44b29bba52563f3e/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Flang-c99.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Flang-c99.c?ref=dcc9706615ef48df3c0bfa8a44b29bba52563f3e", "patch": "@@ -0,0 +1,6 @@\n+// { dg-do compile }\n+// { dg-options \"-O -std=c99 -gdwarf-3 -dA\" }\n+// DW_LANG_C99 = 0x000c\n+// { dg-final { scan-assembler \"0xc.*DW_AT_language\" } } */\n+\n+int version;"}, {"sha": "6cf33e4a61aa8215a389c146e6771178c85c8d62", "filename": "gcc/vmsdbgout.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc9706615ef48df3c0bfa8a44b29bba52563f3e/gcc%2Fvmsdbgout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc9706615ef48df3c0bfa8a44b29bba52563f3e/gcc%2Fvmsdbgout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvmsdbgout.c?ref=dcc9706615ef48df3c0bfa8a44b29bba52563f3e", "patch": "@@ -1460,9 +1460,9 @@ vmsdbgout_init (const char *filename)\n \n   lookup_filename (primary_filename);\n \n-  if (!strcmp (language_string, \"GNU C\"))\n+  if (lang_GNU_C ())\n     module_language = DST_K_C;\n-  else if (!strcmp (language_string, \"GNU C++\"))\n+  else if (lang_GNU_CXX ())\n     module_language = DST_K_CXX;\n   else if (!strcmp (language_string, \"GNU Ada\"))\n     module_language = DST_K_ADA;"}]}