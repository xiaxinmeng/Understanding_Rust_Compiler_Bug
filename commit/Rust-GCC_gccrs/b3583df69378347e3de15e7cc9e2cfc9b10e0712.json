{"sha": "b3583df69378347e3de15e7cc9e2cfc9b10e0712", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM1ODNkZjY5Mzc4MzQ3ZTNkZTE1ZTdjYzllMmNmYzliMTBlMDcxMg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2004-07-04T21:09:37Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-07-04T21:09:37Z"}, "message": "mips.h (MASK_DEBUG_C, [...]): Delete.\n\n\t* config/mips/mips.h (MASK_DEBUG_C, TARGET_DEBUG_C_MODE): Delete.\n\t(TARGET_SWITCHES): Remove -mdebugc.\n\t* config/mips/mips.md (seq, sne, sgt, sge, slt, sle, sgtu, sgeu)\n\t(sltu, sleu): Remove TARGET_DEBUG_C_MODE handling.\n\t(seq_[sd]i, sne_[sd]i, sge_[sd]i, sle_[sd]i_reg, sgeu_[sd]i)\n\t(sle_[sd]i_reg): Delete.\n\nFrom-SVN: r84095", "tree": {"sha": "37cb1db921babdd8ac3aa5ef296a03fa5135a48f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37cb1db921babdd8ac3aa5ef296a03fa5135a48f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3583df69378347e3de15e7cc9e2cfc9b10e0712", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3583df69378347e3de15e7cc9e2cfc9b10e0712", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3583df69378347e3de15e7cc9e2cfc9b10e0712", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3583df69378347e3de15e7cc9e2cfc9b10e0712/comments", "author": null, "committer": null, "parents": [{"sha": "78c2120290eb47211ebb1d47c4ebe26a516467bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78c2120290eb47211ebb1d47c4ebe26a516467bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78c2120290eb47211ebb1d47c4ebe26a516467bf"}], "stats": {"total": 455, "additions": 29, "deletions": 426}, "files": [{"sha": "c0ca7e780721e9bc7a38a7a0b8bb9d117f56fcf8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3583df69378347e3de15e7cc9e2cfc9b10e0712/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3583df69378347e3de15e7cc9e2cfc9b10e0712/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b3583df69378347e3de15e7cc9e2cfc9b10e0712", "patch": "@@ -1,3 +1,12 @@\n+2004-07-04  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips.h (MASK_DEBUG_C, TARGET_DEBUG_C_MODE): Delete.\n+\t(TARGET_SWITCHES): Remove -mdebugc.\n+\t* config/mips/mips.md (seq, sne, sgt, sge, slt, sle, sgtu, sgeu)\n+\t(sltu, sleu): Remove TARGET_DEBUG_C_MODE handling.\n+\t(seq_[sd]i, sne_[sd]i, sge_[sd]i, sle_[sd]i_reg, sgeu_[sd]i)\n+\t(sle_[sd]i_reg): Delete.\n+\n 2004-07-04  Steven Bosscher  <stevenb@suse.de>\n \n \t* config/iq2000/iq2000.c (TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE):"}, {"sha": "1722041c542fd8903cc59208a109f8aa096decd0", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3583df69378347e3de15e7cc9e2cfc9b10e0712/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3583df69378347e3de15e7cc9e2cfc9b10e0712/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=b3583df69378347e3de15e7cc9e2cfc9b10e0712", "patch": "@@ -176,7 +176,6 @@ extern const struct mips_cpu_info *mips_tune_info;\n \n \t\t\t\t\t/* Debug switches, not documented */\n #define MASK_DEBUG\t0\t\t/* unused */\n-#define MASK_DEBUG_C\t0\t\t/* don't expand seq, etc.  */\n #define MASK_DEBUG_D\t0\t\t/* don't do define_split's */\n \n \t\t\t\t\t/* Dummy switches used only in specs */\n@@ -197,7 +196,6 @@ extern const struct mips_cpu_info *mips_tune_info;\n \n \t\t\t\t\t/* Debug Modes */\n #define TARGET_DEBUG_MODE\t(target_flags & MASK_DEBUG)\n-#define TARGET_DEBUG_C_MODE\t(target_flags & MASK_DEBUG_C)\n #define TARGET_DEBUG_D_MODE\t(target_flags & MASK_DEBUG_D)\n \n \t\t\t\t\t/* Reg. Naming in .s ($21 vs. $a0) */\n@@ -672,8 +670,6 @@ extern const struct mips_cpu_info *mips_tune_info;\n      N_(\"FP exceptions are not enabled\") },\t\t\t\t\\\n   {\"debug\",\t\t  MASK_DEBUG,\t\t\t\t\t\\\n      NULL},\t\t\t\t\t\t\t\t\\\n-  {\"debugc\",\t\t  MASK_DEBUG_C,\t\t\t\t\t\\\n-     NULL},\t\t\t\t\t\t\t\t\\\n   {\"debugd\",\t\t  MASK_DEBUG_D,\t\t\t\t\t\\\n      NULL},\t\t\t\t\t\t\t\t\\\n   {\"\",\t\t\t  (TARGET_DEFAULT\t\t\t\t\\"}, {"sha": "6323ae3ee96077d25f0a015f89d3024e89e11993", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 20, "deletions": 422, "changes": 442, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3583df69378347e3de15e7cc9e2cfc9b10e0712/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3583df69378347e3de15e7cc9e2cfc9b10e0712/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=b3583df69378347e3de15e7cc9e2cfc9b10e0712", "patch": "@@ -6318,20 +6318,8 @@ dsrl\\t%3,%3,1\\n\\\n   if (branch_type != CMP_SI && (!TARGET_64BIT || branch_type != CMP_DI))\n     FAIL;\n \n-  /* Set up operands from compare.  */\n-  operands[1] = branch_cmp[0];\n-  operands[2] = branch_cmp[1];\n-\n-  if (TARGET_64BIT || !TARGET_DEBUG_C_MODE || TARGET_MIPS16)\n-    {\n-      gen_int_relational (EQ, operands[0], operands[1], operands[2], (int *)0);\n-      DONE;\n-    }\n-\n-  if (GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) < 0)\n-    operands[2] = force_reg (SImode, operands[2]);\n-\n-  /* Fall through and generate default code.  */\n+  gen_int_relational (EQ, operands[0], branch_cmp[0], branch_cmp[1], NULL);\n+  DONE;\n })\n \n \n@@ -6371,59 +6359,6 @@ dsrl\\t%3,%3,1\\n\\\n   [(set_attr \"type\"\t\"slt\")\n    (set_attr \"mode\"\t\"DI\")])\n \n-(define_insn \"seq_si\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n-\t(eq:SI (match_operand:SI 1 \"register_operand\" \"%d,d\")\n-\t       (match_operand:SI 2 \"uns_arith_operand\" \"d,K\")))]\n-  \"TARGET_DEBUG_C_MODE && !TARGET_MIPS16\"\n-  \"@\n-   xor\\t%0,%1,%2\\;sltu\\t%0,%0,1\n-   xori\\t%0,%1,%2\\;sltu\\t%0,%0,1\"\n-  [(set_attr \"type\"\t\"multi\")\n-   (set_attr \"mode\"\t\"SI\")\n-   (set_attr \"length\"\t\"8\")])\n-\n-(define_split\n-  [(set (match_operand:SI 0 \"register_operand\")\n-\t(eq:SI (match_operand:SI 1 \"register_operand\")\n-\t       (match_operand:SI 2 \"uns_arith_operand\")))]\n-  \"TARGET_DEBUG_C_MODE && !TARGET_DEBUG_D_MODE && !TARGET_MIPS16\n-    && (GET_CODE (operands[2]) != CONST_INT || INTVAL (operands[2]) != 0)\"\n-  [(set (match_dup 0)\n-\t(xor:SI (match_dup 1)\n-\t\t(match_dup 2)))\n-   (set (match_dup 0)\n-\t(ltu:SI (match_dup 0)\n-\t\t(const_int 1)))]\n-  \"\")\n-\n-(define_insn \"seq_di\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n-\t(eq:DI (match_operand:DI 1 \"register_operand\" \"%d,d\")\n-\t       (match_operand:DI 2 \"uns_arith_operand\" \"d,K\")))]\n-  \"TARGET_64BIT && TARGET_DEBUG_C_MODE && !TARGET_MIPS16\"\n-  \"@\n-   xor\\t%0,%1,%2\\;sltu\\t%0,%0,1\n-   xori\\t%0,%1,%2\\;sltu\\t%0,%0,1\"\n-  [(set_attr \"type\"\t\"multi\")\n-   (set_attr \"mode\"\t\"DI\")\n-   (set_attr \"length\"\t\"8\")])\n-\n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\")\n-\t(eq:DI (match_operand:DI 1 \"register_operand\")\n-\t       (match_operand:DI 2 \"uns_arith_operand\")))]\n-  \"TARGET_64BIT && TARGET_DEBUG_C_MODE && !TARGET_DEBUG_D_MODE\n-    && !TARGET_MIPS16\n-    && (GET_CODE (operands[2]) != CONST_INT || INTVAL (operands[2]) != 0)\"\n-  [(set (match_dup 0)\n-\t(xor:DI (match_dup 1)\n-\t\t(match_dup 2)))\n-   (set (match_dup 0)\n-\t(ltu:DI (match_dup 0)\n-\t\t(const_int 1)))]\n-  \"\")\n-\n ;; On the mips16 the default code is better than using sltu.\n \n (define_expand \"sne\"\n@@ -6435,20 +6370,8 @@ dsrl\\t%3,%3,1\\n\\\n   if (branch_type != CMP_SI && (!TARGET_64BIT || branch_type != CMP_DI))\n     FAIL;\n \n-  /* Set up operands from compare.  */\n-  operands[1] = branch_cmp[0];\n-  operands[2] = branch_cmp[1];\n-\n-  if (TARGET_64BIT || !TARGET_DEBUG_C_MODE)\n-    {\n-      gen_int_relational (NE, operands[0], operands[1], operands[2], (int *)0);\n-      DONE;\n-    }\n-\n-  if (GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) < 0)\n-    operands[2] = force_reg (SImode, operands[2]);\n-\n-  /* Fall through and generate default code.  */\n+  gen_int_relational (NE, operands[0], branch_cmp[0], branch_cmp[1], NULL);\n+  DONE;\n })\n \n (define_insn \"sne_si_zero\"\n@@ -6469,59 +6392,6 @@ dsrl\\t%3,%3,1\\n\\\n   [(set_attr \"type\"\t\"slt\")\n    (set_attr \"mode\"\t\"DI\")])\n \n-(define_insn \"sne_si\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n-\t(ne:SI (match_operand:SI 1 \"register_operand\" \"%d,d\")\n-\t       (match_operand:SI 2 \"uns_arith_operand\" \"d,K\")))]\n-  \"TARGET_DEBUG_C_MODE && !TARGET_MIPS16\"\n-  \"@\n-    xor\\t%0,%1,%2\\;sltu\\t%0,%.,%0\n-    xori\\t%0,%1,%x2\\;sltu\\t%0,%.,%0\"\n-  [(set_attr \"type\"\t\"multi\")\n-   (set_attr \"mode\"\t\"SI\")\n-   (set_attr \"length\"\t\"8\")])\n-\n-(define_split\n-  [(set (match_operand:SI 0 \"register_operand\")\n-\t(ne:SI (match_operand:SI 1 \"register_operand\")\n-\t       (match_operand:SI 2 \"uns_arith_operand\")))]\n-  \"TARGET_DEBUG_C_MODE && !TARGET_DEBUG_D_MODE && !TARGET_MIPS16\n-    && (GET_CODE (operands[2]) != CONST_INT || INTVAL (operands[2]) != 0)\"\n-  [(set (match_dup 0)\n-\t(xor:SI (match_dup 1)\n-\t\t(match_dup 2)))\n-   (set (match_dup 0)\n-\t(gtu:SI (match_dup 0)\n-\t\t(const_int 0)))]\n-  \"\")\n-\n-(define_insn \"sne_di\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n-\t(ne:DI (match_operand:DI 1 \"register_operand\" \"%d,d\")\n-\t       (match_operand:DI 2 \"uns_arith_operand\" \"d,K\")))]\n-  \"TARGET_64BIT && TARGET_DEBUG_C_MODE && !TARGET_MIPS16\"\n-  \"@\n-    xor\\t%0,%1,%2\\;sltu\\t%0,%.,%0\n-    xori\\t%0,%1,%x2\\;sltu\\t%0,%.,%0\"\n-  [(set_attr \"type\"\t\"multi\")\n-   (set_attr \"mode\"\t\"DI\")\n-   (set_attr \"length\"\t\"8\")])\n-\n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\")\n-\t(ne:DI (match_operand:DI 1 \"register_operand\")\n-\t       (match_operand:DI 2 \"uns_arith_operand\")))]\n-  \"TARGET_64BIT && TARGET_DEBUG_C_MODE && !TARGET_DEBUG_D_MODE\n-    && !TARGET_MIPS16\n-    && (GET_CODE (operands[2]) != CONST_INT || INTVAL (operands[2]) != 0)\"\n-  [(set (match_dup 0)\n-\t(xor:DI (match_dup 1)\n-\t\t(match_dup 2)))\n-   (set (match_dup 0)\n-\t(gtu:DI (match_dup 0)\n-\t\t(const_int 0)))]\n-  \"\")\n-\n (define_expand \"sgt\"\n   [(set (match_operand:SI 0 \"register_operand\")\n \t(gt:SI (match_dup 1)\n@@ -6531,20 +6401,8 @@ dsrl\\t%3,%3,1\\n\\\n   if (branch_type != CMP_SI && (!TARGET_64BIT || branch_type != CMP_DI))\n     FAIL;\n \n-  /* Set up operands from compare.  */\n-  operands[1] = branch_cmp[0];\n-  operands[2] = branch_cmp[1];\n-\n-  if (TARGET_64BIT || !TARGET_DEBUG_C_MODE || TARGET_MIPS16)\n-    {\n-      gen_int_relational (GT, operands[0], operands[1], operands[2], (int *)0);\n-      DONE;\n-    }\n-\n-  if (GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) != 0)\n-    operands[2] = force_reg (SImode, operands[2]);\n-\n-  /* Fall through and generate default code.  */\n+  gen_int_relational (GT, operands[0], branch_cmp[0], branch_cmp[1], NULL);\n+  DONE;\n })\n \n (define_insn \"sgt_si\"\n@@ -6592,66 +6450,10 @@ dsrl\\t%3,%3,1\\n\\\n   if (branch_type != CMP_SI && (!TARGET_64BIT || branch_type != CMP_DI))\n     FAIL;\n \n-  /* Set up operands from compare.  */\n-  operands[1] = branch_cmp[0];\n-  operands[2] = branch_cmp[1];\n-\n-  if (TARGET_64BIT || !TARGET_DEBUG_C_MODE || TARGET_MIPS16)\n-    {\n-      gen_int_relational (GE, operands[0], operands[1], operands[2], (int *)0);\n-      DONE;\n-    }\n-\n-  /* Fall through and generate default code.  */\n+  gen_int_relational (GE, operands[0], branch_cmp[0], branch_cmp[1], NULL);\n+  DONE;\n })\n \n-(define_insn \"sge_si\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(ge:SI (match_operand:SI 1 \"register_operand\" \"d\")\n-\t       (match_operand:SI 2 \"arith_operand\" \"dI\")))]\n-  \"TARGET_DEBUG_C_MODE && !TARGET_MIPS16\"\n-  \"slt\\t%0,%1,%2\\;xori\\t%0,%0,0x0001\"\n-  [(set_attr \"type\"\t\"multi\")\n-   (set_attr \"mode\"\t\"SI\")\n-   (set_attr \"length\"\t\"8\")])\n-\n-(define_split\n-  [(set (match_operand:SI 0 \"register_operand\")\n-\t(ge:SI (match_operand:SI 1 \"register_operand\")\n-\t       (match_operand:SI 2 \"arith_operand\")))]\n-  \"TARGET_DEBUG_C_MODE && !TARGET_DEBUG_D_MODE && !TARGET_MIPS16\"\n-  [(set (match_dup 0)\n-\t(lt:SI (match_dup 1)\n-\t       (match_dup 2)))\n-   (set (match_dup 0)\n-\t(xor:SI (match_dup 0)\n-\t\t(const_int 1)))]\n-  \"\")\n-\n-(define_insn \"sge_di\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(ge:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t       (match_operand:DI 2 \"arith_operand\" \"dI\")))]\n-  \"TARGET_64BIT && TARGET_DEBUG_C_MODE && !TARGET_MIPS16\"\n-  \"slt\\t%0,%1,%2\\;xori\\t%0,%0,0x0001\"\n-  [(set_attr \"type\"\t\"multi\")\n-   (set_attr \"mode\"\t\"DI\")\n-   (set_attr \"length\"\t\"8\")])\n-\n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\")\n-\t(ge:DI (match_operand:DI 1 \"register_operand\")\n-\t       (match_operand:DI 2 \"arith_operand\")))]\n-  \"TARGET_64BIT && TARGET_DEBUG_C_MODE && !TARGET_DEBUG_D_MODE\n-   && !TARGET_MIPS16\"\n-  [(set (match_dup 0)\n-\t(lt:DI (match_dup 1)\n-\t       (match_dup 2)))\n-   (set (match_dup 0)\n-\t(xor:DI (match_dup 0)\n-\t\t(const_int 1)))]\n-  \"\")\n-\n (define_expand \"slt\"\n   [(set (match_operand:SI 0 \"register_operand\")\n \t(lt:SI (match_dup 1)\n@@ -6661,17 +6463,8 @@ dsrl\\t%3,%3,1\\n\\\n   if (branch_type != CMP_SI && (!TARGET_64BIT || branch_type != CMP_DI))\n     FAIL;\n \n-  /* Set up operands from compare.  */\n-  operands[1] = branch_cmp[0];\n-  operands[2] = branch_cmp[1];\n-\n-  if (TARGET_64BIT || !TARGET_DEBUG_C_MODE || TARGET_MIPS16)\n-    {\n-      gen_int_relational (LT, operands[0], operands[1], operands[2], (int *)0);\n-      DONE;\n-    }\n-\n-  /* Fall through and generate default code.  */\n+  gen_int_relational (LT, operands[0], branch_cmp[0], branch_cmp[1], NULL);\n+  DONE;\n })\n \n (define_insn \"slt_si\"\n@@ -6729,20 +6522,8 @@ dsrl\\t%3,%3,1\\n\\\n   if (branch_type != CMP_SI && (!TARGET_64BIT || branch_type != CMP_DI))\n     FAIL;\n \n-  /* Set up operands from compare.  */\n-  operands[1] = branch_cmp[0];\n-  operands[2] = branch_cmp[1];\n-\n-  if (TARGET_64BIT || !TARGET_DEBUG_C_MODE || TARGET_MIPS16)\n-    {\n-      gen_int_relational (LE, operands[0], operands[1], operands[2], (int *)0);\n-      DONE;\n-    }\n-\n-  if (GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) >= 32767)\n-    operands[2] = force_reg (SImode, operands[2]);\n-\n-  /* Fall through and generate default code.  */\n+  gen_int_relational (LE, operands[0], branch_cmp[0], branch_cmp[1], NULL);\n+  DONE;\n })\n \n (define_insn \"sle_si_const\"\n@@ -6799,53 +6580,6 @@ dsrl\\t%3,%3,1\\n\\\n \t\t\t\t      (const_int 4)\n \t\t\t\t      (const_int 8)))])\n \n-(define_insn \"sle_si_reg\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(le:SI (match_operand:SI 1 \"register_operand\" \"d\")\n-\t       (match_operand:SI 2 \"register_operand\" \"d\")))]\n-  \"TARGET_DEBUG_C_MODE && !TARGET_MIPS16\"\n-  \"slt\\t%0,%z2,%1\\;xori\\t%0,%0,0x0001\"\n-  [(set_attr \"type\"\t\"multi\")\n-   (set_attr \"mode\"\t\"SI\")\n-   (set_attr \"length\"\t\"8\")])\n-\n-(define_split\n-  [(set (match_operand:SI 0 \"register_operand\")\n-\t(le:SI (match_operand:SI 1 \"register_operand\")\n-\t       (match_operand:SI 2 \"register_operand\")))]\n-  \"TARGET_DEBUG_C_MODE && !TARGET_DEBUG_D_MODE && !TARGET_MIPS16\"\n-  [(set (match_dup 0)\n-\t(lt:SI (match_dup 2)\n-\t       (match_dup 1)))\n-   (set (match_dup 0)\n-\t(xor:SI (match_dup 0)\n-\t\t(const_int 1)))]\n-  \"\")\n-\n-(define_insn \"sle_di_reg\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(le:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t       (match_operand:DI 2 \"register_operand\" \"d\")))]\n-  \"TARGET_64BIT && TARGET_DEBUG_C_MODE && !TARGET_MIPS16\"\n-  \"slt\\t%0,%z2,%1\\;xori\\t%0,%0,0x0001\"\n-  [(set_attr \"type\"\t\"multi\")\n-   (set_attr \"mode\"\t\"DI\")\n-   (set_attr \"length\"\t\"8\")])\n-\n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\")\n-\t(le:DI (match_operand:DI 1 \"register_operand\")\n-\t       (match_operand:DI 2 \"register_operand\")))]\n-  \"TARGET_64BIT && TARGET_DEBUG_C_MODE && !TARGET_DEBUG_D_MODE\n-   && !TARGET_MIPS16\"\n-  [(set (match_dup 0)\n-\t(lt:DI (match_dup 2)\n-\t       (match_dup 1)))\n-   (set (match_dup 0)\n-\t(xor:DI (match_dup 0)\n-\t\t(const_int 1)))]\n-  \"\")\n-\n (define_expand \"sgtu\"\n   [(set (match_operand:SI 0 \"register_operand\")\n \t(gtu:SI (match_dup 1)\n@@ -6855,20 +6589,8 @@ dsrl\\t%3,%3,1\\n\\\n   if (branch_type != CMP_SI && (!TARGET_64BIT || branch_type != CMP_DI))\n     FAIL;\n \n-  /* Set up operands from compare.  */\n-  operands[1] = branch_cmp[0];\n-  operands[2] = branch_cmp[1];\n-\n-  if (TARGET_64BIT || !TARGET_DEBUG_C_MODE || TARGET_MIPS16)\n-    {\n-      gen_int_relational (GTU, operands[0], operands[1], operands[2], (int *)0);\n-      DONE;\n-    }\n-\n-  if (GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) != 0)\n-    operands[2] = force_reg (SImode, operands[2]);\n-\n-  /* Fall through and generate default code.  */\n+  gen_int_relational (GTU, operands[0], branch_cmp[0], branch_cmp[1], NULL);\n+  DONE;\n })\n \n (define_insn \"sgtu_si\"\n@@ -6916,66 +6638,10 @@ dsrl\\t%3,%3,1\\n\\\n   if (branch_type != CMP_SI && (!TARGET_64BIT || branch_type != CMP_DI))\n     FAIL;\n \n-  /* Set up operands from compare.  */\n-  operands[1] = branch_cmp[0];\n-  operands[2] = branch_cmp[1];\n-\n-  if (TARGET_64BIT || !TARGET_DEBUG_C_MODE || TARGET_MIPS16)\n-    {\n-      gen_int_relational (GEU, operands[0], operands[1], operands[2], (int *)0);\n-      DONE;\n-    }\n-\n-  /* Fall through and generate default code.  */\n+  gen_int_relational (GEU, operands[0], branch_cmp[0], branch_cmp[1], NULL);\n+  DONE;\n })\n \n-(define_insn \"sgeu_si\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(geu:SI (match_operand:SI 1 \"register_operand\" \"d\")\n-\t\t(match_operand:SI 2 \"arith_operand\" \"dI\")))]\n-  \"TARGET_DEBUG_C_MODE && !TARGET_MIPS16\"\n-  \"sltu\\t%0,%1,%2\\;xori\\t%0,%0,0x0001\"\n-  [(set_attr \"type\"\t\"multi\")\n-   (set_attr \"mode\"\t\"SI\")\n-   (set_attr \"length\"\t\"8\")])\n-\n-(define_split\n-  [(set (match_operand:SI 0 \"register_operand\")\n-\t(geu:SI (match_operand:SI 1 \"register_operand\")\n-\t\t(match_operand:SI 2 \"arith_operand\")))]\n-  \"TARGET_DEBUG_C_MODE && !TARGET_DEBUG_D_MODE && !TARGET_MIPS16\"\n-  [(set (match_dup 0)\n-\t(ltu:SI (match_dup 1)\n-\t\t(match_dup 2)))\n-   (set (match_dup 0)\n-\t(xor:SI (match_dup 0)\n-\t\t(const_int 1)))]\n-  \"\")\n-\n-(define_insn \"sgeu_di\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(geu:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t\t(match_operand:DI 2 \"arith_operand\" \"dI\")))]\n-  \"TARGET_64BIT && TARGET_DEBUG_C_MODE && !TARGET_MIPS16\"\n-  \"sltu\\t%0,%1,%2\\;xori\\t%0,%0,0x0001\"\n-  [(set_attr \"type\"\t\"multi\")\n-   (set_attr \"mode\"\t\"DI\")\n-   (set_attr \"length\"\t\"8\")])\n-\n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\")\n-\t(geu:DI (match_operand:DI 1 \"register_operand\")\n-\t\t(match_operand:DI 2 \"arith_operand\")))]\n-  \"TARGET_64BIT && TARGET_DEBUG_C_MODE && !TARGET_DEBUG_D_MODE\n-   && !TARGET_MIPS16\"\n-  [(set (match_dup 0)\n-\t(ltu:DI (match_dup 1)\n-\t\t(match_dup 2)))\n-   (set (match_dup 0)\n-\t(xor:DI (match_dup 0)\n-\t\t(const_int 1)))]\n-  \"\")\n-\n (define_expand \"sltu\"\n   [(set (match_operand:SI 0 \"register_operand\")\n \t(ltu:SI (match_dup 1)\n@@ -6985,17 +6651,8 @@ dsrl\\t%3,%3,1\\n\\\n   if (branch_type != CMP_SI && (!TARGET_64BIT || branch_type != CMP_DI))\n     FAIL;\n \n-  /* Set up operands from compare.  */\n-  operands[1] = branch_cmp[0];\n-  operands[2] = branch_cmp[1];\n-\n-  if (TARGET_64BIT || !TARGET_DEBUG_C_MODE || TARGET_MIPS16)\n-    {\n-      gen_int_relational (LTU, operands[0], operands[1], operands[2], (int *)0);\n-      DONE;\n-    }\n-\n-  /* Fall through and generate default code.  */\n+  gen_int_relational (LTU, operands[0], branch_cmp[0], branch_cmp[1], NULL);\n+  DONE;\n })\n \n (define_insn \"sltu_si\"\n@@ -7053,20 +6710,8 @@ dsrl\\t%3,%3,1\\n\\\n   if (branch_type != CMP_SI && (!TARGET_64BIT || branch_type != CMP_DI))\n     FAIL;\n \n-  /* Set up operands from compare.  */\n-  operands[1] = branch_cmp[0];\n-  operands[2] = branch_cmp[1];\n-\n-  if (TARGET_64BIT || !TARGET_DEBUG_C_MODE || TARGET_MIPS16)\n-    {\n-      gen_int_relational (LEU, operands[0], operands[1], operands[2], (int *)0);\n-      DONE;\n-    }\n-\n-  if (GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) >= 32767)\n-    operands[2] = force_reg (SImode, operands[2]);\n-\n-  /* Fall through and generate default code.  */\n+  gen_int_relational (LEU, operands[0], branch_cmp[0], branch_cmp[1], NULL);\n+  DONE;\n })\n \n (define_insn \"sleu_si_const\"\n@@ -7122,53 +6767,6 @@ dsrl\\t%3,%3,1\\n\\\n    (set (attr \"length\") (if_then_else (match_operand:VOID 2 \"m16_uimm8_m1_1\")\n \t\t\t\t      (const_int 4)\n \t\t\t\t      (const_int 8)))])\n-\n-(define_insn \"sleu_si_reg\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(leu:SI (match_operand:SI 1 \"register_operand\" \"d\")\n-\t\t(match_operand:SI 2 \"register_operand\" \"d\")))]\n-  \"TARGET_DEBUG_C_MODE && !TARGET_MIPS16\"\n-  \"sltu\\t%0,%z2,%1\\;xori\\t%0,%0,0x0001\"\n-  [(set_attr \"type\"\t\"multi\")\n-   (set_attr \"mode\"\t\"SI\")\n-   (set_attr \"length\"\t\"8\")])\n-\n-(define_split\n-  [(set (match_operand:SI 0 \"register_operand\")\n-\t(leu:SI (match_operand:SI 1 \"register_operand\")\n-\t\t(match_operand:SI 2 \"register_operand\")))]\n-  \"TARGET_DEBUG_C_MODE && !TARGET_DEBUG_D_MODE && !TARGET_MIPS16\"\n-  [(set (match_dup 0)\n-\t(ltu:SI (match_dup 2)\n-\t\t(match_dup 1)))\n-   (set (match_dup 0)\n-\t(xor:SI (match_dup 0)\n-\t\t(const_int 1)))]\n-  \"\")\n-\n-(define_insn \"sleu_di_reg\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(leu:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t\t(match_operand:DI 2 \"register_operand\" \"d\")))]\n-  \"TARGET_64BIT && TARGET_DEBUG_C_MODE && !TARGET_MIPS16\"\n-  \"sltu\\t%0,%z2,%1\\;xori\\t%0,%0,0x0001\"\n-  [(set_attr \"type\"\t\"multi\")\n-   (set_attr \"mode\"\t\"DI\")\n-   (set_attr \"length\"\t\"8\")])\n-\n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\")\n-\t(leu:DI (match_operand:DI 1 \"register_operand\")\n-\t\t(match_operand:DI 2 \"register_operand\")))]\n-  \"TARGET_64BIT && TARGET_DEBUG_C_MODE && !TARGET_DEBUG_D_MODE\n-   && !TARGET_MIPS16\"\n-  [(set (match_dup 0)\n-\t(ltu:DI (match_dup 2)\n-\t\t(match_dup 1)))\n-   (set (match_dup 0)\n-\t(xor:DI (match_dup 0)\n-\t\t(const_int 1)))]\n-  \"\")\n \f\n ;;\n ;;  ...................."}]}