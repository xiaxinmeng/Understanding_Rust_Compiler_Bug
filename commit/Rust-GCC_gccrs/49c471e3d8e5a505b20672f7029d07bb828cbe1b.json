{"sha": "49c471e3d8e5a505b20672f7029d07bb828cbe1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDljNDcxZTNkOGU1YTUwNWIyMDY3MmY3MDI5ZDA3YmI4MjhjYmUxYg==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2011-04-19T16:35:33Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2011-04-19T16:35:33Z"}, "message": "ipa-cp.c (ipcp_process_devirtualization_opportunities): Devirtualize also according to actual contants.\n\n2011-04-19  Martin Jambor  <mjambor@suse.cz>\n\n\t* ipa-cp.c (ipcp_process_devirtualization_opportunities): Devirtualize\n\talso according to actual contants.\n\t* gimple-fold.c (gimple_extract_devirt_binfo_from_cst): New function.\n\t(gimple_fold_call): Use it.\n\t* gimple.h (gimple_extract_devirt_binfo_from_cst): Declare.\n\n\t* testsuite/g++.dg/opt/devirt1.C: Bump to -O2, remove XFAIL.\n\t* testsuite/g++.dg/opt/devirt2.C: New test.\n\t* testsuite/g++.dg/ipa/devirt-g-1.C: Likewise.\n\nFrom-SVN: r172719", "tree": {"sha": "f6f04a6735e023b75b60f7849bf8007b8c56b69d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6f04a6735e023b75b60f7849bf8007b8c56b69d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49c471e3d8e5a505b20672f7029d07bb828cbe1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49c471e3d8e5a505b20672f7029d07bb828cbe1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49c471e3d8e5a505b20672f7029d07bb828cbe1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49c471e3d8e5a505b20672f7029d07bb828cbe1b/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9714ca724859e90773df206f552937ddc4da004c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9714ca724859e90773df206f552937ddc4da004c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9714ca724859e90773df206f552937ddc4da004c"}], "stats": {"total": 219, "additions": 187, "deletions": 32}, "files": [{"sha": "5c44ebda4f4c72adeccc8112f41c8ef1589366cf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49c471e3d8e5a505b20672f7029d07bb828cbe1b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49c471e3d8e5a505b20672f7029d07bb828cbe1b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=49c471e3d8e5a505b20672f7029d07bb828cbe1b", "patch": "@@ -1,3 +1,11 @@\n+2011-04-19  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* ipa-cp.c (ipcp_process_devirtualization_opportunities): Devirtualize\n+\talso according to actual contants.\n+\t* gimple-fold.c (gimple_extract_devirt_binfo_from_cst): New function.\n+\t(gimple_fold_call): Use it.\n+\t* gimple.h (gimple_extract_devirt_binfo_from_cst): Declare.\n+\n 2011-04-19  Martin Jambor  <mjambor@suse.cz>\n \n \t* ipa-prop.c (stmt_may_be_vtbl_ptr_store): Return false for scalar"}, {"sha": "8d3ab6eb1ff087ab9e04925b06d951bb41d90668", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 88, "deletions": 3, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49c471e3d8e5a505b20672f7029d07bb828cbe1b/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49c471e3d8e5a505b20672f7029d07bb828cbe1b/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=49c471e3d8e5a505b20672f7029d07bb828cbe1b", "patch": "@@ -1445,6 +1445,74 @@ gimple_adjust_this_by_delta (gimple_stmt_iterator *gsi, tree delta)\n   gimple_call_set_arg (call_stmt, 0, tmp);\n }\n \n+/* Return a binfo to be used for devirtualization of calls based on an object\n+   represented by a declaration (i.e. a global or automatically allocated one)\n+   or NULL if it cannot be found or is not safe.  CST is expected to be an\n+   ADDR_EXPR of such object or the function will return NULL.  Currently it is\n+   safe to use such binfo only if it has no base binfo (i.e. no ancestors).  */\n+\n+tree\n+gimple_extract_devirt_binfo_from_cst (tree cst)\n+{\n+  HOST_WIDE_INT offset, size, max_size;\n+  tree base, type, expected_type, binfo;\n+  bool last_artificial = false;\n+\n+  if (!flag_devirtualize\n+      || TREE_CODE (cst) != ADDR_EXPR\n+      || TREE_CODE (TREE_TYPE (TREE_TYPE (cst))) != RECORD_TYPE)\n+    return NULL_TREE;\n+\n+  cst = TREE_OPERAND (cst, 0);\n+  expected_type = TREE_TYPE (cst);\n+  base = get_ref_base_and_extent (cst, &offset, &size, &max_size);\n+  type = TREE_TYPE (base);\n+  if (!DECL_P (base)\n+      || max_size == -1\n+      || max_size != size\n+      || TREE_CODE (type) != RECORD_TYPE)\n+    return NULL_TREE;\n+\n+  /* Find the sub-object the constant actually refers to and mark whether it is\n+     an artificial one (as opposed to a user-defined one).  */\n+  while (true)\n+    {\n+      HOST_WIDE_INT pos, size;\n+      tree fld;\n+\n+      if (TYPE_MAIN_VARIANT (type) == TYPE_MAIN_VARIANT (expected_type))\n+\tbreak;\n+      if (offset < 0)\n+\treturn NULL_TREE;\n+\n+      for (fld = TYPE_FIELDS (type); fld; fld = DECL_CHAIN (fld))\n+\t{\n+\t  if (TREE_CODE (fld) != FIELD_DECL)\n+\t    continue;\n+\n+\t  pos = int_bit_position (fld);\n+\t  size = tree_low_cst (DECL_SIZE (fld), 1);\n+\t  if (pos <= offset && (pos + size) > offset)\n+\t    break;\n+\t}\n+      if (!fld || TREE_CODE (TREE_TYPE (fld)) != RECORD_TYPE)\n+\treturn NULL_TREE;\n+\n+      last_artificial = DECL_ARTIFICIAL (fld);\n+      type = TREE_TYPE (fld);\n+      offset -= pos;\n+    }\n+  /* Artifical sub-objects are ancestors, we do not want to use them for\n+     devirtualization, at least not here.  */\n+  if (last_artificial)\n+    return NULL_TREE;\n+  binfo = TYPE_BINFO (type);\n+  if (!binfo || BINFO_N_BASE_BINFOS (binfo) > 0)\n+    return NULL_TREE;\n+  else\n+    return binfo;\n+}\n+\n /* Attempt to fold a call statement referenced by the statement iterator GSI.\n    The statement may be replaced by another statement, e.g., if the call\n    simplifies to a constant value. Return true if any changes were made.\n@@ -1473,10 +1541,27 @@ gimple_fold_call (gimple_stmt_iterator *gsi, bool inplace)\n \n   /* Check for virtual calls that became direct calls.  */\n   callee = gimple_call_fn (stmt);\n-  if (TREE_CODE (callee) == OBJ_TYPE_REF\n-      && gimple_call_addr_fndecl (OBJ_TYPE_REF_EXPR (callee)) != NULL_TREE)\n+  if (TREE_CODE (callee) == OBJ_TYPE_REF)\n     {\n-      gimple_call_set_fn (stmt, OBJ_TYPE_REF_EXPR (callee));\n+      tree binfo, fndecl, delta, obj;\n+      HOST_WIDE_INT token;\n+\n+      if (gimple_call_addr_fndecl (OBJ_TYPE_REF_EXPR (callee)) != NULL_TREE)\n+\t{\n+\t  gimple_call_set_fn (stmt, OBJ_TYPE_REF_EXPR (callee));\n+\t  return true;\n+\t}\n+\n+      obj = OBJ_TYPE_REF_OBJECT (callee);\n+      binfo = gimple_extract_devirt_binfo_from_cst (obj);\n+      if (!binfo)\n+\treturn false;\n+      token = TREE_INT_CST_LOW (OBJ_TYPE_REF_TOKEN (callee));\n+      fndecl = gimple_get_virt_method_for_binfo (token, binfo, &delta, false);\n+      if (!fndecl)\n+\treturn false;\n+      gcc_assert (integer_zerop (delta));\n+      gimple_call_set_fndecl (stmt, fndecl);\n       return true;\n     }\n "}, {"sha": "322ce99eb5cdd134154c173f38b7c30777de2a41", "filename": "gcc/gimple.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49c471e3d8e5a505b20672f7029d07bb828cbe1b/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49c471e3d8e5a505b20672f7029d07bb828cbe1b/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=49c471e3d8e5a505b20672f7029d07bb828cbe1b", "patch": "@@ -898,6 +898,7 @@ const char *gimple_decl_printable_name (tree, int);\n bool gimple_fold_call (gimple_stmt_iterator *gsi, bool inplace);\n tree gimple_get_virt_method_for_binfo (HOST_WIDE_INT, tree, tree *, bool);\n void gimple_adjust_this_by_delta (gimple_stmt_iterator *, tree);\n+tree gimple_extract_devirt_binfo_from_cst (tree);\n /* Returns true iff T is a valid GIMPLE statement.  */\n extern bool is_gimple_stmt (tree);\n "}, {"sha": "270e58a95d5a916f0eeec5bef3fb6668a2f67e84", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 47, "deletions": 27, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49c471e3d8e5a505b20672f7029d07bb828cbe1b/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49c471e3d8e5a505b20672f7029d07bb828cbe1b/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=49c471e3d8e5a505b20672f7029d07bb828cbe1b", "patch": "@@ -1246,51 +1246,71 @@ ipcp_process_devirtualization_opportunities (struct cgraph_node *node)\n \n   for (ie = node->indirect_calls; ie; ie = next_ie)\n     {\n-      int param_index, types_count, j;\n+      int param_index;\n       HOST_WIDE_INT token, anc_offset;\n       tree target, delta, otr_type;\n+      struct ipcp_lattice *lat;\n \n       next_ie = ie->next_callee;\n       if (!ie->indirect_info->polymorphic)\n \tcontinue;\n       param_index = ie->indirect_info->param_index;\n-      if (param_index == -1\n-\t  || ipa_param_cannot_devirtualize_p (info, param_index)\n-\t  || ipa_param_types_vec_empty (info, param_index))\n+      if (param_index == -1)\n \tcontinue;\n \n+      lat = ipcp_get_lattice (info, param_index);\n       token = ie->indirect_info->otr_token;\n       anc_offset = ie->indirect_info->anc_offset;\n       otr_type = ie->indirect_info->otr_type;\n       target = NULL_TREE;\n-      types_count = VEC_length (tree, info->params[param_index].types);\n-      for (j = 0; j < types_count; j++)\n+      if (lat->type == IPA_CONST_VALUE)\n \t{\n-\t  tree binfo = VEC_index (tree, info->params[param_index].types, j);\n-\t  tree d, t;\n-\n+\t  tree binfo = gimple_extract_devirt_binfo_from_cst (lat->constant);\n+\t  if (!binfo)\n+\t    continue;\n \t  binfo = get_binfo_at_offset (binfo, anc_offset, otr_type);\n \t  if (!binfo)\n-\t    {\n-\t      target = NULL_TREE;\n-\t      break;\n-\t    }\n+\t    continue;\n+\t  target = gimple_get_virt_method_for_binfo (token, binfo, &delta,\n+\t\t\t\t\t\t     false);\n+\t}\n+      else\n+\t{\n+\t  int  types_count, j;\n \n-\t  t = gimple_get_virt_method_for_binfo (token, binfo, &d, true);\n-\t  if (!t)\n-\t    {\n-\t      target = NULL_TREE;\n-\t      break;\n-\t    }\n-\t  else if (!target)\n-\t    {\n-\t      target = t;\n-\t      delta = d;\n-\t    }\n-\t  else if (target != t || !tree_int_cst_equal (delta, d))\n+\t  if (ipa_param_cannot_devirtualize_p (info, param_index)\n+\t      || ipa_param_types_vec_empty (info, param_index))\n+\t    continue;\n+\n+\t  types_count = VEC_length (tree, info->params[param_index].types);\n+\t  for (j = 0; j < types_count; j++)\n \t    {\n-\t      target = NULL_TREE;\n-\t      break;\n+\t      tree binfo = VEC_index (tree, info->params[param_index].types, j);\n+\t      tree d, t;\n+\n+\t      binfo = get_binfo_at_offset (binfo, anc_offset, otr_type);\n+\t      if (!binfo)\n+\t\t{\n+\t\t  target = NULL_TREE;\n+\t\t  break;\n+\t\t}\n+\n+\t      t = gimple_get_virt_method_for_binfo (token, binfo, &d, true);\n+\t      if (!t)\n+\t\t{\n+\t\t  target = NULL_TREE;\n+\t\t  break;\n+\t\t}\n+\t      else if (!target)\n+\t\t{\n+\t\t  target = t;\n+\t\t  delta = d;\n+\t\t}\n+\t      else if (target != t || !tree_int_cst_equal (delta, d))\n+\t\t{\n+\t\t  target = NULL_TREE;\n+\t\t  break;\n+\t\t}\n \t    }\n \t}\n "}, {"sha": "71c4556ea0e0c2c87bd81c0fd5119ea425ab80e7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49c471e3d8e5a505b20672f7029d07bb828cbe1b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49c471e3d8e5a505b20672f7029d07bb828cbe1b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=49c471e3d8e5a505b20672f7029d07bb828cbe1b", "patch": "@@ -1,3 +1,9 @@\n+2011-04-19  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* g++.dg/opt/devirt1.C: Bump to -O2, remove XFAIL.\n+\t* g++.dg/opt/devirt2.C: New test.\n+\t* g++.dg/ipa/devirt-g-1.C: Likewise.\n+\n 2011-04-19  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/48588"}, {"sha": "175f24efbbd7d55b44c3eeaebf215e62e899c390", "filename": "gcc/testsuite/g++.dg/ipa/devirt-g-1.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49c471e3d8e5a505b20672f7029d07bb828cbe1b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-g-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49c471e3d8e5a505b20672f7029d07bb828cbe1b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-g-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-g-1.C?ref=49c471e3d8e5a505b20672f7029d07bb828cbe1b", "patch": "@@ -0,0 +1,24 @@\n+// { dg-do compile }\n+// { dg-options \"-O2 -fdump-ipa-cp -fdump-tree-optimized\" }\n+\n+struct S { S(); virtual void xyzzy(); void otherstuff(); };\n+struct R { int a; S s; R(); };\n+S s;\n+R r;\n+\n+void S::xyzzy ()\n+{\n+  otherstuff ();\n+  otherstuff ();\n+}\n+\n+static void __attribute__ ((noinline)) foo(S *p) { p->xyzzy(); }\n+void bar() {foo(&s); }\n+\n+static void __attribute__ ((noinline)) foh(S *p) { p->xyzzy(); }\n+void bah() {foh(&r.s); }\n+\n+/* { dg-final { scan-ipa-dump \"Discovered a virtual call to a known target.*S::xyzzy\" \"cp\"  } } */\n+/* { dg-final { scan-tree-dump-times \"OBJ_TYPE_REF\" 0 \"optimized\"} } */\n+/* { dg-final { cleanup-ipa-dump \"cp\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "f9b4dc2fc31b87b0286f4461f4eba3bd8d930ae1", "filename": "gcc/testsuite/g++.dg/opt/devirt1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49c471e3d8e5a505b20672f7029d07bb828cbe1b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fdevirt1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49c471e3d8e5a505b20672f7029d07bb828cbe1b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fdevirt1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fdevirt1.C?ref=49c471e3d8e5a505b20672f7029d07bb828cbe1b", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n-// { dg-options \"-O\" }\n-// { dg-final { scan-assembler \"xyzzy\" { xfail *-*-* } } }\n+// { dg-options \"-O2\" }\n+// { dg-final { scan-assembler \"xyzzy\" } }\n \n struct S { S(); virtual void xyzzy(); };\n inline void foo(S *s) { s->xyzzy(); }"}, {"sha": "087dd17911535913719a10724b39e1e8a0478636", "filename": "gcc/testsuite/g++.dg/opt/devirt2.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49c471e3d8e5a505b20672f7029d07bb828cbe1b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fdevirt2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49c471e3d8e5a505b20672f7029d07bb828cbe1b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fdevirt2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fdevirt2.C?ref=49c471e3d8e5a505b20672f7029d07bb828cbe1b", "patch": "@@ -0,0 +1,11 @@\n+// { dg-do compile }\n+// { dg-options \"-O2\" }\n+// { dg-final { scan-assembler-times \"xyzzy\" 2 } }\n+\n+struct S { S(); virtual void xyzzy(); };\n+struct R { int a; S s; R(); };\n+S s;\n+R r;\n+inline void foo(S *p) { p->xyzzy(); }\n+void bar() {foo(&s);}\n+void bah() {foo(&r.s);}"}]}