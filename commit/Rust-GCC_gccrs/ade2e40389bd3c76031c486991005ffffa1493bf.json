{"sha": "ade2e40389bd3c76031c486991005ffffa1493bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWRlMmU0MDM4OWJkM2M3NjAzMWM0ODY5OTEwMDVmZmZmYTE0OTNiZg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2011-05-14T16:02:07Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2011-05-14T16:02:07Z"}, "message": "lang.opt (fdump-core): Re-add as ignored option for backward compatibility.\n\n2011-05-14  Tobias Burnus  <burnus@net-b.de>\n\n        * lang.opt (fdump-core): Re-add as ignored option\n        for backward compatibility.\n\n2011-05-14  Tobias Burnus  <burnus@net-b.de>\n\n        * runtime/stop.c (error_stop_string, error_stop_numeric):\n        Do not backtrace for ERROR STOP.\n\nFrom-SVN: r173760", "tree": {"sha": "51bc0cc0a9f5d12f4fca028b7b7323b517303bec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51bc0cc0a9f5d12f4fca028b7b7323b517303bec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ade2e40389bd3c76031c486991005ffffa1493bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ade2e40389bd3c76031c486991005ffffa1493bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ade2e40389bd3c76031c486991005ffffa1493bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ade2e40389bd3c76031c486991005ffffa1493bf/comments", "author": null, "committer": null, "parents": [{"sha": "858afbce4e8d52320d652848502620c0f922d592", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/858afbce4e8d52320d652848502620c0f922d592", "html_url": "https://github.com/Rust-GCC/gccrs/commit/858afbce4e8d52320d652848502620c0f922d592"}], "stats": {"total": 139, "additions": 75, "deletions": 64}, "files": [{"sha": "a4a5509a97da8ab79b632b54b0e75b5b499a0b79", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ade2e40389bd3c76031c486991005ffffa1493bf/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ade2e40389bd3c76031c486991005ffffa1493bf/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ade2e40389bd3c76031c486991005ffffa1493bf", "patch": "@@ -1,3 +1,8 @@\n+2011-05-14  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* lang.opt (fdump-core): Re-add as ignored option\n+\tfor backward compatibility.\n+\n 2011-05-14  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \tPR libfortran/48915"}, {"sha": "1a3d073b3fbb9a668a7fcecfb4f67d806e8d917b", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ade2e40389bd3c76031c486991005ffffa1493bf/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ade2e40389bd3c76031c486991005ffffa1493bf/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=ade2e40389bd3c76031c486991005ffffa1493bf", "patch": "@@ -366,6 +366,10 @@ fdollar-ok\n Fortran\n Allow dollar signs in entity names\n \n+fdump-core\n+Fortran Ignore\n+Does nothing. Preserved for backward compatibility.\n+\n fdump-fortran-original\n Fortran\n Display the code tree after parsing"}, {"sha": "a17ec2dd8ab0203a076f0152928708a1833ee263", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 65, "deletions": 60, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ade2e40389bd3c76031c486991005ffffa1493bf/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ade2e40389bd3c76031c486991005ffffa1493bf/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=ade2e40389bd3c76031c486991005ffffa1493bf", "patch": "@@ -1,73 +1,78 @@\n+2011-05-14  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* runtime/stop.c (error_stop_string, error_stop_numeric):\n+\tDo not backtrace for ERROR STOP.\n+\n 2011-05-14  Janne Blomqvist  <jb@gcc.gnu.org>\n \n-        PR libfortran/48915\n-        * intrinsics/abort.c (abort): Call sys_abort().\n-        * io/unix.c (st_vprintf): Call sys_abort().\n-        * libgfortran.h (options_t): Remove dump_core member.\n-        (handler): Rename to backtrace_handler.\n-        (compile_options_t): Remove dump_core member.\n-        (sys_exit): Remove.\n-        (sys_abort): New function.\n-        * runtime/backtrace.c (show_backtrace): Print a message if\n+\tPR libfortran/48915\n+\t* intrinsics/abort.c (abort): Call sys_abort().\n+\t* io/unix.c (st_vprintf): Call sys_abort().\n+\t* libgfortran.h (options_t): Remove dump_core member.\n+\t(handler): Rename to backtrace_handler.\n+\t(compile_options_t): Remove dump_core member.\n+\t(sys_exit): Remove.\n+\t(sys_abort): New function.\n+\t* runtime/backtrace.c (show_backtrace): Print a message if\n \tbacktrace is not available on target, update filter symbol name\n \tdue to backtrace_handler renaming.\n-        * runtime/compile_options.c (backtrace_handler): New\n+\t* runtime/compile_options.c (backtrace_handler): New\n \timplementation based on example in Glibc manual.\n-        (set_options): Remove dump_core handling, make signal handler\n+\t(set_options): Remove dump_core handling, make signal handler\n \thandle more signals.\n-        (init_compile_options): Remove dump_core.\n-        * runtime/environ.c (variable_table[]): Remove\n+\t(init_compile_options): Remove dump_core.\n+\t* runtime/environ.c (variable_table[]): Remove\n \tGFORTRAN_ERROR_DUMPCORE element.\n-        (show_variables): Update name, call exit().\n-        * runtime/error.c (sys_exit): Remove.\n-        (sys_abort): New function.\n-        (recursion_check): Call sys_abort().\n-        (os_error): Call exit().\n-        (runtime_error): Likewise.\n-        (runtime_error_at): Likewise.\n-        (internal_error): Likewise.\n-        (generate_error): Likewise.\n-        (notify_std): Likewise.\n-        * runtime/stop.c (stop_numeric): Call exit().\n-        (stop_numeric_f08): Likewise.\n-        (stop_string): Likewise.\n-        (error_stop_string): Call sys_abort().\n-        (error_stop_numeric): Print backtrace, exit with provided code.\n+\t(show_variables): Update name, call exit().\n+\t* runtime/error.c (sys_exit): Remove.\n+\t(sys_abort): New function.\n+\t(recursion_check): Call sys_abort().\n+\t(os_error): Call exit().\n+\t(runtime_error): Likewise.\n+\t(runtime_error_at): Likewise.\n+\t(internal_error): Likewise.\n+\t(generate_error): Likewise.\n+\t(notify_std): Likewise.\n+\t* runtime/stop.c (stop_numeric): Call exit().\n+\t(stop_numeric_f08): Likewise.\n+\t(stop_string): Likewise.\n+\t(error_stop_string): Call sys_abort().\n+\t(error_stop_numeric): Print backtrace, exit with provided code.\n \n 2011-05-14  Janne Blomqvist  <jb@gcc.gnu.org>\n \n-        * io/unix.c (st_vprintf,st_printf): Move to runtime/error.c.\n-        * libgfortran.h (struct options_t): Remove use_stderr field.\n-        (st_vprintf,st_printf): Move prototypes.\n-        (estr_write): New prototype.\n-        * runtime/error.c (sys_exit): Use estr_write instead of st_printf.\n-        (estr_write): New function.\n-        (st_vprintf): Move from io/unix.c, use stack allocated buffer,\n-        always output to stderr.\n-        (st_printf): Move from io/unix.c.\n-        (show_locus): Use a local variable instead of static.\n-        (os_error): Use estr_write instead of st_printf.\n-        (runtime_error): Likewise.\n-        (runtime_error_at): Likewise.\n-        (runtime_warning_at): Likewise.\n-        (internal_error): Likewise.\n-        (generate_error): Likewise.\n-        (generate_warning): Likewise.\n-        (notify_std): Likewise.\n-        * runtime/pause.c (do_pause): Likewise.\n-        (pause_string): Likewise.\n-        * runtime/stop.c (stop_string): Likewise.\n-        (error_stop_string): Likewise.\n-        * config/fpu_aix.h (set_fpu): Likewise.\n-        * config/fpu_generic.h (set_fpu): Likewise.\n-        * config/fpu_glibc.h (set_fpu): Likewise.\n-        * config/fpu-sysv.h (set_fpu): Likewise.\n-        * runtime/backtrace.c (dump_glibc_backtrace): Likewise.\n-        (show_backtrace): Likewise.\n-        * runtime/environ.c (print_spaces): Likewise.\n-        (show_string): Likewise.\n-        (show_variables): Likewise.\n-        (variable_table[]): Remove GFORTRAN_USE_STDERR entry.\n+\t* io/unix.c (st_vprintf,st_printf): Move to runtime/error.c.\n+\t* libgfortran.h (struct options_t): Remove use_stderr field.\n+\t(st_vprintf,st_printf): Move prototypes.\n+\t(estr_write): New prototype.\n+\t* runtime/error.c (sys_exit): Use estr_write instead of st_printf.\n+\t(estr_write): New function.\n+\t(st_vprintf): Move from io/unix.c, use stack allocated buffer,\n+\talways output to stderr.\n+\t(st_printf): Move from io/unix.c.\n+\t(show_locus): Use a local variable instead of static.\n+\t(os_error): Use estr_write instead of st_printf.\n+\t(runtime_error): Likewise.\n+\t(runtime_error_at): Likewise.\n+\t(runtime_warning_at): Likewise.\n+\t(internal_error): Likewise.\n+\t(generate_error): Likewise.\n+\t(generate_warning): Likewise.\n+\t(notify_std): Likewise.\n+\t* runtime/pause.c (do_pause): Likewise.\n+\t(pause_string): Likewise.\n+\t* runtime/stop.c (stop_string): Likewise.\n+\t(error_stop_string): Likewise.\n+\t* config/fpu_aix.h (set_fpu): Likewise.\n+\t* config/fpu_generic.h (set_fpu): Likewise.\n+\t* config/fpu_glibc.h (set_fpu): Likewise.\n+\t* config/fpu-sysv.h (set_fpu): Likewise.\n+\t* runtime/backtrace.c (dump_glibc_backtrace): Likewise.\n+\t(show_backtrace): Likewise.\n+\t* runtime/environ.c (print_spaces): Likewise.\n+\t(show_string): Likewise.\n+\t(show_variables): Likewise.\n+\t(variable_table[]): Remove GFORTRAN_USE_STDERR entry.\n \n 2011-05-14  Tobias Burnus  <burnus@net-b.de>\n "}, {"sha": "4c3a0f99c89e9e2010a3bc2e1400e8625cda6643", "filename": "libgfortran/runtime/stop.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ade2e40389bd3c76031c486991005ffffa1493bf/libgfortran%2Fruntime%2Fstop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ade2e40389bd3c76031c486991005ffffa1493bf/libgfortran%2Fruntime%2Fstop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fstop.c?ref=ade2e40389bd3c76031c486991005ffffa1493bf", "patch": "@@ -92,7 +92,7 @@ error_stop_string (const char *string, GFC_INTEGER_4 len)\n   (void) sizeof (w); /* Avoid compiler warning about not using w.  */\n   estr_write (\"\\n\");\n \n-  sys_abort ();\n+  exit (1);\n }\n \n \n@@ -106,8 +106,5 @@ void\n error_stop_numeric (GFC_INTEGER_4 code)\n {\n   st_printf (\"ERROR STOP %d\\n\", (int) code);\n-  if (options.backtrace == 1\n-      || (options.backtrace == -1 && compile_options.backtrace == 1))\n-    show_backtrace ();\n   exit (code);\n }"}]}