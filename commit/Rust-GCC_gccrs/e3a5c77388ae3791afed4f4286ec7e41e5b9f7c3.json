{"sha": "e3a5c77388ae3791afed4f4286ec7e41e5b9f7c3", "node_id": "C_kwDOANBUbNoAKGUzYTVjNzczODhhZTM3OTFhZmVkNGY0Mjg2ZWM3ZTQxZTViOWY3YzM", "commit": {"author": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2022-06-29T23:56:56Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2022-06-29T23:57:15Z"}, "message": "libgccjit: Fix bug where unary_op will return an integer type instead of the correct type\n\n2022-06-29  Antoni Boucher  <bouanto@zoho.com>\n\ngcc/jit/\n\tPR jit/105812\n\t* jit-playback.cc: Use the correct return type when folding in\n\tas_truth_value.\n\ngcc/testsuite/\n\tPR jit/105812\n\t* jit.dg/test-asm.cc: Add include missing to make the test pass.\n\t* jit.dg/test-pr105812-bool-operations.c: New test.", "tree": {"sha": "8e87a2bd6f58c2ef0ea0f9407a39c74ec7cdf000", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e87a2bd6f58c2ef0ea0f9407a39c74ec7cdf000"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3a5c77388ae3791afed4f4286ec7e41e5b9f7c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3a5c77388ae3791afed4f4286ec7e41e5b9f7c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3a5c77388ae3791afed4f4286ec7e41e5b9f7c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3a5c77388ae3791afed4f4286ec7e41e5b9f7c3/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3183acc8e0452fbc0ad429a909811ca0308c86c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3183acc8e0452fbc0ad429a909811ca0308c86c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3183acc8e0452fbc0ad429a909811ca0308c86c9"}], "stats": {"total": 93, "additions": 92, "deletions": 1}, "files": [{"sha": "d227d36283a8af2a5d50acdb3369cda3c622ed09", "filename": "gcc/jit/jit-playback.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3a5c77388ae3791afed4f4286ec7e41e5b9f7c3/gcc%2Fjit%2Fjit-playback.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3a5c77388ae3791afed4f4286ec7e41e5b9f7c3/gcc%2Fjit%2Fjit-playback.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.cc?ref=e3a5c77388ae3791afed4f4286ec7e41e5b9f7c3", "patch": "@@ -1024,8 +1024,9 @@ as_truth_value (tree expr, location *loc)\n   if (loc)\n     set_tree_location (typed_zero, loc);\n \n+  tree type = TREE_TYPE (expr);\n   expr = fold_build2_loc (UNKNOWN_LOCATION,\n-    NE_EXPR, integer_type_node, expr, typed_zero);\n+    NE_EXPR, type, expr, typed_zero);\n   if (loc)\n     set_tree_location (expr, loc);\n "}, {"sha": "d436f582351e4cff34998473ca0965e3fa0df499", "filename": "gcc/testsuite/jit.dg/test-asm.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3a5c77388ae3791afed4f4286ec7e41e5b9f7c3/gcc%2Ftestsuite%2Fjit.dg%2Ftest-asm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3a5c77388ae3791afed4f4286ec7e41e5b9f7c3/gcc%2Ftestsuite%2Fjit.dg%2Ftest-asm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-asm.cc?ref=e3a5c77388ae3791afed4f4286ec7e41e5b9f7c3", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile { target x86_64-*-* } } */\n \n+#include <stdint.h>\n #include \"libgccjit++.h\"\n \n #include \"harness.h\""}, {"sha": "1daa1c3c35a13ec40a39b1c01dc3d1f9d4361003", "filename": "gcc/testsuite/jit.dg/test-pr105812-bool-operations.c", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3a5c77388ae3791afed4f4286ec7e41e5b9f7c3/gcc%2Ftestsuite%2Fjit.dg%2Ftest-pr105812-bool-operations.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3a5c77388ae3791afed4f4286ec7e41e5b9f7c3/gcc%2Ftestsuite%2Fjit.dg%2Ftest-pr105812-bool-operations.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-pr105812-bool-operations.c?ref=e3a5c77388ae3791afed4f4286ec7e41e5b9f7c3", "patch": "@@ -0,0 +1,89 @@\n+#include \"libgccjit.h\"\n+\n+#include \"harness.h\"\n+\n+void\n+create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+  gcc_jit_type* bool_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_BOOL);\n+  gcc_jit_type* bool_ptr_type =\n+    gcc_jit_type_get_pointer (gcc_jit_type_get_aligned (bool_type, 1));\n+\n+  /* Function 1 */\n+\n+  gcc_jit_param* param1 = gcc_jit_context_new_param (ctxt, NULL, bool_type,\n+\t\t\t\t\t\t     \"param1\");\n+  gcc_jit_function* function1 =\n+    gcc_jit_context_new_function (ctxt, NULL,\n+\t\t\t\t  GCC_JIT_FUNCTION_EXPORTED, bool_type,\n+\t\t\t\t  \"function1\", 1, &param1, 0);\n+  gcc_jit_block* block1 = gcc_jit_function_new_block (function1, \"start1\");\n+\n+  gcc_jit_lvalue* var1 =\n+    gcc_jit_function_new_local (function1, NULL, bool_type, \"var1\");\n+  gcc_jit_rvalue* addr1 =\n+    gcc_jit_lvalue_get_address (var1, NULL);\n+  gcc_jit_rvalue* ptr1 =\n+    gcc_jit_context_new_cast (ctxt, NULL, addr1, bool_ptr_type);\n+  gcc_jit_lvalue* deref1 =\n+    gcc_jit_rvalue_dereference (ptr1, NULL);\n+  gcc_jit_rvalue* param1_rvalue =\n+    gcc_jit_param_as_rvalue (param1);\n+  gcc_jit_block_add_assignment (block1, NULL, deref1, param1_rvalue);\n+\n+  gcc_jit_rvalue* one = gcc_jit_context_one (ctxt, bool_type);\n+  gcc_jit_block_end_with_return (block1, NULL, one);\n+\n+  /* Function 2 */\n+\n+  gcc_jit_param* param2 = gcc_jit_context_new_param (ctxt, NULL, bool_type,\n+\t\t\t\t\t\t     \"param2\");\n+  gcc_jit_function* function2 =\n+    gcc_jit_context_new_function (ctxt, NULL,\n+\t\t\t\t  GCC_JIT_FUNCTION_EXPORTED, bool_type,\n+\t\t\t\t  \"function2\", 1, &param2, 0);\n+  gcc_jit_block* block2 = gcc_jit_function_new_block (function2, \"start2\");\n+\n+  gcc_jit_lvalue* var2 =\n+    gcc_jit_function_new_local (function2, NULL, bool_type, \"var2\");\n+  gcc_jit_rvalue* addr2 =\n+    gcc_jit_lvalue_get_address (var2, NULL);\n+  gcc_jit_rvalue* ptr2 =\n+    gcc_jit_context_new_cast (ctxt, NULL, addr2, bool_ptr_type);\n+  gcc_jit_lvalue* deref2 =\n+    gcc_jit_rvalue_dereference (ptr2, NULL);\n+  gcc_jit_rvalue* param2_rvalue =\n+    gcc_jit_param_as_rvalue (param2);\n+  gcc_jit_block_add_assignment (block2, NULL, deref2, param2_rvalue);\n+\n+  gcc_jit_lvalue* return_value =\n+    gcc_jit_function_new_local (function2, NULL, bool_type, \"return_value\");\n+  gcc_jit_rvalue* call =\n+    gcc_jit_context_new_call (ctxt, NULL, function1, 1, &param2_rvalue);\n+  gcc_jit_block_add_assignment (block2, NULL, return_value, call);\n+\n+  gcc_jit_block* block2_1 =\n+    gcc_jit_function_new_block (function2, \"end2\");\n+  gcc_jit_block_end_with_jump (block2, NULL, block2_1);\n+\n+  gcc_jit_rvalue* value =\n+    gcc_jit_context_new_unary_op (ctxt, NULL,\n+\t\t\t\t  GCC_JIT_UNARY_OP_LOGICAL_NEGATE, bool_type,\n+\t\t\t\t  param2_rvalue);\n+  gcc_jit_rvalue* return_rvalue =\n+    gcc_jit_lvalue_as_rvalue (return_value);\n+  gcc_jit_rvalue* and =\n+    gcc_jit_context_new_binary_op (ctxt, NULL,\n+\t\t\t\t   GCC_JIT_BINARY_OP_BITWISE_AND, bool_type,\n+\t\t\t\t   return_rvalue, value);\n+\n+  gcc_jit_block_end_with_return (block2_1, NULL, and);\n+}\n+\n+extern void\n+verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n+{\n+  /* Verify that no errors were emitted.  */\n+  CHECK_NON_NULL (result);\n+}"}]}