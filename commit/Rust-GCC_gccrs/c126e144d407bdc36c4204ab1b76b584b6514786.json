{"sha": "c126e144d407bdc36c4204ab1b76b584b6514786", "node_id": "C_kwDOANBUbNoAKGMxMjZlMTQ0ZDQwN2JkYzM2YzQyMDRhYjFiNzZiNTg0YjY1MTQ3ODY", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2022-11-29T01:22:01Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2022-12-01T16:14:22Z"}, "message": "RISC-V: Remove tail && mask policy operand for vmclr, vmset, vmld, vmst\n\n1. vector.md: remove tail && mask policy operand for mask mode operations since\n   we don't need them according to RVV ISA.\n2. riscv-v.cc: adapt emit_pred_op for mask mode predicated mov since all RVV modes\n   including vector integer mode && vector float mode  && vector bool mode are\n   all use emit_pred_op function. For vector integer mode && vector float mode,\n   we have instruction like vle.v/vse.v that we need tail && mask policy.\n   However, for vector bool mode, the instruction is vlm/vsm that we don't need\n   tail && mask policy. So we add a condition here to add tail && mask policy operand\n   during expand if it is not a vector bool modes.\n\nThis patch is to cleanup the code and make it be consistent with RVV ISA.\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv-v.cc (emit_pred_op): Adapt for mask mode.\n\t* config/riscv/vector.md: Remove Tail && make policy operand for mask mode mov.", "tree": {"sha": "2827bb714a452e5ec6de5a53c6bbed4e838dbb71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2827bb714a452e5ec6de5a53c6bbed4e838dbb71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c126e144d407bdc36c4204ab1b76b584b6514786", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c126e144d407bdc36c4204ab1b76b584b6514786", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c126e144d407bdc36c4204ab1b76b584b6514786", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c126e144d407bdc36c4204ab1b76b584b6514786/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b16afeb3f6aacf64b9f9c50b7cb9805a9dfff63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b16afeb3f6aacf64b9f9c50b7cb9805a9dfff63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b16afeb3f6aacf64b9f9c50b7cb9805a9dfff63"}], "stats": {"total": 5, "additions": 2, "deletions": 3}, "files": [{"sha": "4992ff2470cd10c621488113c80544d01a9f3cba", "filename": "gcc/config/riscv/riscv-v.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c126e144d407bdc36c4204ab1b76b584b6514786/gcc%2Fconfig%2Friscv%2Friscv-v.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c126e144d407bdc36c4204ab1b76b584b6514786/gcc%2Fconfig%2Friscv%2Friscv-v.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-v.cc?ref=c126e144d407bdc36c4204ab1b76b584b6514786", "patch": "@@ -136,7 +136,8 @@ emit_pred_op (unsigned icode, rtx dest, rtx src, machine_mode mask_mode)\n   rtx vlmax = emit_vlmax_vsetvl (mode);\n   e.add_input_operand (vlmax, Pmode);\n \n-  e.add_policy_operand (TAIL_AGNOSTIC, MASK_AGNOSTIC);\n+  if (GET_MODE_CLASS (mode) != MODE_VECTOR_BOOL)\n+    e.add_policy_operand (TAIL_AGNOSTIC, MASK_AGNOSTIC);\n \n   e.expand ((enum insn_code) icode, MEM_P (dest) || MEM_P (src));\n }"}, {"sha": "1b822184d27ed9f149f0bdc1ee56a81a6f0ad194", "filename": "gcc/config/riscv/vector.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c126e144d407bdc36c4204ab1b76b584b6514786/gcc%2Fconfig%2Friscv%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c126e144d407bdc36c4204ab1b76b584b6514786/gcc%2Fconfig%2Friscv%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector.md?ref=c126e144d407bdc36c4204ab1b76b584b6514786", "patch": "@@ -593,8 +593,6 @@\n \t  (unspec:VB\n \t    [(match_operand:VB 1 \"vector_mask_operand\"   \"Wc1, Wc1, Wc1, Wc1, Wc1\")\n \t     (match_operand 4 \"vector_length_operand\"    \" rK,  rK,  rK,  rK,  rK\")\n-\t     (match_operand 5 \"const_int_operand\"        \"  i,   i,   i,   i,   i\")\n-\t     (match_operand 6 \"const_int_operand\"        \"  i,   i,   i,   i,   i\")\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n \t  (match_operand:VB 3 \"vector_move_operand\"      \"  m,  vr,  vr, Wc0, Wc1\")"}]}