{"sha": "29d51cdb20e564546451e1e15a87037a7543d8e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjlkNTFjZGIyMGU1NjQ1NDY0NTFlMWUxNWE4NzAzN2E3NTQzZDhlOA==", "commit": {"author": {"name": "Steven Bosscher", "email": "stevenb@suse.de", "date": "2005-05-09T17:52:20Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2005-05-09T17:52:20Z"}, "message": "calls.c (purge_reg_equiv_notes): Remove, fold into...\n\n\t* calls.c (purge_reg_equiv_notes): Remove, fold into...\n\t(fixup_tail_calls): ...here.  Only look at insns between the\n\tstart of the function and the FUNCTION_BEG insn note.\n\n\t* gcse.c (one_cprop_pass): Fix typos in dumps.\n\n\t* tree-ssa-operands.h (FOR_EACH_PHI_ARG): Fix typos.\n\nFrom-SVN: r99461", "tree": {"sha": "6ca937bbe1996a99e17b469a90f86c5b560f1d05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ca937bbe1996a99e17b469a90f86c5b560f1d05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29d51cdb20e564546451e1e15a87037a7543d8e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29d51cdb20e564546451e1e15a87037a7543d8e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29d51cdb20e564546451e1e15a87037a7543d8e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29d51cdb20e564546451e1e15a87037a7543d8e8/comments", "author": null, "committer": null, "parents": [{"sha": "73a4d10bbb438ec06e0ffee7ee11b9ed02891326", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73a4d10bbb438ec06e0ffee7ee11b9ed02891326", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73a4d10bbb438ec06e0ffee7ee11b9ed02891326"}], "stats": {"total": 71, "additions": 41, "deletions": 30}, "files": [{"sha": "49abfdd60aa669c3a8a137d339403d100b6672f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d51cdb20e564546451e1e15a87037a7543d8e8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d51cdb20e564546451e1e15a87037a7543d8e8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=29d51cdb20e564546451e1e15a87037a7543d8e8", "patch": "@@ -1,3 +1,13 @@\n+2005-05-09  Steven Bosscher  <stevenb@suse.de>\n+\n+\t* calls.c (purge_reg_equiv_notes): Remove, fold into...\n+\t(fixup_tail_calls): ...here.  Only look at insns between the\n+\tstart of the function and the FUNCTION_BEG insn note.\n+\n+\t* gcse.c (one_cprop_pass): Fix typos in dumps.\n+\n+\t* tree-ssa-operands.h (FOR_EACH_PHI_ARG): Fix typos.\n+\n 2005-05-09  Adrian Straetling  <straetling@de.ibm.com>\n \n \t* config/s390/s390.h: Move xxx_REGNUM definitions to s390.md."}, {"sha": "3c4cbf8949a69349e9f48cb3c0ceb0e6bdd18601", "filename": "gcc/calls.c", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d51cdb20e564546451e1e15a87037a7543d8e8/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d51cdb20e564546451e1e15a87037a7543d8e8/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=29d51cdb20e564546451e1e15a87037a7543d8e8", "patch": "@@ -1766,30 +1766,6 @@ shift_return_value (enum machine_mode mode, bool left_p, rtx value)\n   return true;\n }\n \n-/* Remove all REG_EQUIV notes found in the insn chain.  */\n-\n-static void\n-purge_reg_equiv_notes (void)\n-{\n-  rtx insn;\n-\n-  for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n-    {\n-      while (1)\n-\t{\n-\t  rtx note = find_reg_note (insn, REG_EQUIV, 0);\n-\t  if (note)\n-\t    {\n-\t      /* Remove the note and keep looking at the notes for\n-\t\t this insn.  */\n-\t      remove_note (insn, note);\n-\t      continue;\n-\t    }\n-\t  break;\n-\t}\n-    }\n-}\n-\n /* Generate all the code for a function call\n    and return an rtx for its value.\n    Store the value in TARGET (specified as an rtx) if convenient.\n@@ -3050,16 +3026,40 @@ expand_call (tree exp, rtx target, int ignore)\n    this function's incoming arguments.\n \n    At the start of RTL generation we know the only REG_EQUIV notes\n-   in the rtl chain are those for incoming arguments, so we can safely\n-   flush any REG_EQUIV note.\n+   in the rtl chain are those for incoming arguments, so we can look\n+   for REG_EQUIV notes between the start of the function and the\n+   NOTE_INSN_FUNCTION_BEG.\n \n    This is (slight) overkill.  We could keep track of the highest\n    argument we clobber and be more selective in removing notes, but it\n    does not seem to be worth the effort.  */\n+\n void\n fixup_tail_calls (void)\n {\n-  purge_reg_equiv_notes ();\n+  rtx insn;\n+\n+  for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n+    {\n+      /* There are never REG_EQUIV notes for the incoming arguments\n+\t after the NOTE_INSN_FUNCTION_BEG note, so stop if we see it.  */\n+      if (NOTE_P (insn)\n+\t  && NOTE_LINE_NUMBER (insn) == NOTE_INSN_FUNCTION_BEG)\n+\tbreak;\n+\n+      while (1)\n+\t{\n+\t  rtx note = find_reg_note (insn, REG_EQUIV, 0);\n+\t  if (note)\n+\t    {\n+\t      /* Remove the note and keep looking at the notes for\n+\t\t this insn.  */\n+\t      remove_note (insn, note);\n+\t      continue;\n+\t    }\n+\t  break;\n+\t}\n+    }\n }\n \n /* Traverse an argument list in VALUES and expand all complex"}, {"sha": "3cd1268df028d0d3350f2f1c60020e1527dad240", "filename": "gcc/gcse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d51cdb20e564546451e1e15a87037a7543d8e8/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d51cdb20e564546451e1e15a87037a7543d8e8/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=29d51cdb20e564546451e1e15a87037a7543d8e8", "patch": "@@ -3415,7 +3415,7 @@ one_cprop_pass (int pass, bool cprop_jumps, bool bypass_jumps)\n     {\n       fprintf (gcse_file, \"CPROP of %s, pass %d: %d bytes needed, \",\n \t       current_function_name (), pass, bytes_used);\n-      fprintf (gcse_file, \"%d local const props, %d local copy props\\n\\n\",\n+      fprintf (gcse_file, \"%d local const props, %d local copy props, \",\n \t       local_const_prop_count, local_copy_prop_count);\n       fprintf (gcse_file, \"%d global const props, %d global copy props\\n\\n\",\n \t       global_const_prop_count, global_copy_prop_count);"}, {"sha": "323ac3ffe5d8cd1f5fc2759d47459e61c7ba31c1", "filename": "gcc/tree-ssa-operands.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d51cdb20e564546451e1e15a87037a7543d8e8/gcc%2Ftree-ssa-operands.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d51cdb20e564546451e1e15a87037a7543d8e8/gcc%2Ftree-ssa-operands.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.h?ref=29d51cdb20e564546451e1e15a87037a7543d8e8", "patch": "@@ -270,7 +270,7 @@ typedef struct ssa_operand_iterator_d\n /* This macro will execute a loop over all the arguments of a PHI which\n    match FLAGS.   A use_operand_p is always returned via USEVAR.  FLAGS\n    can be either SSA_OP_USE or SSA_OP_VIRTUAL_USES or SSA_OP_ALL_USES.  */\n-#define FOR_EACH_PHI_ARG (USEVAR, STMT, ITER, FLAGS)\t\t\\\n+#define FOR_EACH_PHI_ARG(USEVAR, STMT, ITER, FLAGS)\t\t\\\n   for ((USEVAR) = op_iter_init_phiuse (&(ITER), STMT, FLAGS);\t\\\n        !op_iter_done (&(ITER));\t\t\t\t\t\\\n        (USEVAR) = op_iter_next_use (&(ITER)))\n@@ -311,7 +311,8 @@ typedef struct ssa_operand_iterator_d\n    FLAGS, then NULL_DEF_OPERAND_P is returned.  */\n #define SINGLE_SSA_DEF_OPERAND(STMT, FLAGS)\t\t\t\\\n   single_ssa_def_operand (STMT, FLAGS)\n-\t\t\t\t\t\t\t\t\t\t/* This macro returns TRUE if there are no operands matching FLAGS in STMT.  */\n+\n+/* This macro returns TRUE if there are no operands matching FLAGS in STMT.  */\n #define ZERO_SSA_OPERANDS(STMT, FLAGS) \tzero_ssa_operands (STMT, FLAGS)\n \n /* This macro counts the number of operands in STMT matching FLAGS.  */"}]}