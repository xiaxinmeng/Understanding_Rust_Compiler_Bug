{"sha": "d1fec18074669d313b92a54c9ea48e3c6f9f3cf3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFmZWMxODA3NDY2OWQzMTNiOTJhNTRjOWVhNDhlM2M2ZjlmM2NmMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-07-24T14:02:32Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-07-24T14:02:32Z"}, "message": "* pt.c (coerce_template_parms): Also complain about local enums.\n\nFrom-SVN: r21363", "tree": {"sha": "69da344414e3f77083f6b34e73e2d717311e08f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69da344414e3f77083f6b34e73e2d717311e08f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1fec18074669d313b92a54c9ea48e3c6f9f3cf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1fec18074669d313b92a54c9ea48e3c6f9f3cf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1fec18074669d313b92a54c9ea48e3c6f9f3cf3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1fec18074669d313b92a54c9ea48e3c6f9f3cf3/comments", "author": null, "committer": null, "parents": [{"sha": "e2bc7d00a61baee21520eb43f0f2fb87623af325", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2bc7d00a61baee21520eb43f0f2fb87623af325", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2bc7d00a61baee21520eb43f0f2fb87623af325"}], "stats": {"total": 24, "additions": 19, "deletions": 5}, "files": [{"sha": "7a479dd7bbc1eef6d498ea025c92371cc27999e3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1fec18074669d313b92a54c9ea48e3c6f9f3cf3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1fec18074669d313b92a54c9ea48e3c6f9f3cf3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d1fec18074669d313b92a54c9ea48e3c6f9f3cf3", "patch": "@@ -1,5 +1,7 @@\n 1998-07-24  Jason Merrill  <jason@yorick.cygnus.com>\n \n+\t* pt.c (coerce_template_parms): Also complain about local enums.\n+\n \t* cp-tree.h: Add prototype for set_identifier_local_value.\n \t* decl.c (set_identifier_local_value_with_scope): Make static,\n \tprototype."}, {"sha": "faa48d9c256fbdf8e7f270dbe05003c3e0f2d7f0", "filename": "gcc/cp/NEWS", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1fec18074669d313b92a54c9ea48e3c6f9f3cf3/gcc%2Fcp%2FNEWS", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1fec18074669d313b92a54c9ea48e3c6f9f3cf3/gcc%2Fcp%2FNEWS", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FNEWS?ref=d1fec18074669d313b92a54c9ea48e3c6f9f3cf3", "patch": "@@ -1,5 +1,9 @@\n *** Changes since EGCS 1.0:\n \n+* Namespaces are fully supported.  The library has not yet been converted \n+  to use namespace std, however, and the old std-faking code is still on by\n+  default.  To turn it off, you can use -fhonor-std.\n+\n * Massive template improvements:\n   + member template classes are supported.\n   + template friends are supported.\n@@ -9,8 +13,9 @@\n \n * operator new now throws bad_alloc where appropriate.\n \n-* Exception handling is now thread safe, and supports nested\n-  exceptions and placement delete.\n+* Exception handling is now thread safe, and supports nested exceptions and\n+  placement delete.  Exception handling overhead on x86 is much lower with\n+  GNU as 2.9.\n \n * protected virtual inheritance is now supported.\n \n@@ -20,6 +25,13 @@\n * For class D derived from B which has a member 'int i', &D::i is now of\n   type 'int B::*' instead of 'int D::*'.\n \n+* An _experimental_ new ABI for g++ can be turned on with -fnew-abi.  The\n+  current features of this are more efficient allocation of base classes\n+  (including the empty base optimization), and more compact mangling of C++\n+  symbol names (which can be turned on separately with -fsquangle).  This\n+  ABI is subject to change without notice, so don't use it for anything\n+  that you don't want to rebuild with every release of the compiler.\n+\n *** Changes in EGCS 1.0:\n \n * A public review copy of the December 1996 Draft of the ISO/ANSI C++"}, {"sha": "9c724314ccfaba37d715d2bf437bb3c4419725a8", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1fec18074669d313b92a54c9ea48e3c6f9f3cf3/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1fec18074669d313b92a54c9ea48e3c6f9f3cf3/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=d1fec18074669d313b92a54c9ea48e3c6f9f3cf3", "patch": "@@ -2659,11 +2659,11 @@ coerce_template_parms (parms, arglist, in_decl,\n \t      if (! processing_template_decl)\n \t\t{\n \t\t  tree t = target_type (val);\n-\t\t  if (TREE_CODE (t) != TYPENAME_TYPE \n-\t\t      && IS_AGGR_TYPE (t)\n+\t\t  if (((IS_AGGR_TYPE (t) && TREE_CODE (t) != TYPENAME_TYPE)\n+\t\t       || TREE_CODE (t) == ENUMERAL_TYPE)\n \t\t      && decl_function_context (TYPE_MAIN_DECL (t)))\n \t\t    {\n-\t\t      cp_error (\"type `%T' composed from a local class is not a valid template-argument\",\n+\t\t      cp_error (\"type `%T' composed from a local type is not a valid template-argument\",\n \t\t\t\tval);\n \t\t      return error_mark_node;\n \t\t    }"}]}