{"sha": "47dad3ff97135ef8a26e0ecbc2170fba6c4e89be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdkYWQzZmY5NzEzNWVmOGEyNmUwZWNiYzIxNzBmYmE2YzRlODliZQ==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2010-08-01T11:22:18Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2010-08-01T11:22:18Z"}, "message": "Use access(2) instead of stat(2) to test file existence.\n\nFrom-SVN: r162798", "tree": {"sha": "9d55d4053f91dc21cfcd5a77b3e7e616eeaa2059", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d55d4053f91dc21cfcd5a77b3e7e616eeaa2059"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47dad3ff97135ef8a26e0ecbc2170fba6c4e89be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47dad3ff97135ef8a26e0ecbc2170fba6c4e89be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47dad3ff97135ef8a26e0ecbc2170fba6c4e89be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47dad3ff97135ef8a26e0ecbc2170fba6c4e89be/comments", "author": null, "committer": null, "parents": [{"sha": "22db1fbca9fb5ec31b41180a8696ed5fef081c19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22db1fbca9fb5ec31b41180a8696ed5fef081c19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22db1fbca9fb5ec31b41180a8696ed5fef081c19"}], "stats": {"total": 84, "additions": 48, "deletions": 36}, "files": [{"sha": "f11ede973f076cd539f99d265877dd3bb2c2755a", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47dad3ff97135ef8a26e0ecbc2170fba6c4e89be/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47dad3ff97135ef8a26e0ecbc2170fba6c4e89be/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=47dad3ff97135ef8a26e0ecbc2170fba6c4e89be", "patch": "@@ -1,3 +1,9 @@\n+2010-08-01  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+        * io/unix.c (file_exists): Use access(2) instead of stat(2) to\n+        test file existence.\n+\t(fallback_access): Move up in file, implement F_OK.\n+\n 2010-07-31  David Edelsohn  <edelsohn@gnu.org>\n \n \t* io/inquire.c: Include io.h before string.h.\n@@ -36,7 +42,7 @@\n \t* write_float.def (output_float): Use a gfc_char4_t pointer and\n \tupdate memset4 and memcpy calls. (write_infnan): Likewise.\n \t(output_float_FMT_G_): Likewise.\n-\t\n+\n 2010-07-16  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libfortran/37077"}, {"sha": "a2903af1b55992320047fdb5d5cbd1786bcba9e6", "filename": "libgfortran/io/unix.c", "status": "modified", "additions": 41, "deletions": 35, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47dad3ff97135ef8a26e0ecbc2170fba6c4e89be/libgfortran%2Fio%2Funix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47dad3ff97135ef8a26e0ecbc2170fba6c4e89be/libgfortran%2Fio%2Funix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.c?ref=47dad3ff97135ef8a26e0ecbc2170fba6c4e89be", "patch": "@@ -131,6 +131,46 @@ typedef struct stat gfstat_t;\n #endif\n \n \n+#ifndef HAVE_ACCESS\n+\n+#ifndef W_OK\n+#define W_OK 2\n+#endif\n+\n+#ifndef R_OK\n+#define R_OK 4\n+#endif\n+\n+#ifndef F_OK\n+#define F_OK 0\n+#endif\n+\n+/* Fallback implementation of access() on systems that don't have it.\n+   Only modes R_OK, W_OK and F_OK are used in this file.  */\n+\n+static int\n+fallback_access (const char *path, int mode)\n+{\n+  if ((mode & R_OK) && open (path, O_RDONLY) < 0)\n+    return -1;\n+\n+  if ((mode & W_OK) && open (path, O_WRONLY) < 0)\n+    return -1;\n+\n+  if (mode == F_OK)\n+    {\n+      gfstat_t st;\n+      return stat (path, &st);\n+    }\n+\n+  return 0;\n+}\n+\n+#undef access\n+#define access fallback_access\n+#endif\n+\n+\n /* Unix and internal stream I/O module */\n \n static const int BUFFER_SIZE = 8192;\n@@ -1580,15 +1620,11 @@ int\n file_exists (const char *file, gfc_charlen_type file_len)\n {\n   char path[PATH_MAX + 1];\n-  gfstat_t statbuf;\n \n   if (unpack_filename (path, file, file_len))\n     return 0;\n \n-  if (stat (path, &statbuf) < 0)\n-    return 0;\n-\n-  return 1;\n+  return !(access (path, F_OK));\n }\n \n \n@@ -1695,36 +1731,6 @@ inquire_unformatted (const char *string, int len)\n }\n \n \n-#ifndef HAVE_ACCESS\n-\n-#ifndef W_OK\n-#define W_OK 2\n-#endif\n-\n-#ifndef R_OK\n-#define R_OK 4\n-#endif\n-\n-/* Fallback implementation of access() on systems that don't have it.\n-   Only modes R_OK and W_OK are used in this file.  */\n-\n-static int\n-fallback_access (const char *path, int mode)\n-{\n-  if ((mode & R_OK) && open (path, O_RDONLY) < 0)\n-    return -1;\n-\n-  if ((mode & W_OK) && open (path, O_WRONLY) < 0)\n-    return -1;\n-\n-  return 0;\n-}\n-\n-#undef access\n-#define access fallback_access\n-#endif\n-\n-\n /* inquire_access()-- Given a fortran string, determine if the file is\n  * suitable for access. */\n "}]}