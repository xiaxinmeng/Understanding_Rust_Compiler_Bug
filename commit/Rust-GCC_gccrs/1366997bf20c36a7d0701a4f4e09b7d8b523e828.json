{"sha": "1366997bf20c36a7d0701a4f4e09b7d8b523e828", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM2Njk5N2JmMjBjMzZhN2QwNzAxYTRmNGUwOWI3ZDhiNTIzZTgyOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-04T13:16:56Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-04T13:16:56Z"}, "message": "[multiple changes]\n\n2010-10-04  Vincent Celier  <celier@adacore.com>\n\n\t* sinput-l.adb (Load_File): Do not fail when switch -gnateG is\n\tspecified and the processed file cannot be written. Just issue a\n\twarning and continue.\n\n2010-10-04  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_res.adb: Minor reformatting.\n\n2010-10-04  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch8.adb (Analyze_Subprogram_Renaming): If the renamed operation\n\tis an overridden inherited operation, the desired operation is the\n\toverriding one, which is the alias of the visible one.\n\n2010-10-04  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Find_Corresponding_Spec): Check that the wrapper body is\n\tpresent before deleting from the tree, when an inherited function with\n\ta controlling result that returns a null extension is overridden by a\n\tlater declaration or body.\n\n2010-10-04  Gary Dismukes  <dismukes@adacore.com>\n\n\t* checks.adb: Update comment.\n\nFrom-SVN: r164933", "tree": {"sha": "b0a80bb7396b365be2b51d7d1140612193541c09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0a80bb7396b365be2b51d7d1140612193541c09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1366997bf20c36a7d0701a4f4e09b7d8b523e828", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1366997bf20c36a7d0701a4f4e09b7d8b523e828", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1366997bf20c36a7d0701a4f4e09b7d8b523e828", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1366997bf20c36a7d0701a4f4e09b7d8b523e828/comments", "author": null, "committer": null, "parents": [{"sha": "d4d24ba4503483a5315b57859c147f9a4e18c5aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4d24ba4503483a5315b57859c147f9a4e18c5aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4d24ba4503483a5315b57859c147f9a4e18c5aa"}], "stats": {"total": 109, "additions": 72, "deletions": 37}, "files": [{"sha": "8596df4fb290e3ad47618e06763b4340d54fc969", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1366997bf20c36a7d0701a4f4e09b7d8b523e828/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1366997bf20c36a7d0701a4f4e09b7d8b523e828/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1366997bf20c36a7d0701a4f4e09b7d8b523e828", "patch": "@@ -1,3 +1,30 @@\n+2010-10-04  Vincent Celier  <celier@adacore.com>\n+\n+\t* sinput-l.adb (Load_File): Do not fail when switch -gnateG is\n+\tspecified and the processed file cannot be written. Just issue a\n+\twarning and continue.\n+\n+2010-10-04  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_res.adb: Minor reformatting.\n+\n+2010-10-04  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch8.adb (Analyze_Subprogram_Renaming): If the renamed operation\n+\tis an overridden inherited operation, the desired operation is the\n+\toverriding one, which is the alias of the visible one.\n+\n+2010-10-04  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Find_Corresponding_Spec): Check that the wrapper body is\n+\tpresent before deleting from the tree, when an inherited function with\n+\ta controlling result that returns a null extension is overridden by a\n+\tlater declaration or body.\n+\n+2010-10-04  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* checks.adb: Update comment.\n+\n 2010-09-30  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc-interface/misc.c (optimize, optimize_size): Undefine as macros"}, {"sha": "b67e8d6d66c3e2ebc25a484d582c9842cf413c47", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1366997bf20c36a7d0701a4f4e09b7d8b523e828/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1366997bf20c36a7d0701a4f4e09b7d8b523e828/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=1366997bf20c36a7d0701a4f4e09b7d8b523e828", "patch": "@@ -819,15 +819,6 @@ package body Checks is\n                      --  node is retained, in order to avoid the warning for\n                      --  redundant conversions in Resolve_Type_Conversion.\n \n-                     --  The above comment is uncomfortable. This seems like\n-                     --  an awkward covert channel, since there isno general\n-                     --  requirement in sinfo.ads or einfo.ads that requires\n-                     --  this rewrite. Instead, the issue seems to be that in\n-                     --  the old code, some node was incorrectly marked as\n-                     --  coming from source when it should not have been and/or\n-                     --  the warning code did not properly test the appropriate\n-                     --  Comes_From_Soure flag. ???\n-\n                      Rewrite (N, Relocate_Node (N));\n \n                      Set_Etype (N, Target_Type);"}, {"sha": "80b3eb1977646b03689a69f4f4267f5c4c67e714", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1366997bf20c36a7d0701a4f4e09b7d8b523e828/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1366997bf20c36a7d0701a4f4e09b7d8b523e828/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=1366997bf20c36a7d0701a4f4e09b7d8b523e828", "patch": "@@ -5910,8 +5910,8 @@ package body Sem_Ch6 is\n                --  that was created for an operation inherited by a null\n                --  extension, it may be overridden by a body without a previous\n                --  spec (one more reason why these should be shunned). In that\n-               --  case remove the generated body, because the current one is\n-               --  the explicit overriding.\n+               --  case remove the generated body if present, because the\n+               --  current one is the explicit overriding.\n \n                elsif Ekind (E) = E_Function\n                  and then Ada_Version >= Ada_05\n@@ -5922,15 +5922,20 @@ package body Sem_Ch6 is\n                then\n                   Set_Has_Completion (E, False);\n \n-                  if Expander_Active then\n+                  if Expander_Active\n+                    and then Nkind (Parent (E)) = N_Function_Specification\n+                  then\n                      Remove\n                        (Unit_Declaration_Node\n-                         (Corresponding_Body (Unit_Declaration_Node (E))));\n+                          (Corresponding_Body (Unit_Declaration_Node (E))));\n+\n                      return E;\n \n-                  --  If expansion is disabled, the wrapper function has not\n-                  --  been generated, and this is the standard case of a late\n-                  --  body overriding an inherited operation.\n+                  --  If expansion is disabled, or if the wrapper function has\n+                  --  not been generated yet, this a late body overriding an\n+                  --  inherited operation, or it is an overriding by some other\n+                  --  declaration before the controlling result is frozen. In\n+                  --  either case this is a declaration of a new entity.\n \n                   else\n                      return Empty;"}, {"sha": "75e98ba188a86a784b2783cf7e72c0819e161fd4", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1366997bf20c36a7d0701a4f4e09b7d8b523e828/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1366997bf20c36a7d0701a4f4e09b7d8b523e828/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=1366997bf20c36a7d0701a4f4e09b7d8b523e828", "patch": "@@ -2100,6 +2100,21 @@ package body Sem_Ch8 is\n       if No (Old_S) then\n          Old_S := Find_Renamed_Entity (N, Name (N), New_S, Is_Actual);\n \n+         --  The visible operation may be an inherited abstract operation that\n+         --  was overridden in the private part, in which case a call will\n+         --  dispatch to the overriding operation. Use the overriding one in\n+         --  the renaming declaration, to prevent spurious errors below.\n+\n+         if Is_Overloadable (Old_S)\n+           and then Is_Abstract_Subprogram (Old_S)\n+           and then No (DTC_Entity (Old_S))\n+           and then Present (Alias (Old_S))\n+           and then not Is_Abstract_Subprogram (Alias (Old_S))\n+           and then Is_Overriding_Operation (Alias (Old_S))\n+         then\n+            Old_S := Alias (Old_S);\n+         end if;\n+\n          --  When the renamed subprogram is overloaded and used as an actual\n          --  of a generic, its entity is set to the first available homonym.\n          --  We must first disambiguate the name, then set the proper entity."}, {"sha": "fa0b66be5b4543629716d52bdb9570a55dd249f5", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1366997bf20c36a7d0701a4f4e09b7d8b523e828/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1366997bf20c36a7d0701a4f4e09b7d8b523e828/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=1366997bf20c36a7d0701a4f4e09b7d8b523e828", "patch": "@@ -8847,9 +8847,8 @@ package body Sem_Res is\n             --  own expression is a possibly overloaded function call. The\n             --  qualified expression is needed to be disambiguate the call,\n             --  but it appears in a context in which a name is needed, forcing\n-            --  the use of a conversion.\n-            --  In Ada2012 a qualified expression is a name, and this idiom\n-            --  is not needed any longer.\n+            --  the use of a conversion. In Ada 2012, a qualified expression is\n+            --  a name, and this idiom is no longer needed.\n \n             elsif Nkind (Orig_N) = N_Qualified_Expression\n               and then Nkind (Expression (Orig_N)) = N_Function_Call\n@@ -9255,9 +9254,9 @@ package body Sem_Res is\n \n          Rewrite (N, Op_Node);\n \n-         --  If the context type is private, add the appropriate conversions\n-         --  so that the operator is applied to the full view. This is done\n-         --  in the routines that resolve intrinsic operators,\n+         --  If the context type is private, add the appropriate conversions so\n+         --  that the operator is applied to the full view. This is done in the\n+         --  routines that resolve intrinsic operators.\n \n          if Is_Intrinsic_Subprogram (Op)\n            and then Is_Private_Type (Typ)\n@@ -9277,9 +9276,8 @@ package body Sem_Res is\n \n       elsif Ekind (Op) = E_Function and then Is_Intrinsic_Subprogram (Op) then\n \n-         --  Operator renames a user-defined operator of the same name. Use\n-         --  the original operator in the node, which is the one that Gigi\n-         --  knows about.\n+         --  Operator renames a user-defined operator of the same name. Use the\n+         --  original operator in the node, which is the one Gigi knows about.\n \n          Set_Entity (N, Op);\n          Set_Is_Overloaded (N, False);\n@@ -9290,12 +9288,12 @@ package body Sem_Res is\n    -- Set_Slice_Subtype --\n    -----------------------\n \n-   --  Build an implicit subtype declaration to represent the type delivered\n-   --  by the slice. This is an abbreviated version of an array subtype. We\n-   --  define an index subtype for the slice, using either the subtype name\n-   --  or the discrete range of the slice. To be consistent with index usage\n-   --  elsewhere, we create a list header to hold the single index. This list\n-   --  is not otherwise attached to the syntax tree.\n+   --  Build an implicit subtype declaration to represent the type delivered by\n+   --  the slice. This is an abbreviated version of an array subtype. We define\n+   --  an index subtype for the slice, using either the subtype name or the\n+   --  discrete range of the slice. To be consistent with index usage elsewhere\n+   --  we create a list header to hold the single index. This list is not\n+   --  otherwise attached to the syntax tree.\n \n    procedure Set_Slice_Subtype (N : Node_Id) is\n       Loc           : constant Source_Ptr := Sloc (N);\n@@ -9401,10 +9399,10 @@ package body Sem_Res is\n \n       if Is_OK_Static_Expression (Low_Bound) then\n \n-      --  The low bound is set from the low bound of the corresponding\n-      --  index type. Note that we do not store the high bound in the\n-      --  string literal subtype, but it can be deduced if necessary\n-      --  from the length and the low bound.\n+      --  The low bound is set from the low bound of the corresponding index\n+      --  type. Note that we do not store the high bound in the string literal\n+      --  subtype, but it can be deduced if necessary from the length and the\n+      --  low bound.\n \n          Set_String_Literal_Low_Bound (Subtype_Id, Low_Bound);\n "}, {"sha": "98ad104d020e2e915939b3b02a9f193fc4091151", "filename": "gcc/ada/sinput-l.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1366997bf20c36a7d0701a4f4e09b7d8b523e828/gcc%2Fada%2Fsinput-l.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1366997bf20c36a7d0701a4f4e09b7d8b523e828/gcc%2Fada%2Fsinput-l.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput-l.adb?ref=1366997bf20c36a7d0701a4f4e09b7d8b523e828", "patch": "@@ -591,10 +591,9 @@ package body Sinput.L is\n \n                         if not Status then\n                            Errout.Error_Msg\n-                             (\"could not write processed file \"\"\" &\n+                             (\"?could not write processed file \"\"\" &\n                               Name_Buffer (1 .. Name_Len) & '\"',\n                               Lo);\n-                           return No_Source_File;\n                         end if;\n                      end;\n                   end if;"}]}