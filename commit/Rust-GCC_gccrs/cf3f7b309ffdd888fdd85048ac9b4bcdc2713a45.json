{"sha": "cf3f7b309ffdd888fdd85048ac9b4bcdc2713a45", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2YzZjdiMzA5ZmZkZDg4OGZkZDg1MDQ4YWM5YjRiY2RjMjcxM2E0NQ==", "commit": {"author": {"name": "Thomas K\u00f6nig", "email": "tkoenig@gcc.gnu.org", "date": "2020-04-25T10:28:15Z"}, "committer": {"name": "Thomas K\u00f6nig", "email": "tkoenig@gcc.gnu.org", "date": "2020-04-25T10:28:15Z"}, "message": "Fix PR 94578.\n\nOur intrinsics do not handle spans on their return values (yet),\nso this creates a temporary for subref array pointers.\n\n2020-04-25  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/94578\n\t* trans-expr.c (arrayfunc_assign_needs_temporary): If the\n\tLHS is a subref pointer, we also need a temporary.\n\n2020-04-25  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/94578\n\t* gfortran.dg/pointer_assign_14.f90: New test.\n\t* gfortran.dg/pointer_assign_15.f90: New test.", "tree": {"sha": "9176ecce77f2ef37f511c9ca626c7f8fe0947fba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9176ecce77f2ef37f511c9ca626c7f8fe0947fba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf3f7b309ffdd888fdd85048ac9b4bcdc2713a45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf3f7b309ffdd888fdd85048ac9b4bcdc2713a45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf3f7b309ffdd888fdd85048ac9b4bcdc2713a45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf3f7b309ffdd888fdd85048ac9b4bcdc2713a45/comments", "author": null, "committer": null, "parents": [{"sha": "ead1c27a5308e8ff3bae6d663c8890d4b24da7c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ead1c27a5308e8ff3bae6d663c8890d4b24da7c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ead1c27a5308e8ff3bae6d663c8890d4b24da7c3"}], "stats": {"total": 45, "additions": 43, "deletions": 2}, "files": [{"sha": "030edc1e5ceb58eb5b13e9331aeca69a31318cb8", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf3f7b309ffdd888fdd85048ac9b4bcdc2713a45/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf3f7b309ffdd888fdd85048ac9b4bcdc2713a45/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=cf3f7b309ffdd888fdd85048ac9b4bcdc2713a45", "patch": "@@ -9823,9 +9823,13 @@ arrayfunc_assign_needs_temporary (gfc_expr * expr1, gfc_expr * expr2)\n \n   /* If we have reached here with an intrinsic function, we do not\n      need a temporary except in the particular case that reallocation\n-     on assignment is active and the lhs is allocatable and a target.  */\n+     on assignment is active and the lhs is allocatable and a target,\n+     or a pointer which may be a subref pointer.  FIXME: The last\n+     condition can go away when we use span in the intrinsics\n+     directly.*/\n   if (expr2->value.function.isym)\n-    return (flag_realloc_lhs && sym->attr.allocatable && sym->attr.target);\n+    return (flag_realloc_lhs && sym->attr.allocatable && sym->attr.target)\n+      || (sym->attr.pointer && sym->attr.subref_array_pointer);\n \n   /* If the LHS is a dummy, we need a temporary if it is not\n      INTENT(OUT).  */"}, {"sha": "b06dd841bcc3dcaa01124cb76e0679ecf50eb8b2", "filename": "gcc/testsuite/gfortran.dg/pointer_assign_14.f90", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf3f7b309ffdd888fdd85048ac9b4bcdc2713a45/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_assign_14.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf3f7b309ffdd888fdd85048ac9b4bcdc2713a45/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_assign_14.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_assign_14.f90?ref=cf3f7b309ffdd888fdd85048ac9b4bcdc2713a45", "patch": "@@ -0,0 +1,19 @@\n+! { dg-do run }\n+! PR fortran/94578\n+! This used to give wrong results.\n+program main\n+  implicit none\n+  type foo\n+     integer :: x, y,z\n+  end type foo\n+  integer :: i\n+  integer, dimension(:), pointer :: array1d\n+  type(foo), dimension(2), target :: solution\n+  integer, dimension(2,2) :: a\n+  data a /1,2,3,4/\n+  solution%x = -10\n+  solution%y = -20\n+  array1d => solution%x\n+  array1d = maxval(a,dim=1)\n+  if (any (array1d /= [2,4])) stop 1\n+end program main"}, {"sha": "7c2885910cf00d8aefecd28eec3b31b54f110397", "filename": "gcc/testsuite/gfortran.dg/pointer_assign_15.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf3f7b309ffdd888fdd85048ac9b4bcdc2713a45/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_assign_15.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf3f7b309ffdd888fdd85048ac9b4bcdc2713a45/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_assign_15.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_assign_15.f90?ref=cf3f7b309ffdd888fdd85048ac9b4bcdc2713a45", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do run }\n+! PR fortran/94578\n+! This used to give wrong results.  Original test case by Jan-Willem\n+! Blokland.\n+program main\n+  implicit none\n+  type foo\n+     integer :: x, y\n+  end type foo\n+  integer :: i\n+  integer, dimension (2,2) :: array2d\n+  integer, dimension(:), pointer :: array1d\n+  type(foo), dimension(2*2), target :: solution\n+  data array2d /1,2,3,4/\n+  array1d => solution%x\n+  array1d = reshape (source=array2d, shape=shape(array1d))\n+  if (any (array1d /= [1,2,3,4])) stop 1\n+end program main"}]}