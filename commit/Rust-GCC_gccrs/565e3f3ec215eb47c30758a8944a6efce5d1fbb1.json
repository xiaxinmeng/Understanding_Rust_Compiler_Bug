{"sha": "565e3f3ec215eb47c30758a8944a6efce5d1fbb1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY1ZTNmM2VjMjE1ZWI0N2MzMDc1OGE4OTQ0YTZlZmNlNWQxZmJiMQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-06T02:10:03Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-06T02:10:03Z"}, "message": "Makefile.in (ggc-simple.o): Depend on hash.h.\n\n\t* Makefile.in (ggc-simple.o): Depend on hash.h.\n\t* ggc.h (ggc_add_tree_hash_table_root): Declare.\n\t(ggc_mark_tree_varray): Likewise.\n\t(ggc_mark_tree_hash_table): Likewise.\n\t* ggc-simple.c: Include hash.h.\n\t(ggc_mark_tree_hash_table_ptr): New function.\n\t(ggc_mark_tree_hash_table_entry): Likewise.\n\t(ggc_mark_tree_hash_table): Likewise.\n\t(ggc_add_tree_hash_table_root): Likewise.\n\t* varray.h (const_equiv_data): Use struct rtx_def *, rather than\n\n\t* profile.c (output_func_start_profiler): Remove apparently\n\tnonsensical call to start_sequence.\n\nFrom-SVN: r29134", "tree": {"sha": "35321e13d117e53c293b79518646d2f25d786c3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35321e13d117e53c293b79518646d2f25d786c3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/565e3f3ec215eb47c30758a8944a6efce5d1fbb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/565e3f3ec215eb47c30758a8944a6efce5d1fbb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/565e3f3ec215eb47c30758a8944a6efce5d1fbb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/565e3f3ec215eb47c30758a8944a6efce5d1fbb1/comments", "author": null, "committer": null, "parents": [{"sha": "7a3842b33ec211f73d3a354c06da94d4622406da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a3842b33ec211f73d3a354c06da94d4622406da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a3842b33ec211f73d3a354c06da94d4622406da"}], "stats": {"total": 79, "additions": 74, "deletions": 5}, "files": [{"sha": "430e62bc6cb97df5047262b2ca116539ac912305", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/565e3f3ec215eb47c30758a8944a6efce5d1fbb1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/565e3f3ec215eb47c30758a8944a6efce5d1fbb1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=565e3f3ec215eb47c30758a8944a6efce5d1fbb1", "patch": "@@ -1,3 +1,22 @@\n+Sun Sep  5 18:57:42 1999  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* Makefile.in (ggc-simple.o): Depend on hash.h.\n+\t* ggc.h (ggc_add_tree_hash_table_root): Declare.\n+\t(ggc_mark_tree_varray): Likewise.\n+\t(ggc_mark_tree_hash_table): Likewise.\n+\t* ggc-simple.c: Include hash.h.\n+\t(ggc_mark_tree_hash_table_ptr): New function.\n+\t(ggc_mark_tree_hash_table_entry): Likewise.\n+\t(ggc_mark_tree_hash_table): Likewise.\n+\t(ggc_add_tree_hash_table_root): Likewise.\n+\t* varray.h (const_equiv_data): Use struct rtx_def *, rather than\n+\trtx, when defining fields.\n+\t\n+Sun Sep  5 18:57:42 1999  Bernd Schmidt <crux@pool.informatik.rwth-aachen.de>\n+\n+\t* profile.c (output_func_start_profiler): Remove apparently\n+\tnonsensical call to start_sequence.\n+\t\n Sun Sep  5 17:34:33 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* clipper/clipper.c (clipper_va_start): Fix typos.\n@@ -48,7 +67,7 @@ Sun Sep  5 00:35:17 1999  Richard Henderson  <rth@cygnus.com>\n \t(simplify_cond): Likewise.\n \t(simplify_text_exp): Likewise.\n \t(optimize_attrs): Likewise.\n-\t* gengentrtl.c (gendef): Use ggc_alloc_rtx to allocate RTL, when\n+\t* gengenrtl.c (gendef): Use ggc_alloc_rtx to allocate RTL, when\n \tGC'ing.\n \t(gencode): Generate a #include for ggc.h.\n \t* ggc-callbacks.c (ggc_p): Define it to zero."}, {"sha": "5cb7a7ca2d8c49c0cdc6df49cf87c70e1c478603", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/565e3f3ec215eb47c30758a8944a6efce5d1fbb1/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/565e3f3ec215eb47c30758a8944a6efce5d1fbb1/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=565e3f3ec215eb47c30758a8944a6efce5d1fbb1", "patch": "@@ -1433,7 +1433,7 @@ dumpvers: dumpvers.c\n version.o: version.c\n \n ggc-simple.o: ggc-simple.c $(CONFIG_H) $(RTL_BASE_H) $(TREE_H) flags.h \\\n-\tggc.h varray.h\n+\tggc.h varray.h hash.h\n \n ggc-none.o: ggc-none.c $(CONFIG_H) $(RTL_BASE_H) ggc.h\n "}, {"sha": "c9181a9f319e31361c24152d62778da31e032dd8", "filename": "gcc/ggc-simple.c", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/565e3f3ec215eb47c30758a8944a6efce5d1fbb1/gcc%2Fggc-simple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/565e3f3ec215eb47c30758a8944a6efce5d1fbb1/gcc%2Fggc-simple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-simple.c?ref=565e3f3ec215eb47c30758a8944a6efce5d1fbb1", "patch": "@@ -25,6 +25,7 @@\n #include \"ggc.h\"\n #include \"flags.h\"\n #include \"varray.h\"\n+#include \"hash.h\"\n \n /* Debugging flags.  */\n #undef GGC_DUMP\n@@ -98,6 +99,9 @@ static void ggc_free_tree PROTO ((struct ggc_tree *t));\n static void ggc_mark_rtx_ptr PROTO ((void *elt));\n static void ggc_mark_tree_ptr PROTO ((void *elt));\n static void ggc_mark_tree_varray_ptr PROTO ((void *elt));\n+static void ggc_mark_tree_hash_table_ptr PROTO ((void *elt));\n+static boolean ggc_mark_tree_hash_table_entry PROTO ((struct hash_entry *,\n+\t\t\t\t\t\t      hash_table_key));\n \n /* These allocators are dreadfully simple, with no caching whatsoever so\n    that Purify-like tools that do allocation versioning can catch errors.\n@@ -486,6 +490,26 @@ ggc_mark_tree_varray (v)\n     ggc_mark_tree (VARRAY_TREE (v, i));\n }\n \n+/* Mark the hash table-entry HE.  It's key field is really a tree.  */\n+\n+static boolean\n+ggc_mark_tree_hash_table_entry (he, k)\n+     struct hash_entry *he;\n+     hash_table_key k ATTRIBUTE_UNUSED;\n+{\n+  ggc_mark_tree ((tree) he->key);\n+  return true;\n+}\n+\n+/* Mark all the elements of the hash-table H, which contains trees.  */\n+\n+void\n+ggc_mark_tree_hash_table (ht)\n+     struct hash_table *ht;\n+{\n+  hash_traverse (ht, ggc_mark_tree_hash_table_entry, /*info=*/0);\n+}\n+\n void\n ggc_mark_string (s)\n      char *s;\n@@ -659,7 +683,7 @@ ggc_add_tree_root (base, nelt)\n   ggc_add_root (base, nelt, sizeof(tree), ggc_mark_tree_ptr);\n }\n \n-/* Add vV (a varray full of trees) to the list of GC roots.  */\n+/* Add V (a varray full of trees) to the list of GC roots.  */\n \n void\n ggc_add_tree_varray_root (base, nelt)\n@@ -670,6 +694,18 @@ ggc_add_tree_varray_root (base, nelt)\n \t\tggc_mark_tree_varray_ptr);\n }\n \n+/* Add HT (a hash-table where ever key is a tree) to the list of GC\n+   roots.  */\n+\n+void\n+ggc_add_tree_hash_table_root (base, nelt)\n+     struct hash_table **base;\n+     int nelt;\n+{\n+  ggc_add_root (base, nelt, sizeof (struct hash_table *), \n+\t\tggc_mark_tree_hash_table_ptr);\n+}\n+\n void\n ggc_del_root (base)\n      void *base;\n@@ -716,6 +752,17 @@ ggc_mark_tree_varray_ptr (elt)\n   ggc_mark_tree_varray (*(varray_type *)elt);\n }\n \n+/* Type-correct function to pass to ggc_add_root.  It just forwards\n+   ELT (which is really a struct hash_table **) to\n+   ggc_mark_tree_hash_table.  */\n+\n+static void\n+ggc_mark_tree_hash_table_ptr (elt)\n+     void *elt;\n+{\n+  ggc_mark_tree_hash_table (*(struct hash_table **) elt);\n+}\n+\n #ifdef GGC_DUMP\n /* Don't enable this unless you want a really really lot of data.  */\n static void __attribute__((constructor))"}, {"sha": "5acf3e9c7eb21c910ebaa26aca68b40607d6bc1f", "filename": "gcc/ggc.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/565e3f3ec215eb47c30758a8944a6efce5d1fbb1/gcc%2Fggc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/565e3f3ec215eb47c30758a8944a6efce5d1fbb1/gcc%2Fggc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc.h?ref=565e3f3ec215eb47c30758a8944a6efce5d1fbb1", "patch": "@@ -37,6 +37,7 @@ struct emit_status;\n struct stmt_status;\n struct varasm_status;\n struct varray_head_tag;\n+struct hash_table;\n \n /* Startup */\n \n@@ -60,12 +61,15 @@ void ggc_add_root PROTO ((void *base, int nelt, int size,\n void ggc_add_rtx_root PROTO ((struct rtx_def **, int nelt));\n void ggc_add_tree_root PROTO ((union tree_node **, int nelt));\n void ggc_add_tree_varray_root PROTO ((struct varray_head_tag **, int nelt));\n+void ggc_add_tree_hash_table_root PROTO ((struct hash_table **, int nelt));\n void ggc_del_root PROTO ((void *base));\n \n /* Mark nodes from the gc_add_root callback.  */\n void ggc_mark_rtx PROTO ((struct rtx_def *));\n void ggc_mark_rtvec PROTO ((struct rtvec_def *));\n void ggc_mark_tree PROTO ((union tree_node *));\n+void ggc_mark_tree_varray PROTO ((struct varray_head_tag *));\n+void ggc_mark_tree_hash_table PROTO ((struct hash_table *));\n void ggc_mark_string PROTO ((char *));\n \n /* Callbacks to the languages.  */"}, {"sha": "38ed7a72c408761675099af62c6bc419d99a63a1", "filename": "gcc/profile.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/565e3f3ec215eb47c30758a8944a6efce5d1fbb1/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/565e3f3ec215eb47c30758a8944a6efce5d1fbb1/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=565e3f3ec215eb47c30758a8944a6efce5d1fbb1", "patch": "@@ -1651,7 +1651,6 @@ output_func_start_profiler ()\n \n   /* Synthesize a constructor function to invoke __bb_init_func with a\n      pointer to this object file's profile block. */\n-  start_sequence ();\n \n   /* Try and make a unique name given the \"file function name\".\n "}, {"sha": "1b175eff0fad69fae5aa0cdfd245db12770036be", "filename": "gcc/varray.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/565e3f3ec215eb47c30758a8944a6efce5d1fbb1/gcc%2Fvarray.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/565e3f3ec215eb47c30758a8944a6efce5d1fbb1/gcc%2Fvarray.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarray.h?ref=565e3f3ec215eb47c30758a8944a6efce5d1fbb1", "patch": "@@ -47,7 +47,7 @@ struct const_equiv_data {\n      pseudos that contain pointers into the replacement area allocated for\n      this inline instance.  These pseudos are then marked as being equivalent\n      to the appropriate address and substituted if valid.  */\n-  rtx rtx;\n+  struct rtx_def *rtx;\n \n   /* Record the valid age for each entry.  The entry is invalid if its\n      age is less than const_age.  */"}]}