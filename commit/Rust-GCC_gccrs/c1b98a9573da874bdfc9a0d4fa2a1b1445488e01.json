{"sha": "c1b98a9573da874bdfc9a0d4fa2a1b1445488e01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFiOThhOTU3M2RhODc0YmRmYzlhMGQ0ZmEyYTFiMTQ0NTQ4OGUwMQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-04-13T10:47:33Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-04-13T10:47:33Z"}, "message": "Treat QUAL_UNION_TYPE like UNION_TYPE when seeing if aggregate.\n\nFrom-SVN: r4118", "tree": {"sha": "5ad42eb845fd1c1c368c84f41be43d6d958f7941", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ad42eb845fd1c1c368c84f41be43d6d958f7941"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1b98a9573da874bdfc9a0d4fa2a1b1445488e01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1b98a9573da874bdfc9a0d4fa2a1b1445488e01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1b98a9573da874bdfc9a0d4fa2a1b1445488e01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1b98a9573da874bdfc9a0d4fa2a1b1445488e01/comments", "author": null, "committer": null, "parents": [{"sha": "e7f3c83f0e1066c2a772ecefb1e3ae644204eccd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7f3c83f0e1066c2a772ecefb1e3ae644204eccd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7f3c83f0e1066c2a772ecefb1e3ae644204eccd"}], "stats": {"total": 72, "additions": 51, "deletions": 21}, "files": [{"sha": "3dc52c61484237c8fde6b40f70a1043b333754de", "filename": "gcc/calls.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b98a9573da874bdfc9a0d4fa2a1b1445488e01/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b98a9573da874bdfc9a0d4fa2a1b1445488e01/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=c1b98a9573da874bdfc9a0d4fa2a1b1445488e01", "patch": "@@ -588,6 +588,7 @@ expand_call (exp, target, ignore)\n   if (warn_aggregate_return\n       && (TREE_CODE (TREE_TYPE (exp)) == RECORD_TYPE\n \t  || TREE_CODE (TREE_TYPE (exp)) == UNION_TYPE\n+\t  || TREE_CODE (TREE_TYPE (exp)) == QUAL_UNION_TYPE\n \t  || TREE_CODE (TREE_TYPE (exp)) == ARRAY_TYPE))\n     warning (\"function call has aggregate value\");\n \n@@ -1798,7 +1799,8 @@ expand_call (exp, target, ignore)\n \t  MEM_IN_STRUCT_P (target)\n \t    = (TREE_CODE (TREE_TYPE (exp)) == ARRAY_TYPE\n \t       || TREE_CODE (TREE_TYPE (exp)) == RECORD_TYPE\n-\t       || TREE_CODE (TREE_TYPE (exp)) == UNION_TYPE);\n+\t       || TREE_CODE (TREE_TYPE (exp)) == UNION_TYPE\n+\t       || TREE_CODE (TREE_TYPE (exp)) == QUAL_UNION_TYPE);\n \t}\n     }\n   else if (pcc_struct_value)\n@@ -1810,7 +1812,8 @@ expand_call (exp, target, ignore)\n \t  MEM_IN_STRUCT_P (target)\n \t    = (TREE_CODE (TREE_TYPE (exp)) == ARRAY_TYPE\n \t       || TREE_CODE (TREE_TYPE (exp)) == RECORD_TYPE\n-\t       || TREE_CODE (TREE_TYPE (exp)) == UNION_TYPE);\n+\t       || TREE_CODE (TREE_TYPE (exp)) == UNION_TYPE\n+\t       || TREE_CODE (TREE_TYPE (exp)) == QUAL_UNION_TYPE);\n \t}\n       else if (TYPE_MODE (TREE_TYPE (exp)) != BLKmode)\n \temit_move_insn (target, gen_rtx (MEM, TYPE_MODE (TREE_TYPE (exp)),"}, {"sha": "02a937c6674c715d16f7d43349817787a5f40f11", "filename": "gcc/dbxout.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b98a9573da874bdfc9a0d4fa2a1b1445488e01/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b98a9573da874bdfc9a0d4fa2a1b1445488e01/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=c1b98a9573da874bdfc9a0d4fa2a1b1445488e01", "patch": "@@ -568,6 +568,7 @@ dbxout_type_fields (type)\n       /* For nameless subunions and subrecords, treat their fields as ours.  */\n       if (DECL_NAME (tem) == NULL_TREE\n \t  && (TREE_CODE (TREE_TYPE (tem)) == UNION_TYPE\n+\t      || TREE_CODE (TREE_TYPE (tem)) == QUAL_UNION_TYPE\n \t      || TREE_CODE (TREE_TYPE (tem)) == RECORD_TYPE))\n \tdbxout_type_fields (TREE_TYPE (tem));\n       /* Omit here local type decls until we know how to support them.  */\n@@ -952,6 +953,7 @@ dbxout_type (type, full, show_arg_types)\n      leave the type-number completely undefined rather than output\n      a cross-reference.  */\n   if (TREE_CODE (type) == RECORD_TYPE || TREE_CODE (type) == UNION_TYPE\n+      || TREE_CODE (type) == QUAL_UNION_TYPE\n       || TREE_CODE (type) == ENUMERAL_TYPE)\n \n     if ((TYPE_NAME (type) != 0 && !full)\n@@ -1093,6 +1095,7 @@ dbxout_type (type, full, show_arg_types)\n \n     case RECORD_TYPE:\n     case UNION_TYPE:\n+    case QUAL_UNION_TYPE:\n       {\n \tint i, n_baseclasses = 0;\n \n@@ -1505,7 +1508,8 @@ dbxout_symbol (decl, local)\n \t       which gives both a typedef name and a tag.  */\n \t    /* dbx requires the tag first and the typedef second.  */\n \t    if ((TREE_CODE (type) == RECORD_TYPE\n-\t\t || TREE_CODE (type) == UNION_TYPE)\n+\t\t || TREE_CODE (type) == UNION_TYPE\n+\t\t || TREE_CODE (type) == QUAL_UNION_TYPE)\n \t\t&& TYPE_NAME (type) == decl\n \t\t&& !(use_gnu_debug_info_extensions && have_used_extensions)\n \t\t&& !TREE_ASM_WRITTEN (TYPE_NAME (type))\n@@ -1534,7 +1538,8 @@ dbxout_symbol (decl, local)\n \n \t    /* Short cut way to output a tag also.  */\n \t    if ((TREE_CODE (type) == RECORD_TYPE\n-\t\t || TREE_CODE (type) == UNION_TYPE)\n+\t\t || TREE_CODE (type) == UNION_TYPE\n+\t\t || TREE_CODE (type) == QUAL_UNION_TYPE)\n \t\t&& TYPE_NAME (type) == decl)\n \t      {\n \t\tif (use_gnu_debug_info_extensions && have_used_extensions)"}, {"sha": "1026f468148690d6b9002451755ed96be587056c", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b98a9573da874bdfc9a0d4fa2a1b1445488e01/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b98a9573da874bdfc9a0d4fa2a1b1445488e01/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=c1b98a9573da874bdfc9a0d4fa2a1b1445488e01", "patch": "@@ -770,7 +770,8 @@ is_tagged_type (type)\n {\n   register enum tree_code code = TREE_CODE (type);\n \n-  return (code == RECORD_TYPE || code == UNION_TYPE || code == ENUMERAL_TYPE);\n+  return (code == RECORD_TYPE || code == UNION_TYPE\n+\t  || code == QUAL_UNION_TYPE || code == ENUMERAL_TYPE);\n }\n \n static char *\n@@ -1379,6 +1380,7 @@ type_is_fundamental (type)\n       case ARRAY_TYPE:\n       case RECORD_TYPE:\n       case UNION_TYPE:\n+      case QUAL_UNION_TYPE:\n       case ENUMERAL_TYPE:\n       case FUNCTION_TYPE:\n       case METHOD_TYPE:\n@@ -2390,6 +2392,7 @@ byte_size_attribute (tree_node)\n       case ENUMERAL_TYPE:\n       case RECORD_TYPE:\n       case UNION_TYPE:\n+      case QUAL_UNION_TYPE:\n \tsize = int_size_in_bytes (tree_node);\n \tbreak;\n \n@@ -3760,11 +3763,12 @@ pend_type (type)\n    FUNCTION_DECL node (for types local to the heading of some function\n    definition), or to a FUNCTION_TYPE node (for types local to the\n    prototyped parameter list of a function type specification), or to a\n-   RECORD_TYPE or UNION_TYPE node (in the case of C++ nested types).\n+   RECORD_TYPE, UNION_TYPE, or QUAL_UNION_TYPE node\n+   (in the case of C++ nested types).\n \n    The `scope' parameter should likewise be NULL or should point to a\n    BLOCK node, a FUNCTION_DECL node, a FUNCTION_TYPE node, a RECORD_TYPE\n-   node, or a UNION_TYPE node.\n+   node, a UNION_TYPE node, or a QUAL_UNION_TYPE node.\n \n    This function is used only for deciding when to \"pend\" and when to\n    \"un-pend\" types to/from the pending_types_list.\n@@ -3949,15 +3953,16 @@ output_type (type, containing_scope)\n       case ENUMERAL_TYPE:\n       case RECORD_TYPE:\n       case UNION_TYPE:\n+      case QUAL_UNION_TYPE:\n \n \t/* For a non-file-scope tagged type, we can always go ahead and\n \t   output a Dwarf description of this type right now, even if\n \t   the type in question is still incomplete, because if this\n \t   local type *was* ever completed anywhere within its scope,\n \t   that complete definition would already have been attached to\n-\t   this RECORD_TYPE, UNION_TYPE or ENUMERAL_TYPE node by the\n-\t   time we reach this point.  That's true because of the way the\n-\t   front-end does its processing of file-scope declarations (of\n+\t   this RECORD_TYPE, UNION_TYPE, QUAL_UNION_TYPE or ENUMERAL_TYPE\n+\t   node by the time we reach this point.  That's true because of the\n+\t   way the front-end does its processing of file-scope declarations (of\n \t   functions and class types) within which other types might be\n \t   nested.  The C and C++ front-ends always gobble up such \"local\n \t   scope\" things en-mass before they try to output *any* debugging\n@@ -4002,6 +4007,7 @@ output_type (type, containing_scope)\n \t    break;\n \n \t  case UNION_TYPE:\n+\t  case QUAL_UNION_TYPE:\n \t    output_die (output_union_type_die, type);\n \t    break;\n \n@@ -4066,9 +4072,9 @@ output_type (type, containing_scope)\n \t\t}\n \t    }\n \n-\t    /* RECORD_TYPEs and UNION_TYPEs are themselves scopes (at least\n-\t       in C++) so we must now output any nested pending types which\n-\t       are local just to this RECORD_TYPE or UNION_TYPE.  */\n+\t    /* RECORD_TYPEs, UNION_TYPEs, and QUAL_UNION_TYPEs are themselves\n+\t       scopes (at least in C++) so we must now output any nested\n+\t       pending types which are local just to this type.  */\n \n \t    output_pending_types_for_scope (type);\n \n@@ -4125,6 +4131,7 @@ output_tagged_type_instantiation (type)\n \tbreak;\n \n       case UNION_TYPE:\n+      case QUAL_UNION_TYPE:\n \toutput_die (output_inlined_union_type_die, type);\n \tbreak;\n "}, {"sha": "06f3649126d65a89cb030edbb17251cd373dec5f", "filename": "gcc/function.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b98a9573da874bdfc9a0d4fa2a1b1445488e01/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b98a9573da874bdfc9a0d4fa2a1b1445488e01/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=c1b98a9573da874bdfc9a0d4fa2a1b1445488e01", "patch": "@@ -883,7 +883,8 @@ put_var_into_stack (decl)\n   MEM_IN_STRUCT_P (reg)\n     = (TREE_CODE (TREE_TYPE (decl)) == ARRAY_TYPE\n        || TREE_CODE (TREE_TYPE (decl)) == RECORD_TYPE\n-       || TREE_CODE (TREE_TYPE (decl)) == UNION_TYPE);\n+       || TREE_CODE (TREE_TYPE (decl)) == UNION_TYPE\n+       || TREE_CODE (TREE_TYPE (decl)) == QUAL_UNION_TYPE);\n \n   /* Now make sure that all refs to the variable, previously made\n      when it was a register, are fixed up to be valid again.  */\n@@ -2650,7 +2651,8 @@ aggregate_value_p (exp)\n     return 1;\n   if (flag_pcc_struct_return\n       && (TREE_CODE (TREE_TYPE (exp)) == RECORD_TYPE\n-\t  || TREE_CODE (TREE_TYPE (exp)) == UNION_TYPE))\n+\t  || TREE_CODE (TREE_TYPE (exp)) == UNION_TYPE\n+\t  || TREE_CODE (TREE_TYPE (exp)) == QUAL_UNION_TYPE))\n     return 1;\n   /* Make sure we have suitable call-clobbered regs to return\n      the value in; if not, we must return it in memory.  */\n@@ -2768,7 +2770,8 @@ assign_parms (fndecl, second_time)\n       int aggregate\n \t= (TREE_CODE (TREE_TYPE (parm)) == ARRAY_TYPE\n \t   || TREE_CODE (TREE_TYPE (parm)) == RECORD_TYPE\n-\t   || TREE_CODE (TREE_TYPE (parm)) == UNION_TYPE);\n+\t   || TREE_CODE (TREE_TYPE (parm)) == UNION_TYPE\n+\t   || TREE_CODE (TREE_TYPE (parm)) == QUAL_UNION_TYPE);\n       struct args_size stack_offset;\n       struct args_size arg_size;\n       int passed_pointer = 0;\n@@ -3593,6 +3596,7 @@ uninitialized_vars_warning (block)\n \t     Unions are troublesome because members may be shorter.  */\n \t  && TREE_CODE (TREE_TYPE (decl)) != RECORD_TYPE\n \t  && TREE_CODE (TREE_TYPE (decl)) != UNION_TYPE\n+\t  && TREE_CODE (TREE_TYPE (decl)) != QUAL_UNION_TYPE\n \t  && TREE_CODE (TREE_TYPE (decl)) != ARRAY_TYPE\n \t  && DECL_RTL (decl) != 0\n \t  && GET_CODE (DECL_RTL (decl)) == REG\n@@ -4166,6 +4170,7 @@ init_function_start (subr, filename, line)\n   if (warn_aggregate_return\n       && (TREE_CODE (TREE_TYPE (DECL_RESULT (subr))) == RECORD_TYPE\n \t  || TREE_CODE (TREE_TYPE (DECL_RESULT (subr))) == UNION_TYPE\n+\t  || TREE_CODE (TREE_TYPE (DECL_RESULT (subr))) == QUAL_UNION_TYPE\n \t  || TREE_CODE (TREE_TYPE (DECL_RESULT (subr))) == ARRAY_TYPE))\n     warning (\"function returns an aggregate\");\n "}, {"sha": "f9bbe89527a914cd62c7e66e4bd5c0f88b15663f", "filename": "gcc/print-tree.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b98a9573da874bdfc9a0d4fa2a1b1445488e01/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b98a9573da874bdfc9a0d4fa2a1b1445488e01/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=c1b98a9573da874bdfc9a0d4fa2a1b1445488e01", "patch": "@@ -449,7 +449,9 @@ print_node (file, prefix, node, indent)\n \t}\n       else if (TREE_CODE (node) == REAL_TYPE)\n \tfprintf (file, \" precision %d\", TYPE_PRECISION (node));\n-      else if (TREE_CODE (node) == RECORD_TYPE || TREE_CODE (node) == UNION_TYPE)\n+      else if (TREE_CODE (node) == RECORD_TYPE\n+\t       || TREE_CODE (node) == UNION_TYPE\n+\t       || TREE_CODE (node) == QUAL_UNION_TYPE)\n \tprint_node (file, \"fields\", TYPE_FIELDS (node), indent + 4);\n       else if (TREE_CODE (node) == FUNCTION_TYPE || TREE_CODE (node) == METHOD_TYPE)\n \t{"}, {"sha": "a08230dc94a220abeda4e67a6b15dd7c6e1b75b4", "filename": "gcc/sdbout.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b98a9573da874bdfc9a0d4fa2a1b1445488e01/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b98a9573da874bdfc9a0d4fa2a1b1445488e01/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=c1b98a9573da874bdfc9a0d4fa2a1b1445488e01", "patch": "@@ -527,6 +527,7 @@ plain_type_1 (type)\n \n     case RECORD_TYPE:\n     case UNION_TYPE:\n+    case QUAL_UNION_TYPE:\n     case ENUMERAL_TYPE:\n       {\n \tchar *tag;\n@@ -558,6 +559,7 @@ plain_type_1 (type)\n \t  }\n \treturn ((TREE_CODE (type) == RECORD_TYPE) ? T_STRUCT\n \t\t: (TREE_CODE (type) == UNION_TYPE) ? T_UNION\n+\t\t: (TREE_CODE (type) == QUAL_UNION_TYPE) ? T_UNION\n \t\t: T_ENUM);\n       }\n     case POINTER_TYPE:\n@@ -753,7 +755,8 @@ sdbout_symbol (decl, local)\n \t within functions.  */\n       if (TREE_CODE (type) == ENUMERAL_TYPE\n \t  || TREE_CODE (type) == RECORD_TYPE\n-\t  || TREE_CODE (type) == UNION_TYPE)\n+\t  || TREE_CODE (type) == UNION_TYPE\n+\t  || TREE_CODE (type) == QUAL_UNION_TYPE)\n \t{\n \t  if (TYPE_SIZE (type) != 0\t\t/* not a forward reference */\n \t      && KNOWN_TYPE_TAG (type) == 0)\t/* not yet declared */\n@@ -992,6 +995,7 @@ sdbout_one_type (type)\n     {\n     case RECORD_TYPE:\n     case UNION_TYPE:\n+    case QUAL_UNION_TYPE:\n     case ENUMERAL_TYPE:\n       type = TYPE_MAIN_VARIANT (type);\n       /* Don't output a type twice.  */\n@@ -1053,6 +1057,7 @@ sdbout_one_type (type)\n \tswitch (TREE_CODE (type))\n \t  {\n \t  case UNION_TYPE:\n+\t  case QUAL_UNION_TYPE:\n \t    PUT_SDB_SCL (C_UNTAG);\n \t    PUT_SDB_TYPE (T_UNION);\n \t    member_scl = C_MOU;"}, {"sha": "4400f614a4850ce525986329fd80c97b2d4dc8c1", "filename": "gcc/stmt.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b98a9573da874bdfc9a0d4fa2a1b1445488e01/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b98a9573da874bdfc9a0d4fa2a1b1445488e01/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=c1b98a9573da874bdfc9a0d4fa2a1b1445488e01", "patch": "@@ -2931,7 +2931,8 @@ expand_decl (decl)\n       MEM_IN_STRUCT_P (DECL_RTL (decl))\n \t= (TREE_CODE (TREE_TYPE (decl)) == ARRAY_TYPE\n \t   || TREE_CODE (TREE_TYPE (decl)) == RECORD_TYPE\n-\t   || TREE_CODE (TREE_TYPE (decl)) == UNION_TYPE);\n+\t   || TREE_CODE (TREE_TYPE (decl)) == UNION_TYPE\n+\t   || TREE_CODE (TREE_TYPE (decl)) == QUAL_UNION_TYPE);\n #if 0\n       /* If this is in memory because of -ffloat-store,\n \t set the volatile bit, to prevent optimizations from\n@@ -2981,7 +2982,8 @@ expand_decl (decl)\n       MEM_IN_STRUCT_P (DECL_RTL (decl))\n \t= (TREE_CODE (TREE_TYPE (decl)) == ARRAY_TYPE\n \t   || TREE_CODE (TREE_TYPE (decl)) == RECORD_TYPE\n-\t   || TREE_CODE (TREE_TYPE (decl)) == UNION_TYPE);\n+\t   || TREE_CODE (TREE_TYPE (decl)) == UNION_TYPE\n+\t   || TREE_CODE (TREE_TYPE (decl)) == QUAL_UNION_TYPE);\n \n       /* Indicate the alignment we actually gave this variable.  */\n #ifdef STACK_BOUNDARY"}, {"sha": "3b34d4cb8d712559602ce76dff2f2f283ab76ea6", "filename": "gcc/varasm.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b98a9573da874bdfc9a0d4fa2a1b1445488e01/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b98a9573da874bdfc9a0d4fa2a1b1445488e01/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=c1b98a9573da874bdfc9a0d4fa2a1b1445488e01", "patch": "@@ -394,7 +394,8 @@ make_decl_rtl (decl, asmspec, top_level)\n \t  MEM_IN_STRUCT_P (DECL_RTL (decl))\n \t    = (TREE_CODE (TREE_TYPE (decl)) == ARRAY_TYPE\n \t       || TREE_CODE (TREE_TYPE (decl)) == RECORD_TYPE\n-\t       || TREE_CODE (TREE_TYPE (decl)) == UNION_TYPE);\n+\t       || TREE_CODE (TREE_TYPE (decl)) == UNION_TYPE\n+\t       || TREE_CODE (TREE_TYPE (decl)) == QUAL_UNION_TYPE);\n \n \t  /* Optionally set flags or add text to the name to record information\n \t     such as that it is a function name."}]}