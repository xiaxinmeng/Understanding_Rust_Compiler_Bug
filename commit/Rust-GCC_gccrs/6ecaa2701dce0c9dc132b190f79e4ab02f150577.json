{"sha": "6ecaa2701dce0c9dc132b190f79e4ab02f150577", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVjYWEyNzAxZGNlMGM5ZGMxMzJiMTkwZjc5ZTRhYjAyZjE1MDU3Nw==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-06-21T14:02:10Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-06-21T14:02:10Z"}, "message": "PlainSocketImpl.java: Reformatted.\n\n2003-06-21  Michael Koch  <konqueror@gmx.de>\n\n\t* java/net/PlainSocketImpl.java:\n\tReformatted.\n\t(PlainSocketImpl): Merged class documentaion with classpath.\n\t(in): Moved.\n\t(out): Moved.\n\t(PlainSocketImpl): New empty constructor.\n\t(finalize): Moved.\n\t(setOption): Merged documentation from classpath.\n\t(getOption): Likewise.\n\t(create): Likewise.\n\t(connect): Likewise.\n\t(bind): Likewise.\n\t(listen): Likewise.\n\t(accept): Likewise.\n\t(available): Likewise.\n\t(close): Likewise.\n\t(read): Likewise.\n\t(write): Likewise.\n\t(getInputStream): Made synchronozed to get sure that only one stream\n\tobject can be created for this socket, merged documentation from\n\tclasspath.\n\t(getOutputStream): Likewise.\n\nFrom-SVN: r68305", "tree": {"sha": "5f317b890de40a395878d133d21ab2af7eee4049", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f317b890de40a395878d133d21ab2af7eee4049"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ecaa2701dce0c9dc132b190f79e4ab02f150577", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ecaa2701dce0c9dc132b190f79e4ab02f150577", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ecaa2701dce0c9dc132b190f79e4ab02f150577", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ecaa2701dce0c9dc132b190f79e4ab02f150577/comments", "author": null, "committer": null, "parents": [{"sha": "5d938b1ac5a047f31b338071f5ad917ec3397a90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d938b1ac5a047f31b338071f5ad917ec3397a90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d938b1ac5a047f31b338071f5ad917ec3397a90"}], "stats": {"total": 222, "additions": 187, "deletions": 35}, "files": [{"sha": "2386d53a01becd645c69bb592c0c73cdc16816e4", "filename": "libjava/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ecaa2701dce0c9dc132b190f79e4ab02f150577/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ecaa2701dce0c9dc132b190f79e4ab02f150577/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=6ecaa2701dce0c9dc132b190f79e4ab02f150577", "patch": "@@ -1,3 +1,28 @@\n+2003-06-21  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/net/PlainSocketImpl.java:\n+\tReformatted.\n+\t(PlainSocketImpl): Merged class documentaion with classpath.\n+\t(in): Moved.\n+\t(out): Moved.\n+\t(PlainSocketImpl): New empty constructor.\n+\t(finalize): Moved.\n+\t(setOption): Merged documentation from classpath.\n+\t(getOption): Likewise.\n+\t(create): Likewise.\n+\t(connect): Likewise.\n+\t(bind): Likewise.\n+\t(listen): Likewise.\n+\t(accept): Likewise.\n+\t(available): Likewise.\n+\t(close): Likewise.\n+\t(read): Likewise.\n+\t(write): Likewise.\n+\t(getInputStream): Made synchronozed to get sure that only one stream\n+\tobject can be created for this socket, merged documentation from\n+\tclasspath.\n+\t(getOutputStream): Likewise.\n+\n 2003-06-21  Michael Koch  <konqueror@gmx.de>\n \n \t* java/net/PlainSocketImpl.java:"}, {"sha": "ad0ce46c7eaa6481e14fcb0e39c55cbe6a5bffee", "filename": "libjava/java/net/PlainSocketImpl.java", "status": "modified", "additions": 162, "deletions": 35, "changes": 197, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ecaa2701dce0c9dc132b190f79e4ab02f150577/libjava%2Fjava%2Fnet%2FPlainSocketImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ecaa2701dce0c9dc132b190f79e4ab02f150577/libjava%2Fjava%2Fnet%2FPlainSocketImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FPlainSocketImpl.java?ref=6ecaa2701dce0c9dc132b190f79e4ab02f150577", "patch": "@@ -50,8 +50,14 @@\n  */\n \n /**\n+ * Unless the application installs its own SocketImplFactory, this is the\n+ * default socket implemetation that will be used.  It simply uses a\n+ * combination of Java and native routines to implement standard BSD\n+ * style sockets of family AF_INET and types SOCK_STREAM and SOCK_DGRAM\n+ *\n  * @author Per Bothner <bothner@cygnus.com>\n  * @author Nic Ferrier <nferrier@tapsellferrier.co.uk>\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n  */\n class PlainSocketImpl extends SocketImpl\n {\n@@ -96,21 +102,101 @@ class PlainSocketImpl extends SocketImpl\n   // localAddress cache\n   InetAddress localAddress;\n \n+  /**\n+   * A cached copy of the in stream for reading from the socket.\n+   */\n+  private InputStream in;\n+\n+  /**\n+   * A cached copy of the out stream for writing to the socket.\n+   */\n+  private OutputStream out;\n+\n+  /**\n+   * Default do nothing constructor\n+   */\n+  public PlainSocketImpl()\n+  {\n+  }\n+  \n+  protected void finalize() throws Throwable\n+  {\n+    synchronized (this)\n+      {\n+\tif (fnum != -1)\n+\t  try\n+\t    {\n+\t      close();\n+\t    }\n+\t  catch (IOException ex)\n+\t    {\n+\t      // ignore\n+\t    }\n+      }\n+    super.finalize();\n+  }\n+\n+  /**\n+   * Sets the specified option on a socket to the passed in object.  For\n+   * options that take an integer argument, the passed in object is an\n+   * Integer.  The option_id parameter is one of the defined constants in\n+   * this interface.\n+   *\n+   * @param option_id The identifier of the option\n+   * @param val The value to set the option to\n+   *\n+   * @exception SocketException If an error occurs\n+   */\n   public native void setOption(int optID, Object value) throws SocketException;\n \n+  /**\n+   * Returns the current setting of the specified option.  The Object returned\n+   * will be an Integer for options that have integer values.  The option_id\n+   * is one of the defined constants in this interface.\n+   *\n+   * @param option_id The option identifier\n+   *\n+   * @return The current value of the option\n+   *\n+   * @exception SocketException If an error occurs\n+   */\n   public native Object getOption(int optID) throws SocketException;\n \n   public native void shutdownInput () throws IOException;\n \n   public native void shutdownOutput () throws IOException;\n \n+  /**\n+   * Creates a new socket that is not bound to any local address/port and\n+   * is not connected to any remote address/port.  This will be created as\n+   * a stream socket if the stream parameter is true, or a datagram socket\n+   * if the stream parameter is false.\n+   *\n+   * @param stream true for a stream socket, false for a datagram socket\n+   */\n   protected native void create (boolean stream)  throws IOException;\n \n+  /**\n+   * Connects to the remote hostname and port specified as arguments.\n+   *\n+   * @param hostname The remote hostname to connect to\n+   * @param port The remote port to connect to\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   protected void connect (String host, int port) throws IOException\n   {\n     connect (new InetSocketAddress (InetAddress.getByName(host), port), 0);\n   }\n \n+  /**\n+   * Connects to the remote address and port specified as arguments.\n+   *\n+   * @param addr The remote address to connect to\n+   * @param port The remote port to connect to\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   protected void connect (InetAddress host, int port) throws IOException\n   {\n     connect (new InetSocketAddress (host, port), 0);\n@@ -119,80 +205,121 @@ protected void connect (InetAddress host, int port) throws IOException\n   protected native void connect (SocketAddress addr, int timeout)\n     throws IOException;\n \n+  /**\n+   * Binds to the specified port on the specified addr.  Note that this addr\n+   * must represent a local IP address.  **** How bind to INADDR_ANY? ****\n+   *\n+   * @param addr The address to bind to\n+   * @param port The port number to bind to\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   protected native void bind (InetAddress host, int port) throws IOException;\n \n+  /**\n+   * Starts listening for connections on a socket. The queuelen parameter\n+   * is how many pending connections will queue up waiting to be serviced\n+   * before being accept'ed.  If the queue of pending requests exceeds this\n+   * number, additional connections will be refused.\n+   *\n+   * @param queuelen The length of the pending connection queue\n+   * \n+   * @exception IOException If an error occurs\n+   */\n   protected native void listen (int backlog) throws IOException;\n \n   private native void accept (PlainSocketImpl s) throws IOException;\n \n+  /**\n+   * Accepts a new connection on this socket and returns in in the \n+   * passed in SocketImpl.\n+   *\n+   * @param impl The SocketImpl object to accept this connection.\n+   */\n   protected void accept (SocketImpl s) throws IOException\n   {\n     accept((PlainSocketImpl) s);\n   }\n \n+  /**\n+   * Returns the number of bytes that the caller can read from this socket\n+   * without blocking. \n+   *\n+   * @return The number of readable bytes before blocking\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   protected native int available() throws IOException;\n \n+  /**\n+   * Closes the socket.  This will cause any InputStream or OutputStream\n+   * objects for this Socket to be closed as well.\n+   * <p>\n+   * Note that if the SO_LINGER option is set on this socket, then the\n+   * operation could block.\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   protected native void close () throws IOException;\n \n   protected native void sendUrgentData(int data)\n     throws IOException;\n \n-  // Stream handling.\n-\n-  /** A cached copy of the in stream for reading from the socket.  */\n-  private InputStream in;\n-\n-  /** A cached copy of the out stream for writing to the socket.  */\n-  private OutputStream out;\n-\n-\n-  // The native read methods.\n-\n   native int read() throws IOException;\n \n+  /**\n+   * Internal method used by SocketInputStream for reading data from\n+   * the connection.  Reads up to len bytes of data into the buffer\n+   * buf starting at offset bytes into the buffer.\n+   *\n+   * @return The actual number of bytes read or -1 if end of stream.\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   native int read(byte[] buffer, int offset, int count)\n     throws IOException;\n \n-\n-  // The native write methods.\n-\n   native void write(int c) throws IOException;\n \n+  /**\n+   * Internal method used by SocketOuputStream for writing data to\n+   * the connection.  Writes up to len bytes of data from the buffer\n+   * buf starting at offset bytes into the buffer.\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   native void write(byte[] buffer, int offset, int count)\n     throws IOException;\n \n-  protected void finalize() throws Throwable\n-  {\n-    synchronized (this)\n-      {\n-\tif (fnum != -1)\n-\t  try\n-\t    {\n-\t      close();\n-\t    }\n-\t  catch (IOException ex)\n-\t    {\n-\t      // ignore\n-\t    }\n-      }\n-    super.finalize();\n-  }\n-\n-  /** @return the input stream attached to the socket.\n+  /**\n+   * Returns an InputStream object for reading from this socket.  This will\n+   * be an instance of SocketInputStream.\n+   *\n+   * @return An input stream attached to the socket.\n+   *\n+   * @exception IOException If an error occurs\n    */\n-  protected InputStream getInputStream() throws IOException\n+  protected synchronized InputStream getInputStream() throws IOException\n   {\n     if (in == null)\n       in = new SocketInputStream();\n+    \n     return in;\n   }\n \n-  /** @return the output stream attached to the socket.\n+  /**\n+   * Returns an OutputStream object for writing to this socket.  This will\n+   * be an instance of SocketOutputStream.\n+   *\n+   * @return An output stream attached to the socket.\n+   *\n+   * @exception IOException If an error occurs\n    */\n-  protected OutputStream getOutputStream() throws IOException\n+  protected synchronized OutputStream getOutputStream() throws IOException\n   {\n     if (out == null)\n       out = new SocketOutputStream();\n+    \n     return out;\n   }\n "}]}