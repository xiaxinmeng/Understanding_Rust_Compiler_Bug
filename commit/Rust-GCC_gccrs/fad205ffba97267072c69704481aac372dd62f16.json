{"sha": "fad205ffba97267072c69704481aac372dd62f16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFkMjA1ZmZiYTk3MjY3MDcyYzY5NzA0NDgxYWFjMzcyZGQ2MmYxNg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-06-16T21:41:10Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-06-16T21:41:10Z"}, "message": "decl.c, [...]: Don't use the PTR macro.\n\ncp:\n\t* cp/decl.c, cp/pt.c, cp/search.c, cp/tree.c: Don't use the PTR\n\tmacro.\n\ngcc:\n\t* bitmap.c, builtins.c, c-incpath.c, cgraph.c, config/frv/frv.c,\n\tconfig/mips/mips.c, cppfiles.c, cpphash.c, cppinit.c, cpplib.c,\n\tdwarf2out.c, dwarfout.c, except.c, expr.c, expr.h, fold-const.c,\n\tfunction.c, gcc.c, genoutput.c, gensupport.c, global.c,\n\thaifa-sched.c, hashtable.c, ifcvt.c, integrate.c, local-alloc.c,\n\tloop.c, mips-tdump.c, mips-tfile.c, mkdeps.c, protoize.c,\n\tread-rtl.c, recog.h, reload1.c, sbitmap.c, ssa-dce.c,\n\tstringpool.c, tlink.c, tree.c, varasm.c, varray.c: Don't use\n\tthe PTR macro.\n\nFrom-SVN: r68043", "tree": {"sha": "5aa9e7cef82d21751e0893c56bdaeadef5722525", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5aa9e7cef82d21751e0893c56bdaeadef5722525"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fad205ffba97267072c69704481aac372dd62f16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fad205ffba97267072c69704481aac372dd62f16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fad205ffba97267072c69704481aac372dd62f16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fad205ffba97267072c69704481aac372dd62f16/comments", "author": null, "committer": null, "parents": [{"sha": "4ff58371763d8dfb211e776e22e74a51fa3eb909", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ff58371763d8dfb211e776e22e74a51fa3eb909", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ff58371763d8dfb211e776e22e74a51fa3eb909"}], "stats": {"total": 390, "additions": 202, "deletions": 188}, "files": [{"sha": "debc696c52e25294a6589cc0de5651093b0f1107", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -1,5 +1,15 @@\n 2003-06-16  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n+\t* bitmap.c, builtins.c, c-incpath.c, cgraph.c, config/frv/frv.c,\n+\tconfig/mips/mips.c, cppfiles.c, cpphash.c, cppinit.c, cpplib.c,\n+\tdwarf2out.c, dwarfout.c, except.c, expr.c, expr.h, fold-const.c,\n+\tfunction.c, gcc.c, genoutput.c, gensupport.c, global.c,\n+\thaifa-sched.c, hashtable.c, ifcvt.c, integrate.c, local-alloc.c,\n+\tloop.c, mips-tdump.c, mips-tfile.c, mkdeps.c, protoize.c,\n+\tread-rtl.c, recog.h, reload1.c, sbitmap.c, ssa-dce.c,\n+\tstringpool.c, tlink.c, tree.c, varasm.c, varray.c: Don't use\n+\tthe PTR macro.\n+\n \t* gengtype.c: Don't use UNION_INIT_ZERO.\n \t* system.h (UNION_INIT_ZERO): Delete.\n "}, {"sha": "98229d598153b80d01090efb5d075aab8fa2e037", "filename": "gcc/bitmap.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.c?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -729,21 +729,21 @@ debug_bitmap_file (FILE *file, bitmap head)\n   bitmap_element *ptr;\n \n   fprintf (file, \"\\nfirst = \");\n-  fprintf (file, HOST_PTR_PRINTF, (PTR) head->first);\n+  fprintf (file, HOST_PTR_PRINTF, (void *) head->first);\n   fprintf (file, \" current = \");\n-  fprintf (file, HOST_PTR_PRINTF, (PTR) head->current);\n+  fprintf (file, HOST_PTR_PRINTF, (void *) head->current);\n   fprintf (file, \" indx = %u\\n\", head->indx);\n \n   for (ptr = head->first; ptr; ptr = ptr->next)\n     {\n       unsigned int i, j, col = 26;\n \n       fprintf (file, \"\\t\");\n-      fprintf (file, HOST_PTR_PRINTF, (PTR) ptr);\n+      fprintf (file, HOST_PTR_PRINTF, (void *) ptr);\n       fprintf (file, \" next = \");\n-      fprintf (file, HOST_PTR_PRINTF, (PTR) ptr->next);\n+      fprintf (file, HOST_PTR_PRINTF, (void *) ptr->next);\n       fprintf (file, \" prev = \");\n-      fprintf (file, HOST_PTR_PRINTF, (PTR) ptr->prev);\n+      fprintf (file, HOST_PTR_PRINTF, (void *) ptr->prev);\n       fprintf (file, \" indx = %u\\n\\t\\tbits = {\", ptr->indx);\n \n       for (i = 0; i < BITMAP_ELEMENT_WORDS; i++)"}, {"sha": "0a53e3c60f0c2a4a579be86816f2e337afed4975", "filename": "gcc/builtins.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -2277,11 +2277,11 @@ expand_builtin_memcpy (tree arglist, rtx target, enum machine_mode mode)\n \t  && GET_CODE (len_rtx) == CONST_INT\n \t  && (unsigned HOST_WIDE_INT) INTVAL (len_rtx) <= strlen (src_str) + 1\n \t  && can_store_by_pieces (INTVAL (len_rtx), builtin_memcpy_read_str,\n-\t\t\t\t  (PTR) src_str, dest_align))\n+\t\t\t\t  (void *) src_str, dest_align))\n \t{\n \t  dest_mem = store_by_pieces (dest_mem, INTVAL (len_rtx),\n \t\t\t\t      builtin_memcpy_read_str,\n-\t\t\t\t      (PTR) src_str, dest_align, 0);\n+\t\t\t\t      (void *) src_str, dest_align, 0);\n \t  dest_mem = force_operand (XEXP (dest_mem, 0), NULL_RTX);\n #ifdef POINTERS_EXTEND_UNSIGNED\n \t  if (GET_MODE (dest_mem) != ptr_mode)\n@@ -2374,13 +2374,13 @@ expand_builtin_mempcpy (tree arglist, rtx target, enum machine_mode mode,\n \t  && GET_CODE (len_rtx) == CONST_INT\n \t  && (unsigned HOST_WIDE_INT) INTVAL (len_rtx) <= strlen (src_str) + 1\n \t  && can_store_by_pieces (INTVAL (len_rtx), builtin_memcpy_read_str,\n-\t\t\t\t  (PTR) src_str, dest_align))\n+\t\t\t\t  (void *) src_str, dest_align))\n \t{\n \t  dest_mem = get_memory_rtx (dest);\n \t  set_mem_align (dest_mem, dest_align);\n \t  dest_mem = store_by_pieces (dest_mem, INTVAL (len_rtx),\n \t\t\t\t      builtin_memcpy_read_str,\n-\t\t\t\t      (PTR) src_str, dest_align, endp);\n+\t\t\t\t      (void *) src_str, dest_align, endp);\n \t  dest_mem = force_operand (XEXP (dest_mem, 0), NULL_RTX);\n #ifdef POINTERS_EXTEND_UNSIGNED\n \t  if (GET_MODE (dest_mem) != ptr_mode)\n@@ -2626,13 +2626,13 @@ expand_builtin_strncpy (tree arglist, rtx target, enum machine_mode mode)\n \t  if (!p || dest_align == 0 || !host_integerp (len, 1)\n \t      || !can_store_by_pieces (tree_low_cst (len, 1),\n \t\t\t\t       builtin_strncpy_read_str,\n-\t\t\t\t       (PTR) p, dest_align))\n+\t\t\t\t       (void *) p, dest_align))\n \t    return 0;\n \n \t  dest_mem = get_memory_rtx (dest);\n \t  store_by_pieces (dest_mem, tree_low_cst (len, 1),\n \t\t\t   builtin_strncpy_read_str,\n-\t\t\t   (PTR) p, dest_align, 0);\n+\t\t\t   (void *) p, dest_align, 0);\n \t  dest_mem = force_operand (XEXP (dest_mem, 0), NULL_RTX);\n #ifdef POINTERS_EXTEND_UNSIGNED\n \t  if (GET_MODE (dest_mem) != ptr_mode)\n@@ -2743,7 +2743,7 @@ expand_builtin_memset (tree arglist, rtx target, enum machine_mode mode)\n \t  c = 1;\n \t  if (!can_store_by_pieces (tree_low_cst (len, 1),\n \t\t\t\t    builtin_memset_read_str,\n-\t\t\t\t    (PTR) &c, dest_align))\n+\t\t\t\t    &c, dest_align))\n \t    return 0;\n \n \t  val = fold (build1 (CONVERT_EXPR, unsigned_char_type_node, val));\n@@ -2753,7 +2753,7 @@ expand_builtin_memset (tree arglist, rtx target, enum machine_mode mode)\n \t  dest_mem = get_memory_rtx (dest);\n \t  store_by_pieces (dest_mem, tree_low_cst (len, 1),\n \t\t\t   builtin_memset_gen_str,\n-\t\t\t   (PTR) val_rtx, dest_align, 0);\n+\t\t\t   val_rtx, dest_align, 0);\n \t  dest_mem = force_operand (XEXP (dest_mem, 0), NULL_RTX);\n #ifdef POINTERS_EXTEND_UNSIGNED\n \t  if (GET_MODE (dest_mem) != ptr_mode)\n@@ -2770,14 +2770,14 @@ expand_builtin_memset (tree arglist, rtx target, enum machine_mode mode)\n \t  if (!host_integerp (len, 1))\n \t    return 0;\n \t  if (!can_store_by_pieces (tree_low_cst (len, 1),\n-\t\t\t\t    builtin_memset_read_str, (PTR) &c,\n+\t\t\t\t    builtin_memset_read_str, &c,\n \t\t\t\t    dest_align))\n \t    return 0;\n \n \t  dest_mem = get_memory_rtx (dest);\n \t  store_by_pieces (dest_mem, tree_low_cst (len, 1),\n \t\t\t   builtin_memset_read_str,\n-\t\t\t   (PTR) &c, dest_align, 0);\n+\t\t\t   &c, dest_align, 0);\n \t  dest_mem = force_operand (XEXP (dest_mem, 0), NULL_RTX);\n #ifdef POINTERS_EXTEND_UNSIGNED\n \t  if (GET_MODE (dest_mem) != ptr_mode)"}, {"sha": "b350a21e9428c1e5d5abcca367d24143baeefad3", "filename": "gcc/c-incpath.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fc-incpath.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fc-incpath.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-incpath.c?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -83,7 +83,7 @@ free_path (path, reason)\n       break;\n     }\n \n-  free ((PTR) path->name);\n+  free (path->name);\n   free (path);\n }\n "}, {"sha": "82e367f2929b67d7493217befab1828974de8873", "filename": "gcc/cgraph.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -57,14 +57,14 @@ bool cgraph_global_info_ready = false;\n static struct cgraph_edge *create_edge PARAMS ((struct cgraph_node *,\n \t\t\t\t\t\tstruct cgraph_node *));\n static void cgraph_remove_edge PARAMS ((struct cgraph_node *, struct cgraph_node *));\n-static hashval_t hash_node PARAMS ((const PTR));\n-static int eq_node PARAMS ((const PTR, const PTR));\n+static hashval_t hash_node PARAMS ((const void *));\n+static int eq_node PARAMS ((const void *, const void *));\n \n /* Returns a hash code for P.  */\n \n static hashval_t\n hash_node (p)\n-     const PTR p;\n+     const void *p;\n {\n   return (hashval_t)\n     htab_hash_pointer (DECL_ASSEMBLER_NAME\n@@ -75,8 +75,8 @@ hash_node (p)\n \n static int\n eq_node (p1, p2)\n-     const PTR p1;\n-     const PTR p2;\n+     const void *p1;\n+     const void *p2;\n {\n   return ((DECL_ASSEMBLER_NAME (((struct cgraph_node *) p1)->decl)) ==\n \t  DECL_ASSEMBLER_NAME ((tree) p2));"}, {"sha": "078c7c03b544329405350101af3c90dbec25efd0", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -1689,7 +1689,7 @@ frv_function_epilogue (file, size)\n   frv_stack_cache = (frv_stack_t *)0;\n \n   /* zap last used registers for conditional execution.  */\n-  memset ((PTR) &frv_ifcvt.tmp_reg, 0, sizeof (frv_ifcvt.tmp_reg));\n+  memset (&frv_ifcvt.tmp_reg, 0, sizeof (frv_ifcvt.tmp_reg));\n \n   /* release the bitmap of created insns.  */\n   BITMAP_XFREE (frv_ifcvt.scratch_insns_bitmap);\n@@ -6565,7 +6565,7 @@ frv_ifcvt_modify_tests (ce_info, p_true, p_false)\n      consider registers that are not preserved across function calls and are\n      not fixed.  However, allow the ICC/ICR temporary registers to be allocated\n      if we did not need to use them in reloading other registers. */\n-  memset ((PTR) &tmp_reg->regs, 0, sizeof (tmp_reg->regs));\n+  memset (&tmp_reg->regs, 0, sizeof (tmp_reg->regs));\n   COPY_HARD_REG_SET (tmp_reg->regs, call_used_reg_set);\n   AND_COMPL_HARD_REG_SET (tmp_reg->regs, fixed_reg_set);\n   SET_HARD_REG_BIT (tmp_reg->regs, ICC_TEMP);\n@@ -8650,7 +8650,7 @@ frv_pack_insns ()\n   /* Set up the instruction and register states.  */\n   dfa_start ();\n   frv_state = (state_t) xmalloc (state_size ());\n-  memset ((PTR) reg_state, REGSTATE_DEAD, sizeof (reg_state));\n+  memset (reg_state, REGSTATE_DEAD, sizeof (reg_state));\n \n   /* Go through the insns, and repack the insns.  */\n   state_reset (frv_state);\n@@ -8783,7 +8783,7 @@ frv_pack_insns ()\n \t}\n     }\n \n-  free ((PTR) frv_state);\n+  free (frv_state);\n   dfa_finish ();\n   return;\n }"}, {"sha": "80bb2b12fdb023f9d15fa180c4423043e11e22bd", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -272,8 +272,8 @@ static void iris6_asm_named_section_1\t\tPARAMS ((const char *,\n \t\t\t\t\t\t\t unsigned int));\n static void iris6_asm_named_section\t\tPARAMS ((const char *,\n \t\t\t\t\t\t\t unsigned int));\n-static int iris_section_align_entry_eq\t\tPARAMS ((const PTR, const PTR));\n-static hashval_t iris_section_align_entry_hash\tPARAMS ((const PTR));\n+static int iris_section_align_entry_eq\t\tPARAMS ((const void *, const void *));\n+static hashval_t iris_section_align_entry_hash\tPARAMS ((const void *));\n static int iris6_section_align_1\t\tPARAMS ((void **, void *));\n static void iris6_file_end\t\t\tPARAMS ((void));\n #endif\n@@ -10684,8 +10684,8 @@ static FILE *iris_orig_asm_out_file;\n \n static int\n iris_section_align_entry_eq (p1, p2)\n-     const PTR p1;\n-     const PTR p2;\n+     const void *p1;\n+     const void *p2;\n {\n   const struct iris_section_align_entry *old = p1;\n   const char *new = p2;\n@@ -10695,7 +10695,7 @@ iris_section_align_entry_eq (p1, p2)\n \n static hashval_t\n iris_section_align_entry_hash (p)\n-     const PTR p;\n+     const void *p;\n {\n   const struct iris_section_align_entry *old = p;\n   return htab_hash_string (old->name);"}, {"sha": "663c337120d39ffe14792b128d384bb12ea6668c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -1,3 +1,8 @@\n+2003-06-16  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* cp/decl.c, cp/pt.c, cp/search.c, cp/tree.c: Don't use the PTR\n+\tmacro.\n+\n 2003-06-16  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n \t* tree.c: Convert to ISO C."}, {"sha": "d76133a0f4aefd9e98881881a7a76f6f87bea079", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -5384,7 +5384,7 @@ build_typename_type (tree context, tree name, tree fullname)\n {\n   tree t;\n   tree d;\n-  PTR *e;\n+  void **e;\n \n   if (typename_htab == NULL)\n     {"}, {"sha": "67e0eb0f1ff5a6ed29936a7c4370704e5ea76fee", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -2433,10 +2433,10 @@ process_partial_specialization (decl)\n      or some such would have been OK.  */\n   tpd.level = TMPL_PARMS_DEPTH (current_template_parms);\n   tpd.parms = alloca (sizeof (int) * ntparms);\n-  memset ((PTR) tpd.parms, 0, sizeof (int) * ntparms);\n+  memset (tpd.parms, 0, sizeof (int) * ntparms);\n \n   tpd.arg_uses_template_parms = alloca (sizeof (int) * nargs);\n-  memset ((PTR) tpd.arg_uses_template_parms, 0, sizeof (int) * nargs);\n+  memset (tpd.arg_uses_template_parms, 0, sizeof (int) * nargs);\n   for (i = 0; i < nargs; ++i)\n     {\n       tpd.current_arg = i;\n@@ -2521,7 +2521,7 @@ process_partial_specialization (decl)\n \t\t template, not in the specialization.  */\n \t      tpd2.current_arg = i;\n \t      tpd2.arg_uses_template_parms[i] = 0;\n-\t      memset ((PTR) tpd2.parms, 0, sizeof (int) * nargs);\n+\t      memset (tpd2.parms, 0, sizeof (int) * nargs);\n \t      for_each_template_parm (type,\n \t\t\t\t      &mark_template_parm,\n \t\t\t\t      &tpd2,"}, {"sha": "0cc769ed8ce1a189a249e66a5587d05c206410b5", "filename": "gcc/cp/search.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -1262,7 +1262,7 @@ lookup_member (tree xbasetype, tree name, int protect, bool want_type)\n   n_calls_lookup_field++;\n #endif /* GATHER_STATISTICS */\n \n-  memset ((PTR) &lfi, 0, sizeof (lfi));\n+  memset (&lfi, 0, sizeof (lfi));\n   lfi.type = type;\n   lfi.name = name;\n   lfi.want_type = want_type;"}, {"sha": "92c1ab39951e3bcc7392fb280f29b1aa04667f82", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -852,7 +852,7 @@ tree\n hash_tree_cons (tree purpose, tree value, tree chain)\n {\n   int hashcode = 0;\n-  PTR* slot;\n+  void **slot;\n   struct list_proxy proxy;\n \n   /* Hash the list node.  */\n@@ -867,7 +867,7 @@ hash_tree_cons (tree purpose, tree value, tree chain)\n \t\t\t\t   INSERT);\n   /* If not, create a new node.  */\n   if (!*slot)\n-    *slot = (PTR) tree_cons (purpose, value, chain);\n+    *slot = tree_cons (purpose, value, chain);\n   return *slot;\n }\n "}, {"sha": "5a284d4575bfb7dd477bd06c8880981d0523be88", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -560,7 +560,7 @@ purge_cache (inc)\n {\n   if (inc->buffer)\n     {\n-      free ((PTR) inc->buffer);\n+      free ((void *) inc->buffer);\n       inc->buffer = NULL;\n     }\n }\n@@ -708,8 +708,7 @@ _cpp_report_missing_guards (pfile)\n      cpp_reader *pfile;\n {\n   int banner = 0;\n-  splay_tree_foreach (pfile->all_include_files, report_missing_guard,\n-\t\t      (PTR) &banner);\n+  splay_tree_foreach (pfile->all_include_files, report_missing_guard, &banner);\n }\n \n /* Callback function for splay_tree_foreach().  */"}, {"sha": "018085a8346a0771ac785fd53dba5a9b22c7374f", "filename": "gcc/cpphash.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fcpphash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fcpphash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.c?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -42,7 +42,7 @@ alloc_node (table)\n \n   node = (cpp_hashnode *) obstack_alloc (&table->pfile->hash_ob,\n \t\t\t\t\t sizeof (cpp_hashnode));\n-  memset ((PTR) node, 0, sizeof (cpp_hashnode));\n+  memset (node, 0, sizeof (cpp_hashnode));\n   return node;\n }\n \n@@ -123,7 +123,7 @@ void\n cpp_forall_identifiers (pfile, cb, v)\n      cpp_reader *pfile;\n      cpp_cb cb;\n-     PTR v;\n+     void *v;\n {\n   /* We don't need a proxy since the hash table's identifier comes\n      first in cpp_hashnode.  */"}, {"sha": "e1d125e4b4d05b20d6c5f8eb6dbf12d5fc9b10ed", "filename": "gcc/cppinit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -221,7 +221,7 @@ cpp_destroy (pfile)\n \n   if (pfile->macro_buffer)\n     {\n-      free ((PTR) pfile->macro_buffer);\n+      free (pfile->macro_buffer);\n       pfile->macro_buffer = NULL;\n       pfile->macro_buffer_len = 0;\n     }"}, {"sha": "f80c2926a0835f57b407cbae8cce1f622f40174c", "filename": "gcc/cpplib.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -681,7 +681,7 @@ do_include_common (pfile, type)\n       _cpp_execute_include (pfile, fname, angle_brackets, type);\n     }\n \n-  free ((PTR) fname);\n+  free ((void *) fname);\n }\n \n static void\n@@ -1320,7 +1320,7 @@ do_pragma_dependency (pfile)\n \t}\n     }\n \n-  free ((PTR) fname);\n+  free ((void *) fname);\n }\n \n /* Get a token but skip padding.  */"}, {"sha": "6007c56c3ee7cc304ea6f109aad25b0a5e72c48c", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -4692,7 +4692,7 @@ add_AT_string (die, attr_kind, str)\n {\n   dw_attr_ref attr = (dw_attr_ref) ggc_alloc (sizeof (dw_attr_node));\n   struct indirect_string_node *node;\n-  PTR *slot;\n+  void **slot;\n \n   if (! debug_str_hash)\n     debug_str_hash = htab_create_ggc (10, debug_str_do_hash, "}, {"sha": "6210ab91f858f7c2e528c59b792d4a0a6b34ecc6", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -6367,7 +6367,7 @@ dwarfout_init (main_input_filename)\n   fputc ('\\n', asm_out_file);\n   ASM_OUTPUT_PUSH_SECTION (asm_out_file, DEBUG_SECTION);\n   ASM_OUTPUT_LABEL (asm_out_file, DEBUG_BEGIN_LABEL);\n-  output_die (output_compile_unit_die, (PTR) main_input_filename);\n+  output_die (output_compile_unit_die, (void *) main_input_filename);\n   ASM_OUTPUT_POP_SECTION (asm_out_file);\n \n   fputc ('\\n', asm_out_file);"}, {"sha": "0ea1fc7bf096def6ce5d690d9a64c8d916ca12bf", "filename": "gcc/except.c", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -255,9 +255,9 @@ struct eh_status GTY(())\n };\n \n \f\n-static int t2r_eq\t\t\t\tPARAMS ((const PTR,\n-\t\t\t\t\t\t\t const PTR));\n-static hashval_t t2r_hash\t\t\tPARAMS ((const PTR));\n+static int t2r_eq\t\t\t\tPARAMS ((const void *,\n+\t\t\t\t\t\t\t const void *));\n+static hashval_t t2r_hash\t\t\tPARAMS ((const void *));\n static void add_type_for_runtime\t\tPARAMS ((tree));\n static tree lookup_type_for_runtime\t\tPARAMS ((tree));\n \n@@ -275,12 +275,12 @@ static struct eh_region *duplicate_eh_region_1\tPARAMS ((struct eh_region *,\n \t\t\t\t\t\t     struct inline_remap *));\n static void duplicate_eh_region_2\t\tPARAMS ((struct eh_region *,\n \t\t\t\t\t\t\t struct eh_region **));\n-static int ttypes_filter_eq\t\t\tPARAMS ((const PTR,\n-\t\t\t\t\t\t\t const PTR));\n-static hashval_t ttypes_filter_hash\t\tPARAMS ((const PTR));\n-static int ehspec_filter_eq\t\t\tPARAMS ((const PTR,\n-\t\t\t\t\t\t\t const PTR));\n-static hashval_t ehspec_filter_hash\t\tPARAMS ((const PTR));\n+static int ttypes_filter_eq\t\t\tPARAMS ((const void *,\n+\t\t\t\t\t\t\t const void *));\n+static hashval_t ttypes_filter_hash\t\tPARAMS ((const void *));\n+static int ehspec_filter_eq\t\t\tPARAMS ((const void *,\n+\t\t\t\t\t\t\t const void *));\n+static hashval_t ehspec_filter_hash\t\tPARAMS ((const void *));\n static int add_ttypes_entry\t\t\tPARAMS ((htab_t, tree));\n static int add_ehspec_entry\t\t\tPARAMS ((htab_t, htab_t,\n \t\t\t\t\t\t\t tree));\n@@ -302,14 +302,14 @@ static void sjlj_emit_dispatch_table\n      PARAMS ((rtx, struct sjlj_lp_info *));\n static void sjlj_build_landing_pads\t\tPARAMS ((void));\n \n-static hashval_t ehl_hash\t\t\tPARAMS ((const PTR));\n-static int ehl_eq\t\t\t\tPARAMS ((const PTR,\n-\t\t\t\t\t\t\t const PTR));\n+static hashval_t ehl_hash\t\t\tPARAMS ((const void *));\n+static int ehl_eq\t\t\t\tPARAMS ((const void *,\n+\t\t\t\t\t\t\t const void *));\n static void add_ehl_entry\t\t\tPARAMS ((rtx,\n \t\t\t\t\t\t\t struct eh_region *));\n static void remove_exception_handler_label\tPARAMS ((rtx));\n static void remove_eh_handler\t\t\tPARAMS ((struct eh_region *));\n-static int for_each_eh_label_1\t\t\tPARAMS ((PTR *, PTR));\n+static int for_each_eh_label_1\t\t\tPARAMS ((void **, void *));\n \n struct reachable_info;\n \n@@ -333,9 +333,9 @@ static void add_reachable_handler\n static enum reachable_code reachable_next_level\n      PARAMS ((struct eh_region *, tree, struct reachable_info *));\n \n-static int action_record_eq\t\t\tPARAMS ((const PTR,\n-\t\t\t\t\t\t\t const PTR));\n-static hashval_t action_record_hash\t\tPARAMS ((const PTR));\n+static int action_record_eq\t\t\tPARAMS ((const void *,\n+\t\t\t\t\t\t\t const void *));\n+static hashval_t action_record_hash\t\tPARAMS ((const void *));\n static int add_action_record\t\t\tPARAMS ((htab_t, int, int));\n static int collect_one_action_chain\t\tPARAMS ((htab_t,\n \t\t\t\t\t\t\t struct eh_region *));\n@@ -1418,8 +1418,8 @@ duplicate_eh_regions (ifun, map)\n \f\n static int\n t2r_eq (pentry, pdata)\n-     const PTR pentry;\n-     const PTR pdata;\n+     const void *pentry;\n+     const void *pdata;\n {\n   tree entry = (tree) pentry;\n   tree data = (tree) pdata;\n@@ -1429,7 +1429,7 @@ t2r_eq (pentry, pdata)\n \n static hashval_t\n t2r_hash (pentry)\n-     const PTR pentry;\n+     const void *pentry;\n {\n   tree entry = (tree) pentry;\n   return TYPE_HASH (TREE_PURPOSE (entry));\n@@ -1477,8 +1477,8 @@ struct ttypes_filter GTY(())\n \n static int\n ttypes_filter_eq (pentry, pdata)\n-     const PTR pentry;\n-     const PTR pdata;\n+     const void *pentry;\n+     const void *pdata;\n {\n   const struct ttypes_filter *entry = (const struct ttypes_filter *) pentry;\n   tree data = (tree) pdata;\n@@ -1488,7 +1488,7 @@ ttypes_filter_eq (pentry, pdata)\n \n static hashval_t\n ttypes_filter_hash (pentry)\n-     const PTR pentry;\n+     const void *pentry;\n {\n   const struct ttypes_filter *entry = (const struct ttypes_filter *) pentry;\n   return TYPE_HASH (entry->t);\n@@ -1501,8 +1501,8 @@ ttypes_filter_hash (pentry)\n \n static int\n ehspec_filter_eq (pentry, pdata)\n-     const PTR pentry;\n-     const PTR pdata;\n+     const void *pentry;\n+     const void *pdata;\n {\n   const struct ttypes_filter *entry = (const struct ttypes_filter *) pentry;\n   const struct ttypes_filter *data = (const struct ttypes_filter *) pdata;\n@@ -1514,7 +1514,7 @@ ehspec_filter_eq (pentry, pdata)\n \n static hashval_t\n ehspec_filter_hash (pentry)\n-     const PTR pentry;\n+     const void *pentry;\n {\n   const struct ttypes_filter *entry = (const struct ttypes_filter *) pentry;\n   hashval_t h = 0;\n@@ -2314,7 +2314,7 @@ finish_eh_generation ()\n \f\n static hashval_t\n ehl_hash (pentry)\n-     const PTR pentry;\n+     const void *pentry;\n {\n   struct ehl_map_entry *entry = (struct ehl_map_entry *) pentry;\n \n@@ -2325,8 +2325,8 @@ ehl_hash (pentry)\n \n static int\n ehl_eq (pentry, pdata)\n-     const PTR pentry;\n-     const PTR pdata;\n+     const void *pentry;\n+     const void *pdata;\n {\n   struct ehl_map_entry *entry = (struct ehl_map_entry *) pentry;\n   struct ehl_map_entry *data = (struct ehl_map_entry *) pdata;\n@@ -2499,8 +2499,8 @@ for_each_eh_label (callback)\n \n static int\n for_each_eh_label_1 (pentry, data)\n-     PTR *pentry;\n-     PTR data;\n+     void **pentry;\n+     void *data;\n {\n   struct ehl_map_entry *entry = *(struct ehl_map_entry **)pentry;\n   void (*callback) PARAMS ((rtx)) = (void (*) PARAMS ((rtx))) data;\n@@ -3166,8 +3166,8 @@ struct action_record\n \n static int\n action_record_eq (pentry, pdata)\n-     const PTR pentry;\n-     const PTR pdata;\n+     const void *pentry;\n+     const void *pdata;\n {\n   const struct action_record *entry = (const struct action_record *) pentry;\n   const struct action_record *data = (const struct action_record *) pdata;\n@@ -3176,7 +3176,7 @@ action_record_eq (pentry, pdata)\n \n static hashval_t\n action_record_hash (pentry)\n-     const PTR pentry;\n+     const void *pentry;\n {\n   const struct action_record *entry = (const struct action_record *) pentry;\n   return entry->next * 1009 + entry->filter;"}, {"sha": "db52ee36500d470aa62c51ac0f7a62d327abd03c", "filename": "gcc/expr.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -125,8 +125,8 @@ struct store_by_pieces\n   int explicit_inc_to;\n   unsigned HOST_WIDE_INT len;\n   HOST_WIDE_INT offset;\n-  rtx (*constfun) PARAMS ((PTR, HOST_WIDE_INT, enum machine_mode));\n-  PTR constfundata;\n+  rtx (*constfun) PARAMS ((void *, HOST_WIDE_INT, enum machine_mode));\n+  void *constfundata;\n   int reverse;\n };\n \n@@ -141,7 +141,7 @@ static bool emit_block_move_via_movstr PARAMS ((rtx, rtx, rtx, unsigned));\n static rtx emit_block_move_via_libcall PARAMS ((rtx, rtx, rtx));\n static tree emit_block_move_libcall_fn PARAMS ((int));\n static void emit_block_move_via_loop PARAMS ((rtx, rtx, rtx, unsigned));\n-static rtx clear_by_pieces_1\tPARAMS ((PTR, HOST_WIDE_INT,\n+static rtx clear_by_pieces_1\tPARAMS ((void *, HOST_WIDE_INT,\n \t\t\t\t\t enum machine_mode));\n static void clear_by_pieces\tPARAMS ((rtx, unsigned HOST_WIDE_INT,\n \t\t\t\t\t unsigned int));\n@@ -2718,8 +2718,8 @@ use_group_regs (call_fusage, regs)\n int\n can_store_by_pieces (len, constfun, constfundata, align)\n      unsigned HOST_WIDE_INT len;\n-     rtx (*constfun) PARAMS ((PTR, HOST_WIDE_INT, enum machine_mode));\n-     PTR constfundata;\n+     rtx (*constfun) PARAMS ((void *, HOST_WIDE_INT, enum machine_mode));\n+     void *constfundata;\n      unsigned int align;\n {\n   unsigned HOST_WIDE_INT max_size, l;\n@@ -2801,8 +2801,8 @@ rtx\n store_by_pieces (to, len, constfun, constfundata, align, endp)\n      rtx to;\n      unsigned HOST_WIDE_INT len;\n-     rtx (*constfun) PARAMS ((PTR, HOST_WIDE_INT, enum machine_mode));\n-     PTR constfundata;\n+     rtx (*constfun) PARAMS ((void *, HOST_WIDE_INT, enum machine_mode));\n+     void *constfundata;\n      unsigned int align;\n      int endp;\n {\n@@ -2871,7 +2871,7 @@ clear_by_pieces (to, len, align)\n \n static rtx\n clear_by_pieces_1 (data, offset, mode)\n-     PTR data ATTRIBUTE_UNUSED;\n+     void *data ATTRIBUTE_UNUSED;\n      HOST_WIDE_INT offset ATTRIBUTE_UNUSED;\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {"}, {"sha": "589e7f577b6ed496a4a2533fb1ebb1c491444db6", "filename": "gcc/expr.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -470,19 +470,19 @@ extern int can_move_by_pieces PARAMS ((unsigned HOST_WIDE_INT, unsigned int));\n    in every CONSTFUN call.\n    ALIGN is maximum alignment we can assume.  */\n extern int can_store_by_pieces PARAMS ((unsigned HOST_WIDE_INT,\n-\t\t\t\t\trtx (*) (PTR, HOST_WIDE_INT,\n+\t\t\t\t\trtx (*) (void *, HOST_WIDE_INT,\n \t\t\t\t\t\t enum machine_mode),\n-\t\t\t\t\tPTR, unsigned int));\n+\t\t\t\t\tvoid *, unsigned int));\n \n /* Generate several move instructions to store LEN bytes generated by\n    CONSTFUN to block TO.  (A MEM rtx with BLKmode).  CONSTFUNDATA is a\n    pointer which will be passed as argument in every CONSTFUN call.\n    ALIGN is maximum alignment we can assume.\n    Returns TO + LEN.  */\n extern rtx store_by_pieces PARAMS ((rtx, unsigned HOST_WIDE_INT,\n-\t\t\t\t    rtx (*) (PTR, HOST_WIDE_INT,\n+\t\t\t\t    rtx (*) (void *, HOST_WIDE_INT,\n \t\t\t\t\t     enum machine_mode),\n-\t\t\t\t    PTR, unsigned int, int));\n+\t\t\t\t    void *, unsigned int, int));\n \n /* Emit insns to set X from Y.  */\n extern rtx emit_move_insn PARAMS ((rtx, rtx));"}, {"sha": "5ead9fe86f42df52f67918a981806ee10b317402", "filename": "gcc/fold-const.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -1444,7 +1444,7 @@ size_int_type_wide (number, type)\n      HOST_WIDE_INT number;\n      tree type;\n {\n-  PTR *slot;\n+  void **slot;\n \n   if (size_htab == 0)\n     {\n@@ -1466,7 +1466,7 @@ size_int_type_wide (number, type)\n     {\n       tree t = new_const;\n \n-      *slot = (PTR) new_const;\n+      *slot = new_const;\n       new_const = make_node (INTEGER_CST);\n       return t;\n     }"}, {"sha": "3f795549df8b6665984161027511c9a1cfaa41da", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -3384,7 +3384,7 @@ insns_for_mem_walk (r, data)\n   if (ifmwi->pass == 0 && *r && GET_CODE (*r) == ADDRESSOF\n       && GET_CODE (XEXP (*r, 0)) == REG)\n     {\n-      PTR *e;\n+      void **e;\n       tmp.key = XEXP (*r, 0);\n       e = htab_find_slot (ifmwi->ht, &tmp, INSERT);\n       if (*e == NULL)"}, {"sha": "e35ffc614ab37a9b5b21dbe946281eab3feb2b41", "filename": "gcc/gcc.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -1759,7 +1759,7 @@ set_spec (name, spec)\n \n   /* Free the old spec.  */\n   if (old_spec && sl->alloc_p)\n-    free ((PTR) old_spec);\n+    free ((void *) old_spec);\n \n   sl->alloc_p = 1;\n }\n@@ -2058,7 +2058,7 @@ read_specs (filename, main_p)\n \n \t      set_spec (p2, *(sl->ptr_spec));\n \t      if (sl->alloc_p)\n-\t\tfree ((PTR) *(sl->ptr_spec));\n+\t\tfree ((void *) *(sl->ptr_spec));\n \n \t      *(sl->ptr_spec) = \"\";\n \t      sl->alloc_p = 0;\n@@ -2784,7 +2784,7 @@ execute ()\n \tpfatal_pexecute (errmsg_fmt, errmsg_arg);\n \n       if (string != commands[i].prog)\n-\tfree ((PTR) string);\n+\tfree ((void *) string);\n     }\n \n   execution_count++;"}, {"sha": "044a64382d2a282eaaad825896399e1073e3768c", "filename": "gcc/genoutput.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -389,7 +389,7 @@ output_insn_data (void)\n \t  break;\n \tcase INSN_OUTPUT_FORMAT_MULTI:\n \tcase INSN_OUTPUT_FORMAT_FUNCTION:\n-\t  printf (\"    (const PTR) output_%d,\\n\", d->code_number);\n+\t  printf (\"    (const void *) output_%d,\\n\", d->code_number);\n \t  break;\n \tdefault:\n \t  abort ();"}, {"sha": "32bbcf26028de3eef637c3607483217914674e7f", "filename": "gcc/gensupport.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -930,8 +930,8 @@ init_md_reader (const char *filename)\n \t\t\t\t hash_c_test, cmp_c_test, NULL);\n \n   for (i = 0; i < n_insn_conditions; i++)\n-    *(htab_find_slot (condition_table, (PTR) &insn_conditions[i], INSERT))\n-      = (PTR) &insn_conditions[i];\n+    *(htab_find_slot (condition_table, &insn_conditions[i], INSERT))\n+      = (void *) &insn_conditions[i];\n \n   obstack_init (rtl_obstack);\n   errors = 0;"}, {"sha": "1cc668004efe5d1c8f22a5305d4d3989ceecd4ce", "filename": "gcc/global.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -289,7 +289,7 @@ static int n_regs_set;\n \n static HARD_REG_SET eliminable_regset;\n \n-static int allocno_compare\tPARAMS ((const PTR, const PTR));\n+static int allocno_compare\tPARAMS ((const void *, const void *));\n static void global_conflicts\tPARAMS ((void));\n static void mirror_conflicts\tPARAMS ((void));\n static void expand_preferences\tPARAMS ((void));\n@@ -600,8 +600,8 @@ global_alloc (file)\n \n static int\n allocno_compare (v1p, v2p)\n-     const PTR v1p;\n-     const PTR v2p;\n+     const void *v1p;\n+     const void *v2p;\n {\n   int v1 = *(const int *)v1p, v2 = *(const int *)v2p;\n   /* Note that the quotient will never be bigger than"}, {"sha": "1112f534ebc70b47a5faf8e56b5b91c1a57fc50b", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -480,7 +480,7 @@ static int actual_hazard PARAMS ((int, rtx, int, int));\n static int potential_hazard PARAMS ((int, rtx, int));\n \n static int priority PARAMS ((rtx));\n-static int rank_for_schedule PARAMS ((const PTR, const PTR));\n+static int rank_for_schedule PARAMS ((const void *, const void *));\n static void swap_sort PARAMS ((rtx *, int));\n static void queue_insn PARAMS ((rtx, int));\n static int schedule_insn PARAMS ((rtx, struct ready_list *, int));\n@@ -1007,8 +1007,8 @@ while (0)\n \n static int\n rank_for_schedule (x, y)\n-     const PTR x;\n-     const PTR y;\n+     const void *x;\n+     const void *y;\n {\n   rtx tmp = *(const rtx *) y;\n   rtx tmp2 = *(const rtx *) x;"}, {"sha": "86898f388501d32c9003ec2ce9ea2bc55f3c7891", "filename": "gcc/hashtable.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fhashtable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fhashtable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhashtable.c?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -127,7 +127,7 @@ ht_lookup (table, str, len, insert)\n \t  if (insert == HT_ALLOCED)\n \t    /* The string we search for was placed at the end of the\n \t       obstack.  Release it.  */\n-\t    obstack_free (&table->stack, (PTR) str);\n+\t    obstack_free (&table->stack, (void *) str);\n \t  return node;\n \t}\n \n@@ -203,7 +203,7 @@ void\n ht_forall (table, cb, v)\n      hash_table *table;\n      ht_cb cb;\n-     const PTR v;\n+     const void *v;\n {\n   hashnode *p, *limit;\n "}, {"sha": "7ae08da5789d6b234c6091d2822062e2bcfd5d38", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -2160,7 +2160,7 @@ find_if_header (test_bb, pass)\n     /* Otherwise this must be a multiway branch of some sort.  */\n     return NULL;\n \n-  memset ((PTR) &ce_info, '\\0', sizeof (ce_info));\n+  memset (&ce_info, '\\0', sizeof (ce_info));\n   ce_info.test_bb = test_bb;\n   ce_info.then_bb = then_edge->dest;\n   ce_info.else_bb = else_edge->dest;\n@@ -2566,7 +2566,7 @@ find_cond_trap (test_bb, then_edge, else_edge)\n     {\n       struct ce_if_block new_ce_info;\n       delete_insn (jump);\n-      memset ((PTR) &new_ce_info, '\\0', sizeof (new_ce_info));\n+      memset (&new_ce_info, '\\0', sizeof (new_ce_info));\n       new_ce_info.test_bb = test_bb;\n       new_ce_info.then_bb = NULL;\n       new_ce_info.else_bb = NULL;"}, {"sha": "0ac08f9e7b46e08af8cfddef55ff7ee5bc725c70", "filename": "gcc/integrate.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -94,8 +94,8 @@ static void copy_insn_list              PARAMS ((rtx, struct inline_remap *,\n \t\t\t\t\t\t rtx));\n static void copy_insn_notes\t\tPARAMS ((rtx, struct inline_remap *,\n \t\t\t\t\t\t int));\n-static int compare_blocks               PARAMS ((const PTR, const PTR));\n-static int find_block                   PARAMS ((const PTR, const PTR));\n+static int compare_blocks               PARAMS ((const void *, const void *));\n+static int find_block                   PARAMS ((const void *, const void *));\n \n /* Used by copy_rtx_and_substitute; this indicates whether the function is\n    called for the purpose of inlining or some other purpose (i.e. loop\n@@ -613,8 +613,8 @@ process_reg_param (map, loc, copy)\n \n static int\n compare_blocks (v1, v2)\n-     const PTR v1;\n-     const PTR v2;\n+     const void *v1;\n+     const void *v2;\n {\n   tree b1 = *((const tree *) v1);\n   tree b2 = *((const tree *) v2);\n@@ -631,8 +631,8 @@ compare_blocks (v1, v2)\n \n static int\n find_block (v1, v2)\n-     const PTR v1;\n-     const PTR v2;\n+     const void *v1;\n+     const void *v2;\n {\n   const union tree_node *b1 = (const union tree_node *) v1;\n   tree b2 = *((const tree *) v2);"}, {"sha": "8e06b8db7cc2282174b594d6365ebd817fd9abc7", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -283,9 +283,9 @@ static void update_equiv_regs\tPARAMS ((void));\n static void no_equiv\t\tPARAMS ((rtx, rtx, void *));\n static void block_alloc\t\tPARAMS ((int));\n static int qty_sugg_compare    \tPARAMS ((int, int));\n-static int qty_sugg_compare_1\tPARAMS ((const PTR, const PTR));\n+static int qty_sugg_compare_1\tPARAMS ((const void *, const void *));\n static int qty_compare    \tPARAMS ((int, int));\n-static int qty_compare_1\tPARAMS ((const PTR, const PTR));\n+static int qty_compare_1\tPARAMS ((const void *, const void *));\n static int combine_regs\t\tPARAMS ((rtx, rtx, int, int, rtx, int));\n static int reg_meets_class_p\tPARAMS ((int, enum reg_class));\n static void update_qty_class\tPARAMS ((int, int));\n@@ -1701,8 +1701,8 @@ qty_compare (q1, q2)\n \n static int\n qty_compare_1 (q1p, q2p)\n-     const PTR q1p;\n-     const PTR q2p;\n+     const void *q1p;\n+     const void *q2p;\n {\n   int q1 = *(const int *) q1p, q2 = *(const int *) q2p;\n   int tem = QTY_CMP_PRI (q2) - QTY_CMP_PRI (q1);\n@@ -1741,8 +1741,8 @@ qty_sugg_compare (q1, q2)\n \n static int\n qty_sugg_compare_1 (q1p, q2p)\n-     const PTR q1p;\n-     const PTR q2p;\n+     const void *q1p;\n+     const void *q2p;\n {\n   int q1 = *(const int *) q1p, q2 = *(const int *) q2p;\n   int tem = QTY_CMP_SUGG (q1) - QTY_CMP_SUGG (q2);"}, {"sha": "ae7edab06d5a3c7ee824b8e8d27e27c6bba26525", "filename": "gcc/loop.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -314,7 +314,7 @@ static int consec_sets_giv PARAMS ((const struct loop *, int, rtx,\n static int check_dbra_loop PARAMS ((struct loop *, int));\n static rtx express_from_1 PARAMS ((rtx, rtx, rtx));\n static rtx combine_givs_p PARAMS ((struct induction *, struct induction *));\n-static int cmp_combine_givs_stats PARAMS ((const PTR, const PTR));\n+static int cmp_combine_givs_stats PARAMS ((const void *, const void *));\n static void combine_givs PARAMS ((struct loop_regs *, struct iv_class *));\n static int product_cheap_p PARAMS ((rtx, rtx));\n static int maybe_eliminate_biv PARAMS ((const struct loop *, struct iv_class *,\n@@ -7645,8 +7645,8 @@ struct combine_givs_stats\n \n static int\n cmp_combine_givs_stats (xp, yp)\n-     const PTR xp;\n-     const PTR yp;\n+     const void *xp;\n+     const void *yp;\n {\n   const struct combine_givs_stats * const x =\n     (const struct combine_givs_stats *) xp;"}, {"sha": "2296a8a748cd0a26c967d9b6dfeff07d4d8c5474", "filename": "gcc/mips-tdump.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fmips-tdump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fmips-tdump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmips-tdump.c?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -234,7 +234,7 @@ ulong\t*rfile_desc;\t\t/* relative file tables */\n PDR\t*proc_desc;\t\t/* procedure tables */\n \n /* Forward reference for functions.  */\n-static PTR read_seek\t\t\tPARAMS ((PTR, size_t, off_t, const char *));\n+static void *read_seek\t\t\tPARAMS ((void *, size_t, off_t, const char *));\n static void read_tfile\t\t\tPARAMS ((void));\n static void print_global_hdr\t\tPARAMS ((struct filehdr *));\n static void print_sym_hdr\t\tPARAMS ((HDRR *));\n@@ -271,9 +271,9 @@ static const struct option options[] =\n \f\n /* Read some bytes at a specified location, and return a pointer.  */\n \n-static PTR\n+static void *\n read_seek (ptr, size, offset, context)\n-     PTR ptr;\t\t\t/* pointer to buffer or NULL */\n+     void *ptr;\t\t\t/* pointer to buffer or NULL */\n      size_t size;\t\t/* # bytes to read */\n      off_t offset;\t\t/* offset to read at */\n      const char *context;\t/* context for error message */\n@@ -1349,12 +1349,12 @@ read_tfile ()\n   short magic;\n   off_t sym_hdr_offset = 0;\n \n-  (void) read_seek ((PTR) &magic, sizeof (magic), (off_t) 0, \"Magic number\");\n+  (void) read_seek (&magic, sizeof (magic), (off_t) 0, \"Magic number\");\n   if (!tfile)\n     {\n       /* Print out the global header, since this is not a T-file.  */\n \n-      (void) read_seek ((PTR) &global_hdr, sizeof (global_hdr), (off_t) 0,\n+      (void) read_seek (&global_hdr, sizeof (global_hdr), (off_t) 0,\n \t\t\t\"Global file header\");\n \n       print_global_hdr (&global_hdr);\n@@ -1368,7 +1368,7 @@ read_tfile ()\n       sym_hdr_offset = global_hdr.f_symptr;\n     }\n \n-  (void) read_seek ((PTR) &sym_hdr,\n+  (void) read_seek (&sym_hdr,\n \t\t    sizeof (sym_hdr),\n \t\t    sym_hdr_offset,\n \t\t    \"Symbolic header\");"}, {"sha": "920e15d1a61427e372c124fda3a5e21d437c0ea2", "filename": "gcc/mips-tfile.c", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fmips-tfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fmips-tfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmips-tfile.c?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -4060,7 +4060,7 @@ write_varray (vp, offset, str)\n   if (debug)\n     {\n       fputs (\"\\twarray\\tvp = \", stderr);\n-      fprintf (stderr, HOST_PTR_PRINTF, (PTR) vp);\n+      fprintf (stderr, HOST_PTR_PRINTF, (void *) vp);\n       fprintf (stderr, \", offset = %7lu, size = %7lu, %s\\n\",\n \t       (unsigned long) offset, vp->num_allocated * vp->object_size, str);\n     }\n@@ -4075,7 +4075,7 @@ write_varray (vp, offset, str)\n \t? vp->objects_last_page * vp->object_size\n \t: vp->objects_per_page  * vp->object_size;\n \n-      sys_write = fwrite ((PTR) ptr->datum, 1, num_write, object_stream);\n+      sys_write = fwrite (ptr->datum, 1, num_write, object_stream);\n       if (sys_write <= 0)\n \tpfatal_with_name (object_name);\n \n@@ -4102,12 +4102,12 @@ write_object ()\n   if (debug)\n     {\n       fputs (\"\\n\\twrite\\tvp = \", stderr);\n-      fprintf (stderr, HOST_PTR_PRINTF, (PTR) &symbolic_header);\n+      fprintf (stderr, HOST_PTR_PRINTF, (void *) &symbolic_header);\n       fprintf (stderr, \", offset = %7u, size = %7lu, %s\\n\",\n \t       0, (unsigned long) sizeof (symbolic_header), \"symbolic header\");\n     }\n \n-  sys_write = fwrite ((PTR) &symbolic_header,\n+  sys_write = fwrite (&symbolic_header,\n \t\t      1,\n \t\t      sizeof (symbolic_header),\n \t\t      object_stream);\n@@ -4135,13 +4135,13 @@ write_object ()\n       if (debug)\n \t{\n \t  fputs (\"\\twrite\\tvp = \", stderr);\n-\t  fprintf (stderr, HOST_PTR_PRINTF, (PTR) &orig_linenum);\n+\t  fprintf (stderr, HOST_PTR_PRINTF, (void *) &orig_linenum);\n \t  fprintf (stderr, \", offset = %7lu, size = %7lu, %s\\n\",\n \t\t   (long) symbolic_header.cbLineOffset,\n \t\t   (long) symbolic_header.cbLine, \"Line numbers\");\n \t}\n \n-      sys_write = fwrite ((PTR) orig_linenum,\n+      sys_write = fwrite (orig_linenum,\n \t\t\t  1,\n \t\t\t  symbolic_header.cbLine,\n \t\t\t  object_stream);\n@@ -4170,13 +4170,13 @@ write_object ()\n       if (debug)\n \t{\n \t  fputs (\"\\twrite\\tvp = \", stderr);\n-\t  fprintf (stderr, HOST_PTR_PRINTF, (PTR) &orig_opt_syms);\n+\t  fprintf (stderr, HOST_PTR_PRINTF, (void *) &orig_opt_syms);\n \t  fprintf (stderr, \", offset = %7lu, size = %7lu, %s\\n\",\n \t\t   (long) symbolic_header.cbOptOffset,\n \t\t   num_write, \"Optimizer symbols\");\n \t}\n \n-      sys_write = fwrite ((PTR) orig_opt_syms,\n+      sys_write = fwrite (orig_opt_syms,\n \t\t\t  1,\n \t\t\t  num_write,\n \t\t\t  object_stream);\n@@ -4262,7 +4262,7 @@ write_object ()\n \t  if (debug)\n \t    {\n \t      fputs (\"\\twrite\\tvp = \", stderr);\n-\t      fprintf (stderr, HOST_PTR_PRINTF, (PTR) &file_ptr->fdr);\n+\t      fprintf (stderr, HOST_PTR_PRINTF, (void *) &file_ptr->fdr);\n \t      fprintf (stderr, \", offset = %7lu, size = %7lu, %s\\n\",\n \t\t       file_offset, (unsigned long) sizeof (FDR),\n \t\t       \"File header\");\n@@ -4298,7 +4298,7 @@ write_object ()\n       if (debug)\n \t{\n \t  fputs (\"\\twrite\\tvp = \", stderr);\n-\t  fprintf (stderr, HOST_PTR_PRINTF, (PTR) &orig_rfds);\n+\t  fprintf (stderr, HOST_PTR_PRINTF, (void *) &orig_rfds);\n \t  fprintf (stderr, \", offset = %7lu, size = %7lu, %s\\n\",\n \t\t   (long) symbolic_header.cbRfdOffset,\n \t\t   num_write, \"Relative file descriptors\");\n@@ -4378,7 +4378,7 @@ read_seek (size, offset, str)\n \tpfatal_with_name (obj_in_name);\n     }\n \n-  sys_read = fread ((PTR) ptr, 1, size, obj_in_stream);\n+  sys_read = fread (ptr, 1, size, obj_in_stream);\n   if (sys_read <= 0)\n     pfatal_with_name (obj_in_name);\n \n@@ -4421,7 +4421,7 @@ copy_object ()\n       || fseek (obj_in_stream, 0L, SEEK_SET) != 0)\n     pfatal_with_name (obj_in_name);\n \n-  sys_read = fread ((PTR) &orig_file_header,\n+  sys_read = fread (&orig_file_header,\n \t\t    1,\n \t\t    sizeof (struct filehdr),\n \t\t    obj_in_stream);\n@@ -4448,7 +4448,7 @@ copy_object ()\n   if (fseek (obj_in_stream, (long) orig_file_header.f_symptr, SEEK_SET) != 0)\n     pfatal_with_name (input_name);\n \n-  sys_read = fread ((PTR) &orig_sym_hdr,\n+  sys_read = fread (&orig_sym_hdr,\n \t\t    1,\n \t\t    sizeof (orig_sym_hdr),\n \t\t    obj_in_stream);\n@@ -4746,7 +4746,7 @@ copy_object ()\n       num_write\n \t= (remaining <= (int) sizeof (buffer))\n \t  ? remaining : (int) sizeof (buffer);\n-      sys_read = fread ((PTR) buffer, 1, num_write, obj_in_stream);\n+      sys_read = fread (buffer, 1, num_write, obj_in_stream);\n       if (sys_read <= 0)\n \tpfatal_with_name (obj_in_name);\n \n@@ -5104,7 +5104,7 @@ allocate_cluster (npages)\n     {\n       fprintf (stderr, \"\\talloc\\tnpages = %lu, value = \",\n \t       (unsigned long) npages);\n-      fprintf (stderr, HOST_PTR_PRINTF, (PTR) ptr);\n+      fprintf (stderr, HOST_PTR_PRINTF, (void *) ptr);\n       fputs (\"\\n\", stderr);\n     }\n \n@@ -5175,7 +5175,7 @@ free_multiple_pages (page_ptr, npages)\n      the free pages is done right after an allocate.  */\n \n #else\t/* MALLOC_CHECK */\n-  free ((char *) page_ptr);\n+  free (page_ptr);\n \n #endif\t/* MALLOC_CHECK */\n }\n@@ -5255,7 +5255,7 @@ free_scope (ptr)\n   alloc_counts[ (int) alloc_type_scope ].free_list.f_scope = ptr;\n \n #else\n-  free ((PTR) ptr);\n+  free (ptr);\n #endif\n \n }\n@@ -5412,7 +5412,7 @@ free_tag (ptr)\n   alloc_counts[ (int) alloc_type_tag ].free_list.f_tag = ptr;\n \n #else\n-  free ((PTR) ptr);\n+  free (ptr);\n #endif\n \n }\n@@ -5470,7 +5470,7 @@ free_forward (ptr)\n   alloc_counts[ (int) alloc_type_forward ].free_list.f_forward = ptr;\n \n #else\n-  free ((PTR) ptr);\n+  free (ptr);\n #endif\n \n }\n@@ -5528,7 +5528,7 @@ free_thead (ptr)\n   alloc_counts[ (int) alloc_type_thead ].free_list.f_thead = ptr;\n \n #else\n-  free ((PTR) ptr);\n+  free (ptr);\n #endif\n \n }"}, {"sha": "8b1b2e9161e754cbce6f33d7def83449efb70008", "filename": "gcc/mkdeps.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fmkdeps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fmkdeps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmkdeps.c?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -137,14 +137,14 @@ deps_free (d)\n   if (d->targetv)\n     {\n       for (i = 0; i < d->ntargets; i++)\n-\tfree ((PTR) d->targetv[i]);\n+\tfree ((void *) d->targetv[i]);\n       free (d->targetv);\n     }\n \n   if (d->depv)\n     {\n       for (i = 0; i < d->ndeps; i++)\n-\tfree ((PTR) d->depv[i]);\n+\tfree ((void *) d->depv[i]);\n       free (d->depv);\n     }\n "}, {"sha": "bcd0a7f7f3ae3328846971f8fb44f713ef72afe6", "filename": "gcc/protoize.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -84,8 +84,8 @@ static void notice PARAMS ((const char *, ...)) ATTRIBUTE_PRINTF_1;\n static char *savestring PARAMS ((const char *, unsigned int));\n static char *dupnstr PARAMS ((const char *, size_t));\n static const char *substr PARAMS ((const char *, const char * const));\n-static int safe_read PARAMS ((int, PTR, int));\n-static void safe_write PARAMS ((int, PTR, int, const char *));\n+static int safe_read PARAMS ((int, void *, int));\n+static void safe_write PARAMS ((int, void *, int, const char *));\n static void save_pointers PARAMS ((void));\n static void restore_pointers PARAMS ((void));\n static int is_id_char PARAMS ((int));\n@@ -590,7 +590,7 @@ substr (s1, s2)\n static int\n safe_read (desc, ptr, len)\n      int desc;\n-     PTR ptr;\n+     void *ptr;\n      int len;\n {\n   int left = len;\n@@ -619,7 +619,7 @@ safe_read (desc, ptr, len)\n static void\n safe_write (desc, ptr, len, out_fname)\n      int desc;\n-     PTR ptr;\n+     void *ptr;\n      int len;\n      const char *out_fname;\n {\n@@ -1020,7 +1020,7 @@ static void\n free_def_dec (p)\n      def_dec_info *p;\n {\n-  free ((NONCONST PTR) p->ansi_decl);\n+  free ((NONCONST void *) p->ansi_decl);\n \n #ifndef UNPROTOIZE\n   {\n@@ -1030,7 +1030,7 @@ free_def_dec (p)\n     for (curr = p->f_list_chain; curr; curr = next)\n       {\n \tnext = curr->chain_next;\n-\tfree ((NONCONST PTR) curr);\n+\tfree ((NONCONST void *) curr);\n       }\n   }\n #endif /* !defined (UNPROTOIZE) */"}, {"sha": "fd17bd04072c97e57e16c676baea3d08394c0a64", "filename": "gcc/read-rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fread-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fread-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-rtl.c?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -653,7 +653,7 @@ read_rtx (infile)\n \t    {\n \t      ungetc (c, infile);\n \t      list_counter++;\n-\t      obstack_ptr_grow (&vector_stack, (PTR) read_rtx (infile));\n+\t      obstack_ptr_grow (&vector_stack, read_rtx (infile));\n \t    }\n \t  if (list_counter > 0)\n \t    {"}, {"sha": "38aa5160a11f3083e91bdb48dc2cbb510be928e4", "filename": "gcc/recog.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Frecog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Frecog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.h?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -241,7 +241,7 @@ struct insn_operand_data\n struct insn_data\n {\n   const char *const name;\n-  const PTR output;\n+  const void *output;\n   const insn_gen_fn genfun;\n   const struct insn_operand_data *const operand;\n "}, {"sha": "9e51c6020e8e133dded04b2f54cd40b1e54b62b7", "filename": "gcc/reload1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -402,7 +402,7 @@ static void count_pseudo\t\tPARAMS ((int));\n static void order_regs_for_reload\tPARAMS ((struct insn_chain *));\n static void reload_as_needed\t\tPARAMS ((int));\n static void forget_old_reloads_1\tPARAMS ((rtx, rtx, void *));\n-static int reload_reg_class_lower\tPARAMS ((const PTR, const PTR));\n+static int reload_reg_class_lower\tPARAMS ((const void *, const void *));\n static void mark_reload_reg_in_use\tPARAMS ((unsigned int, int,\n \t\t\t\t\t\t enum reload_type,\n \t\t\t\t\t\t enum machine_mode));\n@@ -1548,8 +1548,8 @@ calculate_needs_all_insns (global)\n \n static int\n reload_reg_class_lower (r1p, r2p)\n-     const PTR r1p;\n-     const PTR r2p;\n+     const void *r1p;\n+     const void *r2p;\n {\n   int r1 = *(const short *) r1p, r2 = *(const short *) r2p;\n   int t;"}, {"sha": "2c4ac155a92df27592c5c230f801ac587d5fe5b1", "filename": "gcc/sbitmap.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fsbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fsbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsbitmap.c?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -68,14 +68,14 @@ sbitmap_resize (bmap, n_elms, def)\n     {\n       amt = (sizeof (struct simple_bitmap_def)\n \t    + bytes - sizeof (SBITMAP_ELT_TYPE));\n-      bmap = (sbitmap) xrealloc ((PTR) bmap, amt);\n+      bmap = (sbitmap) xrealloc (bmap, amt);\n     }\n \n   if (n_elms > bmap->n_bits)\n     {\n       if (def)\n \t{\n-\t  memset ((PTR) (bmap->elms + bmap->size), -1, bytes - bmap->bytes);\n+\t  memset (bmap->elms + bmap->size, -1, bytes - bmap->bytes);\n \n \t  /* Set the new bits if the original last element.  */\n \t  last_bit = bmap->n_bits % SBITMAP_ELT_BITS;\n@@ -90,7 +90,7 @@ sbitmap_resize (bmap, n_elms, def)\n \t      &= (SBITMAP_ELT_TYPE)-1 >> (SBITMAP_ELT_BITS - last_bit);\n \t}\n       else\n-\tmemset ((PTR) (bmap->elms + bmap->size), 0, bytes - bmap->bytes);\n+\tmemset (bmap->elms + bmap->size, 0, bytes - bmap->bytes);\n     }\n   else if (n_elms < bmap->n_bits)\n     {\n@@ -173,7 +173,7 @@ void\n sbitmap_zero (bmap)\n      sbitmap bmap;\n {\n-  memset ((PTR) bmap->elms, 0, bmap->bytes);\n+  memset (bmap->elms, 0, bmap->bytes);\n }\n \n /* Set all elements in a bitmap to ones.  */\n@@ -184,7 +184,7 @@ sbitmap_ones (bmap)\n {\n   unsigned int last_bit;\n \n-  memset ((PTR) bmap->elms, -1, bmap->bytes);\n+  memset (bmap->elms, -1, bmap->bytes);\n \n   last_bit = bmap->n_bits % SBITMAP_ELT_BITS;\n   if (last_bit)"}, {"sha": "1c480dc102499c65ec64faceceeca7ee6a3a6c9c", "filename": "gcc/ssa-dce.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fssa-dce.c?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -211,7 +211,7 @@ control_dependent_block_to_edge_map_free (c)\n   int i;\n   for (i = 0; i < c->length; ++i)\n     BITMAP_XFREE (c->data[i]);\n-  free ((PTR) c);\n+  free (c);\n }\n \n /* Record all blocks' control dependences on all edges in the edge\n@@ -566,7 +566,7 @@ ssa_eliminate_dead_code ()\n \t  /* Propagate through the operands.  */\n \t  for_each_rtx (&current_instruction,\n \t\t\t&propagate_necessity_through_operand,\n-\t\t\t(PTR) &unprocessed_instructions);\n+\t\t\t&unprocessed_instructions);\n \n \t  /* PHI nodes are somewhat special in that each PHI alternative\n \t     has data and control dependencies.  The data dependencies\n@@ -738,6 +738,6 @@ ssa_eliminate_dead_code ()\n   if (VARRAY_ACTIVE_SIZE (unprocessed_instructions) != 0)\n     abort ();\n   control_dependent_block_to_edge_map_free (cdbte);\n-  free ((PTR) pdom);\n+  free (pdom);\n   free_edge_list (el);\n }"}, {"sha": "7a5d51ac03fd4c1d7265cd8ff9a92a03adf1acf1", "filename": "gcc/stringpool.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fstringpool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fstringpool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstringpool.c?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -50,7 +50,7 @@ struct ht *ident_hash;\n static struct obstack string_stack;\n \n static hashnode alloc_node PARAMS ((hash_table *));\n-static int mark_ident PARAMS ((struct cpp_reader *, hashnode, const PTR));\n+static int mark_ident PARAMS ((struct cpp_reader *, hashnode, const void *));\n static int ht_copy_and_clear PARAMS ((struct cpp_reader *, hashnode, const void *));\n \n /* Initialize the string pool.  */\n@@ -158,7 +158,7 @@ static int\n mark_ident (pfile, h, v)\n      struct cpp_reader *pfile ATTRIBUTE_UNUSED;\n      hashnode h;\n-     const PTR v ATTRIBUTE_UNUSED;\n+     const void *v ATTRIBUTE_UNUSED;\n {\n   gt_ggc_m_9tree_node (HT_IDENT_TO_GCC_IDENT (h));\n   return 1;"}, {"sha": "98acd086e23179f9fbd395ef7d07a40725554445", "filename": "gcc/tlink.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Ftlink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Ftlink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftlink.c?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -120,7 +120,7 @@ symbol_hash_lookup (string, create)\n      const char *string;\n      int create;\n {\n-  PTR *e;\n+  void **e;\n   e = htab_find_slot_with_hash (symbol_table, string,\n \t\t\t\t(*htab_hash_string) (string),\n \t\t\t\tcreate ? INSERT : NO_INSERT);\n@@ -143,7 +143,7 @@ static struct file_hash_entry *\n file_hash_lookup (string)\n      const char *string;\n {\n-  PTR *e;\n+  void **e;\n   e = htab_find_slot_with_hash (file_table, string,\n \t\t\t\t(*htab_hash_string) (string),\n \t\t\t\tINSERT);\n@@ -165,7 +165,7 @@ demangled_hash_lookup (string, create)\n      const char *string;\n      int create;\n {\n-  PTR *e;\n+  void **e;\n   e = htab_find_slot_with_hash (demangled_table, string,\n \t\t\t\t(*htab_hash_string) (string),\n \t\t\t\tcreate ? INSERT : NO_INSERT);"}, {"sha": "9b434d8c0fb0f6bb2396498c771247499c0069a3", "filename": "gcc/tree.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -47,7 +47,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"langhooks.h\"\n \n /* obstack.[ch] explicitly declined to prototype this.  */\n-extern int _obstack_allocated_p PARAMS ((struct obstack *h, PTR obj));\n+extern int _obstack_allocated_p PARAMS ((struct obstack *h, void *obj));\n \n #ifdef GATHER_STATISTICS\n /* Statistics-gathering stuff.  */\n@@ -293,7 +293,7 @@ make_node (code)\n \n   t = ggc_alloc_tree (length);\n \n-  memset ((PTR) t, 0, length);\n+  memset (t, 0, length);\n \n   TREE_SET_CODE (t, code);\n \n@@ -609,7 +609,7 @@ make_tree_vec (len)\n \n   t = ggc_alloc_tree (length);\n \n-  memset ((PTR) t, 0, length);\n+  memset (t, 0, length);\n   TREE_SET_CODE (t, TREE_VEC);\n   TREE_VEC_LENGTH (t) = len;\n \n@@ -2514,7 +2514,7 @@ build1 (code, type, node)\n \n   t = ggc_alloc_tree (length);\n \n-  memset ((PTR) t, 0, sizeof (struct tree_common));\n+  memset (t, 0, sizeof (struct tree_common));\n \n   TREE_SET_CODE (t, code);\n "}, {"sha": "6879559d4bfbbe1d184a450384d153875e8c4be7", "filename": "gcc/varasm.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -166,8 +166,8 @@ static void output_constructor\t\tPARAMS ((tree, unsigned HOST_WIDE_INT,\n \t\t\t\t\t\t unsigned int));\n static void globalize_decl\t\tPARAMS ((tree));\n static void maybe_assemble_visibility\tPARAMS ((tree));\n-static int in_named_entry_eq\t\tPARAMS ((const PTR, const PTR));\n-static hashval_t in_named_entry_hash\tPARAMS ((const PTR));\n+static int in_named_entry_eq\t\tPARAMS ((const void *, const void *));\n+static hashval_t in_named_entry_hash\tPARAMS ((const void *));\n #ifdef ASM_OUTPUT_BSS\n static void asm_output_bss\t\tPARAMS ((FILE *, tree, const char *,\n \t\t\t\t\t\tunsigned HOST_WIDE_INT,\n@@ -310,8 +310,8 @@ in_data_section ()\n \n static int\n in_named_entry_eq (p1, p2)\n-     const PTR p1;\n-     const PTR p2;\n+     const void *p1;\n+     const void *p2;\n {\n   const struct in_named_entry *old = p1;\n   const char *new = p2;\n@@ -321,7 +321,7 @@ in_named_entry_eq (p1, p2)\n \n static hashval_t\n in_named_entry_hash (p)\n-     const PTR p;\n+     const void *p;\n {\n   const struct in_named_entry *old = p;\n   return htab_hash_string (old->name);"}, {"sha": "8e8d02903633cbd3cba26768074c643c9555cdd3", "filename": "gcc/varray.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fvarray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad205ffba97267072c69704481aac372dd62f16/gcc%2Fvarray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarray.c?ref=fad205ffba97267072c69704481aac372dd62f16", "patch": "@@ -46,7 +46,7 @@ static const struct {\n   { sizeof (unsigned long), 1 },\n   { sizeof (HOST_WIDE_INT), 1 },\n   { sizeof (unsigned HOST_WIDE_INT), 1 },\n-  { sizeof (PTR), 1 },\n+  { sizeof (void *), 1 },\n   { sizeof (char *), 1 },\n   { sizeof (struct rtx_def *), 1 },\n   { sizeof (struct rtvec_def *), 1 },"}]}