{"sha": "d228aace97d084e2b23f6c023755cc38fa74ed1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDIyOGFhY2U5N2QwODRlMmIyM2Y2YzAyMzc1NWNjMzhmYTc0ZWQxZQ==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2007-10-26T22:03:57Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2007-10-26T22:03:57Z"}, "message": "invoke.texi (Option Summary, [...]): Remove -fbounds-check.\n\n\t* doc/invoke.texi (Option Summary, optimizations): Remove\n\t-fbounds-check.  Add -fassociative-math, -freciprocal-math,\n\t-ftree-vrp and -funit-at-a-time.  Change -fno-split-wide-types to\n\t-fsplit-wide-types to match later entry.  Break up a long line.\n\t(Option Summary, code gen options)  Add -fno-stack-limit.  Add\n\tmissing @gol to the end of a line.\n\t(Optimization Options): Remove -fbounds-check, which is also\n\tdocumented under Code Generation Options.  Remove =n from\n\tindex entry for -ftree-parallelize-loops.  Change -fno-cprop-registers\n\tto -fcprop-registers to match other options, and say when it is\n\tenabled rather than disabled.  Remove extra index entry for\n\t-fno-cx-limited-range.  Add index entries for -fstack-protector\n\tand -fstack-protector-all.\n\t(Code Gen Options): Add index entry for -ftls-model.\n\nFrom-SVN: r129664", "tree": {"sha": "ad08f79c8c73bdad9fcdcf75eb8ec3848d15a34d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad08f79c8c73bdad9fcdcf75eb8ec3848d15a34d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d228aace97d084e2b23f6c023755cc38fa74ed1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d228aace97d084e2b23f6c023755cc38fa74ed1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d228aace97d084e2b23f6c023755cc38fa74ed1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d228aace97d084e2b23f6c023755cc38fa74ed1e/comments", "author": null, "committer": null, "parents": [{"sha": "efb6658632189febb40ffa1bae7739b2a14832f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efb6658632189febb40ffa1bae7739b2a14832f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efb6658632189febb40ffa1bae7739b2a14832f6"}], "stats": {"total": 52, "additions": 33, "deletions": 19}, "files": [{"sha": "79066251790f8f3d9ce1e29435d5a2cf56ca643f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d228aace97d084e2b23f6c023755cc38fa74ed1e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d228aace97d084e2b23f6c023755cc38fa74ed1e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d228aace97d084e2b23f6c023755cc38fa74ed1e", "patch": "@@ -1,3 +1,20 @@\n+2007-10-26  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* doc/invoke.texi (Option Summary, optimizations): Remove\n+\t-fbounds-check.  Add -fassociative-math, -freciprocal-math,\n+\t-ftree-vrp and -funit-at-a-time.  Change -fno-split-wide-types to\n+\t-fsplit-wide-types to match later entry.  Break up a long line.\n+\t(Option Summary, code gen options)  Add -fno-stack-limit.  Add\n+\tmissing @gol to the end of a line.\n+\t(Optimization Options): Remove -fbounds-check, which is also\n+\tdocumented under Code Generation Options.  Remove =n from\n+\tindex entry for -ftree-parallelize-loops.  Change -fno-cprop-registers\n+\tto -fcprop-registers to match other options, and say when it is\n+\tenabled rather than disabled.  Remove extra index entry for\n+\t-fno-cx-limited-range.  Add index entries for -fstack-protector\n+\tand -fstack-protector-all.\n+\t(Code Gen Options): Add index entry for -ftls-model.\n+\n 2007-10-26  Anatoly Sokolov <aesok@post.ru>\n \n \t* config/avr/avr.c (avr_OS_task_function_p): Add new function."}, {"sha": "55cd96ea5254d3c036d71bbf36b8d7ccd48655fd", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d228aace97d084e2b23f6c023755cc38fa74ed1e/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d228aace97d084e2b23f6c023755cc38fa74ed1e/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=d228aace97d084e2b23f6c023755cc38fa74ed1e", "patch": "@@ -317,8 +317,10 @@ Objective-C and Objective-C++ Dialects}.\n @xref{Optimize Options,,Options that Control Optimization}.\n @gccoptlist{-falign-functions[=@var{n}]  -falign-jumps[=@var{n}] @gol\n -falign-labels[=@var{n}]  -falign-loops[=@var{n}]  @gol\n--fbounds-check -fmudflap -fmudflapth -fmudflapir @gol\n--fbranch-probabilities -fprofile-values -fvpt -fbranch-target-load-optimize @gol\n+-fassociative-math  -freciprocal-math @gol\n+-fmudflap -fmudflapth -fmudflapir @gol\n+-fbranch-probabilities -fprofile-values -fvpt  @gol\n+-fbranch-target-load-optimize @gol\n -fbranch-target-load-optimize2 -fbtr-bb-exclusive @gol\n -fcaller-saves  -fcprop-registers  -fcse-follow-jumps @gol\n -fcse-skip-blocks  -fcx-limited-range  -fdata-sections @gol\n@@ -351,7 +353,7 @@ Objective-C and Objective-C++ Dialects}.\n -fsched2-use-superblocks @gol\n -fsched2-use-traces -fsee -freschedule-modulo-scheduled-loops @gol\n -fsection-anchors  -fsignaling-nans  -fsingle-precision-constant @gol\n--fno-split-wide-types -fstack-protector  -fstack-protector-all @gol\n+-fsplit-wide-types -fstack-protector  -fstack-protector-all @gol\n -fstrict-aliasing  -fstrict-overflow  -ftracer  -fthread-jumps @gol\n -funroll-all-loops  -funroll-loops  -fpeel-loops @gol\n -fsplit-ivs-in-unroller -funswitch-loops @gol\n@@ -362,7 +364,8 @@ Objective-C and Objective-C++ Dialects}.\n -ftree-dominator-opts -ftree-dse -ftree-copyrename -ftree-sink @gol\n -ftree-ch -ftree-sra -ftree-ter -ftree-fre -ftree-vectorize @gol\n -ftree-vect-loop-version -fvect-cost-model -ftree-salias -fipa-pta -fweb @gol\n--ftree-copy-prop -ftree-store-ccp -ftree-store-copy-prop -fwhole-program @gol\n+-ftree-copy-prop -ftree-store-ccp -ftree-store-copy-prop -ftree-vrp @gol\n+-funit-at-a-time -fwhole-program @gol\n --param @var{name}=@var{value}\n -O  -O0  -O1  -O2  -O3  -Os}\n \n@@ -830,8 +833,8 @@ See S/390 and zSeries Options.\n -fshort-double  -fshort-wchar @gol\n -fverbose-asm  -fpack-struct[=@var{n}]  -fstack-check @gol\n -fstack-limit-register=@var{reg}  -fstack-limit-symbol=@var{sym} @gol\n--fargument-alias  -fargument-noalias @gol\n--fargument-noalias-global  -fargument-noalias-anything\n+-fno-stack-limit  -fargument-alias  -fargument-noalias @gol\n+-fargument-noalias-global  -fargument-noalias-anything @gol\n -fleading-underscore  -ftls-model=@var{model} @gol\n -ftrapv  -fwrapv  -fbounds-check @gol\n -fvisibility}\n@@ -5346,13 +5349,6 @@ assumptions based on that.\n \n The default is @option{-fzero-initialized-in-bss}.\n \n-@item -fbounds-check\n-@opindex fbounds-check\n-For front-ends that support it, generate additional code to check that\n-indices used to access arrays are within the declared range.  This is\n-currently only supported by the Java and Fortran front-ends, where\n-this option defaults to true and false respectively.\n-\n @item -fmudflap -fmudflapth -fmudflapir\n @opindex fmudflap\n @opindex fmudflapth\n@@ -5779,7 +5775,7 @@ Perform induction variable optimizations (strength reduction, induction\n variable merging and induction variable elimination) on trees.\n \n @item -ftree-parallelize-loops=n\n-@opindex ftree-parallelize-loops=n\n+@opindex ftree-parallelize-loops\n Parallelize loops, i.e., split their iteration space to run in n threads.\n This is only possible for loops whose iterations are independent\n and can be arbitrarily reordered.  The optimization is only\n@@ -6156,13 +6152,13 @@ compilation unit, not for the single source file itself.\n \n This option is not supported for Fortran programs.\n \n-@item -fno-cprop-registers\n-@opindex fno-cprop-registers\n+@item -fcprop-registers\n+@opindex fcprop-registers\n After register allocation and post-register allocation instruction splitting,\n we perform a copy-propagation pass to try to reduce scheduling dependencies\n and occasionally eliminate the copy.\n \n-Disabled at levels @option{-O}, @option{-O2}, @option{-O3}, @option{-Os}.\n+Enabled at levels @option{-O}, @option{-O2}, @option{-O3}, @option{-Os}.\n \n @item -fprofile-generate\n @opindex fprofile-generate\n@@ -6373,9 +6369,7 @@ Treat floating point constant as single precision constant instead of\n implicitly converting it to double precision constant.\n \n @item -fcx-limited-range\n-@itemx -fno-cx-limited-range\n @opindex fcx-limited-range\n-@opindex fno-cx-limited-range\n When enabled, this option states that a range reduction step is not\n needed when performing complex division.  The default is\n @option{-fno-cx-limited-range}, but is enabled by @option{-ffast-math}.\n@@ -6528,6 +6522,7 @@ When performing branch target register load optimization, don't reuse\n branch target registers in within any basic block.\n \n @item -fstack-protector\n+@opindex fstack-protector\n Emit extra code to check for buffer overflows, such as stack smashing\n attacks.  This is done by adding a guard variable to functions with\n vulnerable objects.  This includes functions that call alloca, and\n@@ -6536,6 +6531,7 @@ when a function is entered and then checked when the function exits.\n If a guard check fails, an error message is printed and the program exits.\n \n @item -fstack-protector-all\n+@opindex fstack-protector-all\n Like @option{-fstack-protector} except that all functions are protected.\n \n @item -fsection-anchors\n@@ -15082,6 +15078,7 @@ switch.  Use it to conform to a non-default application binary interface.\n Not all targets provide complete support for this switch.\n \n @item -ftls-model=@var{model}\n+@opindex ftls-model\n Alter the thread-local storage model to be used (@pxref{Thread-Local}).\n The @var{model} argument should be one of @code{global-dynamic},\n @code{local-dynamic}, @code{initial-exec} or @code{local-exec}."}]}