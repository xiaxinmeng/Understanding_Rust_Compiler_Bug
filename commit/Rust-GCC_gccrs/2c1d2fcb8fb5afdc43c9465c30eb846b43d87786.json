{"sha": "2c1d2fcb8fb5afdc43c9465c30eb846b43d87786", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmMxZDJmY2I4ZmI1YWZkYzQzYzk0NjVjMzBlYjg0NmI0M2Q4Nzc4Ng==", "commit": {"author": {"name": "Dhananjay R. Deshpande", "email": "dhananjayd@kpit.com", "date": "2002-06-20T02:43:13Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-06-20T02:43:13Z"}, "message": "h8300.c (TARGET_INSERT_ATTRIBUTES): Define.\n\n\t* config/h8300/h8300.c (TARGET_INSERT_ATTRIBUTES): Define.\n\t(h8300_insert_attributes): New.\n\nFrom-SVN: r54814", "tree": {"sha": "751dd07be846e3d928e3b34729d9d45d69d06858", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/751dd07be846e3d928e3b34729d9d45d69d06858"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c1d2fcb8fb5afdc43c9465c30eb846b43d87786", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c1d2fcb8fb5afdc43c9465c30eb846b43d87786", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c1d2fcb8fb5afdc43c9465c30eb846b43d87786", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c1d2fcb8fb5afdc43c9465c30eb846b43d87786/comments", "author": null, "committer": null, "parents": [{"sha": "84d901be21286abad53306a8e883571ca9258676", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84d901be21286abad53306a8e883571ca9258676", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84d901be21286abad53306a8e883571ca9258676"}], "stats": {"total": 25, "additions": 25, "deletions": 0}, "files": [{"sha": "24c7826e32ff6fe5538869bec0f52916d0ee82a0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c1d2fcb8fb5afdc43c9465c30eb846b43d87786/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c1d2fcb8fb5afdc43c9465c30eb846b43d87786/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2c1d2fcb8fb5afdc43c9465c30eb846b43d87786", "patch": "@@ -1,3 +1,8 @@\n+2002-06-19  Dhananjay R. Deshpande  <dhananjayd@kpit.com>\n+\n+\t* config/h8300/h8300.c (TARGET_INSERT_ATTRIBUTES): Define.\n+\t(h8300_insert_attributes): New.\n+\n 2002-06-19  Akim Demaille  <akim@epita.fr>\n \n \t* c-parse.in (initelt: identifier ':' initval): Add an empty"}, {"sha": "5406c19ab9492287d5bf26d49b07b57b92899a6f", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c1d2fcb8fb5afdc43c9465c30eb846b43d87786/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c1d2fcb8fb5afdc43c9465c30eb846b43d87786/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=2c1d2fcb8fb5afdc43c9465c30eb846b43d87786", "patch": "@@ -61,6 +61,7 @@ static tree h8300_handle_eightbit_data_attribute PARAMS ((tree *, tree, tree, in\n static tree h8300_handle_tiny_data_attribute PARAMS ((tree *, tree, tree, int, bool *));\n static void h8300_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n static void h8300_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n+static void h8300_insert_attributes PARAMS ((tree, tree *));\n #ifndef OBJECT_FORMAT_ELF\n static void h8300_asm_named_section PARAMS ((const char *, unsigned int));\n #endif\n@@ -119,6 +120,9 @@ const char *h8_push_op, *h8_pop_op, *h8_mov_op;\n #undef TARGET_STRIP_NAME_ENCODING\n #define TARGET_STRIP_NAME_ENCODING h8300_strip_name_encoding\n \n+#undef TARGET_INSERT_ATTRIBUTES\n+#define TARGET_INSERT_ATTRIBUTES h8300_insert_attributes\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Initialize various cpu specific globals at start up.  */\n@@ -3409,6 +3413,22 @@ h8300_tiny_data_p (decl)\n   return a != NULL_TREE;\n }\n \n+/* Generate an 'interrupt_handler' attribute for decls.  */\n+\n+static void\n+h8300_insert_attributes (node, attributes)\n+     tree node;\n+     tree *attributes;\n+{\n+  if (!interrupt_handler\n+      || TREE_CODE (node) != FUNCTION_DECL)\n+    return;\n+\n+  /* Add an 'interrupt_handler' attribute.  */\n+  *attributes = tree_cons (get_identifier (\"interrupt_handler\"),\n+\t\t\t   NULL, *attributes);\n+}\n+\n /* Supported attributes:\n \n    interrupt_handler: output a prologue and epilogue suitable for an"}]}