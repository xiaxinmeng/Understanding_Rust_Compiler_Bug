{"sha": "944442bbd0340df394b284281ab99c0c293b7878", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ0NDQyYmJkMDM0MGRmMzk0YjI4NDI4MWFiOTljMGMyOTNiNzg3OA==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-06-16T18:02:58Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-06-16T18:02:58Z"}, "message": "arm-protos.h (arm_print_operand): Delete.\n\n\t* config/arm/arm-protos.h (arm_print_operand): Delete.\n\t(arm_print_operand_address): Delete.\n\t* config/arm/arm.h (PRINT_OPERAND): Delete.\n\t(PRINT_OPERAND_PUNCT_VALID_P): Delete.\n\t(PRINT_OPERAND_ADDRESS, ARM_PRINT_OPERAND_ADDRESS):\n\t(THUMB_PRINT_OPERAND_ADDRESS): Delete and move code to...\n\t* config/arm/arm.c (arm_print_operand_address): ...here.  New\n\tfunction.\n\t(arm_print_operand): Make static.\n\t(arm_print_operand_punct_valid_p): New function.\n\t(TARGET_PRINT_OPERAND, TARGET_PRINT_OPERAND_ADDRESS):\n\t(TARGET_PRINT_OPERAND_ADDRESS): Define.\n\nFrom-SVN: r160854", "tree": {"sha": "6e04f93b0f47a5471fa68f2d8f507b90e2525e44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e04f93b0f47a5471fa68f2d8f507b90e2525e44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/944442bbd0340df394b284281ab99c0c293b7878", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/944442bbd0340df394b284281ab99c0c293b7878", "html_url": "https://github.com/Rust-GCC/gccrs/commit/944442bbd0340df394b284281ab99c0c293b7878", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/944442bbd0340df394b284281ab99c0c293b7878/comments", "author": null, "committer": null, "parents": [{"sha": "c0932c7f5bf7dad16c018702bda1c663ccb25a1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0932c7f5bf7dad16c018702bda1c663ccb25a1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0932c7f5bf7dad16c018702bda1c663ccb25a1c"}], "stats": {"total": 290, "additions": 148, "deletions": 142}, "files": [{"sha": "61dcf07d8efbffc50acf3d351142d45edea0ecdd", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/944442bbd0340df394b284281ab99c0c293b7878/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/944442bbd0340df394b284281ab99c0c293b7878/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=944442bbd0340df394b284281ab99c0c293b7878", "patch": "@@ -136,8 +136,6 @@ extern const char *arithmetic_instr (rtx, int);\n extern void output_ascii_pseudo_op (FILE *, const unsigned char *, int);\n extern const char *output_return_instruction (rtx, int, int);\n extern void arm_poke_function_name (FILE *, const char *);\n-extern void arm_print_operand (FILE *, rtx, int);\n-extern void arm_print_operand_address (FILE *, rtx);\n extern void arm_final_prescan_insn (rtx);\n extern int arm_debugger_arg_offset (int, rtx);\n extern bool arm_is_long_call_p (tree);"}, {"sha": "685b5651bcbfb0a957feaed887fa7577d7c6dde2", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 148, "deletions": 4, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/944442bbd0340df394b284281ab99c0c293b7878/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/944442bbd0340df394b284281ab99c0c293b7878/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=944442bbd0340df394b284281ab99c0c293b7878", "patch": "@@ -83,6 +83,9 @@ static int const_ok_for_op (HOST_WIDE_INT, enum rtx_code);\n static rtx emit_sfm (int, int);\n static unsigned arm_size_return_regs (void);\n static bool arm_assemble_integer (rtx, unsigned int, int);\n+static void arm_print_operand (FILE *, rtx, int);\n+static void arm_print_operand_address (FILE *, rtx);\n+static bool arm_print_operand_punct_valid_p (unsigned char code);\n static const char *fp_const_from_val (REAL_VALUE_TYPE *);\n static arm_cc get_arm_condition_code (rtx);\n static HOST_WIDE_INT int_log2 (HOST_WIDE_INT);\n@@ -285,6 +288,13 @@ static const struct attribute_spec arm_attribute_table[] =\n #undef  TARGET_ASM_INTEGER\n #define TARGET_ASM_INTEGER arm_assemble_integer\n \n+#undef TARGET_PRINT_OPERAND\n+#define TARGET_PRINT_OPERAND arm_print_operand\n+#undef TARGET_PRINT_OPERAND_ADDRESS\n+#define TARGET_PRINT_OPERAND_ADDRESS arm_print_operand_address\n+#undef TARGET_PRINT_OPERAND_PUNCT_VALID_P\n+#define TARGET_PRINT_OPERAND_PUNCT_VALID_P arm_print_operand_punct_valid_p\n+\n #undef  TARGET_ASM_FUNCTION_PROLOGUE\n #define TARGET_ASM_FUNCTION_PROLOGUE arm_output_function_prologue\n \n@@ -688,9 +698,9 @@ int arm_arch_thumb2;\n /* Nonzero if chip supports integer division instruction.  */\n int arm_arch_hwdiv;\n \n-/* In case of a PRE_INC, POST_INC, PRE_DEC, POST_DEC memory reference, we\n-   must report the mode of the memory reference from PRINT_OPERAND to\n-   PRINT_OPERAND_ADDRESS.  */\n+/* In case of a PRE_INC, POST_INC, PRE_DEC, POST_DEC memory reference,\n+   we must report the mode of the memory reference from\n+   TARGET_PRINT_OPERAND to TARGET_PRINT_OPERAND_ADDRESS.  */\n enum machine_mode output_memory_reference_mode;\n \n /* The register number to be used for the PIC offset register.  */\n@@ -15082,7 +15092,7 @@ arm_print_condition (FILE *stream)\n    before output.\n    If CODE is 'B' then output a bitwise inverted value of X (a const int).\n    If X is a REG and CODE is `M', output a ldm/stm style multi-reg.  */\n-void\n+static void\n arm_print_operand (FILE *stream, rtx x, int code)\n {\n   switch (code)\n@@ -15701,6 +15711,140 @@ arm_print_operand (FILE *stream, rtx x, int code)\n     }\n }\n \f\n+/* Target hook for printing a memory address.  */\n+static void\n+arm_print_operand_address (FILE *stream, rtx x)\n+{\n+  if (TARGET_32BIT)\n+    {\n+      int is_minus = GET_CODE (x) == MINUS;\n+\n+      if (GET_CODE (x) == REG)\n+\tasm_fprintf (stream, \"[%r, #0]\", REGNO (x));\n+      else if (GET_CODE (x) == PLUS || is_minus)\n+\t{\n+\t  rtx base = XEXP (x, 0);\n+\t  rtx index = XEXP (x, 1);\n+\t  HOST_WIDE_INT offset = 0;\n+\t  if (GET_CODE (base) != REG\n+\t      || (GET_CODE (index) == REG && REGNO (index) == SP_REGNUM))\n+\t    {\n+\t      /* Ensure that BASE is a register.  */\n+\t      /* (one of them must be).  */\n+\t      /* Also ensure the SP is not used as in index register.  */\n+\t      rtx temp = base;\n+\t      base = index;\n+\t      index = temp;\n+\t    }\n+\t  switch (GET_CODE (index))\n+\t    {\n+\t    case CONST_INT:\n+\t      offset = INTVAL (index);\n+\t      if (is_minus)\n+\t\toffset = -offset;\n+\t      asm_fprintf (stream, \"[%r, #%wd]\",\n+\t\t\t   REGNO (base), offset);\n+\t      break;\n+\n+\t    case REG:\n+\t      asm_fprintf (stream, \"[%r, %s%r]\",\n+\t\t\t   REGNO (base), is_minus ? \"-\" : \"\",\n+\t\t\t   REGNO (index));\n+\t      break;\n+\n+\t    case MULT:\n+\t    case ASHIFTRT:\n+\t    case LSHIFTRT:\n+\t    case ASHIFT:\n+\t    case ROTATERT:\n+\t      {\n+\t\tasm_fprintf (stream, \"[%r, %s%r\",\n+\t\t\t     REGNO (base), is_minus ? \"-\" : \"\",\n+\t\t\t     REGNO (XEXP (index, 0)));\n+\t\tarm_print_operand (stream, index, 'S');\n+\t\tfputs (\"]\", stream);\n+\t\tbreak;\n+\t      }\n+\n+\t    default:\n+\t      gcc_unreachable ();\n+\t    }\n+\t}\n+      else if (GET_CODE (x) == PRE_INC || GET_CODE (x) == POST_INC\n+\t       || GET_CODE (x) == PRE_DEC || GET_CODE (x) == POST_DEC)\n+\t{\n+\t  extern enum machine_mode output_memory_reference_mode;\n+\n+\t  gcc_assert (GET_CODE (XEXP (x, 0)) == REG);\n+\n+\t  if (GET_CODE (x) == PRE_DEC || GET_CODE (x) == PRE_INC)\n+\t    asm_fprintf (stream, \"[%r, #%s%d]!\",\n+\t\t\t REGNO (XEXP (x, 0)),\n+\t\t\t GET_CODE (x) == PRE_DEC ? \"-\" : \"\",\n+\t\t\t GET_MODE_SIZE (output_memory_reference_mode));\n+\t  else\n+\t    asm_fprintf (stream, \"[%r], #%s%d\",\n+\t\t\t REGNO (XEXP (x, 0)),\n+\t\t\t GET_CODE (x) == POST_DEC ? \"-\" : \"\",\n+\t\t\t GET_MODE_SIZE (output_memory_reference_mode));\n+\t}\n+      else if (GET_CODE (x) == PRE_MODIFY)\n+\t{\n+\t  asm_fprintf (stream, \"[%r, \", REGNO (XEXP (x, 0)));\n+\t  if (GET_CODE (XEXP (XEXP (x, 1), 1)) == CONST_INT)\n+\t    asm_fprintf (stream, \"#%wd]!\",\n+\t\t\t INTVAL (XEXP (XEXP (x, 1), 1)));\n+\t  else\n+\t    asm_fprintf (stream, \"%r]!\",\n+\t\t\t REGNO (XEXP (XEXP (x, 1), 1)));\n+\t}\n+      else if (GET_CODE (x) == POST_MODIFY)\n+\t{\n+\t  asm_fprintf (stream, \"[%r], \", REGNO (XEXP (x, 0)));\n+\t  if (GET_CODE (XEXP (XEXP (x, 1), 1)) == CONST_INT)\n+\t    asm_fprintf (stream, \"#%wd\",\n+\t\t\t INTVAL (XEXP (XEXP (x, 1), 1)));\n+\t  else\n+\t    asm_fprintf (stream, \"%r\",\n+\t\t\t REGNO (XEXP (XEXP (x, 1), 1)));\n+\t}\n+      else output_addr_const (stream, x);\n+    }\n+  else\n+    {\n+      if (GET_CODE (x) == REG)\n+\tasm_fprintf (stream, \"[%r]\", REGNO (x));\n+      else if (GET_CODE (x) == POST_INC)\n+\tasm_fprintf (stream, \"%r!\", REGNO (XEXP (x, 0)));\n+      else if (GET_CODE (x) == PLUS)\n+\t{\n+\t  gcc_assert (GET_CODE (XEXP (x, 0)) == REG);\n+\t  if (GET_CODE (XEXP (x, 1)) == CONST_INT)\n+\t    asm_fprintf (stream, \"[%r, #%wd]\",\n+\t\t\t REGNO (XEXP (x, 0)),\n+\t\t\t INTVAL (XEXP (x, 1)));\n+\t  else\n+\t    asm_fprintf (stream, \"[%r, %r]\",\n+\t\t\t REGNO (XEXP (x, 0)),\n+\t\t\t REGNO (XEXP (x, 1)));\n+\t}\n+      else\n+\toutput_addr_const (stream, x);\n+    }\n+}\n+\f\n+/* Target hook for indicating whether a punctuation character for\n+   TARGET_PRINT_OPERAND is valid.  */\n+static bool\n+arm_print_operand_punct_valid_p (unsigned char code)\n+{\n+  return (code == '@' || code == '|' || code == '.'\n+\t  || code == '(' || code == ')' || code == '#'\n+\t  || (TARGET_32BIT && (code == '?'))\n+\t  || (TARGET_THUMB2 && (code == '!'))\n+\t  || (TARGET_THUMB && (code == '_')));\n+}\n+\f\n /* Target hook for assembling integer objects.  The ARM version needs to\n    handle word-sized values specially.  */\n static bool"}, {"sha": "9066bbefb6108308c8f303b47c5192ccc18924d6", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 136, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/944442bbd0340df394b284281ab99c0c293b7878/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/944442bbd0340df394b284281ab99c0c293b7878/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=944442bbd0340df394b284281ab99c0c293b7878", "patch": "@@ -2414,17 +2414,6 @@ extern int making_const_table;\n   else if (TARGET_THUMB1)\t\t\t\t\\\n     thumb1_final_prescan_insn (INSN)\n \n-#define PRINT_OPERAND_PUNCT_VALID_P(CODE)\t\\\n-  (CODE == '@' || CODE == '|' || CODE == '.'\t\\\n-   || CODE == '(' || CODE == ')' || CODE == '#'\t\\\n-   || (TARGET_32BIT && (CODE == '?'))\t\t\\\n-   || (TARGET_THUMB2 && (CODE == '!'))\t\t\\\n-   || (TARGET_THUMB && (CODE == '_')))\n-\n-/* Output an operand of an instruction.  */\n-#define PRINT_OPERAND(STREAM, X, CODE)  \\\n-  arm_print_operand (STREAM, X, CODE)\n-\n #define ARM_SIGN_EXTEND(x)  ((HOST_WIDE_INT)\t\t\t\\\n   (HOST_BITS_PER_WIDE_INT <= 32 ? (unsigned HOST_WIDE_INT) (x)\t\\\n    : ((((unsigned HOST_WIDE_INT)(x)) & (unsigned HOST_WIDE_INT) 0xffffffff) |\\\n@@ -2433,131 +2422,6 @@ extern int making_const_table;\n \t  & ~ (unsigned HOST_WIDE_INT) 0xffffffff)\t\t\\\n        : 0))))\n \n-/* Output the address of an operand.  */\n-#define ARM_PRINT_OPERAND_ADDRESS(STREAM, X)\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-    int is_minus = GET_CODE (X) == MINUS;\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-    if (GET_CODE (X) == REG)\t\t\t\t\t\t\\\n-      asm_fprintf (STREAM, \"[%r, #0]\", REGNO (X));\t\t\t\\\n-    else if (GET_CODE (X) == PLUS || is_minus)\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\trtx base = XEXP (X, 0);\t\t\t\t\t\t\\\n-\trtx index = XEXP (X, 1);\t\t\t\t\t\\\n-\tHOST_WIDE_INT offset = 0;\t\t\t\t\t\\\n-\tif (GET_CODE (base) != REG\t\t\t\t\t\\\n-\t    || (GET_CODE (index) == REG && REGNO (index) == SP_REGNUM))\t\\\n-\t  {\t\t\t\t\t\t\t\t\\\n-\t    /* Ensure that BASE is a register.  */\t\t\t\\\n-            /* (one of them must be).  */\t\t\t\t\\\n-\t    /* Also ensure the SP is not used as in index register.  */ \\\n-\t    rtx temp = base;\t\t\t\t\t\t\\\n-\t    base = index;\t\t\t\t\t\t\\\n-\t    index = temp;\t\t\t\t\t\t\\\n-\t  }\t\t\t\t\t\t\t\t\\\n-\tswitch (GET_CODE (index))\t\t\t\t\t\\\n-\t  {\t\t\t\t\t\t\t\t\\\n-\t  case CONST_INT:\t\t\t\t\t\t\\\n-\t    offset = INTVAL (index);\t\t\t\t\t\\\n-\t    if (is_minus)\t\t\t\t\t\t\\\n-\t      offset = -offset;\t\t\t\t\t\t\\\n-\t    asm_fprintf (STREAM, \"[%r, #%wd]\",\t\t\t\t\\\n-\t\t         REGNO (base), offset);\t\t\t\t\\\n-\t    break;\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\t  case REG:\t\t\t\t\t\t\t\\\n-\t    asm_fprintf (STREAM, \"[%r, %s%r]\",\t\t\t\t\\\n-\t\t     REGNO (base), is_minus ? \"-\" : \"\",\t\t\t\\\n-\t\t     REGNO (index));\t\t\t\t\t\\\n-\t    break;\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\t  case MULT:\t\t\t\t\t\t\t\\\n-\t  case ASHIFTRT:\t\t\t\t\t\t\\\n-\t  case LSHIFTRT:\t\t\t\t\t\t\\\n-\t  case ASHIFT:\t\t\t\t\t\t\t\\\n-\t  case ROTATERT:\t\t\t\t\t\t\\\n-\t  {\t\t\t\t\t\t\t\t\\\n-\t    asm_fprintf (STREAM, \"[%r, %s%r\",\t\t\t\t\\\n-\t\t         REGNO (base), is_minus ? \"-\" : \"\",\t\t\\\n-                         REGNO (XEXP (index, 0)));\t\t\t\\\n-\t    arm_print_operand (STREAM, index, 'S');\t\t\t\\\n-\t    fputs (\"]\", STREAM);\t\t\t\t\t\\\n-\t    break;\t\t\t\t\t\t\t\\\n-\t  }\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\t  default:\t\t\t\t\t\t\t\\\n-\t    gcc_unreachable ();\t\t\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  else if (GET_CODE (X) == PRE_INC || GET_CODE (X) == POST_INC\t\t\\\n-\t   || GET_CODE (X) == PRE_DEC || GET_CODE (X) == POST_DEC)\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      extern enum machine_mode output_memory_reference_mode;\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-      gcc_assert (GET_CODE (XEXP (X, 0)) == REG);\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-      if (GET_CODE (X) == PRE_DEC || GET_CODE (X) == PRE_INC)\t\t\\\n-\tasm_fprintf (STREAM, \"[%r, #%s%d]!\",\t\t\t\t\\\n-\t\t     REGNO (XEXP (X, 0)),\t\t\t\t\\\n-\t\t     GET_CODE (X) == PRE_DEC ? \"-\" : \"\",\t\t\\\n-\t\t     GET_MODE_SIZE (output_memory_reference_mode));\t\\\n-      else\t\t\t\t\t\t\t\t\\\n-\tasm_fprintf (STREAM, \"[%r], #%s%d\",\t\t\t\t\\\n-\t\t     REGNO (XEXP (X, 0)),\t\t\t\t\\\n-\t\t     GET_CODE (X) == POST_DEC ? \"-\" : \"\",\t\t\\\n-\t\t     GET_MODE_SIZE (output_memory_reference_mode));\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  else if (GET_CODE (X) == PRE_MODIFY)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      asm_fprintf (STREAM, \"[%r, \", REGNO (XEXP (X, 0)));\t\t\\\n-      if (GET_CODE (XEXP (XEXP (X, 1), 1)) == CONST_INT)\t\t\\\n-\tasm_fprintf (STREAM, \"#%wd]!\", \t\t\t\t\t\\\n-\t\t     INTVAL (XEXP (XEXP (X, 1), 1)));\t\t\t\\\n-      else\t\t\t\t\t\t\t\t\\\n-\tasm_fprintf (STREAM, \"%r]!\", \t\t\t\t\t\\\n-\t\t     REGNO (XEXP (XEXP (X, 1), 1)));\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  else if (GET_CODE (X) == POST_MODIFY)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      asm_fprintf (STREAM, \"[%r], \", REGNO (XEXP (X, 0)));\t\t\\\n-      if (GET_CODE (XEXP (XEXP (X, 1), 1)) == CONST_INT)\t\t\\\n-\tasm_fprintf (STREAM, \"#%wd\", \t\t\t\t\t\\\n-\t\t     INTVAL (XEXP (XEXP (X, 1), 1)));\t\t\t\\\n-      else\t\t\t\t\t\t\t\t\\\n-\tasm_fprintf (STREAM, \"%r\", \t\t\t\t\t\\\n-\t\t     REGNO (XEXP (XEXP (X, 1), 1)));\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  else output_addr_const (STREAM, X);\t\t\t\t\t\\\n-}\n-\n-#define THUMB_PRINT_OPERAND_ADDRESS(STREAM, X)\t\t\\\n-{\t\t\t\t\t\t\t\\\n-  if (GET_CODE (X) == REG)\t\t\t\t\\\n-    asm_fprintf (STREAM, \"[%r]\", REGNO (X));\t\t\\\n-  else if (GET_CODE (X) == POST_INC)\t\t\t\\\n-    asm_fprintf (STREAM, \"%r!\", REGNO (XEXP (X, 0)));\t\\\n-  else if (GET_CODE (X) == PLUS)\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      gcc_assert (GET_CODE (XEXP (X, 0)) == REG);\t\\\n-      if (GET_CODE (XEXP (X, 1)) == CONST_INT)\t\t\\\n-\tasm_fprintf (STREAM, \"[%r, #%wd]\", \t\t\\\n-\t\t     REGNO (XEXP (X, 0)),\t\t\\\n-\t\t     INTVAL (XEXP (X, 1)));\t\t\\\n-      else\t\t\t\t\t\t\\\n-\tasm_fprintf (STREAM, \"[%r, %r]\",\t\t\\\n-\t\t     REGNO (XEXP (X, 0)),\t\t\\\n-\t\t     REGNO (XEXP (X, 1)));\t\t\\\n-    }\t\t\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\\\n-    output_addr_const (STREAM, X);\t\t\t\\\n-}\n-\n-#define PRINT_OPERAND_ADDRESS(STREAM, X)\t\\\n-  if (TARGET_32BIT)\t\t\t\t\\\n-    ARM_PRINT_OPERAND_ADDRESS (STREAM, X)\t\\\n-  else\t\t\t\t\t\t\\\n-    THUMB_PRINT_OPERAND_ADDRESS (STREAM, X)\n-\n #define OUTPUT_ADDR_CONST_EXTRA(file, x, fail)\t\t\\\n   if (arm_output_addr_const_extra (file, x) == FALSE)\t\\\n     goto fail"}]}