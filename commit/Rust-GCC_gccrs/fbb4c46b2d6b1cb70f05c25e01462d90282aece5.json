{"sha": "fbb4c46b2d6b1cb70f05c25e01462d90282aece5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJiNGM0NmIyZDZiMWNiNzBmMDVjMjVlMDE0NjJkOTAyODJhZWNlNQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2005-06-15T19:11:43Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2005-06-15T19:11:43Z"}, "message": "re PR libgcj/21906 (hang when invoking abstract method)\n\ngcc/java/:\n\tPR libgcj/21906:\n\t* class.c (make_method_value): Use soft_abstractmethod_node for\n\tabstract method.\n\t* java-tree.h (soft_abstractmethod_node): New define.\n\t(JTI_SOFT_ABSTRACTMETHOD_NODE): New enum constant.\n\t* decl.c (java_init_decl_processing): Initialize\n\tsoft_abstractmethod_node.\nlibjava/:\n\tPR libgcj/21906:\n\t* defineclass.cc (handleMethodsEnd): Set ncode for abstract\n\tmethods.\n\t* include/jvm.h (_Jv_ThrowAbstractMethodError): Declare.\n\t* link.cc (_Jv_ThrowAbstractMethodError): Renamed.  No longer\n\tstatic.\n\t(append_partial_itable): Use it.\n\t(set_vtable_entries): Likewise.\n\nFrom-SVN: r100992", "tree": {"sha": "d75a57626d585261ba5d3eae3b74954aa5b37586", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d75a57626d585261ba5d3eae3b74954aa5b37586"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbb4c46b2d6b1cb70f05c25e01462d90282aece5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbb4c46b2d6b1cb70f05c25e01462d90282aece5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbb4c46b2d6b1cb70f05c25e01462d90282aece5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbb4c46b2d6b1cb70f05c25e01462d90282aece5/comments", "author": null, "committer": null, "parents": [{"sha": "92b5fbc5aebba9d16fb3247ad0b77020132a2427", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92b5fbc5aebba9d16fb3247ad0b77020132a2427", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92b5fbc5aebba9d16fb3247ad0b77020132a2427"}], "stats": {"total": 52, "additions": 46, "deletions": 6}, "files": [{"sha": "b6f6e3a694d46374efa83144da6a84a698fdc7c4", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbb4c46b2d6b1cb70f05c25e01462d90282aece5/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbb4c46b2d6b1cb70f05c25e01462d90282aece5/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=fbb4c46b2d6b1cb70f05c25e01462d90282aece5", "patch": "@@ -1,3 +1,13 @@\n+2005-06-15  Tom Tromey  <tromey@redhat.com>\n+\n+\tPR libgcj/21906:\n+\t* class.c (make_method_value): Use soft_abstractmethod_node for\n+\tabstract method.\n+\t* java-tree.h (soft_abstractmethod_node): New define.\n+\t(JTI_SOFT_ABSTRACTMETHOD_NODE): New enum constant.\n+\t* decl.c (java_init_decl_processing): Initialize\n+\tsoft_abstractmethod_node.\n+\n 2005-06-13  Geoffrey Keating  <geoffk@apple.com>\n \n \t* Make-lang.in (rule for installing gcj.1): Depends on installdirs."}, {"sha": "f444121463321b390987437a12810f112edaf0e2", "filename": "gcc/java/class.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbb4c46b2d6b1cb70f05c25e01462d90282aece5/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbb4c46b2d6b1cb70f05c25e01462d90282aece5/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=fbb4c46b2d6b1cb70f05c25e01462d90282aece5", "patch": "@@ -1315,7 +1315,10 @@ make_method_value (tree mdecl)\n     index = integer_minus_one_node;\n \n   code = null_pointer_node;\n-  if (!METHOD_ABSTRACT (mdecl))\n+  if (METHOD_ABSTRACT (mdecl))\n+    code = build1 (ADDR_EXPR, nativecode_ptr_type_node,\n+\t\t   soft_abstractmethod_node);\n+  else\n     code = build1 (ADDR_EXPR, nativecode_ptr_type_node, \n \t\t   make_local_function_alias (mdecl));\n   START_RECORD_CONSTRUCTOR (minit, method_type_node);"}, {"sha": "5240fbacd3bc4f682d8711b4e7c95f4c6e764dca", "filename": "gcc/java/decl.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbb4c46b2d6b1cb70f05c25e01462d90282aece5/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbb4c46b2d6b1cb70f05c25e01462d90282aece5/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=fbb4c46b2d6b1cb70f05c25e01462d90282aece5", "patch": "@@ -1107,6 +1107,15 @@ java_init_decl_processing (void)\n   TREE_THIS_VOLATILE (soft_nullpointer_node) = 1;\n   TREE_SIDE_EFFECTS (soft_nullpointer_node) = 1;\n \n+  soft_abstractmethod_node\n+    = builtin_function (\"_Jv_ThrowAbstractMethodError\",\n+\t\t\tbuild_function_type (void_type_node, endlink),\n+\t\t\t0, NOT_BUILT_IN, NULL, NULL_TREE);\n+  /* Mark soft_abstractmethod_node as a `noreturn' function with side\n+     effects.  */\n+  TREE_THIS_VOLATILE (soft_abstractmethod_node) = 1;\n+  TREE_SIDE_EFFECTS (soft_abstractmethod_node) = 1;\n+\n   t = tree_cons (NULL_TREE, class_ptr_type,\n \t\t tree_cons (NULL_TREE, object_ptr_type_node, endlink));\n   soft_checkcast_node"}, {"sha": "3d0f233111050b2c909e2689db03312d0e7e638a", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbb4c46b2d6b1cb70f05c25e01462d90282aece5/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbb4c46b2d6b1cb70f05c25e01462d90282aece5/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=fbb4c46b2d6b1cb70f05c25e01462d90282aece5", "patch": "@@ -392,6 +392,7 @@ enum java_tree_index\n   JTI_SOFT_MULTIANEWARRAY_NODE,\n   JTI_SOFT_BADARRAYINDEX_NODE,\n   JTI_SOFT_NULLPOINTER_NODE,\n+  JTI_SOFT_ABSTRACTMETHOD_NODE,\n   JTI_SOFT_CHECKARRAYSTORE_NODE,\n   JTI_SOFT_MONITORENTER_NODE,\n   JTI_SOFT_MONITOREXIT_NODE,\n@@ -651,6 +652,8 @@ extern GTY(()) tree java_global_trees[JTI_MAX];\n   java_global_trees[JTI_SOFT_BADARRAYINDEX_NODE]\n #define soft_nullpointer_node \\\n   java_global_trees[JTI_SOFT_NULLPOINTER_NODE]\n+#define soft_abstractmethod_node \\\n+  java_global_trees[JTI_SOFT_ABSTRACTMETHOD_NODE]\n #define soft_checkarraystore_node \\\n   java_global_trees[JTI_SOFT_CHECKARRAYSTORE_NODE]\n #define soft_monitorenter_node \\"}, {"sha": "813eef1db912b82613125fb92ffd1371099c0fad", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbb4c46b2d6b1cb70f05c25e01462d90282aece5/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbb4c46b2d6b1cb70f05c25e01462d90282aece5/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=fbb4c46b2d6b1cb70f05c25e01462d90282aece5", "patch": "@@ -1,3 +1,14 @@\n+2005-06-15  Tom Tromey  <tromey@redhat.com>\n+\n+\tPR libgcj/21906:\n+\t* defineclass.cc (handleMethodsEnd): Set ncode for abstract\n+\tmethods.\n+\t* include/jvm.h (_Jv_ThrowAbstractMethodError): Declare.\n+\t* link.cc (_Jv_ThrowAbstractMethodError): Renamed.  No longer\n+\tstatic.\n+\t(append_partial_itable): Use it.\n+\t(set_vtable_entries): Likewise.\n+\n 2005-06-15  Tom Tromey  <tromey@redhat.com>\n \n \t* gnu/gcj/runtime/SystemClassLoader.java (init): Clear"}, {"sha": "7564957dc43740acacdc2463092940f3345007fb", "filename": "libjava/defineclass.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbb4c46b2d6b1cb70f05c25e01462d90282aece5/libjava%2Fdefineclass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbb4c46b2d6b1cb70f05c25e01462d90282aece5/libjava%2Fdefineclass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fdefineclass.cc?ref=fbb4c46b2d6b1cb70f05c25e01462d90282aece5", "patch": "@@ -1288,7 +1288,7 @@ void _Jv_ClassReader::handleMethod\n \tthrow_class_format_error (\"erroneous method access flags\");\n \n       // FIXME: JVM spec S4.6: if ABSTRACT modifier is set, verify other \n-      // flags are not set. Verify flags for interface methods. Verifiy\n+      // flags are not set. Verify flags for interface methods.  Verify\n       // modifiers for initializers. \n     }\n }\n@@ -1378,6 +1378,7 @@ void _Jv_ClassReader::handleMethodsEnd ()\n \t{\n \t  if (def_interp->interpreted_methods[i] != 0)\n \t    throw_class_format_error (\"code provided for abstract method\");\n+\t  method->ncode = (void *) &_Jv_ThrowAbstractMethodError;\n \t}\n       else\n \t{"}, {"sha": "606a84ddcbf7dceade1eabe5789a624c51b40000", "filename": "libjava/include/jvm.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbb4c46b2d6b1cb70f05c25e01462d90282aece5/libjava%2Finclude%2Fjvm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbb4c46b2d6b1cb70f05c25e01462d90282aece5/libjava%2Finclude%2Fjvm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjvm.h?ref=fbb4c46b2d6b1cb70f05c25e01462d90282aece5", "patch": "@@ -482,6 +482,8 @@ extern void _Jv_CallAnyMethodA (jobject obj,\n extern jobject _Jv_NewMultiArray (jclass, jint ndims, jint* dims)\n   __attribute__((__malloc__));\n \n+extern \"C\" void _Jv_ThrowAbstractMethodError () __attribute__((__noreturn__));\n+\n /* Checked divide subroutines. */\n extern \"C\"\n {"}, {"sha": "e97b31bb78ec4d11419baa63c742218e3ce5be65", "filename": "libjava/link.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbb4c46b2d6b1cb70f05c25e01462d90282aece5/libjava%2Flink.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbb4c46b2d6b1cb70f05c25e01462d90282aece5/libjava%2Flink.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Flink.cc?ref=fbb4c46b2d6b1cb70f05c25e01462d90282aece5", "patch": "@@ -714,8 +714,8 @@ _Jv_ThrowNoSuchMethodError ()\n }\n \n // This is put in empty vtable slots.\n-static void\n-_Jv_abstractMethodError (void)\n+void\n+_Jv_ThrowAbstractMethodError ()\n {\n   throw new java::lang::AbstractMethodError();\n }\n@@ -767,7 +767,7 @@ _Jv_Linker::append_partial_itable (jclass klass, jclass iface,\n \t      (_Jv_GetMethodString (klass, meth));\n \n  \t  if ((meth->accflags & Modifier::ABSTRACT) != 0)\n-\t    itable[pos] = (void *) &_Jv_abstractMethodError;\n+\t    itable[pos] = (void *) &_Jv_ThrowAbstractMethodError;\n \t  else\n \t    itable[pos] = meth->ncode;\n \t}\n@@ -1228,7 +1228,8 @@ _Jv_Linker::set_vtable_entries (jclass klass, _Jv_VTable *vtable)\n       if ((meth->accflags & Modifier::ABSTRACT))\n \t// FIXME: it might be nice to have a libffi trampoline here,\n \t// so we could pass in the method name and other information.\n-\tvtable->set_method(meth->index, (void *) &_Jv_abstractMethodError);\n+\tvtable->set_method(meth->index,\n+\t\t\t   (void *) &_Jv_ThrowAbstractMethodError);\n       else\n \tvtable->set_method(meth->index, meth->ncode);\n     }"}]}