{"sha": "e387e99b29b8860d7e766d805f329b71167e1c85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM4N2U5OWIyOWI4ODYwZDdlNzY2ZDgwNWYzMjliNzExNjdlMWM4NQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2002-03-13T07:56:19Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-03-13T07:56:19Z"}, "message": "sparc.h (INITIAL_FRAME_POINTER_OFFSET): Remove.\n\n\t* config/sparc/sparc.h (INITIAL_FRAME_POINTER_OFFSET): Remove.\n\t(ELIMINABLE_REGS): Add sfp->sp.\n\t(INITIAL_ELIMINATION_OFFSET): Compute sfp->sp offset too.\n\nFrom-SVN: r50725", "tree": {"sha": "f24c9e8242be1410ea02b25be13e9bd998a25d46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f24c9e8242be1410ea02b25be13e9bd998a25d46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e387e99b29b8860d7e766d805f329b71167e1c85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e387e99b29b8860d7e766d805f329b71167e1c85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e387e99b29b8860d7e766d805f329b71167e1c85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e387e99b29b8860d7e766d805f329b71167e1c85/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "09948ece3d6f36ebf908a5a2ee6b98d856bf0c92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09948ece3d6f36ebf908a5a2ee6b98d856bf0c92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09948ece3d6f36ebf908a5a2ee6b98d856bf0c92"}], "stats": {"total": 38, "additions": 25, "deletions": 13}, "files": [{"sha": "d78dd6c62489a5363345b80ab2839d831d602889", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e387e99b29b8860d7e766d805f329b71167e1c85/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e387e99b29b8860d7e766d805f329b71167e1c85/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e387e99b29b8860d7e766d805f329b71167e1c85", "patch": "@@ -1,4 +1,10 @@\n-2002-03-12  Jakub Jelinek  <jakub@redhat.com>\n+2002-03-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/sparc/sparc.h (INITIAL_FRAME_POINTER_OFFSET): Remove.\n+\t(ELIMINABLE_REGS): Add sfp->sp.\n+\t(INITIAL_ELIMINATION_OFFSET): Compute sfp->sp offset too.\n+\n+2002-03-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR optimization/5892\n \t* config/ia64/ia64.c (rotate_one_bundle): Update current packet."}, {"sha": "8caa9328acdca919f783975dddf636d405b45b40", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e387e99b29b8860d7e766d805f329b71167e1c85/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e387e99b29b8860d7e766d805f329b71167e1c85/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=e387e99b29b8860d7e766d805f329b71167e1c85", "patch": "@@ -1139,16 +1139,6 @@ extern int sparc_mode_class[];\n       || !leaf_function_p ())\t\t\t\t\\\n    : ! (leaf_function_p () && only_leaf_regs_used ()))\n \n-/* C statement to store the difference between the frame pointer\n-   and the stack pointer values immediately after the function prologue.\n-\n-   Note, we always pretend that this is a leaf function because if\n-   it's not, there's no point in trying to eliminate the\n-   frame pointer.  If it is a leaf function, we guessed right!  */\n-#define INITIAL_FRAME_POINTER_OFFSET(VAR) \\\n-  ((VAR) = (TARGET_FLAT ? sparc_flat_compute_frame_size (get_frame_size ()) \\\n-\t    : compute_frame_size (get_frame_size (), 1)))\n-\n /* Base register for access to arguments of the function.  */\n #define ARG_POINTER_REGNUM FRAME_POINTER_REGNUM\n \n@@ -1577,12 +1567,28 @@ extern const char leaf_reg_remap[];\n /* ??? In TARGET_FLAT mode we needn't have a hard frame pointer.  */\n    \n #define ELIMINABLE_REGS \\\n-  {{ FRAME_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM}}\n+  {{ FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM}, \\\n+   { FRAME_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM} }\n \n #define CAN_ELIMINATE(FROM, TO) 1\n \n #define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET) \\\n-  ((OFFSET) = SPARC_STACK_BIAS)\n+  do {\t\t\t\t\t\t\t\t\\\n+    (OFFSET) = 0;\t\t\t\t\t\t\\\n+    if ((TO) == STACK_POINTER_REGNUM)\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\t/* Note, we always pretend that this is a leaf function\t\\\n+\t   because if it's not, there's no point in trying to\t\\\n+\t   eliminate the frame pointer.  If it is a leaf\t\\\n+\t   function, we guessed right!  */\t\t\t\\\n+\tif (TARGET_FLAT)\t\t\t\t\t\\\n+\t  (OFFSET) =\t\t\t\t\t\t\\\n+\t    sparc_flat_compute_frame_size (get_frame_size ());\t\\\n+\telse\t\t\t\t\t\t\t\\\n+\t  (OFFSET) = compute_frame_size (get_frame_size (), 1);\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    (OFFSET) += SPARC_STACK_BIAS;\t\t\t\t\\\n+  } while (0)\n \n /* Keep the stack pointer constant throughout the function.\n    This is both an optimization and a necessity: longjmp"}]}