{"sha": "6edf8a522985d30615ff15de817b1b47969dc5b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVkZjhhNTIyOTg1ZDMwNjE1ZmYxNWRlODE3YjFiNDc5NjlkYzViOQ==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2006-06-06T19:16:14Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2006-06-06T19:16:14Z"}, "message": "gcc-dg.exp (gcc-dg-test-1): Detect and report ICE.\n\n\t* lib/gcc-dg.exp (gcc-dg-test-1): Detect and report ICE.\n\t* lib/gcc-defs.exp (tool_check_compile): Ditto.\n\t* lib/fortran-torture.exp (fortran-torture-compile,\n\tfortran-torture-execute): Ditto.\n\nFrom-SVN: r114445", "tree": {"sha": "45442f6a4ad5c6f38ab726365822ad287450f197", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45442f6a4ad5c6f38ab726365822ad287450f197"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6edf8a522985d30615ff15de817b1b47969dc5b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6edf8a522985d30615ff15de817b1b47969dc5b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6edf8a522985d30615ff15de817b1b47969dc5b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6edf8a522985d30615ff15de817b1b47969dc5b9/comments", "author": null, "committer": null, "parents": [{"sha": "32845532e0af2d0aba90b5218feb2fdc47240bc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32845532e0af2d0aba90b5218feb2fdc47240bc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32845532e0af2d0aba90b5218feb2fdc47240bc6"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "dc457d1e5d27797db0c442d71b179a166a610fbd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6edf8a522985d30615ff15de817b1b47969dc5b9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6edf8a522985d30615ff15de817b1b47969dc5b9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6edf8a522985d30615ff15de817b1b47969dc5b9", "patch": "@@ -1,3 +1,10 @@\n+2006-06-06  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* lib/gcc-dg.exp (gcc-dg-test-1): Detect and report ICE.\n+\t* lib/gcc-defs.exp (tool_check_compile): Ditto.\n+\t* lib/fortran-torture.exp (fortran-torture-compile,\n+\tfortran-torture-execute): Ditto.\n+\n 2006-06-06  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \tPR target/27842"}, {"sha": "182711553ce2652b40ee3929a5927d5891964ace", "filename": "gcc/testsuite/lib/fortran-torture.exp", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6edf8a522985d30615ff15de817b1b47969dc5b9/gcc%2Ftestsuite%2Flib%2Ffortran-torture.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6edf8a522985d30615ff15de817b1b47969dc5b9/gcc%2Ftestsuite%2Flib%2Ffortran-torture.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ffortran-torture.exp?ref=6edf8a522985d30615ff15de817b1b47969dc5b9", "patch": "@@ -87,6 +87,12 @@ proc fortran-torture-compile { src option } {\n \treturn\n     }\n \n+    if [string match \"*internal compiler error*\" $comp_output] then {\n+\tgfortran_fail $testcase \"$option (internal compiler error)\"\n+\tcatch { remote_file build delete $output }\n+\treturn\n+    }\n+\n     # We shouldn't get these because of -w, but just in case.\n     if [string match \"*95*:*warning:*\" $comp_output] then {\n \twarning \"$testcase: (with warnings) $option\"\n@@ -204,6 +210,12 @@ proc fortran-torture-execute { src } {\n \t    catch { remote_file build delete $executable }\n \t    continue\n \t}\n+\n+\tif [string match \"*internal compiler error*\" $comp_output] then {\n+\t    gfortran_fail $testcase \"$option (internal compiler error)\"\n+\t    catch { remote_file build delete $executable }\n+\t    continue\n+\t}\n \t\n \t# We shouldn't get these because of -w, but just in case.\n \tif [string match \"*95*:*warning:*\" $comp_output] then {"}, {"sha": "e1e3b93be76f9e32cc75b72dd52866437b414bf8", "filename": "gcc/testsuite/lib/gcc-defs.exp", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6edf8a522985d30615ff15de817b1b47969dc5b9/gcc%2Ftestsuite%2Flib%2Fgcc-defs.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6edf8a522985d30615ff15de817b1b47969dc5b9/gcc%2Ftestsuite%2Flib%2Fgcc-defs.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-defs.exp?ref=6edf8a522985d30615ff15de817b1b47969dc5b9", "patch": "@@ -34,6 +34,11 @@ proc ${tool}_check_compile {testcase option objname gcc_output} {\n \treturn 0\n     }\n \n+    if [string match \"*internal compiler error*\" $gcc_output] then {\n+\t${tool}_fail $testcase \"$option (internal compiler error)\"\n+\treturn 0\n+    }\n+\n     # We shouldn't get these because of -w, but just in case.\n     if [string match \"*cc:*warning:*\" $gcc_output] then {\n \twarning \"$testcase: (with warnings) $option\""}, {"sha": "d790396ab94eb88a90e1b2c624a710dea10ea12a", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6edf8a522985d30615ff15de817b1b47969dc5b9/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6edf8a522985d30615ff15de817b1b47969dc5b9/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=6edf8a522985d30615ff15de817b1b47969dc5b9", "patch": "@@ -139,6 +139,14 @@ proc gcc-dg-test-1 { target_compile prog do_what extra_tool_flags } {\n \n     set comp_output [$target_compile \"$prog\" \"$output_file\" \"$compile_type\" $options]\n \n+    # Look for an internal compiler error, which sometimes masks the fact\n+    # that we didn't get an expected error message.  An ICE always fails,\n+    # there's no way to XFAIL it.\n+    if [string match \"*internal compiler error*\" $comp_output] {\n+\tupvar 2 name name\n+\tfail \"$name (internal compiler error)\"\n+    }\n+\n     if { $do_what == \"repo\" } {\n \tset object_file \"$output_file\"\n \tset output_file \"[file rootname [file tail $prog]].exe\""}]}