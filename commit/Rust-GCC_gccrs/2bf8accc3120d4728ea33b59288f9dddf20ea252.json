{"sha": "2bf8accc3120d4728ea33b59288f9dddf20ea252", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJmOGFjY2MzMTIwZDQ3MjhlYTMzYjU5Mjg4ZjlkZGRmMjBlYTI1Mg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-11-15T23:33:05Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-11-15T23:33:05Z"}, "message": "streambuf.tcc (__copy_streambufs): Provide a generic version of the function...\n\n2004-11-15  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/streambuf.tcc (__copy_streambufs): Provide\n\ta generic version of the function, not using the protected\n\tmembers of basic_streambuf.\n\t* include/std/std_streambuf.h (__copy_streambufs): Declare\n\toptimized specializations for char and wchar_t.\n\t* src/streambuf.cc: New file, define the latter.\n\t* src/Makefile.am: Add.\n\t* src/Makefile.in: Regenerate.\n\nFrom-SVN: r90701", "tree": {"sha": "7a00392d4a0be36be3ef61b330f89b5a5b7b50de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a00392d4a0be36be3ef61b330f89b5a5b7b50de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bf8accc3120d4728ea33b59288f9dddf20ea252", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bf8accc3120d4728ea33b59288f9dddf20ea252", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bf8accc3120d4728ea33b59288f9dddf20ea252", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bf8accc3120d4728ea33b59288f9dddf20ea252/comments", "author": null, "committer": null, "parents": [{"sha": "e09a5d6295e9aac34a8effb2afd5912fb99b3072", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e09a5d6295e9aac34a8effb2afd5912fb99b3072", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e09a5d6295e9aac34a8effb2afd5912fb99b3072"}], "stats": {"total": 158, "additions": 136, "deletions": 22}, "files": [{"sha": "d92c5187e80ea4f9dee4d1dc707ba97d27308f96", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf8accc3120d4728ea33b59288f9dddf20ea252/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf8accc3120d4728ea33b59288f9dddf20ea252/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2bf8accc3120d4728ea33b59288f9dddf20ea252", "patch": "@@ -1,3 +1,14 @@\n+2004-11-15  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/streambuf.tcc (__copy_streambufs): Provide\n+\ta generic version of the function, not using the protected\n+\tmembers of basic_streambuf.\n+\t* include/std/std_streambuf.h (__copy_streambufs): Declare\n+\toptimized specializations for char and wchar_t.\n+\t* src/streambuf.cc: New file, define the latter.\n+\t* src/Makefile.am: Add.\n+\t* src/Makefile.in: Regenerate.\n+\n 2004-11-15  Matthias Klose  <doko@debian.org>\n \n \t* docs/doxygen/run_doxygen: Add --build_alias option,"}, {"sha": "bc59edd47126e077aec348cb1dd7de748aef9dd4", "filename": "libstdc++-v3/include/bits/streambuf.tcc", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf8accc3120d4728ea33b59288f9dddf20ea252/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf8accc3120d4728ea33b59288f9dddf20ea252/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc?ref=2bf8accc3120d4728ea33b59288f9dddf20ea252", "patch": "@@ -1,6 +1,6 @@\n // Stream buffer classes -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -109,8 +109,7 @@ namespace std\n \n   // Conceivably, this could be used to implement buffer-to-buffer\n   // copies, if this was ever desired in an un-ambiguous way by the\n-  // standard. If so, then checks for __ios being zero would be\n-  // necessary.\n+  // standard.\n   template<typename _CharT, typename _Traits>\n     streamsize\n     __copy_streambufs(basic_streambuf<_CharT, _Traits>* __sbin,\n@@ -120,24 +119,11 @@ namespace std\n       typename _Traits::int_type __c = __sbin->sgetc();\n       while (!_Traits::eq_int_type(__c, _Traits::eof()))\n \t{\n-\t  const size_t __n = __sbin->egptr() - __sbin->gptr();\n-\t  if (__n > 1)\n-\t    {\n-\t      const size_t __wrote = __sbout->sputn(__sbin->gptr(), __n);\n-\t      __sbin->gbump(__wrote);\n-\t      __ret += __wrote;\n-\t      if (__wrote < __n)\n-\t\tbreak;\n-\t      __c = __sbin->underflow();\n-\t    }\n-\t  else\n-\t    {\n-\t      __c = __sbout->sputc(_Traits::to_char_type(__c));\n-\t      if (_Traits::eq_int_type(__c, _Traits::eof()))\n-\t\tbreak;\n-\t      ++__ret;\n-\t      __c = __sbin->snextc();\n-\t    }\n+\t  __c = __sbout->sputc(_Traits::to_char_type(__c));\n+\t  if (_Traits::eq_int_type(__c, _Traits::eof()))\n+\t    break;\n+\t  ++__ret;\n+\t  __c = __sbin->snextc();\n \t}\n       return __ret;\n     }"}, {"sha": "23da7b90a69ba67012c030f8a1afc52245f85a92", "filename": "libstdc++-v3/include/std/std_streambuf.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf8accc3120d4728ea33b59288f9dddf20ea252/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf8accc3120d4728ea33b59288f9dddf20ea252/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h?ref=2bf8accc3120d4728ea33b59288f9dddf20ea252", "patch": "@@ -775,6 +775,18 @@ namespace std\n       __streambuf_type& \n       operator=(const __streambuf_type&) { return *this; };\n     };\n+\n+  // Explicit specialization declarations, defined in src/streambuf.cc.\n+  template<>\n+    streamsize\n+    __copy_streambufs(basic_streambuf<char>* __sbin,\n+\t\t      basic_streambuf<char>* __sbout);\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  template<>\n+    streamsize\n+    __copy_streambufs(basic_streambuf<wchar_t>* __sbin,\n+\t\t      basic_streambuf<wchar_t>* __sbout);\n+#endif\n } // namespace std\n \n #ifndef _GLIBCXX_EXPORT_TEMPLATE"}, {"sha": "630f4dcd6d0e75118eb653de282dd04fa573f699", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf8accc3120d4728ea33b59288f9dddf20ea252/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf8accc3120d4728ea33b59288f9dddf20ea252/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=2bf8accc3120d4728ea33b59288f9dddf20ea252", "patch": "@@ -133,6 +133,7 @@ sources = \\\n \tostream-inst.cc \\\n \tsstream-inst.cc \\\n \tstreambuf-inst.cc \\\n+\tstreambuf.cc \\\n \tstring-inst.cc \\\n \tvalarray-inst.cc \\\n \twlocale-inst.cc \\"}, {"sha": "14a8b1e063367aa5d8d419fd10a9096b2ee43826", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf8accc3120d4728ea33b59288f9dddf20ea252/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf8accc3120d4728ea33b59288f9dddf20ea252/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=2bf8accc3120d4728ea33b59288f9dddf20ea252", "patch": "@@ -73,7 +73,7 @@ am__objects_3 = bitmap_allocator.lo pool_allocator.lo mt_allocator.lo \\\n \tconcept-inst.lo fstream-inst.lo ext-inst.lo io-inst.lo \\\n \tistream-inst.lo istream.lo locale-inst.lo locale-misc-inst.lo \\\n \tmisc-inst.lo ostream-inst.lo sstream-inst.lo streambuf-inst.lo \\\n-\tstring-inst.lo valarray-inst.lo wlocale-inst.lo \\\n+\tstreambuf.lo string-inst.lo valarray-inst.lo wlocale-inst.lo \\\n \twstring-inst.lo $(am__objects_1) $(am__objects_2)\n am_libstdc___la_OBJECTS = $(am__objects_3)\n libstdc___la_OBJECTS = $(am_libstdc___la_OBJECTS)\n@@ -343,6 +343,7 @@ sources = \\\n \tostream-inst.cc \\\n \tsstream-inst.cc \\\n \tstreambuf-inst.cc \\\n+\tstreambuf.cc \\\n \tstring-inst.cc \\\n \tvalarray-inst.cc \\\n \twlocale-inst.cc \\"}, {"sha": "2f9640950e036b17dde80b971976d221e9976ac8", "filename": "libstdc++-v3/src/streambuf.cc", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf8accc3120d4728ea33b59288f9dddf20ea252/libstdc%2B%2B-v3%2Fsrc%2Fstreambuf.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf8accc3120d4728ea33b59288f9dddf20ea252/libstdc%2B%2B-v3%2Fsrc%2Fstreambuf.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fstreambuf.cc?ref=2bf8accc3120d4728ea33b59288f9dddf20ea252", "patch": "@@ -0,0 +1,103 @@\n+// Stream buffer classes -*- C++ -*-\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 27.5  Stream buffers\n+//\n+\n+#include <streambuf>\n+\n+namespace std\n+{\n+  template<>\n+    streamsize\n+    __copy_streambufs(basic_streambuf<char>* __sbin,\n+\t\t      basic_streambuf<char>* __sbout)\n+    {\n+      typedef basic_streambuf<char>::traits_type traits_type;\n+      streamsize __ret = 0;\n+      traits_type::int_type __c = __sbin->sgetc();\n+      while (!traits_type::eq_int_type(__c, traits_type::eof()))\n+\t{\n+\t  const size_t __n = __sbin->egptr() - __sbin->gptr();\n+\t  if (__n > 1)\n+\t    {\n+\t      const size_t __wrote = __sbout->sputn(__sbin->gptr(), __n);\n+\t      __sbin->gbump(__wrote);\n+\t      __ret += __wrote;\n+\t      if (__wrote < __n)\n+\t\tbreak;\n+\t      __c = __sbin->underflow();\n+\t    }\n+\t  else\n+\t    {\n+\t      __c = __sbout->sputc(traits_type::to_char_type(__c));\n+\t      if (traits_type::eq_int_type(__c, traits_type::eof()))\n+\t\tbreak;\n+\t      ++__ret;\n+\t      __c = __sbin->snextc();\n+\t    }\n+\t}\n+      return __ret;\n+    }\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  template<>\n+    streamsize\n+    __copy_streambufs(basic_streambuf<wchar_t>* __sbin,\n+\t\t      basic_streambuf<wchar_t>* __sbout)\n+    {\n+      typedef basic_streambuf<wchar_t>::traits_type traits_type;\n+      streamsize __ret = 0;\n+      traits_type::int_type __c = __sbin->sgetc();\n+      while (!traits_type::eq_int_type(__c, traits_type::eof()))\n+\t{\n+\t  const size_t __n = __sbin->egptr() - __sbin->gptr();\n+\t  if (__n > 1)\n+\t    {\n+\t      const size_t __wrote = __sbout->sputn(__sbin->gptr(), __n);\n+\t      __sbin->gbump(__wrote);\n+\t      __ret += __wrote;\n+\t      if (__wrote < __n)\n+\t\tbreak;\n+\t      __c = __sbin->underflow();\n+\t    }\n+\t  else\n+\t    {\n+\t      __c = __sbout->sputc(traits_type::to_char_type(__c));\n+\t      if (traits_type::eq_int_type(__c, traits_type::eof()))\n+\t\tbreak;\n+\t      ++__ret;\n+\t      __c = __sbin->snextc();\n+\t    }\n+\t}\n+      return __ret;\n+    }\n+#endif\n+} // namespace std"}]}