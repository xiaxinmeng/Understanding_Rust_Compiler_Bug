{"sha": "e0c9fbb7638b1d558eab84e981b2347fbf97c59a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBjOWZiYjc2MzhiMWQ1NThlYWI4NGU5ODFiMjM0N2ZiZjk3YzU5YQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-10-25T17:45:44Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-10-25T17:45:44Z"}, "message": "c-decl.c (grokdeclarator): Move warning for qualified void return types with -pedantic to when...\n\n\t* c-decl.c (grokdeclarator): Move warning for qualified void\n\treturn types with -pedantic to when the function type is\n\tconstructed.  At -W, warn in general for qualified function return\n\ttypes, except for volatile void.\n\t* invoke.texi: Document this new warning at -W.\n\ntestsuite:\n\t* gcc.dg/qual-return-1.c, gcc.dg/qual-return-2.c: New tests.\n\nFrom-SVN: r37056", "tree": {"sha": "e053df2a3f9528985c3178bcc90e1d30062e9d4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e053df2a3f9528985c3178bcc90e1d30062e9d4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0c9fbb7638b1d558eab84e981b2347fbf97c59a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0c9fbb7638b1d558eab84e981b2347fbf97c59a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0c9fbb7638b1d558eab84e981b2347fbf97c59a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0c9fbb7638b1d558eab84e981b2347fbf97c59a/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb204271dd889c63b0427b4ab48dd04b3ded329c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb204271dd889c63b0427b4ab48dd04b3ded329c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb204271dd889c63b0427b4ab48dd04b3ded329c"}], "stats": {"total": 84, "additions": 77, "deletions": 7}, "files": [{"sha": "1e708d93ec6b354366365f0dffbbc47c92b60df4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c9fbb7638b1d558eab84e981b2347fbf97c59a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c9fbb7638b1d558eab84e981b2347fbf97c59a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0c9fbb7638b1d558eab84e981b2347fbf97c59a", "patch": "@@ -1,3 +1,11 @@\n+2000-10-25  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* c-decl.c (grokdeclarator): Move warning for qualified void\n+\treturn types with -pedantic to when the function type is\n+\tconstructed.  At -W, warn in general for qualified function return\n+\ttypes, except for volatile void.\n+\t* invoke.texi: Document this new warning at -W.\n+\n 2000-10-25  Neil Booth  <neilb@earthling.net>\n \n         * cpp.texi: Update with implementation-defined behavior and"}, {"sha": "51d76c5314225877d48549e545cfd0df721fd986", "filename": "gcc/c-decl.c", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c9fbb7638b1d558eab84e981b2347fbf97c59a/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c9fbb7638b1d558eab84e981b2347fbf97c59a/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=e0c9fbb7638b1d558eab84e981b2347fbf97c59a", "patch": "@@ -4577,7 +4577,26 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t  /* Type qualifiers before the return type of the function\n \t     qualify the return type, not the function type.  */\n \t  if (type_quals)\n-\t    type = c_build_qualified_type (type, type_quals);\n+\t    {\n+\t      /* Type qualifiers on a function return type are normally\n+\t\t permitted by the standard but have no effect, so give a\n+\t\t warning at -W.  Qualifiers on a void return type have\n+\t\t meaning as a GNU extension, and are banned on function\n+\t\t definitions in ISO C.  FIXME: strictly we shouldn't\n+\t\t pedwarn for qualified void return types except on function\n+\t\t definitions, but not doing so could lead to the undesirable\n+\t\t state of a \"volatile void\" function return type not being\n+\t\t warned about, and a use of the function being compiled\n+\t\t with GNU semantics, with no diagnostics under -pedantic.  */\n+\t      if (VOID_TYPE_P (type) && pedantic && !in_system_header)\n+\t\tpedwarn (\"ISO C forbids qualified void function return type\");\n+\t      else if (extra_warnings\n+\t\t       && !(VOID_TYPE_P (type)\n+\t\t\t    && type_quals == TYPE_QUAL_VOLATILE))\n+\t\twarning (\"type qualifiers ignored on function return type\");\n+\n+\t      type = c_build_qualified_type (type, type_quals);\n+\t    }\n \t  type_quals = TYPE_UNQUALIFIED;\n \n \t  type = build_function_type (type, arg_types);\n@@ -4854,12 +4873,6 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \tif (pedantic && type_quals && ! DECL_IN_SYSTEM_HEADER (decl))\n \t  pedwarn (\"ISO C forbids qualified function types\");\n \n-\tif (pedantic\n-\t    && VOID_TYPE_P (TREE_TYPE (TREE_TYPE (decl)))\n-\t    && TYPE_QUALS (TREE_TYPE (TREE_TYPE (decl)))\n-\t    && ! DECL_IN_SYSTEM_HEADER (decl))\n-\t  pedwarn (\"ISO C forbids qualified void function return type\");\n-\n \t/* GNU C interprets a `volatile void' return type to indicate\n \t   that the function does not return.  */\n \tif ((type_quals & TYPE_QUAL_VOLATILE)"}, {"sha": "bc05406219bc829da50423607875cbe3d6e6279b", "filename": "gcc/invoke.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c9fbb7638b1d558eab84e981b2347fbf97c59a/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c9fbb7638b1d558eab84e981b2347fbf97c59a/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=e0c9fbb7638b1d558eab84e981b2347fbf97c59a", "patch": "@@ -1816,6 +1816,13 @@ that of ordinary mathematical notation.\n Storage-class specifiers like @code{static} are not the first things in\n a declaration.  According to the C Standard, this usage is obsolescent.\n \n+@item\n+The return type of a function has a type qualifier such as @code{const}.\n+Such a type qualifier has no effect, since the value returned by a\n+function is not an lvalue.  (But don't warn about the GNU extension of\n+@code{volatile void} return types.  That extension will be warned about\n+if @samp{-pedantic} is specified.)\n+\n @item\n If @samp{-Wall} or @samp{-Wunused} is also specified, warn about unused\n arguments."}, {"sha": "3c75d3c2ddf94bb2c45e06298111a9d21f38e97e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c9fbb7638b1d558eab84e981b2347fbf97c59a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c9fbb7638b1d558eab84e981b2347fbf97c59a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e0c9fbb7638b1d558eab84e981b2347fbf97c59a", "patch": "@@ -1,3 +1,7 @@\n+2000-10-25  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.dg/qual-return-1.c, gcc.dg/qual-return-2.c: New tests.\n+\n 2000-10-25  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.c-torture/execute/20001024-1.c: New test."}, {"sha": "5cab75c93d79a3b631547fbc98fc75226f98aabe", "filename": "gcc/testsuite/gcc.dg/qual-return-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c9fbb7638b1d558eab84e981b2347fbf97c59a/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-return-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c9fbb7638b1d558eab84e981b2347fbf97c59a/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-return-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-return-1.c?ref=e0c9fbb7638b1d558eab84e981b2347fbf97c59a", "patch": "@@ -0,0 +1,24 @@\n+/* Test for warnings for qualified function return types.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -W\" } */\n+\n+/* Qualifying a function return type makes no sense.  */\n+\n+const int int_fn (void); /* { dg-warning \"qualifiers\" \"int decl\" } */\n+const int (*int_ptr) (void); /* { dg-warning \"qualifiers\" \"int ptr\" } */\n+const int int_fn2 (void) { return 0; } /* { dg-warning \"qualifiers\" \"int defn\" } */\n+\n+const void void_fn (void); /* { dg-warning \"qualifiers\" \"void decl\" } */\n+const void (*void_ptr) (void); /* { dg-warning \"qualifiers\" \"void ptr\" } */\n+const void void_fn2 (void) { } /* { dg-warning \"qualifiers\" \"void defn\" } */\n+\n+/* \"volatile void\" is a GNU extension, so only warn at -pedantic.  */\n+\n+volatile void vvoid_fn (void);\n+volatile void (*vvoid_ptr) (void);\n+volatile void vvoid_fn2 (void) { }\n+\n+int *restrict ip_fn (void); /* { dg-warning \"qualifiers\" \"restrict decl\" } */\n+int *restrict (*ip_ptr) (void); /* { dg-warning \"qualifiers\" \"restrict ptr\" } */\n+int *restrict ip_fn2 (void) { return (int *)0; }; /* { dg-warning \"qualifiers\" \"restrict defn\" } */"}, {"sha": "272787ee7c27a9807def63795f4e96205171db68", "filename": "gcc/testsuite/gcc.dg/qual-return-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c9fbb7638b1d558eab84e981b2347fbf97c59a/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-return-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c9fbb7638b1d558eab84e981b2347fbf97c59a/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-return-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-return-2.c?ref=e0c9fbb7638b1d558eab84e981b2347fbf97c59a", "patch": "@@ -0,0 +1,14 @@\n+/* Test for warnings for qualified function return types.  -pedantic test.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-pedantic\" } */\n+\n+/* Qualifying a function return type makes no sense.  */\n+\n+/* \"volatile void\" is a GNU extension, so only warn at -pedantic.\n+   Strictly, the first two of these should warn only if the function is\n+   somewhere used or defined.  */\n+\n+volatile void vvoid_fn (void); /* { dg-warning \"qualified\" \"volatile decl\" } */\n+volatile void (*vvoid_ptr) (void); /* { dg-warning \"qualified\" \"volatile ptr\" } */\n+volatile void vvoid_fn2 (void) { } /* { dg-warning \"qualified\" \"volatile defn\" } */"}]}