{"sha": "73c0f6ab2ba2c1181aa757e2478bdeedc85a7269", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNjMGY2YWIyYmEyYzExODFhYTc1N2UyNDc4YmRlZWRjODVhNzI2OQ==", "commit": {"author": {"name": "therealansh", "email": "tyagiansh23@hotmail.com", "date": "2021-03-14T06:01:21Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-03-15T10:15:15Z"}, "message": "refactored class TyCtx to TyVar", "tree": {"sha": "89612d4031322863b5efb26867e1b3ea1f926dc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89612d4031322863b5efb26867e1b3ea1f926dc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73c0f6ab2ba2c1181aa757e2478bdeedc85a7269", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73c0f6ab2ba2c1181aa757e2478bdeedc85a7269", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73c0f6ab2ba2c1181aa757e2478bdeedc85a7269", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73c0f6ab2ba2c1181aa757e2478bdeedc85a7269/comments", "author": {"login": "therealansh", "id": 57180880, "node_id": "MDQ6VXNlcjU3MTgwODgw", "avatar_url": "https://avatars.githubusercontent.com/u/57180880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/therealansh", "html_url": "https://github.com/therealansh", "followers_url": "https://api.github.com/users/therealansh/followers", "following_url": "https://api.github.com/users/therealansh/following{/other_user}", "gists_url": "https://api.github.com/users/therealansh/gists{/gist_id}", "starred_url": "https://api.github.com/users/therealansh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/therealansh/subscriptions", "organizations_url": "https://api.github.com/users/therealansh/orgs", "repos_url": "https://api.github.com/users/therealansh/repos", "events_url": "https://api.github.com/users/therealansh/events{/privacy}", "received_events_url": "https://api.github.com/users/therealansh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6255b77717e982ad3edb39a19111a075d25da93b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6255b77717e982ad3edb39a19111a075d25da93b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6255b77717e982ad3edb39a19111a075d25da93b"}], "stats": {"total": 70, "additions": 35, "deletions": 35}, "files": [{"sha": "322293c534894eb91662fc3d6ffa475925d80798", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73c0f6ab2ba2c1181aa757e2478bdeedc85a7269/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73c0f6ab2ba2c1181aa757e2478bdeedc85a7269/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=73c0f6ab2ba2c1181aa757e2478bdeedc85a7269", "patch": "@@ -129,11 +129,11 @@ class TypeCheckExpr : public TypeCheckBase\n \treturn;\n       }\n \n-    std::vector<TyTy::TyCtx> fields;\n+    std::vector<TyTy::TyVar> fields;\n     for (auto &elem : expr.get_tuple_elems ())\n       {\n \tauto field_ty = TypeCheckExpr::Resolve (elem.get (), false);\n-\tfields.push_back (TyTy::TyCtx (field_ty->get_ref ()));\n+\tfields.push_back (TyTy::TyVar (field_ty->get_ref ()));\n       }\n     infered = new TyTy::TupleType (expr.get_mappings ().get_hirid (), fields);\n   }\n@@ -463,7 +463,7 @@ class TypeCheckExpr : public TypeCheckBase\n \t  rust_assert (ok);\n \n \t  infered = new TyTy::ReferenceType (expr.get_mappings ().get_hirid (),\n-\t\t\t\t\t     TyTy::TyCtx (base->get_ref ()));\n+\t\t\t\t\t     TyTy::TyVar (base->get_ref ()));\n \t}\n \tbreak;\n \n@@ -665,7 +665,7 @@ class TypeCheckExpr : public TypeCheckBase\n \n     infered\n       = new TyTy::ArrayType (expr.get_mappings ().get_hirid (), num_elems,\n-\t\t\t     TyTy::TyCtx (infered_array_elems->get_ref ()));\n+\t\t\t     TyTy::TyVar (infered_array_elems->get_ref ()));\n   }\n \n   void visit (HIR::ArrayElemsValues &elems) override\n@@ -895,7 +895,7 @@ class TypeCheckExpr : public TypeCheckBase\n     // FIXME double_reference\n \n     infered = new TyTy::ReferenceType (expr.get_mappings ().get_hirid (),\n-\t\t\t\t       TyTy::TyCtx (resolved_base->get_ref ()));\n+\t\t\t\t       TyTy::TyVar (resolved_base->get_ref ()));\n   }\n \n   void visit (HIR::DereferenceExpr &expr) override"}, {"sha": "0ae24a4d71964923b73b7dfdb8f8c84c83ba1fb9", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73c0f6ab2ba2c1181aa757e2478bdeedc85a7269/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73c0f6ab2ba2c1181aa757e2478bdeedc85a7269/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h?ref=73c0f6ab2ba2c1181aa757e2478bdeedc85a7269", "patch": "@@ -113,17 +113,17 @@ class TypeCheckType : public TypeCheckBase\n \t  ? TypeCheckType::Resolve (fntype.get_return_type ().get ())\n \t  : new TyTy::UnitType (fntype.get_mappings ().get_hirid ());\n \n-    std::vector<TyTy::TyCtx> params;\n+    std::vector<TyTy::TyVar> params;\n     for (auto &param : fntype.get_function_params ())\n       {\n \tTyTy::BaseType *ptype\n \t  = TypeCheckType::Resolve (param.get_type ().get ());\n-\tparams.push_back (TyTy::TyCtx (ptype->get_ref ()));\n+\tparams.push_back (TyTy::TyVar (ptype->get_ref ()));\n       }\n \n     translated = new TyTy::FnPtr (fntype.get_mappings ().get_hirid (),\n \t\t\t\t  std::move (params),\n-\t\t\t\t  TyTy::TyCtx (return_type->get_ref ()));\n+\t\t\t\t  TyTy::TyVar (return_type->get_ref ()));\n   }\n \n   void visit (HIR::TupleType &tuple) override\n@@ -139,11 +139,11 @@ class TypeCheckType : public TypeCheckBase\n \treturn;\n       }\n \n-    std::vector<TyTy::TyCtx> fields;\n+    std::vector<TyTy::TyVar> fields;\n     for (auto &elem : tuple.get_elems ())\n       {\n \tauto field_ty = TypeCheckType::Resolve (elem.get ());\n-\tfields.push_back (TyTy::TyCtx (field_ty->get_ref ()));\n+\tfields.push_back (TyTy::TyVar (field_ty->get_ref ()));\n       }\n \n     translated\n@@ -245,15 +245,15 @@ class TypeCheckType : public TypeCheckBase\n \n     TyTy::BaseType *base = TypeCheckType::Resolve (type.get_element_type ());\n     translated = new TyTy::ArrayType (type.get_mappings ().get_hirid (),\n-\t\t\t\t      capacity, TyTy::TyCtx (base->get_ref ()));\n+\t\t\t\t      capacity, TyTy::TyVar (base->get_ref ()));\n   }\n \n   void visit (HIR::ReferenceType &type) override\n   {\n     TyTy::BaseType *base\n       = TypeCheckType::Resolve (type.get_base_type ().get ());\n     translated = new TyTy::ReferenceType (type.get_mappings ().get_hirid (),\n-\t\t\t\t\t  TyTy::TyCtx (base->get_ref ()));\n+\t\t\t\t\t  TyTy::TyVar (base->get_ref ()));\n   }\n \n   void visit (HIR::InferredType &type) override"}, {"sha": "86577b21a9d672f86165b635463bd5524db31e29", "filename": "gcc/rust/typecheck/rust-tyty-rules.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73c0f6ab2ba2c1181aa757e2478bdeedc85a7269/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73c0f6ab2ba2c1181aa757e2478bdeedc85a7269/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h?ref=73c0f6ab2ba2c1181aa757e2478bdeedc85a7269", "patch": "@@ -693,7 +693,7 @@ class ArrayRules : public BaseRules\n \n     resolved\n       = new ArrayType (type.get_ref (), type.get_ty_ref (),\n-\t\t       type.get_capacity (), TyCtx (base_resolved->get_ref ()));\n+\t\t       type.get_capacity (), TyVar (base_resolved->get_ref ()));\n   }\n \n private:\n@@ -888,7 +888,7 @@ class TupleRules : public BaseRules\n \treturn;\n       }\n \n-    std::vector<TyCtx> fields;\n+    std::vector<TyVar> fields;\n     for (size_t i = 0; i < base->num_fields (); i++)\n       {\n \tBaseType *bo = base->get_field (i);\n@@ -901,7 +901,7 @@ class TupleRules : public BaseRules\n \t    return;\n \t  }\n \n-\tfields.push_back (TyCtx (unified_ty->get_ref ()));\n+\tfields.push_back (TyVar (unified_ty->get_ref ()));\n       }\n \n     resolved\n@@ -1018,7 +1018,7 @@ class ReferenceRules : public BaseRules\n       }\n \n     resolved = new ReferenceType (base->get_ref (), base->get_ty_ref (),\n-\t\t\t\t  TyCtx (base_resolved->get_ref ()));\n+\t\t\t\t  TyVar (base_resolved->get_ref ()));\n   }\n \n private:"}, {"sha": "0a6c3d5655df42faa54e7fcf29cb4785f3516898", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73c0f6ab2ba2c1181aa757e2478bdeedc85a7269/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73c0f6ab2ba2c1181aa757e2478bdeedc85a7269/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=73c0f6ab2ba2c1181aa757e2478bdeedc85a7269", "patch": "@@ -27,7 +27,7 @@\n namespace Rust {\n namespace TyTy {\n \n-TyCtx::TyCtx (HirId ref) : ref (ref)\n+TyVar::TyVar (HirId ref) : ref (ref)\n {\n   // ensure this reference is defined within the context\n   auto context = Resolver::TypeCheckContext::get ();\n@@ -37,7 +37,7 @@ TyCtx::TyCtx (HirId ref) : ref (ref)\n }\n \n BaseType *\n-TyCtx::get_tyty () const\n+TyVar::get_tyty () const\n {\n   auto context = Resolver::TypeCheckContext::get ();\n   BaseType *lookup = nullptr;\n@@ -482,9 +482,9 @@ FnPtr::is_equal (const BaseType &other) const\n BaseType *\n FnPtr::clone ()\n {\n-  std::vector<TyCtx> cloned_params;\n+  std::vector<TyVar> cloned_params;\n   for (auto &p : params)\n-    cloned_params.push_back (TyCtx (p.get_ref ()));\n+    cloned_params.push_back (TyVar (p.get_ref ()));\n \n   return new FnPtr (get_ref (), get_ty_ref (), std::move (cloned_params),\n \t\t    result_type, get_combined_refs ());"}, {"sha": "1168807af80487186f82ccc49be047a900d33d9d", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73c0f6ab2ba2c1181aa757e2478bdeedc85a7269/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73c0f6ab2ba2c1181aa757e2478bdeedc85a7269/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=73c0f6ab2ba2c1181aa757e2478bdeedc85a7269", "patch": "@@ -117,10 +117,10 @@ class BaseType\n };\n \n // this is a placeholder for types that can change like inference variables\n-class TyCtx\n+class TyVar\n {\n public:\n-  explicit TyCtx (HirId ref);\n+  explicit TyVar (HirId ref);\n \n   HirId get_ref () const { return ref; }\n \n@@ -244,12 +244,12 @@ class StructFieldType\n class TupleType : public BaseType\n {\n public:\n-  TupleType (HirId ref, std::vector<TyCtx> fields,\n+  TupleType (HirId ref, std::vector<TyVar> fields,\n \t     std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ref, TypeKind::TUPLE, refs), fields (fields)\n   {}\n \n-  TupleType (HirId ref, HirId ty_ref, std::vector<TyCtx> fields,\n+  TupleType (HirId ref, HirId ty_ref, std::vector<TyVar> fields,\n \t     std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ty_ref, TypeKind::TUPLE, refs), fields (fields)\n   {}\n@@ -282,7 +282,7 @@ class TupleType : public BaseType\n   std::string get_name () const override final { return as_string (); }\n \n private:\n-  std::vector<TyCtx> fields;\n+  std::vector<TyVar> fields;\n };\n \n class ParamType : public BaseType\n@@ -563,13 +563,13 @@ class FnType : public BaseType\n class FnPtr : public BaseType\n {\n public:\n-  FnPtr (HirId ref, std::vector<TyCtx> params, TyCtx result_type,\n+  FnPtr (HirId ref, std::vector<TyVar> params, TyVar result_type,\n \t std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ref, TypeKind::FNPTR, refs), params (std::move (params)),\n       result_type (result_type)\n   {}\n \n-  FnPtr (HirId ref, HirId ty_ref, std::vector<TyCtx> params, TyCtx result_type,\n+  FnPtr (HirId ref, HirId ty_ref, std::vector<TyVar> params, TyVar result_type,\n \t std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ty_ref, TypeKind::FNPTR, refs), params (params),\n       result_type (result_type)\n@@ -603,20 +603,20 @@ class FnPtr : public BaseType\n   }\n \n private:\n-  std::vector<TyCtx> params;\n-  TyCtx result_type;\n+  std::vector<TyVar> params;\n+  TyVar result_type;\n };\n \n class ArrayType : public BaseType\n {\n public:\n-  ArrayType (HirId ref, size_t capacity, TyCtx base,\n+  ArrayType (HirId ref, size_t capacity, TyVar base,\n \t     std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ref, TypeKind::ARRAY, refs), capacity (capacity),\n       element_type (base)\n   {}\n \n-  ArrayType (HirId ref, HirId ty_ref, size_t capacity, TyCtx base,\n+  ArrayType (HirId ref, HirId ty_ref, size_t capacity, TyVar base,\n \t     std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ty_ref, TypeKind::ARRAY, refs), capacity (capacity),\n       element_type (base)\n@@ -640,7 +640,7 @@ class ArrayType : public BaseType\n \n private:\n   size_t capacity;\n-  TyCtx element_type;\n+  TyVar element_type;\n };\n \n class BoolType : public BaseType\n@@ -844,12 +844,12 @@ class CharType : public BaseType\n class ReferenceType : public BaseType\n {\n public:\n-  ReferenceType (HirId ref, TyCtx base,\n+  ReferenceType (HirId ref, TyVar base,\n \t\t std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ref, TypeKind::REF), base (base)\n   {}\n \n-  ReferenceType (HirId ref, HirId ty_ref, TyCtx base,\n+  ReferenceType (HirId ref, HirId ty_ref, TyVar base,\n \t\t std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ty_ref, TypeKind::REF), base (base)\n   {}\n@@ -869,7 +869,7 @@ class ReferenceType : public BaseType\n   BaseType *clone () final override;\n \n private:\n-  TyCtx base;\n+  TyVar base;\n };\n \n class StrType : public BaseType"}]}