{"sha": "6befd6b053f32de162090b6ee6316c6ac5bcaef0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJlZmQ2YjA1M2YzMmRlMTYyMDkwYjZlZTYzMTZjNmFjNWJjYWVmMA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-07-29T10:59:54Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-07-29T10:59:54Z"}, "message": "re PR tree-optimization/45034 (\"safe\" conversion from unsigned to signed char gives broken code)\n\n2010-07-29  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/45034\n\t* convert.c (convert_to_integer): Always use an unsigned\n\ttype for narrowed negate and bitwise not.\n\n\t* gcc.c-torture/execute/pr45034.c: New testcase.\n\nFrom-SVN: r162673", "tree": {"sha": "6a70422b360d8f8cb89bc1cd1f4fee1cfffc246a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a70422b360d8f8cb89bc1cd1f4fee1cfffc246a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6befd6b053f32de162090b6ee6316c6ac5bcaef0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6befd6b053f32de162090b6ee6316c6ac5bcaef0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6befd6b053f32de162090b6ee6316c6ac5bcaef0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6befd6b053f32de162090b6ee6316c6ac5bcaef0/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6cfcf3eda65ef5ea3f3a5f3e16bb89b48cef1dce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cfcf3eda65ef5ea3f3a5f3e16bb89b48cef1dce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cfcf3eda65ef5ea3f3a5f3e16bb89b48cef1dce"}], "stats": {"total": 65, "additions": 57, "deletions": 8}, "files": [{"sha": "5c066b524b4c4e7979f895f7b958fb93230b4ed0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6befd6b053f32de162090b6ee6316c6ac5bcaef0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6befd6b053f32de162090b6ee6316c6ac5bcaef0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6befd6b053f32de162090b6ee6316c6ac5bcaef0", "patch": "@@ -1,3 +1,9 @@\n+2010-07-29  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/45034\n+\t* convert.c (convert_to_integer): Always use an unsigned\n+\ttype for narrowed negate and bitwise not.\n+\n 2010-07-29  Ira Rosen  <irar@il.ibm.com>\n \n \t* tree-vect-loop.c (vect_create_epilog_for_reduction): Switch"}, {"sha": "57eedbf538826968675cfd5954f9fac9dab3a3f2", "filename": "gcc/convert.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6befd6b053f32de162090b6ee6316c6ac5bcaef0/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6befd6b053f32de162090b6ee6316c6ac5bcaef0/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=6befd6b053f32de162090b6ee6316c6ac5bcaef0", "patch": "@@ -799,14 +799,7 @@ convert_to_integer (tree type, tree expr)\n \t  /* This is not correct for ABS_EXPR,\n \t     since we must test the sign before truncation.  */\n \t  {\n-\t    tree typex;\n-\n-\t    /* Don't do unsigned arithmetic where signed was wanted,\n-\t       or vice versa.  */\n-\t    if (TYPE_UNSIGNED (TREE_TYPE (expr)))\n-\t      typex = unsigned_type_for (type);\n-\t    else\n-\t      typex = signed_type_for (type);\n+\t    tree typex = unsigned_type_for (type);\n \t    return convert (type,\n \t\t\t    fold_build1 (ex_form, typex,\n \t\t\t\t\t convert (typex,"}, {"sha": "a41b82026317e1a91fc38e6363832e515596fb30", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6befd6b053f32de162090b6ee6316c6ac5bcaef0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6befd6b053f32de162090b6ee6316c6ac5bcaef0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6befd6b053f32de162090b6ee6316c6ac5bcaef0", "patch": "@@ -1,3 +1,8 @@\n+2010-07-29  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/45034\n+\t* gcc.c-torture/execute/pr45034.c: New testcase.\n+\n 2010-07-28  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/45096"}, {"sha": "2d86f309cebc4405d0412d043eaa31e00240896c", "filename": "gcc/testsuite/gcc.c-torture/execute/pr45034.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6befd6b053f32de162090b6ee6316c6ac5bcaef0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr45034.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6befd6b053f32de162090b6ee6316c6ac5bcaef0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr45034.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr45034.c?ref=6befd6b053f32de162090b6ee6316c6ac5bcaef0", "patch": "@@ -0,0 +1,45 @@\n+extern void abort (void);\n+static void fixnum_neg(signed char x, signed char *py, int *pv)\n+{\n+  unsigned char ux, uy;\n+\n+  ux = (unsigned char)x;\n+  uy = -ux;\n+  *py = (uy <= 127) ? (signed char)uy : (-(signed char)(255 - uy) - 1);\n+  *pv = (x == -128) ? 1 : 0;\n+}\n+\n+void __attribute__((noinline)) foo(int x, int y, int v)\n+{\n+  if (y < -128 || y > 127)\n+    abort();\n+}\n+\n+int test_neg(void)\n+{\n+  signed char x, y;\n+  int v, err;\n+\n+  err = 0;\n+  x = -128;\n+  for (;;) {\n+      fixnum_neg(x, &y, &v);\n+      foo((int)x, (int)y, v);\n+      if ((v && x != -128) || (!v && x == -128))\n+\t++err;\n+      if (x == 127)\n+\tbreak;\n+      ++x;\n+  }\n+  return err;\n+}\n+\n+int main(void)\n+{\n+  if (sizeof (char) != 1)\n+    return 0;\n+  if (test_neg() != 0)\n+    abort();\n+  return 0;\n+}\n+"}]}