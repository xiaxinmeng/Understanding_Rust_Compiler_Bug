{"sha": "c468587ac23c889abfa67ce8979e8baedcb349e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ2ODU4N2FjMjNjODg5YWJmYTY3Y2U4OTc5ZThiYWVkY2IzNDllOQ==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2014-07-16T10:33:27Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2014-07-16T10:33:27Z"}, "message": "Support location tracking for built-in macro tokens\n\nWhen a built-in macro is expanded, the location of the token in the\nepansion list is the location of the expansion point of the built-in\nmacro.\n\nThis patch creates a virtual location for that token instead,\neffectively tracking locations of tokens resulting from built-in macro\ntokens.\n\nlibcpp/\n\t* include/line-map.h (line_maps::builtin_location): New data\n\tmember.\n\t(line_map_init): Add a new parameter to initialize the new\n\tline_maps::builtin_location data member.\n\t* line-map.c (linemap_init): Initialize the\n\tline_maps::builtin_location data member.\n\t* macro.c (builtin_macro): Create a macro map and track the token\n\tresulting from the expansion of a built-in macro.\ngcc/\n\t* input.h (is_location_from_builtin_token): New function\n\tdeclaration.\n\t* input.c (is_location_from_builtin_token): New function\n\tdefinition.\n\t* toplev.c (general_init): Tell libcpp what the pre-defined\n\tspelling location for built-in tokens is.\n\nSigned-off-by: Dodji Seketeli <dodji@redhat.com>\n\nFrom-SVN: r212637", "tree": {"sha": "2b9dadc35640ecec96428e5e73e233c98df2477d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b9dadc35640ecec96428e5e73e233c98df2477d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c468587ac23c889abfa67ce8979e8baedcb349e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c468587ac23c889abfa67ce8979e8baedcb349e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c468587ac23c889abfa67ce8979e8baedcb349e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c468587ac23c889abfa67ce8979e8baedcb349e9/comments", "author": null, "committer": null, "parents": [{"sha": "185b22783adf5355e8ba4701a1c090b27a17e313", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/185b22783adf5355e8ba4701a1c090b27a17e313", "html_url": "https://github.com/Rust-GCC/gccrs/commit/185b22783adf5355e8ba4701a1c090b27a17e313"}], "stats": {"total": 80, "additions": 75, "deletions": 5}, "files": [{"sha": "6680787ba4189b626933b3b1c7ea11a58f914572", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c468587ac23c889abfa67ce8979e8baedcb349e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c468587ac23c889abfa67ce8979e8baedcb349e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c468587ac23c889abfa67ce8979e8baedcb349e9", "patch": "@@ -1,3 +1,13 @@\n+2014-07-16  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tSupport location tracking for built-in macro tokens\n+\t* input.h (is_location_from_builtin_token): New function\n+\tdeclaration.\n+\t* input.c (is_location_from_builtin_token): New function\n+\tdefinition.\n+\t* toplev.c (general_init): Tell libcpp what the pre-defined\n+\tspelling location for built-in tokens is.\n+\n 2014-07-16  Jakub Jelinek  <jakub@redhat.com>\n \n \t* omp-low.c (create_omp_child_function): Don't set DECL_NAMELESS"}, {"sha": "f3fd0e9d755b8047393ce4b5a4a099e76255734b", "filename": "gcc/input.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c468587ac23c889abfa67ce8979e8baedcb349e9/gcc%2Finput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c468587ac23c889abfa67ce8979e8baedcb349e9/gcc%2Finput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.c?ref=c468587ac23c889abfa67ce8979e8baedcb349e9", "patch": "@@ -713,6 +713,22 @@ location_get_source_line (expanded_location xloc,\n   return read ? buffer : NULL;\n }\n \n+/* Test if the location originates from the spelling location of a\n+   builtin-tokens.  That is, return TRUE if LOC is a (possibly\n+   virtual) location of a built-in token that appears in the expansion\n+   list of a macro.  Please note that this function also works on\n+   tokens that result from built-in tokens.  For instance, the\n+   function would return true if passed a token \"4\" that is the result\n+   of the expansion of the built-in __LINE__ macro.  */\n+bool\n+is_location_from_builtin_token (source_location loc)\n+{\n+  const line_map *map = NULL;\n+  loc = linemap_resolve_location (line_table, loc,\n+\t\t\t\t  LRK_SPELLING_LOCATION, &map);\n+  return loc == BUILTINS_LOCATION;\n+}\n+\n /* Expand the source location LOC into a human readable location.  If\n    LOC is virtual, it resolves to the expansion point of the involved\n    macro.  If LOC resolves to a builtin location, the file name of the"}, {"sha": "1def793ae30fc14a0fa5dd1c6dfa30ab9ef428ca", "filename": "gcc/input.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c468587ac23c889abfa67ce8979e8baedcb349e9/gcc%2Finput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c468587ac23c889abfa67ce8979e8baedcb349e9/gcc%2Finput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.h?ref=c468587ac23c889abfa67ce8979e8baedcb349e9", "patch": "@@ -36,6 +36,7 @@ extern GTY(()) struct line_maps *line_table;\n extern char builtins_location_check[(BUILTINS_LOCATION\n \t\t\t\t     < RESERVED_LOCATION_COUNT) ? 1 : -1];\n \n+extern bool is_location_from_builtin_token (source_location);\n extern expanded_location expand_location (source_location);\n extern const char *location_get_source_line (expanded_location xloc,\n \t\t\t\t\t     int *line_size);"}, {"sha": "9e747e50b7ec39f6f07b100bf2093869a60025be", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c468587ac23c889abfa67ce8979e8baedcb349e9/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c468587ac23c889abfa67ce8979e8baedcb349e9/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=c468587ac23c889abfa67ce8979e8baedcb349e9", "patch": "@@ -1157,7 +1157,7 @@ general_init (const char *argv0)\n   init_ggc ();\n   init_stringpool ();\n   line_table = ggc_alloc<line_maps> ();\n-  linemap_init (line_table);\n+  linemap_init (line_table, BUILTINS_LOCATION);\n   line_table->reallocator = realloc_for_line_map;\n   line_table->round_alloc_size = ggc_round_alloc_size;\n   init_ttree ();"}, {"sha": "7a6b8e3a5cc18b1a7ab07f807bd8a0a7802381ec", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c468587ac23c889abfa67ce8979e8baedcb349e9/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c468587ac23c889abfa67ce8979e8baedcb349e9/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=c468587ac23c889abfa67ce8979e8baedcb349e9", "patch": "@@ -1,3 +1,15 @@\n+2014-07-16  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tSupport location tracking for built-in macro tokens\n+\t* include/line-map.h (line_maps::builtin_location): New data\n+\tmember.\n+\t(line_map_init): Add a new parameter to initialize the new\n+\tline_maps::builtin_location data member.\n+\t* line-map.c (linemap_init): Initialize the\n+\tline_maps::builtin_location data member.\n+\t* macro.c (builtin_macro): Create a macro map and track the token\n+\tresulting from the expansion of a built-in macro.\n+\n 2014-07-10  Edward Smith-Rowland  <3dw4rd@verizon.net>\n \t    Jonathan Wakely  <jwakely@redhat.com>\n "}, {"sha": "0c8f588abc51ad640ce95861d98438f312abd74c", "filename": "libcpp/include/line-map.h", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c468587ac23c889abfa67ce8979e8baedcb349e9/libcpp%2Finclude%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c468587ac23c889abfa67ce8979e8baedcb349e9/libcpp%2Finclude%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fline-map.h?ref=c468587ac23c889abfa67ce8979e8baedcb349e9", "patch": "@@ -315,6 +315,10 @@ struct GTY(()) line_maps {\n   line_map_round_alloc_size_func round_alloc_size;\n \n   struct location_adhoc_data_map location_adhoc_data_map;\n+\n+  /* The special location value that is used as spelling location for\n+     built-in tokens.  */\n+  source_location builtin_location;\n };\n \n /* Returns the pointer to the memory region where information about\n@@ -447,8 +451,12 @@ extern source_location get_location_from_adhoc_loc (struct line_maps *,\n \n extern void rebuild_location_adhoc_htab (struct line_maps *);\n \n-/* Initialize a line map set.  */\n-extern void linemap_init (struct line_maps *);\n+/* Initialize a line map set.  SET is the line map set to initialize\n+   and BUILTIN_LOCATION is the special location value to be used as\n+   spelling location for built-in tokens.  This BUILTIN_LOCATION has\n+   to be strictly less than RESERVED_LOCATION_COUNT.  */\n+extern void linemap_init (struct line_maps *set,\n+\t\t\t  source_location builtin_location);\n \n /* Check for and warn about line_maps entered but not exited.  */\n "}, {"sha": "a4055c29c740c8ac7bc7b42cca8338bc29d2f94b", "filename": "libcpp/line-map.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c468587ac23c889abfa67ce8979e8baedcb349e9/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c468587ac23c889abfa67ce8979e8baedcb349e9/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=c468587ac23c889abfa67ce8979e8baedcb349e9", "patch": "@@ -175,13 +175,15 @@ location_adhoc_data_fini (struct line_maps *set)\n /* Initialize a line map set.  */\n \n void\n-linemap_init (struct line_maps *set)\n+linemap_init (struct line_maps *set,\n+\t      source_location builtin_location)\n {\n   memset (set, 0, sizeof (struct line_maps));\n   set->highest_location = RESERVED_LOCATION_COUNT - 1;\n   set->highest_line = RESERVED_LOCATION_COUNT - 1;\n   set->location_adhoc_data_map.htab =\n       htab_create (100, location_adhoc_data_hash, location_adhoc_data_eq, NULL);\n+  set->builtin_location = builtin_location;\n }\n \n /* Check for and warn about line_maps entered but not exited.  */"}, {"sha": "3b8fa4069352918166dc1cbf434d1de5028ea677", "filename": "libcpp/macro.c", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c468587ac23c889abfa67ce8979e8baedcb349e9/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c468587ac23c889abfa67ce8979e8baedcb349e9/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=c468587ac23c889abfa67ce8979e8baedcb349e9", "patch": "@@ -428,7 +428,28 @@ builtin_macro (cpp_reader *pfile, cpp_hashnode *node)\n \n   /* Set pfile->cur_token as required by _cpp_lex_direct.  */\n   pfile->cur_token = _cpp_temp_token (pfile);\n-  _cpp_push_token_context (pfile, NULL, _cpp_lex_direct (pfile), 1);\n+  cpp_token *token = _cpp_lex_direct (pfile);\n+  if (pfile->context->tokens_kind == TOKENS_KIND_EXTENDED)\n+    {\n+      /* We are tracking tokens resulting from macro expansion.\n+\t Create a macro line map and generate a virtual location for\n+\t the token resulting from the expansion of the built-in\n+\t macro.  */\n+      source_location *virt_locs = NULL;\n+      _cpp_buff *token_buf = tokens_buff_new (pfile, 1, &virt_locs);\n+      const line_map * map =\n+\tlinemap_enter_macro (pfile->line_table, node,\n+\t\t\t\t\t    token->src_loc, 1);\n+      tokens_buff_add_token (token_buf, virt_locs, token,\n+\t\t\t     pfile->line_table->builtin_location,\n+\t\t\t     pfile->line_table->builtin_location,\n+\t\t\t    map, /*macro_token_index=*/0);\n+      push_extended_tokens_context (pfile, node, token_buf, virt_locs,\n+\t\t\t\t    (const cpp_token **)token_buf->base,\n+\t\t\t\t    1);\n+    }\n+  else\n+    _cpp_push_token_context (pfile, NULL, token, 1);\n   if (pfile->buffer->cur != pfile->buffer->rlimit)\n     cpp_error (pfile, CPP_DL_ICE, \"invalid built-in macro \\\"%s\\\"\",\n \t       NODE_NAME (node));"}]}