{"sha": "e99d6592219f26c6cd2c06daf7884bef466ff034", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk5ZDY1OTIyMTlmMjZjNmNkMmMwNmRhZjc4ODRiZWY0NjZmZjAzNA==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1997-02-07T21:01:43Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1997-02-07T21:01:43Z"}, "message": "pa.h (RETURN_ADDR_RTX): Fix to ignore export stubs.\n\n\t* pa.h (RETURN_ADDR_RTX): Fix to ignore export stubs.\n\t* pa.c (return_addr_rtx): Define.\n\nFrom-SVN: r13621", "tree": {"sha": "d7b993e292b76d4082c52518b49aafc1d1efa236", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7b993e292b76d4082c52518b49aafc1d1efa236"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e99d6592219f26c6cd2c06daf7884bef466ff034", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e99d6592219f26c6cd2c06daf7884bef466ff034", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e99d6592219f26c6cd2c06daf7884bef466ff034", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e99d6592219f26c6cd2c06daf7884bef466ff034/comments", "author": null, "committer": null, "parents": [{"sha": "3bcf86ebf5cbf743c0110f5af7533d7e0af281e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bcf86ebf5cbf743c0110f5af7533d7e0af281e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bcf86ebf5cbf743c0110f5af7533d7e0af281e0"}], "stats": {"total": 96, "additions": 87, "deletions": 9}, "files": [{"sha": "1d9100498cc207061b20edae9629a799f2272414", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e99d6592219f26c6cd2c06daf7884bef466ff034/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e99d6592219f26c6cd2c06daf7884bef466ff034/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=e99d6592219f26c6cd2c06daf7884bef466ff034", "patch": "@@ -3034,6 +3034,83 @@ hppa_expand_epilogue ()\n \t\t    - actual_fsize);\n }\n \n+/* Fetch the return address for the frame COUNT steps up from\n+   the current frame, after the prologue.  FRAMEADDR is the\n+   frame pointer of the COUNT frame.\n+\n+   We want to ignore any export stub remnants here.  */\n+\n+rtx\n+return_addr_rtx (count, frameaddr)\n+     int count;\n+     rtx frameaddr;\n+{\n+  rtx label;\n+  rtx saved_rp;\n+  rtx ins;\n+\n+  saved_rp = gen_reg_rtx (Pmode);\n+\n+  /* First, we start off with the normal return address pointer from\n+     -20[frameaddr].  */\n+\n+  emit_move_insn (saved_rp, plus_constant (frameaddr, -5 * UNITS_PER_WORD));\n+\n+  /* Get pointer to the instruction stream.  We have to mask out the\n+     privilege level from the two low order bits of the return address\n+     pointer here so that ins will point to the start of the first\n+     instruction that would have been executed if we returned.  */\n+  ins = copy_to_reg (gen_rtx (AND, Pmode,\n+\t\t\t      copy_to_reg (gen_rtx (MEM, Pmode, saved_rp)),\n+\t\t\t      MASK_RETURN_ADDR));\n+  label = gen_label_rtx ();\n+\n+  /* Check the instruction stream at the normal return address for the\n+     export stub:\n+\n+\t0x4bc23fd1 | stub+8:   ldw -18(sr0,sp),rp\n+\t0x004010a1 | stub+12:  ldsid (sr0,rp),r1\n+\t0x00011820 | stub+16:  mtsp r1,sr0\n+\t0xe0400002 | stub+20:  be,n 0(sr0,rp)\n+\n+     If it is an export stub, than our return address is really in\n+     -24[frameaddr].  */\n+\n+  emit_cmp_insn (gen_rtx (MEM, SImode, ins),\n+\t\t GEN_INT (0x4bc23fd1),\n+\t\t NE, NULL_RTX, SImode, 1, 0);\n+  emit_jump_insn (gen_bne (label));\n+\n+  emit_cmp_insn (gen_rtx (MEM, SImode, plus_constant (ins, 4)),\n+\t\t GEN_INT (0x004010a1),\n+\t\t NE, NULL_RTX, SImode, 1, 0);\n+  emit_jump_insn (gen_bne (label));\n+\n+  emit_cmp_insn (gen_rtx (MEM, SImode, plus_constant (ins, 8)),\n+\t\t GEN_INT (0x00011820),\n+\t\t NE, NULL_RTX, SImode, 1, 0);\n+  emit_jump_insn (gen_bne (label));\n+\n+  emit_cmp_insn (gen_rtx (MEM, SImode, plus_constant (ins, 12)),\n+\t\t GEN_INT (0xe0400002),\n+\t\t NE, NULL_RTX, SImode, 1, 0);\n+\n+  /* If there is no export stub then just use our initial guess of\n+     -20[frameaddr].  */\n+\n+  emit_jump_insn (gen_bne (label));\n+\n+  /* Here we know that our return address pointer points to an export\n+     stub.  We don't want to return the address of the export stub,\n+     but rather the return address that leads back into user code.\n+     That return address is stored at -24[frameaddr].  */\n+\n+  emit_move_insn (saved_rp, plus_constant (frameaddr, -6 * UNITS_PER_WORD));\n+\n+  emit_label (label);\n+  return gen_rtx (MEM, Pmode, memory_address (Pmode, saved_rp));\n+}\n+\n /* This is only valid once reload has completed because it depends on\n    knowing exactly how much (if any) frame there is and...\n "}, {"sha": "e6995b353be064e2bcc80f3e460703d4fc4e8762", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e99d6592219f26c6cd2c06daf7884bef466ff034/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e99d6592219f26c6cd2c06daf7884bef466ff034/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=e99d6592219f26c6cd2c06daf7884bef466ff034", "patch": "@@ -2357,6 +2357,10 @@ extern struct rtx_def *legitimize_pic_address ();\n extern struct rtx_def *gen_cmp_fp ();\n extern void hppa_encode_label ();\n \n+/* Declare functions defined in pa.c and used in templates.  */\n+\n+extern struct rtx_def *return_addr_rtx ();\n+\n /* We want __gcc_plt_call to appear in every program built by\n    gcc, so we make a reference to it out of __main.\n    We use the asm statement to fool the optimizer into not\n@@ -2373,17 +2377,14 @@ do {\t\t\t\t\t\t\\\n     (*p++) ();\t\t\t\t\t\\\n } while (0)\n \n-/* The current return address is in [%sp-20].  */\n-#define RETURN_ADDR_RTX(COUNT, FRAME)\t\t\t\t\t\t\\\n-  ((COUNT == 0)\t\t\t\t\t\t\t\t\t\\\n-   ? gen_rtx (MEM, Pmode,\t\t\t\t\t\t\t\\\n-\t      memory_address (Pmode, plus_constant (FRAME,\t\t\t\\\n-\t\t\t\t\t\t    -5 * UNITS_PER_WORD)))\t\\\n-   : (rtx) 0)\n+/* Find the return address associated with the frame given by\n+   FRAMEADDR.  */\n+#define RETURN_ADDR_RTX(COUNT, FRAMEADDR)\t\t\t\t \\\n+  (return_addr_rtx (COUNT, FRAMEADDR))\n \n /* Used to mask out junk bits from the return address, such as\n    processor state, interrupt status, condition codes and the like.  */\n-#define MASK_RETURN_ADDR \\\n-  /* The priviledge level is in the two low order bits, mask em out\t\\\n+#define MASK_RETURN_ADDR\t\t\t\t\t\t\\\n+  /* The privilege level is in the two low order bits, mask em out\t\\\n      of the return address.  */\t\t\t\t\t\t\\\n   (GEN_INT (0xfffffffc))"}]}