{"sha": "02ad93a608ce2bbce6d38bceda266194357586ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJhZDkzYTYwOGNlMmJiY2U2ZDM4YmNlZGEyNjYxOTQzNTc1ODZhZQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2002-01-25T07:06:06Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-01-25T07:06:06Z"}, "message": "Shape.java: Merged with Classpath.\n\n\t* java/awt/Shape.java: Merged with Classpath.\n\t* java/awt/Scrollbar.java: Merged with Classpath.\n\nFrom-SVN: r49208", "tree": {"sha": "43978f9dab7620e6670df27371dc72f214dbf56f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43978f9dab7620e6670df27371dc72f214dbf56f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02ad93a608ce2bbce6d38bceda266194357586ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02ad93a608ce2bbce6d38bceda266194357586ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02ad93a608ce2bbce6d38bceda266194357586ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02ad93a608ce2bbce6d38bceda266194357586ae/comments", "author": null, "committer": null, "parents": [{"sha": "17af0664ba1989f112c89a697b8dd519be1e16da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17af0664ba1989f112c89a697b8dd519be1e16da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17af0664ba1989f112c89a697b8dd519be1e16da"}], "stats": {"total": 968, "additions": 731, "deletions": 237}, "files": [{"sha": "e8ab774e63a1d8d78bb7069d42544c547ef896ca", "filename": "libjava/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ad93a608ce2bbce6d38bceda266194357586ae/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ad93a608ce2bbce6d38bceda266194357586ae/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=02ad93a608ce2bbce6d38bceda266194357586ae", "patch": "@@ -1,5 +1,8 @@\n 2002-01-24  Tom Tromey  <tromey@redhat.com>\n \n+\t* java/awt/Shape.java: Merged with Classpath.\n+\t* java/awt/Scrollbar.java: Merged with Classpath.\n+\n \t* java/awt/Container.java (addNotify): Unconditionally call\n \taddNotifyContainerChildren and superclass addNotify.\n "}, {"sha": "d8915b7f84267cf834d7d62ecf840ac83934f76e", "filename": "libjava/java/awt/Scrollbar.java", "status": "modified", "additions": 674, "deletions": 225, "changes": 899, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ad93a608ce2bbce6d38bceda266194357586ae/libjava%2Fjava%2Fawt%2FScrollbar.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ad93a608ce2bbce6d38bceda266194357586ae/libjava%2Fjava%2Fawt%2FScrollbar.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FScrollbar.java?ref=02ad93a608ce2bbce6d38bceda266194357586ae", "patch": "@@ -1,235 +1,684 @@\n-/* Copyright (C) 2000, 2001  Free Software Foundation\n+/* Scrollbar.java -- AWT Scrollbar widget\n+   Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n \n-   This file is part of libjava.\n-\n-This software is copyrighted work licensed under the terms of the\n-Libjava License.  Please consult the file \"LIBJAVA_LICENSE\" for\n-details.  */\n \n package java.awt;\n-import java.awt.event.*;\n+\n import java.awt.peer.ScrollbarPeer;\n import java.awt.peer.ComponentPeer;\n \n+import java.awt.event.AdjustmentListener;\n+import java.awt.event.AdjustmentEvent;\n+\n+/**\n+  * This class implements a scrollbar widget.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Tom Tromey <tromey@cygnus.com>\n+  */\n+public class Scrollbar extends Component implements Adjustable,\n+                                                    java.io.Serializable\n+{\n+\n+// FIXME: Serialization readObject/writeObject\n+\n+/*\n+ * Static Variables\n+ */\n+\n+/**\n+  * Constant indicating that a scrollbar is horizontal.\n+  */\n+public static final int HORIZONTAL = 0;\n+\n+/**\n+  * Constant indicating that a scrollbar is vertical.\n+  */\n+public static final int VERTICAL = 1;\n+\n+// Serialization Constant\n+private static final long serialVersionUID = 8451667562882310543L;\n+\n+/*************************************************************************/\n+\n+/**\n+  * @serial The amount by which the value of the scrollbar is changed\n+  * when incrementing in line mode.\n+  */\n+private int lineIncrement;\n+\n+/**\n+  * @serial The amount by which the value of the scrollbar is changed\n+  * when incrementing in page mode.\n+  */\n+private int pageIncrement;\n+\n+/**\n+  * @serial The maximum value for this scrollbar\n+  */\n+private int maximum;\n+\n+/**\n+  * @serial The minimum value for this scrollbar\n+  */\n+private int minimum;\n+\n /**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date April 12, 2000\n+  * @serial The orientation of this scrollbar, which will be either\n+  * the <code>HORIZONTAL</code> or <code>VERTICAL</code> constant\n+  * from this class.\n+  */\n+private int orientation;\n+\n+/**\n+  * @serial The current value of this scrollbar.\n+  */\n+private int value;\n+\n+/**\n+  * @serial The width of the scrollbar's thumb, which is relative\n+  * to the minimum and maximum value of the scrollbar.\n+  */\n+private int visibleAmount;\n+\n+// List of AdjustmentListener's.\n+private AdjustmentListener adjustment_listeners;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Constructors\n  */\n \n-public class Scrollbar extends Component implements Adjustable\n-{\n-  public Scrollbar ()\n-  {\n-    this (VERTICAL, 0, 10, 0, 100);\n-  }\n-\n-  public Scrollbar (int orientation)\n-  {\n-    this (orientation, 0, 10, 0, 100);\n-  }\n-\n-  public Scrollbar (int orientation, int value, int visible,\n-\t\t    int minimum, int maximum)\n-  {\n-    if (orientation != HORIZONTAL && orientation != VERTICAL)\n-      throw new IllegalArgumentException ();\n-\n-    if (maximum < minimum)\n-      maximum = minimum;\n-    if (value < minimum)\n-      value = minimum;\n-    if (value > maximum)\n-      value = maximum;\n-\n-    this.orientation = orientation;\n-    this.value = value;\n-    this.visible = visible;\n-    this.minimum = minimum;\n-    this.maximum = maximum;\n-    this.unit = 1;\n-\n-    this.block = 0; // FIXME\n-  }\n-\n-  public void addNotify ()\n-  {\n-    if (peer == null)\n-      peer = getToolkit ().createScrollbar (this);\n-    super.addNotify ();\n-  }\n-\n-  public int getOrientation ()\n-  {\n-    return orientation;\n-  }\n-\n-  public void setOrientation (int orientation)\n-  {\n-    if (orientation != HORIZONTAL && orientation != VERTICAL)\n-      throw new IllegalArgumentException ();\n-    this.orientation = orientation;\n-  }\n-\n-  public int getValue ()\n-  {\n-    return value;\n-  }\n-\n-  public void setValue (int value)\n-  {\n-    setValues (value, visible, minimum, maximum);\n-  }\n-\n-  public int getMinimum ()\n-  {\n-    return minimum;\n-  }\n-\n-  public void setMinimum (int minimum)\n-  {\n-    setValues (value, visible, minimum, maximum);\n-  }\n-\n-  public int getMaximum ()\n-  {\n-    return maximum;\n-  }\n-\n-  public void setMaximum (int maximum)\n-  {\n-    setValues (value, visible, minimum, maximum);\n-  }\n-\n-  public int getVisibleAmount ()\n-  {\n-    return visible;\n-  }\n-\n-  public int getVisible ()\n-  {\n-    return visible;\n-  }\n-\n-  public void setVisibleAmount (int visible)\n-  {\n-    setValues (value, visible, minimum, maximum);\n-  }\n-\n-  public void setUnitIncrement (int v)\n-  {\n-    unit = v;\n-    if (peer != null)\n-      {\n-\tScrollbarPeer sp = (ScrollbarPeer) peer;\n-\tsp.setLineIncrement (v);\n-      }\n-  }\n-\n-  /** @deprecated */\n-  public void setLineIncrement (int v)\n-  {\n-    setUnitIncrement (v);\n-  }\n-\n-  public int getUnitIncrement ()\n-  {\n-    return unit;\n-  }\n-\n-  public int getLineIncrement ()\n-  {\n-    return unit;\n-  }\n-\n-  public void setBlockIncrement (int v)\n-  {\n-    block = v;\n-    if (peer != null)\n-      {\n-\tScrollbarPeer sp = (ScrollbarPeer) peer;\n-\tsp.setPageIncrement (v);\n-      }\n-  }\n-\n-  public void setPageIncrement (int v)\n-  {\n-    setBlockIncrement (v);\n-  }\n-\n-  public int getBlockIncrement ()\n-  {\n-    return block;\n-  }\n-\n-  public int getPageIncrement ()\n-  {\n-    return block;\n-  }\n-\n-  public synchronized void setValues (int value, int visible,\n-\t\t\t\t      int minimum, int maximum)\n-  {\n-    if (maximum < minimum)\n-      maximum = minimum;\n-    if (value < minimum)\n-      value = minimum;\n-    if (value > maximum)\n-      value = maximum;\n-\n-    this.value = value;\n-    this.visible = visible;\n-    this.minimum = minimum;\n-    this.maximum = maximum;\n-\n-    if (peer != null)\n-      {\n-\tScrollbarPeer sp = (ScrollbarPeer) peer;\n-\tsp.setValues (value, visible, minimum, maximum);\n-      }\n-  }\n-\n-  public void addAdjustmentListener (AdjustmentListener l)\n-  {\n-    listeners = AWTEventMulticaster.add (listeners, l);\n-  }\n-\n-  public void removeAdjustmentListener (AdjustmentListener l)\n-  {\n-    listeners = AWTEventMulticaster.remove (listeners, l);\n-  }\n-\n-  protected void processEvent (AWTEvent e)\n-  {\n-    if (e instanceof AdjustmentEvent)\n-      processAdjustmentEvent ((AdjustmentEvent) e);\n-    else\n-      super.processEvent (e);\n-  }\n-\n-  protected void processAdjustmentEvent (AdjustmentEvent e)\n-  {\n-    if (listeners != null)\n-      listeners.adjustmentValueChanged (e);\n-  }\n-\n-  protected String paramString ()\n-  {\n-    return (\"Scrollbar[\"\n-\t    + ((orientation == VERTICAL) ? \"VERTICAL\" : \"HORIZONTAL\") + \",\"\n-\t    + value + \",\"\n-\t    + visible + \",\"\n-\t    + minimum + \",\"\n-\t    + maximum + \",\"\n-\t    + unit + \",\"\n-\t    + block + \"]\");\n-  }\n-\n-  private AdjustmentListener listeners;\n-  private int orientation;\n-  private int value;\n-  private int visible;\n-  private int minimum;\n-  private int maximum;\n-  private int unit;\n-  private int block;\n+/**\n+  * Initializes a new instance of <code>Scrollbar</code> with a\n+  * veritical orientation and default values for all other parameters.\n+  */\n+public\n+Scrollbar()\n+{\n+  this(VERTICAL);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Initializes a new instance of <code>Scrollbar</code> with the\n+  * specified orientation and default values for all other parameters.\n+  * The orientation must be either the constant <code>HORIZONTAL</code> or\n+  * <code>VERTICAL</code> from this class.  An incorrect value will throw\n+  * an exception.\n+  *\n+  * @param orientation The orientation of this scrollbar.\n+  *\n+  * @exception IllegalArgumentException If the orientation value is not valid.\n+  */\n+public\n+Scrollbar(int orientation) throws IllegalArgumentException\n+{\n+  this(orientation, 0, 10, 0, 100);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Initializes a new instance of <code>Scrollbar</code> with the\n+  * specified parameters.  The orientation must be either the constant\n+  * <code>HORIZONTAL</code> or <code>VERTICAL</code>.  An incorrect value\n+  * will throw an exception.  Inconsistent values for other parameters\n+  * are silently corrected to valid values.\n+  *\n+  * @param orientation The orientation of this scrollbar.\n+  * @param value The initial value of the scrollbar.\n+  * @param visibleAmount The width of the scrollbar thumb.\n+  * @param minimum The minimum value of the scrollbar.\n+  * @param maximum The maximum value of the scrollbar.\n+  *\n+  * @exception IllegalArgumentException If the orientation value is not valid.\n+  */\n+public \n+Scrollbar(int orientation, int value, int visibleAmount, int minimum, \n+          int maximum) throws IllegalArgumentException\n+{\n+  if ((orientation != HORIZONTAL) && (orientation != VERTICAL))\n+    throw new IllegalArgumentException(\"Bad orientation value: \"\n+\t\t\t\t       + orientation);\n+\n+  this.orientation = orientation;\n+\n+  setValues(value, visibleAmount, minimum, maximum);\n+\n+  // Default is 1 according to online docs.\n+  lineIncrement = 1;\n+\n+  pageIncrement = (maximum - minimum) / 5;\n+  if (pageIncrement == 0)\n+    pageIncrement = 1;\n }\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Methods\n+ */\n+\n+/**\n+  * Returns the orientation constant for this object.\n+  *\n+  * @return The orientation constant for this object.\n+  */\n+public int\n+getOrientation()\n+{\n+  return(orientation);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Sets the orientation of this scrollbar to the specified value.  This\n+  * value must be either the constant <code>HORIZONTAL</code> or\n+  * <code>VERTICAL</code> from this class or an exception will be thrown.\n+  *\n+  * @param orientation The new orientation value.\n+  *\n+  * @exception IllegalArgumentException If the orientation value is not valid.\n+  */\n+public void\n+setOrientation(int orientation)\n+{\n+  if ((orientation != HORIZONTAL) && (orientation != VERTICAL))\n+    throw new IllegalArgumentException(\"Bad orientation value: \"\n+\t\t\t\t       + orientation);\n+\n+  // FIXME: Communicate to peer?  Or must this be called before peer creation?\n+  this.orientation = orientation;\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the current value for this scrollbar.\n+  *\n+  * @return The current value for this scrollbar.\n+  */\n+public int\n+getValue()\n+{\n+  return(value);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Sets the current value for this scrollbar to the specified value.\n+  * If this is inconsistent with the minimum and maximum values for this\n+  * scrollbar, the value is silently adjusted.\n+  *\n+  * @param value The new value for this scrollbar.\n+  */\n+public void\n+setValue(int value)\n+{\n+  setValues(value, visibleAmount, minimum, maximum);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the maximum value for this scrollbar.\n+  *\n+  * @return The maximum value for this scrollbar.\n+  */\n+public int\n+getMaximum()\n+{\n+  return(maximum);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Sets the maximum value for this scrollbar to the specified value.\n+  * If the value is less than the current minimum value, it is silent\n+  * set to equal the minimum value.\n+  *\n+  * @param maximum The new maximum value for this scrollbar.\n+  */\n+public void\n+setMaximum(int maximum)\n+{\n+  setValues(value, visibleAmount, minimum, maximum);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the minimum value for this scrollbar.\n+  *\n+  * @return The minimum value for this scrollbar.\n+  */\n+public int\n+getMinimum()\n+{\n+  return(minimum);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Sets the minimum value for this scrollbar to the specified value.  If\n+  * this is not consistent with the current value and maximum, it is\n+  * silently adjusted to be consistent.\n+  *\n+  * @param minimum The new minimum value for this scrollbar.\n+  */\n+public void\n+setMinimum(int minimum)\n+{\n+  setValues(value, visibleAmount, minimum, maximum);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the width of the scrollbar's thumb, in units relative to the\n+  * maximum and minimum value of the scrollbar.\n+  *\n+  * @return The width of the scrollbar's thumb.\n+  */\n+public int\n+getVisibleAmount()\n+{\n+  return(visibleAmount);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the width of the scrollbar's thumb, in units relative to the\n+  * maximum and minimum value of the scrollbar.\n+  *\n+  * @return The width of the scrollbar's thumb.\n+  *\n+  * @deprecated This method is deprecated in favor of \n+  * <code>getVisibleAmount()</code>.\n+  */\n+public int\n+getVisible()\n+{\n+  return(getVisibleAmount());\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Sets the width of the scrollbar's thumb, in units relative to the\n+  * maximum and minimum value of the scrollbar.\n+  *\n+  * @param visibileAmount The new visible amount value of the scrollbar.\n+  */\n+public void\n+setVisibleAmount(int visibleAmount)\n+{\n+  setValues(value, visibleAmount, minimum, maximum);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Sets the current value, visible amount, minimum, and maximum for this\n+  * scrollbar.  These values are adjusted to be internally consistent\n+  * if necessary.\n+  *\n+  * @param value The new value for this scrollbar.\n+  * @param visibleAmount The new visible amount for this scrollbar.\n+  * @param minimum The new minimum value for this scrollbar.\n+  * @param maximum The new maximum value for this scrollbar.\n+  */\n+public synchronized void\n+setValues(int value, int visibleAmount, int minimum, int maximum)\n+{\n+  if (maximum < minimum)\n+    maximum = minimum;\n+\n+  if (value < minimum)\n+    value = minimum;\n+\n+  if (value > maximum)\n+    value = maximum;\n+\n+  if (visibleAmount > value)\n+    visibleAmount = value;\n+\n+  this.value = value;\n+  this.visibleAmount = visibleAmount;\n+  this.minimum = minimum;\n+  this.maximum = maximum;\n+\n+  ScrollbarPeer sp = (ScrollbarPeer)getPeer();\n+  if (sp != null)\n+    sp.setValues(value, visibleAmount, minimum, maximum);\n+\n+  int range = maximum - minimum;\n+  if (lineIncrement > range)\n+    {\n+      if (range == 0)\n+        lineIncrement = 1;\n+      else\n+        lineIncrement = range;\n+\n+      if (sp != null)\n+        sp.setLineIncrement(lineIncrement);\n+    }\n+\n+  if (pageIncrement > range)\n+    {\n+      if (range == 0)\n+        pageIncrement = 1;\n+      else\n+        pageIncrement = range;\n+\n+      if (sp != null)\n+        sp.setPageIncrement(pageIncrement);\n+    }\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the value added or subtracted when the user activates the scrollbar\n+  * scroll by a \"unit\" amount.\n+  *\n+  * @return The unit increment value.\n+  */\n+public int\n+getUnitIncrement()\n+{\n+  return(lineIncrement);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the value added or subtracted when the user selects the scrollbar\n+  * scroll by a \"unit\" amount control.\n+  *\n+  * @return The unit increment value.\n+  *\n+  * @deprecated This method is deprecated in favor of \n+  * <code>getUnitIncrement()</code>.\n+  */\n+public int\n+getLineIncrement()\n+{\n+  return(lineIncrement);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Sets the value added or subtracted to the scrollbar value when the\n+  * user selects the scroll by a \"unit\" amount control.\n+  *\n+  * @param unitIncrement The new unit increment amount.\n+  */\n+public synchronized void\n+setUnitIncrement(int unitIncrement)\n+{\n+  if (unitIncrement < 0)\n+    throw new IllegalArgumentException(\"Unit increment less than zero.\");\n+\n+  int range = maximum - minimum;\n+  if (unitIncrement > range)\n+    {\n+      if (range == 0)\n+        unitIncrement = 1;\n+      else\n+        unitIncrement = range;\n+    }\n+\n+  if (unitIncrement == lineIncrement)\n+    return;\n+\n+  lineIncrement = unitIncrement;\n+\n+  ScrollbarPeer sp = (ScrollbarPeer)getPeer();\n+  if (sp != null)\n+    sp.setLineIncrement(lineIncrement);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Sets the value added or subtracted to the scrollbar value when the\n+  * user selects the scroll by a \"unit\" amount control.\n+  *\n+  * @param lineIncrement The new unit increment amount.\n+  *\n+  * @deprecated This method is deprecated in favor of\n+  * <code>setUnitIncrement()</code>.\n+  */\n+public void\n+setLineIncrement(int lineIncrement)\n+{\n+  setUnitIncrement(lineIncrement);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the value added or subtracted when the user activates the scrollbar\n+  * scroll by a \"block\" amount.\n+  *\n+  * @return The block increment value.\n+  */\n+public int\n+getBlockIncrement()\n+{\n+  return(pageIncrement);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the value added or subtracted when the user selects the scrollbar\n+  * scroll by a \"block\" amount control.\n+  *\n+  * @return The block increment value.\n+  *\n+  * @deprecated This method is deprecated in favor of \n+  * <code>getBlockIncrement()</code>.\n+  */\n+public int\n+getPageIncrement()\n+{\n+  return(pageIncrement);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Sets the value added or subtracted to the scrollbar value when the\n+  * user selects the scroll by a \"block\" amount control.\n+  *\n+  * @param blockIncrement The new block increment amount.\n+  */\n+public synchronized void\n+setBlockIncrement(int blockIncrement)\n+{\n+  if (blockIncrement < 0)\n+    throw new IllegalArgumentException(\"Block increment less than zero.\");\n+\n+  int range = maximum - minimum;\n+  if (blockIncrement > range)\n+    {\n+      if (range == 0)\n+        blockIncrement = 1;\n+      else\n+        blockIncrement = range;\n+    }\n+\n+  if (blockIncrement == pageIncrement)\n+    return;\n+\n+  pageIncrement = blockIncrement;\n+\n+  ScrollbarPeer sp = (ScrollbarPeer)getPeer();\n+  if (sp != null)\n+    sp.setPageIncrement(pageIncrement);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Sets the value added or subtracted to the scrollbar value when the\n+  * user selects the scroll by a \"block\" amount control.\n+  *\n+  * @param pageIncrement The new block increment amount.\n+  *\n+  * @deprecated This method is deprecated in favor of\n+  * <code>setBlockIncrement()</code>.\n+  */\n+public void\n+setPageIncrement(int pageIncrement)\n+{\n+  setBlockIncrement(pageIncrement);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Notifies this object to create its native peer.\n+  */\n+public synchronized void\n+addNotify()\n+{\n+  if (peer == null)\n+    peer = getToolkit ().createScrollbar (this);\n+  super.addNotify ();\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Adds a new adjustment listener to the list of registered listeners\n+  * for this object.\n+  *\n+  * @param listener The listener to add.\n+  */\n+public synchronized void\n+addAdjustmentListener(AdjustmentListener listener)\n+{\n+  adjustment_listeners = AWTEventMulticaster.add(adjustment_listeners, listener);\n+  enableEvents(AWTEvent.ADJUSTMENT_EVENT_MASK);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Removes the specified listener from the list of registered listeners\n+  * for this object.\n+  *\n+  * @param listener The listener to remove.\n+  */\n+public synchronized void\n+removeAdjustmentListener(AdjustmentListener listener)\n+{\n+  adjustment_listeners = AWTEventMulticaster.remove(adjustment_listeners, \n+                                                    listener);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Processes events for this scrollbar.  It does this by calling\n+  * <code>processAdjustmentEvent()</code> if the event is an instance of\n+  * <code>AdjustmentEvent</code>, otherwise it calls the superclass to\n+  * process the event.\n+  *\n+  * @param event The event to process.\n+  */\n+protected void\n+processEvent(AWTEvent event)\n+{\n+  if (event instanceof AdjustmentEvent)\n+    processAdjustmentEvent((AdjustmentEvent)event);\n+  else\n+    super.processEvent(event);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Processes adjustment events for this object by dispatching them to\n+  * any registered listeners.  Note that this method will only be called\n+  * if adjustment events are enabled.  This will happen automatically if\n+  * any listeners are registered.  Otherwise, it can be enabled by a\n+  * call to <code>enableEvents()</code>.\n+  *\n+  * @param event The event to process.\n+  */\n+protected void\n+processAdjustmentEvent(AdjustmentEvent event)\n+{\n+  if (adjustment_listeners != null)\n+    adjustment_listeners.adjustmentValueChanged(event);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns a debugging string for this object.\n+  *\n+  * @return A debugging string for this object.\n+  */\n+protected String\n+paramString()\n+{\n+  return(\"value=\" + getValue() + \",visibleAmount=\" +\n+         getVisibleAmount() + \",minimum=\" + getMinimum()\n+\t + \",maximum=\" + getMaximum()\n+\t + \",pageIncrement=\" + pageIncrement\n+\t + \",lineIncrement=\" + lineIncrement\n+\t + \",orientation=\" + (orientation == HORIZONTAL\n+\t\t\t      ? \"HORIZONTAL\" : \"VERTICAL\")\n+\t + super.paramString());\n+}\n+\n+} // class Scrollbar \n+"}, {"sha": "7f2fda02d8f64b1bfeda53e5c72844cde07afac1", "filename": "libjava/java/awt/Shape.java", "status": "modified", "additions": 54, "deletions": 12, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ad93a608ce2bbce6d38bceda266194357586ae/libjava%2Fjava%2Fawt%2FShape.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ad93a608ce2bbce6d38bceda266194357586ae/libjava%2Fjava%2Fawt%2FShape.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FShape.java?ref=02ad93a608ce2bbce6d38bceda266194357586ae", "patch": "@@ -1,33 +1,75 @@\n-/* Copyright (C) 1999, 2000  Free Software Foundation\n+/* Shape.java -- Interface for shape abstractions.\n+   Copyright (C) 1999, 2000, 2002 Free Software Foundation, Inc.\n \n-   This file is part of libjava.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libjava License.  Please consult the file \"LIBJAVA_LICENSE\" for\n-details.  */\n \n package java.awt;\n-import java.awt.geom.*;\n \n-/**\n- * @author Per Bothner <bothner@cygnus.com>\n- * @date February 8, 1999.\n- */\n+import java.awt.geom.*;\n \n /* Written using \"Java Class Libraries\", 2nd edition.\n  * Status:  Believed complete and correct to JDK 1.2.\n  */\n \n+/**\n+  * This interface represents an abstract shape.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Per Bothner <bothner@cygnus.com>\n+  */\n public interface Shape\n {\n+\n+/**\n+  * Returns a <code>Rectange</code> that bounds the shape.\n+  *\n+  * @return A <code>Rectange</code> that bounds the shape.\n+  */\n+public abstract Rectangle\n+getBounds();\n+\n   public boolean contains (double x, double y);\n   public boolean contains (double x, double y, double w, double h);\n   public boolean contains (Point2D p);\n   public boolean contains (Rectangle2D r);\n-  public Rectangle getBounds ();\n   public Rectangle2D getBounds2D ();\n   public PathIterator getPathIterator (AffineTransform at);\n   public PathIterator getPathIterator (AffineTransform at, double flatness);\n   public boolean intersects (double x, double y, double w, double h);\n   public boolean intersects (Rectangle2D r);\n-}\n+\n+} // interface Shape\n+"}]}