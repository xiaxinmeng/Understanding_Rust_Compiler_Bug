{"sha": "87261d26850e695a2e68f1e7b6115001ee67299e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODcyNjFkMjY4NTBlNjk1YTJlNjhmMWU3YjYxMTUwMDFlZTY3Mjk5ZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-09-16T07:25:15Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-09-16T07:25:15Z"}, "message": "re PR middle-end/67442 (GCC 5.2.0 on x86_64 creates invalid address on specific array index calculation through pointer)\n\n2015-09-16  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/67442\n\t* fold-const.c (extract_muldiv_1): Properly extend multiplication\n\tresult before builting a tree via wide_int_to_tree.\n\n\t* gcc.dg/torture/pr67442.c: New testcase.\n\nFrom-SVN: r227818", "tree": {"sha": "204dfe94f503659d5aa968fbd02e9017d2abdf78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/204dfe94f503659d5aa968fbd02e9017d2abdf78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87261d26850e695a2e68f1e7b6115001ee67299e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87261d26850e695a2e68f1e7b6115001ee67299e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87261d26850e695a2e68f1e7b6115001ee67299e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87261d26850e695a2e68f1e7b6115001ee67299e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fcb87c50b00e203aa3ef586915edd305429d3868", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcb87c50b00e203aa3ef586915edd305429d3868", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcb87c50b00e203aa3ef586915edd305429d3868"}], "stats": {"total": 31, "additions": 29, "deletions": 2}, "files": [{"sha": "fca25b9b867a330dea7dabe2ad47e292b5cf1efa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87261d26850e695a2e68f1e7b6115001ee67299e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87261d26850e695a2e68f1e7b6115001ee67299e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=87261d26850e695a2e68f1e7b6115001ee67299e", "patch": "@@ -1,3 +1,9 @@\n+2015-09-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/67442\n+\t* fold-const.c (extract_muldiv_1): Properly extend multiplication\n+\tresult before builting a tree via wide_int_to_tree.\n+\n 2015-09-16  Mikhail Maltsev  <maltsevm@gmail.com>\n \n \t* Makefile.in: Add memory-block.cc"}, {"sha": "fd1c87ed5ad08af7b38d0cc4a3c8b2418da65f3a", "filename": "gcc/fold-const.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87261d26850e695a2e68f1e7b6115001ee67299e/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87261d26850e695a2e68f1e7b6115001ee67299e/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=87261d26850e695a2e68f1e7b6115001ee67299e", "patch": "@@ -6166,8 +6166,12 @@ extract_muldiv_1 (tree t, tree c, enum tree_code code, tree wide_type,\n \t      && ((sign == UNSIGNED && tcode != MULT_EXPR) || sign == SIGNED))\n \t    overflow_p = true;\n \t  if (!overflow_p)\n-\t    return fold_build2 (tcode, ctype, fold_convert (ctype, op0),\n-\t\t\t\twide_int_to_tree (ctype, mul));\n+\t    {\n+\t      mul = wide_int::from (mul, TYPE_PRECISION (ctype),\n+\t\t\t\t    TYPE_SIGN (TREE_TYPE (op1)));\n+\t      return fold_build2 (tcode, ctype, fold_convert (ctype, op0),\n+\t\t\t\t  wide_int_to_tree (ctype, mul));\n+\t    }\n \t}\n \n       /* If these operations \"cancel\" each other, we have the main"}, {"sha": "9035db974d012345014688ca4ea585f41ed362b9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87261d26850e695a2e68f1e7b6115001ee67299e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87261d26850e695a2e68f1e7b6115001ee67299e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=87261d26850e695a2e68f1e7b6115001ee67299e", "patch": "@@ -1,3 +1,8 @@\n+2015-09-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/67442\n+\t* gcc.dg/torture/pr67442.c: New testcase.\n+\n 2015-09-15  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/array24.adb: New test."}, {"sha": "bc214d62d4deab11bd49292881eef3b4d76206eb", "filename": "gcc/testsuite/gcc.dg/torture/pr67442.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87261d26850e695a2e68f1e7b6115001ee67299e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr67442.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87261d26850e695a2e68f1e7b6115001ee67299e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr67442.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr67442.c?ref=87261d26850e695a2e68f1e7b6115001ee67299e", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do run } */\n+\n+short foo[100];\n+\n+int main()\n+{\n+  short* bar = &foo[50];\n+  short i = 1;\n+  short j = 1;\n+  short value = bar[8 - i * 2 * j];\n+  return value;\n+}"}]}