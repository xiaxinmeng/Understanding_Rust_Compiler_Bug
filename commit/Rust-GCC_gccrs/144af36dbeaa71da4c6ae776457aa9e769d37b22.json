{"sha": "144af36dbeaa71da4c6ae776457aa9e769d37b22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ0YWYzNmRiZWFhNzFkYTRjNmFlNzc2NDU3YWE5ZTc2OWQzN2IyMg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-04-10T06:53:57Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-04-10T06:53:57Z"}, "message": "cp-tree.h (struct lang_decl): Remove main_decl_variant.\n\n\t* cp-tree.h (struct lang_decl): Remove main_decl_variant.\n\t(DECL_MAIN_VARIANT): Remove.\n\t* decl.c (duplicate_decls): Don't set it.\n\t(start_function): Likewise.\n\t(lang_mark_tree): Don't mark it.\n\t* decl2.c (defer_fn): Don't use it.\n\t* lex.c (retrofit_lang_decl): Don't set it.\n\t* pt.c (tsubst_decl): Likewise.\n\t* ptree.c (print_lang_decl): Don't print it.\n\t* typeck.c (mark_addressable): Don't use it.\n\nFrom-SVN: r33048", "tree": {"sha": "b726f0ebf7f8dbab38ace424055884259f6194ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b726f0ebf7f8dbab38ace424055884259f6194ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/144af36dbeaa71da4c6ae776457aa9e769d37b22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/144af36dbeaa71da4c6ae776457aa9e769d37b22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/144af36dbeaa71da4c6ae776457aa9e769d37b22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/144af36dbeaa71da4c6ae776457aa9e769d37b22/comments", "author": null, "committer": null, "parents": [{"sha": "8c389f849ab65cfb5bc82fb2a3c4d815e193ecfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c389f849ab65cfb5bc82fb2a3c4d815e193ecfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c389f849ab65cfb5bc82fb2a3c4d815e193ecfd"}], "stats": {"total": 47, "additions": 20, "deletions": 27}, "files": [{"sha": "56760657b601bf1bc3c22d268c511ac6fdfbaac8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/144af36dbeaa71da4c6ae776457aa9e769d37b22/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/144af36dbeaa71da4c6ae776457aa9e769d37b22/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=144af36dbeaa71da4c6ae776457aa9e769d37b22", "patch": "@@ -1,3 +1,16 @@\n+2000-04-09  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (struct lang_decl): Remove main_decl_variant.\n+\t(DECL_MAIN_VARIANT): Remove.\n+\t* decl.c (duplicate_decls): Don't set it.\n+\t(start_function): Likewise.\n+\t(lang_mark_tree): Don't mark it.\n+\t* decl2.c (defer_fn): Don't use it.\n+\t* lex.c (retrofit_lang_decl): Don't set it.\n+\t* pt.c (tsubst_decl): Likewise.\n+\t* ptree.c (print_lang_decl): Don't print it.\n+\t* typeck.c (mark_addressable): Don't use it.\n+\t\n 2000-04-09  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* vec.cc: Include <new> and <exception>."}, {"sha": "5ba0e36f963f5556a9b681ba54e6ef0a266cae35", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/144af36dbeaa71da4c6ae776457aa9e769d37b22/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/144af36dbeaa71da4c6ae776457aa9e769d37b22/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=144af36dbeaa71da4c6ae776457aa9e769d37b22", "patch": "@@ -1892,7 +1892,6 @@ struct lang_decl\n {\n   struct lang_decl_flags decl_flags;\n \n-  tree main_decl_variant;\n   tree befriending_classes;\n \n   /* In a FUNCTION_DECL, this is DECL_SAVED_TREE.  */\n@@ -2107,9 +2106,6 @@ struct lang_decl\n    this is the shadowed (local) variable.  */\n #define DECL_SHADOWED_FOR_VAR(NODE) DECL_RESULT_FLD(VAR_DECL_CHECK (NODE))\n \n-/* Points back to the decl which caused this lang_decl to be allocated.  */\n-#define DECL_MAIN_VARIANT(NODE) (DECL_LANG_SPECIFIC(NODE)->main_decl_variant)\n-\n /* In a FUNCTION_DECL, this is nonzero if this function was defined in\n    the class definition.  We have saved away the text of the function,\n    but have not yet processed it.  */"}, {"sha": "561a91d098058a1a5acf843b33bfe13f41d78436", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/144af36dbeaa71da4c6ae776457aa9e769d37b22/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/144af36dbeaa71da4c6ae776457aa9e769d37b22/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=144af36dbeaa71da4c6ae776457aa9e769d37b22", "patch": "@@ -3632,8 +3632,6 @@ duplicate_decls (newdecl, olddecl)\n \t  if (DECL_ARGUMENTS (olddecl))\n \t    DECL_ARGUMENTS (newdecl) = DECL_ARGUMENTS (olddecl);\n \t}\n-      if (DECL_LANG_SPECIFIC (olddecl))\n-\tDECL_MAIN_VARIANT (newdecl) = DECL_MAIN_VARIANT (olddecl);\n     }\n \n   if (TREE_CODE (newdecl) == NAMESPACE_DECL)\n@@ -13393,7 +13391,6 @@ start_function (declspecs, declarator, attrs, flags)\n \t  /* And make sure we have enough default args.  */\n \t  check_default_args (decl1);\n \t}\n-      DECL_MAIN_VARIANT (decl1) = decl1;\n       fntype = TREE_TYPE (decl1);\n     }\n \n@@ -14767,7 +14764,6 @@ lang_mark_tree (t)\n \t    mark_binding_level (&NAMESPACE_LEVEL (t));\n \t  if (CAN_HAVE_FULL_LANG_DECL_P (t))\n \t    {\n-\t      ggc_mark_tree (ld->main_decl_variant);\n \t      ggc_mark_tree (ld->befriending_classes);\n \t      ggc_mark_tree (ld->saved_tree);\n \t      if (TREE_CODE (t) == TYPE_DECL)"}, {"sha": "5e370fd7169b8b9c1615dbdb27555f8fe3e4b800", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/144af36dbeaa71da4c6ae776457aa9e769d37b22/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/144af36dbeaa71da4c6ae776457aa9e769d37b22/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=144af36dbeaa71da4c6ae776457aa9e769d37b22", "patch": "@@ -1982,7 +1982,6 @@ void\n defer_fn (fn)\n      tree fn;\n {\n-  fn = DECL_MAIN_VARIANT (fn);\n   if (DECL_DEFERRED_FN (fn))\n     return;\n   DECL_DEFERRED_FN (fn) = 1;"}, {"sha": "1c4bb5795be4c8c3011f5bb60d13c120fae642f9", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/144af36dbeaa71da4c6ae776457aa9e769d37b22/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/144af36dbeaa71da4c6ae776457aa9e769d37b22/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=144af36dbeaa71da4c6ae776457aa9e769d37b22", "patch": "@@ -4995,9 +4995,6 @@ retrofit_lang_decl (t)\n     DECL_LANGUAGE (t) = lang_java;\n   else my_friendly_abort (64);\n \n-  if (CAN_HAVE_FULL_LANG_DECL_P (t))\n-    DECL_MAIN_VARIANT (t) = t;\n-\n #ifdef GATHER_STATISTICS\n   tree_node_counts[(int)lang_decl] += 1;\n   tree_node_sizes[(int)lang_decl] += size;"}, {"sha": "397d5cfc7a649a0f07f070b1c4989cf4ca55f102", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/144af36dbeaa71da4c6ae776457aa9e769d37b22/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/144af36dbeaa71da4c6ae776457aa9e769d37b22/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=144af36dbeaa71da4c6ae776457aa9e769d37b22", "patch": "@@ -5700,7 +5700,6 @@ tsubst_decl (t, args, type, in_decl)\n \n \tDECL_ARGUMENTS (r) = tsubst (DECL_ARGUMENTS (t), args,\n \t\t\t\t     /*complain=*/1, t);\n-\tDECL_MAIN_VARIANT (r) = r;\n \tDECL_TEMPLATE_RESULT (r) = NULL_TREE;\n \n \tTREE_STATIC (r) = 0;"}, {"sha": "7a234a55a35008e037ba1fec0cb62eac1e88c222", "filename": "gcc/cp/ptree.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/144af36dbeaa71da4c6ae776457aa9e769d37b22/gcc%2Fcp%2Fptree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/144af36dbeaa71da4c6ae776457aa9e769d37b22/gcc%2Fcp%2Fptree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fptree.c?ref=144af36dbeaa71da4c6ae776457aa9e769d37b22", "patch": "@@ -44,11 +44,6 @@ print_lang_decl (file, node, indent)\n   if (TREE_CODE (node) == FIELD_DECL)\n     return;\n   indent_to (file, indent + 3);\n-  if (DECL_MAIN_VARIANT (node))\n-    {\n-      fprintf (file, \" decl-main-variant \");\n-      fprintf (file, HOST_PTR_PRINTF, DECL_MAIN_VARIANT (node));\n-    }\n   if (TREE_CODE (node) == FUNCTION_DECL\n       && DECL_PENDING_INLINE_INFO (node))\n     {"}, {"sha": "65d75c06b77bc1666024fba67953b4fd30ddc509", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/144af36dbeaa71da4c6ae776457aa9e769d37b22/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/144af36dbeaa71da4c6ae776457aa9e769d37b22/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=144af36dbeaa71da4c6ae776457aa9e769d37b22", "patch": "@@ -4988,15 +4988,13 @@ mark_addressable (exp)\n \treturn 1;\n \n       case FUNCTION_DECL:\n-\tif (DECL_LANG_SPECIFIC (x) != 0)\n-\t  {\n-\t    x = DECL_MAIN_VARIANT (x);\n-\t    /* We have to test both conditions here.  The first may be\n-\t       non-zero in the case of processing a default function.  The\n-\t       second may be non-zero in the case of a template function.  */\n-\t    if (DECL_TEMPLATE_INFO (x) && !DECL_TEMPLATE_SPECIALIZATION (x))\n-\t      mark_used (x);\n-\t  }\n+\t/* We have to test both conditions here.  The first may be\n+\t   non-zero in the case of processing a default function.  The\n+\t   second may be non-zero in the case of a template function.  */\n+\tif (DECL_LANG_SPECIFIC (x)\n+\t    && DECL_TEMPLATE_INFO (x) \n+\t    && !DECL_TEMPLATE_SPECIALIZATION (x))\n+\t  mark_used (x);\n \tTREE_ADDRESSABLE (x) = 1;\n \tTREE_USED (x) = 1;\n \tTREE_ADDRESSABLE (DECL_ASSEMBLER_NAME (x)) = 1;"}]}