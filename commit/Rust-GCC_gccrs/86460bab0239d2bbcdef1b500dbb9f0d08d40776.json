{"sha": "86460bab0239d2bbcdef1b500dbb9f0d08d40776", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY0NjBiYWIwMjM5ZDJiYmNkZWYxYjUwMGRiYjlmMGQwOGQ0MDc3Ng==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-12-18T02:37:06Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-12-18T02:37:06Z"}, "message": "machmode.h (mode_name, [...]): Set array size in declaration to NUM_MACHINE_MODES.\n\n\t* machmode.h (mode_name, mode_class, mode_size, mode_unit_size,\n\tmode_bitsize, mode_mask_array, mode_wider_mode): Set array size in\n\tdeclaration to NUM_MACHINE_MODES.\n\t(mode_size, mode_unit_size): Set array type to unsigned char.\n\t(mode_bitsize): Set array type to unsigned short.\n\n\t* rtl.c (rtx_length): Set array type to unsigned char.\n\t(rtx_length, rtx_name, rtx_format, rtx_class): Set array size to\n\tNUM_RTX_CODE.\n\t(mode_bitsize): Set array type to unsigned short.\n\t(mode_size, mode_unit_size): Set array type to unsigned char.\n\t(mode_name, mode_class, mode_bitsize, mode_size, mode_unit_size,\n\tmode_wider_mode, mode_mask_array): Set array size to\n\tNUM_MACHINE_MODES.\n\n\t* rtl.h (rtx_length, rtx_name, rtx_format, rtx_class): Set array\n\tsize in declaration to NUM_RTX_CODE.\n\nFrom-SVN: r48139", "tree": {"sha": "ee99b3e3797ecd2a9d3561182267ee36e9ed46bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee99b3e3797ecd2a9d3561182267ee36e9ed46bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86460bab0239d2bbcdef1b500dbb9f0d08d40776", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86460bab0239d2bbcdef1b500dbb9f0d08d40776", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86460bab0239d2bbcdef1b500dbb9f0d08d40776", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86460bab0239d2bbcdef1b500dbb9f0d08d40776/comments", "author": null, "committer": null, "parents": [{"sha": "29b06e3587660a8db8a6c2825aa1a953a5183aaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29b06e3587660a8db8a6c2825aa1a953a5183aaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29b06e3587660a8db8a6c2825aa1a953a5183aaa"}], "stats": {"total": 64, "additions": 42, "deletions": 22}, "files": [{"sha": "0b784c5a70f30cc79b144c89a9b5b0d2ba52a1de", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86460bab0239d2bbcdef1b500dbb9f0d08d40776/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86460bab0239d2bbcdef1b500dbb9f0d08d40776/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=86460bab0239d2bbcdef1b500dbb9f0d08d40776", "patch": "@@ -1,3 +1,23 @@\n+2001-12-17  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* machmode.h (mode_name, mode_class, mode_size, mode_unit_size,\n+\tmode_bitsize, mode_mask_array, mode_wider_mode): Set array size in\n+\tdeclaration to NUM_MACHINE_MODES.\n+\t(mode_size, mode_unit_size): Set array type to unsigned char.\n+\t(mode_bitsize): Set array type to unsigned short.\n+\n+\t* rtl.c (rtx_length): Set array type to unsigned char.\n+\t(rtx_length, rtx_name, rtx_format, rtx_class): Set array size to\n+\tNUM_RTX_CODE.\n+\t(mode_bitsize): Set array type to unsigned short.\n+\t(mode_size, mode_unit_size): Set array type to unsigned char.\n+\t(mode_name, mode_class, mode_bitsize, mode_size, mode_unit_size,\n+\tmode_wider_mode, mode_mask_array): Set array size to\n+\tNUM_MACHINE_MODES.\n+\n+\t* rtl.h (rtx_length, rtx_name, rtx_format, rtx_class): Set array\n+\tsize in declaration to NUM_RTX_CODE.\n+\n 2001-12-17  Richard Henderson  <rth@redhat.com>\n \n \t* config/alpha/alpha.md (unop): Encode RB as $sp."}, {"sha": "9b2ad8f2d1e12699e2cd170e9c1be66af1b71d6f", "filename": "gcc/machmode.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86460bab0239d2bbcdef1b500dbb9f0d08d40776/gcc%2Fmachmode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86460bab0239d2bbcdef1b500dbb9f0d08d40776/gcc%2Fmachmode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.h?ref=86460bab0239d2bbcdef1b500dbb9f0d08d40776", "patch": "@@ -38,7 +38,7 @@ MAX_MACHINE_MODE };\n \n /* Get the name of mode MODE as a string.  */\n \n-extern const char * const mode_name[];\n+extern const char * const mode_name[NUM_MACHINE_MODES];\n #define GET_MODE_NAME(MODE)\t\t(mode_name[(int) (MODE)])\n \n enum mode_class { MODE_RANDOM, MODE_INT, MODE_FLOAT, MODE_PARTIAL_INT, MODE_CC,\n@@ -49,7 +49,7 @@ enum mode_class { MODE_RANDOM, MODE_INT, MODE_FLOAT, MODE_PARTIAL_INT, MODE_CC,\n /* Get the general kind of object that mode MODE represents\n    (integer, floating, complex, etc.)  */\n \n-extern const enum mode_class mode_class[];\n+extern const enum mode_class mode_class[NUM_MACHINE_MODES];\n #define GET_MODE_CLASS(MODE)\t\t(mode_class[(int) (MODE)])\n \n /* Nonzero if MODE is an integral mode.  */\n@@ -77,12 +77,12 @@ extern const enum mode_class mode_class[];\n \n /* Get the size in bytes of an object of mode MODE.  */\n \n-extern const unsigned int mode_size[];\n+extern const unsigned char mode_size[NUM_MACHINE_MODES];\n #define GET_MODE_SIZE(MODE)\t\t(mode_size[(int) (MODE)])\n \n /* Get the size in bytes of the basic parts of an object of mode MODE.  */\n \n-extern const unsigned int mode_unit_size[];\n+extern const unsigned char mode_unit_size[NUM_MACHINE_MODES];\n #define GET_MODE_UNIT_SIZE(MODE)\t(mode_unit_size[(int) (MODE)])\n \n /* Get the number of units in the object.  */\n@@ -93,7 +93,7 @@ extern const unsigned int mode_unit_size[];\n \n /* Get the size in bits of an object of mode MODE.  */\n \n-extern const unsigned int mode_bitsize[];\n+extern const unsigned short mode_bitsize[NUM_MACHINE_MODES];\n #define GET_MODE_BITSIZE(MODE)  (mode_bitsize[(int) (MODE)])\n \n #endif /* not HAVE_MACHINE_MODES */\n@@ -103,7 +103,7 @@ extern const unsigned int mode_bitsize[];\n /* Get a bitmask containing 1 for all bits in a word\n    that fit within mode MODE.  */\n \n-extern const unsigned HOST_WIDE_INT mode_mask_array[];\n+extern const unsigned HOST_WIDE_INT mode_mask_array[NUM_MACHINE_MODES];\n \n #define GET_MODE_MASK(MODE) mode_mask_array[(int) (MODE)]\n \n@@ -114,7 +114,7 @@ extern const unsigned HOST_WIDE_INT mode_mask_array[];\n \n /* Get the next wider natural mode (eg, QI -> HI -> SI -> DI -> TI).  */\n \n-extern const unsigned char mode_wider_mode[];\n+extern const unsigned char mode_wider_mode[NUM_MACHINE_MODES];\n #define GET_MODE_WIDER_MODE(MODE)\t((enum machine_mode)mode_wider_mode[(int) (MODE)])\n \n /* Return the mode for data of a given size SIZE and mode class CLASS."}, {"sha": "10036ce712e435abcb5063b96473df4a8dde144b", "filename": "gcc/rtl.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86460bab0239d2bbcdef1b500dbb9f0d08d40776/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86460bab0239d2bbcdef1b500dbb9f0d08d40776/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=86460bab0239d2bbcdef1b500dbb9f0d08d40776", "patch": "@@ -96,7 +96,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n #define DEF_RTL_EXPR(ENUM, NAME, FORMAT, CLASS)   sizeof FORMAT - 1 ,\n \n-const int rtx_length[NUM_RTX_CODE + 1] = {\n+const unsigned char rtx_length[NUM_RTX_CODE] = {\n #include \"rtl.def\"\n };\n \n@@ -106,7 +106,7 @@ const int rtx_length[NUM_RTX_CODE + 1] = {\n \n #define DEF_RTL_EXPR(ENUM, NAME, FORMAT, CLASS)   NAME ,\n \n-const char * const rtx_name[] = {\n+const char * const rtx_name[NUM_RTX_CODE] = {\n #include \"rtl.def\"\t\t/* rtl expressions are documented here */\n };\n \n@@ -117,7 +117,7 @@ const char * const rtx_name[] = {\n \n #define DEF_MACHMODE(SYM, NAME, CLASS, BITSIZE, SIZE, UNIT, WIDER)  NAME,\n \n-const char * const mode_name[] = {\n+const char * const mode_name[NUM_MACHINE_MODES] = {\n #include \"machmode.def\"\n };\n \n@@ -127,7 +127,7 @@ const char * const mode_name[] = {\n \n #define DEF_MACHMODE(SYM, NAME, CLASS, BITSIZE, SIZE, UNIT, WIDER)  CLASS,\n \n-const enum mode_class mode_class[] = {\n+const enum mode_class mode_class[NUM_MACHINE_MODES] = {\n #include \"machmode.def\"\n };\n \n@@ -138,7 +138,7 @@ const enum mode_class mode_class[] = {\n \n #define DEF_MACHMODE(SYM, NAME, CLASS, BITSIZE, SIZE, UNIT, WIDER)  BITSIZE,\n \n-const unsigned int mode_bitsize[] = {\n+const unsigned short mode_bitsize[NUM_MACHINE_MODES] = {\n #include \"machmode.def\"\n };\n \n@@ -149,7 +149,7 @@ const unsigned int mode_bitsize[] = {\n \n #define DEF_MACHMODE(SYM, NAME, CLASS, BITSIZE, SIZE, UNIT, WIDER)  SIZE,\n \n-const unsigned int mode_size[] = {\n+const unsigned char mode_size[NUM_MACHINE_MODES] = {\n #include \"machmode.def\"\n };\n \n@@ -160,7 +160,7 @@ const unsigned int mode_size[] = {\n \n #define DEF_MACHMODE(SYM, NAME, CLASS, BITSIZE, SIZE, UNIT, WIDER)  UNIT,\n \n-const unsigned int mode_unit_size[] = {\n+const unsigned char mode_unit_size[NUM_MACHINE_MODES] = {\n #include \"machmode.def\"\t\t/* machine modes are documented here */\n };\n \n@@ -173,7 +173,7 @@ const unsigned int mode_unit_size[] = {\n #define DEF_MACHMODE(SYM, NAME, CLASS, BITSIZE, SIZE, UNIT, WIDER)  \\\n   (unsigned char) WIDER,\n \n-const unsigned char mode_wider_mode[] = {\n+const unsigned char mode_wider_mode[NUM_MACHINE_MODES] = {\n #include \"machmode.def\"\t\t/* machine modes are documented here */\n };\n \n@@ -184,7 +184,7 @@ const unsigned char mode_wider_mode[] = {\n \n /* Indexed by machine mode, gives mask of significant bits in mode.  */\n \n-const unsigned HOST_WIDE_INT mode_mask_array[] = {\n+const unsigned HOST_WIDE_INT mode_mask_array[NUM_MACHINE_MODES] = {\n #include \"machmode.def\"\n };\n \n@@ -214,7 +214,7 @@ const enum machine_mode class_narrowest_mode[(int) MAX_MODE_CLASS] = {\n    rtx's of that code.  The sequence is a C string in which\n    each character describes one operand.  */\n \n-const char * const rtx_format[] = {\n+const char * const rtx_format[NUM_RTX_CODE] = {\n   /* \"*\" undefined.\n          can cause a warning message\n      \"0\" field is unused (or used in a phase-dependent manner)\n@@ -249,7 +249,7 @@ const char * const rtx_format[] = {\n /* Indexed by rtx code, gives a character representing the \"class\" of\n    that rtx code.  See rtl.def for documentation on the defined classes.  */\n \n-const char rtx_class[] = {\n+const char rtx_class[NUM_RTX_CODE] = {\n #define DEF_RTL_EXPR(ENUM, NAME, FORMAT, CLASS)   CLASS,\n #include \"rtl.def\"\t\t/* rtl expressions are defined here */\n #undef DEF_RTL_EXPR"}, {"sha": "ff293339717d23c9197ff0585c4a1783e77528d1", "filename": "gcc/rtl.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86460bab0239d2bbcdef1b500dbb9f0d08d40776/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86460bab0239d2bbcdef1b500dbb9f0d08d40776/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=86460bab0239d2bbcdef1b500dbb9f0d08d40776", "patch": "@@ -51,16 +51,16 @@ enum rtx_code  {\n #define NUM_RTX_CODE ((int)LAST_AND_UNUSED_RTX_CODE)\n \t\t\t\t/* The cast here, saves many elsewhere.  */\n \n-extern const int rtx_length[];\n+extern const unsigned char rtx_length[NUM_RTX_CODE];\n #define GET_RTX_LENGTH(CODE)\t\t(rtx_length[(int) (CODE)])\n \n-extern const char * const rtx_name[];\n+extern const char * const rtx_name[NUM_RTX_CODE];\n #define GET_RTX_NAME(CODE)\t\t(rtx_name[(int) (CODE)])\n \n-extern const char * const rtx_format[];\n+extern const char * const rtx_format[NUM_RTX_CODE];\n #define GET_RTX_FORMAT(CODE)\t\t(rtx_format[(int) (CODE)])\n \n-extern const char rtx_class[];\n+extern const char rtx_class[NUM_RTX_CODE];\n #define GET_RTX_CLASS(CODE)\t\t(rtx_class[(int) (CODE)])\n \f\n /* The flags and bitfields of an ADDR_DIFF_VEC.  BASE is the base label"}]}