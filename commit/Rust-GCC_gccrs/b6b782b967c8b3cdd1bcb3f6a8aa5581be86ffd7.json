{"sha": "b6b782b967c8b3cdd1bcb3f6a8aa5581be86ffd7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZiNzgyYjk2N2M4YjNjZGQxYmNiM2Y2YThhYTU1ODFiZTg2ZmZkNw==", "commit": {"author": {"name": "David Sherwood", "email": "david.sherwood@arm.com", "date": "2015-01-21T17:53:55Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-01-21T17:53:55Z"}, "message": "aarch64.h (CANNOT_CHANGE_MODE_CLASS): Removed.\n\ngcc/\n2015-01-21  David Sherwood  <david.sherwood@arm.com>\n\t    Tejas Belagod <Tejas.Belagod@arm.com>\n\n\t* config/aarch64/aarch64.h (CANNOT_CHANGE_MODE_CLASS): Removed.\n\t* config/aarch64/aarch64.c (aarch64_cannot_change_mode_class): Removed.\n\t* config/aarch64/aarch64-protos.h (aarch64_cannot_change_mode_class):\n\tRemoved.\n\nCo-Authored-By: Tejas Belagod <tejas.belagod@arm.com>\n\nFrom-SVN: r219960", "tree": {"sha": "97d7417e0c108e9ed952b018a415bfc0c3aa9c08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97d7417e0c108e9ed952b018a415bfc0c3aa9c08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6b782b967c8b3cdd1bcb3f6a8aa5581be86ffd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6b782b967c8b3cdd1bcb3f6a8aa5581be86ffd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6b782b967c8b3cdd1bcb3f6a8aa5581be86ffd7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6b782b967c8b3cdd1bcb3f6a8aa5581be86ffd7/comments", "author": {"login": "david-arm", "id": 57997763, "node_id": "MDQ6VXNlcjU3OTk3NzYz", "avatar_url": "https://avatars.githubusercontent.com/u/57997763?v=4", "gravatar_id": "", "url": "https://api.github.com/users/david-arm", "html_url": "https://github.com/david-arm", "followers_url": "https://api.github.com/users/david-arm/followers", "following_url": "https://api.github.com/users/david-arm/following{/other_user}", "gists_url": "https://api.github.com/users/david-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/david-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/david-arm/subscriptions", "organizations_url": "https://api.github.com/users/david-arm/orgs", "repos_url": "https://api.github.com/users/david-arm/repos", "events_url": "https://api.github.com/users/david-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/david-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "668046d17599f7596f01cfbb8ebd0f00c4531e5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/668046d17599f7596f01cfbb8ebd0f00c4531e5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/668046d17599f7596f01cfbb8ebd0f00c4531e5b"}], "stats": {"total": 62, "additions": 8, "deletions": 54}, "files": [{"sha": "a08d231b72d301930cd27ed9b0e225e20b7cfb55", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b782b967c8b3cdd1bcb3f6a8aa5581be86ffd7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b782b967c8b3cdd1bcb3f6a8aa5581be86ffd7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b6b782b967c8b3cdd1bcb3f6a8aa5581be86ffd7", "patch": "@@ -1,3 +1,11 @@\n+2015-01-21  David Sherwood  <david.sherwood@arm.com>\n+\t    Tejas Belagod <Tejas.Belagod@arm.com>\n+\n+\t* config/aarch64/aarch64.h (CANNOT_CHANGE_MODE_CLASS): Removed.\n+\t* config/aarch64/aarch64.c (aarch64_cannot_change_mode_class): Removed.\n+\t* config/aarch64/aarch64-protos.h (aarch64_cannot_change_mode_class):\n+\tRemoved.\n+\n 2015-01-21  David Sherwood  <david.sherwood@arm.com>\n \t    Tejas Belagod <Tejas.Belagod@arm.com>\n "}, {"sha": "59c5824f894cf5dafe93a996180056696518feb4", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b782b967c8b3cdd1bcb3f6a8aa5581be86ffd7/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b782b967c8b3cdd1bcb3f6a8aa5581be86ffd7/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=b6b782b967c8b3cdd1bcb3f6a8aa5581be86ffd7", "patch": "@@ -182,9 +182,6 @@ struct tune_params\n HOST_WIDE_INT aarch64_initial_elimination_offset (unsigned, unsigned);\n int aarch64_get_condition_code (rtx);\n bool aarch64_bitmask_imm (HOST_WIDE_INT val, machine_mode);\n-bool aarch64_cannot_change_mode_class (machine_mode,\n-\t\t\t\t       machine_mode,\n-\t\t\t\t       enum reg_class);\n enum aarch64_symbol_type\n aarch64_classify_symbolic_expression (rtx, enum aarch64_symbol_context);\n bool aarch64_const_vec_all_same_int_p (rtx, HOST_WIDE_INT);"}, {"sha": "dd49fcd89d8a9bde27446a84ae4668a3a84ed080", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b782b967c8b3cdd1bcb3f6a8aa5581be86ffd7/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b782b967c8b3cdd1bcb3f6a8aa5581be86ffd7/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=b6b782b967c8b3cdd1bcb3f6a8aa5581be86ffd7", "patch": "@@ -10175,54 +10175,6 @@ aarch64_vectorize_vec_perm_const_ok (machine_mode vmode,\n   return ret;\n }\n \n-/* Implement target hook CANNOT_CHANGE_MODE_CLASS.  */\n-bool\n-aarch64_cannot_change_mode_class (machine_mode from,\n-\t\t\t\t  machine_mode to,\n-\t\t\t\t  enum reg_class rclass)\n-{\n-  /* Full-reg subregs are allowed on general regs or any class if they are\n-     the same size.  */\n-  if (GET_MODE_SIZE (from) == GET_MODE_SIZE (to)\n-      || !reg_classes_intersect_p (FP_REGS, rclass))\n-    return false;\n-\n-  /* Limited combinations of subregs are safe on FPREGs.  Particularly,\n-     1. Vector Mode to Scalar mode where 1 unit of the vector is accessed.\n-     2. Scalar to Scalar for integer modes or same size float modes.\n-     3. Vector to Vector modes.\n-     4. On little-endian only, Vector-Structure to Vector modes.  */\n-  if (GET_MODE_SIZE (from) > GET_MODE_SIZE (to))\n-    {\n-      if (aarch64_vector_mode_supported_p (from)\n-\t  && GET_MODE_SIZE (GET_MODE_INNER (from)) == GET_MODE_SIZE (to))\n-\treturn false;\n-\n-      if (GET_MODE_NUNITS (from) == 1\n-\t  && GET_MODE_NUNITS (to) == 1\n-\t  && (GET_MODE_CLASS (from) == MODE_INT\n-\t      || from == to))\n-\treturn false;\n-\n-      if (aarch64_vector_mode_supported_p (from)\n-\t  && aarch64_vector_mode_supported_p (to))\n-\treturn false;\n-\n-      /* Within an vector structure straddling multiple vector registers\n-\t we are in a mixed-endian representation.  As such, we can't\n-\t easily change modes for BYTES_BIG_ENDIAN.  Otherwise, we can\n-\t switch between vectors and vector structures cheaply.  */\n-      if (!BYTES_BIG_ENDIAN)\n-\tif ((aarch64_vector_mode_supported_p (from)\n-\t      && aarch64_vect_struct_mode_p (to))\n-\t    || (aarch64_vector_mode_supported_p (to)\n-\t      && aarch64_vect_struct_mode_p (from)))\n-\t  return false;\n-    }\n-\n-  return true;\n-}\n-\n rtx\n aarch64_reverse_mask (enum machine_mode mode)\n {"}, {"sha": "bf59e40a64459f6daddef47a5f5214adfd92d9b6", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b782b967c8b3cdd1bcb3f6a8aa5581be86ffd7/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b782b967c8b3cdd1bcb3f6a8aa5581be86ffd7/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=b6b782b967c8b3cdd1bcb3f6a8aa5581be86ffd7", "patch": "@@ -879,9 +879,6 @@ do {\t\t\t\t\t\t\t\t\t     \\\n   extern void  __aarch64_sync_cache_range (void *, void *);\t\\\n   __aarch64_sync_cache_range (beg, end)\n \n-#define CANNOT_CHANGE_MODE_CLASS(FROM, TO, CLASS)\t\\\n-  aarch64_cannot_change_mode_class (FROM, TO, CLASS)\n-\n #define SHIFT_COUNT_TRUNCATED !TARGET_SIMD\n \n /* Choose appropriate mode for caller saves, so we do the minimum"}]}