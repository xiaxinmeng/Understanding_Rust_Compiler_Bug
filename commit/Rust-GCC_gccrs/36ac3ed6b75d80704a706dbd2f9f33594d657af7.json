{"sha": "36ac3ed6b75d80704a706dbd2f9f33594d657af7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZhYzNlZDZiNzVkODA3MDRhNzA2ZGJkMmY5ZjMzNTk0ZDY1N2FmNw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-06-05T21:23:59Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-06-05T21:23:59Z"}, "message": "random (mersenne_twister<>::seed()): Fix per tr1/5.1.4.2, p8.\n\n2006-06-05  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/random (mersenne_twister<>::seed()): Fix per\n\ttr1/5.1.4.2, p8.\n\t* include/tr1/random.tcc (mod_w): Add.\n\t(mersenne_twister<>::seed(unsigned long)): Fix per tr1/5.1.4.2, p9.\n\t(mersenne_twister<>::seed(Gen&, false_type)): Adjust to use mod_w.\n\t* testsuite/tr1/5_numerical_facilies/random/mt19937.cc: Fix\n\texpected result per tr1/5.1.5, p2.\n\t* testsuite/tr1/5_numerical_facilies/random/mersenne_twister/\n\tcons/default.cc: Adjust.\n\n\t* include/tr1/random (exponential_distribution<>::operator()()): Fix.\n\nFrom-SVN: r114412", "tree": {"sha": "bd7d9cd49961fed4289e3426f57cfd1814862fa1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd7d9cd49961fed4289e3426f57cfd1814862fa1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36ac3ed6b75d80704a706dbd2f9f33594d657af7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36ac3ed6b75d80704a706dbd2f9f33594d657af7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36ac3ed6b75d80704a706dbd2f9f33594d657af7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36ac3ed6b75d80704a706dbd2f9f33594d657af7/comments", "author": null, "committer": null, "parents": [{"sha": "596475f03646e2daea558bc5cb24dcb345895f3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/596475f03646e2daea558bc5cb24dcb345895f3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/596475f03646e2daea558bc5cb24dcb345895f3a"}], "stats": {"total": 108, "additions": 56, "deletions": 52}, "files": [{"sha": "1203fc6f6e8819243f054be8b77ffeb4818892b4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36ac3ed6b75d80704a706dbd2f9f33594d657af7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36ac3ed6b75d80704a706dbd2f9f33594d657af7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=36ac3ed6b75d80704a706dbd2f9f33594d657af7", "patch": "@@ -1,3 +1,17 @@\n+2006-06-05  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/random (mersenne_twister<>::seed()): Fix per\n+\ttr1/5.1.4.2, p8.\n+\t* include/tr1/random.tcc (mod_w): Add.\n+\t(mersenne_twister<>::seed(unsigned long)): Fix per tr1/5.1.4.2, p9.\n+\t(mersenne_twister<>::seed(Gen&, false_type)): Adjust to use mod_w.\n+\t* testsuite/tr1/5_numerical_facilies/random/mt19937.cc: Fix\n+\texpected result per tr1/5.1.5, p2.\n+\t* testsuite/tr1/5_numerical_facilies/random/mersenne_twister/\n+\tcons/default.cc: Adjust.\n+\n+\t* include/tr1/random (exponential_distribution<>::operator()()): Fix.\n+\n 2006-06-05  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1/random.tcc (Max::value()): Cast 1 to Tp(1) and"}, {"sha": "2d86cdbe15454341782c98c03911ae302364c626", "filename": "libstdc++-v3/include/tr1/random", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36ac3ed6b75d80704a706dbd2f9f33594d657af7/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36ac3ed6b75d80704a706dbd2f9f33594d657af7/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom?ref=36ac3ed6b75d80704a706dbd2f9f33594d657af7", "patch": "@@ -493,7 +493,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \n       void\n       seed()\n-      { seed(0UL); }\n+      { seed(5489UL); }\n \n       void\n       seed(unsigned long value);\n@@ -1560,7 +1560,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       template<class _UniformRandomNumberGenerator>\n         result_type\n         operator()(_UniformRandomNumberGenerator& __urng)\n-        { return std::log(__urng) / _M_lambda; }\n+        { return -std::log(__urng()) / _M_lambda; }\n \n       /**\n        * Inserts a %exponential_distribution random number distribution"}, {"sha": "1b252e8f628400d8ab2a08ab6dfab8f64fd8fbb6", "filename": "libstdc++-v3/include/tr1/random.tcc", "status": "modified", "additions": 38, "deletions": 48, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36ac3ed6b75d80704a706dbd2f9f33594d657af7/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36ac3ed6b75d80704a706dbd2f9f33594d657af7/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc?ref=36ac3ed6b75d80704a706dbd2f9f33594d657af7", "patch": "@@ -113,6 +113,11 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t{ return x; }\n       };\n \n+    template<typename _Tp, _Tp w>\n+      inline _Tp\n+      mod_w(_Tp x)\n+      { return Mod_w<_Tp, w, w == std::numeric_limits<_Tp>::digits>::calc(x); }\n+\n     // Selector to return the maximum value possible that will fit in \n     // @p w bits of @p _Tp.\n     template<typename _Tp, _Tp w, bool>\n@@ -229,28 +234,19 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     mersenne_twister<_UInt, w, n, m, r, a, u, s, b, t, c, l>::\n     seed(unsigned long value)\n     {\n-      if (value == 0)\n-\tvalue = 4357;\n-      \n-#if 0\n-      // @todo handle case numeric_limits<_UInt>::digits > 32\n-      if (std::numeric_limits<_UInt>::digits > 32)\n-\t{\n-\t  std::tr1::linear_congruential<unsigned long, 69069, 0, 2**32> lcg(value);\n-\t  seed(lcg);\n-\t}\n-      else\n+      _M_x[0] = _Private::mod_w<_UInt, w>(value);\n+\n+      for (int i = 1; i < n; ++i)\n \t{\n-\t  std::tr1::linear_congruential<unsigned long, 69069, 0, 0> lcg(value);\n-\t  seed(lcg);\n+\t  _UInt x = _M_x[i - 1];\n+\t  x ^= x >> (w - 2);\n+\t  x *= 1812433253ul;\n+\t  x += i;\n+\t  _M_x[i] = _Private::mod_w<_UInt, w>(x);\t  \n \t}\n-#else\n-      std::tr1::linear_congruential<unsigned long, 69069, 0, 0> lcg(value);\n-      seed(lcg);\n-#endif\n+      _M_p = n;\n     }\n \n-\n   template<class _UInt, int w, int n, int m, int r,\n \t   _UInt a, int u, int s,\n \t   _UInt b, int t, _UInt c, int l>\n@@ -259,13 +255,9 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       mersenne_twister<_UInt, w, n, m, r, a, u, s, b, t, c, l>::\n       seed(Gen& gen, false_type)\n       {\n-\tusing _Private::Mod_w;\n-\tusing std::numeric_limits;\n-\n-\tfor (int i = 0; i < state_size; ++i)\n-\t  _M_x[i] = Mod_w<_UInt, w,\n-\t                  w == numeric_limits<_UInt>::digits>::calc(gen());\n-\t_M_p = state_size + 1;\n+\tfor (int i = 0; i < n; ++i)\n+\t  _M_x[i] = _Private::mod_w<_UInt, w>(gen());\n+\t_M_p = n;\n       }\n \n   template<class _UInt, int w, int n, int m, int r,\n@@ -281,7 +273,6 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       return Max_w<_UInt, w, w == numeric_limits<_UInt>::digits>::value();\n     }\n \n-\n   template<class _UInt, int w, int n, int m, int r,\n \t   _UInt a, int u, int s,\n \t   _UInt b, int t, _UInt c, int l>\n@@ -290,8 +281,8 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     mersenne_twister<_UInt, w, n, m, r, a, u, s, b, t, c, l>::\n     operator()()\n     {\n-      // reload the vector - cost is O(n) amortized over n calls.\n-      if (_M_p >= state_size)\n+      // Reload the vector - cost is O(n) amortized over n calls.\n+      if (_M_p >= n)\n \t{\n \t  const _UInt upper_mask = (~_UInt()) << r;\n \t  const _UInt lower_mask = ~upper_mask;\n@@ -311,14 +302,14 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t  _M_p = 0;\n \t}\n \n-      // Calculate x(i)\n-      result_type y = _M_x[_M_p++];\n-      y ^= (y >> u);\n-      y ^= (y << s) & b;\n-      y ^= (y << t) & c;\n-      y ^= (y >> l);\n-      \n-      return y;\n+      // Calculate o(x(i)).\n+      result_type z = _M_x[_M_p++];\n+      z ^= (z >> u);\n+      z ^= (z << s) & b;\n+      z ^= (z << t) & c;\n+      z ^= (z >> l);\n+\n+      return z;\n     }\n \n \n@@ -329,15 +320,14 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     {\n       std::tr1::linear_congruential<unsigned long, 40014, 0, 2147483563>\n \tlcg(__value);\n-      \n+\n       for (int i = 0; i < long_lag; ++i)\n \t_M_x[i] = _Private::mod<_IntType, 1, 0, modulus>(lcg());\n-\t\n+\n       _M_carry = (_M_x[long_lag - 1] == 0) ? 1 : 0;\n       _M_p = 0;\n     }\n \n-  \n   //\n   // This implementation differs from the tr1 spec because the tr1 spec refused\n   // to make any sense to me:  the exponent of the factor in the spec goes from\n@@ -367,18 +357,18 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       _M_carry = (_M_x[long_lag - 1] == 0) ? 1 : 0;\n       _M_p = 0;\n     }\n-  \n \n   template<typename _IntType, _IntType __m, int __s, int __r>\n     typename subtract_with_carry<_IntType, __m, __s, __r>::result_type\n     subtract_with_carry<_IntType, __m, __s, __r>::\n     operator()()\n     {\n-      // derive short lag index from current index\n+      // Derive short lag index from current index.\n       int ps = _M_p - short_lag;\n-      if (ps < 0) ps += long_lag;\n-      \n-      // calculate new x(i) without overflow or division\n+      if (ps < 0)\n+\tps += long_lag;\n+\n+      // Calculate new x(i) without overflow or division.\n       _IntType xi;\n       if (_M_x[ps] >= _M_x[_M_p] + _M_carry)\n \t{\n@@ -391,15 +381,15 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t  _M_carry = 1;\n \t}\n       _M_x[_M_p++] = xi;\n-      \n-      // adjust current index to loop around in ring buffer\n+\n+      // Adjust current index to loop around in ring buffer.\n       if (_M_p >= long_lag)\n \t_M_p = 0;\n-      \n+\n       return xi;\n     }\n \n-  \n+\n   template<class _E, int __p, int __r>\n     typename discard_block<_E, __p, __r>::result_type\n     discard_block<_E, __p, __r>::"}, {"sha": "459bb47215264dedd1d5c0d35ec1b3d65aa7f16f", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilies/random/mersenne_twister/cons/default.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36ac3ed6b75d80704a706dbd2f9f33594d657af7/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fmersenne_twister%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36ac3ed6b75d80704a706dbd2f9f33594d657af7/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fmersenne_twister%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fmersenne_twister%2Fcons%2Fdefault.cc?ref=36ac3ed6b75d80704a706dbd2f9f33594d657af7", "patch": "@@ -38,7 +38,7 @@ test01()\n   \n   VERIFY( x.min() == 0 );\n   VERIFY( x.max() == 4294967295ul );\n-  VERIFY( x() == 4290933890ul );\n+  VERIFY( x() == 3499211612ul );\n }\n \n int main()"}, {"sha": "a3ddb3d9e3e524284d2dd29e2be2d61586c90f96", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilies/random/mt19937.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36ac3ed6b75d80704a706dbd2f9f33594d657af7/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fmt19937.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36ac3ed6b75d80704a706dbd2f9f33594d657af7/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fmt19937.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fmt19937.cc?ref=36ac3ed6b75d80704a706dbd2f9f33594d657af7", "patch": "@@ -33,7 +33,7 @@ test01()\n   for (int i = 0; i < 9999; ++i)\n     a();\n   \n-  VERIFY( a() == 3346425566ul );\n+  VERIFY( a() == 4123659995ul );\n }\n \n int main()"}]}