{"sha": "1c5dd43ff7c78bbdba5e89a6cb16a3e50e1abff9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM1ZGQ0M2ZmN2M3OGJiZGJhNWU4OWE2Y2IxNmEzZTUwZTFhYmZmOQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zackw@stanford.edu", "date": "2001-06-15T17:57:48Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-06-15T17:57:48Z"}, "message": "cpp.texi: Formatting corrections.\n\n* doc/cpp.texi: Formatting corrections.\nCorrect buggy example of use of __GNUC__ etc.\nClarify $ in identifiers.\n* doc/cpp.1: Regenerate.\n\nFrom-SVN: r43404", "tree": {"sha": "da980fe6a542099df4eef7fef8e91437ee178285", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da980fe6a542099df4eef7fef8e91437ee178285"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c5dd43ff7c78bbdba5e89a6cb16a3e50e1abff9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c5dd43ff7c78bbdba5e89a6cb16a3e50e1abff9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c5dd43ff7c78bbdba5e89a6cb16a3e50e1abff9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c5dd43ff7c78bbdba5e89a6cb16a3e50e1abff9/comments", "author": null, "committer": null, "parents": [{"sha": "76791f3d9585c62d1705533e4301e0199358d49b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76791f3d9585c62d1705533e4301e0199358d49b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76791f3d9585c62d1705533e4301e0199358d49b"}], "stats": {"total": 893, "additions": 426, "deletions": 467}, "files": [{"sha": "2ba760a291c19a0fd7d2b20fca2b1b32f332d11c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c5dd43ff7c78bbdba5e89a6cb16a3e50e1abff9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c5dd43ff7c78bbdba5e89a6cb16a3e50e1abff9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c5dd43ff7c78bbdba5e89a6cb16a3e50e1abff9", "patch": "@@ -1,3 +1,10 @@\n+2001-06-15  Zack Weinberg  <zackw@stanford.edu>\n+\n+\t* doc/cpp.texi: Formatting corrections.\n+\tCorrect buggy example of use of __GNUC__ etc.\n+\tClarify $ in identifiers.\n+\t* doc/cpp.1: Regenerate.\n+\n Fri Jun 15 19:35:38 CEST 2001 Jan Hubicka  <jh@suse.cz>\n \n \t* optabs.c (expand_twoval_binop): Avoid undefined behaviour."}, {"sha": "8da0326b212f7aebc4fd3b9d8a9dfdf408fe7313", "filename": "gcc/doc/cpp.1", "status": "modified", "additions": 100, "deletions": 168, "changes": 268, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c5dd43ff7c78bbdba5e89a6cb16a3e50e1abff9/gcc%2Fdoc%2Fcpp.1", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c5dd43ff7c78bbdba5e89a6cb16a3e50e1abff9/gcc%2Fdoc%2Fcpp.1", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.1?ref=1c5dd43ff7c78bbdba5e89a6cb16a3e50e1abff9", "patch": "@@ -1,5 +1,5 @@\n .\\\" Automatically generated by Pod::Man version 1.16\n-.\\\" Fri Jun 15 00:04:02 2001\n+.\\\" Fri Jun 15 10:40:40 2001\n .\\\"\n .\\\" Standard preamble:\n .\\\" ======================================================================\n@@ -180,7 +180,7 @@ Wherever possible, you should use a preprocessor geared to the language\n you are writing in.  Modern versions of the \\s-1GNU\\s0 assembler have macro\n facilities.  Most high level programming languages have their own\n conditional compilation and inclusion mechanism.  If all else fails,\n-try a true general text processor, such as \\f(CW@docref\\fR{M4}.\n+try a true general text processor, such as \\s-1GNU\\s0 M4.\n .PP\n C preprocessors vary in some details.  This manual discusses the \\s-1GNU\\s0 C\n preprocessor, which provides a small superset of the features of \\s-1ISO\\s0\n@@ -208,12 +208,10 @@ appear immediately after the option letter, or with a space between\n option and argument:  \\fB\\-Ifoo\\fR and \\fB\\-I foo\\fR have the same\n effect.  Long options that take arguments require a space between option\n and argument.\n-.if n .Ip \"\\f(CW\"\"\\-D \\f(CIname\\f(CW\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-D \\f(CIname\\f(CW\\fR\" 4\n+.Ip \"\\fB\\-D\\fR \\fIname\\fR\" 4\n .IX Item \"-D name\"\n-Predefine \\fIname\\fR as a macro, with definition \\fB1\\fR.\n-.if n .Ip \"\\f(CW\"\"\\-D \\f(CIname\\f(CW=\\f(CIdefinition\\f(CW\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-D \\f(CIname\\f(CW=\\f(CIdefinition\\f(CW\\fR\" 4\n+Predefine \\fIname\\fR as a macro, with definition \\f(CW\\*(C`1\\*(C'\\fR.\n+.Ip \"\\fB\\-D\\fR \\fIname\\fR\\fB=\\fR\\fIdefinition\\fR\" 4\n .IX Item \"-D name=definition\"\n Predefine \\fIname\\fR as a macro, with definition \\fIdefinition\\fR.\n There are no restrictions on the contents of \\fIdefinition\\fR, but if\n@@ -228,21 +226,18 @@ its argument list with surrounding parentheses before the equals sign\n (if any).  Parentheses are meaningful to most shells, so you will need\n to quote the option.  With \\fBsh\\fR and \\fBcsh\\fR,\n \\&\\fB\\-D'\\fR\\fIname\\fR\\fB(\\fR\\fIargs...\\fR\\fB)=\\fR\\fIdefinition\\fR\\fB'\\fR works.\n-.if n .Ip \"\\f(CW\"\"\\-U \\f(CIname\\f(CW\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-U \\f(CIname\\f(CW\\fR\" 4\n+.Ip \"\\fB\\-U\\fR \\fIname\\fR\" 4\n .IX Item \"-U name\"\n Cancel any previous definition of \\fIname\\fR, either built in or\n provided with a \\fB\\-D\\fR option.\n .Sp\n All \\fB\\-imacros\\fR \\fIfile\\fR and \\fB\\-include\\fR \\fIfile\\fR options\n are processed after all \\fB\\-D\\fR and \\fB\\-U\\fR options.\n-.if n .Ip \"\\f(CW\"\"\\-undef\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-undef\\fR\" 4\n+.Ip \"\\fB\\-undef\\fR\" 4\n .IX Item \"-undef\"\n Do not predefine any system-specific macros.  The common predefined\n macros remain defined.\n-.if n .Ip \"\\f(CW\"\"\\-I \\f(CIdir\\f(CW\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-I \\f(CIdir\\f(CW\\fR\" 4\n+.Ip \"\\fB\\-I\\fR \\fIdir\\fR\" 4\n .IX Item \"-I dir\"\n Add the directory \\fIdir\\fR to the list of directories to be searched\n for header files.    Directories named by \\fB\\-I\\fR\n@@ -252,126 +247,107 @@ It is dangerous to specify a standard system include directory in an\n \\&\\fB\\-I\\fR option.  This defeats the special treatment of system\n headers.  It can also defeat the repairs to\n buggy system headers which \\s-1GCC\\s0 makes when it is installed.\n-.if n .Ip \"\\f(CW\"\"\\-o \\f(CIfile\\f(CW\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-o \\f(CIfile\\f(CW\\fR\" 4\n+.Ip \"\\fB\\-o\\fR \\fIfile\\fR\" 4\n .IX Item \"-o file\"\n Write output to \\fIfile\\fR.  This is the same as specifying \\fIfile\\fR\n as the second non-option argument to \\fBcpp\\fR.  \\fBgcc\\fR has a\n different interpretation of a second non-option argument, so you must\n use \\fB\\-o\\fR to specify the output file.\n-.if n .Ip \"\\f(CW\"\"\\-Wall\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-Wall\\fR\" 4\n+.Ip \"\\fB\\-Wall\\fR\" 4\n .IX Item \"-Wall\"\n Turns on all optional warnings which are desirable for normal code.  At\n present this is \\fB\\-Wcomment\\fR and \\fB\\-Wtrigraphs\\fR.  Note that\n many of the preprocessor's warnings are on by default and have no\n options to control them.\n-.if n .Ip \"\\f(CW\"\"\\-Wcomment\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-Wcomment\\fR\" 4\n+.Ip \"\\fB\\-Wcomment\\fR\" 4\n .IX Item \"-Wcomment\"\n .PD 0\n-.if n .Ip \"\\f(CW\"\"\\-Wcomments\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-Wcomments\\fR\" 4\n+.Ip \"\\fB\\-Wcomments\\fR\" 4\n .IX Item \"-Wcomments\"\n .PD\n Warn whenever a comment-start sequence \\fB/*\\fR appears in a \\fB/*\\fR\n comment, or whenever a backslash-newline appears in a \\fB//\\fR comment.\n (Both forms have the same effect.)\n-.if n .Ip \"\\f(CW\"\"\\-Wtrigraphs\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-Wtrigraphs\\fR\" 4\n+.Ip \"\\fB\\-Wtrigraphs\\fR\" 4\n .IX Item \"-Wtrigraphs\"\n Warn if any trigraphs are encountered.  This option used to take effect\n only if \\fB\\-trigraphs\\fR was also specified, but now works\n independently.  Warnings are not given for trigraphs within comments, as\n they do not affect the meaning of the program.\n-.if n .Ip \"\\f(CW\"\"\\-Wtraditional\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-Wtraditional\\fR\" 4\n+.Ip \"\\fB\\-Wtraditional\\fR\" 4\n .IX Item \"-Wtraditional\"\n Warn about certain constructs that behave differently in traditional and\n \\&\\s-1ISO\\s0 C.  Also warn about \\s-1ISO\\s0 C constructs that have no traditional C\n equivalent, and problematic constructs which should be avoided.\n-.if n .Ip \"\\f(CW\"\"\\-Wimport\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-Wimport\\fR\" 4\n+.Ip \"\\fB\\-Wimport\\fR\" 4\n .IX Item \"-Wimport\"\n Warn the first time \\fB#import\\fR is used.\n-.if n .Ip \"\\f(CW\"\"\\-Wundef\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-Wundef\\fR\" 4\n+.Ip \"\\fB\\-Wundef\\fR\" 4\n .IX Item \"-Wundef\"\n Warn whenever an identifier which is not a macro is encountered in an\n \\&\\fB#if\\fR directive, outside of \\fBdefined\\fR.  Such identifiers are\n replaced with zero.\n-.if n .Ip \"\\f(CW\"\"\\-Werror\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-Werror\\fR\" 4\n+.Ip \"\\fB\\-Werror\\fR\" 4\n .IX Item \"-Werror\"\n Make all warnings into hard errors.  Source code which triggers warnings\n will be rejected.\n-.if n .Ip \"\\f(CW\"\"\\-Wsystem\\-headers\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-Wsystem\\-headers\\fR\" 4\n+.Ip \"\\fB\\-Wsystem-headers\\fR\" 4\n .IX Item \"-Wsystem-headers\"\n Issue warnings for code in system headers.  These are normally unhelpful\n in finding bugs in your own code, therefore suppressed.  If you are\n responsible for the system library, you may want to see them.\n-.if n .Ip \"\\f(CW\"\"\\-w\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-w\\fR\" 4\n+.Ip \"\\fB\\-w\\fR\" 4\n .IX Item \"-w\"\n Suppress all warnings, including those which \\s-1GNU\\s0 \\s-1CPP\\s0 issues by default.\n-.if n .Ip \"\\f(CW\"\"\\-pedantic\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-pedantic\\fR\" 4\n+.Ip \"\\fB\\-pedantic\\fR\" 4\n .IX Item \"-pedantic\"\n Issue all the mandatory diagnostics listed in the C standard.  Some of\n them are left out by default, since they trigger frequently on harmless\n code.\n-.if n .Ip \"\\f(CW\"\"\\-pedantic\\-errors\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-pedantic\\-errors\\fR\" 4\n+.Ip \"\\fB\\-pedantic-errors\\fR\" 4\n .IX Item \"-pedantic-errors\"\n Issue all the mandatory diagnostics, and make all mandatory diagnostics\n into errors.  This includes mandatory diagnostics that \\s-1GCC\\s0 issues\n without \\fB\\-pedantic\\fR but treats as warnings.\n-.if n .Ip \"\\f(CW\"\"\\-M\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-M\\fR\" 4\n+.Ip \"\\fB\\-M\\fR\" 4\n .IX Item \"-M\"\n Instead of outputting the result of preprocessing, output a rule\n-suitable for \\f(CW\\*(C`make\\*(C'\\fR describing the dependencies of the main source\n-file.  The preprocessor outputs one \\f(CW\\*(C`make\\*(C'\\fR rule containing the\n-object file name for that source file, a colon, and the names of all the\n-included files, including those coming from \\fB\\-include\\fR or\n+suitable for \\fBmake\\fR describing the dependencies of the main\n+source file.  The preprocessor outputs one \\fBmake\\fR rule containing\n+the object file name for that source file, a colon, and the names of all\n+the included files, including those coming from \\fB\\-include\\fR or\n \\&\\fB\\-imacros\\fR command line options.\n .Sp\n Unless specified explicitly (with \\fB\\-MT\\fR or \\fB\\-MQ\\fR), the\n object file name consists of the basename of the source file with any\n suffix replaced with object file suffix.  If there are many included\n files then the rule is split into several lines using \\fB\\e\\fR\\-newline.\n The rule has no commands.\n-.if n .Ip \"\\f(CW\"\"\\-MM\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-MM\\fR\" 4\n+.Ip \"\\fB\\-MM\\fR\" 4\n .IX Item \"-MM\"\n-Like \\fB\\-M\\fR, but mention only the files included with \\fB#include\n-\"\\fR\\fIfile\\fR\\fB\"\\fR or with \\fB\\-include\\fR or \\fB\\-imacros\\fR command line\n-options.  System header files included with \\fB#include <\\fR\\fIfile\\fR\\fB>\\fR\n+Like \\fB\\-M\\fR, but mention only the files included with \\f(CW\\*(C`#include\\ \"\\f(CIfile\\f(CW\"\\*(C'\\fR or with \\fB\\-include\\fR or \\fB\\-imacros\\fR command line\n+options.  System header files included with \\f(CW\\*(C`#include\\ <\\f(CIfile\\f(CW>\\*(C'\\fR\n are omitted.\n-.if n .Ip \"\\f(CW\"\"\\-MF \\f(CIfile\\f(CW\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-MF \\f(CIfile\\f(CW\\fR\" 4\n+.Ip \"\\fB\\-MF\\fR \\fIfile\\fR\" 4\n .IX Item \"-MF file\"\n When used with \\fB\\-M\\fR or \\fB\\-MM\\fR, specifies a file to write the\n dependencies to.  This allows the preprocessor to write the preprocessed\n file to stdout normally.  If no \\fB\\-MF\\fR switch is given, \\s-1CPP\\s0 sends\n the rules to stdout and suppresses normal preprocessed output.\n-.if n .Ip \"\\f(CW\"\"\\-MG\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-MG\\fR\" 4\n+.Ip \"\\fB\\-MG\\fR\" 4\n .IX Item \"-MG\"\n When used with \\fB\\-M\\fR or \\fB\\-MM\\fR, \\fB\\-MG\\fR says to treat missing\n header files as generated files and assume they live in the same\n directory as the source file.  It suppresses preprocessed output, as a\n missing header file is ordinarily an error.\n .Sp\n This feature is used in automatic updating of makefiles.\n-.if n .Ip \"\\f(CW\"\"\\-MP\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-MP\\fR\" 4\n+.Ip \"\\fB\\-MP\\fR\" 4\n .IX Item \"-MP\"\n This option instructs \\s-1CPP\\s0 to add a phony target for each dependency\n other than the main file, causing each to depend on nothing.  These\n-dummy rules work around errors \\f(CW\\*(C`make\\*(C'\\fR gives if you remove header\n-files without updating the \\f(CW\\*(C`Makefile\\*(C'\\fR to match.\n+dummy rules work around errors \\fBmake\\fR gives if you remove header\n+files without updating the \\fIMakefile\\fR to match.\n .Sp\n This is typical output:\n .Sp\n@@ -381,8 +357,7 @@ This is typical output:\n .Vb 1\n \\&        test.h:\n .Ve\n-.if n .Ip \"\\f(CW\"\"\\-MT \\f(CItarget\\f(CW\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-MT \\f(CItarget\\f(CW\\fR\" 4\n+.Ip \"\\fB\\-MT\\fR \\fItarget\\fR\" 4\n .IX Item \"-MT target\"\n Change the target of the rule emitted by dependency generation.  By\n default \\s-1CPP\\s0 takes the name of the main input file, including any path,\n@@ -398,8 +373,7 @@ For example, \\fB\\-MT\\ '$(objpfx)foo.o'\\fR might give\n .Vb 1\n \\&        $(objpfx)foo.o: foo.c\n .Ve\n-.if n .Ip \"\\f(CW\"\"\\-MQ \\f(CItarget\\f(CW\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-MQ \\f(CItarget\\f(CW\\fR\" 4\n+.Ip \"\\fB\\-MQ\\fR \\fItarget\\fR\" 4\n .IX Item \"-MQ target\"\n Same as \\fB\\-MT\\fR, but it quotes any characters which are special to\n Make. \\fB\\-MQ\\ '$(objpfx)foo.o'\\fR gives\n@@ -409,12 +383,10 @@ Make. \\fB\\-MQ\\ '$(objpfx)foo.o'\\fR gives\n .Ve\n The default target is automatically quoted, as if it were given with\n \\&\\fB\\-MQ\\fR.\n-.if n .Ip \"\\f(CW\"\"\\-MD \\f(CIfile\\f(CW\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-MD \\f(CIfile\\f(CW\\fR\" 4\n+.Ip \"\\fB\\-MD\\fR \\fIfile\\fR\" 4\n .IX Item \"-MD file\"\n .PD 0\n-.if n .Ip \"\\f(CW\"\"\\-MMD \\f(CIfile\\f(CW\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-MMD \\f(CIfile\\f(CW\\fR\" 4\n+.Ip \"\\fB\\-MMD\\fR \\fIfile\\fR\" 4\n .IX Item \"-MMD file\"\n .PD\n \\&\\fB\\-MD\\fR \\fIfile\\fR is equivalent to \\fB\\-M \\-MF\\fR \\fIfile\\fR, and\n@@ -423,18 +395,14 @@ The default target is automatically quoted, as if it were given with\n Due to limitations in the compiler driver, you must use these switches\n when you want to generate a dependency file as a side-effect of normal\n compilation.\n-.if n .Ip \"\\f(CW\"\"\\-x c\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-x c\\fR\" 4\n+.Ip \"\\fB\\-x c\\fR\" 4\n .IX Item \"-x c\"\n .PD 0\n-.if n .Ip \"\\f(CW\"\"\\-x c++\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-x c++\\fR\" 4\n+.Ip \"\\fB\\-x c++\\fR\" 4\n .IX Item \"-x c++\"\n-.if n .Ip \"\\f(CW\"\"\\-x objective\\-c\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-x objective\\-c\\fR\" 4\n+.Ip \"\\fB\\-x objective-c\\fR\" 4\n .IX Item \"-x objective-c\"\n-.if n .Ip \"\\f(CW\"\"\\-x assembler\\-with\\-cpp\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-x assembler\\-with\\-cpp\\fR\" 4\n+.Ip \"\\fB\\-x assembler-with-cpp\\fR\" 4\n .IX Item \"-x assembler-with-cpp\"\n .PD\n Specify the source language: C, \\*(C+, Objective-C, or assembly.  This has\n@@ -450,12 +418,10 @@ generic mode.\n which selected both the language and the standards conformance level.\n This option has been removed, because it conflicts with the \\fB\\-l\\fR\n option.\n-.if n .Ip \"\\f(CW\"\"\\-std=\\f(CIstandard\\f(CW\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-std=\\f(CIstandard\\f(CW\\fR\" 4\n+.Ip \"\\fB\\-std=\\fR\\fIstandard\\fR\" 4\n .IX Item \"-std=standard\"\n .PD 0\n-.if n .Ip \"\\f(CW\"\"\\-ansi\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-ansi\\fR\" 4\n+.Ip \"\\fB\\-ansi\\fR\" 4\n .IX Item \"-ansi\"\n .PD\n Specify the standard to which the code should conform.  Currently cpp\n@@ -465,80 +431,76 @@ added in the future.\n \\&\\fIstandard\\fR\n may be one of:\n .RS 4\n-.if n .Ip \"\\f(CW\"\"iso9899:1990\"\"\\fR\" 4\n+.if n .Ip \"\\f(CW\"\"\"\"iso9899:1990\"\"\"\"\\fR\" 4\n .el .Ip \"\\f(CWiso9899:1990\\fR\" 4\n .IX Item \"iso9899:1990\"\n .PD 0\n-.if n .Ip \"\\f(CW\"\"c89\"\"\\fR\" 4\n+.if n .Ip \"\\f(CW\"\"\"\"c89\"\"\"\"\\fR\" 4\n .el .Ip \"\\f(CWc89\\fR\" 4\n .IX Item \"c89\"\n .PD\n The \\s-1ISO\\s0 C standard from 1990.  \\fBc89\\fR is the customary shorthand for\n this version of the standard.\n .Sp\n The \\fB\\-ansi\\fR option is equivalent to \\fB\\-std=c89\\fR.\n-.if n .Ip \"\\f(CW\"\"iso9899:199409\"\"\\fR\" 4\n+.if n .Ip \"\\f(CW\"\"\"\"iso9899:199409\"\"\"\"\\fR\" 4\n .el .Ip \"\\f(CWiso9899:199409\\fR\" 4\n .IX Item \"iso9899:199409\"\n The 1990 C standard, as amended in 1994.\n-.if n .Ip \"\\f(CW\"\"iso9899:1999\"\"\\fR\" 4\n+.if n .Ip \"\\f(CW\"\"\"\"iso9899:1999\"\"\"\"\\fR\" 4\n .el .Ip \"\\f(CWiso9899:1999\\fR\" 4\n .IX Item \"iso9899:1999\"\n .PD 0\n-.if n .Ip \"\\f(CW\"\"c99\"\"\\fR\" 4\n+.if n .Ip \"\\f(CW\"\"\"\"c99\"\"\"\"\\fR\" 4\n .el .Ip \"\\f(CWc99\\fR\" 4\n .IX Item \"c99\"\n-.if n .Ip \"\\f(CW\"\"iso9899:199x\"\"\\fR\" 4\n+.if n .Ip \"\\f(CW\"\"\"\"iso9899:199x\"\"\"\"\\fR\" 4\n .el .Ip \"\\f(CWiso9899:199x\\fR\" 4\n .IX Item \"iso9899:199x\"\n-.if n .Ip \"\\f(CW\"\"c9x\"\"\\fR\" 4\n+.if n .Ip \"\\f(CW\"\"\"\"c9x\"\"\"\"\\fR\" 4\n .el .Ip \"\\f(CWc9x\\fR\" 4\n .IX Item \"c9x\"\n .PD\n The revised \\s-1ISO\\s0 C standard, published in December 1999.  Before\n publication, this was known as C9X.\n-.if n .Ip \"\\f(CW\"\"gnu89\"\"\\fR\" 4\n+.if n .Ip \"\\f(CW\"\"\"\"gnu89\"\"\"\"\\fR\" 4\n .el .Ip \"\\f(CWgnu89\\fR\" 4\n .IX Item \"gnu89\"\n The 1990 C standard plus \\s-1GNU\\s0 extensions.  This is the default.\n-.if n .Ip \"\\f(CW\"\"gnu99\"\"\\fR\" 4\n+.if n .Ip \"\\f(CW\"\"\"\"gnu99\"\"\"\"\\fR\" 4\n .el .Ip \"\\f(CWgnu99\\fR\" 4\n .IX Item \"gnu99\"\n .PD 0\n-.if n .Ip \"\\f(CW\"\"gnu9x\"\"\\fR\" 4\n+.if n .Ip \"\\f(CW\"\"\"\"gnu9x\"\"\"\"\\fR\" 4\n .el .Ip \"\\f(CWgnu9x\\fR\" 4\n .IX Item \"gnu9x\"\n .PD\n The 1999 C standard plus \\s-1GNU\\s0 extensions.\n .RE\n .RS 4\n .RE\n-.if n .Ip \"\\f(CW\"\"\\-I\\-\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-I\\-\\fR\" 4\n+.Ip \"\\fB\\-I-\\fR\" 4\n .IX Item \"-I-\"\n Split the include path.  Any directories specified with \\fB\\-I\\fR\n options before \\fB\\-I-\\fR are searched only for headers requested with\n-\\&\\fB#include\\ \"\\f(BIfile\\fB\"\\fR; they are not searched for\n-\\&\\fB#include\\ <\\f(BIfile\\fB>\\fR.  If additional directories are\n+\\&\\f(CW\\*(C`#include\\ \"\\f(CIfile\\f(CW\"\\*(C'\\fR; they are not searched for\n+\\&\\f(CW\\*(C`#include\\ <\\f(CIfile\\f(CW>\\*(C'\\fR.  If additional directories are\n specified with \\fB\\-I\\fR options after the \\fB\\-I-\\fR, those\n directories are searched for all \\fB#include\\fR directives.\n .Sp\n In addition, \\fB\\-I-\\fR inhibits the use of the directory of the current\n-file directory as the first search directory for \\fB#include\\ \"\\f(BIfile\\fB\"\\fR.  \n-.if n .Ip \"\\f(CW\"\"\\-nostdinc\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-nostdinc\\fR\" 4\n+file directory as the first search directory for \\f(CW\\*(C`#include\\ \"\\f(CIfile\\f(CW\"\\*(C'\\fR.  \n+.Ip \"\\fB\\-nostdinc\\fR\" 4\n .IX Item \"-nostdinc\"\n Do not search the standard system directories for header files.\n Only the directories you have specified with \\fB\\-I\\fR options\n (and the directory of the current file, if appropriate) are searched.\n-.if n .Ip \"\\f(CW\"\"\\-nostdinc++\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-nostdinc++\\fR\" 4\n+.Ip \"\\fB\\-nostdinc++\\fR\" 4\n .IX Item \"-nostdinc++\"\n Do not search for header files in the \\*(C+\\-specific standard directories,\n but do still search the other standard directories.  (This option is\n used when building the \\*(C+ library.)\n-.if n .Ip \"\\f(CW\"\"\\-include \\f(CIfile\\f(CW\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-include \\f(CIfile\\f(CW\\fR\" 4\n+.Ip \"\\fB\\-include\\fR \\fIfile\\fR\" 4\n .IX Item \"-include file\"\n Process \\fIfile\\fR as if \\f(CW\\*(C`#include \"file\"\\*(C'\\fR appeared as the first\n line of the primary source file.  However, the first directory searched\n@@ -549,8 +511,7 @@ chain as normal.\n .Sp\n If multiple \\fB\\-include\\fR options are given, the files are included\n in the order they appear on the command line.\n-.if n .Ip \"\\f(CW\"\"\\-imacros \\f(CIfile\\f(CW\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-imacros \\f(CIfile\\f(CW\\fR\" 4\n+.Ip \"\\fB\\-imacros\\fR \\fIfile\\fR\" 4\n .IX Item \"-imacros file\"\n Exactly like \\fB\\-include\\fR, except that any output produced by\n scanning \\fIfile\\fR is thrown away.  Macros it defines remain defined.\n@@ -559,24 +520,20 @@ processing its declarations.\n .Sp\n All files specified by \\fB\\-imacros\\fR are processed before all files\n specified by \\fB\\-include\\fR.\n-.if n .Ip \"\\f(CW\"\"\\-idirafter \\f(CIdir\\f(CW\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-idirafter \\f(CIdir\\f(CW\\fR\" 4\n+.Ip \"\\fB\\-idirafter\\fR \\fIdir\\fR\" 4\n .IX Item \"-idirafter dir\"\n Search \\fIdir\\fR for header files, but do it \\fIafter\\fR all\n directories specified with \\fB\\-I\\fR and the standard system directories\n have been exhausted.  \\fIdir\\fR is treated as a system include directory.\n-.if n .Ip \"\\f(CW\"\"\\-iprefix \\f(CIprefix\\f(CW\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-iprefix \\f(CIprefix\\f(CW\\fR\" 4\n+.Ip \"\\fB\\-iprefix\\fR \\fIprefix\\fR\" 4\n .IX Item \"-iprefix prefix\"\n Specify \\fIprefix\\fR as the prefix for subsequent \\fB\\-iwithprefix\\fR\n options.  If the prefix represents a directory, you should include the\n final \\fB/\\fR.\n-.if n .Ip \"\\f(CW\"\"\\-iwithprefix \\f(CIdir\\f(CW\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-iwithprefix \\f(CIdir\\f(CW\\fR\" 4\n+.Ip \"\\fB\\-iwithprefix\\fR \\fIdir\\fR\" 4\n .IX Item \"-iwithprefix dir\"\n .PD 0\n-.if n .Ip \"\\f(CW\"\"\\-iwithprefixbefore \\f(CIdir\\f(CW\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-iwithprefixbefore \\f(CIdir\\f(CW\\fR\" 4\n+.Ip \"\\fB\\-iwithprefixbefore\\fR \\fIdir\\fR\" 4\n .IX Item \"-iwithprefixbefore dir\"\n .PD\n Append \\fIdir\\fR to the prefix specified previously with\n@@ -585,15 +542,13 @@ path.  \\fB\\-iwithprefixbefore\\fR puts it in the same place \\fB\\-I\\fR\n would; \\fB\\-iwithprefix\\fR puts it where \\fB\\-idirafter\\fR would.\n .Sp\n Use of these options is discouraged.\n-.if n .Ip \"\\f(CW\"\"\\-isystem \\f(CIdir\\f(CW\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-isystem \\f(CIdir\\f(CW\\fR\" 4\n+.Ip \"\\fB\\-isystem\\fR \\fIdir\\fR\" 4\n .IX Item \"-isystem dir\"\n Search \\fIdir\\fR for header files, after all directories specified by\n \\&\\fB\\-I\\fR but before the standard system directories.  Mark it\n as a system directory, so that it gets the same special treatment as\n is applied to the standard system directories.  \n-.if n .Ip \"\\f(CW\"\"\\-fpreprocessed\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-fpreprocessed\\fR\" 4\n+.Ip \"\\fB\\-fpreprocessed\\fR\" 4\n .IX Item \"-fpreprocessed\"\n Indicate to the preprocessor that the input file has already been\n preprocessed.  This suppresses things like macro expansion, trigraph\n@@ -605,76 +560,65 @@ for the front ends.\n extensions \\fB.i\\fR, \\fB.ii\\fR or \\fB.mi\\fR.  These are the\n extensions that \\s-1GCC\\s0 uses for preprocessed files created by\n \\&\\fB\\-save-temps\\fR.\n-.if n .Ip \"\\f(CW\"\"\\-ftabstop=\\f(CIwidth\\f(CW\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-ftabstop=\\f(CIwidth\\f(CW\\fR\" 4\n+.Ip \"\\fB\\-ftabstop=\\fR\\fIwidth\\fR\" 4\n .IX Item \"-ftabstop=width\"\n Set the distance between tab stops.  This helps the preprocessor report\n correct column numbers in warnings or errors, even if tabs appear on the\n line.  If the value is less than 1 or greater than 100, the option is\n ignored.  The default is 8.\n-.if n .Ip \"\\f(CW\"\"\\-fno\\-show\\-column\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-fno\\-show\\-column\\fR\" 4\n+.Ip \"\\fB\\-fno-show-column\\fR\" 4\n .IX Item \"-fno-show-column\"\n Do not print column numbers in diagnostics.  This may be necessary if\n diagnostics are being scanned by a program that does not understand the\n-column numbers, such as \\f(CW\\*(C`dejagnu\\*(C'\\fR.\n-.if n .Ip \"\\f(CW\"\"\\-A \\f(CIpredicate\\f(CW=\\f(CIanswer\\f(CW\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-A \\f(CIpredicate\\f(CW=\\f(CIanswer\\f(CW\\fR\" 4\n+column numbers, such as \\fBdejagnu\\fR.\n+.Ip \"\\fB\\-A\\fR \\fIpredicate\\fR\\fB=\\fR\\fIanswer\\fR\" 4\n .IX Item \"-A predicate=answer\"\n Make an assertion with the predicate \\fIpredicate\\fR and answer\n \\&\\fIanswer\\fR.  This form is preferred to the older form \\fB\\-A\\fR\n \\&\\fIpredicate\\fR\\fB(\\fR\\fIanswer\\fR\\fB)\\fR, which is still supported, because\n it does not use shell special characters.  \n-.if n .Ip \"\\f(CW\"\"\\-A \\-\\f(CIpredicate\\f(CW=\\f(CIanswer\\f(CW\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-A \\-\\f(CIpredicate\\f(CW=\\f(CIanswer\\f(CW\\fR\" 4\n+.Ip \"\\fB\\-A -\\fR\\fIpredicate\\fR\\fB=\\fR\\fIanswer\\fR\" 4\n .IX Item \"-A -predicate=answer\"\n Cancel an assertion with the predicate \\fIpredicate\\fR and answer\n \\&\\fIanswer\\fR.\n-.if n .Ip \"\\f(CW\"\"\\-A\\-\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-A\\-\\fR\" 4\n+.Ip \"\\fB\\-A-\\fR\" 4\n .IX Item \"-A-\"\n Cancel all predefined assertions and all assertions preceding it on\n the command line.  Also, undefine all predefined macros and all\n macros preceding it on the command line.  (This is a historical wart and\n may change in the future.)\n-.if n .Ip \"\\f(CW\"\"\\-dM\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-dM\\fR\" 4\n+.Ip \"\\fB\\-dM\\fR\" 4\n .IX Item \"-dM\"\n Instead of the normal output, generate a list of \\fB#define\\fR\n directives for all the macros defined during the execution of the\n preprocessor, including predefined macros.  This gives you a way of\n finding out what is predefined in your version of the preprocessor.\n-Assuming you have no file \\fBfoo.h\\fR, the command\n+Assuming you have no file \\fIfoo.h\\fR, the command\n .Sp\n .Vb 1\n \\&        touch foo.h; cpp -dM foo.h\n .Ve\n will show all the predefined macros.\n-.if n .Ip \"\\f(CW\"\"\\-dD\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-dD\\fR\" 4\n+.Ip \"\\fB\\-dD\\fR\" 4\n .IX Item \"-dD\"\n Like \\fB\\-dM\\fR except in two respects: it does \\fInot\\fR include the\n predefined macros, and it outputs \\fIboth\\fR the \\fB#define\\fR\n directives and the result of preprocessing.  Both kinds of output go to\n the standard output file.\n-.if n .Ip \"\\f(CW\"\"\\-dN\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-dN\\fR\" 4\n+.Ip \"\\fB\\-dN\\fR\" 4\n .IX Item \"-dN\"\n Like \\fB\\-dD\\fR, but emit only the macro names, not their expansions.\n-.if n .Ip \"\\f(CW\"\"\\-dI\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-dI\\fR\" 4\n+.Ip \"\\fB\\-dI\\fR\" 4\n .IX Item \"-dI\"\n Output \\fB#include\\fR directives in addition to the result of\n preprocessing.\n-.if n .Ip \"\\f(CW\"\"\\-P\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-P\\fR\" 4\n+.Ip \"\\fB\\-P\\fR\" 4\n .IX Item \"-P\"\n Inhibit generation of linemarkers in the output from the preprocessor.\n This might be useful when running the preprocessor on something that is\n not C code, and will be sent to a program which might be confused by the\n linemarkers.  \n-.if n .Ip \"\\f(CW\"\"\\-C\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-C\\fR\" 4\n+.Ip \"\\fB\\-C\\fR\" 4\n .IX Item \"-C\"\n Do not discard comments.  All comments are passed through to the output\n file, except for comments in processed directives, which are deleted\n@@ -689,64 +633,52 @@ replaced by a single space might become significant when comments are\n retained.  Also, comments appearing at the start of what would be a\n directive line have the effect of turning that line into an ordinary\n source line, since the first token on the line is no longer a \\fB#\\fR.\n-.if n .Ip \"\\f(CW\"\"\\-gcc\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-gcc\\fR\" 4\n+.Ip \"\\fB\\-gcc\\fR\" 4\n .IX Item \"-gcc\"\n Define the macros _\\|_GNUC_\\|_, _\\|_GNUC_MINOR_\\|_ and\n _\\|_GNUC_PATCHLEVEL_\\|_. These are defined automatically when you use\n-\\&\\fBgcc \\-E\\fR; you can turn them off in that case with \\fB\\-no-gcc\\fR.\n-.if n .Ip \"\\f(CW\"\"\\-traditional\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-traditional\\fR\" 4\n+\\&\\fBgcc \\-E\\fR; you can turn them off in that case with\n+\\&\\fB\\-no-gcc\\fR.\n+.Ip \"\\fB\\-traditional\\fR\" 4\n .IX Item \"-traditional\"\n Try to imitate the behavior of old-fashioned C, as opposed to \\s-1ISO\\s0\n C. \n-.if n .Ip \"\\f(CW\"\"\\-trigraphs\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-trigraphs\\fR\" 4\n+.Ip \"\\fB\\-trigraphs\\fR\" 4\n .IX Item \"-trigraphs\"\n Process trigraph sequences.  \n-.if n .Ip \"\\f(CW\"\"\\-remap\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-remap\\fR\" 4\n+.Ip \"\\fB\\-remap\\fR\" 4\n .IX Item \"-remap\"\n Enable special code to work around file systems which only permit very\n short file names, such as \\s-1MS-DOS\\s0.\n-.if n .Ip \"\\f(CW\"\"\\-$\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-$\\fR\" 4\n+.Ip \"\\fB\\-$\\fR\" 4\n .IX Item \"-$\"\n Forbid the use of \\fB$\\fR in identifiers.  The C standard allows\n implementations to define extra characters that can appear in\n-identifiers.  By default the \\s-1GNU\\s0 C preprocessor permits \\fB$\\fR, a\n-common extension.\n-.if n .Ip \"\\f(CW\"\"\\-h\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-h\\fR\" 4\n+identifiers.  By default \\s-1GNU\\s0 \\s-1CPP\\s0 permits \\fB$\\fR, a common extension.\n+.Ip \"\\fB\\-h\\fR\" 4\n .IX Item \"-h\"\n .PD 0\n-.if n .Ip \"\\f(CW\"\"\\-\\-help\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-\\-help\\fR\" 4\n-.IX Item \"--help\"\n-.if n .Ip \"\\f(CW\"\"\\-\\-target\\-help\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-\\-target\\-help\\fR\" 4\n-.IX Item \"--target-help\"\n+.Ip \"\\fB\\*(--help\\fR\" 4\n+.IX Item \"help\"\n+.Ip \"\\fB\\*(--target-help\\fR\" 4\n+.IX Item \"target-help\"\n .PD\n Print text describing all the command line options instead of\n preprocessing anything.\n-.if n .Ip \"\\f(CW\"\"\\-v\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-v\\fR\" 4\n+.Ip \"\\fB\\-v\\fR\" 4\n .IX Item \"-v\"\n Verbose mode.  Print out \\s-1GNU\\s0 \\s-1CPP\\s0's version number at the beginning of\n execution, and report the final form of the include path.\n-.if n .Ip \"\\f(CW\"\"\\-H\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-H\\fR\" 4\n+.Ip \"\\fB\\-H\\fR\" 4\n .IX Item \"-H\"\n Print the name of each header file used, in addition to other normal\n activities.  Each name is indented to show how deep in the\n \\&\\fB#include\\fR stack it is.\n-.if n .Ip \"\\f(CW\"\"\\-version\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-version\\fR\" 4\n+.Ip \"\\fB\\-version\\fR\" 4\n .IX Item \"-version\"\n .PD 0\n-.if n .Ip \"\\f(CW\"\"\\-\\-version\"\"\\fR\" 4\n-.el .Ip \"\\f(CW\\-\\-version\\fR\" 4\n-.IX Item \"--version\"\n+.Ip \"\\fB\\*(--version\\fR\" 4\n+.IX Item \"version\"\n .PD\n Print out \\s-1GNU\\s0 \\s-1CPP\\s0's version number.  With one dash, proceed to\n preprocess as normal.  With two dashes, exit immediately.\n@@ -763,7 +695,7 @@ Free Software Foundation, Inc.\n Permission is granted to copy, distribute and/or modify this document\n under the terms of the \\s-1GNU\\s0 Free Documentation License, Version 1.1 or\n any later version published by the Free Software Foundation.  A copy of\n-the license is included in the accompanying manual for \\s-1GNU\\s0 \\s-1CC\\s0, in the\n+the license is included in the accompanying manual for \\s-1GCC\\s0, in the\n section ``\\s-1GNU\\s0 Free Documentation License''.\n This manual contains no Invariant Sections, and has no Front-Cover Texts\n or Back-Cover Texts."}, {"sha": "e840cca3bcd59bdcba7fc7e6ecf88a1df8d6f51b", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 319, "deletions": 299, "changes": 618, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c5dd43ff7c78bbdba5e89a6cb16a3e50e1abff9/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c5dd43ff7c78bbdba5e89a6cb16a3e50e1abff9/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=1c5dd43ff7c78bbdba5e89a6cb16a3e50e1abff9", "patch": "@@ -15,7 +15,7 @@ Free Software Foundation, Inc.\n Permission is granted to copy, distribute and/or modify this document\n under the terms of the GNU Free Documentation License, Version 1.1 or\n any later version published by the Free Software Foundation.  A copy of\n-the license is included in the accompanying manual for GNU CC, in the\n+the license is included in the accompanying manual for GCC, in the\n section ``GNU Free Documentation License''.\n @c man end\n @end macro\n@@ -45,17 +45,9 @@ This manual contains no Invariant Sections.  The Front-Cover Texts are\n      funds for GNU development.\n @end macro\n \n-@c Better form for references to other manuals.\n-@ifinfo\n-@macro docref{docname}\n-GNU \\docname\\. @ref{Top, \\docname\\, , \\docname\\}@c\n-@end macro\n-@end ifinfo\n-@ifnotinfo\n-@macro docref{docname}\n-GNU \\docname\\@c\n+@macro gcctabopt{body}\n+@code{\\body\\}\n @end macro\n-@end ifnotinfo\n \n @ifinfo\n @dircategory Programming\n@@ -214,7 +206,7 @@ Wherever possible, you should use a preprocessor geared to the language\n you are writing in.  Modern versions of the GNU assembler have macro\n facilities.  Most high level programming languages have their own\n conditional compilation and inclusion mechanism.  If all else fails,\n-try a true general text processor, such as @docref{M4}.\n+try a true general text processor, such as GNU M4.\n \n C preprocessors vary in some details.  This manual discusses the GNU C\n preprocessor, which provides a small superset of the features of ISO\n@@ -346,6 +338,7 @@ because they would end in the same place anyway.\n // @r{this is} // @r{one comment}\n @r{text outside comment}\n @end example\n+@end enumerate\n \n It is safe to put line comments inside block comments, or vice versa.\n \n@@ -376,7 +369,6 @@ Comments are not recognized within string literals.  @t{@w{\"/* blah\n Line comments are not in the 1989 edition of the C standard, but they\n are recognized by GCC as an extension.  In C++ and in the 1999 edition\n of the C standard, they are an official part of the language.\n-@end enumerate\n \n Since these transformations happen before all other processing, you can\n split a line mechanically with backslash-newline anywhere.  You can\n@@ -398,7 +390,7 @@ O 10\\\n @end example\n \n @noindent\n-is equivalent to @samp{@w{#define FOO 1020}}.  All these tricks are\n+is equivalent to @code{@w{#define FOO 1020}}.  All these tricks are\n extremely confusing and should not be used in code intended to be\n readable.\n \n@@ -439,13 +431,13 @@ but it is often necessary to avoid ambiguities.\n When faced with a sequence of characters that has more than one possible\n tokenization, the preprocessor is greedy.  It always makes each token,\n starting from the left, as big as possible before moving on to the next\n-token.  For instance, @samp{a+++++b} is interpreted as\n-@samp{@w{a ++ ++ + b}}, not as @samp{@w{a ++ + ++ b}}, even though the\n+token.  For instance, @code{a+++++b} is interpreted as\n+@code{@w{a ++ ++ + b}}, not as @code{@w{a ++ + ++ b}}, even though the\n latter tokenization could be part of a valid C program and the former\n could not.\n \n Once the input file is broken into tokens, the token boundaries never\n-change, except when the @samp{##} preprocessing operator is used to glue\n+change, except when the @samp{##} preprocessing operator is used to paste\n tokens together.  @xref{Concatenation}.  For example,\n \n @example\n@@ -469,7 +461,7 @@ letters, digits, or underscores, which begins with a letter or\n underscore.  Keywords of C have no significance to the preprocessor;\n they are ordinary identifiers.  You can define a macro whose name is a\n keyword, for instance.  The only identifier which can be considered a\n-preprocessing keyword is @samp{defined}.  @xref{Defined}.\n+preprocessing keyword is @code{defined}.  @xref{Defined}.\n \n This is mostly true of other languages which use the C preprocessor.\n However, a few of the keywords of C++ are significant even in the\n@@ -479,9 +471,15 @@ In the 1999 C standard, identifiers may contain letters which are not\n part of the ``basic source character set,'' at the implementation's\n discretion (such as accented Latin letters, Greek letters, or Chinese\n ideograms).  This may be done with an extended character set, or the\n-@samp{\\u} and @samp{\\U} escape sequences.  GNU C does not presently\n+@samp{\\u} and @samp{\\U} escape sequences.  GCC does not presently\n implement either feature in the preprocessor or the compiler.\n \n+As an extension, GCC treats @samp{$} as a letter.  This is for\n+compatibility with some systems, such as VMS, where @samp{$} is commonly\n+used in system-defined function and object names.  @samp{$} is not a\n+letter in strictly conforming mode, or if you specify the @option{-$}\n+option.  @xref{Invocation}.\n+\n @cindex numbers\n @cindex preprocessing numbers\n A @dfn{preprocessing number} has a rather bizarre definition.  The\n@@ -500,12 +498,12 @@ from the full complexity of numeric constants.  It does not have to\n distinguish between lexically valid and invalid floating-point numbers,\n which is complicated.  The definition also permits you to split an\n identifier at any position and get exactly two tokens, which can then be\n-glued back together with the @samp{##} operator.\n+pasted back together with the @samp{##} operator.\n \n It's possible for preprocessing numbers to cause programs to be\n-misinterpreted.  For example, @samp{0xE+12} is a preprocessing number\n+misinterpreted.  For example, @code{0xE+12} is a preprocessing number\n which does not translate to any valid numeric constant, therefore a\n-syntax error.  It does not mean @samp{@w{0xE + 12}}, which is what you\n+syntax error.  It does not mean @code{@w{0xE + 12}}, which is what you\n might have intended.\n \n @cindex string literals\n@@ -517,15 +515,15 @@ might have intended.\n header file names (the argument of @samp{#include}).@footnote{The C\n standard uses the term @dfn{string literal} to refer only to what we are\n calling @dfn{string constants}.}  String constants and character\n-constants are straightforward: @t{\"...\"} or @t{'...'}.  In either case\n-the closing quote may be escaped with a backslash: @t{'\\'@:'} is the\n-character constant for @samp{'}.  There is no limit on the length of a\n-character constant, but the value of a character constant that contains\n-more than one character is implementation-defined.  @xref{Implementation\n-Details}.\n-\n-Header file names either look like string constants, @t{\"...\"}, or are\n-written with angle brackets instead, @t{<...>}.  In either case,\n+constants are straightforward: @t{\"@dots{}\"} or @t{'@dots{}'}.  In\n+either case the closing quote may be escaped with a backslash:\n+@t{'\\'@:'} is the character constant for @samp{'}.  There is no limit on\n+the length of a character constant, but the value of a character\n+constant that contains more than one character is\n+implementation-defined.  @xref{Implementation Details}.\n+\n+Header file names either look like string constants, @t{\"@dots{}\"}, or are\n+written with angle brackets instead, @t{<@dots{}>}.  In either case,\n backslash is an ordinary character.  There is no way to escape the\n closing quote or angle bracket.  The preprocessor looks for the header\n file in different places depending on which form you use.  @xref{Include\n@@ -558,8 +556,9 @@ Any other single character is considered ``other.'' It is passed on to\n the preprocessor's output unmolested.  The C compiler will almost\n certainly reject source code containing ``other'' tokens.  In ASCII, the\n only other characters are @samp{@@}, @samp{$}, @samp{`}, and control\n-characters other than NUL (all bits zero).  All characters with the high\n-bit set (numeric range 0x7F--0xFF) are also ``other'' in the present\n+characters other than NUL (all bits zero).  (Note that @samp{$} is\n+normally considered a letter.)  All characters with the high bit set\n+(numeric range 0x7F--0xFF) are also ``other'' in the present\n implementation.  This will change when proper support for international\n character sets is added to GCC.\n \n@@ -635,7 +634,7 @@ the directive that defines a macro.\n \n The @samp{#} which begins a directive cannot come from a macro\n expansion.  Also, the directive name is not macro expanded.  Thus, if\n-@samp{foo} is defined as a macro expanding to @samp{define}, that does\n+@code{foo} is defined as a macro expanding to @code{define}, that does\n not make @samp{#foo} a valid preprocessing directive.\n \n The set of valid directive names is fixed.  Programs cannot define new\n@@ -723,13 +722,13 @@ current file, then in the same directories used for @code{<@var{file}>}.\n \n The argument of @samp{#include}, whether delimited with quote marks or\n angle brackets, behaves like a string constant in that comments are not\n-recognized, and macro names are not expanded.  Thus, @samp{@w{#include\n+recognized, and macro names are not expanded.  Thus, @code{@w{#include\n <x/*y>}} specifies inclusion of a system header file named @file{x/*y}.\n \n However, if backslashes occur within @var{file}, they are considered\n ordinary text characters, not escape characters.  None of the character\n escape sequences appropriate to string constants in C are processed.\n-Thus, @samp{@w{#include \"x\\n\\\\y\"}} specifies a filename containing three\n+Thus, @code{@w{#include \"x\\n\\\\y\"}} specifies a filename containing three\n backslashes.  (Some systems interpret @samp{\\} as a pathname separator.\n All of these also interpret @samp{/} the same way.  It is most portable\n to use only @samp{/}.)\n@@ -793,7 +792,7 @@ comment, string constant or character constant in an included file is\n considered to end (with an error message) at the end of the file.\n \n To avoid confusion, it is best if header files contain only complete\n-syntactic units --- function declarations or definitions, type\n+syntactic units---function declarations or definitions, type\n declarations, etc.\n \n The line following the @samp{#include} directive is always treated as a\n@@ -805,7 +804,7 @@ final newline.\n \n GCC looks in several different places for headers.  On a normal Unix\n system, if you do not instruct it otherwise, it will look for headers\n-requested with @samp{@w{#include <@var{file}>}} in:\n+requested with @code{@w{#include <@var{file}>}} in:\n \n @example\n /usr/local/include\n@@ -814,7 +813,7 @@ requested with @samp{@w{#include <@var{file}>}} in:\n /usr/include\n @end example\n \n-For C++ programs, it will also look in @samp{/usr/include/g++-v3},\n+For C++ programs, it will also look in @file{/usr/include/g++-v3},\n first.  In the above, @var{target} is the canonical name of the system\n GCC was configured to compile code for; often but not always the same as\n the canonical name of the system it runs on.  @var{version} is the\n@@ -828,11 +827,11 @@ also prevent GCC from searching any of the default directories with the\n operating system kernel or some other program that does not use the\n standard C library facilities, or the standard C library itself.\n \n-GCC looks for headers requested with @samp{@w{#include \"@var{file}\"}}\n+GCC looks for headers requested with @code{@w{#include \"@var{file}\"}}\n first in the directory containing the current file, then in the same\n places it would have looked for a header requested with angle brackets.\n For example, if @file{/usr/include/sys/stat.h} contains\n-@samp{@w{#include \"types.h\"}}, GCC looks for @file{types.h} first in\n+@code{@w{#include \"types.h\"}}, GCC looks for @file{types.h} first in\n @file{/usr/include/sys}, then in its usual search path.\n \n @samp{#line} (@pxref{Line Control}) does not change GCC's idea of the\n@@ -938,9 +937,10 @@ argument of @samp{#include}, you simply put a macro name there instead:\n #include SYSTEM_H\n @end example\n \n-@samp{SYSTEM_H} will be expanded, and the preprocessor will look for\n+@noindent\n+@code{SYSTEM_H} will be expanded, and the preprocessor will look for\n @file{system_1.h} as if the @samp{#include} had been written that way\n-originally.  @samp{SYSTEM_H} could be defined by your Makefile with a\n+originally.  @code{SYSTEM_H} could be defined by your Makefile with a\n @option{-D} option.\n \n You must be careful when you define the macro.  @samp{#define} saves\n@@ -965,6 +965,7 @@ escapes in the string.  Therefore\n #include HEADER\n @end example\n \n+@noindent\n looks for a file named @file{a\\\"b}.  CPP searches for the file according\n to the rules for double-quoted includes.\n \n@@ -994,7 +995,7 @@ minimize confusion of people reading your program.\n @findex #include_next\n \n Sometimes it is necessary to adjust the contents of a system-provided\n-header file without editing it directly.  GCC's @samp{fixincludes}\n+header file without editing it directly.  GCC's @command{fixincludes}\n operation does this, for example.  One way to do that would be to create\n a new header file with the same name and insert it in the search path\n before the original header.  That works fine as long as you're willing\n@@ -1023,13 +1024,13 @@ in which the current file was found.\n \n Suppose you specify @option{-I /usr/local/include}, and the list of\n directories to search also includes @file{/usr/include}; and suppose\n-both directories contain @file{signal.h}.  Ordinary @samp{#include\n-<signal.h>} finds the file under @file{/usr/local/include}.  If that\n-file contains @samp{#include_next <signal.h>}, it starts searching\n+both directories contain @file{signal.h}.  Ordinary @code{@w{#include\n+<signal.h>}} finds the file under @file{/usr/local/include}.  If that\n+file contains @code{@w{#include_next <signal.h>}}, it starts searching\n after that directory, and finds the file in @file{/usr/include}.\n \n-@samp{#include_next} does not distinguish between @samp{<@var{file}>}\n-and @samp{\"@var{file}\"} inclusion, nor does it check that the file you\n+@samp{#include_next} does not distinguish between @code{<@var{file}>}\n+and @code{\"@var{file}\"} inclusion, nor does it check that the file you\n specify has the same name as the current file.  It simply looks for the\n file named, starting with the directory in the search path after the one\n where the current file was found.\n@@ -1038,15 +1039,15 @@ The use of @samp{#include_next} can lead to great confusion.  We\n recommend it be used only when there is no other alternative.  In\n particular, it should not be used in the headers belonging to a\n specific program, only to make global corrections along the lines\n-of @samp{fixincludes}.\n+of @command{fixincludes}.\n \n @node System Headers\n @section System Headers\n @cindex system header files\n \n The header files declaring interfaces to the operating system and\n runtime libraries often cannot be written in strictly conforming C@.\n-Therefore, GNU C gives code found in @dfn{system headers} special\n+Therefore, GCC gives code found in @dfn{system headers} special\n treatment.  All warnings, other than those generated by @samp{#warning}\n (@pxref{Diagnostics}), are suppressed while GCC is processing a system\n header.  Macros defined in a system header are immune to a few warnings\n@@ -1071,10 +1072,10 @@ command line.  If the same directory is named by both @option{-I} and\n had never been specified at all.\n \n @findex #pragma GCC system_header\n-There is also a directive, @samp{@w{#pragma GCC system_header}}, which\n+There is also a directive, @code{@w{#pragma GCC system_header}}, which\n tells GCC to consider the rest of the current include file a system\n header, no matter where it was found.  Code that comes before the\n-@samp{#pragma} in the file will not be affected.  @samp{@w{#pragma GCC\n+@samp{#pragma} in the file will not be affected.  @code{@w{#pragma GCC\n system_header}} has no effect in the primary source file.\n \n On very old systems, some of the pre-defined system header directories\n@@ -1094,9 +1095,9 @@ when used, @dfn{function-like} macros resemble function calls.\n \n You may define any valid identifier as a macro, even if it is a C\n keyword.  The preprocessor does not know anything about keywords.  This\n-can be useful if you wish to hide a keyword such as @samp{const} from an\n+can be useful if you wish to hide a keyword such as @code{const} from an\n older compiler that does not understand it.  However, the preprocessor\n-operator @samp{defined} (@pxref{Defined}) can never be defined as a\n+operator @code{defined} (@pxref{Defined}) can never be defined as a\n macro, and C++'s named operators (@pxref{C++ Named Operators}) cannot be\n macros when you are compiling C++.\n \n@@ -1134,8 +1135,8 @@ be an abbreviation for, which is variously referred to as the macro's\n @end example\n \n @noindent\n-defines a macro named @samp{BUFFER_SIZE} as an abbreviation for the\n-token @samp{1024}.  If somewhere after this @samp{#define} directive\n+defines a macro named @code{BUFFER_SIZE} as an abbreviation for the\n+token @code{1024}.  If somewhere after this @samp{#define} directive\n there comes a C statement of the form\n \n @example\n@@ -1144,7 +1145,7 @@ foo = (char *) malloc (BUFFER_SIZE);\n \n @noindent\n then the C preprocessor will recognize and @dfn{expand} the macro\n-@samp{BUFFER_SIZE}.  The C compiler will see the same tokens as it would\n+@code{BUFFER_SIZE}.  The C compiler will see the same tokens as it would\n if you had written\n \n @example\n@@ -1210,19 +1211,19 @@ TABLESIZE\n @end example\n \n @noindent\n-@samp{TABLESIZE} is expanded first to produce @samp{BUFSIZE}, then that\n-macro is expanded to produce the final result, @samp{1024}.\n+@code{TABLESIZE} is expanded first to produce @code{BUFSIZE}, then that\n+macro is expanded to produce the final result, @code{1024}.\n \n-Notice that @samp{BUFSIZE} was not defined when @samp{TABLESIZE} was\n-defined.  The @samp{#define} for @samp{TABLESIZE} uses exactly the\n-expansion you specify --- in this case, @samp{BUFSIZE} --- and does not\n+Notice that @code{BUFSIZE} was not defined when @code{TABLESIZE} was\n+defined.  The @samp{#define} for @code{TABLESIZE} uses exactly the\n+expansion you specify---in this case, @code{BUFSIZE}---and does not\n check to see whether it too contains macro names.  Only when you\n-@emph{use} @samp{TABLESIZE} is the result of its expansion scanned for\n+@emph{use} @code{TABLESIZE} is the result of its expansion scanned for\n more macro names.\n \n-This makes a difference if you change the definition of @samp{BUFSIZE}\n-at some point in the source file.  @samp{TABLESIZE}, defined as shown,\n-will always expand using the definition of @samp{BUFSIZE} that is\n+This makes a difference if you change the definition of @code{BUFSIZE}\n+at some point in the source file.  @code{TABLESIZE}, defined as shown,\n+will always expand using the definition of @code{BUFSIZE} that is\n currently in effect:\n \n @example\n@@ -1233,7 +1234,7 @@ currently in effect:\n @end example\n \n @noindent\n-Now @samp{TABLESIZE} expands (in two stages) to @samp{37}.\n+Now @code{TABLESIZE} expands (in two stages) to @code{37}.\n \n If the expansion of a macro contains its own name, either directly or\n via intermediate macros, it is not expanded again when the expansion is\n@@ -1268,7 +1269,7 @@ extern void foo(void);\n   funcptr = foo;\n @end example\n \n-Here the call to @samp{foo()} will use the macro, but the function\n+Here the call to @code{foo()} will use the macro, but the function\n pointer will get the address of the real function.  If the macro were to\n be expanded, it would cause a syntax error.\n \n@@ -1285,7 +1286,7 @@ lang_init()\n \n The first two pairs of parentheses in this expansion come from the\n macro.  The third is the pair that was originally after the macro\n-invocation.  Since @samp{lang_init} is an object-like macro, it does not\n+invocation.  Since @code{lang_init} is an object-like macro, it does not\n consume those parentheses.\n \n @node Macro Arguments\n@@ -1303,7 +1304,7 @@ separated by commas and optionally whitespace.\n To invoke a macro that takes arguments, you write the name of the macro\n followed by a list of @dfn{actual arguments} in parentheses, separated\n by commas.  The invocation of the macro need not be restricted to a\n-single logical line - it can cross as many lines in the source file as\n+single logical line---it can cross as many lines in the source file as\n you wish.  The number of arguments you give must match the number of\n parameters in the macro definition.  When the macro is expanded, each\n use of a parameter in its body is replaced by the tokens of the\n@@ -1336,9 +1337,9 @@ macro (array[x = y, x + 1])\n @end example\n \n @noindent\n-passes two arguments to @code{macro}: @samp{array[x = y} and @samp{x +\n-1]}.  If you want to supply @samp{array[x = y, x + 1]} as an argument,\n-you can write it as @samp{array[(x = y, x + 1)]}, which is equivalent C\n+passes two arguments to @code{macro}: @code{array[x = y} and @code{x +\n+1]}.  If you want to supply @code{array[x = y, x + 1]} as an argument,\n+you can write it as @code{array[(x = y, x + 1)]}, which is equivalent C\n code.\n \n All arguments to a macro are completely macro-expanded before they are\n@@ -1349,7 +1350,7 @@ about whether any function call is actually a macro invocation.  You can\n run into trouble if you try to be too clever, though.  @xref{Argument\n Prescan}, for detailed discussion.\n \n-For example, @samp{min (min (a, b), c)} is first expanded to\n+For example, @code{min (min (a, b), c)} is first expanded to\n \n @example\n   min (((a) < (b) ? (a) : (b)), (c))\n@@ -1374,7 +1375,7 @@ You can leave macro arguments empty; this is not an error for the\n preprocessor (but many macros will then expand to invalid code).\n You cannot leave out arguments entirely; if a macro takes two arguments,\n there must be exactly one comma at the top level of its argument list.\n-Here are some silly examples using @samp{min}:\n+Here are some silly examples using @code{min}:\n \n @example\n min(, b)        @expansion{} ((   ) < (b) ? (   ) : (b))\n@@ -1387,7 +1388,7 @@ min(,,)    @error{} macro \"min\" passed 3 arguments, but takes just 2\n @end example\n \n Whitespace is not a preprocessing token, so if a macro @code{foo} takes\n-one argument, @samp{@w{foo ()}} and @samp{@w{foo ( )}} both supply it an\n+one argument, @code{@w{foo ()}} and @code{@w{foo ( )}} both supply it an\n empty argument.  Previous GNU preprocessor implementations and\n documentation were incorrect on this point, insisting that a\n function-like macro that takes a single argument be passed a space if an\n@@ -1436,21 +1437,21 @@ WARN_IF (x == 0);\n @end example\n \n @noindent\n-The argument for @samp{EXP} is substituted once, as-is, into the\n-@samp{if} statement, and once, stringified, into the argument to\n-@samp{fprintf}.  If @samp{x} were a macro, it would be expanded in the\n-@samp{if} statement, but not in the string.\n-\n-The @samp{do} and @samp{while (0)} are a kludge to make it possible to\n-write @samp{WARN_IF (@var{arg});}, which the resemblance of\n-@samp{WARN_IF} to a function would make C programmers want to do; see\n+The argument for @code{EXP} is substituted once, as-is, into the\n+@code{if} statement, and once, stringified, into the argument to\n+@code{fprintf}.  If @code{x} were a macro, it would be expanded in the\n+@code{if} statement, but not in the string.\n+\n+The @code{do} and @code{while (0)} are a kludge to make it possible to\n+write @code{WARN_IF (@var{arg});}, which the resemblance of\n+@code{WARN_IF} to a function would make C programmers want to do; see\n @ref{Swallowing the Semicolon}.\n \n Stringification in C involves more than putting double-quote characters\n around the fragment.  The preprocessor backslash-escapes the surrounding\n quotes of string literals, and all backslashes within string and\n character constants, in order to get a valid C string constant with the\n-proper contents.  Thus, stringifying @samp{@w{p = \"foo\\n\";}} results in\n+proper contents.  Thus, stringifying @code{@w{p = \"foo\\n\";}} results in\n @t{@w{\"p = \\\"foo\\\\n\\\";\"}}.  However, backslashes that are not inside string\n or character constants are not duplicated: @samp{\\n} by itself\n stringifies to @t{\"\\n\"}.\n@@ -1500,13 +1501,13 @@ the two original tokens in the macro expansion.  Usually both will be\n identifiers, or one will be an identifier and the other a preprocessing\n number.  When pasted, they make a longer identifier.  This isn't the\n only valid case.  It is also possible to concatenate two numbers (or a\n-number and a name, such as @samp{1.5} and @samp{e3}) into a number.\n-Also, multi-character operators such as @samp{+=} can be formed by\n+number and a name, such as @code{1.5} and @code{e3}) into a number.\n+Also, multi-character operators such as @code{+=} can be formed by\n token pasting.\n \n However, two tokens that don't together form a valid token cannot be\n-pasted together.  For example, you cannot concatenate @samp{x} with\n-@samp{+} in either order.  If you try, the preprocessor issues a warning\n+pasted together.  For example, you cannot concatenate @code{x} with\n+@code{+} in either order.  If you try, the preprocessor issues a warning\n and emits the two tokens as if they had been written next to each other.\n It is common to find unnecessary uses of @samp{##} in complex macros.\n If you get this warning, it is likely that you can simply remove the\n@@ -1580,7 +1581,7 @@ a function can.  The syntax for defining the macro is similar to that of\n a function.  Here is an example:\n \n @example\n-#define eprintf(...) fprintf (stderr, __VA_ARGS__)\n+#define eprintf(@dots{}) fprintf (stderr, __VA_ARGS__)\n @end example\n \n This kind of macro is called @dfn{variadic}.  When the macro is invoked,\n@@ -1608,7 +1609,7 @@ before the @samp{@dots{}}; that name is used for the variable argument.\n The @code{eprintf} macro above could be written\n \n @example\n-#define eprintf(args...) fprintf (stderr, args)\n+#define eprintf(args@dots{}) fprintf (stderr, args)\n @end example\n \n @noindent\n@@ -1619,9 +1620,10 @@ You can have named arguments as well as variable arguments in a variadic\n macro.  We could define @code{eprintf} like this, instead:\n \n @example\n-#define eprintf(format, ...) fprintf (stderr, format, __VA_ARGS__)\n+#define eprintf(format, @dots{}) fprintf (stderr, format, __VA_ARGS__)\n @end example\n \n+@noindent\n This formulation looks more descriptive, but unfortunately it is less\n flexible: you must now supply at least one argument after the format\n string.  In standard C, you cannot omit the comma separating the named\n@@ -1642,14 +1644,16 @@ eprintf (\"success!\\n\")\n      @expansion{} fprintf(stderr, \"success!\\n\", );\n @end example\n \n+@noindent\n Second, the @samp{##} token paste operator has a special meaning when\n placed between a comma and a variable argument.  If you write\n \n @example\n-#define eprintf(format, ...) fprintf (stderr, format, ##__VA_ARGS__)\n+#define eprintf(format, @dots{}) fprintf (stderr, format, ##__VA_ARGS__)\n @end example\n \n-and the variable argument is left out when the @samp{eprintf} macro is\n+@noindent\n+and the variable argument is left out when the @code{eprintf} macro is\n used, then the comma before the @samp{##} will be deleted.  This does\n @emph{not} happen if you pass an empty argument, nor does it happen if\n the token preceding @samp{##} is anything other than a comma.\n@@ -1668,7 +1672,7 @@ purpose.\n \n Variadic macros are a new feature in C99.  GNU CPP has supported them\n for a long time, but only with a named variable argument\n-(@samp{args...}, not @samp{...} and @code{@w{__VA_ARGS__}}).  If you are\n+(@samp{args@dots{}}, not @samp{@dots{}} and @code{@w{__VA_ARGS__}}).  If you are\n concerned with portability to previous versions of GCC, you should use\n only named variable arguments.  On the other hand, if you are concerned\n with portability to other conforming implementations of C99, you should\n@@ -1682,7 +1686,7 @@ be a comma, and there must be white space between that comma and\n whatever comes immediately before it:\n \n @example\n-#define eprintf(format, args...) fprintf (stderr, format , ##args)\n+#define eprintf(format, args@dots{}) fprintf (stderr, format , ##args)\n @end example\n \n @noindent\n@@ -1721,7 +1725,7 @@ This macro expands to the name of the current input file, in the form of\n a C string constant.  This is the path by which the preprocessor opened\n the file, not the short name specified in @samp{#include} or as the\n input file name argument.  For example,\n-@samp{\"/usr/local/include/myheader.h\"} is a possible expansion of this\n+@code{\"/usr/local/include/myheader.h\"} is a possible expansion of this\n macro.\n \n @item __LINE__\n@@ -1731,7 +1735,7 @@ a pretty strange macro, since its ``definition'' changes with each\n new line of source code.\n @end table\n \n-@samp{__FILE__} and @samp{__LINE__} are useful in generating an error\n+@code{__FILE__} and @code{__LINE__} are useful in generating an error\n message to report an inconsistency detected by the program; the message\n can state the source line at which the inconsistency was detected.  For\n example,\n@@ -1743,41 +1747,41 @@ fprintf (stderr, \"Internal error: \"\n          length, __FILE__, __LINE__);\n @end example\n \n-An @samp{#include} directive changes the expansions of @samp{__FILE__}\n-and @samp{__LINE__} to correspond to the included file.  At the end of\n+An @samp{#include} directive changes the expansions of @code{__FILE__}\n+and @code{__LINE__} to correspond to the included file.  At the end of\n that file, when processing resumes on the input file that contained\n-the @samp{#include} directive, the expansions of @samp{__FILE__} and\n-@samp{__LINE__} revert to the values they had before the\n-@samp{#include} (but @samp{__LINE__} is then incremented by one as\n+the @samp{#include} directive, the expansions of @code{__FILE__} and\n+@code{__LINE__} revert to the values they had before the\n+@samp{#include} (but @code{__LINE__} is then incremented by one as\n processing moves to the line after the @samp{#include}).\n \n-A @samp{#line} directive changes @samp{__LINE__}, and may change\n-@samp{__FILE__} as well.  @xref{Line Control}.\n+A @samp{#line} directive changes @code{__LINE__}, and may change\n+@code{__FILE__} as well.  @xref{Line Control}.\n \n-C99 introduces @samp{__func__}, and GCC has provided @samp{__FUNCTION__}\n+C99 introduces @code{__func__}, and GCC has provided @code{__FUNCTION__}\n for a long time.  Both of these are strings containing the name of the\n current function (there are slight semantic differences; see the GCC\n manual).  Neither of them is a macro; the preprocessor does not know the\n name of the current function.  They tend to be useful in conjunction\n-with @samp{__FILE__} and @samp{__LINE__}, though.\n+with @code{__FILE__} and @code{__LINE__}, though.\n \n @table @code\n \n @item __DATE__\n This macro expands to a string constant that describes the date on which\n the preprocessor is being run.  The string constant contains eleven\n-characters and looks like @w{@samp{\"Feb 12 1996\"}}.  If the day of the\n+characters and looks like @code{@w{\"Feb 12 1996\"}}.  If the day of the\n month is less than 10, it is padded with a space on the left.\n \n @item __TIME__\n This macro expands to a string constant that describes the time at\n which the preprocessor is being run.  The string constant contains\n-eight characters and looks like @samp{\"23:59:01\"}.\n+eight characters and looks like @code{\"23:59:01\"}.\n \n @item __STDC__\n In normal operation, this macro expands to the constant 1, to signify\n that this compiler conforms to ISO Standard C@.  If GNU CPP is used with\n-a compiler other than GNU CC, this is not necessarily true; however, the\n+a compiler other than GCC, this is not necessarily true; however, the\n preprocessor always conforms to the standard, unless the\n @option{-traditional} option is used.\n \n@@ -1795,14 +1799,14 @@ cancel treatment of those headers as system headers.  @xref{Invocation}.\n \n @item __STDC_VERSION__\n This macro expands to the C Standard's version number, a long integer\n-constant of the form @samp{@var{yyyy}@var{mm}L} where @var{yyyy} and\n+constant of the form @code{@var{yyyy}@var{mm}L} where @var{yyyy} and\n @var{mm} are the year and month of the Standard version.  This signifies\n which version of the C Standard the compiler conforms to.  Like\n-@samp{__STDC__}, this is not necessarily accurate for the entire\n-implementation, unless GNU CPP is being used with GNU CC.\n+@code{__STDC__}, this is not necessarily accurate for the entire\n+implementation, unless GNU CPP is being used with GCC.\n \n-The value @samp{199409L} signifies the 1989 C standard as amended in\n-1994, which is the current default; the value @samp{199901L} signifies\n+The value @code{199409L} signifies the 1989 C standard as amended in\n+1994, which is the current default; the value @code{199901L} signifies\n the 1999 revision of the C standard.  Support for the 1999 revision is\n not yet complete.\n \n@@ -1816,11 +1820,11 @@ facilities of the standard C library available.\n \n @item __cplusplus\n This macro is defined when the C++ compiler is in use.  You can use\n-@samp{__cplusplus} to test whether a header is compiled by a C compiler\n-or a C++ compiler.  This macro is similar to @samp{__STDC_VERSION__}, in\n+@code{__cplusplus} to test whether a header is compiled by a C compiler\n+or a C++ compiler.  This macro is similar to @code{__STDC_VERSION__}, in\n that it expands to a version number.  A fully conforming implementation\n-of the 1998 C++ standard will define this macro to @samp{199711L}.  The\n-GNU C++ compiler is not yet fully conforming, so it uses @samp{1}\n+of the 1998 C++ standard will define this macro to @code{199711L}.  The\n+GNU C++ compiler is not yet fully conforming, so it uses @code{1}\n instead.  We hope to complete our implementation in the near future.\n \n @end table\n@@ -1847,8 +1851,6 @@ constants.  For example, GCC 3.2.1 will define @code{__GNUC__} to 3,\n are defined only when the entire compiler is in use; if you invoke the\n preprocessor directly, they are not defined.\n \n-\n-\n @code{__GNUC_PATCHLEVEL__} is new to GCC 3.0; it is also present in the\n widely-used development snapshots leading up to 3.0 (which identify\n themselves as GCC 2.96 or 2.97, depending on which snapshot you have).\n@@ -1858,28 +1860,42 @@ by GCC, you can simply test @code{__GNUC__}.  If you need to write code\n which depends on a specific version, you must be more careful.  Each\n time the minor version is increased, the patch level is reset to zero;\n each time the major version is increased (which happens rarely), the\n-minor version and patch level are reset.  The simplest way to write the\n-conditional is like this:\n+minor version and patch level are reset.  If you wish to use the\n+predefined macros directly in the conditional, you will need to write it\n+like this:\n \n @example\n /* @r{Test for GCC > 3.2.0} */\n-#if __GNUC__ > 3 || __GNUC_MINOR__ > 2 \\\n-    || __GNUC_PATCHLEVEL__ > 0\n+#if __GNUC__ > 3 || \\\n+    (__GNUC__ == 3 && (__GNUC_MINOR__ > 2 || \\\n+                       (__GNUC_MINOR__ == 2 && \\\n+                        __GNUC_PATCHLEVEL__ > 0))\n @end example\n \n @noindent\n-This takes advantage of the rule that an undefined macro evaluates to\n-zero in an @samp{#if}.  The conditional will be false if\n-@code{__GNUC__} is not defined (that is, if you are not using @w{GNU CC}).\n+Another approach is to use the predefined macros to\n+calculate a single number, then compare that against a threshold:\n+\n+@example\n+#define GCC_VERSION (__GNUC__ * 10000 \\\n+                     + __GNUC_MINOR__ * 100 \\\n+                     + __GNUC_PATCHLEVEL__)\n+@dots{}\n+/* @r{Test for GCC > 3.2.0} */\n+#if GCC_VERSION > 30200\n+@end example\n+\n+@noindent\n+Many people find this form easier to understand.\n \n @item __GNUG__\n The GNU C++ compiler defines this.  Testing it is equivalent to\n-testing @samp{(__GNUC__ && __cplusplus)}.\n+testing @code{@w{(__GNUC__ && __cplusplus)}}.\n \n @item __STRICT_ANSI__\n-GNU C defines this macro if and only if the @option{-ansi} switch, or a\n+GCC defines this macro if and only if the @option{-ansi} switch, or a\n @option{-std} switch specifying strict conformance to some version of ISO C,\n-was specified when GNU C was invoked.  Its definition is the null string.\n+was specified when GCC was invoked.  Its definition is the null string.\n This macro exists primarily to direct GNU libc's header files to\n restrict their definitions to the minimal set found in the 1989 C\n standard.\n@@ -1919,7 +1935,7 @@ sure that programs will execute with the same effect whether or not they\n are defined.  If they are defined, their value is 1.\n \n @item __CHAR_UNSIGNED__\n-GNU C defines this macro if and only if the data type @code{char} is\n+GCC defines this macro if and only if the data type @code{char} is\n unsigned on the target machine.  It exists to cause the standard header\n file @file{limits.h} to work correctly.  You should not use this macro\n yourself; instead, refer to the standard macros defined in @file{limits.h}.\n@@ -1928,15 +1944,15 @@ yourself; instead, refer to the standard macros defined in @file{limits.h}.\n This macro expands to a single token (not a string constant) which is\n the prefix applied to CPU register names in assembly language for this\n target.  You can use it to write assembly that is usable in multiple\n-environments.  For example, in the @samp{m68k-aout} environment it\n-expands to nothing, but in the @samp{m68k-coff} environment it expands\n+environments.  For example, in the @code{m68k-aout} environment it\n+expands to nothing, but in the @code{m68k-coff} environment it expands\n to a single @samp{%}.\n \n @item __USER_LABEL_PREFIX__\n This macro expands to a single token which is the the prefix applied to\n user labels (symbols visible to C code) in assembly.  For example, in\n-the @samp{m68k-aout} environment it expands to an @samp{_}, but in the\n-@samp{m68k-coff} environment it expands to nothing.\n+the @code{m68k-aout} environment it expands to an @samp{_}, but in the\n+@code{m68k-coff} environment it expands to nothing.\n \n This macro will have the correct definition even if\n @option{-f(no-)underscores} is in use, but it will not be correct if\n@@ -1965,9 +1981,9 @@ the typedefs.\n \n The C preprocessor normally predefines several macros that indicate what\n type of system and machine is in use.  They are obviously different on\n-each target supported by GNU C@.  This manual, being for all systems and\n+each target supported by GCC@.  This manual, being for all systems and\n machines, cannot tell you what their names are, but you can use\n-@samp{cpp -dM} to see them all.  @xref{Invocation}.  All system-specific\n+@command{cpp -dM} to see them all.  @xref{Invocation}.  All system-specific\n predefined macros expand to the constant 1, so you can test them with\n either @samp{#ifdef} or @samp{#if}.\n \n@@ -1976,11 +1992,11 @@ The C standard requires that all system-specific macros be part of the\n or an underscore and a capital letter, are reserved for the compiler and\n library to use as they wish.  However, historically system-specific\n macros have had names with no special prefix; for instance, it is common\n-to find @samp{unix} defined on Unix systems.  For all such macros, GCC\n+to find @code{unix} defined on Unix systems.  For all such macros, GCC\n provides a parallel macro with two underscores added at the beginning\n-and the end.  If @samp{unix} is defined, @samp{__unix__} will be defined\n+and the end.  If @code{unix} is defined, @code{__unix__} will be defined\n too.  There will never be more than two underscores; the parallel of\n-@samp{_mips} is @samp{__mips__}.\n+@code{_mips} is @code{__mips__}.\n \n When the @option{-ansi} option, or any @option{-std} option that\n requests strict conformance, is given to the compiler, all the\n@@ -1994,7 +2010,7 @@ encourage you to correct older code to use the parallel macros whenever\n you find it.  We don't recommend you use the system-specific macros that\n are in the reserved namespace, either.  It is better in the long run to\n check specifically for features you need, using a tool such as\n-@docref{autoconf}.\n+@command{autoconf}.\n \n @node C++ Named Operators\n @subsection C++ Named Operators\n@@ -2156,8 +2172,8 @@ Suppose you define a macro as follows,\n \n @noindent\n whose purpose is to divide, rounding up.  (One use for this operation is\n-to compute how many @samp{int} objects are needed to hold a certain\n-number of @samp{char} objects.)  Then suppose it is used as follows:\n+to compute how many @code{int} objects are needed to hold a certain\n+number of @code{char} objects.)  Then suppose it is used as follows:\n \n @example\n a = ceil_div (b & c, sizeof (int));\n@@ -2189,9 +2205,9 @@ Defining the macro as\n @noindent\n provides the desired result.\n \n-Unintended grouping can result in another way.  Consider @samp{sizeof\n+Unintended grouping can result in another way.  Consider @code{sizeof\n ceil_div(1, 2)}.  That has the appearance of a C expression that would\n-compute the size of the type of @samp{ceil_div (1, 2)}, but in fact it\n+compute the size of the type of @code{ceil_div (1, 2)}, but in fact it\n means something very different.  Here is what it expands to:\n \n @example\n@@ -2200,11 +2216,11 @@ sizeof ((1) + (2) - 1) / (2)\n \n @noindent\n This would take the size of an integer and divide it by two.  The\n-precedence rules have put the division outside the @samp{sizeof} when it\n+precedence rules have put the division outside the @code{sizeof} when it\n was intended to be inside.\n \n Parentheses around the entire macro definition prevent such problems.\n-Here, then, is the recommended way to define @samp{ceil_div}:\n+Here, then, is the recommended way to define @code{ceil_div}:\n \n @example\n #define ceil_div(x, y) (((x) + (y) - 1) / (y))\n@@ -2216,7 +2232,7 @@ Here, then, is the recommended way to define @samp{ceil_div}:\n \n Often it is desirable to define a macro that expands into a compound\n statement.  Consider, for example, the following macro, that advances a\n-pointer (the argument @samp{p} says where to find it) across whitespace\n+pointer (the argument @code{p} says where to find it) across whitespace\n characters:\n \n @example\n@@ -2232,14 +2248,14 @@ Here backslash-newline is used to split the macro definition, which must\n be a single logical line, so that it resembles the way such code would\n be laid out if not part of a macro definition.\n \n-A call to this macro might be @samp{SKIP_SPACES (p, lim)}.  Strictly\n+A call to this macro might be @code{SKIP_SPACES (p, lim)}.  Strictly\n speaking, the call expands to a compound statement, which is a complete\n statement with no need for a semicolon to end it.  However, since it\n looks like a function call, it minimizes confusion if you can use it\n like a function call, writing a semicolon afterward, as in\n-@samp{SKIP_SPACES (p, lim);}\n+@code{SKIP_SPACES (p, lim);}\n \n-This can cause trouble before @samp{else} statements, because the\n+This can cause trouble before @code{else} statements, because the\n semicolon is actually a null statement.  Suppose you write\n \n @example\n@@ -2249,12 +2265,12 @@ else @dots{}\n @end example\n \n @noindent\n-The presence of two statements --- the compound statement and a null\n-statement --- in between the @samp{if} condition and the @samp{else}\n+The presence of two statements---the compound statement and a null\n+statement---in between the @code{if} condition and the @code{else}\n makes invalid C code.\n \n-The definition of the macro @samp{SKIP_SPACES} can be altered to solve\n-this problem, using a @samp{do @dots{} while} statement.  Here is how:\n+The definition of the macro @code{SKIP_SPACES} can be altered to solve\n+this problem, using a @code{do @dots{} while} statement.  Here is how:\n \n @example\n #define SKIP_SPACES(p, limit)     \\\n@@ -2265,7 +2281,7 @@ do @{ char *lim = (limit);         \\\n while (0)\n @end example\n \n-Now @samp{SKIP_SPACES (p, lim);} expands into\n+Now @code{SKIP_SPACES (p, lim);} expands into\n \n @example\n do @{@dots{}@} while (0);\n@@ -2280,7 +2296,7 @@ generate no extra code for it.\n \n @cindex side effects (in macro arguments)\n @cindex unsafe macros\n-Many C programs define a macro @samp{min}, for ``minimum'', like this:\n+Many C programs define a macro @code{min}, for ``minimum'', like this:\n \n @example\n #define min(X, Y)  ((X) < (Y) ? (X) : (Y))\n@@ -2301,18 +2317,18 @@ next = ((x + y) < (foo (z)) ? (x + y) : (foo (z)));\n @end example\n \n @noindent\n-where @samp{x + y} has been substituted for @samp{X} and @samp{foo (z)}\n-for @samp{Y}.\n+where @code{x + y} has been substituted for @code{X} and @code{foo (z)}\n+for @code{Y}.\n \n-The function @samp{foo} is used only once in the statement as it appears\n-in the program, but the expression @samp{foo (z)} has been substituted\n-twice into the macro expansion.  As a result, @samp{foo} might be called\n+The function @code{foo} is used only once in the statement as it appears\n+in the program, but the expression @code{foo (z)} has been substituted\n+twice into the macro expansion.  As a result, @code{foo} might be called\n two times when the statement is executed.  If it has side effects or if\n it takes a long time to compute, the results might not be what you\n-intended.  We say that @samp{min} is an @dfn{unsafe} macro.\n+intended.  We say that @code{min} is an @dfn{unsafe} macro.\n \n-The best solution to this problem is to define @samp{min} in a way that\n-computes the value of @samp{foo (z)} only once.  The C language offers\n+The best solution to this problem is to define @code{min} in a way that\n+computes the value of @code{foo (z)} only once.  The C language offers\n no standard way to do this, but it can be done with GNU extensions as\n follows:\n \n@@ -2331,21 +2347,23 @@ the risk of conflict with an identifier of wider scope (it is impossible\n to avoid this entirely).  Now each argument is evaluated exactly once.\n \n If you do not wish to use GNU C extensions, the only solution is to be\n-careful when @emph{using} the macro @samp{min}.  For example, you can\n-calculate the value of @samp{foo (z)}, save it in a variable, and use\n-that variable in @samp{min}:\n+careful when @emph{using} the macro @code{min}.  For example, you can\n+calculate the value of @code{foo (z)}, save it in a variable, and use\n+that variable in @code{min}:\n \n @example\n+@group\n #define min(X, Y)  ((X) < (Y) ? (X) : (Y))\n @dots{}\n @{\n   int tem = foo (z);\n   next = min (x + y, tem);\n @}\n+@end group\n @end example\n \n @noindent\n-(where we assume that @samp{foo} returns type @samp{int}).\n+(where we assume that @code{foo} returns type @code{int}).\n \n @node Self-Referential Macros\n @subsection Self-Referential Macros\n@@ -2363,22 +2381,22 @@ the preprocessor output unchanged.  Let's consider an example:\n @end example\n \n @noindent\n-where @samp{foo} is also a variable in your program.\n+where @code{foo} is also a variable in your program.\n \n-Following the ordinary rules, each reference to @samp{foo} will expand\n-into @samp{(4 + foo)}; then this will be rescanned and will expand into\n-@samp{(4 + (4 + foo))}; and so on until the computer runs out of memory.\n+Following the ordinary rules, each reference to @code{foo} will expand\n+into @code{(4 + foo)}; then this will be rescanned and will expand into\n+@code{(4 + (4 + foo))}; and so on until the computer runs out of memory.\n \n The self-reference rule cuts this process short after one step, at\n-@samp{(4 + foo)}.  Therefore, this macro definition has the possibly\n-useful effect of causing the program to add 4 to the value of @samp{foo}\n-wherever @samp{foo} is referred to.\n+@code{(4 + foo)}.  Therefore, this macro definition has the possibly\n+useful effect of causing the program to add 4 to the value of @code{foo}\n+wherever @code{foo} is referred to.\n \n In most cases, it is a bad idea to take advantage of this feature.  A\n-person reading the program who sees that @samp{foo} is a variable will\n+person reading the program who sees that @code{foo} is a variable will\n not expect that it is a macro as well.  The reader will come across the\n-identifier @samp{foo} in the program and think its value should be that\n-of the variable @samp{foo}, whereas in fact the value is four greater.\n+identifier @code{foo} in the program and think its value should be that\n+of the variable @code{foo}, whereas in fact the value is four greater.\n \n One common, useful use of self-reference is to create a macro which\n expands to itself.  If you write\n@@ -2388,10 +2406,10 @@ expands to itself.  If you write\n @end example\n \n @noindent\n-then the macro @code{EPERM} expands to @samp{EPERM}.  Effectively, it is\n+then the macro @code{EPERM} expands to @code{EPERM}.  Effectively, it is\n left alone by the preprocessor whenever it's used in running text.  You\n can tell that it's a macro with @samp{#ifdef}.  You might do this if you\n-want to define numeric constants with an @samp{enum}, but have\n+want to define numeric constants with an @code{enum}, but have\n @samp{#ifdef} be true for each constant.\n \n If a macro @code{x} expands to use a macro @code{y}, and the expansion of\n@@ -2405,7 +2423,7 @@ either.  Thus, if we have\n @end example\n \n @noindent\n-then @samp{x} and @samp{y} expand as follows:\n+then @code{x} and @code{y} expand as follows:\n \n @example\n @group\n@@ -2458,12 +2476,12 @@ that the prescan does make a difference in three special cases:\n Nested calls to a macro.\n \n We say that @dfn{nested} calls to a macro occur when a macro's argument\n-contains a call to that very macro.  For example, if @samp{f} is a macro\n-that expects one argument, @samp{f (f (1))} is a nested pair of calls to\n-@samp{f}.  The desired expansion is made by expanding @samp{f (1)} and\n-substituting that into the definition of @samp{f}.  The prescan causes\n-the expected result to happen.  Without the prescan, @samp{f (1)} itself\n-would be substituted as an argument, and the inner use of @samp{f} would\n+contains a call to that very macro.  For example, if @code{f} is a macro\n+that expects one argument, @code{f (f (1))} is a nested pair of calls to\n+@code{f}.  The desired expansion is made by expanding @code{f (1)} and\n+substituting that into the definition of @code{f}.  The prescan causes\n+the expected result to happen.  Without the prescan, @code{f (1)} itself\n+would be substituted as an argument, and the inner use of @code{f} would\n appear during the main scan as an indirect self-reference and would not\n be expanded.\n \n@@ -2483,9 +2501,9 @@ instance, if you have\n #define BUFSIZE TABLESIZE\n @end example\n \n-then @samp{AFTERX(BUFSIZE)} expands to @samp{X_BUFSIZE}, and\n-@samp{XAFTERX(BUFSIZE)} expands to @samp{X_1024}.  (Not to\n-@samp{X_TABLESIZE}.  Prescan always does a complete expansion.)\n+then @code{AFTERX(BUFSIZE)} expands to @code{X_BUFSIZE}, and\n+@code{XAFTERX(BUFSIZE)} expands to @code{X_1024}.  (Not to\n+@code{X_TABLESIZE}.  Prescan always does a complete expansion.)\n \n @item\n Macros used in arguments, whose expansions contain unshielded commas.\n@@ -2499,9 +2517,9 @@ wrong number of arguments.  Here is an example:\n #define lose(x) (1 + (x))\n @end example\n \n-We would like @samp{bar(foo)} to turn into @samp{(1 + (foo))}, which\n-would then turn into @samp{(1 + (a,b))}.  Instead, @samp{bar(foo)}\n-expands into @samp{lose(a,b)}, and you get an error because @code{lose}\n+We would like @code{bar(foo)} to turn into @code{(1 + (foo))}, which\n+would then turn into @code{(1 + (a,b))}.  Instead, @code{bar(foo)}\n+expands into @code{lose(a,b)}, and you get an error because @code{lose}\n requires a single argument.  In this case, the problem is easily solved\n by the same parentheses that ought to be used to prevent misnesting of\n arithmetic operations:\n@@ -2538,8 +2556,8 @@ ignore_second_arg (foo (),\n @end example\n \n @noindent\n-The syntax error triggered by the tokens @samp{syntax error} results in\n-an error message citing line three --- the line of ignore_second_arg ---\n+The syntax error triggered by the tokens @code{syntax error} results in\n+an error message citing line three---the line of ignore_second_arg---\n even though the problematic code comes from line five.\n \n We consider this a bug, and intend to fix it in the near future.\n@@ -2552,11 +2570,11 @@ A @dfn{conditional} is a directive that instructs the preprocessor to\n select whether or not to include a chunk of code in the final token\n stream passed to the compiler.  Preprocessor conditionals can test\n arithmetic expressions, or whether a name is defined as a macro, or both\n-simultaneously using the special @samp{defined} operator.\n+simultaneously using the special @code{defined} operator.\n \n-A conditional in the C preprocessor resembles in some ways an @samp{if}\n+A conditional in the C preprocessor resembles in some ways an @code{if}\n statement in C, but it is important to understand the difference between\n-them.  The condition in an @samp{if} statement is tested during the\n+them.  The condition in an @code{if} statement is tested during the\n execution of your program.  Its purpose is to allow your program to\n behave differently from run to run, depending on the data it is\n operating on.  The condition in a preprocessing conditional directive is\n@@ -2565,16 +2583,16 @@ code to be included in the program depending on the situation at the\n time of compilation.\n \n However, the distinction is becoming less clear.  Modern compilers often\n-do test @samp{if} statements when a program is compiled, if their\n+do test @code{if} statements when a program is compiled, if their\n conditions are known not to vary at run time, and eliminate code which\n can never be executed.  If you can count on your compiler to do this,\n-you may find that your program is more readable if you use @samp{if}\n+you may find that your program is more readable if you use @code{if}\n statements with constant conditions (perhaps determined by macros).  Of\n course, you can only use this to exclude code, not type definitions or\n other preprocessing directives, and you can only do it if the code\n remains syntactically valid when it is not to be used.\n \n-GNU C version 3 eliminates this kind of never-executed code even when\n+GCC version 3 eliminates this kind of never-executed code even when\n not optimizing.  Older versions did it only when optimizing.\n \n @menu\n@@ -2708,7 +2726,7 @@ Your program might have a special header file (often called\n @file{config.h}) that is adjusted when the program is compiled.  It can\n define or not define macros depending on the features of the system and\n the desired capabilities of the program.  The adjustment can be\n-automated by a tool such as @docref{autoconf}, or done by hand.\n+automated by a tool such as @command{autoconf}, or done by hand.\n @end itemize\n \n @node If\n@@ -2741,21 +2759,21 @@ code.\n @item\n Arithmetic operators for addition, subtraction, multiplication,\n division, bitwise operations, shifts, comparisons, and logical\n-operations (@samp{&&} and @samp{||}).  The latter two obey the usual\n+operations (@code{&&} and @code{||}).  The latter two obey the usual\n short-circuiting rules of standard C.\n \n @item\n Macros.  All macros in the expression are expanded before actual\n computation of the expression's value begins.\n \n @item\n-Uses of the @samp{defined} operator, which lets you check whether macros\n+Uses of the @code{defined} operator, which lets you check whether macros\n are defined in the middle of an @samp{#if}.\n \n @item\n Identifiers that are not macros, which are all considered to be the\n-number zero.  This allows you to write @samp{@w{#if MACRO}} instead of\n-@samp{@w{#ifdef MACRO}}, if you know that MACRO, when defined, will\n+number zero.  This allows you to write @code{@w{#if MACRO}} instead of\n+@code{@w{#ifdef MACRO}}, if you know that MACRO, when defined, will\n always have a nonzero value.  Function-like macros used without their\n function call parentheses are also treated as zero.\n \n@@ -2785,23 +2803,23 @@ treats the conditional as having failed.\n @subsection Defined\n \n @cindex @code{defined}\n-The special operator @samp{defined} is used in @samp{#if} and\n+The special operator @code{defined} is used in @samp{#if} and\n @samp{#elif} expressions to test whether a certain name is defined as a\n-macro.  @samp{defined @var{name}} and @samp{defined (@var{name})} are\n+macro.  @code{defined @var{name}} and @code{defined (@var{name})} are\n both expressions whose value is 1 if @var{name} is defined as a macro at\n-the current point in the program, and 0 otherwise.  Thus,  @samp{@w{#if\n-defined MACRO}} is precisely equivalent to @samp{@w{#ifdef MACRO}}.\n+the current point in the program, and 0 otherwise.  Thus,  @code{@w{#if\n+defined MACRO}} is precisely equivalent to @code{@w{#ifdef MACRO}}.\n \n-@samp{defined} is useful when you wish to test more than one macro for\n+@code{defined} is useful when you wish to test more than one macro for\n existence at once.  For example,\n \n @example\n #if defined (__vax__) || defined (__ns16000__)\n @end example\n \n @noindent\n-would succeed if either of the names @samp{__vax__} or\n-@samp{__ns16000__} is defined as a macro.\n+would succeed if either of the names @code{__vax__} or\n+@code{__ns16000__} is defined as a macro.\n \n Conditionals written like this:\n \n@@ -2810,13 +2828,13 @@ Conditionals written like this:\n @end example\n \n @noindent\n-can generally be simplified to just @samp{@w{#if BUFSIZE >= 1024}},\n-since if @samp{BUFSIZE} is not defined, it will be interpreted as having\n+can generally be simplified to just @code{@w{#if BUFSIZE >= 1024}},\n+since if @code{BUFSIZE} is not defined, it will be interpreted as having\n the value zero.\n \n-If the @samp{defined} operator appears as a result of a macro expansion,\n+If the @code{defined} operator appears as a result of a macro expansion,\n the C standard says the behavior is undefined.  GNU cpp treats it as a\n-genuine @samp{defined} operator and evaluates it normally.  It will warn\n+genuine @code{defined} operator and evaluates it normally.  It will warn\n wherever your code uses this feature if you use the command-line option\n @option{-pedantic}, since other compilers may handle it differently.\n \n@@ -2829,13 +2847,16 @@ alternative text to be used if the condition fails.  This is what it\n looks like:\n \n @example\n+@group\n #if @var{expression}\n @var{text-if-true}\n #else /* Not @var{expression} */\n @var{text-if-false}\n #endif /* Not @var{expression} */\n+@end group\n @end example\n \n+@noindent\n If @var{expression} is nonzero, the @var{text-if-true} is included and\n the @var{text-if-false} is skipped.  If @var{expression} is zero, the\n opposite happens.\n@@ -2900,20 +2921,20 @@ code will end the commenting-out.  The probable result is a flood of\n syntax errors.\n \n One way to avoid this problem is to use an always-false conditional\n-instead.  For instance, put @samp{#if 0} before the deleted code and\n-@samp{#endif} after it.  This This works even if the code being turned\n+instead.  For instance, put @code{#if 0} before the deleted code and\n+@code{#endif} after it.  This This works even if the code being turned\n off contains conditionals, but they must be entire conditionals\n (balanced @samp{#if} and @samp{#endif}).\n \n-Some people use @samp{#ifdef notdef} instead.  This is risky, because\n-@samp{notdef} might be accidentally defined as a macro, and then the\n-conditional would succeed.  @samp{#if 0} can be counted on to fail.\n+Some people use @code{#ifdef notdef} instead.  This is risky, because\n+@code{notdef} might be accidentally defined as a macro, and then the\n+conditional would succeed.  @code{#if 0} can be counted on to fail.\n \n-Do not use @samp{#if 0} for comments which are not C code.  Use a real\n-comment, instead.  The interior of @samp{#if 0} must consist of complete\n+Do not use @code{#if 0} for comments which are not C code.  Use a real\n+comment, instead.  The interior of @code{#if 0} must consist of complete\n tokens; in particular, single-quote characters must balance.  Comments\n often contain unbalanced single-quote characters (known in English as\n-apostrophes).  These confuse @samp{#if 0}.  They don't confuse\n+apostrophes).  These confuse @code{#if 0}.  They don't confuse\n @samp{/*}.\n \n @node Diagnostics\n@@ -2975,15 +2996,15 @@ reported as having appeared on the line of the source file where the\n outermost macro was used.  We intend to be more accurate in the future.\n \n If you write a program which generates source code, such as the\n-@code{bison} parser generator, you may want to adjust the preprocessor's\n+@command{bison} parser generator, you may want to adjust the preprocessor's\n notion of the current file name and line number by hand.  Parts of the\n-output from @code{bison} are generated from scratch, other parts come\n+output from @command{bison} are generated from scratch, other parts come\n from a standard parser file.  The rest are copied verbatim from\n-@code{bison}'s input.  You would like compiler error messages and\n+@command{bison}'s input.  You would like compiler error messages and\n symbolic debuggers to be able to refer to @code{bison}'s input file.\n \n @findex #line\n-@code{bison} or any such program can arrange this by writing\n+@command{bison} or any such program can arrange this by writing\n @samp{#line} directives into the output file.  @samp{#line} is a\n directive that specifies the original line number and source file name\n for subsequent input in the current preprocessor input file.\n@@ -3027,27 +3048,27 @@ conveyed in the language itself.  Three forms of this directive\n A C compiler is free to attach any meaning it likes to other pragmas.\n \n GCC has historically preferred to use extensions to the syntax of the\n-language, such as @samp{__attribute__}, for this purpose.  However, GCC\n+language, such as @code{__attribute__}, for this purpose.  However, GCC\n does define a few pragmas of its own.  These mostly have effects on the\n entire translation unit or source file.\n \n In GCC version 3, all GNU-defined, supported pragmas have been given a\n-@samp{GCC} prefix.  This is in line with the @samp{STDC} prefix on all\n+@code{GCC} prefix.  This is in line with the @code{STDC} prefix on all\n pragmas defined by C99.  For backward compatibility, pragmas which were\n recognized by previous versions are still recognized without the\n-@samp{GCC} prefix, but that usage is deprecated.  Some older pragmas are\n+@code{GCC} prefix, but that usage is deprecated.  Some older pragmas are\n deprecated in their entirety.  They are not recognized with the\n-@samp{GCC} prefix.  @xref{Obsolete Features}.\n+@code{GCC} prefix.  @xref{Obsolete Features}.\n \n @cindex @code{_Pragma}\n-C99 introduces the @samp{_Pragma} operator.  This feature addresses a\n+C99 introduces the @code{@w{_Pragma}} operator.  This feature addresses a\n major problem with @samp{#pragma}: being a directive, it cannot be\n-produced as the result of macro expansion.  @samp{_Pragma} is an\n-operator, much like @samp{sizeof} or @samp{defined}, and can be embedded\n+produced as the result of macro expansion.  @code{@w{_Pragma}} is an\n+operator, much like @code{sizeof} or @code{defined}, and can be embedded\n in a macro.\n \n-The syntax is @code{_Pragma (string-literal)}, where\n-@samp{string-literal} can be either a normal or wide-character string\n+Its syntax is @code{@w{_Pragma (@var{string-literal})}}, where\n+@var{string-literal} can be either a normal or wide-character string\n literal.  It is destringized, by replacing all @samp{\\\\} with a single\n @samp{\\} and all @samp{\\\"} with a @samp{\"}.  The result is then\n processed as if it had appeared as the right hand side of a\n@@ -3058,15 +3079,15 @@ _Pragma (\"GCC dependency \\\"parse.y\\\"\")\n @end example\n \n @noindent\n-has the same effect as @samp{#pragma GCC dependency \"parse.y\"}.  The\n+has the same effect as @code{#pragma GCC dependency \"parse.y\"}.  The\n same effect could be achieved using macros, for example\n \n @example\n #define DO_PRAGMA(x) _Pragma (#x)\n DO_PRAGMA (GCC dependency \"parse.y\")\n @end example\n \n-The standard is unclear on where a @samp{_Pragma} operator can appear.\n+The standard is unclear on where a @code{_Pragma} operator can appear.\n The preprocessor accepts it even within a preprocessing conditional\n directive like @samp{#if}.  To be safe, you are probably best keeping it\n out of directives other than @samp{#define}, and putting it on a line of\n@@ -3076,9 +3097,9 @@ This manual documents the pragmas which are meaningful to the\n preprocessor itself.  Other pragmas are meaningful to the C or C++\n compilers.  They are documented in the GCC manual.\n \n-@ftable @samp\n+@ftable @code\n @item #pragma GCC dependency\n-@samp{#pragma GCC dependency} allows you to check the relative dates of\n+@code{#pragma GCC dependency} allows you to check the relative dates of\n the current file and another file. If the other file is more recent than\n the current file, a warning is issued. This is useful if the current\n file is derived from the other file, and should be regenerated.  The\n@@ -3095,7 +3116,7 @@ warning message.\n Sometimes, there is an identifier that you want to remove completely\n from your program, and make sure that it never creeps back in.  To\n enforce this, you can @dfn{poison} the identifier with this pragma.\n-@samp{#pragma GCC poison} is followed by a list of identifiers to\n+@code{#pragma GCC poison} is followed by a list of identifiers to\n poison.  If any of those identifiers appears anywhere in the source\n after the directive, it is a hard error.  For example,\n \n@@ -3174,14 +3195,14 @@ discarded.\n \n The ISO standard specifies that it is implementation defined whether a\n preprocessor preserves whitespace between tokens, or replaces it with\n-e.g. a single space.  In the GNU C preprocessor, whitespace between\n-tokens is collapsed to become a single space, with the exception that\n-the first token on a non-directive line is preceded with sufficient\n-spaces that it appears in the same column in the preprocessed output\n-that it appeared in in the original source file.  This is so the output\n-is easy to read.  @xref{Differences from previous versions}.  CPP does\n-not insert any whitespace where there was none in the original source,\n-except where necessary to prevent an accidental token paste.\n+e.g. a single space.  In GNU CPP, whitespace between tokens is collapsed\n+to become a single space, with the exception that the first token on a\n+non-directive line is preceded with sufficient spaces that it appears in\n+the same column in the preprocessed output that it appeared in in the\n+original source file.  This is so the output is easy to read.\n+@xref{Differences from previous versions}.  CPP does not insert any\n+whitespace where there was none in the original source, except where\n+necessary to prevent an accidental token paste.\n \n @cindex linemarkers\n Source file name and line number information is conveyed by lines\n@@ -3211,7 +3232,7 @@ This indicates that the following text comes from a system header file,\n so certain warnings should be suppressed.\n @item 4\n This indicates that the following text should be treated as being\n-wrapped in an implicit @samp{extern \"C\"} block.\n+wrapped in an implicit @code{extern \"C\"} block.\n @c maybe cross reference NO_IMPLICIT_EXTERN_C\n @end table\n \n@@ -3349,8 +3370,8 @@ The @samp{U} and @samp{LL} integer constant suffixes, which were not\n available in traditional C@.  (Traditional C does support the @samp{L}\n suffix for simple long integer constants.)  You are not warned about\n uses of these suffixes in macros defined in system headers.  For\n-instance, @samp{UINT_MAX} may well be defined as @samp{4294967295U}, but\n-you will not be warned if you use @samp{UINT_MAX}.\n+instance, @code{UINT_MAX} may well be defined as @code{4294967295U}, but\n+you will not be warned if you use @code{UINT_MAX}.\n \n You can usually avoid the warning, and the related warning about\n constants which are so large that they are unsigned, by writing the\n@@ -3404,15 +3425,15 @@ same column as it did in the original source file.\n @item The numeric value of character constants in preprocessor expressions.\n \n The preprocessor and compiler interpret character constants in the same\n-way; escape sequences such as @code{\\a} are given the values they would\n+way; escape sequences such as @samp{\\a} are given the values they would\n have on the target machine.\n \n Multi-character character constants are interpreted a character at a\n time, shifting the previous result left by the number of bits per\n character on the host, and adding the new character.  For example, 'ab'\n on an 8-bit host would be interpreted as @w{'a' * 256 + 'b'}.  If there\n are more characters in the constant than can fit in the widest native\n-integer type on the host, usually a @samp{long}, the excess characters\n+integer type on the host, usually a @code{long}, the excess characters\n are ignored and a diagnostic is given.\n \n @item Source file inclusion.\n@@ -3463,8 +3484,8 @@ The standard requires at least 15 levels.\n \n @item Nesting levels of conditional inclusion.\n \n-The C standard mandates this be at least 63.  The GNU C preprocessor\n-is limited only by available memory.\n+The C standard mandates this be at least 63.  GNU CPP is limited only by\n+available memory.\n \n @item Levels of parenthesised expressions within a full expression.\n \n@@ -3478,7 +3499,7 @@ requires only that the first 63 be significant.\n \n @item Number of macros simultaneously defined in a single translation unit.\n \n-The standard requires at least 4095 be possible; GNU cpp is limited only\n+The standard requires at least 4095 be possible.  GNU CPP is limited only\n by available memory.\n \n @item Number of parameters in a macro definition and arguments in a macro call.\n@@ -3544,8 +3565,8 @@ An assertion looks like this:\n sequence of tokens; all characters are significant except for leading\n and trailing whitespace, and differences in internal whitespace\n sequences are ignored.  (This is similar to the rules governing macro\n-redefinition.)  Thus, @samp{(x + y)} is different from @samp{(x+y)} but\n-equivalent to @samp{@w{( x + y )}}.  Parentheses do not nest inside an\n+redefinition.)  Thus, @code{(x + y)} is different from @code{(x+y)} but\n+equivalent to @code{@w{( x + y )}}.  Parentheses do not nest inside an\n answer.\n \n @cindex testing predicates\n@@ -3602,7 +3623,7 @@ You can also make or cancel assertions using command line options.\n @node Obsolete once-only headers\n @subsection Obsolete once-only headers\n \n-GNU C supports two more ways of indicating that a header file should be\n+GNU CPP supports two more ways of indicating that a header file should be\n read only once.  Neither one is as portable as a wrapper @samp{#ifndef},\n and we recommend you do not use them in new programs.\n \n@@ -3656,7 +3677,7 @@ between two tokens.  It is almost always safe to delete the @samp{##}.\n @cindex pragma poison\n @item @code{#pragma poison}\n \n-This is the same as @samp{#pragma GCC poison}.  The version without the\n+This is the same as @code{#pragma GCC poison}.  The version without the\n @code{GCC} prefix is deprecated.  @xref{Pragmas}.\n \n @cindex multi-line string constants\n@@ -3725,12 +3746,11 @@ versions accepted it silently.\n @item @samp{##} swallowing preceding text in rest argument macros\n \n Formerly, in a macro expansion, if @samp{##} appeared before a variable\n-arguments parameter, and the set of tokens specified for that argument in\n-the macro invocation was empty, previous versions of the GNU C\n-preprocessor would back up and remove the preceding sequence of\n-non-whitespace characters (@strong{not} the preceding token).  This\n-extension is in direct conflict with the 1999 C standard and has been\n-drastically pared back.\n+arguments parameter, and the set of tokens specified for that argument\n+in the macro invocation was empty, previous versions of GNU CPP would\n+back up and remove the preceding sequence of non-whitespace characters\n+(@strong{not} the preceding token).  This extension is in direct\n+conflict with the 1999 C standard and has been drastically pared back.\n \n In the current version of the preprocessor, if @samp{##} appears between\n a comma and a variable arguments parameter, and the variable argument is\n@@ -3768,10 +3788,10 @@ without notice.\n \n @ignore\n @c man begin SYNOPSIS\n-cpp [@option{-D}@var{macro}[=@var{defn}]...] [@option{-U}@var{macro}]\n-    [@option{-I}@var{dir}...] [@option{-W}@var{warn}...]\n+cpp [@option{-D}@var{macro}[=@var{defn}]@dots{}] [@option{-U}@var{macro}]\n+    [@option{-I}@var{dir}@dots{}] [@option{-W}@var{warn}@dots{}]\n     [@option{-M}|@option{-MM}] [@option{-MG}] [@option{-MF} @var{filename}]\n-    [@option{-MP}] [@option{-MQ} @var{target}...] [@option{-MT} @var{target}...]\n+    [@option{-MP}] [@option{-MQ} @var{target}@dots{}] [@option{-MT} @var{target}@dots{}]\n     [@option{-x} @var{language}] [@option{-std=}@var{standard}]\n     @var{infile} @var{outfile}\n \n@@ -3801,9 +3821,9 @@ effect.  Long options that take arguments require a space between option\n and argument.\n \n @cindex options\n-@table @code\n+@table @gcctabopt\n @item -D @var{name}\n-Predefine @var{name} as a macro, with definition @samp{1}.\n+Predefine @var{name} as a macro, with definition @code{1}.\n \n @item -D @var{name}=@var{definition}\n Predefine @var{name} as a macro, with definition @var{definition}.\n@@ -3818,7 +3838,7 @@ If you wish to define a function-like macro on the command line, write\n its argument list with surrounding parentheses before the equals sign\n (if any).  Parentheses are meaningful to most shells, so you will need\n to quote the option.  With @command{sh} and @command{csh},\n-@option{-D'@var{name}(@var{args...})=@var{definition}'} works.\n+@option{-D'@var{name}(@var{args@dots{}})=@var{definition}'} works.\n \n @item -U @var{name}\n Cancel any previous definition of @var{name}, either built in or\n@@ -3903,10 +3923,10 @@ without @samp{-pedantic} but treats as warnings.\n \n @item -M\n Instead of outputting the result of preprocessing, output a rule\n-suitable for @code{make} describing the dependencies of the main source\n-file.  The preprocessor outputs one @code{make} rule containing the\n-object file name for that source file, a colon, and the names of all the\n-included files, including those coming from @option{-include} or\n+suitable for @command{make} describing the dependencies of the main\n+source file.  The preprocessor outputs one @command{make} rule containing\n+the object file name for that source file, a colon, and the names of all\n+the included files, including those coming from @option{-include} or\n @option{-imacros} command line options.\n \n Unless specified explicitly (with @option{-MT} or @option{-MQ}), the\n@@ -3916,9 +3936,9 @@ files then the rule is split into several lines using @samp{\\}-newline.\n The rule has no commands.\n \n @item -MM\n-Like @option{-M}, but mention only the files included with @samp{#include\n-\"@var{file}\"} or with @option{-include} or @option{-imacros} command line\n-options.  System header files included with @samp{#include <@var{file}>}\n+Like @option{-M}, but mention only the files included with @code{@w{#include\n+\"@var{file}\"}} or with @option{-include} or @option{-imacros} command line\n+options.  System header files included with @code{@w{#include <@var{file}>}}\n are omitted.\n \n @item -MF @var{file}\n@@ -3938,8 +3958,8 @@ This feature is used in automatic updating of makefiles.\n @item -MP\n This option instructs CPP to add a phony target for each dependency\n other than the main file, causing each to depend on nothing.  These\n-dummy rules work around errors @code{make} gives if you remove header\n-files without updating the @code{Makefile} to match.\n+dummy rules work around errors @command{make} gives if you remove header\n+files without updating the @file{Makefile} to match.\n \n This is typical output:\n \n@@ -3960,7 +3980,7 @@ An @option{-MT} option will set the target to be exactly the string you\n specify.  If you want multiple targets, you can specify them as a single\n argument to @option{-MT}, or use multiple @option{-MT} options.\n \n-For example, @samp{@w{-MT '$(objpfx)foo.o'}} might give\n+For example, @option{@w{-MT '$(objpfx)foo.o'}} might give\n \n @example\n $(objpfx)foo.o: foo.c\n@@ -3969,7 +3989,7 @@ $(objpfx)foo.o: foo.c\n @item -MQ @var{target}\n \n Same as @option{-MT}, but it quotes any characters which are special to\n-Make. @samp{@w{-MQ '$(objpfx)foo.o'}} gives\n+Make. @option{@w{-MQ '$(objpfx)foo.o'}} gives\n \n @example\n $$(objpfx)foo.o: foo.c\n@@ -4042,13 +4062,13 @@ The 1999 C standard plus GNU extensions.\n @item -I-\n Split the include path.  Any directories specified with @option{-I}\n options before @option{-I-} are searched only for headers requested with\n-@samp{@w{#include \"@var{file}\"}}; they are not searched for\n-@samp{@w{#include <@var{file}>}}.  If additional directories are\n+@code{@w{#include \"@var{file}\"}}; they are not searched for\n+@code{@w{#include <@var{file}>}}.  If additional directories are\n specified with @option{-I} options after the @option{-I-}, those\n directories are searched for all @samp{#include} directives.\n \n In addition, @option{-I-} inhibits the use of the directory of the current\n-file directory as the first search directory for @samp{@w{#include\n+file directory as the first search directory for @code{@w{#include\n \"@var{file}\"}}.  @xref{Search Path}.\n \n @item -nostdinc\n@@ -4067,7 +4087,7 @@ Process @var{file} as if @code{#include \"file\"} appeared as the first\n line of the primary source file.  However, the first directory searched\n for @var{file} is the preprocessor's working directory @emph{instead of}\n the directory containing the main source file.  If not found there, it\n-is searched for in the remainder of the @code{#include \"...\"} search\n+is searched for in the remainder of the @code{#include \"@dots{}\"} search\n chain as normal.\n \n If multiple @option{-include} options are given, the files are included\n@@ -4116,7 +4136,7 @@ conversion, escaped newline splicing, and processing of most directives.\n In this mode the integrated preprocessor is little more than a tokenizer\n for the front ends.\n \n-@samp{-fpreprocessed} is implicit if the input file has one of the\n+@option{-fpreprocessed} is implicit if the input file has one of the\n extensions @samp{.i}, @samp{.ii} or @samp{.mi}.  These are the\n extensions that GCC uses for preprocessed files created by\n @option{-save-temps}.\n@@ -4130,7 +4150,7 @@ ignored.  The default is 8.\n @item -fno-show-column\n Do not print column numbers in diagnostics.  This may be necessary if\n diagnostics are being scanned by a program that does not understand the\n-column numbers, such as @code{dejagnu}.\n+column numbers, such as @command{dejagnu}.\n \n @item -A @var{predicate}=@var{answer}\n Make an assertion with the predicate @var{predicate} and answer\n@@ -4153,7 +4173,7 @@ Instead of the normal output, generate a list of @samp{#define}\n directives for all the macros defined during the execution of the\n preprocessor, including predefined macros.  This gives you a way of\n finding out what is predefined in your version of the preprocessor.\n-Assuming you have no file @samp{foo.h}, the command\n+Assuming you have no file @file{foo.h}, the command\n \n @example\n touch foo.h; cpp -dM foo.h\n@@ -4199,7 +4219,8 @@ source line, since the first token on the line is no longer a @samp{#}.\n @item -gcc\n Define the macros @sc{__gnuc__}, @sc{__gnuc_minor__} and\n @sc{__gnuc_patchlevel__}. These are defined automatically when you use\n-@samp{gcc -E}; you can turn them off in that case with @option{-no-gcc}.\n+@command{gcc -E}; you can turn them off in that case with\n+@option{-no-gcc}.\n \n @item -traditional\n Try to imitate the behavior of old-fashioned C, as opposed to ISO\n@@ -4215,8 +4236,7 @@ short file names, such as MS-DOS.\n @item -$\n Forbid the use of @samp{$} in identifiers.  The C standard allows\n implementations to define extra characters that can appear in\n-identifiers.  By default the GNU C preprocessor permits @samp{$}, a\n-common extension.\n+identifiers.  By default GNU CPP permits @samp{$}, a common extension.\n \n @item -h\n @itemx --help"}]}