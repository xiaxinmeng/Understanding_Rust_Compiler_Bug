{"sha": "a459b07fa440fcb449e9b65cf0cc649905b6ba9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ1OWIwN2ZhNDQwZmNiNDQ5ZTliNjVjZjBjYzY0OTkwNWI2YmE5ZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-10-31T16:19:55Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-10-31T16:19:55Z"}, "message": "Streamline for_each_template_parm.\n\n\t* pt.c (for_each_template_parm_r): Use WALK_SUBTREE.\n\tReturn a meaningful value rather than error_mark_node.\n\t(for_each_template_parm): Return a tree.\n\t(uses_template_parms_level): Return bool.\n\t* cp-tree.h: Adjust.\n\nFrom-SVN: r229628", "tree": {"sha": "eb24d290cd61c4f2a9b7ab6f08a383530f3ef77e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb24d290cd61c4f2a9b7ab6f08a383530f3ef77e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a459b07fa440fcb449e9b65cf0cc649905b6ba9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a459b07fa440fcb449e9b65cf0cc649905b6ba9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a459b07fa440fcb449e9b65cf0cc649905b6ba9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a459b07fa440fcb449e9b65cf0cc649905b6ba9e/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "09833a1db1a6a24968cf4575a2a26a8823e3f3ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09833a1db1a6a24968cf4575a2a26a8823e3f3ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09833a1db1a6a24968cf4575a2a26a8823e3f3ca"}], "stats": {"total": 114, "additions": 51, "deletions": 63}, "files": [{"sha": "886a18968c877b32075f79def3987529b84dae58", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a459b07fa440fcb449e9b65cf0cc649905b6ba9e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a459b07fa440fcb449e9b65cf0cc649905b6ba9e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a459b07fa440fcb449e9b65cf0cc649905b6ba9e", "patch": "@@ -1,5 +1,11 @@\n 2015-10-31  Jason Merrill  <jason@redhat.com>\n \n+\t* pt.c (for_each_template_parm_r): Use WALK_SUBTREE.\n+\tReturn a meaningful value rather than error_mark_node.\n+\t(for_each_template_parm): Return a tree.\n+\t(uses_template_parms_level): Return bool.\n+\t* cp-tree.h: Adjust.\n+\n \t* pt.c (unify): Don't diagnose no common base if we already have\n \tthe same template.\n \t(do_auto_deduction): Explain deduction failure."}, {"sha": "6202cab621d0cbe539582ada68f902940d28709a", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a459b07fa440fcb449e9b65cf0cc649905b6ba9e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a459b07fa440fcb449e9b65cf0cc649905b6ba9e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=a459b07fa440fcb449e9b65cf0cc649905b6ba9e", "patch": "@@ -5984,7 +5984,7 @@ extern tree lookup_template_class\t\t(tree, tree, tree, tree,\n extern tree lookup_template_function\t\t(tree, tree);\n extern tree lookup_template_variable\t\t(tree, tree);\n extern int uses_template_parms\t\t\t(tree);\n-extern int uses_template_parms_level\t\t(tree, int);\n+extern bool uses_template_parms_level\t\t(tree, int);\n extern bool in_template_function\t\t(void);\n extern tree instantiate_class_template\t\t(tree);\n extern tree instantiate_template\t\t(tree, tree, tsubst_flags_t);"}, {"sha": "3d3e4a65cc9e49160e754ee94a542bd308b180c9", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 44, "deletions": 62, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a459b07fa440fcb449e9b65cf0cc649905b6ba9e/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a459b07fa440fcb449e9b65cf0cc649905b6ba9e/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=a459b07fa440fcb449e9b65cf0cc649905b6ba9e", "patch": "@@ -166,8 +166,8 @@ static tree convert_nontype_argument_function (tree, tree, tsubst_flags_t);\n static tree convert_nontype_argument (tree, tree, tsubst_flags_t);\n static tree convert_template_argument (tree, tree, tree,\n \t\t\t\t       tsubst_flags_t, int, tree);\n-static int for_each_template_parm (tree, tree_fn_t, void*,\n-\t\t\t\t   hash_set<tree> *, bool);\n+static tree for_each_template_parm (tree, tree_fn_t, void*,\n+\t\t\t\t    hash_set<tree> *, bool);\n static tree expand_template_argument_pack (tree);\n static tree build_template_parm_index (int, int, int, tree, tree);\n static bool inline_needs_template_parms (tree, bool);\n@@ -8692,12 +8692,20 @@ for_each_template_parm_r (tree *tp, int *walk_subtrees, void *d)\n   struct pair_fn_data *pfd = (struct pair_fn_data *) d;\n   tree_fn_t fn = pfd->fn;\n   void *data = pfd->data;\n+  tree result = NULL_TREE;\n+\n+#define WALK_SUBTREE(NODE)\t\t\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      result = for_each_template_parm (NODE, fn, data, pfd->visited,\t\\\n+\t\t\t\t       pfd->include_nondeduced_p);\t\\\n+      if (result) goto out;\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n \n   if (TYPE_P (t)\n-      && (pfd->include_nondeduced_p || TREE_CODE (t) != TYPENAME_TYPE)\n-      && for_each_template_parm (TYPE_CONTEXT (t), fn, data, pfd->visited,\n-\t\t\t\t pfd->include_nondeduced_p))\n-    return error_mark_node;\n+      && (pfd->include_nondeduced_p || TREE_CODE (t) != TYPENAME_TYPE))\n+    WALK_SUBTREE (TYPE_CONTEXT (t));\n \n   switch (TREE_CODE (t))\n     {\n@@ -8710,35 +8718,24 @@ for_each_template_parm_r (tree *tp, int *walk_subtrees, void *d)\n     case ENUMERAL_TYPE:\n       if (!TYPE_TEMPLATE_INFO (t))\n \t*walk_subtrees = 0;\n-      else if (for_each_template_parm (TYPE_TI_ARGS (t),\n-\t\t\t\t       fn, data, pfd->visited, \n-\t\t\t\t       pfd->include_nondeduced_p))\n-\treturn error_mark_node;\n+      else\n+\tWALK_SUBTREE (TYPE_TI_ARGS (t));\n       break;\n \n     case INTEGER_TYPE:\n-      if (for_each_template_parm (TYPE_MIN_VALUE (t),\n-\t\t\t\t  fn, data, pfd->visited, \n-\t\t\t\t  pfd->include_nondeduced_p)\n-\t  || for_each_template_parm (TYPE_MAX_VALUE (t),\n-\t\t\t\t     fn, data, pfd->visited,\n-\t\t\t\t     pfd->include_nondeduced_p))\n-\treturn error_mark_node;\n+      WALK_SUBTREE (TYPE_MIN_VALUE (t));\n+      WALK_SUBTREE (TYPE_MAX_VALUE (t));\n       break;\n \n     case METHOD_TYPE:\n       /* Since we're not going to walk subtrees, we have to do this\n \t explicitly here.  */\n-      if (for_each_template_parm (TYPE_METHOD_BASETYPE (t), fn, data,\n-\t\t\t\t  pfd->visited, pfd->include_nondeduced_p))\n-\treturn error_mark_node;\n+      WALK_SUBTREE (TYPE_METHOD_BASETYPE (t));\n       /* Fall through.  */\n \n     case FUNCTION_TYPE:\n       /* Check the return type.  */\n-      if (for_each_template_parm (TREE_TYPE (t), fn, data, pfd->visited,\n-\t\t\t\t  pfd->include_nondeduced_p))\n-\treturn error_mark_node;\n+      WALK_SUBTREE (TREE_TYPE (t));\n \n       /* Check the parameter types.  Since default arguments are not\n \t instantiated until they are needed, the TYPE_ARG_TYPES may\n@@ -8750,9 +8747,7 @@ for_each_template_parm_r (tree *tp, int *walk_subtrees, void *d)\n \ttree parm;\n \n \tfor (parm = TYPE_ARG_TYPES (t); parm; parm = TREE_CHAIN (parm))\n-\t  if (for_each_template_parm (TREE_VALUE (parm), fn, data,\n-\t\t\t\t      pfd->visited, pfd->include_nondeduced_p))\n-\t    return error_mark_node;\n+\t  WALK_SUBTREE (TREE_VALUE (parm));\n \n \t/* Since we've already handled the TYPE_ARG_TYPES, we don't\n \t   want walk_tree walking into them itself.  */\n@@ -8771,67 +8766,51 @@ for_each_template_parm_r (tree *tp, int *walk_subtrees, void *d)\n \n     case FUNCTION_DECL:\n     case VAR_DECL:\n-      if (DECL_LANG_SPECIFIC (t) && DECL_TEMPLATE_INFO (t)\n-\t  && for_each_template_parm (DECL_TI_ARGS (t), fn, data,\n-\t\t\t\t     pfd->visited, pfd->include_nondeduced_p))\n-\treturn error_mark_node;\n+      if (DECL_LANG_SPECIFIC (t) && DECL_TEMPLATE_INFO (t))\n+\tWALK_SUBTREE (DECL_TI_ARGS (t));\n       /* Fall through.  */\n \n     case PARM_DECL:\n     case CONST_DECL:\n-      if (TREE_CODE (t) == CONST_DECL && DECL_TEMPLATE_PARM_P (t)\n-\t  && for_each_template_parm (DECL_INITIAL (t), fn, data,\n-\t\t\t\t     pfd->visited, pfd->include_nondeduced_p))\n-\treturn error_mark_node;\n+      if (TREE_CODE (t) == CONST_DECL && DECL_TEMPLATE_PARM_P (t))\n+\tWALK_SUBTREE (DECL_INITIAL (t));\n       if (DECL_CONTEXT (t)\n-\t  && pfd->include_nondeduced_p\n-\t  && for_each_template_parm (DECL_CONTEXT (t), fn, data,\n-\t\t\t\t     pfd->visited, pfd->include_nondeduced_p))\n-\treturn error_mark_node;\n+\t  && pfd->include_nondeduced_p)\n+\tWALK_SUBTREE (DECL_CONTEXT (t));\n       break;\n \n     case BOUND_TEMPLATE_TEMPLATE_PARM:\n       /* Record template parameters such as `T' inside `TT<T>'.  */\n-      if (for_each_template_parm (TYPE_TI_ARGS (t), fn, data, pfd->visited,\n-\t\t\t\t  pfd->include_nondeduced_p))\n-\treturn error_mark_node;\n+      WALK_SUBTREE (TYPE_TI_ARGS (t));\n       /* Fall through.  */\n \n     case TEMPLATE_TEMPLATE_PARM:\n     case TEMPLATE_TYPE_PARM:\n     case TEMPLATE_PARM_INDEX:\n       if (fn && (*fn)(t, data))\n-\treturn error_mark_node;\n+\treturn t;\n       else if (!fn)\n-\treturn error_mark_node;\n+\treturn t;\n       break;\n \n     case TEMPLATE_DECL:\n       /* A template template parameter is encountered.  */\n-      if (DECL_TEMPLATE_TEMPLATE_PARM_P (t)\n-\t  && for_each_template_parm (TREE_TYPE (t), fn, data, pfd->visited,\n-\t\t\t\t     pfd->include_nondeduced_p))\n-\treturn error_mark_node;\n+      if (DECL_TEMPLATE_TEMPLATE_PARM_P (t))\n+\tWALK_SUBTREE (TREE_TYPE (t));\n \n       /* Already substituted template template parameter */\n       *walk_subtrees = 0;\n       break;\n \n     case TYPENAME_TYPE:\n-      if (!fn\n-\t  || for_each_template_parm (TYPENAME_TYPE_FULLNAME (t), fn,\n-\t\t\t\t     data, pfd->visited, \n-\t\t\t\t     pfd->include_nondeduced_p))\n-\treturn error_mark_node;\n+      if (!fn)\n+\tWALK_SUBTREE (TYPENAME_TYPE_FULLNAME (t));\n       break;\n \n     case CONSTRUCTOR:\n       if (TREE_TYPE (t) && TYPE_PTRMEMFUNC_P (TREE_TYPE (t))\n-\t  && pfd->include_nondeduced_p\n-\t  && for_each_template_parm (TYPE_PTRMEMFUNC_FN_TYPE\n-\t\t\t\t     (TREE_TYPE (t)), fn, data,\n-\t\t\t\t     pfd->visited, pfd->include_nondeduced_p))\n-\treturn error_mark_node;\n+\t  && pfd->include_nondeduced_p)\n+\tWALK_SUBTREE (TYPE_PTRMEMFUNC_FN_TYPE (TREE_TYPE (t)));\n       break;\n \n     case INDIRECT_REF:\n@@ -8861,8 +8840,11 @@ for_each_template_parm_r (tree *tp, int *walk_subtrees, void *d)\n       break;\n     }\n \n+  #undef WALK_SUBTREE\n+\n   /* We didn't find any template parameters we liked.  */\n-  return NULL_TREE;\n+ out:\n+  return result;\n }\n \n /* For each TEMPLATE_TYPE_PARM, TEMPLATE_TEMPLATE_PARM,\n@@ -8878,13 +8860,13 @@ for_each_template_parm_r (tree *tp, int *walk_subtrees, void *d)\n    parameters that occur in non-deduced contexts.  When false, only\n    visits those template parameters that can be deduced.  */\n \n-static int\n+static tree\n for_each_template_parm (tree t, tree_fn_t fn, void* data,\n \t\t\thash_set<tree> *visited,\n \t\t\tbool include_nondeduced_p)\n {\n   struct pair_fn_data pfd;\n-  int result;\n+  tree result;\n \n   /* Set up.  */\n   pfd.fn = fn;\n@@ -8903,7 +8885,7 @@ for_each_template_parm (tree t, tree_fn_t fn, void* data,\n   result = cp_walk_tree (&t,\n \t\t         for_each_template_parm_r,\n \t\t         &pfd,\n-\t\t         pfd.visited) != NULL_TREE;\n+\t\t         pfd.visited);\n \n   /* Clean up.  */\n   if (!visited)\n@@ -8979,7 +8961,7 @@ in_template_function (void)\n \n /* Returns true if T depends on any template parameter with level LEVEL.  */\n \n-int\n+bool\n uses_template_parms_level (tree t, int level)\n {\n   return for_each_template_parm (t, template_parm_this_level_p, &level, NULL,"}]}