{"sha": "c124af936b6b225eb548ccdd7f01400511d784dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzEyNGFmOTM2YjZiMjI1ZWI1NDhjY2RkN2YwMTQwMDUxMWQ3ODRkYw==", "commit": {"author": {"name": "Tom Honermann", "email": "tom@honermann.net", "date": "2019-02-19T02:54:42Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-02-19T02:54:42Z"}, "message": "P0482R5 char8_t: Standard library support\n\ngcc/cp:\n\n2019-02-19  Tom Honermann  <tom@honermann.net>\n\n\t* name-lookup.c (get_std_name_hint): Added u8string as a name hint.\n\nlibstdc++:\n\n2019-02-19  Tom Honermann  <tom@honermann.net>\n\n\tP0482R5 char8_t: Standard library support\n\t* config/abi/pre/gnu-versioned-namespace.ver (CXXABI_2.0): Add\n\ttypeinfo symbols for char8_t.\n\t* config/abi/pre/gnu.ver: Add CXXABI_1.3.12.\n\t(GLIBCXX_3.4.26): Add symbols for specializations of\n\tnumeric_limits and codecvt that involve char8_t.\n\t(CXXABI_1.3.12): Add typeinfo symbols for char8_t.\n\t* include/bits/atomic_base.h: Add atomic_char8_t.\n\t* include/bits/basic_string.h: Add std::hash<u8string> and\n\toperator\"\"s(const char8_t*, size_t).\n\t* include/bits/c++config: Define _GLIBCXX_USE_CHAR8_T and\n\t__cpp_lib_char8_t.\n\t* include/bits/char_traits.h: Add char_traits<char8_t>.\n\t* include/bits/codecvt.h: Add\n\tcodecvt<char16_t, char8_t, mbstate_t>,\n\tcodecvt<char32_t, char8_t, mbstate_t>,\n\tcodecvt_byname<char16_t, char8_t, mbstate_t>, and\n\tcodecvt_byname<char32_t, char8_t, mbstate_t>.\n\t* include/bits/cpp_type_traits.h: Add __is_integer<char8_t> to\n\trecognize char8_t as an integral type.\n\t* include/bits/fs_path.h: (path::__is_encoded_char): Recognize\n\tchar8_t.\n\t(path::u8string): Return std::u8string when char8_t support is\n\tenabled.\n\t(path::generic_u8string): Likewise.\n\t(path::_S_convert): Handle conversion from char8_t input.\n\t(path::_S_str_convert): Likewise.\n\t* include/bits/functional_hash.h: Add hash<char8_t>.\n\t* include/bits/locale_conv.h (__str_codecvt_out): Add overloads for\n\tchar8_t.\n\t* include/bits/locale_facets.h (_GLIBCXX_NUM_UNICODE_FACETS): Bump\n\tfor new char8_t specializations.\n\t* include/bits/localefwd.h: Add missing declarations of\n\tcodecvt<char16_t, char, mbstate_t> and\n\tcodecvt<char32_t, char, mbstate_t>.  Add char8_t declarations\n\tcodecvt<char16_t, char8_t, mbstate_t> and\n\tcodecvt<char32_t, char8_t, mbstate_t>.\n\t* include/bits/postypes.h: Add u8streampos\n\t* include/bits/stringfwd.h: Add declarations of\n\tchar_traits<char8_t> and u8string.\n\t* include/c_global/cstddef: Add __byte_operand<char8_t>.\n\t* include/experimental/bits/fs_path.h (path::__is_encoded_char):\n\tRecognize char8_t.\n\t(path::u8string): Return std::u8string when char8_t support is\n\tenabled.\n\t(path::generic_u8string): Likewise.\n\t(path::_S_convert): Handle conversion from char8_t input.\n\t(path::_S_str_convert): Likewise.\n\t* include/experimental/string: Add u8string.\n\t* include/experimental/string_view: Add u8string_view,\n\thash<experimental::u8string_view>, and\n\toperator\"\"sv(const char8_t*, size_t).\n\t* include/std/atomic: Add atomic<char8_t> and atomic_char8_t.\n\t* include/std/charconv (__is_int_to_chars_type): Recognize char8_t\n\tas a character type.\n\t* include/std/limits: Add numeric_limits<char8_t>.\n\t* include/std/string_view: Add u8string_view,\n\thash<experimental::u8string_view>, and\n\toperator\"\"sv(const char8_t*, size_t).\n\t* include/std/type_traits: Add __is_integral_helper<char8_t>,\n\t__make_unsigned<char8_t>, and __make_signed<char8_t>.\n\t* libsupc++/atomic_lockfree_defines.h: Define\n\tATOMIC_CHAR8_T_LOCK_FREE.\n\t* src/c++11/Makefile.am: Compile with -fchar8_t when compiling\n\tcodecvt.cc and limits.cc so that char8_t specializations of\n\tnumeric_limits and codecvt and emitted.\n\t* src/c++11/Makefile.in: Likewise.\n\t* src/c++11/codecvt.cc: Define members of\n\tcodecvt<char16_t, char8_t, mbstate_t>,\n\tcodecvt<char32_t, char8_t, mbstate_t>,\n\tcodecvt_byname<char16_t, char8_t, mbstate_t>, and\n\tcodecvt_byname<char32_t, char8_t, mbstate_t>.\n\t* src/c++11/limits.cc: Define members of\n\tnumeric_limits<char8_t>.\n\t* src/c++98/Makefile.am: Compile with -fchar8_t when compiling\n\tlocale_init.cc and localename.cc.\n\t* src/c++98/Makefile.in: Likewise.\n\t* src/c++98/locale_init.cc: Add initialization for the\n\tcodecvt<char16_t, char8_t, mbstate_t> and\n\tcodecvt<char32_t, char8_t, mbstate_t> facets.\n\t* src/c++98/localename.cc: Likewise.\n\t* testsuite/util/testsuite_abi.cc: Validate ABI bump.\n\nFrom-SVN: r269004", "tree": {"sha": "5d8d03d00df438331657aa27496f27bc32041eaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d8d03d00df438331657aa27496f27bc32041eaf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c124af936b6b225eb548ccdd7f01400511d784dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c124af936b6b225eb548ccdd7f01400511d784dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c124af936b6b225eb548ccdd7f01400511d784dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c124af936b6b225eb548ccdd7f01400511d784dc/comments", "author": {"login": "tahonermann", "id": 2211804, "node_id": "MDQ6VXNlcjIyMTE4MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2211804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tahonermann", "html_url": "https://github.com/tahonermann", "followers_url": "https://api.github.com/users/tahonermann/followers", "following_url": "https://api.github.com/users/tahonermann/following{/other_user}", "gists_url": "https://api.github.com/users/tahonermann/gists{/gist_id}", "starred_url": "https://api.github.com/users/tahonermann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tahonermann/subscriptions", "organizations_url": "https://api.github.com/users/tahonermann/orgs", "repos_url": "https://api.github.com/users/tahonermann/repos", "events_url": "https://api.github.com/users/tahonermann/events{/privacy}", "received_events_url": "https://api.github.com/users/tahonermann/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8b3c1bc3ba22dcf59b9c743f11d4cb2bc5d7792", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8b3c1bc3ba22dcf59b9c743f11d4cb2bc5d7792", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8b3c1bc3ba22dcf59b9c743f11d4cb2bc5d7792"}], "stats": {"total": 1160, "additions": 1099, "deletions": 61}, "files": [{"sha": "e2b9be50ff15c9f030af54438c9a6795fda3cf48", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c124af936b6b225eb548ccdd7f01400511d784dc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c124af936b6b225eb548ccdd7f01400511d784dc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c124af936b6b225eb548ccdd7f01400511d784dc", "patch": "@@ -1,3 +1,7 @@\n+2019-02-19  Tom Honermann  <tom@honermann.net>\n+\n+\t* name-lookup.c (get_std_name_hint): Added u8string as a name hint.\n+\n 2019-02-18  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/89336 - multiple stores in constexpr stmt."}, {"sha": "2e1b851341b23d568d2ef433120c7efbba417d71", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c124af936b6b225eb548ccdd7f01400511d784dc/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c124af936b6b225eb548ccdd7f01400511d784dc/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=c124af936b6b225eb548ccdd7f01400511d784dc", "patch": "@@ -5765,6 +5765,7 @@ get_std_name_hint (const char *name)\n     {\"basic_string\", \"<string>\", cxx98},\n     {\"string\", \"<string>\", cxx98},\n     {\"wstring\", \"<string>\", cxx98},\n+    {\"u8string\", \"<string>\", cxx2a},\n     {\"u16string\", \"<string>\", cxx11},\n     {\"u32string\", \"<string>\", cxx11},\n     /* <string_view>.  */"}, {"sha": "dad36d6934da9d81cd73ef000e8740941e2ebfbf", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c124af936b6b225eb548ccdd7f01400511d784dc", "patch": "@@ -1,3 +1,88 @@\n+2019-02-19  Tom Honermann  <tom@honermann.net>\n+\n+\tP0482R5 char8_t: Standard library support\n+\t* config/abi/pre/gnu-versioned-namespace.ver (CXXABI_2.0): Add\n+\ttypeinfo symbols for char8_t.\n+\t* config/abi/pre/gnu.ver: Add CXXABI_1.3.12.\n+\t(GLIBCXX_3.4.26): Add symbols for specializations of\n+\tnumeric_limits and codecvt that involve char8_t.\n+\t(CXXABI_1.3.12): Add typeinfo symbols for char8_t.\n+\t* include/bits/atomic_base.h: Add atomic_char8_t.\n+\t* include/bits/basic_string.h: Add std::hash<u8string> and\n+\toperator\"\"s(const char8_t*, size_t).\n+\t* include/bits/c++config: Define _GLIBCXX_USE_CHAR8_T and\n+\t__cpp_lib_char8_t.\n+\t* include/bits/char_traits.h: Add char_traits<char8_t>.\n+\t* include/bits/codecvt.h: Add\n+\tcodecvt<char16_t, char8_t, mbstate_t>,\n+\tcodecvt<char32_t, char8_t, mbstate_t>,\n+\tcodecvt_byname<char16_t, char8_t, mbstate_t>, and\n+\tcodecvt_byname<char32_t, char8_t, mbstate_t>.\n+\t* include/bits/cpp_type_traits.h: Add __is_integer<char8_t> to\n+\trecognize char8_t as an integral type.\n+\t* include/bits/fs_path.h: (path::__is_encoded_char): Recognize\n+\tchar8_t.\n+\t(path::u8string): Return std::u8string when char8_t support is\n+\tenabled.\n+\t(path::generic_u8string): Likewise.\n+\t(path::_S_convert): Handle conversion from char8_t input.\n+\t(path::_S_str_convert): Likewise.\n+\t* include/bits/functional_hash.h: Add hash<char8_t>.\n+\t* include/bits/locale_conv.h (__str_codecvt_out): Add overloads for\n+\tchar8_t.\n+\t* include/bits/locale_facets.h (_GLIBCXX_NUM_UNICODE_FACETS): Bump\n+\tfor new char8_t specializations.\n+\t* include/bits/localefwd.h: Add missing declarations of\n+\tcodecvt<char16_t, char, mbstate_t> and\n+\tcodecvt<char32_t, char, mbstate_t>.  Add char8_t declarations\n+\tcodecvt<char16_t, char8_t, mbstate_t> and\n+\tcodecvt<char32_t, char8_t, mbstate_t>.\n+\t* include/bits/postypes.h: Add u8streampos\n+\t* include/bits/stringfwd.h: Add declarations of\n+\tchar_traits<char8_t> and u8string.\n+\t* include/c_global/cstddef: Add __byte_operand<char8_t>.\n+\t* include/experimental/bits/fs_path.h (path::__is_encoded_char):\n+\tRecognize char8_t.\n+\t(path::u8string): Return std::u8string when char8_t support is\n+\tenabled.\n+\t(path::generic_u8string): Likewise.\n+\t(path::_S_convert): Handle conversion from char8_t input.\n+\t(path::_S_str_convert): Likewise.\n+\t* include/experimental/string: Add u8string.\n+\t* include/experimental/string_view: Add u8string_view,\n+\thash<experimental::u8string_view>, and\n+\toperator\"\"sv(const char8_t*, size_t).\n+\t* include/std/atomic: Add atomic<char8_t> and atomic_char8_t.\n+\t* include/std/charconv (__is_int_to_chars_type): Recognize char8_t\n+\tas a character type.\n+\t* include/std/limits: Add numeric_limits<char8_t>.\n+\t* include/std/string_view: Add u8string_view,\n+\thash<experimental::u8string_view>, and\n+\toperator\"\"sv(const char8_t*, size_t).\n+\t* include/std/type_traits: Add __is_integral_helper<char8_t>,\n+\t__make_unsigned<char8_t>, and __make_signed<char8_t>.\n+\t* libsupc++/atomic_lockfree_defines.h: Define\n+\tATOMIC_CHAR8_T_LOCK_FREE.\n+\t* src/c++11/Makefile.am: Compile with -fchar8_t when compiling\n+\tcodecvt.cc and limits.cc so that char8_t specializations of\n+\tnumeric_limits and codecvt and emitted.\n+\t* src/c++11/Makefile.in: Likewise.\n+\t* src/c++11/codecvt.cc: Define members of\n+\tcodecvt<char16_t, char8_t, mbstate_t>,\n+\tcodecvt<char32_t, char8_t, mbstate_t>,\n+\tcodecvt_byname<char16_t, char8_t, mbstate_t>, and\n+\tcodecvt_byname<char32_t, char8_t, mbstate_t>.\n+\t* src/c++11/limits.cc: Define members of\n+\tnumeric_limits<char8_t>.\n+\t* src/c++98/Makefile.am: Compile with -fchar8_t when compiling\n+\tlocale_init.cc and localename.cc.\n+\t* src/c++98/Makefile.in: Likewise.\n+\t* src/c++98/locale_init.cc: Add initialization for the\n+\tcodecvt<char16_t, char8_t, mbstate_t> and\n+\tcodecvt<char32_t, char8_t, mbstate_t> facets.\n+\t* src/c++98/localename.cc: Likewise.\n+\t* testsuite/util/testsuite_abi.cc: Validate ABI bump.\n+\n 2019-02-18  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* 27_io/filesystem/operations/all.cc: Add dg-require-filesystem-ts."}, {"sha": "e6079ad2cf3a97e1f51c525443f62e0122bfd7d2", "filename": "libstdc++-v3/config/abi/pre/gnu-versioned-namespace.ver", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu-versioned-namespace.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu-versioned-namespace.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu-versioned-namespace.ver?ref=c124af936b6b225eb548ccdd7f01400511d784dc", "patch": "@@ -301,6 +301,11 @@ CXXABI_2.0 {\n     _ZTSN10__cxxabiv120__si_class_type_infoE;\n     _ZTSN10__cxxabiv121__vmi_class_type_infoE;\n \n+    # typeinfo for char8_t\n+    _ZTIDu;\n+    _ZTIPDu;\n+    _ZTIPKDu;\n+\n     # typeinfo for char16_t and char32_t\n     _ZTIDs;\n     _ZTIPDs;"}, {"sha": "c4f12152147ef6fa8b75a6205bb2490df29ea76a", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=c124af936b6b225eb548ccdd7f01400511d784dc", "patch": "@@ -2244,6 +2244,17 @@ GLIBCXX_3.4.26 {\n     # _Sp_make_shared_tag::_S_eq\n     _ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info;\n \n+    # numeric_limits<char8_t>\n+    _ZNSt14numeric_limitsIDuE[5-9]*;\n+    _ZNSt14numeric_limitsIDuE1[0-7][hirt]*;\n+    _ZNSt14numeric_limitsIDuE1[0-7]mi*;\n+    _ZNSt14numeric_limitsIDuE1[0-7]max_e*;\n+\n+    # codecvt<char16_t, char8_t, mbstate_t>, codecvt<char32_t, char8_t, mbstate_t>\n+    _ZNKSt7codecvtID[is]Du*;\n+    _ZNSt7codecvtID[is]Du*;\n+    _ZT[ISV]St7codecvtID[is]Du*E;\n+\n } GLIBCXX_3.4.25;\n \n # Symbols in the support library (libsupc++) have their own tag.\n@@ -2535,6 +2546,15 @@ CXXABI_1.3.11 {\n \n } CXXABI_1.3.10;\n \n+CXXABI_1.3.12 {\n+\n+    # typeinfo for char8_t\n+    _ZTIDu;\n+    _ZTIPDu;\n+    _ZTIPKDu;\n+\n+} CXXABI_1.3.11;\n+\n # Symbols in the support library (libsupc++) supporting transactional memory.\n CXXABI_TM_1 {\n "}, {"sha": "fd2ea7180154e187b0cbf1bac41c002c88f73801", "filename": "libstdc++-v3/include/bits/atomic_base.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h?ref=c124af936b6b225eb548ccdd7f01400511d784dc", "patch": "@@ -227,6 +227,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // atomic_ulong    unsigned long\n   // atomic_llong    long long\n   // atomic_ullong   unsigned long long\n+  // atomic_char8_t  char8_t\n   // atomic_char16_t char16_t\n   // atomic_char32_t char32_t\n   // atomic_wchar_t  wchar_t"}, {"sha": "4d0894be99b1340a85c885ff30c71f9f397c2533", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=c124af936b6b225eb548ccdd7f01400511d784dc", "patch": "@@ -6753,6 +6753,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n #endif /* _GLIBCXX_COMPATIBILITY_CXX0X */\n \n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  /// std::hash specialization for u8string.\n+  template<>\n+    struct hash<u8string>\n+    : public __hash_base<size_t, u8string>\n+    {\n+      size_t\n+      operator()(const u8string& __s) const noexcept\n+      { return std::_Hash_impl::hash(__s.data(),\n+                                     __s.length() * sizeof(char8_t)); }\n+    };\n+\n+  template<>\n+    struct __is_fast_hash<hash<u8string>> : std::false_type\n+    { };\n+#endif\n+\n   /// std::hash specialization for u16string.\n   template<>\n     struct hash<u16string>\n@@ -6805,6 +6822,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return basic_string<wchar_t>{__str, __len}; }\n #endif\n \n+#ifdef _GLIBCXX_USE_CHAR8_T\n+    _GLIBCXX_DEFAULT_ABI_TAG\n+    inline basic_string<char8_t>\n+    operator\"\"s(const char8_t* __str, size_t __len)\n+    { return basic_string<char8_t>{__str, __len}; }\n+#endif\n+\n     _GLIBCXX_DEFAULT_ABI_TAG\n     inline basic_string<char16_t>\n     operator\"\"s(const char16_t* __str, size_t __len)"}, {"sha": "9993f4b1998b03f244eb8d84e3af2ce3aa477418", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=c124af936b6b225eb548ccdd7f01400511d784dc", "patch": "@@ -625,6 +625,17 @@ namespace std\n # endif\n #endif\n \n+// Unless explicitly specified, enable char8_t extensions only if the core\n+// language char8_t feature macro is defined.\n+#ifndef _GLIBCXX_USE_CHAR8_T\n+# ifdef __cpp_char8_t\n+#  define _GLIBCXX_USE_CHAR8_T 1\n+# endif\n+#endif\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+# define __cpp_lib_char8_t 201811\n+#endif\n+\n /* Define if __float128 is supported on this host. */\n #if defined(__FLOAT128__) || defined(__SIZEOF_FLOAT128__)\n #define _GLIBCXX_USE_FLOAT128"}, {"sha": "21099c36c3b514b7aeaac339a7066cca59fc4fda", "filename": "libstdc++-v3/include/bits/char_traits.h", "status": "modified", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h?ref=c124af936b6b225eb548ccdd7f01400511d784dc", "patch": "@@ -507,6 +507,115 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   };\n #endif //_GLIBCXX_USE_WCHAR_T\n \n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  template<>\n+    struct char_traits<char8_t>\n+    {\n+      typedef char8_t           char_type;\n+      typedef unsigned int      int_type;\n+      typedef u8streampos       pos_type;\n+      typedef streamoff         off_type;\n+      typedef mbstate_t         state_type;\n+\n+      static _GLIBCXX17_CONSTEXPR void\n+      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT\n+      { __c1 = __c2; }\n+\n+      static _GLIBCXX_CONSTEXPR bool\n+      eq(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT\n+      { return __c1 == __c2; }\n+\n+      static _GLIBCXX_CONSTEXPR bool\n+      lt(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT\n+      { return __c1 < __c2; }\n+\n+      static _GLIBCXX17_CONSTEXPR int\n+      compare(const char_type* __s1, const char_type* __s2, size_t __n)\n+      {\n+#if __cplusplus > 201402\n+\tif (__builtin_constant_p(__n)\n+\t    && __constant_char_array_p(__s1, __n)\n+\t    && __constant_char_array_p(__s2, __n))\n+\t  return __gnu_cxx::char_traits<char_type>::compare(__s1, __s2, __n);\n+#endif\n+\tif (__n == 0)\n+\t  return 0;\n+\treturn __builtin_memcmp(__s1, __s2, __n);\n+      }\n+\n+      static _GLIBCXX17_CONSTEXPR size_t\n+      length(const char_type* __s)\n+      {\n+#if __cplusplus > 201402\n+\tif (__constant_string_p(__s))\n+\t  return __gnu_cxx::char_traits<char_type>::length(__s);\n+#endif\n+\tsize_t __i = 0;\n+\twhile (!eq(__s[__i], char_type()))\n+\t  ++__i;\n+\treturn __i;\n+      }\n+\n+      static _GLIBCXX17_CONSTEXPR const char_type*\n+      find(const char_type* __s, size_t __n, const char_type& __a)\n+      {\n+#if __cplusplus > 201402\n+\tif (__builtin_constant_p(__n)\n+\t    && __builtin_constant_p(__a)\n+\t    && __constant_char_array_p(__s, __n))\n+\t  return __gnu_cxx::char_traits<char_type>::find(__s, __n, __a);\n+#endif\n+\tif (__n == 0)\n+\t  return 0;\n+\treturn static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));\n+      }\n+\n+      static char_type*\n+      move(char_type* __s1, const char_type* __s2, size_t __n)\n+      {\n+\tif (__n == 0)\n+\t  return __s1;\n+\treturn static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));\n+      }\n+\n+      static char_type*\n+      copy(char_type* __s1, const char_type* __s2, size_t __n)\n+      {\n+\tif (__n == 0)\n+\t  return __s1;\n+\treturn static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));\n+      }\n+\n+      static char_type*\n+      assign(char_type* __s, size_t __n, char_type __a)\n+      {\n+\tif (__n == 0)\n+\t  return __s;\n+\treturn static_cast<char_type*>(__builtin_memset(__s, __a, __n));\n+      }\n+\n+      static _GLIBCXX_CONSTEXPR char_type\n+      to_char_type(const int_type& __c) _GLIBCXX_NOEXCEPT\n+      { return char_type(__c); }\n+\n+      static _GLIBCXX_CONSTEXPR int_type\n+      to_int_type(const char_type& __c) _GLIBCXX_NOEXCEPT\n+      { return int_type(__c); }\n+\n+      static _GLIBCXX_CONSTEXPR bool\n+      eq_int_type(const int_type& __c1, const int_type& __c2) _GLIBCXX_NOEXCEPT\n+      { return __c1 == __c2; }\n+\n+      static _GLIBCXX_CONSTEXPR int_type\n+      eof() _GLIBCXX_NOEXCEPT\n+      { return static_cast<int_type>(-1); }\n+\n+      static _GLIBCXX_CONSTEXPR int_type\n+      not_eof(const int_type& __c) _GLIBCXX_NOEXCEPT\n+      { return eq_int_type(__c, eof()) ? 0 : __c; }\n+    };\n+#endif //_GLIBCXX_USE_CHAR8_T\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}, {"sha": "80ec608f2dd45044209bf6eb030b2e7d8175716f", "filename": "libstdc++-v3/include/bits/codecvt.h", "status": "modified", "additions": 161, "deletions": 0, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h?ref=c124af936b6b225eb548ccdd7f01400511d784dc", "patch": "@@ -573,6 +573,122 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       do_max_length() const throw();\n     };\n \n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  /** @brief  Class codecvt<char16_t, char8_t, mbstate_t> specialization.\n+   *\n+   *  Converts between UTF-16 and UTF-8.\n+   */\n+  template<>\n+    class codecvt<char16_t, char8_t, mbstate_t>\n+    : public __codecvt_abstract_base<char16_t, char8_t, mbstate_t>\n+    {\n+    public:\n+      // Types:\n+      typedef char16_t\t\t\tintern_type;\n+      typedef char8_t\t\t\textern_type;\n+      typedef mbstate_t\t\t\tstate_type;\n+\n+    public:\n+      static locale::id\t\t\tid;\n+\n+      explicit\n+      codecvt(size_t __refs = 0)\n+      : __codecvt_abstract_base<char16_t, char8_t, mbstate_t>(__refs) { }\n+\n+    protected:\n+      virtual\n+      ~codecvt();\n+\n+      virtual result\n+      do_out(state_type& __state, const intern_type* __from,\n+\t     const intern_type* __from_end, const intern_type*& __from_next,\n+\t     extern_type* __to, extern_type* __to_end,\n+\t     extern_type*& __to_next) const;\n+\n+      virtual result\n+      do_unshift(state_type& __state,\n+\t\t extern_type* __to, extern_type* __to_end,\n+\t\t extern_type*& __to_next) const;\n+\n+      virtual result\n+      do_in(state_type& __state,\n+\t     const extern_type* __from, const extern_type* __from_end,\n+\t     const extern_type*& __from_next,\n+\t     intern_type* __to, intern_type* __to_end,\n+\t     intern_type*& __to_next) const;\n+\n+      virtual\n+      int do_encoding() const throw();\n+\n+      virtual\n+      bool do_always_noconv() const throw();\n+\n+      virtual\n+      int do_length(state_type&, const extern_type* __from,\n+\t\t    const extern_type* __end, size_t __max) const;\n+\n+      virtual int\n+      do_max_length() const throw();\n+    };\n+\n+  /** @brief  Class codecvt<char32_t, char8_t, mbstate_t> specialization.\n+   *\n+   *  Converts between UTF-32 and UTF-8.\n+   */\n+  template<>\n+    class codecvt<char32_t, char8_t, mbstate_t>\n+    : public __codecvt_abstract_base<char32_t, char8_t, mbstate_t>\n+    {\n+    public:\n+      // Types:\n+      typedef char32_t\t\t\tintern_type;\n+      typedef char8_t\t\t\textern_type;\n+      typedef mbstate_t\t\t\tstate_type;\n+\n+    public:\n+      static locale::id\t\t\tid;\n+\n+      explicit\n+      codecvt(size_t __refs = 0)\n+      : __codecvt_abstract_base<char32_t, char8_t, mbstate_t>(__refs) { }\n+\n+    protected:\n+      virtual\n+      ~codecvt();\n+\n+      virtual result\n+      do_out(state_type& __state, const intern_type* __from,\n+\t     const intern_type* __from_end, const intern_type*& __from_next,\n+\t     extern_type* __to, extern_type* __to_end,\n+\t     extern_type*& __to_next) const;\n+\n+      virtual result\n+      do_unshift(state_type& __state,\n+\t\t extern_type* __to, extern_type* __to_end,\n+\t\t extern_type*& __to_next) const;\n+\n+      virtual result\n+      do_in(state_type& __state,\n+\t     const extern_type* __from, const extern_type* __from_end,\n+\t     const extern_type*& __from_next,\n+\t     intern_type* __to, intern_type* __to_end,\n+\t     intern_type*& __to_next) const;\n+\n+      virtual\n+      int do_encoding() const throw();\n+\n+      virtual\n+      bool do_always_noconv() const throw();\n+\n+      virtual\n+      int do_length(state_type&, const extern_type* __from,\n+\t\t    const extern_type* __end, size_t __max) const;\n+\n+      virtual int\n+      do_max_length() const throw();\n+    };\n+#endif // _GLIBCXX_USE_CHAR8_T\n+\n #endif // C++11\n \n   /// class codecvt_byname [22.2.1.6].\n@@ -639,6 +755,45 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       virtual\n       ~codecvt_byname() { }\n     };\n+\n+#if defined(_GLIBCXX_USE_CHAR8_T)\n+  template<>\n+    class codecvt_byname<char16_t, char8_t, mbstate_t>\n+    : public codecvt<char16_t, char8_t, mbstate_t>\n+    {\n+    public:\n+      explicit\n+      codecvt_byname(const char* __s, size_t __refs = 0)\n+      : codecvt<char16_t, char8_t, mbstate_t>(__refs) { }\n+\n+      explicit\n+      codecvt_byname(const string& __s, size_t __refs = 0)\n+      : codecvt_byname(__s.c_str(), __refs) { }\n+\n+    protected:\n+      virtual\n+      ~codecvt_byname() { }\n+    };\n+\n+  template<>\n+    class codecvt_byname<char32_t, char8_t, mbstate_t>\n+    : public codecvt<char32_t, char8_t, mbstate_t>\n+    {\n+    public:\n+      explicit\n+      codecvt_byname(const char* __s, size_t __refs = 0)\n+      : codecvt<char32_t, char8_t, mbstate_t>(__refs) { }\n+\n+      explicit\n+      codecvt_byname(const string& __s, size_t __refs = 0)\n+      : codecvt_byname(__s.c_str(), __refs) { }\n+\n+    protected:\n+      virtual\n+      ~codecvt_byname() { }\n+    };\n+#endif\n+\n #endif // C++11\n \n   // Inhibit implicit instantiations for required instantiations,\n@@ -669,6 +824,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus >= 201103L\n   extern template class codecvt_byname<char16_t, char, mbstate_t>;\n   extern template class codecvt_byname<char32_t, char, mbstate_t>;\n+\n+#if defined(_GLIBCXX_USE_CHAR8_T)\n+  extern template class codecvt_byname<char16_t, char8_t, mbstate_t>;\n+  extern template class codecvt_byname<char32_t, char8_t, mbstate_t>;\n+#endif\n+\n #endif\n \n #endif"}, {"sha": "d7f8517a6babdd9b782762bdd06cb67b37bfc5f6", "filename": "libstdc++-v3/include/bits/cpp_type_traits.h", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h?ref=c124af936b6b225eb548ccdd7f01400511d784dc", "patch": "@@ -48,7 +48,7 @@\n // so function return values won't work:  We need compile-time entities.\n // We're left with types and constant  integral expressions.\n // Secondly, from the point of view of ease of use, type-based compile-time\n-// information is -not- *that* convenient.  On has to write lots of\n+// information is -not- *that* convenient.  One has to write lots of\n // overloaded functions and to hope that the compiler will select the right\n // one. As a net effect, the overall structure isn't very clear at first\n // glance.\n@@ -171,6 +171,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n # endif\n \n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  template<>\n+    struct __is_integer<char8_t>\n+    {\n+      enum { __value = 1 };\n+      typedef __true_type __type;\n+    };\n+#endif\n+\n #if __cplusplus >= 201103L\n   template<>\n     struct __is_integer<char16_t>"}, {"sha": "077045e6c788c9040243b6644033dbd428c17ca2", "filename": "libstdc++-v3/include/bits/fs_path.h", "status": "modified", "additions": 69, "deletions": 10, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h?ref=c124af936b6b225eb548ccdd7f01400511d784dc", "patch": "@@ -69,8 +69,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   {\n     template<typename _CharT, typename _Ch = remove_const_t<_CharT>>\n       using __is_encoded_char\n-\t= __or_<is_same<_Ch, char>, is_same<_Ch, wchar_t>,\n-\t\tis_same<_Ch, char16_t>, is_same<_Ch, char32_t>>;\n+\t= __or_<is_same<_Ch, char>,\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+\t\tis_same<_Ch, char8_t>,\n+#endif\n+\t\tis_same<_Ch, wchar_t>,\n+\t\tis_same<_Ch, char16_t>,\n+\t\tis_same<_Ch, char32_t>>;\n \n     template<typename _Iter,\n \t     typename _Iter_traits = std::iterator_traits<_Iter>>\n@@ -320,7 +325,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n #if _GLIBCXX_USE_WCHAR_T\n     std::wstring   wstring() const;\n #endif\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+    __attribute__((__abi_tag__(\"__u8\")))\n+    std::u8string  u8string() const;\n+#else\n     std::string    u8string() const;\n+#endif // _GLIBCXX_USE_CHAR8_T\n     std::u16string u16string() const;\n     std::u32string u32string() const;\n \n@@ -334,7 +344,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n #if _GLIBCXX_USE_WCHAR_T\n     std::wstring   generic_wstring() const;\n #endif\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+    __attribute__((__abi_tag__(\"__u8\")))\n+    std::u8string  generic_u8string() const;\n+#else\n     std::string    generic_u8string() const;\n+#endif // _GLIBCXX_USE_CHAR8_T\n     std::u16string generic_u16string() const;\n     std::u32string generic_u32string() const;\n \n@@ -735,10 +750,22 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       static string_type\n       _S_convert(const _CharT* __f, const _CharT* __l)\n       {\n-\tstd::codecvt_utf8<_CharT> __cvt;\n-\tstd::string __str;\n-\tif (__str_codecvt_out(__f, __l, __str, __cvt))\n-\t  return __str;\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+\tif constexpr (is_same_v<_CharT, char8_t>)\n+\t  {\n+\t    string_type __str(__f, __l);\n+\t    return __str;\n+\t  }\n+\telse\n+\t  {\n+#endif\n+\t    std::codecvt_utf8<_CharT> __cvt;\n+\t    std::string __str;\n+\t    if (__str_codecvt_out(__f, __l, __str, __cvt))\n+\t      return __str;\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+\t  }\n+#endif\n \t_GLIBCXX_THROW_OR_ABORT(filesystem_error(\n \t      \"Cannot convert character sequence\",\n \t      std::make_error_code(errc::illegal_byte_sequence)));\n@@ -938,6 +965,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t{\n \t  if constexpr (is_same_v<_CharT, char>)\n \t    return __u8str;\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+\t  else if constexpr (is_same_v<_CharT, char8_t>)\n+\t    {\n+\t      const char* __f = __u8str.data();\n+\t      const char* __l = __f + __u8str.size();\n+\t      _WString __wstr(__f, __l);\n+\t      return __wstr;\n+\t    }\n+#endif\n \t  else\n \t    {\n \t      _WString __wstr;\n@@ -950,10 +986,22 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t    }\n \t}\n #else\n-      codecvt_utf8<_CharT> __cvt;\n-      basic_string<_CharT, _Traits, _Allocator> __wstr{__a};\n-      if (__str_codecvt_in(__first, __last, __wstr, __cvt))\n-\treturn __wstr;\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+      if constexpr (is_same_v<_CharT, char8_t>)\n+\t{\n+\t  basic_string<_CharT, _Traits, _Allocator> __wstr{__first, __last, __a};\n+\t  return __wstr;\n+\t}\n+      else\n+\t{\n+#endif\n+\t  codecvt_utf8<_CharT> __cvt;\n+\t  basic_string<_CharT, _Traits, _Allocator> __wstr{__a};\n+\t  if (__str_codecvt_in(__first, __last, __wstr, __cvt))\n+\t    return __wstr;\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+\t}\n+#endif\n #endif\n       _GLIBCXX_THROW_OR_ABORT(filesystem_error(\n \t    \"Cannot convert character sequence\",\n@@ -978,6 +1026,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   path::wstring() const { return string<wchar_t>(); }\n #endif\n \n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  inline std::u8string\n+  path::u8string() const { return string<char8_t>(); }\n+#else\n   inline std::string\n   path::u8string() const\n   {\n@@ -996,6 +1048,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     return _M_pathname;\n #endif\n   }\n+#endif // _GLIBCXX_USE_CHAR8_T\n \n   inline std::u16string\n   path::u16string() const { return string<char16_t>(); }\n@@ -1045,9 +1098,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   { return generic_string<wchar_t>(); }\n #endif\n \n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  inline std::u8string\n+  path::generic_u8string() const\n+  { return generic_string<char8_t>(); }\n+#else\n   inline std::string\n   path::generic_u8string() const\n   { return generic_string(); }\n+#endif\n \n   inline std::u16string\n   path::generic_u16string() const"}, {"sha": "6a27beed754949ea4185ef11e93a01c01d08bdac", "filename": "libstdc++-v3/include/bits/functional_hash.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h?ref=c124af936b6b225eb548ccdd7f01400511d784dc", "patch": "@@ -135,6 +135,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// Explicit specialization for wchar_t.\n   _Cxx_hashtable_define_trivial_hash(wchar_t)\n \n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  /// Explicit specialization for char8_t.\n+  _Cxx_hashtable_define_trivial_hash(char8_t)\n+#endif\n+\n   /// Explicit specialization for char16_t.\n   _Cxx_hashtable_define_trivial_hash(char16_t)\n "}, {"sha": "d7510dff80e4c5f8d156d54dbf8c76f4349c7ac1", "filename": "libstdc++-v3/include/bits/locale_conv.h", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_conv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_conv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_conv.h?ref=c124af936b6b225eb548ccdd7f01400511d784dc", "patch": "@@ -158,6 +158,39 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __str_codecvt_out(__first, __last, __outstr, __cvt, __state, __n);\n     }\n \n+#ifdef _GLIBCXX_USE_CHAR8_T\n+\n+  // Convert wide character string to narrow.\n+  template<typename _CharT, typename _Traits, typename _Alloc, typename _State>\n+    inline bool\n+    __str_codecvt_out(const _CharT* __first, const _CharT* __last,\n+\t\t      basic_string<char8_t, _Traits, _Alloc>& __outstr,\n+\t\t      const codecvt<_CharT, char8_t, _State>& __cvt,\n+\t\t      _State& __state, size_t& __count)\n+    {\n+      using _Codecvt = codecvt<_CharT, char8_t, _State>;\n+      using _ConvFn\n+\t= codecvt_base::result\n+\t  (_Codecvt::*)(_State&, const _CharT*, const _CharT*, const _CharT*&,\n+\t\t\tchar8_t*, char8_t*, char8_t*&) const;\n+      _ConvFn __fn = &codecvt<_CharT, char8_t, _State>::out;\n+      return __do_str_codecvt(__first, __last, __outstr, __cvt, __state,\n+\t\t\t      __count, __fn);\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc, typename _State>\n+    inline bool\n+    __str_codecvt_out(const _CharT* __first, const _CharT* __last,\n+\t\t      basic_string<char8_t, _Traits, _Alloc>& __outstr,\n+\t\t      const codecvt<_CharT, char8_t, _State>& __cvt)\n+    {\n+      _State __state = {};\n+      size_t __n;\n+      return __str_codecvt_out(__first, __last, __outstr, __cvt, __state, __n);\n+    }\n+\n+#endif  // _GLIBCXX_USE_CHAR8_T\n+\n #ifdef _GLIBCXX_USE_WCHAR_T\n \n _GLIBCXX_BEGIN_NAMESPACE_CXX11"}, {"sha": "0db24d53e835336b53d26aa14b20a51fe79c0fc8", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=c124af936b6b225eb548ccdd7f01400511d784dc", "patch": "@@ -59,7 +59,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n # define  _GLIBCXX_NUM_FACETS 14\n # define  _GLIBCXX_NUM_CXX11_FACETS 8\n #endif\n-#define _GLIBCXX_NUM_UNICODE_FACETS 2\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+# define _GLIBCXX_NUM_UNICODE_FACETS 4\n+#else\n+# define _GLIBCXX_NUM_UNICODE_FACETS 2\n+#endif\n \n   // Convert string to numeric value of type _Tp and store results.\n   // NB: This is specialized for all required types, there is no"}, {"sha": "20a6f006c6772b216fa52165dcd16bf86502063b", "filename": "libstdc++-v3/include/bits/localefwd.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h?ref=c124af936b6b225eb548ccdd7f01400511d784dc", "patch": "@@ -139,6 +139,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<> class codecvt<char, char, mbstate_t>;\n #ifdef _GLIBCXX_USE_WCHAR_T\n   template<> class codecvt<wchar_t, char, mbstate_t>;\n+#endif\n+#if __cplusplus >= 201103L\n+  template<> class codecvt<char16_t, char, mbstate_t>;\n+  template<> class codecvt<char32_t, char, mbstate_t>;\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  template<> class codecvt<char16_t, char8_t, mbstate_t>;\n+  template<> class codecvt<char32_t, char8_t, mbstate_t>;\n+#endif\n #endif\n   template<typename _InternT, typename _ExternT, typename _StateT>\n     class codecvt_byname;"}, {"sha": "17f7d63d829c3438b5817bd2ba69d5555503037e", "filename": "libstdc++-v3/include/bits/postypes.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpostypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpostypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpostypes.h?ref=c124af936b6b225eb548ccdd7f01400511d784dc", "patch": "@@ -235,6 +235,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// File position for wchar_t streams.\n   typedef fpos<mbstate_t> wstreampos;\n \n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  /// File position for char8_t streams.\n+  typedef fpos<mbstate_t> u8streampos;\n+#endif\n+\n #if __cplusplus >= 201103L\n   /// File position for char16_t streams.\n   typedef fpos<mbstate_t> u16streampos;"}, {"sha": "0ced16039a4f77ceeebfddb6101192423dfca266", "filename": "libstdc++-v3/include/bits/stringfwd.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstringfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstringfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstringfwd.h?ref=c124af936b6b225eb548ccdd7f01400511d784dc", "patch": "@@ -58,6 +58,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<> struct char_traits<wchar_t>;\n #endif\n \n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  template<> struct char_traits<char8_t>;\n+#endif\n+\n #if __cplusplus >= 201103L\n   template<> struct char_traits<char16_t>;\n   template<> struct char_traits<char32_t>;\n@@ -79,6 +83,11 @@ _GLIBCXX_END_NAMESPACE_CXX11\n   typedef basic_string<wchar_t> wstring;   \n #endif\n \n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  /// A string of @c char8_t\n+  typedef basic_string<char8_t> u8string;\n+#endif\n+\n #if __cplusplus >= 201103L\n   /// A string of @c char16_t\n   typedef basic_string<char16_t> u16string; "}, {"sha": "8c779ec354d84a18d91f1bb4bbb35892d1db2592", "filename": "libstdc++-v3/include/c_global/cstddef", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstddef", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstddef", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstddef?ref=c124af936b6b225eb548ccdd7f01400511d784dc", "patch": "@@ -75,6 +75,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<> struct __byte_operand<unsigned char> { using __type = byte; };\n #ifdef _GLIBCXX_USE_WCHAR_T\n   template<> struct __byte_operand<wchar_t> { using __type = byte; };\n+#endif\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  template<> struct __byte_operand<char8_t> { using __type = byte; };\n #endif\n   template<> struct __byte_operand<char16_t> { using __type = byte; };\n   template<> struct __byte_operand<char32_t> { using __type = byte; };"}, {"sha": "ebd5072fc1ab7762e1e70a2bf1ca95a913845655", "filename": "libstdc++-v3/include/experimental/bits/fs_path.h", "status": "modified", "additions": 77, "deletions": 16, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h?ref=c124af936b6b225eb548ccdd7f01400511d784dc", "patch": "@@ -82,8 +82,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     template<typename _CharT,\n \t     typename _Ch = typename remove_const<_CharT>::type>\n       using __is_encoded_char\n-\t= __or_<is_same<_Ch, char>, is_same<_Ch, wchar_t>,\n-\t\tis_same<_Ch, char16_t>, is_same<_Ch, char32_t>>;\n+\t= __or_<is_same<_Ch, char>,\n+\t\tis_same<_Ch, wchar_t>,\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+\t\tis_same<_Ch, char8_t>,\n+#endif\n+\t\tis_same<_Ch, char16_t>,\n+\t\tis_same<_Ch, char32_t>>;\n \n     template<typename _Iter,\n \t     typename _Iter_traits = std::iterator_traits<_Iter>>\n@@ -325,7 +330,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n #if _GLIBCXX_USE_WCHAR_T\n     std::wstring   wstring() const;\n #endif\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+    __attribute__((__abi_tag__(\"__u8\")))\n+    std::u8string  u8string() const;\n+#else\n     std::string    u8string() const;\n+#endif // _GLIBCXX_USE_CHAR8_T\n     std::u16string u16string() const;\n     std::u32string u32string() const;\n \n@@ -339,7 +349,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n #if _GLIBCXX_USE_WCHAR_T\n     std::wstring   generic_wstring() const;\n #endif\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+    __attribute__((__abi_tag__(\"__u8\")))\n+    std::u8string  generic_u8string() const;\n+#else\n     std::string    generic_u8string() const;\n+#endif // _GLIBCXX_USE_CHAR8_T\n     std::u16string generic_u16string() const;\n     std::u32string generic_u32string() const;\n \n@@ -674,10 +689,22 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       static string_type\n       _S_convert(const _CharT* __f, const _CharT* __l)\n       {\n-\tstd::codecvt_utf8<_CharT> __cvt;\n-\tstd::string __str;\n-\tif (__str_codecvt_out(__f, __l, __str, __cvt))\n-\t  return __str;\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+\tif constexpr (is_same<_CharT, char8_t>::value)\n+\t  {\n+\t    string_type __str(__f, __l);\n+\t    return __str;\n+\t  }\n+\telse\n+\t  {\n+#endif\n+\t    std::codecvt_utf8<_CharT> __cvt;\n+\t    std::string __str;\n+\t    if (__str_codecvt_out(__f, __l, __str, __cvt))\n+\t      return __str;\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+\t  }\n+#endif\n \t_GLIBCXX_THROW_OR_ABORT(filesystem_error(\n \t      \"Cannot convert character sequence\",\n \t      std::make_error_code(errc::illegal_byte_sequence)));\n@@ -867,12 +894,24 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t    _WString*\n \t    operator()(const _String& __from, _WString& __to, false_type)\n \t    {\n-\t      // use codecvt_utf8<_CharT> to convert UTF-8 to wide string\n-\t      codecvt_utf8<_CharT> __cvt;\n-\t      const char* __f = __from.data();\n-\t      const char* __l = __f + __from.size();\n-\t      if (__str_codecvt_in(__f, __l, __to, __cvt))\n-\t\treturn std::__addressof(__to);\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+\t      if constexpr (is_same<_CharT, char8_t>::value)\n+\t        {\n+\t          __to.assign(__from.begin(), __from.end());\n+\t          return std::__addressof(__to);\n+\t        }\n+\t      else\n+\t        {\n+#endif\n+\t          // use codecvt_utf8<_CharT> to convert UTF-8 to wide string\n+\t          codecvt_utf8<_CharT> __cvt;\n+\t          const char* __f = __from.data();\n+\t          const char* __l = __f + __from.size();\n+\t          if (__str_codecvt_in(__f, __l, __to, __cvt))\n+\t\t    return std::__addressof(__to);\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+\t        }\n+#endif\n \t      return nullptr;\n \t    }\n \t  } __dispatch;\n@@ -881,10 +920,22 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t    return *__p;\n \t}\n #else\n-      codecvt_utf8<_CharT> __cvt;\n-      basic_string<_CharT, _Traits, _Allocator> __wstr{__a};\n-      if (__str_codecvt_in(__first, __last, __wstr, __cvt))\n-\treturn __wstr;\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+      if constexpr (is_same<_CharT, char8_t>::value)\n+        {\n+          basic_string<_CharT, _Traits, _Allocator> __wstr{__first, __last, __a};\n+          return __wstr;\n+        }\n+      else\n+        {\n+#endif\n+          codecvt_utf8<_CharT> __cvt;\n+          basic_string<_CharT, _Traits, _Allocator> __wstr{__a};\n+          if (__str_codecvt_in(__first, __last, __wstr, __cvt))\n+\t    return __wstr;\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+        }\n+#endif\n #endif\n       _GLIBCXX_THROW_OR_ABORT(filesystem_error(\n \t    \"Cannot convert character sequence\",\n@@ -899,6 +950,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   path::wstring() const { return string<wchar_t>(); }\n #endif\n \n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  inline std::u8string\n+  path::u8string() const { return string<char8_t>(); }\n+#else\n   inline std::string\n   path::u8string() const\n   {\n@@ -917,6 +972,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     return _M_pathname;\n #endif\n   }\n+#endif // _GLIBCXX_USE_CHAR8_T\n \n   inline std::u16string\n   path::u16string() const { return string<char16_t>(); }\n@@ -938,8 +994,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   path::generic_wstring() const { return wstring(); }\n #endif\n \n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  inline std::u8string\n+  path::generic_u8string() const { return u8string(); }\n+#else\n   inline std::string\n   path::generic_u8string() const { return u8string(); }\n+#endif\n \n   inline std::u16string\n   path::generic_u16string() const { return u16string(); }"}, {"sha": "65bf2b8d0097aeed1eb100be7852f8715ad11e5a", "filename": "libstdc++-v3/include/experimental/string", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring?ref=c124af936b6b225eb548ccdd7f01400511d784dc", "patch": "@@ -73,6 +73,9 @@ inline namespace fundamentals_v2\n     // basic_string typedef names using polymorphic allocator in namespace\n     // std::experimental::pmr\n     typedef basic_string<char> string;\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+    typedef basic_string<char8_t> u8string;\n+#endif\n     typedef basic_string<char16_t> u16string;\n     typedef basic_string<char32_t> u32string;\n     typedef basic_string<wchar_t> wstring;"}, {"sha": "ce2c14cfe361fb6b95c0c4f688fda74b64b5f3e6", "filename": "libstdc++-v3/include/experimental/string_view", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view?ref=c124af936b6b225eb548ccdd7f01400511d784dc", "patch": "@@ -565,6 +565,9 @@ inline namespace fundamentals_v1\n   using string_view = basic_string_view<char>;\n #ifdef _GLIBCXX_USE_WCHAR_T\n   using wstring_view = basic_string_view<wchar_t>;\n+#endif\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  using u8string_view = basic_string_view<char8_t>;\n #endif\n   using u16string_view = basic_string_view<char16_t>;\n   using u32string_view = basic_string_view<char32_t>;\n@@ -605,6 +608,21 @@ inline namespace fundamentals_v1\n     { };\n #endif\n \n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  template<>\n+    struct hash<experimental::u8string_view>\n+    : public __hash_base<size_t, experimental::u8string_view>\n+    {\n+      size_t\n+      operator()(const experimental::u8string_view& __s) const noexcept\n+      { return std::_Hash_impl::hash(__s.data(), __s.length()); }\n+    };\n+\n+  template<>\n+    struct __is_fast_hash<hash<experimental::u8string_view>> : std::false_type\n+    { };\n+#endif\n+\n   template<>\n     struct hash<experimental::u16string_view>\n     : public __hash_base<size_t, experimental::u16string_view>\n@@ -652,6 +670,12 @@ namespace experimental\n     { return basic_string_view<wchar_t>{__str, __len}; }\n #endif\n \n+#ifdef _GLIBCXX_USE_CHAR8_T\n+    inline constexpr basic_string_view<char8_t>\n+    operator\"\"sv(const char8_t* __str, size_t __len) noexcept\n+    { return basic_string_view<char8_t>{__str, __len}; }\n+#endif\n+\n     inline constexpr basic_string_view<char16_t>\n     operator\"\"sv(const char16_t* __str, size_t __len) noexcept\n     { return basic_string_view<char16_t>{__str, __len}; }"}, {"sha": "7acc2462bfb5074a8d7cbc3d5915f2db4baa88ab", "filename": "libstdc++-v3/include/std/atomic", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic?ref=c124af936b6b225eb548ccdd7f01400511d784dc", "patch": "@@ -904,6 +904,31 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n     };\n \n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  /// Explicit specialization for char8_t.\n+  template<>\n+    struct atomic<char8_t> : __atomic_base<char8_t>\n+    {\n+      typedef char8_t \t\t\t__integral_type;\n+      typedef __atomic_base<char8_t> \t__base_type;\n+\n+      atomic() noexcept = default;\n+      ~atomic() noexcept = default;\n+      atomic(const atomic&) = delete;\n+      atomic& operator=(const atomic&) = delete;\n+      atomic& operator=(const atomic&) volatile = delete;\n+\n+      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }\n+\n+      using __base_type::operator __integral_type;\n+      using __base_type::operator=;\n+\n+#if __cplusplus > 201402L\n+    static constexpr bool is_always_lock_free = ATOMIC_CHAR8_T_LOCK_FREE == 2;\n+#endif\n+    };\n+#endif\n+\n   /// Explicit specialization for char16_t.\n   template<>\n     struct atomic<char16_t> : __atomic_base<char16_t>\n@@ -990,6 +1015,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// atomic_wchar_t\n   typedef atomic<wchar_t>\t\tatomic_wchar_t;\n \n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  /// atomic_char8_t\n+  typedef atomic<char8_t>\t\tatomic_char8_t;\n+#endif\n+\n   /// atomic_char16_t\n   typedef atomic<char16_t>\t\tatomic_char16_t;\n "}, {"sha": "9f01d4c0889ddb4dedeceb93714a1fb2be10a4f1", "filename": "libstdc++-v3/include/std/charconv", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv?ref=c124af936b6b225eb548ccdd7f01400511d784dc", "patch": "@@ -66,6 +66,9 @@ namespace __detail\n \t  __not_<__is_one_of<_Tp, bool, char16_t, char32_t\n #if _GLIBCXX_USE_WCHAR_T\n \t  , wchar_t\n+#endif\n+#if _GLIBCXX_USE_CHAR8_T\n+\t  , char8_t\n #endif\n \t    >>>;\n "}, {"sha": "dbea152d0149f39d1b91622b447cd666d258111c", "filename": "libstdc++-v3/include/std/limits", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits?ref=c124af936b6b225eb548ccdd7f01400511d784dc", "patch": "@@ -374,6 +374,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Now there follow 16 explicit specializations.  Yes, 16.  Make sure\n   // you get the count right. (18 in C++11 mode, with char16_t and char32_t.)\n+  // (+1 if char8_t is enabled.)\n \n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // 184. numeric_limits<bool> wording problems\n@@ -725,6 +726,71 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        = round_toward_zero;\n     };\n \n+#if _GLIBCXX_USE_CHAR8_T\n+  /// numeric_limits<char8_t> specialization.\n+  template<>\n+    struct numeric_limits<char8_t>\n+    {\n+      static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;\n+\n+      static _GLIBCXX_CONSTEXPR char8_t\n+      min() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_min (char8_t); }\n+\n+      static _GLIBCXX_CONSTEXPR char8_t\n+      max() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_max (char8_t); }\n+\n+      static _GLIBCXX_CONSTEXPR char8_t\n+      lowest() _GLIBCXX_USE_NOEXCEPT { return min(); }\n+\n+      static _GLIBCXX_USE_CONSTEXPR int digits = __glibcxx_digits (char8_t);\n+      static _GLIBCXX_USE_CONSTEXPR int digits10 = __glibcxx_digits10 (char8_t);\n+      static _GLIBCXX_USE_CONSTEXPR int max_digits10 = 0;\n+      static _GLIBCXX_USE_CONSTEXPR bool is_signed = __glibcxx_signed (char8_t);\n+      static _GLIBCXX_USE_CONSTEXPR bool is_integer = true;\n+      static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;\n+      static _GLIBCXX_USE_CONSTEXPR int radix = 2;\n+\n+      static _GLIBCXX_CONSTEXPR char8_t\n+      epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }\n+\n+      static _GLIBCXX_CONSTEXPR char8_t\n+      round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }\n+\n+      static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;\n+      static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;\n+      static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0;\n+      static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0;\n+\n+      static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;\n+      static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;\n+      static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;\n+      static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm\n+\t= denorm_absent;\n+      static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;\n+\n+      static _GLIBCXX_CONSTEXPR char8_t\n+      infinity() _GLIBCXX_USE_NOEXCEPT { return char8_t(); }\n+\n+      static _GLIBCXX_CONSTEXPR char8_t\n+      quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return char8_t(); }\n+\n+      static _GLIBCXX_CONSTEXPR char8_t\n+      signaling_NaN() _GLIBCXX_USE_NOEXCEPT { return char8_t(); }\n+\n+      static _GLIBCXX_CONSTEXPR char8_t\n+      denorm_min() _GLIBCXX_USE_NOEXCEPT { return char8_t(); }\n+\n+      static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;\n+      static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;\n+      static _GLIBCXX_USE_CONSTEXPR bool is_modulo = !is_signed;\n+\n+      static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps;\n+      static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;\n+      static _GLIBCXX_USE_CONSTEXPR float_round_style round_style\n+\t= round_toward_zero;\n+    };\n+#endif\n+\n #if __cplusplus >= 201103L\n   /// numeric_limits<char16_t> specialization.\n   template<>"}, {"sha": "100c6c84ef604670ffc5b18958125523a4de37d8", "filename": "libstdc++-v3/include/std/string", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring?ref=c124af936b6b225eb548ccdd7f01400511d784dc", "patch": "@@ -65,6 +65,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       using basic_string = std::basic_string<_CharT, _Traits,\n \t\t\t\t\t     polymorphic_allocator<_CharT>>;\n     using string    = basic_string<char>;\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+    using u8string  = basic_string<char8_t>;\n+#endif\n     using u16string = basic_string<char16_t>;\n     using u32string = basic_string<char32_t>;\n #ifdef _GLIBCXX_USE_WCHAR_T"}, {"sha": "844cfb148ad60a670b9cecdf2d39b4c49d958273", "filename": "libstdc++-v3/include/std/string_view", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view?ref=c124af936b6b225eb548ccdd7f01400511d784dc", "patch": "@@ -583,7 +583,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #ifdef _GLIBCXX_USE_WCHAR_T\n   using wstring_view = basic_string_view<wchar_t>;\n #endif\n-\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  using u8string_view = basic_string_view<char8_t>;\n+#endif\n   using u16string_view = basic_string_view<char16_t>;\n   using u32string_view = basic_string_view<char32_t>;\n \n@@ -621,6 +623,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { };\n #endif\n \n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  template<>\n+    struct hash<u8string_view>\n+    : public __hash_base<size_t, u8string_view>\n+    {\n+      size_t\n+      operator()(const u8string_view& __str) const noexcept\n+      { return std::_Hash_impl::hash(__str.data(), __str.length()); }\n+    };\n+\n+  template<>\n+    struct __is_fast_hash<hash<u8string_view>> : std::false_type\n+    { };\n+#endif\n+\n   template<>\n     struct hash<u16string_view>\n     : public __hash_base<size_t, u16string_view>\n@@ -665,6 +682,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return basic_string_view<wchar_t>{__str, __len}; }\n #endif\n \n+#ifdef _GLIBCXX_USE_CHAR8_T\n+    inline constexpr basic_string_view<char8_t>\n+    operator\"\"sv(const char8_t* __str, size_t __len) noexcept\n+    { return basic_string_view<char8_t>{__str, __len}; }\n+#endif\n+\n     inline constexpr basic_string_view<char16_t>\n     operator\"\"sv(const char16_t* __str, size_t __len) noexcept\n     { return basic_string_view<char16_t>{__str, __len}; }"}, {"sha": "993967244ffbcceac6644d1c19244100fcafd55a", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=c124af936b6b225eb548ccdd7f01400511d784dc", "patch": "@@ -234,6 +234,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public true_type { };\n #endif\n \n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  template<>\n+    struct __is_integral_helper<char8_t>\n+    : public true_type { };\n+#endif\n+\n   template<>\n     struct __is_integral_helper<char16_t>\n     : public true_type { };\n@@ -1680,8 +1686,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t= typename __match_cv_qualifiers<_Tp, __unsigned_type>::__type;\n     };\n \n-  // wchar_t, char16_t and char32_t are integral types but are neither\n-  // signed integer types nor unsigned integer types, so must be\n+  // wchar_t, char8_t, char16_t and char32_t are integral types but are\n+  // neither signed integer types nor unsigned integer types, so must be\n   // transformed to the unsigned integer type with the smallest rank.\n   // Use the partial specialization for enumeration types to do that.\n #if defined(_GLIBCXX_USE_WCHAR_T)\n@@ -1693,6 +1699,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n #endif\n \n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  template<>\n+    struct __make_unsigned<char8_t>\n+    {\n+      using __type\n+\t= typename __make_unsigned_selector<char8_t, false, true>::__type;\n+    };\n+#endif\n+\n   template<>\n     struct __make_unsigned<char16_t>\n     {\n@@ -1810,6 +1825,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n #endif\n \n+#if defined(_GLIBCXX_USE_CHAR8_T)\n+  template<>\n+    struct __make_signed<char8_t>\n+    {\n+      using __type\n+\t= typename __make_signed_selector<char8_t, false, true>::__type;\n+    };\n+#endif\n+\n   template<>\n     struct __make_signed<char16_t>\n     {"}, {"sha": "614a84c1fa8ebf5be73be6489d6fb4ceb525ed08", "filename": "libstdc++-v3/libsupc++/atomic_lockfree_defines.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fatomic_lockfree_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fatomic_lockfree_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fatomic_lockfree_defines.h?ref=c124af936b6b225eb548ccdd7f01400511d784dc", "patch": "@@ -49,6 +49,9 @@\n #define ATOMIC_BOOL_LOCK_FREE\t\t__GCC_ATOMIC_BOOL_LOCK_FREE\n #define ATOMIC_CHAR_LOCK_FREE\t\t__GCC_ATOMIC_CHAR_LOCK_FREE\n #define ATOMIC_WCHAR_T_LOCK_FREE\t__GCC_ATOMIC_WCHAR_T_LOCK_FREE\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+#define ATOMIC_CHAR8_T_LOCK_FREE\t__GCC_ATOMIC_CHAR8_T_LOCK_FREE\n+#endif\n #define ATOMIC_CHAR16_T_LOCK_FREE\t__GCC_ATOMIC_CHAR16_T_LOCK_FREE\n #define ATOMIC_CHAR32_T_LOCK_FREE\t__GCC_ATOMIC_CHAR32_T_LOCK_FREE\n #define ATOMIC_SHORT_LOCK_FREE\t\t__GCC_ATOMIC_SHORT_LOCK_FREE"}, {"sha": "9fc1866270237895d79cb6eb92c434785de10489", "filename": "libstdc++-v3/src/c++11/Makefile.am", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.am?ref=c124af936b6b225eb548ccdd7f01400511d784dc", "patch": "@@ -126,6 +126,16 @@ hashtable_c++0x.lo: hashtable_c++0x.cc\n hashtable_c++0x.o: hashtable_c++0x.cc\n \t$(CXXCOMPILE) -fimplicit-templates -c $<\n \n+# Use special rules for source files that require -fchar8_t.\n+codecvt.lo: codecvt.cc\n+\t$(LTCXXCOMPILE) -fchar8_t -c $<\n+codecvt.o: codecvt.cc\n+\t$(CXXCOMPILE) -fchar8_t -c $<\n+limits.lo: limits.cc\n+\t$(LTCXXCOMPILE) -fchar8_t -c $<\n+limits.o: limits.cc\n+\t$(CXXCOMPILE) -fchar8_t -c $<\n+\n if ENABLE_DUAL_ABI\n # Rewrite the type info for __ios_failure.\n rewrite_ios_failure_typeinfo = sed -e '/^_*_ZTISt13__ios_failure:/,/_ZTVN10__cxxabiv120__si_class_type_infoE/s/_ZTVN10__cxxabiv120__si_class_type_infoE/_ZTVSt19__iosfail_type_info/'"}, {"sha": "a972915a2a73da4502e6f2b60b28898e98c58a6b", "filename": "libstdc++-v3/src/c++11/Makefile.in", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.in?ref=c124af936b6b225eb548ccdd7f01400511d784dc", "patch": "@@ -834,6 +834,16 @@ hashtable_c++0x.lo: hashtable_c++0x.cc\n hashtable_c++0x.o: hashtable_c++0x.cc\n \t$(CXXCOMPILE) -fimplicit-templates -c $<\n \n+# Use special rules for source files that require -fchar8_t.\n+codecvt.lo: codecvt.cc\n+\t$(LTCXXCOMPILE) -fchar8_t -c $<\n+codecvt.o: codecvt.cc\n+\t$(CXXCOMPILE) -fchar8_t -c $<\n+limits.lo: limits.cc\n+\t$(LTCXXCOMPILE) -fchar8_t -c $<\n+limits.o: limits.cc\n+\t$(CXXCOMPILE) -fchar8_t -c $<\n+\n @ENABLE_DUAL_ABI_TRUE@cxx11-ios_failure-lt.s: cxx11-ios_failure.cc\n @ENABLE_DUAL_ABI_TRUE@\t$(LTCXXCOMPILE) -S $< -o tmp-cxx11-ios_failure-lt.s\n @ENABLE_DUAL_ABI_TRUE@\t-test -f tmp-cxx11-ios_failure-lt.o && mv -f tmp-cxx11-ios_failure-lt.o tmp-cxx11-ios_failure-lt.s"}, {"sha": "372aea289b709aa2672b4ccd473dfa0f7c675d47", "filename": "libstdc++-v3/src/c++11/codecvt.cc", "status": "modified", "additions": 189, "deletions": 21, "changes": 210, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcodecvt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcodecvt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcodecvt.cc?ref=c124af936b6b225eb548ccdd7f01400511d784dc", "patch": "@@ -193,8 +193,9 @@ namespace\n     }\n \n   // If generate_header is set in mode write out UTF-8 BOM.\n+  template<typename C>\n   bool\n-  write_utf8_bom(range<char>& to, codecvt_mode mode)\n+  write_utf8_bom(range<C>& to, codecvt_mode mode)\n   {\n     if (mode & generate_header)\n       return write_bom(to, utf8_bom);\n@@ -218,8 +219,9 @@ namespace\n   }\n \n   // If consume_header is set in mode update from.next to after any BOM.\n+  template<typename C>\n   void\n-  read_utf8_bom(range<const char>& from, codecvt_mode mode)\n+  read_utf8_bom(range<const C>& from, codecvt_mode mode)\n   {\n     if (mode & consume_header)\n       read_bom(from, utf8_bom);\n@@ -245,8 +247,9 @@ namespace\n   // Read a codepoint from a UTF-8 multibyte sequence.\n   // Updates from.next if the codepoint is not greater than maxcode.\n   // Returns invalid_mb_sequence, incomplete_mb_character or the code point.\n+  template<typename C>\n   char32_t\n-  read_utf8_code_point(range<const char>& from, unsigned long maxcode)\n+  read_utf8_code_point(range<const C>& from, unsigned long maxcode)\n   {\n     const size_t avail = from.size();\n     if (avail == 0)\n@@ -315,8 +318,9 @@ namespace\n       return invalid_mb_sequence;\n   }\n \n+  template<typename C>\n   bool\n-  write_utf8_code_point(range<char>& to, char32_t code_point)\n+  write_utf8_code_point(range<C>& to, char32_t code_point)\n   {\n     if (code_point < 0x80)\n       {\n@@ -445,8 +449,9 @@ namespace\n   }\n \n   // utf8 -> ucs4\n+  template<typename C>\n   codecvt_base::result\n-  ucs4_in(range<const char>& from, range<char32_t>& to,\n+  ucs4_in(range<const C>& from, range<char32_t>& to,\n           unsigned long maxcode = max_code_point, codecvt_mode mode = {})\n   {\n     read_utf8_bom(from, mode);\n@@ -463,8 +468,9 @@ namespace\n   }\n \n   // ucs4 -> utf8\n+  template<typename C>\n   codecvt_base::result\n-  ucs4_out(range<const char32_t>& from, range<char>& to,\n+  ucs4_out(range<const char32_t>& from, range<C>& to,\n            unsigned long maxcode = max_code_point, codecvt_mode mode = {})\n   {\n     if (!write_utf8_bom(to, mode))\n@@ -522,9 +528,9 @@ namespace\n   enum class surrogates { allowed, disallowed };\n \n   // utf8 -> utf16 (or utf8 -> ucs2 if s == surrogates::disallowed)\n-  template<typename C>\n+  template<typename C8, typename C16>\n   codecvt_base::result\n-  utf16_in(range<const char>& from, range<C>& to,\n+  utf16_in(range<const C8>& from, range<C16>& to,\n \t   unsigned long maxcode = max_code_point, codecvt_mode mode = {},\n \t   surrogates s = surrogates::allowed)\n   {\n@@ -552,9 +558,9 @@ namespace\n   }\n \n   // utf16 -> utf8 (or ucs2 -> utf8 if s == surrogates::disallowed)\n-  template<typename C>\n+  template<typename C16, typename C8>\n   codecvt_base::result\n-  utf16_out(range<const C>& from, range<char>& to,\n+  utf16_out(range<const C16>& from, range<C8>& to,\n \t    unsigned long maxcode = max_code_point, codecvt_mode mode = {},\n \t    surrogates s = surrogates::allowed)\n   {\n@@ -593,11 +599,12 @@ namespace\n   }\n \n   // return pos such that [begin,pos) is valid UTF-16 string no longer than max\n-  const char*\n-  utf16_span(const char* begin, const char* end, size_t max,\n+  template<typename C>\n+  const C*\n+  utf16_span(const C* begin, const C* end, size_t max,\n \t     char32_t maxcode = max_code_point, codecvt_mode mode = {})\n   {\n-    range<const char> from{ begin, end };\n+    range<const C> from{ begin, end };\n     read_utf8_bom(from, mode);\n     size_t count = 0;\n     while (count+1 < max)\n@@ -615,8 +622,9 @@ namespace\n   }\n \n   // utf8 -> ucs2\n+  template<typename C>\n   codecvt_base::result\n-  ucs2_in(range<const char>& from, range<char16_t>& to,\n+  ucs2_in(range<const C>& from, range<char16_t>& to,\n \t  char32_t maxcode = max_code_point, codecvt_mode mode = {})\n   {\n     // UCS-2 only supports characters in the BMP, i.e. one UTF-16 code unit:\n@@ -625,8 +633,9 @@ namespace\n   }\n \n   // ucs2 -> utf8\n+  template<typename C>\n   codecvt_base::result\n-  ucs2_out(range<const char16_t>& from, range<char>& to,\n+  ucs2_out(range<const char16_t>& from, range<C>& to,\n \t   char32_t maxcode = max_code_point, codecvt_mode mode = {})\n   {\n     // UCS-2 only supports characters in the BMP, i.e. one UTF-16 code unit:\n@@ -687,11 +696,12 @@ namespace\n     return reinterpret_cast<const char16_t*>(from.next);\n   }\n \n-  const char*\n-  ucs2_span(const char* begin, const char* end, size_t max,\n+  template<typename C>\n+  const C*\n+  ucs2_span(const C* begin, const C* end, size_t max,\n             char32_t maxcode, codecvt_mode mode)\n   {\n-    range<const char> from{ begin, end };\n+    range<const C> from{ begin, end };\n     read_utf8_bom(from, mode);\n     // UCS-2 only supports characters in the BMP, i.e. one UTF-16 code unit:\n     maxcode = std::min(max_single_utf16_unit, maxcode);\n@@ -702,11 +712,12 @@ namespace\n   }\n \n   // return pos such that [begin,pos) is valid UCS-4 string no longer than max\n-  const char*\n-  ucs4_span(const char* begin, const char* end, size_t max,\n+  template<typename C>\n+  const C*\n+  ucs4_span(const C* begin, const C* end, size_t max,\n             char32_t maxcode = max_code_point, codecvt_mode mode = {})\n   {\n-    range<const char> from{ begin, end };\n+    range<const C> from{ begin, end };\n     read_utf8_bom(from, mode);\n     char32_t c = 0;\n     while (max-- && c <= maxcode)\n@@ -875,6 +886,156 @@ codecvt<char32_t, char, mbstate_t>::do_max_length() const throw()\n   return 4;\n }\n \n+#if defined(_GLIBCXX_USE_CHAR8_T)\n+// Define members of codecvt<char16_t, char8_t, mbstate_t> specialization.\n+// Converts from UTF-8 to UTF-16.\n+\n+locale::id codecvt<char16_t, char8_t, mbstate_t>::id;\n+\n+codecvt<char16_t, char8_t, mbstate_t>::~codecvt() { }\n+\n+codecvt_base::result\n+codecvt<char16_t, char8_t, mbstate_t>::\n+do_out(state_type&,\n+       const intern_type* __from,\n+       const intern_type* __from_end, const intern_type*& __from_next,\n+       extern_type* __to, extern_type* __to_end,\n+       extern_type*& __to_next) const\n+{\n+  range<const char16_t> from{ __from, __from_end };\n+  range<char8_t> to{ __to, __to_end };\n+  auto res = utf16_out(from, to);\n+  __from_next = from.next;\n+  __to_next = to.next;\n+  return res;\n+}\n+\n+codecvt_base::result\n+codecvt<char16_t, char8_t, mbstate_t>::\n+do_unshift(state_type&, extern_type* __to, extern_type*,\n+\t   extern_type*& __to_next) const\n+{\n+  __to_next = __to;\n+  return noconv; // we don't use mbstate_t for the unicode facets\n+}\n+\n+codecvt_base::result\n+codecvt<char16_t, char8_t, mbstate_t>::\n+do_in(state_type&, const extern_type* __from, const extern_type* __from_end,\n+      const extern_type*& __from_next,\n+      intern_type* __to, intern_type* __to_end,\n+      intern_type*& __to_next) const\n+{\n+  range<const char8_t> from{ __from, __from_end };\n+  range<char16_t> to{ __to, __to_end };\n+#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__\n+  codecvt_mode mode = {};\n+#else\n+  codecvt_mode mode = little_endian;\n+#endif\n+  auto res = utf16_in(from, to, max_code_point, mode);\n+  __from_next = from.next;\n+  __to_next = to.next;\n+  return res;\n+}\n+\n+int\n+codecvt<char16_t, char8_t, mbstate_t>::do_encoding() const throw()\n+{ return 0; } // UTF-8 is not a fixed-width encoding\n+\n+bool\n+codecvt<char16_t, char8_t, mbstate_t>::do_always_noconv() const throw()\n+{ return false; }\n+\n+int\n+codecvt<char16_t, char8_t, mbstate_t>::\n+do_length(state_type&, const extern_type* __from,\n+\t  const extern_type* __end, size_t __max) const\n+{\n+  __end = utf16_span(__from, __end, __max);\n+  return __end - __from;\n+}\n+\n+int\n+codecvt<char16_t, char8_t, mbstate_t>::do_max_length() const throw()\n+{\n+  // A single character (one or two UTF-16 code units) requires\n+  // up to four UTF-8 code units.\n+  return 4;\n+}\n+\n+// Define members of codecvt<char32_t, char8_t, mbstate_t> specialization.\n+// Converts from UTF-8 to UTF-32 (aka UCS-4).\n+\n+locale::id codecvt<char32_t, char8_t, mbstate_t>::id;\n+\n+codecvt<char32_t, char8_t, mbstate_t>::~codecvt() { }\n+\n+codecvt_base::result\n+codecvt<char32_t, char8_t, mbstate_t>::\n+do_out(state_type&, const intern_type* __from, const intern_type* __from_end,\n+       const intern_type*& __from_next,\n+       extern_type* __to, extern_type* __to_end,\n+       extern_type*& __to_next) const\n+{\n+  range<const char32_t> from{ __from, __from_end };\n+  range<char8_t> to{ __to, __to_end };\n+  auto res = ucs4_out(from, to);\n+  __from_next = from.next;\n+  __to_next = to.next;\n+  return res;\n+}\n+\n+codecvt_base::result\n+codecvt<char32_t, char8_t, mbstate_t>::\n+do_unshift(state_type&, extern_type* __to, extern_type*,\n+\t   extern_type*& __to_next) const\n+{\n+  __to_next = __to;\n+  return noconv;\n+}\n+\n+codecvt_base::result\n+codecvt<char32_t, char8_t, mbstate_t>::\n+do_in(state_type&, const extern_type* __from, const extern_type* __from_end,\n+      const extern_type*& __from_next,\n+      intern_type* __to, intern_type* __to_end,\n+      intern_type*& __to_next) const\n+{\n+  range<const char8_t> from{ __from, __from_end };\n+  range<char32_t> to{ __to, __to_end };\n+  auto res = ucs4_in(from, to);\n+  __from_next = from.next;\n+  __to_next = to.next;\n+  return res;\n+}\n+\n+int\n+codecvt<char32_t, char8_t, mbstate_t>::do_encoding() const throw()\n+{ return 0; } // UTF-8 is not a fixed-width encoding\n+\n+bool\n+codecvt<char32_t, char8_t, mbstate_t>::do_always_noconv() const throw()\n+{ return false; }\n+\n+int\n+codecvt<char32_t, char8_t, mbstate_t>::\n+do_length(state_type&, const extern_type* __from,\n+\t  const extern_type* __end, size_t __max) const\n+{\n+  __end = ucs4_span(__from, __end, __max);\n+  return __end - __from;\n+}\n+\n+int\n+codecvt<char32_t, char8_t, mbstate_t>::do_max_length() const throw()\n+{\n+  // A single character (one UTF-32 code unit) requires\n+  // up to 4 UTF-8 code units.\n+  return 4;\n+}\n+#endif // _GLIBCXX_USE_CHAR8_T\n+\n // Define members of codecvt_utf8<char16_t> base class implementation.\n // Converts from UTF-8 to UCS-2.\n \n@@ -1636,5 +1797,12 @@ inline template class __codecvt_abstract_base<char32_t, char, mbstate_t>;\n template class codecvt_byname<char16_t, char, mbstate_t>;\n template class codecvt_byname<char32_t, char, mbstate_t>;\n \n+#if defined(_GLIBCXX_USE_CHAR8_T)\n+inline template class __codecvt_abstract_base<char16_t, char8_t, mbstate_t>;\n+inline template class __codecvt_abstract_base<char32_t, char8_t, mbstate_t>;\n+template class codecvt_byname<char16_t, char8_t, mbstate_t>;\n+template class codecvt_byname<char32_t, char8_t, mbstate_t>;\n+#endif\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n }"}, {"sha": "77b652de42de8faeb78dbb7556578de469445d9e", "filename": "libstdc++-v3/src/c++11/limits.cc", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Flimits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Flimits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Flimits.cc?ref=c124af936b6b225eb548ccdd7f01400511d784dc", "patch": "@@ -525,6 +525,33 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   const bool numeric_limits<long double>::tinyness_before;\n   const float_round_style numeric_limits<long double>::round_style;\n \n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  // char8_t\n+  const bool numeric_limits<char8_t>::is_specialized;\n+  const int  numeric_limits<char8_t>::digits;\n+  const int  numeric_limits<char8_t>::digits10;\n+  const int  numeric_limits<char8_t>::max_digits10;\n+  const bool numeric_limits<char8_t>::is_signed;\n+  const bool numeric_limits<char8_t>::is_integer;\n+  const bool numeric_limits<char8_t>::is_exact;\n+  const int  numeric_limits<char8_t>::radix;\n+  const int  numeric_limits<char8_t>::min_exponent;\n+  const int  numeric_limits<char8_t>::min_exponent10;\n+  const int  numeric_limits<char8_t>::max_exponent;\n+  const int  numeric_limits<char8_t>::max_exponent10;\n+  const bool numeric_limits<char8_t>::has_infinity;\n+  const bool numeric_limits<char8_t>::has_quiet_NaN;\n+  const bool numeric_limits<char8_t>::has_signaling_NaN;\n+  const float_denorm_style numeric_limits<char8_t>::has_denorm;\n+  const bool numeric_limits<char8_t>::has_denorm_loss;\n+  const bool numeric_limits<char8_t>::is_iec559;\n+  const bool numeric_limits<char8_t>::is_bounded;\n+  const bool numeric_limits<char8_t>::is_modulo;\n+  const bool numeric_limits<char8_t>::traps;\n+  const bool numeric_limits<char8_t>::tinyness_before;\n+  const float_round_style numeric_limits<char8_t>::round_style;\n+#endif // _GLIBCXX_USE_CHAR8_T\n+\n   // char16_t\n   const bool numeric_limits<char16_t>::is_specialized;\n   const int  numeric_limits<char16_t>::digits;"}, {"sha": "ba88f002389378842368084f412aa309e6e981f4", "filename": "libstdc++-v3/src/c++98/Makefile.am", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.am?ref=c124af936b6b225eb548ccdd7f01400511d784dc", "patch": "@@ -184,13 +184,13 @@ endif\n \n # XXX TODO move locale_init.cc and localename.cc to src/c++11\n locale_init.lo: locale_init.cc\n-\t$(LTCXXCOMPILE) -std=gnu++11 -c $<\n+\t$(LTCXXCOMPILE) -std=gnu++11 -fchar8_t -c $<\n locale_init.o: locale_init.cc\n-\t$(LTCXXCOMPILE) -std=gnu++11 -c $<\n+\t$(LTCXXCOMPILE) -std=gnu++11 -fchar8_t -c $<\n localename.lo: localename.cc\n-\t$(LTCXXCOMPILE) -std=gnu++11 -c $<\n+\t$(LTCXXCOMPILE) -std=gnu++11 -fchar8_t -c $<\n localename.o: localename.cc\n-\t$(LTCXXCOMPILE) -std=gnu++11 -c $<\n+\t$(LTCXXCOMPILE) -std=gnu++11 -fchar8_t -c $<\n \n # Use special rules for the deprecated source files so that they find\n # deprecated include files."}, {"sha": "8e89c734361805450304e4e5a00256cb6827b666", "filename": "libstdc++-v3/src/c++98/Makefile.in", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.in?ref=c124af936b6b225eb548ccdd7f01400511d784dc", "patch": "@@ -888,13 +888,13 @@ c++locale.o: c++locale.cc\n \n # XXX TODO move locale_init.cc and localename.cc to src/c++11\n locale_init.lo: locale_init.cc\n-\t$(LTCXXCOMPILE) -std=gnu++11 -c $<\n+\t$(LTCXXCOMPILE) -std=gnu++11 -fchar8_t -c $<\n locale_init.o: locale_init.cc\n-\t$(LTCXXCOMPILE) -std=gnu++11 -c $<\n+\t$(LTCXXCOMPILE) -std=gnu++11 -fchar8_t -c $<\n localename.lo: localename.cc\n-\t$(LTCXXCOMPILE) -std=gnu++11 -c $<\n+\t$(LTCXXCOMPILE) -std=gnu++11 -fchar8_t -c $<\n localename.o: localename.cc\n-\t$(LTCXXCOMPILE) -std=gnu++11 -c $<\n+\t$(LTCXXCOMPILE) -std=gnu++11 -fchar8_t -c $<\n strstream.lo: strstream.cc\n \t$(LTCXXCOMPILE) -I$(GLIBCXX_INCLUDE_DIR)/backward -Wno-deprecated -c $<\n strstream.o: strstream.cc"}, {"sha": "e5e9d74379f5c34ca829b7667b553335abbd2952", "filename": "libstdc++-v3/src/c++98/locale_init.cc", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale_init.cc?ref=c124af936b6b225eb548ccdd7f01400511d784dc", "patch": "@@ -209,6 +209,16 @@ namespace\n   __attribute__ ((aligned(__alignof__(codecvt<char32_t, char, mbstate_t>))));\n   fake_codecvt_c32 codecvt_c32;\n \n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  typedef char fake_codecvt_c16_c8[sizeof(codecvt<char16_t, char8_t, mbstate_t>)]\n+  __attribute__ ((aligned(__alignof__(codecvt<char16_t, char8_t, mbstate_t>))));\n+  fake_codecvt_c16_c8 codecvt_c16_c8;\n+\n+  typedef char fake_codecvt_c32_c8[sizeof(codecvt<char32_t, char8_t, mbstate_t>)]\n+  __attribute__ ((aligned(__alignof__(codecvt<char32_t, char8_t, mbstate_t>))));\n+  fake_codecvt_c32_c8 codecvt_c32_c8;\n+#endif\n+\n   // Storage for \"C\" locale caches.\n   typedef char fake_num_cache_c[sizeof(std::__numpunct_cache<char>)]\n   __attribute__ ((aligned(__alignof__(std::__numpunct_cache<char>))));\n@@ -329,6 +339,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if _GLIBCXX_NUM_UNICODE_FACETS != 0\n     &codecvt<char16_t, char, mbstate_t>::id,\n     &codecvt<char32_t, char, mbstate_t>::id,\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+    &codecvt<char16_t, char8_t, mbstate_t>::id,\n+    &codecvt<char32_t, char8_t, mbstate_t>::id,\n+#endif\n #endif\n     0\n   };\n@@ -536,6 +550,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if _GLIBCXX_NUM_UNICODE_FACETS != 0\n     _M_init_facet(new (&codecvt_c16) codecvt<char16_t, char, mbstate_t>(1));\n     _M_init_facet(new (&codecvt_c32) codecvt<char32_t, char, mbstate_t>(1));\n+\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+    _M_init_facet(new (&codecvt_c16_c8) codecvt<char16_t, char8_t, mbstate_t>(1));\n+    _M_init_facet(new (&codecvt_c32_c8) codecvt<char32_t, char8_t, mbstate_t>(1));\n+#endif\n+\n #endif\n \n #if _GLIBCXX_USE_DUAL_ABI"}, {"sha": "4e9c5e6c9881c4ad35f995a02adc1fd6866664a7", "filename": "libstdc++-v3/src/c++98/localename.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocalename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocalename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocalename.cc?ref=c124af936b6b225eb548ccdd7f01400511d784dc", "patch": "@@ -272,6 +272,12 @@ const int num_facets = _GLIBCXX_NUM_FACETS + _GLIBCXX_NUM_UNICODE_FACETS\n #if _GLIBCXX_NUM_UNICODE_FACETS != 0\n         _M_init_facet(new codecvt<char16_t, char, mbstate_t>);\n         _M_init_facet(new codecvt<char32_t, char, mbstate_t>);\n+\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+        _M_init_facet(new codecvt<char16_t, char8_t, mbstate_t>);\n+        _M_init_facet(new codecvt<char32_t, char8_t, mbstate_t>);\n+#endif\n+\n #endif\n \n #if _GLIBCXX_USE_DUAL_ABI"}, {"sha": "a2d2cab36530fe0d26ed48c2312848750a1d964e", "filename": "libstdc++-v3/testsuite/util/testsuite_abi.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c124af936b6b225eb548ccdd7f01400511d784dc/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc?ref=c124af936b6b225eb548ccdd7f01400511d784dc", "patch": "@@ -220,6 +220,7 @@ check_version(symbol& test, bool added)\n       known_versions.push_back(\"CXXABI_1.3.9\");\n       known_versions.push_back(\"CXXABI_1.3.10\");\n       known_versions.push_back(\"CXXABI_1.3.11\");\n+      known_versions.push_back(\"CXXABI_1.3.12\");\n       known_versions.push_back(\"CXXABI_TM_1\");\n       known_versions.push_back(\"CXXABI_FLOAT128\");\n     }\n@@ -238,7 +239,7 @@ check_version(symbol& test, bool added)\n \n       // Check that added symbols are added in the latest pre-release version.\n       bool latestp = (test.version_name == \"GLIBCXX_3.4.26\"\n-\t\t     || test.version_name == \"CXXABI_1.3.11\"\n+\t\t     || test.version_name == \"CXXABI_1.3.12\"\n \t\t     || test.version_name == \"CXXABI_FLOAT128\"\n \t\t     || test.version_name == \"CXXABI_TM_1\");\n       if (added && !latestp)"}]}