{"sha": "27a2c2b5a1255f4df4b5316bdb2d642f5f2e256b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdhMmMyYjVhMTI1NWY0ZGY0YjUzMTZiZGIyZDY0MmY1ZjJlMjU2Yg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-10-31T23:43:05Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-10-31T23:43:05Z"}, "message": "(emit_move_sequence): Refine previous change.\n\nFrom-SVN: r13087", "tree": {"sha": "e52d7b1431ba94bba5b435a87869a921b6d23677", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e52d7b1431ba94bba5b435a87869a921b6d23677"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27a2c2b5a1255f4df4b5316bdb2d642f5f2e256b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27a2c2b5a1255f4df4b5316bdb2d642f5f2e256b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27a2c2b5a1255f4df4b5316bdb2d642f5f2e256b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27a2c2b5a1255f4df4b5316bdb2d642f5f2e256b/comments", "author": null, "committer": null, "parents": [{"sha": "9593ce03b9cf0ab59659e768a68e3210ee568127", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9593ce03b9cf0ab59659e768a68e3210ee568127", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9593ce03b9cf0ab59659e768a68e3210ee568127"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "d8bc1e1b911e6d8a31c628a12d5eff309e09ee42", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a2c2b5a1255f4df4b5316bdb2d642f5f2e256b/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a2c2b5a1255f4df4b5316bdb2d642f5f2e256b/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=27a2c2b5a1255f4df4b5316bdb2d642f5f2e256b", "patch": "@@ -1066,15 +1066,21 @@ emit_move_sequence (operands, mode, scratch_reg)\n   else if (reload_in_progress && GET_CODE (operand0) == SUBREG\n \t   && GET_CODE (SUBREG_REG (operand0)) == REG\n \t   && REGNO (SUBREG_REG (operand0)) >= FIRST_PSEUDO_REGISTER)\n-    SUBREG_REG (operand0) = reg_equiv_mem[REGNO (SUBREG_REG (operand0))];\n+    {\n+      SUBREG_REG (operand0) = reg_equiv_mem[REGNO (SUBREG_REG (operand0))];\n+      operand0 = alter_subreg (operand0);\n+    }\n \n   if (reload_in_progress && GET_CODE (operand1) == REG\n       && REGNO (operand1) >= FIRST_PSEUDO_REGISTER)\n     operand1 = reg_equiv_mem[REGNO (operand1)];\n   else if (reload_in_progress && GET_CODE (operand1) == SUBREG\n \t   && GET_CODE (SUBREG_REG (operand1)) == REG\n \t   && REGNO (SUBREG_REG (operand1)) >= FIRST_PSEUDO_REGISTER)\n-    SUBREG_REG (operand1) = reg_equiv_mem[REGNO (SUBREG_REG (operand1))];\n+    {\n+      SUBREG_REG (operand1) = reg_equiv_mem[REGNO (SUBREG_REG (operand1))];\n+      operand1 = alter_subreg (operand1);\n+    }\n \n   /* Handle secondary reloads for loads/stores of FP registers from\n      REG+D addresses where D does not fit in 5 bits, including "}]}