{"sha": "df2a54e9458547dfc9158100d4207c6559bac9b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGYyYTU0ZTk0NTg1NDdkZmM5MTU4MTAwZDQyMDdjNjU1OWJhYzliNA==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-10-09T23:11:55Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-10-09T23:11:55Z"}, "message": "c-tree.texi, [...]: Consistently use \"nonzero\" instead of \"non-zero\".\n\n\t* doc/c-tree.texi, doc/cppinternals.texi, doc/extend.texi,\n\tdoc/install.texi, doc/md.texi, doc/rtl.texi, doc/tm.texi:\n\tConsistently use \"nonzero\" instead of \"non-zero\".\n\nFrom-SVN: r46134", "tree": {"sha": "cc44d5af405ee939cc4eb75111774472c6214a40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc44d5af405ee939cc4eb75111774472c6214a40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df2a54e9458547dfc9158100d4207c6559bac9b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df2a54e9458547dfc9158100d4207c6559bac9b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df2a54e9458547dfc9158100d4207c6559bac9b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df2a54e9458547dfc9158100d4207c6559bac9b4/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fb5c0ebcfe787c4be11c9634ebc3c259a1a71ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fb5c0ebcfe787c4be11c9634ebc3c259a1a71ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fb5c0ebcfe787c4be11c9634ebc3c259a1a71ea"}], "stats": {"total": 100, "additions": 53, "deletions": 47}, "files": [{"sha": "2c7593df3a28ca26ff94b1526c958a94e9f3b4ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df2a54e9458547dfc9158100d4207c6559bac9b4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df2a54e9458547dfc9158100d4207c6559bac9b4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=df2a54e9458547dfc9158100d4207c6559bac9b4", "patch": "@@ -1,3 +1,9 @@\n+2001-10-10  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* doc/c-tree.texi, doc/cppinternals.texi, doc/extend.texi,\n+\tdoc/install.texi, doc/md.texi, doc/rtl.texi, doc/tm.texi:\n+\tConsistently use \"nonzero\" instead of \"non-zero\".\n+\n 2001-10-09  Kazu Hirata  <kazu@hxi.com>\n \n \t* acconfig.h: Fix comment formatting."}, {"sha": "85962c7a5854dcaa19d540231902fbfc839c730e", "filename": "gcc/doc/c-tree.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df2a54e9458547dfc9158100d4207c6559bac9b4/gcc%2Fdoc%2Fc-tree.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df2a54e9458547dfc9158100d4207c6559bac9b4/gcc%2Fdoc%2Fc-tree.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fc-tree.texi?ref=df2a54e9458547dfc9158100d4207c6559bac9b4", "patch": "@@ -110,7 +110,7 @@ int i = (TEST_P (t) != 0);\n @noindent\n are legal.  Macros that return @code{int} values now may be changed to\n return @code{tree} values, or other pointers in the future.  Even those\n-that continue to return @code{int} may return multiple non-zero codes\n+that continue to return @code{int} may return multiple nonzero codes\n where previously they returned only zero and one.  Therefore, you should\n not write code like\n @example\n@@ -1183,7 +1183,7 @@ returning to the thunk.  The first parameter to the thunk is always the\n value.  (The @code{THUNK_DELTA} is an @code{int}, not an\n @code{INTEGER_CST}.)\n \n-Then, if @code{THUNK_VCALL_OFFSET} (an @code{INTEGER_CST}) is non-zero\n+Then, if @code{THUNK_VCALL_OFFSET} (an @code{INTEGER_CST}) is nonzero\n the adjusted @code{this} pointer must be adjusted again.  The complete\n calculation is given by the following pseudo-code:\n \n@@ -2087,7 +2087,7 @@ the value of the second operand.\n \n @item COND_EXPR\n These nodes represent @code{?:} expressions.  The first operand\n-is of boolean or integral type.  If it evaluates to a non-zero value,\n+is of boolean or integral type.  If it evaluates to a nonzero value,\n the second operand should be evaluated, and returned as the value of the\n expression.  Otherwise, the third operand is evaluated, and returned as\n the value of the expression.  As a GNU extension, the middle operand of\n@@ -2165,7 +2165,7 @@ an @code{EXIT_EXPR} is encountered.\n @item EXIT_EXPR\n These nodes represent conditional exits from the nearest enclosing\n @code{LOOP_EXPR}.  The single operand is the condition; if it is\n-non-zero, then the loop should be exited.  An @code{EXIT_EXPR} will only\n+nonzero, then the loop should be exited.  An @code{EXIT_EXPR} will only\n appear within a @code{LOOP_EXPR}.\n \n @item CLEANUP_POINT_EXPR"}, {"sha": "be95c48042f522d9cfed0cf8738ff0d3de871abf", "filename": "gcc/doc/cppinternals.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df2a54e9458547dfc9158100d4207c6559bac9b4/gcc%2Fdoc%2Fcppinternals.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df2a54e9458547dfc9158100d4207c6559bac9b4/gcc%2Fdoc%2Fcppinternals.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals.texi?ref=df2a54e9458547dfc9158100d4207c6559bac9b4", "patch": "@@ -203,7 +203,7 @@ error about an unterminated macro argument list.\n The C standard also specifies that a new line in the middle of the\n arguments to a macro is treated as whitespace.  This white space is\n important in case the macro argument is stringified.  The state variable\n-@code{parsing_args} is non-zero when the preprocessor is collecting the\n+@code{parsing_args} is nonzero when the preprocessor is collecting the\n arguments to a macro call.  It is set to 1 when looking for the opening\n parenthesis to a function-like macro, and 2 when collecting the actual\n arguments up to the closing parenthesis, since these two cases need to"}, {"sha": "027647d09b2055c83b7b95d8516d4dae5c207d0d", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df2a54e9458547dfc9158100d4207c6559bac9b4/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df2a54e9458547dfc9158100d4207c6559bac9b4/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=df2a54e9458547dfc9158100d4207c6559bac9b4", "patch": "@@ -4121,7 +4121,7 @@ of the stack has been reached, this function will return @code{0} or a\n random value. In addition, @code{__builtin_frame_address} may be used\n to determine if the top of the stack has been reached.\n \n-This function should only be used with a non-zero argument for debugging\n+This function should only be used with a nonzero argument for debugging\n purposes.\n @end deftypefn\n \n@@ -4146,7 +4146,7 @@ any function other than the current one; in such cases, or when the top\n of the stack has been reached, this function will return @code{0} if\n the first frame pointer is properly initialized by the startup code.\n \n-This function should only be used with a non-zero argument for debugging\n+This function should only be used with a nonzero argument for debugging\n purposes.\n @end deftypefn\n "}, {"sha": "90cc3011cac0d30427c27212910c7d93732b9dd9", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df2a54e9458547dfc9158100d4207c6559bac9b4/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df2a54e9458547dfc9158100d4207c6559bac9b4/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=df2a54e9458547dfc9158100d4207c6559bac9b4", "patch": "@@ -772,7 +772,7 @@ Other broken versions may recompile parts of the compiler when\n installing the compiler.)\n \n Some commands executed when making the compiler may fail (return a\n-non-zero status) and be ignored by @code{make}.  These failures, which\n+nonzero status) and be ignored by @code{make}.  These failures, which\n are often due to files that were not found, are expected, and can safely\n be ignored.\n "}, {"sha": "685f5150630be453b64ef97a486683a2d599d7a8", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df2a54e9458547dfc9158100d4207c6559bac9b4/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df2a54e9458547dfc9158100d4207c6559bac9b4/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=df2a54e9458547dfc9158100d4207c6559bac9b4", "patch": "@@ -2569,11 +2569,11 @@ insn.\n @cindex @code{call_value_pop} instruction pattern\n @item @samp{call_pop}, @samp{call_value_pop}\n Similar to @samp{call} and @samp{call_value}, except used if defined and\n-if @code{RETURN_POPS_ARGS} is non-zero.  They should emit a @code{parallel}\n+if @code{RETURN_POPS_ARGS} is nonzero.  They should emit a @code{parallel}\n that contains both the function call and a @code{set} to indicate the\n adjustment made to the frame pointer.\n \n-For machines where @code{RETURN_POPS_ARGS} can be non-zero, the use of these\n+For machines where @code{RETURN_POPS_ARGS} can be nonzero, the use of these\n patterns increases the number of functions for which the frame pointer\n can be eliminated, if desired.\n \n@@ -2608,7 +2608,7 @@ to save any registers or allocate stack space.\n @findex reload_completed\n @findex leaf_function_p\n For such machines, the condition specified in this pattern should only\n-be true when @code{reload_completed} is non-zero and the function's\n+be true when @code{reload_completed} is nonzero and the function's\n epilogue would only be a single instruction.  For machines with register\n windows, the routine @code{leaf_function_p} may be used to determine if\n a register window push is required.\n@@ -2707,9 +2707,9 @@ that the jump optimizer will not delete the table as unreachable code.\n @cindex @code{decrement_and_branch_until_zero} instruction pattern\n @item @samp{decrement_and_branch_until_zero}\n Conditional branch instruction that decrements a register and\n-jumps if the register is non-zero.  Operand 0 is the register to\n+jumps if the register is nonzero.  Operand 0 is the register to\n decrement and test; operand 1 is the label to jump to if the\n-register is non-zero.  @xref{Looping Patterns}.\n+register is nonzero.  @xref{Looping Patterns}.\n \n This optional instruction pattern is only used by the combiner,\n typically for loops reversed by the loop optimizer when strength\n@@ -2718,13 +2718,13 @@ reduction is enabled.\n @cindex @code{doloop_end} instruction pattern\n @item @samp{doloop_end}\n Conditional branch instruction that decrements a register and jumps if\n-the register is non-zero.  This instruction takes five operands: Operand\n+the register is nonzero.  This instruction takes five operands: Operand\n 0 is the register to decrement and test; operand 1 is the number of loop\n iterations as a @code{const_int} or @code{const0_rtx} if this cannot be\n determined until run-time; operand 2 is the actual or estimated maximum\n number of iterations as a @code{const_int}; operand 3 is the number of\n enclosed loops as a @code{const_int} (an innermost loop has a value of\n-1); operand 4 is the label to jump to if the register is non-zero.\n+1); operand 4 is the label to jump to if the register is nonzero.\n @xref{Looping Patterns}.\n \n This optional instruction pattern should be defined for machines with\n@@ -3734,10 +3734,10 @@ Patterns are matched against @var{insn-pattern} in two different\n circumstances.  If an insn needs to be split for delay slot scheduling\n or insn scheduling, the insn is already known to be valid, which means\n that it must have been matched by some @code{define_insn} and, if\n-@code{reload_completed} is non-zero, is known to satisfy the constraints\n+@code{reload_completed} is nonzero, is known to satisfy the constraints\n of that @code{define_insn}.  In that case, the new insn patterns must\n also be insns that are matched by some @code{define_insn} and, if\n-@code{reload_completed} is non-zero, must also satisfy the constraints\n+@code{reload_completed} is nonzero, must also satisfy the constraints\n of those definitions.\n \n As an example of this usage of @code{define_split}, consider the following\n@@ -4348,7 +4348,7 @@ expression is that of the @var{default} expression.\n @table @code\n @cindex @code{const_int} and attribute tests\n @item (const_int @var{i})\n-This test is true if @var{i} is non-zero and false otherwise.\n+This test is true if @var{i} is nonzero and false otherwise.\n \n @cindex @code{not} and attributes\n @cindex @code{ior} and attributes\n@@ -4363,7 +4363,7 @@ These tests are true if the indicated logical function is true.\n This test is true if operand @var{n} of the insn whose attribute value\n is being determined has mode @var{m} (this part of the test is ignored\n if @var{m} is @code{VOIDmode}) and the function specified by the string\n-@var{pred} returns a non-zero value when passed operand @var{n} and mode\n+@var{pred} returns a nonzero value when passed operand @var{n} and mode\n @var{m} (this part of the test is ignored if @var{pred} is the null\n string).\n "}, {"sha": "8184894b29435bc7cc6026f9fd4f077794cfee2f", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df2a54e9458547dfc9158100d4207c6559bac9b4/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df2a54e9458547dfc9158100d4207c6559bac9b4/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=df2a54e9458547dfc9158100d4207c6559bac9b4", "patch": "@@ -1776,8 +1776,8 @@ to express conditional jumps.\n @item (cond [@var{test1} @var{value1} @var{test2} @var{value2} @dots{}] @var{default})\n Similar to @code{if_then_else}, but more general.  Each of @var{test1},\n @var{test2}, @dots{} is performed in turn.  The result of this expression is\n-the @var{value} corresponding to the first non-zero test, or @var{default} if\n-none of the tests are non-zero expressions.\n+the @var{value} corresponding to the first nonzero test, or @var{default} if\n+none of the tests are nonzero expressions.\n \n This is currently not valid for instruction patterns and is supported only\n for insn attributes.  @xref{Insn Attributes}.\n@@ -2256,7 +2256,7 @@ any, must deal with such insns if you define any peephole optimizations.\n @findex cond_exec\n @item (cond_exec [@var{cond} @var{expr}])\n Represents a conditionally executed expression.  The @var{expr} is\n-executed only if the @var{cond} is non-zero.  The @var{cond} expression\n+executed only if the @var{cond} is nonzero.  The @var{cond} expression\n must not have side-effects, but the @var{expr} may very well have\n side-effects.\n "}, {"sha": "4a1474aeb558712c2c0631824f23cc78be0ddb6e", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df2a54e9458547dfc9158100d4207c6559bac9b4/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df2a54e9458547dfc9158100d4207c6559bac9b4/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=df2a54e9458547dfc9158100d4207c6559bac9b4", "patch": "@@ -124,7 +124,7 @@ additional options.\n @item SWITCH_CURTAILS_COMPILATION (@var{char})\n A C expression which determines whether the option @option{-@var{char}}\n stops compilation before the generation of an executable.  The value is\n-boolean, non-zero if the option does stop an executable from being\n+boolean, nonzero if the option does stop an executable from being\n generated, zero otherwise.\n \n By default, this macro is defined as\n@@ -779,7 +779,7 @@ used as the default values for the other command line options.\n @var{level} is the optimization level specified; 2 if @option{-O2} is\n specified, 1 if @option{-O} is specified, and 0 if neither is specified.\n \n-@var{size} is non-zero if @option{-Os} is specified and zero otherwise.\n+@var{size} is nonzero if @option{-Os} is specified and zero otherwise.\n \n You should not use this macro to change options that are not\n machine-specific.  These should uniformly selected by the same\n@@ -1737,7 +1737,7 @@ of @code{CALL_USED_REGISTERS}.\n @cindex call-used register\n @cindex call-clobbered register\n @cindex call-saved register\n-A C expression that is non-zero if it is not permissible to store a\n+A C expression that is nonzero if it is not permissible to store a\n value of mode @var{mode} in hard register number @var{regno} across a\n call without some part of it being clobbered.  For most machines this\n macro need not be defined.  It is only required for machines that do not\n@@ -2357,7 +2357,7 @@ general registers.\n @item SECONDARY_MEMORY_NEEDED (@var{class1}, @var{class2}, @var{m})\n Certain machines have the property that some registers cannot be copied\n to some other registers without using memory.  Define this macro on\n-those machines to be a C expression that is non-zero if objects of mode\n+those machines to be a C expression that is nonzero if objects of mode\n @var{m} in registers of @var{class1} can only be copied to registers of\n class @var{class2} by storing a register of @var{class1} into memory\n and loading that memory location into a register of @var{class2}.\n@@ -2406,14 +2406,14 @@ to be in specific registers (like an accumulator), and reload will fail\n if the required hard register is used for another purpose across such an\n insn.\n \n-Define @code{SMALL_REGISTER_CLASSES} to be an expression with a non-zero\n-value on these machines.  When this macro has a non-zero value, the\n+Define @code{SMALL_REGISTER_CLASSES} to be an expression with a nonzero\n+value on these machines.  When this macro has a nonzero value, the\n compiler will try to minimize the lifetime of hard registers.\n \n-It is always safe to define this macro with a non-zero value, but if you\n+It is always safe to define this macro with a nonzero value, but if you\n unnecessarily define it, you will reduce the amount of optimizations\n that can be performed in some cases.  If you do not define this macro\n-with a non-zero value when it is required, the compiler will run out of\n+with a nonzero value when it is required, the compiler will run out of\n spill registers and print a fatal error message.  For most machines, you\n should not define this macro at all.\n \n@@ -3077,7 +3077,7 @@ specified first since that is the preferred elimination.\n \n @findex CAN_ELIMINATE\n @item CAN_ELIMINATE (@var{from-reg}, @var{to-reg})\n-A C expression that returns non-zero if the compiler is allowed to try\n+A C expression that returns nonzero if the compiler is allowed to try\n to replace register number @var{from-reg} with register number\n @var{to-reg}.  This macro need only be defined if @code{ELIMINABLE_REGS}\n is defined, and will usually be the constant 1, since most of the cases\n@@ -3325,7 +3325,7 @@ by making @code{FUNCTION_ARG} return 0 whenever @var{named} is 0.\n You may use the macro @code{MUST_PASS_IN_STACK (@var{mode}, @var{type})}\n in the definition of this macro to determine if this argument is of a\n type that must be passed in the stack.  If @code{REG_PARM_STACK_SPACE}\n-is not defined and @code{FUNCTION_ARG} returns non-zero for such an\n+is not defined and @code{FUNCTION_ARG} returns nonzero for such an\n argument, the compiler will abort.  If @code{REG_PARM_STACK_SPACE} is\n defined, the argument will be computed in the stack and then loaded into\n a register.\n@@ -4730,22 +4730,22 @@ This is about addressing modes.\n @itemx HAVE_PRE_DECREMENT\n @itemx HAVE_POST_INCREMENT\n @itemx HAVE_POST_DECREMENT\n-A C expression that is non-zero if the machine supports pre-increment,\n+A C expression that is nonzero if the machine supports pre-increment,\n pre-decrement, post-increment, or post-decrement addressing respectively.\n \n @findex HAVE_POST_MODIFY_DISP\n @findex HAVE_PRE_MODIFY_DISP\n @item HAVE_PRE_MODIFY_DISP\n @itemx HAVE_POST_MODIFY_DISP\n-A C expression that is non-zero if the machine supports pre- or\n+A C expression that is nonzero if the machine supports pre- or\n post-address side-effect generation involving constants other than\n the size of the memory operand.\n \n @findex HAVE_POST_MODIFY_REG\n @findex HAVE_PRE_MODIFY_REG\n @item HAVE_PRE_MODIFY_REG\n @itemx HAVE_POST_MODIFY_REG\n-A C expression that is non-zero if the machine supports pre- or\n+A C expression that is nonzero if the machine supports pre- or\n post-address side-effect generation involving a register displacement.\n \n @findex CONSTANT_ADDRESS_P\n@@ -5273,7 +5273,7 @@ if the @samp{mov@var{m}} pattern's constraints do not allow such copying.\n @item MEMORY_MOVE_COST (@var{mode}, @var{class}, @var{in})\n A C expression for the cost of moving data of mode @var{mode} between a\n register of class @var{class} and memory; @var{in} is zero if the value\n-is to be written to memory, non-zero if it is to be read in.  This cost\n+is to be written to memory, nonzero if it is to be read in.  This cost\n is relative to those in @code{REGISTER_MOVE_COST}.  If moving between\n registers and memory is more expensive than between two registers, you\n should define this macro to express the relative cost.\n@@ -5342,15 +5342,15 @@ Define this macro to be the value 1 if memory accesses described by the\n than aligned accesses, for example if they are emulated in a trap\n handler.\n \n-When this macro is non-zero, the compiler will act as if\n-@code{STRICT_ALIGNMENT} were non-zero when generating code for block\n+When this macro is nonzero, the compiler will act as if\n+@code{STRICT_ALIGNMENT} were nonzero when generating code for block\n moves.  This can cause significantly more instructions to be produced.\n-Therefore, do not set this macro non-zero if unaligned accesses only add a\n+Therefore, do not set this macro nonzero if unaligned accesses only add a\n cycle or two to the time for a memory access.\n \n If the value of this macro is always zero, it need not be defined.  If\n-this macro is defined, it should produce a non-zero value when\n-@code{STRICT_ALIGNMENT} is non-zero.\n+this macro is defined, it should produce a nonzero value when\n+@code{STRICT_ALIGNMENT} is nonzero.\n \n @findex DONT_REDUCE_ADDR\n @item DONT_REDUCE_ADDR\n@@ -5682,7 +5682,7 @@ data section.\n \n @findex JUMP_TABLES_IN_TEXT_SECTION\n @item JUMP_TABLES_IN_TEXT_SECTION\n-Define this macro to be an expression with a non-zero value if jump\n+Define this macro to be an expression with a nonzero value if jump\n tables (for @code{tablejump} insns) should be output in the text\n section, along with the assembler instructions.  Otherwise, the\n readonly data section is used.\n@@ -5908,7 +5908,7 @@ statement is executed only when compiling an Objective-C program.\n Output assembly directives to switch to section @var{name}.  The section\n should have attributes as specified by @var{flags}, which is a bit mask\n of the @code{SECTION_*} flags defined in @file{output.h}.  If @var{align}\n-is non-zero, it contains an alignment in bytes to be used for the section,\n+is nonzero, it contains an alignment in bytes to be used for the section,\n otherwise some target default should be used.  Only targets that must \n specify an alignment within the section directive need pay attention to\n @var{align} -- we will still use @code{ASM_OUTPUT_ALIGN}.\n@@ -6033,7 +6033,7 @@ is defined, and is otherwise unused.\n @findex CONSTANT_POOL_BEFORE_FUNCTION\n @item CONSTANT_POOL_BEFORE_FUNCTION\n You may define this macro as a C expression.  You should define the\n-expression to have a non-zero value if GCC should output the constant\n+expression to have a nonzero value if GCC should output the constant\n pool for a function before the code for the function, or a zero value if\n GCC should output the constant pool after the function.  If you do\n not define this macro, the usual case, GCC will output the constant\n@@ -7994,7 +7994,7 @@ or @code{MACHINE_DEPENDENT_REORG}.\n \n You can have multiple entities that are mode-switched, and select at run time\n which entities actually need it.  @code{OPTIMIZE_MODE_SWITCHING} should\n-return non-zero for any @var{entity} that that needs mode-switching.\n+return nonzero for any @var{entity} that that needs mode-switching.\n If you define this macro, you also have to define\n @code{NUM_MODES_FOR_MODE_SWITCHING}, @code{MODE_NEEDED},\n @code{MODE_PRIORITY_TO_MODE} and @code{EMIT_MODE_SET}.\n@@ -8275,7 +8275,7 @@ at run-time.\n A C expression that is nonzero if on this machine the number of bits\n actually used for the count of a shift operation is equal to the number\n of bits needed to represent the size of the object being shifted.  When\n-this macro is non-zero, the compiler will assume that it is safe to omit\n+this macro is nonzero, the compiler will assume that it is safe to omit\n a sign-extend, zero-extend, and certain bitwise `and' instructions that\n truncates the count of a shift operation.  On machines that have\n instructions that act on bit-fields at variable positions, which may\n@@ -8416,7 +8416,7 @@ instructions.\n \n @findex FLOAT_STORE_FLAG_VALUE\n @item FLOAT_STORE_FLAG_VALUE (@var{mode})\n-A C expression that gives a non-zero @code{REAL_VALUE_TYPE} value that is\n+A C expression that gives a nonzero @code{REAL_VALUE_TYPE} value that is\n returned when comparison operators with floating-point results are true.\n Define this macro on machine that have comparison operations that return\n floating-point values.  If there are no such operations, do not define"}]}