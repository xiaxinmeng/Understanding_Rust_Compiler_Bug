{"sha": "5f67f48f90c767a2a8371bc4ddb5034a202e7488", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY2N2Y0OGY5MGM3NjdhMmE4MzcxYmM0ZGRiNTAzNGEyMDJlNzQ4OA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@dcc.unicamp.br", "date": "1999-07-31T23:52:52Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "1999-07-31T23:52:52Z"}, "message": "libjava.exp (bytecompile_file): Use `env(SUN_JAVAC)', that defaults to javac, as Sun-javac compiler or compatible.\n\n1999-07-31  Alexandre Oliva  <oliva@dcc.unicamp.br>\n\n\t* lib/libjava.exp (bytecompile_file): Use `env(SUN_JAVAC)', that\n\tdefaults to javac, as Sun-javac compiler or compatible.\n\t(libjava_init): Get GCJ from environment if neither GCJ_UNDER_TEST\n\tnor TOOL_EXECUTABLE are set.  Set `original_ld_library_path' from\n\tenvironment.\n\t(libjava_arguments): Prepend `.' and `$srcdir/$subdir' to\n\tCLASSPATH, for `support' sources.  Search for libgcj.spec in\n\t`$objdir/..', by adding -B to GCJ_UNDER_TEST.  Append\n\toriginal_ld_library_path to ld_library_path.\n\t* libjava.mauve/mauve.exp (test_mauve): Set `env(GCJ)' from\n\tGCJ_UNDER_TEST, calculated just like in libjava.exp.\n\nFrom-SVN: r28364", "tree": {"sha": "ae71ef2ab48ebcd8f0b335d3c39d72757df87681", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae71ef2ab48ebcd8f0b335d3c39d72757df87681"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f67f48f90c767a2a8371bc4ddb5034a202e7488", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f67f48f90c767a2a8371bc4ddb5034a202e7488", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f67f48f90c767a2a8371bc4ddb5034a202e7488", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f67f48f90c767a2a8371bc4ddb5034a202e7488/comments", "author": null, "committer": null, "parents": [{"sha": "71c7a006e5e9fbbee53687c4d93fe75a2e537bca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71c7a006e5e9fbbee53687c4d93fe75a2e537bca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71c7a006e5e9fbbee53687c4d93fe75a2e537bca"}], "stats": {"total": 89, "additions": 80, "deletions": 9}, "files": [{"sha": "49794b19205d6ac518f296fd45182da92289ee88", "filename": "libjava/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f67f48f90c767a2a8371bc4ddb5034a202e7488/libjava%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f67f48f90c767a2a8371bc4ddb5034a202e7488/libjava%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2FChangeLog?ref=5f67f48f90c767a2a8371bc4ddb5034a202e7488", "patch": "@@ -1,3 +1,17 @@\n+1999-07-31  Alexandre Oliva  <oliva@dcc.unicamp.br>\n+\n+\t* lib/libjava.exp (bytecompile_file): Use `env(SUN_JAVAC)', that\n+\tdefaults to javac, as Sun-javac compiler or compatible.\n+\t(libjava_init): Get GCJ from environment if neither GCJ_UNDER_TEST \n+\tnor TOOL_EXECUTABLE are set.  Set `original_ld_library_path' from\n+\tenvironment.\n+\t(libjava_arguments): Prepend `.' and `$srcdir/$subdir' to\n+\tCLASSPATH, for `support' sources.  Search for libgcj.spec in\n+\t`$objdir/..', by adding -B to GCJ_UNDER_TEST.  Append\n+\toriginal_ld_library_path to ld_library_path.\n+\t* libjava.mauve/mauve.exp (test_mauve): Set `env(GCJ)' from\n+\tGCJ_UNDER_TEST, calculated just like in libjava.exp.\n+\n 1999-07-14  Tom Tromey  <tromey@cygnus.com>\n \n \t* libjava.compile/G19990217_02.no-link: New file."}, {"sha": "3412b132bd975bb1198d430824a156a346ab5e66", "filename": "libjava/testsuite/lib/libjava.exp", "status": "modified", "additions": 45, "deletions": 8, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f67f48f90c767a2a8371bc4ddb5034a202e7488/libjava%2Ftestsuite%2Flib%2Flibjava.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f67f48f90c767a2a8371bc4ddb5034a202e7488/libjava%2Ftestsuite%2Flib%2Flibjava.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flib%2Flibjava.exp?ref=5f67f48f90c767a2a8371bc4ddb5034a202e7488", "patch": "@@ -38,13 +38,30 @@ proc find_jvscan {} {\n \n proc bytecompile_file { file objdir {classpath {}} } {\n     global env\n+    global SUN_JAVAC\n     set dirname  [file dirname $file];\n \n+    # If JDK doesn't run on your platform but some other\n+    # JDK-compatible javac does, you may set SUN_JAVAC to point to it.\n+    # One of the most important properties of a SUN_JAVAC is that it\n+    # must create class-files even for classes that have not been\n+    # specified in the command line, but that were needed to compile\n+    # those that have.  For example, Pizza won't do it, but you can\n+    # use `kaffe sun.tools.javac.Main', if you have Sun's classes.zip\n+    # in the kaffe's default search path.\n+    if ![info exists SUN_JAVAC] {\n+\tif [info exists env(SUN_JAVAC)] {\n+\t    set SUN_JAVAC $env(SUN_JAVAC)\n+\t} else {\n+\t    set SUN_JAVAC \"javac\"\n+\t}\n+    }\n+\n     catch {unset env(CLASSPATH)}\n     if {$classpath != \"\"} then {\n         set env(CLASSPATH) $classpath\n     }\n-    if {[catch {system \"cd $dirname; javac $file -d $objdir\"} msg]} then {\n+    if {[catch {system \"cd $dirname; $SUN_JAVAC $file -d $objdir\"} msg]} then {\n \tverbose \"couldn't compile $file: $msg\"\n \tset r 0\n     } else {\n@@ -64,14 +81,30 @@ proc libjava_init { args } {\n     global libjava_initialized\n     global GCJ_UNDER_TEST\n     global TOOL_EXECUTABLE\n+    global original_ld_library_path\n+    global env\n \n     if { $libjava_initialized == 1 } { return; }\n \n     if ![info exists GCJ_UNDER_TEST] {\n \tif [info exists TOOL_EXECUTABLE] {\n \t    set GCJ_UNDER_TEST $TOOL_EXECUTABLE;\n \t} else {\n-\t    set GCJ_UNDER_TEST \"[find_gcj]\"\n+\t    if [info exists env(GCJ)] {\n+\t\tset GCJ_UNDER_TEST $env(GCJ)\n+\t    } else {\n+\t\tset GCJ_UNDER_TEST \"[find_gcj]\"\n+\t    }\n+\t}\n+    }\n+\n+    if [info exists env(LD_LIBRARY_PATH)] {\n+\tset original_ld_library_path $env(LD_LIBRARY_PATH)\n+    } else {\n+\tif [info exists env(SHLIB_PATH)] {\n+\t    set original_ld_library_path $env(SHLIB_PATH)\n+\t} else {\n+\t    set original_ld_library_path \"\"\n \t}\n     }\n \n@@ -129,6 +162,7 @@ proc libjava_arguments {{mode compile}} {\n     global GCJ_UNDER_TEST\n     global tmpdir\n     global runtests\n+    global env\n \n     if [info exists LIBJAVA] {\n \tset libjava $LIBJAVA;\n@@ -184,13 +218,14 @@ proc libjava_arguments {{mode compile}} {\n     # then we'd have to do a lot more work.\n \n     # Set variables the dynamic linker looks at.\n-    setenv LD_LIBRARY_PATH $ld_library_path\n-    setenv SHLIB_PATH $ld_library_path\n+    global original_ld_library_path\n+    setenv LD_LIBRARY_PATH \"$ld_library_path:$original_ld_library_path\"\n+    setenv SHLIB_PATH \"$ld_library_path:$original_ld_library_path\"\n \n     # Set the CLASSPATH environment variable\n-    verbose \"CLASSPATH is $objdir/..\"\n+    verbose \"CLASSPATH is .:$srcdir/$subdir:$objdir/..:$objdir/../libgcj.zip\"\n     global env\n-    set env(CLASSPATH) \"$objdir/..\"\n+    set env(CLASSPATH) \".:$srcdir/$subdir:$objdir/..:$objdir/../libgcj.zip\"\n \n     global wrapper_file wrap_compile_flags;\n     lappend args \"additional_flags=$wrap_compile_flags\";\n@@ -217,13 +252,15 @@ proc libjava_arguments {{mode compile}} {\n \tif {[file exists $d/$x/libtool]} then {\n \t    # We have to run silently to avoid DejaGNU lossage.\n \t    lappend args \\\n-\t      \"compiler=$d/$x/libtool --silent --mode=$mode $GCJ_UNDER_TEST\"\n+\t      \"compiler=$d/$x/libtool --silent --mode=$mode $GCJ_UNDER_TEST -B$objdir/../\"\n \t    set found_compiler 1\n \t    break\n \t}\n     }\n     if {! $found_compiler} {\n-\tlappend args \"compiler=$GCJ_UNDER_TEST\"\n+\t# Append -B$objdir/../ so that we find libgcj.spec before it\n+\t# is installed.\n+\tlappend args \"compiler=$GCJ_UNDER_TEST -B$objdir/../\"\n     }\n \n     return $args"}, {"sha": "398b6704c84c44c273104442b645fa852327096d", "filename": "libjava/testsuite/libjava.mauve/mauve.exp", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f67f48f90c767a2a8371bc4ddb5034a202e7488/libjava%2Ftestsuite%2Flibjava.mauve%2Fmauve.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f67f48f90c767a2a8371bc4ddb5034a202e7488/libjava%2Ftestsuite%2Flibjava.mauve%2Fmauve.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.mauve%2Fmauve.exp?ref=5f67f48f90c767a2a8371bc4ddb5034a202e7488", "patch": "@@ -49,7 +49,7 @@ proc mauve_compute_uses {aName} {\n \n # Run all the Mauve tests.\n proc test_mauve {} {\n-  global srcdir subdir env\n+  global srcdir objdir subdir env\n \n   if {! [info exists env(MAUVEDIR)]} then {\n     verbose \"MAUVEDIR not set; not running Mauve tests\"\n@@ -65,6 +65,26 @@ proc test_mauve {} {\n   set full_srcdir [pwd]\n   cd $here/mauve-build\n \n+    global env\n+    global GCJ_UNDER_TEST\n+    global TOOL_EXECUTABLE\n+\n+    if ![info exists GCJ_UNDER_TEST] {\n+\tif [info exists TOOL_EXECUTABLE] {\n+\t    set GCJ_UNDER_TEST $TOOL_EXECUTABLE;\n+\t} else {\n+\t    if [info exists env(GCJ)] {\n+\t\tset GCJ_UNDER_TEST env(GCJ)\n+\t    } else {\n+\t\tset GCJ_UNDER_TEST \"[find_gcj]\"\n+\t    }\n+\t}\n+    }\n+\n+    # Append -B and -I so that libgcj.spec and libgcj.zip are found\n+    # before they're installed.\n+    set env(GCJ) \"$GCJ_UNDER_TEST -B$objdir/../ -I$objdir/../libgcj.zip\"\n+\n   if {[catch {system \"$env(MAUVEDIR)/configure --with-gcj\"} msg]} then {\n     fail \"Mauve configure\"\n     verbose \"configure failed with $msg\""}]}