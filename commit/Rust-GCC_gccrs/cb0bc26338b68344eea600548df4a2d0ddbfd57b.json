{"sha": "cb0bc26338b68344eea600548df4a2d0ddbfd57b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2IwYmMyNjMzOGI2ODM0NGVlYTYwMDU0OGRmNGEyZDBkZGJmZDU3Yg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-10-19T18:00:12Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-10-19T18:00:12Z"}, "message": "re PR rtl-optimization/12612 (ICE when using log function with -O3 -ffast-math)\n\n\n\t* i386.c (print_reg): Do not abort on certain registers.\n\n\tPR optimization/12612\n\t* reg-stack.c (subst_stack_regs_pat):  Use st(1) for clobbers.\n\t* i386.md (fpatan, fyl2x, fscale patterns and expanders): Use\n\tmatch_scratch; avoid bogus paralles.\n\n\tPR target/12674\n\t* i386.c (ix86_function_regparm): Disable implicit register passing\n\tconventions when profiling.\n\nFrom-SVN: r72681", "tree": {"sha": "b6522ed71889f4b4ed32a56e2a6c2f0de61d337b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6522ed71889f4b4ed32a56e2a6c2f0de61d337b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb0bc26338b68344eea600548df4a2d0ddbfd57b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb0bc26338b68344eea600548df4a2d0ddbfd57b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb0bc26338b68344eea600548df4a2d0ddbfd57b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb0bc26338b68344eea600548df4a2d0ddbfd57b/comments", "author": null, "committer": null, "parents": [{"sha": "707e58b1a72bcb33fdd7cbd50833599c53f74652", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/707e58b1a72bcb33fdd7cbd50833599c53f74652", "html_url": "https://github.com/Rust-GCC/gccrs/commit/707e58b1a72bcb33fdd7cbd50833599c53f74652"}], "stats": {"total": 159, "additions": 83, "deletions": 76}, "files": [{"sha": "f65329cac4c6ea1b72ba61f93793af2d24c9f929", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb0bc26338b68344eea600548df4a2d0ddbfd57b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb0bc26338b68344eea600548df4a2d0ddbfd57b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cb0bc26338b68344eea600548df4a2d0ddbfd57b", "patch": "@@ -1,3 +1,16 @@\n+2003-10-19  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.c (print_reg): Do not abort on certain registers.\n+\n+\tPR optimization/12612\n+\t* reg-stack.c (subst_stack_regs_pat):  Use st(1) for clobbers.\n+\t* i386.md (fpatan, fyl2x, fscale patterns and expanders): Use\n+\tmatch_scratch; avoid bogus paralles.\n+\n+\tPR target/12674\n+\t* i386.c (ix86_function_regparm): Disable implicit register passing\n+\tconventions when profiling.\n+\n 2003-10-19  Eric Botcazou  <ebotcazou@libertysurf.fr>\n             Richard Henderson  <rth@redhat.com>\n "}, {"sha": "edc8c0e6863ea5005f96cfde710ef4d08672036a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb0bc26338b68344eea600548df4a2d0ddbfd57b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb0bc26338b68344eea600548df4a2d0ddbfd57b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=cb0bc26338b68344eea600548df4a2d0ddbfd57b", "patch": "@@ -1688,7 +1688,7 @@ ix86_function_regparm (tree type, tree decl)\n \n       /* Use register calling convention for local functions when possible.  */\n       if (!TARGET_64BIT && !user_convention && decl\n-\t  && flag_unit_at_a_time)\n+\t  && flag_unit_at_a_time && !profile_flag)\n \t{\n \t  struct cgraph_local_info *i = cgraph_local_info (decl);\n \t  if (i && i->local)\n@@ -6884,12 +6884,6 @@ put_condition_code (enum rtx_code code, enum machine_mode mode, int reverse,\n void\n print_reg (rtx x, int code, FILE *file)\n {\n-  if (REGNO (x) == ARG_POINTER_REGNUM\n-      || REGNO (x) == FRAME_POINTER_REGNUM\n-      || REGNO (x) == FLAGS_REG\n-      || REGNO (x) == FPSR_REG)\n-    abort ();\n-\n   if (ASSEMBLER_DIALECT == ASM_ATT || USER_LABEL_PREFIX[0] == 0)\n     putc ('%', file);\n "}, {"sha": "863dce5a4db3b7ee1bf50f20468521f9ea7af3f3", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 68, "deletions": 68, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb0bc26338b68344eea600548df4a2d0ddbfd57b/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb0bc26338b68344eea600548df4a2d0ddbfd57b/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=cb0bc26338b68344eea600548df4a2d0ddbfd57b", "patch": "@@ -15609,11 +15609,11 @@\n    (set_attr \"mode\" \"XF\")])\n \n (define_insn \"atan2df3_1\"\n-  [(parallel [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t\t   (unspec:DF [(match_operand:DF 2 \"register_operand\" \"0\")\n-\t\t\t       (match_operand:DF 1 \"register_operand\" \"u\")]\n-\t\t    UNSPEC_FPATAN))\n-\t      (clobber (match_dup 1))])]\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+\t(unspec:DF [(match_operand:DF 2 \"register_operand\" \"0\")\n+\t\t    (match_operand:DF 1 \"register_operand\" \"u\")]\n+\t\t   UNSPEC_FPATAN))\n+   (clobber (match_scratch:DF 3 \"=1\"))]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n    && flag_unsafe_math_optimizations\"\n   \"fpatan\"\n@@ -15634,11 +15634,11 @@\n })\n \n (define_insn \"atan2sf3_1\"\n-  [(parallel [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t\t   (unspec:SF [(match_operand:SF 2 \"register_operand\" \"0\")\n-\t\t\t       (match_operand:SF 1 \"register_operand\" \"u\")]\n-\t\t    UNSPEC_FPATAN))\n-\t      (clobber (match_dup 1))])]\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+        (unspec:SF [(match_operand:SF 2 \"register_operand\" \"0\")\n+\t\t    (match_operand:SF 1 \"register_operand\" \"u\")]\n+\t\t   UNSPEC_FPATAN))\n+   (clobber (match_scratch:SF 3 \"=1\"))]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n    && flag_unsafe_math_optimizations\"\n   \"fpatan\"\n@@ -15659,11 +15659,11 @@\n })\n \n (define_insn \"atan2xf3_1\"\n-  [(parallel [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n-\t\t   (unspec:XF [(match_operand:XF 2 \"register_operand\" \"0\")\n-\t\t\t       (match_operand:XF 1 \"register_operand\" \"u\")]\n-\t\t    UNSPEC_FPATAN))\n-\t      (clobber (match_dup 1))])]\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n+        (unspec:XF [(match_operand:XF 2 \"register_operand\" \"0\")\n+\t            (match_operand:XF 1 \"register_operand\" \"u\")]\n+\t           UNSPEC_FPATAN))\n+   (clobber (match_scratch:XF 3 \"=1\"))]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n    && flag_unsafe_math_optimizations && ! TARGET_128BIT_LONG_DOUBLE\"\n   \"fpatan\"\n@@ -15684,11 +15684,11 @@\n })\n \n (define_insn \"atan2tf3_1\"\n-  [(parallel [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n-\t\t   (unspec:TF [(match_operand:TF 2 \"register_operand\" \"0\")\n-\t\t\t       (match_operand:TF 1 \"register_operand\" \"u\")]\n-\t\t    UNSPEC_FPATAN))\n-\t      (clobber (match_dup 1))])]\n+  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n+        (unspec:TF [(match_operand:TF 2 \"register_operand\" \"0\")\n+\t\t    (match_operand:TF 1 \"register_operand\" \"u\")]\n+\t\t   UNSPEC_FPATAN))\n+   (clobber (match_scratch:TF 3 \"=1\"))]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n    && flag_unsafe_math_optimizations && TARGET_128BIT_LONG_DOUBLE\"\n   \"fpatan\"\n@@ -15709,11 +15709,11 @@\n })\n \n (define_insn \"*fyl2x_sfxf3\"\n-  [(parallel [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t\t   (unspec:SF [(match_operand:SF 2 \"register_operand\" \"0\")\n-\t\t\t       (match_operand 1 \"register_operand\" \"u\")]\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+         (unspec:SF [(match_operand:SF 2 \"register_operand\" \"0\")\n+\t\t     (match_operand 1 \"register_operand\" \"u\")]\n \t\t    UNSPEC_FYL2X))\n-\t      (clobber (match_dup 1))])]\n+   (clobber (match_scratch:SF 3 \"=1\"))]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n    && flag_unsafe_math_optimizations\n    && GET_MODE (operands[1]) == (TARGET_128BIT_LONG_DOUBLE ? TFmode : XFmode)\"\n@@ -15722,11 +15722,11 @@\n    (set_attr \"mode\" \"SF\")])\n \n (define_insn \"*fyl2x_dfxf3\"\n-  [(parallel [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t\t   (unspec:DF [(match_operand:DF 2 \"register_operand\" \"0\")\n-\t\t\t       (match_operand 1 \"register_operand\" \"u\")]\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+         (unspec:DF [(match_operand:DF 2 \"register_operand\" \"0\")\n+\t\t     (match_operand 1 \"register_operand\" \"u\")]\n \t\t    UNSPEC_FYL2X))\n-\t      (clobber (match_dup 1))])]\n+   (clobber (match_scratch:DF 3 \"=1\"))]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n    && flag_unsafe_math_optimizations\n    && GET_MODE (operands[1]) == (TARGET_128BIT_LONG_DOUBLE ? TFmode : XFmode)\"\n@@ -15735,23 +15735,23 @@\n    (set_attr \"mode\" \"DF\")])\n \n (define_insn \"*fyl2x_xf3\"\n-  [(parallel [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n-\t\t   (unspec:XF [(match_operand:XF 2 \"register_operand\" \"0\")\n-\t\t\t       (match_operand:XF 1 \"register_operand\" \"u\")]\n-\t\t    UNSPEC_FYL2X))\n-\t      (clobber (match_dup 1))])]\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n+        (unspec:XF [(match_operand:XF 2 \"register_operand\" \"0\")\n+\t\t    (match_operand:XF 1 \"register_operand\" \"u\")]\n+\t           UNSPEC_FYL2X))\n+   (clobber (match_scratch:XF 3 \"=1\"))]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n    && flag_unsafe_math_optimizations && !TARGET_128BIT_LONG_DOUBLE\"\n   \"fyl2x\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"XF\")])\n \n (define_insn \"*fyl2x_tfxf3\"\n-  [(parallel [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n-\t\t   (unspec:TF [(match_operand:TF 2 \"register_operand\" \"0\")\n-\t\t\t       (match_operand:TF 1 \"register_operand\" \"u\")]\n+  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n+\t(unspec:TF [(match_operand:TF 2 \"register_operand\" \"0\")\n+\t\t    (match_operand:TF 1 \"register_operand\" \"u\")]\n \t\t    UNSPEC_FYL2X))\n-\t      (clobber (match_dup 1))])]\n+   (clobber (match_scratch:TF 3 \"=1\"))]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n    && flag_unsafe_math_optimizations && TARGET_128BIT_LONG_DOUBLE\"\n   \"fyl2x\"\n@@ -15762,7 +15762,7 @@\n   [(parallel [(set (match_operand:SF 0 \"register_operand\" \"\")\n \t\t   (unspec:SF [(match_operand:SF 1 \"register_operand\" \"\")\n \t\t\t       (match_dup 2)] UNSPEC_FYL2X))\n-\t      (clobber (match_dup 2))])]\n+\t      (clobber (match_scratch:SF 3 \"\"))])]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n    && flag_unsafe_math_optimizations\"\n {\n@@ -15777,7 +15777,7 @@\n   [(parallel [(set (match_operand:DF 0 \"register_operand\" \"\")\n \t\t   (unspec:DF [(match_operand:DF 1 \"register_operand\" \"\")\n \t\t\t       (match_dup 2)] UNSPEC_FYL2X))\n-\t      (clobber (match_dup 2))])]\n+\t      (clobber (match_scratch:DF 3 \"\"))])]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n    && flag_unsafe_math_optimizations\"\n {\n@@ -15792,7 +15792,7 @@\n   [(parallel [(set (match_operand:XF 0 \"register_operand\" \"\")\n \t\t   (unspec:XF [(match_operand:XF 1 \"register_operand\" \"\")\n \t\t\t       (match_dup 2)] UNSPEC_FYL2X))\n-\t      (clobber (match_dup 2))])]\n+\t      (clobber (match_scratch:XF 3 \"\"))])]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n    && flag_unsafe_math_optimizations && !TARGET_128BIT_LONG_DOUBLE\"\n {\n@@ -15807,7 +15807,7 @@\n   [(parallel [(set (match_operand:TF 0 \"register_operand\" \"\")\n \t\t   (unspec:TF [(match_operand:TF 1 \"register_operand\" \"\")\n \t\t\t       (match_dup 2)] UNSPEC_FYL2X))\n-\t      (clobber (match_dup 2))])]\n+\t      (clobber (match_scratch:TF 3 \"\"))])]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n    && flag_unsafe_math_optimizations && TARGET_128BIT_LONG_DOUBLE\"\n {\n@@ -15819,11 +15819,11 @@\n })\n \n (define_insn \"*fscale_sfxf3\"\n-  [(parallel [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t\t   (unspec:SF [(match_operand 2 \"register_operand\" \"0\")\n-\t\t\t       (match_operand 1 \"register_operand\" \"u\")]\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+\t (unspec:SF [(match_operand 2 \"register_operand\" \"0\")\n+\t\t     (match_operand 1 \"register_operand\" \"u\")]\n \t\t    UNSPEC_FSCALE))\n-\t      (clobber (match_dup 1))])]\n+   (clobber (match_scratch:SF 3 \"=1\"))]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n    && flag_unsafe_math_optimizations\n    && GET_MODE (operands[1]) == (TARGET_128BIT_LONG_DOUBLE ? TFmode : XFmode)\n@@ -15833,11 +15833,11 @@\n    (set_attr \"mode\" \"SF\")])\n \n (define_insn \"*fscale_dfxf3\"\n-  [(parallel [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t\t   (unspec:DF [(match_operand 2 \"register_operand\" \"0\")\n-\t\t\t       (match_operand 1 \"register_operand\" \"u\")]\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+\t (unspec:DF [(match_operand 2 \"register_operand\" \"0\")\n+\t\t     (match_operand 1 \"register_operand\" \"u\")]\n \t\t    UNSPEC_FSCALE))\n-\t      (clobber (match_dup 1))])]\n+   (clobber (match_scratch:DF 3 \"=1\"))]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n    && flag_unsafe_math_optimizations\n    && GET_MODE (operands[1]) == (TARGET_128BIT_LONG_DOUBLE ? TFmode : XFmode)\n@@ -15847,23 +15847,23 @@\n    (set_attr \"mode\" \"DF\")])\n \n (define_insn \"*fscale_xf3\"\n-  [(parallel [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n-\t\t   (unspec:XF [(match_operand:XF 2 \"register_operand\" \"0\")\n-\t\t\t       (match_operand:XF 1 \"register_operand\" \"u\")]\n-\t\t    UNSPEC_FSCALE))\n-\t      (clobber (match_dup 1))])]\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n+\t(unspec:XF [(match_operand:XF 2 \"register_operand\" \"0\")\n+\t\t    (match_operand:XF 1 \"register_operand\" \"u\")]\n+\t           UNSPEC_FSCALE))\n+   (clobber (match_scratch:XF 3 \"=1\"))]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n    && flag_unsafe_math_optimizations && !TARGET_128BIT_LONG_DOUBLE\"\n   \"fscale\\;fstp\\t%y1\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"XF\")])\n \n (define_insn \"*fscale_tf3\"\n-  [(parallel [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n-\t\t   (unspec:TF [(match_operand:TF 2 \"register_operand\" \"0\")\n-\t\t\t       (match_operand:TF 1 \"register_operand\" \"u\")]\n-\t\t    UNSPEC_FSCALE))\n-\t      (clobber (match_dup 1))])]\n+  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n+\t(unspec:TF [(match_operand:TF 2 \"register_operand\" \"0\")\n+\t\t    (match_operand:TF 1 \"register_operand\" \"u\")]\n+\t\t   UNSPEC_FSCALE))\n+   (clobber (match_scratch:TF 3 \"=1\"))]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n    && flag_unsafe_math_optimizations && TARGET_128BIT_LONG_DOUBLE\"\n   \"fscale\\;fstp\\t%y1\"\n@@ -15920,7 +15920,7 @@\n    (set (match_dup 9) (plus:XF (match_dup 7) (match_dup 8)))\n    (parallel [(set (match_operand:SF 0 \"register_operand\" \"\")\n \t\t   (unspec:SF [(match_dup 9) (match_dup 5)] UNSPEC_FSCALE))\n-\t      (clobber (match_dup 5))])]\n+\t      (clobber (match_scratch:SF 5 \"\"))])]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n    && flag_unsafe_math_optimizations\"\n {\n@@ -15950,7 +15950,7 @@\n    (set (match_dup 9) (plus:TF (match_dup 7) (match_dup 8)))\n    (parallel [(set (match_operand:SF 0 \"register_operand\" \"\")\n \t\t   (unspec:SF [(match_dup 9) (match_dup 5)] UNSPEC_FSCALE))\n-\t      (clobber (match_dup 5))])]\n+\t      (clobber (match_scratch:SF 5 \"\"))])]\n   \"\"\n {\n   rtx temp;\n@@ -15973,7 +15973,7 @@\n    (set (match_dup 9) (plus:XF (match_dup 7) (match_dup 8)))\n    (parallel [(set (match_operand:DF 0 \"register_operand\" \"\")\n \t\t   (unspec:DF [(match_dup 9) (match_dup 5)] UNSPEC_FSCALE))\n-\t      (clobber (match_dup 5))])]\n+\t      (clobber (match_scratch:DF 5 \"\"))])]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n    && flag_unsafe_math_optimizations\"\n {\n@@ -16004,7 +16004,7 @@\n    (set (match_dup 9) (plus:TF (match_dup 7) (match_dup 8)))\n    (parallel [(set (match_operand:DF 0 \"register_operand\" \"\")\n \t\t   (unspec:DF [(match_dup 9) (match_dup 5)] UNSPEC_FSCALE))\n-\t      (clobber (match_dup 5))])]\n+\t      (clobber (match_scratch:DF 5 \"\"))])]\n    \"\"\n {\n   rtx temp;\n@@ -16026,7 +16026,7 @@\n    (set (match_dup 8) (plus:XF (match_dup 6) (match_dup 7)))\n    (parallel [(set (match_operand:XF 0 \"register_operand\" \"\")\n \t\t   (unspec:XF [(match_dup 8) (match_dup 4)] UNSPEC_FSCALE))\n-\t      (clobber (match_dup 4))])]\n+\t      (clobber (match_scratch:XF 5 \"\"))])]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n    && flag_unsafe_math_optimizations && !TARGET_128BIT_LONG_DOUBLE\"\n {\n@@ -16062,7 +16062,7 @@\n    (set (match_dup 8) (plus:TF (match_dup 6) (match_dup 7)))\n    (parallel [(set (match_operand:TF 0 \"register_operand\" \"\")\n \t\t   (unspec:TF [(match_dup 8) (match_dup 4)] UNSPEC_FSCALE))\n-\t      (clobber (match_dup 4))])]\n+\t      (clobber (match_scratch:TF 5 \"\"))])]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n    && flag_unsafe_math_optimizations && TARGET_128BIT_LONG_DOUBLE\"\n {\n@@ -16081,7 +16081,7 @@\n \t\t   (unspec:DF [(match_dup 2)\n \t\t\t       (match_operand:DF 1 \"register_operand\" \"\")]\n \t\t    UNSPEC_FPATAN))\n-\t      (clobber (match_dup 1))])]\n+\t      (clobber (match_scratch:DF 3 \"\"))])]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n    && flag_unsafe_math_optimizations\"\n {\n@@ -16094,7 +16094,7 @@\n \t\t   (unspec:XF [(match_dup 2)\n \t\t\t       (match_operand:XF 1 \"register_operand\" \"\")]\n \t\t    UNSPEC_FPATAN))\n-\t      (clobber (match_dup 1))])]\n+\t      (clobber (match_scratch:XF 3 \"\"))])]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n    && flag_unsafe_math_optimizations && !TARGET_128BIT_LONG_DOUBLE\"\n {\n@@ -16107,7 +16107,7 @@\n \t\t   (unspec:TF [(match_dup 2)\n \t\t\t       (match_operand:TF 1 \"register_operand\" \"\")]\n \t\t    UNSPEC_FPATAN))\n-\t      (clobber (match_dup 1))])]\n+\t      (clobber (match_scratch:TF 3 \"\"))])]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n    && flag_unsafe_math_optimizations && TARGET_128BIT_LONG_DOUBLE\"\n {"}, {"sha": "fe1bc23ff48a003bacc2e517e4ac0bb652b3b15e", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb0bc26338b68344eea600548df4a2d0ddbfd57b/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb0bc26338b68344eea600548df4a2d0ddbfd57b/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=cb0bc26338b68344eea600548df4a2d0ddbfd57b", "patch": "@@ -1430,7 +1430,7 @@ subst_stack_regs_pat (rtx insn, stack regstack, rtx pat)\n \t\t      abort ();\n \t\t  }\n \t\tremove_note (insn, note);\n-\t\treplace_reg (dest, LAST_STACK_REG);\n+\t\treplace_reg (dest, FIRST_STACK_REG + 1);\n \t      }\n \t    else\n \t      {"}]}