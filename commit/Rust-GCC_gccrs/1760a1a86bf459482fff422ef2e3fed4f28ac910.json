{"sha": "1760a1a86bf459482fff422ef2e3fed4f28ac910", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc2MGExYTg2YmY0NTk0ODJmZmY0MjJlZjJlM2ZlZDRmMjhhYzkxMA==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2007-06-30T13:06:45Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2007-06-30T13:06:45Z"}, "message": "re PR testsuite/25241 ([C++] DejaGNU does not distinguish between errors and warnings)\n\n2007-06-30  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\tPR testsuite/25241\ntestsuite/\n\t* gcc.dg/cpp/20000625-1.c: Without dg-options the default is\n\t-pedantic-errors, so we should match errors.\n\t* gcc.dg/cpp/escape-1.c: Likewise.\n\t* gcc.dg/cpp/charconst.c: Empty character constants are errors.\n\t* gcc.dg/cpp/direct2.c: This is a mandatory error instead of a\n\twarning.\n\t* gcc.dg/cpp/endif-pedantic2.c: Use -pedantic-errors to obtain\n\terrors instead of warnings.\n\t* gcc.dg/cpp/extratokens.c: Use dg-warning instead of dg-error for\n\ta pedantic warning.\n\t* gcc.dg/cpp/arith-3.c: Likewise.\n\nFrom-SVN: r126146", "tree": {"sha": "0bf10e90290c83a4cb2b7735b8feebb6cc540856", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bf10e90290c83a4cb2b7735b8feebb6cc540856"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1760a1a86bf459482fff422ef2e3fed4f28ac910", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1760a1a86bf459482fff422ef2e3fed4f28ac910", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1760a1a86bf459482fff422ef2e3fed4f28ac910", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1760a1a86bf459482fff422ef2e3fed4f28ac910/comments", "author": null, "committer": null, "parents": [{"sha": "72eb00bc31e1d1cd7fac7f24a3b1f105c9e0551e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72eb00bc31e1d1cd7fac7f24a3b1f105c9e0551e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72eb00bc31e1d1cd7fac7f24a3b1f105c9e0551e"}], "stats": {"total": 58, "additions": 37, "deletions": 21}, "files": [{"sha": "f97e1e06d8e9ffd63ff65a6e039a4b40b751ed4a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1760a1a86bf459482fff422ef2e3fed4f28ac910/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1760a1a86bf459482fff422ef2e3fed4f28ac910/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1760a1a86bf459482fff422ef2e3fed4f28ac910", "patch": "@@ -1,3 +1,18 @@\n+2007-06-30  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR testsuite/25241\n+\t* gcc.dg/cpp/20000625-1.c: Without dg-options the default is\n+\t-pedantic-errors, so we should match errors.\n+\t* gcc.dg/cpp/escape-1.c: Likewise.\n+\t* gcc.dg/cpp/charconst.c: Empty character constants are errors.\n+\t* gcc.dg/cpp/direct2.c: This is a mandatory error instead of a\n+\twarning.\n+\t* gcc.dg/cpp/endif-pedantic2.c: Use -pedantic-errors to obtain\n+\terrors instead of warnings.\n+\t* gcc.dg/cpp/extratokens.c: Use dg-warning instead of dg-error for\n+\ta pedantic warning.\n+\t* gcc.dg/cpp/arith-3.c: Likewise.\n+\n 2007-06-30  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR testsuite/25241"}, {"sha": "01ce98bf628e921dbe3651eeee4f6354197ac804", "filename": "gcc/testsuite/gcc.dg/cpp/20000625-1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1760a1a86bf459482fff422ef2e3fed4f28ac910/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F20000625-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1760a1a86bf459482fff422ef2e3fed4f28ac910/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F20000625-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F20000625-1.c?ref=1760a1a86bf459482fff422ef2e3fed4f28ac910", "patch": "@@ -1,3 +1,4 @@\n+\n /* Regression test for paste corner cases.  Distilled from\n    syscall stub logic in glibc.  */\n \n@@ -11,6 +12,6 @@ main(void)\n {\n   goto socket;\n \n-  ENTRY(socket) /* { dg-warning \"valid preprocessing token\" \"\" } */\n+  ENTRY(socket) /* { dg-error \"valid preprocessing token\" \"\" } */\n     return 0;\n }"}, {"sha": "cc5fd1b3bf7bef74162c6a921a56f697538260f1", "filename": "gcc/testsuite/gcc.dg/cpp/arith-3.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1760a1a86bf459482fff422ef2e3fed4f28ac910/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Farith-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1760a1a86bf459482fff422ef2e3fed4f28ac910/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Farith-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Farith-3.c?ref=1760a1a86bf459482fff422ef2e3fed4f28ac910", "patch": "@@ -143,13 +143,13 @@\n \n #if UTARG_MAX\t\t\t/* { dg-warning \"so large\" }  */\n #endif\n-#if UTARG_MAX_PLUS_1\t\t/* { dg-error \"too large\" }  */\n+#if UTARG_MAX_PLUS_1\t\t/* { dg-warning \"too large\" }  */\n #endif\n-#if UTARG_MAX_PLUS_1_HEX\t/* { dg-error \"too large\" }  */\n+#if UTARG_MAX_PLUS_1_HEX\t/* { dg-warning \"too large\" }  */\n #endif\n #if UTARG_MAX_HEX\t\t/* { dg-bogus \"too large\" }  */\n #endif\n-#if UTARG_MAX_PLUS_1_OCT\t/* { dg-error \"too large\" }  */\n+#if UTARG_MAX_PLUS_1_OCT\t/* { dg-warning \"too large\" }  */\n #endif\n #if UTARG_MAX_OCT\t\t/* { dg-bogus \"too large\" }  */\n #endif"}, {"sha": "8934d6a6721db7a131b5367589c9d40cb788d4b3", "filename": "gcc/testsuite/gcc.dg/cpp/charconst.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1760a1a86bf459482fff422ef2e3fed4f28ac910/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcharconst.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1760a1a86bf459482fff422ef2e3fed4f28ac910/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcharconst.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcharconst.c?ref=1760a1a86bf459482fff422ef2e3fed4f28ac910", "patch": "@@ -7,9 +7,9 @@\n \n    Neil Booth, 22 May 2001.  */\n \n-#if ''\t\t\t/* { dg-warning \"empty\" \"empty charconst\" } */\n+#if ''\t\t\t/* { dg-error \"empty\" \"empty charconst\" } */\n #endif\n-#if L''\t\t\t/* { dg-warning \"empty\" \"empty wide charconst\" } */\n+#if L''\t\t\t/* { dg-error \"empty\" \"empty wide charconst\" } */\n #endif\n #if 'very long'\t\t/* { dg-warning \"too long\" \"long charconst\" } */\n #endif\n@@ -24,8 +24,8 @@ void foo ()\n   int c;\n   __WCHAR_TYPE__ w;\n \n-  c = '';\t\t/* { dg-warning \"empty\" \"empty charconst\" } */\n-  w = L'';\t\t/* { dg-warning \"empty\" \"empty wide charconst\" } */\n+  c = '';\t\t/* { dg-error \"empty\" \"empty charconst\" } */\n+  w = L'';\t\t/* { dg-error \"empty\" \"empty wide charconst\" } */\n \n   c = 'very long';\t/* { dg-warning \"too long\" \"long charconst\" } */\n   w = L'very long';\t/* { dg-warning \"too long\" \"long wide charconst\" } */"}, {"sha": "5ea04da37a1175ea998ca93b7ee5ac346dc2a622", "filename": "gcc/testsuite/gcc.dg/cpp/direct2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1760a1a86bf459482fff422ef2e3fed4f28ac910/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdirect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1760a1a86bf459482fff422ef2e3fed4f28ac910/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdirect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdirect2.c?ref=1760a1a86bf459482fff422ef2e3fed4f28ac910", "patch": "@@ -43,4 +43,4 @@ void f ()\n #define starslash *##/\n \n slashstar starslash /* { dg-error \"parse error|syntax error|expected\" \"not a comment\" } */\n-/* { dg-warning \"does not give\" \"paste warning(s)\" { target *-*-* } 45 } */\n+/* { dg-error \"does not give\" \"paste warning(s)\" { target *-*-* } 45 } */"}, {"sha": "55cc5eb6670f6e971f31afb49cea11b76978bd62", "filename": "gcc/testsuite/gcc.dg/cpp/endif-pedantic2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1760a1a86bf459482fff422ef2e3fed4f28ac910/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fendif-pedantic2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1760a1a86bf459482fff422ef2e3fed4f28ac910/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fendif-pedantic2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fendif-pedantic2.c?ref=1760a1a86bf459482fff422ef2e3fed4f28ac910", "patch": "@@ -1,7 +1,7 @@\n /* Copyright (C) 2002 Free Software Foundation, Inc.  */\n \n /* { dg-do preprocess } */\n-/* { dg-options \"-Wno-endif-labels -pedantic\" } */\n+/* { dg-options \"-Wno-endif-labels -pedantic-errors\" } */\n \n /* Tests combinations of -pedantic and -Wno-endif-labels; see extratokens2.c\n    for more general tests.  */"}, {"sha": "0f5c11e9ab3dda2285e8db8026d89c0e60e1f389", "filename": "gcc/testsuite/gcc.dg/cpp/escape-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1760a1a86bf459482fff422ef2e3fed4f28ac910/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fescape-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1760a1a86bf459482fff422ef2e3fed4f28ac910/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fescape-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fescape-1.c?ref=1760a1a86bf459482fff422ef2e3fed4f28ac910", "patch": "@@ -9,11 +9,11 @@\n \n #if '\\x'\t/* { dg-error \"no following\" \"\\x with no digits\" } */\n #endif\n-#if '\\x400'\t/* { dg-warning \"out of range\" \"\\x out of range\" } */\n+#if '\\x400'\t/* { dg-error \"out of range\" \"\\x out of range\" } */\n #endif\n #if '\\x0ff'\t/* { dg-bogus \"out of range\" \"\\x out of range\" } */\n #endif\n-#if '\\400'\t/* { dg-warning \"out of range\" \"\\x out of range\" } */\n+#if '\\400'\t/* { dg-error \"out of range\" \"\\x out of range\" } */\n #endif\n #if '\\377'\t/* { dg-bogus \"out of range\" \"bogus \\x out of range\" } */\n #endif\n@@ -30,9 +30,9 @@ void foo ()\n   int c;\n \n   c = '\\x';\t/* { dg-error \"no following\" \"\\x with no digits\" } */\n-  c = '\\x100';\t/* { dg-warning \"out of range\" \"\\x out of range\" } */\n+  c = '\\x100';\t/* { dg-error \"out of range\" \"\\x out of range\" } */\n   c = '\\x0ff';\t/* { dg-bogus \"out of range\" \"\\x out of range\" } */\n-  c = '\\400';\t/* { dg-warning \"out of range\" \"\\x out of range\" } */\n+  c = '\\400';\t/* { dg-error \"out of range\" \"\\x out of range\" } */\n   c = '\\377';\t/* { dg-bogus \"out of range\" \"bogus \\x out of range\" } */\n   c = '\\0377';\t/* { dg-warning \"multi\" \"too long octal\" } */\n   c = '\\p';\t/* { dg-error \"unknown escape\" \"unknown escape seq\" } */"}, {"sha": "ffbe7df3c516f9e847254c706f37b821cf2bf9c7", "filename": "gcc/testsuite/gcc.dg/cpp/extratokens.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1760a1a86bf459482fff422ef2e3fed4f28ac910/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fextratokens.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1760a1a86bf459482fff422ef2e3fed4f28ac910/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fextratokens.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fextratokens.c?ref=1760a1a86bf459482fff422ef2e3fed4f28ac910", "patch": "@@ -9,10 +9,10 @@\n /* Source: Neil Booth, 4 Dec 2000.  The combination of separate test\n    cases.  */\n \n-#ifdef foo bar  /* { dg-error \"extra tokens\" \"tokens after #ifdef\" } */\n+#ifdef foo bar  /* { dg-warning \"extra tokens\" \"tokens after #ifdef\" } */\n #endif\n \n-#ifndef foo bar  /* { dg-error \"extra tokens\" \"tokens after #ifndef\" } */\n+#ifndef foo bar  /* { dg-warning \"extra tokens\" \"tokens after #ifndef\" } */\n #endif\n \n #if 1 \n@@ -21,15 +21,15 @@\n #endif /\t/* { dg-warning \"extra tokens\" \"tokens after #endif\" } */\n #endif\n \n-#undef foo bar  /* { dg-error \"extra tokens\" \"tokens after #undef\" } */\n+#undef foo bar  /* { dg-warning \"extra tokens\" \"tokens after #undef\" } */\n \n-#assert foo(bar) bar /* { dg-error \"extra tokens\" \"tokens after #assert\" } */\n+#assert foo(bar) bar /* { dg-warning \"extra tokens\" \"tokens after #assert\" } */\n \n-#unassert foo(bar) b /* { dg-error \"extra tokens\" \"tokens after #unassert\" } */\n+#unassert foo(bar) b /* { dg-warning \"extra tokens\" \"tokens after #unassert\" } */\n \n-#include \"mi1c.h\" bar /* { dg-error \"extra tokens\" \"tokens after #include\" } */\n+#include \"mi1c.h\" bar /* { dg-warning \"extra tokens\" \"tokens after #include\" } */\n \n-#ident \"something\" bar /* { dg-error \"extra tokens\" \"tokens after #ident\" } */\n+#ident \"something\" bar /* { dg-warning \"extra tokens\" \"tokens after #ident\" } */\n \n # 36 \"file.c\" 3\n "}]}