{"sha": "1071bcbdf8aae725654a6af0378112c351ee0d71", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA3MWJjYmRmOGFhZTcyNTY1NGE2YWYwMzc4MTEyYzM1MWVlMGQ3MQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2007-04-21T06:48:37Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2007-04-21T06:48:37Z"}, "message": "gcse.c (store_killed_in_insn): Handle PARALLELs.\n\ngcc/ChangeLog:\n* gcse.c (store_killed_in_insn): Handle PARALLELs.\n(store_killed_in_pat): New.\ngcc/testsuite/ChangeLog:\n* gcc.target/i386/movsi-sm-1.c: New.\n\nFrom-SVN: r124015", "tree": {"sha": "453b4b811e202e10cc059d2b5983b89bee93f6fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/453b4b811e202e10cc059d2b5983b89bee93f6fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1071bcbdf8aae725654a6af0378112c351ee0d71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1071bcbdf8aae725654a6af0378112c351ee0d71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1071bcbdf8aae725654a6af0378112c351ee0d71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1071bcbdf8aae725654a6af0378112c351ee0d71/comments", "author": null, "committer": null, "parents": [{"sha": "c7a2139bef08cdc8fde38d3d59d88fd2c689e681", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7a2139bef08cdc8fde38d3d59d88fd2c689e681", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7a2139bef08cdc8fde38d3d59d88fd2c689e681"}], "stats": {"total": 109, "additions": 85, "deletions": 24}, "files": [{"sha": "cc3d7ab394367c5ee5fbec841f45ebe65967e5b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1071bcbdf8aae725654a6af0378112c351ee0d71/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1071bcbdf8aae725654a6af0378112c351ee0d71/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1071bcbdf8aae725654a6af0378112c351ee0d71", "patch": "@@ -1,3 +1,8 @@\n+2007-04-21  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* gcse.c (store_killed_in_insn): Handle PARALLELs.\n+\t(store_killed_in_pat): New.\n+\n 2007-04-20  Richard Henderson  <rth@redhat.com>\n \n \tPR target/31628"}, {"sha": "70c89ef95fc6dc4c9039dbd6783df1b092ab4931", "filename": "gcc/gcse.c", "status": "modified", "additions": 45, "deletions": 24, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1071bcbdf8aae725654a6af0378112c351ee0d71/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1071bcbdf8aae725654a6af0378112c351ee0d71/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=1071bcbdf8aae725654a6af0378112c351ee0d71", "patch": "@@ -5909,14 +5909,47 @@ find_loads (rtx x, rtx store_pattern, int after)\n   return ret;\n }\n \n+static inline bool\n+store_killed_in_pat (rtx x, rtx pat, int after)\n+{\n+  if (GET_CODE (pat) == SET)\n+    {\n+      rtx dest = SET_DEST (pat);\n+\n+      if (GET_CODE (dest) == ZERO_EXTRACT)\n+\tdest = XEXP (dest, 0);\n+\n+      /* Check for memory stores to aliased objects.  */\n+      if (MEM_P (dest)\n+\t  && !expr_equiv_p (dest, x))\n+\t{\n+\t  if (after)\n+\t    {\n+\t      if (output_dependence (dest, x))\n+\t\treturn true;\n+\t    }\n+\t  else\n+\t    {\n+\t      if (output_dependence (x, dest))\n+\t\treturn true;\n+\t    }\n+\t}\n+    }\n+\n+  if (find_loads (pat, x, after))\n+    return true;\n+\n+  return false;\n+}\n+\n /* Check if INSN kills the store pattern X (is aliased with it).\n    AFTER is true if we are checking the case when store X occurs\n    after the insn.  Return true if it does.  */\n \n static bool\n store_killed_in_insn (rtx x, rtx x_regs, rtx insn, int after)\n {\n-  rtx reg, base, note;\n+  rtx reg, base, note, pat;\n \n   if (!INSN_P (insn))\n     return false;\n@@ -5943,32 +5976,20 @@ store_killed_in_insn (rtx x, rtx x_regs, rtx insn, int after)\n       return false;\n     }\n \n-  if (GET_CODE (PATTERN (insn)) == SET)\n+  pat = PATTERN (insn);\n+  if (GET_CODE (pat) == SET)\n     {\n-      rtx pat = PATTERN (insn);\n-      rtx dest = SET_DEST (pat);\n-\n-      if (GET_CODE (dest) == ZERO_EXTRACT)\n-\tdest = XEXP (dest, 0);\n-\n-      /* Check for memory stores to aliased objects.  */\n-      if (MEM_P (dest)\n-\t  && !expr_equiv_p (dest, x))\n-\t{\n-\t  if (after)\n-\t    {\n-\t      if (output_dependence (dest, x))\n-\t\treturn true;\n-\t    }\n-\t  else\n-\t    {\n-\t      if (output_dependence (x, dest))\n-\t\treturn true;\n-\t    }\n-\t}\n-      if (find_loads (SET_SRC (pat), x, after))\n+      if (store_killed_in_pat (x, pat, after))\n \treturn true;\n     }\n+  else if (GET_CODE (pat) == PARALLEL)\n+    {\n+      int i;\n+\n+      for (i = 0; i < XVECLEN (pat, 0); i++)\n+\tif (store_killed_in_pat (x, XVECEXP (pat, 0, i), after))\n+\t  return true;\n+    }\n   else if (find_loads (PATTERN (insn), x, after))\n     return true;\n "}, {"sha": "00af7d427657aec7699156b0afbb83c16d6f88a3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1071bcbdf8aae725654a6af0378112c351ee0d71/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1071bcbdf8aae725654a6af0378112c351ee0d71/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1071bcbdf8aae725654a6af0378112c351ee0d71", "patch": "@@ -1,3 +1,7 @@\n+2007-04-21  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* gcc.target/i386/movsi-sm-1.c: New.\n+\n 2007-04-20  Richard Henderson  <rth@redhat.com>\n \n \t* gcc.dg/pr28796-2.c: Add -mieee for alpha."}, {"sha": "35941405d9105c68facf94f908d7f4be18b88117", "filename": "gcc/testsuite/gcc.target/i386/movsi-sm-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1071bcbdf8aae725654a6af0378112c351ee0d71/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmovsi-sm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1071bcbdf8aae725654a6af0378112c351ee0d71/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmovsi-sm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmovsi-sm-1.c?ref=1071bcbdf8aae725654a6af0378112c351ee0d71", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fgcse-sm -minline-all-stringops\" } */\n+\n+/* Store motion used to fail to recognize killed expressions within\n+   parallels such as those generated for memory copying.  */\n+\n+static const char s[1024] __attribute__ ((__aligned__ (32)))\n+  = \"This is what we should get!\";\n+\n+int bug (int arg) {\n+  char str[sizeof(s) > 4 ? sizeof(s) : 4] __attribute__ ((__aligned__ (32)));\n+\n+  __builtin_memcpy (str, \"Bug\", 4);\n+\n+  if (arg <= 2)\n+    __builtin_memcpy (str, s, sizeof (s));\n+\n+  if (arg <= 1)\n+    __builtin_memcpy (str, \"Err\", 4);\n+\n+  __builtin_puts (str);\n+\n+  return str[0] != s[0];\n+}\n+\n+int main () {\n+  if (bug (2))\n+    __builtin_abort ();\n+\n+  return 0;\n+}"}]}