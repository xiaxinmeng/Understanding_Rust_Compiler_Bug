{"sha": "c2654dede78617240167efedcb6cf2242c0d1d70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI2NTRkZWRlNzg2MTcyNDAxNjdlZmVkY2I2Y2YyMjQyYzBkMWQ3MA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-03-25T23:17:26Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-03-25T23:17:26Z"}, "message": "expr.c (emit_block_move_via_movmem): Only use 6 operand variant if there are exactly 6 operands.\n\n        * expr.c (emit_block_move_via_movmem): Only use 6 operand variant\n        if there are exactly 6 operands.\n        (set_storage_via_setmem): Similarly.\n\nFrom-SVN: r171532", "tree": {"sha": "82345cadd98ed953ce4775edcaa47dbf2d931de3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82345cadd98ed953ce4775edcaa47dbf2d931de3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2654dede78617240167efedcb6cf2242c0d1d70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2654dede78617240167efedcb6cf2242c0d1d70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2654dede78617240167efedcb6cf2242c0d1d70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2654dede78617240167efedcb6cf2242c0d1d70/comments", "author": null, "committer": null, "parents": [{"sha": "e3e08a1db5d35f7872683d6eb5ac8e08d9c9168c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3e08a1db5d35f7872683d6eb5ac8e08d9c9168c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3e08a1db5d35f7872683d6eb5ac8e08d9c9168c"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "040a83c0416f42f59be2d0030d6b202a6924f04c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2654dede78617240167efedcb6cf2242c0d1d70/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2654dede78617240167efedcb6cf2242c0d1d70/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c2654dede78617240167efedcb6cf2242c0d1d70", "patch": "@@ -1,3 +1,9 @@\n+2011-03-25  Richard Henderson  <rth@redhat.com>\n+\n+\t* expr.c (emit_block_move_via_movmem): Only use 6 operand variant\n+\tif there are exactly 6 operands.\n+\t(set_storage_via_setmem): Similarly.\n+\n 2011-03-25  Kai Tietz  <ktietz@redhat.com>\n \n \t* collect2.c (write_c_file_stat): Handle backslash"}, {"sha": "076b8d2f0a4b1b3432a825efa23ee9867bf6e38c", "filename": "gcc/expr.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2654dede78617240167efedcb6cf2242c0d1d70/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2654dede78617240167efedcb6cf2242c0d1d70/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=c2654dede78617240167efedcb6cf2242c0d1d70", "patch": "@@ -1294,16 +1294,20 @@ emit_block_move_via_movmem (rtx x, rtx y, rtx size, unsigned int align,\n \t     that it doesn't fail the expansion because it thinks\n \t     emitting the libcall would be more efficient.  */\n \t  nops = insn_data[(int) code].n_operands;\n+\t  /* ??? n_operands includes match_scratches; find some other\n+\t     way to select the 6 operand variant, or force all targets\n+\t     to have exactly 6 operands.  */\n+\t  gcc_assert (nops >= 4 && nops <= 6);\n+\n \t  create_fixed_operand (&ops[0], x);\n \t  create_fixed_operand (&ops[1], y);\n \t  /* The check above guarantees that this size conversion is valid.  */\n \t  create_convert_operand_to (&ops[2], size, mode, true);\n \t  create_integer_operand (&ops[3], align / BITS_PER_UNIT);\n-\t  if (nops != 4)\n+\t  if (nops == 6)\n \t    {\n \t      create_integer_operand (&ops[4], expected_align / BITS_PER_UNIT);\n \t      create_integer_operand (&ops[5], expected_size);\n-\t      nops = 6;\n \t    }\n \t  if (maybe_expand_insn (code, nops, ops))\n \t    {\n@@ -2716,16 +2720,20 @@ set_storage_via_setmem (rtx object, rtx size, rtx val, unsigned int align,\n \t  unsigned int nops;\n \n \t  nops = insn_data[(int) code].n_operands;\n+\t  /* ??? n_operands includes match_scratches; find some other\n+\t     way to select the 6 operand variant, or force all targets\n+\t     to have exactly 6 operands.  */\n+\t  gcc_assert (nops >= 4 && nops <= 6);\n+\n \t  create_fixed_operand (&ops[0], object);\n \t  /* The check above guarantees that this size conversion is valid.  */\n \t  create_convert_operand_to (&ops[1], size, mode, true);\n \t  create_convert_operand_from (&ops[2], val, byte_mode, true);\n \t  create_integer_operand (&ops[3], align / BITS_PER_UNIT);\n-\t  if (nops != 4)\n+\t  if (nops == 6)\n \t    {\n \t      create_integer_operand (&ops[4], expected_align / BITS_PER_UNIT);\n \t      create_integer_operand (&ops[5], expected_size);\n-\t      nops = 6;\n \t    }\n \t  if (maybe_expand_insn (code, nops, ops))\n \t    return true;"}]}