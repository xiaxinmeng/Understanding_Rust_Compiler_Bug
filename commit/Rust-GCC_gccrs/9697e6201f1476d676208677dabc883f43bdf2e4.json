{"sha": "9697e6201f1476d676208677dabc883f43bdf2e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY5N2U2MjAxZjE0NzZkNjc2MjA4Njc3ZGFiYzg4M2Y0M2JkZjJlNA==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2013-04-25T12:47:18Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2013-04-25T12:47:18Z"}, "message": "[AArch64] Make vabs<q>_f<32, 64> a tree/gimple intrinsic.\n\ngcc/\n\t* config/aarch64/aarch64-builtins.c\n\t(aarch64_fold_builtin): New.\n\t* config/aarch64/aarch64-protos.h (aarch64_fold_builtin): New.\n\t* config/aarch64/aarch64.c (TARGET_FOLD_BUILTIN): Define.\n\t* config/aarch64/aarch64-simd-builtins.def (abs): New.\n\t* config/aarch64/arm_neon.h\n\t(vabs<q>_<f32, 64>): Implement using __builtin_aarch64_fabs.\n\nFrom-SVN: r198305", "tree": {"sha": "1266289e2ef233252c2694b56f89da7391acdb6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1266289e2ef233252c2694b56f89da7391acdb6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9697e6201f1476d676208677dabc883f43bdf2e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9697e6201f1476d676208677dabc883f43bdf2e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9697e6201f1476d676208677dabc883f43bdf2e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9697e6201f1476d676208677dabc883f43bdf2e4/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0ac198d3baa27f4c0ac3befd3a9bc802947ae29c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ac198d3baa27f4c0ac3befd3a9bc802947ae29c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ac198d3baa27f4c0ac3befd3a9bc802947ae29c"}], "stats": {"total": 88, "additions": 55, "deletions": 33}, "files": [{"sha": "2e2181e76d9483bebc91d5cb02c49e857b138dfe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9697e6201f1476d676208677dabc883f43bdf2e4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9697e6201f1476d676208677dabc883f43bdf2e4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9697e6201f1476d676208677dabc883f43bdf2e4", "patch": "@@ -1,3 +1,13 @@\n+2013-04-25  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c\n+\t(aarch64_fold_builtin): New.\n+\t* config/aarch64/aarch64-protos.h (aarch64_fold_builtin): New.\n+\t* config/aarch64/aarch64.c (TARGET_FOLD_BUILTIN): Define.\n+\t* config/aarch64/aarch64-simd-builtins.def (abs): New.\n+\t* config/aarch64/arm_neon.h\n+\t(vabs<q>_<f32, 64>): Implement using __builtin_aarch64_fabs.\n+\n 2013-04-25  James Greenhalgh  <james.greenhalgh@arm.com>\n \t    Tejas Belagod  <tejas.belagod@arm.com>\n "}, {"sha": "2851e2b10140b98964fff94879ddafae632b592e", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9697e6201f1476d676208677dabc883f43bdf2e4/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9697e6201f1476d676208677dabc883f43bdf2e4/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=9697e6201f1476d676208677dabc883f43bdf2e4", "patch": "@@ -1260,6 +1260,25 @@ aarch64_builtin_vectorized_function (tree fndecl, tree type_out, tree type_in)\n #define VAR1(T, N, MAP, A) \\\n   case AARCH64_SIMD_BUILTIN_##N##A:\n \n+tree\n+aarch64_fold_builtin (tree fndecl, int n_args ATTRIBUTE_UNUSED, tree *args,\n+\t\t      bool ignore ATTRIBUTE_UNUSED)\n+{\n+  int fcode = DECL_FUNCTION_CODE (fndecl);\n+  tree type = TREE_TYPE (TREE_TYPE (fndecl));\n+\n+  switch (fcode)\n+    {\n+      BUILTIN_VDQF (UNOP, abs, 2)\n+\treturn fold_build1 (ABS_EXPR, type, args[0]);\n+\tbreak;\n+      default:\n+\tbreak;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n bool\n aarch64_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n {"}, {"sha": "c09b227f85a4ab03fd0c65b73d934eb5e67b1af6", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9697e6201f1476d676208677dabc883f43bdf2e4/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9697e6201f1476d676208677dabc883f43bdf2e4/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=9697e6201f1476d676208677dabc883f43bdf2e4", "patch": "@@ -179,6 +179,7 @@ rtx aarch64_simd_gen_const_vector_dup (enum machine_mode, int);\n bool aarch64_simd_mem_operand_p (rtx);\n rtx aarch64_simd_vect_par_cnst_half (enum machine_mode, bool);\n rtx aarch64_tls_get_addr (void);\n+tree aarch64_fold_builtin (tree, int, tree *, bool);\n unsigned aarch64_dbx_register_number (unsigned);\n unsigned aarch64_trampoline_size (void);\n void aarch64_asm_output_labelref (FILE *, const char *);"}, {"sha": "a06a6fb2974e75897429d140d594715c83fed4a7", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9697e6201f1476d676208677dabc883f43bdf2e4/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9697e6201f1476d676208677dabc883f43bdf2e4/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=9697e6201f1476d676208677dabc883f43bdf2e4", "patch": "@@ -282,3 +282,5 @@\n \n   BUILTIN_VDQF (UNOP, frecpe, 0)\n   BUILTIN_VDQF (BINOP, frecps, 0)\n+\n+  BUILTIN_VDQF (UNOP, abs, 2)"}, {"sha": "d2a495dbc626bd3118c52980544157b4c8dfd5b4", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9697e6201f1476d676208677dabc883f43bdf2e4/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9697e6201f1476d676208677dabc883f43bdf2e4/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=9697e6201f1476d676208677dabc883f43bdf2e4", "patch": "@@ -7874,6 +7874,9 @@ aarch64_vectorize_vec_perm_const_ok (enum machine_mode vmode,\n #undef TARGET_EXPAND_BUILTIN_VA_START\n #define TARGET_EXPAND_BUILTIN_VA_START aarch64_expand_builtin_va_start\n \n+#undef TARGET_FOLD_BUILTIN\n+#define TARGET_FOLD_BUILTIN aarch64_fold_builtin\n+\n #undef TARGET_FUNCTION_ARG\n #define TARGET_FUNCTION_ARG aarch64_function_arg\n "}, {"sha": "6f5ca8ec6d64716232d091a226d830e88e1ce206", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 20, "deletions": 33, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9697e6201f1476d676208677dabc883f43bdf2e4/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9697e6201f1476d676208677dabc883f43bdf2e4/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=9697e6201f1476d676208677dabc883f43bdf2e4", "patch": "@@ -4468,17 +4468,6 @@ vabds_f32 (float32_t a, float32_t b)\n   return result;\n }\n \n-__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n-vabs_f32 (float32x2_t a)\n-{\n-  float32x2_t result;\n-  __asm__ (\"fabs %0.2s,%1.2s\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n __extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n vabs_s8 (int8x8_t a)\n {\n@@ -4512,28 +4501,6 @@ vabs_s32 (int32x2_t a)\n   return result;\n }\n \n-__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n-vabsq_f32 (float32x4_t a)\n-{\n-  float32x4_t result;\n-  __asm__ (\"fabs %0.4s,%1.4s\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n-vabsq_f64 (float64x2_t a)\n-{\n-  float64x2_t result;\n-  __asm__ (\"fabs %0.2d,%1.2d\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n __extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n vabsq_s8 (int8x16_t a)\n {\n@@ -19717,6 +19684,26 @@ vtbx4_p8 (poly8x8_t r, poly8x8x4_t tab, uint8x8_t idx)\n \n /* Start of optimal implementations in approved order.  */\n \n+/* vabs  */\n+\n+__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n+vabs_f32 (float32x2_t __a)\n+{\n+  return __builtin_aarch64_absv2sf (__a);\n+}\n+\n+__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n+vabsq_f32 (float32x4_t __a)\n+{\n+  return __builtin_aarch64_absv4sf (__a);\n+}\n+\n+__extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n+vabsq_f64 (float64x2_t __a)\n+{\n+  return __builtin_aarch64_absv2df (__a);\n+}\n+\n /* vadd */\n \n __extension__ static __inline int64x1_t __attribute__ ((__always_inline__))"}]}