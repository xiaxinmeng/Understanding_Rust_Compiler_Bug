{"sha": "74890d7bbdacf14edfcd1e50bac0e5053a2bdf53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ4OTBkN2JiZGFjZjE0ZWRmY2QxZTUwYmFjMGU1MDUzYTJiZGY1Mw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2007-01-28T03:48:41Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2007-01-28T03:48:41Z"}, "message": "fold-const.c (size_binop): In the fast-paths for X+0...\n\n\n\t* fold-const.c (size_binop): In the fast-paths for X+0, 0+X, X-0 and\n\t1*X check that the constant hasn't overflowed, to preserve the\n\tTREE_OVERFLOW bit.\n\t(round_up): Provide an efficient implementation when rouding-up an\n\tINTEGER_CST to a power-of-two.\n\n\t* gcc-dg/large-size-array-3.c: New test case.\n\nFrom-SVN: r121252", "tree": {"sha": "79ff0e900f4c8f77577ddfd6116f7f43015bdc5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79ff0e900f4c8f77577ddfd6116f7f43015bdc5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74890d7bbdacf14edfcd1e50bac0e5053a2bdf53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74890d7bbdacf14edfcd1e50bac0e5053a2bdf53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74890d7bbdacf14edfcd1e50bac0e5053a2bdf53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74890d7bbdacf14edfcd1e50bac0e5053a2bdf53/comments", "author": null, "committer": null, "parents": [{"sha": "5e851559ad1c6b61d9b13b62a6f5bb536c5fbca1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e851559ad1c6b61d9b13b62a6f5bb536c5fbca1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e851559ad1c6b61d9b13b62a6f5bb536c5fbca1"}], "stats": {"total": 90, "additions": 79, "deletions": 11}, "files": [{"sha": "2f0b43957c7e44ce4fb4a6e9d3d3c2b260ea3488", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74890d7bbdacf14edfcd1e50bac0e5053a2bdf53/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74890d7bbdacf14edfcd1e50bac0e5053a2bdf53/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=74890d7bbdacf14edfcd1e50bac0e5053a2bdf53", "patch": "@@ -1,3 +1,11 @@\n+2007-01-27  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* fold-const.c (size_binop): In the fast-paths for X+0, 0+X, X-0 and\n+\t1*X check that the constant hasn't overflowed, to preserve the\n+\tTREE_OVERFLOW bit.\n+\t(round_up): Provide an efficient implementation when rouding-up an\n+\tINTEGER_CST to a power-of-two.\n+\n 2007-01-28  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* doc/sourcebuild.texi: Add comma for clarity."}, {"sha": "b6065871ffd15af5bfa3ecdf8d62df67720120b4", "filename": "gcc/fold-const.c", "status": "modified", "additions": 47, "deletions": 11, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74890d7bbdacf14edfcd1e50bac0e5053a2bdf53/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74890d7bbdacf14edfcd1e50bac0e5053a2bdf53/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=74890d7bbdacf14edfcd1e50bac0e5053a2bdf53", "patch": "@@ -1815,13 +1815,23 @@ size_binop (enum tree_code code, tree arg0, tree arg1)\n   if (TREE_CODE (arg0) == INTEGER_CST && TREE_CODE (arg1) == INTEGER_CST)\n     {\n       /* And some specific cases even faster than that.  */\n-      if (code == PLUS_EXPR && integer_zerop (arg0))\n-\treturn arg1;\n-      else if ((code == MINUS_EXPR || code == PLUS_EXPR)\n-\t       && integer_zerop (arg1))\n-\treturn arg0;\n-      else if (code == MULT_EXPR && integer_onep (arg0))\n-\treturn arg1;\n+      if (code == PLUS_EXPR)\n+\t{\n+\t  if (integer_zerop (arg0) && !TREE_OVERFLOW (arg0))\n+\t    return arg1;\n+\t  if (integer_zerop (arg1) && !TREE_OVERFLOW (arg1))\n+\t    return arg0;\n+\t}\n+      else if (code == MINUS_EXPR)\n+\t{\n+\t  if (integer_zerop (arg1) && !TREE_OVERFLOW (arg1))\n+\t    return arg0;\n+\t}\n+      else if (code == MULT_EXPR)\n+\t{\n+\t  if (integer_onep (arg0) && !TREE_OVERFLOW (arg0))\n+\t    return arg1;\n+\t}\n \n       /* Handle general case of two integer constants.  */\n       return int_const_binop (code, arg0, arg1, 0);\n@@ -13505,10 +13515,36 @@ round_up (tree value, int divisor)\n     {\n       tree t;\n \n-      t = build_int_cst (TREE_TYPE (value), divisor - 1);\n-      value = size_binop (PLUS_EXPR, value, t);\n-      t = build_int_cst (TREE_TYPE (value), -divisor);\n-      value = size_binop (BIT_AND_EXPR, value, t);\n+      if (TREE_CODE (value) == INTEGER_CST)\n+\t{\n+\t  unsigned HOST_WIDE_INT low = TREE_INT_CST_LOW (value);\n+\t  HOST_WIDE_INT high;\n+\n+\t  if ((low & (divisor - 1)) == 0)\n+\t    return value;\n+\n+\t  high = TREE_INT_CST_HIGH (value);\n+\t  low &= ~(divisor - 1);\n+\t  low += divisor;\n+\t  if (low == 0)\n+\t    high++;\n+\n+\t  t = build_int_cst_wide_type (TREE_TYPE (value), low, high);\n+\t  if ((TREE_OVERFLOW (value) || integer_zerop (t))\n+\t      && !TREE_OVERFLOW (t))\n+\t    {\n+\t      t = copy_node (t);\n+\t      TREE_OVERFLOW (t) = 1;\n+\t    }\n+\t  return t;\n+\t}\n+      else\n+\t{\n+\t  t = build_int_cst (TREE_TYPE (value), divisor - 1);\n+\t  value = size_binop (PLUS_EXPR, value, t);\n+\t  t = build_int_cst (TREE_TYPE (value), -divisor);\n+\t  value = size_binop (BIT_AND_EXPR, value, t);\n+\t}\n     }\n   else\n     {"}, {"sha": "9ed1d06b7ba65bd9384466d6397b0207f79ebf68", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74890d7bbdacf14edfcd1e50bac0e5053a2bdf53/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74890d7bbdacf14edfcd1e50bac0e5053a2bdf53/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=74890d7bbdacf14edfcd1e50bac0e5053a2bdf53", "patch": "@@ -1,3 +1,7 @@\n+2007-01-27  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gcc-dg/large-size-array-3.c: New test case.\n+\n 2007-01-27  Roger Sayle  <roger@eyesopen.com>\n \n \t* gfortran.dg/forall_7.f90: New test case."}, {"sha": "954e28e5fda8265c2fd7fe2b037498e3090b8d85", "filename": "gcc/testsuite/gcc.dg/large-size-array-3.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74890d7bbdacf14edfcd1e50bac0e5053a2bdf53/gcc%2Ftestsuite%2Fgcc.dg%2Flarge-size-array-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74890d7bbdacf14edfcd1e50bac0e5053a2bdf53/gcc%2Ftestsuite%2Fgcc.dg%2Flarge-size-array-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flarge-size-array-3.c?ref=74890d7bbdacf14edfcd1e50bac0e5053a2bdf53", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+\n+#ifdef __LP64__\n+#define DIM UINT_MAX>>1\n+#else\n+#define DIM 65536\n+#endif\n+\n+int\n+sub (int *a)\n+{\n+  return a[0];\n+}\n+\n+int\n+main (void)\n+{\n+  int a[DIM][DIM];  /* { dg-error \"size of array 'a' is too large\" } */\n+  return sub (&a[0][0]);\n+}"}]}