{"sha": "086715fa04fd8af089d052db7c8f599326805a17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg2NzE1ZmEwNGZkOGFmMDg5ZDA1MmRiN2M4ZjU5OTMyNjgwNWExNw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-01-03T04:39:40Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-01-03T04:39:40Z"}, "message": "* gcc.c-torture/compile/20010102-1.c: New test.\n\nFrom-SVN: r38646", "tree": {"sha": "0f77473ee1e0608a51424e03027c1b9fec5c642c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f77473ee1e0608a51424e03027c1b9fec5c642c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/086715fa04fd8af089d052db7c8f599326805a17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/086715fa04fd8af089d052db7c8f599326805a17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/086715fa04fd8af089d052db7c8f599326805a17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/086715fa04fd8af089d052db7c8f599326805a17/comments", "author": null, "committer": null, "parents": [{"sha": "ec0b0e0e13896ccc055c9d20968995984a594ab3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec0b0e0e13896ccc055c9d20968995984a594ab3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec0b0e0e13896ccc055c9d20968995984a594ab3"}], "stats": {"total": 105, "additions": 105, "deletions": 0}, "files": [{"sha": "e591e1bd4d5663a3589c45c1ab3cf4726abd7fbb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/086715fa04fd8af089d052db7c8f599326805a17/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/086715fa04fd8af089d052db7c8f599326805a17/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=086715fa04fd8af089d052db7c8f599326805a17", "patch": "@@ -1,3 +1,7 @@\n+2001-01-02  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.c-torture/compile/20010102-1.c: New test.\n+\n 2001-01-02  Andreas Jaeger  <aj@suse.de>\n \n \t* gcc.dg/noreturn-3.c: New test."}, {"sha": "a409b566098f51c72bb9d3f1c11e7f03b262a922", "filename": "gcc/testsuite/gcc.c-torture/compile/20010102-1.c", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/086715fa04fd8af089d052db7c8f599326805a17/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010102-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/086715fa04fd8af089d052db7c8f599326805a17/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010102-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010102-1.c?ref=086715fa04fd8af089d052db7c8f599326805a17", "patch": "@@ -0,0 +1,101 @@\n+/* This testcase derives from gnu obstack.c/obstack.h and failed with\n+   -O3 -funroll-all-loops, or -O1 -frename-registers -funroll-loops on\n+   sparc-sun-solaris2.7.\n+\n+   Copyright (C) 2001  Free Software Foundation.  */\n+\n+# define PTR_INT_TYPE __PTRDIFF_TYPE__\n+\n+struct _obstack_chunk\n+{\n+  char  *limit;\n+  struct _obstack_chunk *prev;\n+  char\tcontents[4];\n+};\n+\n+struct obstack\n+{\n+  long\tchunk_size;\n+  struct _obstack_chunk *chunk;\n+  char\t*object_base;\n+  char\t*next_free;\n+  char\t*chunk_limit;\n+  PTR_INT_TYPE temp;\n+  int   alignment_mask;\n+  struct _obstack_chunk *(*chunkfun) (void *, long);\n+  void (*freefun) (void *, struct _obstack_chunk *);\n+  void *extra_arg;\n+  unsigned use_extra_arg:1;\n+  unsigned maybe_empty_object:1;\n+  unsigned alloc_failed:1;\n+};\n+\n+extern void _obstack_newchunk (struct obstack *, int);\n+\n+struct fooalign {char x; double d;};\n+#define DEFAULT_ALIGNMENT  \\\n+  ((PTR_INT_TYPE) ((char *) &((struct fooalign *) 0)->d - (char *) 0))\n+union fooround {long x; double d;};\n+#define DEFAULT_ROUNDING (sizeof (union fooround))\n+\n+#ifndef COPYING_UNIT\n+#define COPYING_UNIT int\n+#endif\n+\n+#define CALL_CHUNKFUN(h, size) \\\n+  (((h) -> use_extra_arg) \\\n+   ? (*(h)->chunkfun) ((h)->extra_arg, (size)) \\\n+   : (*(struct _obstack_chunk *(*) (long)) (h)->chunkfun) ((size)))\n+\n+#define CALL_FREEFUN(h, old_chunk) \\\n+  do { \\\n+    if ((h) -> use_extra_arg) \\\n+      (*(h)->freefun) ((h)->extra_arg, (old_chunk)); \\\n+    else \\\n+      (*(void (*) (void *)) (h)->freefun) ((old_chunk)); \\\n+  } while (0)\n+\n+void\n+_obstack_newchunk (h, length)\n+     struct obstack *h;\n+     int length;\n+{\n+  register struct _obstack_chunk *old_chunk = h->chunk;\n+  register struct _obstack_chunk *new_chunk;\n+  register long\tnew_size;\n+  register long obj_size = h->next_free - h->object_base;\n+  register long i;\n+  long already;\n+\n+  new_size = (obj_size + length) + (obj_size >> 3) + 100;\n+  if (new_size < h->chunk_size)\n+    new_size = h->chunk_size;\n+\n+  new_chunk = CALL_CHUNKFUN (h, new_size);\n+  h->chunk = new_chunk;\n+  new_chunk->prev = old_chunk;\n+  new_chunk->limit = h->chunk_limit = (char *) new_chunk + new_size;\n+\n+  if (h->alignment_mask + 1 >= DEFAULT_ALIGNMENT)\n+    {\n+      for (i = obj_size / sizeof (COPYING_UNIT) - 1;\n+\t   i >= 0; i--)\n+\t((COPYING_UNIT *)new_chunk->contents)[i]\n+\t  = ((COPYING_UNIT *)h->object_base)[i];\n+      already = obj_size / sizeof (COPYING_UNIT) * sizeof (COPYING_UNIT);\n+    }\n+  else\n+    already = 0;\n+  for (i = already; i < obj_size; i++)\n+    new_chunk->contents[i] = h->object_base[i];\n+\n+  if (h->object_base == old_chunk->contents && ! h->maybe_empty_object)\n+    {\n+      new_chunk->prev = old_chunk->prev;\n+      CALL_FREEFUN (h, old_chunk);\n+    }\n+\n+  h->object_base = new_chunk->contents;\n+  h->next_free = h->object_base + obj_size;\n+  h->maybe_empty_object = 0;\n+}"}]}