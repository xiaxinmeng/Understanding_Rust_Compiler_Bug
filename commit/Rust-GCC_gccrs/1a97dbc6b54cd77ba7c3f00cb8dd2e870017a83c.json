{"sha": "1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE5N2RiYzZiNTRjZDc3YmE3YzNmMDBjYjhkZDJlODcwMDE3YTgzYw==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-01-05T17:49:01Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-01-06T10:13:39Z"}, "message": "Examine the Suffix hint on integers to apply apropriate TyTy type.\n\nThis change propagates the PrimitiveCoreType to AST and HIR so\nthe suffix can be examined.", "tree": {"sha": "8fc0819dcb268ce0a36e63d4947563aca056529b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fc0819dcb268ce0a36e63d4947563aca056529b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d590e5d210492444c4a2b69282970d683cf7c8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d590e5d210492444c4a2b69282970d683cf7c8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d590e5d210492444c4a2b69282970d683cf7c8d"}], "stats": {"total": 280, "additions": 197, "deletions": 83}, "files": [{"sha": "5c1289e9579b8b3ec8c459a7e3da88f8506927da", "filename": "gcc/rust/ast/rust-ast-full-test.cc", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-test.cc?ref=1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c", "patch": "@@ -4940,28 +4940,30 @@ MacroParser::parse_literal ()\n     {\n     case CHAR_LITERAL:\n       skip_token ();\n-      return Literal (tok->as_string (), Literal::CHAR);\n+      return Literal (tok->as_string (), Literal::CHAR, tok->get_type_hint ());\n     case STRING_LITERAL:\n       skip_token ();\n-      return Literal (tok->as_string (), Literal::STRING);\n+      return Literal (tok->as_string (), Literal::STRING,\n+\t\t      tok->get_type_hint ());\n     case BYTE_CHAR_LITERAL:\n       skip_token ();\n-      return Literal (tok->as_string (), Literal::BYTE);\n+      return Literal (tok->as_string (), Literal::BYTE, tok->get_type_hint ());\n     case BYTE_STRING_LITERAL:\n       skip_token ();\n-      return Literal (tok->as_string (), Literal::BYTE_STRING);\n+      return Literal (tok->as_string (), Literal::BYTE_STRING,\n+\t\t      tok->get_type_hint ());\n     case INT_LITERAL:\n       skip_token ();\n-      return Literal (tok->as_string (), Literal::INT);\n+      return Literal (tok->as_string (), Literal::INT, tok->get_type_hint ());\n     case FLOAT_LITERAL:\n       skip_token ();\n-      return Literal (tok->as_string (), Literal::FLOAT);\n+      return Literal (tok->as_string (), Literal::FLOAT, tok->get_type_hint ());\n     case TRUE_LITERAL:\n       skip_token ();\n-      return Literal (\"true\", Literal::BOOL);\n+      return Literal (\"true\", Literal::BOOL, tok->get_type_hint ());\n     case FALSE_LITERAL:\n       skip_token ();\n-      return Literal (\"false\", Literal::BOOL);\n+      return Literal (\"false\", Literal::BOOL, tok->get_type_hint ());\n     default:\n       rust_error_at (tok->get_locus (), \"expected literal - found '%s'\",\n \t\t     get_token_description (tok->get_id ()));\n@@ -5284,7 +5286,8 @@ Token::to_token_stream () const\n Attribute\n MetaNameValueStr::to_attribute () const\n {\n-  LiteralExpr lit_expr (str, Literal::LitType::STRING, Location ());\n+  LiteralExpr lit_expr (str, Literal::LitType::STRING,\n+\t\t\tPrimitiveCoreType::CORETYPE_UNKNOWN, Location ());\n   return Attribute (SimplePath::from_str (ident),\n \t\t    std::unique_ptr<AttrInputLiteral> (\n \t\t      new AttrInputLiteral (std::move (lit_expr))));"}, {"sha": "941b2fe70f7936d27af97c0368ed7c183acb768b", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c", "patch": "@@ -212,6 +212,8 @@ class Token : public TokenTree, public MacroMatch\n \n   Location get_locus () const { return locus; }\n \n+  PrimitiveCoreType get_type_hint () const { return type_hint; }\n+\n protected:\n   // No virtual for now as not polymorphic but can be in future\n   /*virtual*/ Token *clone_token_impl () const { return new Token (*this); }\n@@ -250,17 +252,25 @@ struct Literal\n    * (or generics) */\n   std::string value_as_string;\n   LitType type;\n+  PrimitiveCoreType type_hint;\n \n public:\n   std::string as_string () const { return value_as_string; }\n \n   LitType get_lit_type () const { return type; }\n \n-  Literal (std::string value_as_string, LitType type)\n-    : value_as_string (std::move (value_as_string)), type (type)\n+  PrimitiveCoreType get_type_hint () const { return type_hint; }\n+\n+  Literal (std::string value_as_string, LitType type,\n+\t   PrimitiveCoreType type_hint)\n+    : value_as_string (std::move (value_as_string)), type (type),\n+      type_hint (type_hint)\n   {}\n \n-  static Literal create_error () { return Literal (\"\", CHAR); }\n+  static Literal create_error ()\n+  {\n+    return Literal (\"\", CHAR, PrimitiveCoreType::CORETYPE_UNKNOWN);\n+  }\n \n   // Returns whether literal is in an invalid state.\n   bool is_error () const { return value_as_string == \"\"; }"}, {"sha": "8baf7b7431cad1053751420d21f56ff2095694b1", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c", "patch": "@@ -50,10 +50,10 @@ class LiteralExpr : public ExprWithoutBlock\n   Literal::LitType get_lit_type () const { return literal.get_lit_type (); }\n \n   LiteralExpr (std::string value_as_string, Literal::LitType type,\n-\t       Location locus,\n+\t       PrimitiveCoreType type_hint, Location locus,\n \t       std::vector<Attribute> outer_attrs = std::vector<Attribute> ())\n     : ExprWithoutBlock (std::move (outer_attrs)),\n-      literal (std::move (value_as_string), type), locus (locus)\n+      literal (std::move (value_as_string), type, type_hint), locus (locus)\n   {}\n \n   LiteralExpr (Literal literal, Location locus,"}, {"sha": "e89fc625677b7e0203d9f886499dd22f1caa7479", "filename": "gcc/rust/ast/rust-pattern.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c/gcc%2Frust%2Fast%2Frust-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c/gcc%2Frust%2Fast%2Frust-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-pattern.h?ref=1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c", "patch": "@@ -47,8 +47,8 @@ class LiteralPattern : public Pattern\n \n   LiteralPattern (std::string val, Literal::LitType type, Location locus,\n \t\t  bool has_minus = false)\n-    : lit (Literal (std::move (val), type)), has_minus (has_minus),\n-      locus (locus)\n+    : lit (Literal (std::move (val), type, PrimitiveCoreType::CORETYPE_STR)),\n+      has_minus (has_minus), locus (locus)\n   {}\n \n   Location get_locus () const { return locus; }"}, {"sha": "f4e467a868eb281bc40c1e954b67f259bd79d6fc", "filename": "gcc/rust/backend/rust-compile-tyty.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h?ref=1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c", "patch": "@@ -111,6 +111,18 @@ class TyTyCompile : public TyTy::TyVisitor\n \t  = backend->named_type (\"i32\", backend->integer_type (false, 32),\n \t\t\t\t Linemap::predeclared_location ());\n \treturn;\n+\n+      case TyTy::IntType::I64:\n+\ttranslated\n+\t  = backend->named_type (\"i64\", backend->integer_type (false, 64),\n+\t\t\t\t Linemap::predeclared_location ());\n+\treturn;\n+\n+      case TyTy::IntType::I128:\n+\ttranslated\n+\t  = backend->named_type (\"i128\", backend->integer_type (false, 128),\n+\t\t\t\t Linemap::predeclared_location ());\n+\treturn;\n       }\n     gcc_unreachable ();\n   }\n@@ -135,6 +147,18 @@ class TyTyCompile : public TyTy::TyVisitor\n \t  = backend->named_type (\"i32\", backend->integer_type (true, 32),\n \t\t\t\t Linemap::predeclared_location ());\n \treturn;\n+\n+      case TyTy::UintType::U64:\n+\ttranslated\n+\t  = backend->named_type (\"u64\", backend->integer_type (true, 64),\n+\t\t\t\t Linemap::predeclared_location ());\n+\treturn;\n+\n+      case TyTy::UintType::U128:\n+\ttranslated\n+\t  = backend->named_type (\"u128\", backend->integer_type (true, 128),\n+\t\t\t\t Linemap::predeclared_location ());\n+\treturn;\n       }\n     gcc_unreachable ();\n   }"}, {"sha": "87ba0dc1144a0706e649b7b0850f1282984ce725", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c", "patch": "@@ -328,6 +328,7 @@ class ASTLoweringExpr : public ASTLoweringBase\n \t\t\t\t   UNKNOWN_LOCAL_DEFID);\n \n     translated = new HIR::LiteralExpr (mapping, expr.as_string (), type,\n+\t\t\t\t       expr.get_literal ().get_type_hint (),\n \t\t\t\t       expr.get_locus ());\n   }\n "}, {"sha": "dc7ab5a9152349a007dda8e56b9f9c4f21690514", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c", "patch": "@@ -66,10 +66,11 @@ class LiteralExpr : public ExprWithoutBlock\n   Literal::LitType get_lit_type () const { return literal.get_lit_type (); }\n \n   LiteralExpr (Analysis::NodeMapping mappings, std::string value_as_string,\n-\t       Literal::LitType type, Location locus,\n+\t       Literal::LitType type, PrimitiveCoreType type_hint,\n+\t       Location locus,\n \t       std::vector<Attribute> outer_attrs = std::vector<Attribute> ())\n     : ExprWithoutBlock (std::move (mappings), std::move (outer_attrs)),\n-      literal (std::move (value_as_string), type), locus (locus)\n+      literal (std::move (value_as_string), type, type_hint), locus (locus)\n   {}\n \n   LiteralExpr (Analysis::NodeMapping mappings, Literal literal, Location locus,"}, {"sha": "b935376139230b26b01a351fbc8ca7248b6ce2e8", "filename": "gcc/rust/hir/tree/rust-hir-full-test.cc", "status": "modified", "additions": 4, "deletions": 33, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc?ref=1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c", "patch": "@@ -4904,38 +4904,8 @@ DelimTokenTree::to_token_stream () const\n Literal\n MacroParser::parse_literal ()\n {\n-  const std::unique_ptr<Token> &tok = peek_token ();\n-  switch (tok->get_id ())\n-    {\n-    case CHAR_LITERAL:\n-      skip_token ();\n-      return Literal (tok->as_string (), Literal::CHAR);\n-    case STRING_LITERAL:\n-      skip_token ();\n-      return Literal (tok->as_string (), Literal::STRING);\n-    case BYTE_CHAR_LITERAL:\n-      skip_token ();\n-      return Literal (tok->as_string (), Literal::BYTE);\n-    case BYTE_STRING_LITERAL:\n-      skip_token ();\n-      return Literal (tok->as_string (), Literal::BYTE_STRING);\n-    case INT_LITERAL:\n-      skip_token ();\n-      return Literal (tok->as_string (), Literal::INT);\n-    case FLOAT_LITERAL:\n-      skip_token ();\n-      return Literal (tok->as_string (), Literal::FLOAT);\n-    case TRUE_LITERAL:\n-      skip_token ();\n-      return Literal (\"true\", Literal::BOOL);\n-    case FALSE_LITERAL:\n-      skip_token ();\n-      return Literal (\"false\", Literal::BOOL);\n-    default:\n-      rust_error_at (tok->get_locus (), \"expected literal - found '%s'\",\n-\t\t     get_token_description (tok->get_id ()));\n-      return Literal::create_error ();\n-    }\n+  // marcos need to be removed from HIR\n+  gcc_unreachable ();\n }\n \n SimplePath\n@@ -5037,7 +5007,8 @@ Attribute\n MetaNameValueStr::to_attribute () const\n {\n   LiteralExpr lit_expr (Analysis::NodeMapping::get_error (), str,\n-\t\t\tLiteral::LitType::STRING, Location ());\n+\t\t\tLiteral::LitType::STRING,\n+\t\t\tPrimitiveCoreType::CORETYPE_STR, Location ());\n   return Attribute (SimplePath::from_str (ident),\n \t\t    std::unique_ptr<AttrInputLiteral> (\n \t\t      new AttrInputLiteral (std::move (lit_expr))));"}, {"sha": "d18d8db380660eea81ef18d267fe9607fe16fb8b", "filename": "gcc/rust/hir/tree/rust-hir-pattern.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-pattern.h?ref=1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c", "patch": "@@ -47,8 +47,8 @@ class LiteralPattern : public Pattern\n \n   LiteralPattern (std::string val, Literal::LitType type, Location locus,\n \t\t  bool has_minus = false)\n-    : lit (Literal (std::move (val), type)), has_minus (has_minus),\n-      locus (locus)\n+    : lit (Literal (std::move (val), type, PrimitiveCoreType::CORETYPE_STR)),\n+      has_minus (has_minus), locus (locus)\n   {}\n \n   Location get_locus () const { return locus; }"}, {"sha": "7417a32d684c951c34c56c3cb1f2d9477010c4e2", "filename": "gcc/rust/hir/tree/rust-hir.h", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h?ref=1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c", "patch": "@@ -235,21 +235,27 @@ struct Literal\n   };\n \n private:\n-  /* TODO: maybe make subclasses of each type of literal with their typed values\n-   * (or generics) */\n   std::string value_as_string;\n   LitType type;\n+  PrimitiveCoreType type_hint;\n \n public:\n   std::string as_string () const { return value_as_string; }\n \n   LitType get_lit_type () const { return type; }\n \n-  Literal (std::string value_as_string, LitType type)\n-    : value_as_string (std::move (value_as_string)), type (type)\n+  PrimitiveCoreType get_type_hint () const { return type_hint; }\n+\n+  Literal (std::string value_as_string, LitType type,\n+\t   PrimitiveCoreType type_hint)\n+    : value_as_string (std::move (value_as_string)), type (type),\n+      type_hint (type_hint)\n   {}\n \n-  static Literal create_error () { return Literal (\"\", CHAR); }\n+  static Literal create_error ()\n+  {\n+    return Literal (\"\", CHAR, PrimitiveCoreType::CORETYPE_UNKNOWN);\n+  }\n \n   // Returns whether literal is in an invalid state.\n   bool is_error () const { return value_as_string == \"\"; }"}, {"sha": "f6bd0f61455e3670691e444f5fa6442b810534fe", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c", "patch": "@@ -791,7 +791,8 @@ Parser<ManagedTokenSource>::parse_attr_input ()\n \t  }\n \n \t// create actual LiteralExpr\n-\tAST::LiteralExpr lit_expr (t->get_str (), lit_type, t->get_locus ());\n+\tAST::LiteralExpr lit_expr (t->get_str (), lit_type, t->get_type_hint (),\n+\t\t\t\t   t->get_locus ());\n \n \tstd::unique_ptr<AST::AttrInputLiteral> attr_input_lit (\n \t  new AST::AttrInputLiteral (std::move (lit_expr)));\n@@ -7374,7 +7375,8 @@ Parser<ManagedTokenSource>::parse_literal_expr (\n   // create literal based on stuff in switch\n   return std::unique_ptr<AST::LiteralExpr> (\n     new AST::LiteralExpr (std::move (literal_value), std::move (type),\n-\t\t\t  t->get_locus (), std::move (outer_attrs)));\n+\t\t\t  t->get_type_hint (), t->get_locus (),\n+\t\t\t  std::move (outer_attrs)));\n }\n \n // Parses a return expression (including any expression to return).\n@@ -9954,7 +9956,8 @@ Parser<ManagedTokenSource>::parse_literal_or_range_pattern ()\n       lexer.skip_token ();\n       std::unique_ptr<AST::RangePatternBound> lower (\n \tnew AST::RangePatternBoundLiteral (\n-\t  AST::Literal (range_lower->get_str (), type),\n+\t  AST::Literal (range_lower->get_str (), type,\n+\t\t\tPrimitiveCoreType::CORETYPE_UNKNOWN),\n \t  range_lower->get_locus (), has_minus));\n \n       std::unique_ptr<AST::RangePatternBound> upper\n@@ -9995,26 +9998,30 @@ Parser<ManagedTokenSource>::parse_range_pattern_bound ()\n       lexer.skip_token ();\n       return std::unique_ptr<AST::RangePatternBoundLiteral> (\n \tnew AST::RangePatternBoundLiteral (\n-\t  AST::Literal (range_lower->get_str (), AST::Literal::CHAR),\n+\t  AST::Literal (range_lower->get_str (), AST::Literal::CHAR,\n+\t\t\trange_lower->get_type_hint ()),\n \t  range_lower_locus));\n     case BYTE_CHAR_LITERAL:\n       lexer.skip_token ();\n       return std::unique_ptr<AST::RangePatternBoundLiteral> (\n \tnew AST::RangePatternBoundLiteral (\n-\t  AST::Literal (range_lower->get_str (), AST::Literal::BYTE),\n+\t  AST::Literal (range_lower->get_str (), AST::Literal::BYTE,\n+\t\t\trange_lower->get_type_hint ()),\n \t  range_lower_locus));\n     case INT_LITERAL:\n       lexer.skip_token ();\n       return std::unique_ptr<AST::RangePatternBoundLiteral> (\n \tnew AST::RangePatternBoundLiteral (\n-\t  AST::Literal (range_lower->get_str (), AST::Literal::INT),\n+\t  AST::Literal (range_lower->get_str (), AST::Literal::INT,\n+\t\t\trange_lower->get_type_hint ()),\n \t  range_lower_locus));\n     case FLOAT_LITERAL:\n       lexer.skip_token ();\n       fprintf (stderr, \"warning: used deprecated float range pattern bound\");\n       return std::unique_ptr<AST::RangePatternBoundLiteral> (\n \tnew AST::RangePatternBoundLiteral (\n-\t  AST::Literal (range_lower->get_str (), AST::Literal::FLOAT),\n+\t  AST::Literal (range_lower->get_str (), AST::Literal::FLOAT,\n+\t\t\trange_lower->get_type_hint ()),\n \t  range_lower_locus));\n     case MINUS:\n       // branch on next token\n@@ -10025,15 +10032,17 @@ Parser<ManagedTokenSource>::parse_range_pattern_bound ()\n \t  lexer.skip_token (1);\n \t  return std::unique_ptr<AST::RangePatternBoundLiteral> (\n \t    new AST::RangePatternBoundLiteral (\n-\t      AST::Literal (range_lower->get_str (), AST::Literal::INT),\n+\t      AST::Literal (range_lower->get_str (), AST::Literal::INT,\n+\t\t\t    range_lower->get_type_hint ()),\n \t      range_lower_locus, true));\n \tcase FLOAT_LITERAL:\n \t  lexer.skip_token (1);\n \t  fprintf (stderr,\n \t\t   \"warning: used deprecated float range pattern bound\");\n \t  return std::unique_ptr<AST::RangePatternBoundLiteral> (\n \t    new AST::RangePatternBoundLiteral (\n-\t      AST::Literal (range_lower->get_str (), AST::Literal::FLOAT),\n+\t      AST::Literal (range_lower->get_str (), AST::Literal::FLOAT,\n+\t\t\t    range_lower->get_type_hint ()),\n \t      range_lower_locus, true));\n \tdefault:\n \t  rust_error_at (range_lower->get_locus (),\n@@ -12110,22 +12119,24 @@ Parser<ManagedTokenSource>::null_denotation (\n       // encode as int?\n       return std::unique_ptr<AST::LiteralExpr> (\n \tnew AST::LiteralExpr (tok->get_str (), AST::Literal::INT,\n-\t\t\t      tok->get_locus ()));\n+\t\t\t      tok->get_type_hint (), tok->get_locus ()));\n     case FLOAT_LITERAL:\n       // encode as float?\n       return std::unique_ptr<AST::LiteralExpr> (\n \tnew AST::LiteralExpr (tok->get_str (), AST::Literal::FLOAT,\n-\t\t\t      tok->get_locus ()));\n+\t\t\t      tok->get_type_hint (), tok->get_locus ()));\n     case STRING_LITERAL:\n       return std::unique_ptr<AST::LiteralExpr> (\n \tnew AST::LiteralExpr (tok->get_str (), AST::Literal::STRING,\n-\t\t\t      tok->get_locus ()));\n+\t\t\t      tok->get_type_hint (), tok->get_locus ()));\n     case TRUE_LITERAL:\n       return std::unique_ptr<AST::LiteralExpr> (\n-\tnew AST::LiteralExpr (\"true\", AST::Literal::BOOL, tok->get_locus ()));\n+\tnew AST::LiteralExpr (\"true\", AST::Literal::BOOL, tok->get_type_hint (),\n+\t\t\t      tok->get_locus ()));\n     case FALSE_LITERAL:\n       return std::unique_ptr<AST::LiteralExpr> (\n-\tnew AST::LiteralExpr (\"false\", AST::Literal::BOOL, tok->get_locus ()));\n+\tnew AST::LiteralExpr (\"false\", AST::Literal::BOOL,\n+\t\t\t      tok->get_type_hint (), tok->get_locus ()));\n       case LEFT_PAREN: { // have to parse whole expression if inside brackets\n \t/* recursively invoke parse_expression with lowest priority possible as\n \t * it it were a top-level expression. */"}, {"sha": "e7f1328b614e59785bfd1286aa7a3789b6255b67", "filename": "gcc/rust/resolve/rust-ast-resolve.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc?ref=1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c", "patch": "@@ -126,19 +126,31 @@ Resolver::generate_builtins ()\n     = new TyTy::UintType (mappings->get_next_hir_id (), TyTy::UintType::U16);\n   auto u32\n     = new TyTy::UintType (mappings->get_next_hir_id (), TyTy::UintType::U32);\n+  auto u64\n+    = new TyTy::UintType (mappings->get_next_hir_id (), TyTy::UintType::U64);\n+  auto u128\n+    = new TyTy::UintType (mappings->get_next_hir_id (), TyTy::UintType::U128);\n   auto i8 = new TyTy::IntType (mappings->get_next_hir_id (), TyTy::IntType::I8);\n   auto i16\n     = new TyTy::IntType (mappings->get_next_hir_id (), TyTy::IntType::I16);\n   auto i32\n     = new TyTy::IntType (mappings->get_next_hir_id (), TyTy::IntType::I32);\n+  auto i64\n+    = new TyTy::IntType (mappings->get_next_hir_id (), TyTy::IntType::I64);\n+  auto i128\n+    = new TyTy::IntType (mappings->get_next_hir_id (), TyTy::IntType::I128);\n   auto rbool = new TyTy::BoolType (mappings->get_next_hir_id ());\n \n   MKBUILTIN_TYPE (\"u8\", builtins, u8);\n   MKBUILTIN_TYPE (\"u16\", builtins, u16);\n   MKBUILTIN_TYPE (\"u32\", builtins, u32);\n+  MKBUILTIN_TYPE (\"u64\", builtins, u64);\n+  MKBUILTIN_TYPE (\"u128\", builtins, u128);\n   MKBUILTIN_TYPE (\"i8\", builtins, i8);\n   MKBUILTIN_TYPE (\"i16\", builtins, i16);\n   MKBUILTIN_TYPE (\"i32\", builtins, i32);\n+  MKBUILTIN_TYPE (\"i64\", builtins, i64);\n+  MKBUILTIN_TYPE (\"i128\", builtins, i128);\n   MKBUILTIN_TYPE (\"bool\", builtins, rbool);\n }\n "}, {"sha": "c1df913fbfe14f2754fd39295d137ded4136b7b1", "filename": "gcc/rust/rust-session-manager.cc", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c/gcc%2Frust%2Frust-session-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c/gcc%2Frust%2Frust-session-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.cc?ref=1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c", "patch": "@@ -359,9 +359,10 @@ Session::enable_dump (std::string arg)\n    * created */\n   if (arg == \"all\")\n     {\n-      rust_error_at (Location (),\n-\t\t     \"dumping all is not supported as of now. choose %<lex%>, %<parse%>, \"\n-         \"or %<target_options%>\");\n+      rust_error_at (\n+\tLocation (),\n+\t\"dumping all is not supported as of now. choose %<lex%>, %<parse%>, \"\n+\t\"or %<target_options%>\");\n       return false;\n     }\n   else if (arg == \"lex\")\n@@ -409,10 +410,11 @@ Session::enable_dump (std::string arg)\n     }\n   else\n     {\n-      rust_error_at (Location (),\n-\t\t     \"dump option %qs was unrecognised. choose %<lex%>, %<parse%>, or \"\n-         \"%<target_options%>\",\n-\t\t     arg.c_str ());\n+      rust_error_at (\n+\tLocation (),\n+\t\"dump option %qs was unrecognised. choose %<lex%>, %<parse%>, or \"\n+\t\"%<target_options%>\",\n+\targ.c_str ());\n       return false;\n     }\n   return true;"}, {"sha": "2a29c557f92e1c818f08ede53be325f9aad9f109", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 40, "deletions": 4, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c", "patch": "@@ -152,10 +152,46 @@ class TypeCheckExpr : public TypeCheckBase\n     switch (expr.get_lit_type ())\n       {\n \tcase HIR::Literal::LitType::INT: {\n-\t  // FIXME:\n-\t  // assume i32 let the combiner functions figure it out\n-\t  // this should look at the suffix of the literal value to check\n-\t  auto ok = context->lookup_builtin (\"i32\", &infered);\n+\t  bool ok = false;\n+\n+\t  switch (expr.get_literal ()->get_type_hint ())\n+\t    {\n+\t    case CORETYPE_I8:\n+\t      ok = context->lookup_builtin (\"i8\", &infered);\n+\t      break;\n+\t    case CORETYPE_I16:\n+\t      ok = context->lookup_builtin (\"i16\", &infered);\n+\t      break;\n+\t    case CORETYPE_I32:\n+\t      ok = context->lookup_builtin (\"i32\", &infered);\n+\t      break;\n+\t    case CORETYPE_I64:\n+\t      ok = context->lookup_builtin (\"i64\", &infered);\n+\t      break;\n+\t    case CORETYPE_I128:\n+\t      ok = context->lookup_builtin (\"i128\", &infered);\n+\t      break;\n+\n+\t    case CORETYPE_U8:\n+\t      ok = context->lookup_builtin (\"u8\", &infered);\n+\t      break;\n+\t    case CORETYPE_U16:\n+\t      ok = context->lookup_builtin (\"u16\", &infered);\n+\t      break;\n+\t    case CORETYPE_U32:\n+\t      ok = context->lookup_builtin (\"u32\", &infered);\n+\t      break;\n+\t    case CORETYPE_U64:\n+\t      ok = context->lookup_builtin (\"u64\", &infered);\n+\t      break;\n+\t    case CORETYPE_U128:\n+\t      ok = context->lookup_builtin (\"u128\", &infered);\n+\t      break;\n+\n+\t    default:\n+\t      ok = context->lookup_builtin (\"i32\", &infered);\n+\t      break;\n+\t    }\n \t  rust_assert (ok);\n \t}\n \tbreak;"}, {"sha": "477d29eadef9d71f373ccdba85345556fdf644cf", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c", "patch": "@@ -205,6 +205,10 @@ IntType::as_string () const\n       return \"i16\";\n     case I32:\n       return \"i32\";\n+    case I64:\n+      return \"i64\";\n+    case I128:\n+      return \"i128\";\n     }\n   gcc_unreachable ();\n   return \"__unknown_int_type\";\n@@ -234,6 +238,10 @@ UintType::as_string () const\n       return \"u16\";\n     case U32:\n       return \"u32\";\n+    case U64:\n+      return \"u64\";\n+    case U128:\n+      return \"u128\";\n     }\n   gcc_unreachable ();\n   return \"__unknown_uint_type\";"}, {"sha": "670840064c536b0c307fdb549ee44ee8ce0d19ed", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c", "patch": "@@ -247,6 +247,8 @@ class IntType : public TyBase\n     I8,\n     I16,\n     I32,\n+    I64,\n+    I128\n   };\n \n   IntType (HirId ref, IntKind kind)\n@@ -273,6 +275,8 @@ class UintType : public TyBase\n     U8,\n     U16,\n     U32,\n+    U64,\n+    U128\n   };\n \n   UintType (HirId ref, UintKind kind)"}, {"sha": "22a916450bad513028a4b9d6d7ec07269e127a57", "filename": "gcc/testsuite/rust.test/compilable/integer_types.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Finteger_types.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Finteger_types.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Finteger_types.rs?ref=1a97dbc6b54cd77ba7c3f00cb8dd2e870017a83c", "patch": "@@ -0,0 +1,25 @@\n+fn main() {\n+    let a1: i8 = 1i8;\n+    let a2: i16 = 2i16;\n+    let a3: i32 = 3i32;\n+    let a4: i64 = 4i64;\n+    let a5: i128 = 5i128;\n+\n+    let b1 = 1i8;\n+    let b2 = 2i16;\n+    let b3 = 3i32;\n+    let b4 = 4i64;\n+    let b5 = 5i128;\n+\n+    let c1: u8 = 1u8;\n+    let c2: u16 = 2u16;\n+    let c3: u32 = 3u32;\n+    let c4: u64 = 4u64;\n+    let c5: u128 = 5u128;\n+\n+    let d1 = 1u8;\n+    let d2 = 2u16;\n+    let d3 = 3u32;\n+    let d4 = 4u64;\n+    let d5 = 5u128;\n+}"}]}