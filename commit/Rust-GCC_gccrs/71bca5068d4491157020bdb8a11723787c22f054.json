{"sha": "71bca5068d4491157020bdb8a11723787c22f054", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFiY2E1MDY4ZDQ0OTExNTcwMjBiZGI4YTExNzIzNzg3YzIyZjA1NA==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1998-07-23T12:51:00Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-07-23T12:51:00Z"}, "message": "expr.c (check_max_integer_computation_mode): Allow conversions of constant integers to MAX_INTEGER_COMPUTATION_MODE.\n\n        * expr.c (check_max_integer_computation_mode): Allow conversions\n        of constant integers to MAX_INTEGER_COMPUTATION_MODE.\n        (expand_expr): Likewise.\n\nFrom-SVN: r21349", "tree": {"sha": "cc96ed34cd44828875bd82215d197a7cd6d76ff8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc96ed34cd44828875bd82215d197a7cd6d76ff8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71bca5068d4491157020bdb8a11723787c22f054", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71bca5068d4491157020bdb8a11723787c22f054", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71bca5068d4491157020bdb8a11723787c22f054", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71bca5068d4491157020bdb8a11723787c22f054/comments", "author": null, "committer": null, "parents": [{"sha": "57b630a92b177b86947de8e3e14877b75e33634a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57b630a92b177b86947de8e3e14877b75e33634a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57b630a92b177b86947de8e3e14877b75e33634a"}], "stats": {"total": 16, "additions": 14, "deletions": 2}, "files": [{"sha": "f3e1fcc07161eedb60a4fb82cb1ea36932f49460", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71bca5068d4491157020bdb8a11723787c22f054/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71bca5068d4491157020bdb8a11723787c22f054/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=71bca5068d4491157020bdb8a11723787c22f054", "patch": "@@ -1,3 +1,9 @@\n+Thu Jul 23 13:49:41 1998  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* expr.c (check_max_integer_computation_mode): Allow conversions\n+\tof constant integers to MAX_INTEGER_COMPUTATION_MODE.\n+\t(expand_expr): Likewise.\n+\n Thu Jul 23 11:12:06 1998  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n \n \t* expr.c (expand_expr): Expand RETURN_EXPR."}, {"sha": "fd43689724be5547822955188ce59ee1410187fe", "filename": "gcc/expr.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71bca5068d4491157020bdb8a11723787c22f054/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71bca5068d4491157020bdb8a11723787c22f054/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=71bca5068d4491157020bdb8a11723787c22f054", "patch": "@@ -5069,6 +5069,11 @@ check_max_integer_computation_mode (exp)\n   enum tree_code code = TREE_CODE (exp);\n   enum machine_mode mode;\n \n+  /* We must allow conversions of constants to MAX_INTEGER_COMPUTATION_MODE.  */\n+  if (code == NOP_EXPR\n+      && TREE_CODE (TREE_OPERAND (exp, 0)) == INTEGER_CST)\n+    return;\n+\n   /* First check the type of the overall operation.   We need only look at\n      unary, binary and relational operations.  */\n   if (TREE_CODE_CLASS (code) == '1'\n@@ -5229,7 +5234,7 @@ expand_expr (exp, target, tmode, modifier)\n     }\n \n #ifdef MAX_INTEGER_COMPUTATION_MODE\n-  if (target)\n+  if (target && TREE_CODE (exp) != INTEGER_CST)\n     {\n       enum machine_mode mode = GET_MODE (target);\n \n@@ -5238,7 +5243,8 @@ expand_expr (exp, target, tmode, modifier)\n \tfatal (\"unsupported wide integer operation\");\n     }\n \n-  if (GET_MODE_CLASS (tmode) == MODE_INT\n+  if (TREE_CODE (exp) != INTEGER_CST\n+      && GET_MODE_CLASS (tmode) == MODE_INT\n       && tmode > MAX_INTEGER_COMPUTATION_MODE)\n     fatal (\"unsupported wide integer operation\");\n "}]}