{"sha": "0bd5850c9bb05d1e6221ffaa428728fbf3764e7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJkNTg1MGM5YmIwNWQxZTYyMjFmZmFhNDI4NzI4ZmJmMzc2NGU3YQ==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2015-05-02T21:05:37Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2015-05-02T21:05:37Z"}, "message": "make some functions in config/ take a rtx_insn *\n\ngcc/ChangeLog:\n\n2015-05-02  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\tto rtx_insn *.\n\t* config/i386/i386.c: Change the type of some arguments to\n\trtx_insn *.\n\t* config/arm/arm.c: Likewise.\n\nFrom-SVN: r222736", "tree": {"sha": "865e0e78133d7399fdf19fe602bfbc92b1c33b27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/865e0e78133d7399fdf19fe602bfbc92b1c33b27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bd5850c9bb05d1e6221ffaa428728fbf3764e7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bd5850c9bb05d1e6221ffaa428728fbf3764e7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bd5850c9bb05d1e6221ffaa428728fbf3764e7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bd5850c9bb05d1e6221ffaa428728fbf3764e7a/comments", "author": null, "committer": null, "parents": [{"sha": "605780f61f3d732674410e302d691a751fe97a10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/605780f61f3d732674410e302d691a751fe97a10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/605780f61f3d732674410e302d691a751fe97a10"}], "stats": {"total": 25, "additions": 16, "deletions": 9}, "files": [{"sha": "a1c86e06a9f0c71d9bf0b445b6d103374e57f742", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bd5850c9bb05d1e6221ffaa428728fbf3764e7a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bd5850c9bb05d1e6221ffaa428728fbf3764e7a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0bd5850c9bb05d1e6221ffaa428728fbf3764e7a", "patch": "@@ -1,3 +1,10 @@\n+2015-05-02  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\tto rtx_insn *.\n+\t* config/i386/i386.c: Change the type of some arguments to\n+\trtx_insn *.\n+\t* config/arm/arm.c: Likewise.\n+\n 2015-05-02  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* lra-constraints.c: Change type of some arguments to rtx_insn *."}, {"sha": "8a0ee38630f3bba024a300b0017e2344f534148a", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bd5850c9bb05d1e6221ffaa428728fbf3764e7a/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bd5850c9bb05d1e6221ffaa428728fbf3764e7a/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=0bd5850c9bb05d1e6221ffaa428728fbf3764e7a", "patch": "@@ -16603,7 +16603,7 @@ dump_minipool (rtx_insn *scan)\n \n /* Return the cost of forcibly inserting a barrier after INSN.  */\n static int\n-arm_barrier_cost (rtx insn)\n+arm_barrier_cost (rtx_insn *insn)\n {\n   /* Basing the location of the pool on the loop depth is preferable,\n      but at the moment, the basic block information seems to be"}, {"sha": "cd7bb567c3525e2ff7d7dd99d9d950b4986d7796", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bd5850c9bb05d1e6221ffaa428728fbf3764e7a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bd5850c9bb05d1e6221ffaa428728fbf3764e7a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=0bd5850c9bb05d1e6221ffaa428728fbf3764e7a", "patch": "@@ -10488,7 +10488,7 @@ static GTY(()) rtx queued_cfa_restores;\n    in the register and on the stack.  */\n \n static void\n-ix86_add_cfa_restore_note (rtx insn, rtx reg, HOST_WIDE_INT cfa_offset)\n+ix86_add_cfa_restore_note (rtx_insn *insn, rtx reg, HOST_WIDE_INT cfa_offset)\n {\n   if (!crtl->shrink_wrapped\n       && cfa_offset <= cfun->machine->fs.red_zone_offset)\n@@ -11931,7 +11931,7 @@ ix86_emit_restore_regs_using_mov (HOST_WIDE_INT cfa_offset,\n \t    m->fs.drap_valid = true;\n \t  }\n \telse\n-\t  ix86_add_cfa_restore_note (NULL_RTX, reg, cfa_offset);\n+\t  ix86_add_cfa_restore_note (NULL, reg, cfa_offset);\n \n \tcfa_offset -= UNITS_PER_WORD;\n       }\n@@ -11956,7 +11956,7 @@ ix86_emit_restore_sse_regs_using_mov (HOST_WIDE_INT cfa_offset,\n \tset_mem_align (mem, 128);\n \temit_move_insn (reg, mem);\n \n-\tix86_add_cfa_restore_note (NULL_RTX, reg, cfa_offset);\n+\tix86_add_cfa_restore_note (NULL, reg, cfa_offset);\n \n \tcfa_offset -= 16;\n       }\n@@ -18274,7 +18274,7 @@ increase_distance (rtx_insn *prev, rtx_insn *next, unsigned int distance)\n \n static bool\n insn_defines_reg (unsigned int regno1, unsigned int regno2,\n-\t\t  rtx insn)\n+\t\t  rtx_insn *insn)\n {\n   df_ref def;\n \n@@ -50505,15 +50505,15 @@ dispatch_violation (void)\n /* Return true if insn is a branch instruction.  */\n \n static bool\n-is_branch (rtx insn)\n+is_branch (rtx_insn *insn)\n {\n   return (CALL_P (insn) || JUMP_P (insn));\n }\n \n /* Return true if insn is a prefetch instruction.  */\n \n static bool\n-is_prefetch (rtx insn)\n+is_prefetch (rtx_insn *insn)\n {\n   return NONJUMP_INSN_P (insn) && GET_CODE (PATTERN (insn)) == PREFETCH;\n }\n@@ -50679,7 +50679,7 @@ find_constant (rtx in_rtx, imm_info *imm_values)\n    bit immediates.  */\n \n static int\n-get_num_immediates (rtx insn, int *imm, int *imm32, int *imm64)\n+get_num_immediates (rtx_insn *insn, int *imm, int *imm32, int *imm64)\n {\n   imm_info imm_values = {0, 0, 0};\n \n@@ -50694,7 +50694,7 @@ get_num_immediates (rtx insn, int *imm, int *imm32, int *imm64)\n    immediate.  */\n \n static bool\n-has_immediate (rtx insn)\n+has_immediate (rtx_insn *insn)\n {\n   int num_imm_operand;\n   int num_imm32_operand;"}]}