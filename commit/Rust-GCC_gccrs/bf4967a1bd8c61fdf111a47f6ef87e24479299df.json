{"sha": "bf4967a1bd8c61fdf111a47f6ef87e24479299df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY0OTY3YTFiZDhjNjFmZGYxMTFhNDdmNmVmODdlMjQ0NzkyOTlkZg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2009-11-19T19:21:05Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2009-11-19T19:21:05Z"}, "message": "pool_allocator.cc: Adjust catch blocks.\n\n2009-11-19  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* src/pool_allocator.cc: Adjust catch blocks.\n\t* src/bitmap_allocator.cc: Same.\n\t* src/localename.cc: Same.\n\t* src/ios.cc: Same.\n\n\t* libsupc++/cxxabi-forced.h: Adjust comments, markup.\n\n\t* testsuite/util/testsuite_hooks.h (copy_constructor::copyCount):\n\tRemove.\n\t(copy_constructor::dtorCount): Remove.\n\t* testsuite/23_containers/list/modifiers/1.h: Adjust.\n\t* testsuite/23_containers/list/modifiers/2.h: Same.\n\t* testsuite/23_containers/list/modifiers/3.h: Same.\n\nFrom-SVN: r154341", "tree": {"sha": "435b893a5dde8febb1e697f4de0cbf80a78cbaeb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/435b893a5dde8febb1e697f4de0cbf80a78cbaeb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf4967a1bd8c61fdf111a47f6ef87e24479299df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf4967a1bd8c61fdf111a47f6ef87e24479299df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf4967a1bd8c61fdf111a47f6ef87e24479299df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf4967a1bd8c61fdf111a47f6ef87e24479299df/comments", "author": null, "committer": null, "parents": [{"sha": "fdabb520f28764ae547c236234f60b7622a6d02a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdabb520f28764ae547c236234f60b7622a6d02a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdabb520f28764ae547c236234f60b7622a6d02a"}], "stats": {"total": 110, "additions": 64, "deletions": 46}, "files": [{"sha": "83e740d18cb0f3c244ad186bdb9653037edb55f2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf4967a1bd8c61fdf111a47f6ef87e24479299df/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf4967a1bd8c61fdf111a47f6ef87e24479299df/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bf4967a1bd8c61fdf111a47f6ef87e24479299df", "patch": "@@ -1,3 +1,19 @@\n+2009-11-19  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* src/pool_allocator.cc: Adjust catch blocks.\n+\t* src/bitmap_allocator.cc: Same.\n+\t* src/localename.cc: Same.\n+\t* src/ios.cc: Same.\n+\n+\t* libsupc++/cxxabi-forced.h: Adjust comments, markup.\n+\n+\t* testsuite/util/testsuite_hooks.h (copy_constructor::copyCount):\n+\tRemove.\n+\t(copy_constructor::dtorCount): Remove.\n+\t* testsuite/23_containers/list/modifiers/1.h: Adjust.\n+\t* testsuite/23_containers/list/modifiers/2.h: Same.\n+\t* testsuite/23_containers/list/modifiers/3.h: Same.\n+\n 2009-11-19  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/41622"}, {"sha": "845d8094da0fa6f864b712c56168db99f24869d6", "filename": "libstdc++-v3/libsupc++/cxxabi-forced.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf4967a1bd8c61fdf111a47f6ef87e24479299df/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi-forced.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf4967a1bd8c61fdf111a47f6ef87e24479299df/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi-forced.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi-forced.h?ref=bf4967a1bd8c61fdf111a47f6ef87e24479299df", "patch": "@@ -23,6 +23,10 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n+/** @file cxxabi-forced.h\n+ *  The header provides an interface to the C++ ABI.\n+ */\n+\n #ifndef _CXXABI_FORCED_H\n #define _CXXABI_FORCED_H 1\n \n@@ -41,7 +45,9 @@ namespace __cxxabiv1\n   class __forced_unwind\n   {\n     virtual ~__forced_unwind() throw();\n-    virtual void __pure_dummy() = 0; // prevent catch by value\n+\n+    // Prevent catch by value.\n+    virtual void __pure_dummy() = 0; \n   };\n }\n #endif // __cplusplus"}, {"sha": "55b308de25b404e004c71dcefe4a04618b050d30", "filename": "libstdc++-v3/src/bitmap_allocator.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf4967a1bd8c61fdf111a47f6ef87e24479299df/libstdc%2B%2B-v3%2Fsrc%2Fbitmap_allocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf4967a1bd8c61fdf111a47f6ef87e24479299df/libstdc%2B%2B-v3%2Fsrc%2Fbitmap_allocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fbitmap_allocator.cc?ref=bf4967a1bd8c61fdf111a47f6ef87e24479299df", "patch": "@@ -76,7 +76,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t\t__ret = reinterpret_cast<size_t*>\n \t\t  (::operator new(__sz + sizeof(size_t)));\n \t      }\n-\t    __catch(...)\n+\t    __catch(const std::bad_alloc&)\n \t      {\n \t\tthis->_M_clear();\n \t      }"}, {"sha": "9d2ff8eeb5962e4b013f852d5f36e8bc2906c3df", "filename": "libstdc++-v3/src/ios.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf4967a1bd8c61fdf111a47f6ef87e24479299df/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf4967a1bd8c61fdf111a47f6ef87e24479299df/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios.cc?ref=bf4967a1bd8c61fdf111a47f6ef87e24479299df", "patch": "@@ -123,12 +123,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t    __newsize = __ix + 1;\n \t    __try\n \t      { __words = new _Words[__newsize]; }\n-\t    __catch(...)\n+\t    __catch(const std::bad_alloc&)\n \t      {\n \t\t_M_streambuf_state |= badbit;\n \t\tif (_M_streambuf_state & _M_exception)\n \t\t  __throw_ios_failure(__N(\"ios_base::_M_grow_words \"\n-\t\t\t\t      \"allocation failed\"));\n+\t\t\t\t\t  \"allocation failed\"));\n \t\tif (__iword)\n \t\t  _M_word_zero._M_iword = 0;\n \t\telse"}, {"sha": "5ee8258ccb8cadede16e8cb9ca02fd07d7a68919", "filename": "libstdc++-v3/src/localename.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf4967a1bd8c61fdf111a47f6ef87e24479299df/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf4967a1bd8c61fdf111a47f6ef87e24479299df/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc?ref=bf4967a1bd8c61fdf111a47f6ef87e24479299df", "patch": "@@ -163,7 +163,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n     __try \n       { _M_impl->_M_replace_categories(__add._M_impl, __cat); }\n-    __catch (...) \n+    __catch(...) \n       { \n \t_M_impl->_M_remove_reference(); \n \t__throw_exception_again;"}, {"sha": "80f07ba863bd25f8ada4f57232c2237b3dc5ffb7", "filename": "libstdc++-v3/src/pool_allocator.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf4967a1bd8c61fdf111a47f6ef87e24479299df/libstdc%2B%2B-v3%2Fsrc%2Fpool_allocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf4967a1bd8c61fdf111a47f6ef87e24479299df/libstdc%2B%2B-v3%2Fsrc%2Fpool_allocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fpool_allocator.cc?ref=bf4967a1bd8c61fdf111a47f6ef87e24479299df", "patch": "@@ -94,7 +94,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t  {\n \t    _S_start_free = static_cast<char*>(::operator new(__bytes_to_get));\n \t  }\n-\t__catch (...)\n+\t__catch(const std::bad_alloc&)\n \t  {\n \t    // Try to make do with what we have.  That can't hurt.  We\n \t    // do not try smaller requests, since that tends to result"}, {"sha": "2d7e45bb1ed68fc09e105110aa5aad652f3e650c", "filename": "libstdc++-v3/testsuite/23_containers/list/modifiers/1.h", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf4967a1bd8c61fdf111a47f6ef87e24479299df/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2F1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf4967a1bd8c61fdf111a47f6ef87e24479299df/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2F1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2F1.h?ref=bf4967a1bd8c61fdf111a47f6ef87e24479299df", "patch": "@@ -30,14 +30,17 @@ modifiers1()\n   typedef _Tp list_type;\n   typedef typename list_type::iterator iterator;\n   typedef typename list_type::value_type value_type;\n+  \n+  using __gnu_test::copy_constructor;\n+  using __gnu_test::destructor;\n \n   list_type list0301;\n   value_type::reset();\n \n   // fill insert at beginning of list / empty list\n   list0301.insert(list0301.begin(), 3, value_type(11)); // should be [11 11 11]\n   VERIFY(list0301.size() == 3);\n-  VERIFY(value_type::copyCount() == 3);\n+  VERIFY(copy_constructor::count() == 3);\n \n   // save iterators to verify post-insert validity\n   iterator b = list0301.begin();\n@@ -48,7 +51,7 @@ modifiers1()\n   value_type::reset();\n   list0301.insert(list0301.end(), 3, value_type(13)); // should be [11 11 11 13 13 13]\n   VERIFY(list0301.size() == 6);\n-  VERIFY(value_type::copyCount() == 3);\n+  VERIFY(copy_constructor::count() == 3);\n   VERIFY(b == list0301.begin() && b->id() == 11);\n   VERIFY(e == list0301.end());\n   VERIFY(m->id() == 11);\n@@ -58,7 +61,7 @@ modifiers1()\n   value_type::reset();\n   list0301.insert(m, 3, value_type(12)); // should be [11 11 11 12 12 12 13 13 13]\n   VERIFY(list0301.size() == 9);\n-  VERIFY(value_type::copyCount() == 3);\n+  VERIFY(copy_constructor::count() == 3);\n   VERIFY(b == list0301.begin() && b->id() == 11);\n   VERIFY(e == list0301.end());\n   VERIFY(m->id() == 13);\n@@ -67,7 +70,7 @@ modifiers1()\n   value_type::reset();\n   m = list0301.erase(m); // should be [11 11 11 12 12 12 13 13]\n   VERIFY(list0301.size() == 8);\n-  VERIFY(value_type::dtorCount() == 1);\n+  VERIFY(destructor::count() == 1);\n   VERIFY(b == list0301.begin() && b->id() == 11);\n   VERIFY(e == list0301.end());\n   VERIFY(m->id() == 13);\n@@ -76,7 +79,7 @@ modifiers1()\n   value_type::reset();\n   m = list0301.erase(list0301.begin(), m); // should be [13 13]\n   VERIFY(list0301.size() == 2);\n-  VERIFY(value_type::dtorCount() == 6);\n+  VERIFY(destructor::count() == 6);\n   VERIFY(m->id() == 13);\n \n   // range fill at beginning\n@@ -86,28 +89,28 @@ modifiers1()\n   b = list0301.begin();\n   list0301.insert(b, A, A + N); // should be [321 322 333 13 13]\n   VERIFY(list0301.size() == 5);\n-  VERIFY(value_type::copyCount() == 3);\n+  VERIFY(copy_constructor::count() == 3);\n   VERIFY(m->id() == 13);\n \n   // range fill at end\n   value_type::reset();\n   list0301.insert(e, A, A + N); // should be [321 322 333 13 13 321 322 333]\n   VERIFY(list0301.size() == 8);\n-  VERIFY(value_type::copyCount() == 3);\n+  VERIFY(copy_constructor::count() == 3);\n   VERIFY(e == list0301.end());\n   VERIFY(m->id() == 13);\n \n   // range fill in middle\n   value_type::reset();\n   list0301.insert(m, A, A + N);\n   VERIFY(list0301.size() == 11);\n-  VERIFY(value_type::copyCount() == 3);\n+  VERIFY(copy_constructor::count() == 3);\n   VERIFY(e == list0301.end());\n   VERIFY(m->id() == 13);\n \n   value_type::reset();\n   list0301.clear();\n   VERIFY(list0301.size() == 0);\n-  VERIFY(value_type::dtorCount() == 11);\n+  VERIFY(destructor::count() == 11);\n   VERIFY(e == list0301.end());\n }"}, {"sha": "e95f797cb51b94182565bdbd8ace873b1a31dd31", "filename": "libstdc++-v3/testsuite/23_containers/list/modifiers/2.h", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf4967a1bd8c61fdf111a47f6ef87e24479299df/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2F2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf4967a1bd8c61fdf111a47f6ef87e24479299df/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2F2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2F2.h?ref=bf4967a1bd8c61fdf111a47f6ef87e24479299df", "patch": "@@ -30,16 +30,19 @@ modifiers2()\n   typedef typename list_type::iterator iterator;\n   typedef typename list_type::const_iterator const_iterator;\n \n+  using __gnu_test::copy_constructor;\n+  using __gnu_test::destructor;\n+\n   list_type list0201;\n   value_type::reset();\n \n   list0201.insert(list0201.begin(), value_type(1));     // list should be [1]\n   VERIFY(list0201.size() == 1);\n-  VERIFY(value_type::copyCount() == 1);\n+  VERIFY(copy_constructor::count() == 1);\n \n   list0201.insert(list0201.end(), value_type(2));     // list should be [1 2]\n   VERIFY(list0201.size() == 2);\n-  VERIFY(value_type::copyCount() == 2);\n+  VERIFY(copy_constructor::count() == 2);\n \n   iterator i = list0201.begin();\n   const_iterator j = i;\n@@ -48,7 +51,7 @@ modifiers2()\n \n   list0201.insert(i, value_type(3));     // list should be [1 3 2]\n   VERIFY(list0201.size() == 3);\n-  VERIFY(value_type::copyCount() == 3);\n+  VERIFY(copy_constructor::count() == 3);\n \n   const_iterator k = i;\n   VERIFY(i->id() == 2); --i;\n@@ -60,27 +63,27 @@ modifiers2()\n   value_type::reset();\n   list0201.erase(i); // should be [1 2]\n   VERIFY(list0201.size() == 2);\n-  VERIFY(value_type::dtorCount() == 1);\n+  VERIFY(destructor::count() == 1);\n   VERIFY(k->id() == 2);\n   VERIFY(j->id() == 1);\n \n   list_type list0202;\n   value_type::reset();\n   VERIFY(list0202.size() == 0);\n-  VERIFY(value_type::copyCount() == 0);\n-  VERIFY(value_type::dtorCount() == 0);\n+  VERIFY(copy_constructor::count() == 0);\n+  VERIFY(destructor::count() == 0);\n \n   // member swap\n   list0202.swap(list0201);\n   VERIFY(list0201.size() == 0);\n   VERIFY(list0202.size() == 2);\n-  VERIFY(value_type::copyCount() == 0);\n-  VERIFY(value_type::dtorCount() == 0);\n+  VERIFY(copy_constructor::count() == 0);\n+  VERIFY(destructor::count() == 0);\n \n   // specialized swap\n   swap(list0201, list0202);\n   VERIFY(list0201.size() == 2);\n   VERIFY(list0202.size() == 0);\n-  VERIFY(value_type::copyCount() == 0);\n-  VERIFY(value_type::dtorCount() == 0);\n+  VERIFY(copy_constructor::count() == 0);\n+  VERIFY(destructor::count() == 0);\n }"}, {"sha": "64602ac4c1b7a2e038b730f368f72a899c5461bc", "filename": "libstdc++-v3/testsuite/23_containers/list/modifiers/3.h", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf4967a1bd8c61fdf111a47f6ef87e24479299df/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2F3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf4967a1bd8c61fdf111a47f6ef87e24479299df/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2F3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2F3.h?ref=bf4967a1bd8c61fdf111a47f6ef87e24479299df", "patch": "@@ -51,6 +51,9 @@ modifiers3()\n   typedef typename list_type::const_iterator const_iterator;\n   typedef typename list_type::const_reverse_iterator const_reverse_iterator;\n \n+  using __gnu_test::copy_constructor;\n+  using __gnu_test::destructor;\n+\n   list_type list0101;\n   const_iterator i;\n   const_reverse_iterator j;\n@@ -59,7 +62,7 @@ modifiers3()\n \n   list0101.push_back(value_type(1));     // list should be [1]\n   VERIFY(list0101.size() == 1);\n-  VERIFY(value_type::copyCount() == 1);\n+  VERIFY(copy_constructor::count() == 1);\n \n   k = list0101.end();\n   --k;\n@@ -69,12 +72,12 @@ modifiers3()\n \n   list0101.push_front(value_type(2));    // list should be [2 1]\n   VERIFY(list0101.size() == 2);\n-  VERIFY(value_type::copyCount() == 2);\n+  VERIFY(copy_constructor::count() == 2);\n   VERIFY(k->id() == 1);\n \n   list0101.push_back(value_type(3));     // list should be [2 1 3]\n   VERIFY(list0101.size() == 3);\n-  VERIFY(value_type::copyCount() == 3);\n+  VERIFY(copy_constructor::count() == 3);\n   VERIFY(k->id() == 1);\n \n   try\n@@ -85,7 +88,7 @@ modifiers3()\n   catch (...)\n   {\n     VERIFY(list0101.size() == 3);\n-    VERIFY(value_type::copyCount() == 4);\n+    VERIFY(copy_constructor::count() == 4);\n   }\n \n   i = list0101.begin();\n@@ -106,13 +109,13 @@ modifiers3()\n \n   list0101.pop_back();          // list should be [2 1]\n   VERIFY(list0101.size() == 2);\n-  VERIFY(value_type::dtorCount() == 1);\n+  VERIFY(destructor::count() == 1);\n   VERIFY(i->id() == 1);\n   VERIFY(k->id() == 1);\n \n   list0101.pop_front();          // list should be [1]\n   VERIFY(list0101.size() == 1);\n-  VERIFY(value_type::dtorCount() == 2);\n+  VERIFY(destructor::count() == 2);\n   VERIFY(i->id() == 1);\n   VERIFY(k->id() == 1);\n }"}, {"sha": "da51d37ae62395583c3a9d3ee48f49952bf02026", "filename": "libstdc++-v3/testsuite/util/testsuite_hooks.h", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf4967a1bd8c61fdf111a47f6ef87e24479299df/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_hooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf4967a1bd8c61fdf111a47f6ef87e24479299df/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_hooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_hooks.h?ref=bf4967a1bd8c61fdf111a47f6ef87e24479299df", "patch": "@@ -270,11 +270,6 @@ namespace __gnu_test\n     int\n     id() const { return id_; }\n \n-  private:\n-    int   id_;\n-    const bool  throw_on_copy_;\n-\n-  public:\n     static void\n     reset()\n     {\n@@ -283,17 +278,9 @@ namespace __gnu_test\n       destructor::reset();\n     }\n \n-    // for backwards-compatibility\n-    static int\n-    copyCount() \n-    { return copy_constructor::count(); }\n-\n-    // for backwards-compatibility\n-    static int\n-    dtorCount() \n-    { return destructor::count(); }\n-\n   private:\n+    int   id_;\n+    const bool  throw_on_copy_;\n     static int next_id_;\n   };\n "}]}