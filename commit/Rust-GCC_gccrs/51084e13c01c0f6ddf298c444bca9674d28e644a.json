{"sha": "51084e13c01c0f6ddf298c444bca9674d28e644a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTEwODRlMTNjMDFjMGY2ZGRmMjk4YzQ0NGJjYTk2NzRkMjhlNjQ0YQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-08-17T18:28:06Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-08-17T18:28:06Z"}, "message": "varasm.c (assemble_variable): Don't overalign if DECL_USER_ALIGN.\n\n        * varasm.c (assemble_variable): Don't overalign if DECL_USER_ALIGN.\n        * crtstuff.c (__CTOR_LIST__, __DTOR_LIST__, __EH_FRAME_BEGIN__,\n        __JCR_LIST__, __CTOR_END__, __DTOR_END__, __FRAME_END__,__JCR_END__):\n        Add aligned attribute.\n\nFrom-SVN: r44966", "tree": {"sha": "6137f5210fae2ff6c6a7a6aee1797c7450a4bfbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6137f5210fae2ff6c6a7a6aee1797c7450a4bfbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51084e13c01c0f6ddf298c444bca9674d28e644a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51084e13c01c0f6ddf298c444bca9674d28e644a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51084e13c01c0f6ddf298c444bca9674d28e644a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51084e13c01c0f6ddf298c444bca9674d28e644a/comments", "author": null, "committer": null, "parents": [{"sha": "d1356866eba98f8d8473cfcb6f8cd97740b9328c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1356866eba98f8d8473cfcb6f8cd97740b9328c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1356866eba98f8d8473cfcb6f8cd97740b9328c"}], "stats": {"total": 54, "additions": 37, "deletions": 17}, "files": [{"sha": "00b746c61b20aa80c74bfb0fa14d9dc14eee527b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51084e13c01c0f6ddf298c444bca9674d28e644a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51084e13c01c0f6ddf298c444bca9674d28e644a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=51084e13c01c0f6ddf298c444bca9674d28e644a", "patch": "@@ -1,4 +1,11 @@\n-2001-08-10  Andrew Haley  <aph@cambridge.redhat.com>\n+2001-08-17  Richard Henderson  <rth@redhat.com>\n+\n+\t* varasm.c (assemble_variable): Don't overalign if DECL_USER_ALIGN.\n+\t* crtstuff.c (__CTOR_LIST__, __DTOR_LIST__, __EH_FRAME_BEGIN__,\n+\t__JCR_LIST__, __CTOR_END__, __DTOR_END__, __FRAME_END__,__JCR_END__):\n+\tAdd aligned attribute.\n+\n+2001-08-17  Andrew Haley  <aph@cambridge.redhat.com>\n \n \t* config/sh/sh.md: Add modes to unspecs in first insn to match\n \tthose in the second."}, {"sha": "067639bc656b78ab5f20d62ca28b5419e13ebe9f", "filename": "gcc/crtstuff.c", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51084e13c01c0f6ddf298c444bca9674d28e644a/gcc%2Fcrtstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51084e13c01c0f6ddf298c444bca9674d28e644a/gcc%2Fcrtstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcrtstuff.c?ref=51084e13c01c0f6ddf298c444bca9674d28e644a", "patch": "@@ -369,12 +369,12 @@ CTOR_LIST_BEGIN;\n static func_ptr force_to_data[1] __attribute__ ((__unused__)) = { };\n asm (CTORS_SECTION_ASM_OP);\n STATIC func_ptr __CTOR_LIST__[1]\n-  __attribute__ ((__unused__))\n+  __attribute__ ((__unused__, aligned(sizeof(func_ptr))))\n   = { (func_ptr) (-1) };\n \n #else\n STATIC func_ptr __CTOR_LIST__[1]\n-  __attribute__ ((__unused__, section(\".ctors\")))\n+  __attribute__ ((__unused__, section(\".ctors\"), aligned(sizeof(func_ptr))))\n   = { (func_ptr) (-1) };\n \n #endif\n@@ -383,10 +383,12 @@ STATIC func_ptr __CTOR_LIST__[1]\n DTOR_LIST_BEGIN;\n #elif defined(DTORS_SECTION_ASM_OP)\n asm (DTORS_SECTION_ASM_OP);\n-STATIC func_ptr __DTOR_LIST__[1] = { (func_ptr) (-1) };\n+STATIC func_ptr __DTOR_LIST__[1]\n+  __attribute__ ((aligned(sizeof(func_ptr))))\n+  = { (func_ptr) (-1) };\n #else\n STATIC func_ptr __DTOR_LIST__[1]\n-  __attribute__((section(\".dtors\")))\n+  __attribute__((section(\".dtors\"), aligned(sizeof(func_ptr))))\n   = { (func_ptr) (-1) };\n #endif\n \n@@ -397,15 +399,16 @@ STATIC func_ptr __DTOR_LIST__[1]\n STATIC\n #endif\n char __EH_FRAME_BEGIN__[]\n-     __attribute__((section(EH_FRAME_SECTION_NAME)))\n+     __attribute__((section(EH_FRAME_SECTION_NAME), aligned(4)))\n      = { };\n #endif /* EH_FRAME_SECTION_NAME */\n \n #ifdef JCR_SECTION_NAME\n /* Stick a label at the beginning of the java class registration info\n    so we can register them properly.  */\n \n-STATIC void *__JCR_LIST__[] __attribute__ ((unused, section(JCR_SECTION_NAME)))\n+STATIC void *__JCR_LIST__[]\n+  __attribute__ ((unused, section(JCR_SECTION_NAME), aligned(sizeof(func_ptr))))\n   = { 0 };\n #endif /* JCR_SECTION_NAME */\n \n@@ -533,31 +536,35 @@ CTOR_LIST_END;\n    __CTOR_LIST__ does not undo our behind-the-back change to .ctors.  */\n static func_ptr force_to_data[1] __attribute__ ((__unused__)) = { };\n asm (CTORS_SECTION_ASM_OP);\n-STATIC func_ptr __CTOR_END__[1] = { (func_ptr) 0 };\n+STATIC func_ptr __CTOR_END__[1]\n+  __attribute__((aligned(sizeof(func_ptr))))\n+  = { (func_ptr) 0 };\n \n #else\n STATIC func_ptr __CTOR_END__[1]\n-  __attribute__((section(\".ctors\")))\n+  __attribute__((section(\".ctors\"), aligned(sizeof(func_ptr))))\n   = { (func_ptr) 0 };\n #endif\n \n #ifdef DTOR_LIST_END\n DTOR_LIST_END;\n #elif defined(DTORS_SECTION_ASM_OP)\n asm (DTORS_SECTION_ASM_OP);\n-STATIC func_ptr __DTOR_END__[1] __attribute__ ((unused))\n+STATIC func_ptr __DTOR_END__[1]\n+  __attribute__ ((unused, aligned(sizeof(func_ptr))))\n   = { (func_ptr) 0 };\n #else\n STATIC func_ptr __DTOR_END__[1]\n-  __attribute__((unused, section(\".dtors\")))\n+  __attribute__((unused, section(\".dtors\"), aligned(sizeof(func_ptr))))\n   = { (func_ptr) 0 };\n #endif\n \n #ifdef EH_FRAME_SECTION_NAME\n /* Terminate the frame unwind info section with a 4byte 0 as a sentinel;\n    this would be the 'length' field in a real FDE.  */\n STATIC int __FRAME_END__[]\n-     __attribute__ ((unused, mode(SI), section(EH_FRAME_SECTION_NAME)))\n+     __attribute__ ((unused, mode(SI), section(EH_FRAME_SECTION_NAME),\n+\t\t     aligned(4)))\n      = { 0 };\n #endif /* EH_FRAME_SECTION */\n \n@@ -566,7 +573,9 @@ STATIC int __FRAME_END__[]\n    so we can register them properly.  */\n \n STATIC void *__JCR_END__[1] \n-     __attribute__ ((unused, section(JCR_SECTION_NAME))) = { 0 };\n+   __attribute__ ((unused, section(JCR_SECTION_NAME),\n+\t\t   aligned(sizeof(func_ptr))))\n+   = { 0 };\n #endif /* JCR_SECTION_NAME */\n \n #endif /* defined(CRT_END) */\n@@ -627,7 +636,8 @@ __dereg_frame_dtor (void)\n \n /* Terminate the frame section with a final zero.  */\n STATIC int __FRAME_END__[]\n-     __attribute__ ((unused, mode(SI), section(EH_FRAME_SECTION_NAME)))\n+     __attribute__ ((unused, mode(SI), section(EH_FRAME_SECTION_NAME),\n+\t\t     aligned(4)))\n      = { 0 };\n #endif /* CRT_END */\n "}, {"sha": "8b752dc1e9bdab3ad17986c670e9fe0eaf031ec0", "filename": "gcc/varasm.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51084e13c01c0f6ddf298c444bca9674d28e644a/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51084e13c01c0f6ddf298c444bca9674d28e644a/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=51084e13c01c0f6ddf298c444bca9674d28e644a", "patch": "@@ -1474,13 +1474,16 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n     }\n \n   /* On some machines, it is good to increase alignment sometimes.  */\n+  if (! DECL_USER_ALIGN (decl))\n+    {\n #ifdef DATA_ALIGNMENT\n-  align = DATA_ALIGNMENT (TREE_TYPE (decl), align);\n+      align = DATA_ALIGNMENT (TREE_TYPE (decl), align);\n #endif\n #ifdef CONSTANT_ALIGNMENT\n-  if (DECL_INITIAL (decl) != 0 && DECL_INITIAL (decl) != error_mark_node)\n-    align = CONSTANT_ALIGNMENT (DECL_INITIAL (decl), align);\n+      if (DECL_INITIAL (decl) != 0 && DECL_INITIAL (decl) != error_mark_node)\n+        align = CONSTANT_ALIGNMENT (DECL_INITIAL (decl), align);\n #endif\n+    }\n \n   /* Reset the alignment in case we have made it tighter, so we can benefit\n      from it in get_pointer_alignment.  */"}]}