{"sha": "4a9d51090acc89a3bed7d1bae7f9d4e1da267243", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGE5ZDUxMDkwYWNjODlhM2JlZDdkMWJhZTdmOWQ0ZTFkYTI2NzI0Mw==", "commit": {"author": {"name": "Stephen M. Webb", "email": "stephen@bregmasoft.com", "date": "2001-07-13T16:47:56Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-07-13T16:47:56Z"}, "message": "Makefile.am: New file encapsulating header generation rules.\n\n2001-07-13  Stephen M. Webb  <stephen@bregmasoft.com>\n            Loren J. Rittle  <ljrittle@acm.org>\n            Phil Edwards  <pme@sources.redhat.com>\n\n\t* include/Makefile.am:  New file encapsulating header generation rules.\n\t* Makefile.am (SUBDIRS):  Prepend 'include' directory.\n\t* acinclude.m4:  Moved/removed rules for building various headers.\n\t* configure.in (AC_OUTPUT):  Add include/Makefile.\n\t* mkc++config:  Removed.\n\n\t* testsuite_flags.in:  Changed build-includes to match new scheme.\n\t* mknumeric_limits:  Likewise.\n\t* libio/Makefile.am:  Changed INCLUDES to maatch new header scheme.\n\t* libmath/Makefile.am:  Likewise.\n\t* libsupc++/Makefile.am:  Likewise.\n\t* src/Makefile.am:  Likewise; removed rules to build headers.\n\t* libmath/mathconf.h:  Changed #include'd header names to match.\n\t* libmath/stubs.c:  Likewise.\n\t* src/gen-num-limits.cc:  Likewise.\n\n\t* configure:  Regenerated.\n\t* config.h.in:  Regenerated.\n\t* aclocal.m4:  Regenerated.\n\t* Makefile.in:  Regenerated.\n\t* include/Makefile.in:  Regenerated.\n\t* libio/Makefile.in:  Regenerated.\n\t* libmath/Makefile.in:  Regenerated.\n\t* libsupc++/Makefile.in:  Regenerated.\n\t* src/Makefile.in:  Regenerated.\n\t* testsuite/Makefile.in:  Regenerated.\n\nCo-Authored-By: Loren J. Rittle <ljrittle@acm.org>\nCo-Authored-By: Phil Edwards <pme@gcc.gnu.org>\n\nFrom-SVN: r43985", "tree": {"sha": "6efdb62e23ea1b74c2fa5ca8d8984cbaddc5a18a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6efdb62e23ea1b74c2fa5ca8d8984cbaddc5a18a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a9d51090acc89a3bed7d1bae7f9d4e1da267243", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a9d51090acc89a3bed7d1bae7f9d4e1da267243", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a9d51090acc89a3bed7d1bae7f9d4e1da267243", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/comments", "author": null, "committer": null, "parents": [{"sha": "1568d79b849057c16e3e4796b4c2b4335bb3a4ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1568d79b849057c16e3e4796b4c2b4335bb3a4ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1568d79b849057c16e3e4796b4c2b4335bb3a4ca"}], "stats": {"total": 3919, "additions": 2329, "deletions": 1590}, "files": [{"sha": "821b721b895e848983dd9755283a0b1a86918950", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4a9d51090acc89a3bed7d1bae7f9d4e1da267243", "patch": "@@ -1,3 +1,34 @@\n+2001-07-13  Stephen M. Webb  <stephen@bregmasoft.com>\n+            Loren J. Rittle  <ljrittle@acm.org>\n+            Phil Edwards  <pme@sources.redhat.com>\n+\n+\t* include/Makefile.am:  New file encapsulating header generation rules.\n+\t* Makefile.am (SUBDIRS):  Prepend 'include' directory.\n+\t* acinclude.m4:  Moved/removed rules for building various headers.\n+\t* configure.in (AC_OUTPUT):  Add include/Makefile.\n+\t* mkc++config:  Removed.\n+\n+\t* testsuite_flags.in:  Changed build-includes to match new scheme.\n+\t* mknumeric_limits:  Likewise.\n+\t* libio/Makefile.am:  Changed INCLUDES to maatch new header scheme.\n+\t* libmath/Makefile.am:  Likewise.\n+\t* libsupc++/Makefile.am:  Likewise.\n+\t* src/Makefile.am:  Likewise; removed rules to build headers.\n+\t* libmath/mathconf.h:  Changed #include'd header names to match.\n+\t* libmath/stubs.c:  Likewise.\n+\t* src/gen-num-limits.cc:  Likewise.\n+\n+\t* configure:  Regenerated.\n+\t* config.h.in:  Regenerated.\n+\t* aclocal.m4:  Regenerated.\n+\t* Makefile.in:  Regenerated.\n+\t* include/Makefile.in:  Regenerated.\n+\t* libio/Makefile.in:  Regenerated.\n+\t* libmath/Makefile.in:  Regenerated.\n+\t* libsupc++/Makefile.in:  Regenerated.\n+\t* src/Makefile.in:  Regenerated.\n+\t* testsuite/Makefile.in:  Regenerated.\n+\n 2001-07-11   Felix Natter  <fnatter@gmx.net>\n \n \t* docs/html/17_intro/porting-howto.xml:  Initial checkin of"}, {"sha": "d8c352f2c13309425b2c807993a57fc220a35572", "filename": "libstdc++-v3/Makefile.am", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.am?ref=4a9d51090acc89a3bed7d1bae7f9d4e1da267243", "patch": "@@ -24,7 +24,7 @@\n AUTOMAKE_OPTIONS = 1.3 cygnus\n MAINT_CHARSET = latin1\n \n-SUBDIRS = libio libmath libsupc++ src testsuite\n+SUBDIRS = include libio libmath libsupc++ src testsuite\n \n mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n \n@@ -59,7 +59,6 @@ doxygen-maint:\n \n .PHONY: doxygen doxygen-maint\n \n-\n # Multilib support.\n MAKEOVERRIDES=\n "}, {"sha": "2a976e4a74b718c8647a63c642d94417f92c3047", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 48, "deletions": 4, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=4a9d51090acc89a3bed7d1bae7f9d4e1da267243", "patch": "@@ -65,10 +65,14 @@ target_alias = @target_alias@\n target_triplet = @target@\n AR = @AR@\n AS = @AS@\n+ATOMICITY_INC_SRCDIR = @ATOMICITY_INC_SRCDIR@\n+BASIC_FILE_H = @BASIC_FILE_H@\n CC = @CC@\n+CCODECVT_C = @CCODECVT_C@\n+CLOCALE_H = @CLOCALE_H@\n CPP = @CPP@\n CSHADOW_FLAGS = @CSHADOW_FLAGS@\n-CSTD_INCLUDES = @CSTD_INCLUDES@\n+CSTDIO_H = @CSTDIO_H@\n CXX = @CXX@\n CXXCPP = @CXXCPP@\n C_INCLUDE_DIR = @C_INCLUDE_DIR@\n@@ -78,7 +82,8 @@ EXEEXT = @EXEEXT@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n GCJ = @GCJ@\n GCJFLAGS = @GCJFLAGS@\n-GLIBCPP_INCLUDE_DIR = @GLIBCPP_INCLUDE_DIR@\n+GLIBCPP_INCLUDES = @GLIBCPP_INCLUDES@\n+GLIBCPP_IS_CROSS_COMPILING = @GLIBCPP_IS_CROSS_COMPILING@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n LIBMATHOBJS = @LIBMATHOBJS@\n LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n@@ -93,6 +98,7 @@ OBJDUMP = @OBJDUMP@\n OBJEXT = @OBJEXT@\n OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n OPT_LDFLAGS = @OPT_LDFLAGS@\n+OS_INC_SRCDIR = @OS_INC_SRCDIR@\n PACKAGE = @PACKAGE@\n RANLIB = @RANLIB@\n SECTION_FLAGS = @SECTION_FLAGS@\n@@ -110,6 +116,7 @@ glibcpp_basedir = @glibcpp_basedir@\n glibcpp_builddir = @glibcpp_builddir@\n glibcpp_prefixdir = @glibcpp_prefixdir@\n glibcpp_srcdir = @glibcpp_srcdir@\n+glibcpp_thread_h = @glibcpp_thread_h@\n glibcpp_toolexecdir = @glibcpp_toolexecdir@\n glibcpp_toolexeclibdir = @glibcpp_toolexeclibdir@\n gxx_include_dir = @gxx_include_dir@\n@@ -120,7 +127,7 @@ toplevel_srcdir = @toplevel_srcdir@\n AUTOMAKE_OPTIONS = 1.3 cygnus\n MAINT_CHARSET = latin1\n \n-SUBDIRS = libio libmath libsupc++ src testsuite\n+SUBDIRS = include libio libmath libsupc++ src testsuite\n \n mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n \n@@ -138,7 +145,44 @@ MULTICLEAN = true\n # Work around what appears to be a GNU make bug handling MAKEFLAGS\n # values defined in terms of make variables, as is the case for CC and\n # friends when we are called from the top level Makefile.\n-AM_MAKEFLAGS =  \t\"AR_FLAGS=$(AR_FLAGS)\" \t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \t\"CFLAGS=$(CFLAGS)\" \t\"CXXFLAGS=$(CXXFLAGS)\" \t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \t\"INSTALL=$(INSTALL)\" \t\"INSTALL_DATA=$(INSTALL_DATA)\" \t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \t\"LDFLAGS=$(LDFLAGS)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \t\"MAKE=$(MAKE)\" \t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \t\"SHELL=$(SHELL)\" \t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \t\"exec_prefix=$(exec_prefix)\" \t\"infodir=$(infodir)\" \t\"libdir=$(libdir)\" \t\"includedir=$(includedir)\" \t\"prefix=$(prefix)\" \t\"tooldir=$(tooldir)\" \t\"AR=$(AR)\" \t\"AS=$(AS)\" \t\"LD=$(LD)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"RANLIB=$(RANLIB)\" \t\"NM=$(NM)\" \t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \t\"DESTDIR=$(DESTDIR)\" \t\"WERROR=$(WERROR)\" \n+AM_MAKEFLAGS = \\\n+\t\"AR_FLAGS=$(AR_FLAGS)\" \\\n+\t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \\\n+\t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \\\n+\t\"CFLAGS=$(CFLAGS)\" \\\n+\t\"CXXFLAGS=$(CXXFLAGS)\" \\\n+\t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \\\n+\t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \\\n+\t\"INSTALL=$(INSTALL)\" \\\n+\t\"INSTALL_DATA=$(INSTALL_DATA)\" \\\n+\t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \\\n+\t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \\\n+\t\"LDFLAGS=$(LDFLAGS)\" \\\n+\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n+\t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\"MAKE=$(MAKE)\" \\\n+\t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \\\n+\t\"PICFLAG=$(PICFLAG)\" \\\n+\t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \\\n+\t\"SHELL=$(SHELL)\" \\\n+\t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \\\n+\t\"exec_prefix=$(exec_prefix)\" \\\n+\t\"infodir=$(infodir)\" \\\n+\t\"libdir=$(libdir)\" \\\n+\t\"includedir=$(includedir)\" \\\n+\t\"prefix=$(prefix)\" \\\n+\t\"tooldir=$(tooldir)\" \\\n+\t\"AR=$(AR)\" \\\n+\t\"AS=$(AS)\" \\\n+\t\"LD=$(LD)\" \\\n+\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n+\t\"PICFLAG=$(PICFLAG)\" \\\n+\t\"RANLIB=$(RANLIB)\" \\\n+\t\"NM=$(NM)\" \\\n+\t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \\\n+\t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \\\n+\t\"DESTDIR=$(DESTDIR)\" \\\n+\t\"WERROR=$(WERROR)\" \n \n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n CONFIG_HEADER = config.h"}, {"sha": "c9495d9eda36f33c28de5d910df45604efe6feeb", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 16, "deletions": 44, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=4a9d51090acc89a3bed7d1bae7f9d4e1da267243", "patch": "@@ -760,7 +760,6 @@ AC_DEFUN(GLIBCPP_CHECK_TARGET, [\n     . [$]{glibcpp_basedir}/configure.target\n     AC_MSG_RESULT(CPU config directory is $cpu_include_dir)\n     AC_MSG_RESULT(OS config directory is $os_include_dir)\n-    AC_LINK_FILES($os_include_dir/bits/os_defines.h, include/bits/os_defines.h)\n ])\n \n \n@@ -1011,7 +1010,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       ;;\n   esac\n \n-  AC_LINK_FILES($CLOCALE_H, include/bits/c++locale.h)\n+  AC_SUBST(CLOCALE_H)\n   AC_LINK_FILES($CLOCALE_CC, src/c++locale.cc)\n ])\n \n@@ -1111,13 +1110,13 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n       exit 1\n       ;;\n   esac\n-  AC_LINK_FILES($CSTDIO_H, include/bits/c++io.h)\n-  AC_LINK_FILES($BASIC_FILE_H, include/bits/basic_file_model.h)\n+  AC_SUBST(CSTDIO_H)\n+  AC_SUBST(BASIC_FILE_H)\n   AC_LINK_FILES($BASIC_FILE_CC, src/basic_file.cc)\n \n   # 2000-08-04 bkoz hack\n   CCODECVT_C=config/c_io_libio_codecvt.c\n-  AC_LINK_FILES($CCODECVT_C, libio/c_codecvt.c)\n+  AC_SUBST(CCODECVT_C)\n   # 2000-08-04 bkoz hack\n \n   AM_CONDITIONAL(GLIBCPP_BUILD_LIBIO,\n@@ -1150,24 +1149,13 @@ AC_DEFUN(GLIBCPP_ENABLE_THREADS, [\n   target_thread_file=`$CC -v 2>&1 | sed -n 's/^Thread model: //p'`\n   AC_MSG_RESULT([$target_thread_file])\n \n-  AC_LINK_FILES($toprel/gcc/gthr.h, include/bits/gthr.h-in)\n-  AC_LINK_FILES($toprel/gcc/gthr-single.h,\n-\t\tinclude/bits/gthr-single.h-in)\n-  AC_LINK_FILES($toprel/gcc/gthr-$target_thread_file.h,\n-\t\tinclude/bits/gthr-default.h-in)\n   if test $target_thread_file != single; then\n     AC_DEFINE(HAVE_GTHR_DEFAULT)\n     AC_DEFINE(_GLIBCPP_SUPPORTS_WEAK, __GXX_WEAK__)\n   fi\n-  AC_OUTPUT_COMMANDS([d=include/bits; a='[ABCDEFGHIJKLMNOPQRSTUVWXYZ_]'\n-    rm -f $d/gthr.h $d/gthr-single.h $d/gthr-default.h\n-    sed '/^#/s/\\('\"$a$a\"'*\\)/_GLIBCPP_\\1/g' <$d/gthr.h-in \\\n-      | sed 's,\"gthr-,\"bits/gthr-,' >$d/gthr.h\n-    sed 's/\\(UNUSED\\)/_GLIBCPP_\\1/g' <$d/gthr-single.h-in \\\n-      | sed 's/\\(GCC'\"$a\"'*_H\\)/_GLIBCPP_\\1/g' >$d/gthr-single.h\n-    sed 's/\\(UNUSED\\)/_GLIBCPP_\\1/g' <$d/gthr-default.h-in \\\n-      | sed 's/\\(GCC'\"$a\"'*_H\\)/_GLIBCPP_\\1/g' \\\n-      | sed 's/\\('\"$a\"'*WEAK\\)/_GLIBCPP_\\1/g' >$d/gthr-default.h])\n+\n+  glibcpp_thread_h=gthr-$target_thread_file.h\n+  AC_SUBST(glibcpp_thread_h)\n ])\n \n \n@@ -1497,52 +1485,36 @@ dnl Option parsed, now other scripts can test enable_c_mbchar for yes/no.\n dnl\n dnl Set up *_INCLUDES and *_INCLUDE_DIR variables for all sundry Makefile.am's.\n dnl\n-dnl GLIBCPP_INCLUDE_DIR\n-dnl C_INCLUDE_DIR\n dnl TOPLEVEL_INCLUDES\n dnl LIBMATH_INCLUDES\n dnl LIBSUPCXX_INCLUDES\n dnl LIBIO_INCLUDES\n dnl CSHADOW_INCLUDES\n dnl\n-dnl GLIBCPP_EXPORT_INCLUDE\n+dnl GLIBCPP_EXPORT_INCLUDES\n AC_DEFUN(GLIBCPP_EXPORT_INCLUDES, [\n-  # Root level of the include sources.\n-  GLIBCPP_INCLUDE_DIR='$(top_srcdir)/include'\n+  # Root level of the build directory include sources.\n+  GLIBCPP_INCLUDES=\"-I${glibcpp_builddir}/include/${target_alias} -I${glibcpp_builddir}/include\"\n \n-  # Can either use include/c or include/c_std to grab \"C\" headers. This\n-  # variable is set to the include directory currently in use.\n-  # set with C_INCLUDE_DIR in GLIBCPP_ENABLE_CHEADERS\n-   \n   # Passed down for canadian crosses.\n-  if  test x\"$CANADIAN\" = xyes; then\n+  if test x\"$CANADIAN\" = xyes; then\n     TOPLEVEL_INCLUDES='-I$(includedir)'\n   fi\n \n   LIBMATH_INCLUDES='-I$(top_srcdir)/libmath'\n \n   LIBSUPCXX_INCLUDES='-I$(top_srcdir)/libsupc++'\n \n-  #if GLIBCPP_NEED_LIBIO\n-  LIBIO_INCLUDES='-I$(top_builddir)/libio -I$(top_srcdir)/libio'\n-  #else\n-  #LIBIO_INCLUDES='-I$(top_srcdir)/libio'\n-  #endif\n-\n-  #if GLIBCPP_USE_CSHADOW\n-  #  CSHADOW_INCLUDES='-I$(GLIBCPP_INCLUDE_DIR)/std -I$(C_INCLUDE_DIR) \\\n-  #                   -I$(top_blddir)/cshadow'\n-  #else\n-  CSTD_INCLUDES='-I$(GLIBCPP_INCLUDE_DIR)/std -I$(C_INCLUDE_DIR)'\n-  #endif\n+  if test x\"$need_libio\" = xyes; then\n+    LIBIO_INCLUDES='-I$(top_builddir)/libio -I$(top_srcdir)/libio'\n+    AC_SUBST(LIBIO_INCLUDES)\n+  fi\n \n   # Now, export this to all the little Makefiles....\n-  AC_SUBST(GLIBCPP_INCLUDE_DIR)\n+  AC_SUBST(GLIBCPP_INCLUDES)\n   AC_SUBST(TOPLEVEL_INCLUDES)\n   AC_SUBST(LIBMATH_INCLUDES)\n   AC_SUBST(LIBSUPCXX_INCLUDES)\n-  AC_SUBST(LIBIO_INCLUDES)\n-  AC_SUBST(CSTD_INCLUDES)\n ])\n \n "}, {"sha": "0c8c346045c79379b1808aeddbe2aaa348b43935", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 16, "deletions": 44, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=4a9d51090acc89a3bed7d1bae7f9d4e1da267243", "patch": "@@ -772,7 +772,6 @@ AC_DEFUN(GLIBCPP_CHECK_TARGET, [\n     . [$]{glibcpp_basedir}/configure.target\n     AC_MSG_RESULT(CPU config directory is $cpu_include_dir)\n     AC_MSG_RESULT(OS config directory is $os_include_dir)\n-    AC_LINK_FILES($os_include_dir/bits/os_defines.h, include/bits/os_defines.h)\n ])\n \n \n@@ -1023,7 +1022,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       ;;\n   esac\n \n-  AC_LINK_FILES($CLOCALE_H, include/bits/c++locale.h)\n+  AC_SUBST(CLOCALE_H)\n   AC_LINK_FILES($CLOCALE_CC, src/c++locale.cc)\n ])\n \n@@ -1123,13 +1122,13 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n       exit 1\n       ;;\n   esac\n-  AC_LINK_FILES($CSTDIO_H, include/bits/c++io.h)\n-  AC_LINK_FILES($BASIC_FILE_H, include/bits/basic_file_model.h)\n+  AC_SUBST(CSTDIO_H)\n+  AC_SUBST(BASIC_FILE_H)\n   AC_LINK_FILES($BASIC_FILE_CC, src/basic_file.cc)\n \n   # 2000-08-04 bkoz hack\n   CCODECVT_C=config/c_io_libio_codecvt.c\n-  AC_LINK_FILES($CCODECVT_C, libio/c_codecvt.c)\n+  AC_SUBST(CCODECVT_C)\n   # 2000-08-04 bkoz hack\n \n   AM_CONDITIONAL(GLIBCPP_BUILD_LIBIO,\n@@ -1162,24 +1161,13 @@ AC_DEFUN(GLIBCPP_ENABLE_THREADS, [\n   target_thread_file=`$CC -v 2>&1 | sed -n 's/^Thread model: //p'`\n   AC_MSG_RESULT([$target_thread_file])\n \n-  AC_LINK_FILES($toprel/gcc/gthr.h, include/bits/gthr.h-in)\n-  AC_LINK_FILES($toprel/gcc/gthr-single.h,\n-\t\tinclude/bits/gthr-single.h-in)\n-  AC_LINK_FILES($toprel/gcc/gthr-$target_thread_file.h,\n-\t\tinclude/bits/gthr-default.h-in)\n   if test $target_thread_file != single; then\n     AC_DEFINE(HAVE_GTHR_DEFAULT)\n     AC_DEFINE(_GLIBCPP_SUPPORTS_WEAK, __GXX_WEAK__)\n   fi\n-  AC_OUTPUT_COMMANDS([d=include/bits; a='[ABCDEFGHIJKLMNOPQRSTUVWXYZ_]'\n-    rm -f $d/gthr.h $d/gthr-single.h $d/gthr-default.h\n-    sed '/^#/s/\\('\"$a$a\"'*\\)/_GLIBCPP_\\1/g' <$d/gthr.h-in \\\n-      | sed 's,\"gthr-,\"bits/gthr-,' >$d/gthr.h\n-    sed 's/\\(UNUSED\\)/_GLIBCPP_\\1/g' <$d/gthr-single.h-in \\\n-      | sed 's/\\(GCC'\"$a\"'*_H\\)/_GLIBCPP_\\1/g' >$d/gthr-single.h\n-    sed 's/\\(UNUSED\\)/_GLIBCPP_\\1/g' <$d/gthr-default.h-in \\\n-      | sed 's/\\(GCC'\"$a\"'*_H\\)/_GLIBCPP_\\1/g' \\\n-      | sed 's/\\('\"$a\"'*WEAK\\)/_GLIBCPP_\\1/g' >$d/gthr-default.h])\n+\n+  glibcpp_thread_h=gthr-$target_thread_file.h\n+  AC_SUBST(glibcpp_thread_h)\n ])\n \n \n@@ -1509,52 +1497,36 @@ dnl Option parsed, now other scripts can test enable_c_mbchar for yes/no.\n dnl\n dnl Set up *_INCLUDES and *_INCLUDE_DIR variables for all sundry Makefile.am's.\n dnl\n-dnl GLIBCPP_INCLUDE_DIR\n-dnl C_INCLUDE_DIR\n dnl TOPLEVEL_INCLUDES\n dnl LIBMATH_INCLUDES\n dnl LIBSUPCXX_INCLUDES\n dnl LIBIO_INCLUDES\n dnl CSHADOW_INCLUDES\n dnl\n-dnl GLIBCPP_EXPORT_INCLUDE\n+dnl GLIBCPP_EXPORT_INCLUDES\n AC_DEFUN(GLIBCPP_EXPORT_INCLUDES, [\n-  # Root level of the include sources.\n-  GLIBCPP_INCLUDE_DIR='$(top_srcdir)/include'\n+  # Root level of the build directory include sources.\n+  GLIBCPP_INCLUDES=\"-I${glibcpp_builddir}/include/${target_alias} -I${glibcpp_builddir}/include\"\n \n-  # Can either use include/c or include/c_std to grab \"C\" headers. This\n-  # variable is set to the include directory currently in use.\n-  # set with C_INCLUDE_DIR in GLIBCPP_ENABLE_CHEADERS\n-   \n   # Passed down for canadian crosses.\n-  if  test x\"$CANADIAN\" = xyes; then\n+  if test x\"$CANADIAN\" = xyes; then\n     TOPLEVEL_INCLUDES='-I$(includedir)'\n   fi\n \n   LIBMATH_INCLUDES='-I$(top_srcdir)/libmath'\n \n   LIBSUPCXX_INCLUDES='-I$(top_srcdir)/libsupc++'\n \n-  #if GLIBCPP_NEED_LIBIO\n-  LIBIO_INCLUDES='-I$(top_builddir)/libio -I$(top_srcdir)/libio'\n-  #else\n-  #LIBIO_INCLUDES='-I$(top_srcdir)/libio'\n-  #endif\n-\n-  #if GLIBCPP_USE_CSHADOW\n-  #  CSHADOW_INCLUDES='-I$(GLIBCPP_INCLUDE_DIR)/std -I$(C_INCLUDE_DIR) \\\n-  #                   -I$(top_blddir)/cshadow'\n-  #else\n-  CSTD_INCLUDES='-I$(GLIBCPP_INCLUDE_DIR)/std -I$(C_INCLUDE_DIR)'\n-  #endif\n+  if test x\"$need_libio\" = xyes; then\n+    LIBIO_INCLUDES='-I$(top_builddir)/libio -I$(top_srcdir)/libio'\n+    AC_SUBST(LIBIO_INCLUDES)\n+  fi\n \n   # Now, export this to all the little Makefiles....\n-  AC_SUBST(GLIBCPP_INCLUDE_DIR)\n+  AC_SUBST(GLIBCPP_INCLUDES)\n   AC_SUBST(TOPLEVEL_INCLUDES)\n   AC_SUBST(LIBMATH_INCLUDES)\n   AC_SUBST(LIBSUPCXX_INCLUDES)\n-  AC_SUBST(LIBIO_INCLUDES)\n-  AC_SUBST(CSTD_INCLUDES)\n ])\n \n "}, {"sha": "9246654e195b991725e3c1b320a3ce6befe1fb6f", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=4a9d51090acc89a3bed7d1bae7f9d4e1da267243", "patch": "@@ -261,9 +261,6 @@\n /* Define if you have the asinl function.  */\n #undef HAVE_ASINL\n \n-/* Define if you have the atan2f function.  */\n-#undef HAVE_ATAN2F\n-\n /* Define if you have the atan2l function.  */\n #undef HAVE_ATAN2L\n \n@@ -306,9 +303,6 @@\n /* Define if you have the drand48 function.  */\n #undef HAVE_DRAND48\n \n-/* Define if you have the expf function.  */\n-#undef HAVE_EXPF\n-\n /* Define if you have the expl function.  */\n #undef HAVE_EXPL\n "}, {"sha": "59ebc933bfe359d607e17b7047bffd665db8c096", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 925, "deletions": 953, "changes": 1878, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=4a9d51090acc89a3bed7d1bae7f9d4e1da267243"}, {"sha": "f9de3833533db7e08e372760240b183780fa45d7", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 18, "deletions": 40, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=4a9d51090acc89a3bed7d1bae7f9d4e1da267243", "patch": "@@ -36,6 +36,10 @@ AC_CANONICAL_SYSTEM\n target_alias=${target_alias-$target}\n AC_SUBST(target_alias)\n \n+# Will set LN_S to either 'ln -s' or 'ln'.  With autoconf 2.50+, can also\n+# be 'cp -p' if linking isn't available.\n+AC_PROG_LN_S\n+\n # We use these options to decide which functions to include.\n AC_ARG_WITH(target-subdir,\n [  --with-target-subdir=SUBDIR\n@@ -53,8 +57,6 @@ AC_SUBST(enable_shared)\n AC_SUBST(enable_static)\n GLIBCPP_CHECK_GNU_MAKE\n \n-\n-\n AM_CONFIG_HEADER(config.h)\n \n # Check for c++ or library specific bits that don't require linking.\n@@ -79,7 +81,7 @@ if test -n \"$with_cross_host\" || test x\"$build\" != x\"$host\"; then\n   # compiler may not run on this machine, may not be able to link\n   # executables, or may produce executables we can't run on this\n   # machine.\n-  xcompiling=1\n+  GLIBCPP_IS_CROSS_COMPILING=1\n \n   # If Canadian cross, then don't pick up tools from the build\n   # directory.\n@@ -196,7 +198,7 @@ else\n   # We are being configured natively. We can do more elaborate tests\n   # that include AC_TRY_COMPILE now, as the linker is assumed to be\n   # working.\n-  xcompiling=0\n+  GLIBCPP_IS_CROSS_COMPILING=0\n   CANADIAN=no\n \n   # Check for available headers.\n@@ -219,15 +221,14 @@ else\n   AC_FUNC_MMAP\n fi\n \n-# Now that ctype is determined for all possible targets, we can do this...\n-AC_LINK_FILES($os_include_dir/bits/ctype_base.h, \\\n-include/bits/ctype_base.h)\n-AC_LINK_FILES($os_include_dir/bits/ctype_inline.h, \\\n-include/bits/ctype_inline.h)\n-AC_LINK_FILES($os_include_dir/bits/ctype_noninline.h, \\\n-include/bits/ctype_noninline.h)\n-AC_LINK_FILES($ATOMICITYH/bits/atomicity.h, include/bits/atomicity.h)\n+# Propagate the target-specific source directories through the build chain.\n+OS_INC_SRCDIR=$os_include_dir/bits\n+ATOMICITY_INC_SRCDIR=$ATOMICITYH/bits\n+AC_SUBST(OS_INC_SRCDIR)\n+AC_SUBST(ATOMICITY_INC_SRCDIR)\n \n+# Set up cross-compile flags\n+AC_SUBST(GLIBCPP_IS_CROSS_COMPILING)\n AM_CONDITIONAL(CANADIAN, test \"$CANADIAN\" = yes)\n  \n AC_CACHE_SAVE\n@@ -239,9 +240,6 @@ else\n   multilib_arg=\n fi\n \n-\n-# Generate the various Makefiles, include files, and scripts.\n-\n # Needed so that g++ can find the correct include subdir automatically.\n INTERFACE=v3\n \n@@ -260,20 +258,16 @@ else\n fi\n AC_SUBST(LIBSUPCXX_PICFLAGS)\n \n-# This should be done by mkincludedir, but hack around it now.\n-blddir=`pwd`\n-echo \"checking for $blddir/include\"\n-\n-if test ! -d \"$blddir/include\"; then\n-  mkdir \"$blddir/include\"\n-fi\n-\n+# Generate the various Makefiles, include files, and scripts.\n # NB: Multilibs need MULTISUBDIR defined correctly in src/Makefile.am\n # and libsupc++/Makefile.am so that multilib installs will end up\n # installed in the correct place. To work around this not being passed\n # down from config-ml.in -> top_srcdir/Makefile.am ->\n # top_srcdir/{src,libsupc++}/Makefile.am, manually append it here.\n-AC_OUTPUT(Makefile src/Makefile libmath/Makefile libio/Makefile libsupc++/Makefile testsuite/Makefile mkcheck testsuite_flags,\n+AC_OUTPUT(Makefile \\\n+    include/Makefile src/Makefile \\\n+    libmath/Makefile libio/Makefile libsupc++/Makefile \\\n+    testsuite/Makefile mkcheck testsuite_flags,\n [if test -n \"$CONFIG_FILES\"; then\n   ac_file=Makefile . ${glibcpp_basedir}/../config-ml.in\n   grep '^MULTISUBDIR =' Makefile >> src/Makefile\n@@ -294,22 +288,6 @@ CXX=\"${CXX}\"\n )\n \n \n-# Generate bits/c++config.h\n-# NB: This must be the first generated file as others include it. . .\n-$srcdir/mkc++config $blddir $srcdir\n-\n-# Generate bits/std_limits.h and src/limitsMEMBERS.cc\n-if test ! -f stamp-limits; then\n-  $srcdir/mknumeric_limits $blddir $srcdir $xcompiling\n-  if test ! -f include/bits/std_limits.h; then\n-    echo \"mknumeric_limits failed to execute properly: exiting\"\n-    exit 1\n-  else\n-    touch stamp-limits \n-  fi\n-fi\n-\n-\n # Sanity checking & User-visible messages.\n # Checks down here, otherwise they get scrolled off before\n # the user will notice."}, {"sha": "00d8eb63303991355a1ddc61007f34cc1bd61fd1", "filename": "libstdc++-v3/include/Makefile.am", "status": "added", "additions": 437, "deletions": 0, "changes": 437, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=4a9d51090acc89a3bed7d1bae7f9d4e1da267243", "patch": "@@ -0,0 +1,437 @@\n+## Makefile for the include subdirectory of the GNU C++ Standard library.\n+##\n+## Copyright (C) 2001 Free Software Foundation, Inc.\n+##\n+## This file is part of the libstdc++ version 3 distribution.\n+## Process this file with automake to produce Makefile.in.\n+\n+## This file is part of the GNU ISO C++ Library.  This library is free\n+## software; you can redistribute it and/or modify it under the\n+## terms of the GNU General Public License as published by the\n+## Free Software Foundation; either version 2, or (at your option)\n+## any later version.\n+\n+## This library is distributed in the hope that it will be useful,\n+## but WITHOUT ANY WARRANTY; without even the implied warranty of\n+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+## GNU General Public License for more details.\n+\n+## You should have received a copy of the GNU General Public License along\n+## with this library; see the file COPYING.  If not, write to the Free\n+## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+## USA.\n+\n+## $Id$\n+\n+AUTOMAKE_OPTIONS = 1.3 gnits\n+MAINT_CHARSET = latin1\n+\n+mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n+\n+# Cross compiler and multilib support.\n+CXX = @glibcpp_CXX@\n+glibcpp_srcdir=@glibcpp_srcdir@\n+glibcpp_builddir=@glibcpp_builddir@\n+\n+bits_srcdir = ${glibcpp_srcdir}/include/bits\n+bits_builddir = ./bits\n+bits_headers = \\\n+\t${bits_srcdir}/basic_file.h \\\n+\t${bits_srcdir}/basic_ios.h \\\n+\t${bits_srcdir}/basic_ios.tcc \\\n+\t${bits_srcdir}/basic_string.h \\\n+\t${bits_srcdir}/basic_string.tcc \\\n+\t${bits_srcdir}/boost_concept_check.h \\\n+\t${bits_srcdir}/char_traits.h \\\n+\t${bits_srcdir}/codecvt.h \\\n+\t${bits_srcdir}/concept_check.h \\\n+\t${bits_srcdir}/cpp_type_traits.h \\\n+\t${bits_srcdir}/fpos.h \\\n+\t${bits_srcdir}/fstream.tcc \\\n+\t${bits_srcdir}/functexcept.h \\\n+\t${bits_srcdir}/generic_shadow.h \\\n+\t${bits_srcdir}/gslice.h \\\n+\t${bits_srcdir}/gslice_array.h \\\n+\t${bits_srcdir}/indirect_array.h \\\n+\t${bits_srcdir}/ios_base.h \\\n+\t${bits_srcdir}/istream.tcc \\\n+\t${bits_srcdir}/locale_facets.h \\\n+\t${bits_srcdir}/locale_facets.tcc \\\n+\t${bits_srcdir}/localefwd.h \\\n+\t${bits_srcdir}/mask_array.h \\\n+\t${bits_srcdir}/ostream.tcc \\\n+\t${bits_srcdir}/pthread_allocimpl.h \\\n+\t${bits_srcdir}/stream_iterator.h \\\n+\t${bits_srcdir}/streambuf_iterator.h \\\n+\t${bits_srcdir}/slice.h \\\n+\t${bits_srcdir}/slice_array.h \\\n+\t${bits_srcdir}/sstream.tcc \\\n+\t${bits_srcdir}/std_algorithm.h \\\n+\t${bits_srcdir}/std_bitset.h \\\n+\t${bits_srcdir}/std_complex.h \\\n+\t${bits_srcdir}/std_deque.h \\\n+\t${bits_srcdir}/std_fstream.h \\\n+\t${bits_srcdir}/std_functional.h \\\n+\t${bits_srcdir}/std_iomanip.h \\\n+\t${bits_srcdir}/std_ios.h \\\n+\t${bits_srcdir}/std_iosfwd.h \\\n+\t${bits_srcdir}/std_iostream.h \\\n+\t${bits_srcdir}/std_istream.h \\\n+\t${bits_srcdir}/std_iterator.h \\\n+\t${bits_srcdir}/std_list.h \\\n+\t${bits_srcdir}/std_locale.h \\\n+\t${bits_srcdir}/std_map.h \\\n+\t${bits_srcdir}/std_memory.h \\\n+\t${bits_srcdir}/std_numeric.h \\\n+\t${bits_srcdir}/std_ostream.h \\\n+\t${bits_srcdir}/std_queue.h \\\n+\t${bits_srcdir}/std_set.h \\\n+\t${bits_srcdir}/std_sstream.h \\\n+\t${bits_srcdir}/std_stack.h \\\n+\t${bits_srcdir}/std_stdexcept.h \\\n+\t${bits_srcdir}/std_streambuf.h \\\n+\t${bits_srcdir}/std_string.h \\\n+\t${bits_srcdir}/std_utility.h \\\n+\t${bits_srcdir}/std_valarray.h \\\n+\t${bits_srcdir}/std_vector.h \\\n+\t${bits_srcdir}/stl_algo.h \\\n+\t${bits_srcdir}/stl_algobase.h \\\n+\t${bits_srcdir}/stl_alloc.h \\\n+\t${bits_srcdir}/stl_bvector.h \\\n+\t${bits_srcdir}/stl_construct.h \\\n+\t${bits_srcdir}/stl_deque.h \\\n+\t${bits_srcdir}/stl_function.h \\\n+\t${bits_srcdir}/stl_heap.h \\\n+\t${bits_srcdir}/stl_iterator.h \\\n+\t${bits_srcdir}/stl_iterator_base_funcs.h \\\n+\t${bits_srcdir}/stl_iterator_base_types.h \\\n+\t${bits_srcdir}/stl_list.h \\\n+\t${bits_srcdir}/stl_map.h \\\n+\t${bits_srcdir}/stl_multimap.h \\\n+\t${bits_srcdir}/stl_multiset.h \\\n+\t${bits_srcdir}/stl_numeric.h \\\n+\t${bits_srcdir}/stl_pair.h \\\n+\t${bits_srcdir}/stl_pthread_alloc.h \\\n+\t${bits_srcdir}/stl_queue.h \\\n+\t${bits_srcdir}/stl_raw_storage_iter.h \\\n+\t${bits_srcdir}/stl_relops.h \\\n+\t${bits_srcdir}/stl_set.h \\\n+\t${bits_srcdir}/stl_stack.h \\\n+\t${bits_srcdir}/stl_tempbuf.h \\\n+\t${bits_srcdir}/stl_threads.h \\\n+\t${bits_srcdir}/stl_tree.h \\\n+\t${bits_srcdir}/stl_uninitialized.h \\\n+\t${bits_srcdir}/stl_vector.h \\\n+\t${bits_srcdir}/streambuf.tcc \\\n+\t${bits_srcdir}/stringfwd.h \\\n+\t${bits_srcdir}/type_traits.h \\\n+\t${bits_srcdir}/valarray_array.h \\\n+\t${bits_srcdir}/valarray_array.tcc \\\n+\t${bits_srcdir}/valarray_meta.h\n+\n+backward_srcdir = ${glibcpp_srcdir}/include/backward\n+backward_builddir = ./backward\n+backward_headers = \\\n+\t${backward_srcdir}/complex.h \\\n+\t${backward_srcdir}/iomanip.h \\\n+\t${backward_srcdir}/istream.h \\\n+\t${backward_srcdir}/ostream.h \\\n+\t${backward_srcdir}/stream.h \\\n+\t${backward_srcdir}/streambuf.h \\\n+\t${backward_srcdir}/algo.h \\\n+\t${backward_srcdir}/algobase.h \\\n+\t${backward_srcdir}/alloc.h \\\n+\t${backward_srcdir}/bvector.h \\\n+\t${backward_srcdir}/defalloc.h \\\n+\t${backward_srcdir}/deque.h \\\n+\t${backward_srcdir}/function.h \\\n+\t${backward_srcdir}/hash_map.h \\\n+\t${backward_srcdir}/hash_set.h \\\n+\t${backward_srcdir}/hashtable.h \\\n+\t${backward_srcdir}/heap.h \\\n+\t${backward_srcdir}/iostream.h \\\n+\t${backward_srcdir}/iterator.h \\\n+\t${backward_srcdir}/list.h \\\n+\t${backward_srcdir}/map.h \\\n+\t${backward_srcdir}/multimap.h \\\n+\t${backward_srcdir}/new.h \\\n+\t${backward_srcdir}/multiset.h \\\n+\t${backward_srcdir}/pair.h \\\n+\t${backward_srcdir}/queue.h \\\n+\t${backward_srcdir}/rope.h \\\n+\t${backward_srcdir}/set.h \\\n+\t${backward_srcdir}/slist.h \\\n+\t${backward_srcdir}/stack.h \\\n+\t${backward_srcdir}/tempbuf.h \\\n+\t${backward_srcdir}/tree.h \\\n+\t${backward_srcdir}/vector.h \\\n+\t${backward_srcdir}/fstream.h \\\n+\t${backward_srcdir}/strstream.h \\\n+\t${backward_srcdir}/strstream \\\n+\t${backward_srcdir}/backward_warning.h\n+\n+ext_srcdir = ${glibcpp_srcdir}/include/ext\n+ext_builddir = ./ext\n+ext_headers = \\\n+\t${ext_srcdir}/rope \\\n+\t${ext_srcdir}/ropeimpl.h \\\n+\t${ext_srcdir}/stl_rope.h \\\n+\t${ext_srcdir}/slist \\\n+\t${ext_srcdir}/hash_map \\\n+\t${ext_srcdir}/hash_set \\\n+\t${ext_srcdir}/stl_hashtable.h \\\n+\t${ext_srcdir}/stl_hash_fun.h\n+\n+# This is the common subset of files that all three \"C\" header models use.\n+c_base_srcdir = @C_INCLUDE_DIR@/bits\n+c_base_builddir = ./bits\n+c_base_headers = \\\n+\t${c_base_srcdir}/std_cassert.h \\\n+\t${c_base_srcdir}/std_cctype.h \\\n+\t${c_base_srcdir}/std_cerrno.h \\\n+\t${c_base_srcdir}/std_cfloat.h \\\n+\t${c_base_srcdir}/std_climits.h \\\n+\t${c_base_srcdir}/std_clocale.h \\\n+\t${c_base_srcdir}/std_cmath.h \\\n+\t${c_base_srcdir}/std_csetjmp.h \\\n+\t${c_base_srcdir}/std_csignal.h \\\n+\t${c_base_srcdir}/std_cstdarg.h \\\n+\t${c_base_srcdir}/std_cstddef.h \\\n+\t${c_base_srcdir}/std_cstdio.h \\\n+\t${c_base_srcdir}/std_cstdlib.h \\\n+\t${c_base_srcdir}/std_cstring.h \\\n+\t${c_base_srcdir}/std_ctime.h \\\n+\t${c_base_srcdir}/std_cwchar.h \\\n+\t${c_base_srcdir}/std_cwctype.h \\\n+\t${c_base_srcdir}/cmath.tcc \n+\n+##c_compatibility_srcdir = ${glibcpp_srcdir}/include/c_compatibility\n+##c_compatibility_builddir = ./\n+##c_compatibility_headers = \\\n+##\t${c_compatibility_srcdir}/assert.h \\\n+##\t${c_compatibility_srcdir}/ctype.h \\\n+##\t${c_compatibility_srcdir}/errno.h \\\n+##\t${c_compatibility_srcdir}/float.h \\\n+##\t${c_compatibility_srcdir}/limits.h \\\n+##\t${c_compatibility_srcdir}/locale.h \\\n+##\t${c_compatibility_srcdir}/math.h \\\n+##\t${c_compatibility_srcdir}/setjmp.h \\\n+##\t${c_compatibility_srcdir}/signal.h \\\n+##\t${c_compatibility_srcdir}/stdarg.h \\\n+##\t${c_compatibility_srcdir}/stddef.h \\\n+##\t${c_compatibility_srcdir}/stdio.h \\\n+##\t${c_compatibility_srcdir}/stdlib.h \\\n+##\t${c_compatibility_srcdir}/string.h \\\n+##\t${c_compatibility_srcdir}/time.h \\\n+##\t${c_compatibility_srcdir}/wchar.h \\\n+##\t${c_compatibility_srcdir}/wctype.h \n+\n+std_srcdir = ${glibcpp_srcdir}/include/std\n+std_builddir = ./\n+std_headers = \\\n+\t${std_srcdir}/algorithm \\\n+\t${std_srcdir}/bitset \\\n+\t${std_srcdir}/complex \\\n+\t${std_srcdir}/deque \\\n+\t${std_srcdir}/fstream \\\n+\t${std_srcdir}/functional \\\n+\t${std_srcdir}/iomanip \\\n+\t${std_srcdir}/ios \\\n+\t${std_srcdir}/iosfwd \\\n+\t${std_srcdir}/iostream \\\n+\t${std_srcdir}/istream \\\n+\t${std_srcdir}/iterator \\\n+\t${std_srcdir}/limits \\\n+\t${std_srcdir}/list \\\n+\t${std_srcdir}/locale \\\n+\t${std_srcdir}/map \\\n+\t${std_srcdir}/memory \\\n+\t${std_srcdir}/numeric \\\n+\t${std_srcdir}/ostream \\\n+\t${std_srcdir}/queue \\\n+\t${std_srcdir}/set \\\n+\t${std_srcdir}/sstream \\\n+\t${std_srcdir}/stack \\\n+\t${std_srcdir}/stdexcept \\\n+\t${std_srcdir}/streambuf \\\n+\t${std_srcdir}/string \\\n+\t${std_srcdir}/utility \\\n+\t${std_srcdir}/valarray \\\n+\t${std_srcdir}/vector \\\n+\t${std_srcdir}/cassert \\\n+\t${std_srcdir}/cctype \\\n+\t${std_srcdir}/cerrno \\\n+\t${std_srcdir}/cfloat \\\n+\t${std_srcdir}/climits \\\n+\t${std_srcdir}/clocale \\\n+\t${std_srcdir}/ciso646 \\\n+\t${std_srcdir}/cmath \\\n+\t${std_srcdir}/csetjmp \\\n+\t${std_srcdir}/csignal \\\n+\t${std_srcdir}/cstdarg \\\n+\t${std_srcdir}/cstddef \\\n+\t${std_srcdir}/cstdio \\\n+\t${std_srcdir}/cstdlib \\\n+\t${std_srcdir}/cstring \\\n+\t${std_srcdir}/ctime \\\n+\t${std_srcdir}/cwchar \\\n+\t${std_srcdir}/cwctype\n+\n+target_srcdir = ${glibcpp_srcdir}/@OS_INC_SRCDIR@\n+target_builddir = ./${target_alias}/bits\n+target_headers = \\\n+\t${target_srcdir}/ctype_base.h \\\n+\t${target_srcdir}/ctype_inline.h \\\n+\t${target_srcdir}/ctype_noninline.h \\\n+\t${target_srcdir}/os_defines.h \\\n+\t${glibcpp_srcdir}/@ATOMICITY_INC_SRCDIR@/atomicity.h\n+\n+thread_builddir = ./${target_alias}/bits\n+thread_headers = \\\n+\t${thread_builddir}/gthr.h \\\n+\t${thread_builddir}/gthr-single.h \\\n+\t${thread_builddir}/gthr-default.h\n+\n+# List of all timestamp files.  By keeping only one copy of this list, both\n+# CLEANFILES and all-local are kept up-to-date.\n+# XXX stamp-c_compatibility \n+allstamps = stamp-std stamp-bits stamp-c_base stamp-backward stamp-ext \\\n+\tstamp-target stamp-thread stamp-file_model stamp-io stamp-locale\n+\n+# By adding these files here, automake will remove them for 'make clean'\n+CLEANFILES = ${allstamps}\n+\n+# Here are the rules for building the headers\n+all-local: \\\n+\t${target_builddir}/c++config.h \\\n+\t${target_builddir}/std_limits.h \\\n+\t${allstamps}\n+\n+stamp-std: ${std_headers}\n+\t@if [ ! -d \"${std_builddir}\" ]; then \\\n+\t  mkdir -p ${std_builddir} ;\\\n+\tfi ;\\\n+\t(cd ${std_builddir} && @LN_S@ $? .) ;\\\n+\techo `date` > stamp-std\n+\n+stamp-bits: ${bits_headers}\n+\t@if [ ! -d \"${bits_builddir}\" ]; then \\\n+\t  mkdir -p ${bits_builddir} ;\\\n+\tfi ;\\\n+\t(cd ${bits_builddir} && @LN_S@ $? .) ;\\\n+\techo `date` > stamp-bits\n+\n+stamp-c_base: ${c_base_headers}\n+\t@if [ ! -d \"${c_base_builddir}\" ]; then \\\n+\t  mkdir -p ${c_base_builddir} ;\\\n+\tfi ;\\\n+\t(cd ${c_base_builddir} && @LN_S@ $? .) ;\\\n+\techo `date` > stamp-c_base\n+\n+stamp-c_compatibility: ${c_compatibility_headers}\n+\t@if [ ! -d \"${c_compatibility_builddir}\" ]; then \\\n+\t  mkdir -p ${c_compatibility_builddir} ;\\\n+\tfi ;\\\n+\t(cd ${c_compatibility_builddir} && @LN_S@ $? .) ;\\\n+\techo `date` > stamp-c_compatibility\n+\n+stamp-backward: ${backward_headers}\n+\t@if [ ! -d \"${backward_builddir}\" ]; then \\\n+\t  mkdir -p ${backward_builddir} ;\\\n+\tfi ;\\\n+\t(cd ${backward_builddir} && @LN_S@ $? .) ;\\\n+\techo `date` > stamp-backward\n+\n+stamp-ext: ${ext_headers}\n+\t@if [ ! -d \"${ext_builddir}\" ]; then \\\n+\t  mkdir -p ${ext_builddir} ;\\\n+\tfi ;\\\n+\t(cd ${ext_builddir} && @LN_S@ $? .) ;\\\n+\techo `date` > stamp-ext\n+\n+# Can't use $? in command, otherwise target_builddir will trigger it, and\n+# we get bizarre symlinks mazes.\n+stamp-target: ${target_headers} ${target_builddir}\n+\t@(cd ${target_builddir} && @LN_S@ ${target_headers} .) ;\\\n+\techo `date` > stamp-target\n+\n+stamp-thread: ${thread_headers} ${thread_builddir}\n+\t@echo `date` > stamp-thread\n+\n+stamp-file_model: ${glibcpp_srcdir}/@BASIC_FILE_H@ ${target_builddir}\n+\t@(cd ${target_builddir} && @LN_S@ ${glibcpp_srcdir}/@BASIC_FILE_H@ basic_file_model.h) ;\\\n+\techo `date` > stamp-file_model\n+\n+stamp-io: ${glibcpp_srcdir}/@CSTDIO_H@ ${target_builddir}\n+\t@(cd ${target_builddir} && @LN_S@ ${glibcpp_srcdir}/@CSTDIO_H@ c++io.h) ;\\\n+\techo `date` > stamp-io\n+\n+stamp-locale: ${glibcpp_srcdir}/@CLOCALE_H@ ${target_builddir}\n+\t@(cd ${target_builddir} && @LN_S@ ${glibcpp_srcdir}/@CLOCALE_H@ c++locale.h) ;\\\n+\techo `date` > stamp-locale\n+\n+# This target is kinda special.  The timestamp on a directory gets modified\n+# whenever a file it contains gets modified, and that'll throw off all the\n+# build dependencies that need this target.  On the other hand, someone\n+# could delete the directory and not the stamp file, faking out the make.\n+${target_builddir}: stamp-${target_alias}\n+\n+stamp-${target_alias}:\n+\t@if [ ! -d ${target_builddir} ]; then \\\n+\t  mkdir -p ${target_builddir} ;\\\n+\tfi\n+\techo `date` > stamp-${target_alias}\n+\n+${target_builddir}/c++config.h: ${glibcpp_builddir}/config.h \\\n+\t\t\t\t${glibcpp_srcdir}/include/bits/c++config \\\n+\t\t\t\t${target_builddir}\n+\t@cat ${glibcpp_srcdir}/include/bits/c++config > $@ ;\\\n+\tsed -e 's/HAVE_/_GLIBCPP_HAVE_/g' \\\n+\t    -e 's/PACKAGE/_GLIBCPP_PACKAGE/g' \\\n+\t    -e 's/VERSION/_GLIBCPP_VERSION/g' \\\n+\t    -e 's/WORDS_/_GLIBCPP_WORDS_/g' \\\n+\t    < ${glibcpp_builddir}/config.h >> $@ ;\\\n+\techo \"#endif // _CPP_CPPCONFIG_\" >>$@\n+\n+# This tool leaves the header in the wrong place, but rather than fix the\n+# tool, the destination get massaged here.\n+${target_builddir}/std_limits.h: ${target_builddir}/c++config.h \\\n+\t\t\t\t stamp-target ${target_builddir}\n+\tCC=\"$(CC) -I${glibcpp_builddir} -I${target_builddir}/..\" \\\n+\t${glibcpp_srcdir}/mknumeric_limits \\\n+\t${glibcpp_builddir} ${glibcpp_srcdir} @GLIBCPP_IS_CROSS_COMPILING@ ;\\\n+\tmv ${glibcpp_builddir}/include/bits/std_limits.h ${target_builddir}\n+\n+glibcpp_thread_h = @glibcpp_thread_h@\n+uppercase = [ABCDEFGHIJKLMNOPQRSTUVWXYZ_]\n+\n+${thread_builddir}/gthr.h:\n+\tsed -e '/^#/s/\\(${uppercase}${uppercase}*\\)/_GLIBCPP_\\1/g' \\\n+\t    -e 's,^#include \"\\(.*\\)\",#include <bits/\\1>,g' \\\n+\t    < ${glibcpp_srcdir}/../gcc/gthr.h > $@\n+\n+${thread_builddir}/gthr-single.h:\n+\tsed -e 's/\\(UNUSED\\)/_GLIBCPP_\\1/g' \\\n+\t    -e 's/\\(GCC${uppercase}*_H\\)/_GLIBCPP_\\1/g' \\\n+\t    < ${glibcpp_srcdir}/../gcc/gthr-single.h > $@\n+\n+${thread_builddir}/gthr-default.h:\n+\tsed -e 's/\\(UNUSED\\)/_GLIBCPP_\\1/g' \\\n+\t    -e 's/\\(GCC${uppercase}*_H\\)/_GLIBCPP_\\1/g' \\\n+\t    -e 's/\\(${uppercase}*WEAK\\)/_GLIBCPP_\\1/g' \\\n+\t    < ${glibcpp_srcdir}/../gcc/${glibcpp_thread_h} > $@\n+\n+# One big happy istallation:  just copy everything from the build to the\n+# install tree (except for the build stamps).\n+gxx_include_dir = @gxx_include_dir@\n+\n+install-data-local:\n+\tfor file in `find . ! -name stamp-\\* -print`; do \\\n+\tinstallFile=${gxx_include_dir}/$${file} ;\\\n+\tif [ -d $${file} ]; then \\\n+\t  $(INSTALL) -d $${installFile} ;\\\n+\telse \\\n+\t  $(INSTALL_DATA) $${file} $${installFile} ;\\\n+\tfi ;\\\n+\tdone\n+"}, {"sha": "c145b78008b328daded28e28abaff624a8c33292", "filename": "libstdc++-v3/include/Makefile.in", "status": "added", "additions": 625, "deletions": 0, "changes": 625, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=4a9d51090acc89a3bed7d1bae7f9d4e1da267243", "patch": "@@ -0,0 +1,625 @@\n+# Makefile.in generated automatically by automake 1.4 from Makefile.am\n+\n+# Copyright (C) 1994, 1995-8, 1999 Free Software Foundation, Inc.\n+# This Makefile.in is free software; the Free Software Foundation\n+# gives unlimited permission to copy and/or distribute it,\n+# with or without modifications, as long as this notice is preserved.\n+\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY, to the extent permitted by law; without\n+# even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+# PARTICULAR PURPOSE.\n+\n+\n+SHELL = @SHELL@\n+\n+srcdir = @srcdir@\n+top_srcdir = @top_srcdir@\n+VPATH = @srcdir@\n+prefix = @prefix@\n+exec_prefix = @exec_prefix@\n+\n+bindir = @bindir@\n+sbindir = @sbindir@\n+libexecdir = @libexecdir@\n+datadir = @datadir@\n+sysconfdir = @sysconfdir@\n+sharedstatedir = @sharedstatedir@\n+localstatedir = @localstatedir@\n+libdir = @libdir@\n+infodir = @infodir@\n+mandir = @mandir@\n+includedir = @includedir@\n+oldincludedir = /usr/include\n+\n+DESTDIR =\n+\n+pkgdatadir = $(datadir)/@PACKAGE@\n+pkglibdir = $(libdir)/@PACKAGE@\n+pkgincludedir = $(includedir)/@PACKAGE@\n+\n+top_builddir = ..\n+\n+ACLOCAL = @ACLOCAL@\n+AUTOCONF = @AUTOCONF@\n+AUTOMAKE = @AUTOMAKE@\n+AUTOHEADER = @AUTOHEADER@\n+\n+INSTALL = @INSTALL@\n+INSTALL_PROGRAM = @INSTALL_PROGRAM@ $(AM_INSTALL_PROGRAM_FLAGS)\n+INSTALL_DATA = @INSTALL_DATA@\n+INSTALL_SCRIPT = @INSTALL_SCRIPT@\n+transform = @program_transform_name@\n+\n+NORMAL_INSTALL = :\n+PRE_INSTALL = :\n+POST_INSTALL = :\n+NORMAL_UNINSTALL = :\n+PRE_UNINSTALL = :\n+POST_UNINSTALL = :\n+build_alias = @build_alias@\n+build_triplet = @build@\n+host_alias = @host_alias@\n+host_triplet = @host@\n+target_alias = @target_alias@\n+target_triplet = @target@\n+AR = @AR@\n+AS = @AS@\n+ATOMICITY_INC_SRCDIR = @ATOMICITY_INC_SRCDIR@\n+BASIC_FILE_H = @BASIC_FILE_H@\n+CC = @CC@\n+CCODECVT_C = @CCODECVT_C@\n+CLOCALE_H = @CLOCALE_H@\n+CPP = @CPP@\n+CSHADOW_FLAGS = @CSHADOW_FLAGS@\n+CSTDIO_H = @CSTDIO_H@\n+CXXCPP = @CXXCPP@\n+C_INCLUDE_DIR = @C_INCLUDE_DIR@\n+DEBUG_FLAGS = @DEBUG_FLAGS@\n+DLLTOOL = @DLLTOOL@\n+EXEEXT = @EXEEXT@\n+EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n+GCJ = @GCJ@\n+GCJFLAGS = @GCJFLAGS@\n+GLIBCPP_INCLUDES = @GLIBCPP_INCLUDES@\n+GLIBCPP_IS_CROSS_COMPILING = @GLIBCPP_IS_CROSS_COMPILING@\n+LIBIO_INCLUDES = @LIBIO_INCLUDES@\n+LIBMATHOBJS = @LIBMATHOBJS@\n+LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n+LIBSTRINGOBJS = @LIBSTRINGOBJS@\n+LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n+LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n+LIBTOOL = @LIBTOOL@\n+LN_S = @LN_S@\n+MAINT = @MAINT@\n+MAKEINFO = @MAKEINFO@\n+OBJDUMP = @OBJDUMP@\n+OBJEXT = @OBJEXT@\n+OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n+OPT_LDFLAGS = @OPT_LDFLAGS@\n+OS_INC_SRCDIR = @OS_INC_SRCDIR@\n+PACKAGE = @PACKAGE@\n+RANLIB = @RANLIB@\n+SECTION_FLAGS = @SECTION_FLAGS@\n+SECTION_LDFLAGS = @SECTION_LDFLAGS@\n+STRIP = @STRIP@\n+TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n+USE_COMPLEX_LONG_DOUBLE = @USE_COMPLEX_LONG_DOUBLE@\n+VERSION = @VERSION@\n+WARN_FLAGS = @WARN_FLAGS@\n+WERROR = @WERROR@\n+enable_shared = @enable_shared@\n+enable_static = @enable_static@\n+glibcpp_CXX = @glibcpp_CXX@\n+glibcpp_basedir = @glibcpp_basedir@\n+glibcpp_prefixdir = @glibcpp_prefixdir@\n+glibcpp_toolexecdir = @glibcpp_toolexecdir@\n+glibcpp_toolexeclibdir = @glibcpp_toolexeclibdir@\n+ifGNUmake = @ifGNUmake@\n+libio_la = @libio_la@\n+toplevel_srcdir = @toplevel_srcdir@\n+\n+AUTOMAKE_OPTIONS = 1.3 gnits\n+MAINT_CHARSET = latin1\n+\n+mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n+\n+# Cross compiler and multilib support.\n+CXX = @glibcpp_CXX@\n+glibcpp_srcdir = @glibcpp_srcdir@\n+glibcpp_builddir = @glibcpp_builddir@\n+\n+bits_srcdir = ${glibcpp_srcdir}/include/bits\n+bits_builddir = ./bits\n+bits_headers = \\\n+\t${bits_srcdir}/basic_file.h \\\n+\t${bits_srcdir}/basic_ios.h \\\n+\t${bits_srcdir}/basic_ios.tcc \\\n+\t${bits_srcdir}/basic_string.h \\\n+\t${bits_srcdir}/basic_string.tcc \\\n+\t${bits_srcdir}/boost_concept_check.h \\\n+\t${bits_srcdir}/char_traits.h \\\n+\t${bits_srcdir}/codecvt.h \\\n+\t${bits_srcdir}/concept_check.h \\\n+\t${bits_srcdir}/cpp_type_traits.h \\\n+\t${bits_srcdir}/fpos.h \\\n+\t${bits_srcdir}/fstream.tcc \\\n+\t${bits_srcdir}/functexcept.h \\\n+\t${bits_srcdir}/generic_shadow.h \\\n+\t${bits_srcdir}/gslice.h \\\n+\t${bits_srcdir}/gslice_array.h \\\n+\t${bits_srcdir}/indirect_array.h \\\n+\t${bits_srcdir}/ios_base.h \\\n+\t${bits_srcdir}/istream.tcc \\\n+\t${bits_srcdir}/locale_facets.h \\\n+\t${bits_srcdir}/locale_facets.tcc \\\n+\t${bits_srcdir}/localefwd.h \\\n+\t${bits_srcdir}/mask_array.h \\\n+\t${bits_srcdir}/ostream.tcc \\\n+\t${bits_srcdir}/pthread_allocimpl.h \\\n+\t${bits_srcdir}/stream_iterator.h \\\n+\t${bits_srcdir}/streambuf_iterator.h \\\n+\t${bits_srcdir}/slice.h \\\n+\t${bits_srcdir}/slice_array.h \\\n+\t${bits_srcdir}/sstream.tcc \\\n+\t${bits_srcdir}/std_algorithm.h \\\n+\t${bits_srcdir}/std_bitset.h \\\n+\t${bits_srcdir}/std_complex.h \\\n+\t${bits_srcdir}/std_deque.h \\\n+\t${bits_srcdir}/std_fstream.h \\\n+\t${bits_srcdir}/std_functional.h \\\n+\t${bits_srcdir}/std_iomanip.h \\\n+\t${bits_srcdir}/std_ios.h \\\n+\t${bits_srcdir}/std_iosfwd.h \\\n+\t${bits_srcdir}/std_iostream.h \\\n+\t${bits_srcdir}/std_istream.h \\\n+\t${bits_srcdir}/std_iterator.h \\\n+\t${bits_srcdir}/std_list.h \\\n+\t${bits_srcdir}/std_locale.h \\\n+\t${bits_srcdir}/std_map.h \\\n+\t${bits_srcdir}/std_memory.h \\\n+\t${bits_srcdir}/std_numeric.h \\\n+\t${bits_srcdir}/std_ostream.h \\\n+\t${bits_srcdir}/std_queue.h \\\n+\t${bits_srcdir}/std_set.h \\\n+\t${bits_srcdir}/std_sstream.h \\\n+\t${bits_srcdir}/std_stack.h \\\n+\t${bits_srcdir}/std_stdexcept.h \\\n+\t${bits_srcdir}/std_streambuf.h \\\n+\t${bits_srcdir}/std_string.h \\\n+\t${bits_srcdir}/std_utility.h \\\n+\t${bits_srcdir}/std_valarray.h \\\n+\t${bits_srcdir}/std_vector.h \\\n+\t${bits_srcdir}/stl_algo.h \\\n+\t${bits_srcdir}/stl_algobase.h \\\n+\t${bits_srcdir}/stl_alloc.h \\\n+\t${bits_srcdir}/stl_bvector.h \\\n+\t${bits_srcdir}/stl_construct.h \\\n+\t${bits_srcdir}/stl_deque.h \\\n+\t${bits_srcdir}/stl_function.h \\\n+\t${bits_srcdir}/stl_heap.h \\\n+\t${bits_srcdir}/stl_iterator.h \\\n+\t${bits_srcdir}/stl_iterator_base_funcs.h \\\n+\t${bits_srcdir}/stl_iterator_base_types.h \\\n+\t${bits_srcdir}/stl_list.h \\\n+\t${bits_srcdir}/stl_map.h \\\n+\t${bits_srcdir}/stl_multimap.h \\\n+\t${bits_srcdir}/stl_multiset.h \\\n+\t${bits_srcdir}/stl_numeric.h \\\n+\t${bits_srcdir}/stl_pair.h \\\n+\t${bits_srcdir}/stl_pthread_alloc.h \\\n+\t${bits_srcdir}/stl_queue.h \\\n+\t${bits_srcdir}/stl_raw_storage_iter.h \\\n+\t${bits_srcdir}/stl_relops.h \\\n+\t${bits_srcdir}/stl_set.h \\\n+\t${bits_srcdir}/stl_stack.h \\\n+\t${bits_srcdir}/stl_tempbuf.h \\\n+\t${bits_srcdir}/stl_threads.h \\\n+\t${bits_srcdir}/stl_tree.h \\\n+\t${bits_srcdir}/stl_uninitialized.h \\\n+\t${bits_srcdir}/stl_vector.h \\\n+\t${bits_srcdir}/streambuf.tcc \\\n+\t${bits_srcdir}/stringfwd.h \\\n+\t${bits_srcdir}/type_traits.h \\\n+\t${bits_srcdir}/valarray_array.h \\\n+\t${bits_srcdir}/valarray_array.tcc \\\n+\t${bits_srcdir}/valarray_meta.h\n+\n+\n+backward_srcdir = ${glibcpp_srcdir}/include/backward\n+backward_builddir = ./backward\n+backward_headers = \\\n+\t${backward_srcdir}/complex.h \\\n+\t${backward_srcdir}/iomanip.h \\\n+\t${backward_srcdir}/istream.h \\\n+\t${backward_srcdir}/ostream.h \\\n+\t${backward_srcdir}/stream.h \\\n+\t${backward_srcdir}/streambuf.h \\\n+\t${backward_srcdir}/algo.h \\\n+\t${backward_srcdir}/algobase.h \\\n+\t${backward_srcdir}/alloc.h \\\n+\t${backward_srcdir}/bvector.h \\\n+\t${backward_srcdir}/defalloc.h \\\n+\t${backward_srcdir}/deque.h \\\n+\t${backward_srcdir}/function.h \\\n+\t${backward_srcdir}/hash_map.h \\\n+\t${backward_srcdir}/hash_set.h \\\n+\t${backward_srcdir}/hashtable.h \\\n+\t${backward_srcdir}/heap.h \\\n+\t${backward_srcdir}/iostream.h \\\n+\t${backward_srcdir}/iterator.h \\\n+\t${backward_srcdir}/list.h \\\n+\t${backward_srcdir}/map.h \\\n+\t${backward_srcdir}/multimap.h \\\n+\t${backward_srcdir}/new.h \\\n+\t${backward_srcdir}/multiset.h \\\n+\t${backward_srcdir}/pair.h \\\n+\t${backward_srcdir}/queue.h \\\n+\t${backward_srcdir}/rope.h \\\n+\t${backward_srcdir}/set.h \\\n+\t${backward_srcdir}/slist.h \\\n+\t${backward_srcdir}/stack.h \\\n+\t${backward_srcdir}/tempbuf.h \\\n+\t${backward_srcdir}/tree.h \\\n+\t${backward_srcdir}/vector.h \\\n+\t${backward_srcdir}/fstream.h \\\n+\t${backward_srcdir}/strstream.h \\\n+\t${backward_srcdir}/strstream \\\n+\t${backward_srcdir}/backward_warning.h\n+\n+\n+ext_srcdir = ${glibcpp_srcdir}/include/ext\n+ext_builddir = ./ext\n+ext_headers = \\\n+\t${ext_srcdir}/rope \\\n+\t${ext_srcdir}/ropeimpl.h \\\n+\t${ext_srcdir}/stl_rope.h \\\n+\t${ext_srcdir}/slist \\\n+\t${ext_srcdir}/hash_map \\\n+\t${ext_srcdir}/hash_set \\\n+\t${ext_srcdir}/stl_hashtable.h \\\n+\t${ext_srcdir}/stl_hash_fun.h\n+\n+\n+# This is the common subset of files that all three \"C\" header models use.\n+c_base_srcdir = @C_INCLUDE_DIR@/bits\n+c_base_builddir = ./bits\n+c_base_headers = \\\n+\t${c_base_srcdir}/std_cassert.h \\\n+\t${c_base_srcdir}/std_cctype.h \\\n+\t${c_base_srcdir}/std_cerrno.h \\\n+\t${c_base_srcdir}/std_cfloat.h \\\n+\t${c_base_srcdir}/std_climits.h \\\n+\t${c_base_srcdir}/std_clocale.h \\\n+\t${c_base_srcdir}/std_cmath.h \\\n+\t${c_base_srcdir}/std_csetjmp.h \\\n+\t${c_base_srcdir}/std_csignal.h \\\n+\t${c_base_srcdir}/std_cstdarg.h \\\n+\t${c_base_srcdir}/std_cstddef.h \\\n+\t${c_base_srcdir}/std_cstdio.h \\\n+\t${c_base_srcdir}/std_cstdlib.h \\\n+\t${c_base_srcdir}/std_cstring.h \\\n+\t${c_base_srcdir}/std_ctime.h \\\n+\t${c_base_srcdir}/std_cwchar.h \\\n+\t${c_base_srcdir}/std_cwctype.h \\\n+\t${c_base_srcdir}/cmath.tcc \n+\n+\n+std_srcdir = ${glibcpp_srcdir}/include/std\n+std_builddir = ./\n+std_headers = \\\n+\t${std_srcdir}/algorithm \\\n+\t${std_srcdir}/bitset \\\n+\t${std_srcdir}/complex \\\n+\t${std_srcdir}/deque \\\n+\t${std_srcdir}/fstream \\\n+\t${std_srcdir}/functional \\\n+\t${std_srcdir}/iomanip \\\n+\t${std_srcdir}/ios \\\n+\t${std_srcdir}/iosfwd \\\n+\t${std_srcdir}/iostream \\\n+\t${std_srcdir}/istream \\\n+\t${std_srcdir}/iterator \\\n+\t${std_srcdir}/limits \\\n+\t${std_srcdir}/list \\\n+\t${std_srcdir}/locale \\\n+\t${std_srcdir}/map \\\n+\t${std_srcdir}/memory \\\n+\t${std_srcdir}/numeric \\\n+\t${std_srcdir}/ostream \\\n+\t${std_srcdir}/queue \\\n+\t${std_srcdir}/set \\\n+\t${std_srcdir}/sstream \\\n+\t${std_srcdir}/stack \\\n+\t${std_srcdir}/stdexcept \\\n+\t${std_srcdir}/streambuf \\\n+\t${std_srcdir}/string \\\n+\t${std_srcdir}/utility \\\n+\t${std_srcdir}/valarray \\\n+\t${std_srcdir}/vector \\\n+\t${std_srcdir}/cassert \\\n+\t${std_srcdir}/cctype \\\n+\t${std_srcdir}/cerrno \\\n+\t${std_srcdir}/cfloat \\\n+\t${std_srcdir}/climits \\\n+\t${std_srcdir}/clocale \\\n+\t${std_srcdir}/ciso646 \\\n+\t${std_srcdir}/cmath \\\n+\t${std_srcdir}/csetjmp \\\n+\t${std_srcdir}/csignal \\\n+\t${std_srcdir}/cstdarg \\\n+\t${std_srcdir}/cstddef \\\n+\t${std_srcdir}/cstdio \\\n+\t${std_srcdir}/cstdlib \\\n+\t${std_srcdir}/cstring \\\n+\t${std_srcdir}/ctime \\\n+\t${std_srcdir}/cwchar \\\n+\t${std_srcdir}/cwctype\n+\n+\n+target_srcdir = ${glibcpp_srcdir}/@OS_INC_SRCDIR@\n+target_builddir = ./${target_alias}/bits\n+target_headers = \\\n+\t${target_srcdir}/ctype_base.h \\\n+\t${target_srcdir}/ctype_inline.h \\\n+\t${target_srcdir}/ctype_noninline.h \\\n+\t${target_srcdir}/os_defines.h \\\n+\t${glibcpp_srcdir}/@ATOMICITY_INC_SRCDIR@/atomicity.h\n+\n+\n+thread_builddir = ./${target_alias}/bits\n+thread_headers = \\\n+\t${thread_builddir}/gthr.h \\\n+\t${thread_builddir}/gthr-single.h \\\n+\t${thread_builddir}/gthr-default.h\n+\n+\n+# List of all timestamp files.  By keeping only one copy of this list, both\n+# CLEANFILES and all-local are kept up-to-date.\n+# XXX stamp-c_compatibility \n+allstamps = stamp-std stamp-bits stamp-c_base stamp-backward stamp-ext \\\n+\tstamp-target stamp-thread stamp-file_model stamp-io stamp-locale\n+\n+\n+# By adding these files here, automake will remove them for 'make clean'\n+CLEANFILES = ${allstamps}\n+\n+glibcpp_thread_h = @glibcpp_thread_h@\n+uppercase = [ABCDEFGHIJKLMNOPQRSTUVWXYZ_]\n+\n+# One big happy istallation:  just copy everything from the build to the\n+# install tree (except for the build stamps).\n+gxx_include_dir = @gxx_include_dir@\n+CONFIG_HEADER = ../config.h\n+CONFIG_CLEAN_FILES = \n+DIST_COMMON =  Makefile.am Makefile.in\n+\n+\n+DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n+\n+TAR = gtar\n+GZIP_ENV = --best\n+all: all-redirect\n+.SUFFIXES:\n+$(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ Makefile.am $(top_srcdir)/configure.in $(ACLOCAL_M4) \n+\tcd $(top_srcdir) && $(AUTOMAKE) --cygnus include/Makefile\n+\n+Makefile: $(srcdir)/Makefile.in  $(top_builddir)/config.status\n+\tcd $(top_builddir) \\\n+\t  && CONFIG_FILES=$(subdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status\n+\n+tags: TAGS\n+TAGS:\n+\n+\n+distdir = $(top_builddir)/$(PACKAGE)-$(VERSION)/$(subdir)\n+\n+subdir = include\n+\n+distdir: $(DISTFILES)\n+\t@for file in $(DISTFILES); do \\\n+\t  if test -f $$file; then d=.; else d=$(srcdir); fi; \\\n+\t  if test -d $$d/$$file; then \\\n+\t    cp -pr $$d/$$file $(distdir)/$$file; \\\n+\t  else \\\n+\t    test -f $(distdir)/$$file \\\n+\t    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \\\n+\t    || cp -p $$d/$$file $(distdir)/$$file || :; \\\n+\t  fi; \\\n+\tdone\n+info-am:\n+info: info-am\n+dvi-am:\n+dvi: dvi-am\n+check-am:\n+check: check-am\n+installcheck-am:\n+installcheck: installcheck-am\n+install-info-am: \n+install-info: install-info-am\n+install-exec-am:\n+install-exec: install-exec-am\n+\n+install-data-am: install-data-local\n+install-data: install-data-am\n+\n+install-am: all-am\n+\t@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am\n+install: install-am\n+uninstall-am:\n+uninstall: uninstall-am\n+all-am: Makefile all-local\n+all-redirect: all-am\n+install-strip:\n+\t$(MAKE) $(AM_MAKEFLAGS) AM_INSTALL_PROGRAM_FLAGS=-s install\n+installdirs:\n+\n+\n+mostlyclean-generic:\n+\n+clean-generic:\n+\t-test -z \"$(CLEANFILES)\" || rm -f $(CLEANFILES)\n+\n+distclean-generic:\n+\t-rm -f Makefile $(CONFIG_CLEAN_FILES)\n+\t-rm -f config.cache config.log stamp-h stamp-h[0-9]*\n+\n+maintainer-clean-generic:\n+mostlyclean-am:  mostlyclean-generic\n+\n+mostlyclean: mostlyclean-am\n+\n+clean-am:  clean-generic mostlyclean-am\n+\n+clean: clean-am\n+\n+distclean-am:  distclean-generic clean-am\n+\t-rm -f libtool\n+\n+distclean: distclean-am\n+\n+maintainer-clean-am:  maintainer-clean-generic distclean-am\n+\t@echo \"This command is intended for maintainers to use;\"\n+\t@echo \"it deletes files that may require special tools to rebuild.\"\n+\n+maintainer-clean: maintainer-clean-am\n+\n+.PHONY: tags distdir info-am info dvi-am dvi check check-am \\\n+installcheck-am installcheck install-info-am install-info \\\n+install-exec-am install-exec install-data-local install-data-am \\\n+install-data install-am install uninstall-am uninstall all-local \\\n+all-redirect all-am all installdirs mostlyclean-generic \\\n+distclean-generic clean-generic maintainer-clean-generic clean \\\n+mostlyclean distclean maintainer-clean\n+\n+\n+# Here are the rules for building the headers\n+all-local: \\\n+\t${target_builddir}/c++config.h \\\n+\t${target_builddir}/std_limits.h \\\n+\t${allstamps}\n+\n+stamp-std: ${std_headers}\n+\t@if [ ! -d \"${std_builddir}\" ]; then \\\n+\t  mkdir -p ${std_builddir} ;\\\n+\tfi ;\\\n+\t(cd ${std_builddir} && @LN_S@ $? .) ;\\\n+\techo `date` > stamp-std\n+\n+stamp-bits: ${bits_headers}\n+\t@if [ ! -d \"${bits_builddir}\" ]; then \\\n+\t  mkdir -p ${bits_builddir} ;\\\n+\tfi ;\\\n+\t(cd ${bits_builddir} && @LN_S@ $? .) ;\\\n+\techo `date` > stamp-bits\n+\n+stamp-c_base: ${c_base_headers}\n+\t@if [ ! -d \"${c_base_builddir}\" ]; then \\\n+\t  mkdir -p ${c_base_builddir} ;\\\n+\tfi ;\\\n+\t(cd ${c_base_builddir} && @LN_S@ $? .) ;\\\n+\techo `date` > stamp-c_base\n+\n+stamp-c_compatibility: ${c_compatibility_headers}\n+\t@if [ ! -d \"${c_compatibility_builddir}\" ]; then \\\n+\t  mkdir -p ${c_compatibility_builddir} ;\\\n+\tfi ;\\\n+\t(cd ${c_compatibility_builddir} && @LN_S@ $? .) ;\\\n+\techo `date` > stamp-c_compatibility\n+\n+stamp-backward: ${backward_headers}\n+\t@if [ ! -d \"${backward_builddir}\" ]; then \\\n+\t  mkdir -p ${backward_builddir} ;\\\n+\tfi ;\\\n+\t(cd ${backward_builddir} && @LN_S@ $? .) ;\\\n+\techo `date` > stamp-backward\n+\n+stamp-ext: ${ext_headers}\n+\t@if [ ! -d \"${ext_builddir}\" ]; then \\\n+\t  mkdir -p ${ext_builddir} ;\\\n+\tfi ;\\\n+\t(cd ${ext_builddir} && @LN_S@ $? .) ;\\\n+\techo `date` > stamp-ext\n+\n+# Can't use $? in command, otherwise target_builddir will trigger it, and\n+# we get bizarre symlinks mazes.\n+stamp-target: ${target_headers} ${target_builddir}\n+\t@(cd ${target_builddir} && @LN_S@ ${target_headers} .) ;\\\n+\techo `date` > stamp-target\n+\n+stamp-thread: ${thread_headers} ${thread_builddir}\n+\t@echo `date` > stamp-thread\n+\n+stamp-file_model: ${glibcpp_srcdir}/@BASIC_FILE_H@ ${target_builddir}\n+\t@(cd ${target_builddir} && @LN_S@ ${glibcpp_srcdir}/@BASIC_FILE_H@ basic_file_model.h) ;\\\n+\techo `date` > stamp-file_model\n+\n+stamp-io: ${glibcpp_srcdir}/@CSTDIO_H@ ${target_builddir}\n+\t@(cd ${target_builddir} && @LN_S@ ${glibcpp_srcdir}/@CSTDIO_H@ c++io.h) ;\\\n+\techo `date` > stamp-io\n+\n+stamp-locale: ${glibcpp_srcdir}/@CLOCALE_H@ ${target_builddir}\n+\t@(cd ${target_builddir} && @LN_S@ ${glibcpp_srcdir}/@CLOCALE_H@ c++locale.h) ;\\\n+\techo `date` > stamp-locale\n+\n+# This target is kinda special.  The timestamp on a directory gets modified\n+# whenever a file it contains gets modified, and that'll throw off all the\n+# build dependencies that need this target.  On the other hand, someone\n+# could delete the directory and not the stamp file, faking out the make.\n+${target_builddir}: stamp-${target_alias}\n+\n+stamp-${target_alias}:\n+\t@if [ ! -d ${target_builddir} ]; then \\\n+\t  mkdir -p ${target_builddir} ;\\\n+\tfi\n+\techo `date` > stamp-${target_alias}\n+\n+${target_builddir}/c++config.h: ${glibcpp_builddir}/config.h \\\n+\t\t\t\t${glibcpp_srcdir}/include/bits/c++config \\\n+\t\t\t\t${target_builddir}\n+\t@cat ${glibcpp_srcdir}/include/bits/c++config > $@ ;\\\n+\tsed -e 's/HAVE_/_GLIBCPP_HAVE_/g' \\\n+\t    -e 's/PACKAGE/_GLIBCPP_PACKAGE/g' \\\n+\t    -e 's/VERSION/_GLIBCPP_VERSION/g' \\\n+\t    -e 's/WORDS_/_GLIBCPP_WORDS_/g' \\\n+\t    < ${glibcpp_builddir}/config.h >> $@ ;\\\n+\techo \"#endif // _CPP_CPPCONFIG_\" >>$@\n+\n+# This tool leaves the header in the wrong place, but rather than fix the\n+# tool, the destination get massaged here.\n+${target_builddir}/std_limits.h: ${target_builddir}/c++config.h \\\n+\t\t\t\t stamp-target ${target_builddir}\n+\tCC=\"$(CC) -I${glibcpp_builddir} -I${target_builddir}/..\" \\\n+\t${glibcpp_srcdir}/mknumeric_limits \\\n+\t${glibcpp_builddir} ${glibcpp_srcdir} @GLIBCPP_IS_CROSS_COMPILING@ ;\\\n+\tmv ${glibcpp_builddir}/include/bits/std_limits.h ${target_builddir}\n+\n+${thread_builddir}/gthr.h:\n+\tsed -e '/^#/s/\\(${uppercase}${uppercase}*\\)/_GLIBCPP_\\1/g' \\\n+\t    -e 's,^#include \"\\(.*\\)\",#include <bits/\\1>,g' \\\n+\t    < ${glibcpp_srcdir}/../gcc/gthr.h > $@\n+\n+${thread_builddir}/gthr-single.h:\n+\tsed -e 's/\\(UNUSED\\)/_GLIBCPP_\\1/g' \\\n+\t    -e 's/\\(GCC${uppercase}*_H\\)/_GLIBCPP_\\1/g' \\\n+\t    < ${glibcpp_srcdir}/../gcc/gthr-single.h > $@\n+\n+${thread_builddir}/gthr-default.h:\n+\tsed -e 's/\\(UNUSED\\)/_GLIBCPP_\\1/g' \\\n+\t    -e 's/\\(GCC${uppercase}*_H\\)/_GLIBCPP_\\1/g' \\\n+\t    -e 's/\\(${uppercase}*WEAK\\)/_GLIBCPP_\\1/g' \\\n+\t    < ${glibcpp_srcdir}/../gcc/${glibcpp_thread_h} > $@\n+\n+install-data-local:\n+\tfor file in `find . ! -name stamp-\\* -print`; do \\\n+\tinstallFile=${gxx_include_dir}/$${file} ;\\\n+\tif [ -d $${file} ]; then \\\n+\t  $(INSTALL) -d $${installFile} ;\\\n+\telse \\\n+\t  $(INSTALL_DATA) $${file} $${installFile} ;\\\n+\tfi ;\\\n+\tdone\n+\n+# Tell versions [3.59,3.63) of GNU make to not export all variables.\n+# Otherwise a system limit (for SysV at least) may be exceeded.\n+.NOEXPORT:"}, {"sha": "dbba6ff51d7506d7e754e0545edbfa3f64008736", "filename": "libstdc++-v3/libio/Makefile.am", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2Flibio%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2Flibio%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.am?ref=4a9d51090acc89a3bed7d1bae7f9d4e1da267243", "patch": "@@ -32,18 +32,13 @@ noinst_LTLIBRARIES =\n endif\n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n-GLIBCPP_INCLUDE_DIR = @GLIBCPP_INCLUDE_DIR@\n-C_INCLUDE_DIR = @C_INCLUDE_DIR@\n+GLIBCPP_INCLUDES = @GLIBCPP_INCLUDES@\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n-LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n-LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n-CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n INCLUDES = \\\n \t-nostdinc++ \\\n-\t-I$(top_builddir)/include -I$(GLIBCPP_INCLUDE_DIR) \\\n-\t$(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n+\t$(GLIBCPP_INCLUDES) $(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n \n libio_headers = \\\n         libio.h libioP.h iolibio.h"}, {"sha": "53b9a869fa9e8af1d4f945a620e32e6efd0b4719", "filename": "libstdc++-v3/libio/Makefile.in", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.in?ref=4a9d51090acc89a3bed7d1bae7f9d4e1da267243", "patch": "@@ -65,20 +65,28 @@ target_alias = @target_alias@\n target_triplet = @target@\n AR = @AR@\n AS = @AS@\n+ATOMICITY_INC_SRCDIR = @ATOMICITY_INC_SRCDIR@\n+BASIC_FILE_H = @BASIC_FILE_H@\n CC = @CC@\n+CCODECVT_C = @CCODECVT_C@\n+CLOCALE_H = @CLOCALE_H@\n CPP = @CPP@\n CSHADOW_FLAGS = @CSHADOW_FLAGS@\n-CSTD_INCLUDES = @CSTD_INCLUDES@\n+CSTDIO_H = @CSTDIO_H@\n CXX = @CXX@\n CXXCPP = @CXXCPP@\n+C_INCLUDE_DIR = @C_INCLUDE_DIR@\n DEBUG_FLAGS = @DEBUG_FLAGS@\n DLLTOOL = @DLLTOOL@\n EXEEXT = @EXEEXT@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n GCJ = @GCJ@\n GCJFLAGS = @GCJFLAGS@\n+GLIBCPP_IS_CROSS_COMPILING = @GLIBCPP_IS_CROSS_COMPILING@\n LIBMATHOBJS = @LIBMATHOBJS@\n+LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n LIBSTRINGOBJS = @LIBSTRINGOBJS@\n+LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n LIBTOOL = @LIBTOOL@\n LN_S = @LN_S@\n@@ -88,6 +96,7 @@ OBJDUMP = @OBJDUMP@\n OBJEXT = @OBJEXT@\n OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n OPT_LDFLAGS = @OPT_LDFLAGS@\n+OS_INC_SRCDIR = @OS_INC_SRCDIR@\n PACKAGE = @PACKAGE@\n RANLIB = @RANLIB@\n SECTION_FLAGS = @SECTION_FLAGS@\n@@ -104,6 +113,7 @@ glibcpp_basedir = @glibcpp_basedir@\n glibcpp_builddir = @glibcpp_builddir@\n glibcpp_prefixdir = @glibcpp_prefixdir@\n glibcpp_srcdir = @glibcpp_srcdir@\n+glibcpp_thread_h = @glibcpp_thread_h@\n glibcpp_toolexecdir = @glibcpp_toolexecdir@\n glibcpp_toolexeclibdir = @glibcpp_toolexeclibdir@\n gxx_include_dir = @gxx_include_dir@\n@@ -114,26 +124,28 @@ toplevel_srcdir = @toplevel_srcdir@\n AUTOMAKE_OPTIONS = 1.3 cygnus\n \n mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n-@GLIBCPP_BUILD_LIBIO_TRUE@noinst_LTLIBRARIES = libio.la\n+@GLIBCPP_BUILD_LIBIO_TRUE@noinst_LTLIBRARIES = @GLIBCPP_BUILD_LIBIO_TRUE@libio.la\n @GLIBCPP_BUILD_LIBIO_FALSE@noinst_LTLIBRARIES = \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n-GLIBCPP_INCLUDE_DIR = @GLIBCPP_INCLUDE_DIR@\n-C_INCLUDE_DIR = @C_INCLUDE_DIR@\n+GLIBCPP_INCLUDES = @GLIBCPP_INCLUDES@\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n-LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n-LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n-CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES =  \t-nostdinc++ \t-I$(top_builddir)/include -I$(GLIBCPP_INCLUDE_DIR) \t$(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n+INCLUDES = \\\n+\t-nostdinc++ \\\n+\t$(GLIBCPP_INCLUDES) $(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n \n \n-libio_headers =          libio.h libioP.h iolibio.h\n+libio_headers = \\\n+        libio.h libioP.h iolibio.h\n \n-@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_SRCS = \tfiledoalloc.c genops.c fileops.c stdfiles.c c_codecvt.c \tiofclose.c iofopen.c \n+@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_SRCS = @GLIBCPP_NEED_LIBIO_TRUE@\\\n+@GLIBCPP_NEED_LIBIO_TRUE@\tfiledoalloc.c genops.c fileops.c stdfiles.c c_codecvt.c \\\n+@GLIBCPP_NEED_LIBIO_TRUE@\tiofclose.c iofopen.c \n @GLIBCPP_NEED_LIBIO_FALSE@LIBIO_SRCS = \n-@GLIBCPP_NEED_WLIBIO_TRUE@LIBIO_WSRCS = \twfiledoalloc.c wfileops.c wgenops.c iofwide.c\n+@GLIBCPP_NEED_WLIBIO_TRUE@LIBIO_WSRCS = @GLIBCPP_NEED_WLIBIO_TRUE@\\\n+@GLIBCPP_NEED_WLIBIO_TRUE@\twfiledoalloc.c wfileops.c wgenops.c iofwide.c\n @GLIBCPP_NEED_WLIBIO_FALSE@LIBIO_WSRCS = \n \n EXTRA_DIST = iostreamP.h"}, {"sha": "2f696f9e7a115507745b0b48d581b836467a6b3e", "filename": "libstdc++-v3/libmath/Makefile.am", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2Flibmath%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2Flibmath%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.am?ref=4a9d51090acc89a3bed7d1bae7f9d4e1da267243", "patch": "@@ -45,15 +45,8 @@ libmath_la_SOURCES = signbit.c signbitf.c stubs.c\n LINK = $(LIBTOOL) --mode=link \"$(CCLD)\" $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@\n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n-GLIBCPP_INCLUDE_DIR = @GLIBCPP_INCLUDE_DIR@\n-C_INCLUDE_DIR = @C_INCLUDE_DIR@\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n-LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n-LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n-LIBIO_INCLUDES = @LIBIO_INCLUDES@\n-CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n INCLUDES = \\\n-\t-I$(GLIBCPP_INCLUDE_DIR) -I$(top_builddir)/include  \\\n \t$(TOPLEVEL_INCLUDES) \n "}, {"sha": "ecdd410cbc051d7e67065a4ce68b71bc19e1b3c9", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=4a9d51090acc89a3bed7d1bae7f9d4e1da267243", "patch": "@@ -65,20 +65,30 @@ target_alias = @target_alias@\n target_triplet = @target@\n AR = @AR@\n AS = @AS@\n+ATOMICITY_INC_SRCDIR = @ATOMICITY_INC_SRCDIR@\n+BASIC_FILE_H = @BASIC_FILE_H@\n CC = @CC@\n+CCODECVT_C = @CCODECVT_C@\n+CLOCALE_H = @CLOCALE_H@\n CPP = @CPP@\n CSHADOW_FLAGS = @CSHADOW_FLAGS@\n-CSTD_INCLUDES = @CSTD_INCLUDES@\n+CSTDIO_H = @CSTDIO_H@\n CXX = @CXX@\n CXXCPP = @CXXCPP@\n+C_INCLUDE_DIR = @C_INCLUDE_DIR@\n DEBUG_FLAGS = @DEBUG_FLAGS@\n DLLTOOL = @DLLTOOL@\n EXEEXT = @EXEEXT@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n GCJ = @GCJ@\n GCJFLAGS = @GCJFLAGS@\n+GLIBCPP_INCLUDES = @GLIBCPP_INCLUDES@\n+GLIBCPP_IS_CROSS_COMPILING = @GLIBCPP_IS_CROSS_COMPILING@\n+LIBIO_INCLUDES = @LIBIO_INCLUDES@\n LIBMATHOBJS = @LIBMATHOBJS@\n+LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n LIBSTRINGOBJS = @LIBSTRINGOBJS@\n+LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n LIBTOOL = @LIBTOOL@\n LN_S = @LN_S@\n@@ -88,6 +98,7 @@ OBJDUMP = @OBJDUMP@\n OBJEXT = @OBJEXT@\n OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n OPT_LDFLAGS = @OPT_LDFLAGS@\n+OS_INC_SRCDIR = @OS_INC_SRCDIR@\n PACKAGE = @PACKAGE@\n RANLIB = @RANLIB@\n SECTION_FLAGS = @SECTION_FLAGS@\n@@ -104,6 +115,7 @@ glibcpp_basedir = @glibcpp_basedir@\n glibcpp_builddir = @glibcpp_builddir@\n glibcpp_prefixdir = @glibcpp_prefixdir@\n glibcpp_srcdir = @glibcpp_srcdir@\n+glibcpp_thread_h = @glibcpp_thread_h@\n glibcpp_toolexecdir = @glibcpp_toolexecdir@\n glibcpp_toolexeclibdir = @glibcpp_toolexeclibdir@\n gxx_include_dir = @gxx_include_dir@\n@@ -117,13 +129,18 @@ mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n \n noinst_LTLIBRARIES = libmath.la\n \n-EXTRA_LONG_DOUBLE_yes =  \thypotl.c signbitl.c\n+EXTRA_LONG_DOUBLE_yes = \\\n+\thypotl.c signbitl.c\n \n \n-EXTRA_DIST =  \thypot.c hypotf.c $(EXTRA_LONG_DOUBLE_yes) \n+EXTRA_DIST = \\\n+\thypot.c hypotf.c \\\n+\t$(EXTRA_LONG_DOUBLE_yes) \n \n \n-libmath_la_LIBADD =  \t@LIBMATHOBJS@ \t$(EXTRA_LONG_DOUBLE_$(USE_COMPLEX_LONG_DOUBLE)) \n+libmath_la_LIBADD = \\\n+\t@LIBMATHOBJS@ \\\n+\t$(EXTRA_LONG_DOUBLE_$(USE_COMPLEX_LONG_DOUBLE)) \n \n \n libmath_la_DEPENDENCIES = $(libmath_la_LIBADD)\n@@ -133,15 +150,10 @@ libmath_la_SOURCES = signbit.c signbitf.c stubs.c\n LINK = $(LIBTOOL) --mode=link \"$(CCLD)\" $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@\n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n-GLIBCPP_INCLUDE_DIR = @GLIBCPP_INCLUDE_DIR@\n-C_INCLUDE_DIR = @C_INCLUDE_DIR@\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n-LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n-LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n-LIBIO_INCLUDES = @LIBIO_INCLUDES@\n-CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES =  \t-I$(GLIBCPP_INCLUDE_DIR) -I$(top_builddir)/include  \t$(TOPLEVEL_INCLUDES) \n+INCLUDES = \\\n+\t$(TOPLEVEL_INCLUDES) \n \n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = "}, {"sha": "1e874990dd1820d63e814bd7a352d3f2e8e99f91", "filename": "libstdc++-v3/libmath/mathconf.h", "status": "modified", "additions": 27, "deletions": 26, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2Flibmath%2Fmathconf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2Flibmath%2Fmathconf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fmathconf.h?ref=4a9d51090acc89a3bed7d1bae7f9d4e1da267243", "patch": "@@ -1,6 +1,6 @@\n /* Configuration data for libmath subpart of libstdc++. */\n \n-/* Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n+/* Copyright (C) 1997-1999, 2000, 2001 Free Software Foundation, Inc.\n \n    This file is part of the GNU ISO C++ Library.  This library is free\n    software; you can redistribute it and/or modify it under the\n@@ -28,23 +28,23 @@\n    the GNU General Public License.  */\n \n \n-#include <bits/c++config.h>\n+#include <config.h>\n \n-#ifdef _GLIBCPP_HAVE_ENDIAN_H\n+#ifdef HAVE_ENDIAN_H\n # include <endian.h>\n #else\n-# ifdef _GLIBCPP_HAVE_MACHINE_ENDIAN_H\n+# ifdef HAVE_MACHINE_ENDIAN_H\n #  include <machine/endian.h>\n # else\n-#  ifdef _GLIBCPP_HAVE_SYS_MACHINE_H\n+#  ifdef HAVE_SYS_MACHINE_H\n #   include <sys/machine.h>\n #  else\n-#   if defined _GLIBCPP_HAVE_SYS_ISA_DEFS_H || defined _GLIBCPP_HAVE_MACHINE_PARAM_H\n+#   if defined HAVE_SYS_ISA_DEFS_H || defined HAVE_MACHINE_PARAM_H\n /* This is on Solaris.  */\n-#    ifdef _GLIBCPP_HAVE_SYS_ISA_DEFS_H\n+#    ifdef HAVE_SYS_ISA_DEFS_H\n #     include <sys/isa_defs.h>\n #    endif\n-#    ifdef _GLIBCPP_HAVE_MACHINE_PARAM_H\n+#    ifdef HAVE_MACHINE_PARAM_H\n #     include <machine/param.h>\n #    endif\n #    ifdef _LITTLE_ENDIAN\n@@ -72,7 +72,7 @@ typedef int Int32_t __attribute ((mode (SI)));\n typedef unsigned int U_int64_t __attribute ((mode (DI)));\n typedef int Int64_t __attribute ((mode (DI)));\n \n-#ifdef _GLIBCPP_HAVE_NAN_H\n+#ifdef HAVE_NAN_H\n # include <nan.h>\n #endif\n \n@@ -81,15 +81,15 @@ typedef int Int64_t __attribute ((mode (DI)));\n double nan (void);\n #endif\n \n-#ifdef _GLIBCPP_HAVE_IEEEFP_H\n+#ifdef HAVE_IEEEFP_H\n # include <ieeefp.h>\n #endif\n \n-#ifdef _GLIBCPP_HAVE_FP_H\n+#ifdef HAVE_FP_H\n # include <fp.h>\n #endif\n \n-#ifdef _GLIBCPP_HAVE_FLOAT_H\n+#ifdef HAVE_FLOAT_H\n # include <float.h>\n #endif\n \n@@ -262,49 +262,50 @@ do {\t\t\t\t\t\t\t\t\\\n   qw_u.value = (d);\t\t\t\t\t\t\\\n   (msw) = qw_u.parts64.msw;\t\t\t\t\t\\\n } while (0)\n-        \n+\n \n /* Replacement for non-existing float functions.  */\n-#if !defined(_GLIBCPP_HAVE_FABSF) && !defined(_GLIBCPP_HAVE___BUILTIN_FABSF)\n+#if !defined(HAVE_FABSF) && !defined(HAVE___BUILTIN_FABSF)\n # define fabsf(x) fabs (x)\n #endif\n-#if !defined(_GLIBCPP_HAVE_COSF) && !defined(_GLIBCPP_HAVE___BUILTIN_COSF)\n+#if !defined(HAVE_COSF) && !defined(HAVE___BUILTIN_COSF)\n # define cosf(x) cos (x)\n #endif\n-#ifndef _GLIBCPP_HAVE_COSHF\n+#ifndef HAVE_COSHF\n # define coshf(x) cosh (x)\n #endif\n-#ifndef _GLIBCPP_HAVE_EXPF\n+#ifndef HAVE_EXPF\n # define expf(x) expf (x)\n #endif\n-#ifndef _GLIBCPP_HAVE_LOGF\n+#ifndef HAVE_LOGF\n # define logf(x) log(x)\n #endif\n-#ifndef _GLIBCPP_HAVE_LOG10F\n+#ifndef HAVE_LOG10F\n # define log10f(x) log10 (x)\n #endif\n-#ifndef _GLIBCPP_HAVE_POWF\n+#ifndef HAVE_POWF\n # define powf(x, y) pow (x, y)\n #endif\n-#if !defined(_GLIBCPP_HAVE_SINF) && !defined(_GLIBCPP_HAVE___BUILTIN_SINF)\n+#if !defined(HAVE_SINF) && !defined(HAVE___BUILTIN_SINF)\n # define sinf(x) sin (x)\n #endif\n-#ifndef _GLIBCPP_HAVE_SINHF\n+#ifndef HAVE_SINHF\n # define sinhf(x) sinh (x)\n #endif\n-#if !defined(_GLIBCPP_HAVE_SQRTF) && !defined(_GLIBCPP_HAVE___BUILTIN_SQRTF)\n+#if !defined(HAVE_SQRTF) && !defined(HAVE___BUILTIN_SQRTF)\n # define sqrtf(x) sqrt (x)\n #endif\n-#ifndef _GLIBCPP_HAVE_TANF\n+#ifndef HAVE_TANF\n # define tanf(x) tan (x)\n #endif\n-#ifndef _GLIBCPP_HAVE_TANHF\n+#ifndef HAVE_TANHF\n # define tanhf(x) tanh (x)\n #endif\n-#ifndef _GLIBCPP_HAVE_STRTOF\n+#ifndef HAVE_STRTOF\n # define strtof(s, e) strtod (s, e)\n #endif\n \n #ifdef __cplusplus\n }\n #endif\n+"}, {"sha": "cba6f8441fcb83a23e00711aa2ace2ce384ba821", "filename": "libstdc++-v3/libmath/stubs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2Flibmath%2Fstubs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2Flibmath%2Fstubs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fstubs.c?ref=4a9d51090acc89a3bed7d1bae7f9d4e1da267243", "patch": "@@ -28,7 +28,7 @@\n    the GNU General Public License.  */\n \n #include <math.h>\n-#include <bits/c++config.h>\n+#include <config.h>\n \n #ifndef _GLIBCPP_HAVE_ATAN2F\n float"}, {"sha": "c6981a05b29868a229a8c75cb44095ea1c1cf163", "filename": "libstdc++-v3/libsupc++/Makefile.am", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am?ref=4a9d51090acc89a3bed7d1bae7f9d4e1da267243", "patch": "@@ -55,18 +55,12 @@ WARN_CXXFLAGS = \\\n \t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n-GLIBCPP_INCLUDE_DIR = @GLIBCPP_INCLUDE_DIR@\n-C_INCLUDE_DIR = @C_INCLUDE_DIR@\n-CSTD_INCLUDES = @CSTD_INCLUDES@\n-LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n+GLIBCPP_INCLUDES = @GLIBCPP_INCLUDES@\n LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n-LIBIO_INCLUDES = @LIBIO_INCLUDES@\n-TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n \n INCLUDES = \\\n \t-I$(toplevel_srcdir)/gcc -I$(toplevel_srcdir)/include \\\n-\t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \\\n-\t $(LIBSUPCXX_INCLUDES)\n+\t$(GLIBCPP_INCLUDES) $(LIBSUPCXX_INCLUDES)\n \n headers = \\\n \texception new typeinfo cxxabi.h exception_defines.h "}, {"sha": "c41b4f3aeb336abe37e6db70cb7cd59901168627", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 60, "deletions": 18, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=4a9d51090acc89a3bed7d1bae7f9d4e1da267243", "patch": "@@ -65,17 +65,26 @@ target_alias = @target_alias@\n target_triplet = @target@\n AR = @AR@\n AS = @AS@\n+ATOMICITY_INC_SRCDIR = @ATOMICITY_INC_SRCDIR@\n+BASIC_FILE_H = @BASIC_FILE_H@\n CC = @CC@\n+CCODECVT_C = @CCODECVT_C@\n+CLOCALE_H = @CLOCALE_H@\n CPP = @CPP@\n CSHADOW_FLAGS = @CSHADOW_FLAGS@\n+CSTDIO_H = @CSTDIO_H@\n CXXCPP = @CXXCPP@\n+C_INCLUDE_DIR = @C_INCLUDE_DIR@\n DEBUG_FLAGS = @DEBUG_FLAGS@\n DLLTOOL = @DLLTOOL@\n EXEEXT = @EXEEXT@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n GCJ = @GCJ@\n GCJFLAGS = @GCJFLAGS@\n+GLIBCPP_IS_CROSS_COMPILING = @GLIBCPP_IS_CROSS_COMPILING@\n+LIBIO_INCLUDES = @LIBIO_INCLUDES@\n LIBMATHOBJS = @LIBMATHOBJS@\n+LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n LIBSTRINGOBJS = @LIBSTRINGOBJS@\n LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n LIBTOOL = @LIBTOOL@\n@@ -85,11 +94,13 @@ MAKEINFO = @MAKEINFO@\n OBJDUMP = @OBJDUMP@\n OBJEXT = @OBJEXT@\n OPT_LDFLAGS = @OPT_LDFLAGS@\n+OS_INC_SRCDIR = @OS_INC_SRCDIR@\n PACKAGE = @PACKAGE@\n RANLIB = @RANLIB@\n SECTION_FLAGS = @SECTION_FLAGS@\n SECTION_LDFLAGS = @SECTION_LDFLAGS@\n STRIP = @STRIP@\n+TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n USE_COMPLEX_LONG_DOUBLE = @USE_COMPLEX_LONG_DOUBLE@\n VERSION = @VERSION@\n WARN_FLAGS = @WARN_FLAGS@\n@@ -101,6 +112,7 @@ glibcpp_basedir = @glibcpp_basedir@\n glibcpp_builddir = @glibcpp_builddir@\n glibcpp_prefixdir = @glibcpp_prefixdir@\n glibcpp_srcdir = @glibcpp_srcdir@\n+glibcpp_thread_h = @glibcpp_thread_h@\n glibcpp_toolexecdir = @glibcpp_toolexecdir@\n glibcpp_toolexeclibdir = @glibcpp_toolexeclibdir@\n gxx_include_dir = @gxx_include_dir@\n@@ -132,29 +144,50 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-CONFIG_CXXFLAGS =  \t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n+CONFIG_CXXFLAGS = \\\n+\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n \n \n # Warning flags to use.\n-WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n+WARN_CXXFLAGS = \\\n+\t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n-GLIBCPP_INCLUDE_DIR = @GLIBCPP_INCLUDE_DIR@\n-C_INCLUDE_DIR = @C_INCLUDE_DIR@\n-CSTD_INCLUDES = @CSTD_INCLUDES@\n-LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n+GLIBCPP_INCLUDES = @GLIBCPP_INCLUDES@\n LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n-LIBIO_INCLUDES = @LIBIO_INCLUDES@\n-TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n-\n-INCLUDES =  \t-I$(toplevel_srcdir)/gcc -I$(toplevel_srcdir)/include \t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \t $(LIBSUPCXX_INCLUDES)\n-\n-\n-headers =  \texception new typeinfo cxxabi.h exception_defines.h \n-\n \n-sources =  \tdel_op.cc \tdel_opnt.cc \tdel_opv.cc \tdel_opvnt.cc \teh_alloc.cc \teh_aux_runtime.cc \teh_catch.cc \teh_exception.cc \teh_globals.cc \teh_personality.cc \teh_terminate.cc \teh_throw.cc \tnew_handler.cc \tnew_op.cc \tnew_opnt.cc \tnew_opv.cc \tnew_opvnt.cc \tpure.cc \ttinfo.cc \ttinfo2.cc \tvec.cc\n+INCLUDES = \\\n+\t-I$(toplevel_srcdir)/gcc -I$(toplevel_srcdir)/include \\\n+\t$(GLIBCPP_INCLUDES) $(LIBSUPCXX_INCLUDES)\n+\n+\n+headers = \\\n+\texception new typeinfo cxxabi.h exception_defines.h \n+\n+\n+sources = \\\n+\tdel_op.cc \\\n+\tdel_opnt.cc \\\n+\tdel_opv.cc \\\n+\tdel_opvnt.cc \\\n+\teh_alloc.cc \\\n+\teh_aux_runtime.cc \\\n+\teh_catch.cc \\\n+\teh_exception.cc \\\n+\teh_globals.cc \\\n+\teh_personality.cc \\\n+\teh_terminate.cc \\\n+\teh_throw.cc \\\n+\tnew_handler.cc \\\n+\tnew_op.cc \\\n+\tnew_opnt.cc \\\n+\tnew_opv.cc \\\n+\tnew_opvnt.cc \\\n+\tpure.cc \\\n+\ttinfo.cc \\\n+\ttinfo2.cc \\\n+\tvec.cc\n \n \n libsupc___la_SOURCES = $(sources)\n@@ -170,7 +203,12 @@ LIBSUPCXX_CXXFLAGS = $(LIBSUPCXX_PICFLAGS)\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n # as the occasion call for it. (ie, --enable-debug)\n-AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n+AM_CXXFLAGS = \\\n+\t-fno-implicit-templates \\\n+\t$(LIBSUPCXX_CXXFLAGS) \\\n+\t$(WARN_CXXFLAGS) \\\n+\t$(OPTIMIZE_CXXFLAGS) \\\n+\t$(CONFIG_CXXFLAGS) \n \n \n # libstdc++ libtool notes\n@@ -194,7 +232,9 @@ AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS)\n #\n # We have to put --tag disable-shared after --tag CXX lest things\n # CXX undo the affect of disable-shared.\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared                --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared \\\n+               --mode=compile $(CXX) $(INCLUDES) \\\n+\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # 3) We'd have a problem when building the shared libstdc++ object if\n@@ -203,7 +243,9 @@ LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared                --mode=c\n # course is problematic at this point.  So, we get the top-level\n # directory to configure libstdc++-v3 to use gcc as the C++\n # compilation driver.\n-CXXLINK = $(LIBTOOL) --tag CXX --tag disable-shared           --mode=link $(CXX)           @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --tag CXX --tag disable-shared \\\n+          --mode=link $(CXX) \\\n+          @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = "}, {"sha": "b7a11a46da679f04425d698b4141679930cc89e6", "filename": "libstdc++-v3/mkc++config", "status": "removed", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1568d79b849057c16e3e4796b4c2b4335bb3a4ca/libstdc%2B%2B-v3%2Fmkc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1568d79b849057c16e3e4796b4c2b4335bb3a4ca/libstdc%2B%2B-v3%2Fmkc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmkc%2B%2Bconfig?ref=1568d79b849057c16e3e4796b4c2b4335bb3a4ca", "patch": "@@ -1,62 +0,0 @@\n-#! /bin/sh\n-\n-# 2000-02-01 bkoz \n-# Script to take the generated \"config.h\" from autoconf and make the\n-# macros within it namespace safe (ie wrapping them in _GLIBCPP_ so\n-# that \"HAVE_LC_MESSAGES\" becomes \"_GLIBCPP_HAVE_LC_MESSAGES\" etc etc.\n-\n-echo \"running mkc++config\"\n-\n-BUILD_DIR=$1\n-if [ ! -d \"$BUILD_DIR\" ]; then\n-  echo \"build directory $BUILD_DIR not found, exiting.\"\n-  exit 1\n-fi\n-\n-SRC_DIR=$2\n-if [ ! -d \"$SRC_DIR\" ]; then\n-  echo \"source directory $SRC_DIR not found, exiting.\"\n-  exit 1\n-fi\n-\n-BASE_H=\"$SRC_DIR/include/bits/c++config\"\n-IN_H=\"$BUILD_DIR/config.h\"\n-OUT_H=\"$BUILD_DIR/include/bits/c++config.h\"\n-\n-if [ ! -f $IN_H ]; then\n-  echo \"necessary file $IN_H not found, exiting\"\n-  exit 1\n-fi\n-\n-if [ ! -d \"$BUILD_DIR/include\" ]; then\n-  mkdir  \"$BUILD_DIR/include\"\n-fi\n-\n-if [ ! -d \"$BUILD_DIR/include/bits\" ]; then\n-  mkdir  \"$BUILD_DIR/include/bits\"\n-fi\n-\n-\n-# Part 1\n-# sed config.h from autoconf and make it namespace safe.\n-sed 's/HAVE_/_GLIBCPP_HAVE_/g' < $IN_H > temp-1\n-sed 's/PACKAGE/_GLIBCPP_PACKAGE/g' < temp-1 > temp-2\n-sed 's/VERSION/_GLIBCPP_VERSION/g' < temp-2 > temp-3\n-sed 's/WORDS_/_GLIBCPP_WORDS_/g' < temp-3 > temp-4\n-\n-\n-# Part 2\n-# cat this into generated bits/c++config.h\n-cat $BASE_H temp-4 > $OUT_H\n-rm temp-1 temp-2 temp-3 temp-4\n-\n-\n-# Part 3\n-# complete macro guards for resulting file\n-cat <<EOF >> $OUT_H\n-\n-#endif // _CPP_CPPCONFIG_\n-EOF\n-\n-exit 0\n-"}, {"sha": "cb33463511347606fedede7c70aeb60dce7bc59d", "filename": "libstdc++-v3/mknumeric_limits", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2Fmknumeric_limits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2Fmknumeric_limits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmknumeric_limits?ref=4a9d51090acc89a3bed7d1bae7f9d4e1da267243", "patch": "@@ -54,7 +54,7 @@ CC=${CC=\"$BUILD_DIR/../../gcc/xgcc -B$BUILD_DIR/../../gcc/\"}\n cat <<EOF > $OUT_H-t\n // The template and inlines for the -*- C++ -*- numeric_limits classes.\n \n-// Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+// Copyright (C) 1999-2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -257,10 +257,10 @@ EOF\n \n # Must turn off exceptions, because the C++ exception handling support\n # routines have not been built yet.\n-echo \"$CC -I. $CPPFLAGS -I$BUILD_DIR/include -DHAVE_CONFIG_H -fno-exceptions \\\n+echo \"$CC -I$BUILD_DIR -fno-exceptions \\\n     -o $BUILD_DIR/src/gen-num-limits $SRC_DIR/src/gen-num-limits.cc\"\n \n-{ $CC -I. $CPPFLAGS -I$BUILD_DIR/include -DHAVE_CONFIG_H -fno-exceptions \\\n+{ $CC -I$BUILD_DIR -fno-exceptions \\\n     -o \"$BUILD_DIR/src/gen-num-limits\" \"$SRC_DIR/src/gen-num-limits.cc\"\n } || {\n   echo \"gen-num-limits failed to build, exiting.\""}, {"sha": "202cbcaa80896da29a4ac8e5991f5c7715ea160f", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 5, "deletions": 194, "changes": 199, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=4a9d51090acc89a3bed7d1bae7f9d4e1da267243", "patch": "@@ -21,7 +21,7 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n-## $Id: Makefile.am,v 1.88 2001/06/25 20:57:51 pme Exp $\n+## $Id: Makefile.am,v 1.89 2001/06/26 21:22:57 bkoz Exp $\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n@@ -49,122 +49,18 @@ WARN_CXXFLAGS = \\\n \t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n-GLIBCPP_INCLUDE_DIR = @GLIBCPP_INCLUDE_DIR@\n-C_INCLUDE_DIR = @C_INCLUDE_DIR@\n-CSTD_INCLUDES = @CSTD_INCLUDES@\n+GLIBCPP_INCLUDES = @GLIBCPP_INCLUDES@\n LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n \n INCLUDES = \\\n \t-nostdinc++ \\\n-\t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \\\n+\t$(GLIBCPP_INCLUDES) \\\n \t$(LIBSUPCXX_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \\\n \t$(TOPLEVEL_INCLUDES)\n \n-base_headers = \\\n-\tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \\\n-\tbits/stringfwd.h bits/std_string.h bits/basic_string.h \\\n-\tbits/basic_string.tcc \\\n-\tbits/generic_shadow.h bits/std_utility.h \\\n-\tbits/std_complex.h \\\n-\tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \\\n-\tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \\\n-\tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \\\n-\tbits/std_fstream.h bits/std_iomanip.h \\\n-\tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \\\n-\tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \\\n-\tbits/std_istream.h bits/istream.tcc bits/std_locale.h \\\n-\tbits/fstream.tcc bits/ostream.tcc bits/sstream.tcc \\\n-\tbits/stream_iterator.h bits/streambuf_iterator.h \\\n-\tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \\\n-\tbits/streambuf.tcc bits/basic_file.h \\\n-\tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \\\n-\tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \\\n-\tbits/stl_threads.h \\\n-\tbits/stl_iterator_base_types.h bits/stl_iterator_base_funcs.h \\\n-\tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \\\n-\tbits/std_iterator.h bits/std_list.h \\\n-\tbits/std_map.h bits/std_memory.h bits/std_numeric.h \\\n-\tbits/std_queue.h bits/std_set.h bits/std_stack.h \\\n-\tbits/std_stdexcept.h bits/functexcept.h bits/std_vector.h \\\n-\tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \\\n-\tbits/stl_deque.h bits/stl_function.h \\\n-\tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \\\n-\tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \\\n-\tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \\\n-\tbits/stl_relops.h bits/stl_set.h bits/stl_stack.h bits/stl_tempbuf.h \\\n-\tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \\\n-\tbits/stl_bvector.h bits/type_traits.h bits/std_algorithm.h \\\n-\tbits/stl_construct.h bits/boost_concept_check.h bits/concept_check.h\n-\n-\n-backward_headers = \\\n-\tbackward/complex.h backward/iomanip.h backward/istream.h \\\n-\tbackward/ostream.h backward/stream.h backward/streambuf.h \\\n-\tbackward/algo.h backward/algobase.h backward/alloc.h \\\n-\tbackward/bvector.h backward/defalloc.h backward/deque.h \\\n-\tbackward/function.h backward/hash_map.h backward/hash_set.h \\\n-\tbackward/hashtable.h backward/heap.h backward/iostream.h \\\n-\tbackward/iterator.h backward/list.h backward/map.h \\\n-\tbackward/multimap.h backward/new.h backward/multiset.h \\\n-\tbackward/pair.h backward/queue.h backward/rope.h backward/set.h \\\n-\tbackward/slist.h backward/stack.h backward/tempbuf.h backward/tree.h \\\n-\tbackward/vector.h backward/fstream.h backward/strstream.h \\\n-\tbackward/strstream backward/backward_warning.h\n-\n-ext_headers = \\\n-\text/rope ext/ropeimpl.h ext/stl_rope.h \\\n-\text/slist ext/hash_map ext/hash_set \\\n-\text/stl_hashtable.h ext/stl_hash_fun.h \n-\n-c_base_headers = \\\n-\tbits/std_cassert.h bits/std_cctype.h bits/std_cerrno.h \\\n-\tbits/std_cfloat.h bits/std_climits.h bits/std_clocale.h \\\n-\tbits/std_cmath.h bits/std_csetjmp.h bits/std_csignal.h \\\n-\tbits/std_cstdarg.h bits/std_cstddef.h bits/std_cstdio.h \\\n-\tbits/std_cstdlib.h bits/std_cstring.h bits/std_ctime.h \\\n-\tbits/std_cwchar.h bits/std_cwctype.h bits/cmath.tcc\n-\n-if GLIBCPP_USE_CSHADOW\n-c_shadow_headers = \\\n-\tassert.h ctype.h errno.h float.h limits.h locale.h math.h setjmp.h \\\n-\tsignal.h stdarg.h stddef.h stdio.h stdlib.h string.h time.h wchar.h \\\n-\twctype.h fcntl.h libio.h iolibio.h libioP.h pthread.h iconv.h \\\n-\tfeatures.h langinfo.h \\\n-\tbits/wrap_libio.h bits/wrap_iolibio.h bits/wrap_libioP.h \\\n-\tbits/wrap_iconv.h bits/wrap_fcntl.h bits/wrap_pthread.h \\\n-\tbits/wrap_features.h bits/wrap_langinfo.h \\\n-\tsys/cdefs.h \n-else\n-c_shadow_headers =\n-endif\n-\n-std_headers = \\\n-\talgorithm bitset complex deque fstream functional \\\n-\tiomanip ios iosfwd iostream istream iterator limits list locale \\\n-\tmap memory numeric ostream queue set sstream stack stdexcept \\\n-\tstreambuf string utility valarray vector \\\n-\tcassert cctype cerrno cfloat climits clocale ciso646 \\\n-\tcmath csetjmp csignal cstdarg cstddef cstdio cstdlib \\\n-\tcstring ctime cwchar cwctype\n-\n-if GLIBCPP_NEED_LIBIO \n-libio_headers = \\\n-\t$(top_srcdir)/libio/_G_config.h $(top_srcdir)/libio/libio.h\n-else\n-libio_headers =\n-endif\n-\n-build_headers = \\\n-\tbits/std_limits.h \\\n-\tbits/c++config.h bits/c++io.h bits/c++locale.h \\\n-\tbits/gthr.h bits/gthr-single.h bits/gthr-default.h \\\n-\tbits/basic_file_model.h \\\n-\tbits/atomicity.h bits/os_defines.h \\\n-\tbits/ctype_base.h bits/ctype_noninline.h bits/ctype_inline.h \n-\n sources = \\\n \tbasic_file.cc bitset.cc c++locale.cc cmath.cc codecvt.cc \\\n \tcomplex_io.cc functexcept.cc globals.cc ios.cc limitsMEMBERS.cc \\\n@@ -173,7 +69,7 @@ sources = \\\n \twstring-inst.cc\n \n \n-VPATH = $(top_srcdir):$(top_srcdir)/src:$(GLIBCPP_INCLUDE_DIR):$(GLIBCPP_INCLUDE_DIR)/std:$(C_INCLUDE_DIR)\n+VPATH = $(top_srcdir):$(top_srcdir)/src\n \n libstdc___la_SOURCES = $(sources)\n \n@@ -188,97 +84,12 @@ libstdc___la_DEPENDENCIES = $(libstdc___la_LIBADD)\n \n # Use special rules for the deprecated source files so that they find\n # deprecated include files.\n+GLIBCPP_INCLUDE_DIR=@glibcpp_builddir@/include\n strstream.lo: strstream.cc\n \t$(LTCXXCOMPILE) -I$(GLIBCPP_INCLUDE_DIR)/backward -c $<\n strstream.o: strstream.cc\n \t$(CXXCOMPILE) -I$(GLIBCPP_INCLUDE_DIR)/backward -c $<\n \n-# Make sure cshadow headers are built first.\n-if GLIBCPP_USE_CSHADOW\n-CSHADOW_H = $(top_builddir)/stamp-cshadow\n-else\n-CSHADOW_H =\n-endif\n-\n-# Specify that all *.o's depend on this.\n-$(libstdc___la_OBJECTS): $(CSHADOW_H)\n-\n-$(top_builddir)/stamp-cshadow: $(top_srcdir)/mkinclosure \\\n-\t                       $(top_srcdir)/mkcshadow\n-\t$(top_srcdir)/mkinclosure \\\n-\t\"-I $(top_builddir)/../../gcc/include -I /usr/include -G fcntl.h unistd.h\" | $(top_srcdir)/mkcshadow;\n-\trm -f  $(top_builddir)/stamp-cshadow \n-\techo \"done\" > $(top_builddir)/stamp-cshadow \n-\n-\n-# Check for various configure bits that change where the headers get installed.\n-gxx_include_dir = @gxx_include_dir@\n-gxx_target_include_dir = $(gxx_include_dir)/$(target_alias)\n-\n-# We have our own special, ridiculously complicated installation routine\n-# here, as automake/autoconf is currently brain-damaged when it comes\n-# to installing sub-directories of headers. In particular, we want to\n-# 1) install build headers from (blddir)/include/bits -> (install)/bits\n-# 2) install source headers from\n-#      (srcdir)/include/bits -> (install)/bits\n-#      (srcdir)/include/ext -> (install)/ext\n-#      (srcdir)/include/backward -> (install)/backward\n-#      ... and the always entertaining \"C\" compatibility bits\n-#      where * represents configure-time directory switching\n-#      (srcdir)/include/c* -> (install)/\n-#      (srcdir)/include/c*/bits -> (install)/bits\n-#      (srcdir)/include/c*/sys -> (install)/sys\n-install-data-local: myinstalldirs myinstallheaders\n-\n-# NB: installation of shadow header directories is not attempted.\n-myinstalldirs:\n-\tif test -z \"$(MULTISUBDIR)\"; then \\\n-\t$(mkinstalldirs) $(DESTDIR)$(gxx_include_dir)/backward; \\\n-\t$(mkinstalldirs) $(DESTDIR)$(gxx_include_dir)/bits; \\\n-\t$(mkinstalldirs) $(DESTDIR)$(gxx_include_dir)/ext; \\\n-\t$(mkinstalldirs) $(DESTDIR)$(gxx_target_include_dir)/bits; \\\n-\tfi\n-\n-# NB: As libio_headers may be empty, need this to make sure bash doesn't\n-# choke on an empty for... loop by using libio_headers_install\n-# NB: installation of shadow headers is not attempted.\n-src_incdir = @GLIBCPP_INCLUDE_DIR@\n-bld_incdir = $(top_builddir)/include\n-c_incdir = @C_INCLUDE_DIR@\n-myinstallheaders: \n-\tif test -z \"$(MULTISUBDIR)\"; then \\\n-\tfor i in $(base_headers); do \\\n-\techo \"$(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)/bits/\";\\\n-\t  $(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)/bits/; \\\n-\tdone; \\\n-\tfor i in $(ext_headers); do \\\n-\techo \"$(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)/ext/\";\\\n-\t  $(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)/ext/; \\\n-\tdone; \\\n-\tfor i in $(backward_headers); do \\\n-\techo \"$(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)/backward/\";\\\n-\t  $(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)/backward/; \\\n-\tdone; \\\n-\tfor i in $(c_base_headers); do \\\n-\techo \"$(INSTALL_DATA) $(c_incdir)/$$i $(gxx_include_dir)/bits/\";\\\n-\t  $(INSTALL_DATA) $(c_incdir)/$$i $(gxx_include_dir)/bits/; \\\n-\tdone; \\\n-\tfor i in $(std_headers); do \\\n-\techo \"$(INSTALL_DATA) $(src_incdir)/std/$$i $(gxx_include_dir)\";\\\n-\t  $(INSTALL_DATA) $(src_incdir)/std/$$i $(gxx_include_dir); \\\n-\tdone; \\\n-\tfor i in $(build_headers); do \\\n-\techo \"$(INSTALL_DATA) $(bld_incdir)/$$i \\\n-\t  $(gxx_target_include_dir)/bits/\"; $(INSTALL_DATA) \\\n-\t  $(bld_incdir)/$$i $(gxx_target_include_dir)/bits/; \\\n-\tdone; \\\n-\tlibio_headers_install='$(libio_headers)'; \\\n-\tfor i in $$libio_headers_install; do \\\n-\techo \"$(INSTALL_DATA) $$i $(gxx_include_dir)\"; \\\n-\t  $(INSTALL_DATA) $$i $(gxx_include_dir); \\\n-\tdone; \\\n-\tfi;\n-\n \n # AM_CXXFLAGS needs to be in each subdirectory so that it can be\n # modified in a per-library or per-sub-library way.  Need to manually"}, {"sha": "1c9304ea15c5af0bfd7febac7ea24e80ee8097fd", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 48, "deletions": 122, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=4a9d51090acc89a3bed7d1bae7f9d4e1da267243", "patch": "@@ -64,16 +64,23 @@ target_alias = @target_alias@\n target_triplet = @target@\n AR = @AR@\n AS = @AS@\n+ATOMICITY_INC_SRCDIR = @ATOMICITY_INC_SRCDIR@\n+BASIC_FILE_H = @BASIC_FILE_H@\n CC = @CC@\n+CCODECVT_C = @CCODECVT_C@\n+CLOCALE_H = @CLOCALE_H@\n CPP = @CPP@\n CSHADOW_FLAGS = @CSHADOW_FLAGS@\n+CSTDIO_H = @CSTDIO_H@\n CXXCPP = @CXXCPP@\n+C_INCLUDE_DIR = @C_INCLUDE_DIR@\n DEBUG_FLAGS = @DEBUG_FLAGS@\n DLLTOOL = @DLLTOOL@\n EXEEXT = @EXEEXT@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n GCJ = @GCJ@\n GCJFLAGS = @GCJFLAGS@\n+GLIBCPP_IS_CROSS_COMPILING = @GLIBCPP_IS_CROSS_COMPILING@\n LIBMATHOBJS = @LIBMATHOBJS@\n LIBSTRINGOBJS = @LIBSTRINGOBJS@\n LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n@@ -84,6 +91,7 @@ MAKEINFO = @MAKEINFO@\n OBJDUMP = @OBJDUMP@\n OBJEXT = @OBJEXT@\n OPT_LDFLAGS = @OPT_LDFLAGS@\n+OS_INC_SRCDIR = @OS_INC_SRCDIR@\n PACKAGE = @PACKAGE@\n RANLIB = @RANLIB@\n SECTION_FLAGS = @SECTION_FLAGS@\n@@ -100,8 +108,10 @@ glibcpp_basedir = @glibcpp_basedir@\n glibcpp_builddir = @glibcpp_builddir@\n glibcpp_prefixdir = @glibcpp_prefixdir@\n glibcpp_srcdir = @glibcpp_srcdir@\n+glibcpp_thread_h = @glibcpp_thread_h@\n glibcpp_toolexecdir = @glibcpp_toolexecdir@\n glibcpp_toolexeclibdir = @glibcpp_toolexeclibdir@\n+gxx_include_dir = @gxx_include_dir@\n ifGNUmake = @ifGNUmake@\n libio_la = @libio_la@\n toplevel_srcdir = @toplevel_srcdir@\n@@ -124,73 +134,53 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-CONFIG_CXXFLAGS =  \t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n+CONFIG_CXXFLAGS = \\\n+\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n \n \n # Warning flags to use.\n-WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n+WARN_CXXFLAGS = \\\n+\t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n-GLIBCPP_INCLUDE_DIR = @GLIBCPP_INCLUDE_DIR@\n-C_INCLUDE_DIR = @C_INCLUDE_DIR@\n-CSTD_INCLUDES = @CSTD_INCLUDES@\n+GLIBCPP_INCLUDES = @GLIBCPP_INCLUDES@\n LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n \n-INCLUDES =  \t-nostdinc++ \t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \t$(LIBSUPCXX_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \t$(TOPLEVEL_INCLUDES)\n-\n-\n-base_headers =  \tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \tbits/stringfwd.h bits/std_string.h bits/basic_string.h \tbits/basic_string.tcc \tbits/generic_shadow.h bits/std_utility.h \tbits/std_complex.h \tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \tbits/std_fstream.h bits/std_iomanip.h \tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \tbits/std_istream.h bits/istream.tcc bits/std_locale.h \tbits/fstream.tcc bits/ostream.tcc bits/sstream.tcc \tbits/stream_iterator.h bits/streambuf_iterator.h \tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \tbits/streambuf.tcc bits/basic_file.h \tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \tbits/stl_threads.h \tbits/stl_iterator_base_types.h bits/stl_iterator_base_funcs.h \tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \tbits/std_iterator.h bits/std_list.h \tbits/std_map.h bits/std_memory.h bits/std_numeric.h \tbits/std_queue.h bits/std_set.h bits/std_stack.h \tbits/std_stdexcept.h bits/functexcept.h bits/std_vector.h \tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \tbits/stl_deque.h bits/stl_function.h \tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \tbits/stl_relops.h bits/stl_set.h bits/stl_stack.h bits/stl_tempbuf.h \tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \tbits/stl_bvector.h bits/type_traits.h bits/std_algorithm.h \tbits/stl_construct.h bits/boost_concept_check.h bits/concept_check.h\n-\n-\n-backward_headers =  \tbackward/complex.h backward/iomanip.h backward/istream.h \tbackward/ostream.h backward/stream.h backward/streambuf.h \tbackward/algo.h backward/algobase.h backward/alloc.h \tbackward/bvector.h backward/defalloc.h backward/deque.h \tbackward/function.h backward/hash_map.h backward/hash_set.h \tbackward/hashtable.h backward/heap.h backward/iostream.h \tbackward/iterator.h backward/list.h backward/map.h \tbackward/multimap.h backward/new.h backward/multiset.h \tbackward/pair.h backward/queue.h backward/rope.h backward/set.h \tbackward/slist.h backward/stack.h backward/tempbuf.h backward/tree.h \tbackward/vector.h backward/fstream.h backward/strstream.h \tbackward/strstream backward/backward_warning.h\n-\n-\n-ext_headers =  \text/rope ext/ropeimpl.h ext/stl_rope.h \text/slist ext/hash_map ext/hash_set \text/stl_hashtable.h ext/stl_hash_fun.h \n-\n-\n-c_base_headers =  \tbits/std_cassert.h bits/std_cctype.h bits/std_cerrno.h \tbits/std_cfloat.h bits/std_climits.h bits/std_clocale.h \tbits/std_cmath.h bits/std_csetjmp.h bits/std_csignal.h \tbits/std_cstdarg.h bits/std_cstddef.h bits/std_cstdio.h \tbits/std_cstdlib.h bits/std_cstring.h bits/std_ctime.h \tbits/std_cwchar.h bits/std_cwctype.h bits/cmath.tcc\n-\n-@GLIBCPP_USE_CSHADOW_TRUE@c_shadow_headers = \tassert.h ctype.h errno.h float.h limits.h locale.h math.h setjmp.h \tsignal.h stdarg.h stddef.h stdio.h stdlib.h string.h time.h wchar.h \twctype.h fcntl.h libio.h iolibio.h libioP.h pthread.h iconv.h \tfeatures.h langinfo.h \tbits/wrap_libio.h bits/wrap_iolibio.h bits/wrap_libioP.h \tbits/wrap_iconv.h bits/wrap_fcntl.h bits/wrap_pthread.h \tbits/wrap_features.h bits/wrap_langinfo.h \tsys/cdefs.h \n-@GLIBCPP_USE_CSHADOW_FALSE@c_shadow_headers = \n+INCLUDES = \\\n+\t-nostdinc++ \\\n+\t$(GLIBCPP_INCLUDES) \\\n+\t$(LIBSUPCXX_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \\\n+\t$(TOPLEVEL_INCLUDES)\n \n-std_headers =  \talgorithm bitset complex deque fstream functional \tiomanip ios iosfwd iostream istream iterator limits list locale \tmap memory numeric ostream queue set sstream stack stdexcept \tstreambuf string utility valarray vector \tcassert cctype cerrno cfloat climits clocale ciso646 \tcmath csetjmp csignal cstdarg cstddef cstdio cstdlib \tcstring ctime cwchar cwctype\n \n-@GLIBCPP_NEED_LIBIO_TRUE@libio_headers = \t$(top_srcdir)/libio/_G_config.h $(top_srcdir)/libio/libio.h\n-@GLIBCPP_NEED_LIBIO_FALSE@libio_headers = \n+sources = \\\n+\tbasic_file.cc bitset.cc c++locale.cc cmath.cc codecvt.cc \\\n+\tcomplex_io.cc functexcept.cc globals.cc ios.cc limitsMEMBERS.cc \\\n+\tlocale.cc locale-inst.cc localename.cc misc-inst.cc stdexcept.cc \\\n+\tstl-inst.cc string-inst.cc strstream.cc valarray-inst.cc \\\n+\twstring-inst.cc\n \n-build_headers =  \tbits/std_limits.h \tbits/c++config.h bits/c++io.h bits/c++locale.h \tbits/gthr.h bits/gthr-single.h bits/gthr-default.h \tbits/basic_file_model.h \tbits/atomicity.h bits/os_defines.h \tbits/ctype_base.h bits/ctype_noninline.h bits/ctype_inline.h \n \n-\n-sources =  \tbasic_file.cc bitset.cc c++locale.cc cmath.cc codecvt.cc \tcomplex_io.cc functexcept.cc globals.cc ios.cc limitsMEMBERS.cc \tlocale.cc locale-inst.cc localename.cc misc-inst.cc stdexcept.cc \tstl-inst.cc string-inst.cc strstream.cc valarray-inst.cc \twstring-inst.cc\n-\n-\n-VPATH = $(top_srcdir):$(top_srcdir)/src:$(GLIBCPP_INCLUDE_DIR):$(GLIBCPP_INCLUDE_DIR)/std:$(C_INCLUDE_DIR)\n+VPATH = $(top_srcdir):$(top_srcdir)/src\n \n libstdc___la_SOURCES = $(sources)\n \n-libstdc___la_LIBADD =  \t../libmath/libmath.la @libio_la@ \t../libsupc++/libsupc++convenience.la\n+libstdc___la_LIBADD = \\\n+\t../libmath/libmath.la @libio_la@ \\\n+\t../libsupc++/libsupc++convenience.la\n \n \n libstdc___la_LDFLAGS = -version-info 3:0:0 -lm\n \n libstdc___la_DEPENDENCIES = $(libstdc___la_LIBADD)\n-@GLIBCPP_USE_CSHADOW_TRUE@CSHADOW_H = $(top_builddir)/stamp-cshadow\n-@GLIBCPP_USE_CSHADOW_FALSE@CSHADOW_H = \n \n-# Check for various configure bits that change where the headers get installed.\n-gxx_include_dir = @gxx_include_dir@\n-gxx_target_include_dir = $(gxx_include_dir)/$(target_alias)\n-\n-# NB: As libio_headers may be empty, need this to make sure bash doesn't\n-# choke on an empty for... loop by using libio_headers_install\n-# NB: installation of shadow headers is not attempted.\n-src_incdir = @GLIBCPP_INCLUDE_DIR@\n-bld_incdir = $(top_builddir)/include\n-c_incdir = @C_INCLUDE_DIR@\n+# Use special rules for the deprecated source files so that they find\n+# deprecated include files.\n+GLIBCPP_INCLUDE_DIR = @glibcpp_builddir@/include\n \n # AM_CXXFLAGS needs to be in each subdirectory so that it can be\n # modified in a per-library or per-sub-library way.  Need to manually\n@@ -201,7 +191,12 @@ c_incdir = @C_INCLUDE_DIR@\n # The no-implicit-templates flag will generate unresolved references to\n # the concept-checking symbols.  So we must disable the checks while\n # actually building the library.\n-AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n+AM_CXXFLAGS = \\\n+\t-fno-implicit-templates \\\n+\t$(LIBSUPCXX_CXXFLAGS) \\\n+\t$(WARN_CXXFLAGS) \\\n+\t$(OPTIMIZE_CXXFLAGS) \\\n+\t$(CONFIG_CXXFLAGS) \n \n \n # libstdc++ libtool notes\n@@ -222,7 +217,8 @@ AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS)\n # correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n # CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n # attempt to infer which configuration to use\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \\\n+\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # 3) We'd have a problem when building the shared libstdc++ object if\n@@ -231,7 +227,8 @@ LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \t       $(\n # course is problematic at this point.  So, we get the top-level\n # directory to configure libstdc++-v3 to use gcc as the C++\n # compilation driver.\n-CXXLINK = $(LIBTOOL) --tag CXX --mode=link $(CXX) \t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --tag CXX --mode=link $(CXX) \\\n+\t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = \n@@ -406,7 +403,7 @@ install-info: install-info-am\n install-exec-am: install-toolexeclibLTLIBRARIES\n install-exec: install-exec-am\n \n-install-data-am: install-data-local\n+install-data-am:\n install-data: install-data-am\n \n install-am: all-am\n@@ -467,87 +464,16 @@ maintainer-clean-compile mostlyclean-libtool distclean-libtool \\\n clean-libtool maintainer-clean-libtool tags mostlyclean-tags \\\n distclean-tags clean-tags maintainer-clean-tags distdir info-am info \\\n dvi-am dvi check check-am installcheck-am installcheck install-info-am \\\n-install-info install-exec-am install-exec install-data-local \\\n-install-data-am install-data install-am install uninstall-am uninstall \\\n-all-redirect all-am all installdirs mostlyclean-generic \\\n-distclean-generic clean-generic maintainer-clean-generic clean \\\n-mostlyclean distclean maintainer-clean\n-\n+install-info install-exec-am install-exec install-data-am install-data \\\n+install-am install uninstall-am uninstall all-redirect all-am all \\\n+installdirs mostlyclean-generic distclean-generic clean-generic \\\n+maintainer-clean-generic clean mostlyclean distclean maintainer-clean\n \n-# Use special rules for the deprecated source files so that they find\n-# deprecated include files.\n strstream.lo: strstream.cc\n \t$(LTCXXCOMPILE) -I$(GLIBCPP_INCLUDE_DIR)/backward -c $<\n strstream.o: strstream.cc\n \t$(CXXCOMPILE) -I$(GLIBCPP_INCLUDE_DIR)/backward -c $<\n \n-# Specify that all *.o's depend on this.\n-$(libstdc___la_OBJECTS): $(CSHADOW_H)\n-\n-$(top_builddir)/stamp-cshadow: $(top_srcdir)/mkinclosure \\\n-\t                       $(top_srcdir)/mkcshadow\n-\t$(top_srcdir)/mkinclosure \\\n-\t\"-I $(top_builddir)/../../gcc/include -I /usr/include -G fcntl.h unistd.h\" | $(top_srcdir)/mkcshadow;\n-\trm -f  $(top_builddir)/stamp-cshadow \n-\techo \"done\" > $(top_builddir)/stamp-cshadow \n-\n-# We have our own special, ridiculously complicated installation routine\n-# here, as automake/autoconf is currently brain-damaged when it comes\n-# to installing sub-directories of headers. In particular, we want to\n-# 1) install build headers from (blddir)/include/bits -> (install)/bits\n-# 2) install source headers from\n-#      (srcdir)/include/bits -> (install)/bits\n-#      (srcdir)/include/ext -> (install)/ext\n-#      (srcdir)/include/backward -> (install)/backward\n-#      ... and the always entertaining \"C\" compatibility bits\n-#      where * represents configure-time directory switching\n-#      (srcdir)/include/c* -> (install)/\n-#      (srcdir)/include/c*/bits -> (install)/bits\n-#      (srcdir)/include/c*/sys -> (install)/sys\n-install-data-local: myinstalldirs myinstallheaders\n-\n-# NB: installation of shadow header directories is not attempted.\n-myinstalldirs:\n-\tif test -z \"$(MULTISUBDIR)\"; then \\\n-\t$(mkinstalldirs) $(DESTDIR)$(gxx_include_dir)/backward; \\\n-\t$(mkinstalldirs) $(DESTDIR)$(gxx_include_dir)/bits; \\\n-\t$(mkinstalldirs) $(DESTDIR)$(gxx_include_dir)/ext; \\\n-\t$(mkinstalldirs) $(DESTDIR)$(gxx_target_include_dir)/bits; \\\n-\tfi\n-myinstallheaders: \n-\tif test -z \"$(MULTISUBDIR)\"; then \\\n-\tfor i in $(base_headers); do \\\n-\techo \"$(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)/bits/\";\\\n-\t  $(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)/bits/; \\\n-\tdone; \\\n-\tfor i in $(ext_headers); do \\\n-\techo \"$(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)/ext/\";\\\n-\t  $(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)/ext/; \\\n-\tdone; \\\n-\tfor i in $(backward_headers); do \\\n-\techo \"$(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)/backward/\";\\\n-\t  $(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)/backward/; \\\n-\tdone; \\\n-\tfor i in $(c_base_headers); do \\\n-\techo \"$(INSTALL_DATA) $(c_incdir)/$$i $(gxx_include_dir)/bits/\";\\\n-\t  $(INSTALL_DATA) $(c_incdir)/$$i $(gxx_include_dir)/bits/; \\\n-\tdone; \\\n-\tfor i in $(std_headers); do \\\n-\techo \"$(INSTALL_DATA) $(src_incdir)/std/$$i $(gxx_include_dir)\";\\\n-\t  $(INSTALL_DATA) $(src_incdir)/std/$$i $(gxx_include_dir); \\\n-\tdone; \\\n-\tfor i in $(build_headers); do \\\n-\techo \"$(INSTALL_DATA) $(bld_incdir)/$$i \\\n-\t  $(gxx_target_include_dir)/bits/\"; $(INSTALL_DATA) \\\n-\t  $(bld_incdir)/$$i $(gxx_target_include_dir)/bits/; \\\n-\tdone; \\\n-\tlibio_headers_install='$(libio_headers)'; \\\n-\tfor i in $$libio_headers_install; do \\\n-\techo \"$(INSTALL_DATA) $$i $(gxx_include_dir)\"; \\\n-\t  $(INSTALL_DATA) $$i $(gxx_include_dir); \\\n-\tdone; \\\n-\tfi;\n-\n # Tell versions [3.59,3.63) of GNU make to not export all variables.\n # Otherwise a system limit (for SysV at least) may be exceeded.\n .NOEXPORT:"}, {"sha": "1ea01bd2ebc464d0e04e34b8b282479aae062ec9", "filename": "libstdc++-v3/src/gen-num-limits.cc", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2Fsrc%2Fgen-num-limits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2Fsrc%2Fgen-num-limits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fgen-num-limits.cc?ref=4a9d51090acc89a3bed7d1bae7f9d4e1da267243", "patch": "@@ -33,24 +33,7 @@\n // Do not compile with optimization turned on.\n //\n \n-#include <bits/c++config.h>\n-\n-#if HAVE_CONFIG_H\n-# include <config.h>\n-#endif\n-\n-//\n-// Force Linux <limits.h> to define the *LONG_LONG*\n-//\n-#if __linux__ && _GLIBCPP_USE_LONG_LONG\n-# ifndef __USE_GNU\n-#  define __USE_GNU 1\n-# endif\n-# ifndef _GNU_SOURCE\n-#  define _GNU_SOURCE 1\n-# endif\n-#endif\n-\n+#include <config.h>\n #include <limits.h>\n #include <float.h>\n #include <stdio.h>"}, {"sha": "2c350e5a1c40fea2235ec28f8c713c80b6f65f56", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=4a9d51090acc89a3bed7d1bae7f9d4e1da267243", "patch": "@@ -65,10 +65,14 @@ target_alias = @target_alias@\n target_triplet = @target@\n AR = @AR@\n AS = @AS@\n+ATOMICITY_INC_SRCDIR = @ATOMICITY_INC_SRCDIR@\n+BASIC_FILE_H = @BASIC_FILE_H@\n CC = @CC@\n+CCODECVT_C = @CCODECVT_C@\n+CLOCALE_H = @CLOCALE_H@\n CPP = @CPP@\n CSHADOW_FLAGS = @CSHADOW_FLAGS@\n-CSTD_INCLUDES = @CSTD_INCLUDES@\n+CSTDIO_H = @CSTDIO_H@\n CXX = @CXX@\n CXXCPP = @CXXCPP@\n C_INCLUDE_DIR = @C_INCLUDE_DIR@\n@@ -78,7 +82,8 @@ EXEEXT = @EXEEXT@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n GCJ = @GCJ@\n GCJFLAGS = @GCJFLAGS@\n-GLIBCPP_INCLUDE_DIR = @GLIBCPP_INCLUDE_DIR@\n+GLIBCPP_INCLUDES = @GLIBCPP_INCLUDES@\n+GLIBCPP_IS_CROSS_COMPILING = @GLIBCPP_IS_CROSS_COMPILING@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n LIBMATHOBJS = @LIBMATHOBJS@\n LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n@@ -93,6 +98,7 @@ OBJDUMP = @OBJDUMP@\n OBJEXT = @OBJEXT@\n OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n OPT_LDFLAGS = @OPT_LDFLAGS@\n+OS_INC_SRCDIR = @OS_INC_SRCDIR@\n PACKAGE = @PACKAGE@\n RANLIB = @RANLIB@\n SECTION_FLAGS = @SECTION_FLAGS@\n@@ -110,6 +116,7 @@ glibcpp_basedir = @glibcpp_basedir@\n glibcpp_builddir = @glibcpp_builddir@\n glibcpp_prefixdir = @glibcpp_prefixdir@\n glibcpp_srcdir = @glibcpp_srcdir@\n+glibcpp_thread_h = @glibcpp_thread_h@\n glibcpp_toolexecdir = @glibcpp_toolexecdir@\n glibcpp_toolexeclibdir = @glibcpp_toolexeclibdir@\n gxx_include_dir = @gxx_include_dir@\n@@ -121,10 +128,14 @@ AUTOMAKE_OPTIONS = foreign dejagnu\n \n DEJATOOL = libstdc++-v3\n \n-EXPECT = `if [ -f @glibcpp_builddir@/../../expect/expect ] ; then             echo @glibcpp_builddir@/../../expect/expect ;           else echo expect ; fi`\n+EXPECT = `if [ -f @glibcpp_builddir@/../../expect/expect ] ; then \\\n+            echo @glibcpp_builddir@/../../expect/expect ; \\\n+          else echo expect ; fi`\n \n \n-RUNTEST = `if [ -f @glibcpp_srcdir@/../dejagnu/runtest ] ; then \t       echo @glibcpp_srcdir@/../dejagnu/runtest ; \t    else echo runtest; fi`\n+RUNTEST = `if [ -f @glibcpp_srcdir@/../dejagnu/runtest ] ; then \\\n+\t       echo @glibcpp_srcdir@/../dejagnu/runtest ; \\\n+\t    else echo runtest; fi`\n \n \n RUNTESTFLAGS = "}, {"sha": "d62504a02e11676e2a52ed4c88eb1943fe1c24b0", "filename": "libstdc++-v3/testsuite_flags.in", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2Ftestsuite_flags.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a9d51090acc89a3bed7d1bae7f9d4e1da267243/libstdc%2B%2B-v3%2Ftestsuite_flags.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite_flags.in?ref=4a9d51090acc89a3bed7d1bae7f9d4e1da267243", "patch": "@@ -32,12 +32,9 @@ case ${query} in\n       echo ${INCLUDES}\n       ;;\n     --build-includes)\n-      C_DIR=\"`basename  @C_INCLUDE_DIR@`\"\n-      INCLUDES=\"-nostdinc++ -I${BUILD_DIR}/include -I${SRC_DIR}/include\n-                -I${SRC_DIR}/include/std  -I${SRC_DIR}/include/$C_DIR\n+      INCLUDES=\"-nostdinc++ @GLIBCPP_INCLUDES@\n \t        -I${SRC_DIR}/libsupc++ -I${SRC_DIR}/libio \n-\t\t-I${SRC_DIR}/testsuite\n-\t\t-I${SRC_DIR}/include/backward -I${SRC_DIR}/include/ext\"\n+\t\t-I${SRC_DIR}/testsuite\"\n       echo ${INCLUDES}\n       ;;\n     --install-cxx)"}]}