{"sha": "30a4d95bf76b0a0fdb66ac0211589a4434c83af3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBhNGQ5NWJmNzZiMGEwZmRiNjZhYzAyMTE1ODlhNDQzNGM4M2FmMw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-02-10T20:24:25Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-02-16T19:07:26Z"}, "message": "c-family: ICE with assume_aligned attribute [PR99062]\n\nWe ICE in handle_assume_aligned_attribute since r271338 which added\n\n@@ -2935,8 +2936,8 @@ handle_assume_aligned_attribute (tree *node, tree name, tree args, int,\n          /* The misalignment specified by the second argument\n             must be non-negative and less than the alignment.  */\n          warning (OPT_Wattributes,\n-                  \"%qE attribute argument %E is not in the range [0, %E)\",\n-                  name, val, align);\n+                  \"%qE attribute argument %E is not in the range [0, %wu]\",\n+                  name, val, tree_to_uhwi (align) - 1);\n          *no_add_attrs = true;\n          return NULL_TREE;\n        }\nbecause align is INT_MIN and tree_to_uhwi asserts tree_fits_uhwi_p -- which\nALIGN does not and the prior tree_fits_shwi_p check is fine with it, as\nwell as the integer_pow2p check.\n\nSince neither of the arguments to assume_aligned can be negative, I've\nhoisted the tree_int_cst_sgn check.  And add the missing \"argument\"\nword to an existing warning.\n\ngcc/c-family/ChangeLog:\n\n\tPR c++/99062\n\t* c-attribs.c (handle_assume_aligned_attribute): Check that the\n\talignment argument is non-negative.  Tweak a warning message.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/99062\n\t* gcc.dg/attr-assume_aligned-4.c: Adjust dg-warning.\n\t* g++.dg/ext/attr-assume-aligned.C: New test.", "tree": {"sha": "07860038529294210a2523c754cbc859aa0f1e20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07860038529294210a2523c754cbc859aa0f1e20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30a4d95bf76b0a0fdb66ac0211589a4434c83af3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30a4d95bf76b0a0fdb66ac0211589a4434c83af3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30a4d95bf76b0a0fdb66ac0211589a4434c83af3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30a4d95bf76b0a0fdb66ac0211589a4434c83af3/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d5e4f6ec64de3ceee753c0d221576145fd898dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d5e4f6ec64de3ceee753c0d221576145fd898dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d5e4f6ec64de3ceee753c0d221576145fd898dd"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "0cb51fddfaaaaaf607984d74271917e2d186c46c", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a4d95bf76b0a0fdb66ac0211589a4434c83af3/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a4d95bf76b0a0fdb66ac0211589a4434c83af3/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=30a4d95bf76b0a0fdb66ac0211589a4434c83af3", "patch": "@@ -3536,11 +3536,18 @@ handle_assume_aligned_attribute (tree *node, tree name, tree args, int,\n       if (!tree_fits_shwi_p (val))\n \t{\n \t  warning (OPT_Wattributes,\n-\t\t   \"%qE attribute %E is not an integer constant\",\n+\t\t   \"%qE attribute argument %E is not an integer constant\",\n \t\t   name, val);\n \t  *no_add_attrs = true;\n \t  return NULL_TREE;\n \t}\n+      else if (tree_int_cst_sgn (val) < 0)\n+\t{\n+\t  warning (OPT_Wattributes,\n+\t\t   \"%qE attribute argument %E is not positive\", name, val);\n+\t  *no_add_attrs = true;\n+\t  return NULL_TREE;\n+\t}\n \n       if (!align)\n \t{\n@@ -3556,7 +3563,7 @@ handle_assume_aligned_attribute (tree *node, tree name, tree args, int,\n \n \t  align = val;\n \t}\n-      else if (tree_int_cst_sgn (val) < 0 || tree_int_cst_le (align, val))\n+      else if (tree_int_cst_le (align, val))\n \t{\n \t  /* The misalignment specified by the second argument\n \t     must be non-negative and less than the alignment.  */"}, {"sha": "aa57cbb39c76e319b65d98499e7f9cd1aa92529d", "filename": "gcc/testsuite/g++.dg/ext/attr-assume-aligned.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a4d95bf76b0a0fdb66ac0211589a4434c83af3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-assume-aligned.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a4d95bf76b0a0fdb66ac0211589a4434c83af3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-assume-aligned.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-assume-aligned.C?ref=30a4d95bf76b0a0fdb66ac0211589a4434c83af3", "patch": "@@ -0,0 +1,5 @@\n+// PR c++/99062\n+// { dg-do compile }\n+\n+#define INT_MIN (-__INT_MAX__ - 1)\n+void *f () __attribute__ ((assume_aligned (INT_MIN, 4))); // { dg-warning \"is not positive\" }"}, {"sha": "f6eb6dc4e59330fcf056f313d6c64830672a5165", "filename": "gcc/testsuite/gcc.dg/attr-assume_aligned-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a4d95bf76b0a0fdb66ac0211589a4434c83af3/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-assume_aligned-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a4d95bf76b0a0fdb66ac0211589a4434c83af3/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-assume_aligned-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-assume_aligned-4.c?ref=30a4d95bf76b0a0fdb66ac0211589a4434c83af3", "patch": "@@ -8,7 +8,7 @@ A (1) void fv_1 (void);       /* { dg-warning \".assume_aligned. attribute ignore\n \n A (1) int fi_1 (void);        /* { dg-warning \".assume_aligned. attribute ignored on a function returning .int.\" } */\n \n-A (-1) void* fpv_m1 (void);   /* { dg-warning \".assume_aligned. attribute argument -1 is not a power of 2\" } */\n+A (-1) void* fpv_m1 (void);   /* { dg-warning \".assume_aligned. attribute argument -1 is not positive\" } */\n \n A (0) void* fpv_0 (void);     /* { dg-warning \".assume_aligned. attribute argument 0 is not a power of 2\" } */\n \n@@ -23,7 +23,7 @@ A (16385) void* fpv_16kp1 (void);    /* { dg-warning \".assume_aligned. attribute\n \n A (32767) void* fpv_32km1 (void);     /* { dg-warning \".assume_aligned. attribute argument 32767 is not a power of 2\" } */\n \n-A (4, -1) void* fpv_4_m1 (void);      /* { dg-warning \".assume_aligned. attribute argument -1 is not in the range \\\\\\[0, 3]\" } */\n+A (4, -1) void* fpv_4_m1 (void);      /* { dg-warning \".assume_aligned. attribute argument -1 is not positive\" } */\n \n A (4, 0) void* fpv_4_0 (void);\n A (4, 1) void* fpv_4_1 (void);"}]}