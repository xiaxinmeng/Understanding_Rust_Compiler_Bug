{"sha": "f1cc958978c4b3a76ccf96571972f95963c9f0ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFjYzk1ODk3OGM0YjNhNzZjY2Y5NjU3MTk3MmY5NTk2M2M5ZjBlYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2012-04-25T14:27:08Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-04-25T14:27:08Z"}, "message": "re PR tree-optimization/52979 (likely wrong code bug w/packed bitfields)\n\n\tPR middle-end/52979\n\t* stor-layout.c (get_best_mode): Don't return mode with bitsize\n\tlarger than maxbits.  Don't compute maxbits modulo align.\n\tAlso check that unit bytes long store at bitpos / unit * unit\n\tdoesn't affect bits beyond bitregion_end.\n\t* expmed.c (store_bit_field_1): Avoid trying insv if OP_MODE MEM\n\twould not fit into bitregion_start ... bitregion_end + 1 bit\n\tregion.\n\t(store_split_bit_field): Decrease unit close to end of bitregion_end\n\tif access is restricted in order to avoid mutual recursion.\n\n\t* gcc.c-torture/compile/pr52979-1.c: New test.\n\t* gcc.c-torture/execute/pr52979-1.c: New test.\n\t* gcc.c-torture/execute/pr52979-2.c: New test.\n\nFrom-SVN: r186819", "tree": {"sha": "81ecc613d94b359b676a0ac3492e351643109575", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81ecc613d94b359b676a0ac3492e351643109575"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1cc958978c4b3a76ccf96571972f95963c9f0ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1cc958978c4b3a76ccf96571972f95963c9f0ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1cc958978c4b3a76ccf96571972f95963c9f0ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1cc958978c4b3a76ccf96571972f95963c9f0ea/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "948e73b3d6a3d10ada7c0240bfbfa4aef147f59d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/948e73b3d6a3d10ada7c0240bfbfa4aef147f59d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/948e73b3d6a3d10ada7c0240bfbfa4aef147f59d"}], "stats": {"total": 144, "additions": 139, "deletions": 5}, "files": [{"sha": "d5154ec73c427bac1debf50e7590fb91b1de3333", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1cc958978c4b3a76ccf96571972f95963c9f0ea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1cc958978c4b3a76ccf96571972f95963c9f0ea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f1cc958978c4b3a76ccf96571972f95963c9f0ea", "patch": "@@ -1,5 +1,16 @@\n 2012-04-25  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/52979\n+\t* stor-layout.c (get_best_mode): Don't return mode with bitsize\n+\tlarger than maxbits.  Don't compute maxbits modulo align.\n+\tAlso check that unit bytes long store at bitpos / unit * unit\n+\tdoesn't affect bits beyond bitregion_end.\n+\t* expmed.c (store_bit_field_1): Avoid trying insv if OP_MODE MEM\n+\twould not fit into bitregion_start ... bitregion_end + 1 bit\n+\tregion.\n+\t(store_split_bit_field): Decrease unit close to end of bitregion_end\n+\tif access is restricted in order to avoid mutual recursion.\n+\n \tPR tree-optimization/53058\n \t* double-int.h (double_int_max_value, double_int_min_value): New\n \tprototypes."}, {"sha": "a0a0960bfa2b0c9daba9db3aa26f55c7f8b04430", "filename": "gcc/expmed.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1cc958978c4b3a76ccf96571972f95963c9f0ea/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1cc958978c4b3a76ccf96571972f95963c9f0ea/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=f1cc958978c4b3a76ccf96571972f95963c9f0ea", "patch": "@@ -640,7 +640,13 @@ store_bit_field_1 (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n       && !(MEM_P (op0) && MEM_VOLATILE_P (op0)\n \t   && flag_strict_volatile_bitfields > 0)\n       && ! ((REG_P (op0) || GET_CODE (op0) == SUBREG)\n-\t    && (bitsize + bitpos > GET_MODE_BITSIZE (op_mode))))\n+\t    && (bitsize + bitpos > GET_MODE_BITSIZE (op_mode)))\n+      /* Do not use insv if the bit region is restricted and\n+\t op_mode integer at offset doesn't fit into the\n+\t restricted region.  */\n+      && !(MEM_P (op0) && bitregion_end\n+\t   && bitnum - bitpos + GET_MODE_BITSIZE (op_mode)\n+\t      > bitregion_end + 1))\n     {\n       struct expand_operand ops[4];\n       int xbitpos = bitpos;\n@@ -760,7 +766,7 @@ store_bit_field_1 (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n \t  || GET_MODE_BITSIZE (GET_MODE (op0)) > maxbits\n \t  || (op_mode != MAX_MACHINE_MODE\n \t      && GET_MODE_SIZE (GET_MODE (op0)) > GET_MODE_SIZE (op_mode)))\n-\tbestmode = get_best_mode  (bitsize, bitnum,\n+\tbestmode = get_best_mode (bitsize, bitnum,\n \t\t\t\t  bitregion_start, bitregion_end,\n \t\t\t\t  MEM_ALIGN (op0),\n \t\t\t\t  (op_mode == MAX_MACHINE_MODE\n@@ -1096,6 +1102,16 @@ store_split_bit_field (rtx op0, unsigned HOST_WIDE_INT bitsize,\n       offset = (bitpos + bitsdone) / unit;\n       thispos = (bitpos + bitsdone) % unit;\n \n+      /* When region of bytes we can touch is restricted, decrease\n+\t UNIT close to the end of the region as needed.  */\n+      if (bitregion_end\n+\t  && unit > BITS_PER_UNIT\n+\t  && bitpos + bitsdone - thispos + unit > bitregion_end + 1)\n+\t{\n+\t  unit = unit / 2;\n+\t  continue;\n+\t}\n+\n       /* THISSIZE must not overrun a word boundary.  Otherwise,\n \t store_fixed_bit_field will call us again, and we will mutually\n \t recurse forever.  */"}, {"sha": "e72e7f390910b43d4778f50942fa743160927e3d", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1cc958978c4b3a76ccf96571972f95963c9f0ea/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1cc958978c4b3a76ccf96571972f95963c9f0ea/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=f1cc958978c4b3a76ccf96571972f95963c9f0ea", "patch": "@@ -2624,7 +2624,7 @@ get_best_mode (int bitsize, int bitpos,\n   if (!bitregion_end)\n     maxbits = MAX_FIXED_MODE_SIZE;\n   else\n-    maxbits = (bitregion_end - bitregion_start) % align + 1;\n+    maxbits = bitregion_end - bitregion_start + 1;\n \n   /* Find the narrowest integer mode that contains the bit field.  */\n   for (mode = GET_CLASS_NARROWEST_MODE (MODE_INT); mode != VOIDmode;\n@@ -2645,7 +2645,10 @@ get_best_mode (int bitsize, int bitpos,\n \t (Though at least one Unix compiler ignores this problem:\n \t that on the Sequent 386 machine.  */\n       || MIN (unit, BIGGEST_ALIGNMENT) > align\n-      || (largest_mode != VOIDmode && unit > GET_MODE_BITSIZE (largest_mode)))\n+      || (largest_mode != VOIDmode && unit > GET_MODE_BITSIZE (largest_mode))\n+      || unit > maxbits\n+      || (bitregion_end\n+\t  && bitpos - (bitpos % unit) + unit > bitregion_end + 1))\n     return VOIDmode;\n \n   if ((SLOW_BYTE_ACCESS && ! volatilep)\n@@ -2663,7 +2666,9 @@ get_best_mode (int bitsize, int bitpos,\n \t      && unit <= MIN (align, BIGGEST_ALIGNMENT)\n \t      && unit <= maxbits\n \t      && (largest_mode == VOIDmode\n-\t\t  || unit <= GET_MODE_BITSIZE (largest_mode)))\n+\t\t  || unit <= GET_MODE_BITSIZE (largest_mode))\n+\t      && (bitregion_end == 0\n+\t\t  || bitpos - (bitpos % unit) + unit <= bitregion_end + 1))\n \t    wide_mode = tmode;\n \t}\n "}, {"sha": "b7fe63252447c6472c5cd729760e761db7db03c2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1cc958978c4b3a76ccf96571972f95963c9f0ea/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1cc958978c4b3a76ccf96571972f95963c9f0ea/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f1cc958978c4b3a76ccf96571972f95963c9f0ea", "patch": "@@ -1,3 +1,10 @@\n+2012-04-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/52979\n+\t* gcc.c-torture/compile/pr52979-1.c: New test.\n+\t* gcc.c-torture/execute/pr52979-1.c: New test.\n+\t* gcc.c-torture/execute/pr52979-2.c: New test.\n+\n 2012-04-25  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.target/i386/l_fma_float_5.c: Adjust."}, {"sha": "c703073c2c37ae640c55a37b5e3151e0e083ee65", "filename": "gcc/testsuite/gcc.c-torture/compile/pr52979-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1cc958978c4b3a76ccf96571972f95963c9f0ea/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr52979-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1cc958978c4b3a76ccf96571972f95963c9f0ea/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr52979-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr52979-1.c?ref=f1cc958978c4b3a76ccf96571972f95963c9f0ea", "patch": "@@ -0,0 +1,15 @@\n+/* PR middle-end/52979 */\n+\n+struct S\n+{\n+  unsigned int a : 16, b : 16, c : 16, d : 16, e : 14;\n+  unsigned int f : 4, g : 14, h : 8;\n+  char i;\n+  int j;\n+};\n+\n+void\n+foo (struct S *s)\n+{\n+  s->f = 1;\n+}"}, {"sha": "246b1fd875d370ac0d3c1e978b094b29d8b2c611", "filename": "gcc/testsuite/gcc.c-torture/execute/pr52979-1.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1cc958978c4b3a76ccf96571972f95963c9f0ea/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr52979-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1cc958978c4b3a76ccf96571972f95963c9f0ea/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr52979-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr52979-1.c?ref=f1cc958978c4b3a76ccf96571972f95963c9f0ea", "patch": "@@ -0,0 +1,40 @@\n+/* PR middle-end/52979 */\n+\n+extern void abort (void);\n+int c, d, e;\n+\n+void\n+foo (void)\n+{\n+}\n+\n+struct __attribute__((packed)) S { int g : 31; int h : 6; };\n+struct S a = { 1 };\n+static struct S b = { 1 };\n+\n+void\n+bar (void)\n+{\n+  a.h = 1;\n+  struct S f = { };\n+  b = f;\n+  e = 0;\n+  if (d)\n+    c = a.g;\n+}\n+\n+void\n+baz (void)\n+{\n+  bar ();\n+  a = b;\n+}\n+\n+int\n+main ()\n+{\n+  baz ();\n+  if (a.g)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "52f5bb8bdb9745662f1e380b502cef740bfff808", "filename": "gcc/testsuite/gcc.c-torture/execute/pr52979-2.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1cc958978c4b3a76ccf96571972f95963c9f0ea/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr52979-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1cc958978c4b3a76ccf96571972f95963c9f0ea/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr52979-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr52979-2.c?ref=f1cc958978c4b3a76ccf96571972f95963c9f0ea", "patch": "@@ -0,0 +1,40 @@\n+/* PR middle-end/52979 */\n+\n+extern void abort (void);\n+int c, d, e;\n+\n+void\n+foo (void)\n+{\n+}\n+\n+struct __attribute__((packed)) S { int g : 31; int h : 6; };\n+static struct S b = { 1 };\n+struct S a = { 1 };\n+\n+void\n+bar (void)\n+{\n+  a.h = 1;\n+  struct S f = { };\n+  b = f;\n+  e = 0;\n+  if (d)\n+    c = a.g;\n+}\n+\n+void\n+baz (void)\n+{\n+  bar ();\n+  a = b;\n+}\n+\n+int\n+main ()\n+{\n+  baz ();\n+  if (a.g)\n+    abort ();\n+  return 0;\n+}"}]}