{"sha": "0e24192cc9ae888874557a6caeace67131724c03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUyNDE5MmNjOWFlODg4ODc0NTU3YTZjYWVhY2U2NzEzMTcyNGMwMw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2013-05-24T09:31:33Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-05-24T09:31:33Z"}, "message": "gigi.h (enum inline_status_t): New type.\n\n\t* gcc-interface/gigi.h (enum inline_status_t): New type.\n\t(create_subprog_decl): Adjust prototype.\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Procedure>: Adjust\n\tcalls to create_subprog_decl.\n\t(get_minimal_subprog_decl): Likewise.\n\t* gcc-interface/trans.c (gigi): Likewise.\n\t(build_raise_check): Likewise.\n\t(establish_gnat_vms_condition_handler): Likewise.\n\t(Compilation_Unit_to_gnu): Likewise.\n\t(gnat_to_gnu): Likewise.\n\t* gcc-interface/utils.c (create_subprog_decl): Change inline_flag\n\tparameter to inline_status and implement for suppressed inlining.\n\nFrom-SVN: r199286", "tree": {"sha": "d6c908246fe03d3720172f85abf3377381bf02f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6c908246fe03d3720172f85abf3377381bf02f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e24192cc9ae888874557a6caeace67131724c03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e24192cc9ae888874557a6caeace67131724c03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e24192cc9ae888874557a6caeace67131724c03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e24192cc9ae888874557a6caeace67131724c03/comments", "author": null, "committer": null, "parents": [{"sha": "828012a527877b954f10ea4cda161b4c9860d69d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/828012a527877b954f10ea4cda161b4c9860d69d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/828012a527877b954f10ea4cda161b4c9860d69d"}], "stats": {"total": 221, "additions": 180, "deletions": 41}, "files": [{"sha": "6657464ed92b8e5babd75bf6069c28f0d55ea764", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e24192cc9ae888874557a6caeace67131724c03/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e24192cc9ae888874557a6caeace67131724c03/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0e24192cc9ae888874557a6caeace67131724c03", "patch": "@@ -1,3 +1,18 @@\n+2013-05-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/gigi.h (enum inline_status_t): New type.\n+\t(create_subprog_decl): Adjust prototype.\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Procedure>: Adjust\n+\tcalls to create_subprog_decl.\n+\t(get_minimal_subprog_decl): Likewise.\n+\t* gcc-interface/trans.c (gigi): Likewise.\n+\t(build_raise_check): Likewise.\n+\t(establish_gnat_vms_condition_handler): Likewise.\n+\t(Compilation_Unit_to_gnu): Likewise.\n+\t(gnat_to_gnu): Likewise.\n+\t* gcc-interface/utils.c (create_subprog_decl): Change inline_flag\n+\tparameter to inline_status and implement for suppressed inlining.\n+\n 2013-05-24  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/ada-tree.h (LOOP_STMT_NO_UNROLL): New define."}, {"sha": "6e7c5c45a43ef09663cf5ff8aeeb9fd59ace3f9d", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e24192cc9ae888874557a6caeace67131724c03/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e24192cc9ae888874557a6caeace67131724c03/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=0e24192cc9ae888874557a6caeace67131724c03", "patch": "@@ -4130,7 +4130,10 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \ttree gnu_stub_type = NULL_TREE, gnu_stub_name = NULL_TREE;\n \ttree gnu_ext_name = create_concat_name (gnat_entity, NULL);\n \tEntity_Id gnat_param;\n-\tbool inline_flag = Is_Inlined (gnat_entity);\n+\tenum inline_status_t inline_status\n+\t  = Has_Pragma_No_Inline (gnat_entity)\n+\t    ? is_suppressed\n+\t    : (Is_Inlined (gnat_entity) ? is_enabled : is_disabled);\n \tbool public_flag = Is_Public (gnat_entity) || imported_p;\n \tbool extern_flag\n \t  = (Is_Public (gnat_entity) && !definition) || imported_p;\n@@ -4686,15 +4689,15 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \n \t    gnu_decl\n \t      = create_subprog_decl (gnu_entity_name, gnu_ext_name, gnu_type,\n-\t\t\t\t     gnu_param_list, inline_flag, public_flag,\n-\t\t\t\t     extern_flag, artificial_flag, attr_list,\n-\t\t\t\t     gnat_entity);\n+\t\t\t\t     gnu_param_list, inline_status,\n+\t\t\t\t     public_flag, extern_flag, artificial_flag,\n+\t\t\t\t     attr_list, gnat_entity);\n \t    if (has_stub)\n \t      {\n \t\ttree gnu_stub_decl\n \t\t  = create_subprog_decl (gnu_entity_name, gnu_stub_name,\n \t\t\t\t\t gnu_stub_type, gnu_stub_param_list,\n-\t\t\t\t\t inline_flag, true, extern_flag,\n+\t\t\t\t\t inline_status, true, extern_flag,\n \t\t\t\t\t false, attr_list, gnat_entity);\n \t\tSET_DECL_FUNCTION_STUB (gnu_decl, gnu_stub_decl);\n \t      }\n@@ -5427,7 +5430,7 @@ get_minimal_subprog_decl (Entity_Id gnat_entity)\n \n   return\n     create_subprog_decl (gnu_entity_name, gnu_ext_name, void_ftype, NULL_TREE,\n-\t\t\t false, true, true, true, attr_list, gnat_entity);\n+\t\t\t is_disabled, true, true, true, attr_list, gnat_entity);\n }\n \n /* Return whether the E_Subprogram_Type/E_Function/E_Procedure GNAT_ENTITY is"}, {"sha": "5dee7b56fb19c89ab26822296302fcdaddc3edba", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e24192cc9ae888874557a6caeace67131724c03/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e24192cc9ae888874557a6caeace67131724c03/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=0e24192cc9ae888874557a6caeace67131724c03", "patch": "@@ -430,6 +430,17 @@ enum exception_info_kind\n   exception_column\n };\n \n+/* Define the inline status of a subprogram.  */\n+enum inline_status_t\n+{\n+  /* Inlining is suppressed for the subprogram.  */\n+  is_suppressed,\n+  /* No inlining is requested for the subprogram.  */\n+  is_disabled,\n+  /* Inlining is requested for the subprogram.  */\n+  is_enabled\n+};\n+\n extern GTY(()) tree gnat_std_decls[(int) ADT_LAST];\n extern GTY(()) tree gnat_raise_decls[(int) LAST_REASON_CODE + 1];\n extern GTY(()) tree gnat_raise_decls_ext[(int) LAST_REASON_CODE + 1];\n@@ -718,13 +729,14 @@ extern tree create_label_decl (tree, Node_Id);\n    node), PARAM_DECL_LIST is the list of the subprogram arguments (a list of\n    PARM_DECL nodes chained through the DECL_CHAIN field).\n \n-   INLINE_FLAG, PUBLIC_FLAG, EXTERN_FLAG, ARTIFICIAL_FLAG and ATTR_LIST are\n+   INLINE_STATUS, PUBLIC_FLAG, EXTERN_FLAG, ARTIFICIAL_FLAG and ATTR_LIST are\n    used to set the appropriate fields in the FUNCTION_DECL.  GNAT_NODE is\n    used for the position of the decl.  */\n extern tree create_subprog_decl (tree subprog_name, tree asm_name,\n \t\t\t\t tree subprog_type, tree param_decl_list,\n-\t\t\t\t bool inline_flag, bool public_flag,\n-\t\t\t\t bool extern_flag, bool artificial_flag,\n+\t\t\t\t enum inline_status_t inline_status,\n+\t\t\t\t bool public_flag, bool extern_flag,\n+\t\t\t\t bool artificial_flag,\n \t\t\t\t struct attrib *attr_list, Node_Id gnat_node);\n \n /* Set up the framework for generating code for SUBPROG_DECL, a subprogram"}, {"sha": "f854dbe1c1fdf81d909d812c128642d468acdaf3", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e24192cc9ae888874557a6caeace67131724c03/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e24192cc9ae888874557a6caeace67131724c03/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=0e24192cc9ae888874557a6caeace67131724c03", "patch": "@@ -413,16 +413,16 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name ATTRIBUTE_UNUSED,\n      memory.  */\n   malloc_decl\n     = create_subprog_decl (get_identifier (\"__gnat_malloc\"), NULL_TREE,\n-\t\t\t   ftype, NULL_TREE, false, true, true, true, NULL,\n-\t\t\t   Empty);\n+\t\t\t   ftype, NULL_TREE, is_disabled, true, true, true,\n+\t\t\t   NULL, Empty);\n   DECL_IS_MALLOC (malloc_decl) = 1;\n \n   /* malloc32 is a function declaration tree for a function to allocate\n      32-bit memory on a 64-bit system.  Needed only on 64-bit VMS.  */\n   malloc32_decl\n     = create_subprog_decl (get_identifier (\"__gnat_malloc32\"), NULL_TREE,\n-\t\t\t   ftype, NULL_TREE, false, true, true, true, NULL,\n-\t\t\t   Empty);\n+\t\t\t   ftype, NULL_TREE, is_disabled, true, true, true,\n+\t\t\t   NULL, Empty);\n   DECL_IS_MALLOC (malloc32_decl) = 1;\n \n   /* free is a function declaration tree for a function to free memory.  */\n@@ -431,14 +431,16 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name ATTRIBUTE_UNUSED,\n \t\t\t   build_function_type_list (void_type_node,\n \t\t\t\t\t\t     ptr_void_type_node,\n \t\t\t\t\t\t     NULL_TREE),\n-\t\t\t   NULL_TREE, false, true, true, true, NULL, Empty);\n+\t\t\t   NULL_TREE, is_disabled, true, true, true, NULL,\n+\t\t\t   Empty);\n \n   /* This is used for 64-bit multiplication with overflow checking.  */\n   mulv64_decl\n     = create_subprog_decl (get_identifier (\"__gnat_mulv64\"), NULL_TREE,\n \t\t\t   build_function_type_list (int64_type, int64_type,\n \t\t\t\t\t\t     int64_type, NULL_TREE),\n-\t\t\t   NULL_TREE, false, true, true, true, NULL, Empty);\n+\t\t\t   NULL_TREE, is_disabled, true, true, true, NULL,\n+\t\t\t   Empty);\n \n   /* Name of the _Parent field in tagged record types.  */\n   parent_name_id = get_identifier (Get_Name_String (Name_uParent));\n@@ -459,15 +461,15 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name ATTRIBUTE_UNUSED,\n     = create_subprog_decl\n       (get_identifier (\"system__soft_links__get_jmpbuf_address_soft\"),\n        NULL_TREE, build_function_type_list (jmpbuf_ptr_type, NULL_TREE),\n-       NULL_TREE, false, true, true, true, NULL, Empty);\n+       NULL_TREE, is_disabled, true, true, true, NULL, Empty);\n   DECL_IGNORED_P (get_jmpbuf_decl) = 1;\n \n   set_jmpbuf_decl\n     = create_subprog_decl\n       (get_identifier (\"system__soft_links__set_jmpbuf_address_soft\"),\n        NULL_TREE, build_function_type_list (void_type_node, jmpbuf_ptr_type,\n \t\t\t\t\t    NULL_TREE),\n-       NULL_TREE, false, true, true, true, NULL, Empty);\n+       NULL_TREE, is_disabled, true, true, true, NULL, Empty);\n   DECL_IGNORED_P (set_jmpbuf_decl) = 1;\n \n   /* setjmp returns an integer and has one operand, which is a pointer to\n@@ -477,7 +479,7 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name ATTRIBUTE_UNUSED,\n       (get_identifier (\"__builtin_setjmp\"), NULL_TREE,\n        build_function_type_list (integer_type_node, jmpbuf_ptr_type,\n \t\t\t\t NULL_TREE),\n-       NULL_TREE, false, true, true, true, NULL, Empty);\n+       NULL_TREE, is_disabled, true, true, true, NULL, Empty);\n   DECL_BUILT_IN_CLASS (setjmp_decl) = BUILT_IN_NORMAL;\n   DECL_FUNCTION_CODE (setjmp_decl) = BUILT_IN_SETJMP;\n \n@@ -487,7 +489,7 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name ATTRIBUTE_UNUSED,\n     = create_subprog_decl\n       (get_identifier (\"__builtin_update_setjmp_buf\"), NULL_TREE,\n        build_function_type_list (void_type_node, jmpbuf_ptr_type, NULL_TREE),\n-       NULL_TREE, false, true, true, true, NULL, Empty);\n+       NULL_TREE, is_disabled, true, true, true, NULL, Empty);\n   DECL_BUILT_IN_CLASS (update_setjmp_buf_decl) = BUILT_IN_NORMAL;\n   DECL_FUNCTION_CODE (update_setjmp_buf_decl) = BUILT_IN_UPDATE_SETJMP_BUF;\n \n@@ -497,27 +499,27 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name ATTRIBUTE_UNUSED,\n \n   begin_handler_decl\n     = create_subprog_decl (get_identifier (\"__gnat_begin_handler\"), NULL_TREE,\n-\t\t\t   ftype, NULL_TREE, false, true, true, true, NULL,\n-\t\t\t   Empty);\n+\t\t\t   ftype, NULL_TREE, is_disabled, true, true, true,\n+\t\t\t   NULL, Empty);\n   DECL_IGNORED_P (begin_handler_decl) = 1;\n \n   end_handler_decl\n     = create_subprog_decl (get_identifier (\"__gnat_end_handler\"), NULL_TREE,\n-\t\t\t   ftype, NULL_TREE, false, true, true, true, NULL,\n-\t\t\t   Empty);\n+\t\t\t   ftype, NULL_TREE, is_disabled, true, true, true,\n+\t\t\t   NULL, Empty);\n   DECL_IGNORED_P (end_handler_decl) = 1;\n \n   unhandled_except_decl\n     = create_subprog_decl (get_identifier (\"__gnat_unhandled_except_handler\"),\n \t\t\t   NULL_TREE,\n-\t\t\t   ftype, NULL_TREE, false, true, true, true, NULL,\n-\t\t\t   Empty);\n+\t\t\t   ftype, NULL_TREE, is_disabled, true, true, true,\n+\t\t\t   NULL, Empty);\n   DECL_IGNORED_P (unhandled_except_decl) = 1;\n \n   reraise_zcx_decl\n     = create_subprog_decl (get_identifier (\"__gnat_reraise_zcx\"), NULL_TREE,\n-\t\t\t   ftype, NULL_TREE, false, true, true, true, NULL,\n-\t\t\t   Empty);\n+\t\t\t   ftype, NULL_TREE, is_disabled, true, true, true,\n+\t\t\t   NULL, Empty);\n   /* Indicate that these never return.  */\n   DECL_IGNORED_P (reraise_zcx_decl) = 1;\n   TREE_THIS_VOLATILE (reraise_zcx_decl) = 1;\n@@ -537,7 +539,7 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name ATTRIBUTE_UNUSED,\n \t\t\t\t     build_pointer_type\n \t\t\t\t     (unsigned_char_type_node),\n \t\t\t\t     integer_type_node, NULL_TREE),\n-\t   NULL_TREE, false, true, true, true, NULL, Empty);\n+\t   NULL_TREE, is_disabled, true, true, true, NULL, Empty);\n       TREE_THIS_VOLATILE (decl) = 1;\n       TREE_SIDE_EFFECTS (decl) = 1;\n       TREE_TYPE (decl)\n@@ -570,7 +572,7 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name ATTRIBUTE_UNUSED,\n       (get_identifier (\"system__soft_links__get_gnat_exception\"), NULL_TREE,\n        build_function_type_list (build_pointer_type (except_type_node),\n \t\t\t\t NULL_TREE),\n-     NULL_TREE, false, true, true, true, NULL, Empty);\n+     NULL_TREE, is_disabled, true, true, true, NULL, Empty);\n   DECL_IGNORED_P (get_excptr_decl) = 1;\n \n   raise_nodefer_decl\n@@ -579,7 +581,7 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name ATTRIBUTE_UNUSED,\n        build_function_type_list (void_type_node,\n \t\t\t\t build_pointer_type (except_type_node),\n \t\t\t\t NULL_TREE),\n-       NULL_TREE, false, true, true, true, NULL, Empty);\n+       NULL_TREE, is_disabled, true, true, true, NULL, Empty);\n \n   /* Indicate that it never returns.  */\n   TREE_THIS_VOLATILE (raise_nodefer_decl) = 1;\n@@ -752,7 +754,7 @@ build_raise_check (int check, enum exception_info_kind kind)\n   result\n     = create_subprog_decl (get_identifier (Name_Buffer),\n \t\t\t   NULL_TREE, ftype, NULL_TREE,\n-\t\t\t   false, true, true, true, NULL, Empty);\n+\t\t\t   is_disabled, true, true, true, NULL, Empty);\n \n   /* Indicate that it never returns.  */\n   TREE_THIS_VOLATILE (result) = 1;\n@@ -2813,7 +2815,7 @@ establish_gnat_vms_condition_handler (void)\n \t\t\t\t\t\t\t ptr_void_type_node,\n \t\t\t\t\t\t\t ptr_void_type_node,\n \t\t\t\t\t\t\t NULL_TREE),\n-\t\t\t       NULL_TREE, false, true, true, true, NULL,\n+\t\t\t       NULL_TREE, is_disabled, true, true, true, NULL,\n \t\t\t       Empty);\n \n       /* ??? DECL_CONTEXT shouldn't have been set because of DECL_EXTERNAL.  */\n@@ -4867,7 +4869,7 @@ Compilation_Unit_to_gnu (Node_Id gnat_node)\n   tree gnu_elab_proc_decl\n     = create_subprog_decl\n       (create_concat_name (gnat_unit_entity, body_p ? \"elabb\" : \"elabs\"),\n-       NULL_TREE, void_ftype, NULL_TREE, false, true, false, true, NULL,\n+       NULL_TREE, void_ftype, NULL_TREE, is_disabled, true, false, true, NULL,\n        gnat_unit);\n   struct elab_info *info;\n \n@@ -5795,7 +5797,7 @@ gnat_to_gnu (Node_Id gnat_node)\n \t    create_subprog_decl (create_concat_name\n \t\t\t\t (Entity (Prefix (gnat_node)),\n \t\t\t\t  attr == Attr_Elab_Body ? \"elabb\" : \"elabs\"),\n-\t\t\t\t NULL_TREE, void_ftype, NULL_TREE, false,\n+\t\t\t\t NULL_TREE, void_ftype, NULL_TREE, is_disabled,\n \t\t\t\t true, true, true, NULL, gnat_node);\n \n \tgnu_result = Attribute_to_gnu (gnat_node, &gnu_result_type, attr);"}, {"sha": "0906c0c319de27cb32d9e446e162d729b007f241", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e24192cc9ae888874557a6caeace67131724c03/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e24192cc9ae888874557a6caeace67131724c03/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=0e24192cc9ae888874557a6caeace67131724c03", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *          Copyright (C) 1992-2012, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2013, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -2621,14 +2621,14 @@ create_label_decl (tree label_name, Node_Id gnat_node)\n    node), PARAM_DECL_LIST is the list of the subprogram arguments (a list of\n    PARM_DECL nodes chained through the DECL_CHAIN field).\n \n-   INLINE_FLAG, PUBLIC_FLAG, EXTERN_FLAG, ARTIFICIAL_FLAG and ATTR_LIST are\n+   INLINE_STATUS, PUBLIC_FLAG, EXTERN_FLAG, ARTIFICIAL_FLAG and ATTR_LIST are\n    used to set the appropriate fields in the FUNCTION_DECL.  GNAT_NODE is\n    used for the position of the decl.  */\n \n tree\n create_subprog_decl (tree subprog_name, tree asm_name, tree subprog_type,\n-\t\t     tree param_decl_list, bool inline_flag, bool public_flag,\n-\t\t     bool extern_flag, bool artificial_flag,\n+ \t\t     tree param_decl_list, enum inline_status_t inline_status,\n+\t\t     bool public_flag, bool extern_flag, bool artificial_flag,\n \t\t     struct attrib *attr_list, Node_Id gnat_node)\n {\n   tree subprog_decl = build_decl (input_location, FUNCTION_DECL, subprog_name,\n@@ -2642,7 +2642,7 @@ create_subprog_decl (tree subprog_name, tree asm_name, tree subprog_type,\n      function in the current unit since it is private to the other unit.\n      We could inline the nested function as well but it's probably better\n      to err on the side of too little inlining.  */\n-  if (!inline_flag\n+  if (inline_status != is_enabled\n       && !public_flag\n       && current_function_decl\n       && DECL_DECLARED_INLINE_P (current_function_decl)\n@@ -2651,8 +2651,24 @@ create_subprog_decl (tree subprog_name, tree asm_name, tree subprog_type,\n \n   DECL_ARTIFICIAL (subprog_decl) = artificial_flag;\n   DECL_EXTERNAL (subprog_decl) = extern_flag;\n-  DECL_DECLARED_INLINE_P (subprog_decl) = inline_flag;\n-  DECL_NO_INLINE_WARNING_P (subprog_decl) = inline_flag && artificial_flag;\n+\n+  switch (inline_status)\n+    {\n+    case is_suppressed:\n+      DECL_UNINLINABLE (subprog_decl) = 1;\n+      break;\n+\n+    case is_disabled:\n+      break;\n+\n+    case is_enabled:\n+      DECL_DECLARED_INLINE_P (subprog_decl) = 1;\n+      DECL_NO_INLINE_WARNING_P (subprog_decl) = artificial_flag;\n+      break;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n \n   TREE_PUBLIC (subprog_decl) = public_flag;\n   TREE_READONLY (subprog_decl) = TYPE_READONLY (subprog_type);"}, {"sha": "b8455ce21476a2240f93ceecbccaeac2e70fe62b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e24192cc9ae888874557a6caeace67131724c03/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e24192cc9ae888874557a6caeace67131724c03/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0e24192cc9ae888874557a6caeace67131724c03", "patch": "@@ -1,3 +1,10 @@\n+2013-05-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/specs/noinline1.ads: New test.\n+\t* gnat.dg/noinline2.ad[sb]: Likewise.\n+\t* gnat.dg/specs/noinline3.ads: Likewise.\n+\t* gnat.dg/specs/noinline3_pkg.ad[sb]: New helper.\n+\n 2013-05-24  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \n \tPR tree-ssa/57385"}, {"sha": "0c26edeab9c11761b3d7ff6f251d5dd320de63c9", "filename": "gcc/testsuite/gnat.dg/noinline2.adb", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e24192cc9ae888874557a6caeace67131724c03/gcc%2Ftestsuite%2Fgnat.dg%2Fnoinline2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e24192cc9ae888874557a6caeace67131724c03/gcc%2Ftestsuite%2Fgnat.dg%2Fnoinline2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fnoinline2.adb?ref=0e24192cc9ae888874557a6caeace67131724c03", "patch": "@@ -0,0 +1,22 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O2 -fdump-tree-optimized\" }\n+\n+package body Noinline2 is\n+\n+  function Inner (A, B : Integer) return Integer;\n+  pragma No_Inline (Inner);\n+\n+  function Inner (A, B : Integer) return Integer is\n+  begin\n+    return A + B;\n+  end;\n+\n+  function F (A, B : Integer) return Integer is\n+  begin\n+    return Inner (A, B) + Inner (A, -B);\n+  end;\n+\n+end Noinline2;\n+\n+-- { dg-final { scan-tree-dump-times \"noinline2.inner\" 2 \"optimized\"  } }\n+-- { dg-final { cleanup-tree-dump \"optimized\" } }"}, {"sha": "f0a18530a96dd693e4bcf4e38dc31f37d9a17d65", "filename": "gcc/testsuite/gnat.dg/noinline2.ads", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e24192cc9ae888874557a6caeace67131724c03/gcc%2Ftestsuite%2Fgnat.dg%2Fnoinline2.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e24192cc9ae888874557a6caeace67131724c03/gcc%2Ftestsuite%2Fgnat.dg%2Fnoinline2.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fnoinline2.ads?ref=0e24192cc9ae888874557a6caeace67131724c03", "patch": "@@ -0,0 +1,5 @@\n+package Noinline2 is\n+\n+  function F (A, B : Integer) return Integer;\n+\n+end Noinline2;"}, {"sha": "c50ac18c7436cf9ec2887ed41732350344c8ba7b", "filename": "gcc/testsuite/gnat.dg/specs/noinline1.ads", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e24192cc9ae888874557a6caeace67131724c03/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fnoinline1.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e24192cc9ae888874557a6caeace67131724c03/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fnoinline1.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fnoinline1.ads?ref=0e24192cc9ae888874557a6caeace67131724c03", "patch": "@@ -0,0 +1,21 @@\n+-- { dg-do compile }\n+\n+package Noinline1 is\n+\n+  procedure Proc1;\n+  pragma Inline (Proc1);\n+  pragma No_Inline (Proc1); -- { dg-warning \"both specified\" }\n+\n+  procedure Proc2;\n+  pragma No_Inline (Proc2);\n+  pragma Inline (Proc2); -- { dg-warning \"both specified\" }\n+\n+  procedure Proc3;\n+  pragma Inline_Always (Proc3);\n+  pragma No_Inline (Proc3); -- { dg-error \"mutually exclusive\" }\n+\n+  procedure Proc4;\n+  pragma No_Inline (Proc4);\n+  pragma Inline_Always (Proc4); -- { dg-error \"mutually exclusive\" }\n+\n+end Noinline1;"}, {"sha": "06a33fbc746331b5dab5b3483d6c317ddb1e2c73", "filename": "gcc/testsuite/gnat.dg/specs/noinline3.ads", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e24192cc9ae888874557a6caeace67131724c03/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fnoinline3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e24192cc9ae888874557a6caeace67131724c03/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fnoinline3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fnoinline3.ads?ref=0e24192cc9ae888874557a6caeace67131724c03", "patch": "@@ -0,0 +1,9 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O2 -fdump-tree-optimized\" }\n+\n+with Noinline3_Pkg;\n+\n+package Noinline3 is new Noinline3_Pkg (0);\n+\n+-- { dg-final { scan-tree-dump-times \"noinline3.inner\" 2 \"optimized\"  } }\n+-- { dg-final { cleanup-tree-dump \"optimized\" } }"}, {"sha": "f19826d63575625287fd65bf4acb0db3f47058b3", "filename": "gcc/testsuite/gnat.dg/specs/noinline3_pkg.adb", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e24192cc9ae888874557a6caeace67131724c03/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fnoinline3_pkg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e24192cc9ae888874557a6caeace67131724c03/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fnoinline3_pkg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fnoinline3_pkg.adb?ref=0e24192cc9ae888874557a6caeace67131724c03", "patch": "@@ -0,0 +1,16 @@\n+package body Noinline3_Pkg is\n+\n+  function Inner (A, B : Integer) return Integer;\n+  pragma No_Inline (Inner);\n+\n+  function Inner (A, B : Integer) return Integer is\n+  begin\n+    return A + B;\n+  end;\n+\n+  function F (A, B : Integer) return Integer is\n+  begin\n+    return Inner (A, B) + Inner (A, -B);\n+  end;\n+\n+end Noinline3_Pkg;"}, {"sha": "b1fa450b3b176612a84cc59b7b84f201b7b548c0", "filename": "gcc/testsuite/gnat.dg/specs/noinline3_pkg.ads", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e24192cc9ae888874557a6caeace67131724c03/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fnoinline3_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e24192cc9ae888874557a6caeace67131724c03/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fnoinline3_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fnoinline3_pkg.ads?ref=0e24192cc9ae888874557a6caeace67131724c03", "patch": "@@ -0,0 +1,11 @@\n+-- { dg-excess-errors \"cannot generate code\" }\n+\n+generic\n+\n+  I : Integer;\n+\n+package Noinline3_Pkg is\n+\n+  function F (A, B : Integer) return Integer;\n+\n+end Noinline3_Pkg;"}]}