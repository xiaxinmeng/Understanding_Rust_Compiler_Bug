{"sha": "bebabf70a01b78d9bea65a0bbe8744a2adb6b373", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmViYWJmNzBhMDFiNzhkOWJlYTY1YTBiYmU4NzQ0YTJhZGI2YjM3Mw==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-11-02T18:19:29Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-11-02T18:19:29Z"}, "message": "c++: Don't purge the satisfaction caches\n\nThe adoption of P2104 (\"Disallow changing concept values\") means we can\nmemoize the result of satisfaction indefinitely and no longer have to\nclear the satisfaction caches on various events that would affect\nsatisfaction.  To that end, this patch removes the invalidation routine\nclear_satisfaction_cache and adjusts its callers appropriately.\n\nThis provides a large reduction in compile time and memory use in some\ncases.  For example, on the libstdc++ test std/ranges/adaptor/join.cc,\ncompile time and memory usage drops nearly 75%, from 7.5s/770MB to\n2s/230MB, with a --enable-checking=release compiler.\n\ngcc/cp/ChangeLog:\n\n\t* class.c (finish_struct_1): Don't call clear_satisfaction_cache.\n\t* constexpr.c (clear_cv_and_fold_caches): Likewise.  Remove bool\n\tparameter.\n\t* constraint.cc (clear_satisfaction_cache): Remove definition.\n\t* cp-tree.h (clear_satisfaction_cache): Remove declaration.\n\t(clear_cv_and_fold_caches): Remove bool parameter.\n\t* typeck2.c (store_init_value): Remove argument to\n\tclear_cv_and_fold_caches.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/concepts-complete1.C: Delete test that became\n\till-formed after P2104.", "tree": {"sha": "551fb34e5c8b4d5111aa6493f8e6555fc9821c43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/551fb34e5c8b4d5111aa6493f8e6555fc9821c43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bebabf70a01b78d9bea65a0bbe8744a2adb6b373", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bebabf70a01b78d9bea65a0bbe8744a2adb6b373", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bebabf70a01b78d9bea65a0bbe8744a2adb6b373", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bebabf70a01b78d9bea65a0bbe8744a2adb6b373/comments", "author": null, "committer": null, "parents": [{"sha": "05161256d3d2a598966ca1cf676fa0e427570f73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05161256d3d2a598966ca1cf676fa0e427570f73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05161256d3d2a598966ca1cf676fa0e427570f73"}], "stats": {"total": 34, "additions": 4, "deletions": 30}, "files": [{"sha": "6c21682a3e50d39b72405af81efce8ba3412d525", "filename": "gcc/cp/class.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bebabf70a01b78d9bea65a0bbe8744a2adb6b373/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bebabf70a01b78d9bea65a0bbe8744a2adb6b373/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=bebabf70a01b78d9bea65a0bbe8744a2adb6b373", "patch": "@@ -7472,9 +7472,6 @@ finish_struct_1 (tree t)\n   /* Finish debugging output for this type.  */\n   rest_of_type_compilation (t, ! LOCAL_CLASS_P (t));\n \n-  /* Recalculate satisfaction that might depend on completeness.  */\n-  clear_satisfaction_cache ();\n-\n   if (TYPE_TRANSPARENT_AGGR (t))\n     {\n       tree field = first_field (t);"}, {"sha": "83c3bb49499230a40ca7112aafb0f287487e9c68", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bebabf70a01b78d9bea65a0bbe8744a2adb6b373/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bebabf70a01b78d9bea65a0bbe8744a2adb6b373/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=bebabf70a01b78d9bea65a0bbe8744a2adb6b373", "patch": "@@ -7136,15 +7136,13 @@ clear_cv_cache (void)\n     cv_cache->empty ();\n }\n \n-/* Dispose of the whole CV_CACHE, FOLD_CACHE, and satisfaction caches.  */\n+/* Dispose of the whole CV_CACHE and FOLD_CACHE.  */\n \n void\n-clear_cv_and_fold_caches (bool sat /*= true*/)\n+clear_cv_and_fold_caches ()\n {\n   clear_cv_cache ();\n   clear_fold_cache ();\n-  if (sat)\n-    clear_satisfaction_cache ();\n }\n \n /* Internal function handling expressions in templates for"}, {"sha": "b6f6f0d02a5e8c4edab52ccc03c3026ae88e1c0f", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bebabf70a01b78d9bea65a0bbe8744a2adb6b373/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bebabf70a01b78d9bea65a0bbe8744a2adb6b373/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=bebabf70a01b78d9bea65a0bbe8744a2adb6b373", "patch": "@@ -2327,15 +2327,6 @@ save_satisfaction (tree constr, tree args, tree result)\n   *slot = entry;\n }\n \n-void\n-clear_satisfaction_cache ()\n-{\n-  if (sat_cache)\n-    sat_cache->empty ();\n-  if (decl_satisfied_cache)\n-    decl_satisfied_cache->empty ();\n-}\n-\n /* A tool to help manage satisfaction caching in satisfy_constraint_r.\n    Note the cache is only used when not diagnosing errors.  */\n "}, {"sha": "3b4f772cc70cb468f5206402baf625924008038c", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bebabf70a01b78d9bea65a0bbe8744a2adb6b373/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bebabf70a01b78d9bea65a0bbe8744a2adb6b373/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=bebabf70a01b78d9bea65a0bbe8744a2adb6b373", "patch": "@@ -7831,7 +7831,6 @@ extern tree evaluate_concept_check              (tree, tsubst_flags_t);\n extern tree satisfy_constraint_expression\t(tree);\n extern bool constraints_satisfied_p\t\t(tree);\n extern bool constraints_satisfied_p\t\t(tree, tree);\n-extern void clear_satisfaction_cache\t\t();\n extern bool* lookup_subsumption_result          (tree, tree);\n extern bool save_subsumption_result             (tree, tree, bool);\n extern tree find_template_parameters\t\t(tree, tree);\n@@ -7901,7 +7900,7 @@ extern bool var_in_maybe_constexpr_fn           (tree);\n extern void explain_invalid_constexpr_fn        (tree);\n extern vec<tree> cx_error_context               (void);\n extern tree fold_sizeof_expr\t\t\t(tree);\n-extern void clear_cv_and_fold_caches\t\t(bool = true);\n+extern void clear_cv_and_fold_caches\t\t(void);\n extern tree unshare_constructor\t\t\t(tree CXX_MEM_STAT_INFO);\n \n /* An RAII sentinel used to restrict constexpr evaluation so that it"}, {"sha": "445e2a211c860d011750181a8fb2e3b92af12ea2", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bebabf70a01b78d9bea65a0bbe8744a2adb6b373/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bebabf70a01b78d9bea65a0bbe8744a2adb6b373/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=bebabf70a01b78d9bea65a0bbe8744a2adb6b373", "patch": "@@ -954,7 +954,7 @@ store_init_value (tree decl, tree init, vec<tree, va_gc>** cleanups, int flags)\n     return split_nonconstant_init (decl, value);\n \n   /* DECL may change value; purge caches.  */\n-  clear_cv_and_fold_caches (TREE_STATIC (decl));\n+  clear_cv_and_fold_caches ();\n \n   /* If the value is a constant, just put it in DECL_INITIAL.  If DECL\n      is an automatic variable, the middle end will turn this into a"}, {"sha": "63f36965f006ab619584052cef0e5f185a41e22d", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-complete1.C", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05161256d3d2a598966ca1cf676fa0e427570f73/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-complete1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05161256d3d2a598966ca1cf676fa0e427570f73/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-complete1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-complete1.C?ref=05161256d3d2a598966ca1cf676fa0e427570f73", "patch": "@@ -1,11 +0,0 @@\n-// { dg-do compile { target c++20 } }\n-\n-template <class T> concept has_mem_type = requires { typename T::type; };\n-\n-template <has_mem_type T> int f () { return 0; }\n-template <class T> char f() { return 0; }\n-\n-struct A;\n-static_assert (sizeof (f<A>()) == 1);\n-struct A { typedef int type; };\n-static_assert (sizeof (f<A>()) > 1);"}]}