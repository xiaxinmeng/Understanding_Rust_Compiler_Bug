{"sha": "7670d795d5fe6685c133a43ce15f5842c1d6aa25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY3MGQ3OTVkNWZlNjY4NWMxMzNhNDNjZTE1ZjU4NDJjMWQ2YWEyNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-12-16T18:24:15Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-12-16T18:24:15Z"}, "message": "tree-vectorizer.h (struct _loop_vec_info): Add scalar_loop field.\n\n\t* tree-vectorizer.h (struct _loop_vec_info): Add scalar_loop field.\n\t(LOOP_VINFO_SCALAR_LOOP): Define.\n\t(slpeel_tree_duplicate_loop_to_edge_cfg): Add scalar_loop argument.\n\t* config/i386/sse.md (maskload<mode>, maskstore<mode>): New expanders.\n\t* tree-data-ref.c (get_references_in_stmt): Handle MASK_LOAD and\n\tMASK_STORE.\n\t* internal-fn.def (LOOP_VECTORIZED, MASK_LOAD, MASK_STORE): New\n\tinternal fns.\n\t* tree-if-conv.c: Include expr.h, optabs.h, tree-ssa-loop-ivopts.h and\n\ttree-ssa-address.h.\n\t(release_bb_predicate): New function.\n\t(free_bb_predicate): Use it.\n\t(reset_bb_predicate): Likewise.  Don't unallocate bb->aux\n\tjust to immediately allocate it again.\n\t(add_to_predicate_list): Add loop argument.  If basic blocks that\n\tdominate loop->latch don't insert any predicate.\n\t(add_to_dst_predicate_list): Adjust caller.\n\t(if_convertible_phi_p): Add any_mask_load_store argument, if true,\n\thandle it like flag_tree_loop_if_convert_stores.\n\t(insert_gimplified_predicates): Likewise.\n\t(ifcvt_can_use_mask_load_store): New function.\n\t(if_convertible_gimple_assign_stmt_p): Add any_mask_load_store\n\targument, check if some conditional loads or stores can't be\n\tconverted into MASK_LOAD or MASK_STORE.\n\t(if_convertible_stmt_p): Add any_mask_load_store argument,\n\tpass it down to if_convertible_gimple_assign_stmt_p.\n\t(predicate_bbs): Don't return bool, only check if the last stmt\n\tof a basic block is GIMPLE_COND and handle that.  Adjust\n\tadd_to_predicate_list caller.\n\t(if_convertible_loop_p_1): Only call predicate_bbs if\n\tflag_tree_loop_if_convert_stores and free_bb_predicate in that case\n\tafterwards, check gimple_code of stmts here.  Replace is_predicated\n\tcheck with dominance check.  Add any_mask_load_store argument,\n\tpass it down to if_convertible_stmt_p and if_convertible_phi_p,\n\tcall if_convertible_phi_p only after all if_convertible_stmt_p\n\tcalls.\n\t(if_convertible_loop_p): Add any_mask_load_store argument,\n\tpass it down to if_convertible_loop_p_1.\n\t(predicate_mem_writes): Emit MASK_LOAD and/or MASK_STORE calls.\n\t(combine_blocks): Add any_mask_load_store argument, pass\n\tit down to insert_gimplified_predicates and call predicate_mem_writes\n\tif it is set.  Call predicate_bbs.\n\t(version_loop_for_if_conversion): New function.\n\t(tree_if_conversion): Adjust if_convertible_loop_p and combine_blocks\n\tcalls.  Return todo flags instead of bool, call\n\tversion_loop_for_if_conversion if if-conversion should be just\n\tfor the vectorized loops and nothing else.\n\t(main_tree_if_conversion): Adjust caller.  Don't call\n\ttree_if_conversion for dont_vectorize loops if if-conversion\n\tisn't explicitly enabled.\n\t* tree-vect-data-refs.c (vect_check_gather): Handle\n\tMASK_LOAD/MASK_STORE.\n\t(vect_analyze_data_refs, vect_supportable_dr_alignment): Likewise.\n\t* gimple.h (gimple_expr_type): Handle MASK_STORE.\n\t* internal-fn.c (expand_LOOP_VECTORIZED, expand_MASK_LOAD,\n\texpand_MASK_STORE): New functions.\n\t* tree-vectorizer.c: Include tree-cfg.h and gimple-fold.h.\n\t(vect_loop_vectorized_call, fold_loop_vectorized_call): New functions.\n\t(vectorize_loops): Don't try to vectorize loops with\n\tloop->dont_vectorize set.  Set LOOP_VINFO_SCALAR_LOOP for if-converted\n\tloops, fold LOOP_VECTORIZED internal call depending on if loop\n\thas been vectorized or not.\n\t* tree-vect-loop-manip.c (slpeel_duplicate_current_defs_from_edges):\n\tNew function.\n\t(slpeel_tree_duplicate_loop_to_edge_cfg): Add scalar_loop argument.\n\tIf non-NULL, copy basic blocks from scalar_loop instead of loop, but\n\tstill to loop's entry or exit edge.\n\t(slpeel_tree_peel_loop_to_edge): Add scalar_loop argument, pass it\n\tdown to slpeel_tree_duplicate_loop_to_edge_cfg.\n\t(vect_do_peeling_for_loop_bound, vect_do_peeling_for_loop_alignment):\n\tAdjust callers.\n\t(vect_loop_versioning): If LOOP_VINFO_SCALAR_LOOP, perform loop\n\tversioning from that loop instead of LOOP_VINFO_LOOP, move it to the\n\tright place in the CFG afterwards.\n\t* tree-vect-loop.c (vect_determine_vectorization_factor): Handle\n\tMASK_STORE.\n\t* cfgloop.h (struct loop): Add dont_vectorize field.\n\t* tree-loop-distribution.c (copy_loop_before): Adjust\n\tslpeel_tree_duplicate_loop_to_edge_cfg caller.\n\t* optabs.def (maskload_optab, maskstore_optab): New optabs.\n\t* passes.def: Add a note that pass_vectorize must immediately follow\n\tpass_if_conversion.\n\t* tree-predcom.c (split_data_refs_to_components): Give up if\n\tDR_STMT is a call.\n\t* tree-vect-stmts.c (vect_mark_relevant): Don't crash if lhs\n\tis NULL.\n\t(exist_non_indexing_operands_for_use_p): Handle MASK_LOAD\n\tand MASK_STORE.\n\t(vectorizable_mask_load_store): New function.\n\t(vectorizable_call): Call it for MASK_LOAD or MASK_STORE.\n\t(vect_transform_stmt): Handle MASK_STORE.\n\t* tree-ssa-phiopt.c (cond_if_else_store_replacement): Ignore\n\tDR_STMT where lhs is NULL.\n\t* optabs.h (can_vec_perm_p): Fix up comment typo.\n\t(can_vec_mask_load_store_p): New prototype.\n\t* optabs.c (can_vec_mask_load_store_p): New function.\n\n\t* gcc.dg/vect/vect-cond-11.c: New test.\n\t* gcc.target/i386/vect-cond-1.c: New test.\n\t* gcc.target/i386/avx2-gather-5.c: New test.\n\t* gcc.target/i386/avx2-gather-6.c: New test.\n\t* gcc.dg/vect/vect-mask-loadstore-1.c: New test.\n\t* gcc.dg/vect/vect-mask-load-1.c: New test.\n\nFrom-SVN: r206022", "tree": {"sha": "107508aba445e74a0f561829718b487976861963", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/107508aba445e74a0f561829718b487976861963"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7670d795d5fe6685c133a43ce15f5842c1d6aa25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7670d795d5fe6685c133a43ce15f5842c1d6aa25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7670d795d5fe6685c133a43ce15f5842c1d6aa25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7670d795d5fe6685c133a43ce15f5842c1d6aa25/comments", "author": null, "committer": null, "parents": [{"sha": "d5be9028803017ddc2e3e6471eb7c167e5458dc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5be9028803017ddc2e3e6471eb7c167e5458dc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5be9028803017ddc2e3e6471eb7c167e5458dc8"}], "stats": {"total": 293, "additions": 293, "deletions": 0}, "files": [{"sha": "0301c890979d5cce3d0fabda96c620340f4e10f6", "filename": "gcc/testsuite/gcc.dg/vect/vect-cond-11.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7670d795d5fe6685c133a43ce15f5842c1d6aa25/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-cond-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7670d795d5fe6685c133a43ce15f5842c1d6aa25/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-cond-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-cond-11.c?ref=7670d795d5fe6685c133a43ce15f5842c1d6aa25", "patch": "@@ -0,0 +1,116 @@\n+#include \"tree-vect.h\"\n+\n+#define N 1024\n+typedef int V __attribute__((vector_size (4)));\n+unsigned int a[N * 2] __attribute__((aligned));\n+unsigned int b[N * 2] __attribute__((aligned));\n+V c[N];\n+\n+__attribute__((noinline, noclone)) unsigned int\n+foo (unsigned int *a, unsigned int *b)\n+{\n+  int i;\n+  unsigned int r = 0;\n+  for (i = 0; i < N; i++)\n+    {\n+      unsigned int x = a[i], y = b[i];\n+      if (x < 32)\n+\t{\n+\t  x = x + 127;\n+\t  y = y * 2;\n+\t}\n+      else\n+\t{\n+\t  x = x - 16;\n+\t  y = y + 1;\n+\t}\n+      a[i] = x;\n+      b[i] = y;\n+      r += x;\n+    }\n+  return r;\n+}\n+\n+__attribute__((noinline, noclone)) unsigned int\n+bar (unsigned int *a, unsigned int *b)\n+{\n+  int i;\n+  unsigned int r = 0;\n+  for (i = 0; i < N; i++)\n+    {\n+      unsigned int x = a[i], y = b[i];\n+      if (x < 32)\n+\t{\n+\t  x = x + 127;\n+\t  y = y * 2;\n+\t}\n+      else\n+\t{\n+\t  x = x - 16;\n+\t  y = y + 1;\n+\t}\n+      a[i] = x;\n+      b[i] = y;\n+      c[i] = c[i] + 1;\n+      r += x;\n+    }\n+  return r;\n+}\n+\n+void\n+baz (unsigned int *a, unsigned int *b,\n+     unsigned int (*fn) (unsigned int *, unsigned int *))\n+{\n+  int i;\n+  for (i = -64; i < 0; i++)\n+    {\n+      a[i] = 19;\n+      b[i] = 17;\n+    }\n+  for (; i < N; i++)\n+    {\n+      a[i] = i - 512;\n+      b[i] = i;\n+    }\n+  for (; i < N + 64; i++)\n+    {\n+      a[i] = 27;\n+      b[i] = 19;\n+    }\n+  if (fn (a, b) != -512U - (N - 32) * 16U + 32 * 127U)\n+    __builtin_abort ();\n+  for (i = -64; i < 0; i++)\n+    if (a[i] != 19 || b[i] != 17)\n+      __builtin_abort ();\n+  for (; i < N; i++)\n+    if (a[i] != (i - 512U < 32U ? i - 512U + 127 : i - 512U - 16)\n+\t|| b[i] != (i - 512U < 32U ? i * 2U : i + 1U))\n+      __builtin_abort ();\n+  for (; i < N + 64; i++)\n+    if (a[i] != 27 || b[i] != 19)\n+      __builtin_abort ();\n+}\n+\n+int\n+main ()\n+{\n+  int i;\n+  check_vect ();\n+  baz (a + 512, b + 512, foo);\n+  baz (a + 512, b + 512, bar);\n+  baz (a + 512 + 1, b + 512 + 1, foo);\n+  baz (a + 512 + 1, b + 512 + 1, bar);\n+  baz (a + 512 + 31, b + 512 + 31, foo);\n+  baz (a + 512 + 31, b + 512 + 31, bar);\n+  baz (a + 512 + 1, b + 512, foo);\n+  baz (a + 512 + 1, b + 512, bar);\n+  baz (a + 512 + 31, b + 512, foo);\n+  baz (a + 512 + 31, b + 512, bar);\n+  baz (a + 512, b + 512 + 1, foo);\n+  baz (a + 512, b + 512 + 1, bar);\n+  baz (a + 512, b + 512 + 31, foo);\n+  baz (a + 512, b + 512 + 31, bar);\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "2c30830bee2c88d5e9ed77a025c1bd7b6ac67aa3", "filename": "gcc/testsuite/gcc.dg/vect/vect-mask-load-1.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7670d795d5fe6685c133a43ce15f5842c1d6aa25/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-mask-load-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7670d795d5fe6685c133a43ce15f5842c1d6aa25/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-mask-load-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-mask-load-1.c?ref=7670d795d5fe6685c133a43ce15f5842c1d6aa25", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-Ofast -fno-common\" } */\n+/* { dg-additional-options \"-Ofast -fno-common -mavx\" { target avx_runtime } } */\n+\n+#include <stdlib.h>\n+#include \"tree-vect.h\"\n+\n+__attribute__((noinline, noclone)) void\n+foo (double *x, double *y)\n+{\n+  double *p = __builtin_assume_aligned (x, 16);\n+  double *q = __builtin_assume_aligned (y, 16);\n+  double z, h;\n+  int i;\n+  for (i = 0; i < 1024; i++)\n+    {\n+      if (p[i] < 0.0)\n+\tz = q[i], h = q[i] * 7.0 + 3.0;\n+      else\n+\tz = p[i] + 6.0, h = p[1024 + i];\n+      p[i] = z + 2.0 * h;\n+    }\n+}\n+\n+double a[2048] __attribute__((aligned (16)));\n+double b[1024] __attribute__((aligned (16)));\n+\n+int\n+main ()\n+{\n+  int i;\n+  check_vect ();\n+  for (i = 0; i < 1024; i++)\n+    {\n+      a[i] = (i & 1) ? -i : 2 * i;\n+      a[i + 1024] = i;\n+      b[i] = 7 * i;\n+      asm (\"\");\n+    }\n+  foo (a, b);\n+  for (i = 0; i < 1024; i++)\n+    if (a[i] != ((i & 1)\n+\t\t ? 7 * i + 2.0 * (7 * i * 7.0 + 3.0)\n+\t\t : 2 * i + 6.0 + 2.0 * i)\n+\t|| b[i] != 7 * i\n+\t|| a[i + 1024] != i)\n+      abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"note: vectorized 1 loops\" 1 \"vect\" { target avx_runtime } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "ecc164fe1ff64f3f442dd2fe44a609a215c8aa16", "filename": "gcc/testsuite/gcc.dg/vect/vect-mask-loadstore-1.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7670d795d5fe6685c133a43ce15f5842c1d6aa25/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-mask-loadstore-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7670d795d5fe6685c133a43ce15f5842c1d6aa25/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-mask-loadstore-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-mask-loadstore-1.c?ref=7670d795d5fe6685c133a43ce15f5842c1d6aa25", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-Ofast -fno-common\" } */\n+/* { dg-additional-options \"-Ofast -fno-common -mavx\" { target avx_runtime } } */\n+\n+#include <stdlib.h>\n+#include \"tree-vect.h\"\n+\n+__attribute__((noinline, noclone)) void\n+foo (float *__restrict x, float *__restrict y, float *__restrict z)\n+{\n+  float *__restrict p = __builtin_assume_aligned (x, 32);\n+  float *__restrict q = __builtin_assume_aligned (y, 32);\n+  float *__restrict r = __builtin_assume_aligned (z, 32);\n+  int i;\n+  for (i = 0; i < 1024; i++)\n+    {\n+      if (p[i] < 0.0f)\n+\tq[i] = p[i] + 2.0f;\n+      else\n+\tp[i] = r[i] + 3.0f;\n+    }\n+}\n+\n+float a[1024] __attribute__((aligned (32)));\n+float b[1024] __attribute__((aligned (32)));\n+float c[1024] __attribute__((aligned (32)));\n+\n+int\n+main ()\n+{\n+  int i;\n+  check_vect ();\n+  for (i = 0; i < 1024; i++)\n+    {\n+      a[i] = (i & 1) ? -i : i;\n+      b[i] = 7 * i;\n+      c[i] = a[i] - 3.0f;\n+      asm (\"\");\n+    }\n+  foo (a, b, c);\n+  for (i = 0; i < 1024; i++)\n+    if (a[i] != ((i & 1) ? -i : i)\n+\t|| b[i] != ((i & 1) ? a[i] + 2.0f : 7 * i)\n+\t|| c[i] != a[i] - 3.0f)\n+      abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"note: vectorized 1 loops\" 1 \"vect\" { target avx_runtime } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "892a20034e1ff48056a214e7e5e8619f6a4284f8", "filename": "gcc/testsuite/gcc.target/i386/avx2-gather-5.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7670d795d5fe6685c133a43ce15f5842c1d6aa25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-gather-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7670d795d5fe6685c133a43ce15f5842c1d6aa25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-gather-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-gather-5.c?ref=7670d795d5fe6685c133a43ce15f5842c1d6aa25", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O3 -mavx2 -fno-common\" } */\n+\n+#include \"avx2-check.h\"\n+\n+#define N 1024\n+float vf1[N+16], vf2[N], vf3[N];\n+int k[N];\n+\n+__attribute__((noinline, noclone)) void\n+foo (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    {\n+      float f;\n+      if (vf3[i] < 0.0f)\n+\tf = vf1[k[i]];\n+      else\n+\tf = 7.0f;\n+      vf2[i] = f;\n+    }\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  int i;\n+  for (i = 0; i < N + 16; i++)\n+    {\n+      vf1[i] = 5.5f * i;\n+      if (i >= N)\n+\tcontinue;\n+      vf2[i] = 2.0f;\n+      vf3[i] = (i & 1) ? i : -i - 1;\n+      k[i] = (i & 1) ? ((i & 2) ? -i : N / 2 + i) : (i * 7) % N;\n+      asm (\"\");\n+    }\n+  foo ();\n+  for (i = 0; i < N; i++)\n+    if (vf1[i] != 5.5 * i\n+\t|| vf2[i] != ((i & 1) ? 7.0f : 5.5f * ((i * 7) % N))\n+\t|| vf3[i] != ((i & 1) ? i : -i - 1)\n+\t|| k[i] != ((i & 1) ? ((i & 2) ? -i : N / 2 + i) : ((i * 7) % N)))\n+      abort ();\n+}"}, {"sha": "38e2009da731736b2c494867c2ea02abb4bed872", "filename": "gcc/testsuite/gcc.target/i386/avx2-gather-6.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7670d795d5fe6685c133a43ce15f5842c1d6aa25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-gather-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7670d795d5fe6685c133a43ce15f5842c1d6aa25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-gather-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-gather-6.c?ref=7670d795d5fe6685c133a43ce15f5842c1d6aa25", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mavx2 -fno-common -fdump-tree-vect-details\" } */\n+\n+#include \"avx2-gather-5.c\"\n+\n+/* { dg-final { scan-tree-dump-times \"note: vectorized 1 loops in function\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "12ae771038e9e3f9017c2660b11817edc72e2e00", "filename": "gcc/testsuite/gcc.target/i386/vect-cond-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7670d795d5fe6685c133a43ce15f5842c1d6aa25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-cond-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7670d795d5fe6685c133a43ce15f5842c1d6aa25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-cond-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-cond-1.c?ref=7670d795d5fe6685c133a43ce15f5842c1d6aa25", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -mavx2\" { target avx2 } } */\n+\n+int a[1024];\n+\n+int\n+foo (int *p)\n+{\n+  int i;\n+  for (i = 0; i < 1024; i++)\n+    {\n+      int t;\n+      if (a[i] < 30)\n+\tt = *p;\n+      else\n+\tt = a[i] + 12;\n+      a[i] = t;\n+    }\n+}\n+\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}]}