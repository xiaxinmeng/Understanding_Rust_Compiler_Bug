{"sha": "b5ff0f707cec2415f4a87e76982e58909e45bbfe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjVmZjBmNzA3Y2VjMjQxNWY0YTg3ZTc2OTgyZTU4OTA5ZTQ1YmJmZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-01-23T14:11:44Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-01-23T14:11:44Z"}, "message": "(output_init_elements): Use FIELD instead of constructor_fields when doing alignment and sizing.\n\n(output_init_elements): Use FIELD instead of constructor_fields when\ndoing alignment and sizing.\n(output_pending_init_elements): Don't blow up when writing other than\nfirst field put haven't written anything yet.  Update\nconstructor_bit_index when we emit a skip.\n\nFrom-SVN: r6414", "tree": {"sha": "ad1e62a4f0080077b05f6a868c65189e84f61630", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad1e62a4f0080077b05f6a868c65189e84f61630"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5ff0f707cec2415f4a87e76982e58909e45bbfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5ff0f707cec2415f4a87e76982e58909e45bbfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5ff0f707cec2415f4a87e76982e58909e45bbfe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5ff0f707cec2415f4a87e76982e58909e45bbfe/comments", "author": null, "committer": null, "parents": [{"sha": "16411ea68b4a7f6b2ba8f163dfee36f05ccff773", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16411ea68b4a7f6b2ba8f163dfee36f05ccff773", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16411ea68b4a7f6b2ba8f163dfee36f05ccff773"}], "stats": {"total": 31, "additions": 20, "deletions": 11}, "files": [{"sha": "990c56f356aed0f02cfce8fce24cee247ecbd223", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5ff0f707cec2415f4a87e76982e58909e45bbfe/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5ff0f707cec2415f4a87e76982e58909e45bbfe/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=b5ff0f707cec2415f4a87e76982e58909e45bbfe", "patch": "@@ -5645,7 +5645,7 @@ output_init_element (value, type, field, pending)\n \t\t{\n \t\t  /* Advance to offset of this element.  */\n \t\t  if (! tree_int_cst_equal (constructor_bit_index,\n-\t\t\t\t\t    DECL_FIELD_BITPOS (constructor_fields)))\n+\t\t\t\t\t    DECL_FIELD_BITPOS (field)))\n \t\t    {\n \t\t      int next = (TREE_INT_CST_LOW (DECL_FIELD_BITPOS (field))\n \t\t\t\t  / BITS_PER_UNIT);\n@@ -5663,9 +5663,8 @@ output_init_element (value, type, field, pending)\n \t      if (TREE_CODE (constructor_type) == RECORD_TYPE\n \t\t  || TREE_CODE (constructor_type) == UNION_TYPE)\n \t\t{\n-\t\t  tree temp = size_binop (PLUS_EXPR,\n-\t\t\t\t\t  DECL_FIELD_BITPOS (constructor_fields),\n-\t\t\t\t\t  DECL_SIZE (constructor_fields));\n+\t\t  tree temp = size_binop (PLUS_EXPR, DECL_FIELD_BITPOS (field),\n+\t\t\t\t\t  DECL_SIZE (field));\n \t\t  TREE_INT_CST_LOW (constructor_bit_index)\n \t\t    = TREE_INT_CST_LOW (temp);\n \t\t  TREE_INT_CST_HIGH (constructor_bit_index)\n@@ -5777,20 +5776,30 @@ output_pending_init_elements (all)\n       if (TREE_CODE (constructor_type) == RECORD_TYPE\n \t  || TREE_CODE (constructor_type) == UNION_TYPE)\n \t{\n-\t  /* Find the last field written out.  */\n+\t  /* Find the last field written out, if any.  */\n \t  for (tail = TYPE_FIELDS (constructor_type); tail;\n \t       tail = TREE_CHAIN (tail))\n \t    if (TREE_CHAIN (tail) == constructor_unfilled_fields)\n \t      break;\n-\t  /* Find the offset of the end of that field.  */\n-\t  filled = size_binop (CEIL_DIV_EXPR,\n-\t\t\t       size_binop (PLUS_EXPR,\n-\t\t\t\t\t   DECL_FIELD_BITPOS (tail),\n-\t\t\t\t\t   DECL_SIZE (tail)),\n-\t\t\t       size_int (BITS_PER_UNIT));\n+\n+\t  if (tail)\n+\t    /* Find the offset of the end of that field.  */\n+\t    filled = size_binop (CEIL_DIV_EXPR,\n+\t\t\t\t size_binop (PLUS_EXPR,\n+\t\t\t\t\t     DECL_FIELD_BITPOS (tail),\n+\t\t\t\t\t     DECL_SIZE (tail)),\n+\t\t\t\t size_int (BITS_PER_UNIT));\n+\t  else\n+\t    filled = size_int (0);\n+\n \t  nextpos_tree = size_binop (CEIL_DIV_EXPR,\n \t\t\t\t     DECL_FIELD_BITPOS (next),\n \t\t\t\t     size_int (BITS_PER_UNIT));\n+\n+\t  TREE_INT_CST_HIGH (constructor_bit_index)\n+\t    = TREE_INT_CST_HIGH (DECL_FIELD_BITPOS (next));\n+\t  TREE_INT_CST_LOW (constructor_bit_index)\n+\t    = TREE_INT_CST_LOW (DECL_FIELD_BITPOS (next));\n \t  constructor_unfilled_fields = next;\n \t}\n       else if (TREE_CODE (constructor_type) == ARRAY_TYPE)"}]}