{"sha": "90b2d2afa1e1d6b7a8c37b836de62f70d3a103e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBiMmQyYWZhMWUxZDZiN2E4YzM3YjgzNmRlNjJmNzBkM2ExMDNlMA==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@cambridge.redhat.com", "date": "2002-03-26T03:42:54Z"}, "committer": {"name": "Hans Boehm", "email": "hboehm@gcc.gnu.org", "date": "2002-03-26T03:42:54Z"}, "message": "configure.in, configure: enable dwarf2-exception-style exception handling on IA-64.\n\n\t* configure.in, configure: enable dwarf2-exception-style\n\texception handling on IA-64.\n\t* include/dwarf2-signal.h (MAKE_THROW_FRAME): Add for IA-64.\n\t(INIT_SEGV, INIT_FPE): Use __libc_sigaction instead of syscall.\n\tAdd FIXME comment.\n\nFrom-SVN: r51367", "tree": {"sha": "13e41aa4b2ae2a369831b422eb3db83f7990e49a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13e41aa4b2ae2a369831b422eb3db83f7990e49a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90b2d2afa1e1d6b7a8c37b836de62f70d3a103e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90b2d2afa1e1d6b7a8c37b836de62f70d3a103e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90b2d2afa1e1d6b7a8c37b836de62f70d3a103e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90b2d2afa1e1d6b7a8c37b836de62f70d3a103e0/comments", "author": null, "committer": null, "parents": [{"sha": "caba570b31bfe18bcad32fa4a5331d8575f74ddd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caba570b31bfe18bcad32fa4a5331d8575f74ddd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/caba570b31bfe18bcad32fa4a5331d8575f74ddd"}], "stats": {"total": 46, "additions": 44, "deletions": 2}, "files": [{"sha": "46a90850dee4548b712f832991cd523d7d519379", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90b2d2afa1e1d6b7a8c37b836de62f70d3a103e0/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90b2d2afa1e1d6b7a8c37b836de62f70d3a103e0/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=90b2d2afa1e1d6b7a8c37b836de62f70d3a103e0", "patch": "@@ -1,3 +1,11 @@\n+2002-03-25  Andrew Haley <aph@cambridge.redhat.com>, Hans Boehm <Hans_Boehm@hp.com>\n+\n+\t* configure.in, configure: enable dwarf2-exception-style\n+\texception handling on IA-64.\n+\t* include/dwarf2-signal.h (MAKE_THROW_FRAME): Add for IA-64.\n+\t(INIT_SEGV, INIT_FPE): Use __libc_sigaction instead of syscall.\n+\tAdd FIXME comment.\n+\t\n 2002-03-25  Tom Tromey  <tromey@redhat.com>\n \n \t* Makefile.am (libgcj_la_LDFLAGS): Use THREADLDFLAGS."}, {"sha": "f86c865a3955b41623f09efb8aae8b9cecb5a934", "filename": "libjava/configure", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90b2d2afa1e1d6b7a8c37b836de62f70d3a103e0/libjava%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90b2d2afa1e1d6b7a8c37b836de62f70d3a103e0/libjava%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure?ref=90b2d2afa1e1d6b7a8c37b836de62f70d3a103e0", "patch": "@@ -6400,6 +6400,9 @@ case \"${host}\" in\n #    SYSDEP_SOURCES=sysdep/ia64.c\n #    test -d sysdep || mkdir sysdep\n #    ;;\n+ ia64-*-linux*)\n+    SIGNAL_HANDLER=include/dwarf2-signal.h\n+    ;;\n  powerpc-*-linux*)\n     SIGNAL_HANDLER=include/dwarf2-signal.h\n     ;;"}, {"sha": "ba9649535d42c9aa2bb1c5db3240d60903c00d1f", "filename": "libjava/configure.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90b2d2afa1e1d6b7a8c37b836de62f70d3a103e0/libjava%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90b2d2afa1e1d6b7a8c37b836de62f70d3a103e0/libjava%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.in?ref=90b2d2afa1e1d6b7a8c37b836de62f70d3a103e0", "patch": "@@ -852,6 +852,9 @@ case \"${host}\" in\n #    SYSDEP_SOURCES=sysdep/ia64.c\n #    test -d sysdep || mkdir sysdep\n #    ;;\n+ ia64-*-linux*)\n+    SIGNAL_HANDLER=include/dwarf2-signal.h\n+    ;;\n  powerpc-*-linux*)\n     SIGNAL_HANDLER=include/dwarf2-signal.h\n     ;;"}, {"sha": "f1572d3e772e81810466c1841ac752e0a015b7db", "filename": "libjava/include/dwarf2-signal.h", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90b2d2afa1e1d6b7a8c37b836de62f70d3a103e0/libjava%2Finclude%2Fdwarf2-signal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90b2d2afa1e1d6b7a8c37b836de62f70d3a103e0/libjava%2Finclude%2Fdwarf2-signal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fdwarf2-signal.h?ref=90b2d2afa1e1d6b7a8c37b836de62f70d3a103e0", "patch": "@@ -41,7 +41,25 @@ do\t\t\t\t\t\t\t\t\t\\\n   _sc->sc_pc += 4;\t\t\t\t\t\t\t\\\n }\t\t\t\t\t\t\t\t\t\\\n while (0)\n+\n+#elif defined(__ia64__)\n+\n+#define MAKE_THROW_FRAME(_exception)\t\t\t\t\t\\\n+do\t\t\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  /* IA-64 either leaves PC pointing at a faulting instruction or the\t\\\n+   following instruction, depending on the signal.  SEGV always does\t\\\n+   the former, so we adjust the saved PC to point to the following\t\\\n+   instruction; this is what the handler in libgcc expects.  */\t\t\\\n+  /* Note that we are lying to the unwinder here, which expects the\t\\\n+   faulting pc, not pc+1.  But we claim the unwind information can't\t\\\n+   be changed by such a ld or st instruction, so it doesn't matter. */\t\\\n+  struct sigcontext *_sc = (struct sigcontext *)_p;\t\t\t\\\n+  _sc->sc_ip++;\t\t\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+while (0)\n #else\n+#error\n #define MAKE_THROW_FRAME(_exception)\t\t\\\n do\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\\\n@@ -50,6 +68,16 @@ do\t\t\t\t\t\t\\\n while (0)\n #endif\n \n+// FIXME: We shouldn't be using libc_sigaction here, since it should\n+// be glibc private.  But using syscall here would mean translating to\n+// the kernel's struct sigaction and argument sequence, which we\n+// shouldn't either.  The right solution is to call sigaction and to\n+// make sure that we can unwind correctly through the pthread signal\n+// wrapper.\n+extern \"C\" int __libc_sigaction (int __sig, \n+\t\t      __const struct sigaction *__restrict __act,\n+                      struct sigaction *__restrict __oact) throw ();\n+\n #define INIT_SEGV\t\t\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\\\n@@ -58,7 +86,7 @@ do\t\t\t\t\t\t\t\t\\\n     act.sa_sigaction = _Jv_catch_segv;      \t\t\t\\\n     sigemptyset (&act.sa_mask);\t\t\t\t\t\\\n     act.sa_flags = SA_SIGINFO;\t       \t\t\t\t\\\n-    syscall (SYS_sigaction, SIGSEGV, &act, NULL);\t\t\\\n+    __libc_sigaction (SIGSEGV, &act, NULL);\t\t\\\n   }\t\t\t\t\t\t\t\t\\\n while (0)  \n \n@@ -71,7 +99,7 @@ do\t\t\t\t\t\t\t\t\\\n     act.sa_sigaction = _Jv_catch_fpe;\t\t\t\t\\\n     sigemptyset (&act.sa_mask);\t\t\t\t\t\\\n     act.sa_flags = SA_SIGINFO;\t\t       \t\t\t\\\n-    syscall (SYS_sigaction, SIGFPE, &act, NULL);\t\t\\\n+    __libc_sigaction (SIGFPE, &act, NULL);\t\t\\\n   }\t\t\t\t\t\t\t\t\\\n while (0)  \n "}]}