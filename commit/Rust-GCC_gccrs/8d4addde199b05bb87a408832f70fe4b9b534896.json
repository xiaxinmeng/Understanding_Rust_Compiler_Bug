{"sha": "8d4addde199b05bb87a408832f70fe4b9b534896", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQ0YWRkZGUxOTliMDViYjg3YTQwODgzMmY3MGZlNGI5YjUzNDg5Ng==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2005-09-23T23:53:07Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2005-09-23T23:53:07Z"}, "message": "tune-1.cc: Clarify for single-thread.\n\n\n2005-09-23  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* testsuite/ext/mt_allocator/tune-1.cc: Clarify for single-thread.\n\t* testsuite/ext/mt_allocator/tune-2.cc: Same.\n\t* testsuite/ext/mt_allocator/tune-3.cc: Same.\n\t* testsuite/ext/mt_allocator/tune-4.cc: Same.\n\nFrom-SVN: r104591", "tree": {"sha": "ba54e6540172390f66813164e039aaafc3e2a9f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba54e6540172390f66813164e039aaafc3e2a9f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d4addde199b05bb87a408832f70fe4b9b534896", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d4addde199b05bb87a408832f70fe4b9b534896", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d4addde199b05bb87a408832f70fe4b9b534896", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d4addde199b05bb87a408832f70fe4b9b534896/comments", "author": null, "committer": null, "parents": [{"sha": "04f98580d457cb78ce7856b7626f1b0ec078281d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04f98580d457cb78ce7856b7626f1b0ec078281d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04f98580d457cb78ce7856b7626f1b0ec078281d"}], "stats": {"total": 134, "additions": 66, "deletions": 68}, "files": [{"sha": "60af325a121190f424ed13fc36266d519c07972c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d4addde199b05bb87a408832f70fe4b9b534896/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d4addde199b05bb87a408832f70fe4b9b534896/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8d4addde199b05bb87a408832f70fe4b9b534896", "patch": "@@ -1,3 +1,10 @@\n+2005-09-23  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* testsuite/ext/mt_allocator/tune-1.cc: Clarify for single-thread.\n+\t* testsuite/ext/mt_allocator/tune-2.cc: Same.\n+\t* testsuite/ext/mt_allocator/tune-3.cc: Same.\n+\t* testsuite/ext/mt_allocator/tune-4.cc: Same.\n+\n 2005-09-21  Guillaume Melquiond  <guillaume.melquiond@ens-lyon.fr>\n \n \tPR libstdc++/23956"}, {"sha": "25d6fdf622c256c91d2d6ffd2dbcbc02fb6c8fa1", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/tune-1.cc", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d4addde199b05bb87a408832f70fe4b9b534896/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d4addde199b05bb87a408832f70fe4b9b534896/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-1.cc?ref=8d4addde199b05bb87a408832f70fe4b9b534896", "patch": "@@ -23,42 +23,42 @@\n #include <testsuite_hooks.h>\n #include <testsuite_character.h>\n \n+#ifdef __GTHREADS\n+#define __cxxthread true\n+#else\n+#define __cxxthread false\n+#endif\n+\n // Tune characteristics. \n // __common_pool_policy\n void test01()\n {\n   bool test __attribute__((unused)) = true;\n \n-  typedef __gnu_test::pod_int value_type;\n-\n   using __gnu_cxx::__pool;\n   using __gnu_cxx::__common_pool_policy;\n \n-#ifdef __GTHREADS\n-  typedef __common_pool_policy<__pool, true> policy_type;\n-#else\n-  typedef __common_pool_policy<__pool, false> policy_type;\n-#endif\n+  typedef __gnu_test::pod_int value_type;\n+  typedef __common_pool_policy<__pool, __cxxthread> policy_type;\n   typedef __gnu_cxx::__mt_alloc<value_type, policy_type> allocator_type;\n   typedef __gnu_cxx::__pool_base::_Tune tune_type;\n \n-  tune_type t_default;\n-  tune_type t_opt(16, 5120, 32, 5120, 20, 10, false);\n-  tune_type t_single(16, 5120, 32, 5120, 1, 10, false);\n-\n   allocator_type a;\n-  tune_type t1 = a._M_get_options();  \n-  VERIFY( t1._M_align == t_default._M_align );\n+  tune_type t_default = a._M_get_options();\n+  tune_type t_opt(32, 5120, 32, 5120, 20, 10, false);\n+  tune_type t_small(16, 1024, 32, 2048, 1, 10, false);\n+\n+  tune_type t1 = t_default;\n   a._M_set_options(t_opt);\n   tune_type t2 = a._M_get_options();\n   VERIFY( t1._M_align != t2._M_align );\n \n   allocator_type::pointer p1 = a.allocate(128);\n   allocator_type::pointer p2 = a.allocate(5128);\n-  a._M_set_options(t_single);\n-  t1 = a._M_get_options();  \n-  VERIFY( t1._M_max_threads != t_single._M_max_threads );\n-  VERIFY( t1._M_max_threads == t_opt._M_max_threads );\n+  a._M_set_options(t_small);\n+  tune_type t3 = a._M_get_options();  \n+  VERIFY( t3._M_chunk_size != t_small._M_chunk_size );\n+  VERIFY( t3._M_chunk_size == t_opt._M_chunk_size );\n \n   a.deallocate(p1, 128);\n   a.deallocate(p2, 5128);"}, {"sha": "e4b324ecb17940079f5bee3f8cb5c64a9a570656", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/tune-2.cc", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d4addde199b05bb87a408832f70fe4b9b534896/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d4addde199b05bb87a408832f70fe4b9b534896/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-2.cc?ref=8d4addde199b05bb87a408832f70fe4b9b534896", "patch": "@@ -23,6 +23,12 @@\n #include <testsuite_hooks.h>\n #include <testsuite_character.h>\n \n+#ifdef __GTHREADS\n+#define __cxxthread true\n+#else\n+#define __cxxthread false\n+#endif\n+\n // Tune characteristics. \n // __per_type_pool_policy\n void test02()\n@@ -34,30 +40,26 @@ void test02()\n   using __gnu_cxx::__pool;\n   using __gnu_cxx::__per_type_pool_policy;\n \n-#ifdef __GTHREADS\n-  typedef __per_type_pool_policy<value_type, __pool, true> policy_type;\n-#else\n-  typedef __per_type_pool_policy<value_type, __pool, false> policy_type;\n-#endif\n+  typedef __per_type_pool_policy<value_type, __pool, __cxxthread> policy_type;\n   typedef __gnu_cxx::__mt_alloc<value_type, policy_type> allocator_type;\n   typedef __gnu_cxx::__pool_base::_Tune tune_type;\n \n-  tune_type t_opt(16, 5120, 32, 5120, 20, 10, false);\n-  tune_type t_single(16, 5120, 32, 5120, 1, 10, false);\n-\n   allocator_type a;\n   tune_type t_default = a._M_get_options();\n+  tune_type t_opt(32, 5120, 32, 5120, 20, 10, false);\n+  tune_type t_small(16, 1024, 32, 2048, 1, 10, false);\n+\n   tune_type t1 = t_default; \n   a._M_set_options(t_opt);\n   tune_type t2 = a._M_get_options();\n   VERIFY( t1._M_align != t2._M_align );\n \n   allocator_type::pointer p1 = a.allocate(128);\n   allocator_type::pointer p2 = a.allocate(5128);\n-  a._M_set_options(t_single);\n-  t1 = a._M_get_options();  \n-  VERIFY( t1._M_max_threads != t_single._M_max_threads );\n-  VERIFY( t1._M_max_threads == t_opt._M_max_threads );\n+  a._M_set_options(t_small);\n+  tune_type t3 = a._M_get_options();  \n+  VERIFY( t3._M_chunk_size != t_small._M_chunk_size );\n+  VERIFY( t3._M_chunk_size == t_opt._M_chunk_size );\n \n   a.deallocate(p1, 128);\n   a.deallocate(p2, 5128);"}, {"sha": "1c749129432c8ea2b6fbd28a6fc545914e31da05", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/tune-3.cc", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d4addde199b05bb87a408832f70fe4b9b534896/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d4addde199b05bb87a408832f70fe4b9b534896/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-3.cc?ref=8d4addde199b05bb87a408832f70fe4b9b534896", "patch": "@@ -1,6 +1,6 @@\n // 2004-08-25 Benjamin Kosnik <bkoz@redhat.com>\n //\n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -49,38 +49,33 @@ void test03()\n   typedef _Cp policy_type;\n   typedef __gnu_cxx::__mt_alloc<value_type, policy_type> allocator_type;\n \n-  tune_type t_opt(16, 5120, 32, 5120, 20, 10, false);\n-  tune_type t_single(16, 5120, 32, 5120, 1, 10, false);\n-\n-  // First instances assured.\n   allocator_type a;\n   tune_type t_default = a._M_get_options();\n+  tune_type t_opt(32, 5120, 32, 5120, 20, 10, false);\n+  tune_type t_small(16, 1024, 32, 2048, 1, 10, false);\n+\n+  // First instances assured.\n   tune_type t1 = t_default;\n-  tune_type t2;\n   if (test_policy<policy_type>::per_type())\n     {\n-      VERIFY( t1._M_align == t_default._M_align );\n       a._M_set_options(t_opt);\n-      t2 = a._M_get_options();\n-      VERIFY( t1._M_align != t2._M_align );\n+      t1 = a._M_get_options();\n+      VERIFY( t1._M_align != t_default._M_align );\n     }\n-  else\n-    t2 = t1;\n \n   // Lock tune settings.\n   typename allocator_type::pointer p1 = a.allocate(128);\n \n   allocator_type a2;\n-  tune_type t3 = a2._M_get_options();  \n-  tune_type t4;\n-  VERIFY( t3._M_max_threads == t2._M_max_threads );\n+  tune_type t2 = a2._M_get_options();  \n+  VERIFY( t2._M_chunk_size == t1._M_chunk_size );\n \n   typename allocator_type::pointer p2 = a2.allocate(5128);\n \n-  a2._M_set_options(t_single);\n-  t4 = a2._M_get_options();\n-  VERIFY( t4._M_max_threads != t_single._M_max_threads );\n-  VERIFY( t4._M_max_threads == t3._M_max_threads );\n+  a2._M_set_options(t_small);\n+  tune_type t3 = a2._M_get_options();\n+  VERIFY( t3._M_chunk_size != t_small._M_chunk_size );\n+  VERIFY( t3._M_chunk_size == t2._M_chunk_size );\n \n   a.deallocate(p1, 128);\n   a2.deallocate(p2, 5128);"}, {"sha": "cbde199229098b9acfd9b13c6283b6a615ba8778", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/tune-4.cc", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d4addde199b05bb87a408832f70fe4b9b534896/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d4addde199b05bb87a408832f70fe4b9b534896/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-4.cc?ref=8d4addde199b05bb87a408832f70fe4b9b534896", "patch": "@@ -1,6 +1,6 @@\n // 2004-08-25 Benjamin Kosnik <bkoz@redhat.com>\n //\n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -54,52 +54,46 @@ void test04()\n   typedef __gnu_cxx::__pool_base::_Tune tune_type;\n   typedef _Tp value_type;\n   typedef _Cp policy_type;\n-\n   typedef __gnu_cxx::__mt_alloc<value_type, policy_type> allocator_type;\n-  tune_type t_opt(16, 5120, 32, 5120, 20, 10, false);\n-  tune_type t_single(16, 5120, 32, 5120, 1, 10, false);\n \n   allocator_type a;\n   tune_type t_default = a._M_get_options();\n+  tune_type t_opt(32, 5120, 32, 5120, 20, 10, false);\n+  tune_type t_small(16, 1024, 32, 2048, 1, 10, false);\n+\n+  // First instance of local type assured.\n   tune_type t1 = t_default;\n-  tune_type t2;\n   if (test_policy<policy_type>::per_type())\n     {\n       a._M_set_options(t_opt);\n-      t2 = a._M_get_options();  \n-      VERIFY( t1._M_align != t2._M_align );\n+      t1 = a._M_get_options();  \n+      VERIFY( t1._M_align != t_default._M_align );\n     }\n-  else\n-    t2 = t1;\n \n   // Lock tune settings.\n   typename allocator_type::pointer p1 = a.allocate(128);\n \n-  // First instance of local type assured.\n   typedef pod2 value2_type;\n   typedef typename allocator_type::template rebind<value2_type>::other rebind_type;\n \n   rebind_type a2;\n-  tune_type t3 = a2._M_get_options();  \n-  tune_type t4;\n+  tune_type t2 = a2._M_get_options();  \n \n   // Both policy_type and rebind_type::policy_type have same characteristics.\n   if (test_policy<policy_type>::per_type())\n     {\n       a2._M_set_options(t_opt);\n-      t4 = a2._M_get_options();\n-      VERIFY( t3._M_align != t4._M_align );\n-      t3 = t4;\n+      tune_type t = a2._M_get_options();\n+      VERIFY( t2._M_align != t._M_align );\n+      t2 = t;\n     }\n-  else\n-    VERIFY( t3._M_max_threads == t2._M_max_threads );\n \n   typename rebind_type::pointer p2 = a2.allocate(5128);\n \n-  a2._M_set_options(t_single);\n-  t4 = a2._M_get_options();\n-  VERIFY( t4._M_max_threads != t_single._M_max_threads );\n-  VERIFY( t4._M_max_threads == t3._M_max_threads );\n+  a2._M_set_options(t_small);\n+  tune_type t4 = a2._M_get_options();\n+  VERIFY( t4._M_chunk_size != t_small._M_chunk_size );\n+  VERIFY( t4._M_chunk_size == t2._M_chunk_size );\n \n   a.deallocate(p1, 128);\n   a2.deallocate(p2, 5128);"}]}