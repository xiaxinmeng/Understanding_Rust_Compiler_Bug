{"sha": "3fc356dcdc68bf3e44d8b08a0579b057021c95f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZjMzU2ZGNkYzY4YmYzZTQ0ZDhiMDhhMDU3OWIwNTcwMjFjOTVmNA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-06-02T07:50:19Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-06-02T07:50:19Z"}, "message": "re PR tree-optimization/65961 (ice in vect_is_simple_use_1 with -O3)\n\n2015-06-02  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/65961\n\t* tree-vect-slp.c (vect_get_and_check_slp_defs): Remove bogus\n\tcheck and clarify dump message.\n\t(vect_build_slp_tree): If all children are built up from scalars\n\tbuild up the parent from scalars instead.\n\t* tree-vect-stmts.c (vect_is_simple_use): Cleanup.\n\n\t* gcc.dg/torture/pr65961.c: New testcase.\n\nFrom-SVN: r224013", "tree": {"sha": "9e29084b4af4a84e35f755a0790bf17700693d03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e29084b4af4a84e35f755a0790bf17700693d03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fc356dcdc68bf3e44d8b08a0579b057021c95f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fc356dcdc68bf3e44d8b08a0579b057021c95f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fc356dcdc68bf3e44d8b08a0579b057021c95f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fc356dcdc68bf3e44d8b08a0579b057021c95f4/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4c50b2212d92f84945a39df321f0eb10dedf98c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c50b2212d92f84945a39df321f0eb10dedf98c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c50b2212d92f84945a39df321f0eb10dedf98c7"}], "stats": {"total": 117, "additions": 78, "deletions": 39}, "files": [{"sha": "d7597c79a65bf5ea217110af03454efee3cd5823", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc356dcdc68bf3e44d8b08a0579b057021c95f4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc356dcdc68bf3e44d8b08a0579b057021c95f4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3fc356dcdc68bf3e44d8b08a0579b057021c95f4", "patch": "@@ -1,3 +1,12 @@\n+2015-06-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/65961\n+\t* tree-vect-slp.c (vect_get_and_check_slp_defs): Remove bogus\n+\tcheck and clarify dump message.\n+\t(vect_build_slp_tree): If all children are built up from scalars\n+\tbuild up the parent from scalars instead.\n+\t* tree-vect-stmts.c (vect_is_simple_use): Cleanup.\n+\n 2015-06-02  Jan Kratochvil  <jan.kratochvil@redhat.com>\n \n \tPR other/65366"}, {"sha": "9dd08e5b581e16c9472f92a6469f727b27d5da46", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc356dcdc68bf3e44d8b08a0579b057021c95f4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc356dcdc68bf3e44d8b08a0579b057021c95f4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3fc356dcdc68bf3e44d8b08a0579b057021c95f4", "patch": "@@ -1,3 +1,8 @@\n+2015-06-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/65961\n+\t* gcc.dg/torture/pr65961.c: New testcase.\n+\n 2015-06-02  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR tree-optimization/52563"}, {"sha": "984ad1d6a9eaa0f9c06d689f86734efab1cc4d04", "filename": "gcc/testsuite/gcc.dg/torture/pr65961.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc356dcdc68bf3e44d8b08a0579b057021c95f4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr65961.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc356dcdc68bf3e44d8b08a0579b057021c95f4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr65961.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr65961.c?ref=3fc356dcdc68bf3e44d8b08a0579b057021c95f4", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+\n+int *a;\n+void\n+foo ()\n+{\n+  do\n+    {\n+      a[16] = (a[1] ^ a[0]) << 1 | a[1];\n+      a[17] = (a[0] ^ a[1]) << 1 | a[0];\n+      a[18] = (a[0] ^ a[1]) << 1 | a[0];\n+      a[19] = (a[0] ^ a[1]) << 1 | a[0];\n+      a[20] = (a[0] ^ a[1]) << 1 | a[0];\n+      a[21] = (a[0] ^ a[1]) << 1 | a[0];\n+      a[22] = (a[0] ^ a[1]) << 1 | a[0];\n+      a[23] = (a[20] ^ a[1]) << 1 | a[9];\n+      a += 8;\n+    }\n+  while (1);\n+}"}, {"sha": "9e36d9cccab2a164252872f081afba1633d6f2c2", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc356dcdc68bf3e44d8b08a0579b057021c95f4/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc356dcdc68bf3e44d8b08a0579b057021c95f4/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=3fc356dcdc68bf3e44d8b08a0579b057021c95f4", "patch": "@@ -301,13 +301,12 @@ vect_get_and_check_slp_defs (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo,\n       oprnd_info = (*oprnds_info)[i];\n \n       if (!vect_is_simple_use (oprnd, NULL, loop_vinfo, bb_vinfo, &def_stmt,\n-\t\t\t       &def, &dt)\n-\t  || (!def_stmt && dt != vect_constant_def))\n+\t\t\t       &def, &dt))\n \t{\n \t  if (dump_enabled_p ())\n \t    {\n \t      dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t       \"Build SLP failed: can't find def for \");\n+\t\t\t       \"Build SLP failed: can't analyze def for \");\n \t      dump_generic_expr (MSG_MISSED_OPTIMIZATION, TDF_SLIM, oprnd);\n               dump_printf (MSG_MISSED_OPTIMIZATION, \"\\n\");\n \t    }\n@@ -1092,6 +1091,35 @@ vect_build_slp_tree (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo,\n \t\t\t       vectorization_factor, matches,\n \t\t\t       npermutes, &this_tree_size, max_tree_size))\n \t{\n+\t  /* If we have all children of child built up from scalars then just\n+\t     throw that away and build it up this node from scalars.  */\n+\t  if (!SLP_TREE_CHILDREN (child).is_empty ())\n+\t    {\n+\t      unsigned int j;\n+\t      slp_tree grandchild;\n+\n+\t      FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (child), j, grandchild)\n+\t\tif (grandchild != NULL)\n+\t\t  break;\n+\t      if (!grandchild)\n+\t\t{\n+\t\t  /* Roll back.  */\n+\t\t  *max_nunits = old_max_nunits;\n+\t\t  loads->truncate (old_nloads);\n+\t\t  FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (child), j, grandchild)\n+\t\t      vect_free_slp_tree (grandchild);\n+\t\t  SLP_TREE_CHILDREN (child).truncate (0);\n+\n+\t\t  dump_printf_loc (MSG_NOTE, vect_location,\n+\t\t\t\t   \"Building parent vector operands from \"\n+\t\t\t\t   \"scalars instead\\n\");\n+\t\t  oprnd_info->def_stmts = vNULL;\n+\t\t  vect_free_slp_tree (child);\n+\t\t  SLP_TREE_CHILDREN (*node).quick_push (NULL);\n+\t\t  continue;\n+\t\t}\n+\t    }\n+\n \t  oprnd_info->def_stmts = vNULL;\n \t  SLP_TREE_CHILDREN (*node).quick_push (child);\n \t  continue;"}, {"sha": "0eeebb0dafbf2941696b4f6eacaafa4ee197a579", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 13, "deletions": 36, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc356dcdc68bf3e44d8b08a0579b057021c95f4/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc356dcdc68bf3e44d8b08a0579b057021c95f4/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=3fc356dcdc68bf3e44d8b08a0579b057021c95f4", "patch": "@@ -7878,15 +7878,9 @@ vect_is_simple_use (tree operand, gimple stmt, loop_vec_info loop_vinfo,\n                     bb_vec_info bb_vinfo, gimple *def_stmt,\n \t\t    tree *def, enum vect_def_type *dt)\n {\n-  basic_block bb;\n-  stmt_vec_info stmt_vinfo;\n-  struct loop *loop = NULL;\n-\n-  if (loop_vinfo)\n-    loop = LOOP_VINFO_LOOP (loop_vinfo);\n-\n   *def_stmt = NULL;\n   *def = NULL_TREE;\n+  *dt = vect_unknown_def_type;\n \n   if (dump_enabled_p ())\n     {\n@@ -7909,13 +7903,6 @@ vect_is_simple_use (tree operand, gimple stmt, loop_vec_info loop_vinfo,\n       return true;\n     }\n \n-  if (TREE_CODE (operand) == PAREN_EXPR)\n-    {\n-      if (dump_enabled_p ())\n-        dump_printf_loc (MSG_NOTE, vect_location, \"non-associatable copy.\\n\");\n-      operand = TREE_OPERAND (operand, 0);\n-    }\n-\n   if (TREE_CODE (operand) != SSA_NAME)\n     {\n       if (dump_enabled_p ())\n@@ -7924,40 +7911,30 @@ vect_is_simple_use (tree operand, gimple stmt, loop_vec_info loop_vinfo,\n       return false;\n     }\n \n-  *def_stmt = SSA_NAME_DEF_STMT (operand);\n-  if (*def_stmt == NULL)\n+  if (SSA_NAME_IS_DEFAULT_DEF (operand))\n     {\n-      if (dump_enabled_p ())\n-        dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-                         \"no def_stmt.\\n\");\n-      return false;\n+      *def = operand;\n+      *dt = vect_external_def;\n+      return true;\n     }\n \n+  *def_stmt = SSA_NAME_DEF_STMT (operand);\n   if (dump_enabled_p ())\n     {\n       dump_printf_loc (MSG_NOTE, vect_location, \"def_stmt: \");\n       dump_gimple_stmt (MSG_NOTE, TDF_SLIM, *def_stmt, 0);\n     }\n \n-  /* Empty stmt is expected only in case of a function argument.\n-     (Otherwise - we expect a phi_node or a GIMPLE_ASSIGN).  */\n-  if (gimple_nop_p (*def_stmt))\n-    {\n-      *def = operand;\n-      *dt = vect_external_def;\n-      return true;\n-    }\n-\n-  bb = gimple_bb (*def_stmt);\n-\n-  if ((loop && !flow_bb_inside_loop_p (loop, bb))\n-      || (!loop && bb != BB_VINFO_BB (bb_vinfo))\n-      || (!loop && gimple_code (*def_stmt) == GIMPLE_PHI))\n+  basic_block bb = gimple_bb (*def_stmt);\n+  if ((loop_vinfo && !flow_bb_inside_loop_p (LOOP_VINFO_LOOP (loop_vinfo), bb))\n+      || (bb_vinfo\n+\t  && (bb != BB_VINFO_BB (bb_vinfo)\n+\t      || gimple_code (*def_stmt) == GIMPLE_PHI)))\n     *dt = vect_external_def;\n   else\n     {\n-      stmt_vinfo = vinfo_for_stmt (*def_stmt);\n-      if (!loop && !STMT_VINFO_VECTORIZABLE (stmt_vinfo))\n+      stmt_vec_info stmt_vinfo = vinfo_for_stmt (*def_stmt);\n+      if (bb_vinfo && !STMT_VINFO_VECTORIZABLE (stmt_vinfo))\n \t*dt = vect_external_def;\n       else\n \t*dt = STMT_VINFO_DEF_TYPE (stmt_vinfo);"}]}