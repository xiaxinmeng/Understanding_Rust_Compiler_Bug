{"sha": "49b8a94b8878438cb5a08704101aee6f7319bd8b", "node_id": "C_kwDOANBUbNoAKDQ5YjhhOTRiODg3ODQzOGNiNWEwODcwNDEwMWFlZTZmNzMxOWJkOGI", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-11-15T15:04:25Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-12-01T10:24:42Z"}, "message": "[Ada] Tidy up freezing code for instantiations\n\ngcc/ada/\n\n\t* sem_ch12.adb (Freeze_Subprogram_Body): Rename into...\n\t(Freeze_Subprogram_Instance): ...this and change the name of the\n\tfirst parameter and local variables for the sake of consistency.\n\t(Insert_Freeze_Node_For_Instance): Use local variable Par_Inst.\n\t(Install_Body): Rename into...\n\t(Freeze_Package_Instance): ...this, remove first parameter and\n\tchange the name of local variables for the sake of consistency.\n\tDo not deal with the special case of incomplete actual types here\n\tand do not insert the body.\n\t(Instantiate_Package_Body): Deal with the special case of incomplete\n\tactual types here and insert the body.  Call Freeze_Package_Instance\n\tonly if expansion is done.\n\t(Instantiate_Subprogram_Body): Minor consistency tweak.", "tree": {"sha": "aa337e88fcdd307112b44861fc4b8c9a69c21513", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa337e88fcdd307112b44861fc4b8c9a69c21513"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49b8a94b8878438cb5a08704101aee6f7319bd8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49b8a94b8878438cb5a08704101aee6f7319bd8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49b8a94b8878438cb5a08704101aee6f7319bd8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49b8a94b8878438cb5a08704101aee6f7319bd8b/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17fa48b12d42fe41c4cc8782645b30acfa764141", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17fa48b12d42fe41c4cc8782645b30acfa764141", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17fa48b12d42fe41c4cc8782645b30acfa764141"}], "stats": {"total": 278, "additions": 144, "deletions": 134}, "files": [{"sha": "f779cc74ff7c37aa65234c6ef9217da1e998a137", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 144, "deletions": 134, "changes": 278, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49b8a94b8878438cb5a08704101aee6f7319bd8b/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49b8a94b8878438cb5a08704101aee6f7319bd8b/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=49b8a94b8878438cb5a08704101aee6f7319bd8b", "patch": "@@ -613,14 +613,14 @@ package body Sem_Ch12 is\n    --  packages, and the prefix of the formal type may be needed to resolve\n    --  the ambiguity in the instance ???\n \n-   procedure Freeze_Subprogram_Body\n-     (Inst_Node : Node_Id;\n+   procedure Freeze_Subprogram_Instance\n+     (N         : Node_Id;\n       Gen_Body  : Node_Id;\n       Pack_Id   : Entity_Id);\n    --  The generic body may appear textually after the instance, including\n    --  in the proper body of a stub, or within a different package instance.\n    --  Given that the instance can only be elaborated after the generic, we\n-   --  place freeze_nodes for the instance and/or for packages that may enclose\n+   --  place freeze nodes for the instance and/or for packages that may enclose\n    --  the instance and the generic, so that the back-end can establish the\n    --  proper order of elaboration.\n \n@@ -714,13 +714,15 @@ package body Sem_Ch12 is\n    --  associated freeze node. Insert the freeze node before the first source\n    --  body which follows immediately after N. If no such body is found, the\n    --  freeze node is inserted at the end of the declarative region which\n-   --  contains N.\n+   --  contains N. This can also be invoked to insert the freeze node of a\n+   --  package that encloses an instantiation, in which case N may denote an\n+   --  arbitrary node.\n \n-   procedure Install_Body\n-     (Act_Body : Node_Id;\n-      N        : Node_Id;\n+   procedure Freeze_Package_Instance\n+     (N        : Node_Id;\n       Gen_Body : Node_Id;\n-      Gen_Decl : Node_Id);\n+      Gen_Decl : Node_Id;\n+      Act_Id   : Entity_Id);\n    --  If the instantiation happens textually before the body of the generic,\n    --  the instantiation of the body must be analyzed after the generic body,\n    --  and not at the point of instantiation. Such early instantiations can\n@@ -9015,22 +9017,15 @@ package body Sem_Ch12 is\n       end if;\n    end Find_Actual_Type;\n \n-   ----------------------------\n-   -- Freeze_Subprogram_Body --\n-   ----------------------------\n+   --------------------------------\n+   -- Freeze_Subprogram_Instance --\n+   --------------------------------\n \n-   procedure Freeze_Subprogram_Body\n-     (Inst_Node : Node_Id;\n+   procedure Freeze_Subprogram_Instance\n+     (N         : Node_Id;\n       Gen_Body  : Node_Id;\n       Pack_Id   : Entity_Id)\n   is\n-      Gen_Unit : constant Entity_Id := Get_Generic_Entity (Inst_Node);\n-      Par      : constant Entity_Id := Scope (Gen_Unit);\n-      Enc_G    : Entity_Id;\n-      Enc_G_F  : Node_Id;\n-      Enc_I    : Node_Id;\n-      F_Node   : Node_Id;\n-\n       function Enclosing_Package_Body (N : Node_Id) return Node_Id;\n       --  Find innermost package body that encloses the given node, and which\n       --  is not a compilation unit. Freeze nodes for the instance, or for its\n@@ -9086,7 +9081,16 @@ package body Sem_Ch12 is\n          return Freeze_Node (Id);\n       end Package_Freeze_Node;\n \n-   --  Start of processing for Freeze_Subprogram_Body\n+      --  Local variables\n+\n+      Enc_G  : constant Node_Id   := Enclosing_Package_Body (Gen_Body);\n+      Enc_N  : constant Node_Id   := Enclosing_Package_Body (N);\n+      Par_Id : constant Entity_Id := Scope (Get_Generic_Entity (N));\n+\n+      Enc_G_F  : Node_Id;\n+      F_Node   : Node_Id;\n+\n+   --  Start of processing for Freeze_Subprogram_Instance\n \n    begin\n       --  If the instance and the generic body appear within the same unit, and\n@@ -9097,21 +9101,18 @@ package body Sem_Ch12 is\n       --  packages. Otherwise, the freeze node is placed at the end of the\n       --  current declarative part.\n \n-      Enc_G  := Enclosing_Package_Body (Gen_Body);\n-      Enc_I  := Enclosing_Package_Body (Inst_Node);\n       Ensure_Freeze_Node (Pack_Id);\n       F_Node := Freeze_Node (Pack_Id);\n \n-      if Is_Generic_Instance (Par)\n-        and then Present (Freeze_Node (Par))\n-        and then In_Same_Declarative_Part\n-                   (Parent (Freeze_Node (Par)), Inst_Node)\n+      if Is_Generic_Instance (Par_Id)\n+        and then Present (Freeze_Node (Par_Id))\n+        and then In_Same_Declarative_Part (Parent (Freeze_Node (Par_Id)), N)\n       then\n          --  The parent was a premature instantiation. Insert freeze node at\n          --  the end the current declarative part.\n \n-         if Is_Known_Guaranteed_ABE (Get_Unit_Instantiation_Node (Par)) then\n-            Insert_Freeze_Node_For_Instance (Inst_Node, F_Node);\n+         if Is_Known_Guaranteed_ABE (Get_Unit_Instantiation_Node (Par_Id)) then\n+            Insert_Freeze_Node_For_Instance (N, F_Node);\n \n          --  Handle the following case:\n          --\n@@ -9131,13 +9132,13 @@ package body Sem_Ch12 is\n          --  after that of Parent_Inst. This relation is established by\n          --  comparing the Slocs of Parent_Inst freeze node and Inst.\n \n-         elsif In_Same_List (Get_Unit_Instantiation_Node (Par), Inst_Node)\n-           and then Sloc (Freeze_Node (Par)) <= Sloc (Inst_Node)\n+         elsif In_Same_List (Get_Unit_Instantiation_Node (Par_Id), N)\n+           and then Sloc (Freeze_Node (Par_Id)) <= Sloc (N)\n          then\n-            Insert_Freeze_Node_For_Instance (Inst_Node, F_Node);\n+            Insert_Freeze_Node_For_Instance (N, F_Node);\n \n          else\n-            Insert_After (Freeze_Node (Par), F_Node);\n+            Insert_After (Freeze_Node (Par_Id), F_Node);\n          end if;\n \n       --  The body enclosing the instance should be frozen after the body that\n@@ -9147,26 +9148,27 @@ package body Sem_Ch12 is\n       --  already, freeze the instance at the end of the current declarative\n       --  part.\n \n-      elsif Is_Generic_Instance (Par)\n-        and then Present (Freeze_Node (Par))\n-        and then Present (Enc_I)\n+      elsif Is_Generic_Instance (Par_Id)\n+        and then Present (Freeze_Node (Par_Id))\n+        and then Present (Enc_N)\n       then\n-         if In_Same_Declarative_Part (Parent (Freeze_Node (Par)), Enc_I) then\n+         if In_Same_Declarative_Part (Parent (Freeze_Node (Par_Id)), Enc_N)\n+         then\n             --  The enclosing package may contain several instances. Rather\n             --  than computing the earliest point at which to insert its freeze\n             --  node, we place it at the end of the declarative part of the\n             --  parent of the generic.\n \n             Insert_Freeze_Node_For_Instance\n-              (Freeze_Node (Par), Package_Freeze_Node (Enc_I));\n+              (Freeze_Node (Par_Id), Package_Freeze_Node (Enc_N));\n          end if;\n \n-         Insert_Freeze_Node_For_Instance (Inst_Node, F_Node);\n+         Insert_Freeze_Node_For_Instance (N, F_Node);\n \n       elsif Present (Enc_G)\n-        and then Present (Enc_I)\n-        and then Enc_G /= Enc_I\n-        and then Earlier (Inst_Node, Gen_Body)\n+        and then Present (Enc_N)\n+        and then Enc_G /= Enc_N\n+        and then Earlier (N, Gen_Body)\n       then\n          --  Freeze package that encloses instance, and place node after the\n          --  package that encloses generic. If enclosing package is already\n@@ -9181,15 +9183,15 @@ package body Sem_Ch12 is\n             Enclosing_Body : Node_Id;\n \n          begin\n-            if Nkind (Enc_I) = N_Package_Body_Stub then\n-               Enclosing_Body := Proper_Body (Unit (Library_Unit (Enc_I)));\n+            if Nkind (Enc_N) = N_Package_Body_Stub then\n+               Enclosing_Body := Proper_Body (Unit (Library_Unit (Enc_N)));\n             else\n-               Enclosing_Body := Enc_I;\n+               Enclosing_Body := Enc_N;\n             end if;\n \n             if Parent (List_Containing (Enc_G)) /= Enclosing_Body then\n                Insert_Freeze_Node_For_Instance\n-                 (Enc_G, Package_Freeze_Node (Enc_I));\n+                 (Enc_G, Package_Freeze_Node (Enc_N));\n             end if;\n          end;\n \n@@ -9201,15 +9203,15 @@ package body Sem_Ch12 is\n             Insert_After (Enc_G, Enc_G_F);\n          end if;\n \n-         Insert_Freeze_Node_For_Instance (Inst_Node, F_Node);\n+         Insert_Freeze_Node_For_Instance (N, F_Node);\n \n       else\n          --  If none of the above, insert freeze node at the end of the current\n          --  declarative part.\n \n-         Insert_Freeze_Node_For_Instance (Inst_Node, F_Node);\n+         Insert_Freeze_Node_For_Instance (N, F_Node);\n       end if;\n-   end Freeze_Subprogram_Body;\n+   end Freeze_Subprogram_Instance;\n \n    ----------------\n    -- Get_Gen_Id --\n@@ -9571,10 +9573,11 @@ package body Sem_Ch12 is\n      (N      : Node_Id;\n       F_Node : Node_Id)\n    is\n-      Decl  : Node_Id;\n-      Decls : List_Id;\n-      Inst  : Entity_Id;\n-      Par_N : Node_Id;\n+      Decl     : Node_Id;\n+      Decls    : List_Id;\n+      Inst     : Entity_Id;\n+      Par_Inst : Node_Id;\n+      Par_N    : Node_Id;\n \n       function Enclosing_Body (N : Node_Id) return Node_Id;\n       --  Find enclosing package or subprogram body, if any. Freeze node may\n@@ -9640,8 +9643,8 @@ package body Sem_Ch12 is\n       if not Is_List_Member (F_Node) then\n          Decl  := N;\n          Decls := List_Containing (N);\n-         Inst  := Entity (F_Node);\n          Par_N := Parent (Decls);\n+         Inst  := Entity (F_Node);\n \n          --  When processing a subprogram instantiation, utilize the actual\n          --  subprogram instantiation rather than its package wrapper as it\n@@ -9651,18 +9654,18 @@ package body Sem_Ch12 is\n             Inst := Related_Instance (Inst);\n          end if;\n \n+         Par_Inst := Parent (Inst);\n+\n          --  If this is a package instance, check whether the generic is\n          --  declared in a previous instance and the current instance is\n          --  not within the previous one.\n \n-         if Present (Generic_Parent (Parent (Inst)))\n-           and then Is_In_Main_Unit (N)\n+         if Present (Generic_Parent (Par_Inst)) and then Is_In_Main_Unit (N)\n          then\n             declare\n                Enclosing_N : constant Node_Id := Enclosing_Body (N);\n                Par_I       : constant Entity_Id :=\n-                               Previous_Instance\n-                                 (Generic_Parent (Parent (Inst)));\n+                               Previous_Instance (Generic_Parent (Par_Inst));\n                Scop        : Entity_Id;\n \n             begin\n@@ -9744,8 +9747,7 @@ package body Sem_Ch12 is\n          if Nkind (Par_N) /= N_Package_Declaration\n            and then Ekind (Inst) = E_Package\n            and then Is_Generic_Instance (Inst)\n-           and then\n-             not In_Same_Source_Unit (Generic_Parent (Parent (Inst)), Inst)\n+           and then not In_Same_Source_Unit (Generic_Parent (Par_Inst), Inst)\n          then\n             while Present (Decl) loop\n                if (Nkind (Decl) in N_Unit_Body\n@@ -9769,15 +9771,15 @@ package body Sem_Ch12 is\n       end if;\n    end Insert_Freeze_Node_For_Instance;\n \n-   ------------------\n-   -- Install_Body --\n-   ------------------\n+   -----------------------------\n+   -- Freeze_Package_Instance --\n+   -----------------------------\n \n-   procedure Install_Body\n-     (Act_Body : Node_Id;\n-      N        : Node_Id;\n+   procedure Freeze_Package_Instance\n+     (N        : Node_Id;\n       Gen_Body : Node_Id;\n-      Gen_Decl : Node_Id)\n+      Gen_Decl : Node_Id;\n+      Act_Id   : Entity_Id)\n    is\n       function In_Same_Scope (Gen_Id, Act_Id : Node_Id) return Boolean;\n       --  Check if the generic definition and the instantiation come from\n@@ -9838,55 +9840,22 @@ package body Sem_Ch12 is\n          return Res;\n       end True_Sloc;\n \n-      Act_Id    : constant Entity_Id := Corresponding_Spec (Act_Body);\n+      --  Local variables\n+\n+      Gen_Id    : constant Entity_Id := Get_Generic_Entity (N);\n+      Par_Id    : constant Entity_Id := Scope (Gen_Id);\n       Act_Unit  : constant Node_Id   := Unit (Cunit (Get_Source_Unit (N)));\n-      Gen_Id    : constant Entity_Id := Corresponding_Spec (Gen_Body);\n-      Par       : constant Entity_Id := Scope (Gen_Id);\n       Gen_Unit  : constant Node_Id   :=\n                     Unit (Cunit (Get_Source_Unit (Gen_Decl)));\n \n       Body_Unit  : Node_Id;\n       F_Node     : Node_Id;\n       Must_Delay : Boolean;\n-      Orig_Body  : Node_Id := Gen_Body;\n+      Orig_Body  : Node_Id;\n \n-   --  Start of processing for Install_Body\n+   --  Start of processing for Freeze_Package_Instance\n \n    begin\n-      --  Handle first the case of an instance with incomplete actual types.\n-      --  The instance body cannot be placed after the declaration because\n-      --  full views have not been seen yet. Any use of the non-limited views\n-      --  in the instance body requires the presence of a regular with_clause\n-      --  in the enclosing unit, and will fail if this with_clause is missing.\n-      --  We place the instance body at the beginning of the enclosing body,\n-      --  which is the unit being compiled. The freeze node for the instance\n-      --  is then placed after the instance body.\n-\n-      if not Is_Empty_Elmt_List (Incomplete_Actuals (Act_Id))\n-        and then Expander_Active\n-        and then Ekind (Scope (Act_Id)) = E_Package\n-      then\n-         declare\n-            Scop    : constant Entity_Id := Scope (Act_Id);\n-            Body_Id : constant Node_Id :=\n-                         Corresponding_Body (Unit_Declaration_Node (Scop));\n-\n-         begin\n-            Ensure_Freeze_Node (Act_Id);\n-            F_Node := Freeze_Node (Act_Id);\n-            if Present (Body_Id) then\n-               Set_Is_Frozen (Act_Id, False);\n-               Prepend (Act_Body, Declarations (Parent (Body_Id)));\n-               if Is_List_Member (F_Node) then\n-                  Remove (F_Node);\n-               end if;\n-\n-               Insert_After (Act_Body, F_Node);\n-            end if;\n-         end;\n-         return;\n-      end if;\n-\n       --  If the body is a subunit, the freeze point is the corresponding stub\n       --  in the current compilation, not the subunit itself.\n \n@@ -9914,8 +9883,8 @@ package body Sem_Ch12 is\n           and then (Nkind (Gen_Unit) in N_Generic_Package_Declaration\n                                       | N_Package_Declaration\n                      or else (Gen_Unit = Body_Unit\n-                               and then True_Sloc (N, Act_Unit) <\n-                                          Sloc (Orig_Body)))\n+                               and then\n+                              True_Sloc (N, Act_Unit) < Sloc (Orig_Body)))\n           and then Is_In_Main_Unit (Original_Node (Gen_Unit))\n           and then In_Same_Scope (Gen_Id, Act_Id));\n \n@@ -9929,24 +9898,23 @@ package body Sem_Ch12 is\n       --  if no delay is needed, we place the freeze node at the end of the\n       --  current declarative part.\n \n-      if Expander_Active\n-        and then (No (Freeze_Node (Act_Id))\n-                   or else not Is_List_Member (Freeze_Node (Act_Id)))\n+      if No (Freeze_Node (Act_Id))\n+        or else not Is_List_Member (Freeze_Node (Act_Id))\n       then\n          Ensure_Freeze_Node (Act_Id);\n          F_Node := Freeze_Node (Act_Id);\n \n          if Must_Delay then\n             Insert_After (Orig_Body, F_Node);\n \n-         elsif Is_Generic_Instance (Par)\n-           and then Present (Freeze_Node (Par))\n-           and then Scope (Act_Id) /= Par\n+         elsif Is_Generic_Instance (Par_Id)\n+           and then Present (Freeze_Node (Par_Id))\n+           and then Scope (Act_Id) /= Par_Id\n          then\n             --  Freeze instance of inner generic after instance of enclosing\n             --  generic.\n \n-            if In_Same_Declarative_Part (Parent (Freeze_Node (Par)), N) then\n+            if In_Same_Declarative_Part (Parent (Freeze_Node (Par_Id)), N) then\n \n                --  Handle the following case:\n \n@@ -9971,21 +9939,22 @@ package body Sem_Ch12 is\n                --  of a package declaration, and the inner instance is in\n                --  the corresponding private part.\n \n-               if Parent (List_Containing (Get_Unit_Instantiation_Node (Par)))\n+               if Parent (List_Containing (Get_Unit_Instantiation_Node\n+                                                                     (Par_Id)))\n                     = Parent (List_Containing (N))\n-                 and then Sloc (Freeze_Node (Par)) <= Sloc (N)\n+                 and then Sloc (Freeze_Node (Par_Id)) <= Sloc (N)\n                then\n                   Insert_Freeze_Node_For_Instance (N, F_Node);\n                else\n-                  Insert_After (Freeze_Node (Par), F_Node);\n+                  Insert_After (Freeze_Node (Par_Id), F_Node);\n                end if;\n \n             --  Freeze package enclosing instance of inner generic after\n             --  instance of enclosing generic.\n \n             elsif Nkind (Parent (N)) in N_Package_Body | N_Subprogram_Body\n               and then In_Same_Declarative_Part\n-                         (Parent (Freeze_Node (Par)), Parent (N))\n+                         (Parent (Freeze_Node (Par_Id)), Parent (N))\n             then\n                declare\n                   Enclosing :  Entity_Id;\n@@ -10027,15 +9996,15 @@ package body Sem_Ch12 is\n                      --  the enclosing package, insert the freeze node after\n                      --  the body.\n \n-                     elsif In_Same_List (Freeze_Node (Par), Parent (N))\n-                       and then Sloc (Freeze_Node (Par)) < Sloc (Parent (N))\n+                     elsif In_Same_List (Freeze_Node (Par_Id), Parent (N))\n+                       and then Sloc (Freeze_Node (Par_Id)) < Sloc (Parent (N))\n                      then\n                         Insert_Freeze_Node_For_Instance\n                           (Parent (N), Freeze_Node (Enclosing));\n \n                      else\n                         Insert_After\n-                          (Freeze_Node (Par), Freeze_Node (Enclosing));\n+                          (Freeze_Node (Par_Id), Freeze_Node (Enclosing));\n                      end if;\n                   end if;\n                end;\n@@ -10048,11 +10017,7 @@ package body Sem_Ch12 is\n             Insert_Freeze_Node_For_Instance (N, F_Node);\n          end if;\n       end if;\n-\n-      Set_Is_Frozen (Act_Id);\n-      Insert_Before (N, Act_Body);\n-      Mark_Rewrite_Insertion (Act_Body);\n-   end Install_Body;\n+   end Freeze_Package_Instance;\n \n    -----------------------------\n    -- Install_Formal_Packages --\n@@ -12207,7 +12172,7 @@ package body Sem_Ch12 is\n                --  for the elaboration subprogram).\n \n                if Nkind (Defining_Unit_Name (Act_Spec)) =\n-                                              N_Defining_Program_Unit_Name\n+                                                   N_Defining_Program_Unit_Name\n                then\n                   Set_Scope (Defining_Entity (Inst_Node), Scope (Act_Decl_Id));\n                end if;\n@@ -12216,11 +12181,53 @@ package body Sem_Ch12 is\n          --  Case where instantiation is not a library unit\n \n          else\n-            --  If this is an early instantiation, i.e. appears textually\n-            --  before the corresponding body and must be elaborated first,\n-            --  indicate that the body instance is to be delayed.\n+            --  Handle the case of an instance with incomplete actual types.\n+            --  The instance body cannot be placed just after the declaration\n+            --  because full views have not been seen yet. Any use of the non-\n+            --  limited views in the instance body requires the presence of a\n+            --  regular with_clause in the enclosing unit. Therefore we place\n+            --  the instance body at the beginning of the enclosing body, and\n+            --  the freeze node for the instance is then placed after the body.\n+\n+            if not Is_Empty_Elmt_List (Incomplete_Actuals (Act_Decl_Id))\n+              and then Ekind (Scope (Act_Decl_Id)) = E_Package\n+            then\n+               declare\n+                  Scop    : constant Entity_Id := Scope (Act_Decl_Id);\n+                  Body_Id : constant Node_Id :=\n+                    Corresponding_Body (Unit_Declaration_Node (Scop));\n+\n+                  F_Node  : Node_Id;\n+\n+               begin\n+                  pragma Assert (Present (Body_Id));\n \n-            Install_Body (Act_Body, Inst_Node, Gen_Body, Gen_Decl);\n+                  Prepend (Act_Body, Declarations (Parent (Body_Id)));\n+\n+                  if Expander_Active then\n+                     Ensure_Freeze_Node (Act_Decl_Id);\n+                     F_Node := Freeze_Node (Act_Decl_Id);\n+                     Set_Is_Frozen (Act_Decl_Id, False);\n+                     if Is_List_Member (F_Node) then\n+                        Remove (F_Node);\n+                     end if;\n+\n+                     Insert_After (Act_Body, F_Node);\n+                  end if;\n+               end;\n+\n+            else\n+               Insert_Before (Inst_Node, Act_Body);\n+               Mark_Rewrite_Insertion (Act_Body);\n+\n+               --  Insert the freeze node for the instance if need be\n+\n+               if Expander_Active then\n+                  Freeze_Package_Instance\n+                    (Inst_Node, Gen_Body, Gen_Decl, Act_Decl_Id);\n+                  Set_Is_Frozen (Act_Decl_Id);\n+               end if;\n+            end if;\n \n             --  If the instantiation appears within a generic child package\n             --  enable visibility of current instance of enclosing generic\n@@ -12581,11 +12588,14 @@ package body Sem_Ch12 is\n          else\n             Insert_Before (Inst_Node, Pack_Body);\n             Mark_Rewrite_Insertion (Pack_Body);\n-            Analyze (Pack_Body);\n+\n+            --  Insert the freeze node for the instance if need be\n \n             if Expander_Active then\n-               Freeze_Subprogram_Body (Inst_Node, Gen_Body, Pack_Id);\n+               Freeze_Subprogram_Instance (Inst_Node, Gen_Body, Pack_Id);\n             end if;\n+\n+            Analyze (Pack_Body);\n          end if;\n \n          Inherit_Context (Gen_Body, Inst_Node);"}]}