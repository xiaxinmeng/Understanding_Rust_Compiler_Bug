{"sha": "a57dbdaac40dbaaaba5b6d9954829a5e6f630ae4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU3ZGJkYWFjNDBkYmFhYWJhNWI2ZDk5NTQ4MjlhNWU2ZjYzMGFlNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-05-09T16:43:43Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-05-09T16:43:43Z"}, "message": "N3639 C++1y VLA diagnostics\n\n\t* decl.c (grokdeclarator): Complain about reference, pointer, or\n\ttypedef to VLA.\n\t(create_array_type_for_decl): Complain about array of VLA.\n\t* pt.c (tsubst): Likewise.\n\t* rtti.c (get_tinfo_decl): Talk about \"array of runtime bound\".\n\t* semantics.c (finish_decltype_type): Complain about decltype of VLA.\n\t* typeck.c (cp_build_addr_expr_1): Complain about VLA.\n\t(cxx_sizeof_or_alignof_type): Likewise.\n\nFrom-SVN: r198746", "tree": {"sha": "c69b9ba944e0bd1c54e3eb3cab495fee009d3bf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c69b9ba944e0bd1c54e3eb3cab495fee009d3bf5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a57dbdaac40dbaaaba5b6d9954829a5e6f630ae4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a57dbdaac40dbaaaba5b6d9954829a5e6f630ae4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a57dbdaac40dbaaaba5b6d9954829a5e6f630ae4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a57dbdaac40dbaaaba5b6d9954829a5e6f630ae4/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0138d6b24ff942e4ccd54e52c0dc619d6911c452", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0138d6b24ff942e4ccd54e52c0dc619d6911c452", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0138d6b24ff942e4ccd54e52c0dc619d6911c452"}], "stats": {"total": 114, "additions": 110, "deletions": 4}, "files": [{"sha": "74480f65339f69fceb926682b8a09bb5185fdea8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a57dbdaac40dbaaaba5b6d9954829a5e6f630ae4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a57dbdaac40dbaaaba5b6d9954829a5e6f630ae4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a57dbdaac40dbaaaba5b6d9954829a5e6f630ae4", "patch": "@@ -1,5 +1,15 @@\n 2013-05-09  Jason Merrill  <jason@redhat.com>\n \n+\tN3639 C++1y VLA diagnostics\n+\t* decl.c (grokdeclarator): Complain about reference, pointer, or\n+\ttypedef to VLA.\n+\t(create_array_type_for_decl): Complain about array of VLA.\n+\t* pt.c (tsubst): Likewise.\n+\t* rtti.c (get_tinfo_decl): Talk about \"array of runtime bound\".\n+\t* semantics.c (finish_decltype_type): Complain about decltype of VLA.\n+\t* typeck.c (cp_build_addr_expr_1): Complain about VLA.\n+\t(cxx_sizeof_or_alignof_type): Likewise.\n+\n \tN3639 C++1y VLA support\n \t* decl.c (compute_array_index_type): Allow VLAs in C++1y mode.\n \t(check_array_initializer): Allow VLA init."}, {"sha": "438d27de1bd96c3ec1da878d346fdaa527f33375", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a57dbdaac40dbaaaba5b6d9954829a5e6f630ae4/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a57dbdaac40dbaaaba5b6d9954829a5e6f630ae4/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=a57dbdaac40dbaaaba5b6d9954829a5e6f630ae4", "patch": "@@ -8479,6 +8479,9 @@ create_array_type_for_decl (tree name, tree type, tree size)\n       return error_mark_node;\n     }\n \n+  if (cxx_dialect >= cxx1y && array_of_runtime_bound_p (type))\n+    pedwarn (input_location, OPT_Wvla, \"array of array of runtime bound\");\n+\n   /* Figure out the index type for the array.  */\n   if (size)\n     itype = compute_array_index_type (name, size, tf_warning_or_error);\n@@ -9720,6 +9723,12 @@ grokdeclarator (const cp_declarator *declarator,\n                    : G_(\"cannot declare pointer to qualified function type %qT\"),\n \t\t   type);\n \n+\t  if (cxx_dialect >= cxx1y && array_of_runtime_bound_p (type))\n+\t    pedwarn (input_location, OPT_Wvla,\n+\t\t     declarator->kind == cdk_reference\n+\t\t     ? G_(\"reference to array of runtime bound\")\n+\t\t     : G_(\"pointer to array of runtime bound\"));\n+\n \t  /* When the pointed-to type involves components of variable size,\n \t     care must be taken to ensure that the size evaluation code is\n \t     emitted early enough to dominate all the possible later uses\n@@ -10074,6 +10083,10 @@ grokdeclarator (const cp_declarator *declarator,\n \t  type = error_mark_node;\n \t}\n \n+      if (cxx_dialect >= cxx1y && array_of_runtime_bound_p (type))\n+\tpedwarn (input_location, OPT_Wvla,\n+\t\t \"typedef naming array of runtime bound\");\n+\n       if (decl_context == FIELD)\n \tdecl = build_lang_decl (TYPE_DECL, unqualified_id, type);\n       else"}, {"sha": "2cb2abd213fb78744b85960572c3e707bc246014", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a57dbdaac40dbaaaba5b6d9954829a5e6f630ae4/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a57dbdaac40dbaaaba5b6d9954829a5e6f630ae4/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=a57dbdaac40dbaaaba5b6d9954829a5e6f630ae4", "patch": "@@ -11560,6 +11560,18 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t  r = cp_build_reference_type (type, TYPE_REF_IS_RVALUE (t));\n \tr = cp_build_qualified_type_real (r, cp_type_quals (t), complain);\n \n+\tif (cxx_dialect >= cxx1y && array_of_runtime_bound_p (type))\n+\t  {\n+\t    if (complain & tf_warning_or_error)\n+\t      pedwarn\n+\t\t(input_location, OPT_Wvla,\n+\t\t code == REFERENCE_TYPE\n+\t\t ? G_(\"cannot declare reference to array of runtime bound\")\n+\t\t : G_(\"cannot declare pointer to array of runtime bound\"));\n+\t    else\n+\t      r = error_mark_node;\n+\t  }\n+\n \tif (r != error_mark_node)\n \t  /* Will this ever be needed for TYPE_..._TO values?  */\n \t  layout_type (r);"}, {"sha": "90104406dff28db4c2d1d41b44115f92644d41c1", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a57dbdaac40dbaaaba5b6d9954829a5e6f630ae4/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a57dbdaac40dbaaaba5b6d9954829a5e6f630ae4/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=a57dbdaac40dbaaaba5b6d9954829a5e6f630ae4", "patch": "@@ -393,9 +393,12 @@ get_tinfo_decl (tree type)\n \n   if (variably_modified_type_p (type, /*fn=*/NULL_TREE))\n     {\n-      error (\"cannot create type information for type %qT because \"\n-\t     \"it involves types of variable size\",\n-\t     type);\n+      if (array_of_runtime_bound_p (type))\n+\terror (\"typeid of array of runtime bound\");\n+      else\n+\terror (\"cannot create type information for type %qT because \"\n+\t       \"it involves types of variable size\",\n+\t       type);\n       return error_mark_node;\n     }\n "}, {"sha": "3e1a0bf281d48124085c8e3432e0ec278663a896", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a57dbdaac40dbaaaba5b6d9954829a5e6f630ae4/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a57dbdaac40dbaaaba5b6d9954829a5e6f630ae4/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=a57dbdaac40dbaaaba5b6d9954829a5e6f630ae4", "patch": "@@ -5456,6 +5456,15 @@ finish_decltype_type (tree expr, bool id_expression_or_member_access_p,\n \t}\n     }\n \n+  if (cxx_dialect >= cxx1y && array_of_runtime_bound_p (type))\n+    {\n+      if (complain & tf_warning_or_error)\n+\tpedwarn (input_location, OPT_Wvla,\n+\t\t \"taking decltype of array of runtime bound\");\n+      else\n+\treturn error_mark_node;\n+    }\n+\n   return type;\n }\n "}, {"sha": "df5fc4a880a10d70c1cd2237c12b357633a0fa7d", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a57dbdaac40dbaaaba5b6d9954829a5e6f630ae4/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a57dbdaac40dbaaaba5b6d9954829a5e6f630ae4/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=a57dbdaac40dbaaaba5b6d9954829a5e6f630ae4", "patch": "@@ -1547,6 +1547,15 @@ cxx_sizeof_or_alignof_type (tree type, enum tree_code op, bool complain)\n       return value;\n     }\n \n+  if (cxx_dialect >= cxx1y && array_of_runtime_bound_p (type))\n+    {\n+      if (complain & tf_warning_or_error)\n+\tpedwarn (input_location, OPT_Wvla,\n+\t\t \"taking sizeof array of runtime bound\");\n+      else\n+\treturn error_mark_node;\n+    }\n+\n   return c_sizeof_or_alignof_type (input_location, complete_type (type),\n \t\t\t\t   op == SIZEOF_EXPR,\n \t\t\t\t   complain);\n@@ -5316,7 +5325,17 @@ cp_build_addr_expr_1 (tree arg, bool strict_lvalue, tsubst_flags_t complain)\n     }\n \n   if (argtype != error_mark_node)\n-    argtype = build_pointer_type (argtype);\n+    {\n+      if (cxx_dialect >= cxx1y && array_of_runtime_bound_p (argtype))\n+\t{\n+\t  if (complain & tf_warning_or_error)\n+\t    pedwarn (input_location, OPT_Wvla,\n+\t\t     \"taking address of array of runtime bound\");\n+\t  else\n+\t    return error_mark_node;\n+\t}\n+      argtype = build_pointer_type (argtype);\n+    }\n \n   /* In a template, we are processing a non-dependent expression\n      so we can just form an ADDR_EXPR with the correct type.  */"}, {"sha": "29a59edf10e964e90fdc80ae1cc4fd6a260b35d7", "filename": "gcc/testsuite/g++.dg/cpp1y/vla1.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a57dbdaac40dbaaaba5b6d9954829a5e6f630ae4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a57dbdaac40dbaaaba5b6d9954829a5e6f630ae4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla1.C?ref=a57dbdaac40dbaaaba5b6d9954829a5e6f630ae4", "patch": "@@ -0,0 +1,40 @@\n+// { dg-options \"-std=c++1y -pedantic-errors\" }\n+\n+#include <typeinfo>\n+\n+void f(int n)\n+{\n+  int a[n];\n+  int aa[n][n];\t\t\t// { dg-error \"\" }\n+  &a;\t\t\t\t// { dg-error \"\" }\n+  sizeof a;\t\t\t// { dg-error \"\" }\n+  typeid(a);\t\t\t// { dg-error \"\" }\n+  decltype(a) a2;\t\t// { dg-error \"\" }\n+  typedef int at[n];\t\t// { dg-error \"\" }\n+  int (*p)[n];\t\t\t// { dg-error \"\" }\n+  int (&r)[n] = a;\t\t// { dg-error \"\" }\n+  struct A\n+  {\n+    int a[n];\t\t\t// { dg-error \"\" }\n+  };\n+}\n+\n+template <class T>\n+void g(int n)\n+{\n+  int a[n];\n+  int aa[n][n];\t\t\t// { dg-error \"\" }\n+  &a;\t\t\t\t// { dg-error \"\" }\n+  sizeof a;\t\t\t// { dg-error \"\" }\n+  typeid(a);\t\t\t// { dg-error \"\" }\n+  decltype(a) a2;\t\t// { dg-error \"\" }\n+  typedef int at[n];\t\t// { dg-error \"\" }\n+  int (*p)[n];\t\t\t// { dg-error \"\" }\n+  int (&r)[n] = a;\t\t// { dg-error \"\" }\n+  struct A\n+  {\n+    int a[n];\t\t\t// { dg-error \"\" }\n+  };\n+}\n+\n+template void g<int>(int);"}]}