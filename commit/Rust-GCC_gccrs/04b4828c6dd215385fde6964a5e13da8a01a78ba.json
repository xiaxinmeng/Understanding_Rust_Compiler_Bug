{"sha": "04b4828c6dd215385fde6964a5e13da8a01a78ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRiNDgyOGM2ZGQyMTUzODVmZGU2OTY0YTVlMTNkYThhMDFhNzhiYQ==", "commit": {"author": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2021-03-08T14:24:57Z"}, "committer": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2021-03-08T14:26:04Z"}, "message": "[PR99422] LRA: Skip modifiers when processing memory address.\n\n  Function process_address_1 can wrongly look at constraint modifiers\ninstead of the 1st constraint itself.  The patch solves the problem.\n\ngcc/ChangeLog:\n\n\tPR target/99422\n\t* lra-constraints.c (skip_contraint_modifiers): New function.\n\t(process_address_1): Use it before lookup_constraint call.", "tree": {"sha": "939932ed5bab93bbe9c876ddd896a4e0a669bd3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/939932ed5bab93bbe9c876ddd896a4e0a669bd3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04b4828c6dd215385fde6964a5e13da8a01a78ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04b4828c6dd215385fde6964a5e13da8a01a78ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04b4828c6dd215385fde6964a5e13da8a01a78ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04b4828c6dd215385fde6964a5e13da8a01a78ba/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e95554dac8284a75c13f4650ef40eea76227282e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e95554dac8284a75c13f4650ef40eea76227282e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e95554dac8284a75c13f4650ef40eea76227282e"}], "stats": {"total": 22, "additions": 20, "deletions": 2}, "files": [{"sha": "76e3ff7efe6962f8547ff50be4e85a00bbc6ee74", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04b4828c6dd215385fde6964a5e13da8a01a78ba/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04b4828c6dd215385fde6964a5e13da8a01a78ba/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=04b4828c6dd215385fde6964a5e13da8a01a78ba", "patch": "@@ -3392,6 +3392,21 @@ equiv_address_substitution (struct address_info *ad)\n   return change_p;\n }\n \n+/* Skip all modifiers and whitespaces in constraint STR and return the\n+   result.  */\n+static const char *\n+skip_contraint_modifiers (const char *str)\n+{\n+  for (;;str++)\n+    switch (*str)\n+      {\n+      case '+' : case '&' : case '=': case '*': case ' ': case '\\t':\n+      case '$': case '^' : case '%': case '?': case '!':\n+\tbreak;\n+      default: return str;\n+      }\n+}\n+\n /* Major function to make reloads for an address in operand NOP or\n    check its correctness (If CHECK_ONLY_P is true). The supported\n    cases are:\n@@ -3426,15 +3441,18 @@ process_address_1 (int nop, bool check_only_p,\n   HOST_WIDE_INT scale;\n   rtx op = *curr_id->operand_loc[nop];\n   rtx mem = extract_mem_from_operand (op);\n-  const char *constraint = curr_static_id->operand[nop].constraint;\n-  enum constraint_num cn = lookup_constraint (constraint);\n+  const char *constraint;\n+  enum constraint_num cn;\n   bool change_p = false;\n \n   if (MEM_P (mem)\n       && GET_MODE (mem) == BLKmode\n       && GET_CODE (XEXP (mem, 0)) == SCRATCH)\n     return false;\n \n+  constraint\n+    = skip_contraint_modifiers (curr_static_id->operand[nop].constraint);\n+  cn = lookup_constraint (constraint);\n   if (insn_extra_address_constraint (cn)\n       /* When we find an asm operand with an address constraint that\n \t doesn't satisfy address_operand to begin with, we clear"}]}