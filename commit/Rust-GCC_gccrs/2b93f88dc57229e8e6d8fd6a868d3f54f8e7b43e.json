{"sha": "2b93f88dc57229e8e6d8fd6a868d3f54f8e7b43e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI5M2Y4OGRjNTcyMjllOGU2ZDhmZDZhODY4ZDNmNTRmOGU3YjQzZQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2009-11-02T14:13:49Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2009-11-02T14:13:49Z"}, "message": "re PR tree-optimization/41750 (IPA-SRA is broken)\n\n2009-11-02  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/41750\n\t* tree-sra.c (analyze_modified_params): Loop over all\n\trepresentatives of components of a parameter.\n\n\t* testsuite/gcc.c-torture/execute/pr41750.c: New test.\n\nFrom-SVN: r153809", "tree": {"sha": "92a4ac036624eca55b4c96bfbf169439b117c524", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92a4ac036624eca55b4c96bfbf169439b117c524"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b93f88dc57229e8e6d8fd6a868d3f54f8e7b43e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b93f88dc57229e8e6d8fd6a868d3f54f8e7b43e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b93f88dc57229e8e6d8fd6a868d3f54f8e7b43e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b93f88dc57229e8e6d8fd6a868d3f54f8e7b43e/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "68052d59d6c867e7346e91900d287ba2d374a3b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68052d59d6c867e7346e91900d287ba2d374a3b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68052d59d6c867e7346e91900d287ba2d374a3b4"}], "stats": {"total": 135, "additions": 110, "deletions": 25}, "files": [{"sha": "df8f0ed9082d765424e0677e0cb208feaa963276", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b93f88dc57229e8e6d8fd6a868d3f54f8e7b43e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b93f88dc57229e8e6d8fd6a868d3f54f8e7b43e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2b93f88dc57229e8e6d8fd6a868d3f54f8e7b43e", "patch": "@@ -1,3 +1,9 @@\n+2009-11-02  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/41750\n+\t* tree-sra.c (analyze_modified_params): Loop over all\n+\trepresentatives of components of a parameter.\n+\n 2009-11-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/41841"}, {"sha": "4fe2079320bc5539be01973b41c6f4da0b2a89f2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b93f88dc57229e8e6d8fd6a868d3f54f8e7b43e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b93f88dc57229e8e6d8fd6a868d3f54f8e7b43e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2b93f88dc57229e8e6d8fd6a868d3f54f8e7b43e", "patch": "@@ -1,3 +1,8 @@\n+2009-11-02  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/41750\n+\t* gcc.c-torture/execute/pr41750.c: New test.\n+\n 2009-11-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/41841"}, {"sha": "3f5cb635d16c010e4b3905e3f4861bc1ebf4439b", "filename": "gcc/testsuite/gcc.c-torture/execute/pr41750.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b93f88dc57229e8e6d8fd6a868d3f54f8e7b43e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr41750.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b93f88dc57229e8e6d8fd6a868d3f54f8e7b43e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr41750.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr41750.c?ref=2b93f88dc57229e8e6d8fd6a868d3f54f8e7b43e", "patch": "@@ -0,0 +1,68 @@\n+/* PR 41750 - IPA-SRA used to pass hash->sgot by value rather than by\n+   reference.  */\n+\n+struct bfd_link_hash_table\n+{\n+  int hash;\n+};\n+\n+struct foo_link_hash_table\n+{\n+  struct bfd_link_hash_table root;\n+  int *dynobj;\n+  int *sgot;\n+};\n+\n+struct foo_link_info\n+{\n+  struct foo_link_hash_table *hash;\n+};\n+\n+extern void abort (void);\n+\n+int __attribute__((noinline))\n+foo_create_got_section (int *abfd, struct foo_link_info *info)\n+{\n+  info->hash->sgot = abfd;\n+  return 1;\n+}\n+\n+static int *\n+get_got (int *abfd, struct foo_link_info *info,\n+\t struct foo_link_hash_table *hash)\n+{\n+  int *got;\n+  int *dynobj;\n+\n+  got = hash->sgot;\n+  if (!got)\n+    {\n+      dynobj = hash->dynobj;\n+      if (!dynobj)\n+\thash->dynobj = dynobj = abfd;\n+      if (!foo_create_got_section (dynobj, info))\n+\treturn 0;\n+      got = hash->sgot;\n+    }\n+  return got;\n+}\n+\n+int * __attribute__((noinline,noclone))\n+elf64_ia64_check_relocs (int *abfd, struct foo_link_info *info)\n+{\n+  return get_got (abfd, info, info->hash);\n+}\n+\n+struct foo_link_info link_info;\n+struct foo_link_hash_table hash;\n+int abfd;\n+\n+int\n+main ()\n+{\n+  link_info.hash = &hash;\n+  if (elf64_ia64_check_relocs (&abfd, &link_info) != &abfd)\n+    abort ();\n+  return 0;\n+}\n+"}, {"sha": "12b19909db93c56b239a3a9528901cfb3ea415e3", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 31, "deletions": 25, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b93f88dc57229e8e6d8fd6a868d3f54f8e7b43e/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b93f88dc57229e8e6d8fd6a868d3f54f8e7b43e/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=2b93f88dc57229e8e6d8fd6a868d3f54f8e7b43e", "patch": "@@ -2818,33 +2818,39 @@ analyze_modified_params (VEC (access_p, heap) *representatives)\n \n   for (i = 0; i < func_param_count; i++)\n     {\n-      struct access *repr = VEC_index (access_p, representatives, i);\n-      VEC (access_p, heap) *access_vec;\n-      int j, access_count;\n-      tree parm;\n-\n-      if (!repr || no_accesses_p (repr))\n-\tcontinue;\n-      parm = repr->base;\n-      if (!POINTER_TYPE_P (TREE_TYPE (parm))\n-\t  || repr->grp_maybe_modified)\n-\tcontinue;\n+      struct access *repr;\n \n-      access_vec = get_base_access_vector (parm);\n-      access_count = VEC_length (access_p, access_vec);\n-      for (j = 0; j < access_count; j++)\n+      for (repr = VEC_index (access_p, representatives, i);\n+\t   repr;\n+\t   repr = repr->next_grp)\n \t{\n-\t  struct access *access;\n-\t  ao_ref ar;\n-\n-\t  /* All accesses are read ones, otherwise grp_maybe_modified would be\n-\t     trivially set.  */\n-\t  access = VEC_index (access_p, access_vec, j);\n-\t  ao_ref_init (&ar, access->expr);\n-\t  walk_aliased_vdefs (&ar, gimple_vuse (access->stmt),\n-\t\t\t      mark_maybe_modified, repr, NULL);\n-\t  if (repr->grp_maybe_modified)\n-\t    break;\n+\t  VEC (access_p, heap) *access_vec;\n+\t  int j, access_count;\n+\t  tree parm;\n+\n+\t  if (no_accesses_p (repr))\n+\t    continue;\n+\t  parm = repr->base;\n+\t  if (!POINTER_TYPE_P (TREE_TYPE (parm))\n+\t      || repr->grp_maybe_modified)\n+\t    continue;\n+\n+\t  access_vec = get_base_access_vector (parm);\n+\t  access_count = VEC_length (access_p, access_vec);\n+\t  for (j = 0; j < access_count; j++)\n+\t    {\n+\t      struct access *access;\n+\t      ao_ref ar;\n+\n+\t      /* All accesses are read ones, otherwise grp_maybe_modified would\n+\t\t be trivially set.  */\n+\t      access = VEC_index (access_p, access_vec, j);\n+\t      ao_ref_init (&ar, access->expr);\n+\t      walk_aliased_vdefs (&ar, gimple_vuse (access->stmt),\n+\t\t\t\t  mark_maybe_modified, repr, NULL);\n+\t      if (repr->grp_maybe_modified)\n+\t\tbreak;\n+\t    }\n \t}\n     }\n }"}]}