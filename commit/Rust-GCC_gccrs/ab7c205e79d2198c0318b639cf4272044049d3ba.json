{"sha": "ab7c205e79d2198c0318b639cf4272044049d3ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWI3YzIwNWU3OWQyMTk4YzAzMThiNjM5Y2Y0MjcyMDQ0MDQ5ZDNiYQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-02-01T06:49:19Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-02-01T06:49:19Z"}, "message": "system.h (inline, const): Handle these for stage2 (and later) gcc.\n\n        * system.h (inline, const): Handle these for stage2 (and later) gcc.\n        * dwarf2out.c (inline): Don't define.\n        * dwarfout.c (inline): Likewise.\n\nFrom-SVN: r24950", "tree": {"sha": "210badf5e829e5596cfb528d9db20ef0a91a9014", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/210badf5e829e5596cfb528d9db20ef0a91a9014"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab7c205e79d2198c0318b639cf4272044049d3ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab7c205e79d2198c0318b639cf4272044049d3ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab7c205e79d2198c0318b639cf4272044049d3ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab7c205e79d2198c0318b639cf4272044049d3ba/comments", "author": null, "committer": null, "parents": [{"sha": "5ae38e867860a28a3020a222b4cc080c388916a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ae38e867860a28a3020a222b4cc080c388916a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ae38e867860a28a3020a222b4cc080c388916a3"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "8abe3ab169ef19bdbc3058235eb64d90f4b7a693", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab7c205e79d2198c0318b639cf4272044049d3ba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab7c205e79d2198c0318b639cf4272044049d3ba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ab7c205e79d2198c0318b639cf4272044049d3ba", "patch": "@@ -1,3 +1,11 @@\n+Mon Feb  1 09:40:25 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* system.h (inline, const): Handle these for stage2 (and later) gcc.\n+\n+\t* dwarf2out.c (inline): Don't define.\n+\n+\t* dwarfout.c (inline): Likewise.\n+\n Sun Jan 31 22:04:37 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* loop.c (recombine_givs): Dump recombination and derivation data."}, {"sha": "16e5bc37f6e9202464c90f9003572bc4f35dc4e9", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab7c205e79d2198c0318b639cf4272044049d3ba/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab7c205e79d2198c0318b639cf4272044049d3ba/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=ab7c205e79d2198c0318b639cf4272044049d3ba", "patch": "@@ -72,10 +72,6 @@ dwarf2out_do_frame ()\n \n #if defined (DWARF2_DEBUGGING_INFO) || defined (DWARF2_UNWIND_INFO)\n \n-#ifndef __GNUC__\n-#define inline\n-#endif\n-\n /* How to start an assembler comment.  */\n #ifndef ASM_COMMENT_START\n #define ASM_COMMENT_START \";#\""}, {"sha": "dd4ff1da2ab8d8414507b4930f88d8126e9f107a", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab7c205e79d2198c0318b639cf4272044049d3ba/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab7c205e79d2198c0318b639cf4272044049d3ba/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=ab7c205e79d2198c0318b639cf4272044049d3ba", "patch": "@@ -63,10 +63,6 @@ extern char *getpwd PROTO((void));\n /* Note that the implementation of C++ support herein is (as yet) unfinished.\n    If you want to try to complete it, more power to you.  */\n \n-#if !defined(__GNUC__) || (NDEBUG != 1)\n-#define inline\n-#endif\n-\n /* How to start an assembler comment.  */\n #ifndef ASM_COMMENT_START\n #define ASM_COMMENT_START \";#\""}, {"sha": "0de71332189130802ac8ebdec7f91b834557b1ed", "filename": "gcc/system.h", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab7c205e79d2198c0318b639cf4272044049d3ba/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab7c205e79d2198c0318b639cf4272044049d3ba/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=ab7c205e79d2198c0318b639cf4272044049d3ba", "patch": "@@ -22,6 +22,18 @@ Boston, MA 02111-1307, USA.  */\n #ifndef __GCC_SYSTEM_H__\n #define __GCC_SYSTEM_H__\n \n+/* Autoconf will possibly define the `inline' or `const' keywords as\n+   macros, however this is only valid for the stage1 compiler.  If we\n+   detect a modern version of gcc, unconditionally reset the values.\n+   This makes sure the right thing happens in stage2 and later.  We\n+   need to do this before any header files in case they use these\n+   keywords or conflicts might occur. */\n+#if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 7)\n+# undef const\n+# undef inline\n+# define inline __inline__  /* Modern gcc can use `__inline__' freely. */\n+#endif /* GCC >= 2.7 */\n+\n /* We must include stdarg.h/varargs.h before stdio.h. */\n #ifdef ANSI_PROTOTYPES\n #include <stdarg.h>\n@@ -392,7 +404,6 @@ extern void abort ();\n # endif\n #endif /* ! STRINGIFY */\n \n-\n /* These macros are here in preparation for the use of gettext in egcs.  */\n #define _(String) String\n #define N_(String) String"}]}