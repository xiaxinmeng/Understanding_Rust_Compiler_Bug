{"sha": "1adbc4d8be32f3c70417c3a9da7604f79d7c7b3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFkYmM0ZDhiZTMyZjNjNzA0MTdjM2E5ZGE3NjA0Zjc5ZDdjN2IzYg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2000-02-16T22:42:41Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-02-16T22:42:41Z"}, "message": "jni.cc (_Jv_JNI_NewObjectV): Corrected assertion.\n\n\t* jni.cc (_Jv_JNI_NewObjectV): Corrected assertion.\n\t(_Jv_JNI_NewObject): Likewise.\n\t(_Jv_JNI_NewObjectA): Likewise.\n\t(_Jv_JNI_CallAnyMethodV): In constructor case, pass correct value\n\tas \"return\" type to _Jv_CallAnyMethodA.\n\t(_Jv_JNI_CallAnyMethodA): Likewise.\n\t(_Jv_JNI_CallAnyVoidMethodV): Likewise.\n\nFrom-SVN: r32017", "tree": {"sha": "86d05d62721316545fce92b6333dea66a37e5ba2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86d05d62721316545fce92b6333dea66a37e5ba2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1adbc4d8be32f3c70417c3a9da7604f79d7c7b3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1adbc4d8be32f3c70417c3a9da7604f79d7c7b3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1adbc4d8be32f3c70417c3a9da7604f79d7c7b3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1adbc4d8be32f3c70417c3a9da7604f79d7c7b3b/comments", "author": null, "committer": null, "parents": [{"sha": "5b0d59b4e7e9102fdce92787a05f1ad982d7eddd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b0d59b4e7e9102fdce92787a05f1ad982d7eddd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b0d59b4e7e9102fdce92787a05f1ad982d7eddd"}], "stats": {"total": 37, "additions": 34, "deletions": 3}, "files": [{"sha": "267554093b0262dfcb2025329f59f3bcf982afe5", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1adbc4d8be32f3c70417c3a9da7604f79d7c7b3b/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1adbc4d8be32f3c70417c3a9da7604f79d7c7b3b/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=1adbc4d8be32f3c70417c3a9da7604f79d7c7b3b", "patch": "@@ -1,5 +1,13 @@\n 2000-02-16  Tom Tromey  <tromey@cygnus.com>\n \n+\t* jni.cc (_Jv_JNI_NewObjectV): Corrected assertion.\n+\t(_Jv_JNI_NewObject): Likewise.\n+\t(_Jv_JNI_NewObjectA): Likewise.\n+\t(_Jv_JNI_CallAnyMethodV): In constructor case, pass correct value\n+\tas \"return\" type to _Jv_CallAnyMethodA.\n+\t(_Jv_JNI_CallAnyMethodA): Likewise.\n+\t(_Jv_JNI_CallAnyVoidMethodV): Likewise.\n+\n \t* jni.cc (_Jv_JNI_FindClass): Use ClassLoader.loadClass, not\n \tfindClass.\n "}, {"sha": "38f89d368816078a99e84f04cdf5be195612a25c", "filename": "libjava/jni.cc", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1adbc4d8be32f3c70417c3a9da7604f79d7c7b3b/libjava%2Fjni.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1adbc4d8be32f3c70417c3a9da7604f79d7c7b3b/libjava%2Fjni.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni.cc?ref=1adbc4d8be32f3c70417c3a9da7604f79d7c7b3b", "patch": "@@ -560,6 +560,10 @@ _Jv_JNI_CallAnyMethodV (JNIEnv *env, jobject obj, jclass klass,\n   jvalue args[arg_types->length];\n   array_from_valist (args, arg_types, vargs);\n \n+  // For constructors we need to pass the Class we are instantiating.\n+  if (style == constructor)\n+    return_type = klass;\n+\n   jvalue result;\n   jthrowable ex = _Jv_CallAnyMethodA (obj, return_type, id,\n \t\t\t\t      style == constructor,\n@@ -604,6 +608,10 @@ _Jv_JNI_CallAnyMethodA (JNIEnv *env, jobject obj, jclass klass,\n   _Jv_GetTypesFromSignature (id, decl_class,\n \t\t\t     &arg_types, &return_type);\n \n+  // For constructors we need to pass the Class we are instantiating.\n+  if (style == constructor)\n+    return_type = klass;\n+\n   jvalue result;\n   jthrowable ex = _Jv_CallAnyMethodA (obj, return_type, id,\n \t\t\t\t      style == constructor,\n@@ -636,6 +644,10 @@ _Jv_JNI_CallAnyVoidMethodV (JNIEnv *env, jobject obj, jclass klass,\n   jvalue args[arg_types->length];\n   array_from_valist (args, arg_types, vargs);\n \n+  // For constructors we need to pass the Class we are instantiating.\n+  if (style == constructor)\n+    return_type = klass;\n+\n   jthrowable ex = _Jv_CallAnyMethodA (obj, return_type, id,\n \t\t\t\t      style == constructor,\n \t\t\t\t      arg_types, args, NULL);\n@@ -804,7 +816,11 @@ _Jv_JNI_NewObjectV (JNIEnv *env, jclass klass,\n {\n   JvAssert (klass && ! klass->isArray ());\n   JvAssert (! strcmp (id->name->data, \"<init>\")\n-\t    && ! strcmp (id->signature->data, \"()V\"));\n+\t    && id->signature->length > 2\n+\t    && id->signature->data[0] == '('\n+\t    && ! strcmp (&id->signature->data[id->signature->length - 2],\n+\t\t\t \")V\"));\n+\n   return _Jv_JNI_CallAnyMethodV<jobject, constructor> (env, NULL, klass,\n \t\t\t\t\t\t       id, args);\n }\n@@ -814,7 +830,10 @@ _Jv_JNI_NewObject (JNIEnv *env, jclass klass, jmethodID id, ...)\n {\n   JvAssert (klass && ! klass->isArray ());\n   JvAssert (! strcmp (id->name->data, \"<init>\")\n-\t    && ! strcmp (id->signature->data, \"()V\"));\n+\t    && id->signature->length > 2\n+\t    && id->signature->data[0] == '('\n+\t    && ! strcmp (&id->signature->data[id->signature->length - 2],\n+\t\t\t \")V\"));\n \n   va_list args;\n   jobject result;\n@@ -833,7 +852,11 @@ _Jv_JNI_NewObjectA (JNIEnv *env, jclass klass, jmethodID id,\n {\n   JvAssert (klass && ! klass->isArray ());\n   JvAssert (! strcmp (id->name->data, \"<init>\")\n-\t    && ! strcmp (id->signature->data, \"()V\"));\n+\t    && id->signature->length > 2\n+\t    && id->signature->data[0] == '('\n+\t    && ! strcmp (&id->signature->data[id->signature->length - 2],\n+\t\t\t \")V\"));\n+\n   return _Jv_JNI_CallAnyMethodA<jobject, constructor> (env, NULL, klass,\n \t\t\t\t\t\t       id, args);\n }"}]}