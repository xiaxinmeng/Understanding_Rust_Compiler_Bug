{"sha": "f970a17d6fc79eda660c78632ceff35d814933a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk3MGExN2Q2ZmM3OWVkYTY2MGM3ODYzMmNlZmYzNWQ4MTQ5MzNhOA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-04-29T15:22:13Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-04-29T15:22:13Z"}, "message": "re PR libstdc++/64657 (Support iterators with overloaded operator-comma)\n\n\tPR libstdc++/64657\n\t* include/bits/basic_string (basic_string::_S_copy_chars): Cast\n\texpression to void.\n\t* include/bits/locale_facets_nonio.tcc (money_get::_M_extract,\n\ttime_get::_M_extract_num, time_get::_M_extract_name,\n\ttime_get::_M_extract_wday_or_month): Likewise.\n\t* include/bits/stl_algo.h (__includes, __replace_copy_if,\n\t__is_sorted_until, __is_permutation, transform): Likewise.\n\t* include/bits/stl_algobase.h (swap_ranges, __copy_move::__copy_m,\n\t__equal::equal, __lexicographical_compare_impl, equal): Likewise.\n\t* include/bits/stl_numeric.h (inner_product): Likewise.\n\t* include/bits/stl_uninitialized.h (__uninitialized_copy_a): Likewise.\n\t* testsuite/util/testsuite_iterators.h (output_iterator_wrapper,\n\tinput_iterator_wrapper): Declare unusable comma operator.\n\t* testsuite/21_strings/basic_string/cons/char/64657.cc: New.\n\t* testsuite/21_strings/basic_string/modifiers/assign/char/64657.cc:\n\tNew.\n\nFrom-SVN: r222579", "tree": {"sha": "16ecbec608813fb9f433a66d79eca29a399c57b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16ecbec608813fb9f433a66d79eca29a399c57b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f970a17d6fc79eda660c78632ceff35d814933a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f970a17d6fc79eda660c78632ceff35d814933a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f970a17d6fc79eda660c78632ceff35d814933a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f970a17d6fc79eda660c78632ceff35d814933a8/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0aa359c18fe4b3373bae59b3c7e414dbe027c19b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0aa359c18fe4b3373bae59b3c7e414dbe027c19b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0aa359c18fe4b3373bae59b3c7e414dbe027c19b"}], "stats": {"total": 168, "additions": 137, "deletions": 31}, "files": [{"sha": "fde307fb9edcca1dc85f99f6ccef6ccdfcaf9a82", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f970a17d6fc79eda660c78632ceff35d814933a8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f970a17d6fc79eda660c78632ceff35d814933a8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f970a17d6fc79eda660c78632ceff35d814933a8", "patch": "@@ -1,3 +1,23 @@\n+2015-04-29  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/64657\n+\t* include/bits/basic_string (basic_string::_S_copy_chars): Cast\n+\texpression to void.\n+\t* include/bits/locale_facets_nonio.tcc (money_get::_M_extract,\n+\ttime_get::_M_extract_num, time_get::_M_extract_name,\n+\ttime_get::_M_extract_wday_or_month): Likewise.\n+\t* include/bits/stl_algo.h (__includes, __replace_copy_if,\n+\t__is_sorted_until, __is_permutation, transform): Likewise.\n+\t* include/bits/stl_algobase.h (swap_ranges, __copy_move::__copy_m,\n+\t__equal::equal, __lexicographical_compare_impl, equal): Likewise.\n+\t* include/bits/stl_numeric.h (inner_product): Likewise.\n+\t* include/bits/stl_uninitialized.h (__uninitialized_copy_a): Likewise.\n+\t* testsuite/util/testsuite_iterators.h (output_iterator_wrapper,\n+\tinput_iterator_wrapper): Declare unusable comma operator.\n+\t* testsuite/21_strings/basic_string/cons/char/64657.cc: New.\n+\t* testsuite/21_strings/basic_string/modifiers/assign/char/64657.cc:\n+\tNew.\n+\n 2015-04-28  Doug Evans  <dje@google.com>\n \n \t* testsuite/libstdc++-xmethods/list.cc (_GLIBCXX_USE_CXX11_ABI):"}, {"sha": "3e3eef44b4a14bc937a4a620e532bcb9a39abd08", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f970a17d6fc79eda660c78632ceff35d814933a8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f970a17d6fc79eda660c78632ceff35d814933a8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=f970a17d6fc79eda660c78632ceff35d814933a8", "patch": "@@ -324,7 +324,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n         _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)\n \t_GLIBCXX_NOEXCEPT\n         {\n-\t  for (; __k1 != __k2; ++__k1, ++__p)\n+\t  for (; __k1 != __k2; ++__k1, (void)++__p)\n \t    traits_type::assign(*__p, *__k1); // These types are off.\n \t}\n \n@@ -2779,7 +2779,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n         _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)\n \t_GLIBCXX_NOEXCEPT\n         {\n-\t  for (; __k1 != __k2; ++__k1, ++__p)\n+\t  for (; __k1 != __k2; ++__k1, (void)++__p)\n \t    traits_type::assign(*__p, *__k1); // These types are off.\n \t}\n "}, {"sha": "2e73b5d2af051b100061d457fd35148836eca551", "filename": "libstdc++-v3/include/bits/locale_facets_nonio.tcc", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f970a17d6fc79eda660c78632ceff35d814933a8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f970a17d6fc79eda660c78632ceff35d814933a8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc?ref=f970a17d6fc79eda660c78632ceff35d814933a8", "patch": "@@ -202,7 +202,7 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11\n \t\t    size_type __j = 0;\n \t\t    for (; __beg != __end && __j < __len\n \t\t\t   && *__beg == __lc->_M_curr_symbol[__j];\n-\t\t\t ++__beg, ++__j);\n+\t\t\t ++__beg, (void)++__j);\n \t\t    if (__j != __len\n \t\t\t&& (__j || __io.flags() & ios_base::showbase))\n \t\t      __testvalid = false;\n@@ -298,7 +298,7 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11\n \t                                         : __lc->_M_positive_sign;\n \t    size_type __i = 1;\n \t    for (; __beg != __end && __i < __sign_size\n-\t\t   && *__beg == __sign[__i]; ++__beg, ++__i);\n+\t\t   && *__beg == __sign[__i]; ++__beg, (void)++__i);\n \t    \n \t    if (__i != __sign_size)\n \t      __testvalid = false;\n@@ -858,7 +858,7 @@ _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11\n       ++__min;\n       size_t __i = 0;\n       int __value = 0;\n-      for (; __beg != __end && __i < __len; ++__beg, ++__i)\n+      for (; __beg != __end && __i < __len; ++__beg, (void)++__i)\n \t{\n \t  const char __c = __ctype.narrow(*__beg, '*');\n \t  if (__c >= '0' && __c <= '9')\n@@ -923,7 +923,8 @@ _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11\n \t  for (size_t __i2 = 1; __i2 < __nmatches; ++__i2)\n \t    __minlen = std::min(__minlen,\n \t\t\t      __traits_type::length(__names[__matches[__i2]]));\n-\t  ++__beg, ++__pos;\n+\t  ++__beg;\n+\t  ++__pos;\n \t  if (__pos < __minlen && __beg != __end)\n \t    for (size_t __i3 = 0; __i3 < __nmatches;)\n \t      {\n@@ -940,11 +941,12 @@ _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11\n       if (__nmatches == 1)\n \t{\n \t  // Make sure found name is completely extracted.\n-\t  ++__beg, ++__pos;\n+\t  ++__beg;\n+\t  ++__pos;\n \t  __name = __names[__matches[0]];\n \t  const size_t __len = __traits_type::length(__name);\n \t  while (__pos < __len && __beg != __end && __name[__pos] == *__beg)\n-\t    ++__beg, ++__pos;\n+\t    ++__beg, (void)++__pos;\n \n \t  if (__len == __pos)\n \t    __member = __matches[0];\n@@ -987,7 +989,8 @@ _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11\n \n       if (__nmatches)\n \t{\n-\t  ++__beg, ++__pos;\n+\t  ++__beg;\n+\t  ++__pos;\n \n \t  __matches_lengths\n \t    = static_cast<size_t*>(__builtin_alloca(sizeof(size_t)\n@@ -997,7 +1000,7 @@ _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11\n \t      = __traits_type::length(__names[__matches[__i]]);\n \t}\n \n-      for (; __beg != __end; ++__beg, ++__pos)\n+      for (; __beg != __end; ++__beg, (void)++__pos)\n \t{\n \t  size_t __nskipped = 0;\n \t  const char_type __c = *__beg;"}, {"sha": "93e834abeb7889cbc3aa2b6255bacead6c24bfcc", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f970a17d6fc79eda660c78632ceff35d814933a8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f970a17d6fc79eda660c78632ceff35d814933a8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=f970a17d6fc79eda660c78632ceff35d814933a8", "patch": "@@ -2805,7 +2805,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \telse if (__comp(__first1, __first2))\n \t  ++__first1;\n \telse\n-\t  ++__first1, ++__first2;\n+\t  {\n+\t    ++__first1;\n+\t    ++__first2;\n+\t  }\n \n       return __first2 == __last2;\n     }\n@@ -3108,7 +3111,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t      _OutputIterator __result,\n \t\t      _Predicate __pred, const _Tp& __new_value)\n     {\n-      for (; __first != __last; ++__first, ++__result)\n+      for (; __first != __last; ++__first, (void)++__result)\n \tif (__pred(__first))\n \t  *__result = __new_value;\n \telse\n@@ -3232,7 +3235,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __last;\n \n       _ForwardIterator __next = __first;\n-      for (++__next; __next != __last; __first = __next, ++__next)\n+      for (++__next; __next != __last; __first = __next, (void)++__next)\n \tif (__comp(__next, __first))\n \t  return __next;\n       return __next;\n@@ -3491,7 +3494,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       // Efficiently compare identical prefixes:  O(N) if sequences\n       // have the same elements in the same order.\n-      for (; __first1 != __last1; ++__first1, ++__first2)\n+      for (; __first1 != __last1; ++__first1, (void)++__first2)\n \tif (!__pred(__first1, __first2))\n \t  break;\n \n@@ -3607,7 +3610,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // Efficiently compare identical prefixes:  O(N) if sequences\n       // have the same elements in the same order.\n       for (; __first1 != __last1 && __first2 != __last2;\n-\t  ++__first1, ++__first2)\n+\t  ++__first1, (void)++__first2)\n \tif (!__pred(__first1, __first2))\n \t  break;\n \n@@ -4171,7 +4174,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n             __typeof__(__unary_op(*__first))>)\n       __glibcxx_requires_valid_range(__first, __last);\n \n-      for (; __first != __last; ++__first, ++__result)\n+      for (; __first != __last; ++__first, (void)++__result)\n \t*__result = __unary_op(*__first);\n       return __result;\n     }\n@@ -4210,7 +4213,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n             __typeof__(__binary_op(*__first1,*__first2))>)\n       __glibcxx_requires_valid_range(__first1, __last1);\n \n-      for (; __first1 != __last1; ++__first1, ++__first2, ++__result)\n+      for (; __first1 != __last1; ++__first1, (void)++__first2, ++__result)\n \t*__result = __binary_op(*__first1, *__first2);\n       return __result;\n     }"}, {"sha": "c82d96d25bbff043c78a169d04e2a2cda7983e50", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f970a17d6fc79eda660c78632ceff35d814933a8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f970a17d6fc79eda660c78632ceff35d814933a8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=f970a17d6fc79eda660c78632ceff35d814933a8", "patch": "@@ -173,7 +173,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t  _ForwardIterator2>)\n       __glibcxx_requires_valid_range(__first1, __last1);\n \n-      for (; __first1 != __last1; ++__first1, ++__first2)\n+      for (; __first1 != __last1; ++__first1, (void)++__first2)\n \tstd::iter_swap(__first1, __first2);\n       return __first2;\n     }\n@@ -306,7 +306,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         static _OI\n         __copy_m(_II __first, _II __last, _OI __result)\n         {\n-\t  for (; __first != __last; ++__result, ++__first)\n+\t  for (; __first != __last; ++__result, (void)++__first)\n \t    *__result = *__first;\n \t  return __result;\n \t}\n@@ -320,7 +320,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         static _OI\n         __copy_m(_II __first, _II __last, _OI __result)\n         {\n-\t  for (; __first != __last; ++__result, ++__first)\n+\t  for (; __first != __last; ++__result, (void)++__first)\n \t    *__result = std::move(*__first);\n \t  return __result;\n \t}\n@@ -808,7 +808,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         static bool\n         equal(_II1 __first1, _II1 __last1, _II2 __first2)\n         {\n-\t  for (; __first1 != __last1; ++__first1, ++__first2)\n+\t  for (; __first1 != __last1; ++__first1, (void)++__first2)\n \t    if (!(*__first1 == *__first2))\n \t      return false;\n \t  return true;\n@@ -889,7 +889,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       __last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2);\n       for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);\n-\t   ++__first1, ++__first2)\n+\t   ++__first1, (void)++__first2)\n \t{\n \t  if (__comp(__first1, __first2))\n \t    return true;\n@@ -1088,7 +1088,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n       __glibcxx_function_requires(_InputIteratorConcept<_IIter2>)\n       __glibcxx_requires_valid_range(__first1, __last1);\n \n-      for (; __first1 != __last1; ++__first1, ++__first2)\n+      for (; __first1 != __last1; ++__first1, (void)++__first2)\n \tif (!bool(__binary_pred(*__first1, *__first2)))\n \t  return false;\n       return true;\n@@ -1137,7 +1137,8 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t  return _GLIBCXX_STD_A::equal(__first1, __last1, __first2);\n \t}\n \n-      for (; __first1 != __last1 && __first2 != __last2; ++__first1, ++__first2)\n+      for (; __first1 != __last1 && __first2 != __last2;\n+\t  ++__first1, (void)++__first2)\n \tif (!(*__first1 == *__first2))\n \t  return false;\n       return __first1 == __last1 && __first2 == __last2;\n@@ -1184,7 +1185,8 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t\t\t\t       __binary_pred);\n \t}\n \n-      for (; __first1 != __last1 && __first2 != __last2; ++__first1, ++__first2)\n+      for (; __first1 != __last1 && __first2 != __last2;\n+\t  ++__first1, (void)++__first2)\n \tif (!bool(__binary_pred(*__first1, *__first2)))\n \t  return false;\n       return __first1 == __last1 && __first2 == __last2;"}, {"sha": "b8e068e81bad16b5dfb8538a9bd77e1c0329741f", "filename": "libstdc++-v3/include/bits/stl_numeric.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f970a17d6fc79eda660c78632ceff35d814933a8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f970a17d6fc79eda660c78632ceff35d814933a8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h?ref=f970a17d6fc79eda660c78632ceff35d814933a8", "patch": "@@ -179,7 +179,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n       __glibcxx_requires_valid_range(__first1, __last1);\n \n-      for (; __first1 != __last1; ++__first1, ++__first2)\n+      for (; __first1 != __last1; ++__first1, (void)++__first2)\n \t__init = __init + (*__first1 * *__first2);\n       return __init;\n     }\n@@ -213,7 +213,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n       __glibcxx_requires_valid_range(__first1, __last1);\n \n-      for (; __first1 != __last1; ++__first1, ++__first2)\n+      for (; __first1 != __last1; ++__first1, (void)++__first2)\n \t__init = __binary_op1(__init, __binary_op2(*__first1, *__first2));\n       return __init;\n     }"}, {"sha": "715cb58de5ed78d0078f5e4118d5e302298a8862", "filename": "libstdc++-v3/include/bits/stl_uninitialized.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f970a17d6fc79eda660c78632ceff35d814933a8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f970a17d6fc79eda660c78632ceff35d814933a8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h?ref=f970a17d6fc79eda660c78632ceff35d814933a8", "patch": "@@ -263,7 +263,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __try\n \t{\n \t  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;\n-\t  for (; __first != __last; ++__first, ++__cur)\n+\t  for (; __first != __last; ++__first, (void)++__cur)\n \t    __traits::construct(__alloc, std::__addressof(*__cur), *__first);\n \t  return __cur;\n \t}"}, {"sha": "6f0777f656917dd98c8d973c1462757170752ab9", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/char/64657.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f970a17d6fc79eda660c78632ceff35d814933a8/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F64657.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f970a17d6fc79eda660c78632ceff35d814933a8/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F64657.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F64657.cc?ref=f970a17d6fc79eda660c78632ceff35d814933a8", "patch": "@@ -0,0 +1,30 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile }\n+\n+#include <string>\n+#include <testsuite_iterators.h>\n+\n+void\n+test01()\n+{\n+  using namespace __gnu_test;\n+  char* p = 0;\n+  test_container<char, forward_iterator_wrapper> c(p, p);\n+  std::string s(c.begin(), c.end());\n+}"}, {"sha": "b3cac9abb5a05d6e11288ff2bc4d1fc7e0b01105", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/modifiers/assign/char/64657.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f970a17d6fc79eda660c78632ceff35d814933a8/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fassign%2Fchar%2F64657.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f970a17d6fc79eda660c78632ceff35d814933a8/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fassign%2Fchar%2F64657.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fassign%2Fchar%2F64657.cc?ref=f970a17d6fc79eda660c78632ceff35d814933a8", "patch": "@@ -0,0 +1,31 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile }\n+\n+#include <string>\n+#include <testsuite_iterators.h>\n+\n+void\n+test01()\n+{\n+  using namespace __gnu_test;\n+  char* p = 0;\n+  test_container<char, forward_iterator_wrapper> c(p, p);\n+  std::string s;\n+  s.assign(c.begin(), c.end());\n+}"}, {"sha": "d899d8d97bbf43f948402594b53df84928c09873", "filename": "libstdc++-v3/testsuite/util/testsuite_iterators.h", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f970a17d6fc79eda660c78632ceff35d814933a8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f970a17d6fc79eda660c78632ceff35d814933a8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h?ref=f970a17d6fc79eda660c78632ceff35d814933a8", "patch": "@@ -170,6 +170,14 @@ namespace __gnu_test\n       return tmp;\n     }\n \n+#if __cplusplus >= 201103L\n+    template<typename U>\n+      void operator,(const U&) const = delete;\n+#else\n+  private:\n+    template<typename U>\n+      void operator,(const U&) const;\n+#endif\n   };\n \n   /**\n@@ -251,6 +259,15 @@ namespace __gnu_test\n     {\n       ++*this;\n     }\n+\n+#if __cplusplus >= 201103L\n+    template<typename U>\n+      void operator,(const U&) const = delete;\n+#else\n+  private:\n+    template<typename U>\n+      void operator,(const U&) const;\n+#endif\n   };\n \n \n@@ -306,7 +323,7 @@ namespace __gnu_test\n       ++*this;\n       return tmp;\n     }\n-   };\n+  };\n \n   /**\n    * @brief bidirectional_iterator wrapper for pointer\n@@ -370,7 +387,7 @@ namespace __gnu_test\n       --*this;\n       return tmp;\n     }\n-   };\n+  };\n \n   /**\n    * @brief random_access_iterator wrapper for pointer\n@@ -498,7 +515,7 @@ namespace __gnu_test\n     {\n       return !(*this > in);\n     }\n-   };\n+  };\n \n   template<typename T>\n     random_access_iterator_wrapper<T>"}]}