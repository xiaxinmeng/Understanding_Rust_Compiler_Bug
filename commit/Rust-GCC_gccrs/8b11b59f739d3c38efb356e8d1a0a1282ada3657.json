{"sha": "8b11b59f739d3c38efb356e8d1a0a1282ada3657", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGIxMWI1OWY3MzlkM2MzOGVmYjM1NmU4ZDFhMGExMjgyYWRhMzY1Nw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2008-07-18T17:54:46Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2008-07-18T17:54:46Z"}, "message": "arith.c (eval_type_intrinsic0): Avoid C++ keywords.\n\n\t* arith.c (eval_type_intrinsic0): Avoid C++ keywords.\n\t* gfortran.h (try, protected, operator, new): Likewise.\n\nFrom-SVN: r137960", "tree": {"sha": "5f65a0132f3a210fdb23e24fea9fb6b3d802707a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f65a0132f3a210fdb23e24fea9fb6b3d802707a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b11b59f739d3c38efb356e8d1a0a1282ada3657", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b11b59f739d3c38efb356e8d1a0a1282ada3657", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b11b59f739d3c38efb356e8d1a0a1282ada3657", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b11b59f739d3c38efb356e8d1a0a1282ada3657/comments", "author": null, "committer": null, "parents": [{"sha": "be93747e8b27f86a1df8b30b050daae5c63206d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be93747e8b27f86a1df8b30b050daae5c63206d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be93747e8b27f86a1df8b30b050daae5c63206d0"}], "stats": {"total": 26, "additions": 19, "deletions": 7}, "files": [{"sha": "845dcf77c7161a3f9e71cee88b6273edfadc7b39", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b11b59f739d3c38efb356e8d1a0a1282ada3657/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b11b59f739d3c38efb356e8d1a0a1282ada3657/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8b11b59f739d3c38efb356e8d1a0a1282ada3657", "patch": "@@ -1,3 +1,8 @@\n+2008-07-18  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* arith.c (eval_type_intrinsic0): Avoid C++ keywords.\n+\t* gfortran.h (try, protected, operator, new): Likewise.\n+\n 2008-07-17  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/36825"}, {"sha": "ca6de639db4b76d0ad5ad3dae4f62ea02128521a", "filename": "gcc/fortran/arith.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b11b59f739d3c38efb356e8d1a0a1282ada3657/gcc%2Ffortran%2Farith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b11b59f739d3c38efb356e8d1a0a1282ada3657/gcc%2Ffortran%2Farith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.c?ref=8b11b59f739d3c38efb356e8d1a0a1282ada3657", "patch": "@@ -1739,12 +1739,12 @@ eval_intrinsic (gfc_intrinsic_op operator,\n /* Modify type of expression for zero size array.  */\n \n static gfc_expr *\n-eval_type_intrinsic0 (gfc_intrinsic_op operator, gfc_expr *op)\n+eval_type_intrinsic0 (gfc_intrinsic_op iop, gfc_expr *op)\n {\n   if (op == NULL)\n     gfc_internal_error (\"eval_type_intrinsic0(): op NULL\");\n \n-  switch (operator)\n+  switch (iop)\n     {\n     case INTRINSIC_GE:\n     case INTRINSIC_GE_OS:"}, {"sha": "5c6fd92d404816d6b55a9f3d70b62530e8e9861d", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b11b59f739d3c38efb356e8d1a0a1282ada3657/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b11b59f739d3c38efb356e8d1a0a1282ada3657/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=8b11b59f739d3c38efb356e8d1a0a1282ada3657", "patch": "@@ -114,9 +114,11 @@ io_kind;\n    following enum makes things much more readable.  We also start\n    values off at one instead of zero.  */\n \n+/* FIXME: This macro is temporary until we convert everything.  */\n+#define try gfc_try\n typedef enum\n { SUCCESS = 1, FAILURE }\n-try;\n+gfc_try;\n \n /* This is returned by gfc_notification_std to know if, given the flags\n    that were given (-std=, -pedantic) we should issue an error, a warning\n@@ -625,7 +627,9 @@ typedef struct\n   ENUM_BITFIELD (save_state) save:2;\n \n   unsigned data:1,\t\t/* Symbol is named in a DATA statement.  */\n-    protected:1,\t\t/* Symbol has been marked as protected.  */\n+    /* FIXME: This macro is temporary until we convert everything.  */\n+#define protected is_protected\n+    is_protected:1,\t\t/* Symbol has been marked as protected.  */\n     use_assoc:1,\t\t/* Symbol has been use-associated.  */\n     use_only:1,\t\t\t/* Symbol has been use-associated, with ONLY.  */\n     use_rename:1,\t\t/* Symbol has been use-associated and renamed.  */\n@@ -980,13 +984,14 @@ gfc_interface;\n \n #define gfc_get_interface() XCNEW (gfc_interface)\n \n-\n+/* FIXME: This macro is temporary until we convert everything.  */\n+#define operator op\n /* User operator nodes.  These are like stripped down symbols.  */\n typedef struct\n {\n   const char *name;\n \n-  gfc_interface *operator;\n+  gfc_interface *op;\n   struct gfc_namespace *ns;\n   gfc_access access;\n }\n@@ -1052,7 +1057,9 @@ typedef struct gfc_symbol\n      the old symbol.  */\n \n   struct gfc_symbol *old_symbol, *tlink;\n-  unsigned mark:1, new:1;\n+  /* FIXME: This macro is temporary until we convert everything.  */\n+#define new gfc_new\n+  unsigned mark:1, gfc_new:1;\n   /* Nonzero if all equivalences associated with this symbol have been\n      processed.  */\n   unsigned equiv_built:1;"}]}