{"sha": "4ff7defd046ca231a35c93b4000962b37ccad31c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZmN2RlZmQwNDZjYTIzMWEzNWM5M2I0MDAwOTYyYjM3Y2NhZDMxYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-10-30T13:44:01Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-10-30T13:44:01Z"}, "message": "Fix real_2expN mode arguments in fixed-value.c\n\nfixed-value.c was passing a fixed-point mode to the floating-point\nreal_2expN routine.  That didn't cause a problem in practice because\nall real_2expN did was check for decimal float modes, but it triggered\na failure with an upcoming patch.\n\nTested on x86_64-linux-gnu, arm-linux-gnueabi and aarch64-linux-gnu.\n\ngcc/\n\t* fixed-value.c (check_real_for_fixed_mode, fixed_from_string)\n\t(fixed_to_decimal, fixed_convert_from_real)\n\t(real_convert_from_fixed): Fix mode arguments to real_2expN.\n\nFrom-SVN: r229580", "tree": {"sha": "a3a5d0470a7d4cb16735b3d808f30ab1f1695643", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3a5d0470a7d4cb16735b3d808f30ab1f1695643"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ff7defd046ca231a35c93b4000962b37ccad31c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ff7defd046ca231a35c93b4000962b37ccad31c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ff7defd046ca231a35c93b4000962b37ccad31c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ff7defd046ca231a35c93b4000962b37ccad31c/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d5e09aa0aaec24109949afabb20b813e9096905f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5e09aa0aaec24109949afabb20b813e9096905f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5e09aa0aaec24109949afabb20b813e9096905f"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "a38b9f18a095b1fae11e319c6e43ff37b6b5a668", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ff7defd046ca231a35c93b4000962b37ccad31c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ff7defd046ca231a35c93b4000962b37ccad31c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4ff7defd046ca231a35c93b4000962b37ccad31c", "patch": "@@ -1,3 +1,9 @@\n+2015-10-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* fixed-value.c (check_real_for_fixed_mode, fixed_from_string)\n+\t(fixed_to_decimal, fixed_convert_from_real)\n+\t(real_convert_from_fixed): Fix mode arguments to real_2expN.\n+\n 2015-10-30  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* real.h (REAL_MODE_FORMAT): Abort if the mode isn't a"}, {"sha": "0e8fe8f5fdd20f6bc2fcb9ef0976a7dfde93eaba", "filename": "gcc/fixed-value.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ff7defd046ca231a35c93b4000962b37ccad31c/gcc%2Ffixed-value.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ff7defd046ca231a35c93b4000962b37ccad31c/gcc%2Ffixed-value.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixed-value.c?ref=4ff7defd046ca231a35c93b4000962b37ccad31c", "patch": "@@ -64,8 +64,8 @@ check_real_for_fixed_mode (REAL_VALUE_TYPE *real_value, machine_mode mode)\n {\n   REAL_VALUE_TYPE max_value, min_value, epsilon_value;\n \n-  real_2expN (&max_value, GET_MODE_IBIT (mode), mode);\n-  real_2expN (&epsilon_value, -GET_MODE_FBIT (mode), mode);\n+  real_2expN (&max_value, GET_MODE_IBIT (mode), VOIDmode);\n+  real_2expN (&epsilon_value, -GET_MODE_FBIT (mode), VOIDmode);\n \n   if (SIGNED_FIXED_POINT_MODE_P (mode))\n     min_value = real_value_negate (&max_value);\n@@ -127,7 +127,7 @@ fixed_from_string (FIXED_VALUE_TYPE *f, const char *str, machine_mode mode)\n       || (temp == FIXED_MAX_EPS && ALL_ACCUM_MODE_P (f->mode)))\n     warning (OPT_Woverflow,\n \t     \"large fixed-point constant implicitly truncated to fixed-point type\");\n-  real_2expN (&base_value, fbit, mode);\n+  real_2expN (&base_value, fbit, VOIDmode);\n   real_arithmetic (&fixed_value, MULT_EXPR, &real_value, &base_value);\n   wide_int w = real_to_integer (&fixed_value, &fail,\n \t\t\t\tGET_MODE_PRECISION (mode));\n@@ -158,7 +158,7 @@ fixed_to_decimal (char *str, const FIXED_VALUE_TYPE *f_orig,\n   REAL_VALUE_TYPE real_value, base_value, fixed_value;\n \n   signop sgn = UNSIGNED_FIXED_POINT_MODE_P (f_orig->mode) ? UNSIGNED : SIGNED;\n-  real_2expN (&base_value, GET_MODE_FBIT (f_orig->mode), f_orig->mode);\n+  real_2expN (&base_value, GET_MODE_FBIT (f_orig->mode), VOIDmode);\n   real_from_integer (&real_value, VOIDmode,\n \t\t     wide_int::from (f_orig->data,\n \t\t\t\t     GET_MODE_PRECISION (f_orig->mode), sgn),\n@@ -1052,7 +1052,7 @@ fixed_convert_from_real (FIXED_VALUE_TYPE *f, machine_mode mode,\n \n   real_value = *a;\n   f->mode = mode;\n-  real_2expN (&base_value, fbit, mode);\n+  real_2expN (&base_value, fbit, VOIDmode);\n   real_arithmetic (&fixed_value, MULT_EXPR, &real_value, &base_value);\n \n   wide_int w = real_to_integer (&fixed_value, &fail,\n@@ -1104,7 +1104,7 @@ real_convert_from_fixed (REAL_VALUE_TYPE *r, machine_mode mode,\n   REAL_VALUE_TYPE base_value, fixed_value, real_value;\n \n   signop sgn = UNSIGNED_FIXED_POINT_MODE_P (f->mode) ? UNSIGNED : SIGNED;\n-  real_2expN (&base_value, GET_MODE_FBIT (f->mode), f->mode);\n+  real_2expN (&base_value, GET_MODE_FBIT (f->mode), VOIDmode);\n   real_from_integer (&fixed_value, VOIDmode,\n \t\t     wide_int::from (f->data, GET_MODE_PRECISION (f->mode),\n \t\t\t\t     sgn), sgn);"}]}