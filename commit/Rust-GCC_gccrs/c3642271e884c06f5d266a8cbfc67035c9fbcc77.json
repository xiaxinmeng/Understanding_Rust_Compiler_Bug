{"sha": "c3642271e884c06f5d266a8cbfc67035c9fbcc77", "node_id": "C_kwDOANBUbNoAKGMzNjQyMjcxZTg4NGMwNmY1ZDI2NmE4Y2JmYzY3MDM1YzlmYmNjNzc", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-06-14T00:16:39Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-06-14T00:16:39Z"}, "message": "Daily bump.", "tree": {"sha": "30cf0cdd6c36868cf540b1cd2b5a8f93caa889f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30cf0cdd6c36868cf540b1cd2b5a8f93caa889f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3642271e884c06f5d266a8cbfc67035c9fbcc77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3642271e884c06f5d266a8cbfc67035c9fbcc77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3642271e884c06f5d266a8cbfc67035c9fbcc77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3642271e884c06f5d266a8cbfc67035c9fbcc77/comments", "author": null, "committer": null, "parents": [{"sha": "4f19e078ccb698cab1588f452bf00932fd4ef574", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f19e078ccb698cab1588f452bf00932fd4ef574", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f19e078ccb698cab1588f452bf00932fd4ef574"}], "stats": {"total": 246, "additions": 245, "deletions": 1}, "files": [{"sha": "26ef1b53bee7b406691799d8391200917c0f956e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3642271e884c06f5d266a8cbfc67035c9fbcc77/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3642271e884c06f5d266a8cbfc67035c9fbcc77/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c3642271e884c06f5d266a8cbfc67035c9fbcc77", "patch": "@@ -1,3 +1,101 @@\n+2022-06-13  Jason Merrill  <jason@redhat.com>\n+\n+\t* tree-cfg.cc (pass_warn_function_return::execute): Also check\n+\tBUILT_IN_TRAP.\n+\n+2022-06-13  Maciej W. Rozycki  <macro@embecosm.com>\n+\n+\t* config/riscv/riscv.md (length): Remove the explicit setting\n+\tfor \"fcmp\".\n+\n+2022-06-13  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* common/config/i386/cpuinfo.h (get_available_features): Require\n+\tAVX for F16C and VAES.\n+\n+2022-06-13  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/105927\n+\t* config/i386/predicates.md (register_no_elim_operand):\n+\tReturn true for subreg of a memory operand.\n+\n+2022-06-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* internal-fn.def (DEF_INTERNAL_INSN_FN): New macro.\n+\t(GOMP_SIMT_ENTER_ALLOC, GOMP_SIMT_EXIT, GOMP_SIMT_LANE)\n+\t(GOMP_SIMT_LAST_LANE, GOMP_SIMT_ORDERED_PRED, GOMP_SIMT_VOTE_ANY)\n+\t(GOMP_SIMT_XCHG_BFLY, GOMP_SIMT_XCHG_IDX): Use it.\n+\t* internal-fn.h (direct_internal_fn_info::directly_mapped): New\n+\tmember variable.\n+\t(direct_internal_fn_info::vectorizable): Reduce to 1 bit.\n+\t(direct_internal_fn_p): Also return true for internal functions\n+\tthat map directly to instructions defined target-insns.def.\n+\t(direct_internal_fn): Adjust comment accordingly.\n+\t* internal-fn.cc (direct_insn, optab1, optab2, vectorizable_optab1)\n+\t(vectorizable_optab2): New local macros.\n+\t(not_direct): Initialize directly_mapped.\n+\t(mask_load_direct, load_lanes_direct, mask_load_lanes_direct)\n+\t(gather_load_direct, len_load_direct, mask_store_direct)\n+\t(store_lanes_direct, mask_store_lanes_direct, vec_cond_mask_direct)\n+\t(vec_cond_direct, scatter_store_direct, len_store_direct)\n+\t(vec_set_direct, unary_direct, binary_direct, ternary_direct)\n+\t(cond_unary_direct, cond_binary_direct, cond_ternary_direct)\n+\t(while_direct, fold_extract_direct, fold_left_direct)\n+\t(mask_fold_left_direct, check_ptrs_direct): Use the macros above.\n+\t(expand_GOMP_SIMT_ENTER_ALLOC, expand_GOMP_SIMT_EXIT): Delete\n+\t(expand_GOMP_SIMT_LANE, expand_GOMP_SIMT_LAST_LANE): Likewise;\n+\t(expand_GOMP_SIMT_ORDERED_PRED, expand_GOMP_SIMT_VOTE_ANY): Likewise.\n+\t(expand_GOMP_SIMT_XCHG_BFLY, expand_GOMP_SIMT_XCHG_IDX): Likewise.\n+\t(direct_internal_fn_types): Handle functions that map to instructions\n+\tdefined in target-insns.def.\n+\t(direct_internal_fn_types): Likewise.\n+\t(direct_internal_fn_supported_p): Likewise.\n+\t(internal_fn_expanders): Likewise.\n+\n+2022-06-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* internal-fn.cc (expand_fn_using_insn): New function,\n+\tsplit out and adapted from...\n+\t(expand_direct_optab_fn): ...here.\n+\t(expand_GOMP_SIMT_ENTER_ALLOC): Use it.\n+\t(expand_GOMP_SIMT_EXIT): Likewise.\n+\t(expand_GOMP_SIMT_LANE): Likewise.\n+\t(expand_GOMP_SIMT_LAST_LANE): Likewise.\n+\t(expand_GOMP_SIMT_ORDERED_PRED): Likewise.\n+\t(expand_GOMP_SIMT_VOTE_ANY): Likewise.\n+\t(expand_GOMP_SIMT_XCHG_BFLY): Likewise.\n+\t(expand_GOMP_SIMT_XCHG_IDX): Likewise.\n+\n+2022-06-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* omp-expand.cc (expand_omp_target): Remap user provided\n+\tdevice clause arguments, -1 to -2 and -2 to -3, either\n+\tat compile time if constant, or at runtime.\n+\n+2022-06-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* common.opt (finstrument-functions): Set explicit value.\n+\t(-finstrument-functions-once): New option.\n+\t* doc/invoke.texi (Program Instrumentation Options): Document it.\n+\t* gimplify.cc (build_instrumentation_call): New static function.\n+\t(gimplify_function_tree): Call it to emit the instrumentation calls\n+\tif -finstrument-functions[-once] is specified.\n+\n+2022-06-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* dwarf2out.cc (output_one_line_info_table): Initialize prev_addr.\n+\t* gimple.h (gimple_set_location): Do not copy warning data from\n+\tthe previous location when it is UNKNOWN_LOCATION.\n+\t* optabs.cc (expand_widen_pattern_expr): Always set oprnd{1,2}.\n+\n+2022-06-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/105911\n+\t* config/i386/i386.md (*ashl<dwi>3_doubleword_mask,\n+\t*<insn><dwi>3_doubleword_mask): Use operands[3] masked with\n+\t(<MODE_SIZE> * BITS_PER_UNIT) - 1 as AND operand instead of\n+\toperands[3] unmodified.\n+\n 2022-06-12  Simon Wright  <simon@pushface.org>\n \n \tPR target/104871"}, {"sha": "f6e8eb7c21b461f6b14deca9f9108856e04a6bcf", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3642271e884c06f5d266a8cbfc67035c9fbcc77/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3642271e884c06f5d266a8cbfc67035c9fbcc77/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=c3642271e884c06f5d266a8cbfc67035c9fbcc77", "patch": "@@ -1 +1 @@\n-20220613\n+20220614"}, {"sha": "1040d4ad8640e0e38f97dc113c9143140628fbe4", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3642271e884c06f5d266a8cbfc67035c9fbcc77/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3642271e884c06f5d266a8cbfc67035c9fbcc77/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=c3642271e884c06f5d266a8cbfc67035c9fbcc77", "patch": "@@ -1,3 +1,7 @@\n+2022-06-13  Jason Merrill  <jason@redhat.com>\n+\n+\t* c-ubsan.cc (ubsan_instrument_return): Use BUILTINS_LOCATION.\n+\n 2022-05-27  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/90658"}, {"sha": "a62caa2f4ed04dc24185ac522594a2a82463dea4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3642271e884c06f5d266a8cbfc67035c9fbcc77/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3642271e884c06f5d266a8cbfc67035c9fbcc77/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c3642271e884c06f5d266a8cbfc67035c9fbcc77", "patch": "@@ -1,3 +1,13 @@\n+2022-06-13  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* module.cc (module_state::write): Separate to ...\n+\t(module_state::write_begin, module_state::write_end): ...\n+\tthese.\n+\t(module_state::write_readme): Drop extensions parameter.\n+\t(struct module_processing_cookie): Add more fields.\n+\t(finish_module_processing): Adjust state writing call.\n+\t(late_finish_module): Call write_end.\n+\n 2022-06-10  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/65328"}, {"sha": "d84ac23702a95c7fdd2560e8da37aab2d4dadf45", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3642271e884c06f5d266a8cbfc67035c9fbcc77/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3642271e884c06f5d266a8cbfc67035c9fbcc77/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=c3642271e884c06f5d266a8cbfc67035c9fbcc77", "patch": "@@ -1,3 +1,34 @@\n+2022-06-13  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-builtins.cc: Include builtins.h.\n+\t(gcc_builtins_libfuncs): Remove.\n+\t(strip_type_modifiers): New function.\n+\t(matches_builtin_type): New function.\n+\t(covariant_with_builtin_type_p): New function.\n+\t(maybe_set_builtin_1): Set front-end built-in if identifier matches\n+\tgcc built-in name.  Apply user-specified attributes and assembler name\n+\toverrides to the built-in.  Warn about built-in declaration mismatches.\n+\t(d_builtin_function): Set IDENTIFIER_DECL_TREE of built-in functions.\n+\t* d-compiler.cc (Compiler::onParseModule): Scan all modules for any\n+\tidentifiers that match built-in function names.\n+\t* lang.opt (Wbuiltin-declaration-mismatch): New option.\n+\n+2022-06-13  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-tree.h (check_typeinfo_type): Add Expression* parameter.\n+\t(build_typeinfo): Likewise.  Declare new override.\n+\t* expr.cc (ExprVisitor): Call build_typeinfo with Expression*.\n+\t* typeinfo.cc (check_typeinfo_type): Include expression in the\n+\tdiagnostic message.\n+\t(build_typeinfo): New override.\n+\n+2022-06-13  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* dmd/MERGE: Merge upstream dmd 821ed393d.\n+\t* expr.cc (ExprVisitor::visit (NewExp *)): Remove handled of\n+\tallocating `@nogc' throwable object.\n+\t* runtime.def (NEWTHROW): Remove.\n+\n 2022-06-02  David Malcolm  <dmalcolm@redhat.com>\n \n \t* d-lang.cc (d_get_sarif_source_language): New."}, {"sha": "e50c90b325dbf20c8d6b414cf2c4dc8680ecfc32", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3642271e884c06f5d266a8cbfc67035c9fbcc77/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3642271e884c06f5d266a8cbfc67035c9fbcc77/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c3642271e884c06f5d266a8cbfc67035c9fbcc77", "patch": "@@ -1,3 +1,40 @@\n+2022-06-13  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/ubsan/return-8.C: New test.\n+\n+2022-06-13  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/105927\n+\t* gcc.target/i386/pr105927.c: New test.\n+\n+2022-06-13  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* gdc.dg/Wbuiltin_declaration_mismatch.d: New test.\n+\t* gdc.dg/builtins.d: New test.\n+\n+2022-06-13  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* gdc.dg/rtti1.d: New test.\n+\n+2022-06-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.dg/instrument-4.c: New test.\n+\n+2022-06-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* c-c++-common/nonnull-1.c: Remove XFAIL for C++.\n+\n+2022-06-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/105911\n+\t* gcc.dg/pr105911.c: New test.\n+\n+2022-06-13  Cui,Lili  <lili.cui@intel.com>\n+\n+\t* gcc.dg/vect/costmodel/x86_64/costmodel-pr104582-2.c: Add\n+\t-mtune=generic to dg-options.\n+\t* gcc.target/i386/pr84101.c: Likewise.\n+\n 2022-06-12  Max Filippov  <jcmvbkbc@gmail.com>\n \n \t* g++.target/xtensa/pr95571.C (__xtensa_libgcc_window_spill):"}, {"sha": "4eab21e0e6a6b75573c1df5a658f525ce4562ba4", "filename": "include/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3642271e884c06f5d266a8cbfc67035c9fbcc77/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3642271e884c06f5d266a8cbfc67035c9fbcc77/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=c3642271e884c06f5d266a8cbfc67035c9fbcc77", "patch": "@@ -1,3 +1,7 @@\n+2022-06-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gomp-constants.h (GOMP_DEVICE_INVALID): Define.\n+\n 2022-05-31  Alan Modra  <amodra@gmail.com>\n \n \t* dwarf2.def: Correct spelling of DW_AT_namelist_item."}, {"sha": "245977060a1d00fa5133ea52144fa7030f2e20a5", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3642271e884c06f5d266a8cbfc67035c9fbcc77/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3642271e884c06f5d266a8cbfc67035c9fbcc77/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=c3642271e884c06f5d266a8cbfc67035c9fbcc77", "patch": "@@ -1,3 +1,43 @@\n+2022-06-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* omp.h.in (omp_initial_device, omp_invalid_device): New enumerators.\n+\t* omp_lib.f90.in (omp_initial_device, omp_invalid_device): New\n+\tparameters.\n+\t* omp_lib.h.in (omp_initial_device, omp_invalid_device): Likewise.\n+\t* target.c (resolve_device): Add remapped argument, handle\n+\tGOMP_DEVICE_ICV only if remapped is true (and clear remapped),\n+\tfor negative values, treat GOMP_DEVICE_FALLBACK as fallback only\n+\tif remapped, otherwise treat omp_initial_device that way.  For\n+\tomp_invalid_device, always emit gomp_fatal, even when\n+\tOMP_TARGET_OFFLOAD isn't mandatory.\n+\t(GOMP_target, GOMP_target_ext, GOMP_target_data, GOMP_target_data_ext,\n+\tGOMP_target_update, GOMP_target_update_ext,\n+\tGOMP_target_enter_exit_data): Pass true as remapped argument to\n+\tresolve_device.\n+\t(omp_target_alloc, omp_target_free, omp_target_is_present,\n+\tomp_target_memcpy_check, omp_target_associate_ptr,\n+\tomp_target_disassociate_ptr, omp_get_mapped_ptr,\n+\tomp_target_is_accessible): Pass false as remapped argument to\n+\tresolve_device.  Treat omp_initial_device the same as\n+\tgomp_get_num_devices ().  Don't bypass resolve_device calls if\n+\tdevice_num is negative.\n+\t(omp_pause_resource): Treat omp_initial_device the same as\n+\tgomp_get_num_devices ().  Call resolve_device.\n+\t* icv-device.c (omp_set_default_device): Always set to device_num\n+\teven when it is negative.\n+\t* libgomp.texi: Document that Conforming device numbers,\n+\tomp_initial_device and omp_invalid_device is implemented.\n+\t* testsuite/libgomp.c/target-41.c (main): Add test with\n+\tomp_initial_device.\n+\t* testsuite/libgomp.c/target-45.c: New test.\n+\t* testsuite/libgomp.c/target-46.c: New test.\n+\t* testsuite/libgomp.c/target-47.c: New test.\n+\t* testsuite/libgomp.c-c++-common/target-is-accessible-1.c (main): Add\n+\ttest with omp_initial_device.  Use -5 instead of -1 for negative value\n+\ttest.\n+\t* testsuite/libgomp.fortran/target-is-accessible-1.f90 (main):\n+\tLikewise.  Reorder stop numbers.\n+\n 2022-06-10  Jakub Jelinek  <jakub@redhat.com>\n \n \t* allocator.c (gomp_init_memkind): Call dlopen with \"libmemkind.so.0\""}, {"sha": "e56f2f250163af21d893789ee070511ce32f059e", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3642271e884c06f5d266a8cbfc67035c9fbcc77/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3642271e884c06f5d266a8cbfc67035c9fbcc77/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=c3642271e884c06f5d266a8cbfc67035c9fbcc77", "patch": "@@ -1,3 +1,11 @@\n+2022-06-13  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* libdruntime/MERGE: Merge upstream druntime 454471d8.\n+\t* libdruntime/Makefile.am (DRUNTIME_DSOURCES): Add\n+\tcore/sync/package.d.\n+\t* libdruntime/Makefile.in: Regenerate.\n+\t* src/MERGE: Merge upstream phobos 1206fc94f.\n+\n 2022-06-02  David Malcolm  <dmalcolm@redhat.com>\n \n \t* testsuite/lib/libphobos-dg.exp: Add load_gcc_lib of scansarif.exp."}, {"sha": "42111d830d82a56b8838ec07ca65b0f10b97b649", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3642271e884c06f5d266a8cbfc67035c9fbcc77/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3642271e884c06f5d266a8cbfc67035c9fbcc77/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c3642271e884c06f5d266a8cbfc67035c9fbcc77", "patch": "@@ -1,3 +1,15 @@\n+2022-06-13  Mark Mentovai  <mark@mentovai.com>\n+\n+\t* include/experimental/bits/fs_path.h (__detail::__null_terminated):\n+\tRename to __nul_terminated to avoid colliding with a macro in\n+\tApple's SDK.\n+\n+2022-06-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/atomic (__atomic_val_t): Use __type_identity_t\n+\tinstead of atomic<T>::value_type, as per LWG 3220.\n+\t* testsuite/29_atomics/atomic/lwg3220.cc: New test.\n+\n 2022-06-10  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/105844"}]}