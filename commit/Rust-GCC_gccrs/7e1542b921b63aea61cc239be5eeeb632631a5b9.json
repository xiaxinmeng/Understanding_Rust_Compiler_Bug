{"sha": "7e1542b921b63aea61cc239be5eeeb632631a5b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2UxNTQyYjkyMWI2M2FlYTYxY2MyMzliZTVlZWViNjMyNjMxYTViOQ==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2010-02-26T17:09:29Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2010-02-26T17:09:29Z"}, "message": "re PR c/20631 (Support -std=c90 as alias for -std=c89)\n\n2010-02-26  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR c/20631\n\t* doc/cpp.texi: Use c90 instead of c89 and gnu90 instead of gnu89.\n\t* doc/standards.texi: Likewise.\n\t* doc/extend.texi: Likewise.\n\t* doc/trouble.texi: Likewise.\n\t* doc/cppopts.texi: Likewise. \n\t* doc/install.texi: Likewise.\n\t* c.opt (std=c90,std=gnu90): New options.\n\t* c-opts.c (c_common_handle_option): Handle them.\ntestsuite/\n\t* gcc.dg/cpp/c90-pedantic.c: New.\n\t* gcc.dg/cpp/c90.c: New.\n\t* gcc.dg/gnu90-const-expr-1.c: New.\n\t* gcc.dg/Woverlength-strings-pedantic-c90.c: New.\n\nFrom-SVN: r157096", "tree": {"sha": "a275d8dedbbb1c786a414966d5eb5590a5ad6f80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a275d8dedbbb1c786a414966d5eb5590a5ad6f80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e1542b921b63aea61cc239be5eeeb632631a5b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e1542b921b63aea61cc239be5eeeb632631a5b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e1542b921b63aea61cc239be5eeeb632631a5b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e1542b921b63aea61cc239be5eeeb632631a5b9/comments", "author": null, "committer": null, "parents": [{"sha": "0b901e4cdc55c0c05f72cfac03c25aea6f602d9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b901e4cdc55c0c05f72cfac03c25aea6f602d9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b901e4cdc55c0c05f72cfac03c25aea6f602d9e"}], "stats": {"total": 222, "additions": 176, "deletions": 46}, "files": [{"sha": "07fae6a657b512985c5a9188c3dd5e60b0d4d054", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e1542b921b63aea61cc239be5eeeb632631a5b9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e1542b921b63aea61cc239be5eeeb632631a5b9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7e1542b921b63aea61cc239be5eeeb632631a5b9", "patch": "@@ -1,3 +1,15 @@\n+2010-02-26  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c/20631\n+\t* doc/cpp.texi: Use c90 instead of c89 and gnu90 instead of gnu89.\n+\t* doc/standards.texi: Likewise.\n+\t* doc/extend.texi: Likewise.\n+\t* doc/trouble.texi: Likewise.\n+\t* doc/cppopts.texi: Likewise. \n+\t* doc/install.texi: Likewise.\n+\t* c.opt (std=c90,std=gnu90): New options.\n+\t* c-opts.c (c_common_handle_option): Handle them.\n+\n 2010-02-26  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR c/24577"}, {"sha": "47acceda386c3b58e2259f5ec7decf066b5da7e3", "filename": "gcc/c-opts.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e1542b921b63aea61cc239be5eeeb632631a5b9/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e1542b921b63aea61cc239be5eeeb632631a5b9/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=7e1542b921b63aea61cc239be5eeeb632631a5b9", "patch": "@@ -952,13 +952,15 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       break;\n \n     case OPT_std_c89:\n+    case OPT_std_c90:\n     case OPT_std_iso9899_1990:\n     case OPT_std_iso9899_199409:\n       if (!preprocessing_asm_p)\n \tset_std_c89 (code == OPT_std_iso9899_199409 /* c94 */, true /* ISO */);\n       break;\n \n     case OPT_std_gnu89:\n+    case OPT_std_gnu90:\n       if (!preprocessing_asm_p)\n \tset_std_c89 (false /* c94 */, false /* ISO */);\n       break;"}, {"sha": "ec600f5dc4d9ff4af673d9cf532f5ac7ba1dca3b", "filename": "gcc/c.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e1542b921b63aea61cc239be5eeeb632631a5b9/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e1542b921b63aea61cc239be5eeeb632631a5b9/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=7e1542b921b63aea61cc239be5eeeb632631a5b9", "patch": "@@ -965,6 +965,10 @@ std=c89\n C ObjC\n Conform to the ISO 1990 C standard\n \n+std=c90\n+C ObjC\n+Conform to the ISO 1990 C standard\n+\n std=c99\n C ObjC\n Conform to the ISO 1999 C standard\n@@ -988,6 +992,10 @@ std=gnu89\n C ObjC\n Conform to the ISO 1990 C standard with GNU extensions\n \n+std=gnu90\n+C ObjC\n+Conform to the ISO 1990 C standard with GNU extensions\n+\n std=gnu99\n C ObjC\n Conform to the ISO 1999 C standard with GNU extensions"}, {"sha": "a9941780755280602400830f6d69e6292ff6b8d1", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e1542b921b63aea61cc239be5eeeb632631a5b9/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e1542b921b63aea61cc239be5eeeb632631a5b9/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=7e1542b921b63aea61cc239be5eeeb632631a5b9", "patch": "@@ -215,7 +215,7 @@ Standard C@.  In its default mode, the GNU C preprocessor does not do a\n few things required by the standard.  These are features which are\n rarely, if ever, used, and may cause surprising changes to the meaning\n of a program which does not expect them.  To get strict ISO Standard C,\n-you should use the @option{-std=c89} or @option{-std=c99} options, depending\n+you should use the @option{-std=c90} or @option{-std=c99} options, depending\n on which version of the standard you want.  To get all the mandatory\n diagnostics, you must also use @option{-pedantic}.  @xref{Invocation}.\n \n@@ -2064,7 +2064,7 @@ are defined.  If they are defined, their value is 1.\n \n @item __GNUC_GNU_INLINE__\n GCC defines this macro if functions declared @code{inline} will be\n-handled in GCC's traditional gnu89 mode.  Object files will contain\n+handled in GCC's traditional gnu90 mode.  Object files will contain\n externally visible definitions of all functions declared @code{inline}\n without @code{extern} or @code{static}.  They will not contain any\n definitions of any functions declared @code{extern inline}.\n@@ -2077,10 +2077,10 @@ inline}.  They will not contain definitions of any functions declared\n @code{inline} without @code{extern}.\n \n If this macro is defined, GCC supports the @code{gnu_inline} function\n-attribute as a way to always get the gnu89 behavior.  Support for\n+attribute as a way to always get the gnu90 behavior.  Support for\n this and @code{__GNUC_GNU_INLINE__} was added in GCC 4.1.3.  If\n neither macro is defined, an older version of GCC is being used:\n-@code{inline} functions will be compiled in gnu89 mode, and the\n+@code{inline} functions will be compiled in gnu90 mode, and the\n @code{gnu_inline} function attribute will not be recognized.\n \n @item __CHAR_UNSIGNED__"}, {"sha": "78785e076dd2b8d79f6a0842e10ba6f722618d1e", "filename": "gcc/doc/cppopts.texi", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e1542b921b63aea61cc239be5eeeb632631a5b9/gcc%2Fdoc%2Fcppopts.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e1542b921b63aea61cc239be5eeeb632631a5b9/gcc%2Fdoc%2Fcppopts.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppopts.texi?ref=7e1542b921b63aea61cc239be5eeeb632631a5b9", "patch": "@@ -374,12 +374,13 @@ knows about C and C++ standards; others may be added in the future.\n @var{standard}\n may be one of:\n @table @code\n-@item iso9899:1990\n+@item c90\n @itemx c89\n-The ISO C standard from 1990.  @samp{c89} is the customary shorthand for\n+@itemx iso9899:1990\n+The ISO C standard from 1990.  @samp{c90} is the customary shorthand for\n this version of the standard.\n \n-The @option{-ansi} option is equivalent to @option{-std=c89}.\n+The @option{-ansi} option is equivalent to @option{-std=c90}.\n \n @item iso9899:199409\n The 1990 C standard, as amended in 1994.\n@@ -391,7 +392,8 @@ The 1990 C standard, as amended in 1994.\n The revised ISO C standard, published in December 1999.  Before\n publication, this was known as C9X@.\n \n-@item gnu89\n+@item gnu90\n+@itemx gnu89\n The 1990 C standard plus GNU extensions.  This is the default.\n \n @item gnu99"}, {"sha": "f471c2318cb613adeaa9df98dae3673716ef5217", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e1542b921b63aea61cc239be5eeeb632631a5b9/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e1542b921b63aea61cc239be5eeeb632631a5b9/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=7e1542b921b63aea61cc239be5eeeb632631a5b9", "patch": "@@ -21,8 +21,8 @@ These extensions are available in C and Objective-C@.  Most of them are\n also available in C++.  @xref{C++ Extensions,,Extensions to the\n C++ Language}, for extensions that apply @emph{only} to C++.\n \n-Some features that are in ISO C99 but not C89 or C++ are also, as\n-extensions, accepted by GCC in C89 mode and in C++.\n+Some features that are in ISO C99 but not C90 or C++ are also, as\n+extensions, accepted by GCC in C90 mode and in C++.\n \n @menu\n * Statement Exprs::     Putting statements and declarations inside expressions.\n@@ -813,7 +813,7 @@ effects of recomputing it.\n @cindex @code{ULL} integer suffix\n \n ISO C99 supports data types for integers that are at least 64 bits wide,\n-and as an extension GCC supports them in C89 mode and in C++.\n+and as an extension GCC supports them in C90 mode and in C++.\n Simply write @code{long long int} for a signed integer, or\n @code{unsigned long long int} for an unsigned integer.  To make an\n integer constant of type @code{long long int}, add the suffix @samp{LL}\n@@ -843,7 +843,7 @@ Likewise, if the function expects @code{long long int} and you pass\n @cindex @code{__complex__} keyword\n \n ISO C99 supports complex floating data types, and as an extension GCC\n-supports them in C89 mode and in C++, and supports complex integer data\n+supports them in C90 mode and in C++, and supports complex integer data\n types which are not part of ISO C99.  You can declare complex types\n using the keyword @code{_Complex}.  As an extension, the older GNU\n keyword @code{__complex__} is also supported.\n@@ -1032,7 +1032,7 @@ are supported by the DWARF2 debug information format.\n ISO C99 supports floating-point numbers written not only in the usual\n decimal notation, such as @code{1.55e1}, but also numbers such as\n @code{0x1.fp3} written in hexadecimal format.  As a GNU extension, GCC\n-supports this in C89 mode (except in some cases when strictly\n+supports this in C90 mode (except in some cases when strictly\n conforming) and in C++.  In that format the\n @samp{0x} hex introducer and the @samp{p} or @samp{P} exponent field are\n mandatory.  The exponent is a decimal number that indicates the power of\n@@ -1345,7 +1345,7 @@ member of type @code{char}.\n @cindex VLAs\n \n Variable-length automatic arrays are allowed in ISO C99, and as an\n-extension GCC accepts them in C89 mode and in C++.  (However, GCC's\n+extension GCC accepts them in C90 mode and in C++.  (However, GCC's\n implementation of variable-length arrays does not yet conform in detail\n to the ISO C99 standard.)  These arrays are\n declared like any other automatic arrays, but with a length that is not\n@@ -1511,9 +1511,9 @@ In ISO C99, arrays that are not lvalues still decay to pointers, and\n may be subscripted, although they may not be modified or used after\n the next sequence point and the unary @samp{&} operator may not be\n applied to them.  As an extension, GCC allows such arrays to be\n-subscripted in C89 mode, though otherwise they do not decay to\n+subscripted in C90 mode, though otherwise they do not decay to\n pointers outside C99 mode.  For example,\n-this is valid in GNU C though not valid in C89:\n+this is valid in GNU C though not valid in C90:\n \n @smallexample\n @group\n@@ -1576,7 +1576,7 @@ ISO C99 supports compound literals.  A compound literal looks like\n a cast containing an initializer.  Its value is an object of the\n type specified in the cast, containing the elements specified in\n the initializer; it is an lvalue.  As an extension, GCC supports\n-compound literals in C89 mode and in C++.\n+compound literals in C90 mode and in C++.\n \n Usually, the specified type is a structure.  Assume that\n @code{struct foo} and @code{structure} are declared as shown:\n@@ -1646,13 +1646,13 @@ static int z[] = @{1, 0, 0@};\n @cindex case labels in initializers\n @cindex designated initializers\n \n-Standard C89 requires the elements of an initializer to appear in a fixed\n+Standard C90 requires the elements of an initializer to appear in a fixed\n order, the same as the order of the elements in the array or structure\n being initialized.\n \n In ISO C99 you can give the elements in any order, specifying the array\n indices or structure field names they apply to, and GNU C allows this as\n-an extension in C89 mode as well.  This extension is not\n+an extension in C90 mode as well.  This extension is not\n implemented in GNU C++.\n \n To specify an array index, write\n@@ -1869,7 +1869,7 @@ hack ((union foo) x);\n \n ISO C99 and ISO C++ allow declarations and code to be freely mixed\n within compound statements.  As an extension, GCC also allows this in\n-C89 mode.  For example, you could do:\n+C90 mode.  For example, you could do:\n \n @smallexample\n int i;\n@@ -2006,7 +2006,7 @@ if no optimization level was specified.\n @cindex @code{gnu_inline} function attribute\n This attribute should be used with a function which is also declared\n with the @code{inline} keyword.  It directs GCC to treat the function\n-as if it were defined in gnu89 mode even when compiling in C99 or\n+as if it were defined in gnu90 mode even when compiling in C99 or\n gnu99 mode.\n \n If the function is declared @code{extern}, then this definition of the\n@@ -3837,7 +3837,7 @@ continue until the end of the line.  Many other C implementations allow\n such comments, and they are included in the 1999 C standard.  However,\n C++ style comments are not recognized if you specify an @option{-std}\n option specifying a version of ISO C before C99, or @option{-ansi}\n-(equivalent to @option{-std=c89}).\n+(equivalent to @option{-std=c90}).\n \n @node Dollar Signs\n @section Dollar Signs in Identifier Names\n@@ -4938,7 +4938,7 @@ inc (int *a)\n @}\n @end smallexample\n \n-If you are writing a header file to be included in ISO C89 programs, write\n+If you are writing a header file to be included in ISO C90 programs, write\n @code{__inline__} instead of @code{inline}.  @xref{Alternate Keywords}.\n \n The three types of inlining behave similarly in two important cases:\n@@ -5001,7 +5001,7 @@ the @samp{always_inline} attribute for the function, like this:\n inline void foo (const char) __attribute__((always_inline));\n @end smallexample\n \n-The remainder of this section is specific to GNU C89 inlining.\n+The remainder of this section is specific to GNU C90 inlining.\n \n @cindex non-static inline function\n When an inline function is not @code{static}, then the compiler must assume\n@@ -6844,7 +6844,7 @@ be emitted.\n \n @opindex ansi\n @opindex std\n-Outside strict ISO C mode (@option{-ansi}, @option{-std=c89} or\n+Outside strict ISO C mode (@option{-ansi}, @option{-std=c90} or\n @option{-std=c99}), the functions\n @code{_exit}, @code{alloca}, @code{bcmp}, @code{bzero},\n @code{dcgettext}, @code{dgettext}, @code{dremf}, @code{dreml},\n@@ -6867,7 +6867,7 @@ Outside strict ISO C mode (@option{-ansi}, @option{-std=c89} or\n @code{yn}\n may be handled as built-in functions.\n All these functions have corresponding versions\n-prefixed with @code{__builtin_}, which may be used even in strict C89\n+prefixed with @code{__builtin_}, which may be used even in strict C90\n mode.\n \n The ISO C99 functions\n@@ -6911,7 +6911,7 @@ The ISO C99 functions\n @code{tgamma}, @code{truncf}, @code{truncl}, @code{trunc},\n @code{vfscanf}, @code{vscanf}, @code{vsnprintf} and @code{vsscanf}\n are handled as built-in functions\n-except in strict ISO C90 mode (@option{-ansi} or @option{-std=c89}).\n+except in strict ISO C90 mode (@option{-ansi} or @option{-std=c90}).\n \n There are also built-in versions of the ISO C99 functions\n @code{acosf}, @code{acosl}, @code{asinf}, @code{asinl}, @code{atan2f},\n@@ -6933,7 +6933,7 @@ The ISO C94 functions\n @code{iswspace}, @code{iswupper}, @code{iswxdigit}, @code{towlower} and\n @code{towupper}\n are handled as built-in functions\n-except in strict ISO C90 mode (@option{-ansi} or @option{-std=c89}).\n+except in strict ISO C90 mode (@option{-ansi} or @option{-std=c90}).\n \n The ISO C90 functions\n @code{abort}, @code{abs}, @code{acos}, @code{asin}, @code{atan2},"}, {"sha": "5caaf9f85afb0d795173c2ceb3e277bc149b1c7c", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e1542b921b63aea61cc239be5eeeb632631a5b9/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e1542b921b63aea61cc239be5eeeb632631a5b9/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=7e1542b921b63aea61cc239be5eeeb632631a5b9", "patch": "@@ -4126,11 +4126,11 @@ release.\n Sun bug 4296832 turns up when compiling X11 headers with GCC 2.95 or\n newer: @command{g++} will complain that types are missing.  These headers\n assume that omitting the type means @code{int}; this assumption worked for\n-C89 but is wrong for C++, and is now wrong for C99 also.\n+C90 but is wrong for C++, and is now wrong for C99 also.\n \n @command{g++} accepts such (invalid) constructs with the option\n @option{-fpermissive}; it will assume that any missing type is @code{int}\n-(as defined by C89).\n+(as defined by C90).\n \n There are patches for Solaris 7 (108376-21 or newer for SPARC,\n 108377-20 for Intel), and Solaris 8 (108652-24 or newer for SPARC,"}, {"sha": "6a6bd92024efb9ea2e5f1dd11561b910d963251e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e1542b921b63aea61cc239be5eeeb632631a5b9/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e1542b921b63aea61cc239be5eeeb632631a5b9/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=7e1542b921b63aea61cc239be5eeeb632631a5b9", "patch": "@@ -1425,7 +1425,7 @@ accepts:\n @cindex ISO support\n @item -ansi\n @opindex ansi\n-In C mode, this is equivalent to @samp{-std=c89}. In C++ mode, it is\n+In C mode, this is equivalent to @samp{-std=c90}. In C++ mode, it is\n equivalent to @samp{-std=c++98}.\n \n This turns off certain features of GCC that are incompatible with ISO\n@@ -1467,12 +1467,12 @@ Determine the language standard. @xref{Standards,,Language Standards\n Supported by GCC}, for details of these standard versions.  This option\n is currently only supported when compiling C or C++.\n \n-The compiler can accept several base standards, such as @samp{c89} or\n+The compiler can accept several base standards, such as @samp{c90} or\n @samp{c++98}, and GNU dialects of those standards, such as\n-@samp{gnu89} or @samp{gnu++98}.  By specifying a base standard, the\n+@samp{gnu90} or @samp{gnu++98}.  By specifying a base standard, the\n compiler will accept all programs following that standard and those\n using GNU extensions that do not contradict it.  For example,\n-@samp{-std=c89} turns off certain features of GCC that are\n+@samp{-std=c90} turns off certain features of GCC that are\n incompatible with ISO C90, such as the @code{asm} and @code{typeof}\n keywords, but not other GNU extensions that do not have a meaning in\n ISO C90, such as omitting the middle term of a @code{?:}\n@@ -1482,13 +1482,14 @@ those features change the meaning of the base standard and some\n strict-conforming programs may be rejected.  The particular standard\n is used by @option{-pedantic} to identify which features are GNU\n extensions given that version of the standard. For example\n-@samp{-std=gnu89 -pedantic} would warn about C++ style @samp{//}\n+@samp{-std=gnu90 -pedantic} would warn about C++ style @samp{//}\n comments, while @samp{-std=gnu99 -pedantic} would not.\n \n A value for this option must be provided; possible values are\n \n @table @samp\n-@item c89\n+@item c90\n+@itemx c89\n @itemx iso9899:1990\n Support all ISO C90 programs (certain GNU extensions that conflict\n with ISO C90 are disabled). Same as @option{-ansi} for C code.\n@@ -1504,7 +1505,8 @@ ISO C99.  Note that this standard is not yet fully supported; see\n @w{@uref{http://gcc.gnu.org/c99status.html}} for more information.  The\n names @samp{c9x} and @samp{iso9899:199x} are deprecated.\n \n-@item gnu89\n+@item gnu90\n+@itemx gnu89\n GNU dialect of ISO C90 (including some C99 features). This\n is the default for C code.\n \n@@ -1547,7 +1549,8 @@ C99 mode.  Using this option is roughly equivalent to adding the\n The option @option{-fno-gnu89-inline} explicitly tells GCC to use the\n C99 semantics for @code{inline} when in C99 or gnu99 mode (i.e., it\n specifies the default behavior).  This option was first supported in\n-GCC 4.3.  This option is not supported in C89 or gnu89 mode.\n+GCC 4.3.  This option is not supported in @option{-std=c90} or\n+@option{-std=gnu90} mode.\n \n The preprocessor macros @code{__GNUC_GNU_INLINE__} and\n @code{__GNUC_STDC_INLINE__} may be used to check which semantics are\n@@ -2842,7 +2845,7 @@ be quite different from @option{-pedantic}.  We don't have plans to\n support such a feature in the near future.\n \n Where the standard specified with @option{-std} represents a GNU\n-extended dialect of C, such as @samp{gnu89} or @samp{gnu99}, there is a\n+extended dialect of C, such as @samp{gnu90} or @samp{gnu99}, there is a\n corresponding @dfn{base standard}, the version of ISO C on which the GNU\n extended dialect is based.  Warnings from @option{-pedantic} are given\n where they are required by the base standard.  (It would not make sense\n@@ -4342,7 +4345,7 @@ standard's minimum limit, but very portable programs should avoid\n using longer strings.\n \n The limit applies @emph{after} string constant concatenation, and does\n-not count the trailing NUL@.  In C89, the limit was 509 characters; in\n+not count the trailing NUL@.  In C90, the limit was 509 characters; in\n C99, it was raised to 4095.  C++98 does not specify a normative\n minimum maximum, so we do not diagnose overlength strings in C++@.\n \n@@ -5955,7 +5958,7 @@ release to an another.\n In C, emit @code{static} functions that are declared @code{inline}\n into the object file, even if the function has been inlined into all\n of its callers.  This switch does not affect functions using the\n-@code{extern inline} extension in GNU C89@.  In C++, emit any and all\n+@code{extern inline} extension in GNU C90@.  In C++, emit any and all\n inline functions into the object file.\n \n @item -fkeep-static-consts"}, {"sha": "d71cc1601439467673190d15127a2684c55c836a", "filename": "gcc/doc/standards.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e1542b921b63aea61cc239be5eeeb632631a5b9/gcc%2Fdoc%2Fstandards.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e1542b921b63aea61cc239be5eeeb632631a5b9/gcc%2Fdoc%2Fstandards.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fstandards.texi?ref=7e1542b921b63aea61cc239be5eeeb632631a5b9", "patch": "@@ -63,7 +63,7 @@ This standard, in both its forms, is commonly known as @dfn{C89}, or\n occasionally as @dfn{C90}, from the dates of ratification.  The ANSI\n standard, but not the ISO standard, also came with a Rationale\n document.  To select this standard in GCC, use one of the options\n-@option{-ansi}, @option{-std=c89} or @option{-std=iso9899:1990}; to obtain\n+@option{-ansi}, @option{-std=c90} or @option{-std=iso9899:1990}; to obtain\n all the diagnostics required by the standard, you should also specify\n @option{-pedantic} (or @option{-pedantic-errors} if you want them to be\n errors rather than warnings).  @xref{C Dialect Options,,Options\n@@ -99,12 +99,12 @@ Extensions,,Extensions to the C Language Family}.  Use of the\n @option{-std} options listed above will disable these extensions where\n they conflict with the C standard version selected.  You may also\n select an extended version of the C language explicitly with\n-@option{-std=gnu89} (for C89 with GNU extensions) or @option{-std=gnu99}\n+@option{-std=gnu90} (for C90 with GNU extensions) or @option{-std=gnu99}\n (for C99 with GNU extensions).  The default, if no C language dialect\n-options are given, is @option{-std=gnu89}; this will change to\n+options are given, is @option{-std=gnu90}; this will change to\n @option{-std=gnu99} in some future release when the C99 support is\n complete.  Some features that are part of the C99 standard are\n-accepted as extensions in C89 mode.\n+accepted as extensions in C90 mode.\n \n The ISO C standard defines (in clause 4) two classes of conforming\n implementation.  A @dfn{conforming hosted implementation} supports the"}, {"sha": "097946b2d49fad88f246193760dbf2439fd79c22", "filename": "gcc/doc/trouble.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e1542b921b63aea61cc239be5eeeb632631a5b9/gcc%2Fdoc%2Ftrouble.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e1542b921b63aea61cc239be5eeeb632631a5b9/gcc%2Fdoc%2Ftrouble.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftrouble.texi?ref=7e1542b921b63aea61cc239be5eeeb632631a5b9", "patch": "@@ -467,7 +467,7 @@ requires that this be treated as erroneous.\n A @dfn{preprocessing token} is a @dfn{preprocessing number} if it\n begins with a digit and is followed by letters, underscores, digits,\n periods and @samp{e+}, @samp{e-}, @samp{E+}, @samp{E-}, @samp{p+},\n-@samp{p-}, @samp{P+}, or @samp{P-} character sequences.  (In strict C89\n+@samp{p-}, @samp{P+}, or @samp{P-} character sequences.  (In strict C90\n mode, the sequences @samp{p+}, @samp{p-}, @samp{P+} and @samp{P-} cannot\n appear in preprocessing numbers.)\n "}, {"sha": "019a391918aa1cffc87604acff4694042e18125e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e1542b921b63aea61cc239be5eeeb632631a5b9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e1542b921b63aea61cc239be5eeeb632631a5b9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7e1542b921b63aea61cc239be5eeeb632631a5b9", "patch": "@@ -1,3 +1,11 @@\n+2010-02-26  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c/20631\n+\t* gcc.dg/cpp/c90-pedantic.c: New.\n+\t* gcc.dg/cpp/c90.c: New.\n+\t* gcc.dg/gnu90-const-expr-1.c: New.\n+\t* gcc.dg/Woverlength-strings-pedantic-c90.c: New.\n+\n 2010-02-26  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/43186"}, {"sha": "94264f3b14d15e025dad50e9bcafe827665410fb", "filename": "gcc/testsuite/gcc.dg/Woverlength-strings-pedantic-c90.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e1542b921b63aea61cc239be5eeeb632631a5b9/gcc%2Ftestsuite%2Fgcc.dg%2FWoverlength-strings-pedantic-c90.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e1542b921b63aea61cc239be5eeeb632631a5b9/gcc%2Ftestsuite%2Fgcc.dg%2FWoverlength-strings-pedantic-c90.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWoverlength-strings-pedantic-c90.c?ref=7e1542b921b63aea61cc239be5eeeb632631a5b9", "patch": "@@ -0,0 +1,19 @@\n+/* -Woverlength-strings complains about string constants which are too long\n+   for the C standard's \"minimum maximum\" limits.  It is off by default,\n+   but implied by -pedantic.  */\n+\n+/* { dg-options \"-std=c90 -pedantic\" } */\n+\n+#define TEN \"xxxxxxxxxx\"\n+#define HUN TEN TEN TEN TEN TEN  TEN TEN TEN TEN TEN\n+#define THO HUN HUN HUN HUN HUN  HUN HUN HUN HUN HUN\n+\n+/* C89's minimum-maximum is 509. */\n+const char x510[] = HUN HUN HUN HUN HUN TEN; /* { dg-warning \"greater than\" } */\n+\n+/* C99's minimum-maximum is 4095.  */\n+const char x4096[] =\n+  THO THO THO THO     /* 4000 */\n+  TEN TEN TEN TEN TEN /* 4050 */\n+  TEN TEN TEN TEN     /* 4090 */\n+  \"123456\";  /* { dg-warning \"greater than\" } */"}, {"sha": "3d6c82fc8856d4960e5b1218b64070d9cbbb006c", "filename": "gcc/testsuite/gcc.dg/cpp/c90-pedantic.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e1542b921b63aea61cc239be5eeeb632631a5b9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc90-pedantic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e1542b921b63aea61cc239be5eeeb632631a5b9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc90-pedantic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc90-pedantic.c?ref=7e1542b921b63aea61cc239be5eeeb632631a5b9", "patch": "@@ -0,0 +1,10 @@\n+/* Copyright (C) 2000 Free Software Foundation, Inc.  */\n+\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=c90 -pedantic\" } */\n+\n+/* This file is for testing the preprocessor in -std=c90 -pedantic mode.\n+   Neil Booth, 2 Dec 2000.  */\n+\n+#if 1LL\t\t\t\t/* { dg-warning \"long long\" } */\n+#endif"}, {"sha": "d8656c364461b04d32f43cec0a6893d4a1f2faa9", "filename": "gcc/testsuite/gcc.dg/cpp/c90.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e1542b921b63aea61cc239be5eeeb632631a5b9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc90.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e1542b921b63aea61cc239be5eeeb632631a5b9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc90.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc90.c?ref=7e1542b921b63aea61cc239be5eeeb632631a5b9", "patch": "@@ -0,0 +1,10 @@\n+/* Copyright (C) 2000 Free Software Foundation, Inc.  */\n+\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=c90\" } */\n+\n+/* This file is for testing the preprocessor in -std=c90 mode.\n+   Neil Booth, 2 Dec 2000.  */\n+\n+#if 1LL\n+#endif"}, {"sha": "3f7f1af5de0314fff81d7b44634b9a0eda4fef1d", "filename": "gcc/testsuite/gcc.dg/gnu90-const-expr-1.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e1542b921b63aea61cc239be5eeeb632631a5b9/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu90-const-expr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e1542b921b63aea61cc239be5eeeb632631a5b9/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu90-const-expr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu90-const-expr-1.c?ref=7e1542b921b63aea61cc239be5eeeb632631a5b9", "patch": "@@ -0,0 +1,56 @@\n+/* Test for constant expressions: GNU extensions.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu90 -pedantic-errors\" } */\n+\n+int n;\n+\n+void\n+f (void)\n+{\n+  int i = 0;\n+  int a[n]; /* { dg-error \"ISO C90 forbids variable length array\" } */\n+  enum e1 {\n+    /* Integer constant expressions may not contain statement\n+       expressions (not a permitted operand).  */\n+    E1 = (1 ? 0 : ({ 0; })), /* { dg-error \"constant expression\" } */\n+    /* { dg-error \"ISO C forbids braced-groups\" \"ISO\" { target *-*-* } 16 } */\n+    /* Real and imaginary parts act like other arithmetic\n+       operators.  */\n+    E2 = __real__ (1 ? 0 : i++), /* { dg-error \"constant expression\" } */\n+    E3 = __real__ 0,\n+    E4 = __imag__ (1 ? 0 : i++), /* { dg-error \"constant\" } */\n+    E5 = __imag__ 0,\n+    /* __alignof__ always constant.  */\n+    E6 = __alignof__ (int[n]), /* { dg-error \"ISO C90 forbids variable length array\" } */\n+    E7 = __alignof__ (a),\n+    /* __extension__ ignored for constant expression purposes.  */\n+    E8 = __extension__ (1 ? 0 : i++), /* { dg-error \"constant expression\" } */\n+    E9 = __extension__ 0,\n+    /* Conditional expressions with omitted arguments act like the\n+       standard type.  */ \n+    E10 = (1 ? : i++), /* { dg-error \"constant expression\" } */\n+    /* { dg-error \"ISO C forbids omitting\" \"ISO\" { target *-*-* } 32 } */\n+    E11 = (1 ? : 0) /* { dg-error \"ISO C forbids omitting\" } */\n+  };\n+  enum e2 {\n+    /* Complex integer constants may be cast directly to integer\n+       types, but not after further arithmetic on them.  */\n+    F1 = (int) (_Complex int) 2i, /* { dg-error \"constant expression\" } */\n+    /* { dg-error \"complex\" \"complex\" { target *-*-* } 39 } */\n+    /* { dg-error \"imaginary\" \"imaginary\" { target *-*-* } 39 } */\n+    F2 = (int) +2i, /* { dg-error \"constant expression\" } */\n+    /* { dg-error \"imaginary\" \"ISO\" { target *-*-* } 42 } */\n+    F3 = (int) (1 + 2i), /* { dg-error \"constant expression\" } */\n+    /* { dg-error \"imaginary\" \"ISO\" { target *-*-* } 44 } */\n+    F4 = (int) 2i /* { dg-error \"imaginary\" } */\n+  };\n+  static double dr = __real__ (1.0 + 2.0i);\n+  /* { dg-error \"imaginary\" \"ISO\" { target *-*-* } 48 } */\n+  static double di = __imag__ (1.0 + 2.0i);\n+  /* { dg-error \"imaginary\" \"ISO\" { target *-*-* } 50 } */\n+  /* Statement expressions allowed in unevaluated subexpressions in\n+     initializers in gnu99 but not gnu89.  */\n+  static int j = (1 ? 0 : ({ 0; })); /* { dg-error \"constant expression\" } */\n+  /* { dg-error \"braced\" \"ISO\" { target *-*-* } 54 } */\n+}"}]}