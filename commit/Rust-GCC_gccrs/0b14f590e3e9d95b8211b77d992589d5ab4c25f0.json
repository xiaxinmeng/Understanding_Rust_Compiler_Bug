{"sha": "0b14f590e3e9d95b8211b77d992589d5ab4c25f0", "node_id": "C_kwDOANBUbNoAKDBiMTRmNTkwZTNlOWQ5NWI4MjExYjc3ZDk5MjU4OWQ1YWI0YzI1ZjA", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-06-23T18:59:24Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-06-23T18:59:24Z"}, "message": "diagnostics: add ability to associate diagnostics with rules from coding standards\n\ngcc/ChangeLog:\n\t* common.opt (fdiagnostics-show-rules): New option.\n\t* diagnostic-format-json.cc (diagnostic_output_format_init_json):\n\tFix up context->show_rules.\n\t* diagnostic-format-sarif.cc\n\t(diagnostic_output_format_init_sarif): Likewise.\n\t* diagnostic-metadata.h (diagnostic_metadata::rule): New class.\n\t(diagnostic_metadata::precanned_rule): New class.\n\t(diagnostic_metadata::add_rule): New.\n\t(diagnostic_metadata::get_num_rules): New.\n\t(diagnostic_metadata::get_rule): New.\n\t(diagnostic_metadata::m_rules): New field.\n\t* diagnostic.cc (diagnostic_initialize): Initialize show_rules.\n\t(print_any_rules): New.\n\t(diagnostic_report_diagnostic): Call it.\n\t* diagnostic.h (diagnostic_context::show_rules): New field.\n\t* doc/invoke.texi (-fno-diagnostics-show-rules): New option.\n\t* opts.cc (common_handle_option): Handle\n\tOPT_fdiagnostics_show_rules.\n\t* toplev.cc (general_init): Set up global_dc->show_rules.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/plugin/diagnostic-test-metadata.c: Expect \" [STR34-C]\" to\n\tbe emitted at the \"gets\" call.\n\t* gcc.dg/plugin/diagnostic_plugin_test_metadata.c\n\t(pass_test_metadata::execute): Associate the \"gets\" diagnostic\n\twith a rule named \"STR34-C\".\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "39ac2b3f184303c93ca038cf58bb5fd36f231157", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39ac2b3f184303c93ca038cf58bb5fd36f231157"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b14f590e3e9d95b8211b77d992589d5ab4c25f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b14f590e3e9d95b8211b77d992589d5ab4c25f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b14f590e3e9d95b8211b77d992589d5ab4c25f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b14f590e3e9d95b8211b77d992589d5ab4c25f0/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c1c7e120cca183671b11ba68a6350c8800823c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c1c7e120cca183671b11ba68a6350c8800823c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c1c7e120cca183671b11ba68a6350c8800823c0"}], "stats": {"total": 131, "additions": 127, "deletions": 4}, "files": [{"sha": "ed50f77848ddda18bad13a37543bf7370f130522", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b14f590e3e9d95b8211b77d992589d5ab4c25f0/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b14f590e3e9d95b8211b77d992589d5ab4c25f0/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=0b14f590e3e9d95b8211b77d992589d5ab4c25f0", "patch": "@@ -1466,6 +1466,10 @@ fdiagnostics-show-cwe\n Common Var(flag_diagnostics_show_cwe) Init(1)\n Print CWE identifiers for diagnostic messages, where available.\n \n+fdiagnostics-show-rules\n+Common Var(flag_diagnostics_show_rules) Init(1)\n+Print any rules associated with diagnostic messages.\n+\n fdiagnostics-path-format=\n Common Joined RejectNegative Var(flag_diagnostics_path_format) Enum(diagnostic_path_format) Init(DPF_INLINE_EVENTS)\n Specify how to print any control-flow path associated with a diagnostic."}, {"sha": "d1d8d3f2081172e1a24c868045625d9d264fccf5", "filename": "gcc/diagnostic-format-json.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b14f590e3e9d95b8211b77d992589d5ab4c25f0/gcc%2Fdiagnostic-format-json.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b14f590e3e9d95b8211b77d992589d5ab4c25f0/gcc%2Fdiagnostic-format-json.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-format-json.cc?ref=0b14f590e3e9d95b8211b77d992589d5ab4c25f0", "patch": "@@ -345,6 +345,7 @@ diagnostic_output_format_init_json (diagnostic_context *context)\n \n   /* The metadata is handled in JSON format, rather than as text.  */\n   context->show_cwe = false;\n+  context->show_rules = false;\n \n   /* The option is handled in JSON format, rather than as text.  */\n   context->show_option_requested = false;"}, {"sha": "a7bb9fb639d6dc37fd7559525f25fe26fc3dac91", "filename": "gcc/diagnostic-format-sarif.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b14f590e3e9d95b8211b77d992589d5ab4c25f0/gcc%2Fdiagnostic-format-sarif.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b14f590e3e9d95b8211b77d992589d5ab4c25f0/gcc%2Fdiagnostic-format-sarif.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-format-sarif.cc?ref=0b14f590e3e9d95b8211b77d992589d5ab4c25f0", "patch": "@@ -1556,6 +1556,7 @@ diagnostic_output_format_init_sarif (diagnostic_context *context)\n \n   /* The metadata is handled in SARIF format, rather than as text.  */\n   context->show_cwe = false;\n+  context->show_rules = false;\n \n   /* The option is handled in SARIF format, rather than as text.  */\n   context->show_option_requested = false;"}, {"sha": "80017d35fa9d068b6d79386ac42d1c57e92c5a90", "filename": "gcc/diagnostic-metadata.h", "status": "modified", "additions": 45, "deletions": 2, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b14f590e3e9d95b8211b77d992589d5ab4c25f0/gcc%2Fdiagnostic-metadata.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b14f590e3e9d95b8211b77d992589d5ab4c25f0/gcc%2Fdiagnostic-metadata.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-metadata.h?ref=0b14f590e3e9d95b8211b77d992589d5ab4c25f0", "patch": "@@ -24,19 +24,62 @@ along with GCC; see the file COPYING3.  If not see\n /* A bundle of additional metadata that can be associated with a\n    diagnostic.\n \n-   Currently this only supports associating a CWE identifier with a\n-   diagnostic.  */\n+   This supports an optional CWE identifier, and zero or more\n+   \"rules\".  */\n \n class diagnostic_metadata\n {\n  public:\n+  /* Abstract base class for referencing a rule that has been violated,\n+     such as within a coding standard, or within a specification.  */\n+  class rule\n+  {\n+  public:\n+    virtual char *make_description () const = 0;\n+    virtual char *make_url () const = 0;\n+  };\n+\n+  /* Concrete subclass.  */\n+  class precanned_rule : public rule\n+  {\n+  public:\n+    precanned_rule (const char *desc, const char *url)\n+    : m_desc (desc), m_url (url)\n+    {}\n+\n+    char *make_description () const final override\n+    {\n+      return m_desc ? xstrdup (m_desc) : NULL;\n+    }\n+\n+    char *make_url () const final override\n+    {\n+      return m_url ? xstrdup (m_url) : NULL;\n+    }\n+\n+  private:\n+    const char *m_desc;\n+    const char *m_url;\n+  };\n+\n   diagnostic_metadata () : m_cwe (0) {}\n \n   void add_cwe (int cwe) { m_cwe = cwe; }\n   int get_cwe () const { return m_cwe; }\n \n+  /* Associate R with the diagnostic.  R must outlive\n+     the metadata.  */\n+  void add_rule (const rule &r)\n+  {\n+    m_rules.safe_push (&r);\n+  }\n+\n+  unsigned get_num_rules () const { return m_rules.length (); }\n+  const rule &get_rule (unsigned idx) const { return *(m_rules[idx]); }\n+\n  private:\n   int m_cwe;\n+  auto_vec<const rule *> m_rules;\n };\n \n #endif /* ! GCC_DIAGNOSTIC_METADATA_H */"}, {"sha": "22f7b0b6d6ed8d1faeb540ed0e85d0f267f82a9c", "filename": "gcc/diagnostic.cc", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b14f590e3e9d95b8211b77d992589d5ab4c25f0/gcc%2Fdiagnostic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b14f590e3e9d95b8211b77d992589d5ab4c25f0/gcc%2Fdiagnostic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.cc?ref=0b14f590e3e9d95b8211b77d992589d5ab4c25f0", "patch": "@@ -190,6 +190,7 @@ diagnostic_initialize (diagnostic_context *context, int n_opts)\n   for (i = 0; i < rich_location::STATICALLY_ALLOCATED_RANGES; i++)\n     context->caret_chars[i] = '^';\n   context->show_cwe = false;\n+  context->show_rules = false;\n   context->path_format = DPF_NONE;\n   context->show_path_depths = false;\n   context->show_option_requested = false;\n@@ -1291,6 +1292,51 @@ print_any_cwe (diagnostic_context *context,\n     }\n }\n \n+/* If DIAGNOSTIC has any rules associated with it, print them.\n+\n+   For example, if the diagnostic metadata associates it with a rule\n+   named \"STR34-C\", then \" [STR34-C]\" will be printed, suitably colorized,\n+   with any URL provided by the rule.  */\n+\n+static void\n+print_any_rules (diagnostic_context *context,\n+\t\tconst diagnostic_info *diagnostic)\n+{\n+  if (diagnostic->metadata == NULL)\n+    return;\n+\n+  for (unsigned idx = 0; idx < diagnostic->metadata->get_num_rules (); idx++)\n+    {\n+      const diagnostic_metadata::rule &rule\n+\t= diagnostic->metadata->get_rule (idx);\n+      if (char *desc = rule.make_description ())\n+\t{\n+\t  pretty_printer *pp = context->printer;\n+\t  char *saved_prefix = pp_take_prefix (context->printer);\n+\t  pp_string (pp, \" [\");\n+\t  pp_string (pp,\n+\t\t     colorize_start (pp_show_color (pp),\n+\t\t\t\t     diagnostic_kind_color[diagnostic->kind]));\n+\t  char *url = NULL;\n+\t  if (pp->url_format != URL_FORMAT_NONE)\n+\t    {\n+\t      url = rule.make_url ();\n+\t      if (url)\n+\t\tpp_begin_url (pp, url);\n+\t    }\n+\t  pp_string (pp, desc);\n+\t  pp_set_prefix (context->printer, saved_prefix);\n+\t  if (pp->url_format != URL_FORMAT_NONE)\n+\t    if (url)\n+\t      pp_end_url (pp);\n+\t  free (url);\n+\t  pp_string (pp, colorize_stop (pp_show_color (pp)));\n+\t  pp_character (pp, ']');\n+\t  free (desc);\n+\t}\n+    }\n+}\n+\n /* Print any metadata about the option used to control DIAGNOSTIC to CONTEXT's\n    printer, e.g. \" [-Werror=uninitialized]\".\n    Subroutine of diagnostic_report_diagnostic.  */\n@@ -1504,6 +1550,8 @@ diagnostic_report_diagnostic (diagnostic_context *context,\n   pp_output_formatted_text (context->printer);\n   if (context->show_cwe)\n     print_any_cwe (context, diagnostic);\n+  if (context->show_rules)\n+    print_any_rules (context, diagnostic);\n   if (context->show_option_requested)\n     print_option_information (context, diagnostic, orig_diag_kind);\n   (*diagnostic_finalizer (context)) (context, diagnostic, orig_diag_kind);"}, {"sha": "ae6f2dfb7f43e36224b767ade795aaa4fbfca5dc", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b14f590e3e9d95b8211b77d992589d5ab4c25f0/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b14f590e3e9d95b8211b77d992589d5ab4c25f0/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=0b14f590e3e9d95b8211b77d992589d5ab4c25f0", "patch": "@@ -227,6 +227,9 @@ struct diagnostic_context\n      diagnostics.  */\n   bool show_cwe;\n \n+  /* True if we should print any rules associated with diagnostics.  */\n+  bool show_rules;\n+\n   /* How should diagnostic_path objects be printed.  */\n   enum diagnostic_path_format path_format;\n "}, {"sha": "07a1bf40ad942ddd9dcd973c3eb052931391ca9e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b14f590e3e9d95b8211b77d992589d5ab4c25f0/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b14f590e3e9d95b8211b77d992589d5ab4c25f0/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=0b14f590e3e9d95b8211b77d992589d5ab4c25f0", "patch": "@@ -305,6 +305,7 @@ Objective-C and Objective-C++ Dialects}.\n -fno-diagnostics-show-option  -fno-diagnostics-show-caret @gol\n -fno-diagnostics-show-labels  -fno-diagnostics-show-line-numbers @gol\n -fno-diagnostics-show-cwe  @gol\n+-fno-diagnostics-show-rule  @gol\n -fdiagnostics-minimum-margin-width=@var{width} @gol\n -fdiagnostics-parseable-fixits  -fdiagnostics-generate-patch @gol\n -fdiagnostics-show-template-tree  -fno-elide-type @gol\n@@ -5028,6 +5029,15 @@ diagnostics.  GCC plugins may also provide diagnostics with such metadata.\n By default, if this information is present, it will be printed with\n the diagnostic.  This option suppresses the printing of this metadata.\n \n+@item -fno-diagnostics-show-rules\n+@opindex fno-diagnostics-show-rules\n+@opindex fdiagnostics-show-rules\n+Diagnostic messages can optionally have rules associated with them, such\n+as from a coding standard, or a specification.\n+GCC itself does not do this for any of its diagnostics, but plugins may do so.\n+By default, if this information is present, it will be printed with\n+the diagnostic.  This option suppresses the printing of this metadata.\n+\n @item -fno-diagnostics-show-line-numbers\n @opindex fno-diagnostics-show-line-numbers\n @opindex fdiagnostics-show-line-numbers"}, {"sha": "fe0293e4283df41248dfdfb572c60b9ae9b6e437", "filename": "gcc/opts.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b14f590e3e9d95b8211b77d992589d5ab4c25f0/gcc%2Fopts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b14f590e3e9d95b8211b77d992589d5ab4c25f0/gcc%2Fopts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.cc?ref=0b14f590e3e9d95b8211b77d992589d5ab4c25f0", "patch": "@@ -2876,6 +2876,10 @@ common_handle_option (struct gcc_options *opts,\n       dc->show_cwe = value;\n       break;\n \n+    case OPT_fdiagnostics_show_rules:\n+      dc->show_rules = value;\n+      break;\n+\n     case OPT_fdiagnostics_path_format_:\n       dc->path_format = (enum diagnostic_path_format)value;\n       break;"}, {"sha": "38ecf0a6d95b923cf2cc01488b58be8255de8a1a", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-metadata.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b14f590e3e9d95b8211b77d992589d5ab4c25f0/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-metadata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b14f590e3e9d95b8211b77d992589d5ab4c25f0/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-metadata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-metadata.c?ref=0b14f590e3e9d95b8211b77d992589d5ab4c25f0", "patch": "@@ -5,5 +5,5 @@ extern char *gets (char *s);\n void test_cwe (void)\n {\n   char buf[1024];\n-  gets (buf); /* { dg-warning \"never use 'gets' \\\\\\[CWE-242\\\\\\]\" } */\n+  gets (buf); /* { dg-warning \"never use 'gets' \\\\\\[CWE-242\\\\\\] \\\\\\[STR34-C\\\\\\]\" } */\n }"}, {"sha": "b86a8b3650ef82bb69b52a576285abb96922baa8", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic_plugin_test_metadata.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b14f590e3e9d95b8211b77d992589d5ab4c25f0/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_metadata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b14f590e3e9d95b8211b77d992589d5ab4c25f0/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_metadata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_metadata.c?ref=0b14f590e3e9d95b8211b77d992589d5ab4c25f0", "patch": "@@ -106,9 +106,16 @@ pass_test_metadata::execute (function *fun)\n \tif (gcall *call = check_for_named_call (stmt, \"gets\", 1))\n \t  {\n \t    gcc_rich_location richloc (gimple_location (call));\n-\t    /* CWE-242: Use of Inherently Dangerous Function.  */\n \t    diagnostic_metadata m;\n+\n+\t    /* CWE-242: Use of Inherently Dangerous Function.  */\n \t    m.add_cwe (242);\n+\n+\t    /* Example of a diagnostic_metadata::rule.  */\n+\t    diagnostic_metadata::precanned_rule\n+\t      test_rule (\"STR34-C\", \"https://example.com/\");\n+\t    m.add_rule (test_rule);\n+\n \t    warning_meta (&richloc, m, 0,\n \t\t\t  \"never use %qs\", \"gets\");\n \t  }"}, {"sha": "a24ad5db43854e956b67006173cb198d026cf177", "filename": "gcc/toplev.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b14f590e3e9d95b8211b77d992589d5ab4c25f0/gcc%2Ftoplev.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b14f590e3e9d95b8211b77d992589d5ab4c25f0/gcc%2Ftoplev.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.cc?ref=0b14f590e3e9d95b8211b77d992589d5ab4c25f0", "patch": "@@ -1038,6 +1038,8 @@ general_init (const char *argv0, bool init_signals)\n     = global_options_init.x_flag_diagnostics_show_line_numbers;\n   global_dc->show_cwe\n     = global_options_init.x_flag_diagnostics_show_cwe;\n+  global_dc->show_rules\n+    = global_options_init.x_flag_diagnostics_show_rules;\n   global_dc->path_format\n     = (enum diagnostic_path_format)global_options_init.x_flag_diagnostics_path_format;\n   global_dc->show_path_depths"}]}