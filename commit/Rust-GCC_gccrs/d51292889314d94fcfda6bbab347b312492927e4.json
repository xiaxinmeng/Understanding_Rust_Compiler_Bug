{"sha": "d51292889314d94fcfda6bbab347b312492927e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDUxMjkyODg5MzE0ZDk0ZmNmZGE2YmJhYjM0N2IzMTI0OTI5MjdlNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2002-02-06T19:32:04Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-02-06T19:32:04Z"}, "message": "re PR c/5482 (cyclone-0.2, ICE in emit_move_insn, at expr.c:2746)\n\n\tPR c/5482:\n\t* c-common.c (c_expand_expr) [STMT_EXPR]: If last expression is not\n\tEXPR_STMT, but COMPOUND_STMT, recurse into it.\n\n\t* gcc.c-torture/execute/20020206-1.c: New test.\n\nFrom-SVN: r49549", "tree": {"sha": "654cde6cce3717203a888f9a81d627b599e6eae0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/654cde6cce3717203a888f9a81d627b599e6eae0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d51292889314d94fcfda6bbab347b312492927e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d51292889314d94fcfda6bbab347b312492927e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d51292889314d94fcfda6bbab347b312492927e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d51292889314d94fcfda6bbab347b312492927e4/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5364626ac42b3eb2efc7462f6832a352db03439b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5364626ac42b3eb2efc7462f6832a352db03439b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5364626ac42b3eb2efc7462f6832a352db03439b"}], "stats": {"total": 71, "additions": 59, "deletions": 12}, "files": [{"sha": "86fc062969355805afcf1f259ac2003938c8791e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d51292889314d94fcfda6bbab347b312492927e4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d51292889314d94fcfda6bbab347b312492927e4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d51292889314d94fcfda6bbab347b312492927e4", "patch": "@@ -1,3 +1,9 @@\n+2002-02-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/5482:\n+\t* c-common.c (c_expand_expr) [STMT_EXPR]: If last expression is not\n+\tEXPR_STMT, but COMPOUND_STMT, recurse into it.\n+\n 2002-02-06  Richard Henderson  <rth@redhat.com>\n \n \t* cfganal.c (keep_with_call_p): Source for fixed_reg dest must"}, {"sha": "dd535ed7365e753d39223c5ffda1f3f4d872c99d", "filename": "gcc/c-common.c", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d51292889314d94fcfda6bbab347b312492927e4/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d51292889314d94fcfda6bbab347b312492927e4/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=d51292889314d94fcfda6bbab347b312492927e4", "patch": "@@ -3466,22 +3466,32 @@ c_expand_expr (exp, target, tmode, modifier)\n \n \t/* If we want the result of this expression, find the last\n            EXPR_STMT in the COMPOUND_STMT and mark it as addressable.  */\n-\tif (target != const0_rtx\n-\t    && TREE_CODE (STMT_EXPR_STMT (exp)) == COMPOUND_STMT\n-\t    && TREE_CODE (COMPOUND_BODY (STMT_EXPR_STMT (exp))) == SCOPE_STMT)\n+\tif (target != const0_rtx)\n \t  {\n-\t    tree expr = COMPOUND_BODY (STMT_EXPR_STMT (exp));\n-\t    tree last = TREE_CHAIN (expr);\n+\t    tree expr = STMT_EXPR_STMT (exp);\n+\t    tree last;\n \n-\t    while (TREE_CHAIN (last))\n+\t    while (TREE_CODE (expr) == COMPOUND_STMT\n+\t\t   && TREE_CODE (COMPOUND_BODY (expr)) == SCOPE_STMT)\n \t      {\n-\t\texpr = last;\n-\t\tlast = TREE_CHAIN (last);\n+\t\texpr = COMPOUND_BODY (expr);\n+\t\tlast = TREE_CHAIN (expr);\n+\n+\t\twhile (TREE_CHAIN (last))\n+\t\t  {\n+\t\t    expr = last;\n+\t\t    last = TREE_CHAIN (last);\n+\t\t  }\n+\n+\t\tif (TREE_CODE (last) != SCOPE_STMT)\n+\t\t  abort ();\n+\n+\t\tif (TREE_CODE (expr) == EXPR_STMT)\n+\t\t  {\n+\t\t    TREE_ADDRESSABLE (expr) = 1;\n+\t\t    break;\n+\t\t  }\n \t      }\n-\n-\t    if (TREE_CODE (last) == SCOPE_STMT\n-\t\t&& TREE_CODE (expr) == EXPR_STMT)\n-\t      TREE_ADDRESSABLE (expr) = 1;\n \t  }\n \n \texpand_stmt (STMT_EXPR_STMT (exp));"}, {"sha": "8cf3dc49e2bbb1f978987af0f257065d396fa155", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d51292889314d94fcfda6bbab347b312492927e4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d51292889314d94fcfda6bbab347b312492927e4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d51292889314d94fcfda6bbab347b312492927e4", "patch": "@@ -1,5 +1,7 @@\n 2002-02-06  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* gcc.c-torture/execute/20020206-1.c: New test.\n+\n \tPR optimization/5429:\n \t* gcc.c-torture/compile/20020206-1.c: New test.\n "}, {"sha": "93147c9ada187aade3c6ea05b2c433f5af9a57a9", "filename": "gcc/testsuite/gcc.c-torture/execute/20020206-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d51292889314d94fcfda6bbab347b312492927e4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020206-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d51292889314d94fcfda6bbab347b312492927e4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020206-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020206-1.c?ref=d51292889314d94fcfda6bbab347b312492927e4", "patch": "@@ -0,0 +1,29 @@\n+/* This testcase ICEd because c_expand_expr did not mark statement expression\n+   return value as one which shouldn't be ignored.  */\n+\n+struct A {\n+  unsigned int a, b, c;\n+};\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+struct A bar (void)\n+{\n+  return (struct A) { 176, 52, 31 };\n+}\n+\n+void baz (struct A *a)\n+{\n+  if (a->a != 176 || a->b != 52 || a->c != 31)\n+    abort ();\n+}\n+\n+int main ()\n+{\n+  struct A d;\n+\n+  d = ({ { bar (); } });\n+  baz (&d);\n+  exit (0);\n+}"}]}