{"sha": "f25f40be277fe6687e86b6395a55781211811bef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI1ZjQwYmUyNzdmZTY2ODdlODZiNjM5NWE1NTc4MTIxMTgxMWJlZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-08-31T18:42:08Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-08-31T18:42:08Z"}, "message": "re PR fortran/77374 (ICE in resolve_omp_atomic, at fortran/openmp.c:3949)\n\n\tPR fortran/77374\n\t* parse.c (parse_omp_oacc_atomic): Copy over cp->ext.omp_atomic\n\tto cp->block->ext.omp_atomic.\n\t* resolve.c (gfc_resolve_blocks): Assert block with one or two\n\tEXEC_ASSIGNs for EXEC_*_ATOMIC.\n\t* openmp.c (resolve_omp_atomic): Don't assert one or two\n\tEXEC_ASSIGNs, instead return quietly for EXEC_NOPs and otherwise\n\terror unexpected statements.\n\n\t* gfortran.dg/gomp/pr77374.f08: New test.\n\nFrom-SVN: r239903", "tree": {"sha": "9c780ac0e723481df09dc6e41511db61ca68b25f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c780ac0e723481df09dc6e41511db61ca68b25f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f25f40be277fe6687e86b6395a55781211811bef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f25f40be277fe6687e86b6395a55781211811bef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f25f40be277fe6687e86b6395a55781211811bef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f25f40be277fe6687e86b6395a55781211811bef/comments", "author": null, "committer": null, "parents": [{"sha": "9ff6fb6ede9ac2902088514067aca53e1133cc80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ff6fb6ede9ac2902088514067aca53e1133cc80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ff6fb6ede9ac2902088514067aca53e1133cc80"}], "stats": {"total": 96, "additions": 85, "deletions": 11}, "files": [{"sha": "d7f416128abacd0849e3ad77f97d27de39e5794c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f25f40be277fe6687e86b6395a55781211811bef/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f25f40be277fe6687e86b6395a55781211811bef/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f25f40be277fe6687e86b6395a55781211811bef", "patch": "@@ -1,8 +1,18 @@\n+2016-08-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/77374\n+\t* parse.c (parse_omp_oacc_atomic): Copy over cp->ext.omp_atomic\n+\tto cp->block->ext.omp_atomic.\n+\t* resolve.c (gfc_resolve_blocks): Assert block with one or two\n+\tEXEC_ASSIGNs for EXEC_*_ATOMIC.\n+\t* openmp.c (resolve_omp_atomic): Don't assert one or two\n+\tEXEC_ASSIGNs, instead return quietly for EXEC_NOPs and otherwise\n+\terror unexpected statements.\n+\n 2016-08-31  Paul Thomas  <pault@gcc.gnu.org>\n-\tJerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\t    Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/48298\n-\n \t* decl.c (access_attr_decl): Include case INTERFACE_DTIO as\n \tappropriate.\n \t* gfortran.h : Add INTRINSIC_FORMATTED and"}, {"sha": "03e7dbe2f372a0aeb79f397f26ea21269f10d992", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f25f40be277fe6687e86b6395a55781211811bef/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f25f40be277fe6687e86b6395a55781211811bef/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=f25f40be277fe6687e86b6395a55781211811bef", "patch": "@@ -3946,12 +3946,33 @@ resolve_omp_atomic (gfc_code *code)\n     = (gfc_omp_atomic_op) (atomic_code->ext.omp_atomic & GFC_OMP_ATOMIC_MASK);\n \n   code = code->block->next;\n-  gcc_assert (code->op == EXEC_ASSIGN);\n-  gcc_assert (((aop != GFC_OMP_ATOMIC_CAPTURE) && code->next == NULL)\n-\t      || ((aop == GFC_OMP_ATOMIC_CAPTURE)\n-\t\t  && code->next != NULL\n-\t\t  && code->next->op == EXEC_ASSIGN\n-\t\t  && code->next->next == NULL));\n+  /* resolve_blocks asserts this is initially EXEC_ASSIGN.\n+     If it changed to EXEC_NOP, assume an error has been emitted already.  */\n+  if (code->op == EXEC_NOP)\n+    return;\n+  if (code->op != EXEC_ASSIGN)\n+    {\n+    unexpected:\n+      gfc_error (\"unexpected !$OMP ATOMIC expression at %L\", &code->loc);\n+      return;\n+    }\n+  if (aop != GFC_OMP_ATOMIC_CAPTURE)\n+    {\n+      if (code->next != NULL)\n+\tgoto unexpected;\n+    }\n+  else\n+    {\n+      if (code->next == NULL)\n+\tgoto unexpected;\n+      if (code->next->op == EXEC_NOP)\n+\treturn;\n+      if (code->next->op != EXEC_ASSIGN || code->next->next)\n+\t{\n+\t  code = code->next;\n+\t  goto unexpected;\n+\t}\n+    }\n \n   if (code->expr1->expr_type != EXPR_VARIABLE\n       || code->expr1->symtree == NULL"}, {"sha": "86f2c427368cc90a28c377e2bc3f56b49222973a", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f25f40be277fe6687e86b6395a55781211811bef/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f25f40be277fe6687e86b6395a55781211811bef/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=f25f40be277fe6687e86b6395a55781211811bef", "patch": "@@ -4695,6 +4695,7 @@ parse_omp_oacc_atomic (bool omp_p)\n   np = new_level (cp);\n   np->op = cp->op;\n   np->block = NULL;\n+  np->ext.omp_atomic = cp->ext.omp_atomic;\n   count = 1 + ((cp->ext.omp_atomic & GFC_OMP_ATOMIC_MASK)\n \t       == GFC_OMP_ATOMIC_CAPTURE);\n "}, {"sha": "39c1330c45571aa65499a52327ab753cb259f460", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f25f40be277fe6687e86b6395a55781211811bef/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f25f40be277fe6687e86b6395a55781211811bef/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=f25f40be277fe6687e86b6395a55781211811bef", "patch": "@@ -9519,6 +9519,24 @@ gfc_resolve_blocks (gfc_code *b, gfc_namespace *ns)\n \tcase EXEC_WAIT:\n \t  break;\n \n+\tcase EXEC_OMP_ATOMIC:\n+\tcase EXEC_OACC_ATOMIC:\n+\t  {\n+\t    gfc_omp_atomic_op aop\n+\t      = (gfc_omp_atomic_op) (b->ext.omp_atomic & GFC_OMP_ATOMIC_MASK);\n+\n+\t    /* Verify this before calling gfc_resolve_code, which might\n+\t       change it.  */\n+\t    gcc_assert (b->next && b->next->op == EXEC_ASSIGN);\n+\t    gcc_assert (((aop != GFC_OMP_ATOMIC_CAPTURE)\n+\t\t\t && b->next->next == NULL)\n+\t\t\t|| ((aop == GFC_OMP_ATOMIC_CAPTURE)\n+\t\t\t    && b->next->next != NULL\n+\t\t\t    && b->next->next->op == EXEC_ASSIGN\n+\t\t\t    && b->next->next->next == NULL));\n+\t  }\n+\t  break;\n+\n \tcase EXEC_OACC_PARALLEL_LOOP:\n \tcase EXEC_OACC_PARALLEL:\n \tcase EXEC_OACC_KERNELS_LOOP:\n@@ -9531,9 +9549,7 @@ gfc_resolve_blocks (gfc_code *b, gfc_namespace *ns)\n \tcase EXEC_OACC_CACHE:\n \tcase EXEC_OACC_ENTER_DATA:\n \tcase EXEC_OACC_EXIT_DATA:\n-\tcase EXEC_OACC_ATOMIC:\n \tcase EXEC_OACC_ROUTINE:\n-\tcase EXEC_OMP_ATOMIC:\n \tcase EXEC_OMP_CRITICAL:\n \tcase EXEC_OMP_DISTRIBUTE:\n \tcase EXEC_OMP_DISTRIBUTE_PARALLEL_DO:"}, {"sha": "d77d548481f95f5318ddc826ed0aa315c56c7d75", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f25f40be277fe6687e86b6395a55781211811bef/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f25f40be277fe6687e86b6395a55781211811bef/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f25f40be277fe6687e86b6395a55781211811bef", "patch": "@@ -1,3 +1,8 @@\n+2016-08-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/77374\n+\t* gfortran.dg/gomp/pr77374.f08: New test.\n+\n 2016-08-31  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR tree-optimization/73714\n@@ -21,7 +26,7 @@\n \tintended item on the stack.\n \n 2016-08-31  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n-\tPaul Thomas  <pault@gcc.gnu.org>\n+\t    Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/48298\n \t* gfortran.dg/dtio_1.f90: New test."}, {"sha": "66ca5bd5115dec51bbeb60b305e401a9ed139757", "filename": "gcc/testsuite/gfortran.dg/gomp/pr77374.f08", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f25f40be277fe6687e86b6395a55781211811bef/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr77374.f08", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f25f40be277fe6687e86b6395a55781211811bef/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr77374.f08", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr77374.f08?ref=f25f40be277fe6687e86b6395a55781211811bef", "patch": "@@ -0,0 +1,21 @@\n+! PR fortran/77374\n+! { dg-do compile }\n+\n+subroutine foo (a, b)\n+  integer :: a, b\n+!$omp atomic\n+  b = b + a\n+!$omp atomic\n+  z(1) = z(1) + 1\t! { dg-error \"must have the pointer attribute\" }\n+end subroutine\n+subroutine bar (a, b)\n+  integer :: a, b\n+  interface\n+    function baz (i) result (res)\n+      integer, pointer :: res\n+      integer :: i\n+    end function\n+  end interface\n+!$omp atomic\n+  baz (i) = 1\t\t! { dg-error \"unexpected\" }\n+end subroutine"}]}