{"sha": "a51180ca2db69136bc594b804f799cf084222f20", "node_id": "C_kwDOANBUbNoAKGE1MTE4MGNhMmRiNjkxMzZiYzU5NGI4MDRmNzk5Y2YwODQyMjJmMjA", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-22T16:07:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-22T16:07:18Z"}, "message": "Merge #762\n\n762: Add missing coercion site code to MethodCallExpr's r=philberty a=philberty\n\nArguments to methods are coercion sites and may have implicit conversions\r\nto be performed this adds this missing code for this case.\r\n\r\nFixes #755\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "44de1b6bd618e97c92ef4033e1e75976f331c547", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44de1b6bd618e97c92ef4033e1e75976f331c547"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a51180ca2db69136bc594b804f799cf084222f20", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhcuG2CRBK7hj4Ov3rIwAAe30IAJv5q0rpEWeG8AN+7uqcX8ws\nQqzYsB+Q5F8IGb2TLUgc5ZnfkbVnwHpiiNFgAbOlu175TwSubqeGlVFKi9NmHjMM\nO8UxcSugNUanitRaPflYJ/IqlPVmY8blzmuM70yWrDyl5OgnW5o0o66JkeJOxVsO\ny5U7txS3HdUY3sYIvsDjFdVtLwKtCAkwb3gSoqN2D42cXZ9lSjsSU3NPZT7H3xnw\nbDasNLjYcoqbhYXs+Wc/znm2H5hnJf0lbQIYHXDVdhh++9KONs5s4dyP9PeoL4m/\nKoYJhQY0HSgAw3xxRCH1wpfXHwyTZn7s0jR5cNvJcPzxbCiZ9aFYWNIOW+TZOok=\n=+/VK\n-----END PGP SIGNATURE-----\n", "payload": "tree 44de1b6bd618e97c92ef4033e1e75976f331c547\nparent 94b1da7d971fe354f7a2e479a52e48a4145be768\nparent e0b43ccd05b72f6c7402b87eeeb8e26d18bef92b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1634918838 +0000\ncommitter GitHub <noreply@github.com> 1634918838 +0000\n\nMerge #762\n\n762: Add missing coercion site code to MethodCallExpr's r=philberty a=philberty\n\nArguments to methods are coercion sites and may have implicit conversions\r\nto be performed this adds this missing code for this case.\r\n\r\nFixes #755\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a51180ca2db69136bc594b804f799cf084222f20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a51180ca2db69136bc594b804f799cf084222f20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a51180ca2db69136bc594b804f799cf084222f20/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94b1da7d971fe354f7a2e479a52e48a4145be768", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94b1da7d971fe354f7a2e479a52e48a4145be768", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94b1da7d971fe354f7a2e479a52e48a4145be768"}, {"sha": "e0b43ccd05b72f6c7402b87eeeb8e26d18bef92b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0b43ccd05b72f6c7402b87eeeb8e26d18bef92b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0b43ccd05b72f6c7402b87eeeb8e26d18bef92b"}], "stats": {"total": 71, "additions": 65, "deletions": 6}, "files": [{"sha": "40e2f86b352bd3084c65feb126902704d513f6c8", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51180ca2db69136bc594b804f799cf084222f20/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51180ca2db69136bc594b804f799cf084222f20/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=a51180ca2db69136bc594b804f799cf084222f20", "patch": "@@ -451,8 +451,6 @@ CompileExpr::visit (HIR::MethodCallExpr &expr)\n \t}\n     }\n \n-  std::vector<Bexpression *> args;\n-\n   // lookup the autoderef mappings\n   std::vector<Resolver::Adjustment> *adjustments = nullptr;\n   ok = ctx->get_tyctx ()->lookup_autoderef_mappings (\n@@ -478,13 +476,31 @@ CompileExpr::visit (HIR::MethodCallExpr &expr)\n \t  break;\n \t}\n     }\n-  args.push_back (self);\n+\n+  std::vector<Bexpression *> args;\n+  args.push_back (self); // adjusted self\n \n   // normal args\n-  for (auto &argument : expr.get_arguments ())\n+  for (size_t i = 0; i < expr.get_arguments ().size (); i++)\n     {\n-      Bexpression *compiled_expr = CompileExpr::Compile (argument.get (), ctx);\n-      args.push_back (compiled_expr);\n+      auto &argument = expr.get_arguments ().at (i);\n+      auto rvalue = CompileExpr::Compile (argument.get (), ctx);\n+\n+      // assignments are coercion sites so lets convert the rvalue if\n+      // necessary, offset from the already adjusted implicit self\n+      bool ok;\n+      TyTy::BaseType *expected = fntype->param_at (i + 1).second;\n+\n+      TyTy::BaseType *actual = nullptr;\n+      ok = ctx->get_tyctx ()->lookup_type (\n+\targument->get_mappings ().get_hirid (), &actual);\n+      rust_assert (ok);\n+\n+      // coerce it if required\n+      rvalue = coercion_site (rvalue, actual, expected, expr.get_locus ());\n+\n+      // add it to the list\n+      args.push_back (rvalue);\n     }\n \n   auto fncontext = ctx->peek_fn ();"}, {"sha": "615df42344c630e1d0496966195fc9cf4b27ba10", "filename": "gcc/testsuite/rust/execute/torture/trait10.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51180ca2db69136bc594b804f799cf084222f20/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait10.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51180ca2db69136bc594b804f799cf084222f20/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait10.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait10.rs?ref=a51180ca2db69136bc594b804f799cf084222f20", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-output \"123\\n\" } */\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+struct Foo(i32);\n+trait Bar {\n+    fn baz(&self);\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}\n+\n+impl Bar for Foo {\n+    fn baz(&self) {\n+        // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+        unsafe {\n+            let a = \"%i\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c, self.0);\n+        }\n+    }\n+}\n+\n+struct S;\n+impl S {\n+    fn dynamic_dispatch(self, t: &dyn Bar) {\n+        // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+        t.baz();\n+    }\n+}\n+\n+pub fn main() -> i32 {\n+    let a;\n+    a = &Foo(123);\n+\n+    let b;\n+    b = S;\n+\n+    b.dynamic_dispatch(a);\n+\n+    0\n+}"}]}