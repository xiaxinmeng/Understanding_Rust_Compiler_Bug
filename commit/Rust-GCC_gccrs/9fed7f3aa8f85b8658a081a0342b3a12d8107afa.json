{"sha": "9fed7f3aa8f85b8658a081a0342b3a12d8107afa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZlZDdmM2FhOGY4NWI4NjU4YTA4MWEwMzQyYjNhMTJkODEwN2FmYQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-09-20T12:21:08Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-09-20T12:21:08Z"}, "message": "re PR tree-optimization/58453 (Revision 202431 results in miscompare for CPU2006 434.zeusmp)\n\n2013-09-20  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/58453\n\t* tree-loop-distribution.c (distribute_loop): Apply the cost\n\tmodel for -ftree-loop-distribute-patterns, too.\n\n\t* gcc.dg/tree-ssa/ldist-23.c: New testcase.\n\nFrom-SVN: r202775", "tree": {"sha": "91acf755102024f37d660f235c7b7e61f82d7a2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91acf755102024f37d660f235c7b7e61f82d7a2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fed7f3aa8f85b8658a081a0342b3a12d8107afa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fed7f3aa8f85b8658a081a0342b3a12d8107afa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fed7f3aa8f85b8658a081a0342b3a12d8107afa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fed7f3aa8f85b8658a081a0342b3a12d8107afa/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a820c834673a3f4de4c0f303d7c686252f5eee8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a820c834673a3f4de4c0f303d7c686252f5eee8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a820c834673a3f4de4c0f303d7c686252f5eee8c"}], "stats": {"total": 126, "additions": 86, "deletions": 40}, "files": [{"sha": "e4e4a69a87121bb368743e76da95fafa4d9b70d2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fed7f3aa8f85b8658a081a0342b3a12d8107afa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fed7f3aa8f85b8658a081a0342b3a12d8107afa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9fed7f3aa8f85b8658a081a0342b3a12d8107afa", "patch": "@@ -1,3 +1,9 @@\n+2013-09-20  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/58453\n+\t* tree-loop-distribution.c (distribute_loop): Apply the cost\n+\tmodel for -ftree-loop-distribute-patterns, too.\n+\n 2013-09-20  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/58473"}, {"sha": "8d287f1665c781bfeff017441d275a0489f53b41", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fed7f3aa8f85b8658a081a0342b3a12d8107afa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fed7f3aa8f85b8658a081a0342b3a12d8107afa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9fed7f3aa8f85b8658a081a0342b3a12d8107afa", "patch": "@@ -1,3 +1,8 @@\n+2013-09-20  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/58453\n+\t* gcc.dg/tree-ssa/ldist-23.c: New testcase.\n+\n 2013-09-20  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/58099"}, {"sha": "22b82d9920d5c93f259db12e3f8210365cdd01fd", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ldist-23.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fed7f3aa8f85b8658a081a0342b3a12d8107afa/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fed7f3aa8f85b8658a081a0342b3a12d8107afa/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-23.c?ref=9fed7f3aa8f85b8658a081a0342b3a12d8107afa", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -fdump-tree-ldist-details\" } */\n+\n+extern void abort (void);\n+\n+int a[128], b[128], c[128], d[128];\n+\n+void __attribute__((noinline,noclone))\n+foo (void)\n+{\n+  int i;\n+  for (i = 0; i < 128; ++i)\n+    {\n+      a[i] = a[i] + 1;\n+      b[i] = d[i];\n+      c[i] = a[i] / d[i];\n+    }\n+}\n+int main()\n+{\n+  int i;\n+  for (i = 0; i < 128; ++i)\n+    a[i] = i;\n+  for (i = 0; i < 128; ++i)\n+    d[i] = 1;\n+  foo ();\n+  if (c[0] != 1)\n+    abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"split to 2 loops\" \"ldist\" } } */\n+/* { dg-final { scan-tree-dump \"generated memcpy\" \"ldist\" } } */\n+/* { dg-final { cleanup-tree-dump \"ldist\" } } */"}, {"sha": "51b6ef03b4e7d831266e75e606723c21f4e084ee", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 41, "deletions": 40, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fed7f3aa8f85b8658a081a0342b3a12d8107afa/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fed7f3aa8f85b8658a081a0342b3a12d8107afa/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=9fed7f3aa8f85b8658a081a0342b3a12d8107afa", "patch": "@@ -1514,18 +1514,51 @@ distribute_loop (struct loop *loop, vec<gimple> stmts,\n       any_builtin |= partition_builtin_p (partition);\n     }\n \n+  /* If we did not detect any builtin but are not asked to apply\n+     regular loop distribution simply bail out.  */\n+  if (!flag_tree_loop_distribution\n+      && !any_builtin)\n+    {\n+      nbp = 0;\n+      goto ldist_done;\n+    }\n+\n+  /* Apply our simple cost model - fuse partitions with similar\n+     memory accesses.  */\n+  partition_t into;\n+  for (i = 0; partitions.iterate (i, &into); ++i)\n+    {\n+      if (partition_builtin_p (into))\n+\tcontinue;\n+      for (int j = i + 1;\n+\t   partitions.iterate (j, &partition); ++j)\n+\t{\n+\t  if (!partition_builtin_p (partition)\n+\t      && similar_memory_accesses (rdg, into, partition))\n+\t    {\n+\t      if (dump_file && (dump_flags & TDF_DETAILS))\n+\t\t{\n+\t\t  fprintf (dump_file, \"fusing partitions\\n\");\n+\t\t  dump_bitmap (dump_file, into->stmts);\n+\t\t  dump_bitmap (dump_file, partition->stmts);\n+\t\t  fprintf (dump_file, \"because they have similar \"\n+\t\t\t   \"memory accesses\\n\");\n+\t\t}\n+\t      bitmap_ior_into (into->stmts, partition->stmts);\n+\t      if (partition->kind == PKIND_REDUCTION)\n+\t\tinto->kind = PKIND_REDUCTION;\n+\t      partitions.ordered_remove (j);\n+\t      partition_free (partition);\n+\t      j--;\n+\t    }\n+\t}\n+    }\n+\n   /* If we are only distributing patterns fuse all partitions that\n-     were not properly classified as builtins.  Else fuse partitions\n-     with similar memory accesses.  */\n+     were not properly classified as builtins.  */\n   if (!flag_tree_loop_distribution)\n     {\n       partition_t into;\n-      /* If we did not detect any builtin simply bail out.  */\n-      if (!any_builtin)\n-\t{\n-\t  nbp = 0;\n-\t  goto ldist_done;\n-\t}\n       /* Only fuse adjacent non-builtin partitions, see PR53616.\n          ???  Use dependence information to improve partition ordering.  */\n       i = 0;\n@@ -1549,38 +1582,6 @@ distribute_loop (struct loop *loop, vec<gimple> stmts,\n \t}\n       while ((unsigned) i < partitions.length ());\n     }\n-  else\n-    {\n-      partition_t into;\n-      int j;\n-      for (i = 0; partitions.iterate (i, &into); ++i)\n-\t{\n-\t  if (partition_builtin_p (into))\n-\t    continue;\n-\t  for (j = i + 1;\n-\t       partitions.iterate (j, &partition); ++j)\n-\t    {\n-\t      if (!partition_builtin_p (partition)\n-\t\t  && similar_memory_accesses (rdg, into, partition))\n-\t\t{\n-\t\t  if (dump_file && (dump_flags & TDF_DETAILS))\n-\t\t    {\n-\t\t      fprintf (dump_file, \"fusing partitions\\n\");\n-\t\t      dump_bitmap (dump_file, into->stmts);\n-\t\t      dump_bitmap (dump_file, partition->stmts);\n-\t\t      fprintf (dump_file, \"because they have similar \"\n-\t\t\t       \"memory accesses\\n\");\n-\t\t    }\n-\t\t  bitmap_ior_into (into->stmts, partition->stmts);\n-\t\t  if (partition->kind == PKIND_REDUCTION)\n-\t\t    into->kind = PKIND_REDUCTION;\n-\t\t  partitions.ordered_remove (j);\n-\t\t  partition_free (partition);\n-\t\t  j--;\n-\t\t}\n-\t    }\n-\t}\n-    }\n \n   /* Fuse all reduction partitions into the last.  */\n   if (partitions.length () > 1)"}]}