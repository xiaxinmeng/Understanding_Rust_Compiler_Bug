{"sha": "d092f6fce920a07d6dd319105ccf1cb9db05d029", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA5MmY2ZmNlOTIwYTA3ZDZkZDMxOTEwNWNjZjFjYjlkYjA1ZDAyOQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2019-08-09T15:33:18Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2019-08-09T15:33:18Z"}, "message": "[arm] Recognize thumb2 16-bit variants of the add and compare instructions\n\nThe addsi3_compare_op[12] patterns currently only have constraints to\npick the 32-bit variants of the instructions.  Although the assembler\nmay sometimes opportunistically match a 16-bit t2 instruction, there's\nno real control over that within the compiler.  Consequently we might\nemit a 32-bit adds instruction with a 16-bit subs instruction would\nserve equally well.  We do, of course still have to be careful about\nthe small number of boundary cases by controlling the order quite\ncarefully.\n\nThis patch adds the constraints and templates to match the t2 16-bit\nvariants of these instructions.  Now, for example, we can generate\n\n    subs r0, r0, #1 // 16-bit instruction\n\ninstead of \n\n    adds r0, r0, #1 // 32-bit instruction.\n\n\t*confit/arm/arm.md (addsi3_compare_op1): Add 16-bit thumb-2 variants.\n\t(addsi3_compare_op2): Likewise.\n\nFrom-SVN: r274237", "tree": {"sha": "92bda1b70fba7c036ba1306c83562b871aedfa56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92bda1b70fba7c036ba1306c83562b871aedfa56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d092f6fce920a07d6dd319105ccf1cb9db05d029", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d092f6fce920a07d6dd319105ccf1cb9db05d029", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d092f6fce920a07d6dd319105ccf1cb9db05d029", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d092f6fce920a07d6dd319105ccf1cb9db05d029/comments", "author": null, "committer": null, "parents": [{"sha": "9c4cb8615fc71a117c00844fd608ae6788acfd92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c4cb8615fc71a117c00844fd608ae6788acfd92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c4cb8615fc71a117c00844fd608ae6788acfd92"}], "stats": {"total": 35, "additions": 27, "deletions": 8}, "files": [{"sha": "e19322b5a9ecc5282145b75ec0697696db3e365b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d092f6fce920a07d6dd319105ccf1cb9db05d029/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d092f6fce920a07d6dd319105ccf1cb9db05d029/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d092f6fce920a07d6dd319105ccf1cb9db05d029", "patch": "@@ -1,3 +1,8 @@\n+2019-08-09  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t*confit/arm/arm.md (addsi3_compare_op1): Add 16-bit thumb-2 variants.\n+\t(addsi3_compare_op2): Likewise.\n+\n 2019-08-09  Martin Liska  <mliska@suse.cz>\n \n \t* alias.c (alias_ptr_types_compatible_p): Strengten"}, {"sha": "50e1b908f59ccdf8b0d866d9f7b0f7f3050750ea", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d092f6fce920a07d6dd319105ccf1cb9db05d029/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d092f6fce920a07d6dd319105ccf1cb9db05d029/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=d092f6fce920a07d6dd319105ccf1cb9db05d029", "patch": "@@ -930,35 +930,49 @@\n (define_insn \"*addsi3_compare_op1\"\n   [(set (reg:CC_C CC_REGNUM)\n \t(compare:CC_C\n-\t (plus:SI (match_operand:SI 1 \"s_register_operand\" \"r,r,r\")\n-\t\t  (match_operand:SI 2 \"arm_add_operand\" \"I,L,r\"))\n+\t (plus:SI (match_operand:SI 1 \"s_register_operand\" \"l,0,l,0,r,r,r\")\n+\t\t  (match_operand:SI 2 \"arm_add_operand\" \"lPd,Py,lPx,Pw,I,L,r\"))\n \t (match_dup 1)))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=l,l,l,l,r,r,r\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"TARGET_32BIT\"\n   \"@\n+   adds%?\\\\t%0, %1, %2\n+   adds%?\\\\t%0, %0, %2\n+   subs%?\\\\t%0, %1, #%n2\n+   subs%?\\\\t%0, %0, #%n2\n    adds%?\\\\t%0, %1, %2\n    subs%?\\\\t%0, %1, #%n2\n    adds%?\\\\t%0, %1, %2\"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"type\"  \"alus_imm,alus_imm,alus_sreg\")]\n+   (set_attr \"arch\" \"t2,t2,t2,t2,*,*,*\")\n+   (set_attr \"length\" \"2,2,2,2,4,4,4\")\n+   (set_attr \"type\"\n+    \"alus_sreg,alus_imm,alus_sreg,alus_imm,alus_imm,alus_imm,alus_sreg\")]\n )\n \n (define_insn \"*addsi3_compare_op2\"\n   [(set (reg:CC_C CC_REGNUM)\n \t(compare:CC_C\n-\t (plus:SI (match_operand:SI 1 \"s_register_operand\" \"r,r,r\")\n-\t\t  (match_operand:SI 2 \"arm_add_operand\" \"I,L,r\"))\n+\t (plus:SI (match_operand:SI 1 \"s_register_operand\" \"l,0,l,0,r,r,r\")\n+\t\t  (match_operand:SI 2 \"arm_add_operand\" \"lPd,Py,lPx,Pw,I,L,r\"))\n \t (match_dup 2)))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=l,l,l,l,r,r,r\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"TARGET_32BIT\"\n   \"@\n+   adds%?\\\\t%0, %1, %2\n+   adds%?\\\\t%0, %0, %2\n+   subs%?\\\\t%0, %1, #%n2\n+   subs%?\\\\t%0, %0, #%n2\n    adds%?\\\\t%0, %1, %2\n    subs%?\\\\t%0, %1, #%n2\n    adds%?\\\\t%0, %1, %2\"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"type\" \"alus_imm,alus_imm,alus_sreg\")]\n+   (set_attr \"arch\" \"t2,t2,t2,t2,*,*,*\")\n+   (set_attr \"length\" \"2,2,2,2,4,4,4\")\n+   (set_attr \"type\"\n+    \"alus_sreg,alus_imm,alus_sreg,alus_imm,alus_imm,alus_imm,alus_sreg\")]\n )\n \n (define_insn \"*compare_addsi2_op0\""}]}