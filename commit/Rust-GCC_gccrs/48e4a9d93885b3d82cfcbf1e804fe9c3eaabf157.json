{"sha": "48e4a9d93885b3d82cfcbf1e804fe9c3eaabf157", "node_id": "C_kwDOANBUbNoAKDQ4ZTRhOWQ5Mzg4NWIzZDgyY2ZjYmYxZTgwNGZlOWMzZWFhYmYxNTc", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-11-24T21:16:41Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-11-25T15:01:50Z"}, "message": "libstdc++: Do not define operator!= in <random> for C++20\n\nThese overloads are not needed in C++20 as they can be synthesized by\nthe compiler. Removing them means less code to compile when including\nthese headers.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/random.h [three_way_comparison] (operator!=):\n\tDo not define inequality operators when C++20 three way\n\tcomparisons are supported.\n\t* include/ext/random [three_way_comparison] (operator!=):\n\tLikewise.", "tree": {"sha": "26421013b2299948d9a84c99f24d51ca4c3a5662", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26421013b2299948d9a84c99f24d51ca4c3a5662"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48e4a9d93885b3d82cfcbf1e804fe9c3eaabf157", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48e4a9d93885b3d82cfcbf1e804fe9c3eaabf157", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48e4a9d93885b3d82cfcbf1e804fe9c3eaabf157", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48e4a9d93885b3d82cfcbf1e804fe9c3eaabf157/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bd8d119227ff9a4740739e91898258bcd854b9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bd8d119227ff9a4740739e91898258bcd854b9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bd8d119227ff9a4740739e91898258bcd854b9b"}], "stats": {"total": 178, "additions": 148, "deletions": 30}, "files": [{"sha": "3b4e7d42bb576a7e60442373e4c29fb7c0453986", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 90, "deletions": 16, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48e4a9d93885b3d82cfcbf1e804fe9c3eaabf157/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48e4a9d93885b3d82cfcbf1e804fe9c3eaabf157/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=48e4a9d93885b3d82cfcbf1e804fe9c3eaabf157", "patch": "@@ -423,6 +423,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _UIntType _M_x;\n     };\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   /**\n    * @brief Compares two linear congruential random number generator\n    * objects of the same type for inequality.\n@@ -441,7 +442,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       const std::linear_congruential_engine<_UIntType, __a,\n \t       __c, __m>& __rhs)\n     { return !(__lhs == __rhs); }\n-\n+#endif\n \n   /**\n    * A generalized feedback shift register discrete random number generator.\n@@ -656,6 +657,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       size_t    _M_p;\n     };\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   /**\n    * @brief Compares two % mersenne_twister_engine random number generator\n    *        objects of the same type for inequality.\n@@ -679,7 +681,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       const std::mersenne_twister_engine<_UIntType, __w, __n, __m,\n \t       __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>& __rhs)\n     { return !(__lhs == __rhs); }\n-\n+#endif\n \n   /**\n    * @brief The Marsaglia-Zaman generator.\n@@ -862,6 +864,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       size_t     _M_p;\t\t\t///< Current index of x(i - r).\n     };\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   /**\n    * @brief Compares two % subtract_with_carry_engine random number\n    *        generator objects of the same type for inequality.\n@@ -881,7 +884,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       const std::subtract_with_carry_engine<_UIntType, __w,\n \t       __s, __r>& __rhs)\n     { return !(__lhs == __rhs); }\n-\n+#endif\n \n   /**\n    * Produces random numbers from some base engine by discarding blocks of\n@@ -1087,6 +1090,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       size_t _M_n;\n     };\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   /**\n    * @brief Compares two %discard_block_engine random number generator\n    *        objects of the same type for inequality.\n@@ -1105,7 +1109,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       const std::discard_block_engine<_RandomNumberEngine, __p,\n \t       __r>& __rhs)\n     { return !(__lhs == __rhs); }\n-\n+#endif\n \n   /**\n    * Produces random numbers by combining random numbers from some base\n@@ -1284,6 +1288,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _RandomNumberEngine _M_b;\n     };\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   /**\n    * @brief Compares two %independent_bits_engine random number generator\n    * objects of the same type for inequality.\n@@ -1303,6 +1308,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       const std::independent_bits_engine<_RandomNumberEngine, __w,\n \t       _UIntType>& __rhs)\n     { return !(__lhs == __rhs); }\n+#endif\n \n   /**\n    * @brief Inserts the current state of a %independent_bits_engine random\n@@ -1541,6 +1547,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       result_type _M_y;\n     };\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   /**\n    * Compares two %shuffle_order_engine random number generator objects\n    * of the same type for inequality.\n@@ -1559,7 +1566,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       const std::shuffle_order_engine<_RandomNumberEngine,\n \t       __k>& __rhs)\n     { return !(__lhs == __rhs); }\n-\n+#endif\n \n   /**\n    * The classic Minimum Standard rand0 of Lewis, Goodman, and Miller.\n@@ -1703,6 +1710,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // std::uniform_int_distribution is defined in <bits/uniform_int_dist.h>\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   /**\n    * @brief Return true if two uniform integer distributions have\n    *        different parameters.\n@@ -1712,6 +1720,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator!=(const std::uniform_int_distribution<_IntType>& __d1,\n \t       const std::uniform_int_distribution<_IntType>& __d2)\n     { return !(__d1 == __d2); }\n+#endif\n \n   /**\n    * @brief Inserts a %uniform_int_distribution random number\n@@ -1786,9 +1795,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n \tfriend bool\n \toperator!=(const param_type& __p1, const param_type& __p2)\n \t{ return !(__p1 == __p2); }\n+#endif\n \n       private:\n \t_RealType _M_a;\n@@ -1924,6 +1935,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       param_type _M_param;\n     };\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   /**\n    * @brief Return true if two uniform real distributions have\n    *        different parameters.\n@@ -1933,6 +1945,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator!=(const std::uniform_real_distribution<_IntType>& __d1,\n \t       const std::uniform_real_distribution<_IntType>& __d2)\n     { return !(__d1 == __d2); }\n+#endif\n \n   /**\n    * @brief Inserts a %uniform_real_distribution random number\n@@ -2017,9 +2030,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{ return (__p1._M_mean == __p2._M_mean\n \t\t  && __p1._M_stddev == __p2._M_stddev); }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n \tfriend bool\n \toperator!=(const param_type& __p1, const param_type& __p2)\n \t{ return !(__p1 == __p2); }\n+#endif\n \n       private:\n \t_RealType _M_mean;\n@@ -2182,6 +2197,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       bool        _M_saved_available = false;\n     };\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   /**\n    * @brief Return true if two normal distributions are different.\n    */\n@@ -2190,7 +2206,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator!=(const std::normal_distribution<_RealType>& __d1,\n \t       const std::normal_distribution<_RealType>& __d2)\n     { return !(__d1 == __d2); }\n-\n+#endif\n \n   /**\n    * @brief A lognormal_distribution random number distribution.\n@@ -2235,9 +2251,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_m == __p2._M_m && __p1._M_s == __p2._M_s; }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n \tfriend bool\n \toperator!=(const param_type& __p1, const param_type& __p2)\n \t{ return !(__p1 == __p2); }\n+#endif\n \n       private:\n \t_RealType _M_m;\n@@ -2393,6 +2411,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       std::normal_distribution<result_type> _M_nd;\n     };\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   /**\n    * @brief Return true if two lognormal distributions are different.\n    */\n@@ -2401,7 +2420,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator!=(const std::lognormal_distribution<_RealType>& __d1,\n \t       const std::lognormal_distribution<_RealType>& __d2)\n     { return !(__d1 == __d2); }\n-\n+#endif\n \n   /**\n    * @brief A gamma continuous distribution for random numbers.\n@@ -2451,9 +2470,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{ return (__p1._M_alpha == __p2._M_alpha\n \t\t  && __p1._M_beta == __p2._M_beta); }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n \tfriend bool\n \toperator!=(const param_type& __p1, const param_type& __p2)\n \t{ return !(__p1 == __p2); }\n+#endif\n \n       private:\n \tvoid\n@@ -2624,6 +2645,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       std::normal_distribution<result_type> _M_nd;\n     };\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   /**\n    * @brief Return true if two gamma distributions are different.\n    */\n@@ -2632,7 +2654,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n      operator!=(const std::gamma_distribution<_RealType>& __d1,\n \t\tconst std::gamma_distribution<_RealType>& __d2)\n     { return !(__d1 == __d2); }\n-\n+#endif\n \n   /**\n    * @brief A chi_squared_distribution random number distribution.\n@@ -2670,9 +2692,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_n == __p2._M_n; }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n \tfriend bool\n \toperator!=(const param_type& __p1, const param_type& __p2)\n \t{ return !(__p1 == __p2); }\n+#endif\n \n       private:\n \t_RealType _M_n;\n@@ -2848,6 +2872,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       std::gamma_distribution<result_type> _M_gd;\n     };\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   /**\n    * @brief Return true if two Chi-squared distributions are different.\n    */\n@@ -2856,7 +2881,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator!=(const std::chi_squared_distribution<_RealType>& __d1,\n \t       const std::chi_squared_distribution<_RealType>& __d2)\n     { return !(__d1 == __d2); }\n-\n+#endif\n \n   /**\n    * @brief A cauchy_distribution random number distribution.\n@@ -2898,9 +2923,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n \tfriend bool\n \toperator!=(const param_type& __p1, const param_type& __p2)\n \t{ return !(__p1 == __p2); }\n+#endif\n \n       private:\n \t_RealType _M_a;\n@@ -3021,6 +3048,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       param_type _M_param;\n     };\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   /**\n    * @brief Return true if two Cauchy distributions have\n    *        different parameters.\n@@ -3030,6 +3058,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator!=(const std::cauchy_distribution<_RealType>& __d1,\n \t       const std::cauchy_distribution<_RealType>& __d2)\n     { return !(__d1 == __d2); }\n+#endif\n \n   /**\n    * @brief Inserts a %cauchy_distribution random number distribution\n@@ -3106,9 +3135,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_m == __p2._M_m && __p1._M_n == __p2._M_n; }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n \tfriend bool\n \toperator!=(const param_type& __p1, const param_type& __p2)\n \t{ return !(__p1 == __p2); }\n+#endif\n \n       private:\n \t_RealType _M_m;\n@@ -3286,6 +3317,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       std::gamma_distribution<result_type> _M_gd_x, _M_gd_y;\n     };\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   /**\n    * @brief Return true if two Fisher f distributions are different.\n    */\n@@ -3294,6 +3326,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator!=(const std::fisher_f_distribution<_RealType>& __d1,\n \t       const std::fisher_f_distribution<_RealType>& __d2)\n     { return !(__d1 == __d2); }\n+#endif\n \n   /**\n    * @brief A student_t_distribution random number distribution.\n@@ -3334,9 +3367,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_n == __p2._M_n; }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n \tfriend bool\n \toperator!=(const param_type& __p1, const param_type& __p2)\n \t{ return !(__p1 == __p2); }\n+#endif\n \n       private:\n \t_RealType _M_n;\n@@ -3508,6 +3543,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       std::gamma_distribution<result_type> _M_gd;\n     };\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   /**\n    * @brief Return true if two Student t distributions are different.\n    */\n@@ -3516,7 +3552,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator!=(const std::student_t_distribution<_RealType>& __d1,\n \t       const std::student_t_distribution<_RealType>& __d2)\n     { return !(__d1 == __d2); }\n-\n+#endif\n \n   /// @} group random_distributions_normal\n \n@@ -3560,9 +3596,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       operator==(const param_type& __p1, const param_type& __p2)\n       { return __p1._M_p == __p2._M_p; }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n       friend bool\n       operator!=(const param_type& __p1, const param_type& __p2)\n       { return !(__p1 == __p2); }\n+#endif\n \n     private:\n       double _M_p;\n@@ -3696,6 +3734,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     param_type _M_param;\n   };\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   /**\n    * @brief Return true if two Bernoulli distributions have\n    *        different parameters.\n@@ -3704,6 +3743,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   operator!=(const std::bernoulli_distribution& __d1,\n \t     const std::bernoulli_distribution& __d2)\n   { return !(__d1 == __d2); }\n+#endif\n \n   /**\n    * @brief Inserts a %bernoulli_distribution random number distribution\n@@ -3788,9 +3828,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_t == __p2._M_t && __p1._M_p == __p2._M_p; }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n \tfriend bool\n \toperator!=(const param_type& __p1, const param_type& __p2)\n \t{ return !(__p1 == __p2); }\n+#endif\n \n       private:\n \tvoid\n@@ -3971,6 +4013,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       std::normal_distribution<double> _M_nd;\n     };\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   /**\n    * @brief Return true if two binomial distributions are different.\n    */\n@@ -3979,7 +4022,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator!=(const std::binomial_distribution<_IntType>& __d1,\n \t       const std::binomial_distribution<_IntType>& __d2)\n     { return !(__d1 == __d2); }\n-\n+#endif\n \n   /**\n    * @brief A discrete geometric random number distribution.\n@@ -4022,9 +4065,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_p == __p2._M_p; }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n \tfriend bool\n \toperator!=(const param_type& __p1, const param_type& __p2)\n \t{ return !(__p1 == __p2); }\n+#endif\n \n       private:\n \tvoid\n@@ -4149,6 +4194,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       param_type _M_param;\n     };\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   /**\n    * @brief Return true if two geometric distributions have\n    *        different parameters.\n@@ -4158,6 +4204,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator!=(const std::geometric_distribution<_IntType>& __d1,\n \t       const std::geometric_distribution<_IntType>& __d2)\n     { return !(__d1 == __d2); }\n+#endif\n \n   /**\n    * @brief Inserts a %geometric_distribution random number distribution\n@@ -4234,9 +4281,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_k == __p2._M_k && __p1._M_p == __p2._M_p; }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n \tfriend bool\n \toperator!=(const param_type& __p1, const param_type& __p2)\n \t{ return !(__p1 == __p2); }\n+#endif\n \n       private:\n \t_IntType _M_k;\n@@ -4404,6 +4453,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       std::gamma_distribution<double> _M_gd;\n     };\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   /**\n    * @brief Return true if two negative binomial distributions are different.\n    */\n@@ -4412,7 +4462,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator!=(const std::negative_binomial_distribution<_IntType>& __d1,\n \t       const std::negative_binomial_distribution<_IntType>& __d2)\n     { return !(__d1 == __d2); }\n-\n+#endif\n \n   /// @} group random_distributions_bernoulli\n \n@@ -4463,9 +4513,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_mean == __p2._M_mean; }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n \tfriend bool\n \toperator!=(const param_type& __p1, const param_type& __p2)\n \t{ return !(__p1 == __p2); }\n+#endif\n \n       private:\n \t// Hosts either log(mean) or the threshold of the simple method.\n@@ -4630,6 +4682,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       std::normal_distribution<double> _M_nd;\n     };\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   /**\n    * @brief Return true if two Poisson distributions are different.\n    */\n@@ -4638,7 +4691,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator!=(const std::poisson_distribution<_IntType>& __d1,\n \t       const std::poisson_distribution<_IntType>& __d2)\n     { return !(__d1 == __d2); }\n-\n+#endif\n \n   /**\n    * @brief An exponential continuous distribution for random numbers.\n@@ -4687,9 +4740,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_lambda == __p2._M_lambda; }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n \tfriend bool\n \toperator!=(const param_type& __p1, const param_type& __p2)\n \t{ return !(__p1 == __p2); }\n+#endif\n \n       private:\n \t_RealType _M_lambda;\n@@ -4820,6 +4875,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       param_type _M_param;\n     };\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   /**\n    * @brief Return true if two exponential distributions have different\n    *        parameters.\n@@ -4829,6 +4885,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator!=(const std::exponential_distribution<_RealType>& __d1,\n \t       const std::exponential_distribution<_RealType>& __d2)\n     { return !(__d1 == __d2); }\n+#endif\n \n   /**\n    * @brief Inserts a %exponential_distribution random number distribution\n@@ -4904,9 +4961,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n \tfriend bool\n \toperator!=(const param_type& __p1, const param_type& __p2)\n \t{ return !(__p1 == __p2); }\n+#endif\n \n       private:\n \t_RealType _M_a;\n@@ -5030,6 +5089,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       param_type _M_param;\n     };\n \n+#if __cpp_impl_three_way_comparison < 201907L\n    /**\n     * @brief Return true if two Weibull distributions have different\n     *        parameters.\n@@ -5039,6 +5099,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator!=(const std::weibull_distribution<_RealType>& __d1,\n \t       const std::weibull_distribution<_RealType>& __d2)\n     { return !(__d1 == __d2); }\n+#endif\n \n   /**\n    * @brief Inserts a %weibull_distribution random number distribution\n@@ -5114,9 +5175,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n \tfriend bool\n \toperator!=(const param_type& __p1, const param_type& __p2)\n \t{ return !(__p1 == __p2); }\n+#endif\n \n       private:\n \t_RealType _M_a;\n@@ -5240,6 +5303,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       param_type _M_param;\n     };\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   /**\n     * @brief Return true if two extreme value distributions have different\n     *        parameters.\n@@ -5249,6 +5313,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator!=(const std::extreme_value_distribution<_RealType>& __d1,\n \t       const std::extreme_value_distribution<_RealType>& __d2)\n     { return !(__d1 == __d2); }\n+#endif\n \n   /**\n    * @brief Inserts a %extreme_value_distribution random number distribution\n@@ -5333,9 +5398,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_prob == __p2._M_prob; }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n \tfriend bool\n \toperator!=(const param_type& __p1, const param_type& __p2)\n \t{ return !(__p1 == __p2); }\n+#endif\n \n       private:\n \tvoid\n@@ -5505,6 +5572,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       param_type _M_param;\n     };\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   /**\n     * @brief Return true if two discrete distributions have different\n     *        parameters.\n@@ -5514,7 +5582,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator!=(const std::discrete_distribution<_IntType>& __d1,\n \t       const std::discrete_distribution<_IntType>& __d2)\n     { return !(__d1 == __d2); }\n-\n+#endif\n \n   /**\n    * @brief A piecewise_constant_distribution random number distribution.\n@@ -5579,9 +5647,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_int == __p2._M_int && __p1._M_den == __p2._M_den; }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n \tfriend bool\n \toperator!=(const param_type& __p1, const param_type& __p2)\n \t{ return !(__p1 == __p2); }\n+#endif\n \n       private:\n \tvoid\n@@ -5776,6 +5846,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       param_type _M_param;\n     };\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   /**\n     * @brief Return true if two piecewise constant distributions have \n     *        different parameters.\n@@ -5785,7 +5856,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator!=(const std::piecewise_constant_distribution<_RealType>& __d1,\n \t       const std::piecewise_constant_distribution<_RealType>& __d2)\n     { return !(__d1 == __d2); }\n-\n+#endif\n \n   /**\n    * @brief A piecewise_linear_distribution random number distribution.\n@@ -5850,9 +5921,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_int == __p2._M_int && __p1._M_den == __p2._M_den; }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n \tfriend bool\n \toperator!=(const param_type& __p1, const param_type& __p2)\n \t{ return !(__p1 == __p2); }\n+#endif\n \n       private:\n \tvoid\n@@ -6049,6 +6122,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       param_type _M_param;\n     };\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   /**\n     * @brief Return true if two piecewise linear distributions have\n     *        different parameters.\n@@ -6058,7 +6132,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator!=(const std::piecewise_linear_distribution<_RealType>& __d1,\n \t       const std::piecewise_linear_distribution<_RealType>& __d2)\n     { return !(__d1 == __d2); }\n-\n+#endif\n \n   /// @} group random_distributions_poisson\n "}, {"sha": "eb7eaf5bc6989586166f044974d396882730e77c", "filename": "libstdc++-v3/include/ext/random", "status": "modified", "additions": 58, "deletions": 14, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48e4a9d93885b3d82cfcbf1e804fe9c3eaabf157/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48e4a9d93885b3d82cfcbf1e804fe9c3eaabf157/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom?ref=48e4a9d93885b3d82cfcbf1e804fe9c3eaabf157", "patch": "@@ -208,7 +208,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       void _M_period_certification();\n   };\n \n-\n+#if __cpp_impl_three_way_comparison < 201907L\n   template<typename _UIntType, size_t __m,\n \t   size_t __pos1, size_t __sl1, size_t __sl2,\n \t   size_t __sr1, size_t __sr2,\n@@ -224,7 +224,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       __m, __pos1, __sl1, __sl2, __sr1, __sr2, __msk1, __msk2, __msk3,\n \t       __msk4, __parity1, __parity2, __parity3, __parity4>& __rhs)\n     { return !(__lhs == __rhs); }\n-\n+#endif\n \n   /* Definitions for the SIMD-oriented Fast Mersenne Twister as defined\n    * in the C implementation by Daito and Matsumoto, as both a 32-bit\n@@ -451,9 +451,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{ return (__p1._M_alpha == __p2._M_alpha\n \t\t  && __p1._M_beta == __p2._M_beta); }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n \tfriend bool\n \toperator!=(const param_type& __p1, const param_type& __p2)\n \t{ return !(__p1 == __p2); }\n+#endif\n \n       private:\n \tvoid\n@@ -616,6 +618,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       param_type _M_param;\n     };\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   /**\n    * @brief Return true if two beta distributions are different.\n    */\n@@ -624,7 +627,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator!=(const __gnu_cxx::beta_distribution<_RealType>& __d1,\n \t       const __gnu_cxx::beta_distribution<_RealType>& __d2)\n     { return !(__d1 == __d2); }\n-\n+#endif\n \n   /**\n    * @brief A multi-variate normal continuous distribution for random numbers.\n@@ -735,9 +738,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_mean == __p2._M_mean && __p1._M_t == __p2._M_t; }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n \tfriend bool\n \toperator!=(const param_type& __p1, const param_type& __p2)\n \t{ return !(__p1 == __p2); }\n+#endif\n \n       private:\n \ttemplate <typename _InputIterator1, typename _InputIterator2>\n@@ -943,6 +948,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       std::normal_distribution<_RealType> _M_nd;\n   };\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   /**\n    * @brief Return true if two multi-variate normal distributions are\n    * different.\n@@ -954,7 +960,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       const __gnu_cxx::normal_mv_distribution<_Dimen, _RealType>&\n \t       __d2)\n     { return !(__d1 == __d2); }\n-\n+#endif\n \n   /**\n    * @brief A Rice continuous distribution for random numbers.\n@@ -1014,9 +1020,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_nu == __p2._M_nu && __p1._M_sigma == __p2._M_sigma; }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n \tfriend bool\n \toperator!=(const param_type& __p1, const param_type& __p2)\n \t{ return !(__p1 == __p2); }\n+#endif\n \n       private:\n \tvoid _M_initialize();\n@@ -1209,6 +1217,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       std::normal_distribution<result_type> _M_ndy;\n     };\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   /**\n    * @brief Return true if two Rice distributions are not equal.\n    */\n@@ -1217,7 +1226,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator!=(const rice_distribution<_RealType1>& __d1,\n \t       const rice_distribution<_RealType1>& __d2)\n     { return !(__d1 == __d2); }\n-\n+#endif\n \n   /**\n    * @brief A Nakagami continuous distribution for random numbers.\n@@ -1268,9 +1277,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_mu == __p2._M_mu && __p1._M_omega == __p2._M_omega; }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n \tfriend bool\n \toperator!=(const param_type& __p1, const param_type& __p2)\n \t{ return !(__p1 == __p2); }\n+#endif\n \n       private:\n \tvoid _M_initialize();\n@@ -1442,6 +1453,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       std::gamma_distribution<result_type> _M_gd;\n     };\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   /**\n    * @brief Return true if two Nakagami distributions are not equal.\n    */\n@@ -1450,7 +1462,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator!=(const nakagami_distribution<_RealType>& __d1,\n \t       const nakagami_distribution<_RealType>& __d2)\n     { return !(__d1 == __d2); }\n-\n+#endif\n \n   /**\n    * @brief A Pareto continuous distribution for random numbers.\n@@ -1513,9 +1525,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_alpha == __p2._M_alpha && __p1._M_mu == __p2._M_mu; }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n \tfriend bool\n \toperator!=(const param_type& __p1, const param_type& __p2)\n \t{ return !(__p1 == __p2); }\n+#endif\n \n       private:\n \tvoid _M_initialize();\n@@ -1691,6 +1705,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       std::uniform_real_distribution<result_type> _M_ud;\n     };\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   /**\n    * @brief Return true if two Pareto distributions are not equal.\n    */\n@@ -1699,7 +1714,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator!=(const pareto_distribution<_RealType>& __d1,\n \t       const pareto_distribution<_RealType>& __d2)\n     { return !(__d1 == __d2); }\n-\n+#endif\n \n   /**\n    * @brief A K continuous distribution for random numbers.\n@@ -1770,9 +1785,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      && __p1._M_nu == __p2._M_nu;\n \t}\n \n+#if __cpp_impl_three_way_comparison < 201907L\n \tfriend bool\n \toperator!=(const param_type& __p1, const param_type& __p2)\n \t{ return !(__p1 == __p2); }\n+#endif\n \n       private:\n \tvoid _M_initialize();\n@@ -1950,6 +1967,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       std::gamma_distribution<result_type> _M_gd2;\n     };\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   /**\n    * @brief Return true if two K distributions are not equal.\n    */\n@@ -1958,7 +1976,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator!=(const k_distribution<_RealType>& __d1,\n \t       const k_distribution<_RealType>& __d2)\n     { return !(__d1 == __d2); }\n-\n+#endif\n \n   /**\n    * @brief An arcsine continuous distribution for random numbers.\n@@ -2012,9 +2030,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n \tfriend bool\n \toperator!=(const param_type& __p1, const param_type& __p2)\n \t{ return !(__p1 == __p2); }\n+#endif\n \n       private:\n \tvoid _M_initialize();\n@@ -2191,6 +2211,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       std::uniform_real_distribution<result_type> _M_ud;\n     };\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   /**\n    * @brief Return true if two arcsine distributions are not equal.\n    */\n@@ -2199,7 +2220,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator!=(const arcsine_distribution<_RealType>& __d1,\n \t       const arcsine_distribution<_RealType>& __d2)\n     { return !(__d1 == __d2); }\n-\n+#endif\n \n   /**\n    * @brief A Hoyt continuous distribution for random numbers.\n@@ -2260,9 +2281,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_q == __p2._M_q && __p1._M_omega == __p2._M_omega; }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n \tfriend bool\n \toperator!=(const param_type& __p1, const param_type& __p2)\n \t{ return !(__p1 == __p2); }\n+#endif\n \n       private:\n \tvoid _M_initialize();\n@@ -2436,6 +2459,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       std::exponential_distribution<result_type> _M_ed;\n     };\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   /**\n    * @brief Return true if two Hoyt distributions are not equal.\n    */\n@@ -2444,7 +2468,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator!=(const hoyt_distribution<_RealType>& __d1,\n \t       const hoyt_distribution<_RealType>& __d2)\n     { return !(__d1 == __d2); }\n-\n+#endif\n \n   /**\n    * @brief A triangular distribution for random numbers.\n@@ -2516,9 +2540,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t  && __p1._M_c == __p2._M_c);\n \t}\n \n+#if __cpp_impl_three_way_comparison < 201907L\n \tfriend bool\n \toperator!=(const param_type& __p1, const param_type& __p2)\n \t{ return !(__p1 == __p2); }\n+#endif\n \n       private:\n \n@@ -2700,6 +2726,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       param_type _M_param;\n     };\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   /**\n    * @brief Return true if two triangle distributions are different.\n    */\n@@ -2708,7 +2735,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator!=(const __gnu_cxx::triangular_distribution<_RealType>& __d1,\n \t       const __gnu_cxx::triangular_distribution<_RealType>& __d2)\n     { return !(__d1 == __d2); }\n-\n+#endif\n \n   /**\n    * @brief A von Mises distribution for random numbers.\n@@ -2776,9 +2803,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_mu == __p2._M_mu && __p1._M_kappa == __p2._M_kappa; }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n \tfriend bool\n \toperator!=(const param_type& __p1, const param_type& __p2)\n \t{ return !(__p1 == __p2); }\n+#endif\n \n       private:\n \t_RealType _M_mu;\n@@ -2942,6 +2971,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       param_type _M_param;\n     };\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   /**\n    * @brief Return true if two von Mises distributions are different.\n    */\n@@ -2950,7 +2980,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator!=(const __gnu_cxx::von_mises_distribution<_RealType>& __d1,\n \t       const __gnu_cxx::von_mises_distribution<_RealType>& __d2)\n     { return !(__d1 == __d2); }\n-\n+#endif\n \n   /**\n    * @brief A discrete hypergeometric random number distribution.\n@@ -3024,9 +3054,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      && (__p1._M_K == __p2._M_K)\n \t      && (__p1._M_n == __p2._M_n); }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n \tfriend bool\n \toperator!=(const param_type& __p1, const param_type& __p2)\n \t{ return !(__p1 == __p2); }\n+#endif\n \n       private:\n \n@@ -3212,6 +3244,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       param_type _M_param;\n     };\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   /**\n    * @brief Return true if two hypergeometric distributions are different.\n    */\n@@ -3220,6 +3253,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator!=(const __gnu_cxx::hypergeometric_distribution<_UIntType>& __d1,\n \t       const __gnu_cxx::hypergeometric_distribution<_UIntType>& __d2)\n     { return !(__d1 == __d2); }\n+#endif\n \n   /**\n    * @brief A logistic continuous distribution for random numbers.\n@@ -3280,9 +3314,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n \tfriend bool\n \toperator!=(const param_type& __p1, const param_type& __p2)\n \t{ return !(__p1 == __p2); }\n+#endif\n \n       private:\n \tvoid _M_initialize();\n@@ -3443,6 +3479,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       param_type _M_param;\n     };\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   /**\n    * @brief Return true if two logistic distributions are not equal.\n    */\n@@ -3451,7 +3488,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator!=(const logistic_distribution<_RealType1>& __d1,\n \t       const logistic_distribution<_RealType1>& __d2)\n     { return !(__d1 == __d2); }\n-\n+#endif\n \n   /**\n    * @brief A distribution for random coordinates on a unit sphere.\n@@ -3479,9 +3516,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type&, const param_type&)\n \t{ return true; }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n \tfriend bool\n \toperator!=(const param_type&, const param_type&)\n \t{ return false; }\n+#endif\n       };\n \n       /**\n@@ -3636,6 +3675,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       std::normal_distribution<_RealType> _M_nd;\n     };\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   /**\n    * @brief Return true if two uniform on sphere distributions are different.\n    */\n@@ -3646,7 +3686,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       const __gnu_cxx::uniform_on_sphere_distribution<_Dimen,\n \t       _RealType>& __d2)\n     { return !(__d1 == __d2); }\n-\n+#endif\n \n   /**\n    * @brief A distribution for random coordinates inside a unit sphere.\n@@ -3686,9 +3726,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_radius == __p2._M_radius; }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n \tfriend bool\n \toperator!=(const param_type& __p1, const param_type& __p2)\n \t{ return !(__p1 == __p2); }\n+#endif\n \n       private:\n \t_RealType _M_radius;\n@@ -3862,6 +3904,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       uniform_on_sphere_distribution<_Dimen, _RealType> _M_uosd;\n     };\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   /**\n    * @brief Return true if two uniform on sphere distributions are different.\n    */\n@@ -3872,6 +3915,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       const __gnu_cxx::uniform_inside_sphere_distribution<_Dimen,\n \t       _RealType>& __d2)\n     { return !(__d1 == __d2); }\n+#endif\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace __gnu_cxx"}]}