{"sha": "24d51e749570dcb85bd43d3b528f58ad6141de26", "node_id": "C_kwDOANBUbNoAKDI0ZDUxZTc0OTU3MGRjYjg1YmQ0M2QzYjUyOGY1OGFkNjE0MWRlMjY", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-03-21T13:57:28Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-03-21T20:47:04Z"}, "message": "c++: designated init and aggregate members [PR103337]\n\nOur C++20 designated initializer handling was broken with members of class\ntype; we would find the relevant member and then try to find a member of\nthe member with the same name.  Or we would sometimes ignore the designator\nentirely.  The former problem is fixed by the change to reshape_init_class,\nthe latter by the change to reshape_init_r.\n\n\tPR c++/103337\n\tPR c++/102740\n\tPR c++/103299\n\tPR c++/102538\n\ngcc/cp/ChangeLog:\n\n\t* decl.cc (reshape_init_class): Avoid looking for designator\n\tafter we found it.\n\t(reshape_init_r): Keep looking for designator.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/ext/flexary3.C: Remove one error.\n\t* g++.dg/parse/pr43765.C: Likewise.\n\t* g++.dg/cpp2a/desig22.C: New test.\n\t* g++.dg/cpp2a/desig23.C: New test.\n\t* g++.dg/cpp2a/desig24.C: New test.\n\t* g++.dg/cpp2a/desig25.C: New test.", "tree": {"sha": "b03f3d2b85f39d1aaf47e87fc2ebc514b814ac7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b03f3d2b85f39d1aaf47e87fc2ebc514b814ac7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24d51e749570dcb85bd43d3b528f58ad6141de26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24d51e749570dcb85bd43d3b528f58ad6141de26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24d51e749570dcb85bd43d3b528f58ad6141de26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24d51e749570dcb85bd43d3b528f58ad6141de26/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3e191b4104c7d6a177f66dbb77cabf05ab63781", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3e191b4104c7d6a177f66dbb77cabf05ab63781", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3e191b4104c7d6a177f66dbb77cabf05ab63781"}], "stats": {"total": 110, "additions": 101, "deletions": 9}, "files": [{"sha": "34d9dad9fb0ba5c4a6e297380c01d143d4254913", "filename": "gcc/cp/decl.cc", "status": "modified", "additions": 42, "deletions": 5, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d51e749570dcb85bd43d3b528f58ad6141de26/gcc%2Fcp%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d51e749570dcb85bd43d3b528f58ad6141de26/gcc%2Fcp%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.cc?ref=24d51e749570dcb85bd43d3b528f58ad6141de26", "patch": "@@ -6598,8 +6598,9 @@ reshape_init_class (tree type, reshape_iter *d, bool first_initializer_p,\n     {\n       tree field_init;\n       constructor_elt *old_cur = d->cur;\n+      bool direct_desig = false;\n \n-      /* Handle designated initializers, as an extension.  */\n+      /* Handle C++20 designated initializers.  */\n       if (d->cur->index)\n \t{\n \t  if (d->cur->index == error_mark_node)\n@@ -6617,7 +6618,10 @@ reshape_init_class (tree type, reshape_iter *d, bool first_initializer_p,\n \t\t}\n \t    }\n \t  else if (TREE_CODE (d->cur->index) == IDENTIFIER_NODE)\n-\t    field = get_class_binding (type, d->cur->index);\n+\t    {\n+\t      field = get_class_binding (type, d->cur->index);\n+\t      direct_desig = true;\n+\t    }\n \t  else\n \t    {\n \t      if (complain & tf_error)\n@@ -6669,6 +6673,7 @@ reshape_init_class (tree type, reshape_iter *d, bool first_initializer_p,\n \t\t  break;\n \t      gcc_assert (aafield);\n \t      field = aafield;\n+\t      direct_desig = false;\n \t    }\n \t}\n \n@@ -6683,9 +6688,32 @@ reshape_init_class (tree type, reshape_iter *d, bool first_initializer_p,\n \t   assumed to correspond to no elements of the initializer list.  */\n \tgoto continue_;\n \n-      field_init = reshape_init_r (TREE_TYPE (field), d,\n-\t\t\t\t   /*first_initializer_p=*/NULL_TREE,\n-\t\t\t\t   complain);\n+      if (direct_desig)\n+\t{\n+\t  /* The designated field F is initialized from this one element:\n+\t     Temporarily clear the designator so a recursive reshape_init_class\n+\t     doesn't try to find it again in F, and adjust d->end so we don't\n+\t     try to use the next initializer to initialize another member of F.\n+\n+\t     Note that we don't want these changes if we found the designator\n+\t     inside an anon aggr above; we leave them alone to implement:\n+\n+\t     \"If the element is an anonymous union member and the initializer\n+\t     list is a brace-enclosed designated- initializer-list, the element\n+\t     is initialized by the designated-initializer-list { D }, where D\n+\t     is the designated- initializer-clause naming a member of the\n+\t     anonymous union member.\"  */\n+\t  auto end_ = make_temp_override (d->end, d->cur + 1);\n+\t  auto idx_ = make_temp_override (d->cur->index, NULL_TREE);\n+\t  field_init = reshape_init_r (TREE_TYPE (field), d,\n+\t\t\t\t       /*first_initializer_p=*/NULL_TREE,\n+\t\t\t\t       complain);\n+\t}\n+      else\n+\tfield_init = reshape_init_r (TREE_TYPE (field), d,\n+\t\t\t\t     /*first_initializer_p=*/NULL_TREE,\n+\t\t\t\t     complain);\n+\n       if (field_init == error_mark_node)\n \treturn error_mark_node;\n \n@@ -6941,6 +6969,15 @@ reshape_init_r (tree type, reshape_iter *d, tree first_initializer_p,\n \t     to handle initialization of arrays and similar.  */\n \t  else if (COMPOUND_LITERAL_P (stripped_init))\n \t    gcc_assert (!BRACE_ENCLOSED_INITIALIZER_P (stripped_init));\n+\t  /* If we have an unresolved designator, we need to find the member it\n+\t     designates within TYPE, so proceed to the routines below.  For\n+\t     FIELD_DECL or INTEGER_CST designators, we're already initializing\n+\t     the designated element.  */\n+\t  else if (d->cur->index\n+\t\t   && TREE_CODE (d->cur->index) == IDENTIFIER_NODE)\n+\t    /* Brace elision with designators is only permitted for anonymous\n+\t       aggregates.  */\n+\t    gcc_checking_assert (ANON_AGGR_TYPE_P (type));\n \t  /* A CONSTRUCTOR of the target's type is a previously\n \t     digested initializer.  */\n \t  else if (same_type_ignoring_top_level_qualifiers_p (type, init_type))"}, {"sha": "ba083f8e3d5d778e6002203c1d603d2c9f84587a", "filename": "gcc/testsuite/g++.dg/cpp2a/desig22.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d51e749570dcb85bd43d3b528f58ad6141de26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdesig22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d51e749570dcb85bd43d3b528f58ad6141de26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdesig22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdesig22.C?ref=24d51e749570dcb85bd43d3b528f58ad6141de26", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/103337\n+// { dg-do compile { target c++20 } }\n+\n+struct op_t {\n+  struct put_t {\n+    int x;\n+  } put;\n+};\n+\n+op_t x{0};       // OK\n+op_t y{.put=0};  // bogus error: 'op_t::put_t' has no non-static data member named 'put'"}, {"sha": "4354e644f6aa03101fda306fc40876059fa35063", "filename": "gcc/testsuite/g++.dg/cpp2a/desig23.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d51e749570dcb85bd43d3b528f58ad6141de26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdesig23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d51e749570dcb85bd43d3b528f58ad6141de26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdesig23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdesig23.C?ref=24d51e749570dcb85bd43d3b528f58ad6141de26", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/102740\n+// { dg-do compile { target c++20 } }\n+// { dg-additional-options -Wmissing-braces }\n+\n+typedef struct {\n+    union {\n+        struct {\n+            const void* content;\n+        } put;\n+    };\n+} op_t;\n+\n+op_t f(const char* alias) {\n+    return op_t{\n+        .put =\n+            {\n+                .content = alias,\n+            },\n+    };\t\t\t\t// { dg-warning \"missing braces\" }\n+}"}, {"sha": "219cc9c3b8ed9ff699ff7a9a25dc21a8d72bc9b4", "filename": "gcc/testsuite/g++.dg/cpp2a/desig24.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d51e749570dcb85bd43d3b528f58ad6141de26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdesig24.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d51e749570dcb85bd43d3b528f58ad6141de26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdesig24.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdesig24.C?ref=24d51e749570dcb85bd43d3b528f58ad6141de26", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/103299\n+// { dg-do compile { target c++20 } }\n+\n+struct foo {\n+  union {\n+    int fp1{};\n+    char fp2;\n+  };\n+};\n+\n+static_assert(foo{.fp2={}}.fp2 == 0);"}, {"sha": "9da958c29e91ebf31e0761fcb6089bb3e54d400e", "filename": "gcc/testsuite/g++.dg/cpp2a/desig25.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d51e749570dcb85bd43d3b528f58ad6141de26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdesig25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d51e749570dcb85bd43d3b528f58ad6141de26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdesig25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdesig25.C?ref=24d51e749570dcb85bd43d3b528f58ad6141de26", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/102538\n+// { dg-do run { target c++20 } }\n+\n+struct X { union { char r8[8]; int r32[2]; }; };\n+struct Y { X v[1]; };\n+Y x = { { { .r32 = { 5, 6 } } } };\n+\n+int\n+main ()\n+{\n+  if (x.v[0].r32[0] != 5 || x.v[0].r32[1] != 6)\n+    __builtin_abort ();\n+}"}, {"sha": "8344b42dd1639cef53a9a482c718cfb7c2ba3072", "filename": "gcc/testsuite/g++.dg/ext/flexary3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d51e749570dcb85bd43d3b528f58ad6141de26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d51e749570dcb85bd43d3b528f58ad6141de26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary3.C?ref=24d51e749570dcb85bd43d3b528f58ad6141de26", "patch": "@@ -16,7 +16,7 @@ struct s {\n \n int main()\n {\n-    struct s s = { .c = 0 };\t// { dg-error \"initializer\" }\n+    struct s s = { .c = 0 };\n     // { dg-error \"non-static initialization of a flexible array member\" \"\" { target *-*-* } .-1 }\n     return 0;\n }"}, {"sha": "aa099a4d20be9d59a720023a6944c3824b9f65a8", "filename": "gcc/testsuite/g++.dg/parse/pr43765.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d51e749570dcb85bd43d3b528f58ad6141de26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr43765.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d51e749570dcb85bd43d3b528f58ad6141de26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr43765.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr43765.C?ref=24d51e749570dcb85bd43d3b528f58ad6141de26", "patch": "@@ -12,6 +12,6 @@ SomeType vals[] =\n     {\n         { 0, values : temp, },\t // { dg-error \"either all initializer clauses should be designated or none of them should be\" \"\" { target c++2a } }\n         0\n-    };   // { dg-error \"GNU-style designated initializer for an array|cannot convert\" }\n-// (note the error above is on the wrong line)\n-\t // { dg-error \"initialization of flexible array member in a nested context\" \"\" { target *-*-* } .-2 }\n+    };\n+// (note the error below is on the wrong line)\n+// { dg-error \"initialization of flexible array member in a nested context\" \"\" { target *-*-* } .-2 }"}]}