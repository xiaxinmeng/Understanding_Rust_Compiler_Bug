{"sha": "49b9a8c8cc498b1ed2f566bee858e651e14ba37b", "node_id": "C_kwDOANBUbNoAKDQ5YjlhOGM4Y2M0OThiMWVkMmY1NjZiZWU4NThlNjUxZTE0YmEzN2I", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-10-06T17:11:08Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-10-06T20:40:50Z"}, "message": "[PR107170] Avoid copying incompatible types in legacy VRP.\n\nLegacy VRP is calling ranger deep inside the bowels, and then trying to\ncopy an incompatible type.  My previous patch in this area assumed that\nthe only possibility out of vr_values::get_value_range for an\nunsupported type was VARYING, but UNDEFINED can also be returned.\n\n\tPR tree-optimization/107170\n\ngcc/ChangeLog:\n\n\t* vr-values.cc (vr_values::range_of_expr):  Do not die on\n\tunsupported types.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/tree-ssa/pr107170.c: New test.", "tree": {"sha": "ba30488673d752d265d0924ff18e6ffd79818a3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba30488673d752d265d0924ff18e6ffd79818a3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49b9a8c8cc498b1ed2f566bee858e651e14ba37b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49b9a8c8cc498b1ed2f566bee858e651e14ba37b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49b9a8c8cc498b1ed2f566bee858e651e14ba37b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49b9a8c8cc498b1ed2f566bee858e651e14ba37b/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "629b4813e91aba0a8fc9b18434ec1808776a4b3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/629b4813e91aba0a8fc9b18434ec1808776a4b3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/629b4813e91aba0a8fc9b18434ec1808776a4b3d"}], "stats": {"total": 32, "additions": 21, "deletions": 11}, "files": [{"sha": "7a5a4a363f24507a81cedba3ca8d2855c0e4940a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr107170.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49b9a8c8cc498b1ed2f566bee858e651e14ba37b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr107170.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49b9a8c8cc498b1ed2f566bee858e651e14ba37b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr107170.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr107170.c?ref=49b9a8c8cc498b1ed2f566bee858e651e14ba37b", "patch": "@@ -0,0 +1,8 @@\n+// { dg-do compile }\n+// { dg-options \"-O2\" }\n+\n+int main() {\n+  double a;\n+  if (__builtin_signbit(a))\n+    __builtin_abort();\n+}"}, {"sha": "71fed1e6a7e5c63abfd7497a8b7f631e554217a6", "filename": "gcc/vr-values.cc", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49b9a8c8cc498b1ed2f566bee858e651e14ba37b/gcc%2Fvr-values.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49b9a8c8cc498b1ed2f566bee858e651e14ba37b/gcc%2Fvr-values.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvr-values.cc?ref=49b9a8c8cc498b1ed2f566bee858e651e14ba37b", "patch": "@@ -184,21 +184,23 @@ vr_values::range_of_expr (vrange &r, tree expr, gimple *stmt)\n \n   if (const value_range *vr = get_value_range (expr, stmt))\n     {\n+      if (!vr->supports_type_p (TREE_TYPE (expr)))\n+\t{\n+\t  // vr_values::extract_range_basic() use of ranger's\n+\t  // fold_range() can create a situation where we are asked\n+\t  // for the range of an unsupported legacy type.  Since\n+\t  // get_value_range() above will return varying or undefined\n+\t  // for such types, avoid copying incompatible range types.\n+\t  if (vr->undefined_p ())\n+\t    r.set_undefined ();\n+\t  else\n+\t    r.set_varying (TREE_TYPE (expr));\n+\t  return true;\n+\t}\n       if (vr->undefined_p () || vr->constant_p ())\n \tr = *vr;\n       else\n \t{\n-\t  if (!vr->supports_type_p (TREE_TYPE (expr)))\n-\t    {\n-\t      // vr_values::extract_range_basic() use of ranger's\n-\t      // fold_range() can create a situation where we are\n-\t      // asked for the range of an unsupported legacy type.\n-\t      // Since get_value_range() above will return varying for\n-\t      // such types, avoid copying incompatible range types.\n-\t      gcc_checking_assert (vr->varying_p ());\n-\t      r.set_varying (TREE_TYPE (expr));\n-\t      return true;\n-\t    }\n \t  value_range tmp = *vr;\n \t  tmp.normalize_symbolics ();\n \t  r = tmp;"}]}