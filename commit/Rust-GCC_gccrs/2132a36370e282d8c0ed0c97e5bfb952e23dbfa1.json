{"sha": "2132a36370e282d8c0ed0c97e5bfb952e23dbfa1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjEzMmEzNjM3MGUyODJkOGMwZWQwYzk3ZTViZmI5NTJlMjNkYmZhMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-25T20:35:11Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-25T20:35:11Z"}, "message": "c++: Fix source_location inconsistency between calls from templates and non-templates [PR99672]\n\nThe srcloc19.C testcase shows inconsistency in\nstd::source_location::current() locations between calls from\ntemplates and non-templates.  The location used by __builtin_source_location\ncomes in both cases from input_location which is set on it by bot_manip\nwhen handling the default argument, called during finish_call_expr.\nThe problem is that in templates that input_location comes from the\nCALL_EXPR we built earlier and that has the combined locus with\nrange between first character of the function name and closing paren\nwith caret on the opening paren, so something printed as caret as:\nfoobar ();\n~~~~~~^~\nBut outside of templates, finish_call_expr is called when input_location\nis just the closing paren token, i.e.\nfoobar ();\n        ^\nand only after that returns we create the combined location and set\nthe CALL_EXPR location to that.  So, it means std::source_location::current()\nreports in templates the column of opening (, while outside of templates\nclosing ).\n\nThe following patch makes it consistent by creating the combined location\nalready before calling finish_call_expr and temporarily overriding\ninput_location to that.\n\n2021-03-25  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/99672\n\t* parser.c (cp_parser_postfix_expression): For calls, create\n\tcombined_loc and temporarily set input_location to it before\n\tcalling finish_call_expr.\n\n\t* g++.dg/concepts/diagnostic2.C: Adjust expected caret line.\n\t* g++.dg/cpp1y/builtin_location.C (f4, n6): Move #line directives\n\tto match locus changes.\n\t* g++.dg/cpp2a/srcloc1.C: Adjust expected column numbers.\n\t* g++.dg/cpp2a/srcloc2.C: Likewise.\n\t* g++.dg/cpp2a/srcloc15.C: Likewise.\n\t* g++.dg/cpp2a/srcloc16.C: Likewise.\n\t* g++.dg/cpp2a/srcloc19.C: New test.\n\t* g++.dg/modules/adhoc-1_b.C: Adjust expected column numbers\n\tand caret line.\n\t* g++.dg/modules/macloc-1_c.C: Adjust expected column numbers.\n\t* g++.dg/modules/macloc-1_d.C: Likewise.\n\t* g++.dg/plugin/diagnostic-test-expressions-1.C: Adjust expected\n\tcaret line.\n\n\t* testsuite/18_support/source_location/consteval.cc (main): Adjust\n\texpected column numbers.\n\t* testsuite/18_support/source_location/1.cc (main): Likewise.", "tree": {"sha": "2c32fe9fece7879355c5dc04d03392db4aaed74c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c32fe9fece7879355c5dc04d03392db4aaed74c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2132a36370e282d8c0ed0c97e5bfb952e23dbfa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2132a36370e282d8c0ed0c97e5bfb952e23dbfa1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2132a36370e282d8c0ed0c97e5bfb952e23dbfa1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2132a36370e282d8c0ed0c97e5bfb952e23dbfa1/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4e0bdbc036644401f9de49f594b2bb16b287381", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4e0bdbc036644401f9de49f594b2bb16b287381", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4e0bdbc036644401f9de49f594b2bb16b287381"}], "stats": {"total": 141, "additions": 96, "deletions": 45}, "files": [{"sha": "d0477c42afeb1d86561eea542fbad177abf31802", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2132a36370e282d8c0ed0c97e5bfb952e23dbfa1/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2132a36370e282d8c0ed0c97e5bfb952e23dbfa1/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=2132a36370e282d8c0ed0c97e5bfb952e23dbfa1", "patch": "@@ -7564,6 +7564,7 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t    tsubst_flags_t complain = complain_flags (decltype_p);\n \t    vec<tree, va_gc> *args;\n \t    location_t close_paren_loc = UNKNOWN_LOCATION;\n+\t    location_t combined_loc = UNKNOWN_LOCATION;\n \n             is_member_access = false;\n \n@@ -7669,6 +7670,17 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t\t  }\n \t      }\n \n+\t    /* Temporarily set input_location to the combined location\n+\t       with call expression range, as e.g. build_out_target_exprs\n+\t       called from convert_default_arg relies on input_location,\n+\t       so updating it only when the call is fully built results\n+\t       in inconsistencies between location handling in templates\n+\t       and outside of templates.  */\n+\t    if (close_paren_loc != UNKNOWN_LOCATION)\n+\t      combined_loc = make_location (token->location, start_loc,\n+\t\t\t\t\t    close_paren_loc);\n+\t    iloc_sentinel ils (combined_loc);\n+\n \t    if (TREE_CODE (postfix_expression) == COMPONENT_REF)\n \t      {\n \t\ttree instance = TREE_OPERAND (postfix_expression, 0);\n@@ -7726,12 +7738,7 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t\t\t\t    complain);\n \n \t    if (close_paren_loc != UNKNOWN_LOCATION)\n-\t      {\n-\t\tlocation_t combined_loc = make_location (token->location,\n-\t\t\t\t\t\t\t start_loc,\n-\t\t\t\t\t\t\t close_paren_loc);\n-\t\tpostfix_expression.set_location (combined_loc);\n-\t      }\n+\t      postfix_expression.set_location (combined_loc);\n \n \t    /* The POSTFIX_EXPRESSION is certainly no longer an id.  */\n \t    idk = CP_ID_KIND_NONE;"}, {"sha": "6550ed6b3bd881980409ea9061b0e81e020e7f4c", "filename": "gcc/testsuite/g++.dg/concepts/diagnostic2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2132a36370e282d8c0ed0c97e5bfb952e23dbfa1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2132a36370e282d8c0ed0c97e5bfb952e23dbfa1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic2.C?ref=2132a36370e282d8c0ed0c97e5bfb952e23dbfa1", "patch": "@@ -25,6 +25,6 @@ baz()\n   bar<int>(); // { dg-error \"no match\" }\n /* { dg-begin-multiline-output \"\" }\n    bar<int>();\n-            ^\n+   ~~~~~~~~^~\n    { dg-end-multiline-output \"\" } */\n }"}, {"sha": "1f8a7fd7bb6ce7ee8b026403513e6f4e4c42c9db", "filename": "gcc/testsuite/g++.dg/cpp1y/builtin_location.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2132a36370e282d8c0ed0c97e5bfb952e23dbfa1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fbuiltin_location.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2132a36370e282d8c0ed0c97e5bfb952e23dbfa1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fbuiltin_location.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fbuiltin_location.C?ref=2132a36370e282d8c0ed0c97e5bfb952e23dbfa1", "patch": "@@ -103,10 +103,10 @@ A (0 == __builtin_strcmp (f3, FILE_3));\n #define FILE_4 \"next_file_name.another_suffix\"\n #line 1 \"foobar\"\n constexpr const char* f4 = this_file\n-  (\n #line 1 FILE_4\n-   )\n+  (\n #line 1 \"foobar\"\n+   )\n   ;\n A (0 == __builtin_strcmp (f4, FILE_4));\n \n@@ -167,9 +167,9 @@ A (n5 == 9);\n // of the function call.\n #line 1\n constexpr int n6 = this_line\n-  (\n #line 99\n-   )\n+  (\n #line 1\n+   )\n   ;\n A (n6 == 99);"}, {"sha": "2e9797443c1582f10e9561f66ce750f8e43a0e93", "filename": "gcc/testsuite/g++.dg/cpp2a/srcloc1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2132a36370e282d8c0ed0c97e5bfb952e23dbfa1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2132a36370e282d8c0ed0c97e5bfb952e23dbfa1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc1.C?ref=2132a36370e282d8c0ed0c97e5bfb952e23dbfa1", "patch": "@@ -80,7 +80,7 @@ constexpr source_location s2 = baz <1> ();\n const source_location *p1 = &s1;\n const source_location *p2 = &s2;\n static_assert (source_location::current ().line () == __LINE__);\n-static_assert (source_location::current ().column () == 42);\n+static_assert (source_location::current ().column () == 41);\n \n constexpr bool\n quux ()\n@@ -106,7 +106,7 @@ quux ()\n     return false;\n   if (line1 != line2)\n     return false;\n-  if (column != 33)\n+  if (column != 32)\n     return false;\n   return true;\n }"}, {"sha": "3bb3958a44bc83536e83e739635138e3db234c88", "filename": "gcc/testsuite/g++.dg/cpp2a/srcloc15.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2132a36370e282d8c0ed0c97e5bfb952e23dbfa1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2132a36370e282d8c0ed0c97e5bfb952e23dbfa1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc15.C?ref=2132a36370e282d8c0ed0c97e5bfb952e23dbfa1", "patch": "@@ -69,8 +69,8 @@ bar ()\n   source_location a = foo ();\n   source_location b = source_location::current ();\n   source_location c = foo ();\n-  //                       ^ column 28\n-  //                                            ^ column 49\n+  //                      ^ column 27\n+  //                                           ^ column 48\n   const source_location *d[3] = { &a, &b, &c };\n   const char *file1 = __FILE__;\n   const char *function1 = __PRETTY_FUNCTION__;\n@@ -83,7 +83,7 @@ bar ()\n \treturn false;\n       if (d[j]->line () != line + j + 1)\n \treturn false;\n-      if (d[j]->column () != (j == 1 ? 49 : 28))\n+      if (d[j]->column () != (j == 1 ? 48 : 27))\n \treturn false;\n     }\n "}, {"sha": "0ecd636c9aac01107f17aef3d1c993ece19fcb26", "filename": "gcc/testsuite/g++.dg/cpp2a/srcloc16.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2132a36370e282d8c0ed0c97e5bfb952e23dbfa1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2132a36370e282d8c0ed0c97e5bfb952e23dbfa1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc16.C?ref=2132a36370e282d8c0ed0c97e5bfb952e23dbfa1", "patch": "@@ -79,10 +79,10 @@ foo ()\n       || u.u.line () + 1 != v.line ()\n       || s.a.column () != 18\n       || s.b.column () != 18\n-      || s.c.column () != 50\n+      || s.c.column () != 49\n       || t.u.column () != 21\n       || u.u.column () != 13\n-      || v.column () != 49)\n+      || v.column () != 48)\n     return false;\n   return true;\n }"}, {"sha": "b7e8c37a6c8172564e1fb4e90074f929c19db049", "filename": "gcc/testsuite/g++.dg/cpp2a/srcloc19.C", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2132a36370e282d8c0ed0c97e5bfb952e23dbfa1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2132a36370e282d8c0ed0c97e5bfb952e23dbfa1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc19.C?ref=2132a36370e282d8c0ed0c97e5bfb952e23dbfa1", "patch": "@@ -0,0 +1,44 @@\n+// PR c++/99672\n+// { dg-do compile { target c++20 } }\n+\n+namespace std {\n+  struct source_location {\n+    struct __impl {\n+      const char *_M_file_name;\n+      const char *_M_function_name;\n+      unsigned int _M_line, _M_column;\n+    };\n+    const __impl *__ptr;\n+    constexpr source_location () : __ptr (nullptr) {}\n+    static consteval source_location\n+    current (const void *__p = __builtin_source_location ()) {\n+      source_location __ret;\n+      __ret.__ptr = static_cast <const __impl *> (__p);\n+      return __ret;\n+    }\n+    constexpr const char *file_name () const {\n+      return __ptr ? __ptr->_M_file_name : \"\";\n+    }\n+    constexpr const char *function_name () const {\n+      return __ptr ? __ptr->_M_function_name : \"\";\n+    }\n+    constexpr unsigned line () const {\n+      return __ptr ? __ptr->_M_line : 0;\n+    }\n+    constexpr unsigned column () const {\n+      return __ptr ? __ptr->_M_column : 0;\n+    }\n+  };\n+}\n+\n+constexpr int g(auto...) {\n+return std::source_location::current().column();\n+}\n+\n+constexpr int f() {\n+return std::source_location::current().column();\n+}\n+\n+constexpr int a = g();\n+constexpr int b = f();\n+static_assert (a == b);"}, {"sha": "3f91a6448848315fc9881d611fcfa6e04cee7d39", "filename": "gcc/testsuite/g++.dg/cpp2a/srcloc2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2132a36370e282d8c0ed0c97e5bfb952e23dbfa1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2132a36370e282d8c0ed0c97e5bfb952e23dbfa1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc2.C?ref=2132a36370e282d8c0ed0c97e5bfb952e23dbfa1", "patch": "@@ -84,7 +84,7 @@ const source_location *p1 = &s1;\n const source_location *p2 = &s2;\n \n static_assert (source_location::current ().line () == __LINE__);\n-static_assert (source_location::current ().column () == 42);\n+static_assert (source_location::current ().column () == 41);\n \n constexpr bool\n quux ()\n@@ -110,7 +110,7 @@ quux ()\n     return false;\n   if (line1 != line2)\n     return false;\n-  if (column != 33)\n+  if (column != 32)\n     return false;\n   return true;\n }"}, {"sha": "7fd5701463ed9b20592b5478b198efd5695f8520", "filename": "gcc/testsuite/g++.dg/modules/adhoc-1_b.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2132a36370e282d8c0ed0c97e5bfb952e23dbfa1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fadhoc-1_b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2132a36370e282d8c0ed0c97e5bfb952e23dbfa1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fadhoc-1_b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fadhoc-1_b.C?ref=2132a36370e282d8c0ed0c97e5bfb952e23dbfa1", "patch": "@@ -6,7 +6,7 @@ void foo ()\n   massivelongnamethatcausesadhoclocationsokeepaddingcharsyourgettheidea ();\n }\n \n-// { dg-regexp \"\\n\\[^\\n]*adhoc-1_b.C:6:74: error: no matching function for call to 'massivelongnamethatcausesadhoclocationsokeepaddingcharsyourgettheidea\\\\(\\\\)'\\n   massivelongnamethatcausesadhoclocationsokeepaddingcharsyourgettheidea \\\\(\\\\);\\n                                                                          \\\\^$\" }\n+// { dg-regexp \"\\n\\[^\\n]*adhoc-1_b.C:6:73: error: no matching function for call to 'massivelongnamethatcausesadhoclocationsokeepaddingcharsyourgettheidea\\\\(\\\\)'\\n   massivelongnamethatcausesadhoclocationsokeepaddingcharsyourgettheidea \\\\(\\\\);\\n   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\\^~$\" }\n // { dg-regexp \"\\nIn module bob, imported at \\[^\\n]*adhoc-1_b.C:3:\\n\\[^\\n]*adhoc-1_a.C:5:12: note: candidate: 'int massivelongnamethatcausesadhoclocationsokeepaddingcharsyourgettheidea@bob\\\\(int\\\\)'\\n export int massivelongnamethatcausesadhoclocationsokeepaddingcharsyourgettheidea \\\\(int\\\\);\\n            \\\\^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$\" }\n // { dg-regexp \"\\nIn module bob, imported at \\[^\\n]*adhoc-1_b.C:3:\\n\\[^\\n]*adhoc-1_a.C:6:188: note: candidate: 'void massivelongnamethatcausesadhoclocationsokeepaddingcharsyourgettheidea@bob\\\\(float\\\\)'\\n\\[ \\t]*export void massivelongnamethatcausesadhoclocationsokeepaddingcharsyourgettheidea \\\\(float\\\\);\\n\\[ \\t]*\\\\^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~?$\" }\n // For some reason dg-regexp inserts a blank line "}, {"sha": "5865a34687e75d298761051936cc915f08e43b3a", "filename": "gcc/testsuite/g++.dg/modules/macloc-1_c.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2132a36370e282d8c0ed0c97e5bfb952e23dbfa1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fmacloc-1_c.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2132a36370e282d8c0ed0c97e5bfb952e23dbfa1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fmacloc-1_c.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fmacloc-1_c.C?ref=2132a36370e282d8c0ed0c97e5bfb952e23dbfa1", "patch": "@@ -8,6 +8,6 @@ void gru ()\n   you (1);\n }\n \n-// { dg-regexp \"\\[^\\n]*macloc-1_c.C:7:8: error: too many arguments to function 'int me@agnes\\\\(\\\\)'\\nIn module agnes, imported at \\[^\\n]*macloc-1_b.C:8,\\nof module edith, imported at \\[^\\n]*macloc-1_c.C:3:\\n\\[^\\n]*macloc-1_a.C:11:12: note: declared here\\n\\[^\\n]*macloc-1_a.C:8:20: note: in definition of macro 'BOB'\\n\" }\n+// { dg-regexp \"\\[^\\n]*macloc-1_c.C:7:6: error: too many arguments to function 'int me@agnes\\\\(\\\\)'\\nIn module agnes, imported at \\[^\\n]*macloc-1_b.C:8,\\nof module edith, imported at \\[^\\n]*macloc-1_c.C:3:\\n\\[^\\n]*macloc-1_a.C:11:12: note: declared here\\n\\[^\\n]*macloc-1_a.C:8:20: note: in definition of macro 'BOB'\\n\" }\n \n-// { dg-regexp \"\\[^\\n]*macloc-1_c.C:8:9: error: too many arguments to function 'int you@agnes\\\\(\\\\)'\\nIn module agnes, imported at \\[^\\n]*macloc-1_b.C:8,\\nof module edith, imported at \\[^\\n]*macloc-1_c.C:3:\\n\\[^\\n]*macloc-1_a.C:12:14: note: declared here\\n\\[^\\n]*macloc-1_a.C:9:22: note: in definition of macro 'KEVIN'\\n\" }\n+// { dg-regexp \"\\[^\\n]*macloc-1_c.C:8:7: error: too many arguments to function 'int you@agnes\\\\(\\\\)'\\nIn module agnes, imported at \\[^\\n]*macloc-1_b.C:8,\\nof module edith, imported at \\[^\\n]*macloc-1_c.C:3:\\n\\[^\\n]*macloc-1_a.C:12:14: note: declared here\\n\\[^\\n]*macloc-1_a.C:9:22: note: in definition of macro 'KEVIN'\\n\" }"}, {"sha": "282a31c4a2d1f74d9c5027d092dd1720d766740a", "filename": "gcc/testsuite/g++.dg/modules/macloc-1_d.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2132a36370e282d8c0ed0c97e5bfb952e23dbfa1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fmacloc-1_d.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2132a36370e282d8c0ed0c97e5bfb952e23dbfa1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fmacloc-1_d.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fmacloc-1_d.C?ref=2132a36370e282d8c0ed0c97e5bfb952e23dbfa1", "patch": "@@ -9,5 +9,5 @@ void margo ()\n   gru (2);\n }\n \n-// { dg-regexp \"\\[^\\n]*macloc-1_d.C:8:8: error: too many arguments to function 'int me@agnes\\\\(\\\\)'\\nIn module agnes, imported at \\[^\\n]*macloc-1_d.C:4:\\n\\[^\\n]*macloc-1_a.C:11:12: note: declared here\\n\\[^\\n]*macloc-1_a.C:8:20: note: in definition of macro 'BOB'\\n\" }\n-// { dg-regexp \"\\[^\\n]*macloc-1_d.C:9:9: error: too many arguments to function 'void gru@edith\\\\(\\\\)'\\nIn module edith, imported at \\[^\\n]*macloc-1_d.C:3:\\n\\[^\\n]*macloc-1_b.C:10:20: note: declared here\\n\\[^\\n]*macloc-1_b.C:6:19: note: in definition of macro 'STUART'\\n\" }\n+// { dg-regexp \"\\[^\\n]*macloc-1_d.C:8:6: error: too many arguments to function 'int me@agnes\\\\(\\\\)'\\nIn module agnes, imported at \\[^\\n]*macloc-1_d.C:4:\\n\\[^\\n]*macloc-1_a.C:11:12: note: declared here\\n\\[^\\n]*macloc-1_a.C:8:20: note: in definition of macro 'BOB'\\n\" }\n+// { dg-regexp \"\\[^\\n]*macloc-1_d.C:9:7: error: too many arguments to function 'void gru@edith\\\\(\\\\)'\\nIn module edith, imported at \\[^\\n]*macloc-1_d.C:3:\\n\\[^\\n]*macloc-1_b.C:10:20: note: declared here\\n\\[^\\n]*macloc-1_b.C:6:19: note: in definition of macro 'STUART'\\n\" }"}, {"sha": "70778e9368a232c52de02407406267099dbeca97", "filename": "gcc/testsuite/g++.dg/plugin/diagnostic-test-expressions-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2132a36370e282d8c0ed0c97e5bfb952e23dbfa1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fdiagnostic-test-expressions-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2132a36370e282d8c0ed0c97e5bfb952e23dbfa1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fdiagnostic-test-expressions-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fdiagnostic-test-expressions-1.C?ref=2132a36370e282d8c0ed0c97e5bfb952e23dbfa1", "patch": "@@ -900,7 +900,7 @@ void test_methods ()\n   ((base *)1)->priv (); // { dg-error \" is private \" }\n /* { dg-begin-multiline-output \"\" }\n    ((base *)1)->priv ();\n-                      ^\n+   ~~~~~~~~~~~~~~~~~~^~\n    { dg-end-multiline-output \"\" }\n    { dg-begin-multiline-output \"\" }\n    int priv ();"}, {"sha": "687047a3d6ab5adc81326eb4cccb4cd415484b72", "filename": "libstdc++-v3/testsuite/18_support/source_location/1.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2132a36370e282d8c0ed0c97e5bfb952e23dbfa1/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fsource_location%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2132a36370e282d8c0ed0c97e5bfb952e23dbfa1/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fsource_location%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fsource_location%2F1.cc?ref=2132a36370e282d8c0ed0c97e5bfb952e23dbfa1", "patch": "@@ -87,37 +87,37 @@ int main ()\n   std::string_view main_sl_fn_name(main_sl.function_name());\n   std::string_view main_sl_fi_name(main_sl.file_name());\n   VERIFY(main_sl.line() == main_sl_line);\n-  // closing paren of call\n-  VERIFY(main_sl.column() == 64);\n+  // opening paren of call\n+  VERIFY(main_sl.column() == 63);\n   VERIFY(main_sl_fn_name.ends_with(\"main()\"sv));\n   VERIFY(main_sl_fi_name.ends_with(\"1.cc\"sv));\n \n   std::string_view f_arg_sl_fn_name(f_arg_sl.function_name());\n   std::string_view f_arg_sl_fi_name(f_arg_sl.file_name());\n   VERIFY(f_arg_sl.line() == f_arg_sl_line);\n-  // closing paren of call\n-  VERIFY(f_arg_sl.column() == 64);\n+  // opening paren of call\n+  VERIFY(f_arg_sl.column() == 63);\n   VERIFY(f_arg_sl_fn_name.ends_with(\"main()\"sv));\n   VERIFY(f_arg_sl_fi_name.ends_with(\"1.cc\"sv));\n \n   std::string_view g_sl_fn_name(g_sl.function_name());\n   std::string_view g_sl_fi_name(g_sl.file_name());\n   VERIFY(g_sl.line() == g_sl_line);\n-  VERIFY(g_sl.column() == 58); // closing paren of call\n+  VERIFY(g_sl.column() == 57); // opening paren of call\n   VERIFY(g_sl_fn_name.ends_with(\"g()\"sv));\n   VERIFY(g_sl_fi_name.ends_with(\"1.cc\"sv));\n \n   std::string_view h_sl_fn_name(h_sl.function_name());\n   std::string_view h_sl_fi_name(h_sl.file_name());\n   VERIFY(h_sl.line() == 23);\n-  VERIFY(h_sl.column() == 58); // closing paren of call\n+  VERIFY(h_sl.column() == 57); // opening paren of call\n   VERIFY(h_sl_fn_name.ends_with(\"h()\"sv));\n   VERIFY(h_sl_fi_name.ends_with(\"srcloc.h\"sv));\n \n   std::string_view member_main_sl_fn_name(member_main_sl.member.function_name());\n   std::string_view member_main_sl_fi_name(member_main_sl.member.file_name());\n   VERIFY(member_main_sl.member.line() == main_sl_line);\n-  VERIFY(member_main_sl.member.column() == 64);\n+  VERIFY(member_main_sl.member.column() == 63);\n   VERIFY(member_main_sl_fn_name.ends_with(\"main()\"sv));\n   VERIFY(member_main_sl_fi_name.ends_with(\"1.cc\"sv));\n \n@@ -144,8 +144,8 @@ int main ()\n   std::string_view f_sl_fi_name(f_sl.file_name());\n   std::string_view f_sl_fn_name(f_sl.function_name());\n   VERIFY(f_sl.line() == f_sl_line);\n-  // closing paren of call\n-  VERIFY(f_sl.column() == 33);\n+  // opening paren of call\n+  VERIFY(f_sl.column() == 32);\n   VERIFY(f_sl_fn_name.ends_with(\"main()\"sv));\n   VERIFY(f_sl_fi_name.ends_with(\"1.cc\"sv));\n "}, {"sha": "62e0469d01a91537f2281f17073714c2d856a7b5", "filename": "libstdc++-v3/testsuite/18_support/source_location/consteval.cc", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2132a36370e282d8c0ed0c97e5bfb952e23dbfa1/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fsource_location%2Fconsteval.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2132a36370e282d8c0ed0c97e5bfb952e23dbfa1/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fsource_location%2Fconsteval.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fsource_location%2Fconsteval.cc?ref=2132a36370e282d8c0ed0c97e5bfb952e23dbfa1", "patch": "@@ -75,43 +75,43 @@ int main ()\n   using namespace std::string_view_literals;\n \n   static_assert (std::source_location::current ().line () == __LINE__);\n-  static_assert (std::source_location::current ().column () == 49);\n+  static_assert (std::source_location::current ().column () == 48);\n \n \n   constexpr std::string_view main_sl_fn_name(main_sl.function_name());\n   constexpr std::string_view main_sl_fi_name(main_sl.file_name());\n   static_assert(main_sl.line() == main_sl_line);\n-  // closing paren of call\n-  static_assert(main_sl.column() == 74);\n+  // opening paren of call\n+  static_assert(main_sl.column() == 73);\n   static_assert(main_sl_fn_name.ends_with(\"main()\"sv));\n   static_assert(main_sl_fi_name.ends_with(\"consteval.cc\"sv));\n \n   constexpr std::string_view f_arg_sl_fn_name(f_arg_sl.function_name());\n   constexpr std::string_view f_arg_sl_fi_name(f_arg_sl.file_name());\n   static_assert(f_arg_sl.line() == f_arg_sl_line);\n-  // closing paren of call\n-  static_assert(f_arg_sl.column() == 74);\n+  // opening paren of call\n+  static_assert(f_arg_sl.column() == 73);\n   static_assert(f_arg_sl_fn_name.ends_with(\"main()\"sv));\n   static_assert(f_arg_sl_fi_name.ends_with(\"consteval.cc\"sv));\n \n   constexpr std::string_view g_sl_fn_name(g_sl.function_name());\n   constexpr std::string_view g_sl_fi_name(g_sl.file_name());\n   static_assert(g_sl.line() == g_sl_line);\n-  static_assert(g_sl.column() == 58); // closing paren of call\n+  static_assert(g_sl.column() == 57); // opening paren of call\n   static_assert(g_sl_fn_name.ends_with(\"g()\"sv));\n   static_assert(g_sl_fi_name.ends_with(\"consteval.cc\"sv));\n \n   constexpr std::string_view h_sl_fn_name(h_sl.function_name());\n   constexpr std::string_view h_sl_fi_name(h_sl.file_name());\n   static_assert(h_sl.line() == 23);\n-  static_assert(h_sl.column() == 58); // closing paren of call\n+  static_assert(h_sl.column() == 57); // opening paren of call\n   static_assert(h_sl_fn_name.ends_with(\"h()\"sv));\n   static_assert(h_sl_fi_name.ends_with(\"srcloc.h\"sv));\n \n   constexpr std::string_view member_main_sl_fn_name(member_main_sl.member.function_name());\n   constexpr std::string_view member_main_sl_fi_name(member_main_sl.member.file_name());\n   static_assert(member_main_sl.member.line() == main_sl_line);\n-  static_assert(member_main_sl.member.column() == 74);\n+  static_assert(member_main_sl.member.column() == 73);\n   static_assert(member_main_sl_fn_name.ends_with(\"main()\"sv));\n   static_assert(member_main_sl_fi_name.ends_with(\"consteval.cc\"sv));\n \n@@ -138,8 +138,8 @@ int main ()\n   constexpr std::string_view f_sl_fi_name(f_sl.file_name());\n   constexpr std::string_view f_sl_fn_name(f_sl.function_name());\n   static_assert(f_sl.line() == f_sl_line);\n-  // closing paren of call\n-  static_assert(f_sl.column() == 43);\n+  // opening paren of call\n+  static_assert(f_sl.column() == 42);\n   static_assert(f_sl_fn_name.ends_with(\"main()\"sv));\n   static_assert(f_sl_fi_name.ends_with(\"consteval.cc\"sv));\n "}]}