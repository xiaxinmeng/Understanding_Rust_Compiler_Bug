{"sha": "fa337f3ae5fb8c4c3631345e65ec8c75cb40ab69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmEzMzdmM2FlNWZiOGM0YzM2MzEzNDVlNjVlYzhjNzVjYjQwYWI2OQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-01-30T14:17:02Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-01-30T14:17:02Z"}, "message": "re PR c/59905 (Unfriendly abort when calling a fucntion via a function pointer cast)\n\n2014-01-30  Richard Biener  <rguenther@suse.de>\n\n\tPR c/59905\n\t* c-typeck.c (build_function_call_vec): Do not replace calls\n\tto a function via an incompatible type with a runtime abort.\n\n\t* gcc.dg/cast-function-1.c: Adjust to survive DCE.\n\t* gcc.dg/call-diag-2.c: Remove expected warnings about calling\n\tabort.\n\t* gcc.dg/invalid-call-1.c: Likewise.\n\nFrom-SVN: r207300", "tree": {"sha": "e34fbb86afbceba8a29f011b72b2cdeb158c3fcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e34fbb86afbceba8a29f011b72b2cdeb158c3fcf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa337f3ae5fb8c4c3631345e65ec8c75cb40ab69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa337f3ae5fb8c4c3631345e65ec8c75cb40ab69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa337f3ae5fb8c4c3631345e65ec8c75cb40ab69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa337f3ae5fb8c4c3631345e65ec8c75cb40ab69/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f30a0ba57a9a407601afd871d6bf49038b258c94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f30a0ba57a9a407601afd871d6bf49038b258c94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f30a0ba57a9a407601afd871d6bf49038b258c94"}], "stats": {"total": 75, "additions": 27, "deletions": 48}, "files": [{"sha": "c6ca4b41a3387a287d94ae2e4a0305a8b6436c6b", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa337f3ae5fb8c4c3631345e65ec8c75cb40ab69/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa337f3ae5fb8c4c3631345e65ec8c75cb40ab69/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=fa337f3ae5fb8c4c3631345e65ec8c75cb40ab69", "patch": "@@ -1,3 +1,9 @@\n+2014-01-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR c/59905\n+\t* c-typeck.c (build_function_call_vec): Do not replace calls\n+\tto a function via an incompatible type with a runtime abort.\n+\n 2014-01-24  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n \n \t* c-parser.c (c_parser_declaration_or_fndef): Replaced"}, {"sha": "59bd6df21df596e17af777cf4be50a0080d0453d", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 7, "deletions": 39, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa337f3ae5fb8c4c3631345e65ec8c75cb40ab69/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa337f3ae5fb8c4c3631345e65ec8c75cb40ab69/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=fa337f3ae5fb8c4c3631345e65ec8c75cb40ab69", "patch": "@@ -2907,56 +2907,24 @@ build_function_call_vec (location_t loc, tree function,\n     return error_mark_node;\n \n   /* Check that the function is called through a compatible prototype.\n-     If it is not, replace the call by a trap, wrapped up in a compound\n-     expression if necessary.  This has the nice side-effect to prevent\n-     the tree-inliner from generating invalid assignment trees which may\n-     blow up in the RTL expander later.  */\n+     If it is not, warn.  */\n   if (CONVERT_EXPR_P (function)\n       && TREE_CODE (tem = TREE_OPERAND (function, 0)) == ADDR_EXPR\n       && TREE_CODE (tem = TREE_OPERAND (tem, 0)) == FUNCTION_DECL\n       && !comptypes (fntype, TREE_TYPE (tem)))\n     {\n       tree return_type = TREE_TYPE (fntype);\n-      tree trap = build_function_call (loc,\n-\t\t\t\t       builtin_decl_explicit (BUILT_IN_TRAP),\n-\t\t\t\t       NULL_TREE);\n-      int i;\n \n       /* This situation leads to run-time undefined behavior.  We can't,\n \t therefore, simply error unless we can prove that all possible\n \t executions of the program must execute the code.  */\n-      if (warning_at (loc, 0, \"function called through a non-compatible type\"))\n-\t/* We can, however, treat \"undefined\" any way we please.\n-\t   Call abort to encourage the user to fix the program.  */\n-\tinform (loc, \"if this code is reached, the program will abort\");\n-      /* Before the abort, allow the function arguments to exit or\n-\t call longjmp.  */\n-      for (i = 0; i < nargs; i++)\n-\ttrap = build2 (COMPOUND_EXPR, void_type_node, (*params)[i], trap);\n-\n-      if (VOID_TYPE_P (return_type))\n-\t{\n-\t  if (TYPE_QUALS (return_type) != TYPE_UNQUALIFIED)\n-\t    pedwarn (loc, 0,\n-\t\t     \"function with qualified void return type called\");\n-\t  return trap;\n-\t}\n-      else\n-\t{\n-\t  tree rhs;\n-\n-\t  if (AGGREGATE_TYPE_P (return_type))\n-\t    rhs = build_compound_literal (loc, return_type,\n-\t\t\t\t\t  build_constructor (return_type,\n-\t\t\t\t\t    NULL),\n-\t\t\t\t\t  false);\n-\t  else\n-\t    rhs = build_zero_cst (return_type);\n+      warning_at (loc, 0, \"function called through a non-compatible type\");\n \n-\t  return require_complete_type (build2 (COMPOUND_EXPR, return_type,\n-\t\t\t\t\t\ttrap, rhs));\n-\t}\n-    }\n+      if (VOID_TYPE_P (return_type)\n+\t  && TYPE_QUALS (return_type) != TYPE_UNQUALIFIED)\n+\tpedwarn (loc, 0,\n+\t\t \"function with qualified void return type called\");\n+     }\n \n   argarray = vec_safe_address (params);\n "}, {"sha": "77953e9b395a8cb181e4d2faf6ca0f8939eb4a6a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa337f3ae5fb8c4c3631345e65ec8c75cb40ab69/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa337f3ae5fb8c4c3631345e65ec8c75cb40ab69/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fa337f3ae5fb8c4c3631345e65ec8c75cb40ab69", "patch": "@@ -1,3 +1,11 @@\n+2014-01-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR c/59905\n+\t* gcc.dg/cast-function-1.c: Adjust to survive DCE.\n+\t* gcc.dg/call-diag-2.c: Remove expected warnings about calling\n+\tabort.\n+\t* gcc.dg/invalid-call-1.c: Likewise.\n+\n 2014-01-29  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/58561"}, {"sha": "c34252cd7294998dd60159ddc3cddb74cf219754", "filename": "gcc/testsuite/gcc.dg/call-diag-2.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa337f3ae5fb8c4c3631345e65ec8c75cb40ab69/gcc%2Ftestsuite%2Fgcc.dg%2Fcall-diag-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa337f3ae5fb8c4c3631345e65ec8c75cb40ab69/gcc%2Ftestsuite%2Fgcc.dg%2Fcall-diag-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcall-diag-2.c?ref=fa337f3ae5fb8c4c3631345e65ec8c75cb40ab69", "patch": "@@ -11,7 +11,5 @@ void g1 (void) { f_cv (); } /* { dg-error \"qualified void\" } */\n void g2 (void) { f_s (); } /* { dg-error \"invalid use of undefined type\" } */\n void g3 (void) { ((const void (*) (void)) f_v) (); } /* { dg-error \"qualified void\" } */\n /* { dg-warning \"function called through a non-compatible type\" \"cast\" { target *-*-* } 12 } */\n-/* { dg-message \"will abort\" \"abort\" { target *-*-* } 12 } */\n void g4 (void) { ((struct s (*) (void)) f_v) (), (void) 0; } /* { dg-error \"invalid use of undefined type\" } */\n-/* { dg-warning \"function called through a non-compatible type\" \"cast\" { target *-*-* } 15 } */\n-/* { dg-message \"will abort\" \"abort\" { target *-*-* } 15 } */\n+/* { dg-warning \"function called through a non-compatible type\" \"cast\" { target *-*-* } 14 } */"}, {"sha": "5eb412595fcb13438bb85a1425bc69b2759b94a6", "filename": "gcc/testsuite/gcc.dg/cast-function-1.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa337f3ae5fb8c4c3631345e65ec8c75cb40ab69/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-function-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa337f3ae5fb8c4c3631345e65ec8c75cb40ab69/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-function-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-function-1.c?ref=fa337f3ae5fb8c4c3631345e65ec8c75cb40ab69", "patch": "@@ -16,12 +16,8 @@ typedef struct {\n   int a;\n } str_t;\n \n-void bar(void)\n+void bar(double d, int i, str_t s)\n {\n-  double d;\n-  int i;\n-  str_t s;\n-\n   d = ((double (*) (int)) foo1) (i);  /* { dg-warning \"33:non-compatible|abort\" } */\n   i = ((int (*) (double)) foo1) (d);  /* { dg-warning \"33:non-compatible|abort\" } */\n   s = ((str_t (*) (int)) foo1) (i);   /* { dg-warning \"32:non-compatible|abort\" } */\n@@ -39,11 +35,15 @@ void bar(void)\n \n int foo1(int arg)\n {\n+  /* Prevent the function from becoming const and thus DCEd.  */\n+  __asm volatile (\"\" : \"+r\" (arg));\n   return arg;\n }\n \n int foo2(arg)\n   int arg;\n {\n+  /* Prevent the function from becoming const and thus DCEd.  */\n+  __asm volatile (\"\" : \"+r\" (arg));\n   return arg;\n }"}, {"sha": "7a2f6a07bb3729a020fc4a7fc426bf10608f14c3", "filename": "gcc/testsuite/gcc.dg/invalid-call-1.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa337f3ae5fb8c4c3631345e65ec8c75cb40ab69/gcc%2Ftestsuite%2Fgcc.dg%2Finvalid-call-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa337f3ae5fb8c4c3631345e65ec8c75cb40ab69/gcc%2Ftestsuite%2Fgcc.dg%2Finvalid-call-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finvalid-call-1.c?ref=fa337f3ae5fb8c4c3631345e65ec8c75cb40ab69", "patch": "@@ -14,5 +14,4 @@ void foo()\n {\n   cptr = mar(6);\n   ((char *(*)(void *,int (*)(void *,unsigned char **),char**))((fp)bar))(0,0,(void*)(0)); /* { dg-warning \"function called through a non-compatible type\" \"non-compatible type\" } */\n-  /* { dg-message \"note: if this code is reached, the program will abort\" \"\" { target *-*-* } 16 } */\n }"}]}