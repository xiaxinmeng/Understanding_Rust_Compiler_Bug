{"sha": "efda38075b9e028be7e6b99c0632c5bbb27a799b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZkYTM4MDc1YjllMDI4YmU3ZTZiOTljMDYzMmM1YmJiMjdhNzk5Yg==", "commit": {"author": {"name": "Brian Hackett", "email": "bhackett1024@gmail.com", "date": "2010-04-29T09:01:56Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-04-29T09:01:56Z"}, "message": "plugin.h (invoke_plugin_callbacks): New inline function.\n\n2010-04-29  Brian Hackett   <bhackett1024@gmail.com>\n\n\t* plugin.h (invoke_plugin_callbacks): New inline function.\n\t* plugin.c (flag_plugin_added): New global flag.\n\t(add_new_plugin): Initialize above flag.\n\t(invoke_plugin_callbacks): Rename to ...\n\t(invoke_plugin_callbacks_full): ... this.\n\nFrom-SVN: r158896", "tree": {"sha": "c18099c8f924d3a704cd687045a9ca83b40a4f28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c18099c8f924d3a704cd687045a9ca83b40a4f28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efda38075b9e028be7e6b99c0632c5bbb27a799b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efda38075b9e028be7e6b99c0632c5bbb27a799b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efda38075b9e028be7e6b99c0632c5bbb27a799b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efda38075b9e028be7e6b99c0632c5bbb27a799b/comments", "author": {"login": "bhackett1024", "id": 1062578, "node_id": "MDQ6VXNlcjEwNjI1Nzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1062578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bhackett1024", "html_url": "https://github.com/bhackett1024", "followers_url": "https://api.github.com/users/bhackett1024/followers", "following_url": "https://api.github.com/users/bhackett1024/following{/other_user}", "gists_url": "https://api.github.com/users/bhackett1024/gists{/gist_id}", "starred_url": "https://api.github.com/users/bhackett1024/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bhackett1024/subscriptions", "organizations_url": "https://api.github.com/users/bhackett1024/orgs", "repos_url": "https://api.github.com/users/bhackett1024/repos", "events_url": "https://api.github.com/users/bhackett1024/events{/privacy}", "received_events_url": "https://api.github.com/users/bhackett1024/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2942c502ee147819b7e57dca78f7a2cf4831279f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2942c502ee147819b7e57dca78f7a2cf4831279f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2942c502ee147819b7e57dca78f7a2cf4831279f"}], "stats": {"total": 49, "additions": 39, "deletions": 10}, "files": [{"sha": "e768989b0245dcc72dff2e558a4ceb625666a6e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efda38075b9e028be7e6b99c0632c5bbb27a799b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efda38075b9e028be7e6b99c0632c5bbb27a799b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=efda38075b9e028be7e6b99c0632c5bbb27a799b", "patch": "@@ -1,3 +1,11 @@\n+2010-04-29  Brian Hackett   <bhackett1024@gmail.com>\n+\n+\t* plugin.h (invoke_plugin_callbacks): New inline function.\n+\t* plugin.c (flag_plugin_added): New global flag.\n+\t(add_new_plugin): Initialize above flag.\n+\t(invoke_plugin_callbacks): Rename to ...\n+\t(invoke_plugin_callbacks_full): ... this.\n+\n 2010-04-28  Jan Hubicka  <jh@suse.cz>\n \n \t* lto-symtab.c (lto_symtab_entry_def) Add vnode."}, {"sha": "707d2dd5f66b057a55818590eb6b66f23201d6ad", "filename": "gcc/plugin.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efda38075b9e028be7e6b99c0632c5bbb27a799b/gcc%2Fplugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efda38075b9e028be7e6b99c0632c5bbb27a799b/gcc%2Fplugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fplugin.c?ref=efda38075b9e028be7e6b99c0632c5bbb27a799b", "patch": "@@ -86,6 +86,8 @@ struct callback_info\n static struct callback_info *plugin_callbacks_init[PLUGIN_EVENT_FIRST_DYNAMIC];\n static struct callback_info **plugin_callbacks = plugin_callbacks_init;\n \n+/* For invoke_plugin_callbacks(), see plugin.h.  */\n+bool flag_plugin_added = false;\n \n #ifdef ENABLE_PLUGIN\n /* Each plugin should define an initialization function with exactly\n@@ -137,6 +139,8 @@ add_new_plugin (const char* plugin_name)\n   bool name_is_short;\n   const char *pc;\n \n+  flag_plugin_added = true;\n+\n   /* Replace short names by their full path when relevant.  */\n   name_is_short  = !IS_ABSOLUTE_PATH (plugin_name);\n   for (pc = plugin_name; name_is_short && *pc; pc++)\n@@ -483,16 +487,11 @@ unregister_callback (const char *plugin_name, int event)\n   return PLUGEVT_NO_CALLBACK;\n }\n \n-/* Called from inside GCC.  Invoke all plug-in callbacks registered with\n-   the specified event.\n-   Return PLUGEVT_SUCCESS if at least one callback was called,\n-   PLUGEVT_NO_CALLBACK if there was no callback.\n-\n-   EVENT    - the event identifier\n-   GCC_DATA - event-specific data provided by the compiler  */\n+/* Invoke all plugin callbacks registered with the specified event,\n+   called from invoke_plugin_callbacks().  */\n \n int\n-invoke_plugin_callbacks (int event, void *gcc_data)\n+invoke_plugin_callbacks_full (int event, void *gcc_data)\n {\n   int retval = PLUGEVT_SUCCESS;\n "}, {"sha": "13628ec910b9e154f3bcfd93b9a34b3977bfe860", "filename": "gcc/plugin.h", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efda38075b9e028be7e6b99c0632c5bbb27a799b/gcc%2Fplugin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efda38075b9e028be7e6b99c0632c5bbb27a799b/gcc%2Fplugin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fplugin.h?ref=efda38075b9e028be7e6b99c0632c5bbb27a799b", "patch": "@@ -1,5 +1,5 @@\n /* Header file for internal GCC plugin mechanism.\n-   Copyright (C) 2009 Free Software Foundation, Inc.\n+   Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -26,7 +26,7 @@ struct attribute_spec;\n \n extern void add_new_plugin (const char *);\n extern void parse_plugin_arg_opt (const char *);\n-extern int invoke_plugin_callbacks (int, void *);\n+extern int invoke_plugin_callbacks_full (int, void *);\n extern void initialize_plugins (void);\n extern bool plugins_active_p (void);\n extern void dump_active_plugins (FILE *);\n@@ -35,6 +35,28 @@ extern void print_plugins_versions (FILE *file, const char *indent);\n extern void print_plugins_help (FILE *file, const char *indent);\n extern void finalize_plugins (void);\n \n+/* Called from inside GCC.  Invoke all plugin callbacks registered with\n+   the specified event.\n+   Return PLUGEVT_SUCCESS if at least one callback was called,\n+   PLUGEVT_NO_CALLBACK if there was no callback.\n+\n+   EVENT    - the event identifier\n+   GCC_DATA - event-specific data provided by the compiler  */\n+\n+static inline int\n+invoke_plugin_callbacks (int event, void *gcc_data)\n+{\n+#ifdef ENABLE_PLUGIN\n+  /* True iff at least one plugin has been added.  */\n+  extern bool flag_plugin_added;\n+\n+  if (flag_plugin_added)\n+    return invoke_plugin_callbacks_full (event, gcc_data);\n+#endif\n+\n+  return PLUGEVT_NO_CALLBACK;\n+}\n+\n /* In attribs.c.  */\n \n extern void register_attribute (const struct attribute_spec *attr);"}]}