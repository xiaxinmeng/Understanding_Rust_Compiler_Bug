{"sha": "84e13614352202b592fd28fc12c18c07b5ae5d53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRlMTM2MTQzNTIyMDJiNTkyZmQyOGZjMTJjMThjMDdiNWFlNWQ1Mw==", "commit": {"author": {"name": "Justin Squirek", "email": "squirek@adacore.com", "date": "2017-01-12T13:24:16Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-12T13:24:16Z"}, "message": "exp_ch6.adb (Check_View_Conversion): Created this function to properly chain calls to check type invariants that may...\n\n2017-01-12  Justin Squirek  <squirek@adacore.com>\n\n\t* exp_ch6.adb (Check_View_Conversion): Created this function\n\tto properly chain calls to check type invariants that may be\n\tpresent in a subprogram call after the subprogram.\n\t(Expand_Call): Add a conditional to identify when a view conversion\n\tneeds to be checked.\n\t* nlists.adb, nlists.ads (Prepend_New): New routine.\n\t(Prepend_New_To): New routine.\n\nFrom-SVN: r244354", "tree": {"sha": "15e79b2416422beed5858d9030464c5814ace26b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15e79b2416422beed5858d9030464c5814ace26b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84e13614352202b592fd28fc12c18c07b5ae5d53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84e13614352202b592fd28fc12c18c07b5ae5d53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84e13614352202b592fd28fc12c18c07b5ae5d53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84e13614352202b592fd28fc12c18c07b5ae5d53/comments", "author": {"login": "AdaDoom3", "id": 3445599, "node_id": "MDQ6VXNlcjM0NDU1OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3445599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdaDoom3", "html_url": "https://github.com/AdaDoom3", "followers_url": "https://api.github.com/users/AdaDoom3/followers", "following_url": "https://api.github.com/users/AdaDoom3/following{/other_user}", "gists_url": "https://api.github.com/users/AdaDoom3/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdaDoom3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdaDoom3/subscriptions", "organizations_url": "https://api.github.com/users/AdaDoom3/orgs", "repos_url": "https://api.github.com/users/AdaDoom3/repos", "events_url": "https://api.github.com/users/AdaDoom3/events{/privacy}", "received_events_url": "https://api.github.com/users/AdaDoom3/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e51102b29c1489ded25723b8149f44a32ff10696", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e51102b29c1489ded25723b8149f44a32ff10696", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e51102b29c1489ded25723b8149f44a32ff10696"}], "stats": {"total": 121, "additions": 115, "deletions": 6}, "files": [{"sha": "4def3273015fccf5821a3cb34c79c828c69327f3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84e13614352202b592fd28fc12c18c07b5ae5d53/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84e13614352202b592fd28fc12c18c07b5ae5d53/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=84e13614352202b592fd28fc12c18c07b5ae5d53", "patch": "@@ -1,3 +1,13 @@\n+2017-01-12  Justin Squirek  <squirek@adacore.com>\n+\n+\t* exp_ch6.adb (Check_View_Conversion): Created this function\n+\tto properly chain calls to check type invariants that may be\n+\tpresent in a subprogram call after the subprogram.\n+\t(Expand_Call): Add a conditional to identify when a view conversion\n+\tneeds to be checked.\n+\t* nlists.adb, nlists.ads (Prepend_New): New routine.\n+\t(Prepend_New_To): New routine.\n+\n 2017-01-12  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sinfo.ads: Minor reformatting."}, {"sha": "9b740ca0fc2a9eaf6a356e62b71a93c6b1db32ca", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84e13614352202b592fd28fc12c18c07b5ae5d53/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84e13614352202b592fd28fc12c18c07b5ae5d53/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=84e13614352202b592fd28fc12c18c07b5ae5d53", "patch": "@@ -2264,6 +2264,11 @@ package body Exp_Ch6 is\n       --  expression for the value of the actual, EF is the entity for the\n       --  extra formal.\n \n+      procedure Check_View_Conversion (Formal : Entity_Id; Actual : Node_Id);\n+      --  Adds Invariant checks for every intermediate type between\n+      --  the range of a view converted argument to its ancestor (from\n+      --  parent to child).\n+\n       function Inherited_From_Formal (S : Entity_Id) return Entity_Id;\n       --  Within an instance, a type derived from an untagged formal derived\n       --  type inherits from the original parent, not from the actual. The\n@@ -2350,6 +2355,57 @@ package body Exp_Ch6 is\n          end if;\n       end Add_Extra_Actual;\n \n+      ---------------------------\n+      -- Check_View_Conversion --\n+      ---------------------------\n+\n+      procedure Check_View_Conversion (Formal : Entity_Id; Actual : Node_Id) is\n+         Arg        : Entity_Id;\n+         Curr_Typ   : Entity_Id := Empty;\n+         Inv_Checks : List_Id;\n+         Par_Typ    : Entity_Id;\n+\n+      begin\n+         Inv_Checks := No_List;\n+\n+         --  Extract actual object for type conversions\n+\n+         Arg := Actual;\n+         while Nkind (Arg) = N_Type_Conversion loop\n+            Arg := Expression (Arg);\n+         end loop;\n+\n+         --  Move up the derivation chain starting with the type of the\n+         --  the formal parameter down to the type of the actual object.\n+\n+         Par_Typ := Etype (Arg);\n+         while Par_Typ /= Etype (Formal) and Par_Typ /= Curr_Typ loop\n+            Curr_Typ := Par_Typ;\n+            if Has_Invariants (Curr_Typ)\n+              and then Present (Invariant_Procedure (Curr_Typ))\n+            then\n+               --  Verify the invariate of the current type. Generate:\n+               --    Invariant_Check_Curr_Typ (Curr_Typ (Arg));\n+\n+               Prepend_New_To (Inv_Checks,\n+                 Make_Procedure_Call_Statement (Loc,\n+                   Name                   =>\n+                     New_Occurrence_Of\n+                       (Invariant_Procedure (Curr_Typ), Loc),\n+                   Parameter_Associations => New_List (\n+                     Make_Type_Conversion (Loc,\n+                       Subtype_Mark => New_Occurrence_Of (Curr_Typ, Loc),\n+                       Expression   => New_Copy_Tree (Arg)))));\n+            end if;\n+\n+            Par_Typ := Base_Type (Etype (Curr_Typ));\n+         end loop;\n+\n+         if not Is_Empty_List (Inv_Checks) then\n+            Insert_Actions_After (N, Inv_Checks);\n+         end if;\n+      end Check_View_Conversion;\n+\n       ---------------------------\n       -- Inherited_From_Formal --\n       ---------------------------\n@@ -3233,6 +3289,17 @@ package body Exp_Ch6 is\n                 Duplicate_Subexpr_Move_Checks (Actual)));\n          end if;\n \n+         --  Invariant checks are performed for every intermediate type between\n+         --  the range of a view converted argument to its ancestor (from\n+         --  parent to child) if it is passed as an \"out\" or \"in out\" parameter\n+         --  after executing the call (RM 7.3.2 (11-14)).\n+\n+         if Ekind (Formal) /= E_In_Parameter\n+           and then Nkind (Actual) = N_Type_Conversion\n+         then\n+            Check_View_Conversion (Formal, Actual);\n+         end if;\n+\n          --  This label is required when skipping extra actual generation for\n          --  Unchecked_Union parameters.\n "}, {"sha": "b5b2d8a788f867a23b4c77fbb44277575fb62a00", "filename": "gcc/ada/nlists.adb", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84e13614352202b592fd28fc12c18c07b5ae5d53/gcc%2Fada%2Fnlists.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84e13614352202b592fd28fc12c18c07b5ae5d53/gcc%2Fada%2Fnlists.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnlists.adb?ref=84e13614352202b592fd28fc12c18c07b5ae5d53", "patch": "@@ -1158,6 +1158,28 @@ package body Nlists is\n       Prepend_List (List, To);\n    end Prepend_List_To;\n \n+   -----------------\n+   -- Prepend_New --\n+   -----------------\n+\n+   procedure Prepend_New (Node : Node_Or_Entity_Id; To : in out List_Id) is\n+   begin\n+      if No (To) then\n+         To := New_List;\n+      end if;\n+\n+      Prepend (Node, To);\n+   end Prepend_New;\n+\n+   --------------------\n+   -- Prepend_New_To --\n+   --------------------\n+\n+   procedure Prepend_New_To (To : in out List_Id; Node : Node_Or_Entity_Id) is\n+   begin\n+      Prepend_New (Node, To);\n+   end Prepend_New_To;\n+\n    ----------------\n    -- Prepend_To --\n    ----------------"}, {"sha": "1cdcee6aff07d45a3a5d86bcbd8f948a6b5c1251", "filename": "gcc/ada/nlists.ads", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84e13614352202b592fd28fc12c18c07b5ae5d53/gcc%2Fada%2Fnlists.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84e13614352202b592fd28fc12c18c07b5ae5d53/gcc%2Fada%2Fnlists.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnlists.ads?ref=84e13614352202b592fd28fc12c18c07b5ae5d53", "patch": "@@ -289,12 +289,6 @@ package Nlists is\n    --  node list. An attempt to prepend an error node is ignored without\n    --  complaint and the list is unchanged.\n \n-   procedure Prepend_To\n-     (To   : List_Id;\n-      Node : Node_Or_Entity_Id);\n-   pragma Inline (Prepend_To);\n-   --  Like Prepend, but arguments are the other way round\n-\n    procedure Prepend_List\n      (List : List_Id;\n       To   : List_Id);\n@@ -307,6 +301,22 @@ package Nlists is\n    pragma Inline (Prepend_List_To);\n    --  Like Prepend_List, but arguments are the other way round\n \n+   procedure Prepend_New (Node : Node_Or_Entity_Id; To : in out List_Id);\n+   pragma Inline (Append_New);\n+   --  Prepends Node at the end of node list To. If To is non-existent list, a\n+   --  list is created. Node must be a non-empty node that is not already a\n+   --  member of a node list, and To must be a node list.\n+\n+   procedure Prepend_New_To (To : in out List_Id; Node : Node_Or_Entity_Id);\n+   pragma Inline (Append_New_To);\n+   --  Like Prepend_New, but the arguments are in reverse order\n+\n+   procedure Prepend_To\n+     (To   : List_Id;\n+      Node : Node_Or_Entity_Id);\n+   pragma Inline (Prepend_To);\n+   --  Like Prepend, but arguments are the other way round\n+\n    procedure Remove (Node : Node_Or_Entity_Id);\n    --  Removes Node, which must be a node that is a member of a node list,\n    --  from this node list. The contents of Node are not otherwise affected."}]}