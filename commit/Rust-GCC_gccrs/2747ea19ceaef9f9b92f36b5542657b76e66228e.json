{"sha": "2747ea19ceaef9f9b92f36b5542657b76e66228e", "node_id": "C_kwDOANBUbNoAKDI3NDdlYTE5Y2VhZWY5ZjliOTJmMzZiNTU0MjY1N2I3NmU2NjIyOGU", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-05-30T08:52:34Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-05-30T16:32:08Z"}, "message": "gccrs: Add missing HIR lowering to item statements\n\nAddresses #2238\n\ngcc/rust/ChangeLog:\n\n\t* hir/rust-ast-lower-stmt.cc (ASTLoweringStmt::translate): hir lowering\n\t(ASTLoweringStmt::visit): likewise\n\t* hir/rust-ast-lower-stmt.h: likewise\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>", "tree": {"sha": "21df959f4849d99c74bd8dfe16095dd56c11b6ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21df959f4849d99c74bd8dfe16095dd56c11b6ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2747ea19ceaef9f9b92f36b5542657b76e66228e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2747ea19ceaef9f9b92f36b5542657b76e66228e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2747ea19ceaef9f9b92f36b5542657b76e66228e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2747ea19ceaef9f9b92f36b5542657b76e66228e/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "019dd7b55ff05854569bc7e271a8b695e4c27065", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/019dd7b55ff05854569bc7e271a8b695e4c27065", "html_url": "https://github.com/Rust-GCC/gccrs/commit/019dd7b55ff05854569bc7e271a8b695e4c27065"}], "stats": {"total": 290, "additions": 28, "deletions": 262}, "files": [{"sha": "c050771b82f5157de459680000643dfe8f4108bf", "filename": "gcc/rust/hir/rust-ast-lower-stmt.cc", "status": "modified", "additions": 25, "deletions": 262, "changes": 287, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2747ea19ceaef9f9b92f36b5542657b76e66228e/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2747ea19ceaef9f9b92f36b5542657b76e66228e/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.cc?ref=2747ea19ceaef9f9b92f36b5542657b76e66228e", "patch": "@@ -16,10 +16,9 @@\n // along with GCC; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+#include \"rust-ast-lower-item.h\"\n #include \"rust-ast-lower-stmt.h\"\n-#include \"rust-ast-lower-enumitem.h\"\n #include \"rust-ast-lower-type.h\"\n-#include \"rust-ast-lower-block.h\"\n #include \"rust-ast-lower-expr.h\"\n #include \"rust-ast-lower-pattern.h\"\n \n@@ -40,16 +39,6 @@ ASTLoweringStmt::translate (AST::Stmt *stmt, bool *terminated)\n     resolver.translated->get_mappings ().get_hirid (),\n     resolver.translated->get_locus ());\n   resolver.mappings->insert_hir_stmt (resolver.translated);\n-  if (resolver.translated->is_item ())\n-    {\n-      HIR::Item *i = static_cast<HIR::Item *> (resolver.translated);\n-\n-      auto defid = resolver.translated->get_mappings ().get_defid ();\n-\n-      resolver.handle_outer_attributes (*i);\n-      resolver.mappings->insert_hir_item (i);\n-      resolver.mappings->insert_defid_mapping (defid, i);\n-    }\n \n   return resolver.translated;\n }\n@@ -72,21 +61,7 @@ ASTLoweringStmt::visit (AST::ExprStmt &stmt)\n void\n ASTLoweringStmt::visit (AST::ConstantItem &constant)\n {\n-  HIR::Visibility vis = translate_visibility (constant.get_visibility ());\n-\n-  HIR::Type *type = ASTLoweringType::translate (constant.get_type ().get ());\n-  HIR::Expr *expr = ASTLoweringExpr::translate (constant.get_expr ().get ());\n-\n-  auto crate_num = mappings->get_current_crate ();\n-  Analysis::NodeMapping mapping (crate_num, constant.get_node_id (),\n-\t\t\t\t mappings->get_next_hir_id (crate_num),\n-\t\t\t\t mappings->get_next_localdef_id (crate_num));\n-\n-  translated = new HIR::ConstantItem (mapping, constant.get_identifier (), vis,\n-\t\t\t\t      std::unique_ptr<HIR::Type> (type),\n-\t\t\t\t      std::unique_ptr<HIR::Expr> (expr),\n-\t\t\t\t      constant.get_outer_attrs (),\n-\t\t\t\t      constant.get_locus ());\n+  translated = ASTLoweringItem::translate (&constant);\n }\n \n void\n@@ -116,185 +91,25 @@ ASTLoweringStmt::visit (AST::LetStmt &stmt)\n void\n ASTLoweringStmt::visit (AST::TupleStruct &struct_decl)\n {\n-  std::vector<std::unique_ptr<HIR::GenericParam>> generic_params;\n-  if (struct_decl.has_generics ())\n-    {\n-      generic_params = lower_generic_params (struct_decl.get_generic_params ());\n-    }\n-\n-  std::vector<std::unique_ptr<HIR::WhereClauseItem>> where_clause_items;\n-  HIR::WhereClause where_clause (std::move (where_clause_items));\n-  HIR::Visibility vis = translate_visibility (struct_decl.get_visibility ());\n-\n-  std::vector<HIR::TupleField> fields;\n-  for (AST::TupleField &field : struct_decl.get_fields ())\n-    {\n-      HIR::Visibility vis = translate_visibility (field.get_visibility ());\n-      HIR::Type *type\n-\t= ASTLoweringType::translate (field.get_field_type ().get ());\n-\n-      auto crate_num = mappings->get_current_crate ();\n-      Analysis::NodeMapping mapping (crate_num, field.get_node_id (),\n-\t\t\t\t     mappings->get_next_hir_id (crate_num),\n-\t\t\t\t     mappings->get_next_localdef_id (\n-\t\t\t\t       crate_num));\n-\n-      HIR::TupleField translated_field (mapping,\n-\t\t\t\t\tstd::unique_ptr<HIR::Type> (type), vis,\n-\t\t\t\t\tfield.get_locus (),\n-\t\t\t\t\tfield.get_outer_attrs ());\n-      fields.push_back (std::move (translated_field));\n-    }\n-\n-  auto crate_num = mappings->get_current_crate ();\n-  Analysis::NodeMapping mapping (crate_num, struct_decl.get_node_id (),\n-\t\t\t\t mappings->get_next_hir_id (crate_num),\n-\t\t\t\t mappings->get_next_localdef_id (crate_num));\n-\n-  translated = new HIR::TupleStruct (mapping, std::move (fields),\n-\t\t\t\t     struct_decl.get_identifier (),\n-\t\t\t\t     std::move (generic_params),\n-\t\t\t\t     std::move (where_clause), vis,\n-\t\t\t\t     struct_decl.get_outer_attrs (),\n-\t\t\t\t     struct_decl.get_locus ());\n+  translated = ASTLoweringItem::translate (&struct_decl);\n }\n \n void\n ASTLoweringStmt::visit (AST::StructStruct &struct_decl)\n {\n-  std::vector<std::unique_ptr<HIR::GenericParam>> generic_params;\n-  if (struct_decl.has_generics ())\n-    {\n-      generic_params = lower_generic_params (struct_decl.get_generic_params ());\n-    }\n-\n-  std::vector<std::unique_ptr<HIR::WhereClauseItem>> where_clause_items;\n-  HIR::WhereClause where_clause (std::move (where_clause_items));\n-  HIR::Visibility vis = translate_visibility (struct_decl.get_visibility ());\n-\n-  bool is_unit = struct_decl.is_unit_struct ();\n-  std::vector<HIR::StructField> fields;\n-  for (AST::StructField &field : struct_decl.get_fields ())\n-    {\n-      HIR::Visibility vis = translate_visibility (field.get_visibility ());\n-      HIR::Type *type\n-\t= ASTLoweringType::translate (field.get_field_type ().get ());\n-\n-      auto crate_num = mappings->get_current_crate ();\n-      Analysis::NodeMapping mapping (crate_num, field.get_node_id (),\n-\t\t\t\t     mappings->get_next_hir_id (crate_num),\n-\t\t\t\t     mappings->get_next_localdef_id (\n-\t\t\t\t       crate_num));\n-\n-      HIR::StructField translated_field (mapping, field.get_field_name (),\n-\t\t\t\t\t std::unique_ptr<HIR::Type> (type), vis,\n-\t\t\t\t\t field.get_locus (),\n-\t\t\t\t\t field.get_outer_attrs ());\n-\n-      if (struct_field_name_exists (fields, translated_field))\n-\tbreak;\n-\n-      fields.push_back (std::move (translated_field));\n-    }\n-\n-  auto crate_num = mappings->get_current_crate ();\n-  Analysis::NodeMapping mapping (crate_num, struct_decl.get_node_id (),\n-\t\t\t\t mappings->get_next_hir_id (crate_num),\n-\t\t\t\t mappings->get_next_localdef_id (crate_num));\n-\n-  translated = new HIR::StructStruct (mapping, std::move (fields),\n-\t\t\t\t      struct_decl.get_identifier (),\n-\t\t\t\t      std::move (generic_params),\n-\t\t\t\t      std::move (where_clause), is_unit, vis,\n-\t\t\t\t      struct_decl.get_outer_attrs (),\n-\t\t\t\t      struct_decl.get_locus ());\n+  translated = ASTLoweringItem::translate (&struct_decl);\n }\n \n void\n ASTLoweringStmt::visit (AST::Union &union_decl)\n {\n-  std::vector<std::unique_ptr<HIR::GenericParam>> generic_params;\n-  if (union_decl.has_generics ())\n-    {\n-      generic_params = lower_generic_params (union_decl.get_generic_params ());\n-    }\n-\n-  std::vector<std::unique_ptr<HIR::WhereClauseItem>> where_clause_items;\n-  HIR::WhereClause where_clause (std::move (where_clause_items));\n-  HIR::Visibility vis = translate_visibility (union_decl.get_visibility ());\n-\n-  std::vector<HIR::StructField> variants;\n-  for (AST::StructField &variant : union_decl.get_variants ())\n-    {\n-      HIR::Visibility vis = translate_visibility (variant.get_visibility ());\n-      HIR::Type *type\n-\t= ASTLoweringType::translate (variant.get_field_type ().get ());\n-\n-      auto crate_num = mappings->get_current_crate ();\n-      Analysis::NodeMapping mapping (crate_num, variant.get_node_id (),\n-\t\t\t\t     mappings->get_next_hir_id (crate_num),\n-\t\t\t\t     mappings->get_next_localdef_id (\n-\t\t\t\t       crate_num));\n-\n-      HIR::StructField translated_variant (mapping, variant.get_field_name (),\n-\t\t\t\t\t   std::unique_ptr<HIR::Type> (type),\n-\t\t\t\t\t   vis, variant.get_locus (),\n-\t\t\t\t\t   variant.get_outer_attrs ());\n-\n-      if (struct_field_name_exists (variants, translated_variant))\n-\tbreak;\n-\n-      variants.push_back (std::move (translated_variant));\n-    }\n-\n-  auto crate_num = mappings->get_current_crate ();\n-  Analysis::NodeMapping mapping (crate_num, union_decl.get_node_id (),\n-\t\t\t\t mappings->get_next_hir_id (crate_num),\n-\t\t\t\t mappings->get_next_localdef_id (crate_num));\n-\n-  translated\n-    = new HIR::Union (mapping, union_decl.get_identifier (), vis,\n-\t\t      std::move (generic_params), std::move (where_clause),\n-\t\t      std::move (variants), union_decl.get_outer_attrs (),\n-\t\t      union_decl.get_locus ());\n+  translated = ASTLoweringItem::translate (&union_decl);\n }\n \n void\n ASTLoweringStmt::visit (AST::Enum &enum_decl)\n {\n-  std::vector<std::unique_ptr<HIR::GenericParam>> generic_params;\n-  if (enum_decl.has_generics ())\n-    {\n-      generic_params = lower_generic_params (enum_decl.get_generic_params ());\n-    }\n-\n-  std::vector<std::unique_ptr<HIR::WhereClauseItem>> where_clause_items;\n-  HIR::WhereClause where_clause (std::move (where_clause_items));\n-  HIR::Visibility vis = translate_visibility (enum_decl.get_visibility ());\n-\n-  // bool is_unit = enum_decl.is_zero_variant ();\n-  std::vector<std::unique_ptr<HIR::EnumItem>> items;\n-  for (auto &variant : enum_decl.get_variants ())\n-    {\n-      HIR::EnumItem *hir_item = ASTLoweringEnumItem::translate (variant.get ());\n-      items.push_back (std::unique_ptr<HIR::EnumItem> (hir_item));\n-    }\n-\n-  auto crate_num = mappings->get_current_crate ();\n-  Analysis::NodeMapping mapping (crate_num, enum_decl.get_node_id (),\n-\t\t\t\t mappings->get_next_hir_id (crate_num),\n-\t\t\t\t mappings->get_next_localdef_id (crate_num));\n-\n-  HIR::Enum *hir_enum\n-    = new HIR::Enum (mapping, enum_decl.get_identifier (), vis,\n-\t\t     std::move (generic_params), std::move (where_clause),\n-\t\t     std::move (items), enum_decl.get_outer_attrs (),\n-\t\t     enum_decl.get_locus ());\n-  translated = hir_enum;\n-  for (auto &variant : hir_enum->get_variants ())\n-    {\n-      mappings->insert_hir_enumitem (hir_enum, variant.get ());\n-    }\n+  translated = ASTLoweringItem::translate (&enum_decl);\n }\n \n void\n@@ -311,77 +126,7 @@ ASTLoweringStmt::visit (AST::EmptyStmt &empty)\n void\n ASTLoweringStmt::visit (AST::Function &function)\n {\n-  // ignore for now and leave empty\n-  std::vector<std::unique_ptr<HIR::WhereClauseItem>> where_clause_items;\n-  HIR::WhereClause where_clause (std::move (where_clause_items));\n-  HIR::FunctionQualifiers qualifiers\n-    = lower_qualifiers (function.get_qualifiers ());\n-  HIR::Visibility vis = translate_visibility (function.get_visibility ());\n-\n-  // need\n-  std::vector<std::unique_ptr<HIR::GenericParam>> generic_params;\n-  if (function.has_generics ())\n-    {\n-      generic_params = lower_generic_params (function.get_generic_params ());\n-    }\n-\n-  Identifier function_name = function.get_function_name ();\n-  Location locus = function.get_locus ();\n-\n-  std::unique_ptr<HIR::Type> return_type\n-    = function.has_return_type () ? std::unique_ptr<HIR::Type> (\n-\tASTLoweringType::translate (function.get_return_type ().get ()))\n-\t\t\t\t  : nullptr;\n-\n-  std::vector<HIR::FunctionParam> function_params;\n-  for (auto &param : function.get_function_params ())\n-    {\n-      auto translated_pattern = std::unique_ptr<HIR::Pattern> (\n-\tASTLoweringPattern::translate (param.get_pattern ().get ()));\n-      auto translated_type = std::unique_ptr<HIR::Type> (\n-\tASTLoweringType::translate (param.get_type ().get ()));\n-\n-      auto crate_num = mappings->get_current_crate ();\n-      Analysis::NodeMapping mapping (crate_num, param.get_node_id (),\n-\t\t\t\t     mappings->get_next_hir_id (crate_num),\n-\t\t\t\t     UNKNOWN_LOCAL_DEFID);\n-\n-      auto hir_param\n-\t= HIR::FunctionParam (mapping, std::move (translated_pattern),\n-\t\t\t      std::move (translated_type), param.get_locus ());\n-      function_params.push_back (hir_param);\n-    }\n-\n-  bool terminated = false;\n-  std::unique_ptr<HIR::BlockExpr> function_body\n-    = std::unique_ptr<HIR::BlockExpr> (\n-      ASTLoweringBlock::translate (function.get_definition ().get (),\n-\t\t\t\t   &terminated));\n-\n-  auto crate_num = mappings->get_current_crate ();\n-  Analysis::NodeMapping mapping (crate_num, function.get_node_id (),\n-\t\t\t\t mappings->get_next_hir_id (crate_num),\n-\t\t\t\t mappings->get_next_localdef_id (crate_num));\n-\n-  mappings->insert_location (function_body->get_mappings ().get_hirid (),\n-\t\t\t     function.get_locus ());\n-\n-  auto fn\n-    = new HIR::Function (mapping, std::move (function_name),\n-\t\t\t std::move (qualifiers), std::move (generic_params),\n-\t\t\t std::move (function_params), std::move (return_type),\n-\t\t\t std::move (where_clause), std::move (function_body),\n-\t\t\t std::move (vis), function.get_outer_attrs (),\n-\t\t\t HIR::SelfParam::error (), locus);\n-\n-  // add the mappings for the function params at the end\n-  for (auto &param : fn->get_function_params ())\n-    {\n-      mappings->insert_hir_param (&param);\n-      mappings->insert_location (mapping.get_hirid (), param.get_locus ());\n-    }\n-\n-  translated = fn;\n+  translated = ASTLoweringItem::translate (&function);\n }\n \n void\n@@ -396,5 +141,23 @@ ASTLoweringStmt::visit (AST::MacroRulesDefinition &def)\n   lower_macro_definition (def);\n }\n \n+void\n+ASTLoweringStmt::visit (AST::Trait &trait)\n+{\n+  translated = ASTLoweringItem::translate (&trait);\n+}\n+\n+void\n+ASTLoweringStmt::visit (AST::InherentImpl &impl_block)\n+{\n+  translated = ASTLoweringItem::translate (&impl_block);\n+}\n+\n+void\n+ASTLoweringStmt::visit (AST::TraitImpl &impl_block)\n+{\n+  translated = ASTLoweringItem::translate (&impl_block);\n+}\n+\n } // namespace HIR\n } // namespace Rust"}, {"sha": "2e87130d3d94a064e128502a25dbca85332db865", "filename": "gcc/rust/hir/rust-ast-lower-stmt.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2747ea19ceaef9f9b92f36b5542657b76e66228e/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2747ea19ceaef9f9b92f36b5542657b76e66228e/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h?ref=2747ea19ceaef9f9b92f36b5542657b76e66228e", "patch": "@@ -42,6 +42,9 @@ class ASTLoweringStmt : public ASTLoweringBase\n   void visit (AST::Function &function) override;\n   void visit (AST::ExternBlock &extern_block) override;\n   void visit (AST::MacroRulesDefinition &extern_block) override;\n+  void visit (AST::Trait &trait) override;\n+  void visit (AST::InherentImpl &impl_block) override;\n+  void visit (AST::TraitImpl &impl_block) override;\n \n private:\n   ASTLoweringStmt () : translated (nullptr), terminated (false) {}"}]}