{"sha": "b4a4b56dc7ff0bb336abd777cb8f2437cd05909b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRhNGI1NmRjN2ZmMGJiMzM2YWJkNzc3Y2I4ZjI0MzdjZDA1OTA5Yg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-02-11T13:33:19Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-02-11T13:33:19Z"}, "message": "re PR tree-optimization/56273 (Bogus -Warray-bounds warning)\n\n2013-02-11  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/56273\n\t* tree-vrp.c (simplify_cond_using_ranges): Disable for the\n\tfirst VRP run.\n\t(check_array_ref): Fix missing newline in dumps.\n\t(search_for_addr_array): Likewise.\n\n\t* g++.dg/warn/Warray-bounds-6.C: New testcase.\n\t* gcc.dg/tree-ssa/pr21559.c: Adjust.\n\t* gcc.dg/tree-ssa/vrp17.c: Likewise.\n\t* gcc.dg/tree-ssa/vrp18.c: Likewise.\n\t* gcc.dg/tree-ssa/vrp23.c: Likewise.\n\t* gcc.dg/tree-ssa/vrp24.c: Likewise.\n\nFrom-SVN: r195940", "tree": {"sha": "03c7a299ead75282880171606b8684c11336788e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03c7a299ead75282880171606b8684c11336788e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4a4b56dc7ff0bb336abd777cb8f2437cd05909b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4a4b56dc7ff0bb336abd777cb8f2437cd05909b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4a4b56dc7ff0bb336abd777cb8f2437cd05909b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4a4b56dc7ff0bb336abd777cb8f2437cd05909b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3b424b30be6a93cfc68df6f77e0aa1ce673d71fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b424b30be6a93cfc68df6f77e0aa1ce673d71fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b424b30be6a93cfc68df6f77e0aa1ce673d71fe"}], "stats": {"total": 99, "additions": 76, "deletions": 23}, "files": [{"sha": "4c69a8d84e7ba3dc634f15d67e17e7b9516c267e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4a4b56dc7ff0bb336abd777cb8f2437cd05909b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4a4b56dc7ff0bb336abd777cb8f2437cd05909b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b4a4b56dc7ff0bb336abd777cb8f2437cd05909b", "patch": "@@ -1,3 +1,11 @@\n+2013-02-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/56273\n+\t* tree-vrp.c (simplify_cond_using_ranges): Disable for the\n+\tfirst VRP run.\n+\t(check_array_ref): Fix missing newline in dumps.\n+\t(search_for_addr_array): Likewise.\n+\n 2013-02-09  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* config/rs6000/aix61.h (OS_MISSING_ALTIVEC): Undefine."}, {"sha": "e21dbf7dd8f6a3a57f59cebde9d261e442b83cec", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4a4b56dc7ff0bb336abd777cb8f2437cd05909b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4a4b56dc7ff0bb336abd777cb8f2437cd05909b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b4a4b56dc7ff0bb336abd777cb8f2437cd05909b", "patch": "@@ -1,3 +1,13 @@\n+2013-02-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/56273\n+\t* g++.dg/warn/Warray-bounds-6.C: New testcase.\n+\t* gcc.dg/tree-ssa/pr21559.c: Adjust.\n+\t* gcc.dg/tree-ssa/vrp17.c: Likewise.\n+\t* gcc.dg/tree-ssa/vrp18.c: Likewise.\n+\t* gcc.dg/tree-ssa/vrp23.c: Likewise.\n+\t* gcc.dg/tree-ssa/vrp24.c: Likewise.\n+\n 2013-02-09  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* g++.dg/asan/asan_test.C: Compile with -D__NO_INLINE__"}, {"sha": "ee2862f1ec17a4c8d9e2a2e39738785ded71142d", "filename": "gcc/testsuite/g++.dg/warn/Warray-bounds-6.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4a4b56dc7ff0bb336abd777cb8f2437cd05909b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4a4b56dc7ff0bb336abd777cb8f2437cd05909b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-6.C?ref=b4a4b56dc7ff0bb336abd777cb8f2437cd05909b", "patch": "@@ -0,0 +1,30 @@\n+// { dg-do compile }\n+// { dg-options \"-O3 -Warray-bounds\" }\n+\n+struct type {\n+    bool a, b;\n+    bool get_b() { return b; }\n+};\n+\n+type stuff[9u];\n+\n+void bar();\n+\n+void foo() {\n+\n+    for(unsigned i = 0u; i < 9u; i++) {\n+\n+\tif(!stuff[i].a) {\n+\t    continue;\n+\t}\n+\n+\tbar();\n+\n+\tfor(unsigned j = i + 1u; j < 9u; j++) {\n+\t    if(stuff[j].a && stuff[j].get_b()) { // { dg-bogus \"array bounds\" }\n+\t\treturn;\n+\t    }\n+\t}\n+\n+    }\n+}"}, {"sha": "d7d3bab154dc87e6f7d99071e2caa45042723244", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr21559.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4a4b56dc7ff0bb336abd777cb8f2437cd05909b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21559.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4a4b56dc7ff0bb336abd777cb8f2437cd05909b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21559.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21559.c?ref=b4a4b56dc7ff0bb336abd777cb8f2437cd05909b", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1-details\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp-details\" } */\n \n static int blocksize = 4096;\n \n@@ -32,12 +32,12 @@ void foo (void)\n \n \n /* First, we should simplify the bits < 0 test within the loop.  */\n-/* { dg-final { scan-tree-dump-times \"Simplified relational\" 1 \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Simplified relational\" 1 \"vrp2\" } } */\n \n /* Second, we should thread the edge out of the loop via the break\n    statement.  We also realize that the final bytes == 0 test is useless,\n    and thread over it.  */\n /* { dg-final { scan-tree-dump-times \"Threaded jump\" 3 \"vrp1\" } } */\n \n /* { dg-final { cleanup-tree-dump \"vrp1\" } } */\n-\n+/* { dg-final { cleanup-tree-dump \"vrp2\" } } */"}, {"sha": "c501a7f338fc523ed3acee79438f873d2d767d23", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp17.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4a4b56dc7ff0bb336abd777cb8f2437cd05909b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4a4b56dc7ff0bb336abd777cb8f2437cd05909b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp17.c?ref=b4a4b56dc7ff0bb336abd777cb8f2437cd05909b", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp2\" } */\n \n extern void abort (void) __attribute__ ((__noreturn__));\n union tree_node;\n@@ -27,6 +27,5 @@ gimplify_for_stmt (tree stmt)\n     abort ();\n }\n \n-/* { dg-final { scan-tree-dump-times \"Simplified relational\" 1 \"vrp1\" } } */\n-/* { dg-final { cleanup-tree-dump \"vrp1\" } } */\n-\n+/* { dg-final { scan-tree-dump-times \"Simplified relational\" 1 \"vrp2\" } } */\n+/* { dg-final { cleanup-tree-dump \"vrp2\" } } */"}, {"sha": "610dd44cf2f2943a56715e601ea71e272bb4ba17", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp18.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4a4b56dc7ff0bb336abd777cb8f2437cd05909b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4a4b56dc7ff0bb336abd777cb8f2437cd05909b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp18.c?ref=b4a4b56dc7ff0bb336abd777cb8f2437cd05909b", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp2\" } */\n \n static int blocksize = 4096;\n \n@@ -30,5 +30,5 @@ void foo (void)\n     eof_reached = 1;\n }\n \n-/* { dg-final { scan-tree-dump-times \"Simplified relational\" 1 \"vrp1\" } } */\n-/* { dg-final { cleanup-tree-dump \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Simplified relational\" 1 \"vrp2\" } } */\n+/* { dg-final { cleanup-tree-dump \"vrp2\" } } */"}, {"sha": "6bca02b44e19c6fca6add73b2626c438a0e03998", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp23.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4a4b56dc7ff0bb336abd777cb8f2437cd05909b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4a4b56dc7ff0bb336abd777cb8f2437cd05909b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp23.c?ref=b4a4b56dc7ff0bb336abd777cb8f2437cd05909b", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1-details\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp2-details\" } */\n \n blah (int code1, int code2)\n {\n@@ -40,6 +40,5 @@ blah (int code1, int code2)\n /* The n_sets > 0 test can be simplified into n_sets == 1 since the\n    only way to reach the test is when n_sets <= 1, and the only value\n    which satisfies both conditions is n_sets == 1.  */\n-/* { dg-final { scan-tree-dump-times \"Simplified relational\" 1 \"vrp1\" } } */\n-/* { dg-final { cleanup-tree-dump \"vrp1\" } } */\n-\n+/* { dg-final { scan-tree-dump-times \"Simplified relational\" 1 \"vrp2\" } } */\n+/* { dg-final { cleanup-tree-dump \"vrp2\" } } */"}, {"sha": "28e1a924f54b6cc982b05801427f541410b4a8a3", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp24.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4a4b56dc7ff0bb336abd777cb8f2437cd05909b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4a4b56dc7ff0bb336abd777cb8f2437cd05909b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp24.c?ref=b4a4b56dc7ff0bb336abd777cb8f2437cd05909b", "patch": "@@ -1,6 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1-details\" } */\n-\n+/* { dg-options \"-O2 -fno-tree-dominator-opts -fdump-tree-vrp2-details\" } */\n \n struct rtx_def;\n typedef struct rtx_def *rtx;\n@@ -86,6 +85,5 @@ sss (rtx insn, int code1, int code2, int code3)\n    The second n_sets > 0 test can also be simplified into n_sets == 1\n    as the only way to reach the tests is when n_sets <= 1 and the only\n    value which satisfies both conditions is n_sets == 1.  */\n-/* { dg-final { scan-tree-dump-times \"Simplified relational\" 2 \"vrp1\" } } */\n-/* { dg-final { cleanup-tree-dump \"vrp1\" } } */\n-\n+/* { dg-final { scan-tree-dump-times \"Simplified relational\" 2 \"vrp2\" } } */\n+/* { dg-final { cleanup-tree-dump \"vrp2\" } } */"}, {"sha": "a023a460371467e1d25bebe8ee11df7758b3518e", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4a4b56dc7ff0bb336abd777cb8f2437cd05909b/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4a4b56dc7ff0bb336abd777cb8f2437cd05909b/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=b4a4b56dc7ff0bb336abd777cb8f2437cd05909b", "patch": "@@ -6027,6 +6027,7 @@ check_array_ref (location_t location, tree ref, bool ignore_off_by_one)\n \t{\n \t  fprintf (dump_file, \"Array bound warning for \");\n \t  dump_generic_expr (MSG_NOTE, TDF_SLIM, ref);\n+\t  fprintf (dump_file, \"\\n\");\n \t}\n       warning_at (location, OPT_Warray_bounds,\n \t\t  \"array subscript is above array bounds\");\n@@ -6039,6 +6040,7 @@ check_array_ref (location_t location, tree ref, bool ignore_off_by_one)\n \t{\n \t  fprintf (dump_file, \"Array bound warning for \");\n \t  dump_generic_expr (MSG_NOTE, TDF_SLIM, ref);\n+\t  fprintf (dump_file, \"\\n\");\n \t}\n       warning_at (location, OPT_Warray_bounds,\n \t\t  \"array subscript is below array bounds\");\n@@ -6112,6 +6114,7 @@ search_for_addr_array (tree t, location_t location)\n \t    {\n \t      fprintf (dump_file, \"Array bound warning for \");\n \t      dump_generic_expr (MSG_NOTE, TDF_SLIM, t);\n+\t      fprintf (dump_file, \"\\n\");\n \t    }\n \t  warning_at (location, OPT_Warray_bounds,\n \t\t      \"array subscript is below array bounds\");\n@@ -6125,6 +6128,7 @@ search_for_addr_array (tree t, location_t location)\n \t    {\n \t      fprintf (dump_file, \"Array bound warning for \");\n \t      dump_generic_expr (MSG_NOTE, TDF_SLIM, t);\n+\t      fprintf (dump_file, \"\\n\");\n \t    }\n \t  warning_at (location, OPT_Warray_bounds,\n \t\t      \"array subscript is above array bounds\");\n@@ -8499,9 +8503,8 @@ test_for_singularity (enum tree_code cond_code, tree op0,\n   return NULL;\n }\n \n-/* Simplify a conditional using a relational operator to an equality\n-   test if the range information indicates only one value can satisfy\n-   the original conditional.  */\n+/* Simplify the conditional stmt STMT using final range information.\n+   Return true if we simplified the statement.  */\n \n static bool\n simplify_cond_using_ranges (gimple stmt)\n@@ -8510,7 +8513,13 @@ simplify_cond_using_ranges (gimple stmt)\n   tree op1 = gimple_cond_rhs (stmt);\n   enum tree_code cond_code = gimple_cond_code (stmt);\n \n-  if (cond_code != NE_EXPR\n+  /* Simplify a conditional using a relational operator to an equality\n+     test if the range information indicates only one value can satisfy\n+     the original conditional.\n+     Do that only in the second VRP pass as otherwise assertions derived\n+     from this predicate are weakened.  */\n+  if (!first_pass_instance\n+      && cond_code != NE_EXPR\n       && cond_code != EQ_EXPR\n       && TREE_CODE (op0) == SSA_NAME\n       && INTEGRAL_TYPE_P (TREE_TYPE (op0))"}]}