{"sha": "7ba8c18c1eb8ab48d44a9735c9974ae09b8dd9d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JhOGMxOGMxZWI4YWI0OGQ0NGE5NzM1Yzk5NzRhZTA5YjhkZDlkNA==", "commit": {"author": {"name": "Daniel Franke", "email": "franke.daniel@gmail.com", "date": "2009-06-06T18:51:29Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2009-06-06T18:51:29Z"}, "message": "re PR fortran/32890 (Compile-time detect of LHS/RHS missmatch for PACK)\n\nfortran/\n2009-06-06  Daniel Franke  <franke.daniel@gmail.com>\n\n        PR fortran/32890\n        * intrinsic.h (gfc_simplify_pack): New prototype.\n        * intrinsic.c (add_functions): Added simplifier-callback to PACK.\n        * simplify.c (is_constant_array_expr): Moved to beginning of file.\n        (gfc_simplify_pack): New.\n        * check.c (gfc_check_pack): Check that VECTOR has enough elements.\n        Added safeguards for empty arrays.\n\ntestsuite/\n2009-06-06  Daniel Franke  <franke.daniel@gmail.com>\n\n        PR fortran/32890\n        * gfortran.dg/pack_assign_1.f90: New.\n        * gfortran.dg/pack_vector_1.f90: New.\n\nFrom-SVN: r148237", "tree": {"sha": "fd5f22b85c7834a1bd7f940233ff37789a1b2dc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd5f22b85c7834a1bd7f940233ff37789a1b2dc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ba8c18c1eb8ab48d44a9735c9974ae09b8dd9d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ba8c18c1eb8ab48d44a9735c9974ae09b8dd9d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ba8c18c1eb8ab48d44a9735c9974ae09b8dd9d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ba8c18c1eb8ab48d44a9735c9974ae09b8dd9d4/comments", "author": {"login": "dfranke76", "id": 15729164, "node_id": "MDQ6VXNlcjE1NzI5MTY0", "avatar_url": "https://avatars.githubusercontent.com/u/15729164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfranke76", "html_url": "https://github.com/dfranke76", "followers_url": "https://api.github.com/users/dfranke76/followers", "following_url": "https://api.github.com/users/dfranke76/following{/other_user}", "gists_url": "https://api.github.com/users/dfranke76/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfranke76/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfranke76/subscriptions", "organizations_url": "https://api.github.com/users/dfranke76/orgs", "repos_url": "https://api.github.com/users/dfranke76/repos", "events_url": "https://api.github.com/users/dfranke76/events{/privacy}", "received_events_url": "https://api.github.com/users/dfranke76/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dbb0ce047b0299395e1f7140ec6474cf402498ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbb0ce047b0299395e1f7140ec6474cf402498ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbb0ce047b0299395e1f7140ec6474cf402498ca"}], "stats": {"total": 207, "additions": 184, "deletions": 23}, "files": [{"sha": "b50949f757903d080606b7f70017cd78925cdb69", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ba8c18c1eb8ab48d44a9735c9974ae09b8dd9d4/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ba8c18c1eb8ab48d44a9735c9974ae09b8dd9d4/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7ba8c18c1eb8ab48d44a9735c9974ae09b8dd9d4", "patch": "@@ -1,3 +1,15 @@\n+2009-06-06  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/32890\n+\t* intrinsic.h (gfc_simplify_pack): New prototype.\n+\t* intrinsic.c (add_functions): Added\n+\tsimplifier-callback to PACK.\n+\t* simplify.c (is_constant_array_expr): Moved\n+\tto beginning of file.\n+\t(gfc_simplify_pack): New.\n+\t* check.c (gfc_check_pack): Check that VECTOR has enough elements.\n+\tAdded safeguards for empty arrays.\n+\n 2009-06-05  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* simplify.c (call_mpc_func): Use mpc_realref/mpc_imagref"}, {"sha": "b61909bf40a83455174e678e08dfd30c07cc0847", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 51, "deletions": 1, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ba8c18c1eb8ab48d44a9735c9974ae09b8dd9d4/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ba8c18c1eb8ab48d44a9735c9974ae09b8dd9d4/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=7ba8c18c1eb8ab48d44a9735c9974ae09b8dd9d4", "patch": "@@ -2149,13 +2149,63 @@ gfc_check_pack (gfc_expr *array, gfc_expr *mask, gfc_expr *vector)\n \n   if (vector != NULL)\n     {\n+      mpz_t array_size, vector_size;\n+      bool have_array_size, have_vector_size;\n+\n       if (same_type_check (array, 0, vector, 2) == FAILURE)\n \treturn FAILURE;\n \n       if (rank_check (vector, 2, 1) == FAILURE)\n \treturn FAILURE;\n \n-      /* TODO: More constraints here.  */\n+      /* VECTOR requires at least as many elements as MASK\n+         has .TRUE. values.  */\n+      have_array_size = gfc_array_size (array, &array_size) == SUCCESS;\n+      have_vector_size = gfc_array_size (vector, &vector_size) == SUCCESS;\n+\n+      if (have_vector_size\n+\t  && (mask->expr_type == EXPR_ARRAY\n+\t      || (mask->expr_type == EXPR_CONSTANT\n+\t\t  && have_array_size)))\n+\t{\n+\t  int mask_true_values = 0;\n+\n+\t  if (mask->expr_type == EXPR_ARRAY)\n+\t    {\n+\t      gfc_constructor *mask_ctor = mask->value.constructor;\n+\t      while (mask_ctor)\n+\t\t{\n+\t\t  if (mask_ctor->expr->expr_type != EXPR_CONSTANT)\n+\t\t    {\n+\t\t      mask_true_values = 0;\n+\t\t      break;\n+\t\t    }\n+\n+\t\t  if (mask_ctor->expr->value.logical)\n+\t\t    mask_true_values++;\n+\n+\t\t  mask_ctor = mask_ctor->next;\n+\t\t}\n+\t    }\n+\t  else if (mask->expr_type == EXPR_CONSTANT && mask->value.logical)\n+\t    mask_true_values = mpz_get_si (array_size);\n+\n+\t  if (mpz_get_si (vector_size) < mask_true_values)\n+\t    {\n+\t      gfc_error (\"'%s' argument of '%s' intrinsic at %L must \"\n+\t\t\t \"provide at least as many elements as there \"\n+\t\t\t \"are .TRUE. values in '%s' (%ld/%d)\",\n+\t\t\t gfc_current_intrinsic_arg[2],gfc_current_intrinsic, \n+\t\t\t &vector->where, gfc_current_intrinsic_arg[1],\n+\t\t\t mpz_get_si (vector_size), mask_true_values);\n+\t      return FAILURE;\n+\t    }\n+\t}\n+\n+      if (have_array_size)\n+\tmpz_clear (array_size);\n+      if (have_vector_size)\n+\tmpz_clear (vector_size);\n     }\n \n   return SUCCESS;"}, {"sha": "7744b339a399708f93a47455fb4de3472e172dca", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ba8c18c1eb8ab48d44a9735c9974ae09b8dd9d4/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ba8c18c1eb8ab48d44a9735c9974ae09b8dd9d4/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=7ba8c18c1eb8ab48d44a9735c9974ae09b8dd9d4", "patch": "@@ -2209,7 +2209,7 @@ add_functions (void)\n   make_generic (\"null\", GFC_ISYM_NULL, GFC_STD_F95);\n \n   add_sym_3 (\"pack\", GFC_ISYM_PACK, CLASS_TRANSFORMATIONAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F95,\n-\t     gfc_check_pack, NULL, gfc_resolve_pack,\n+\t     gfc_check_pack, gfc_simplify_pack, gfc_resolve_pack,\n \t     ar, BT_REAL, dr, REQUIRED, msk, BT_LOGICAL, dl, REQUIRED,\n \t     v, BT_REAL, dr, OPTIONAL);\n "}, {"sha": "4a4aa5a72808c440e05d3ef0a1a9c833e9803759", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ba8c18c1eb8ab48d44a9735c9974ae09b8dd9d4/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ba8c18c1eb8ab48d44a9735c9974ae09b8dd9d4/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=7ba8c18c1eb8ab48d44a9735c9974ae09b8dd9d4", "patch": "@@ -289,6 +289,7 @@ gfc_expr *gfc_simplify_null (gfc_expr *);\n gfc_expr *gfc_simplify_idnint (gfc_expr *);\n gfc_expr *gfc_simplify_not (gfc_expr *);\n gfc_expr *gfc_simplify_or (gfc_expr *, gfc_expr *);\n+gfc_expr *gfc_simplify_pack (gfc_expr *, gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_precision (gfc_expr *);\n gfc_expr *gfc_simplify_radix (gfc_expr *);\n gfc_expr *gfc_simplify_range (gfc_expr *);"}, {"sha": "09cf29781880f5107ba2882020ad9bab79d1b4e8", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 95, "deletions": 21, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ba8c18c1eb8ab48d44a9735c9974ae09b8dd9d4/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ba8c18c1eb8ab48d44a9735c9974ae09b8dd9d4/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=7ba8c18c1eb8ab48d44a9735c9974ae09b8dd9d4", "patch": "@@ -27,6 +27,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"intrinsic.h\"\n #include \"target-memory.h\"\n \n+/* Savely advance an array constructor by 'n' elements.\n+   Mainly used by simplifiers of transformational intrinsics.  */\n+#define ADVANCE(ctor, n) do { int i; for (i = 0; i < n && ctor; ++i) ctor = ctor->next; } while (0)\n+\n gfc_expr gfc_bad_expr;\n \n \n@@ -229,6 +233,28 @@ call_mpc_func (mpfr_ptr result_re, mpfr_ptr result_im,\n }\n #endif\n \n+\n+/* Test that the expression is an constant array.  */\n+\n+static bool\n+is_constant_array_expr (gfc_expr *e)\n+{\n+  gfc_constructor *c;\n+\n+  if (e == NULL)\n+    return true;\n+\n+  if (e->expr_type != EXPR_ARRAY || !gfc_is_constant_expr (e))\n+    return false;\n+\n+  for (c = e->value.constructor; c; c = c->next)\n+    if (c->expr->expr_type != EXPR_CONSTANT)\n+      return false;\n+\n+  return true;\n+}\n+\n+\n /********************** Simplification functions *****************************/\n \n gfc_expr *\n@@ -3359,6 +3385,75 @@ gfc_simplify_or (gfc_expr *x, gfc_expr *y)\n }\n \n \n+gfc_expr *\n+gfc_simplify_pack (gfc_expr *array, gfc_expr *mask, gfc_expr *vector)\n+{\n+  gfc_expr *result;\n+  gfc_constructor *array_ctor, *mask_ctor, *vector_ctor;\n+\n+  if (!is_constant_array_expr(array)\n+      || !is_constant_array_expr(vector)\n+      || (!gfc_is_constant_expr (mask)\n+          && !is_constant_array_expr(mask)))\n+    return NULL;\n+\n+  result = gfc_start_constructor (array->ts.type, \n+\t\t\t\t  array->ts.kind,\n+\t\t\t\t  &array->where);\n+\n+  array_ctor = array->value.constructor;\n+  vector_ctor = vector ? vector->value.constructor : NULL;\n+\n+  if (mask->expr_type == EXPR_CONSTANT\n+      && mask->value.logical)\n+    {\n+      /* Copy all elements of ARRAY to RESULT.  */\n+      while (array_ctor)\n+\t{\n+\t  gfc_append_constructor (result, \n+\t\t\t\t  gfc_copy_expr (array_ctor->expr));\n+\n+\t  ADVANCE (array_ctor, 1);\n+\t  ADVANCE (vector_ctor, 1);\n+\t}\n+    }\n+  else if (mask->expr_type == EXPR_ARRAY)\n+    {\n+      /* Copy only those elements of ARRAY to RESULT whose \n+\t MASK equals .TRUE..  */\n+      mask_ctor = mask->value.constructor;\n+      while (mask_ctor)\n+\t{\n+\t  if (mask_ctor->expr->value.logical)\n+\t    {\n+\t      gfc_append_constructor (result, \n+\t\t\t\t      gfc_copy_expr (array_ctor->expr)); \n+\t      ADVANCE (vector_ctor, 1);\n+\t    }\n+\n+\t  ADVANCE (array_ctor, 1);\n+\t  ADVANCE (mask_ctor, 1);\n+\t}\n+    }\n+\n+  /* Append any left-over elements from VECTOR to RESULT.  */\n+  while (vector_ctor)\n+    {\n+      gfc_append_constructor (result, \n+\t\t\t      gfc_copy_expr (vector_ctor->expr));\n+      ADVANCE (vector_ctor, 1);\n+    }\n+\n+  result->shape = gfc_get_shape (1);\n+  gfc_array_size (result, &result->shape[0]);\n+\n+  if (array->ts.type == BT_CHARACTER)\n+    result->ts.cl = array->ts.cl;\n+\n+  return result;\n+}\n+\n+\n gfc_expr *\n gfc_simplify_precision (gfc_expr *e)\n {\n@@ -3621,27 +3716,6 @@ gfc_simplify_repeat (gfc_expr *e, gfc_expr *n)\n }\n \n \n-/* Test that the expression is an constant array.  */\n-\n-static bool\n-is_constant_array_expr (gfc_expr *e)\n-{\n-  gfc_constructor *c;\n-\n-  if (e == NULL)\n-    return true;\n-\n-  if (e->expr_type != EXPR_ARRAY || !gfc_is_constant_expr (e))\n-    return false;\n-  \n-  for (c = e->value.constructor; c; c = c->next)\n-    if (c->expr->expr_type != EXPR_CONSTANT)\n-      return false;\n-\n-  return true;\n-}\n-\n-\n /* This one is a bear, but mainly has to do with shuffling elements.  */\n \n gfc_expr *"}, {"sha": "ca9f04fc03d930d7942fd6699ca1bd14c7d83a15", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ba8c18c1eb8ab48d44a9735c9974ae09b8dd9d4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ba8c18c1eb8ab48d44a9735c9974ae09b8dd9d4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7ba8c18c1eb8ab48d44a9735c9974ae09b8dd9d4", "patch": "@@ -1,3 +1,9 @@\n+2009-06-06  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/32890\n+\t* gfortran.dg/pack_assign_1.f90: New.\n+\t* gfortran.dg/pack_vector_1.f90: New.\n+\n 2009-06-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/40340"}, {"sha": "4bab0da940e4d02af492e8e7d60fde61683d0537", "filename": "gcc/testsuite/gfortran.dg/pack_assign_1.f90", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ba8c18c1eb8ab48d44a9735c9974ae09b8dd9d4/gcc%2Ftestsuite%2Fgfortran.dg%2Fpack_assign_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ba8c18c1eb8ab48d44a9735c9974ae09b8dd9d4/gcc%2Ftestsuite%2Fgfortran.dg%2Fpack_assign_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpack_assign_1.f90?ref=7ba8c18c1eb8ab48d44a9735c9974ae09b8dd9d4", "patch": "@@ -0,0 +1,8 @@\n+! { dg-do \"compile\" }\n+! PR32890 - compile-time checks for assigments\n+\n+INTEGER :: it, neighbrs(42)  ! anything but 30\n+\n+neighbrs = PACK((/ (it, it=1,30) /), (/ (it, it=1,30) /) < 3, (/ (0,it=1,30) /) )  ! { dg-error \"Different shape\" }\n+\n+END"}, {"sha": "ba3624e7ef5f4ac4259ab5cd6c128e60370b49ff", "filename": "gcc/testsuite/gfortran.dg/pack_vector_1.f90", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ba8c18c1eb8ab48d44a9735c9974ae09b8dd9d4/gcc%2Ftestsuite%2Fgfortran.dg%2Fpack_vector_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ba8c18c1eb8ab48d44a9735c9974ae09b8dd9d4/gcc%2Ftestsuite%2Fgfortran.dg%2Fpack_vector_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpack_vector_1.f90?ref=7ba8c18c1eb8ab48d44a9735c9974ae09b8dd9d4", "patch": "@@ -0,0 +1,10 @@\n+! { dg-do \"compile\" }\n+!\n+! Check that the VECTOR argument of the PACK intrinsic has at least\n+! as many elements as the MASK has .TRUE. values.\n+!\n+\n+  INTEGER :: res(2)\n+  res = PACK ((/ 1, 2, 3 /), (/.TRUE., .TRUE., .FALSE. /), SHAPE(1)) !{ dg-error \"must provide at least as many\" }\n+  res = PACK ((/ 1, 2, 3 /), (/.TRUE., .TRUE., .FALSE. /), (/ -1 /)) !{ dg-error \"must provide at least as many\" }\n+END"}]}