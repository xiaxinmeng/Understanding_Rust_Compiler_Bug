{"sha": "4147232b5c88a1aa647626825cd98516f9ffb0d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE0NzIzMmI1Yzg4YTFhYTY0NzYyNjgyNWNkOTg1MTZmOWZmYjBkNw==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@act-europe.fr", "date": "2003-04-14T21:51:07Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2003-04-14T21:51:07Z"}, "message": "global.c (global_conflicts): Prevent allocation of call clobbered hard regs to pseudos live across abnormal...\n\n\t* global.c (global_conflicts): Prevent allocation of call clobbered\n\thard regs to pseudos live across abnormal edges, as later passes are\n\tnot ready to handle them.\n\nFrom-SVN: r65597", "tree": {"sha": "ac2b435b1226bd9d87e98bbeba76fed3478b54f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac2b435b1226bd9d87e98bbeba76fed3478b54f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4147232b5c88a1aa647626825cd98516f9ffb0d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4147232b5c88a1aa647626825cd98516f9ffb0d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4147232b5c88a1aa647626825cd98516f9ffb0d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4147232b5c88a1aa647626825cd98516f9ffb0d7/comments", "author": null, "committer": null, "parents": [{"sha": "798a3935348d9d9f26b9b42ad1e65a1f52b7890c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/798a3935348d9d9f26b9b42ad1e65a1f52b7890c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/798a3935348d9d9f26b9b42ad1e65a1f52b7890c"}], "stats": {"total": 32, "additions": 24, "deletions": 8}, "files": [{"sha": "93af039800d6fe3c40ea537ef560f8c9543e6b26", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4147232b5c88a1aa647626825cd98516f9ffb0d7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4147232b5c88a1aa647626825cd98516f9ffb0d7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4147232b5c88a1aa647626825cd98516f9ffb0d7", "patch": "@@ -17,6 +17,10 @@\n \n 2003-04-14  Olivier Hainque <hainque@act-europe.fr>\n \n+\t* global.c (global_conflicts): Prevent allocation of call clobbered\n+\thard regs to pseudos live across abnormal edges, as later passes are\n+\tnot ready to handle them.\n+\n         * fold-const.c (fold): Reorder tests for conditional expressions.\n \n         * expr.c (highest_pow2_factor): Return unsigned."}, {"sha": "d5636084ce7d6fa686a0fab9b8e2f282153136f7", "filename": "gcc/global.c", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4147232b5c88a1aa647626825cd98516f9ffb0d7/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4147232b5c88a1aa647626825cd98516f9ffb0d7/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=4147232b5c88a1aa647626825cd98516f9ffb0d7", "patch": "@@ -703,26 +703,38 @@ global_conflicts ()\n \t    scan the instruction that makes either X or Y become live.  */\n \trecord_conflicts (block_start_allocnos, ax);\n \n-#ifdef STACK_REGS\n+ \t/* Pseudos can't go in stack regs at the start of a basic block that\n+ \t   is reached by an abnormal edge. Likewise for call clobbered regs,\n+ \t   because because caller-save, fixup_abnormal_edges, and possibly\n+ \t   the table driven EH machinery are not quite ready to handle such\n+ \t   regs live across such edges.  */\n \t{\n-\t  /* Pseudos can't go in stack regs at the start of a basic block\n-\t     that is reached by an abnormal edge.  */\n-\n \t  edge e;\n+\n \t  for (e = b->pred; e ; e = e->pred_next)\n \t    if (e->flags & EDGE_ABNORMAL)\n \t      break;\n+\n \t  if (e != NULL)\n \t    {\n+#ifdef STACK_REGS\n \t      EXECUTE_IF_SET_IN_ALLOCNO_SET (allocnos_live, ax,\n-\t\t{\n-\t\t  allocno[ax].no_stack_reg = 1;\n-\t\t});\n+\t\t\t\t\t     {\n+\t\t\t\t\t       allocno[ax].no_stack_reg = 1;\n+\t\t\t\t\t     });\n \t      for (ax = FIRST_STACK_REG; ax <= LAST_STACK_REG; ax++)\n \t\trecord_one_conflict (ax);\n+#endif\n+\n+\t      /* No need to record conflicts for call clobbered regs if we have\n+\t\t nonlocal labels around, as we don't ever try to allocate such\n+\t\t regs in this case.  */\n+\t      if (! current_function_has_nonlocal_label)\n+\t\tfor (ax = 0; ax < FIRST_PSEUDO_REGISTER; ax++)\n+\t\t  if (call_used_regs [ax])\n+\t\t    record_one_conflict (ax);\n \t    }\n \t}\n-#endif\n       }\n \n       insn = b->head;"}]}