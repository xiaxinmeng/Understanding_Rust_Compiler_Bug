{"sha": "870f3799af30bc486196ce85da6cf5b1f35ce15f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODcwZjM3OTlhZjMwYmM0ODYxOTZjZTg1ZGE2Y2Y1YjFmMzVjZTE1Zg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2001-08-03T01:25:17Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2001-08-03T01:25:17Z"}, "message": "prims.cc (JNI_OnLoad): Don't declare.\n\n\t* prims.cc (JNI_OnLoad): Don't declare.\n\t(_JNI_OnLoad): Don't define.\n\t(_Jv_CreateJavaVM): Don't handle JNI_OnLoad.\n\nFrom-SVN: r44590", "tree": {"sha": "5d4403537d5d4a367b291432413f6436240f81a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d4403537d5d4a367b291432413f6436240f81a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/870f3799af30bc486196ce85da6cf5b1f35ce15f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/870f3799af30bc486196ce85da6cf5b1f35ce15f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/870f3799af30bc486196ce85da6cf5b1f35ce15f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/870f3799af30bc486196ce85da6cf5b1f35ce15f/comments", "author": null, "committer": null, "parents": [{"sha": "8aeea6e67d77adc1a5e1575e4543d4259295be39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8aeea6e67d77adc1a5e1575e4543d4259295be39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8aeea6e67d77adc1a5e1575e4543d4259295be39"}], "stats": {"total": 41, "additions": 6, "deletions": 35}, "files": [{"sha": "4eb7694b79f8718a90fc7c192552f27f38813377", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/870f3799af30bc486196ce85da6cf5b1f35ce15f/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/870f3799af30bc486196ce85da6cf5b1f35ce15f/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=870f3799af30bc486196ce85da6cf5b1f35ce15f", "patch": "@@ -1,3 +1,9 @@\n+2001-08-02  Tom Tromey  <tromey@redhat.com>\n+\n+\t* prims.cc (JNI_OnLoad): Don't declare.\n+\t(_JNI_OnLoad): Don't define.\n+\t(_Jv_CreateJavaVM): Don't handle JNI_OnLoad.\n+\n 2001-08-02  Tom Tromey  <tromey@redhat.com>\n \n \t* java/io/RandomAccessFile.java (seek): Let seek go past end of"}, {"sha": "0e610aa8240b5072d0f0a413b7ac5b2a82b056c7", "filename": "libjava/prims.cc", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/870f3799af30bc486196ce85da6cf5b1f35ce15f/libjava%2Fprims.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/870f3799af30bc486196ce85da6cf5b1f35ce15f/libjava%2Fprims.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fprims.cc?ref=870f3799af30bc486196ce85da6cf5b1f35ce15f", "patch": "@@ -690,21 +690,6 @@ win32_exception_handler (LPEXCEPTION_POINTERS e)\n \n #endif\n \n-/* This will be different from _JNI_OnLoad if the user has preloaded a JNI\n-   library, or linked one into the executable.  */\n-extern \"C\" \n-{\n-  /* Some systems, like Tru64 UNIX, don't support weak definitions, so use\n-     an empty dummy function to check if the user provided his own.  */\n-#pragma weak JNI_OnLoad = _JNI_OnLoad\n-  extern jint JNI_OnLoad (JavaVM *, void *) __attribute__((weak));\n-\n-  jint _JNI_OnLoad (JavaVM *vm, void *)\n-  {\n-    return 0;\n-  }\n-}\n-\n \n #ifndef DISABLE_GETENV_PROPERTIES\n \n@@ -897,26 +882,6 @@ _Jv_CreateJavaVM (void* /*vm_args*/)\n \n   _Jv_JNI_Init ();\n \n-  /* Some systems let you preload shared libraries before running a\n-     program.  Under Linux, this is done by setting the LD_PRELOAD\n-     environment variable.  We take advatage of this here to allow for\n-     dynamically loading a JNI library into a fully linked executable.  */\n-\n-  if (JNI_OnLoad != _JNI_OnLoad)\n-    {\n-      JavaVM *vm = _Jv_GetJavaVM ();\n-      if (vm == NULL)\n-\t{\n-\t  // FIXME: what?\n-\t  return -1;\n-\t}\n-      jint vers = JNI_OnLoad (vm, NULL);\n-      if (vers != JNI_VERSION_1_1 && vers != JNI_VERSION_1_2)\n-\t{\n-\t  // FIXME: unload the library.\n-\t  _Jv_Throw (new java::lang::UnsatisfiedLinkError (JvNewStringLatin1 (\"unrecognized version from preloaded JNI_OnLoad\")));\n-\t}\n-    }\n   return 0;\n }\n "}]}