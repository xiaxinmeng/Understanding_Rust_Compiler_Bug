{"sha": "5f2fc772a64e920386370f64d6d63ee07cbbdb85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYyZmM3NzJhNjRlOTIwMzg2MzcwZjY0ZDZkNjNlZTA3Y2JiZGI4NQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2003-07-01T09:17:52Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-07-01T09:17:52Z"}, "message": "rtl.h (emit_line_note_after): Remove.\n\n\t* rtl.h (emit_line_note_after): Remove.\n\t(emit_note_copy_after, emit_note_copy): New.\n\t* emit-rtl.c (reorder_insns_with_line_notes): Replace\n\temit_line_note_after with emit_note_copy_after.\n\t(emit_insn_after_with_line_notes): Likewise.\n\t(emit_line_note_after): Kill.\n\t(emit_note_copy_after): New.\n\t(emit_note_copy): New.\n\t* function.c (emit_return_into_block): Use emit_note_copy_after.\n\t(thread_prologue_and_epilogue_insns): Likewise.\n\t* integrate.c (expand_inline_function): Use emit_note_copy.\n\t(copy_insn_list): Likewise.\n\t* unroll.c (copy_loop_body): Likewise.\n\t* cfglayout.c (duplicate_insn_chain): Likewise.\n\nFrom-SVN: r68767", "tree": {"sha": "531c01fa64756756463c89f2a22ff43297319828", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/531c01fa64756756463c89f2a22ff43297319828"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f2fc772a64e920386370f64d6d63ee07cbbdb85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f2fc772a64e920386370f64d6d63ee07cbbdb85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f2fc772a64e920386370f64d6d63ee07cbbdb85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f2fc772a64e920386370f64d6d63ee07cbbdb85/comments", "author": null, "committer": null, "parents": [{"sha": "5b030314afd5f84d30e79594db48bb76da28e36a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b030314afd5f84d30e79594db48bb76da28e36a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b030314afd5f84d30e79594db48bb76da28e36a"}], "stats": {"total": 131, "additions": 72, "deletions": 59}, "files": [{"sha": "eac7bbfabc762029cb3ce5b0f684aa64bdc7cb1d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f2fc772a64e920386370f64d6d63ee07cbbdb85/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f2fc772a64e920386370f64d6d63ee07cbbdb85/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f2fc772a64e920386370f64d6d63ee07cbbdb85", "patch": "@@ -1,3 +1,20 @@\n+2003-07-01  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* rtl.h (emit_line_note_after): Remove.\n+\t(emit_note_copy_after, emit_note_copy): New.\n+\t* emit-rtl.c (reorder_insns_with_line_notes): Replace\n+\temit_line_note_after with emit_note_copy_after.\n+\t(emit_insn_after_with_line_notes): Likewise.\n+\t(emit_line_note_after): Kill.\n+\t(emit_note_copy_after): New.\n+\t(emit_note_copy): New.\n+\t* function.c (emit_return_into_block): Use emit_note_copy_after.\n+\t(thread_prologue_and_epilogue_insns): Likewise.\n+\t* integrate.c (expand_inline_function): Use emit_note_copy.\n+\t(copy_insn_list): Likewise.\n+\t* unroll.c (copy_loop_body): Likewise.\n+\t* cfglayout.c (duplicate_insn_chain): Likewise.\n+\n 2003-07-01  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* c-tree.h (define_label): Replace filename and lineno arguments"}, {"sha": "12cc255293db4eb07c2251773a45cf955ab717b4", "filename": "gcc/cfglayout.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f2fc772a64e920386370f64d6d63ee07cbbdb85/gcc%2Fcfglayout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f2fc772a64e920386370f64d6d63ee07cbbdb85/gcc%2Fcfglayout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfglayout.c?ref=5f2fc772a64e920386370f64d6d63ee07cbbdb85", "patch": "@@ -1008,17 +1008,15 @@ duplicate_insn_chain (rtx from, rtx to)\n \t      abort ();\n \t      break;\n \t    case NOTE_INSN_REPEATED_LINE_NUMBER:\n-\t      emit_line_note (NOTE_SOURCE_FILE (insn),\n-\t\t\t      NOTE_LINE_NUMBER (insn));\n+\t      emit_note_copy (insn);\n \t      break;\n \n \t    default:\n \t      if (NOTE_LINE_NUMBER (insn) < 0)\n \t\tabort ();\n \t      /* It is possible that no_line_number is set and the note\n \t         won't be emitted.  */\n-\t      emit_line_note (NOTE_SOURCE_FILE (insn),\n-\t\t\t      NOTE_LINE_NUMBER (insn));\n+\t      emit_note_copy (insn);\n \t    }\n \t  break;\n \tdefault:"}, {"sha": "c3f36fa9579f5fef87ef99b139df0f490de3b037", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 33, "deletions": 19, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f2fc772a64e920386370f64d6d63ee07cbbdb85/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f2fc772a64e920386370f64d6d63ee07cbbdb85/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=5f2fc772a64e920386370f64d6d63ee07cbbdb85", "patch": "@@ -3869,13 +3869,9 @@ reorder_insns_with_line_notes (rtx from, rtx to, rtx after)\n     return;\n \n   if (from_line)\n-    emit_line_note_after (NOTE_SOURCE_FILE (from_line),\n-\t\t\t  NOTE_LINE_NUMBER (from_line),\n-\t\t\t  after);\n+    emit_note_copy_after (from_line, after);\n   if (after_line)\n-    emit_line_note_after (NOTE_SOURCE_FILE (after_line),\n-\t\t\t  NOTE_LINE_NUMBER (after_line),\n-\t\t\t  to);\n+    emit_note_copy_after (after_line, to);\n }\n \n /* Remove unnecessary notes from the instruction stream.  */\n@@ -4295,14 +4291,10 @@ emit_insn_after_with_line_notes (rtx x, rtx after, rtx from)\n   rtx insn = emit_insn_after (x, after);\n \n   if (from_line)\n-    emit_line_note_after (NOTE_SOURCE_FILE (from_line),\n-\t\t\t  NOTE_LINE_NUMBER (from_line),\n-\t\t\t  after);\n+    emit_note_copy_after (from_line, after);\n \n   if (after_line)\n-    emit_line_note_after (NOTE_SOURCE_FILE (after_line),\n-\t\t\t  NOTE_LINE_NUMBER (after_line),\n-\t\t\t  insn);\n+    emit_note_copy_after (after_line, insn);\n }\n \n /* Make an insn of code JUMP_INSN with body X\n@@ -4428,25 +4420,23 @@ emit_note_after (int subtype, rtx after)\n   return note;\n }\n \n-/* Emit a line note for FILE and LINE after the insn AFTER.  */\n+/* Emit a copy of note ORIG after the insn AFTER.  */\n \n rtx\n-emit_line_note_after (const char *file, int line, rtx after)\n+emit_note_copy_after (rtx orig, rtx after)\n {\n   rtx note;\n \n-  if (line < 0)\n-    abort ();\n-  if (no_line_numbers)\n+  if (NOTE_LINE_NUMBER (orig) >= 0 && no_line_numbers)\n     {\n       cur_insn_uid++;\n       return 0;\n     }\n \n   note = rtx_alloc (NOTE);\n   INSN_UID (note) = cur_insn_uid++;\n-  NOTE_SOURCE_FILE (note) = file;\n-  NOTE_LINE_NUMBER (note) = line;\n+  NOTE_LINE_NUMBER (note) = NOTE_LINE_NUMBER (orig);\n+  NOTE_DATA (note) = NOTE_DATA (orig);\n   BLOCK_FOR_INSN (note) = NULL;\n   add_insn_after (note, after);\n   return note;\n@@ -4704,7 +4694,31 @@ emit_line_note (const char *file, int line)\n \n   note = emit_note (line);\n   NOTE_SOURCE_FILE (note) = file;\n+  \n+  return note;\n+}\n+\n+/* Emit a copy of note ORIG.  */\n \n+rtx\n+emit_note_copy (rtx orig)\n+{\n+  rtx note;\n+  \n+  if (NOTE_LINE_NUMBER (orig) >= 0 && no_line_numbers)\n+    {\n+      cur_insn_uid++;\n+      return NULL_RTX;\n+    }\n+  \n+  note = rtx_alloc (NOTE);\n+  \n+  INSN_UID (note) = cur_insn_uid++;\n+  NOTE_DATA (note) = NOTE_DATA (orig);\n+  NOTE_LINE_NUMBER (note) = NOTE_LINE_NUMBER (orig);\n+  BLOCK_FOR_INSN (note) = NULL;\n+  add_insn (note);\n+  \n   return note;\n }\n "}, {"sha": "074f9206c88614d6bd7250fcaecead5d6dbd299e", "filename": "gcc/function.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f2fc772a64e920386370f64d6d63ee07cbbdb85/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f2fc772a64e920386370f64d6d63ee07cbbdb85/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=5f2fc772a64e920386370f64d6d63ee07cbbdb85", "patch": "@@ -7412,8 +7412,7 @@ emit_return_into_block (bb, line_note)\n {\n   emit_jump_insn_after (gen_return (), bb->end);\n   if (line_note)\n-    emit_line_note_after (NOTE_SOURCE_FILE (line_note),\n-\t\t\t  NOTE_LINE_NUMBER (line_note), PREV_INSN (bb->end));\n+    emit_note_copy_after (line_note, PREV_INSN (bb->end));\n }\n #endif /* HAVE_return */\n \n@@ -7997,9 +7996,7 @@ thread_prologue_and_epilogue_insns (f)\n \t       insn = PREV_INSN (insn))\n \t    if (GET_CODE (insn) == NOTE && NOTE_LINE_NUMBER (insn) > 0)\n \t      {\n-\t\temit_line_note_after (NOTE_SOURCE_FILE (insn),\n-\t\t\t\t      NOTE_LINE_NUMBER (insn),\n-\t\t\t\t      prologue_end);\n+\t\temit_note_copy_after (insn, prologue_end);\n \t\tbreak;\n \t      }\n \t}"}, {"sha": "622c1abfedabf3f7d8d2bb4d9b57d6a25af2ddae", "filename": "gcc/integrate.c", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f2fc772a64e920386370f64d6d63ee07cbbdb85/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f2fc772a64e920386370f64d6d63ee07cbbdb85/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=5f2fc772a64e920386370f64d6d63ee07cbbdb85", "patch": "@@ -924,8 +924,8 @@ expand_inline_function (fndecl, parms, target, ignore, type,\n   if (GET_CODE (parm_insns) == NOTE\n       && NOTE_LINE_NUMBER (parm_insns) > 0)\n     {\n-      rtx note = emit_line_note (NOTE_SOURCE_FILE (parm_insns),\n-\t\t\t\t NOTE_LINE_NUMBER (parm_insns));\n+      rtx note = emit_note_copy (parm_insns);\n+\n       if (note)\n \tRTX_INTEGRATED_P (note) = 1;\n     }\n@@ -1682,18 +1682,16 @@ copy_insn_list (insns, map, static_chain_value)\n \n \t     NOTE_INSN_DELETED notes aren't useful.  */\n \n-\t  if (NOTE_LINE_NUMBER (insn) > 0)\n-\t    copy = emit_line_note (NOTE_SOURCE_FILE (insn),\n-\t\t\t\t   NOTE_LINE_NUMBER (insn));\n-\t  else if (NOTE_LINE_NUMBER (insn) != NOTE_INSN_FUNCTION_END\n+\t  if (NOTE_LINE_NUMBER (insn) != NOTE_INSN_FUNCTION_END\n \t      && NOTE_LINE_NUMBER (insn) != NOTE_INSN_FUNCTION_BEG\n \t      && NOTE_LINE_NUMBER (insn) != NOTE_INSN_DELETED)\n \t    {\n-\t      copy = emit_note (NOTE_LINE_NUMBER (insn));\n-\t      NOTE_DATA (copy) = NOTE_DATA (insn);\n-\t      if ((NOTE_LINE_NUMBER (copy) == NOTE_INSN_BLOCK_BEG\n-\t\t   || NOTE_LINE_NUMBER (copy) == NOTE_INSN_BLOCK_END)\n-\t\t  && NOTE_BLOCK (insn))\n+\t      copy = emit_note_copy (insn);\n+\t      if (!copy)\n+\t\t/*Copied a line note, but line numbering is off*/;\n+\t      else if ((NOTE_LINE_NUMBER (copy) == NOTE_INSN_BLOCK_BEG\n+\t\t\t|| NOTE_LINE_NUMBER (copy) == NOTE_INSN_BLOCK_END)\n+\t\t       && NOTE_BLOCK (insn))\n \t\t{\n \t\t  tree *mapped_block_p;\n "}, {"sha": "de76ec2fa327da37da140f4776c708811be3a210", "filename": "gcc/rtl.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f2fc772a64e920386370f64d6d63ee07cbbdb85/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f2fc772a64e920386370f64d6d63ee07cbbdb85/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=5f2fc772a64e920386370f64d6d63ee07cbbdb85", "patch": "@@ -1528,14 +1528,15 @@ extern rtx emit_call_insn_after_setloc\tPARAMS ((rtx, rtx, int));\n extern rtx emit_barrier_after\t\tPARAMS ((rtx));\n extern rtx emit_label_after\t\tPARAMS ((rtx, rtx));\n extern rtx emit_note_after\t\tPARAMS ((int, rtx));\n-extern rtx emit_line_note_after\t\tPARAMS ((const char *, int, rtx));\n+extern rtx emit_note_copy_after\t\tPARAMS ((rtx, rtx));\n extern rtx emit_insn\t\t\tPARAMS ((rtx));\n extern rtx emit_jump_insn\t\tPARAMS ((rtx));\n extern rtx emit_call_insn\t\tPARAMS ((rtx));\n extern rtx emit_label\t\t\tPARAMS ((rtx));\n extern rtx emit_barrier\t\t\tPARAMS ((void));\n-extern rtx emit_line_note\t\tPARAMS ((const char *, int));\n extern rtx emit_note\t\t\tPARAMS ((int));\n+extern rtx emit_note_copy\t\tPARAMS ((rtx));\n+extern rtx emit_line_note\t\tPARAMS ((const char *, int));\n extern rtx emit_line_note_force\t\tPARAMS ((const char *, int));\n extern rtx make_insn_raw\t\tPARAMS ((rtx));\n extern void add_function_usage_to       PARAMS ((rtx, rtx));"}, {"sha": "b6e280dc819877ab9321fda1ee8d99df4b1df473", "filename": "gcc/unroll.c", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f2fc772a64e920386370f64d6d63ee07cbbdb85/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f2fc772a64e920386370f64d6d63ee07cbbdb85/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=5f2fc772a64e920386370f64d6d63ee07cbbdb85", "patch": "@@ -2252,20 +2252,14 @@ copy_loop_body (loop, copy_start, copy_end, map, exit_label, last_iteration,\n \t     the associated rtl.  We do not want to share the structure in\n \t     this new block.  */\n \n-\t  if (NOTE_LINE_NUMBER (insn) > 0)\n-\t    copy = emit_line_note (NOTE_SOURCE_FILE (insn),\n-\t\t\t      NOTE_LINE_NUMBER (insn));\n-\t  else if (NOTE_LINE_NUMBER (insn) != NOTE_INSN_DELETED\n+\t  if (NOTE_LINE_NUMBER (insn) != NOTE_INSN_DELETED\n \t\t   && NOTE_LINE_NUMBER (insn) != NOTE_INSN_DELETED_LABEL\n \t\t   && NOTE_LINE_NUMBER (insn) != NOTE_INSN_BASIC_BLOCK\n \t\t   && ((NOTE_LINE_NUMBER (insn) != NOTE_INSN_LOOP_VTOP\n \t\t\t&& NOTE_LINE_NUMBER (insn) != NOTE_INSN_LOOP_CONT)\n \t\t       || (last_iteration\n \t\t\t   && unroll_type != UNROLL_COMPLETELY)))\n-\t    {\n-\t      copy = emit_note (NOTE_LINE_NUMBER (insn));\n-\t      NOTE_DATA (copy) = NOTE_DATA (insn);\n-\t    }\n+\t    copy = emit_note_copy (insn);\n \t  else\n \t    copy = 0;\n \t  break;\n@@ -2310,18 +2304,12 @@ copy_loop_body (loop, copy_start, copy_end, map, exit_label, last_iteration,\n \t     instructions before the last insn in the loop, COPY_NOTES_FROM\n \t     can be a NOTE_INSN_LOOP_CONT note if there is no VTOP note,\n \t     as in a do .. while loop.  */\n-\t  if (GET_CODE (insn) != NOTE)\n-\t    /*NOP*/;\n-\t  else if (NOTE_LINE_NUMBER (insn) > 0)\n-\t    emit_line_note (NOTE_SOURCE_FILE (insn), NOTE_LINE_NUMBER (insn));\n-\t  else if (NOTE_LINE_NUMBER (insn) != NOTE_INSN_DELETED\n+\t  if (GET_CODE (insn) == NOTE\n+\t      && ((NOTE_LINE_NUMBER (insn) != NOTE_INSN_DELETED\n \t\t   && NOTE_LINE_NUMBER (insn) != NOTE_INSN_BASIC_BLOCK\n \t\t   && NOTE_LINE_NUMBER (insn) != NOTE_INSN_LOOP_VTOP\n-\t\t   && NOTE_LINE_NUMBER (insn) != NOTE_INSN_LOOP_CONT)\n-\t    {\n-\t      rtx copy = emit_note (NOTE_LINE_NUMBER (insn));\n-\t      NOTE_DATA (copy) = NOTE_DATA (insn);\n-\t    }\n+\t\t   && NOTE_LINE_NUMBER (insn) != NOTE_INSN_LOOP_CONT)))\n+\t    emit_note_copy (insn);\n \t}\n     }\n "}]}