{"sha": "c234d8319b4544f73a66e1e020d6db00e752cbcd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzIzNGQ4MzE5YjQ1NDRmNzNhNjZlMWUwMjBkNmRiMDBlNzUyY2JjZA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-11-26T16:11:29Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-11-26T16:11:29Z"}, "message": "i386.c (processor_target_table): Add skylake_cost for skylake-avx512.\n\n\t* config/i386/i386.c (processor_target_table): Add skylake_cost for\n\tskylake-avx512.\n\t* config/i386/x86-tune-costs.h (skylake_memcpy, skylake_memset,\n\tskylake_cost): New.\n\n\t* config/i386/driver-i386.c (host_detect_local_cpu):\n\tDetect skylake-avx512.\n\n\t* config.gcc: Add -march=cannonlake.\n\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect cannonlake.\n\t* config/i386/i386-c.c (ix86_target_macros_internal): Handle cannonlake.\n\t* config/i386/i386.c (processor_costs): Add m_CANNONLAKE.\n\t(PTA_CANNONLAKE): New.\n\t(processor_target_table): Add cannonlake.\n\t(ix86_option_override_internal): Ditto.\n\t(fold_builtin_cpu): Ditto.\n\t(get_builtin_code_for_version): Handle cannonlake.\n\t(M_INTEL_COREI7_CANNONLAKE): New.\n\t* config/i386/i386.h (TARGET_CANNONLAKE, PROCESSOR_CANNONLAKE): New.\n\t* doc/invoke.texi: Add -march=cannonlake.\n\ngcc/testsuite/\n\n\t* gcc.target/i386/funcspec-56.inc: Handle new march.\n\t* g++.dg/ext/mv16.C: Ditto.\n\nlibgcc/\n\n\t* config/i386/cpuinfo.c (get_intel_cpu): Handle cannonlake.\n\t* config/i386/cpuinfo.h (processor_subtypes): Add\n\tINTEL_COREI7_CANNONLAKE.\n\nFrom-SVN: r255155", "tree": {"sha": "99eb117398765cc61216d8cdab4dbe665c961589", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99eb117398765cc61216d8cdab4dbe665c961589"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c234d8319b4544f73a66e1e020d6db00e752cbcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c234d8319b4544f73a66e1e020d6db00e752cbcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c234d8319b4544f73a66e1e020d6db00e752cbcd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c234d8319b4544f73a66e1e020d6db00e752cbcd/comments", "author": null, "committer": null, "parents": [{"sha": "8c7dbea9f193ae21d193453d7a9eb6d2089618d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c7dbea9f193ae21d193453d7a9eb6d2089618d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c7dbea9f193ae21d193453d7a9eb6d2089618d6"}], "stats": {"total": 230, "additions": 205, "deletions": 25}, "files": [{"sha": "20c4ab61f1fa91c9881c1ccdb6e4765082d31adf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 42, "deletions": 15, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c234d8319b4544f73a66e1e020d6db00e752cbcd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c234d8319b4544f73a66e1e020d6db00e752cbcd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c234d8319b4544f73a66e1e020d6db00e752cbcd", "patch": "@@ -1,4 +1,31 @@\n-2017-11-14 Boris Kolpackov  <boris@codesynthesis.com>\n+2017-11-26  Julia Koval  <julia.koval@intel.com>\n+\n+\t* config/i386/i386.c (processor_target_table): Add skylake_cost for\n+\tskylake-avx512.\n+\t* config/i386/x86-tune-costs.h (skylake_memcpy, skylake_memset,\n+\tskylake_cost): New.\n+\n+2017-11-26  Julia Koval  <julia.koval@intel.com>\n+\n+\t* config/i386/driver-i386.c (host_detect_local_cpu):\n+\tDetect skylake-avx512.\n+\n+2017-11-26  Julia Koval  <julia.koval@intel.com>\n+\n+\t* config.gcc: Add -march=cannonlake.\n+\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect cannonlake.\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Handle cannonlake.\n+\t* config/i386/i386.c (processor_costs): Add m_CANNONLAKE.\n+\t(PTA_CANNONLAKE): New.\n+\t(processor_target_table): Add cannonlake.\n+\t(ix86_option_override_internal): Ditto.\n+\t(fold_builtin_cpu): Ditto.\n+\t(get_builtin_code_for_version): Handle cannonlake.\n+\t(M_INTEL_COREI7_CANNONLAKE): New.\n+\t* config/i386/i386.h (TARGET_CANNONLAKE, PROCESSOR_CANNONLAKE): New.\n+\t* doc/invoke.texi: Add -march=cannonlake.\n+\n+2017-11-14  Boris Kolpackov  <boris@codesynthesis.com>\n \n \t* plugin.c (add_new_plugin): Use platform-specific library extensions.\n \t(try_init_one_plugin): Alternative implementation for MinGW.\n@@ -69,12 +96,12 @@\n \n 2017-11-23  Julia Koval  <julia.koval@intel.com>\n \n-\tconfig/i386/avx512vbmi2intrin.h (_mm512_mask_expand_epi8,\n+\t* config/i386/avx512vbmi2intrin.h (_mm512_mask_expand_epi8,\n \t_mm512_maskz_expand_epi8, _mm512_mask_expandloadu_epi8,\n \t_mm512_maskz_expandloadu_epi8, _mm512_mask_expand_epi16,\n \t_mm512_maskz_expand_epi16, _mm512_mask_expandloadu_epi16,\n \t_mm512_maskz_expandloadu_epi16): New intrinsics.\n-\tconfig/i386/avx512vbmi2vlintrin.h (_mm_mask_expand_epi8,\n+\t* config/i386/avx512vbmi2vlintrin.h (_mm_mask_expand_epi8,\n \t_mm_maskz_expand_epi8, _mm_mask_expandloadu_epi8,\n \t_mm_maskz_expandloadu_epi8, _mm_mask_expand_epi16,\n \t_mm_maskz_expand_epi16, _mm_mask_expandloadu_epi16,\n@@ -83,33 +110,33 @@\n \t_mm256_maskz_expandloadu_epi16, _mm256_mask_expand_epi8,\n \t_mm256_maskz_expand_epi8, _mm256_mask_expandloadu_epi8,\n \t_mm256_maskz_expandloadu_epi8): New intrinsics.\n-\tconfig/i386/i386-builtin-types.def (V64QI_FTYPE_PCV64QI_V64QI_UDI,\n+\t* config/i386/i386-builtin-types.def (V64QI_FTYPE_PCV64QI_V64QI_UDI,\n \tV32HI_FTYPE_PCV32HI_V32HI_USI, V32QI_FTYPE_PCV32QI_V32QI_USI,\n \tV16HI_FTYPE_PCV16HI_V16HI_UHI, V16QI_FTYPE_PCV16QI_V16QI_UHI,\n \tV8HI_FTYPE_PCV8HI_V8HI_UQI): New types.\n-\tconfig/i386/i386.c (ix86_expand_special_args_builtin): Use new types.\n-\tconfig/i386/sse.md (VI248_VLBW): New iterator.\n+\t* config/i386/i386.c (ix86_expand_special_args_builtin): Use new types.\n+\t* config/i386/sse.md (VI248_VLBW): New iterator.\n \t(expand<mode>_mask, expand<mode>_maskz): New patterns.\n \n 2017-11-23  Julia Koval  <julia.koval@intel.com>\n \n-\tconfig.gcc (avx512vbmi2intrin.h, avx512vbmi2vlintrin): New headers.\n-\tconfig/i386/avx512vbmi2intrin.h (_mm512_mask_compress_epi8,\n+\t* config.gcc (avx512vbmi2intrin.h, avx512vbmi2vlintrin): New headers.\n+\t* config/i386/avx512vbmi2intrin.h (_mm512_mask_compress_epi8,\n \t_mm512_maskz_compress_epi8, _mm512_mask_compressstoreu_epi8,\n \t_mm512_mask_compress_epi16, _mm512_maskz_compress_epi16,\n \t_mm512_mask_compressstoreu_epi16): New.\n-\tconfig/i386/avx512vbmi2vlintrin.h (_mm_mask_compress_epi8,\n+\t* config/i386/avx512vbmi2vlintrin.h (_mm_mask_compress_epi8,\n \t_mm_maskz_compress_epi8, _mm256_mask_compressstoreu_epi16,\n \t_mm_mask_compress_epi16, _mm_maskz_compress_epi16,\n \t_mm256_mask_compress_epi16, _mm256_maskz_compress_epi16,\n \t_mm_mask_compressstoreu_epi8, _mm_mask_compressstoreu_epi16,\n \t_mm256_mask_compress_epi8, _mm256_maskz_compress_epi8,\n \t_mm256_mask_compressstoreu_epi8): New.\n-\tconfig/i386/i386-builtin-types.def (VOID_FTYPE_PV64QI_V64QI_UDI,\n+\t* config/i386/i386-builtin-types.def (VOID_FTYPE_PV64QI_V64QI_UDI,\n \tVOID_FTYPE_PV32HI_V32HI_USI, VOID_FTYPE_PV32QI_V32QI_USI,\n \tVOID_FTYPE_PV16QI_V16QI_UHI, VOID_FTYPE_PV16HI_V16HI_UHI,\n \tVOID_FTYPE_PV8HI_V8HI_UQI): New types.\n-\tconfig/i386/i386-builtin.def (__builtin_ia32_compressqi512_mask,\n+\t* config/i386/i386-builtin.def (__builtin_ia32_compressqi512_mask,\n \t__builtin_ia32_compresshi512_mask, __builtin_ia32_compressqi256_mask,\n \t__builtin_ia32_compressqi128_mask, __builtin_ia32_compresshi256_mask,\n \t__builtin_ia32_compresshi128_mask,\n@@ -119,12 +146,12 @@\n \t__builtin_ia32_compressstoreuqi128_mask,\n \t__builtin_ia32_compressstoreuhi256_mask,\n \t__builtin_ia32_compressstoreuhi128_mask): New builtins.\n-\tconfig/i386/i386.c (ix86_init_mmx_sse_builtins): Create special args\n+\t* config/i386/i386.c (ix86_init_mmx_sse_builtins): Create special args\n \tarray for flags2.\n \t(ix86_expand_special_args_builtin): Handle new types.\n \t(s4fma_expand): Handle new builtin array.\n-\tconfig/i386/immintrin.h: Include new headers.\n-\tconfig/i386/sse.md (VI12_AVX512VLBW): New iterator.\n+\t* config/i386/immintrin.h: Include new headers.\n+\t* config/i386/sse.md (VI12_AVX512VLBW): New iterator.\n \t(compress<mode>_mask, compressstore<mode>_mask): New patterns.\n \n 2017-11-23  Jakub Jelinek  <jakub@redhat.com>\n@@ -1438,7 +1465,7 @@\n \t* config/i386/i386.opt (mavx512vbmi2): New option.\n \t* doc/invoke.texi: Add new option.\n \n-[2017-11-16  Julia Koval  <julia.koval@intel.com>\n+2017-11-16  Julia Koval  <julia.koval@intel.com>\n \n \t* config/i386/gfniintrin.h (_mm_gf2p8mul_epi8, _mm256_gf2p8mul_epi8,\n \t_mm_mask_gf2p8mul_epi8, _mm_maskz_gf2p8mul_epi8,"}, {"sha": "ff870c9357d9d7a9838812211520fdb573b8a7d8", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c234d8319b4544f73a66e1e020d6db00e752cbcd/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c234d8319b4544f73a66e1e020d6db00e752cbcd/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=c234d8319b4544f73a66e1e020d6db00e752cbcd", "patch": "@@ -631,7 +631,7 @@ x86_64_archs=\"amdfam10 athlon64 athlon64-sse3 barcelona bdver1 bdver2 \\\n bdver3 bdver4 znver1 btver1 btver2 k8 k8-sse3 opteron opteron-sse3 nocona \\\n core2 corei7 corei7-avx core-avx-i core-avx2 atom slm nehalem westmere \\\n sandybridge ivybridge haswell broadwell bonnell silvermont knl knm \\\n-skylake-avx512 x86-64 native\"\n+skylake-avx512 cannonlake x86-64 native\"\n \n # Additional x86 processors supported by --with-cpu=.  Each processor\n # MUST be separated by exactly one space."}, {"sha": "cfa8bd498a31ae6dc2cf5836273ae2e1fb3ff4ee", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c234d8319b4544f73a66e1e020d6db00e752cbcd/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c234d8319b4544f73a66e1e020d6db00e752cbcd/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=c234d8319b4544f73a66e1e020d6db00e752cbcd", "patch": "@@ -793,24 +793,38 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \t  /* Kaby Lake.  */\n \t  cpu = \"skylake\";\n \t  break;\n+\tcase 0x55:\n+\t  /* Skylake with AVX-512.  */\n+\t  cpu = \"skylake-avx512\";\n+\t  break;\n \tcase 0x57:\n \t  /* Knights Landing.  */\n \t  cpu = \"knl\";\n \t  break;\n+\tcase 0x66:\n+\t  /* Cannon Lake.  */\n+\t  cpu = \"cannonlake\";\n+\t  break;\n \tcase 0x85:\n-\t  /* Knights Mill. */\n+\t  /* Knights Mill.  */\n \t  cpu = \"knm\";\n \t  break;\n \tdefault:\n \t  if (arch)\n \t    {\n \t      /* This is unknown family 0x6 CPU.  */\n-\t      /* Assume Knights Landing.  */\n-\t      if (has_avx512f)\n-\t\tcpu = \"knl\";\n-\t      /* Assume Knights Mill */\n+\t      /* Assume Cannon Lake.  */\n+\t      if (has_avx512vbmi)\n+\t\tcpu = \"cannonlake\";\n+\t      /* Assume Knights Mill.  */\n \t      else if (has_avx5124vnniw)\n \t\tcpu = \"knm\";\n+\t      /* Assume Knights Landing.  */\n+\t      else if (has_avx512er)\n+\t\tcpu = \"knl\";\n+\t      /* Assume Skylake with AVX-512.  */\n+\t      else if (has_avx512f)\n+\t\tcpu = \"skylake-avx512\";\n \t      /* Assume Skylake.  */\n \t      else if (has_clflushopt)\n \t\tcpu = \"skylake\";"}, {"sha": "d1d522aa0b56e0865e7b13b3f30cb55c4a93d4d5", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c234d8319b4544f73a66e1e020d6db00e752cbcd/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c234d8319b4544f73a66e1e020d6db00e752cbcd/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=c234d8319b4544f73a66e1e020d6db00e752cbcd", "patch": "@@ -184,6 +184,10 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n       def_or_undef (parse_in, \"__skylake_avx512\");\n       def_or_undef (parse_in, \"__skylake_avx512__\");\n       break;\n+    case PROCESSOR_CANNONLAKE:\n+      def_or_undef (parse_in, \"__cannonlake\");\n+      def_or_undef (parse_in, \"__cannonlake__\");\n+      break;\n     /* use PROCESSOR_max to not set/unset the arch macro.  */\n     case PROCESSOR_max:\n       break;\n@@ -302,6 +306,9 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     case PROCESSOR_SKYLAKE_AVX512:\n       def_or_undef (parse_in, \"__tune_skylake_avx512__\");\n       break;\n+    case PROCESSOR_CANNONLAKE:\n+      def_or_undef (parse_in, \"__tune_cannonlake__\");\n+      break;\n     case PROCESSOR_LAKEMONT:\n       def_or_undef (parse_in, \"__tune_lakemont__\");\n       break;"}, {"sha": "5f0358cab872d502c87be09427e2242676a51a00", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c234d8319b4544f73a66e1e020d6db00e752cbcd/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c234d8319b4544f73a66e1e020d6db00e752cbcd/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c234d8319b4544f73a66e1e020d6db00e752cbcd", "patch": "@@ -142,6 +142,7 @@ const struct processor_costs *ix86_cost = NULL;\n #define m_KNL (1U<<PROCESSOR_KNL)\n #define m_KNM (1U<<PROCESSOR_KNM)\n #define m_SKYLAKE_AVX512 (1U<<PROCESSOR_SKYLAKE_AVX512)\n+#define m_CANNONLAKE (1U<<PROCESSOR_CANNONLAKE)\n #define m_INTEL (1U<<PROCESSOR_INTEL)\n \n #define m_GEODE (1U<<PROCESSOR_GEODE)\n@@ -853,7 +854,8 @@ static const struct ptt processor_target_table[PROCESSOR_max] =\n   {\"silvermont\", &slm_cost, 16, 15, 16, 7, 16},\n   {\"knl\", &slm_cost, 16, 15, 16, 7, 16},\n   {\"knm\", &slm_cost, 16, 15, 16, 7, 16},\n-  {\"skylake-avx512\", &core_cost, 16, 10, 16, 10, 16},\n+  {\"skylake-avx512\", &skylake_cost, 16, 10, 16, 10, 16},\n+  {\"cannonlake\", &core_cost, 16, 10, 16, 10, 16},\n   {\"intel\", &intel_cost, 16, 15, 16, 7, 16},\n   {\"geode\", &geode_cost, 0, 0, 0, 0, 0},\n   {\"k6\", &k6_cost, 32, 7, 32, 7, 32},\n@@ -3444,6 +3446,8 @@ ix86_option_override_internal (bool main_args_p,\n #define PTA_SKYLAKE_AVX512 \\\n   (PTA_SKYLAKE | PTA_AVX512F | PTA_AVX512CD | PTA_AVX512VL \\\n    | PTA_AVX512BW | PTA_AVX512DQ | PTA_PKU)\n+#define PTA_CANNONLAKE \\\n+  (PTA_SKYLAKE_AVX512 | PTA_AVX512VBMI | PTA_AVX512IFMA | PTA_SHA | PTA_CLWB)\n #define PTA_KNL \\\n   (PTA_BROADWELL | PTA_AVX512PF | PTA_AVX512ER | PTA_AVX512F | PTA_AVX512CD)\n #define PTA_BONNELL \\\n@@ -3516,7 +3520,9 @@ ix86_option_override_internal (bool main_args_p,\n       {\"core-avx2\", PROCESSOR_HASWELL, CPU_HASWELL, PTA_HASWELL},\n       {\"broadwell\", PROCESSOR_HASWELL, CPU_HASWELL, PTA_BROADWELL},\n       {\"skylake\", PROCESSOR_HASWELL, CPU_HASWELL, PTA_SKYLAKE},\n-      {\"skylake-avx512\", PROCESSOR_SKYLAKE_AVX512, CPU_HASWELL, PTA_SKYLAKE_AVX512},\n+      {\"skylake-avx512\", PROCESSOR_SKYLAKE_AVX512, CPU_HASWELL,\n+        PTA_SKYLAKE_AVX512},\n+      {\"cannonlake\", PROCESSOR_HASWELL, CPU_HASWELL, PTA_CANNONLAKE},\n       {\"bonnell\", PROCESSOR_BONNELL, CPU_ATOM, PTA_BONNELL},\n       {\"atom\", PROCESSOR_BONNELL, CPU_ATOM, PTA_BONNELL},\n       {\"silvermont\", PROCESSOR_SILVERMONT, CPU_SLM, PTA_SILVERMONT},\n@@ -31230,7 +31236,9 @@ get_builtin_code_for_version (tree decl, tree *predicate_list)\n \t      break;\n \t    case PROCESSOR_HASWELL:\n \t    case PROCESSOR_SKYLAKE_AVX512:\n-\t      if (new_target->x_ix86_isa_flags & OPTION_MASK_ISA_AVX512VL)\n+\t      if (new_target->x_ix86_isa_flags & OPTION_MASK_ISA_AVX512VBMI)\n+\t\targ_str = \"cannonlake\";\n+\t      else if (new_target->x_ix86_isa_flags & OPTION_MASK_ISA_AVX512VL)\n \t        arg_str = \"skylake-avx512\";\n \t      else if (new_target->x_ix86_isa_flags & OPTION_MASK_ISA_XSAVES)\n \t        arg_str = \"skylake\";\n@@ -31952,7 +31960,8 @@ fold_builtin_cpu (tree fndecl, tree *args)\n     M_INTEL_COREI7_HASWELL,\n     M_INTEL_COREI7_BROADWELL,\n     M_INTEL_COREI7_SKYLAKE,\n-    M_INTEL_COREI7_SKYLAKE_AVX512\n+    M_INTEL_COREI7_SKYLAKE_AVX512,\n+    M_INTEL_COREI7_CANNONLAKE\n   };\n \n   static struct _arch_names_table\n@@ -31976,6 +31985,7 @@ fold_builtin_cpu (tree fndecl, tree *args)\n       {\"broadwell\", M_INTEL_COREI7_BROADWELL},\n       {\"skylake\", M_INTEL_COREI7_SKYLAKE},\n       {\"skylake-avx512\", M_INTEL_COREI7_SKYLAKE_AVX512},\n+      {\"cannonlake\", M_INTEL_COREI7_CANNONLAKE},\n       {\"bonnell\", M_INTEL_BONNELL},\n       {\"silvermont\", M_INTEL_SILVERMONT},\n       {\"knl\", M_INTEL_KNL},"}, {"sha": "638f1f15bd8194517f02b38a9d653cb75e064d52", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c234d8319b4544f73a66e1e020d6db00e752cbcd/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c234d8319b4544f73a66e1e020d6db00e752cbcd/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=c234d8319b4544f73a66e1e020d6db00e752cbcd", "patch": "@@ -374,6 +374,7 @@ extern const struct processor_costs ix86_size_cost;\n #define TARGET_KNL (ix86_tune == PROCESSOR_KNL)\n #define TARGET_KNM (ix86_tune == PROCESSOR_KNM)\n #define TARGET_SKYLAKE_AVX512 (ix86_tune == PROCESSOR_SKYLAKE_AVX512)\n+#define TARGET_CANNONLAKE (ix86_tune == PROCESSOR_CANNONLAKE)\n #define TARGET_INTEL (ix86_tune == PROCESSOR_INTEL)\n #define TARGET_GENERIC (ix86_tune == PROCESSOR_GENERIC)\n #define TARGET_AMDFAM10 (ix86_tune == PROCESSOR_AMDFAM10)\n@@ -2255,6 +2256,7 @@ enum processor_type\n   PROCESSOR_KNL,\n   PROCESSOR_KNM,\n   PROCESSOR_SKYLAKE_AVX512,\n+  PROCESSOR_CANNONLAKE,\n   PROCESSOR_INTEL,\n   PROCESSOR_GEODE,\n   PROCESSOR_K6,"}, {"sha": "75a59063806b2dd4d211a4969bd7a7b9f282e87a", "filename": "gcc/config/i386/x86-tune-costs.h", "status": "modified", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c234d8319b4544f73a66e1e020d6db00e752cbcd/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c234d8319b4544f73a66e1e020d6db00e752cbcd/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h?ref=c234d8319b4544f73a66e1e020d6db00e752cbcd", "patch": "@@ -1515,6 +1515,95 @@ struct processor_costs znver1_cost = {\n   COSTS_N_INSNS (2),\t\t\t/* cond_not_taken_branch_cost.  */\n };\n \n+/* skylake_cost should produce code tuned for Skylake familly of CPUs.  */\n+static stringop_algs skylake_memcpy[2] =   {\n+  {libcall, {{1024, rep_prefix_4_byte, true}, {-1, libcall, false}}},\n+  {libcall, {{16, loop, false}, {512, rep_prefix_8_byte, false},\n+             {-1, libcall, false}}}};\n+\n+static stringop_algs skylake_memset[2] = {\n+  {libcall, {{6, loop_1_byte, true},\n+             {24, loop, true},\n+             {8192, rep_prefix_4_byte, true},\n+             {-1, libcall, false}}},\n+  {libcall, {{24, loop, true}, {512, rep_prefix_8_byte, false},\n+             {-1, libcall, false}}}};\n+\n+static const\n+struct processor_costs skylake_cost = {\n+  COSTS_N_INSNS (1),\t\t\t/* cost of an add instruction */\n+  COSTS_N_INSNS (1)+1,\t\t/* cost of a lea instruction */\n+  COSTS_N_INSNS (1),\t\t\t/* variable shift costs */\n+  COSTS_N_INSNS (1),\t\t\t/* constant shift costs */\n+  {COSTS_N_INSNS (3),\t\t\t/* cost of starting multiply for QI */\n+   COSTS_N_INSNS (4),\t\t\t/*\t\t\t\t HI */\n+   COSTS_N_INSNS (3),\t\t\t/*\t\t\t\t SI */\n+   COSTS_N_INSNS (4),\t\t\t/*\t\t\t\t DI */\n+   COSTS_N_INSNS (4)},\t\t\t/*\t\t\t      other */\n+  0,\t\t\t\t\t/* cost of multiply per each bit set */\n+  {COSTS_N_INSNS (8),\t\t\t/* cost of a divide/mod for QI */\n+   COSTS_N_INSNS (8),\t\t\t/*\t\t\t    HI */\n+   COSTS_N_INSNS (11),\t\t\t/*\t\t\t    SI */\n+   COSTS_N_INSNS (76),\t\t\t/*\t\t\t    DI */\n+   COSTS_N_INSNS (76)},\t\t\t/*\t\t\t    other */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of movsx */\n+  COSTS_N_INSNS (0),\t\t\t/* cost of movzx */\n+  8,\t\t\t\t\t/* \"large\" insn */\n+  17,\t\t\t\t\t/* MOVE_RATIO */\n+\n+  6,\t\t\t\t     /* cost for loading QImode using movzbl */\n+  {4, 4, 4},\t\t\t\t/* cost of loading integer registers\n+\t\t\t\t\t   in QImode, HImode and SImode.\n+\t\t\t\t\t   Relative to reg-reg move (2).  */\n+  {6, 6, 6},\t\t\t\t/* cost of storing integer registers */\n+  2,\t\t\t\t\t/* cost of reg,reg fld/fst */\n+  {6, 6, 8},\t\t\t\t/* cost of loading fp registers\n+\t\t\t\t\t   in SFmode, DFmode and XFmode */\n+  {6, 6, 10},\t\t\t\t/* cost of storing fp registers\n+\t\t\t\t\t   in SFmode, DFmode and XFmode */\n+  2,\t\t\t\t\t/* cost of moving MMX register */\n+  {6, 6},\t\t\t\t/* cost of loading MMX registers\n+\t\t\t\t\t   in SImode and DImode */\n+  {6, 6},\t\t\t\t/* cost of storing MMX registers\n+\t\t\t\t\t   in SImode and DImode */\n+  2, 2, 4,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n+  {6, 6, 6, 10, 20},\t\t\t/* cost of loading SSE registers\n+\t\t\t\t\t   in 32,64,128,256 and 512-bit */\n+  {6, 6, 6, 10, 20},\t\t\t/* cost of unaligned loads.  */\n+  {8, 8, 8, 8, 16},\t\t\t/* cost of storing SSE registers\n+\t\t\t\t\t   in 32,64,128,256 and 512-bit */\n+  {8, 8, 8, 8, 16},\t\t\t/* cost of unaligned stores.  */\n+  2, 2,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  20, 8,\t\t\t\t/* Gather load static, per_elt.  */\n+  22, 10,\t\t\t\t/* Gather store static, per_elt.  */\n+  64,\t\t\t\t\t/* size of l1 cache.  */\n+  512,\t\t\t\t\t/* size of l2 cache.  */\n+  64,\t\t\t\t\t/* size of prefetch block */\n+  6,\t\t\t\t\t/* number of parallel prefetches */\n+  3,\t\t\t\t\t/* Branch cost */\n+  COSTS_N_INSNS (3),\t\t\t/* cost of FADD and FSUB insns.  */\n+  COSTS_N_INSNS (4),\t\t\t/* cost of FMUL instruction.  */\n+  COSTS_N_INSNS (20),\t\t\t/* cost of FDIV instruction.  */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of FABS instruction.  */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of FCHS instruction.  */\n+  COSTS_N_INSNS (20),\t\t\t/* cost of FSQRT instruction.  */\n+\n+  COSTS_N_INSNS (1),\t\t\t/* cost of cheap SSE instruction.  */\n+  COSTS_N_INSNS (4),\t\t\t/* cost of ADDSS/SD SUBSS/SD insns.  */\n+  COSTS_N_INSNS (4),\t\t\t/* cost of MULSS instruction.  */\n+  COSTS_N_INSNS (4),\t\t\t/* cost of MULSD instruction.  */\n+  COSTS_N_INSNS (4),\t\t\t/* cost of FMA SS instruction.  */\n+  COSTS_N_INSNS (4),\t\t\t/* cost of FMA SD instruction.  */\n+  COSTS_N_INSNS (11),\t\t\t/* cost of DIVSS instruction.  */\n+  COSTS_N_INSNS (14),\t\t\t/* cost of DIVSD instruction.  */\n+  COSTS_N_INSNS (12),\t\t\t/* cost of SQRTSS instruction.  */\n+  COSTS_N_INSNS (18),\t\t\t/* cost of SQRTSD instruction.  */\n+  1, 4, 2, 2,\t\t\t\t/* reassoc int, fp, vec_int, vec_fp.  */\n+  skylake_memcpy,\n+  skylake_memset,\n+  COSTS_N_INSNS (3),\t\t\t/* cond_taken_branch_cost.  */\n+  COSTS_N_INSNS (1),\t\t\t/* cond_not_taken_branch_cost.  */\n+};\n   /* BTVER1 has optimized REP instruction for medium sized blocks, but for\n      very small blocks it is better to use loop. For large blocks, libcall can\n      do nontemporary accesses and beat inline considerably.  */"}, {"sha": "cccf39f0b9b0acef33c5d6773bca5d31800f1f45", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c234d8319b4544f73a66e1e020d6db00e752cbcd/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c234d8319b4544f73a66e1e020d6db00e752cbcd/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c234d8319b4544f73a66e1e020d6db00e752cbcd", "patch": "@@ -25321,6 +25321,13 @@ SSSE3, SSE4.1, SSE4.2, POPCNT, PKU, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA\n BMI, BMI2, F16C, RDSEED, ADCX, PREFETCHW, CLFLUSHOPT, XSAVEC, XSAVES, AVX512F,\n AVX512VL, AVX512BW, AVX512DQ and AVX512CD instruction set support.\n \n+@item cannonlake\n+Intel Cannonlake Server CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2,\n+SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, PKU, AVX, AVX2, AES, PCLMUL, FSGSBASE,\n+RDRND, FMA, BMI, BMI2, F16C, RDSEED, ADCX, PREFETCHW, CLFLUSHOPT, XSAVEC,\n+XSAVES, AVX512F, AVX512VL, AVX512BW, AVX512DQ, AVX512CD, AVX512VBMI,\n+AVX512IFMA, SHA, CLWB and UMIP instruction set support.\n+\n @item k6\n AMD K6 CPU with MMX instruction set support.\n "}, {"sha": "f750ad7b333db1f5ac8b6f12873871df03bbb070", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c234d8319b4544f73a66e1e020d6db00e752cbcd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c234d8319b4544f73a66e1e020d6db00e752cbcd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c234d8319b4544f73a66e1e020d6db00e752cbcd", "patch": "@@ -1,3 +1,8 @@\n+2017-11-26  Julia Koval  <julia.koval@intel.com>\n+\n+\t* gcc.target/i386/funcspec-56.inc: Handle new march.\n+\t* g++.dg/ext/mv16.C: Ditto.\n+\n 2017-11-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/81553"}, {"sha": "1e1ae3d2f0d45fad68750ff3f90fcf848df813dc", "filename": "gcc/testsuite/g++.dg/ext/mv16.C", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c234d8319b4544f73a66e1e020d6db00e752cbcd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c234d8319b4544f73a66e1e020d6db00e752cbcd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv16.C?ref=c234d8319b4544f73a66e1e020d6db00e752cbcd", "patch": "@@ -56,6 +56,10 @@ int __attribute__ ((target(\"arch=skylake-avx512\"))) foo () {\n   return 15;\n }\n \n+int __attribute__ ((target(\"arch=cannonlake\"))) foo () {\n+  return 16;\n+}\n+\n int main ()\n {\n   int val = foo ();\n@@ -76,6 +80,8 @@ int main ()\n     assert (val == 14);\n   else if (__builtin_cpu_is (\"skylake-avx512\"))\n     assert (val == 15);\n+  else if (__builtin_cpu_is (\"cannonlake\"))\n+    assert (val == 16);\n   else\n     assert (val == 0);\n "}, {"sha": "ed0748bd95d95546d7bb2b4dbd34fc5693e60987", "filename": "gcc/testsuite/gcc.target/i386/funcspec-56.inc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c234d8319b4544f73a66e1e020d6db00e752cbcd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c234d8319b4544f73a66e1e020d6db00e752cbcd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc?ref=c234d8319b4544f73a66e1e020d6db00e752cbcd", "patch": "@@ -144,6 +144,7 @@ extern void test_arch_core_avx2 (void)\t\t__attribute__((__target__(\"arch=core-avx\n extern void test_arch_knl (void)\t\t__attribute__((__target__(\"arch=knl\")));\n extern void test_arch_knm (void)\t\t__attribute__((__target__(\"arch=knm\")));\n extern void test_arch_skylake_avx512 (void)\t__attribute__((__target__(\"arch=skylake-avx512\")));\n+extern void test_arch_cannonlake (void)\t\t__attribute__((__target__(\"arch=cannonlake\")));\n extern void test_arch_k8 (void)\t\t\t__attribute__((__target__(\"arch=k8\")));\n extern void test_arch_k8_sse3 (void)\t\t__attribute__((__target__(\"arch=k8-sse3\")));\n extern void test_arch_opteron (void)\t\t__attribute__((__target__(\"arch=opteron\")));"}, {"sha": "6e4db56a4c9bf7b1a29f512336639002889a44ea", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c234d8319b4544f73a66e1e020d6db00e752cbcd/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c234d8319b4544f73a66e1e020d6db00e752cbcd/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=c234d8319b4544f73a66e1e020d6db00e752cbcd", "patch": "@@ -1,3 +1,9 @@\n+2017-11-26  Julia Koval  <julia.koval@intel.com>\n+\n+\t* config/i386/cpuinfo.c (get_intel_cpu): Handle cannonlake.\n+\t* config/i386/cpuinfo.h (processor_subtypes): Add\n+\tINTEL_COREI7_CANNONLAKE.\n+\n 2017-11-20  Igor Tsimbalist  <igor.v.tsimbalist@intel.com>\n \n \tPR bootstrap/83015"}, {"sha": "15799f4c4972fbc944f3a8d249b3d7099b6d78d7", "filename": "libgcc/config/i386/cpuinfo.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c234d8319b4544f73a66e1e020d6db00e752cbcd/libgcc%2Fconfig%2Fi386%2Fcpuinfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c234d8319b4544f73a66e1e020d6db00e752cbcd/libgcc%2Fconfig%2Fi386%2Fcpuinfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fcpuinfo.c?ref=c234d8319b4544f73a66e1e020d6db00e752cbcd", "patch": "@@ -198,6 +198,11 @@ get_intel_cpu (unsigned int family, unsigned int model, unsigned int brand_id)\n \t      __cpu_model.__cpu_type = INTEL_COREI7;\n \t      __cpu_model.__cpu_subtype = INTEL_COREI7_SKYLAKE_AVX512;\n \t      break;\n+\t    case 0x66:\n+\t      /* Cannon Lake.  */\n+\t      __cpu_model.__cpu_type = INTEL_COREI7;\n+\t      __cpu_model.__cpu_subtype = INTEL_COREI7_CANNONLAKE;\n+\t      break;\n \t    case 0x17:\n \t    case 0x1d:\n \t      /* Penryn.  */"}, {"sha": "4b2a3c534c8e67bb2635100f36962fbca9f2e9fa", "filename": "libgcc/config/i386/cpuinfo.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c234d8319b4544f73a66e1e020d6db00e752cbcd/libgcc%2Fconfig%2Fi386%2Fcpuinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c234d8319b4544f73a66e1e020d6db00e752cbcd/libgcc%2Fconfig%2Fi386%2Fcpuinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fcpuinfo.h?ref=c234d8319b4544f73a66e1e020d6db00e752cbcd", "patch": "@@ -69,6 +69,7 @@ enum processor_subtypes\n   INTEL_COREI7_BROADWELL,\n   INTEL_COREI7_SKYLAKE,\n   INTEL_COREI7_SKYLAKE_AVX512,\n+  INTEL_COREI7_CANNONLAKE,\n   CPU_SUBTYPE_MAX\n };\n "}]}