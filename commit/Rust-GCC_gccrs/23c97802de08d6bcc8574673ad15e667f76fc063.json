{"sha": "23c97802de08d6bcc8574673ad15e667f76fc063", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNjOTc4MDJkZTA4ZDZiY2M4NTc0NjczYWQxNWU2NjdmNzZmYzA2Mw==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1995-01-14T06:20:26Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1995-01-14T06:20:26Z"}, "message": "(decl_attributes): Fix typo in packed ignored warning.\n\nFix unrecognized mode warning.  Make string comparisons consistent.\nSupport machine attributes with arguments.  Make noreturn/volatile\nwarnings consistent with others.\n\nFrom-SVN: r8757", "tree": {"sha": "11c3ebeb508f0410e3b7c898d317b4283be64b30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11c3ebeb508f0410e3b7c898d317b4283be64b30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23c97802de08d6bcc8574673ad15e667f76fc063", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23c97802de08d6bcc8574673ad15e667f76fc063", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23c97802de08d6bcc8574673ad15e667f76fc063", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23c97802de08d6bcc8574673ad15e667f76fc063/comments", "author": null, "committer": null, "parents": [{"sha": "77295decc864d07b52e926267f792f303159dcae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77295decc864d07b52e926267f792f303159dcae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77295decc864d07b52e926267f792f303159dcae"}], "stats": {"total": 55, "additions": 35, "deletions": 20}, "files": [{"sha": "41107a1824b584c5e097e0e60679e54c89f8ee31", "filename": "gcc/c-common.c", "status": "modified", "additions": 35, "deletions": 20, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23c97802de08d6bcc8574673ad15e667f76fc063/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23c97802de08d6bcc8574673ad15e667f76fc063/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=23c97802de08d6bcc8574673ad15e667f76fc063", "patch": "@@ -223,13 +223,12 @@ decl_attributes (decl, attributes)\n \t/* We can't set DECL_PACKED for a VAR_DECL, because the bit is\n \t   used for DECL_REGISTER.  It wouldn't mean anything anyway.  */\n \telse\n-\t  warning_with_decl (decl, \"`packed' attribute ignore\");\n-\n+\t  warning_with_decl (decl, \"`packed' attribute ignored\");\n       }\n-    else if (TREE_VALUE (a) == get_identifier (\"noreturn\")\n-\t     || TREE_VALUE (a) == get_identifier (\"__noreturn__\")\n-\t     || TREE_VALUE (a) == get_identifier (\"volatile\")\n-\t     || TREE_VALUE (a) == get_identifier (\"__volatile__\"))\n+    else if (name == get_identifier (\"noreturn\")\n+\t     || name == get_identifier (\"__noreturn__\")\n+\t     || name == get_identifier (\"volatile\")\n+\t     || name == get_identifier (\"__volatile__\"))\n       {\n \tif (TREE_CODE (decl) == FUNCTION_DECL)\n \t  TREE_THIS_VOLATILE (decl) = 1;\n@@ -240,11 +239,14 @@ decl_attributes (decl, attributes)\n \t      (build_type_variant (TREE_TYPE (type),\n \t\t\t\t   TREE_READONLY (TREE_TYPE (type)), 1));\n \telse\n-\t  warning_with_decl (decl, \"`%s' attribute ignored\",\n-\t\t\t     IDENTIFIER_POINTER (TREE_VALUE (a)));\n+\t  warning_with_decl (decl,\n+\t\t\t     (IDENTIFIER_POINTER (name)[0] == 'n'\n+\t\t\t      || IDENTIFIER_POINTER (name)[2] == 'n')\n+\t\t\t     ? \"`noreturn' attribute ignored\"\n+\t\t\t     : \"`volatile' attribute ignored\");\n       }\n-    else if (TREE_VALUE (a) == get_identifier (\"const\")\n-\t     || TREE_VALUE (a) == get_identifier (\"__const__\"))\n+    else if (name == get_identifier (\"const\")\n+\t     || name == get_identifier (\"__const__\"))\n       {\n \tif (TREE_CODE (decl) == FUNCTION_DECL)\n \t  TREE_READONLY (decl) = 1;\n@@ -257,8 +259,8 @@ decl_attributes (decl, attributes)\n \telse\n \t  warning_with_decl (decl, \"`const' attribute ignored\");\n       }\n-    else if (TREE_VALUE (a) == get_identifier (\"transparent_union\")\n-\t     || TREE_VALUE (a) == get_identifier (\"__transparent_union__\"))\n+    else if (name == get_identifier (\"transparent_union\")\n+\t     || name == get_identifier (\"__transparent_union__\"))\n       {\n \tif (TREE_CODE (decl) == PARM_DECL\n \t    && TREE_CODE (type) == UNION_TYPE\n@@ -298,7 +300,7 @@ decl_attributes (decl, attributes)\n \tDECL_STATIC_DESTRUCTOR (decl) = 1;\n       }\n     else if (TREE_CODE (name) != TREE_LIST)\n-     {\n+      {\n #ifdef VALID_MACHINE_ATTRIBUTE\n \tif (VALID_MACHINE_ATTRIBUTE (type, new_attr, name))\n \t  { \n@@ -309,14 +311,14 @@ decl_attributes (decl, attributes)\n \t\t  goto found_attr;\n \n \t    new_attr = tree_cons (NULL_TREE, name, new_attr);\n-found_attr:;\n+\t  found_attr:;\n \t  }\n \telse\n #endif\n \t  warning (\"`%s' attribute directive ignored\",\n \t\t   IDENTIFIER_POINTER (name));\n-     }\n-    else if ( args = TREE_CHAIN(name),\n+      }\n+    else if ( args = TREE_CHAIN (name),\n \t      (!strcmp (IDENTIFIER_POINTER (name = TREE_PURPOSE (name)), \"mode\")\n \t       || !strcmp (IDENTIFIER_POINTER (name), \"__mode__\"))\n \t      && list_length (args) == 1\n@@ -344,9 +346,9 @@ found_attr:;\n \t      mode = (enum machine_mode) i;\n \n \tif (mode == VOIDmode)\n-\t  error_with_decl (decl, \"unknown machine mode `%s'\", specified_name);\n+\t  error (\"unknown machine mode `%s'\", specified_name);\n \telse if ((typefm = type_for_mode (mode, TREE_UNSIGNED (type))) == 0)\n-\t  error_with_decl (decl, \"no data type for mode `%s'\", specified_name);\n+\t  error (\"no data type for mode `%s'\", specified_name);\n \telse\n \t  {\n \t    TREE_TYPE (decl) = type = typefm;\n@@ -517,9 +519,22 @@ found_attr:;\n \trecord_function_format (DECL_NAME (decl), DECL_ASSEMBLER_NAME (decl),\n \t\t\t\tis_scan, format_num, first_arg_num);\n       }\n+#ifdef VALID_MACHINE_ATTRIBUTE\n+    else if (VALID_MACHINE_ATTRIBUTE (type, new_attr, TREE_VALUE (a)))\n+      { \n+\tregister tree atlist;\n+\n+\tfor (atlist = new_attr; atlist; atlist = TREE_CHAIN (atlist))\n+\t  if (TREE_VALUE (atlist) == TREE_VALUE (a))\n+\t    goto found_attr2;\n+\n+\tnew_attr = tree_cons (NULL_TREE, TREE_VALUE (a), new_attr);\n+      found_attr2:;\n+      }\n+#endif\n     else\n-\twarning (\"`%s' attribute directive ignored\",\n-                       IDENTIFIER_POINTER (name));\n+      warning (\"`%s' attribute directive ignored\",\n+\t       IDENTIFIER_POINTER (name));\n \n   TREE_TYPE (decl) = build_type_attribute_variant (type, new_attr);\n }"}]}