{"sha": "7dc5a9bb0dc774a74d3f845f056f678ada0706b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RjNWE5YmIwZGM3NzRhNzRkM2Y4NDVmMDU2ZjY3OGFkYTA3MDZiNA==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2015-09-21T12:57:31Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2015-09-21T12:57:31Z"}, "message": "re PR target/67657 ([SH][5/6 Regression]: internal compiler error: in cselib_record_set, at cselib.c:2396 when compiling libjpeg-turbo)\n\ngcc/\n\tPR target/67657\n\t* config/sh/sh.c (sh_remove_overlapping_post_inc,\n\tsh_peephole_emit_move_insn): Add new functions.\n\t* config/sh/sh-protos.h (sh_remove_overlapping_post_inc,\n\tsh_peephole_emit_move_insn): Declere them.\n\t* config/sh/sh.md: Use them in various peephole2 patterns.\n\nFrom-SVN: r227969", "tree": {"sha": "9f2d6fa99387d57186a8eab7d422409c2a4ba0f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f2d6fa99387d57186a8eab7d422409c2a4ba0f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7dc5a9bb0dc774a74d3f845f056f678ada0706b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dc5a9bb0dc774a74d3f845f056f678ada0706b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dc5a9bb0dc774a74d3f845f056f678ada0706b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dc5a9bb0dc774a74d3f845f056f678ada0706b4/comments", "author": null, "committer": null, "parents": [{"sha": "06da803c9fb2c7feadf1c7fbc7c67430547d37ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06da803c9fb2c7feadf1c7fbc7c67430547d37ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06da803c9fb2c7feadf1c7fbc7c67430547d37ab"}], "stats": {"total": 55, "additions": 48, "deletions": 7}, "files": [{"sha": "bf688962b9773045713448da3d18097c12c94883", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc5a9bb0dc774a74d3f845f056f678ada0706b4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc5a9bb0dc774a74d3f845f056f678ada0706b4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7dc5a9bb0dc774a74d3f845f056f678ada0706b4", "patch": "@@ -1,3 +1,12 @@\n+2015-09-21  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/67657\n+\t* config/sh/sh.c (sh_remove_overlapping_post_inc,\n+\tsh_peephole_emit_move_insn): Add new functions.\n+\t* config/sh/sh-protos.h (sh_remove_overlapping_post_inc,\n+\tsh_peephole_emit_move_insn): Declere them.\n+\t* config/sh/sh.md: Use them in various peephole2 patterns.\n+\n 2015-09-21  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/67651"}, {"sha": "916fe044ed60ad6d444bbb5247464125bc673891", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc5a9bb0dc774a74d3f845f056f678ada0706b4/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc5a9bb0dc774a74d3f845f056f678ada0706b4/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=7dc5a9bb0dc774a74d3f845f056f678ada0706b4", "patch": "@@ -306,6 +306,8 @@ extern bool sh_insn_operands_modified_between_p (rtx_insn* operands_insn,\n extern bool sh_reg_dead_or_unused_after_insn (const rtx_insn* i, int regno);\n extern void sh_remove_reg_dead_or_unused_notes (rtx_insn* i, int regno);\n extern rtx_insn* sh_check_add_incdec_notes (rtx_insn* i);\n+extern rtx sh_remove_overlapping_post_inc (rtx dst, rtx src);\n+extern rtx_insn* sh_peephole_emit_move_insn (rtx dst, rtx src);\n \n extern bool sh_in_recog_treg_set_expr (void);\n extern bool sh_recog_treg_set_expr (rtx op, machine_mode mode);"}, {"sha": "3b83dcc11cf5f720948314dfb3afebacd8fa759e", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc5a9bb0dc774a74d3f845f056f678ada0706b4/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc5a9bb0dc774a74d3f845f056f678ada0706b4/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=7dc5a9bb0dc774a74d3f845f056f678ada0706b4", "patch": "@@ -13810,6 +13810,34 @@ sh_check_add_incdec_notes (rtx_insn* i)\n   return i;\n }\n \n+/* Given a move insn destiation and a source, make sure that the move source\n+   operand is not a post-inc mem load with the same address reg as the\n+   destination.  Returns the modified source operand with the post-inc removed\n+   if necessary.  */\n+rtx\n+sh_remove_overlapping_post_inc (rtx dst, rtx src)\n+{\n+  if (!MEM_P (src))\n+    return src;\n+\n+  rtx addr = XEXP (src, 0);\n+\n+  if (GET_CODE (addr) == POST_INC\n+      && reg_overlap_mentioned_p (XEXP (addr, 0), dst))\n+    return replace_equiv_address (src, XEXP (addr, 0));\n+\n+  gcc_assert (GET_CODE (addr) != POST_MODIFY);\n+  return src;\n+}\n+\n+/* Emit a move insn that is safe to be used in peephole patterns.  */\n+rtx_insn*\n+sh_peephole_emit_move_insn (rtx dst, rtx src)\n+{\n+  return sh_check_add_incdec_notes (\n+\temit_move_insn (dst, sh_remove_overlapping_post_inc (dst, src)));\n+}\n+\n /* Given an op rtx and an insn, try to find out whether the result of the\n    specified op consists only of logical operations on T bit stores.  */\n bool"}, {"sha": "f3f68c6b45ddd37125e46b568c33b8c8d049acb9", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc5a9bb0dc774a74d3f845f056f678ada0706b4/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc5a9bb0dc774a74d3f845f056f678ada0706b4/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=7dc5a9bb0dc774a74d3f845f056f678ada0706b4", "patch": "@@ -14681,7 +14681,7 @@ label:\n   [(const_int 0)]\n {\n   emit_insn (gen_addsi3 (operands[1], operands[1], operands[2]));\n-  sh_check_add_incdec_notes (emit_move_insn (operands[3], operands[1]));\n+  sh_peephole_emit_move_insn (operands[3], operands[1]);\n })\n \n ;;\tmov.l\t@(r0,r9),r1\n@@ -14694,7 +14694,7 @@ label:\n   \"TARGET_SH1 && peep2_reg_dead_p (2, operands[0])\"\n   [(const_int 0)]\n {\n-  sh_check_add_incdec_notes (emit_move_insn (operands[2], operands[1]));\n+  sh_peephole_emit_move_insn (operands[2], operands[1]);\n })\n \n (define_peephole2\n@@ -14705,7 +14705,7 @@ label:\n   \"TARGET_SH1 && peep2_reg_dead_p (2, operands[0])\"\n   [(const_int 0)]\n {\n-  sh_check_add_incdec_notes (emit_move_insn (operands[2], operands[1]));\n+  sh_peephole_emit_move_insn (operands[2], operands[1]);\n })\n \n (define_peephole2\n@@ -14717,7 +14717,7 @@ label:\n   [(const_int 0)]\n {\n   sh_check_add_incdec_notes (emit_insn (gen_extend<mode>si2 (operands[2],\n-\t\t\t\t\t\t\t     operands[1])));\n+\t\t   sh_remove_overlapping_post_inc (operands[2], operands[1]))));\n })\n \n ;;\tmov.w\t@(18,r1),r0 (r0 = HImode)\n@@ -14747,8 +14747,9 @@ label:\n \n   // We don't know what the new set insn will be in detail.  Just make sure\n   // that it still can be recognized and the constraints are satisfied.\n-  rtx_insn* i = emit_insn (gen_rtx_SET (operands[2], operands[3]));\n-\t\t\t\t\t\t     \n+  rtx_insn* i = emit_insn (gen_rtx_SET (operands[2],\n+\t\t    sh_remove_overlapping_post_inc (operands[2], operands[3])));\n+\n   recog_data_d prev_recog_data = recog_data;\n   bool i_invalid = insn_invalid_p (i, false); \n   recog_data = prev_recog_data;\n@@ -14786,7 +14787,8 @@ label:\n {\n   // We don't know what the new set insn will be in detail.  Just make sure\n   // that it still can be recognized and the constraints are satisfied.\n-  rtx_insn* i = emit_insn (gen_rtx_SET (operands[2], operands[3]));\n+  rtx_insn* i = emit_insn (gen_rtx_SET (operands[2],\n+\t\t    sh_remove_overlapping_post_inc (operands[2], operands[3])));\n \n   recog_data_d prev_recog_data = recog_data;\n   bool i_invalid = insn_invalid_p (i, false); "}]}