{"sha": "d042370eb0c2135e07b782b8b1a220a5fcbb08ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA0MjM3MGViMGMyMTM1ZTA3Yjc4MmI4YjFhMjIwYTVmY2JiMDhlZQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@superh.com", "date": "2002-07-18T12:47:34Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2002-07-18T12:47:34Z"}, "message": "sh.c (barrier_align, push): Shut up compiler warnings.\n\n\t* sh.c (barrier_align, push): Shut up compiler warnings.\n\t(initial_elimination_offset,sh_media_init_builtins): Likewise.\n\t(reg_no_subreg_operand): Delete.\n\nFrom-SVN: r55555", "tree": {"sha": "f42c945603580b6cec31b7cedf877ed3b0bfe41b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f42c945603580b6cec31b7cedf877ed3b0bfe41b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d042370eb0c2135e07b782b8b1a220a5fcbb08ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d042370eb0c2135e07b782b8b1a220a5fcbb08ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d042370eb0c2135e07b782b8b1a220a5fcbb08ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d042370eb0c2135e07b782b8b1a220a5fcbb08ee/comments", "author": null, "committer": null, "parents": [{"sha": "61fee9b3b4c0e47c6965886d77d117d892f689ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61fee9b3b4c0e47c6965886d77d117d892f689ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61fee9b3b4c0e47c6965886d77d117d892f689ff"}], "stats": {"total": 30, "additions": 12, "deletions": 18}, "files": [{"sha": "574f0d83733dead598b33475594125ad95c219ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d042370eb0c2135e07b782b8b1a220a5fcbb08ee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d042370eb0c2135e07b782b8b1a220a5fcbb08ee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d042370eb0c2135e07b782b8b1a220a5fcbb08ee", "patch": "@@ -1,3 +1,9 @@\n+Thu Jul 18 13:44:51 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\t* sh.c (barrier_align, push): Shut up compiler warnings.\n+\t(initial_elimination_offset,sh_media_init_builtins): Likewise.\n+\t(reg_no_subreg_operand): Delete.\n+\n 2002-07-17  Bo Thorsen  <bo@suse.de>\n \n \t* config/i386/linux64.h (LINK_SPEC): Remove bogus -Y option."}, {"sha": "0b34b4b10c8ef65006cbbd0e28bb73f19321e11c", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d042370eb0c2135e07b782b8b1a220a5fcbb08ee/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d042370eb0c2135e07b782b8b1a220a5fcbb08ee/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=d042370eb0c2135e07b782b8b1a220a5fcbb08ee", "patch": "@@ -3288,7 +3288,7 @@ barrier_align (barrier_or_label)\n       /* If this is a very small table, we want to keep the alignment after\n \t the table to the minimum for proper code alignment.  */\n       return ((TARGET_SMALLCODE\n-\t       || (XVECLEN (pat, 1) * GET_MODE_SIZE (GET_MODE (pat))\n+\t       || ((unsigned) XVECLEN (pat, 1) * GET_MODE_SIZE (GET_MODE (pat))\n \t\t   <= (unsigned)1 << (CACHE_LOG - 2)))\n \t      ? 1 << TARGET_SHMEDIA : CACHE_LOG);\n     }\n@@ -4309,7 +4309,7 @@ push (rn)\n \t   && FP_OR_XD_REGISTER_P (rn))\n     {\n       if (FP_REGISTER_P (rn) && (rn - FIRST_FP_REG) & 1)\n-\treturn;\n+\treturn NULL_RTX;\n       x = gen_push_4 (gen_rtx_REG (DFmode, rn));\n     }\n   else if (TARGET_SH3E && FP_REGISTER_P (rn))\n@@ -5529,6 +5529,7 @@ initial_elimination_offset (from, to)\n \n   if (from == RETURN_ADDRESS_POINTER_REGNUM\n       && (to == FRAME_POINTER_REGNUM || to == STACK_POINTER_REGNUM))\n+    {\n       if (TARGET_SH5)\n \t{\n \t  int i, n = total_saved_regs_space;\n@@ -5581,7 +5582,8 @@ initial_elimination_offset (from, to)\n \t  abort ();\n \t}\n       else\n-    return total_auto_space;\n+\treturn total_auto_space;\n+    }\n \n   abort ();\n }\n@@ -5827,20 +5829,6 @@ general_movdst_operand (op, mode)\n   return general_operand (op, mode);\n }\n \n-/* Accept a register, but not a subreg of any kind.  This allows us to\n-   avoid pathological cases in reload wrt data movement common in \n-   int->fp conversion.  */\n-\n-int\n-reg_no_subreg_operand (op, mode)\n-     register rtx op;\n-     enum machine_mode mode;\n-{\n-  if (GET_CODE (op) == SUBREG)\n-    return 0;\n-  return register_operand (op, mode);\n-}\n-\n /* Returns 1 if OP is a normal arithmetic register.  */\n \n int\n@@ -7451,7 +7439,7 @@ sh_media_init_builtins ()\n   const struct builtin_description *d;\n \n   memset (shared, 0, sizeof shared);\n-  for (d = bdesc; d - bdesc < sizeof bdesc / sizeof bdesc[0]; d++)\n+  for (d = bdesc; d - bdesc < (int) (sizeof bdesc / sizeof bdesc[0]); d++)\n     {\n       tree type, arg_type;\n       int signature = d->signature;"}]}