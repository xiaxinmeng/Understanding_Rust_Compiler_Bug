{"sha": "86e03ef911346681949ae6812d64569008936fb4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODZlMDNlZjkxMTM0NjY4MTk0OWFlNjgxMmQ2NDU2OTAwODkzNmZiNA==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2017-08-27T08:01:25Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2017-08-27T08:01:25Z"}, "message": "re PR fortran/81974 (ICE verify_gimple failed  type mismatch in binary expression)\n\n2017-08-27  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/81974\n\t* frontend-passes (inline_matumul_assign):  Explicity\n\tset typespec for call to CONJG.\n\n2017-08-27  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/81974\n\t* gfortran.dg/inline_matmul_19.f90:  New test.\n\nFrom-SVN: r251368", "tree": {"sha": "91fe0569ab27e4985cfd4554d4d5c9f1abb3998b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91fe0569ab27e4985cfd4554d4d5c9f1abb3998b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86e03ef911346681949ae6812d64569008936fb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86e03ef911346681949ae6812d64569008936fb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86e03ef911346681949ae6812d64569008936fb4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86e03ef911346681949ae6812d64569008936fb4/comments", "author": null, "committer": null, "parents": [{"sha": "3e7b89acd72eefe7097825a9a06f74913dcf0d03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e7b89acd72eefe7097825a9a06f74913dcf0d03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e7b89acd72eefe7097825a9a06f74913dcf0d03"}], "stats": {"total": 66, "additions": 61, "deletions": 5}, "files": [{"sha": "61f4a20b5fb930726c877b35ba1b7b4a5b23cdbd", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86e03ef911346681949ae6812d64569008936fb4/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86e03ef911346681949ae6812d64569008936fb4/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=86e03ef911346681949ae6812d64569008936fb4", "patch": "@@ -1,3 +1,9 @@\n+2017-08-27  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/81974\n+\t* frontend-passes (inline_matumul_assign):  Explicity\n+\tset typespec for call to CONJG.\n+\n 2017-08-21  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/81296"}, {"sha": "2631849743dd6b650436ea0b821ba5a744b8c1cc", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86e03ef911346681949ae6812d64569008936fb4/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86e03ef911346681949ae6812d64569008936fb4/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=86e03ef911346681949ae6812d64569008936fb4", "patch": "@@ -3837,14 +3837,25 @@ inline_matmul_assign (gfc_code **c, int *walk_subtrees,\n       gcc_unreachable();\n     }\n \n+  /* Build the conjg call around the variables.  Set the typespec manually\n+     because gfc_build_intrinsic_call sometimes gets this wrong.  */\n   if (conjg_a)\n-    ascalar = gfc_build_intrinsic_call (ns, GFC_ISYM_CONJG, \"conjg\",\n-\t\t\t\t\tmatrix_a->where, 1, ascalar);\n+    {\n+      gfc_typespec ts;\n+      ts = matrix_a->ts;\n+      ascalar = gfc_build_intrinsic_call (ns, GFC_ISYM_CONJG, \"conjg\",\n+\t\t\t\t\t  matrix_a->where, 1, ascalar);\n+      ascalar->ts = ts;\n+    }\n \n   if (conjg_b)\n-    bscalar = gfc_build_intrinsic_call (ns, GFC_ISYM_CONJG, \"conjg\",\n-\t\t\t\t\tmatrix_b->where, 1, bscalar);\n-\n+    {\n+      gfc_typespec ts;\n+      ts = matrix_b->ts;\n+      bscalar = gfc_build_intrinsic_call (ns, GFC_ISYM_CONJG, \"conjg\",\n+\t\t\t\t\t  matrix_b->where, 1, bscalar);\n+      bscalar->ts = ts;\n+    }\n   /* First loop comes after the zero assignment.  */\n   assign_zero->next = do_1;\n "}, {"sha": "f80aaf2fd9c8f0e3716d87dc6355f72b4e39c825", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86e03ef911346681949ae6812d64569008936fb4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86e03ef911346681949ae6812d64569008936fb4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=86e03ef911346681949ae6812d64569008936fb4", "patch": "@@ -1,3 +1,8 @@\n+2017-08-27  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/81974\n+\t* gfortran.dg/inline_matmul_19.f90:  New test.\n+\n 2017-08-25  Steven Munroe  <munroesj@gcc.gnu.org>\n \n \t* gcc.target/powerpc/m128-check.h: New file."}, {"sha": "62856a7de444f007f4bf2555be1ec63b461af00d", "filename": "gcc/testsuite/gfortran.dg/inline_matmul_19.f90", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86e03ef911346681949ae6812d64569008936fb4/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_matmul_19.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86e03ef911346681949ae6812d64569008936fb4/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_matmul_19.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_matmul_19.f90?ref=86e03ef911346681949ae6812d64569008936fb4", "patch": "@@ -0,0 +1,34 @@\n+  ! { dg-do  run }\n+  ! { dg-options \"-ffrontend-optimize\" }\n+  ! PR 81974 - this used to cause an ICE.\n+  \n+  implicit none\n+      COMPLEX(kind=kind(0d0)), DIMENSION(3, 3) :: R\n+      REAL(kind=kind(0d0)), DIMENSION(3, 3)    :: M,a,b\n+      complex(8), dimension(3,3) :: res, c\n+      integer :: i, j, k\n+      c = 0\n+      call random_number(m)\n+      call random_number(a)\n+      call random_number(b)\n+      r = cmplx(a, b, 8)\n+      do k=1,3\n+         do j=1,3\n+            do i=1,3\n+               c(k,j) = c(k,j) + conjg(r(i,k)) * m(i,j)\n+            end do\n+         end do\n+      end do\n+      res = MATMUL(TRANSPOSE(CONJG(R)), M)\n+      if (any(abs(res-c) >= 1e-6)) call abort\n+      c = 0\n+      do k=1,3\n+         do j=1,3\n+            do i=1,3\n+               c(i,k) = c(i,k) + m(i,j) * conjg(r(k,j))\n+            end do\n+         end do\n+      end do\n+      res = matmul(m, transpose(conjg(r)))\n+      if (any(abs(res-c) >= 1e-6)) call abort\n+      END"}]}