{"sha": "e1a20c09aac4149f3099cfc313bbfcd6672064bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFhMjBjMDlhYWM0MTQ5ZjMwOTljZmMzMTNiYmZjZDY2NzIwNjRiYw==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2018-11-14T11:40:41Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-11-14T11:40:41Z"}, "message": "[Ada] Crash on tagged equality\n\nThis patch corrects the retrieval of the equality function when it is\ninherited from a parent tagged type.\n\n2018-11-14  Hristian Kirtchev  <kirtchev@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch4.adb (Expand_N_Op_Eq): Remove duplicated code and use\n\troutine Find_Equality instead.\n\t(Find_Equality): New routine.\n\ngcc/testsuite/\n\n\t* gnat.dg/equal4.adb, gnat.dg/equal4.ads,\n\tgnat.dg/equal4_controlled_filter.ads,\n\tgnat.dg/equal4_full_selector_filter.ads,\n\tgnat.dg/equal4_smart_pointers.ads: New testcase.\n\nFrom-SVN: r266114", "tree": {"sha": "32eefaf53c2afd9188b84c7a9a6c101e6db35192", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32eefaf53c2afd9188b84c7a9a6c101e6db35192"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1a20c09aac4149f3099cfc313bbfcd6672064bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1a20c09aac4149f3099cfc313bbfcd6672064bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1a20c09aac4149f3099cfc313bbfcd6672064bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1a20c09aac4149f3099cfc313bbfcd6672064bc/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cacf87ce6c6f7c35c9e10ce635076481912ba092", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cacf87ce6c6f7c35c9e10ce635076481912ba092", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cacf87ce6c6f7c35c9e10ce635076481912ba092"}], "stats": {"total": 198, "additions": 139, "deletions": 59}, "files": [{"sha": "cea73e9451f00ff1db8fdc418b4eb6315b5a92e9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1a20c09aac4149f3099cfc313bbfcd6672064bc/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1a20c09aac4149f3099cfc313bbfcd6672064bc/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e1a20c09aac4149f3099cfc313bbfcd6672064bc", "patch": "@@ -1,3 +1,9 @@\n+2018-11-14  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Op_Eq): Remove duplicated code and use\n+\troutine Find_Equality instead.\n+\t(Find_Equality): New routine.\n+\n 2018-11-14  Piotr Trojanek  <trojanek@adacore.com>\n \n \t* sem_util.adb (First_From_Global_List): Do not expect"}, {"sha": "079d64544a871a4549246db7122a8d97c6530bc6", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 78, "deletions": 59, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1a20c09aac4149f3099cfc313bbfcd6672064bc/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1a20c09aac4149f3099cfc313bbfcd6672064bc/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=e1a20c09aac4149f3099cfc313bbfcd6672064bc", "patch": "@@ -7298,16 +7298,16 @@ package body Exp_Ch4 is\n       Bodies : constant List_Id    := New_List;\n       A_Typ  : constant Entity_Id  := Etype (Lhs);\n \n-      Typl    : Entity_Id := A_Typ;\n-      Op_Name : Entity_Id;\n-      Prim    : Elmt_Id;\n-\n       procedure Build_Equality_Call (Eq : Entity_Id);\n       --  If a constructed equality exists for the type or for its parent,\n       --  build and analyze call, adding conversions if the operation is\n       --  inherited.\n \n-      function Has_Unconstrained_UU_Component (Typ : Node_Id) return Boolean;\n+      function Find_Equality (Prims : Elist_Id) return Entity_Id;\n+      --  Find a primitive equality function within primitive operation list\n+      --  Prims.\n+\n+      function Has_Unconstrained_UU_Component (Typ : Entity_Id) return Boolean;\n       --  Determines whether a type has a subcomponent of an unconstrained\n       --  Unchecked_Union subtype. Typ is a record type.\n \n@@ -7456,7 +7456,6 @@ package body Exp_Ch4 is\n                --  Infer the discriminant values from the constraint.\n \n                else\n-\n                   Discr := First_Discriminant (Lhs_Type);\n                   while Present (Discr) loop\n                      Append_Elmt\n@@ -7556,12 +7555,70 @@ package body Exp_Ch4 is\n          Analyze_And_Resolve (N, Standard_Boolean, Suppress => All_Checks);\n       end Build_Equality_Call;\n \n+      -------------------\n+      -- Find_Equality --\n+      -------------------\n+\n+      function Find_Equality (Prims : Elist_Id) return Entity_Id is\n+         Formal_1  : Entity_Id;\n+         Formal_2  : Entity_Id;\n+         Prim      : Entity_Id;\n+         Prim_Elmt : Elmt_Id;\n+\n+      begin\n+         --  Assume that the tagged type lacks an equality\n+\n+         Prim := Empty;\n+\n+         --  Inspect the list of primitives looking for a suitable equality\n+\n+         Prim_Elmt := First_Elmt (Prims);\n+         while Present (Prim_Elmt) loop\n+\n+            --  Traverse a potential chain of derivations to recover the parent\n+            --  equality.\n+\n+            Prim := Ultimate_Alias (Node (Prim_Elmt));\n+\n+            --  The current primitives denotes function \"=\" that returns a\n+            --  Boolean. This could be the suitable equality if the formal\n+            --  parameters agree.\n+\n+            if Ekind (Prim) = E_Function\n+              and then Chars (Prim) = Name_Op_Eq\n+              and then Base_Type (Etype (Prim)) = Standard_Boolean\n+            then\n+               Formal_1 := First_Formal (Prim);\n+               Formal_2 := Empty;\n+\n+               if Present (Formal_1) then\n+                  Formal_2 := Next_Formal (Formal_1);\n+               end if;\n+\n+               if Present (Formal_1)\n+                 and then Present (Formal_2)\n+                 and then Etype (Formal_1) = Etype (Formal_2)\n+               then\n+                  exit;\n+               end if;\n+            end if;\n+\n+            Next_Elmt (Prim_Elmt);\n+         end loop;\n+\n+         --  A tagged type should have an equality in its list of primitives\n+\n+         pragma Assert (Present (Prim));\n+\n+         return Prim;\n+      end Find_Equality;\n+\n       ------------------------------------\n       -- Has_Unconstrained_UU_Component --\n       ------------------------------------\n \n       function Has_Unconstrained_UU_Component\n-        (Typ : Node_Id) return Boolean\n+        (Typ : Entity_Id) return Boolean\n       is\n          Tdef  : constant Node_Id :=\n                    Type_Definition (Declaration_Node (Base_Type (Typ)));\n@@ -7697,19 +7754,24 @@ package body Exp_Ch4 is\n          return False;\n       end Has_Unconstrained_UU_Component;\n \n+      --  Local variables\n+\n+      Typl : Entity_Id;\n+\n    --  Start of processing for Expand_N_Op_Eq\n \n    begin\n       Binary_Op_Validity_Checks (N);\n \n       --  Deal with private types\n \n+      Typl := A_Typ;\n+\n       if Ekind (Typl) = E_Private_Type then\n          Typl := Underlying_Type (Typl);\n+\n       elsif Ekind (Typl) = E_Private_Subtype then\n          Typl := Underlying_Type (Base_Type (Typl));\n-      else\n-         null;\n       end if;\n \n       --  It may happen in error situations that the underlying type is not\n@@ -7851,25 +7913,8 @@ package body Exp_Ch4 is\n             --  primitive may have been overridden in its untagged full view).\n \n             if Inherits_From_Tagged_Full_View (A_Typ) then\n-\n-               --  Search for equality operation, checking that the operands\n-               --  have the same type. Note that we must find a matching entry,\n-               --  or something is very wrong.\n-\n-               Prim := First_Elmt (Collect_Primitive_Operations (A_Typ));\n-\n-               while Present (Prim) loop\n-                  exit when Chars (Node (Prim)) = Name_Op_Eq\n-                    and then Etype (First_Formal (Node (Prim))) =\n-                             Etype (Next_Formal (First_Formal (Node (Prim))))\n-                    and then\n-                      Base_Type (Etype (Node (Prim))) = Standard_Boolean;\n-\n-                  Next_Elmt (Prim);\n-               end loop;\n-\n-               pragma Assert (Present (Prim));\n-               Op_Name := Node (Prim);\n+               Build_Equality_Call\n+                 (Find_Equality (Collect_Primitive_Operations (A_Typ)));\n \n             --  Find the type's predefined equality or an overriding\n             --  user-defined equality. The reason for not simply calling\n@@ -7883,23 +7928,10 @@ package body Exp_Ch4 is\n                   Typl := Find_Specific_Type (Typl);\n                end if;\n \n-               Prim := First_Elmt (Primitive_Operations (Typl));\n-               while Present (Prim) loop\n-                  exit when Chars (Node (Prim)) = Name_Op_Eq\n-                    and then Etype (First_Formal (Node (Prim))) =\n-                             Etype (Next_Formal (First_Formal (Node (Prim))))\n-                    and then\n-                      Base_Type (Etype (Node (Prim))) = Standard_Boolean;\n-\n-                  Next_Elmt (Prim);\n-               end loop;\n-\n-               pragma Assert (Present (Prim));\n-               Op_Name := Node (Prim);\n+               Build_Equality_Call\n+                 (Find_Equality (Primitive_Operations (Typl)));\n             end if;\n \n-            Build_Equality_Call (Op_Name);\n-\n          --  Ada 2005 (AI-216): Program_Error is raised when evaluating the\n          --  predefined equality operator for a type which has a subcomponent\n          --  of an Unchecked_Union type whose nominal subtype is unconstrained.\n@@ -7967,22 +7999,9 @@ package body Exp_Ch4 is\n          --  the root Super_String type.\n \n          elsif Is_Bounded_String (Typl) then\n-            Prim :=\n-              First_Elmt (Collect_Primitive_Operations (Root_Type (Typl)));\n-\n-            while Present (Prim) loop\n-               exit when Chars (Node (Prim)) = Name_Op_Eq\n-                 and then Etype (First_Formal (Node (Prim))) =\n-                          Etype (Next_Formal (First_Formal (Node (Prim))))\n-                 and then Base_Type (Etype (Node (Prim))) = Standard_Boolean;\n-\n-               Next_Elmt (Prim);\n-            end loop;\n-\n-            --  A Super_String type should always have a primitive equality\n-\n-            pragma Assert (Present (Prim));\n-            Build_Equality_Call (Node (Prim));\n+            Build_Equality_Call\n+              (Find_Equality\n+                (Collect_Primitive_Operations (Root_Type (Typl))));\n \n          --  Otherwise expand the component by component equality. Note that\n          --  we never use block-bit comparisons for records, because of the"}, {"sha": "43bfc8a78a4e61b78fa9ae6f49aad4f5ac948033", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1a20c09aac4149f3099cfc313bbfcd6672064bc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1a20c09aac4149f3099cfc313bbfcd6672064bc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e1a20c09aac4149f3099cfc313bbfcd6672064bc", "patch": "@@ -1,3 +1,10 @@\n+2018-11-14  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* gnat.dg/equal4.adb, gnat.dg/equal4.ads,\n+\tgnat.dg/equal4_controlled_filter.ads,\n+\tgnat.dg/equal4_full_selector_filter.ads,\n+\tgnat.dg/equal4_smart_pointers.ads: New testcase.\n+\n 2018-11-14  Piotr Trojanek  <trojanek@adacore.com>\n \n \t* gnat.dg/generic_actuals.adb: New testcase."}, {"sha": "9c6861745270b83af54170038b83e4aadda7469c", "filename": "gcc/testsuite/gnat.dg/equal4.adb", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1a20c09aac4149f3099cfc313bbfcd6672064bc/gcc%2Ftestsuite%2Fgnat.dg%2Fequal4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1a20c09aac4149f3099cfc313bbfcd6672064bc/gcc%2Ftestsuite%2Fgnat.dg%2Fequal4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fequal4.adb?ref=e1a20c09aac4149f3099cfc313bbfcd6672064bc", "patch": "@@ -0,0 +1,12 @@\n+--  { dg-do compile }\n+\n+package body Equal4 is\n+   procedure Compare (Obj : Equal4_Full_Selector_Filter.Object_T) is\n+      use type Equal4_Full_Selector_Filter.Object_T;\n+\n+   begin\n+      if Obj = Equal4_Full_Selector_Filter.True then\n+         null;\n+      end if;\n+   end Compare;\n+end Equal4;"}, {"sha": "0bc211340350c73667d4b80a44a84be9f7d0a320", "filename": "gcc/testsuite/gnat.dg/equal4.ads", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1a20c09aac4149f3099cfc313bbfcd6672064bc/gcc%2Ftestsuite%2Fgnat.dg%2Fequal4.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1a20c09aac4149f3099cfc313bbfcd6672064bc/gcc%2Ftestsuite%2Fgnat.dg%2Fequal4.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fequal4.ads?ref=e1a20c09aac4149f3099cfc313bbfcd6672064bc", "patch": "@@ -0,0 +1,5 @@\n+with Equal4_Full_Selector_Filter;\n+\n+package Equal4 is\n+   procedure Compare (Obj : Equal4_Full_Selector_Filter.Object_T);\n+end Equal4;"}, {"sha": "d7f1dd4fb87f63f7a732ecfbc52facdcea3886b6", "filename": "gcc/testsuite/gnat.dg/equal4_controlled_filter.ads", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1a20c09aac4149f3099cfc313bbfcd6672064bc/gcc%2Ftestsuite%2Fgnat.dg%2Fequal4_controlled_filter.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1a20c09aac4149f3099cfc313bbfcd6672064bc/gcc%2Ftestsuite%2Fgnat.dg%2Fequal4_controlled_filter.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fequal4_controlled_filter.ads?ref=e1a20c09aac4149f3099cfc313bbfcd6672064bc", "patch": "@@ -0,0 +1,13 @@\n+with Equal4_Smart_Pointers;\n+\n+generic\n+package Equal4_Controlled_Filter is\n+   type Object_T is private;\n+\n+   function True return Object_T;\n+\n+private\n+   package Smart is new Equal4_Smart_Pointers;\n+\n+   type Object_T is new Smart.Pointer;\n+end Equal4_Controlled_Filter;"}, {"sha": "106df5be5706ffb59edc4bb3f7ce1e9e515a87ab", "filename": "gcc/testsuite/gnat.dg/equal4_full_selector_filter.ads", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1a20c09aac4149f3099cfc313bbfcd6672064bc/gcc%2Ftestsuite%2Fgnat.dg%2Fequal4_full_selector_filter.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1a20c09aac4149f3099cfc313bbfcd6672064bc/gcc%2Ftestsuite%2Fgnat.dg%2Fequal4_full_selector_filter.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fequal4_full_selector_filter.ads?ref=e1a20c09aac4149f3099cfc313bbfcd6672064bc", "patch": "@@ -0,0 +1,7 @@\n+with Equal4_Controlled_Filter;\n+\n+package Equal4_Full_Selector_Filter is\n+   package Equal4_Controlled_Filter_Instance is new Equal4_Controlled_Filter;\n+\n+   type Object_T is new Equal4_Controlled_Filter_Instance.Object_T;\n+end Equal4_Full_Selector_Filter;"}, {"sha": "c5e03f58ee9fdd5a4b8695a4eba840f25783ee0a", "filename": "gcc/testsuite/gnat.dg/equal4_smart_pointers.ads", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1a20c09aac4149f3099cfc313bbfcd6672064bc/gcc%2Ftestsuite%2Fgnat.dg%2Fequal4_smart_pointers.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1a20c09aac4149f3099cfc313bbfcd6672064bc/gcc%2Ftestsuite%2Fgnat.dg%2Fequal4_smart_pointers.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fequal4_smart_pointers.ads?ref=e1a20c09aac4149f3099cfc313bbfcd6672064bc", "patch": "@@ -0,0 +1,11 @@\n+with Ada.Finalization;\n+\n+generic\n+package Equal4_Smart_Pointers is\n+   type Pointer is private;\n+\n+private\n+   type Pointer is new Ada.Finalization.Controlled with record\n+      Data : Integer;\n+   end record;\n+end Equal4_Smart_Pointers;"}]}