{"sha": "08ec53e7980ab9f5d4e9e6a7152684580b78bad8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhlYzUzZTc5ODBhYjlmNWQ0ZTllNmE3MTUyNjg0NTgwYjc4YmFkOA==", "commit": {"author": {"name": "John David Anglin", "email": "dave@hiauly1.hia.nrc.ca", "date": "2002-11-13T20:38:13Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2002-11-13T20:38:13Z"}, "message": "pa64-hpux.h (LINK_SPEC): Move \"+Accept TypeMismatch\" switch to the beginning of the spec.\n\n\t* pa64-hpux.h (LINK_SPEC): Move \"+Accept TypeMismatch\" switch to the\n\tbeginning of the spec.\n\t(LDD_SUFFIX, PARSE_LDD_OUTPUT): Delete.\n\t(LD_INIT_SWITCH, LD_FINI_SWITCH): Define but don't enable.  Add comment\n\tregarding problems with global constructors when using GNU ld.\n\nFrom-SVN: r59084", "tree": {"sha": "c7149cfedd6aea2ba2fd3e475d7cbc693005b6f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7149cfedd6aea2ba2fd3e475d7cbc693005b6f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08ec53e7980ab9f5d4e9e6a7152684580b78bad8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08ec53e7980ab9f5d4e9e6a7152684580b78bad8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08ec53e7980ab9f5d4e9e6a7152684580b78bad8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08ec53e7980ab9f5d4e9e6a7152684580b78bad8/comments", "author": null, "committer": null, "parents": [{"sha": "61d318260a1c726f818da770f2e425411d9a5880", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61d318260a1c726f818da770f2e425411d9a5880", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61d318260a1c726f818da770f2e425411d9a5880"}], "stats": {"total": 49, "additions": 33, "deletions": 16}, "files": [{"sha": "23e98e5e661a2d91993970ed80a1f6e339543511", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08ec53e7980ab9f5d4e9e6a7152684580b78bad8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08ec53e7980ab9f5d4e9e6a7152684580b78bad8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=08ec53e7980ab9f5d4e9e6a7152684580b78bad8", "patch": "@@ -1,3 +1,11 @@\n+2002-11-13  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n+\n+\t* pa64-hpux.h (LINK_SPEC): Move \"+Accept TypeMismatch\" switch to the\n+\tbeginning of the spec.\n+\t(LDD_SUFFIX, PARSE_LDD_OUTPUT): Delete.\n+\t(LD_INIT_SWITCH, LD_FINI_SWITCH): Define but don't enable.  Add comment\n+\tregarding problems with global constructors when using GNU ld.\n+\n 2002-11-13  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* gthr-solaris.h: Fix formatting."}, {"sha": "aa7dac75382ec4b819b73031c2d2af188cbeea41", "filename": "gcc/config/pa/pa64-hpux.h", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08ec53e7980ab9f5d4e9e6a7152684580b78bad8/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08ec53e7980ab9f5d4e9e6a7152684580b78bad8/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h?ref=08ec53e7980ab9f5d4e9e6a7152684580b78bad8", "patch": "@@ -31,14 +31,16 @@ Boston, MA 02111-1307, USA.  */\n      N_(\"Assume code will be linked by HP ld\") },\n \n /* We can debug dynamically linked executables on hpux11; we also\n-   want dereferencing of a NULL pointer to cause a SEGV.  */\n+   want dereferencing of a NULL pointer to cause a SEGV.  Do not move\n+   the \"+Accept TypeMismatch\" switch.  We check for it in collect2\n+   to determine which init/fini is needed.  */\n #undef LINK_SPEC\n #if ((TARGET_DEFAULT | TARGET_CPU_DEFAULT) & MASK_GNU_LD)\n #define LINK_SPEC \\\n-  \"-E %{mlinker-opt:-O} %{!shared:-u main} %{static:-a archive} %{shared:%{mhp-ld:-b}%{!mhp-ld:-shared}} %{mhp-ld:+Accept TypeMismatch}\"\n+  \"%{mhp-ld:+Accept TypeMismatch} -E %{mlinker-opt:-O} %{!shared:-u main} %{static:-a archive} %{shared:%{mhp-ld:-b}%{!mhp-ld:-shared}}\"\n #else\n #define LINK_SPEC \\\n-  \"-E %{mlinker-opt:-O} %{!shared:-u main} %{static:-a archive} %{shared:%{mgnu-ld:-shared}%{!mgnu-ld:-b}} %{!mgnu-ld:+Accept TypeMismatch}\"\n+  \"%{!mgnu-ld:+Accept TypeMismatch} -E %{mlinker-opt:-O} %{!shared:-u main} %{static:-a archive} %{shared:%{mgnu-ld:-shared}%{!mgnu-ld:-b}}\"\n #endif\n \n /* Like the default, except no -lg.  */\n@@ -252,19 +254,26 @@ do {\t\t\t\t\t\t\t\t\\\n \n /* Since we are not yet using .init and .fini sections, we need to\n    explicitly arrange to run the global constructors and destructors.\n-   HPUX 11 has ldd and we use it to determine the dependencies of\n-   dynamic objects.  It might be possible to use the ld options for\n-   running initializers and terminators and thereby avoid the necessity\n-   of running ldd, but unfortunately the options are different for\n-   the two linkers.  */\n-#define LDD_SUFFIX \"/usr/ccs/bin/ldd\"\n-\n-/* Skip to first '>' then advance to '/' at the beginning of the filename.  */\n-#define PARSE_LDD_OUTPUT(PTR)\t\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\\\n-  while (*PTR != '>') PTR++;\t\t\t\t\t\\\n-  while (*PTR != '/') PTR++;\t\t\t\t\t\\\n-} while (0)\n+   We could use ldd for this but it depends on LD_LIBRARY_PATH being\n+   correctly set.  So, we use the ld init and fini switches. However,\n+   we need to support different switches for the GNU and HP linkers.\n+   We can't check TARGET_GNU_LD in collect2, so we need a different\n+   test.  The +Accept switch is always the first switch when we are\n+   using the HP linker (see define for LINK_SPEC).  Checking for it\n+   is a somewhat fragile as it depends on internal details of the\n+   collect2 program but it is better than testing ld_file_name.\n+\n+   FIXME: The GNU linker is broken.  The -init/-fini switches don't\n+   work and ldd can't determine the dynamic dependences of executables\n+   linked with GNU ld.  The init and fini routines are not executed\n+   although DT_INIT and DT_FINI appear ok.  As a result, defining\n+   LD_INIT_SWITCH and LD_FINI_SWITCH causes more harm than good when\n+   using GNU ld.  However, the definitions appear to work fine with\n+   the HP linker.  */\n+#if 0\n+#define LD_INIT_SWITCH (strcmp (\"+Accept\", ld2_argv[1]) ? \"-init\" : \"+init\")\n+#define LD_FINI_SWITCH (strcmp (\"+Accept\", ld2_argv[1]) ? \"-fini\" : \"+fini\")\n+#endif\n \n /* If using HP ld do not call pxdb.  Use size as a program that does nothing\n    and returns 0.  /bin/true cannot be used because it is a script without"}]}