{"sha": "0e38fbfe1415e29d98bcdadc7307d589f496546b", "node_id": "C_kwDOANBUbNoAKDBlMzhmYmZlMTQxNWUyOWQ5OGJjZGFkYzczMDdkNTg5ZjQ5NjU0NmI", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2022-01-19T13:05:16Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-10T08:19:20Z"}, "message": "[Ada] Simplify conversion from Character to Char_Code\n\nReplace \"Char_Code (Character'Pos (...))\" with \"Get_Char_Code (...)\".\nThe Get_Char_Code routine is inlined, so there is no performance penalty\nwhen it is called with static actual parameters.\n\nThe N_Character_Literal has field Char_Literal_Value of type Unat, but\nwe should really only store there values from Char_Code type (e.g. there\nare no characters with negative ASCII codes). It seems cleaner to use\nUI_From_CC and not a more general UI_From_Int when setting the character\nliteral values.\n\nCleanup related to handling of character values in SPARK\ncounterexamples, which just like the code for names in task arrays\ncreate N_Character_Literal nodes.\n\ngcc/ada/\n\n\t* exp_prag.adb (Expand_Pragma_Import_Or_Interface): Use\n\tGet_Char_Code.\n\t* exp_util.adb (Build_Task_Array_Image): Simplify conversion to\n\tChar_Code.\n\t(Build_Task_Image_Prefix): Likewise.\n\t(Build_Task_Record_Image): Likewise.\n\t* cstand.adb (Create_Standard): Use UI_From_Int instead of\n\tUI_From_CC.\n\t* exp_ch11.adb (Expand_N_Exception_Declaration): Likewise.\n\t* sem_res.adb (Patch_Up_Value): Likewise.\n\t* stringt.adb (Write_String_Table_Entry): Use Get_Char_Code.", "tree": {"sha": "f03ff8212273d48c471fbb8a6f3db2a28a057a95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f03ff8212273d48c471fbb8a6f3db2a28a057a95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e38fbfe1415e29d98bcdadc7307d589f496546b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e38fbfe1415e29d98bcdadc7307d589f496546b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e38fbfe1415e29d98bcdadc7307d589f496546b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e38fbfe1415e29d98bcdadc7307d589f496546b/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60ab3d0f2d9f95045543fea361e976351e76b5a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60ab3d0f2d9f95045543fea361e976351e76b5a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60ab3d0f2d9f95045543fea361e976351e76b5a1"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "8ae0e47a96ee3fb76da28f891c789702965e8ae4", "filename": "gcc/ada/cstand.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e38fbfe1415e29d98bcdadc7307d589f496546b/gcc%2Fada%2Fcstand.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e38fbfe1415e29d98bcdadc7307d589f496546b/gcc%2Fada%2Fcstand.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstand.adb?ref=0e38fbfe1415e29d98bcdadc7307d589f496546b", "patch": "@@ -787,7 +787,7 @@ package body CStand is\n       B_Node := New_Node (N_Character_Literal, Stloc);\n       Set_Is_Static_Expression (B_Node);\n       Set_Chars                (B_Node, No_Name);\n-      Set_Char_Literal_Value   (B_Node, UI_From_Int (16#FF#));\n+      Set_Char_Literal_Value   (B_Node, UI_From_CC (16#FF#));\n       Set_Entity               (B_Node, Empty);\n       Set_Etype                (B_Node, Standard_Character);\n       Set_High_Bound (R_Node, B_Node);\n@@ -833,7 +833,7 @@ package body CStand is\n       B_Node := New_Node (N_Character_Literal, Stloc);\n       Set_Is_Static_Expression (B_Node);\n       Set_Chars                (B_Node, No_Name);\n-      Set_Char_Literal_Value   (B_Node, UI_From_Int (16#FFFF#));\n+      Set_Char_Literal_Value   (B_Node, UI_From_CC (16#FFFF#));\n       Set_Entity               (B_Node, Empty);\n       Set_Etype                (B_Node, Standard_Wide_Character);\n       Set_High_Bound           (R_Node, B_Node);\n@@ -882,7 +882,7 @@ package body CStand is\n       B_Node := New_Node (N_Character_Literal, Stloc);\n       Set_Is_Static_Expression (B_Node);\n       Set_Chars                (B_Node, No_Name);\n-      Set_Char_Literal_Value   (B_Node, UI_From_Int (16#7FFF_FFFF#));\n+      Set_Char_Literal_Value   (B_Node, UI_From_CC (16#7FFF_FFFF#));\n       Set_Entity               (B_Node, Empty);\n       Set_Etype                (B_Node, Standard_Wide_Wide_Character);\n       Set_High_Bound           (R_Node, B_Node);\n@@ -1088,7 +1088,7 @@ package body CStand is\n             Set_Is_Static_Expression (Expr_Decl);\n             Set_Chars                (Expr_Decl, No_Name);\n             Set_Etype                (Expr_Decl, Standard_Character);\n-            Set_Char_Literal_Value   (Expr_Decl, UI_From_Int (Int (Ccode)));\n+            Set_Char_Literal_Value   (Expr_Decl, UI_From_CC (Ccode));\n          end;\n \n          Append (Decl, Decl_A);"}, {"sha": "855d30388269b7f328c169525ce7130b8aa1d4e4", "filename": "gcc/ada/exp_ch11.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e38fbfe1415e29d98bcdadc7307d589f496546b/gcc%2Fada%2Fexp_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e38fbfe1415e29d98bcdadc7307d589f496546b/gcc%2Fada%2Fexp_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch11.adb?ref=0e38fbfe1415e29d98bcdadc7307d589f496546b", "patch": "@@ -1246,7 +1246,7 @@ package body Exp_Ch11 is\n       Append_To (L,\n         Make_Character_Literal (Loc,\n           Chars              => Name_uA,\n-          Char_Literal_Value => UI_From_Int (Character'Pos ('A'))));\n+          Char_Literal_Value => UI_From_CC (Get_Char_Code ('A'))));\n \n       --  Name_Length component: Nam'Length\n "}, {"sha": "0fe8bfffdb20d024875b95d77d223e94b25cb487", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e38fbfe1415e29d98bcdadc7307d589f496546b/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e38fbfe1415e29d98bcdadc7307d589f496546b/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=0e38fbfe1415e29d98bcdadc7307d589f496546b", "patch": "@@ -2010,7 +2010,7 @@ package body Exp_Prag is\n             Rewrite (Expression (Lang_Char),\n               Make_Character_Literal (Loc,\n                 Chars              => Name_uC,\n-                Char_Literal_Value => UI_From_Int (Character'Pos ('C'))));\n+                Char_Literal_Value => UI_From_CC (Get_Char_Code ('C'))));\n             Analyze (Expression (Lang_Char));\n \n             --  Change the value of Foreign_Data"}, {"sha": "263b42f7586f2f1ddb38b3f18fbdcff87bd445f2", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e38fbfe1415e29d98bcdadc7307d589f496546b/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e38fbfe1415e29d98bcdadc7307d589f496546b/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=0e38fbfe1415e29d98bcdadc7307d589f496546b", "patch": "@@ -4183,7 +4183,7 @@ package body Exp_Util is\n \n       Build_Task_Image_Prefix (Loc, Len, Res, Pos, Pref, Sum, Decls, Stats);\n \n-      Set_Character_Literal_Name (Char_Code (Character'Pos ('(')));\n+      Set_Character_Literal_Name (Get_Char_Code ('('));\n \n       Append_To (Stats,\n         Make_Assignment_Statement (Loc,\n@@ -4194,7 +4194,7 @@ package body Exp_Util is\n           Expression =>\n             Make_Character_Literal (Loc,\n               Chars              => Name_Find,\n-              Char_Literal_Value => UI_From_Int (Character'Pos ('(')))));\n+              Char_Literal_Value => UI_From_CC (Get_Char_Code ('(')))));\n \n       Append_To (Stats,\n         Make_Assignment_Statement (Loc,\n@@ -4244,7 +4244,7 @@ package body Exp_Util is\n                           Expressions    =>\n                             New_List (Make_Integer_Literal (Loc, 1))))));\n \n-            Set_Character_Literal_Name (Char_Code (Character'Pos (',')));\n+            Set_Character_Literal_Name (Get_Char_Code (','));\n \n             Append_To (Stats,\n               Make_Assignment_Statement (Loc,\n@@ -4254,7 +4254,7 @@ package body Exp_Util is\n                 Expression =>\n                   Make_Character_Literal (Loc,\n                     Chars              => Name_Find,\n-                    Char_Literal_Value => UI_From_Int (Character'Pos (',')))));\n+                    Char_Literal_Value => UI_From_CC (Get_Char_Code (',')))));\n \n             Append_To (Stats,\n               Make_Assignment_Statement (Loc,\n@@ -4266,7 +4266,7 @@ package body Exp_Util is\n          end if;\n       end loop;\n \n-      Set_Character_Literal_Name (Char_Code (Character'Pos (')')));\n+      Set_Character_Literal_Name (Get_Char_Code (')'));\n \n       Append_To (Stats,\n         Make_Assignment_Statement (Loc,\n@@ -4277,7 +4277,7 @@ package body Exp_Util is\n            Expression =>\n              Make_Character_Literal (Loc,\n                Chars              => Name_Find,\n-               Char_Literal_Value => UI_From_Int (Character'Pos (')')))));\n+               Char_Literal_Value => UI_From_CC (Get_Char_Code (')')))));\n       return Build_Task_Image_Function (Loc, Decls, Stats, Res);\n    end Build_Task_Array_Image;\n \n@@ -4569,7 +4569,7 @@ package body Exp_Util is\n \n       Build_Task_Image_Prefix (Loc, Len, Res, Pos, Pref, Sum, Decls, Stats);\n \n-      Set_Character_Literal_Name (Char_Code (Character'Pos ('.')));\n+      Set_Character_Literal_Name (Get_Char_Code ('.'));\n \n       --  Res (Pos) := '.';\n \n@@ -4582,7 +4582,7 @@ package body Exp_Util is\n              Make_Character_Literal (Loc,\n                Chars => Name_Find,\n                Char_Literal_Value =>\n-                 UI_From_Int (Character'Pos ('.')))));\n+                 UI_From_CC (Get_Char_Code ('.')))));\n \n       Append_To (Stats,\n         Make_Assignment_Statement (Loc,"}, {"sha": "734e457975befd3a990dbb69a583554f7a0c716e", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e38fbfe1415e29d98bcdadc7307d589f496546b/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e38fbfe1415e29d98bcdadc7307d589f496546b/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=0e38fbfe1415e29d98bcdadc7307d589f496546b", "patch": "@@ -2245,12 +2245,12 @@ package body Sem_Res is\n          elsif Nkind (N) = N_String_Literal\n                  and then Is_Character_Type (Typ)\n          then\n-            Set_Character_Literal_Name (Char_Code (Character'Pos ('A')));\n+            Set_Character_Literal_Name (Get_Char_Code ('A'));\n             Rewrite (N,\n               Make_Character_Literal (Sloc (N),\n                 Chars => Name_Find,\n                 Char_Literal_Value =>\n-                  UI_From_Int (Character'Pos ('A'))));\n+                  UI_From_CC (Get_Char_Code ('A'))));\n             Set_Etype (N, Any_Character);\n             Set_Is_Static_Expression (N);\n "}, {"sha": "5bae3cc9ae7264710d18e7698efc0b9f23db46d4", "filename": "gcc/ada/stringt.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e38fbfe1415e29d98bcdadc7307d589f496546b/gcc%2Fada%2Fstringt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e38fbfe1415e29d98bcdadc7307d589f496546b/gcc%2Fada%2Fstringt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstringt.adb?ref=0e38fbfe1415e29d98bcdadc7307d589f496546b", "patch": "@@ -441,7 +441,7 @@ package body Stringt is\n          for J in 1 .. String_Length (Id) loop\n             C := Get_String_Char (Id, J);\n \n-            if C = Character'Pos ('\"') then\n+            if C = Get_Char_Code ('\"') then\n                Write_Str (\"\"\"\"\"\");\n             else\n                Write_Char_Code (C);"}]}