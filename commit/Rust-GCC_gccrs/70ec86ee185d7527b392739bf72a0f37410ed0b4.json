{"sha": "70ec86ee185d7527b392739bf72a0f37410ed0b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBlYzg2ZWUxODVkNzUyN2IzOTI3MzliZjcyYTBmMzc0MTBlZDBiNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-11-26T21:28:26Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-11-26T21:28:26Z"}, "message": "re PR target/59229 (ICE in ix86_expand_set_or_movmem)\n\n\tPR target/59229\n\t* config/i386/i386.c (device_alg): Fix up formatting.\n\t(ix86_expand_set_or_movmem): Handle max_size < epilogue_size_needed\n\tsimilarly to count && count < epilogue_size_needed.  Fix up\n\tcomment typo.\n\t* builtins.c (determine_block_size): Fix comment typo.\n\n\t* gcc.c-torture/execute/pr59229.c: New test.\n\nFrom-SVN: r205416", "tree": {"sha": "79a8b5d238d8b0b72c417cadb8c7511debb7dac4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79a8b5d238d8b0b72c417cadb8c7511debb7dac4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70ec86ee185d7527b392739bf72a0f37410ed0b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70ec86ee185d7527b392739bf72a0f37410ed0b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70ec86ee185d7527b392739bf72a0f37410ed0b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70ec86ee185d7527b392739bf72a0f37410ed0b4/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "13a5b41c7da58117719d5b29dd18cb0ca5807cfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13a5b41c7da58117719d5b29dd18cb0ca5807cfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13a5b41c7da58117719d5b29dd18cb0ca5807cfe"}], "stats": {"total": 70, "additions": 54, "deletions": 16}, "files": [{"sha": "7510537f3de84078820586f8b415f4c4d5a7527e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70ec86ee185d7527b392739bf72a0f37410ed0b4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70ec86ee185d7527b392739bf72a0f37410ed0b4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=70ec86ee185d7527b392739bf72a0f37410ed0b4", "patch": "@@ -1,5 +1,12 @@\n 2013-11-26  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/59229\n+\t* config/i386/i386.c (device_alg): Fix up formatting.\n+\t(ix86_expand_set_or_movmem): Handle max_size < epilogue_size_needed\n+\tsimilarly to count && count < epilogue_size_needed.  Fix up\n+\tcomment typo.\n+\t* builtins.c (determine_block_size): Fix comment typo.\n+\n \tPR sanitizer/59258\n \t* ubsan.c (ubsan_source_location): Don't add any location\n \tto ADDR_EXPR in the ctor.  Revert 2013-11-22 change."}, {"sha": "3f03b01281b993c55af64dc92841e67f5210ca07", "filename": "gcc/builtins.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70ec86ee185d7527b392739bf72a0f37410ed0b4/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70ec86ee185d7527b392739bf72a0f37410ed0b4/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=70ec86ee185d7527b392739bf72a0f37410ed0b4", "patch": "@@ -3142,7 +3142,7 @@ determine_block_size (tree len, rtx len_rtx,\n \t}\n       else if (range_type == VR_ANTI_RANGE)\n \t{\n-\t  /* Anti range 0...N lets us to determine minmal size to N+1.  */\n+\t  /* Anti range 0...N lets us to determine minimal size to N+1.  */\n \t  if (min.is_zero ())\n \t    {\n \t      if ((max + double_int_one).fits_uhwi ())\n@@ -3152,7 +3152,7 @@ determine_block_size (tree len, rtx len_rtx,\n \n \t     int n;\n \t     if (n < 100)\n-\t       memcpy (a,b, n)\n+\t       memcpy (a, b, n)\n \n \t     Produce anti range allowing negative values of N.  We still\n \t     can use the information and make a guess that N is not negative."}, {"sha": "fd4bb671ad9264cc178249b9c959c4ea14ced867", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70ec86ee185d7527b392739bf72a0f37410ed0b4/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70ec86ee185d7527b392739bf72a0f37410ed0b4/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=70ec86ee185d7527b392739bf72a0f37410ed0b4", "patch": "@@ -23453,7 +23453,8 @@ decide_alg (HOST_WIDE_INT count, HOST_WIDE_INT expected_size,\n   /* If expected size is not known but max size is small enough\n      so inline version is a win, set expected size into\n      the range.  */\n-  if (max > 1 && (unsigned HOST_WIDE_INT)max >= max_size && expected_size == -1)\n+  if (max > 1 && (unsigned HOST_WIDE_INT) max >= max_size\n+      && expected_size == -1)\n     expected_size = min_size / 2 + max_size / 2;\n \n   /* If user specified the algorithm, honnor it if possible.  */\n@@ -23752,7 +23753,7 @@ ix86_expand_set_or_movmem (rtx dst, rtx src, rtx count_exp, rtx val_exp,\n   bool noalign;\n   enum machine_mode move_mode = VOIDmode;\n   int unroll_factor = 1;\n-  /* TODO: Once vlaue ranges are available, fill in proper data.  */\n+  /* TODO: Once value ranges are available, fill in proper data.  */\n   unsigned HOST_WIDE_INT min_size = 0;\n   unsigned HOST_WIDE_INT max_size = -1;\n   unsigned HOST_WIDE_INT probable_max_size = -1;\n@@ -23967,21 +23968,19 @@ ix86_expand_set_or_movmem (rtx dst, rtx src, rtx count_exp, rtx val_exp,\n \t loop variant.  */\n       if (issetmem && epilogue_size_needed > 2 && !promoted_val)\n \tforce_loopy_epilogue = true;\n-      if (count)\n+      if ((count && count < (unsigned HOST_WIDE_INT) epilogue_size_needed)\n+\t  || max_size < (unsigned HOST_WIDE_INT) epilogue_size_needed)\n \t{\n-\t  if (count < (unsigned HOST_WIDE_INT)epilogue_size_needed)\n-\t    {\n-\t      /* If main algorithm works on QImode, no epilogue is needed.\n-\t\t For small sizes just don't align anything.  */\n-\t      if (size_needed == 1)\n-\t\tdesired_align = align;\n-\t      else\n-\t\tgoto epilogue;\n-\t    }\n+\t  /* If main algorithm works on QImode, no epilogue is needed.\n+\t     For small sizes just don't align anything.  */\n+\t  if (size_needed == 1)\n+\t    desired_align = align;\n+\t  else\n+\t    goto epilogue;\n \t}\n-      else if (min_size < (unsigned HOST_WIDE_INT)epilogue_size_needed)\n+      else if (!count\n+\t       && min_size < (unsigned HOST_WIDE_INT) epilogue_size_needed)\n \t{\n-\t  gcc_assert (max_size >= (unsigned HOST_WIDE_INT)epilogue_size_needed);\n \t  label = gen_label_rtx ();\n \t  emit_cmp_and_jump_insns (count_exp,\n \t\t\t\t   GEN_INT (epilogue_size_needed),"}, {"sha": "b92f97e2b716929dce81e0cd103f44ac7a120eea", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70ec86ee185d7527b392739bf72a0f37410ed0b4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70ec86ee185d7527b392739bf72a0f37410ed0b4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=70ec86ee185d7527b392739bf72a0f37410ed0b4", "patch": "@@ -1,5 +1,8 @@\n 2013-11-26  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/59229\n+\t* gcc.c-torture/execute/pr59229.c: New test.\n+\n \tPR rtl-optimization/59166\n \t* gcc.dg/torture/pr59166.c: New test.\n "}, {"sha": "d2a776778de37d5130c5c74089a5ec72a6a4c921", "filename": "gcc/testsuite/gcc.c-torture/execute/pr59229.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70ec86ee185d7527b392739bf72a0f37410ed0b4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr59229.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70ec86ee185d7527b392739bf72a0f37410ed0b4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr59229.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr59229.c?ref=70ec86ee185d7527b392739bf72a0f37410ed0b4", "patch": "@@ -0,0 +1,29 @@\n+int i;\n+\n+__attribute__((noinline, noclone)) void\n+bar (char *p)\n+{\n+  if (i < 1 || i > 6)\n+    __builtin_abort ();\n+  if (__builtin_memcmp (p, \"abcdefg\", i + 1) != 0)\n+    __builtin_abort ();\n+  __builtin_memset (p, ' ', 7);\n+}\n+\n+__attribute__((noinline, noclone)) void\n+foo (char *p, unsigned long l)\n+{\n+  if (l < 1 || l > 6)\n+    return;\n+  char buf[7];\n+  __builtin_memcpy (buf, p, l + 1);\n+  bar (buf);\n+}\n+\n+int\n+main ()\n+{\n+  for (i = 0; i < 16; i++)\n+    foo (\"abcdefghijklmnop\", i);\n+  return 0;\n+}"}]}