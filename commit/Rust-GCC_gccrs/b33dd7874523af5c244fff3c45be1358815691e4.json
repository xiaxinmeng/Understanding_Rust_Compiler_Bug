{"sha": "b33dd7874523af5c244fff3c45be1358815691e4", "node_id": "C_kwDOANBUbNoAKGIzM2RkNzg3NDUyM2FmNWMyNDRmZmYzYzQ1YmUxMzU4ODE1NjkxZTQ", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-07-06T11:27:45Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-07-06T11:27:45Z"}, "message": "analyzer: fix uninit false positive with -ftrivial-auto-var-init= [PR106204]\n\n-fanalyzer handles -ftrivial-auto-var-init= by special-casing\nIFN_DEFERRED_INIT to be a no-op, so that e.g.:\n\n  len_2 = .DEFERRED_INIT (4, 2, &\"len\"[0]);\n\nis treated as a no-op, so that len_2 is still uninitialized after the\nstmt.\n\nPR analyzer/106204 reports that -fanalyzer gives false positives from\n-Wanalyzer-use-of-uninitialized-value on locals that have their address\ntaken, due to e.g.:\n\n  _1 = .DEFERRED_INIT (4, 2, &\"len\"[0]);\n  len = _1;\n\nwhere -fanalyzer leaves _1 uninitialized, and then complains about\nthe assignment to \"len\".\n\nFixed thusly by suppressing the warning when assigning from such SSA\nnames.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/106204\n\t* region-model.cc (within_short_circuited_stmt_p): Move extraction\n\tof assign_stmt to caller.\n\t(due_to_ifn_deferred_init_p): New.\n\t(region_model::check_for_poison): Move extraction of assign_stmt\n\tfrom within_short_circuited_stmt_p to here.  Share logic with\n\tcall to due_to_ifn_deferred_init_p.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/106204\n\t* gcc.dg/analyzer/torture/uninit-pr106204.c: New test.\n\t* gcc.dg/analyzer/uninit-pr106204.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "589743681a94e8b48be0a8e7d034ed8bbc977091", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/589743681a94e8b48be0a8e7d034ed8bbc977091"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b33dd7874523af5c244fff3c45be1358815691e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b33dd7874523af5c244fff3c45be1358815691e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b33dd7874523af5c244fff3c45be1358815691e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b33dd7874523af5c244fff3c45be1358815691e4/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "656c0212909bc91b1025aa12774d981adb531b4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/656c0212909bc91b1025aa12774d981adb531b4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/656c0212909bc91b1025aa12774d981adb531b4c"}], "stats": {"total": 99, "additions": 86, "deletions": 13}, "files": [{"sha": "8b7b4e1f6973e83a0a2c5373a5e3317b689e4fc5", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 56, "deletions": 13, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b33dd7874523af5c244fff3c45be1358815691e4/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b33dd7874523af5c244fff3c45be1358815691e4/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=b33dd7874523af5c244fff3c45be1358815691e4", "patch": "@@ -896,17 +896,9 @@ region_model::get_gassign_result (const gassign *assign,\n \n static bool\n within_short_circuited_stmt_p (const region_model *model,\n-\t\t\t       region_model_context *ctxt)\n+\t\t\t       const gassign *assign_stmt)\n {\n-  gcc_assert (ctxt);\n-  const gimple *curr_stmt = ctxt->get_stmt ();\n-  if (curr_stmt == NULL)\n-    return false;\n-\n   /* We must have an assignment to a temporary of _Bool type.  */\n-  const gassign *assign_stmt = dyn_cast <const gassign *> (curr_stmt);\n-  if (!assign_stmt)\n-    return false;\n   tree lhs = gimple_assign_lhs (assign_stmt);\n   if (TREE_TYPE (lhs) != boolean_type_node)\n     return false;\n@@ -959,6 +951,47 @@ within_short_circuited_stmt_p (const region_model *model,\n   return true;\n }\n \n+/* Workaround for discarding certain false positives from\n+   -Wanalyzer-use-of-uninitialized-value\n+   seen with -ftrivial-auto-var-init=.\n+\n+   -ftrivial-auto-var-init= will generate calls to IFN_DEFERRED_INIT.\n+\n+   If the address of the var is taken, gimplification will give us\n+   something like:\n+\n+     _1 = .DEFERRED_INIT (4, 2, &\"len\"[0]);\n+     len = _1;\n+\n+   The result of DEFERRED_INIT will be an uninit value; we don't\n+   want to emit a false positive for \"len = _1;\"\n+\n+   Return true if ASSIGN_STMT is such a stmt.  */\n+\n+static bool\n+due_to_ifn_deferred_init_p (const gassign *assign_stmt)\n+\n+{\n+  /* We must have an assignment to a decl from an SSA name that's the\n+     result of a IFN_DEFERRED_INIT call.  */\n+  if (gimple_assign_rhs_code (assign_stmt) != SSA_NAME)\n+    return false;\n+  tree lhs = gimple_assign_lhs (assign_stmt);\n+  if (TREE_CODE (lhs) != VAR_DECL)\n+    return false;\n+  tree rhs = gimple_assign_rhs1 (assign_stmt);\n+  if (TREE_CODE (rhs) != SSA_NAME)\n+    return false;\n+  const gimple *def_stmt = SSA_NAME_DEF_STMT (rhs);\n+  const gcall *call = dyn_cast <const gcall *> (def_stmt);\n+  if (!call)\n+    return false;\n+  if (gimple_call_internal_p (call)\n+      && gimple_call_internal_fn (call) == IFN_DEFERRED_INIT)\n+    return true;\n+  return false;\n+}\n+\n /* Check for SVAL being poisoned, adding a warning to CTXT.\n    Return SVAL, or, if a warning is added, another value, to avoid\n    repeatedly complaining about the same poisoned value in followup code.  */\n@@ -982,10 +1015,20 @@ region_model::check_for_poison (const svalue *sval,\n \t  && is_empty_type (sval->get_type ()))\n \treturn sval;\n \n-      /* Special case to avoid certain false positives.  */\n-      if (pkind == POISON_KIND_UNINIT\n-\t  && within_short_circuited_stmt_p (this, ctxt))\n-\t  return sval;\n+      if (pkind == POISON_KIND_UNINIT)\n+\tif (const gimple *curr_stmt = ctxt->get_stmt ())\n+\t  if (const gassign *assign_stmt\n+\t\t= dyn_cast <const gassign *> (curr_stmt))\n+\t    {\n+\t      /* Special case to avoid certain false positives.  */\n+\t      if (within_short_circuited_stmt_p (this, assign_stmt))\n+\t\treturn sval;\n+\n+\t      /* Special case to avoid false positive on\n+\t\t -ftrivial-auto-var-init=.  */\n+\t      if (due_to_ifn_deferred_init_p (assign_stmt))\n+\t\treturn sval;\n+\t  }\n \n       /* If we have an SSA name for a temporary, we don't want to print\n \t '<unknown>'."}, {"sha": "25edcf5eecc6b10bf9f94c41f427dd01185b1851", "filename": "gcc/testsuite/gcc.dg/analyzer/torture/uninit-pr106204.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b33dd7874523af5c244fff3c45be1358815691e4/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Funinit-pr106204.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b33dd7874523af5c244fff3c45be1358815691e4/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Funinit-pr106204.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Funinit-pr106204.c?ref=b33dd7874523af5c244fff3c45be1358815691e4", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-additional-options \"-ftrivial-auto-var-init=zero\" } */\n+\n+int foo(unsigned *len);\n+int test_1()\n+{\n+ unsigned len; /* { dg-bogus \"uninit\" } */\n+ int rc;\n+\n+ rc = foo(&len);\n+ if (!rc)\n+  rc = len;\n+ return rc;\n+}"}, {"sha": "7d7cf7bfc7e5309e8e16dfb8a6fcd3e6e5c906fe", "filename": "gcc/testsuite/gcc.dg/analyzer/uninit-pr106204.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b33dd7874523af5c244fff3c45be1358815691e4/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-pr106204.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b33dd7874523af5c244fff3c45be1358815691e4/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-pr106204.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-pr106204.c?ref=b33dd7874523af5c244fff3c45be1358815691e4", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-additional-options \"-ftrivial-auto-var-init=zero\" } */\n+\n+int foo(unsigned *len);\n+\n+/* Modified version of reproducer that does use \"len\" before init.  */\n+\n+int test_2()\n+{\n+ unsigned len;\n+ int rc;\n+\n+ rc = len; /* { dg-warning \"use of uninitialized value 'len'\" } */\n+ rc = foo(&len);\n+ if (!rc)\n+  rc = len;\n+ return rc;\n+}"}]}