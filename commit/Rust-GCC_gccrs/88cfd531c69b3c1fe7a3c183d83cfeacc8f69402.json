{"sha": "88cfd531c69b3c1fe7a3c183d83cfeacc8f69402", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhjZmQ1MzFjNjliM2MxZmU3YTNjMTgzZDgzY2ZlYWNjOGY2OTQwMg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-02-09T20:17:48Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-02-11T20:56:04Z"}, "message": "c++: Endless loop with targ deduction in member tmpl [PR95888]\n\nMy r10-7007 patch tweaked tsubst not to reduce the template level of\ntemplate parameters when tf_partial.  That caused infinite looping in\nis_specialization_of: we ended up with a class template specialization\nwhose TREE_TYPE (CLASSTYPE_TI_TEMPLATE (t)) == t, so the second for\nloop in is_specialization_of never finished.\n\nThere's a lot going on in this test, but essentially: the template fn\nhere has two template parameters, we call it with one explicitly\nprovided, the other one has to be deduced.  So we'll find ourselves\nin fn_type_unification which uses tf_partial when tsubsting the\n*explicit* template arguments into the function type.  That leads to\ntsubstituting the return type, C<T>.  C is a member template; its\nmost general template is\n\n  template<class U> template<class V> struct B<U>::C\n\nwe figure out (tsubst_template_args) that the template argument list\nis <int, int>.  They come from different levels, one comes from B<int>,\nthe other one from fn<int>.\n\nSo now we lookup_template_class to see if we have C<int, int>.  We\ndo the\n  /* This is a full instantiation of a member template.  Find\n     the partial instantiation of which this is an instance.  */\n  TREE_VEC_LENGTH (arglist)--;\n  // arglist is now <int>, not <int, int>\n  found = tsubst (gen_tmpl, arglist, complain, NULL_TREE);\n  TREE_VEC_LENGTH (arglist)++;\n\nmagic which is looking for the partial instantiation, in this case,\nthat would be template<class V> struct B<int>::C.  Note we're still\nin a tf_partial context!  So the tsubst_template_args in the tsubst\n(which tries to substitute <int> into <U, V>) returns <int, V>, but\nV's template level hasn't been reduced!  After tsubst_template_args,\ntsubst_template_decl looks to see if we already have this specialization:\n\n  // t = template_decl C\n  // full_args = <int, V>\n  spec = retrieve_specialization (t, full_args, hash);\n\nbut doesn't find the one we created a while ago, when processing\nB<int> b; in the test, because V's levels don't match.  Whereupon\ntsubst_template_decl creates a new TEMPLATE_DECL, one that leads to\nthe infinite looping problem.\n\nFixed by using tf_none when looking for an existing partial instantiation.\n\nIt also occurred to me that I should be able to trigger a similar\nproblem with 'auto', since r10-7007 removed an is_auto check.  And lo,\nI constructed deduce10.C which exhibits the same issue with pre-r10-7007\ncompilers.  This patch fixes that problem as well.  I'm ecstatic.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/95888\n\t* pt.c (lookup_template_class_1): Pass tf_none to tsubst when looking\n\tfor the partial instantiation.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/95888\n\t* g++.dg/template/deduce10.C: New test.\n\t* g++.dg/template/deduce9.C: New test.", "tree": {"sha": "a32096f2da11a28620b443a06ad73e0f6a3041b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a32096f2da11a28620b443a06ad73e0f6a3041b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88cfd531c69b3c1fe7a3c183d83cfeacc8f69402", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88cfd531c69b3c1fe7a3c183d83cfeacc8f69402", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88cfd531c69b3c1fe7a3c183d83cfeacc8f69402", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88cfd531c69b3c1fe7a3c183d83cfeacc8f69402/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2432c47970024db6410708b582a901259dabaae1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2432c47970024db6410708b582a901259dabaae1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2432c47970024db6410708b582a901259dabaae1"}], "stats": {"total": 58, "additions": 57, "deletions": 1}, "files": [{"sha": "37c45a297c2ff7be84265e6ec9b426393eda3fcf", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88cfd531c69b3c1fe7a3c183d83cfeacc8f69402/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88cfd531c69b3c1fe7a3c183d83cfeacc8f69402/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=88cfd531c69b3c1fe7a3c183d83cfeacc8f69402", "patch": "@@ -10137,7 +10137,17 @@ lookup_template_class_1 (tree d1, tree arglist, tree in_decl, tree context,\n \t  /* Temporarily reduce by one the number of levels in the ARGLIST\n \t     so as to avoid comparing the last set of arguments.  */\n \t  TREE_VEC_LENGTH (arglist)--;\n-\t  found = tsubst (gen_tmpl, arglist, complain, NULL_TREE);\n+\t  /* We don't use COMPLAIN in the following call because this isn't\n+\t     the immediate context of deduction.  For instance, tf_partial\n+\t     could be set here as we might be at the beginning of template\n+\t     argument deduction when any explicitly specified template\n+\t     arguments are substituted into the function type.  tf_partial\n+\t     could lead into trouble because we wouldn't find the partial\n+\t     instantiation that might have been created outside tf_partial\n+\t     context, because the levels of template parameters wouldn't\n+\t     match, because in a tf_partial context, tsubst doesn't reduce\n+\t     TEMPLATE_PARM_LEVEL.  */\n+\t  found = tsubst (gen_tmpl, arglist, tf_none, NULL_TREE);\n \t  TREE_VEC_LENGTH (arglist)++;\n \t  /* FOUND is either a proper class type, or an alias\n \t     template specialization.  In the later case, it's a"}, {"sha": "165ff195728ed8e4dcb3b2459d12b84d2b502d6c", "filename": "gcc/testsuite/g++.dg/template/deduce10.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88cfd531c69b3c1fe7a3c183d83cfeacc8f69402/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdeduce10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88cfd531c69b3c1fe7a3c183d83cfeacc8f69402/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdeduce10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdeduce10.C?ref=88cfd531c69b3c1fe7a3c183d83cfeacc8f69402", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/95888\n+// { dg-do compile { target c++17 } }\n+\n+template <typename T> class A {\n+  A(int, int);\n+  template <typename> friend class A;\n+  friend T;\n+};\n+\n+template<typename U> struct B {\n+  template<auto V> struct C {\n+    A<B> begin() { return {1, 0}; }\n+  };\n+  template<auto Z, int *P = nullptr>\n+  C<Z> fn();\n+};\n+\n+int\n+main ()\n+{\n+  B<int> b;\n+  b.fn<1>().begin();\n+}"}, {"sha": "5f55a84ed0a29163ecb20a00af924dfb7af6b666", "filename": "gcc/testsuite/g++.dg/template/deduce9.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88cfd531c69b3c1fe7a3c183d83cfeacc8f69402/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdeduce9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88cfd531c69b3c1fe7a3c183d83cfeacc8f69402/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdeduce9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdeduce9.C?ref=88cfd531c69b3c1fe7a3c183d83cfeacc8f69402", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/95888\n+// { dg-do compile { target c++11 } }\n+\n+template <typename T> class A {\n+  A(int, int);\n+  template <typename> friend class A;\n+  friend T;\n+};\n+\n+template<typename U> struct B {\n+  template<typename V> struct C {\n+    A<B> begin() { return {1, 0}; }\n+  };\n+  template<typename Z, int *P = nullptr>\n+  C<Z> fn();\n+};\n+\n+int\n+main ()\n+{\n+  B<int> b;\n+  b.fn<int>().begin();\n+}"}]}