{"sha": "ce7de04c2b23c8f47288624006539204c70eaccd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2U3ZGUwNGMyYjIzYzhmNDcyODg2MjQwMDY1MzkyMDRjNzBlYWNjZA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2000-04-24T08:23:08Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2000-04-24T08:23:08Z"}, "message": "loop.c (strength_reduce): Simplify test to INSN_P.\n\n\t* loop.c (strength_reduce): Simplify test to INSN_P.\n\t(record_giv): Attempt to simplify the add value, use CONSTANT_P\n\texpressions instead of CONST_INT.\n\t(express_from_1): Likewise.\n\nFrom-SVN: r33375", "tree": {"sha": "05b581c0420b15c7150120e112621f282ac4f44b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05b581c0420b15c7150120e112621f282ac4f44b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce7de04c2b23c8f47288624006539204c70eaccd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce7de04c2b23c8f47288624006539204c70eaccd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce7de04c2b23c8f47288624006539204c70eaccd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce7de04c2b23c8f47288624006539204c70eaccd/comments", "author": null, "committer": null, "parents": [{"sha": "da668e9c924505e5a4531dc69e40f916b988c73a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da668e9c924505e5a4531dc69e40f916b988c73a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da668e9c924505e5a4531dc69e40f916b988c73a"}], "stats": {"total": 36, "additions": 26, "deletions": 10}, "files": [{"sha": "253a559d8ab8a34d2645ae475ff50aacd041b3e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce7de04c2b23c8f47288624006539204c70eaccd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce7de04c2b23c8f47288624006539204c70eaccd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ce7de04c2b23c8f47288624006539204c70eaccd", "patch": "@@ -1,3 +1,10 @@\n+Mon Apr 24 10:19:48 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n+\n+\t* loop.c (strength_reduce): Simplify test to INSN_P.\n+\t(record_giv): Attempt to simplify the add value, use CONSTANT_P\n+\texpressions instead of CONST_INT.\n+\t(express_from_1): Likewise.\n+\n 2000-04-24  Mark Mitchell  <mark@codesourcery.com>\n \n \t* regs.h (reg_n_max): Don't declare."}, {"sha": "3a9398824ec8ccf73fed3fc993b76f7f58c3b96e", "filename": "gcc/loop.c", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce7de04c2b23c8f47288624006539204c70eaccd/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce7de04c2b23c8f47288624006539204c70eaccd/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=ce7de04c2b23c8f47288624006539204c70eaccd", "patch": "@@ -3977,8 +3977,7 @@ strength_reduce (loop, insn_count, unroll_p, bct_p)\n       if (GET_CODE (p) == CALL_INSN)\n \tcall_seen = 1;\n \n-      if (GET_CODE (p) == INSN || GET_CODE (p) == JUMP_INSN\n-\t  || GET_CODE (p) == CALL_INSN)\n+      if (INSN_P (p))\n \tnote_stores (PATTERN (p), record_initial, NULL);\n \n       /* Record any test of a biv that branches around the loop if no store\n@@ -4124,13 +4123,13 @@ strength_reduce (loop, insn_count, unroll_p, bct_p)\n \n \t\t  for (next = NEXT_INSN (dominator); ; next = NEXT_INSN (next))\n \t\t    {\n-\t\t      if ((GET_RTX_CLASS (GET_CODE (next)) == 'i'\n+\t\t      if ((INSN_P (next)\n \t\t\t   && (reg_mentioned_p (giv, PATTERN (next))\n \t\t\t       || reg_set_p (bl2->biv->src_reg, next)))\n \t\t\t  || GET_CODE (next) == JUMP_INSN)\n \t\t\tbreak;\n #ifdef HAVE_cc0\n-\t\t      if (GET_RTX_CLASS (GET_CODE (next)) != 'i'\n+\t\t      if (INSN_P (next)\n \t\t\t  || ! sets_cc0_p (PATTERN (next)))\n #endif\n \t\t\tdominator = next;\n@@ -4283,7 +4282,7 @@ strength_reduce (loop, insn_count, unroll_p, bct_p)\n \t\t   p != next->insn;\n \t\t   p = next_insn_in_loop (loop, p))\n \t\t{\n-\t\t  if (GET_RTX_CLASS (GET_CODE (p)) != 'i')\n+\t\t  if (!INSN_P (p))\n \t\t    continue;\n \t\t  if (reg_mentioned_p (old_reg, PATTERN (p)))\n \t\t    {\n@@ -5445,6 +5444,12 @@ record_giv (loop, v, insn, src_reg, dest_reg, mult_val, add_val, benefit,\n   struct induction *b;\n   struct iv_class *bl;\n   rtx set = single_set (insn);\n+  rtx temp;\n+\n+  /* Attempt to prove constantness of the values.  */\n+  temp = simplify_rtx (add_val);\n+  if (temp)\n+    add_val = temp;\n \n   v->insn = insn;\n   v->src_reg = src_reg;\n@@ -5603,11 +5608,11 @@ record_giv (loop, v, insn, src_reg, dest_reg, mult_val, add_val, benefit,\n     v->no_const_addval = 1;\n     if (tem == const0_rtx)\n       ;\n-    else if (GET_CODE (tem) == CONST_INT)\n+    else if (CONSTANT_P (add_val))\n       v->no_const_addval = 0;\n-    else if (GET_CODE (tem) == PLUS)\n+    if (GET_CODE (tem) == PLUS)\n       {\n-        while (1)\n+\twhile (1)\n \t  {\n \t    if (GET_CODE (XEXP (tem, 0)) == PLUS)\n \t      tem = XEXP (tem, 0);\n@@ -5616,8 +5621,8 @@ record_giv (loop, v, insn, src_reg, dest_reg, mult_val, add_val, benefit,\n \t    else\n \t      break;\n \t  }\n-        if (GET_CODE (XEXP (tem, 1)) == CONST_INT)\n-          v->no_const_addval = 0;\n+\tif (CONSTANT_P (XEXP (tem, 1)))\n+\t  v->no_const_addval = 0;\n       }\n   }\n \n@@ -6869,6 +6874,10 @@ express_from_1 (a, b, mult)\n     {\n       return plus_constant (b, -INTVAL (a) * INTVAL (mult));\n     }\n+  else if (CONSTANT_P (a))\n+    {\n+      return simplify_gen_binary (MINUS, GET_MODE (b), const0_rtx, a);\n+    }\n   else if (GET_CODE (b) == PLUS)\n     {\n       if (rtx_equal_p (a, XEXP (b, 0)))"}]}