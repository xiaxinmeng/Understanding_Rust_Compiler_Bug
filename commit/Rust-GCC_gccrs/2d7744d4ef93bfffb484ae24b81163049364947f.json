{"sha": "2d7744d4ef93bfffb484ae24b81163049364947f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ3NzQ0ZDRlZjkzYmZmZmI0ODRhZTI0YjgxMTYzMDQ5MzY0OTQ3Zg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-08-03T11:52:00Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-08-03T11:52:00Z"}, "message": "re PR sanitizer/81148 (UBSAN: two more false positives)\n\n2017-08-03 Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/81148\n\t* fold-const.c (split_tree): Add minus_var and minus_con\n\targuments, remove unused loc arg.  Never generate NEGATE_EXPRs\n\there but always use minus_*.\n\t(associate_trees): Assert we never associate with MINUS_EXPR\n\tand NULL first operand.  Do not recurse for PLUS_EXPR operands\n\twhen associating as MINUS_EXPR either.\n\t(fold_binary_loc): Track minus_var and minus_con.\n\n\t* c-c++-common/ubsan/pr81148.c: New testcase.\n\nFrom-SVN: r250853", "tree": {"sha": "7b7a05c5b0ce10c4c4b642fa0c254dc994507349", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b7a05c5b0ce10c4c4b642fa0c254dc994507349"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d7744d4ef93bfffb484ae24b81163049364947f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d7744d4ef93bfffb484ae24b81163049364947f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d7744d4ef93bfffb484ae24b81163049364947f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d7744d4ef93bfffb484ae24b81163049364947f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3cd361256dc895fb91f5a8d248a5bbc89457621b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cd361256dc895fb91f5a8d248a5bbc89457621b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cd361256dc895fb91f5a8d248a5bbc89457621b"}], "stats": {"total": 164, "additions": 112, "deletions": 52}, "files": [{"sha": "d660e83602f06df42e48a361f1eea2b970caf62e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d7744d4ef93bfffb484ae24b81163049364947f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d7744d4ef93bfffb484ae24b81163049364947f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d7744d4ef93bfffb484ae24b81163049364947f", "patch": "@@ -1,3 +1,14 @@\n+2017-08-03 Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/81148\n+\t* fold-const.c (split_tree): Add minus_var and minus_con\n+\targuments, remove unused loc arg.  Never generate NEGATE_EXPRs\n+\there but always use minus_*.\n+\t(associate_trees): Assert we never associate with MINUS_EXPR\n+\tand NULL first operand.  Do not recurse for PLUS_EXPR operands\n+\twhen associating as MINUS_EXPR either.\n+\t(fold_binary_loc): Track minus_var and minus_con.\n+\n 2017-08-03  Tom de Vries  <tom@codesourcery.com>\n \n \tPR lto/81430"}, {"sha": "ed6c289a64b535ba6952ce78097fc6ea9bce75f0", "filename": "gcc/fold-const.c", "status": "modified", "additions": 87, "deletions": 52, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d7744d4ef93bfffb484ae24b81163049364947f/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d7744d4ef93bfffb484ae24b81163049364947f/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=2d7744d4ef93bfffb484ae24b81163049364947f", "patch": "@@ -108,8 +108,6 @@ enum comparison_code {\n \n static bool negate_expr_p (tree);\n static tree negate_expr (tree);\n-static tree split_tree (location_t, tree, tree, enum tree_code,\n-\t\t\ttree *, tree *, tree *, int);\n static tree associate_trees (location_t, tree, tree, enum tree_code, tree);\n static enum comparison_code comparison_to_compcode (enum tree_code);\n static enum tree_code compcode_to_comparison (enum comparison_code);\n@@ -775,12 +773,14 @@ negate_expr (tree t)\n    same type as IN, but they will have the same signedness and mode.  */\n \n static tree\n-split_tree (location_t loc, tree in, tree type, enum tree_code code,\n-\t    tree *conp, tree *litp, tree *minus_litp, int negate_p)\n+split_tree (tree in, tree type, enum tree_code code,\n+\t    tree *minus_varp, tree *conp, tree *minus_conp,\n+\t    tree *litp, tree *minus_litp, int negate_p)\n {\n   tree var = 0;\n-\n+  *minus_varp = 0;\n   *conp = 0;\n+  *minus_conp = 0;\n   *litp = 0;\n   *minus_litp = 0;\n \n@@ -834,27 +834,19 @@ split_tree (location_t loc, tree in, tree type, enum tree_code code,\n       if (neg_litp_p)\n \t*minus_litp = *litp, *litp = 0;\n       if (neg_conp_p && *conp)\n-\t{\n-\t  /* Convert to TYPE before negating.  */\n-\t  *conp = fold_convert_loc (loc, type, *conp);\n-\t  *conp = negate_expr (*conp);\n-\t}\n+\t*minus_conp = *conp, *conp = 0;\n       if (neg_var_p && var)\n-\t{\n-\t  /* Convert to TYPE before negating.  */\n-\t  var = fold_convert_loc (loc, type, var);\n-\t  var = negate_expr (var);\n-\t}\n+\t*minus_varp = var, var = 0;\n     }\n   else if (TREE_CONSTANT (in))\n     *conp = in;\n   else if (TREE_CODE (in) == BIT_NOT_EXPR\n \t   && code == PLUS_EXPR)\n     {\n-      /* -X - 1 is folded to ~X, undo that here.  Do _not_ do this\n-         when IN is constant.  Convert to TYPE before negating.  */\n-      *minus_litp = build_one_cst (type);\n-      var = negate_expr (fold_convert_loc (loc, type, TREE_OPERAND (in, 0)));\n+      /* -1 - X is folded to ~X, undo that here.  Do _not_ do this\n+         when IN is constant.  */\n+      *litp = build_minus_one_cst (type);\n+      *minus_varp = TREE_OPERAND (in, 0);\n     }\n   else\n     var = in;\n@@ -866,17 +858,13 @@ split_tree (location_t loc, tree in, tree type, enum tree_code code,\n       else if (*minus_litp)\n \t*litp = *minus_litp, *minus_litp = 0;\n       if (*conp)\n-\t{\n-\t  /* Convert to TYPE before negating.  */\n-\t  *conp = fold_convert_loc (loc, type, *conp);\n-\t  *conp = negate_expr (*conp);\n-\t}\n+\t*minus_conp = *conp, *conp = 0;\n+      else if (*minus_conp)\n+\t*conp = *minus_conp, *minus_conp = 0;\n       if (var)\n-\t{\n-\t  /* Convert to TYPE before negating.  */\n-\t  var = fold_convert_loc (loc, type, var);\n-\t  var = negate_expr (var);\n-\t}\n+\t*minus_varp = var, var = 0;\n+      else if (*minus_varp)\n+\tvar = *minus_varp, *minus_varp = 0;\n     }\n \n   if (*litp\n@@ -898,14 +886,18 @@ static tree\n associate_trees (location_t loc, tree t1, tree t2, enum tree_code code, tree type)\n {\n   if (t1 == 0)\n-    return t2;\n+    {\n+      gcc_assert (t2 == 0 || code != MINUS_EXPR);\n+      return t2;\n+    }\n   else if (t2 == 0)\n     return t1;\n \n   /* If either input is CODE, a PLUS_EXPR, or a MINUS_EXPR, don't\n      try to fold this since we will have infinite recursion.  But do\n      deal with any NEGATE_EXPRs.  */\n   if (TREE_CODE (t1) == code || TREE_CODE (t2) == code\n+      || TREE_CODE (t1) == PLUS_EXPR || TREE_CODE (t2) == PLUS_EXPR\n       || TREE_CODE (t1) == MINUS_EXPR || TREE_CODE (t2) == MINUS_EXPR)\n     {\n       if (code == PLUS_EXPR)\n@@ -9560,8 +9552,8 @@ fold_binary_loc (location_t loc,\n       if ((! FLOAT_TYPE_P (type) || flag_associative_math)\n \t  && !TYPE_SATURATING (type))\n \t{\n-\t  tree var0, con0, lit0, minus_lit0;\n-\t  tree var1, con1, lit1, minus_lit1;\n+\t  tree var0, minus_var0, con0, minus_con0, lit0, minus_lit0;\n+\t  tree var1, minus_var1, con1, minus_con1, lit1, minus_lit1;\n \t  tree atype = type;\n \t  bool ok = true;\n \n@@ -9570,10 +9562,12 @@ fold_binary_loc (location_t loc,\n \t     then the result with variables.  This increases the chances of\n \t     literals being recombined later and of generating relocatable\n \t     expressions for the sum of a constant and literal.  */\n-\t  var0 = split_tree (loc, arg0, type, code,\n-\t\t\t     &con0, &lit0, &minus_lit0, 0);\n-\t  var1 = split_tree (loc, arg1, type, code,\n-\t\t\t     &con1, &lit1, &minus_lit1, code == MINUS_EXPR);\n+\t  var0 = split_tree (arg0, type, code,\n+\t\t\t     &minus_var0, &con0, &minus_con0,\n+\t\t\t     &lit0, &minus_lit0, 0);\n+\t  var1 = split_tree (arg1, type, code,\n+\t\t\t     &minus_var1, &con1, &minus_con1,\n+\t\t\t     &lit1, &minus_lit1, code == MINUS_EXPR);\n \n \t  /* Recombine MINUS_EXPR operands by using PLUS_EXPR.  */\n \t  if (code == MINUS_EXPR)\n@@ -9600,6 +9594,8 @@ fold_binary_loc (location_t loc,\n \t    {\n \t      if (var0 && var1)\n \t\t{\n+\t\t  /* ???  If split_tree would handle NEGATE_EXPR we could\n+\t\t     simplify this down to the var0/minus_var1 cases.  */\n \t\t  tree tmp0 = var0;\n \t\t  tree tmp1 = var1;\n \t\t  bool one_neg = false;\n@@ -9630,22 +9626,46 @@ fold_binary_loc (location_t loc,\n \t\t      || !operand_equal_p (tmp0, tmp1, 0))\n \t\t    ok = false;\n \t\t}\n+\t      else if ((var0 && minus_var1\n+\t\t\t&& ! operand_equal_p (var0, minus_var1, 0))\n+\t\t       || (minus_var0 && var1\n+\t\t\t   && ! operand_equal_p (minus_var0, var1, 0)))\n+\t\tok = false;\n \t    }\n \n \t  /* Only do something if we found more than two objects.  Otherwise,\n \t     nothing has changed and we risk infinite recursion.  */\n \t  if (ok\n \t      && (2 < ((var0 != 0) + (var1 != 0)\n+\t\t       + (minus_var0 != 0) + (minus_var1 != 0)\n \t\t       + (con0 != 0) + (con1 != 0)\n+\t\t       + (minus_con0 != 0) + (minus_con1 != 0)\n \t\t       + (lit0 != 0) + (lit1 != 0)\n \t\t       + (minus_lit0 != 0) + (minus_lit1 != 0))))\n \t    {\n \t      var0 = associate_trees (loc, var0, var1, code, atype);\n+\t      minus_var0 = associate_trees (loc, minus_var0, minus_var1,\n+\t\t\t\t\t    code, atype);\n \t      con0 = associate_trees (loc, con0, con1, code, atype);\n+\t      minus_con0 = associate_trees (loc, minus_con0, minus_con1,\n+\t\t\t\t\t    code, atype);\n \t      lit0 = associate_trees (loc, lit0, lit1, code, atype);\n \t      minus_lit0 = associate_trees (loc, minus_lit0, minus_lit1,\n \t\t\t\t\t    code, atype);\n \n+\t      if (minus_var0 && var0)\n+\t\t{\n+\t\t  var0 = associate_trees (loc, var0, minus_var0,\n+\t\t\t\t\t  MINUS_EXPR, atype);\n+\t\t  minus_var0 = 0;\n+\t\t}\n+\t      if (minus_con0 && con0)\n+\t\t{\n+\t\t  con0 = associate_trees (loc, con0, minus_con0,\n+\t\t\t\t\t  MINUS_EXPR, atype);\n+\t\t  minus_con0 = 0;\n+\t\t}\n+\n \t      /* Preserve the MINUS_EXPR if the negative part of the literal is\n \t\t greater than the positive part.  Otherwise, the multiplicative\n \t\t folding code (i.e extract_muldiv) may be fooled in case\n@@ -9655,7 +9675,9 @@ fold_binary_loc (location_t loc,\n \t\t{\n \t\t  if (TREE_CODE (lit0) == INTEGER_CST\n \t\t      && TREE_CODE (minus_lit0) == INTEGER_CST\n-\t\t      && tree_int_cst_lt (lit0, minus_lit0))\n+\t\t      && tree_int_cst_lt (lit0, minus_lit0)\n+\t\t      /* But avoid ending up with only negated parts.  */\n+\t\t      && (var0 || con0))\n \t\t    {\n \t\t      minus_lit0 = associate_trees (loc, minus_lit0, lit0,\n \t\t\t\t\t\t    MINUS_EXPR, atype);\n@@ -9674,25 +9696,38 @@ fold_binary_loc (location_t loc,\n \t\t  || (minus_lit0 && TREE_OVERFLOW_P (minus_lit0)))\n \t\treturn NULL_TREE;\n \n-\t      if (minus_lit0)\n+\t      /* Eliminate lit0 and minus_lit0 to con0 and minus_con0. */\n+\t      con0 = associate_trees (loc, con0, lit0, code, atype);\n+\t      lit0 = 0;\n+\t      minus_con0 = associate_trees (loc, minus_con0, minus_lit0,\n+\t\t\t\t\t    code, atype);\n+\t      minus_lit0 = 0;\n+\n+\t      /* Eliminate minus_con0.  */\n+\t      if (minus_con0)\n \t\t{\n-\t\t  if (con0 == 0)\n-\t\t    return\n-\t\t      fold_convert_loc (loc, type,\n-\t\t\t\t\tassociate_trees (loc, var0, minus_lit0,\n-\t\t\t\t\t\t\t MINUS_EXPR, atype));\n+\t\t  if (con0)\n+\t\t    con0 = associate_trees (loc, con0, minus_con0,\n+\t\t\t\t\t    MINUS_EXPR, atype);\n+\t\t  else if (var0)\n+\t\t    var0 = associate_trees (loc, var0, minus_con0,\n+\t\t\t\t\t    MINUS_EXPR, atype);\n \t\t  else\n-\t\t    {\n-\t\t      con0 = associate_trees (loc, con0, minus_lit0,\n-\t\t\t\t\t      MINUS_EXPR, atype);\n-\t\t      return\n-\t\t\tfold_convert_loc (loc, type,\n-\t\t\t\t\t  associate_trees (loc, var0, con0,\n-\t\t\t\t\t\t\t   PLUS_EXPR, atype));\n-\t\t    }\n+\t\t    gcc_unreachable ();\n+\t\t  minus_con0 = 0;\n+\t\t}\n+\n+\t      /* Eliminate minus_var0.  */\n+\t      if (minus_var0)\n+\t\t{\n+\t\t  if (con0)\n+\t\t    con0 = associate_trees (loc, con0, minus_var0,\n+\t\t\t\t\t    MINUS_EXPR, atype);\n+\t\t  else\n+\t\t    gcc_unreachable ();\n+\t\t  minus_var0 = 0;\n \t\t}\n \n-\t      con0 = associate_trees (loc, con0, lit0, code, atype);\n \t      return\n \t\tfold_convert_loc (loc, type, associate_trees (loc, var0, con0,\n \t\t\t\t\t\t\t      code, atype));"}, {"sha": "3613d165232a2ea17243113d58f145dfae87695a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d7744d4ef93bfffb484ae24b81163049364947f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d7744d4ef93bfffb484ae24b81163049364947f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2d7744d4ef93bfffb484ae24b81163049364947f", "patch": "@@ -1,3 +1,8 @@\n+2017-08-03 Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/81148\n+\t* c-c++-common/ubsan/pr81148.c: New testcase.\n+\n 2017-08-03  Tom de Vries  <tom@codesourcery.com>\n \n \tPR target/81662"}, {"sha": "f2d46c8dc56893ba864cd754149e4e5c6559edc8", "filename": "gcc/testsuite/c-c++-common/ubsan/pr81148.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d7744d4ef93bfffb484ae24b81163049364947f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr81148.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d7744d4ef93bfffb484ae24b81163049364947f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr81148.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr81148.c?ref=2d7744d4ef93bfffb484ae24b81163049364947f", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=undefined -fsanitize-undefined-trap-on-error\" } */\n+\n+int x = -106;\n+int main()\n+{\n+  // -123 - (0x8000000000000000 - -1)\n+  return (-123 - ((9223372036854775806LL ^ ~(x && 1)) - -1)) == 0;\n+}"}]}