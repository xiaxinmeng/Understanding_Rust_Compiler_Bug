{"sha": "b9ec846384e6908fe4d9aff0703c5ae320d3f366", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjllYzg0NjM4NGU2OTA4ZmU0ZDlhZmYwNzAzYzVhZTMyMGQzZjM2Ng==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-15T10:28:02Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-15T10:28:02Z"}, "message": "[multiple changes]\n\n2013-10-15  Tristan Gingold  <gingold@adacore.com>\n\n\t* adaint.c (__gnat_get_executable_load_address): Remove AIX\n\tspecific code.\n\n2013-10-15  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_aggr.adb (Aggr_Size_OK): Refine criteria to better handle\n\tlarge static aggregates with static record components, to avoid\n\tgenerating a large number of asignments.  Conversely, improve\n\thandling of aggregates initialized by a single association,\n\twhich are most efficiently implemented with a loop.\n\n2013-10-15  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_prag.adb (Analyze_Input_Item): Emit an\n\terror when the input item comes from the related package.\n\n2013-10-15  Arnaud Charlet  <charlet@adacore.com>\n\n\t* exp_ch11.adb (Expand_Exception_Handlers): Restrict previous\n\tchange.\n\nFrom-SVN: r203593", "tree": {"sha": "1e35ec4a8dd55cd03b45f7e01b0963336d4a641c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e35ec4a8dd55cd03b45f7e01b0963336d4a641c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9ec846384e6908fe4d9aff0703c5ae320d3f366", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9ec846384e6908fe4d9aff0703c5ae320d3f366", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9ec846384e6908fe4d9aff0703c5ae320d3f366", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9ec846384e6908fe4d9aff0703c5ae320d3f366/comments", "author": null, "committer": null, "parents": [{"sha": "24f161fddabfaae005e73795c676b2701ecbef60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24f161fddabfaae005e73795c676b2701ecbef60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24f161fddabfaae005e73795c676b2701ecbef60"}], "stats": {"total": 67, "additions": 38, "deletions": 29}, "files": [{"sha": "ac5cbb6730deb5b9fa04a34bd8f03d35d5e20eb4", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9ec846384e6908fe4d9aff0703c5ae320d3f366/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9ec846384e6908fe4d9aff0703c5ae320d3f366/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b9ec846384e6908fe4d9aff0703c5ae320d3f366", "patch": "@@ -1,3 +1,26 @@\n+2013-10-15  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* adaint.c (__gnat_get_executable_load_address): Remove AIX\n+\tspecific code.\n+\n+2013-10-15  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_aggr.adb (Aggr_Size_OK): Refine criteria to better handle\n+\tlarge static aggregates with static record components, to avoid\n+\tgenerating a large number of asignments.  Conversely, improve\n+\thandling of aggregates initialized by a single association,\n+\twhich are most efficiently implemented with a loop.\n+\n+2013-10-15  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Input_Item): Emit an\n+\terror when the input item comes from the related package.\n+\n+2013-10-15  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_ch11.adb (Expand_Exception_Handlers): Restrict previous\n+\tchange.\n+\n 2013-10-14  Tristan Gingold  <gingold@adacore.com>\n \n \t* gcc-interface/gigi.h (standard_datatypes): Add"}, {"sha": "3cabec95077c88455a8300a0cdc136607f3e4343", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9ec846384e6908fe4d9aff0703c5ae320d3f366/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9ec846384e6908fe4d9aff0703c5ae320d3f366/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=b9ec846384e6908fe4d9aff0703c5ae320d3f366", "patch": "@@ -3953,8 +3953,6 @@ __gnat_cpu_set (int cpu, size_t count ATTRIBUTE_UNUSED, cpu_set_t *set)\n #include <mach-o/dyld.h>\n #elif 0 && defined (__linux__)\n #include <link.h>\n-#elif defined (_AIX)\n-#include <sys/ldr.h>\n #endif\n \n const void *\n@@ -3969,28 +3967,6 @@ __gnat_get_executable_load_address (void)\n \n   return (const void *)map->l_addr;\n \n-#elif defined (_AIX)\n-  /* Unfortunately, AIX wants to return the info for all loaded objects,\n-     so we need to increase the buffer if too small.  */\n-  size_t blen = 4096;\n-  int status;\n-\n-  while (1)\n-    {\n-      char buf[blen];\n-\n-      status = loadquery (L_GETINFO, buf, blen);\n-      if (status == 0)\n-        {\n-          struct ld_info *info = (struct ld_info *)buf;\n-          return info->ldinfo_textorg;\n-        }\n-      blen = blen * 2;\n-\n-      /* Avoid stack overflow.  */\n-      if (blen > 40 * 1024)\n-        return (const void *)-1;\n-    }\n #else\n   return NULL;\n #endif"}, {"sha": "9d72485773bac02eec686086731e2263f267184c", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9ec846384e6908fe4d9aff0703c5ae320d3f366/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9ec846384e6908fe4d9aff0703c5ae320d3f366/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=b9ec846384e6908fe4d9aff0703c5ae320d3f366", "patch": "@@ -376,7 +376,7 @@ package body Exp_Aggr is\n    --  Start of processing for Aggr_Size_OK\n \n    begin\n-      --  The normal aggregate limit is 5000, but we increase this limit to\n+      --  The normal aggregate limit is 50000, but we increase this limit to\n       --  2**24 (about 16 million) if Restrictions (No_Elaboration_Code) or\n       --  Restrictions (No_Implicit_Loops) is specified, since in either case\n       --  we are at risk of declaring the program illegal because of this\n@@ -389,10 +389,14 @@ package body Exp_Aggr is\n       --  efficient to construct a one-dimensional equivalent array with static\n       --  components.\n \n+      --  Conversely, we decrease the maximum size if none of the above\n+      --  requirements apply, and if the aggregate has a single component\n+      --  association, which will be more efficient if implemented with a loop.\n+\n       --  Finally, we use a small limit in CodePeer mode where we favor loops\n       --  instead of thousands of single assignments (from large aggregates).\n \n-      Max_Aggr_Size := 5000;\n+      Max_Aggr_Size := 50000;\n \n       if CodePeer_Mode then\n          Max_Aggr_Size := 100;\n@@ -404,6 +408,11 @@ package body Exp_Aggr is\n                  and then Static_Elaboration_Desired (Current_Scope)))\n       then\n          Max_Aggr_Size := 2 ** 24;\n+\n+      elsif No (Expressions (N))\n+        and then No (Next (First (Component_Associations (N))))\n+      then\n+         Max_Aggr_Size := 5000;\n       end if;\n \n       Siz  := Component_Count (Component_Type (Typ));"}, {"sha": "90628a05a7956724e1cb2d7a695dc6017c804fb3", "filename": "gcc/ada/exp_ch11.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9ec846384e6908fe4d9aff0703c5ae320d3f366/gcc%2Fada%2Fexp_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9ec846384e6908fe4d9aff0703c5ae320d3f366/gcc%2Fada%2Fexp_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch11.adb?ref=b9ec846384e6908fe4d9aff0703c5ae320d3f366", "patch": "@@ -1029,7 +1029,8 @@ package body Exp_Ch11 is\n                --  will insert a call to initialize the choice parameter.\n \n                if Present (Choice_Parameter (Handler))\n-                 and then Exception_Mechanism /= Back_End_Exceptions\n+                 and then (Exception_Mechanism /= Back_End_Exceptions\n+                           or else CodePeer_Mode)\n                then\n                   declare\n                      Cparm : constant Entity_Id  := Choice_Parameter (Handler);"}, {"sha": "9e0d2ede1ed468a2634707b4f4b208383f924d82", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9ec846384e6908fe4d9aff0703c5ae320d3f366/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9ec846384e6908fe4d9aff0703c5ae320d3f366/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=b9ec846384e6908fe4d9aff0703c5ae320d3f366", "patch": "@@ -2353,9 +2353,9 @@ package body Sem_Prag is\n                   if Ekind_In (Input_Id, E_Abstract_State, E_Variable) then\n \n                      --  The input cannot denote states or variables declared\n-                     --  within the visible declarations of the package.\n+                     --  within the related package.\n \n-                     if Contains (States_And_Vars, Input_Id) then\n+                     if In_Same_Code_Unit (Item, Input) then\n                         Error_Msg_Name_1 := Chars (Pack_Id);\n                         Error_Msg_NE\n                           (\"input item & cannot denote a visible variable or \""}]}