{"sha": "96867bbd6f4371fbd0049504a3c3725f6abd9fcf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY4NjdiYmQ2ZjQzNzFmYmQwMDQ5NTA0YTNjMzcyNWY2YWJkOWZjZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2009-01-08T16:01:42Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-01-08T16:01:42Z"}, "message": "re PR tree-optimization/37031 (ICE for h264ref in gather_interchange_stats with -ftree-loop-linear)\n\n\tPR tree-optimization/37031\n\t* lambda-code.c (lambda_collect_parameters): Call pointer_set_destroy\n\ton parameter_set.\n\t(build_access_matrix): Reserve correct size for AM_MATRIX vector,\n\tallocate it using gc instead of heap, use VEC_quick_push instead of\n\tVEC_safe_push.\n\t* graphite.c (build_access_matrix): Allocate AM_MATRIX vector using gc\n\tinstead of heap, use VEC_quick_push instead of VEC_safe_push.\n\t* tree-data-ref.h (struct access_matrix): Change matrix to gc\n\tallocated vector from heap allocated.\n\t* lambda.h: Add DEF_VEC_ALLOC_P for gc allocated lambda_vector.\n\t* tree-loop-linear.c (linear_transform_loops): Allocate nest\n\tvector only after perfect_loop_nest_depth call.\n\nFrom-SVN: r143188", "tree": {"sha": "bef5a692dfc16f14cd02d119206305f87c9a97ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bef5a692dfc16f14cd02d119206305f87c9a97ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96867bbd6f4371fbd0049504a3c3725f6abd9fcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96867bbd6f4371fbd0049504a3c3725f6abd9fcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96867bbd6f4371fbd0049504a3c3725f6abd9fcf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96867bbd6f4371fbd0049504a3c3725f6abd9fcf/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "68f61c3d955e3e9bb65200a27f5ea2136b7cedf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68f61c3d955e3e9bb65200a27f5ea2136b7cedf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68f61c3d955e3e9bb65200a27f5ea2136b7cedf7"}], "stats": {"total": 47, "additions": 34, "deletions": 13}, "files": [{"sha": "8f7a68d39692d389e2d7784a1b31e6af7a320e93", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96867bbd6f4371fbd0049504a3c3725f6abd9fcf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96867bbd6f4371fbd0049504a3c3725f6abd9fcf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96867bbd6f4371fbd0049504a3c3725f6abd9fcf", "patch": "@@ -1,3 +1,19 @@\n+2009-01-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/37031\n+\t* lambda-code.c (lambda_collect_parameters): Call pointer_set_destroy\n+\ton parameter_set.\n+\t(build_access_matrix): Reserve correct size for AM_MATRIX vector,\n+\tallocate it using gc instead of heap, use VEC_quick_push instead of\n+\tVEC_safe_push.\n+\t* graphite.c (build_access_matrix): Allocate AM_MATRIX vector using gc\n+\tinstead of heap, use VEC_quick_push instead of VEC_safe_push.\n+\t* tree-data-ref.h (struct access_matrix): Change matrix to gc\n+\tallocated vector from heap allocated.\n+\t* lambda.h: Add DEF_VEC_ALLOC_P for gc allocated lambda_vector.\n+\t* tree-loop-linear.c (linear_transform_loops): Allocate nest\n+\tvector only after perfect_loop_nest_depth call.\n+\n 2009-01-08  Sebastian Pop  <sebastian.pop@amd.com>\n \t    Jan Sjodin  <jan.sjodin@amd.com>\n "}, {"sha": "27cadf3340ddda7258a7dc540d78734c2dba716c", "filename": "gcc/graphite.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96867bbd6f4371fbd0049504a3c3725f6abd9fcf/gcc%2Fgraphite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96867bbd6f4371fbd0049504a3c3725f6abd9fcf/gcc%2Fgraphite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite.c?ref=96867bbd6f4371fbd0049504a3c3725f6abd9fcf", "patch": "@@ -1,5 +1,5 @@\n /* Gimple Represented as Polyhedra.\n-   Copyright (C) 2006, 2007, 2008 Free Software Foundation, Inc.\n+   Copyright (C) 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n    Contributed by Sebastian Pop <sebastian.pop@inria.fr>.\n \n This file is part of GCC.\n@@ -3630,7 +3630,7 @@ build_access_matrix (data_reference_p ref, graphite_bb_p gb)\n   int i, ndim = DR_NUM_DIMENSIONS (ref);\n   struct access_matrix *am = GGC_NEW (struct access_matrix);\n \n-  AM_MATRIX (am) = VEC_alloc (lambda_vector, heap, ndim);\n+  AM_MATRIX (am) = VEC_alloc (lambda_vector, gc, ndim);\n   DR_SCOP (ref) = GBB_SCOP (gb);\n \n   for (i = 0; i < ndim; i++)\n@@ -3642,7 +3642,7 @@ build_access_matrix (data_reference_p ref, graphite_bb_p gb)\n       if (!build_access_matrix_with_af (af, v, scop, ref_nb_loops (ref)))\n \treturn false;\n \n-      VEC_safe_push (lambda_vector, heap, AM_MATRIX (am), v);\n+      VEC_quick_push (lambda_vector, AM_MATRIX (am), v);\n     }\n \n   DR_ACCESS_MATRIX (ref) = am;"}, {"sha": "794d4e8b256a7ebb70d9fbcff76452551eacd31d", "filename": "gcc/lambda-code.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96867bbd6f4371fbd0049504a3c3725f6abd9fcf/gcc%2Flambda-code.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96867bbd6f4371fbd0049504a3c3725f6abd9fcf/gcc%2Flambda-code.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flambda-code.c?ref=96867bbd6f4371fbd0049504a3c3725f6abd9fcf", "patch": "@@ -1,5 +1,6 @@\n /*  Loop transformation code generation\n-    Copyright (C) 2003, 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n+    Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+    Free Software Foundation, Inc.\n     Contributed by Daniel Berlin <dberlin@dberlin.org>\n \n     This file is part of GCC.\n@@ -2682,6 +2683,7 @@ lambda_collect_parameters (VEC (data_reference_p, heap) *datarefs,\n     for (j = 0; j < DR_NUM_DIMENSIONS (data_reference); j++)\n       lambda_collect_parameters_from_af (DR_ACCESS_FN (data_reference, j),\n \t\t\t\t\t parameter_set, parameters);\n+  pointer_set_destroy (parameter_set);\n }\n \n /* Translates BASE_EXPR to vector CY.  AM is needed for inferring\n@@ -2792,15 +2794,13 @@ build_access_matrix (data_reference_p data_reference,\n   unsigned i, ndim = DR_NUM_DIMENSIONS (data_reference);\n   unsigned nivs = VEC_length (loop_p, nest);\n   unsigned lambda_nb_columns;\n-  lambda_vector_vec_p matrix;\n \n   AM_LOOP_NEST (am) = nest;\n   AM_NB_INDUCTION_VARS (am) = nivs;\n   AM_PARAMETERS (am) = parameters;\n \n   lambda_nb_columns = AM_NB_COLUMNS (am);\n-  matrix = VEC_alloc (lambda_vector, heap, lambda_nb_columns);\n-  AM_MATRIX (am) = matrix;\n+  AM_MATRIX (am) = VEC_alloc (lambda_vector, gc, ndim);\n \n   for (i = 0; i < ndim; i++)\n     {\n@@ -2810,7 +2810,7 @@ build_access_matrix (data_reference_p data_reference,\n       if (!av_for_af (access_function, access_vector, am))\n \treturn false;\n \n-      VEC_safe_push (lambda_vector, heap, matrix, access_vector);\n+      VEC_quick_push (lambda_vector, AM_MATRIX (am), access_vector);\n     }\n \n   DR_ACCESS_MATRIX (data_reference) = am;"}, {"sha": "94ca90644e43a4a53460e1a7ad5e816abfe53a81", "filename": "gcc/lambda.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96867bbd6f4371fbd0049504a3c3725f6abd9fcf/gcc%2Flambda.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96867bbd6f4371fbd0049504a3c3725f6abd9fcf/gcc%2Flambda.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flambda.h?ref=96867bbd6f4371fbd0049504a3c3725f6abd9fcf", "patch": "@@ -1,5 +1,6 @@\n /* Lambda matrix and vector interface.\n-   Copyright (C) 2003, 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+   Free Software Foundation, Inc.\n    Contributed by Daniel Berlin <dberlin@dberlin.org>\n \n This file is part of GCC.\n@@ -30,6 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n typedef int *lambda_vector;\n DEF_VEC_P(lambda_vector);\n DEF_VEC_ALLOC_P(lambda_vector,heap);\n+DEF_VEC_ALLOC_P(lambda_vector,gc);\n \n typedef VEC(lambda_vector, heap) *lambda_vector_vec_p;\n DEF_VEC_P (lambda_vector_vec_p);"}, {"sha": "6477542879df78cb56b7212daf4c71941251af3a", "filename": "gcc/tree-data-ref.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96867bbd6f4371fbd0049504a3c3725f6abd9fcf/gcc%2Ftree-data-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96867bbd6f4371fbd0049504a3c3725f6abd9fcf/gcc%2Ftree-data-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.h?ref=96867bbd6f4371fbd0049504a3c3725f6abd9fcf", "patch": "@@ -1,5 +1,6 @@\n /* Data references and dependences detectors. \n-   Copyright (C) 2003, 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+   Free Software Foundation, Inc.\n    Contributed by Sebastian Pop <pop@cri.ensmp.fr>\n \n This file is part of GCC.\n@@ -131,7 +132,7 @@ struct access_matrix\n   VEC (loop_p, heap) *loop_nest;\n   int nb_induction_vars;\n   VEC (tree, heap) *parameters;\n-  VEC (lambda_vector, heap) *matrix;\n+  VEC (lambda_vector, gc) *matrix;\n };\n \n #define AM_LOOP_NEST(M) (M)->loop_nest"}, {"sha": "cc2440dd41f9ba8a33d58c792c33a7e8632391ea", "filename": "gcc/tree-loop-linear.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96867bbd6f4371fbd0049504a3c3725f6abd9fcf/gcc%2Ftree-loop-linear.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96867bbd6f4371fbd0049504a3c3725f6abd9fcf/gcc%2Ftree-loop-linear.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-linear.c?ref=96867bbd6f4371fbd0049504a3c3725f6abd9fcf", "patch": "@@ -1,5 +1,6 @@\n /* Linear Loop transforms\n-   Copyright (C) 2003, 2004, 2005, 2007 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004, 2005, 2007, 2008, 2009\n+   Free Software Foundation, Inc.\n    Contributed by Daniel Berlin <dberlin@dberlin.org>.\n \n This file is part of GCC.\n@@ -334,12 +335,13 @@ linear_transform_loops (void)\n       lambda_trans_matrix trans;\n       struct obstack lambda_obstack;\n       struct loop *loop;\n-      VEC(loop_p,heap) *nest = VEC_alloc (loop_p, heap, 3);\n+      VEC(loop_p,heap) *nest;\n \n       depth = perfect_loop_nest_depth (loop_nest);\n       if (depth == 0)\n \tcontinue;\n \n+      nest = VEC_alloc (loop_p, heap, 3);\n       for (loop = loop_nest; loop; loop = loop->inner)\n \tVEC_safe_push (loop_p, heap, nest, loop);\n "}]}