{"sha": "51e0d189edbc6fc454d774c45593f1d04b661fea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTFlMGQxODllZGJjNmZjNDU0ZDc3NGM0NTU5M2YxZDA0YjY2MWZlYQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "1999-07-15T09:15:26Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "1999-07-15T09:15:26Z"}, "message": "G19990217_02.no-link: New file.\n\n\t* libjava.compile/G19990217_02.no-link: New file.\n\t* libjava.compile/test.exp: Look for `.no-link' file.\n\t* lib/libjava.exp (test_libjava_from_source): Added `no-link'\n\toption.\n\t(test_libjava_from_javac): Likewise.  Also, handle package\n\tinformation from class name when creating class file name.\n\nFrom-SVN: r28113", "tree": {"sha": "04340cfd009814d6e147ab80281e42e301511184", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04340cfd009814d6e147ab80281e42e301511184"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51e0d189edbc6fc454d774c45593f1d04b661fea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51e0d189edbc6fc454d774c45593f1d04b661fea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51e0d189edbc6fc454d774c45593f1d04b661fea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51e0d189edbc6fc454d774c45593f1d04b661fea/comments", "author": null, "committer": null, "parents": [{"sha": "e533f648afeea51f6c8d2e2c26306aff0a947867", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e533f648afeea51f6c8d2e2c26306aff0a947867", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e533f648afeea51f6c8d2e2c26306aff0a947867"}], "stats": {"total": 68, "additions": 58, "deletions": 10}, "files": [{"sha": "cb9224e049da5e6755b42e2277f6589e8a40f416", "filename": "libjava/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51e0d189edbc6fc454d774c45593f1d04b661fea/libjava%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51e0d189edbc6fc454d774c45593f1d04b661fea/libjava%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2FChangeLog?ref=51e0d189edbc6fc454d774c45593f1d04b661fea", "patch": "@@ -1,3 +1,12 @@\n+1999-07-14  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* libjava.compile/G19990217_02.no-link: New file.\n+\t* libjava.compile/test.exp: Look for `.no-link' file.\n+\t* lib/libjava.exp (test_libjava_from_source): Added `no-link'\n+\toption.\n+\t(test_libjava_from_javac): Likewise.  Also, handle package\n+\tinformation from class name when creating class file name.\n+\n 1999-07-13  Tom Tromey  <tromey@cygnus.com>\n \n \t* libjava.lang/test.exp: New file."}, {"sha": "3abb648a8b96e8d0a58635016e2c81729bd41d6a", "filename": "libjava/testsuite/lib/libjava.exp", "status": "modified", "additions": 45, "deletions": 10, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51e0d189edbc6fc454d774c45593f1d04b661fea/libjava%2Ftestsuite%2Flib%2Flibjava.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51e0d189edbc6fc454d774c45593f1d04b661fea/libjava%2Ftestsuite%2Flib%2Flibjava.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flib%2Flibjava.exp?ref=51e0d189edbc6fc454d774c45593f1d04b661fea", "patch": "@@ -233,6 +233,7 @@ proc libjava_arguments {{mode compile}} {\n #\n # Run the test specified by srcfile and resultfile. compile_args and\n # exec_args are options telling this proc how to work.\n+#   `no-link'     don't try to link the program\n #   `no-exec'     don't try to run the test\n #   `xfail-gcj'   compilation from source will fail\n #   `xfail-javac' compilation with javac will fail\n@@ -264,20 +265,33 @@ proc test_libjava_from_source { options srcfile compile_args inpfile resultfile\n         return\n     }\n \n-    set args [libjava_arguments link]\n-    # Add the --main flag\n-    lappend args \"additional_flags=--main=[file rootname [file tail $srcfile]]\"\n-    if { $compile_args != \"\" } {\n-\tlappend args \"additional_flags=$compile_args\"\n+    if {[info exists opts(no-link)]} {\n+\tset mode compile\n+    } else {\n+\tset mode link\n+    }\n+    set args [libjava_arguments $mode]\n+    if {! [info exists opts(no-link)]} {\n+\t# Add the --main flag\n+\tlappend args \"additional_flags=--main=[file rootname [file tail $srcfile]]\"\n+\tif { $compile_args != \"\" } {\n+\t    lappend args \"additional_flags=$compile_args\"\n+\t}\n     }\n \n     regsub \"^.*/(\\[^/.\\]+)\\[.\\]\\[^/]*$\" \"$srcfile\" \"\\\\1\" out\n     set executable \"${objdir}/$out\"\n+    if {[info exists opts(no-link)]} {\n+\tappend executable \".o\"\n+\tset target object\n+    } else {\n+\tset target executable\n+    }\n     if { $compile_args != \"\" } {\n \tset errname \"$errname $compile_args\"\n     }\n \n-    set x [target_compile $srcfile \"$executable\" executable $args]\n+    set x [target_compile $srcfile \"$executable\" $target $args]\n     if {[info exists opts(xfail-gcj)]} {\n \tsetup_xfail *-*-*\n     }\n@@ -294,7 +308,8 @@ proc test_libjava_from_source { options srcfile compile_args inpfile resultfile\n     }\n     pass \"$errname compilation from source\"\n \n-    if {[info exists opts(no-exec)]} {\n+    if {[info exists opts(no-exec)]\n+\t|| [info exists opts(no-link)]} {\n \treturn\n     }\n \n@@ -352,6 +367,7 @@ proc test_libjava_from_source { options srcfile compile_args inpfile resultfile\n #\n # Run the test specified by srcfile and resultfile. compile_args and\n # exec_args are options telling this proc how to work.\n+#   `no-link'     don't try to link the program\n #   `no-exec' don't try to run the test\n #   `xfail-gcj'   compilation from source will fail\n #   `xfail-javac' compilation with javac will fail\n@@ -422,22 +438,27 @@ proc test_libjava_from_javac { options srcfile compile_args inpfile resultfile e\n \t  [list $objdir/[file rootname [file tail $srcfile]].class]\n     } else {\n \t# Turn \"a b\" into \"a.class b.class\".\n+\t# Also, turn \"foo.bar\" into \"foo/bar.class\".\n \tset class_files {}\n         foreach file [split [string trim $class_out]] {\n+\t    set file [join [split $file .] /]\n \t    lappend class_files $objdir/$file.class\n \t}\n     }\n \n     # Usually it is an error for a test program not to have a `main'\n-    # method.  However, for no-exec tests it is ok.\n+    # method.  However, for no-exec tests it is ok.  Treat no-link\n+    # like no-exec here.\n+    if {[info exists opts(no-link)]} {\n+\tset opts(no-exec) x\n+    }\n     set largs {}\n     if {$main_name == \"\"} {\n \tif {! [info exists opts(no-exec)]} {\n \t    perror \"No `main' given in program $errname\"\n \t    return\n \t} else {\n \t    set type object\n-\t    set executable [file rootname [file tail $srcfile]].o\n \t    set mode compile\n \t}\n     } else {\n@@ -460,7 +481,20 @@ proc test_libjava_from_javac { options srcfile compile_args inpfile resultfile e\n     }\n \n     verbose \"compilation command = $args\" 2\n-    set x [target_compile $class_files \"$executable\" $type $args]\n+    # When compiling and not linking, we have to build each .o\n+    # separately.  We do this because DejaGNU's target_compile won't\n+    # accept an empty \"destfile\" argument when the mode is \"compile\".\n+    if {$mode == \"compile\"} {\n+\tforeach c_file $class_files {\n+\t    set executable [file rootname [file tail $c_file]].o\n+\t    set x [target_compile $c_file \"$executable\" $type $args]\n+\t    if {$x != \"\"} {\n+\t\tbreak\n+\t    }\n+\t}\n+    } else {\n+\tset x [target_compile $class_files \"$executable\" $type $args]\n+    }\n     if {[info exists opts(xfail-byte)]} {\n \tsetup_xfail *-*-*\n     }\n@@ -535,6 +569,7 @@ proc test_libjava_from_javac { options srcfile compile_args inpfile resultfile e\n #\n # Run the test specified by srcfile and resultfile. compile_args and\n # exec_args are options telling this proc how to work.\n+#   `no-link'     don't try to link the program\n #   `no-exec' don't try to run the test\n #   `xfail-gcj'   compilation from source will fail\n #   `xfail-javac' compilation with javac will fail"}, {"sha": "e69cdecc10316094c70f31439d1bb6f1f434c7d6", "filename": "libjava/testsuite/libjava.compile/G19990217_02.no-link", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51e0d189edbc6fc454d774c45593f1d04b661fea/libjava%2Ftestsuite%2Flibjava.compile%2FG19990217_02.no-link", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51e0d189edbc6fc454d774c45593f1d04b661fea/libjava%2Ftestsuite%2Flibjava.compile%2FG19990217_02.no-link", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.compile%2FG19990217_02.no-link?ref=51e0d189edbc6fc454d774c45593f1d04b661fea", "patch": "@@ -0,0 +1 @@\n+Don't link me"}, {"sha": "3d9c13b78b64173f6c3e145f9d6491b706e9f3b8", "filename": "libjava/testsuite/libjava.compile/test.exp", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51e0d189edbc6fc454d774c45593f1d04b661fea/libjava%2Ftestsuite%2Flibjava.compile%2Ftest.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51e0d189edbc6fc454d774c45593f1d04b661fea/libjava%2Ftestsuite%2Flibjava.compile%2Ftest.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.compile%2Ftest.exp?ref=51e0d189edbc6fc454d774c45593f1d04b661fea", "patch": "@@ -6,6 +6,9 @@ verbose \"srcfiles are $srcfiles\"\n set prefix \"\"\n foreach x $srcfiles {\n     set args [libjava_read_xfail [file rootname $x].xfail]\n+    if {[file exists [file rootname $x].no-link]} {\n+\tlappend args no-link\n+    }\n     lappend args no-exec\n \n     test_libjava $options \"$x\" \"\" \"\" \"\" $args"}]}