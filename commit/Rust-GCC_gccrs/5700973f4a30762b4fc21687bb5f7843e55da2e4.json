{"sha": "5700973f4a30762b4fc21687bb5f7843e55da2e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTcwMDk3M2Y0YTMwNzYyYjRmYzIxNjg3YmI1Zjc4NDNlNTVkYTJlNA==", "commit": {"author": {"name": "Prathamesh Kulkarni", "email": "prathamesh.kulkarni@linaro.org", "date": "2020-11-24T01:20:53Z"}, "committer": {"name": "Prathamesh Kulkarni", "email": "prathamesh.kulkarni@linaro.org", "date": "2020-11-24T01:27:46Z"}, "message": "tree-opt: Fix segfault in tree-if-conv.c with -march=armv8.2-a+sve [PR97849]\n\nThe issue here is that rpo vn may eliminate target ssa_name referred to in\nredundant_ssa_names, and thus ifcvt_local_dce may replace candidate\nssa_name with invalid ssa_name resulting in incorrect IR. The patch simply\ndoes ssa_name replacement before calling do_rpo_vn, which fixes the issue.\n\ngcc/\n2020-11-24  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n\n\tPR tree-optimization/97849\n\t* tree-if-conv.c (tree_if_conversion): Move ssa_name\n\treplacement code from ifcvt_local_dce to this function\n\tbefore calling do_rpo_vn.\n\ngcc/testsuite/\n2020-11-24  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n\n\tPR tree-optimization/97849\n\t* gcc.dg/tree-ssa/pr97849.c: New test.", "tree": {"sha": "ab46cb4c3c4498841557134ca7ebb937458fc5f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab46cb4c3c4498841557134ca7ebb937458fc5f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5700973f4a30762b4fc21687bb5f7843e55da2e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5700973f4a30762b4fc21687bb5f7843e55da2e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5700973f4a30762b4fc21687bb5f7843e55da2e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5700973f4a30762b4fc21687bb5f7843e55da2e4/comments", "author": null, "committer": null, "parents": [{"sha": "6692c400f207c68fb11b44182ae127856e8b9ad3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6692c400f207c68fb11b44182ae127856e8b9ad3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6692c400f207c68fb11b44182ae127856e8b9ad3"}], "stats": {"total": 29, "additions": 23, "deletions": 6}, "files": [{"sha": "57a31e316a248be1aa5d27efe6241eff9aec2101", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr97849.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5700973f4a30762b4fc21687bb5f7843e55da2e4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr97849.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5700973f4a30762b4fc21687bb5f7843e55da2e4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr97849.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr97849.c?ref=5700973f4a30762b4fc21687bb5f7843e55da2e4", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -ftree-vectorize\" } */\n+/* { dg-additional-options \"-march=armv8.2-a+sve\" { target aarch64*-*-* } } */\n+\n+int a, b, c;\n+\n+int g() {\n+  char i = 0;\n+  for (c = 0; c <= 8; c++)\n+    --i;\n+\n+  while (b) {\n+    _Bool f = i <= 0;\n+    a = (a == 0) ? 0 : f / a;\n+  }\n+}"}, {"sha": "93effaa811b0a659fd2b6b7c0ee6e2e07ec882d1", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5700973f4a30762b4fc21687bb5f7843e55da2e4/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5700973f4a30762b4fc21687bb5f7843e55da2e4/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=5700973f4a30762b4fc21687bb5f7843e55da2e4", "patch": "@@ -2916,12 +2916,6 @@ ifcvt_local_dce (class loop *loop)\n   enum gimple_code code;\n   use_operand_p use_p;\n   imm_use_iterator imm_iter;\n-  std::pair <tree, tree> *name_pair;\n-  unsigned int i;\n-\n-  FOR_EACH_VEC_ELT (redundant_ssa_names, i, name_pair)\n-    replace_uses_by (name_pair->first, name_pair->second);\n-  redundant_ssa_names.release ();\n \n   /* The loop has a single BB only.  */\n   basic_block bb = loop->header;\n@@ -3124,6 +3118,13 @@ tree_if_conversion (class loop *loop, vec<gimple *> *preds)\n   exit_bbs = BITMAP_ALLOC (NULL);\n   bitmap_set_bit (exit_bbs, single_exit (loop)->dest->index);\n   bitmap_set_bit (exit_bbs, loop->latch->index);\n+\n+  std::pair <tree, tree> *name_pair;\n+  unsigned ssa_names_idx;\n+  FOR_EACH_VEC_ELT (redundant_ssa_names, ssa_names_idx, name_pair)\n+    replace_uses_by (name_pair->first, name_pair->second);\n+  redundant_ssa_names.release ();\n+\n   todo |= do_rpo_vn (cfun, loop_preheader_edge (loop), exit_bbs);\n \n   /* Delete dead predicate computations.  */"}]}