{"sha": "aff48bcaae5b53623c51f9119279275f4f2ca156", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWZmNDhiY2FhZTViNTM2MjNjNTFmOTExOTI3OTI3NWY0ZjJjYTE1Ng==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1998-02-19T00:35:51Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-02-19T00:35:51Z"}, "message": "emit-rtl.c (gen_lowpart_common): Suppress last change if __complex__.\n\n        * emit-rtl.c (gen_lowpart_common): Suppress last change if __complex__.\n        * emit-rtl.c (hard-reg-set.h): Include.\n        (get_lowpart_common): Don't make new REG for hard reg in a\n        class that cannot change size.\n        * Makefile.in (emit-rtl.o): Depend on hard-reg-set.h.\n        * combine.c: Revert previous patch.\n\nCo-Authored-By: Richard Kenner <kenner@vlsi1.ultra.nyu.edu>\n\nFrom-SVN: r18109", "tree": {"sha": "627b2dcef94a9f2140fdc61bc5488fac086410db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/627b2dcef94a9f2140fdc61bc5488fac086410db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aff48bcaae5b53623c51f9119279275f4f2ca156", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aff48bcaae5b53623c51f9119279275f4f2ca156", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aff48bcaae5b53623c51f9119279275f4f2ca156", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aff48bcaae5b53623c51f9119279275f4f2ca156/comments", "author": null, "committer": null, "parents": [{"sha": "0a9bdce34de7641f636b82362c6e739a40c1c1ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a9bdce34de7641f636b82362c6e739a40c1c1ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a9bdce34de7641f636b82362c6e739a40c1c1ab"}], "stats": {"total": 55, "additions": 22, "deletions": 33}, "files": [{"sha": "30b18f86afa3ce2694ecb0172b570708bdec2d3f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff48bcaae5b53623c51f9119279275f4f2ca156/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff48bcaae5b53623c51f9119279275f4f2ca156/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aff48bcaae5b53623c51f9119279275f4f2ca156", "patch": "@@ -1,3 +1,15 @@\n+Thu Feb 19 01:32:37 1998  Jeffrey A Law  (law@cygnus.com)\n+                          Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* emit-rtl.c (gen_lowpart_common): Suppress last change if __complex__.\n+\n+\t* emit-rtl.c (hard-reg-set.h): Include.\n+\t(get_lowpart_common): Don't make new REG for hard reg in a \n+\tclass that cannot change size.\n+\t* Makefile.in (emit-rtl.o): Depend on hard-reg-set.h.\n+\n+\t* combine.c: Revert previous patch.\n+\n 1998-02-19  Paul Eggert  <eggert@twinsun.com>\n \n \t* config/sparc/sol2-sld.h: New file."}, {"sha": "f809c5b54d44d4a6aa8546297dbd35724e7bfd4b", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff48bcaae5b53623c51f9119279275f4f2ca156/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff48bcaae5b53623c51f9119279275f4f2ca156/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=aff48bcaae5b53623c51f9119279275f4f2ca156", "patch": "@@ -1368,7 +1368,7 @@ dwarf2out.o : dwarf2out.c $(CONFIG_H) $(TREE_H) $(RTL_H) dwarf2.h flags.h \\\n xcoffout.o : xcoffout.c $(CONFIG_H) $(TREE_H) $(RTL_H) xcoffout.h flags.h\n emit-rtl.o : emit-rtl.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h except.h \\\n    function.h regs.h insn-config.h insn-codes.h $(RECOG_H) real.h expr.h \\\n-   obstack.h\n+   obstack.h hard-reg-set.h\n real.o : real.c $(CONFIG_H) $(TREE_H)\n getpwd.o : getpwd.c $(CONFIG_H)\n "}, {"sha": "81f4d9bb6e212a6b16d8a83743211c37fa733d27", "filename": "gcc/combine.c", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff48bcaae5b53623c51f9119279275f4f2ca156/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff48bcaae5b53623c51f9119279275f4f2ca156/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=aff48bcaae5b53623c51f9119279275f4f2ca156", "patch": "@@ -3483,13 +3483,6 @@ simplify_rtx (x, op0_mode, last, in_dest)\n \n       if (GET_CODE (SUBREG_REG (x)) == REG\n \t  && REGNO (SUBREG_REG (x)) < FIRST_PSEUDO_REGISTER\n-#ifdef CLASS_CANNOT_CHANGE_SIZE\n-\t  && (! (TEST_HARD_REG_BIT\n-\t\t (reg_class_contents[(int) CLASS_CANNOT_CHANGE_SIZE],\n-\t\t  REGNO (SUBREG_REG (x))))\n-\t      || (GET_MODE_SIZE (mode)\n-\t\t  == GET_MODE_SIZE (GET_MODE (SUBREG_REG (x)))))\n-#endif\n \t  && REGNO (SUBREG_REG (x)) != FRAME_POINTER_REGNUM\n #if HARD_FRAME_POINTER_REGNUM != FRAME_POINTER_REGNUM\n \t  && REGNO (SUBREG_REG (x)) != HARD_FRAME_POINTER_REGNUM\n@@ -5113,20 +5106,6 @@ expand_compound_operation (x)\n   int modewidth;\n   rtx tem;\n \n-#ifdef CLASS_CANNOT_CHANGE_SIZE\n-  /* When dealing with hard regs that cannot change size, don't even try\n-     expanding to shifts, since we wind up violating the rule.  */\n-  if (GET_RTX_CLASS (GET_CODE (x)) == '1'\n-      && GET_CODE (XEXP (x, 0)) == REG\n-      && REGNO (SUBREG_REG (x)) < FIRST_PSEUDO_REGISTER\n-      && (TEST_HARD_REG_BIT\n-\t  (reg_class_contents[(int) CLASS_CANNOT_CHANGE_SIZE],\n-\t   REGNO (SUBREG_REG (x))))\n-      && (GET_MODE_SIZE (GET_MODE (x))\n-\t  != GET_MODE_SIZE (GET_MODE (SUBREG_REG (x)))))\n-    return x;\n-#endif\n-\n   switch (GET_CODE (x))\n     {\n     case ZERO_EXTEND:\n@@ -6243,17 +6222,6 @@ force_to_mode (x, mode, mask, reg, just_select)\n       break;\n \n     case SUBREG:\n-#ifdef CLASS_CANNOT_CHANGE_SIZE\n-      if (GET_CODE (SUBREG_REG (x)) == REG\n-\t  && REGNO (SUBREG_REG (x)) < FIRST_PSEUDO_REGISTER\n-\t  && (TEST_HARD_REG_BIT\n-\t      (reg_class_contents[(int) CLASS_CANNOT_CHANGE_SIZE],\n-\t       REGNO (SUBREG_REG (x))))\n-\t  && (GET_MODE_SIZE (GET_MODE (x))\n-\t      != GET_MODE_SIZE (GET_MODE (SUBREG_REG (x)))))\n-\treturn x;\n-#endif\n-\n       if (subreg_lowpart_p (x)\n \t  /* We can ignore the effect of this SUBREG if it narrows the mode or\n \t     if the constant masks to zero all the bits the mode doesn't"}, {"sha": "442c740b1159e6ced0f526467be763d45dbaea4d", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff48bcaae5b53623c51f9119279275f4f2ca156/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff48bcaae5b53623c51f9119279275f4f2ca156/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=aff48bcaae5b53623c51f9119279275f4f2ca156", "patch": "@@ -48,6 +48,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"function.h\"\n #include \"expr.h\"\n #include \"regs.h\"\n+#include \"hard-reg-set.h\"\n #include \"insn-config.h\"\n #include \"recog.h\"\n #include \"real.h\"\n@@ -665,6 +666,14 @@ gen_lowpart_common (mode, x)\n \t       /* integrate.c can't handle parts of a return value register. */\n \t       && (! REG_FUNCTION_VALUE_P (x)\n \t\t   || ! rtx_equal_function_value_matters)\n+#ifdef CLASS_CANNOT_CHANGE_SIZE\n+\t       && ! (GET_MODE_SIZE (mode) != GET_MODE_SIZE (GET_MODE (x))\n+\t\t     && GET_MODE_CLASS (GET_MODE (x)) != MODE_COMPLEX_INT\n+\t\t     && GET_MODE_CLASS (GET_MODE (x)) != MODE_COMPLEX_FLOAT\n+\t\t     && (TEST_HARD_REG_BIT\n+\t\t\t (reg_class_contents[(int) CLASS_CANNOT_CHANGE_SIZE],\n+\t\t\t  REGNO (x))))\n+#endif\n \t       /* We want to keep the stack, frame, and arg pointers\n \t\t  special.  */\n \t       && x != frame_pointer_rtx"}]}