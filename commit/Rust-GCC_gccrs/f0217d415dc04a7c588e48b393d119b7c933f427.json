{"sha": "f0217d415dc04a7c588e48b393d119b7c933f427", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjAyMTdkNDE1ZGMwNGE3YzU4OGU0OGIzOTNkMTE5YjdjOTMzZjQyNw==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2001-02-16T17:06:06Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2001-02-16T17:06:06Z"}, "message": "mathconf.h (FINITE_P, INFINITE_P): Remove macro definitions.\n\n\t* libmath/mathconf.h (FINITE_P, INFINITE_P): Remove macro\n\tdefinitions.\n\nFrom-SVN: r39767", "tree": {"sha": "e9a221a7862e20621457ead82d6e6cfa4c825ce4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9a221a7862e20621457ead82d6e6cfa4c825ce4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0217d415dc04a7c588e48b393d119b7c933f427", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0217d415dc04a7c588e48b393d119b7c933f427", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0217d415dc04a7c588e48b393d119b7c933f427", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0217d415dc04a7c588e48b393d119b7c933f427/comments", "author": null, "committer": null, "parents": [{"sha": "f5df2e8c0676008e9ab2c999f01054561bc2f826", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5df2e8c0676008e9ab2c999f01054561bc2f826", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5df2e8c0676008e9ab2c999f01054561bc2f826"}], "stats": {"total": 99, "additions": 5, "deletions": 94}, "files": [{"sha": "d869770e0fb549bed124516e39cf9a0d4c07e456", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0217d415dc04a7c588e48b393d119b7c933f427/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0217d415dc04a7c588e48b393d119b7c933f427/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f0217d415dc04a7c588e48b393d119b7c933f427", "patch": "@@ -1,3 +1,8 @@\n+2001-02-16  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* libmath/mathconf.h (FINITE_P, INFINITE_P): Remove macro\n+\tdefinitions. \n+\n 2001-02-15  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/bits/c++config: Revert."}, {"sha": "3f8344cd8b8c63e223d7e4769232ad5ba232b17a", "filename": "libstdc++-v3/libmath/mathconf.h", "status": "modified", "additions": 0, "deletions": 94, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0217d415dc04a7c588e48b393d119b7c933f427/libstdc%2B%2B-v3%2Flibmath%2Fmathconf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0217d415dc04a7c588e48b393d119b7c933f427/libstdc%2B%2B-v3%2Flibmath%2Fmathconf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fmathconf.h?ref=f0217d415dc04a7c588e48b393d119b7c933f427", "patch": "@@ -128,100 +128,6 @@ double nan (void);\n # define M_PI 3.14159265358979323846\n #endif\n \n-/* Test whether number is finite.  */\n-#ifdef isfinite\n-/* This is an ISO C99 function.  */\n-# define FINITE_P(X) isfinite (X)\n-# define FINITEF_P(X) isfinite (X)\n-# define FINITEL_P(X) isfinite (X)\n-#else\n-# ifdef IsNANorINF\n-/* This is for Solaris, which does not have special macros for other\n-   types.  */\n-#  define FINITE_P(X) (!IsNANorINF (X))\n-#  define FINITEF_P(X) (!IsNANorINF (X))\n-#  define FINITEL_P(X) (!IsNANorINF (X))\n-# else\n-#  if defined _GLIBCPP_HAVE_ISINF && defined _GLIBCPP_HAVE_ISNAN\n-#   define FINITE_P(X) ({ double __x = (X); !isinf (__x) && !isnan (__x); })\n-#  else\n-#   ifdef _GLIBCPP_HAVE_FINITE\n-#    define FINITE_P(X) finite (X)\n-#   else\n-#    error \"We need FINITE_P\"\n-#   endif\n-#  endif\n-#  if defined _GLIBCPP_HAVE_ISINFF && defined _GLIBCPP_HAVE_ISNANF\n-#   define FINITEF_P(X) ({ float __x = (X); !isinff (__x) && !isnanf (__x); })\n-#  else\n-#   ifdef _GLIBCPP_HAVE_FINITE\n-#    define FINITEF_P(X) finite (X)\n-#   else\n-#    define FINITEF_P(X) FINITE_P (X)\n-#   endif\n-#  endif\n-#  if defined _GLIBCPP_HAVE_ISINFL && defined _GLIBCPP_HAVE_ISNANL\n-#   define FINITEL_P(X) ({ long double __x = (X); \\\n-\t\t\t   !isinfl (__x) && !isnanl (__x); })\n-#  else\n-#   ifdef _GLIBCPP_HAVE_QFINITE\n-#    define FINITEL_P(X) qfinite (X)\n-#   else\n-#    define FINITEL_P(X) FINITE_P (X)\n-#   endif\n-#  endif\n-# endif\n-#endif\n-\n-/* Test whether number is infinite.  */\n-#ifdef isinf\n-/* This is an ISO C99 macro.  */\n-# define INFINITE_P(X) isinf (X)\n-# define INFINITEF_P(X) isinf (X)\n-# define INFINITEL_P(X) isinf (X)\n-#else\n-# ifdef IsINF\n-/* This is for Solaris, which does not have special macros for other\n-   types.  */\n-#  define INFINITE_P(X) IsINF (X)\n-#  define INFINITEF_P(X) IsINF (X)\n-#  define INFINITEL_P(X) IsINF (X)\n-# else\n-#  if defined _GLIBCPP_HAVE_ISINF\n-#   define INFINITE_P(X) isinf (X)\n-#  else\n-#   ifdef _GLIBCPP_HAVE_FPCLASS\n-#    ifdef _FPCLASS_PINF\n-/* Mingw defines _FPCLASS_PINF.  */\n-#     define FP_PINF _FPCLASS_PINF\n-#    endif\n-/* This is for Irix and Mingw.  */\n-#    define INFINITE_P(X) (fpclass (fabs (X)) == FP_PINF)\n-#   else\n-#    ifdef IS_INF\n-/* This is for AIX.  */\n-#     define INFINITE_P(X) ({ double __d = (X); IS_INF (__d); })\n-#    else\n-#     error \"We need INFINITE_P\"\n-#    endif\n-#   endif\n-#  endif\n-#  if defined _GLIBCPP_HAVE_ISINFF\n-#   define INFINITEF_P(X) isinff (X)\n-#  else\n-#   define INFINITEF_P(X) INFINITE_P (X)\n-#  endif\n-#  if defined _GLIBCPP_HAVE_ISINFL\n-#   define INFINITEL_P(X) isinfl (X)\n-#  else\n-#   ifdef _GLIBCPP_HAVE_QFPCLASS\n-#    define INFINITEL_P(X) (qfpclass (fabsl (X)) == FP_PINF)\n-#   else\n-#    define INFINITEL_P(X) INFINITE_P (X)\n-#   endif\n-#  endif\n-# endif\n-#endif\n \n #ifdef __cplusplus\n extern \"C\" {"}]}