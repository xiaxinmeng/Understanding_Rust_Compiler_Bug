{"sha": "974c2c56f4aa3ae4458f6f46fc8fa5f4de8d476b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc0YzJjNTZmNGFhM2FlNDQ1OGY2ZjQ2ZmM4ZmE1ZjRkZThkNDc2Yg==", "commit": {"author": {"name": "Carlos O'Donell", "email": "carlos@codesourcery.com", "date": "2006-01-20T22:55:36Z"}, "committer": {"name": "Carlos O'Donell", "email": "carlos@gcc.gnu.org", "date": "2006-01-20T22:55:36Z"}, "message": "Makefile.in: Add test-expandargv test.\n\n\nlibiberty/\n\n2006-01-20  Carlos O'Donell  <carlos@codesourcery.com>\n\n\t* testsuite/Makefile.in: Add test-expandargv test.\n\t* testsuite/test-expandargv.c: New test.\n\t* argv.c (expandargv): Check for errors with ferror,\n\trather than just by looking at return value from fread.\n\nFrom-SVN: r110047", "tree": {"sha": "89df8fbace1ce500a3df6352ee2b545773439551", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89df8fbace1ce500a3df6352ee2b545773439551"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/974c2c56f4aa3ae4458f6f46fc8fa5f4de8d476b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/974c2c56f4aa3ae4458f6f46fc8fa5f4de8d476b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/974c2c56f4aa3ae4458f6f46fc8fa5f4de8d476b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/974c2c56f4aa3ae4458f6f46fc8fa5f4de8d476b/comments", "author": null, "committer": null, "parents": [{"sha": "ac2b2479e8981d12f760ff6e13e9aa38dc70b36d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac2b2479e8981d12f760ff6e13e9aa38dc70b36d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac2b2479e8981d12f760ff6e13e9aa38dc70b36d"}], "stats": {"total": 332, "additions": 327, "deletions": 5}, "files": [{"sha": "290293c1ac6ef9c029d264b366943410ec846a10", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974c2c56f4aa3ae4458f6f46fc8fa5f4de8d476b/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974c2c56f4aa3ae4458f6f46fc8fa5f4de8d476b/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=974c2c56f4aa3ae4458f6f46fc8fa5f4de8d476b", "patch": "@@ -1,3 +1,10 @@\n+2006-01-20  Carlos O'Donell  <carlos@codesourcery.com>\n+\n+\t* testsuite/Makefile.in: Add test-expandargv test.\n+\t* testsuite/test-expandargv.c: New test.\n+\t* argv.c (expandargv): Check for errors with ferror,\n+\trather than just by looking at return value from fread.\n+\n 2005-12-17  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* floatformat.c (floatformat_i387_ext_is_valid): Use explicit cast"}, {"sha": "11ca549a8ea9bb2add001fb381550082b4db002d", "filename": "libiberty/argv.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974c2c56f4aa3ae4458f6f46fc8fa5f4de8d476b/libiberty%2Fargv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974c2c56f4aa3ae4458f6f46fc8fa5f4de8d476b/libiberty%2Fargv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fargv.c?ref=974c2c56f4aa3ae4458f6f46fc8fa5f4de8d476b", "patch": "@@ -328,16 +328,20 @@ expandargv (argcp, argvp)\n       const char *filename;\n       /* The response file.  */\n       FILE *f;\n-      /* The number of characters in the response file.  */\n+      /* An upper bound on the number of characters in the response\n+\t file.  */\n       long pos;\n+      /* The number of characters in the response file, when actually\n+\t read.  */\n+      size_t len;\n       /* A dynamically allocated buffer used to hold options read from a\n \t response file.  */\n       char *buffer;\n       /* Dynamically allocated storage for the options read from the\n \t response file.  */\n       char **file_argv;\n       /* The number of options read from the response file, if any.  */\n-     size_t file_argc;\n+      size_t file_argc;\n       /* We are only interested in options of the form \"@file\".  */\n       filename = (*argvp)[i];\n       if (filename[0] != '@')\n@@ -354,10 +358,15 @@ expandargv (argcp, argvp)\n       if (fseek (f, 0L, SEEK_SET) == -1)\n \tgoto error;\n       buffer = (char *) xmalloc (pos * sizeof (char) + 1);\n-      if (fread (buffer, sizeof (char), pos, f) != (size_t) pos)\n+      len = fread (buffer, sizeof (char), pos, f);\n+      if (len != (size_t) pos\n+\t  /* On Windows, fread may return a value smaller than POS,\n+\t     due to CR/LF->CR translation when reading text files.\n+\t     That does not in-and-of itself indicate failure.  */\n+\t  && ferror (f))\n \tgoto error;\n       /* Add a NUL terminator.  */\n-      buffer[pos] = '\\0';\n+      buffer[len] = '\\0';\n       /* Parse the string.  */\n       file_argv = buildargv (buffer);\n       /* If *ARGVP is not already dynamically allocated, copy it.  */"}, {"sha": "67e1d2826eff4219940f4aafb16617b7f1dd7d5d", "filename": "libiberty/testsuite/Makefile.in", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974c2c56f4aa3ae4458f6f46fc8fa5f4de8d476b/libiberty%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974c2c56f4aa3ae4458f6f46fc8fa5f4de8d476b/libiberty%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2FMakefile.in?ref=974c2c56f4aa3ae4458f6f46fc8fa5f4de8d476b", "patch": "@@ -45,7 +45,7 @@ all:\n # CHECK is set to \"really_check\" or the empty string by configure.\n check: @CHECK@\n \n-really-check: check-cplus-dem check-pexecute\n+really-check: check-cplus-dem check-pexecute check-expandargv\n \n # Run some tests of the demangler.\n check-cplus-dem: test-demangle $(srcdir)/demangle-expected\n@@ -55,6 +55,10 @@ check-cplus-dem: test-demangle $(srcdir)/demangle-expected\n check-pexecute: test-pexecute\n \t./test-pexecute\n \n+# Check the expandargv functionality\n+check-expandargv: test-expandargv\n+\t./test-expandargv\n+\n TEST_COMPILE = $(CC) @DEFS@ $(LIBCFLAGS) -I.. -I$(INCDIR) $(HDEFINES)\n test-demangle: $(srcdir)/test-demangle.c ../libiberty.a\n \t$(TEST_COMPILE) -o test-demangle \\\n@@ -63,13 +67,19 @@ test-demangle: $(srcdir)/test-demangle.c ../libiberty.a\n test-pexecute: $(srcdir)/test-pexecute.c ../libiberty.a\n \t$(TEST_COMPILE) -DHAVE_CONFIG_H -I.. -o test-pexecute \\\n \t\t$(srcdir)/test-pexecute.c ../libiberty.a\n+\t\t\n+test-expandargv: $(srcdir)/test-expandargv.c ../libiberty.a\n+\t$(TEST_COMPILE) -DHAVE_CONFIG_H -I.. -o test-expandargv \\\n+\t\t$(srcdir)/test-expandargv.c ../libiberty.a\n \n # Standard (either GNU or Cygnus) rules we don't use.\n info install-info clean-info dvi install etags tags installcheck:\n \n # The standard clean rules.\n mostlyclean:\n \trm -f test-demangle\n+\trm -f test-pexecute\n+\trm -f test-expandargv\n clean: mostlyclean\n distclean: clean\n \trm -f Makefile"}, {"sha": "9d1af01454598941576e67123e15c16cc5c2f465", "filename": "libiberty/testsuite/test-expandargv.c", "status": "added", "additions": 296, "deletions": 0, "changes": 296, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974c2c56f4aa3ae4458f6f46fc8fa5f4de8d476b/libiberty%2Ftestsuite%2Ftest-expandargv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974c2c56f4aa3ae4458f6f46fc8fa5f4de8d476b/libiberty%2Ftestsuite%2Ftest-expandargv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Ftest-expandargv.c?ref=974c2c56f4aa3ae4458f6f46fc8fa5f4de8d476b", "patch": "@@ -0,0 +1,296 @@\n+/* expandargv test program,\n+   Copyright (C) 2006 Free Software Foundation, Inc.\n+   Written by Carlos O'Donell <carlos@codesourcery.com>\n+\n+   This file is part of the libiberty library, which is part of GCC.\n+\n+   This file is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2 of the License, or\n+   (at your option) any later version.\n+\n+   In addition to the permissions in the GNU General Public License, the\n+   Free Software Foundation gives you unlimited permission to link the\n+   compiled version of this file into combinations with other programs,\n+   and to distribute those combinations without any restriction coming\n+   from the use of this file.  (The General Public License restrictions\n+   do apply in other respects; for example, they cover modification of\n+   the file, and distribution when not linked into a combined\n+   executable.)\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; if not, write to the Free Software\n+   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA. \n+*/\n+\n+#ifdef HAVE_CONFIG_H\n+#include \"config.h\"\n+#endif\n+#include \"libiberty.h\"\n+#include <stdio.h>\n+#include <errno.h>\n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+#ifdef HAVE_STRING_H\n+#include <string.h>\n+#endif\n+\n+#ifndef EXIT_SUCCESS\n+#define EXIT_SUCCESS 0\n+#endif\n+\n+#ifndef EXIT_FAILURE\n+#define EXIT_FAILURE 1\n+#endif\n+\n+static void fatal_error (int, const char *, int) ATTRIBUTE_NORETURN;\n+void writeout_test (int, const char *);\n+void run_replaces (char *);\n+void hook_char_replace (char *, size_t, char, char);\n+int run_tests (const char **);\n+void erase_test (int);\n+\n+/* Test input data, argv before, and argv after:\n+ \n+   The \\n is an important part of test_data since expandargv\n+   may have to work in environments where \\n is translated\n+   as \\r\\n. Thus \\n is included in the test data for the file. \n+\n+   We use \\b to indicate that the test data is the null character.\n+   This is because we use \\0 normally to represent the end of the \n+   file data, so we need something else for this. */\n+\n+#define FILENAME_PATTERN \"test-expandargv-%d.lst\"\n+#define ARGV0 \"test-expandargv\"\n+\n+const char *test_data[] = {\n+  /* Test 0 - Check for expansion with \\r\\n */\n+  \"a\\r\\nb\",\t/* Test 0 data */\n+  ARGV0,\n+  \"@test-expandargv-0.lst\",\n+  0, /* End of argv[] before expansion */\n+  ARGV0,\n+  \"a\",\n+  \"b\",\n+  0, /* End of argv[] after expansion */\n+\n+  /* Test 1 - Check for expansion with \\n */\n+  \"a\\nb\",\t/* Test 1 data */\n+  ARGV0,\n+  \"@test-expandargv-1.lst\",\n+  0,\n+  ARGV0,\n+  \"a\",\n+  \"b\",\n+  0,\n+\n+  /* Test 2 - Check for expansion with \\0 */\n+  \"a\\bb\",\t/* Test 2 data */\n+  ARGV0,\n+  \"@test-expandargv-2.lst\",\n+  0,\n+  ARGV0,\n+  \"a\",\n+  0,\n+\n+  /* Test 3 - Check for expansion with only \\0 */\n+  \"\\b\",\t\t/* Test 3 data */\n+  ARGV0,\n+  \"@test-expandargv-3.lst\",\n+  0,\n+  ARGV0,\n+  0,\n+\n+  0 /* Test done marker, don't remove. */\n+};\n+\n+/* Print a fatal error and exit.  LINE is the line number where we\n+   detected the error, ERRMSG is the error message to print, and ERR\n+   is 0 or an errno value to print.  */\n+\n+static void\n+fatal_error (int line, const char *errmsg, int err)\n+{\n+  fprintf (stderr, \"test-expandargv:%d: %s\", line, errmsg);\n+  if (errno != 0)\n+    fprintf (stderr, \": %s\", xstrerror (err));\n+  fprintf (stderr, \"\\n\");\n+  exit (EXIT_FAILURE);\n+}\n+\n+/* hook_char_replace:\n+     Replace 'replacethis' with 'withthis' */\n+\n+void\n+hook_char_replace (char *string, size_t len, char replacethis, char withthis)\n+{\n+  int i = 0;\n+  for (i = 0; i < len; i++)\n+    if (string[i] == replacethis)\n+      string[i] = withthis;\n+}\n+\n+/* run_replaces:\n+     Hook here all the character for character replaces.\n+     Be warned that expanding the string or contracting the string\n+     should be handled with care. */\n+\n+void\n+run_replaces (char * string)\n+{\n+  /* Store original string size */\n+  size_t len = strlen (string);\n+  hook_char_replace (string, len, '\\b', '\\0');\n+}\n+\n+/* write_test:\n+   Write test datafile */\n+\n+void\n+writeout_test (int test, const char * test_data)\n+{\n+  char filename[256];\n+  FILE *fd;\n+  size_t len;\n+  char * parse;\n+\n+  /* Unique filename per test */\n+  sprintf (filename, FILENAME_PATTERN, test);\n+  fd = fopen (filename, \"w\");\n+  if (fd == NULL)\n+    fatal_error (__LINE__, \"Failed to create test file.\", errno);\n+\n+  /* Generate RW copy of data for replaces */\n+  len = strlen (test_data);\n+  parse = malloc (sizeof (char) * (len + 1));\n+  if (parse == NULL)\n+    fatal_error (__LINE__, \"Failed to malloc parse.\", errno);\n+      \n+  memcpy (parse, test_data, sizeof (char) * len);\n+  /* Run all possible replaces */\n+  run_replaces (parse);\n+\n+  fwrite (parse, len, sizeof (char), fd);\n+  free (parse);\n+  fclose (fd);\n+}\n+\n+/* erase_test:\n+     Erase the test file */\n+\n+void \n+erase_test (int test)\n+{\n+  char filename[256]; \n+  sprintf (filename, FILENAME_PATTERN, test);\n+  if (unlink (filename) != 0)\n+    fatal_error (__LINE__, \"Failed to erase test file.\", errno);\n+}\n+\n+\n+/* run_tests:\n+    Run expandargv\n+    Compare argv before and after.\n+    Return number of fails */\n+\n+int\n+run_tests (const char **test_data)\n+{\n+  int argc_after, argc_before;\n+  char ** argv_before, ** argv_after;\n+  int i, j, k, fails, failed;\n+\n+  i = j = fails = 0;\n+  /* Loop over all the tests */\n+  while (test_data[j])\n+    {\n+      /* Write test data */\n+      writeout_test (i, test_data[j++]);\n+      /* Copy argv before */\n+      argv_before = dupargv ((char **) &test_data[j]);\n+\n+      /* Count argc before/after */\n+      argc_before = 0;\n+      argc_after = 0;\n+      while (test_data[j + argc_before])\n+        argc_before++;\n+      j += argc_before + 1; /* Skip null */\n+      while (test_data[j + argc_after])\n+        argc_after++;\n+\n+      /* Copy argv after */\n+      argv_after = dupargv ((char **) &test_data[j]);\n+\n+      /* Run all possible replaces */\n+      for (k = 0; k < argc_before; k++)\n+        run_replaces (argv_before[k]);\n+      for (k = 0; k < argc_after; k++)\n+        run_replaces (argv_after[k]);\n+\n+      /* Run test: Expand arguments */\n+      expandargv (&argc_before, &argv_before);\n+\n+      failed = 0;\n+      /* Compare size first */\n+      if (argc_before != argc_after)\n+        {\n+          printf (\"FAIL: test-expandargv-%d. Number of arguments don't match.\\n\", i);\n+\t  failed++;\n+        }\n+      /* Compare each of the argv's ... */\n+      else\n+        for (k = 0; k < argc_after; k++)\n+          if (strncmp (argv_before[k], argv_after[k], strlen(argv_after[k])) != 0)\n+            {\n+              printf (\"FAIL: test-expandargv-%d. Arguments don't match.\\n\", i);\n+              failed++;\n+            }\n+\n+      if (!failed)\n+        printf (\"PASS: test-expandargv-%d.\\n\", i);\n+      else\n+        fails++;\n+\n+      freeargv (argv_before);\n+      freeargv (argv_after);\n+      /* Advance to next test */\n+      j += argc_after + 1;\n+      /* Erase test file */\n+      erase_test (i);\n+      i++;\n+    }\n+  return fails;\n+}\n+\n+/* main:\n+    Run tests. \n+    Check result and exit with appropriate code. */\n+\n+int \n+main(int argc, char **argv)\n+{\n+  int fails;\n+  /* Repeat for all the tests:\n+     - Parse data array and write into file.\n+       - Run replace hooks before writing to file.\n+     - Parse data array and build argv before/after.\n+       - Run replace hooks on argv before/after\n+     - Run expandargv.\n+     - Compare output of expandargv argv to after argv.\n+       - If they compare the same then test passes\n+         else the test fails. \n+     - Erase test file. */\n+\n+  fails = run_tests (test_data);\n+  if (!fails)\n+    exit (EXIT_SUCCESS);\n+  else\n+    exit (EXIT_FAILURE);\n+}\n+"}]}