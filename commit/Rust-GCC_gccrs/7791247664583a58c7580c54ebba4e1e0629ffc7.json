{"sha": "7791247664583a58c7580c54ebba4e1e0629ffc7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc5MTI0NzY2NDU4M2E1OGM3NTgwYzU0ZWJiYTRlMWUwNjI5ZmZjNw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-09-29T23:02:58Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-09-29T23:02:58Z"}, "message": "(yylex): Add new arg, TYPE, to call to build_complex.\n\nFrom-SVN: r12864", "tree": {"sha": "23374a8841296116b6ffe76eeb3e84b3c941fa44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23374a8841296116b6ffe76eeb3e84b3c941fa44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7791247664583a58c7580c54ebba4e1e0629ffc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7791247664583a58c7580c54ebba4e1e0629ffc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7791247664583a58c7580c54ebba4e1e0629ffc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7791247664583a58c7580c54ebba4e1e0629ffc7/comments", "author": null, "committer": null, "parents": [{"sha": "b217d7febe66988b50d0dd41303dc332c0281acc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b217d7febe66988b50d0dd41303dc332c0281acc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b217d7febe66988b50d0dd41303dc332c0281acc"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "d8e9e80da407fe0dbfc0ccdb789f189b6cf89b0e", "filename": "gcc/c-lex.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7791247664583a58c7580c54ebba4e1e0629ffc7/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7791247664583a58c7580c54ebba4e1e0629ffc7/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=7791247664583a58c7580c54ebba4e1e0629ffc7", "patch": "@@ -1465,7 +1465,8 @@ yylex ()\n \n \t    /* Create a node with determined type and value.  */\n \t    if (imag)\n-\t      yylval.ttype = build_complex (convert (type, integer_zero_node),\n+\t      yylval.ttype = build_complex (NULL_TREE,\n+\t\t\t\t\t    convert (type, integer_zero_node),\n \t\t\t\t\t    build_real (type, value));\n \t    else\n \t      yylval.ttype = build_real (type, value);\n@@ -1634,8 +1635,9 @@ yylex ()\n \t\tif (TYPE_PRECISION (type)\n \t\t    <= TYPE_PRECISION (integer_type_node))\n \t\t  yylval.ttype\n-\t\t    = build_complex (integer_zero_node,\n-\t\t\t\t     convert (integer_type_node, yylval.ttype));\n+\t\t    = build_complex (NULL_TREE, integer_zero_node,\n+\t\t\t\t     convert (integer_type_node,\n+\t\t\t\t\t      yylval.ttype));\n \t\telse\n \t\t  error (\"complex integer constant is too wide for `complex int'\");\n \t      }"}]}