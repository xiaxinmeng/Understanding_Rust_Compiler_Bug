{"sha": "6abe1c3084798d3e5f32926c352643e557073e01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFiZTFjMzA4NDc5OGQzZTVmMzI5MjZjMzUyNjQzZTU1NzA3M2UwMQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-05-02T19:46:44Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-05-02T19:46:55Z"}, "message": "gfortran: Get asan library from TEST_ALWAYS_FLAGS\n\nUpdate gfortran_target_compile to get the newly built asan library from\nTEST_ALWAYS_FLAGS to avoid:\n\n/usr/bin/ld: cannot find libasan_preinit.o: No such file or directory\n/usr/bin/ld: cannot find -lasan\ncollect2: error: ld returned 1 exit status\ncompiler exited with status 1\nFAIL: gfortran.dg/asan/pointer_assign_16.f90 -fsanitize=address  -O0  (test for excess errors)\n\n\tPR fortran/94788\n\t* lib/gfortran.exp (gfortran_target_compile): Get asan library\n\tfrom TEST_ALWAYS_FLAGS.", "tree": {"sha": "2c0efa69af61cc41cbef8d5c69a4537d033a6101", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c0efa69af61cc41cbef8d5c69a4537d033a6101"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6abe1c3084798d3e5f32926c352643e557073e01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6abe1c3084798d3e5f32926c352643e557073e01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6abe1c3084798d3e5f32926c352643e557073e01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6abe1c3084798d3e5f32926c352643e557073e01/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7df457899078c5889194c1736cffcfd4d50f5305", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7df457899078c5889194c1736cffcfd4d50f5305", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7df457899078c5889194c1736cffcfd4d50f5305"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "b0c6f9a8cefdd2063253487d39e7d5b90a37d4ea", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6abe1c3084798d3e5f32926c352643e557073e01/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6abe1c3084798d3e5f32926c352643e557073e01/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6abe1c3084798d3e5f32926c352643e557073e01", "patch": "@@ -1,3 +1,9 @@\n+2020-05-02  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR fortran/94788\n+\t* lib/gfortran.exp (gfortran_target_compile): Get asan library\n+\tfrom TEST_ALWAYS_FLAGS.\n+\n 2020-05-02  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/94788"}, {"sha": "fe99111788f8715656c6918464ce790667096f88", "filename": "gcc/testsuite/lib/gfortran.exp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6abe1c3084798d3e5f32926c352643e557073e01/gcc%2Ftestsuite%2Flib%2Fgfortran.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6abe1c3084798d3e5f32926c352643e557073e01/gcc%2Ftestsuite%2Flib%2Fgfortran.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgfortran.exp?ref=6abe1c3084798d3e5f32926c352643e557073e01", "patch": "@@ -234,6 +234,7 @@ proc gfortran_target_compile { source dest type options } {\n     global gluefile wrap_flags\n     global ALWAYS_GFORTRANFLAGS\n     global GFORTRAN_UNDER_TEST\n+    global TEST_ALWAYS_FLAGS\n     global flags_to_postpone\n     global board_info\n \n@@ -242,6 +243,13 @@ proc gfortran_target_compile { source dest type options } {\n \tlappend options \"ldflags=${wrap_flags}\"\n     }\n \n+    # TEST_ALWAYS_FLAGS are flags that should be passed to every\n+    # compilation.  They are passed first to allow individual\n+    # tests to override them.\n+    if [info exists TEST_ALWAYS_FLAGS] {\n+\tset options [concat \"{additional_flags=$TEST_ALWAYS_FLAGS}\" $options]\n+    }\n+\n     # bind_pic_locally adds -fpie/-fPIE flags to flags_to_postpone and it is\n     # appended here to multilib_flags as it can be overridden by the latter\n     # if it was added earlier. After the target_compile, multilib_flags is"}]}