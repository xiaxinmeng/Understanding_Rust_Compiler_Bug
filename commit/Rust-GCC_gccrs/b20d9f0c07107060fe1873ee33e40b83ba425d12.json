{"sha": "b20d9f0c07107060fe1873ee33e40b83ba425d12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjIwZDlmMGMwNzEwNzA2MGZlMTg3M2VlMzNlNDBiODNiYTQyNWQxMg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2003-08-05T21:15:57Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2003-08-05T21:15:57Z"}, "message": "c.opt: Introduce -fworking-directory.\n\n* c.opt: Introduce -fworking-directory.\n* doc/cpp.texi, doc/invoke.texi, doc/cppopts.texi: Document it.\n* c-common.h (flag_working_directory): Declare.\n* c-common.c (flag_working_directory): Define.\n* c-opts.c (c_common_handle_options): Set it.\n(sanitize_cpp_opts): Set...\n* cpplib.h (struct cpp_options): ... working_directory option.\n(struct cpp_callbacks): Add dir_change.\n* cppinit.c (read_original_filename): Call...\n(read_original_directory): New.  Look for # 1 \"directory//\"\nand process it.\n(cpp_read_main_file): Call dir_change callback if working_directory\noption is set.\n* gcc.c (cpp_unique_options): Pass -g*.\n* c-lex.c (cb_dir_change): New.\n(init_c_lex): Set dir_change callback.\n* toplev.c (src_pwd): New static variable.\n(set_src_pwd, get_src_pwd): New functions.\n* toplev.h (get_src_pwd, set_src_pwd): Declare.\n* dbxout.c (dbxout_init): Call get_src_pwd() instead of getpwd().\n* dwarf2out.c (gen_compile_unit_die): Likewise.\n* dwarfout.c (output_compile_unit_die, dwarfout_init): Likewise.\n\nFrom-SVN: r70189", "tree": {"sha": "b7f8db5c8aee0a49ffa5b4f9b148561a8a68a233", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7f8db5c8aee0a49ffa5b4f9b148561a8a68a233"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b20d9f0c07107060fe1873ee33e40b83ba425d12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b20d9f0c07107060fe1873ee33e40b83ba425d12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b20d9f0c07107060fe1873ee33e40b83ba425d12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b20d9f0c07107060fe1873ee33e40b83ba425d12/comments", "author": null, "committer": null, "parents": [{"sha": "1260d70fb61e50255cf7f185efff31f568a7049c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1260d70fb61e50255cf7f185efff31f568a7049c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1260d70fb61e50255cf7f185efff31f568a7049c"}], "stats": {"total": 224, "additions": 215, "deletions": 9}, "files": [{"sha": "8aa7b430d1937a3f3d4c2e68f9ea9cdf775785c3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20d9f0c07107060fe1873ee33e40b83ba425d12/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20d9f0c07107060fe1873ee33e40b83ba425d12/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b20d9f0c07107060fe1873ee33e40b83ba425d12", "patch": "@@ -1,3 +1,28 @@\n+2003-08-05  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* c.opt: Introduce -fworking-directory.\n+\t* doc/cpp.texi, doc/invoke.texi, doc/cppopts.texi: Document it.\n+\t* c-common.h (flag_working_directory): Declare.\n+\t* c-common.c (flag_working_directory): Define.\n+\t* c-opts.c (c_common_handle_options): Set it.\n+\t(sanitize_cpp_opts): Set...\n+\t* cpplib.h (struct cpp_options): ... working_directory option.\n+\t(struct cpp_callbacks): Add dir_change.\n+\t* cppinit.c (read_original_filename): Call...\n+\t(read_original_directory): New.  Look for # 1 \"directory//\"\n+\tand process it.\n+\t(cpp_read_main_file): Call dir_change callback if working_directory\n+\toption is set.\n+\t* gcc.c (cpp_unique_options): Pass -g*.\n+\t* c-lex.c (cb_dir_change): New.\n+\t(init_c_lex): Set dir_change callback.\n+\t* toplev.c (src_pwd): New static variable.\n+\t(set_src_pwd, get_src_pwd): New functions.\n+\t* toplev.h (get_src_pwd, set_src_pwd): Declare.\n+\t* dbxout.c (dbxout_init): Call get_src_pwd() instead of getpwd().\n+\t* dwarf2out.c (gen_compile_unit_die): Likewise.\n+\t* dwarfout.c (output_compile_unit_die, dwarfout_init): Likewise.\n+\n 2003-08-05  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* pretty-print.h (pp_set_line_maximum_length): Make macro."}, {"sha": "267ede38197ab3dcdcd055ed5ad46de4ab5fc172", "filename": "gcc/c-common.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20d9f0c07107060fe1873ee33e40b83ba425d12/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20d9f0c07107060fe1873ee33e40b83ba425d12/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=b20d9f0c07107060fe1873ee33e40b83ba425d12", "patch": "@@ -559,6 +559,13 @@ int flag_new_for_scope = 1;\n \n int flag_weak = 1;\n \n+/* 0 means we want the preprocessor to not emit line directives for\n+   the current working directory.  1 means we want it to do it.  -1\n+   means we should decide depending on whether debugging information\n+   is being emitted or not.  */\n+\n+int flag_working_directory = -1;\n+\n /* Nonzero to use __cxa_atexit, rather than atexit, to register\n    destructors for local statics and global objects.  */\n "}, {"sha": "6230ac937ef3469d7fe5e86b111aa98309355123", "filename": "gcc/c-common.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20d9f0c07107060fe1873ee33e40b83ba425d12/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20d9f0c07107060fe1873ee33e40b83ba425d12/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=b20d9f0c07107060fe1873ee33e40b83ba425d12", "patch": "@@ -716,6 +716,13 @@ extern int flag_new_for_scope;\n \n extern int flag_weak;\n \n+/* 0 means we want the preprocessor to not emit line directives for\n+   the current working directory.  1 means we want it to do it.  -1\n+   means we should decide depending on whether debugging information\n+   is being emitted or not.  */\n+\n+extern int flag_working_directory;\n+\n /* Nonzero to use __cxa_atexit, rather than atexit, to register\n    destructors for local statics and global objects.  */\n "}, {"sha": "47515e7b7032020e8963ce4962b339bf126cf708", "filename": "gcc/c-lex.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20d9f0c07107060fe1873ee33e40b83ba425d12/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20d9f0c07107060fe1873ee33e40b83ba425d12/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=b20d9f0c07107060fe1873ee33e40b83ba425d12", "patch": "@@ -72,6 +72,7 @@ static tree lex_charconst (const cpp_token *);\n static void update_header_times (const char *);\n static int dump_one_header (splay_tree_node, void *);\n static void cb_line_change (cpp_reader *, const cpp_token *, int);\n+static void cb_dir_change (cpp_reader *, const char *);\n static void cb_ident (cpp_reader *, unsigned int, const cpp_string *);\n static void cb_def_pragma (cpp_reader *, unsigned int);\n static void cb_define (cpp_reader *, unsigned int, cpp_hashnode *);\n@@ -98,6 +99,7 @@ init_c_lex (void)\n   cb = cpp_get_callbacks (parse_in);\n \n   cb->line_change = cb_line_change;\n+  cb->dir_change = cb_dir_change;\n   cb->ident = cb_ident;\n   cb->def_pragma = cb_def_pragma;\n   cb->valid_pch = c_common_valid_pch;\n@@ -200,6 +202,13 @@ cb_line_change (cpp_reader *pfile ATTRIBUTE_UNUSED, const cpp_token *token,\n   src_lineno = SOURCE_LINE (map, token->line);\n }\n \n+static void\n+cb_dir_change (cpp_reader *pfile ATTRIBUTE_UNUSED, const char *dir)\n+{\n+  if (! set_src_pwd (dir))\n+    warning (\"too late for # directive to set debug directory\");\n+}\n+\n void\n fe_file_change (const struct line_map *new_map)\n {"}, {"sha": "e2a30430997eeb05b5eccdfb48ccfcf42ca8c2e6", "filename": "gcc/c-opts.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20d9f0c07107060fe1873ee33e40b83ba425d12/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20d9f0c07107060fe1873ee33e40b83ba425d12/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=b20d9f0c07107060fe1873ee33e40b83ba425d12", "patch": "@@ -235,7 +235,7 @@ c_common_init_options (unsigned int argc, const char **argv ATTRIBUTE_UNUSED)\n   return result;\n }\n \n-/* Handle switch SCODE with argument ARG.  ON is true, unless no-\n+/* Handle switch SCODE with argument ARG.  VALUE is true, unless no-\n    form of an -f or -W option was given.  Returns 0 if the switch was\n    invalid, a negative number to prevent language-independent\n    processing in toplev.c (a hack necessary for the short-term).  */\n@@ -335,6 +335,10 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       flag_no_line_commands = 1;\n       break;\n \n+    case OPT_fworking_directory:\n+      flag_working_directory = value;\n+      break;\n+\n     case OPT_U:\n       defer_opt (code, arg);\n       break;\n@@ -1329,6 +1333,15 @@ sanitize_cpp_opts (void)\n      and/or -Wtraditional, whatever the ordering.  */\n   cpp_opts->warn_long_long\n     = warn_long_long && ((!flag_isoc99 && pedantic) || warn_traditional);\n+\n+  /* If we're generating preprocessor output, emit current directory\n+     if explicitly requested or if debugging information is enabled.\n+     ??? Maybe we should only do it for debugging formats that\n+     actually output the current directory?  */\n+  if (flag_working_directory == -1)\n+    flag_working_directory = (debug_info_level != DINFO_LEVEL_NONE);\n+  cpp_opts->working_directory\n+    = flag_preprocess_only && flag_working_directory;\n }\n \n /* Add include path with a prefix at the front of its name.  */"}, {"sha": "229414f6c1a7c2815158c41189ad5eeeee8f67ca", "filename": "gcc/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20d9f0c07107060fe1873ee33e40b83ba425d12/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20d9f0c07107060fe1873ee33e40b83ba425d12/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=b20d9f0c07107060fe1873ee33e40b83ba425d12", "patch": "@@ -650,6 +650,10 @@ fwide-exec-charset=\n C ObjC C++ ObjC++ Joined RejectNegative\n -fwide-exec-charset=<cset>\tConvert all wide strings and character constants to character set <cset>\n \n+fworking-directory\n+C ObjC C++ ObjC++\n+Generate a #line directive pointing at the current working directory\n+\n fxref\n C++ ObjC++\n Emit cross referencing information"}, {"sha": "4ef7e24998cd308e68a1cde1e6f1fc0bf07e5924", "filename": "gcc/cppinit.c", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20d9f0c07107060fe1873ee33e40b83ba425d12/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20d9f0c07107060fe1873ee33e40b83ba425d12/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=b20d9f0c07107060fe1873ee33e40b83ba425d12", "patch": "@@ -28,6 +28,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n static void init_library (void);\n static void mark_named_operators (cpp_reader *);\n static void read_original_filename (cpp_reader *);\n+static void read_original_directory (cpp_reader *);\n static void post_options (cpp_reader *);\n \n /* If we have designated initializers (GCC >2.7) these tables can be\n@@ -470,6 +471,24 @@ cpp_read_main_file (cpp_reader *pfile, const char *fname)\n   if (CPP_OPTION (pfile, preprocessed))\n     read_original_filename (pfile);\n \n+  if (CPP_OPTION (pfile, working_directory))\n+    {\n+      const char *name = pfile->map->to_file;\n+      const char *dir = getpwd ();\n+      char *dir_with_slashes = alloca (strlen (dir) + 3);\n+\n+      memcpy (dir_with_slashes, dir, strlen (dir));\n+      memcpy (dir_with_slashes + strlen (dir), \"//\", 3);\n+\n+      if (pfile->cb.dir_change)\n+\tpfile->cb.dir_change (pfile, dir);\n+      /* Emit file renames that will be recognized by\n+\t read_directory_filename, since dir_change doesn't output\n+\t anything.  */\n+      _cpp_do_file_change (pfile, LC_RENAME, dir_with_slashes, 1, 0);\n+      _cpp_do_file_change (pfile, LC_RENAME, name, 1, 0);\n+    }\n+\n   return pfile->map->to_file;\n }\n \n@@ -494,6 +513,7 @@ read_original_filename (cpp_reader *pfile)\n       if (token1->type == CPP_NUMBER)\n \t{\n \t  _cpp_handle_directive (pfile, token->flags & PREV_WHITE);\n+\t  read_original_directory (pfile);\n \t  return;\n \t}\n     }\n@@ -502,6 +522,60 @@ read_original_filename (cpp_reader *pfile)\n   _cpp_backup_tokens (pfile, 1);\n }\n \n+/* For preprocessed files, if the tokens following the first filename\n+   line is of the form # <line> \"/path/name//\", handle the\n+   directive so we know the original current directory.  */\n+static void\n+read_original_directory (cpp_reader *pfile)\n+{\n+  const cpp_token *hash, *token;\n+\n+  /* Lex ahead; if the first tokens are of the form # NUM, then\n+     process the directive, otherwise back up.  */\n+  hash = _cpp_lex_direct (pfile);\n+  if (hash->type != CPP_HASH)\n+    {\n+      _cpp_backup_tokens (pfile, 1);\n+      return;\n+    }\n+\n+  token = _cpp_lex_direct (pfile);\n+\n+  if (token->type != CPP_NUMBER)\n+    {\n+      _cpp_backup_tokens (pfile, 2);\n+      return;\n+    }\n+\n+  token = _cpp_lex_direct (pfile);\n+\n+  if (token->type != CPP_STRING\n+      || ! (token->val.str.len >= 5\n+\t    && token->val.str.text[token->val.str.len-2] == '/'\n+\t    && token->val.str.text[token->val.str.len-3] == '/'))\n+    {\n+      _cpp_backup_tokens (pfile, 3);\n+      return;\n+    }\n+\n+  if (pfile->cb.dir_change)\n+    {\n+      char *debugdir = alloca (token->val.str.len - 3);\n+\n+      memcpy (debugdir, (const char *) token->val.str.text + 1,\n+\t      token->val.str.len - 4);\n+      debugdir[token->val.str.len - 4] = '\\0';\n+\n+      pfile->cb.dir_change (pfile, debugdir);\n+    }      \n+\n+  /* We want to process the fake line changes as regular changes, to\n+     get them output.  */\n+  _cpp_backup_tokens (pfile, 3);\n+\n+  CPP_OPTION (pfile, working_directory) = false;\n+}\n+\n /* This is called at the end of preprocessing.  It pops the last\n    buffer and writes dependency output, and returns the number of\n    errors."}, {"sha": "57fc0b1308678a43ddc83a334f141ac8eb82dcc7", "filename": "gcc/cpplib.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20d9f0c07107060fe1873ee33e40b83ba425d12/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20d9f0c07107060fe1873ee33e40b83ba425d12/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=b20d9f0c07107060fe1873ee33e40b83ba425d12", "patch": "@@ -370,6 +370,11 @@ struct cpp_options\n \n   /* Nonzero means __STDC__ should have the value 0 in system headers.  */\n   unsigned char stdc_0_in_system_headers;\n+\n+  /* Nonzero means output a directory line marker right after the\n+     initial file name line marker, and before a duplicate initial\n+     line marker.  */\n+  bool working_directory;\n };\n \n /* Call backs to cpplib client.  */\n@@ -378,6 +383,7 @@ struct cpp_callbacks\n   /* Called when a new line of preprocessed output is started.  */\n   void (*line_change) (cpp_reader *, const cpp_token *, int);\n   void (*file_change) (cpp_reader *, const struct line_map *);\n+  void (*dir_change) (cpp_reader *, const char *);\n   void (*include) (cpp_reader *, unsigned int, const unsigned char *,\n \t\t   const char *, int);\n   void (*define) (cpp_reader *, unsigned int, cpp_hashnode *);"}, {"sha": "d257729d8f8ed2e9505e0c1e7aa5efd901797365", "filename": "gcc/dbxout.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20d9f0c07107060fe1873ee33e40b83ba425d12/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20d9f0c07107060fe1873ee33e40b83ba425d12/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=b20d9f0c07107060fe1873ee33e40b83ba425d12", "patch": "@@ -469,7 +469,8 @@ dbxout_init (const char *input_file_name)\n   /* Put the current working directory in an N_SO symbol.  */\n   if (use_gnu_debug_info_extensions)\n     {\n-      if (!cwd && (cwd = getpwd ()) && (!*cwd || cwd[strlen (cwd) - 1] != '/'))\n+      if (!cwd && (cwd = get_src_pwd ())\n+\t  && (!*cwd || cwd[strlen (cwd) - 1] != '/'))\n \tcwd = concat (cwd, FILE_NAME_JOINER, NULL);\n       if (cwd)\n \t{"}, {"sha": "2db1ee1ff116d969b2898ed8b604a890e5a01c58", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20d9f0c07107060fe1873ee33e40b83ba425d12/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20d9f0c07107060fe1873ee33e40b83ba425d12/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=b20d9f0c07107060fe1873ee33e40b83ba425d12", "patch": "@@ -4133,7 +4133,9 @@ without notice.\n cpp [@option{-D}@var{macro}[=@var{defn}]@dots{}] [@option{-U}@var{macro}]\n     [@option{-I}@var{dir}@dots{}] [@option{-W}@var{warn}@dots{}]\n     [@option{-M}|@option{-MM}] [@option{-MG}] [@option{-MF} @var{filename}]\n-    [@option{-MP}] [@option{-MQ} @var{target}@dots{}] [@option{-MT} @var{target}@dots{}]\n+    [@option{-MP}] [@option{-MQ} @var{target}@dots{}]\n+    [@option{-MT} @var{target}@dots{}]\n+    [@option{-P}] [@option{-fno-working-directory}] \n     [@option{-x} @var{language}] [@option{-std=}@var{standard}]\n     @var{infile} @var{outfile}\n "}, {"sha": "4988227213d35419c912a59fecf97a88082a6a0d", "filename": "gcc/doc/cppopts.texi", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20d9f0c07107060fe1873ee33e40b83ba425d12/gcc%2Fdoc%2Fcppopts.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20d9f0c07107060fe1873ee33e40b83ba425d12/gcc%2Fdoc%2Fcppopts.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppopts.texi?ref=b20d9f0c07107060fe1873ee33e40b83ba425d12", "patch": "@@ -1,4 +1,4 @@\n-@c Copyright (c) 1999, 2000, 2001, 2002\n+@c Copyright (c) 1999, 2000, 2001, 2002, 2003\n @c Free Software Foundation, Inc.\n @c This is part of the CPP and GCC manuals.\n @c For copying conditions, see the file gcc.texi.\n@@ -513,6 +513,22 @@ corresponds to the width of @code{wchar_t}.  As with\n by the system's @code{iconv} library routine; however, you will have\n problems with encodings that do not fit exactly in @code{wchar_t}.\n \n+@item -fworking-directory\n+@opindex fworking-directory\n+@opindex fno-working-directory\n+Enable generation of linemarkers in the preprocessor output that will\n+let the compiler know the current working directory at the time of\n+preprocessing.  When this option is enabled, the preprocessor will\n+emit, after the initial linemarker, a second linemarker with the\n+current working directory followed by two slashes.  GCC will use this\n+directory, when it's present in the preprocessed input, as the\n+directory emitted as the current working directory in some debugging\n+information formats.  This option is implicitly enabled if debugging\n+information is enabled, but this can be inhibited with the negated\n+form @option{-fno-working-directory}.  If the @option{-P} flag is\n+present in the command line, this option has no effect, since no\n+@code{#line} directives are emitted whatsoever.\n+\n @item -fno-show-column\n @opindex fno-show-column\n Do not print column numbers in diagnostics.  This may be necessary if"}, {"sha": "40cba57d005bf27095af1b4884b25bde8562f14a", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20d9f0c07107060fe1873ee33e40b83ba425d12/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20d9f0c07107060fe1873ee33e40b83ba425d12/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=b20d9f0c07107060fe1873ee33e40b83ba425d12", "patch": "@@ -301,7 +301,8 @@ in the following sections.\n -include @var{file}  -imacros @var{file} @gol\n -iprefix @var{file}  -iwithprefix @var{dir} @gol\n -iwithprefixbefore @var{dir}  -isystem @var{dir} @gol\n--M  -MM  -MF  -MG  -MP  -MQ  -MT  -nostdinc  -P  -remap @gol\n+-M  -MM  -MF  -MG  -MP  -MQ  -MT  -nostdinc  @gol\n+-P  -fworking-directory  -remap @gol\n -trigraphs  -undef  -U@var{macro}  -Wp,@var{option} @gol\n -Xpreprocessor @var{option}}\n "}, {"sha": "81cb7ecf5c99c2a44287334a0cefc66baaa606e4", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20d9f0c07107060fe1873ee33e40b83ba425d12/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20d9f0c07107060fe1873ee33e40b83ba425d12/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=b20d9f0c07107060fe1873ee33e40b83ba425d12", "patch": "@@ -9506,7 +9506,7 @@ add_name_attribute (dw_die_ref die, const char *name_string)\n static void\n add_comp_dir_attribute (dw_die_ref die)\n {\n-  const char *wd = getpwd ();\n+  const char *wd = get_src_pwd ();\n   if (wd != NULL)\n     add_AT_string (die, DW_AT_comp_dir, wd);\n }"}, {"sha": "cd4dc050661c425a3983348c1f69d2fe77c90261", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20d9f0c07107060fe1873ee33e40b83ba425d12/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20d9f0c07107060fe1873ee33e40b83ba425d12/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=b20d9f0c07107060fe1873ee33e40b83ba425d12", "patch": "@@ -4043,7 +4043,7 @@ output_compile_unit_die (void *arg)\n     stmt_list_attribute (LINE_BEGIN_LABEL);\n \n   {\n-    const char *wd = getpwd ();\n+    const char *wd = get_src_pwd ();\n     if (wd)\n       comp_dir_attribute (wd);\n   }\n@@ -6114,7 +6114,7 @@ dwarfout_init (const char *main_input_filename)\n \t  ASM_OUTPUT_PUSH_SECTION (asm_out_file, DEBUG_SFNAMES_SECTION);\n \t  ASM_OUTPUT_LABEL (asm_out_file, SFNAMES_BEGIN_LABEL);\n \t  {\n-\t    const char *pwd = getpwd ();\n+\t    const char *pwd = get_src_pwd ();\n \t    char *dirname;\n \n \t    if (!pwd)"}, {"sha": "f18b1684876a93541cce1ad05ce7c991adcd6d41", "filename": "gcc/gcc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20d9f0c07107060fe1873ee33e40b83ba425d12/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20d9f0c07107060fe1873ee33e40b83ba425d12/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=b20d9f0c07107060fe1873ee33e40b83ba425d12", "patch": "@@ -755,7 +755,7 @@ static const char *cpp_unique_options =\n    in turn cause preprocessor symbols to be defined specially.  */\n static const char *cpp_options =\n \"%(cpp_unique_options) %1 %{m*} %{std*} %{ansi} %{W*&pedantic*} %{w} %{f*}\\\n- %{O*} %{undef}\";\n+ %{g*} %{O*} %{undef}\";\n \n /* This contains cpp options which are not passed when the preprocessor\n    output will be used by another program.  */"}, {"sha": "73d459ac5bf4d4c5efaf9753e33036e2d75d3b9a", "filename": "gcc/toplev.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20d9f0c07107060fe1873ee33e40b83ba425d12/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20d9f0c07107060fe1873ee33e40b83ba425d12/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=b20d9f0c07107060fe1873ee33e40b83ba425d12", "patch": "@@ -1219,6 +1219,41 @@ FILE *aux_info_file;\n FILE *rtl_dump_file = NULL;\n FILE *cgraph_dump_file = NULL;\n \n+/* The current working directory of a translation.  It's generally the\n+   directory from which compilation was initiated, but a preprocessed\n+   file may specify the original directory in which it was\n+   created.  */\n+\n+static const char *src_pwd;\n+\n+/* Initialize src_pwd with the given string, and return true.  If it\n+   was already initialized, return false.  As a special case, it may\n+   be called with a NULL argument to test whether src_pwd has NOT been\n+   initialized yet.  */\n+\n+bool\n+set_src_pwd (const char *pwd)\n+{\n+  if (src_pwd)\n+    return false;\n+\n+  src_pwd = xstrdup (pwd);\n+  return true;\n+}\n+\n+/* Return the directory from which the translation unit was initiated,\n+   in case set_src_pwd() was not called before to assign it a\n+   different value.  */\n+\n+const char *\n+get_src_pwd (void)\n+{\n+  if (! src_pwd)\n+    src_pwd = getpwd ();\n+\n+   return src_pwd;\n+}\n+\n /* Set up a default flag_random_seed and local_tick, unless the user\n    already specified one.  */\n "}, {"sha": "71a9fd5bfadf50aa216a738fda90e4e49b526826", "filename": "gcc/toplev.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20d9f0c07107060fe1873ee33e40b83ba425d12/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20d9f0c07107060fe1873ee33e40b83ba425d12/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=b20d9f0c07107060fe1873ee33e40b83ba425d12", "patch": "@@ -155,4 +155,10 @@ extern bool fast_math_flags_set_p\t(void);\n extern int exact_log2_wide             (unsigned HOST_WIDE_INT);\n extern int floor_log2_wide             (unsigned HOST_WIDE_INT);\n \n+/* Functions used to get and set GCC's notion of in what directory\n+   compilation was started.  */\n+\n+extern const char *get_src_pwd\t       (void);\n+extern bool set_src_pwd\t\t       (const char *);\n+\n #endif /* ! GCC_TOPLEV_H */"}]}