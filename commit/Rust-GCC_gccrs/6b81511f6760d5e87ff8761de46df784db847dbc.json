{"sha": "6b81511f6760d5e87ff8761de46df784db847dbc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI4MTUxMWY2NzYwZDVlODdmZjg3NjFkZTQ2ZGY3ODRkYjg0N2RiYw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-12-25T13:49:54Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-12-25T13:49:54Z"}, "message": "hashtable_policy.h (__lower_bound): Add.\n\n2007-12-25  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1_impl/hashtable_policy.h (__lower_bound): Add.\n\t(_Prime_rehash_policy::_M_next_bkt, _M_bkt_for_elements,\n\t_M_need_rehash): Use __lower_bound.\n\t* include/std/unordered_map: Do not include the whole <algorithm>,\n\tinclude <bits/stl_algobase.h>.\n\t* include/std/unordered_set: Likewise.\n\t* include/tr1/unordered_map: Likewise.\n\t* include/tr1/unordered_set: Likewise.\n\nFrom-SVN: r131170", "tree": {"sha": "b58f47044fb63244d36629ce7ec253fa88ec3eb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b58f47044fb63244d36629ce7ec253fa88ec3eb9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b81511f6760d5e87ff8761de46df784db847dbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b81511f6760d5e87ff8761de46df784db847dbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b81511f6760d5e87ff8761de46df784db847dbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b81511f6760d5e87ff8761de46df784db847dbc/comments", "author": null, "committer": null, "parents": [{"sha": "1283ab121d8d5ef620e27fcdf4349321dbb0352f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1283ab121d8d5ef620e27fcdf4349321dbb0352f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1283ab121d8d5ef620e27fcdf4349321dbb0352f"}], "stats": {"total": 53, "additions": 43, "deletions": 10}, "files": [{"sha": "b870e82046206f4e5cb29f6c5f6452058181a20a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b81511f6760d5e87ff8761de46df784db847dbc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b81511f6760d5e87ff8761de46df784db847dbc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6b81511f6760d5e87ff8761de46df784db847dbc", "patch": "@@ -1,3 +1,14 @@\n+2007-12-25  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1_impl/hashtable_policy.h (__lower_bound): Add.\n+\t(_Prime_rehash_policy::_M_next_bkt, _M_bkt_for_elements,\n+\t_M_need_rehash): Use __lower_bound.\n+\t* include/std/unordered_map: Do not include the whole <algorithm>,\n+\tinclude <bits/stl_algobase.h>.\n+\t* include/std/unordered_set: Likewise.\n+\t* include/tr1/unordered_map: Likewise.\n+\t* include/tr1/unordered_set: Likewise.\n+\n 2007-12-24  Paolo Carlini  <pcarlini@suse.de>\n \n \t* testsuite/20_util/tuple/cons/big_tuples.cc: New."}, {"sha": "5fb714dd48db289deb2f7d31599780ce480c5f69", "filename": "libstdc++-v3/include/std/unordered_map", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b81511f6760d5e87ff8761de46df784db847dbc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b81511f6760d5e87ff8761de46df784db847dbc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_map?ref=6b81511f6760d5e87ff8761de46df784db847dbc", "patch": "@@ -45,8 +45,8 @@\n #endif\n \n #include <utility>\n-#include <algorithm> // lower_bound\n #include <type_traits>\n+#include <bits/stl_algobase.h>\n #include <bits/allocator.h>\n #include <bits/stl_function.h> // equal_to, _Identity, _Select1st\n #include <bits/stringfwd.h>"}, {"sha": "1e599840fff9ffb3a559afc945332180002b3573", "filename": "libstdc++-v3/include/std/unordered_set", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b81511f6760d5e87ff8761de46df784db847dbc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b81511f6760d5e87ff8761de46df784db847dbc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_set?ref=6b81511f6760d5e87ff8761de46df784db847dbc", "patch": "@@ -45,8 +45,8 @@\n #endif\n \n #include <utility>\n-#include <algorithm> // lower_bound\n #include <type_traits>\n+#include <bits/stl_algobase.h>\n #include <bits/allocator.h>\n #include <bits/stl_function.h> // equal_to, _Identity, _Select1st\n #include <bits/stringfwd.h>"}, {"sha": "5ab294012db50f85da975147d13f2db46e5ae039", "filename": "libstdc++-v3/include/tr1/unordered_map", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b81511f6760d5e87ff8761de46df784db847dbc/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b81511f6760d5e87ff8761de46df784db847dbc/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_map?ref=6b81511f6760d5e87ff8761de46df784db847dbc", "patch": "@@ -41,7 +41,7 @@\n #endif\n \n #include <utility>\n-#include <algorithm> // lower_bound\n+#include <bits/stl_algobase.h>\n #include <bits/allocator.h>\n #include <bits/stl_function.h> // equal_to, _Identity, _Select1st\n #include <bits/stringfwd.h>"}, {"sha": "8811d4a1f2b9a88a61ef8c2981d3dc17ba5cf121", "filename": "libstdc++-v3/include/tr1/unordered_set", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b81511f6760d5e87ff8761de46df784db847dbc/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b81511f6760d5e87ff8761de46df784db847dbc/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_set?ref=6b81511f6760d5e87ff8761de46df784db847dbc", "patch": "@@ -41,7 +41,7 @@\n #endif\n \n #include <utility>\n-#include <algorithm> // lower_bound\n+#include <bits/stl_algobase.h>\n #include <bits/allocator.h>\n #include <bits/stl_function.h> // equal_to, _Identity, _Select1st\n #include <bits/stringfwd.h>"}, {"sha": "f23f8c6f51db914484b61c3e4dbe338af02961f8", "filename": "libstdc++-v3/include/tr1_impl/hashtable_policy.h", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b81511f6760d5e87ff8761de46df784db847dbc/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b81511f6760d5e87ff8761de46df784db847dbc/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fhashtable_policy.h?ref=6b81511f6760d5e87ff8761de46df784db847dbc", "patch": "@@ -60,6 +60,28 @@ namespace __detail\n       return __distance_fw(__first, __last, _Tag());\n     }\n \n+  template<typename _RAIter, typename _Tp>\n+    _RAIter\n+    __lower_bound(_RAIter __first, _RAIter __last, const _Tp& __val)\n+    {\n+      typedef typename std::iterator_traits<_RAIter>::difference_type _DType;\n+\n+      _DType __len = __last - __first;\n+      while (__len > 0)\n+\t{\n+\t  _DType __half = __len >> 1;\n+\t  _RAIter __middle = __first + __half;\n+\t  if (*__middle < __val)\n+\t    {\n+\t      __first = __middle;\n+\t      ++__first;\n+\t      __len = __len - __half - 1;\n+\t    }\n+\t  else\n+\t    __len = __half;\n+\t}\n+      return __first;\n+    }\n \n   // Auxiliary types used for all instantiations of _Hashtable: nodes\n   // and iterators.\n@@ -423,8 +445,8 @@ namespace __detail\n   _Prime_rehash_policy::\n   _M_next_bkt(std::size_t __n) const\n   {\n-    const unsigned long* __p = std::lower_bound(__prime_list, __prime_list\n-\t\t\t\t\t\t+ _S_n_primes, __n);\n+    const unsigned long* __p = __lower_bound(__prime_list, __prime_list\n+\t\t\t\t\t     + _S_n_primes, __n);\n     _M_next_resize = \n       static_cast<std::size_t>(__builtin_ceil(*__p * _M_max_load_factor));\n     return *__p;\n@@ -437,8 +459,8 @@ namespace __detail\n   _M_bkt_for_elements(std::size_t __n) const\n   {\n     const float __min_bkts = __n / _M_max_load_factor;\n-    const unsigned long* __p = std::lower_bound(__prime_list, __prime_list\n-\t\t\t\t\t\t+ _S_n_primes, __min_bkts);\n+    const unsigned long* __p = __lower_bound(__prime_list, __prime_list\n+\t\t\t\t\t     + _S_n_primes, __min_bkts);\n     _M_next_resize =\n       static_cast<std::size_t>(__builtin_ceil(*__p * _M_max_load_factor));\n     return *__p;\n@@ -466,8 +488,8 @@ namespace __detail\n \t  {\n \t    __min_bkts = std::max(__min_bkts, _M_growth_factor * __n_bkt);\n \t    const unsigned long* __p =\n-\t      std::lower_bound(__prime_list, __prime_list + _S_n_primes,\n-\t\t\t       __min_bkts);\n+\t      __lower_bound(__prime_list, __prime_list + _S_n_primes,\n+\t\t\t    __min_bkts);\n \t    _M_next_resize = static_cast<std::size_t>\n \t      (__builtin_ceil(*__p * _M_max_load_factor));\n \t    return std::make_pair(true, *__p);"}]}