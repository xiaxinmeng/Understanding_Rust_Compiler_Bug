{"sha": "0ecb6b906f215ec56df1a555139abe9ad95414fb", "node_id": "C_kwDOANBUbNoAKDBlY2I2YjkwNmYyMTVlYzU2ZGYxYTU1NTEzOWFiZTlhZDk1NDE0ZmI", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-06-03T18:58:22Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-06-03T18:58:22Z"}, "message": "c++: value-dep but not type-dep decltype expr [PR105756]\n\nHere during ahead of time instantiation of the value-dependent but not\ntype-dependent decltype expression (5 % N) == 0, cp_build_binary_op folds\nthe operands of the == via cp_fully_fold, which performs speculative\nconstexpr evaluation, and from which we crash for (5 % N) due to the\nvalue-dependence.\n\nSince the operand folding performed by cp_build_binary_op appears to\nbe solely for sake of diagnosing overflow, and since these diagnostics\nare suppressed when in an unevaluated context, this patch avoids this\ncrash by suppressing cp_build_binary_op's operand folding accordingly.\n\n\tPR c++/105756\n\ngcc/cp/ChangeLog:\n\n\t* typeck.cc (cp_build_binary_op): Don't fold operands\n\twhen c_inhibit_evaluation_warnings.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/decltype82.C: New test.", "tree": {"sha": "fd733587efa6ed05bdb98f9127ba76a216883535", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd733587efa6ed05bdb98f9127ba76a216883535"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ecb6b906f215ec56df1a555139abe9ad95414fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ecb6b906f215ec56df1a555139abe9ad95414fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ecb6b906f215ec56df1a555139abe9ad95414fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ecb6b906f215ec56df1a555139abe9ad95414fb/comments", "author": null, "committer": null, "parents": [{"sha": "284ae8b46f5eef74c0b660a87a7169497f559e73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/284ae8b46f5eef74c0b660a87a7169497f559e73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/284ae8b46f5eef74c0b660a87a7169497f559e73"}], "stats": {"total": 48, "additions": 31, "deletions": 17}, "files": [{"sha": "f9ce14fe72a1af4ff9773786e66b42f24920de76", "filename": "gcc/cp/typeck.cc", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecb6b906f215ec56df1a555139abe9ad95414fb/gcc%2Fcp%2Ftypeck.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecb6b906f215ec56df1a555139abe9ad95414fb/gcc%2Fcp%2Ftypeck.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.cc?ref=0ecb6b906f215ec56df1a555139abe9ad95414fb", "patch": "@@ -4939,7 +4939,7 @@ cp_build_binary_op (const op_location_t &location,\n      convert it to this type.  */\n   tree final_type = 0;\n \n-  tree result, result_ovl;\n+  tree result;\n \n   /* Nonzero if this is an operation like MIN or MAX which can\n      safely be computed in short if both args are promoted shorts.\n@@ -6263,25 +6263,29 @@ cp_build_binary_op (const op_location_t &location,\n     result = build2 (COMPOUND_EXPR, TREE_TYPE (result),\n \t\t     instrument_expr, result);\n \n-  if (!processing_template_decl)\n+  if (resultcode == SPACESHIP_EXPR && !processing_template_decl)\n+    result = get_target_expr_sfinae (result, complain);\n+\n+  if (!c_inhibit_evaluation_warnings)\n     {\n-      if (resultcode == SPACESHIP_EXPR)\n-\tresult = get_target_expr_sfinae (result, complain);\n-      op0 = cp_fully_fold (op0);\n-      /* Only consider the second argument if the first isn't overflowed.  */\n-      if (!CONSTANT_CLASS_P (op0) || TREE_OVERFLOW_P (op0))\n-\treturn result;\n-      op1 = cp_fully_fold (op1);\n-      if (!CONSTANT_CLASS_P (op1) || TREE_OVERFLOW_P (op1))\n+      if (!processing_template_decl)\n+\t{\n+\t  op0 = cp_fully_fold (op0);\n+\t  /* Only consider the second argument if the first isn't overflowed.  */\n+\t  if (!CONSTANT_CLASS_P (op0) || TREE_OVERFLOW_P (op0))\n+\t    return result;\n+\t  op1 = cp_fully_fold (op1);\n+\t  if (!CONSTANT_CLASS_P (op1) || TREE_OVERFLOW_P (op1))\n+\t    return result;\n+\t}\n+      else if (!CONSTANT_CLASS_P (op0) || !CONSTANT_CLASS_P (op1)\n+\t       || TREE_OVERFLOW_P (op0) || TREE_OVERFLOW_P (op1))\n \treturn result;\n-    }\n-  else if (!CONSTANT_CLASS_P (op0) || !CONSTANT_CLASS_P (op1)\n-\t   || TREE_OVERFLOW_P (op0) || TREE_OVERFLOW_P (op1))\n-    return result;\n \n-  result_ovl = fold_build2 (resultcode, build_type, op0, op1);\n-  if (TREE_OVERFLOW_P (result_ovl))\n-    overflow_warning (location, result_ovl);\n+      tree result_ovl = fold_build2 (resultcode, build_type, op0, op1);\n+      if (TREE_OVERFLOW_P (result_ovl))\n+\toverflow_warning (location, result_ovl);\n+    }\n \n   return result;\n }"}, {"sha": "915e5e37675fbd9c1e30ed60dc8845ceef833080", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype82.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecb6b906f215ec56df1a555139abe9ad95414fb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype82.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecb6b906f215ec56df1a555139abe9ad95414fb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype82.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype82.C?ref=0ecb6b906f215ec56df1a555139abe9ad95414fb", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/105756\n+// { dg-do compile { target c++11 } }\n+\n+template<int N>\n+void f() {\n+  using ty1 = decltype((5 % N) == 0);\n+  using ty2 = decltype((5 / N) == 0);\n+}\n+\n+template void f<0>();"}]}