{"sha": "4df735e01e319997841574f353d2aa076a0335c2", "node_id": "C_kwDOANBUbNoAKDRkZjczNWUwMWUzMTk5OTc4NDE1NzRmMzUzZDJhYTA3NmEwMzM1YzI", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-03-19T02:52:32Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-05-15T16:43:30Z"}, "message": "c++: hidden friend access [DR1699]\n\nIt has come up several times that Clang considers hidden friends of a class\nto be sufficiently memberly to be covered by a friend declaration naming the\nclass.  This is somewhat unclear in the standard: [class.friend] says\n\"Declaring a class to be a friend implies that private and protected members\nof the class granting friendship can be named in the base-specifiers and\nmember declarations of the befriended class.\"\n\nA hidden friend is a syntactic member-declaration, but is it a \"member\ndeclaration\"?  CWG was ambivalent, and referred the question to EWG as a\ndesign choice.  But recently Patrick mentioned that the current G++ choice\nnot to treat it as a \"member declaration\" was making his library work\nsignificantly more cumbersome, so let's go ahead and vote the other way.\n\nThis means that the testcases for 100502 and 58993 are now accepted.\n\n\tDR1699\n\tPR c++/100502\n\tPR c++/58993\n\ngcc/cp/ChangeLog:\n\n\t* friend.cc (is_friend): Hidden friends count as members.\n\t* search.cc (friend_accessible_p): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/template/access37.C: Now OK.\n\t* g++.dg/template/friend69.C: Now OK.\n\t* g++.dg/lookup/friend23.C: New test.", "tree": {"sha": "5d8ff6e326d0233e450a1e59d7ecc30404424fa1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d8ff6e326d0233e450a1e59d7ecc30404424fa1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4df735e01e319997841574f353d2aa076a0335c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4df735e01e319997841574f353d2aa076a0335c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4df735e01e319997841574f353d2aa076a0335c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4df735e01e319997841574f353d2aa076a0335c2/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87e1f023aae945aedd7ea046e06b4f52318913f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87e1f023aae945aedd7ea046e06b4f52318913f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87e1f023aae945aedd7ea046e06b4f52318913f7"}], "stats": {"total": 38, "additions": 27, "deletions": 11}, "files": [{"sha": "bf37dadeb6223b2901f9cc8922ba797131dfa7b5", "filename": "gcc/cp/friend.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4df735e01e319997841574f353d2aa076a0335c2/gcc%2Fcp%2Ffriend.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4df735e01e319997841574f353d2aa076a0335c2/gcc%2Fcp%2Ffriend.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.cc?ref=4df735e01e319997841574f353d2aa076a0335c2", "patch": "@@ -131,6 +131,8 @@ is_friend (tree type, tree supplicant)\n     {\n       if (DECL_FUNCTION_MEMBER_P (supplicant))\n \tcontext = DECL_CONTEXT (supplicant);\n+      else if (tree fc = DECL_FRIEND_CONTEXT (supplicant))\n+\tcontext = fc;\n       else\n \tcontext = NULL_TREE;\n     }"}, {"sha": "10863a40b116c0a2fd6df07f21a94175e66fe01d", "filename": "gcc/cp/search.cc", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4df735e01e319997841574f353d2aa076a0335c2/gcc%2Fcp%2Fsearch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4df735e01e319997841574f353d2aa076a0335c2/gcc%2Fcp%2Fsearch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.cc?ref=4df735e01e319997841574f353d2aa076a0335c2", "patch": "@@ -734,12 +734,9 @@ friend_accessible_p (tree scope, tree decl, tree type, tree otype)\n \t  && friend_accessible_p (DECL_CONTEXT (scope), decl, type, otype))\n \treturn 1;\n       /* Perhaps SCOPE is a friend function defined inside a class from which\n-\t DECL is accessible.  Checking this is necessary only when the class\n-\t is dependent, for otherwise add_friend will already have added the\n-\t class to SCOPE's DECL_BEFRIENDING_CLASSES.  */\n+\t DECL is accessible.  */\n       if (tree fctx = DECL_FRIEND_CONTEXT (scope))\n-\tif (dependent_type_p (fctx)\n-\t    && protected_accessible_p (decl, fctx, type, otype))\n+\tif (friend_accessible_p (fctx, decl, type, otype))\n \t  return 1;\n     }\n "}, {"sha": "f7b26c9e3ae37d629cc97e08c1bc9a4aab2f05e7", "filename": "gcc/testsuite/g++.dg/lookup/friend23.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4df735e01e319997841574f353d2aa076a0335c2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Ffriend23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4df735e01e319997841574f353d2aa076a0335c2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Ffriend23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Ffriend23.C?ref=4df735e01e319997841574f353d2aa076a0335c2", "patch": "@@ -0,0 +1,17 @@\n+template <class Derived>\n+struct base {\n+  friend void bar(Derived& d) {\n+    d.bar(); // access in inline friend of friend, ok?\n+  }\n+};\n+\n+class derived : base<derived> {\n+  friend class base<derived>;\n+  void bar() {}\n+};\n+\n+int main() {\n+  derived d;\n+  bar(d);\n+}\n+"}, {"sha": "407a7dc0f2dca1a4e9c2924662b20d35543bd83d", "filename": "gcc/testsuite/g++.dg/template/access37.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4df735e01e319997841574f353d2aa076a0335c2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess37.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4df735e01e319997841574f353d2aa076a0335c2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess37.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess37.C?ref=4df735e01e319997841574f353d2aa076a0335c2", "patch": "@@ -6,10 +6,10 @@ struct EnumeratorRange {\n     EnumeratorRange range_;\n \n     friend void f(Iterator i) {\n-      i.range_.end_reached_; // { dg-error \"private\" }\n-      i.range_.EnumeratorRange::end_reached_; // { dg-error \"private\" }\n-      &i.range_.end_reached_; // { dg-error \"private\" }\n-      &i.range_.EnumeratorRange::end_reached_; // { dg-error \"private\" }\n+      i.range_.end_reached_;\n+      i.range_.EnumeratorRange::end_reached_;\n+      &i.range_.end_reached_;\n+      &i.range_.EnumeratorRange::end_reached_;\n     }\n   };\n "}, {"sha": "9bec6ba5846fcda3ffe5fcff5fc246c9f53b7412", "filename": "gcc/testsuite/g++.dg/template/friend69.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4df735e01e319997841574f353d2aa076a0335c2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend69.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4df735e01e319997841574f353d2aa076a0335c2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend69.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend69.C?ref=4df735e01e319997841574f353d2aa076a0335c2", "patch": "@@ -12,7 +12,7 @@ protected:\n \n struct A {\n   friend void g(A) {\n-    B::f(); // { dg-error \"private\" }\n-    B::g(); // { dg-error \"protected\" }\n+    B::f();\n+    B::g();\n   }\n };"}]}