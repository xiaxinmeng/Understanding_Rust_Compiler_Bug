{"sha": "bae5cddff8b905bb49ed4e013e9756ebea13c099", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFlNWNkZGZmOGI5MDViYjQ5ZWQ0ZTAxM2U5NzU2ZWJlYTEzYzA5OQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-04-12T06:27:23Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-04-12T06:27:23Z"}, "message": "re PR c/48552 (ICE with void type expressions in asm inputs/outputs)\n\n\tPR c/48552\n\t* c-typeck.c (build_asm_expr): Error out on attempts to use\n\tvoid type outputs or inputs for constraints that allow reg or\n\tdon't allow memory.\n\n\t* gcc.dg/pr48552-1.c: New test.\n\t* gcc.dg/pr48552-2.c: New test.\n\nFrom-SVN: r172298", "tree": {"sha": "944d7c023a9a5532266fc936c723bbf8ccfe1abf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/944d7c023a9a5532266fc936c723bbf8ccfe1abf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bae5cddff8b905bb49ed4e013e9756ebea13c099", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bae5cddff8b905bb49ed4e013e9756ebea13c099", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bae5cddff8b905bb49ed4e013e9756ebea13c099", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bae5cddff8b905bb49ed4e013e9756ebea13c099/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "06eb52cab5c99abcdb3adcbdfba8cf75d38705c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06eb52cab5c99abcdb3adcbdfba8cf75d38705c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06eb52cab5c99abcdb3adcbdfba8cf75d38705c4"}], "stats": {"total": 133, "additions": 132, "deletions": 1}, "files": [{"sha": "3fe9cdb6214c092bd3459b799dfe03abc9012693", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae5cddff8b905bb49ed4e013e9756ebea13c099/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae5cddff8b905bb49ed4e013e9756ebea13c099/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bae5cddff8b905bb49ed4e013e9756ebea13c099", "patch": "@@ -1,3 +1,10 @@\n+2011-04-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/48552\n+\t* c-typeck.c (build_asm_expr): Error out on attempts to use\n+\tvoid type outputs or inputs for constraints that allow reg or\n+\tdon't allow memory.\n+\n 2011-04-11  Chung-Lin Tang  <cltang@codesourcery.com>\n \t    Richard Earnshaw  <rearnsha@arm.com>\n "}, {"sha": "c386f56c775eab982bfe08ff6d960fd5a3d77604", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae5cddff8b905bb49ed4e013e9756ebea13c099/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae5cddff8b905bb49ed4e013e9756ebea13c099/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=bae5cddff8b905bb49ed4e013e9756ebea13c099", "patch": "@@ -8502,6 +8502,13 @@ build_asm_expr (location_t loc, tree string, tree outputs, tree inputs,\n \t     mark it addressable.  */\n \t  if (!allows_reg && !c_mark_addressable (output))\n \t    output = error_mark_node;\n+\t  if (!(!allows_reg && allows_mem)\n+\t      && output != error_mark_node\n+\t      && VOID_TYPE_P (TREE_TYPE (output)))\n+\t    {\n+\t      error_at (loc, \"invalid use of void expression\");\n+\t      output = error_mark_node;\n+\t    }\n \t}\n       else\n \toutput = error_mark_node;\n@@ -8528,7 +8535,12 @@ build_asm_expr (location_t loc, tree string, tree outputs, tree inputs,\n \t      STRIP_NOPS (input);\n \t      if (!c_mark_addressable (input))\n \t\tinput = error_mark_node;\n-\t  }\n+\t    }\n+\t  else if (input != error_mark_node && VOID_TYPE_P (TREE_TYPE (input)))\n+\t    {\n+\t      error_at (loc, \"invalid use of void expression\");\n+\t      input = error_mark_node;\n+\t    }\n \t}\n       else\n \tinput = error_mark_node;"}, {"sha": "6d657590c522911aef600f10984b3a13ef6b401e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae5cddff8b905bb49ed4e013e9756ebea13c099/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae5cddff8b905bb49ed4e013e9756ebea13c099/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bae5cddff8b905bb49ed4e013e9756ebea13c099", "patch": "@@ -1,3 +1,9 @@\n+2011-04-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/48552\n+\t* gcc.dg/pr48552-1.c: New test.\n+\t* gcc.dg/pr48552-2.c: New test.\n+\n 2011-04-11  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/cpp0x/sfinae12.C: New."}, {"sha": "5590549a7cef0bf859b18b74ef9d851c309f4fe8", "filename": "gcc/testsuite/gcc.dg/pr48552-1.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae5cddff8b905bb49ed4e013e9756ebea13c099/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48552-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae5cddff8b905bb49ed4e013e9756ebea13c099/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48552-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48552-1.c?ref=bae5cddff8b905bb49ed4e013e9756ebea13c099", "patch": "@@ -0,0 +1,53 @@\n+/* PR c/48552 */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+struct S;\n+\n+void\n+f1 (void *x)\n+{\n+  __asm volatile (\"\" : : \"r\" (*x));\t/* { dg-warning \"dereferencing\" } */\n+}\t\t\t\t\t/* { dg-error \"invalid use of void expression\" \"\" { target *-*-* } 10 } */\n+\n+void\n+f2 (void *x)\n+{\n+  __asm volatile (\"\" : \"=r\" (*x));\t/* { dg-warning \"dereferencing\" } */\n+}\t\t\t\t\t/* { dg-error \"invalid use of void expression\" \"\" { target *-*-* } 16 } */\n+\t\t\t\t\t/* { dg-error \"invalid lvalue in asm output 0\" \"\" { target *-*-* } 16 } */\n+void\n+f3 (void *x)\n+{\n+  __asm volatile (\"\" : : \"m\" (*x));\t/* { dg-warning \"dereferencing\" } */\n+}\n+\n+void\n+f4 (void *x)\n+{\n+  __asm volatile (\"\" : \"=m\" (*x));\t/* { dg-warning \"dereferencing\" } */\n+}\n+\n+void\n+f5 (void *x)\n+{\n+  __asm volatile (\"\" : : \"g\" (*x));\t/* { dg-warning \"dereferencing\" } */\n+}\t\t\t\t\t/* { dg-error \"invalid use of void expression\" \"\" { target *-*-* } 34 } */\n+\n+void\n+f6 (void *x)\n+{\n+  __asm volatile (\"\" : \"=g\" (*x));\t/* { dg-warning \"dereferencing\" } */\n+}\t\t\t\t\t/* { dg-error \"invalid use of void expression\" \"\" { target *-*-* } 40 } */\n+\t\t\t\t\t/* { dg-error \"invalid lvalue in asm output 0\" \"\" { target *-*-* } 40 } */\n+void\n+f7 (struct S *x)\n+{\n+  __asm volatile (\"\" : : \"r\" (*x));\t/* { dg-error \"dereferencing pointer to incomplete type\" } */\n+}\n+\n+void\n+f8 (struct S *x)\n+{\n+  __asm volatile (\"\" : \"=r\" (*x));\t/* { dg-error \"dereferencing pointer to incomplete type\" } */\n+}\t\t\t\t\t/* { dg-error \"invalid lvalue in asm output 0\" \"\" { target *-*-* } 52 } */"}, {"sha": "4408279f8acefe3a094c12f0c96ec9d3bd5fbcb7", "filename": "gcc/testsuite/gcc.dg/pr48552-2.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae5cddff8b905bb49ed4e013e9756ebea13c099/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48552-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae5cddff8b905bb49ed4e013e9756ebea13c099/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48552-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48552-2.c?ref=bae5cddff8b905bb49ed4e013e9756ebea13c099", "patch": "@@ -0,0 +1,53 @@\n+/* PR c/48552 */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+struct S;\n+\n+void\n+f1 (void *x)\n+{\n+  __asm (\"\" : : \"r\" (*x));\t/* { dg-warning \"dereferencing\" } */\n+}\t\t\t\t/* { dg-error \"invalid use of void expression\" \"\" { target *-*-* } 10 } */\n+\n+void\n+f2 (void *x)\n+{\n+  __asm (\"\" : \"=r\" (*x));\t/* { dg-warning \"dereferencing\" } */\n+}\t\t\t\t/* { dg-error \"invalid use of void expression\" \"\" { target *-*-* } 16 } */\n+\t\t\t\t/* { dg-error \"invalid lvalue in asm output 0\" \"\" { target *-*-* } 16 } */\n+void\n+f3 (void *x)\n+{\n+  __asm (\"\" : : \"m\" (*x));\t/* { dg-warning \"dereferencing\" } */\n+}\n+\n+void\n+f4 (void *x)\n+{\n+  __asm (\"\" : \"=m\" (*x));\t/* { dg-warning \"dereferencing\" } */\n+}\n+\n+void\n+f5 (void *x)\n+{\n+  __asm (\"\" : : \"g\" (*x));\t/* { dg-warning \"dereferencing\" } */\n+}\t\t\t\t/* { dg-error \"invalid use of void expression\" \"\" { target *-*-* } 34 } */\n+\n+void\n+f6 (void *x)\n+{\n+  __asm (\"\" : \"=g\" (*x));\t/* { dg-warning \"dereferencing\" } */\n+}\t\t\t\t/* { dg-error \"invalid use of void expression\" \"\" { target *-*-* } 40 } */\n+\t\t\t\t/* { dg-error \"invalid lvalue in asm output 0\" \"\" { target *-*-* } 40 } */\n+void\n+f7 (struct S *x)\n+{\n+  __asm (\"\" : : \"r\" (*x));\t/* { dg-error \"dereferencing pointer to incomplete type\" } */\n+}\n+\n+void\n+f8 (struct S *x)\n+{\n+  __asm (\"\" : \"=r\" (*x));\t/* { dg-error \"dereferencing pointer to incomplete type\" } */\n+}\t\t\t\t/* { dg-error \"invalid lvalue in asm output 0\" \"\" { target *-*-* } 52 } */"}]}