{"sha": "db6261488e4e53e4ac09ec9db50ea2e4a1859377", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI2MjYxNDg4ZTRlNTNlNGFjMDllYzlkYjUwZWEyZTRhMTg1OTM3Nw==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2019-07-05T07:02:03Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-05T07:02:03Z"}, "message": "[Ada] Compiler abort on a dynamic predicate used in a precondition\n\nThis patch suppresses the generation of a predicate check when the\nexpression is a formal IN parameter of a subprogram S. If the check is\nbeing applied to the actual in a call, the call is either in the body of\nS, or in an aspect specfication for S, e.g. a precondition, In both\ncases the check is redundant bevause it will be applied on any call to\nS. In the second case the expansion of the predicate check may lead to\nout-of-scope references the the formal.\n\n2019-07-05  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* checks.adb (Apply_Predicate_Check): Except within the\n\tsubprogram body that defines the formal, do not apply predicate\n\tcheck on a formal IN parameter: such a check is redundant and\n\tits expansion can lead to out-of-scope references when it is\n\toriginates in a function call in a precondition,\n\ngcc/testsuite/\n\n\t* gnat.dg/predicate7.adb, gnat.dg/predicate7.ads,\n\tgnat.dg/predicate7_pkg.ads: New testcase.\n\nFrom-SVN: r273106", "tree": {"sha": "a986027d4dac11bec4c8e61a041e512a5d4d41aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a986027d4dac11bec4c8e61a041e512a5d4d41aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db6261488e4e53e4ac09ec9db50ea2e4a1859377", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db6261488e4e53e4ac09ec9db50ea2e4a1859377", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db6261488e4e53e4ac09ec9db50ea2e4a1859377", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db6261488e4e53e4ac09ec9db50ea2e4a1859377/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "85ee7b4903e320b8f22ac0350afcd07263d2a5d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85ee7b4903e320b8f22ac0350afcd07263d2a5d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85ee7b4903e320b8f22ac0350afcd07263d2a5d6"}], "stats": {"total": 70, "additions": 70, "deletions": 0}, "files": [{"sha": "b1b98f29fbfcd76e461928782b67965db4d009a7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db6261488e4e53e4ac09ec9db50ea2e4a1859377/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db6261488e4e53e4ac09ec9db50ea2e4a1859377/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=db6261488e4e53e4ac09ec9db50ea2e4a1859377", "patch": "@@ -1,3 +1,11 @@\n+2019-07-05  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* checks.adb (Apply_Predicate_Check): Except within the\n+\tsubprogram body that defines the formal, do not apply predicate\n+\tcheck on a formal IN parameter: such a check is redundant and\n+\tits expansion can lead to out-of-scope references when it is\n+\toriginates in a function call in a precondition,\n+\n 2019-07-05  Yannick Moy  <moy@adacore.com>\n \n \t* sem_res.adb (Resolve_Call): Cannot inline in quantified"}, {"sha": "8176f859061e8dd7b34fded8f646c63d388a9e90", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db6261488e4e53e4ac09ec9db50ea2e4a1859377/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db6261488e4e53e4ac09ec9db50ea2e4a1859377/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=db6261488e4e53e4ac09ec9db50ea2e4a1859377", "patch": "@@ -2707,6 +2707,41 @@ package body Checks is\n          --  Here for normal case of predicate active\n \n          else\n+            --  If the expression is an IN parameter, the predicate will have\n+            --  been applied at the point of call. An additional check would\n+            --  be redundant, or will lead to out-of-scope references if the\n+            --  call appears within an aspect specification for a precondition.\n+\n+            --  However, if the reference is within the body of the subprogram\n+            --  that declares the formal, the predicate can safely be applied,\n+            --  which may be necessary for a nested call whose formal has a\n+            --  different predicate.\n+\n+            if Is_Entity_Name (N)\n+              and then Ekind (Entity (N)) = E_In_Parameter\n+            then\n+               declare\n+                  In_Body : Boolean := False;\n+                  P : Node_Id := Parent (N);\n+\n+               begin\n+                  while Present (P) loop\n+                     if Nkind (P) = N_Subprogram_Body\n+                       and then Corresponding_Spec (P) = Scope (Entity (N))\n+                     then\n+                        In_Body := True;\n+                        exit;\n+                     end if;\n+\n+                     P := Parent (P);\n+                  end loop;\n+\n+                  if not In_Body then\n+                     return;\n+                  end if;\n+               end;\n+            end if;\n+\n             --  If the type has a static predicate and the expression is known\n             --  at compile time, see if the expression satisfies the predicate.\n "}, {"sha": "d5905f00a75bba31b15cc841343052b25001b4c6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db6261488e4e53e4ac09ec9db50ea2e4a1859377/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db6261488e4e53e4ac09ec9db50ea2e4a1859377/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=db6261488e4e53e4ac09ec9db50ea2e4a1859377", "patch": "@@ -1,3 +1,8 @@\n+2019-07-05  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* gnat.dg/predicate7.adb, gnat.dg/predicate7.ads,\n+\tgnat.dg/predicate7_pkg.ads: New testcase.\n+\n 2019-07-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/78884"}, {"sha": "119c19035c26630522b0627b8802ecceb239239a", "filename": "gcc/testsuite/gnat.dg/predicate7.adb", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db6261488e4e53e4ac09ec9db50ea2e4a1859377/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db6261488e4e53e4ac09ec9db50ea2e4a1859377/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate7.adb?ref=db6261488e4e53e4ac09ec9db50ea2e4a1859377", "patch": "@@ -0,0 +1,6 @@\n+--  { dg-do compile }\n+--  { dg-options \"-gnata\" }\n+\n+package body Predicate7 is\n+   procedure Foo is null;\n+end;"}, {"sha": "598e2b0eae997d5eb3a11d53e36646e3c74c289a", "filename": "gcc/testsuite/gnat.dg/predicate7.ads", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db6261488e4e53e4ac09ec9db50ea2e4a1859377/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate7.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db6261488e4e53e4ac09ec9db50ea2e4a1859377/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate7.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate7.ads?ref=db6261488e4e53e4ac09ec9db50ea2e4a1859377", "patch": "@@ -0,0 +1,13 @@\n+with Predicate7_Pkg; use Predicate7_Pkg;\n+\n+package Predicate7 is\n+   function Always_True (I : My_Int) return Boolean;\n+\n+   function Identity (I : My_Int ) return Integer with Pre => Always_True (I);\n+\n+   procedure Foo;\n+\n+private\n+   function Identity (I : My_Int ) return Integer is (I);\n+   function Always_True (I : My_Int) return Boolean is (True);\n+end;"}, {"sha": "b90419e7e6d9435bc53df9d237d514d345495e28", "filename": "gcc/testsuite/gnat.dg/predicate7_pkg.ads", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db6261488e4e53e4ac09ec9db50ea2e4a1859377/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate7_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db6261488e4e53e4ac09ec9db50ea2e4a1859377/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate7_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate7_pkg.ads?ref=db6261488e4e53e4ac09ec9db50ea2e4a1859377", "patch": "@@ -0,0 +1,3 @@\n+package Predicate7_Pkg is\n+  subtype My_Int is Integer with Dynamic_Predicate => My_Int /= 0;\n+end Predicate7_Pkg;"}]}