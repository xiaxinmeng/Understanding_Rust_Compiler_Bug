{"sha": "f796d997137a498b881ea786e9517bda7a2b4bea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc5NmQ5OTcxMzdhNDk4Yjg4MWVhNzg2ZTk1MTdiZGE3YTJiNGJlYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1996-09-18T11:07:42Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1996-09-18T11:07:42Z"}, "message": "(assemble_variable): Fix setting of first_global_object_name.\n\n(assemble_variable): Fix setting of\n        first_global_object_name.\n        (assemble_start_function): Likewise.\n(supports_one_only): New function.\n        (make_decl_one_only): Likewise.\n\nFrom-SVN: r12734", "tree": {"sha": "598c02da5e00d23238635a9741dc5128d224569e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/598c02da5e00d23238635a9741dc5128d224569e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f796d997137a498b881ea786e9517bda7a2b4bea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f796d997137a498b881ea786e9517bda7a2b4bea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f796d997137a498b881ea786e9517bda7a2b4bea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f796d997137a498b881ea786e9517bda7a2b4bea/comments", "author": null, "committer": null, "parents": [{"sha": "855609f33465ff7d4925d1e81f433b324b2793ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/855609f33465ff7d4925d1e81f433b324b2793ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/855609f33465ff7d4925d1e81f433b324b2793ac"}], "stats": {"total": 76, "additions": 66, "deletions": 10}, "files": [{"sha": "d6a425074128ad7dc2c35a939dfec82fdb4e5b29", "filename": "gcc/varasm.c", "status": "modified", "additions": 66, "deletions": 10, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f796d997137a498b881ea786e9517bda7a2b4bea/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f796d997137a498b881ea786e9517bda7a2b4bea/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=f796d997137a498b881ea786e9517bda7a2b4bea", "patch": "@@ -976,7 +976,8 @@ assemble_start_function (decl, fnname)\n \n   if (TREE_PUBLIC (decl))\n     {\n-      if (!first_global_object_name)\n+      if (!first_global_object_name && ! DECL_WEAK (decl)\n+\t  && ! DECL_ONE_ONLY (decl))\n \t{\n \t  char *p;\n \n@@ -1259,6 +1260,20 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n \n   name = XSTR (XEXP (DECL_RTL (decl), 0), 0);\n \n+  if (TREE_PUBLIC (decl) && DECL_NAME (decl)\n+      && ! first_global_object_name\n+      && ! (DECL_COMMON (decl) && (DECL_INITIAL (decl) == 0\n+\t\t\t\t   || DECL_INITIAL (decl) == error_mark_node))\n+      && ! DECL_WEAK (decl)\n+      && ! DECL_ONE_ONLY (decl))\n+    {\n+      char *p;\n+\n+      STRIP_NAME_ENCODING (p, name);\n+      first_global_object_name = permalloc (strlen (p) + 1);\n+      strcpy (first_global_object_name, p);\n+    }\n+\n   /* Handle uninitialized definitions.  */\n \n   if ((DECL_INITIAL (decl) == 0 || DECL_INITIAL (decl) == error_mark_node)\n@@ -1387,15 +1402,6 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n   /* First make the assembler name(s) global if appropriate.  */\n   if (TREE_PUBLIC (decl) && DECL_NAME (decl))\n     {\n-      if (!first_global_object_name)\n-\t{\n-\t  char *p;\n-\n-\t  STRIP_NAME_ENCODING (p, name);\n-\t  first_global_object_name = permalloc (strlen (p) + 1);\n-\t  strcpy (first_global_object_name, p);\n-\t}\n-\n #ifdef ASM_WEAKEN_LABEL\n       if (DECL_WEAK (decl))\n \tASM_WEAKEN_LABEL (asm_out_file, name);\n@@ -4237,3 +4243,53 @@ assemble_alias (decl, target)\n   warning (\"alias definitions not supported in this configuration\");\n #endif\n }\n+\n+/* This determines whether or not we support link-once semantics.  */\n+#ifndef SUPPORTS_ONE_ONLY\n+#ifdef MAKE_DECL_ONE_ONLY\n+#define SUPPORTS_ONE_ONLY 1\n+#else\n+#define SUPPORTS_ONE_ONLY 0\n+#endif\n+#endif\n+\n+/* Returns 1 if the target configuration supports defining public symbols\n+   so that one of them will be chosen at link time instead of generating a\n+   multiply-defined symbol error, whether through the use of weak symbols or\n+   a target-specific mechanism for having duplicates discarded.  */\n+\n+int\n+supports_one_only ()\n+{\n+  if (SUPPORTS_ONE_ONLY)\n+    return 1;\n+  return SUPPORTS_WEAK;\n+}\n+\n+/* Set up DECL as a public symbol that can be defined in multiple\n+   translation units without generating a linker error.  */\n+\n+void\n+make_decl_one_only (decl)\n+     tree decl;\n+{\n+  if (TREE_CODE (decl) != VAR_DECL && TREE_CODE (decl) != FUNCTION_DECL)\n+    abort ();\n+\n+  TREE_PUBLIC (decl) = 1;\n+\n+  if (TREE_CODE (decl) == VAR_DECL\n+      && (DECL_INITIAL (decl) == 0 || DECL_INITIAL (decl) == error_mark_node))\n+    DECL_COMMON (decl) = 1;\n+  else if (SUPPORTS_ONE_ONLY)\n+    {\n+#ifdef MAKE_DECL_ONE_ONLY\n+      MAKE_DECL_ONE_ONLY (decl);\n+#endif\n+      DECL_ONE_ONLY (decl) = 1;\n+    }\n+  else if (SUPPORTS_WEAK)\n+    DECL_WEAK (decl) = 1;\n+  else\n+    abort ();\n+}"}]}