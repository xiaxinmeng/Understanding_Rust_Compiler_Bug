{"sha": "effb52dae5203e21faf5f2c11bb0078e71f74482", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZmYjUyZGFlNTIwM2UyMWZhZjVmMmMxMWJiMDA3OGU3MWY3NDQ4Mg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-05-22T13:52:58Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-05-22T13:52:58Z"}, "message": "tree-vectorizer.h (struct _slp_oprnd_info): Add second_pattern member.\n\n2015-05-22  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vectorizer.h (struct _slp_oprnd_info): Add second_pattern\n\tmember.\n\t* tree-vect-loop.c (vect_analyze_loop_operations): Look at\n\tpatterns when determining whether SLP is pure.\n\t(vect_is_slp_reduction): Remove check for pattern stmts.\n\t(vect_is_simple_reduction_1): Remove dead code.\n\t* tree-vect-slp.c (vect_create_oprnd_info): Initialize second_pattern.\n\t(vect_get_and_check_slp_defs): Pass in the stmt number.\n\tAllow the first def in a reduction to be not a pattern stmt when\n\tthe rest of the stmts def are patterns.\n\t(vect_build_slp_tree_1): Allow tcc_expression codes like\n\tSAD_EXPR and DOT_PROD_EXPR.\n\t(vect_build_slp_tree): Adjust.\n\t(vect_analyze_slp): Refactor and move BB vect error message ...\n\t(vect_slp_analyze_bb_1): ... here.\n\nFrom-SVN: r223574", "tree": {"sha": "35a4f605b4e8a0babddaaffa6508778d9e240c87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35a4f605b4e8a0babddaaffa6508778d9e240c87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/effb52dae5203e21faf5f2c11bb0078e71f74482", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/effb52dae5203e21faf5f2c11bb0078e71f74482", "html_url": "https://github.com/Rust-GCC/gccrs/commit/effb52dae5203e21faf5f2c11bb0078e71f74482", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/effb52dae5203e21faf5f2c11bb0078e71f74482/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "088c7e1b0c52db7fa81623ab5b0795a89b41f054", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/088c7e1b0c52db7fa81623ab5b0795a89b41f054", "html_url": "https://github.com/Rust-GCC/gccrs/commit/088c7e1b0c52db7fa81623ab5b0795a89b41f054"}], "stats": {"total": 84, "additions": 52, "deletions": 32}, "files": [{"sha": "212b8e57527a9784110a9ac2a5fb4bffbb56bf71", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/effb52dae5203e21faf5f2c11bb0078e71f74482/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/effb52dae5203e21faf5f2c11bb0078e71f74482/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=effb52dae5203e21faf5f2c11bb0078e71f74482", "patch": "@@ -1,3 +1,21 @@\n+2015-05-22  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vectorizer.h (struct _slp_oprnd_info): Add second_pattern\n+\tmember.\n+\t* tree-vect-loop.c (vect_analyze_loop_operations): Look at\n+\tpatterns when determining whether SLP is pure.\n+\t(vect_is_slp_reduction): Remove check for pattern stmts.\n+\t(vect_is_simple_reduction_1): Remove dead code.\n+\t* tree-vect-slp.c (vect_create_oprnd_info): Initialize second_pattern.\n+\t(vect_get_and_check_slp_defs): Pass in the stmt number.\n+\tAllow the first def in a reduction to be not a pattern stmt when\n+\tthe rest of the stmts def are patterns.\n+\t(vect_build_slp_tree_1): Allow tcc_expression codes like\n+\tSAD_EXPR and DOT_PROD_EXPR.\n+\t(vect_build_slp_tree): Adjust.\n+\t(vect_analyze_slp): Refactor and move BB vect error message ...\n+\t(vect_slp_analyze_bb_1): ... here.\n+\n 2015-05-22  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* tree-switch-conversion.c (build_one_array): Set DECL_IGNORED_P"}, {"sha": "2c983b889d170091bd566b8d1d1ba8cfd58e78b1", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/effb52dae5203e21faf5f2c11bb0078e71f74482/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/effb52dae5203e21faf5f2c11bb0078e71f74482/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=effb52dae5203e21faf5f2c11bb0078e71f74482", "patch": "@@ -1399,7 +1399,12 @@ vect_analyze_loop_operations (loop_vec_info loop_vinfo, bool slp)\n \t    {\n \t      gimple stmt = gsi_stmt (si);\n \t      stmt_vec_info stmt_info = vinfo_for_stmt (stmt);\n-\t      gcc_assert (stmt_info);\n+\t      if (STMT_VINFO_IN_PATTERN_P (stmt_info)\n+\t\t  && STMT_VINFO_RELATED_STMT (stmt_info))\n+\t\t{\n+\t\t  stmt = STMT_VINFO_RELATED_STMT (stmt_info);\n+\t\t  stmt_info = vinfo_for_stmt (stmt);\n+\t\t}\n \t      if ((STMT_VINFO_RELEVANT_P (stmt_info)\n \t\t   || VECTORIZABLE_CYCLE_DEF (STMT_VINFO_DEF_TYPE (stmt_info)))\n \t\t  && !PURE_SLP_STMT (stmt_info))\n@@ -2031,12 +2036,8 @@ vect_is_slp_reduction (loop_vec_info loop_info, gimple phi, gimple first_stmt)\n \n           if (flow_bb_inside_loop_p (loop, gimple_bb (use_stmt)))\n             {\n-              if (vinfo_for_stmt (use_stmt)\n-                  && !STMT_VINFO_IN_PATTERN_P (vinfo_for_stmt (use_stmt)))\n-                {\n-                  loop_use_stmt = use_stmt;\n-                  nloop_uses++;\n-                }\n+\t      loop_use_stmt = use_stmt;\n+\t      nloop_uses++;\n             }\n            else\n              n_out_of_loop_uses++;\n@@ -2265,9 +2266,7 @@ vect_is_simple_reduction_1 (loop_vec_info loop_info, gimple phi,\n           return NULL;\n         }\n \n-      if (vinfo_for_stmt (use_stmt)\n-\t  && !is_pattern_stmt_p (vinfo_for_stmt (use_stmt)))\n-        nloop_uses++;\n+      nloop_uses++;\n       if (nloop_uses > 1)\n         {\n           if (dump_enabled_p ())\n@@ -2325,9 +2324,7 @@ vect_is_simple_reduction_1 (loop_vec_info loop_info, gimple phi,\n       gimple use_stmt = USE_STMT (use_p);\n       if (is_gimple_debug (use_stmt))\n \tcontinue;\n-      if (flow_bb_inside_loop_p (loop, gimple_bb (use_stmt))\n-\t  && vinfo_for_stmt (use_stmt)\n-\t  && !is_pattern_stmt_p (vinfo_for_stmt (use_stmt)))\n+      if (flow_bb_inside_loop_p (loop, gimple_bb (use_stmt)))\n \tnloop_uses++;\n       if (nloop_uses > 1)\n \t{"}, {"sha": "1c519903153c2ede8ba95b0faf255861af5a5da2", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/effb52dae5203e21faf5f2c11bb0078e71f74482/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/effb52dae5203e21faf5f2c11bb0078e71f74482/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=effb52dae5203e21faf5f2c11bb0078e71f74482", "patch": "@@ -183,6 +183,7 @@ vect_create_oprnd_info (int nops, int group_size)\n       oprnd_info->first_dt = vect_uninitialized_def;\n       oprnd_info->first_op_type = NULL_TREE;\n       oprnd_info->first_pattern = false;\n+      oprnd_info->second_pattern = false;\n       oprnds_info.quick_push (oprnd_info);\n     }\n \n@@ -242,7 +243,7 @@ vect_get_place_in_interleaving_chain (gimple stmt, gimple first_stmt)\n \n static int \n vect_get_and_check_slp_defs (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo,\n-                             gimple stmt, bool first,\n+                             gimple stmt, unsigned stmt_num,\n                              vec<slp_oprnd_info> *oprnds_info)\n {\n   tree oprnd;\n@@ -256,6 +257,8 @@ vect_get_and_check_slp_defs (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo,\n   int first_op_idx = 1;\n   bool commutative = false;\n   bool first_op_cond = false;\n+  bool first = stmt_num == 0;\n+  bool second = stmt_num == 1;\n \n   if (loop_vinfo)\n     loop = LOOP_VINFO_LOOP (loop_vinfo);\n@@ -326,7 +329,11 @@ vect_get_and_check_slp_defs (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo,\n \t  && !STMT_VINFO_LIVE_P (vinfo_for_stmt (def_stmt)))\n         {\n           pattern = true;\n-          if (!first && !oprnd_info->first_pattern)\n+          if (!first && !oprnd_info->first_pattern\n+\t      /* Allow different pattern state for the defs of the\n+\t\t first stmt in reduction chains.  */\n+\t      && (oprnd_info->first_dt != vect_reduction_def\n+\t\t  || (!second && !oprnd_info->second_pattern)))\n \t    {\n \t      if (i == 0\n \t\t  && !swapped\n@@ -377,6 +384,9 @@ vect_get_and_check_slp_defs (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo,\n             }\n         }\n \n+      if (second)\n+\toprnd_info->second_pattern = pattern;\n+\n       if (first)\n \t{\n \t  oprnd_info->first_dt = dt;\n@@ -892,7 +902,7 @@ vect_build_slp_tree_1 (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo,\n \t  /* Not memory operation.  */\n \t  if (TREE_CODE_CLASS (rhs_code) != tcc_binary\n \t      && TREE_CODE_CLASS (rhs_code) != tcc_unary\n-\t      && rhs_code != COND_EXPR\n+\t      && TREE_CODE_CLASS (rhs_code) != tcc_expression\n \t      && rhs_code != CALL_EXPR)\n \t    {\n \t      if (dump_enabled_p ())\n@@ -1033,7 +1043,7 @@ vect_build_slp_tree (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo,\n   FOR_EACH_VEC_ELT (SLP_TREE_SCALAR_STMTS (*node), i, stmt)\n     {\n       switch (vect_get_and_check_slp_defs (loop_vinfo, bb_vinfo,\n-\t\t\t\t\t   stmt, (i == 0), &oprnds_info))\n+\t\t\t\t\t   stmt, i, &oprnds_info))\n \t{\n \tcase 0:\n \t  break;\n@@ -1910,17 +1920,7 @@ vect_analyze_slp (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo,\n \t\t\t\t   max_tree_size))\n       ok = true;\n \n-  if (bb_vinfo && !ok)\n-    {\n-      if (dump_enabled_p ())\n-        dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t \"Failed to SLP the basic block.\\n\");\n-\n-      return false;\n-    }\n-\n-  if (loop_vinfo\n-      && LOOP_VINFO_REDUCTION_CHAINS (loop_vinfo).length () > 0)\n+  if (reduc_chains.length () > 0)\n     {\n       /* Find SLP sequences starting from reduction chains.  */\n       FOR_EACH_VEC_ELT (reduc_chains, i, first_element)\n@@ -1936,7 +1936,7 @@ vect_analyze_slp (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo,\n     }\n \n   /* Find SLP sequences starting from groups of reductions.  */\n-  if (loop_vinfo && LOOP_VINFO_REDUCTIONS (loop_vinfo).length () > 1\n+  if (reductions.length () > 1\n       && vect_analyze_slp_instance (loop_vinfo, bb_vinfo, reductions[0],\n \t\t\t\t    max_tree_size))\n     ok = true;\n@@ -2443,9 +2443,13 @@ vect_slp_analyze_bb_1 (basic_block bb)\n   if (!vect_analyze_slp (NULL, bb_vinfo, n_stmts))\n     {\n       if (dump_enabled_p ())\n-        dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location, \n-\t\t\t \"not vectorized: failed to find SLP opportunities \"\n-\t\t\t \"in basic block.\\n\");\n+\t{\n+\t  dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t   \"Failed to SLP the basic block.\\n\");\n+\t  dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location, \n+\t\t\t   \"not vectorized: failed to find SLP opportunities \"\n+\t\t\t   \"in basic block.\\n\");\n+\t}\n \n       destroy_bb_vec_info (bb_vinfo);\n       return NULL;"}, {"sha": "adde2fb0d1d0dba14ef0d16c5393c4950b968a2b", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/effb52dae5203e21faf5f2c11bb0078e71f74482/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/effb52dae5203e21faf5f2c11bb0078e71f74482/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=effb52dae5203e21faf5f2c11bb0078e71f74482", "patch": "@@ -163,6 +163,7 @@ typedef struct _slp_oprnd_info\n   enum vect_def_type first_dt;\n   tree first_op_type;\n   bool first_pattern;\n+  bool second_pattern;\n } *slp_oprnd_info;\n \n "}]}