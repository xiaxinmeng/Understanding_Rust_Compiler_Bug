{"sha": "f910786b9865adf3548fcbbcd569bc90ea314420", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjkxMDc4NmI5ODY1YWRmMzU0OGZjYmJjZDU2OWJjOTBlYTMxNDQyMA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2010-12-19T09:21:16Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2010-12-19T09:21:16Z"}, "message": "*: Use headername alias to associate private includes to public includes.\n\n2010-11-18  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* config/*/*: Use headername alias to associate private includes\n\tto public includes.\n\t* include/*/*: Same.\n\n\t* scripts/run_doxygen: Update for doxygen 1.7.2.\n\t* doc/doxygen/user.cfg.in: Same.\n\t* doc/doxygen/TODO: Remove.\n\n\t* testsuite/*/std_c++0x_neg.cc: Adjust line number.\n\nFrom-SVN: r168046", "tree": {"sha": "4b41e0833299074d604e649170839d4e8987f4d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b41e0833299074d604e649170839d4e8987f4d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f910786b9865adf3548fcbbcd569bc90ea314420", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f910786b9865adf3548fcbbcd569bc90ea314420", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f910786b9865adf3548fcbbcd569bc90ea314420", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f910786b9865adf3548fcbbcd569bc90ea314420/comments", "author": null, "committer": null, "parents": [{"sha": "f3fb659020df1d8e15f903e2940b1e333c2649b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3fb659020df1d8e15f903e2940b1e333c2649b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3fb659020df1d8e15f903e2940b1e333c2649b4"}], "stats": {"total": 2265, "additions": 1160, "deletions": 1105}, "files": [{"sha": "251acba2e301448b86902638fa10b2b5108fd863", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -1,3 +1,15 @@\n+2010-11-18  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* config/*/*: Use headername alias to associate private includes\n+\tto public includes.\n+\t* include/*/*: Same.\n+\n+\t* scripts/run_doxygen: Update for doxygen 1.7.2.\n+\t* doc/doxygen/user.cfg.in: Same.\n+\t* doc/doxygen/TODO: Remove.\n+\n+\t* testsuite/*/std_c++0x_neg.cc: Adjust line number.\n+\n 2010-12-17  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/basic_string.h (operator+(basic_string<>&&,"}, {"sha": "f482d20fec09f42fc8dd51383ddfc318a7914eef", "filename": "libstdc++-v3/config/allocator/bitmap_allocator_base.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fbitmap_allocator_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fbitmap_allocator_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fbitmap_allocator_base.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file c++allocator.h\n+/** @file bits/c++allocator.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{memory}\n  */\n \n #ifndef _GLIBCXX_CXX_ALLOCATOR_H"}, {"sha": "56a6f457bf30835e2f6ebaa9c946c2f021a4718f", "filename": "libstdc++-v3/config/allocator/malloc_allocator_base.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fmalloc_allocator_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fmalloc_allocator_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fmalloc_allocator_base.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file c++allocator.h\n+/** @file bits/c++allocator.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{memory}\n  */\n \n #ifndef _GLIBCXX_CXX_ALLOCATOR_H"}, {"sha": "135bfacb3af7779b461e553e0538595a31ed23aa", "filename": "libstdc++-v3/config/allocator/mt_allocator_base.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fmt_allocator_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fmt_allocator_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fmt_allocator_base.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file c++allocator.h\n+/** @file bits/c++allocator.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{memory}\n  */\n \n #ifndef _GLIBCXX_CXX_ALLOCATOR_H"}, {"sha": "8da6d11625f8ff2f7c0205517c20c4cecea76cd3", "filename": "libstdc++-v3/config/allocator/new_allocator_base.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fnew_allocator_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fnew_allocator_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fnew_allocator_base.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file c++allocator.h\n+/** @file bits/c++allocator.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{memory}\n  */\n \n #ifndef _GLIBCXX_CXX_ALLOCATOR_H"}, {"sha": "91e0b9842955b8206c5b42c90260bba55c30820e", "filename": "libstdc++-v3/config/allocator/pool_allocator_base.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fpool_allocator_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fpool_allocator_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fpool_allocator_base.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file c++allocator.h\n+/** @file bits/c++allocator.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{memory}\n  */\n \n #ifndef _GLIBCXX_CXX_ALLOCATOR_H"}, {"sha": "78b0c153b7798bcf81df5047a2b59697d0acc425", "filename": "libstdc++-v3/config/cpu/generic/atomicity_builtins/atomicity.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity_builtins%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity_builtins%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity_builtins%2Fatomicity.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,10 +23,6 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file ext/atomicity.h\n- *  This file is a GNU extension to the Standard C++ Library.\n- */\n-\n #include <bits/c++config.h>\n #include <bits/atomic_word.h>\n "}, {"sha": "3f08ebb1fd6a6442110ba49fdb5089ab3a48909e", "filename": "libstdc++-v3/config/cpu/generic/atomicity_mutex/atomicity.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity_mutex%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity_mutex%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity_mutex%2Fatomicity.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,10 +23,6 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file ext/atomicity.h\n- *  This file is a GNU extension to the Standard C++ Library.\n- */\n-\n #include <ext/atomicity.h>\n #include <ext/concurrence.h>\n "}, {"sha": "a71a2fb442ada045cfa166894986f74c5f325d07", "filename": "libstdc++-v3/config/cpu/generic/cpu_defines.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fcpu_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fcpu_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fcpu_defines.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file cpu_defines.h\n+/** @file bits/cpu_defines.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{iosfwd}\n  */\n \n #ifndef _GLIBCXX_CPU_DEFINES"}, {"sha": "320e980bd3f1f403ad2a67280d07bcc887e3bbcc", "filename": "libstdc++-v3/config/cpu/microblaze/cpu_defines.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fmicroblaze%2Fcpu_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fmicroblaze%2Fcpu_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fmicroblaze%2Fcpu_defines.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -24,6 +24,11 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n+/** @file bits/cpu_defines.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{iosfwd}\n+ */\n+\n #ifndef _GLIBCXX_CPU_DEFINES\n #define _GLIBCXX_CPU_DEFINES 1\n "}, {"sha": "dded89fa64958da28468dd1c17949eb4e4a2446d", "filename": "libstdc++-v3/config/cpu/powerpc/cpu_defines.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fpowerpc%2Fcpu_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fpowerpc%2Fcpu_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fpowerpc%2Fcpu_defines.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file cpu_defines.h\n+/** @file bits/cpu_defines.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{iosfwd}\n  */\n \n #ifndef _GLIBCXX_CPU_DEFINES"}, {"sha": "a639507da540bd232e7ed7636e73e60f8326c6c9", "filename": "libstdc++-v3/config/io/basic_file_stdio.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -27,9 +27,9 @@\n // ISO C++ 14882: 27.8  File-based streams\n //\n \n-/** @file basic_file.h\n+/** @file bits/basic_file.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{ios}\n  */\n \n #ifndef _GLIBCXX_BASIC_FILE_STDIO_H"}, {"sha": "6a21a887c6571500564e0c6eb39e102a82b6cad5", "filename": "libstdc++-v3/config/io/c_io_stdio.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fc_io_stdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fc_io_stdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fc_io_stdio.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,9 +23,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file c++io.h\n+/** @file bits/c++io.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{ios}\n  */\n \n // c_io_stdio.h - Defines for using \"C\" stdio.h"}, {"sha": "29c16a2103421e6dba72f2470d719062754c67a7", "filename": "libstdc++-v3/config/locale/generic/c_locale.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,9 +23,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file c++locale.h\n+/** @file bits/c++locale.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //"}, {"sha": "c6e1afd5e34dd4207bef8bc7a5a9d3ca3561c72a", "filename": "libstdc++-v3/config/locale/generic/messages_members.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmessages_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmessages_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmessages_members.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,9 +23,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file messages_members.h\n+/** @file bits/messages_members.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //"}, {"sha": "785a272aac547779a9e556854f5d38e668718a2e", "filename": "libstdc++-v3/config/locale/generic/time_members.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -24,9 +24,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file time_members.h\n+/** @file bits/time_members.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //"}, {"sha": "85d002206a107bb6dae3f0daacba1689f81a9680", "filename": "libstdc++-v3/config/locale/gnu/c++locale_internal.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc%2B%2Blocale_internal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc%2B%2Blocale_internal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc%2B%2Blocale_internal.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,9 +23,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file c++locale_internal.h\n+/** @file bits/c++locale_internal.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n // Written by Jakub Jelinek <jakub@redhat.com>"}, {"sha": "f3aa2e3cef213d1ac13d1081074d23acf8c7270a", "filename": "libstdc++-v3/config/locale/gnu/c_locale.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,9 +23,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file c++locale.h\n+/** @file bits/c++locale.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //"}, {"sha": "836f76aad878369119e6ebe565f2d5c52665f3ec", "filename": "libstdc++-v3/config/locale/gnu/messages_members.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,9 +23,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file messages_members.h\n+/** @file bits/messages_members.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //"}, {"sha": "7d3ddc27ec7a57bd012b1d9555d30348009fe205", "filename": "libstdc++-v3/config/locale/gnu/time_members.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -24,9 +24,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file time_members.h\n+/** @file bits/time_members.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //"}, {"sha": "21a023f0c67fa7e1b299b216513173e5ad2ed330", "filename": "libstdc++-v3/config/locale/ieee_1003.1-2001/c_locale.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fc_locale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fc_locale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fc_locale.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file c++locale.h\n+/** @file bits/c++locale.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //"}, {"sha": "8612984509dca9c77693ea0a82c9d8b6c2697040", "filename": "libstdc++-v3/config/locale/ieee_1003.1-2001/messages_members.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fmessages_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fmessages_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fmessages_members.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file messages_members.h\n+/** @file bits/messages_members.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //"}, {"sha": "0715f144c589e1ea72c655a5b457ed5665f0044d", "filename": "libstdc++-v3/config/os/aix/atomic_word.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fatomic_word.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fatomic_word.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fatomic_word.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,6 +22,11 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n+/** @file bits/atomic_word.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{ext/atomicity.h}\n+ */\n+\n #ifndef _GLIBCXX_ATOMIC_WORD_H\n #define _GLIBCXX_ATOMIC_WORD_H\t1\n \n@@ -33,6 +38,6 @@ typedef int _Atomic_word;\n #else\n #define _GLIBCXX_READ_MEM_BARRIER __asm __volatile (\"\":::\"memory\")\n #define _GLIBCXX_WRITE_MEM_BARRIER __asm __volatile (\"\":::\"memory\")\n-#endif \n+#endif\n \n #endif"}, {"sha": "435f9cfc0e06f2a8f443c91700d90714f314df4c", "filename": "libstdc++-v3/config/os/aix/ctype_inline.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fctype_inline.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -21,10 +21,10 @@\n // a copy of the GCC Runtime Library Exception along with this program;\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n-  \n-/** @file ctype_inline.h\n+\n+/** @file bits/ctype_inline.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //\n@@ -33,17 +33,17 @@\n \n // ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n // functions go in ctype.cc\n-  \n+\n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   bool\n   ctype<char>::\n-  is(mask __m, char __c) const \n+  is(mask __m, char __c) const\n   { return __OBJ_DATA(__lc_ctype)->mask[__c] & __m; }\n \n   const char*\n   ctype<char>::\n-  is(const char* __low, const char* __high, mask* __vec) const \n+  is(const char* __low, const char* __high, mask* __vec) const\n   {\n     while (__low < __high)\n       *__vec++ = __OBJ_DATA(__lc_ctype)->mask[*__low++];\n@@ -52,7 +52,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   const char*\n   ctype<char>::\n-  scan_is(mask __m, const char* __low, const char* __high) const \n+  scan_is(mask __m, const char* __low, const char* __high) const\n   {\n     while (__low < __high && !this->is(__m, *__low))\n       ++__low;\n@@ -61,7 +61,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   const char*\n   ctype<char>::\n-  scan_not(mask __m, const char* __low, const char* __high) const \n+  scan_not(mask __m, const char* __low, const char* __high) const\n   {\n     while (__low < __high && this->is(__m, *__low) != 0)\n       ++__low;"}, {"sha": "606b372e1fcc0a9a062d32970098a1c336e5dbd0", "filename": "libstdc++-v3/config/os/aix/ctype_noninline.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fctype_noninline.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file ctype_noninline.h\n+/** @file bits/ctype_noninline.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //\n@@ -42,7 +42,7 @@\n   : facet(__refs), _M_del(__table != 0 && __del),\n   _M_toupper(NULL), _M_tolower(NULL),\n   _M_table(__table ? __table : classic_table())\n-  { \n+  {\n     memset(_M_widen, 0, sizeof(_M_widen));\n     _M_widen_ok = 0;\n     memset(_M_narrow, 0, sizeof(_M_narrow));\n@@ -53,7 +53,7 @@\n   : facet(__refs), _M_del(__table != 0 && __del),\n   _M_toupper(NULL), _M_tolower(NULL),\n   _M_table(__table ? __table : classic_table())\n-  { \n+  {\n     memset(_M_widen, 0, sizeof(_M_widen));\n     _M_widen_ok = 0;\n     memset(_M_narrow, 0, sizeof(_M_narrow));\n@@ -89,4 +89,3 @@\n       }\n     return __high;\n   }\n-"}, {"sha": "6b06bd1b6686130df74468da2ebdd0dc309be653", "filename": "libstdc++-v3/config/os/aix/os_defines.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fos_defines.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file os_defines.h\n+/** @file bits/os_defines.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{iosfwd}\n  */\n \n #ifndef _GLIBCXX_OS_DEFINES"}, {"sha": "ef12c6586356a4f1df723d246ca8ea07808f6be5", "filename": "libstdc++-v3/config/os/bionic/ctype_inline.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbionic%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbionic%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbionic%2Fctype_inline.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file ctype_inline.h\n+/** @file bits/ctype_inline.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //"}, {"sha": "78bc2960800eb8db6010b2c6a68ced1a8c249b22", "filename": "libstdc++-v3/config/os/bionic/ctype_noninline.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbionic%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbionic%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbionic%2Fctype_noninline.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file ctype_noninline.h\n+/** @file bits/ctype_noninline.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //"}, {"sha": "0c8f77d139edb4ad8d22599c02bc1e4567b7fa26", "filename": "libstdc++-v3/config/os/bionic/os_defines.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbionic%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbionic%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbionic%2Fos_defines.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file os_defines.h\n+/** @file bits/os_defines.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{iosfwd}\n  */\n \n #ifndef _GLIBCXX_OS_DEFINES"}, {"sha": "91e25b23c946adf23abe7b09a32bf836686906e8", "filename": "libstdc++-v3/config/os/bsd/darwin/ctype_inline.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdarwin%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdarwin%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdarwin%2Fctype_inline.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file ctype_inline.h\n+/** @file bits/ctype_inline.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //"}, {"sha": "07fe71d46cdea8c4d9e625e633d53f07248c9330", "filename": "libstdc++-v3/config/os/bsd/darwin/ctype_noninline.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdarwin%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdarwin%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdarwin%2Fctype_noninline.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file ctype_noninline.h\n+/** @file bits/ctype_noninline.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //"}, {"sha": "20636732ad19dea7abaf007742cc804924145ab7", "filename": "libstdc++-v3/config/os/bsd/freebsd/ctype_base.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fctype_base.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -25,11 +25,11 @@\n //\n // ISO C++ 14882: 22.1  Locales\n //\n-  \n+\n // Information as gleaned from /usr/include/ctype.h on FreeBSD 3.4,\n // 4.0 and all versions of the CVS managed file at:\n // :pserver:anoncvs@anoncvs.freebsd.org:/home/ncvs/src/include/ctype.h\n-  \n+\n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /// @brief  Base class for ctype."}, {"sha": "6a7b542b5542b3ad4f797b88b4579a543057fa67", "filename": "libstdc++-v3/config/os/bsd/freebsd/ctype_inline.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fctype_inline.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,24 +22,24 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file ctype_inline.h\n+/** @file bits/ctype_inline.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //\n // ISO C++ 14882: 22.1  Locales\n //\n-  \n+\n // ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n // functions go in ctype.cc\n-  \n+\n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   bool\n   ctype<char>::\n   is(mask __m, char __c) const\n-  { \n+  {\n     if (_M_table)\n       return _M_table[static_cast<unsigned char>(__c)] & __m;\n     else\n@@ -107,15 +107,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     return __low;\n   }\n \n-#ifdef _GLIBCXX_USE_WCHAR_T  \n+#ifdef _GLIBCXX_USE_WCHAR_T\n   inline bool\n   ctype<wchar_t>::\n   do_is(mask __m, wchar_t __c) const\n   {\n     return __istype (__c, __m);\n   }\n \n-  inline const wchar_t* \n+  inline const wchar_t*\n   ctype<wchar_t>::\n   do_is(const wchar_t* __lo, const wchar_t* __hi, mask* __vec) const\n   {\n@@ -124,8 +124,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t   | space | print | graph | cntrl | punct | alnum);\n     return __hi;\n   }\n-  \n-  inline const wchar_t* \n+\n+  inline const wchar_t*\n   ctype<wchar_t>::\n   do_scan_is(mask __m, const wchar_t* __lo, const wchar_t* __hi) const\n   {"}, {"sha": "07fe71d46cdea8c4d9e625e633d53f07248c9330", "filename": "libstdc++-v3/config/os/bsd/freebsd/ctype_noninline.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fctype_noninline.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file ctype_noninline.h\n+/** @file bits/ctype_noninline.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //"}, {"sha": "343560c6c96d9f2080bdf00895a19a7f666b8b53", "filename": "libstdc++-v3/config/os/bsd/netbsd/ctype_inline.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fctype_inline.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file ctype_inline.h\n+/** @file bits/ctype_inline.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //"}, {"sha": "efdb26cb3702fe46741a0be9268d39d22d7306bf", "filename": "libstdc++-v3/config/os/bsd/netbsd/ctype_noninline.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fctype_noninline.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file ctype_noninline.h\n+/** @file bits/ctype_noninline.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //"}, {"sha": "399c64cd33945ce4a1ebb2c8e7e9448c249a4f98", "filename": "libstdc++-v3/config/os/djgpp/ctype_inline.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fctype_inline.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,28 +22,28 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file ctype_inline.h\n+/** @file bits/ctype_inline.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //\n // ISO C++ 14882: 22.1  Locales\n //\n-  \n+\n // ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n // functions go in ctype.cc\n-  \n+\n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   bool\n   ctype<char>::\n-  is(mask __m, char __c) const \n+  is(mask __m, char __c) const\n   { return _M_table[static_cast<unsigned char>(__c)] & __m; }\n \n   const char*\n   ctype<char>::\n-  is(const char* __low, const char* __high, mask* __vec) const \n+  is(const char* __low, const char* __high, mask* __vec) const\n   {\n     while (__low < __high)\n       *__vec++ = _M_table[static_cast<unsigned char>(*__low++)];\n@@ -54,7 +54,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   ctype<char>::\n   scan_is(mask __m, const char* __low, const char* __high) const\n   {\n-    while (__low < __high \n+    while (__low < __high\n \t   && !(_M_table[static_cast<unsigned char>(*__low)] & __m))\n       ++__low;\n     return __low;\n@@ -64,7 +64,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   ctype<char>::\n   scan_not(mask __m, const char* __low, const char* __high) const\n   {\n-    while (__low < __high \n+    while (__low < __high\n \t   && (_M_table[static_cast<unsigned char>(*__low)] & __m) != 0)\n       ++__low;\n     return __low;"}, {"sha": "8f359dbaf72a3dbb03d7da78f766a2a469c37e15", "filename": "libstdc++-v3/config/os/djgpp/ctype_noninline.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fctype_noninline.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,38 +22,38 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file ctype_noninline.h\n+/** @file bits/ctype_noninline.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //\n // ISO C++ 14882: 22.1  Locales\n //\n-  \n+\n // Information as gleaned from DJGPP <ctype.h>\n \n   const ctype_base::mask*\n   ctype<char>::classic_table() throw()\n   { return __dj_ctype_flags+1; }\n \n-  ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n-\t\t     size_t __refs) \n-  : facet(__refs), _M_del(__table != 0 && __del), \n+  ctype<char>::ctype(__c_locale, const mask* __table, bool __del,\n+\t\t     size_t __refs)\n+  : facet(__refs), _M_del(__table != 0 && __del),\n   _M_toupper(__dj_ctype_toupper), _M_tolower(__dj_ctype_tolower),\n-  _M_table(__table ? __table : classic_table()) \n-  { \n+  _M_table(__table ? __table : classic_table())\n+  {\n     memset(_M_widen, 0, sizeof(_M_widen));\n     _M_widen_ok = 0;\n     memset(_M_narrow, 0, sizeof(_M_narrow));\n     _M_narrow_ok = 0;\n   }\n \n-  ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n-  : facet(__refs), _M_del(__table != 0 && __del), \n+  ctype<char>::ctype(const mask* __table, bool __del, size_t __refs)\n+  : facet(__refs), _M_del(__table != 0 && __del),\n   _M_toupper(__dj_ctype_toupper), _M_tolower(__dj_ctype_tolower),\n-  _M_table(__table ? __table : classic_table()) \n-  { \n+  _M_table(__table ? __table : classic_table())\n+  {\n     memset(_M_widen, 0, sizeof(_M_widen));\n     _M_widen_ok = 0;\n     memset(_M_narrow, 0, sizeof(_M_narrow));\n@@ -79,7 +79,7 @@\n   ctype<char>::do_tolower(char __c) const\n   { return _M_tolower[static_cast<unsigned char>(__c)]; }\n \n-  const char* \n+  const char*\n   ctype<char>::do_tolower(char* __low, const char* __high) const\n   {\n     while (__low < __high)"}, {"sha": "d3590180de8abc53c33363b09188309482e14da8", "filename": "libstdc++-v3/config/os/djgpp/error_constants.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Ferror_constants.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Ferror_constants.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Ferror_constants.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file error_constants.h\n+/** @file bits/error_constants.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{system_error}\n  */\n \n #ifndef _GLIBCXX_ERROR_CONSTANTS"}, {"sha": "dba8e4583233fc18d868d067ab91b30486405a01", "filename": "libstdc++-v3/config/os/djgpp/os_defines.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fos_defines.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file os_defines.h\n+/** @file bits/os_defines.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{iosfwd}\n  */\n \n #ifndef _GLIBCXX_OS_DEFINES"}, {"sha": "34acea59a4125a328b54df27d4f19a65ea40fc56", "filename": "libstdc++-v3/config/os/generic/ctype_base.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fctype_base.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -25,9 +25,9 @@\n //\n // ISO C++ 14882: 22.1  Locales\n //\n-  \n+\n // Default information, may not be appropriate for specific host.\n-  \n+\n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /// @brief  Base class for ctype.\n@@ -38,15 +38,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n     // NB: Offsets into ctype<char>::_M_table force a particular size\n     // on the mask type. Because of this, we don't use an enum.\n-    typedef unsigned int \tmask;   \n+    typedef unsigned int \tmask;\n     static const mask upper    \t= 1 << 0;\n     static const mask lower \t= 1 << 1;\n     static const mask alpha \t= 1 << 2;\n     static const mask digit \t= 1 << 3;\n     static const mask xdigit \t= 1 << 4;\n     static const mask space \t= 1 << 5;\n     static const mask print \t= 1 << 6;\n-    static const mask graph \t= (1 << 2) | (1 << 3) | (1 << 9);  // alnum|punct\n+    static const mask graph \t= (1 << 2) | (1 << 3) | (1 << 9); // alnum|punct\n     static const mask cntrl \t= 1 << 8;\n     static const mask punct \t= 1 << 9;\n     static const mask alnum \t= (1 << 2) | (1 << 3);  // alpha|digit"}, {"sha": "219620a1a123ee66810dbf1704ea728d44b03f9f", "filename": "libstdc++-v3/config/os/generic/ctype_inline.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fctype_inline.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file ctype_inline.h\n+/** @file bits/ctype_inline.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //"}, {"sha": "2bb47ce870cb233ac073662468741dc408b2f07c", "filename": "libstdc++-v3/config/os/generic/ctype_noninline.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fctype_noninline.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,9 +23,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file ctype_noninline.h\n+/** @file bits/ctype_noninline.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //"}, {"sha": "311bbf2d86e311227167a3ad47c697b3c2e57074", "filename": "libstdc++-v3/config/os/generic/error_constants.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Ferror_constants.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Ferror_constants.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Ferror_constants.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file error_constants.h\n+/** @file bits/error_constants.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{system_error}\n  */\n \n #ifndef _GLIBCXX_ERROR_CONSTANTS"}, {"sha": "61eb923aba8f522b99bcc50d44ad9fde140d312b", "filename": "libstdc++-v3/config/os/generic/os_defines.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fos_defines.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file os_defines.h\n+/** @file bits/os_defines.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{iosfwd}\n  */\n \n #ifndef _GLIBCXX_OS_DEFINES"}, {"sha": "2baed6ac6ecf05e9e33fd0d6dfbc66acf7ed1cb8", "filename": "libstdc++-v3/config/os/gnu-linux/ctype_base.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_base.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,17 +23,17 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n+/** @file bits/ctype_base.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{locale}\n+ */\n+\n //\n // ISO C++ 14882: 22.1  Locales\n //\n-  \n-/** @file ctype_base.h\n- *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n- */\n \n // Information as gleaned from /usr/include/ctype.h\n-  \n+\n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /// @brief  Base class for ctype.\n@@ -44,7 +44,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n     // NB: Offsets into ctype<char>::_M_table force a particular size\n     // on the mask type. Because of this, we don't use an enum.\n-    typedef unsigned short \tmask;   \n+    typedef unsigned short \tmask;\n     static const mask upper    \t= _ISupper;\n     static const mask lower \t= _ISlower;\n     static const mask alpha \t= _ISalpha;"}, {"sha": "2fce1fd033e8ebbf8a471e97cd0cf0b105ffa307", "filename": "libstdc++-v3/config/os/gnu-linux/ctype_inline.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_inline.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,18 +22,18 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file ctype_inline.h\n+/** @file bits/ctype_inline.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //\n // ISO C++ 14882: 22.1  Locales\n //\n-  \n+\n // ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n // functions go in ctype.cc\n-  \n+\n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   bool\n@@ -54,7 +54,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   ctype<char>::\n   scan_is(mask __m, const char* __low, const char* __high) const\n   {\n-    while (__low < __high \n+    while (__low < __high\n \t   && !(_M_table[static_cast<unsigned char>(*__low)] & __m))\n       ++__low;\n     return __low;\n@@ -64,7 +64,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   ctype<char>::\n   scan_not(mask __m, const char* __low, const char* __high) const\n   {\n-    while (__low < __high \n+    while (__low < __high\n \t   && (_M_table[static_cast<unsigned char>(*__low)] & __m) != 0)\n       ++__low;\n     return __low;"}, {"sha": "492a731c2dc6c63f688addfa3286082fcee93864", "filename": "libstdc++-v3/config/os/gnu-linux/ctype_noninline.h", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_noninline.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -24,15 +24,15 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file ctype_noninline.h\n+/** @file bits/ctype_noninline.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //\n // ISO C++ 14882: 22.1  Locales\n //\n-  \n+\n // Information as gleaned from /usr/include/ctype.h\n \n #if _GLIBCXX_C_LOCALE_GNU\n@@ -68,31 +68,31 @@\n #endif\n \n #if _GLIBCXX_C_LOCALE_GNU\n-  ctype<char>::ctype(__c_locale __cloc, const mask* __table, bool __del, \n-\t\t     size_t __refs) \n-  : facet(__refs), _M_c_locale_ctype(_S_clone_c_locale(__cloc)), \n-  _M_del(__table != 0 && __del), \n-  _M_toupper(_M_c_locale_ctype->__ctype_toupper),  \n-  _M_tolower(_M_c_locale_ctype->__ctype_tolower), \n-  _M_table(__table ? __table : _M_c_locale_ctype->__ctype_b), \n-  _M_widen_ok(0), _M_narrow_ok(0) \n+  ctype<char>::ctype(__c_locale __cloc, const mask* __table, bool __del,\n+\t\t     size_t __refs)\n+  : facet(__refs), _M_c_locale_ctype(_S_clone_c_locale(__cloc)),\n+  _M_del(__table != 0 && __del),\n+  _M_toupper(_M_c_locale_ctype->__ctype_toupper),\n+  _M_tolower(_M_c_locale_ctype->__ctype_tolower),\n+  _M_table(__table ? __table : _M_c_locale_ctype->__ctype_b),\n+  _M_widen_ok(0), _M_narrow_ok(0)\n   {\n     __builtin_memset(_M_widen, 0, sizeof(_M_widen));\n     __builtin_memset(_M_narrow, 0, sizeof(_M_narrow));\n   }\n #else\n-  ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n-\t\t     size_t __refs) \n-  : facet(__refs), _M_c_locale_ctype(_S_get_c_locale()), \n+  ctype<char>::ctype(__c_locale, const mask* __table, bool __del,\n+\t\t     size_t __refs)\n+  : facet(__refs), _M_c_locale_ctype(_S_get_c_locale()),\n   _M_del(__table != 0 && __del), _M_widen_ok(0), _M_narrow_ok(0)\n   {\n     char* __old = setlocale(LC_CTYPE, NULL);\n     char* __sav = NULL;\n     if (__builtin_strcmp(__old, \"C\"))\n-      {    \n+      {\n \tconst size_t __len = __builtin_strlen(__old) + 1;\n \t__sav = new char[__len];\n-\t__builtin_memcpy(__sav, __old, __len);    \n+\t__builtin_memcpy(__sav, __old, __len);\n \tsetlocale(LC_CTYPE, \"C\");\n       }\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n@@ -115,20 +115,20 @@\n #endif\n \n #if _GLIBCXX_C_LOCALE_GNU\n-  ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n-  : facet(__refs), _M_c_locale_ctype(_S_get_c_locale()), \n+  ctype<char>::ctype(const mask* __table, bool __del, size_t __refs)\n+  : facet(__refs), _M_c_locale_ctype(_S_get_c_locale()),\n   _M_del(__table != 0 && __del),\n-  _M_toupper(_M_c_locale_ctype->__ctype_toupper),  \n-  _M_tolower(_M_c_locale_ctype->__ctype_tolower), \n-  _M_table(__table ? __table : _M_c_locale_ctype->__ctype_b), \n-  _M_widen_ok(0), _M_narrow_ok(0) \n+  _M_toupper(_M_c_locale_ctype->__ctype_toupper),\n+  _M_tolower(_M_c_locale_ctype->__ctype_tolower),\n+  _M_table(__table ? __table : _M_c_locale_ctype->__ctype_b),\n+  _M_widen_ok(0), _M_narrow_ok(0)\n   {\n     __builtin_memset(_M_widen, 0, sizeof(_M_widen));\n     __builtin_memset(_M_narrow, 0, sizeof(_M_narrow));\n   }\n #else\n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs)\n-  : facet(__refs), _M_c_locale_ctype(_S_get_c_locale()), \n+  : facet(__refs), _M_c_locale_ctype(_S_get_c_locale()),\n   _M_del(__table != 0 && __del), _M_widen_ok(0), _M_narrow_ok(0)\n   {\n     char* __old = setlocale(LC_CTYPE, NULL);\n@@ -178,7 +178,7 @@\n   ctype<char>::do_tolower(char __c) const\n   { return _M_tolower[static_cast<unsigned char>(__c)]; }\n \n-  const char* \n+  const char*\n   ctype<char>::do_tolower(char* __low, const char* __high) const\n   {\n     while (__low < __high)"}, {"sha": "922e2e9a328e0b291c5c7e076fccc13d73c8f5de", "filename": "libstdc++-v3/config/os/gnu-linux/os_defines.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fos_defines.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file os_defines.h\n+/** @file bits/os_defines.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{iosfwd}\n  */\n \n #ifndef _GLIBCXX_OS_DEFINES"}, {"sha": "a4fd531f25fb299be53375d4c5dde8835d2e9e6e", "filename": "libstdc++-v3/config/os/hpux/ctype_inline.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fctype_inline.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n   \n-/** @file ctype_inline.h\n+/** @file bits/ctype_inline.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //"}, {"sha": "3bd7de3d9ad45c16ce01bb53ff1fdaec27b88e63", "filename": "libstdc++-v3/config/os/hpux/ctype_noninline.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fctype_noninline.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,9 +23,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file ctype_noninline.h\n+/** @file bits/ctype_noninline.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //"}, {"sha": "32dc40b7103a4156a99f53dbe78db896a1d5a2e3", "filename": "libstdc++-v3/config/os/hpux/os_defines.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fos_defines.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file os_defines.h\n+/** @file bits/os_defines.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{iosfwd}\n  */\n \n #ifndef _GLIBCXX_OS_DEFINES"}, {"sha": "28f9ed85081361d3560ba92d646e57926409fc2a", "filename": "libstdc++-v3/config/os/irix/atomic_word.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Fatomic_word.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Fatomic_word.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Fatomic_word.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,6 +22,11 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n+/** @file bits/atomic_word.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{ext/atomicity.h}\n+ */\n+\n #ifndef _GLIBCXX_ATOMIC_WORD_H\n #define _GLIBCXX_ATOMIC_WORD_H\t1\n "}, {"sha": "e6741877c65895ba1527b470490b027b16c6dfb8", "filename": "libstdc++-v3/config/os/irix/irix6.5/ctype_base.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fctype_base.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,12 +22,17 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n+/** @file bits/ctype_base.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{locale}\n+ */\n+\n //\n // ISO C++ 14882: 22.1  Locales\n //\n-  \n+\n // Information as gleaned from /usr/include/ctype.h on irix 6.5\n-  \n+\n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /// @brief  Base class for ctype."}, {"sha": "c1df63b022f0649b05d47ed43b714bf75eefc235", "filename": "libstdc++-v3/config/os/irix/irix6.5/ctype_inline.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fctype_inline.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,18 +22,18 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file ctype_inline.h\n+/** @file bits/ctype_inline.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //\n // ISO C++ 14882: 22.1  Locales\n //\n-  \n+\n // ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n // functions go in ctype.cc\n-  \n+\n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   bool"}, {"sha": "c29f765f03756520d21cf4bc3d24a2799df6c6e2", "filename": "libstdc++-v3/config/os/irix/irix6.5/ctype_noninline.h", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fctype_noninline.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,40 +22,40 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file ctype_noninline.h\n+/** @file bits/ctype_noninline.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //\n // ISO C++ 14882: 22.1  Locales\n //\n-  \n+\n // Information as gleaned from /usr/include/ctype.h\n \n   const ctype_base::mask*\n   ctype<char>::classic_table() throw()\n   { return 0; }\n \n-  ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n+  ctype<char>::ctype(__c_locale, const mask* __table, bool __del,\n \t\t     size_t __refs)\n-  : facet(__refs), _M_del(__table != 0 && __del), \n-  _M_toupper(NULL), _M_tolower(NULL), \n-  _M_table(!__table ? \n-\t   (const mask*) (__libc_attr._ctype_tbl->_class + 1) : __table) \n-  { \n+  : facet(__refs), _M_del(__table != 0 && __del),\n+  _M_toupper(NULL), _M_tolower(NULL),\n+  _M_table(!__table ?\n+\t   (const mask*) (__libc_attr._ctype_tbl->_class + 1) : __table)\n+  {\n     memset(_M_widen, 0, sizeof(_M_widen));\n     _M_widen_ok = 0;\n     memset(_M_narrow, 0, sizeof(_M_narrow));\n     _M_narrow_ok = 0;\n   }\n \n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs)\n-  : facet(__refs), _M_del(__table != 0 && __del), \n-  _M_toupper(NULL), _M_tolower(NULL), \n-  _M_table(!__table ? \n-\t   (const mask*) (__libc_attr._ctype_tbl->_class + 1) : __table) \n-  { \n+  : facet(__refs), _M_del(__table != 0 && __del),\n+  _M_toupper(NULL), _M_tolower(NULL),\n+  _M_table(!__table ?\n+\t   (const mask*) (__libc_attr._ctype_tbl->_class + 1) : __table)\n+  {\n     memset(_M_widen, 0, sizeof(_M_widen));\n     _M_widen_ok = 0;\n     memset(_M_narrow, 0, sizeof(_M_narrow));\n@@ -81,7 +81,7 @@\n   ctype<char>::do_tolower(char __c) const\n   { return _tolower(__c); }\n \n-  const char* \n+  const char*\n   ctype<char>::do_tolower(char* __low, const char* __high) const\n   {\n     while (__low < __high)\n@@ -91,4 +91,3 @@\n       }\n     return __high;\n   }\n-"}, {"sha": "7128190ecbbc93f4ddf6a3db902f386823aa4b53", "filename": "libstdc++-v3/config/os/irix/irix6.5/os_defines.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fos_defines.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,6 +22,11 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n+/** @file bits/os_defines.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{iosfwd}\n+ */\n+\n #ifndef _GLIBCXX_OS_DEFINES\n #define _GLIBCXX_OS_DEFINES 1\n "}, {"sha": "3f96b4837b82d11bc9cc0bccbae5c612d774e77f", "filename": "libstdc++-v3/config/os/mingw32/ctype_inline.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Fctype_inline.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,15 +22,15 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file ctype_inline.h\n+/** @file bits/ctype_inline.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //\n // ISO C++ 14882: 22.1  Locales\n //\n-  \n+\n // ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n // functions go in ctype.cc\n \n@@ -40,11 +40,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   ctype<char>::\n   is(mask __m, char __c) const\n   { return (_M_table[static_cast<unsigned char>(__c) ] & __m); }\n-   \n- \n+\n+\n   const char*\n   ctype<char>::\n-  is(const char* __low, const char* __high, mask* __vec) const \n+  is(const char* __low, const char* __high, mask* __vec) const\n   {\n     while (__low < __high)\n       *__vec++ = _M_table[static_cast<unsigned char>(*__low++)];"}, {"sha": "968797b118edb3356cba4e833575325545ee5e2e", "filename": "libstdc++-v3/config/os/mingw32/ctype_noninline.h", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Fctype_noninline.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,23 +23,23 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file ctype_noninline.h\n+/** @file bits/ctype_noninline.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //\n // ISO C++ 14882: 22.1  Locales\n //\n-  \n+\n // The classic table used in libstdc++ is *not* the C _ctype table\n // used by mscvrt, but is based on the ctype masks defined for libstdc++\n // in ctype_base.h.\n \n   const ctype_base::mask*\n   ctype<char>::classic_table() throw()\n   {\n-    static const ctype_base::mask _S_classic_table[256] = \n+    static const ctype_base::mask _S_classic_table[256] =\n     {\n       cntrl /* null */,\n       cntrl /* ^A */,\n@@ -182,23 +182,23 @@\n     return _S_classic_table;\n   }\n \n-  ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n-\t\t     size_t __refs) \n-  : facet(__refs), _M_del(__table != 0 && __del), \n+  ctype<char>::ctype(__c_locale, const mask* __table, bool __del,\n+\t\t     size_t __refs)\n+  : facet(__refs), _M_del(__table != 0 && __del),\n   _M_toupper(NULL), _M_tolower(NULL),\n-  _M_table(__table ? __table : classic_table())  \n-  { \n+  _M_table(__table ? __table : classic_table())\n+  {\n     memset(_M_widen, 0, sizeof(_M_widen));\n     _M_widen_ok = 0;\n     memset(_M_narrow, 0, sizeof(_M_narrow));\n     _M_narrow_ok = 0;\n   }\n \n-  ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n-  : facet(__refs), _M_del(__table != 0 && __del), \n+  ctype<char>::ctype(const mask* __table, bool __del, size_t __refs)\n+  : facet(__refs), _M_del(__table != 0 && __del),\n   _M_toupper(NULL), _M_tolower(NULL),\n-  _M_table(__table ? __table : classic_table()) \n-  { \n+  _M_table(__table ? __table : classic_table())\n+  {\n     memset(_M_widen, 0, sizeof(_M_widen));\n     _M_widen_ok = 0;\n     memset(_M_narrow, 0, sizeof(_M_narrow));\n@@ -224,7 +224,7 @@\n   ctype<char>::do_tolower(char __c) const\n   { return (this->is(ctype_base::upper, __c) ? (__c - 'A' + 'a') : __c); }\n \n-  const char* \n+  const char*\n   ctype<char>::do_tolower(char* __low, const char* __high) const\n   {\n     while (__low < __high)\n@@ -234,7 +234,3 @@\n       }\n     return __high;\n   }\n-\n-\n-\n-"}, {"sha": "7c6c59b17f825798d844f45cb0a28f562758a352", "filename": "libstdc++-v3/config/os/mingw32/error_constants.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Ferror_constants.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Ferror_constants.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Ferror_constants.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file error_constants.h\n+/** @file bits/error_constants.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{system_error}\n  */\n \n #ifndef _GLIBCXX_ERROR_CONSTANTS\n@@ -80,8 +80,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n //    no_child_process = \t\t\tECHILD,\n //    no_link = \t\t\t\tENOLINK,\n       no_lock_available = \t\t\tENOLCK,\n-//    no_message_available = \t\t\tENODATA, \n-//    no_message = \t\t\t\tENOMSG, \n+//    no_message_available = \t\t\tENODATA,\n+//    no_message = \t\t\t\tENOMSG,\n //    no_protocol_option = \t\t\tENOPROTOOPT,\n //    no_space_on_device = \t\t\tENOSPC,\n //    no_stream_resources = \t\t\tENOSR,"}, {"sha": "ac1a90d0a6dd915a64124f4a3a12f1270b19cd83", "filename": "libstdc++-v3/config/os/mingw32/os_defines.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Fos_defines.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,9 +23,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file os_defines.h\n+/** @file bits/os_defines.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{iosfwd}\n  */\n \n #ifndef _GLIBCXX_OS_DEFINES"}, {"sha": "72053096b497cbbd958942aafc15512d2bfb755c", "filename": "libstdc++-v3/config/os/newlib/ctype_inline.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fctype_inline.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,18 +22,18 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file ctype_inline.h\n+/** @file bits/ctype_inline.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //\n // ISO C++ 14882: 22.1  Locales\n //\n-  \n+\n // ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n // functions go in ctype.cc\n-  \n+\n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   bool\n@@ -52,7 +52,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   const char*\n   ctype<char>::\n-  scan_is(mask __m, const char* __low, const char* __high) const \n+  scan_is(mask __m, const char* __low, const char* __high) const\n   {\n     while (__low < __high && !this->is(__m, *__low))\n       ++__low;"}, {"sha": "c9db357deda23468e83ac28776c600c6ac69ff6c", "filename": "libstdc++-v3/config/os/newlib/ctype_noninline.h", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fctype_noninline.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,38 +22,38 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file ctype_noninline.h\n+/** @file bits/ctype_noninline.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //\n // ISO C++ 14882: 22.1  Locales\n //\n-  \n+\n // Information as gleaned from /usr/include/ctype.h\n-  \n+\n   const ctype_base::mask*\n   ctype<char>::classic_table() throw()\n   { return _ctype_ + 1; }\n \n-  ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n-\t\t     size_t __refs) \n-  : facet(__refs), _M_del(__table != 0 && __del), \n-  _M_toupper(NULL), _M_tolower(NULL), \n-  _M_table(__table ? __table : classic_table()) \n-  { \n+  ctype<char>::ctype(__c_locale, const mask* __table, bool __del,\n+\t\t     size_t __refs)\n+  : facet(__refs), _M_del(__table != 0 && __del),\n+  _M_toupper(NULL), _M_tolower(NULL),\n+  _M_table(__table ? __table : classic_table())\n+  {\n     memset(_M_widen, 0, sizeof(_M_widen));\n     _M_widen_ok = 0;\n     memset(_M_narrow, 0, sizeof(_M_narrow));\n     _M_narrow_ok = 0;\n   }\n \n-  ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n-  : facet(__refs), _M_del(__table != 0 && __del), \n-  _M_toupper(NULL), _M_tolower(NULL), \n-  _M_table(__table ? __table : classic_table()) \n-  { \n+  ctype<char>::ctype(const mask* __table, bool __del, size_t __refs)\n+  : facet(__refs), _M_del(__table != 0 && __del),\n+  _M_toupper(NULL), _M_tolower(NULL),\n+  _M_table(__table ? __table : classic_table())\n+  {\n     memset(_M_widen, 0, sizeof(_M_widen));\n     _M_widen_ok = 0;\n     memset(_M_narrow, 0, sizeof(_M_narrow));\n@@ -62,7 +62,7 @@\n \n   char\n   ctype<char>::do_toupper(char __c) const\n-  { \n+  {\n     int __x = __c;\n     return (this->is(ctype_base::lower, __c) ? (__x - 'a' + 'A') : __x);\n   }\n@@ -80,12 +80,12 @@\n \n   char\n   ctype<char>::do_tolower(char __c) const\n-  { \n+  {\n     int __x = __c;\n     return (this->is(ctype_base::upper, __c) ? (__x - 'A' + 'a') : __x);\n   }\n \n-  const char* \n+  const char*\n   ctype<char>::do_tolower(char* __low, const char* __high) const\n   {\n     while (__low < __high)\n@@ -95,4 +95,3 @@\n       }\n     return __high;\n   }\n-"}, {"sha": "3094cc66f46b62c3fbf456c181351201ec82cc42", "filename": "libstdc++-v3/config/os/newlib/os_defines.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fos_defines.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file os_defines.h\n+/** @file bits/os_defines.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{iosfwd}\n  */\n \n #ifndef _GLIBCXX_OS_DEFINES"}, {"sha": "620db3a0d4eb80af6eeba34cac51e73f9ff9ec06", "filename": "libstdc++-v3/config/os/qnx/qnx6.1/ctype_base.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fqnx%2Fqnx6.1%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fqnx%2Fqnx6.1%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fqnx%2Fqnx6.1%2Fctype_base.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,12 +22,17 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n+/** @file bits/ctype_base.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{locale}\n+ */\n+\n //\n // ISO C++ 14882: 22.1  Locales\n //\n-  \n+\n // Information as gleaned from /usr/include/ctype.h.\n-  \n+\n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /// @brief  Base class for ctype."}, {"sha": "2baa166547296d8bc8829a56dc793ec450a58cc2", "filename": "libstdc++-v3/config/os/qnx/qnx6.1/ctype_inline.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fqnx%2Fqnx6.1%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fqnx%2Fqnx6.1%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fqnx%2Fqnx6.1%2Fctype_inline.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file ctype_inline.h\n+/** @file bits/ctype_inline.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //"}, {"sha": "08f0f3e312da5950e94d405f6d91beb2b059413b", "filename": "libstdc++-v3/config/os/qnx/qnx6.1/ctype_noninline.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fqnx%2Fqnx6.1%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fqnx%2Fqnx6.1%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fqnx%2Fqnx6.1%2Fctype_noninline.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file ctype_noninline.h\n+/** @file bits/ctype_noninline.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //"}, {"sha": "a4fd531f25fb299be53375d4c5dde8835d2e9e6e", "filename": "libstdc++-v3/config/os/solaris/solaris2.7/ctype_inline.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fctype_inline.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n   \n-/** @file ctype_inline.h\n+/** @file bits/ctype_inline.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //"}, {"sha": "42f7c1e42ea4fdb11dc29ac7c9aa544d8d60bae8", "filename": "libstdc++-v3/config/os/solaris/solaris2.7/ctype_noninline.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fctype_noninline.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,9 +23,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file ctype_noninline.h\n+/** @file bits/ctype_noninline.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //"}, {"sha": "deea52afdd49a0e6d190cc4eb802d1d11b53e895", "filename": "libstdc++-v3/config/os/tpf/ctype_inline.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Ftpf%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Ftpf%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Ftpf%2Fctype_inline.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file ctype_inline.h\n+/** @file bits/ctype_inline.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //"}, {"sha": "4fc340cc82cdf9b1b0f081afc62ae112ce1efc7f", "filename": "libstdc++-v3/config/os/tpf/ctype_noninline.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Ftpf%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Ftpf%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Ftpf%2Fctype_noninline.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file ctype_noninline.h\n+/** @file bits/ctype_noninline.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //"}, {"sha": "56e0be90a5add2526d67460b01d78333e3884523", "filename": "libstdc++-v3/config/os/tpf/os_defines.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Ftpf%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Ftpf%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Ftpf%2Fos_defines.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file os_defines.h\n+/** @file bits/os_defines.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{iosfwd}\n  */\n \n #ifndef _GLIBCXX_OS_DEFINES"}, {"sha": "d60d1190d3ed5ea05331e8453d7dfde473e81732", "filename": "libstdc++-v3/config/os/uclibc/ctype_base.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fuclibc%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fuclibc%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fuclibc%2Fctype_base.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,30 +23,30 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n+/** @file bits/ctype_base.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{locale}\n+ */\n+\n //\n // ISO C++ 14882: 22.1  Locales\n //\n-  \n-/** @file ctype_base.h\n- *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n- */\n \n // Information as gleaned from /usr/include/ctype.h\n-  \n+\n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /// @brief  Base class for ctype.\n   struct ctype_base\n   {\n     // Note: In uClibc, the following two types depend on configuration.\n- \n+\n     // Non-standard typedefs.\n     typedef const __ctype_touplow_t* __to_type;\n \n     // NB: Offsets into ctype<char>::_M_table force a particular size\n     // on the mask type. Because of this, we don't use an enum.\n-    typedef __ctype_mask_t\tmask;   \n+    typedef __ctype_mask_t\tmask;\n     static const mask upper    \t= _ISupper;\n     static const mask lower \t= _ISlower;\n     static const mask alpha \t= _ISalpha;"}, {"sha": "2edeae5a5abaeee02c9c7b85b9f4db82a5a97113", "filename": "libstdc++-v3/config/os/uclibc/ctype_inline.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fuclibc%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fuclibc%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fuclibc%2Fctype_inline.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,18 +22,18 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file ctype_inline.h\n+/** @file bits/ctype_inline.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //\n // ISO C++ 14882: 22.1  Locales\n //\n-  \n+\n // ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n // functions go in ctype.cc\n-  \n+\n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   bool\n@@ -54,7 +54,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   ctype<char>::\n   scan_is(mask __m, const char* __low, const char* __high) const\n   {\n-    while (__low < __high \n+    while (__low < __high\n \t   && !(_M_table[static_cast<unsigned char>(*__low)] & __m))\n       ++__low;\n     return __low;\n@@ -64,7 +64,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   ctype<char>::\n   scan_not(mask __m, const char* __low, const char* __high) const\n   {\n-    while (__low < __high \n+    while (__low < __high\n \t   && (_M_table[static_cast<unsigned char>(*__low)] & __m) != 0)\n       ++__low;\n     return __low;"}, {"sha": "68e97131d2d904305c14e2235562eb590946347e", "filename": "libstdc++-v3/config/os/uclibc/ctype_noninline.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fuclibc%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fuclibc%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fuclibc%2Fctype_noninline.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,9 +23,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file ctype_noninline.h\n+/** @file bits/ctype_noninline.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //"}, {"sha": "ac8c28c04c79daf445895dcb832a99a4fad63e5b", "filename": "libstdc++-v3/config/os/uclibc/os_defines.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fuclibc%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fuclibc%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fuclibc%2Fos_defines.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file os_defines.h\n+/** @file bits/os_defines.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{iosfwd}\n  */\n \n #ifndef _GLIBCXX_OS_DEFINES"}, {"sha": "929d7104bcb8511724bcbf225f313a5b0bb9d027", "filename": "libstdc++-v3/config/os/vxworks/ctype_inline.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fvxworks%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fvxworks%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fvxworks%2Fctype_inline.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file ctype_inline.h\n+/** @file bits/ctype_inline.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //"}, {"sha": "a2d9119be1852d7458ca175f15c8c86d989ebe6b", "filename": "libstdc++-v3/config/os/vxworks/ctype_noninline.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fvxworks%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fvxworks%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fvxworks%2Fctype_noninline.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,9 +23,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file ctype_noninline.h\n+/** @file bits/ctype_noninline.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //"}, {"sha": "b436f47d08683e5240273ef4c022b67bdfb84cbe", "filename": "libstdc++-v3/config/os/vxworks/os_defines.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fvxworks%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fvxworks%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fvxworks%2Fos_defines.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file os_defines.h\n+/** @file bits/os_defines.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{iosfwd}\n  */\n \n #ifndef _GLIBCXX_OS_DEFINES"}, {"sha": "d50c65d8bab6ddcdd7979a5cb79a384328d554a1", "filename": "libstdc++-v3/doc/doxygen/TODO", "status": "removed", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3fb659020df1d8e15f903e2940b1e333c2649b4/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2FTODO", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3fb659020df1d8e15f903e2940b1e333c2649b4/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2FTODO", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2FTODO?ref=f3fb659020df1d8e15f903e2940b1e333c2649b4", "patch": "@@ -1,70 +0,0 @@\n-\n-The approach I've been using for a given header is to recursively do each\n-of the \"bits\" headers which make up the standard header.  So, e.g., while\n-there are four headers making up <algorithm>, three of them were already\n-documented in the course of doing other headers.\n-\n-\"Untouched\" means I've deliberately skipped it for various reasons, or\n-haven't gotten to it yet.  It /will/ be done (by somebody, eventually.)\n-\n-If you document an area and need to skip (for whatever reason) a non-trivial\n-entity (i.e., one that should be documented), go ahead and add the comment\n-markup, and use the homegrown @doctodo tag.  See include/bits/stl_iterator.h\n-for examples of this.  Doing so will at least cause doxygen to consider the\n-entitiy as documented and include it in the output.  It will also add the\n-entity to the generated TODO page.\n-\n-\n- Area           Still needs to be doxygen-documented\n------------------------------------------------------------\n-\n-c17             FINISHED (Nothing in Clause 17 \"exists\" in terms of code.)\n-c18             FINISHED, Note A\n-c19             Note A\n-c20             Note A\n-c21             Public functions basic_string done, Note B\n-c22             Most still to do; see docs/html/22_locale/*\n-c23             See doxygroups.cc and Note B.  Notes on what invalidates\n-                iterators need to be added.\n-c24             stl_iterator.h (__normal_iterator, other small TODO bits)\n-                stream iterators\n-c25             stl_algo.h (lots of stuff)\n-c26             <complex>, <valarray>, stl_numeric.h[26.4], Note A\n-c27             ios_base callbacks and local storage\n-                basic_ios::copyfmt()\n-                std_streambuf.h's __copy_streambufs()\n-                    \" \"           _M_* protected memfns (data has been done)\n-                fstream and sstream protected members\n-\n-backward/*      Not scanned by doxygen.  Should it be?  Doubtful.\n-\n-ext/*           Some of the SGI algorithm/functional extensions.\n-                All of rope/hashing/slist need docs.\n-\n-__gnu_cxx       Tricky.  Right now ext/* are in this namespace.\n-\n------------------------------------------------------------\n-\n-NOTES:\n-\n-A)  So far I have not tried to document any of the <c*> headers.  So entities\n-such as atexit() are undocumented throughout the library.  Since we usually\n-do not have the C code (to which the doxygen comments would be attached),\n-this would need to be done in entirely separate files, a la doxygroups.cc.\n-\n-B)  Huge chunks of containers and strings are described in common \"Tables\"\n-in the standard.  These are pseudo-duplicated in tables.html.  We can\n-use doxygen hooks like @pre and @see to reference the tables.  Then the\n-individual classes do like the standard does, and only document members for\n-which additional info is available.\n-\n-\n-STYLE:\n-stl_deque.h, stl_pair.h, and stl_algobase.h have good examples of what I've\n-been using for class, namespace-scope, and function documentation, respectively.\n-These should serve as starting points.  /Please/ maintain the inter-word and\n-inter-sentence spacing, as this might be generated and/or scanned in the\n-future.\n-\n-\n-vim:ts=4:et:"}, {"sha": "c9b2df899afea95838a77fbd4543172ed2bafcb8", "filename": "libstdc++-v3/doc/doxygen/user.cfg.in", "status": "modified", "additions": 246, "deletions": 220, "changes": 466, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -1,14 +1,14 @@\n-# Doxyfile 1.7.1\n+# Doxyfile 1.7.2\n \n # This file describes the settings to be used by the documentation system\n-# doxygen (www.doxygen.org) for a project\n+# doxygen (www.doxygen.org) for a project.\n #\n-# All text after a hash (#) is considered a comment and will be ignored\n+# All text after a hash (#) is considered a comment and will be ignored.\n # The format is:\n #       TAG = value [value, ...]\n # For lists items can also be appended using:\n #       TAG += value [value, ...]\n-# Values that contain spaces should be placed between quotes (\" \")\n+# Values that contain spaces should be placed between quotes (\" \").\n \n #---------------------------------------------------------------------------\n # Project related configuration options\n@@ -126,7 +126,7 @@ STRIP_FROM_PATH        =\n STRIP_FROM_INC_PATH    =\n \n # If the SHORT_NAMES tag is set to YES, doxygen will generate much shorter\n-# (but less readable) file names. This can be useful is your file systems\n+# (but less readable) file names. This can be useful if your file system\n # doesn't support long names like on DOS, Mac, or CD-ROM.\n \n SHORT_NAMES            = @shortname@\n@@ -179,8 +179,10 @@ TAB_SIZE               = 4\n # will result in a user-defined paragraph with heading \"Side Effects:\".\n # You can put \\n's in the value part of an alias to insert newlines.\n \n-ALIASES                = \"doctodo=@todo\\nDoc me!  See doc/doxygen/TODO and http://gcc.gnu.org/ml/libstdc++/2002-02/msg00003.html for more.  \" \\\n-\t\t\t \"isiosfwd=One of the @link io I/O @endlink typedefs\"\n+ALIASES = doctodo=\"@todo\\nNeeds documentation! See http://gcc.gnu.org/onlinedocs/libstdc++/manual/documentation_style.html\"\n+\n+ALIASES += headername{1}=\"Instead, include <\\1>.\"\n+ALIASES += headername{2}=\"Instead, include <\\1> or <\\2>.\"\n \n # Set the OPTIMIZE_OUTPUT_FOR_C tag to YES if your project consists of C\n # sources only. Doxygen will then generate output that is more tailored for C.\n@@ -224,7 +226,7 @@ EXTENSION_MAPPING      =\n # to include (a tag file for) the STL sources as input, then you should\n # set this tag to YES in order to let doxygen match functions declarations and\n # definitions whose arguments contain STL classes (e.g. func(std::string); v.s.\n-# func(std::string) {}). This also make the inheritance and collaboration\n+# func(std::string) {}). This also makes the inheritance and collaboration\n # diagrams that involve STL classes more complete and accurate.\n \n BUILTIN_STL_SUPPORT    = NO\n@@ -242,7 +244,7 @@ SIP_SUPPORT            = NO\n \n # For Microsoft's IDL there are propget and propput attributes to indicate getter\n # and setter methods for a property. Setting this option to YES (the default)\n-# will make doxygen to replace the get and set methods by a property in the\n+# will make doxygen replace the get and set methods by a property in the\n # documentation. This will only work if the methods are indeed getting or\n # setting a simple type. If this is not the case, or you want to show the\n # methods anyway, you should set this option to NO.\n@@ -283,7 +285,7 @@ TYPEDEF_HIDES_STRUCT   = NO\n # causing a significant performance penality.\n # If the system has enough physical memory increasing the cache will improve the\n # performance by keeping more symbols in memory. Note that the value works on\n-# a logarithmic scale so increasing the size by one will rougly double the\n+# a logarithmic scale so increasing the size by one will roughly double the\n # memory usage. The cache size is given by this formula:\n # 2^(16+SYMBOL_CACHE_SIZE). The valid range is 0..9, the default is 0,\n # corresponding to a cache size of 2^16 = 65536 symbols\n@@ -328,7 +330,7 @@ EXTRACT_LOCAL_METHODS  = YES\n # extracted and appear in the documentation as a namespace called\n # 'anonymous_namespace{file}', where file will be replaced with the base\n # name of the file that contains the anonymous namespace. By default\n-# anonymous namespace are hidden.\n+# anonymous namespaces are hidden.\n \n EXTRACT_ANON_NSPACES   = NO\n \n@@ -469,10 +471,10 @@ GENERATE_DEPRECATEDLIST= YES\n ENABLED_SECTIONS       = @enabled_sections@\n \n # The MAX_INITIALIZER_LINES tag determines the maximum number of lines\n-# the initial value of a variable or define consists of for it to appear in\n+# the initial value of a variable or macro consists of for it to appear in\n # the documentation. If the initializer consists of more lines than specified\n # here it will be hidden. Use a value of 0 to hide initializers completely.\n-# The appearance of the initializer of individual variables and defines in the\n+# The appearance of the initializer of individual variables and macros in the\n # documentation can be controlled using \\showinitializer or \\hideinitializer\n # command in the documentation regardless of this setting.\n \n@@ -550,7 +552,7 @@ WARN_IF_UNDOCUMENTED   = NO\n \n WARN_IF_DOC_ERROR      = YES\n \n-# This WARN_NO_PARAMDOC option can be abled to get warnings for\n+# The WARN_NO_PARAMDOC option can be enabled to get warnings for\n # functions that are documented, but have no documentation for their parameters\n # or return value. If set to NO (the default) doxygen will only warn about\n # wrong or incomplete parameter documentation, but not about the absence of\n@@ -583,146 +585,146 @@ WARN_LOGFILE           =\n # with spaces.\n \n INPUT                  = @srcdir@/doc/doxygen/doxygroups.cc \\\n-\t\t\t @srcdir@/libsupc++/cxxabi.h \\\n-\t\t\t @srcdir@/libsupc++/cxxabi-forced.h \\\n-\t\t\t @srcdir@/libsupc++/exception \\\n-\t\t\t @srcdir@/libsupc++/exception_defines.h \\\n-\t\t\t @srcdir@/libsupc++/exception_ptr.h \\\n-\t\t\t @srcdir@/libsupc++/initializer_list \\\n-\t\t\t @srcdir@/libsupc++/nested_exception.h \\\n-\t\t\t @srcdir@/libsupc++/new \\\n-\t\t\t @srcdir@/libsupc++/typeinfo \\\n-\t\t\t include/algorithm \\\n-\t\t\t include/array \\\n-\t\t\t include/atomic \\\n-\t\t\t include/bitset \\\n-\t\t\t include/chrono \\\n-\t\t\t include/complex \\\n-\t\t\t include/condition_variable \\\n-\t\t\t include/deque \\\n-\t\t\t include/forward_list \\\n-\t\t\t include/fstream \\\n-\t\t\t include/functional \\\n-\t\t\t include/future \\\n-\t\t\t include/iomanip \\\n-\t\t\t include/ios \\\n-\t\t\t include/iosfwd \\\n-\t\t\t include/iostream \\\n-\t\t\t include/istream \\\n-\t\t\t include/iterator \\\n-\t\t\t include/limits \\\n-\t\t\t include/list \\\n-\t\t\t include/locale \\\n-\t\t\t include/map \\\n-\t\t\t include/memory \\\n-\t\t\t include/mutex \\\n-\t\t\t include/numeric \\\n-\t\t\t include/ostream \\\n-\t\t\t include/queue \\\n-\t\t\t include/random \\\n-\t\t\t include/ratio \\\n-\t\t\t include/regex \\\n-\t\t\t include/set \\\n-\t\t\t include/sstream \\\n-\t\t\t include/stack \\\n-\t\t\t include/stdexcept \\\n-\t\t\t include/streambuf \\\n-\t\t\t include/string \\\n-\t\t\t include/system_error \\\n-\t\t\t include/thread \\\n-\t\t\t include/tuple \\\n-\t\t\t include/typeindex \\\n-\t\t\t include/type_traits \\\n-\t\t\t include/unordered_map \\\n-\t\t\t include/unordered_set \\\n-\t\t\t include/utility \\\n-\t\t\t include/valarray \\\n-\t\t\t include/vector \\\n-\t\t\t include/cassert \\\n-\t\t\t include/ccomplex \\\n-\t\t\t include/cctype \\\n-\t\t\t include/cerrno \\\n-\t\t\t include/cfenv \\\n-\t\t\t include/cfloat \\\n-\t\t\t include/cinttypes \\\n-\t\t\t include/ciso646 \\\n-\t\t\t include/climits \\\n-\t\t\t include/clocale \\\n-\t\t\t include/cmath \\\n-\t\t\t include/csetjmp \\\n-\t\t\t include/csignal \\\n-\t\t\t include/cstdarg \\\n-\t\t\t include/cstdbool \\\n-\t\t\t include/cstddef \\\n-\t\t\t include/cstdint \\\n-\t\t\t include/cstdio \\\n-\t\t\t include/cstdlib \\\n-\t\t\t include/cstring \\\n-\t\t\t include/ctgmath \\\n-\t\t\t include/ctime \\\n-\t\t\t include/cwchar \\\n-\t\t\t include/cwctype \\\n-\t\t\t include/backward/hash_map \\\n-\t\t\t include/backward/hash_set \\\n-\t\t\t include/backward/strstream \\\n-\t\t\t include/debug/bitset \\\n-\t\t\t include/debug/deque \\\n-\t\t\t include/debug/forward_list \\\n-\t\t\t include/debug/list \\\n-\t\t\t include/debug/map \\\n-\t\t\t include/debug/set \\\n-\t\t\t include/debug/string \\\n-\t\t\t include/debug/unordered_map \\\n-\t\t\t include/debug/unordered_set \\\n-\t\t\t include/debug/vector \\\n-\t\t\t include/profile/bitset \\\n-\t\t\t include/profile/deque \\\n-\t\t\t include/profile/forward_list \\\n-\t\t\t include/profile/list \\\n-\t\t\t include/profile/map \\\n-\t\t\t include/profile/set \\\n-\t\t\t include/profile/unordered_map \\\n-\t\t\t include/profile/unordered_set \\\n-\t\t\t include/profile/vector \\\n-\t\t\t include/ext/algorithm \\\n-\t\t\t include/ext/functional \\\n-\t\t\t include/ext/iterator \\\n-\t\t\t include/ext/memory \\\n-\t\t\t include/ext/numeric \\\n-\t\t\t include/ext/rb_tree \\\n-\t\t\t include/ext/rope \\\n-\t\t\t include/ext/slist \\\n-\t\t\t include/parallel/algorithm \\\n-\t\t\t include/parallel/numeric \\\n-\t\t\t include/tr1/ccomplex \\\n-\t\t\t include/tr1/cctype \\\n-\t\t\t include/tr1/cfenv \\\n-\t\t\t include/tr1/cfloat \\\n-\t\t\t include/tr1/cinttypes \\\n-\t\t\t include/tr1/climits \\\n-\t\t\t include/tr1/cmath \\\n-\t\t\t include/tr1/complex \\\n-\t\t\t include/tr1/cstdarg \\\n-\t\t\t include/tr1/cstdbool \\\n-\t\t\t include/tr1/cstdint \\\n-\t\t\t include/tr1/cstdio \\\n-\t\t\t include/tr1/cstdlib \\\n-\t\t\t include/tr1/ctgmath \\\n-\t\t\t include/tr1/ctime \\\n-\t\t\t include/tr1/cwchar \\\n-\t\t\t include/tr1/cwctype \\\n-\t\t\t include/decimal/decimal \\\n-\t\t\t include/ \\\n-\t\t\t include/@host_alias@/bits \\\n-\t\t\t include/backward \\\n-\t\t\t include/bits \\\n-\t\t\t include/debug \\\n-\t\t\t include/parallel \\\n-\t\t\t include/profile \\\n-\t\t\t include/profile/impl \\\n-\t\t\t include/ext \\\n-\t\t\t include/ext/pb_ds \\\n-\t\t\t include/ext/pb_ds/detail\n+                         @srcdir@/libsupc++/cxxabi.h \\\n+                         @srcdir@/libsupc++/cxxabi-forced.h \\\n+                         @srcdir@/libsupc++/exception \\\n+                         @srcdir@/libsupc++/exception_defines.h \\\n+                         @srcdir@/libsupc++/exception_ptr.h \\\n+                         @srcdir@/libsupc++/initializer_list \\\n+                         @srcdir@/libsupc++/nested_exception.h \\\n+                         @srcdir@/libsupc++/new \\\n+                         @srcdir@/libsupc++/typeinfo \\\n+                         include/algorithm \\\n+                         include/array \\\n+                         include/atomic \\\n+                         include/bitset \\\n+                         include/chrono \\\n+                         include/complex \\\n+                         include/condition_variable \\\n+                         include/deque \\\n+                         include/forward_list \\\n+                         include/fstream \\\n+                         include/functional \\\n+                         include/future \\\n+                         include/iomanip \\\n+                         include/ios \\\n+                         include/iosfwd \\\n+                         include/iostream \\\n+                         include/istream \\\n+                         include/iterator \\\n+                         include/limits \\\n+                         include/list \\\n+                         include/locale \\\n+                         include/map \\\n+                         include/memory \\\n+                         include/mutex \\\n+                         include/numeric \\\n+                         include/ostream \\\n+                         include/queue \\\n+                         include/random \\\n+                         include/ratio \\\n+                         include/regex \\\n+                         include/set \\\n+                         include/sstream \\\n+                         include/stack \\\n+                         include/stdexcept \\\n+                         include/streambuf \\\n+                         include/string \\\n+                         include/system_error \\\n+                         include/thread \\\n+                         include/tuple \\\n+                         include/typeindex \\\n+                         include/type_traits \\\n+                         include/unordered_map \\\n+                         include/unordered_set \\\n+                         include/utility \\\n+                         include/valarray \\\n+                         include/vector \\\n+                         include/cassert \\\n+                         include/ccomplex \\\n+                         include/cctype \\\n+                         include/cerrno \\\n+                         include/cfenv \\\n+                         include/cfloat \\\n+                         include/cinttypes \\\n+                         include/ciso646 \\\n+                         include/climits \\\n+                         include/clocale \\\n+                         include/cmath \\\n+                         include/csetjmp \\\n+                         include/csignal \\\n+                         include/cstdarg \\\n+                         include/cstdbool \\\n+                         include/cstddef \\\n+                         include/cstdint \\\n+                         include/cstdio \\\n+                         include/cstdlib \\\n+                         include/cstring \\\n+                         include/ctgmath \\\n+                         include/ctime \\\n+                         include/cwchar \\\n+                         include/cwctype \\\n+                         include/backward/hash_map \\\n+                         include/backward/hash_set \\\n+                         include/backward/strstream \\\n+                         include/debug/bitset \\\n+                         include/debug/deque \\\n+                         include/debug/forward_list \\\n+                         include/debug/list \\\n+                         include/debug/map \\\n+                         include/debug/set \\\n+                         include/debug/string \\\n+                         include/debug/unordered_map \\\n+                         include/debug/unordered_set \\\n+                         include/debug/vector \\\n+                         include/profile/bitset \\\n+                         include/profile/deque \\\n+                         include/profile/forward_list \\\n+                         include/profile/list \\\n+                         include/profile/map \\\n+                         include/profile/set \\\n+                         include/profile/unordered_map \\\n+                         include/profile/unordered_set \\\n+                         include/profile/vector \\\n+                         include/ext/algorithm \\\n+                         include/ext/functional \\\n+                         include/ext/iterator \\\n+                         include/ext/memory \\\n+                         include/ext/numeric \\\n+                         include/ext/rb_tree \\\n+                         include/ext/rope \\\n+                         include/ext/slist \\\n+                         include/parallel/algorithm \\\n+                         include/parallel/numeric \\\n+                         include/tr1/ccomplex \\\n+                         include/tr1/cctype \\\n+                         include/tr1/cfenv \\\n+                         include/tr1/cfloat \\\n+                         include/tr1/cinttypes \\\n+                         include/tr1/climits \\\n+                         include/tr1/cmath \\\n+                         include/tr1/complex \\\n+                         include/tr1/cstdarg \\\n+                         include/tr1/cstdbool \\\n+                         include/tr1/cstdint \\\n+                         include/tr1/cstdio \\\n+                         include/tr1/cstdlib \\\n+                         include/tr1/ctgmath \\\n+                         include/tr1/ctime \\\n+                         include/tr1/cwchar \\\n+                         include/tr1/cwctype \\\n+                         include/decimal/decimal \\\n+                         include/ \\\n+                         include/@host_alias@/bits \\\n+                         include/backward \\\n+                         include/bits \\\n+                         include/debug \\\n+                         include/parallel \\\n+                         include/profile \\\n+                         include/profile/impl \\\n+                         include/ext \\\n+                         include/ext/pb_ds \\\n+                         include/ext/pb_ds/detail\n \n # This tag can be used to specify the character encoding of the source files\n # that doxygen parses. Internally doxygen uses the UTF-8 encoding, which is\n@@ -736,12 +738,13 @@ INPUT_ENCODING         = UTF-8\n # FILE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp\n # and *.h) to filter out the source-files in the directories. If left\n # blank the following patterns are tested:\n-# *.c *.cc *.cxx *.cpp *.c++ *.java *.ii *.ixx *.ipp *.i++ *.inl *.h *.hh *.hxx\n-# *.hpp *.h++ *.idl *.odl *.cs *.php *.php3 *.inc *.m *.mm *.py *.f90\n+# *.c *.cc *.cxx *.cpp *.c++ *.d *.java *.ii *.ixx *.ipp *.i++ *.inl *.h *.hh\n+# *.hxx *.hpp *.h++ *.idl *.odl *.cs *.php *.php3 *.inc *.m *.mm *.dox *.py\n+# *.f90 *.f *.vhd *.vhdl\n \n FILE_PATTERNS          = *.h \\\n-\t\t\t *.hpp \\\n-\t\t\t *.tcc\n+                         *.hpp \\\n+                         *.tcc\n \n # The RECURSIVE tag can be used to turn specify whether or not subdirectories\n # should be searched for input files as well. Possible values are YES and NO.\n@@ -767,9 +770,9 @@ EXCLUDE_SYMLINKS       = NO\n # against the file with absolute path, so to exclude all test directories\n # for example use the pattern */test/*\n \n-EXCLUDE_PATTERNS       = stamp-* \\\n-\t\t\t *.gch \\\n-\t\t\t */.svn/*\n+EXCLUDE_PATTERNS       = stamp-* doxygroups.cc \\\n+                         *.gch \\\n+                         */.svn/*\n \n # The EXCLUDE_SYMBOLS tag can be used to specify one or more symbol names\n # (namespaces, classes, functions, etc.) that should be excluded from the\n@@ -1026,10 +1029,9 @@ DOCSET_FEEDNAME        = \"Doxygen generated docs\"\n \n DOCSET_BUNDLE_ID       = org.gnu.libstdc++\n \n-# When GENERATE_PUBLISHER_ID tag specifies a string that should\n-# uniquely identify the documentation publisher. This should be a\n-# reverse domain-name style string,\n-# e.g. com.mycompany.MyDocSet.documentation.\n+# When GENERATE_PUBLISHER_ID tag specifies a string that should uniquely identify\n+# the documentation publisher. This should be a reverse domain-name style\n+# string, e.g. com.mycompany.MyDocSet.documentation.\n \n DOCSET_PUBLISHER_ID    = org.fsf\n \n@@ -1157,8 +1159,9 @@ ECLIPSE_DOC_ID         = org.doxygen.Project\n \n DISABLE_INDEX          = YES\n \n-# This tag can be used to set the number of enum values (range [1..20])\n+# This tag can be used to set the number of enum values (range [0,1..20])\n # that doxygen will group on one line in the generated HTML documentation.\n+# Note that a value of 0 will completely suppress the enum values from appearing in the overview section.\n \n ENUM_VALUES_PER_LINE   = 4\n \n@@ -1204,6 +1207,25 @@ FORMULA_FONTSIZE       = 10\n \n FORMULA_TRANSPARENT    = YES\n \n+# Enable the USE_MATHJAX option to render LaTeX formulas using MathJax\n+# (see http://www.mathjax.org) which uses client side Javascript for the\n+# rendering instead of using prerendered bitmaps. Use this if you do not\n+# have LaTeX installed or if you want to formulas look prettier in the HTML\n+# output. When enabled you also need to install MathJax separately and\n+# configure the path to it using the MATHJAX_RELPATH option.\n+\n+USE_MATHJAX            = NO\n+\n+# When MathJax is enabled you need to specify the location relative to the\n+# HTML output directory using the MATHJAX_RELPATH option. The destination\n+# directory should contain the MathJax.js script. For instance, if the mathjax\n+# directory is located at the same level as the HTML output directory, then\n+# MATHJAX_RELPATH should be ../mathjax. The default value points to the mathjax.org site, so you can quickly see the result without installing\n+# MathJax, but it is strongly recommended to install a local copy of MathJax\n+# before deployment.\n+\n+MATHJAX_RELPATH        = http://www.mathjax.org/mathjax\n+\n # When the SEARCHENGINE tag is enabled doxygen will generate a search box\n # for the HTML output. The underlying search engine uses javascript\n # and DHTML and should work on any modern browser. Note that when using\n@@ -1219,7 +1241,7 @@ SEARCHENGINE           = NO\n # using Javascript. Doxygen will generate the search PHP script and index\n # file to put on the web server. The advantage of the server\n # based approach is that it scales better to large projects and allows\n-# full text search. The disadvances is that it is more difficult to setup\n+# full text search. The disadvantages are that it is more difficult to setup\n # and does not have live searching capabilities.\n \n SERVER_BASED_SEARCH    = NO\n@@ -1260,7 +1282,7 @@ MAKEINDEX_CMD_NAME     = makeindex\n COMPACT_LATEX          = NO\n \n # The PAPER_TYPE tag can be used to set the paper type that is used\n-# by the printer. Possible values are: a4, a4wide, letter, legal and\n+# by the printer. Possible values are: a4, letter, legal and\n # executive. If left blank a4wide will be used.\n \n PAPER_TYPE             = letter\n@@ -1512,44 +1534,44 @@ INCLUDE_FILE_PATTERNS  =\n # instead of the = operator.\n \n PREDEFINED             = __cplusplus \\\n-\t\t\t __GTHREADS \\\n-\t\t\t _GLIBCXX_HAS_GTHREADS \\\n-\t\t\t __GXX_EXPERIMENTAL_CXX0X__ \\\n-\t\t\t _GLIBCXX_INCLUDE_AS_CXX0X \\\n-\t\t\t \"_GLIBCXX_PURE= \" \\\n-\t\t\t \"_GLIBCXX_CONST= \" \\\n-\t\t\t \"_GLIBCXX_NORETURN= \" \\\n-\t\t\t \"_GLIBCXX_NOTHROW= \" \\\n-\t\t\t \"_GLIBCXX_STD_D= \" \\\n-\t\t\t \"_GLIBCXX_STD_P= \" \\\n-\t\t\t \"_GLIBCXX_STD_PR= \" \\\n-\t\t\t _GLIBCXX_STD=std \\\n-\t\t\t \"_GLIBCXX_TR1= \" \\\n-\t\t\t \"_GLIBCXX_BEGIN_NAMESPACE_TR1= \" \\\n-\t\t\t \"_GLIBCXX_END_NAMESPACE_TR1= \" \\\n-\t\t\t \"_GLIBCXX_BEGIN_NAMESPACE(name)=namespace name {  \" \\\n-\t\t\t \"_GLIBCXX_BEGIN_NESTED_NAMESPACE(name, unused)=namespace name {  \" \\\n-\t\t\t _GLIBCXX_END_NAMESPACE=} \\\n-\t\t\t _GLIBCXX_END_NESTED_NAMESPACE=} \\\n-\t\t\t \"_GLIBCXX_TEMPLATE_ARGS=...  \" \\\n-\t\t\t _GLIBCXX_DEPRECATED \\\n-\t\t\t _GLIBCXX_CONSTEXPR=constexpr \\\n-\t\t\t _GLIBCXX_USE_CONSTEXPR=constexpr \\\n-\t\t\t _GLIBCXX_USE_WCHAR_T \\\n-\t\t\t _GLIBCXX_USE_LONG_LONG \\\n-\t\t\t _GLIBCXX_USE_C99_STDINT_TR1 \\\n-\t\t\t _GLIBCXX_ATOMIC_BUILTINS_1 \\\n-\t\t\t _GLIBCXX_ATOMIC_BUILTINS_2 \\\n-\t\t\t _GLIBCXX_ATOMIC_BUILTINS_4 \\\n-\t\t\t _GLIBCXX_ATOMIC_BUILTINS_8 \\\n-\t\t\t _GLIBCXX_USE_SCHED_YIELD \\\n-\t\t\t _GLIBCXX_USE_NANOSLEEP \\\n-\t\t\t __GXX_RTTI \\\n-\t\t\t __glibcxx_function_requires=// \\\n-\t\t\t __glibcxx_class_requires=// \\\n-\t\t\t __glibcxx_class_requires2=// \\\n-\t\t\t __glibcxx_class_requires3=// \\\n-\t\t\t __glibcxx_class_requires4=//\n+                         __GTHREADS \\\n+                         _GLIBCXX_HAS_GTHREADS \\\n+                         __GXX_EXPERIMENTAL_CXX0X__ \\\n+                         _GLIBCXX_INCLUDE_AS_CXX0X \\\n+                         \"_GLIBCXX_PURE= \" \\\n+                         \"_GLIBCXX_CONST= \" \\\n+                         \"_GLIBCXX_NORETURN= \" \\\n+                         \"_GLIBCXX_NOTHROW= \" \\\n+                         \"_GLIBCXX_STD_D= \" \\\n+                         \"_GLIBCXX_STD_P= \" \\\n+                         \"_GLIBCXX_STD_PR= \" \\\n+                         _GLIBCXX_STD=std \\\n+                         \"_GLIBCXX_TR1= \" \\\n+                         \"_GLIBCXX_BEGIN_NAMESPACE_TR1= \" \\\n+                         \"_GLIBCXX_END_NAMESPACE_TR1= \" \\\n+                         \"_GLIBCXX_BEGIN_NAMESPACE(name)=namespace name {  \" \\\n+                         \"_GLIBCXX_BEGIN_NESTED_NAMESPACE(name, unused)=namespace name {  \" \\\n+                         _GLIBCXX_END_NAMESPACE=} \\\n+                         _GLIBCXX_END_NESTED_NAMESPACE=} \\\n+                         \"_GLIBCXX_TEMPLATE_ARGS=...  \" \\\n+                         _GLIBCXX_DEPRECATED \\\n+                         _GLIBCXX_CONSTEXPR=constexpr \\\n+                         _GLIBCXX_USE_CONSTEXPR=constexpr \\\n+                         _GLIBCXX_USE_WCHAR_T \\\n+                         _GLIBCXX_USE_LONG_LONG \\\n+                         _GLIBCXX_USE_C99_STDINT_TR1 \\\n+                         _GLIBCXX_ATOMIC_BUILTINS_1 \\\n+                         _GLIBCXX_ATOMIC_BUILTINS_2 \\\n+                         _GLIBCXX_ATOMIC_BUILTINS_4 \\\n+                         _GLIBCXX_ATOMIC_BUILTINS_8 \\\n+                         _GLIBCXX_USE_SCHED_YIELD \\\n+                         _GLIBCXX_USE_NANOSLEEP \\\n+                         __GXX_RTTI \\\n+                         __glibcxx_function_requires=// \\\n+                         __glibcxx_class_requires=// \\\n+                         __glibcxx_class_requires2=// \\\n+                         __glibcxx_class_requires3=// \\\n+                         __glibcxx_class_requires4=//\n \n # If the MACRO_EXPANSION and EXPAND_ONLY_PREDEF tags are set to YES then\n # this tag can be used to specify a list of macro names that should be expanded.\n@@ -1618,9 +1640,8 @@ PERL_PATH              = /usr/bin/perl\n # If the CLASS_DIAGRAMS tag is set to YES (the default) Doxygen will\n # generate a inheritance diagram (in HTML, RTF and LaTeX) for classes with base\n # or super classes. Setting the tag to NO turns the diagrams off. Note that\n-# this option is superseded by the HAVE_DOT option below. This is only a\n-# fallback. It is recommended to install and use dot, since it yields more\n-# powerful graphs.\n+# this option also works with HAVE_DOT disabled, but it is recommended to\n+# install and use dot, since it yields more powerful graphs.\n \n CLASS_DIAGRAMS         = YES\n \n@@ -1654,15 +1675,14 @@ HAVE_DOT               = YES\n \n DOT_NUM_THREADS        = 0\n \n-# By default doxygen will write a font called FreeSans.ttf to the\n-# output directory and reference it in all dot files that doxygen\n-# generates. This font does not include all possible unicode\n-# characters however, so when you need these (or just want a\n-# differently looking font) you can specify the font name using\n-# DOT_FONTNAME. You need need to make sure dot is able to find the\n-# font, which can be done by putting it in a standard location or by\n-# setting the DOTFONTPATH environment variable or by setting\n-# DOT_FONTPATH to the directory containing the font.\n+# By default doxygen will write a font called FreeSans.ttf to the output\n+# directory and reference it in all dot files that doxygen generates. This\n+# font does not include all possible unicode characters however, so when you need\n+# these (or just want a differently looking font) you can specify the font name\n+# using DOT_FONTNAME. You need need to make sure dot is able to find the font,\n+# which can be done by putting it in a standard location or by setting the\n+# DOTFONTPATH environment variable or by setting DOT_FONTPATH to the directory\n+# containing the font.\n \n DOT_FONTNAME           = FreeSans\n \n@@ -1739,7 +1759,7 @@ CALL_GRAPH             = NO\n CALLER_GRAPH           = NO\n \n # If the GRAPHICAL_HIERARCHY and HAVE_DOT tags are set to YES then doxygen\n-# will graphical hierarchy of all classes instead of a textual one.\n+# will generate a graphical hierarchy of all classes instead of a textual one.\n \n GRAPHICAL_HIERARCHY    = YES\n \n@@ -1751,7 +1771,7 @@ GRAPHICAL_HIERARCHY    = YES\n DIRECTORY_GRAPH        = YES\n \n # The DOT_IMAGE_FORMAT tag can be used to set the image format of the images\n-# generated by dot. Possible values are png, jpg, or gif\n+# generated by dot. Possible values are png, jpg, or gif.\n # If left blank png will be used.\n \n DOT_IMAGE_FORMAT       = png\n@@ -1767,6 +1787,12 @@ DOT_PATH               =\n \n DOTFILE_DIRS           =\n \n+# The MSCFILE_DIRS tag can be used to specify one or more directories that\n+# contain msc files that are included in the documentation (see the\n+# \\mscfile command).\n+\n+MSCFILE_DIRS           =\n+\n # The DOT_GRAPH_MAX_NODES tag can be used to set the maximum number of\n # nodes that will be shown in the graph. If the number of nodes in a graph\n # becomes larger than this value, doxygen will truncate the graph, which is"}, {"sha": "9fad4cea47c3baf229ce8a5c733c3b176b2685fc", "filename": "libstdc++-v3/include/bits/algorithmfwd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -24,7 +24,7 @@\n \n /** @file bits/algorithmfwd.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{algorithm}\n  */\n \n #ifndef _GLIBCXX_ALGORITHMFWD_H"}, {"sha": "43006799397bb9075250d96dac28d3b42125b98f", "filename": "libstdc++-v3/include/bits/allocator.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -36,9 +36,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/** @file allocator.h\n+/** @file bits/allocator.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{memory}\n  */\n \n #ifndef _ALLOCATOR_H"}, {"sha": "eaff2e6f68daed79621ea113649079969a8e5f75", "filename": "libstdc++-v3/include/bits/atomic_0.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_0.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_0.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_0.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -25,7 +25,7 @@\n \n /** @file bits/atomic_0.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{atomic}\n  */\n \n #ifndef _GLIBCXX_ATOMIC_0_H"}, {"sha": "85f8c0f35f6903d82367456eaa03c4a24c64b2da", "filename": "libstdc++-v3/include/bits/atomic_2.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_2.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,9 +23,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file bits/atomic_2.h\n+/** @file bits/atomic_2.h \n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{atomic}\n  */\n \n #ifndef _GLIBCXX_ATOMIC_2_H"}, {"sha": "74fc997bfdb31f9b9ed1b5d9ed5ed95d92d137d7", "filename": "libstdc++-v3/include/bits/atomic_base.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file bits/atomic_base.h\n+/** @file bits/atomic_base.h \n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{atomic}\n  */\n \n #ifndef _GLIBCXX_ATOMIC_BASE_H"}, {"sha": "71e7f28cdb6fc7f83f46dbb7c038d9bdbec3b572", "filename": "libstdc++-v3/include/bits/basic_ios.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -24,9 +24,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file basic_ios.h\n+/** @file bits/basic_ios.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{ios}\n  */\n \n #ifndef _BASIC_IOS_H"}, {"sha": "73a72fb89a88ca23efc1b73d82b5bfd3d740ac70", "filename": "libstdc++-v3/include/bits/basic_ios.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,9 +23,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file basic_ios.tcc\n+/** @file bits/basic_ios.tcc\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{ios}\n  */\n \n #ifndef _BASIC_IOS_TCC"}, {"sha": "eb27e677e124c3fae9ff60dffcae527cfb249bab", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -24,9 +24,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file basic_string.h\n+/** @file bits/basic_string.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{string}\n  */\n \n //"}, {"sha": "a64c7815485acbb7f9e229fa59ae73e27f0a3787", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -24,9 +24,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file basic_string.tcc\n+/** @file bits/basic_string.tcc\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{string}\n  */\n \n //"}, {"sha": "beabbb56cb08f8877140e386fe98f72507d8e638", "filename": "libstdc++-v3/include/bits/boost_concept_check.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -30,9 +30,9 @@\n // to its suitability for any purpose.\n //\n \n-/** @file boost_concept_check.h\n+/** @file bits/boost_concept_check.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{iterator}\n  */\n \n // GCC Note:  based on version 1.12.0 of the Boost library."}, {"sha": "0685a50e6e395e75e269a9cf4304f9236ce7bcfd", "filename": "libstdc++-v3/include/bits/c++0x_warning.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2B0x_warning.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2B0x_warning.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2B0x_warning.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -20,8 +20,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file c++0x_warning.h\n- *  This is a Standard C++ Library header.\n+/** @file bits/c++0x_warning.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{iosfwd}\n  */\n \n #ifndef _CXX0X_WARNING_H"}, {"sha": "400c244eb98a3da1f1b77491b05c3de84ca1dd3f", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,9 +23,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file c++config.h\n+/** @file bits/c++config.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{iosfwd}\n  */\n \n #ifndef _GLIBCXX_CXX_CONFIG_H"}, {"sha": "4033f6d1424bc21323144c99126c3a3e211954b6", "filename": "libstdc++-v3/include/bits/char_traits.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -24,9 +24,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file char_traits.h\n+/** @file bits/char_traits.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{string}\n  */\n \n //"}, {"sha": "cf8ac1020d640ae2c18905d943a3f273f6681eb9", "filename": "libstdc++-v3/include/bits/codecvt.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -25,7 +25,7 @@\n \n /** @file bits/codecvt.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //"}, {"sha": "7978a85f3f2ca9c064cabc5d8a3862f133f124e7", "filename": "libstdc++-v3/include/bits/concept_check.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fconcept_check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fconcept_check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fconcept_check.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file concept_check.h\n+/** @file bits/concept_check.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{iterator}\n  */\n \n #ifndef _CONCEPT_CHECK_H"}, {"sha": "3ae964afbe0f6bff1682f3f2b6979ad76b036efa", "filename": "libstdc++-v3/include/bits/cpp_type_traits.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,9 +23,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file cpp_type_traits.h\n+/** @file bits/cpp_type_traits.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{ext/type_traits}\n  */\n \n // Written by Gabriel Dos Reis <dosreis@cmla.ens-cachan.fr>"}, {"sha": "78bb888060a3132a098ce9fc93a693856ac8578a", "filename": "libstdc++-v3/include/bits/deque.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -50,9 +50,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/** @file deque.tcc\n+/** @file bits/deque.tcc\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{deque}\n  */\n \n #ifndef _DEQUE_TCC"}, {"sha": "b7f071f365fd0982e0617b0ab5cfc395ec553f1f", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,8 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file forward_list.h\n- *  This is a Standard C++ Library header.\n+/** @file bits/forward_list.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{forward_list}\n  */\n \n #ifndef _FORWARD_LIST_H"}, {"sha": "a409383e210073002097e0f10545b1557e68d00e", "filename": "libstdc++-v3/include/bits/forward_list.tcc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,8 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file forward_list.tcc\n- *  This is a Standard C++ Library header.\n+/** @file bits/forward_list.tcc\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{forward_list}\n  */\n \n #ifndef _FORWARD_LIST_TCC"}, {"sha": "6e00388a63a30edaf6fe81792ad9a06785303ef9", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -24,9 +24,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file fstream.tcc\n+/** @file bits/fstream.tcc\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{fstream}\n  */\n \n //"}, {"sha": "b16c3601ebbfee5f48840b1cef9558956bfb012c", "filename": "libstdc++-v3/include/bits/functexcept.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctexcept.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,7 +22,10 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file functexcept.h\n+/** @file bits/functexcept.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{exception}\n+ *\n  *  This header provides support for -fno-exceptions.\n  */\n "}, {"sha": "6cf70b7da80040cc5d3a4170076a5285147f8f51", "filename": "libstdc++-v3/include/bits/functional_hash.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -24,7 +24,7 @@\n \n /** @file bits/functional_hash.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{functional}\n  */\n \n #ifndef _FUNCTIONAL_HASH_H"}, {"sha": "6c2dfe8d227e1e69af084f5ee5bdbfd97a965164", "filename": "libstdc++-v3/include/bits/gslice.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,9 +23,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file gslice.h\n+/** @file bits/gslice.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{valarray}\n  */\n \n // Written by Gabriel Dos Reis <Gabriel.Dos-Reis@DPTMaths.ENS-Cachan.Fr>"}, {"sha": "dbae97873725290412abb18e7c9370d44987b620", "filename": "libstdc++-v3/include/bits/gslice_array.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice_array.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,9 +23,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file gslice_array.h\n+/** @file bits/gslice_array.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{valarray}\n  */\n \n // Written by Gabriel Dos Reis <Gabriel.Dos-Reis@DPTMaths.ENS-Cachan.Fr>"}, {"sha": "fd29c5950c9d30729e59bb3fc869bd0835c9bca3", "filename": "libstdc++-v3/include/bits/hashtable.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -25,6 +25,7 @@\n /** @file bits/hashtable.h\n  *  This is an internal header file, included by other library headers.\n  *  You should not attempt to use it directly.\n+ *  @headername{unordered_map, unordered_set}\n  */\n \n #ifndef _HASHTABLE_H"}, {"sha": "622784ab097b5d77d449d40ce6ae5a65b9663448", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -24,7 +24,8 @@\n \n /** @file bits/hashtable_policy.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. \n+ *  @headername{unordered_map,unordered_set}\n  */\n \n #ifndef _HASHTABLE_POLICY_H"}, {"sha": "eb646e22f6ab54598206745f3466bef92d09a2cd", "filename": "libstdc++-v3/include/bits/indirect_array.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Findirect_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Findirect_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Findirect_array.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,9 +23,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file indirect_array.h\n+/** @file bits/indirect_array.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{valarray}\n  */\n \n // Written by Gabriel Dos Reis <Gabriel.Dos-Reis@DPTMaths.ENS-Cachan.Fr>"}, {"sha": "24bddf270adc94d51c4a5ed6f6afcef5393ce028", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -24,9 +24,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file ios_base.h\n+/** @file bits/ios_base.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{ios}\n  */\n \n //"}, {"sha": "394553e1be93d115ec75a6c0fcc830a453a0e6ff", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -24,9 +24,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file istream.tcc\n+/** @file bits/istream.tcc\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{istream}\n  */\n \n //"}, {"sha": "b06822f1633b2fdf0a204d23bef52655e217a922", "filename": "libstdc++-v3/include/bits/list.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -49,9 +49,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/** @file list.tcc\n+/** @file bits/list.tcc\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{list}\n  */\n \n #ifndef _LIST_TCC"}, {"sha": "4756ac573af2ff58a1b93e3bebccc33b86b23865", "filename": "libstdc++-v3/include/bits/locale_classes.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -24,9 +24,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file locale_classes.h\n+/** @file bits/locale_classes.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //"}, {"sha": "67a423b712e81e30641a80debad78127ff9a11de", "filename": "libstdc++-v3/include/bits/locale_classes.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.tcc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file locale_classes.tcc\n+/** @file bits/locale_classes.tcc\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //"}, {"sha": "bb0ba26a9dfe821826495eee206b49f0bb179f83", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -24,9 +24,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file locale_facets.h\n+/** @file bits/locale_facets.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //"}, {"sha": "076963aaf6e68cf596d3d621a2e3ce9fc0963bb5", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -24,9 +24,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file locale_facets.tcc\n+/** @file bits/locale_facets.tcc\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n #ifndef _LOCALE_FACETS_TCC"}, {"sha": "6d6af2b659e256fd81493eab177c7e37d6671e10", "filename": "libstdc++-v3/include/bits/locale_facets_nonio.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file locale_facets_nonio.h\n+/** @file bits/locale_facets_nonio.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //"}, {"sha": "35869e3611bfe1215cb839ec3e4084472b5d7d64", "filename": "libstdc++-v3/include/bits/locale_facets_nonio.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file locale_facets_nonio.tcc\n+/** @file bits/locale_facets_nonio.tcc\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n #ifndef _LOCALE_FACETS_NONIO_TCC"}, {"sha": "b7bf42e53425ce9cee96b2622b958e43b66eabb5", "filename": "libstdc++-v3/include/bits/localefwd.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -24,9 +24,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file localefwd.h\n+/** @file bits/localefwd.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{locale}\n  */\n \n //"}, {"sha": "af6f63765c52244c08fba97cef6dbc9bdb2bfbbc", "filename": "libstdc++-v3/include/bits/mask_array.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmask_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmask_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmask_array.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,9 +23,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file mask_array.h\n+/** @file bits/mask_array.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{valarray}\n  */\n \n // Written by Gabriel Dos Reis <Gabriel.Dos-Reis@DPTMaths.ENS-Cachan.Fr>"}, {"sha": "5172f50a7d70b77ac738d623c6f711cc2961eeb3", "filename": "libstdc++-v3/include/bits/move.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file move.h\n+/** @file bits/move.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{utility}\n  */\n \n #ifndef _MOVE_H"}, {"sha": "967b7b6be64cf5fa12300633a8a2cf7491475295", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -24,9 +24,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file ostream.tcc\n+/** @file bits/ostream.tcc\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{ostream}\n  */\n \n //"}, {"sha": "3368ffeb2e6653e3226df4c8bfd69ae9ba7d8581", "filename": "libstdc++-v3/include/bits/ostream_insert.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream_insert.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream_insert.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream_insert.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file ostream_insert.h\n+/** @file bits/ostream_insert.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{ostream}\n  */\n \n #ifndef _OSTREAM_INSERT_H"}, {"sha": "46ef6711c5f770165c202ba2dbfbc2c0afea77e5", "filename": "libstdc++-v3/include/bits/postypes.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpostypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpostypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpostypes.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -1,7 +1,7 @@\n // Position types -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009\n+// 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -24,9 +24,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file postypes.h\n+/** @file bits/postypes.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{iosfwd}\n  */\n \n //"}, {"sha": "9feb0f448c8f110a83b11f31dc70001cdfce2c2d", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -25,7 +25,7 @@\n /**\n  * @file bits/random.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{random}\n  */\n \n #ifndef _RANDOM_H"}, {"sha": "43fd0c8e16c9f393b26c04a99fbac98fcb3af5c7", "filename": "libstdc++-v3/include/bits/random.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -24,7 +24,7 @@\n \n /** @file bits/random.tcc\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{random}\n  */\n \n #ifndef _RANDOM_TCC"}, {"sha": "5c898efa9f69d9d01b75aebe5e7a21ed3e7e5ed8", "filename": "libstdc++-v3/include/bits/range_access.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -24,7 +24,7 @@\n \n /** @file bits/range_access.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{iterator}\n  */\n \n #ifndef _GLIBCXX_RANGE_ACCESS_H"}, {"sha": "ab05fc2d9d03b4047b69a54bba84b5403e8bd6f8", "filename": "libstdc++-v3/include/bits/regex.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,9 +23,9 @@\n // <http://www.gnu.org/licenses/>.\n \n /**\n- * @file bits/regex.h\n+ *  @file bits/regex.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{regex}\n  */\n \n _GLIBCXX_BEGIN_NAMESPACE(std)"}, {"sha": "4219c8b2f5ecfd49bf60b026af99e373e0acff61", "filename": "libstdc++-v3/include/bits/regex_compiler.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,9 +23,9 @@\n // <http://www.gnu.org/licenses/>.\n \n /**\n- * @file bits/regex_compiler.h\n- * This is an internal header file, included by other library headers.\n- * You should not attempt to use it directly.\n+ *  @file bits/regex_compiler.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{regex}\n  */\n \n _GLIBCXX_BEGIN_NAMESPACE(std)"}, {"sha": "1aeef52d657c0000f25d433b1c85b45ba2115a1c", "filename": "libstdc++-v3/include/bits/regex_constants.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_constants.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_constants.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_constants.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,11 +23,11 @@\n // <http://www.gnu.org/licenses/>.\n \n /**\n- * @file bits/regex_constants.h\n- * @brief Constant definitions for the std regex library.\n+ *  @file bits/regex_constants.h\n+ *  @brief Constant definitions for the std regex library.\n  *\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{regex}\n  */\n \n _GLIBCXX_BEGIN_NAMESPACE(std)"}, {"sha": "fee7b437468cb99fcd701b90c91292ebedfbc658", "filename": "libstdc++-v3/include/bits/regex_cursor.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_cursor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_cursor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_cursor.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,9 +23,9 @@\n // <http://www.gnu.org/licenses/>.\n \n /**\n- * @file bits/regex_cursor.h\n- * This is an internal header file, included by other library headers.\n- * You should not attempt to use it directly.\n+ *  @file bits/regex_cursor.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{regex}\n  */\n \n _GLIBCXX_BEGIN_NAMESPACE(std)"}, {"sha": "6308c30093ef49f43ece5a36d55501290b601718", "filename": "libstdc++-v3/include/bits/regex_error.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_error.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_error.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_error.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -27,7 +27,7 @@\n  * @brief Error and exception objects for the std regex library.\n  *\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{regex}\n  */\n \n _GLIBCXX_BEGIN_NAMESPACE(std)"}, {"sha": "67770e9d29a0b53d8689bfab2a0a50a17eb2a994", "filename": "libstdc++-v3/include/bits/regex_grep_matcher.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_grep_matcher.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_grep_matcher.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_grep_matcher.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,9 +23,9 @@\n // <http://www.gnu.org/licenses/>.\n \n /**\n- * @file bits/regex_grep_matcher.h\n- * This is an internal header file, included by other library headers.\n- * You should not attempt to use it directly.\n+ *  @file bits/regex_grep_matcher.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{regex}\n  */\n \n _GLIBCXX_BEGIN_NAMESPACE(std)"}, {"sha": "804473fea55c81e2a3e34b264f3c591f991ab67e", "filename": "libstdc++-v3/include/bits/regex_grep_matcher.tcc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_grep_matcher.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_grep_matcher.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_grep_matcher.tcc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,7 +23,9 @@\n // <http://www.gnu.org/licenses/>.\n \n /**\n- * @file bits/regex_grep_matcher.tcc\n+ *  @file bits/regex_grep_matcher.tcc\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{regex}\n  */\n \n #include <regex>"}, {"sha": "4a771ee20c24f4799d0129cf4498fd92f3113ab2", "filename": "libstdc++-v3/include/bits/regex_nfa.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_nfa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_nfa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_nfa.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,9 +23,9 @@\n // <http://www.gnu.org/licenses/>.\n \n /**\n- * @file bits/regex_nfa.h\n- * This is an internal header file, included by other library headers.\n- * You should not attempt to use it directly.\n+ *  @file bits/regex_nfa.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{regex}\n  */\n \n _GLIBCXX_BEGIN_NAMESPACE(std)"}, {"sha": "392b2c3f083fba9db3e8b86a25d961e7f1598ff6", "filename": "libstdc++-v3/include/bits/regex_nfa.tcc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_nfa.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_nfa.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_nfa.tcc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -24,6 +24,8 @@\n \n /**\n  * @file bits/regex_nfa.tcc\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{regex}\n  */\n #include <regex>\n "}, {"sha": "c9095d5f614b52d27c018a9927b61ce393b921da", "filename": "libstdc++-v3/include/bits/shared_ptr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -43,7 +43,7 @@\n \n /** @file bits/shared_ptr.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{memory}\n  */\n \n #ifndef _SHARED_PTR_H"}, {"sha": "ba2f004c77136503529b00d78c93d896a4fcf5e8", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -43,7 +43,7 @@\n \n /** @file bits/shared_ptr_base.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{memory}\n  */\n \n #ifndef _SHARED_PTR_BASE_H"}, {"sha": "3d84998bd0fe9e253ed54fe5a2544df55a768d6b", "filename": "libstdc++-v3/include/bits/slice_array.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,9 +23,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file slice_array.h\n+/** @file bits/slice_array.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{valarray}\n  */\n \n // Written by Gabriel Dos Reis <Gabriel.Dos-Reis@DPTMaths.ENS-Cachan.Fr>"}, {"sha": "ed61f29a1575374d51299db8d153554b16fe288d", "filename": "libstdc++-v3/include/bits/sstream.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -24,9 +24,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file sstream.tcc\n+/** @file bits/sstream.tcc\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{sstream}\n  */\n \n //"}, {"sha": "0fdc924cbe39ff730c715d0bc69594e8c5279be9", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -49,9 +49,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/** @file stl_algo.h\n+/** @file bits/stl_algo.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{algorithm}\n  */\n \n #ifndef _STL_ALGO_H"}, {"sha": "2c3b6af5e57ee8e8242022b22732d8f5bbf3e695", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -49,9 +49,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/** @file stl_algobase.h\n+/** @file bits/stl_algobase.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{algorithm}\n  */\n \n #ifndef _STL_ALGOBASE_H"}, {"sha": "f35fd0ae0586183889e7f847121a522f8955c0f0", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -49,9 +49,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/** @file stl_bvector.h\n+/** @file bits/stl_bvector.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{vector}\n  */\n \n #ifndef _STL_BVECTOR_H"}, {"sha": "31f65ee975e3fba05fc2768c2a283828cea7c5a9", "filename": "libstdc++-v3/include/bits/stl_construct.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -50,9 +50,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/** @file stl_construct.h\n+/** @file bits/stl_construct.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{memory}\n  */\n \n #ifndef _STL_CONSTRUCT_H"}, {"sha": "c3b5d0067b140dade55bb83caaeb87f200503886", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -49,9 +49,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/** @file stl_deque.h\n+/** @file bits/stl_deque.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{deque}\n  */\n \n #ifndef _STL_DEQUE_H"}, {"sha": "630ca0340db17f76ab5ca093d26a7d4bf601fefa", "filename": "libstdc++-v3/include/bits/stl_function.h", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -49,9 +49,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/** @file stl_function.h\n+/** @file bits/stl_function.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{functional}\n  */\n \n #ifndef _STL_FUNCTION_H\n@@ -99,10 +99,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<typename _Arg, typename _Result>\n     struct unary_function\n     {\n-      typedef _Arg argument_type;   ///< @c argument_type is the type of the\n-                                    ///     argument (no surprises here)\n+      /// @c argument_type is the type of the argument\n+      typedef _Arg \targument_type;   \n \n-      typedef _Result result_type;  ///< @c result_type is the return type\n+      /// @c result_type is the return type\n+      typedef _Result \tresult_type;  \n     };\n \n   /**\n@@ -111,11 +112,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<typename _Arg1, typename _Arg2, typename _Result>\n     struct binary_function\n     {\n-      typedef _Arg1 first_argument_type;   ///< the type of the first argument\n-                                           ///  (no surprises here)\n+      /// @c first_argument_type is the type of the first argument\n+      typedef _Arg1 \tfirst_argument_type; \n \n-      typedef _Arg2 second_argument_type;  ///< the type of the second argument\n-      typedef _Result result_type;         ///< type of the return type\n+      /// @c second_argument_type is the type of the second argument\n+      typedef _Arg2 \tsecond_argument_type;\n+\n+      /// @c result_type is the return type\n+      typedef _Result \tresult_type;\n     };\n   /** @}  */\n "}, {"sha": "0c9641b9dbc8894e8047a322e62c79b79e02fddd", "filename": "libstdc++-v3/include/bits/stl_heap.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -48,9 +48,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/** @file stl_heap.h\n+/** @file bits/stl_heap.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{queue}\n  */\n \n #ifndef _STL_HEAP_H"}, {"sha": "4de1b0e3ef7f0fb9baa6b62e98c05922b706854d", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -49,9 +49,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/** @file stl_iterator.h\n+/** @file bits/stl_iterator.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{iterator}\n  *\n  *  This file implements reverse_iterator, back_insert_iterator,\n  *  front_insert_iterator, insert_iterator, __normal_iterator, and their"}, {"sha": "aa7b348c71bd0c4dc90787d0b14d66773b6d6042", "filename": "libstdc++-v3/include/bits/stl_iterator_base_funcs.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -49,9 +49,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/** @file stl_iterator_base_funcs.h\n+/** @file bits/stl_iterator_base_funcs.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{iterator}\n  *\n  *  This file contains all of the general iterator-related utility\n  *  functions, such as distance() and advance()."}, {"sha": "4125272aebff4b97e32921e05d13f93bbfe6f2f1", "filename": "libstdc++-v3/include/bits/stl_iterator_base_types.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -49,9 +49,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/** @file stl_iterator_base_types.h\n+/** @file bits/stl_iterator_base_types.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{iterator}\n  *\n  *  This file contains all of the general iterator-related utility types,\n  *  such as iterator_traits and struct iterator."}, {"sha": "aafd5dc0e9309f2e99170f3d1c384bd15aa49756", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -49,9 +49,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/** @file stl_list.h\n+/** @file bits/stl_list.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{list}\n  */\n \n #ifndef _STL_LIST_H"}, {"sha": "d3bab26c0b8afb0b81433b843784a5755f8efe6f", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -49,9 +49,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/** @file stl_map.h\n+/** @file bits/stl_map.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{map}\n  */\n \n #ifndef _STL_MAP_H"}, {"sha": "6c6f356e00d0b69b9fdba928c48d7d086294fbef", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -49,9 +49,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/** @file stl_multimap.h\n+/** @file bits/stl_multimap.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{map}\n  */\n \n #ifndef _STL_MULTIMAP_H"}, {"sha": "62e82dc26d9630e6619a37bdd14b3b33cfa23308", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -49,9 +49,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/** @file stl_multiset.h\n+/** @file bits/stl_multiset.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{set}\n  */\n \n #ifndef _STL_MULTISET_H"}, {"sha": "925e064bb2c5d13652c8f95bf7c05046bc17abc4", "filename": "libstdc++-v3/include/bits/stl_numeric.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -49,9 +49,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/** @file stl_numeric.h\n+/** @file bits/stl_numeric.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{numeric}\n  */\n \n #ifndef _STL_NUMERIC_H"}, {"sha": "5334e1a5477a6b67d376b4cb3b01ebacc6ccbe89", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -49,9 +49,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/** @file stl_pair.h\n+/** @file bits/stl_pair.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{utility}\n  */\n \n #ifndef _STL_PAIR_H\n@@ -72,23 +72,23 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   /// piecewise_construct\n   constexpr piecewise_construct_t piecewise_construct = piecewise_construct_t();\n \n-  // forward declarations\n+  // Forward declarations.\n   template<typename...>\n     class tuple;\n \n   template<int...>\n     struct _Index_tuple;\n #endif\n \n-  /// pair holds two objects of arbitrary type.\n+  /// Struct holding two objects of arbitrary type.\n   template<class _T1, class _T2>\n     struct pair\n     {\n-      typedef _T1 first_type;    ///<  @c first_type is the first bound type\n-      typedef _T2 second_type;   ///<  @c second_type is the second bound type\n+      typedef _T1 first_type;    /// @c first_type is the first bound type\n+      typedef _T2 second_type;   /// @c second_type is the second bound type\n \n-      _T1 first;                 ///< @c first is a copy of the first object\n-      _T2 second;                ///< @c second is a copy of the second object\n+      _T1 first;                 /// @c first is a copy of the first object\n+      _T2 second;                /// @c second is a copy of the second object\n \n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 265.  std::pair::pair() effects overly restrictive"}, {"sha": "fa40245cb416b93365caf8a5d01c2fed4fb0fbbd", "filename": "libstdc++-v3/include/bits/stl_queue.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -49,9 +49,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/** @file stl_queue.h\n+/** @file bits/stl_queue.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{queue}\n  */\n \n #ifndef _STL_QUEUE_H"}, {"sha": "29374c74ad546d98e8082505f83fb472c4ed858c", "filename": "libstdc++-v3/include/bits/stl_raw_storage_iter.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_raw_storage_iter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_raw_storage_iter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_raw_storage_iter.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -49,9 +49,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/** @file stl_raw_storage_iter.h\n+/** @file bits/stl_raw_storage_iter.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{memory}\n  */\n \n #ifndef _STL_RAW_STORAGE_ITERATOR_H"}, {"sha": "10e41703faea51b75f7d78c71d8cb35e82175b1a", "filename": "libstdc++-v3/include/bits/stl_relops.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_relops.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_relops.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_relops.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -48,17 +48,17 @@\n  *\n  */\n \n-/** @file stl_relops.h\n+/** @file bits/stl_relops.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{utility}\n  *\n  *  Inclusion of this file has been removed from\n  *  all of the other STL headers for safety reasons, except std_utility.h.\n  *  For more information, see the thread of about twenty messages starting\n  *  with http://gcc.gnu.org/ml/libstdc++/2001-01/msg00223.html, or\n  *  http://gcc.gnu.org/onlinedocs/libstdc++/faq.html#faq.ambiguous_overloads\n  *\n- *  Short summary:  the rel_ops operators should be avoided for the present.\n+ *  Short summary: the rel_ops operators should be avoided for the present.\n  */\n \n #ifndef _STL_RELOPS_H"}, {"sha": "243de964582f63ed853def06723b783290f8fd16", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -49,9 +49,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/** @file stl_set.h\n+/** @file bits/stl_set.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{set}\n  */\n \n #ifndef _STL_SET_H"}, {"sha": "a5c25d49eb712da9eb7e2736cf3856f7d1d374b5", "filename": "libstdc++-v3/include/bits/stl_stack.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -49,9 +49,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/** @file stl_stack.h\n+/** @file bits/stl_stack.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{stack}\n  */\n \n #ifndef _STL_STACK_H"}, {"sha": "44dcbf5000c35dd1cd3c2d963ae048bc19494180", "filename": "libstdc++-v3/include/bits/stl_tempbuf.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -49,9 +49,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/** @file stl_tempbuf.h\n+/** @file bits/stl_tempbuf.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{memory}\n  */\n \n #ifndef _STL_TEMPBUF_H"}, {"sha": "80246dc639658abd15d4e4feed8edb70a0522e3e", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -52,9 +52,9 @@\n  *\n  */\n \n-/** @file stl_tree.h\n+/** @file bits/stl_tree.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{map or set}\n  */\n \n #ifndef _STL_TREE_H"}, {"sha": "fd9f24361730cff9a55f2ea0fdcc46144d06e8d2", "filename": "libstdc++-v3/include/bits/stl_uninitialized.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -50,9 +50,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/** @file stl_uninitialized.h\n+/** @file bits/stl_uninitialized.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{memory}\n  */\n \n #ifndef _STL_UNINITIALIZED_H"}, {"sha": "feabb24ea3bae352541da7461040fe0bac952f09", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -49,9 +49,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/** @file stl_vector.h\n+/** @file bits/stl_vector.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{vector}\n  */\n \n #ifndef _STL_VECTOR_H"}, {"sha": "9d3b799f3d5fcec980afecd77a6d63c4c8c9d4ef", "filename": "libstdc++-v3/include/bits/stream_iterator.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstream_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstream_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstream_iterator.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file stream_iterator.h\n+/** @file bits/stream_iterator.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{iterator}\n  */\n \n #ifndef _STREAM_ITERATOR_H"}, {"sha": "8d401b39e1038ac1a6362ecce8359103c39f59cd", "filename": "libstdc++-v3/include/bits/streambuf.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,9 +23,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file streambuf.tcc\n+/** @file bits/streambuf.tcc\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{streambuf}\n  */\n \n //"}, {"sha": "c385ec65a20e3f942b4cb50b53980207027c63fc", "filename": "libstdc++-v3/include/bits/streambuf_iterator.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -24,9 +24,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file streambuf_iterator.h\n+/** @file bits/streambuf_iterator.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{iterator}\n  */\n \n #ifndef _STREAMBUF_ITERATOR_H"}, {"sha": "796200a1d69eb983bf20bbf0689582e7762ebc29", "filename": "libstdc++-v3/include/bits/stringfwd.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstringfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstringfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstringfwd.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -24,9 +24,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file stringfwd.h\n+/** @file bits/stringfwd.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{string}\n  */\n \n //\n@@ -60,12 +60,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   template<> struct char_traits<char>;\n \n-  typedef basic_string<char>    string;   ///< A string of @c char\n+  typedef basic_string<char>    string;   /// A string of @c char\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n   template<> struct char_traits<wchar_t>;\n \n-  typedef basic_string<wchar_t> wstring;   ///< A string of @c wchar_t\n+  typedef basic_string<wchar_t> wstring;   /// A string of @c wchar_t\n #endif\n \n #if (defined(__GXX_EXPERIMENTAL_CXX0X__) \\\n@@ -74,8 +74,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<> struct char_traits<char16_t>;\n   template<> struct char_traits<char32_t>;\n \n-  typedef basic_string<char16_t> u16string; ///< A string of @c char16_t\n-  typedef basic_string<char32_t> u32string; ///< A string of @c char32_t\n+  typedef basic_string<char16_t> u16string; /// A string of @c char16_t\n+  typedef basic_string<char32_t> u32string; /// A string of @c char32_t\n \n #endif\n   /** @}  */"}, {"sha": "0b00fcb5703e8806d7b348f175e45e3e2ec5f15c", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file unique_ptr.h\n+/** @file bits/unique_ptr.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{memory}\n  */\n \n #ifndef _UNIQUE_PTR_H"}, {"sha": "3960f8e56b8687d78f9fbbf235b9ef8b2f051115", "filename": "libstdc++-v3/include/bits/unordered_map.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -24,7 +24,7 @@\n \n /** @file bits/unordered_map.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{unordered_map}\n  */\n \n #ifndef _UNORDERED_MAP_H"}, {"sha": "90b30f07c6772c7d4e4cba65f7f49f0da98a9e9b", "filename": "libstdc++-v3/include/bits/unordered_set.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -24,7 +24,7 @@\n \n /** @file bits/unordered_set.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{unordered_set}\n  */\n \n #ifndef _UNORDERED_SET_H"}, {"sha": "1206655a9904721c58fab5d88b973740354418c1", "filename": "libstdc++-v3/include/bits/valarray_after.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_after.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_after.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_after.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,9 +23,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file valarray_after.h\n+/** @file bits/valarray_after.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{valarray}\n  */\n \n // Written by Gabriel Dos Reis <Gabriel.Dos-Reis@cmla.ens-cachan.fr>"}, {"sha": "ae148ef5b529c45b2e97770d27e09d2cd126db55", "filename": "libstdc++-v3/include/bits/valarray_array.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -24,9 +24,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file valarray_array.h\n+/** @file bits/valarray_array.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{valarray}\n  */\n \n // Written by Gabriel Dos Reis <Gabriel.Dos-Reis@DPTMaths.ENS-Cachan.Fr>"}, {"sha": "9a13479a04c7981baedfaccb44b5b15b43999b39", "filename": "libstdc++-v3/include/bits/valarray_array.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.tcc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file valarray_array.tcc\n+/** @file bits/valarray_array.tcc\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{valarray}\n  */\n \n // Written by Gabriel Dos Reis <Gabriel.Dos-Reis@DPTMaths.ENS-Cachan.Fr>"}, {"sha": "b7efefe03fdab085ff867ce04a8d0eab7733c595", "filename": "libstdc++-v3/include/bits/valarray_before.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_before.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_before.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_before.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,9 +23,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file valarray_before.h\n+/** @file bits/valarray_before.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{valarray}\n  */\n \n // Written by Gabriel Dos Reis <Gabriel.Dos-Reis@cmla.ens-cachan.fr>"}, {"sha": "bc10b9217a7136dcb9aea0b502c1b39a64361cbd", "filename": "libstdc++-v3/include/bits/vector.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -49,9 +49,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/** @file vector.tcc\n+/** @file bits/vector.tcc\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{vector}\n  */\n \n #ifndef _VECTOR_TCC"}, {"sha": "241bcec7202180e5af99c28fda5f728c77be5b66", "filename": "libstdc++-v3/include/decimal/decimal", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fdecimal%2Fdecimal", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fdecimal%2Fdecimal", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdecimal%2Fdecimal?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -21,7 +21,7 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file include/decimal/decimal\n+/** @file decimal/decimal\n  *  This is a Standard C++ Library header.\n  */\n "}, {"sha": "c853e8478eca1263f19deda5591a29fc11fa098c", "filename": "libstdc++-v3/include/ext/atomicity.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fext%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fext%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fatomicity.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,9 +22,8 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file atomicity.h\n- *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+/** @file ext/atomicity.h\n+ *  This file is a GNU extension to the Standard C++ Library.\n  */\n \n #ifndef _GLIBCXX_ATOMICITY_H"}, {"sha": "f58c0fcc4e5ecac038239fb9364761220027b706", "filename": "libstdc++-v3/include/ext/cast.h", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fext%2Fcast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fext%2Fcast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fcast.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,8 +22,13 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-#ifndef _CAST_H\n-#define _CAST_H 1\n+/** @file ext/cast.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{ext/pointer.h}\n+ */\n+\n+#ifndef _GLIBCXX_CAST_H\n+#define _GLIBCXX_CAST_H 1\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n@@ -110,4 +115,4 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n _GLIBCXX_END_NAMESPACE\n \n-#endif // _CAST_H\n+#endif // __GLIBCXX_CAST_H"}, {"sha": "b6f86a41c51b0b5487e2a0c1278e8c14ad35916c", "filename": "libstdc++-v3/include/ext/concurrence.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fext%2Fconcurrence.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fext%2Fconcurrence.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fconcurrence.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,9 +23,8 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file concurrence.h\n- *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+/** @file ext/concurrence.h\n+ *  This file is a GNU extension to the Standard C++ Library.\n  */\n \n #ifndef _CONCURRENCE_H"}, {"sha": "d084d74401c0434f4b02e5162def0f30fa883052", "filename": "libstdc++-v3/include/ext/debug_allocator.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fext%2Fdebug_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fext%2Fdebug_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fdebug_allocator.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -37,7 +37,6 @@\n \n /** @file ext/debug_allocator.h\n  *  This file is a GNU extension to the Standard C++ Library.\n- *  You should only include this header if you are using GCC 3 or later.\n  */\n \n #ifndef _DEBUG_ALLOCATOR_H"}, {"sha": "d3caf8a4101f028a63e02f12ff94a468694a5b69", "filename": "libstdc++-v3/include/ext/extptr_allocator.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fext%2Fextptr_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fext%2Fextptr_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fextptr_allocator.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,8 +23,10 @@\n // <http://www.gnu.org/licenses/>.\n \n /**\n- * @file ext/extptr_allocator.h\n- * @author Bob Walters\n+ *  @file ext/extptr_allocator.h\n+ *  This file is a GNU extension to the Standard C++ Library.\n+ *\n+ *  @author Bob Walters\n  *\n  * An example allocator which uses an alternative pointer type from\n  * bits/pointer.h.  Supports test cases which confirm container support"}, {"sha": "692a1c8d1d6e0abaee25a07d12f837035cfef995", "filename": "libstdc++-v3/include/ext/pointer.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpointer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpointer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpointer.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,8 +23,10 @@\n // <http://www.gnu.org/licenses/>.\n \n /**\n- * @file ext/pointer.h\n- * @author Bob Walters\n+ *  @file ext/pointer.h\n+ *  This file is a GNU extension to the Standard C++ Library.\n+ *\n+ *  @author Bob Walters\n  *\n  * Provides reusable _Pointer_adapter for assisting in the development of\n  * custom pointer types that can be used with the standard containers via"}, {"sha": "b4037d60558a7c8a85d1c83a932c7c107ce177f5", "filename": "libstdc++-v3/include/ext/rc_string_base.h", "status": "modified", "additions": 30, "deletions": 31, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -24,9 +24,8 @@\n // <http://www.gnu.org/licenses/>.\n \n /** @file ext/rc_string_base.h\n- *  This file is a GNU extension to the Standard C++ Library.\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{ext/vstring.h}\n  */\n \n #ifndef _RC_STRING_BASE_H\n@@ -115,7 +114,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t    size_type\t    _M_capacity;\n \t    _Atomic_word    _M_refcount;\n \t  }                 _M_info;\n-\t  \n+\n \t  // Only for alignment purposes.\n \t  _CharT            _M_align;\n \t};\n@@ -132,10 +131,10 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t  __atomic_add_dispatch(&_M_info._M_refcount, 1);\n \t  return _M_refdata();\n \t}  // XXX MT\n-\t\n+\n \tvoid\n \t_M_set_length(size_type __n)\n-\t{ \n+\t{\n \t  _M_info._M_refcount = 0;  // One reference.\n \t  _M_info._M_length = __n;\n \t  // grrr. (per 21.3.4)\n@@ -193,7 +192,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       _M_grab(const _Alloc& __alloc) const\n       {\n \treturn (!_M_is_leaked() && _M_get_allocator() == __alloc)\n-\t        ? _M_rep()->_M_refcopy() : _M_rep()->_M_clone(__alloc);\n+\t\t? _M_rep()->_M_refcopy() : _M_rep()->_M_clone(__alloc);\n       }\n \n       void\n@@ -225,19 +224,19 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       // _S_construct_aux is used to implement the 21.3.1 para 15 which\n       // requires special behaviour if _InIterator is an integral type\n       template<typename _InIterator>\n-        static _CharT*\n-        _S_construct_aux(_InIterator __beg, _InIterator __end,\n+\tstatic _CharT*\n+\t_S_construct_aux(_InIterator __beg, _InIterator __end,\n \t\t\t const _Alloc& __a, std::__false_type)\n \t{\n-          typedef typename iterator_traits<_InIterator>::iterator_category _Tag;\n-          return _S_construct(__beg, __end, __a, _Tag());\n+\t  typedef typename iterator_traits<_InIterator>::iterator_category _Tag;\n+\t  return _S_construct(__beg, __end, __a, _Tag());\n \t}\n \n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 438. Ambiguity in the \"do the right thing\" clause\n       template<typename _Integer>\n-        static _CharT*\n-        _S_construct_aux(_Integer __beg, _Integer __end,\n+\tstatic _CharT*\n+\t_S_construct_aux(_Integer __beg, _Integer __end,\n \t\t\t const _Alloc& __a, std::__true_type)\n \t{ return _S_construct_aux_2(static_cast<size_type>(__beg),\n \t\t\t\t    __end, __a); }\n@@ -247,24 +246,24 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       { return _S_construct(__req, __c, __a); }\n \n       template<typename _InIterator>\n-        static _CharT*\n-        _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a)\n+\tstatic _CharT*\n+\t_S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a)\n \t{\n \t  typedef typename std::__is_integer<_InIterator>::__type _Integral;\n \t  return _S_construct_aux(__beg, __end, __a, _Integral());\n-        }\n+\t}\n \n       // For Input Iterators, used in istreambuf_iterators, etc.\n       template<typename _InIterator>\n-        static _CharT*\n-         _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,\n+\tstatic _CharT*\n+\t _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,\n \t\t      std::input_iterator_tag);\n-      \n+\n       // For forward_iterators up to random_access_iterators, used for\n       // string::iterator, _CharT*, etc.\n       template<typename _FwdIterator>\n-        static _CharT*\n-        _S_construct(_FwdIterator __beg, _FwdIterator __end, const _Alloc& __a,\n+\tstatic _CharT*\n+\t_S_construct(_FwdIterator __beg, _FwdIterator __end, const _Alloc& __a,\n \t\t     std::forward_iterator_tag);\n \n       static _CharT*\n@@ -322,11 +321,11 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       __rc_string_base(size_type __n, _CharT __c, const _Alloc& __a);\n \n       template<typename _InputIterator>\n-        __rc_string_base(_InputIterator __beg, _InputIterator __end,\n+\t__rc_string_base(_InputIterator __beg, _InputIterator __end,\n \t\t\t const _Alloc& __a);\n \n       ~__rc_string_base()\n-      { _M_dispose(); }      \n+      { _M_dispose(); }\n \n       allocator_type&\n       _M_get_allocator()\n@@ -348,7 +347,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       void\n       _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,\n \t\tsize_type __len2);\n-      \n+\n       void\n       _M_erase(size_type __pos, size_type __n);\n \n@@ -604,7 +603,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t_M_set_sharable();\n       if (__rcs._M_is_leaked())\n \t__rcs._M_set_sharable();\n-      \n+\n       _CharT* __tmp = _M_data();\n       _M_data(__rcs._M_data());\n       __rcs._M_data(__tmp);\n@@ -613,7 +612,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       // 431. Swapping containers with unequal allocators.\n       std::__alloc_swap<allocator_type>::_S_do_it(_M_get_allocator(),\n \t\t\t\t\t\t  __rcs._M_get_allocator());\n-    } \n+    }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n     void\n@@ -636,7 +635,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       // Make sure we don't shrink below the current size.\n       if (__res < _M_length())\n \t__res = _M_length();\n-      \n+\n       if (__res != _M_capacity() || _M_is_shared())\n \t{\n \t  _CharT* __tmp = _M_rep()->_M_clone(_M_get_allocator(),\n@@ -653,18 +652,18 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t      size_type __len2)\n     {\n       const size_type __how_much = _M_length() - __pos - __len1;\n-      \n+\n       _Rep* __r = _Rep::_S_create(_M_length() + __len2 - __len1,\n \t\t\t\t  _M_capacity(), _M_get_allocator());\n-      \n+\n       if (__pos)\n \t_S_copy(__r->_M_refdata(), _M_data(), __pos);\n       if (__s && __len2)\n \t_S_copy(__r->_M_refdata() + __pos, __s, __len2);\n       if (__how_much)\n \t_S_copy(__r->_M_refdata() + __pos + __len2,\n \t\t_M_data() + __pos + __len1, __how_much);\n-      \n+\n       _M_dispose();\n       _M_data(__r->_M_refdata());\n     }\n@@ -676,7 +675,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     {\n       const size_type __new_size = _M_length() - __n;\n       const size_type __how_much = _M_length() - __pos - __n;\n-      \n+\n       if (_M_is_shared())\n \t{\n \t  // Must reallocate.\n@@ -699,7 +698,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t\t  _M_data() + __pos + __n, __how_much);\n \t}\n \n-      _M_rep()->_M_set_length(__new_size);      \n+      _M_rep()->_M_set_length(__new_size);\n     }\n \n   template<>"}, {"sha": "75d3e86431dc5688b03d473fba38f0e0fa8ae9e5", "filename": "libstdc++-v3/include/ext/ropeimpl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -38,7 +38,7 @@\n \n /** @file ropeimpl.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{ext/rope}\n  */\n \n #include <cstdio>"}, {"sha": "4899e1fdcb70457deb3b7c730c473b5129baf76c", "filename": "libstdc++-v3/include/ext/sso_string_base.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -24,9 +24,8 @@\n // <http://www.gnu.org/licenses/>.\n \n /** @file ext/sso_string_base.h\n- *  This file is a GNU extension to the Standard C++ Library.\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{ext/vstring.h}\n  */\n \n #ifndef _SSO_STRING_BASE_H"}, {"sha": "196295c839d49c405c06d8f1ce1d45ade1173cf7", "filename": "libstdc++-v3/include/ext/string_conversions.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstring_conversions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstring_conversions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstring_conversions.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,6 +22,10 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n+/** @file ext/string_conversions.h\n+ *  This file is a GNU extension to the Standard C++ Library.\n+ */\n+\n #ifndef _STRING_CONVERSIONS_H\n #define _STRING_CONVERSIONS_H 1\n "}, {"sha": "2fe6f61530f71a3da0c00837a8d4b706ad24ef86", "filename": "libstdc++-v3/include/ext/typelist.h", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftypelist.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftypelist.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftypelist.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -33,9 +33,11 @@\n // purpose. It is provided \"as is\" without express or implied warranty.\n \n /**\n- * @file typelist.h\n- * Contains typelist_chain definitions.\n- * Typelists are an idea by Andrei Alexandrescu.\n+ *  @file ext/typelist.h\n+ *  This file is a GNU extension to the Standard C++ Library.\n+ *\n+ *  Contains typelist_chain definitions.\n+ *  Typelists are an idea by Andrei Alexandrescu.\n  */\n \n #ifndef _TYPELIST_H\n@@ -89,7 +91,7 @@ namespace typelist\n \n   template<typename Typelist, typename T>\n     struct contains;\n- \n+\n   template<typename Typelist, template<typename T> class Pred>\n     struct filter;\n \n@@ -120,7 +122,7 @@ namespace typelist\n   template<typename T1, typename T2, typename T3, typename T4, typename T5>\n     struct create5;\n \n-  template<typename T1, typename T2, typename T3, \n+  template<typename T1, typename T2, typename T3,\n \t   typename T4, typename T5, typename T6>\n     struct create6;\n } // namespace typelist\n@@ -130,7 +132,7 @@ _GLIBCXX_END_NAMESPACE\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n-namespace typelist \n+namespace typelist\n {\n namespace detail\n {\n@@ -245,7 +247,7 @@ namespace detail\n     {\n     private:\n       typedef typename append_typelist_<Tl>::type \t\trest_type;\n-      \n+\n     public:\n       typedef typename append<Hd, node<rest_type> >::type::root\ttype;\n     };\n@@ -270,7 +272,7 @@ namespace detail\n \t  value = contains_<Tl, T>::value\n \t};\n     };\n-  \n+\n   template<typename Tl, typename T>\n     struct contains_<chain<T, Tl>, T>\n     {\n@@ -297,7 +299,7 @@ namespace detail\n \t{\n \t  include_hd = Pred<Hd>::value\n \t};\n-      \n+\n       typedef typename chain_filter_<Tl, Pred>::type \t\trest_type;\n       typedef chain<Hd, rest_type> \t\t\t\tchain_type;\n \n@@ -313,7 +315,7 @@ namespace detail\n     {\n       typedef Hd \t\t\t\t\t\ttype;\n     };\n-  \n+\n   template<typename Hd, typename Tl, int i>\n     struct chain_at_index_<chain<Hd, Tl>, i>\n     {\n@@ -328,7 +330,7 @@ namespace detail\n     {\n       typedef null_type \t\t\t\t\ttype;\n     };\n-  \n+\n   template<class Hd, class Tl, template<typename T> class Transform>\n     struct chain_transform_<chain<Hd, Tl>, Transform>\n     {\n@@ -462,7 +464,7 @@ namespace typelist\n     private:\n       typedef typename Typelist::root \t\t\t\troot_type;\n       typedef detail::chain_at_index_<root_type, i> \t\tindex_type;\n-      \n+\n     public:\n       typedef typename index_type::type \t\t\ttype;\n     };\n@@ -523,14 +525,14 @@ namespace typelist\n       typedef node<_GLIBCXX_TYPELIST_CHAIN4(T1,T2,T3,T4)>\ttype;\n     };\n \n-  template<typename T1, typename T2, typename T3, \n+  template<typename T1, typename T2, typename T3,\n \t   typename T4, typename T5>\n     struct create5\n     {\n       typedef node<_GLIBCXX_TYPELIST_CHAIN5(T1,T2,T3,T4,T5)>\ttype;\n     };\n \n-  template<typename T1, typename T2, typename T3, \n+  template<typename T1, typename T2, typename T3,\n \t   typename T4, typename T5, typename T6>\n     struct create6\n     {\n@@ -541,4 +543,3 @@ _GLIBCXX_END_NAMESPACE\n \n \n #endif\n-"}, {"sha": "6908e1f39794b68194792e155f94fcd98768fdba", "filename": "libstdc++-v3/include/ext/vstring.tcc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.tcc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,9 +23,8 @@\n // <http://www.gnu.org/licenses/>.\n \n /** @file ext/vstring.tcc\n- *  This file is a GNU extension to the Standard C++ Library.\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{ext/vstring.h}\n  */\n \n #ifndef _VSTRING_TCC"}, {"sha": "a860ea861c3798b07b64fcb8d9552f7be2540f2f", "filename": "libstdc++-v3/include/ext/vstring_fwd.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_fwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_fwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_fwd.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,9 +23,8 @@\n // <http://www.gnu.org/licenses/>.\n \n /** @file ext/vstring_fwd.h\n- *  This file is a GNU extension to the Standard C++ Library.\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{ext/vstring.h}\n  */\n \n #ifndef _VSTRING_FWD_H"}, {"sha": "d9307cc58fab2c9196b99452b6b26329703e4466", "filename": "libstdc++-v3/include/ext/vstring_util.h", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_util.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -24,9 +24,8 @@\n // <http://www.gnu.org/licenses/>.\n \n /** @file ext/vstring_util.h\n- *  This file is a GNU extension to the Standard C++ Library.\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{ext/vstring.h}\n  */\n \n #ifndef _VSTRING_UTIL_H\n@@ -52,10 +51,10 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     {\n       typedef typename _Alloc::template rebind<_CharT>::other _CharT_alloc_type;\n \n-      typedef _Traits\t\t\t\t\t    traits_type;      \n+      typedef _Traits\t\t\t\t\t    traits_type;\n       typedef typename _Traits::char_type\t\t    value_type;\n       typedef typename _CharT_alloc_type::size_type\t    size_type;\n-      typedef typename _CharT_alloc_type::difference_type   difference_type;      \n+      typedef typename _CharT_alloc_type::difference_type   difference_type;\n       typedef typename _CharT_alloc_type::pointer\t    pointer;\n       typedef typename _CharT_alloc_type::const_pointer\t    const_pointer;\n \n@@ -64,29 +63,29 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       __normal_iterator<pointer, __gnu_cxx::\n \t\t\t__versa_string<_CharT, _Traits, _Alloc,\n \t\t\t\t       __sso_string_base> >\n-        __sso_iterator;\n+\t__sso_iterator;\n       typedef __gnu_cxx::\n       __normal_iterator<const_pointer, __gnu_cxx::\n \t\t\t__versa_string<_CharT, _Traits, _Alloc,\n \t\t\t\t       __sso_string_base> >\n-        __const_sso_iterator;\n+\t__const_sso_iterator;\n \n       // For __rc_string.\n       typedef __gnu_cxx::\n       __normal_iterator<pointer, __gnu_cxx::\n \t\t\t__versa_string<_CharT, _Traits, _Alloc,\n \t\t\t\t       __rc_string_base> >\n-        __rc_iterator;\n+\t__rc_iterator;\n       typedef __gnu_cxx::\n       __normal_iterator<const_pointer, __gnu_cxx::\n \t\t\t__versa_string<_CharT, _Traits, _Alloc,\n \t\t\t\t       __rc_string_base> >\n-        __const_rc_iterator;\n+\t__const_rc_iterator;\n \n-      // NB:  When the allocator is empty, deriving from it saves space \n+      // NB:  When the allocator is empty, deriving from it saves space\n       // (http://www.cantrip.org/emptyopt.html).\n       template<typename _Alloc1>\n-        struct _Alloc_hider\n+\tstruct _Alloc_hider\n \t: public _Alloc1\n \t{\n \t  _Alloc_hider(_CharT* __ptr)\n@@ -115,7 +114,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \tif (__n == 1)\n \t  traits_type::assign(*__d, *__s);\n \telse\n-\t  traits_type::move(__d, __s, __n);\t  \n+\t  traits_type::move(__d, __s, __n);\n       }\n \n       static void\n@@ -124,15 +123,15 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \tif (__n == 1)\n \t  traits_type::assign(*__d, __c);\n \telse\n-\t  traits_type::assign(__d, __n, __c);\t  \n+\t  traits_type::assign(__d, __n, __c);\n       }\n \n       // _S_copy_chars is a separate template to permit specialization\n       // to optimize for the common case of pointers as iterators.\n       template<typename _Iterator>\n-        static void\n-        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)\n-        {\n+\tstatic void\n+\t_S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)\n+\t{\n \t  for (; __k1 != __k2; ++__k1, ++__p)\n \t    traits_type::assign(*__p, *__k1); // These types are off.\n \t}"}, {"sha": "71cd4445e11820f33a6e3353538a8e3eac496df0", "filename": "libstdc++-v3/include/std/atomic", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,7 +22,7 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file atomic\n+/** @file include/atomic\n  *  This is a Standard C++ Library header.\n  */\n "}, {"sha": "6b46fe71d8fee612a1be988d55aa2c4c44bca900", "filename": "libstdc++-v3/include/std/condition_variable", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,7 +22,7 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file condition_variable\n+/** @file include/condition_variable\n  *  This is a Standard C++ Library header.\n  */\n "}, {"sha": "ee31fc12b65c521b1de8f483b3ad194f8245515d", "filename": "libstdc++-v3/include/std/fstream", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -24,7 +24,7 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file fstream\n+/** @file include/fstream\n  *  This is a Standard C++ Library header.\n  */\n "}, {"sha": "7b22b783867ea581c8eba5ff8a244c6c7d2f18c8", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,7 +22,7 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file future\n+/** @file include/future\n  *  This is a Standard C++ Library header.\n  */\n "}, {"sha": "8fc2e72fd7a786d9e6978193e714b8204765aacf", "filename": "libstdc++-v3/include/std/iomanip", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiomanip", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiomanip", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiomanip?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -24,7 +24,7 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file iomanip\n+/** @file include/iomanip\n  *  This is a Standard C++ Library header.\n  */\n "}, {"sha": "8f7975e2db89a250884e6a000497f0112b137ee6", "filename": "libstdc++-v3/include/std/ios", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fios", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fios", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fios?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,7 +23,7 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file ios\n+/** @file include/ios\n  *  This is a Standard C++ Library header.\n  */\n "}, {"sha": "4cbd8359b2aa00c66eb3e3714606ad07d402d2a0", "filename": "libstdc++-v3/include/std/iosfwd", "status": "modified", "additions": 80, "deletions": 32, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiosfwd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiosfwd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiosfwd?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -24,7 +24,7 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file iosfwd\n+/** @file include/iosfwd\n  *  This is a Standard C++ Library header.\n  */\n \n@@ -43,7 +43,7 @@\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n-  /** \n+  /**\n    *  @defgroup io I/O\n    *\n    *  Nearly all of the I/O classes are parameterized on the type of\n@@ -71,7 +71,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *\n    *  @{\n   */\n-  class ios_base; \n+  class ios_base;\n \n   template<typename _CharT, typename _Traits = char_traits<_CharT> >\n     class basic_ios;\n@@ -122,37 +122,85 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<typename _CharT, typename _Traits = char_traits<_CharT> >\n     class ostreambuf_iterator;\n \n-  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-  // Not included.   (??? Apparently no LWG number?)\n-\n-  typedef basic_ios<char> \t\tios;\t\t///< @isiosfwd\n-  typedef basic_streambuf<char> \tstreambuf;\t///< @isiosfwd\n-  typedef basic_istream<char> \t\tistream;\t///< @isiosfwd\n-  typedef basic_ostream<char> \t\tostream;\t///< @isiosfwd\n-  typedef basic_iostream<char> \t\tiostream;\t///< @isiosfwd\n-  typedef basic_stringbuf<char> \tstringbuf;\t///< @isiosfwd\n-  typedef basic_istringstream<char> \tistringstream;\t///< @isiosfwd\n-  typedef basic_ostringstream<char> \tostringstream;\t///< @isiosfwd\n-  typedef basic_stringstream<char> \tstringstream;\t///< @isiosfwd\n-  typedef basic_filebuf<char> \t\tfilebuf;\t///< @isiosfwd\n-  typedef basic_ifstream<char> \t\tifstream;\t///< @isiosfwd\n-  typedef basic_ofstream<char> \t\tofstream;\t///< @isiosfwd\n-  typedef basic_fstream<char> \t\tfstream;\t///< @isiosfwd\n+\n+  /// Base class for @c char streams.\n+  typedef basic_ios<char> \t\tios; \n+\n+  /// Base class for @c char buffers.\n+  typedef basic_streambuf<char> \tstreambuf;\n+\n+  /// Base class for @c char input streams.\n+  typedef basic_istream<char> \t\tistream;\n+\n+  /// Base class for @c char output streams.\n+  typedef basic_ostream<char> \t\tostream;\n+\n+  /// Base class for @c char mixed input and output streams.\n+  typedef basic_iostream<char> \t\tiostream;\n+\n+  /// Class for @c char memory buffers.\n+  typedef basic_stringbuf<char> \tstringbuf;\n+\n+  /// Class for @c char input memory streams.\n+  typedef basic_istringstream<char> \tistringstream;\n+\n+  /// Class for @c char output memory streams.\n+  typedef basic_ostringstream<char> \tostringstream;\n+\n+  /// Class for @c char mixed input and output memory streams.\n+  typedef basic_stringstream<char> \tstringstream;\n+\n+  /// Class for @c char file buffers.\n+  typedef basic_filebuf<char> \t\tfilebuf;\n+\n+  /// Class for @c char input file streams.\n+  typedef basic_ifstream<char> \t\tifstream;\n+\n+  /// Class for @c char output file streams.\n+  typedef basic_ofstream<char> \t\tofstream;\n+\n+  /// Class for @c char mixed input and output file streams.\n+  typedef basic_fstream<char> \t\tfstream;\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n-  typedef basic_ios<wchar_t> \t\twios;\t\t///< @isiosfwd\n-  typedef basic_streambuf<wchar_t> \twstreambuf;\t///< @isiosfwd\n-  typedef basic_istream<wchar_t> \twistream;\t///< @isiosfwd\n-  typedef basic_ostream<wchar_t> \twostream;\t///< @isiosfwd\n-  typedef basic_iostream<wchar_t> \twiostream;\t///< @isiosfwd\n-  typedef basic_stringbuf<wchar_t> \twstringbuf;\t///< @isiosfwd\n-  typedef basic_istringstream<wchar_t> \twistringstream;\t///< @isiosfwd\n-  typedef basic_ostringstream<wchar_t> \twostringstream;\t///< @isiosfwd\n-  typedef basic_stringstream<wchar_t> \twstringstream;\t///< @isiosfwd\n-  typedef basic_filebuf<wchar_t> \twfilebuf;\t///< @isiosfwd\n-  typedef basic_ifstream<wchar_t> \twifstream;\t///< @isiosfwd\n-  typedef basic_ofstream<wchar_t> \twofstream;\t///< @isiosfwd\n-  typedef basic_fstream<wchar_t> \twfstream;\t///< @isiosfwd\n+  /// Base class for @c wchar_t streams.\n+  typedef basic_ios<wchar_t> \t\twios;\n+\n+  /// Base class for @c wchar_t buffers.\n+  typedef basic_streambuf<wchar_t> \twstreambuf;\n+\n+  /// Base class for @c wchar_t input streams.\n+  typedef basic_istream<wchar_t> \twistream;\n+\n+  /// Base class for @c wchar_t output streams.\n+  typedef basic_ostream<wchar_t> \twostream;\n+\n+  /// Base class for @c wchar_t mixed input and output streams.\n+  typedef basic_iostream<wchar_t> \twiostream;\n+\n+  /// Class for @c wchar_t memory buffers.\n+  typedef basic_stringbuf<wchar_t> \twstringbuf;\n+\n+  /// Class for @c wchar_t input memory streams.\n+  typedef basic_istringstream<wchar_t> \twistringstream;\n+\n+  /// Class for @c wchar_t output memory streams.\n+  typedef basic_ostringstream<wchar_t> \twostringstream;\n+\n+  /// Class for @c wchar_t mixed input and output memory streams.\n+  typedef basic_stringstream<wchar_t> \twstringstream;\n+\n+  /// Class for @c wchar_t file buffers.\n+  typedef basic_filebuf<wchar_t> \twfilebuf;\n+\n+  /// Class for @c wchar_t input file streams.\n+  typedef basic_ifstream<wchar_t> \twifstream;\n+\n+  /// Class for @c wchar_t output file streams.\n+  typedef basic_ofstream<wchar_t> \twofstream;\n+\n+  /// Class for @c wchar_t mixed input and output file streams.\n+  typedef basic_fstream<wchar_t> \twfstream;\n #endif\n   /** @}  */\n "}, {"sha": "6a991caee0070ce97250f8dd8ae23ec60db64f65", "filename": "libstdc++-v3/include/std/iostream", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiostream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiostream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiostream?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,8 +23,8 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file iostream\n- *  This is a Standard C++ Library header. \n+/** @file include/iostream\n+ *  This is a Standard C++ Library header.\n  */\n \n //\n@@ -56,16 +56,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  linked to above.\n   */\n   //@{\n-  extern istream cin;\t\t///< Linked to standard input\n-  extern ostream cout;\t\t///< Linked to standard output\n-  extern ostream cerr;\t\t///< Linked to standard error (unbuffered)\n-  extern ostream clog;\t\t///< Linked to standard error (buffered)\n+  extern istream cin;\t\t/// Linked to standard input\n+  extern ostream cout;\t\t/// Linked to standard output\n+  extern ostream cerr;\t\t/// Linked to standard error (unbuffered)\n+  extern ostream clog;\t\t/// Linked to standard error (buffered)\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n-  extern wistream wcin;\t\t///< Linked to standard input\n-  extern wostream wcout;\t///< Linked to standard output\n-  extern wostream wcerr;\t///< Linked to standard error (unbuffered)\n-  extern wostream wclog;\t///< Linked to standard error (buffered)\n+  extern wistream wcin;\t\t/// Linked to standard input\n+  extern wostream wcout;\t/// Linked to standard output\n+  extern wostream wcerr;\t/// Linked to standard error (unbuffered)\n+  extern wostream wclog;\t/// Linked to standard error (buffered)\n #endif\n   //@}\n "}, {"sha": "df75718ae1015039a109f72f1f32570058d6fced", "filename": "libstdc++-v3/include/std/istream", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -28,7 +28,7 @@\n // ISO C++ 14882: 27.6.1  Input streams\n //\n \n-/** @file istream\n+/** @file include/istream\n  *  This is a Standard C++ Library header.\n  */\n "}, {"sha": "77190060bb7c4386778e73eb901a4bea642711b7", "filename": "libstdc++-v3/include/std/limits", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,7 +23,7 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file limits\n+/** @file include/limits\n  *  This is a Standard C++ Library header.\n  */\n \n@@ -154,11 +154,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   */\n   enum float_round_style\n   {\n-    round_indeterminate       = -1,    ///< Self-explanatory.\n-    round_toward_zero         = 0,     ///< Self-explanatory.\n-    round_to_nearest          = 1,     ///< To the nearest representable value.\n-    round_toward_infinity     = 2,     ///< Self-explanatory.\n-    round_toward_neg_infinity = 3      ///< Self-explanatory.\n+    round_indeterminate       = -1,    /// Intermediate.\n+    round_toward_zero         = 0,     /// To zero.\n+    round_to_nearest          = 1,     /// To the nearest representable value.\n+    round_toward_infinity     = 2,     /// To infinity.\n+    round_toward_neg_infinity = 3      /// To negative infinity.\n   };\n \n   /**"}, {"sha": "55aad34f1967c976475ae30140fe764c275d77a9", "filename": "libstdc++-v3/include/std/locale", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flocale", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flocale", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flocale?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -28,7 +28,7 @@\n // ISO C++ 14882: 22.1  Locales\n //\n \n-/** @file locale\n+/** @file include/locale\n  *  This is a Standard C++ Library header.\n  */\n "}, {"sha": "e8f64a446458f07cc73529241c01dbaa96a93794", "filename": "libstdc++-v3/include/std/mutex", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,7 +23,7 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file mutex\n+/** @file include/mutex\n  *  This is a Standard C++ Library header.\n  */\n "}, {"sha": "632a0e0414e847316658fc8518e131c3fdeed2d1", "filename": "libstdc++-v3/include/std/ostream", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -24,7 +24,7 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file ostream\n+/** @file include/ostream\n  *  This is a Standard C++ Library header.\n  */\n "}, {"sha": "2eefdb705da10c04e246eb7218d3b5461400cfb1", "filename": "libstdc++-v3/include/std/ratio", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fratio", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fratio", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fratio?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,7 +22,7 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file ratio\n+/** @file include/ratio\n  *  This is a Standard C++ Library header.\n  */\n "}, {"sha": "7f9091c81fca4f1302a971c37026c940ac960318", "filename": "libstdc++-v3/include/std/sstream", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,7 +23,7 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file sstream\n+/** @file include/sstream\n  *  This is a Standard C++ Library header.\n  */\n "}, {"sha": "351b8e5d9a5c85c338eae12250b7d88013389f3e", "filename": "libstdc++-v3/include/std/stdexcept", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstdexcept", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstdexcept", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstdexcept?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,7 +22,7 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file stdexcept\n+/** @file include/stdexcept\n  *  This is a Standard C++ Library header.\n  */\n "}, {"sha": "e95a7523dca23390625b075c49bd35c41cd97443", "filename": "libstdc++-v3/include/std/streambuf", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstreambuf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstreambuf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstreambuf?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,7 +23,7 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file streambuf\n+/** @file include/streambuf\n  *  This is a Standard C++ Library header.\n  */\n "}, {"sha": "73aaa79dc7b8b40bf320d87c402dab915577eda7", "filename": "libstdc++-v3/include/std/system_error", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,7 +22,7 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file system_error\n+/** @file include/system_error\n  *  This is a Standard C++ Library header.\n  */\n "}, {"sha": "8a626feb73f87bc30aa183817171ce4b27867a7b", "filename": "libstdc++-v3/include/std/thread", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,7 +22,7 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file thread\n+/** @file include/thread\n  *  This is a Standard C++ Library header.\n  */\n "}, {"sha": "40e78e769143c322d12aa0966c414d5ada7ed96a", "filename": "libstdc++-v3/include/std/valarray", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -24,7 +24,7 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file valarray\n+/** @file include/valarray\n  *  This is a Standard C++ Library header. \n  */\n "}, {"sha": "33c419273a89f6fa509bbf66adfb0e19394e368c", "filename": "libstdc++-v3/include/tr1/bessel_function.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fbessel_function.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fbessel_function.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fbessel_function.tcc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -25,7 +25,7 @@\n \n /** @file tr1/bessel_function.tcc\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{tr1/cmath}\n  */\n \n //"}, {"sha": "d2dccd1fd13fe989c6d81dd9b594ec707d2db3f6", "filename": "libstdc++-v3/include/tr1/beta_function.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fbeta_function.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fbeta_function.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fbeta_function.tcc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -25,7 +25,7 @@\n \n /** @file tr1/beta_function.tcc\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{tr1/cmath}\n  */\n \n //"}, {"sha": "339d90d126fe718714c0990448229c69ccdbe906", "filename": "libstdc++-v3/include/tr1/ell_integral.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fell_integral.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fell_integral.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fell_integral.tcc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -25,7 +25,7 @@\n \n /** @file tr1/ell_integral.tcc\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{tr1/cmath}\n  */\n \n //"}, {"sha": "7834f9e08fa7f77a87568c1796f7690ead6c512b", "filename": "libstdc++-v3/include/tr1/exp_integral.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fexp_integral.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fexp_integral.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fexp_integral.tcc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -25,7 +25,7 @@\n \n /** @file tr1/exp_integral.tcc\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{tr1/cmath}\n  */\n \n //"}, {"sha": "e555acea4d3abeffc62a4a7e472d99c434e25d4f", "filename": "libstdc++-v3/include/tr1/functional_hash.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_hash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_hash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_hash.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -24,7 +24,7 @@\n \n /** @file tr1/functional_hash.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{tr1/functional}\n  */\n \n #ifndef _GLIBCXX_TR1_FUNCTIONAL_HASH_H"}, {"sha": "286dd180d5184b5c5c1f569961ca25bebd99961c", "filename": "libstdc++-v3/include/tr1/gamma.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fgamma.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fgamma.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fgamma.tcc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -25,7 +25,7 @@\n \n /** @file tr1/gamma.tcc\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{tr1/cmath}\n  */\n \n //"}, {"sha": "2dedc5cd16d37fea912397df545c314e02ca721c", "filename": "libstdc++-v3/include/tr1/hashtable.h", "status": "modified", "additions": 94, "deletions": 93, "changes": 187, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -24,7 +24,8 @@\n \n /** @file tr1/hashtable.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly.\n+ *  @headername{tr1/unordered_set, tr1/unordered_map}\n  */\n \n #ifndef _GLIBCXX_TR1_HASHTABLE_H\n@@ -35,40 +36,40 @@\n #include <tr1/hashtable_policy.h>\n \n namespace std\n-{ \n+{\n namespace tr1\n {\n   // Class template _Hashtable, class definition.\n-  \n+\n   // Meaning of class template _Hashtable's template parameters\n-  \n+\n   // _Key and _Value: arbitrary CopyConstructible types.\n-  \n+\n   // _Allocator: an allocator type ([lib.allocator.requirements]) whose\n   // value type is Value.  As a conforming extension, we allow for\n   // value type != Value.\n \n   // _ExtractKey: function object that takes a object of type Value\n   // and returns a value of type _Key.\n-  \n+\n   // _Equal: function object that takes two objects of type k and returns\n   // a bool-like value that is true if the two objects are considered equal.\n-  \n+\n   // _H1: the hash function.  A unary function object with argument type\n   // Key and result type size_t.  Return values should be distributed\n   // over the entire range [0, numeric_limits<size_t>:::max()].\n-  \n+\n   // _H2: the range-hashing function (in the terminology of Tavori and\n   // Dreizin).  A binary function object whose argument types and result\n   // type are all size_t.  Given arguments r and N, the return value is\n   // in the range [0, N).\n-  \n+\n   // _Hash: the ranged hash function (Tavori and Dreizin). A binary function\n   // whose argument types are _Key and size_t and whose result type is\n   // size_t.  Given arguments k and N, the return value is in the range\n   // [0, N).  Default: hash(k, N) = h2(h1(k), N).  If _Hash is anything other\n   // than the default, _H1 and _H2 are ignored.\n-  \n+\n   // _RehashPolicy: Policy class with three members, all of which govern\n   // the bucket count. _M_next_bkt(n) returns a bucket count no smaller\n   // than n.  _M_bkt_for_elements(n) returns a bucket count appropriate\n@@ -77,27 +78,27 @@ namespace tr1\n   // current element count is n_elt, we need to increase the bucket\n   // count.  If so, returns make_pair(true, n), where n is the new\n   // bucket count.  If not, returns make_pair(false, <anything>).\n-  \n+\n   // ??? Right now it is hard-wired that the number of buckets never\n   // shrinks.  Should we allow _RehashPolicy to change that?\n-  \n+\n   // __cache_hash_code: bool.  true if we store the value of the hash\n   // function along with the value.  This is a time-space tradeoff.\n   // Storing it may improve lookup speed by reducing the number of times\n   // we need to call the Equal function.\n-  \n+\n   // __constant_iterators: bool.  true if iterator and const_iterator are\n   // both constant iterator types.  This is true for unordered_set and\n   // unordered_multiset, false for unordered_map and unordered_multimap.\n-  \n+\n   // __unique_keys: bool.  true if the return value of _Hashtable::count(k)\n   // is always at most one, false if it may be an arbitrary number.  This\n   // true for unordered_set and unordered_map, false for unordered_multiset\n   // and unordered_multimap.\n-  \n+\n   template<typename _Key, typename _Value, typename _Allocator,\n \t   typename _ExtractKey, typename _Equal,\n-\t   typename _H1, typename _H2, typename _Hash, \n+\t   typename _H1, typename _H2, typename _Hash,\n \t   typename _RehashPolicy,\n \t   bool __cache_hash_code,\n \t   bool __constant_iterators,\n@@ -135,74 +136,74 @@ namespace tr1\n       typedef typename _Allocator::const_pointer          const_pointer;\n       typedef typename _Allocator::reference              reference;\n       typedef typename _Allocator::const_reference        const_reference;\n-      \n+\n       typedef __detail::_Node_iterator<value_type, __constant_iterators,\n \t\t\t\t       __cache_hash_code>\n-                                                          local_iterator;\n+\t\t\t\t\t\t\t  local_iterator;\n       typedef __detail::_Node_const_iterator<value_type,\n \t\t\t\t\t     __constant_iterators,\n \t\t\t\t\t     __cache_hash_code>\n-                                                          const_local_iterator;\n+\t\t\t\t\t\t\t  const_local_iterator;\n \n       typedef __detail::_Hashtable_iterator<value_type, __constant_iterators,\n \t\t\t\t\t    __cache_hash_code>\n-                                                          iterator;\n+\t\t\t\t\t\t\t  iterator;\n       typedef __detail::_Hashtable_const_iterator<value_type,\n \t\t\t\t\t\t  __constant_iterators,\n \t\t\t\t\t\t  __cache_hash_code>\n-                                                          const_iterator;\n+\t\t\t\t\t\t\t  const_iterator;\n \n       template<typename _Key2, typename _Value2, typename _Ex2, bool __unique2,\n \t       typename _Hashtable2>\n-        friend struct __detail::_Map_base;\n+\tfriend struct __detail::_Map_base;\n \n     private:\n       typedef __detail::_Hash_node<_Value, __cache_hash_code> _Node;\n       typedef typename _Allocator::template rebind<_Node>::other\n-                                                        _Node_allocator_type;\n+\t\t\t\t\t\t\t_Node_allocator_type;\n       typedef typename _Allocator::template rebind<_Node*>::other\n-                                                        _Bucket_allocator_type;\n+\t\t\t\t\t\t\t_Bucket_allocator_type;\n \n       typedef typename _Allocator::template rebind<_Value>::other\n-                                                        _Value_allocator_type;\n+\t\t\t\t\t\t\t_Value_allocator_type;\n \n       _Node_allocator_type   _M_node_allocator;\n       _Node**                _M_buckets;\n       size_type              _M_bucket_count;\n       size_type              _M_element_count;\n       _RehashPolicy          _M_rehash_policy;\n-      \n+\n       _Node*\n       _M_allocate_node(const value_type& __v);\n-  \n+\n       void\n       _M_deallocate_node(_Node* __n);\n-  \n+\n       void\n       _M_deallocate_nodes(_Node**, size_type);\n \n       _Node**\n       _M_allocate_buckets(size_type __n);\n-  \n+\n       void\n       _M_deallocate_buckets(_Node**, size_type __n);\n \n-    public:\t\t\t    \n+    public:\n       // Constructor, destructor, assignment, swap\n       _Hashtable(size_type __bucket_hint,\n \t\t const _H1&, const _H2&, const _Hash&,\n \t\t const _Equal&, const _ExtractKey&,\n \t\t const allocator_type&);\n-  \n+\n       template<typename _InputIterator>\n-        _Hashtable(_InputIterator __first, _InputIterator __last,\n+\t_Hashtable(_InputIterator __first, _InputIterator __last,\n \t\t   size_type __bucket_hint,\n-\t\t   const _H1&, const _H2&, const _Hash&, \n+\t\t   const _H1&, const _H2&, const _Hash&,\n \t\t   const _Equal&, const _ExtractKey&,\n \t\t   const allocator_type&);\n-  \n+\n       _Hashtable(const _Hashtable&);\n-    \n+\n       _Hashtable&\n       operator=(const _Hashtable&);\n \n@@ -240,7 +241,7 @@ namespace tr1\n       size_type\n       size() const\n       { return _M_element_count; }\n-  \n+\n       bool\n       empty() const\n       { return size() == 0; }\n@@ -268,18 +269,18 @@ namespace tr1\n       size_type\n       bucket_count() const\n       { return _M_bucket_count; }\n-  \n+\n       size_type\n       max_bucket_count() const\n       { return max_size(); }\n-  \n+\n       size_type\n       bucket_size(size_type __n) const\n       { return std::distance(begin(__n), end(__n)); }\n-  \n+\n       size_type\n       bucket(const key_type& __k) const\n-      { \n+      {\n \treturn this->_M_bucket_index(__k, this->_M_hash_code(__k),\n \t\t\t\t     bucket_count());\n       }\n@@ -302,7 +303,7 @@ namespace tr1\n \n       float\n       load_factor() const\n-      { \n+      {\n \treturn static_cast<float>(size()) / static_cast<float>(bucket_count());\n       }\n \n@@ -313,8 +314,8 @@ namespace tr1\n       const _RehashPolicy&\n       __rehash_policy() const\n       { return _M_rehash_policy; }\n-      \n-      void \n+\n+      void\n       __rehash_policy(const _RehashPolicy&);\n \n       // Lookup.\n@@ -340,13 +341,13 @@ namespace tr1\n       // cleaner workaround.\n       typedef typename __gnu_cxx::__conditional_type<__unique_keys,\n \t\t       \t    std::pair<iterator, bool>, iterator>::__type\n-        _Insert_Return_Type;\n+\t_Insert_Return_Type;\n \n       typedef typename __gnu_cxx::__conditional_type<__unique_keys,\n \t\t\t\t\t  std::_Select1st<_Insert_Return_Type>,\n \t\t\t\t  \t  std::_Identity<_Insert_Return_Type>\n-                                   >::__type\n-        _Insert_Conv_Type;\n+\t\t\t\t   >::__type\n+\t_Insert_Conv_Type;\n \n       _Node*\n       _M_find_node(_Node*, const key_type&,\n@@ -365,10 +366,10 @@ namespace tr1\n       void\n       _M_erase_node(_Node*, _Node**);\n \n-    public:\t\t\t\t\n+    public:\n       // Insert and erase\n       _Insert_Return_Type\n-      insert(const value_type& __v) \n+      insert(const value_type& __v)\n       { return _M_insert(__v, std::tr1::integral_constant<bool,\n \t\t\t __unique_keys>()); }\n \n@@ -381,8 +382,8 @@ namespace tr1\n       { return const_iterator(_Insert_Conv_Type()(this->insert(__v))); }\n \n       template<typename _InputIterator>\n-        void\n-        insert(_InputIterator __first, _InputIterator __last);\n+\tvoid\n+\tinsert(_InputIterator __first, _InputIterator __last);\n \n       iterator\n       erase(iterator);\n@@ -404,15 +405,15 @@ namespace tr1\n \n       // Set number of buckets to be appropriate for container of n element.\n       void rehash(size_type __n);\n-      \n+\n     private:\n       // Unconditionally change size of bucket array to n.\n       void _M_rehash(size_type __n);\n     };\n \n \n   // Definitions of class template _Hashtable's out-of-line member functions.\n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -437,7 +438,7 @@ namespace tr1\n \t}\n     }\n \n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -450,7 +451,7 @@ namespace tr1\n       _M_node_allocator.deallocate(__n, 1);\n     }\n \n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -472,7 +473,7 @@ namespace tr1\n \t}\n     }\n \n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -493,7 +494,7 @@ namespace tr1\n       return __p;\n     }\n \n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -506,7 +507,7 @@ namespace tr1\n       __alloc.deallocate(__p, __n + 1);\n     }\n \n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -530,7 +531,7 @@ namespace tr1\n       _M_buckets = _M_allocate_buckets(_M_bucket_count);\n     }\n \n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -570,8 +571,8 @@ namespace tr1\n \t    __throw_exception_again;\n \t  }\n       }\n-  \n-  template<typename _Key, typename _Value, \n+\n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -611,7 +612,7 @@ namespace tr1\n \t}\n     }\n \n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -626,7 +627,7 @@ namespace tr1\n       return *this;\n     }\n \n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -638,7 +639,7 @@ namespace tr1\n       _M_deallocate_buckets(_M_buckets, _M_bucket_count);\n     }\n \n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -664,7 +665,7 @@ namespace tr1\n       std::swap(_M_element_count, __x._M_element_count);\n     }\n \n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -679,7 +680,7 @@ namespace tr1\n \t_M_rehash(__n_bkt);\n     }\n \n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -696,7 +697,7 @@ namespace tr1\n       return __p ? iterator(__p, _M_buckets + __n) : this->end();\n     }\n \n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -713,7 +714,7 @@ namespace tr1\n       return __p ? const_iterator(__p, _M_buckets + __n) : this->end();\n     }\n \n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -733,7 +734,7 @@ namespace tr1\n       return __result;\n     }\n \n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -753,7 +754,7 @@ namespace tr1\n       std::size_t __n = this->_M_bucket_index(__k, __code, _M_bucket_count);\n       _Node** __head = _M_buckets + __n;\n       _Node* __p = _M_find_node(*__head, __k, __code);\n-      \n+\n       if (__p)\n \t{\n \t  _Node* __p1 = __p->_M_next;\n@@ -771,7 +772,7 @@ namespace tr1\n \treturn std::make_pair(this->end(), this->end());\n     }\n \n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -811,13 +812,13 @@ namespace tr1\n \n   // Find the node whose key compares equal to k, beginning the search\n   // at p (usually the head of a bucket).  Return nil if no node is found.\n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n     typename _Hashtable<_Key, _Value, _Allocator, _ExtractKey,\n \t\t\t_Equal, _H1, _H2, _Hash, _RehashPolicy,\n-\t\t\t__chc, __cit, __uk>::_Node* \n+\t\t\t__chc, __cit, __uk>::_Node*\n     _Hashtable<_Key, _Value, _Allocator, _ExtractKey, _Equal,\n \t       _H1, _H2, _Hash, _RehashPolicy, __chc, __cit, __uk>::\n     _M_find_node(_Node* __p, const key_type& __k,\n@@ -830,7 +831,7 @@ namespace tr1\n     }\n \n   // Insert v in bucket n (assumes no element with its key already present).\n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -873,7 +874,7 @@ namespace tr1\n     }\n \n   // Insert v if no element with its key is already present.\n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -893,9 +894,9 @@ namespace tr1\n \treturn std::make_pair(iterator(__p, _M_buckets + __n), false);\n       return std::make_pair(_M_insert_bucket(__v, __n, __code), true);\n     }\n-  \n+\n   // Insert v unconditionally.\n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -911,7 +912,7 @@ namespace tr1\n \t\t\t\t\t  _M_element_count, 1);\n       if (__do_rehash.first)\n \t_M_rehash(__do_rehash.second);\n- \n+\n       const key_type& __k = this->_M_extract(__v);\n       typename _Hashtable::_Hash_code_type __code = this->_M_hash_code(__k);\n       size_type __n = this->_M_bucket_index(__k, __code, _M_bucket_count);\n@@ -937,7 +938,7 @@ namespace tr1\n     }\n \n   // For erase(iterator) and erase(const_iterator).\n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -964,12 +965,12 @@ namespace tr1\n       --_M_element_count;\n     }\n \n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n     template<typename _InputIterator>\n-      void \n+      void\n       _Hashtable<_Key, _Value, _Allocator, _ExtractKey, _Equal,\n \t\t _H1, _H2, _Hash, _RehashPolicy, __chc, __cit, __uk>::\n       insert(_InputIterator __first, _InputIterator __last)\n@@ -985,7 +986,7 @@ namespace tr1\n \t  this->insert(*__first);\n       }\n \n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -1002,7 +1003,7 @@ namespace tr1\n       return __result;\n     }\n \n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -1019,7 +1020,7 @@ namespace tr1\n       return __result;\n     }\n \n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -1033,7 +1034,7 @@ namespace tr1\n       typename _Hashtable::_Hash_code_type __code = this->_M_hash_code(__k);\n       std::size_t __n = this->_M_bucket_index(__k, __code, _M_bucket_count);\n       size_type __result = 0;\n-      \n+\n       _Node** __slot = _M_buckets + __n;\n       while (*__slot && !this->_M_compare(__k, __code, *__slot))\n \t__slot = &((*__slot)->_M_next);\n@@ -1046,8 +1047,8 @@ namespace tr1\n \t  // in parameters?\n \t  if (&this->_M_extract((*__slot)->_M_v) != &__k)\n \t    {\n-              _Node* __p = *__slot;\n-              *__slot = __p->_M_next;\n+\t      _Node* __p = *__slot;\n+\t      *__slot = __p->_M_next;\n \t      _M_deallocate_node(__p);\n \t      --_M_element_count;\n \t      ++__result;\n@@ -1074,7 +1075,7 @@ namespace tr1\n   // ??? This could be optimized by taking advantage of the bucket\n   // structure, but it's not clear that it's worth doing.  It probably\n   // wouldn't even be an optimization unless the load factor is large.\n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -1089,8 +1090,8 @@ namespace tr1\n \t__first = this->erase(__first);\n       return __last;\n     }\n-  \n-  template<typename _Key, typename _Value, \n+\n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -1106,7 +1107,7 @@ namespace tr1\n       return __last;\n     }\n \n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -1118,8 +1119,8 @@ namespace tr1\n       _M_deallocate_nodes(_M_buckets, _M_bucket_count);\n       _M_element_count = 0;\n     }\n- \n-  template<typename _Key, typename _Value, \n+\n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -1133,7 +1134,7 @@ namespace tr1\n \t\t\t\t\t\t\t      + 1)));\n     }\n \n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>"}, {"sha": "967fb3c33773a9ea7ca24f745f41a3558be9651d", "filename": "libstdc++-v3/include/tr1/hashtable_policy.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable_policy.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -24,7 +24,8 @@\n \n /** @file tr1/hashtable_policy.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. \n+ *  @headername{tr1/unordered_map, tr1/unordered_set}\n  */\n \n namespace std"}, {"sha": "bf6a0fdededcd2429adb4552404a5d590dbd742e", "filename": "libstdc++-v3/include/tr1/hypergeometric.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhypergeometric.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhypergeometric.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhypergeometric.tcc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -25,7 +25,7 @@\n \n /** @file tr1/hypergeometric.tcc\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{tr1/cmath}\n  */\n \n //"}, {"sha": "4ffeada7844ecc642fb9f787fa478bf2a282018c", "filename": "libstdc++-v3/include/tr1/legendre_function.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Flegendre_function.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Flegendre_function.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Flegendre_function.tcc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -25,7 +25,7 @@\n \n /** @file tr1/legendre_function.tcc\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{tr1/cmath}\n  */\n \n //"}, {"sha": "16fbdd7e4451f0cb74ec6ebccb74622f17e35fcf", "filename": "libstdc++-v3/include/tr1/modified_bessel_func.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmodified_bessel_func.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmodified_bessel_func.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmodified_bessel_func.tcc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -25,7 +25,7 @@\n \n /** @file tr1/modified_bessel_func.tcc\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{tr1/cmath}\n  */\n \n //"}, {"sha": "07abbac3a6b7f2cfb531fc34f8c1cfc7b22c2377", "filename": "libstdc++-v3/include/tr1/poly_hermite.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fpoly_hermite.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fpoly_hermite.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fpoly_hermite.tcc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -25,7 +25,7 @@\n \n /** @file tr1/poly_hermite.tcc\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{tr1/cmath}\n  */\n \n //"}, {"sha": "5cf0050c8c4d3a6eaad8dc6d18ce75bb5635dd05", "filename": "libstdc++-v3/include/tr1/poly_laguerre.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fpoly_laguerre.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fpoly_laguerre.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fpoly_laguerre.tcc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -25,7 +25,7 @@\n \n /** @file tr1/poly_laguerre.tcc\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{tr1/cmath}\n  */\n \n //"}, {"sha": "1b491b0461a0cc5c97c591157634d0d5a49ae987", "filename": "libstdc++-v3/include/tr1/random.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -25,7 +25,7 @@\n /**\n  * @file tr1/random.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{tr1/random}\n  */\n \n #ifndef _GLIBCXX_TR1_RANDOM_H"}, {"sha": "d53737774d82775f1e198a2ef809ca6a22774731", "filename": "libstdc++-v3/include/tr1/random.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -25,7 +25,7 @@\n \n /** @file tr1/random.tcc\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{tr1/random}\n  */\n \n #ifndef _GLIBCXX_TR1_RANDOM_TCC"}, {"sha": "fb373b0258cb58950e4244b775a44e729149279d", "filename": "libstdc++-v3/include/tr1/riemann_zeta.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Friemann_zeta.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Friemann_zeta.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Friemann_zeta.tcc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -25,7 +25,7 @@\n \n /** @file tr1/riemann_zeta.tcc\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{tr1/cmath}\n  */\n \n //"}, {"sha": "a942fcd99ed3e8e4f889bddc0abfe2c2fb208664", "filename": "libstdc++-v3/include/tr1/shared_ptr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fshared_ptr.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -43,7 +43,7 @@\n \n /** @file tr1/shared_ptr.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{tr1/memory}\n  */\n \n #ifndef _TR1_SHARED_PTR_H"}, {"sha": "066e043903d077f6f576bb5fcf3a999e91543087", "filename": "libstdc++-v3/include/tr1/special_function_util.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fspecial_function_util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fspecial_function_util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fspecial_function_util.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -25,7 +25,7 @@\n \n /** @file tr1/special_function_util.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{tr1/cmath}\n  */\n \n //"}, {"sha": "cdce7d0df0c8cdc5b16dde2e213b2292b5526366", "filename": "libstdc++-v3/include/tr1/unordered_map.h", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_map.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -24,7 +24,7 @@\n \n /** @file tr1/unordered_map.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{tr1/unordered_map}\n  */\n \n namespace std\n@@ -40,7 +40,7 @@ namespace tr1\n \t   bool __cache_hash_code = false>\n     class __unordered_map\n     : public _Hashtable<_Key, std::pair<const _Key, _Tp>, _Alloc,\n-\t\t\tstd::_Select1st<std::pair<const _Key, _Tp> >, _Pred, \n+\t\t\tstd::_Select1st<std::pair<const _Key, _Tp> >, _Pred,\n \t\t\t_Hash, __detail::_Mod_range_hashing,\n \t\t\t__detail::_Default_ranged_hash,\n \t\t\t__detail::_Prime_rehash_policy,\n@@ -52,7 +52,7 @@ namespace tr1\n \t\t\t __detail::_Default_ranged_hash,\n \t\t\t __detail::_Prime_rehash_policy,\n \t\t\t __cache_hash_code, false, true>\n-        _Base;\n+\t_Base;\n \n     public:\n       typedef typename _Base::size_type       size_type;\n@@ -71,17 +71,17 @@ namespace tr1\n       { }\n \n       template<typename _InputIterator>\n-        __unordered_map(_InputIterator __f, _InputIterator __l, \n+\t__unordered_map(_InputIterator __f, _InputIterator __l,\n \t\t\tsize_type __n = 10,\n-\t\t\tconst hasher& __hf = hasher(), \n-\t\t\tconst key_equal& __eql = key_equal(), \n+\t\t\tconst hasher& __hf = hasher(),\n+\t\t\tconst key_equal& __eql = key_equal(),\n \t\t\tconst allocator_type& __a = allocator_type())\n \t: _Base(__f, __l, __n, __hf, __detail::_Mod_range_hashing(),\n \t\t__detail::_Default_ranged_hash(),\n \t\t__eql, std::_Select1st<std::pair<const _Key, _Tp> >(), __a)\n \t{ }\n     };\n-  \n+\n   template<class _Key, class _Tp,\n \t   class _Hash = hash<_Key>,\n \t   class _Pred = std::equal_to<_Key>,\n@@ -103,14 +103,14 @@ namespace tr1\n \t\t\t __detail::_Default_ranged_hash,\n \t\t\t __detail::_Prime_rehash_policy,\n \t\t\t __cache_hash_code, false, false>\n-        _Base;\n+\t_Base;\n \n     public:\n       typedef typename _Base::size_type       size_type;\n       typedef typename _Base::hasher          hasher;\n       typedef typename _Base::key_equal       key_equal;\n       typedef typename _Base::allocator_type  allocator_type;\n-      \n+\n       explicit\n       __unordered_multimap(size_type __n = 10,\n \t\t\t   const hasher& __hf = hasher(),\n@@ -123,15 +123,15 @@ namespace tr1\n \n \n       template<typename _InputIterator>\n-        __unordered_multimap(_InputIterator __f, _InputIterator __l, \n+\t__unordered_multimap(_InputIterator __f, _InputIterator __l,\n \t\t\t     typename _Base::size_type __n = 0,\n-\t\t\t     const hasher& __hf = hasher(), \n-\t\t\t     const key_equal& __eql = key_equal(), \n+\t\t\t     const hasher& __hf = hasher(),\n+\t\t\t     const key_equal& __eql = key_equal(),\n \t\t\t     const allocator_type& __a = allocator_type())\n \t: _Base(__f, __l, __n, __hf, __detail::_Mod_range_hashing(),\n \t\t__detail::_Default_ranged_hash(),\n \t\t__eql, std::_Select1st<std::pair<const _Key, _Tp> >(), __a)\n-        { }\n+\t{ }\n     };\n \n   template<class _Key, class _Tp, class _Hash, class _Pred, class _Alloc,\n@@ -196,15 +196,15 @@ namespace tr1\n       { }\n \n       template<typename _InputIterator>\n-        unordered_map(_InputIterator __f, _InputIterator __l, \n+\tunordered_map(_InputIterator __f, _InputIterator __l,\n \t\t      size_type __n = 10,\n-\t\t      const hasher& __hf = hasher(), \n-\t\t      const key_equal& __eql = key_equal(), \n+\t\t      const hasher& __hf = hasher(),\n+\t\t      const key_equal& __eql = key_equal(),\n \t\t      const allocator_type& __a = allocator_type())\n \t: _Base(__f, __l, __n, __hf, __eql, __a)\n-        { }\n+\t{ }\n     };\n-  \n+\n   /**\n    *  @brief A standard container composed of equivalent keys\n    *  (possibly containing multiple of each key value) that associates\n@@ -238,7 +238,7 @@ namespace tr1\n       typedef typename _Base::hasher          hasher;\n       typedef typename _Base::key_equal       key_equal;\n       typedef typename _Base::allocator_type  allocator_type;\n-      \n+\n       explicit\n       unordered_multimap(size_type __n = 10,\n \t\t\t const hasher& __hf = hasher(),\n@@ -249,13 +249,13 @@ namespace tr1\n \n \n       template<typename _InputIterator>\n-        unordered_multimap(_InputIterator __f, _InputIterator __l, \n+\tunordered_multimap(_InputIterator __f, _InputIterator __l,\n \t\t\t   typename _Base::size_type __n = 0,\n-\t\t\t   const hasher& __hf = hasher(), \n-\t\t\t   const key_equal& __eql = key_equal(), \n+\t\t\t   const hasher& __hf = hasher(),\n+\t\t\t   const key_equal& __eql = key_equal(),\n \t\t\t   const allocator_type& __a = allocator_type())\n \t: _Base(__f, __l, __n, __hf, __eql, __a)\n-        { }\n+\t{ }\n \n     };\n "}, {"sha": "293adf194d4cd571d59b72021c256faf0086dc60", "filename": "libstdc++-v3/include/tr1/unordered_set.h", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_set.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -24,11 +24,11 @@\n \n /** @file tr1/unordered_set.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  Do not attempt to use it directly. @headername{tr1/unordered_set}\n  */\n \n namespace std\n-{ \n+{\n namespace tr1\n {\n   // XXX When we get typedef templates these class definitions\n@@ -52,14 +52,14 @@ namespace tr1\n \t\t\t __detail::_Default_ranged_hash,\n \t\t\t __detail::_Prime_rehash_policy,\n \t\t\t __cache_hash_code, true, true>\n-        _Base;\n+\t_Base;\n \n     public:\n       typedef typename _Base::size_type       size_type;\n       typedef typename _Base::hasher          hasher;\n       typedef typename _Base::key_equal       key_equal;\n       typedef typename _Base::allocator_type  allocator_type;\n-      \n+\n       explicit\n       __unordered_set(size_type __n = 10,\n \t\t      const hasher& __hf = hasher(),\n@@ -71,15 +71,15 @@ namespace tr1\n       { }\n \n       template<typename _InputIterator>\n-        __unordered_set(_InputIterator __f, _InputIterator __l, \n+\t__unordered_set(_InputIterator __f, _InputIterator __l,\n \t\t\tsize_type __n = 10,\n-\t\t\tconst hasher& __hf = hasher(), \n-\t\t\tconst key_equal& __eql = key_equal(), \n+\t\t\tconst hasher& __hf = hasher(),\n+\t\t\tconst key_equal& __eql = key_equal(),\n \t\t\tconst allocator_type& __a = allocator_type())\n \t: _Base(__f, __l, __n, __hf, __detail::_Mod_range_hashing(),\n \t\t__detail::_Default_ranged_hash(), __eql,\n \t\tstd::_Identity<_Value>(), __a)\n-        { }\n+\t{ }\n     };\n \n   template<class _Value,\n@@ -101,14 +101,14 @@ namespace tr1\n \t\t\t __detail::_Default_ranged_hash,\n \t\t\t __detail::_Prime_rehash_policy,\n \t\t\t __cache_hash_code, true, false>\n-        _Base;\n+\t_Base;\n \n     public:\n       typedef typename _Base::size_type       size_type;\n       typedef typename _Base::hasher          hasher;\n       typedef typename _Base::key_equal       key_equal;\n       typedef typename _Base::allocator_type  allocator_type;\n-      \n+\n       explicit\n       __unordered_multiset(size_type __n = 10,\n \t\t\t   const hasher& __hf = hasher(),\n@@ -121,15 +121,15 @@ namespace tr1\n \n \n       template<typename _InputIterator>\n-        __unordered_multiset(_InputIterator __f, _InputIterator __l, \n+\t__unordered_multiset(_InputIterator __f, _InputIterator __l,\n \t\t\t     typename _Base::size_type __n = 0,\n-\t\t\t     const hasher& __hf = hasher(), \n-\t\t\t     const key_equal& __eql = key_equal(), \n+\t\t\t     const hasher& __hf = hasher(),\n+\t\t\t     const key_equal& __eql = key_equal(),\n \t\t\t     const allocator_type& __a = allocator_type())\n \t: _Base(__f, __l, __n, __hf, __detail::_Mod_range_hashing(),\n \t\t__detail::_Default_ranged_hash(), __eql,\n \t\tstd::_Identity<_Value>(), __a)\n-        { }\n+\t{ }\n     };\n \n   template<class _Value, class _Hash, class _Pred, class _Alloc,\n@@ -179,7 +179,7 @@ namespace tr1\n       typedef typename _Base::hasher          hasher;\n       typedef typename _Base::key_equal       key_equal;\n       typedef typename _Base::allocator_type  allocator_type;\n-      \n+\n       explicit\n       unordered_set(size_type __n = 10,\n \t\t    const hasher& __hf = hasher(),\n@@ -189,13 +189,13 @@ namespace tr1\n       { }\n \n       template<typename _InputIterator>\n-        unordered_set(_InputIterator __f, _InputIterator __l, \n+\tunordered_set(_InputIterator __f, _InputIterator __l,\n \t\t      size_type __n = 10,\n-\t\t      const hasher& __hf = hasher(), \n-\t\t      const key_equal& __eql = key_equal(), \n+\t\t      const hasher& __hf = hasher(),\n+\t\t      const key_equal& __eql = key_equal(),\n \t\t      const allocator_type& __a = allocator_type())\n \t: _Base(__f, __l, __n, __hf, __eql, __a)\n-        { }\n+\t{ }\n     };\n \n   /**\n@@ -228,7 +228,7 @@ namespace tr1\n       typedef typename _Base::hasher          hasher;\n       typedef typename _Base::key_equal       key_equal;\n       typedef typename _Base::allocator_type  allocator_type;\n-      \n+\n       explicit\n       unordered_multiset(size_type __n = 10,\n \t\t\t const hasher& __hf = hasher(),\n@@ -239,13 +239,13 @@ namespace tr1\n \n \n       template<typename _InputIterator>\n-        unordered_multiset(_InputIterator __f, _InputIterator __l, \n+\tunordered_multiset(_InputIterator __f, _InputIterator __l,\n \t\t\t   typename _Base::size_type __n = 0,\n-\t\t\t   const hasher& __hf = hasher(), \n-\t\t\t   const key_equal& __eql = key_equal(), \n+\t\t\t   const hasher& __hf = hasher(),\n+\t\t\t   const key_equal& __eql = key_equal(),\n \t\t\t   const allocator_type& __a = allocator_type())\n \t: _Base(__f, __l, __n, __hf, __eql, __a)\n-        { }\n+\t{ }\n     };\n \n   template<class _Value, class _Hash, class _Pred, class _Alloc>"}, {"sha": "c0316fd64e30ecf9f7848ec9159b4c5993492d87", "filename": "libstdc++-v3/libsupc++/exception_ptr.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -24,8 +24,8 @@\n // <http://www.gnu.org/licenses/>.\n \n /** @file exception_ptr.h\n- *  This is an internal header file, included by other headers and the\n- *  implementation. You should not attempt to use it directly.\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{exception}\n  */\n \n #ifndef _EXCEPTION_PTR_H"}, {"sha": "1836b6e8335e5bbe7285ff9c9953ff5646c980fe", "filename": "libstdc++-v3/libsupc++/nested_exception.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnested_exception.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnested_exception.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnested_exception.h?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -23,8 +23,8 @@\n // <http://www.gnu.org/licenses/>.\n \n /** @file nested_exception.h\n- *  This is an internal header file, included by other headers and the\n- *  implementation. You should not attempt to use it directly.\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{exception}\n  */\n \n #ifndef _GLIBCXX_NESTED_EXCEPTION_H"}, {"sha": "6b3ae4c3a592cdc9dbbfa2a17ff4867b728a9dd3", "filename": "libstdc++-v3/scripts/run_doxygen", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fscripts%2Frun_doxygen", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Fscripts%2Frun_doxygen", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fscripts%2Frun_doxygen?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -13,7 +13,7 @@\n \n \n # We can check now that the version of doxygen is >= this variable.\n-DOXYVER=1.6.1\n+DOXYVER=1.7.2\n \n find_doxygen() {\n     local -r v_required=`echo $DOXYVER |  \\"}, {"sha": "146b9656f3dbf7f633ea23ddf35eb11151af49aa", "filename": "libstdc++-v3/testsuite/18_support/headers/cstdbool/std_c++0x_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcstdbool%2Fstd_c%2B%2B0x_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcstdbool%2Fstd_c%2B%2B0x_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcstdbool%2Fstd_c%2B%2B0x_neg.cc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -20,7 +20,7 @@\n \n #include <cstdbool>\n \n-// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 31 } \n+// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 32 } \n \n \n "}, {"sha": "afd65a36ade943c3ed8fac54b4b5d6f6c42b4982", "filename": "libstdc++-v3/testsuite/18_support/headers/cstdint/std_c++0x_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcstdint%2Fstd_c%2B%2B0x_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcstdint%2Fstd_c%2B%2B0x_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcstdint%2Fstd_c%2B%2B0x_neg.cc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -20,7 +20,7 @@\n \n #include <cstdint>\n \n-// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 31 } \n+// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 32 } \n \n \n "}, {"sha": "9698cf031917d571e86cd22e4d99a81b43f2de56", "filename": "libstdc++-v3/testsuite/19_diagnostics/headers/system_error/std_c++0x_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fheaders%2Fsystem_error%2Fstd_c%2B%2B0x_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fheaders%2Fsystem_error%2Fstd_c%2B%2B0x_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fheaders%2Fsystem_error%2Fstd_c%2B%2B0x_neg.cc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -19,7 +19,7 @@\n \n #include <system_error>\n \n-// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 31 } \n+// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 32 } \n \n \n "}, {"sha": "4fd554e350f48cea03a6b301cca7e1ba41200d57", "filename": "libstdc++-v3/testsuite/20_util/headers/type_traits/std_c++0x_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Ftype_traits%2Fstd_c%2B%2B0x_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Ftype_traits%2Fstd_c%2B%2B0x_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Ftype_traits%2Fstd_c%2B%2B0x_neg.cc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -20,7 +20,7 @@\n \n #include <type_traits>\n \n-// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 31 } \n+// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 32 } \n \n \n "}, {"sha": "fe426e0a8031e3971f20e98d935b4e7e53df318d", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1203 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1204 }\n // { dg-excess-errors \"\" }\n \n // Copyright (C) 2009, 2010 Free Software Foundation"}, {"sha": "d4cd3d71f3cc552145e760993201f1543e9f8a17", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1203 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1204 }\n // { dg-excess-errors \"\" }\n \n // Copyright (C) 2009, 2010 Free Software Foundation"}, {"sha": "ac07af20d6c60e17072f2ea408cd9f20b339d04a", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1203 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1204 }\n // { dg-excess-errors \"\" }\n \n // Copyright (C) 2009, 2010 Free Software Foundation"}, {"sha": "06016c792cecb908eb1035dcc8d4016f440b165b", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1203 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1204 }\n // { dg-excess-errors \"\" }\n \n // Copyright (C) 2009, 2010 Free Software Foundation"}, {"sha": "e9317d7ed7f9413af10e92314c3c0ade03f272f7", "filename": "libstdc++-v3/testsuite/23_containers/headers/array/std_c++0x_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Farray%2Fstd_c%2B%2B0x_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Farray%2Fstd_c%2B%2B0x_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Farray%2Fstd_c%2B%2B0x_neg.cc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -20,7 +20,7 @@\n \n #include <array>\n \n-// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 31 } \n+// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 32 } \n \n \n "}, {"sha": "0a2e073a50b304c6e935041ead90bd7bdb1ef00f", "filename": "libstdc++-v3/testsuite/23_containers/headers/tuple/std_c++0x_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Ftuple%2Fstd_c%2B%2B0x_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Ftuple%2Fstd_c%2B%2B0x_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Ftuple%2Fstd_c%2B%2B0x_neg.cc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -20,7 +20,7 @@\n \n #include <tuple>\n \n-// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 31 } \n+// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 32 } \n \n \n "}, {"sha": "0b32304ca61f55987c82556ebd30638992a0ee52", "filename": "libstdc++-v3/testsuite/23_containers/headers/unordered_map/std_c++0x_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Funordered_map%2Fstd_c%2B%2B0x_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Funordered_map%2Fstd_c%2B%2B0x_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Funordered_map%2Fstd_c%2B%2B0x_neg.cc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -20,7 +20,7 @@\n \n #include <unordered_map>\n \n-// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 31 } \n+// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 32 } \n \n \n "}, {"sha": "bc6963c80d037b2478bb802d5a3356a11d045dfe", "filename": "libstdc++-v3/testsuite/23_containers/headers/unordered_set/std_c++0x_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Funordered_set%2Fstd_c%2B%2B0x_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Funordered_set%2Fstd_c%2B%2B0x_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Funordered_set%2Fstd_c%2B%2B0x_neg.cc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -20,7 +20,7 @@\n \n #include <unordered_set>\n \n-// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 31 } \n+// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 32 } \n \n \n "}, {"sha": "29e8dac5fa4ec9b0c18bd558b35b1a90e81fffe4", "filename": "libstdc++-v3/testsuite/26_numerics/headers/ccomplex/std_c++0x_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fccomplex%2Fstd_c%2B%2B0x_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fccomplex%2Fstd_c%2B%2B0x_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fccomplex%2Fstd_c%2B%2B0x_neg.cc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -20,7 +20,7 @@\n \n #include <ccomplex>\n \n-// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 31 } \n+// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 32 } \n \n \n "}, {"sha": "3a191069207db95146a36384f9a888cd424d365c", "filename": "libstdc++-v3/testsuite/26_numerics/headers/cfenv/std_c++0x_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcfenv%2Fstd_c%2B%2B0x_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcfenv%2Fstd_c%2B%2B0x_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcfenv%2Fstd_c%2B%2B0x_neg.cc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -20,7 +20,7 @@\n \n #include <cfenv>\n \n-// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 31 } \n+// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 32 } \n \n \n "}, {"sha": "23b266e8562ac38b25b3d2320f5a20f7bd1891ca", "filename": "libstdc++-v3/testsuite/26_numerics/headers/ctgmath/std_c++0x_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fctgmath%2Fstd_c%2B%2B0x_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fctgmath%2Fstd_c%2B%2B0x_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fctgmath%2Fstd_c%2B%2B0x_neg.cc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -20,7 +20,7 @@\n \n #include <ctgmath>\n \n-// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 31 } \n+// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 32 } \n \n \n "}, {"sha": "1f83cdac69256290b9bb6f62b5639ae931637658", "filename": "libstdc++-v3/testsuite/26_numerics/headers/random/std_c++0x_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Frandom%2Fstd_c%2B%2B0x_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Frandom%2Fstd_c%2B%2B0x_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Frandom%2Fstd_c%2B%2B0x_neg.cc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -20,7 +20,7 @@\n \n #include <random>\n \n-// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 31 } \n+// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 32 } \n \n \n "}, {"sha": "21da0770b9b8cb87434e720f227c80d340c7cb34", "filename": "libstdc++-v3/testsuite/27_io/headers/cinttypes/std_c++0x_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fheaders%2Fcinttypes%2Fstd_c%2B%2B0x_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fheaders%2Fcinttypes%2Fstd_c%2B%2B0x_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fheaders%2Fcinttypes%2Fstd_c%2B%2B0x_neg.cc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -20,7 +20,7 @@\n \n #include <cinttypes>\n \n-// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 31 } \n+// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 32 } \n \n \n "}, {"sha": "21a98b8ae698bece26379d121b20be571e4a4823", "filename": "libstdc++-v3/testsuite/28_regex/headers/regex/std_c++0x_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fheaders%2Fregex%2Fstd_c%2B%2B0x_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fheaders%2Fregex%2Fstd_c%2B%2B0x_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fheaders%2Fregex%2Fstd_c%2B%2B0x_neg.cc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -20,7 +20,7 @@\n \n #include <regex>\n \n-// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 31 } \n+// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 32 } \n \n \n "}, {"sha": "be390b0f71c56374e33811662066100f4fccf6ec", "filename": "libstdc++-v3/testsuite/29_atomics/headers/atomic/std_c++0x_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fatomic%2Fstd_c%2B%2B0x_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fatomic%2Fstd_c%2B%2B0x_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fatomic%2Fstd_c%2B%2B0x_neg.cc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -20,7 +20,7 @@\n \n #include <atomic>  // { dg-excess-errors \"In file included from\" }\n \n-// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 31 } \n+// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 32 } \n \n \n "}, {"sha": "6e345243c266507f1adc058761b7c20b394cfa41", "filename": "libstdc++-v3/testsuite/30_threads/headers/condition_variable/std_c++0x_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fheaders%2Fcondition_variable%2Fstd_c%2B%2B0x_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fheaders%2Fcondition_variable%2Fstd_c%2B%2B0x_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fheaders%2Fcondition_variable%2Fstd_c%2B%2B0x_neg.cc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -20,7 +20,7 @@\n \n #include <condition_variable>\n \n-// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 31 } \n+// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 32 } \n \n \n "}, {"sha": "5dbaffdefd9a31eb3d72e1dd2a97d4f399c6cf3e", "filename": "libstdc++-v3/testsuite/30_threads/headers/future/std_c++0x_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fheaders%2Ffuture%2Fstd_c%2B%2B0x_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fheaders%2Ffuture%2Fstd_c%2B%2B0x_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fheaders%2Ffuture%2Fstd_c%2B%2B0x_neg.cc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -20,7 +20,7 @@\n \n #include <future>\n \n-// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 31 } \n+// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 32 } \n \n \n "}, {"sha": "31bf41c06a5bcd4f38a7d432d8e589b032c6ad48", "filename": "libstdc++-v3/testsuite/30_threads/headers/mutex/std_c++0x_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fheaders%2Fmutex%2Fstd_c%2B%2B0x_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fheaders%2Fmutex%2Fstd_c%2B%2B0x_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fheaders%2Fmutex%2Fstd_c%2B%2B0x_neg.cc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -20,7 +20,7 @@\n \n #include <mutex>\n \n-// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 31 } \n+// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 32 } \n \n \n "}, {"sha": "cc8a3877decde9dac28b7b745c2f0fcda9f667b4", "filename": "libstdc++-v3/testsuite/30_threads/headers/thread/std_c++0x_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fheaders%2Fthread%2Fstd_c%2B%2B0x_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f910786b9865adf3548fcbbcd569bc90ea314420/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fheaders%2Fthread%2Fstd_c%2B%2B0x_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fheaders%2Fthread%2Fstd_c%2B%2B0x_neg.cc?ref=f910786b9865adf3548fcbbcd569bc90ea314420", "patch": "@@ -22,4 +22,4 @@\n \n #include <thread>\n \n-// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 31 }\n+// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 32 }"}]}