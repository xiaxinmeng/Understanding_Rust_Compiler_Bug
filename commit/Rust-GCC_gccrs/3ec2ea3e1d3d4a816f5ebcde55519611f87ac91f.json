{"sha": "3ec2ea3e1d3d4a816f5ebcde55519611f87ac91f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2VjMmVhM2UxZDNkNGE4MTZmNWViY2RlNTU1MTk2MTFmODdhYzkxZg==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1993-09-24T19:51:49Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1993-09-24T19:51:49Z"}, "message": "reload1.c: (init_reload): use HARD_FRAME_POINTER_REGNUM instead of FRAME_POINTER_REGNUM.\n\n* reload1.c: (init_reload): use HARD_FRAME_POINTER_REGNUM instead of\nFRAME_POINTER_REGNUM.\n(reload): Only prohibit elimination of HARD_FRAME_POINTER_REGNUM, not\nFRAME_POINTER_REGNUM if frame_pointer_needed.  Never prohibit\nelimination of FRAME_POINTER_REGNUM into HARD_FRAME_POINTER_REGNUM.\nMark HARD_FRAME_POINTER_REGNUM as live at the start of a block if\nit is still needed after elimination.\n(eliminate_regs): For non-local goto's, don't delete stores into the\nhard frame pointer.\n(eliminate_regs_in_insn): adjust comment.\n(mark_not_eliminable): if frame_pointer_rtx and hard_frame_pointer_rtx\nare not the same, then frame_pointer_rtx is eliminable;\nhard_frame_pointer_rtx never is if it is set..\n(order_regs_for_reload): HARD_FRAME_POINTER_REGNUM is a bad spill reg.\n(choose_reload_regs): HARD_FRAME_POINTER_REGNUM is a bad choice.\n\nFrom-SVN: r5463", "tree": {"sha": "98d9e77465e170df282ec46c4e46336172472711", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98d9e77465e170df282ec46c4e46336172472711"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ec2ea3e1d3d4a816f5ebcde55519611f87ac91f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ec2ea3e1d3d4a816f5ebcde55519611f87ac91f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ec2ea3e1d3d4a816f5ebcde55519611f87ac91f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ec2ea3e1d3d4a816f5ebcde55519611f87ac91f/comments", "author": null, "committer": null, "parents": [{"sha": "a36d4c6259c2e8b426087892db7c9e644981ffc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a36d4c6259c2e8b426087892db7c9e644981ffc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a36d4c6259c2e8b426087892db7c9e644981ffc4"}], "stats": {"total": 46, "additions": 25, "deletions": 21}, "files": [{"sha": "36eb1250b0e5f5f2356d9557802ef43240bc39f8", "filename": "gcc/reload1.c", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ec2ea3e1d3d4a816f5ebcde55519611f87ac91f/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ec2ea3e1d3d4a816f5ebcde55519611f87ac91f/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=3ec2ea3e1d3d4a816f5ebcde55519611f87ac91f", "patch": "@@ -398,7 +398,7 @@ init_reload ()\n   for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n     {\n       tem = gen_rtx (PLUS, Pmode,\n-\t\t     gen_rtx (REG, Pmode, FRAME_POINTER_REGNUM),\n+\t\t     gen_rtx (REG, Pmode, HARD_FRAME_POINTER_REGNUM),\n \t\t     gen_rtx (REG, Pmode, i));\n       /* This way, we make sure that reg+reg is an offsettable address.  */\n       tem = plus_constant (tem, 4);\n@@ -607,7 +607,8 @@ reload (first, global, dumpfile)\n     {\n       ep->can_eliminate = ep->can_eliminate_previous\n \t= (CAN_ELIMINATE (ep->from, ep->to)\n-\t   && (ep->from != FRAME_POINTER_REGNUM || ! frame_pointer_needed));\n+\t   && (ep->from != HARD_FRAME_POINTER_REGNUM \n+\t       || ! frame_pointer_needed));\n     }\n #else\n   reg_eliminate[0].can_eliminate = reg_eliminate[0].can_eliminate_previous\n@@ -1496,7 +1497,7 @@ reload (first, global, dumpfile)\n \t since they can't have changed.  */\n \n       for (ep = reg_eliminate; ep < &reg_eliminate[NUM_ELIMINABLE_REGS]; ep++)\n-\tif ((ep->from == FRAME_POINTER_REGNUM && FRAME_POINTER_REQUIRED)\n+\tif ((ep->from == HARD_FRAME_POINTER_REGNUM && FRAME_POINTER_REQUIRED)\n #ifdef ELIMINABLE_REGS\n \t    || ! CAN_ELIMINATE (ep->from, ep->to)\n #endif\n@@ -1545,7 +1546,8 @@ reload (first, global, dumpfile)\n       frame_pointer_needed = 1;\n       for (ep = reg_eliminate; ep < &reg_eliminate[NUM_ELIMINABLE_REGS]; ep++)\n \t{\n-\t  if (ep->can_eliminate && ep->from == FRAME_POINTER_REGNUM)\n+\t  if (ep->can_eliminate && ep->from == FRAME_POINTER_REGNUM\n+\t      && ep->to != HARD_FRAME_POINTER_REGNUM)\n \t    frame_pointer_needed = 0;\n \n \t  if (! ep->can_eliminate && ep->can_eliminate_previous)\n@@ -1930,8 +1932,9 @@ reload (first, global, dumpfile)\n \n   if (! frame_pointer_needed)\n     for (i = 0; i < n_basic_blocks; i++)\n-      basic_block_live_at_start[i][FRAME_POINTER_REGNUM / REGSET_ELT_BITS]\n-\t&= ~ ((REGSET_ELT_TYPE) 1 << (FRAME_POINTER_REGNUM % REGSET_ELT_BITS));\n+      basic_block_live_at_start[i][HARD_FRAME_POINTER_REGNUM / REGSET_ELT_BITS]\n+\t&= ~ ((REGSET_ELT_TYPE) 1 << (HARD_FRAME_POINTER_REGNUM\n+\t\t\t\t      % REGSET_ELT_BITS));\n \n   /* Come here (with failure set nonzero) if we can't get enough spill regs\n      and we decide not to abort about it.  */\n@@ -2969,17 +2972,18 @@ eliminate_regs (x, mem_mode, insn)\n \t  /* See if this is setting the replacement register for an\n \t     elimination.\n \n-\t     If DEST is the frame pointer, we do nothing because we assume that\n-\t     all assignments to the frame pointer are for non-local gotos and\n-\t     are being done at a time when they are valid and do not disturb\n-\t     anything else.  Some machines want to eliminate a fake argument\n-\t     pointer with either the frame or stack pointer.  Assignments to\n-\t     the frame pointer must not prevent this elimination.  */\n+\t     If DEST is the hard frame pointer, we do nothing because we\n+\t     assume that all assignments to the frame pointer are for\n+\t     non-local gotos and are being done at a time when they are valid\n+\t     and do not disturb anything else.  Some machines want to\n+\t     eliminate a fake argument pointer (or even a fake frame pointer)\n+\t     with either the real frame or the stack pointer.  Assignments to\n+\t     the hard frame pointer must not prevent this elimination.  */\n \n \t  for (ep = reg_eliminate; ep < &reg_eliminate[NUM_ELIMINABLE_REGS];\n \t       ep++)\n \t    if (ep->to_rtx == SET_DEST (x)\n-\t\t&& SET_DEST (x) != frame_pointer_rtx)\n+\t\t&& SET_DEST (x) != hard_frame_pointer_rtx)\n \t      {\n \t\t/* If it is being incremented, adjust the offset.  Otherwise,\n \t\t   this elimination can't be done.  */\n@@ -3264,11 +3268,11 @@ eliminate_regs_in_insn (insn, replace)\n    modifies DEST in any way other than by adding a constant integer to it.\n \n    If DEST is the frame pointer, we do nothing because we assume that\n-   all assignments to the frame pointer are nonlocal gotos and are being done\n-   at a time when they are valid and do not disturb anything else.\n+   all assignments to the hard frame pointer are nonlocal gotos and are being\n+   done at a time when they are valid and do not disturb anything else.\n    Some machines want to eliminate a fake argument pointer with either the\n-   frame or stack pointer.  Assignments to the frame pointer must not prevent\n-   this elimination.\n+   frame or stack pointer.  Assignments to the hard frame pointer must not\n+   prevent this elimination.\n \n    Called via note_stores from reload before starting its passes to scan\n    the insns of the function.  */\n@@ -3286,7 +3290,7 @@ mark_not_eliminable (dest, x)\n   if (GET_CODE (dest) == SUBREG)\n     dest = SUBREG_REG (dest);\n \n-  if (dest == frame_pointer_rtx)\n+  if (dest == hard_frame_pointer_rtx)\n     return;\n \n   for (i = 0; i < NUM_ELIMINABLE_REGS; i++)\n@@ -3523,8 +3527,8 @@ order_regs_for_reload ()\n #endif\n \t}\n     }\n-  hard_reg_n_uses[FRAME_POINTER_REGNUM].uses += 2 * large + 2;\n-  SET_HARD_REG_BIT (bad_spill_regs, FRAME_POINTER_REGNUM);\n+  hard_reg_n_uses[HARD_FRAME_POINTER_REGNUM].uses += 2 * large + 2;\n+  SET_HARD_REG_BIT (bad_spill_regs, HARD_FRAME_POINTER_REGNUM);\n \n #ifdef ELIMINABLE_REGS\n   /* If registers other than the frame pointer are eliminable, mark them as\n@@ -5048,7 +5052,7 @@ choose_reload_regs (insn, avoid_return_reg)\n \n \t      /* If we found an equivalent reg, say no code need be generated\n \t\t to load it, and use it as our reload reg.  */\n-\t      if (equiv != 0 && regno != FRAME_POINTER_REGNUM)\n+\t      if (equiv != 0 && regno != HARD_FRAME_POINTER_REGNUM)\n \t\t{\n \t\t  reload_reg_rtx[r] = equiv;\n \t\t  reload_inherited[r] = 1;"}]}