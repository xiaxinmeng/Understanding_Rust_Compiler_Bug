{"sha": "e62817edaecb4c8cb5a4f3c608f0ea52276449a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTYyODE3ZWRhZWNiNGM4Y2I1YTRmM2M2MDhmMGVhNTIyNzY0NDlhMQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-04-18T12:02:40Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-04-18T12:02:40Z"}, "message": "re PR debug/90131 (wrong debug info at -O3)\n\n2019-04-18  Richard Biener  <rguenther@suse.de>\n\n\tPR debug/90131\n\t* tree-cfgcleanup.c (move_debug_stmts_from_forwarder): Split\n\tout from ...\n\t(remove_forwarder_block): ... here.\n\t(remove_forwarder_block_with_phi): Also move debug stmts here.\n\n\t* gcc.dg/guality/pr90131.c: New testcase.\n\nFrom-SVN: r270441", "tree": {"sha": "aabc91f71ed2896588b63fa4af0e933736e90235", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aabc91f71ed2896588b63fa4af0e933736e90235"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e62817edaecb4c8cb5a4f3c608f0ea52276449a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e62817edaecb4c8cb5a4f3c608f0ea52276449a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e62817edaecb4c8cb5a4f3c608f0ea52276449a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e62817edaecb4c8cb5a4f3c608f0ea52276449a1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9574af76fa7dc94934c2a8918eb05cac01570e48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9574af76fa7dc94934c2a8918eb05cac01570e48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9574af76fa7dc94934c2a8918eb05cac01570e48"}], "stats": {"total": 129, "additions": 92, "deletions": 37}, "files": [{"sha": "e589a9e751752c5c60c4df40f7533d6596f57ba3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e62817edaecb4c8cb5a4f3c608f0ea52276449a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e62817edaecb4c8cb5a4f3c608f0ea52276449a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e62817edaecb4c8cb5a4f3c608f0ea52276449a1", "patch": "@@ -1,3 +1,11 @@\n+2019-04-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR debug/90131\n+\t* tree-cfgcleanup.c (move_debug_stmts_from_forwarder): Split\n+\tout from ...\n+\t(remove_forwarder_block): ... here.\n+\t(remove_forwarder_block_with_phi): Also move debug stmts here.\n+\n 2019-04-18  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR translation/79183"}, {"sha": "ee03b5e9b55f39cf979a791e881e0890ef16f691", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e62817edaecb4c8cb5a4f3c608f0ea52276449a1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e62817edaecb4c8cb5a4f3c608f0ea52276449a1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e62817edaecb4c8cb5a4f3c608f0ea52276449a1", "patch": "@@ -1,3 +1,8 @@\n+2019-04-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR debug/90131\n+\t* gcc.dg/guality/pr90131.c: New testcase.\n+\n 2019-04-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/89325"}, {"sha": "2b89aaae24f4522b5e346d0e2a8a94d329de1791", "filename": "gcc/testsuite/gcc.dg/guality/pr90131.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e62817edaecb4c8cb5a4f3c608f0ea52276449a1/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr90131.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e62817edaecb4c8cb5a4f3c608f0ea52276449a1/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr90131.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr90131.c?ref=e62817edaecb4c8cb5a4f3c608f0ea52276449a1", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run } */\n+/* { dg-options \"-g\" } */\n+\n+void __attribute__((noinline))\n+optimize_me_not ()\n+{\n+  __asm__ volatile (\"\" : : : \"memory\");\n+}\n+volatile long a;\n+int b[9][1];\n+static short c[2][1] = {3};\n+int main()\n+{\n+  int i, d, e;\n+  i = 0;\n+  for (; i < 9; i++)\n+    a = b[i][0];\n+  i = 0;\n+  for (; i < 2; i++)\n+    {\n+      d = 0;\n+      for (; d < 1; d++)\n+\t{\n+\t  e = 0;\n+\t  for (; e < 1; e++)\n+\t    a = c[i][e];\n+\t  /* i may very well be optimized out, so we cannot test for i == 0.\n+\t     Instead test i + 1 which will make the test UNSUPPORTED if i\n+\t     is optimized out.  Since the test previously had wrong debug\n+\t     with i == 9 this is acceptable.  */\n+\t  optimize_me_not(); /* { dg-final { gdb-test . \"i + 1\" \"1\" } } */\n+\t}\n+    }\n+  return 0;\n+}"}, {"sha": "0a79a6a658fd33f3bf3999fd2c2668bf0c0ab96d", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 44, "deletions": 37, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e62817edaecb4c8cb5a4f3c608f0ea52276449a1/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e62817edaecb4c8cb5a4f3c608f0ea52276449a1/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=e62817edaecb4c8cb5a4f3c608f0ea52276449a1", "patch": "@@ -444,6 +444,45 @@ phi_alternatives_equal (basic_block dest, edge e1, edge e2)\n   return true;\n }\n \n+/* Move debug stmts from the forwarder block SRC to DEST.  */\n+\n+static void\n+move_debug_stmts_from_forwarder (basic_block src, basic_block dest)\n+{\n+  if (!MAY_HAVE_DEBUG_STMTS)\n+    return;\n+\n+  bool can_move_debug_stmts = single_pred_p (dest);\n+  gimple_stmt_iterator gsi_to = gsi_after_labels (dest);\n+  for (gimple_stmt_iterator gsi = gsi_after_labels (src); !gsi_end_p (gsi);)\n+    {\n+      gimple *debug = gsi_stmt (gsi);\n+      gcc_assert (is_gimple_debug (debug));\n+      /* Move debug binds anyway, but not anything else like begin-stmt\n+\t markers unless they are always valid at the destination.  */\n+      if (can_move_debug_stmts\n+\t  || gimple_debug_bind_p (debug))\n+\t{\n+\t  gsi_move_before (&gsi, &gsi_to);\n+\t  /* Reset debug-binds that are not always valid at the destination.\n+\t     Simply dropping them can cause earlier values to become live,\n+\t     generating wrong debug information.\n+\t     ???  There are several things we could improve here.  For\n+\t     one we might be able to move stmts to the predecessor.\n+\t     For anther, if the debug stmt is immediately followed by a\n+\t     (debug) definition in the destination (on a post-dominated path?)\n+\t     we can elide it without any bad effects.  */\n+\t  if (!can_move_debug_stmts)\n+\t    {\n+\t      gimple_debug_bind_reset_value (debug);\n+\t      update_stmt (debug);\n+\t    }\n+\t}\n+      else\n+\tgsi_next (&gsi);\n+    }\n+}\n+\n /* Removes forwarder block BB.  Returns false if this failed.  */\n \n static bool\n@@ -454,7 +493,6 @@ remove_forwarder_block (basic_block bb)\n   gimple *stmt;\n   edge_iterator ei;\n   gimple_stmt_iterator gsi, gsi_to;\n-  bool can_move_debug_stmts;\n \n   /* We check for infinite loops already in tree_forwarder_block_p.\n      However it may happen that the infinite loop is created\n@@ -503,8 +541,6 @@ remove_forwarder_block (basic_block bb)\n \t}\n     }\n \n-  can_move_debug_stmts = MAY_HAVE_DEBUG_STMTS && single_pred_p (dest);\n-\n   basic_block pred = NULL;\n   if (single_pred_p (bb))\n     pred = single_pred (bb);\n@@ -566,40 +602,7 @@ remove_forwarder_block (basic_block bb)\n \n   /* Move debug statements.  Reset them if the destination does not\n      have a single predecessor.  */\n-  if (!gsi_end_p (gsi))\n-    {\n-      gsi_to = gsi_after_labels (dest);\n-      do\n-\t{\n-\t  gimple *debug = gsi_stmt (gsi);\n-\t  gcc_assert (is_gimple_debug (debug));\n-\t  /* Move debug binds anyway, but not anything else\n-\t     like begin-stmt markers unless they are always\n-\t     valid at the destination.  */\n-\t  if (can_move_debug_stmts\n-\t      || gimple_debug_bind_p (debug))\n-\t    {\n-\t      gsi_move_before (&gsi, &gsi_to);\n-\t      /* Reset debug-binds that are not always valid at the\n-\t\t destination.  Simply dropping them can cause earlier\n-\t\t values to become live, generating wrong debug information.\n-\t\t ???  There are several things we could improve here.  For\n-\t\t one we might be able to move stmts to the predecessor.\n-\t\t For anther, if the debug stmt is immediately followed\n-\t\t by a (debug) definition in the destination (on a\n-\t\t post-dominated path?) we can elide it without any bad\n-\t\t effects.  */\n-\t      if (!can_move_debug_stmts)\n-\t\t{\n-\t\t  gimple_debug_bind_reset_value (debug);\n-\t\t  update_stmt (debug);\n-\t\t}\n-\t    }\n-\t  else\n-\t    gsi_next (&gsi);\n-\t}\n-      while (!gsi_end_p (gsi));\n-    }\n+  move_debug_stmts_from_forwarder (bb, dest);\n \n   bitmap_set_bit (cfgcleanup_altered_bbs, dest->index);\n \n@@ -1282,6 +1285,10 @@ remove_forwarder_block_with_phi (basic_block bb)\n       redirect_edge_var_map_clear (e);\n     }\n \n+  /* Move debug statements.  Reset them if the destination does not\n+     have a single predecessor.  */\n+  move_debug_stmts_from_forwarder (bb, dest);\n+\n   /* Update the dominators.  */\n   dombb = get_immediate_dominator (CDI_DOMINATORS, bb);\n   domdest = get_immediate_dominator (CDI_DOMINATORS, dest);"}]}