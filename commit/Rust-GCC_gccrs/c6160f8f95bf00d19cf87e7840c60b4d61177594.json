{"sha": "c6160f8f95bf00d19cf87e7840c60b4d61177594", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzYxNjBmOGY5NWJmMDBkMTljZjg3ZTc4NDBjNjBiNGQ2MTE3NzU5NA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-07-24T12:36:55Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-07-24T12:36:55Z"}, "message": "cp-tree.h: Add prototype for set_identifier_local_value.\n\n\t* cp-tree.h: Add prototype for set_identifier_local_value.\n\t* decl.c (set_identifier_local_value_with_scope): Make static,\n\tprototype.\n\t* search.c (covariant_return_p): Likewise.\n\t* except.c (build_terminate_handler, alloc_eh_object): Likewise.\n\t* call.c (build_method_call): Only pull out the type of a destructor\n\tif it's a template type parm.\n\t* decl.c (lookup_name_real): Never return the from_obj value.\n\nFrom-SVN: r21361", "tree": {"sha": "b4113c71ed83166b25cce0aa63bb3e0440a41d7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4113c71ed83166b25cce0aa63bb3e0440a41d7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6160f8f95bf00d19cf87e7840c60b4d61177594", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6160f8f95bf00d19cf87e7840c60b4d61177594", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6160f8f95bf00d19cf87e7840c60b4d61177594", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6160f8f95bf00d19cf87e7840c60b4d61177594/comments", "author": null, "committer": null, "parents": [{"sha": "0d1be5835ffeeb5a0320569a02f0dc8a22212052", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d1be5835ffeeb5a0320569a02f0dc8a22212052", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d1be5835ffeeb5a0320569a02f0dc8a22212052"}], "stats": {"total": 33, "additions": 27, "deletions": 6}, "files": [{"sha": "ebf049ea1e06b6de1bbc70faf69c6a9fe69f7c48", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6160f8f95bf00d19cf87e7840c60b4d61177594/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6160f8f95bf00d19cf87e7840c60b4d61177594/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c6160f8f95bf00d19cf87e7840c60b4d61177594", "patch": "@@ -1,3 +1,15 @@\n+1998-07-24  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* cp-tree.h: Add prototype for set_identifier_local_value.\n+\t* decl.c (set_identifier_local_value_with_scope): Make static,\n+\tprototype.\n+\t* search.c (covariant_return_p): Likewise.\n+\t* except.c (build_terminate_handler, alloc_eh_object): Likewise.\n+\n+\t* call.c (build_method_call): Only pull out the type of a destructor\n+\tif it's a template type parm.\n+\t* decl.c (lookup_name_real): Never return the from_obj value.\n+\n 1998-07-23  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* except.c (process_start_catch_block_old): Call start_decl_1 for"}, {"sha": "936dcb617a6823e779fb1f62579edce72ea1c8d8", "filename": "gcc/cp/call.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6160f8f95bf00d19cf87e7840c60b4d61177594/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6160f8f95bf00d19cf87e7840c60b4d61177594/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=c6160f8f95bf00d19cf87e7840c60b4d61177594", "patch": "@@ -626,11 +626,13 @@ build_method_call (instance, name, parms, basetype_path, flags)\n \n   if (processing_template_decl)\n     {\n+      /* We need to process template parm names here so that tsubst catches\n+\t them properly.  Other type names can wait.  */\n       if (TREE_CODE (name) == BIT_NOT_EXPR\n \t  && TREE_CODE (TREE_OPERAND (name, 0)) == IDENTIFIER_NODE)\n \t{\n \t  tree type = get_aggr_from_typedef (TREE_OPERAND (name, 0), 0);\n-\t  if (type)\n+\t  if (type && TREE_CODE (type) == TEMPLATE_TYPE_PARM)\n \t    name = build_min_nt (BIT_NOT_EXPR, type);\n \t}\n "}, {"sha": "7572921cb5fbd587a68e61369fe04daa31bd1891", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6160f8f95bf00d19cf87e7840c60b4d61177594/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6160f8f95bf00d19cf87e7840c60b4d61177594/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=c6160f8f95bf00d19cf87e7840c60b4d61177594", "patch": "@@ -2358,6 +2358,7 @@ extern void push_to_top_level\t\t\tPROTO((void));\n extern void pop_from_top_level\t\t\tPROTO((void));\n extern tree identifier_type_value\t\tPROTO((tree));\n extern void set_identifier_type_value\t\tPROTO((tree, tree));\n+extern void set_identifier_local_value\t\tPROTO((tree, tree));\n extern void pop_everything\t\t\tPROTO((void));\n extern void pushtag\t\t\t\tPROTO((tree, tree, int));\n extern tree make_anon_name\t\t\tPROTO((void));"}, {"sha": "f25c7008d63b7b3711c6a52e272c75f785821f16", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6160f8f95bf00d19cf87e7840c60b4d61177594/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6160f8f95bf00d19cf87e7840c60b4d61177594/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c6160f8f95bf00d19cf87e7840c60b4d61177594", "patch": "@@ -168,6 +168,8 @@ static tree lookup_tag PROTO((enum tree_code, tree,\n \t\t\t      struct binding_level *, int));\n static void set_identifier_type_value_with_scope\n \tPROTO((tree, tree, struct binding_level *));\n+static void set_identifier_local_value_with_scope\n+\tPROTO((tree, tree, struct binding_level *));\n static void record_builtin_type PROTO((enum rid, char *, tree));\n static void record_unknown_type PROTO((tree, char *));\n static int member_function_or_else PROTO((tree, tree, char *));\n@@ -2159,7 +2161,7 @@ set_identifier_type_value (id, type)\n   set_identifier_type_value_with_scope (id, type, inner_binding_level);\n }\n \n-void\n+static void\n set_identifier_local_value_with_scope (id, val, b)\n      tree id, val;\n      struct binding_level *b;\n@@ -5083,7 +5085,8 @@ lookup_name_real (name, prefer_type, nonclass, namespaces_only)\n \t\t\t  TREE_TYPE (val));\n \t    }\n \n-\t  val = from_obj;\n+\t  /* We don't change val to from_obj here because that breaks\n+\t     implicit typename for destructor calls.  */\n \t}\n \n       if ((TREE_CODE (val) == TEMPLATE_DECL && looking_for_template)"}, {"sha": "d294497e4c1fb83ca979f14537e42a4ae5102cea", "filename": "gcc/cp/except.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6160f8f95bf00d19cf87e7840c60b4d61177594/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6160f8f95bf00d19cf87e7840c60b4d61177594/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=c6160f8f95bf00d19cf87e7840c60b4d61177594", "patch": "@@ -59,6 +59,8 @@ static tree do_pop_exception PROTO((void));\n static void process_start_catch_block PROTO((tree, tree));\n static void process_start_catch_block_old PROTO((tree, tree));\n static tree build_eh_type_type_ref PROTO((tree));\n+static tree build_terminate_handler PROTO((void));\n+static tree alloc_eh_object PROTO((tree));\n \n #if 0\n /* This is the startup, and finish stuff per exception table.  */\n@@ -556,7 +558,7 @@ push_eh_cleanup ()\n /* Build up a call to terminate on the function obstack, for use as an\n    exception handler.  */\n \n-tree\n+static tree\n build_terminate_handler ()\n {\n   int yes = suspend_momentary ();\n@@ -1040,7 +1042,7 @@ end_anon_func ()\n \n /* Return a pointer to a buffer for an exception object of type TYPE.  */\n \n-tree\n+static tree\n alloc_eh_object (type)\n      tree type;\n {"}, {"sha": "bde0a293079e632abf2896a6442cd1762c09648a", "filename": "gcc/cp/search.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6160f8f95bf00d19cf87e7840c60b4d61177594/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6160f8f95bf00d19cf87e7840c60b4d61177594/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=c6160f8f95bf00d19cf87e7840c60b4d61177594", "patch": "@@ -131,6 +131,7 @@ static void add_conversions PROTO((tree));\n static tree get_virtuals_named_this PROTO((tree));\n static tree get_virtual_destructor PROTO((tree, int));\n static int tree_has_any_destructor_p PROTO((tree, int));\n+static int covariant_return_p PROTO((tree, tree));\n static struct search_level *push_search_level\n \tPROTO((struct stack_level *, struct obstack *));\n static struct search_level *pop_search_level\n@@ -2163,7 +2164,7 @@ tree_has_any_destructor_p (binfo, i)\n    Returns 1 if trivial covariance, 2 if non-trivial (requiring runtime\n    adjustment), or -1 if pedantically invalid covariance.  */\n \n-int\n+static int\n covariant_return_p (brettype, drettype)\n      tree brettype, drettype;\n {"}]}