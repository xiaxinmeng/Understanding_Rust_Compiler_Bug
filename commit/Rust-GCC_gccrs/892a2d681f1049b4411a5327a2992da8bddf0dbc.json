{"sha": "892a2d681f1049b4411a5327a2992da8bddf0dbc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODkyYTJkNjgxZjEwNDliNDQxMWE1MzI3YTI5OTJkYThiZGRmMGRiYw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2001-10-31T14:32:30Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2001-10-31T14:32:30Z"}, "message": "att.h: Fix comment formatting.\n\n\t* config/i386/att.h: Fix comment formatting.\n\t* config/i386/beos-elf.h: Likewise.\n\t* config/i386/bsd.h: Likewise.\n\t* config/i386/bsd386.h: Likewise.\n\t* config/i386/crtdll.h: Likewise.\n\t* config/i386/cygwin.asm: Likewise.\n\t* config/i386/cygwin.h: Likewise.\n\t* config/i386/djgpp.h: Likewise.\n\t* config/i386/freebsd-aout.h: Likewise.\n\t* config/i386/freebsd.h: Likewise.\n\t* config/i386/gas.h: Likewise.\n\t* config/i386/i386-interix.h: Likewise.\n\t* config/i386/i386-protos.h: Likewise.\n\t* config/i386/i386.c: Likewise.\n\t* config/i386/i386.h: Likewise.\n\t* config/i386/i386.md: Likewise.\n\t* config/i386/i386elf.h: Likewise.\n\t* config/i386/interix.c: Likewise.\n\t* config/i386/isc.h: Likewise.\n\t* config/i386/isccoff.h: Likewise.\n\t* config/i386/iscdbx.h: Likewise.\n\t* config/i386/linux.h: Likewise.\n\t* config/i386/lynx.h: Likewise.\n\t* config/i386/mingw32.h: Likewise.\n\t* config/i386/netbsd-elf.h: Likewise.\n\t* config/i386/next.h: Likewise.\n\t* config/i386/osf1elf.h: Likewise.\n\t* config/i386/osfrose.h: Likewise.\n\t* config/i386/sco5.h: Likewise.\n\t* config/i386/seq-gas.h: Likewise.\n\t* config/i386/seq-sysv3.h: Likewise.\n\t* config/i386/sequent.h: Likewise.\n\t* config/i386/sol2.h: Likewise.\n\t* config/i386/sun386.h: Likewise.\n\t* config/i386/uwin.asm: Likewise.\n\t* config/i386/uwin.h: Likewise.\n\t* config/i386/vxi386.h: Likewise.\n\t* config/i386/win32.h: Likewise.\n\t* config/i386/winnt.c: Likewise.\n\t* config/i386/xm-cygwin.h: Likewise.\n\t* config/i386/xm-mingw32.h: Likewise.\n\nFrom-SVN: r46677", "tree": {"sha": "3d9c41512783a90c7c913933fd5b39dfe79f9de8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d9c41512783a90c7c913933fd5b39dfe79f9de8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/892a2d681f1049b4411a5327a2992da8bddf0dbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/892a2d681f1049b4411a5327a2992da8bddf0dbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/892a2d681f1049b4411a5327a2992da8bddf0dbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/892a2d681f1049b4411a5327a2992da8bddf0dbc/comments", "author": null, "committer": null, "parents": [{"sha": "5519a4f9b04a770177893eb159102abe37483a70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5519a4f9b04a770177893eb159102abe37483a70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5519a4f9b04a770177893eb159102abe37483a70"}], "stats": {"total": 298, "additions": 171, "deletions": 127}, "files": [{"sha": "7a617dfe48dc91896182bbeda6ddbbade920ab9f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=892a2d681f1049b4411a5327a2992da8bddf0dbc", "patch": "@@ -1,3 +1,47 @@\n+2001-10-31  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* config/i386/att.h: Fix comment formatting.\n+\t* config/i386/beos-elf.h: Likewise.\n+\t* config/i386/bsd.h: Likewise.\n+\t* config/i386/bsd386.h: Likewise.\n+\t* config/i386/crtdll.h: Likewise.\n+\t* config/i386/cygwin.asm: Likewise.\n+\t* config/i386/cygwin.h: Likewise.\n+\t* config/i386/djgpp.h: Likewise.\n+\t* config/i386/freebsd-aout.h: Likewise.\n+\t* config/i386/freebsd.h: Likewise.\n+\t* config/i386/gas.h: Likewise.\n+\t* config/i386/i386-interix.h: Likewise.\n+\t* config/i386/i386-protos.h: Likewise.\n+\t* config/i386/i386.c: Likewise.\n+\t* config/i386/i386.h: Likewise.\n+\t* config/i386/i386.md: Likewise.\n+\t* config/i386/i386elf.h: Likewise.\n+\t* config/i386/interix.c: Likewise.\n+\t* config/i386/isc.h: Likewise.\n+\t* config/i386/isccoff.h: Likewise.\n+\t* config/i386/iscdbx.h: Likewise.\n+\t* config/i386/linux.h: Likewise.\n+\t* config/i386/lynx.h: Likewise.\n+\t* config/i386/mingw32.h: Likewise.\n+\t* config/i386/netbsd-elf.h: Likewise.\n+\t* config/i386/next.h: Likewise.\n+\t* config/i386/osf1elf.h: Likewise.\n+\t* config/i386/osfrose.h: Likewise.\n+\t* config/i386/sco5.h: Likewise.\n+\t* config/i386/seq-gas.h: Likewise.\n+\t* config/i386/seq-sysv3.h: Likewise.\n+\t* config/i386/sequent.h: Likewise.\n+\t* config/i386/sol2.h: Likewise.\n+\t* config/i386/sun386.h: Likewise.\n+\t* config/i386/uwin.asm: Likewise.\n+\t* config/i386/uwin.h: Likewise.\n+\t* config/i386/vxi386.h: Likewise.\n+\t* config/i386/win32.h: Likewise.\n+\t* config/i386/winnt.c: Likewise.\n+\t* config/i386/xm-cygwin.h: Likewise.\n+\t* config/i386/xm-mingw32.h: Likewise.\n+\n 2001-10-31  Kazu Hirata  <kazu@hxi.com>\n \n \t* builtins.def: Fix comment typos."}, {"sha": "a48226e58ee890d4803d6db0e1f4638ee42e5c31", "filename": "gcc/config/i386/att.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fatt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fatt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fatt.h?ref=892a2d681f1049b4411a5327a2992da8bddf0dbc", "patch": "@@ -100,7 +100,7 @@ do\t\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_INTERNAL_LABEL(FILE,PREFIX,NUM)\t\\\n   fprintf (FILE, \"%s%s%d:\\n\", LOCAL_LABEL_PREFIX, PREFIX, NUM)\n \n-/* The prefix to add to user-visible assembler symbols. */\n+/* The prefix to add to user-visible assembler symbols.  */\n \n #undef USER_LABEL_PREFIX\n #define USER_LABEL_PREFIX \"\""}, {"sha": "519c666370e23d3e833b174808fd923298a29ab3", "filename": "gcc/config/i386/beos-elf.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fbeos-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fbeos-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fbeos-elf.h?ref=892a2d681f1049b4411a5327a2992da8bddf0dbc", "patch": "@@ -84,7 +84,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* BeOS uses lots of multichars, so don't warn about them unless the\n    user explicitly asks for the warnings with -Wmultichar.  Note that\n-   CC1_SPEC is used for both cc1 and cc1plus. */\n+   CC1_SPEC is used for both cc1 and cc1plus.  */\n \n #undef CC1_SPEC\n #define CC1_SPEC \"%{!no-fpic:%{!fPIC:-fpic}} %{!Wmultichar: -Wno-multichar} %(cc1_cpu) %{profile:-p}\"\n@@ -95,9 +95,9 @@ Boston, MA 02111-1307, USA.  */\n /* Provide a LINK_SPEC appropriate for BeOS.  Here we provide support\n    for the special GCC options -static and -shared, which allow us to\n    link things in one of these three modes by applying the appropriate\n-   combinations of options at link-time. */\n+   combinations of options at link-time.  */\n \n-/* If ELF is the default format, we should not use /lib/elf. */\n+/* If ELF is the default format, we should not use /lib/elf.  */\n \n #undef\tLINK_SPEC\n #define LINK_SPEC \"%{!o*:-o %b} -m elf_i386_be -shared -Bsymbolic %{nostart:-e 0}\""}, {"sha": "cba2dde1d3569a4cb611c0144f66f09926f23cf7", "filename": "gcc/config/i386/bsd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fbsd.h?ref=892a2d681f1049b4411a5327a2992da8bddf0dbc", "patch": "@@ -113,7 +113,7 @@ Boston, MA 02111-1307, USA.  */\n   fprintf (FILE, \"%s%d:\\n\", PREFIX, NUM)\n #endif\n \n-/* The prefix to add to user-visible assembler symbols. */\n+/* The prefix to add to user-visible assembler symbols.  */\n \n #ifdef NO_UNDERSCORES\n #define USER_LABEL_PREFIX \"\""}, {"sha": "fb24327523cabd6037b96a7be98f5a291711204f", "filename": "gcc/config/i386/bsd386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fbsd386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fbsd386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fbsd386.h?ref=892a2d681f1049b4411a5327a2992da8bddf0dbc", "patch": "@@ -1,7 +1,7 @@\n /* Configuration for an i386 running BSDI's BSD/OS (formerly known as BSD/386)\n    as the target machine.  */\n \n-/* We exist mostly to add -Dbsdi and such to the predefines. */\n+/* We exist mostly to add -Dbsdi and such to the predefines.  */\n \n #undef CPP_PREDEFINES\n #define CPP_PREDEFINES \"-Dunix -Dbsdi -D____386BSD____ -D__386BSD__\\"}, {"sha": "f3eae8471a71bb4b77076b6a96253400c3404442", "filename": "gcc/config/i386/crtdll.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fcrtdll.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fcrtdll.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcrtdll.h?ref=892a2d681f1049b4411a5327a2992da8bddf0dbc", "patch": "@@ -18,7 +18,7 @@ GNU General Public License for more details.\n You should have received a copy of the GNU General Public License\n along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA. */\n+Boston, MA 02111-1307, USA.  */\n \n #undef CPP_PREDEFINES\n #define CPP_PREDEFINES \"-D_WIN32 -DWIN32 \\"}, {"sha": "a27af31f599c0ae9e1810106b049259991e4d2fe", "filename": "gcc/config/i386/cygwin.asm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fcygwin.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fcygwin.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin.asm?ref=892a2d681f1049b4411a5327a2992da8bddf0dbc", "patch": "@@ -1,4 +1,4 @@\n-/* stuff needed for libgcc on win32. */\n+/* stuff needed for libgcc on win32.  */\n \n #ifdef L_chkstk\n "}, {"sha": "faa5842b9d1ebcc6097dd091696a0968c670acd6", "filename": "gcc/config/i386/cygwin.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fcygwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fcygwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin.h?ref=892a2d681f1049b4411a5327a2992da8bddf0dbc", "patch": "@@ -18,7 +18,7 @@ GNU General Public License for more details.\n You should have received a copy of the GNU General Public License\n along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA. */\n+Boston, MA 02111-1307, USA.  */\n \n #define YES_UNDERSCORES\n \n@@ -32,7 +32,7 @@ Boston, MA 02111-1307, USA. */\n #include \"i386/gas.h\"\n #include \"dbxcoff.h\"\n \n-/* Augment TARGET_SWITCHES with the cygwin/no-cygwin options. */\n+/* Augment TARGET_SWITCHES with the cygwin/no-cygwin options.  */\n #define MASK_WIN32 0x40000000 /* Use -lming32 interface */\n #define MASK_CYGWIN  0x20000000 /* Use -lcygwin interface */\n #define MASK_WINDOWS 0x10000000 /* Use windows interface */\n@@ -128,7 +128,7 @@ Boston, MA 02111-1307, USA. */\n /* Normally, -lgcc is not needed since everything in it is in the DLL, but we\n    want to allow things to be added to it when installing new versions of\n    GCC without making a new CYGWIN.DLL, so we leave it.  Profiling is handled\n-   by calling the init function from the prologue. */\n+   by calling the init function from the prologue.  */\n \n #undef LIBGCC_SPEC\n #define LIBGCC_SPEC \"%{mno-cygwin: %{mthreads:-lmingwthrd} -lmingw32} -lgcc %{mno-cygwin:-lmoldname -lmsvcrt}\"\n@@ -245,7 +245,7 @@ switch_to_section (section, decl) \t\t\t\t\\\n }\n \n /* Don't allow flag_pic to propagate since gas may produce invalid code\n-   otherwise. */\n+   otherwise.  */\n \n #undef  SUBTARGET_OVERRIDE_OPTIONS\n #define SUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\t\\\n@@ -341,7 +341,7 @@ do {\t\t\t\t\t\t\t\\\n \n \f\n /* Emit code to check the stack when allocating more that 4000\n-   bytes in one go. */\n+   bytes in one go.  */\n \n #define CHECK_STACK_LIMIT 4000\n \n@@ -406,7 +406,7 @@ extern void i386_pe_unique_section PARAMS ((TREE, int));\n #define ASM_OUTPUT_EXTERNAL_LIBCALL(FILE, FUN) \\\n   i386_pe_declare_function_type (FILE, XSTR (FUN, 0), 1)\n \n-/* This says out to put a global symbol in the BSS section. */\n+/* This says out to put a global symbol in the BSS section.  */\n #undef ASM_OUTPUT_ALIGNED_BSS\n #define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN) \\\n   asm_output_aligned_bss ((FILE), (DECL), (NAME), (SIZE), (ALIGN))\n@@ -419,7 +419,7 @@ extern void i386_pe_unique_section PARAMS ((TREE, int));\n #undef ASM_COMMENT_START\n #define ASM_COMMENT_START \" #\"\n \n-/* Don't assume anything about the header files. */\n+/* Don't assume anything about the header files.  */\n #define NO_IMPLICIT_EXTERN_C\n \n #define SUBTARGET_PROLOGUE\t\t\t\t\t\t\\"}, {"sha": "b17346a249e1dd15bc18236b062981478e6d95f5", "filename": "gcc/config/i386/djgpp.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdjgpp.h?ref=892a2d681f1049b4411a5327a2992da8bddf0dbc", "patch": "@@ -23,7 +23,7 @@ Boston, MA 02111-1307, USA.  */\n /* Support generation of DWARF2 debugging info.  */\n #define DWARF2_DEBUGGING_INFO\n \n-/* Don't assume anything about the header files. */\n+/* Don't assume anything about the header files.  */\n #define NO_IMPLICIT_EXTERN_C\n \n #define HANDLE_SYSV_PRAGMA\n@@ -86,7 +86,7 @@ Boston, MA 02111-1307, USA.  */\n #undef STANDARD_INCLUDE_DIR\n #define STANDARD_INCLUDE_DIR \"/dev/env/DJDIR/include/\"\n \n-/* Search for as.exe and ld.exe in DJGPP's binary directory. */ \n+/* Search for as.exe and ld.exe in DJGPP's binary directory.  */ \n #undef MD_EXEC_PREFIX\n #define MD_EXEC_PREFIX \"/dev/env/DJDIR/bin/\"\n "}, {"sha": "87919a06c9964f30db52e399386973958b194686", "filename": "gcc/config/i386/freebsd-aout.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Ffreebsd-aout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Ffreebsd-aout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ffreebsd-aout.h?ref=892a2d681f1049b4411a5327a2992da8bddf0dbc", "patch": "@@ -24,7 +24,7 @@ Boston, MA 02111-1307, USA.  */\n /* This is tested by i386gas.h.  */\n #define YES_UNDERSCORES\n \n-/* Don't assume anything about the header files. */\n+/* Don't assume anything about the header files.  */\n #define NO_IMPLICIT_EXTERN_C\n \n #include \"i386/gstabs.h\"\n@@ -81,7 +81,7 @@ Boston, MA 02111-1307, USA.  */\n #define DEFAULT_PCC_STRUCT_RETURN 0\n \n /* Ensure we the configuration knows our system correctly so we can link with\n-   libraries compiled with the native cc. */\n+   libraries compiled with the native cc.  */\n #undef NO_DOLLAR_IN_LABEL\n \f\n /* i386 freebsd still uses old binutils that don't insert nops by default"}, {"sha": "142e6f2e86bd70cd69fd6f4f0d6dd43fca46c8f3", "filename": "gcc/config/i386/freebsd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ffreebsd.h?ref=892a2d681f1049b4411a5327a2992da8bddf0dbc", "patch": "@@ -70,7 +70,7 @@ Boston, MA 02111-1307, USA.  */\n /* Provide a STARTFILE_SPEC appropriate for FreeBSD.  Here we add\n    the magical crtbegin.o file (see crtstuff.c) which provides part \n \tof the support for getting C++ file-scope static object constructed \n-\tbefore entering `main'. */\n+\tbefore entering `main'.  */\n    \n #undef\tSTARTFILE_SPEC\n #define STARTFILE_SPEC \\"}, {"sha": "19b28596579fa2ba8e1288994745ec013090c19e", "filename": "gcc/config/i386/gas.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fgas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fgas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgas.h?ref=892a2d681f1049b4411a5327a2992da8bddf0dbc", "patch": "@@ -19,7 +19,7 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n /* Note that i386/seq-gas.h is a GAS configuration that does not use this\n-   file. */\n+   file.  */\n \n #include \"i386/i386.h\"\n \n@@ -131,12 +131,12 @@ Boston, MA 02111-1307, USA.  */\n    count is in %cl.  Some assemblers require %cl as an argument;\n    some don't.\n \n-   GAS requires the %cl argument, so override i386/unix.h. */\n+   GAS requires the %cl argument, so override i386/unix.h.  */\n \n #undef SHIFT_DOUBLE_OMITS_COUNT\n #define SHIFT_DOUBLE_OMITS_COUNT 0\n \n-/* Print opcodes the way that GAS expects them. */\n+/* Print opcodes the way that GAS expects them.  */\n #define GAS_MNEMONICS 1\n \n #ifdef NO_UNDERSCORES /* If user-symbols don't have underscores,"}, {"sha": "29f5a2241dcd00854a62cf6de43282b4a3a6c3f1", "filename": "gcc/config/i386/i386-interix.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-interix.h?ref=892a2d681f1049b4411a5327a2992da8bddf0dbc", "patch": "@@ -28,7 +28,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* YES_UNDERSCORES must preceed gas.h */\n #include <i386/gas.h>\n-/* The rest must follow. */\n+/* The rest must follow.  */\n \n #define DBX_DEBUGGING_INFO\n #define SDB_DEBUGGING_INFO\n@@ -90,7 +90,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* The global __fltused is necessary to cause the printf/scanf routines\n    for outputting/inputting floating point numbers to be loaded.  Since this\n-   is kind of hard to detect, we just do it all the time. */\n+   is kind of hard to detect, we just do it all the time.  */\n \n #ifdef ASM_FILE_START\n #undef ASM_FILE_START\n@@ -228,7 +228,7 @@ Boston, MA 02111-1307, USA.  */\n   while (0)\n \n /* Emit code to check the stack when allocating more that 4000\n-   bytes in one go. */\n+   bytes in one go.  */\n \n #define CHECK_STACK_LIMIT 0x1000\n \n@@ -287,7 +287,7 @@ const_section ()\t\t\t\t\t\t\t\\\n   if ((LOG)!=0) fprintf ((FILE), \"\\t.balign %d\\n\", 1<<(LOG))\n \n /* The linker will take care of this, and having them causes problems with\n-   ld -r (specifically -rU). */\n+   ld -r (specifically -rU).  */\n #define CTOR_LISTS_DEFINED_EXTERNALLY 1\n \n #define SET_ASM_OP\t\"\\t.set\\t\"\n@@ -312,7 +312,7 @@ while (0)\n \n /* The following two flags are usually \"off\" for i386, because some non-gnu\n    tools (for the i386) don't handle them.  However, we don't have that\n-   problem, so.... */\n+   problem, so....  */\n \n /* Forward references to tags are allowed.  */\n #define SDB_ALLOW_FORWARD_REFERENCES\n@@ -348,7 +348,7 @@ while (0)\n \n    Apply stddef, handle (as yet unimplemented) pic.\n \n-   stddef renaming does NOT apply to Alpha. */\n+   stddef renaming does NOT apply to Alpha.  */\n \n char *gen_stdcall_suffix ();\n \n@@ -397,7 +397,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #if 0\t\n /* Turn this back on when the linker is updated to handle grouped\n    .data$ sections correctly. See corresponding note in i386/interix.c. \n-   MK. */\n+   MK.  */\n \n /* Define this macro if in some cases global symbols from one translation\n    unit may not be bound to undefined symbols in another translation unit\n@@ -414,9 +414,9 @@ extern void i386_pe_unique_section ();\n #define TARGET_ASM_NAMED_SECTION  default_pe_asm_named_section\n #endif /* 0 */\n \n-/* DWARF2 Unwinding doesn't work with exception handling yet. */\n+/* DWARF2 Unwinding doesn't work with exception handling yet.  */\n #define DWARF2_UNWIND_INFO 0\n \n-/* Don't assume anything about the header files. */\n+/* Don't assume anything about the header files.  */\n #define NO_IMPLICIT_EXTERN_C\n "}, {"sha": "42a8f4aaafed507774b0b6dce84693aa4d35a7e8", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=892a2d681f1049b4411a5327a2992da8bddf0dbc", "patch": "@@ -17,7 +17,7 @@ GNU General Public License for more details.\n You should have received a copy of the GNU General Public License\n along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA. */\n+Boston, MA 02111-1307, USA.  */\n \n /* Functions in i386.c */\n extern void override_options PARAMS ((void));"}, {"sha": "39a55ad3f46dad4588676eb9e5ae452cc4bae12d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=892a2d681f1049b4411a5327a2992da8bddf0dbc", "patch": "@@ -12240,7 +12240,7 @@ ix86_free_from_memory (mode)\n /* Put float CONST_DOUBLE in the constant pool instead of fp regs.\n    QImode must go into class Q_REGS.\n    Narrow ALL_REGS to GENERAL_REGS.  This supports allowing movsf and\n-   movdf to do mem-to-mem moves through integer regs. */\n+   movdf to do mem-to-mem moves through integer regs.  */\n enum reg_class\n ix86_preferred_reload_class (x, class)\n      rtx x;"}, {"sha": "fda362059bf1ccb2fb94ff23be0028bb857ab0f7", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=892a2d681f1049b4411a5327a2992da8bddf0dbc", "patch": "@@ -17,7 +17,7 @@ GNU General Public License for more details.\n You should have received a copy of the GNU General Public License\n along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA. */\n+Boston, MA 02111-1307, USA.  */\n \n /* The purpose of this file is to define the characteristics of the i386,\n    independent of assembler syntax or operating system.\n@@ -112,7 +112,7 @@ extern int target_flags;\n #define MASK_NO_FANCY_MATH_387\t0x00000040\t/* Disable sin, cos, sqrt */\n #define MASK_OMIT_LEAF_FRAME_POINTER 0x080      /* omit leaf frame pointers */\n #define MASK_STACK_PROBE\t0x00000100\t/* Enable stack probing */\n-#define MASK_NO_ALIGN_STROPS\t0x00001000\t/* Enable aligning of string ops. */\n+#define MASK_NO_ALIGN_STROPS\t0x00001000\t/* Enable aligning of string ops.  */\n #define MASK_INLINE_ALL_STROPS\t0x00002000\t/* Inline stringops in all cases */\n #define MASK_NO_PUSH_ARGS\t0x00004000\t/* Use push instructions */\n #define MASK_ACCUMULATE_OUTGOING_ARGS 0x00008000/* Accumulate outgoing args */\n@@ -163,7 +163,7 @@ extern int target_flags;\n \n /* Functions that return a floating point value may return that value\n    in the 387 FPU or in 386 integer registers.  If set, this flag causes\n-   the 387 to be used, which is compatible with most calling conventions. */\n+   the 387 to be used, which is compatible with most calling conventions.  */\n #define TARGET_FLOAT_RETURNS_IN_80387 (target_flags & MASK_FLOAT_RETURNS)\n \n /* Long double is 128bit instead of 96bit, even when only 80bits are used.\n@@ -611,7 +611,7 @@ extern int ix86_arch;\n \n /* Define if you don't want extended real, but do want to use the\n    software floating point emulator for REAL_ARITHMETIC and\n-   decimal <-> binary conversion. */\n+   decimal <-> binary conversion.  */\n /* #define REAL_ARITHMETIC */\n \n /* Define this if most significant byte of a word is the lowest numbered.  */\n@@ -662,10 +662,10 @@ extern int ix86_arch;\n #define FORCE_PREFERRED_STACK_BOUNDARY_IN_MAIN \\\n   (ix86_preferred_stack_boundary > STACK_BOUNDARY && !TARGET_64BIT)\n \n-/* Allocation boundary for the code of a function. */\n+/* Allocation boundary for the code of a function.  */\n #define FUNCTION_BOUNDARY 16\n \n-/* Alignment of field after `int : 0' in a structure. */\n+/* Alignment of field after `int : 0' in a structure.  */\n \n #define EMPTY_FIELD_BOUNDARY BITS_PER_WORD\n \n@@ -753,7 +753,7 @@ extern int ix86_arch;\n /* Standard register usage.  */\n \n /* This processor has special stack-like registers.  See reg-stack.c\n-   for details. */\n+   for details.  */\n \n #define STACK_REGS\n #define IS_STACK_MODE(mode) (mode==DFmode || mode==SFmode \\\n@@ -773,7 +773,7 @@ extern int ix86_arch;\n    Reg 16 does not correspond to any hardware register, but instead\n    appears in the RTL as an argument pointer prior to reload, and is\n    eliminated during reloading in favor of either the stack or frame\n-   pointer. */\n+   pointer.  */\n \n #define FIRST_PSEUDO_REGISTER 53\n \n@@ -847,7 +847,7 @@ extern int ix86_arch;\n \n    If the order is eax, edx, ecx, ... it produces better code for simple\n    functions, and a slightly slower compiler.  Users complained about the code\n-   generated by allocating edx first, so restore the 'natural' order of things. */\n+   generated by allocating edx first, so restore the 'natural' order of things.  */\n \n #define REG_ALLOC_ORDER \t\t\t\t\t\\\n /*ax,dx,cx,*/\t\t\t\t\t\t\t\\\n@@ -1213,7 +1213,7 @@ enum reg_class\n \n /* When defined, the compiler allows registers explicitly used in the\n    rtl to be used as spill registers but prevents the compiler from\n-   extending the lifetime of these registers. */\n+   extending the lifetime of these registers.  */\n \n #define SMALL_REGISTER_CLASSES 1\n \n@@ -1352,7 +1352,7 @@ enum reg_class\n \n /* Place additional restrictions on the register class to use when it\n    is necessary to be able to hold a value of mode MODE in a reload\n-   register for which class CLASS would ordinarily be used. */\n+   register for which class CLASS would ordinarily be used.  */\n \n #define LIMIT_RELOAD_CLASS(MODE, CLASS) \t\t\t\\\n   ((MODE) == QImode && !TARGET_64BIT\t\t\t\t\\\n@@ -1370,7 +1370,7 @@ enum reg_class\n /* Put float CONST_DOUBLE in the constant pool instead of fp regs.\n    QImode must go into class Q_REGS.\n    Narrow ALL_REGS to GENERAL_REGS.  This supports allowing movsf and\n-   movdf to do mem-to-mem moves through integer regs. */\n+   movdf to do mem-to-mem moves through integer regs.  */\n \n #define PREFERRED_RELOAD_CLASS(X,CLASS)\t\t\t\t\t\\\n    ix86_preferred_reload_class (X, CLASS)\n@@ -1573,7 +1573,7 @@ typedef struct ix86_args {\n   int sse_words;\t\t/* # sse words passed so far */\n   int sse_nregs;\t\t/* # sse registers available for passing */\n   int sse_regno;\t\t/* next available sse register number */\n-  int maybe_vaarg;\t\t/* true for calls to possibly vardic fncts. */\n+  int maybe_vaarg;\t\t/* true for calls to possibly vardic fncts.  */\n } CUMULATIVE_ARGS;\n \n /* Initialize a variable CUM of type CUMULATIVE_ARGS\n@@ -2336,7 +2336,7 @@ while (0)\n /* Define as C expression which evaluates to nonzero if the tablejump\n    instruction expects the table to contain offsets from the address of the\n    table.\n-   Do not define this if the table should contain absolute addresses. */\n+   Do not define this if the table should contain absolute addresses.  */\n /* #define CASE_VECTOR_PC_RELATIVE 1 */\n \n /* Specify the tree operation to be used to convert reals to integers.\n@@ -2356,7 +2356,7 @@ while (0)\n \n /* MOVE_MAX_PIECES is the number of bytes at a time which we can\n    move efficiently, as opposed to  MOVE_MAX which is the maximum\n-   number of bytes we can move with a single instruction. */\n+   number of bytes we can move with a single instruction.  */\n #define MOVE_MAX_PIECES (TARGET_64BIT ? 8 : 4)\n \n /* If a memory-to-memory move would take MOVE_RATIO or more simple\n@@ -2371,7 +2371,7 @@ while (0)\n /* Define if shifts truncate the shift count\n    which implies one can omit a sign-extension or zero-extension\n    of a shift count.  */\n-/* On i386, shifts do truncate the count.  But bit opcodes don't. */\n+/* On i386, shifts do truncate the count.  But bit opcodes don't.  */\n \n /* #define SHIFT_COUNT_TRUNCATED */\n \n@@ -2800,7 +2800,7 @@ while (0)\n    this does not vary between assemblers.  */\n \n /* How to refer to registers in assembler output.\n-   This sequence is indexed by compiler's hard-register-number (see above). */\n+   This sequence is indexed by compiler's hard-register-number (see above).  */\n \n /* In order to refer to the first 8 regs as 32 bit regs prefix an \"e\"\n    For non floating point regs, the following are the HImode names.\n@@ -2841,7 +2841,7 @@ number as al, and ax.\n {\"al\", \"dl\", \"cl\", \"bl\", \"sil\", \"dil\", \"bpl\", \"spl\",}\n \n /* These parallel the array above, and can be used to access bits 8:15\n-   of regs 0 through 3. */\n+   of regs 0 through 3.  */\n \n #define QI_HIGH_REGISTER_NAMES \\\n {\"ah\", \"dh\", \"ch\", \"bh\", }\n@@ -2865,7 +2865,7 @@ extern int const svr4_dbx_register_map[FIRST_PSEUDO_REGISTER];\n    ? gen_rtx_MEM (Pmode, plus_constant (arg_pointer_rtx, -UNITS_PER_WORD)) \\\n    : gen_rtx_MEM (Pmode, plus_constant (FRAME, UNITS_PER_WORD)))\n \n-/* PC is dbx register 8; let's use that column for RA. */\n+/* PC is dbx register 8; let's use that column for RA.  */\n #define DWARF_FRAME_RETURN_COLUMN \t(TARGET_64BIT ? 16 : 8)\n \n /* Before the prologue, the top of the frame is at 4(%esp).  */\n@@ -2903,7 +2903,7 @@ do { long l[2];\t\t\t\t\t\t\t\t\\\n      fprintf (FILE, \"%s0x%lx,0x%lx\\n\", ASM_LONG, l[0], l[1]);\t\t\\\n    } while (0)\n \n-/* This is how to output a `long double' extended real constant. */\n+/* This is how to output a `long double' extended real constant.  */\n \n #undef ASM_OUTPUT_LONG_DOUBLE\n #define ASM_OUTPUT_LONG_DOUBLE(FILE,VALUE)  \t\t\\"}, {"sha": "55175ca16595f2b56bf5ca7d298a5e37d2495004", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=892a2d681f1049b4411a5327a2992da8bddf0dbc", "patch": "@@ -19,7 +19,7 @@\n ;; You should have received a copy of the GNU General Public License\n ;; along with GNU CC; see the file COPYING.  If not, write to\n ;; the Free Software Foundation, 59 Temple Place - Suite 330,\n-;; Boston, MA 02111-1307, USA. */\n+;; Boston, MA 02111-1307, USA.  */\n ;;\n ;; The original PO technology requires these to be ordered by speed,\n ;; so that assigner will pick the fastest.\n@@ -5657,7 +5657,7 @@\n   \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (PLUS, DImode, operands)\n    /* Current assemblers are broken and do not allow @GOTOFF in\n-      ought but a memory context. */\n+      ought but a memory context.  */\n    && ! pic_symbolic_operand (operands[2], VOIDmode)\"\n {\n   switch (get_attr_type (insn))\n@@ -5707,7 +5707,7 @@\n    && ix86_match_ccmode (insn, CCZmode)\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\n    /* Current assemblers are broken and do not allow @GOTOFF in\n-      ought but a memory context. */\n+      ought but a memory context.  */\n    && ! pic_symbolic_operand (operands[2], VOIDmode)\"\n {\n   switch (get_attr_type (insn))\n@@ -5806,7 +5806,7 @@\n    && ix86_match_ccmode (insn, CCGOCmode)\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\n    /* Current assemblers are broken and do not allow @GOTOFF in\n-      ought but a memory context. */\n+      ought but a memory context.  */\n    && ! pic_symbolic_operand (operands[2], VOIDmode)\"\n {\n   switch (get_attr_type (insn))\n@@ -6006,7 +6006,7 @@\n   \"ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (PLUS, SImode, operands)\n    /* Current assemblers are broken and do not allow @GOTOFF in\n-      ought but a memory context. */\n+      ought but a memory context.  */\n    && ! pic_symbolic_operand (operands[2], VOIDmode)\"\n {\n   switch (get_attr_type (insn))\n@@ -6055,7 +6055,7 @@\n   \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (PLUS, SImode, operands)\n    /* Current assemblers are broken and do not allow @GOTOFF in\n-      ought but a memory context. */\n+      ought but a memory context.  */\n    && ! pic_symbolic_operand (operands[2], VOIDmode)\"\n {\n   switch (get_attr_type (insn))\n@@ -6096,7 +6096,7 @@\n   \"ix86_match_ccmode (insn, CCZmode)\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\n    /* Current assemblers are broken and do not allow @GOTOFF in\n-      ought but a memory context. */\n+      ought but a memory context.  */\n    && ! pic_symbolic_operand (operands[2], VOIDmode)\"\n {\n   switch (get_attr_type (insn))\n@@ -6143,7 +6143,7 @@\n   \"TARGET_64BIT && ix86_match_ccmode (insn, CCZmode)\n    && ix86_binary_operator_ok (PLUS, SImode, operands)\n    /* Current assemblers are broken and do not allow @GOTOFF in\n-      ought but a memory context. */\n+      ought but a memory context.  */\n    && ! pic_symbolic_operand (operands[2], VOIDmode)\"\n {\n   switch (get_attr_type (insn))\n@@ -6231,7 +6231,7 @@\n   \"ix86_match_ccmode (insn, CCGOCmode)\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\n    /* Current assemblers are broken and do not allow @GOTOFF in\n-      ought but a memory context. */\n+      ought but a memory context.  */\n    && ! pic_symbolic_operand (operands[2], VOIDmode)\"\n {\n   switch (get_attr_type (insn))"}, {"sha": "86d288883bdbb4f3bb81a2dbd076fcfabf8f027e", "filename": "gcc/config/i386/i386elf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fi386elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fi386elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386elf.h?ref=892a2d681f1049b4411a5327a2992da8bddf0dbc", "patch": "@@ -178,7 +178,7 @@ do { long value[3];\t\t\t\t\t\t\t\\\n    specified as the number of bits.\n \n    Try to use function `asm_output_aligned_bss' defined in file\n-   `varasm.c' when defining this macro. */\n+   `varasm.c' when defining this macro.  */\n #undef ASM_OUTPUT_ALIGNED_BSS\n #define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN) \\\n   asm_output_aligned_bss (FILE, DECL, NAME, SIZE, ALIGN)"}, {"sha": "ed71cd45b58b23cfa61513ea6c91d86fa9cf172d", "filename": "gcc/config/i386/interix.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Finterix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Finterix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Finterix.c?ref=892a2d681f1049b4411a5327a2992da8bddf0dbc", "patch": "@@ -68,7 +68,7 @@ gen_stdcall_suffix (decl)\n #if 0\t\n /* Turn this back on when the linker is updated to handle grouped\n    .data$ sections correctly. See corresponding note in i386/interix.h. \n-   MK. */\n+   MK.  */\n \n /* Cover function for UNIQUE_SECTION.  */\n "}, {"sha": "542a1c019e7e09a733b6349e5fb15cb578bfcbf3", "filename": "gcc/config/i386/isc.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fisc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fisc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fisc.h?ref=892a2d681f1049b4411a5327a2992da8bddf0dbc", "patch": "@@ -2,7 +2,7 @@\n    Interactive Unix System V. Specifically, this is for recent versions\n    that support POSIX.  */\n \n-/* Use crt1.o, not crt0.o, as a startup file, and crtn.o as a closing file. */\n+/* Use crt1.o, not crt0.o, as a startup file, and crtn.o as a closing file.  */\n #undef STARTFILE_SPEC\n #define STARTFILE_SPEC \\\n   \"%{!shlib:%{posix:%{pg:mcrtp1.o%s}%{!pg:%{p:mcrtp1.o%s}%{!p:crtp1.o%s}}}\\\n@@ -33,7 +33,7 @@\n    the standard calling sequence in which the called function pops the\n    extra arg.  */\n /* caller has to pop the extra argument passed to functions that return\n-   structures. */\n+   structures.  */\n \n #undef RETURN_POPS_ARGS\n #define RETURN_POPS_ARGS(FUNDECL,FUNTYPE,SIZE)   \\\n@@ -56,7 +56,7 @@\n \n    ISC's software emulation of a 387 fails to handle the `fucomp'\n    opcode.  fucomp is only used when generating IEEE compliant code.\n-   So don't make TARGET_IEEE_FP default for ISC. */\n+   So don't make TARGET_IEEE_FP default for ISC.  */\n \n #undef TARGET_SUBTARGET_DEFAULT\n #define TARGET_SUBTARGET_DEFAULT (MASK_80387 | MASK_FLOAT_RETURNS)\n@@ -92,5 +92,5 @@\n   } while (0)\n \n /* Work around assembler forward label references generated in exception\n-   handling code. */\n+   handling code.  */\n #define DWARF2_UNWIND_INFO 0"}, {"sha": "9efd9ad4ffaff4ecc8225c447430e5fdd9fbd9c7", "filename": "gcc/config/i386/isccoff.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fisccoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fisccoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fisccoff.h?ref=892a2d681f1049b4411a5327a2992da8bddf0dbc", "patch": "@@ -4,7 +4,7 @@\n    (But set TARGET_DEFAULT to (MASK_80307 | MASK_FLOAT_RETURNS)\n    if you do that, if you don't have a real 80387.)  */\n \n-/* Mostly it's like AT&T Unix System V. */\n+/* Mostly it's like AT&T Unix System V.  */\n \n #include \"i386/sysv3.h\"\n "}, {"sha": "6d1f341f15eab3f72b47efb5aee27e8652064189", "filename": "gcc/config/i386/iscdbx.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fiscdbx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fiscdbx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fiscdbx.h?ref=892a2d681f1049b4411a5327a2992da8bddf0dbc", "patch": "@@ -20,15 +20,15 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* Mostly it's like AT&T Unix System V with dbx-in-coff. */\n+/* Mostly it's like AT&T Unix System V with dbx-in-coff.  */\n \n #include \"i386/svr3dbx.h\"\n \n /* But with a few changes.  */\n #undef ENDFILE_SPEC\n #include \"i386/isc.h\"\n \n-/* Overridden defines for ifile usage. */\n+/* Overridden defines for ifile usage.  */\n \n #undef STARTFILE_SPEC\n #define STARTFILE_SPEC \\"}, {"sha": "42bfcd30a13a06801b7d42e2977325c7b17665a0", "filename": "gcc/config/i386/linux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flinux.h?ref=892a2d681f1049b4411a5327a2992da8bddf0dbc", "patch": "@@ -110,7 +110,7 @@ Boston, MA 02111-1307, USA.  */\n    When the -shared link option is used a final link is not being\n    done.  */\n \n-/* If ELF is the default format, we should not use /lib/elf. */\n+/* If ELF is the default format, we should not use /lib/elf.  */\n \n #undef\tLINK_SPEC\n #ifdef USE_GNULIBC_1"}, {"sha": "91ed31e0bf718021a47844bd7980123858f4205b", "filename": "gcc/config/i386/lynx.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Flynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Flynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flynx.h?ref=892a2d681f1049b4411a5327a2992da8bddf0dbc", "patch": "@@ -24,9 +24,9 @@ Boston, MA 02111-1307, USA.  */\n #undef CPP_PREDEFINES\n #define CPP_PREDEFINES \"-DI386 -DLynx -DIBITS32 -Asystem=unix -Asystem=lynx\"\n \n-/* The prefix to add to user-visible assembler symbols. */\n+/* The prefix to add to user-visible assembler symbols.  */\n \n-/* Override the svr3 convention of adding a leading underscore. */\n+/* Override the svr3 convention of adding a leading underscore.  */\n \n #undef USER_LABEL_PREFIX\n #define USER_LABEL_PREFIX \"\""}, {"sha": "b93e856fdd9fe5cbce4a6b5c5352708968a9c09f", "filename": "gcc/config/i386/mingw32.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fmingw32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fmingw32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmingw32.h?ref=892a2d681f1049b4411a5327a2992da8bddf0dbc", "patch": "@@ -17,13 +17,13 @@ GNU General Public License for more details.\n You should have received a copy of the GNU General Public License\n along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA. */\n+Boston, MA 02111-1307, USA.  */\n \n /* Most of this is the same as for cygwin, except for changing some\n    specs.  */\n \n /* Mingw GCC, unlike Cygwin's, must be relocatable. This macro must \n-   be defined before any other files are included. */\n+   be defined before any other files are included.  */\n #ifndef WIN32_NO_ABSOLUTE_INST_DIRS\n #define WIN32_NO_ABSOLUTE_INST_DIRS 1\n #endif\n@@ -34,7 +34,7 @@ Boston, MA 02111-1307, USA. */\n \n /* Please keep changes to CPP_PREDEFINES in sync with i386/crtdll. The\n    only difference between the two should be __MSVCRT__ needed to \n-   distinguish MSVC from CRTDLL runtime in mingw headers. */\n+   distinguish MSVC from CRTDLL runtime in mingw headers.  */\n #undef CPP_PREDEFINES\n #define CPP_PREDEFINES \"-D_WIN32 -D__WIN32 -D__WIN32__ -DWIN32 \\\n   -D__MINGW32__ -D__MSVCRT__ -DWINNT -D_X86_=1 \\\n@@ -80,7 +80,7 @@ Boston, MA 02111-1307, USA. */\n #define STARTFILE_SPEC \"%{shared|mdll:dllcrt2%O%s} \\\n   %{!shared:%{!mdll:crt2%O%s}} %{pg:gcrt2%O%s}\"\n \n-/* MS runtime does not need a separate math library. */\n+/* MS runtime does not need a separate math library.  */\n #undef MATH_LIBRARY\n #define MATH_LIBRARY \"\"\n "}, {"sha": "2e68315f89e8ad4a249d63aff452cbcf5086d9bc", "filename": "gcc/config/i386/netbsd-elf.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnetbsd-elf.h?ref=892a2d681f1049b4411a5327a2992da8bddf0dbc", "patch": "@@ -33,7 +33,7 @@ Boston, MA 02111-1307, USA.  */\n    provide support for the special GCC option -static.  On ELF targets,\n    we also add the crtbegin.o file which provides part of the support\n    for getting C++ file-scope static objects constructed before entering\n-   `main'.  We use the NetBSD crt0. */\n+   `main'.  We use the NetBSD crt0.  */\n \n #undef STARTFILE_SPEC\n #define\tSTARTFILE_SPEC \\\n@@ -46,15 +46,15 @@ Boston, MA 02111-1307, USA.  */\n \n /* Provide an ENDFILE_SPEC approrpiate for NetBSD ELF targets.  Here we\n    add crtend.o, which provides part of the support for getting C++\n-   file-scope static objects deconstructed after exiting `main'. */\n+   file-scope static objects deconstructed after exiting `main'.  */\n \n #undef ENDFILE_SPEC\n #define\tENDFILE_SPEC \\\n  \"%{!shared:crtend%O%s} %{shared:crtendS%O%s}\"\n \n /* Provide a LINK_SPEC appropriate for a NetBSD/i386 ELF target.  Only\n    the linker emulation is i386-specific.  The rest are\n-   common to all ELF targets, except for the name of the start function. */\n+   common to all ELF targets, except for the name of the start function.  */\n \n #undef LINK_SPEC\n #define LINK_SPEC \\\n@@ -87,7 +87,7 @@ Boston, MA 02111-1307, USA.  */\n #undef LIB_SPEC\n #define LIB_SPEC \"%{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p}\"\n \n-/* This defines which switch letters take arguments. */\n+/* This defines which switch letters take arguments.  */\n #undef SWITCH_TAKES_ARG\n #define SWITCH_TAKES_ARG(CHAR) \\\n   (DEFAULT_SWITCH_TAKES_ARG(CHAR) \\\n@@ -97,7 +97,7 @@ Boston, MA 02111-1307, USA.  */\n \n #define TARGET_MEM_FUNCTIONS\n \n-/* Names to predefine in the preprocessor for this target machine. */\n+/* Names to predefine in the preprocessor for this target machine.  */\n \n #define CPP_PREDEFINES \"\\\n -Di386 -D__NetBSD__ -D__ELF__ -Asystem(unix) -Asystem(NetBSD)\"\n@@ -124,7 +124,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* Output assembler code to FILE to increment profiler label # LABELNO\n    for profiling a function entry.  Under NetBSD/i386, the assembler does\n-   nothing special with -pg. */\n+   nothing special with -pg.  */\n \n #undef ASM_APP_ON\n #define ASM_APP_ON \"#APP\\n\""}, {"sha": "d97d2dc7417b5581c9bbc7d00ebafd7ea0c1ed60", "filename": "gcc/config/i386/next.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fnext.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fnext.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnext.h?ref=892a2d681f1049b4411a5327a2992da8bddf0dbc", "patch": "@@ -117,12 +117,12 @@ Boston, MA 02111-1307, USA.  */\n    count is in %cl.  Some assemblers require %cl as an argument;\n    some don't.\n \n-   GAS requires the %cl argument, so override unx386.h. */\n+   GAS requires the %cl argument, so override unx386.h.  */\n \n #undef\tSHIFT_DOUBLE_OMITS_COUNT\n #define SHIFT_DOUBLE_OMITS_COUNT 0\n \n-/* Print opcodes the way that GAS expects them. */\n+/* Print opcodes the way that GAS expects them.  */\n #define GAS_MNEMONICS 1\n \n /* Names to predefine in the preprocessor for this target machine.  */\n@@ -131,7 +131,7 @@ Boston, MA 02111-1307, USA.  */\n #define CPP_PREDEFINES \"-DNeXT -Dunix -D__MACH__ -D__LITTLE_ENDIAN__ \\\n   -D__ARCHITECTURE__=\\\"i386\\\" -Asystem=unix -Asystem=mach\"\n \n-/* This accounts for the return pc and saved fp on the i386. */\n+/* This accounts for the return pc and saved fp on the i386.  */\n \n #define OBJC_FORWARDING_STACK_OFFSET 8\n #define OBJC_FORWARDING_MIN_OFFSET 8"}, {"sha": "fefa8c4a21183cac179002b7d23c5a29134b9065", "filename": "gcc/config/i386/osf1elf.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fosf1elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fosf1elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fosf1elf.h?ref=892a2d681f1049b4411a5327a2992da8bddf0dbc", "patch": "@@ -1,6 +1,6 @@\n /* OSF/1 1.3 now is compitable with SVR4, so include sysv4.h, and\n    put difference here.\n-   Copyright (C) 2000 Free Software Foundation, Inc. */\n+   Copyright (C) 2000 Free Software Foundation, Inc.  */\n \n #include <stdio.h>\n \n@@ -145,7 +145,7 @@\n    The details of how the address should be passed to `mcount' are determined\n    by your operating system environment, not by GNU CC.  To figure them out,\n    compile a small program for profiling using the system's installed C\n-   compiler and look at the assembler code that results. */\n+   compiler and look at the assembler code that results.  */\n \n #undef  FUNCTION_PROFILER\n #define FUNCTION_PROFILER(FILE, LABELNO)\t\t\t\t\\"}, {"sha": "e4996302cfebd4b7c6a5a403fcf8c5528e5d9749", "filename": "gcc/config/i386/osfrose.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fosfrose.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fosfrose.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fosfrose.h?ref=892a2d681f1049b4411a5327a2992da8bddf0dbc", "patch": "@@ -176,7 +176,7 @@ Boston, MA 02111-1307, USA.  */\n /* Define this macro if the system header files support C++ as well\n    as C.  This macro inhibits the usual method of using system header\n    files in C++, which is to pretend that the file's contents are\n-   enclosed in `extern \"C\" {...}'. */\n+   enclosed in `extern \"C\" {...}'.  */\n #define NO_IMPLICIT_EXTERN_C\n \n /* Turn off long double being 96 bits.  */\n@@ -201,7 +201,7 @@ Boston, MA 02111-1307, USA.  */\n    The details of how the address should be passed to `mcount' are determined\n    by your operating system environment, not by GNU CC.  To figure them out,\n    compile a small program for profiling using the system's installed C\n-   compiler and look at the assembler code that results. */\n+   compiler and look at the assembler code that results.  */\n \n #undef  FUNCTION_PROFILER\n #define FUNCTION_PROFILER(FILE, LABELNO)\t\t\t\t\\\n@@ -305,7 +305,7 @@ while (0)\n   fprintf (FILE, \"%s%s%d:\\n\", (TARGET_UNDERSCORES) ? \"\" : \".\",\t\t\\\n \t   PREFIX, NUM)\n \n-/* The prefix to add to user-visible assembler symbols. */\n+/* The prefix to add to user-visible assembler symbols.  */\n \n /* target_flags is not accessible by the preprocessor */\n #undef USER_LABEL_PREFIX\n@@ -319,7 +319,7 @@ while (0)\n \n /* This is how to output an element of a case-vector that is relative.\n    This is only used for PIC code.  See comments by the `casesi' insn in\n-   i386.md for an explanation of the expression this outputs. */\n+   i386.md for an explanation of the expression this outputs.  */\n \n #undef ASM_OUTPUT_ADDR_DIFF_ELT\n #define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \\\n@@ -446,7 +446,7 @@ while (0)\n \n    You can also check the information stored in the `symbol_ref' in\n    the definition of `GO_IF_LEGITIMATE_ADDRESS' or\n-   `PRINT_OPERAND_ADDRESS'. */\n+   `PRINT_OPERAND_ADDRESS'.  */\n \n #undef\tENCODE_SECTION_INFO\n #define ENCODE_SECTION_INFO(DECL)\t\t\t\t\t\\\n@@ -624,7 +624,7 @@ do {\t\t\t\t\t\t\t\t\t \\\n        }\t\t\t\t\t\t\t\t \\\n    } while (0)\n \n-/* This is how to declare a function name. */\n+/* This is how to declare a function name.  */\n \n #undef\tASM_DECLARE_FUNCTION_NAME\n #define ASM_DECLARE_FUNCTION_NAME(STREAM,NAME,DECL)\t\t\t\\\n@@ -704,7 +704,7 @@ while (0)\n    to do the search */\n #define LINK_LIBGCC_SPECIAL\n \n-/* Generate calls to memcpy, etc., not bcopy, etc. */\n+/* Generate calls to memcpy, etc., not bcopy, etc.  */\n #define TARGET_MEM_FUNCTIONS\n \n /* Don't default to pcc-struct-return, because gcc is the only compiler, and"}, {"sha": "5dd90e39c4bda1cd9913245d1aabae2c630f1b5d", "filename": "gcc/config/i386/sco5.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fsco5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fsco5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsco5.h?ref=892a2d681f1049b4411a5327a2992da8bddf0dbc", "patch": "@@ -102,7 +102,7 @@ Boston, MA 02111-1307, USA.  */\n \n #undef INIT_SECTION_ASM_OP\n #define INIT_SECTION_ASM_OP_ELF\t\t\"\\t.section\\t.init\"\n-/* Rename these for COFF because crt1.o will try to run them. */\n+/* Rename these for COFF because crt1.o will try to run them.  */\n #define INIT_SECTION_ASM_OP_COFF\t\"\\t.section\\t.ctor ,\\\"x\\\"\"\n #define INIT_SECTION_ASM_OP\t\\\n   ((TARGET_ELF) ? INIT_SECTION_ASM_OP_ELF : INIT_SECTION_ASM_OP_COFF)\n@@ -400,7 +400,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_INTERNAL_LABEL(FILE,PREFIX,NUM)\t\t\t\\\n   fprintf (FILE, \".%s%d:\\n\", PREFIX, NUM)\n \n-/* The prefix to add to user-visible assembler symbols. */\n+/* The prefix to add to user-visible assembler symbols.  */\n \n #undef USER_LABEL_PREFIX\n #define USER_LABEL_PREFIX \"\"\n@@ -755,7 +755,7 @@ init_section ()\t\t\t\t\t\t\t\t\\\n   %{G:-G} %{!mcoff:%{Qn:} %{!Qy:-Qn}}\"\n \n /* The SCO COFF linker gets confused on the difference between \"-ofoo\"\n-   and \"-o foo\".   So we just always force a single space. */\n+   and \"-o foo\".   So we just always force a single space.  */\n \n #define SWITCHES_NEED_SPACES \"o\"\n \n@@ -780,7 +780,7 @@ init_section ()\t\t\t\t\t\t\t\t\\\n #define NO_DOLLAR_IN_LABEL\n \n /* Implicit library calls should use memcpy, not bcopy, etc.  They are \n-   faster on OpenServer libraries. */\n+   faster on OpenServer libraries.  */\n \n #define TARGET_MEM_FUNCTIONS\n "}, {"sha": "d11c4c1f388f9155c5df7ee4ea6341f33e11a241", "filename": "gcc/config/i386/seq-gas.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fseq-gas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fseq-gas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fseq-gas.h?ref=892a2d681f1049b4411a5327a2992da8bddf0dbc", "patch": "@@ -1,7 +1,7 @@\n /* Definitions for Sequent Intel 386 using GAS.\n    Copyright (C) 1992 Free Software Foundation, Inc.\n \n-/* Mostly it's like a Sequent 386 without GAS. */\n+/* Mostly it's like a Sequent 386 without GAS.  */\n \n #include \"i386/sequent.h\"\n \n@@ -37,10 +37,10 @@\n    count is in %cl.  Some assemblers require %cl as an argument;\n    some don't.\n \n-   GAS requires the %cl argument, so override i386/unix.h. */\n+   GAS requires the %cl argument, so override i386/unix.h.  */\n \n #undef SHIFT_DOUBLE_OMITS_COUNT\n #define SHIFT_DOUBLE_OMITS_COUNT 0\n \n-/* Print opcodes the way that GAS expects them. */\n+/* Print opcodes the way that GAS expects them.  */\n #define GAS_MNEMONICS 1"}, {"sha": "c8e75927dfc7b127dcae357cf50e59d11edf93b2", "filename": "gcc/config/i386/seq-sysv3.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fseq-sysv3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fseq-sysv3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fseq-sysv3.h?ref=892a2d681f1049b4411a5327a2992da8bddf0dbc", "patch": "@@ -26,18 +26,18 @@\n    from the .init section */\n #define INVOKE__main\n \n-/* Assembler pseudo-op for initialized shared variables (.shdata). */\n+/* Assembler pseudo-op for initialized shared variables (.shdata).  */\n #undef  SHARED_SECTION_ASM_OP\n #define SHARED_SECTION_ASM_OP \"\\t.section .shdata, \\\"ws\\\"\"\n \n-/* Assembler pseudo-op for uninitialized shared global variables (.shbss). */\n+/* Assembler pseudo-op for uninitialized shared global variables (.shbss).  */\n #undef  ASM_OUTPUT_SHARED_COMMON\n #define ASM_OUTPUT_SHARED_COMMON(FILE, NAME, SIZE, ROUNDED) \\\n ( fputs(\".comm \", (FILE)),\t\t\t\\\n   assemble_name((FILE), (NAME)),\t\t\\\n    fprintf((FILE), \",%u,-3\\n\", (SIZE)))\n \n-/* Assembler pseudo-op for uninitialized shared local variables (.shbss). */\n+/* Assembler pseudo-op for uninitialized shared local variables (.shbss).  */\n #undef  SHARED_BSS_SECTION_ASM_OP\n #define SHARED_BSS_SECTION_ASM_OP \"\\t.section .shbss, \\\"bs\\\"\"\n "}, {"sha": "379062675627bef07923ca0dcbe1572dba57036d", "filename": "gcc/config/i386/sequent.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fsequent.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fsequent.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsequent.h?ref=892a2d681f1049b4411a5327a2992da8bddf0dbc", "patch": "@@ -96,13 +96,13 @@ Boston, MA 02111-1307, USA.  */\n    && ! (REGNO == 2 && GET_MODE_UNIT_SIZE (MODE) > 4))\n \n /* Output assembler code to FILE to increment profiler label # LABELNO\n-   for profiling a function entry. */\n+   for profiling a function entry.  */\n \n #undef FUNCTION_PROFILER\n #define FUNCTION_PROFILER(FILE, LABELNO)  \\\n    fprintf (FILE, \"\\tmovl $.LP%d,%%eax\\n\\tcall mcount\\n\", (LABELNO));\n \n-/* Assembler pseudo-op for shared data segment. */\n+/* Assembler pseudo-op for shared data segment.  */\n #define SHARED_SECTION_ASM_OP \"\\t.shdata\"\n \n /* A C statement or statements which output an assembler instruction\n@@ -141,7 +141,7 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_OUTPUT_INTERNAL_LABEL(FILE,PREFIX,NUM)\\\n   fprintf (FILE, \".%s%d:\\n\", PREFIX, NUM)\n \n-/* The native compiler passes the address of the returned structure in eax. */\n+/* The native compiler passes the address of the returned structure in eax.  */\n #undef STRUCT_VALUE\n #undef STRUCT_VALUE_INCOMING\n #define STRUCT_VALUE_REGNUM\t0"}, {"sha": "1e4397ade6765c90bfd259fe1c1a875347156254", "filename": "gcc/config/i386/sol2.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsol2.h?ref=892a2d681f1049b4411a5327a2992da8bddf0dbc", "patch": "@@ -55,7 +55,7 @@ Boston, MA 02111-1307, USA.  */\n    bytes.  The linker pads it to 16 bytes with a single 0x90 byte, and\n    two 0x00000090 ints, which generates a segmentation violation when\n    executed.  This macro forces the assembler to do the padding, since\n-   it knows what it is doing. */\n+   it knows what it is doing.  */\n \n #define FORCE_INIT_SECTION_ALIGN asm (ALIGN_ASM_OP ## \"16\")\n #define FORCE_FINI_SECTION_ALIGN FORCE_INIT_SECTION_ALIGN"}, {"sha": "3f3ba3033f6e71eb9dfb1e6f5c21b8644762444a", "filename": "gcc/config/i386/sun386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fsun386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fsun386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsun386.h?ref=892a2d681f1049b4411a5327a2992da8bddf0dbc", "patch": "@@ -131,7 +131,7 @@ do\t\t\t\t\t\t\t\t\\\n #define ASM_GENERATE_INTERNAL_LABEL(BUF,PREFIX,NUMBER)\t\\\n   sprintf ((BUF), \"*.%s%d\", (PREFIX), (NUMBER))\n \n-/* The prefix to add to user-visible assembler symbols. */\n+/* The prefix to add to user-visible assembler symbols.  */\n \n #define USER_LABEL_PREFIX \"\"\n "}, {"sha": "8566be18a1dba139b72ad0e7d0645055bc9fd86e", "filename": "gcc/config/i386/uwin.asm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fuwin.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fuwin.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fuwin.asm?ref=892a2d681f1049b4411a5327a2992da8bddf0dbc", "patch": "@@ -1,4 +1,4 @@\n-/* stuff needed for libgcc on win32. */\n+/* stuff needed for libgcc on win32.  */\n \n #ifdef L_chkstk\n "}, {"sha": "7dd091c8c8ef6d9d274abcfa016eb9010e57d4a7", "filename": "gcc/config/i386/uwin.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fuwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fuwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fuwin.h?ref=892a2d681f1049b4411a5327a2992da8bddf0dbc", "patch": "@@ -20,7 +20,7 @@ GNU General Public License for more details.\n You should have received a copy of the GNU General Public License\n along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA. */\n+Boston, MA 02111-1307, USA.  */\n \n /* Most of this is the same as for Cygwin32, except for changing some\n    specs.  */\n@@ -53,7 +53,7 @@ Boston, MA 02111-1307, USA. */\n #define LIB_SPEC \\\n   \"%{pg:-lgmon} %{mwindows:-luser32 -lgdi32 -lcomdlg32} -lkernel32 -ladvapi32\"\n \n-/* This is needed in g77spec.c for now. Will be removed in the future. */\n+/* This is needed in g77spec.c for now. Will be removed in the future.  */\n #define WIN32_UWIN_TARGET 1\n \n /* Include in the mingw32 libraries with libgcc */\n@@ -69,7 +69,7 @@ Boston, MA 02111-1307, USA. */\n #undef STARTFILE_SPEC\n #define STARTFILE_SPEC \"%{mdll:dllcrt2%O%s} %{!mdll:crt2%O%s} %{pg:gcrt2%O%s}\"\n \n-/* These are PE BFD bug workarounds. Should go away eventually. */\n+/* These are PE BFD bug workarounds. Should go away eventually.  */\n \n /* Write the extra assembler code needed to declare a function\n    properly.  If we are generating SDB debugging information, this\n@@ -80,7 +80,7 @@ Boston, MA 02111-1307, USA. */\n     {\t\t\t\t\t\t\t\t\t\\\n       if (i386_pe_dllexport_name_p (NAME))\t\t\t\t\\\n \ti386_pe_record_exported_symbol (NAME, 0);\t\t\t\\\n-      /* UWIN binutils bug workaround. */\t\t\t\t\\\n+      /* UWIN binutils bug workaround.  */\t\t\t\t\\\n       if (0 && write_symbols != SDB_DEBUG)\t\t\t\t\\\n \ti386_pe_declare_function_type (FILE, NAME, TREE_PUBLIC (DECL));\t\\\n       ASM_OUTPUT_LABEL (FILE, NAME);\t\t\t\t\t\\"}, {"sha": "c050ca76412d96cab24959e7fdb81d6399d4b895", "filename": "gcc/config/i386/vxi386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fvxi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fvxi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fvxi386.h?ref=892a2d681f1049b4411a5327a2992da8bddf0dbc", "patch": "@@ -48,7 +48,7 @@ Boston, MA 02111-1307, USA.  */\n #define LIB_SPEC \"\"\n \n /* VxWorks uses object files, not loadable images.  make linker just\n-   combine objects. */\n+   combine objects.  */\n \n #undef LINK_SPEC\n #define LINK_SPEC \"-r\""}, {"sha": "86011fb6df5453d65c39eafba23e533ab405b1fe", "filename": "gcc/config/i386/win32.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fwin32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fwin32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwin32.h?ref=892a2d681f1049b4411a5327a2992da8bddf0dbc", "patch": "@@ -20,7 +20,7 @@ GNU General Public License for more details.\n You should have received a copy of the GNU General Public License\n along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA. */\n+Boston, MA 02111-1307, USA.  */\n \n #define YES_UNDERSCORES\n \n@@ -34,7 +34,7 @@ Boston, MA 02111-1307, USA. */\n #include \"i386/gas.h\"\n #include \"dbxcoff.h\"\n \n-/* Augment TARGET_SWITCHES with the cygwin/win32 options. */\n+/* Augment TARGET_SWITCHES with the cygwin/win32 options.  */\n #define MASK_WIN32 0x40000000 /* Use -lming32 interface */\n #define MASK_CYGWIN  0x20000000 /* Use -lcygwin interface */\n #define MASK_WINDOWS 0x10000000 /* Use windows interface */\n@@ -113,7 +113,7 @@ Boston, MA 02111-1307, USA. */\n    On i386 running Windows NT, modify the assembler name with a suffix \n    consisting of an atsign (@) followed by string of digits that represents\n    the number of bytes of arguments passed to the function, if it has the \n-   attribute STDCALL. */\n+   attribute STDCALL.  */\n \n #ifdef ENCODE_SECTION_INFO\n #undef ENCODE_SECTION_INFO\n@@ -162,7 +162,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n       \n \n /* Emit code to check the stack when allocating more that 4000\n-   bytes in one go. */\n+   bytes in one go.  */\n \n #define CHECK_STACK_LIMIT 4000\n \n@@ -201,7 +201,7 @@ extern void i386_pe_unique_section ();\n #undef ASM_COMMENT_START\n #define ASM_COMMENT_START \" #\"\n \n-/* Don't assume anything about the header files. */\n+/* Don't assume anything about the header files.  */\n #define NO_IMPLICIT_EXTERN_C\n \n #define SUBTARGET_PROLOGUE\t\t\t\t\t\t\\"}, {"sha": "f97c637d4688f13fc0576e0366f3e6f5cfd875b5", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=892a2d681f1049b4411a5327a2992da8bddf0dbc", "patch": "@@ -611,7 +611,7 @@ struct export_list\n {\n   struct export_list *next;\n   const char *name;\n-  int is_data;\t\t/* used to type tag exported symbols. */\n+  int is_data;\t\t/* used to type tag exported symbols.  */\n };\n \n static struct export_list *export_head;"}, {"sha": "721c435189f44073270b091ac8c1b7dfbb05a0b7", "filename": "gcc/config/i386/xm-cygwin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fxm-cygwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fxm-cygwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxm-cygwin.h?ref=892a2d681f1049b4411a5327a2992da8bddf0dbc", "patch": "@@ -17,7 +17,7 @@ GNU General Public License for more details.\n You should have received a copy of the GNU General Public License\n along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA. */\n+Boston, MA 02111-1307, USA.  */\n \n #define HOST_EXECUTABLE_SUFFIX \".exe\"\n \n@@ -30,6 +30,6 @@ Boston, MA 02111-1307, USA. */\n    paths containing backslashes, make and configure may treat the\n    backslashes as escape characters.  Many Win32 programs use forward\n    slashes so using a forward slash shouldn't be problematic from the\n-   perspective of wanting gcc to produce native Win32 paths. */\n+   perspective of wanting gcc to produce native Win32 paths.  */\n #undef DIR_SEPARATOR_2\n #define DIR_SEPARATOR_2 '\\\\'"}, {"sha": "db100ddee0d7d34ee68c07746b5460856489d86a", "filename": "gcc/config/i386/xm-mingw32.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fxm-mingw32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892a2d681f1049b4411a5327a2992da8bddf0dbc/gcc%2Fconfig%2Fi386%2Fxm-mingw32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxm-mingw32.h?ref=892a2d681f1049b4411a5327a2992da8bddf0dbc", "patch": "@@ -17,7 +17,7 @@ GNU General Public License for more details.\n You should have received a copy of the GNU General Public License\n along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA. */\n+Boston, MA 02111-1307, USA.  */\n \n #define environ _environ\n "}]}