{"sha": "f8023b78462af97c3fe7a6b7786a9c19c82107d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjgwMjNiNzg0NjJhZjk3YzNmZTdhNmI3Nzg2YTljMTljODIxMDdkOQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-01-28T13:29:41Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-01-28T13:29:41Z"}, "message": "type_traits: Implement is_abstract, by exploiting the resolution of DR core/337.\n\n2005-01-28  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/type_traits: Implement is_abstract, by exploiting the\n\tresolution of DR core/337.\n\t* testsuite/testsuite_tr1.h: Add AbstractClass.\n\t* testsuite/tr1/4_metaprogramming/type_properties/is_abstract/\n\tis_abstract.cc: New.\n\t* testsuite/tr1/4_metaprogramming/type_properties/is_abstract/\n\ttypedefs.cc: Likewise.\n\n\t* include/tr1/type_traits (is_function): Rewrite, use the conversion\n\tF& -> F* instead, thus avoiding problems with abstract classes.\n\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n\tis_function/is_function.cc: Add a test for tricky AbstractClass.\n\nFrom-SVN: r94370", "tree": {"sha": "7a291daf88e4bb4d119f8a3bdc61b8285d63b1a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a291daf88e4bb4d119f8a3bdc61b8285d63b1a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8023b78462af97c3fe7a6b7786a9c19c82107d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8023b78462af97c3fe7a6b7786a9c19c82107d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8023b78462af97c3fe7a6b7786a9c19c82107d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8023b78462af97c3fe7a6b7786a9c19c82107d9/comments", "author": null, "committer": null, "parents": [{"sha": "2aa3d033a12542ddbda510b855141b8fda74184f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aa3d033a12542ddbda510b855141b8fda74184f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2aa3d033a12542ddbda510b855141b8fda74184f"}], "stats": {"total": 174, "additions": 151, "deletions": 23}, "files": [{"sha": "f9b1de548ba6b17d5cbde9a58a34068a48ff2887", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8023b78462af97c3fe7a6b7786a9c19c82107d9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8023b78462af97c3fe7a6b7786a9c19c82107d9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f8023b78462af97c3fe7a6b7786a9c19c82107d9", "patch": "@@ -1,3 +1,18 @@\n+2005-01-28  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/type_traits: Implement is_abstract, by exploiting the\n+\tresolution of DR core/337.\n+\t* testsuite/testsuite_tr1.h: Add AbstractClass.\n+\t* testsuite/tr1/4_metaprogramming/type_properties/is_abstract/\n+\tis_abstract.cc: New.\n+\t* testsuite/tr1/4_metaprogramming/type_properties/is_abstract/\n+\ttypedefs.cc: Likewise.\n+\t\n+\t* include/tr1/type_traits (is_function): Rewrite, use the conversion\n+\tF& -> F* instead, thus avoiding problems with abstract classes.\n+\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n+\tis_function/is_function.cc: Add a test for tricky AbstractClass.\n+\n 2005-01-26  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/ext/mt_allocator.h"}, {"sha": "d75e5dffb1037433fa07c91e6d0c8000a1aefa4c", "filename": "libstdc++-v3/include/tr1/type_traits", "status": "modified", "additions": 44, "deletions": 21, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8023b78462af97c3fe7a6b7786a9c19c82107d9/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8023b78462af97c3fe7a6b7786a9c19c82107d9/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits?ref=f8023b78462af97c3fe7a6b7786a9c19c82107d9", "patch": "@@ -33,13 +33,26 @@ namespace std\n {\n namespace tr1\n {\n-  // For use in is_enum, is_function, and elsewhere.\n+  // For use in is_enum, is_abstract and elsewhere.\n   struct __sfinae_types\n   {\n     typedef char __one;\n     typedef struct { char __arr[2]; } __two;\n   };\n \n+  template<typename _From, typename _To>\n+    struct __conv_helper\n+    : public __sfinae_types\n+    {\n+    private:\n+      static __one __test(_To);\n+      static __two __test(...);\n+      static _From __makeFrom();\n+    \n+    public:\n+      static const bool __value = sizeof(__test(__makeFrom())) == 1;\n+    };\n+\n #define _DEFINE_SPEC_BODY(_Value)                                    \\\n     : public integral_constant<bool, _Value> { };\n \n@@ -393,28 +406,13 @@ namespace tr1\n     struct is_enum\n     : public integral_constant<bool, __is_enum_helper<_Tp>::__value> { };\n \n-  template<typename _Tp, bool = (is_reference<_Tp>::value\n-\t\t\t\t || is_void<_Tp>::value)>\n-    struct __is_function_helper\n-    : public __sfinae_types\n-    {\n-    private:\n-      template<typename>\n-        static __one __test(...);\n-      template<typename _Up>\n-        static __two __test(_Up(*)[1]);\n-    \n-    public:\n-      static const bool __value = sizeof(__test<_Tp>(0)) == 1;\n-    };\n-  \n-  template<typename _Tp>\n-    struct __is_function_helper<_Tp, true>\n-    { static const bool __value = false; };\n-\n   template<typename _Tp>\n     struct is_function\n-    : public integral_constant<bool, __is_function_helper<_Tp>::__value> { };\n+    : public integral_constant<bool,\n+\t\t\t       (__conv_helper<typename add_reference<_Tp>::type,\n+\t\t\t\ttypename add_pointer<_Tp>::type>::__value)>\n+    { };\n+  _DEFINE_SPEC(0, is_function, void, false)\n \n   /// @brief  composite type traits [4.5.2].\n   template<typename _Tp>\n@@ -479,6 +477,31 @@ namespace tr1\n \t\t\t\t      remove_all_extents<_Tp>::type>::value)>\n     { };\n \n+  // Exploit the resolution DR core/337.\n+  template<typename _Tp, bool = (is_void<_Tp>::value\n+\t\t\t\t || is_function<_Tp>::value\n+\t\t\t\t || is_reference<_Tp>::value)>\n+    struct __is_abstract_helper\n+    : public __sfinae_types\n+    {\n+    private:\n+      template<typename>\n+        static __one __test(...);\n+      template<typename _Up>\n+        static __two __test(_Up(*)[1]);\n+    \n+    public:\n+      static const bool __value = sizeof(__test<_Tp>(0)) == 1;\n+    };\n+  \n+  template<typename _Tp>\n+    struct __is_abstract_helper<_Tp, true>\n+    { static const bool __value = false; };\n+\n+  template<typename _Tp>\n+    struct is_abstract\n+    : public integral_constant<bool, __is_abstract_helper<_Tp>::__value> { };\n+\n   template<typename _Tp>\n     struct has_trivial_constructor\n     : public integral_constant<bool, is_pod<_Tp>::value> { };"}, {"sha": "74a187666fd1300c11cacea1c090ef68a9e56fa8", "filename": "libstdc++-v3/testsuite/testsuite_tr1.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8023b78462af97c3fe7a6b7786a9c19c82107d9/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_tr1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8023b78462af97c3fe7a6b7786a9c19c82107d9/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_tr1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_tr1.h?ref=f8023b78462af97c3fe7a6b7786a9c19c82107d9", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*-\n // Testing utilities for the tr1 testsuite.\n //\n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -117,6 +117,9 @@ namespace __gnu_test\n \n   struct ConvType\n   { operator int() const; };\n+\n+  class AbstractClass\n+  { virtual void rotate(int) = 0; };\n   \n }; // namespace __gnu_test\n "}, {"sha": "4bbda75280b74dd1196e29522130debf0f62f1ea", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/primary_type_categories/is_function/is_function.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8023b78462af97c3fe7a6b7786a9c19c82107d9/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_function%2Fis_function.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8023b78462af97c3fe7a6b7786a9c19c82107d9/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_function%2Fis_function.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_function%2Fis_function.cc?ref=f8023b78462af97c3fe7a6b7786a9c19c82107d9", "patch": "@@ -1,6 +1,6 @@\n // 2004-12-16  Paolo Carlini  <pcarlini@suse.de>\n //\n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -39,6 +39,8 @@ void test01()\n   VERIFY( (test_category<is_function, int&>(false)) );\n   VERIFY( (test_category<is_function, void>(false)) );\n   VERIFY( (test_category<is_function, const void>(false)) );\n+\n+  VERIFY( (test_category<is_function, AbstractClass>(false)) );\n   \n   // Sanity check.\n   VERIFY( (test_category<is_function, ClassType>(false)) );"}, {"sha": "70e3ac8277a261005b869ed098bfaf7d0d20f721", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/type_properties/is_abstract/is_abstract.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8023b78462af97c3fe7a6b7786a9c19c82107d9/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_abstract%2Fis_abstract.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8023b78462af97c3fe7a6b7786a9c19c82107d9/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_abstract%2Fis_abstract.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_abstract%2Fis_abstract.cc?ref=f8023b78462af97c3fe7a6b7786a9c19c82107d9", "patch": "@@ -0,0 +1,49 @@\n+// 2005-01-28  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 4.5.3 Type properties\n+\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::is_abstract;\n+  using namespace __gnu_test;\n+\n+  // Positive tests.\n+  VERIFY( (test_category<is_abstract, AbstractClass>(true)) );\n+\n+  // Negative tests.\n+  VERIFY( (test_category<is_abstract, void>(false)) );\n+  VERIFY( (test_category<is_abstract, int (int)>(false)) );\n+  VERIFY( (test_category<is_abstract, int&>(false)) );\n+  \n+  // Sanity check.\n+  VERIFY( (test_category<is_abstract, ClassType>(false)) );  \n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c781c550ce0e3d1d285cf229cd8900e94dfb2895", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/type_properties/is_abstract/typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8023b78462af97c3fe7a6b7786a9c19c82107d9/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_abstract%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8023b78462af97c3fe7a6b7786a9c19c82107d9/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_abstract%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_abstract%2Ftypedefs.cc?ref=f8023b78462af97c3fe7a6b7786a9c19c82107d9", "patch": "@@ -0,0 +1,36 @@\n+// 2005-01-28  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// \n+// NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n+\n+#include <tr1/type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::tr1::is_abstract<int>          test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}]}