{"sha": "1d2bc28c41b6ddf0b11a7a3d7d312ff45cb2cb7d", "node_id": "C_kwDOANBUbNoAKDFkMmJjMjhjNDFiNmRkZjBiMTFhN2EzZDdkMzEyZmY0NWNiMmNiN2Q", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2022-08-19T22:40:05Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-09-12T08:16:50Z"}, "message": "[Ada] Fix issues with compiling ACATS test for user-defined literals\n\nThe draft ACATS test (which we developed) for the Ada 2022 feature of\nuser-defined literals has compile-time problems that are fixed with this\nset of changes.  Two of these involve the resolution of named numbers\nin the context where an implicit literal conversion can occur, and for\nequality when a literal or named number is an operand. Furthermore,\nthe compiler can hang in some cases when a numeric literal is used\nin a context where the expected type is a type derived two levels\ndown from a tagged type that specifies a literal aspect.\n\ngcc/ada/\n\n\t* sem_res.adb\n\t(Resolve_Equality_Op): Add handling for equality ops with\n\tuser-defined literal operands.\n\t* sem_util.ads\n\t(Is_User_Defined_Literal): Update spec comment to indicate\n\tinclusion of named number cases.\n\t* sem_util.adb\n\t(Corresponding_Primitive_Op): Rather than following the chain of\n\tancestor subprograms via Alias and Overridden_Operation links, we\n\tcheck for matching profiles between primitive subprograms of the\n\tdescendant type and the ancestor subprogram (by calling a new\n\tnested function Profile_Matches_Ancestor). This prevents the\n\tcompiler from hanging due to circular linkages via those fields\n\tthat can occur between inherited and overriding subprograms\n\t(which might indicate a latent bug, but one that may be rather\n\tdelicate to resolve).\n\t(Profile_Matches_Ancestor): New nested subprogram to compare the\n\tprofile of a primitive subprogram with the profile of a candidate\n\tancestor subprogram.\n\t(Is_User_Defined_Literal): Also return True in cases where the\n\tnode N denotes a named number (E_Name_Integer and E_Named_Real).", "tree": {"sha": "cc3b51e9e1b6ddc58126c78759306c3a423b6fd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc3b51e9e1b6ddc58126c78759306c3a423b6fd8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d2bc28c41b6ddf0b11a7a3d7d312ff45cb2cb7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d2bc28c41b6ddf0b11a7a3d7d312ff45cb2cb7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d2bc28c41b6ddf0b11a7a3d7d312ff45cb2cb7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d2bc28c41b6ddf0b11a7a3d7d312ff45cb2cb7d/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fa4beae4482f4fac6556e1ef2e941787507073e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fa4beae4482f4fac6556e1ef2e941787507073e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fa4beae4482f4fac6556e1ef2e941787507073e"}], "stats": {"total": 116, "additions": 87, "deletions": 29}, "files": [{"sha": "4b76595fb9e30ac68b1d207d86fc7fa4fc0fdeba", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d2bc28c41b6ddf0b11a7a3d7d312ff45cb2cb7d/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d2bc28c41b6ddf0b11a7a3d7d312ff45cb2cb7d/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=1d2bc28c41b6ddf0b11a7a3d7d312ff45cb2cb7d", "patch": "@@ -8876,6 +8876,20 @@ package body Sem_Res is\n          end if;\n \n       else\n+\n+         --  For Ada 2022, check for user-defined literals when the type has\n+         --  the appropriate aspect.\n+\n+         if Has_Applicable_User_Defined_Literal (L, Etype (R)) then\n+            Resolve (L, Etype (R));\n+            Set_Etype (N, Standard_Boolean);\n+         end if;\n+\n+         if Has_Applicable_User_Defined_Literal (R, Etype (L)) then\n+            Resolve (R, Etype (L));\n+            Set_Etype (N, Standard_Boolean);\n+         end if;\n+\n          --  Deal with other error cases\n \n          if T = Any_String    or else"}, {"sha": "b70876486ca781787baf8a62af4aaa9871c23772", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 70, "deletions": 28, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d2bc28c41b6ddf0b11a7a3d7d312ff45cb2cb7d/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d2bc28c41b6ddf0b11a7a3d7d312ff45cb2cb7d/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=1d2bc28c41b6ddf0b11a7a3d7d312ff45cb2cb7d", "patch": "@@ -7182,7 +7182,51 @@ package body Sem_Util is\n       Typ  : constant Entity_Id := Find_Dispatching_Type (Ancestor_Op);\n       Elmt : Elmt_Id;\n       Subp : Entity_Id;\n-      Prim : Entity_Id;\n+\n+      function Profile_Matches_Ancestor (S : Entity_Id) return Boolean;\n+      --  Returns True if subprogram S has the proper profile for an\n+      --  overriding of Ancestor_Op (that is, corresponding formals either\n+      --  have the same type, or are corresponding controlling formals,\n+      --  and similarly for result types).\n+\n+      ------------------------------\n+      -- Profile_Matches_Ancestor --\n+      ------------------------------\n+\n+      function Profile_Matches_Ancestor (S : Entity_Id) return Boolean is\n+         F1 : Entity_Id := First_Formal (Ancestor_Op);\n+         F2 : Entity_Id := First_Formal (S);\n+\n+      begin\n+         if Ekind (Ancestor_Op) /= Ekind (S) then\n+            return False;\n+         end if;\n+\n+         --  ??? This should probably account for anonymous access formals,\n+         --  but the parent function (Corresponding_Primitive_Op) is currently\n+         --  only called for user-defined literal functions, which can't have\n+         --  such formals. But if this is ever used in a more general context\n+         --  it should be extended to handle such formals (and result types).\n+\n+         while Present (F1) and then Present (F2) loop\n+            if Etype (F1) = Etype (F2)\n+              or else Is_Ancestor (Typ, Etype (F2))\n+            then\n+               Next_Formal (F1);\n+               Next_Formal (F2);\n+            else\n+               return False;\n+            end if;\n+         end loop;\n+\n+         return No (F1)\n+           and then No (F2)\n+           and then (Etype (Ancestor_Op) = Etype (S)\n+                      or else Is_Ancestor (Typ, Etype (S)));\n+      end Profile_Matches_Ancestor;\n+\n+   --  Start of processing for Corresponding_Primitive_Op\n+\n    begin\n       pragma Assert (Is_Dispatching_Operation (Ancestor_Op));\n       pragma Assert (Is_Ancestor (Typ, Descendant_Type)\n@@ -7193,12 +7237,12 @@ package body Sem_Util is\n       while Present (Elmt) loop\n          Subp := Node (Elmt);\n \n-         --  For regular primitives we only need to traverse the chain of\n-         --  ancestors when the name matches the name of Ancestor_Op, but\n-         --  for predefined dispatching operations we cannot rely on the\n-         --  name of the primitive to identify a candidate since their name\n-         --  is internally built adding a suffix to the name of the tagged\n-         --  type.\n+         --  For regular primitives we need to check the profile against\n+         --  the ancestor when the name matches the name of Ancestor_Op,\n+         --  but for predefined dispatching operations we cannot rely on\n+         --  the name of the primitive to identify a candidate since their\n+         --  name is internally built by adding a suffix to the name of the\n+         --  tagged type.\n \n          if Chars (Subp) = Chars (Ancestor_Op)\n            or else Is_Predefined_Dispatching_Operation (Subp)\n@@ -7214,26 +7258,10 @@ package body Sem_Util is\n                   return Alias (Subp);\n                end if;\n \n-            --  Traverse the chain of ancestors searching for Ancestor_Op.\n-            --  Overridden primitives have attribute Overridden_Operation;\n-            --  inherited primitives have attribute Alias.\n-\n-            else\n-               Prim := Subp;\n-\n-               while Present (Overridden_Operation (Prim))\n-                 or else Present (Alias (Prim))\n-               loop\n-                  if Present (Overridden_Operation (Prim)) then\n-                     Prim := Overridden_Operation (Prim);\n-                  else\n-                     Prim := Alias (Prim);\n-                  end if;\n+            --  Otherwise, return subprogram when profile matches its ancestor\n \n-                  if Prim = Ancestor_Op then\n-                     return Subp;\n-                  end if;\n-               end loop;\n+            elsif Profile_Matches_Ancestor (Subp) then\n+               return Subp;\n             end if;\n          end if;\n \n@@ -21620,8 +21648,22 @@ package body Sem_Util is\n            N_String_Literal  => Aspect_String_Literal);\n \n    begin\n-      return Nkind (N) in N_Numeric_Or_String_Literal\n-        and then Present (Find_Aspect (Typ, Literal_Aspect_Map (Nkind (N))));\n+      --  Return True when N is either a literal or a named number and the\n+      --  type has the appropriate user-defined literal aspect.\n+\n+      return (Nkind (N) in N_Numeric_Or_String_Literal\n+        and then Present (Find_Aspect (Typ, Literal_Aspect_Map (Nkind (N)))))\n+          or else\n+            (Is_Entity_Name (N)\n+              and then Present (Entity (N))\n+              and then\n+                ((Ekind (Entity (N)) = E_Named_Integer\n+                    and then\n+                      Present (Find_Aspect (Typ, Aspect_Integer_Literal)))\n+                   or else\n+                     (Ekind (Entity (N)) = E_Named_Real\n+                        and then\n+                          Present (Find_Aspect (Typ, Aspect_Real_Literal)))));\n    end Is_User_Defined_Literal;\n \n    --------------------------------------"}, {"sha": "132c2b8cddf3da7c4924a85507d97aa1ef8b5bfb", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d2bc28c41b6ddf0b11a7a3d7d312ff45cb2cb7d/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d2bc28c41b6ddf0b11a7a3d7d312ff45cb2cb7d/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=1d2bc28c41b6ddf0b11a7a3d7d312ff45cb2cb7d", "patch": "@@ -2500,7 +2500,9 @@ package Sem_Util is\n      (N   : Node_Id;\n       Typ : Entity_Id) return Boolean;\n    pragma Inline (Is_User_Defined_Literal);\n-   --  Determine whether N is a user-defined literal for Typ\n+   --  Determine whether N is a user-defined literal for Typ, including\n+   --  the case where N denotes a named number of the appropriate kind\n+   --  when Typ has an Integer_Literal or Real_Literal aspect.\n \n    function Is_Validation_Variable_Reference (N : Node_Id) return Boolean;\n    --  Determine whether N denotes a reference to a variable which captures the"}]}