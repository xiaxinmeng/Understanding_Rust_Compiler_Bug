{"sha": "1c54829e233dc0cf9470d899a4223adaddcf58b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM1NDgyOWUyMzNkYzBjZjk0NzBkODk5YTQyMjNhZGFkZGNmNThiMA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-01T12:50:07Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-01T12:50:07Z"}, "message": "[multiple changes]\n\n2011-08-01  Robert Dewar  <dewar@adacore.com>\n\n\t* par-endh.adb: Minor reformatting.\n\n2011-08-01  Robert Dewar  <dewar@adacore.com>\n\n\t* aspects.ads, aspects.adb: Add aspects for library unit pragmas\n\t(Pre_Post_Aspects): New subtype.\n\t* par-ch12.adb (P_Generic): New syntax for aspects in packages\n\t* par-ch13.adb (P_Aspect_Specifications): Add Semicolon parameter\n\t* par-ch7.adb (P_Package): Remove Decl parameter\n\t(P_Package): Handle new syntax for aspects (before IS)\n\t* par-ch9.adb (P_Protected_Definition): Remove Decl parameter, handle\n\tnew aspect syntax\n\t(P_Task_Definition): Remove Decl parameter, handle new aspect syntax\n\t* par.adb (P_Aspect_Specifications): Add Semicolon parameter\n\t(P_Package): Remove Decl parameter\n\t* sem_ch13.adb (Analyze_Aspect_Specifications): Handle library unit\n\taspects\n\t* sem_ch7.adb (Analyze_Package_Declaration): Analyze new format aspect\n\tspecs\n\t* sem_util.ads, sem_util.adb (Static_Boolean): New function\n\t* sinfo.ads: Document new syntax for aspects in packages etc.\n\t* sprint.adb: Handle new syntax of aspects before IS in package\n\n2011-08-01  Thomas Quinot  <quinot@adacore.com>\n\n\t* atree.ads: Minor reformatting.\n\t* sem_prag.adb: Minor reformatting.\n\n2011-08-01  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_util.adb (Insert_Actions): Fix error in handling Actions for\n\tcase expr alternative.\n\n2011-08-01  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch12.adb: Fix typo.\n\nFrom-SVN: r177027", "tree": {"sha": "592fedc48daee6974dff82477bfaa858be60a327", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/592fedc48daee6974dff82477bfaa858be60a327"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c54829e233dc0cf9470d899a4223adaddcf58b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c54829e233dc0cf9470d899a4223adaddcf58b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c54829e233dc0cf9470d899a4223adaddcf58b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c54829e233dc0cf9470d899a4223adaddcf58b0/comments", "author": null, "committer": null, "parents": [{"sha": "9eea4346af869733ba91b92d40a78de3541d3be0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eea4346af869733ba91b92d40a78de3541d3be0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9eea4346af869733ba91b92d40a78de3541d3be0"}], "stats": {"total": 548, "additions": 401, "deletions": 147}, "files": [{"sha": "e73a3cda6b540b33e48669033396636717ccb4b2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c54829e233dc0cf9470d899a4223adaddcf58b0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c54829e233dc0cf9470d899a4223adaddcf58b0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1c54829e233dc0cf9470d899a4223adaddcf58b0", "patch": "@@ -1,3 +1,42 @@\n+2011-08-01  Robert Dewar  <dewar@adacore.com>\n+\n+\t* par-endh.adb: Minor reformatting.\n+\n+2011-08-01  Robert Dewar  <dewar@adacore.com>\n+\n+\t* aspects.ads, aspects.adb: Add aspects for library unit pragmas\n+\t(Pre_Post_Aspects): New subtype.\n+\t* par-ch12.adb (P_Generic): New syntax for aspects in packages\n+\t* par-ch13.adb (P_Aspect_Specifications): Add Semicolon parameter\n+\t* par-ch7.adb (P_Package): Remove Decl parameter\n+\t(P_Package): Handle new syntax for aspects (before IS)\n+\t* par-ch9.adb (P_Protected_Definition): Remove Decl parameter, handle\n+\tnew aspect syntax\n+\t(P_Task_Definition): Remove Decl parameter, handle new aspect syntax\n+\t* par.adb (P_Aspect_Specifications): Add Semicolon parameter\n+\t(P_Package): Remove Decl parameter\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications): Handle library unit\n+\taspects\n+\t* sem_ch7.adb (Analyze_Package_Declaration): Analyze new format aspect\n+\tspecs\n+\t* sem_util.ads, sem_util.adb (Static_Boolean): New function\n+\t* sinfo.ads: Document new syntax for aspects in packages etc.\n+\t* sprint.adb: Handle new syntax of aspects before IS in package\n+\n+2011-08-01  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* atree.ads: Minor reformatting.\n+\t* sem_prag.adb: Minor reformatting.\n+\n+2011-08-01  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_util.adb (Insert_Actions): Fix error in handling Actions for\n+\tcase expr alternative.\n+\n+2011-08-01  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch12.adb: Fix typo.\n+\n 2011-08-01  Geert Bosch  <bosch@adacore.com>\n \n \t* sem_prag.adb (Check_No_Link_Name): New procedure."}, {"sha": "3ad24698879ecb3d52c0a229bb2007438c50875a", "filename": "gcc/ada/aspects.adb", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c54829e233dc0cf9470d899a4223adaddcf58b0/gcc%2Fada%2Faspects.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c54829e233dc0cf9470d899a4223adaddcf58b0/gcc%2Fada%2Faspects.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.adb?ref=1c54829e233dc0cf9470d899a4223adaddcf58b0", "patch": "@@ -143,14 +143,18 @@ package body Aspects is\n       N_Object_Declaration                     => True,\n       N_Package_Declaration                    => True,\n       N_Package_Instantiation                  => True,\n+      N_Package_Specification                  => True,\n       N_Private_Extension_Declaration          => True,\n       N_Private_Type_Declaration               => True,\n       N_Procedure_Instantiation                => True,\n+      N_Protected_Body                         => True,\n       N_Protected_Type_Declaration             => True,\n       N_Single_Protected_Declaration           => True,\n       N_Single_Task_Declaration                => True,\n+      N_Subprogram_Body                        => True,\n       N_Subprogram_Declaration                 => True,\n       N_Subtype_Declaration                    => True,\n+      N_Task_Body                              => True,\n       N_Task_Type_Declaration                  => True,\n       others                                   => False);\n \n@@ -165,8 +169,8 @@ package body Aspects is\n \n    --  Table used for Same_Aspect, maps aspect to canonical aspect\n \n-   Canonical_Aspect : constant array (Aspect_Id) of Aspect_Id := (\n-    No_Aspect                           => No_Aspect,\n+   Canonical_Aspect : constant array (Aspect_Id) of Aspect_Id :=\n+   (No_Aspect                           => No_Aspect,\n     Aspect_Ada_2005                     => Aspect_Ada_2005,\n     Aspect_Ada_2012                     => Aspect_Ada_2005,\n     Aspect_Address                      => Aspect_Address,\n@@ -181,6 +185,17 @@ package body Aspects is\n     Aspect_Favor_Top_Level              => Aspect_Favor_Top_Level,\n     Aspect_Inline                       => Aspect_Inline,\n     Aspect_Inline_Always                => Aspect_Inline,\n+    Aspect_All_Calls_Remote             => Aspect_All_Calls_Remote,\n+    Aspect_Compiler_Unit                => Aspect_Compiler_Unit,\n+    Aspect_Elaborate_Body               => Aspect_Elaborate_Body,\n+    Aspect_Preelaborate                 => Aspect_Preelaborate,\n+    Aspect_Preelaborate_05              => Aspect_Preelaborate_05,\n+    Aspect_Pure                         => Aspect_Pure,\n+    Aspect_Pure_05                      => Aspect_Pure_05,\n+    Aspect_Remote_Call_Interface        => Aspect_Remote_Call_Interface,\n+    Aspect_Remote_Types                 => Aspect_Remote_Types,\n+    Aspect_Shared_Passive               => Aspect_Shared_Passive,\n+    Aspect_Universal_Data               => Aspect_Universal_Data,\n     Aspect_Input                        => Aspect_Input,\n     Aspect_Invariant                    => Aspect_Invariant,\n     Aspect_Machine_Radix                => Aspect_Machine_Radix,"}, {"sha": "e2e7e6f0a40990b4e5c36c1e4fd0a7477e1cd6e8", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 41, "deletions": 2, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c54829e233dc0cf9470d899a4223adaddcf58b0/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c54829e233dc0cf9470d899a4223adaddcf58b0/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=1c54829e233dc0cf9470d899a4223adaddcf58b0", "patch": "@@ -73,9 +73,24 @@ package Aspects is\n       Aspect_Warnings,\n       Aspect_Write,\n \n+      --  The following aspects correspond to library unit pragmas\n+\n+      Aspect_All_Calls_Remote,\n+      Aspect_Compiler_Unit,                 -- GNAT\n+      Aspect_Elaborate_Body,\n+      Aspect_Preelaborate,\n+      Aspect_Preelaborate_05,               -- GNAT\n+      Aspect_Pure,\n+      Aspect_Pure_05,                       -- GNAT\n+      Aspect_Remote_Call_Interface,\n+      Aspect_Remote_Types,\n+      Aspect_Shared_Passive,\n+      Aspect_Universal_Data,                -- GNAT\n+\n       --  Remaining aspects have a static boolean value that turns the aspect\n       --  on or off. They all correspond to pragmas, and the flag Aspect_Cancel\n-      --  is set on the pragma if the corresponding aspect is False.\n+      --  is set on the pragma if the corresponding aspect is False. These are\n+      --  also Boolean aspects as defined below.\n \n       Aspect_Ada_2005,                      -- GNAT\n       Aspect_Ada_2012,                      -- GNAT\n@@ -109,6 +124,14 @@ package Aspects is\n                         Aspect_Post          => True,\n                         others               => False);\n \n+   --  The following subtype defines aspects corresponding to library unit\n+   --  pragmas, these can only validly appear as aspects for library units,\n+   --  and result in a corresponding pragma being inserted immediately after\n+   --  the occurrence of the aspect.\n+\n+   subtype Library_Unit_Aspects is\n+     Aspect_Id range Aspect_All_Calls_Remote .. Aspect_Universal_Data;\n+\n    --  The following subtype defines aspects accepting an optional static\n    --  boolean parameter indicating if the aspect should be active or\n    --  cancelling. If the parameter is missing the effective value is True,\n@@ -119,6 +142,9 @@ package Aspects is\n    subtype Boolean_Aspects is\n      Aspect_Id range Aspect_Ada_2005 .. Aspect_Id'Last;\n \n+   subtype Pre_Post_Aspects is\n+     Aspect_Id range Aspect_Post .. Aspect_Precondition;\n+\n    --  The following type is used for indicating allowed expression forms\n \n    type Aspect_Expression is\n@@ -158,6 +184,8 @@ package Aspects is\n                         Aspect_Value_Size        => Expression,\n                         Aspect_Warnings          => Name,\n                         Aspect_Write             => Name,\n+\n+                        Library_Unit_Aspects     => Optional,\n                         Boolean_Aspects          => Optional);\n \n    -----------------------------------------\n@@ -176,12 +204,15 @@ package Aspects is\n      (Name_Ada_2012,                     Aspect_Ada_2012),\n      (Name_Address,                      Aspect_Address),\n      (Name_Alignment,                    Aspect_Alignment),\n+     (Name_All_Calls_Remote,             Aspect_All_Calls_Remote),\n      (Name_Atomic,                       Aspect_Atomic),\n      (Name_Atomic_Components,            Aspect_Atomic_Components),\n      (Name_Bit_Order,                    Aspect_Bit_Order),\n+     (Name_Compiler_Unit,                Aspect_Compiler_Unit),\n      (Name_Component_Size,               Aspect_Component_Size),\n-     (Name_Dynamic_Predicate,            Aspect_Dynamic_Predicate),\n      (Name_Discard_Names,                Aspect_Discard_Names),\n+     (Name_Dynamic_Predicate,            Aspect_Dynamic_Predicate),\n+     (Name_Elaborate_Body,               Aspect_Elaborate_Body),\n      (Name_External_Tag,                 Aspect_External_Tag),\n      (Name_Favor_Top_Level,              Aspect_Favor_Top_Level),\n      (Name_Inline,                       Aspect_Inline),\n@@ -199,9 +230,16 @@ package Aspects is\n      (Name_Precondition,                 Aspect_Precondition),\n      (Name_Predicate,                    Aspect_Predicate),\n      (Name_Preelaborable_Initialization, Aspect_Preelaborable_Initialization),\n+     (Name_Preelaborate,                 Aspect_Preelaborate),\n+     (Name_Preelaborate_05,              Aspect_Preelaborate_05),\n+     (Name_Pure,                         Aspect_Pure),\n+     (Name_Pure_05,                      Aspect_Pure_05),\n      (Name_Pure_Function,                Aspect_Pure_Function),\n      (Name_Read,                         Aspect_Read),\n+     (Name_Remote_Call_Interface,        Aspect_Remote_Call_Interface),\n+     (Name_Remote_Types,                 Aspect_Remote_Types),\n      (Name_Shared,                       Aspect_Shared),\n+     (Name_Shared_Passive,               Aspect_Shared_Passive),\n      (Name_Size,                         Aspect_Size),\n      (Name_Static_Predicate,             Aspect_Static_Predicate),\n      (Name_Storage_Pool,                 Aspect_Storage_Pool),\n@@ -212,6 +250,7 @@ package Aspects is\n      (Name_Type_Invariant,               Aspect_Type_Invariant),\n      (Name_Unchecked_Union,              Aspect_Unchecked_Union),\n      (Name_Universal_Aliasing,           Aspect_Universal_Aliasing),\n+     (Name_Universal_Data,               Aspect_Universal_Data),\n      (Name_Unmodified,                   Aspect_Unmodified),\n      (Name_Unreferenced,                 Aspect_Unreferenced),\n      (Name_Unreferenced_Objects,         Aspect_Unreferenced_Objects),"}, {"sha": "ccd4ac2df0a4adcca9fb31e91bca71d1c468afd3", "filename": "gcc/ada/atree.ads", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c54829e233dc0cf9470d899a4223adaddcf58b0/gcc%2Fada%2Fatree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c54829e233dc0cf9470d899a4223adaddcf58b0/gcc%2Fada%2Fatree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.ads?ref=1c54829e233dc0cf9470d899a4223adaddcf58b0", "patch": "@@ -821,7 +821,7 @@ package Atree is\n    pragma Inline (Is_Rewrite_Insertion);\n    --  Tests whether the given node was marked using Mark_Rewrite_Insertion.\n    --  This is used in reconstructing the original tree (where such nodes are\n-   --  to be eliminated from the reconstructed tree).\n+   --  to be eliminated).\n \n    procedure Rewrite (Old_Node, New_Node : Node_Id);\n    --  This is used when a complete subtree is to be replaced. Old_Node is the\n@@ -889,17 +889,17 @@ package Atree is\n \n    package Unchecked_Access is\n \n-      --  Functions to allow interpretation of Union_Id values as Uint\n-      --  and Ureal values\n+      --  Functions to allow interpretation of Union_Id values as Uint and\n+      --  Ureal values\n \n       function To_Union is new Unchecked_Conversion (Uint,  Union_Id);\n       function To_Union is new Unchecked_Conversion (Ureal, Union_Id);\n \n       function From_Union is new Unchecked_Conversion (Union_Id, Uint);\n       function From_Union is new Unchecked_Conversion (Union_Id, Ureal);\n \n-      --  Functions to fetch contents of indicated field. It is an error\n-      --  to attempt to read the value of a field which is not present.\n+      --  Functions to fetch contents of indicated field. It is an error to\n+      --  attempt to read the value of a field which is not present.\n \n       function Field1 (N : Node_Id) return Union_Id;\n       pragma Inline (Field1);\n@@ -1150,10 +1150,10 @@ package Atree is\n       function Str3 (N : Node_Id) return String_Id;\n       pragma Inline (Str3);\n \n-      --  Note: the following Uintnn functions have a special test for\n-      --  the Field value being Empty. If an Empty value is found then\n-      --  Uint_0 is returned. This avoids the rather tricky requirement\n-      --  of initializing all Uint fields in nodes and entities.\n+      --  Note: the following Uintnn functions have a special test for the\n+      --  Field value being Empty. If an Empty value is found then Uint_0 is\n+      --  returned. This avoids the rather tricky requirement of initializing\n+      --  all Uint fields in nodes and entities.\n \n       function Uint2 (N : Node_Id) return Uint;\n       pragma Inline (Uint2);\n@@ -3023,8 +3023,8 @@ package Atree is\n       procedure Set_Flag254 (N : Node_Id; Val : Boolean);\n       pragma Inline (Set_Flag254);\n \n-      --  The following versions of Set_Noden also set the parent\n-      --  pointer of the referenced node if it is non_Empty\n+      --  The following versions of Set_Noden also set the parent pointer of\n+      --  the referenced node if it is not Empty.\n \n       procedure Set_Node1_With_Parent (N : Node_Id; Val : Node_Id);\n       pragma Inline (Set_Node1_With_Parent);\n@@ -3042,8 +3042,7 @@ package Atree is\n       pragma Inline (Set_Node5_With_Parent);\n \n       --  The following versions of Set_Listn also set the parent pointer of\n-      --  the referenced node if it is non_Empty. The procedures for List6\n-      --  to List12 can only be applied to nodes which have an extension.\n+      --  the referenced node if it is not Empty.\n \n       procedure Set_List1_With_Parent (N : Node_Id; Val : List_Id);\n       pragma Inline (Set_List1_With_Parent);"}, {"sha": "48e22831799dd9fc580b403c1f8508aab80356f3", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c54829e233dc0cf9470d899a4223adaddcf58b0/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c54829e233dc0cf9470d899a4223adaddcf58b0/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=1c54829e233dc0cf9470d899a4223adaddcf58b0", "patch": "@@ -2520,7 +2520,7 @@ package body Exp_Util is\n                     (Last (Actions (P)), Ins_Actions);\n                else\n                   Set_Actions (P, Ins_Actions);\n-                  Analyze_List (Then_Actions (P));\n+                  Analyze_List (Actions (P));\n                end if;\n \n                return;"}, {"sha": "49962d8c5156d873c19cdbf2bcba493fa76cbd5f", "filename": "gcc/ada/par-ch12.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c54829e233dc0cf9470d899a4223adaddcf58b0/gcc%2Fada%2Fpar-ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c54829e233dc0cf9470d899a4223adaddcf58b0/gcc%2Fada%2Fpar-ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch12.adb?ref=1c54829e233dc0cf9470d899a4223adaddcf58b0", "patch": "@@ -202,7 +202,7 @@ package body Ch12 is\n \n       if Token = Tok_Package then\n          Gen_Decl := New_Node (N_Generic_Package_Declaration, Gen_Sloc);\n-         Set_Specification (Gen_Decl, P_Package (Pf_Spcn, Gen_Decl));\n+         Set_Specification (Gen_Decl, P_Package (Pf_Spcn));\n \n       else\n          Gen_Decl := New_Node (N_Generic_Subprogram_Declaration, Gen_Sloc);"}, {"sha": "e3f72c7d428a8c407625e964a526244ad39ac315", "filename": "gcc/ada/par-ch13.adb", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c54829e233dc0cf9470d899a4223adaddcf58b0/gcc%2Fada%2Fpar-ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c54829e233dc0cf9470d899a4223adaddcf58b0/gcc%2Fada%2Fpar-ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch13.adb?ref=1c54829e233dc0cf9470d899a4223adaddcf58b0", "patch": "@@ -381,7 +381,10 @@ package body Ch13 is\n \n    --  Error recovery: cannot raise Error_Resync\n \n-   procedure P_Aspect_Specifications (Decl : Node_Id) is\n+   procedure P_Aspect_Specifications\n+     (Decl      : Node_Id;\n+      Semicolon : Boolean := True)\n+   is\n       Aspects : List_Id;\n       Aspect  : Node_Id;\n       A_Id    : Aspect_Id;\n@@ -392,7 +395,10 @@ package body Ch13 is\n       --  Check if aspect specification present\n \n       if not Aspect_Specifications_Present then\n-         TF_Semicolon;\n+         if Semicolon then\n+            TF_Semicolon;\n+         end if;\n+\n          return;\n       end if;\n \n@@ -411,7 +417,11 @@ package body Ch13 is\n \n          if Token /= Tok_Identifier then\n             Error_Msg_SC (\"aspect identifier expected\");\n-            Resync_Past_Semicolon;\n+\n+            if Semicolon then\n+               Resync_Past_Semicolon;\n+            end if;\n+\n             return;\n          end if;\n \n@@ -454,7 +464,10 @@ package body Ch13 is\n                OK := False;\n \n             else\n-               Resync_Past_Semicolon;\n+               if Semicolon then\n+                  Resync_Past_Semicolon;\n+               end if;\n+\n                return;\n             end if;\n \n@@ -495,7 +508,10 @@ package body Ch13 is\n \n             --  Test case of missing aspect definition\n \n-            if Token = Tok_Comma or else Token = Tok_Semicolon then\n+            if Token = Tok_Comma\n+              or else Token = Tok_Semicolon\n+              or else (not Semicolon and then Token /= Tok_Arrow)\n+            then\n                if Aspect_Argument (A_Id) /= Optional then\n                   Error_Msg_Node_1 := Aspect;\n                   Error_Msg_AP (\"aspect& requires an aspect definition\");\n@@ -527,8 +543,14 @@ package body Ch13 is\n \n             if Token = Tok_Comma then\n                Scan; -- past comma\n+\n+            --  Must be terminator character\n+\n             else\n-               T_Semicolon;\n+               if Semicolon then\n+                  T_Semicolon;\n+               end if;\n+\n                exit;\n             end if;\n          end if;"}, {"sha": "45a0fb1beb6e4dc58b9372471ba31a6e2eaf1cb8", "filename": "gcc/ada/par-ch7.adb", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c54829e233dc0cf9470d899a4223adaddcf58b0/gcc%2Fada%2Fpar-ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c54829e233dc0cf9470d899a4223adaddcf58b0/gcc%2Fada%2Fpar-ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch7.adb?ref=1c54829e233dc0cf9470d899a4223adaddcf58b0", "patch": "@@ -92,15 +92,17 @@ package body Ch7 is\n \n    --  Error recovery: cannot raise Error_Resync\n \n-   function P_Package\n-     (Pf_Flags : Pf_Rec;\n-      Decl     : Node_Id := Empty) return Node_Id\n-   is\n+   function P_Package (Pf_Flags : Pf_Rec) return Node_Id is\n       Package_Node       : Node_Id;\n       Specification_Node : Node_Id;\n       Name_Node          : Node_Id;\n       Package_Sloc       : Source_Ptr;\n \n+      Dummy_Node : constant Node_Id :=\n+                     New_Node (N_Package_Specification, Token_Ptr);\n+      --  Dummy node to attach aspect specifications to until we properly\n+      --  figure out where they eventually belong.\n+\n    begin\n       Push_Scope_Stack;\n       Scope.Table (Scope.Last).Etyp := E_Name;\n@@ -147,8 +149,6 @@ package body Ch7 is\n             Parse_Decls_Begin_End (Package_Node);\n          end if;\n \n-         return Package_Node;\n-\n       --  Cases other than Package_Body\n \n       else\n@@ -174,9 +174,11 @@ package body Ch7 is\n             No_Constraint;\n             TF_Semicolon;\n             Pop_Scope_Stack;\n-            return Package_Node;\n+\n+         --  Generic package instantiation or package declaration\n \n          else\n+            P_Aspect_Specifications (Dummy_Node, Semicolon => False);\n             TF_Is;\n \n             --  Case of generic instantiation\n@@ -190,12 +192,12 @@ package body Ch7 is\n                Scan; -- past NEW\n \n                Package_Node :=\n-                  New_Node (N_Package_Instantiation, Package_Sloc);\n+                 New_Node (N_Package_Instantiation, Package_Sloc);\n                Set_Defining_Unit_Name (Package_Node, Name_Node);\n                Set_Name (Package_Node, P_Qualified_Simple_Name);\n                Set_Generic_Associations\n                  (Package_Node, P_Generic_Actual_Part_Opt);\n-               P_Aspect_Specifications (Package_Node);\n+               P_Aspect_Specifications (Error);\n                Pop_Scope_Stack;\n \n             --  Case of package declaration or package specification\n@@ -249,16 +251,13 @@ package body Ch7 is\n                   Discard_Junk_List (P_Sequence_Of_Statements (SS_None));\n                end if;\n \n-               if Nkind (Package_Node) = N_Package_Declaration then\n-                  End_Statements (Specification_Node, Package_Node);\n-               else\n-                  End_Statements (Specification_Node, Decl);\n-               end if;\n+               End_Statements (Specification_Node);\n             end if;\n-\n-            return Package_Node;\n          end if;\n       end if;\n+\n+      Move_Aspects (From => Dummy_Node, To => Package_Node);\n+      return Package_Node;\n    end P_Package;\n \n    ------------------------------"}, {"sha": "83233b6ff9fe0be619cb4c902565d514c6ff2541", "filename": "gcc/ada/par-ch9.adb", "status": "modified", "additions": 24, "deletions": 32, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c54829e233dc0cf9470d899a4223adaddcf58b0/gcc%2Fada%2Fpar-ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c54829e233dc0cf9470d899a4223adaddcf58b0/gcc%2Fada%2Fpar-ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch9.adb?ref=1c54829e233dc0cf9470d899a4223adaddcf58b0", "patch": "@@ -40,33 +40,25 @@ package body Ch9 is\n    function P_Entry_Body_Formal_Part               return Node_Id;\n    function P_Entry_Declaration                    return Node_Id;\n    function P_Entry_Index_Specification            return Node_Id;\n+   function P_Protected_Definition                 return Node_Id;\n    function P_Protected_Operation_Declaration_Opt  return Node_Id;\n    function P_Protected_Operation_Items            return List_Id;\n    function P_Task_Items                           return List_Id;\n-\n-   function P_Protected_Definition (Decl : Node_Id) return Node_Id;\n-   --  Parses protected definition and following aspect specifications if\n-   --  present. The argument is the declaration node to which the aspect\n-   --  specifications are to be attached.\n-\n-   function P_Task_Definition (Decl : Node_Id) return Node_Id;\n-   --  Parses task definition and following aspect specifications if present.\n-   --  The argument is the declaration node to which the aspect specifications\n-   --  are to be attached.\n+   function P_Task_Definition return Node_Id;\n \n    -----------------------------\n    -- 9.1  Task (also 10.1.3) --\n    -----------------------------\n \n    --  TASK_TYPE_DECLARATION ::=\n    --    task type DEFINING_IDENTIFIER [KNOWN_DISCRIMINANT_PART]\n-   --      [is [new INTERFACE_LIST with] TASK_DEFINITION]\n-   --        [ASPECT_SPECIFICATIONS];\n+   --      [ASPECT_SPECIFICATIONS]\n+   --      [is [new INTERFACE_LIST with] TASK_DEFINITION];\n \n    --  SINGLE_TASK_DECLARATION ::=\n    --    task DEFINING_IDENTIFIER\n-   --      [is [new INTERFACE_LIST with] TASK_DEFINITION]\n-   --        [ASPECT_SPECIFICATIONS];\n+   --      [ASPECT_SPECIFICATIONS]\n+   --      [is [new INTERFACE_LIST with] TASK_DEFINITION];\n \n    --  TASK_BODY ::=\n    --    task body DEFINING_IDENTIFIER is\n@@ -153,27 +145,26 @@ package body Ch9 is\n             end if;\n          end if;\n \n-         --  If we have aspect definitions present here, then we do not have\n-         --  a task definition present.\n+         --  Scan aspect specifications, don't eat the semicolon, since it\n+         --  might not be there if we have an IS.\n \n-         if Aspect_Specifications_Present then\n-            P_Aspect_Specifications (Task_Node);\n+         P_Aspect_Specifications (Task_Node, Semicolon => False);\n \n          --  Parse optional task definition. Note that P_Task_Definition scans\n          --  out the semicolon and possible aspect specifications as well as\n          --  the task definition itself.\n \n-         elsif Token = Tok_Semicolon then\n+         if Token = Tok_Semicolon then\n \n-            --  A little check, if the next token after semicolon is\n-            --  Entry, then surely the semicolon should really be IS\n+            --  A little check, if the next token after semicolon is Entry,\n+            --  then surely the semicolon should really be IS\n \n             Scan; -- past semicolon\n \n             if Token = Tok_Entry then\n                Error_Msg_SP -- CODEFIX\n                  (\"|\"\";\"\" should be IS\");\n-               Set_Task_Definition (Task_Node, P_Task_Definition (Task_Node));\n+               Set_Task_Definition (Task_Node, P_Task_Definition);\n             else\n                Pop_Scope_Stack; -- Remove unused entry\n             end if;\n@@ -214,7 +205,7 @@ package body Ch9 is\n                end if;\n             end if;\n \n-            Set_Task_Definition (Task_Node, P_Task_Definition (Task_Node));\n+            Set_Task_Definition (Task_Node, P_Task_Definition);\n          end if;\n \n          return Task_Node;\n@@ -253,7 +244,7 @@ package body Ch9 is\n \n    --  Error recovery:  cannot raise Error_Resync\n \n-   function P_Task_Definition (Decl : Node_Id) return Node_Id is\n+   function P_Task_Definition return Node_Id is\n       Def_Node  : Node_Id;\n \n    begin\n@@ -273,7 +264,7 @@ package body Ch9 is\n          end loop;\n       end if;\n \n-      End_Statements (Def_Node, Decl);\n+      End_Statements (Def_Node);\n       return Def_Node;\n    end P_Task_Definition;\n \n@@ -367,13 +358,13 @@ package body Ch9 is\n \n    --  PROTECTED_TYPE_DECLARATION ::=\n    --    protected type DEFINING_IDENTIFIER [KNOWN_DISCRIMINANT_PART]\n-   --      is [new INTERFACE_LIST with] PROTECTED_DEFINITION\n-   --        [ASPECT_SPECIFICATIONS];\n+   --      [ASPECT_SPECIFICATIONS]\n+   --    is [new INTERFACE_LIST with] PROTECTED_DEFINITION;\n \n    --  SINGLE_PROTECTED_DECLARATION ::=\n    --    protected DEFINING_IDENTIFIER\n+   --      [ASPECT_SPECIFICATIONS]\n    --    is [new INTERFACE_LIST with] PROTECTED_DEFINITION;\n-   --      [ASPECT_SPECIFICATIONS];\n \n    --  PROTECTED_BODY ::=\n    --    protected body DEFINING_IDENTIFIER is\n@@ -464,6 +455,8 @@ package body Ch9 is\n             Scope.Table (Scope.Last).Labl := Name_Node;\n          end if;\n \n+         P_Aspect_Specifications (Protected_Node, Semicolon => False);\n+\n          --  Check for semicolon not followed by IS, this is something like\n \n          --    protected type r;\n@@ -525,8 +518,7 @@ package body Ch9 is\n             Scan; -- past WITH\n          end if;\n \n-         Set_Protected_Definition\n-           (Protected_Node, P_Protected_Definition (Protected_Node));\n+         Set_Protected_Definition (Protected_Node, P_Protected_Definition);\n          return Protected_Node;\n       end if;\n    end P_Protected;\n@@ -561,7 +553,7 @@ package body Ch9 is\n \n    --  Error recovery: cannot raise Error_Resync\n \n-   function P_Protected_Definition (Decl : Node_Id) return Node_Id is\n+   function P_Protected_Definition return Node_Id is\n       Def_Node  : Node_Id;\n       Item_Node : Node_Id;\n \n@@ -607,7 +599,7 @@ package body Ch9 is\n          end loop Declaration_Loop;\n       end loop Private_Loop;\n \n-      End_Statements (Def_Node, Decl);\n+      End_Statements (Def_Node);\n       return Def_Node;\n    end P_Protected_Definition;\n "}, {"sha": "ca3506dd94d625ed803c08abd39557b1d916f984", "filename": "gcc/ada/par-endh.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c54829e233dc0cf9470d899a4223adaddcf58b0/gcc%2Fada%2Fpar-endh.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c54829e233dc0cf9470d899a4223adaddcf58b0/gcc%2Fada%2Fpar-endh.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-endh.adb?ref=1c54829e233dc0cf9470d899a4223adaddcf58b0", "patch": "@@ -654,7 +654,8 @@ package body Endh is\n \n    procedure End_Statements\n      (Parent : Node_Id := Empty;\n-      Decl   : Node_Id := Empty) is\n+      Decl   : Node_Id := Empty)\n+   is\n    begin\n       --  This loop runs more than once in the case where Check_End rejects\n       --  the END sequence, as indicated by Check_End returning False."}, {"sha": "99f6806057d7ad1ee5f7a1ffe3ea01595343c3dc", "filename": "gcc/ada/par.adb", "status": "modified", "additions": 26, "deletions": 19, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c54829e233dc0cf9470d899a4223adaddcf58b0/gcc%2Fada%2Fpar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c54829e233dc0cf9470d899a4223adaddcf58b0/gcc%2Fada%2Fpar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar.adb?ref=1c54829e233dc0cf9470d899a4223adaddcf58b0", "patch": "@@ -762,14 +762,10 @@ function Par (Configuration_Pragmas : Boolean) return List_Id is\n    -------------\n \n    package Ch7 is\n-      function P_Package\n-        (Pf_Flags : Pf_Rec;\n-         Decl     : Node_Id := Empty) return Node_Id;\n+      function P_Package (Pf_Flags : Pf_Rec) return Node_Id;\n       --  Scans out any construct starting with the keyword PACKAGE. The\n       --  parameter indicates which possible kinds of construct (body, spec,\n-      --  instantiation etc.) are permissible in the current context. Decl\n-      --  is set in the specification case to request that if there are aspect\n-      --  specifications present, they be associated with this declaration.\n+      --  instantiation etc.) are permissible in the current context.\n    end Ch7;\n \n    -------------\n@@ -863,19 +859,30 @@ function Par (Configuration_Pragmas : Boolean) return List_Id is\n       --  rather more generous in considering something ill-formed to be an\n       --  attempt at an aspect specification. The default is more strict for\n       --  Ada versions before Ada 2012 (where aspect specifications are not\n-      --  permitted).\n-\n-      procedure P_Aspect_Specifications (Decl : Node_Id);\n-      --  This subprogram is called with the current token pointing to either a\n-      --  WITH keyword starting an aspect specification, or a semicolon. In the\n-      --  former case, the aspect specifications are scanned out including the\n-      --  terminating semicolon, the Has_Aspect_Specifications flag is set in\n-      --  the given declaration node, and the list of aspect specifications is\n-      --  constructed and associated with this declaration node using a call to\n-      --  Set_Aspect_Specifications. If no WITH keyword is present, then this\n-      --  call has no effect other than scanning out the semicolon. If Decl is\n-      --  Error on entry, any scanned aspect specifications are ignored and a\n-      --  message is output saying aspect specifications not permitted here.\n+      --  permitted). Note: this routine never checks the terminator token\n+      --  for aspects so it does not matter whether the aspect speficiations\n+      --  are terminated by semicolon or some other character\n+\n+      procedure P_Aspect_Specifications\n+        (Decl      : Node_Id;\n+         Semicolon : Boolean := True);\n+      --  This procedure scans out a series of aspect spefications. If argument\n+      --  Semicolon is True, a terminating semicolon is also scanned. If this\n+      --  argument is False, the scan pointer is left pointing past the aspects\n+      --  and the caller must check for a proper terminator.\n+      --  left pointing past the aspects, presumably pointing to a terminator.\n+      --\n+      --  P_Aspect_Specification is called with the current token pointing to\n+      --  either a WITH keyword starting an aspect specification, or an\n+      --  instance of the terminator token. In the former case, the aspect\n+      --  specifications are scanned out including the terminator token if it\n+      --  it is a semicolon, and the Has_Aspect_Specifications flag is set in\n+      --  the given declaration node. A list of aspects is built and stored for\n+      --  this declaration node using a call to Set_Aspect_Specifications. If\n+      --  no WITH keyword is present, then this call has no effect other than\n+      --  scanning out the terminator if it is a semicolon. If Decl is Error on\n+      --  entry, any scanned aspect specifications are ignored and a message is\n+      --  output saying aspect specifications not permitted here.\n \n       function P_Code_Statement (Subtype_Mark : Node_Id) return Node_Id;\n       --  Function to parse a code statement. The caller has scanned out"}, {"sha": "697ec53441c5041352275503b162ccc0e0c4a224", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c54829e233dc0cf9470d899a4223adaddcf58b0/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c54829e233dc0cf9470d899a4223adaddcf58b0/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=1c54829e233dc0cf9470d899a4223adaddcf58b0", "patch": "@@ -5501,7 +5501,6 @@ package body Sem_Ch12 is\n            and then Is_Private_Type (Designated_Type (T))\n            and then not Has_Private_View (N)\n            and then Present (Full_View (Designated_Type (T)))\n-           and then Used_As_Generic_Actual (T)\n          then\n             Switch_View (Designated_Type (T));\n "}, {"sha": "59a1cb5d8a620afe662a372be58bc8e048de8b56", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 82, "deletions": 16, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c54829e233dc0cf9470d899a4223adaddcf58b0/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c54829e233dc0cf9470d899a4223adaddcf58b0/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=1c54829e233dc0cf9470d899a4223adaddcf58b0", "patch": "@@ -843,6 +843,47 @@ package body Sem_Ch13 is\n                      Set_Is_Delayed_Aspect (Aspect);\n                   end if;\n \n+               --  Library unit aspects. These are boolean aspects, but we\n+               --  always evaluate the expression right away if it is present\n+               --  and just ignore the aspect if the expression is False. We\n+               --  never delay expression evaluation in this case.\n+\n+               when Library_Unit_Aspects =>\n+                  if Present (Expr)\n+                    and then Is_False (Static_Boolean (Expr))\n+                  then\n+                     goto Continue;\n+                  end if;\n+\n+                  --  Build corresponding pragma node\n+\n+                  Aitem :=\n+                    Make_Pragma (Loc,\n+                      Pragma_Argument_Associations => New_List (Ent),\n+                      Pragma_Identifier            =>\n+                        Make_Identifier (Sloc (Id), Chars (Id)));\n+\n+                  --  This requires special handling in the case of a package\n+                  --  declaration, the pragma needs to be inserted in the list\n+                  --  of declarations for the associated package. There is no\n+                  --  issue of visibility delay for these aspects.\n+\n+                  if Nkind (N) = N_Package_Declaration then\n+                     if Nkind (Parent (N)) /= N_Compilation_Unit then\n+                        Error_Msg_N\n+                          (\"incorrect context for library unit aspect&\", Id);\n+                     else\n+                        Prepend\n+                          (Aitem, Visible_Declarations (Specification (N)));\n+                     end if;\n+\n+                     goto Continue;\n+                  end if;\n+\n+                  --  If not package declaration, no delay is required\n+\n+                  Delay_Required := False;\n+\n                --  Aspects corresponding to attribute definition clauses\n \n                when Aspect_Address        |\n@@ -932,11 +973,7 @@ package body Sem_Ch13 is\n                --  required pragma placement. The processing for the pragmas\n                --  takes care of the required delay.\n \n-               when Aspect_Pre           |\n-                    Aspect_Precondition  |\n-                    Aspect_Post          |\n-                    Aspect_Postcondition =>\n-               declare\n+               when Pre_Post_Aspects => declare\n                   Pname : Name_Id;\n \n                begin\n@@ -1115,21 +1152,45 @@ package body Sem_Ch13 is\n             --  If no delay required, insert the pragma/clause in the tree\n \n             else\n-               --  For Pre/Post cases, insert immediately after the entity\n-               --  declaration, since that is the required pragma placement.\n+               --  If this is a compilation unit, we will put the pragma in\n+               --  the Pragmas_After list of the N_Compilation_Unit_Aux node.\n \n-               if A_Id = Aspect_Pre          or else\n-                  A_Id = Aspect_Post         or else\n-                  A_Id = Aspect_Precondition or else\n-                  A_Id = Aspect_Postcondition\n-               then\n-                  Insert_After (N, Aitem);\n+               if Nkind (Parent (Ins_Node)) = N_Compilation_Unit then\n+                  declare\n+                     Aux : constant Node_Id :=\n+                             Aux_Decls_Node (Parent (Ins_Node));\n+\n+                  begin\n+                     pragma Assert (Nkind (Aux) = N_Compilation_Unit_Aux);\n+\n+                     if No (Pragmas_After (Aux)) then\n+                        Set_Pragmas_After (Aux, Empty_List);\n+                     end if;\n+\n+                     --  For Pre_Post put at start of list, otherwise at end\n+\n+                     if A_Id in Pre_Post_Aspects then\n+                        Prepend (Aitem, Pragmas_After (Aux));\n+                     else\n+                        Append (Aitem, Pragmas_After (Aux));\n+                     end if;\n+                  end;\n \n-               --  For all other cases, insert in sequence\n+               --  Here if not compilation unit case\n \n                else\n-                  Insert_After (Ins_Node, Aitem);\n-                  Ins_Node := Aitem;\n+                  --  For Pre/Post cases, insert immediately after the entity\n+                  --  declaration, since that is the required pragma placement.\n+\n+                  if A_Id in Pre_Post_Aspects then\n+                     Insert_After (N, Aitem);\n+\n+                  --  For all other cases, insert in sequence\n+\n+                  else\n+                     Insert_After (Ins_Node, Aitem);\n+                     Ins_Node := Aitem;\n+                  end if;\n                end if;\n             end if;\n          end;\n@@ -5085,6 +5146,11 @@ package body Sem_Ch13 is\n          when No_Aspect =>\n             raise Program_Error;\n \n+         --  Library unit aspects should be impossible (never delayed)\n+\n+         when Library_Unit_Aspects =>\n+            raise Program_Error;\n+\n          --  Aspects taking an optional boolean argument. Note that we will\n          --  never be called with an empty expression, because such aspects\n          --  never need to be delayed anyway."}, {"sha": "82ff0fc45a50c77f9160d005fa07631c1ef75cad", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c54829e233dc0cf9470d899a4223adaddcf58b0/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c54829e233dc0cf9470d899a4223adaddcf58b0/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=1c54829e233dc0cf9470d899a4223adaddcf58b0", "patch": "@@ -760,6 +760,11 @@ package body Sem_Ch7 is\n       --  True when this package declaration is not a nested declaration\n \n    begin\n+      --  Analye aspect specifications immediately, since we need to recognize\n+      --  things like Pure early enough to diagnose violations during analysis.\n+\n+      Analyze_Aspect_Specifications (N, Id, Aspect_Specifications (N));\n+\n       --  Ada 2005 (AI-217): Check if the package has been erroneously named\n       --  in a limited-with clause of its own context. In this case the error\n       --  has been previously notified by Analyze_Context.\n@@ -768,7 +773,7 @@ package body Sem_Ch7 is\n       --     package Pkg is ...\n \n       if From_With_Type (Id) then\n-         goto Leave;\n+         return;\n       end if;\n \n       if Debug_Flag_C then\n@@ -842,9 +847,6 @@ package body Sem_Ch7 is\n          Write_Location (Sloc (N));\n          Write_Eol;\n       end if;\n-\n-      <<Leave>>\n-         Analyze_Aspect_Specifications (N, Id, Aspect_Specifications (N));\n    end Analyze_Package_Declaration;\n \n    -----------------------------------"}, {"sha": "f66c8f91eeec65966c210c07dbe6782d783b2164", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c54829e233dc0cf9470d899a4223adaddcf58b0/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c54829e233dc0cf9470d899a4223adaddcf58b0/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=1c54829e233dc0cf9470d899a4223adaddcf58b0", "patch": "@@ -5689,10 +5689,10 @@ package body Sem_Prag is\n       --  Preset arguments\n \n       Arg_Count := 0;\n-      Arg1 := Empty;\n-      Arg2 := Empty;\n-      Arg3 := Empty;\n-      Arg4 := Empty;\n+      Arg1      := Empty;\n+      Arg2      := Empty;\n+      Arg3      := Empty;\n+      Arg4      := Empty;\n \n       if Present (Pragma_Argument_Associations (N)) then\n          Arg_Count := List_Length (Pragma_Argument_Associations (N));"}, {"sha": "47d10b4be92df6465f96ee0e4002be4ee3bb0208", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c54829e233dc0cf9470d899a4223adaddcf58b0/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c54829e233dc0cf9470d899a4223adaddcf58b0/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=1c54829e233dc0cf9470d899a4223adaddcf58b0", "patch": "@@ -11227,6 +11227,38 @@ package body Sem_Util is\n       Set_Alignment                 (T1, Alignment                 (T2));\n    end Set_Size_Info;\n \n+   --------------------\n+   -- Static_Boolean --\n+   --------------------\n+\n+   function Static_Boolean (N : Node_Id) return Uint is\n+   begin\n+      Analyze_And_Resolve (N, Standard_Boolean);\n+\n+      if N = Error\n+        or else Error_Posted (N)\n+        or else Etype (N) = Any_Type\n+      then\n+         return No_Uint;\n+      end if;\n+\n+      if Is_Static_Expression (N) then\n+         if not Raises_Constraint_Error (N) then\n+            return Expr_Value (N);\n+         else\n+            return No_Uint;\n+         end if;\n+\n+      elsif Etype (N) = Any_Type then\n+         return No_Uint;\n+\n+      else\n+         Flag_Non_Static_Expr\n+           (\"static boolean expression required here\", N);\n+         return No_Uint;\n+      end if;\n+   end Static_Boolean;\n+\n    --------------------\n    -- Static_Integer --\n    --------------------"}, {"sha": "d892a4c44531188d3efacb8bc792c02f630eb750", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c54829e233dc0cf9470d899a4223adaddcf58b0/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c54829e233dc0cf9470d899a4223adaddcf58b0/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=1c54829e233dc0cf9470d899a4223adaddcf58b0", "patch": "@@ -1280,6 +1280,12 @@ package Sem_Util is\n    function Scope_Is_Transient return Boolean;\n    --  True if the current scope is transient\n \n+   function Static_Boolean (N : Node_Id) return Uint;\n+   --  This function analyzes the given expression node and then resolves it\n+   --  as Standard.Boolean. If the result is static, then Uint_1 or Uint_0 is\n+   --  returned corresponding to the value, otherwise an error message is\n+   --  output and No_Uint is returned.\n+\n    function Static_Integer (N : Node_Id) return Uint;\n    --  This function analyzes the given expression node and then resolves it\n    --  as any integer type. If the result is static, then the value of the"}, {"sha": "98ffd77aeb13c430c2816a0e02bac78e891f8077", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c54829e233dc0cf9470d899a4223adaddcf58b0/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c54829e233dc0cf9470d899a4223adaddcf58b0/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=1c54829e233dc0cf9470d899a4223adaddcf58b0", "patch": "@@ -4773,8 +4773,7 @@ package Sinfo is\n       ------------------------------\n \n       --  PACKAGE_DECLARATION ::=\n-      --    PACKAGE_SPECIFICATION\n-      --      [ASPECT_SPECIFICATIONS];\n+      --    PACKAGE_SPECIFICATION;\n \n       --  Note: the activation chain entity for a package spec is used for\n       --  all tasks declared in the package spec, or in the package body.\n@@ -4791,7 +4790,9 @@ package Sinfo is\n       --------------------------------\n \n       --  PACKAGE_SPECIFICATION ::=\n-      --    package DEFINING_PROGRAM_UNIT_NAME is\n+      --    package DEFINING_PROGRAM_UNIT_NAME\n+      --      [ASPECT_SPECIFICATIONS]\n+      --    is\n       --      {BASIC_DECLARATIVE_ITEM}\n       --    [private\n       --      {BASIC_DECLARATIVE_ITEM}]\n@@ -4812,7 +4813,9 @@ package Sinfo is\n       -----------------------\n \n       --  PACKAGE_BODY ::=\n-      --    package body DEFINING_PROGRAM_UNIT_NAME is\n+      --    package body DEFINING_PROGRAM_UNIT_NAME\n+      --      [ASPECT_SPECIFICATIONS]\n+      --    is\n       --      DECLARATIVE_PART\n       --    [begin\n       --      HANDLED_SEQUENCE_OF_STATEMENTS]\n@@ -5023,8 +5026,8 @@ package Sinfo is\n \n       --  TASK_TYPE_DECLARATION ::=\n       --    task type DEFINING_IDENTIFIER [KNOWN_DISCRIMINANT_PART]\n-      --      [is [new INTERFACE_LIST with] TASK_DEFINITION]\n-      --        [ASPECT_SPECIFICATIONS];\n+      --      [ASPECT_SPECIFICATIONS]\n+      --    [is [new INTERFACE_LIST with] TASK_DEFINITION];\n \n       --  N_Task_Type_Declaration\n       --  Sloc points to TASK\n@@ -5041,8 +5044,8 @@ package Sinfo is\n \n       --  SINGLE_TASK_DECLARATION ::=\n       --    task DEFINING_IDENTIFIER\n-      --      [is [new INTERFACE_LIST with] TASK_DEFINITION]\n-      --        [ASPECT_SPECIFICATIONS];\n+      --      [ASPECT_SPECIFICATIONS]\n+      --    [is [new INTERFACE_LIST with] TASK_DEFINITION];\n \n       --  N_Single_Task_Declaration\n       --  Sloc points to TASK\n@@ -5086,7 +5089,9 @@ package Sinfo is\n       --------------------\n \n       --  TASK_BODY ::=\n-      --    task body task_DEFINING_IDENTIFIER is\n+      --    task body task_DEFINING_IDENTIFIER\n+      --      [ASPECT_SPECIFICATIONS]\n+      --    is\n       --      DECLARATIVE_PART\n       --    begin\n       --      HANDLED_SEQUENCE_OF_STATEMENTS\n@@ -5110,8 +5115,8 @@ package Sinfo is\n \n       --  PROTECTED_TYPE_DECLARATION ::=\n       --    protected type DEFINING_IDENTIFIER [KNOWN_DISCRIMINANT_PART]\n-      --      is [new INTERFACE_LIST with] PROTECTED_DEFINITION\n-      --        {ASPECT_SPECIFICATIONS];\n+      --      [ASPECT_SPECIFICATIONS]\n+      --    is [new INTERFACE_LIST with] PROTECTED_DEFINITION;\n \n       --  Note: protected type declarations are not permitted in Ada 83 mode\n \n@@ -5130,8 +5135,8 @@ package Sinfo is\n \n       --  SINGLE_PROTECTED_DECLARATION ::=\n       --    protected DEFINING_IDENTIFIER\n-      --      is [new INTERFACE_LIST with] PROTECTED_DEFINITION\n-      --        [ASPECT_SPECIFICATIONS];\n+      --      [ASPECT_SPECIFICATIONS]\n+      --    is [new INTERFACE_LIST with] PROTECTED_DEFINITION;\n \n       --  Note: single protected declarations are not allowed in Ada 83 mode\n \n@@ -5179,7 +5184,9 @@ package Sinfo is\n       -------------------------\n \n       --  PROTECTED_BODY ::=\n-      --    protected body DEFINING_IDENTIFIER is\n+      --    protected body DEFINING_IDENTIFIER\n+      --      [ASPECT_SPECIFICATIONS];\n+      --    is\n       --      {PROTECTED_OPERATION_ITEM}\n       --    end [protected_IDENTIFIER];\n "}, {"sha": "7c069165e7784aa2985d3be5b1793f57021292ba", "filename": "gcc/ada/sprint.adb", "status": "modified", "additions": 44, "deletions": 15, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c54829e233dc0cf9470d899a4223adaddcf58b0/gcc%2Fada%2Fsprint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c54829e233dc0cf9470d899a4223adaddcf58b0/gcc%2Fada%2Fsprint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsprint.adb?ref=1c54829e233dc0cf9470d899a4223adaddcf58b0", "patch": "@@ -183,11 +183,16 @@ package body Sprint is\n    procedure Sprint_And_List (List : List_Id);\n    --  Print the given list with items separated by vertical \"and\"\n \n-   procedure Sprint_Aspect_Specifications (Node : Node_Id);\n+   procedure Sprint_Aspect_Specifications\n+     (Node      : Node_Id;\n+      Semicolon : Boolean);\n    --  Node is a declaration node that has aspect specifications (Has_Aspects\n-   --  flag set True). It is called after outputting the terminating semicolon\n-   --  for the related node. The effect is to remove the semicolon and print\n-   --  the aspect specifications, followed by a terminating semicolon.\n+   --  flag set True). It outputs the aspect specifications. For the case\n+   --  of Semicolon = True, it is called after outputting the terminating\n+   --  semicolon for the related node. The effect is to remove the semicolon\n+   --  and print the aspect specifications followed by a terminating semicolon.\n+   --  For the case of Semicolon False, no semicolon is removed or output, and\n+   --  all the aspects are printed on a single line.\n \n    procedure Sprint_Bar_List (List : List_Id);\n    --  Print the given list with items separated by vertical bars\n@@ -630,16 +635,24 @@ package body Sprint is\n    -- Sprint_Aspect_Specifications --\n    ----------------------------------\n \n-   procedure Sprint_Aspect_Specifications (Node : Node_Id) is\n+   procedure Sprint_Aspect_Specifications\n+     (Node      : Node_Id;\n+      Semicolon : Boolean)\n+   is\n       AS : constant List_Id := Aspect_Specifications (Node);\n       A  : Node_Id;\n \n    begin\n-      Write_Erase_Char (';');\n-      Indent := Indent + 2;\n-      Write_Indent;\n-      Write_Str (\"with \");\n-      Indent := Indent + 5;\n+      if Semicolon then\n+         Write_Erase_Char (';');\n+         Indent := Indent + 2;\n+         Write_Indent;\n+         Write_Str (\"with \");\n+         Indent := Indent + 5;\n+\n+      else\n+         Write_Str (\" with \");\n+      end if;\n \n       A := First (AS);\n       loop\n@@ -658,11 +671,16 @@ package body Sprint is\n \n          exit when No (A);\n          Write_Char (',');\n-         Write_Indent;\n+\n+         if Semicolon then\n+            Write_Indent;\n+         end if;\n       end loop;\n \n-      Indent := Indent - 7;\n-      Write_Char (';');\n+      if Semicolon then\n+         Indent := Indent - 7;\n+         Write_Char (';');\n+      end if;\n    end Sprint_Aspect_Specifications;\n \n    ---------------------\n@@ -2411,6 +2429,14 @@ package body Sprint is\n          when N_Package_Specification =>\n             Write_Str_With_Col_Check_Sloc (\"package \");\n             Sprint_Node (Defining_Unit_Name (Node));\n+\n+            if Nkind (Parent (Node)) = N_Package_Declaration\n+              and then Has_Aspects (Parent (Node))\n+            then\n+               Sprint_Aspect_Specifications\n+                 (Parent (Node), Semicolon => False);\n+            end if;\n+\n             Write_Str (\" is\");\n             Sprint_Indented_List (Visible_Declarations (Node));\n \n@@ -3176,8 +3202,11 @@ package body Sprint is\n             end if;\n       end case;\n \n-      if Has_Aspects (Node) then\n-         Sprint_Aspect_Specifications (Node);\n+      --  Print aspects, except for special case of package declaration,\n+      --  where the aspects are printed inside the package specification.\n+\n+      if Has_Aspects (Node) and Nkind (Node) /= N_Package_Declaration then\n+         Sprint_Aspect_Specifications (Node, Semicolon => True);\n       end if;\n \n       if Nkind (Node) in N_Subexpr"}]}