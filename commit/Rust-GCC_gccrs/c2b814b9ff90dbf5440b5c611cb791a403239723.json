{"sha": "c2b814b9ff90dbf5440b5c611cb791a403239723", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJiODE0YjlmZjkwZGJmNTQ0MGI1YzYxMWNiNzkxYTQwMzIzOTcyMw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2008-04-17T18:38:35Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-04-17T18:38:35Z"}, "message": "i386.md (addti3 splitter): Pass arrays of 3 operands to split_ti instead of three separate calls with...\n\n        * config/i386/i386.md (addti3 splitter): Pass arrays of 3 operands\n        to split_ti instead of three separate calls with single member arrays.\n        (subti3 splitter): Ditto.\n        (adddi3 splitter): Ditto with split_di.\n        (subdi3 splitter): Ditto.\n        (negti2 splitter): Pass arrays of 2 operands to split_ti instead of\n        two separate calls with single member arrays.  Swap match_dup\n        operands 1 and 2 to better fit into the array.\n        (negdi2 splitter): Ditto with split_di.\n        (movdfcc splitter):  Pass arrays of 2 operands to split_di instead of\n        two separate calls with single member arrays.  Swap match_dup operands\n        6 and 7 to better fit into the array.\n\nFrom-SVN: r134403", "tree": {"sha": "8d0e016f74ade18e46b010ff04f2e800c4ca5451", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d0e016f74ade18e46b010ff04f2e800c4ca5451"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2b814b9ff90dbf5440b5c611cb791a403239723", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2b814b9ff90dbf5440b5c611cb791a403239723", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2b814b9ff90dbf5440b5c611cb791a403239723", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2b814b9ff90dbf5440b5c611cb791a403239723/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6afce8909c4c8e04169364b92742d9ccc202410d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6afce8909c4c8e04169364b92742d9ccc202410d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6afce8909c4c8e04169364b92742d9ccc202410d"}], "stats": {"total": 78, "additions": 41, "deletions": 37}, "files": [{"sha": "89983b940d3e809bc97ffed4f8bc791e77484a75", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2b814b9ff90dbf5440b5c611cb791a403239723/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2b814b9ff90dbf5440b5c611cb791a403239723/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c2b814b9ff90dbf5440b5c611cb791a403239723", "patch": "@@ -1,3 +1,18 @@\n+2008-04-17  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (addti3 splitter): Pass arrays of 3 operands\n+\tto split_ti instead of three separate calls with single member arrays.\n+\t(subti3 splitter): Ditto.\n+\t(adddi3 splitter): Ditto with split_di.\n+\t(subdi3 splitter): Ditto.\n+\t(negti2 splitter): Pass arrays of 2 operands to split_ti instead of\n+\ttwo separate calls with single member arrays.  Swap match_dup\n+\toperands 1 and 2 to better fit into the array.\n+\t(negdi2 splitter): Ditto with split_di.\n+\t(movdfcc splitter):  Pass arrays of 2 operands to split_di instead of\n+\ttwo separate calls with single member arrays.  Swap match_dup operands\n+\t6 and 7 to better fit into the array.\n+\n 2008-04-17  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.c (sse_builtin_type): New."}, {"sha": "102f7f7e96d7c811d1d6d77359d9046fe7e3101c", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 26, "deletions": 37, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2b814b9ff90dbf5440b5c611cb791a403239723/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2b814b9ff90dbf5440b5c611cb791a403239723/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=c2b814b9ff90dbf5440b5c611cb791a403239723", "patch": "@@ -2127,7 +2127,7 @@\n    && !x86_64_immediate_operand (operands[1], DImode) && 1\"\n   [(set (match_dup 0) (match_dup 1))\n    (set (match_dup 2) (match_dup 3))]\n-  \"split_di (operands + 1, 1, operands + 2, operands + 3);\n+  \"split_di (&operands[1], 1, &operands[2], &operands[3]);\n    operands[1] = gen_lowpart (DImode, operands[2]);\n    operands[2] = gen_rtx_MEM (SImode, gen_rtx_PLUS (DImode, stack_pointer_rtx,\n \t\t\t\t\t\t    GEN_INT (4)));\n@@ -2142,7 +2142,7 @@\n    && !x86_64_immediate_operand (operands[1], DImode)\"\n   [(set (match_dup 0) (match_dup 1))\n    (set (match_dup 2) (match_dup 3))]\n-  \"split_di (operands + 1, 1, operands + 2, operands + 3);\n+  \"split_di (&operands[1], 1, &operands[2], &operands[3]);\n    operands[1] = gen_lowpart (DImode, operands[2]);\n    operands[2] = gen_rtx_MEM (SImode, gen_rtx_PLUS (DImode, stack_pointer_rtx,\n \t\t\t\t\t\t    GEN_INT (4)));\n@@ -2367,7 +2367,7 @@\n    && !x86_64_immediate_operand (operands[1], DImode) && 1\"\n   [(set (match_dup 2) (match_dup 3))\n    (set (match_dup 4) (match_dup 5))]\n-  \"split_di (operands, 2, operands + 2, operands + 4);\")\n+  \"split_di (&operands[0], 2, &operands[2], &operands[4]);\")\n \n (define_split\n   [(set (match_operand:DI 0 \"memory_operand\" \"\")\n@@ -2378,7 +2378,7 @@\n    && !x86_64_immediate_operand (operands[1], DImode)\"\n   [(set (match_dup 2) (match_dup 3))\n    (set (match_dup 4) (match_dup 5))]\n-  \"split_di (operands, 2, operands + 2, operands + 4);\")\n+  \"split_di (&operands[0], 2, &operands[2], &operands[4]);\")\n \n (define_insn \"*swapdi_rex64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"+r\")\n@@ -5522,9 +5522,7 @@\n \t\t\t\t     (match_dup 4))\n \t\t\t    (match_dup 5)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n-  \"split_ti (operands+0, 1, operands+0, operands+3);\n-   split_ti (operands+1, 1, operands+1, operands+4);\n-   split_ti (operands+2, 1, operands+2, operands+5);\")\n+  \"split_ti (&operands[0], 3, &operands[0], &operands[3]);\")\n \n ;; %%% splits for addsidi3\n ;  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n@@ -5561,9 +5559,7 @@\n \t\t\t\t     (match_dup 4))\n \t\t\t    (match_dup 5)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n-  \"split_di (operands+0, 1, operands+0, operands+3);\n-   split_di (operands+1, 1, operands+1, operands+4);\n-   split_di (operands+2, 1, operands+2, operands+5);\")\n+  \"split_di (&operands[0], 3, &operands[0], &operands[3]);\")\n \n (define_insn \"adddi3_carry_rex64\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm,r\")\n@@ -7298,9 +7294,7 @@\n \t\t\t     (plus:DI (ltu:DI (reg:CC FLAGS_REG) (const_int 0))\n \t\t\t\t      (match_dup 5))))\n \t      (clobber (reg:CC FLAGS_REG))])]\n-  \"split_ti (operands+0, 1, operands+0, operands+3);\n-   split_ti (operands+1, 1, operands+1, operands+4);\n-   split_ti (operands+2, 1, operands+2, operands+5);\")\n+  \"split_ti (&operands[0], 3, &operands[0], &operands[3]);\")\n \n ;; %%% splits for subsidi3\n \n@@ -7333,9 +7327,7 @@\n \t\t\t     (plus:SI (ltu:SI (reg:CC FLAGS_REG) (const_int 0))\n \t\t\t\t      (match_dup 5))))\n \t      (clobber (reg:CC FLAGS_REG))])]\n-  \"split_di (operands+0, 1, operands+0, operands+3);\n-   split_di (operands+1, 1, operands+1, operands+4);\n-   split_di (operands+2, 1, operands+2, operands+5);\")\n+  \"split_di (&operands[0], 3, &operands[0], &operands[3]);\")\n \n (define_insn \"subdi3_carry_rex64\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm,r\")\n@@ -10193,20 +10185,19 @@\n   \"TARGET_64BIT && reload_completed\"\n   [(parallel\n     [(set (reg:CCZ FLAGS_REG)\n-\t  (compare:CCZ (neg:DI (match_dup 2)) (const_int 0)))\n-     (set (match_dup 0) (neg:DI (match_dup 2)))])\n+\t  (compare:CCZ (neg:DI (match_dup 1)) (const_int 0)))\n+     (set (match_dup 0) (neg:DI (match_dup 1)))])\n    (parallel\n-    [(set (match_dup 1)\n+    [(set (match_dup 2)\n \t  (plus:DI (plus:DI (ltu:DI (reg:CC FLAGS_REG) (const_int 0))\n \t\t\t    (match_dup 3))\n \t\t   (const_int 0)))\n      (clobber (reg:CC FLAGS_REG))])\n    (parallel\n-    [(set (match_dup 1)\n-\t  (neg:DI (match_dup 1)))\n+    [(set (match_dup 2)\n+\t  (neg:DI (match_dup 2)))\n      (clobber (reg:CC FLAGS_REG))])]\n-  \"split_ti (operands+1, 1, operands+2, operands+3);\n-   split_ti (operands+0, 1, operands+0, operands+1);\")\n+  \"split_ti (&operands[0], 2, &operands[0], &operands[2]);\")\n \n (define_expand \"negdi2\"\n   [(parallel [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n@@ -10230,20 +10221,19 @@\n   \"!TARGET_64BIT && reload_completed\"\n   [(parallel\n     [(set (reg:CCZ FLAGS_REG)\n-\t  (compare:CCZ (neg:SI (match_dup 2)) (const_int 0)))\n-     (set (match_dup 0) (neg:SI (match_dup 2)))])\n+\t  (compare:CCZ (neg:SI (match_dup 1)) (const_int 0)))\n+     (set (match_dup 0) (neg:SI (match_dup 1)))])\n    (parallel\n-    [(set (match_dup 1)\n+    [(set (match_dup 2)\n \t  (plus:SI (plus:SI (ltu:SI (reg:CC FLAGS_REG) (const_int 0))\n \t\t\t    (match_dup 3))\n \t\t   (const_int 0)))\n      (clobber (reg:CC FLAGS_REG))])\n    (parallel\n-    [(set (match_dup 1)\n-\t  (neg:SI (match_dup 1)))\n+    [(set (match_dup 2)\n+\t  (neg:SI (match_dup 2)))\n      (clobber (reg:CC FLAGS_REG))])]\n-  \"split_di (operands+1, 1, operands+2, operands+3);\n-   split_di (operands+0, 1, operands+0, operands+1);\")\n+  \"split_di (&operands[0], 2, &operands[0], &operands[2]);\");\n \n (define_insn \"*negdi2_1_rex64\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n@@ -13225,7 +13215,7 @@\n                  (lshiftrt:SI (match_dup 3)\n                               (minus:QI (const_int 32) (match_dup 2)))))\n     (clobber (reg:CC FLAGS_REG))])]\n- \"split_di (operands, 1, operands + 4, operands + 5);\")\n+ \"split_di (&operands[0], 1, &operands[4], &operands[5]);\")\n \n (define_insn \"*rotlsi3_1_one_bit_rex64\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n@@ -13461,7 +13451,7 @@\n                  (ashift:SI (match_dup 3)\n                             (minus:QI (const_int 32) (match_dup 2)))))\n     (clobber (reg:CC FLAGS_REG))])]\n- \"split_di (operands, 1, operands + 4, operands + 5);\")\n+ \"split_di (&operands[0], 1, &operands[4], &operands[5]);\")\n \n (define_insn \"*rotrdi3_1_one_bit_rex64\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n@@ -19467,14 +19457,13 @@\n   [(set (match_dup 2)\n \t(if_then_else:SI (match_op_dup 1 [(match_dup 4) (const_int 0)])\n \t\t      (match_dup 5)\n-\t\t      (match_dup 7)))\n+\t\t      (match_dup 6)))\n    (set (match_dup 3)\n \t(if_then_else:SI (match_op_dup 1 [(match_dup 4) (const_int 0)])\n-\t\t      (match_dup 6)\n+\t\t      (match_dup 7)\n \t\t      (match_dup 8)))]\n-  \"split_di (operands+2, 1, operands+5, operands+6);\n-   split_di (operands+3, 1, operands+7, operands+8);\n-   split_di (operands, 1, operands+2, operands+3);\")\n+  \"split_di (&operands[2], 2, &operands[5], &operands[7]);\n+   split_di (&operands[0], 1, &operands[2], &operands[3]);\")\n \n (define_insn \"*movxfcc_1\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")"}]}