{"sha": "308d39cd6767823edd73712378612893293f4913", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA4ZDM5Y2Q2NzY3ODIzZWRkNzM3MTIzNzg2MTI4OTMyOTNmNDkxMw==", "commit": {"author": {"name": "Sebastien Bourdeauducq", "email": "lekernel@gcc.gnu.org", "date": "2011-02-25T19:24:20Z"}, "committer": {"name": "Sebastien Bourdeauducq", "email": "lekernel@gcc.gnu.org", "date": "2011-02-25T19:24:20Z"}, "message": "[multiple changes]\n\n2011-02-25  Sebastien Bourdeauducq <sebastien@milkymist.org>\n\n\tPR gcc/46898\n\t* config/lm32/lm32.md (ashrsi3): Added needed variable.\n\n2011-02-25  Jon Beniston <jon@beniston.com>\n\n\tPR gcc/46898\n\t* config/lm32/lm32.h (INCOMING_RETURN_ADDR_RTX): New.\n\t* config/lm32/lm32.md (ashlsi3): Remove unused variable.\n\t* config/lm32/lm32.c (TARGET_EXCEPT_UNWIND_INFO): New.\n\t(lm32_block_move_inline): Add type cast to remove warning.\n\t(lm32_expand_prologue): Generate fp in a way compatible with\n\tdwarf2out.\n\t(gen_int_relational): Move declarations to start of function.\n\nFrom-SVN: r170502", "tree": {"sha": "70e8b7cb542d9794deeeb59f2ff6002faaa9721a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70e8b7cb542d9794deeeb59f2ff6002faaa9721a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/308d39cd6767823edd73712378612893293f4913", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/308d39cd6767823edd73712378612893293f4913", "html_url": "https://github.com/Rust-GCC/gccrs/commit/308d39cd6767823edd73712378612893293f4913", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/308d39cd6767823edd73712378612893293f4913/comments", "author": null, "committer": null, "parents": [{"sha": "1b9fef3ee97f88250b2bccd2067f8f71e222015c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b9fef3ee97f88250b2bccd2067f8f71e222015c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b9fef3ee97f88250b2bccd2067f8f71e222015c"}], "stats": {"total": 45, "additions": 34, "deletions": 11}, "files": [{"sha": "81dcb4cb770a28471f3b1c979dc59a4736876fc5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/308d39cd6767823edd73712378612893293f4913/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/308d39cd6767823edd73712378612893293f4913/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=308d39cd6767823edd73712378612893293f4913", "patch": "@@ -1,3 +1,19 @@\n+2011-02-25  Sebastien Bourdeauducq <sebastien@milkymist.org>\n+\n+\tPR gcc/46898\n+\t* config/lm32/lm32.md (ashrsi3): Added needed variable.\n+\n+2011-02-25  Jon Beniston <jon@beniston.com>\n+\n+\tPR gcc/46898\n+\t* config/lm32/lm32.h (INCOMING_RETURN_ADDR_RTX): New.\n+\t* config/lm32/lm32.md (ashlsi3): Remove unused variable.\n+\t* config/lm32/lm32.c (TARGET_EXCEPT_UNWIND_INFO): New.\n+\t(lm32_block_move_inline): Add type cast to remove warning.\n+\t(lm32_expand_prologue): Generate fp in a way compatible with\n+\tdwarf2out.\n+\t(gen_int_relational): Move declarations to start of function.\n+\n 2011-02-25  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR tree-optimization/45470"}, {"sha": "2c7131a5dfc96e9a72a58800a2d19f00c527c504", "filename": "gcc/config/lm32/lm32.c", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/308d39cd6767823edd73712378612893293f4913/gcc%2Fconfig%2Flm32%2Flm32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/308d39cd6767823edd73712378612893293f4913/gcc%2Fconfig%2Flm32%2Flm32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.c?ref=308d39cd6767823edd73712378612893293f4913", "patch": "@@ -117,6 +117,8 @@ static const struct default_options lm32_option_optimization_table[] =\n #define TARGET_CAN_ELIMINATE lm32_can_eliminate\n #undef TARGET_LEGITIMATE_ADDRESS_P\n #define TARGET_LEGITIMATE_ADDRESS_P lm32_legitimate_address_p\n+#undef TARGET_EXCEPT_UNWIND_INFO\n+#define TARGET_EXCEPT_UNWIND_INFO sjlj_except_unwind_info\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \n@@ -174,6 +176,9 @@ gen_int_relational (enum rtx_code code,\n {\n   enum machine_mode mode;\n   int branch_p;\n+  rtx temp;\n+  rtx cond;\n+  rtx label;\n \n   mode = GET_MODE (cmp0);\n   if (mode == VOIDmode)\n@@ -389,18 +394,17 @@ lm32_expand_prologue (void)\n       /* Setup frame pointer if it's needed.  */\n       if (frame_pointer_needed == 1)\n \t{\n-\t  /* Load offset - Don't use total_size, as that includes pretend_size, \n-             which isn't part of this frame?  */\n-\t  insn =\n-\t    emit_move_insn (frame_pointer_rtx,\n-\t\t\t    GEN_INT (current_frame_info.args_size +\n-\t\t\t\t     current_frame_info.callee_size +\n-\t\t\t\t     current_frame_info.locals_size));\n-\t  RTX_FRAME_RELATED_P (insn) = 1;\n+\t  /* Move sp to fp.  */\n+\t  insn = emit_move_insn (frame_pointer_rtx, stack_pointer_rtx);\n+\t  RTX_FRAME_RELATED_P (insn) = 1; \n \n-\t  /* Add in sp.  */\n-\t  insn = emit_add (frame_pointer_rtx,\n-\t\t\t   frame_pointer_rtx, stack_pointer_rtx);\n+\t  /* Add offset - Don't use total_size, as that includes pretend_size, \n+             which isn't part of this frame?  */\n+\t  insn = emit_add (frame_pointer_rtx, \n+\t\t\t   frame_pointer_rtx,\n+\t\t\t   GEN_INT (current_frame_info.args_size +\n+\t\t\t\t    current_frame_info.callee_size +\n+\t\t\t\t    current_frame_info.locals_size));\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n \t}\n "}, {"sha": "3141719b4a5a87e93f56f63ace56c8d989b29dfb", "filename": "gcc/config/lm32/lm32.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/308d39cd6767823edd73712378612893293f4913/gcc%2Fconfig%2Flm32%2Flm32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/308d39cd6767823edd73712378612893293f4913/gcc%2Fconfig%2Flm32%2Flm32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.h?ref=308d39cd6767823edd73712378612893293f4913", "patch": "@@ -239,6 +239,8 @@ enum reg_class\n \n #define ARG_POINTER_REGNUM FRAME_POINTER_REGNUM\n \n+#define INCOMING_RETURN_ADDR_RTX gen_rtx_REG (SImode, RA_REGNUM)\n+\n #define RETURN_ADDR_RTX(count, frame)                                   \\\n   lm32_return_addr_rtx (count, frame)\n "}, {"sha": "7539cb065c44768d1144656b4421868342cba97e", "filename": "gcc/config/lm32/lm32.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/308d39cd6767823edd73712378612893293f4913/gcc%2Fconfig%2Flm32%2Flm32.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/308d39cd6767823edd73712378612893293f4913/gcc%2Fconfig%2Flm32%2Flm32.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.md?ref=308d39cd6767823edd73712378612893293f4913", "patch": "@@ -824,6 +824,7 @@\n         {\n           int i;\n           int shifts = INTVAL (operands[2]);\n+          rtx one = GEN_INT (1);\n           \n           if (shifts == 0)\n             emit_move_insn (operands[0], operands[1]);"}]}