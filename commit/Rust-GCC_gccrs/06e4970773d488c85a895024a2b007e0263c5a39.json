{"sha": "06e4970773d488c85a895024a2b007e0263c5a39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZlNDk3MDc3M2Q0ODhjODVhODk1MDI0YTJiMDA3ZTAyNjNjNWEzOQ==", "commit": {"author": {"name": "Doug Rupp", "email": "rupp@adacore.com", "date": "2005-06-16T08:22:47Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-06-16T08:22:47Z"}, "message": "g-trasym-vms.adb: renamed g-trasym-vms-alpha.adb\n\n2005-06-14  Doug Rupp  <rupp@adacore.com>\n\n\t* g-trasym-vms.adb: renamed g-trasym-vms-alpha.adb\n\n\t* g-trasym-vms-alpha.adb, g-trasym-vms-ia64.adb: New files\n\nFrom-SVN: r101013", "tree": {"sha": "f3ae4cfbbde2ce6e632d536d2c224c6539a57065", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3ae4cfbbde2ce6e632d536d2c224c6539a57065"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06e4970773d488c85a895024a2b007e0263c5a39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06e4970773d488c85a895024a2b007e0263c5a39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06e4970773d488c85a895024a2b007e0263c5a39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06e4970773d488c85a895024a2b007e0263c5a39/comments", "author": {"login": "Cementitious", "id": 115579865, "node_id": "U_kgDOBuOb2Q", "avatar_url": "https://avatars.githubusercontent.com/u/115579865?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cementitious", "html_url": "https://github.com/Cementitious", "followers_url": "https://api.github.com/users/Cementitious/followers", "following_url": "https://api.github.com/users/Cementitious/following{/other_user}", "gists_url": "https://api.github.com/users/Cementitious/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cementitious/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cementitious/subscriptions", "organizations_url": "https://api.github.com/users/Cementitious/orgs", "repos_url": "https://api.github.com/users/Cementitious/repos", "events_url": "https://api.github.com/users/Cementitious/events{/privacy}", "received_events_url": "https://api.github.com/users/Cementitious/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "30f07d92394efb25cee950733e58b9a823ed167b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30f07d92394efb25cee950733e58b9a823ed167b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30f07d92394efb25cee950733e58b9a823ed167b"}], "stats": {"total": 274, "additions": 272, "deletions": 2}, "files": [{"sha": "95c4a243a27eae73c48bf8272280795b2edaf2be", "filename": "gcc/ada/g-trasym-vms-alpha.adb", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e4970773d488c85a895024a2b007e0263c5a39/gcc%2Fada%2Fg-trasym-vms-alpha.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e4970773d488c85a895024a2b007e0263c5a39/gcc%2Fada%2Fg-trasym-vms-alpha.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-trasym-vms-alpha.adb?ref=06e4970773d488c85a895024a2b007e0263c5a39", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---           Copyright (C) 1999-2003 Free Software Foundation, Inc.         --\n+--           Copyright (C) 1999-2005 Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,7 +31,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  Run-time symbolic traceback support for VMS\n+--  Run-time symbolic traceback support for Alpha/VMS\n \n with Ada.Exceptions.Traceback; use Ada.Exceptions.Traceback;\n with Interfaces.C;", "previous_filename": "gcc/ada/g-trasym-vms.adb"}, {"sha": "6519cf6338561d3d2ad81f19a9ab574ef31aa347", "filename": "gcc/ada/g-trasym-vms-ia64.adb", "status": "added", "additions": 270, "deletions": 0, "changes": 270, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e4970773d488c85a895024a2b007e0263c5a39/gcc%2Fada%2Fg-trasym-vms-ia64.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e4970773d488c85a895024a2b007e0263c5a39/gcc%2Fada%2Fg-trasym-vms-ia64.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-trasym-vms-ia64.adb?ref=06e4970773d488c85a895024a2b007e0263c5a39", "patch": "@@ -0,0 +1,270 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--             G N A T . T R A C E B A C K . S Y M B O L I C                --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--             Copyright (C) 2005 Free Software Foundation, Inc.            --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Run-time symbolic traceback support for IA64/VMS\n+\n+with Ada.Exceptions.Traceback; use Ada.Exceptions.Traceback;\n+with Interfaces.C;\n+with System;\n+with System.Aux_DEC;\n+with System.Soft_Links;\n+with System.Traceback_Entries;\n+\n+package body GNAT.Traceback.Symbolic is\n+\n+   pragma Warnings (Off);\n+   pragma Linker_Options (\"--for-linker=sys$library:trace.exe\");\n+\n+   use Interfaces.C;\n+   use System;\n+   use System.Aux_DEC;\n+   use System.Traceback_Entries;\n+\n+   subtype User_Arg_Type is Unsigned_Longword;\n+   subtype Cond_Value_Type is Unsigned_Longword;\n+\n+   type ASCIC is record\n+      Count : unsigned_char;\n+      Data  : char_array (1 .. 255);\n+   end record;\n+   pragma Convention (C, ASCIC);\n+\n+   for ASCIC use record\n+      Count at 0 range 0 .. 7;\n+      Data  at 1 range 0 .. 8 * 255 - 1;\n+   end record;\n+   for ASCIC'Size use 8 * 256;\n+\n+   function Fetch_ASCIC is new Fetch_From_Address (ASCIC);\n+\n+   procedure Symbolize\n+     (Status         : out Cond_Value_Type;\n+      Current_PC     : in Address;\n+      Filename_Name  : out Address;\n+      Library_Name   : out Address;\n+      Record_Number  : out Integer;\n+      Image_Name     : out Address;\n+      Module_Name    : out Address;\n+      Routine_Name   : out Address;\n+      Line_Number    : out Integer;\n+      Relative_PC    : out Address);\n+\n+   pragma Interface (External, Symbolize);\n+\n+   pragma Import_Valued_Procedure\n+     (Symbolize, \"TBK$I64_SYMBOLIZE\",\n+      (Cond_Value_Type, Address,\n+       Address, Address, Integer,\n+       Address, Address, Address, Integer,\n+       Address),\n+      (Value, Value,\n+       Reference, Reference, Reference,\n+       Reference, Reference, Reference, Reference,\n+       Reference));\n+\n+   function Decode_Ada_Name (Encoded_Name : String) return String;\n+   --  Decodes an Ada identifier name. Removes leading \"_ada_\" and trailing\n+   --  __{DIGIT}+ or ${DIGIT}+, converts other \"__\" to '.'\n+\n+   ---------------------\n+   -- Decode_Ada_Name --\n+   ---------------------\n+\n+   function Decode_Ada_Name (Encoded_Name : String) return String is\n+      Decoded_Name : String (1 .. Encoded_Name'Length);\n+      Pos          : Integer := Encoded_Name'First;\n+      Last         : Integer := Encoded_Name'Last;\n+      DPos         : Integer := 1;\n+\n+   begin\n+      if Pos > Last then\n+         return \"\";\n+      end if;\n+\n+      --  Skip leading _ada_\n+\n+      if Encoded_Name'Length > 4\n+        and then Encoded_Name (Pos .. Pos + 4) = \"_ada_\"\n+      then\n+         Pos := Pos + 5;\n+      end if;\n+\n+      --  Skip trailing __{DIGIT}+ or ${DIGIT}+\n+\n+      if Encoded_Name (Last) in '0' .. '9' then\n+         for J in reverse Pos + 2 .. Last - 1 loop\n+            case Encoded_Name (J) is\n+               when '0' .. '9' =>\n+                  null;\n+               when '$' =>\n+                  Last := J - 1;\n+                  exit;\n+               when '_' =>\n+                  if Encoded_Name (J - 1) = '_' then\n+                     Last := J - 2;\n+                  end if;\n+                  exit;\n+               when others =>\n+                  exit;\n+            end case;\n+         end loop;\n+      end if;\n+\n+      --  Now just copy encoded name to decoded name, converting \"__\" to '.'\n+\n+      while Pos <= Last loop\n+         if Encoded_Name (Pos) = '_' and then Encoded_Name (Pos + 1) = '_'\n+           and then Pos /= Encoded_Name'First\n+         then\n+            Decoded_Name (DPos) := '.';\n+            Pos := Pos + 2;\n+\n+         else\n+            Decoded_Name (DPos) := Encoded_Name (Pos);\n+            Pos := Pos + 1;\n+         end if;\n+\n+         DPos := DPos + 1;\n+      end loop;\n+\n+      return Decoded_Name (1 .. DPos - 1);\n+   end Decode_Ada_Name;\n+\n+   ------------------------\n+   -- Symbolic_Traceback --\n+   ------------------------\n+\n+   function Symbolic_Traceback (Traceback : Tracebacks_Array) return String is\n+      Status             : Cond_Value_Type;\n+      Filename_Name_Addr : Address;\n+      Library_Name_Addr  : Address;\n+      Record_Number      : Integer;\n+      Image_Name         : ASCIC;\n+      Image_Name_Addr    : Address;\n+      Module_Name        : ASCIC;\n+      Module_Name_Addr   : Address;\n+      Routine_Name       : ASCIC;\n+      Routine_Name_Addr  : Address;\n+      Line_Number        : Integer;\n+      Relative_PC        : Address;\n+      Res                : String (1 .. 256 * Traceback'Length);\n+      Len                : Integer;\n+\n+   begin\n+      if Traceback'Length > 0 then\n+         Len := 0;\n+\n+         --  Since image computation is not thread-safe we need task lockout\n+\n+         System.Soft_Links.Lock_Task.all;\n+\n+         for J in Traceback'Range loop\n+\n+            Symbolize\n+              (Status,\n+               PC_For (Traceback (J)),\n+               Filename_Name_Addr,\n+               Library_Name_Addr,\n+               Record_Number,\n+               Image_Name_Addr,\n+               Module_Name_Addr,\n+               Routine_Name_Addr,\n+               Line_Number,\n+               Relative_PC);\n+\n+            Image_Name   := Fetch_ASCIC (Image_Name_Addr);\n+            Module_Name  := Fetch_ASCIC (Module_Name_Addr);\n+            Routine_Name := Fetch_ASCIC (Routine_Name_Addr);\n+\n+            declare\n+               First : Integer := Len + 1;\n+               Last  : Integer := First + 80 - 1;\n+               Pos   : Integer;\n+               Routine_Name_D : String := Decode_Ada_Name\n+                 (To_Ada\n+                    (Routine_Name.Data (1 .. size_t (Routine_Name.Count)),\n+                     False));\n+\n+            begin\n+               Res (First .. Last) := (others => ' ');\n+\n+               Res (First .. First + Integer (Image_Name.Count) - 1) :=\n+                 To_Ada\n+                  (Image_Name.Data (1 .. size_t (Image_Name.Count)),\n+                   False);\n+\n+               Res (First + 10 ..\n+                    First + 10 + Integer (Module_Name.Count) - 1) :=\n+                 To_Ada\n+                  (Module_Name.Data (1 .. size_t (Module_Name.Count)),\n+                   False);\n+\n+               Res (First + 30 ..\n+                    First + 30 + Routine_Name_D'Length - 1) :=\n+                 Routine_Name_D;\n+\n+               --  If routine name doesn't fit 20 characters, output\n+               --  the line number on next line at 50th position\n+\n+               if Routine_Name_D'Length > 20 then\n+                  Pos := First + 30 + Routine_Name_D'Length;\n+                  Res (Pos) := ASCII.LF;\n+                  Last := Pos + 80;\n+                  Res (Pos + 1 .. Last) := (others => ' ');\n+                  Pos := Pos + 51;\n+               else\n+                  Pos := First + 50;\n+               end if;\n+\n+               Res (Pos .. Pos + Integer'Image (Line_Number)'Length - 1) :=\n+                 Integer'Image (Line_Number);\n+\n+               Res (Last) := ASCII.LF;\n+               Len := Last;\n+            end;\n+         end loop;\n+\n+         System.Soft_Links.Unlock_Task.all;\n+         return Res (1 .. Len);\n+\n+      else\n+         return \"\";\n+      end if;\n+   end Symbolic_Traceback;\n+\n+   function Symbolic_Traceback (E : Exception_Occurrence) return String is\n+   begin\n+      return Symbolic_Traceback (Tracebacks (E));\n+   end Symbolic_Traceback;\n+\n+end GNAT.Traceback.Symbolic;"}]}