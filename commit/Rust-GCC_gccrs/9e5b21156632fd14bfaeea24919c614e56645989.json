{"sha": "9e5b21156632fd14bfaeea24919c614e56645989", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWU1YjIxMTU2NjMyZmQxNGJmYWVlYTI0OTE5YzYxNGU1NjY0NTk4OQ==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2010-11-13T09:52:00Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2010-11-13T09:52:00Z"}, "message": "c-tree.h (enum c_typespec_kind): Add ctsk_none.\n\n2010-11-13  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* c-tree.h (enum c_typespec_kind): Add ctsk_none.\n\t(struct c_declspecs): Replace tagdef_seen_p and type_seen_p\n\twith typespec_kind.\n\t* c-decl.c (build_null_declspecs): Initialize typespec_kind.\n\t(shadow_tag_warned, check_compound_literal_type): Adjust\n\tuses of tag_defined_p.\n\t(declspecs_add_type): Set typespec_kind.\n\t* c-parser.c (c_parser_declaration_or_fndef,\n\tc_parser_declspecs, c_parser_struct_declaration,\n\tc_parser_parameter_declaration, c_parser_type_name,\n\tc_parser_objc_diagnose_bad_element_prefix): Adjust uses\n\tof type_seen_p.\n\t* c-typeck.c (c_cast_expr): Use typespec_kind instead of\n\ttag_defined_p, pass ctsk_firstref through.\n\ntestsuite:\n2010-11-13  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* gcc.dg/Wcxx-compat-8.c: Add testcases involving incomplete types.\n\nFrom-SVN: r166699", "tree": {"sha": "eb7240972890ab86d11f88bf6522ea66910f938f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb7240972890ab86d11f88bf6522ea66910f938f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e5b21156632fd14bfaeea24919c614e56645989", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e5b21156632fd14bfaeea24919c614e56645989", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e5b21156632fd14bfaeea24919c614e56645989", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e5b21156632fd14bfaeea24919c614e56645989/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "18406601136a40c875005c3f11563f657fc1f0ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18406601136a40c875005c3f11563f657fc1f0ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18406601136a40c875005c3f11563f657fc1f0ca"}], "stats": {"total": 99, "additions": 74, "deletions": 25}, "files": [{"sha": "af43e31b134f43cc36f989ee6746a9673ee25e44", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5b21156632fd14bfaeea24919c614e56645989/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5b21156632fd14bfaeea24919c614e56645989/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e5b21156632fd14bfaeea24919c614e56645989", "patch": "@@ -1,3 +1,20 @@\n+2010-11-13  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* c-tree.h (enum c_typespec_kind): Add ctsk_none.\n+\t(struct c_declspecs): Replace tagdef_seen_p and type_seen_p\n+\twith typespec_kind.\n+\t* c-decl.c (build_null_declspecs): Initialize typespec_kind.\n+\t(shadow_tag_warned, check_compound_literal_type): Adjust\n+\tuses of tag_defined_p.\n+\t(declspecs_add_type): Set typespec_kind.\n+\t* c-parser.c (c_parser_declaration_or_fndef,\n+\tc_parser_declspecs, c_parser_struct_declaration,\n+\tc_parser_parameter_declaration, c_parser_type_name,\n+\tc_parser_objc_diagnose_bad_element_prefix): Adjust uses\n+\tof type_seen_p.\n+\t* c-typeck.c (c_cast_expr): Use typespec_kind instead of\n+\ttag_defined_p, pass ctsk_firstref through.\n+\n 2010-11-13  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* c-format.c (enum format_specifier_kind, kind_descriptions): New."}, {"sha": "c0d5a4922c331ac1ab9e475b73218d3c83ccbc37", "filename": "gcc/c-decl.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5b21156632fd14bfaeea24919c614e56645989/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5b21156632fd14bfaeea24919c614e56645989/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=9e5b21156632fd14bfaeea24919c614e56645989", "patch": "@@ -3634,7 +3634,8 @@ shadow_tag_warned (const struct c_declspecs *declspecs, int warned)\n \t\t  warned = 1;\n \t\t}\n \t    }\n-\t  else if (!declspecs->tag_defined_p\n+\t  else if (declspecs->typespec_kind != ctsk_tagdef\n+                   && declspecs->typespec_kind != ctsk_tagfirstref\n \t\t   && declspecs->storage_class != csc_none)\n \t    {\n \t      if (warned != 1)\n@@ -3644,7 +3645,8 @@ shadow_tag_warned (const struct c_declspecs *declspecs, int warned)\n \t      warned = 1;\n \t      pending_xref_error ();\n \t    }\n-\t  else if (!declspecs->tag_defined_p\n+\t  else if (declspecs->typespec_kind != ctsk_tagdef\n+                   && declspecs->typespec_kind != ctsk_tagfirstref\n \t\t   && (declspecs->const_p\n \t\t       || declspecs->volatile_p\n \t\t       || declspecs->restrict_p\n@@ -4580,7 +4582,9 @@ build_compound_literal (location_t loc, tree type, tree init, bool non_const)\n void\n check_compound_literal_type (location_t loc, struct c_type_name *type_name)\n {\n-  if (warn_cxx_compat && type_name->specs->tag_defined_p)\n+  if (warn_cxx_compat\n+      && (type_name->specs->typespec_kind == ctsk_tagdef\n+          || type_name->specs->typespec_kind == ctsk_tagfirstref))\n     warning_at (loc, OPT_Wc___compat,\n \t\t\"defining a type in a compound literal is invalid in C++\");\n }\n@@ -8616,10 +8620,9 @@ build_null_declspecs (void)\n   ret->storage_class = csc_none;\n   ret->expr_const_operands = true;\n   ret->declspecs_seen_p = false;\n-  ret->type_seen_p = false;\n+  ret->typespec_kind = ctsk_none;\n   ret->non_sc_seen_p = false;\n   ret->typedef_p = false;\n-  ret->tag_defined_p = false;\n   ret->explicit_signed_p = false;\n   ret->deprecated_p = false;\n   ret->default_int_p = false;\n@@ -8703,7 +8706,7 @@ declspecs_add_type (location_t loc, struct c_declspecs *specs,\n   tree type = spec.spec;\n   specs->non_sc_seen_p = true;\n   specs->declspecs_seen_p = true;\n-  specs->type_seen_p = true;\n+  specs->typespec_kind = spec.kind;\n   if (TREE_DEPRECATED (type))\n     specs->deprecated_p = true;\n \n@@ -9306,8 +9309,6 @@ declspecs_add_type (location_t loc, struct c_declspecs *specs,\n     }\n   else if (TREE_CODE (type) != ERROR_MARK)\n     {\n-      if (spec.kind == ctsk_tagdef || spec.kind == ctsk_tagfirstref)\n-\tspecs->tag_defined_p = true;\n       if (spec.kind == ctsk_typeof)\n \t{\n \t  specs->typedef_p = true;"}, {"sha": "9761e4e0843776eeb5da9566e7d1367fec5b5b76", "filename": "gcc/c-parser.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5b21156632fd14bfaeea24919c614e56645989/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5b21156632fd14bfaeea24919c614e56645989/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=9e5b21156632fd14bfaeea24919c614e56645989", "patch": "@@ -1462,7 +1462,8 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,\n \t should diagnose if there were no declaration specifiers) or a\n \t function definition (in which case the diagnostic for\n \t implicit int suffices).  */\n-      declarator = c_parser_declarator (parser, specs->type_seen_p,\n+      declarator = c_parser_declarator (parser, \n+\t\t\t\t\tspecs->typespec_kind != ctsk_none,\n \t\t\t\t\tC_DTR_NORMAL, &dummy);\n       if (declarator == NULL)\n \t{\n@@ -1831,7 +1832,7 @@ c_parser_declspecs (c_parser *parser, struct c_declspecs *specs,\n \t\t    bool scspec_ok, bool typespec_ok, bool start_attr_ok)\n {\n   bool attrs_ok = start_attr_ok;\n-  bool seen_type = specs->type_seen_p;\n+  bool seen_type = specs->typespec_kind != ctsk_none;\n   while (c_parser_next_token_is (parser, CPP_NAME)\n \t || c_parser_next_token_is (parser, CPP_KEYWORD)\n \t || (c_dialect_objc () && c_parser_next_token_is (parser, CPP_LESS)))\n@@ -2399,7 +2400,7 @@ c_parser_struct_declaration (c_parser *parser)\n       || c_parser_next_token_is (parser, CPP_CLOSE_BRACE))\n     {\n       tree ret;\n-      if (!specs->type_seen_p)\n+      if (specs->typespec_kind == ctsk_none)\n \t{\n \t  pedwarn (decl_loc, OPT_pedantic,\n \t\t   \"ISO C forbids member declarations with no members\");\n@@ -2434,7 +2435,8 @@ c_parser_struct_declaration (c_parser *parser)\n       if (c_parser_next_token_is (parser, CPP_COLON))\n \tdeclarator = build_id_declarator (NULL_TREE);\n       else\n-\tdeclarator = c_parser_declarator (parser, specs->type_seen_p,\n+\tdeclarator = c_parser_declarator (parser,\n+\t\t\t\t\t  specs->typespec_kind != ctsk_none,\n \t\t\t\t\t  C_DTR_NORMAL, &dummy);\n       if (declarator == NULL)\n \t{\n@@ -3078,7 +3080,8 @@ c_parser_parameter_declaration (c_parser *parser, tree attrs)\n   pending_xref_error ();\n   prefix_attrs = specs->attrs;\n   specs->attrs = NULL_TREE;\n-  declarator = c_parser_declarator (parser, specs->type_seen_p,\n+  declarator = c_parser_declarator (parser,\n+\t\t\t\t    specs->typespec_kind != ctsk_none,\n \t\t\t\t    C_DTR_PARM, &dummy);\n   if (declarator == NULL)\n     {\n@@ -3370,7 +3373,8 @@ c_parser_type_name (c_parser *parser)\n     }\n   pending_xref_error ();\n   finish_declspecs (specs);\n-  declarator = c_parser_declarator (parser, specs->type_seen_p,\n+  declarator = c_parser_declarator (parser,\n+\t\t\t\t    specs->typespec_kind != ctsk_none,\n \t\t\t\t    C_DTR_ABSTRACT, &dummy);\n   if (declarator == NULL)\n     return NULL;\n@@ -7618,7 +7622,8 @@ static bool\n c_parser_objc_diagnose_bad_element_prefix (c_parser *parser, \n \t\t\t\t\t   struct c_declspecs *specs)\n {\n-  if (!specs->declspecs_seen_p || specs->type_seen_p || specs->non_sc_seen_p)\n+  if (!specs->declspecs_seen_p || specs->non_sc_seen_p\n+      || specs->typespec_kind != ctsk_none)\n     {\n       c_parser_error (parser, \n       \t\t      \"no type or storage class may be specified here,\");"}, {"sha": "0581b38da1f04f7a7c2d46b4784724d7538f8217", "filename": "gcc/c-tree.h", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5b21156632fd14bfaeea24919c614e56645989/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5b21156632fd14bfaeea24919c614e56645989/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=9e5b21156632fd14bfaeea24919c614e56645989", "patch": "@@ -134,6 +134,8 @@ struct c_expr\n    only used to distinguish tag definitions, tag references and typeof\n    uses.  */\n enum c_typespec_kind {\n+  /* No typespec.  This appears only in struct c_declspec.  */\n+  ctsk_none,\n   /* A reserved keyword type specifier.  */\n   ctsk_resword,\n   /* A reference to a tag, previously declared, such as \"struct foo\".\n@@ -225,13 +227,14 @@ struct c_declspecs {\n   /* Any type specifier keyword used such as \"int\", not reflecting\n      modifiers such as \"short\", or cts_none if none.  */\n   ENUM_BITFIELD (c_typespec_keyword) typespec_word : 8;\n+  /* The kind of type specifier if one has been seen, ctsk_none\n+     otherwise.  */\n+  ENUM_BITFIELD (c_typespec_kind) typespec_kind : 3;\n   /* Whether any expressions in typeof specifiers may appear in\n      constant expressions.  */\n   BOOL_BITFIELD expr_const_operands : 1;\n   /* Whether any declaration specifiers have been seen at all.  */\n   BOOL_BITFIELD declspecs_seen_p : 1;\n-  /* Whether a type specifier has been seen.  */\n-  BOOL_BITFIELD type_seen_p : 1;\n   /* Whether something other than a storage class specifier or\n      attribute has been seen.  This is used to warn for the\n      obsolescent usage of storage class specifiers other than at the\n@@ -241,10 +244,6 @@ struct c_declspecs {\n   BOOL_BITFIELD non_sc_seen_p : 1;\n   /* Whether the type is specified by a typedef or typeof name.  */\n   BOOL_BITFIELD typedef_p : 1;\n-  /* Whether a struct, union or enum type either had its content\n-     defined by a type specifier in the list or was the first visible\n-     declaration of its tag.  */\n-  BOOL_BITFIELD tag_defined_p : 1;\n   /* Whether the type is explicitly \"signed\" or specified by a typedef\n      whose type is explicitly \"signed\".  */\n   BOOL_BITFIELD explicit_signed_p : 1;"}, {"sha": "9018c4e933c4412af55c8729b3722a9e70988c18", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5b21156632fd14bfaeea24919c614e56645989/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5b21156632fd14bfaeea24919c614e56645989/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=9e5b21156632fd14bfaeea24919c614e56645989", "patch": "@@ -4831,8 +4831,9 @@ c_cast_expr (location_t loc, struct c_type_name *type_name, tree expr)\n   if (CAN_HAVE_LOCATION_P (ret) && !EXPR_HAS_LOCATION (ret))\n     SET_EXPR_LOCATION (ret, loc);\n \n-  /* C++ does not permits types to be defined in a cast.  */\n-  if (warn_cxx_compat && type_name->specs->tag_defined_p)\n+  /* C++ does not permits types to be defined in a cast, but it\n+     allows references to incomplete types.  */\n+  if (warn_cxx_compat && type_name->specs->typespec_kind == ctsk_tagdef)\n     warning_at (loc, OPT_Wc___compat,\n \t\t\"defining a type in a cast is invalid in C++\");\n "}, {"sha": "f878023b3625bcb874dc7279267ebcdf2c7f2afb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5b21156632fd14bfaeea24919c614e56645989/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5b21156632fd14bfaeea24919c614e56645989/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9e5b21156632fd14bfaeea24919c614e56645989", "patch": "@@ -1,3 +1,7 @@\n+2010-11-13  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* gcc.dg/Wcxx-compat-8.c: Add testcases involving incomplete types.\n+\n 2010-11-13  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* gcc.dg/format/few-1.c: New test."}, {"sha": "7dad7a48dd456380e197c990904e953a52d246d1", "filename": "gcc/testsuite/gcc.dg/Wcxx-compat-8.c", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5b21156632fd14bfaeea24919c614e56645989/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5b21156632fd14bfaeea24919c614e56645989/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-8.c?ref=9e5b21156632fd14bfaeea24919c614e56645989", "patch": "@@ -22,22 +22,44 @@ enum e2\n struct s3 v3;\n int v4 = C;\n \n+enum e3\n+{\n+  F = sizeof (struct t3),\t/* { dg-bogus \"invalid in C\\[+\\]\\[+\\]\" } */\n+  /* { dg-error \"invalid application of 'sizeof'\" \"\" { target *-*-* } 27 } */\n+  G = __alignof__ (struct t4), /* { dg-bogus \"invalid in C\\[+\\]\\[+\\]\" } */\n+  /* { dg-error \"invalid application of '__alignof__'\" \"\" { target *-*-* } 29 } */\n+  H\n+};\n+\n __typeof__ (struct s5 { int i; }) v5; /* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+__typeof__ (struct t5) w5; /* { dg-bogus \"invalid in C\\[+\\]\\[+\\]\" } */\n \n int\n f1 (struct s1 *p)\n {\n   return ((struct s6 { int j; } *) p)->j;  /* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n }\n \n-int\n+void *\n f2 (struct s1 *p)\n+{\n+  return ((struct t6 *) p);  /* { dg-bogus \"invalid in C\\[+\\]\\[+\\]\" } */\n+}\n+\n+int\n+f3 (struct s1 *p)\n {\n   return (__extension__ (struct s7 { int j; } *)p)->j;\n }\n \n int\n-f3 ()\n+f4 ()\n {\n   return (struct s8 { int i; }) { 0 }.i;  /* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n }\n+\n+void *\n+f5 ()\n+{\n+  return &((struct t8) { });  /* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+}"}]}