{"sha": "9e3685d5f463193242bece7e381f467165adf66c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUzNjg1ZDVmNDYzMTkzMjQyYmVjZTdlMzgxZjQ2NzE2NWFkZjY2Yw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-01-16T16:34:32Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-01-16T16:34:32Z"}, "message": "new\n\nFrom-SVN: r24702", "tree": {"sha": "0b06473c6be625a394a50a3a05418f1191cae403", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b06473c6be625a394a50a3a05418f1191cae403"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e3685d5f463193242bece7e381f467165adf66c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e3685d5f463193242bece7e381f467165adf66c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e3685d5f463193242bece7e381f467165adf66c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e3685d5f463193242bece7e381f467165adf66c/comments", "author": null, "committer": null, "parents": [{"sha": "a7a7710d423cba8feb795c3e626df5ce4075cebb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7a7710d423cba8feb795c3e626df5ce4075cebb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7a7710d423cba8feb795c3e626df5ce4075cebb"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "3fd0c3e6b7cd0a99461d27b0216413d71501c000", "filename": "gcc/testsuite/g++.old-deja/g++.other/mutable1.C", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3685d5f463193242bece7e381f467165adf66c/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fmutable1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3685d5f463193242bece7e381f467165adf66c/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fmutable1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fmutable1.C?ref=9e3685d5f463193242bece7e381f467165adf66c", "patch": "@@ -0,0 +1,43 @@\n+// Copyright (C) 1999 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 14 Jan 1999 <nathan@acm.org>\n+\n+// Make sure objects with mutable members are never placed in a read only\n+// section.\n+\n+// All these are POD structs, and hence do not need ctors\n+struct A { mutable int i; };\n+struct B { A a; };\n+struct C { A a[1]; };\n+struct D { static A const a; };\n+\n+// all these are static consts and hence naively suitable for a read only\n+// section. But they contain a mutable, so must be in a writable section.\n+static int const i = 0;\n+static A const a = {0};\n+static B const b = {{0}};\n+static C const c = {{{0}}};\n+static A const aa[] = {{0}};\n+static B const bb[] = {{{0}}};\n+static C const cc[] = {{{{0}}}};\n+A const D::a = {0};\n+\n+int main()\n+{\n+  a.i = 05;\n+  b.a.i = 05;\n+  c.a[0].i = 05;\n+  aa[0].i = 05;\n+  bb[0].a.i = 05;\n+  cc[0].a[0].i = 05;\n+  D::a.i = 05;\n+  \n+  if(!a.i) return 1;\n+  if(!b.a.i) return 1;\n+  if(!c.a[0].i) return 1;\n+  if(!aa[0].i) return 1;\n+  if(!bb[0].a.i) return 1;\n+  if(!cc[0].a[0].i) return 1;\n+  if(!D::a.i) return 1;\n+\n+  return 0;\n+}"}, {"sha": "9abd390f8b695f1786bfcf7ed544cc909ebcc5fb", "filename": "gcc/testsuite/g++.old-deja/g++.pt/memtemp82.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3685d5f463193242bece7e381f467165adf66c/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemtemp82.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3685d5f463193242bece7e381f467165adf66c/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemtemp82.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemtemp82.C?ref=9e3685d5f463193242bece7e381f467165adf66c", "patch": "@@ -0,0 +1,13 @@\n+// Build don't link:\n+// excess errors test - XFAIL *-*-*\n+\n+struct foo {\n+       template<typename T> T bar() { return staticbar<T>( this ); }\n+       template<typename T> static T staticbar( foo* ) { return 0; }\n+};\n+\n+void f()\n+{\n+       foo t;\n+       int k = t.bar<int>();\n+}"}]}