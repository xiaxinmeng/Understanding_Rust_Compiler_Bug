{"sha": "8e0a600bdd9dee1b4eb8f3e5ce840e76fdabf133", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGUwYTYwMGJkZDlkZWUxYjRlYjhmM2U1Y2U4NDBlNzZmZGFiZjEzMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2005-06-01T10:23:17Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-06-01T10:23:17Z"}, "message": "re PR c/21536 (C99 array of variable length use causes segmentation fault)\n\n\tPR c/21536\n\tPR c/20760\n\t* gimplify.c (gimplify_decl_expr): Call gimplify_type_sizes\n\ton variable sizes types if a decl is a pointer to a VLA.\n\t(gimplify_type_sizes): Handle POINTER_TYPE and REFERENCE_TYPE.\n\tCall gimplify_type_sizes on aggregate fields.  Prevent infinite\n\trecursion.\n\n\t* gcc.dg/20050527-1.c: New test.\n\nFrom-SVN: r100443", "tree": {"sha": "1a35e9a58e4b8b378d4be62b9e9b73130ac4300b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a35e9a58e4b8b378d4be62b9e9b73130ac4300b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e0a600bdd9dee1b4eb8f3e5ce840e76fdabf133", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e0a600bdd9dee1b4eb8f3e5ce840e76fdabf133", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e0a600bdd9dee1b4eb8f3e5ce840e76fdabf133", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e0a600bdd9dee1b4eb8f3e5ce840e76fdabf133/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dcd25113c6c37534621934617f07776b9212ef33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcd25113c6c37534621934617f07776b9212ef33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcd25113c6c37534621934617f07776b9212ef33"}], "stats": {"total": 117, "additions": 91, "deletions": 26}, "files": [{"sha": "2cc5929837199e2a2b032fee24740640b2efb167", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e0a600bdd9dee1b4eb8f3e5ce840e76fdabf133/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e0a600bdd9dee1b4eb8f3e5ce840e76fdabf133/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8e0a600bdd9dee1b4eb8f3e5ce840e76fdabf133", "patch": "@@ -1,5 +1,13 @@\n 2005-06-01  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c/21536\n+\tPR c/20760\n+\t* gimplify.c (gimplify_decl_expr): Call gimplify_type_sizes\n+\ton variable sizes types if a decl is a pointer to a VLA.\n+\t(gimplify_type_sizes): Handle POINTER_TYPE and REFERENCE_TYPE.\n+\tCall gimplify_type_sizes on aggregate fields.  Prevent infinite\n+\trecursion.\n+\n \t* fold-const.c (fold_ternary): Optimize BIT_FIELD_REF of VECTOR_CST.\n \n \t* config/i386/xmmintrin.h (_mm_setzero_ps, _mm_set_ss, _mm_set1_ps,"}, {"sha": "853ff9db57bc9656521b31aa3bed5e3194d2ea7a", "filename": "gcc/gimplify.c", "status": "modified", "additions": 24, "deletions": 26, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e0a600bdd9dee1b4eb8f3e5ce840e76fdabf133/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e0a600bdd9dee1b4eb8f3e5ce840e76fdabf133/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=8e0a600bdd9dee1b4eb8f3e5ce840e76fdabf133", "patch": "@@ -983,10 +983,12 @@ gimplify_decl_expr (tree *stmt_p)\n   if (TREE_TYPE (decl) == error_mark_node)\n     return GS_ERROR;\n \n-  else if (TREE_CODE (decl) == TYPE_DECL)\n+  if ((TREE_CODE (decl) == TYPE_DECL\n+       || TREE_CODE (decl) == VAR_DECL)\n+      && !TYPE_SIZES_GIMPLIFIED (TREE_TYPE (decl)))\n     gimplify_type_sizes (TREE_TYPE (decl), stmt_p);\n \n-  else if (TREE_CODE (decl) == VAR_DECL && !DECL_EXTERNAL (decl))\n+  if (TREE_CODE (decl) == VAR_DECL && !DECL_EXTERNAL (decl))\n     {\n       tree init = DECL_INITIAL (decl);\n \n@@ -997,12 +999,6 @@ gimplify_decl_expr (tree *stmt_p)\n \t     of the emitted code: see mx_register_decls().  */\n \t  tree t, args, addr, ptr_type;\n \n-\t  /* ??? We really shouldn't need to gimplify the type of the variable\n-\t     since it already should have been done.  But leave this here\n-\t     for now to avoid disrupting too many things at once.  */\n-\t  if (!TYPE_SIZES_GIMPLIFIED (TREE_TYPE (decl)))\n-\t    gimplify_type_sizes (TREE_TYPE (decl), stmt_p);\n-\n \t  gimplify_one_sizepos (&DECL_SIZE (decl), stmt_p);\n \t  gimplify_one_sizepos (&DECL_SIZE_UNIT (decl), stmt_p);\n \n@@ -4409,21 +4405,21 @@ gimplify_type_sizes (tree type, tree *list_p)\n {\n   tree field, t;\n \n-  /* Note that we do not check for TYPE_SIZES_GIMPLIFIED already set because\n-     that's not supposed to happen on types where gimplification does anything.\n-     We should assert that it isn't set, but we can indeed be called multiple\n-     times on pointers.  Unfortunately, this includes fat pointers which we\n-     can't easily test for.  We could pass TYPE down to gimplify_one_sizepos\n-     and test there, but it doesn't seem worth it.  */\n+  if (type == NULL)\n+    return;\n \n   /* We first do the main variant, then copy into any other variants.  */\n   type = TYPE_MAIN_VARIANT (type);\n \n+  /* Avoid infinite recursion.  */\n+  if (TYPE_SIZES_GIMPLIFIED (type)\n+      || type == error_mark_node)\n+    return;\n+\n+  TYPE_SIZES_GIMPLIFIED (type) = 1;\n+\n   switch (TREE_CODE (type))\n     {\n-    case ERROR_MARK:\n-      return;\n-\n     case INTEGER_TYPE:\n     case ENUMERAL_TYPE:\n     case BOOLEAN_TYPE:\n@@ -4436,25 +4432,29 @@ gimplify_type_sizes (tree type, tree *list_p)\n \t{\n \t  TYPE_MIN_VALUE (t) = TYPE_MIN_VALUE (type);\n \t  TYPE_MAX_VALUE (t) = TYPE_MAX_VALUE (type);\n-\t  TYPE_SIZES_GIMPLIFIED (t) = 1;\n \t}\n       break;\n \n     case ARRAY_TYPE:\n       /* These types may not have declarations, so handle them here.  */\n-      if (!TYPE_SIZES_GIMPLIFIED (TREE_TYPE (type)))\n-\tgimplify_type_sizes (TREE_TYPE (type), list_p);\n-\n-      if (!TYPE_SIZES_GIMPLIFIED (TYPE_DOMAIN (type)))\n-\t  gimplify_type_sizes (TYPE_DOMAIN (type), list_p);\n+      gimplify_type_sizes (TREE_TYPE (type), list_p);\n+      gimplify_type_sizes (TYPE_DOMAIN (type), list_p);\n       break;\n \n     case RECORD_TYPE:\n     case UNION_TYPE:\n     case QUAL_UNION_TYPE:\n       for (field = TYPE_FIELDS (type); field; field = TREE_CHAIN (field))\n \tif (TREE_CODE (field) == FIELD_DECL)\n-\t  gimplify_one_sizepos (&DECL_FIELD_OFFSET (field), list_p);\n+\t  {\n+\t    gimplify_one_sizepos (&DECL_FIELD_OFFSET (field), list_p);\n+\t    gimplify_type_sizes (TREE_TYPE (field), list_p);\n+\t  }\n+      break;\n+\n+    case POINTER_TYPE:\n+    case REFERENCE_TYPE:\n+      gimplify_type_sizes (TREE_TYPE (type), list_p);\n       break;\n \n     default:\n@@ -4470,8 +4470,6 @@ gimplify_type_sizes (tree type, tree *list_p)\n       TYPE_SIZE_UNIT (t) = TYPE_SIZE_UNIT (type);\n       TYPE_SIZES_GIMPLIFIED (t) = 1;\n     }\n-\n-  TYPE_SIZES_GIMPLIFIED (type) = 1;\n }\n \n /* A subroutine of gimplify_type_sizes to make sure that *EXPR_P,"}, {"sha": "716eae7cfd2554baa958f8b5a95e5bfb5f92aae6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e0a600bdd9dee1b4eb8f3e5ce840e76fdabf133/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e0a600bdd9dee1b4eb8f3e5ce840e76fdabf133/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8e0a600bdd9dee1b4eb8f3e5ce840e76fdabf133", "patch": "@@ -1,5 +1,9 @@\n 2005-06-01  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c/21536\n+\tPR c/20760\n+\t* gcc.dg/20050527-1.c: New test.\n+\n \t* gcc.dg/i386-sse-12.c: New test.\n \n \tPR fortran/21729"}, {"sha": "1b32324471ffaef97e5aecfcb2db0cea409c0b32", "filename": "gcc/testsuite/gcc.dg/20050527-1.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e0a600bdd9dee1b4eb8f3e5ce840e76fdabf133/gcc%2Ftestsuite%2Fgcc.dg%2F20050527-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e0a600bdd9dee1b4eb8f3e5ce840e76fdabf133/gcc%2Ftestsuite%2Fgcc.dg%2F20050527-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20050527-1.c?ref=8e0a600bdd9dee1b4eb8f3e5ce840e76fdabf133", "patch": "@@ -0,0 +1,55 @@\n+/* PR c/21536 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -Wuninitialized\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+extern void *malloc (size_t);\n+extern void free (void *);\n+\n+void *\n+foo (int x, int y)\n+{\n+  void *d = malloc (x * y * sizeof (double));\n+  double (*e)[x][y] = d;\n+  x += 10;\n+  y += 10;\n+  if (x > 18)\n+    (*e)[x - 12][y - 12] = 0.0;\n+  else\n+    (*e)[x - 11][y - 11] = 1.0;\n+  return d;\n+}\n+\n+void *\n+bar (int x, int y)\n+{\n+  void *d = malloc (x * y * sizeof (double));\n+  struct S\n+    {\n+      double (*e)[x][y];\n+      double (*f)[x][y];\n+    } s;\n+  s.e = d;\n+  s.f = d;\n+  x += 10;\n+  y += 10;\n+  if (x > 18)\n+    (*s.e)[x - 12][y - 12] = 0.0;\n+  else\n+    (*s.e)[x - 11][y - 11] = 1.0;\n+  if (x > 16)\n+    (*s.f)[x - 13][y - 13] = 0.0;\n+  else\n+    (*s.f)[x - 14][y - 14] = 1.0;\n+  return d;\n+}\n+\n+int\n+main ()\n+{\n+  void *d1 = foo (10, 10);\n+  void *d2 = bar (10, 10);\n+  free (d1);\n+  free (d2);\n+  return 0;\n+}"}]}