{"sha": "c470d7c9d35a8554371de7ba3c9a93bd2b41f07a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ3MGQ3YzlkMzVhODU1NDM3MWRlN2JhM2M5YTkzYmQyYjQxZjA3YQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-04-28T09:38:51Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-04-28T09:38:51Z"}, "message": "Makefile.in: Add target pairs for powerpc darwin* tasking support.\n\n\t* Makefile.in: Add target pairs for powerpc darwin*\n\ttasking support.\n\n\t* a-intnam-darwin.ads, s-osinte-darwin.adb,\n\ts-osinte-darwin.ads, system-darwin-ppc.ads: New files.\n\nFrom-SVN: r81245", "tree": {"sha": "a09f87a550751c52f9cc38d6d15fa00ac18a2465", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a09f87a550751c52f9cc38d6d15fa00ac18a2465"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c470d7c9d35a8554371de7ba3c9a93bd2b41f07a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c470d7c9d35a8554371de7ba3c9a93bd2b41f07a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c470d7c9d35a8554371de7ba3c9a93bd2b41f07a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c470d7c9d35a8554371de7ba3c9a93bd2b41f07a/comments", "author": null, "committer": null, "parents": [{"sha": "83532fb78e33c960520f97b8a94632245ba3ff60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83532fb78e33c960520f97b8a94632245ba3ff60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83532fb78e33c960520f97b8a94632245ba3ff60"}], "stats": {"total": 1153, "additions": 1150, "deletions": 3}, "files": [{"sha": "df5399ad72ccd4bfee1764f7a4ad98efc152636b", "filename": "gcc/ada/Makefile.in", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c470d7c9d35a8554371de7ba3c9a93bd2b41f07a/gcc%2Fada%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c470d7c9d35a8554371de7ba3c9a93bd2b41f07a/gcc%2Fada%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.in?ref=c470d7c9d35a8554371de7ba3c9a93bd2b41f07a", "patch": "@@ -1307,7 +1307,21 @@ ifeq ($(strip $(filter-out %x86_64 linux%,$(arch) $(osys))),)\n   GMEM_LIB = gmemlib\n   PREFIX_OBJS=$(PREFIX_REAL_OBJS)\n   LIBRARY_VERSION := $(LIB_VERSION)\n+endif\n \n+ifeq ($(strip $(filter-out powerpc darwin%,$(arch) $(osys))),)\n+  LIBGNAT_TARGET_PAIRS = \\\n+  a-intnam.ads<a-intnam-darwin.ads \\\n+  s-inmaop.adb<7sinmaop.adb \\\n+  s-intman.adb<7sintman.adb \\\n+  s-osinte.adb<s-osinte-darwin.adb \\\n+  s-osinte.ads<s-osinte-darwin.ads \\\n+  s-osprim.adb<7sosprim.adb \\\n+  s-taprop.adb<7staprop.adb \\\n+  s-taspri.ads<7staspri.ads \\\n+  s-tpopsp.adb<5atpopsp.adb \\\n+  g-soccon.ads<3bsoccon.ads \\\n+  system.ads<system-darwin-ppc.ads\n endif\n \n # The runtime library for gnat comprises two directories.  One contains the\n@@ -1909,7 +1923,7 @@ gnatlib-shared-default:\n \t     GNATLIBCFLAGS=\"$(GNATLIBCFLAGS) $(TARGET_LIBGCC2_CFLAGS)\" \\\n \t     THREAD_KIND=\"$(THREAD_KIND)\" \\\n              gnatlib\n-\t$(RM) rts/libgnat$(soext) rts/libgnarl$(soext)\n+\t$(RM) rts/libgna*$(soext)\n \tcd rts; ../../xgcc -B../../ -shared $(TARGET_LIBGCC2_CFLAGS) \\\n \t\t-o libgnat$(hyphen)$(LIBRARY_VERSION)$(soext) \\\n \t\t$(GNATRTL_NONTASKING_OBJS) $(LIBGNAT_OBJS) \\\n@@ -1965,7 +1979,7 @@ gnatlib-shared-win32:\n \t     GNATLIBCFLAGS=\"$(GNATLIBCFLAGS) $(TARGET_LIBGCC2_CFLAGS)\" \\\n \t     THREAD_KIND=\"$(THREAD_KIND)\" \\\n              gnatlib\n-\t$(RM) rts/libgnat$(soext) rts/libgnarl$(soext)\n+\t$(RM) rts/libgna*$(soext)\n \tcd rts; ../../xgcc -B../../ -shared $(TARGET_LIBGCC2_CFLAGS) \\\n \t\t-o libgnat$(hyphen)$(LIBRARY_VERSION)$(soext) \\\n \t\t$(GNATRTL_NONTASKING_OBJS) $(LIBGNAT_OBJS) \\\n@@ -1982,7 +1996,7 @@ gnatlib-shared-vms:\n \t     GNATLIBCFLAGS=\"$(GNATLIBCFLAGS)\" \\\n \t     THREAD_KIND=\"$(THREAD_KIND)\" \\\n              gnatlib\n-\t$(RM) rts/libgnat*$(soext) rts/libgnarl*$(soext)\n+\t$(RM) rts/libgna*$(soext)\n \tcd rts && echo \"case_sensitive=yes\" > SYMVEC_$$$$.opt && \\\n \tobjdump --syms $(LIBGNAT_OBJS) $(GNATRTL_NONTASKING_OBJS) | \\\n \t$(SHLIB_SYMVEC) >> SYMVEC_$$$$.opt && \\"}, {"sha": "73423f7283d87f32906f658f383b439935ad044d", "filename": "gcc/ada/a-intnam-darwin.ads", "status": "added", "additions": 153, "deletions": 0, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c470d7c9d35a8554371de7ba3c9a93bd2b41f07a/gcc%2Fada%2Fa-intnam-darwin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c470d7c9d35a8554371de7ba3c9a93bd2b41f07a/gcc%2Fada%2Fa-intnam-darwin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-intnam-darwin.ads?ref=c470d7c9d35a8554371de7ba3c9a93bd2b41f07a", "patch": "@@ -0,0 +1,153 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                GNU ADA RUN-TIME LIBRARY (GNARL) COMPONENTS               --\n+--                                                                          --\n+--                   A D A . I N T E R R U P T S . N A M E S                --\n+--                                                                          --\n+--                                  S p e c                                 --\n+--                                                                          --\n+--          Copyright (C) 1991-2004 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion. GNARL is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNARL; see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University.       --\n+-- Extensive contributions were provided by Ada Core Technologies, Inc.     --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is the Darwin version of this package.\n+--\n+--  The following signals are reserved by the run time:\n+--\n+--  SIGSTOP, SIGKILL\n+--\n+--  The pragma Unreserve_All_Interrupts affects the following signal(s):\n+--\n+--  SIGINT: made available for Ada handler\n+\n+--  This target-dependent package spec contains names of interrupts\n+--  supported by the local system.\n+\n+with System.OS_Interface;\n+--  used for names of interrupts\n+\n+package Ada.Interrupts.Names is\n+\n+   --  Beware that the mapping of names to signals may be\n+   --  many-to-one.  There may be aliases.  Also, for all\n+   --  signal names that are not supported on the current system\n+   --  the value of the corresponding constant will be zero.\n+\n+   SIGHUP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGHUP;      --  hangup\n+\n+   SIGINT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGINT;      --  interrupt (rubout)\n+\n+   SIGQUIT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGQUIT;     --  quit (ASCD FS)\n+\n+   SIGILL : constant Interrupt_ID :=\n+     System.OS_Interface.SIGILL;      --  illegal instruction (not reset)\n+\n+   SIGTRAP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTRAP;     --  trace trap (not reset)\n+\n+   SIGIOT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGIOT;      --  IOT instruction\n+\n+   SIGABRT : constant Interrupt_ID := --  used by abort,\n+     System.OS_Interface.SIGABRT;     --  replace SIGIOT in the  future\n+\n+   SIGEMT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGEMT;      --  EMT instruction\n+\n+   SIGFPE : constant Interrupt_ID :=\n+     System.OS_Interface.SIGFPE;      --  floating point exception\n+\n+   SIGKILL : constant Interrupt_ID :=\n+     System.OS_Interface.SIGKILL;     --  kill (cannot be caught or ignored)\n+\n+   SIGBUS : constant Interrupt_ID :=\n+     System.OS_Interface.SIGBUS;      --  bus error\n+\n+   SIGSEGV : constant Interrupt_ID :=\n+     System.OS_Interface.SIGSEGV;     --  segmentation violation\n+\n+   SIGSYS : constant Interrupt_ID :=\n+     System.OS_Interface.SIGSYS;      --  bad argument to system call\n+\n+   SIGPIPE : constant Interrupt_ID := --  write on a pipe with\n+     System.OS_Interface.SIGPIPE;     --  no one to read it\n+\n+   SIGALRM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGALRM;     --  alarm clock\n+\n+   SIGTERM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTERM;     --  software termination signal from kill\n+\n+   SIGURG : constant Interrupt_ID :=\n+     System.OS_Interface.SIGURG;      --  urgent condition on IO channel\n+\n+   SIGSTOP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGSTOP;     --  stop (cannot be caught or ignored)\n+\n+   SIGTSTP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTSTP;     --  user stop requested from tty\n+\n+   SIGCONT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGCONT;     --  stopped process has been continued\n+\n+   SIGCHLD : constant Interrupt_ID :=\n+     System.OS_Interface.SIGCHLD;     --  4.3BSD's/POSIX name for SIGCLD\n+\n+   SIGTTIN : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTTIN;     --  background tty read attempted\n+\n+   SIGTTOU : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTTOU;     --  background tty write attempted\n+\n+   SIGIO : constant Interrupt_ID :=   --  input/output possible,\n+     System.OS_Interface.SIGIO;       --  SIGPOLL alias (Solaris)\n+\n+   SIGXCPU : constant Interrupt_ID :=\n+     System.OS_Interface.SIGXCPU;     --  CPU time limit exceeded\n+\n+   SIGXFSZ : constant Interrupt_ID :=\n+     System.OS_Interface.SIGXFSZ;     --  filesize limit exceeded\n+\n+   SIGVTALRM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGVTALRM;   --  virtual timer expired\n+\n+   SIGPROF : constant Interrupt_ID :=\n+     System.OS_Interface.SIGPROF;     --  profiling timer expired\n+\n+   SIGWINCH : constant Interrupt_ID :=\n+     System.OS_Interface.SIGWINCH;    --  window size change\n+\n+   SIGINFO : constant Interrupt_ID :=\n+     System.OS_Interface.SIGINFO;      -- information request\n+\n+   SIGUSR1 : constant Interrupt_ID :=\n+     System.OS_Interface.SIGUSR1;     --  user defined signal 1\n+\n+   SIGUSR2 : constant Interrupt_ID :=\n+     System.OS_Interface.SIGUSR2;     --  user defined signal 2\n+\n+end Ada.Interrupts.Names;"}, {"sha": "004648fb88e1a0be79748583f4036408fe99bdba", "filename": "gcc/ada/s-osinte-darwin.adb", "status": "added", "additions": 163, "deletions": 0, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c470d7c9d35a8554371de7ba3c9a93bd2b41f07a/gcc%2Fada%2Fs-osinte-darwin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c470d7c9d35a8554371de7ba3c9a93bd2b41f07a/gcc%2Fada%2Fs-osinte-darwin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-darwin.adb?ref=c470d7c9d35a8554371de7ba3c9a93bd2b41f07a", "patch": "@@ -0,0 +1,163 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                GNU ADA RUN-TIME LIBRARY (GNARL) COMPONENTS               --\n+--                                                                          --\n+--                   S Y S T E M . O S _ I N T E R F A C E                  --\n+--                                                                          --\n+--                                  B o d y                                 --\n+--                                                                          --\n+--           Copyright (C) 1999-2004 Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion. GNARL is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNARL; see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University.       --\n+-- Extensive contributions were provided by Ada Core Technologies, Inc.     --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is a Darwin Threads version of this package\n+\n+pragma Polling (Off);\n+--  Turn off polling, we do not want ATC polling to take place during\n+--  tasking operations. It causes infinite loops and other problems.\n+\n+with Interfaces.C;\n+\n+package body System.OS_Interface is\n+\n+   use Interfaces.C;\n+\n+   -----------------\n+   -- To_Duration --\n+   -----------------\n+\n+   function To_Duration (TS : timespec) return Duration is\n+   begin\n+      return Duration (TS.tv_sec) + Duration (TS.tv_nsec) / 10#1#E9;\n+   end To_Duration;\n+\n+   function To_Duration (TV : struct_timeval) return Duration is\n+   begin\n+      return Duration (TV.tv_sec) + Duration (TV.tv_usec) / 10#1#E6;\n+   end To_Duration;\n+\n+   -----------------\n+   -- To_Timespec --\n+   -----------------\n+\n+   function To_Timespec (D : Duration) return timespec is\n+      S : time_t;\n+      F : Duration;\n+\n+   begin\n+      S := time_t (Long_Long_Integer (D));\n+      F := D - Duration (S);\n+\n+      --  If F has negative value due to a round-up, adjust for positive F\n+      --  value.\n+\n+      if F < 0.0 then\n+         S := S - 1;\n+         F := F + 1.0;\n+      end if;\n+\n+      return timespec'(tv_sec => S,\n+        tv_nsec => long (Long_Long_Integer (F * 10#1#E9)));\n+   end To_Timespec;\n+\n+   ----------------\n+   -- To_Timeval --\n+   ----------------\n+\n+   function To_Timeval (D : Duration) return struct_timeval is\n+      S : long;\n+      F : Duration;\n+\n+   begin\n+      S := long (Long_Long_Integer (D));\n+      F := D - Duration (S);\n+\n+      --  If F has negative value due to a round-up, adjust for positive F\n+      --  value.\n+\n+      if F < 0.0 then\n+         S := S - 1;\n+         F := F + 1.0;\n+      end if;\n+\n+      return struct_timeval'(tv_sec => S,\n+        tv_usec => long (Long_Long_Integer (F * 10#1#E6)));\n+   end To_Timeval;\n+\n+   -------------------\n+   -- clock_gettime --\n+   -------------------\n+\n+   function clock_gettime\n+     (clock_id : clockid_t;\n+      tp       : access timespec) return int\n+   is\n+      pragma Unreferenced (clock_id);\n+      Result : int;\n+      tv     : aliased struct_timeval;\n+\n+      function gettimeofday\n+        (tv : access struct_timeval;\n+         tz : System.Address := System.Null_Address) return int;\n+      pragma Import (C, gettimeofday, \"gettimeofday\");\n+\n+   begin\n+      Result := gettimeofday (tv'Unchecked_Access);\n+      tp.all := To_Timespec (To_Duration (tv));\n+      return Result;\n+   end clock_gettime;\n+\n+   -----------------\n+   -- sched_yield --\n+   -----------------\n+\n+   function sched_yield return int is\n+      procedure sched_yield_base (arg : System.Address);\n+      pragma Import (C, sched_yield_base, \"pthread_yield_np\");\n+\n+   begin\n+      sched_yield_base (System.Null_Address);\n+      return 0;\n+   end sched_yield;\n+\n+   ------------------\n+   -- pthread_init --\n+   ------------------\n+\n+   procedure pthread_init is\n+   begin\n+      null;\n+   end pthread_init;\n+\n+   ----------------\n+   -- Stack_Base --\n+   ----------------\n+\n+   function Get_Stack_Base (thread : pthread_t) return Address is\n+      pragma Unreferenced (thread);\n+   begin\n+      return System.Null_Address;\n+   end Get_Stack_Base;\n+\n+end System.OS_Interface;"}, {"sha": "eccc26ef6f2bb2d0498a45223d398b68aa011d8f", "filename": "gcc/ada/s-osinte-darwin.ads", "status": "added", "additions": 641, "deletions": 0, "changes": 641, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c470d7c9d35a8554371de7ba3c9a93bd2b41f07a/gcc%2Fada%2Fs-osinte-darwin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c470d7c9d35a8554371de7ba3c9a93bd2b41f07a/gcc%2Fada%2Fs-osinte-darwin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-darwin.ads?ref=c470d7c9d35a8554371de7ba3c9a93bd2b41f07a", "patch": "@@ -0,0 +1,641 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                GNU ADA RUN-TIME LIBRARY (GNARL) COMPONENTS               --\n+--                                                                          --\n+--                   S Y S T E M . O S _ I N T E R F A C E                  --\n+--                                                                          --\n+--                                  S p e c                                 --\n+--                                                                          --\n+--             Copyright (C) 1991-1994, Florida State University            --\n+--             Copyright (C) 1995-2004, Free Software Foundation, Inc.      --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion. GNARL is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNARL; see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University.       --\n+-- Extensive contributions were provided by Ada Core Technologies, Inc.     --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is Darwin pthreads version of this package.\n+\n+--  This package includes all direct interfaces to OS services\n+--  that are needed by children of System.\n+\n+--  PLEASE DO NOT add any with-clauses to this package\n+--  or remove the pragma Elaborate_Body.\n+--  It is designed to be a bottom-level (leaf) package.\n+\n+with Interfaces.C;\n+package System.OS_Interface is\n+   pragma Preelaborate;\n+\n+   subtype int            is Interfaces.C.int;\n+   subtype short          is Interfaces.C.short;\n+   subtype long           is Interfaces.C.long;\n+   subtype unsigned       is Interfaces.C.unsigned;\n+   subtype unsigned_short is Interfaces.C.unsigned_short;\n+   subtype unsigned_long  is Interfaces.C.unsigned_long;\n+   subtype unsigned_char  is Interfaces.C.unsigned_char;\n+   subtype plain_char     is Interfaces.C.plain_char;\n+   subtype size_t         is Interfaces.C.size_t;\n+\n+   -----------\n+   -- Errno --\n+   -----------\n+\n+   function errno return int;\n+   pragma Import (C, errno, \"__get_errno\");\n+\n+   EINTR     : constant := 4;\n+   ENOMEM    : constant := 12;\n+   EINVAL    : constant := 22;\n+   EAGAIN    : constant := 35;\n+   ETIMEDOUT : constant := 60;\n+\n+   -------------\n+   -- Signals --\n+   -------------\n+\n+   Max_Interrupt : constant := 31;\n+   type Signal is new int range 0 .. Max_Interrupt;\n+   for Signal'Size use int'Size;\n+\n+   SIGHUP     : constant := 1; --  hangup\n+   SIGINT     : constant := 2; --  interrupt (rubout)\n+   SIGQUIT    : constant := 3; --  quit (ASCD FS)\n+   SIGILL     : constant := 4; --  illegal instruction (not reset)\n+   SIGTRAP    : constant := 5; --  trace trap (not reset)\n+   SIGIOT     : constant := 6; --  IOT instruction\n+   SIGABRT    : constant := 6; --  used by abort, replace SIGIOT in the  future\n+   SIGEMT     : constant := 7; --  EMT instruction\n+   SIGFPE     : constant := 8; --  floating point exception\n+   SIGKILL    : constant := 9; --  kill (cannot be caught or ignored)\n+   SIGBUS     : constant := 10; --  bus error\n+   SIGSEGV    : constant := 11; --  segmentation violation\n+   SIGSYS     : constant := 12; --  bad argument to system call\n+   SIGPIPE    : constant := 13; --  write on a pipe with no one to read it\n+   SIGALRM    : constant := 14; --  alarm clock\n+   SIGTERM    : constant := 15; --  software termination signal from kill\n+   SIGURG     : constant := 16; --  urgent condition on IO channel\n+   SIGSTOP    : constant := 17; --  stop (cannot be caught or ignored)\n+   SIGTSTP    : constant := 18; --  user stop requested from tty\n+   SIGCONT    : constant := 19; --  stopped process has been continued\n+   SIGCHLD    : constant := 20; --  child status change\n+   SIGTTIN    : constant := 21; --  background tty read attempted\n+   SIGTTOU    : constant := 22; --  background tty write attempted\n+   SIGIO      : constant := 23; --  I/O possible (Solaris SIGPOLL alias)\n+   SIGXCPU    : constant := 24; --  CPU time limit exceeded\n+   SIGXFSZ    : constant := 25; --  filesize limit exceeded\n+   SIGVTALRM  : constant := 26; --  virtual timer expired\n+   SIGPROF    : constant := 27; --  profiling timer expired\n+   SIGWINCH   : constant := 28; --  window size change\n+   SIGINFO    : constant := 29; --  information request\n+   SIGUSR1    : constant := 30; --  user defined signal 1\n+   SIGUSR2    : constant := 31; --  user defined signal 2\n+\n+   SIGADAABORT : constant := SIGABRT;\n+   --  Change this if you want to use another signal for task abort.\n+   --  SIGTERM might be a good one.\n+\n+   type Signal_Set is array (Natural range <>) of Signal;\n+\n+   Unmasked    : constant Signal_Set :=\n+     (SIGTTIN, SIGTTOU, SIGSTOP, SIGTSTP);\n+\n+   Reserved    : constant Signal_Set :=\n+     (SIGKILL, SIGSTOP);\n+\n+   type sigset_t is private;\n+\n+   function sigaddset (set : access sigset_t; sig : Signal) return int;\n+   pragma Import (C, sigaddset, \"sigaddset\");\n+\n+   function sigdelset (set : access sigset_t; sig : Signal) return int;\n+   pragma Import (C, sigdelset, \"sigdelset\");\n+\n+   function sigfillset (set : access sigset_t) return int;\n+   pragma Import (C, sigfillset, \"sigfillset\");\n+\n+   function sigismember (set : access sigset_t; sig : Signal) return int;\n+   pragma Import (C, sigismember, \"sigismember\");\n+\n+   function sigemptyset (set : access sigset_t) return int;\n+   pragma Import (C, sigemptyset, \"sigemptyset\");\n+\n+   type siginfo_t is private;\n+   type ucontext_t is private;\n+\n+   type Signal_Handler is access procedure\n+     (signo   : Signal;\n+      info    : access siginfo_t;\n+      context : access ucontext_t);\n+\n+   type struct_sigaction is record\n+      sa_handler : System.Address;\n+      sa_mask    : sigset_t;\n+      sa_flags   : int;\n+   end record;\n+   pragma Convention (C, struct_sigaction);\n+   type struct_sigaction_ptr is access all struct_sigaction;\n+\n+   SIG_BLOCK   : constant := 1;\n+   SIG_UNBLOCK : constant := 2;\n+   SIG_SETMASK : constant := 3;\n+\n+   SIG_DFL : constant := 0;\n+   SIG_IGN : constant := 1;\n+\n+   SA_SIGINFO : constant := 16#0040#;\n+\n+   function sigaction\n+     (sig  : Signal;\n+      act  : struct_sigaction_ptr;\n+      oact : struct_sigaction_ptr) return int;\n+   pragma Import (C, sigaction, \"sigaction\");\n+\n+   ----------\n+   -- Time --\n+   ----------\n+\n+   Time_Slice_Supported : constant Boolean := True;\n+   --  Indicates wether time slicing is supported.\n+\n+   type timespec is private;\n+\n+   type clockid_t is private;\n+\n+   CLOCK_REALTIME : constant clockid_t;\n+\n+   function clock_gettime\n+     (clock_id : clockid_t;\n+      tp       : access timespec) return int;\n+\n+   function To_Duration (TS : timespec) return Duration;\n+   pragma Inline (To_Duration);\n+\n+   function To_Timespec (D : Duration) return timespec;\n+   pragma Inline (To_Timespec);\n+\n+   type struct_timeval is private;\n+\n+   function To_Duration (TV : struct_timeval) return Duration;\n+   pragma Inline (To_Duration);\n+\n+   function To_Timeval (D : Duration) return struct_timeval;\n+   pragma Inline (To_Timeval);\n+\n+   -------------------------\n+   -- Priority Scheduling --\n+   -------------------------\n+\n+   SCHED_OTHER : constant := 1;\n+   SCHED_RR    : constant := 2;\n+   SCHED_FIFO  : constant := 4;\n+\n+   -------------\n+   -- Process --\n+   -------------\n+\n+   type pid_t is private;\n+\n+   function kill (pid : pid_t; sig : Signal) return int;\n+   pragma Import (C, kill, \"kill\");\n+\n+   function getpid return pid_t;\n+   pragma Import (C, getpid, \"getpid\");\n+\n+   ---------\n+   -- LWP --\n+   ---------\n+\n+   function lwp_self return System.Address;\n+   --  lwp_self does not exist on this thread library, revert to pthread_self\n+   --  which is the closest approximation (with getpid). This function is\n+   --  needed to share 7staprop.adb across POSIX-like targets.\n+   pragma Import (C, lwp_self, \"pthread_self\");\n+\n+   -------------\n+   -- Threads --\n+   -------------\n+\n+   type Thread_Body is access\n+     function (arg : System.Address) return System.Address;\n+   type pthread_t           is private;\n+   subtype Thread_Id        is pthread_t;\n+\n+   type pthread_mutex_t     is limited private;\n+   type pthread_cond_t      is limited private;\n+   type pthread_attr_t      is limited private;\n+   type pthread_mutexattr_t is limited private;\n+   type pthread_condattr_t  is limited private;\n+   type pthread_key_t       is private;\n+\n+   type pthread_mutex_ptr is access all pthread_mutex_t;\n+   type pthread_cond_ptr is access all pthread_cond_t;\n+\n+   PTHREAD_CREATE_DETACHED : constant := 2;\n+\n+   -----------\n+   -- Stack --\n+   -----------\n+\n+   Stack_Base_Available : constant Boolean := False;\n+   --  Indicates wether the stack base is available on this target.\n+   --  This allows us to share s-osinte.adb between all the FSU run time.\n+   --  Note that this value can only be true if pthread_t has a complete\n+   --  definition that corresponds exactly to the C header files.\n+\n+   function Get_Stack_Base (thread : pthread_t) return System.Address;\n+   pragma Inline (Get_Stack_Base);\n+   --  returns the stack base of the specified thread.\n+   --  Only call this function when Stack_Base_Available is True.\n+\n+   function Get_Page_Size return size_t;\n+   function Get_Page_Size return System.Address;\n+   pragma Import (C, Get_Page_Size, \"getpagesize\");\n+   --  returns the size of a page, or 0 if this is not relevant on this\n+   --  target\n+\n+   PROT_NONE  : constant := 0;\n+   PROT_READ  : constant := 1;\n+   PROT_WRITE : constant := 2;\n+   PROT_EXEC  : constant := 4;\n+   PROT_ALL   : constant := PROT_READ + PROT_WRITE + PROT_EXEC;\n+\n+   PROT_ON    : constant := PROT_NONE;\n+   PROT_OFF   : constant := PROT_ALL;\n+\n+   function mprotect (addr : System.Address;\n+                      len : size_t;\n+                      prot : int) return int;\n+   pragma Import (C, mprotect);\n+\n+   ---------------------------------------\n+   -- Nonstandard Thread Initialization --\n+   ---------------------------------------\n+\n+   procedure pthread_init;\n+\n+   -------------------------\n+   -- POSIX.1c  Section 3 --\n+   -------------------------\n+\n+   function sigwait (set : access sigset_t; sig : access Signal) return int;\n+   pragma Import (C, sigwait, \"sigwait\");\n+\n+   function pthread_kill (thread : pthread_t; sig : Signal) return int;\n+   pragma Import (C, pthread_kill, \"pthread_kill\");\n+\n+   type sigset_t_ptr is access all sigset_t;\n+\n+   function pthread_sigmask\n+     (how  : int;\n+      set  : sigset_t_ptr;\n+      oset : sigset_t_ptr) return int;\n+   pragma Import (C, pthread_sigmask, \"sigprocmask\");\n+\n+   --------------------------\n+   -- POSIX.1c  Section 11 --\n+   --------------------------\n+\n+   function pthread_mutexattr_init\n+     (attr : access pthread_mutexattr_t) return int;\n+   pragma Import (C, pthread_mutexattr_init, \"pthread_mutexattr_init\");\n+\n+   function pthread_mutexattr_destroy\n+     (attr : access pthread_mutexattr_t) return int;\n+   pragma Import (C, pthread_mutexattr_destroy, \"pthread_mutexattr_destroy\");\n+\n+   function pthread_mutex_init\n+     (mutex : access pthread_mutex_t;\n+      attr  : access pthread_mutexattr_t) return int;\n+   pragma Import (C, pthread_mutex_init, \"pthread_mutex_init\");\n+\n+   function pthread_mutex_destroy (mutex : access pthread_mutex_t) return int;\n+   pragma Import (C, pthread_mutex_destroy, \"pthread_mutex_destroy\");\n+\n+   function pthread_mutex_lock (mutex : access pthread_mutex_t) return int;\n+   pragma Import (C, pthread_mutex_lock, \"pthread_mutex_lock\");\n+\n+   function pthread_mutex_unlock (mutex : access pthread_mutex_t) return int;\n+   pragma Import (C, pthread_mutex_unlock, \"pthread_mutex_unlock\");\n+\n+   function pthread_condattr_init\n+     (attr : access pthread_condattr_t) return int;\n+   pragma Import (C, pthread_condattr_init, \"pthread_condattr_init\");\n+\n+   function pthread_condattr_destroy\n+     (attr : access pthread_condattr_t) return int;\n+   pragma Import (C, pthread_condattr_destroy, \"pthread_condattr_destroy\");\n+\n+   function pthread_cond_init\n+     (cond : access pthread_cond_t;\n+      attr : access pthread_condattr_t) return int;\n+   pragma Import (C, pthread_cond_init, \"pthread_cond_init\");\n+\n+   function pthread_cond_destroy (cond : access pthread_cond_t) return int;\n+   pragma Import (C, pthread_cond_destroy, \"pthread_cond_destroy\");\n+\n+   function pthread_cond_signal (cond : access pthread_cond_t) return int;\n+   pragma Import (C, pthread_cond_signal, \"pthread_cond_signal\");\n+\n+   function pthread_cond_wait\n+     (cond  : access pthread_cond_t;\n+      mutex : access pthread_mutex_t) return int;\n+   pragma Import (C, pthread_cond_wait, \"pthread_cond_wait\");\n+\n+   function pthread_cond_timedwait\n+     (cond    : access pthread_cond_t;\n+      mutex   : access pthread_mutex_t;\n+      abstime : access timespec) return int;\n+   pragma Import (C, pthread_cond_timedwait, \"pthread_cond_timedwait\");\n+\n+   Relative_Timed_Wait : constant Boolean := False;\n+   --  pthread_cond_timedwait requires an absolute delay time\n+\n+   --------------------------\n+   -- POSIX.1c  Section 13 --\n+   --------------------------\n+\n+   PTHREAD_PRIO_NONE    : constant := 0;\n+   PTHREAD_PRIO_INHERIT : constant := 1;\n+   PTHREAD_PRIO_PROTECT : constant := 2;\n+\n+   function pthread_mutexattr_setprotocol\n+     (attr     : access pthread_mutexattr_t;\n+      protocol : int) return int;\n+   pragma Import\n+     (C, pthread_mutexattr_setprotocol, \"pthread_mutexattr_setprotocol\");\n+\n+   function pthread_mutexattr_setprioceiling\n+     (attr     : access pthread_mutexattr_t;\n+      prioceiling : int) return int;\n+   pragma Import\n+     (C, pthread_mutexattr_setprioceiling,\n+      \"pthread_mutexattr_setprioceiling\");\n+\n+   type struct_sched_param is record\n+      sched_priority : int;  --  scheduling priority\n+   end record;\n+\n+   function pthread_setschedparam\n+     (thread : pthread_t;\n+      policy : int;\n+      param  : access struct_sched_param) return int;\n+   pragma Import (C, pthread_setschedparam, \"pthread_setschedparam\");\n+\n+   function pthread_attr_setscope\n+     (attr            : access pthread_attr_t;\n+      contentionscope : int) return int;\n+   pragma Import (C, pthread_attr_setscope, \"pthread_attr_setscope\");\n+\n+   function pthread_attr_setinheritsched\n+     (attr            : access pthread_attr_t;\n+      inheritsched : int) return int;\n+   pragma Import\n+     (C, pthread_attr_setinheritsched, \"pthread_attr_setinheritsched\");\n+\n+   function pthread_attr_setschedpolicy\n+     (attr   : access pthread_attr_t;\n+      policy : int) return int;\n+   pragma Import (C, pthread_attr_setschedpolicy, \"pthread_attr_setsched\");\n+\n+   function sched_yield return int;\n+\n+   ---------------------------\n+   -- P1003.1c - Section 16 --\n+   ---------------------------\n+\n+   function pthread_attr_init (attributes : access pthread_attr_t) return int;\n+   pragma Import (C, pthread_attr_init, \"pthread_attr_init\");\n+\n+   function pthread_attr_destroy\n+     (attributes : access pthread_attr_t) return int;\n+   pragma Import (C, pthread_attr_destroy, \"pthread_attr_destroy\");\n+\n+   function pthread_attr_setdetachstate\n+     (attr        : access pthread_attr_t;\n+      detachstate : int) return int;\n+   pragma Import\n+     (C, pthread_attr_setdetachstate, \"pthread_attr_setdetachstate\");\n+\n+   function pthread_attr_setstacksize\n+     (attr      : access pthread_attr_t;\n+      stacksize : size_t) return int;\n+   pragma Import\n+     (C, pthread_attr_setstacksize, \"pthread_attr_setstacksize\");\n+\n+   function pthread_create\n+     (thread        : access pthread_t;\n+      attributes    : access pthread_attr_t;\n+      start_routine : Thread_Body;\n+      arg           : System.Address) return int;\n+   pragma Import (C, pthread_create, \"pthread_create\");\n+\n+   procedure pthread_exit (status : System.Address);\n+   pragma Import (C, pthread_exit, \"pthread_exit\");\n+\n+   function pthread_self return pthread_t;\n+   pragma Import (C, pthread_self, \"pthread_self\");\n+\n+   --------------------------\n+   -- POSIX.1c  Section 17 --\n+   --------------------------\n+\n+   function pthread_setspecific\n+     (key   : pthread_key_t;\n+      value : System.Address) return int;\n+   pragma Import (C, pthread_setspecific, \"pthread_setspecific\");\n+\n+   function pthread_getspecific (key : pthread_key_t) return System.Address;\n+   pragma Import (C, pthread_getspecific, \"pthread_getspecific\");\n+\n+   type destructor_pointer is access procedure (arg : System.Address);\n+\n+   function pthread_key_create\n+     (key        : access pthread_key_t;\n+      destructor : destructor_pointer) return int;\n+   pragma Import (C, pthread_key_create, \"pthread_key_create\");\n+\n+private\n+\n+   type array_type_1 is array (Integer range 0 .. 3) of unsigned_long;\n+   type sigset_t is record\n+      X_X_sigbits  : array_type_1;\n+   end record;\n+   pragma Convention (C, sigset_t);\n+\n+   type pid_t is new long;\n+\n+   type time_t is new long;\n+\n+   type timespec is record\n+      tv_sec  : time_t;\n+      tv_nsec : long;\n+   end record;\n+   pragma Convention (C, timespec);\n+\n+   type clockid_t is new int;\n+   CLOCK_REALTIME : constant clockid_t := 0;\n+\n+   type struct_timeval is record\n+      tv_sec  : long;\n+      tv_usec : long;\n+   end record;\n+   pragma Convention (C, struct_timeval);\n+\n+   --\n+   --  Darwin specific signal implementation\n+   --\n+   type Pad_Type is array (0 .. 7) of int;\n+   type siginfo_t is record\n+      si_signo  : int;               --  signal number\n+      si_errno  : int;               --  errno association\n+      si_code   : int;               --  signal code\n+      si_pid    : int;               --  sending process\n+      si_uid    : unsigned;          --  sender's ruid\n+      si_status : int;               --  exit value\n+      si_addr   : System.Address;    --  faulting instruction\n+      si_value  : System.Address;    --  signal value\n+      si_band   : long;              --  band event for SIGPOLL\n+      pad       : Pad_Type;          --  RFU\n+   end record;\n+   pragma Convention (C, siginfo_t);\n+\n+   type stack_t is record\n+      ss_sp    : System.Address;\n+      ss_size  : int;\n+      ss_flags : int;\n+   end record;\n+   pragma Convention (C, stack_t);\n+\n+   type mcontext_t is new System.Address;\n+\n+   type ucontext_t is record\n+      uc_onstack  : int;\n+      uc_sigmask  : sigset_t;         --  Signal Mask Used By This Context\n+      uc_stack    : stack_t;          --  Stack Used By This Context\n+      uc_link     : System.Address;   --  Pointer To Resuming Context\n+      uc_mcsize   : size_t;           --  Size of The Machine Context\n+      uc_mcontext : mcontext_t;       --  Machine Specific Context\n+   end record;\n+   pragma Convention (C, ucontext_t);\n+\n+   --\n+   --  Darwin specific pthread implementation\n+   --\n+   type pthread_t is new System.Address;\n+\n+   type pthread_lock_t is new long;\n+\n+   type sched_param_pad is array (0 .. 3) of plain_char;\n+   type sched_param is record\n+      sched_priority : int;\n+      opaque         : sched_param_pad;\n+   end record;\n+   pragma Convention (C, sched_param);\n+   type boolean_t is new int;\n+\n+   type pthread_attr_t is record\n+      sig             : long;\n+      lock            : pthread_lock_t;\n+      detached        : int;\n+      inherit         : int;\n+      policy          : int;\n+      param           : sched_param;\n+      stackaddr       : System.Address;\n+      stacksize       : long;\n+      freeStackOnExit : boolean_t;\n+   end record;\n+   pragma Convention (C, pthread_attr_t);\n+\n+   type pthread_mutexattr_t is record\n+      sig         : long;\n+      prioceiling : int;\n+      protocol    : int;\n+   end record;\n+   pragma Convention (C, pthread_mutexattr_t);\n+\n+   type mach_port_t is new unsigned_long;\n+\n+   type pthread_mutex_t is record\n+      sig         : long;\n+      lock        : pthread_lock_t;\n+      prioceiling : int;\n+      priority    : int;\n+      protocol    : int;\n+      owner       : pthread_t;\n+      next        : pthread_mutex_ptr;\n+      prev        : pthread_mutex_ptr;\n+      busy        : pthread_cond_ptr;\n+      field       : int;\n+      sem         : mach_port_t;\n+   end record;\n+   pragma Convention (C, pthread_mutex_t);\n+\n+   type pthread_condattr_t is record\n+      sig         : long;\n+      unsupported : int;\n+   end record;\n+   pragma Convention (C, pthread_condattr_t);\n+\n+   type pthread_cond_t is record\n+      sig         : long;\n+      lock        : pthread_lock_t;\n+      sem         : mach_port_t;\n+      next        : pthread_cond_ptr;\n+      prev        : pthread_cond_ptr;\n+      busy        : pthread_mutex_ptr;\n+      waiters     : short;\n+      sigspending : short;\n+   end record;\n+   pragma Convention (C, pthread_cond_t);\n+\n+   type pthread_once_t is record\n+      sig  : long;\n+      lock : pthread_lock_t;\n+   end record;\n+   pragma Convention (C, pthread_once_t);\n+\n+   type rwlockattr_rfu_array is array (0 .. 1) of int;\n+\n+   type pthread_rwlockattr_t is record\n+      sig     : long;\n+      pshared : int;\n+      rfu     : rwlockattr_rfu_array;\n+   end record;\n+   pragma Convention (C, pthread_rwlockattr_t);\n+\n+   type rwlock_rfu_array is array (0 .. 2) of int;\n+\n+   type pthread_rwlock_t is record\n+      sig           : long;\n+      lock          : pthread_mutex_t;\n+      state         : int;\n+      read_signal   : pthread_cond_t;\n+      write_signal  : pthread_cond_t;\n+      block_writers : int;\n+      pshared       : int;\n+      rfu           : rwlock_rfu_array;\n+   end record;\n+   pragma Convention (C, pthread_rwlock_t);\n+\n+   type pthread_key_t is new unsigned_long;\n+\n+end System.OS_Interface;"}, {"sha": "6b16d1f53f1d6e80f541cf02a775ae10a3acd6b4", "filename": "gcc/ada/system-darwin-ppc.ads", "status": "added", "additions": 176, "deletions": 0, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c470d7c9d35a8554371de7ba3c9a93bd2b41f07a/gcc%2Fada%2Fsystem-darwin-ppc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c470d7c9d35a8554371de7ba3c9a93bd2b41f07a/gcc%2Fada%2Fsystem-darwin-ppc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-darwin-ppc.ads?ref=c470d7c9d35a8554371de7ba3c9a93bd2b41f07a", "patch": "@@ -0,0 +1,176 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                        GNAT RUN-TIME COMPONENTS                          --\n+--                                                                          --\n+--                               S Y S T E M                                --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                          (Darwin/PPC Version)                            --\n+--                                                                          --\n+--          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- This specification is derived from the Ada Reference Manual for use with --\n+-- GNAT. The copyright notice above, and the license provisions that follow --\n+-- apply solely to the  contents of the part following the private keyword. --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package System is\n+pragma Pure (System);\n+--  Note that we take advantage of the implementation permission to\n+--  make this unit Pure instead of Preelaborable, see RM 13.7(36)\n+\n+   type Name is (SYSTEM_NAME_GNAT);\n+   System_Name : constant Name := SYSTEM_NAME_GNAT;\n+\n+   --  System-Dependent Named Numbers\n+\n+   Min_Int               : constant := Long_Long_Integer'First;\n+   Max_Int               : constant := Long_Long_Integer'Last;\n+\n+   Max_Binary_Modulus    : constant := 2 ** Long_Long_Integer'Size;\n+   Max_Nonbinary_Modulus : constant := Integer'Last;\n+\n+   Max_Base_Digits       : constant := Long_Long_Float'Digits;\n+   Max_Digits            : constant := Long_Long_Float'Digits;\n+\n+   Max_Mantissa          : constant := 63;\n+   Fine_Delta            : constant := 2.0 ** (-Max_Mantissa);\n+\n+   Tick                  : constant := 0.01;\n+\n+   --  Storage-related Declarations\n+\n+   type Address is private;\n+   Null_Address : constant Address;\n+\n+   Storage_Unit : constant := 8;\n+   Word_Size    : constant := 32;\n+   Memory_Size  : constant := 2 ** 32;\n+\n+   --  Address comparison\n+\n+   function \"<\"  (Left, Right : Address) return Boolean;\n+   function \"<=\" (Left, Right : Address) return Boolean;\n+   function \">\"  (Left, Right : Address) return Boolean;\n+   function \">=\" (Left, Right : Address) return Boolean;\n+   function \"=\"  (Left, Right : Address) return Boolean;\n+\n+   pragma Import (Intrinsic, \"<\");\n+   pragma Import (Intrinsic, \"<=\");\n+   pragma Import (Intrinsic, \">\");\n+   pragma Import (Intrinsic, \">=\");\n+   pragma Import (Intrinsic, \"=\");\n+\n+   --  Other System-Dependent Declarations\n+\n+   type Bit_Order is (High_Order_First, Low_Order_First);\n+   Default_Bit_Order : constant Bit_Order := High_Order_First;\n+\n+   --  Priority-related Declarations (RM D.1)\n+\n+   --  The values defined here are derived from the following Darwin\n+   --  sources:\n+   --\n+   --  Libc/pthreads/pthread.c\n+   --    pthread_init calls host_info to retrieve the HOST_PRIORITY_INFO.\n+   --    This file includes \"pthread_internals\".\n+   --  Libc/pthreads/pthread_internals.h\n+   --    This file includes <mach/mach.h>.\n+   --  xnu/osfmk/mach/mach.h\n+   --    This file includes <mach/mach_types.h>.\n+   --  xnu/osfmk/mach/mach_types.h\n+   --    This file includes <mach/host_info.h>.\n+   --  xnu/osfmk/mach/host_info.h\n+   --    This file contains the definition of the host_info_t data structure\n+   --    and the function prototype for host_info.\n+   --  xnu/osfmk/kern/host.c\n+   --    This file defines the function host_info which sets the\n+   --    priority_info field of struct host_info_t. This file includes\n+   --    <kern/processor.h>.\n+   --  xnu/osfmk/kern/processor.h\n+   --    This file includes <kern/sched.h>.\n+   --  xnu/osfmk/kern/sched.h\n+   --    This file defines the values for each level of priority.\n+\n+   Max_Interrupt_Priority : constant Positive := 63;\n+   Max_Priority           : constant Positive := Max_Interrupt_Priority - 1;\n+\n+   subtype Any_Priority is Integer range 0 .. Max_Interrupt_Priority;\n+   subtype Priority is Any_Priority range 0 .. Max_Priority;\n+   subtype Interrupt_Priority is Any_Priority\n+     range Priority'Last + 1 .. Max_Interrupt_Priority;\n+\n+   Default_Priority : constant Priority :=\n+     (Priority'Last - Priority'First) / 2;\n+\n+private\n+\n+   type Address is mod Memory_Size;\n+   Null_Address : constant Address := 0;\n+\n+   --------------------------------------\n+   -- System Implementation Parameters --\n+   --------------------------------------\n+\n+   --  These parameters provide information about the target that is used\n+   --  by the compiler. They are in the private part of System, where they\n+   --  can be accessed using the special circuitry in the Targparm unit\n+   --  whose source should be consulted for more detailed descriptions\n+   --  of the individual switch values.\n+\n+   AAMP                      : constant Boolean := False;\n+   Backend_Divide_Checks     : constant Boolean := False;\n+   Backend_Overflow_Checks   : constant Boolean := False;\n+   Command_Line_Args         : constant Boolean := True;\n+   Configurable_Run_Time     : constant Boolean := False;\n+   Denorm                    : constant Boolean := True;\n+   Duration_32_Bits          : constant Boolean := False;\n+   Exit_Status_Supported     : constant Boolean := True;\n+   Fractional_Fixed_Ops      : constant Boolean := False;\n+   Frontend_Layout           : constant Boolean := False;\n+   Functions_Return_By_DSP   : constant Boolean := False;\n+   Machine_Overflows         : constant Boolean := False;\n+   Machine_Rounds            : constant Boolean := True;\n+   OpenVMS                   : constant Boolean := False;\n+   Signed_Zeros              : constant Boolean := True;\n+   Stack_Check_Default       : constant Boolean := False;\n+   Stack_Check_Probes        : constant Boolean := False;\n+   Support_64_Bit_Divides    : constant Boolean := True;\n+   Support_Aggregates        : constant Boolean := True;\n+   Support_Composite_Assign  : constant Boolean := True;\n+   Support_Composite_Compare : constant Boolean := True;\n+   Support_Long_Shifts       : constant Boolean := True;\n+   Suppress_Standard_Library : constant Boolean := False;\n+   Use_Ada_Main_Program_Name : constant Boolean := False;\n+   ZCX_By_Default            : constant Boolean := False;\n+   GCC_ZCX_Support           : constant Boolean := False;\n+   Front_End_ZCX_Support     : constant Boolean := False;\n+\n+   --  Obsolete entries, to be removed eventually (bootstrap issues!)\n+\n+   --  High_Integrity_Mode       : constant Boolean := False;\n+   --  Long_Shifts_Inlined       : constant Boolean := True;\n+\n+end System;"}]}