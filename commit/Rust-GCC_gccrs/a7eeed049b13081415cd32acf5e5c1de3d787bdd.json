{"sha": "a7eeed049b13081415cd32acf5e5c1de3d787bdd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdlZWVkMDQ5YjEzMDgxNDE1Y2QzMmFjZjVlNWMxZGUzZDc4N2JkZA==", "commit": {"author": {"name": "Keith Seitz", "email": "keiths@redhat.com", "date": "2007-06-20T20:30:34Z"}, "committer": {"name": "Keith Seitz", "email": "kseitz@gcc.gnu.org", "date": "2007-06-20T20:30:34Z"}, "message": "Update from classpath trunk:\n\n        * gnu/classpath/jdwp/processor/ClassTypeCommandSet.java\n        (executeInvokeMethod): No need to use ValueFactory any more;\n        MethodResult.getReturnedValue now returns a Value.\n        (executeNewInstance): Double-check that return result is\n        an ObjectValue; throw JdwpInternalErrorException if it is not.\n        (invokeMethod): Method IDs come from VMMethod, not VMIdManager.\n        Arguments are Values not Objects.\n        Use ValueFactory to create arguments.\n        Pass invocation options to VMVirtualMachine.executeMethod.\n        Don't do any thread suspend/resume work: VMVM.executeMethod\n        will take care of it.\n        * gnu/classpath/jdwp/processor/ObjectReferenceCommandSet.java\n        (executeInvokeMethod): Method IDs come from VMMethod, not\n        VMIdManager.\n        Arguments should be Values instead of Objects.\n        Use ValueFactory to create Values.\n        Remove specific option handling and pass options to\n        VMVirtualMachine.executeMethod.\n        Remove thread suspension.\n        Use MethodResult.getReturnedValue to get method's result.\n        * gnu/classpath/jdwp/util/MethodResult.java\n        (returnedValue): Change type to Value.\n        (thrownException): Change type to Throwable.\n        (resType): Remove.\n        (MethodResult): New constructor.\n        (setReturnedValue): Remove.\n        (SetThrownException): Remove.\n        (getResultType): Remove.\n        (setResultType): Remove.\n        * gnu/classpath/jdwp/value/ObjectValue.java (getValue):\n        New method.\n        * vm/reference/gnu/classpath/jdwp/VMVirtualMachine.java\n        (executeMethod): Replace \"nonVirtual\" parameter with more\n        generic \"options\" parameter.\n        Replace java.lang.reflect.Method parameter with VMMethod.\n        Replace Object[] parameter with Value[] parameter.\n\nFrom-SVN: r125895", "tree": {"sha": "2111b26ec03f87911659e6bd58a97f1e83b76957", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2111b26ec03f87911659e6bd58a97f1e83b76957"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7eeed049b13081415cd32acf5e5c1de3d787bdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7eeed049b13081415cd32acf5e5c1de3d787bdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7eeed049b13081415cd32acf5e5c1de3d787bdd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7eeed049b13081415cd32acf5e5c1de3d787bdd/comments", "author": {"login": "shtiek", "id": 107581324, "node_id": "U_kgDOBmmPjA", "avatar_url": "https://avatars.githubusercontent.com/u/107581324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shtiek", "html_url": "https://github.com/shtiek", "followers_url": "https://api.github.com/users/shtiek/followers", "following_url": "https://api.github.com/users/shtiek/following{/other_user}", "gists_url": "https://api.github.com/users/shtiek/gists{/gist_id}", "starred_url": "https://api.github.com/users/shtiek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shtiek/subscriptions", "organizations_url": "https://api.github.com/users/shtiek/orgs", "repos_url": "https://api.github.com/users/shtiek/repos", "events_url": "https://api.github.com/users/shtiek/events{/privacy}", "received_events_url": "https://api.github.com/users/shtiek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7e657ec235f32af78f39a1c710737cc6191b0bde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e657ec235f32af78f39a1c710737cc6191b0bde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e657ec235f32af78f39a1c710737cc6191b0bde"}], "stats": {"total": 214, "additions": 110, "deletions": 104}, "files": [{"sha": "669437a783ac5b4b41a520a0ca27f2e668d8d009", "filename": "libjava/classpath/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7eeed049b13081415cd32acf5e5c1de3d787bdd/libjava%2Fclasspath%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7eeed049b13081415cd32acf5e5c1de3d787bdd/libjava%2Fclasspath%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2FChangeLog?ref=a7eeed049b13081415cd32acf5e5c1de3d787bdd", "patch": "@@ -1,3 +1,42 @@\n+2007-07-20  Keith Seitz  <keiths@redhat.com>\n+\n+\t* gnu/classpath/jdwp/processor/ClassTypeCommandSet.java\n+\t(executeInvokeMethod): No need to use ValueFactory any more;\n+\tMethodResult.getReturnedValue now returns a Value.\n+\t(executeNewInstance): Double-check that return result is\n+\tan ObjectValue; throw JdwpInternalErrorException if it is not.\n+\t(invokeMethod): Method IDs come from VMMethod, not VMIdManager.\n+\tArguments are Values not Objects.\n+\tUse ValueFactory to create arguments.\n+\tPass invocation options to VMVirtualMachine.executeMethod.\n+\tDon't do any thread suspend/resume work: VMVM.executeMethod\n+\twill take care of it.\n+\t* gnu/classpath/jdwp/processor/ObjectReferenceCommandSet.java\n+\t(executeInvokeMethod): Method IDs come from VMMethod, not\n+\tVMIdManager.\n+\tArguments should be Values instead of Objects.\n+\tUse ValueFactory to create Values.\n+\tRemove specific option handling and pass options to\n+\tVMVirtualMachine.executeMethod.\n+\tRemove thread suspension.\n+\tUse MethodResult.getReturnedValue to get method's result.\n+\t* gnu/classpath/jdwp/util/MethodResult.java\n+\t(returnedValue): Change type to Value.\n+\t(thrownException): Change type to Throwable.\n+\t(resType): Remove.\n+\t(MethodResult): New constructor.\n+\t(setReturnedValue): Remove.\n+\t(SetThrownException): Remove.\n+\t(getResultType): Remove.\n+\t(setResultType): Remove.\n+\t* gnu/classpath/jdwp/value/ObjectValue.java (getValue):\n+\tNew method.\n+\t* vm/reference/gnu/classpath/jdwp/VMVirtualMachine.java\n+\t(executeMethod): Replace \"nonVirtual\" parameter with more\n+\tgeneric \"options\" parameter.\n+\tReplace java.lang.reflect.Method parameter with VMMethod.\n+\tReplace Object[] parameter with Value[] parameter.\n+\n 2007-05-19  Andreas Tobler  <a.tobler@schweiz.org>\n \n \tPR libgcj/31659"}, {"sha": "500152ea6612fe999621218b2214fab2f9425cac", "filename": "libjava/classpath/gnu/classpath/jdwp/processor/ClassTypeCommandSet.java", "status": "modified", "additions": 20, "deletions": 42, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7eeed049b13081415cd32acf5e5c1de3d787bdd/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FClassTypeCommandSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7eeed049b13081415cd32acf5e5c1de3d787bdd/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FClassTypeCommandSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FClassTypeCommandSet.java?ref=a7eeed049b13081415cd32acf5e5c1de3d787bdd", "patch": "@@ -41,6 +41,7 @@\n package gnu.classpath.jdwp.processor;\n \n import gnu.classpath.jdwp.JdwpConstants;\n+import gnu.classpath.jdwp.VMMethod;\n import gnu.classpath.jdwp.VMVirtualMachine;\n import gnu.classpath.jdwp.exception.InvalidFieldException;\n import gnu.classpath.jdwp.exception.JdwpException;\n@@ -49,13 +50,13 @@\n import gnu.classpath.jdwp.id.ObjectId;\n import gnu.classpath.jdwp.id.ReferenceTypeId;\n import gnu.classpath.jdwp.util.MethodResult;\n+import gnu.classpath.jdwp.value.ObjectValue;\n import gnu.classpath.jdwp.value.Value;\n import gnu.classpath.jdwp.value.ValueFactory;\n \n import java.io.DataOutputStream;\n import java.io.IOException;\n import java.lang.reflect.Field;\n-import java.lang.reflect.Method;\n import java.nio.ByteBuffer;\n \n /**\n@@ -151,23 +152,24 @@ private void executeInvokeMethod(ByteBuffer bb, DataOutputStream os)\n   {\n     MethodResult mr = invokeMethod(bb);\n \n-    Object value = mr.getReturnedValue();\n-    Exception exception = mr.getThrownException();\n+    Throwable exception = mr.getThrownException();\n     ObjectId eId = idMan.getObjectId(exception);\n-\n-    Value val = ValueFactory.createFromObject(value, mr.getResultType());\n-    val.writeTagged(os);\n+    mr.getReturnedValue().writeTagged(os);\n     eId.writeTagged(os);\n   }\n \n   private void executeNewInstance(ByteBuffer bb, DataOutputStream os)\n       throws JdwpException, IOException\n   {\n     MethodResult mr = invokeMethod(bb);\n+    Throwable exception = mr.getThrownException();\n+\n+    if (exception == null && ! (mr.getReturnedValue() instanceof ObjectValue))\n+      throw new JdwpInternalErrorException(\"new instance returned non-object\");\n+\n+    ObjectValue ov = (ObjectValue) mr.getReturnedValue();\n+    ObjectId oId = idMan.getObjectId(ov.getValue());\n \n-    Object obj = mr.getReturnedValue();\n-    ObjectId oId = idMan.getObjectId(obj);\n-    Exception exception = mr.getThrownException();\n     ObjectId eId = idMan.getObjectId(exception);\n \n     oId.writeTagged(os);\n@@ -177,51 +179,27 @@ private void executeNewInstance(ByteBuffer bb, DataOutputStream os)\n   /**\n    * Execute the static method and return the resulting MethodResult.\n    */\n-  private MethodResult invokeMethod(ByteBuffer bb) throws JdwpException,\n-      IOException\n+  private MethodResult invokeMethod(ByteBuffer bb)\n+    throws JdwpException, IOException\n   {\n     ReferenceTypeId refId = idMan.readReferenceTypeId(bb);\n     Class clazz = refId.getType();\n \n     ObjectId tId = idMan.readObjectId(bb);\n     Thread thread = (Thread) tId.getObject();\n \n-    ObjectId mId = idMan.readObjectId(bb);\n-    Method method = (Method) mId.getObject();\n+    VMMethod method = VMMethod.readId(clazz, bb);\n \n     int args = bb.getInt();\n-    Object[] values = new Object[args];\n+    Value[] values = new Value[args];\n \n     for (int i = 0; i < args; i++)\n-      {\n-        values[i] = Value.getTaggedObject(bb);\n-      }\n+      values[i] = ValueFactory.createFromTagged(bb);\n \n     int invokeOpts = bb.getInt();\n-    boolean suspend = ((invokeOpts\n-\t\t\t& JdwpConstants.InvokeOptions.INVOKE_SINGLE_THREADED)\n-\t\t       != 0);\n-    try\n-      {\n-        if (suspend)\n-\t  VMVirtualMachine.suspendAllThreads ();\n-\n-        MethodResult mr = VMVirtualMachine.executeMethod(null, thread,\n-\t\t\t\t\t\t\t clazz, method,\n-\t\t\t\t\t\t\t values, false);\n-        mr.setResultType(method.getReturnType());\n-        \n-        if (suspend)\n-\t  VMVirtualMachine.resumeAllThreads ();\n-\n-        return mr;\n-      }\n-    catch (Exception ex)\n-      {\n-        if (suspend)\n-\t  VMVirtualMachine.resumeAllThreads ();\n-\n-        throw new JdwpInternalErrorException(ex);\n-      }\n+    MethodResult mr = VMVirtualMachine.executeMethod(null, thread,\n+\t\t\t\t\t\t     clazz, method,\n+\t\t\t\t\t\t     values, invokeOpts);\n+    return mr;\n   }\n }"}, {"sha": "49b3f0d1b3f8afb1fa5649ac21419b9d212d03a3", "filename": "libjava/classpath/gnu/classpath/jdwp/processor/ObjectReferenceCommandSet.java", "status": "modified", "additions": 7, "deletions": 27, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7eeed049b13081415cd32acf5e5c1de3d787bdd/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FObjectReferenceCommandSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7eeed049b13081415cd32acf5e5c1de3d787bdd/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FObjectReferenceCommandSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FObjectReferenceCommandSet.java?ref=a7eeed049b13081415cd32acf5e5c1de3d787bdd", "patch": "@@ -40,6 +40,7 @@\n package gnu.classpath.jdwp.processor;\n \n import gnu.classpath.jdwp.JdwpConstants;\n+import gnu.classpath.jdwp.VMMethod;\n import gnu.classpath.jdwp.VMVirtualMachine;\n import gnu.classpath.jdwp.exception.InvalidFieldException;\n import gnu.classpath.jdwp.exception.JdwpException;\n@@ -213,42 +214,21 @@ private void executeInvokeMethod(ByteBuffer bb, DataOutputStream os)\n     ReferenceTypeId rid = idMan.readReferenceTypeId(bb);\n     Class clazz = rid.getType();\n \n-    ObjectId mid = idMan.readObjectId(bb);\n-    Method method = (Method) mid.getObject();\n+    VMMethod method = VMMethod.readId(clazz, bb);\n \n     int args = bb.getInt();\n-    Object[] values = new Object[args];\n+    Value[] values = new Value[args];\n \n     for (int i = 0; i < args; i++)\n-      {\n-        values[i] = Value.getTaggedObject(bb);\n-      }\n+      values[i] = ValueFactory.createFromTagged(bb);\n \n     int invokeOptions = bb.getInt();\n-    boolean suspend = ((invokeOptions\n-\t\t\t& JdwpConstants.InvokeOptions.INVOKE_SINGLE_THREADED)\n-\t\t       != 0);\n-    if (suspend)\n-      {\n-\t// We must suspend all other running threads first\n-        VMVirtualMachine.suspendAllThreads ();\n-      }\n-\n-    boolean nonVirtual = ((invokeOptions\n-\t\t\t   & JdwpConstants.InvokeOptions.INVOKE_NONVIRTUAL)\n-\t\t\t  != 0);\n-\n     MethodResult mr = VMVirtualMachine.executeMethod(obj, thread,\n \t\t\t\t\t\t     clazz, method,\n-\t\t\t\t\t\t     values, nonVirtual);\n-    mr.setResultType (method.getReturnType());\n-    \n-    Object value = mr.getReturnedValue();\n-    Exception exception = mr.getThrownException();\n-\n+\t\t\t\t\t\t     values, invokeOptions);\n+    Throwable exception = mr.getThrownException();\n     ObjectId eId = idMan.getObjectId(exception);\n-    Value val = ValueFactory.createFromObject(value, mr.getResultType());\n-    val.writeTagged(os);\n+    mr.getReturnedValue().writeTagged(os);\n     eId.writeTagged(os);\n   }\n "}, {"sha": "bf3ee8ed54820ec161f13da5f460b995d32b423e", "filename": "libjava/classpath/gnu/classpath/jdwp/util/MethodResult.java", "status": "modified", "additions": 24, "deletions": 27, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7eeed049b13081415cd32acf5e5c1de3d787bdd/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FMethodResult.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7eeed049b13081415cd32acf5e5c1de3d787bdd/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FMethodResult.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FMethodResult.java?ref=a7eeed049b13081415cd32acf5e5c1de3d787bdd", "patch": "@@ -1,6 +1,6 @@\n /* MethodResult.java -- class to wrap around values returned from a Method call\n    in the VM \n-   Copyright (C) 2005 Free Software Foundation\n+   Copyright (C) 2005, 2007 Free Software Foundation\n \n This file is part of GNU Classpath.\n \n@@ -40,6 +40,8 @@\n \n package gnu.classpath.jdwp.util;\n \n+import gnu.classpath.jdwp.value.Value;\n+\n /**\n  * A class to wrap around values returned from a Method call in the VM.\n  * \n@@ -48,42 +50,37 @@\n public class MethodResult\n {\n   // The Object returned by the executing method\n-  private Object returnedValue;\n+  private Value returnedValue;\n   \n   // Any Exception that was thrown by the executing method\n-  private Exception thrownException;\n+  private Throwable thrownException;\n   \n-  // The type of this result\n-  private Class resType;\n-\n-  public Object getReturnedValue()\n+  /**\n+   * Constructs a new MethodResult object\n+   *\n+   * @param return_value the return value of the method invocation\n+   * @param exc exception thrown during the invocation (or null if none)\n+   */\n+  public MethodResult (Value return_value, Throwable exc)\n   {\n-    return returnedValue;\n+    returnedValue = return_value;\n+    thrownException = exc;\n   }\n \n-  public void setReturnedValue(Object returnedValue)\n+  /**\n+   * Returns the return value of the method invocation\n+   */\n+  public Value getReturnedValue()\n   {\n-    this.returnedValue = returnedValue;\n+    return returnedValue;\n   }\n \n-  public Exception getThrownException()\n+  /**\n+   * Returns the exception thrown during the method invocation\n+   * (or null if none)\n+   */\n+  public Throwable getThrownException()\n   {\n     return thrownException;\n   }\n-\n-  public void setThrownException(Exception thrownException)\n-  {\n-    this.thrownException = thrownException;\n-  }\n-  \n-  public Class getResultType()\n-  {\n-    return resType;\n-  }\n-  \n-  public void setResultType(Class type)\n-  {\n-    resType = type;\n-  }\n-  \n }"}, {"sha": "b5cdb1f9e53c638b99c5478d5058ad1b0d0788ac", "filename": "libjava/classpath/gnu/classpath/jdwp/value/ObjectValue.java", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7eeed049b13081415cd32acf5e5c1de3d787bdd/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FObjectValue.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7eeed049b13081415cd32acf5e5c1de3d787bdd/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FObjectValue.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FObjectValue.java?ref=a7eeed049b13081415cd32acf5e5c1de3d787bdd", "patch": "@@ -66,6 +66,16 @@ public ObjectValue(Object value)\n     _value = value;\n   }\n   \n+  /**\n+   * Get the value held in this Value\n+   * \n+   * @return the value represented by this Value object\n+   */\n+  public Object getValue()\n+  {\n+    return _value;\n+  }\n+\n   /**\n    * Return an object representing this type\n    * "}, {"sha": "3556220ae8ac9ee15148a8d1dd849b4a21b711fe", "filename": "libjava/classpath/vm/reference/gnu/classpath/jdwp/VMVirtualMachine.java", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7eeed049b13081415cd32acf5e5c1de3d787bdd/libjava%2Fclasspath%2Fvm%2Freference%2Fgnu%2Fclasspath%2Fjdwp%2FVMVirtualMachine.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7eeed049b13081415cd32acf5e5c1de3d787bdd/libjava%2Fclasspath%2Fvm%2Freference%2Fgnu%2Fclasspath%2Fjdwp%2FVMVirtualMachine.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fvm%2Freference%2Fgnu%2Fclasspath%2Fjdwp%2FVMVirtualMachine.java?ref=a7eeed049b13081415cd32acf5e5c1de3d787bdd", "patch": "@@ -46,8 +46,8 @@\n import gnu.classpath.jdwp.exception.JdwpException;\n import gnu.classpath.jdwp.util.MethodResult;\n import gnu.classpath.jdwp.util.MonitorInfo;\n+import gnu.classpath.jdwp.value.Value;\n \n-import java.lang.reflect.Method;\n import java.nio.ByteBuffer;\n import java.util.ArrayList;\n import java.util.Collection;\n@@ -284,21 +284,23 @@ public static native ArrayList getLoadRequests(ClassLoader cl)\n     throws JdwpException;\n \n   /**\n-   * Executes a method in the virtual machine\n+   * Executes a method in the virtual machine. The thread must already\n+   * be suspended by a previous event. When the method invocation is\n+   * complete, the thread (or all threads if INVOKE_SINGLE_THREADED is\n+   * not set in options) must be suspended before this method returns.\n    *\n    * @param  obj         instance in which to invoke method (null for static)\n    * @param  thread      the thread in which to invoke the method\n    * @param  clazz       the class in which the method is defined\n    * @param  method      the method to invoke\n    * @param  values      arguments to pass to method\n-   * @param  nonVirtual  \"otherwise, normal virtual invoke\n-   *                     (instance methods only) \"\n+   * @param  options     invocation options\n    * @return a result object containing the results of the invocation\n    */\n-  public static native MethodResult executeMethod(Object obj, Thread thread,\n-\t\t\t\t\t    Class clazz, Method method,\n-\t\t\t\t\t    Object[] values,\n-\t\t\t\t\t    boolean nonVirtual)\n+  public static native MethodResult executeMethod (Object obj, Thread thread,\n+\t\t\t\t\t    Class clazz, VMMethod method,\n+\t\t\t\t\t    Value[] values,\n+\t\t\t\t\t    int options)\n     throws JdwpException;\n \n   /**"}]}