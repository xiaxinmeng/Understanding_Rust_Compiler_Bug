{"sha": "276265195a4e7362b34ac512f3bc0ad5a974dcff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc2MjY1MTk1YTRlNzM2MmIzNGFjNTEyZjNiYzBhZDVhOTc0ZGNmZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-01-21T18:22:35Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-01-21T21:42:10Z"}, "message": "PR c++/90732 - ICE with VLA capture and generic lambda.\n\nWe were failing to handle VLA capture in tsubst_lambda_expr; initially\nbuilding a DECLTYPE_TYPE for the capture and then tsubsting it doesn't give\nthe special VLA handling.  So with this patch we call add_capture again for\nVLAs.\n\n\t* pt.c (tsubst_lambda_expr): Repeat add_capture for VLAs.", "tree": {"sha": "4a16800867fc56302b8bdfd868f06a70d21595d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a16800867fc56302b8bdfd868f06a70d21595d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/276265195a4e7362b34ac512f3bc0ad5a974dcff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/276265195a4e7362b34ac512f3bc0ad5a974dcff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/276265195a4e7362b34ac512f3bc0ad5a974dcff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/276265195a4e7362b34ac512f3bc0ad5a974dcff/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a312c80194685790aec7cf678eba83a536031cbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a312c80194685790aec7cf678eba83a536031cbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a312c80194685790aec7cf678eba83a536031cbf"}], "stats": {"total": 58, "additions": 51, "deletions": 7}, "files": [{"sha": "cfc9c62371f36e9c540329e5d203919bff7e282b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/276265195a4e7362b34ac512f3bc0ad5a974dcff/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/276265195a4e7362b34ac512f3bc0ad5a974dcff/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=276265195a4e7362b34ac512f3bc0ad5a974dcff", "patch": "@@ -1,3 +1,8 @@\n+2020-01-21  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/90732 - ICE with VLA capture and generic lambda.\n+\t* pt.c (tsubst_lambda_expr): Repeat add_capture for VLAs.\n+\n 2020-01-21  Iain Sandoe  <iain@sandoe.co.uk>\n \t    Bin Cheng  <bin.cheng@linux.alibaba.com>\n "}, {"sha": "4520c9950287a08e4cd9401f4950cfd92721b8c1", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/276265195a4e7362b34ac512f3bc0ad5a974dcff/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/276265195a4e7362b34ac512f3bc0ad5a974dcff/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=276265195a4e7362b34ac512f3bc0ad5a974dcff", "patch": "@@ -18751,6 +18751,36 @@ tsubst_lambda_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n        cap = TREE_CHAIN (cap))\n     {\n       tree ofield = TREE_PURPOSE (cap);\n+      tree init = TREE_VALUE (cap);\n+      if (PACK_EXPANSION_P (init))\n+\tinit = tsubst_pack_expansion (init, args, complain, in_decl);\n+      else\n+\tinit = tsubst_copy_and_build (init, args, complain, in_decl,\n+\t\t\t\t      /*fn*/false, /*constexpr*/false);\n+\n+      if (init == error_mark_node)\n+\treturn error_mark_node;\n+\n+      if (init && TREE_CODE (init) == TREE_LIST)\n+\tinit = build_x_compound_expr_from_list (init, ELK_INIT, complain);\n+\n+      if (!processing_template_decl\n+\t  && init && TREE_CODE (init) != TREE_VEC\n+\t  && variably_modified_type_p (TREE_TYPE (init), NULL_TREE))\n+\t{\n+\t  /* For a VLA, simply tsubsting the field type won't work, we need to\n+\t     go through add_capture again.  XXX do we want to do this for all\n+\t     captures?  */\n+\t  tree name = (get_identifier\n+\t\t       (IDENTIFIER_POINTER (DECL_NAME (ofield)) + 2));\n+\t  tree ftype = TREE_TYPE (ofield);\n+\t  bool by_ref = (TYPE_REF_P (ftype)\n+\t\t\t || (TREE_CODE (ftype) == DECLTYPE_TYPE\n+\t\t\t     && DECLTYPE_FOR_REF_CAPTURE (ftype)));\n+\t  add_capture (r, name, init, by_ref, !DECL_NORMAL_CAPTURE_P (ofield));\n+\t  continue;\n+\t}\n+\n       if (PACK_EXPANSION_P (ofield))\n \tofield = PACK_EXPANSION_PATTERN (ofield);\n       tree field = tsubst_decl (ofield, args, complain);\n@@ -18765,13 +18795,6 @@ tsubst_lambda_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n       if (field == error_mark_node)\n \treturn error_mark_node;\n \n-      tree init = TREE_VALUE (cap);\n-      if (PACK_EXPANSION_P (init))\n-\tinit = tsubst_pack_expansion (init, args, complain, in_decl);\n-      else\n-\tinit = tsubst_copy_and_build (init, args, complain, in_decl,\n-\t\t\t\t      /*fn*/false, /*constexpr*/false);\n-\n       if (TREE_CODE (field) == TREE_VEC)\n \t{\n \t  int len = TREE_VEC_LENGTH (field);"}, {"sha": "c9025c79aa7784c821b415906b209274ae080cba", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-vla1.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/276265195a4e7362b34ac512f3bc0ad5a974dcff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-vla1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/276265195a4e7362b34ac512f3bc0ad5a974dcff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-vla1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-vla1.C?ref=276265195a4e7362b34ac512f3bc0ad5a974dcff", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/90732\n+// { dg-do compile { target c++14 } }\n+// { dg-additional-options \"-Wno-vla\" }\n+\n+/*const*/ int SIZE = 100;\n+\n+template<typename T>\n+int foo(T t) {\n+  char buf[SIZE] = { 24 };\n+  return [&buf](auto x){ return buf[x]; }(t);\n+}\n+\n+int main() {\n+  if (foo(0) != 24)\n+    __builtin_abort();\n+}"}]}