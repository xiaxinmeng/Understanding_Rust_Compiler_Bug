{"sha": "42183d034d47e05814c971b2911c847e2a700941", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDIxODNkMDM0ZDQ3ZTA1ODE0Yzk3MWIyOTExYzg0N2UyYTcwMDk0MQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-08-04T18:02:56Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-08-04T18:02:56Z"}, "message": "Define std::is_callable and std::is_nothrow_callable\n\n\t* doc/xml/manual/status_cxx2017.xml: Update status table.\n\t* include/std/functional (__inv_unwrap): Move to <type_traits>.\n\t(__invoke_impl): Remove exception specifications.\n\t(__invoke, invoke): Add exception specifications using\n\t__is_nothrow_callable.\n\t* include/std/type_traits (__inv_unwrap): Move from <functional>.\n\t(__is_callable_impl, __call_is_nt, __call_is_nothrow): New helpers.\n\t(__is_callable, __is_nothrow_callable): New traits.\n\t(is_callable, is_callable_v): New C++17 traits.\n\t(is_nothrow_callable, is_nothrow_callable_v): Likewise.\n\t* testsuite/20_util/is_callable/requirements/\n\texplicit_instantiation.cc: New test.\n\t* testsuite/20_util/is_callable/requirements/\n\texplicit_instantiation_ext.cc: New test.\n\t* testsuite/20_util/is_callable/requirements/typedefs.cc: New test.\n\t* testsuite/20_util/is_callable/requirements/typedefs_ext.cc: New\n\ttest.\n\t* testsuite/20_util/is_callable/value.cc: New test.\n\t* testsuite/20_util/is_callable/value_ext.cc: New test.\n\t* testsuite/20_util/is_nothrow_callable/requirements/\n\texplicit_instantiation.cc: New test.\n\t* testsuite/20_util/is_nothrow_callable/requirements/\n\texplicit_instantiation_ext.cc: New test.\n\t* testsuite/20_util/is_nothrow_callable/requirements/typedefs.cc:\n\tNew test.\n\t* testsuite/20_util/is_nothrow_callable/requirements/typedefs_ext.cc:\n\tNew test.\n\t* testsuite/20_util/is_nothrow_callable/value.cc: New test.\n\t* testsuite/20_util/is_nothrow_callable/value_ext.cc: New test.\n\nFrom-SVN: r239145", "tree": {"sha": "e0b984fc14f915b097754780a9a4583202a2dd9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0b984fc14f915b097754780a9a4583202a2dd9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42183d034d47e05814c971b2911c847e2a700941", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42183d034d47e05814c971b2911c847e2a700941", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42183d034d47e05814c971b2911c847e2a700941", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42183d034d47e05814c971b2911c847e2a700941/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e91f59b91956c3fac6e9d9b7cba0a52a35ea2b6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e91f59b91956c3fac6e9d9b7cba0a52a35ea2b6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e91f59b91956c3fac6e9d9b7cba0a52a35ea2b6b"}], "stats": {"total": 742, "additions": 718, "deletions": 24}, "files": [{"sha": "5c4bb5c26053962486fbd2581e97d141a36560b4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42183d034d47e05814c971b2911c847e2a700941/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42183d034d47e05814c971b2911c847e2a700941/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=42183d034d47e05814c971b2911c847e2a700941", "patch": "@@ -1,5 +1,35 @@\n 2016-08-04  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* doc/xml/manual/status_cxx2017.xml: Update status table.\n+\t* include/std/functional (__inv_unwrap): Move to <type_traits>.\n+\t(__invoke_impl): Remove exception specifications.\n+\t(__invoke, invoke): Add exception specifications using\n+\t__is_nothrow_callable.\n+\t* include/std/type_traits (__inv_unwrap): Move from <functional>.\n+\t(__is_callable_impl, __call_is_nt, __call_is_nothrow): New helpers.\n+\t(__is_callable, __is_nothrow_callable): New traits.\n+\t(is_callable, is_callable_v): New C++17 traits.\n+\t(is_nothrow_callable, is_nothrow_callable_v): Likewise.\n+\t* testsuite/20_util/is_callable/requirements/\n+\texplicit_instantiation.cc: New test.\n+\t* testsuite/20_util/is_callable/requirements/\n+\texplicit_instantiation_ext.cc: New test.\n+\t* testsuite/20_util/is_callable/requirements/typedefs.cc: New test.\n+\t* testsuite/20_util/is_callable/requirements/typedefs_ext.cc: New\n+\ttest.\n+\t* testsuite/20_util/is_callable/value.cc: New test.\n+\t* testsuite/20_util/is_callable/value_ext.cc: New test.\n+\t* testsuite/20_util/is_nothrow_callable/requirements/\n+\texplicit_instantiation.cc: New test.\n+\t* testsuite/20_util/is_nothrow_callable/requirements/\n+\texplicit_instantiation_ext.cc: New test.\n+\t* testsuite/20_util/is_nothrow_callable/requirements/typedefs.cc:\n+\tNew test.\n+\t* testsuite/20_util/is_nothrow_callable/requirements/typedefs_ext.cc:\n+\tNew test.\n+\t* testsuite/20_util/is_nothrow_callable/value.cc: New test.\n+\t* testsuite/20_util/is_nothrow_callable/value_ext.cc: New test.\n+\n \t* doc/xml/manual/status_cxx2017.xml: Update C++17 status table.\n \t* doc/html/manual/status.html: Regenerate.\n "}, {"sha": "8391758333cc37d45a6d6e6801c9a031638acae1", "filename": "libstdc++-v3/doc/xml/manual/status_cxx2017.xml", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42183d034d47e05814c971b2911c847e2a700941/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2017.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42183d034d47e05814c971b2911c847e2a700941/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2017.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2017.xml?ref=42183d034d47e05814c971b2911c847e2a700941", "patch": "@@ -402,14 +402,13 @@ Feature-testing recommendations for C++</link>.\n     </row>\n \n     <row>\n-      <?dbhtml bgcolor=\"#C8B0B0\" ?>\n       <entry> <code>is_callable</code>, the missing INVOKE related trait</entry>\n       <entry>\n \t<link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0077r2.html\">\n \tP0077R2\n \t</link>\n       </entry>\n-      <entry align=\"center\"> No </entry>\n+      <entry align=\"center\"> 7 </entry>\n       <entry><code> __cpp_lib_is_callable >= 201603 </code></entry>\n     </row>\n "}, {"sha": "843dc83e761b46369b7a1e77e4d3b52399e3507e", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42183d034d47e05814c971b2911c847e2a700941/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42183d034d47e05814c971b2911c847e2a700941/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=42183d034d47e05814c971b2911c847e2a700941", "patch": "@@ -184,18 +184,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : _Weak_result_type_impl<typename remove_cv<_Functor>::type>\n     { };\n \n-  template<typename _Tp, typename _Up = typename decay<_Tp>::type>\n-    struct __inv_unwrap\n-    {\n-      using type = _Tp;\n-    };\n-\n-  template<typename _Tp, typename _Up>\n-    struct __inv_unwrap<_Tp, reference_wrapper<_Up>>\n-    {\n-      using type = _Up&;\n-    };\n-\n   // Used by __invoke_impl instead of std::forward<_Tp> so that a\n   // reference_wrapper is converted to an lvalue-reference.\n   template<typename _Tp, typename _Up = typename __inv_unwrap<_Tp>::type>\n@@ -206,43 +194,37 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Res, typename _Fn, typename... _Args>\n     inline _Res\n     __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)\n-    noexcept(noexcept(std::forward<_Fn>(__f)(std::forward<_Args>(__args)...)))\n     { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }\n \n   template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>\n     inline _Res\n     __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,\n \t\t  _Args&&... __args)\n-    noexcept(noexcept(\n-\t  (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...)))\n     { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }\n \n   template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>\n     inline _Res\n     __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,\n \t\t  _Args&&... __args)\n-    noexcept(noexcept(\n-\t  ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...)))\n     {\n       return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);\n     }\n \n   template<typename _Res, typename _MemPtr, typename _Tp>\n     inline _Res\n     __invoke_impl(__invoke_memobj_ref, _MemPtr&& __f, _Tp&& __t)\n-    noexcept(noexcept(__invfwd<_Tp>(__t).*__f))\n     { return __invfwd<_Tp>(__t).*__f; }\n \n   template<typename _Res, typename _MemPtr, typename _Tp>\n     inline _Res\n     __invoke_impl(__invoke_memobj_deref, _MemPtr&& __f, _Tp&& __t)\n-    noexcept(noexcept((*std::forward<_Tp>(__t)).*__f))\n     { return (*std::forward<_Tp>(__t)).*__f; }\n \n   /// Invoke a callable object.\n   template<typename _Callable, typename... _Args>\n     inline typename result_of<_Callable&&(_Args&&...)>::type\n     __invoke(_Callable&& __fn, _Args&&... __args)\n+    noexcept(__is_nothrow_callable<_Callable(_Args...)>::value)\n     {\n       using __result_of = result_of<_Callable&&(_Args&&...)>;\n       using __type = typename __result_of::type;\n@@ -258,6 +240,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Callable, typename... _Args>\n     inline result_of_t<_Callable&&(_Args&&...)>\n     invoke(_Callable&& __fn, _Args&&... __args)\n+    noexcept(is_nothrow_callable_v<_Callable(_Args...)>)\n     {\n       return std::__invoke(std::forward<_Callable>(__fn),\n \t\t\t   std::forward<_Args>(__args)...);"}, {"sha": "baa4d1ffe9648b5cbf32880b2c5037da49636073", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 117, "deletions": 3, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42183d034d47e05814c971b2911c847e2a700941/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42183d034d47e05814c971b2911c847e2a700941/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=42183d034d47e05814c971b2911c847e2a700941", "patch": "@@ -176,11 +176,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename... _Bn>\n     constexpr bool conjunction_v\n     = conjunction<_Bn...>::value;\n-  \n+\n   template<typename... _Bn>\n     constexpr bool disjunction_v\n     = disjunction<_Bn...>::value;\n-  \n+\n   template<typename _Pp>\n     constexpr bool negation_v\n     = negation<_Pp>::value;\n@@ -2762,6 +2762,121 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       is_nothrow_swappable_with<_Tp, _Up>::value;\n #endif // __cplusplus >= 201402L\n \n+#endif// c++1z or gnu++11\n+\n+  // __is_callable (std::is_callable for C++11)\n+\n+  template<typename _Result, typename _Ret, typename = __void_t<>>\n+    struct __is_callable_impl : false_type { };\n+\n+  template<typename _Result, typename _Ret>\n+    struct __is_callable_impl<_Result, _Ret, __void_t<typename _Result::type>>\n+    : __or_<is_void<_Ret>, is_convertible<typename _Result::type, _Ret>>::type\n+    { };\n+\n+  template<typename, typename _Ret = void>\n+    struct __is_callable; // not defined\n+\n+  template<typename _Fn, typename... _ArgTypes, typename _Ret>\n+    struct __is_callable<_Fn(_ArgTypes...), _Ret>\n+    : __is_callable_impl<result_of<_Fn(_ArgTypes...)>, _Ret>::type\n+    { };\n+\n+  // Used by __invoke and __is_nothrow_callable to unwrap a reference_wrapper.\n+  template<typename _Tp, typename _Up = typename decay<_Tp>::type>\n+    struct __inv_unwrap\n+    {\n+      using type = _Tp;\n+    };\n+\n+  template<typename _Tp, typename _Up>\n+    struct __inv_unwrap<_Tp, reference_wrapper<_Up>>\n+    {\n+      using type = _Up&;\n+    };\n+\n+  template<typename _Fn, typename _Tp, typename... _Args>\n+    constexpr bool __call_is_nt(__invoke_memfun_ref)\n+    {\n+      using _Up = typename __inv_unwrap<_Tp>::type;\n+      return noexcept((std::declval<_Up>().*std::declval<_Fn>())(\n+\t    std::declval<_Args>()...));\n+    }\n+\n+  template<typename _Fn, typename _Tp, typename... _Args>\n+    constexpr bool __call_is_nt(__invoke_memfun_deref)\n+    {\n+      return noexcept(((*std::declval<_Tp>()).*std::declval<_Fn>())(\n+\t    std::declval<_Args>()...));\n+    }\n+\n+  template<typename _Fn, typename _Tp>\n+    constexpr bool __call_is_nt(__invoke_memobj_ref)\n+    {\n+      using _Up = typename __inv_unwrap<_Tp>::type;\n+      return noexcept(std::declval<_Up>().*std::declval<_Fn>());\n+    }\n+\n+  template<typename _Fn, typename _Tp>\n+    constexpr bool __call_is_nt(__invoke_memobj_deref)\n+    {\n+      return noexcept((*std::declval<_Tp>()).*std::declval<_Fn>());\n+    }\n+\n+  template<typename _Fn, typename... _Args>\n+    constexpr bool __call_is_nt(__invoke_other)\n+    {\n+      return noexcept(std::declval<_Fn>()(std::declval<_Args>()...));\n+    }\n+\n+  template<typename _ResultOf, typename _Fn, typename... _Args>\n+    struct __call_is_nothrow\n+    : __bool_constant<\n+      std::__call_is_nt<_Fn, _Args...>(typename _ResultOf::__invoke_type{})>\n+    { };\n+\n+  // __is_nothrow_callable (std::is_nothrow_callable for C++11)\n+\n+  template<typename, typename _Ret = void>\n+    struct __is_nothrow_callable; // not defined\n+\n+  template<typename _Fn, typename... _Args, typename _Ret>\n+    struct __is_nothrow_callable<_Fn(_Args...), _Ret>\n+    : __and_<__is_callable<_Fn(_Args...), _Ret>,\n+             __call_is_nothrow<result_of<_Fn(_Args...)>, _Fn, _Args...>>::type\n+    { };\n+\n+#if __cplusplus > 201402L\n+# define __cpp_lib_is_callable 201603\n+\n+  /// std::is_callable\n+  template<typename, typename _Ret = void>\n+    struct is_callable; // not defined\n+\n+  template<typename _Fn, typename... _ArgTypes, typename _Ret>\n+    struct is_callable<_Fn(_ArgTypes...), _Ret>\n+    : __is_callable<_Fn(_ArgTypes...), _Ret>::type\n+    { };\n+\n+  /// std::is_nothrow_callable\n+  template<typename, typename _Ret = void>\n+    struct is_nothrow_callable; // not defined\n+\n+  template<typename _Fn, typename... _ArgTypes, typename _Ret>\n+    struct is_nothrow_callable<_Fn(_ArgTypes...), _Ret>\n+    : __is_nothrow_callable<_Fn(_ArgTypes...), _Ret>::type\n+    { };\n+\n+  /// std::is_callable_v\n+  template<typename T, typename _Ret = void>\n+    constexpr bool is_callable_v = is_callable<T, _Ret>::value;\n+\n+  /// std::is_nothrow_callable_v\n+  template<typename T, typename _Ret = void>\n+    constexpr bool is_nothrow_callable_v = is_nothrow_callable<T, _Ret>::value;\n+#endif // C++17\n+\n+\n #if __cplusplus > 201402L\n # define __cpp_lib_type_trait_variable_templates 201510L\n template <typename _Tp>\n@@ -2915,7 +3030,6 @@ template <typename _Base, typename _Derived>\n template <typename _From, typename _To>\n   constexpr bool is_convertible_v = is_convertible<_From, _To>::value;\n #endif // C++17\n-#endif\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std"}, {"sha": "0ce5bfe72a868c882dbe411458fc448a44ec39cc", "filename": "libstdc++-v3/testsuite/20_util/is_callable/requirements/explicit_instantiation.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42183d034d47e05814c971b2911c847e2a700941/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_callable%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42183d034d47e05814c971b2911c847e2a700941/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_callable%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_callable%2Frequirements%2Fexplicit_instantiation.cc?ref=42183d034d47e05814c971b2911c847e2a700941", "patch": "@@ -0,0 +1,29 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  struct test_type { };\n+  template struct is_callable<test_type(), int>;\n+}"}, {"sha": "a3d3f496de8858d16a116f920e68c72f9ca36fe8", "filename": "libstdc++-v3/testsuite/20_util/is_callable/requirements/explicit_instantiation_ext.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42183d034d47e05814c971b2911c847e2a700941/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_callable%2Frequirements%2Fexplicit_instantiation_ext.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42183d034d47e05814c971b2911c847e2a700941/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_callable%2Frequirements%2Fexplicit_instantiation_ext.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_callable%2Frequirements%2Fexplicit_instantiation_ext.cc?ref=42183d034d47e05814c971b2911c847e2a700941", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do compile { target c++11 } }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  struct test_type { };\n+  template struct __is_callable<test_type(), int>;\n+}"}, {"sha": "9f21dfb90ae65225683d251aec3535472078d114", "filename": "libstdc++-v3/testsuite/20_util/is_callable/requirements/typedefs.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42183d034d47e05814c971b2911c847e2a700941/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_callable%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42183d034d47e05814c971b2911c847e2a700941/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_callable%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_callable%2Frequirements%2Ftypedefs.cc?ref=42183d034d47e05814c971b2911c847e2a700941", "patch": "@@ -0,0 +1,30 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::is_callable<int(), void>       test_type;\n+  static_assert( std::is_base_of_v<std::false_type, test_type> );\n+}"}, {"sha": "e582be0674ac26750192a17505b10df6c0a43189", "filename": "libstdc++-v3/testsuite/20_util/is_callable/requirements/typedefs_ext.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42183d034d47e05814c971b2911c847e2a700941/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_callable%2Frequirements%2Ftypedefs_ext.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42183d034d47e05814c971b2911c847e2a700941/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_callable%2Frequirements%2Ftypedefs_ext.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_callable%2Frequirements%2Ftypedefs_ext.cc?ref=42183d034d47e05814c971b2911c847e2a700941", "patch": "@@ -0,0 +1,29 @@\n+// { dg-do compile { target c++11 } }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::__is_callable<int(), void>     test_type;\n+  static_assert( std::is_base_of<std::false_type, test_type>::value, \"\" );\n+}"}, {"sha": "aafd55f06bea23a2c58e44d47a989fb662423af2", "filename": "libstdc++-v3/testsuite/20_util/is_callable/value.cc", "status": "added", "additions": 191, "deletions": 0, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42183d034d47e05814c971b2911c847e2a700941/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_callable%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42183d034d47e05814c971b2911c847e2a700941/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_callable%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_callable%2Fvalue.cc?ref=42183d034d47e05814c971b2911c847e2a700941", "patch": "@@ -0,0 +1,191 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile }\n+\n+#include <type_traits>\n+\n+#ifndef IS_CALLABLE_DEFINED\n+template<typename T, typename R = void>\n+  constexpr bool is_callable()\n+  {\n+    static_assert(std::is_callable<T, R>::value == std::is_callable_v<T, R>);\n+    return std::is_callable_v<T, R>;\n+  }\n+#endif\n+\n+void test01()\n+{\n+  using func_type_v0 = void(*)();\n+\n+  static_assert(   is_callable< func_type_v0() >(),\t    \"\");\n+  static_assert(   is_callable< func_type_v0(), void  >(),  \"\");\n+  static_assert( ! is_callable< func_type_v0(), void* >(),  \"\");\n+  static_assert( ! is_callable< func_type_v0(), int   >(),  \"\");\n+\n+  static_assert( ! is_callable< func_type_v0(int) >(),\t      \"\");\n+  static_assert( ! is_callable< func_type_v0(int), void  >(), \"\");\n+  static_assert( ! is_callable< func_type_v0(int), void* >(), \"\");\n+  static_assert( ! is_callable< func_type_v0(int), int   >(), \"\");\n+\n+  using func_type_i0 = int(*)();\n+\n+  static_assert(   is_callable< func_type_i0() >(),\t  \"\");\n+  static_assert(   is_callable< func_type_i0(), void >(), \"\");\n+  static_assert(   is_callable< func_type_i0(), int  >(), \"\");\n+  static_assert( ! is_callable< func_type_i0(), int& >(), \"\");\n+  static_assert(   is_callable< func_type_i0(), long >(), \"\");\n+\n+  static_assert( ! is_callable< func_type_i0(int) >(),\t     \"\");\n+  static_assert( ! is_callable< func_type_i0(int), void >(), \"\");\n+  static_assert( ! is_callable< func_type_i0(int), int  >(), \"\");\n+  static_assert( ! is_callable< func_type_i0(int), int& >(), \"\");\n+  static_assert( ! is_callable< func_type_i0(int), long >(), \"\");\n+\n+  using func_type_l0 = int&(*)();\n+\n+  static_assert(   is_callable< func_type_l0() >(),\t    \"\");\n+  static_assert(   is_callable< func_type_l0(), void >(),   \"\");\n+  static_assert(   is_callable< func_type_l0(), int >(),    \"\");\n+  static_assert(   is_callable< func_type_l0(), int& >(),   \"\");\n+  static_assert( ! is_callable< func_type_l0(), int&& >(),  \"\");\n+  static_assert(   is_callable< func_type_l0(), long >(),   \"\");\n+  static_assert( ! is_callable< func_type_l0(), long& >(),  \"\");\n+\n+  static_assert( ! is_callable< func_type_l0(int) >(),\t      \"\");\n+  static_assert( ! is_callable< func_type_l0(int), void >(),  \"\");\n+  static_assert( ! is_callable< func_type_l0(int), int  >(),  \"\");\n+  static_assert( ! is_callable< func_type_l0(int), int& >(),  \"\");\n+  static_assert( ! is_callable< func_type_l0(int), long >(),  \"\");\n+\n+  using func_type_ii = int(*)(int);\n+\n+  static_assert( ! is_callable< func_type_ii() >(),\t  \"\");\n+  static_assert( ! is_callable< func_type_ii(), int  >(), \"\");\n+  static_assert( ! is_callable< func_type_ii(), int& >(), \"\");\n+  static_assert( ! is_callable< func_type_ii(), long >(), \"\");\n+\n+  static_assert(   is_callable< func_type_ii(int) >(),\t      \"\");\n+  static_assert(   is_callable< func_type_ii(int), int  >(),  \"\");\n+  static_assert( ! is_callable< func_type_ii(int), int& >(),  \"\");\n+  static_assert(   is_callable< func_type_ii(int), long >(),  \"\");\n+\n+  using func_type_il = int(*)(int&);\n+\n+  static_assert( ! is_callable< func_type_il() >(),\t  \"\");\n+\n+  static_assert( ! is_callable< func_type_il(int) >(),\t      \"\");\n+  static_assert( ! is_callable< func_type_il(int), int  >(),  \"\");\n+  static_assert( ! is_callable< func_type_il(int), int& >(),  \"\");\n+  static_assert( ! is_callable< func_type_il(int), long >(),  \"\");\n+\n+  static_assert(   is_callable< func_type_il(int&) >(),\t      \"\");\n+  static_assert(   is_callable< func_type_il(int&), int  >(), \"\");\n+  static_assert( ! is_callable< func_type_il(int&), int& >(), \"\");\n+  static_assert(   is_callable< func_type_il(int&), long >(), \"\");\n+\n+  using func_type_ir = int(*)(int&&);\n+\n+  static_assert( ! is_callable< func_type_ir() >(),\t  \"\");\n+\n+  static_assert(   is_callable< func_type_ir(int) >(),\t      \"\");\n+  static_assert(   is_callable< func_type_ir(int), int  >(),  \"\");\n+  static_assert( ! is_callable< func_type_ir(int), int& >(),  \"\");\n+  static_assert(   is_callable< func_type_ir(int), long >(),  \"\");\n+\n+  static_assert( ! is_callable< func_type_ir(int&) >(),\t      \"\");\n+  static_assert( ! is_callable< func_type_ir(int&), int  >(), \"\");\n+  static_assert( ! is_callable< func_type_ir(int&), int& >(), \"\");\n+  static_assert( ! is_callable< func_type_ir(int&), long >(), \"\");\n+\n+  struct X { };\n+\n+  using mem_type_i = int X::*;\n+\n+  static_assert( ! is_callable< mem_type_i() >(),\t  \"\");\n+\n+  static_assert( ! is_callable< mem_type_i(int) >(),\t    \"\");\n+  static_assert( ! is_callable< mem_type_i(int), int  >(),  \"\");\n+  static_assert( ! is_callable< mem_type_i(int), int& >(),  \"\");\n+  static_assert( ! is_callable< mem_type_i(int), long >(),  \"\");\n+\n+  static_assert( ! is_callable< mem_type_i(int&) >(),\t    \"\");\n+  static_assert( ! is_callable< mem_type_i(int&), int  >(), \"\");\n+  static_assert( ! is_callable< mem_type_i(int&), int& >(), \"\");\n+  static_assert( ! is_callable< mem_type_i(int&), long >(), \"\");\n+\n+  static_assert(   is_callable< mem_type_i(X&) >(),\t  \"\");\n+  static_assert(   is_callable< mem_type_i(X&), int  >(), \"\");\n+  static_assert(   is_callable< mem_type_i(X&), int& >(), \"\");\n+  static_assert(   is_callable< mem_type_i(X&), long >(), \"\");\n+\n+  using memfun_type_i = int (X::*)();\n+\n+  static_assert( ! is_callable< memfun_type_i() >(),\t \"\");\n+\n+  static_assert( ! is_callable< memfun_type_i(int) >(),\t \"\");\n+\n+  static_assert( ! is_callable< memfun_type_i(int&) >(), \"\");\n+\n+  static_assert(   is_callable< memfun_type_i(X&) >(),\t      \"\");\n+  static_assert(   is_callable< memfun_type_i(X&), int  >(),  \"\");\n+  static_assert( ! is_callable< memfun_type_i(X&), int& >(),  \"\");\n+  static_assert(   is_callable< memfun_type_i(X&), long >(),  \"\");\n+  static_assert(   is_callable< memfun_type_i(X*) >(),\t      \"\");\n+\n+  static_assert( ! is_callable< memfun_type_i(const X&) >(),\t      \"\");\n+  static_assert( ! is_callable< memfun_type_i(const X&), int  >(),  \"\");\n+  static_assert( ! is_callable< memfun_type_i(X&, int) >(), \"\");\n+\n+  using memfun_type_iic = int& (X::*)(int&) const;\n+\n+  static_assert( ! is_callable< memfun_type_iic() >(),\t\t      \"\");\n+  static_assert( ! is_callable< memfun_type_iic(int)  >(),\t      \"\");\n+  static_assert( ! is_callable< memfun_type_iic(int&) >(),\t      \"\");\n+  static_assert( ! is_callable< memfun_type_iic(X&, int) >(),\t      \"\");\n+  static_assert( ! is_callable< memfun_type_iic(const X&, int) >(),  \"\");\n+  static_assert( ! is_callable< memfun_type_iic(const X&, int&, int)  >(), \"\");\n+\n+  static_assert(   is_callable< memfun_type_iic(const X&, int&)  >(),\t   \"\");\n+  static_assert(   is_callable< memfun_type_iic(const X&, int&), int  >(), \"\");\n+  static_assert(   is_callable< memfun_type_iic(const X&, int&), int& >(), \"\");\n+  static_assert(   is_callable< memfun_type_iic(const X&, int&), long >(), \"\");\n+  static_assert( ! is_callable< memfun_type_iic(const X&, int&), long& >(),\"\");\n+  static_assert(   is_callable< memfun_type_iic(const X*, int&)  >(),\t   \"\");\n+\n+  struct F {\n+    int& operator()();\n+    long& operator()() const;\n+    short& operator()(int) &&;\n+    char& operator()(int) const&;\n+  private:\n+    void operator()(int, int);\n+  };\n+  using CF = const F;\n+\n+  static_assert(   is_callable< F(),   int&   >(), \"\");\n+  static_assert(   is_callable< F&(),  int&   >(), \"\");\n+  static_assert(   is_callable< CF(),  long& >(), \"\");\n+  static_assert(   is_callable< CF&(), long& >(), \"\");\n+  static_assert(   is_callable< F(int),\t  short& >(), \"\");\n+  static_assert(   is_callable< F&(int),  char& >(), \"\");\n+  static_assert(   is_callable< CF(int),  char& >(), \"\");\n+  static_assert(   is_callable< CF&(int), char& >(), \"\");\n+\n+  static_assert( ! is_callable< F(int, int) >(), \"\");\n+}"}, {"sha": "3884d6c517e54a4cf14d09c32f6013107e73e188", "filename": "libstdc++-v3/testsuite/20_util/is_callable/value_ext.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42183d034d47e05814c971b2911c847e2a700941/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_callable%2Fvalue_ext.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42183d034d47e05814c971b2911c847e2a700941/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_callable%2Fvalue_ext.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_callable%2Fvalue_ext.cc?ref=42183d034d47e05814c971b2911c847e2a700941", "patch": "@@ -0,0 +1,26 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <type_traits>\n+\n+template<typename T, typename R = void>\n+  constexpr bool is_callable() { return std::__is_callable<T, R>::value; }\n+\n+#define IS_CALLABLE_DEFINED\n+#include \"value.cc\""}, {"sha": "dbcdd9fd34c009ee6de207f8330da2d93153163d", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_callable/requirements/explicit_instantiation.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42183d034d47e05814c971b2911c847e2a700941/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_callable%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42183d034d47e05814c971b2911c847e2a700941/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_callable%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_callable%2Frequirements%2Fexplicit_instantiation.cc?ref=42183d034d47e05814c971b2911c847e2a700941", "patch": "@@ -0,0 +1,29 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  struct test_type { };\n+  template struct is_nothrow_callable<test_type(), int>;\n+}"}, {"sha": "9e4f74f5d2000b1c6f5e441a90f625c341c3a0cc", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_callable/requirements/explicit_instantiation_ext.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42183d034d47e05814c971b2911c847e2a700941/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_callable%2Frequirements%2Fexplicit_instantiation_ext.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42183d034d47e05814c971b2911c847e2a700941/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_callable%2Frequirements%2Fexplicit_instantiation_ext.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_callable%2Frequirements%2Fexplicit_instantiation_ext.cc?ref=42183d034d47e05814c971b2911c847e2a700941", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do compile { target c++11 } }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  struct test_type { };\n+  template struct __is_nothrow_callable<test_type(), int>;\n+}"}, {"sha": "395eb156e12d0f34aa529f436a57c7188ae16b51", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_callable/requirements/typedefs.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42183d034d47e05814c971b2911c847e2a700941/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_callable%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42183d034d47e05814c971b2911c847e2a700941/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_callable%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_callable%2Frequirements%2Ftypedefs.cc?ref=42183d034d47e05814c971b2911c847e2a700941", "patch": "@@ -0,0 +1,30 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::is_nothrow_callable<int(), void>       test_type;\n+  static_assert( std::is_base_of_v<std::false_type, test_type> );\n+}"}, {"sha": "23df15ebd5820e0c457316001cc9a01438f542c8", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_callable/requirements/typedefs_ext.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42183d034d47e05814c971b2911c847e2a700941/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_callable%2Frequirements%2Ftypedefs_ext.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42183d034d47e05814c971b2911c847e2a700941/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_callable%2Frequirements%2Ftypedefs_ext.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_callable%2Frequirements%2Ftypedefs_ext.cc?ref=42183d034d47e05814c971b2911c847e2a700941", "patch": "@@ -0,0 +1,29 @@\n+// { dg-do compile { target c++11 } }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::__is_nothrow_callable<int(), void>     test_type;\n+  static_assert( std::is_base_of<std::false_type, test_type>::value, \"\" );\n+}"}, {"sha": "b24d369d39d527ac1068575ffbfcc54362acfb2b", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_callable/value.cc", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42183d034d47e05814c971b2911c847e2a700941/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_callable%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42183d034d47e05814c971b2911c847e2a700941/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_callable%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_callable%2Fvalue.cc?ref=42183d034d47e05814c971b2911c847e2a700941", "patch": "@@ -0,0 +1,92 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile }\n+\n+#include <type_traits>\n+\n+#ifndef IS_NT_CALLABLE_DEFINED\n+template<typename T, typename R = void>\n+  constexpr bool is_nt_callable()\n+  {\n+    static_assert(std::is_nothrow_callable<T, R>::value\n+                  == std::is_nothrow_callable_v<T, R>);\n+    return std::is_nothrow_callable_v<T, R>;\n+  }\n+#endif\n+\n+void test01()\n+{\n+  using func_type = void(*)();\n+  static_assert( ! is_nt_callable< func_type() >(),     \"\");\n+\n+#if __cpp_noexcept_function_type\n+  using func_type_nt = void(*)() noexcept;\n+  static_assert(   is_nt_callable< func_type_nt() >(),  \"\");\n+#endif\n+\n+  struct X { };\n+  using mem_type = int X::*;\n+\n+  static_assert( ! is_nt_callable< mem_type() >(),\t\"\");\n+  static_assert( ! is_nt_callable< mem_type(int) >(),   \"\");\n+  static_assert( ! is_nt_callable< mem_type(int&) >(),\t\"\");\n+\n+  static_assert(   is_nt_callable< mem_type(X&) >(),       \"\");\n+  static_assert(   is_nt_callable< mem_type(X&), int  >(), \"\");\n+  static_assert(   is_nt_callable< mem_type(X&), int& >(), \"\");\n+  static_assert(   is_nt_callable< mem_type(X&), long >(), \"\");\n+  static_assert(   is_nt_callable< mem_type(X*), int& >(), \"\");\n+\n+  using memfun_type = int (X::*)();\n+\n+  static_assert( ! is_nt_callable< memfun_type() >(),     \"\");\n+  static_assert( ! is_nt_callable< memfun_type(int) >(),  \"\");\n+  static_assert( ! is_nt_callable< memfun_type(int&) >(), \"\");\n+  static_assert( ! is_nt_callable< memfun_type(X&) >(),   \"\");\n+  static_assert( ! is_nt_callable< memfun_type(X*) >(),   \"\");\n+\n+#if __cpp_noexcept_function_type\n+  using memfun_type_nt = int (X::*)() noexcept;\n+\n+  static_assert( ! is_nt_callable< memfun_type_nt() >(),\t    \"\");\n+  static_assert( ! is_nt_callable< memfun_type_nt(int) >(),  \"\");\n+  static_assert( ! is_nt_callable< memfun_type_nt(int&) >(), \"\");\n+  static_assert(   is_nt_callable< memfun_type_nt(X&) >(),   \"\");\n+  static_assert(   is_nt_callable< memfun_type_nt(X*) >(),   \"\");\n+#endif\n+\n+  struct F {\n+    int& operator()();\n+    long& operator()() const noexcept;\n+    short& operator()(int) &&;\n+    char& operator()(int) const& noexcept;\n+  private:\n+    void operator()(int, int) noexcept;\n+  };\n+  using CF = const F;\n+\n+  static_assert( ! is_nt_callable< F(),   int&   >(), \"\");\n+  static_assert(   is_nt_callable< CF(),  long& >(),  \"\");\n+  static_assert( ! is_nt_callable< F(int),    short& >(), \"\");\n+  static_assert(   is_nt_callable< F&(int),   char& >(),  \"\");\n+  static_assert(   is_nt_callable< CF(int),   char& >(),  \"\");\n+  static_assert(   is_nt_callable< CF&(int),  char& >(),  \"\");\n+\n+  static_assert( ! is_nt_callable< F(int, int) >(), \"\");\n+}"}, {"sha": "8d84db629d1841a6f135da05fa8fe189bb622eb8", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_callable/value_ext.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42183d034d47e05814c971b2911c847e2a700941/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_callable%2Fvalue_ext.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42183d034d47e05814c971b2911c847e2a700941/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_callable%2Fvalue_ext.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_callable%2Fvalue_ext.cc?ref=42183d034d47e05814c971b2911c847e2a700941", "patch": "@@ -0,0 +1,27 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <type_traits>\n+\n+template<typename T, typename R = void>\n+  constexpr bool is_nt_callable()\n+  { return std::__is_nothrow_callable<T, R>::value; }\n+\n+#define IS_NT_CALLABLE_DEFINED\n+#include \"value.cc\""}]}