{"sha": "e06f9964af04d213dcde35ee63ecff12676ece44", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA2Zjk5NjRhZjA0ZDIxM2RjZGUzNWVlNjNlY2ZmMTI2NzZlY2U0NA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-11-29T10:41:12Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-11-29T10:41:12Z"}, "message": "re PR lto/59326 (FAIL: gcc.dg/vect/vect-simd-clone-*.c)\n\n\tPR lto/59326\n\t* omp-low.c (simd_clone_create): Return NULL if for definition\n\t!cgraph_function_with_gimple_body_p (old_node).  Call cgraph_get_body\n\tbefore calling cgraph_function_versioning.\n\t(expand_simd_clones): Look for \"omp declare simd\" attribute first.\n\tDon't check targetm.simd_clone.compute_vecsize_and_simdlen here.\n\tPunt if node->global.inlined_to.\n\t(pass_omp_simd_clone::gate): Also enable if in_lto_p && !flag_wpa.\n\tDisable pass if targetm.simd_clone.compute_vecsize_and_simdlen is NULL.\n\t* lto-streamer-out.c (hash_tree): Handle OMP_CLAUSE.\nlto/\n\t* lto.c (compare_tree_sccs_1): Handle OMP_CLAUSE.\ntestsuite/\n\t* gcc.dg/vect/vect-simd-clone-12.c: New test.\n\t* gcc.dg/vect/vect-simd-clone-12a.c: New test.\n\t* gcc.dg/vect/vect-simd-clone-10a.c: Remove extern keywords.\n\nCo-Authored-By: Richard Biener <rguenther@suse.de>\n\nFrom-SVN: r205514", "tree": {"sha": "f916e85a99fbf5d9a8618b0a2f877572cb37a8ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f916e85a99fbf5d9a8618b0a2f877572cb37a8ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e06f9964af04d213dcde35ee63ecff12676ece44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e06f9964af04d213dcde35ee63ecff12676ece44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e06f9964af04d213dcde35ee63ecff12676ece44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e06f9964af04d213dcde35ee63ecff12676ece44/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c193f58b676e48bd96c62864a2da7843419e22e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c193f58b676e48bd96c62864a2da7843419e22e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c193f58b676e48bd96c62864a2da7843419e22e8"}], "stats": {"total": 149, "additions": 139, "deletions": 10}, "files": [{"sha": "035ab85fef4dfad39efa0c381d9e19ba78c2cf0b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06f9964af04d213dcde35ee63ecff12676ece44/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06f9964af04d213dcde35ee63ecff12676ece44/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e06f9964af04d213dcde35ee63ecff12676ece44", "patch": "@@ -1,3 +1,17 @@\n+2013-11-29  Jakub Jelinek  <jakub@redhat.com>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\tPR lto/59326\n+\t* omp-low.c (simd_clone_create): Return NULL if for definition\n+\t!cgraph_function_with_gimple_body_p (old_node).  Call cgraph_get_body\n+\tbefore calling cgraph_function_versioning.\n+\t(expand_simd_clones): Look for \"omp declare simd\" attribute first.\n+\tDon't check targetm.simd_clone.compute_vecsize_and_simdlen here.\n+\tPunt if node->global.inlined_to.\n+\t(pass_omp_simd_clone::gate): Also enable if in_lto_p && !flag_wpa.\n+\tDisable pass if targetm.simd_clone.compute_vecsize_and_simdlen is NULL.\n+\t* lto-streamer-out.c (hash_tree): Handle OMP_CLAUSE.\n+\n 2013-11-29  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR lto/59326"}, {"sha": "3135f008a22966b1d2ed8fe18e439cc0e9d5f0e2", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06f9964af04d213dcde35ee63ecff12676ece44/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06f9964af04d213dcde35ee63ecff12676ece44/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=e06f9964af04d213dcde35ee63ecff12676ece44", "patch": "@@ -1060,6 +1060,39 @@ hash_tree (struct streamer_tree_cache_d *cache, tree t)\n \t}\n     }\n \n+  if (code == OMP_CLAUSE)\n+    {\n+      int i;\n+\n+      v = iterative_hash_host_wide_int (OMP_CLAUSE_CODE (t), v);\n+      switch (OMP_CLAUSE_CODE (t))\n+\t{\n+\tcase OMP_CLAUSE_DEFAULT:\n+\t  v = iterative_hash_host_wide_int (OMP_CLAUSE_DEFAULT_KIND (t), v);\n+\t  break;\n+\tcase OMP_CLAUSE_SCHEDULE:\n+\t  v = iterative_hash_host_wide_int (OMP_CLAUSE_SCHEDULE_KIND (t), v);\n+\t  break;\n+\tcase OMP_CLAUSE_DEPEND:\n+\t  v = iterative_hash_host_wide_int (OMP_CLAUSE_DEPEND_KIND (t), v);\n+\t  break;\n+\tcase OMP_CLAUSE_MAP:\n+\t  v = iterative_hash_host_wide_int (OMP_CLAUSE_MAP_KIND (t), v);\n+\t  break;\n+\tcase OMP_CLAUSE_PROC_BIND:\n+\t  v = iterative_hash_host_wide_int (OMP_CLAUSE_PROC_BIND_KIND (t), v);\n+\t  break;\n+\tcase OMP_CLAUSE_REDUCTION:\n+\t  v = iterative_hash_host_wide_int (OMP_CLAUSE_REDUCTION_CODE (t), v);\n+\t  break;\n+\tdefault:\n+\t  break;\n+\t}\n+      for (i = 0; i < omp_clause_num_ops[OMP_CLAUSE_CODE (t)]; i++)\n+\tvisit (OMP_CLAUSE_OPERAND (t, i));\n+      visit (OMP_CLAUSE_CHAIN (t));\n+    }\n+\n   return v;\n \n #undef visit"}, {"sha": "6d6ebf6717d4d277ec36a86c5490e1f6450bd749", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06f9964af04d213dcde35ee63ecff12676ece44/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06f9964af04d213dcde35ee63ecff12676ece44/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=e06f9964af04d213dcde35ee63ecff12676ece44", "patch": "@@ -1,3 +1,9 @@\n+2013-11-29  Jakub Jelinek  <jakub@redhat.com>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\tPR lto/59326\n+\t* lto.c (compare_tree_sccs_1): Handle OMP_CLAUSE.\n+\n 2013-11-29  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR lto/59326"}, {"sha": "1f46238d5bfcd5d198d8f8ef4914a398adb7355d", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06f9964af04d213dcde35ee63ecff12676ece44/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06f9964af04d213dcde35ee63ecff12676ece44/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=e06f9964af04d213dcde35ee63ecff12676ece44", "patch": "@@ -1410,6 +1410,36 @@ compare_tree_sccs_1 (tree t1, tree t2, tree **map)\n \t\t   TREE_STRING_LENGTH (t1)) != 0)\n       return false;\n \n+  if (code == OMP_CLAUSE)\n+    {\n+      compare_values (OMP_CLAUSE_CODE);\n+      switch (OMP_CLAUSE_CODE (t1))\n+\t{\n+\tcase OMP_CLAUSE_DEFAULT:\n+\t  compare_values (OMP_CLAUSE_DEFAULT_KIND);\n+\t  break;\n+\tcase OMP_CLAUSE_SCHEDULE:\n+\t  compare_values (OMP_CLAUSE_SCHEDULE_KIND);\n+\t  break;\n+\tcase OMP_CLAUSE_DEPEND:\n+\t  compare_values (OMP_CLAUSE_DEPEND_KIND);\n+\t  break;\n+\tcase OMP_CLAUSE_MAP:\n+\t  compare_values (OMP_CLAUSE_MAP_KIND);\n+\t  break;\n+\tcase OMP_CLAUSE_PROC_BIND:\n+\t  compare_values (OMP_CLAUSE_PROC_BIND_KIND);\n+\t  break;\n+\tcase OMP_CLAUSE_REDUCTION:\n+\t  compare_values (OMP_CLAUSE_REDUCTION_CODE);\n+\t  compare_values (OMP_CLAUSE_REDUCTION_GIMPLE_INIT);\n+\t  compare_values (OMP_CLAUSE_REDUCTION_GIMPLE_MERGE);\n+\t  break;\n+\tdefault:\n+\t  break;\n+\t}\n+    }\n+\n #undef compare_values\n \n \n@@ -1633,6 +1663,16 @@ compare_tree_sccs_1 (tree t1, tree t2, tree **map)\n \t}\n     }\n \n+  if (code == OMP_CLAUSE)\n+    {\n+      int i;\n+\n+      for (i = 0; i < omp_clause_num_ops[OMP_CLAUSE_CODE (t1)]; i++)\n+\tcompare_tree_edges (OMP_CLAUSE_OPERAND (t1, i),\n+\t\t\t    OMP_CLAUSE_OPERAND (t2, i));\n+      compare_tree_edges (OMP_CLAUSE_CHAIN (t1), OMP_CLAUSE_CHAIN (t2));\n+    }\n+\n #undef compare_tree_edges\n \n   return true;"}, {"sha": "c9291574d7ca2750b3287a6a29876075c613ecb4", "filename": "gcc/omp-low.c", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06f9964af04d213dcde35ee63ecff12676ece44/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06f9964af04d213dcde35ee63ecff12676ece44/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=e06f9964af04d213dcde35ee63ecff12676ece44", "patch": "@@ -10912,8 +10912,13 @@ simd_clone_create (struct cgraph_node *old_node)\n {\n   struct cgraph_node *new_node;\n   if (old_node->definition)\n-    new_node = cgraph_function_versioning (old_node, vNULL, NULL, NULL, false,\n-\t\t\t\t\t   NULL, NULL, \"simdclone\");\n+    {\n+      if (!cgraph_function_with_gimple_body_p (old_node))\n+\treturn NULL;\n+      cgraph_get_body (old_node);\n+      new_node = cgraph_function_versioning (old_node, vNULL, NULL, NULL,\n+\t\t\t\t\t     false, NULL, NULL, \"simdclone\");\n+    }\n   else\n     {\n       tree old_decl = old_node->decl;\n@@ -11622,13 +11627,13 @@ simd_clone_adjust (struct cgraph_node *node)\n static void\n expand_simd_clones (struct cgraph_node *node)\n {\n-  if (lookup_attribute (\"noclone\", DECL_ATTRIBUTES (node->decl)))\n-    return;\n-\n   tree attr = lookup_attribute (\"omp declare simd\",\n \t\t\t\tDECL_ATTRIBUTES (node->decl));\n-  if (!attr || targetm.simd_clone.compute_vecsize_and_simdlen == NULL)\n+  if (attr == NULL_TREE\n+      || node->global.inlined_to\n+      || lookup_attribute (\"noclone\", DECL_ATTRIBUTES (node->decl)))\n     return;\n+\n   /* Ignore\n      #pragma omp declare simd\n      extern int foo ();\n@@ -11764,8 +11769,10 @@ class pass_omp_simd_clone : public simple_ipa_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  bool gate () { return flag_openmp || flag_openmp_simd\n-\t\t\t|| flag_enable_cilkplus; }\n+  bool gate () { return ((flag_openmp || flag_openmp_simd\n+\t\t\t  || flag_enable_cilkplus || (in_lto_p && !flag_wpa))\n+\t\t\t && (targetm.simd_clone.compute_vecsize_and_simdlen\n+\t\t\t     != NULL)); }\n   unsigned int execute () { return ipa_omp_simd_clone (); }\n };\n "}, {"sha": "4580ec5fa522e1850cb6ba0320a1d467b1169dc5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06f9964af04d213dcde35ee63ecff12676ece44/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06f9964af04d213dcde35ee63ecff12676ece44/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e06f9964af04d213dcde35ee63ecff12676ece44", "patch": "@@ -1,5 +1,10 @@\n 2013-11-29  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR lto/59326\n+\t* gcc.dg/vect/vect-simd-clone-12.c: New test.\n+\t* gcc.dg/vect/vect-simd-clone-12a.c: New test.\n+\t* gcc.dg/vect/vect-simd-clone-10a.c: Remove extern keywords.\n+\n \tPR c/59280\n \t* c-c++-common/pr59280.c: New test.\n "}, {"sha": "1314039643f62cb9b03ac973f6414eafecde4676", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-10a.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06f9964af04d213dcde35ee63ecff12676ece44/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-10a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06f9964af04d213dcde35ee63ecff12676ece44/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-10a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-10a.c?ref=e06f9964af04d213dcde35ee63ecff12676ece44", "patch": "@@ -3,14 +3,14 @@\n #include \"vect-simd-clone-10.h\"\n \n #pragma omp declare simd notinbranch\n-extern int\n+int\n foo (long int a, int b, int c)\n {\n   return a + b + c;\n }\n \n #pragma omp declare simd notinbranch\n-extern long int\n+long int\n bar (int a, int b, long int c)\n {\n   return a + b + c;"}, {"sha": "5c94153ea808b712e5fbf2d838ee597af66698b5", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-12.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06f9964af04d213dcde35ee63ecff12676ece44/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06f9964af04d213dcde35ee63ecff12676ece44/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-12.c?ref=e06f9964af04d213dcde35ee63ecff12676ece44", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-additional-options \"-fopenmp-simd\" } */\n+/* { dg-additional-options \"-mavx\" { target avx_runtime } } */\n+/* { dg-additional-sources vect-simd-clone-12a.c } */\n+\n+#include \"vect-simd-clone-10.c\"\n+\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "fcd04614e97cd10b6ef002440fbad9b2ce2335e7", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-12a.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06f9964af04d213dcde35ee63ecff12676ece44/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-12a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06f9964af04d213dcde35ee63ecff12676ece44/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-12a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-12a.c?ref=e06f9964af04d213dcde35ee63ecff12676ece44", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+\n+#include \"vect-simd-clone-10.h\"\n+\n+#pragma omp declare simd notinbranch\n+__attribute__((noinline)) int\n+foo (long int a, int b, int c)\n+{\n+  return a + b + c;\n+}\n+\n+#pragma omp declare simd notinbranch\n+__attribute__((noinline)) long int\n+bar (int a, int b, long int c)\n+{\n+  return a + b + c;\n+}"}]}