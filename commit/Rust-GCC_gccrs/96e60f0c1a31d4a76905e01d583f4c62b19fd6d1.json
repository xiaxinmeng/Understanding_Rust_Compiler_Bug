{"sha": "96e60f0c1a31d4a76905e01d583f4c62b19fd6d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZlNjBmMGMxYTMxZDRhNzY5MDVlMDFkNTgzZjRjNjJiMTlmZDZkMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2001-01-23T18:36:06Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2001-01-23T18:36:06Z"}, "message": "integrate.h (struct inline_remap): Add compare_src, compare_mode.\n\n\t* integrate.h (struct inline_remap): Add compare_src, compare_mode.\n\t* integrate.c (expand_inline_function): Initialize them.\n\t(subst_constants): If changing COMPARE so that both its arguments\n\twill be VOIDmode and the comparison mode will be lost, note\n\tcompare_mode.  Use the recorded compare_mode to optimize\n\tIF_THEN_ELSE.\n\nFrom-SVN: r39203", "tree": {"sha": "f1ed9d3a3aa4c282e6afcb7e636e652eec822c8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1ed9d3a3aa4c282e6afcb7e636e652eec822c8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96e60f0c1a31d4a76905e01d583f4c62b19fd6d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96e60f0c1a31d4a76905e01d583f4c62b19fd6d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96e60f0c1a31d4a76905e01d583f4c62b19fd6d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96e60f0c1a31d4a76905e01d583f4c62b19fd6d1/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "909b968ecb78bdc07303dffc5fcd26d9c7a8f722", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/909b968ecb78bdc07303dffc5fcd26d9c7a8f722", "html_url": "https://github.com/Rust-GCC/gccrs/commit/909b968ecb78bdc07303dffc5fcd26d9c7a8f722"}], "stats": {"total": 81, "additions": 77, "deletions": 4}, "files": [{"sha": "d227b85caf64d91423263517d03d1bf7681f214b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e60f0c1a31d4a76905e01d583f4c62b19fd6d1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e60f0c1a31d4a76905e01d583f4c62b19fd6d1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96e60f0c1a31d4a76905e01d583f4c62b19fd6d1", "patch": "@@ -1,3 +1,12 @@\n+2001-01-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* integrate.h (struct inline_remap): Add compare_src, compare_mode.\n+\t* integrate.c (expand_inline_function): Initialize them.\n+\t(subst_constants): If changing COMPARE so that both its arguments\n+\twill be VOIDmode and the comparison mode will be lost, note\n+\tcompare_mode.  Use the recorded compare_mode to optimize\n+\tIF_THEN_ELSE.\n+\n 2001-01-23  Jason Merrill  <jason@redhat.com>\n \n \t* dwarf2out.c (new_die): Use xcalloc."}, {"sha": "bfcd85bb39a1d200bab65803505491c4cde48641", "filename": "gcc/integrate.c", "status": "modified", "additions": 64, "deletions": 4, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e60f0c1a31d4a76905e01d583f4c62b19fd6d1/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e60f0c1a31d4a76905e01d583f4c62b19fd6d1/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=96e60f0c1a31d4a76905e01d583f4c62b19fd6d1", "patch": "@@ -788,6 +788,8 @@ expand_inline_function (fndecl, parms, target, ignore, type,\n   map->max_insnno = inl_max_uid;\n \n   map->integrating = 1;\n+  map->compare_src = NULL_RTX;\n+  map->compare_mode = VOIDmode;\n \n   /* const_equiv_varray maps pseudos in our routine to constants, so\n      it needs to be large enough for all our pseudos.  This is the\n@@ -2440,6 +2442,25 @@ subst_constants (loc, insn, map, memonly)\n \trtx *dest_loc = &SET_DEST (x);\n \trtx dest = *dest_loc;\n \trtx src, tem;\n+\tenum machine_mode compare_mode = VOIDmode;\n+\n+\t/* If SET_SRC is a COMPARE which subst_constants would turn into\n+\t   COMPARE of 2 VOIDmode constants, note the mode in which comparison\n+\t   is to be done.  */\n+\tif (GET_CODE (SET_SRC (x)) == COMPARE)\n+\t  {\n+\t    src = SET_SRC (x);\n+\t    if (GET_MODE_CLASS (GET_MODE (src)) == MODE_CC\n+#ifdef HAVE_cc0\n+\t\t|| dest == cc0_rtx\n+#endif\n+\t\t)\n+\t      {\n+\t\tcompare_mode = GET_MODE (XEXP (src, 0));\n+\t\tif (compare_mode == VOIDmode)\n+\t\t  compare_mode = GET_MODE (XEXP (src, 1));\n+\t      }\n+\t  }\n \n \tsubst_constants (&SET_SRC (x), insn, map, memonly);\n \tsrc = SET_SRC (x);\n@@ -2495,8 +2516,22 @@ subst_constants (loc, insn, map, memonly)\n \t    /* Normally, this copy won't do anything.  But, if SRC is a COMPARE\n \t       it will cause us to save the COMPARE with any constants\n \t       substituted, which is what we want for later.  */\n-\t    map->equiv_sets[map->num_sets].equiv = copy_rtx (src);\n+\t    rtx src_copy = copy_rtx (src);\n+\t    map->equiv_sets[map->num_sets].equiv = src_copy;\n \t    map->equiv_sets[map->num_sets++].dest = dest;\n+\t    if (compare_mode != VOIDmode\n+\t\t&& GET_CODE (src) == COMPARE\n+\t\t&& (GET_MODE_CLASS (GET_MODE (src)) == MODE_CC\n+#ifdef HAVE_cc0\n+\t\t    || dest == cc0_rtx\n+#endif\n+\t\t    )\n+\t\t&& GET_MODE (XEXP (src, 0)) == VOIDmode\n+\t\t&& GET_MODE (XEXP (src, 1)) == VOIDmode)\n+\t      {\n+\t\tmap->compare_src = src_copy;\n+\t\tmap->compare_mode = compare_mode;\n+\t      }\n \t  }\n       }\n       return;\n@@ -2600,9 +2635,34 @@ subst_constants (loc, insn, map, memonly)\n \tif (op0_mode == MAX_MACHINE_MODE)\n \t  abort ();\n \n-\tnew = simplify_ternary_operation (code, GET_MODE (x), op0_mode,\n-\t\t\t\t\t  XEXP (x, 0), XEXP (x, 1),\n-\t\t\t\t\t  XEXP (x, 2));\n+\tif (code == IF_THEN_ELSE)\n+\t  {\n+\t    rtx op0 = XEXP (x, 0);\n+\n+\t    if (GET_RTX_CLASS (GET_CODE (op0)) == '<'\n+\t\t&& GET_MODE (op0) == VOIDmode\n+\t\t&& ! side_effects_p (op0)\n+\t\t&& XEXP (op0, 0) == map->compare_src\n+\t\t&& GET_MODE (XEXP (op0, 1)) == VOIDmode)\n+\t      {\n+\t\t/* We have compare of two VOIDmode constants for which\n+\t\t   we recorded the comparison mode.  */\n+\t\trtx temp =\n+\t\t  simplify_relational_operation (GET_CODE (op0),\n+\t\t\t\t\t\t map->compare_mode,\n+\t\t\t\t\t\t XEXP (op0, 0),\n+\t\t\t\t\t\t XEXP (op0, 1));\n+\n+\t\tif (temp == const0_rtx)\n+\t\t  new = XEXP (x, 2);\n+\t\telse if (temp == const1_rtx)\n+\t\t  new = XEXP (x, 1);\n+\t      }\n+\t  }\n+\tif (!new)\n+\t  new = simplify_ternary_operation (code, GET_MODE (x), op0_mode,\n+\t\t\t\t\t    XEXP (x, 0), XEXP (x, 1),\n+\t\t\t\t\t    XEXP (x, 2));\n \tbreak;\n       }\n "}, {"sha": "51fced4d87ea96c7d210aae21a8ae0306d72f3f3", "filename": "gcc/integrate.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e60f0c1a31d4a76905e01d583f4c62b19fd6d1/gcc%2Fintegrate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e60f0c1a31d4a76905e01d583f4c62b19fd6d1/gcc%2Fintegrate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.h?ref=96e60f0c1a31d4a76905e01d583f4c62b19fd6d1", "patch": "@@ -112,6 +112,10 @@ struct inline_remap\n   /* Record the last thing assigned to cc0.  */\n   rtx last_cc0_value;\n #endif\n+  /* Note mode of COMPARE if the mode would be otherwise lost (comparing of\n+     two VOIDmode constants.  */\n+  rtx compare_src;\n+  enum machine_mode compare_mode;\n };\n \n /* Return a copy of an rtx (as needed), substituting pseudo-register,"}]}