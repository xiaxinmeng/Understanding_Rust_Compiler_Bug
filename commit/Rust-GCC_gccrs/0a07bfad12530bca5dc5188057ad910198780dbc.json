{"sha": "0a07bfad12530bca5dc5188057ad910198780dbc", "node_id": "C_kwDOANBUbNoAKDBhMDdiZmFkMTI1MzBiY2E1ZGM1MTg4MDU3YWQ5MTAxOTg3ODBkYmM", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-03-15T08:12:33Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-03-16T07:30:10Z"}, "message": "tree-optimization/109123 - run -Wuse-afer-free only early\n\nThe following switches the -Wuse-after-free diagnostics from emitted\nduring the late access warning passes to the early access warning\npasses to make sure we run before passes performing code motion run\nwhich are the source of a lot of false positives on use-after-free\nnot involving memory operations.\n\nThe patch also fixes an issue in c-c++-common/Wuse-after-free-6.c\nand causes the name of the unused pointer to appear in the diagnostic\nfor extra cases in gcc.dg/Wuse-after-free-2.c\n\n\tPR tree-optimization/109123\n\t* gimple-ssa-warn-access.cc (pass_waccess::warn_invalid_pointer):\n\tDo not emit -Wuse-after-free late.\n\t(pass_waccess::check_call): Always check call pointer uses.\n\n\t* gcc.dg/Wuse-after-free-pr109123.c: New testcase.\n\t* gcc.dg/Wuse-after-free-2.c: Amend expected diagnostic with\n\tthe name of the pointer.\n\t* c-c++-common/Wuse-after-free-6.c: Un-XFAIL case.", "tree": {"sha": "62d7bca97a1f207f70d54022470701df02b36e88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62d7bca97a1f207f70d54022470701df02b36e88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a07bfad12530bca5dc5188057ad910198780dbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a07bfad12530bca5dc5188057ad910198780dbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a07bfad12530bca5dc5188057ad910198780dbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a07bfad12530bca5dc5188057ad910198780dbc/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "adb70c2d1060b3e8d410b45c698796c5d88818b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adb70c2d1060b3e8d410b45c698796c5d88818b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adb70c2d1060b3e8d410b45c698796c5d88818b3"}], "stats": {"total": 79, "additions": 60, "deletions": 19}, "files": [{"sha": "88d44690ade16022cc8a74320e57f4f618bcb42e", "filename": "gcc/gimple-ssa-warn-access.cc", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a07bfad12530bca5dc5188057ad910198780dbc/gcc%2Fgimple-ssa-warn-access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a07bfad12530bca5dc5188057ad910198780dbc/gcc%2Fgimple-ssa-warn-access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-access.cc?ref=0a07bfad12530bca5dc5188057ad910198780dbc", "patch": "@@ -3907,7 +3907,8 @@ pass_waccess::warn_invalid_pointer (tree ref, gimple *use_stmt,\n \n   if (is_gimple_call (inval_stmt))\n     {\n-      if ((equality && warn_use_after_free < 3)\n+      if (!m_early_checks_p\n+\t  || (equality && warn_use_after_free < 3)\n \t  || (maybe && warn_use_after_free < 2)\n \t  || warning_suppressed_p (use_stmt, OPT_Wuse_after_free))\n \treturn;\n@@ -4303,19 +4304,18 @@ pass_waccess::check_call (gcall *stmt)\n   if (gimple_call_builtin_p (stmt, BUILT_IN_NORMAL))\n     check_builtin (stmt);\n \n-  if (!m_early_checks_p)\n-    if (tree callee = gimple_call_fndecl (stmt))\n-      {\n-\t/* Check for uses of the pointer passed to either a standard\n-\t   or a user-defined deallocation function.  */\n-\tunsigned argno = fndecl_dealloc_argno (callee);\n-\tif (argno < (unsigned) call_nargs (stmt))\n-\t  {\n-\t    tree arg = call_arg (stmt, argno);\n-\t    if (TREE_CODE (arg) == SSA_NAME)\n-\t      check_pointer_uses (stmt, arg);\n-\t  }\n-      }\n+  if (tree callee = gimple_call_fndecl (stmt))\n+    {\n+      /* Check for uses of the pointer passed to either a standard\n+\t or a user-defined deallocation function.  */\n+      unsigned argno = fndecl_dealloc_argno (callee);\n+      if (argno < (unsigned) call_nargs (stmt))\n+\t{\n+\t  tree arg = call_arg (stmt, argno);\n+\t  if (TREE_CODE (arg) == SSA_NAME)\n+\t    check_pointer_uses (stmt, arg);\n+\t}\n+    }\n \n   check_call_access (stmt);\n   check_call_dangling (stmt);"}, {"sha": "0c17a2545f4058878c262f20ff398fb714286ab4", "filename": "gcc/testsuite/c-c++-common/Wuse-after-free-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a07bfad12530bca5dc5188057ad910198780dbc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWuse-after-free-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a07bfad12530bca5dc5188057ad910198780dbc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWuse-after-free-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWuse-after-free-6.c?ref=0a07bfad12530bca5dc5188057ad910198780dbc", "patch": "@@ -53,7 +53,7 @@ void* warn_cond_return_after_free (void *p, int c)\n   free (p);\n   // PHI handling not fully implemented.\n   if (c)\n-    return p;       // { dg-warning \"pointer 'p' may be used\" \"pr??????\" { xfail *-*-* } }\n+    return p;       // { dg-warning \"pointer 'p' may be used\" }\n   return 0;\n }\n "}, {"sha": "ac174fdd104a0bb2094825724f5e427777ef4ae1", "filename": "gcc/testsuite/gcc.dg/Wuse-after-free-2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a07bfad12530bca5dc5188057ad910198780dbc/gcc%2Ftestsuite%2Fgcc.dg%2FWuse-after-free-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a07bfad12530bca5dc5188057ad910198780dbc/gcc%2Ftestsuite%2Fgcc.dg%2FWuse-after-free-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWuse-after-free-2.c?ref=0a07bfad12530bca5dc5188057ad910198780dbc", "patch": "@@ -76,31 +76,31 @@ void warn_cond_2_cst (char *p, int i)\n   char *r = i ? p + 1 : p + 2;\n \n   free (p);         // { dg-message \"call to 'free'\" }\n-  sink (r);         // { dg-warning \"pointer used after 'free'\" }\n+  sink (r);         // { dg-warning \"pointer 'r' used after 'free'\" }\n }\n \n void warn_cond_2_var (char *p, int i, int j)\n {\n   char *r = i ? p + i : p + j;\n \n   free (p);         // { dg-message \"call to 'free'\" }\n-  sink (r);         // { dg-warning \"pointer used after 'free'\" }\n+  sink (r);         // { dg-warning \"pointer 'r' used after 'free'\" }\n }\n \n void warn_cond_3_var (char *p0, int i, int j)\n {\n   char *r = i < 0 ? p0 - i : 0 < i ? p0 + j : p0 + i + j;\n \n   free (p0);        // { dg-message \"call to 'free'\" }\n-  sink (r + 1);     // { dg-warning \"pointer used after 'free'\" }\n+  sink (r + 1);     // { dg-warning \"pointer 'r' used after 'free'\" }\n }\n \n int warn_cond_4 (char *p0, char *q0, int i)\n {\n   char *r = i < -1 ? p0 - 2 : i < 0 ? p0 - 1 : 1 < i ? p0 + 2 : p0 + 1;\n \n   free (p0);        // { dg-message \"call to 'free'\" }\n-  return *r;        // { dg-warning \"pointer used after 'free'\" }\n+  return *r;        // { dg-warning \"pointer 'r' used after 'free'\" }\n }\n \n int warn_cond_loop (char *p)"}, {"sha": "ece066dd28becff0892a877fabddd957d275712c", "filename": "gcc/testsuite/gcc.dg/Wuse-after-free-pr109123.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a07bfad12530bca5dc5188057ad910198780dbc/gcc%2Ftestsuite%2Fgcc.dg%2FWuse-after-free-pr109123.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a07bfad12530bca5dc5188057ad910198780dbc/gcc%2Ftestsuite%2Fgcc.dg%2FWuse-after-free-pr109123.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWuse-after-free-pr109123.c?ref=0a07bfad12530bca5dc5188057ad910198780dbc", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wall\" } */\n+\n+typedef long unsigned int size_t;\n+extern void *realloc (void *__ptr, size_t __size)\n+     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__)) __attribute__ ((__alloc_size__ (2)));\n+struct vector_objective; \n+typedef struct vector_objective vector_objective;\n+struct vector_objective { double *_begin; double *_end; double *_capacity; };\n+static inline size_t vector_objective_size(const vector_objective * v) { \n+    return v->_end - v->_begin;  /* { dg-bogus \"used after\" } */\n+}\n+static inline size_t vector_objective_capacity(const vector_objective * v) {\n+    return v->_capacity - v->_begin;\n+}\n+static inline void vector_objective_reserve(vector_objective * v, size_t n) {\n+    size_t old_capacity = vector_objective_capacity(v);\n+    size_t old_size = vector_objective_size(v);\n+    if (n > old_capacity) {\n+        v->_begin = realloc(v->_begin, sizeof(double) * n);\n+        v->_end = v->_begin + old_size;\n+        v->_capacity = v->_begin + n;\n+    }\n+}\n+static inline void vector_objective_push_back(vector_objective * v, double x) {\n+    if (v->_end == v->_capacity)\n+        vector_objective_reserve (v, (vector_objective_capacity (v) == 0) ? 8 : 2 * vector_objective_capacity (v));\n+    *(v->_end) = x;\n+    v->_end++;\n+}\n+\n+typedef struct {\n+    vector_objective xy;\n+} eaf_polygon_t;\n+\n+int\n+rectangle_add(eaf_polygon_t * regions, double lx)\n+{\n+  vector_objective_push_back(&regions->xy, lx);\n+  return 0;\n+}"}]}