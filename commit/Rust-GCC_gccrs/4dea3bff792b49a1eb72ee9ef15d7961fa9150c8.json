{"sha": "4dea3bff792b49a1eb72ee9ef15d7961fa9150c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRlYTNiZmY3OTJiNDlhMWViNzJlZTllZjE1ZDc5NjFmYTkxNTBjOA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-06-13T13:43:32Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-06-13T13:43:32Z"}, "message": "emit-rtl.c: more typesafety\n\nThis patch converts various rtx to rtx_insn * (or rtx_code_label *).\nIt also convert the various \"_loc\" params from int to location_t\n\ngcc/ChangeLog:\n\t* config/arc/arc.c (hwloop_optimize): Strengthen local \"end_label\"\n\tfrom rtx to rtx_insn *.\n\t* config/bfin/bfin.c (hwloop_optimize): Likewise for local\n\t\"label\".\n\t(add_sched_insns_for_speculation): Likewise for local \"target\",\n\tconverting usage of JUMP_LABEL to JUMP_LABEL_AS_INSN.\n\t* config/c6x/c6x.c (reorg_split_calls): Strengthen param \"call_labels\"\n\tfrom rtx_insn ** to rtx_code_label **.\n\t(reorg_emit_nops): Likewise.\n\t(c6x_reorg): Likewise for local \"call_labels\".\n\t* config/sh/sh-protos.h (get_dest_uid): Strengthen 1st param from\n\trtx to rtx_insn *.\n\t* config/sh/sh.c (dump_table): Strengthen local \"lab\" from rtx to\n\trtx_code_label *, adding safe_as_a <rtx_code_label *> casts to\n\tthe loops over LABEL_REFS.\n\t(fixup_addr_diff_vecs): Add as_a <rtx_insn *> to usage of\n\tbraf_label.\n\t(barrier_align): Convert usage of JUMP_LABEL to JUMP_LABEL_AS_INSN.\n\t(get_dest_uid): Strengthen param \"label\" from rtx to rtx_insn *.\n\t(split_branches): Strengthen local \"olabel\" from rtx to\n\trtx_insn *, adding a safe_as_a cast.\n\t* emit-rtl.c (next_real_insn): Strengthen param from \"rtx\"\n\tto \"rtx_insn *\".\n\t(add_insn_after): Likewise for first two params.\n\t(add_insn_before): Likewise.\n\t(remove_insn): Likewise for param.\n\t(emit_pattern_before_noloc): Likewise for second and third params.\n\t(emit_jump_insn_before_noloc): Convert NULL_RTX to NULL.\n\t(emit_call_insn_before_noloc): Likewise.\n\t(emit_debug_insn_before_noloc): Strengthen \"before\" param from \"rtx\"\n\tto \"rtx_insn *\".\n\t(emit_barrier_before): Likewise.\n\t(emit_label_before): Strengthen \"label\" param from \"rtx\" to\n\t\"rtx_code_label *\".  Strengthen \"before\" param from \"rtx\" to\n\t\"rtx_insn *\".\n\t(emit_insn_after_1): Strengthen \"after\" param from \"rtx\" to\n\t\"rtx_insn *\".\n\t(emit_pattern_after_noloc): Likewise.\n\t(emit_insn_after_noloc): Likewise.\n\t(emit_jump_insn_after_noloc): Likewise.\n\t(emit_call_insn_after_noloc): Likewise.\n\t(emit_debug_insn_after_noloc): Likewise.\n\t(emit_barrier_after): Likewise.\n\t(emit_label_after): Likewise for both params.\n\t(emit_pattern_after_setloc): Likewise for \"after\" param.  Convert\n\t\"loc\" param from \"int\" to \"location_t\".\n\t(emit_insn_after_setloc): Likewise.\n\t(emit_jump_insn_after_setloc): Likewise.\n\t(emit_call_insn_after_setloc): Likewise.\n\t(emit_debug_insn_after_setloc): Likewise.\n\t(emit_pattern_before_setloc): Likewise for \"before\" param.  Convert\n\t\"loc\" param from \"int\" to \"location_t\".\n\t(emit_pattern_before): Convert NULL_RTX to NULL.\n\t(emit_insn_before_setloc): Convert \"loc\" param from \"int\" to\n\t\"location_t\".\n\t(emit_jump_insn_before_setloc): Likewise.\n\t(emit_call_insn_before_setloc): Likewise.\n\t(emit_debug_insn_before_setloc): Strengthen \"before\" param from rtx to\n\trtx_insn *.  Convert \"loc\" param from \"int\" to \"location_t\".\n\t* rtl.h (emit_insn_before_setloc, emit_jump_insn_before_setloc,\n\temit_call_insn_before_setloc, emit_debug_insn_before_setloc):\n\tConvert 3rd param from \"int\" to \"location_t\".\n\t(emit_barrier_before, emit_barrier_after, next_real_insn):\n\tStrengthen param from rtx to rtx_insn *.\n\t(emit_label_before): Strengthen 1st param from \"rtx\" to\n\t\"rtx_code_label *\".  Strengthen 2nd param from \"rtx\" to\n\t\"rtx_insn *\".\n\t(emit_insn_after_noloc, emit_jump_insn_after_noloc,\n\temit_call_insn_after_noloc, emit_debug_insn_after_noloc):\n\tStrengthen 2nd param from \"rtx\" to \"rtx_insn *\".\n\t(emit_insn_after_setloc, emit_jump_insn_after_setloc)\n\temit_call_insn_after_setloc, emit_debug_insn_after_setloc):\n\tLikewise. Convert 3rd param from \"int\" to \"location_t\".\n\t(emit_label_after): Strengthen 1st param from \"rtx\" to\n\t\"rtx_code_label *\".\n\t(next_real_insn, remove_insn): Strengthen param from \"rtx\" to\n\t\"rtx_insn *\".\n\t(add_insn_before, add_insn_after): Strengthen 1st and 2nd params\n\tfrom \"rtx\" to \"rtx_insn *\".\n\nFrom-SVN: r261547", "tree": {"sha": "286abdd9c73651c3d54becf821556bfd02fb9061", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/286abdd9c73651c3d54becf821556bfd02fb9061"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4dea3bff792b49a1eb72ee9ef15d7961fa9150c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dea3bff792b49a1eb72ee9ef15d7961fa9150c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dea3bff792b49a1eb72ee9ef15d7961fa9150c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dea3bff792b49a1eb72ee9ef15d7961fa9150c8/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b4da704c6ea9e69c6733fe86b5045b00f2775462", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4da704c6ea9e69c6733fe86b5045b00f2775462", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4da704c6ea9e69c6733fe86b5045b00f2775462"}], "stats": {"total": 253, "additions": 166, "deletions": 87}, "files": [{"sha": "5b15216cdd518edb46f50cf0115c52659c003c5a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dea3bff792b49a1eb72ee9ef15d7961fa9150c8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dea3bff792b49a1eb72ee9ef15d7961fa9150c8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4dea3bff792b49a1eb72ee9ef15d7961fa9150c8", "patch": "@@ -1,3 +1,85 @@\n+2018-06-13  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* config/arc/arc.c (hwloop_optimize): Strengthen local \"end_label\"\n+\tfrom rtx to rtx_insn *.\n+\t* config/bfin/bfin.c (hwloop_optimize): Likewise for local\n+\t\"label\".\n+\t(add_sched_insns_for_speculation): Likewise for local \"target\",\n+\tconverting usage of JUMP_LABEL to JUMP_LABEL_AS_INSN.\n+\t* config/c6x/c6x.c (reorg_split_calls): Strengthen param \"call_labels\"\n+\tfrom rtx_insn ** to rtx_code_label **.\n+\t(reorg_emit_nops): Likewise.\n+\t(c6x_reorg): Likewise for local \"call_labels\".\n+\t* config/sh/sh-protos.h (get_dest_uid): Strengthen 1st param from\n+\trtx to rtx_insn *.\n+\t* config/sh/sh.c (dump_table): Strengthen local \"lab\" from rtx to\n+\trtx_code_label *, adding safe_as_a <rtx_code_label *> casts to\n+\tthe loops over LABEL_REFS.\n+\t(fixup_addr_diff_vecs): Add as_a <rtx_insn *> to usage of\n+\tbraf_label.\n+\t(barrier_align): Convert usage of JUMP_LABEL to JUMP_LABEL_AS_INSN.\n+\t(get_dest_uid): Strengthen param \"label\" from rtx to rtx_insn *.\n+\t(split_branches): Strengthen local \"olabel\" from rtx to\n+\trtx_insn *, adding a safe_as_a cast.\n+\t* emit-rtl.c (next_real_insn): Strengthen param from \"rtx\"\n+\tto \"rtx_insn *\".\n+\t(add_insn_after): Likewise for first two params.\n+\t(add_insn_before): Likewise.\n+\t(remove_insn): Likewise for param.\n+\t(emit_pattern_before_noloc): Likewise for second and third params.\n+\t(emit_jump_insn_before_noloc): Convert NULL_RTX to NULL.\n+\t(emit_call_insn_before_noloc): Likewise.\n+\t(emit_debug_insn_before_noloc): Strengthen \"before\" param from \"rtx\"\n+\tto \"rtx_insn *\".\n+\t(emit_barrier_before): Likewise.\n+\t(emit_label_before): Strengthen \"label\" param from \"rtx\" to\n+\t\"rtx_code_label *\".  Strengthen \"before\" param from \"rtx\" to\n+\t\"rtx_insn *\".\n+\t(emit_insn_after_1): Strengthen \"after\" param from \"rtx\" to\n+\t\"rtx_insn *\".\n+\t(emit_pattern_after_noloc): Likewise.\n+\t(emit_insn_after_noloc): Likewise.\n+\t(emit_jump_insn_after_noloc): Likewise.\n+\t(emit_call_insn_after_noloc): Likewise.\n+\t(emit_debug_insn_after_noloc): Likewise.\n+\t(emit_barrier_after): Likewise.\n+\t(emit_label_after): Likewise for both params.\n+\t(emit_pattern_after_setloc): Likewise for \"after\" param.  Convert\n+\t\"loc\" param from \"int\" to \"location_t\".\n+\t(emit_insn_after_setloc): Likewise.\n+\t(emit_jump_insn_after_setloc): Likewise.\n+\t(emit_call_insn_after_setloc): Likewise.\n+\t(emit_debug_insn_after_setloc): Likewise.\n+\t(emit_pattern_before_setloc): Likewise for \"before\" param.  Convert\n+\t\"loc\" param from \"int\" to \"location_t\".\n+\t(emit_pattern_before): Convert NULL_RTX to NULL.\n+\t(emit_insn_before_setloc): Convert \"loc\" param from \"int\" to\n+\t\"location_t\".\n+\t(emit_jump_insn_before_setloc): Likewise.\n+\t(emit_call_insn_before_setloc): Likewise.\n+\t(emit_debug_insn_before_setloc): Strengthen \"before\" param from rtx to\n+\trtx_insn *.  Convert \"loc\" param from \"int\" to \"location_t\".\n+\t* rtl.h (emit_insn_before_setloc, emit_jump_insn_before_setloc,\n+\temit_call_insn_before_setloc, emit_debug_insn_before_setloc):\n+\tConvert 3rd param from \"int\" to \"location_t\".\n+\t(emit_barrier_before, emit_barrier_after, next_real_insn):\n+\tStrengthen param from rtx to rtx_insn *.\n+\t(emit_label_before): Strengthen 1st param from \"rtx\" to\n+\t\"rtx_code_label *\".  Strengthen 2nd param from \"rtx\" to\n+\t\"rtx_insn *\".\n+\t(emit_insn_after_noloc, emit_jump_insn_after_noloc,\n+\temit_call_insn_after_noloc, emit_debug_insn_after_noloc):\n+\tStrengthen 2nd param from \"rtx\" to \"rtx_insn *\".\n+\t(emit_insn_after_setloc, emit_jump_insn_after_setloc)\n+\temit_call_insn_after_setloc, emit_debug_insn_after_setloc):\n+\tLikewise. Convert 3rd param from \"int\" to \"location_t\".\n+\t(emit_label_after): Strengthen 1st param from \"rtx\" to\n+\t\"rtx_code_label *\".\n+\t(next_real_insn, remove_insn): Strengthen param from \"rtx\" to\n+\t\"rtx_insn *\".\n+\t(add_insn_before, add_insn_after): Strengthen 1st and 2nd params\n+\tfrom \"rtx\" to \"rtx_insn *\".\n+\n 2018-06-13  Jan Hubicka  <hubicka@gcc.gnu.org>\n \n \t* cgraph.c (cgraph_node::get_untransformed_body): Dump function"}, {"sha": "477500cd0b29cb6030e128c4870ca691579fc299", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dea3bff792b49a1eb72ee9ef15d7961fa9150c8/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dea3bff792b49a1eb72ee9ef15d7961fa9150c8/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=4dea3bff792b49a1eb72ee9ef15d7961fa9150c8", "patch": "@@ -7306,8 +7306,8 @@ hwloop_optimize (hwloop_info loop)\n   int i;\n   edge entry_edge;\n   basic_block entry_bb, bb;\n-  rtx iter_reg, end_label;\n-  rtx_insn *insn, *seq, *entry_after, *last_insn;\n+  rtx iter_reg;\n+  rtx_insn *insn, *seq, *entry_after, *last_insn, *end_label;\n   unsigned int length;\n   bool need_fix = false;\n   rtx lp_reg = gen_rtx_REG (SImode, LP_COUNT);"}, {"sha": "1d98e55c84da81412e30a2e7687f2ec7d7a349fe", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dea3bff792b49a1eb72ee9ef15d7961fa9150c8/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dea3bff792b49a1eb72ee9ef15d7961fa9150c8/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=4dea3bff792b49a1eb72ee9ef15d7961fa9150c8", "patch": "@@ -3773,7 +3773,7 @@ hwloop_optimize (hwloop_info loop)\n      point.  */\n   if (!loop->incoming_src && loop->head != loop->incoming_dest)\n     {\n-      rtx label = BB_HEAD (loop->incoming_dest);\n+      rtx_insn *label = BB_HEAD (loop->incoming_dest);\n       /* If we're jumping to the final basic block in the loop, and there's\n \t only one cheap instruction before the end (typically an increment of\n \t an induction variable), we can just emit a copy here instead of a\n@@ -4607,7 +4607,7 @@ add_sched_insns_for_speculation (void)\n \t  && any_condjump_p (insn)\n \t  && (cbranch_predicted_taken_p (insn)))\n \t{\n-\t  rtx target = JUMP_LABEL (insn);\n+\t  rtx_insn *target = JUMP_LABEL_AS_INSN (insn);\n \t  rtx_insn *next = next_real_insn (target);\n \n \t  if (GET_CODE (PATTERN (next)) == UNSPEC_VOLATILE"}, {"sha": "38fbd7e3fa93139e3ac7c3a1eb57f186753b3c92", "filename": "gcc/config/c6x/c6x.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dea3bff792b49a1eb72ee9ef15d7961fa9150c8/gcc%2Fconfig%2Fc6x%2Fc6x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dea3bff792b49a1eb72ee9ef15d7961fa9150c8/gcc%2Fconfig%2Fc6x%2Fc6x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.c?ref=4dea3bff792b49a1eb72ee9ef15d7961fa9150c8", "patch": "@@ -4835,7 +4835,7 @@ find_last_same_clock (rtx_insn *insn)\n    the SEQUENCEs that represent execute packets.  */\n \n static void\n-reorg_split_calls (rtx_insn **call_labels)\n+reorg_split_calls (rtx_code_label **call_labels)\n {\n   unsigned int reservation_mask = 0;\n   rtx_insn *insn = get_insns ();\n@@ -5009,7 +5009,7 @@ reorg_split_calls (rtx_insn **call_labels)\n    scheduling was run earlier.  */\n \n static void\n-reorg_emit_nops (rtx_insn **call_labels)\n+reorg_emit_nops (rtx_code_label **call_labels)\n {\n   bool first;\n   rtx last_call;\n@@ -5947,7 +5947,7 @@ c6x_reorg (void)\n     }\n   sched_no_dce = false;\n \n-  rtx_insn **call_labels = XCNEWVEC (rtx_insn *, get_max_uid () + 1);\n+  rtx_code_label **call_labels = XCNEWVEC (rtx_code_label *, get_max_uid () + 1);\n \n   reorg_split_calls (call_labels);\n "}, {"sha": "66ee3159d55e62d66ac7291e6a03532c6dc6baf7", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dea3bff792b49a1eb72ee9ef15d7961fa9150c8/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dea3bff792b49a1eb72ee9ef15d7961fa9150c8/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=4dea3bff792b49a1eb72ee9ef15d7961fa9150c8", "patch": "@@ -88,7 +88,7 @@ extern int shl_sext_length (rtx);\n extern bool gen_shl_sext (rtx, rtx, rtx, rtx);\n extern int regs_used (rtx, int);\n extern void fixup_addr_diff_vecs (rtx_insn *);\n-extern int get_dest_uid (rtx, int);\n+extern int get_dest_uid (rtx_insn *, int);\n extern void final_prescan_insn (rtx_insn *, rtx *, int);\n extern enum tls_model tls_symbolic_operand (rtx, machine_mode);\n extern bool system_reg_operand (rtx, machine_mode);"}, {"sha": "5f6fbb37e3e6edbaa07759e4409b3fa4907d23f1", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dea3bff792b49a1eb72ee9ef15d7961fa9150c8/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dea3bff792b49a1eb72ee9ef15d7961fa9150c8/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=4dea3bff792b49a1eb72ee9ef15d7961fa9150c8", "patch": "@@ -4583,7 +4583,7 @@ dump_table (rtx_insn *start, rtx_insn *barrier)\n {\n   rtx_insn *scan = barrier;\n   bool need_align = true;\n-  rtx lab;\n+  rtx_code_label *lab;\n   label_ref_list_t ref;\n   bool have_df = false;\n \n@@ -4600,7 +4600,8 @@ dump_table (rtx_insn *start, rtx_insn *barrier)\n \t      scan = emit_insn_after (gen_align_2 (), scan);\n \t      need_align = false;\n \t    }\n-\t  for (lab = p->label; lab; lab = LABEL_REFS (lab))\n+\t  for (lab = p->label; lab;\n+\t       lab = safe_as_a <rtx_code_label *> (LABEL_REFS (lab)))\n \t    scan = emit_label_after (lab, scan);\n \t  scan = emit_insn_after (gen_consttable_2 (p->value, const0_rtx),\n \t\t\t\t  scan);\n@@ -4627,7 +4628,7 @@ dump_table (rtx_insn *start, rtx_insn *barrier)\n \t    rtx src = SET_SRC (XVECEXP (PATTERN (start), 0, 0));\n \t    rtx lab = XEXP (XVECEXP (src, 0, 3), 0);\n \n-\t    scan = emit_label_after (lab, scan);\n+\t    scan = emit_label_after (as_a <rtx_insn *> (lab), scan);\n \t  }\n     }\n   if (TARGET_FMOVD && TARGET_ALIGN_DOUBLE && have_df)\n@@ -4650,7 +4651,8 @@ dump_table (rtx_insn *start, rtx_insn *barrier)\n \t    case E_SFmode:\n \t      if (align_insn && !p->part_of_sequence_p)\n \t\t{\n-\t\t  for (lab = p->label; lab; lab = LABEL_REFS (lab))\n+\t\t  for (lab = p->label; lab;\n+\t\t       lab = safe_as_a <rtx_code_label *> (LABEL_REFS (lab)))\n \t\t    emit_label_before (lab, align_insn);\n \t\t  emit_insn_before (gen_consttable_4 (p->value, const0_rtx),\n \t\t\t\t    align_insn);\n@@ -4666,7 +4668,8 @@ dump_table (rtx_insn *start, rtx_insn *barrier)\n \t\t}\n \t      else\n \t\t{\n-\t\t  for (lab = p->label; lab; lab = LABEL_REFS (lab))\n+\t\t  for (lab = p->label; lab;\n+\t\t       lab = safe_as_a <rtx_code_label *> (LABEL_REFS (lab)))\n \t\t    scan = emit_label_after (lab, scan);\n \t\t  scan = emit_insn_after (gen_consttable_4 (p->value,\n \t\t\t\t\t\t\t    const0_rtx), scan);\n@@ -4682,7 +4685,8 @@ dump_table (rtx_insn *start, rtx_insn *barrier)\n \t\t}\n \t      /* FALLTHRU */\n \t    case E_DImode:\n-\t      for (lab = p->label; lab; lab = LABEL_REFS (lab))\n+\t      for (lab = p->label; lab;\n+\t\t   lab = safe_as_a <rtx_code_label *> (LABEL_REFS (lab)))\n \t\tscan = emit_label_after (lab, scan);\n \t      scan = emit_insn_after (gen_consttable_8 (p->value, const0_rtx),\n \t\t\t\t      scan);\n@@ -4721,7 +4725,8 @@ dump_table (rtx_insn *start, rtx_insn *barrier)\n \t      scan = emit_label_after (gen_label_rtx (), scan);\n \t      scan = emit_insn_after (gen_align_4 (), scan);\n \t    }\n-\t  for (lab = p->label; lab; lab = LABEL_REFS (lab))\n+\t  for (lab = p->label; lab;\n+\t       lab = safe_as_a <rtx_code_label *> (LABEL_REFS (lab)))\n \t    scan = emit_label_after (lab, scan);\n \t  scan = emit_insn_after (gen_consttable_4 (p->value, const0_rtx),\n \t\t\t\t  scan);\n@@ -4734,7 +4739,8 @@ dump_table (rtx_insn *start, rtx_insn *barrier)\n \t      scan = emit_label_after (gen_label_rtx (), scan);\n \t      scan = emit_insn_after (gen_align_4 (), scan);\n \t    }\n-\t  for (lab = p->label; lab; lab = LABEL_REFS (lab))\n+\t  for (lab = p->label; lab;\n+\t       lab = safe_as_a <rtx_code_label *> (LABEL_REFS (lab)))\n \t    scan = emit_label_after (lab, scan);\n \t  scan = emit_insn_after (gen_consttable_8 (p->value, const0_rtx),\n \t\t\t\t  scan);\n@@ -5706,7 +5712,7 @@ fixup_addr_diff_vecs (rtx_insn *first)\n       /* Emit the reference label of the braf where it belongs, right after\n \t the casesi_jump_2 (i.e. braf).  */\n       braf_label = XEXP (XEXP (SET_SRC (XVECEXP (prevpat, 0, 0)), 1), 0);\n-      emit_label_after (braf_label, prev);\n+      emit_label_after (as_a <rtx_insn *> (braf_label), prev);\n \n       /* Fix up the ADDR_DIF_VEC to be relative\n \t to the reference address of the braf.  */\n@@ -5810,7 +5816,7 @@ barrier_align (rtx_insn *barrier_or_label)\n \t{\n \t  rtx_insn *x;\n \t  if (jump_to_next\n-\t      || next_real_insn (JUMP_LABEL (prev)) == next\n+\t      || next_real_insn (JUMP_LABEL_AS_INSN (prev)) == next\n \t      /* If relax_delay_slots() decides NEXT was redundant\n \t\t with some previous instruction, it will have\n \t\t redirected PREV's jump to the following insn.  */\n@@ -6310,7 +6316,7 @@ sh_reorg (void)\n \n /* Return the UID of the insn that follows the specified label.  */\n int\n-get_dest_uid (rtx label, int max_uid)\n+get_dest_uid (rtx_insn *label, int max_uid)\n {\n   rtx_insn *dest = next_real_insn (label);\n \n@@ -6370,7 +6376,7 @@ split_branches (rtx_insn *first)\n \t    if (get_attr_length (insn) > 4)\n \t      {\n \t\trtx src = SET_SRC (PATTERN (insn));\n-\t\trtx olabel = XEXP (XEXP (src, 1), 0);\n+\t\trtx_insn *olabel = safe_as_a <rtx_insn *> (XEXP (XEXP (src, 1), 0));\n \t\tint addr = INSN_ADDRESSES (INSN_UID (insn));\n \t\trtx_insn *label = 0;\n \t\tint dest_uid = get_dest_uid (olabel, max_uid);"}, {"sha": "a327ff2da0819dee5e8c94c0b35d86d1a18d1bb1", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 37, "deletions": 47, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dea3bff792b49a1eb72ee9ef15d7961fa9150c8/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dea3bff792b49a1eb72ee9ef15d7961fa9150c8/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=4dea3bff792b49a1eb72ee9ef15d7961fa9150c8", "patch": "@@ -3602,10 +3602,8 @@ prev_nonnote_nondebug_insn_bb (rtx_insn *insn)\n    SEQUENCEs.  */\n \n rtx_insn *\n-next_real_insn (rtx uncast_insn)\n+next_real_insn (rtx_insn *insn)\n {\n-  rtx_insn *insn = safe_as_a <rtx_insn *> (uncast_insn);\n-\n   while (insn)\n     {\n       insn = NEXT_INSN (insn);\n@@ -4230,10 +4228,8 @@ add_insn_before_nobb (rtx_insn *insn, rtx_insn *before)\n    they know how to update a SEQUENCE. */\n \n void\n-add_insn_after (rtx uncast_insn, rtx uncast_after, basic_block bb)\n+add_insn_after (rtx_insn *insn, rtx_insn *after, basic_block bb)\n {\n-  rtx_insn *insn = as_a <rtx_insn *> (uncast_insn);\n-  rtx_insn *after = as_a <rtx_insn *> (uncast_after);\n   add_insn_after_nobb (insn, after);\n   if (!BARRIER_P (after)\n       && !BARRIER_P (insn)\n@@ -4260,10 +4256,8 @@ add_insn_after (rtx uncast_insn, rtx uncast_after, basic_block bb)\n    they know how to update a SEQUENCE. */\n \n void\n-add_insn_before (rtx uncast_insn, rtx uncast_before, basic_block bb)\n+add_insn_before (rtx_insn *insn, rtx_insn *before, basic_block bb)\n {\n-  rtx_insn *insn = as_a <rtx_insn *> (uncast_insn);\n-  rtx_insn *before = as_a <rtx_insn *> (uncast_before);\n   add_insn_before_nobb (insn, before);\n \n   if (!bb\n@@ -4313,9 +4307,8 @@ set_insn_deleted (rtx insn)\n    To really delete an insn and related DF information, use delete_insn.  */\n \n void\n-remove_insn (rtx uncast_insn)\n+remove_insn (rtx_insn *insn)\n {\n-  rtx_insn *insn = as_a <rtx_insn *> (uncast_insn);\n   rtx_insn *next = NEXT_INSN (insn);\n   rtx_insn *prev = PREV_INSN (insn);\n   basic_block bb;\n@@ -4518,15 +4511,16 @@ reorder_insns (rtx_insn *from, rtx_insn *to, rtx_insn *after)\n    generated would almost certainly die right after it was created.  */\n \n static rtx_insn *\n-emit_pattern_before_noloc (rtx x, rtx before, rtx last, basic_block bb,\n+emit_pattern_before_noloc (rtx x, rtx_insn *before, rtx_insn *last,\n+\t\t\t   basic_block bb,\n                            rtx_insn *(*make_raw) (rtx))\n {\n   rtx_insn *insn;\n \n   gcc_assert (before);\n \n   if (x == NULL_RTX)\n-    return safe_as_a <rtx_insn *> (last);\n+    return last;\n \n   switch (GET_CODE (x))\n     {\n@@ -4559,7 +4553,7 @@ emit_pattern_before_noloc (rtx x, rtx before, rtx last, basic_block bb,\n       break;\n     }\n \n-  return safe_as_a <rtx_insn *> (last);\n+  return last;\n }\n \n /* Make X be output before the instruction BEFORE.  */\n@@ -4577,7 +4571,7 @@ rtx_jump_insn *\n emit_jump_insn_before_noloc (rtx x, rtx_insn *before)\n {\n   return as_a <rtx_jump_insn *> (\n-\t\temit_pattern_before_noloc (x, before, NULL_RTX, NULL,\n+\t\temit_pattern_before_noloc (x, before, NULL, NULL,\n \t\t\t\t\t   make_jump_insn_raw));\n }\n \n@@ -4587,25 +4581,25 @@ emit_jump_insn_before_noloc (rtx x, rtx_insn *before)\n rtx_insn *\n emit_call_insn_before_noloc (rtx x, rtx_insn *before)\n {\n-  return emit_pattern_before_noloc (x, before, NULL_RTX, NULL,\n+  return emit_pattern_before_noloc (x, before, NULL, NULL,\n \t\t\t\t    make_call_insn_raw);\n }\n \n /* Make an instruction with body X and code DEBUG_INSN\n    and output it before the instruction BEFORE.  */\n \n rtx_insn *\n-emit_debug_insn_before_noloc (rtx x, rtx before)\n+emit_debug_insn_before_noloc (rtx x, rtx_insn *before)\n {\n-  return emit_pattern_before_noloc (x, before, NULL_RTX, NULL,\n+  return emit_pattern_before_noloc (x, before, NULL, NULL,\n \t\t\t\t    make_debug_insn_raw);\n }\n \n /* Make an insn of code BARRIER\n    and output it before the insn BEFORE.  */\n \n rtx_barrier *\n-emit_barrier_before (rtx before)\n+emit_barrier_before (rtx_insn *before)\n {\n   rtx_barrier *insn = as_a <rtx_barrier *> (rtx_alloc (BARRIER));\n \n@@ -4618,21 +4612,20 @@ emit_barrier_before (rtx before)\n /* Emit the label LABEL before the insn BEFORE.  */\n \n rtx_code_label *\n-emit_label_before (rtx label, rtx_insn *before)\n+emit_label_before (rtx_code_label *label, rtx_insn *before)\n {\n   gcc_checking_assert (INSN_UID (label) == 0);\n   INSN_UID (label) = cur_insn_uid++;\n   add_insn_before (label, before, NULL);\n-  return as_a <rtx_code_label *> (label);\n+  return label;\n }\n \f\n /* Helper for emit_insn_after, handles lists of instructions\n    efficiently.  */\n \n static rtx_insn *\n-emit_insn_after_1 (rtx_insn *first, rtx uncast_after, basic_block bb)\n+emit_insn_after_1 (rtx_insn *first, rtx_insn *after, basic_block bb)\n {\n-  rtx_insn *after = safe_as_a <rtx_insn *> (uncast_after);\n   rtx_insn *last;\n   rtx_insn *after_after;\n   if (!bb && !BARRIER_P (after))\n@@ -4674,10 +4667,9 @@ emit_insn_after_1 (rtx_insn *first, rtx uncast_after, basic_block bb)\n }\n \n static rtx_insn *\n-emit_pattern_after_noloc (rtx x, rtx uncast_after, basic_block bb,\n+emit_pattern_after_noloc (rtx x, rtx_insn *after, basic_block bb,\n \t\t\t  rtx_insn *(*make_raw)(rtx))\n {\n-  rtx_insn *after = safe_as_a <rtx_insn *> (uncast_after);\n   rtx_insn *last = after;\n \n   gcc_assert (after);\n@@ -4716,7 +4708,7 @@ emit_pattern_after_noloc (rtx x, rtx uncast_after, basic_block bb,\n    BB is NULL, an attempt is made to infer the BB from AFTER.  */\n \n rtx_insn *\n-emit_insn_after_noloc (rtx x, rtx after, basic_block bb)\n+emit_insn_after_noloc (rtx x, rtx_insn *after, basic_block bb)\n {\n   return emit_pattern_after_noloc (x, after, bb, make_insn_raw);\n }\n@@ -4726,7 +4718,7 @@ emit_insn_after_noloc (rtx x, rtx after, basic_block bb)\n    and output it after the insn AFTER.  */\n \n rtx_jump_insn *\n-emit_jump_insn_after_noloc (rtx x, rtx after)\n+emit_jump_insn_after_noloc (rtx x, rtx_insn *after)\n {\n   return as_a <rtx_jump_insn *> (\n \t\temit_pattern_after_noloc (x, after, NULL, make_jump_insn_raw));\n@@ -4736,7 +4728,7 @@ emit_jump_insn_after_noloc (rtx x, rtx after)\n    and output it after the instruction AFTER.  */\n \n rtx_insn *\n-emit_call_insn_after_noloc (rtx x, rtx after)\n+emit_call_insn_after_noloc (rtx x, rtx_insn *after)\n {\n   return emit_pattern_after_noloc (x, after, NULL, make_call_insn_raw);\n }\n@@ -4745,7 +4737,7 @@ emit_call_insn_after_noloc (rtx x, rtx after)\n    and output it after the instruction AFTER.  */\n \n rtx_insn *\n-emit_debug_insn_after_noloc (rtx x, rtx after)\n+emit_debug_insn_after_noloc (rtx x, rtx_insn *after)\n {\n   return emit_pattern_after_noloc (x, after, NULL, make_debug_insn_raw);\n }\n@@ -4754,7 +4746,7 @@ emit_debug_insn_after_noloc (rtx x, rtx after)\n    and output it after the insn AFTER.  */\n \n rtx_barrier *\n-emit_barrier_after (rtx after)\n+emit_barrier_after (rtx_insn *after)\n {\n   rtx_barrier *insn = as_a <rtx_barrier *> (rtx_alloc (BARRIER));\n \n@@ -4767,12 +4759,12 @@ emit_barrier_after (rtx after)\n /* Emit the label LABEL after the insn AFTER.  */\n \n rtx_insn *\n-emit_label_after (rtx label, rtx_insn *after)\n+emit_label_after (rtx_insn *label, rtx_insn *after)\n {\n   gcc_checking_assert (INSN_UID (label) == 0);\n   INSN_UID (label) = cur_insn_uid++;\n   add_insn_after (label, after, NULL);\n-  return as_a <rtx_insn *> (label);\n+  return label;\n }\n \f\n /* Notes require a bit of special handling: Some notes need to have their\n@@ -4842,10 +4834,9 @@ emit_note_before (enum insn_note subtype, rtx_insn *before)\n    MAKE_RAW indicates how to turn PATTERN into a real insn.  */\n \n static rtx_insn *\n-emit_pattern_after_setloc (rtx pattern, rtx uncast_after, int loc,\n+emit_pattern_after_setloc (rtx pattern, rtx_insn *after, location_t loc,\n \t\t\t   rtx_insn *(*make_raw) (rtx))\n {\n-  rtx_insn *after = safe_as_a <rtx_insn *> (uncast_after);\n   rtx_insn *last = emit_pattern_after_noloc (pattern, after, NULL, make_raw);\n \n   if (pattern == NULL_RTX || !loc)\n@@ -4889,7 +4880,7 @@ emit_pattern_after (rtx pattern, rtx uncast_after, bool skip_debug_insns,\n \n /* Like emit_insn_after_noloc, but set INSN_LOCATION according to LOC.  */\n rtx_insn *\n-emit_insn_after_setloc (rtx pattern, rtx after, int loc)\n+emit_insn_after_setloc (rtx pattern, rtx_insn *after, location_t loc)\n {\n   return emit_pattern_after_setloc (pattern, after, loc, make_insn_raw);\n }\n@@ -4903,7 +4894,7 @@ emit_insn_after (rtx pattern, rtx after)\n \n /* Like emit_jump_insn_after_noloc, but set INSN_LOCATION according to LOC.  */\n rtx_jump_insn *\n-emit_jump_insn_after_setloc (rtx pattern, rtx after, int loc)\n+emit_jump_insn_after_setloc (rtx pattern, rtx_insn *after, location_t loc)\n {\n   return as_a <rtx_jump_insn *> (\n \temit_pattern_after_setloc (pattern, after, loc, make_jump_insn_raw));\n@@ -4919,7 +4910,7 @@ emit_jump_insn_after (rtx pattern, rtx after)\n \n /* Like emit_call_insn_after_noloc, but set INSN_LOCATION according to LOC.  */\n rtx_insn *\n-emit_call_insn_after_setloc (rtx pattern, rtx after, int loc)\n+emit_call_insn_after_setloc (rtx pattern, rtx_insn *after, location_t loc)\n {\n   return emit_pattern_after_setloc (pattern, after, loc, make_call_insn_raw);\n }\n@@ -4933,7 +4924,7 @@ emit_call_insn_after (rtx pattern, rtx after)\n \n /* Like emit_debug_insn_after_noloc, but set INSN_LOCATION according to LOC.  */\n rtx_insn *\n-emit_debug_insn_after_setloc (rtx pattern, rtx after, int loc)\n+emit_debug_insn_after_setloc (rtx pattern, rtx_insn *after, location_t loc)\n {\n   return emit_pattern_after_setloc (pattern, after, loc, make_debug_insn_raw);\n }\n@@ -4951,13 +4942,12 @@ emit_debug_insn_after (rtx pattern, rtx after)\n    CALL_INSN, etc.  */\n \n static rtx_insn *\n-emit_pattern_before_setloc (rtx pattern, rtx uncast_before, int loc, bool insnp,\n-\t\t\t    rtx_insn *(*make_raw) (rtx))\n+emit_pattern_before_setloc (rtx pattern, rtx_insn *before, location_t loc,\n+\t\t\t    bool insnp, rtx_insn *(*make_raw) (rtx))\n {\n-  rtx_insn *before = as_a <rtx_insn *> (uncast_before);\n   rtx_insn *first = PREV_INSN (before);\n   rtx_insn *last = emit_pattern_before_noloc (pattern, before,\n-\t\t\t\t\t      insnp ? before : NULL_RTX,\n+\t\t\t\t\t      insnp ? before : NULL,\n \t\t\t\t\t      NULL, make_raw);\n \n   if (pattern == NULL_RTX || !loc)\n@@ -5001,13 +4991,13 @@ emit_pattern_before (rtx pattern, rtx uncast_before, bool skip_debug_insns,\n \t\t\t\t       insnp, make_raw);\n   else\n     return emit_pattern_before_noloc (pattern, before,\n-\t\t\t\t      insnp ? before : NULL_RTX,\n+\t\t\t\t      insnp ? before : NULL,\n                                       NULL, make_raw);\n }\n \n /* Like emit_insn_before_noloc, but set INSN_LOCATION according to LOC.  */\n rtx_insn *\n-emit_insn_before_setloc (rtx pattern, rtx_insn *before, int loc)\n+emit_insn_before_setloc (rtx pattern, rtx_insn *before, location_t loc)\n {\n   return emit_pattern_before_setloc (pattern, before, loc, true,\n \t\t\t\t     make_insn_raw);\n@@ -5022,7 +5012,7 @@ emit_insn_before (rtx pattern, rtx before)\n \n /* like emit_insn_before_noloc, but set INSN_LOCATION according to LOC.  */\n rtx_jump_insn *\n-emit_jump_insn_before_setloc (rtx pattern, rtx_insn *before, int loc)\n+emit_jump_insn_before_setloc (rtx pattern, rtx_insn *before, location_t loc)\n {\n   return as_a <rtx_jump_insn *> (\n \temit_pattern_before_setloc (pattern, before, loc, false,\n@@ -5040,7 +5030,7 @@ emit_jump_insn_before (rtx pattern, rtx before)\n \n /* Like emit_insn_before_noloc, but set INSN_LOCATION according to LOC.  */\n rtx_insn *\n-emit_call_insn_before_setloc (rtx pattern, rtx_insn *before, int loc)\n+emit_call_insn_before_setloc (rtx pattern, rtx_insn *before, location_t loc)\n {\n   return emit_pattern_before_setloc (pattern, before, loc, false,\n \t\t\t\t     make_call_insn_raw);\n@@ -5057,7 +5047,7 @@ emit_call_insn_before (rtx pattern, rtx_insn *before)\n \n /* Like emit_insn_before_noloc, but set INSN_LOCATION according to LOC.  */\n rtx_insn *\n-emit_debug_insn_before_setloc (rtx pattern, rtx before, int loc)\n+emit_debug_insn_before_setloc (rtx pattern, rtx_insn *before, location_t loc)\n {\n   return emit_pattern_before_setloc (pattern, before, loc, false,\n \t\t\t\t     make_debug_insn_raw);"}, {"sha": "5ae58b432edc4a3ad26710ab9650256a70938420", "filename": "gcc/rtl.h", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dea3bff792b49a1eb72ee9ef15d7961fa9150c8/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dea3bff792b49a1eb72ee9ef15d7961fa9150c8/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=4dea3bff792b49a1eb72ee9ef15d7961fa9150c8", "patch": "@@ -3216,33 +3216,34 @@ extern void decide_function_section (tree);\n /* In emit-rtl.c */\n extern rtx_insn *emit_insn_before (rtx, rtx);\n extern rtx_insn *emit_insn_before_noloc (rtx, rtx_insn *, basic_block);\n-extern rtx_insn *emit_insn_before_setloc (rtx, rtx_insn *, int);\n+extern rtx_insn *emit_insn_before_setloc (rtx, rtx_insn *, location_t);\n extern rtx_jump_insn *emit_jump_insn_before (rtx, rtx);\n extern rtx_jump_insn *emit_jump_insn_before_noloc (rtx, rtx_insn *);\n-extern rtx_jump_insn *emit_jump_insn_before_setloc (rtx, rtx_insn *, int);\n+extern rtx_jump_insn *emit_jump_insn_before_setloc (rtx, rtx_insn *,\n+\t\t\t\t\t\t    location_t);\n extern rtx_insn *emit_call_insn_before (rtx, rtx_insn *);\n extern rtx_insn *emit_call_insn_before_noloc (rtx, rtx_insn *);\n-extern rtx_insn *emit_call_insn_before_setloc (rtx, rtx_insn *, int);\n+extern rtx_insn *emit_call_insn_before_setloc (rtx, rtx_insn *, location_t);\n extern rtx_insn *emit_debug_insn_before (rtx, rtx_insn *);\n extern rtx_insn *emit_debug_insn_before_noloc (rtx, rtx);\n-extern rtx_insn *emit_debug_insn_before_setloc (rtx, rtx, int);\n-extern rtx_barrier *emit_barrier_before (rtx);\n-extern rtx_code_label *emit_label_before (rtx, rtx_insn *);\n+extern rtx_insn *emit_debug_insn_before_setloc (rtx, rtx_insn *, location_t);\n+extern rtx_barrier *emit_barrier_before (rtx_insn *);\n+extern rtx_code_label *emit_label_before (rtx_code_label *, rtx_insn *);\n extern rtx_note *emit_note_before (enum insn_note, rtx_insn *);\n extern rtx_insn *emit_insn_after (rtx, rtx);\n-extern rtx_insn *emit_insn_after_noloc (rtx, rtx, basic_block);\n-extern rtx_insn *emit_insn_after_setloc (rtx, rtx, int);\n+extern rtx_insn *emit_insn_after_noloc (rtx, rtx_insn *, basic_block);\n+extern rtx_insn *emit_insn_after_setloc (rtx, rtx_insn *, location_t);\n extern rtx_jump_insn *emit_jump_insn_after (rtx, rtx);\n-extern rtx_jump_insn *emit_jump_insn_after_noloc (rtx, rtx);\n-extern rtx_jump_insn *emit_jump_insn_after_setloc (rtx, rtx, int);\n+extern rtx_jump_insn *emit_jump_insn_after_noloc (rtx, rtx_insn *);\n+extern rtx_jump_insn *emit_jump_insn_after_setloc (rtx, rtx_insn *, location_t);\n extern rtx_insn *emit_call_insn_after (rtx, rtx);\n-extern rtx_insn *emit_call_insn_after_noloc (rtx, rtx);\n-extern rtx_insn *emit_call_insn_after_setloc (rtx, rtx, int);\n+extern rtx_insn *emit_call_insn_after_noloc (rtx, rtx_insn *);\n+extern rtx_insn *emit_call_insn_after_setloc (rtx, rtx_insn *, location_t);\n extern rtx_insn *emit_debug_insn_after (rtx, rtx);\n-extern rtx_insn *emit_debug_insn_after_noloc (rtx, rtx);\n-extern rtx_insn *emit_debug_insn_after_setloc (rtx, rtx, int);\n-extern rtx_barrier *emit_barrier_after (rtx);\n-extern rtx_insn *emit_label_after (rtx, rtx_insn *);\n+extern rtx_insn *emit_debug_insn_after_noloc (rtx, rtx_insn *);\n+extern rtx_insn *emit_debug_insn_after_setloc (rtx, rtx_insn *, location_t);\n+extern rtx_barrier *emit_barrier_after (rtx_insn *);\n+extern rtx_insn *emit_label_after (rtx_insn *, rtx_insn *);\n extern rtx_note *emit_note_after (enum insn_note, rtx_insn *);\n extern rtx_insn *emit_insn (rtx);\n extern rtx_insn *emit_debug_insn (rtx);\n@@ -3271,7 +3272,7 @@ extern rtx_insn *prev_nonnote_nondebug_insn_bb (rtx_insn *);\n extern rtx_insn *next_nonnote_nondebug_insn (rtx_insn *);\n extern rtx_insn *next_nonnote_nondebug_insn_bb (rtx_insn *);\n extern rtx_insn *prev_real_insn (rtx_insn *);\n-extern rtx_insn *next_real_insn (rtx);\n+extern rtx_insn *next_real_insn (rtx_insn *);\n extern rtx_insn *prev_real_nondebug_insn (rtx_insn *);\n extern rtx_insn *next_real_nondebug_insn (rtx);\n extern rtx_insn *prev_active_insn (rtx_insn *);\n@@ -3963,9 +3964,9 @@ extern void unshare_all_rtl_again (rtx_insn *);\n extern void unshare_all_rtl_in_chain (rtx_insn *);\n extern void verify_rtl_sharing (void);\n extern void add_insn (rtx_insn *);\n-extern void add_insn_before (rtx, rtx, basic_block);\n-extern void add_insn_after (rtx, rtx, basic_block);\n-extern void remove_insn (rtx);\n+extern void add_insn_before (rtx_insn *, rtx_insn *, basic_block);\n+extern void add_insn_after (rtx_insn *, rtx_insn *, basic_block);\n+extern void remove_insn (rtx_insn *);\n extern rtx_insn *emit (rtx, bool = true);\n extern void emit_insn_at_entry (rtx);\n extern rtx gen_lowpart_SUBREG (machine_mode, rtx);"}]}