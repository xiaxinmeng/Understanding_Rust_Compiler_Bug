{"sha": "d9183bb7443a3cb85cd170a2527d5b22848907bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDkxODNiYjc0NDNhM2NiODVjZDE3MGEyNTI3ZDViMjI4NDg5MDdiYg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2008-01-11T18:25:29Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2008-01-11T18:25:29Z"}, "message": "re PR fortran/34537 (ICE or wrong code for TRANSFER of constant string to character)\n\n2008-01-11  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/34537\n\t* simplify.c (gfc_simplify_transfer): Return NULL if the size\n\tof the element is unavailable and only assign character length\n\tto the result, if 'mold' is constant.\n\n2008-01-11  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/34537\n\t* gfortran.dg/transfer_simplify_8.f90: New test.\n\nFrom-SVN: r131470", "tree": {"sha": "6b3851460e79b62e49a41d6c930d14975ef4d795", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b3851460e79b62e49a41d6c930d14975ef4d795"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9183bb7443a3cb85cd170a2527d5b22848907bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9183bb7443a3cb85cd170a2527d5b22848907bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9183bb7443a3cb85cd170a2527d5b22848907bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9183bb7443a3cb85cd170a2527d5b22848907bb/comments", "author": null, "committer": null, "parents": [{"sha": "c1e3e2d94487bf594494cbb8cd32aa332124cd33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1e3e2d94487bf594494cbb8cd32aa332124cd33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1e3e2d94487bf594494cbb8cd32aa332124cd33"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "645cbdb04818c15a855b2713e1c943f7d5a7efe6", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9183bb7443a3cb85cd170a2527d5b22848907bb/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9183bb7443a3cb85cd170a2527d5b22848907bb/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d9183bb7443a3cb85cd170a2527d5b22848907bb", "patch": "@@ -1,3 +1,10 @@\n+2008-01-11  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/34537\n+\t* simplify.c (gfc_simplify_transfer): Return NULL if the size\n+\tof the element is unavailable and only assign character length\n+\tto the result, if 'mold' is constant.\n+\n 2008-01-10  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/34396"}, {"sha": "85d74a5e13a039c09f0c5da3c79528d1cadac5b2", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9183bb7443a3cb85cd170a2527d5b22848907bb/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9183bb7443a3cb85cd170a2527d5b22848907bb/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=d9183bb7443a3cb85cd170a2527d5b22848907bb", "patch": "@@ -4121,11 +4121,17 @@ gfc_simplify_transfer (gfc_expr *source, gfc_expr *mold, gfc_expr *size)\n   /* Set result character length, if needed.  Note that this needs to be\n      set even for array expressions, in order to pass this information into \n      gfc_target_interpret_expr.  */\n-  if (result->ts.type == BT_CHARACTER)\n+  if (result->ts.type == BT_CHARACTER && gfc_is_constant_expr (mold_element))\n     result->value.character.length = mold_element->value.character.length;\n   \n   /* Set the number of elements in the result, and determine its size.  */\n   result_elt_size = gfc_target_expr_size (mold_element);\n+  if (result_elt_size == 0)\n+    {\n+      gfc_free_expr (result);\n+      return NULL;\n+    }\n+\n   if (mold->expr_type == EXPR_ARRAY || mold->rank || size)\n     {\n       int result_length;"}, {"sha": "00fb000e2c8caa742e375938e2311b4534f41e56", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9183bb7443a3cb85cd170a2527d5b22848907bb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9183bb7443a3cb85cd170a2527d5b22848907bb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d9183bb7443a3cb85cd170a2527d5b22848907bb", "patch": "@@ -1,3 +1,8 @@\n+2008-01-11  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/34537\n+\t* gfortran.dg/transfer_simplify_8.f90: New test.\n+\n 2008-01-11  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* g++.dg/torture/pr34641.C: Add dg-require-visibility.  Define"}, {"sha": "75b084670ac6ab9a26bb47fc55910940999fd8c9", "filename": "gcc/testsuite/gfortran.dg/transfer_simplify_8.f90", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9183bb7443a3cb85cd170a2527d5b22848907bb/gcc%2Ftestsuite%2Fgfortran.dg%2Ftransfer_simplify_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9183bb7443a3cb85cd170a2527d5b22848907bb/gcc%2Ftestsuite%2Fgfortran.dg%2Ftransfer_simplify_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftransfer_simplify_8.f90?ref=d9183bb7443a3cb85cd170a2527d5b22848907bb", "patch": "@@ -0,0 +1,21 @@\n+! { dg-do run }\n+! { dg-options \"-O0\" }\n+! PR fortran/34537\n+! simplify_transfer used to ICE on divide by zero for cases like this,\n+! where the mold expression is a non-constant character expression.\n+!\n+! Testcase contributed by Tobias Burnus <burnus@gcc.gnu.org >\n+!\n+  character, pointer :: ptr(:)\n+  character(8) :: a\n+  allocate(ptr(9))\n+  ptr = transfer('Sample#0'//achar(0),ptr) ! Causes ICE\n+  if (any (ptr .ne. ['S','a','m','p','l','e','#','0',achar(0)])) call abort\n+  call test(a)\n+  if (a .ne. 'Sample#2') call abort\n+contains\n+  subroutine test(a)\n+    character(len=*) :: a\n+    a = transfer('Sample#2',a)\n+  end subroutine test\n+end"}]}