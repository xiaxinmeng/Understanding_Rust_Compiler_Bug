{"sha": "8634629b6f3e9a316e4ef83685e3c36068d6a0c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODYzNDYyOWI2ZjNlOWEzMTZlNGVmODM2ODVlM2MzNjA2OGQ2YTBjMQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-08-26T00:09:10Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-08-26T00:09:10Z"}, "message": "builtins.c (expand_builtin_mathfn): Rearrange so that we only return 0 for invalid argument types.\n\n\n\t* builtins.c (expand_builtin_mathfn):  Rearrange so that we only\n\treturn 0 for invalid argument types.  Instead drop through to a\n\tcall of expand_call at the bottom of function.  If op is SQRT,\n\ttry attaching a SQRT rtx as the REQ_EQUAL note of the libcall.\n\nFrom-SVN: r70792", "tree": {"sha": "267b0d3325e69e819d855522539d14770832fe00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/267b0d3325e69e819d855522539d14770832fe00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8634629b6f3e9a316e4ef83685e3c36068d6a0c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8634629b6f3e9a316e4ef83685e3c36068d6a0c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8634629b6f3e9a316e4ef83685e3c36068d6a0c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8634629b6f3e9a316e4ef83685e3c36068d6a0c1/comments", "author": null, "committer": null, "parents": [{"sha": "0961802f7eb8343c55cd29946985600f646879d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0961802f7eb8343c55cd29946985600f646879d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0961802f7eb8343c55cd29946985600f646879d3"}], "stats": {"total": 115, "additions": 83, "deletions": 32}, "files": [{"sha": "24a3f58423c63faedd631810c90f0bd012f8eed7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8634629b6f3e9a316e4ef83685e3c36068d6a0c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8634629b6f3e9a316e4ef83685e3c36068d6a0c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8634629b6f3e9a316e4ef83685e3c36068d6a0c1", "patch": "@@ -1,3 +1,10 @@\n+2003-08-25  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* builtins.c (expand_builtin_mathfn):  Rearrange so that we only\n+\treturn 0 for invalid argument types.  Instead drop through to a\n+\tcall of expand_call at the bottom of function.  If op is SQRT,\n+\ttry attaching a SQRT rtx as the REQ_EQUAL note of the libcall.\n+\n 2003-08-25  Richard Henderson  <rth@redhat.com>\n \n \t* config/ia64/ia64.c (ia64_expand_tls_address): Properly truncate"}, {"sha": "dc999f722c8f0703f232609a14683ea856cb97d4", "filename": "gcc/builtins.c", "status": "modified", "additions": 76, "deletions": 32, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8634629b6f3e9a316e4ef83685e3c36068d6a0c1/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8634629b6f3e9a316e4ef83685e3c36068d6a0c1/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=8634629b6f3e9a316e4ef83685e3c36068d6a0c1", "patch": "@@ -1565,7 +1565,7 @@ static rtx\n expand_builtin_mathfn (tree exp, rtx target, rtx subtarget)\n {\n   optab builtin_optab;\n-  rtx op0, insns;\n+  rtx op0, insns, before_call;\n   tree fndecl = get_callee_fndecl (exp);\n   tree arglist = TREE_OPERAND (exp, 1);\n   enum machine_mode mode;\n@@ -1636,49 +1636,93 @@ expand_builtin_mathfn (tree exp, rtx target, rtx subtarget)\n   /* Make a suitable register to place result in.  */\n   mode = TYPE_MODE (TREE_TYPE (exp));\n \n-  /* Before working hard, check whether the instruction is available.  */\n-  if (builtin_optab->handlers[(int) mode].insn_code == CODE_FOR_nothing)\n-    return 0;\n-  target = gen_reg_rtx (mode);\n-\n   if (! flag_errno_math || ! HONOR_NANS (mode))\n     errno_set = false;\n \n-  /* Wrap the computation of the argument in a SAVE_EXPR, as we may\n-     need to expand the argument again.  This way, we will not perform\n-     side-effects more the once.  */\n-  narg = save_expr (arg);\n-  if (narg != arg)\n+  /* Before working hard, check whether the instruction is available.  */\n+  if (builtin_optab->handlers[(int) mode].insn_code != CODE_FOR_nothing)\n     {\n-      arglist = build_tree_list (NULL_TREE, arg);\n-      exp = build_function_call_expr (fndecl, arglist);\n-    }\n+      target = gen_reg_rtx (mode);\n \n-  op0 = expand_expr (arg, subtarget, VOIDmode, 0);\n+      /* Wrap the computation of the argument in a SAVE_EXPR, as we may\n+\t need to expand the argument again.  This way, we will not perform\n+\t side-effects more the once.  */\n+      narg = save_expr (arg);\n+      if (narg != arg)\n+\t{\n+\t  arglist = build_tree_list (NULL_TREE, arg);\n+\t  exp = build_function_call_expr (fndecl, arglist);\n+\t}\n \n-  emit_queue ();\n-  start_sequence ();\n+      op0 = expand_expr (arg, subtarget, VOIDmode, 0);\n \n-  /* Compute into TARGET.\n-     Set TARGET to wherever the result comes back.  */\n-  target = expand_unop (mode, builtin_optab, op0, target, 0);\n+      emit_queue ();\n+      start_sequence ();\n \n-  /* If we were unable to expand via the builtin, stop the sequence\n-     (without outputting the insns) and call to the library function\n-     with the stabilized argument list.  */\n-  if (target == 0)\n-    {\n+      /* Compute into TARGET.\n+\t Set TARGET to wherever the result comes back.  */\n+      target = expand_unop (mode, builtin_optab, op0, target, 0);\n+\n+      if (target != 0)\n+\t{\n+\t  if (errno_set)\n+\t    expand_errno_check (exp, target);\n+\n+\t  /* Output the entire sequence.  */\n+\t  insns = get_insns ();\n+\t  end_sequence ();\n+\t  emit_insn (insns);\n+\t  return target;\n+\t}\n+\n+      /* If we were unable to expand via the builtin, stop the sequence\n+\t (without outputting the insns) and call to the library function\n+\t with the stabilized argument list.  */\n       end_sequence ();\n-      return expand_call (exp, target, target == const0_rtx);\n     }\n \n-  if (errno_set)\n-    expand_errno_check (exp, target);\n+  before_call = get_last_insn ();\n \n-  /* Output the entire sequence.  */\n-  insns = get_insns ();\n-  end_sequence ();\n-  emit_insn (insns);\n+  target = expand_call (exp, target, target == const0_rtx);\n+\n+  /* If this is a sqrt operation and we don't care about errno, try to\n+     attach a REG_EQUAL note with a SQRT rtx to the emitted libcall.\n+     This allows the semantics of the libcall to be visible to the RTL\n+     optimizers.  */\n+  if (builtin_optab == sqrt_optab && !errno_set)\n+    {\n+      /* Search backwards through the insns emitted by expand_call looking\n+\t for the instruction with the REG_RETVAL note.  */\n+      rtx last = get_last_insn ();\n+      while (last != before_call)\n+\t{\n+\t  if (find_reg_note (last, REG_RETVAL, NULL))\n+\t    {\n+\t      rtx note = find_reg_note (last, REG_EQUAL, NULL);\n+\t      /* Check that the REQ_EQUAL note is an EXPR_LIST with\n+\t\t two elements, i.e. symbol_ref(sqrt) and the operand.  */\n+\t      if (note\n+\t\t  && GET_CODE (note) == EXPR_LIST\n+\t\t  && GET_CODE (XEXP (note, 0)) == EXPR_LIST\n+\t\t  && XEXP (XEXP (note, 0), 1) != NULL_RTX\n+\t\t  && XEXP (XEXP (XEXP (note, 0), 1), 1) == NULL_RTX)\n+\t\t{\n+\t\t  rtx operand = XEXP (XEXP (XEXP (note, 0), 1), 0);\n+\t\t  /* Check operand is a register with expected mode.  */\n+\t\t  if (operand\n+\t\t      && GET_CODE (operand) == REG\n+\t\t      && GET_MODE (operand) == mode)\n+\t\t    {\n+\t\t      /* Replace the REG_EQUAL note with a SQRT rtx.  */\n+\t\t      rtx equiv = gen_rtx_SQRT (mode, operand);\n+\t\t      set_unique_reg_note (last, REG_EQUAL, equiv);\n+\t\t    }\n+\t\t}\n+\t      break;\n+\t    }\n+\t  last = PREV_INSN (last);\n+\t}\n+    }\n \n   return target;\n }"}]}