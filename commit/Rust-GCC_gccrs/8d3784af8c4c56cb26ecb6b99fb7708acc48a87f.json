{"sha": "8d3784af8c4c56cb26ecb6b99fb7708acc48a87f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQzNzg0YWY4YzRjNTZjYjI2ZWNiNmI5OWZiNzcwOGFjYzQ4YTg3Zg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-03-20T20:23:33Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-03-20T20:23:33Z"}, "message": "fold-const.c (fold): Constify \"type\".\n\n\t* fold-const.c (fold): Constify \"type\".\n\tReplace \"TREE_TYPE (t)\" with \"type\".\n\nFrom-SVN: r79753", "tree": {"sha": "236995e149531ea1a1f5604ee8e7b604539bb6ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/236995e149531ea1a1f5604ee8e7b604539bb6ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d3784af8c4c56cb26ecb6b99fb7708acc48a87f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d3784af8c4c56cb26ecb6b99fb7708acc48a87f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d3784af8c4c56cb26ecb6b99fb7708acc48a87f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d3784af8c4c56cb26ecb6b99fb7708acc48a87f/comments", "author": null, "committer": null, "parents": [{"sha": "7f5773c6921038f292a9737d9bf4dc51595b4f12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f5773c6921038f292a9737d9bf4dc51595b4f12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f5773c6921038f292a9737d9bf4dc51595b4f12"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "ae439b89369bcfe57e57a57208f6d72dfce9c6a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d3784af8c4c56cb26ecb6b99fb7708acc48a87f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d3784af8c4c56cb26ecb6b99fb7708acc48a87f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8d3784af8c4c56cb26ecb6b99fb7708acc48a87f", "patch": "@@ -1,3 +1,8 @@\n+2004-03-20  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* fold-const.c (fold): Constify \"type\".\n+\tReplace \"TREE_TYPE (t)\" with \"type\".\n+\n 2004-03-20  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* bb-reorder.c, bt-load.c, c-decl.c, cfgcleanup.c, coverage.c,"}, {"sha": "1428cb3828e325b54e5e147893290128e6cbb396", "filename": "gcc/fold-const.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d3784af8c4c56cb26ecb6b99fb7708acc48a87f/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d3784af8c4c56cb26ecb6b99fb7708acc48a87f/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=8d3784af8c4c56cb26ecb6b99fb7708acc48a87f", "patch": "@@ -5386,9 +5386,9 @@ tree\n fold (tree expr)\n {\n   const tree t = expr;\n+  const tree type = TREE_TYPE (expr);\n   tree t1 = NULL_TREE;\n   tree tem;\n-  tree type = TREE_TYPE (expr);\n   tree arg0 = NULL_TREE, arg1 = NULL_TREE;\n   enum tree_code code = TREE_CODE (t);\n   int kind = TREE_CODE_CLASS (code);\n@@ -5637,7 +5637,7 @@ fold (tree expr)\n     case FIX_TRUNC_EXPR:\n     case FIX_CEIL_EXPR:\n     case FIX_FLOOR_EXPR:\n-      if (TREE_TYPE (TREE_OPERAND (t, 0)) == TREE_TYPE (t))\n+      if (TREE_TYPE (TREE_OPERAND (t, 0)) == type)\n \treturn TREE_OPERAND (t, 0);\n \n       /* Handle cases of two conversions in a row.  */\n@@ -5646,7 +5646,7 @@ fold (tree expr)\n \t{\n \t  tree inside_type = TREE_TYPE (TREE_OPERAND (TREE_OPERAND (t, 0), 0));\n \t  tree inter_type = TREE_TYPE (TREE_OPERAND (t, 0));\n-\t  tree final_type = TREE_TYPE (t);\n+\t  tree final_type = type;\n \t  int inside_int = INTEGRAL_TYPE_P (inside_type);\n \t  int inside_ptr = POINTER_TYPE_P (inside_type);\n \t  int inside_float = FLOAT_TYPE_P (inside_type);\n@@ -5744,8 +5744,8 @@ fold (tree expr)\n       /* Convert (T)(x & c) into (T)x & (T)c, if c is an integer\n \t constants (if x has signed type, the sign bit cannot be set\n \t in c).  This folds extension into the BIT_AND_EXPR.  */\n-      if (INTEGRAL_TYPE_P (TREE_TYPE (t))\n-\t  && TREE_CODE (TREE_TYPE (t)) != BOOLEAN_TYPE\n+      if (INTEGRAL_TYPE_P (type)\n+\t  && TREE_CODE (type) != BOOLEAN_TYPE\n \t  && TREE_CODE (TREE_OPERAND (t, 0)) == BIT_AND_EXPR\n \t  && TREE_CODE (TREE_OPERAND (TREE_OPERAND (t, 0), 1)) == INTEGER_CST)\n \t{\n@@ -5754,7 +5754,7 @@ fold (tree expr)\n \t  int change = 0;\n \n \t  if (TREE_UNSIGNED (TREE_TYPE (and))\n-\t      || (TYPE_PRECISION (TREE_TYPE (t))\n+\t      || (TYPE_PRECISION (type)\n \t\t  <= TYPE_PRECISION (TREE_TYPE (and))))\n \t    change = 1;\n \t  else if (TYPE_PRECISION (TREE_TYPE (and1))\n@@ -5779,12 +5779,12 @@ fold (tree expr)\n #endif\n \t    }\n \t  if (change)\n-\t    return fold (build (BIT_AND_EXPR, TREE_TYPE (t),\n-\t\t\t\tfold_convert (TREE_TYPE (t), and0),\n-\t\t\t\tfold_convert (TREE_TYPE (t), and1)));\n+\t    return fold (build (BIT_AND_EXPR, type,\n+\t\t\t\tfold_convert (type, and0),\n+\t\t\t\tfold_convert (type, and1)));\n \t}\n \n-      tem = fold_convert_const (code, TREE_TYPE (t), arg0);\n+      tem = fold_convert_const (code, type, arg0);\n       return tem ? tem : t;\n \n     case VIEW_CONVERT_EXPR:\n@@ -6223,8 +6223,8 @@ fold (tree expr)\n \t{\n \t  /* The return value should always have\n \t     the same type as the original expression.  */\n-\t  if (TREE_TYPE (t1) != TREE_TYPE (t))\n-\t    t1 = fold_convert (TREE_TYPE (t), t1);\n+\t  if (TREE_TYPE (t1) != type)\n+\t    t1 = fold_convert (type, t1);\n \n \t  return t1;\n \t}\n@@ -7931,7 +7931,7 @@ fold (tree expr)\n \t     has the same type as the COND_EXPR.  This avoids optimizing\n \t     away \"c ? x : throw\", where the throw has a void type.  */\n \t  if (! VOID_TYPE_P (TREE_TYPE (tem))\n-\t      || VOID_TYPE_P (TREE_TYPE (t)))\n+\t      || VOID_TYPE_P (type))\n \t    return pedantic_non_lvalue (tem);\n \t  return t;\n \t}"}]}