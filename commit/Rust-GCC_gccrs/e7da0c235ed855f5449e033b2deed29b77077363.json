{"sha": "e7da0c235ed855f5449e033b2deed29b77077363", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdkYTBjMjM1ZWQ4NTVmNTQ0OWUwMzNiMmRlZWQyOWI3NzA3NzM2Mw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2014-10-13T08:19:45Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2014-10-13T08:19:45Z"}, "message": "re PR ada/63225 (ada bootstrap failure when -fno-inline in STAGE1_CFLAGS)\n\n\tPR ada/63225\n\t* uintp.adb (Vector_To_Uint): Move from here to...\n\t* uintp.ads (UI_Vector): Make public.\n\t(Vector_To_Uint): ...here.\n\nCo-Authored-By: Alan Modra <amodra@gmail.com>\n\nFrom-SVN: r216139", "tree": {"sha": "640bc17004b6aa7291a9e5977362c1d5912a3aa1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/640bc17004b6aa7291a9e5977362c1d5912a3aa1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7da0c235ed855f5449e033b2deed29b77077363", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7da0c235ed855f5449e033b2deed29b77077363", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7da0c235ed855f5449e033b2deed29b77077363", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7da0c235ed855f5449e033b2deed29b77077363/comments", "author": null, "committer": null, "parents": [{"sha": "d4f5cd5e82aca858b37d6cb927874e018bacce6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4f5cd5e82aca858b37d6cb927874e018bacce6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4f5cd5e82aca858b37d6cb927874e018bacce6a"}], "stats": {"total": 64, "additions": 36, "deletions": 28}, "files": [{"sha": "76828c7b52114d56ceebd89ef50a4e0a4d16319d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7da0c235ed855f5449e033b2deed29b77077363/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7da0c235ed855f5449e033b2deed29b77077363/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e7da0c235ed855f5449e033b2deed29b77077363", "patch": "@@ -1,3 +1,11 @@\n+2014-10-13  Eric Botcazou  <ebotcazou@adacore.com>\n+            Alan Modra  <amodra@gmail.com>\n+\n+\tPR ada/63225\n+\t* uintp.adb (Vector_To_Uint): Move from here to...\n+\t* uintp.ads (UI_Vector): Make public.\n+\t(Vector_To_Uint): ...here.\n+\n 2014-10-10  Robert Dewar  <dewar@adacore.com>\n \n \t* freeze.adb, sem_attr.adb: Minor reformatting."}, {"sha": "226c1877fca7db9fbe445a99021b2fc9481ac062", "filename": "gcc/ada/uintp.adb", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7da0c235ed855f5449e033b2deed29b77077363/gcc%2Fada%2Fuintp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7da0c235ed855f5449e033b2deed29b77077363/gcc%2Fada%2Fuintp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fuintp.adb?ref=e7da0c235ed855f5449e033b2deed29b77077363", "patch": "@@ -171,22 +171,6 @@ package body Uintp is\n    --  If Discard_Quotient is True, Quotient is set to No_Uint\n    --  If Discard_Remainder is True, Remainder is set to No_Uint\n \n-   function Vector_To_Uint\n-     (In_Vec   : UI_Vector;\n-      Negative : Boolean) return Uint;\n-   --  Functions that calculate values in UI_Vectors, call this function to\n-   --  create and return the Uint value. In_Vec contains the multiple precision\n-   --  (Base) representation of a non-negative value. Leading zeroes are\n-   --  permitted. Negative is set if the desired result is the negative of the\n-   --  given value. The result will be either the appropriate directly\n-   --  represented value, or a table entry in the proper canonical format is\n-   --  created and returned.\n-   --\n-   --  Note that Init_Operand puts a signed value in the result vector, but\n-   --  Vector_To_Uint is always presented with a non-negative value. The\n-   --  processing of signs is something that is done by the caller before\n-   --  calling Vector_To_Uint.\n-\n    ------------\n    -- Direct --\n    ------------"}, {"sha": "d76d2852704196d79f94b6020f568ce9e67ba766", "filename": "gcc/ada/uintp.ads", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7da0c235ed855f5449e033b2deed29b77077363/gcc%2Fada%2Fuintp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7da0c235ed855f5449e033b2deed29b77077363/gcc%2Fada%2Fuintp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fuintp.ads?ref=e7da0c235ed855f5449e033b2deed29b77077363", "patch": "@@ -90,6 +90,18 @@ package Uintp is\n    Uint_Minus_80  : constant Uint;\n    Uint_Minus_128 : constant Uint;\n \n+   type UI_Vector is array (Pos range <>) of Int;\n+   --  Vector containing the integer values of a Uint value\n+\n+   --  Note: An earlier version of this package used pointers of arrays of Ints\n+   --  (dynamically allocated) for the Uint type. The change leads to a few\n+   --  less natural idioms used throughout this code, but eliminates all uses\n+   --  of the heap except for the table package itself. For example, Uint\n+   --  parameters are often converted to UI_Vectors for internal manipulation.\n+   --  This is done by creating the local UI_Vector using the function N_Digits\n+   --  on the Uint to find the size needed for the vector, and then calling\n+   --  Init_Operand to copy the values out of the table into the vector.\n+\n    -----------------\n    -- Subprograms --\n    -----------------\n@@ -252,6 +264,22 @@ package Uintp is\n    --  function is used for capacity checks, and it can be one bit off\n    --  without affecting its usage.\n \n+   function Vector_To_Uint\n+     (In_Vec   : UI_Vector;\n+      Negative : Boolean) return Uint;\n+   --  Functions that calculate values in UI_Vectors, call this function to\n+   --  create and return the Uint value. In_Vec contains the multiple precision\n+   --  (Base) representation of a non-negative value. Leading zeroes are\n+   --  permitted. Negative is set if the desired result is the negative of the\n+   --  given value. The result will be either the appropriate directly\n+   --  represented value, or a table entry in the proper canonical format is\n+   --  created and returned.\n+   --\n+   --  Note that Init_Operand puts a signed value in the result vector, but\n+   --  Vector_To_Uint is always presented with a non-negative value. The\n+   --  processing of signs is something that is done by the caller before\n+   --  calling Vector_To_Uint.\n+\n    ---------------------\n    -- Output Routines --\n    ---------------------\n@@ -494,18 +522,6 @@ private\n    --  UI_Vector is defined for this purpose and some internal subprograms\n    --  used for converting from one to the other are defined.\n \n-   type UI_Vector is array (Pos range <>) of Int;\n-   --  Vector containing the integer values of a Uint value\n-\n-   --  Note: An earlier version of this package used pointers of arrays of Ints\n-   --  (dynamically allocated) for the Uint type. The change leads to a few\n-   --  less natural idioms used throughout this code, but eliminates all uses\n-   --  of the heap except for the table package itself. For example, Uint\n-   --  parameters are often converted to UI_Vectors for internal manipulation.\n-   --  This is done by creating the local UI_Vector using the function N_Digits\n-   --  on the Uint to find the size needed for the vector, and then calling\n-   --  Init_Operand to copy the values out of the table into the vector.\n-\n    type Uint_Entry is record\n       Length : Pos;\n       --  Length of entry in Udigits table in digits (i.e. in words)"}]}