{"sha": "42f28de90bc251f93ef1bdd79deee7d9ae64931b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDJmMjhkZTkwYmMyNTFmOTNlZjFiZGQ3OWRlZWU3ZDlhZTY0OTMxYg==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "2001-07-25T14:23:08Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2001-07-25T14:23:08Z"}, "message": "ssa-ccp.c (visit_expression): Handle CALL_INSNs that can throw an exception.\n\n        * ssa-ccp.c (visit_expression): Handle CALL_INSNs that can\n        throw an exception.\n        (visit_expression): When attempting to simplify an expression,\n        retrieve any modes for arguments before they are simplified\n        to constants.\n\nFrom-SVN: r44355", "tree": {"sha": "a76936e9956590f6a1387a19eddbe8b2d442ce65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a76936e9956590f6a1387a19eddbe8b2d442ce65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42f28de90bc251f93ef1bdd79deee7d9ae64931b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42f28de90bc251f93ef1bdd79deee7d9ae64931b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42f28de90bc251f93ef1bdd79deee7d9ae64931b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42f28de90bc251f93ef1bdd79deee7d9ae64931b/comments", "author": null, "committer": null, "parents": [{"sha": "7c2b017c9a5f9a81dcf6b2b2047fd10165d19420", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c2b017c9a5f9a81dcf6b2b2047fd10165d19420", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c2b017c9a5f9a81dcf6b2b2047fd10165d19420"}], "stats": {"total": 47, "additions": 41, "deletions": 6}, "files": [{"sha": "e617ed64faa9caaabe717e5e97e40a2e2a97b887", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42f28de90bc251f93ef1bdd79deee7d9ae64931b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42f28de90bc251f93ef1bdd79deee7d9ae64931b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=42f28de90bc251f93ef1bdd79deee7d9ae64931b", "patch": "@@ -1,3 +1,11 @@\n+Wed Jul 25 08:25:01 2001  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* ssa-ccp.c (visit_expression): Handle CALL_INSNs that can\n+\tthrow an exception.\n+\t(visit_expression): When attempting to simplify an expression,\n+\tretrieve any modes for arguments before they are simplified\n+\tto constants.\n+\n 2001-07-25  Andrew MacLeod  <amacleod@redhat.com>\n \t    Janis Johnson  <janis@us.ibm.com>\n "}, {"sha": "1c163570e657207bfbf36623d3465205b5fe6222", "filename": "gcc/ssa-ccp.c", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42f28de90bc251f93ef1bdd79deee7d9ae64931b/gcc%2Fssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42f28de90bc251f93ef1bdd79deee7d9ae64931b/gcc%2Fssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fssa-ccp.c?ref=42f28de90bc251f93ef1bdd79deee7d9ae64931b", "patch": "@@ -246,6 +246,30 @@ visit_expression (insn, block)\n {\n   rtx src, dest, set;\n \n+\n+  /* Ugh.  CALL_INSNs may end a basic block and have multiple edges\n+     leading out from them.\n+\n+     Mark all the outgoing edges as executable, then fall into the\n+     normal processing below.  */\n+  if (GET_CODE (insn) == CALL_INSN && block->end == insn)\n+    {\n+      edge curredge;\n+\n+      for (curredge = block->succ; curredge;\n+\t   curredge = curredge->succ_next)\n+\t{\n+\t  int index = EIE (curredge->src, curredge->dest);\n+\n+\t  if (TEST_BIT (executable_edges, index))\n+\t    continue;\n+\n+\t  SET_BIT (executable_edges, index);\n+\t  edge_info[index] = flow_edges;\n+\t  flow_edges = curredge;\n+\t}\n+    }\n+\n   set = single_set (insn);\n   if (! set)\n     {\n@@ -450,7 +474,13 @@ visit_expression (insn, block)\n \t\t  defs_to_undefined (insn);\n \t\t  break;\n \t\t}\n-\t\t\n+\n+\t      /* Determine the mode for the operation before we simplify\n+\t\t our arguments to constants.  */\n+\t      mode = GET_MODE (src0);\n+\t      if (mode == VOIDmode)\n+\t\tmode = GET_MODE (src1);\n+\n \t      /* Simplify source operands to whatever known values they\n \t\t may have.  */\n \t      if (GET_CODE (src0) == REG\n@@ -463,10 +493,6 @@ visit_expression (insn, block)\n \n \t      /* See if the simplifier can determine if this operation\n \t\t computes a constant value.  */\n-\t      mode = GET_MODE (src0);\n-\t      if (mode == VOIDmode)\n-\t\tmode = GET_MODE (src1);\n-\n \t      simplified = simplify_relational_operation (GET_CODE (src),\n \t\t\t\t\t\t\t  mode, src0, src1);\n \t      break;\n@@ -476,6 +502,7 @@ visit_expression (insn, block)\n \t  case '1':\n \t    {\n \t      rtx src0 = XEXP (src, 0);\n+\t      enum machine_mode mode0 = GET_MODE (src0);\n \n \t      /* If the operand is undefined, then the result is undefined.  */\n \t      if (GET_CODE (src0) == REG\n@@ -496,7 +523,7 @@ visit_expression (insn, block)\n \t      simplified = simplify_unary_operation (GET_CODE (src),\n \t\t\t\t\t\t     GET_MODE (src),\n \t\t\t\t\t\t     src0,\n-\t\t\t\t\t\t     GET_MODE (src0));\n+\t\t\t\t\t\t     mode0);\n \t      break;\n \t    }\n "}]}