{"sha": "0600d9bc835c519013e43a91d434284b7dc868e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDYwMGQ5YmM4MzVjNTE5MDEzZTQzYTkxZDQzNDI4NGI3ZGM4NjhlNQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2007-06-06T10:47:30Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-06-06T10:47:30Z"}, "message": "sinput-l.ads, [...]: implement a new pragma No_Body\n\n2007-04-20  Robert Dewar  <dewar@adacore.com>\n\n\t* sinput-l.ads, sinput-l.adb: implement a new pragma No_Body\n\nFrom-SVN: r125462", "tree": {"sha": "d398210e4f92106bb31f0bcbe95e1f72c3e41539", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d398210e4f92106bb31f0bcbe95e1f72c3e41539"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0600d9bc835c519013e43a91d434284b7dc868e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0600d9bc835c519013e43a91d434284b7dc868e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0600d9bc835c519013e43a91d434284b7dc868e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0600d9bc835c519013e43a91d434284b7dc868e5/comments", "author": null, "committer": null, "parents": [{"sha": "ff6821917192a0e459c2b050723a2a66d4b2cb8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff6821917192a0e459c2b050723a2a66d4b2cb8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff6821917192a0e459c2b050723a2a66d4b2cb8f"}], "stats": {"total": 42, "additions": 39, "deletions": 3}, "files": [{"sha": "03706f1c7648ae0a6f164a4ebce8754e0ce21c94", "filename": "gcc/ada/sinput-l.adb", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0600d9bc835c519013e43a91d434284b7dc868e5/gcc%2Fada%2Fsinput-l.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0600d9bc835c519013e43a91d434284b7dc868e5/gcc%2Fada%2Fsinput-l.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput-l.adb?ref=0600d9bc835c519013e43a91d434284b7dc868e5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -29,7 +29,6 @@ with Atree;    use Atree;\n with Debug;    use Debug;\n with Einfo;    use Einfo;\n with Errout;   use Errout;\n-with Namet;    use Namet;\n with Opt;      use Opt;\n with Osint;    use Osint;\n with Output;   use Output;\n@@ -38,6 +37,7 @@ with Prepcomp; use Prepcomp;\n with Scans;    use Scans;\n with Scn;      use Scn;\n with Sinfo;    use Sinfo;\n+with Snames;   use Snames;\n with System;   use System;\n \n with Unchecked_Conversion;\n@@ -641,6 +641,37 @@ package body Sinput.L is\n       Prep_Buffer (Prep_Buffer_Last) := C;\n    end Put_Char_In_Prep_Buffer;\n \n+   -----------------------------------\n+   -- Source_File_Is_Pragma_No_Body --\n+   -----------------------------------\n+\n+   function Source_File_Is_No_Body (X : Source_File_Index) return Boolean is\n+   begin\n+      Initialize_Scanner (No_Unit, X);\n+\n+      if Token /= Tok_Pragma then\n+         return False;\n+      end if;\n+\n+      Scan; -- past pragma\n+\n+      if Token /= Tok_Identifier\n+        or else Chars (Token_Node) /= Name_No_Body\n+      then\n+         return False;\n+      end if;\n+\n+      Scan; -- past No_Body\n+\n+      if Token /= Tok_Semicolon then\n+         return False;\n+      end if;\n+\n+      Scan; -- past semicolon\n+\n+      return Token = Tok_EOF;\n+   end Source_File_Is_No_Body;\n+\n    ----------------------------\n    -- Source_File_Is_Subunit --\n    ----------------------------"}, {"sha": "4fb6ba7d2e469656fa349b20fabaca322ecca241", "filename": "gcc/ada/sinput-l.ads", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0600d9bc835c519013e43a91d434284b7dc868e5/gcc%2Fada%2Fsinput-l.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0600d9bc835c519013e43a91d434284b7dc868e5/gcc%2Fada%2Fsinput-l.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput-l.ads?ref=0600d9bc835c519013e43a91d434284b7dc868e5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -65,6 +65,11 @@ package Sinput.L is\n    --  Called on completing the parsing of a source file. This call completes\n    --  the source file table entry for the current source file.\n \n+   function Source_File_Is_No_Body (X : Source_File_Index) return Boolean;\n+   --  Returns true if the designated source file contains pragma No_Body;\n+   --  and no other tokens. If the source file contains anything other than\n+   --  this sequence of three tokens, then False is returned.\n+\n    function Source_File_Is_Subunit (X : Source_File_Index) return Boolean;\n    --  This function determines if a source file represents a subunit. It\n    --  works by scanning for the first compilation unit token, and returning"}]}