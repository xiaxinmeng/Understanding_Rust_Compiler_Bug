{"sha": "9845b7b45621e3833aee47276cb111e43be0e48b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg0NWI3YjQ1NjIxZTM4MzNhZWU0NzI3NmNiMTExZTQzYmUwZTQ4Yg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-07-07T20:33:12Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-07-07T20:33:12Z"}, "message": "c++: wrong pretty printing of nested type [PR95303]\n\nIn the testcase below, we pretty print the nested type A<int>::B as\nA<int>::B<int> because we don't check whether B is itself a class\ntemplate before printing the innermost set of template arguments from\nB's TEMPLATE_INFO (which in this case belong to A).  This patch fixes\nthis by checking PRIMARY_TEMPLATE_P beforehand.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/95303\n\t* cxx-pretty-print.c (pp_cxx_unqualified_id): Check\n\tPRIMARY_TEMPLATE_P before printing the innermost template\n\targuments.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/95303\n\t* g++.dg/concepts/diagnostic14.C: New test.", "tree": {"sha": "f8ff41d0207995a8ba934f42c552e8039214601e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8ff41d0207995a8ba934f42c552e8039214601e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9845b7b45621e3833aee47276cb111e43be0e48b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9845b7b45621e3833aee47276cb111e43be0e48b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9845b7b45621e3833aee47276cb111e43be0e48b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9845b7b45621e3833aee47276cb111e43be0e48b/comments", "author": null, "committer": null, "parents": [{"sha": "7126583af5d29235584b51b3b05eeaba2adef024", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7126583af5d29235584b51b3b05eeaba2adef024", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7126583af5d29235584b51b3b05eeaba2adef024"}], "stats": {"total": 49, "additions": 43, "deletions": 6}, "files": [{"sha": "263f225a492e27a5b103430f675c2b9499d98b2d", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9845b7b45621e3833aee47276cb111e43be0e48b/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9845b7b45621e3833aee47276cb111e43be0e48b/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=9845b7b45621e3833aee47276cb111e43be0e48b", "patch": "@@ -173,12 +173,13 @@ pp_cxx_unqualified_id (cxx_pretty_printer *pp, tree t)\n     case UNBOUND_CLASS_TEMPLATE:\n       pp_cxx_unqualified_id (pp, TYPE_NAME (t));\n       if (tree ti = TYPE_TEMPLATE_INFO_MAYBE_ALIAS (t))\n-\t{\n-\t  pp_cxx_begin_template_argument_list (pp);\n-\t  tree args = INNERMOST_TEMPLATE_ARGS (TI_ARGS (ti));\n-\t  pp_cxx_template_argument_list (pp, args);\n-\t  pp_cxx_end_template_argument_list (pp);\n-\t}\n+\tif (PRIMARY_TEMPLATE_P (TI_TEMPLATE (ti)))\n+\t  {\n+\t    pp_cxx_begin_template_argument_list (pp);\n+\t    tree args = INNERMOST_TEMPLATE_ARGS (TI_ARGS (ti));\n+\t    pp_cxx_template_argument_list (pp, args);\n+\t    pp_cxx_end_template_argument_list (pp);\n+\t  }\n       break;\n \n     case BIT_NOT_EXPR:"}, {"sha": "ec2b68c4a3c3bb41803f82786273e5f470836452", "filename": "gcc/testsuite/g++.dg/concepts/diagnostic14.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9845b7b45621e3833aee47276cb111e43be0e48b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9845b7b45621e3833aee47276cb111e43be0e48b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic14.C?ref=9845b7b45621e3833aee47276cb111e43be0e48b", "patch": "@@ -0,0 +1,36 @@\n+// PR c++/95303\n+// { dg-do compile { target c++20 } }\n+\n+template<class>\n+struct A {\n+    struct B {};\n+};\n+\n+template<class T>\n+  requires __is_same(T, char)\n+struct A<T> {\n+    struct B {};\n+};\n+\n+template<>\n+  struct A<bool> {\n+    struct B {};\n+  };\n+\n+template<class T>\n+concept C = requires (T&& t) { // { dg-message \"\\\\\\[with T = A<int>::B\\\\\\]\" }\n+    t.a;\n+};\n+static_assert(C<A<int>::B>); // { dg-error \"failed\" }\n+\n+template<class T>\n+concept D = requires (T&& t) { // { dg-message \"\\\\\\[with T = A<char>::B\\\\\\]\" }\n+    t.a;\n+};\n+static_assert(D<A<char>::B>); // { dg-error \"failed\" }\n+\n+template<class T>\n+concept E = requires (T&& t) { // { dg-message \"\\\\\\[with T = A<bool>::B\\\\\\]\" }\n+    t.a;\n+};\n+static_assert(E<A<bool>::B>); // { dg-error \"failed\" }"}]}