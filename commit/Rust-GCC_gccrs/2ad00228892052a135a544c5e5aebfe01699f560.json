{"sha": "2ad00228892052a135a544c5e5aebfe01699f560", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFkMDAyMjg4OTIwNTJhMTM1YTU0NGM1ZTVhZWJmZTAxNjk5ZjU2MA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-04-12T16:07:51Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-04-12T16:07:51Z"}, "message": "stdio_filebuf.h (stdio_filebuf::stdio_filebuf(...), ...): _M_buf_size_opt == 0 means only...\n\n2003-04-12  Paolo Carlini  <pcarlini at unitus dot it>\n\n\t* include/ext/stdio_filebuf.h\n\t(stdio_filebuf::stdio_filebuf(int, openmode, bool, size_t),\n\tstdio_filebuf::stdio_filebuf(__c_file*, openmode, size_t):\n\t_M_buf_size_opt == 0 means only \"not to use an allocated buffer\"\n\tsince a stack-based buffer is used for small values of the size_t\n\tparameter.\n\t* include/bits/fstream.tcc (basic_filebuf::_M_really_overflow).\n\tIf _M_buf_size != 0 flush out the buffer (any kind, stack-based too).\n\t* testsuite/ext/stdio_filebuf_2.cc: New testfile.\n\nFrom-SVN: r65513", "tree": {"sha": "7308d635bd6e70b83b04738f38de6e17824c0ed9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7308d635bd6e70b83b04738f38de6e17824c0ed9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ad00228892052a135a544c5e5aebfe01699f560", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ad00228892052a135a544c5e5aebfe01699f560", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ad00228892052a135a544c5e5aebfe01699f560", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ad00228892052a135a544c5e5aebfe01699f560/comments", "author": null, "committer": null, "parents": [{"sha": "96cd90694f7fb6a803648bf705858c94ca9a84df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96cd90694f7fb6a803648bf705858c94ca9a84df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96cd90694f7fb6a803648bf705858c94ca9a84df"}], "stats": {"total": 79, "additions": 76, "deletions": 3}, "files": [{"sha": "65197a2e7eb5260dccf0947ce6126f799104d41c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ad00228892052a135a544c5e5aebfe01699f560/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ad00228892052a135a544c5e5aebfe01699f560/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2ad00228892052a135a544c5e5aebfe01699f560", "patch": "@@ -1,3 +1,15 @@\n+2003-04-12  Paolo Carlini  <pcarlini at unitus dot it>\n+\n+\t* include/ext/stdio_filebuf.h\n+\t(stdio_filebuf::stdio_filebuf(int, openmode, bool, size_t),\n+\tstdio_filebuf::stdio_filebuf(__c_file*, openmode, size_t):\n+\t_M_buf_size_opt == 0 only means \"not to use an allocated buffer\"\n+\tsince a stack-based buffer is used for small values of the size_t\n+\tparameter.\n+\t* include/bits/fstream.tcc (basic_filebuf::_M_really_overflow).\n+\tIf _M_buf_size != 0 flush out the buffer (any kind, stack-based too).\n+\t* testsuite/ext/stdio_filebuf_2.cc: New testfile.\n+\n 2003-04-12  Paolo Carlini  <pcarlini@unitus.it>\n \n \tPR libstdc++/9533"}, {"sha": "c4481bab4f895ea3335875ba819643a162074864", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ad00228892052a135a544c5e5aebfe01699f560/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ad00228892052a135a544c5e5aebfe01699f560/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=2ad00228892052a135a544c5e5aebfe01699f560", "patch": "@@ -355,7 +355,7 @@ namespace std\n     {\n       int_type __ret = traits_type::eof();\n       bool __testput = this->_M_out_cur && this->_M_out_beg < this->_M_out_lim;\n-      bool __testunbuffered = _M_file.is_open() && !this->_M_buf_size_opt;\n+      bool __testunbuffered = _M_file.is_open() && !this->_M_buf_size;\n       // Sync with stdio.\n       bool __sync = this->_M_buf_size <= 1;\n "}, {"sha": "b15d8d88a6885a9071d46b9215cb2b582fda94fb", "filename": "libstdc++-v3/include/ext/stdio_filebuf.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ad00228892052a135a544c5e5aebfe01699f560/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_filebuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ad00228892052a135a544c5e5aebfe01699f560/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_filebuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_filebuf.h?ref=2ad00228892052a135a544c5e5aebfe01699f560", "patch": "@@ -126,7 +126,7 @@ namespace __gnu_cxx\n \t  this->_M_mode = __mode;\n \t  if (__size > 0 && __size < 4)\n \t    {\n-\t      // Specify unbuffered.\n+\t      // Specify not to use an allocated buffer.\n \t      this->_M_buf = _M_unbuf;\n \t      this->_M_buf_size = __size;\n \t      this->_M_buf_size_opt = 0;\n@@ -151,7 +151,7 @@ namespace __gnu_cxx\n \t  this->_M_mode = __mode;\n \t  if (__size > 0 && __size < 4)\n \t    {\n-\t      // Specify unbuffered.\n+\t      // Specify not to use an allocated buffer.\n \t      this->_M_buf = _M_unbuf;\n \t      this->_M_buf_size = __size;\n \t      this->_M_buf_size_opt = 0;"}, {"sha": "b4b30c65c93ab727ae8f6240235c9c9050e1db83", "filename": "libstdc++-v3/testsuite/ext/stdio_filebuf_2.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ad00228892052a135a544c5e5aebfe01699f560/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_filebuf_2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ad00228892052a135a544c5e5aebfe01699f560/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_filebuf_2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_filebuf_2.cc?ref=2ad00228892052a135a544c5e5aebfe01699f560", "patch": "@@ -0,0 +1,61 @@\n+// 2003-04-12  Paolo Carlini  <pcarlini at unitus dot it>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// stdio_filebuf.h\n+\n+#include <ext/stdio_filebuf.h>\n+#include <cstdio>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+// Small stack-based buffers (i.e., using _M_unbuf) were not flushed\n+// out by _M_really_overflow upon overflow.\n+void test01()\n+{\n+  \n+  using namespace std;\n+  bool test = true;\n+\n+  const char* name = \"tmp_file1\";\n+  FILE* file = fopen(name, \"w\");\n+  {\n+    using namespace __gnu_cxx;\n+    \n+    // One char big stack-based buffer.\n+    stdio_filebuf<char> sbuf(file, ios_base::out, 1); \n+    sbuf.sputc('T');\n+    sbuf.sputc('S');\n+  }\n+  fclose(file);\n+\n+  filebuf fbuf;\n+  fbuf.open(name, ios_base::in);\n+  char buf[10];\n+  streamsize n = fbuf.sgetn(buf, sizeof(buf));\t\n+  fbuf.close();\n+  \n+  VERIFY( n == 2 );\n+  VERIFY( !memcmp(buf, \"TS\", 2) );\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}]}