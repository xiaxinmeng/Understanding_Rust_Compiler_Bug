{"sha": "2133e773ab855af036de5f6f29eae30d43f1422b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjEzM2U3NzNhYjg1NWFmMDM2ZGU1ZjZmMjllYWUzMGQ0M2YxNDIyYg==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2018-08-25T12:58:02Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-12-01T14:41:09Z"}, "message": "configury : Fix LEB128 support for non-GNU assemblers.\n\nThe current configuration test for LEB128 support in the assembler is\n(a) specific to GNU assemblers and (b) only checks that the directives\nare accepted, not that they give correct output.\n\nThe patch extends the asm test to cover one failure case present in\nassemblers based off an older version of GAS (where a 64 bit value with\nthe MSB set presented to a .uleb128 directive causes a fail).\n\nThe test is now generalized such that it does not make use of any\nspecific test for assembler source/version, but checks that the output\nis as expected.  We cater for scanning the object with objdump (either\nbinutils or LLVM) or Darwin otool.\n\ngcc/ChangeLog:\n\n\t* configure.ac (check leb128 support): Check that assemblers both\n\taccept the LEB128 directives and also give the expected output.\n\tAdd a test for uleb128 with the MSB set for a 64 bit value.\n\t* configure: Regenerated.", "tree": {"sha": "7f69f26c3963b5b6453d61959db14e87b9eb95e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f69f26c3963b5b6453d61959db14e87b9eb95e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2133e773ab855af036de5f6f29eae30d43f1422b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2133e773ab855af036de5f6f29eae30d43f1422b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2133e773ab855af036de5f6f29eae30d43f1422b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2133e773ab855af036de5f6f29eae30d43f1422b/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6aa12274007bccbae2691a9d336c37fe167bb535", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aa12274007bccbae2691a9d336c37fe167bb535", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6aa12274007bccbae2691a9d336c37fe167bb535"}], "stats": {"total": 84, "additions": 46, "deletions": 38}, "files": [{"sha": "5206f0d93b29ba0355e5c9e33848bea2da6509a8", "filename": "gcc/configure", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2133e773ab855af036de5f6f29eae30d43f1422b/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2133e773ab855af036de5f6f29eae30d43f1422b/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=2133e773ab855af036de5f6f29eae30d43f1422b", "patch": "@@ -23953,6 +23953,8 @@ _ACEOF\n \n \n # Check if we have .[us]leb128, and support symbol arithmetic with it.\n+# Older versions of GAS and some non-GNU assemblers, have a bugs handling\n+# these directives, even when they appear to accept them.\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for .sleb128 and .uleb128\" >&5\n $as_echo_n \"checking assembler for .sleb128 and .uleb128... \" >&6; }\n if ${gcc_cv_as_leb128+:} false; then :\n@@ -23970,30 +23972,32 @@ fi\n L1:\n \t.uleb128 1280\n \t.sleb128 -1010\n-L2:' > conftest.s\n+L2:\n+\t.uleb128 0x8000000000000000\n+' > conftest.s\n     if { ac_try='$gcc_cv_as $gcc_cv_as_flags  -o conftest.o conftest.s >&5'\n   { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n   $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n   test $ac_status = 0; }; }\n     then\n-\t# GAS versions before 2.11 do not support uleb128,\n-  # despite appearing to.\n-  # ??? There exists an elf-specific test that will crash\n-  # the assembler.  Perhaps it's better to figure out whether\n-  # arbitrary sections are supported and try the test.\n-  as_ver=`$gcc_cv_as --version 2>/dev/null | sed 1q`\n-  if echo \"$as_ver\" | grep GNU > /dev/null; then\n-    as_vers=`echo $as_ver | sed -n \\\n-\t-e 's,^.*[\t ]\\([0-9][0-9]*\\.[0-9][0-9]*.*\\)$,\\1,p'`\n-    as_major=`expr \"$as_vers\" : '\\([0-9]*\\)'`\n-    as_minor=`expr \"$as_vers\" : '[0-9]*\\.\\([0-9]*\\)'`\n-    if test $as_major -eq 2 && test $as_minor -lt 11\n-    then :\n-    else gcc_cv_as_leb128=yes\n-    fi\n+\n+if test \"x$gcc_cv_objdump\" != x; then\n+  if $gcc_cv_objdump -s conftest.o 2>/dev/null \\\n+     | grep '04800a8e 78808080 80808080 808001' >/dev/null; then\n+    gcc_cv_as_leb128=yes\n+  fi\n+elif test \"x$gcc_cv_otool\" != x; then\n+  if $gcc_cv_otool -d conftest.o 2>/dev/null \\\n+     | grep '04 80 0a 8e 78 80 80 80 80 80 80 80 80 80 01' >/dev/null; then\n+    gcc_cv_as_leb128=yes\n   fi\n+else\n+  # play safe, assume the assembler is broken.\n+  :\n+fi\n+\n     else\n       echo \"configure: failed program was\" >&5\n       cat conftest.s >&5"}, {"sha": "ded124cb07f25e972fc04b107b6d5edd3869c274", "filename": "gcc/configure.ac", "status": "modified", "additions": 26, "deletions": 22, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2133e773ab855af036de5f6f29eae30d43f1422b/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2133e773ab855af036de5f6f29eae30d43f1422b/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=2133e773ab855af036de5f6f29eae30d43f1422b", "patch": "@@ -3072,34 +3072,38 @@ AC_MSG_RESULT($gcc_cv_ld_ro_rw_mix)\n gcc_AC_INITFINI_ARRAY\n \n # Check if we have .[us]leb128, and support symbol arithmetic with it.\n+# Older versions of GAS and some non-GNU assemblers, have a bugs handling\n+# these directives, even when they appear to accept them.\n gcc_GAS_CHECK_FEATURE([.sleb128 and .uleb128], gcc_cv_as_leb128,\n-  [elf,2,11,0],,\n+ [elf,2,11,0],,\n [\t.data\n \t.uleb128 L2 - L1\n L1:\n \t.uleb128 1280\n \t.sleb128 -1010\n-L2:],\n-[[# GAS versions before 2.11 do not support uleb128,\n-  # despite appearing to.\n-  # ??? There exists an elf-specific test that will crash\n-  # the assembler.  Perhaps it's better to figure out whether\n-  # arbitrary sections are supported and try the test.\n-  as_ver=`$gcc_cv_as --version 2>/dev/null | sed 1q`\n-  if echo \"$as_ver\" | grep GNU > /dev/null; then\n-    as_vers=`echo $as_ver | sed -n \\\n-\t-e 's,^.*[\t ]\\([0-9][0-9]*\\.[0-9][0-9]*.*\\)$,\\1,p'`\n-    as_major=`expr \"$as_vers\" : '\\([0-9]*\\)'`\n-    as_minor=`expr \"$as_vers\" : '[0-9]*\\.\\([0-9]*\\)'`\n-    if test $as_major -eq 2 && test $as_minor -lt 11\n-    then :\n-    else gcc_cv_as_leb128=yes\n-    fi\n-  fi]],\n-  [AC_DEFINE(HAVE_AS_LEB128, 1,\n-    [Define if your assembler supports .sleb128 and .uleb128.])],\n-  [AC_DEFINE(HAVE_AS_LEB128, 0,\n-    [Define if your assembler supports .sleb128 and .uleb128.])])\n+L2:\n+\t.uleb128 0x8000000000000000\n+],\n+[[\n+if test \"x$gcc_cv_objdump\" != x; then\n+  if $gcc_cv_objdump -s conftest.o 2>/dev/null \\\n+     | grep '04800a8e 78808080 80808080 808001' >/dev/null; then\n+    gcc_cv_as_leb128=yes\n+  fi\n+elif test \"x$gcc_cv_otool\" != x; then\n+  if $gcc_cv_otool -d conftest.o 2>/dev/null \\\n+     | grep '04 80 0a 8e 78 80 80 80 80 80 80 80 80 80 01' >/dev/null; then\n+    gcc_cv_as_leb128=yes\n+  fi\n+else\n+  # play safe, assume the assembler is broken.\n+  :\n+fi\n+]],\n+ [AC_DEFINE(HAVE_AS_LEB128, 1,\n+   [Define if your assembler supports .sleb128 and .uleb128.])],\n+ [AC_DEFINE(HAVE_AS_LEB128, 0,\n+   [Define if your assembler supports .sleb128 and .uleb128.])])\n \n # Determine if an .eh_frame section is read-only.\n gcc_fn_eh_frame_ro () {"}]}