{"sha": "5294dfe7dce7a58fbaf2131c7589d115008ebf0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI5NGRmZTdkY2U3YTU4ZmJhZjIxMzFjNzU4OWQxMTUwMDhlYmYwZQ==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-01-21T17:04:14Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-01-26T11:59:39Z"}, "message": "Remove TyTy::ParamType this was wrongly used to represent FunctionParams\n\nTyTy::ParamType is meant to be used to represent Generic Types which is\nnot handled yet as part of this current milestone.", "tree": {"sha": "04ea7976bb99c19de924eab28310a913434d5d70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04ea7976bb99c19de924eab28310a913434d5d70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5294dfe7dce7a58fbaf2131c7589d115008ebf0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5294dfe7dce7a58fbaf2131c7589d115008ebf0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5294dfe7dce7a58fbaf2131c7589d115008ebf0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5294dfe7dce7a58fbaf2131c7589d115008ebf0e/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be371b9f49e0c4fd7752cad6708fed8b1f2719a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be371b9f49e0c4fd7752cad6708fed8b1f2719a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be371b9f49e0c4fd7752cad6708fed8b1f2719a3"}], "stats": {"total": 315, "additions": 72, "deletions": 243}, "files": [{"sha": "df29e363e0afddf1fea603291c7c46b256f70425", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 5, "deletions": 51, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5294dfe7dce7a58fbaf2131c7589d115008ebf0e/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5294dfe7dce7a58fbaf2131c7589d115008ebf0e/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=5294dfe7dce7a58fbaf2131c7589d115008ebf0e", "patch": "@@ -26,6 +26,7 @@\n #include \"rust-backend.h\"\n #include \"rust-compile-tyty.h\"\n #include \"rust-ast-full.h\"\n+#include \"rust-hir-full.h\"\n \n namespace Rust {\n namespace Compile {\n@@ -227,8 +228,6 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n \n   void visit (TyTy::StructFieldType &type) override { gcc_unreachable (); }\n \n-  void visit (TyTy::ParamType &type) override { gcc_unreachable (); }\n-\n   void visit (TyTy::FnType &type) override\n   {\n     Backend::Btyped_identifier receiver;\n@@ -244,14 +243,14 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n \t  ctx->get_mappings ()->lookup_location (hir_type->get_ref ())));\n       }\n \n-    for (size_t i = 0; i < type.num_params (); i++)\n+    for (auto &param_pair : type.get_params ())\n       {\n-\tauto param_tyty = type.param_at (i);\n+\tauto param_tyty = param_pair.second;\n \tauto compiled_param_type\n-\t  = TyTyResolveCompile::compile (ctx, param_tyty->get_base_type ());\n+\t  = TyTyResolveCompile::compile (ctx, param_tyty);\n \n \tauto compiled_param = Backend::Btyped_identifier (\n-\t  param_tyty->get_identifier (), compiled_param_type,\n+\t  param_pair.first->as_string (), compiled_param_type,\n \t  ctx->get_mappings ()->lookup_location (param_tyty->get_ref ()));\n \n \tparameters.push_back (compiled_param);\n@@ -351,51 +350,6 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n   ::Btype *translated;\n };\n \n-class TyTyCompileParam : public TyTy::TyVisitor\n-{\n-public:\n-  static ::Bvariable *compile (Context *ctx, Bfunction *fndecl,\n-\t\t\t       TyTy::TyBase *ty)\n-  {\n-    TyTyCompileParam compiler (ctx, fndecl);\n-    ty->accept_vis (compiler);\n-    rust_assert (compiler.translated != nullptr);\n-    return compiler.translated;\n-  }\n-\n-  ~TyTyCompileParam () {}\n-\n-  void visit (TyTy::UnitType &type) override { gcc_unreachable (); }\n-  void visit (TyTy::InferType &type) override { gcc_unreachable (); }\n-  void visit (TyTy::StructFieldType &type) override { gcc_unreachable (); }\n-  void visit (TyTy::ADTType &type) override { gcc_unreachable (); }\n-  void visit (TyTy::FnType &type) override { gcc_unreachable (); }\n-  void visit (TyTy::ArrayType &type) override { gcc_unreachable (); }\n-  void visit (TyTy::BoolType &type) override { gcc_unreachable (); }\n-  void visit (TyTy::IntType &type) override { gcc_unreachable (); }\n-  void visit (TyTy::UintType &type) override { gcc_unreachable (); }\n-  void visit (TyTy::FloatType &type) override { gcc_unreachable (); }\n-  void visit (TyTy::ErrorType &type) override { gcc_unreachable (); }\n-\n-  void visit (TyTy::ParamType &type) override\n-  {\n-    auto btype = TyTyResolveCompile::compile (ctx, type.get_base_type ());\n-    bool tree_addressable = false;\n-    translated = ctx->get_backend ()->parameter_variable (\n-      fndecl, type.get_identifier (), btype, tree_addressable,\n-      ctx->get_mappings ()->lookup_location (type.get_ref ()));\n-  }\n-\n-private:\n-  TyTyCompileParam (Context *ctx, ::Bfunction *fndecl)\n-    : ctx (ctx), fndecl (fndecl), translated (nullptr)\n-  {}\n-\n-  Context *ctx;\n-  ::Bfunction *fndecl;\n-  ::Bvariable *translated;\n-};\n-\n } // namespace Compile\n } // namespace Rust\n "}, {"sha": "bf899d81036a5f5a226056019df2a055731b6d30", "filename": "gcc/rust/backend/rust-compile-item.h", "status": "modified", "additions": 30, "deletions": 9, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5294dfe7dce7a58fbaf2131c7589d115008ebf0e/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5294dfe7dce7a58fbaf2131c7589d115008ebf0e/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-item.h?ref=5294dfe7dce7a58fbaf2131c7589d115008ebf0e", "patch": "@@ -127,14 +127,21 @@ class CompileItem : public HIRCompileBase\n \t  return;\n       }\n \n-    TyTy::TyBase *fntype;\n+    TyTy::TyBase *fntype_tyty;\n     if (!ctx->get_tyctx ()->lookup_type (function.get_mappings ().get_hirid (),\n-\t\t\t\t\t &fntype))\n+\t\t\t\t\t &fntype_tyty))\n       {\n \trust_fatal_error (function.locus, \"failed to lookup function type\");\n \treturn;\n       }\n \n+    if (fntype_tyty->get_kind () != TyTy::TypeKind::FNDEF)\n+      {\n+\trust_error_at (function.get_locus (), \"invalid TyTy for function item\");\n+\treturn;\n+      }\n+\n+    TyTy::FnType *fntype = (TyTy::FnType *) fntype_tyty;\n     // convert to the actual function type\n     ::Btype *compiled_fn_type = TyTyResolveCompile::compile (ctx, fntype);\n \n@@ -159,17 +166,31 @@ class CompileItem : public HIRCompileBase\n     ctx->insert_function_decl (function.get_mappings ().get_hirid (), fndecl);\n \n     // setup the params\n-    TyTy::TyBase *tyret = TyTyExtractRetFromFnType::compile (fntype);\n-    std::vector<TyTy::ParamType *> typarams\n-      = TyTyExtractParamsFromFnType::compile (fntype);\n+\n+    TyTy::TyBase *tyret = fntype->return_type ();\n     std::vector<Bvariable *> param_vars;\n \n-    for (auto &it : typarams)\n+    size_t i = 0;\n+    for (auto &it : fntype->get_params ())\n       {\n-\tauto compiled_param = TyTyCompileParam::compile (ctx, fndecl, it);\n-\tparam_vars.push_back (compiled_param);\n+\tHIR::FunctionParam &referenced_param = function.function_params.at (i);\n+\tauto param_pattern = it.first;\n+\tauto param_tyty = it.second;\n+\n+\tauto compiled_param_type\n+\t  = TyTyResolveCompile::compile (ctx, param_tyty);\n+\n+\tbool tree_addressable = false;\n+\tauto compiled_param_var = ctx->get_backend ()->parameter_variable (\n+\t  fndecl, param_pattern->as_string (), compiled_param_type,\n+\t  tree_addressable,\n+\t  ctx->get_mappings ()->lookup_location (param_tyty->get_ref ()));\n+\n+\tparam_vars.push_back (compiled_param_var);\n \n-\tctx->insert_var_decl (it->get_ref (), compiled_param);\n+\tctx->insert_var_decl (referenced_param.get_mappings ().get_hirid (),\n+\t\t\t      compiled_param_var);\n+\ti++;\n       }\n \n     if (!ctx->get_backend ()->function_set_parameters (fndecl, param_vars))"}, {"sha": "f74b4accaf183e101167633b04ee5233f0a30e67", "filename": "gcc/rust/backend/rust-compile-tyty.h", "status": "modified", "additions": 7, "deletions": 86, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5294dfe7dce7a58fbaf2131c7589d115008ebf0e/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5294dfe7dce7a58fbaf2131c7589d115008ebf0e/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h?ref=5294dfe7dce7a58fbaf2131c7589d115008ebf0e", "patch": "@@ -26,6 +26,7 @@\n #include \"rust-tyty.h\"\n #include \"rust-tyty-visitor.h\"\n #include \"rust-hir-map.h\"\n+#include \"rust-hir-full.h\"\n \n namespace Rust {\n namespace Compile {\n@@ -49,8 +50,6 @@ class TyTyCompile : public TyTy::TyVisitor\n \n   void visit (TyTy::StructFieldType &type) override { gcc_unreachable (); }\n \n-  void visit (TyTy::ParamType &type) override { gcc_unreachable (); }\n-\n   void visit (TyTy::ADTType &type) override { gcc_unreachable (); }\n \n   void visit (TyTy::ArrayType &type) override { gcc_unreachable (); }\n@@ -74,13 +73,14 @@ class TyTyCompile : public TyTy::TyVisitor\n \t  \"_\", ret, mappings->lookup_location (hir_type->get_ref ())));\n       }\n \n-    for (size_t i = 0; i < type.num_params (); i++)\n+    for (auto &params : type.get_params ())\n       {\n-\tauto param_tyty = type.param_at (i);\n-\tauto compiled_param_type\n-\t  = TyTyCompile::compile (backend, param_tyty->get_base_type ());\n+\tauto param_pattern = params.first;\n+\tauto param_tyty = params.second;\n+\tauto compiled_param_type = TyTyCompile::compile (backend, param_tyty);\n+\n \tauto compiled_param = Backend::Btyped_identifier (\n-\t  param_tyty->get_identifier (), compiled_param_type,\n+\t  param_pattern->as_string (), compiled_param_type,\n \t  mappings->lookup_location (param_tyty->get_ref ()));\n \n \tparameters.push_back (compiled_param);\n@@ -199,85 +199,6 @@ class TyTyCompile : public TyTy::TyVisitor\n   Analysis::Mappings *mappings;\n };\n \n-class TyTyExtractParamsFromFnType : public TyTy::TyVisitor\n-{\n-public:\n-  static std::vector<TyTy::ParamType *> compile (TyTy::TyBase *ty)\n-  {\n-    TyTyExtractParamsFromFnType compiler;\n-    ty->accept_vis (compiler);\n-    rust_assert (compiler.ok);\n-    return compiler.translated;\n-  }\n-\n-  ~TyTyExtractParamsFromFnType () {}\n-\n-  void visit (TyTy::UnitType &type) override { gcc_unreachable (); }\n-  void visit (TyTy::InferType &type) override { gcc_unreachable (); }\n-  void visit (TyTy::StructFieldType &type) override { gcc_unreachable (); }\n-  void visit (TyTy::ADTType &type) override { gcc_unreachable (); }\n-  void visit (TyTy::ParamType &type) override { gcc_unreachable (); }\n-  void visit (TyTy::ArrayType &type) override { gcc_unreachable (); }\n-  void visit (TyTy::BoolType &type) override { gcc_unreachable (); }\n-  void visit (TyTy::IntType &type) override { gcc_unreachable (); }\n-  void visit (TyTy::UintType &type) override { gcc_unreachable (); }\n-  void visit (TyTy::FloatType &type) override { gcc_unreachable (); }\n-  void visit (TyTy::ErrorType &type) override { gcc_unreachable (); }\n-\n-  void visit (TyTy::FnType &type) override\n-  {\n-    ok = true;\n-    for (size_t i = 0; i < type.num_params (); i++)\n-      {\n-\ttranslated.push_back (type.param_at (i));\n-      }\n-  }\n-\n-private:\n-  TyTyExtractParamsFromFnType () : ok (false) {}\n-\n-  bool ok;\n-  std::vector<TyTy::ParamType *> translated;\n-};\n-\n-class TyTyExtractRetFromFnType : public TyTy::TyVisitor\n-{\n-public:\n-  static TyTy::TyBase *compile (TyTy::TyBase *ty)\n-  {\n-    TyTyExtractRetFromFnType compiler;\n-    ty->accept_vis (compiler);\n-    rust_assert (compiler.ok);\n-    return compiler.translated;\n-  }\n-\n-  ~TyTyExtractRetFromFnType () {}\n-\n-  void visit (TyTy::UnitType &type) override { gcc_unreachable (); }\n-  void visit (TyTy::InferType &type) override { gcc_unreachable (); }\n-  void visit (TyTy::StructFieldType &type) override { gcc_unreachable (); }\n-  void visit (TyTy::ADTType &type) override { gcc_unreachable (); }\n-  void visit (TyTy::ParamType &type) override { gcc_unreachable (); }\n-  void visit (TyTy::ArrayType &type) override { gcc_unreachable (); }\n-  void visit (TyTy::BoolType &type) override { gcc_unreachable (); }\n-  void visit (TyTy::IntType &type) override { gcc_unreachable (); }\n-  void visit (TyTy::UintType &type) override { gcc_unreachable (); }\n-  void visit (TyTy::FloatType &type) override { gcc_unreachable (); }\n-  void visit (TyTy::ErrorType &type) override { gcc_unreachable (); }\n-\n-  void visit (TyTy::FnType &type) override\n-  {\n-    ok = true;\n-    translated = type.get_return_type ();\n-  }\n-\n-private:\n-  TyTyExtractRetFromFnType () : ok (false), translated (nullptr) {}\n-\n-  bool ok;\n-  TyTy::TyBase *translated;\n-};\n-\n } // namespace Compile\n } // namespace Rust\n "}, {"sha": "e99dd389f72a73f246f26dc281e8a15e26a18f27", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5294dfe7dce7a58fbaf2131c7589d115008ebf0e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5294dfe7dce7a58fbaf2131c7589d115008ebf0e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=5294dfe7dce7a58fbaf2131c7589d115008ebf0e", "patch": "@@ -404,13 +404,13 @@ struct FunctionQualifiers\n // A function parameter\n struct FunctionParam\n {\n-public:\n   std::unique_ptr<Pattern> param_name;\n   std::unique_ptr<Type> type;\n \n   Location locus;\n   Analysis::NodeMapping mappings;\n \n+public:\n   FunctionParam (Analysis::NodeMapping mappings,\n \t\t std::unique_ptr<Pattern> param_name,\n \t\t std::unique_ptr<Type> param_type, Location locus)"}, {"sha": "566d43e2c8ef1dfde145c1a94ee888b4cb4bd32e", "filename": "gcc/rust/typecheck/rust-hir-type-check-item.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5294dfe7dce7a58fbaf2131c7589d115008ebf0e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5294dfe7dce7a58fbaf2131c7589d115008ebf0e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h?ref=5294dfe7dce7a58fbaf2131c7589d115008ebf0e", "patch": "@@ -47,7 +47,6 @@ class ResolveFnType : public TyTy::TyVisitor\n   void visit (TyTy::InferType &type) override { gcc_unreachable (); }\n   void visit (TyTy::StructFieldType &type) override { gcc_unreachable (); }\n   void visit (TyTy::ADTType &type) override { gcc_unreachable (); }\n-  void visit (TyTy::ParamType &type) override { gcc_unreachable (); }\n   void visit (TyTy::ArrayType &type) override { gcc_unreachable (); }\n   void visit (TyTy::BoolType &type) override { gcc_unreachable (); }\n   void visit (TyTy::IntType &type) override { gcc_unreachable (); }"}, {"sha": "fcaf72420111f8f096f27b50ce8a7635d2f7b628", "filename": "gcc/rust/typecheck/rust-hir-type-check-toplevel.h", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5294dfe7dce7a58fbaf2131c7589d115008ebf0e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5294dfe7dce7a58fbaf2131c7589d115008ebf0e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h?ref=5294dfe7dce7a58fbaf2131c7589d115008ebf0e", "patch": "@@ -113,15 +113,14 @@ class TypeCheckTopLevel : public TypeCheckBase\n \tret_type->set_ref (function.return_type->get_mappings ().get_hirid ());\n       }\n \n-    std::vector<TyTy::ParamType *> params;\n+    std::vector<std::pair<HIR::Pattern *, TyTy::TyBase *> > params;\n     for (auto &param : function.function_params)\n       {\n \t// get the name as well required for later on\n-\tauto param_type = TypeCheckType::Resolve (param.type.get ());\n-\tauto param_tyty\n-\t  = new TyTy::ParamType (param.get_mappings ().get_hirid (),\n-\t\t\t\t param.param_name->as_string (), param_type);\n-\tparams.push_back (param_tyty);\n+\tauto param_tyty = TypeCheckType::Resolve (param.get_type ());\n+\tparams.push_back (\n+\t  std::pair<HIR::Pattern *, TyTy::TyBase *> (param.get_param_name (),\n+\t\t\t\t\t\t     param_tyty));\n \n \tcontext->insert_type (param.get_mappings (), param_tyty);\n       }"}, {"sha": "2e98cbb4e68a416c56a6608679e64d39eacc9a84", "filename": "gcc/rust/typecheck/rust-tyty-call.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5294dfe7dce7a58fbaf2131c7589d115008ebf0e/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5294dfe7dce7a58fbaf2131c7589d115008ebf0e/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h?ref=5294dfe7dce7a58fbaf2131c7589d115008ebf0e", "patch": "@@ -41,7 +41,6 @@ class TypeCheckCallExpr : private TyVisitor\n   void visit (UnitType &type) override { gcc_unreachable (); }\n   void visit (InferType &type) override { gcc_unreachable (); }\n   void visit (StructFieldType &type) override { gcc_unreachable (); }\n-  void visit (ParamType &type) override { gcc_unreachable (); }\n   void visit (ArrayType &type) override { gcc_unreachable (); }\n   void visit (BoolType &type) override { gcc_unreachable (); }\n   void visit (IntType &type) override { gcc_unreachable (); }"}, {"sha": "d48952cde0b0eca5a2c4a4699da39bcc5e5062a7", "filename": "gcc/rust/typecheck/rust-tyty-resolver.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5294dfe7dce7a58fbaf2131c7589d115008ebf0e/gcc%2Frust%2Ftypecheck%2Frust-tyty-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5294dfe7dce7a58fbaf2131c7589d115008ebf0e/gcc%2Frust%2Ftypecheck%2Frust-tyty-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-resolver.h?ref=5294dfe7dce7a58fbaf2131c7589d115008ebf0e", "patch": "@@ -193,7 +193,6 @@ class TyTyExtractorArray : public TyTy::TyVisitor\n   void visit (TyTy::InferType &type) override { gcc_unreachable (); }\n   void visit (TyTy::StructFieldType &type) override { gcc_unreachable (); }\n   void visit (TyTy::ADTType &type) override { gcc_unreachable (); }\n-  void visit (TyTy::ParamType &type) override { gcc_unreachable (); }\n   void visit (TyTy::FnType &type) override { gcc_unreachable (); }\n   void visit (TyTy::BoolType &type) override { gcc_unreachable (); }\n   void visit (TyTy::IntType &type) override { gcc_unreachable (); }"}, {"sha": "241b9be2f80309972fccf70ec3e151f1c6b26e0c", "filename": "gcc/rust/typecheck/rust-tyty-rules.h", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5294dfe7dce7a58fbaf2131c7589d115008ebf0e/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5294dfe7dce7a58fbaf2131c7589d115008ebf0e/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h?ref=5294dfe7dce7a58fbaf2131c7589d115008ebf0e", "patch": "@@ -68,11 +68,6 @@ class BaseRules : public TyVisitor\n     rust_error_at (def_locus, \"declared here\");\n   }\n \n-  virtual void visit (ParamType &type) override\n-  {\n-    type.get_base_type ()->accept_vis (*this);\n-  }\n-\n   virtual void visit (ArrayType &type) override\n   {\n     Location ref_locus = mappings->lookup_location (type.get_ref ());\n@@ -172,8 +167,6 @@ class InferRules : protected BaseRules\n \n   void visit (FloatType &type) override { resolved = type.clone (); }\n \n-  void visit (ParamType &type) override { resolved = type.clone (); }\n-\n   void visit (ArrayType &type) override { resolved = type.clone (); }\n \n   void visit (ADTType &type) override { resolved = type.clone (); }\n@@ -243,21 +236,6 @@ class FnRules : protected BaseRules\n   FnType *base;\n };\n \n-class ParamRules : protected BaseRules\n-{\n-public:\n-  ParamRules (ParamType *base) : BaseRules (base), base (base) {}\n-\n-  TyBase *combine (TyBase *other)\n-  {\n-    // we only case about the base type of a param\n-    return base->get_base_type ()->combine (other);\n-  }\n-\n-private:\n-  ParamType *base;\n-};\n-\n class ArrayRules : protected BaseRules\n {\n public:"}, {"sha": "b6759dd32323099a450f6647b16b951186fc3e76", "filename": "gcc/rust/typecheck/rust-tyty-visitor.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5294dfe7dce7a58fbaf2131c7589d115008ebf0e/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5294dfe7dce7a58fbaf2131c7589d115008ebf0e/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h?ref=5294dfe7dce7a58fbaf2131c7589d115008ebf0e", "patch": "@@ -32,7 +32,6 @@ class TyVisitor\n   virtual void visit (StructFieldType &type) = 0;\n   virtual void visit (ADTType &type) = 0;\n   virtual void visit (FnType &type) = 0;\n-  virtual void visit (ParamType &type) = 0;\n   virtual void visit (ArrayType &type) = 0;\n   virtual void visit (BoolType &type) = 0;\n   virtual void visit (IntType &type) = 0;"}, {"sha": "2e09de62c7d8fe9f28dad25a7ef2205f233dacbd", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 8, "deletions": 30, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5294dfe7dce7a58fbaf2131c7589d115008ebf0e/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5294dfe7dce7a58fbaf2131c7589d115008ebf0e/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=5294dfe7dce7a58fbaf2131c7589d115008ebf0e", "patch": "@@ -173,7 +173,9 @@ FnType::as_string () const\n   std::string params_str = \"\";\n   for (auto &param : params)\n     {\n-      params_str += param->as_string ();\n+      auto pattern = param.first;\n+      auto ty = param.second;\n+      params_str += pattern->as_string () + \" \" + ty->as_string ();\n       params_str += \",\";\n     }\n \n@@ -191,40 +193,15 @@ FnType::combine (TyBase *other)\n TyBase *\n FnType::clone ()\n {\n-  std::vector<ParamType *> cloned_params;\n+  std::vector<std::pair<HIR::Pattern *, TyBase *> > cloned_params;\n   for (auto &p : params)\n-    cloned_params.push_back ((ParamType *) p->clone ());\n+    cloned_params.push_back (\n+      std::pair<HIR::Pattern *, TyBase *> (p.first, p.second->clone ()));\n \n   return new FnType (get_ref (), get_ty_ref (), cloned_params,\n \t\t     get_return_type ()->clone ());\n }\n \n-void\n-ParamType::accept_vis (TyVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n-std::string\n-ParamType::as_string () const\n-{\n-  return \"(\" + identifier + \" :\" + type->as_string () + \")\";\n-}\n-\n-TyBase *\n-ParamType::combine (TyBase *other)\n-{\n-  ParamRules r (this);\n-  return r.combine (other);\n-}\n-\n-TyBase *\n-ParamType::clone ()\n-{\n-  return new ParamType (get_ref (), get_ty_ref (), get_identifier (),\n-\t\t\tget_base_type ()->clone ());\n-}\n-\n void\n ArrayType::accept_vis (TyVisitor &vis)\n {\n@@ -449,14 +426,15 @@ TypeCheckCallExpr::visit (FnType &type)\n \n   size_t i = 0;\n   call.iterate_params ([&] (HIR::Expr *p) mutable -> bool {\n-    TyBase *pt = type.param_at (i);\n+    auto fnparam = type.param_at (i);\n     auto t = Resolver::TypeCheckExpr::Resolve (p);\n     if (t == nullptr)\n       {\n \trust_error_at (p->get_locus_slow (), \"failed to resolve type\");\n \treturn false;\n       }\n \n+    auto pt = fnparam.second;\n     auto res = pt->combine (t);\n     if (res == nullptr)\n       return false;"}, {"sha": "a73a3441cb64c124d0f8119f3310aed5e7f91fa3", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 16, "deletions": 34, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5294dfe7dce7a58fbaf2131c7589d115008ebf0e/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5294dfe7dce7a58fbaf2131c7589d115008ebf0e/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=5294dfe7dce7a58fbaf2131c7589d115008ebf0e", "patch": "@@ -234,43 +234,17 @@ class ADTType : public TyBase\n   std::vector<StructFieldType *> fields;\n };\n \n-class ParamType : public TyBase\n-{\n-public:\n-  ParamType (HirId ref, std::string identifier, TyBase *type)\n-    : TyBase (ref, ref, TypeKind::PARAM), identifier (identifier), type (type)\n-  {}\n-\n-  ParamType (HirId ref, HirId ty_ref, std::string identifier, TyBase *type)\n-    : TyBase (ref, ty_ref, TypeKind::PARAM), identifier (identifier),\n-      type (type)\n-  {}\n-\n-  void accept_vis (TyVisitor &vis) override;\n-\n-  std::string as_string () const override;\n-\n-  TyBase *combine (TyBase *other) override;\n-\n-  std::string get_identifier () const { return identifier; }\n-\n-  TyBase *get_base_type () { return type; }\n-\n-  TyBase *clone () final override;\n-\n-private:\n-  std::string identifier;\n-  TyBase *type;\n-};\n-\n class FnType : public TyBase\n {\n public:\n-  FnType (HirId ref, std::vector<ParamType *> params, TyBase *type)\n-    : TyBase (ref, ref, TypeKind::FNDEF), params (params), type (type)\n+  FnType (HirId ref, std::vector<std::pair<HIR::Pattern *, TyBase *> > params,\n+\t  TyBase *type)\n+    : TyBase (ref, ref, TypeKind::FNDEF), params (std::move (params)),\n+      type (type)\n   {}\n \n-  FnType (HirId ref, HirId ty_ref, std::vector<ParamType *> params,\n+  FnType (HirId ref, HirId ty_ref,\n+\t  std::vector<std::pair<HIR::Pattern *, TyBase *> > params,\n \t  TyBase *type)\n     : TyBase (ref, ty_ref, TypeKind::FNDEF), params (params), type (type)\n   {}\n@@ -285,14 +259,22 @@ class FnType : public TyBase\n \n   size_t num_params () const { return params.size (); }\n \n-  ParamType *param_at (size_t idx) { return params[idx]; }\n+  std::vector<std::pair<HIR::Pattern *, TyBase *> > &get_params ()\n+  {\n+    return params;\n+  }\n+\n+  std::pair<HIR::Pattern *, TyBase *> &param_at (size_t idx)\n+  {\n+    return params[idx];\n+  }\n \n   TyBase *get_return_type () { return type; }\n \n   TyBase *clone () final override;\n \n private:\n-  std::vector<ParamType *> params;\n+  std::vector<std::pair<HIR::Pattern *, TyBase *> > params;\n   TyBase *type;\n };\n "}]}