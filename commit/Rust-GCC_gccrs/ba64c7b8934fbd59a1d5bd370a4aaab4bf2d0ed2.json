{"sha": "ba64c7b8934fbd59a1d5bd370a4aaab4bf2d0ed2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE2NGM3Yjg5MzRmYmQ1OWExZDViZDM3MGE0YWFhYjRiZjJkMGVkMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-02-28T17:17:29Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-02-28T17:17:29Z"}, "message": "re PR target/52991 (attribute packed broken on mingw32?)\n\n\tPR target/52991\n\t* stor-layout.c (update_alignment_for_field): For\n\ttargetm.ms_bitfield_layout_p (rli->t), if !is_bitfield\n\t&& !DECL_PACKED (field), do the alignment update, just use\n\tonly desired_align instead of MAX (type_align, desired_align)\n\tas the alignment.\n\t(place_field): Don't do known_align < desired_align handling\n\tearly if targetm.ms_bitfield_layout_p (rli->t) and rli->prev_field\n\tis non-NULL, instead do it after rli->prev_field handling and\n\tonly if not within a bitfield word.  For DECL_PACKED (field)\n\tuse type_align of BITS_PER_UNIT.\n\n\t* gcc.dg/bf-ms-layout.c: Revert 2012-04-26 changes.\n\t* gcc.dg/bf-ms-layout-2.c: Revert 2012-02-23 changes.\n\t* gcc.dg/bf-ms-layout-4.c: New test.\n\t* gcc.dg/bf-ms-layout-5.c: New test.\n\nFrom-SVN: r258075", "tree": {"sha": "592065ce2afe3ed0b78c452328c6359b99bee5f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/592065ce2afe3ed0b78c452328c6359b99bee5f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba64c7b8934fbd59a1d5bd370a4aaab4bf2d0ed2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba64c7b8934fbd59a1d5bd370a4aaab4bf2d0ed2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba64c7b8934fbd59a1d5bd370a4aaab4bf2d0ed2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba64c7b8934fbd59a1d5bd370a4aaab4bf2d0ed2/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8dd64cdfa78a0f48c89966a5e59dad46c4bdf21f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dd64cdfa78a0f48c89966a5e59dad46c4bdf21f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dd64cdfa78a0f48c89966a5e59dad46c4bdf21f"}], "stats": {"total": 192, "additions": 168, "deletions": 24}, "files": [{"sha": "5d3319c00f0071c27ee84c38743c6e0e34806553", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba64c7b8934fbd59a1d5bd370a4aaab4bf2d0ed2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba64c7b8934fbd59a1d5bd370a4aaab4bf2d0ed2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ba64c7b8934fbd59a1d5bd370a4aaab4bf2d0ed2", "patch": "@@ -1,3 +1,17 @@\n+2018-02-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/52991\n+\t* stor-layout.c (update_alignment_for_field): For\n+\ttargetm.ms_bitfield_layout_p (rli->t), if !is_bitfield\n+\t&& !DECL_PACKED (field), do the alignment update, just use\n+\tonly desired_align instead of MAX (type_align, desired_align)\n+\tas the alignment.\n+\t(place_field): Don't do known_align < desired_align handling\n+\tearly if targetm.ms_bitfield_layout_p (rli->t) and rli->prev_field\n+\tis non-NULL, instead do it after rli->prev_field handling and\n+\tonly if not within a bitfield word.  For DECL_PACKED (field)\n+\tuse type_align of BITS_PER_UNIT.\n+\n 2018-02-28  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/aarch64/aarch64.c (aarch64_emit_probe_stack_range): Remove"}, {"sha": "81f75a5eb72b22b5e77e0affb804e6c820fe69ca", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 42, "deletions": 8, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba64c7b8934fbd59a1d5bd370a4aaab4bf2d0ed2/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba64c7b8934fbd59a1d5bd370a4aaab4bf2d0ed2/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=ba64c7b8934fbd59a1d5bd370a4aaab4bf2d0ed2", "patch": "@@ -1038,7 +1038,7 @@ update_alignment_for_field (record_layout_info rli, tree field,\n \t the type, except that for zero-size bitfields this only\n \t applies if there was an immediately prior, nonzero-size\n \t bitfield.  (That's the way it is, experimentally.) */\n-      if ((!is_bitfield && !DECL_PACKED (field))\n+      if (!is_bitfield\n \t  || ((DECL_SIZE (field) == NULL_TREE\n \t       || !integer_zerop (DECL_SIZE (field)))\n \t      ? !DECL_PACKED (field)\n@@ -1047,7 +1047,10 @@ update_alignment_for_field (record_layout_info rli, tree field,\n \t\t && ! integer_zerop (DECL_SIZE (rli->prev_field)))))\n \t{\n \t  unsigned int type_align = TYPE_ALIGN (type);\n-\t  type_align = MAX (type_align, desired_align);\n+\t  if (!is_bitfield && DECL_PACKED (field))\n+\t    type_align = desired_align;\n+\t  else\n+\t    type_align = MAX (type_align, desired_align);\n \t  if (maximum_field_alignment != 0)\n \t    type_align = MIN (type_align, maximum_field_alignment);\n \t  rli->record_align = MAX (rli->record_align, type_align);\n@@ -1303,7 +1306,9 @@ place_field (record_layout_info rli, tree field)\n \n   /* Does this field automatically have alignment it needs by virtue\n      of the fields that precede it and the record's own alignment?  */\n-  if (known_align < desired_align)\n+  if (known_align < desired_align\n+      && (! targetm.ms_bitfield_layout_p (rli->t)\n+\t  || rli->prev_field == NULL))\n     {\n       /* No, we need to skip space before this field.\n \t Bump the cumulative size to multiple of field alignment.  */\n@@ -1331,8 +1336,6 @@ place_field (record_layout_info rli, tree field)\n \n       if (! TREE_CONSTANT (rli->offset))\n \trli->offset_align = desired_align;\n-      if (targetm.ms_bitfield_layout_p (rli->t))\n-\trli->prev_field = NULL;\n     }\n \n   /* Handle compatibility with PCC.  Note that if the record has any\n@@ -1448,6 +1451,8 @@ place_field (record_layout_info rli, tree field)\n       /* This is a bitfield if it exists.  */\n       if (rli->prev_field)\n \t{\n+\t  bool realign_p = known_align < desired_align;\n+\n \t  /* If both are bitfields, nonzero, and the same size, this is\n \t     the middle of a run.  Zero declared size fields are special\n \t     and handled as \"end of run\". (Note: it's nonzero declared\n@@ -1481,7 +1486,10 @@ place_field (record_layout_info rli, tree field)\n \t\t    rli->remaining_in_alignment = typesize - bitsize;\n \t\t}\n \t      else\n-\t\trli->remaining_in_alignment -= bitsize;\n+\t\t{\n+\t\t  rli->remaining_in_alignment -= bitsize;\n+\t\t  realign_p = false;\n+\t\t}\n \t    }\n \t  else\n \t    {\n@@ -1512,6 +1520,31 @@ place_field (record_layout_info rli, tree field)\n \t\trli->prev_field = NULL;\n \t    }\n \n+\t  /* Does this field automatically have alignment it needs by virtue\n+\t     of the fields that precede it and the record's own alignment?  */\n+\t  if (realign_p)\n+\t    {\n+\t      /* If the alignment is still within offset_align, just align\n+\t\t the bit position.  */\n+\t      if (desired_align < rli->offset_align)\n+\t\trli->bitpos = round_up (rli->bitpos, desired_align);\n+\t      else\n+\t\t{\n+\t\t  /* First adjust OFFSET by the partial bits, then align.  */\n+\t\t  tree d = size_binop (CEIL_DIV_EXPR, rli->bitpos,\n+\t\t\t\t       bitsize_unit_node);\n+\t\t  rli->offset = size_binop (PLUS_EXPR, rli->offset,\n+\t\t\t\t\t    fold_convert (sizetype, d));\n+\t\t  rli->bitpos = bitsize_zero_node;\n+\n+\t\t  rli->offset = round_up (rli->offset,\n+\t\t\t\t\t  desired_align / BITS_PER_UNIT);\n+\t\t}\n+\n+\t      if (! TREE_CONSTANT (rli->offset))\n+\t\trli->offset_align = desired_align;\n+\t    }\n+\n \t  normalize_rli (rli);\n         }\n \n@@ -1530,7 +1563,7 @@ place_field (record_layout_info rli, tree field)\n       if (!DECL_BIT_FIELD_TYPE (field)\n \t  || (prev_saved != NULL\n \t      ? !simple_cst_equal (TYPE_SIZE (type), TYPE_SIZE (prev_type))\n-\t      : !integer_zerop (DECL_SIZE (field)) ))\n+\t      : !integer_zerop (DECL_SIZE (field))))\n \t{\n \t  /* Never smaller than a byte for compatibility.  */\n \t  unsigned int type_align = BITS_PER_UNIT;\n@@ -1555,7 +1588,8 @@ place_field (record_layout_info rli, tree field)\n \t    }\n \n \t  /* Now align (conventionally) for the new type.  */\n-\t  type_align = TYPE_ALIGN (TREE_TYPE (field));\n+\t  if (! DECL_PACKED (field))\n+\t    type_align = TYPE_ALIGN (TREE_TYPE (field));\n \n \t  if (maximum_field_alignment != 0)\n \t    type_align = MIN (type_align, maximum_field_alignment);"}, {"sha": "090d55bf9cfb7df9eb5db032e9d0ec488ba37b08", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba64c7b8934fbd59a1d5bd370a4aaab4bf2d0ed2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba64c7b8934fbd59a1d5bd370a4aaab4bf2d0ed2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ba64c7b8934fbd59a1d5bd370a4aaab4bf2d0ed2", "patch": "@@ -1,3 +1,11 @@\n+2018-02-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/52991\n+\t* gcc.dg/bf-ms-layout.c: Revert 2012-04-26 changes.\n+\t* gcc.dg/bf-ms-layout-2.c: Revert 2012-02-23 changes.\n+\t* gcc.dg/bf-ms-layout-4.c: New test.\n+\t* gcc.dg/bf-ms-layout-5.c: New test.\n+\n 2018-02-28  Peter Bergner  <bergner@vnet.ibm.com>\n \n \tPR target/83399"}, {"sha": "519785a82352a8254b434861520db6ed48ee16e0", "filename": "gcc/testsuite/gcc.dg/bf-ms-layout-2.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba64c7b8934fbd59a1d5bd370a4aaab4bf2d0ed2/gcc%2Ftestsuite%2Fgcc.dg%2Fbf-ms-layout-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba64c7b8934fbd59a1d5bd370a4aaab4bf2d0ed2/gcc%2Ftestsuite%2Fgcc.dg%2Fbf-ms-layout-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbf-ms-layout-2.c?ref=ba64c7b8934fbd59a1d5bd370a4aaab4bf2d0ed2", "patch": "@@ -158,27 +158,27 @@ int main(){\n   struct ten test_ten;\n \n #if defined (_TEST_MS_LAYOUT) || defined (_MSC_VER)\n-  size_t exp_sizeof_one = 8;\n-  size_t exp_sizeof_two = 12;\n+  size_t exp_sizeof_one = 12;\n+  size_t exp_sizeof_two = 16;\n   size_t exp_sizeof_three =6;\n   size_t exp_sizeof_four = 8;\n   size_t exp_sizeof_five = 3;\n   size_t exp_sizeof_six = 8;\n   size_t exp_sizeof_seven = 3;\n-  size_t exp_sizeof_eight = 2;\n+  size_t exp_sizeof_eight = 4;\n   size_t exp_sizeof_nine = 8;\n-  size_t exp_sizeof_ten = 8;\n+  size_t exp_sizeof_ten = 16;\n \n-  unsigned char exp_one_c = 7;\n-  unsigned char exp_two_c  = 9;\n+  unsigned char exp_one_c = 8;\n+  unsigned char exp_two_c  = 12;\n   unsigned char exp_three_c = 4;\n   unsigned char exp_four_c = 4;\n   char exp_five_c = 2;\n   char exp_six_c = 5;\n   char exp_seven_c = 2;\n-  char exp_eight_c = 1;\n+  char exp_eight_c = 2;\n   char exp_nine_c = 0;\n-  char exp_ten_c = 1;\n+  char exp_ten_c = 8;\n \n #else /* testing -mno-ms-bitfields */\n "}, {"sha": "821db075a9a8f8ad6ee941bb2b2716292cf5d7bb", "filename": "gcc/testsuite/gcc.dg/bf-ms-layout-4.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba64c7b8934fbd59a1d5bd370a4aaab4bf2d0ed2/gcc%2Ftestsuite%2Fgcc.dg%2Fbf-ms-layout-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba64c7b8934fbd59a1d5bd370a4aaab4bf2d0ed2/gcc%2Ftestsuite%2Fgcc.dg%2Fbf-ms-layout-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbf-ms-layout-4.c?ref=ba64c7b8934fbd59a1d5bd370a4aaab4bf2d0ed2", "patch": "@@ -0,0 +1,43 @@\n+/* PR target/52991 */\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+\n+#define CHECK(expr) extern char c[(expr) ? 1 : -1]\n+#define offsetof(x, y) __builtin_offsetof (x, y)\n+\n+struct test_sp1 {\n+    int a;\n+    short b;\n+    int c;\n+    char d;\n+} __attribute__((packed,ms_struct));\n+\n+CHECK (sizeof (struct test_sp1) == 11);\n+CHECK (offsetof (struct test_sp1, a) == 0);\n+CHECK (offsetof (struct test_sp1, b) == 4);\n+CHECK (offsetof (struct test_sp1, c) == 6);\n+CHECK (offsetof (struct test_sp1, d) == 10);\n+\n+struct test_sp3 {\n+    int a;\n+    short b __attribute__((aligned(8)));\n+    int c;\n+    char d;\n+} __attribute__((packed,ms_struct));\n+\n+CHECK (sizeof (struct test_sp3) == 16);\n+CHECK (offsetof (struct test_sp3, a) == 0);\n+CHECK (offsetof (struct test_sp3, b) == 8);\n+CHECK (offsetof (struct test_sp3, c) == 10);\n+CHECK (offsetof (struct test_sp3, d) == 14);\n+\n+struct test_s4 {\n+    int a;\n+    short b;\n+    int c:15;\n+    char d;\n+} __attribute__((ms_struct));\n+\n+CHECK (sizeof (struct test_s4) == 16);\n+CHECK (offsetof (struct test_s4, a) == 0);\n+CHECK (offsetof (struct test_s4, b) == 4);\n+CHECK (offsetof (struct test_s4, d) == 12);"}, {"sha": "361b91464db3074b6bbd1f34e0d9d786165b0ebd", "filename": "gcc/testsuite/gcc.dg/bf-ms-layout-5.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba64c7b8934fbd59a1d5bd370a4aaab4bf2d0ed2/gcc%2Ftestsuite%2Fgcc.dg%2Fbf-ms-layout-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba64c7b8934fbd59a1d5bd370a4aaab4bf2d0ed2/gcc%2Ftestsuite%2Fgcc.dg%2Fbf-ms-layout-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbf-ms-layout-5.c?ref=ba64c7b8934fbd59a1d5bd370a4aaab4bf2d0ed2", "patch": "@@ -0,0 +1,45 @@\n+/* PR target/52991 */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+\n+struct S {\n+  int a : 2;\n+  __attribute__((aligned (8))) int b : 2;\n+  int c : 28;\n+  __attribute__((aligned (16))) int d : 2;\n+  int e : 30;\n+} __attribute__((ms_struct));\n+\n+struct S s;\n+\n+int\n+main ()\n+{\n+  int i;\n+  if (sizeof (s) != 32)\n+    __builtin_abort ();\n+  s.a = -1;\n+  for (i = 0; i < 32; ++i)\n+    if (((char *) &s)[i] != (i ? 0 : 3))\n+      __builtin_abort ();\n+  s.a = 0;\n+  s.b = -1;\n+  for (i = 0; i < 32; ++i)\n+    if (((char *) &s)[i] != (i ? 0 : 12))\n+      __builtin_abort ();\n+  s.b = 0;\n+  s.c = -1;\n+  for (i = 0; i < 32; ++i)\n+    if (((signed char *) &s)[i] != (i > 3 ? 0 : (i ? -1 : -16)))\n+      __builtin_abort ();\n+  s.c = 0;\n+  s.d = -1;\n+  for (i = 0; i < 32; ++i)\n+    if (((signed char *) &s)[i] != (i == 16 ? 3 : 0))\n+      __builtin_abort ();\n+  s.d = 0;\n+  s.e = -1;\n+  for (i = 0; i < 32; ++i)\n+    if (((signed char *) &s)[i] != ((i < 16 || i > 19) ? 0 : (i == 16 ? -4 : -1)))\n+      __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "94827516f9388ffe0fdfd35767d6239f34d1da28", "filename": "gcc/testsuite/gcc.dg/bf-ms-layout.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba64c7b8934fbd59a1d5bd370a4aaab4bf2d0ed2/gcc%2Ftestsuite%2Fgcc.dg%2Fbf-ms-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba64c7b8934fbd59a1d5bd370a4aaab4bf2d0ed2/gcc%2Ftestsuite%2Fgcc.dg%2Fbf-ms-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbf-ms-layout.c?ref=ba64c7b8934fbd59a1d5bd370a4aaab4bf2d0ed2", "patch": "@@ -153,27 +153,27 @@ int main(){\n   struct ten test_ten;\n \n #if defined (_TEST_MS_LAYOUT) || defined (_MSC_VER)\n-  size_t exp_sizeof_one = 8;\n-  size_t exp_sizeof_two = 12;\n+  size_t exp_sizeof_one = 12;\n+  size_t exp_sizeof_two = 16;\n   size_t exp_sizeof_three =6;\n   size_t exp_sizeof_four = 8;\n   size_t exp_sizeof_five = 3;\n   size_t exp_sizeof_six = 8;\n   size_t exp_sizeof_seven = 3;\n-  size_t exp_sizeof_eight = 2;\n+  size_t exp_sizeof_eight = 4;\n   size_t exp_sizeof_nine = 8;\n-  size_t exp_sizeof_ten = 8;\n+  size_t exp_sizeof_ten = 16;\n \n-  unsigned char exp_one_c = 7;\n-  unsigned char exp_two_c  = 9;\n+  unsigned char exp_one_c = 8;\n+  unsigned char exp_two_c  = 12;\n   unsigned char exp_three_c = 4;\n   unsigned char exp_four_c = 4;\n   char exp_five_c = 2;\n   char exp_six_c = 5;\n   char exp_seven_c = 2;\n-  char exp_eight_c = 1;\n+  char exp_eight_c = 2;\n   char exp_nine_c = 0;\n-  char exp_ten_c = 1;\n+  char exp_ten_c = 8;\n \n #else /* testing -mno-ms-bitfields */\n "}]}