{"sha": "88e594b6de5efb2b463bb6e4b0d2ed875def0d25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhlNTk0YjZkZTVlZmIyYjQ2M2JiNmU0YjBkMmVkODc1ZGVmMGQyNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-07-29T19:40:13Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-07-29T19:40:13Z"}, "message": "mangle.c (write_name): Check for null context.\n\n\t* mangle.c (write_name): Check for null context.\n\t(write_unscoped_name): Allow PARM_DECL context.\n\nFrom-SVN: r201317", "tree": {"sha": "7c729aadab74419596d84d5cc8d3c2937438fed8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c729aadab74419596d84d5cc8d3c2937438fed8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88e594b6de5efb2b463bb6e4b0d2ed875def0d25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88e594b6de5efb2b463bb6e4b0d2ed875def0d25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88e594b6de5efb2b463bb6e4b0d2ed875def0d25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88e594b6de5efb2b463bb6e4b0d2ed875def0d25/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "502af4917687e59654128c9eb717b56b88df459e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/502af4917687e59654128c9eb717b56b88df459e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/502af4917687e59654128c9eb717b56b88df459e"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "21eaa1ff312bda2dbea4ef91b89c049660968e68", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88e594b6de5efb2b463bb6e4b0d2ed875def0d25/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88e594b6de5efb2b463bb6e4b0d2ed875def0d25/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=88e594b6de5efb2b463bb6e4b0d2ed875def0d25", "patch": "@@ -1,3 +1,8 @@\n+2013-07-29  Jason Merrill  <jason@redhat.com>\n+\n+\t* mangle.c (write_name): Check for null context.\n+\t(write_unscoped_name): Allow PARM_DECL context.\n+\n 2013-07-25  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/57981"}, {"sha": "3cfca583cb023d660623e77d5ae360577f753c50", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88e594b6de5efb2b463bb6e4b0d2ed875def0d25/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88e594b6de5efb2b463bb6e4b0d2ed875def0d25/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=88e594b6de5efb2b463bb6e4b0d2ed875def0d25", "patch": "@@ -798,13 +798,14 @@ write_name (tree decl, const int ignore_local_scope)\n \n   context = decl_mangling_context (decl);\n \n+  gcc_assert (context != NULL_TREE);\n+\n   /* A decl in :: or ::std scope is treated specially.  The former is\n      mangled using <unscoped-name> or <unscoped-template-name>, the\n      latter with a special substitution.  Also, a name that is\n      directly in a local function scope is also mangled with\n      <unscoped-name> rather than a full <nested-name>.  */\n-  if (context == NULL\n-      || context == global_namespace\n+  if (context == global_namespace\n       || DECL_NAMESPACE_STD_P (context)\n       || (ignore_local_scope\n \t  && (TREE_CODE (context) == FUNCTION_DECL\n@@ -837,10 +838,10 @@ write_name (tree decl, const int ignore_local_scope)\n \t     directly in that function's scope, either decl or one of\n \t     its enclosing scopes.  */\n \t  tree local_entity = decl;\n-\t  while (context != NULL && context != global_namespace)\n+\t  while (context != global_namespace)\n \t    {\n \t      /* Make sure we're always dealing with decls.  */\n-\t      if (context != NULL && TYPE_P (context))\n+\t      if (TYPE_P (context))\n \t\tcontext = TYPE_NAME (context);\n \t      /* Is this a function?  */\n \t      if (TREE_CODE (context) == FUNCTION_DECL\n@@ -883,9 +884,10 @@ write_unscoped_name (const tree decl)\n   else\n     {\n       /* If not, it should be either in the global namespace, or directly\n-\t in a local function scope.  */\n+\t in a local function scope.  A lambda can also be mangled in the\n+\t scope of a default argument.  */\n       gcc_assert (context == global_namespace\n-\t\t  || context != NULL\n+\t\t  || TREE_CODE (context) == PARM_DECL\n \t\t  || TREE_CODE (context) == FUNCTION_DECL);\n \n       write_unqualified_name (decl);"}]}