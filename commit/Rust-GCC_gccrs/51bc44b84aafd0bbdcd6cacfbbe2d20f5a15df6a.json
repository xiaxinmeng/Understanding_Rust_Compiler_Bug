{"sha": "51bc44b84aafd0bbdcd6cacfbbe2d20f5a15df6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTFiYzQ0Yjg0YWFmZDBiYmRjZDZjYWNmYmJlMmQyMGY1YTE1ZGY2YQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-01-23T15:40:14Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-04T09:11:02Z"}, "message": "[Ada] Update the documentation in checks.ads about range checks\n\n2020-06-04  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* checks.ads: Update documentation about range checks and fix\n\tminor other things.", "tree": {"sha": "5ac5b75d114c92b502e09bc14365c6d6fe0d9b67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ac5b75d114c92b502e09bc14365c6d6fe0d9b67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51bc44b84aafd0bbdcd6cacfbbe2d20f5a15df6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51bc44b84aafd0bbdcd6cacfbbe2d20f5a15df6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51bc44b84aafd0bbdcd6cacfbbe2d20f5a15df6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51bc44b84aafd0bbdcd6cacfbbe2d20f5a15df6a/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d46b330ddc1dc1c16e9638e144db64df7365a820", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d46b330ddc1dc1c16e9638e144db64df7365a820", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d46b330ddc1dc1c16e9638e144db64df7365a820"}], "stats": {"total": 42, "additions": 17, "deletions": 25}, "files": [{"sha": "905e1120ebdeaa078c820dbd94a8a1160593dbd2", "filename": "gcc/ada/checks.ads", "status": "modified", "additions": 17, "deletions": 25, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51bc44b84aafd0bbdcd6cacfbbe2d20f5a15df6a/gcc%2Fada%2Fchecks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51bc44b84aafd0bbdcd6cacfbbe2d20f5a15df6a/gcc%2Fada%2Fchecks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.ads?ref=51bc44b84aafd0bbdcd6cacfbbe2d20f5a15df6a", "patch": "@@ -23,10 +23,10 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  Package containing routines used to deal with runtime checks. These\n+--  Package containing routines used to deal with run-time checks. These\n --  routines are used both by the semantics and by the expander. In some\n---  cases, checks are enabled simply by setting flags for gigi, and in\n---  other cases the code for the check is expanded.\n+--  cases, checks are enabled simply by setting a flag for the back end,\n+--  and in other cases the code for the check is expanded.\n \n --  The approach used for range and length checks, in regards to suppressed\n --  checks, is to attempt to detect at compilation time that a constraint\n@@ -179,7 +179,7 @@ package Checks is\n    --  operate anyway since they may generate useful compile time warnings.\n \n    procedure Apply_Access_Check (N : Node_Id);\n-   --  Determines whether an expression node requires a runtime access\n+   --  Determines whether an expression node requires a run-time access\n    --  check and if so inserts the appropriate run-time check.\n \n    procedure Apply_Accessibility_Check\n@@ -200,7 +200,7 @@ package Checks is\n    --  generated) is prepended to the Actions list of N_Freeze_Entity node N.\n    --  Note that the check references E'Alignment, so it cannot be emitted\n    --  before N (its freeze node), otherwise this would cause an illegal\n-   --  access before elaboration error in GIGI. For the case of a clear overlay\n+   --  access before elaboration error in gigi. For the case of a clear overlay\n    --  situation, we also check that the size of the overlaying object is not\n    --  larger than the overlaid object.\n \n@@ -339,7 +339,7 @@ package Checks is\n    --  value should be taken into account, which is not the case currently.\n \n    procedure Install_Null_Excluding_Check (N : Node_Id);\n-   --  Determines whether an access node requires a runtime access check and\n+   --  Determines whether an access node requires a run-time access check and\n    --  if so inserts the appropriate run-time check.\n \n    procedure Install_Primitive_Elaboration_Check (Subp_Body : Node_Id);\n@@ -445,13 +445,10 @@ package Checks is\n    -------------------------------------------------------\n \n    --  Range checks are controlled by the Do_Range_Check flag. The front end\n-   --  is responsible for setting this flag in relevant nodes. Originally\n-   --  the back end generated all corresponding range checks. But later on\n-   --  we decided to generate many range checks in the front end. We are now\n-   --  in the transitional phase where some of these checks are still done\n-   --  by the back end, but many are done by the front end. It is possible\n-   --  that in the future we might move all the checks to the front end. The\n-   --  main remaining back end checks are for subscript checking.\n+   --  is responsible for setting this flag in relevant nodes. Originally the\n+   --  back end generated all the corresponding range checks, but later on we\n+   --  decided to generate all the range checks in the front end and this is\n+   --  the current situation.\n \n    --  Overflow checks are similarly controlled by the Do_Overflow_Check flag.\n    --  The difference here is that if back end overflow checks are inactive\n@@ -621,7 +618,7 @@ package Checks is\n       Source_Typ : Entity_Id := Empty;\n       Fixed_Int  : Boolean   := False);\n    --  For scalar types, determines whether an expression node should be\n-   --  flagged as needing a runtime range check. If the node requires such a\n+   --  flagged as needing a run-time range check. If the node requires such a\n    --  check, the Do_Range_Check flag is turned on. The Fixed_Int flag if set\n    --  causes any fixed-point values to be treated as though they were discrete\n    --  values (i.e. the underlying integer value is used).\n@@ -678,17 +675,12 @@ package Checks is\n    -----------------------\n \n    --  Some of the earlier processing for checks results in temporarily setting\n-   --  the Do_Range_Check flag rather than actually generating checks. Now we\n-   --  are moving the generation of such checks into the front end for reasons\n-   --  of efficiency and simplicity (there were difficulties in handling this\n-   --  in the back end when side effects were present in the expressions being\n-   --  checked).\n-\n-   --  Probably we could eliminate the Do_Range_Check flag entirely and\n-   --  generate the checks earlier, but this is a delicate area and it\n-   --  seemed safer to implement the following routines, which are called\n-   --  late on in the expansion process. They check the Do_Range_Check flag\n-   --  and if it is set, generate the actual checks and reset the flag.\n+   --  the Do_Range_Check flag rather than actually generating checks. Probably\n+   --  we could eliminate the Do_Range_Check flag entirely and generate checks\n+   --  earlier, but this is a delicate area and it seems safer to implement the\n+   --  following routines, which are called later on in the expansion process.\n+   --  They check the Do_Range_Check flag and if it is set, generate the actual\n+   --  checks and reset the flag.\n \n    procedure Generate_Range_Check\n      (N           : Node_Id;"}]}