{"sha": "c61819ff0f851ca343362f742f819bb459880eb6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzYxODE5ZmYwZjg1MWNhMzQzMzYyZjc0MmY4MTliYjQ1OTg4MGViNg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2014-12-16T20:44:45Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2014-12-16T20:44:45Z"}, "message": "re PR fortran/54687 (Use gcc option machinery for gfortran)\n\n2014-12-16  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/54687\n        * gfortran.h (gfc_option_t): Remove flags which now\n        have a Var().\n        * lang.opt (flag-aggressive_function_elimination,\n        flag-align_commons, flag-all_intrinsics,\n        flag-allow_leading_underscore, flag-automatic, flag-backslash,\n        flag-backtrace, flag-blas_matmul_limit, flag-cray_pointer,\n        flag-dollar_ok, flag-dump_fortran_original,\n        flag-dump_fortran_optimized, flag-external_blas, flag-f2c,\n        flag-implicit_none, flag-max_array_constructor,\n        flag-module_private, flag-pack_derived, flag-range_check,\n        flag-recursive, flag-repack_arrays, flag-sign_zero,\n        flag-underscoring): Add Var() and, where applicable, Enum().\n        * options.c (gfc_init_options, gfc_post_options,\n        gfc_handle_option): Update for *.opt changes.\n        * arith.c: Update for flag-variable name changes.\n        * array.c: Ditto.\n        * cpp.c: Ditto.\n        * decl.c: Ditto.\n        * expr.c: Ditto.\n        * f95-lang.c: Ditto.\n        * frontend-passes.c: Ditto.\n        * intrinsic.c: Ditto.\n        * io.c: Ditto.\n        * match.c: Ditto.\n        * module.c: Ditto.\n        * parse.c: Ditto.\n        * primary.c: Ditto.\n        * resolve.c: Ditto.\n        * scanner.c: Ditto.\n        * simplify.c: Ditto.\n        * symbol.c: Ditto.\n        * trans-array.c: Ditto.\n        * trans-common.c: Ditto.\n        * trans-decl.c: Ditto.\n        * trans-expr.c: Ditto.\n        * trans-intrinsic.c: Ditto.\n        * trans-openmp.c: Ditto.\n        * trans-types.c: Ditto.\n\nFrom-SVN: r218792", "tree": {"sha": "d102a0fa85741b2b8e259078e943f9ba1f72a927", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d102a0fa85741b2b8e259078e943f9ba1f72a927"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c61819ff0f851ca343362f742f819bb459880eb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c61819ff0f851ca343362f742f819bb459880eb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c61819ff0f851ca343362f742f819bb459880eb6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c61819ff0f851ca343362f742f819bb459880eb6/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "931977d9191b542c356d2dfa3258c8d09a6b8498", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/931977d9191b542c356d2dfa3258c8d09a6b8498", "html_url": "https://github.com/Rust-GCC/gccrs/commit/931977d9191b542c356d2dfa3258c8d09a6b8498"}], "stats": {"total": 463, "additions": 168, "deletions": 295}, "files": [{"sha": "e6ab2a8f01c38a154cf6b7e6f9491f5c74e14257", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c61819ff0f851ca343362f742f819bb459880eb6", "patch": "@@ -1,5 +1,48 @@\n 2014-12-16  Tobias Burnus  <burnus@net-b.de>\n \n+\tPR fortran/54687\n+\t* gfortran.h (gfc_option_t): Remove flags which now\n+\thave a Var().\n+\t* lang.opt (flag-aggressive_function_elimination,\n+\tflag-align_commons, flag-all_intrinsics,\n+\tflag-allow_leading_underscore, flag-automatic, flag-backslash,\n+\tflag-backtrace, flag-blas_matmul_limit, flag-cray_pointer,\n+\tflag-dollar_ok, flag-dump_fortran_original,\n+\tflag-dump_fortran_optimized, flag-external_blas, flag-f2c,\n+\tflag-implicit_none, flag-max_array_constructor,\n+\tflag-module_private, flag-pack_derived, flag-range_check,\n+\tflag-recursive, flag-repack_arrays, flag-sign_zero,\n+\tflag-underscoring): Add Var() and, where applicable, Enum().\n+\t* options.c (gfc_init_options, gfc_post_options,\n+\tgfc_handle_option): Update for *.opt changes.\n+\t* arith.c: Update for flag-variable name changes.\n+\t* array.c: Ditto.\n+\t* cpp.c: Ditto.\n+\t* decl.c: Ditto.\n+\t* expr.c: Ditto.\n+\t* f95-lang.c: Ditto.\n+\t* frontend-passes.c: Ditto.\n+\t* intrinsic.c: Ditto.\n+\t* io.c: Ditto.\n+\t* match.c: Ditto.\n+\t* module.c: Ditto.\n+\t* parse.c: Ditto.\n+\t* primary.c: Ditto.\n+\t* resolve.c: Ditto.\n+\t* scanner.c: Ditto.\n+\t* simplify.c: Ditto.\n+\t* symbol.c: Ditto.\n+\t* trans-array.c: Ditto.\n+\t* trans-common.c: Ditto.\n+\t* trans-decl.c: Ditto.\n+\t* trans-expr.c: Ditto.\n+\t* trans-intrinsic.c: Ditto.\n+\t* trans-openmp.c: Ditto.\n+\t* trans-types.c: Ditto.\n+\n+2014-12-16  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/54687\n \t* lang.opt (fsecond-underscore, frecord-marker=8, frecord-marker=4,\n \tfrealloc-lhs, freal-8-real-16, freal-8-real-10, freal-8-real-4,\n \tfreal-4-real-16, freal-4-real-10, freal-4-real-8, fprotect-parens,"}, {"sha": "e8a5efe67908757025b1137dc795c04e11e07466", "filename": "gcc/fortran/arith.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Farith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Farith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.c?ref=c61819ff0f851ca343362f742f819bb459880eb6", "patch": "@@ -301,7 +301,7 @@ gfc_check_integer_range (mpz_t p, int kind)\n     }\n \n \n-  if (gfc_option.flag_range_check == 0)\n+  if (flag_range_check == 0)\n     return result;\n \n   if (mpz_cmp (p, gfc_integer_kinds[i].min_int) < 0\n@@ -333,12 +333,12 @@ gfc_check_real_range (mpfr_t p, int kind)\n \n   if (mpfr_inf_p (p))\n     {\n-      if (gfc_option.flag_range_check != 0)\n+      if (flag_range_check != 0)\n \tretval = ARITH_OVERFLOW;\n     }\n   else if (mpfr_nan_p (p))\n     {\n-      if (gfc_option.flag_range_check != 0)\n+      if (flag_range_check != 0)\n \tretval = ARITH_NAN;\n     }\n   else if (mpfr_sgn (q) == 0)\n@@ -348,14 +348,14 @@ gfc_check_real_range (mpfr_t p, int kind)\n     }\n   else if (mpfr_cmp (q, gfc_real_kinds[i].huge) > 0)\n     {\n-      if (gfc_option.flag_range_check == 0)\n+      if (flag_range_check == 0)\n \tmpfr_set_inf (p, mpfr_sgn (p));\n       else\n \tretval = ARITH_OVERFLOW;\n     }\n   else if (mpfr_cmp (q, gfc_real_kinds[i].subnormal) < 0)\n     {\n-      if (gfc_option.flag_range_check == 0)\n+      if (flag_range_check == 0)\n \t{\n \t  if (mpfr_sgn (p) < 0)\n \t    {\n@@ -736,7 +736,7 @@ gfc_arith_divide (gfc_expr *op1, gfc_expr *op2, gfc_expr **resultp)\n       break;\n \n     case BT_REAL:\n-      if (mpfr_sgn (op2->value.real) == 0 && gfc_option.flag_range_check == 1)\n+      if (mpfr_sgn (op2->value.real) == 0 && flag_range_check == 1)\n \t{\n \t  rc = ARITH_DIV0;\n \t  break;\n@@ -748,7 +748,7 @@ gfc_arith_divide (gfc_expr *op1, gfc_expr *op2, gfc_expr **resultp)\n \n     case BT_COMPLEX:\n       if (mpc_cmp_si_si (op2->value.complex, 0, 0) == 0\n-\t  && gfc_option.flag_range_check == 1)\n+\t  && flag_range_check == 1)\n \t{\n \t  rc = ARITH_DIV0;\n \t  break;\n@@ -863,7 +863,7 @@ arith_power (gfc_expr *op1, gfc_expr *op2, gfc_expr **resultp)\n \t\t    int i;\n \t\t    i = gfc_validate_kind (BT_INTEGER, result->ts.kind, false);\n \n-\t\t    if (gfc_option.flag_range_check)\n+\t\t    if (flag_range_check)\n \t\t      rc = ARITH_OVERFLOW;\n \n \t\t    /* Still, we want to give the same value as the\n@@ -1978,7 +1978,7 @@ gfc_int2int (gfc_expr *src, int kind)\n \n   /*  If we do not trap numeric overflow, we need to convert the number to\n       signed, throwing away high-order bits if necessary.  */\n-  if (gfc_option.flag_range_check == 0)\n+  if (flag_range_check == 0)\n     {\n       int k;\n "}, {"sha": "e88ba668adb186f17b053d7b49fe454d5b5222fb", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=c61819ff0f851ca343362f742f819bb459880eb6", "patch": "@@ -21,6 +21,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n+#include \"flags.h\"\n #include \"gfortran.h\"\n #include \"match.h\"\n #include \"constructor.h\"\n@@ -1654,7 +1655,7 @@ gfc_expand_constructor (gfc_expr *e, bool fatal)\n \n   /* If we can successfully get an array element at the max array size then\n      the array is too big to expand, so we just return.  */\n-  f = gfc_get_array_element (e, gfc_option.flag_max_array_constructor);\n+  f = gfc_get_array_element (e, flag_max_array_constructor);\n   if (f != NULL)\n     {\n       gfc_free_expr (f);\n@@ -1663,8 +1664,7 @@ gfc_expand_constructor (gfc_expr *e, bool fatal)\n \t  gfc_error (\"The number of elements in the array constructor \"\n \t\t     \"at %L requires an increase of the allowed %d \"\n \t\t     \"upper limit.   See %<-fmax-array-constructor%> \"\n-\t\t     \"option\", &e->where,\n-\t\t     gfc_option.flag_max_array_constructor);\n+\t\t     \"option\", &e->where, flag_max_array_constructor);\n \t  return false;\n \t}\n       return true;"}, {"sha": "70f83ee4762ede2ea521bf8d34fad2a782e74810", "filename": "gcc/fortran/cpp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Fcpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Fcpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcpp.c?ref=c61819ff0f851ca343362f742f819bb459880eb6", "patch": "@@ -170,7 +170,7 @@ cpp_define_builtins (cpp_reader *pfile)\n   cpp_define (pfile, \"__GFORTRAN__=1\");\n   cpp_define (pfile, \"_LANGUAGE_FORTRAN=1\");\n \n-  if (gfc_option.gfc_flag_openmp)\n+  if (flag_openmp)\n     cpp_define (pfile, \"_OPENMP=201307\");\n \n   /* The defines below are necessary for the TARGET_* macros.\n@@ -470,7 +470,7 @@ gfc_cpp_post_options (void)\n \n   cpp_option->cpp_pedantic = pedantic;\n \n-  cpp_option->dollars_in_ident = gfc_option.flag_dollar_ok;\n+  cpp_option->dollars_in_ident = flag_dollar_ok;\n   cpp_option->discard_comments = gfc_cpp_option.discard_comments;\n   cpp_option->discard_comments_in_macro_exp = gfc_cpp_option.discard_comments_in_macro_exp;\n   cpp_option->print_include_names = gfc_cpp_option.print_include_names;"}, {"sha": "8d01c453e89293a26535975e4955bf29ff09133b", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=c61819ff0f851ca343362f742f819bb459880eb6", "patch": "@@ -1852,7 +1852,7 @@ variable_decl (int elem)\n       goto cleanup;\n     }\n \n-  if (gfc_option.flag_cray_pointer)\n+  if (flag_cray_pointer)\n     cp_as = gfc_copy_array_spec (as);\n \n   /* At this point, we know for sure if the symbol is PARAMETER and can thus\n@@ -1921,7 +1921,7 @@ variable_decl (int elem)\n   /*  If this symbol has already shown up in a Cray Pointer declaration,\n       and this is not a component declaration,\n       then we want to set the type & bail out.  */\n-  if (gfc_option.flag_cray_pointer && gfc_current_state () != COMP_DERIVED)\n+  if (flag_cray_pointer && gfc_current_state () != COMP_DERIVED)\n     {\n       gfc_find_symbol (name, gfc_current_ns, 1, &sym);\n       if (sym != NULL && sym->attr.cray_pointee)\n@@ -6769,7 +6769,7 @@ gfc_match_pointer (void)\n   gfc_gobble_whitespace ();\n   if (gfc_peek_ascii_char () == '(')\n     {\n-      if (!gfc_option.flag_cray_pointer)\n+      if (!flag_cray_pointer)\n \t{\n \t  gfc_error (\"Cray pointer declaration at %C requires -fcray-pointer \"\n \t\t     \"flag\");"}, {"sha": "a887d4c56610ccb1576cd03f9f73be330298e6b3", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=c61819ff0f851ca343362f742f819bb459880eb6", "patch": "@@ -1530,13 +1530,12 @@ find_array_section (gfc_expr *expr, gfc_ref *ref)\n \t}\n \n       limit = mpz_get_ui (ptr);\n-      if (limit >= gfc_option.flag_max_array_constructor)\n+      if (limit >= flag_max_array_constructor)\n         {\n \t  gfc_error (\"The number of elements in the array constructor \"\n \t\t     \"at %L requires an increase of the allowed %d \"\n \t\t     \"upper limit.   See -fmax-array-constructor \"\n-\t\t     \"option\", &expr->where,\n-\t\t     gfc_option.flag_max_array_constructor);\n+\t\t     \"option\", &expr->where, flag_max_array_constructor);\n \t  return false;\n \t}\n "}, {"sha": "10542307a354c9946b53129689b72f1881f83c87", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=c61819ff0f851ca343362f742f819bb459880eb6", "patch": "@@ -1139,9 +1139,7 @@ gfc_init_builtin_functions (void)\n #include \"../sync-builtins.def\"\n #undef DEF_SYNC_BUILTIN\n \n-  if (gfc_option.gfc_flag_openmp\n-      || gfc_option.gfc_flag_openmp_simd\n-      || flag_tree_parallelize_loops)\n+  if (flag_openmp || flag_openmp_simd || flag_tree_parallelize_loops)\n     {\n #undef DEF_GOMP_BUILTIN\n #define DEF_GOMP_BUILTIN(code, name, type, attr) \\"}, {"sha": "7d59f2ebd6bb4e070c023e4ea91c57d130bac30c", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=c61819ff0f851ca343362f742f819bb459880eb6", "patch": "@@ -108,7 +108,7 @@ gfc_run_passes (gfc_namespace *ns)\n     {\n       optimize_namespace (ns);\n       optimize_reduction (ns);\n-      if (gfc_option.dump_fortran_optimized)\n+      if (flag_dump_fortran_optimized)\n \tgfc_dump_parse_tree (ns, stdout);\n \n       expr_array.release ();\n@@ -389,7 +389,7 @@ cfe_register_funcs (gfc_expr **e, int *walk_subtrees ATTRIBUTE_UNUSED,\n \n       /* Only eliminate potentially impure functions if the\n \t user specifically requested it.  */\n-      if (!gfc_option.flag_aggressive_function_elimination\n+      if (!flag_aggressive_function_elimination\n \t  && !(*e)->value.function.esym->attr.pure\n \t  && !(*e)->value.function.esym->attr.implicit_pure)\n \treturn 0;"}, {"sha": "0f8b2be596586bcd71263ec1a09afcd1a0aad5cc", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=c61819ff0f851ca343362f742f819bb459880eb6", "patch": "@@ -2429,42 +2429,17 @@ typedef struct\n   int max_continue_fixed;\n   int max_continue_free;\n   int max_identifier_length;\n-  int dump_fortran_original;\n-  int dump_fortran_optimized;\n \n   int max_errors;\n \n-  int flag_all_intrinsics;\n-  int flag_dollar_ok;\n-  int flag_underscoring;\n-  int flag_implicit_none;\n-  int flag_max_array_constructor;\n-  int flag_range_check;\n-  int flag_pack_derived;\n-  int flag_repack_arrays;\n   int flag_preprocessed;\n-  int flag_f2c;\n-  int flag_automatic;\n-  int flag_backslash;\n-  int flag_backtrace;\n-  int flag_allow_leading_underscore;\n-  int flag_external_blas;\n-  int blas_matmul_limit;\n-  int flag_cray_pointer;\n   int flag_d_lines;\n-  int gfc_flag_openmp;\n-  int gfc_flag_openmp_simd;\n-  int flag_sign_zero;\n-  int flag_module_private;\n-  int flag_recursive;\n   int flag_init_integer;\n   int flag_init_integer_value;\n   int flag_init_real;\n   int flag_init_logical;\n   int flag_init_character;\n   char flag_init_character_value;\n-  int flag_align_commons;\n-  int flag_aggressive_function_elimination;\n \n   int fpe;\n   int fpe_summary;"}, {"sha": "415a7c9920630037a47336fc59a1c6bcf4b79d43", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=c61819ff0f851ca343362f742f819bb459880eb6", "patch": "@@ -4264,7 +4264,7 @@ gfc_check_intrinsic_standard (const gfc_intrinsic_sym* isym,\n   const char* symstd_msg;\n \n   /* For -fall-intrinsics, just succeed.  */\n-  if (gfc_option.flag_all_intrinsics)\n+  if (flag_all_intrinsics)\n     return true;\n \n   /* Find the symbol's standard message for later usage.  */\n@@ -4623,8 +4623,7 @@ gfc_convert_type_warn (gfc_expr *expr, gfc_typespec *ts, int eflag, int wflag)\n     }\n   else if (wflag)\n     {\n-      if (gfc_option.flag_range_check\n-\t  && expr->expr_type == EXPR_CONSTANT\n+      if (flag_range_check && expr->expr_type == EXPR_CONSTANT\n \t  && from_ts.type == ts->type)\n \t{\n \t  /* Do nothing. Constants of the same type are range-checked"}, {"sha": "dca0829eaee505d513e3a65bae61ed38e190a5a1", "filename": "gcc/fortran/io.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Fio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Fio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fio.c?ref=c61819ff0f851ca343362f742f819bb459880eb6", "patch": "@@ -157,7 +157,7 @@ next_char (gfc_instring in_string)\n \tc = '\\0';\n     }\n \n-  if (gfc_option.flag_backslash && c == '\\\\')\n+  if (flag_backslash && c == '\\\\')\n     {\n       locus old_locus = gfc_current_locus;\n "}, {"sha": "1e84c69053ea607aff0cc0bfaed6df1f78e1b1dd", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=c61819ff0f851ca343362f742f819bb459880eb6", "patch": "@@ -346,35 +346,35 @@ Fortran Joined\n ; Documented in common.opt\n \n faggressive-function-elimination\n-Fortran\n+Fortran Var(flag_aggressive_function_elimination)\n Eliminate multiple function invokations also for impure functions\n \n falign-commons\n-Fortran\n+Fortran Var(flag_align_commons) Init(1)\n Enable alignment of COMMON blocks\n \n fall-intrinsics\n-Fortran RejectNegative\n+Fortran RejectNegative Var(flag_all_intrinsics)\n All intrinsics procedures are available regardless of selected standard\n \n fallow-leading-underscore\n-Fortran Undocumented\n+Fortran Undocumented Var(flag_allow_leading_underscore)\n ; For internal use only: allow the first character of symbol names to be an underscore\n \n fautomatic\n-Fortran\n+Fortran Var(flag_automatic) Init(1)\n Do not treat local variables and COMMON blocks as if they were named in SAVE statements\n \n fbackslash\n-Fortran\n+Fortran Var(flag_backslash)\n Specify that backslash in string introduces an escape character\n \n fbacktrace\n-Fortran\n+Fortran Var(flag_backtrace) Init(1)\n Produce a backtrace when a runtime error is encountered\n \n fblas-matmul-limit=\n-Fortran RejectNegative Joined UInteger\n+Fortran RejectNegative Joined UInteger Var(flag_blas_matmul_limit) Init(30)\n -fblas-matmul-limit=<n>\tSize of the smallest matrix for which matmul will use BLAS\n \n fcheck-array-temporaries\n@@ -398,7 +398,7 @@ Fortran RejectNegative\n Swap endianness for unformatted files\n \n fcray-pointer\n-Fortran\n+Fortran Var(flag_cray_pointer)\n Use the Cray Pointer extension\n \n fd-lines-as-code\n@@ -422,31 +422,31 @@ Fortran Var(flag_default_real)\n Set the default real kind to an 8 byte wide type\n \n fdollar-ok\n-Fortran\n+Fortran Var(flag_dollar_ok)\n Allow dollar signs in entity names\n \n fdump-core\n Fortran Ignore\n Does nothing. Preserved for backward compatibility.\n \n fdump-fortran-original\n-Fortran\n+Fortran Var(flag_dump_fortran_original)\n Display the code tree after parsing\n \n fdump-fortran-optimized\n-Fortran\n+Fortran Var(flag_dump_fortran_optimized)\n Display the code tree after front end optimization\n \n fdump-parse-tree\n-Fortran\n+Fortran Alias(fdump-fortran-original)\n Display the code tree after parsing; deprecated option\n \n fexternal-blas\n-Fortran\n+Fortran Var(flag_external_blas)\n Specify that an external BLAS library should be used for matmul calls on large-size arrays\n \n ff2c\n-Fortran\n+Fortran Var(flag_f2c)\n Use f2c calling convention\n \n ffixed-form\n@@ -498,7 +498,7 @@ Fortran Var(flag_frontend_optimize) Init(-1)\n Enable front end optimization\n \n fimplicit-none\n-Fortran\n+Fortran Var(flag_implicit_none)\n Specify that no implicit typing is allowed, unless overridden by explicit IMPLICIT statements\n \n finit-character=\n@@ -522,7 +522,7 @@ Fortran RejectNegative Joined\n -finit-real=<zero|nan|inf|-inf>\tInitialize local real variables\n \n fmax-array-constructor=\n-Fortran RejectNegative Joined UInteger\n+Fortran RejectNegative Joined UInteger Var(flag_max_array_constructor) Init(65535)\n -fmax-array-constructor=<n>\tMaximum number of objects in an array constructor\n \n fmax-identifier-length=\n@@ -542,7 +542,7 @@ Fortran Var(flag_stack_arrays) Init(-1)\n Put all local arrays on stack.\n \n fmodule-private\n-Fortran\n+Fortran Var(flag_module_private)\n Set default accessibility of module entities to PRIVATE.\n \n fopenmp\n@@ -554,7 +554,7 @@ Fortran\n ; Documented in C\n \n fpack-derived\n-Fortran\n+Fortran Var(flag_pack_derived)\n Try to lay out derived types as compactly as possible\n \n fpreprocessed\n@@ -566,7 +566,7 @@ Fortran Var(flag_protect_parens) Init(-1)\n Protect parentheses in expressions\n \n frange-check\n-Fortran\n+Fortran Var(flag_range_check) Init(1)\n Enable range checking during compilation\n \n freal-4-real-8\n@@ -606,11 +606,11 @@ Fortran RejectNegative Var(flag_record_marker,8)\n Use an 8-byte record marker for unformatted files\n \n frecursive\n-Fortran\n+Fortran Var(flag_recursive)\n Allocate local variables on the stack to allow indirect recursion\n \n frepack-arrays\n-Fortran\n+Fortran Var(flag_repack_arrays)\n Copy array sections into a contiguous block on procedure entry\n \n fcoarray=\n@@ -630,11 +630,11 @@ Fortran Var(flag_short_enums)\n ; Documented in C\n \n fsign-zero\n-Fortran\n+Fortran Var(flag_sign_zero) Init(1)\n Apply negative sign to zero values\n \n funderscoring\n-Fortran\n+Fortran Var(flag_underscoring) Init(1)\n Append underscores to externally visible names\n \n fwhole-file"}, {"sha": "0a2fb0dd95f32664b38772e4e3ad8eebc352cfde", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=c61819ff0f851ca343362f742f819bb459880eb6", "patch": "@@ -530,7 +530,7 @@ gfc_match_name (char *buffer)\n   gfc_gobble_whitespace ();\n \n   c = gfc_next_ascii_char ();\n-  if (!(ISALPHA (c) || (c == '_' && gfc_option.flag_allow_leading_underscore)))\n+  if (!(ISALPHA (c) || (c == '_' && flag_allow_leading_underscore)))\n     {\n       if (!gfc_error_flag_test () && c != '(')\n \tgfc_error (\"Invalid character in name at %C\");\n@@ -553,9 +553,9 @@ gfc_match_name (char *buffer)\n       old_loc = gfc_current_locus;\n       c = gfc_next_ascii_char ();\n     }\n-  while (ISALNUM (c) || c == '_' || (gfc_option.flag_dollar_ok && c == '$'));\n+  while (ISALNUM (c) || c == '_' || (flag_dollar_ok && c == '$'));\n \n-  if (c == '$' && !gfc_option.flag_dollar_ok)\n+  if (c == '$' && !flag_dollar_ok)\n     {\n       gfc_fatal_error (\"Invalid character %<$%> at %L. Use %<-fdollar-ok%> to \"\n \t\t       \"allow it as an extension\", &old_loc);"}, {"sha": "f6e5eec0a6dc94e3c18c0c96ba9ac1b41f1e64e8", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=c61819ff0f851ca343362f742f819bb459880eb6", "patch": "@@ -5249,7 +5249,7 @@ check_access (gfc_access specific_access, gfc_access default_access)\n   if (specific_access == ACCESS_PRIVATE)\n     return FALSE;\n \n-  if (gfc_option.flag_module_private)\n+  if (flag_module_private)\n     return default_access == ACCESS_PUBLIC;\n   else\n     return default_access != ACCESS_PRIVATE;"}, {"sha": "5dcb5d84b09cc599e83987ea16b665d8908bc3b3", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 14, "deletions": 139, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=c61819ff0f851ca343362f742f819bb459880eb6", "patch": "@@ -84,43 +84,17 @@ gfc_init_options (unsigned int decoded_options_count,\n   gfc_option.max_continue_fixed = 255;\n   gfc_option.max_continue_free = 255;\n   gfc_option.max_identifier_length = GFC_MAX_SYMBOL_LEN;\n-  gfc_option.flag_max_array_constructor = 65535;\n   gfc_option.convert = GFC_CONVERT_NATIVE;\n-  gfc_option.dump_fortran_original = 0;\n-  gfc_option.dump_fortran_optimized = 0;\n-\n   gfc_option.max_errors = 25;\n \n-  gfc_option.flag_all_intrinsics = 0;\n-  gfc_option.flag_dollar_ok = 0;\n-  gfc_option.flag_underscoring = 1;\n-  gfc_option.flag_f2c = 0;\n-  gfc_option.flag_implicit_none = 0;\n-\n-  gfc_option.flag_range_check = 1;\n-  gfc_option.flag_pack_derived = 0;\n-  gfc_option.flag_repack_arrays = 0;\n   gfc_option.flag_preprocessed = 0;\n-  gfc_option.flag_automatic = 1;\n-  gfc_option.flag_backslash = 0;\n-  gfc_option.flag_module_private = 0;\n-  gfc_option.flag_backtrace = 1;\n-  gfc_option.flag_allow_leading_underscore = 0;\n-  gfc_option.flag_external_blas = 0;\n-  gfc_option.blas_matmul_limit = 30;\n-  gfc_option.flag_cray_pointer = 0;\n   gfc_option.flag_d_lines = -1;\n-  gfc_option.gfc_flag_openmp = 0;\n-  gfc_option.flag_sign_zero = 1;\n-  gfc_option.flag_recursive = 0;\n   gfc_option.flag_init_integer = GFC_INIT_INTEGER_OFF;\n   gfc_option.flag_init_integer_value = 0;\n   gfc_option.flag_init_real = GFC_INIT_REAL_OFF;\n   gfc_option.flag_init_logical = GFC_INIT_LOGICAL_OFF;\n   gfc_option.flag_init_character = GFC_INIT_CHARACTER_OFF;\n   gfc_option.flag_init_character_value = (char)0;\n-  gfc_option.flag_align_commons = 1;\n-  gfc_option.flag_aggressive_function_elimination = 0;\n   \n   gfc_option.fpe = 0;\n   /* All except GFC_FPE_INEXACT.  */\n@@ -262,7 +236,7 @@ gfc_post_options (const char **pfilename)\n     gfc_option.rtcheck |= GFC_RTCHECK_BOUNDS;\n \n   if (flag_compare_debug)\n-    gfc_option.dump_fortran_original = 0;\n+    flag_dump_fortran_original = 0;\n \n   /* Make -fmax-errors visible to gfortran's diagnostic machinery.  */\n   if (global_options_set.x_flag_max_errors)\n@@ -347,33 +321,32 @@ gfc_post_options (const char **pfilename)\n      use it if we're trying to be compatible with f2c, and not\n      otherwise.  */\n   if (flag_second_underscore == -1)\n-    flag_second_underscore = gfc_option.flag_f2c;\n+    flag_second_underscore = flag_f2c;\n \n-  if (!gfc_option.flag_automatic && flag_max_stack_var_size != -2\n+  if (!flag_automatic && flag_max_stack_var_size != -2\n       && flag_max_stack_var_size != 0)\n     gfc_warning_now (\"Flag %<-fno-automatic%> overwrites %<-fmax-stack-var-size=%d%>\",\n \t\t     flag_max_stack_var_size);\n-  else if (!gfc_option.flag_automatic && gfc_option.flag_recursive)\n+  else if (!flag_automatic && flag_recursive)\n     gfc_warning_now (\"Flag %<-fno-automatic%> overwrites %<-frecursive%>\");\n-  else if (!gfc_option.flag_automatic && gfc_option.gfc_flag_openmp)\n+  else if (!flag_automatic && flag_openmp)\n     gfc_warning_now (\"Flag %<-fno-automatic%> overwrites %<-frecursive%> implied by \"\n \t\t     \"%<-fopenmp%>\");\n-  else if (flag_max_stack_var_size != -2 && gfc_option.flag_recursive)\n+  else if (flag_max_stack_var_size != -2 && flag_recursive)\n     gfc_warning_now (\"Flag %<-frecursive%> overwrites %<-fmax-stack-var-size=%d%>\",\n \t\t     flag_max_stack_var_size);\n-  else if (flag_max_stack_var_size != -2 && gfc_option.gfc_flag_openmp)\n+  else if (flag_max_stack_var_size != -2 && flag_openmp)\n     gfc_warning_now (\"Flag %<-fmax-stack-var-size=%d%> overwrites %<-frecursive%> \"\n \t\t     \"implied by %<-fopenmp%>\", flag_max_stack_var_size);\n \n   /* Implement -frecursive as -fmax-stack-var-size=-1.  */\n-  if (gfc_option.flag_recursive)\n+  if (flag_recursive)\n     flag_max_stack_var_size = -1;\n \n   /* Implied -frecursive; implemented as -fmax-stack-var-size=-1.  */\n-  if (flag_max_stack_var_size == -2 && gfc_option.gfc_flag_openmp\n-      && gfc_option.flag_automatic)\n+  if (flag_max_stack_var_size == -2 && flag_openmp && flag_automatic)\n     {\n-      gfc_option.flag_recursive = 1;\n+      flag_recursive = 1;\n       flag_max_stack_var_size = -1;\n     }\n \n@@ -382,7 +355,7 @@ gfc_post_options (const char **pfilename)\n     flag_max_stack_var_size = 32768;\n \n   /* Implement -fno-automatic as -fmax-stack-var-size=0.  */\n-  if (!gfc_option.flag_automatic)\n+  if (!flag_automatic)\n     flag_max_stack_var_size = 0;\n   \n   /* Optimization implies front end optimization, unless the user\n@@ -391,6 +364,9 @@ gfc_post_options (const char **pfilename)\n   if (flag_frontend_optimize == -1)\n     flag_frontend_optimize = optimize;\n \n+  if (flag_max_array_constructor < 65535)\n+    flag_max_array_constructor = 65535;\n+\n   if (flag_fixed_line_length != 0 && flag_fixed_line_length < 7)\n     gfc_fatal_error (\"Fixed line length must be at least seven\");\n \n@@ -567,50 +543,10 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n       result = false;\n       break;\n \n-    case OPT_fall_intrinsics:\n-      gfc_option.flag_all_intrinsics = 1;\n-      break;\n-\n-    case OPT_fautomatic:\n-      gfc_option.flag_automatic = value;\n-      break;\n-\n-    case OPT_fallow_leading_underscore:\n-      gfc_option.flag_allow_leading_underscore = value;\n-      break;\n-      \n-    case OPT_fbackslash:\n-      gfc_option.flag_backslash = value;\n-      break;\n-      \n-    case OPT_fbacktrace:\n-      gfc_option.flag_backtrace = value;\n-      break;\n-      \n     case OPT_fcheck_array_temporaries:\n       gfc_option.rtcheck |= GFC_RTCHECK_ARRAY_TEMPS;\n       break;\n       \n-    case OPT_fcray_pointer:\n-      gfc_option.flag_cray_pointer = value;\n-      break;\n-\n-    case OPT_ff2c:\n-      gfc_option.flag_f2c = value;\n-      break;\n-\n-    case OPT_fdollar_ok:\n-      gfc_option.flag_dollar_ok = value;\n-      break;\n-\n-    case OPT_fexternal_blas:\n-      gfc_option.flag_external_blas = value;\n-      break;\n-\n-    case OPT_fblas_matmul_limit_:\n-      gfc_option.blas_matmul_limit = value;\n-      break;\n-\n     case OPT_fd_lines_as_code:\n       gfc_option.flag_d_lines = 1;\n       break;\n@@ -619,15 +555,6 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n       gfc_option.flag_d_lines = 0;\n       break;\n \n-    case OPT_fdump_fortran_original:\n-    case OPT_fdump_parse_tree:\n-      gfc_option.dump_fortran_original = value;\n-      break;\n-\n-    case OPT_fdump_fortran_optimized:\n-      gfc_option.dump_fortran_optimized = value;\n-      break;\n-\n     case OPT_ffixed_form:\n       gfc_option.source_form = FORM_FIXED;\n       break;\n@@ -636,29 +563,13 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n       gfc_option.source_form = FORM_FREE;\n       break;\n \n-    case OPT_fopenmp:\n-      gfc_option.gfc_flag_openmp = value;\n-      break;\n-\n-    case OPT_fopenmp_simd:\n-      gfc_option.gfc_flag_openmp_simd = value;\n-      break;\n-\n-    case OPT_funderscoring:\n-      gfc_option.flag_underscoring = value;\n-      break;\n-\n     case OPT_static_libgfortran:\n #ifndef HAVE_LD_STATIC_DYNAMIC\n       gfc_fatal_error (\"%<-static-libgfortran%> is not supported in this \"\n \t\t       \"configuration\");\n #endif\n       break;\n \n-    case OPT_fimplicit_none:\n-      gfc_option.flag_implicit_none = value;\n-      break;\n-\n     case OPT_fintrinsic_modules_path:\n     case OPT_fintrinsic_modules_path_:\n \n@@ -671,26 +582,6 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n       gfc_add_intrinsic_modules_path (arg);\n       break;\n \n-    case OPT_fmax_array_constructor_:\n-      gfc_option.flag_max_array_constructor = value > 65535 ? value : 65535;\n-      break;\n-\n-    case OPT_fmodule_private:\n-      gfc_option.flag_module_private = value;\n-      break;\n-      \n-    case OPT_frange_check:\n-      gfc_option.flag_range_check = value;\n-      break;\n-\n-    case OPT_fpack_derived:\n-      gfc_option.flag_pack_derived = value;\n-      break;\n-\n-    case OPT_frepack_arrays:\n-      gfc_option.flag_repack_arrays = value;\n-      break;\n-\n     case OPT_fpreprocessed:\n       gfc_option.flag_preprocessed = value;\n       break;\n@@ -761,10 +652,6 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n       gfc_handle_module_path_options (arg);\n       break;\n \n-    case OPT_fsign_zero:\n-      gfc_option.flag_sign_zero = value;\n-      break;\n-\n     case OPT_ffpe_trap_:\n       gfc_handle_fpe_option (arg, true);\n       break;\n@@ -841,18 +728,6 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n       gfc_option.convert = GFC_CONVERT_SWAP;\n       break;\n \n-    case OPT_frecursive:\n-      gfc_option.flag_recursive = value;\n-      break;\n-\n-    case OPT_falign_commons:\n-      gfc_option.flag_align_commons = value;\n-      break;\n-\n-    case  OPT_faggressive_function_elimination:\n-      gfc_option.flag_aggressive_function_elimination = value;\n-      break;\n-\n     case OPT_fcheck_:\n       gfc_handle_runtime_check_option (arg);\n       break;"}, {"sha": "b4fa61ea0925c5290a2cf9b1c8b3f4791aa1706d", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=c61819ff0f851ca343362f742f819bb459880eb6", "patch": "@@ -22,6 +22,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include <setjmp.h>\n #include \"coretypes.h\"\n+#include \"flags.h\"\n #include \"gfortran.h\"\n #include \"match.h\"\n #include \"parse.h\"\n@@ -574,7 +575,7 @@ decode_statement (void)\n /* Like match, but don't match anything if not -fopenmp.  */\n #define matcho(keyword, subr, st)\t\t\t\t\\\n     do {\t\t\t\t\t\t\t\\\n-      if (!gfc_option.gfc_flag_openmp)\t\t\t\t\\\n+      if (!flag_openmp)\t\t\t\t\t\t\\\n \t;\t\t\t\t\t\t\t\\\n       else if (match_word (keyword, subr, &old_locus)\t\t\\\n \t       == MATCH_YES)\t\t\t\t\t\\\n@@ -769,7 +770,7 @@ decode_omp_directive (void)\n      not -fopenmp and simd_matched is false, i.e. if a directive other\n      than one marked with match has been seen.  */\n \n-  if (gfc_option.gfc_flag_openmp || simd_matched)\n+  if (flag_openmp || simd_matched)\n     {\n       if (!gfc_error_check ())\n \tgfc_error_now (\"Unclassifiable OpenMP directive at %C\");\n@@ -896,9 +897,7 @@ next_free (void)\n \t  return decode_gcc_attribute ();\n \n \t}\n-      else if (c == '$'\n-\t       && (gfc_option.gfc_flag_openmp\n-\t\t   || gfc_option.gfc_flag_openmp_simd))\n+      else if (c == '$' && (flag_openmp || flag_openmp_simd))\n \t{\n \t  int i;\n \n@@ -988,8 +987,7 @@ next_fixed (void)\n \t      return decode_gcc_attribute ();\n \t    }\n \t  else if (c == '$'\n-\t\t   && (gfc_option.gfc_flag_openmp\n-\t\t       || gfc_option.gfc_flag_openmp_simd))\n+\t\t   && (flag_openmp || flag_openmp_simd))\n \t    {\n \t      for (i = 0; i < 4; i++, c = gfc_next_char_literal (NONSTRING))\n \t\tgcc_assert ((char) gfc_wide_tolower (c) == \"$omp\"[i]);\n@@ -5085,7 +5083,7 @@ gfc_parse_file (void)\n   gfc_resolve (gfc_current_ns);\n \n   /* Dump the parse tree if requested.  */\n-  if (gfc_option.dump_fortran_original)\n+  if (flag_dump_fortran_original)\n     gfc_dump_parse_tree (gfc_current_ns, stdout);\n \n   gfc_get_errors (NULL, &errors);\n@@ -5132,7 +5130,7 @@ gfc_parse_file (void)\n \n   /* Do the parse tree dump.  */ \n   gfc_current_ns\n-\t= gfc_option.dump_fortran_original ? gfc_global_ns_list : NULL;\n+\t= flag_dump_fortran_original ? gfc_global_ns_list : NULL;\n \n   for (; gfc_current_ns; gfc_current_ns = gfc_current_ns->sibling)\n     if (!gfc_current_ns->proc_name"}, {"sha": "77522e54bf040caaafc8a39fa749b40712a29a8f", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=c61819ff0f851ca343362f742f819bb459880eb6", "patch": "@@ -857,7 +857,7 @@ next_string_char (gfc_char_t delimiter, int *ret)\n       return 0;\n     }\n \n-  if (gfc_option.flag_backslash && c == '\\\\')\n+  if (flag_backslash && c == '\\\\')\n     {\n       old_locus = gfc_current_locus;\n \n@@ -929,7 +929,7 @@ match_charkind_name (char *name)\n \n       if (!ISALNUM (c)\n \t  && c != '_'\n-\t  && (c != '$' || !gfc_option.flag_dollar_ok))\n+\t  && (c != '$' || !flag_dollar_ok))\n \tbreak;\n \n       *name++ = c;"}, {"sha": "7ee0bab00be3ab7ddd35d6455b590320b669958c", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=c61819ff0f851ca343362f742f819bb459880eb6", "patch": "@@ -1558,7 +1558,7 @@ is_illegal_recursion (gfc_symbol* sym, gfc_namespace* context)\n     proc_sym = sym;\n \n   /* If sym is RECURSIVE, all is well of course.  */\n-  if (proc_sym->attr.recursive || gfc_option.flag_recursive)\n+  if (proc_sym->attr.recursive || flag_recursive)\n     return false;\n \n   /* Find the context procedure's \"real\" symbol if it has entries."}, {"sha": "d6b9bbfc3b7ed2151ea3cda2a1a56537b16637c1", "filename": "gcc/fortran/scanner.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Fscanner.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Fscanner.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fscanner.c?ref=c61819ff0f851ca343362f742f819bb459880eb6", "patch": "@@ -749,8 +749,7 @@ skip_free_comments (void)\n \t     2) handle OpenMP conditional compilation, where\n \t\t!$ should be treated as 2 spaces (for initial lines\n \t\tonly if followed by space).  */\n-\t  if ((gfc_option.gfc_flag_openmp\n-\t       || gfc_option.gfc_flag_openmp_simd) && at_bol)\n+\t  if ((flag_openmp || flag_openmp_simd) && at_bol)\n \t    {\n \t      locus old_loc = gfc_current_locus;\n \t      if (next_char () == '$')\n@@ -876,7 +875,7 @@ skip_fixed_comments (void)\n \t      && continue_line < gfc_linebuf_linenum (gfc_current_locus.lb))\n \t    continue_line = gfc_linebuf_linenum (gfc_current_locus.lb);\n \n-\t  if (gfc_option.gfc_flag_openmp || gfc_option.gfc_flag_openmp_simd)\n+\t  if (flag_openmp || flag_openmp_simd)\n \t    {\n \t      if (next_char () == '$')\n \t\t{\n@@ -1822,7 +1821,7 @@ include_line (gfc_char_t *line)\n \n   c = line;\n \n-  if (gfc_option.gfc_flag_openmp || gfc_option.gfc_flag_openmp_simd)\n+  if (flag_openmp || flag_openmp_simd)\n     {\n       if (gfc_current_form == FORM_FREE)\n \t{"}, {"sha": "26eb2e577bcea1dcc0fbe5a3c7b603eca04cb5e2", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=c61819ff0f851ca343362f742f819bb459880eb6", "patch": "@@ -153,7 +153,7 @@ convert_mpz_to_unsigned (mpz_t x, int bitsize)\n     {\n       /* Confirm that no bits above the signed range are unset if we\n \t are doing range checking.  */\n-      if (gfc_option.flag_range_check != 0)\n+      if (flag_range_check != 0)\n \tgcc_assert (mpz_scan0 (x, bitsize-1) == ULONG_MAX);\n \n       mpz_init_set_ui (mask, 1);\n@@ -184,7 +184,7 @@ gfc_convert_mpz_to_signed (mpz_t x, int bitsize)\n \n   /* Confirm that no bits above the unsigned range are set if we are\n      doing range checking.  */\n-  if (gfc_option.flag_range_check != 0)\n+  if (flag_range_check != 0)\n     gcc_assert (mpz_scan1 (x, bitsize) == ULONG_MAX);\n \n   if (mpz_tstbit (x, bitsize - 1) == 1)\n@@ -1261,7 +1261,7 @@ gfc_simplify_bessel_n2 (gfc_expr *order1, gfc_expr *order2, gfc_expr *x,\n \n   if (mpfr_cmp_ui (x->value.real, 0.0) == 0)\n     {\n-      if (!jn && gfc_option.flag_range_check)\n+      if (!jn && flag_range_check)\n \t{\n \t  gfc_error (\"Result of BESSEL_YN is -INF at %L\", &result->where);\n  \t  gfc_free_expr (result);\n@@ -1367,7 +1367,7 @@ gfc_simplify_bessel_n2 (gfc_expr *order1, gfc_expr *order2, gfc_expr *x,\n \n       /* Special case: For YN, if the previous N gave -INF, set\n \t also N+1 to -INF.  */\n-      if (!jn && !gfc_option.flag_range_check && mpfr_inf_p (last2))\n+      if (!jn && !flag_range_check && mpfr_inf_p (last2))\n \t{\n \t  mpfr_set_inf (e->value.real, -1);\n \t  gfc_constructor_append_expr (&result->value.constructor, e,\n@@ -4475,7 +4475,7 @@ gfc_simplify_nearest (gfc_expr *x, gfc_expr *s)\n \n   /* Only NaN can occur. Do not use range check as it gives an\n      error for denormal numbers.  */\n-  if (mpfr_nan_p (result->value.real) && gfc_option.flag_range_check)\n+  if (mpfr_nan_p (result->value.real) && flag_range_check)\n     {\n       gfc_error (\"Result of NEAREST is NaN at %L\", &result->where);\n       gfc_free_expr (result);\n@@ -5920,7 +5920,7 @@ gfc_simplify_sign (gfc_expr *x, gfc_expr *y)\n \tbreak;\n \n       case BT_REAL:\n-\tif (gfc_option.flag_sign_zero)\n+\tif (flag_sign_zero)\n \t  mpfr_copysign (result->value.real, x->value.real, y->value.real,\n \t\t\tGFC_RND_MODE);\n \telse\n@@ -6090,7 +6090,7 @@ gfc_simplify_spread (gfc_expr *source, gfc_expr *dim_expr, gfc_expr *ncopies_exp\n   else\n     mpz_init_set_ui (size, 1);\n \n-  if (mpz_get_si (size)*ncopies > gfc_option.flag_max_array_constructor)\n+  if (mpz_get_si (size)*ncopies > flag_max_array_constructor)\n     return NULL;\n \n   if (source->expr_type == EXPR_CONSTANT)"}, {"sha": "088fbbde6a175a2277121e5849998697169e50fc", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=c61819ff0f851ca343362f742f819bb459880eb6", "patch": "@@ -220,7 +220,7 @@ gfc_get_default_type (const char *name, gfc_namespace *ns)\n \n   letter = name[0];\n \n-  if (gfc_option.flag_allow_leading_underscore && letter == '_')\n+  if (flag_allow_leading_underscore && letter == '_')\n     gfc_fatal_error (\"Option %<-fallow-leading-underscore%> is for use only by \"\n \t\t     \"gfortran developers, and should not be used for \"\n \t\t     \"implicitly typed variables\");\n@@ -2372,7 +2372,7 @@ gfc_get_namespace (gfc_namespace *parent, int parent_types)\n \t  continue;\n \t}\n \n-      if (gfc_option.flag_implicit_none != 0)\n+      if (flag_implicit_none != 0)\n \t{\n \t  gfc_clear_ts (ts);\n \t  continue;"}, {"sha": "8f0baa62fcdddd225a16f153b8efca96ed750c5f", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=c61819ff0f851ca343362f742f819bb459880eb6", "patch": "@@ -5430,8 +5430,7 @@ gfc_conv_array_initializer (tree type, gfc_expr * expr)\n \t\t\t       \"constructor at %L requires an increase of \"\n \t\t\t       \"the allowed %d upper limit. See \"\n \t\t\t       \"%<-fmax-array-constructor%> option\",\n-\t\t\t       &expr->where,\n-\t\t\t       gfc_option.flag_max_array_constructor);\n+\t\t\t       &expr->where, flag_max_array_constructor);\n \t      return NULL_TREE;\n \t    }\n           if (mpz_cmp_si (c->offset, 0) != 0)"}, {"sha": "a7ae714721d1842c1a92086301306e87f378d1ec", "filename": "gcc/fortran/trans-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Ftrans-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Ftrans-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-common.c?ref=c61819ff0f851ca343362f742f819bb459880eb6", "patch": "@@ -254,7 +254,7 @@ gfc_sym_mangled_common_id (gfc_common_head *com)\n   if (strcmp (name, BLANK_COMMON_NAME) == 0)\n     return get_identifier (name);\n \n-  if (gfc_option.flag_underscoring)\n+  if (flag_underscoring)\n     {\n       has_underscore = strchr (name, '_') != 0;\n       if (flag_second_underscore && has_underscore)\n@@ -1125,7 +1125,7 @@ translate_common (gfc_common_head *common, gfc_symbol *var_list)\n \t\t       \"extension to COMMON %qs at %L\", sym->name,\n \t\t       common->name, &common->where);\n \n-\t  if (gfc_option.flag_align_commons)\n+\t  if (flag_align_commons)\n \t    offset = align_segment (&align);\n \n \t  if (offset)"}, {"sha": "f6286d4c5095e4d0550420e0ef7d8d1346dfc622", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 14, "deletions": 24, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=c61819ff0f851ca343362f742f819bb459880eb6", "patch": "@@ -393,7 +393,7 @@ gfc_sym_mangled_function_id (gfc_symbol * sym)\n       if (sym->attr.proc == PROC_INTRINSIC)\n \treturn get_identifier (sym->name);\n \n-      if (gfc_option.flag_underscoring)\n+      if (flag_underscoring)\n \t{\n \t  has_underscore = strchr (sym->name, '_') != 0;\n \t  if (flag_second_underscore && has_underscore)\n@@ -1013,7 +1013,7 @@ gfc_build_dummy_array_decl (gfc_symbol * sym, tree dummy)\n \n       /* Even when -frepack-arrays is used, symbols with TARGET attribute\n \t are not repacked.  */\n-      if (!gfc_option.flag_repack_arrays || sym->attr.target)\n+      if (!flag_repack_arrays || sym->attr.target)\n \t{\n \t  if (as->type == AS_ASSUMED_SIZE)\n \t    packed = PACKED_FULL;\n@@ -1838,7 +1838,7 @@ gfc_get_extern_function_decl (gfc_symbol * sym)\n \t    }\n \t}\n \n-      if (gfc_option.flag_f2c\n+      if (flag_f2c\n \t  && ((e.ts.type == BT_REAL && e.ts.kind == gfc_default_real_kind)\n \t      || e.ts.type == BT_COMPLEX))\n \t{\n@@ -1958,7 +1958,7 @@ build_function_decl (gfc_symbol * sym, bool global)\n   if (sym->attr.access == ACCESS_UNKNOWN && sym->module\n       && (sym->ns->default_access == ACCESS_PRIVATE\n \t  || (sym->ns->default_access == ACCESS_UNKNOWN\n-\t      && gfc_option.flag_module_private)))\n+\t      && flag_module_private)))\n     sym->attr.access = ACCESS_PRIVATE;\n \n   if (!current_function_decl\n@@ -3158,32 +3158,28 @@ gfc_build_intrinsic_function_decls (void)\n \n     gfor_fndecl_sgemm = gfc_build_library_function_decl\n \t\t\t  (get_identifier\n-\t\t\t     (gfc_option.flag_underscoring ? \"sgemm_\"\n-\t\t\t\t\t\t\t   : \"sgemm\"),\n+\t\t\t     (flag_underscoring ? \"sgemm_\" : \"sgemm\"),\n \t\t\t   void_type_node, 15, pchar_type_node,\n \t\t\t   pchar_type_node, pint, pint, pint, ps, ps, pint,\n \t\t\t   ps, pint, ps, ps, pint, integer_type_node,\n \t\t\t   integer_type_node);\n     gfor_fndecl_dgemm = gfc_build_library_function_decl\n \t\t\t  (get_identifier\n-\t\t\t     (gfc_option.flag_underscoring ? \"dgemm_\"\n-\t\t\t\t\t\t\t   : \"dgemm\"),\n+\t\t\t     (flag_underscoring ? \"dgemm_\" : \"dgemm\"),\n \t\t\t   void_type_node, 15, pchar_type_node,\n \t\t\t   pchar_type_node, pint, pint, pint, pd, pd, pint,\n \t\t\t   pd, pint, pd, pd, pint, integer_type_node,\n \t\t\t   integer_type_node);\n     gfor_fndecl_cgemm = gfc_build_library_function_decl\n \t\t\t  (get_identifier\n-\t\t\t     (gfc_option.flag_underscoring ? \"cgemm_\"\n-\t\t\t\t\t\t\t   : \"cgemm\"),\n+\t\t\t     (flag_underscoring ? \"cgemm_\" : \"cgemm\"),\n \t\t\t   void_type_node, 15, pchar_type_node,\n \t\t\t   pchar_type_node, pint, pint, pint, pc, pc, pint,\n \t\t\t   pc, pint, pc, pc, pint, integer_type_node,\n \t\t\t   integer_type_node);\n     gfor_fndecl_zgemm = gfc_build_library_function_decl\n \t\t\t  (get_identifier\n-\t\t\t     (gfc_option.flag_underscoring ? \"zgemm_\"\n-\t\t\t\t\t\t\t   : \"zgemm\"),\n+\t\t\t     (flag_underscoring ? \"zgemm_\" : \"zgemm\"),\n \t\t\t   void_type_node, 15, pchar_type_node,\n \t\t\t   pchar_type_node, pint, pint, pint, pz, pz, pint,\n \t\t\t   pz, pint, pz, pz, pint, integer_type_node,\n@@ -3845,8 +3841,7 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, gfc_wrapped_block * block)\n \t    gfc_trans_dummy_character (proc_sym, proc_sym->ts.u.cl, block);\n \t}\n       else\n-\tgcc_assert (gfc_option.flag_f2c\n-\t\t    && proc_sym->ts.type == BT_COMPLEX);\n+\tgcc_assert (flag_f2c && proc_sym->ts.type == BT_COMPLEX);\n     }\n \n   /* Initialize the INTENT(OUT) derived type dummy arguments.  This\n@@ -4426,7 +4421,7 @@ gfc_create_module_variable (gfc_symbol * sym)\n       && (sym->attr.access == ACCESS_UNKNOWN\n \t  && (sym->ns->default_access == ACCESS_PRIVATE\n \t      || (sym->ns->default_access == ACCESS_UNKNOWN\n-\t\t  && gfc_option.flag_module_private))))\n+\t\t  && flag_module_private))))\n     sym->attr.access = ACCESS_PRIVATE;\n \n   if (warn_unused_variable && !sym->attr.referenced\n@@ -5425,11 +5420,9 @@ create_main_function (tree fndecl)\n                             build_int_cst (integer_type_node,\n                                            0));\n     CONSTRUCTOR_APPEND_ELT (v, NULL_TREE,\n-                            build_int_cst (integer_type_node,\n-                                           gfc_option.flag_backtrace));\n+                            build_int_cst (integer_type_node, flag_backtrace));\n     CONSTRUCTOR_APPEND_ELT (v, NULL_TREE,\n-                            build_int_cst (integer_type_node,\n-                                           gfc_option.flag_sign_zero));\n+                            build_int_cst (integer_type_node, flag_sign_zero));\n     CONSTRUCTOR_APPEND_ELT (v, NULL_TREE,\n                             build_int_cst (integer_type_node,\n                                            (gfc_option.rtcheck\n@@ -5727,8 +5720,7 @@ gfc_generate_function_code (gfc_namespace * ns)\n \t\t || (sym->attr.entry_master\n \t\t     && sym->ns->entries->sym->attr.recursive);\n   if ((gfc_option.rtcheck & GFC_RTCHECK_RECURSION)\n-\t&& !is_recursive\n-\t&& !gfc_option.flag_recursive)\n+      && !is_recursive && !flag_recursive)\n     {\n       char * msg;\n \n@@ -5826,9 +5818,7 @@ gfc_generate_function_code (gfc_namespace * ns)\n \n   /* Reset recursion-check variable.  */\n   if ((gfc_option.rtcheck & GFC_RTCHECK_RECURSION)\n-\t && !is_recursive\n-\t && !gfc_option.gfc_flag_openmp\n-\t && recurcheckvar != NULL_TREE)\n+      && !is_recursive && !flag_openmp && recurcheckvar != NULL_TREE)\n     {\n       gfc_add_modify (&cleanup, recurcheckvar, boolean_false_node);\n       recurcheckvar = NULL;"}, {"sha": "39cfb2f7e4e566f9ac161391c118a56a7915ff40", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=c61819ff0f851ca343362f742f819bb459880eb6", "patch": "@@ -2056,7 +2056,7 @@ gfc_conv_variable (gfc_se * se, gfc_expr * expr)\n \t\t\t\t\t\tse->expr);\n \n           /* Dereference scalar hidden result.  */\n-\t  if (gfc_option.flag_f2c && sym->ts.type == BT_COMPLEX\n+\t  if (flag_f2c && sym->ts.type == BT_COMPLEX\n \t      && (sym->attr.function || sym->attr.result)\n \t      && !sym->attr.dimension && !sym->attr.pointer\n \t      && !sym->attr.always_explicit)\n@@ -5301,7 +5301,7 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t}\n       else\n \t{\n-\t  gcc_assert (gfc_option.flag_f2c && ts.type == BT_COMPLEX);\n+\t  gcc_assert (flag_f2c && ts.type == BT_COMPLEX);\n \n \t  type = gfc_get_complex_type (ts.kind);\n \t  var = gfc_build_addr_expr (NULL_TREE, gfc_create_var (type, \"cmplx\"));\n@@ -5382,7 +5382,7 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n      return a double precision result.  Convert this back to default\n      real.  We only care about the cases that can happen in Fortran 77.\n   */\n-  if (gfc_option.flag_f2c && sym->ts.type == BT_REAL\n+  if (flag_f2c && sym->ts.type == BT_REAL\n       && sym->ts.kind == gfc_default_real_kind\n       && !sym->attr.always_explicit)\n     se->expr = fold_convert (gfc_get_real_type (sym->ts.kind), se->expr);\n@@ -5433,7 +5433,7 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t    }\n \t  else\n \t    {\n-\t      gcc_assert (ts.type == BT_COMPLEX && gfc_option.flag_f2c);\n+\t      gcc_assert (ts.type == BT_COMPLEX && flag_f2c);\n \t      se->expr = build_fold_indirect_ref_loc (input_location, var);\n \t    }\n \t}"}, {"sha": "8fefe308bc3f7c5618df11e0c2dd65e6efe9a093", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=c61819ff0f851ca343362f742f819bb459880eb6", "patch": "@@ -2470,7 +2470,7 @@ gfc_conv_intrinsic_sign (gfc_se * se, gfc_expr * expr)\n \n       /* We explicitly have to ignore the minus sign. We do so by using\n \t result = (arg1 == 0) ? abs(arg0) : copysign(arg0, arg1).  */\n-      if (!gfc_option.flag_sign_zero\n+      if (!flag_sign_zero\n \t  && MODE_HAS_SIGNED_ZEROS (TYPE_MODE (TREE_TYPE (args[1]))))\n \t{\n \t  tree cond, zero;\n@@ -2978,7 +2978,7 @@ gfc_conv_intrinsic_funcall (gfc_se * se, gfc_expr * expr)\n     {\n       tree cint = gfc_get_int_type (gfc_c_int_kind);\n \n-      if (gfc_option.flag_external_blas\n+      if (flag_external_blas\n \t  && (sym->ts.type == BT_REAL || sym->ts.type == BT_COMPLEX)\n \t  && (sym->ts.kind == 4 || sym->ts.kind == 8))\n \t{\n@@ -3002,7 +3002,7 @@ gfc_conv_intrinsic_funcall (gfc_se * se, gfc_expr * expr)\n \t  vec_alloc (append_args, 3);\n \t  append_args->quick_push (build_int_cst (cint, 1));\n \t  append_args->quick_push (build_int_cst (cint,\n-\t\t                                 gfc_option.blas_matmul_limit));\n+\t\t\t\t\t\t  flag_blas_matmul_limit));\n \t  append_args->quick_push (gfc_build_addr_expr (NULL_TREE,\n \t\t\t\t\t\t\tgemm_fndecl));\n \t}"}, {"sha": "707a08970eee45275c15989d019603869079ba16", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=c61819ff0f851ca343362f742f819bb459880eb6", "patch": "@@ -3435,7 +3435,7 @@ gfc_trans_omp_do_simd (gfc_code *code, stmtblock_t *pblock,\n       clausesa = clausesa_buf;\n       gfc_split_omp_clauses (code, clausesa);\n     }\n-  if (gfc_option.gfc_flag_openmp)\n+  if (flag_openmp)\n     omp_do_clauses\n       = gfc_trans_omp_clauses (&block, &clausesa[GFC_OMP_SPLIT_DO], code->loc);\n   body = gfc_trans_omp_do (code, EXEC_OMP_SIMD, pblock ? pblock : &block,\n@@ -3449,7 +3449,7 @@ gfc_trans_omp_do_simd (gfc_code *code, stmtblock_t *pblock,\n     }\n   else if (TREE_CODE (body) != BIND_EXPR)\n     body = build3_v (BIND_EXPR, NULL, body, NULL_TREE);\n-  if (gfc_option.gfc_flag_openmp)\n+  if (flag_openmp)\n     {\n       stmt = make_node (OMP_FOR);\n       TREE_TYPE (stmt) = void_type_node;\n@@ -3527,7 +3527,7 @@ gfc_trans_omp_parallel_do_simd (gfc_code *code, stmtblock_t *pblock,\n       clausesa = clausesa_buf;\n       gfc_split_omp_clauses (code, clausesa);\n     }\n-  if (gfc_option.gfc_flag_openmp)\n+  if (flag_openmp)\n     omp_clauses\n       = gfc_trans_omp_clauses (&block, &clausesa[GFC_OMP_SPLIT_PARALLEL],\n \t\t\t       code->loc);\n@@ -3543,7 +3543,7 @@ gfc_trans_omp_parallel_do_simd (gfc_code *code, stmtblock_t *pblock,\n     }\n   else if (TREE_CODE (stmt) != BIND_EXPR)\n     stmt = build3_v (BIND_EXPR, NULL, stmt, NULL_TREE);\n-  if (gfc_option.gfc_flag_openmp)\n+  if (flag_openmp)\n     {\n       stmt = build2_loc (input_location, OMP_PARALLEL, void_type_node, stmt,\n \t\t\t omp_clauses);\n@@ -3698,7 +3698,7 @@ gfc_trans_omp_distribute (gfc_code *code, gfc_omp_clauses *clausesa)\n       clausesa = clausesa_buf;\n       gfc_split_omp_clauses (code, clausesa);\n     }\n-  if (gfc_option.gfc_flag_openmp)\n+  if (flag_openmp)\n     omp_clauses\n       = gfc_trans_omp_clauses (&block, &clausesa[GFC_OMP_SPLIT_DISTRIBUTE],\n \t\t\t       code->loc);\n@@ -3741,7 +3741,7 @@ gfc_trans_omp_distribute (gfc_code *code, gfc_omp_clauses *clausesa)\n     default:\n       gcc_unreachable ();\n     }\n-  if (gfc_option.gfc_flag_openmp)\n+  if (flag_openmp)\n     {\n       tree distribute = make_node (OMP_DISTRIBUTE);\n       TREE_TYPE (distribute) = void_type_node;\n@@ -3766,7 +3766,7 @@ gfc_trans_omp_teams (gfc_code *code, gfc_omp_clauses *clausesa)\n       clausesa = clausesa_buf;\n       gfc_split_omp_clauses (code, clausesa);\n     }\n-  if (gfc_option.gfc_flag_openmp)\n+  if (flag_openmp)\n     omp_clauses\n       = gfc_trans_omp_clauses (&block, &clausesa[GFC_OMP_SPLIT_TEAMS],\n \t\t\t       code->loc);\n@@ -3801,7 +3801,7 @@ gfc_trans_omp_target (gfc_code *code)\n \n   gfc_start_block (&block);\n   gfc_split_omp_clauses (code, clausesa);\n-  if (gfc_option.gfc_flag_openmp)\n+  if (flag_openmp)\n     omp_clauses\n       = gfc_trans_omp_clauses (&block, &clausesa[GFC_OMP_SPLIT_TARGET],\n \t\t\t       code->loc);\n@@ -3811,7 +3811,7 @@ gfc_trans_omp_target (gfc_code *code)\n     stmt = gfc_trans_omp_teams (code, clausesa);\n   if (TREE_CODE (stmt) != BIND_EXPR)\n     stmt = build3_v (BIND_EXPR, NULL, stmt, NULL_TREE);\n-  if (gfc_option.gfc_flag_openmp)\n+  if (flag_openmp)\n     stmt = build2_loc (input_location, OMP_TARGET, void_type_node, stmt,\n \t\t       omp_clauses);\n   gfc_add_expr_to_block (&block, stmt);"}, {"sha": "07593e55bcb082929540e7aa9787ba80ac92e5a5", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61819ff0f851ca343362f742f819bb459880eb6/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=c61819ff0f851ca343362f742f819bb459880eb6", "patch": "@@ -2447,7 +2447,7 @@ gfc_get_derived_type (gfc_symbol * derived)\n       /* We see this derived type first time, so build the type node.  */\n       typenode = make_node (RECORD_TYPE);\n       TYPE_NAME (typenode) = get_identifier (derived->name);\n-      TYPE_PACKED (typenode) = gfc_option.flag_pack_derived;\n+      TYPE_PACKED (typenode) = flag_pack_derived;\n       derived->backend_decl = typenode;\n     }\n \n@@ -2630,8 +2630,7 @@ gfc_return_by_reference (gfc_symbol * sym)\n      -fno-f2c calling convention), nor for calls to functions which always\n      require an explicit interface, as no compatibility problems can\n      arise there.  */\n-  if (gfc_option.flag_f2c\n-      && sym->ts.type == BT_COMPLEX\n+  if (flag_f2c && sym->ts.type == BT_COMPLEX\n       && !sym->attr.intrinsic && !sym->attr.always_explicit)\n     return 1;\n \n@@ -2865,8 +2864,7 @@ gfc_get_function_type (gfc_symbol * sym)\n     type = void_type_node;\n   else if (sym->attr.mixed_entry_master)\n     type = gfc_get_mixed_entry_union (sym->ns);\n-  else if (gfc_option.flag_f2c\n-\t   && sym->ts.type == BT_REAL\n+  else if (flag_f2c && sym->ts.type == BT_REAL\n \t   && sym->ts.kind == gfc_default_real_kind\n \t   && !sym->attr.always_explicit)\n     {"}]}