{"sha": "710ee3ed76eeafcb4fe72a51448b7e396c436e14", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzEwZWUzZWQ3NmVlYWZjYjRmZTcyYTUxNDQ4YjdlMzk2YzQzNmUxNA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-02-07T22:57:41Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-02-07T22:57:41Z"}, "message": "gcse.c (local_cprop_find_used_regs): New.\n\n        * gcse.c (local_cprop_find_used_regs): New.\n        (local_cprop_pass): Use it.\n\nFrom-SVN: r62555", "tree": {"sha": "2b5b38168585de67e2af8095d36ab87ec2ffff69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b5b38168585de67e2af8095d36ab87ec2ffff69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/710ee3ed76eeafcb4fe72a51448b7e396c436e14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/710ee3ed76eeafcb4fe72a51448b7e396c436e14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/710ee3ed76eeafcb4fe72a51448b7e396c436e14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/710ee3ed76eeafcb4fe72a51448b7e396c436e14/comments", "author": null, "committer": null, "parents": [{"sha": "3ef879d2ae66c759cf4c5c11f2d360eab30f4a2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ef879d2ae66c759cf4c5c11f2d360eab30f4a2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ef879d2ae66c759cf4c5c11f2d360eab30f4a2d"}], "stats": {"total": 58, "additions": 56, "deletions": 2}, "files": [{"sha": "8898bea29424a22140ec1d2404aaf3e4164f61f4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/710ee3ed76eeafcb4fe72a51448b7e396c436e14/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/710ee3ed76eeafcb4fe72a51448b7e396c436e14/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=710ee3ed76eeafcb4fe72a51448b7e396c436e14", "patch": "@@ -1,3 +1,9 @@\n+2003-02-07  Richard Henderson  <rth@redhat.com>\n+\n+\tPR 9226\n+        * gcse.c (local_cprop_find_used_regs): New.\n+        (local_cprop_pass): Use it.\n+\n 2003-02-07  Fred Fish  <fnf@intrinsity.com>\n \n \t* mips-tfile.c (parse_def): Parenthesize assignments to fix"}, {"sha": "2cc7f0b1c6736aee620027963a650dd0921f0685", "filename": "gcc/gcse.c", "status": "modified", "additions": 50, "deletions": 2, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/710ee3ed76eeafcb4fe72a51448b7e396c436e14/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/710ee3ed76eeafcb4fe72a51448b7e396c436e14/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=710ee3ed76eeafcb4fe72a51448b7e396c436e14", "patch": "@@ -706,6 +706,7 @@ static void free_insn_expr_list_list\tPARAMS ((rtx *));\n static void clear_modify_mem_tables\tPARAMS ((void));\n static void free_modify_mem_tables\tPARAMS ((void));\n static rtx gcse_emit_move_after\t\tPARAMS ((rtx, rtx, rtx));\n+static void local_cprop_find_used_regs\tPARAMS ((rtx *, void *));\n static bool do_local_cprop\t\tPARAMS ((rtx, rtx, int, rtx*));\n static bool adjust_libcall_notes\tPARAMS ((rtx, rtx, rtx, rtx*));\n static void local_cprop_pass\t\tPARAMS ((int));\n@@ -4258,6 +4259,53 @@ cprop_insn (insn, alter_jumps)\n   return changed;\n }\n \n+/* Like find_used_regs, but avoid recording uses that appear in\n+   input-output contexts such as zero_extract or pre_dec.  This\n+   restricts the cases we consider to those for which local cprop\n+   can legitimately make replacements.  */\n+\n+static void\n+local_cprop_find_used_regs (xptr, data)\n+     rtx *xptr;\n+     void *data;\n+{\n+  rtx x = *xptr;\n+\n+  if (x == 0)\n+    return;\n+\n+  switch (GET_CODE (x))\n+    {\n+    case ZERO_EXTRACT:\n+    case SIGN_EXTRACT:\n+    case STRICT_LOW_PART:\n+      return;\n+\n+    case PRE_DEC:\n+    case PRE_INC:\n+    case POST_DEC:\n+    case POST_INC:\n+    case PRE_MODIFY:\n+    case POST_MODIFY:\n+      /* Can only legitimately appear this early in the context of\n+\t stack pushes for function arguments, but handle all of the\n+\t codes nonetheless.  */\n+      return;\n+\n+    case SUBREG:\n+      /* Setting a subreg of a register larger than word_mode leaves\n+\t the non-written words unchanged.  */\n+      if (GET_MODE_BITSIZE (GET_MODE (SUBREG_REG (x))) > BITS_PER_WORD)\n+\treturn;\n+      break;\n+\n+    default:\n+      break;\n+    }\n+\n+  find_used_regs (xptr, data);\n+}\n+  \n /* LIBCALL_SP is a zero-terminated array of insns at the end of a libcall;\n    their REG_EQUAL notes need updating.  */\n \n@@ -4413,9 +4461,9 @@ local_cprop_pass (alter_jumps)\n \t  do\n \t    {\n \t      reg_use_count = 0;\n-\t      note_uses (&PATTERN (insn), find_used_regs, NULL);\n+\t      note_uses (&PATTERN (insn), local_cprop_find_used_regs, NULL);\n \t      if (note)\n-\t\tfind_used_regs (&XEXP (note, 0), NULL);\n+\t\tlocal_cprop_find_used_regs (&XEXP (note, 0), NULL);\n \n \t      for (reg_used = &reg_use_table[0]; reg_use_count > 0;\n \t\t   reg_used++, reg_use_count--)"}]}