{"sha": "1370014f2ea02ec185cf1199027575916f79fe63", "node_id": "C_kwDOANBUbNoAKDEzNzAwMTRmMmVhMDJlYzE4NWNmMTE5OTAyNzU3NTkxNmY3OWZlNjM", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2023-02-22T20:17:03Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2023-02-22T22:26:29Z"}, "message": "c-family: avoid compile-time-hog in c_genericize [PR108880]\n\nThis fixes a compile-time hog with UBSan.  This only happened in cc1 but\nnot cc1plus.  The problem is ultimately that c_genericize_control_stmt/\nSTATEMENT_LIST -> walk_tree_1 doesn't use a hash_set to remember visited\nnodes, so it kept on recursing for a long time.  We should be able to\nuse the pset that c_genericize created.  We just need to use walk_tree\ninstead of walk_tree_w_d so that the pset is explicit.\n\n\tPR c/108880\n\ngcc/c-family/ChangeLog:\n\n\t* c-gimplify.cc (c_genericize_control_stmt) <case STATEMENT_LIST>: Pass\n\tpset to walk_tree_1.\n\t(c_genericize): Call walk_tree with an explicit pset.\n\ngcc/testsuite/ChangeLog:\n\n\t* c-c++-common/ubsan/pr108880.c: New test.", "tree": {"sha": "a0f682e9c3913f1dd46f5976721757e55f088891", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0f682e9c3913f1dd46f5976721757e55f088891"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1370014f2ea02ec185cf1199027575916f79fe63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1370014f2ea02ec185cf1199027575916f79fe63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1370014f2ea02ec185cf1199027575916f79fe63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1370014f2ea02ec185cf1199027575916f79fe63/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31303c9b5bab200754cdb7ef8cd91ae4918f3018", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31303c9b5bab200754cdb7ef8cd91ae4918f3018", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31303c9b5bab200754cdb7ef8cd91ae4918f3018"}], "stats": {"total": 23, "additions": 20, "deletions": 3}, "files": [{"sha": "74b276b2b26331a5ed6a7085703f8093a8c05cb0", "filename": "gcc/c-family/c-gimplify.cc", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1370014f2ea02ec185cf1199027575916f79fe63/gcc%2Fc-family%2Fc-gimplify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1370014f2ea02ec185cf1199027575916f79fe63/gcc%2Fc-family%2Fc-gimplify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-gimplify.cc?ref=1370014f2ea02ec185cf1199027575916f79fe63", "patch": "@@ -511,12 +511,15 @@ c_genericize_control_stmt (tree *stmt_p, int *walk_subtrees, void *data,\n \t     STATEMENT_LIST wouldn't be present at all the resulting\n \t     expression wouldn't have TREE_SIDE_EFFECTS set, so make sure\n \t     to clear it even on the STATEMENT_LIST in such cases.  */\n+\t  hash_set<tree> *pset = (c_dialect_cxx ()\n+\t\t\t\t  ? nullptr\n+\t\t\t\t  : static_cast<hash_set<tree> *>(data));\n \t  for (i = tsi_start (stmt); !tsi_end_p (i); tsi_next (&i))\n \t    {\n \t      tree t = tsi_stmt (i);\n \t      if (TREE_CODE (t) != DEBUG_BEGIN_STMT && nondebug_stmts < 2)\n \t\tnondebug_stmts++;\n-\t      walk_tree_1 (tsi_stmt_ptr (i), func, data, NULL, lh);\n+\t      walk_tree_1 (tsi_stmt_ptr (i), func, data, pset, lh);\n \t      if (TREE_CODE (t) != DEBUG_BEGIN_STMT\n \t\t  && (nondebug_stmts > 1 || TREE_SIDE_EFFECTS (tsi_stmt (i))))\n \t\tclear_side_effects = false;\n@@ -572,8 +575,9 @@ c_genericize (tree fndecl)\n       bc_state_t save_state;\n       push_cfun (DECL_STRUCT_FUNCTION (fndecl));\n       save_bc_state (&save_state);\n-      walk_tree_without_duplicates (&DECL_SAVED_TREE (fndecl),\n-\t\t\t\t    c_genericize_control_r, NULL);\n+      hash_set<tree> pset;\n+      walk_tree (&DECL_SAVED_TREE (fndecl), c_genericize_control_r, &pset,\n+\t\t &pset);\n       restore_bc_state (&save_state);\n       pop_cfun ();\n     }"}, {"sha": "7d589edcd120223091b11db44d8d8f3db58a432a", "filename": "gcc/testsuite/c-c++-common/ubsan/pr108880.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1370014f2ea02ec185cf1199027575916f79fe63/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr108880.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1370014f2ea02ec185cf1199027575916f79fe63/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr108880.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr108880.c?ref=1370014f2ea02ec185cf1199027575916f79fe63", "patch": "@@ -0,0 +1,13 @@\n+/* PR c/108880 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fsanitize=undefined\" } */\n+\n+long a;\n+short b, e;\n+char c;\n+int d, f, g;\n+void h() {\n+  int i;\n+  f &= i ^= (((g &= 0 / d / d % 8 << 0 << 2) % a >> e) / c >> b) / 1 % 8 << 3;\n+}\n+int main() {}"}]}