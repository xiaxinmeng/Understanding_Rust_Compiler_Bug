{"sha": "c56f7983bedd6a36af6ba141cad92e1415682a70", "node_id": "C_kwDOANBUbNoAKGM1NmY3OTgzYmVkZDZhMzZhZjZiYTE0MWNhZDkyZTE0MTU2ODJhNzA", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-02-14T10:31:43Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-06-20T09:27:34Z"}, "message": "lto-plugin: support LDPT_GET_SYMBOLS_V3\n\nThat supports skipping of an object file (LDPS_NO_SYMS).\n\nlto-plugin/ChangeLog:\n\n\t* lto-plugin.c (struct plugin_file_info): Add skip_file flag.\n\t(write_resolution): Write resolution only if get_symbols != LDPS_NO_SYMS.\n\t(all_symbols_read_handler): Ignore file if skip_file is true.\n\t(onload): Handle LDPT_GET_SYMBOLS_V3.", "tree": {"sha": "5bf704cd22f80b9ddd2a334ea519cf36596a44c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bf704cd22f80b9ddd2a334ea519cf36596a44c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c56f7983bedd6a36af6ba141cad92e1415682a70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c56f7983bedd6a36af6ba141cad92e1415682a70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c56f7983bedd6a36af6ba141cad92e1415682a70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c56f7983bedd6a36af6ba141cad92e1415682a70/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f55aee9dca759da84afd4563ff72d3ca8ab8a1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f55aee9dca759da84afd4563ff72d3ca8ab8a1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f55aee9dca759da84afd4563ff72d3ca8ab8a1c"}], "stats": {"total": 42, "additions": 35, "deletions": 7}, "files": [{"sha": "00b760636dc7a31e235cf4de025a785060c12d72", "filename": "lto-plugin/lto-plugin.c", "status": "modified", "additions": 35, "deletions": 7, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c56f7983bedd6a36af6ba141cad92e1415682a70/lto-plugin%2Flto-plugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c56f7983bedd6a36af6ba141cad92e1415682a70/lto-plugin%2Flto-plugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2Flto-plugin.c?ref=c56f7983bedd6a36af6ba141cad92e1415682a70", "patch": "@@ -136,6 +136,7 @@ struct plugin_file_info\n   void *handle;\n   struct plugin_symtab symtab;\n   struct plugin_symtab conflicts;\n+  bool skip_file;\n };\n \n /* List item with name of the file with offloading.  */\n@@ -159,7 +160,7 @@ enum symbol_style\n static char *arguments_file_name;\n static ld_plugin_register_claim_file register_claim_file;\n static ld_plugin_register_all_symbols_read register_all_symbols_read;\n-static ld_plugin_get_symbols get_symbols, get_symbols_v2;\n+static ld_plugin_get_symbols get_symbols, get_symbols_v2, get_symbols_v3;\n static ld_plugin_register_cleanup register_cleanup;\n static ld_plugin_add_input_file add_input_file;\n static ld_plugin_add_input_library add_input_library;\n@@ -547,29 +548,52 @@ free_symtab (struct plugin_symtab *symtab)\n static void\n write_resolution (void)\n {\n-  unsigned int i;\n+  unsigned int i, included_files = 0;\n   FILE *f;\n \n   check (resolution_file, LDPL_FATAL, \"resolution file not specified\");\n   f = fopen (resolution_file, \"w\");\n   check (f, LDPL_FATAL, \"could not open file\");\n \n-  fprintf (f, \"%d\\n\", num_claimed_files);\n-\n   for (i = 0; i < num_claimed_files; i++)\n     {\n       struct plugin_file_info *info = &claimed_files[i];\n       struct plugin_symtab *symtab = &info->symtab;\n       struct ld_plugin_symbol *syms = symtab->syms;\n \n       /* Version 2 of API supports IRONLY_EXP resolution that is\n-         accepted by GCC-4.7 and newer.  */\n-      if (get_symbols_v2)\n+\t accepted by GCC-4.7 and newer.\n+\t Version 3 can return LDPS_NO_SYMS that means the object\n+\t will not be used at all.  */\n+      if (get_symbols_v3)\n+\t{\n+\t  enum ld_plugin_status status\n+\t    = get_symbols_v3 (info->handle, symtab->nsyms, syms);\n+\t  if (status == LDPS_NO_SYMS)\n+\t    {\n+\t      info->skip_file = true;\n+\t      continue;\n+\t    }\n+\t}\n+      else if (get_symbols_v2)\n         get_symbols_v2 (info->handle, symtab->nsyms, syms);\n       else\n         get_symbols (info->handle, symtab->nsyms, syms);\n \n+      ++included_files;\n+\n       finish_conflict_resolution (symtab, &info->conflicts);\n+    }\n+\n+  fprintf (f, \"%d\\n\", included_files);\n+\n+  for (i = 0; i < num_claimed_files; i++)\n+    {\n+      struct plugin_file_info *info = &claimed_files[i];\n+      struct plugin_symtab *symtab = &info->symtab;\n+\n+      if (info->skip_file)\n+\tcontinue;\n \n       fprintf (f, \"%s %d\\n\", info->name, symtab->nsyms + info->conflicts.nsyms);\n       dump_symtab (f, symtab);\n@@ -833,7 +857,8 @@ all_symbols_read_handler (void)\n     {\n       struct plugin_file_info *info = &claimed_files[i];\n \n-      *lto_arg_ptr++ = info->name;\n+      if (!info->skip_file)\n+\t*lto_arg_ptr++ = info->name;\n     }\n \n   *lto_arg_ptr++ = NULL;\n@@ -1410,6 +1435,9 @@ onload (struct ld_plugin_tv *tv)\n \tcase LDPT_REGISTER_ALL_SYMBOLS_READ_HOOK:\n \t  register_all_symbols_read = p->tv_u.tv_register_all_symbols_read;\n \t  break;\n+\tcase LDPT_GET_SYMBOLS_V3:\n+\t  get_symbols_v3 = p->tv_u.tv_get_symbols;\n+\t  break;\n \tcase LDPT_GET_SYMBOLS_V2:\n \t  get_symbols_v2 = p->tv_u.tv_get_symbols;\n \t  break;"}]}