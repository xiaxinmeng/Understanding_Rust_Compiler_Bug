{"sha": "d03a67dc69251dc86c0772a432380a6e9bcb8617", "node_id": "C_kwDOANBUbNoAKGQwM2E2N2RjNjkyNTFkYzg2YzA3NzJhNDMyMzgwYTZlOWJjYjg2MTc", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-02-15T11:27:14Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-02-15T12:22:15Z"}, "message": "tree-optimization/104543 - fix unroll-and-jam precondition\n\nWe have to make sure that outer loop exits come after the inner\nloop since we otherwise will put it into the fused loop body.\n\n2022-02-15  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/104543\n\t* gimple-loop-jam.cc (unroll_jam_possible_p): Check outer loop exits\n\tcome after the inner loop.\n\n\t* gcc.dg/torture/pr104543.c: New testcase.", "tree": {"sha": "751d42d3e61a78d5aa8d25fc1d77a05cc9c78ab3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/751d42d3e61a78d5aa8d25fc1d77a05cc9c78ab3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d03a67dc69251dc86c0772a432380a6e9bcb8617", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d03a67dc69251dc86c0772a432380a6e9bcb8617", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d03a67dc69251dc86c0772a432380a6e9bcb8617", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d03a67dc69251dc86c0772a432380a6e9bcb8617/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3939c1b11279dc950d2f160eb940dd791f7b40f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3939c1b11279dc950d2f160eb940dd791f7b40f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3939c1b11279dc950d2f160eb940dd791f7b40f1"}], "stats": {"total": 31, "additions": 29, "deletions": 2}, "files": [{"sha": "e33dd9091df32a9078e152a609eece174ce938a0", "filename": "gcc/gimple-loop-jam.cc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d03a67dc69251dc86c0772a432380a6e9bcb8617/gcc%2Fgimple-loop-jam.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d03a67dc69251dc86c0772a432380a6e9bcb8617/gcc%2Fgimple-loop-jam.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-loop-jam.cc?ref=d03a67dc69251dc86c0772a432380a6e9bcb8617", "patch": "@@ -198,7 +198,8 @@ unroll_jam_possible_p (class loop *outer, class loop *loop)\n   if (!empty_block_p (loop->latch))\n     return false;\n \n-  if (!single_exit (loop))\n+  edge exit;\n+  if (!(exit = single_exit (loop)))\n     return false;\n \n   /* We need a perfect nest.  Quick check for adjacent inner loops.  */\n@@ -259,7 +260,12 @@ unroll_jam_possible_p (class loop *outer, class loop *loop)\n   n = get_loop_body_with_size (outer, bbs, n_basic_blocks_for_fn (cfun));\n \n   for (i = 0; i < n; i++)\n-    if (bbs[i]->loop_father == outer && bb_prevents_fusion_p (bbs[i]))\n+    if (bbs[i]->loop_father == outer\n+\t&& (bb_prevents_fusion_p (bbs[i])\n+\t    /* Outer loop exits must come after the inner loop, otherwise\n+\t       we'll put the outer loop exit into the fused inner loop.  */\n+\t    || (loop_exits_from_bb_p (outer, bbs[i])\n+\t\t&& !dominated_by_p (CDI_DOMINATORS, bbs[i], exit->src))))\n       break;\n   free (bbs);\n   if (i != n)"}, {"sha": "48963514f77cbfe645255127de1f9c67a0b0f5ec", "filename": "gcc/testsuite/gcc.dg/torture/pr104543.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d03a67dc69251dc86c0772a432380a6e9bcb8617/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr104543.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d03a67dc69251dc86c0772a432380a6e9bcb8617/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr104543.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr104543.c?ref=d03a67dc69251dc86c0772a432380a6e9bcb8617", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-floop-unroll-and-jam\" } */\n+\n+int a[3], b, c;\n+static int e()\n+{\n+  if (!c) {\n+    for (b = 0; b < 3; b++)\n+      for (c = 0; c < 3; c++)\n+        a[c] ^= 1;\n+    return -1;\n+  }\n+  return 0;\n+}\n+int main()\n+{\n+  e();\n+  if (a[1] != 1)\n+    __builtin_abort();\n+  return 0;\n+}"}]}