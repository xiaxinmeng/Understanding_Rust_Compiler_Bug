{"sha": "32cf6a3bfe9f7512312a377648f13a437bb1a0c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJjZjZhM2JmZTlmNzUxMjMxMmEzNzc2NDhmMTNhNDM3YmIxYTBjNw==", "commit": {"author": {"name": "Chris Burdess", "email": "dog@gnu.org", "date": "2005-04-27T21:03:00Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2005-04-27T21:03:00Z"}, "message": "Connection.java: Return correct content length for directory listing.\n\n2005-04-27  Chris Burdess  <dog@gnu.org>\n\n\t* gnu/java/net/protocol/file/Connection.java: Return correct content\n\tlength for directory listing.\n\t* java/net/URLClassLoader.java: Correction for URLClassLoader, bug\n\t#11285: return valid URLs for directories.i\n\nFrom-SVN: r98884", "tree": {"sha": "b58fc962d6b987c3d38b9da9dd5fe177155c159a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b58fc962d6b987c3d38b9da9dd5fe177155c159a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32cf6a3bfe9f7512312a377648f13a437bb1a0c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32cf6a3bfe9f7512312a377648f13a437bb1a0c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32cf6a3bfe9f7512312a377648f13a437bb1a0c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32cf6a3bfe9f7512312a377648f13a437bb1a0c7/comments", "author": null, "committer": null, "parents": [{"sha": "529eec21bb28ef3de2ad7d0019c791e374a195ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/529eec21bb28ef3de2ad7d0019c791e374a195ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/529eec21bb28ef3de2ad7d0019c791e374a195ae"}], "stats": {"total": 103, "additions": 88, "deletions": 15}, "files": [{"sha": "ec4edf1376cba052c2b621c22e9109b96ed9ff0d", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32cf6a3bfe9f7512312a377648f13a437bb1a0c7/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32cf6a3bfe9f7512312a377648f13a437bb1a0c7/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=32cf6a3bfe9f7512312a377648f13a437bb1a0c7", "patch": "@@ -1,3 +1,10 @@\n+2005-04-27  Chris Burdess  <dog@gnu.org>\n+\n+\t* gnu/java/net/protocol/file/Connection.java: Return correct content\n+\tlength for directory listing.\n+\t* java/net/URLClassLoader.java: Correction for URLClassLoader, bug\n+\t#11285: return valid URLs for directories.i\n+\n 2005-04-27  Thomas Fitzsimmons  <fitzsim@redhat.com>\n \n \t* Makefile.am (ordinary_java_source_files): Add"}, {"sha": "0f6e4d6f2b9004731d18813aa262ade750b0cc4c", "filename": "libjava/gnu/java/net/protocol/file/Connection.java", "status": "modified", "additions": 55, "deletions": 14, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32cf6a3bfe9f7512312a377648f13a437bb1a0c7/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Ffile%2FConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32cf6a3bfe9f7512312a377648f13a437bb1a0c7/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Ffile%2FConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Ffile%2FConnection.java?ref=32cf6a3bfe9f7512312a377648f13a437bb1a0c7", "patch": "@@ -42,13 +42,16 @@\n import java.io.BufferedInputStream;\n import java.io.BufferedOutputStream;\n import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n import java.io.FilePermission;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.io.Writer;\n import java.net.ProtocolException;\n import java.net.URL;\n import java.net.URLConnection;\n@@ -82,11 +85,25 @@ public class Connection extends URLConnection\n \n   private static String lineSeparator;\n   \n+  static\n+  {\n+    if (lineSeparator == null)\n+      {\n+\tGetPropertyAction getProperty = new GetPropertyAction(\"line.separator\");\n+\tlineSeparator = (String) AccessController.doPrivileged(getProperty);\n+      }\n+  }\n+  \n   /**\n    * This is a File object for this connection\n    */\n   private File file;\n \n+  /**\n+   * If a directory, contains a list of files in the directory.\n+   */\n+  private byte[] directoryListing;\n+\n   /**\n    * InputStream if we are reading from the file\n    */\n@@ -136,19 +153,7 @@ public void connect() throws IOException\n       {\n \tif (doInput)\n \t  {\n-\t    if (lineSeparator == null)\n-\t      {\n-\t\tGetPropertyAction getProperty = new GetPropertyAction(\"line.separator\");\n-\t\tlineSeparator = (String) AccessController.doPrivileged(getProperty);\n-\t      }\n-\t    \n-\t    StringBuffer sb = new StringBuffer();\n-\t    String[] files = file.list();\n-\n-\t    for (int index = 0; index < files.length; ++index)\n-\t       sb.append(files[index]).append(lineSeparator);\n-\n-\t    inputStream = new ByteArrayInputStream(sb.toString().getBytes());\n+            inputStream = new ByteArrayInputStream(getDirectoryListing());\n \t  }\n \n \tif (doOutput)\n@@ -158,6 +163,32 @@ public void connect() throws IOException\n     \n     connected = true;\n   }\n+\n+  /**\n+   * Populates the <code>directoryListing</code> field with a byte array\n+   * containing a representation of the directory listing.\n+   */\n+  byte[] getDirectoryListing()\n+    throws IOException\n+  {\n+    if (directoryListing == null)\n+      {\n+        ByteArrayOutputStream sink = new ByteArrayOutputStream();\n+        // NB uses default character encoding for this system\n+        Writer writer = new OutputStreamWriter(sink);\n+    \n+        String[] files = file.list();\n+    \n+        for (int i = 0; i < files.length; i++)\n+          {\n+            writer.write(files[i]);\n+            writer.write(lineSeparator);\n+          }\n+\n+        directoryListing = sink.toByteArray();\n+      }\n+    return directoryListing;  \n+  }\n   \n   /**\n    * Opens the file for reading and returns a stream for it.\n@@ -231,7 +262,13 @@ public String getHeaderField(String field)\n \tif (field.equals(\"content-type\"))\n           return guessContentTypeFromName(file.getName());\n \telse if (field.equals(\"content-length\"))\n-          return Long.toString(file.length());\n+          {\n+            if (file.isDirectory())\n+              {\n+                return Integer.toString(getContentLength());\n+              }\n+            return Long.toString(file.length());\n+          }\n \telse if (field.equals(\"last-modified\"))\n \t  {\n \t    synchronized (dateFormat)\n@@ -259,6 +296,10 @@ public int getContentLength()\n \tif (!connected)\n \t  connect();\n         \n+        if (file.isDirectory())\n+          {\n+            return getDirectoryListing().length;\n+          }\n \treturn (int) file.length();\n       }\n     catch (IOException e)"}, {"sha": "4b9599816a932ab2f6e3793d30016282459a74e8", "filename": "libjava/java/net/URLClassLoader.java", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32cf6a3bfe9f7512312a377648f13a437bb1a0c7/libjava%2Fjava%2Fnet%2FURLClassLoader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32cf6a3bfe9f7512312a377648f13a437bb1a0c7/libjava%2Fjava%2Fnet%2FURLClassLoader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLClassLoader.java?ref=32cf6a3bfe9f7512312a377648f13a437bb1a0c7", "patch": "@@ -610,7 +610,7 @@ static final class FileURLLoader extends URLLoader\n     Resource getResource(String name)\n     {\n       File file = new File(dir, name);\n-      if (file.exists() && ! file.isDirectory())\n+      if (file.exists())\n         return new FileResource(this, name, file);\n       return null;\n     }\n@@ -628,11 +628,36 @@ static final class FileResource extends Resource\n \n     InputStream getInputStream() throws IOException\n     {\n+      // Delegate to the URL content handler mechanism to retrieve an\n+      // HTML representation of the directory listing if a directory\n+      if (file.isDirectory())\n+        {\n+          URL url = getURL();\n+          return url.openStream();\n+        }\n+      // Otherwise simply return a FileInputStream\n       return new FileInputStream(file);\n     }\n \n     public int getLength()\n     {\n+      // Delegate to the URL content handler mechanism to retrieve the\n+      // length of the HTML representation of the directory listing if\n+      // a directory, or -1 if an exception occurs opening the directory.\n+      if (file.isDirectory())\n+        {\n+          URL url = getURL();\n+          try\n+            {\n+              URLConnection connection = url.openConnection();\n+              return connection.getContentLength();\n+            }\n+          catch (IOException e)\n+            {\n+              return -1;\n+            }\n+        }\n+      // Otherwise simply return the file length\n       return (int) file.length();\n     }\n "}]}