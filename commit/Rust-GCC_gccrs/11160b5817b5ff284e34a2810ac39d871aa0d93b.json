{"sha": "11160b5817b5ff284e34a2810ac39d871aa0d93b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTExNjBiNTgxN2I1ZmYyODRlMzRhMjgxMGFjMzlkODcxYWEwZDkzYg==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@st.com", "date": "2006-02-09T20:54:12Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2006-02-09T20:54:12Z"}, "message": "re PR target/26141 (va_arg causes cc1plus ICE in gimplify_addr_expr)\n\nPR target/26141\n\ngcc:\n\t* sh.c (sh_gimplify_va_arg_expr): Don't change the result type when\n\tcomputing the effective result type.\n\ngcc/testsuite:\n\t* g++.dg/expr/stdarg2.C: New test.\n\nFrom-SVN: r110811", "tree": {"sha": "189320c000b05f1164943a1fd6d56dc5d0f30d9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/189320c000b05f1164943a1fd6d56dc5d0f30d9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11160b5817b5ff284e34a2810ac39d871aa0d93b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11160b5817b5ff284e34a2810ac39d871aa0d93b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11160b5817b5ff284e34a2810ac39d871aa0d93b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11160b5817b5ff284e34a2810ac39d871aa0d93b/comments", "author": null, "committer": null, "parents": [{"sha": "91b4415af4fafcd53f44b671003e917dd7ec0cfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91b4415af4fafcd53f44b671003e917dd7ec0cfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91b4415af4fafcd53f44b671003e917dd7ec0cfd"}], "stats": {"total": 73, "additions": 59, "deletions": 14}, "files": [{"sha": "bec237477ad8875ed92b3cf756328710e64fa53b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11160b5817b5ff284e34a2810ac39d871aa0d93b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11160b5817b5ff284e34a2810ac39d871aa0d93b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=11160b5817b5ff284e34a2810ac39d871aa0d93b", "patch": "@@ -1,3 +1,9 @@\n+2006-02-09  J\"orn Rennecke <joern.rennecke@st.com>\n+\n+\tPR target/26141\n+\t* sh.c (sh_gimplify_va_arg_expr): Don't change the result type when\n+\tcomputing the effective result type.\n+\n 2006-02-09  J\"orn Rennecke <joern.rennecke@st.com>\n \n \tPR inline-asm/16194"}, {"sha": "237da2619e7dae57f8581adc61e22105574e3321", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11160b5817b5ff284e34a2810ac39d871aa0d93b/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11160b5817b5ff284e34a2810ac39d871aa0d93b/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=11160b5817b5ff284e34a2810ac39d871aa0d93b", "patch": "@@ -6738,6 +6738,7 @@ sh_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p,\n   tree tmp, pptr_type_node;\n   tree addr, lab_over = NULL, result = NULL;\n   int pass_by_ref = targetm.calls.must_pass_in_stack (TYPE_MODE (type), type);\n+  tree eff_type;\n \n   if (pass_by_ref)\n     type = build_pointer_type (type);\n@@ -6775,36 +6776,37 @@ sh_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p,\n       /* Structures with a single member with a distinct mode are passed\n \t like their member.  This is relevant if the latter has a REAL_TYPE\n \t or COMPLEX_TYPE type.  */\n-      while (TREE_CODE (type) == RECORD_TYPE\n-\t     && (member = find_sole_member (type))\n+      eff_type = type;\n+      while (TREE_CODE (eff_type) == RECORD_TYPE\n+\t     && (member = find_sole_member (eff_type))\n \t     && (TREE_CODE (TREE_TYPE (member)) == REAL_TYPE\n \t\t || TREE_CODE (TREE_TYPE (member)) == COMPLEX_TYPE\n \t\t || TREE_CODE (TREE_TYPE (member)) == RECORD_TYPE))\n \t{\n \t  tree field_type = TREE_TYPE (member);\n \n-\t  if (TYPE_MODE (type) == TYPE_MODE (field_type))\n-\t    type = field_type;\n+\t  if (TYPE_MODE (eff_type) == TYPE_MODE (field_type))\n+\t    eff_type = field_type;\n \t  else\n \t    {\n-\t      gcc_assert ((TYPE_ALIGN (type)\n+\t      gcc_assert ((TYPE_ALIGN (eff_type)\n \t\t\t   < GET_MODE_ALIGNMENT (TYPE_MODE (field_type)))\n-\t\t\t  || (TYPE_ALIGN (type)\n+\t\t\t  || (TYPE_ALIGN (eff_type)\n \t\t\t      > GET_MODE_BITSIZE (TYPE_MODE (field_type))));\n \t      break;\n \t    }\n \t}\n \n       if (TARGET_SH4)\n \t{\n-\t  pass_as_float = ((TREE_CODE (type) == REAL_TYPE && size <= 8)\n-\t\t\t   || (TREE_CODE (type) == COMPLEX_TYPE\n-\t\t\t       && TREE_CODE (TREE_TYPE (type)) == REAL_TYPE\n+\t  pass_as_float = ((TREE_CODE (eff_type) == REAL_TYPE && size <= 8)\n+\t\t\t   || (TREE_CODE (eff_type) == COMPLEX_TYPE\n+\t\t\t       && TREE_CODE (TREE_TYPE (eff_type)) == REAL_TYPE\n \t\t\t       && size <= 16));\n \t}\n       else\n \t{\n-\t  pass_as_float = (TREE_CODE (type) == REAL_TYPE && size == 4);\n+\t  pass_as_float = (TREE_CODE (eff_type) == REAL_TYPE && size == 4);\n \t}\n \n       addr = create_tmp_var (pptr_type_node, NULL);\n@@ -6817,7 +6819,7 @@ sh_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p,\n \t{\n \t  tree next_fp_tmp = create_tmp_var (TREE_TYPE (f_next_fp), NULL);\n \t  tree cmp;\n-\t  bool is_double = size == 8 && TREE_CODE (type) == REAL_TYPE;\n+\t  bool is_double = size == 8 && TREE_CODE (eff_type) == REAL_TYPE;\n \n \t  tmp = build1 (ADDR_EXPR, pptr_type_node, next_fp);\n \t  tmp = build2 (MODIFY_EXPR, void_type_node, addr, tmp);\n@@ -6836,7 +6838,8 @@ sh_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p,\n \t  if (!is_double)\n \t    gimplify_and_add (cmp, pre_p);\n \n-\t  if (TYPE_ALIGN (type) > BITS_PER_WORD || (is_double || size == 16))\n+\t  if (TYPE_ALIGN (eff_type) > BITS_PER_WORD\n+\t      || (is_double || size == 16))\n \t    {\n \t      tmp = fold_convert (ptr_type_node, size_int (UNITS_PER_WORD));\n \t      tmp = build2 (BIT_AND_EXPR, ptr_type_node, next_fp_tmp, tmp);\n@@ -6848,9 +6851,10 @@ sh_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p,\n \t    gimplify_and_add (cmp, pre_p);\n \n #ifdef FUNCTION_ARG_SCmode_WART\n-\t  if (TYPE_MODE (type) == SCmode && TARGET_SH4 && TARGET_LITTLE_ENDIAN)\n+\t  if (TYPE_MODE (eff_type) == SCmode\n+\t      && TARGET_SH4 && TARGET_LITTLE_ENDIAN)\n \t    {\n-\t      tree subtype = TREE_TYPE (type);\n+\t      tree subtype = TREE_TYPE (eff_type);\n \t      tree real, imag;\n \n \t      imag"}, {"sha": "f53188f5c9f12a6577ba45ffc8afd095f517dc80", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11160b5817b5ff284e34a2810ac39d871aa0d93b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11160b5817b5ff284e34a2810ac39d871aa0d93b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=11160b5817b5ff284e34a2810ac39d871aa0d93b", "patch": "@@ -1,3 +1,8 @@\n+2006-02-09  J\"orn Rennecke <joern.rennecke@st.com>\n+\n+\tPR target/26141\n+\t* g++.dg/expr/stdarg2.C: New test.\n+\n 2006-02-09  J\"orn Rennecke <joern.rennecke@st.com>\n \n \tPR inline-asm/16194"}, {"sha": "cf2eabcb1612f1707720362ab89288ca59463172", "filename": "gcc/testsuite/g++.dg/expr/stdarg2.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11160b5817b5ff284e34a2810ac39d871aa0d93b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fstdarg2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11160b5817b5ff284e34a2810ac39d871aa0d93b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fstdarg2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fstdarg2.C?ref=11160b5817b5ff284e34a2810ac39d871aa0d93b", "patch": "@@ -0,0 +1,30 @@\n+// PR target/26141\n+\n+#include <stdarg.h>\n+\n+struct S\n+{\n+  double a;\n+};\n+\n+void\n+foo (int z, ...)\n+{\n+  struct S arg;\n+  va_list ap;\n+  arg = va_arg (ap, struct S);\n+}\n+\n+\n+struct T\n+{\n+  __complex__ float a;\n+};\n+\n+void\n+bar (int z, ...)\n+{\n+  struct T arg;\n+  va_list ap;\n+  arg = va_arg (ap, struct T);\n+}"}]}