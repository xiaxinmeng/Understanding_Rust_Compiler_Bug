{"sha": "535d89c34f3d9f52f3408fc39ef6827327f23c99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM1ZDg5YzM0ZjNkOWY1MmYzNDA4ZmMzOWVmNjgyNzMyN2YyM2M5OQ==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-06-03T21:23:58Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-06-03T21:33:07Z"}, "message": "Remove diagnostics pruning from 'rust_target_compile' [#301, #466]\n\nThis is no longer necessary after #466 \"Expose rust debug and use it\", where\ncommit 665df329a2ad60580ab593f6cbd646aa55927a37 \"rust_debug: Replace fprintf\n(stderr) with rust_debug\" turned all 'fprintf' to 'stderr' into standard GCC\n'inform' ('note: [...]') diagnostics -- which do get pruned by default.\n\nAdjust the testsuite: instead of 'dg-excess-errors', spell out the additional\ndiagnostics now seen.", "tree": {"sha": "92b5015f9b8c6e8be7f2ce6a8f93c3e3b8bde533", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92b5015f9b8c6e8be7f2ce6a8f93c3e3b8bde533"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/535d89c34f3d9f52f3408fc39ef6827327f23c99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/535d89c34f3d9f52f3408fc39ef6827327f23c99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/535d89c34f3d9f52f3408fc39ef6827327f23c99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/535d89c34f3d9f52f3408fc39ef6827327f23c99/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "432c5f9c650f81500007a51480ae13bfc68f77b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/432c5f9c650f81500007a51480ae13bfc68f77b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/432c5f9c650f81500007a51480ae13bfc68f77b1"}], "stats": {"total": 62, "additions": 43, "deletions": 19}, "files": [{"sha": "189f8b8aff2ac931a8ffbcff3ca996614272ea17", "filename": "gcc/testsuite/lib/rust.exp", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535d89c34f3d9f52f3408fc39ef6827327f23c99/gcc%2Ftestsuite%2Flib%2Frust.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535d89c34f3d9f52f3408fc39ef6827327f23c99/gcc%2Ftestsuite%2Flib%2Frust.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Frust.exp?ref=535d89c34f3d9f52f3408fc39ef6827327f23c99", "patch": "@@ -178,10 +178,5 @@ proc rust_target_compile { source dest type options } {\n     set options [concat \"$ALWAYS_RUSTFLAGS\" $options]\n     set options [dg-additional-files-options $options $source]\n \n-    ## FIXME: until the compiler is made less verbose, we need to prune its output almost completely.\n-    # Only keep lines containing certain diagnostics so that we can check these.\n-    global additional_prunes\n-    lappend additional_prunes \"^((?!(error: |warning: |\\[Ii\\]nternal compiler error: )).)*$\"\n-\n     return [target_compile $source $dest $type $options]\n }"}, {"sha": "2966d9c6ae5aefb509f8ddaeb54329842b184a24", "filename": "gcc/testsuite/rust/compile/debug-diagnostics.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535d89c34f3d9f52f3408fc39ef6827327f23c99/gcc%2Ftestsuite%2Frust%2Fcompile%2Fdebug-diagnostics.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535d89c34f3d9f52f3408fc39ef6827327f23c99/gcc%2Ftestsuite%2Frust%2Fcompile%2Fdebug-diagnostics.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fdebug-diagnostics.rs?ref=535d89c34f3d9f52f3408fc39ef6827327f23c99", "patch": "@@ -0,0 +1,5 @@\n+// Just scan for one of the Rust front end debug diagnostics:\n+// { dg-message {note: Attempting to parse file: .+/gcc/testsuite/rust/compile/debug-diagnostics\\.rs} \"\" { target *-*-* } 0 }\n+\n+fn main() {\n+}"}, {"sha": "4eaaea7786cbadc6f78925b48184ff107d0d696a", "filename": "gcc/testsuite/rust/compile/generics4.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535d89c34f3d9f52f3408fc39ef6827327f23c99/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535d89c34f3d9f52f3408fc39ef6827327f23c99/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics4.rs?ref=535d89c34f3d9f52f3408fc39ef6827327f23c99", "patch": "@@ -1,10 +1,17 @@\n-// { dg-excess-errors \"Noisy error and debug\" }\n struct GenericStruct<T>(T, usize);\n \n fn main() {\n     let a2;\n     a2 = GenericStruct::<i8, i32>(1, 456); // { dg-error \"generic item takes at most 1 type arguments but 2 were supplied\" }\n+    // { dg-error {failed to type resolve expression} \"\" { target *-*-* } .-1 }\n+    // { dg-error {Failed to resolve expression of function call} \"\" { target *-*-* } .-2 }\n+    // { duplicate _dg-error {failed to type resolve expression} \"\" { target *-*-* } .-3 }\n+    // { dg-error {expected \\[T\\?\\] got \\[<tyty::error>\\]} \"\" { target *-*-* } .-4 }\n \n     let b2: i32 = a2.0;\n+    // { dg-error {Expected Tuple or ADT got: T\\?} \"\" { target *-*-* } .-1 }\n+    // { dg-error {failed to type resolve expression} \"\" { target *-*-* } .-2 }\n     let c2: usize = a2.1;\n+    // { dg-error {Expected Tuple or ADT got: T\\?} \"\" { target *-*-* } .-1 }\n+    // { dg-error {failed to type resolve expression} \"\" { target *-*-* } .-2 }\n }"}, {"sha": "3b81e1bbee1041c0a29aa4d960e70147dc7f6a90", "filename": "gcc/testsuite/rust/compile/generics6.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535d89c34f3d9f52f3408fc39ef6827327f23c99/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics6.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535d89c34f3d9f52f3408fc39ef6827327f23c99/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics6.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics6.rs?ref=535d89c34f3d9f52f3408fc39ef6827327f23c99", "patch": "@@ -1,4 +1,3 @@\n-// { dg-excess-errors \"Noisy error and debug\" }\n struct Foo<A> {\n     a: A,\n }\n@@ -25,5 +24,8 @@ impl Foo<f32> {\n \n fn main() {\n     let a: i32 = Foo::test(); // { dg-error \"multiple applicable items in scope for: test\" }\n+    // { dg-error {failed to type resolve expression} \"\" { target *-*-* } .-1 }\n+    // { dg-error {Failed to resolve expression of function call} \"\" { target *-*-* } .-2 }\n+    // { duplicate _dg-error {failed to type resolve expression} \"\" { target *-*-* } .-3 }\n }\n "}, {"sha": "f3fd6b5f41bab258436f307c894cdbd5816618d4", "filename": "gcc/testsuite/rust/compile/generics9.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535d89c34f3d9f52f3408fc39ef6827327f23c99/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics9.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535d89c34f3d9f52f3408fc39ef6827327f23c99/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics9.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics9.rs?ref=535d89c34f3d9f52f3408fc39ef6827327f23c99", "patch": "@@ -1,6 +1,6 @@\n-// { dg-excess-errors \"Noisy error and debug\" }\n struct Foo<A, B = (A, B)>(A, B);\n // { dg-error \"failed to resolve TypePath: B\" \"\" { target *-*-* } .-1 }\n+// { dg-error \"unresolved type\" \"\" { target *-*-* } .-2 }\n \n fn main() {\n     let a: Foo<bool>;"}, {"sha": "cb8027b9c7f8863f27324e37b46c13fc98d7da5f", "filename": "gcc/testsuite/rust/compile/issue-407-2.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535d89c34f3d9f52f3408fc39ef6827327f23c99/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-407-2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535d89c34f3d9f52f3408fc39ef6827327f23c99/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-407-2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-407-2.rs?ref=535d89c34f3d9f52f3408fc39ef6827327f23c99", "patch": "@@ -1,13 +1,21 @@\n-// { dg-excess-errors \"Noisy error and debug\" }\n-\n // #407\n pub fn loopy()  {\n     let mut a = 1;\n+    // { dg-error {failed to parse expr with block in parsing expr statement} \"\" { target *-*-* } .+2 }\n+    // { dg-error {failed to parse statement or expression without block in block expression} \"\" { target *-*-* } .+1 }\n     loop {\n+        // { dg-error {failed to parse expr with block in parsing expr statement} \"\" { target *-*-* } .+2 }\n+        // { dg-error {failed to parse statement or expression without block in block expression} \"\" { target *-*-* } .+1 }\n \tif a < 40 {\n \t    a + = 1; // { dg-error \"found unexpected token '=' in null denotation\" }\n+            // { dg-error {failed to parse expression for expression without block \\(pratt-parsed expression is null\\)} \"\" { target *-*-* } .-1 }\n+            // { dg-error {failed to parse statement or expression without block in block expression} \"\" { target *-*-* } .-2 }\n+            // { dg-error {failed to parse if body block expression in if expression} \"\" { target *-*-* } .-3 }\n+            // { dg-error {could not parse loop body in \\(infinite\\) loop expression} \"\" { target *-*-* } .+1 }\n \t} else {\n \t    break;\n \t}\n     }\n }\n+// { dg-error {unrecognised token '\\}' for start of item} \"\" { target *-*-* } .-1 }\n+// { dg-error {failed to parse item in crate} \"\" { target *-*-* } .-2 }"}, {"sha": "530b7ddfc125d2ed662f0135a4893e0657a17b95", "filename": "gcc/testsuite/rust/compile/issue-407.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535d89c34f3d9f52f3408fc39ef6827327f23c99/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-407.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535d89c34f3d9f52f3408fc39ef6827327f23c99/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-407.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-407.rs?ref=535d89c34f3d9f52f3408fc39ef6827327f23c99", "patch": "@@ -1,7 +1,9 @@\n-// { dg-excess-errors \"Noisy error and debug\" }\n-\n // This already worked before the #409 code changes.\n fn test()  {\n     let mut a = 1;\n     a + = 1; // { dg-error \"found unexpected token '=' in null denotation\" }\n+    // { dg-error {failed to parse expression for expression without block \\(pratt-parsed expression is null\\)} \"\" { target *-*-* } .-1 }\n+    // { dg-error {failed to parse statement or expression without block in block expression} \"\" { target *-*-* } .-2 }\n+    // { dg-error {unrecognised token 'integer literal' for start of item} \"\" { target *-*-* } .-3 }\n+    // { dg-error {failed to parse item in crate} \"\" { target *-*-* } .-4 }\n }"}, {"sha": "05976712c4d6c0e12a3a4dabc3fa75e2d451dcf6", "filename": "gcc/testsuite/rust/compile/method1.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535d89c34f3d9f52f3408fc39ef6827327f23c99/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmethod1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535d89c34f3d9f52f3408fc39ef6827327f23c99/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmethod1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmethod1.rs?ref=535d89c34f3d9f52f3408fc39ef6827327f23c99", "patch": "@@ -1,14 +1,15 @@\n-// { dg-excess-errors \"Noisy error and debug\" }\n struct Foo(i32);\n \n impl Foo {\n     fn test() {}\n }\n \n pub fn main() {\n+    // { dg-error {expected \\[\\(\\)\\] got \\[<tyty::error>\\]} \"\" { target *-*-* } .-1 }\n     let a;\n     a = Foo(123);\n \n     a.test()\n     // { dg-error \"associated function is not a method\" \"\" { target *-*-* } .-1 }\n+    // { dg-error {failed to type resolve expression} \"\" { target *-*-* } .-2 }\n }"}, {"sha": "4a0e78457f815f7785215a733ecc2c3091d69917", "filename": "gcc/testsuite/rust/compile/method2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535d89c34f3d9f52f3408fc39ef6827327f23c99/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmethod2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535d89c34f3d9f52f3408fc39ef6827327f23c99/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmethod2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmethod2.rs?ref=535d89c34f3d9f52f3408fc39ef6827327f23c99", "patch": "@@ -1,4 +1,3 @@\n-// { dg-excess-errors \"Noisy error and debug\" }\n struct Foo<A, B>(A, B);\n \n impl Foo<i32, f32> {\n@@ -14,4 +13,5 @@ fn main() {\n     let b;\n     b = a.test::<asfasfr>(false);\n     // { dg-error \"failed to resolve TypePath: asfasfr\" \"\" { target *-*-* } .-1 }\n+    // { dg-error \"unresolved type\" \"\" { target *-*-* } .-2 }\n }"}, {"sha": "730b53dcfb977b177207e698d23c047d6f1856fc", "filename": "gcc/testsuite/rust/compile/shadow1.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535d89c34f3d9f52f3408fc39ef6827327f23c99/gcc%2Ftestsuite%2Frust%2Fcompile%2Fshadow1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535d89c34f3d9f52f3408fc39ef6827327f23c99/gcc%2Ftestsuite%2Frust%2Fcompile%2Fshadow1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fshadow1.rs?ref=535d89c34f3d9f52f3408fc39ef6827327f23c99", "patch": "@@ -1,7 +1,8 @@\n-// { dg-excess-errors \"Noisy error and debug\" }\n fn main() {\n     let mut x = 5;\n     let mut x;\n     x = true;\n     x = x + 2; // { dg-error \"cannot apply this operator to types bool and <integer>\"  }\n+    // { dg-error {failed to type resolve expression} \"\" { target *-*-* } .-1 }\n+    // { dg-error {expected \\[bool\\] got \\[<tyty::error>\\]} \"\" { target *-*-* } .-2 }\n }"}, {"sha": "1875fb4f33ee2c40d22c7fa0aafa573c42322bff", "filename": "gcc/testsuite/rust/compile/struct_init1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535d89c34f3d9f52f3408fc39ef6827327f23c99/gcc%2Ftestsuite%2Frust%2Fcompile%2Fstruct_init1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535d89c34f3d9f52f3408fc39ef6827327f23c99/gcc%2Ftestsuite%2Frust%2Fcompile%2Fstruct_init1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fstruct_init1.rs?ref=535d89c34f3d9f52f3408fc39ef6827327f23c99", "patch": "@@ -6,4 +6,5 @@ struct Foo {\n fn main() {\n     let a = Foo { 0: 10.0, 1: 20.0 }; // { dg-error \"failed to resolve type for field\" }\n     // { dg-error \"unknown field\" \"\" { target *-*-* } .-1 }\n+    // { dg-prune-output \"compilation terminated\" }\n }"}, {"sha": "3f61b8b4e4e491e05545dfbe71a3ca32636d35e5", "filename": "gcc/testsuite/rust/compile/type-bindings1.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535d89c34f3d9f52f3408fc39ef6827327f23c99/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftype-bindings1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535d89c34f3d9f52f3408fc39ef6827327f23c99/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftype-bindings1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftype-bindings1.rs?ref=535d89c34f3d9f52f3408fc39ef6827327f23c99", "patch": "@@ -1,8 +1,11 @@\n-// { dg-excess-errors \"Noisy error and debug\" }\n struct Foo<A, B>(A, B);\n \n fn main() {\n     let a;\n     a = Foo::<A = i32, B = f32>(123f32);\n     // { dg-error \"associated type bindings are not allowed here\" \"\" { target *-*-* } .-1 }\n+    // { dg-error {failed to type resolve expression} \"\" { target *-*-* } .-2 }\n+    // { dg-error {Failed to resolve expression of function call} \"\" { target *-*-* } .-3 }\n+    // { duplicate _dg-error {failed to type resolve expression} \"\" { target *-*-* } .-4 }\n+    // { dg-error {expected \\[T\\?\\] got \\[<tyty::error>\\]} \"\" { target *-*-* } .-5 }\n }"}, {"sha": "848643f0bd2889a572962eeb5fb80b99beb3c257", "filename": "gcc/testsuite/rust/compile/unary_negation.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535d89c34f3d9f52f3408fc39ef6827327f23c99/gcc%2Ftestsuite%2Frust%2Fcompile%2Funary_negation.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535d89c34f3d9f52f3408fc39ef6827327f23c99/gcc%2Ftestsuite%2Frust%2Fcompile%2Funary_negation.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Funary_negation.rs?ref=535d89c34f3d9f52f3408fc39ef6827327f23c99", "patch": "@@ -1,10 +1,9 @@\n-// { dg-excess-errors \"Noisy error and debug\" }\n-\n fn main() {\n     let a: i32 = -1;\n     let b: i32 = 3 - -1;\n     let c: bool = !false;\n     let d: i32 = !3;\n \n     let e: f32 = -true; // // { dg-error \"cannot apply unary - to bool\" }\n+    // { dg-error {failed to type resolve expression} \"\" { target *-*-* } .-1 }\n }"}, {"sha": "96402be268fe0afd9b76a447abb672587673cff1", "filename": "gcc/testsuite/rust/compile/unary_not.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535d89c34f3d9f52f3408fc39ef6827327f23c99/gcc%2Ftestsuite%2Frust%2Fcompile%2Funary_not.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535d89c34f3d9f52f3408fc39ef6827327f23c99/gcc%2Ftestsuite%2Frust%2Fcompile%2Funary_not.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Funary_not.rs?ref=535d89c34f3d9f52f3408fc39ef6827327f23c99", "patch": "@@ -1,9 +1,9 @@\n-// { dg-excess-errors \"Noisy error and debug\" }\n fn main() {\n     let a: i32 = -1;\n     let b: i32 = 3 - -1;\n     let c: bool = !false;\n     let d: i32 = !3;\n \n     let e: f32 = !5f32; // { dg-error \"cannot apply unary ! to f32\" }\n+    // { dg-error {failed to type resolve expression} \"\" { target *-*-* } .-1 }\n }"}]}