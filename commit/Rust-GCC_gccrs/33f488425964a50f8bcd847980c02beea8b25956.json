{"sha": "33f488425964a50f8bcd847980c02beea8b25956", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzNmNDg4NDI1OTY0YTUwZjhiY2Q4NDc5ODBjMDJiZWVhOGIyNTk1Ng==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-01-19T19:00:21Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-01-19T19:00:21Z"}, "message": "re PR c++/59759 (internal compiler error: in unify, using std::enable_if on classes)\n\n\tPR c++/59759\n\t* pt.c (convert_template_argument): Handle VAR_DECL properly.\n\nFrom-SVN: r232580", "tree": {"sha": "5619684f985ef38c0ced0fa21b91f394c85a805c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5619684f985ef38c0ced0fa21b91f394c85a805c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33f488425964a50f8bcd847980c02beea8b25956", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33f488425964a50f8bcd847980c02beea8b25956", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33f488425964a50f8bcd847980c02beea8b25956", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33f488425964a50f8bcd847980c02beea8b25956/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a88d10cb99e33d58fd07a4bad0ae7d523d731135", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a88d10cb99e33d58fd07a4bad0ae7d523d731135", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a88d10cb99e33d58fd07a4bad0ae7d523d731135"}], "stats": {"total": 80, "additions": 74, "deletions": 6}, "files": [{"sha": "45cb0e72a4c6abf3ca101e51739bf3b4cbbaddc1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33f488425964a50f8bcd847980c02beea8b25956/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33f488425964a50f8bcd847980c02beea8b25956/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=33f488425964a50f8bcd847980c02beea8b25956", "patch": "@@ -1,3 +1,8 @@\n+2016-01-19  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/59759\n+\t* pt.c (convert_template_argument): Handle VAR_DECL properly.\n+\n 2016-01-19  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/68586"}, {"sha": "ae60f1c2d0a667d29b8617e97f5baf3462374ab0", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33f488425964a50f8bcd847980c02beea8b25956/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33f488425964a50f8bcd847980c02beea8b25956/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=33f488425964a50f8bcd847980c02beea8b25956", "patch": "@@ -19928,11 +19928,20 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict,\n       return unify_template_argument_mismatch (explain_p, parm, arg);\n \n     case VAR_DECL:\n-      /* A non-type template parameter that is a variable should be a\n-\t an integral constant, in which case, it whould have been\n-\t folded into its (constant) value. So we should not be getting\n-\t a variable here.  */\n-      gcc_unreachable ();\n+      /* We might get a variable as a non-type template argument in parm if the\n+\t corresponding parameter is type-dependent.  Make any necessary\n+\t adjustments based on whether arg is a reference.  */\n+      if (CONSTANT_CLASS_P (arg))\n+\tparm = fold_non_dependent_expr (parm);\n+      else if (REFERENCE_REF_P (arg))\n+\t{\n+\t  tree sub = TREE_OPERAND (arg, 0);\n+\t  STRIP_NOPS (sub);\n+\t  if (TREE_CODE (sub) == ADDR_EXPR)\n+\t    arg = TREE_OPERAND (sub, 0);\n+\t}\n+      /* Now use the normal expression code to check whether they match.  */\n+      goto expr;\n \n     case TYPE_ARGUMENT_PACK:\n     case NONTYPE_ARGUMENT_PACK:\n@@ -19965,7 +19974,7 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict,\n       if (is_overloaded_fn (parm) || type_unknown_p (parm))\n \treturn unify_success (explain_p);\n       gcc_assert (EXPR_P (parm));\n-\n+    expr:\n       /* We must be looking at an expression.  This can happen with\n \t something like:\n "}, {"sha": "10cde2d084523dab1197549173b7cfe2637f50a4", "filename": "gcc/testsuite/g++.dg/cpp0x/temp_default6.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33f488425964a50f8bcd847980c02beea8b25956/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftemp_default6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33f488425964a50f8bcd847980c02beea8b25956/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftemp_default6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftemp_default6.C?ref=33f488425964a50f8bcd847980c02beea8b25956", "patch": "@@ -0,0 +1,27 @@\n+// PR c++/59759\n+// { dg-do compile { target c++11 } }\n+\n+namespace std {\n+template <typename _Tp>\n+struct B {\n+  static constexpr _Tp value = 0;\n+};\n+typedef B<int> false_type;\n+struct C : false_type {};\n+template <typename>\n+struct is_integral : C {};\n+template <int, typename _Tp>\n+struct enable_if {\n+  typedef _Tp type;\n+};\n+}\n+enum class enabled;\n+extern constexpr enabled dummy{};\n+template <typename T, typename std::enable_if<std::is_integral<T>::value,\n+                                              T>::type = dummy>\n+class A;\n+template <typename T>\n+void f(A<const T&>*) {\n+  A<const enabled&>* map;\n+  f(map);\n+}"}, {"sha": "c517aadb1fc1785166c0ad4ecc3c4c07ef192ced", "filename": "gcc/testsuite/g++.dg/cpp0x/temp_default7.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33f488425964a50f8bcd847980c02beea8b25956/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftemp_default7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33f488425964a50f8bcd847980c02beea8b25956/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftemp_default7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftemp_default7.C?ref=33f488425964a50f8bcd847980c02beea8b25956", "patch": "@@ -0,0 +1,27 @@\n+// PR c++/59759\n+// { dg-do compile { target c++11 } }\n+\n+namespace std {\n+template <typename _Tp>\n+struct B {\n+  static constexpr _Tp value = 0;\n+};\n+typedef B<int> false_type;\n+struct C : false_type {};\n+template <typename>\n+struct is_integral : C {};\n+template <int, typename _Tp>\n+struct enable_if {\n+  typedef _Tp type;\n+};\n+}\n+enum class enabled;\n+constexpr enabled dummy{};\n+template <typename T, typename std::enable_if<std::is_integral<T>::value,\n+                                              enabled>::type = dummy>\n+class A;\n+template <typename T>\n+void f(A<T>*) {\n+  A<int>* map;\n+  f(map);\n+}"}]}