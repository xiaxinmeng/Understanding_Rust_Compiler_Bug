{"sha": "abf86bf22730d89446f0013e9ce0fd6cddbc6e25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJmODZiZjIyNzMwZDg5NDQ2ZjAwMTNlOWNlMGZkNmNkZGJjNmUyNQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2005-07-29T09:32:14Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2005-07-29T09:32:14Z"}, "message": "re PR rtl-optimization/23117 (ICE on valid code while building libgcc)\n\nRichard Earnshaw  <richard.earnshaw@arm.com>\nSteven Bosscher  <stevenb@suse.de>\n\n\tPR rtl-optimization/23117\n\t* sched-rgn.c (add_branch_dependences): Handle COND_EXEC correctly\n\twhen head == tail.  Tidy comment.\n\nCo-Authored-By: Steven Bosscher <stevenb@suse.de>\n\nFrom-SVN: r102551", "tree": {"sha": "eccb16c0a23cc6721068c0e1621ece7af06a0871", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eccb16c0a23cc6721068c0e1621ece7af06a0871"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abf86bf22730d89446f0013e9ce0fd6cddbc6e25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abf86bf22730d89446f0013e9ce0fd6cddbc6e25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abf86bf22730d89446f0013e9ce0fd6cddbc6e25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abf86bf22730d89446f0013e9ce0fd6cddbc6e25/comments", "author": null, "committer": null, "parents": [{"sha": "37cf61167f3d85b235bec602cef96b6e39764f2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37cf61167f3d85b235bec602cef96b6e39764f2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37cf61167f3d85b235bec602cef96b6e39764f2c"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "212be1898bf5e0870544695d570ecf38373eb25c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abf86bf22730d89446f0013e9ce0fd6cddbc6e25/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abf86bf22730d89446f0013e9ce0fd6cddbc6e25/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=abf86bf22730d89446f0013e9ce0fd6cddbc6e25", "patch": "@@ -1,3 +1,10 @@\n+2005-07-29  Richard Earnshaw  <richard.earnshaw@arm.com>\n+\t    Steven Bosscher  <stevenb@suse.de>\n+\n+\tPR rtl-optimization/23117\n+\t* sched-rgn.c (add_branch_dependences): Handle COND_EXEC correctly\n+\twhen head == tail.  Tidy comment.\n+\n 2005-07-28  Richard Henderson  <rth@redhat.com>\n \n \t* cse.c (exp_equiv_p): Special case CONST_DOUBLE."}, {"sha": "ef182821412e111013d677210ce305482d95d6db", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abf86bf22730d89446f0013e9ce0fd6cddbc6e25/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abf86bf22730d89446f0013e9ce0fd6cddbc6e25/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=abf86bf22730d89446f0013e9ce0fd6cddbc6e25", "patch": "@@ -1954,9 +1954,9 @@ add_branch_dependences (rtx head, rtx tail)\n \n \t\tT = [addr]\n \tC  ?\taddr += 4\n-\t!C  ?\tX += 12\n+\t!C ?\tX += 12\n \tC  ?\tT += 1\n-\tC ?\tjump foo\n+\tC  ?\tjump foo\n \n      On a target with a one cycle stall on a memory access the optimal\n      sequence would be:\n@@ -1977,17 +1977,17 @@ add_branch_dependences (rtx head, rtx tail)\n   if (!reload_completed || ! JUMP_P (tail))\n     return;\n \n-  insn = PREV_INSN (tail);\n+  insn = tail;\n   while (insn != head)\n     {\n+      insn = PREV_INSN (insn);\n+\n       /* Note that we want to add this dependency even when\n \t sched_insns_conditions_mutex_p returns true.  The whole point\n \t is that we _want_ this dependency, even if these insns really\n \t are independent.  */\n       if (INSN_P (insn) && GET_CODE (PATTERN (insn)) == COND_EXEC)\n \tadd_dependence (tail, insn, REG_DEP_ANTI);\n-\n-      insn = PREV_INSN (insn);\n     }\n #endif\n }"}]}