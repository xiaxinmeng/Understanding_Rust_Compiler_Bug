{"sha": "3cd52053f80846df2ea22e3fff059ebc094e649b", "node_id": "C_kwDOANBUbNoAKDNjZDUyMDUzZjgwODQ2ZGYyZWEyMmUzZmZmMDU5ZWJjMDk0ZTY0OWI", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2022-04-29T12:08:58Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-06-01T08:43:15Z"}, "message": "[Ada] Suppress warnings on membership test of ranges\n\nFor a membership test \"X in A .. B\", the compiler used to warn if it\ncould prove that X is within one of the bounds.  For example, if we know\nat compile time that X >= A, then the above could be replaced by \"X <=\nB\".\n\nThis patch suppresses that warning, because there is really\nnothing wrong with the membership test, and programmers sometimes\nfind it annoying.\n\ngcc/ada/\n\n\t* exp_ch4.adb (Expand_N_In): Do not warn in the above-mentioned\n\tcases.\n\t* fe.h (Assume_No_Invalid_Values): Remove from fe.h, because\n\tthis is not used in gigi.\n\t* opt.ads (Assume_No_Invalid_Values): Improve the comment. We\n\tdon't need to \"clearly prove\"; we can just \"prove\". Remove the\n\tcomment about fe.h, which is no longer true.", "tree": {"sha": "11051597b326f842e119d7f9f28d5c81622f87b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11051597b326f842e119d7f9f28d5c81622f87b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cd52053f80846df2ea22e3fff059ebc094e649b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cd52053f80846df2ea22e3fff059ebc094e649b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cd52053f80846df2ea22e3fff059ebc094e649b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cd52053f80846df2ea22e3fff059ebc094e649b/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae575e93b6f7fb7077940cb7410f899da184ec2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae575e93b6f7fb7077940cb7410f899da184ec2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae575e93b6f7fb7077940cb7410f899da184ec2d"}], "stats": {"total": 53, "additions": 7, "deletions": 46}, "files": [{"sha": "3b4d521dfae98e1b5dcba69eaad7f67ee340ed08", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 5, "deletions": 39, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd52053f80846df2ea22e3fff059ebc094e649b/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd52053f80846df2ea22e3fff059ebc094e649b/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=3cd52053f80846df2ea22e3fff059ebc094e649b", "patch": "@@ -6388,7 +6388,7 @@ package body Exp_Ch4 is\n             Lcheck : Compare_Result;\n             Ucheck : Compare_Result;\n \n-            Warn1 : constant Boolean :=\n+            Warn : constant Boolean :=\n                       Constant_Condition_Warnings\n                         and then Comes_From_Source (N)\n                         and then not In_Instance;\n@@ -6397,16 +6397,6 @@ package body Exp_Ch4 is\n             --  also skip these warnings in an instance since it may be the\n             --  case that different instantiations have different ranges.\n \n-            Warn2 : constant Boolean :=\n-                      Warn1\n-                        and then Nkind (Original_Node (Rop)) = N_Range\n-                        and then Is_Integer_Type (Etype (Lo));\n-            --  For the case where only one bound warning is elided, we also\n-            --  insist on an explicit range and an integer type. The reason is\n-            --  that the use of enumeration ranges including an end point is\n-            --  common, as is the use of a subtype name, one of whose bounds is\n-            --  the same as the type of the expression.\n-\n          begin\n             --  If test is explicit x'First .. x'Last, replace by valid check\n \n@@ -6491,7 +6481,7 @@ package body Exp_Ch4 is\n             --  legality checks, because we are constant-folding beyond RM 4.9.\n \n             if Lcheck = LT or else Ucheck = GT then\n-               if Warn1 then\n+               if Warn then\n                   Error_Msg_N (\"?c?range test optimized away\", N);\n                   Error_Msg_N (\"\\?c?value is known to be out of range\", N);\n                end if;\n@@ -6505,7 +6495,7 @@ package body Exp_Ch4 is\n             --  since we know we are in range.\n \n             elsif Lcheck in Compare_GE and then Ucheck in Compare_LE then\n-               if Warn1 then\n+               if Warn then\n                   Error_Msg_N (\"?c?range test optimized away\", N);\n                   Error_Msg_N (\"\\?c?value is known to be in range\", N);\n                end if;\n@@ -6520,28 +6510,16 @@ package body Exp_Ch4 is\n             --  a comparison against the upper bound.\n \n             elsif Lcheck in Compare_GE then\n-               if Warn2 and then not In_Instance then\n-                  Error_Msg_N (\"??lower bound test optimized away\", Lo);\n-                  Error_Msg_N (\"\\??value is known to be in range\", Lo);\n-               end if;\n-\n                Rewrite (N,\n                  Make_Op_Le (Loc,\n                    Left_Opnd  => Lop,\n                    Right_Opnd => High_Bound (Rop)));\n                Analyze_And_Resolve (N, Restyp);\n                goto Leave;\n \n-            --  If upper bound check succeeds and lower bound check is not\n-            --  known to succeed or fail, then replace the range check with\n-            --  a comparison against the lower bound.\n+            --  Inverse of previous case.\n \n             elsif Ucheck in Compare_LE then\n-               if Warn2 and then not In_Instance then\n-                  Error_Msg_N (\"??upper bound test optimized away\", Hi);\n-                  Error_Msg_N (\"\\??value is known to be in range\", Hi);\n-               end if;\n-\n                Rewrite (N,\n                  Make_Op_Ge (Loc,\n                    Left_Opnd  => Lop,\n@@ -6555,7 +6533,7 @@ package body Exp_Ch4 is\n             --  see if we can determine the outcome assuming everything is\n             --  valid, and if so give an appropriate warning.\n \n-            if Warn1 and then not Assume_No_Invalid_Values then\n+            if Warn and then not Assume_No_Invalid_Values then\n                Lcheck := Compile_Time_Compare (Lop, Lo, Assume_Valid => True);\n                Ucheck := Compile_Time_Compare (Lop, Hi, Assume_Valid => True);\n \n@@ -6570,18 +6548,6 @@ package body Exp_Ch4 is\n                elsif Lcheck in Compare_GE and then Ucheck in Compare_LE then\n                   Error_Msg_N\n                     (\"?c?value can only be out of range if it is invalid\", N);\n-\n-               --  Lower bound check succeeds if value is valid\n-\n-               elsif Warn2 and then Lcheck in Compare_GE then\n-                  Error_Msg_N\n-                    (\"?c?lower bound check only fails if it is invalid\", Lo);\n-\n-               --  Upper bound  check succeeds if value is valid\n-\n-               elsif Warn2 and then Ucheck in Compare_LE then\n-                  Error_Msg_N\n-                    (\"?c?upper bound check only fails for invalid values\", Hi);\n                end if;\n             end if;\n          end;"}, {"sha": "10484658e4d1f81b8d17f726ad5f5b6717c3cbe6", "filename": "gcc/ada/fe.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd52053f80846df2ea22e3fff059ebc094e649b/gcc%2Fada%2Ffe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd52053f80846df2ea22e3fff059ebc094e649b/gcc%2Fada%2Ffe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffe.h?ref=3cd52053f80846df2ea22e3fff059ebc094e649b", "patch": "@@ -203,7 +203,6 @@ extern Boolean In_Extended_Main_Code_Unit\t(Entity_Id);\n /* opt: */\n \n #define Ada_Version\t\t\topt__ada_version\n-#define Assume_No_Invalid_Values\topt__assume_no_invalid_values\n #define Back_End_Inlining\t\topt__back_end_inlining\n #define Debug_Generated_Code\t\topt__debug_generated_code\n #define Enable_128bit_Types\t\topt__enable_128bit_types\n@@ -220,7 +219,6 @@ typedef enum {\n } Ada_Version_Type;\n \n extern Ada_Version_Type Ada_Version;\n-extern Boolean Assume_No_Invalid_Values;\n extern Boolean Back_End_Inlining;\n extern Boolean Debug_Generated_Code;\n extern Boolean Enable_128bit_Types;"}, {"sha": "04908954fed56e9b28c886c14f82feaebe7176a4", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd52053f80846df2ea22e3fff059ebc094e649b/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd52053f80846df2ea22e3fff059ebc094e649b/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=3cd52053f80846df2ea22e3fff059ebc094e649b", "patch": "@@ -186,12 +186,9 @@ package Opt is\n    Assume_No_Invalid_Values : Boolean := False;\n    --  GNAT Normally, in accordance with (RM 13.9.1 (9-11)) the front end\n    --  assumes that values could have invalid representations, unless it can\n-   --  clearly prove that the values are valid. If this switch is set (by\n+   --  prove that the values are valid. If this switch is set (by -gnatB or\n    --  pragma Assume_No_Invalid_Values (On)), then the compiler assumes values\n-   --  are valid and in range of their representations. This feature is now\n-   --  fully enabled in the compiler.\n-\n-   --  WARNING: There is a matching C declaration of this variable in fe.h\n+   --  are valid and in range of their representations.\n \n    Back_Annotate_Rep_Info : Boolean := False;\n    --  GNAT"}]}