{"sha": "971540bd153e6dede58c6c9e26465338807623a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTcxNTQwYmQxNTNlNmRlZGU1OGM2YzllMjY0NjUzMzg4MDc2MjNhNQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2015-06-01T12:45:55Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2015-06-01T12:45:55Z"}, "message": "Change use to type-based pool allocator in\n\n\t* tree-ssa-pre.c (get_or_alloc_expr_for_name): Use new type-based pool allocator.\n\t(bitmap_set_new): Likewise.\n\t(get_or_alloc_expr_for_constant): Likewise.\n\t(get_or_alloc_expr_for): Likewise.\n\t(phi_translate_1): Likewise.\n\t(compute_avail): Likewise.\n\t(init_pre): Likewise.\n\t(fini_pre): Likewise.\n\nFrom-SVN: r223963", "tree": {"sha": "3496ac8a8c4d7c2d2cfffcb4f3e3d8a5a1edb950", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3496ac8a8c4d7c2d2cfffcb4f3e3d8a5a1edb950"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/971540bd153e6dede58c6c9e26465338807623a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/971540bd153e6dede58c6c9e26465338807623a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/971540bd153e6dede58c6c9e26465338807623a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/971540bd153e6dede58c6c9e26465338807623a5/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "973004cbce925b39f2f6953e36afd2202b9868dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/973004cbce925b39f2f6953e36afd2202b9868dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/973004cbce925b39f2f6953e36afd2202b9868dc"}], "stats": {"total": 43, "additions": 25, "deletions": 18}, "files": [{"sha": "ff8ac033efd861fe5b247053411a06974986198b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/971540bd153e6dede58c6c9e26465338807623a5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/971540bd153e6dede58c6c9e26465338807623a5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=971540bd153e6dede58c6c9e26465338807623a5", "patch": "@@ -1,3 +1,14 @@\n+2015-06-01  Martin Liska  <mliska@suse.cz>\n+\n+\t* tree-ssa-pre.c (get_or_alloc_expr_for_name): Use new type-based pool allocator.\n+\t(bitmap_set_new): Likewise.\n+\t(get_or_alloc_expr_for_constant): Likewise.\n+\t(get_or_alloc_expr_for): Likewise.\n+\t(phi_translate_1): Likewise.\n+\t(compute_avail): Likewise.\n+\t(init_pre): Likewise.\n+\t(fini_pre): Likewise.\n+\n 2015-06-01  Martin Liska  <mliska@suse.cz>\n \n \t* sched-deps.c (create_dep_node): Use new type-based pool allocator."}, {"sha": "082dbafc7dedfb5d0235939e08cf621c8783eaaa", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/971540bd153e6dede58c6c9e26465338807623a5/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/971540bd153e6dede58c6c9e26465338807623a5/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=971540bd153e6dede58c6c9e26465338807623a5", "patch": "@@ -380,7 +380,7 @@ clear_expression_ids (void)\n   expressions.release ();\n }\n \n-static alloc_pool pre_expr_pool;\n+static pool_allocator<pre_expr_d> pre_expr_pool (\"pre_expr nodes\", 30);\n \n /* Given an SSA_NAME NAME, get or create a pre_expr to represent it.  */\n \n@@ -398,7 +398,7 @@ get_or_alloc_expr_for_name (tree name)\n   if (result_id != 0)\n     return expression_for_id (result_id);\n \n-  result = (pre_expr) pool_alloc (pre_expr_pool);\n+  result = pre_expr_pool.allocate ();\n   result->kind = NAME;\n   PRE_EXPR_NAME (result) = name;\n   alloc_expression_id (result);\n@@ -519,7 +519,7 @@ static unsigned int get_expr_value_id (pre_expr);\n /* We can add and remove elements and entries to and from sets\n    and hash tables, so we use alloc pools for them.  */\n \n-static alloc_pool bitmap_set_pool;\n+static pool_allocator<bitmap_set> bitmap_set_pool (\"Bitmap sets\", 30);\n static bitmap_obstack grand_bitmap_obstack;\n \n /* Set of blocks with statements that have had their EH properties changed.  */\n@@ -635,7 +635,7 @@ add_to_value (unsigned int v, pre_expr e)\n static bitmap_set_t\n bitmap_set_new (void)\n {\n-  bitmap_set_t ret = (bitmap_set_t) pool_alloc (bitmap_set_pool);\n+  bitmap_set_t ret = bitmap_set_pool.allocate ();\n   bitmap_initialize (&ret->expressions, &grand_bitmap_obstack);\n   bitmap_initialize (&ret->values, &grand_bitmap_obstack);\n   return ret;\n@@ -1125,7 +1125,7 @@ get_or_alloc_expr_for_constant (tree constant)\n   if (result_id != 0)\n     return expression_for_id (result_id);\n \n-  newexpr = (pre_expr) pool_alloc (pre_expr_pool);\n+  newexpr = pre_expr_pool.allocate ();\n   newexpr->kind = CONSTANT;\n   PRE_EXPR_CONSTANT (newexpr) = constant;\n   alloc_expression_id (newexpr);\n@@ -1176,13 +1176,13 @@ get_or_alloc_expr_for (tree t)\n       vn_nary_op_lookup (t, &result);\n       if (result != NULL)\n \t{\n-\t  pre_expr e = (pre_expr) pool_alloc (pre_expr_pool);\n+\t  pre_expr e = pre_expr_pool.allocate ();\n \t  e->kind = NARY;\n \t  PRE_EXPR_NARY (e) = result;\n \t  result_id = lookup_expression_id (e);\n \t  if (result_id != 0)\n \t    {\n-\t      pool_free (pre_expr_pool, e);\n+\t      pre_expr_pool.remove (e);\n \t      e = expression_for_id (result_id);\n \t      return e;\n \t    }\n@@ -1526,7 +1526,7 @@ phi_translate_1 (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \t    if (result && is_gimple_min_invariant (result))\n \t      return get_or_alloc_expr_for_constant (result);\n \n-\t    expr = (pre_expr) pool_alloc (pre_expr_pool);\n+\t    expr = pre_expr_pool.allocate ();\n \t    expr->kind = NARY;\n \t    expr->id = 0;\n \t    if (nary)\n@@ -1688,7 +1688,7 @@ phi_translate_1 (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \t\treturn NULL;\n \t      }\n \n-\t    expr = (pre_expr) pool_alloc (pre_expr_pool);\n+\t    expr = pre_expr_pool.allocate ();\n \t    expr->kind = REFERENCE;\n \t    expr->id = 0;\n \n@@ -3795,7 +3795,7 @@ compute_avail (void)\n \t\t    || gimple_bb (SSA_NAME_DEF_STMT\n \t\t\t\t    (gimple_vuse (stmt))) != block)\n \t\t  {\n-\t\t    result = (pre_expr) pool_alloc (pre_expr_pool);\n+\t\t    result = pre_expr_pool.allocate ();\n \t\t    result->kind = REFERENCE;\n \t\t    result->id = 0;\n \t\t    PRE_EXPR_REFERENCE (result) = ref;\n@@ -3835,7 +3835,7 @@ compute_avail (void)\n \t\t\t  && vn_nary_may_trap (nary))\n \t\t\tcontinue;\n \n-\t\t      result = (pre_expr) pool_alloc (pre_expr_pool);\n+\t\t      result = pre_expr_pool.allocate ();\n \t\t      result->kind = NARY;\n \t\t      result->id = 0;\n \t\t      PRE_EXPR_NARY (result) = nary;\n@@ -3876,7 +3876,7 @@ compute_avail (void)\n \t\t\t    continue;\n \t\t\t}\n \n-\t\t      result = (pre_expr) pool_alloc (pre_expr_pool);\n+\t\t      result = pre_expr_pool.allocate ();\n \t\t      result->kind = REFERENCE;\n \t\t      result->id = 0;\n \t\t      PRE_EXPR_REFERENCE (result) = ref;\n@@ -4779,10 +4779,6 @@ init_pre (void)\n   bitmap_obstack_initialize (&grand_bitmap_obstack);\n   phi_translate_table = new hash_table<expr_pred_trans_d> (5110);\n   expression_to_id = new hash_table<pre_expr_d> (num_ssa_names * 3);\n-  bitmap_set_pool = create_alloc_pool (\"Bitmap sets\",\n-\t\t\t\t       sizeof (struct bitmap_set), 30);\n-  pre_expr_pool = create_alloc_pool (\"pre_expr nodes\",\n-\t\t\t\t     sizeof (struct pre_expr_d), 30);\n   FOR_ALL_BB_FN (bb, cfun)\n     {\n       EXP_GEN (bb) = bitmap_set_new ();\n@@ -4802,8 +4798,8 @@ fini_pre ()\n   value_expressions.release ();\n   BITMAP_FREE (inserted_exprs);\n   bitmap_obstack_release (&grand_bitmap_obstack);\n-  free_alloc_pool (bitmap_set_pool);\n-  free_alloc_pool (pre_expr_pool);\n+  bitmap_set_pool.release ();\n+  pre_expr_pool.release ();\n   delete phi_translate_table;\n   phi_translate_table = NULL;\n   delete expression_to_id;"}]}