{"sha": "7bbf5a3df249f950e33a5d44bbeb71df4ac43493", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JiZjVhM2RmMjQ5Zjk1MGUzM2E1ZDQ0YmJlYjcxZGY0YWM0MzQ5Mw==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2014-11-21T10:32:06Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2014-11-21T10:32:06Z"}, "message": "rl78-real.md (movqi_from_es): New pattern.\n\n\t* config/rl78/rl78-real.md (movqi_from_es): New pattern.\n\t* config/rl78/rl78.c (struct machine_function): Add uses_es field.\n\t(rl78_expand_prologue): Save the ES register in interrupt handlers\n\tthat use it.\n\t(rl78_expand_epilogue): Restore the ES register if necessary.\n\t(rl78_start_function): Mention if the function uses the ES\n\tregister.\n\t(rl78_lo16): Record the use of the ES register.\n\t(transcode_memory_rtx): Likewise.\n\nFrom-SVN: r217911", "tree": {"sha": "71ed9f7fcece841ca0587f1bf065704f217b488f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71ed9f7fcece841ca0587f1bf065704f217b488f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bbf5a3df249f950e33a5d44bbeb71df4ac43493", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bbf5a3df249f950e33a5d44bbeb71df4ac43493", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bbf5a3df249f950e33a5d44bbeb71df4ac43493", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bbf5a3df249f950e33a5d44bbeb71df4ac43493/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1e762c6ad828137e5cd2310e7acb2a6c80be17d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e762c6ad828137e5cd2310e7acb2a6c80be17d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e762c6ad828137e5cd2310e7acb2a6c80be17d1"}], "stats": {"total": 194, "additions": 133, "deletions": 61}, "files": [{"sha": "f9f8ecba20ca62c2ae6ca55ad76f8cc2a5d246fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bbf5a3df249f950e33a5d44bbeb71df4ac43493/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bbf5a3df249f950e33a5d44bbeb71df4ac43493/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7bbf5a3df249f950e33a5d44bbeb71df4ac43493", "patch": "@@ -1,3 +1,15 @@\n+2014-11-21  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/rl78/rl78-real.md (movqi_from_es): New pattern.\n+\t* config/rl78/rl78.c (struct machine_function): Add uses_es field.\n+\t(rl78_expand_prologue): Save the ES register in interrupt handlers\n+\tthat use it.\n+\t(rl78_expand_epilogue): Restore the ES register if necessary.\n+\t(rl78_start_function): Mention if the function uses the ES\n+\tregister.\n+\t(rl78_lo16): Record the use of the ES register.\n+\t(transcode_memory_rtx): Likewise.\n+\n 2014-11-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/61773"}, {"sha": "6fac2a3f65c52835d7f6344a53f88f0533a88d67", "filename": "gcc/config/rl78/rl78-real.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bbf5a3df249f950e33a5d44bbeb71df4ac43493/gcc%2Fconfig%2Frl78%2Frl78-real.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bbf5a3df249f950e33a5d44bbeb71df4ac43493/gcc%2Fconfig%2Frl78%2Frl78-real.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78-real.md?ref=7bbf5a3df249f950e33a5d44bbeb71df4ac43493", "patch": "@@ -36,6 +36,13 @@\n   \"mov\\tes, %0\"\n )\n \n+(define_insn \"movqi_from_es\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"=a\")\n+\t(reg:QI ES_REG))]\n+  \"\"\n+  \"mov\\t%0, es\"\n+)\n+\n (define_insn \"movqi_cs\"\n   [(set (reg:QI CS_REG)\n \t(match_operand:QI 0 \"register_operand\" \"a\"))]"}, {"sha": "c7520aaac6b84280b09547bdeaaf43bb4b0cf326", "filename": "gcc/config/rl78/rl78.c", "status": "modified", "additions": 114, "deletions": 61, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bbf5a3df249f950e33a5d44bbeb71df4ac43493/gcc%2Fconfig%2Frl78%2Frl78.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bbf5a3df249f950e33a5d44bbeb71df4ac43493/gcc%2Fconfig%2Frl78%2Frl78.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78.c?ref=7bbf5a3df249f950e33a5d44bbeb71df4ac43493", "patch": "@@ -118,6 +118,9 @@ struct GTY(()) machine_function\n   int virt_insns_ok;\n   /* Set if the current function needs to clean up any trampolines.  */\n   int trampolines_used;\n+  /* True if the ES register is used and hence\n+     needs to be saved inside interrupt handlers.  */\n+  bool uses_es;\n };\n \n /* This is our init_machine_status, as set in\n@@ -136,38 +139,36 @@ rl78_init_machine_status (void)\n /* This pass converts virtual instructions using virtual registers, to\n    real instructions using real registers.  Rather than run it as\n    reorg, we reschedule it before vartrack to help with debugging.  */\n-namespace {\n-\n-const pass_data pass_data_rl78_devirt =\n-{\n-  RTL_PASS, /* type */\n-  \"devirt\", /* name */\n-  OPTGROUP_NONE, /* optinfo_flags */\n-  TV_MACH_DEP, /* tv_id */\n-  0, /* properties_required */\n-  0, /* properties_provided */\n-  0, /* properties_destroyed */\n-  0, /* todo_flags_start */\n-  0, /* todo_flags_finish */\n-};\n+namespace\n+{\n+  const pass_data pass_data_rl78_devirt =\n+    {\n+      RTL_PASS, /* type */\n+      \"devirt\", /* name */\n+      OPTGROUP_NONE, /* optinfo_flags */\n+      TV_MACH_DEP, /* tv_id */\n+      0, /* properties_required */\n+      0, /* properties_provided */\n+      0, /* properties_destroyed */\n+      0, /* todo_flags_start */\n+      0, /* todo_flags_finish */\n+    };\n \n-class pass_rl78_devirt : public rtl_opt_pass\n-{\n-public:\n-  pass_rl78_devirt(gcc::context *ctxt)\n-    : rtl_opt_pass(pass_data_rl78_devirt, ctxt)\n+  class pass_rl78_devirt : public rtl_opt_pass\n   {\n-  }\n+  public:\n+    pass_rl78_devirt (gcc::context *ctxt)\n+      : rtl_opt_pass (pass_data_rl78_devirt, ctxt)\n+      {\n+      }\n \n-  /* opt_pass methods: */\n-  virtual unsigned int execute (function *)\n+    /* opt_pass methods: */\n+    virtual unsigned int execute (function *)\n     {\n       rl78_reorg ();\n       return 0;\n     }\n-\n-};\n-\n+  };\n } // anon namespace\n \n rtl_opt_pass *\n@@ -203,8 +204,7 @@ move_elim_pass (void)\n \t can eliminate the second SET.  */\n       if (prev\n \t  && rtx_equal_p (SET_DEST (prev), SET_SRC (set))\n-\t  && rtx_equal_p (SET_DEST (set), SET_SRC (prev))\n-\t  )\t  \n+\t  && rtx_equal_p (SET_DEST (set), SET_SRC (prev)))\n \t{\n \t  if (dump_file)\n \t    fprintf (dump_file, \" Delete insn %d because it is redundant\\n\",\n@@ -216,40 +216,39 @@ move_elim_pass (void)\n       else\n \tprev = set;\n     }\n-  \n+\n   if (dump_file)\n     print_rtl_with_bb (dump_file, get_insns (), 0);\n \n   return 0;\n }\n \n-namespace {\n-\n-const pass_data pass_data_rl78_move_elim =\n+namespace\n {\n-  RTL_PASS, /* type */\n-  \"move_elim\", /* name */\n-  OPTGROUP_NONE, /* optinfo_flags */\n-  TV_MACH_DEP, /* tv_id */\n-  0, /* properties_required */\n-  0, /* properties_provided */\n-  0, /* properties_destroyed */\n-  0, /* todo_flags_start */\n-  0, /* todo_flags_finish */\n-};\n+  const pass_data pass_data_rl78_move_elim =\n+    {\n+      RTL_PASS, /* type */\n+      \"move_elim\", /* name */\n+      OPTGROUP_NONE, /* optinfo_flags */\n+      TV_MACH_DEP, /* tv_id */\n+      0, /* properties_required */\n+      0, /* properties_provided */\n+      0, /* properties_destroyed */\n+      0, /* todo_flags_start */\n+      0, /* todo_flags_finish */\n+    };\n \n-class pass_rl78_move_elim : public rtl_opt_pass\n-{\n-public:\n-  pass_rl78_move_elim(gcc::context *ctxt)\n-    : rtl_opt_pass(pass_data_rl78_move_elim, ctxt)\n+  class pass_rl78_move_elim : public rtl_opt_pass\n   {\n-  }\n-\n-  /* opt_pass methods: */\n-  virtual unsigned int execute (function *) { return move_elim_pass (); }\n-};\n+  public:\n+    pass_rl78_move_elim (gcc::context *ctxt)\n+      : rtl_opt_pass (pass_data_rl78_move_elim, ctxt)\n+      {\n+      }\n \n+    /* opt_pass methods: */\n+    virtual unsigned int execute (function *) { return move_elim_pass (); }\n+  };\n } // anon namespace\n \n rtl_opt_pass *\n@@ -832,6 +831,7 @@ rl78_far_p (rtx x)\n /* Return the appropriate mode for a named address pointer.  */\n #undef  TARGET_ADDR_SPACE_POINTER_MODE\n #define TARGET_ADDR_SPACE_POINTER_MODE rl78_addr_space_pointer_mode\n+\n static machine_mode\n rl78_addr_space_pointer_mode (addr_space_t addrspace)\n {\n@@ -849,6 +849,7 @@ rl78_addr_space_pointer_mode (addr_space_t addrspace)\n /* Returns TRUE for valid addresses.  */\n #undef  TARGET_VALID_POINTER_MODE\n #define TARGET_VALID_POINTER_MODE rl78_valid_pointer_mode\n+\n static bool\n rl78_valid_pointer_mode (machine_mode m)\n {\n@@ -858,6 +859,7 @@ rl78_valid_pointer_mode (machine_mode m)\n /* Return the appropriate mode for a named address address.  */\n #undef  TARGET_ADDR_SPACE_ADDRESS_MODE\n #define TARGET_ADDR_SPACE_ADDRESS_MODE rl78_addr_space_address_mode\n+\n static machine_mode\n rl78_addr_space_address_mode (addr_space_t addrspace)\n {\n@@ -936,6 +938,7 @@ rl78_as_legitimate_address (machine_mode mode ATTRIBUTE_UNUSED, rtx x,\n /* Determine if one named address space is a subset of another.  */\n #undef  TARGET_ADDR_SPACE_SUBSET_P\n #define TARGET_ADDR_SPACE_SUBSET_P rl78_addr_space_subset_p\n+\n static bool\n rl78_addr_space_subset_p (addr_space_t subset, addr_space_t superset)\n {\n@@ -951,6 +954,7 @@ rl78_addr_space_subset_p (addr_space_t subset, addr_space_t superset)\n \n #undef  TARGET_ADDR_SPACE_CONVERT\n #define TARGET_ADDR_SPACE_CONVERT rl78_addr_space_convert\n+\n /* Convert from one address space to another.  */\n static rtx\n rl78_addr_space_convert (rtx op, tree from_type, tree to_type)\n@@ -1008,6 +1012,34 @@ rl78_mode_code_base_reg_class (machine_mode mode ATTRIBUTE_UNUSED,\n   return V_REGS;\n }\n \n+/* Typical stack layout should looks like this after the function's prologue:\n+\n+                            |    |\n+                              --                       ^\n+                            |    | \\                   |\n+                            |    |   arguments saved   | Increasing\n+                            |    |   on the stack      |  addresses\n+    PARENT   arg pointer -> |    | /\n+  -------------------------- ---- -------------------\n+    CHILD                   |ret |   return address\n+                              --\n+                            |    | \\\n+                            |    |   call saved\n+                            |    |   registers\n+\tframe pointer ->    |    | /\n+                              --\n+                            |    | \\\n+                            |    |   local\n+                            |    |   variables\n+                            |    | /\n+                              --\n+                            |    | \\\n+                            |    |   outgoing          | Decreasing\n+                            |    |   arguments         |  addresses\n+   current stack pointer -> |    | /                   |\n+  -------------------------- ---- ------------------   V\n+                            |    |                 */\n+\n /* Implements INITIAL_ELIMINATION_OFFSET.  The frame layout is\n    described in the machine_Function struct definition, above.  */\n int\n@@ -1082,7 +1114,8 @@ rl78_expand_prologue (void)\n       {\n \tif (TARGET_G10)\n \t  {\n-\t    emit_move_insn (gen_rtx_REG (HImode, 0), gen_rtx_REG (HImode, i*2));\n+\t    if (i != 0)\n+\t      emit_move_insn (gen_rtx_REG (HImode, 0), gen_rtx_REG (HImode, i * 2));\n \t    F (emit_insn (gen_push (gen_rtx_REG (HImode, 0))));\n \t  }\n \telse\n@@ -1101,6 +1134,13 @@ rl78_expand_prologue (void)\n   if (rb != 0)\n     emit_insn (gen_sel_rb (GEN_INT (0)));\n \n+  /* Save ES register inside interrupt functions if it is used.  */\n+  if (is_interrupt_func (cfun->decl) && cfun->machine->uses_es)\n+    {\n+      emit_insn (gen_movqi_from_es (gen_rtx_REG (QImode, A_REG)));\n+      F (emit_insn (gen_push (gen_rtx_REG (HImode, AX_REG))));\n+    }\n+\n   if (frame_pointer_needed)\n     {\n       F (emit_move_insn (gen_rtx_REG (HImode, AX_REG),\n@@ -1148,6 +1188,12 @@ rl78_expand_epilogue (void)\n \t}\n     }\n \n+  if (is_interrupt_func (cfun->decl) && cfun->machine->uses_es)\n+    {\n+      emit_insn (gen_pop (gen_rtx_REG (HImode, AX_REG)));\n+      emit_insn (gen_movqi_es (gen_rtx_REG (QImode, A_REG)));\n+    }\n+\n   for (i = 15; i >= 0; i--)\n     if (cfun->machine->need_to_push [i])\n       {\n@@ -1234,6 +1280,9 @@ rl78_start_function (FILE *file, HOST_WIDE_INT hwi_local ATTRIBUTE_UNUSED)\n   if (cfun->machine->framesize_outgoing)\n     fprintf (file, \"\\t; outgoing: %d byte%s\\n\", cfun->machine->framesize_outgoing,\n \t     cfun->machine->framesize_outgoing == 1 ? \"\" : \"s\");\n+\n+  if (cfun->machine->uses_es)\n+    fprintf (file, \"\\t; uses ES register\\n\");\n }\n \n /* Return an RTL describing where a function return value of type RET_TYPE\n@@ -2170,7 +2219,7 @@ rl78_es_base (rtx addr)\n    carefully to ensure that all the constraint information is accurate\n    for the newly matched insn.  */\n static bool\n-insn_ok_now (rtx_insn *insn)\n+insn_ok_now (rtx_insn * insn)\n {\n   rtx pattern = PATTERN (insn);\n   int i;\n@@ -2234,7 +2283,7 @@ insn_ok_now (rtx_insn *insn)\n #if DEBUG_ALLOC\n #define WORKED      fprintf (stderr, \"\\033[48;5;22m Worked at line %d \\033[0m\\n\", __LINE__)\n #define FAILEDSOFAR fprintf (stderr, \"\\033[48;5;52m FAILED at line %d \\033[0m\\n\", __LINE__)\n-#define FAILED      fprintf (stderr, \"\\033[48;5;52m FAILED at line %d \\033[0m\\n\", __LINE__), gcc_unreachable()\n+#define FAILED      fprintf (stderr, \"\\033[48;5;52m FAILED at line %d \\033[0m\\n\", __LINE__), gcc_unreachable ()\n #define MAYBE_OK(insn) if (insn_ok_now (insn)) { WORKED; return; } else { FAILEDSOFAR; }\n #define MUST_BE_OK(insn) if (insn_ok_now (insn)) { WORKED; return; } FAILED\n #else\n@@ -2308,6 +2357,7 @@ rl78_lo16 (rtx addr)\n     r = rl78_subreg (HImode, addr, SImode, 0);\n \n   r = gen_es_addr (r);\n+  cfun->machine->uses_es = true;\n \n   return r;\n }\n@@ -2496,7 +2546,10 @@ transcode_memory_rtx (rtx m, rtx newbase, rtx before)\n   debug_rtx (m);\n #endif\n   if (need_es)\n-    m = change_address (m, GET_MODE (m), gen_es_addr (base));\n+    {\n+      m = change_address (m, GET_MODE (m), gen_es_addr (base));\n+      cfun->machine->uses_es = true;\n+    }\n   else\n     m = change_address (m, GET_MODE (m), base);\n #if DEBUG_ALLOC\n@@ -2642,7 +2695,7 @@ move_to_de (int opno, rtx before)\n \n /* Devirtualize an insn of the form (SET (op) (unop (op))).  */\n static void\n-rl78_alloc_physical_registers_op1 (rtx_insn *insn)\n+rl78_alloc_physical_registers_op1 (rtx_insn * insn)\n {\n   /* op[0] = func op[1] */\n \n@@ -2721,7 +2774,7 @@ has_constraint (unsigned int opnum, enum constraint_num constraint)\n \n /* Devirtualize an insn of the form (SET (op) (binop (op) (op))).  */\n static void\n-rl78_alloc_physical_registers_op2 (rtx_insn *insn)\n+rl78_alloc_physical_registers_op2 (rtx_insn * insn)\n {\n   rtx prev;\n   rtx first;\n@@ -2875,7 +2928,7 @@ rl78_alloc_physical_registers_op2 (rtx_insn *insn)\n \n /* Devirtualize an insn of the form SET (PC) (MEM/REG).  */\n static void\n-rl78_alloc_physical_registers_ro1 (rtx_insn *insn)\n+rl78_alloc_physical_registers_ro1 (rtx_insn * insn)\n {\n   OP (0) = transcode_memory_rtx (OP (0), BC, insn);\n \n@@ -2888,7 +2941,7 @@ rl78_alloc_physical_registers_ro1 (rtx_insn *insn)\n \n /* Devirtualize a compare insn.  */\n static void\n-rl78_alloc_physical_registers_cmp (rtx_insn *insn)\n+rl78_alloc_physical_registers_cmp (rtx_insn * insn)\n {\n   int tmp_id;\n   rtx saved_op1;\n@@ -2981,7 +3034,7 @@ rl78_alloc_physical_registers_cmp (rtx_insn *insn)\n \n /* Like op2, but AX = A * X.  */\n static void\n-rl78_alloc_physical_registers_umul (rtx_insn *insn)\n+rl78_alloc_physical_registers_umul (rtx_insn * insn)\n {\n   rtx prev = prev_nonnote_nondebug_insn (insn);\n   rtx first;\n@@ -3045,7 +3098,7 @@ rl78_alloc_physical_registers_umul (rtx_insn *insn)\n }\n \n static void\n-rl78_alloc_address_registers_macax (rtx_insn *insn)\n+rl78_alloc_address_registers_macax (rtx_insn * insn)\n {\n   int which, op;\n   bool replace_in_op0 = false;"}]}