{"sha": "0a09a9483825233f16e5b26bb0ffee76752339fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGEwOWE5NDgzODI1MjMzZjE2ZTViMjZiYjBmZmVlNzY3NTIzMzlmYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-01-09T16:36:42Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2020-01-09T16:36:42Z"}, "message": "[AArch64] Add support for the SVE2 ACLE\n\nThis patch adds support for the SVE2 ACLE,  The implementation\nand tests follow the same pattern as the exiting SVE ACLE support.\n\n2020-01-09  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config.gcc (aarch64*-*-*): Add aarch64-sve-builtins-sve2.o to\n\textra_objs.\n\t* config/aarch64/t-aarch64 (aarch64-sve-builtins.o): Depend on\n\taarch64-sve-builtins-base.def, aarch64-sve-builtins-sve2.def and\n\taarch64-sve-builtins-sve2.h.\n\t(aarch64-sve-builtins-sve2.o): New rule.\n\t* config/aarch64/aarch64.h (AARCH64_ISA_SVE2_AES): New macro.\n\t(AARCH64_ISA_SVE2_BITPERM, AARCH64_ISA_SVE2_SHA3): Likewise.\n\t(AARCH64_ISA_SVE2_SM4, TARGET_SVE2_AES, TARGET_SVE2_BITPERM): Likewise.\n\t(TARGET_SVE2_SHA, TARGET_SVE2_SM4): Likewise.\n\t* config/aarch64/aarch64-c.c (aarch64_update_cpp_builtins): Handle\n\tTARGET_SVE2_AES, TARGET_SVE2_BITPERM, TARGET_SVE2_SHA3 and\n\tTARGET_SVE2_SM4.\n\t* config/aarch64/aarch64-sve.md: Update comments with SVE2\n\tinstructions that are handled here.\n\t(@cond_asrd<mode>): Generalize to...\n\t(@cond_<SVE_INT_SHIFT_IMM:sve_int_op><mode>): ...this.\n\t(*cond_asrd<mode>_2): Generalize to...\n\t(*cond_<SVE_INT_SHIFT_IMM:sve_int_op><mode>_2): ...this.\n\t(*cond_asrd<mode>_z): Generalize to...\n\t(*cond_<SVE_INT_SHIFT_IMM:sve_int_op><mode>_z): ...this.\n\t* config/aarch64/aarch64.md (UNSPEC_LDNT1_GATHER): New unspec.\n\t(UNSPEC_STNT1_SCATTER, UNSPEC_WHILEGE, UNSPEC_WHILEGT): Likewise.\n\t(UNSPEC_WHILEHI, UNSPEC_WHILEHS): Likewise.\n\t* config/aarch64/aarch64-sve2.md (@aarch64_gather_ldnt<mode>): New\n\tpattern.\n\t(@aarch64_gather_ldnt_<ANY_EXTEND:optab><SVE_FULL_SDI:mode><SVE_PARTIAL_I:mode>)\n\t(@aarch64_scatter_stnt<mode>): Likewise.\n\t(@aarch64_scatter_stnt_<SVE_FULL_SDI:mode><SVE_PARTIAL_I:mode>)\n\t(@aarch64_mul_lane_<mode>): Likewise.\n\t(@aarch64_sve_suqadd<mode>_const): Likewise.\n\t(*<sur>h<addsub><mode>): Generalize to...\n\t(@aarch64_pred_<SVE2_COND_INT_BINARY_REV:sve_int_op><mode>): ...this\n\tnew pattern.\n\t(@cond_<SVE2_COND_INT_BINARY:sve_int_op><mode>): New expander.\n\t(*cond_<SVE2_COND_INT_BINARY:sve_int_op><mode>_2): New pattern.\n\t(*cond_<SVE2_COND_INT_BINARY:sve_int_op><mode>_3): Likewise.\n\t(*cond_<SVE2_COND_INT_BINARY:sve_int_op><mode>_any): Likewise.\n\t(*cond_<SVE2_COND_INT_BINARY_NOREV:sve_int_op><mode>_z): Likewise.\n\t(@aarch64_sve_<SVE2_INT_BINARY:sve_int_op><mode>):: Likewise.\n\t(@aarch64_sve_<SVE2_INT_BINARY:sve_int_op>_lane_<mode>): Likewise.\n\t(@aarch64_pred_<SVE2_COND_INT_SHIFT:sve_int_op><mode>): Likewise.\n\t(@cond_<SVE2_COND_INT_SHIFT:sve_int_op><mode>): New expander.\n\t(*cond_<SVE2_COND_INT_SHIFT:sve_int_op><mode>_2): New pattern.\n\t(*cond_<SVE2_COND_INT_SHIFT:sve_int_op><mode>_3): Likewise.\n\t(*cond_<SVE2_COND_INT_SHIFT:sve_int_op><mode>_any): Likewise.\n\t(@aarch64_sve_<SVE2_INT_TERNARY:sve_int_op><mode>): Likewise.\n\t(@aarch64_sve_<SVE2_INT_TERNARY_LANE:sve_int_op>_lane_<mode>)\n\t(@aarch64_sve_add_mul_lane_<mode>): Likewise.\n\t(@aarch64_sve_sub_mul_lane_<mode>): Likewise.\n\t(@aarch64_sve2_xar<mode>): Likewise.\n\t(@aarch64_sve2_bcax<mode>): Likewise.\n\t(*aarch64_sve2_eor3<mode>): Rename to...\n\t(@aarch64_sve2_eor3<mode>): ...this.\n\t(@aarch64_sve2_bsl<mode>): New expander.\n\t(@aarch64_sve2_nbsl<mode>): Likewise.\n\t(@aarch64_sve2_bsl1n<mode>): Likewise.\n\t(@aarch64_sve2_bsl2n<mode>): Likewise.\n\t(@aarch64_sve_add_<SHIFTRT:sve_int_op><mode>): Likewise.\n\t(*aarch64_sve2_sra<mode>): Add MOVPRFX support.\n\t(@aarch64_sve_add_<VRSHR_N:sve_int_op><mode>): New pattern.\n\t(@aarch64_sve_<SVE2_INT_SHIFT_INSERT:sve_int_op><mode>): Likewise.\n\t(@aarch64_sve2_<USMAX:su>aba<mode>): New expander.\n\t(*aarch64_sve2_<USMAX:su>aba<mode>): New pattern.\n\t(@aarch64_sve_<SVE2_INT_BINARY_WIDE:sve_int_op><mode>): Likewise.\n\t(<su>mull<bt><Vwide>): Generalize to...\n\t(@aarch64_sve_<SVE2_INT_BINARY_LONG:sve_int_op><mode>): ...this new\n\tpattern.\n\t(@aarch64_sve_<SVE2_INT_BINARY_LONG_lANE:sve_int_op>_lane_<mode>)\n\t(@aarch64_sve_<SVE2_INT_SHIFT_IMM_LONG:sve_int_op><mode>)\n\t(@aarch64_sve_add_<SVE2_INT_ADD_BINARY_LONG:sve_int_op><mode>)\n\t(@aarch64_sve_add_<SVE2_INT_ADD_BINARY_LONG_LANE:sve_int_op>_lane_<mode>)\n\t(@aarch64_sve_qadd_<SVE2_INT_QADD_BINARY_LONG:sve_int_op><mode>)\n\t(@aarch64_sve_qadd_<SVE2_INT_QADD_BINARY_LONG_LANE:sve_int_op>_lane_<mode>)\n\t(@aarch64_sve_sub_<SVE2_INT_SUB_BINARY_LONG:sve_int_op><mode>)\n\t(@aarch64_sve_sub_<SVE2_INT_SUB_BINARY_LONG_LANE:sve_int_op>_lane_<mode>)\n\t(@aarch64_sve_qsub_<SVE2_INT_QSUB_BINARY_LONG:sve_int_op><mode>)\n\t(@aarch64_sve_qsub_<SVE2_INT_QSUB_BINARY_LONG_LANE:sve_int_op>_lane_<mode>)\n\t(@aarch64_sve_<SVE2_FP_TERNARY_LONG:sve_fp_op><mode>): New patterns.\n\t(@aarch64_<SVE2_FP_TERNARY_LONG_LANE:sve_fp_op>_lane_<mode>)\n\t(@aarch64_sve_<SVE2_INT_UNARY_NARROWB:sve_int_op><mode>): Likewise.\n\t(@aarch64_sve_<SVE2_INT_UNARY_NARROWT:sve_int_op><mode>): Likewise.\n\t(@aarch64_sve_<SVE2_INT_BINARY_NARROWB:sve_int_op><mode>): Likewise.\n\t(@aarch64_sve_<SVE2_INT_BINARY_NARROWT:sve_int_op><mode>): Likewise.\n\t(<SHRNB:r>shrnb<mode>): Generalize to...\n\t(@aarch64_sve_<SVE2_INT_SHIFT_IMM_NARROWB:sve_int_op><mode>): ...this\n\tnew pattern.\n\t(<SHRNT:r>shrnt<mode>): Generalize to...\n\t(@aarch64_sve_<SVE2_INT_SHIFT_IMM_NARROWT:sve_int_op><mode>): ...this\n\tnew pattern.\n\t(@aarch64_pred_<SVE2_INT_BINARY_PAIR:sve_int_op><mode>): New pattern.\n\t(@aarch64_pred_<SVE2_FP_BINARY_PAIR:sve_fp_op><mode>): Likewise.\n\t(@cond_<SVE2_INT_BINARY_PAIR_LONG:sve_int_op><mode>): New expander.\n\t(*cond_<SVE2_INT_BINARY_PAIR_LONG:sve_int_op><mode>_2): New pattern.\n\t(*cond_<SVE2_INT_BINARY_PAIR_LONG:sve_int_op><mode>_z): Likewise.\n\t(@aarch64_sve_<SVE2_INT_CADD:optab><mode>): Likewise.\n\t(@aarch64_sve_<SVE2_INT_CMLA:optab><mode>): Likewise.\n\t(@aarch64_<SVE2_INT_CMLA:optab>_lane_<mode>): Likewise.\n\t(@aarch64_sve_<SVE2_INT_CDOT:optab><mode>): Likewise.\n\t(@aarch64_<SVE2_INT_CDOT:optab>_lane_<mode>): Likewise.\n\t(@aarch64_pred_<SVE2_COND_FP_UNARY_LONG:sve_fp_op><mode>): Likewise.\n\t(@cond_<SVE2_COND_FP_UNARY_LONG:sve_fp_op><mode>): New expander.\n\t(*cond_<SVE2_COND_FP_UNARY_LONG:sve_fp_op><mode>): New pattern.\n\t(@aarch64_sve2_cvtnt<mode>): Likewise.\n\t(@aarch64_pred_<SVE2_COND_FP_UNARY_NARROWB:sve_fp_op><mode>): Likewise.\n\t(@cond_<SVE2_COND_FP_UNARY_NARROWB:sve_fp_op><mode>): New expander.\n\t(*cond_<SVE2_COND_FP_UNARY_NARROWB:sve_fp_op><mode>_any): New pattern.\n\t(@aarch64_sve2_cvtxnt<mode>): Likewise.\n\t(@aarch64_pred_<SVE2_U32_UNARY:sve_int_op><mode>): Likewise.\n\t(@cond_<SVE2_U32_UNARY:sve_int_op><mode>): New expander.\n\t(*cond_<SVE2_U32_UNARY:sve_int_op><mode>): New pattern.\n\t(@aarch64_pred_<SVE2_COND_INT_UNARY_FP:sve_fp_op><mode>): Likewise.\n\t(@cond_<SVE2_COND_INT_UNARY_FP:sve_fp_op><mode>): New expander.\n\t(*cond_<SVE2_COND_INT_UNARY_FP:sve_fp_op><mode>): New pattern.\n\t(@aarch64_sve2_pmul<mode>): Likewise.\n\t(@aarch64_sve_<SVE2_PMULL:optab><mode>): Likewise.\n\t(@aarch64_sve_<SVE2_PMULL_PAIR:optab><mode>): Likewise.\n\t(@aarch64_sve2_tbl2<mode>): Likewise.\n\t(@aarch64_sve2_tbx<mode>): Likewise.\n\t(@aarch64_sve_<SVE2_INT_BITPERM:sve_int_op><mode>): Likewise.\n\t(@aarch64_sve2_histcnt<mode>): Likewise.\n\t(@aarch64_sve2_histseg<mode>): Likewise.\n\t(@aarch64_pred_<SVE2_MATCH:sve_int_op><mode>): Likewise.\n\t(*aarch64_pred_<SVE2_MATCH:sve_int_op><mode>_cc): Likewise.\n\t(*aarch64_pred_<SVE2_MATCH:sve_int_op><mode>_ptest): Likewise.\n\t(aarch64_sve2_aes<CRYPTO_AES:aes_op>): Likewise.\n\t(aarch64_sve2_aes<CRYPTO_AESMC:aesmc_op>): Likewise.\n\t(*aarch64_sve2_aese_fused, *aarch64_sve2_aesd_fused): Likewise.\n\t(aarch64_sve2_rax1, aarch64_sve2_sm4e, aarch64_sve2_sm4ekey): Likewise.\n\t(<su>mulh<r>s<mode>3): Update after above pattern name changes.\n\t* config/aarch64/iterators.md (VNx16QI_ONLY, VNx4SF_ONLY)\n\t(SVE_STRUCT2, SVE_FULL_BHI, SVE_FULL_HSI, SVE_FULL_HDI)\n\t(SVE2_PMULL_PAIR_I): New mode iterators.\n\t(UNSPEC_ADCLB, UNSPEC_ADCLT, UNSPEC_ADDHNB, UNSPEC_ADDHNT, UNSPEC_BDEP)\n\t(UNSPEC_BEXT, UNSPEC_BGRP, UNSPEC_CADD90, UNSPEC_CADD270, UNSPEC_CDOT)\n\t(UNSPEC_CDOT90, UNSPEC_CDOT180, UNSPEC_CDOT270, UNSPEC_CMLA)\n\t(UNSPEC_CMLA90, UNSPEC_CMLA180, UNSPEC_CMLA270, UNSPEC_COND_FCVTLT)\n\t(UNSPEC_COND_FCVTNT, UNSPEC_COND_FCVTX, UNSPEC_COND_FCVTXNT)\n\t(UNSPEC_COND_FLOGB, UNSPEC_EORBT, UNSPEC_EORTB, UNSPEC_FADDP)\n\t(UNSPEC_FMAXP, UNSPEC_FMAXNMP, UNSPEC_FMLALB, UNSPEC_FMLALT)\n\t(UNSPEC_FMLSLB, UNSPEC_FMLSLT, UNSPEC_FMINP, UNSPEC_FMINNMP)\n\t(UNSPEC_HISTCNT, UNSPEC_HISTSEG, UNSPEC_MATCH, UNSPEC_NMATCH)\n\t(UNSPEC_PMULLB, UNSPEC_PMULLB_PAIR, UNSPEC_PMULLT, UNSPEC_PMULLT_PAIR)\n\t(UNSPEC_RADDHNB, UNSPEC_RADDHNT, UNSPEC_RSUBHNB, UNSPEC_RSUBHNT)\n\t(UNSPEC_SLI, UNSPEC_SRI, UNSPEC_SABDLB, UNSPEC_SABDLT, UNSPEC_SADDLB)\n\t(UNSPEC_SADDLBT, UNSPEC_SADDLT, UNSPEC_SADDWB, UNSPEC_SADDWT)\n\t(UNSPEC_SBCLB, UNSPEC_SBCLT, UNSPEC_SMAXP, UNSPEC_SMINP)\n\t(UNSPEC_SQCADD90, UNSPEC_SQCADD270, UNSPEC_SQDMULLB, UNSPEC_SQDMULLBT)\n\t(UNSPEC_SQDMULLT, UNSPEC_SQRDCMLAH, UNSPEC_SQRDCMLAH90)\n\t(UNSPEC_SQRDCMLAH180, UNSPEC_SQRDCMLAH270, UNSPEC_SQRSHRNB)\n\t(UNSPEC_SQRSHRNT, UNSPEC_SQRSHRUNB, UNSPEC_SQRSHRUNT, UNSPEC_SQSHRNB)\n\t(UNSPEC_SQSHRNT, UNSPEC_SQSHRUNB, UNSPEC_SQSHRUNT, UNSPEC_SQXTNB)\n\t(UNSPEC_SQXTNT, UNSPEC_SQXTUNB, UNSPEC_SQXTUNT, UNSPEC_SSHLLB)\n\t(UNSPEC_SSHLLT, UNSPEC_SSUBLB, UNSPEC_SSUBLBT, UNSPEC_SSUBLT)\n\t(UNSPEC_SSUBLTB, UNSPEC_SSUBWB, UNSPEC_SSUBWT, UNSPEC_SUBHNB)\n\t(UNSPEC_SUBHNT, UNSPEC_TBL2, UNSPEC_UABDLB, UNSPEC_UABDLT)\n\t(UNSPEC_UADDLB, UNSPEC_UADDLT, UNSPEC_UADDWB, UNSPEC_UADDWT)\n\t(UNSPEC_UMAXP, UNSPEC_UMINP, UNSPEC_UQRSHRNB, UNSPEC_UQRSHRNT)\n\t(UNSPEC_UQSHRNB, UNSPEC_UQSHRNT, UNSPEC_UQXTNB, UNSPEC_UQXTNT)\n\t(UNSPEC_USHLLB, UNSPEC_USHLLT, UNSPEC_USUBLB, UNSPEC_USUBLT)\n\t(UNSPEC_USUBWB, UNSPEC_USUBWT): New unspecs.\n\t(UNSPEC_SMULLB, UNSPEC_SMULLT, UNSPEC_UMULLB, UNSPEC_UMULLT)\n\t(UNSPEC_SMULHS, UNSPEC_SMULHRS, UNSPEC_UMULHS, UNSPEC_UMULHRS)\n\t(UNSPEC_RSHRNB, UNSPEC_RSHRNT, UNSPEC_SHRNB, UNSPEC_SHRNT): Move\n\tfurther down file.\n\t(VNARROW, Ventype): New mode attributes.\n\t(Vewtype): Handle VNx2DI.  Fix typo in comment.\n\t(VDOUBLE): New mode attribute.\n\t(sve_lane_con): Handle VNx8HI.\n\t(SVE_INT_UNARY): Include ss_abs and ss_neg for TARGET_SVE2.\n\t(SVE_INT_BINARY): Likewise ss_plus, us_plus, ss_minus and us_minus.\n\t(sve_int_op, sve_int_op_rev): Handle the above codes.\n\t(sve_pred_int_rhs2_operand): Likewise.\n\t(MULLBT, SHRNB, SHRNT): Delete.\n\t(SVE_INT_SHIFT_IMM): New int iterator.\n\t(SVE_WHILE): Add UNSPEC_WHILEGE, UNSPEC_WHILEGT, UNSPEC_WHILEHI\n\tand UNSPEC_WHILEHS for TARGET_SVE2.\n\t(SVE2_U32_UNARY, SVE2_INT_UNARY_NARROWB, SVE2_INT_UNARY_NARROWT)\n\t(SVE2_INT_BINARY, SVE2_INT_BINARY_LANE, SVE2_INT_BINARY_LONG)\n\t(SVE2_INT_BINARY_LONG_LANE, SVE2_INT_BINARY_NARROWB)\n\t(SVE2_INT_BINARY_NARROWT, SVE2_INT_BINARY_PAIR, SVE2_FP_BINARY_PAIR)\n\t(SVE2_INT_BINARY_PAIR_LONG, SVE2_INT_BINARY_WIDE): New int iterators.\n\t(SVE2_INT_SHIFT_IMM_LONG, SVE2_INT_SHIFT_IMM_NARROWB): Likewise.\n\t(SVE2_INT_SHIFT_IMM_NARROWT, SVE2_INT_SHIFT_INSERT, SVE2_INT_CADD)\n\t(SVE2_INT_BITPERM, SVE2_INT_TERNARY, SVE2_INT_TERNARY_LANE): Likewise.\n\t(SVE2_FP_TERNARY_LONG, SVE2_FP_TERNARY_LONG_LANE, SVE2_INT_CMLA)\n\t(SVE2_INT_CDOT, SVE2_INT_ADD_BINARY_LONG, SVE2_INT_QADD_BINARY_LONG)\n\t(SVE2_INT_SUB_BINARY_LONG, SVE2_INT_QSUB_BINARY_LONG): Likewise.\n\t(SVE2_INT_ADD_BINARY_LONG_LANE, SVE2_INT_QADD_BINARY_LONG_LANE)\n\t(SVE2_INT_SUB_BINARY_LONG_LANE, SVE2_INT_QSUB_BINARY_LONG_LANE)\n\t(SVE2_COND_INT_UNARY_FP, SVE2_COND_FP_UNARY_LONG): Likewise.\n\t(SVE2_COND_FP_UNARY_NARROWB, SVE2_COND_INT_BINARY): Likewise.\n\t(SVE2_COND_INT_BINARY_NOREV, SVE2_COND_INT_BINARY_REV): Likewise.\n\t(SVE2_COND_INT_SHIFT, SVE2_MATCH, SVE2_PMULL): Likewise.\n\t(optab): Handle the new unspecs.\n\t(su, r): Remove entries for UNSPEC_SHRNB, UNSPEC_SHRNT, UNSPEC_RSHRNB\n\tand UNSPEC_RSHRNT.\n\t(lr): Handle the new unspecs.\n\t(bt): Delete.\n\t(cmp_op, while_optab_cmp, sve_int_op): Handle the new unspecs.\n\t(sve_int_op_rev, sve_int_add_op, sve_int_qadd_op, sve_int_sub_op)\n\t(sve_int_qsub_op): New int attributes.\n\t(sve_fp_op, rot): Handle the new unspecs.\n\t* config/aarch64/aarch64-sve-builtins.h\n\t(function_resolver::require_matching_pointer_type): Declare.\n\t(function_resolver::resolve_unary): Add an optional boolean argument.\n\t(function_resolver::finish_opt_n_resolution): Add an optional\n\ttype_suffix_index argument.\n\t(gimple_folder::redirect_call): Declare.\n\t(gimple_expander::prepare_gather_address_operands): Add an optional\n\tbool parameter.\n\t* config/aarch64/aarch64-sve-builtins.cc: Include\n\taarch64-sve-builtins-sve2.h.\n\t(TYPES_b_unsigned, TYPES_b_integer, TYPES_bh_integer): New macros.\n\t(TYPES_bs_unsigned, TYPES_hs_signed, TYPES_hs_integer): Likewise.\n\t(TYPES_hd_unsigned, TYPES_hsd_signed): Likewise.\n\t(TYPES_hsd_integer): Use TYPES_hsd_signed.\n\t(TYPES_s_float_hsd_integer, TYPES_s_float_sd_integer): New macros.\n\t(TYPES_s_unsigned): Likewise.\n\t(TYPES_s_integer): Use TYPES_s_unsigned.\n\t(TYPES_sd_signed, TYPES_sd_unsigned): New macros.\n\t(TYPES_sd_integer): Use them.\n\t(TYPES_d_unsigned): New macro.\n\t(TYPES_d_integer): Use it.\n\t(TYPES_d_data, TYPES_cvt_long, TYPES_cvt_narrow_s): New macros.\n\t(TYPES_cvt_narrow): Likewise.\n\t(DEF_SVE_TYPES_ARRAY): Include the new types macros above.\n\t(preds_mx): New variable.\n\t(function_builder::add_overloaded_function): Allow the new feature\n\tset to be more restrictive than the original one.\n\t(function_resolver::infer_pointer_type): Remove qualifiers from\n\tthe pointer type before printing it.\n\t(function_resolver::require_matching_pointer_type): New function.\n\t(function_resolver::resolve_sv_displacement): Handle functions\n\tthat don't support 32-bit vector indices or svint32_t vector offsets.\n\t(function_resolver::finish_opt_n_resolution): Take the inferred type\n\tas a separate argument.\n\t(function_resolver::resolve_unary): Optionally treat all forms in\n\tthe same way as normal merging functions.\n\t(gimple_folder::redirect_call): New function.\n\t(function_expander::prepare_gather_address_operands): Add an argument\n\tthat says whether scaled forms are available.  If they aren't,\n\thandle scaling of vector indices and don't add the extension and\n\tscaling operands.\n\t(function_expander::map_to_unspecs): If aarch64_sve isn't available,\n\tfall back to using cond_* instead.\n\t* config/aarch64/aarch64-sve-builtins-functions.h (rtx_code_function):\n\tSplit out the member variables into...\n\t(rtx_code_function_base): ...this new base class.\n\t(rtx_code_function_rotated): Inherit rtx_code_function_base.\n\t(unspec_based_function): Split out the member variables into...\n\t(unspec_based_function_base): ...this new base class.\n\t(unspec_based_function_rotated): Inherit unspec_based_function_base.\n\t(unspec_based_function_exact_insn): New class.\n\t(unspec_based_add_function, unspec_based_add_lane_function)\n\t(unspec_based_lane_function, unspec_based_pred_function)\n\t(unspec_based_qadd_function, unspec_based_qadd_lane_function)\n\t(unspec_based_qsub_function, unspec_based_qsub_lane_function)\n\t(unspec_based_sub_function, unspec_based_sub_lane_function): New\n\ttypedefs.\n\t(unspec_based_fused_function): New class.\n\t(unspec_based_mla_function, unspec_based_mls_function): New typedefs.\n\t(unspec_based_fused_lane_function): New class.\n\t(unspec_based_mla_lane_function, unspec_based_mls_lane_function): New\n\ttypedefs.\n\t(CODE_FOR_MODE1): New macro.\n\t(fixed_insn_function): New class.\n\t(while_comparison): Likewise.\n\t* config/aarch64/aarch64-sve-builtins-shapes.h (binary_long_lane)\n\t(binary_long_opt_n, binary_narrowb_opt_n, binary_narrowt_opt_n)\n\t(binary_to_uint, binary_wide, binary_wide_opt_n, compare, compare_ptr)\n\t(load_ext_gather_index_restricted, load_ext_gather_offset_restricted)\n\t(load_gather_sv_restricted, shift_left_imm_long): Declare.\n\t(shift_left_imm_to_uint, shift_right_imm_narrowb): Likewise.\n\t(shift_right_imm_narrowt, shift_right_imm_narrowb_to_uint): Likewise.\n\t(shift_right_imm_narrowt_to_uint, store_scatter_index_restricted)\n\t(store_scatter_offset_restricted, tbl_tuple, ternary_long_lane)\n\t(ternary_long_opt_n, ternary_qq_lane_rotate, ternary_qq_rotate)\n\t(ternary_shift_left_imm, ternary_shift_right_imm, ternary_uint)\n\t(unary_convert_narrowt, unary_long, unary_narrowb, unary_narrowt)\n\t(unary_narrowb_to_uint, unary_narrowt_to_uint, unary_to_int): Likewise.\n\t* config/aarch64/aarch64-sve-builtins-shapes.cc (apply_predication):\n\tAlso add an initial argument for unary_convert_narrowt, regardless\n\tof the predication type.\n\t(build_32_64): Allow loads and stores to specify MODE_none.\n\t(build_sv_index64, build_sv_uint_offset): New functions.\n\t(long_type_suffix): New function.\n\t(binary_imm_narrowb_base, binary_imm_narrowt_base): New classes.\n\t(binary_imm_long_base, load_gather_sv_base): Likewise.\n\t(shift_right_imm_narrow_wrapper, ternary_shift_imm_base): Likewise.\n\t(ternary_resize2_opt_n_base, ternary_resize2_lane_base): Likewise.\n\t(unary_narrowb_base, unary_narrowt_base): Likewise.\n\t(binary_long_lane_def, binary_long_lane): New shape.\n\t(binary_long_opt_n_def, binary_long_opt_n): Likewise.\n\t(binary_narrowb_opt_n_def, binary_narrowb_opt_n): Likewise.\n\t(binary_narrowt_opt_n_def, binary_narrowt_opt_n): Likewise.\n\t(binary_to_uint_def, binary_to_uint): Likewise.\n\t(binary_wide_def, binary_wide): Likewise.\n\t(binary_wide_opt_n_def, binary_wide_opt_n): Likewise.\n\t(compare_def, compare): Likewise.\n\t(compare_ptr_def, compare_ptr): Likewise.\n\t(load_ext_gather_index_restricted_def,\n\tload_ext_gather_index_restricted): Likewise.\n\t(load_ext_gather_offset_restricted_def,\n\tload_ext_gather_offset_restricted): Likewise.\n\t(load_gather_sv_def): Inherit from load_gather_sv_base.\n\t(load_gather_sv_restricted_def, load_gather_sv_restricted): New shape.\n\t(shift_left_imm_def, shift_left_imm): Likewise.\n\t(shift_left_imm_long_def, shift_left_imm_long): Likewise.\n\t(shift_left_imm_to_uint_def, shift_left_imm_to_uint): Likewise.\n\t(store_scatter_index_restricted_def,\n\tstore_scatter_index_restricted): Likewise.\n\t(store_scatter_offset_restricted_def,\n\tstore_scatter_offset_restricted): Likewise.\n\t(tbl_tuple_def, tbl_tuple): Likewise.\n\t(ternary_long_lane_def, ternary_long_lane): Likewise.\n\t(ternary_long_opt_n_def, ternary_long_opt_n): Likewise.\n\t(ternary_qq_lane_def): Inherit from ternary_resize2_lane_base.\n\t(ternary_qq_lane_rotate_def, ternary_qq_lane_rotate): New shape\n\t(ternary_qq_opt_n_def): Inherit from ternary_resize2_opt_n_base.\n\t(ternary_qq_rotate_def, ternary_qq_rotate): New shape.\n\t(ternary_shift_left_imm_def, ternary_shift_left_imm): Likewise.\n\t(ternary_shift_right_imm_def, ternary_shift_right_imm): Likewise.\n\t(ternary_uint_def, ternary_uint): Likewise.\n\t(unary_convert): Fix typo in comment.\n\t(unary_convert_narrowt_def, unary_convert_narrowt): New shape.\n\t(unary_long_def, unary_long): Likewise.\n\t(unary_narrowb_def, unary_narrowb): Likewise.\n\t(unary_narrowt_def, unary_narrowt): Likewise.\n\t(unary_narrowb_to_uint_def, unary_narrowb_to_uint): Likewise.\n\t(unary_narrowt_to_uint_def, unary_narrowt_to_uint): Likewise.\n\t(unary_to_int_def, unary_to_int): Likewise.\n\t* config/aarch64/aarch64-sve-builtins-base.cc (unspec_cmla)\n\t(unspec_fcmla, unspec_cond_fcmla, expand_mla_mls_lane): New functions.\n\t(svasrd_impl): Delete.\n\t(svcadd_impl::expand): Handle integer operations too.\n\t(svcmla_impl::expand, svcmla_lane::expand): Likewise, using the\n\tnew functions to derive the unspec numbers.\n\t(svmla_svmls_lane_impl): Replace with...\n\t(svmla_lane_impl, svmls_lane_impl): ...these new classes.  Handle\n\tinteger operations too.\n\t(svwhile_impl): Rename to...\n\t(svwhilelx_impl): ...this and inherit from while_comparison.\n\t(svasrd): Use unspec_based_function.\n\t(svmla_lane): Use svmla_lane_impl.\n\t(svmls_lane): Use svmls_lane_impl.\n\t(svrecpe, svrsqrte): Handle unsigned integer operations too.\n\t(svwhilele, svwhilelt): Use svwhilelx_impl.\n\t* config/aarch64/aarch64-sve-builtins-sve2.h: New file.\n\t* config/aarch64/aarch64-sve-builtins-sve2.cc: Likewise.\n\t* config/aarch64/aarch64-sve-builtins-sve2.def: Likewise.\n\t* config/aarch64/aarch64-sve-builtins.def: Include\n\taarch64-sve-builtins-sve2.def.\n\ngcc/testsuite/\n\t* g++.target/aarch64/sve/acle/general-c++/mul_lane_1.c: New test.\n\t* g++.target/aarch64/sve2/acle: New directory.\n\t* gcc.target/aarch64/pragma_cpp_predefs_3.c: New test.\n\t* gcc.target/aarch64/sve/acle/asm/test_sve_acle.h (TEST_TYPE_CHANGE_Z)\n\t(TEST_DUAL_ZD, TEST_TYPE_CHANGE_ZX, TEST_TBL2, TEST_TBL2_REV): New\n\tmacros.\n\t* gcc.target/aarch64/sve/acle/general-c/binary_lane_1.c: Do not\n\texpect an error saying that the function has no f32 form, but instead\n\texpect an error about SVE2 being required if the current target\n\tdoesn't support SVE2.\n\t* gcc.target/aarch64/sve/acle/general-c/ternary_lane_1.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/general-c/ternary_lane_rotate_1.c Likewise.\n\t* gcc.target/aarch64/sve/acle/general-c/binary_long_lane_1.c,\n\t* gcc.target/aarch64/sve/acle/general-c/binary_long_opt_n_1.c,\n\t* gcc.target/aarch64/sve/acle/general-c/binary_narrowb_opt_n_1.c,\n\t* gcc.target/aarch64/sve/acle/general-c/binary_narrowt_opt_n_1.c,\n\t* gcc.target/aarch64/sve/acle/general-c/binary_to_uint_1.c,\n\t* gcc.target/aarch64/sve/acle/general-c/binary_wide_1.c,\n\t* gcc.target/aarch64/sve/acle/general-c/binary_wide_opt_n_1.c,\n\t* gcc.target/aarch64/sve/acle/general-c/compare_1.c,\n\t* gcc.target/aarch64/sve/acle/general-c/compare_ptr_1.c,\n\t* gcc.target/aarch64/sve/acle/general-c/load_ext_gather_index_restricted_1.c,\n\t* gcc.target/aarch64/sve/acle/general-c/load_ext_gather_offset_restricted_1.c,\n\t* gcc.target/aarch64/sve/acle/general-c/load_ext_gather_offset_restricted_2.c,\n\t* gcc.target/aarch64/sve/acle/general-c/load_ext_gather_offset_restricted_3.c,\n\t* gcc.target/aarch64/sve/acle/general-c/load_ext_gather_offset_restricted_4.c,\n\t* gcc.target/aarch64/sve/acle/general-c/load_gather_sv_restricted_1.c,\n\t* gcc.target/aarch64/sve/acle/general-c/load_gather_sv_restricted_2.c,\n\t* gcc.target/aarch64/sve/acle/general-c/mul_lane_1.c,\n\t* gcc.target/aarch64/sve/acle/general-c/shift_left_imm_long_1.c,\n\t* gcc.target/aarch64/sve/acle/general-c/shift_left_imm_to_uint_1.c,\n\t* gcc.target/aarch64/sve/acle/general-c/shift_left_imm_to_uint_2.c,\n\t* gcc.target/aarch64/sve/acle/general-c/shift_right_imm_narrowb_1.c,\n\t* gcc.target/aarch64/sve/acle/general-c/shift_right_imm_narrowb_to_uint_1.c,\n\t* gcc.target/aarch64/sve/acle/general-c/shift_right_imm_narrowt_1.c,\n\t* gcc.target/aarch64/sve/acle/general-c/shift_right_imm_narrowt_to_uint_1.c,\n\t* gcc.target/aarch64/sve/acle/general-c/store_scatter_index_restricted_1.c,\n\t* gcc.target/aarch64/sve/acle/general-c/store_scatter_offset_restricted_1.c,\n\t* gcc.target/aarch64/sve/acle/general-c/tbl_tuple_1.c,\n\t* gcc.target/aarch64/sve/acle/general-c/ternary_long_lane_1.c,\n\t* gcc.target/aarch64/sve/acle/general-c/ternary_long_opt_n_1.c,\n\t* gcc.target/aarch64/sve/acle/general-c/ternary_qq_lane_rotate_1.c,\n\t* gcc.target/aarch64/sve/acle/general-c/ternary_qq_rotate_1.c,\n\t* gcc.target/aarch64/sve/acle/general-c/ternary_shift_right_imm_1.c,\n\t* gcc.target/aarch64/sve/acle/general-c/ternary_uint_1.c,\n\t* gcc.target/aarch64/sve/acle/general-c/unary_convert_narrowt_1.c,\n\t* gcc.target/aarch64/sve/acle/general-c/unary_narrowb_1.c,\n\t* gcc.target/aarch64/sve/acle/general-c/unary_narrowb_to_uint_1.c,\n\t* gcc.target/aarch64/sve/acle/general-c/unary_narrowt_1.c,\n\t* gcc.target/aarch64/sve/acle/general-c/unary_narrowt_to_uint_1.c,\n\t* gcc.target/aarch64/sve/acle/general-c/unary_to_int_1.c: New tests.\n\t* gcc.target/aarch64/sve2/bcax_1.c: Likewise.\n\t* gcc.target/aarch64/sve2/acle: New directory.\n\nFrom-SVN: r280060", "tree": {"sha": "fe83aaee3f4299895706f7e0e40af7ebc6ab3d6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe83aaee3f4299895706f7e0e40af7ebc6ab3d6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a09a9483825233f16e5b26bb0ffee76752339fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a09a9483825233f16e5b26bb0ffee76752339fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a09a9483825233f16e5b26bb0ffee76752339fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a09a9483825233f16e5b26bb0ffee76752339fc/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f3582fda783496cc268467973c2c9860cd159b3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3582fda783496cc268467973c2c9860cd159b3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3582fda783496cc268467973c2c9860cd159b3d"}], "stats": {"total": 104514, "additions": 104163, "deletions": 351}, "files": [{"sha": "706bb9349112e8cd1ab849ebb09d08cbde6f5c10", "filename": "gcc/ChangeLog", "status": "modified", "additions": 356, "deletions": 0, "changes": 356, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -1,3 +1,359 @@\n+2020-01-09  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config.gcc (aarch64*-*-*): Add aarch64-sve-builtins-sve2.o to\n+\textra_objs.\n+\t* config/aarch64/t-aarch64 (aarch64-sve-builtins.o): Depend on\n+\taarch64-sve-builtins-base.def, aarch64-sve-builtins-sve2.def and\n+\taarch64-sve-builtins-sve2.h.\n+\t(aarch64-sve-builtins-sve2.o): New rule.\n+\t* config/aarch64/aarch64.h (AARCH64_ISA_SVE2_AES): New macro.\n+\t(AARCH64_ISA_SVE2_BITPERM, AARCH64_ISA_SVE2_SHA3): Likewise.\n+\t(AARCH64_ISA_SVE2_SM4, TARGET_SVE2_AES, TARGET_SVE2_BITPERM): Likewise.\n+\t(TARGET_SVE2_SHA, TARGET_SVE2_SM4): Likewise.\n+\t* config/aarch64/aarch64-c.c (aarch64_update_cpp_builtins): Handle\n+\tTARGET_SVE2_AES, TARGET_SVE2_BITPERM, TARGET_SVE2_SHA3 and\n+\tTARGET_SVE2_SM4.\n+\t* config/aarch64/aarch64-sve.md: Update comments with SVE2\n+\tinstructions that are handled here.\n+\t(@cond_asrd<mode>): Generalize to...\n+\t(@cond_<SVE_INT_SHIFT_IMM:sve_int_op><mode>): ...this.\n+\t(*cond_asrd<mode>_2): Generalize to...\n+\t(*cond_<SVE_INT_SHIFT_IMM:sve_int_op><mode>_2): ...this.\n+\t(*cond_asrd<mode>_z): Generalize to...\n+\t(*cond_<SVE_INT_SHIFT_IMM:sve_int_op><mode>_z): ...this.\n+\t* config/aarch64/aarch64.md (UNSPEC_LDNT1_GATHER): New unspec.\n+\t(UNSPEC_STNT1_SCATTER, UNSPEC_WHILEGE, UNSPEC_WHILEGT): Likewise.\n+\t(UNSPEC_WHILEHI, UNSPEC_WHILEHS): Likewise.\n+\t* config/aarch64/aarch64-sve2.md (@aarch64_gather_ldnt<mode>): New\n+\tpattern.\n+\t(@aarch64_gather_ldnt_<ANY_EXTEND:optab><SVE_FULL_SDI:mode><SVE_PARTIAL_I:mode>)\n+\t(@aarch64_scatter_stnt<mode>): Likewise.\n+\t(@aarch64_scatter_stnt_<SVE_FULL_SDI:mode><SVE_PARTIAL_I:mode>)\n+\t(@aarch64_mul_lane_<mode>): Likewise.\n+\t(@aarch64_sve_suqadd<mode>_const): Likewise.\n+\t(*<sur>h<addsub><mode>): Generalize to...\n+\t(@aarch64_pred_<SVE2_COND_INT_BINARY_REV:sve_int_op><mode>): ...this\n+\tnew pattern.\n+\t(@cond_<SVE2_COND_INT_BINARY:sve_int_op><mode>): New expander.\n+\t(*cond_<SVE2_COND_INT_BINARY:sve_int_op><mode>_2): New pattern.\n+\t(*cond_<SVE2_COND_INT_BINARY:sve_int_op><mode>_3): Likewise.\n+\t(*cond_<SVE2_COND_INT_BINARY:sve_int_op><mode>_any): Likewise.\n+\t(*cond_<SVE2_COND_INT_BINARY_NOREV:sve_int_op><mode>_z): Likewise.\n+\t(@aarch64_sve_<SVE2_INT_BINARY:sve_int_op><mode>):: Likewise.\n+\t(@aarch64_sve_<SVE2_INT_BINARY:sve_int_op>_lane_<mode>): Likewise.\n+\t(@aarch64_pred_<SVE2_COND_INT_SHIFT:sve_int_op><mode>): Likewise.\n+\t(@cond_<SVE2_COND_INT_SHIFT:sve_int_op><mode>): New expander.\n+\t(*cond_<SVE2_COND_INT_SHIFT:sve_int_op><mode>_2): New pattern.\n+\t(*cond_<SVE2_COND_INT_SHIFT:sve_int_op><mode>_3): Likewise.\n+\t(*cond_<SVE2_COND_INT_SHIFT:sve_int_op><mode>_any): Likewise.\n+\t(@aarch64_sve_<SVE2_INT_TERNARY:sve_int_op><mode>): Likewise.\n+\t(@aarch64_sve_<SVE2_INT_TERNARY_LANE:sve_int_op>_lane_<mode>)\n+\t(@aarch64_sve_add_mul_lane_<mode>): Likewise.\n+\t(@aarch64_sve_sub_mul_lane_<mode>): Likewise.\n+\t(@aarch64_sve2_xar<mode>): Likewise.\n+\t(@aarch64_sve2_bcax<mode>): Likewise.\n+\t(*aarch64_sve2_eor3<mode>): Rename to...\n+\t(@aarch64_sve2_eor3<mode>): ...this.\n+\t(@aarch64_sve2_bsl<mode>): New expander.\n+\t(@aarch64_sve2_nbsl<mode>): Likewise.\n+\t(@aarch64_sve2_bsl1n<mode>): Likewise.\n+\t(@aarch64_sve2_bsl2n<mode>): Likewise.\n+\t(@aarch64_sve_add_<SHIFTRT:sve_int_op><mode>): Likewise.\n+\t(*aarch64_sve2_sra<mode>): Add MOVPRFX support.\n+\t(@aarch64_sve_add_<VRSHR_N:sve_int_op><mode>): New pattern.\n+\t(@aarch64_sve_<SVE2_INT_SHIFT_INSERT:sve_int_op><mode>): Likewise.\n+\t(@aarch64_sve2_<USMAX:su>aba<mode>): New expander.\n+\t(*aarch64_sve2_<USMAX:su>aba<mode>): New pattern.\n+\t(@aarch64_sve_<SVE2_INT_BINARY_WIDE:sve_int_op><mode>): Likewise.\n+\t(<su>mull<bt><Vwide>): Generalize to...\n+\t(@aarch64_sve_<SVE2_INT_BINARY_LONG:sve_int_op><mode>): ...this new\n+\tpattern.\n+\t(@aarch64_sve_<SVE2_INT_BINARY_LONG_lANE:sve_int_op>_lane_<mode>)\n+\t(@aarch64_sve_<SVE2_INT_SHIFT_IMM_LONG:sve_int_op><mode>)\n+\t(@aarch64_sve_add_<SVE2_INT_ADD_BINARY_LONG:sve_int_op><mode>)\n+\t(@aarch64_sve_add_<SVE2_INT_ADD_BINARY_LONG_LANE:sve_int_op>_lane_<mode>)\n+\t(@aarch64_sve_qadd_<SVE2_INT_QADD_BINARY_LONG:sve_int_op><mode>)\n+\t(@aarch64_sve_qadd_<SVE2_INT_QADD_BINARY_LONG_LANE:sve_int_op>_lane_<mode>)\n+\t(@aarch64_sve_sub_<SVE2_INT_SUB_BINARY_LONG:sve_int_op><mode>)\n+\t(@aarch64_sve_sub_<SVE2_INT_SUB_BINARY_LONG_LANE:sve_int_op>_lane_<mode>)\n+\t(@aarch64_sve_qsub_<SVE2_INT_QSUB_BINARY_LONG:sve_int_op><mode>)\n+\t(@aarch64_sve_qsub_<SVE2_INT_QSUB_BINARY_LONG_LANE:sve_int_op>_lane_<mode>)\n+\t(@aarch64_sve_<SVE2_FP_TERNARY_LONG:sve_fp_op><mode>): New patterns.\n+\t(@aarch64_<SVE2_FP_TERNARY_LONG_LANE:sve_fp_op>_lane_<mode>)\n+\t(@aarch64_sve_<SVE2_INT_UNARY_NARROWB:sve_int_op><mode>): Likewise.\n+\t(@aarch64_sve_<SVE2_INT_UNARY_NARROWT:sve_int_op><mode>): Likewise.\n+\t(@aarch64_sve_<SVE2_INT_BINARY_NARROWB:sve_int_op><mode>): Likewise.\n+\t(@aarch64_sve_<SVE2_INT_BINARY_NARROWT:sve_int_op><mode>): Likewise.\n+\t(<SHRNB:r>shrnb<mode>): Generalize to...\n+\t(@aarch64_sve_<SVE2_INT_SHIFT_IMM_NARROWB:sve_int_op><mode>): ...this\n+\tnew pattern.\n+\t(<SHRNT:r>shrnt<mode>): Generalize to...\n+\t(@aarch64_sve_<SVE2_INT_SHIFT_IMM_NARROWT:sve_int_op><mode>): ...this\n+\tnew pattern.\n+\t(@aarch64_pred_<SVE2_INT_BINARY_PAIR:sve_int_op><mode>): New pattern.\n+\t(@aarch64_pred_<SVE2_FP_BINARY_PAIR:sve_fp_op><mode>): Likewise.\n+\t(@cond_<SVE2_INT_BINARY_PAIR_LONG:sve_int_op><mode>): New expander.\n+\t(*cond_<SVE2_INT_BINARY_PAIR_LONG:sve_int_op><mode>_2): New pattern.\n+\t(*cond_<SVE2_INT_BINARY_PAIR_LONG:sve_int_op><mode>_z): Likewise.\n+\t(@aarch64_sve_<SVE2_INT_CADD:optab><mode>): Likewise.\n+\t(@aarch64_sve_<SVE2_INT_CMLA:optab><mode>): Likewise.\n+\t(@aarch64_<SVE2_INT_CMLA:optab>_lane_<mode>): Likewise.\n+\t(@aarch64_sve_<SVE2_INT_CDOT:optab><mode>): Likewise.\n+\t(@aarch64_<SVE2_INT_CDOT:optab>_lane_<mode>): Likewise.\n+\t(@aarch64_pred_<SVE2_COND_FP_UNARY_LONG:sve_fp_op><mode>): Likewise.\n+\t(@cond_<SVE2_COND_FP_UNARY_LONG:sve_fp_op><mode>): New expander.\n+\t(*cond_<SVE2_COND_FP_UNARY_LONG:sve_fp_op><mode>): New pattern.\n+\t(@aarch64_sve2_cvtnt<mode>): Likewise.\n+\t(@aarch64_pred_<SVE2_COND_FP_UNARY_NARROWB:sve_fp_op><mode>): Likewise.\n+\t(@cond_<SVE2_COND_FP_UNARY_NARROWB:sve_fp_op><mode>): New expander.\n+\t(*cond_<SVE2_COND_FP_UNARY_NARROWB:sve_fp_op><mode>_any): New pattern.\n+\t(@aarch64_sve2_cvtxnt<mode>): Likewise.\n+\t(@aarch64_pred_<SVE2_U32_UNARY:sve_int_op><mode>): Likewise.\n+\t(@cond_<SVE2_U32_UNARY:sve_int_op><mode>): New expander.\n+\t(*cond_<SVE2_U32_UNARY:sve_int_op><mode>): New pattern.\n+\t(@aarch64_pred_<SVE2_COND_INT_UNARY_FP:sve_fp_op><mode>): Likewise.\n+\t(@cond_<SVE2_COND_INT_UNARY_FP:sve_fp_op><mode>): New expander.\n+\t(*cond_<SVE2_COND_INT_UNARY_FP:sve_fp_op><mode>): New pattern.\n+\t(@aarch64_sve2_pmul<mode>): Likewise.\n+\t(@aarch64_sve_<SVE2_PMULL:optab><mode>): Likewise.\n+\t(@aarch64_sve_<SVE2_PMULL_PAIR:optab><mode>): Likewise.\n+\t(@aarch64_sve2_tbl2<mode>): Likewise.\n+\t(@aarch64_sve2_tbx<mode>): Likewise.\n+\t(@aarch64_sve_<SVE2_INT_BITPERM:sve_int_op><mode>): Likewise.\n+\t(@aarch64_sve2_histcnt<mode>): Likewise.\n+\t(@aarch64_sve2_histseg<mode>): Likewise.\n+\t(@aarch64_pred_<SVE2_MATCH:sve_int_op><mode>): Likewise.\n+\t(*aarch64_pred_<SVE2_MATCH:sve_int_op><mode>_cc): Likewise.\n+\t(*aarch64_pred_<SVE2_MATCH:sve_int_op><mode>_ptest): Likewise.\n+\t(aarch64_sve2_aes<CRYPTO_AES:aes_op>): Likewise.\n+\t(aarch64_sve2_aes<CRYPTO_AESMC:aesmc_op>): Likewise.\n+\t(*aarch64_sve2_aese_fused, *aarch64_sve2_aesd_fused): Likewise.\n+\t(aarch64_sve2_rax1, aarch64_sve2_sm4e, aarch64_sve2_sm4ekey): Likewise.\n+\t(<su>mulh<r>s<mode>3): Update after above pattern name changes.\n+\t* config/aarch64/iterators.md (VNx16QI_ONLY, VNx4SF_ONLY)\n+\t(SVE_STRUCT2, SVE_FULL_BHI, SVE_FULL_HSI, SVE_FULL_HDI)\n+\t(SVE2_PMULL_PAIR_I): New mode iterators.\n+\t(UNSPEC_ADCLB, UNSPEC_ADCLT, UNSPEC_ADDHNB, UNSPEC_ADDHNT, UNSPEC_BDEP)\n+\t(UNSPEC_BEXT, UNSPEC_BGRP, UNSPEC_CADD90, UNSPEC_CADD270, UNSPEC_CDOT)\n+\t(UNSPEC_CDOT90, UNSPEC_CDOT180, UNSPEC_CDOT270, UNSPEC_CMLA)\n+\t(UNSPEC_CMLA90, UNSPEC_CMLA180, UNSPEC_CMLA270, UNSPEC_COND_FCVTLT)\n+\t(UNSPEC_COND_FCVTNT, UNSPEC_COND_FCVTX, UNSPEC_COND_FCVTXNT)\n+\t(UNSPEC_COND_FLOGB, UNSPEC_EORBT, UNSPEC_EORTB, UNSPEC_FADDP)\n+\t(UNSPEC_FMAXP, UNSPEC_FMAXNMP, UNSPEC_FMLALB, UNSPEC_FMLALT)\n+\t(UNSPEC_FMLSLB, UNSPEC_FMLSLT, UNSPEC_FMINP, UNSPEC_FMINNMP)\n+\t(UNSPEC_HISTCNT, UNSPEC_HISTSEG, UNSPEC_MATCH, UNSPEC_NMATCH)\n+\t(UNSPEC_PMULLB, UNSPEC_PMULLB_PAIR, UNSPEC_PMULLT, UNSPEC_PMULLT_PAIR)\n+\t(UNSPEC_RADDHNB, UNSPEC_RADDHNT, UNSPEC_RSUBHNB, UNSPEC_RSUBHNT)\n+\t(UNSPEC_SLI, UNSPEC_SRI, UNSPEC_SABDLB, UNSPEC_SABDLT, UNSPEC_SADDLB)\n+\t(UNSPEC_SADDLBT, UNSPEC_SADDLT, UNSPEC_SADDWB, UNSPEC_SADDWT)\n+\t(UNSPEC_SBCLB, UNSPEC_SBCLT, UNSPEC_SMAXP, UNSPEC_SMINP)\n+\t(UNSPEC_SQCADD90, UNSPEC_SQCADD270, UNSPEC_SQDMULLB, UNSPEC_SQDMULLBT)\n+\t(UNSPEC_SQDMULLT, UNSPEC_SQRDCMLAH, UNSPEC_SQRDCMLAH90)\n+\t(UNSPEC_SQRDCMLAH180, UNSPEC_SQRDCMLAH270, UNSPEC_SQRSHRNB)\n+\t(UNSPEC_SQRSHRNT, UNSPEC_SQRSHRUNB, UNSPEC_SQRSHRUNT, UNSPEC_SQSHRNB)\n+\t(UNSPEC_SQSHRNT, UNSPEC_SQSHRUNB, UNSPEC_SQSHRUNT, UNSPEC_SQXTNB)\n+\t(UNSPEC_SQXTNT, UNSPEC_SQXTUNB, UNSPEC_SQXTUNT, UNSPEC_SSHLLB)\n+\t(UNSPEC_SSHLLT, UNSPEC_SSUBLB, UNSPEC_SSUBLBT, UNSPEC_SSUBLT)\n+\t(UNSPEC_SSUBLTB, UNSPEC_SSUBWB, UNSPEC_SSUBWT, UNSPEC_SUBHNB)\n+\t(UNSPEC_SUBHNT, UNSPEC_TBL2, UNSPEC_UABDLB, UNSPEC_UABDLT)\n+\t(UNSPEC_UADDLB, UNSPEC_UADDLT, UNSPEC_UADDWB, UNSPEC_UADDWT)\n+\t(UNSPEC_UMAXP, UNSPEC_UMINP, UNSPEC_UQRSHRNB, UNSPEC_UQRSHRNT)\n+\t(UNSPEC_UQSHRNB, UNSPEC_UQSHRNT, UNSPEC_UQXTNB, UNSPEC_UQXTNT)\n+\t(UNSPEC_USHLLB, UNSPEC_USHLLT, UNSPEC_USUBLB, UNSPEC_USUBLT)\n+\t(UNSPEC_USUBWB, UNSPEC_USUBWT): New unspecs.\n+\t(UNSPEC_SMULLB, UNSPEC_SMULLT, UNSPEC_UMULLB, UNSPEC_UMULLT)\n+\t(UNSPEC_SMULHS, UNSPEC_SMULHRS, UNSPEC_UMULHS, UNSPEC_UMULHRS)\n+\t(UNSPEC_RSHRNB, UNSPEC_RSHRNT, UNSPEC_SHRNB, UNSPEC_SHRNT): Move\n+\tfurther down file.\n+\t(VNARROW, Ventype): New mode attributes.\n+\t(Vewtype): Handle VNx2DI.  Fix typo in comment.\n+\t(VDOUBLE): New mode attribute.\n+\t(sve_lane_con): Handle VNx8HI.\n+\t(SVE_INT_UNARY): Include ss_abs and ss_neg for TARGET_SVE2.\n+\t(SVE_INT_BINARY): Likewise ss_plus, us_plus, ss_minus and us_minus.\n+\t(sve_int_op, sve_int_op_rev): Handle the above codes.\n+\t(sve_pred_int_rhs2_operand): Likewise.\n+\t(MULLBT, SHRNB, SHRNT): Delete.\n+\t(SVE_INT_SHIFT_IMM): New int iterator.\n+\t(SVE_WHILE): Add UNSPEC_WHILEGE, UNSPEC_WHILEGT, UNSPEC_WHILEHI\n+\tand UNSPEC_WHILEHS for TARGET_SVE2.\n+\t(SVE2_U32_UNARY, SVE2_INT_UNARY_NARROWB, SVE2_INT_UNARY_NARROWT)\n+\t(SVE2_INT_BINARY, SVE2_INT_BINARY_LANE, SVE2_INT_BINARY_LONG)\n+\t(SVE2_INT_BINARY_LONG_LANE, SVE2_INT_BINARY_NARROWB)\n+\t(SVE2_INT_BINARY_NARROWT, SVE2_INT_BINARY_PAIR, SVE2_FP_BINARY_PAIR)\n+\t(SVE2_INT_BINARY_PAIR_LONG, SVE2_INT_BINARY_WIDE): New int iterators.\n+\t(SVE2_INT_SHIFT_IMM_LONG, SVE2_INT_SHIFT_IMM_NARROWB): Likewise.\n+\t(SVE2_INT_SHIFT_IMM_NARROWT, SVE2_INT_SHIFT_INSERT, SVE2_INT_CADD)\n+\t(SVE2_INT_BITPERM, SVE2_INT_TERNARY, SVE2_INT_TERNARY_LANE): Likewise.\n+\t(SVE2_FP_TERNARY_LONG, SVE2_FP_TERNARY_LONG_LANE, SVE2_INT_CMLA)\n+\t(SVE2_INT_CDOT, SVE2_INT_ADD_BINARY_LONG, SVE2_INT_QADD_BINARY_LONG)\n+\t(SVE2_INT_SUB_BINARY_LONG, SVE2_INT_QSUB_BINARY_LONG): Likewise.\n+\t(SVE2_INT_ADD_BINARY_LONG_LANE, SVE2_INT_QADD_BINARY_LONG_LANE)\n+\t(SVE2_INT_SUB_BINARY_LONG_LANE, SVE2_INT_QSUB_BINARY_LONG_LANE)\n+\t(SVE2_COND_INT_UNARY_FP, SVE2_COND_FP_UNARY_LONG): Likewise.\n+\t(SVE2_COND_FP_UNARY_NARROWB, SVE2_COND_INT_BINARY): Likewise.\n+\t(SVE2_COND_INT_BINARY_NOREV, SVE2_COND_INT_BINARY_REV): Likewise.\n+\t(SVE2_COND_INT_SHIFT, SVE2_MATCH, SVE2_PMULL): Likewise.\n+\t(optab): Handle the new unspecs.\n+\t(su, r): Remove entries for UNSPEC_SHRNB, UNSPEC_SHRNT, UNSPEC_RSHRNB\n+\tand UNSPEC_RSHRNT.\n+\t(lr): Handle the new unspecs.\n+\t(bt): Delete.\n+\t(cmp_op, while_optab_cmp, sve_int_op): Handle the new unspecs.\n+\t(sve_int_op_rev, sve_int_add_op, sve_int_qadd_op, sve_int_sub_op)\n+\t(sve_int_qsub_op): New int attributes.\n+\t(sve_fp_op, rot): Handle the new unspecs.\n+\t* config/aarch64/aarch64-sve-builtins.h\n+\t(function_resolver::require_matching_pointer_type): Declare.\n+\t(function_resolver::resolve_unary): Add an optional boolean argument.\n+\t(function_resolver::finish_opt_n_resolution): Add an optional\n+\ttype_suffix_index argument.\n+\t(gimple_folder::redirect_call): Declare.\n+\t(gimple_expander::prepare_gather_address_operands): Add an optional\n+\tbool parameter.\n+\t* config/aarch64/aarch64-sve-builtins.cc: Include\n+\taarch64-sve-builtins-sve2.h.\n+\t(TYPES_b_unsigned, TYPES_b_integer, TYPES_bh_integer): New macros.\n+\t(TYPES_bs_unsigned, TYPES_hs_signed, TYPES_hs_integer): Likewise.\n+\t(TYPES_hd_unsigned, TYPES_hsd_signed): Likewise.\n+\t(TYPES_hsd_integer): Use TYPES_hsd_signed.\n+\t(TYPES_s_float_hsd_integer, TYPES_s_float_sd_integer): New macros.\n+\t(TYPES_s_unsigned): Likewise.\n+\t(TYPES_s_integer): Use TYPES_s_unsigned.\n+\t(TYPES_sd_signed, TYPES_sd_unsigned): New macros.\n+\t(TYPES_sd_integer): Use them.\n+\t(TYPES_d_unsigned): New macro.\n+\t(TYPES_d_integer): Use it.\n+\t(TYPES_d_data, TYPES_cvt_long, TYPES_cvt_narrow_s): New macros.\n+\t(TYPES_cvt_narrow): Likewise.\n+\t(DEF_SVE_TYPES_ARRAY): Include the new types macros above.\n+\t(preds_mx): New variable.\n+\t(function_builder::add_overloaded_function): Allow the new feature\n+\tset to be more restrictive than the original one.\n+\t(function_resolver::infer_pointer_type): Remove qualifiers from\n+\tthe pointer type before printing it.\n+\t(function_resolver::require_matching_pointer_type): New function.\n+\t(function_resolver::resolve_sv_displacement): Handle functions\n+\tthat don't support 32-bit vector indices or svint32_t vector offsets.\n+\t(function_resolver::finish_opt_n_resolution): Take the inferred type\n+\tas a separate argument.\n+\t(function_resolver::resolve_unary): Optionally treat all forms in\n+\tthe same way as normal merging functions.\n+\t(gimple_folder::redirect_call): New function.\n+\t(function_expander::prepare_gather_address_operands): Add an argument\n+\tthat says whether scaled forms are available.  If they aren't,\n+\thandle scaling of vector indices and don't add the extension and\n+\tscaling operands.\n+\t(function_expander::map_to_unspecs): If aarch64_sve isn't available,\n+\tfall back to using cond_* instead.\n+\t* config/aarch64/aarch64-sve-builtins-functions.h (rtx_code_function):\n+\tSplit out the member variables into...\n+\t(rtx_code_function_base): ...this new base class.\n+\t(rtx_code_function_rotated): Inherit rtx_code_function_base.\n+\t(unspec_based_function): Split out the member variables into...\n+\t(unspec_based_function_base): ...this new base class.\n+\t(unspec_based_function_rotated): Inherit unspec_based_function_base.\n+\t(unspec_based_function_exact_insn): New class.\n+\t(unspec_based_add_function, unspec_based_add_lane_function)\n+\t(unspec_based_lane_function, unspec_based_pred_function)\n+\t(unspec_based_qadd_function, unspec_based_qadd_lane_function)\n+\t(unspec_based_qsub_function, unspec_based_qsub_lane_function)\n+\t(unspec_based_sub_function, unspec_based_sub_lane_function): New\n+\ttypedefs.\n+\t(unspec_based_fused_function): New class.\n+\t(unspec_based_mla_function, unspec_based_mls_function): New typedefs.\n+\t(unspec_based_fused_lane_function): New class.\n+\t(unspec_based_mla_lane_function, unspec_based_mls_lane_function): New\n+\ttypedefs.\n+\t(CODE_FOR_MODE1): New macro.\n+\t(fixed_insn_function): New class.\n+\t(while_comparison): Likewise.\n+\t* config/aarch64/aarch64-sve-builtins-shapes.h (binary_long_lane)\n+\t(binary_long_opt_n, binary_narrowb_opt_n, binary_narrowt_opt_n)\n+\t(binary_to_uint, binary_wide, binary_wide_opt_n, compare, compare_ptr)\n+\t(load_ext_gather_index_restricted, load_ext_gather_offset_restricted)\n+\t(load_gather_sv_restricted, shift_left_imm_long): Declare.\n+\t(shift_left_imm_to_uint, shift_right_imm_narrowb): Likewise.\n+\t(shift_right_imm_narrowt, shift_right_imm_narrowb_to_uint): Likewise.\n+\t(shift_right_imm_narrowt_to_uint, store_scatter_index_restricted)\n+\t(store_scatter_offset_restricted, tbl_tuple, ternary_long_lane)\n+\t(ternary_long_opt_n, ternary_qq_lane_rotate, ternary_qq_rotate)\n+\t(ternary_shift_left_imm, ternary_shift_right_imm, ternary_uint)\n+\t(unary_convert_narrowt, unary_long, unary_narrowb, unary_narrowt)\n+\t(unary_narrowb_to_uint, unary_narrowt_to_uint, unary_to_int): Likewise.\n+\t* config/aarch64/aarch64-sve-builtins-shapes.cc (apply_predication):\n+\tAlso add an initial argument for unary_convert_narrowt, regardless\n+\tof the predication type.\n+\t(build_32_64): Allow loads and stores to specify MODE_none.\n+\t(build_sv_index64, build_sv_uint_offset): New functions.\n+\t(long_type_suffix): New function.\n+\t(binary_imm_narrowb_base, binary_imm_narrowt_base): New classes.\n+\t(binary_imm_long_base, load_gather_sv_base): Likewise.\n+\t(shift_right_imm_narrow_wrapper, ternary_shift_imm_base): Likewise.\n+\t(ternary_resize2_opt_n_base, ternary_resize2_lane_base): Likewise.\n+\t(unary_narrowb_base, unary_narrowt_base): Likewise.\n+\t(binary_long_lane_def, binary_long_lane): New shape.\n+\t(binary_long_opt_n_def, binary_long_opt_n): Likewise.\n+\t(binary_narrowb_opt_n_def, binary_narrowb_opt_n): Likewise.\n+\t(binary_narrowt_opt_n_def, binary_narrowt_opt_n): Likewise.\n+\t(binary_to_uint_def, binary_to_uint): Likewise.\n+\t(binary_wide_def, binary_wide): Likewise.\n+\t(binary_wide_opt_n_def, binary_wide_opt_n): Likewise.\n+\t(compare_def, compare): Likewise.\n+\t(compare_ptr_def, compare_ptr): Likewise.\n+\t(load_ext_gather_index_restricted_def,\n+\tload_ext_gather_index_restricted): Likewise.\n+\t(load_ext_gather_offset_restricted_def,\n+\tload_ext_gather_offset_restricted): Likewise.\n+\t(load_gather_sv_def): Inherit from load_gather_sv_base.\n+\t(load_gather_sv_restricted_def, load_gather_sv_restricted): New shape.\n+\t(shift_left_imm_def, shift_left_imm): Likewise.\n+\t(shift_left_imm_long_def, shift_left_imm_long): Likewise.\n+\t(shift_left_imm_to_uint_def, shift_left_imm_to_uint): Likewise.\n+\t(store_scatter_index_restricted_def,\n+\tstore_scatter_index_restricted): Likewise.\n+\t(store_scatter_offset_restricted_def,\n+\tstore_scatter_offset_restricted): Likewise.\n+\t(tbl_tuple_def, tbl_tuple): Likewise.\n+\t(ternary_long_lane_def, ternary_long_lane): Likewise.\n+\t(ternary_long_opt_n_def, ternary_long_opt_n): Likewise.\n+\t(ternary_qq_lane_def): Inherit from ternary_resize2_lane_base.\n+\t(ternary_qq_lane_rotate_def, ternary_qq_lane_rotate): New shape\n+\t(ternary_qq_opt_n_def): Inherit from ternary_resize2_opt_n_base.\n+\t(ternary_qq_rotate_def, ternary_qq_rotate): New shape.\n+\t(ternary_shift_left_imm_def, ternary_shift_left_imm): Likewise.\n+\t(ternary_shift_right_imm_def, ternary_shift_right_imm): Likewise.\n+\t(ternary_uint_def, ternary_uint): Likewise.\n+\t(unary_convert): Fix typo in comment.\n+\t(unary_convert_narrowt_def, unary_convert_narrowt): New shape.\n+\t(unary_long_def, unary_long): Likewise.\n+\t(unary_narrowb_def, unary_narrowb): Likewise.\n+\t(unary_narrowt_def, unary_narrowt): Likewise.\n+\t(unary_narrowb_to_uint_def, unary_narrowb_to_uint): Likewise.\n+\t(unary_narrowt_to_uint_def, unary_narrowt_to_uint): Likewise.\n+\t(unary_to_int_def, unary_to_int): Likewise.\n+\t* config/aarch64/aarch64-sve-builtins-base.cc (unspec_cmla)\n+\t(unspec_fcmla, unspec_cond_fcmla, expand_mla_mls_lane): New functions.\n+\t(svasrd_impl): Delete.\n+\t(svcadd_impl::expand): Handle integer operations too.\n+\t(svcmla_impl::expand, svcmla_lane::expand): Likewise, using the\n+\tnew functions to derive the unspec numbers.\n+\t(svmla_svmls_lane_impl): Replace with...\n+\t(svmla_lane_impl, svmls_lane_impl): ...these new classes.  Handle\n+\tinteger operations too.\n+\t(svwhile_impl): Rename to...\n+\t(svwhilelx_impl): ...this and inherit from while_comparison.\n+\t(svasrd): Use unspec_based_function.\n+\t(svmla_lane): Use svmla_lane_impl.\n+\t(svmls_lane): Use svmls_lane_impl.\n+\t(svrecpe, svrsqrte): Handle unsigned integer operations too.\n+\t(svwhilele, svwhilelt): Use svwhilelx_impl.\n+\t* config/aarch64/aarch64-sve-builtins-sve2.h: New file.\n+\t* config/aarch64/aarch64-sve-builtins-sve2.cc: Likewise.\n+\t* config/aarch64/aarch64-sve-builtins-sve2.def: Likewise.\n+\t* config/aarch64/aarch64-sve-builtins.def: Include\n+\taarch64-sve-builtins-sve2.def.\n+\n 2020-01-09  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/aarch64-protos.h (aarch64_sve_arith_immediate_p)"}, {"sha": "2c57c24439ba43942f1991b2eb83a67123b464e8", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -319,7 +319,7 @@ aarch64*-*-*)\n \tc_target_objs=\"aarch64-c.o\"\n \tcxx_target_objs=\"aarch64-c.o\"\n \td_target_objs=\"aarch64-d.o\"\n-\textra_objs=\"aarch64-builtins.o aarch-common.o aarch64-sve-builtins.o aarch64-sve-builtins-shapes.o aarch64-sve-builtins-base.o cortex-a57-fma-steering.o aarch64-speculation.o falkor-tag-collision-avoidance.o aarch64-bti-insert.o\"\n+\textra_objs=\"aarch64-builtins.o aarch-common.o aarch64-sve-builtins.o aarch64-sve-builtins-shapes.o aarch64-sve-builtins-base.o aarch64-sve-builtins-sve2.o cortex-a57-fma-steering.o aarch64-speculation.o falkor-tag-collision-avoidance.o aarch64-bti-insert.o\"\n \ttarget_gtfiles=\"\\$(srcdir)/config/aarch64/aarch64-builtins.c \\$(srcdir)/config/aarch64/aarch64-sve-builtins.h \\$(srcdir)/config/aarch64/aarch64-sve-builtins.cc\"\n \ttarget_has_targetm_common=yes\n \t;;"}, {"sha": "b422530af2020498fa683d22574b82b81ec71140", "filename": "gcc/config/aarch64/aarch64-c.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Fconfig%2Faarch64%2Faarch64-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Fconfig%2Faarch64%2Faarch64-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-c.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -150,6 +150,11 @@ aarch64_update_cpp_builtins (cpp_reader *pfile)\n       builtin_define_with_int_value (\"__ARM_FEATURE_SVE_BITS\", bits);\n     }\n   aarch64_def_or_undef (TARGET_SVE2, \"__ARM_FEATURE_SVE2\", pfile);\n+  aarch64_def_or_undef (TARGET_SVE2_AES, \"__ARM_FEATURE_SVE2_AES\", pfile);\n+  aarch64_def_or_undef (TARGET_SVE2_BITPERM,\n+\t\t\t\"__ARM_FEATURE_SVE2_BITPERM\", pfile);\n+  aarch64_def_or_undef (TARGET_SVE2_SHA3, \"__ARM_FEATURE_SVE2_SHA3\", pfile);\n+  aarch64_def_or_undef (TARGET_SVE2_SM4, \"__ARM_FEATURE_SVE2_SM4\", pfile);\n \n   aarch64_def_or_undef (TARGET_LSE, \"__ARM_FEATURE_ATOMICS\", pfile);\n   aarch64_def_or_undef (TARGET_AES, \"__ARM_FEATURE_AES\", pfile);"}, {"sha": "16a7898a34b4c7847f2ee99a3b651360fa9e7df0", "filename": "gcc/config/aarch64/aarch64-sve-builtins-base.cc", "status": "modified", "additions": 123, "deletions": 84, "changes": 207, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.cc?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -49,6 +49,48 @@ using namespace aarch64_sve;\n \n namespace {\n \n+/* Return the UNSPEC_CMLA* unspec for rotation amount ROT.  */\n+static int\n+unspec_cmla (int rot)\n+{\n+  switch (rot)\n+    {\n+    case 0: return UNSPEC_CMLA;\n+    case 90: return UNSPEC_CMLA90;\n+    case 180: return UNSPEC_CMLA180;\n+    case 270: return UNSPEC_CMLA270;\n+    default: gcc_unreachable ();\n+    }\n+}\n+\n+/* Return the UNSPEC_FCMLA* unspec for rotation amount ROT.  */\n+static int\n+unspec_fcmla (int rot)\n+{\n+  switch (rot)\n+    {\n+    case 0: return UNSPEC_FCMLA;\n+    case 90: return UNSPEC_FCMLA90;\n+    case 180: return UNSPEC_FCMLA180;\n+    case 270: return UNSPEC_FCMLA270;\n+    default: gcc_unreachable ();\n+    }\n+}\n+\n+/* Return the UNSPEC_COND_FCMLA* unspec for rotation amount ROT.  */\n+static int\n+unspec_cond_fcmla (int rot)\n+{\n+  switch (rot)\n+    {\n+    case 0: return UNSPEC_COND_FCMLA;\n+    case 90: return UNSPEC_COND_FCMLA90;\n+    case 180: return UNSPEC_COND_FCMLA180;\n+    case 270: return UNSPEC_COND_FCMLA270;\n+    default: gcc_unreachable ();\n+    }\n+}\n+\n /* Expand a call to svmad, or svmla after reordering its operands.\n    Make _m forms merge with argument MERGE_ARGNO.  */\n static rtx\n@@ -69,6 +111,19 @@ expand_mad (function_expander &e,\n   return e.use_cond_insn (icode, merge_argno);\n }\n \n+/* Expand a call to svmla_lane or svmls_lane using floating-point unspec\n+   UNSPEC.  */\n+static rtx\n+expand_mla_mls_lane (function_expander &e, int unspec)\n+{\n+  /* Put the operands in the normal (fma ...) order, with the accumulator\n+     last.  This fits naturally since that's also the unprinted operand\n+     in the asm output.  */\n+  e.rotate_inputs_left (0, 4);\n+  insn_code icode = code_for_aarch64_lane (unspec, e.vector_mode (0));\n+  return e.use_exact_insn (icode);\n+}\n+\n /* Expand a call to svmsb, or svmls after reordering its operands.\n    Make _m forms merge with argument MERGE_ARGNO.  */\n static rtx\n@@ -172,16 +227,6 @@ class svadr_bhwd_impl : public function_base\n   unsigned int m_shift;\n };\n \n-class svasrd_impl : public function_base\n-{\n-public:\n-  rtx\n-  expand (function_expander &e) const OVERRIDE\n-  {\n-    return e.use_cond_insn (code_for_cond_asrd (e.vector_mode (0)));\n-  }\n-};\n-\n class svbic_impl : public function_base\n {\n public:\n@@ -248,12 +293,14 @@ class svcadd_impl : public function_base\n   expand (function_expander &e) const OVERRIDE\n   {\n     /* Convert the rotation amount into a specific unspec.  */\n-    int rot = INTVAL (e.args[3]);\n-    e.args.ordered_remove (3);\n-    int unspec = (rot == 90 ? UNSPEC_COND_FCADD90\n-\t\t  : rot == 270 ? UNSPEC_COND_FCADD270\n-\t\t  : (gcc_unreachable (), 0));\n-    return e.map_to_unspecs (-1, -1, unspec);\n+    int rot = INTVAL (e.args.pop ());\n+    if (rot == 90)\n+      return e.map_to_unspecs (UNSPEC_CADD90, UNSPEC_CADD90,\n+\t\t\t       UNSPEC_COND_FCADD90);\n+    if (rot == 270)\n+      return e.map_to_unspecs (UNSPEC_CADD270, UNSPEC_CADD270,\n+\t\t\t       UNSPEC_COND_FCADD270);\n+    gcc_unreachable ();\n   }\n };\n \n@@ -288,18 +335,19 @@ class svcmla_impl : public function_base\n   expand (function_expander &e) const OVERRIDE\n   {\n     /* Convert the rotation amount into a specific unspec.  */\n-    int rot = INTVAL (e.args[4]);\n-    e.args.ordered_remove (4);\n-    int unspec = (rot == 0 ? UNSPEC_COND_FCMLA\n-\t\t  : rot == 90 ? UNSPEC_COND_FCMLA90\n-\t\t  : rot == 180 ? UNSPEC_COND_FCMLA180\n-\t\t  : rot == 270 ? UNSPEC_COND_FCMLA270\n-\t\t  : (gcc_unreachable (), 0));\n-\n-    /* Make the operand order the same as the one used by the fma optabs,\n-       with the accumulator last.  */\n-    e.rotate_inputs_left (1, 4);\n-    return e.map_to_unspecs (-1, -1, unspec, 3);\n+    int rot = INTVAL (e.args.pop ());\n+    if (e.type_suffix (0).float_p)\n+      {\n+\t/* Make the operand order the same as the one used by the fma optabs,\n+\t   with the accumulator last.  */\n+\te.rotate_inputs_left (1, 4);\n+\treturn e.map_to_unspecs (-1, -1, unspec_cond_fcmla (rot), 3);\n+      }\n+    else\n+      {\n+\tint cmla = unspec_cmla (rot);\n+\treturn e.map_to_unspecs (cmla, cmla, -1);\n+      }\n   }\n };\n \n@@ -310,19 +358,21 @@ class svcmla_lane_impl : public function_base\n   expand (function_expander &e) const OVERRIDE\n   {\n     /* Convert the rotation amount into a specific unspec.  */\n-    int rot = INTVAL (e.args[4]);\n-    e.args.ordered_remove (4);\n-    int unspec = (rot == 0 ? UNSPEC_FCMLA\n-\t\t  : rot == 90 ? UNSPEC_FCMLA90\n-\t\t  : rot == 180 ? UNSPEC_FCMLA180\n-\t\t  : rot == 270 ? UNSPEC_FCMLA270\n-\t\t  : (gcc_unreachable (), 0));\n-\n-    /* Make the operand order the same as the one used by the fma optabs,\n-       with the accumulator last.  */\n-    e.rotate_inputs_left (0, 4);\n-    insn_code icode = code_for_aarch64_lane (unspec, e.vector_mode (0));\n-    return e.use_exact_insn (icode);\n+    int rot = INTVAL (e.args.pop ());\n+    machine_mode mode = e.vector_mode (0);\n+    if (e.type_suffix (0).float_p)\n+      {\n+\t/* Make the operand order the same as the one used by the fma optabs,\n+\t   with the accumulator last.  */\n+\te.rotate_inputs_left (0, 4);\n+\tinsn_code icode = code_for_aarch64_lane (unspec_fcmla (rot), mode);\n+\treturn e.use_exact_insn (icode);\n+      }\n+    else\n+      {\n+\tinsn_code icode = code_for_aarch64_lane (unspec_cmla (rot), mode);\n+\treturn e.use_exact_insn (icode);\n+      }\n   }\n };\n \n@@ -1376,26 +1426,19 @@ class svmla_impl : public function_base\n   }\n };\n \n-/* Base class for svmla_lane and svmls_lane.  */\n-class svmla_svmls_lane_impl : public function_base\n+class svmla_lane_impl : public function_base\n {\n public:\n-  CONSTEXPR svmla_svmls_lane_impl (int unspec)\n-    : m_unspec (unspec) {}\n-\n   rtx\n   expand (function_expander &e) const OVERRIDE\n   {\n-    /* Put the operands in the normal (fma ...) order, with the accumulator\n-       last.  This fits naturally since that's also the unprinted operand\n-       in the asm output.  */\n-    e.rotate_inputs_left (0, 4);\n-    insn_code icode = code_for_aarch64_lane (m_unspec, e.vector_mode (0));\n-    return e.use_exact_insn (icode);\n+    if (e.type_suffix (0).integer_p)\n+      {\n+\tmachine_mode mode = e.vector_mode (0);\n+\treturn e.use_exact_insn (code_for_aarch64_sve_add_mul_lane (mode));\n+      }\n+    return expand_mla_mls_lane (e, UNSPEC_FMLA);\n   }\n-\n-  /* The unspec code associated with the operation.  */\n-  int m_unspec;\n };\n \n class svmls_impl : public function_base\n@@ -1433,6 +1476,21 @@ class svmov_impl : public function_base\n   }\n };\n \n+class svmls_lane_impl : public function_base\n+{\n+public:\n+  rtx\n+  expand (function_expander &e) const OVERRIDE\n+  {\n+    if (e.type_suffix (0).integer_p)\n+      {\n+\tmachine_mode mode = e.vector_mode (0);\n+\treturn e.use_exact_insn (code_for_aarch64_sve_sub_mul_lane (mode));\n+      }\n+    return expand_mla_mls_lane (e, UNSPEC_FMLS);\n+  }\n+};\n+\n class svmsb_impl : public function_base\n {\n public:\n@@ -2275,12 +2333,11 @@ class svuzp_impl : public binary_permute\n };\n \n /* A function_base for svwhilele and svwhilelt functions.  */\n-class svwhile_impl : public function_base\n+class svwhilelx_impl : public while_comparison\n {\n public:\n-  CONSTEXPR svwhile_impl (int unspec_for_sint, int unspec_for_uint, bool eq_p)\n-    : m_unspec_for_sint (unspec_for_sint),\n-      m_unspec_for_uint (unspec_for_uint), m_eq_p (eq_p)\n+  CONSTEXPR svwhilelx_impl (int unspec_for_sint, int unspec_for_uint, bool eq_p)\n+    : while_comparison (unspec_for_sint, unspec_for_uint), m_eq_p (eq_p)\n   {}\n \n   /* Try to fold a call by treating its arguments as constants of type T.  */\n@@ -2342,24 +2399,6 @@ class svwhile_impl : public function_base\n       return fold_type<poly_int64> (f);\n   }\n \n-  rtx\n-  expand (function_expander &e) const OVERRIDE\n-  {\n-    /* Suffix 0 determines the predicate mode, suffix 1 determines the\n-       scalar mode and signedness.  */\n-    int unspec = (e.type_suffix (1).unsigned_p\n-\t\t  ? m_unspec_for_uint\n-\t\t  : m_unspec_for_sint);\n-    machine_mode pred_mode = e.vector_mode (0);\n-    scalar_mode reg_mode = GET_MODE_INNER (e.vector_mode (1));\n-    return e.use_exact_insn (code_for_while (unspec, reg_mode, pred_mode));\n-  }\n-\n-  /* The unspec codes associated with signed and unsigned operations\n-     respectively.  */\n-  int m_unspec_for_sint;\n-  int m_unspec_for_uint;\n-\n   /* True svwhilele, false for svwhilelt.  */\n   bool m_eq_p;\n };\n@@ -2428,7 +2467,7 @@ FUNCTION (svand, rtx_code_function, (AND, AND))\n FUNCTION (svandv, reduction, (UNSPEC_ANDV))\n FUNCTION (svasr, rtx_code_function, (ASHIFTRT, ASHIFTRT))\n FUNCTION (svasr_wide, shift_wide, (ASHIFTRT, UNSPEC_ASHIFTRT_WIDE))\n-FUNCTION (svasrd, svasrd_impl,)\n+FUNCTION (svasrd, unspec_based_function, (UNSPEC_ASRD, -1, -1))\n FUNCTION (svbic, svbic_impl,)\n FUNCTION (svbrka, svbrk_unary_impl, (UNSPEC_BRKA))\n FUNCTION (svbrkb, svbrk_unary_impl, (UNSPEC_BRKB))\n@@ -2554,9 +2593,9 @@ FUNCTION (svminnm, unspec_based_function, (-1, -1, UNSPEC_COND_FMINNM))\n FUNCTION (svminnmv, reduction, (UNSPEC_FMINNMV))\n FUNCTION (svminv, reduction, (UNSPEC_SMINV, UNSPEC_UMINV, UNSPEC_FMINV))\n FUNCTION (svmla, svmla_impl,)\n-FUNCTION (svmla_lane, svmla_svmls_lane_impl, (UNSPEC_FMLA))\n+FUNCTION (svmla_lane, svmla_lane_impl,)\n FUNCTION (svmls, svmls_impl,)\n-FUNCTION (svmls_lane, svmla_svmls_lane_impl, (UNSPEC_FMLS))\n+FUNCTION (svmls_lane, svmls_lane_impl,)\n FUNCTION (svmov, svmov_impl,)\n FUNCTION (svmsb, svmsb_impl,)\n FUNCTION (svmul, rtx_code_function, (MULT, MULT, UNSPEC_COND_FMUL))\n@@ -2613,7 +2652,7 @@ FUNCTION (svqincw_pat, svqinc_bhwd_impl, (SImode))\n FUNCTION (svqsub, rtx_code_function, (SS_MINUS, US_MINUS, -1))\n FUNCTION (svrbit, unspec_based_function, (UNSPEC_RBIT, UNSPEC_RBIT, -1))\n FUNCTION (svrdffr, svrdffr_impl,)\n-FUNCTION (svrecpe, unspec_based_function, (-1, -1, UNSPEC_FRECPE))\n+FUNCTION (svrecpe, unspec_based_function, (-1, UNSPEC_URECPE, UNSPEC_FRECPE))\n FUNCTION (svrecps, unspec_based_function, (-1, -1, UNSPEC_FRECPS))\n FUNCTION (svrecpx, unspec_based_function, (-1, -1, UNSPEC_COND_FRECPX))\n FUNCTION (svreinterpret, svreinterpret_impl,)\n@@ -2628,7 +2667,7 @@ FUNCTION (svrintn, unspec_based_function, (-1, -1, UNSPEC_COND_FRINTN))\n FUNCTION (svrintp, unspec_based_function, (-1, -1, UNSPEC_COND_FRINTP))\n FUNCTION (svrintx, unspec_based_function, (-1, -1, UNSPEC_COND_FRINTX))\n FUNCTION (svrintz, unspec_based_function, (-1, -1, UNSPEC_COND_FRINTZ))\n-FUNCTION (svrsqrte, unspec_based_function, (-1, -1, UNSPEC_RSQRTE))\n+FUNCTION (svrsqrte, unspec_based_function, (-1, UNSPEC_RSQRTE, UNSPEC_RSQRTE))\n FUNCTION (svrsqrts, unspec_based_function, (-1, -1, UNSPEC_RSQRTS))\n FUNCTION (svscale, unspec_based_function, (-1, -1, UNSPEC_COND_FSCALE))\n FUNCTION (svsel, svsel_impl,)\n@@ -2666,8 +2705,8 @@ FUNCTION (svunpkhi, svunpk_impl, (true))\n FUNCTION (svunpklo, svunpk_impl, (false))\n FUNCTION (svuzp1, svuzp_impl, (0))\n FUNCTION (svuzp2, svuzp_impl, (1))\n-FUNCTION (svwhilele, svwhile_impl, (UNSPEC_WHILELE, UNSPEC_WHILELS, true))\n-FUNCTION (svwhilelt, svwhile_impl, (UNSPEC_WHILELT, UNSPEC_WHILELO, false))\n+FUNCTION (svwhilele, svwhilelx_impl, (UNSPEC_WHILELE, UNSPEC_WHILELS, true))\n+FUNCTION (svwhilelt, svwhilelx_impl, (UNSPEC_WHILELT, UNSPEC_WHILELO, false))\n FUNCTION (svwrffr, svwrffr_impl,)\n FUNCTION (svzip1, svzip_impl, (0))\n FUNCTION (svzip2, svzip_impl, (1))"}, {"sha": "71a3943b1ebd56529f733f69aed529ea795ef258", "filename": "gcc/config/aarch64/aarch64-sve-builtins-functions.h", "status": "modified", "additions": 238, "deletions": 40, "changes": 278, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-functions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-functions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-functions.h?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -173,23 +173,18 @@ class truncating_store : public function_base\n   scalar_int_mode m_to_mode;\n };\n \n-/* A function_base for functions that have an associated rtx code.\n-   It supports all forms of predication except PRED_implicit.  */\n-class rtx_code_function : public function_base\n+/* An incomplete function_base for functions that have an associated rtx code.\n+   It simply records information about the mapping for derived classes\n+   to use.  */\n+class rtx_code_function_base : public function_base\n {\n public:\n-  CONSTEXPR rtx_code_function (rtx_code code_for_sint, rtx_code code_for_uint,\n-\t\t\t       int unspec_for_fp = -1)\n+  CONSTEXPR rtx_code_function_base (rtx_code code_for_sint,\n+\t\t\t\t    rtx_code code_for_uint,\n+\t\t\t\t    int unspec_for_fp = -1)\n     : m_code_for_sint (code_for_sint), m_code_for_uint (code_for_uint),\n       m_unspec_for_fp (unspec_for_fp) {}\n \n-  rtx\n-  expand (function_expander &e) const OVERRIDE\n-  {\n-    return e.map_to_rtx_codes (m_code_for_sint, m_code_for_uint,\n-\t\t\t       m_unspec_for_fp);\n-  }\n-\n   /* The rtx code to use for signed and unsigned integers respectively.\n      Can be UNKNOWN for functions that don't have integer forms.  */\n   rtx_code m_code_for_sint;\n@@ -200,18 +195,34 @@ class rtx_code_function : public function_base\n   int m_unspec_for_fp;\n };\n \n+/* A function_base for functions that have an associated rtx code.\n+   It supports all forms of predication except PRED_implicit.  */\n+class rtx_code_function : public rtx_code_function_base\n+{\n+public:\n+  CONSTEXPR rtx_code_function (rtx_code code_for_sint, rtx_code code_for_uint,\n+\t\t\t       int unspec_for_fp = -1)\n+    : rtx_code_function_base (code_for_sint, code_for_uint, unspec_for_fp) {}\n+\n+  rtx\n+  expand (function_expander &e) const OVERRIDE\n+  {\n+    return e.map_to_rtx_codes (m_code_for_sint, m_code_for_uint,\n+\t\t\t       m_unspec_for_fp);\n+  }\n+};\n+\n /* Like rtx_code_function, but for functions that take what is normally\n    the final argument first.  One use of this class is to handle binary\n    reversed operations; another is to handle MLA-style operations that\n    are normally expressed in GCC as MAD-style operations.  */\n-class rtx_code_function_rotated : public function_base\n+class rtx_code_function_rotated : public rtx_code_function_base\n {\n public:\n   CONSTEXPR rtx_code_function_rotated (rtx_code code_for_sint,\n \t\t\t\t       rtx_code code_for_uint,\n \t\t\t\t       int unspec_for_fp = -1)\n-    : m_code_for_sint (code_for_sint), m_code_for_uint (code_for_uint),\n-      m_unspec_for_fp (unspec_for_fp) {}\n+    : rtx_code_function_base (code_for_sint, code_for_uint, unspec_for_fp) {}\n \n   rtx\n   expand (function_expander &e) const OVERRIDE\n@@ -223,27 +234,48 @@ class rtx_code_function_rotated : public function_base\n     return e.map_to_rtx_codes (m_code_for_sint, m_code_for_uint,\n \t\t\t       m_unspec_for_fp, nargs - 1);\n   }\n+};\n \n-  /* The rtx code to use for signed and unsigned integers respectively.\n-     Can be UNKNOWN for functions that don't have integer forms.  */\n-  rtx_code m_code_for_sint;\n-  rtx_code m_code_for_uint;\n+/* An incomplete function_base for functions that have an associated\n+   unspec code, with separate codes for signed integers, unsigned\n+   integers and floating-point values.  The class simply records\n+   information about the mapping for derived classes to use.  */\n+class unspec_based_function_base : public function_base\n+{\n+public:\n+  CONSTEXPR unspec_based_function_base (int unspec_for_sint,\n+\t\t\t\t\tint unspec_for_uint,\n+\t\t\t\t\tint unspec_for_fp)\n+    : m_unspec_for_sint (unspec_for_sint),\n+      m_unspec_for_uint (unspec_for_uint),\n+      m_unspec_for_fp (unspec_for_fp)\n+  {}\n \n-  /* The UNSPEC_COND_* to use for floating-point operations.  Can be -1\n-     for functions that only operate on integers.  */\n+  /* Return the unspec code to use for INSTANCE, based on type suffix 0.  */\n+  int\n+  unspec_for (const function_instance &instance) const\n+  {\n+    return (!instance.type_suffix (0).integer_p ? m_unspec_for_fp\n+\t    : instance.type_suffix (0).unsigned_p ? m_unspec_for_uint\n+\t    : m_unspec_for_sint);\n+  }\n+\n+  /* The unspec code associated with signed-integer, unsigned-integer\n+     and floating-point operations respectively.  */\n+  int m_unspec_for_sint;\n+  int m_unspec_for_uint;\n   int m_unspec_for_fp;\n };\n \n /* A function_base for functions that have an associated unspec code.\n    It supports all forms of predication except PRED_implicit.  */\n-class unspec_based_function : public function_base\n+class unspec_based_function : public unspec_based_function_base\n {\n public:\n   CONSTEXPR unspec_based_function (int unspec_for_sint, int unspec_for_uint,\n \t\t\t\t   int unspec_for_fp)\n-    : m_unspec_for_sint (unspec_for_sint),\n-      m_unspec_for_uint (unspec_for_uint),\n-      m_unspec_for_fp (unspec_for_fp)\n+    : unspec_based_function_base (unspec_for_sint, unspec_for_uint,\n+\t\t\t\t  unspec_for_fp)\n   {}\n \n   rtx\n@@ -252,27 +284,20 @@ class unspec_based_function : public function_base\n     return e.map_to_unspecs (m_unspec_for_sint, m_unspec_for_uint,\n \t\t\t     m_unspec_for_fp);\n   }\n-\n-  /* The unspec code associated with signed-integer, unsigned-integer\n-     and floating-point operations respectively.  */\n-  int m_unspec_for_sint;\n-  int m_unspec_for_uint;\n-  int m_unspec_for_fp;\n };\n \n /* Like unspec_based_function, but for functions that take what is normally\n    the final argument first.  One use of this class is to handle binary\n    reversed operations; another is to handle MLA-style operations that\n    are normally expressed in GCC as MAD-style operations.  */\n-class unspec_based_function_rotated : public function_base\n+class unspec_based_function_rotated : public unspec_based_function_base\n {\n public:\n   CONSTEXPR unspec_based_function_rotated (int unspec_for_sint,\n \t\t\t\t\t   int unspec_for_uint,\n \t\t\t\t\t   int unspec_for_fp)\n-    : m_unspec_for_sint (unspec_for_sint),\n-      m_unspec_for_uint (unspec_for_uint),\n-      m_unspec_for_fp (unspec_for_fp)\n+    : unspec_based_function_base (unspec_for_sint, unspec_for_uint,\n+\t\t\t\t  unspec_for_fp)\n   {}\n \n   rtx\n@@ -285,13 +310,138 @@ class unspec_based_function_rotated : public function_base\n     return e.map_to_unspecs (m_unspec_for_sint, m_unspec_for_uint,\n \t\t\t     m_unspec_for_fp, nargs - 1);\n   }\n+};\n \n-  /* The unspec code associated with signed-integer, unsigned-integer\n-     and floating-point operations respectively.  */\n-  int m_unspec_for_sint;\n-  int m_unspec_for_uint;\n-  int m_unspec_for_fp;\n+/* Like unspec_based_function, but map the function directly to\n+   CODE (UNSPEC, M) instead of using the generic predication-based\n+   expansion. where M is the vector mode associated with type suffix 0.\n+   This is useful if the unspec doesn't describe the full operation or\n+   if the usual predication rules don't apply for some reason.  */\n+template<insn_code (*CODE) (int, machine_mode)>\n+class unspec_based_function_exact_insn : public unspec_based_function_base\n+{\n+public:\n+  CONSTEXPR unspec_based_function_exact_insn (int unspec_for_sint,\n+\t\t\t\t\t      int unspec_for_uint,\n+\t\t\t\t\t      int unspec_for_fp)\n+    : unspec_based_function_base (unspec_for_sint, unspec_for_uint,\n+\t\t\t\t  unspec_for_fp)\n+  {}\n+\n+  rtx\n+  expand (function_expander &e) const OVERRIDE\n+  {\n+    return e.use_exact_insn (CODE (unspec_for (e), e.vector_mode (0)));\n+  }\n+};\n+\n+/* A function that performs an unspec and then adds it to another value.  */\n+typedef unspec_based_function_exact_insn<code_for_aarch64_sve_add>\n+  unspec_based_add_function;\n+typedef unspec_based_function_exact_insn<code_for_aarch64_sve_add_lane>\n+  unspec_based_add_lane_function;\n+\n+/* Generic unspec-based _lane function.  */\n+typedef unspec_based_function_exact_insn<code_for_aarch64_sve_lane>\n+  unspec_based_lane_function;\n+\n+/* A functon that uses aarch64_pred* patterns regardless of the\n+   predication type.  */\n+typedef unspec_based_function_exact_insn<code_for_aarch64_pred>\n+  unspec_based_pred_function;\n+\n+/* Like unspec_based_add_function and unspec_based_add_lane_function,\n+   but using saturating addition.  */\n+typedef unspec_based_function_exact_insn<code_for_aarch64_sve_qadd>\n+  unspec_based_qadd_function;\n+typedef unspec_based_function_exact_insn<code_for_aarch64_sve_qadd_lane>\n+  unspec_based_qadd_lane_function;\n+\n+/* Like unspec_based_sub_function and unspec_based_sub_lane_function,\n+   but using saturating subtraction.  */\n+typedef unspec_based_function_exact_insn<code_for_aarch64_sve_qsub>\n+  unspec_based_qsub_function;\n+typedef unspec_based_function_exact_insn<code_for_aarch64_sve_qsub_lane>\n+  unspec_based_qsub_lane_function;\n+\n+/* A function that performs an unspec and then subtracts it from\n+   another value.  */\n+typedef unspec_based_function_exact_insn<code_for_aarch64_sve_sub>\n+  unspec_based_sub_function;\n+typedef unspec_based_function_exact_insn<code_for_aarch64_sve_sub_lane>\n+  unspec_based_sub_lane_function;\n+\n+/* A function that acts like unspec_based_function_exact_insn<INT_CODE>\n+   when operating on integers, but that expands to an (fma ...)-style\n+   aarch64_sve* operation when applied to floats.  */\n+template<insn_code (*INT_CODE) (int, machine_mode)>\n+class unspec_based_fused_function : public unspec_based_function_base\n+{\n+public:\n+  CONSTEXPR unspec_based_fused_function (int unspec_for_sint,\n+\t\t\t\t\t int unspec_for_uint,\n+\t\t\t\t\t int unspec_for_fp)\n+    : unspec_based_function_base (unspec_for_sint, unspec_for_uint,\n+\t\t\t\t  unspec_for_fp)\n+  {}\n+\n+  rtx\n+  expand (function_expander &e) const OVERRIDE\n+  {\n+    int unspec = unspec_for (e);\n+    insn_code icode;\n+    if (e.type_suffix (0).float_p)\n+      {\n+\t/* Put the operands in the normal (fma ...) order, with the accumulator\n+\t   last.  This fits naturally since that's also the unprinted operand\n+\t   in the asm output.  */\n+\te.rotate_inputs_left (0, e.pred != PRED_none ? 4 : 3);\n+\ticode = code_for_aarch64_sve (unspec, e.vector_mode (0));\n+      }\n+    else\n+      icode = INT_CODE (unspec, e.vector_mode (0));\n+    return e.use_exact_insn (icode);\n+  }\n+};\n+typedef unspec_based_fused_function<code_for_aarch64_sve_add>\n+  unspec_based_mla_function;\n+typedef unspec_based_fused_function<code_for_aarch64_sve_sub>\n+  unspec_based_mls_function;\n+\n+/* Like unspec_based_fused_function, but for _lane functions.  */\n+template<insn_code (*INT_CODE) (int, machine_mode)>\n+class unspec_based_fused_lane_function : public unspec_based_function_base\n+{\n+public:\n+  CONSTEXPR unspec_based_fused_lane_function (int unspec_for_sint,\n+\t\t\t\t\t      int unspec_for_uint,\n+\t\t\t\t\t      int unspec_for_fp)\n+    : unspec_based_function_base (unspec_for_sint, unspec_for_uint,\n+\t\t\t\t  unspec_for_fp)\n+  {}\n+\n+  rtx\n+  expand (function_expander &e) const OVERRIDE\n+  {\n+    int unspec = unspec_for (e);\n+    insn_code icode;\n+    if (e.type_suffix (0).float_p)\n+      {\n+\t/* Put the operands in the normal (fma ...) order, with the accumulator\n+\t   last.  This fits naturally since that's also the unprinted operand\n+\t   in the asm output.  */\n+\te.rotate_inputs_left (0, e.pred != PRED_none ? 5 : 4);\n+\ticode = code_for_aarch64_lane (unspec, e.vector_mode (0));\n+      }\n+    else\n+      icode = INT_CODE (unspec, e.vector_mode (0));\n+    return e.use_exact_insn (icode);\n+  }\n };\n+typedef unspec_based_fused_lane_function<code_for_aarch64_sve_add_lane>\n+  unspec_based_mla_lane_function;\n+typedef unspec_based_fused_lane_function<code_for_aarch64_sve_sub_lane>\n+  unspec_based_mls_lane_function;\n \n /* A function_base that uses CODE_FOR_MODE (M) to get the associated\n    instruction code, where M is the vector mode associated with type\n@@ -311,11 +461,31 @@ class code_for_mode_function : public function_base\n    mode associated with the first type suffix.  */\n #define CODE_FOR_MODE0(PATTERN) code_for_mode_function<code_for_##PATTERN, 0>\n \n+/* Likewise for the second type suffix.  */\n+#define CODE_FOR_MODE1(PATTERN) code_for_mode_function<code_for_##PATTERN, 1>\n+\n /* Like CODE_FOR_MODE0, but the function doesn't raise exceptions when\n    operating on floating-point data.  */\n #define QUIET_CODE_FOR_MODE0(PATTERN) \\\n   quiet< code_for_mode_function<code_for_##PATTERN, 0> >\n \n+/* A function_base for functions that always expand to a fixed insn pattern,\n+   regardless of what the suffixes are.  */\n+class fixed_insn_function : public function_base\n+{\n+public:\n+  CONSTEXPR fixed_insn_function (insn_code code) : m_code (code) {}\n+\n+  rtx\n+  expand (function_expander &e) const OVERRIDE\n+  {\n+    return e.use_exact_insn (m_code);\n+  }\n+\n+  /* The instruction to use.  */\n+  insn_code m_code;\n+};\n+\n /* A function_base for functions that permute their arguments.  */\n class permute : public quiet<function_base>\n {\n@@ -456,6 +626,34 @@ class unary_count : public quiet<function_base>\n   rtx_code m_code;\n };\n \n+/* A function_base for svwhile* functions.  */\n+class while_comparison : public function_base\n+{\n+public:\n+  CONSTEXPR while_comparison (int unspec_for_sint, int unspec_for_uint)\n+    : m_unspec_for_sint (unspec_for_sint),\n+      m_unspec_for_uint (unspec_for_uint)\n+  {}\n+\n+  rtx\n+  expand (function_expander &e) const OVERRIDE\n+  {\n+    /* Suffix 0 determines the predicate mode, suffix 1 determines the\n+       scalar mode and signedness.  */\n+    int unspec = (e.type_suffix (1).unsigned_p\n+\t\t  ? m_unspec_for_uint\n+\t\t  : m_unspec_for_sint);\n+    machine_mode pred_mode = e.vector_mode (0);\n+    scalar_mode reg_mode = GET_MODE_INNER (e.vector_mode (1));\n+    return e.use_exact_insn (code_for_while (unspec, reg_mode, pred_mode));\n+  }\n+\n+  /* The unspec codes associated with signed and unsigned operations\n+     respectively.  */\n+  int m_unspec_for_sint;\n+  int m_unspec_for_uint;\n+};\n+\n }\n \n /* Declare the global function base NAME, creating it from an instance"}, {"sha": "b047abf0d65ee4e908402631fedb1fadad9666de", "filename": "gcc/config/aarch64/aarch64-sve-builtins-shapes.cc", "status": "modified", "additions": 1044, "deletions": 70, "changes": 1114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-shapes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-shapes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-shapes.cc?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -63,8 +63,11 @@ apply_predication (const function_instance &instance, tree return_type,\n     {\n       argument_types.quick_insert (0, get_svbool_t ());\n       /* For unary merge operations, the first argument is a vector with\n-\t the same type as the result.  */\n-      if (argument_types.length () == 2 && instance.pred == PRED_m)\n+\t the same type as the result.  For unary_convert_narrowt it also\n+\t provides the \"bottom\" half of active elements, and is present\n+\t for all types of predication.  */\n+      if ((argument_types.length () == 2 && instance.pred == PRED_m)\n+\t  || instance.shape == shapes::unary_convert_narrowt)\n \targument_types.quick_insert (0, return_type);\n     }\n }\n@@ -286,13 +289,17 @@ build_one (function_builder &b, const char *signature,\n \t\t\t group.required_extensions, force_direct_overloads);\n }\n \n-/* Add a function instance for every type and predicate combination\n-   in GROUP, which describes some sort of gather or scatter operation.\n-   If the function has any type suffixes (as for loads and stores),\n-   the first function type suffix specifies either a 32-bit or a 64-bit\n-   type; use MODE32 for the former and MODE64 for the latter.  If the\n-   function has no type suffixes (as for prefetches), add one MODE32 form\n-   and one MODE64 form for each predication type.\n+/* GROUP describes some sort of gather or scatter operation.  There are\n+   two cases:\n+\n+   - If the function has any type suffixes (as for loads and stores), the\n+     first function type suffix specifies either a 32-bit or a 64-bit type,\n+     which in turn selects either MODE32 or MODE64 as the addressing mode.\n+     Add a function instance for every type and predicate combination\n+     in GROUP for which the associated addressing mode is not MODE_none.\n+\n+   - If the function has no type suffixes (as for prefetches), add one\n+     MODE32 form and one MODE64 form for each predication type.\n \n    The other arguments are as for build_all.  */\n static void\n@@ -303,6 +310,7 @@ build_32_64 (function_builder &b, const char *signature,\n   for (unsigned int pi = 0; group.preds[pi] != NUM_PREDS; ++pi)\n     if (group.types[0][0] == NUM_TYPE_SUFFIXES)\n       {\n+\tgcc_assert (mode32 != MODE_none && mode64 != MODE_none);\n \tbuild_one (b, signature, group, mode32, 0, pi,\n \t\t   force_direct_overloads);\n \tbuild_one (b, signature, group, mode64, 0, pi,\n@@ -314,8 +322,9 @@ build_32_64 (function_builder &b, const char *signature,\n \t  unsigned int bits = type_suffixes[group.types[ti][0]].element_bits;\n \t  gcc_assert (bits == 32 || bits == 64);\n \t  mode_suffix_index mode = bits == 32 ? mode32 : mode64;\n-\t  build_one (b, signature, group, mode, ti, pi,\n-\t\t     force_direct_overloads);\n+\t  if (mode != MODE_none)\n+\t    build_one (b, signature, group, mode, ti, pi,\n+\t\t       force_direct_overloads);\n \t}\n }\n \n@@ -332,6 +341,15 @@ build_sv_index (function_builder &b, const char *signature,\n   build_32_64 (b, signature, group, MODE_u32index, MODE_u64index);\n }\n \n+/* Like build_sv_index, but only handle 64-bit types.  */\n+static void\n+build_sv_index64 (function_builder &b, const char *signature,\n+\t\t  const function_group_info &group)\n+{\n+  build_32_64 (b, signature, group, MODE_none, MODE_s64index);\n+  build_32_64 (b, signature, group, MODE_none, MODE_u64index);\n+}\n+\n /* Like build_sv_index, but taking vector byte offsets instead of vector\n    array indices.  */\n static void\n@@ -342,6 +360,16 @@ build_sv_offset (function_builder &b, const char *signature,\n   build_32_64 (b, signature, group, MODE_u32offset, MODE_u64offset);\n }\n \n+/* Like build_sv_offset, but exclude offsets that must be interpreted\n+   as signed (i.e. s32offset).  */\n+static void\n+build_sv_uint_offset (function_builder &b, const char *signature,\n+\t\t      const function_group_info &group)\n+{\n+  build_32_64 (b, signature, group, MODE_none, MODE_s64offset);\n+  build_32_64 (b, signature, group, MODE_u32offset, MODE_u64offset);\n+}\n+\n /* For every type and predicate combination in GROUP, add a function\n    that takes a vector base address and no displacement.  The vector\n    base has the same element size as the first type suffix.\n@@ -397,6 +425,21 @@ build_all (function_builder &b, const char *signature,\n \t\t force_direct_overloads);\n }\n \n+/* TYPE is the largest type suffix associated with the arguments of R,\n+   but the result is twice as wide.  Return the associated type suffix\n+   if it exists, otherwise report an appropriate error and return\n+   NUM_TYPE_SUFFIXES.  */\n+static type_suffix_index\n+long_type_suffix (function_resolver &r, type_suffix_index type)\n+{\n+  unsigned int element_bits = type_suffixes[type].element_bits;\n+  if (type_suffixes[type].integer_p && element_bits < 64)\n+    return find_type_suffix (type_suffixes[type].tclass, element_bits * 2);\n+\n+  r.report_no_such_form (type);\n+  return NUM_TYPE_SUFFIXES;\n+}\n+\n /* Declare the function shape NAME, pointing it to an instance\n    of class <NAME>_def.  */\n #define SHAPE(NAME) \\\n@@ -449,6 +492,94 @@ struct adr_base : public overloaded_base<0>\n   };\n };\n \n+/* Base class for narrowing bottom binary functions that take an\n+   immediate second operand.  The result is half the size of input\n+   and has class CLASS.  */\n+template<type_class_index CLASS = function_resolver::SAME_TYPE_CLASS>\n+struct binary_imm_narrowb_base : public overloaded_base<0>\n+{\n+  void\n+  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  {\n+    b.add_overloaded_functions (group, MODE_n);\n+    STATIC_ASSERT (CLASS == function_resolver::SAME_TYPE_CLASS\n+\t\t   || CLASS == TYPE_unsigned);\n+    if (CLASS == TYPE_unsigned)\n+      build_all (b, \"vhu0,v0,su64\", group, MODE_n);\n+    else\n+      build_all (b, \"vh0,v0,su64\", group, MODE_n);\n+  }\n+\n+  tree\n+  resolve (function_resolver &r) const OVERRIDE\n+  {\n+    return r.resolve_uniform (1, 1);\n+  }\n+};\n+\n+/* The top equivalent of binary_imm_narrowb_base.  It takes three arguments,\n+   with the first being the values of the even elements, which are typically\n+   the result of the narrowb operation.  */\n+template<type_class_index CLASS = function_resolver::SAME_TYPE_CLASS>\n+struct binary_imm_narrowt_base : public overloaded_base<0>\n+{\n+  void\n+  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  {\n+    b.add_overloaded_functions (group, MODE_n);\n+    STATIC_ASSERT (CLASS == function_resolver::SAME_TYPE_CLASS\n+\t\t   || CLASS == TYPE_unsigned);\n+    if (CLASS == TYPE_unsigned)\n+      build_all (b, \"vhu0,vhu0,v0,su64\", group, MODE_n);\n+    else\n+      build_all (b, \"vh0,vh0,v0,su64\", group, MODE_n);\n+  }\n+\n+  tree\n+  resolve (function_resolver &r) const OVERRIDE\n+  {\n+    unsigned int i, nargs;\n+    type_suffix_index type;\n+    if (!r.check_gp_argument (3, i, nargs)\n+\t|| (type = r.infer_vector_type (i + 1)) == NUM_TYPE_SUFFIXES\n+\t|| !r.require_derived_vector_type (i, i + 1, type, CLASS, r.HALF_SIZE)\n+\t|| !r.require_integer_immediate (i + 2))\n+      return error_mark_node;\n+\n+    return r.resolve_to (r.mode_suffix_id, type);\n+  }\n+};\n+\n+/* Base class for long (i.e. narrow op narrow -> wide) binary functions\n+   that take an immediate second operand.  The type suffix specifies\n+   the wider type.  */\n+struct binary_imm_long_base : public overloaded_base<0>\n+{\n+  void\n+  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  {\n+    b.add_overloaded_functions (group, MODE_n);\n+    build_all (b, \"v0,vh0,su64\", group, MODE_n);\n+  }\n+\n+  tree\n+  resolve (function_resolver &r) const OVERRIDE\n+  {\n+    unsigned int i, nargs;\n+    type_suffix_index type, result_type;\n+    if (!r.check_gp_argument (2, i, nargs)\n+\t|| (type = r.infer_vector_type (i)) == NUM_TYPE_SUFFIXES\n+\t|| !r.require_integer_immediate (i + 1)\n+\t|| (result_type = long_type_suffix (r, type)) == NUM_TYPE_SUFFIXES)\n+      return error_mark_node;\n+\n+    if (tree res = r.lookup_form (r.mode_suffix_id, result_type))\n+      return res;\n+\n+    return r.report_no_such_form (type);\n+  }\n+};\n+\n /* Base class for inc_dec and inc_dec_pat.  */\n struct inc_dec_base : public overloaded_base<0>\n {\n@@ -518,6 +649,26 @@ struct load_contiguous_base : public overloaded_base<0>\n   }\n };\n \n+/* Base class for gather loads that take a scalar base and a vector\n+   displacement (either an offset or an index).  */\n+struct load_gather_sv_base : public overloaded_base<0>\n+{\n+  tree\n+  resolve (function_resolver &r) const OVERRIDE\n+  {\n+    unsigned int i, nargs;\n+    mode_suffix_index mode;\n+    type_suffix_index type;\n+    if (!r.check_gp_argument (2, i, nargs)\n+\t|| (type = r.infer_pointer_type (i, true)) == NUM_TYPE_SUFFIXES\n+\t|| (mode = r.resolve_sv_displacement (i + 1, type, true),\n+\t    mode == MODE_none))\n+      return error_mark_node;\n+\n+    return r.resolve_to (mode, type);\n+  }\n+};\n+\n /* Base class for load_ext_gather_index and load_ext_gather_offset,\n    which differ only in the units of the displacement.  */\n struct load_ext_gather_base : public overloaded_base<1>\n@@ -578,6 +729,19 @@ struct prefetch_gather_base : public overloaded_base<0>\n   }\n };\n \n+/* Wraps BASE to provide a narrowing shift right function.  Argument N\n+   is an immediate shift amount in the range [1, sizeof(<t0>_t) * 4].  */\n+template<typename BASE, unsigned int N>\n+struct shift_right_imm_narrow_wrapper : public BASE\n+{\n+  bool\n+  check (function_checker &c) const OVERRIDE\n+  {\n+    unsigned int bits = c.type_suffix (0).element_bits / 2;\n+    return c.require_immediate_range (N, 1, bits);\n+  }\n+};\n+\n /* Base class for store_scatter_index and store_scatter_offset,\n    which differ only in the units of the displacement.  */\n struct store_scatter_base : public overloaded_base<0>\n@@ -607,6 +771,128 @@ struct store_scatter_base : public overloaded_base<0>\n   }\n };\n \n+/* Base class for ternary operations in which the final argument is an\n+   immediate shift amount.  The derived class should check the range.  */\n+struct ternary_shift_imm_base : public overloaded_base<0>\n+{\n+  void\n+  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  {\n+    b.add_overloaded_functions (group, MODE_n);\n+    build_all (b, \"v0,v0,v0,su64\", group, MODE_n);\n+  }\n+\n+  tree\n+  resolve (function_resolver &r) const OVERRIDE\n+  {\n+    return r.resolve_uniform (2, 1);\n+  }\n+};\n+\n+/* Base class for ternary operations in which the first argument has the\n+   same element type as the result, and in which the second and third\n+   arguments have an element type that is derived the first.  MODIFIER\n+   is the number of element bits in the second and third arguments,\n+   or a function_resolver modifier that says how this precision is\n+   derived from the first argument's elements.  */\n+template<unsigned int MODIFIER>\n+struct ternary_resize2_opt_n_base : public overloaded_base<0>\n+{\n+  tree\n+  resolve (function_resolver &r) const OVERRIDE\n+  {\n+    unsigned int i, nargs;\n+    type_suffix_index type;\n+    if (!r.check_gp_argument (3, i, nargs)\n+\t|| (type = r.infer_vector_type (i)) == NUM_TYPE_SUFFIXES\n+\t|| !r.require_derived_vector_type (i + 1, i, type, r.SAME_TYPE_CLASS,\n+\t\t\t\t\t   MODIFIER))\n+      return error_mark_node;\n+\n+    return r.finish_opt_n_resolution (i + 2, i, type, r.SAME_TYPE_CLASS,\n+\t\t\t\t      MODIFIER);\n+  }\n+};\n+\n+/* Like ternary_resize2_opt_n_base, but for functions that take a final\n+   lane argument.  */\n+template<unsigned int MODIFIER>\n+struct ternary_resize2_lane_base : public overloaded_base<0>\n+{\n+  tree\n+  resolve (function_resolver &r) const OVERRIDE\n+  {\n+    unsigned int i, nargs;\n+    type_suffix_index type;\n+    if (!r.check_gp_argument (4, i, nargs)\n+\t|| (type = r.infer_vector_type (i)) == NUM_TYPE_SUFFIXES\n+\t|| !r.require_derived_vector_type (i + 1, i, type, r.SAME_TYPE_CLASS,\n+\t\t\t\t\t   MODIFIER)\n+\t|| !r.require_derived_vector_type (i + 2, i, type, r.SAME_TYPE_CLASS,\n+\t\t\t\t\t   MODIFIER)\n+\t|| !r.require_integer_immediate (i + 3))\n+      return error_mark_node;\n+\n+    return r.resolve_to (r.mode_suffix_id, type);\n+  }\n+};\n+\n+/* Base class for narrowing bottom unary functions.  The result is half\n+   the size of input and has class CLASS.  */\n+template<type_class_index CLASS = function_resolver::SAME_TYPE_CLASS>\n+struct unary_narrowb_base : public overloaded_base<0>\n+{\n+  void\n+  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  {\n+    b.add_overloaded_functions (group, MODE_none);\n+    STATIC_ASSERT (CLASS == function_resolver::SAME_TYPE_CLASS\n+\t\t   || CLASS == TYPE_unsigned);\n+    if (CLASS == TYPE_unsigned)\n+      build_all (b, \"vhu0,v0\", group, MODE_none);\n+    else\n+      build_all (b, \"vh0,v0\", group, MODE_none);\n+  }\n+\n+  tree\n+  resolve (function_resolver &r) const OVERRIDE\n+  {\n+    return r.resolve_unary (CLASS, r.HALF_SIZE);\n+  }\n+};\n+\n+/* The top equivalent of unary_imm_narrowb_base.  All forms take the values\n+   of the even elements as an extra argument, before any governing predicate.\n+   These even elements are typically the result of the narrowb operation.  */\n+template<type_class_index CLASS = function_resolver::SAME_TYPE_CLASS>\n+struct unary_narrowt_base : public overloaded_base<0>\n+{\n+  void\n+  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  {\n+    b.add_overloaded_functions (group, MODE_none);\n+    STATIC_ASSERT (CLASS == function_resolver::SAME_TYPE_CLASS\n+\t\t   || CLASS == TYPE_unsigned);\n+    if (CLASS == TYPE_unsigned)\n+      build_all (b, \"vhu0,vhu0,v0\", group, MODE_none);\n+    else\n+      build_all (b, \"vh0,vh0,v0\", group, MODE_none);\n+  }\n+\n+  tree\n+  resolve (function_resolver &r) const OVERRIDE\n+  {\n+    unsigned int i, nargs;\n+    type_suffix_index type;\n+    if (!r.check_gp_argument (2, i, nargs)\n+\t|| (type = r.infer_vector_type (i + 1)) == NUM_TYPE_SUFFIXES\n+\t|| !r.require_derived_vector_type (i, i + 1, type, CLASS, r.HALF_SIZE))\n+      return error_mark_node;\n+\n+    return r.resolve_to (r.mode_suffix_id, type);\n+  }\n+};\n+\n /* sv<m0>_t svfoo[_m0base]_[m1]index(sv<m0>_t, sv<m1>_t)\n \n    for all valid combinations of vector base type <m0> and vector\n@@ -719,6 +1005,73 @@ struct binary_lane_def : public overloaded_base<0>\n };\n SHAPE (binary_lane)\n \n+/* sv<t0>_t svfoo[_t0](sv<t0:half>_t, sv<t0:half>_t, uint64_t).\n+\n+   where the final argument is an integer constant expression in the\n+   range [0, 32 / sizeof (<t0>_t) - 1].  */\n+struct binary_long_lane_def : public overloaded_base<0>\n+{\n+  void\n+  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  {\n+    b.add_overloaded_functions (group, MODE_none);\n+    build_all (b, \"v0,vh0,vh0,su64\", group, MODE_none);\n+  }\n+\n+  tree\n+  resolve (function_resolver &r) const OVERRIDE\n+  {\n+    unsigned int i, nargs;\n+    type_suffix_index type, result_type;\n+    if (!r.check_gp_argument (3, i, nargs)\n+\t|| (type = r.infer_vector_type (i)) == NUM_TYPE_SUFFIXES\n+\t|| !r.require_matching_vector_type (i + 1, type)\n+\t|| !r.require_integer_immediate (i + 2)\n+\t|| (result_type = long_type_suffix (r, type)) == NUM_TYPE_SUFFIXES)\n+      return error_mark_node;\n+\n+    if (tree res = r.lookup_form (r.mode_suffix_id, result_type))\n+      return res;\n+\n+    return r.report_no_such_form (type);\n+  }\n+\n+  bool\n+  check (function_checker &c) const OVERRIDE\n+  {\n+    return c.require_immediate_lane_index (2);\n+  }\n+};\n+SHAPE (binary_long_lane)\n+\n+/* sv<t0>_t svfoo[_t0](sv<t0:half>_t, sv<t0:half>_t)\n+   sv<t0>_t svfoo[_n_t0](sv<t0:half>_t, <t0:half>_t).  */\n+struct binary_long_opt_n_def : public overloaded_base<0>\n+{\n+  void\n+  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  {\n+    b.add_overloaded_functions (group, MODE_none);\n+    build_all (b, \"v0,vh0,vh0\", group, MODE_none);\n+    build_all (b, \"v0,vh0,sh0\", group, MODE_n);\n+  }\n+\n+  tree\n+  resolve (function_resolver &r) const OVERRIDE\n+  {\n+    unsigned int i, nargs;\n+    type_suffix_index type, result_type;\n+    if (!r.check_gp_argument (2, i, nargs)\n+\t|| (type = r.infer_vector_type (i)) == NUM_TYPE_SUFFIXES\n+\t|| (result_type = long_type_suffix (r, type)) == NUM_TYPE_SUFFIXES)\n+      return error_mark_node;\n+\n+    return r.finish_opt_n_resolution (i + 1, i, type, r.SAME_TYPE_CLASS,\n+\t\t\t\t      r.SAME_SIZE, result_type);\n+  }\n+};\n+SHAPE (binary_long_opt_n)\n+\n /* sv<t0>_t svfoo[_n_t0](sv<t0>_t, <t0>_t).\n \n    i.e. a binary operation in which the final argument is always a scalar\n@@ -747,25 +1100,19 @@ struct binary_n_def : public overloaded_base<0>\n };\n SHAPE (binary_n)\n \n-/* sv<t0>_t svfoo[_t0](sv<t0>_t, sv<t0>_t)\n-   sv<t0>_t svfoo[_n_t0](sv<t0>_t, <t0>_t)\n+/* sv<t0:half>_t svfoo[_t0](sv<t0>_t, sv<t0>_t)\n+   sv<t0:half>_t svfoo[_n_t0](sv<t0>_t, <t0>_t)\n \n-   i.e. the standard shape for binary operations that operate on\n-   uniform types.  */\n-struct binary_opt_n_def : public overloaded_base<0>\n+   i.e. a version of binary_opt_n in which the output elements are half the\n+   width of the input elements.  */\n+struct binary_narrowb_opt_n_def : public overloaded_base<0>\n {\n   void\n   build (function_builder &b, const function_group_info &group) const OVERRIDE\n   {\n     b.add_overloaded_functions (group, MODE_none);\n-    build_all (b, \"v0,v0,v0\", group, MODE_none);\n-    /* _b functions do not have an _n form, but are classified as\n-       binary_opt_n so that they can be overloaded with vector\n-       functions.  */\n-    if (group.types[0][0] == TYPE_SUFFIX_b)\n-      gcc_assert (group.types[0][1] == NUM_TYPE_SUFFIXES);\n-    else\n-      build_all (b, \"v0,v0,s0\", group, MODE_n);\n+    build_all (b, \"vh0,v0,v0\", group, MODE_none);\n+    build_all (b, \"vh0,v0,s0\", group, MODE_n);\n   }\n \n   tree\n@@ -774,38 +1121,97 @@ struct binary_opt_n_def : public overloaded_base<0>\n     return r.resolve_uniform_opt_n (2);\n   }\n };\n-SHAPE (binary_opt_n)\n-\n-/* svbool_t svfoo(svbool_t, svbool_t).  */\n-struct binary_pred_def : public nonoverloaded_base\n-{\n-  void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n-  {\n-    build_all (b, \"v0,v0,v0\", group, MODE_none);\n-  }\n-};\n-SHAPE (binary_pred)\n+SHAPE (binary_narrowb_opt_n)\n \n-/* sv<t0>_t svfoo[_<t0>](sv<t0>_t, sv<t0>_t, uint64_t)\n+/* sv<t0:half>_t svfoo[_t0](sv<t0:half>_t, sv<t0>_t, sv<t0>_t)\n+   sv<t0:half>_t svfoo[_n_t0](sv<t0:half>_t, sv<t0>_t, <t0>_t)\n \n-   where the final argument must be 90 or 270.  */\n-struct binary_rotate_def : public overloaded_base<0>\n+   This is the \"top\" counterpart to binary_narrowb_opt_n.  */\n+struct binary_narrowt_opt_n_def : public overloaded_base<0>\n {\n   void\n   build (function_builder &b, const function_group_info &group) const OVERRIDE\n   {\n     b.add_overloaded_functions (group, MODE_none);\n-    build_all (b, \"v0,v0,v0,su64\", group, MODE_none);\n+    build_all (b, \"vh0,vh0,v0,v0\", group, MODE_none);\n+    build_all (b, \"vh0,vh0,v0,s0\", group, MODE_n);\n   }\n \n   tree\n   resolve (function_resolver &r) const OVERRIDE\n   {\n-    return r.resolve_uniform (2, 1);\n-  }\n-\n-  bool\n+    unsigned int i, nargs;\n+    type_suffix_index type;\n+    if (!r.check_gp_argument (3, i, nargs)\n+\t|| (type = r.infer_vector_type (i + 1)) == NUM_TYPE_SUFFIXES\n+\t|| !r.require_derived_vector_type (i, i + 1, type, r.SAME_TYPE_CLASS,\n+\t\t\t\t\t   r.HALF_SIZE))\n+      return error_mark_node;\n+\n+    return r.finish_opt_n_resolution (i + 2, i + 1, type);\n+  }\n+};\n+SHAPE (binary_narrowt_opt_n)\n+\n+/* sv<t0>_t svfoo[_t0](sv<t0>_t, sv<t0>_t)\n+   sv<t0>_t svfoo[_n_t0](sv<t0>_t, <t0>_t)\n+\n+   i.e. the standard shape for binary operations that operate on\n+   uniform types.  */\n+struct binary_opt_n_def : public overloaded_base<0>\n+{\n+  void\n+  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  {\n+    b.add_overloaded_functions (group, MODE_none);\n+    build_all (b, \"v0,v0,v0\", group, MODE_none);\n+    /* _b functions do not have an _n form, but are classified as\n+       binary_opt_n so that they can be overloaded with vector\n+       functions.  */\n+    if (group.types[0][0] == TYPE_SUFFIX_b)\n+      gcc_assert (group.types[0][1] == NUM_TYPE_SUFFIXES);\n+    else\n+      build_all (b, \"v0,v0,s0\", group, MODE_n);\n+  }\n+\n+  tree\n+  resolve (function_resolver &r) const OVERRIDE\n+  {\n+    return r.resolve_uniform_opt_n (2);\n+  }\n+};\n+SHAPE (binary_opt_n)\n+\n+/* svbool_t svfoo(svbool_t, svbool_t).  */\n+struct binary_pred_def : public nonoverloaded_base\n+{\n+  void\n+  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  {\n+    build_all (b, \"v0,v0,v0\", group, MODE_none);\n+  }\n+};\n+SHAPE (binary_pred)\n+\n+/* sv<t0>_t svfoo[_<t0>](sv<t0>_t, sv<t0>_t, uint64_t)\n+\n+   where the final argument must be 90 or 270.  */\n+struct binary_rotate_def : public overloaded_base<0>\n+{\n+  void\n+  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  {\n+    b.add_overloaded_functions (group, MODE_none);\n+    build_all (b, \"v0,v0,v0,su64\", group, MODE_none);\n+  }\n+\n+  tree\n+  resolve (function_resolver &r) const OVERRIDE\n+  {\n+    return r.resolve_uniform (2, 1);\n+  }\n+\n+  bool\n   check (function_checker &c) const OVERRIDE\n   {\n     return c.require_immediate_either_or (2, 90, 270);\n@@ -827,6 +1233,26 @@ struct binary_scalar_def : public nonoverloaded_base\n };\n SHAPE (binary_scalar)\n \n+/* sv<t0:uint>_t svfoo[_t0](sv<t0>_t, sv<t0>_t).\n+\n+   i.e. a version of \"binary\" that returns unsigned integers.  */\n+struct binary_to_uint_def : public overloaded_base<0>\n+{\n+  void\n+  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  {\n+    b.add_overloaded_functions (group, MODE_none);\n+    build_all (b, \"vu0,v0,v0\", group, MODE_none);\n+  }\n+\n+  tree\n+  resolve (function_resolver &r) const OVERRIDE\n+  {\n+    return r.resolve_uniform (2);\n+  }\n+};\n+SHAPE (binary_to_uint)\n+\n /* sv<t0>_t svfoo[_t0](sv<t0>_t, sv<t0:uint>_t)\n \n    i.e. a version of \"binary\" in which the final argument is always an\n@@ -969,6 +1395,59 @@ struct binary_uint64_opt_n_def : public overloaded_base<0>\n };\n SHAPE (binary_uint64_opt_n)\n \n+/* sv<t0>_t svfoo[_t0](sv<t0>_t, sv<t0:half>_t).  */\n+struct binary_wide_def : public overloaded_base<0>\n+{\n+  void\n+  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  {\n+    b.add_overloaded_functions (group, MODE_none);\n+    build_all (b, \"v0,v0,vh0\", group, MODE_none);\n+  }\n+\n+  tree\n+  resolve (function_resolver &r) const OVERRIDE\n+  {\n+    unsigned int i, nargs;\n+    type_suffix_index type;\n+    if (!r.check_gp_argument (2, i, nargs)\n+\t|| (type = r.infer_vector_type (i)) == NUM_TYPE_SUFFIXES\n+\t|| !r.require_derived_vector_type (i + 1, i, type, r.SAME_TYPE_CLASS,\n+\t\t\t\t\t   r.HALF_SIZE))\n+      return error_mark_node;\n+\n+    return r.resolve_to (r.mode_suffix_id, type);\n+  }\n+};\n+SHAPE (binary_wide)\n+\n+/* sv<t0>_t svfoo[_t0](sv<t0>_t, sv<t0:half>_t)\n+   sv<t0>_t svfoo[_n_t0](sv<t0>_t, <t0:half>_t).  */\n+struct binary_wide_opt_n_def : public overloaded_base<0>\n+{\n+  void\n+  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  {\n+    b.add_overloaded_functions (group, MODE_none);\n+    build_all (b, \"v0,v0,vh0\", group, MODE_none);\n+    build_all (b, \"v0,v0,sh0\", group, MODE_n);\n+  }\n+\n+  tree\n+  resolve (function_resolver &r) const OVERRIDE\n+  {\n+    unsigned int i, nargs;\n+    type_suffix_index type;\n+    if (!r.check_gp_argument (2, i, nargs)\n+\t|| (type = r.infer_vector_type (i)) == NUM_TYPE_SUFFIXES)\n+      return error_mark_node;\n+\n+    return r.finish_opt_n_resolution (i + 1, i, type, r.SAME_TYPE_CLASS,\n+\t\t\t\t      r.HALF_SIZE);\n+  }\n+};\n+SHAPE (binary_wide_opt_n)\n+\n /* sv<t0>_t svfoo[_t0](sv<t0>_t, sv<t0>_t)\n    <t0>_t svfoo[_n_t0](<t0>_t, sv<t0>_t).  */\n struct clast_def : public overloaded_base<0>\n@@ -1009,6 +1488,24 @@ struct clast_def : public overloaded_base<0>\n };\n SHAPE (clast)\n \n+/* svbool_t svfoo[_t0](sv<t0>_t, sv<t0>_t).  */\n+struct compare_def : public overloaded_base<0>\n+{\n+  void\n+  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  {\n+    b.add_overloaded_functions (group, MODE_none);\n+    build_all (b, \"vp,v0,v0\", group, MODE_none);\n+  }\n+\n+  tree\n+  resolve (function_resolver &r) const OVERRIDE\n+  {\n+    return r.resolve_uniform (2);\n+  }\n+};\n+SHAPE (compare)\n+\n /* svbool_t svfoo[_t0](sv<t0>_t, sv<t0>_t)\n    svbool_t svfoo[_n_t0](sv<t0>_t, <t0>_t)\n \n@@ -1031,6 +1528,31 @@ struct compare_opt_n_def : public overloaded_base<0>\n };\n SHAPE (compare_opt_n)\n \n+/* svbool_t svfoo[_t0](const <t0>_t *, const <t0>_t *).  */\n+struct compare_ptr_def : public overloaded_base<0>\n+{\n+  void\n+  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  {\n+    b.add_overloaded_functions (group, MODE_none);\n+    build_all (b, \"vp,al,al\", group, MODE_none);\n+  }\n+\n+  tree\n+  resolve (function_resolver &r) const OVERRIDE\n+  {\n+    unsigned int i, nargs;\n+    type_suffix_index type;\n+    if (!r.check_gp_argument (2, i, nargs)\n+\t|| (type = r.infer_pointer_type (i)) == NUM_TYPE_SUFFIXES\n+\t|| !r.require_matching_pointer_type (i + 1, i, type))\n+      return error_mark_node;\n+\n+    return r.resolve_to (r.mode_suffix_id, type);\n+  }\n+};\n+SHAPE (compare_ptr)\n+\n /* svbool_t svfoo_t0[_t1](<t1>_t, <t1>_t)\n \n    where _t0 is a _b<bits> suffix that describes the predicate result.\n@@ -1456,6 +1978,26 @@ struct load_ext_gather_index_def : public load_ext_gather_base\n };\n SHAPE (load_ext_gather_index)\n \n+/* sv<t0>_t svfoo_[s64]index_t0(const <X>_t *, svint64_t)\n+   sv<t0>_t svfoo_[u64]index_t0(const <X>_t *, svuint64_t)\n+\n+   sv<t0>_t svfoo[_u32base]_index_t0(svuint32_t, int64_t)\n+   sv<t0>_t svfoo[_u64base]_index_t0(svuint64_t, int64_t)\n+\n+   where <X> is determined by the function base name.  This is\n+   load_ext_gather_index that doesn't support 32-bit vector indices.  */\n+struct load_ext_gather_index_restricted_def : public load_ext_gather_base\n+{\n+  void\n+  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  {\n+    b.add_overloaded_functions (group, MODE_index);\n+    build_sv_index64 (b, \"t0,al,d\", group);\n+    build_vs_index (b, \"t0,b,ss64\", group);\n+  }\n+};\n+SHAPE (load_ext_gather_index_restricted)\n+\n /* sv<t0>_t svfoo_[s32]offset_t0(const <X>_t *, svint32_t)\n    sv<t0>_t svfoo_[s64]offset_t0(const <X>_t *, svint64_t)\n    sv<t0>_t svfoo_[u32]offset_t0(const <X>_t *, svuint32_t)\n@@ -1481,6 +2023,31 @@ struct load_ext_gather_offset_def : public load_ext_gather_base\n };\n SHAPE (load_ext_gather_offset)\n \n+/* sv<t0>_t svfoo_[s64]offset_t0(const <X>_t *, svint64_t)\n+   sv<t0>_t svfoo_[u32]offset_t0(const <X>_t *, svuint32_t)\n+   sv<t0>_t svfoo_[u64]offset_t0(const <X>_t *, svuint64_t)\n+\n+   sv<t0>_t svfoo[_u32base]_t0(svuint32_t)\n+   sv<t0>_t svfoo[_u64base]_t0(svuint64_t)\n+\n+   sv<t0>_t svfoo[_u32base]_offset_t0(svuint32_t, int64_t)\n+   sv<t0>_t svfoo[_u64base]_offset_t0(svuint64_t, int64_t)\n+\n+   where <X> is determined by the function base name.  This is\n+   load_ext_gather_offset without the s32 vector offset form.  */\n+struct load_ext_gather_offset_restricted_def : public load_ext_gather_base\n+{\n+  void\n+  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  {\n+    b.add_overloaded_functions (group, MODE_offset);\n+    build_sv_uint_offset (b, \"t0,al,d\", group);\n+    build_v_base (b, \"t0,b\", group, true);\n+    build_vs_offset (b, \"t0,b,ss64\", group);\n+  }\n+};\n+SHAPE (load_ext_gather_offset_restricted)\n+\n /* sv<t0>_t svfoo_[s32]index[_t0](const <t0>_t *, svint32_t)\n    sv<t0>_t svfoo_[s64]index[_t0](const <t0>_t *, svint64_t)\n    sv<t0>_t svfoo_[u32]index[_t0](const <t0>_t *, svuint32_t)\n@@ -1490,7 +2057,7 @@ SHAPE (load_ext_gather_offset)\n    sv<t0>_t svfoo_[s64]offset[_t0](const <t0>_t *, svint64_t)\n    sv<t0>_t svfoo_[u32]offset[_t0](const <t0>_t *, svuint32_t)\n    sv<t0>_t svfoo_[u64]offset[_t0](const <t0>_t *, svuint64_t).  */\n-struct load_gather_sv_def : public overloaded_base<0>\n+struct load_gather_sv_def : public load_gather_sv_base\n {\n   void\n   build (function_builder &b, const function_group_info &group) const OVERRIDE\n@@ -1500,23 +2067,30 @@ struct load_gather_sv_def : public overloaded_base<0>\n     build_sv_index (b, \"t0,al,d\", group);\n     build_sv_offset (b, \"t0,al,d\", group);\n   }\n+};\n+SHAPE (load_gather_sv)\n \n-  tree\n-  resolve (function_resolver &r) const OVERRIDE\n-  {\n-    unsigned int i, nargs;\n-    mode_suffix_index mode;\n-    type_suffix_index type;\n-    if (!r.check_gp_argument (2, i, nargs)\n-\t|| (type = r.infer_pointer_type (i, true)) == NUM_TYPE_SUFFIXES\n-\t|| (mode = r.resolve_sv_displacement (i + 1, type, true),\n-\t    mode == MODE_none))\n-      return error_mark_node;\n+/* sv<t0>_t svfoo_[u32]index[_t0](const <t0>_t *, svuint32_t)\n+   sv<t0>_t svfoo_[u64]index[_t0](const <t0>_t *, svuint64_t)\n \n-    return r.resolve_to (mode, type);\n+   sv<t0>_t svfoo_[s64]offset[_t0](const <t0>_t *, svint64_t)\n+   sv<t0>_t svfoo_[u32]offset[_t0](const <t0>_t *, svuint32_t)\n+   sv<t0>_t svfoo_[u64]offset[_t0](const <t0>_t *, svuint64_t)\n+\n+   This is load_gather_sv without the 32-bit vector index forms and\n+   without the s32 vector offset form.  */\n+struct load_gather_sv_restricted_def : public load_gather_sv_base\n+{\n+  void\n+  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  {\n+    b.add_overloaded_functions (group, MODE_index);\n+    b.add_overloaded_functions (group, MODE_offset);\n+    build_sv_index64 (b, \"t0,al,d\", group);\n+    build_sv_uint_offset (b, \"t0,al,d\", group);\n   }\n };\n-SHAPE (load_gather_sv)\n+SHAPE (load_gather_sv_restricted)\n \n /* sv<t0>_t svfoo[_u32base]_t0(svuint32_t)\n    sv<t0>_t svfoo[_u64base]_t0(svuint64_t)\n@@ -1745,6 +2319,64 @@ struct setffr_def : public nonoverloaded_base\n };\n SHAPE (setffr)\n \n+/* sv<t0>_t svfoo[_n_t0])(sv<t0>_t, uint64_t)\n+\n+   where the final argument must be an integer constant expression in the\n+   range [0, sizeof (<t0>_t) * 8 - 1].  */\n+struct shift_left_imm_def : public overloaded_base<0>\n+{\n+  void\n+  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  {\n+    b.add_overloaded_functions (group, MODE_n);\n+    build_all (b, \"v0,v0,su64\", group, MODE_n);\n+  }\n+\n+  tree\n+  resolve (function_resolver &r) const OVERRIDE\n+  {\n+    return r.resolve_uniform (1, 1);\n+  }\n+\n+  bool\n+  check (function_checker &c) const OVERRIDE\n+  {\n+    unsigned int bits = c.type_suffix (0).element_bits;\n+    return c.require_immediate_range (1, 0, bits - 1);\n+  }\n+};\n+SHAPE (shift_left_imm)\n+\n+/* sv<t0>_t svfoo[_n_t0])(sv<t0:half>_t, uint64_t)\n+\n+   where the final argument must be an integer constant expression in the\n+   range [0, sizeof (<t0>_t) * 4 - 1].  */\n+struct shift_left_imm_long_def : public binary_imm_long_base\n+{\n+  bool\n+  check (function_checker &c) const OVERRIDE\n+  {\n+    unsigned int bits = c.type_suffix (0).element_bits / 2;\n+    return c.require_immediate_range (1, 0, bits - 1);\n+  }\n+};\n+SHAPE (shift_left_imm_long)\n+\n+/* sv<t0:uint>_t svfoo[_n_t0])(sv<t0>_t, uint64_t)\n+\n+   where the final argument must be an integer constant expression in the\n+   range [0, sizeof (<t0>_t) * 8 - 1].  */\n+struct shift_left_imm_to_uint_def : public shift_left_imm_def\n+{\n+  void\n+  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  {\n+    b.add_overloaded_functions (group, MODE_n);\n+    build_all (b, \"vu0,v0,su64\", group, MODE_n);\n+  }\n+};\n+SHAPE (shift_left_imm_to_uint)\n+\n /* sv<t0>_t svfoo[_n_t0])(sv<t0>_t, uint64_t)\n \n    where the final argument must be an integer constant expression in the\n@@ -1773,6 +2405,42 @@ struct shift_right_imm_def : public overloaded_base<0>\n };\n SHAPE (shift_right_imm)\n \n+/* sv<t0:half>_t svfoo[_n_t0])(sv<t0>_t, uint64_t)\n+\n+   where the final argument must be an integer constant expression in the\n+   range [1, sizeof (<t0>_t) * 4].  */\n+typedef shift_right_imm_narrow_wrapper<binary_imm_narrowb_base<>, 1>\n+  shift_right_imm_narrowb_def;\n+SHAPE (shift_right_imm_narrowb)\n+\n+/* sv<t0:half>_t svfoo[_n_t0])(sv<t0:half>_t, sv<t0>_t, uint64_t)\n+\n+   where the final argument must be an integer constant expression in the\n+   range [1, sizeof (<t0>_t) * 4].  */\n+typedef shift_right_imm_narrow_wrapper<binary_imm_narrowt_base<>, 2>\n+  shift_right_imm_narrowt_def;\n+SHAPE (shift_right_imm_narrowt)\n+\n+/* sv<t0:uint:half>_t svfoo[_n_t0])(sv<t0>_t, uint64_t)\n+\n+   where the final argument must be an integer constant expression in the\n+   range [1, sizeof (<t0>_t) * 4].  */\n+typedef binary_imm_narrowb_base<TYPE_unsigned>\n+  binary_imm_narrowb_base_unsigned;\n+typedef shift_right_imm_narrow_wrapper<binary_imm_narrowb_base_unsigned, 1>\n+  shift_right_imm_narrowb_to_uint_def;\n+SHAPE (shift_right_imm_narrowb_to_uint)\n+\n+/* sv<t0:uint:half>_t svfoo[_n_t0])(sv<t0:uint:half>_t, sv<t0>_t, uint64_t)\n+\n+   where the final argument must be an integer constant expression in the\n+   range [1, sizeof (<t0>_t) * 4].  */\n+typedef binary_imm_narrowt_base<TYPE_unsigned>\n+  binary_imm_narrowt_base_unsigned;\n+typedef shift_right_imm_narrow_wrapper<binary_imm_narrowt_base_unsigned, 2>\n+  shift_right_imm_narrowt_to_uint_def;\n+SHAPE (shift_right_imm_narrowt_to_uint)\n+\n /* void svfoo[_t0](<X>_t *, sv<t0>[xN]_t)\n    void svfoo_vnum[_t0](<X>_t *, int64_t, sv<t0>[xN]_t)\n \n@@ -1830,6 +2498,26 @@ struct store_scatter_index_def : public store_scatter_base\n };\n SHAPE (store_scatter_index)\n \n+/* void svfoo_[s64]index[_t0](<X>_t *, svint64_t, sv<t0>_t)\n+   void svfoo_[u64]index[_t0](<X>_t *, svuint64_t, sv<t0>_t)\n+\n+   void svfoo[_u32base]_index[_t0](svuint32_t, int64_t, sv<t0>_t)\n+   void svfoo[_u64base]_index[_t0](svuint64_t, int64_t, sv<t0>_t)\n+\n+   i.e. a version of store_scatter_index that doesn't support 32-bit\n+   vector indices.  */\n+struct store_scatter_index_restricted_def : public store_scatter_base\n+{\n+  void\n+  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  {\n+    b.add_overloaded_functions (group, MODE_index);\n+    build_sv_index64 (b, \"_,as,d,t0\", group);\n+    build_vs_index (b, \"_,b,ss64,t0\", group);\n+  }\n+};\n+SHAPE (store_scatter_index_restricted)\n+\n /* void svfoo_[s32]offset[_t0](<X>_t *, svint32_t, sv<t0>_t)\n    void svfoo_[s64]offset[_t0](<X>_t *, svint64_t, sv<t0>_t)\n    void svfoo_[u32]offset[_t0](<X>_t *, svuint32_t, sv<t0>_t)\n@@ -1857,6 +2545,57 @@ struct store_scatter_offset_def : public store_scatter_base\n };\n SHAPE (store_scatter_offset)\n \n+/* void svfoo_[s64]offset[_t0](<X>_t *, svint64_t, sv<t0>_t)\n+   void svfoo_[u32]offset[_t0](<X>_t *, svuint32_t, sv<t0>_t)\n+   void svfoo_[u64]offset[_t0](<X>_t *, svuint64_t, sv<t0>_t)\n+\n+   void svfoo[_u32base_t0](svuint32_t, sv<t0>_t)\n+   void svfoo[_u64base_t0](svuint64_t, sv<t0>_t)\n+\n+   void svfoo[_u32base]_offset[_t0](svuint32_t, int64_t, sv<t0>_t)\n+   void svfoo[_u64base]_offset[_t0](svuint64_t, int64_t, sv<t0>_t)\n+\n+   i.e. a version of store_scatter_offset that doesn't support svint32_t\n+   offsets.  */\n+struct store_scatter_offset_restricted_def : public store_scatter_base\n+{\n+  void\n+  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  {\n+    b.add_overloaded_functions (group, MODE_none);\n+    b.add_overloaded_functions (group, MODE_offset);\n+    build_sv_uint_offset (b, \"_,as,d,t0\", group);\n+    build_v_base (b, \"_,b,t0\", group);\n+    build_vs_offset (b, \"_,b,ss64,t0\", group);\n+  }\n+};\n+SHAPE (store_scatter_offset_restricted)\n+\n+/* sv<t0>_t svfoo[_t0](sv<t0>xN_t, sv<t0:uint>_t).  */\n+struct tbl_tuple_def : public overloaded_base<0>\n+{\n+  void\n+  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  {\n+    b.add_overloaded_functions (group, MODE_none);\n+    build_all (b, \"v0,t0,vu0\", group, MODE_none);\n+  }\n+\n+  tree\n+  resolve (function_resolver &r) const OVERRIDE\n+  {\n+    unsigned int i, nargs;\n+    type_suffix_index type;\n+    if (!r.check_gp_argument (2, i, nargs)\n+\t|| (type = r.infer_tuple_type (i)) == NUM_TYPE_SUFFIXES\n+\t|| !r.require_derived_vector_type (i + 1, i, type, TYPE_unsigned))\n+      return error_mark_node;\n+\n+    return r.resolve_to (r.mode_suffix_id, type);\n+  }\n+};\n+SHAPE (tbl_tuple)\n+\n /* svbool_t svfoo[_<t0>](sv<t0>_t, sv<t0>_t, sv<t0>_t, uint64_t)\n \n    where the final argument is an integer constant expression in the\n@@ -1913,6 +2652,47 @@ struct ternary_lane_rotate_def : public overloaded_base<0>\n };\n SHAPE (ternary_lane_rotate)\n \n+/* sv<t0>_t svfoo[_t0](sv<t0>_t, sv<t0:half>_t, sv<t0:half>_t, uint64_t)\n+\n+   where the final argument is an integer constant expression in the range\n+   [0, 32 / sizeof (<t0>_t) - 1].  */\n+struct ternary_long_lane_def\n+  : public ternary_resize2_lane_base<function_resolver::HALF_SIZE>\n+{\n+  void\n+  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  {\n+    b.add_overloaded_functions (group, MODE_none);\n+    build_all (b, \"v0,v0,vh0,vh0,su64\", group, MODE_none);\n+  }\n+\n+  bool\n+  check (function_checker &c) const OVERRIDE\n+  {\n+    return c.require_immediate_lane_index (3);\n+  }\n+};\n+SHAPE (ternary_long_lane)\n+\n+/* sv<t0>_t svfoo[_t0](sv<t0>_t, sv<t0:half>_t, sv<t0:half>_t)\n+   sv<t0>_t svfoo[_n_t0](sv<t0>_t, sv<t0:half>_t, <t0:half>_t)\n+\n+   i.e. a version of the standard ternary shape ternary_opt_n in which\n+   the element type of the last two arguments is the half-sized\n+   equivalent of <t0>.  */\n+struct ternary_long_opt_n_def\n+  : public ternary_resize2_opt_n_base<function_resolver::HALF_SIZE>\n+{\n+  void\n+  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  {\n+    b.add_overloaded_functions (group, MODE_none);\n+    build_all (b, \"v0,v0,vh0,vh0\", group, MODE_none);\n+    build_all (b, \"v0,v0,vh0,sh0\", group, MODE_n);\n+  }\n+};\n+SHAPE (ternary_long_opt_n)\n+\n /* sv<t0>_t svfoo[_t0](sv<t0>_t, sv<t0>_t, sv<t0>_t)\n    sv<t0>_t svfoo[_n_t0](sv<t0>_t, sv<t0>_t, <t0>_t)\n \n@@ -1940,7 +2720,8 @@ SHAPE (ternary_opt_n)\n \n    where the final argument is an integer constant expression in the range\n    [0, 16 / sizeof (<t0>_t) - 1].  */\n-struct ternary_qq_lane_def : public overloaded_base<0>\n+struct ternary_qq_lane_def\n+  : public ternary_resize2_lane_base<function_resolver::QUARTER_SIZE>\n {\n   void\n   build (function_builder &b, const function_group_info &group) const OVERRIDE\n@@ -1949,18 +2730,41 @@ struct ternary_qq_lane_def : public overloaded_base<0>\n     build_all (b, \"v0,v0,vq0,vq0,su64\", group, MODE_none);\n   }\n \n+  bool\n+  check (function_checker &c) const OVERRIDE\n+  {\n+    return c.require_immediate_lane_index (3, 4);\n+  }\n+};\n+SHAPE (ternary_qq_lane)\n+\n+/* svbool_t svfoo[_<t0>](sv<t0>_t, sv<t0:quarter>_t, sv<t0:quarter>_t,\n+\t\t\t uint64_t)\n+\n+   where the final argument is an integer constant expression in\n+   {0, 90, 180, 270}.  */\n+struct ternary_qq_lane_rotate_def : public overloaded_base<0>\n+{\n+  void\n+  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  {\n+    b.add_overloaded_functions (group, MODE_none);\n+    build_all (b, \"v0,v0,vq0,vq0,su64,su64\", group, MODE_none);\n+  }\n+\n   tree\n   resolve (function_resolver &r) const OVERRIDE\n   {\n     unsigned int i, nargs;\n     type_suffix_index type;\n-    if (!r.check_gp_argument (4, i, nargs)\n+    if (!r.check_gp_argument (5, i, nargs)\n \t|| (type = r.infer_vector_type (i)) == NUM_TYPE_SUFFIXES\n \t|| !r.require_derived_vector_type (i + 1, i, type, r.SAME_TYPE_CLASS,\n \t\t\t\t\t   r.QUARTER_SIZE)\n \t|| !r.require_derived_vector_type (i + 2, i, type, r.SAME_TYPE_CLASS,\n \t\t\t\t\t   r.QUARTER_SIZE)\n-\t|| !r.require_integer_immediate (i + 3))\n+\t|| !r.require_integer_immediate (i + 3)\n+\t|| !r.require_integer_immediate (i + 4))\n       return error_mark_node;\n \n     return r.resolve_to (r.mode_suffix_id, type);\n@@ -1969,18 +2773,20 @@ struct ternary_qq_lane_def : public overloaded_base<0>\n   bool\n   check (function_checker &c) const OVERRIDE\n   {\n-    return c.require_immediate_lane_index (3, 4);\n+    return (c.require_immediate_lane_index (3, 4)\n+\t    && c.require_immediate_one_of (4, 0, 90, 180, 270));\n   }\n };\n-SHAPE (ternary_qq_lane)\n+SHAPE (ternary_qq_lane_rotate)\n \n /* sv<t0>_t svfoo[_t0](sv<t0>_t, sv<t0.quarter>_t, sv<t0.quarter>_t)\n    sv<t0>_t svfoo[_n_t0](sv<t0>_t, sv<t0.quarter>_t, <t0.quarter>_t)\n \n    i.e. a version of the standard ternary shape ternary_opt_n in which\n    the element type of the last two arguments is the quarter-sized\n    equivalent of <t0>.  */\n-struct ternary_qq_opt_n_def : public overloaded_base<0>\n+struct ternary_qq_opt_n_def\n+  : public ternary_resize2_opt_n_base<function_resolver::QUARTER_SIZE>\n {\n   void\n   build (function_builder &b, const function_group_info &group) const OVERRIDE\n@@ -1989,23 +2795,47 @@ struct ternary_qq_opt_n_def : public overloaded_base<0>\n     build_all (b, \"v0,v0,vq0,vq0\", group, MODE_none);\n     build_all (b, \"v0,v0,vq0,sq0\", group, MODE_n);\n   }\n+};\n+SHAPE (ternary_qq_opt_n)\n+\n+/* svbool_t svfoo[_<t0>](sv<t0>_t, sv<t0:quarter>_t, sv<t0:quarter>_t,\n+\t\t\t uint64_t)\n+\n+   where the final argument is an integer constant expression in\n+   {0, 90, 180, 270}.  */\n+struct ternary_qq_rotate_def : public overloaded_base<0>\n+{\n+  void\n+  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  {\n+    b.add_overloaded_functions (group, MODE_none);\n+    build_all (b, \"v0,v0,vq0,vq0,su64\", group, MODE_none);\n+  }\n \n   tree\n   resolve (function_resolver &r) const OVERRIDE\n   {\n     unsigned int i, nargs;\n     type_suffix_index type;\n-    if (!r.check_gp_argument (3, i, nargs)\n+    if (!r.check_gp_argument (4, i, nargs)\n \t|| (type = r.infer_vector_type (i)) == NUM_TYPE_SUFFIXES\n \t|| !r.require_derived_vector_type (i + 1, i, type, r.SAME_TYPE_CLASS,\n-\t\t\t\t\t   r.QUARTER_SIZE))\n+\t\t\t\t\t   r.QUARTER_SIZE)\n+\t|| !r.require_derived_vector_type (i + 2, i, type, r.SAME_TYPE_CLASS,\n+\t\t\t\t\t   r.QUARTER_SIZE)\n+\t|| !r.require_integer_immediate (i + 3))\n       return error_mark_node;\n \n-    return r.finish_opt_n_resolution (i + 2, i, type, r.SAME_TYPE_CLASS,\n-\t\t\t\t      r.QUARTER_SIZE);\n+    return r.resolve_to (r.mode_suffix_id, type);\n+  }\n+\n+  bool\n+  check (function_checker &c) const OVERRIDE\n+  {\n+    return c.require_immediate_one_of (3, 0, 90, 180, 270);\n   }\n };\n-SHAPE (ternary_qq_opt_n)\n+SHAPE (ternary_qq_rotate)\n \n /* svbool_t svfoo[_<t0>](sv<t0>_t, sv<t0>_t, sv<t0>_t, uint64_t)\n \n@@ -2034,6 +2864,62 @@ struct ternary_rotate_def : public overloaded_base<0>\n };\n SHAPE (ternary_rotate)\n \n+/* sv<t0>_t svfoo[_n_t0])(sv<t0>_t, sv<t0>_t, uint64_t)\n+\n+   where the final argument must be an integer constant expression in the\n+   range [0, sizeof (<t0>_t) * 8 - 1].  */\n+struct ternary_shift_left_imm_def : public ternary_shift_imm_base\n+{\n+  bool\n+  check (function_checker &c) const OVERRIDE\n+  {\n+    unsigned int bits = c.type_suffix (0).element_bits;\n+    return c.require_immediate_range (2, 0, bits - 1);\n+  }\n+};\n+SHAPE (ternary_shift_left_imm)\n+\n+/* sv<t0>_t svfoo[_n_t0])(sv<t0>_t, sv<t0>_t, uint64_t)\n+\n+   where the final argument must be an integer constant expression in the\n+   range [1, sizeof (<t0>_t) * 8].  */\n+struct ternary_shift_right_imm_def : public ternary_shift_imm_base\n+{\n+  bool\n+  check (function_checker &c) const OVERRIDE\n+  {\n+    unsigned int bits = c.type_suffix (0).element_bits;\n+    return c.require_immediate_range (2, 1, bits);\n+  }\n+};\n+SHAPE (ternary_shift_right_imm)\n+\n+/* sv<t0>_t svfoo[_t0](sv<t0>_t, sv<t0>_t, sv<t0:uint>_t).  */\n+struct ternary_uint_def : public overloaded_base<0>\n+{\n+  void\n+  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  {\n+    b.add_overloaded_functions (group, MODE_none);\n+    build_all (b, \"v0,v0,v0,vu0\", group, MODE_none);\n+  }\n+\n+  tree\n+  resolve (function_resolver &r) const OVERRIDE\n+  {\n+    unsigned int i, nargs;\n+    type_suffix_index type;\n+    if (!r.check_gp_argument (3, i, nargs)\n+\t|| (type = r.infer_vector_type (i)) == NUM_TYPE_SUFFIXES\n+\t|| !r.require_matching_vector_type (i + 1, type)\n+\t|| !r.require_derived_vector_type (i + 2, i, type, TYPE_unsigned))\n+      return error_mark_node;\n+\n+    return r.resolve_to (r.mode_suffix_id, type);\n+  }\n+};\n+SHAPE (ternary_uint)\n+\n /* svbool_t svfoo[_<t0>](sv<t0>_t, sv<t0>_t, uint64_t)\n \n    where the final argument is an integer constant expression in the\n@@ -2082,7 +2968,7 @@ struct unary_def : public overloaded_base<0>\n };\n SHAPE (unary)\n \n-/* sv<t0>_t svfoo_t0[_t1](svbool_t, sv<t1>_t)\n+/* sv<t0>_t svfoo_t0[_t1](sv<t1>_t)\n \n    where the target type <t0> must be specified explicitly but the source\n    type <t1> can be inferred.  */\n@@ -2104,6 +2990,57 @@ struct unary_convert_def : public overloaded_base<1>\n };\n SHAPE (unary_convert)\n \n+/* sv<t0>_t svfoo_t0[_t1](sv<t0>_t, sv<t1>_t)\n+\n+   This is a version of unary_convert in which the even-indexed\n+   elements are passed in as a first parameter, before any governing\n+   predicate.  */\n+struct unary_convert_narrowt_def : public overloaded_base<1>\n+{\n+  void\n+  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  {\n+    b.add_overloaded_functions (group, MODE_none);\n+    build_all (b, \"v0,v1\", group, MODE_none);\n+  }\n+\n+  tree\n+  resolve (function_resolver &r) const OVERRIDE\n+  {\n+    return r.resolve_unary (r.type_suffix (0).tclass,\n+\t\t\t    r.type_suffix (0).element_bits, true);\n+  }\n+};\n+SHAPE (unary_convert_narrowt)\n+\n+/* sv<t0>_t svfoo[_t0](sv<t0:half>_t).  */\n+struct unary_long_def : public overloaded_base<0>\n+{\n+  void\n+  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  {\n+    b.add_overloaded_functions (group, MODE_none);\n+    build_all (b, \"v0,vh0\", group, MODE_none);\n+  }\n+\n+  tree\n+  resolve (function_resolver &r) const OVERRIDE\n+  {\n+    unsigned int i, nargs;\n+    type_suffix_index type, result_type;\n+    if (!r.check_gp_argument (1, i, nargs)\n+\t|| (type = r.infer_vector_type (i)) == NUM_TYPE_SUFFIXES\n+\t|| (result_type = long_type_suffix (r, type)) == NUM_TYPE_SUFFIXES)\n+      return error_mark_node;\n+\n+    if (tree res = r.lookup_form (r.mode_suffix_id, result_type))\n+      return res;\n+\n+    return r.report_no_such_form (type);\n+  }\n+};\n+SHAPE (unary_long)\n+\n /* sv<t0>_t svfoo[_n]_t0(<t0>_t).  */\n struct unary_n_def : public overloaded_base<1>\n {\n@@ -2124,6 +3061,22 @@ struct unary_n_def : public overloaded_base<1>\n };\n SHAPE (unary_n)\n \n+/* sv<t0:half>_t svfoo[_t0](sv<t0>_t).  */\n+typedef unary_narrowb_base<> unary_narrowb_def;\n+SHAPE (unary_narrowb)\n+\n+/* sv<t0:half>_t svfoo[_t0](sv<t0:half>_t, sv<t0>_t).  */\n+typedef unary_narrowt_base<> unary_narrowt_def;\n+SHAPE (unary_narrowt)\n+\n+/* sv<t0:uint:half>_t svfoo[_t0](sv<t0>_t).  */\n+typedef unary_narrowb_base<TYPE_unsigned> unary_narrowb_to_uint_def;\n+SHAPE (unary_narrowb_to_uint)\n+\n+/* sv<t0:uint:half>_t svfoo[_t0](sv<t0:uint:half>_t, sv<t0>_t).  */\n+typedef unary_narrowt_base<TYPE_unsigned> unary_narrowt_to_uint_def;\n+SHAPE (unary_narrowt_to_uint)\n+\n /* svbool_t svfoo(svbool_t).  */\n struct unary_pred_def : public nonoverloaded_base\n {\n@@ -2135,6 +3088,27 @@ struct unary_pred_def : public nonoverloaded_base\n };\n SHAPE (unary_pred)\n \n+/* sv<t0:int>_t svfoo[_t0](sv<t0>_t)\n+\n+   i.e. a version of \"unary\" in which the returned vector contains\n+   signed integers.  */\n+struct unary_to_int_def : public overloaded_base<0>\n+{\n+  void\n+  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  {\n+    b.add_overloaded_functions (group, MODE_none);\n+    build_all (b, \"vs0,v0\", group, MODE_none);\n+  }\n+\n+  tree\n+  resolve (function_resolver &r) const OVERRIDE\n+  {\n+    return r.resolve_unary (TYPE_signed);\n+  }\n+};\n+SHAPE (unary_to_int)\n+\n /* sv<t0:uint>_t svfoo[_t0](sv<t0>_t)\n \n    i.e. a version of \"unary\" in which the returned vector contains"}, {"sha": "2a75a822a6282be67fd6cd9c7480d424b8fc4352", "filename": "gcc/config/aarch64/aarch64-sve-builtins-shapes.h", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-shapes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-shapes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-shapes.h?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -76,18 +76,27 @@ namespace aarch64_sve\n     extern const function_shape *const binary;\n     extern const function_shape *const binary_int_opt_n;\n     extern const function_shape *const binary_lane;\n+    extern const function_shape *const binary_long_lane;\n+    extern const function_shape *const binary_long_opt_n;\n     extern const function_shape *const binary_n;\n+    extern const function_shape *const binary_narrowb_opt_n;\n+    extern const function_shape *const binary_narrowt_opt_n;\n     extern const function_shape *const binary_opt_n;\n     extern const function_shape *const binary_pred;\n     extern const function_shape *const binary_rotate;\n     extern const function_shape *const binary_scalar;\n+    extern const function_shape *const binary_to_uint;\n     extern const function_shape *const binary_uint;\n     extern const function_shape *const binary_uint_n;\n     extern const function_shape *const binary_uint_opt_n;\n     extern const function_shape *const binary_uint64_n;\n     extern const function_shape *const binary_uint64_opt_n;\n+    extern const function_shape *const binary_wide;\n+    extern const function_shape *const binary_wide_opt_n;\n     extern const function_shape *const clast;\n+    extern const function_shape *const compare;\n     extern const function_shape *const compare_opt_n;\n+    extern const function_shape *const compare_ptr;\n     extern const function_shape *const compare_scalar;\n     extern const function_shape *const compare_wide_opt_n;\n     extern const function_shape *const count_inherent;\n@@ -108,8 +117,11 @@ namespace aarch64_sve\n     extern const function_shape *const load;\n     extern const function_shape *const load_ext;\n     extern const function_shape *const load_ext_gather_index;\n+    extern const function_shape *const load_ext_gather_index_restricted;\n     extern const function_shape *const load_ext_gather_offset;\n+    extern const function_shape *const load_ext_gather_offset_restricted;\n     extern const function_shape *const load_gather_sv;\n+    extern const function_shape *const load_gather_sv_restricted;\n     extern const function_shape *const load_gather_vs;\n     extern const function_shape *const load_replicate;\n     extern const function_shape *const pattern_pred;\n@@ -122,21 +134,44 @@ namespace aarch64_sve\n     extern const function_shape *const reduction_wide;\n     extern const function_shape *const set;\n     extern const function_shape *const setffr;\n+    extern const function_shape *const shift_left_imm_long;\n+    extern const function_shape *const shift_left_imm_to_uint;\n     extern const function_shape *const shift_right_imm;\n+    extern const function_shape *const shift_right_imm_narrowb;\n+    extern const function_shape *const shift_right_imm_narrowt;\n+    extern const function_shape *const shift_right_imm_narrowb_to_uint;\n+    extern const function_shape *const shift_right_imm_narrowt_to_uint;\n     extern const function_shape *const store;\n     extern const function_shape *const store_scatter_index;\n+    extern const function_shape *const store_scatter_index_restricted;\n     extern const function_shape *const store_scatter_offset;\n+    extern const function_shape *const store_scatter_offset_restricted;\n+    extern const function_shape *const tbl_tuple;\n     extern const function_shape *const ternary_lane;\n     extern const function_shape *const ternary_lane_rotate;\n+    extern const function_shape *const ternary_long_lane;\n+    extern const function_shape *const ternary_long_opt_n;\n     extern const function_shape *const ternary_opt_n;\n     extern const function_shape *const ternary_qq_lane;\n+    extern const function_shape *const ternary_qq_lane_rotate;\n     extern const function_shape *const ternary_qq_opt_n;\n+    extern const function_shape *const ternary_qq_rotate;\n     extern const function_shape *const ternary_rotate;\n+    extern const function_shape *const ternary_shift_left_imm;\n+    extern const function_shape *const ternary_shift_right_imm;\n+    extern const function_shape *const ternary_uint;\n     extern const function_shape *const tmad;\n     extern const function_shape *const unary;\n     extern const function_shape *const unary_convert;\n+    extern const function_shape *const unary_convert_narrowt;\n+    extern const function_shape *const unary_long;\n     extern const function_shape *const unary_n;\n+    extern const function_shape *const unary_narrowb;\n+    extern const function_shape *const unary_narrowt;\n+    extern const function_shape *const unary_narrowb_to_uint;\n+    extern const function_shape *const unary_narrowt_to_uint;\n     extern const function_shape *const unary_pred;\n+    extern const function_shape *const unary_to_int;\n     extern const function_shape *const unary_to_uint;\n     extern const function_shape *const unary_uint;\n     extern const function_shape *const unary_widen;"}, {"sha": "fa3b50680ba0588bd39438e968a14a33652c0a4b", "filename": "gcc/config/aarch64/aarch64-sve-builtins-sve2.cc", "status": "added", "additions": 654, "deletions": 0, "changes": 654, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-sve2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-sve2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-sve2.cc?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,654 @@\n+/* ACLE support for AArch64 SVE (__ARM_FEATURE_SVE2 intrinsics)\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"tree.h\"\n+#include \"rtl.h\"\n+#include \"tm_p.h\"\n+#include \"memmodel.h\"\n+#include \"insn-codes.h\"\n+#include \"optabs.h\"\n+#include \"recog.h\"\n+#include \"expr.h\"\n+#include \"basic-block.h\"\n+#include \"function.h\"\n+#include \"fold-const.h\"\n+#include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n+#include \"gimplify.h\"\n+#include \"explow.h\"\n+#include \"emit-rtl.h\"\n+#include \"tree-vector-builder.h\"\n+#include \"rtx-vector-builder.h\"\n+#include \"vec-perm-indices.h\"\n+#include \"aarch64-sve-builtins.h\"\n+#include \"aarch64-sve-builtins-shapes.h\"\n+#include \"aarch64-sve-builtins-base.h\"\n+#include \"aarch64-sve-builtins-sve2.h\"\n+#include \"aarch64-sve-builtins-functions.h\"\n+\n+using namespace aarch64_sve;\n+\n+namespace {\n+\n+/* Return the UNSPEC_CDOT* unspec for rotation amount ROT.  */\n+static int\n+unspec_cdot (int rot)\n+{\n+  switch (rot)\n+    {\n+    case 0: return UNSPEC_CDOT;\n+    case 90: return UNSPEC_CDOT90;\n+    case 180: return UNSPEC_CDOT180;\n+    case 270: return UNSPEC_CDOT270;\n+    default: gcc_unreachable ();\n+    }\n+}\n+\n+/* Return the UNSPEC_SQRDCMLAH* unspec for rotation amount ROT.  */\n+static int\n+unspec_sqrdcmlah (int rot)\n+{\n+  switch (rot)\n+    {\n+    case 0: return UNSPEC_SQRDCMLAH;\n+    case 90: return UNSPEC_SQRDCMLAH90;\n+    case 180: return UNSPEC_SQRDCMLAH180;\n+    case 270: return UNSPEC_SQRDCMLAH270;\n+    default: gcc_unreachable ();\n+    }\n+}\n+\n+class svaba_impl : public function_base\n+{\n+public:\n+  rtx\n+  expand (function_expander &e) const OVERRIDE\n+  {\n+    rtx_code max_code = e.type_suffix (0).unsigned_p ? UMAX : SMAX;\n+    machine_mode mode = e.vector_mode (0);\n+    return e.use_exact_insn (code_for_aarch64_sve2_aba (max_code, mode));\n+  }\n+};\n+\n+class svcdot_impl : public function_base\n+{\n+public:\n+  rtx\n+  expand (function_expander &e) const OVERRIDE\n+  {\n+    /* Convert the rotation amount into a specific unspec.  */\n+    int rot = INTVAL (e.args.pop ());\n+    return e.use_exact_insn (code_for_aarch64_sve (unspec_cdot (rot),\n+\t\t\t\t\t\t   e.vector_mode (0)));\n+  }\n+};\n+\n+class svcdot_lane_impl : public function_base\n+{\n+public:\n+  rtx\n+  expand (function_expander &e) const OVERRIDE\n+  {\n+    /* Convert the rotation amount into a specific unspec.  */\n+    int rot = INTVAL (e.args.pop ());\n+    return e.use_exact_insn (code_for_aarch64_lane (unspec_cdot (rot),\n+\t\t\t\t\t\t    e.vector_mode (0)));\n+  }\n+};\n+\n+class svldnt1_gather_impl : public full_width_access\n+{\n+public:\n+  unsigned int\n+  call_properties (const function_instance &) const OVERRIDE\n+  {\n+    return CP_READ_MEMORY;\n+  }\n+\n+  rtx\n+  expand (function_expander &e) const OVERRIDE\n+  {\n+    e.prepare_gather_address_operands (1, false);\n+    machine_mode mem_mode = e.memory_vector_mode ();\n+    return e.use_exact_insn (code_for_aarch64_gather_ldnt (mem_mode));\n+  }\n+};\n+\n+/* Implements extending forms of svldnt1_gather.  */\n+class svldnt1_gather_extend_impl : public extending_load\n+{\n+public:\n+  CONSTEXPR svldnt1_gather_extend_impl (type_suffix_index memory_type)\n+    : extending_load (memory_type) {}\n+\n+  rtx\n+  expand (function_expander &e) const OVERRIDE\n+  {\n+    e.prepare_gather_address_operands (1, false);\n+    /* Add a constant predicate for the extension rtx.  */\n+    e.args.quick_push (CONSTM1_RTX (VNx16BImode));\n+    insn_code icode = code_for_aarch64_gather_ldnt (extend_rtx_code (),\n+\t\t\t\t\t\t    e.vector_mode (0),\n+\t\t\t\t\t\t    e.memory_vector_mode ());\n+    return e.use_exact_insn (icode);\n+  }\n+};\n+\n+/* Implements both svmatch and svnmatch; the unspec parameter decides\n+   between them.  */\n+class svmatch_svnmatch_impl : public function_base\n+{\n+public:\n+  CONSTEXPR svmatch_svnmatch_impl (int unspec) : m_unspec (unspec) {}\n+\n+  rtx\n+  expand (function_expander &e) const OVERRIDE\n+  {\n+    /* These are UNSPEC_PRED_Z operations and so need a hint operand.  */\n+    e.add_ptrue_hint (0, e.gp_mode (0));\n+    return e.use_exact_insn (code_for_aarch64_pred (m_unspec,\n+\t\t\t\t\t\t    e.vector_mode (0)));\n+  }\n+\n+  int m_unspec;\n+};\n+\n+/* Implements both svmovlb and svmovlt; the unspec parameters decide\n+   between them.  */\n+class svmovl_lb_impl : public unspec_based_function_base\n+{\n+public:\n+  CONSTEXPR svmovl_lb_impl (int unspec_for_sint, int unspec_for_uint,\n+\t\t\t    int unspec_for_fp)\n+    : unspec_based_function_base (unspec_for_sint, unspec_for_uint,\n+\t\t\t\t  unspec_for_fp)\n+  {}\n+\n+  rtx\n+  expand (function_expander &e) const OVERRIDE\n+  {\n+    e.args.quick_push (const0_rtx);\n+    return e.map_to_unspecs (m_unspec_for_sint, m_unspec_for_uint,\n+\t\t\t     m_unspec_for_fp);\n+  }\n+};\n+\n+class svqcadd_impl : public function_base\n+{\n+public:\n+  rtx\n+  expand (function_expander &e) const OVERRIDE\n+  {\n+    /* Convert the rotation amount into a specific unspec.  */\n+    int rot = INTVAL (e.args.pop ());\n+    if (rot == 90)\n+      return e.map_to_unspecs (UNSPEC_SQCADD90, -1, -1);\n+    if (rot == 270)\n+      return e.map_to_unspecs (UNSPEC_SQCADD270, -1, -1);\n+    gcc_unreachable ();\n+  }\n+};\n+\n+class svqrdcmlah_impl : public function_base\n+{\n+public:\n+  rtx\n+  expand (function_expander &e) const OVERRIDE\n+  {\n+    /* Convert the rotation amount into a specific unspec.  */\n+    int rot = INTVAL (e.args.pop ());\n+    return e.use_exact_insn (code_for_aarch64_sve (unspec_sqrdcmlah (rot),\n+\t\t\t\t\t\t   e.vector_mode (0)));\n+  }\n+};\n+\n+class svqrdcmlah_lane_impl : public function_base\n+{\n+public:\n+  rtx\n+  expand (function_expander &e) const OVERRIDE\n+  {\n+    /* Convert the rotation amount into a specific unspec.  */\n+    int rot = INTVAL (e.args.pop ());\n+    return e.use_exact_insn (code_for_aarch64_lane (unspec_sqrdcmlah (rot),\n+\t\t\t\t\t\t    e.vector_mode (0)));\n+  }\n+};\n+\n+class svqrshl_impl : public unspec_based_function\n+{\n+public:\n+  CONSTEXPR svqrshl_impl ()\n+    : unspec_based_function (UNSPEC_SQRSHL, UNSPEC_UQRSHL, -1) {}\n+\n+  gimple *\n+  fold (gimple_folder &f) const OVERRIDE\n+  {\n+    if (tree amount = uniform_integer_cst_p (gimple_call_arg (f.call, 2)))\n+      {\n+\tif (wi::to_widest (amount) >= 0)\n+\t  {\n+\t    /* The rounding has no effect, and [SU]QSHL has immediate forms\n+\t       that we can use for sensible shift amounts.  */\n+\t    function_instance instance (\"svqshl\", functions::svqshl,\n+\t\t\t\t\tshapes::binary_int_opt_n, MODE_n,\n+\t\t\t\t\tf.type_suffix_ids, f.pred);\n+\t    return f.redirect_call (instance);\n+\t  }\n+\telse\n+\t  {\n+\t    /* The saturation has no effect, and [SU]RSHL has immediate forms\n+\t       that we can use for sensible shift amounts.  */\n+\t    function_instance instance (\"svrshl\", functions::svrshl,\n+\t\t\t\t\tshapes::binary_int_opt_n, MODE_n,\n+\t\t\t\t\tf.type_suffix_ids, f.pred);\n+\t    return f.redirect_call (instance);\n+\t  }\n+      }\n+    return NULL;\n+  }\n+};\n+\n+class svqshl_impl : public unspec_based_function\n+{\n+public:\n+  CONSTEXPR svqshl_impl ()\n+    : unspec_based_function (UNSPEC_SQSHL, UNSPEC_UQSHL, -1) {}\n+\n+  gimple *\n+  fold (gimple_folder &f) const OVERRIDE\n+  {\n+    if (tree amount = uniform_integer_cst_p (gimple_call_arg (f.call, 2)))\n+      {\n+\tint element_bits = f.type_suffix (0).element_bits;\n+\tif (wi::to_widest (amount) >= -element_bits\n+\t    && wi::to_widest (amount) < 0)\n+\t  {\n+\t    /* The saturation has no effect for right shifts, so we can\n+\t       use the immediate form of ASR or LSR.  */\n+\t    amount = wide_int_to_tree (TREE_TYPE (amount),\n+\t\t\t\t       -wi::to_wide (amount));\n+\t    function_instance instance (\"svasr\", functions::svasr,\n+\t\t\t\t\tshapes::binary_uint_opt_n, MODE_n,\n+\t\t\t\t\tf.type_suffix_ids, f.pred);\n+\t    if (f.type_suffix (0).unsigned_p)\n+\t      {\n+\t\tinstance.base_name = \"svlsr\";\n+\t\tinstance.base = functions::svlsr;\n+\t      }\n+\t    gcall *call = as_a <gcall *> (f.redirect_call (instance));\n+\t    gimple_call_set_arg (call, 2, amount);\n+\t    return call;\n+\t  }\n+      }\n+    return NULL;\n+  }\n+};\n+\n+class svrshl_impl : public unspec_based_function\n+{\n+public:\n+  CONSTEXPR svrshl_impl ()\n+    : unspec_based_function (UNSPEC_SRSHL, UNSPEC_URSHL, -1) {}\n+\n+  gimple *\n+  fold (gimple_folder &f) const OVERRIDE\n+  {\n+    if (tree amount = uniform_integer_cst_p (gimple_call_arg (f.call, 2)))\n+      {\n+\tif (wi::to_widest (amount) >= 0)\n+\t  {\n+\t    /* The rounding has no effect, and LSL has immediate forms\n+\t       that we can use for sensible shift amounts.  */\n+\t    function_instance instance (\"svlsl\", functions::svlsl,\n+\t\t\t\t\tshapes::binary_uint_opt_n, MODE_n,\n+\t\t\t\t\tf.type_suffix_ids, f.pred);\n+\t    gcall *call = as_a <gcall *> (f.redirect_call (instance));\n+\t    gimple_call_set_arg (call, 2, amount);\n+\t    return call;\n+\t  }\n+\tint element_bits = f.type_suffix (0).element_bits;\n+\tif (wi::to_widest (amount) >= -element_bits)\n+\t  {\n+\t    /* The shift amount is in range of [SU]RSHR.  */\n+\t    amount = wide_int_to_tree (TREE_TYPE (amount),\n+\t\t\t\t       -wi::to_wide (amount));\n+\t    function_instance instance (\"svrshr\", functions::svrshr,\n+\t\t\t\t\tshapes::shift_right_imm, MODE_n,\n+\t\t\t\t\tf.type_suffix_ids, f.pred);\n+\t    gcall *call = as_a <gcall *> (f.redirect_call (instance));\n+\t    gimple_call_set_arg (call, 2, amount);\n+\t    return call;\n+\t  }\n+      }\n+    return NULL;\n+  }\n+};\n+\n+class svsqadd_impl : public function_base\n+{\n+public:\n+  rtx\n+  expand (function_expander &e) const OVERRIDE\n+  {\n+    machine_mode mode = e.vector_mode (0);\n+    if (e.pred == PRED_x\n+\t&& aarch64_sve_sqadd_sqsub_immediate_p (mode, e.args[2], false))\n+      return e.map_to_rtx_codes (UNKNOWN, US_PLUS, -1);\n+    return e.map_to_unspecs (-1, UNSPEC_USQADD, -1);\n+  }\n+};\n+\n+class svsra_impl : public function_base\n+{\n+public:\n+  rtx\n+  expand (function_expander &e) const OVERRIDE\n+  {\n+    rtx_code shift_code = e.type_suffix (0).unsigned_p ? LSHIFTRT : ASHIFTRT;\n+    machine_mode mode = e.vector_mode (0);\n+    return e.use_exact_insn (code_for_aarch64_sve_add (shift_code, mode));\n+  }\n+};\n+\n+class svstnt1_scatter_impl : public full_width_access\n+{\n+public:\n+  unsigned int\n+  call_properties (const function_instance &) const OVERRIDE\n+  {\n+    return CP_WRITE_MEMORY;\n+  }\n+\n+  rtx\n+  expand (function_expander &e) const OVERRIDE\n+  {\n+    e.prepare_gather_address_operands (1, false);\n+    machine_mode mem_mode = e.memory_vector_mode ();\n+    return e.use_exact_insn (code_for_aarch64_scatter_stnt (mem_mode));\n+  }\n+};\n+\n+/* Implements truncating forms of svstnt1_scatter.  */\n+class svstnt1_scatter_truncate_impl : public truncating_store\n+{\n+public:\n+  CONSTEXPR svstnt1_scatter_truncate_impl (scalar_int_mode to_mode)\n+    : truncating_store (to_mode) {}\n+\n+  rtx\n+  expand (function_expander &e) const OVERRIDE\n+  {\n+    e.prepare_gather_address_operands (1, false);\n+    insn_code icode = code_for_aarch64_scatter_stnt (e.vector_mode (0),\n+\t\t\t\t\t\t     e.memory_vector_mode ());\n+    return e.use_exact_insn (icode);\n+  }\n+};\n+\n+class svtbl2_impl : public quiet<multi_vector_function>\n+{\n+public:\n+  CONSTEXPR svtbl2_impl () : quiet<multi_vector_function> (2) {}\n+\n+  rtx\n+  expand (function_expander &e) const OVERRIDE\n+  {\n+    return e.use_exact_insn (code_for_aarch64_sve2_tbl2 (e.vector_mode (0)));\n+  }\n+};\n+\n+class svuqadd_impl : public function_base\n+{\n+public:\n+  rtx\n+  expand (function_expander &e) const OVERRIDE\n+  {\n+    machine_mode mode = e.vector_mode (0);\n+    if (e.pred == PRED_x\n+\t&& aarch64_sve_arith_immediate_p (mode, e.args[2], false))\n+      return e.use_unpred_insn (code_for_aarch64_sve_suqadd_const (mode));\n+    return e.map_to_unspecs (UNSPEC_SUQADD, -1, -1);\n+  }\n+};\n+\n+/* Implements both svwhilerw and svwhilewr; the unspec parameter decides\n+   between them.  */\n+class svwhilerw_svwhilewr_impl : public full_width_access\n+{\n+public:\n+  CONSTEXPR svwhilerw_svwhilewr_impl (int unspec) : m_unspec (unspec) {}\n+\n+  rtx\n+  expand (function_expander &e) const OVERRIDE\n+  {\n+    return e.use_exact_insn (code_for_while (m_unspec, Pmode, e.gp_mode (0)));\n+  }\n+\n+  int m_unspec;\n+};\n+\n+} /* end anonymous namespace */\n+\n+namespace aarch64_sve {\n+\n+FUNCTION (svaba, svaba_impl,)\n+FUNCTION (svabalb, unspec_based_add_function, (UNSPEC_SABDLB,\n+\t\t\t\t\t       UNSPEC_UABDLB, -1))\n+FUNCTION (svabalt, unspec_based_add_function, (UNSPEC_SABDLT,\n+\t\t\t\t\t       UNSPEC_UABDLT, -1))\n+FUNCTION (svadclb, unspec_based_function, (-1, UNSPEC_ADCLB, -1))\n+FUNCTION (svadclt, unspec_based_function, (-1, UNSPEC_ADCLT, -1))\n+FUNCTION (svaddhnb, unspec_based_function, (UNSPEC_ADDHNB, UNSPEC_ADDHNB, -1))\n+FUNCTION (svaddhnt, unspec_based_function, (UNSPEC_ADDHNT, UNSPEC_ADDHNT, -1))\n+FUNCTION (svabdlb, unspec_based_function, (UNSPEC_SABDLB, UNSPEC_UABDLB, -1))\n+FUNCTION (svabdlt, unspec_based_function, (UNSPEC_SABDLT, UNSPEC_UABDLT, -1))\n+FUNCTION (svadalp, unspec_based_function, (UNSPEC_SADALP, UNSPEC_UADALP, -1))\n+FUNCTION (svaddlb, unspec_based_function, (UNSPEC_SADDLB, UNSPEC_UADDLB, -1))\n+FUNCTION (svaddlbt, unspec_based_function, (UNSPEC_SADDLBT, -1, -1))\n+FUNCTION (svaddlt, unspec_based_function, (UNSPEC_SADDLT, UNSPEC_UADDLT, -1))\n+FUNCTION (svaddwb, unspec_based_function, (UNSPEC_SADDWB, UNSPEC_UADDWB, -1))\n+FUNCTION (svaddwt, unspec_based_function, (UNSPEC_SADDWT, UNSPEC_UADDWT, -1))\n+FUNCTION (svaddp, unspec_based_pred_function, (UNSPEC_ADDP, UNSPEC_ADDP,\n+\t\t\t\t\t       UNSPEC_FADDP))\n+FUNCTION (svaesd, fixed_insn_function, (CODE_FOR_aarch64_sve2_aesd))\n+FUNCTION (svaese, fixed_insn_function, (CODE_FOR_aarch64_sve2_aese))\n+FUNCTION (svaesimc, fixed_insn_function, (CODE_FOR_aarch64_sve2_aesimc))\n+FUNCTION (svaesmc, fixed_insn_function, (CODE_FOR_aarch64_sve2_aesmc))\n+FUNCTION (svbcax, CODE_FOR_MODE0 (aarch64_sve2_bcax),)\n+FUNCTION (svbdep, unspec_based_function, (UNSPEC_BDEP, UNSPEC_BDEP, -1))\n+FUNCTION (svbext, unspec_based_function, (UNSPEC_BEXT, UNSPEC_BEXT, -1))\n+FUNCTION (svbgrp, unspec_based_function, (UNSPEC_BGRP, UNSPEC_BGRP, -1))\n+FUNCTION (svbsl, CODE_FOR_MODE0 (aarch64_sve2_bsl),)\n+FUNCTION (svbsl1n, CODE_FOR_MODE0 (aarch64_sve2_bsl1n),)\n+FUNCTION (svbsl2n, CODE_FOR_MODE0 (aarch64_sve2_bsl2n),)\n+FUNCTION (svcdot, svcdot_impl,)\n+FUNCTION (svcdot_lane, svcdot_lane_impl,)\n+FUNCTION (svcvtlt, unspec_based_function, (-1, -1, UNSPEC_COND_FCVTLT))\n+FUNCTION (svcvtnt, CODE_FOR_MODE1 (aarch64_sve2_cvtnt),)\n+FUNCTION (svcvtx, unspec_based_function, (-1, -1, UNSPEC_COND_FCVTX))\n+FUNCTION (svcvtxnt, CODE_FOR_MODE1 (aarch64_sve2_cvtxnt),)\n+FUNCTION (sveor3, CODE_FOR_MODE0 (aarch64_sve2_eor3),)\n+FUNCTION (sveorbt, unspec_based_function, (UNSPEC_EORBT, UNSPEC_EORBT, -1))\n+FUNCTION (sveortb, unspec_based_function, (UNSPEC_EORTB, UNSPEC_EORTB, -1))\n+FUNCTION (svhadd, unspec_based_function, (UNSPEC_SHADD, UNSPEC_UHADD, -1))\n+FUNCTION (svhsub, unspec_based_function, (UNSPEC_SHSUB, UNSPEC_UHSUB, -1))\n+FUNCTION (svhistcnt, CODE_FOR_MODE0 (aarch64_sve2_histcnt),)\n+FUNCTION (svhistseg, CODE_FOR_MODE0 (aarch64_sve2_histseg),)\n+FUNCTION (svhsubr, unspec_based_function_rotated, (UNSPEC_SHSUB,\n+\t\t\t\t\t\t   UNSPEC_UHSUB, -1))\n+FUNCTION (svldnt1_gather, svldnt1_gather_impl,)\n+FUNCTION (svldnt1sb_gather, svldnt1_gather_extend_impl, (TYPE_SUFFIX_s8))\n+FUNCTION (svldnt1sh_gather, svldnt1_gather_extend_impl, (TYPE_SUFFIX_s16))\n+FUNCTION (svldnt1sw_gather, svldnt1_gather_extend_impl, (TYPE_SUFFIX_s32))\n+FUNCTION (svldnt1ub_gather, svldnt1_gather_extend_impl, (TYPE_SUFFIX_u8))\n+FUNCTION (svldnt1uh_gather, svldnt1_gather_extend_impl, (TYPE_SUFFIX_u16))\n+FUNCTION (svldnt1uw_gather, svldnt1_gather_extend_impl, (TYPE_SUFFIX_u32))\n+FUNCTION (svlogb, unspec_based_function, (-1, -1, UNSPEC_COND_FLOGB))\n+FUNCTION (svmatch, svmatch_svnmatch_impl, (UNSPEC_MATCH))\n+FUNCTION (svmaxp, unspec_based_pred_function, (UNSPEC_SMAXP, UNSPEC_UMAXP,\n+\t\t\t\t\t       UNSPEC_FMAXP))\n+FUNCTION (svmaxnmp, unspec_based_pred_function, (-1, -1, UNSPEC_FMAXNMP))\n+FUNCTION (svminp, unspec_based_pred_function, (UNSPEC_SMINP, UNSPEC_UMINP,\n+\t\t\t\t\t       UNSPEC_FMINP))\n+FUNCTION (svminnmp, unspec_based_pred_function, (-1, -1, UNSPEC_FMINNMP))\n+FUNCTION (svmlalb, unspec_based_mla_function, (UNSPEC_SMULLB,\n+\t\t\t\t\t       UNSPEC_UMULLB, UNSPEC_FMLALB))\n+FUNCTION (svmlalb_lane, unspec_based_mla_lane_function, (UNSPEC_SMULLB,\n+\t\t\t\t\t\t\t UNSPEC_UMULLB,\n+\t\t\t\t\t\t\t UNSPEC_FMLALB))\n+FUNCTION (svmlalt, unspec_based_mla_function, (UNSPEC_SMULLT,\n+\t\t\t\t\t       UNSPEC_UMULLT, UNSPEC_FMLALT))\n+FUNCTION (svmlalt_lane, unspec_based_mla_lane_function, (UNSPEC_SMULLT,\n+\t\t\t\t\t\t\t UNSPEC_UMULLT,\n+\t\t\t\t\t\t\t UNSPEC_FMLALT))\n+FUNCTION (svmlslb, unspec_based_mls_function, (UNSPEC_SMULLB,\n+\t\t\t\t\t       UNSPEC_UMULLB, UNSPEC_FMLSLB))\n+FUNCTION (svmlslb_lane, unspec_based_mls_lane_function, (UNSPEC_SMULLB,\n+\t\t\t\t\t\t\t UNSPEC_UMULLB,\n+\t\t\t\t\t\t\t UNSPEC_FMLSLB))\n+FUNCTION (svmlslt, unspec_based_mls_function, (UNSPEC_SMULLT,\n+\t\t\t\t\t       UNSPEC_UMULLT, UNSPEC_FMLSLT))\n+FUNCTION (svmlslt_lane, unspec_based_mls_lane_function, (UNSPEC_SMULLT,\n+\t\t\t\t\t\t\t UNSPEC_UMULLT,\n+\t\t\t\t\t\t\t UNSPEC_FMLSLT))\n+FUNCTION (svmovlb, svmovl_lb_impl, (UNSPEC_SSHLLB, UNSPEC_USHLLB, -1))\n+FUNCTION (svmovlt, svmovl_lb_impl, (UNSPEC_SSHLLT, UNSPEC_USHLLT, -1))\n+FUNCTION (svmullb, unspec_based_function, (UNSPEC_SMULLB, UNSPEC_UMULLB, -1))\n+FUNCTION (svmullb_lane, unspec_based_lane_function, (UNSPEC_SMULLB,\n+\t\t\t\t\t\t     UNSPEC_UMULLB, -1))\n+FUNCTION (svmullt, unspec_based_function, (UNSPEC_SMULLT, UNSPEC_UMULLT, -1))\n+FUNCTION (svmullt_lane, unspec_based_lane_function, (UNSPEC_SMULLT,\n+\t\t\t\t\t\t     UNSPEC_UMULLT, -1))\n+FUNCTION (svnbsl, CODE_FOR_MODE0 (aarch64_sve2_nbsl),)\n+FUNCTION (svnmatch, svmatch_svnmatch_impl, (UNSPEC_NMATCH))\n+FUNCTION (svpmul, CODE_FOR_MODE0 (aarch64_sve2_pmul),)\n+FUNCTION (svpmullb, unspec_based_function, (-1, UNSPEC_PMULLB, -1))\n+FUNCTION (svpmullb_pair, unspec_based_function, (-1, UNSPEC_PMULLB_PAIR, -1))\n+FUNCTION (svpmullt, unspec_based_function, (-1, UNSPEC_PMULLT, -1))\n+FUNCTION (svpmullt_pair, unspec_based_function, (-1, UNSPEC_PMULLT_PAIR, -1))\n+FUNCTION (svqabs, rtx_code_function, (SS_ABS, UNKNOWN, UNKNOWN))\n+FUNCTION (svqcadd, svqcadd_impl,)\n+FUNCTION (svqdmlalb, unspec_based_qadd_function, (UNSPEC_SQDMULLB, -1, -1))\n+FUNCTION (svqdmlalb_lane, unspec_based_qadd_lane_function, (UNSPEC_SQDMULLB,\n+\t\t\t\t\t\t\t    -1, -1))\n+FUNCTION (svqdmlalbt, unspec_based_qadd_function, (UNSPEC_SQDMULLBT, -1, -1))\n+FUNCTION (svqdmlalt, unspec_based_qadd_function, (UNSPEC_SQDMULLT, -1, -1))\n+FUNCTION (svqdmlalt_lane, unspec_based_qadd_lane_function, (UNSPEC_SQDMULLT,\n+\t\t\t\t\t\t\t    -1, -1))\n+FUNCTION (svqdmlslb, unspec_based_qsub_function, (UNSPEC_SQDMULLB, -1, -1))\n+FUNCTION (svqdmlslb_lane, unspec_based_qsub_lane_function, (UNSPEC_SQDMULLB,\n+\t\t\t\t\t\t\t    -1, -1))\n+FUNCTION (svqdmlslbt, unspec_based_qsub_function, (UNSPEC_SQDMULLBT, -1, -1))\n+FUNCTION (svqdmlslt, unspec_based_qsub_function, (UNSPEC_SQDMULLT, -1, -1))\n+FUNCTION (svqdmlslt_lane, unspec_based_qsub_lane_function, (UNSPEC_SQDMULLT,\n+\t\t\t\t\t\t\t    -1, -1))\n+FUNCTION (svqdmulh, unspec_based_function, (UNSPEC_SQDMULH, -1, -1))\n+FUNCTION (svqdmulh_lane, unspec_based_lane_function, (UNSPEC_SQDMULH, -1, -1))\n+FUNCTION (svqdmullb, unspec_based_function, (UNSPEC_SQDMULLB, -1, -1))\n+FUNCTION (svqdmullb_lane, unspec_based_lane_function, (UNSPEC_SQDMULLB,\n+\t\t\t\t\t\t       -1, -1))\n+FUNCTION (svqdmullt, unspec_based_function, (UNSPEC_SQDMULLT, -1, -1))\n+FUNCTION (svqdmullt_lane, unspec_based_lane_function, (UNSPEC_SQDMULLT,\n+\t\t\t\t\t\t       -1, -1))\n+FUNCTION (svqneg, rtx_code_function, (SS_NEG, UNKNOWN, UNKNOWN))\n+FUNCTION (svqrdcmlah, svqrdcmlah_impl,)\n+FUNCTION (svqrdcmlah_lane, svqrdcmlah_lane_impl,)\n+FUNCTION (svqrdmulh, unspec_based_function, (UNSPEC_SQRDMULH, -1, -1))\n+FUNCTION (svqrdmulh_lane, unspec_based_lane_function, (UNSPEC_SQRDMULH,\n+\t\t\t\t\t\t       -1, -1))\n+FUNCTION (svqrdmlah, unspec_based_function, (UNSPEC_SQRDMLAH, -1, -1))\n+FUNCTION (svqrdmlah_lane, unspec_based_lane_function, (UNSPEC_SQRDMLAH,\n+\t\t\t\t\t\t       -1, -1))\n+FUNCTION (svqrdmlsh, unspec_based_function, (UNSPEC_SQRDMLSH, -1, -1))\n+FUNCTION (svqrdmlsh_lane, unspec_based_lane_function, (UNSPEC_SQRDMLSH,\n+\t\t\t\t\t\t       -1, -1))\n+FUNCTION (svqrshl, svqrshl_impl,)\n+FUNCTION (svqrshrnb, unspec_based_function, (UNSPEC_SQRSHRNB,\n+\t\t\t\t\t     UNSPEC_UQRSHRNB, -1))\n+FUNCTION (svqrshrnt, unspec_based_function, (UNSPEC_SQRSHRNT,\n+\t\t\t\t\t     UNSPEC_UQRSHRNT, -1))\n+FUNCTION (svqrshrunb, unspec_based_function, (UNSPEC_SQRSHRUNB, -1, -1))\n+FUNCTION (svqrshrunt, unspec_based_function, (UNSPEC_SQRSHRUNT, -1, -1))\n+FUNCTION (svqshl, svqshl_impl,)\n+FUNCTION (svqshlu, unspec_based_function, (UNSPEC_SQSHLU, -1, -1))\n+FUNCTION (svqshrnb, unspec_based_function, (UNSPEC_SQSHRNB,\n+\t\t\t\t\t    UNSPEC_UQSHRNB, -1))\n+FUNCTION (svqshrnt, unspec_based_function, (UNSPEC_SQSHRNT,\n+\t\t\t\t\t    UNSPEC_UQSHRNT, -1))\n+FUNCTION (svqshrunb, unspec_based_function, (UNSPEC_SQSHRUNB, -1, -1))\n+FUNCTION (svqshrunt, unspec_based_function, (UNSPEC_SQSHRUNT, -1, -1))\n+FUNCTION (svqsubr, rtx_code_function_rotated, (SS_MINUS, US_MINUS, -1))\n+FUNCTION (svqxtnb, unspec_based_function, (UNSPEC_SQXTNB, UNSPEC_UQXTNB, -1))\n+FUNCTION (svqxtnt, unspec_based_function, (UNSPEC_SQXTNT, UNSPEC_UQXTNT, -1))\n+FUNCTION (svqxtunb, unspec_based_function, (UNSPEC_SQXTUNB, -1, -1))\n+FUNCTION (svqxtunt, unspec_based_function, (UNSPEC_SQXTUNT, -1, -1))\n+FUNCTION (svraddhnb, unspec_based_function, (UNSPEC_RADDHNB,\n+\t\t\t\t\t     UNSPEC_RADDHNB, -1))\n+FUNCTION (svraddhnt, unspec_based_function, (UNSPEC_RADDHNT,\n+\t\t\t\t\t     UNSPEC_RADDHNT, -1))\n+FUNCTION (svrax1, fixed_insn_function, (CODE_FOR_aarch64_sve2_rax1))\n+FUNCTION (svrhadd, unspec_based_function, (UNSPEC_SRHADD, UNSPEC_URHADD, -1))\n+FUNCTION (svrshl, svrshl_impl,)\n+FUNCTION (svrshr, unspec_based_function, (UNSPEC_SRSHR, UNSPEC_URSHR, -1))\n+FUNCTION (svrshrnb, unspec_based_function, (UNSPEC_RSHRNB, UNSPEC_RSHRNB, -1))\n+FUNCTION (svrshrnt, unspec_based_function, (UNSPEC_RSHRNT, UNSPEC_RSHRNT, -1))\n+FUNCTION (svrsra, unspec_based_add_function, (UNSPEC_SRSHR, UNSPEC_URSHR, -1))\n+FUNCTION (svrsubhnb, unspec_based_function, (UNSPEC_RSUBHNB,\n+\t\t\t\t\t     UNSPEC_RSUBHNB, -1))\n+FUNCTION (svrsubhnt, unspec_based_function, (UNSPEC_RSUBHNT,\n+\t\t\t\t\t     UNSPEC_RSUBHNT, -1))\n+FUNCTION (svsbclb, unspec_based_function, (-1, UNSPEC_SBCLB, -1))\n+FUNCTION (svsbclt, unspec_based_function, (-1, UNSPEC_SBCLT, -1))\n+FUNCTION (svshllb, unspec_based_function, (UNSPEC_SSHLLB, UNSPEC_USHLLB, -1))\n+FUNCTION (svshllt, unspec_based_function, (UNSPEC_SSHLLT, UNSPEC_USHLLT, -1))\n+FUNCTION (svshrnb, unspec_based_function, (UNSPEC_SHRNB, UNSPEC_SHRNB, -1))\n+FUNCTION (svshrnt, unspec_based_function, (UNSPEC_SHRNT, UNSPEC_SHRNT, -1))\n+FUNCTION (svsli, unspec_based_function, (UNSPEC_SLI, UNSPEC_SLI, -1))\n+FUNCTION (svsm4e, fixed_insn_function, (CODE_FOR_aarch64_sve2_sm4e))\n+FUNCTION (svsm4ekey, fixed_insn_function, (CODE_FOR_aarch64_sve2_sm4ekey))\n+FUNCTION (svsqadd, svsqadd_impl,)\n+FUNCTION (svsra, svsra_impl,)\n+FUNCTION (svsri, unspec_based_function, (UNSPEC_SRI, UNSPEC_SRI, -1))\n+FUNCTION (svstnt1_scatter, svstnt1_scatter_impl,)\n+FUNCTION (svstnt1b_scatter, svstnt1_scatter_truncate_impl, (QImode))\n+FUNCTION (svstnt1h_scatter, svstnt1_scatter_truncate_impl, (HImode))\n+FUNCTION (svstnt1w_scatter, svstnt1_scatter_truncate_impl, (SImode))\n+FUNCTION (svsubhnb, unspec_based_function, (UNSPEC_SUBHNB, UNSPEC_SUBHNB, -1))\n+FUNCTION (svsubhnt, unspec_based_function, (UNSPEC_SUBHNT, UNSPEC_SUBHNT, -1))\n+FUNCTION (svsublb, unspec_based_function, (UNSPEC_SSUBLB, UNSPEC_USUBLB, -1))\n+FUNCTION (svsublbt, unspec_based_function, (UNSPEC_SSUBLBT, -1, -1))\n+FUNCTION (svsublt, unspec_based_function, (UNSPEC_SSUBLT, UNSPEC_USUBLT, -1))\n+FUNCTION (svsubltb, unspec_based_function, (UNSPEC_SSUBLTB, -1, -1))\n+FUNCTION (svsubwb, unspec_based_function, (UNSPEC_SSUBWB, UNSPEC_USUBWB, -1))\n+FUNCTION (svsubwt, unspec_based_function, (UNSPEC_SSUBWT, UNSPEC_USUBWT, -1))\n+FUNCTION (svtbl2, svtbl2_impl,)\n+FUNCTION (svtbx, CODE_FOR_MODE0 (aarch64_sve2_tbx),)\n+FUNCTION (svuqadd, svuqadd_impl,)\n+FUNCTION (svwhilege, while_comparison, (UNSPEC_WHILEGE, UNSPEC_WHILEHS))\n+FUNCTION (svwhilegt, while_comparison, (UNSPEC_WHILEGT, UNSPEC_WHILEHI))\n+FUNCTION (svwhilerw, svwhilerw_svwhilewr_impl, (UNSPEC_WHILERW))\n+FUNCTION (svwhilewr, svwhilerw_svwhilewr_impl, (UNSPEC_WHILEWR))\n+FUNCTION (svxar, CODE_FOR_MODE0 (aarch64_sve2_xar),)\n+\n+} /* end namespace aarch64_sve */"}, {"sha": "5ab41c3a5213e036c9f35e7699626265ca0d220e", "filename": "gcc/config/aarch64/aarch64-sve-builtins-sve2.def", "status": "added", "additions": 214, "deletions": 0, "changes": 214, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-sve2.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-sve2.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-sve2.def?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,214 @@\n+/* ACLE support for AArch64 SVE (__ARM_FEATURE_SVE intrinsics)\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#define REQUIRED_EXTENSIONS AARCH64_FL_SVE2\n+DEF_SVE_FUNCTION (svaba, ternary_opt_n, all_integer, none)\n+DEF_SVE_FUNCTION (svabalb, ternary_long_opt_n, hsd_integer, none)\n+DEF_SVE_FUNCTION (svabalt, ternary_long_opt_n, hsd_integer, none)\n+DEF_SVE_FUNCTION (svadalp, binary_wide, hsd_integer, mxz)\n+DEF_SVE_FUNCTION (svadclb, ternary_opt_n, sd_unsigned, none)\n+DEF_SVE_FUNCTION (svadclt, ternary_opt_n, sd_unsigned, none)\n+DEF_SVE_FUNCTION (svaddhnb, binary_narrowb_opt_n, hsd_integer, none)\n+DEF_SVE_FUNCTION (svaddhnt, binary_narrowt_opt_n, hsd_integer, none)\n+DEF_SVE_FUNCTION (svabdlb, binary_long_opt_n, hsd_integer, none)\n+DEF_SVE_FUNCTION (svabdlt, binary_long_opt_n, hsd_integer, none)\n+DEF_SVE_FUNCTION (svaddlb, binary_long_opt_n, hsd_integer, none)\n+DEF_SVE_FUNCTION (svaddlbt, binary_long_opt_n, hsd_signed, none)\n+DEF_SVE_FUNCTION (svaddlt, binary_long_opt_n, hsd_integer, none)\n+DEF_SVE_FUNCTION (svaddp, binary, all_data, mx)\n+DEF_SVE_FUNCTION (svaddwb, binary_wide_opt_n, hsd_integer, none)\n+DEF_SVE_FUNCTION (svaddwt, binary_wide_opt_n, hsd_integer, none)\n+DEF_SVE_FUNCTION (svbcax, ternary_opt_n, all_integer, none)\n+DEF_SVE_FUNCTION (svbsl, ternary_opt_n, all_integer, none)\n+DEF_SVE_FUNCTION (svbsl1n, ternary_opt_n, all_integer, none)\n+DEF_SVE_FUNCTION (svbsl2n, ternary_opt_n, all_integer, none)\n+DEF_SVE_FUNCTION (svcadd, binary_rotate, all_integer, none)\n+DEF_SVE_FUNCTION (svcdot, ternary_qq_rotate, sd_signed, none)\n+DEF_SVE_FUNCTION (svcdot_lane, ternary_qq_lane_rotate, sd_signed, none)\n+DEF_SVE_FUNCTION (svcmla, ternary_rotate, all_integer, none)\n+DEF_SVE_FUNCTION (svcmla_lane, ternary_lane_rotate, hs_integer, none)\n+DEF_SVE_FUNCTION (svcvtlt, unary_convert, cvt_long, mx)\n+DEF_SVE_FUNCTION (svcvtnt, unary_convert_narrowt, cvt_narrow, mx)\n+DEF_SVE_FUNCTION (svcvtx, unary_convert, cvt_narrow_s, mxz)\n+DEF_SVE_FUNCTION (svcvtxnt, unary_convert_narrowt, cvt_narrow_s, mx)\n+DEF_SVE_FUNCTION (sveor3, ternary_opt_n, all_integer, none)\n+DEF_SVE_FUNCTION (sveorbt, ternary_opt_n, all_integer, none)\n+DEF_SVE_FUNCTION (sveortb, ternary_opt_n, all_integer, none)\n+DEF_SVE_FUNCTION (svhadd, binary_opt_n, all_integer, mxz)\n+DEF_SVE_FUNCTION (svhistcnt, binary_to_uint, sd_integer, z)\n+DEF_SVE_FUNCTION (svhistseg, binary_to_uint, b_integer, none)\n+DEF_SVE_FUNCTION (svhsub, binary_opt_n, all_integer, mxz)\n+DEF_SVE_FUNCTION (svhsubr, binary_opt_n, all_integer, mxz)\n+DEF_SVE_FUNCTION (svldnt1_gather, load_gather_sv_restricted, sd_data, implicit)\n+DEF_SVE_FUNCTION (svldnt1_gather, load_gather_vs, sd_data, implicit)\n+DEF_SVE_FUNCTION (svldnt1sb_gather, load_ext_gather_offset_restricted, sd_integer, implicit)\n+DEF_SVE_FUNCTION (svldnt1sh_gather, load_ext_gather_offset_restricted, sd_integer, implicit)\n+DEF_SVE_FUNCTION (svldnt1sh_gather, load_ext_gather_index_restricted, sd_integer, implicit)\n+DEF_SVE_FUNCTION (svldnt1sw_gather, load_ext_gather_offset_restricted, d_integer, implicit)\n+DEF_SVE_FUNCTION (svldnt1sw_gather, load_ext_gather_index_restricted, d_integer, implicit)\n+DEF_SVE_FUNCTION (svldnt1ub_gather, load_ext_gather_offset_restricted, sd_integer, implicit)\n+DEF_SVE_FUNCTION (svldnt1uh_gather, load_ext_gather_offset_restricted, sd_integer, implicit)\n+DEF_SVE_FUNCTION (svldnt1uh_gather, load_ext_gather_index_restricted, sd_integer, implicit)\n+DEF_SVE_FUNCTION (svldnt1uw_gather, load_ext_gather_offset_restricted, d_integer, implicit)\n+DEF_SVE_FUNCTION (svldnt1uw_gather, load_ext_gather_index_restricted, d_integer, implicit)\n+DEF_SVE_FUNCTION (svlogb, unary_to_int, all_float, mxz)\n+DEF_SVE_FUNCTION (svmatch, compare, bh_integer, implicit)\n+DEF_SVE_FUNCTION (svmaxp, binary, all_data, mx)\n+DEF_SVE_FUNCTION (svmaxnmp, binary, all_float, mx)\n+DEF_SVE_FUNCTION (svmla_lane, ternary_lane, hsd_integer, none)\n+DEF_SVE_FUNCTION (svmlalb, ternary_long_opt_n, s_float_hsd_integer, none)\n+DEF_SVE_FUNCTION (svmlalb_lane, ternary_long_lane, s_float_sd_integer, none)\n+DEF_SVE_FUNCTION (svmlalt, ternary_long_opt_n, s_float_hsd_integer, none)\n+DEF_SVE_FUNCTION (svmlalt_lane, ternary_long_lane, s_float_sd_integer, none)\n+DEF_SVE_FUNCTION (svmls_lane, ternary_lane, hsd_integer, none)\n+DEF_SVE_FUNCTION (svmlslb, ternary_long_opt_n, s_float_hsd_integer, none)\n+DEF_SVE_FUNCTION (svmlslb_lane, ternary_long_lane, s_float_sd_integer, none)\n+DEF_SVE_FUNCTION (svmlslt, ternary_long_opt_n, s_float_hsd_integer, none)\n+DEF_SVE_FUNCTION (svmlslt_lane, ternary_long_lane, s_float_sd_integer, none)\n+DEF_SVE_FUNCTION (svminp, binary, all_data, mx)\n+DEF_SVE_FUNCTION (svminnmp, binary, all_float, mx)\n+DEF_SVE_FUNCTION (svmovlb, unary_long, hsd_integer, none)\n+DEF_SVE_FUNCTION (svmovlt, unary_long, hsd_integer, none)\n+DEF_SVE_FUNCTION (svmul_lane, binary_lane, hsd_integer, none)\n+DEF_SVE_FUNCTION (svmullb, binary_long_opt_n, hsd_integer, none)\n+DEF_SVE_FUNCTION (svmullb_lane, binary_long_lane, sd_integer, none)\n+DEF_SVE_FUNCTION (svmullt, binary_long_opt_n, hsd_integer, none)\n+DEF_SVE_FUNCTION (svmullt_lane, binary_long_lane, sd_integer, none)\n+DEF_SVE_FUNCTION (svnbsl, ternary_opt_n, all_integer, none)\n+DEF_SVE_FUNCTION (svnmatch, compare, bh_integer, implicit)\n+DEF_SVE_FUNCTION (svpmul, binary_opt_n, b_unsigned, none)\n+DEF_SVE_FUNCTION (svpmullb, binary_long_opt_n, hd_unsigned, none)\n+DEF_SVE_FUNCTION (svpmullb_pair, binary_opt_n, bs_unsigned, none)\n+DEF_SVE_FUNCTION (svpmullt, binary_long_opt_n, hd_unsigned, none)\n+DEF_SVE_FUNCTION (svpmullt_pair, binary_opt_n, bs_unsigned, none)\n+DEF_SVE_FUNCTION (svqabs, unary, all_signed, mxz)\n+DEF_SVE_FUNCTION (svqadd, binary_opt_n, all_integer, mxz)\n+DEF_SVE_FUNCTION (svqcadd, binary_rotate, all_signed, none)\n+DEF_SVE_FUNCTION (svqdmlalb, ternary_long_opt_n, hsd_signed, none)\n+DEF_SVE_FUNCTION (svqdmlalb_lane, ternary_long_lane, sd_signed, none)\n+DEF_SVE_FUNCTION (svqdmlalbt, ternary_long_opt_n, hsd_signed, none)\n+DEF_SVE_FUNCTION (svqdmlalt, ternary_long_opt_n, hsd_signed, none)\n+DEF_SVE_FUNCTION (svqdmlalt_lane, ternary_long_lane, sd_signed, none)\n+DEF_SVE_FUNCTION (svqdmlslb, ternary_long_opt_n, hsd_signed, none)\n+DEF_SVE_FUNCTION (svqdmlslb_lane, ternary_long_lane, sd_signed, none)\n+DEF_SVE_FUNCTION (svqdmlslbt, ternary_long_opt_n, hsd_signed, none)\n+DEF_SVE_FUNCTION (svqdmlslt, ternary_long_opt_n, hsd_signed, none)\n+DEF_SVE_FUNCTION (svqdmlslt_lane, ternary_long_lane, sd_signed, none)\n+DEF_SVE_FUNCTION (svqdmulh, binary_opt_n, all_signed, none)\n+DEF_SVE_FUNCTION (svqdmulh_lane, binary_lane, hsd_signed, none)\n+DEF_SVE_FUNCTION (svqdmullb, binary_long_opt_n, hsd_signed, none)\n+DEF_SVE_FUNCTION (svqdmullb_lane, binary_long_lane, sd_signed, none)\n+DEF_SVE_FUNCTION (svqdmullt, binary_long_opt_n, hsd_signed, none)\n+DEF_SVE_FUNCTION (svqdmullt_lane, binary_long_lane, sd_signed, none)\n+DEF_SVE_FUNCTION (svqneg, unary, all_signed, mxz)\n+DEF_SVE_FUNCTION (svqrdmulh, binary_opt_n, all_signed, none)\n+DEF_SVE_FUNCTION (svqrdmulh_lane, binary_lane, hsd_signed, none)\n+DEF_SVE_FUNCTION (svqrdmlah, ternary_opt_n, all_signed, none)\n+DEF_SVE_FUNCTION (svqrdmlah_lane, ternary_lane, hsd_signed, none)\n+DEF_SVE_FUNCTION (svqrdmlsh, ternary_opt_n, all_signed, none)\n+DEF_SVE_FUNCTION (svqrdmlsh_lane, ternary_lane, hsd_signed, none)\n+DEF_SVE_FUNCTION (svqrdcmlah, ternary_rotate, all_signed, none)\n+DEF_SVE_FUNCTION (svqrdcmlah_lane, ternary_lane_rotate, hs_signed, none)\n+DEF_SVE_FUNCTION (svqrshrnb, shift_right_imm_narrowb, hsd_integer, none)\n+DEF_SVE_FUNCTION (svqrshrnt, shift_right_imm_narrowt, hsd_integer, none)\n+DEF_SVE_FUNCTION (svqrshrunb, shift_right_imm_narrowb_to_uint, hsd_signed, none)\n+DEF_SVE_FUNCTION (svqrshrunt, shift_right_imm_narrowt_to_uint, hsd_signed, none)\n+DEF_SVE_FUNCTION (svqshl, binary_int_opt_n, all_integer, mxz)\n+DEF_SVE_FUNCTION (svqshlu, shift_left_imm_to_uint, all_signed, mxz)\n+DEF_SVE_FUNCTION (svqshrnb, shift_right_imm_narrowb, hsd_integer, none)\n+DEF_SVE_FUNCTION (svqshrnt, shift_right_imm_narrowt, hsd_integer, none)\n+DEF_SVE_FUNCTION (svqshrunb, shift_right_imm_narrowb_to_uint, hsd_signed, none)\n+DEF_SVE_FUNCTION (svqshrunt, shift_right_imm_narrowt_to_uint, hsd_signed, none)\n+DEF_SVE_FUNCTION (svqrshl, binary_int_opt_n, all_integer, mxz)\n+DEF_SVE_FUNCTION (svqsub, binary_opt_n, all_integer, mxz)\n+DEF_SVE_FUNCTION (svqsubr, binary_opt_n, all_integer, mxz)\n+DEF_SVE_FUNCTION (svqxtnb, unary_narrowb, hsd_integer, none)\n+DEF_SVE_FUNCTION (svqxtnt, unary_narrowt, hsd_integer, none)\n+DEF_SVE_FUNCTION (svqxtunb, unary_narrowb_to_uint, hsd_signed, none)\n+DEF_SVE_FUNCTION (svqxtunt, unary_narrowt_to_uint, hsd_signed, none)\n+DEF_SVE_FUNCTION (svraddhnb, binary_narrowb_opt_n, hsd_integer, none)\n+DEF_SVE_FUNCTION (svraddhnt, binary_narrowt_opt_n, hsd_integer, none)\n+DEF_SVE_FUNCTION (svrecpe, unary, s_unsigned, mxz)\n+DEF_SVE_FUNCTION (svrhadd, binary_opt_n, all_integer, mxz)\n+DEF_SVE_FUNCTION (svrsqrte, unary, s_unsigned, mxz)\n+DEF_SVE_FUNCTION (svrshl, binary_int_opt_n, all_integer, mxz)\n+DEF_SVE_FUNCTION (svrshr, shift_right_imm, all_integer, mxz)\n+DEF_SVE_FUNCTION (svrshrnb, shift_right_imm_narrowb, hsd_integer, none)\n+DEF_SVE_FUNCTION (svrshrnt, shift_right_imm_narrowt, hsd_integer, none)\n+DEF_SVE_FUNCTION (svrsra, ternary_shift_right_imm, all_integer, none)\n+DEF_SVE_FUNCTION (svrsubhnb, binary_narrowb_opt_n, hsd_integer, none)\n+DEF_SVE_FUNCTION (svrsubhnt, binary_narrowt_opt_n, hsd_integer, none)\n+DEF_SVE_FUNCTION (svsbclb, ternary_opt_n, sd_unsigned, none)\n+DEF_SVE_FUNCTION (svsbclt, ternary_opt_n, sd_unsigned, none)\n+DEF_SVE_FUNCTION (svshllb, shift_left_imm_long, hsd_integer, none)\n+DEF_SVE_FUNCTION (svshllt, shift_left_imm_long, hsd_integer, none)\n+DEF_SVE_FUNCTION (svshrnb, shift_right_imm_narrowb, hsd_integer, none)\n+DEF_SVE_FUNCTION (svshrnt, shift_right_imm_narrowt, hsd_integer, none)\n+DEF_SVE_FUNCTION (svsli, ternary_shift_left_imm, all_integer, none)\n+DEF_SVE_FUNCTION (svsqadd, binary_int_opt_n, all_unsigned, mxz)\n+DEF_SVE_FUNCTION (svsra, ternary_shift_right_imm, all_integer, none)\n+DEF_SVE_FUNCTION (svsri, ternary_shift_right_imm, all_integer, none)\n+DEF_SVE_FUNCTION (svstnt1_scatter, store_scatter_index_restricted, sd_data, implicit)\n+DEF_SVE_FUNCTION (svstnt1_scatter, store_scatter_offset_restricted, sd_data, implicit)\n+DEF_SVE_FUNCTION (svstnt1b_scatter, store_scatter_offset_restricted, sd_integer, implicit)\n+DEF_SVE_FUNCTION (svstnt1h_scatter, store_scatter_index_restricted, sd_integer, implicit)\n+DEF_SVE_FUNCTION (svstnt1h_scatter, store_scatter_offset_restricted, sd_integer, implicit)\n+DEF_SVE_FUNCTION (svstnt1w_scatter, store_scatter_index_restricted, d_integer, implicit)\n+DEF_SVE_FUNCTION (svstnt1w_scatter, store_scatter_offset_restricted, d_integer, implicit)\n+DEF_SVE_FUNCTION (svsubhnb, binary_narrowb_opt_n, hsd_integer, none)\n+DEF_SVE_FUNCTION (svsubhnt, binary_narrowt_opt_n, hsd_integer, none)\n+DEF_SVE_FUNCTION (svsublb, binary_long_opt_n, hsd_integer, none)\n+DEF_SVE_FUNCTION (svsublbt, binary_long_opt_n, hsd_signed, none)\n+DEF_SVE_FUNCTION (svsublt, binary_long_opt_n, hsd_integer, none)\n+DEF_SVE_FUNCTION (svsubltb, binary_long_opt_n, hsd_signed, none)\n+DEF_SVE_FUNCTION (svsubwb, binary_wide_opt_n, hsd_integer, none)\n+DEF_SVE_FUNCTION (svsubwt, binary_wide_opt_n, hsd_integer, none)\n+DEF_SVE_FUNCTION (svtbl2, tbl_tuple, all_data, none)\n+DEF_SVE_FUNCTION (svtbx, ternary_uint, all_data, none)\n+DEF_SVE_FUNCTION (svuqadd, binary_uint_opt_n, all_signed, mxz)\n+DEF_SVE_FUNCTION (svwhilege, compare_scalar, while, none)\n+DEF_SVE_FUNCTION (svwhilegt, compare_scalar, while, none)\n+DEF_SVE_FUNCTION (svwhilerw, compare_ptr, all_data, none)\n+DEF_SVE_FUNCTION (svwhilewr, compare_ptr, all_data, none)\n+DEF_SVE_FUNCTION (svxar, ternary_shift_right_imm, all_integer, none)\n+#undef REQUIRED_EXTENSIONS\n+\n+#define REQUIRED_EXTENSIONS (AARCH64_FL_SVE2 | AARCH64_FL_SVE2_AES)\n+DEF_SVE_FUNCTION (svaesd, binary, b_unsigned, none)\n+DEF_SVE_FUNCTION (svaese, binary, b_unsigned, none)\n+DEF_SVE_FUNCTION (svaesmc, unary, b_unsigned, none)\n+DEF_SVE_FUNCTION (svaesimc, unary, b_unsigned, none)\n+DEF_SVE_FUNCTION (svpmullb_pair, binary_opt_n, d_unsigned, none)\n+DEF_SVE_FUNCTION (svpmullt_pair, binary_opt_n, d_unsigned, none)\n+#undef REQUIRED_EXTENSIONS\n+\n+#define REQUIRED_EXTENSIONS (AARCH64_FL_SVE2 | AARCH64_FL_SVE2_BITPERM)\n+DEF_SVE_FUNCTION (svbdep, binary_opt_n, all_unsigned, none)\n+DEF_SVE_FUNCTION (svbext, binary_opt_n, all_unsigned, none)\n+DEF_SVE_FUNCTION (svbgrp, binary_opt_n, all_unsigned, none)\n+#undef REQUIRED_EXTENSIONS\n+\n+#define REQUIRED_EXTENSIONS (AARCH64_FL_SVE2 | AARCH64_FL_SVE2_SHA3)\n+DEF_SVE_FUNCTION (svrax1, binary, d_integer, none)\n+#undef REQUIRED_EXTENSIONS\n+\n+#define REQUIRED_EXTENSIONS (AARCH64_FL_SVE2 | AARCH64_FL_SVE2_SM4)\n+DEF_SVE_FUNCTION (svsm4e, binary, s_unsigned, none)\n+DEF_SVE_FUNCTION (svsm4ekey, binary, s_unsigned, none)\n+#undef REQUIRED_EXTENSIONS"}, {"sha": "90e29fc0a924e133a844f7d90bfad38369000a4c", "filename": "gcc/config/aarch64/aarch64-sve-builtins-sve2.h", "status": "added", "additions": 191, "deletions": 0, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-sve2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-sve2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-sve2.h?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,191 @@\n+/* ACLE support for AArch64 SVE (__ARM_FEATURE_SVE intrinsics)\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_AARCH64_SVE_BUILTINS_SVE2_H\n+#define GCC_AARCH64_SVE_BUILTINS_SVE2_H\n+\n+namespace aarch64_sve\n+{\n+  namespace functions\n+  {\n+    extern const function_base *const svaba;\n+    extern const function_base *const svabalb;\n+    extern const function_base *const svabalt;\n+    extern const function_base *const svabdlb;\n+    extern const function_base *const svabdlt;\n+    extern const function_base *const svadalp;\n+    extern const function_base *const svadclb;\n+    extern const function_base *const svadclt;\n+    extern const function_base *const svaddhnb;\n+    extern const function_base *const svaddhnt;\n+    extern const function_base *const svaddlb;\n+    extern const function_base *const svaddlbt;\n+    extern const function_base *const svaddlt;\n+    extern const function_base *const svaddp;\n+    extern const function_base *const svaddwb;\n+    extern const function_base *const svaddwt;\n+    extern const function_base *const svaesd;\n+    extern const function_base *const svaese;\n+    extern const function_base *const svaesimc;\n+    extern const function_base *const svaesmc;\n+    extern const function_base *const svbcax;\n+    extern const function_base *const svbdep;\n+    extern const function_base *const svbext;\n+    extern const function_base *const svbgrp;\n+    extern const function_base *const svbsl;\n+    extern const function_base *const svbsl1n;\n+    extern const function_base *const svbsl2n;\n+    extern const function_base *const svcdot;\n+    extern const function_base *const svcdot_lane;\n+    extern const function_base *const svcvtlt;\n+    extern const function_base *const svcvtnt;\n+    extern const function_base *const svcvtx;\n+    extern const function_base *const svcvtxnt;\n+    extern const function_base *const sveor3;\n+    extern const function_base *const sveorbt;\n+    extern const function_base *const sveortb;\n+    extern const function_base *const svhadd;\n+    extern const function_base *const svhistcnt;\n+    extern const function_base *const svhistseg;\n+    extern const function_base *const svhsub;\n+    extern const function_base *const svhsubr;\n+    extern const function_base *const svldnt1_gather;\n+    extern const function_base *const svldnt1sb_gather;\n+    extern const function_base *const svldnt1sh_gather;\n+    extern const function_base *const svldnt1sw_gather;\n+    extern const function_base *const svldnt1ub_gather;\n+    extern const function_base *const svldnt1uh_gather;\n+    extern const function_base *const svldnt1uw_gather;\n+    extern const function_base *const svlogb;\n+    extern const function_base *const svmatch;\n+    extern const function_base *const svmaxp;\n+    extern const function_base *const svmaxnmp;\n+    extern const function_base *const svmlalb;\n+    extern const function_base *const svmlalb_lane;\n+    extern const function_base *const svmlalt;\n+    extern const function_base *const svmlalt_lane;\n+    extern const function_base *const svmlslb;\n+    extern const function_base *const svmlslb_lane;\n+    extern const function_base *const svmlslt;\n+    extern const function_base *const svmlslt_lane;\n+    extern const function_base *const svminp;\n+    extern const function_base *const svminnmp;\n+    extern const function_base *const svmovlb;\n+    extern const function_base *const svmovlt;\n+    extern const function_base *const svmullb;\n+    extern const function_base *const svmullb_lane;\n+    extern const function_base *const svmullt;\n+    extern const function_base *const svmullt_lane;\n+    extern const function_base *const svnbsl;\n+    extern const function_base *const svnmatch;\n+    extern const function_base *const svpmul;\n+    extern const function_base *const svpmullb;\n+    extern const function_base *const svpmullb_pair;\n+    extern const function_base *const svpmullt;\n+    extern const function_base *const svpmullt_pair;\n+    extern const function_base *const svqabs;\n+    extern const function_base *const svqcadd;\n+    extern const function_base *const svqdmlalb;\n+    extern const function_base *const svqdmlalb_lane;\n+    extern const function_base *const svqdmlalbt;\n+    extern const function_base *const svqdmlalt;\n+    extern const function_base *const svqdmlalt_lane;\n+    extern const function_base *const svqdmlslb;\n+    extern const function_base *const svqdmlslb_lane;\n+    extern const function_base *const svqdmlslbt;\n+    extern const function_base *const svqdmlslt;\n+    extern const function_base *const svqdmlslt_lane;\n+    extern const function_base *const svqdmulh;\n+    extern const function_base *const svqdmulh_lane;\n+    extern const function_base *const svqdmullb;\n+    extern const function_base *const svqdmullb_lane;\n+    extern const function_base *const svqdmullt;\n+    extern const function_base *const svqdmullt_lane;\n+    extern const function_base *const svqneg;\n+    extern const function_base *const svqrdcmlah;\n+    extern const function_base *const svqrdcmlah_lane;\n+    extern const function_base *const svqrdmulh;\n+    extern const function_base *const svqrdmulh_lane;\n+    extern const function_base *const svqrdmlah;\n+    extern const function_base *const svqrdmlah_lane;\n+    extern const function_base *const svqrdmlsh;\n+    extern const function_base *const svqrdmlsh_lane;\n+    extern const function_base *const svqrshl;\n+    extern const function_base *const svqrshrnb;\n+    extern const function_base *const svqrshrnt;\n+    extern const function_base *const svqrshrunb;\n+    extern const function_base *const svqrshrunt;\n+    extern const function_base *const svqshl;\n+    extern const function_base *const svqshlu;\n+    extern const function_base *const svqshrnb;\n+    extern const function_base *const svqshrnt;\n+    extern const function_base *const svqshrunb;\n+    extern const function_base *const svqshrunt;\n+    extern const function_base *const svqsubr;\n+    extern const function_base *const svqxtnb;\n+    extern const function_base *const svqxtnt;\n+    extern const function_base *const svqxtunb;\n+    extern const function_base *const svqxtunt;\n+    extern const function_base *const svraddhnb;\n+    extern const function_base *const svraddhnt;\n+    extern const function_base *const svrax1;\n+    extern const function_base *const svrhadd;\n+    extern const function_base *const svrshl;\n+    extern const function_base *const svrshr;\n+    extern const function_base *const svrshrnb;\n+    extern const function_base *const svrshrnt;\n+    extern const function_base *const svrsra;\n+    extern const function_base *const svrsubhnb;\n+    extern const function_base *const svrsubhnt;\n+    extern const function_base *const svsbclb;\n+    extern const function_base *const svsbclt;\n+    extern const function_base *const svshllb;\n+    extern const function_base *const svshllt;\n+    extern const function_base *const svshrnb;\n+    extern const function_base *const svshrnt;\n+    extern const function_base *const svsli;\n+    extern const function_base *const svsm4e;\n+    extern const function_base *const svsm4ekey;\n+    extern const function_base *const svsqadd;\n+    extern const function_base *const svsra;\n+    extern const function_base *const svsri;\n+    extern const function_base *const svstnt1_scatter;\n+    extern const function_base *const svstnt1b_scatter;\n+    extern const function_base *const svstnt1h_scatter;\n+    extern const function_base *const svstnt1w_scatter;\n+    extern const function_base *const svsubhnb;\n+    extern const function_base *const svsubhnt;\n+    extern const function_base *const svsublb;\n+    extern const function_base *const svsublbt;\n+    extern const function_base *const svsublt;\n+    extern const function_base *const svsubltb;\n+    extern const function_base *const svsubwb;\n+    extern const function_base *const svsubwt;\n+    extern const function_base *const svtbl2;\n+    extern const function_base *const svtbx;\n+    extern const function_base *const svuqadd;\n+    extern const function_base *const svwhilege;\n+    extern const function_base *const svwhilegt;\n+    extern const function_base *const svwhilerw;\n+    extern const function_base *const svwhilewr;\n+    extern const function_base *const svxar;\n+  }\n+}\n+\n+#endif"}, {"sha": "7aab5bdd0e9a26891b7dec4aaa5729b73252235c", "filename": "gcc/config/aarch64/aarch64-sve-builtins.cc", "status": "modified", "additions": 254, "deletions": 37, "changes": 291, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -50,6 +50,7 @@\n #include \"attribs.h\"\n #include \"aarch64-sve-builtins.h\"\n #include \"aarch64-sve-builtins-base.h\"\n+#include \"aarch64-sve-builtins-sve2.h\"\n #include \"aarch64-sve-builtins-shapes.h\"\n \n namespace aarch64_sve {\n@@ -190,6 +191,24 @@ CONSTEXPR const type_suffix_info type_suffixes[NUM_TYPE_SUFFIXES + 1] = {\n #define TYPES_b(S, D) \\\n   S (b)\n \n+/* _u8.  */\n+#define TYPES_b_unsigned(S, D) \\\n+  S (u8)\n+\n+/* _s8\n+   _u8.  */\n+#define TYPES_b_integer(S, D) \\\n+  S (s8), TYPES_b_unsigned (S, D)\n+\n+/* _s8 _s16\n+   _u8 _u16.  */\n+#define TYPES_bh_integer(S, D) \\\n+  S (s8), S (s16), S (u8), S (u16)\n+\n+/* _u8 _u32.  */\n+#define TYPES_bs_unsigned(S, D) \\\n+  S (u8), S (u32)\n+\n /* _s8 _s16 _s32.  */\n #define TYPES_bhs_signed(S, D) \\\n   S (s8), S (s16), S (s32)\n@@ -208,23 +227,64 @@ CONSTEXPR const type_suffix_info type_suffixes[NUM_TYPE_SUFFIXES + 1] = {\n #define TYPES_h_integer(S, D) \\\n   S (s16), S (u16)\n \n+/* _s16 _s32.  */\n+#define TYPES_hs_signed(S, D) \\\n+  S (s16), S (s32)\n+\n+/* _s16 _s32\n+   _u16 _u32.  */\n+#define TYPES_hs_integer(S, D) \\\n+  TYPES_hs_signed (S, D), S (u16), S (u32)\n+\n /* _f16 _f32.  */\n #define TYPES_hs_float(S, D) \\\n   S (f16), S (f32)\n \n+/* _u16 _u64.  */\n+#define TYPES_hd_unsigned(S, D) \\\n+  S (u16), S (u64)\n+\n+/* _s16 _s32 _s64.  */\n+#define TYPES_hsd_signed(S, D) \\\n+  S (s16), S (s32), S (s64)\n+\n /* _s16 _s32 _s64\n    _u16 _u32 _u64.  */\n #define TYPES_hsd_integer(S, D) \\\n-  S (s16), S (s32), S (s64), S (u16), S (u32), S (u64)\n+  TYPES_hsd_signed (S, D), S (u16), S (u32), S (u64)\n+\n+/*      _f32\n+   _s16 _s32 _s64\n+   _u16 _u32 _u64.  */\n+#define TYPES_s_float_hsd_integer(S, D) \\\n+  S (f32), TYPES_hsd_integer (S, D)\n+\n+/* _f32\n+   _s32 _s64\n+   _u32 _u64.  */\n+#define TYPES_s_float_sd_integer(S, D) \\\n+  S (f32), TYPES_sd_integer (S, D)\n+\n+/* _u32.  */\n+#define TYPES_s_unsigned(S, D) \\\n+  S (u32)\n \n /* _s32 _u32.  */\n #define TYPES_s_integer(S, D) \\\n-  S (s32), S (u32)\n+  S (s32), TYPES_s_unsigned (S, D)\n+\n+/* _s32 _s64.  */\n+#define TYPES_sd_signed(S, D) \\\n+  S (s32), S (s64)\n+\n+/* _u32 _u64.  */\n+#define TYPES_sd_unsigned(S, D) \\\n+  S (u32), S (u64)\n \n /* _s32 _s64\n    _u32 _u64.  */\n #define TYPES_sd_integer(S, D) \\\n-  S (s32), S (s64), S (u32), S (u64)\n+  TYPES_sd_signed (S, D), TYPES_sd_unsigned (S, D)\n \n /* _f32 _f64\n    _s32 _s64\n@@ -238,10 +298,20 @@ CONSTEXPR const type_suffix_info type_suffixes[NUM_TYPE_SUFFIXES + 1] = {\n #define TYPES_all_float_and_sd_integer(S, D) \\\n   TYPES_all_float (S, D), TYPES_sd_integer (S, D)\n \n+/* _u64.  */\n+#define TYPES_d_unsigned(S, D) \\\n+  S (u64)\n+\n /* _s64\n    _u64.  */\n #define TYPES_d_integer(S, D) \\\n-  S (s64), S (u64)\n+  S (s64), TYPES_d_unsigned (S, D)\n+\n+/* _f64\n+   _s64\n+   _u64.  */\n+#define TYPES_d_data(S, D) \\\n+  S (f64), TYPES_d_integer (S, D)\n \n /* All the type combinations allowed by svcvt.  */\n #define TYPES_cvt(S, D) \\\n@@ -265,6 +335,20 @@ CONSTEXPR const type_suffix_info type_suffixes[NUM_TYPE_SUFFIXES + 1] = {\n   D (u32, f16), D (u32, f32), D (u32, f64), \\\n   D (u64, f16), D (u64, f32), D (u64, f64)\n \n+/* _f32_f16\n+   _f64_f32.  */\n+#define TYPES_cvt_long(S, D) \\\n+  D (f32, f16), D (f64, f32)\n+\n+/* _f16_f32.  */\n+#define TYPES_cvt_narrow_s(S, D) \\\n+  D (f32, f64)\n+\n+/* _f16_f32\n+   _f32_f64.  */\n+#define TYPES_cvt_narrow(S, D) \\\n+  D (f16, f32), TYPES_cvt_narrow_s (S, D)\n+\n /* { _s32 _s64 } x { _b8 _b16 _b32 _b64 }\n    { _u32 _u64 }.  */\n #define TYPES_inc_dec_n1(D, A) \\\n@@ -334,18 +418,36 @@ DEF_SVE_TYPES_ARRAY (all_unsigned);\n DEF_SVE_TYPES_ARRAY (all_integer);\n DEF_SVE_TYPES_ARRAY (all_data);\n DEF_SVE_TYPES_ARRAY (b);\n+DEF_SVE_TYPES_ARRAY (b_unsigned);\n+DEF_SVE_TYPES_ARRAY (b_integer);\n+DEF_SVE_TYPES_ARRAY (bh_integer);\n+DEF_SVE_TYPES_ARRAY (bs_unsigned);\n DEF_SVE_TYPES_ARRAY (bhs_signed);\n DEF_SVE_TYPES_ARRAY (bhs_unsigned);\n DEF_SVE_TYPES_ARRAY (bhs_integer);\n DEF_SVE_TYPES_ARRAY (h_integer);\n+DEF_SVE_TYPES_ARRAY (hs_signed);\n+DEF_SVE_TYPES_ARRAY (hs_integer);\n DEF_SVE_TYPES_ARRAY (hs_float);\n+DEF_SVE_TYPES_ARRAY (hd_unsigned);\n+DEF_SVE_TYPES_ARRAY (hsd_signed);\n DEF_SVE_TYPES_ARRAY (hsd_integer);\n+DEF_SVE_TYPES_ARRAY (s_float_hsd_integer);\n+DEF_SVE_TYPES_ARRAY (s_float_sd_integer);\n+DEF_SVE_TYPES_ARRAY (s_unsigned);\n DEF_SVE_TYPES_ARRAY (s_integer);\n+DEF_SVE_TYPES_ARRAY (sd_signed);\n+DEF_SVE_TYPES_ARRAY (sd_unsigned);\n DEF_SVE_TYPES_ARRAY (sd_integer);\n DEF_SVE_TYPES_ARRAY (sd_data);\n DEF_SVE_TYPES_ARRAY (all_float_and_sd_integer);\n+DEF_SVE_TYPES_ARRAY (d_unsigned);\n DEF_SVE_TYPES_ARRAY (d_integer);\n+DEF_SVE_TYPES_ARRAY (d_data);\n DEF_SVE_TYPES_ARRAY (cvt);\n+DEF_SVE_TYPES_ARRAY (cvt_long);\n+DEF_SVE_TYPES_ARRAY (cvt_narrow_s);\n+DEF_SVE_TYPES_ARRAY (cvt_narrow);\n DEF_SVE_TYPES_ARRAY (inc_dec_n);\n DEF_SVE_TYPES_ARRAY (reinterpret);\n DEF_SVE_TYPES_ARRAY (while);\n@@ -357,6 +459,12 @@ static const predication_index preds_none[] = { PRED_none, NUM_PREDS };\n    explicit suffix.  */\n static const predication_index preds_implicit[] = { PRED_implicit, NUM_PREDS };\n \n+/* Used by functions that allow merging and \"don't care\" predication,\n+   but are not suitable for predicated MOVPRFX.  */\n+static const predication_index preds_mx[] = {\n+  PRED_m, PRED_x, NUM_PREDS\n+};\n+\n /* Used by functions that allow merging, zeroing and \"don't care\"\n    predication.  */\n static const predication_index preds_mxz[] = {\n@@ -854,16 +962,20 @@ function_builder::add_unique_function (const function_instance &instance,\n    resolution.  REQUIRED_EXTENSIONS are the set of architecture extensions\n    that the function requires.\n \n-   For simplicity, deal with duplicate attempts to add the same\n-   function.  */\n+   For simplicity, deal with duplicate attempts to add the same function,\n+   including cases in which the new function requires more features than\n+   the original one did.  In that case we'll check whether the required\n+   features are available as part of resolving the function to the\n+   relevant unique function.  */\n void\n function_builder::add_overloaded_function (const function_instance &instance,\n \t\t\t\t\t   uint64_t required_extensions)\n {\n   char *name = get_name (instance, true);\n   if (registered_function **map_value = m_overload_names.get (name))\n     gcc_assert ((*map_value)->instance == instance\n-\t\t&& (*map_value)->required_extensions == required_extensions);\n+\t\t&& ((*map_value)->required_extensions\n+\t\t    & ~required_extensions) == 0);\n   else\n     {\n       registered_function &rfn\n@@ -1079,7 +1191,7 @@ function_resolver::infer_pointer_type (unsigned int argno,\n     {\n       error_at (location, \"passing %qT to argument %d of %qE, but %qT is not\"\n \t\t\" a valid SVE element type\", actual, argno + 1, fndecl,\n-\t\ttarget);\n+\t\tbuild_qualified_type (target, 0));\n       return NUM_TYPE_SUFFIXES;\n     }\n   unsigned int bits = type_suffixes[type].element_bits;\n@@ -1447,6 +1559,28 @@ require_derived_vector_type (unsigned int argno,\n   return false;\n }\n \n+/* Require argument ARGNO to match argument FIRST_ARGNO, which was inferred\n+   to be a pointer to a scalar element of type TYPE.  */\n+bool\n+function_resolver::require_matching_pointer_type (unsigned int argno,\n+\t\t\t\t\t\t  unsigned int first_argno,\n+\t\t\t\t\t\t  type_suffix_index type)\n+{\n+  type_suffix_index new_type = infer_pointer_type (argno);\n+  if (new_type == NUM_TYPE_SUFFIXES)\n+    return false;\n+\n+  if (type != new_type)\n+    {\n+      error_at (location, \"passing %qT to argument %d of %qE, but\"\n+\t\t\" argument %d had type %qT\", get_argument_type (argno),\n+\t\targno + 1, fndecl, first_argno + 1,\n+\t\tget_argument_type (first_argno));\n+      return false;\n+    }\n+  return true;\n+}\n+\n /* Require argument ARGNO to be a (possibly variable) scalar, using EXPECTED\n    as the name of its expected type.  Return true if the argument has the\n    right form, otherwise report an appropriate error.  */\n@@ -1641,6 +1775,31 @@ function_resolver::resolve_sv_displacement (unsigned int argno,\n       return mode;\n     }\n \n+  unsigned int required_bits = type_suffixes[type].element_bits;\n+  if (required_bits == 32\n+      && displacement_units () == UNITS_elements\n+      && !lookup_form (MODE_s32index, type)\n+      && !lookup_form (MODE_u32index, type))\n+    {\n+      if (lookup_form (MODE_u32base_index, type))\n+\t{\n+\t  if (type_suffix_ids[0] == NUM_TYPE_SUFFIXES)\n+\t    {\n+\t      gcc_assert (!load_p);\n+\t      error_at (location, \"when storing %qT, %qE requires a vector\"\n+\t\t\t\" base and a scalar index\", get_vector_type (type),\n+\t\t\tfndecl);\n+\t    }\n+\t  else\n+\t    error_at (location, \"%qE requires a vector base and a scalar\"\n+\t\t      \" index\", fndecl);\n+\t}\n+      else\n+\terror_at (location, \"%qE does not support 32-bit vector type %qT\",\n+\t\t  fndecl, get_vector_type (type));\n+      return MODE_none;\n+    }\n+\n   /* Check for some form of vector type, without naming any in particular\n      as being expected.  */\n   type_suffix_index displacement_type = infer_vector_type (argno);\n@@ -1650,7 +1809,6 @@ function_resolver::resolve_sv_displacement (unsigned int argno,\n   /* If the displacement type is consistent with the data vector type,\n      try to find the associated mode suffix.  This will fall through\n      for non-integral displacement types.  */\n-  unsigned int required_bits = type_suffixes[type].element_bits;\n   if (type_suffixes[displacement_type].element_bits == required_bits)\n     {\n       vector_type_index displacement_vector_type\n@@ -1659,7 +1817,21 @@ function_resolver::resolve_sv_displacement (unsigned int argno,\n \t\t\t\t\t\t displacement_vector_type,\n \t\t\t\t\t\t displacement_units ());\n       if (mode != MODE_none)\n-\treturn mode;\n+\t{\n+\t  if (mode == MODE_s32offset\n+\t      && !lookup_form (mode, type)\n+\t      && lookup_form (MODE_u32offset, type))\n+\t    {\n+\t      if (type_suffix_ids[0] == NUM_TYPE_SUFFIXES)\n+\t\terror_at (location, \"%qE does not support 32-bit sign-extended\"\n+\t\t\t  \" offsets\", fndecl);\n+\t      else\n+\t\terror_at (location, \"%qE does not support sign-extended\"\n+\t\t\t  \" offsets\", fndecl);\n+\t      return MODE_none;\n+\t    }\n+\t  return mode;\n+\t}\n     }\n \n   if (type_suffix_ids[0] == NUM_TYPE_SUFFIXES)\n@@ -1873,21 +2045,25 @@ function_resolver::check_gp_argument (unsigned int nops,\n    in the latter case.  This \"_n\" form might only exist for certain\n    type suffixes.\n \n-   ARGNO is the index of the final argument.  The inferred type\n-   suffix is FIRST_TYPE, which was obtained from argument FIRST_ARGNO.\n+   ARGNO is the index of the final argument.  The inferred type suffix\n+   was obtained from argument FIRST_ARGNO, which has type FIRST_TYPE.\n    EXPECTED_TCLASS and EXPECTED_BITS describe the expected properties\n    of the final vector or scalar argument, in the same way as for\n-   require_derived_vector_type.\n+   require_derived_vector_type.  INFERRED_TYPE is the inferred type\n+   suffix itself, or NUM_TYPE_SUFFIXES if it's the same as FIRST_TYPE.\n \n    Return the function decl of the resolved function on success,\n    otherwise report a suitable error and return error_mark_node.  */\n tree function_resolver::\n finish_opt_n_resolution (unsigned int argno, unsigned int first_argno,\n \t\t\t type_suffix_index first_type,\n \t\t\t type_class_index expected_tclass,\n-\t\t\t unsigned int expected_bits)\n+\t\t\t unsigned int expected_bits,\n+\t\t\t type_suffix_index inferred_type)\n {\n-  tree scalar_form = lookup_form (MODE_n, first_type);\n+  if (inferred_type == NUM_TYPE_SUFFIXES)\n+    inferred_type = first_type;\n+  tree scalar_form = lookup_form (MODE_n, inferred_type);\n \n   /* Allow the final argument to be scalar, if an _n form exists.  */\n   if (scalar_argument_p (argno))\n@@ -1897,7 +2073,7 @@ finish_opt_n_resolution (unsigned int argno, unsigned int first_argno,\n \n       /* Check the vector form normally.  If that succeeds, raise an\n \t error about having no corresponding _n form.  */\n-      tree res = resolve_to (mode_suffix_id, first_type);\n+      tree res = resolve_to (mode_suffix_id, inferred_type);\n       if (res != error_mark_node)\n \terror_at (location, \"passing %qT to argument %d of %qE, but its\"\n \t\t  \" %qT form does not accept scalars\",\n@@ -1917,13 +2093,14 @@ finish_opt_n_resolution (unsigned int argno, unsigned int first_argno,\n \t\t\t\t    expected_tclass, expected_bits))\n     return error_mark_node;\n \n-  return resolve_to (mode_suffix_id, first_type);\n+  return resolve_to (mode_suffix_id, inferred_type);\n }\n \n /* Resolve a (possibly predicated) unary function.  If the function uses\n-   merge predication, there is an extra vector argument before the\n-   governing predicate that specifies the values of inactive elements.\n-   This argument has the following properties:\n+   merge predication or if TREAT_AS_MERGE_P is true, there is an extra\n+   vector argument before the governing predicate that specifies the\n+   values of inactive elements.  This argument has the following\n+   properties:\n \n    - the type class must be the same as for active elements if MERGE_TCLASS\n      is SAME_TYPE_CLASS, otherwise it must be MERGE_TCLASS itself.\n@@ -1935,10 +2112,11 @@ finish_opt_n_resolution (unsigned int argno, unsigned int first_argno,\n    otherwise report a suitable error and return error_mark_node.  */\n tree\n function_resolver::resolve_unary (type_class_index merge_tclass,\n-\t\t\t\t  unsigned int merge_bits)\n+\t\t\t\t  unsigned int merge_bits,\n+\t\t\t\t  bool treat_as_merge_p)\n {\n   type_suffix_index type;\n-  if (pred == PRED_m)\n+  if (pred == PRED_m || treat_as_merge_p)\n     {\n       if (!check_num_arguments (3))\n \treturn error_mark_node;\n@@ -2302,6 +2480,19 @@ gimple_folder::load_store_cookie (tree type)\n   return build_int_cst (build_pointer_type (type), TYPE_ALIGN_UNIT (type));\n }\n \n+/* Fold the call to a call to INSTANCE, with the same arguments.  */\n+gimple *\n+gimple_folder::redirect_call (const function_instance &instance)\n+{\n+  registered_function *rfn\n+    = function_table->find_with_hash (instance, instance.hash ());\n+  if (!rfn)\n+    return NULL;\n+\n+  gimple_call_set_fndecl (call, rfn->decl);\n+  return call;\n+}\n+\n /* Fold the call to a PTRUE, taking the element size from type suffix 0.  */\n gimple *\n gimple_folder::fold_to_ptrue ()\n@@ -2584,14 +2775,22 @@ function_expander::generate_insn (insn_code icode)\n \n    - a scalar base\n    - a vector displacement\n+\n+   If SCALED_P is true, it also expects:\n+\n    - a const_int that is 1 if the displacement is zero-extended from 32 bits\n-   - a scaling multiplier (1 for bytes, 2 for .h indices, etc.).  */\n+   - a scaling multiplier (1 for bytes, 2 for .h indices, etc.).\n+\n+   If SCALED_P is false, the displacement is implicitly zero-extended\n+   and the scaling multiplier is implicitly 1.  */\n void\n-function_expander::prepare_gather_address_operands (unsigned int argno)\n+function_expander::prepare_gather_address_operands (unsigned int argno,\n+\t\t\t\t\t\t    bool scaled_p)\n {\n   machine_mode mem_mode = memory_vector_mode ();\n   tree vector_type = base_vector_type ();\n   units_index units = displacement_units ();\n+  int shift_idx = -1;\n   if (units == UNITS_none)\n     {\n       /* Vector base, no displacement.  Convert to an integer zero base\n@@ -2605,31 +2804,45 @@ function_expander::prepare_gather_address_operands (unsigned int argno)\n \t a vector byte offset.  */\n       std::swap (args[argno], args[argno + 1]);\n       if (units == UNITS_elements)\n-\t{\n-\t  /* Convert the original scalar array index to a byte offset.  */\n-\t  rtx size = gen_int_mode (GET_MODE_UNIT_SIZE (mem_mode), DImode);\n-\t  args[argno] = simplify_gen_binary (MULT, DImode, args[argno], size);\n-\t  units = UNITS_bytes;\n-\t}\n+\tshift_idx = argno;\n     }\n   else\n     {\n-      /* Scalar base, vector displacement.  This is what the md pattern wants,\n-\t so we just need to make sure that the scalar base has DImode.  */\n+      /* Scalar base, vector displacement.  This is the order that the md\n+\t pattern wants.  */\n       if (Pmode == SImode)\n \targs[argno] = simplify_gen_unary (ZERO_EXTEND, DImode,\n \t\t\t\t\t  args[argno], SImode);\n       vector_type = displacement_vector_type ();\n+      if (units == UNITS_elements && !scaled_p)\n+\tshift_idx = argno + 1;\n     }\n   tree scalar_displacement_type = TREE_TYPE (vector_type);\n \n-  bool uxtw_p = (TYPE_PRECISION (scalar_displacement_type) < 64\n-\t\t && TYPE_UNSIGNED (scalar_displacement_type));\n+  if (shift_idx >= 0)\n+    {\n+      machine_mode arg_mode = GET_MODE (args[shift_idx]);\n+      if (arg_mode == VOIDmode)\n+\targ_mode = DImode;\n+      unsigned int elt_bytes = GET_MODE_UNIT_SIZE (mem_mode);\n+      rtx shift = gen_int_mode (exact_log2 (elt_bytes), DImode);\n+      args[shift_idx] = simplify_gen_binary (ASHIFT, arg_mode,\n+\t\t\t\t\t     args[shift_idx], shift);\n+      units = UNITS_bytes;\n+    }\n+\n+  bool uxtw_p = (TYPE_PRECISION (scalar_displacement_type) == 64\n+\t\t || TYPE_UNSIGNED (scalar_displacement_type));\n   unsigned int scale = (units == UNITS_bytes\n \t\t\t? 1 : GET_MODE_UNIT_SIZE (mem_mode));\n \n-  args.quick_insert (argno + 2, GEN_INT (uxtw_p));\n-  args.quick_insert (argno + 3, GEN_INT (scale));\n+  if (scaled_p)\n+    {\n+      args.quick_insert (argno + 2, GEN_INT (uxtw_p));\n+      args.quick_insert (argno + 3, GEN_INT (scale));\n+    }\n+  else\n+    gcc_assert (uxtw_p && scale == 1);\n }\n \n /* The final argument is an immediate svprfop value.  Add two fake arguments\n@@ -2969,7 +3182,11 @@ function_expander::map_to_unspecs (int unspec_for_sint, int unspec_for_uint,\n     }\n \n   if (pred == PRED_none || pred == PRED_x)\n-    return use_unpred_insn (code_for_aarch64_sve (unspec, mode));\n+    {\n+      insn_code icode = maybe_code_for_aarch64_sve (unspec, mode);\n+      if (icode != CODE_FOR_nothing)\n+\treturn use_unpred_insn (icode);\n+    }\n \n   insn_code icode = code_for_cond (unspec, vector_mode (0));\n   return use_cond_insn (icode, merge_argno);"}, {"sha": "040f1d8cb8f0781e085c7b3a3dbd0cd27e002ee6", "filename": "gcc/config/aarch64/aarch64-sve-builtins.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.def?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -91,6 +91,7 @@ DEF_SVE_TYPE_SUFFIX (u32, svuint32_t, unsigned, 32, VNx4SImode)\n DEF_SVE_TYPE_SUFFIX (u64, svuint64_t, unsigned, 64, VNx2DImode)\n \n #include \"aarch64-sve-builtins-base.def\"\n+#include \"aarch64-sve-builtins-sve2.def\"\n \n #undef DEF_SVE_FUNCTION\n #undef DEF_SVE_TYPE_SUFFIX"}, {"sha": "f307233f777632b69c3a7ff8515c7db61473aa75", "filename": "gcc/config/aarch64/aarch64-sve-builtins.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.h?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -416,6 +416,8 @@ class function_resolver : public function_call_info\n \t\t\t\t\t     type_suffix_index);\n   bool require_derived_scalar_type (unsigned int, type_class_index,\n \t\t\t\t    unsigned int = SAME_SIZE);\n+  bool require_matching_pointer_type (unsigned int, unsigned int,\n+\t\t\t\t      type_suffix_index);\n   bool require_integer_immediate (unsigned int);\n \n   vector_type_index infer_vector_base_type (unsigned int);\n@@ -430,12 +432,13 @@ class function_resolver : public function_call_info\n   bool check_num_arguments (unsigned int);\n   bool check_gp_argument (unsigned int, unsigned int &, unsigned int &);\n   tree resolve_unary (type_class_index = SAME_TYPE_CLASS,\n-\t\t      unsigned int = SAME_SIZE);\n+\t\t      unsigned int = SAME_SIZE, bool = false);\n   tree resolve_uniform (unsigned int, unsigned int = 0);\n   tree resolve_uniform_opt_n (unsigned int);\n   tree finish_opt_n_resolution (unsigned int, unsigned int, type_suffix_index,\n \t\t\t\ttype_class_index = SAME_TYPE_CLASS,\n-\t\t\t\tunsigned int = SAME_SIZE);\n+\t\t\t\tunsigned int = SAME_SIZE,\n+\t\t\t\ttype_suffix_index = NUM_TYPE_SUFFIXES);\n \n   tree resolve ();\n \n@@ -493,6 +496,7 @@ class gimple_folder : public function_call_info\n   tree fold_contiguous_base (gimple_seq &, tree);\n   tree load_store_cookie (tree);\n \n+  gimple *redirect_call (const function_instance &);\n   gimple *fold_to_pfalse ();\n   gimple *fold_to_ptrue ();\n   gimple *fold_to_vl_pred (unsigned int);\n@@ -536,7 +540,7 @@ class function_expander : public function_call_info\n   void add_fixed_operand (rtx);\n   rtx generate_insn (insn_code);\n \n-  void prepare_gather_address_operands (unsigned int);\n+  void prepare_gather_address_operands (unsigned int, bool = true);\n   void prepare_prefetch_operands ();\n   void add_ptrue_hint (unsigned int, machine_mode);\n   void rotate_inputs_left (unsigned int, unsigned int);"}, {"sha": "22eda93a9db584ec189428e86694cc0df5a8cf76", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 27, "deletions": 16, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -3381,9 +3381,13 @@\n ;; - ORR    (merging form only)\n ;; - SMAX\n ;; - SMIN\n+;; - SQADD  (SVE2 merging form only)\n+;; - SQSUB  (SVE2 merging form only)\n ;; - SUB    (merging form only)\n ;; - UMAX\n ;; - UMIN\n+;; - UQADD  (SVE2 merging form only)\n+;; - UQSUB  (SVE2 merging form only)\n ;; -------------------------------------------------------------------------\n \n ;; Unpredicated integer binary operations that have an immediate form.\n@@ -4445,9 +4449,12 @@\n ;; -------------------------------------------------------------------------\n ;; Includes:\n ;; - ASRD\n+;; - SQSHLU (SVE2)\n+;; - SRSHR (SVE2)\n+;; - URSHR (SVE2)\n ;; -------------------------------------------------------------------------\n \n-;; Unpredicated ASRD.\n+;; Unpredicated <SVE_INT_OP>.\n (define_expand \"sdiv_pow2<mode>3\"\n   [(set (match_operand:SVE_FULL_I 0 \"register_operand\")\n \t(unspec:SVE_FULL_I\n@@ -4464,50 +4471,50 @@\n   }\n )\n \n-;; Predicated ASRD with merging.\n-(define_expand \"@cond_asrd<mode>\"\n+;; Predicated right shift with merging.\n+(define_expand \"@cond_<sve_int_op><mode>\"\n   [(set (match_operand:SVE_FULL_I 0 \"register_operand\")\n \t(unspec:SVE_FULL_I\n \t  [(match_operand:<VPRED> 1 \"register_operand\")\n \t   (unspec:SVE_FULL_I\n \t     [(match_operand:SVE_FULL_I 2 \"register_operand\")\n-\t      (match_operand:SVE_FULL_I 3 \"aarch64_simd_rshift_imm\")]\n-\t     UNSPEC_ASRD)\n+\t      (match_operand:SVE_FULL_I 3 \"aarch64_simd_<lr>shift_imm\")]\n+\t     SVE_INT_SHIFT_IMM)\n \t   (match_operand:SVE_FULL_I 4 \"aarch64_simd_reg_or_zero\")]\n \t  UNSPEC_SEL))]\n   \"TARGET_SVE\"\n )\n \n-;; Predicated ASRD, merging with the first input.\n-(define_insn \"*cond_asrd<mode>_2\"\n+;; Predicated right shift, merging with the first input.\n+(define_insn \"*cond_<sve_int_op><mode>_2\"\n   [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n \t(unspec:SVE_FULL_I\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n \t   (unspec:SVE_FULL_I\n \t     [(match_operand:SVE_FULL_I 2 \"register_operand\" \"0, w\")\n-\t      (match_operand:SVE_FULL_I 3 \"aarch64_simd_rshift_imm\")]\n-\t     UNSPEC_ASRD)\n+\t      (match_operand:SVE_FULL_I 3 \"aarch64_simd_<lr>shift_imm\")]\n+\t     SVE_INT_SHIFT_IMM)\n \t   (match_dup 2)]\n \t  UNSPEC_SEL))]\n   \"TARGET_SVE\"\n   \"@\n-   asrd\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%3\n-   movprfx\\t%0, %2\\;asrd\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%3\"\n+   <sve_int_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%3\n+   movprfx\\t%0, %2\\;<sve_int_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%3\"\n   [(set_attr \"movprfx\" \"*,yes\")])\n \n-;; Predicated ASRD, merging with zero.\n-(define_insn \"*cond_asrd<mode>_z\"\n+;; Predicated right shift, merging with zero.\n+(define_insn \"*cond_<sve_int_op><mode>_z\"\n   [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w\")\n \t(unspec:SVE_FULL_I\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl\")\n \t   (unspec:SVE_FULL_I\n \t     [(match_operand:SVE_FULL_I 2 \"register_operand\" \"w\")\n-\t      (match_operand:SVE_FULL_I 3 \"aarch64_simd_rshift_imm\")]\n-\t     UNSPEC_ASRD)\n+\t      (match_operand:SVE_FULL_I 3 \"aarch64_simd_<lr>shift_imm\")]\n+\t     SVE_INT_SHIFT_IMM)\n \t   (match_operand:SVE_FULL_I 4 \"aarch64_simd_imm_zero\")]\n \t  UNSPEC_SEL))]\n   \"TARGET_SVE\"\n-  \"movprfx\\t%0.<Vetype>, %1/z, %2.<Vetype>\\;asrd\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%3\"\n+  \"movprfx\\t%0.<Vetype>, %1/z, %2.<Vetype>\\;<sve_int_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%3\"\n   [(set_attr \"movprfx\" \"yes\")])\n \n ;; -------------------------------------------------------------------------\n@@ -6835,6 +6842,10 @@\n ;; ---- [INT] While tests\n ;; -------------------------------------------------------------------------\n ;; Includes:\n+;; - WHILEGE (SVE2)\n+;; - WHILEGT (SVE2)\n+;; - WHILEHI (SVE2)\n+;; - WHILEHS (SVE2)\n ;; - WHILELE\n ;; - WHILELO\n ;; - WHILELS"}, {"sha": "eaded5d34808297a2efe3c3fb64dede8d0c806b9", "filename": "gcc/config/aarch64/aarch64-sve2.md", "status": "modified", "additions": 2092, "deletions": 49, "changes": 2141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Fconfig%2Faarch64%2Faarch64-sve2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Fconfig%2Faarch64%2Faarch64-sve2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve2.md?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -21,27 +21,190 @@\n ;; The file is organised into the following sections (search for the full\n ;; line):\n ;;\n+;; == Moves\n+;; ---- Non-temporal gather loads\n+;; ---- Non-temporal scatter stores\n+;;\n ;; == Uniform binary arithmnetic\n+;; ---- [INT] Multiplication\n ;; ---- [INT] Scaled high-part multiplication\n ;; ---- [INT] General binary arithmetic that maps to unspecs\n+;; ---- [INT] Saturating binary arithmetic\n+;; ---- [INT] Saturating left shifts\n ;;\n ;; == Uniform ternary arithmnetic\n+;; ---- [INT] General ternary arithmetic that maps to unspecs\n+;; ---- [INT] Multiply-and-accumulate operations\n+;; ---- [INT] Binary logic operations with rotation\n ;; ---- [INT] Ternary logic operations\n ;; ---- [INT] Shift-and-accumulate operations\n+;; ---- [INT] Shift-and-insert operations\n+;; ---- [INT] Sum of absolute differences\n ;;\n ;; == Extending arithmetic\n+;; ---- [INT] Wide binary arithmetic\n ;; ---- [INT] Long binary arithmetic\n+;; ---- [INT] Long left shifts\n+;; ---- [INT] Long binary arithmetic with accumulation\n+;; ---- [FP] Long multiplication with accumulation\n ;;\n ;; == Narrowing arithnetic\n+;; ---- [INT] Narrowing unary arithmetic\n+;; ---- [INT] Narrowing binary arithmetic\n ;; ---- [INT] Narrowing right shifts\n ;;\n+;; == Pairwise arithmetic\n+;; ---- [INT] Pairwise arithmetic\n+;; ---- [FP] Pairwise arithmetic\n+;; ---- [INT] Pairwise arithmetic with accumulation\n+;;\n+;; == Complex arithmetic\n+;; ---- [INT] Complex binary operations\n+;; ---- [INT] Complex ternary operations\n+;; ---- [INT] Complex dot product\n+;;\n+;; == Conversions\n+;; ---- [FP<-FP] Widening conversions\n+;; ---- [FP<-FP] Narrowing conversions\n+;;\n+;; == Other arithmetic\n+;; ---- [INT] Reciprocal approximation\n+;; ---- [INT<-FP] Base-2 logarithm\n+;; ---- [INT] Polynomial multiplication\n+;;\n+;; == Permutation\n+;; ---- [INT,FP] General permutes\n+;; ---- [INT] Optional bit-permute extensions\n+;;\n ;; == General\n ;; ---- Check for aliases between pointers\n+;; ---- Histogram processing\n+;; ---- String matching\n+;;\n+;; == Crypotographic extensions\n+;; ---- Optional AES extensions\n+;; ---- Optional SHA-3 extensions\n+;; ---- Optional SM4 extensions\n+\n+;; =========================================================================\n+;; == Moves\n+;; =========================================================================\n+\n+;; -------------------------------------------------------------------------\n+;; ---- Non-temporal gather loads\n+;; -------------------------------------------------------------------------\n+;; Includes gather forms of:\n+;; - LDNT1B\n+;; - LDNT1D\n+;; - LDNT1H\n+;; - LDNT1W\n+;; -------------------------------------------------------------------------\n+\n+;; Non-extending loads.\n+(define_insn \"@aarch64_gather_ldnt<mode>\"\n+  [(set (match_operand:SVE_FULL_SD 0 \"register_operand\" \"=w, w\")\n+\t(unspec:SVE_FULL_SD\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n+\t   (match_operand:DI 2 \"aarch64_reg_or_zero\" \"Z, r\")\n+\t   (match_operand:<V_INT_EQUIV> 3 \"register_operand\" \"w, w\")\n+\t   (mem:BLK (scratch))]\n+\t  UNSPEC_LDNT1_GATHER))]\n+  \"TARGET_SVE2\"\n+  \"@\n+   ldnt1<Vesize>\\t%0.<Vetype>, %1/z, [%3.<Vetype>]\n+   ldnt1<Vesize>\\t%0.<Vetype>, %1/z, [%3.<Vetype>, %2]\"\n+)\n+\n+;; Extending loads.\n+(define_insn_and_rewrite \"@aarch64_gather_ldnt_<ANY_EXTEND:optab><SVE_FULL_SDI:mode><SVE_PARTIAL_I:mode>\"\n+  [(set (match_operand:SVE_FULL_SDI 0 \"register_operand\" \"=w, w\")\n+\t(unspec:SVE_FULL_SDI\n+\t  [(match_operand:<SVE_FULL_SDI:VPRED> 4 \"general_operand\" \"UplDnm, UplDnm\")\n+\t   (ANY_EXTEND:SVE_FULL_SDI\n+\t     (unspec:SVE_PARTIAL_I\n+\t       [(match_operand:<SVE_FULL_SDI:VPRED> 1 \"register_operand\" \"Upl, Upl\")\n+\t\t(match_operand:DI 2 \"aarch64_reg_or_zero\" \"Z, r\")\n+\t\t(match_operand:<SVE_FULL_SDI:V_INT_EQUIV> 3 \"register_operand\" \"w, w\")\n+\t\t(mem:BLK (scratch))]\n+\t       UNSPEC_LDNT1_GATHER))]\n+\t  UNSPEC_PRED_X))]\n+  \"TARGET_SVE2\n+   && (~<SVE_FULL_SDI:narrower_mask> & <SVE_PARTIAL_I:self_mask>) == 0\"\n+  \"@\n+   ldnt1<ANY_EXTEND:s><SVE_PARTIAL_I:Vesize>\\t%0.<SVE_FULL_SDI:Vetype>, %1/z, [%3.<SVE_FULL_SDI:Vetype>]\n+   ldnt1<ANY_EXTEND:s><SVE_PARTIAL_I:Vesize>\\t%0.<SVE_FULL_SDI:Vetype>, %1/z, [%3.<SVE_FULL_SDI:Vetype>, %2]\"\n+  \"&& !CONSTANT_P (operands[4])\"\n+  {\n+    operands[4] = CONSTM1_RTX (<SVE_FULL_SDI:VPRED>mode);\n+  }\n+)\n+\n+;; -------------------------------------------------------------------------\n+;; ---- Non-temporal scatter stores\n+;; -------------------------------------------------------------------------\n+;; Includes scatter forms of:\n+;; - STNT1B\n+;; - STNT1D\n+;; - STNT1H\n+;; - STNT1W\n+;; -------------------------------------------------------------------------\n+\n+;; Non-truncating stores.\n+(define_insn \"@aarch64_scatter_stnt<mode>\"\n+  [(set (mem:BLK (scratch))\n+\t(unspec:BLK\n+\t  [(match_operand:<VPRED> 0 \"register_operand\" \"Upl, Upl\")\n+\t   (match_operand:DI 1 \"aarch64_reg_or_zero\" \"Z, r\")\n+\t   (match_operand:<V_INT_EQUIV> 2 \"register_operand\" \"w, w\")\n+\t   (match_operand:SVE_FULL_SD 3 \"register_operand\" \"w, w\")]\n+\n+\t  UNSPEC_STNT1_SCATTER))]\n+  \"TARGET_SVE\"\n+  \"@\n+   stnt1<Vesize>\\t%3.<Vetype>, %0, [%2.<Vetype>]\n+   stnt1<Vesize>\\t%3.<Vetype>, %0, [%2.<Vetype>, %1]\"\n+)\n+\n+;; Truncating stores.\n+(define_insn \"@aarch64_scatter_stnt_<SVE_FULL_SDI:mode><SVE_PARTIAL_I:mode>\"\n+  [(set (mem:BLK (scratch))\n+\t(unspec:BLK\n+\t  [(match_operand:<SVE_FULL_SDI:VPRED> 0 \"register_operand\" \"Upl, Upl\")\n+\t   (match_operand:DI 1 \"aarch64_reg_or_zero\" \"Z, r\")\n+\t   (match_operand:<SVE_FULL_SDI:V_INT_EQUIV> 2 \"register_operand\" \"w, w\")\n+\t   (truncate:SVE_PARTIAL_I\n+\t     (match_operand:SVE_FULL_SDI 3 \"register_operand\" \"w, w\"))]\n+\t  UNSPEC_STNT1_SCATTER))]\n+  \"TARGET_SVE2\n+   && (~<SVE_FULL_SDI:narrower_mask> & <SVE_PARTIAL_I:self_mask>) == 0\"\n+  \"@\n+   stnt1<SVE_PARTIAL_I:Vesize>\\t%3.<SVE_FULL_SDI:Vetype>, %0, [%2.<SVE_FULL_SDI:Vetype>]\n+   stnt1<SVE_PARTIAL_I:Vesize>\\t%3.<SVE_FULL_SDI:Vetype>, %0, [%2.<SVE_FULL_SDI:Vetype>, %1]\"\n+)\n \n ;; =========================================================================\n ;; == Uniform binary arithmnetic\n ;; =========================================================================\n \n+;; -------------------------------------------------------------------------\n+;; ---- [INT] Multiplication\n+;; -------------------------------------------------------------------------\n+;; Includes the lane forms of:\n+;; - MUL\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"@aarch64_mul_lane_<mode>\"\n+  [(set (match_operand:SVE_FULL_HSDI 0 \"register_operand\" \"=w\")\n+\t(mult:SVE_FULL_HSDI\n+\t  (unspec:SVE_FULL_HSDI\n+\t    [(match_operand:SVE_FULL_HSDI 2 \"register_operand\" \"<sve_lane_con>\")\n+\t     (match_operand:SI 3 \"const_int_operand\")]\n+\t    UNSPEC_SVE_LANE_SELECT)\n+\t  (match_operand:SVE_FULL_HSDI 1 \"register_operand\" \"w\")))]\n+  \"TARGET_SVE2\"\n+  \"mul\\t%0.<Vetype>, %1.<Vetype>, %2.<Vetype>[%3]\"\n+)\n+\n ;; -------------------------------------------------------------------------\n ;; ---- [INT] Scaled high-part multiplication\n ;; -------------------------------------------------------------------------\n@@ -64,12 +227,15 @@\n \n     rtx prod_b = gen_reg_rtx (<VWIDE>mode);\n     rtx prod_t = gen_reg_rtx (<VWIDE>mode);\n-    emit_insn (gen_<su>mullb<Vwide> (prod_b, operands[1], operands[2]));\n-    emit_insn (gen_<su>mullt<Vwide> (prod_t, operands[1], operands[2]));\n+    emit_insn (gen_aarch64_sve_<su>mullb<Vwide> (prod_b, operands[1],\n+\t\t\t\t\t\t operands[2]));\n+    emit_insn (gen_aarch64_sve_<su>mullt<Vwide> (prod_t, operands[1],\n+\t\t\t\t\t\t operands[2]));\n \n     rtx shift = GEN_INT (GET_MODE_UNIT_BITSIZE (<MODE>mode) - 1);\n-    emit_insn (gen_<r>shrnb<mode> (operands[0], prod_b, shift));\n-    emit_insn (gen_<r>shrnt<mode> (operands[0], operands[0], prod_t, shift));\n+    emit_insn (gen_aarch64_sve_<r>shrnb<Vwide> (operands[0], prod_b, shift));\n+    emit_insn (gen_aarch64_sve_<r>shrnt<Vwide> (operands[0], operands[0],\n+\t\t\t\t\t\tprod_t, shift));\n \n     DONE;\n   }\n@@ -81,10 +247,22 @@\n ;; Includes:\n ;; - SHADD\n ;; - SHSUB\n+;; - SHSUBR\n+;; - SQRSHL\n+;; - SQRSHLR\n ;; - SRHADD\n+;; - SRSHL\n+;; - SRSHLR\n+;; - SUQADD\n ;; - UHADD\n ;; - UHSUB\n+;; - UHSUBR\n+;; - UQRSHL\n+;; - UQRSHLR\n ;; - URHADD\n+;; - URSHL\n+;; - URSHLR\n+;; - USQADD\n ;; -------------------------------------------------------------------------\n \n ;; Integer average (floor).\n@@ -119,40 +297,509 @@\n   }\n )\n \n-;; Predicated halving addsub.\n-(define_insn \"*<sur>h<addsub><mode>\"\n+;; The immediate form of SQADD acts as an immediate form of SUQADD\n+;; over its full range.  In contrast to the ss_plus pattern, we do\n+;; not need to treat byte immediates specially.  E.g.:\n+;;\n+;;\tSQADD\tZ0.B, Z0.B, #128\n+;;\n+;; is equivalent to:\n+;;\n+;;\tMOV\tZ1.B, #128\n+;;\tSUQADD\tZ0.B, P0/M, Z0.B, Z1.B\n+;;\n+;; even though it's not equivalent to:\n+;;\n+;;\tMOV\tZ1.B, #128\n+;;\tSQADD\tZ0.B, P0/M, Z0.B, Z1.B\t// Saturating subtraction of 128\n+(define_insn \"@aarch64_sve_suqadd<mode>_const\"\n+  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_FULL_I\n+\t  [(match_operand:SVE_FULL_I 1 \"register_operand\" \"0, w\")\n+\t   (match_operand:SVE_FULL_I 2 \"aarch64_sve_arith_immediate\")]\n+\t  UNSPEC_SUQADD))]\n+  \"TARGET_SVE2\"\n+  \"@\n+   sqadd\\t%0.<Vetype>, %0.<Vetype>, #%D2\n+   movprfx\\t%0, %1\\;sqadd\\t%0.<Vetype>, %0.<Vetype>, #%D2\"\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+;; General predicated binary arithmetic.  All operations handled here\n+;; are commutative or have a reversed form.\n+(define_insn \"@aarch64_pred_<sve_int_op><mode>\"\n+  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, w, ?&w\")\n+\t(unspec:SVE_FULL_I\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n+\t   (unspec:SVE_FULL_I\n+\t     [(match_operand:SVE_FULL_I 2 \"register_operand\" \"0, w, w\")\n+\t      (match_operand:SVE_FULL_I 3 \"register_operand\" \"w, 0, w\")]\n+\t     SVE2_COND_INT_BINARY_REV)]\n+\t  UNSPEC_PRED_X))]\n+  \"TARGET_SVE2\"\n+  \"@\n+   <sve_int_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n+   <sve_int_op_rev>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %2.<Vetype>\n+   movprfx\\t%0, %2\\;<sve_int_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\"\n+  [(set_attr \"movprfx\" \"*,*,yes\")]\n+)\n+\n+;; Predicated binary arithmetic with merging.\n+(define_expand \"@cond_<sve_int_op><mode>\"\n+  [(set (match_operand:SVE_FULL_I 0 \"register_operand\")\n+\t(unspec:SVE_FULL_I\n+\t  [(match_operand:<VPRED> 1 \"register_operand\")\n+\t   (unspec:SVE_FULL_I\n+\t     [(match_dup 5)\n+\t      (unspec:SVE_FULL_I\n+\t\t[(match_operand:SVE_FULL_I 2 \"register_operand\")\n+\t\t (match_operand:SVE_FULL_I 3 \"register_operand\")]\n+\t\tSVE2_COND_INT_BINARY)]\n+\t     UNSPEC_PRED_X)\n+\t   (match_operand:SVE_FULL_I 4 \"aarch64_simd_reg_or_zero\")]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE2\"\n+  {\n+    operands[5] = CONSTM1_RTX (<MODE>mode);\n+  }\n+)\n+\n+;; Predicated binary arithmetic, merging with the first input.\n+(define_insn_and_rewrite \"*cond_<sve_int_op><mode>_2\"\n+  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_FULL_I\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n+\t   (unspec:SVE_FULL_I\n+\t     [(match_operand 4)\n+\t      (unspec:SVE_FULL_I\n+\t\t[(match_operand:SVE_FULL_I 2 \"register_operand\" \"0, w\")\n+\t\t (match_operand:SVE_FULL_I 3 \"register_operand\" \"w, w\")]\n+\t\tSVE2_COND_INT_BINARY)]\n+\t     UNSPEC_PRED_X)\n+\t   (match_dup 2)]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE2\"\n+  \"@\n+   <sve_int_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n+   movprfx\\t%0, %2\\;<sve_int_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\"\n+  \"&& !CONSTANT_P (operands[4])\"\n+  {\n+    operands[4] = CONSTM1_RTX (<VPRED>mode);\n+  }\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+;; Predicated binary arithmetic, merging with the second input.\n+(define_insn_and_rewrite \"*cond_<sve_int_op><mode>_3\"\n   [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n \t(unspec:SVE_FULL_I\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n \t   (unspec:SVE_FULL_I\n-\t     [(match_operand:SVE_FULL_I 2 \"register_operand\" \"%0, w\")\n-\t      (match_operand:SVE_FULL_I 3 \"register_operand\" \"w, w\")]\n-\t     HADDSUB)]\n+\t     [(match_operand 4)\n+\t      (unspec:SVE_FULL_I\n+\t\t[(match_operand:SVE_FULL_I 2 \"register_operand\" \"w, w\")\n+\t\t (match_operand:SVE_FULL_I 3 \"register_operand\" \"0, w\")]\n+\t\tSVE2_COND_INT_BINARY_REV)]\n+\t     UNSPEC_PRED_X)\n+\t   (match_dup 3)]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE2\"\n+  \"@\n+   <sve_int_op_rev>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %2.<Vetype>\n+   movprfx\\t%0, %3\\;<sve_int_op_rev>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %2.<Vetype>\"\n+  \"&& !CONSTANT_P (operands[4])\"\n+  {\n+    operands[4] = CONSTM1_RTX (<VPRED>mode);\n+  }\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+;; Predicated binary operations, merging with an independent value.\n+(define_insn_and_rewrite \"*cond_<sve_int_op><mode>_any\"\n+  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=&w, &w, &w, &w, ?&w\")\n+\t(unspec:SVE_FULL_I\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl, Upl, Upl\")\n+\t   (unspec:SVE_FULL_I\n+\t     [(match_operand 5)\n+\t      (unspec:SVE_FULL_I\n+\t\t[(match_operand:SVE_FULL_I 2 \"register_operand\" \"0, w, w, w, w\")\n+\t\t (match_operand:SVE_FULL_I 3 \"register_operand\" \"w, 0, w, w, w\")]\n+\t\tSVE2_COND_INT_BINARY_REV)]\n+\t     UNSPEC_PRED_X)\n+\t   (match_operand:SVE_FULL_I 4 \"aarch64_simd_reg_or_zero\" \"Dz, Dz, Dz, 0, w\")]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE2\n+   && !rtx_equal_p (operands[2], operands[4])\n+   && !rtx_equal_p (operands[3], operands[4])\"\n+  \"@\n+   movprfx\\t%0.<Vetype>, %1/z, %0.<Vetype>\\;<sve_int_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n+   movprfx\\t%0.<Vetype>, %1/z, %0.<Vetype>\\;<sve_int_op_rev>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %2.<Vetype>\n+   movprfx\\t%0.<Vetype>, %1/z, %2.<Vetype>\\;<sve_int_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n+   movprfx\\t%0.<Vetype>, %1/m, %2.<Vetype>\\;<sve_int_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n+   #\"\n+  \"&& 1\"\n+  {\n+    if (reload_completed\n+        && register_operand (operands[4], <MODE>mode)\n+        && !rtx_equal_p (operands[0], operands[4]))\n+      {\n+\temit_insn (gen_vcond_mask_<mode><vpred> (operands[0], operands[2],\n+\t\t\t\t\t\t operands[4], operands[1]));\n+\toperands[4] = operands[2] = operands[0];\n+      }\n+    else if (!CONSTANT_P (operands[5]))\n+      operands[5] = CONSTM1_RTX (<VPRED>mode);\n+    else\n+      FAIL;\n+  }\n+  [(set_attr \"movprfx\" \"yes\")]\n+)\n+\n+;; Predicated binary operations with no reverse form, merging with zero.\n+;; At present we don't generate these patterns via a cond_* optab,\n+;; so there's no correctness requirement to handle merging with an\n+;; independent value.\n+(define_insn_and_rewrite \"*cond_<sve_int_op><mode>_z\"\n+  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=&w, &w\")\n+\t(unspec:SVE_FULL_I\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n+\t   (unspec:SVE_FULL_I\n+\t     [(match_operand 5)\n+\t      (unspec:SVE_FULL_I\n+\t\t[(match_operand:SVE_FULL_I 2 \"register_operand\" \"0, w\")\n+\t\t (match_operand:SVE_FULL_I 3 \"register_operand\" \"w, w\")]\n+\t\tSVE2_COND_INT_BINARY_NOREV)]\n+\t     UNSPEC_PRED_X)\n+\t   (match_operand:SVE_FULL_I 4 \"aarch64_simd_imm_zero\")]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE2\"\n+  \"@\n+   movprfx\\t%0.<Vetype>, %1/z, %0.<Vetype>\\;<sve_int_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n+   movprfx\\t%0.<Vetype>, %1/z, %2.<Vetype>\\;<sve_int_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\"\n+  \"&& !CONSTANT_P (operands[5])\"\n+  {\n+    operands[5] = CONSTM1_RTX (<VPRED>mode);\n+  }\n+  [(set_attr \"movprfx\" \"yes\")]\n+)\n+\n+;; -------------------------------------------------------------------------\n+;; ---- [INT] Saturating binary arithmetic\n+;; -------------------------------------------------------------------------\n+;; Includes:\n+;; - SQDMULH\n+;; - SQRDMULH\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"@aarch64_sve_<sve_int_op><mode>\"\n+  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w\")\n+\t(unspec:SVE_FULL_I\n+\t  [(match_operand:SVE_FULL_I 1 \"register_operand\" \"w\")\n+\t   (match_operand:SVE_FULL_I 2 \"register_operand\" \"w\")]\n+\t  SVE2_INT_BINARY))]\n+  \"TARGET_SVE2\"\n+  \"<sve_int_op>\\t%0.<Vetype>, %1.<Vetype>, %2.<Vetype>\"\n+)\n+\n+(define_insn \"@aarch64_sve_<sve_int_op>_lane_<mode>\"\n+  [(set (match_operand:SVE_FULL_HSDI 0 \"register_operand\" \"=w\")\n+\t(unspec:SVE_FULL_HSDI\n+\t  [(match_operand:SVE_FULL_HSDI 1 \"register_operand\" \"w\")\n+\t   (unspec:SVE_FULL_HSDI\n+\t     [(match_operand:SVE_FULL_HSDI 2 \"register_operand\" \"<sve_lane_con>\")\n+\t      (match_operand:SI 3 \"const_int_operand\")]\n+\t     UNSPEC_SVE_LANE_SELECT)]\n+\t  SVE2_INT_BINARY_LANE))]\n+  \"TARGET_SVE2\"\n+  \"<sve_int_op>\\t%0.<Vetype>, %1.<Vetype>, %2.<Vetype>[%3]\"\n+)\n+\n+;; -------------------------------------------------------------------------\n+;; ---- [INT] Saturating left shifts\n+;; -------------------------------------------------------------------------\n+;; Includes:\n+;; - SQSHL\n+;; - SQSHLR\n+;; - UQSHL\n+;; - UQSHLR\n+;; -------------------------------------------------------------------------\n+\n+;; Predicated left shifts.\n+(define_insn \"@aarch64_pred_<sve_int_op><mode>\"\n+  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, w, w, ?&w, ?&w\")\n+\t(unspec:SVE_FULL_I\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl, Upl, Upl\")\n+\t   (unspec:SVE_FULL_I\n+\t     [(match_operand:SVE_FULL_I 2 \"register_operand\" \"0, 0, w, w, w\")\n+\t      (match_operand:SVE_FULL_I 3 \"aarch64_sve_<lr>shift_operand\" \"D<lr>, w, 0, D<lr>, w\")]\n+\t     SVE2_COND_INT_SHIFT)]\n \t  UNSPEC_PRED_X))]\n   \"TARGET_SVE2\"\n   \"@\n-   <sur>h<addsub>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n-   movprfx\\t%0, %2\\;<sur>h<addsub>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\"\n+   <sve_int_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%3\n+   <sve_int_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n+   <sve_int_op>r\\t%0.<Vetype>, %1/m, %0.<Vetype>, %2.<Vetype>\n+   movprfx\\t%0, %2\\;<sve_int_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%3\n+   movprfx\\t%0, %2\\;<sve_int_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\"\n+  [(set_attr \"movprfx\" \"*,*,*,yes,yes\")]\n+)\n+\n+;; Predicated left shifts with merging.\n+(define_expand \"@cond_<sve_int_op><mode>\"\n+  [(set (match_operand:SVE_FULL_I 0 \"register_operand\")\n+\t(unspec:SVE_FULL_I\n+\t  [(match_operand:<VPRED> 1 \"register_operand\")\n+\t   (unspec:SVE_FULL_I\n+\t     [(match_dup 5)\n+\t      (unspec:SVE_FULL_I\n+\t\t[(match_operand:SVE_FULL_I 2 \"register_operand\")\n+\t\t (match_operand:SVE_FULL_I 3 \"aarch64_sve_<lr>shift_operand\")]\n+\t\tSVE2_COND_INT_SHIFT)]\n+\t     UNSPEC_PRED_X)\n+\t   (match_operand:SVE_FULL_I 4 \"register_operand\")]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE2\"\n+  {\n+    operands[5] = CONSTM1_RTX (<VPRED>mode);\n+  }\n+)\n+\n+;; Predicated left shifts, merging with the first input.\n+(define_insn_and_rewrite \"*cond_<sve_int_op><mode>_2\"\n+  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, w, ?&w, ?&w\")\n+\t(unspec:SVE_FULL_I\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl, Upl\")\n+\t   (unspec:SVE_FULL_I\n+\t     [(match_operand 4)\n+\t      (unspec:SVE_FULL_I\n+\t\t[(match_operand:SVE_FULL_I 2 \"register_operand\" \"0, 0, w, w\")\n+\t\t (match_operand:SVE_FULL_I 3 \"aarch64_sve_<lr>shift_operand\" \"D<lr>, w, D<lr>, w\")]\n+\t\tSVE2_COND_INT_SHIFT)]\n+\t     UNSPEC_PRED_X)\n+\t   (match_dup 2)]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE2\"\n+  \"@\n+   <sve_int_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%3\n+   <sve_int_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n+   movprfx\\t%0, %2\\;<sve_int_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%3\n+   movprfx\\t%0, %2\\;<sve_int_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\"\n+  \"&& !CONSTANT_P (operands[4])\"\n+  {\n+    operands[4] = CONSTM1_RTX (<VPRED>mode);\n+  }\n+  [(set_attr \"movprfx\" \"*,*,yes,yes\")]\n+)\n+\n+;; Predicated left shifts, merging with the second input.\n+(define_insn_and_rewrite \"*cond_<sve_int_op><mode>_3\"\n+  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_FULL_I\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n+\t   (unspec:SVE_FULL_I\n+\t     [(match_operand 4)\n+\t      (unspec:SVE_FULL_I\n+\t\t[(match_operand:SVE_FULL_I 2 \"register_operand\" \"w, w\")\n+\t\t (match_operand:SVE_FULL_I 3 \"register_operand\" \"0, w\")]\n+\t\tSVE2_COND_INT_SHIFT)]\n+\t     UNSPEC_PRED_X)\n+\t   (match_dup 3)]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE2\"\n+  \"@\n+   <sve_int_op>r\\t%0.<Vetype>, %1/m, %0.<Vetype>, %2.<Vetype>\n+   movprfx\\t%0, %3\\;<sve_int_op>r\\t%0.<Vetype>, %1/m, %0.<Vetype>, %2.<Vetype>\"\n+  \"&& !CONSTANT_P (operands[4])\"\n+  {\n+    operands[4] = CONSTM1_RTX (<VPRED>mode);\n+  }\n   [(set_attr \"movprfx\" \"*,yes\")]\n )\n \n+;; Predicated left shifts, merging with an independent value.\n+(define_insn_and_rewrite \"*cond_<sve_int_op><mode>_any\"\n+  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=&w, &w, &w, &w, &w, &w, &w, ?&w, ?&w\")\n+\t(unspec:SVE_FULL_I\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl, Upl, Upl, Upl, Upl, Upl, Upl\")\n+\t   (unspec:SVE_FULL_I\n+\t     [(match_operand 5)\n+\t      (unspec:SVE_FULL_I\n+\t\t[(match_operand:SVE_FULL_I 2 \"register_operand\" \"0, 0, w, w, w, w, w, w, w\")\n+\t\t (match_operand:SVE_FULL_I 3 \"aarch64_sve_<lr>shift_operand\" \"D<lr>, w, 0, D<lr>, w, D<lr>, w, D<lr>, w\")]\n+\t\tSVE2_COND_INT_SHIFT)]\n+\t     UNSPEC_PRED_X)\n+\t   (match_operand:SVE_FULL_I 4 \"aarch64_simd_reg_or_zero\" \"Dz, Dz, Dz, Dz, Dz, 0, 0, w, w\")]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE2\n+   && !rtx_equal_p (operands[2], operands[4])\n+   && (CONSTANT_P (operands[4]) || !rtx_equal_p (operands[3], operands[4]))\"\n+  \"@\n+   movprfx\\t%0.<Vetype>, %1/z, %0.<Vetype>\\;<sve_int_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%3\n+   movprfx\\t%0.<Vetype>, %1/z, %0.<Vetype>\\;<sve_int_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n+   movprfx\\t%0.<Vetype>, %1/z, %0.<Vetype>\\;<sve_int_op>r\\t%0.<Vetype>, %1/m, %0.<Vetype>, %2.<Vetype>\n+   movprfx\\t%0.<Vetype>, %1/z, %2.<Vetype>\\;<sve_int_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%3\n+   movprfx\\t%0.<Vetype>, %1/z, %2.<Vetype>\\;<sve_int_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n+   movprfx\\t%0.<Vetype>, %1/m, %2.<Vetype>\\;<sve_int_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%3\n+   movprfx\\t%0.<Vetype>, %1/m, %2.<Vetype>\\;<sve_int_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n+  #\n+  #\"\n+  \"&& 1\"\n+  {\n+    if (reload_completed\n+        && register_operand (operands[4], <MODE>mode)\n+        && !rtx_equal_p (operands[0], operands[4]))\n+      {\n+\temit_insn (gen_vcond_mask_<mode><vpred> (operands[0], operands[2],\n+\t\t\t\t\t\t operands[4], operands[1]));\n+\toperands[4] = operands[2] = operands[0];\n+      }\n+    else if (!CONSTANT_P (operands[5]))\n+      operands[5] = CONSTM1_RTX (<VPRED>mode);\n+    else\n+      FAIL;\n+  }\n+  [(set_attr \"movprfx\" \"yes\")]\n+)\n+\n ;; =========================================================================\n ;; == Uniform ternary arithmnetic\n ;; =========================================================================\n \n+;; -------------------------------------------------------------------------\n+;; ---- [INT] General ternary arithmetic that maps to unspecs\n+;; -------------------------------------------------------------------------\n+;; Includes:\n+;; - ADCLB\n+;; - ADCLT\n+;; - EORBT\n+;; - EORTB\n+;; - SBCLB\n+;; - SBCLT\n+;; - SQRDMLAH\n+;; - SQRDMLSH\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"@aarch64_sve_<sve_int_op><mode>\"\n+  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_FULL_I\n+\t  [(match_operand:SVE_FULL_I 2 \"register_operand\" \"w, w\")\n+\t   (match_operand:SVE_FULL_I 3 \"register_operand\" \"w, w\")\n+\t   (match_operand:SVE_FULL_I 1 \"register_operand\" \"0, w\")]\n+\t  SVE2_INT_TERNARY))]\n+  \"TARGET_SVE2\"\n+  \"@\n+   <sve_int_op>\\t%0.<Vetype>, %2.<Vetype>, %3.<Vetype>\n+   movprfx\\t%0, %1\\;<sve_int_op>\\t%0.<Vetype>, %2.<Vetype>, %3.<Vetype>\"\n+)\n+\n+(define_insn \"@aarch64_sve_<sve_int_op>_lane_<mode>\"\n+  [(set (match_operand:SVE_FULL_HSDI 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_FULL_HSDI\n+\t  [(match_operand:SVE_FULL_HSDI 2 \"register_operand\" \"w, w\")\n+\t   (unspec:SVE_FULL_HSDI\n+\t     [(match_operand:SVE_FULL_HSDI 3 \"register_operand\" \"<sve_lane_con>, <sve_lane_con>\")\n+\t      (match_operand:SI 4 \"const_int_operand\")]\n+\t     UNSPEC_SVE_LANE_SELECT)\n+\t   (match_operand:SVE_FULL_HSDI 1 \"register_operand\" \"0, w\")]\n+\t  SVE2_INT_TERNARY_LANE))]\n+  \"TARGET_SVE2\"\n+  \"@\n+   <sve_int_op>\\t%0.<Vetype>, %2.<Vetype>, %3.<Vetype>[%4]\n+   movprfx\\t%0, %1\\;<sve_int_op>\\t%0.<Vetype>, %2.<Vetype>, %3.<Vetype>[%4]\"\n+)\n+\n+;; -------------------------------------------------------------------------\n+;; ---- [INT] Multiply-and-accumulate operations\n+;; -------------------------------------------------------------------------\n+;; Includes the lane forms of:\n+;; - MLA\n+;; - MLS\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"@aarch64_sve_add_mul_lane_<mode>\"\n+  [(set (match_operand:SVE_FULL_HSDI 0 \"register_operand\" \"=w, ?&w\")\n+\t(plus:SVE_FULL_HSDI\n+\t  (mult:SVE_FULL_HSDI\n+\t    (unspec:SVE_FULL_HSDI\n+\t      [(match_operand:SVE_FULL_HSDI 3 \"register_operand\" \"<sve_lane_con>, <sve_lane_con>\")\n+\t       (match_operand:SI 4 \"const_int_operand\")]\n+\t      UNSPEC_SVE_LANE_SELECT)\n+\t    (match_operand:SVE_FULL_HSDI 2 \"register_operand\" \"w, w\"))\n+\t  (match_operand:SVE_FULL_HSDI 1 \"register_operand\" \"0, w\")))]\n+  \"TARGET_SVE2\"\n+  \"@\n+   mla\\t%0.<Vetype>, %2.<Vetype>, %3.<Vetype>[%4]\n+   movprfx\\t%0, %1\\;mla\\t%0.<Vetype>, %2.<Vetype>, %3.<Vetype>[%4]\"\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+(define_insn \"@aarch64_sve_sub_mul_lane_<mode>\"\n+  [(set (match_operand:SVE_FULL_HSDI 0 \"register_operand\" \"=w, ?&w\")\n+\t(minus:SVE_FULL_HSDI\n+\t  (match_operand:SVE_FULL_HSDI 1 \"register_operand\" \"0, w\")\n+\t  (mult:SVE_FULL_HSDI\n+\t    (unspec:SVE_FULL_HSDI\n+\t      [(match_operand:SVE_FULL_HSDI 3 \"register_operand\" \"<sve_lane_con>, <sve_lane_con>\")\n+\t       (match_operand:SI 4 \"const_int_operand\")]\n+\t      UNSPEC_SVE_LANE_SELECT)\n+\t    (match_operand:SVE_FULL_HSDI 2 \"register_operand\" \"w, w\"))))]\n+  \"TARGET_SVE2\"\n+  \"@\n+   mls\\t%0.<Vetype>, %2.<Vetype>, %3.<Vetype>[%4]\n+   movprfx\\t%0, %1\\;mls\\t%0.<Vetype>, %2.<Vetype>, %3.<Vetype>[%4]\"\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+;; -------------------------------------------------------------------------\n+;; ---- [INT] Binary logic operations with rotation\n+;; -------------------------------------------------------------------------\n+;; Includes:\n+;; - XAR\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"@aarch64_sve2_xar<mode>\"\n+  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(rotatert:SVE_FULL_I\n+\t  (xor:SVE_FULL_I\n+\t    (match_operand:SVE_FULL_I 1 \"register_operand\" \"%0, w\")\n+\t    (match_operand:SVE_FULL_I 2 \"register_operand\" \"w, w\"))\n+\t  (match_operand:SVE_FULL_I 3 \"aarch64_simd_rshift_imm\")))]\n+  \"TARGET_SVE2\"\n+  \"@\n+  xar\\t%0.<Vetype>, %0.<Vetype>, %2.<Vetype>, #%3\n+  movprfx\\t%0, %1\\;xar\\t%0.<Vetype>, %0.<Vetype>, %2.<Vetype>, #%3\"\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n ;; -------------------------------------------------------------------------\n ;; ---- [INT] Ternary logic operations\n ;; -------------------------------------------------------------------------\n ;; Includes:\n+;; - BCAX\n ;; - BSL\n ;; - BSL1N\n ;; - BSL2N\n ;; - EOR3\n ;; - NBSL\n ;; -------------------------------------------------------------------------\n \n+;; Unpredicated exclusive OR of AND.\n+(define_insn \"@aarch64_sve2_bcax<mode>\"\n+  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(xor:SVE_FULL_I\n+\t  (and:SVE_FULL_I\n+\t    (match_operand:SVE_FULL_I 2 \"register_operand\" \"w, w\")\n+\t    (match_operand:SVE_FULL_I 3 \"register_operand\" \"w, w\"))\n+\t  (match_operand:SVE_FULL_I 1 \"register_operand\" \"0, w\")))]\n+  \"TARGET_SVE2\"\n+  \"@\n+  bcax\\t%0.d, %0.d, %2.d, %3.d\n+  movprfx\\t%0, %1\\;bcax\\t%0.d, %0.d, %2.d, %3.d\"\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n ;; Unpredicated 3-way exclusive OR.\n-(define_insn \"*aarch64_sve2_eor3<mode>\"\n+(define_insn \"@aarch64_sve2_eor3<mode>\"\n   [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, w, w, ?&w\")\n \t(xor:SVE_FULL_I\n \t  (xor:SVE_FULL_I\n@@ -214,6 +861,18 @@\n \n ;; Unpredicated bitwise select.\n ;; (op3 ? bsl_mov : bsl_dup) == (((bsl_mov ^ bsl_dup) & op3) ^ bsl_dup)\n+(define_expand \"@aarch64_sve2_bsl<mode>\"\n+  [(set (match_operand:SVE_FULL_I 0 \"register_operand\")\n+\t(xor:SVE_FULL_I\n+\t  (and:SVE_FULL_I\n+\t    (xor:SVE_FULL_I\n+\t      (match_operand:SVE_FULL_I 1 \"register_operand\")\n+\t      (match_operand:SVE_FULL_I 2 \"register_operand\"))\n+\t    (match_operand:SVE_FULL_I 3 \"register_operand\"))\n+\t  (match_dup 2)))]\n+  \"TARGET_SVE2\"\n+)\n+\n (define_insn \"*aarch64_sve2_bsl<mode>\"\n   [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n \t(xor:SVE_FULL_I\n@@ -232,6 +891,25 @@\n \n ;; Unpredicated bitwise inverted select.\n ;; (~(op3 ? bsl_mov : bsl_dup)) == (~(((bsl_mov ^ bsl_dup) & op3) ^ bsl_dup))\n+(define_expand \"@aarch64_sve2_nbsl<mode>\"\n+  [(set (match_operand:SVE_FULL_I 0 \"register_operand\")\n+\t(unspec:SVE_FULL_I\n+\t  [(match_dup 4)\n+\t   (not:SVE_FULL_I\n+\t     (xor:SVE_FULL_I\n+\t       (and:SVE_FULL_I\n+\t\t (xor:SVE_FULL_I\n+\t\t   (match_operand:SVE_FULL_I 1 \"register_operand\")\n+\t\t   (match_operand:SVE_FULL_I 2 \"register_operand\"))\n+\t\t (match_operand:SVE_FULL_I 3 \"register_operand\"))\n+\t       (match_dup 2)))]\n+\t  UNSPEC_PRED_X))]\n+  \"TARGET_SVE2\"\n+  {\n+    operands[4] = CONSTM1_RTX (<VPRED>mode);\n+  }\n+)\n+\n (define_insn_and_rewrite \"*aarch64_sve2_nbsl<mode>\"\n   [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n \t(unspec:SVE_FULL_I\n@@ -258,6 +936,25 @@\n \n ;; Unpredicated bitwise select with inverted first operand.\n ;; (op3 ? ~bsl_mov : bsl_dup) == ((~(bsl_mov ^ bsl_dup) & op3) ^ bsl_dup)\n+(define_expand \"@aarch64_sve2_bsl1n<mode>\"\n+  [(set (match_operand:SVE_FULL_I 0 \"register_operand\")\n+\t(xor:SVE_FULL_I\n+\t  (and:SVE_FULL_I\n+\t    (unspec:SVE_FULL_I\n+\t      [(match_dup 4)\n+\t       (not:SVE_FULL_I\n+\t\t (xor:SVE_FULL_I\n+\t\t   (match_operand:SVE_FULL_I 1 \"register_operand\")\n+\t\t   (match_operand:SVE_FULL_I 2 \"register_operand\")))]\n+\t      UNSPEC_PRED_X)\n+\t    (match_operand:SVE_FULL_I 3 \"register_operand\"))\n+\t  (match_dup 2)))]\n+  \"TARGET_SVE2\"\n+  {\n+    operands[4] = CONSTM1_RTX (<VPRED>mode);\n+  }\n+)\n+\n (define_insn_and_rewrite \"*aarch64_sve2_bsl1n<mode>\"\n   [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n \t(xor:SVE_FULL_I\n@@ -284,17 +981,37 @@\n \n ;; Unpredicated bitwise select with inverted second operand.\n ;; (bsl_dup ? bsl_mov : ~op3) == ((bsl_dup & bsl_mov) | (~op3 & ~bsl_dup))\n-(define_insn_and_rewrite \"*aarch64_sve2_bsl2n<mode>\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n+(define_expand \"@aarch64_sve2_bsl2n<mode>\"\n+  [(set (match_operand:SVE_FULL_I 0 \"register_operand\")\n \t(ior:SVE_FULL_I\n \t  (and:SVE_FULL_I\n-\t    (match_operand:SVE_FULL_I 1 \"register_operand\" \"<bsl_1st>, w\")\n-\t    (match_operand:SVE_FULL_I 2 \"register_operand\" \"<bsl_2nd>, w\"))\n+\t    (match_operand:SVE_FULL_I 1 \"register_operand\")\n+\t    (match_operand:SVE_FULL_I 3 \"register_operand\"))\n \t  (unspec:SVE_FULL_I\n-\t    [(match_operand 4)\n+\t    [(match_dup 4)\n \t     (and:SVE_FULL_I\n \t       (not:SVE_FULL_I\n-\t\t (match_operand:SVE_FULL_I 3 \"register_operand\" \"w, w\"))\n+\t\t (match_operand:SVE_FULL_I 2 \"register_operand\"))\n+\t       (not:SVE_FULL_I\n+\t\t (match_dup 3)))]\n+\t    UNSPEC_PRED_X)))]\n+  \"TARGET_SVE2\"\n+  {\n+    operands[4] = CONSTM1_RTX (<VPRED>mode);\n+  }\n+)\n+\n+(define_insn_and_rewrite \"*aarch64_sve2_bsl2n<mode>\"\n+  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(ior:SVE_FULL_I\n+\t  (and:SVE_FULL_I\n+\t    (match_operand:SVE_FULL_I 1 \"register_operand\" \"<bsl_1st>, w\")\n+\t    (match_operand:SVE_FULL_I 2 \"register_operand\" \"<bsl_2nd>, w\"))\n+\t  (unspec:SVE_FULL_I\n+\t    [(match_operand 4)\n+\t     (and:SVE_FULL_I\n+\t       (not:SVE_FULL_I\n+\t\t (match_operand:SVE_FULL_I 3 \"register_operand\" \"w, w\"))\n \t       (not:SVE_FULL_I\n \t\t (match_dup BSL_DUP)))]\n \t    UNSPEC_PRED_X)))]\n@@ -340,58 +1057,521 @@\n ;; ---- [INT] Shift-and-accumulate operations\n ;; -------------------------------------------------------------------------\n ;; Includes:\n+;; - SRSRA\n ;; - SSRA\n+;; - URSRA\n ;; - USRA\n ;; -------------------------------------------------------------------------\n \n-;; Unpredicated signed / unsigned shift-right accumulate.\n+;; Provide the natural unpredicated interface for SSRA and USRA.\n+(define_expand \"@aarch64_sve_add_<sve_int_op><mode>\"\n+  [(set (match_operand:SVE_FULL_I 0 \"register_operand\")\n+\t(plus:SVE_FULL_I\n+\t  (unspec:SVE_FULL_I\n+\t    [(match_dup 4)\n+\t     (SHIFTRT:SVE_FULL_I\n+\t       (match_operand:SVE_FULL_I 2 \"register_operand\")\n+\t       (match_operand:SVE_FULL_I 3 \"aarch64_simd_rshift_imm\"))]\n+\t    UNSPEC_PRED_X)\n+\t (match_operand:SVE_FULL_I 1 \"register_operand\")))]\n+  \"TARGET_SVE2\"\n+  {\n+    operands[4] = CONSTM1_RTX (<VPRED>mode);\n+  }\n+)\n+\n+;; Pattern-match SSRA and USRA as a predicated operation whose predicate\n+;; isn't needed.\n (define_insn_and_rewrite \"*aarch64_sve2_sra<mode>\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w\")\n+  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n \t(plus:SVE_FULL_I\n \t  (unspec:SVE_FULL_I\n \t    [(match_operand 4)\n \t     (SHIFTRT:SVE_FULL_I\n-\t       (match_operand:SVE_FULL_I 2 \"register_operand\" \"w\")\n-\t       (match_operand:SVE_FULL_I 3 \"aarch64_simd_rshift_imm\" \"Dr\"))]\n+\t       (match_operand:SVE_FULL_I 2 \"register_operand\" \"w, w\")\n+\t       (match_operand:SVE_FULL_I 3 \"aarch64_simd_rshift_imm\"))]\n \t    UNSPEC_PRED_X)\n-\t (match_operand:SVE_FULL_I 1 \"register_operand\" \"0\")))]\n+\t (match_operand:SVE_FULL_I 1 \"register_operand\" \"0, w\")))]\n   \"TARGET_SVE2\"\n-  \"<sra_op>sra\\t%0.<Vetype>, %2.<Vetype>, #%3\"\n+  \"@\n+   <sra_op>sra\\t%0.<Vetype>, %2.<Vetype>, #%3\n+   movprfx\\t%0, %1\\;<sra_op>sra\\t%0.<Vetype>, %2.<Vetype>, #%3\"\n   \"&& !CONSTANT_P (operands[4])\"\n   {\n     operands[4] = CONSTM1_RTX (<VPRED>mode);\n   }\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+;; SRSRA and URSRA.\n+(define_insn \"@aarch64_sve_add_<sve_int_op><mode>\"\n+  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(plus:SVE_FULL_I\n+\t  (unspec:SVE_FULL_I\n+\t    [(match_operand:SVE_FULL_I 2 \"register_operand\" \"w, w\")\n+\t     (match_operand:SVE_FULL_I 3 \"aarch64_simd_rshift_imm\")]\n+\t    VRSHR_N)\n+\t (match_operand:SVE_FULL_I 1 \"register_operand\" \"0, w\")))]\n+  \"TARGET_SVE2\"\n+  \"@\n+   <sur>sra\\t%0.<Vetype>, %2.<Vetype>, #%3\n+   movprfx\\t%0, %1\\;<sur>sra\\t%0.<Vetype>, %2.<Vetype>, #%3\"\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+;; -------------------------------------------------------------------------\n+;; ---- [INT] Shift-and-insert operations\n+;; -------------------------------------------------------------------------\n+;; Includes:\n+;; - SLI\n+;; - SRI\n+;; -------------------------------------------------------------------------\n+\n+;; These instructions do not take MOVPRFX.\n+(define_insn \"@aarch64_sve_<sve_int_op><mode>\"\n+  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w\")\n+\t(unspec:SVE_FULL_I\n+\t  [(match_operand:SVE_FULL_I 1 \"register_operand\" \"0\")\n+\t   (match_operand:SVE_FULL_I 2 \"register_operand\" \"w\")\n+\t   (match_operand:SVE_FULL_I 3 \"aarch64_simd_<lr>shift_imm\")]\n+\t  SVE2_INT_SHIFT_INSERT))]\n+  \"TARGET_SVE2\"\n+  \"<sve_int_op>\\t%0.<Vetype>, %2.<Vetype>, #%3\"\n+)\n+\n+;; -------------------------------------------------------------------------\n+;; ---- [INT] Sum of absolute differences\n+;; -------------------------------------------------------------------------\n+;; Includes:\n+;; - SABA\n+;; - UABA\n+;; -------------------------------------------------------------------------\n+\n+;; Provide the natural unpredicated interface for SABA and UABA.\n+(define_expand \"@aarch64_sve2_<su>aba<mode>\"\n+  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(plus:SVE_FULL_I\n+\t  (minus:SVE_FULL_I\n+\t    (unspec:SVE_FULL_I\n+\t      [(match_dup 4)\n+\t       (USMAX:SVE_FULL_I\n+\t\t (match_operand:SVE_FULL_I 2 \"register_operand\" \"w, w\")\n+\t\t (match_operand:SVE_FULL_I 3 \"register_operand\" \"w, w\"))]\n+\t      UNSPEC_PRED_X)\n+\t    (unspec:SVE_FULL_I\n+\t      [(match_dup 4)\n+\t       (<max_opp>:SVE_FULL_I\n+\t\t (match_dup 2)\n+\t\t (match_dup 3))]\n+\t      UNSPEC_PRED_X))\n+\t  (match_operand:SVE_FULL_I 1 \"register_operand\" \"0, w\")))]\n+  \"TARGET_SVE2\"\n+  {\n+    operands[4] = CONSTM1_RTX (<VPRED>mode);\n+  }\n+)\n+\n+;; Pattern-match SABA and UABA as an absolute-difference-and-accumulate\n+;; operation whose predicates aren't needed.\n+(define_insn \"*aarch64_sve2_<su>aba<mode>\"\n+  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(plus:SVE_FULL_I\n+\t  (minus:SVE_FULL_I\n+\t    (unspec:SVE_FULL_I\n+\t      [(match_operand 4)\n+\t       (USMAX:SVE_FULL_I\n+\t\t (match_operand:SVE_FULL_I 2 \"register_operand\" \"w, w\")\n+\t\t (match_operand:SVE_FULL_I 3 \"register_operand\" \"w, w\"))]\n+\t      UNSPEC_PRED_X)\n+\t    (unspec:SVE_FULL_I\n+\t      [(match_operand 5)\n+\t       (<max_opp>:SVE_FULL_I\n+\t\t (match_dup 2)\n+\t\t (match_dup 3))]\n+\t      UNSPEC_PRED_X))\n+\t  (match_operand:SVE_FULL_I 1 \"register_operand\" \"0, w\")))]\n+  \"TARGET_SVE2\"\n+  \"@\n+   <su>aba\\t%0.<Vetype>, %2.<Vetype>, %3.<Vetype>\n+   movprfx\\t%0, %1\\;<su>aba\\t%0.<Vetype>, %2.<Vetype>, %3.<Vetype>\"\n+  [(set_attr \"movprfx\" \"*,yes\")]\n )\n \n ;; =========================================================================\n ;; == Extending arithmetic\n ;; =========================================================================\n \n+;; -------------------------------------------------------------------------\n+;; ---- [INT] Wide binary arithmetic\n+;; -------------------------------------------------------------------------\n+;; Includes:\n+;; - SADDWB\n+;; - SADDWT\n+;; - SSUBWB\n+;; - SSUBWT\n+;; - UADDWB\n+;; - UADDWT\n+;; - USUBWB\n+;; - USUBWT\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"@aarch64_sve_<sve_int_op><mode>\"\n+  [(set (match_operand:SVE_FULL_HSDI 0 \"register_operand\" \"=w\")\n+\t(unspec:SVE_FULL_HSDI\n+\t  [(match_operand:SVE_FULL_HSDI 1 \"register_operand\" \"w\")\n+\t   (match_operand:<VNARROW> 2 \"register_operand\" \"w\")]\n+\t  SVE2_INT_BINARY_WIDE))]\n+  \"TARGET_SVE2\"\n+  \"<sve_int_op>\\t%0.<Vetype>, %1.<Vetype>, %2.<Ventype>\"\n+)\n+\n ;; -------------------------------------------------------------------------\n ;; ---- [INT] Long binary arithmetic\n ;; -------------------------------------------------------------------------\n ;; Includes:\n+;; - SABDLB\n+;; - SABDLT\n+;; - SADDLB\n+;; - SADDLBT\n+;; - SADDLT\n ;; - SMULLB\n ;; - SMULLT\n+;; - SQDMULLB\n+;; - SQDMULLT\n+;; - SSUBLB\n+;; - SSUBLBT\n+;; - SSUBLT\n+;; - SSUBLTB\n+;; - UABDLB\n+;; - UABDLT\n+;; - UADDLB\n+;; - UADDLT\n ;; - UMULLB\n ;; - UMULLT\n+;; - USUBLB\n+;; - USUBLT\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"@aarch64_sve_<sve_int_op><mode>\"\n+  [(set (match_operand:SVE_FULL_HSDI 0 \"register_operand\" \"=w\")\n+\t(unspec:SVE_FULL_HSDI\n+\t  [(match_operand:<VNARROW> 1 \"register_operand\" \"w\")\n+\t   (match_operand:<VNARROW> 2 \"register_operand\" \"w\")]\n+\t  SVE2_INT_BINARY_LONG))]\n+  \"TARGET_SVE2\"\n+  \"<sve_int_op>\\t%0.<Vetype>, %1.<Ventype>, %2.<Ventype>\"\n+)\n+\n+(define_insn \"@aarch64_sve_<sve_int_op>_lane_<mode>\"\n+  [(set (match_operand:SVE_FULL_SDI 0 \"register_operand\" \"=w\")\n+\t(unspec:SVE_FULL_SDI\n+\t  [(match_operand:<VNARROW> 1 \"register_operand\" \"w\")\n+\t   (unspec:<VNARROW>\n+\t     [(match_operand:<VNARROW> 2 \"register_operand\" \"<sve_lane_con>\")\n+\t      (match_operand:SI 3 \"const_int_operand\")]\n+\t     UNSPEC_SVE_LANE_SELECT)]\n+\t  SVE2_INT_BINARY_LONG_LANE))]\n+  \"TARGET_SVE2\"\n+  \"<sve_int_op>\\t%0.<Vetype>, %1.<Ventype>, %2.<Ventype>[%3]\"\n+)\n+\n+;; -------------------------------------------------------------------------\n+;; ---- [INT] Long left shifts\n+;; -------------------------------------------------------------------------\n+;; Includes:\n+;; - SSHLLB\n+;; - SSHLLT\n+;; - USHLLB\n+;; - USHLLT\n+;; -------------------------------------------------------------------------\n+\n+;; The immediate range is enforced before generating the instruction.\n+(define_insn \"@aarch64_sve_<sve_int_op><mode>\"\n+  [(set (match_operand:SVE_FULL_HSDI 0 \"register_operand\" \"=w\")\n+\t(unspec:SVE_FULL_HSDI\n+\t  [(match_operand:<VNARROW> 1 \"register_operand\" \"w\")\n+\t   (match_operand:DI 2 \"const_int_operand\")]\n+\t  SVE2_INT_SHIFT_IMM_LONG))]\n+  \"TARGET_SVE2\"\n+  \"<sve_int_op>\\t%0.<Vetype>, %1.<Ventype>, #%2\"\n+)\n+\n+;; -------------------------------------------------------------------------\n+;; ---- [INT] Long binary arithmetic with accumulation\n+;; -------------------------------------------------------------------------\n+;; Includes:\n+;; - SABALB\n+;; - SABALT\n+;; - SMLALB\n+;; - SMLALT\n+;; - SMLSLB\n+;; - SMLSLT\n+;; - SQDMLALB\n+;; - SQDMLALBT\n+;; - SQDMLALT\n+;; - SQDMLSLB\n+;; - SQDMLSLBT\n+;; - SQDMLSLT\n+;; - UABALB\n+;; - UABALT\n+;; - UMLALB\n+;; - UMLALT\n+;; - UMLSLB\n+;; - UMLSLT\n+;; -------------------------------------------------------------------------\n+\n+;; Non-saturating MLA operations.\n+(define_insn \"@aarch64_sve_add_<sve_int_op><mode>\"\n+  [(set (match_operand:SVE_FULL_HSDI 0 \"register_operand\" \"=w, ?&w\")\n+\t(plus:SVE_FULL_HSDI\n+\t  (unspec:SVE_FULL_HSDI\n+\t    [(match_operand:<VNARROW> 2 \"register_operand\" \"w, w\")\n+\t     (match_operand:<VNARROW> 3 \"register_operand\" \"w, w\")]\n+\t    SVE2_INT_ADD_BINARY_LONG)\n+\t  (match_operand:SVE_FULL_HSDI 1 \"register_operand\" \"0, w\")))]\n+  \"TARGET_SVE2\"\n+  \"@\n+   <sve_int_add_op>\\t%0.<Vetype>, %2.<Ventype>, %3.<Ventype>\n+   movprfx\\t%0, %1\\;<sve_int_add_op>\\t%0.<Vetype>, %2.<Ventype>, %3.<Ventype>\"\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+;; Non-saturating MLA operations with lane select.\n+(define_insn \"@aarch64_sve_add_<sve_int_op>_lane_<mode>\"\n+  [(set (match_operand:SVE_FULL_SDI 0 \"register_operand\" \"=w, ?&w\")\n+\t(plus:SVE_FULL_SDI\n+\t  (unspec:SVE_FULL_SDI\n+\t    [(match_operand:<VNARROW> 2 \"register_operand\" \"w, w\")\n+\t     (unspec:<VNARROW>\n+\t       [(match_operand:<VNARROW> 3 \"register_operand\" \"<sve_lane_con>, <sve_lane_con>\")\n+\t\t(match_operand:SI 4 \"const_int_operand\")]\n+\t       UNSPEC_SVE_LANE_SELECT)]\n+\t    SVE2_INT_ADD_BINARY_LONG_LANE)\n+\t  (match_operand:SVE_FULL_SDI 1 \"register_operand\" \"0, w\")))]\n+  \"TARGET_SVE2\"\n+  \"@\n+   <sve_int_add_op>\\t%0.<Vetype>, %2.<Ventype>, %3.<Ventype>[%4]\n+   movprfx\\t%0, %1\\;<sve_int_add_op>\\t%0.<Vetype>, %2.<Ventype>, %3.<Ventype>[%4]\"\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+;; Saturating MLA operations.\n+(define_insn \"@aarch64_sve_qadd_<sve_int_op><mode>\"\n+  [(set (match_operand:SVE_FULL_HSDI 0 \"register_operand\" \"=w, ?&w\")\n+\t(ss_plus:SVE_FULL_HSDI\n+\t  (unspec:SVE_FULL_HSDI\n+\t    [(match_operand:<VNARROW> 2 \"register_operand\" \"w, w\")\n+\t     (match_operand:<VNARROW> 3 \"register_operand\" \"w, w\")]\n+\t    SVE2_INT_QADD_BINARY_LONG)\n+\t  (match_operand:SVE_FULL_HSDI 1 \"register_operand\" \"0, w\")))]\n+  \"TARGET_SVE2\"\n+  \"@\n+   <sve_int_qadd_op>\\t%0.<Vetype>, %2.<Ventype>, %3.<Ventype>\n+   movprfx\\t%0, %1\\;<sve_int_qadd_op>\\t%0.<Vetype>, %2.<Ventype>, %3.<Ventype>\"\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+;; Saturating MLA operations with lane select.\n+(define_insn \"@aarch64_sve_qadd_<sve_int_op>_lane_<mode>\"\n+  [(set (match_operand:SVE_FULL_SDI 0 \"register_operand\" \"=w, ?&w\")\n+\t(ss_plus:SVE_FULL_SDI\n+\t  (unspec:SVE_FULL_SDI\n+\t    [(match_operand:<VNARROW> 2 \"register_operand\" \"w, w\")\n+\t     (unspec:<VNARROW>\n+\t       [(match_operand:<VNARROW> 3 \"register_operand\" \"<sve_lane_con>, <sve_lane_con>\")\n+\t\t(match_operand:SI 4 \"const_int_operand\")]\n+\t       UNSPEC_SVE_LANE_SELECT)]\n+\t    SVE2_INT_QADD_BINARY_LONG_LANE)\n+\t  (match_operand:SVE_FULL_SDI 1 \"register_operand\" \"0, w\")))]\n+  \"TARGET_SVE2\"\n+  \"@\n+   <sve_int_qadd_op>\\t%0.<Vetype>, %2.<Ventype>, %3.<Ventype>[%4]\n+   movprfx\\t%0, %1\\;<sve_int_qadd_op>\\t%0.<Vetype>, %2.<Ventype>, %3.<Ventype>[%4]\"\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+;; Non-saturating MLS operations.\n+(define_insn \"@aarch64_sve_sub_<sve_int_op><mode>\"\n+  [(set (match_operand:SVE_FULL_HSDI 0 \"register_operand\" \"=w, ?&w\")\n+\t(minus:SVE_FULL_HSDI\n+\t  (match_operand:SVE_FULL_HSDI 1 \"register_operand\" \"0, w\")\n+\t  (unspec:SVE_FULL_HSDI\n+\t    [(match_operand:<VNARROW> 2 \"register_operand\" \"w, w\")\n+\t     (match_operand:<VNARROW> 3 \"register_operand\" \"w, w\")]\n+\t    SVE2_INT_SUB_BINARY_LONG)))]\n+  \"TARGET_SVE2\"\n+  \"@\n+   <sve_int_sub_op>\\t%0.<Vetype>, %2.<Ventype>, %3.<Ventype>\n+   movprfx\\t%0, %1\\;<sve_int_sub_op>\\t%0.<Vetype>, %2.<Ventype>, %3.<Ventype>\"\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+;; Non-saturating MLS operations with lane select.\n+(define_insn \"@aarch64_sve_sub_<sve_int_op>_lane_<mode>\"\n+  [(set (match_operand:SVE_FULL_SDI 0 \"register_operand\" \"=w, ?&w\")\n+\t(minus:SVE_FULL_SDI\n+\t  (match_operand:SVE_FULL_SDI 1 \"register_operand\" \"0, w\")\n+\t  (unspec:SVE_FULL_SDI\n+\t    [(match_operand:<VNARROW> 2 \"register_operand\" \"w, w\")\n+\t     (unspec:<VNARROW>\n+\t       [(match_operand:<VNARROW> 3 \"register_operand\" \"<sve_lane_con>, <sve_lane_con>\")\n+\t\t(match_operand:SI 4 \"const_int_operand\")]\n+\t       UNSPEC_SVE_LANE_SELECT)]\n+\t    SVE2_INT_SUB_BINARY_LONG_LANE)))]\n+  \"TARGET_SVE2\"\n+  \"@\n+   <sve_int_sub_op>\\t%0.<Vetype>, %2.<Ventype>, %3.<Ventype>[%4]\n+   movprfx\\t%0, %1\\;<sve_int_sub_op>\\t%0.<Vetype>, %2.<Ventype>, %3.<Ventype>[%4]\"\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+;; Saturating MLS operations.\n+(define_insn \"@aarch64_sve_qsub_<sve_int_op><mode>\"\n+  [(set (match_operand:SVE_FULL_HSDI 0 \"register_operand\" \"=w, ?&w\")\n+\t(ss_minus:SVE_FULL_HSDI\n+\t  (match_operand:SVE_FULL_HSDI 1 \"register_operand\" \"0, w\")\n+\t  (unspec:SVE_FULL_HSDI\n+\t    [(match_operand:<VNARROW> 2 \"register_operand\" \"w, w\")\n+\t     (match_operand:<VNARROW> 3 \"register_operand\" \"w, w\")]\n+\t    SVE2_INT_QSUB_BINARY_LONG)))]\n+  \"TARGET_SVE2\"\n+  \"@\n+   <sve_int_qsub_op>\\t%0.<Vetype>, %2.<Ventype>, %3.<Ventype>\n+   movprfx\\t%0, %1\\;<sve_int_qsub_op>\\t%0.<Vetype>, %2.<Ventype>, %3.<Ventype>\"\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+;; Saturating MLS operations with lane select.\n+(define_insn \"@aarch64_sve_qsub_<sve_int_op>_lane_<mode>\"\n+  [(set (match_operand:SVE_FULL_SDI 0 \"register_operand\" \"=w, ?&w\")\n+\t(ss_minus:SVE_FULL_SDI\n+\t  (match_operand:SVE_FULL_SDI 1 \"register_operand\" \"0, w\")\n+\t  (unspec:SVE_FULL_SDI\n+\t    [(match_operand:<VNARROW> 2 \"register_operand\" \"w, w\")\n+\t     (unspec:<VNARROW>\n+\t       [(match_operand:<VNARROW> 3 \"register_operand\" \"<sve_lane_con>, <sve_lane_con>\")\n+\t\t(match_operand:SI 4 \"const_int_operand\")]\n+\t       UNSPEC_SVE_LANE_SELECT)]\n+\t    SVE2_INT_QSUB_BINARY_LONG_LANE)))]\n+  \"TARGET_SVE2\"\n+  \"@\n+   <sve_int_qsub_op>\\t%0.<Vetype>, %2.<Ventype>, %3.<Ventype>[%4]\n+   movprfx\\t%0, %1\\;<sve_int_qsub_op>\\t%0.<Vetype>, %2.<Ventype>, %3.<Ventype>[%4]\"\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+;; -------------------------------------------------------------------------\n+;; ---- [FP] Long multiplication with accumulation\n+;; -------------------------------------------------------------------------\n+;; Includes:\n+;; - FMLALB\n+;; - FMLALT\n+;; - FMLSLB\n+;; - FMLSLT\n ;; -------------------------------------------------------------------------\n \n-;; Multiply long top / bottom.\n-(define_insn \"<su>mull<bt><Vwide>\"\n-  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-\t(unspec:<VWIDE>\n-\t  [(match_operand:SVE_FULL_BHSI 1 \"register_operand\" \"w\")\n-\t   (match_operand:SVE_FULL_BHSI 2 \"register_operand\" \"w\")]\n-\t  MULLBT))]\n+(define_insn \"@aarch64_sve_<sve_fp_op><mode>\"\n+  [(set (match_operand:VNx4SF_ONLY 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:VNx4SF_ONLY\n+\t  [(match_operand:<VNARROW> 1 \"register_operand\" \"w, w\")\n+\t   (match_operand:<VNARROW> 2 \"register_operand\" \"w, w\")\n+\t   (match_operand:VNx4SF_ONLY 3 \"register_operand\" \"0, w\")]\n+\t  SVE2_FP_TERNARY_LONG))]\n   \"TARGET_SVE2\"\n-  \"<su>mull<bt>\\t%0.<Vewtype>, %1.<Vetype>, %2.<Vetype>\"\n+  \"@\n+   <sve_fp_op>\\t%0.<Vetype>, %1.<Ventype>, %2.<Ventype>\n+   movprfx\\t%0, %3\\;<sve_fp_op>\\t%0.<Vetype>, %1.<Ventype>, %2.<Ventype>\"\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+(define_insn \"@aarch64_<sve_fp_op>_lane_<mode>\"\n+  [(set (match_operand:VNx4SF_ONLY 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:VNx4SF_ONLY\n+\t  [(match_operand:<VNARROW> 1 \"register_operand\" \"w, w\")\n+\t   (unspec:<VNARROW>\n+\t     [(match_operand:<VNARROW> 2 \"register_operand\" \"<sve_lane_con>, <sve_lane_con>\")\n+\t      (match_operand:SI 3 \"const_int_operand\")]\n+\t     UNSPEC_SVE_LANE_SELECT)\n+\t   (match_operand:VNx4SF_ONLY 4 \"register_operand\" \"0, w\")]\n+\t  SVE2_FP_TERNARY_LONG_LANE))]\n+  \"TARGET_SVE2\"\n+  \"@\n+   <sve_fp_op>\\t%0.<Vetype>, %1.<Ventype>, %2.<Ventype>[%3]\n+   movprfx\\t%0, %4\\;<sve_fp_op>\\t%0.<Vetype>, %1.<Ventype>, %2.<Ventype>[%3]\"\n+  [(set_attr \"movprfx\" \"*,yes\")]\n )\n \n ;; =========================================================================\n ;; == Narrowing arithnetic\n ;; =========================================================================\n \n+;; -------------------------------------------------------------------------\n+;; ---- [INT] Narrowing unary arithmetic\n+;; -------------------------------------------------------------------------\n+;; Includes:\n+;; - SQXTNB\n+;; - SQXTNT\n+;; - SQXTUNB\n+;; - SQXTUNT\n+;; - UQXTNB\n+;; - UQXTNT\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"@aarch64_sve_<sve_int_op><mode>\"\n+  [(set (match_operand:<VNARROW> 0 \"register_operand\" \"=w\")\n+\t(unspec:<VNARROW>\n+\t  [(match_operand:SVE_FULL_HSDI 1 \"register_operand\" \"w\")]\n+\t  SVE2_INT_UNARY_NARROWB))]\n+  \"TARGET_SVE2\"\n+  \"<sve_int_op>\\t%0.<Ventype>, %1.<Vetype>\"\n+)\n+\n+;; These instructions do not take MOVPRFX.\n+(define_insn \"@aarch64_sve_<sve_int_op><mode>\"\n+  [(set (match_operand:<VNARROW> 0 \"register_operand\" \"=w\")\n+\t(unspec:<VNARROW>\n+\t  [(match_operand:<VNARROW> 1 \"register_operand\" \"0\")\n+\t   (match_operand:SVE_FULL_HSDI 2 \"register_operand\" \"w\")]\n+\t  SVE2_INT_UNARY_NARROWT))]\n+  \"TARGET_SVE2\"\n+  \"<sve_int_op>\\t%0.<Ventype>, %2.<Vetype>\"\n+)\n+\n+;; -------------------------------------------------------------------------\n+;; ---- [INT] Narrowing binary arithmetic\n+;; -------------------------------------------------------------------------\n+;; Includes:\n+;; - ADDHNB\n+;; - ADDHNT\n+;; - RADDHNB\n+;; - RADDHNT\n+;; - RSUBHNB\n+;; - RSUBHNT\n+;; - SUBHNB\n+;; - SUBHNT\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"@aarch64_sve_<sve_int_op><mode>\"\n+  [(set (match_operand:<VNARROW> 0 \"register_operand\" \"=w\")\n+\t(unspec:<VNARROW>\n+\t  [(match_operand:SVE_FULL_HSDI 1 \"register_operand\" \"w\")\n+\t   (match_operand:SVE_FULL_HSDI 2 \"register_operand\" \"w\")]\n+\t  SVE2_INT_BINARY_NARROWB))]\n+  \"TARGET_SVE2\"\n+  \"<sve_int_op>\\t%0.<Ventype>, %1.<Vetype>, %2.<Vetype>\"\n+)\n+\n+;; These instructions do not take MOVPRFX.\n+(define_insn \"@aarch64_sve_<sve_int_op><mode>\"\n+  [(set (match_operand:<VNARROW> 0 \"register_operand\" \"=w\")\n+\t(unspec:<VNARROW>\n+\t  [(match_operand:<VNARROW> 1 \"register_operand\" \"0\")\n+\t   (match_operand:SVE_FULL_HSDI 2 \"register_operand\" \"w\")\n+\t   (match_operand:SVE_FULL_HSDI 3 \"register_operand\" \"w\")]\n+\t  SVE2_INT_BINARY_NARROWT))]\n+  \"TARGET_SVE2\"\n+  \"<sve_int_op>\\t%0.<Ventype>, %2.<Vetype>, %3.<Vetype>\"\n+)\n+\n ;; -------------------------------------------------------------------------\n ;; ---- [INT] Narrowing right shifts\n ;; -------------------------------------------------------------------------\n@@ -400,29 +1580,653 @@\n ;; - RSHRNT\n ;; - SHRNB\n ;; - SHRNT\n+;; - SQRSHRNB\n+;; - SQRSHRNT\n+;; - SQRSHRUNB\n+;; - SQRSHRUNT\n+;; - SQSHRNB\n+;; - SQSHRNT\n+;; - SQSHRUNB\n+;; - SQSHRUNT\n+;; - UQRSHRNB\n+;; - UQRSHRNT\n+;; - UQSHRNB\n+;; - UQSHRNT\n ;; -------------------------------------------------------------------------\n \n-;; (Rounding) Right shift narrow bottom.\n-(define_insn \"<r>shrnb<mode>\"\n-  [(set (match_operand:SVE_FULL_BHSI 0 \"register_operand\" \"=w\")\n-        (unspec:SVE_FULL_BHSI\n-\t  [(match_operand:<VWIDE> 1 \"register_operand\" \"w\")\n-\t   (match_operand 2 \"aarch64_simd_shift_imm_offset_<Vel>\" \"\")]\n-\t  SHRNB))]\n+;; The immediate range is enforced before generating the instruction.\n+(define_insn \"@aarch64_sve_<sve_int_op><mode>\"\n+  [(set (match_operand:<VNARROW> 0 \"register_operand\" \"=w\")\n+\t(unspec:<VNARROW>\n+\t  [(match_operand:SVE_FULL_HSDI 1 \"register_operand\" \"w\")\n+\t   (match_operand:DI 2 \"const_int_operand\")]\n+\t  SVE2_INT_SHIFT_IMM_NARROWB))]\n   \"TARGET_SVE2\"\n-  \"<r>shrnb\\t%0.<Vetype>, %1.<Vewtype>, #%2\"\n+  \"<sve_int_op>\\t%0.<Ventype>, %1.<Vetype>, #%2\"\n )\n \n-;; (Rounding) Right shift narrow top.\n-(define_insn \"<r>shrnt<mode>\"\n-  [(set (match_operand:SVE_FULL_BHSI 0 \"register_operand\" \"=w\")\n-\t(unspec:SVE_FULL_BHSI\n-\t  [(match_operand:SVE_FULL_BHSI 1 \"register_operand\" \"0\")\n-\t   (match_operand:<VWIDE> 2 \"register_operand\" \"w\")\n-\t   (match_operand 3 \"aarch64_simd_shift_imm_offset_<Vel>\" \"i\")]\n-\t  SHRNT))]\n+;; The immediate range is enforced before generating the instruction.\n+;; These instructions do not take MOVPRFX.\n+(define_insn \"@aarch64_sve_<sve_int_op><mode>\"\n+  [(set (match_operand:<VNARROW> 0 \"register_operand\" \"=w\")\n+\t(unspec:<VNARROW>\n+\t  [(match_operand:<VNARROW> 1 \"register_operand\" \"0\")\n+\t   (match_operand:SVE_FULL_HSDI 2 \"register_operand\" \"w\")\n+\t   (match_operand:DI 3 \"const_int_operand\")]\n+\t  SVE2_INT_SHIFT_IMM_NARROWT))]\n+  \"TARGET_SVE2\"\n+  \"<sve_int_op>\\t%0.<Ventype>, %2.<Vetype>, #%3\"\n+)\n+\n+;; =========================================================================\n+;; == Pairwise arithmetic\n+;; =========================================================================\n+\n+;; -------------------------------------------------------------------------\n+;; ---- [INT] Pairwise arithmetic\n+;; -------------------------------------------------------------------------\n+;; Includes:\n+;; - ADDP\n+;; - SMAXP\n+;; - SMINP\n+;; - UMAXP\n+;; - UMINP\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"@aarch64_pred_<sve_int_op><mode>\"\n+  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_FULL_I\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n+\t   (match_operand:SVE_FULL_I 2 \"register_operand\" \"0, w\")\n+\t   (match_operand:SVE_FULL_I 3 \"register_operand\" \"w, w\")]\n+\t  SVE2_INT_BINARY_PAIR))]\n+  \"TARGET_SVE2\"\n+  \"@\n+   <sve_int_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n+   movprfx\\t%0, %2\\;<sve_int_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\"\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+;; -------------------------------------------------------------------------\n+;; ---- [FP] Pairwise arithmetic\n+;; -------------------------------------------------------------------------\n+;; Includes:\n+;; - FADDP\n+;; - FMAXP\n+;; - FMAXNMP\n+;; - FMINP\n+;; - FMINNMP\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"@aarch64_pred_<sve_fp_op><mode>\"\n+  [(set (match_operand:SVE_FULL_F 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_FULL_F\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n+\t   (match_operand:SVE_FULL_F 2 \"register_operand\" \"0, w\")\n+\t   (match_operand:SVE_FULL_F 3 \"register_operand\" \"w, w\")]\n+\t  SVE2_FP_BINARY_PAIR))]\n+  \"TARGET_SVE2\"\n+  \"@\n+   <sve_fp_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n+   movprfx\\t%0, %2\\;<sve_fp_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\"\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+;; -------------------------------------------------------------------------\n+;; ---- [INT] Pairwise arithmetic with accumulation\n+;; -------------------------------------------------------------------------\n+;; Includes:\n+;; - SADALP\n+;; - UADALP\n+;; -------------------------------------------------------------------------\n+\n+;; Predicated pairwise absolute difference and accumulate with merging.\n+(define_expand \"@cond_<sve_int_op><mode>\"\n+  [(set (match_operand:SVE_FULL_HSDI 0 \"register_operand\")\n+\t(unspec:SVE_FULL_HSDI\n+\t  [(match_operand:<VPRED> 1 \"register_operand\")\n+\t   (unspec:SVE_FULL_HSDI\n+\t     [(match_dup 1)\n+\t      (match_operand:SVE_FULL_HSDI 2 \"register_operand\")\n+\t      (match_operand:<VNARROW> 3 \"register_operand\")]\n+\t     SVE2_INT_BINARY_PAIR_LONG)\n+\t   (match_operand:SVE_FULL_HSDI 4 \"aarch64_simd_reg_or_zero\")]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE2\"\n+{\n+  /* Only target code is aware of these operations, so we don't need\n+     to handle the fully-general case.  */\n+  gcc_assert (rtx_equal_p (operands[2], operands[4])\n+\t      || CONSTANT_P (operands[4]));\n+})\n+\n+;; Predicated pairwise absolute difference and accumulate, merging with\n+;; the first input.\n+(define_insn_and_rewrite \"*cond_<sve_int_op><mode>_2\"\n+  [(set (match_operand:SVE_FULL_HSDI 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_FULL_HSDI\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n+\t   (unspec:SVE_FULL_HSDI\n+\t     [(match_operand 4)\n+\t      (match_operand:SVE_FULL_HSDI 2 \"register_operand\" \"0, w\")\n+\t      (match_operand:<VNARROW> 3 \"register_operand\" \"w, w\")]\n+\t     SVE2_INT_BINARY_PAIR_LONG)\n+\t   (match_dup 2)]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE2\"\n+  \"@\n+   <sve_int_op>\\t%0.<Vetype>, %1/m, %3.<Ventype>\n+   movprfx\\t%0, %2\\;<sve_int_op>\\t%0.<Vetype>, %1/m, %3.<Ventype>\"\n+  \"&& !CONSTANT_P (operands[4])\"\n+  {\n+    operands[4] = CONSTM1_RTX (<VPRED>mode);\n+  }\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+;; Predicated pairwise absolute difference and accumulate, merging with zero.\n+(define_insn_and_rewrite \"*cond_<sve_int_op><mode>_z\"\n+  [(set (match_operand:SVE_FULL_HSDI 0 \"register_operand\" \"=&w, &w\")\n+\t(unspec:SVE_FULL_HSDI\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n+\t   (unspec:SVE_FULL_HSDI\n+\t     [(match_operand 5)\n+\t      (match_operand:SVE_FULL_HSDI 2 \"register_operand\" \"0, w\")\n+\t      (match_operand:<VNARROW> 3 \"register_operand\" \"w, w\")]\n+\t     SVE2_INT_BINARY_PAIR_LONG)\n+\t   (match_operand:SVE_FULL_HSDI 4 \"aarch64_simd_imm_zero\")]\n+\t  UNSPEC_SEL))]\n   \"TARGET_SVE2\"\n-  \"<r>shrnt\\t%0.<Vetype>, %2.<Vewtype>, #%3\"\n+  \"@\n+   movprfx\\t%0.<Vetype>, %1/z, %0.<Vetype>\\;<sve_int_op>\\t%0.<Vetype>, %1/m, %3.<Ventype>\n+   movprfx\\t%0.<Vetype>, %1/z, %2.<Vetype>\\;<sve_int_op>\\t%0.<Vetype>, %1/m, %3.<Ventype>\"\n+  \"&& !CONSTANT_P (operands[5])\"\n+  {\n+    operands[5] = CONSTM1_RTX (<VPRED>mode);\n+  }\n+  [(set_attr \"movprfx\" \"yes\")]\n+)\n+\n+;; =========================================================================\n+;; == Complex arithmetic\n+;; =========================================================================\n+\n+;; -------------------------------------------------------------------------\n+;; ---- [INT] Complex binary operations\n+;; -------------------------------------------------------------------------\n+;; Includes:\n+;; - CADD\n+;; - SQCADD\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"@aarch64_sve_<optab><mode>\"\n+  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_FULL_I\n+\t  [(match_operand:SVE_FULL_I 1 \"register_operand\" \"0, w\")\n+\t   (match_operand:SVE_FULL_I 2 \"register_operand\" \"w, w\")]\n+\t  SVE2_INT_CADD))]\n+  \"TARGET_SVE2\"\n+  \"@\n+   <sve_int_op>\\t%0.<Vetype>, %0.<Vetype>, %2.<Vetype>, #<rot>\n+   movprfx\\t%0, %1\\;<sve_int_op>\\t%0.<Vetype>, %0.<Vetype>, %2.<Vetype>, #<rot>\"\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+;; -------------------------------------------------------------------------\n+;; ---- [INT] Complex ternary operations\n+;; -------------------------------------------------------------------------\n+;; Includes:\n+;; - CMLA\n+;; - SQRDCMLA\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"@aarch64_sve_<optab><mode>\"\n+  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_FULL_I\n+\t  [(match_operand:SVE_FULL_I 1 \"register_operand\" \"0, w\")\n+\t   (match_operand:SVE_FULL_I 2 \"register_operand\" \"w, w\")\n+\t   (match_operand:SVE_FULL_I 3 \"register_operand\" \"w, w\")]\n+\t  SVE2_INT_CMLA))]\n+  \"TARGET_SVE2\"\n+  \"@\n+   <sve_int_op>\\t%0.<Vetype>, %2.<Vetype>, %3.<Vetype>, #<rot>\n+   movprfx\\t%0, %1\\;<sve_int_op>\\t%0.<Vetype>, %2.<Vetype>, %3.<Vetype>, #<rot>\"\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+(define_insn \"@aarch64_<optab>_lane_<mode>\"\n+  [(set (match_operand:SVE_FULL_HSI 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_FULL_HSI\n+\t  [(match_operand:SVE_FULL_HSI 1 \"register_operand\" \"0, w\")\n+\t   (match_operand:SVE_FULL_HSI 2 \"register_operand\" \"w, w\")\n+\t   (unspec:SVE_FULL_HSI\n+\t     [(match_operand:SVE_FULL_HSI 3 \"register_operand\" \"<sve_lane_con>, <sve_lane_con>\")\n+\t      (match_operand:SI 4 \"const_int_operand\")]\n+\t     UNSPEC_SVE_LANE_SELECT)]\n+\t  SVE2_INT_CMLA))]\n+  \"TARGET_SVE2\"\n+  \"@\n+   <sve_int_op>\\t%0.<Vetype>, %2.<Vetype>, %3.<Vetype>[%4], #<rot>\n+   movprfx\\t%0, %1\\;<sve_int_op>\\t%0.<Vetype>, %2.<Vetype>, %3.<Vetype>[%4], #<rot>\"\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+;; -------------------------------------------------------------------------\n+;; ---- [INT] Complex dot product\n+;; -------------------------------------------------------------------------\n+;; Includes:\n+;; - CDOT\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"@aarch64_sve_<optab><mode>\"\n+  [(set (match_operand:SVE_FULL_SDI 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_FULL_SDI\n+\t  [(match_operand:SVE_FULL_SDI 1 \"register_operand\" \"0, w\")\n+\t   (match_operand:<VSI2QI> 2 \"register_operand\" \"w, w\")\n+\t   (match_operand:<VSI2QI> 3 \"register_operand\" \"w, w\")]\n+\t  SVE2_INT_CDOT))]\n+  \"TARGET_SVE2\"\n+  \"@\n+   <sve_int_op>\\t%0.<Vetype>, %2.<Vetype_fourth>, %3.<Vetype_fourth>, #<rot>\n+   movprfx\\t%0, %1\\;<sve_int_op>\\t%0.<Vetype>, %2.<Vetype_fourth>, %3.<Vetype_fourth>, #<rot>\"\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+(define_insn \"@aarch64_<optab>_lane_<mode>\"\n+  [(set (match_operand:SVE_FULL_SDI 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_FULL_SDI\n+\t  [(match_operand:SVE_FULL_SDI 1 \"register_operand\" \"0, w\")\n+\t   (match_operand:<VSI2QI> 2 \"register_operand\" \"w, w\")\n+\t   (unspec:<VSI2QI>\n+\t     [(match_operand:<VSI2QI> 3 \"register_operand\" \"<sve_lane_con>, <sve_lane_con>\")\n+\t      (match_operand:SI 4 \"const_int_operand\")]\n+\t     UNSPEC_SVE_LANE_SELECT)]\n+\t  SVE2_INT_CDOT))]\n+  \"TARGET_SVE2\"\n+  \"@\n+   <sve_int_op>\\t%0.<Vetype>, %2.<Vetype_fourth>, %3.<Vetype_fourth>[%4], #<rot>\n+   movprfx\\t%0, %1\\;<sve_int_op>\\t%0.<Vetype>, %2.<Vetype_fourth>, %3.<Vetype_fourth>[%4], #<rot>\"\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+;; =========================================================================\n+;; == Conversions\n+;; =========================================================================\n+\n+;; -------------------------------------------------------------------------\n+;; ---- [FP<-FP] Widening conversions\n+;; -------------------------------------------------------------------------\n+;; Includes:\n+;; - FCVTLT\n+;; -------------------------------------------------------------------------\n+\n+;; Predicated convert long top.\n+(define_insn \"@aarch64_pred_<sve_fp_op><mode>\"\n+  [(set (match_operand:SVE_FULL_SDF 0 \"register_operand\" \"=w\")\n+\t(unspec:SVE_FULL_SDF\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl\")\n+\t   (match_operand:SI 3 \"aarch64_sve_gp_strictness\")\n+\t   (match_operand:<VNARROW> 2 \"register_operand\" \"w\")]\n+\t  SVE2_COND_FP_UNARY_LONG))]\n+  \"TARGET_SVE2\"\n+  \"<sve_fp_op>\\t%0.<Vetype>, %1/m, %2.<Ventype>\"\n+)\n+\n+;; Predicated convert long top with merging.\n+(define_expand \"@cond_<sve_fp_op><mode>\"\n+  [(set (match_operand:SVE_FULL_SDF 0 \"register_operand\")\n+\t(unspec:SVE_FULL_SDF\n+\t  [(match_operand:<VPRED> 1 \"register_operand\")\n+\t   (unspec:SVE_FULL_SDF\n+\t     [(match_dup 1)\n+\t      (const_int SVE_STRICT_GP)\n+\t      (match_operand:<VNARROW> 2 \"register_operand\")]\n+\t     SVE2_COND_FP_UNARY_LONG)\n+\t   (match_operand:SVE_FULL_SDF 3 \"register_operand\")]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE2\"\n+)\n+\n+;; These instructions do not take MOVPRFX.\n+(define_insn_and_rewrite \"*cond_<sve_fp_op><mode>\"\n+  [(set (match_operand:SVE_FULL_SDF 0 \"register_operand\" \"=w\")\n+\t(unspec:SVE_FULL_SDF\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl\")\n+\t   (unspec:SVE_FULL_SDF\n+\t     [(match_operand 4)\n+\t      (match_operand:SI 5 \"aarch64_sve_gp_strictness\")\n+\t      (match_operand:<VNARROW> 2 \"register_operand\" \"w\")]\n+\t     SVE2_COND_FP_UNARY_LONG)\n+\t   (match_operand:SVE_FULL_SDF 3 \"register_operand\" \"0\")]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE2 && aarch64_sve_pred_dominates_p (&operands[4], operands[1])\"\n+  \"<sve_fp_op>\\t%0.<Vetype>, %1/m, %2.<Ventype>\"\n+  \"&& !rtx_equal_p (operands[1], operands[4])\"\n+  {\n+    operands[4] = copy_rtx (operands[1]);\n+  }\n+)\n+\n+;; -------------------------------------------------------------------------\n+;; ---- [FP<-FP] Narrowing conversions\n+;; -------------------------------------------------------------------------\n+;; Includes:\n+;; - FCVTNT\n+;; - FCVTX\n+;; - FCVTXNT\n+;; -------------------------------------------------------------------------\n+\n+;; Predicated FCVTNT.  This doesn't give a natural aarch64_pred_*/cond_*\n+;; pair because the even elements always have to be supplied for active\n+;; elements, even if the inactive elements don't matter.\n+;;\n+;; These instructions do not take MOVPRFX.\n+(define_insn \"@aarch64_sve2_cvtnt<mode>\"\n+  [(set (match_operand:<VNARROW> 0 \"register_operand\" \"=w\")\n+\t(unspec:<VNARROW>\n+\t  [(match_operand:<VPRED> 2 \"register_operand\" \"Upl\")\n+\t   (const_int SVE_STRICT_GP)\n+\t   (match_operand:<VNARROW> 1 \"register_operand\" \"0\")\n+\t   (match_operand:SVE_FULL_SDF 3 \"register_operand\" \"w\")]\n+\t  UNSPEC_COND_FCVTNT))]\n+  \"TARGET_SVE2\"\n+  \"fcvtnt\\t%0.<Ventype>, %2/m, %3.<Vetype>\"\n+)\n+\n+;; Predicated FCVTX (equivalent to what would be FCVTXNB, except that\n+;; it supports MOVPRFX).\n+(define_insn \"@aarch64_pred_<sve_fp_op><mode>\"\n+  [(set (match_operand:VNx4SF_ONLY 0 \"register_operand\" \"=w\")\n+\t(unspec:VNx4SF_ONLY\n+\t  [(match_operand:<VWIDE_PRED> 1 \"register_operand\" \"Upl\")\n+\t   (match_operand:SI 3 \"aarch64_sve_gp_strictness\")\n+\t   (match_operand:<VWIDE> 2 \"register_operand\" \"w\")]\n+\t  SVE2_COND_FP_UNARY_NARROWB))]\n+  \"TARGET_SVE2\"\n+  \"<sve_fp_op>\\t%0.<Vetype>, %1/m, %2.<Vewtype>\"\n+)\n+\n+;; Predicated FCVTX with merging.\n+(define_expand \"@cond_<sve_fp_op><mode>\"\n+  [(set (match_operand:VNx4SF_ONLY 0 \"register_operand\")\n+\t(unspec:VNx4SF_ONLY\n+\t  [(match_operand:<VWIDE_PRED> 1 \"register_operand\")\n+\t   (unspec:VNx4SF_ONLY\n+\t     [(match_dup 1)\n+\t      (const_int SVE_STRICT_GP)\n+\t      (match_operand:<VWIDE> 2 \"register_operand\")]\n+\t     SVE2_COND_FP_UNARY_NARROWB)\n+\t   (match_operand:VNx4SF_ONLY 3 \"aarch64_simd_reg_or_zero\")]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE2\"\n+)\n+\n+(define_insn_and_rewrite \"*cond_<sve_fp_op><mode>_any\"\n+  [(set (match_operand:VNx4SF_ONLY 0 \"register_operand\" \"=&w, &w, &w\")\n+\t(unspec:VNx4SF_ONLY\n+\t  [(match_operand:<VWIDE_PRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n+\t   (unspec:VNx4SF_ONLY\n+\t     [(match_operand 4)\n+\t      (match_operand:SI 5 \"aarch64_sve_gp_strictness\")\n+\t      (match_operand:<VWIDE> 2 \"register_operand\" \"w, w, w\")]\n+\t     SVE2_COND_FP_UNARY_NARROWB)\n+\t   (match_operand:VNx4SF_ONLY 3 \"aarch64_simd_reg_or_zero\" \"0, Dz, w\")]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE2\n+   && !rtx_equal_p (operands[2], operands[3])\n+   && aarch64_sve_pred_dominates_p (&operands[4], operands[1])\"\n+  \"@\n+   <sve_fp_op>\\t%0.<Vetype>, %1/m, %2.<Vewtype>\n+   movprfx\\t%0.<Vewtype>, %1/z, %2.<Vewtype>\\;<sve_fp_op>\\t%0.<Vetype>, %1/m, %2.<Vewtype>\n+   movprfx\\t%0, %3\\;<sve_fp_op>\\t%0.<Vetype>, %1/m, %2.<Vewtype>\"\n+  \"&& !rtx_equal_p (operands[1], operands[4])\"\n+  {\n+    operands[4] = copy_rtx (operands[1]);\n+  }\n+  [(set_attr \"movprfx\" \"*,yes,yes\")]\n+)\n+\n+;; Predicated FCVTXNT.  This doesn't give a natural aarch64_pred_*/cond_*\n+;; pair because the even elements always have to be supplied for active\n+;; elements, even if the inactive elements don't matter.\n+;;\n+;; These instructions do not take MOVPRFX.\n+(define_insn \"@aarch64_sve2_cvtxnt<mode>\"\n+  [(set (match_operand:<VNARROW> 0 \"register_operand\" \"=w\")\n+\t(unspec:<VNARROW>\n+\t  [(match_operand:<VPRED> 2 \"register_operand\" \"Upl\")\n+\t   (const_int SVE_STRICT_GP)\n+\t   (match_operand:<VNARROW> 1 \"register_operand\" \"0\")\n+\t   (match_operand:VNx2DF_ONLY 3 \"register_operand\" \"w\")]\n+\t  UNSPEC_COND_FCVTXNT))]\n+  \"TARGET_SVE2\"\n+  \"fcvtxnt\\t%0.<Ventype>, %2/m, %3.<Vetype>\"\n+)\n+\n+;; =========================================================================\n+;; == Other arithmetic\n+;; =========================================================================\n+\n+;; -------------------------------------------------------------------------\n+;; ---- [INT] Reciprocal approximation\n+;; -------------------------------------------------------------------------\n+;; Includes:\n+;; - URECPE\n+;; - URSQRTE\n+;; -------------------------------------------------------------------------\n+\n+;; Predicated integer unary operations.\n+(define_insn \"@aarch64_pred_<sve_int_op><mode>\"\n+  [(set (match_operand:VNx4SI_ONLY 0 \"register_operand\" \"=w\")\n+\t(unspec:VNx4SI_ONLY\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl\")\n+\t   (unspec:VNx4SI_ONLY\n+\t     [(match_operand:VNx4SI_ONLY 2 \"register_operand\" \"w\")]\n+\t     SVE2_U32_UNARY)]\n+\t  UNSPEC_PRED_X))]\n+  \"TARGET_SVE2\"\n+  \"<sve_int_op>\\t%0.<Vetype>, %1/m, %2.<Vetype>\"\n+)\n+\n+;; Predicated integer unary operations with merging.\n+(define_expand \"@cond_<sve_int_op><mode>\"\n+  [(set (match_operand:VNx4SI_ONLY 0 \"register_operand\")\n+\t(unspec:VNx4SI_ONLY\n+\t  [(match_operand:<VPRED> 1 \"register_operand\")\n+\t   (unspec:VNx4SI_ONLY\n+\t     [(match_dup 4)\n+\t      (unspec:VNx4SI_ONLY\n+\t\t[(match_operand:VNx4SI_ONLY 2 \"register_operand\")]\n+\t\tSVE2_U32_UNARY)]\n+\t     UNSPEC_PRED_X)\n+\t   (match_operand:VNx4SI_ONLY 3 \"aarch64_simd_reg_or_zero\")]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE2\"\n+  {\n+    operands[4] = CONSTM1_RTX (<MODE>mode);\n+  }\n+)\n+\n+(define_insn_and_rewrite \"*cond_<sve_int_op><mode>\"\n+  [(set (match_operand:VNx4SI_ONLY 0 \"register_operand\" \"=w, ?&w, ?&w\")\n+\t(unspec:VNx4SI_ONLY\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n+\t   (unspec:VNx4SI_ONLY\n+\t     [(match_operand 4)\n+\t      (unspec:VNx4SI_ONLY\n+\t\t[(match_operand:VNx4SI_ONLY 2 \"register_operand\" \"w, w, w\")]\n+\t\tSVE2_U32_UNARY)]\n+\t     UNSPEC_PRED_X)\n+\t   (match_operand:VNx4SI_ONLY 3 \"aarch64_simd_reg_or_zero\" \"0, Dz, w\")]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE2\"\n+  \"@\n+   <sve_int_op>\\t%0.<Vetype>, %1/m, %2.<Vetype>\n+   movprfx\\t%0.<Vetype>, %1/z, %2.<Vetype>\\;<sve_int_op>\\t%0.<Vetype>, %1/m, %2.<Vetype>\n+   movprfx\\t%0, %3\\;<sve_int_op>\\t%0.<Vetype>, %1/m, %2.<Vetype>\"\n+  \"&& !CONSTANT_P (operands[4])\"\n+  {\n+    operands[4] = CONSTM1_RTX (<VPRED>mode);\n+  }\n+  [(set_attr \"movprfx\" \"*,yes,yes\")]\n+)\n+\n+;; -------------------------------------------------------------------------\n+;; ---- [INT<-FP] Base-2 logarithm\n+;; -------------------------------------------------------------------------\n+;; Includes:\n+;; - FLOGB\n+;; -------------------------------------------------------------------------\n+\n+;; Predicated FLOGB.\n+(define_insn \"@aarch64_pred_<sve_fp_op><mode>\"\n+  [(set (match_operand:<V_INT_EQUIV> 0 \"register_operand\" \"=w\")\n+\t(unspec:<V_INT_EQUIV>\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl\")\n+\t   (match_operand:SI 3 \"aarch64_sve_gp_strictness\")\n+\t   (match_operand:SVE_FULL_F 2 \"register_operand\" \"w\")]\n+\t  SVE2_COND_INT_UNARY_FP))]\n+  \"TARGET_SVE2\"\n+  \"<sve_fp_op>\\t%0.<Vetype>, %1/m, %2.<Vetype>\"\n+)\n+\n+;; Predicated FLOGB with merging.\n+(define_expand \"@cond_<sve_fp_op><mode>\"\n+  [(set (match_operand:<V_INT_EQUIV> 0 \"register_operand\")\n+\t(unspec:<V_INT_EQUIV>\n+\t  [(match_operand:<VPRED> 1 \"register_operand\")\n+\t   (unspec:<V_INT_EQUIV>\n+\t     [(match_dup 1)\n+\t      (const_int SVE_STRICT_GP)\n+\t      (match_operand:SVE_FULL_F 2 \"register_operand\")]\n+\t     SVE2_COND_INT_UNARY_FP)\n+\t   (match_operand:<V_INT_EQUIV> 3 \"aarch64_simd_reg_or_zero\")]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE2\"\n+)\n+\n+(define_insn_and_rewrite \"*cond_<sve_fp_op><mode>\"\n+  [(set (match_operand:<V_INT_EQUIV> 0 \"register_operand\" \"=&w, ?&w, ?&w\")\n+\t(unspec:<V_INT_EQUIV>\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n+\t   (unspec:<V_INT_EQUIV>\n+\t     [(match_operand 4)\n+\t      (match_operand:SI 5 \"aarch64_sve_gp_strictness\")\n+\t      (match_operand:SVE_FULL_F 2 \"register_operand\" \"w, w, w\")]\n+\t     SVE2_COND_INT_UNARY_FP)\n+\t   (match_operand:<V_INT_EQUIV> 3 \"aarch64_simd_reg_or_zero\" \"0, Dz, w\")]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE2\n+   && !rtx_equal_p (operands[2], operands[3])\n+   && aarch64_sve_pred_dominates_p (&operands[4], operands[1])\"\n+  \"@\n+   <sve_fp_op>\\t%0.<Vetype>, %1/m, %2.<Vetype>\n+   movprfx\\t%0.<Vetype>, %1/z, %2.<Vetype>\\;<sve_fp_op>\\t%0.<Vetype>, %1/m, %2.<Vetype>\n+   movprfx\\t%0, %3\\;<sve_fp_op>\\t%0.<Vetype>, %1/m, %2.<Vetype>\"\n+  \"&& !rtx_equal_p (operands[1], operands[4])\"\n+  {\n+    operands[4] = copy_rtx (operands[1]);\n+  }\n+  [(set_attr \"movprfx\" \"*,yes,yes\")]\n+)\n+\n+;; -------------------------------------------------------------------------\n+;; ---- [INT] Polynomial multiplication\n+;; -------------------------------------------------------------------------\n+;; Includes:\n+;; - PMUL\n+;; - PMULLB\n+;; - PMULLT\n+;; -------------------------------------------------------------------------\n+\n+;; Uniform PMUL.\n+(define_insn \"@aarch64_sve2_pmul<mode>\"\n+  [(set (match_operand:VNx16QI_ONLY 0 \"register_operand\" \"=w\")\n+\t(unspec:VNx16QI_ONLY\n+\t  [(match_operand:VNx16QI_ONLY 1 \"register_operand\" \"w\")\n+\t   (match_operand:VNx16QI_ONLY 2 \"register_operand\" \"w\")]\n+\t  UNSPEC_PMUL))]\n+  \"TARGET_SVE2\"\n+  \"pmul\\t%0.<Vetype>, %1.<Vetype>, %2.<Vetype>\"\n+)\n+\n+;; Extending PMUL, with the results modeled as wider vectors.\n+;; This representation is only possible for .H and .D, not .Q.\n+(define_insn \"@aarch64_sve_<optab><mode>\"\n+  [(set (match_operand:SVE_FULL_HDI 0 \"register_operand\" \"=w\")\n+\t(unspec:SVE_FULL_HDI\n+\t  [(match_operand:<VNARROW> 1 \"register_operand\" \"w\")\n+\t   (match_operand:<VNARROW> 2 \"register_operand\" \"w\")]\n+\t  SVE2_PMULL))]\n+  \"TARGET_SVE2\"\n+  \"<sve_int_op>\\t%0.<Vetype>, %1.<Ventype>, %2.<Ventype>\"\n+)\n+\n+;; Extending PMUL, with the results modeled as pairs of values.\n+;; This representation works for .H, .D and .Q, with .Q requiring\n+;; the AES extension.  (This is enforced by the mode iterator.)\n+(define_insn \"@aarch64_sve_<optab><mode>\"\n+  [(set (match_operand:SVE2_PMULL_PAIR_I 0 \"register_operand\" \"=w\")\n+\t(unspec:SVE2_PMULL_PAIR_I\n+\t  [(match_operand:SVE2_PMULL_PAIR_I 1 \"register_operand\" \"w\")\n+\t   (match_operand:SVE2_PMULL_PAIR_I 2 \"register_operand\" \"w\")]\n+\t  SVE2_PMULL_PAIR))]\n+  \"TARGET_SVE2\"\n+  \"<sve_int_op>\\t%0.<Vewtype>, %1.<Vetype>, %2.<Vetype>\"\n+)\n+\n+;; =========================================================================\n+;; == Permutation\n+;; =========================================================================\n+\n+;; -------------------------------------------------------------------------\n+;; ---- [INT,FP] General permutes\n+;; -------------------------------------------------------------------------\n+;; Includes:\n+;; - TBL (vector pair form)\n+;; - TBX\n+;; -------------------------------------------------------------------------\n+\n+;; TBL on a pair of data vectors.\n+(define_insn \"@aarch64_sve2_tbl2<mode>\"\n+  [(set (match_operand:SVE_FULL 0 \"register_operand\" \"=w\")\n+\t(unspec:SVE_FULL\n+\t  [(match_operand:<VDOUBLE> 1 \"register_operand\" \"w\")\n+\t   (match_operand:<V_INT_EQUIV> 2 \"register_operand\" \"w\")]\n+\t  UNSPEC_TBL2))]\n+  \"TARGET_SVE2\"\n+  \"tbl\\t%0.<Vetype>, %1, %2.<Vetype>\"\n+)\n+\n+;; TBX.  These instructions do not take MOVPRFX.\n+(define_insn \"@aarch64_sve2_tbx<mode>\"\n+  [(set (match_operand:SVE_FULL 0 \"register_operand\" \"=w\")\n+\t(unspec:SVE_FULL\n+\t  [(match_operand:SVE_FULL 1 \"register_operand\" \"0\")\n+\t   (match_operand:SVE_FULL 2 \"register_operand\" \"w\")\n+\t   (match_operand:<V_INT_EQUIV> 3 \"register_operand\" \"w\")]\n+\t  UNSPEC_TBX))]\n+  \"TARGET_SVE2\"\n+  \"tbx\\t%0.<Vetype>, %2.<Vetype>, %3.<Vetype>\"\n+)\n+\n+;; -------------------------------------------------------------------------\n+;; ---- [INT] Optional bit-permute extensions\n+;; -------------------------------------------------------------------------\n+;; Includes:\n+;; - BDEP\n+;; - BEXT\n+;; - BGRP\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"@aarch64_sve_<sve_int_op><mode>\"\n+  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w\")\n+\t(unspec:SVE_FULL_I\n+\t  [(match_operand:SVE_FULL_I 1 \"register_operand\" \"w\")\n+\t   (match_operand:SVE_FULL_I 2 \"register_operand\" \"w\")]\n+\t  SVE2_INT_BITPERM))]\n+  \"TARGET_SVE2_BITPERM\"\n+  \"<sve_int_op>\\t%0.<Vetype>, %1.<Vetype>, %2.<Vetype>\"\n )\n \n ;; =========================================================================\n@@ -469,3 +2273,242 @@\n   emit_insn (gen_aarch64_cstore<mode> (operands[0], cmp, cc_reg));\n   DONE;\n })\n+\n+;; -------------------------------------------------------------------------\n+;; ---- Histogram processing\n+;; -------------------------------------------------------------------------\n+;; Includes:\n+;; - HISTCNT\n+;; - HISTSEG\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"@aarch64_sve2_histcnt<mode>\"\n+  [(set (match_operand:SVE_FULL_SDI 0 \"register_operand\" \"=w\")\n+\t(unspec:SVE_FULL_SDI\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl\")\n+\t   (match_operand:SVE_FULL_SDI 2 \"register_operand\" \"w\")\n+\t   (match_operand:SVE_FULL_SDI 3 \"register_operand\" \"w\")]\n+\t  UNSPEC_HISTCNT))]\n+  \"TARGET_SVE2\"\n+  \"histcnt\\t%0.<Vetype>, %1/z, %2.<Vetype>, %3.<Vetype>\"\n+)\n+\n+(define_insn \"@aarch64_sve2_histseg<mode>\"\n+  [(set (match_operand:VNx16QI_ONLY 0 \"register_operand\" \"=w\")\n+\t(unspec:VNx16QI_ONLY\n+\t  [(match_operand:VNx16QI_ONLY 1 \"register_operand\" \"w\")\n+\t   (match_operand:VNx16QI_ONLY 2 \"register_operand\" \"w\")]\n+\t  UNSPEC_HISTSEG))]\n+  \"TARGET_SVE2\"\n+  \"histseg\\t%0.<Vetype>, %1.<Vetype>, %2.<Vetype>\"\n+)\n+\n+;; -------------------------------------------------------------------------\n+;; ---- String matching\n+;; -------------------------------------------------------------------------\n+;; Includes:\n+;; - MATCH\n+;; - NMATCH\n+;; -------------------------------------------------------------------------\n+\n+;; Predicated string matching.\n+(define_insn \"@aarch64_pred_<sve_int_op><mode>\"\n+  [(set (match_operand:<VPRED> 0 \"register_operand\" \"=Upa\")\n+\t(unspec:<VPRED>\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl\")\n+\t   (match_operand:SI 2 \"aarch64_sve_ptrue_flag\")\n+\t   (unspec:<VPRED>\n+\t     [(match_operand:SVE_FULL_BHI 3 \"register_operand\" \"w\")\n+\t      (match_operand:SVE_FULL_BHI 4 \"register_operand\" \"w\")]\n+\t     SVE2_MATCH)]\n+\t  UNSPEC_PRED_Z))\n+   (clobber (reg:CC_NZC CC_REGNUM))]\n+  \"TARGET_SVE2\"\n+  \"<sve_int_op>\\t%0.<Vetype>, %1/z, %3.<Vetype>, %4.<Vetype>\"\n+)\n+\n+;; Predicated string matching in which both the flag and predicate results\n+;; are interesting.\n+(define_insn_and_rewrite \"*aarch64_pred_<sve_int_op><mode>_cc\"\n+  [(set (reg:CC_NZC CC_REGNUM)\n+\t(unspec:CC_NZC\n+\t  [(match_operand:VNx16BI 1 \"register_operand\" \"Upl\")\n+\t   (match_operand 4)\n+\t   (match_operand:SI 5 \"aarch64_sve_ptrue_flag\")\n+\t   (unspec:<VPRED>\n+\t     [(match_operand 6)\n+\t      (match_operand:SI 7 \"aarch64_sve_ptrue_flag\")\n+\t      (unspec:<VPRED>\n+\t\t[(match_operand:SVE_FULL_BHI 2 \"register_operand\" \"w\")\n+\t\t (match_operand:SVE_FULL_BHI 3 \"register_operand\" \"w\")]\n+\t\tSVE2_MATCH)]\n+\t     UNSPEC_PRED_Z)]\n+\t  UNSPEC_PTEST))\n+   (set (match_operand:<VPRED> 0 \"register_operand\" \"=Upa\")\n+\t(unspec:<VPRED>\n+\t  [(match_dup 6)\n+\t   (match_dup 7)\n+\t   (unspec:<VPRED>\n+\t     [(match_dup 2)\n+\t      (match_dup 3)]\n+\t     SVE2_MATCH)]\n+\t  UNSPEC_PRED_Z))]\n+  \"TARGET_SVE2\n+   && aarch64_sve_same_pred_for_ptest_p (&operands[4], &operands[6])\"\n+  \"<sve_int_op>\\t%0.<Vetype>, %1/z, %2.<Vetype>, %3.<Vetype>\"\n+  \"&& !rtx_equal_p (operands[4], operands[6])\"\n+  {\n+    operands[6] = copy_rtx (operands[4]);\n+    operands[7] = operands[5];\n+  }\n+)\n+\n+;; Predicated string matching in which only the flags result is interesting.\n+(define_insn_and_rewrite \"*aarch64_pred_<sve_int_op><mode>_ptest\"\n+  [(set (reg:CC_NZC CC_REGNUM)\n+\t(unspec:CC_NZC\n+\t  [(match_operand:VNx16BI 1 \"register_operand\" \"Upl\")\n+\t   (match_operand 4)\n+\t   (match_operand:SI 5 \"aarch64_sve_ptrue_flag\")\n+\t   (unspec:<VPRED>\n+\t     [(match_operand 6)\n+\t      (match_operand:SI 7 \"aarch64_sve_ptrue_flag\")\n+\t      (unspec:<VPRED>\n+\t\t[(match_operand:SVE_FULL_BHI 2 \"register_operand\" \"w\")\n+\t\t (match_operand:SVE_FULL_BHI 3 \"register_operand\" \"w\")]\n+\t\tSVE2_MATCH)]\n+\t     UNSPEC_PRED_Z)]\n+\t  UNSPEC_PTEST))\n+   (clobber (match_scratch:<VPRED> 0 \"=Upa\"))]\n+  \"TARGET_SVE2\n+   && aarch64_sve_same_pred_for_ptest_p (&operands[4], &operands[6])\"\n+  \"<sve_int_op>\\t%0.<Vetype>, %1/z, %2.<Vetype>, %3.<Vetype>\"\n+  \"&& !rtx_equal_p (operands[4], operands[6])\"\n+  {\n+    operands[6] = copy_rtx (operands[4]);\n+    operands[7] = operands[5];\n+  }\n+)\n+\n+;; =========================================================================\n+;; == Crypotographic extensions\n+;; =========================================================================\n+\n+;; -------------------------------------------------------------------------\n+;; ---- Optional AES extensions\n+;; -------------------------------------------------------------------------\n+;; Includes:\n+;; - AESD\n+;; - AESE\n+;; - AESIMC\n+;; - AESMC\n+;; -------------------------------------------------------------------------\n+\n+;; AESD and AESE.\n+(define_insn \"aarch64_sve2_aes<aes_op>\"\n+  [(set (match_operand:VNx16QI 0 \"register_operand\" \"=w\")\n+\t(unspec:VNx16QI\n+\t  [(xor:VNx16QI\n+\t     (match_operand:VNx16QI 1 \"register_operand\" \"%0\")\n+\t     (match_operand:VNx16QI 2 \"register_operand\" \"w\"))]\n+          CRYPTO_AES))]\n+  \"TARGET_SVE2_AES\"\n+  \"aes<aes_op>\\t%0.b, %0.b, %2.b\"\n+  [(set_attr \"type\" \"crypto_aese\")]\n+)\n+\n+;; AESMC and AESIMC.  These instructions do not take MOVPRFX.\n+(define_insn \"aarch64_sve2_aes<aesmc_op>\"\n+  [(set (match_operand:VNx16QI 0 \"register_operand\" \"=w\")\n+\t(unspec:VNx16QI\n+\t  [(match_operand:VNx16QI 1 \"register_operand\" \"0\")]\n+\t  CRYPTO_AESMC))]\n+  \"TARGET_SVE2_AES\"\n+  \"aes<aesmc_op>\\t%0.b, %0.b\"\n+  [(set_attr \"type\" \"crypto_aesmc\")]\n+)\n+\n+;; When AESE/AESMC and AESD/AESIMC fusion is enabled, we really want\n+;; to keep the two together and enforce the register dependency without\n+;; scheduling or register allocation messing up the order or introducing\n+;; moves inbetween.  Mash the two together during combine.\n+\n+(define_insn \"*aarch64_sve2_aese_fused\"\n+  [(set (match_operand:VNx16QI 0 \"register_operand\" \"=w\")\n+\t(unspec:VNx16QI\n+\t  [(unspec:VNx16QI\n+\t     [(xor:VNx16QI\n+\t\t(match_operand:VNx16QI 1 \"register_operand\" \"%0\")\n+\t\t(match_operand:VNx16QI 2 \"register_operand\" \"w\"))]\n+\t     UNSPEC_AESE)]\n+\t  UNSPEC_AESMC))]\n+  \"TARGET_SVE2_AES && aarch64_fusion_enabled_p (AARCH64_FUSE_AES_AESMC)\"\n+  \"aese\\t%0.b, %0.b, %2.b\\;aesmc\\t%0.b, %0.b\"\n+  [(set_attr \"type\" \"crypto_aese\")\n+   (set_attr \"length\" \"8\")]\n+)\n+\n+(define_insn \"*aarch64_sve2_aesd_fused\"\n+  [(set (match_operand:VNx16QI 0 \"register_operand\" \"=w\")\n+\t(unspec:VNx16QI\n+\t  [(unspec:VNx16QI\n+\t     [(xor:VNx16QI\n+\t\t(match_operand:VNx16QI 1 \"register_operand\" \"%0\")\n+\t\t(match_operand:VNx16QI 2 \"register_operand\" \"w\"))]\n+\t     UNSPEC_AESD)]\n+\t  UNSPEC_AESIMC))]\n+  \"TARGET_SVE2_AES && aarch64_fusion_enabled_p (AARCH64_FUSE_AES_AESMC)\"\n+  \"aesd\\t%0.b, %0.b, %2.b\\;aesimc\\t%0.b, %0.b\"\n+  [(set_attr \"type\" \"crypto_aese\")\n+   (set_attr \"length\" \"8\")]\n+)\n+\n+;; -------------------------------------------------------------------------\n+;; ---- Optional SHA-3 extensions\n+;; -------------------------------------------------------------------------\n+;; Includes:\n+;; - RAX1\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"aarch64_sve2_rax1\"\n+  [(set (match_operand:VNx2DI 0 \"register_operand\" \"=w\")\n+\t(xor:VNx2DI\n+\t  (rotate:VNx2DI\n+\t    (match_operand:VNx2DI 2 \"register_operand\" \"w\")\n+\t    (const_int 1))\n+\t  (match_operand:VNx2DI 1 \"register_operand\" \"w\")))]\n+  \"TARGET_SVE2_SHA3\"\n+  \"rax1\\t%0.d, %1.d, %2.d\"\n+  [(set_attr \"type\" \"crypto_sha3\")]\n+)\n+\n+;; -------------------------------------------------------------------------\n+;; ---- Optional SM4 extensions\n+;; -------------------------------------------------------------------------\n+;; Includes:\n+;; - SM4E\n+;; - SM4EKEY\n+;; -------------------------------------------------------------------------\n+\n+;; These instructions do not take MOVPRFX.\n+(define_insn \"aarch64_sve2_sm4e\"\n+  [(set (match_operand:VNx4SI 0 \"register_operand\" \"=w\")\n+\t(unspec:VNx4SI\n+\t  [(match_operand:VNx4SI 1 \"register_operand\" \"0\")\n+\t   (match_operand:VNx4SI 2 \"register_operand\" \"w\")]\n+\t  UNSPEC_SM4E))]\n+  \"TARGET_SVE2_SM4\"\n+  \"sm4e\\t%0.s, %0.s, %2.s\"\n+  [(set_attr \"type\" \"crypto_sm4\")]\n+)\n+\n+(define_insn \"aarch64_sve2_sm4ekey\"\n+  [(set (match_operand:VNx4SI 0 \"register_operand\" \"=w\")\n+\t(unspec:VNx4SI\n+\t  [(match_operand:VNx4SI 1 \"register_operand\" \"w\")\n+\t   (match_operand:VNx4SI 2 \"register_operand\" \"w\")]\n+\t  UNSPEC_SM4EKEY))]\n+  \"TARGET_SVE2_SM4\"\n+  \"sm4ekey\\t%0.s, %1.s, %2.s\"\n+  [(set_attr \"type\" \"crypto_sm4\")]\n+)"}, {"sha": "af5b00c01b90d33fc35ee72e948ca5587a1f3759", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -248,6 +248,10 @@ extern unsigned aarch64_architecture_version;\n #define AARCH64_ISA_F16\t\t   (aarch64_isa_flags & AARCH64_FL_F16)\n #define AARCH64_ISA_SVE            (aarch64_isa_flags & AARCH64_FL_SVE)\n #define AARCH64_ISA_SVE2\t   (aarch64_isa_flags & AARCH64_FL_SVE2)\n+#define AARCH64_ISA_SVE2_AES\t   (aarch64_isa_flags & AARCH64_FL_SVE2_AES)\n+#define AARCH64_ISA_SVE2_BITPERM  (aarch64_isa_flags & AARCH64_FL_SVE2_BITPERM)\n+#define AARCH64_ISA_SVE2_SHA3\t   (aarch64_isa_flags & AARCH64_FL_SVE2_SHA3)\n+#define AARCH64_ISA_SVE2_SM4\t   (aarch64_isa_flags & AARCH64_FL_SVE2_SM4)\n #define AARCH64_ISA_V8_3\t   (aarch64_isa_flags & AARCH64_FL_V8_3)\n #define AARCH64_ISA_DOTPROD\t   (aarch64_isa_flags & AARCH64_FL_DOTPROD)\n #define AARCH64_ISA_AES\t           (aarch64_isa_flags & AARCH64_FL_AES)\n@@ -302,6 +306,18 @@ extern unsigned aarch64_architecture_version;\n /* SVE2 instructions, enabled through +sve2.  */\n #define TARGET_SVE2 (AARCH64_ISA_SVE2)\n \n+/* SVE2 AES instructions, enabled through +sve2-aes.  */\n+#define TARGET_SVE2_AES (AARCH64_ISA_SVE2_AES)\n+\n+/* SVE2 BITPERM instructions, enabled through +sve2-bitperm.  */\n+#define TARGET_SVE2_BITPERM (AARCH64_ISA_SVE2_BITPERM)\n+\n+/* SVE2 SHA3 instructions, enabled through +sve2-sha3.  */\n+#define TARGET_SVE2_SHA3 (AARCH64_ISA_SVE2_SHA3)\n+\n+/* SVE2 SM4 instructions, enabled through +sve2-sm4.  */\n+#define TARGET_SVE2_SM4 (AARCH64_ISA_SVE2_SM4)\n+\n /* ARMv8.3-A features.  */\n #define TARGET_ARMV8_3\t(AARCH64_ISA_V8_3)\n "}, {"sha": "a144e241b99e527aa2f5715339e4ad8a561092d3", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -231,7 +231,9 @@\n     UNSPEC_LD1RQ\n     UNSPEC_LD1_GATHER\n     UNSPEC_LDFF1_GATHER\n+    UNSPEC_LDNT1_GATHER\n     UNSPEC_ST1_SCATTER\n+    UNSPEC_STNT1_SCATTER\n     UNSPEC_PRED_X\n     UNSPEC_PRED_Z\n     UNSPEC_PTEST\n@@ -241,6 +243,10 @@\n     UNSPEC_UNPACKSLO\n     UNSPEC_UNPACKULO\n     UNSPEC_PACK\n+    UNSPEC_WHILEGE\n+    UNSPEC_WHILEGT\n+    UNSPEC_WHILEHI\n+    UNSPEC_WHILEHS\n     UNSPEC_WHILELE\n     UNSPEC_WHILELO\n     UNSPEC_WHILELS"}, {"sha": "058c6bce607e51e52116da28e4aa30c5f1ff5bb9", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 656, "deletions": 47, "changes": 703, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -285,8 +285,10 @@\n (define_mode_iterator VMUL_CHANGE_NLANES [V4HI V8HI V2SI V4SI V2SF V4SF])\n \n ;; Iterators for single modes, for \"@\" patterns.\n+(define_mode_iterator VNx16QI_ONLY [VNx16QI])\n (define_mode_iterator VNx8HI_ONLY [VNx8HI])\n (define_mode_iterator VNx4SI_ONLY [VNx4SI])\n+(define_mode_iterator VNx4SF_ONLY [VNx4SF])\n (define_mode_iterator VNx2DI_ONLY [VNx2DI])\n (define_mode_iterator VNx2DF_ONLY [VNx2DF])\n \n@@ -298,6 +300,10 @@\n \t\t\t\t  VNx64QI VNx32HI VNx16SI VNx8DI\n \t\t\t\t  VNx32HF VNx16SF VNx8DF])\n \n+;; SVE_STRUCT restricted to 2-vector tuples.\n+(define_mode_iterator SVE_STRUCT2 [VNx32QI VNx16HI VNx8SI VNx4DI\n+\t\t\t\t   VNx16HF VNx8SF VNx4DF])\n+\n ;; All fully-packed SVE vector modes.\n (define_mode_iterator SVE_FULL [VNx16QI VNx8HI VNx4SI VNx2DI\n \t\t\t        VNx8HF VNx4SF VNx2DF])\n@@ -308,6 +314,9 @@\n ;; All fully-packed SVE floating-point vector modes.\n (define_mode_iterator SVE_FULL_F [VNx8HF VNx4SF VNx2DF])\n \n+;; Fully-packed SVE integer vector modes that have 8-bit or 16-bit elements.\n+(define_mode_iterator SVE_FULL_BHI [VNx16QI VNx8HI])\n+\n ;; Fully-packed SVE integer vector modes that have 8-bit, 16-bit or 32-bit\n ;; elements.\n (define_mode_iterator SVE_FULL_BHSI [VNx16QI VNx8HI VNx4SI])\n@@ -319,10 +328,17 @@\n ;; elements.\n (define_mode_iterator SVE_FULL_HSDI [VNx8HI VNx4SI VNx2DI])\n \n+;; Fully-packed SVE integer vector modes that have 16-bit or 32-bit\n+;; elements.\n+(define_mode_iterator SVE_FULL_HSI [VNx8HI VNx4SI])\n+\n ;; Fully-packed SVE floating-point vector modes that have 16-bit or 32-bit\n ;; elements.\n (define_mode_iterator SVE_FULL_HSF [VNx8HF VNx4SF])\n \n+;; Fully-packed SVE integer vector modes that have 16-bit or 64-bit elements.\n+(define_mode_iterator SVE_FULL_HDI [VNx8HI VNx2DI])\n+\n ;; Fully-packed SVE vector modes that have 32-bit or 64-bit elements.\n (define_mode_iterator SVE_FULL_SD [VNx4SI VNx2DI VNx4SF VNx2DF])\n \n@@ -386,6 +402,10 @@\n ;; SVE integer modes with 4 elements, excluding the narrowest element.\n (define_mode_iterator SVE_4HSI [VNx4HI VNx4SI])\n \n+;; SVE integer modes that can form the input to an SVE2 PMULL[BT] instruction.\n+(define_mode_iterator SVE2_PMULL_PAIR_I [VNx16QI VNx4SI\n+\t\t\t\t\t (VNx2DI \"TARGET_SVE2_AES\")])\n+\n ;; Modes involved in extending or truncating SVE data, for 8 elements per\n ;; 128-bit block.\n (define_mode_iterator VNx8_NARROW [VNx8QI])\n@@ -446,10 +466,6 @@\n     UNSPEC_RSUBHN2\t; Used in aarch64-simd.md.\n     UNSPEC_SQDMULH\t; Used in aarch64-simd.md.\n     UNSPEC_SQRDMULH\t; Used in aarch64-simd.md.\n-    UNSPEC_SMULLB\t; Used in aarch64-sve2.md.\n-    UNSPEC_SMULLT\t; Used in aarch64-sve2.md.\n-    UNSPEC_UMULLB\t; Used in aarch64-sve2.md.\n-    UNSPEC_UMULLT\t; Used in aarch64-sve2.md.\n     UNSPEC_PMUL\t\t; Used in aarch64-simd.md.\n     UNSPEC_FMULX\t; Used in aarch64-simd.md.\n     UNSPEC_USQADD\t; Used in aarch64-simd.md.\n@@ -472,10 +488,6 @@\n     UNSPEC_UQSHRN\t; Used in aarch64-simd.md.\n     UNSPEC_SQRSHRN\t; Used in aarch64-simd.md.\n     UNSPEC_UQRSHRN\t; Used in aarch64-simd.md.\n-    UNSPEC_SHRNB\t; Used in aarch64-sve2.md.\n-    UNSPEC_SHRNT\t; Used in aarch64-sve2.md.\n-    UNSPEC_RSHRNB\t; Used in aarch64-sve2.md.\n-    UNSPEC_RSHRNT\t; Used in aarch64-sve2.md.\n     UNSPEC_SSHL\t\t; Used in aarch64-simd.md.\n     UNSPEC_USHL\t\t; Used in aarch64-simd.md.\n     UNSPEC_SRSHL\t; Used in aarch64-simd.md.\n@@ -643,11 +655,129 @@\n     UNSPEC_FCMLA90\t; Used in aarch64-simd.md.\n     UNSPEC_FCMLA180\t; Used in aarch64-simd.md.\n     UNSPEC_FCMLA270\t; Used in aarch64-simd.md.\n-    UNSPEC_SMULHS\t; Used in aarch64-sve2.md.\n+    UNSPEC_ASRD\t\t; Used in aarch64-sve.md.\n+    UNSPEC_ADCLB\t; Used in aarch64-sve2.md.\n+    UNSPEC_ADCLT\t; Used in aarch64-sve2.md.\n+    UNSPEC_ADDHNB\t; Used in aarch64-sve2.md.\n+    UNSPEC_ADDHNT\t; Used in aarch64-sve2.md.\n+    UNSPEC_BDEP\t\t; Used in aarch64-sve2.md.\n+    UNSPEC_BEXT\t\t; Used in aarch64-sve2.md.\n+    UNSPEC_BGRP\t\t; Used in aarch64-sve2.md.\n+    UNSPEC_CADD270\t; Used in aarch64-sve2.md.\n+    UNSPEC_CADD90\t; Used in aarch64-sve2.md.\n+    UNSPEC_CDOT\t\t; Used in aarch64-sve2.md.\n+    UNSPEC_CDOT180\t; Used in aarch64-sve2.md.\n+    UNSPEC_CDOT270\t; Used in aarch64-sve2.md.\n+    UNSPEC_CDOT90\t; Used in aarch64-sve2.md.\n+    UNSPEC_CMLA\t\t; Used in aarch64-sve2.md.\n+    UNSPEC_CMLA180\t; Used in aarch64-sve2.md.\n+    UNSPEC_CMLA270\t; Used in aarch64-sve2.md.\n+    UNSPEC_CMLA90\t; Used in aarch64-sve2.md.\n+    UNSPEC_COND_FCVTLT\t; Used in aarch64-sve2.md.\n+    UNSPEC_COND_FCVTNT\t; Used in aarch64-sve2.md.\n+    UNSPEC_COND_FCVTX\t; Used in aarch64-sve2.md.\n+    UNSPEC_COND_FCVTXNT\t; Used in aarch64-sve2.md.\n+    UNSPEC_COND_FLOGB\t; Used in aarch64-sve2.md.\n+    UNSPEC_EORBT\t; Used in aarch64-sve2.md.\n+    UNSPEC_EORTB\t; Used in aarch64-sve2.md.\n+    UNSPEC_FADDP\t; Used in aarch64-sve2.md.\n+    UNSPEC_FMAXNMP\t; Used in aarch64-sve2.md.\n+    UNSPEC_FMAXP\t; Used in aarch64-sve2.md.\n+    UNSPEC_FMINNMP\t; Used in aarch64-sve2.md.\n+    UNSPEC_FMINP\t; Used in aarch64-sve2.md.\n+    UNSPEC_FMLALB\t; Used in aarch64-sve2.md.\n+    UNSPEC_FMLALT\t; Used in aarch64-sve2.md.\n+    UNSPEC_FMLSLB\t; Used in aarch64-sve2.md.\n+    UNSPEC_FMLSLT\t; Used in aarch64-sve2.md.\n+    UNSPEC_HISTCNT\t; Used in aarch64-sve2.md.\n+    UNSPEC_HISTSEG\t; Used in aarch64-sve2.md.\n+    UNSPEC_MATCH\t; Used in aarch64-sve2.md.\n+    UNSPEC_NMATCH\t; Used in aarch64-sve2.md.\n+    UNSPEC_PMULLB\t; Used in aarch64-sve2.md.\n+    UNSPEC_PMULLB_PAIR\t; Used in aarch64-sve2.md.\n+    UNSPEC_PMULLT\t; Used in aarch64-sve2.md.\n+    UNSPEC_PMULLT_PAIR\t; Used in aarch64-sve2.md.\n+    UNSPEC_RADDHNB\t; Used in aarch64-sve2.md.\n+    UNSPEC_RADDHNT\t; Used in aarch64-sve2.md.\n+    UNSPEC_RSHRNB\t; Used in aarch64-sve2.md.\n+    UNSPEC_RSHRNT\t; Used in aarch64-sve2.md.\n+    UNSPEC_RSUBHNB\t; Used in aarch64-sve2.md.\n+    UNSPEC_RSUBHNT\t; Used in aarch64-sve2.md.\n+    UNSPEC_SABDLB\t; Used in aarch64-sve2.md.\n+    UNSPEC_SABDLT\t; Used in aarch64-sve2.md.\n+    UNSPEC_SADDLB\t; Used in aarch64-sve2.md.\n+    UNSPEC_SADDLBT\t; Used in aarch64-sve2.md.\n+    UNSPEC_SADDLT\t; Used in aarch64-sve2.md.\n+    UNSPEC_SADDWB\t; Used in aarch64-sve2.md.\n+    UNSPEC_SADDWT\t; Used in aarch64-sve2.md.\n+    UNSPEC_SBCLB\t; Used in aarch64-sve2.md.\n+    UNSPEC_SBCLT\t; Used in aarch64-sve2.md.\n+    UNSPEC_SHRNB\t; Used in aarch64-sve2.md.\n+    UNSPEC_SHRNT\t; Used in aarch64-sve2.md.\n+    UNSPEC_SLI\t\t; Used in aarch64-sve2.md.\n+    UNSPEC_SMAXP\t; Used in aarch64-sve2.md.\n+    UNSPEC_SMINP\t; Used in aarch64-sve2.md.\n     UNSPEC_SMULHRS\t; Used in aarch64-sve2.md.\n-    UNSPEC_UMULHS\t; Used in aarch64-sve2.md.\n+    UNSPEC_SMULHS\t; Used in aarch64-sve2.md.\n+    UNSPEC_SMULLB\t; Used in aarch64-sve2.md.\n+    UNSPEC_SMULLT\t; Used in aarch64-sve2.md.\n+    UNSPEC_SQCADD270\t; Used in aarch64-sve2.md.\n+    UNSPEC_SQCADD90\t; Used in aarch64-sve2.md.\n+    UNSPEC_SQDMULLB\t; Used in aarch64-sve2.md.\n+    UNSPEC_SQDMULLBT\t; Used in aarch64-sve2.md.\n+    UNSPEC_SQDMULLT\t; Used in aarch64-sve2.md.\n+    UNSPEC_SQRDCMLAH\t; Used in aarch64-sve2.md.\n+    UNSPEC_SQRDCMLAH180\t; Used in aarch64-sve2.md.\n+    UNSPEC_SQRDCMLAH270\t; Used in aarch64-sve2.md.\n+    UNSPEC_SQRDCMLAH90\t; Used in aarch64-sve2.md.\n+    UNSPEC_SQRSHRNB\t; Used in aarch64-sve2.md.\n+    UNSPEC_SQRSHRNT\t; Used in aarch64-sve2.md.\n+    UNSPEC_SQRSHRUNB\t; Used in aarch64-sve2.md.\n+    UNSPEC_SQRSHRUNT\t; Used in aarch64-sve2.md.\n+    UNSPEC_SQSHRNB\t; Used in aarch64-sve2.md.\n+    UNSPEC_SQSHRNT\t; Used in aarch64-sve2.md.\n+    UNSPEC_SQSHRUNB\t; Used in aarch64-sve2.md.\n+    UNSPEC_SQSHRUNT\t; Used in aarch64-sve2.md.\n+    UNSPEC_SQXTNB\t; Used in aarch64-sve2.md.\n+    UNSPEC_SQXTNT\t; Used in aarch64-sve2.md.\n+    UNSPEC_SQXTUNB\t; Used in aarch64-sve2.md.\n+    UNSPEC_SQXTUNT\t; Used in aarch64-sve2.md.\n+    UNSPEC_SRI\t\t; Used in aarch64-sve2.md.\n+    UNSPEC_SSHLLB\t; Used in aarch64-sve2.md.\n+    UNSPEC_SSHLLT\t; Used in aarch64-sve2.md.\n+    UNSPEC_SSUBLB\t; Used in aarch64-sve2.md.\n+    UNSPEC_SSUBLBT\t; Used in aarch64-sve2.md.\n+    UNSPEC_SSUBLT\t; Used in aarch64-sve2.md.\n+    UNSPEC_SSUBLTB\t; Used in aarch64-sve2.md.\n+    UNSPEC_SSUBWB\t; Used in aarch64-sve2.md.\n+    UNSPEC_SSUBWT\t; Used in aarch64-sve2.md.\n+    UNSPEC_SUBHNB\t; Used in aarch64-sve2.md.\n+    UNSPEC_SUBHNT\t; Used in aarch64-sve2.md.\n+    UNSPEC_TBL2\t\t; Used in aarch64-sve2.md.\n+    UNSPEC_UABDLB\t; Used in aarch64-sve2.md.\n+    UNSPEC_UABDLT\t; Used in aarch64-sve2.md.\n+    UNSPEC_UADDLB\t; Used in aarch64-sve2.md.\n+    UNSPEC_UADDLT\t; Used in aarch64-sve2.md.\n+    UNSPEC_UADDWB\t; Used in aarch64-sve2.md.\n+    UNSPEC_UADDWT\t; Used in aarch64-sve2.md.\n+    UNSPEC_UMAXP\t; Used in aarch64-sve2.md.\n+    UNSPEC_UMINP\t; Used in aarch64-sve2.md.\n     UNSPEC_UMULHRS\t; Used in aarch64-sve2.md.\n-    UNSPEC_ASRD\t\t; Used in aarch64-sve.md.\n+    UNSPEC_UMULHS\t; Used in aarch64-sve2.md.\n+    UNSPEC_UMULLB\t; Used in aarch64-sve2.md.\n+    UNSPEC_UMULLT\t; Used in aarch64-sve2.md.\n+    UNSPEC_UQRSHRNB\t; Used in aarch64-sve2.md.\n+    UNSPEC_UQRSHRNT\t; Used in aarch64-sve2.md.\n+    UNSPEC_UQSHRNB\t; Used in aarch64-sve2.md.\n+    UNSPEC_UQSHRNT\t; Used in aarch64-sve2.md.\n+    UNSPEC_UQXTNB\t; Used in aarch64-sve2.md.\n+    UNSPEC_UQXTNT\t; Used in aarch64-sve2.md.\n+    UNSPEC_USHLLB\t; Used in aarch64-sve2.md.\n+    UNSPEC_USHLLT\t; Used in aarch64-sve2.md.\n+    UNSPEC_USUBLB\t; Used in aarch64-sve2.md.\n+    UNSPEC_USUBLT\t; Used in aarch64-sve2.md.\n+    UNSPEC_USUBWB\t; Used in aarch64-sve2.md.\n+    UNSPEC_USUBWT\t; Used in aarch64-sve2.md.\n ])\n \n ;; ------------------------------------------------------------------\n@@ -1011,6 +1141,11 @@\n (define_mode_attr VNARROWQ2 [(V8HI \"V16QI\") (V4SI \"V8HI\")\n \t\t\t     (V2DI \"V4SI\")])\n \n+;; Narrowed modes of vector modes.\n+(define_mode_attr VNARROW [(VNx8HI \"VNx16QI\")\n+\t\t\t   (VNx4SI \"VNx8HI\") (VNx4SF \"VNx8HF\")\n+\t\t\t   (VNx2DI \"VNx4SI\") (VNx2DF \"VNx4SF\")])\n+\n ;; Register suffix narrowed modes for VQN.\n (define_mode_attr Vntype [(V8HI \"8b\") (V4SI \"4h\")\n \t\t\t  (V2DI \"2s\")])\n@@ -1049,10 +1184,16 @@\n \t\t\t  (V8HI \"4s\") (V4SI \"2d\")\n \t\t\t  (V8HF \"4s\") (V4SF \"2d\")])\n \n-;; SVE vector after widening\n+;; SVE vector after narrowing.\n+(define_mode_attr Ventype [(VNx8HI \"b\")\n+\t\t\t   (VNx4SI \"h\") (VNx4SF \"h\")\n+\t\t\t   (VNx2DI \"s\") (VNx2DF \"s\")])\n+\n+;; SVE vector after widening.\n (define_mode_attr Vewtype [(VNx16QI \"h\")\n \t\t\t   (VNx8HI  \"s\") (VNx8HF \"s\")\n-\t\t\t   (VNx4SI  \"d\") (VNx4SF \"d\")])\n+\t\t\t   (VNx4SI  \"d\") (VNx4SF \"d\")\n+\t\t\t   (VNx2DI  \"q\")])\n \n ;; Widened mode register suffixes for VDW/VQW.\n (define_mode_attr Vmwtype [(V8QI \".8h\") (V4HI \".4s\")\n@@ -1401,6 +1542,11 @@\n \t\t\t (VNx16SI \"vnx4bi\") (VNx16SF \"vnx4bi\")\n \t\t\t (VNx8DI \"vnx2bi\") (VNx8DF \"vnx2bi\")])\n \n+(define_mode_attr VDOUBLE [(VNx16QI \"VNx32QI\")\n+\t\t\t   (VNx8HI \"VNx16HI\") (VNx8HF \"VNx16HF\")\n+\t\t\t   (VNx4SI \"VNx8SI\") (VNx4SF \"VNx8SF\")\n+\t\t\t   (VNx2DI \"VNx4DI\") (VNx2DF \"VNx4DF\")])\n+\n ;; On AArch64 the By element instruction doesn't have a 2S variant.\n ;; However because the instruction always selects a pair of values\n ;; The normal 3SAME instruction can be used here instead.\n@@ -1427,7 +1573,7 @@\n \t\t\t\t (VNx2DI \"0x27\")])\n \n ;; The constraint to use for an SVE [SU]DOT, FMUL, FMLA or FMLS lane index.\n-(define_mode_attr sve_lane_con [(VNx4SI \"y\") (VNx2DI \"x\")\n+(define_mode_attr sve_lane_con [(VNx8HI \"y\") (VNx4SI \"y\") (VNx2DI \"x\")\n \t\t\t\t(VNx8HF \"y\") (VNx4SF \"y\") (VNx2DF \"x\")])\n \n ;; The constraint to use for an SVE FCMLA lane index.\n@@ -1529,12 +1675,18 @@\n (define_code_iterator FAC_COMPARISONS [lt le ge gt])\n \n ;; SVE integer unary operations.\n-(define_code_iterator SVE_INT_UNARY [abs neg not clrsb clz popcount])\n+(define_code_iterator SVE_INT_UNARY [abs neg not clrsb clz popcount\n+\t\t\t\t     (ss_abs \"TARGET_SVE2\")\n+\t\t\t\t     (ss_neg \"TARGET_SVE2\")])\n \n ;; SVE integer binary operations.\n (define_code_iterator SVE_INT_BINARY [plus minus mult smax umax smin umin\n \t\t\t\t      ashift ashiftrt lshiftrt\n-\t\t\t\t      and ior xor])\n+\t\t\t\t      and ior xor\n+\t\t\t\t      (ss_plus \"TARGET_SVE2\")\n+\t\t\t\t      (us_plus \"TARGET_SVE2\")\n+\t\t\t\t      (ss_minus \"TARGET_SVE2\")\n+\t\t\t\t      (us_minus \"TARGET_SVE2\")])\n \n ;; SVE integer binary division operations.\n (define_code_iterator SVE_INT_BINARY_SD [div udiv])\n@@ -1752,7 +1904,13 @@\n \t\t\t      (not \"not\")\n \t\t\t      (clrsb \"cls\")\n \t\t\t      (clz \"clz\")\n-\t\t\t      (popcount \"cnt\")])\n+\t\t\t      (popcount \"cnt\")\n+\t\t\t      (ss_plus \"sqadd\")\n+\t\t\t      (us_plus \"uqadd\")\n+\t\t\t      (ss_minus \"sqsub\")\n+\t\t\t      (us_minus \"uqsub\")\n+\t\t\t      (ss_neg \"sqneg\")\n+\t\t\t      (ss_abs \"sqabs\")])\n \n (define_code_attr sve_int_op_rev [(plus \"add\")\n \t\t\t\t  (minus \"subr\")\n@@ -1768,7 +1926,11 @@\n \t\t\t\t  (lshiftrt \"lsrr\")\n \t\t\t\t  (and \"and\")\n \t\t\t\t  (ior \"orr\")\n-\t\t\t\t  (xor \"eor\")])\n+\t\t\t\t  (xor \"eor\")\n+\t\t\t\t  (ss_plus \"sqadd\")\n+\t\t\t\t  (us_plus \"uqadd\")\n+\t\t\t\t  (ss_minus \"sqsubr\")\n+\t\t\t\t  (us_minus \"uqsubr\")])\n \n ;; The floating-point SVE instruction that implements an rtx code.\n (define_code_attr sve_fp_op [(plus \"fadd\")\n@@ -1814,7 +1976,11 @@\n    (lshiftrt \"aarch64_sve_rshift_operand\")\n    (and \"aarch64_sve_pred_and_operand\")\n    (ior \"register_operand\")\n-   (xor \"register_operand\")])\n+   (xor \"register_operand\")\n+   (ss_plus \"register_operand\")\n+   (us_plus \"register_operand\")\n+   (ss_minus \"register_operand\")\n+   (us_minus \"register_operand\")])\n \n (define_code_attr inc_dec [(minus \"dec\") (ss_minus \"sqdec\") (us_minus \"uqdec\")\n \t\t\t   (plus \"inc\") (ss_plus \"sqinc\") (us_plus \"uqinc\")])\n@@ -1850,13 +2016,6 @@\n \n (define_int_iterator RHADD [UNSPEC_SRHADD UNSPEC_URHADD])\n \n-(define_int_iterator MULLBT [UNSPEC_SMULLB UNSPEC_UMULLB\n-                             UNSPEC_SMULLT UNSPEC_UMULLT])\n-\n-(define_int_iterator SHRNB [UNSPEC_SHRNB UNSPEC_RSHRNB])\n-\n-(define_int_iterator SHRNT [UNSPEC_SHRNT UNSPEC_RSHRNT])\n-\n (define_int_iterator BSL_DUP [1 2])\n \n (define_int_iterator DOTPROD [UNSPEC_SDOT UNSPEC_UDOT])\n@@ -1971,6 +2130,11 @@\n \n (define_int_iterator SVE_FP_UNARY_INT [UNSPEC_FEXPA])\n \n+(define_int_iterator SVE_INT_SHIFT_IMM [UNSPEC_ASRD\n+\t\t\t\t\t(UNSPEC_SQSHLU \"TARGET_SVE2\")\n+\t\t\t\t\t(UNSPEC_SRSHR \"TARGET_SVE2\")\n+\t\t\t\t\t(UNSPEC_URSHR \"TARGET_SVE2\")])\n+\n (define_int_iterator SVE_FP_BINARY [UNSPEC_FRECPS UNSPEC_RSQRTS])\n \n (define_int_iterator SVE_FP_BINARY_INT [UNSPEC_FTSMUL UNSPEC_FTSSEL])\n@@ -2084,6 +2248,10 @@\n \n (define_int_iterator SVE_WHILE [UNSPEC_WHILELE UNSPEC_WHILELO\n \t\t\t\tUNSPEC_WHILELS UNSPEC_WHILELT\n+\t\t\t\t(UNSPEC_WHILEGE \"TARGET_SVE2\")\n+\t\t\t\t(UNSPEC_WHILEGT \"TARGET_SVE2\")\n+\t\t\t\t(UNSPEC_WHILEHI \"TARGET_SVE2\")\n+\t\t\t\t(UNSPEC_WHILEHS \"TARGET_SVE2\")\n \t\t\t\t(UNSPEC_WHILERW \"TARGET_SVE2\")\n \t\t\t\t(UNSPEC_WHILEWR \"TARGET_SVE2\")])\n \n@@ -2095,6 +2263,232 @@\n \n (define_int_iterator SVE_LDFF1_LDNF1 [UNSPEC_LDFF1 UNSPEC_LDNF1])\n \n+(define_int_iterator SVE2_U32_UNARY [UNSPEC_URECPE UNSPEC_RSQRTE])\n+\n+(define_int_iterator SVE2_INT_UNARY_NARROWB [UNSPEC_SQXTNB\n+\t\t\t\t\t     UNSPEC_SQXTUNB\n+\t\t\t\t\t     UNSPEC_UQXTNB])\n+\n+(define_int_iterator SVE2_INT_UNARY_NARROWT [UNSPEC_SQXTNT\n+\t\t\t\t\t     UNSPEC_SQXTUNT\n+\t\t\t\t\t     UNSPEC_UQXTNT])\n+\n+(define_int_iterator SVE2_INT_BINARY [UNSPEC_SQDMULH\n+\t\t\t\t      UNSPEC_SQRDMULH])\n+\n+(define_int_iterator SVE2_INT_BINARY_LANE [UNSPEC_SQDMULH\n+\t\t\t\t\t   UNSPEC_SQRDMULH])\n+\n+(define_int_iterator SVE2_INT_BINARY_LONG [UNSPEC_SABDLB\n+\t\t\t\t\t   UNSPEC_SABDLT\n+\t\t\t\t\t   UNSPEC_SADDLB\n+\t\t\t\t\t   UNSPEC_SADDLBT\n+\t\t\t\t\t   UNSPEC_SADDLT\n+\t\t\t\t\t   UNSPEC_SMULLB\n+\t\t\t\t\t   UNSPEC_SMULLT\n+\t\t\t\t\t   UNSPEC_SQDMULLB\n+\t\t\t\t\t   UNSPEC_SQDMULLT\n+\t\t\t\t\t   UNSPEC_SSUBLB\n+\t\t\t\t\t   UNSPEC_SSUBLBT\n+\t\t\t\t\t   UNSPEC_SSUBLT\n+\t\t\t\t\t   UNSPEC_SSUBLTB\n+\t\t\t\t\t   UNSPEC_UABDLB\n+\t\t\t\t\t   UNSPEC_UABDLT\n+\t\t\t\t\t   UNSPEC_UADDLB\n+\t\t\t\t\t   UNSPEC_UADDLT\n+\t\t\t\t\t   UNSPEC_UMULLB\n+\t\t\t\t\t   UNSPEC_UMULLT\n+\t\t\t\t\t   UNSPEC_USUBLB\n+\t\t\t\t\t   UNSPEC_USUBLT])\n+\n+(define_int_iterator SVE2_INT_BINARY_LONG_LANE [UNSPEC_SMULLB\n+\t\t\t\t\t\tUNSPEC_SMULLT\n+\t\t\t\t\t\tUNSPEC_SQDMULLB\n+\t\t\t\t\t\tUNSPEC_SQDMULLT\n+\t\t\t\t\t\tUNSPEC_UMULLB\n+\t\t\t\t\t\tUNSPEC_UMULLT])\n+\n+(define_int_iterator SVE2_INT_BINARY_NARROWB [UNSPEC_ADDHNB\n+\t\t\t\t\t      UNSPEC_RADDHNB\n+\t\t\t\t\t      UNSPEC_RSUBHNB\n+\t\t\t\t\t      UNSPEC_SUBHNB])\n+\n+(define_int_iterator SVE2_INT_BINARY_NARROWT [UNSPEC_ADDHNT\n+\t\t\t\t\t      UNSPEC_RADDHNT\n+\t\t\t\t\t      UNSPEC_RSUBHNT\n+\t\t\t\t\t      UNSPEC_SUBHNT])\n+\n+(define_int_iterator SVE2_INT_BINARY_PAIR [UNSPEC_ADDP\n+\t\t\t\t\t   UNSPEC_SMAXP\n+\t\t\t\t\t   UNSPEC_SMINP\n+\t\t\t\t\t   UNSPEC_UMAXP\n+\t\t\t\t\t   UNSPEC_UMINP])\n+\n+(define_int_iterator SVE2_FP_BINARY_PAIR [UNSPEC_FADDP\n+\t\t\t\t\t  UNSPEC_FMAXP\n+\t\t\t\t\t  UNSPEC_FMAXNMP\n+\t\t\t\t\t  UNSPEC_FMINP\n+\t\t\t\t\t  UNSPEC_FMINNMP])\n+\n+(define_int_iterator SVE2_INT_BINARY_PAIR_LONG [UNSPEC_SADALP UNSPEC_UADALP])\n+\n+(define_int_iterator SVE2_INT_BINARY_WIDE [UNSPEC_SADDWB\n+\t\t\t\t\t   UNSPEC_SADDWT\n+\t\t\t\t\t   UNSPEC_SSUBWB\n+\t\t\t\t\t   UNSPEC_SSUBWT\n+\t\t\t\t\t   UNSPEC_UADDWB\n+\t\t\t\t\t   UNSPEC_UADDWT\n+\t\t\t\t\t   UNSPEC_USUBWB\n+\t\t\t\t\t   UNSPEC_USUBWT])\n+\n+(define_int_iterator SVE2_INT_SHIFT_IMM_LONG [UNSPEC_SSHLLB\n+\t\t\t\t\t      UNSPEC_SSHLLT\n+\t\t\t\t\t      UNSPEC_USHLLB\n+\t\t\t\t\t      UNSPEC_USHLLT])\n+\n+(define_int_iterator SVE2_INT_SHIFT_IMM_NARROWB [UNSPEC_RSHRNB\n+\t\t\t\t\t\t UNSPEC_SHRNB\n+\t\t\t\t\t\t UNSPEC_SQRSHRNB\n+\t\t\t\t\t\t UNSPEC_SQRSHRUNB\n+\t\t\t\t\t\t UNSPEC_SQSHRNB\n+\t\t\t\t\t\t UNSPEC_SQSHRUNB\n+\t\t\t\t\t\t UNSPEC_UQRSHRNB\n+\t\t\t\t\t\t UNSPEC_UQSHRNB])\n+\n+(define_int_iterator SVE2_INT_SHIFT_IMM_NARROWT [UNSPEC_RSHRNT\n+\t\t\t\t\t\t UNSPEC_SHRNT\n+\t\t\t\t\t\t UNSPEC_SQRSHRNT\n+\t\t\t\t\t\t UNSPEC_SQRSHRUNT\n+\t\t\t\t\t\t UNSPEC_SQSHRNT\n+\t\t\t\t\t\t UNSPEC_SQSHRUNT\n+\t\t\t\t\t\t UNSPEC_UQRSHRNT\n+\t\t\t\t\t\t UNSPEC_UQSHRNT])\n+\n+(define_int_iterator SVE2_INT_SHIFT_INSERT [UNSPEC_SLI UNSPEC_SRI])\n+\n+(define_int_iterator SVE2_INT_CADD [UNSPEC_CADD90\n+\t\t\t\t    UNSPEC_CADD270\n+\t\t\t\t    UNSPEC_SQCADD90\n+\t\t\t\t    UNSPEC_SQCADD270])\n+\n+(define_int_iterator SVE2_INT_BITPERM [UNSPEC_BDEP UNSPEC_BEXT UNSPEC_BGRP])\n+\n+(define_int_iterator SVE2_INT_TERNARY [UNSPEC_ADCLB\n+\t\t\t\t       UNSPEC_ADCLT\n+\t\t\t\t       UNSPEC_EORBT\n+\t\t\t\t       UNSPEC_EORTB\n+\t\t\t\t       UNSPEC_SBCLB\n+\t\t\t\t       UNSPEC_SBCLT\n+\t\t\t\t       UNSPEC_SQRDMLAH\n+\t\t\t\t       UNSPEC_SQRDMLSH])\n+\n+(define_int_iterator SVE2_INT_TERNARY_LANE [UNSPEC_SQRDMLAH\n+\t\t\t\t\t    UNSPEC_SQRDMLSH])\n+\n+(define_int_iterator SVE2_FP_TERNARY_LONG [UNSPEC_FMLALB\n+\t\t\t\t\t   UNSPEC_FMLALT\n+\t\t\t\t\t   UNSPEC_FMLSLB\n+\t\t\t\t\t   UNSPEC_FMLSLT])\n+\n+(define_int_iterator SVE2_FP_TERNARY_LONG_LANE [UNSPEC_FMLALB\n+\t\t\t\t\t\tUNSPEC_FMLALT\n+\t\t\t\t\t\tUNSPEC_FMLSLB\n+\t\t\t\t\t\tUNSPEC_FMLSLT])\n+\n+(define_int_iterator SVE2_INT_CMLA [UNSPEC_CMLA\n+\t\t\t\t    UNSPEC_CMLA90\n+\t\t\t\t    UNSPEC_CMLA180\n+\t\t\t\t    UNSPEC_CMLA270\n+\t\t\t\t    UNSPEC_SQRDCMLAH\n+\t\t\t\t    UNSPEC_SQRDCMLAH90\n+\t\t\t\t    UNSPEC_SQRDCMLAH180\n+\t\t\t\t    UNSPEC_SQRDCMLAH270])\n+\n+(define_int_iterator SVE2_INT_CDOT [UNSPEC_CDOT\n+\t\t\t\t    UNSPEC_CDOT90\n+\t\t\t\t    UNSPEC_CDOT180\n+\t\t\t\t    UNSPEC_CDOT270])\n+\n+(define_int_iterator SVE2_INT_ADD_BINARY_LONG [UNSPEC_SABDLB\n+\t\t\t\t\t       UNSPEC_SABDLT\n+\t\t\t\t\t       UNSPEC_SMULLB\n+\t\t\t\t\t       UNSPEC_SMULLT\n+\t\t\t\t\t       UNSPEC_UABDLB\n+\t\t\t\t\t       UNSPEC_UABDLT\n+\t\t\t\t\t       UNSPEC_UMULLB\n+\t\t\t\t\t       UNSPEC_UMULLT])\n+\n+(define_int_iterator SVE2_INT_QADD_BINARY_LONG [UNSPEC_SQDMULLB\n+\t\t\t\t\t        UNSPEC_SQDMULLBT\n+\t\t\t\t\t        UNSPEC_SQDMULLT])\n+\n+(define_int_iterator SVE2_INT_SUB_BINARY_LONG [UNSPEC_SMULLB\n+\t\t\t\t\t       UNSPEC_SMULLT\n+\t\t\t\t\t       UNSPEC_UMULLB\n+\t\t\t\t\t       UNSPEC_UMULLT])\n+\n+(define_int_iterator SVE2_INT_QSUB_BINARY_LONG [UNSPEC_SQDMULLB\n+\t\t\t\t\t        UNSPEC_SQDMULLBT\n+\t\t\t\t\t        UNSPEC_SQDMULLT])\n+\n+(define_int_iterator SVE2_INT_ADD_BINARY_LONG_LANE [UNSPEC_SMULLB\n+\t\t\t\t\t\t    UNSPEC_SMULLT\n+\t\t\t\t\t\t    UNSPEC_UMULLB\n+\t\t\t\t\t\t    UNSPEC_UMULLT])\n+\n+(define_int_iterator SVE2_INT_QADD_BINARY_LONG_LANE [UNSPEC_SQDMULLB\n+\t\t\t\t\t\t     UNSPEC_SQDMULLT])\n+\n+(define_int_iterator SVE2_INT_SUB_BINARY_LONG_LANE [UNSPEC_SMULLB\n+\t\t\t\t\t\t    UNSPEC_SMULLT\n+\t\t\t\t\t\t    UNSPEC_UMULLB\n+\t\t\t\t\t\t    UNSPEC_UMULLT])\n+\n+(define_int_iterator SVE2_INT_QSUB_BINARY_LONG_LANE [UNSPEC_SQDMULLB\n+\t\t\t\t\t\t     UNSPEC_SQDMULLT])\n+\n+(define_int_iterator SVE2_COND_INT_UNARY_FP [UNSPEC_COND_FLOGB])\n+\n+(define_int_iterator SVE2_COND_FP_UNARY_LONG [UNSPEC_COND_FCVTLT])\n+\n+(define_int_iterator SVE2_COND_FP_UNARY_NARROWB [UNSPEC_COND_FCVTX])\n+\n+(define_int_iterator SVE2_COND_INT_BINARY [UNSPEC_SHADD\n+\t\t\t\t\t   UNSPEC_SHSUB\n+\t\t\t\t\t   UNSPEC_SQRSHL\n+\t\t\t\t\t   UNSPEC_SRHADD\n+\t\t\t\t\t   UNSPEC_SRSHL\n+\t\t\t\t\t   UNSPEC_SUQADD\n+\t\t\t\t\t   UNSPEC_UHADD\n+\t\t\t\t\t   UNSPEC_UHSUB\n+\t\t\t\t\t   UNSPEC_UQRSHL\n+\t\t\t\t\t   UNSPEC_URHADD\n+\t\t\t\t\t   UNSPEC_URSHL\n+\t\t\t\t\t   UNSPEC_USQADD])\n+\n+(define_int_iterator SVE2_COND_INT_BINARY_NOREV [UNSPEC_SUQADD\n+\t\t\t\t\t\t UNSPEC_USQADD])\n+\n+(define_int_iterator SVE2_COND_INT_BINARY_REV [UNSPEC_SHADD\n+\t\t\t\t\t       UNSPEC_SHSUB\n+\t\t\t\t\t       UNSPEC_SQRSHL\n+\t\t\t\t\t       UNSPEC_SRHADD\n+\t\t\t\t\t       UNSPEC_SRSHL\n+\t\t\t\t\t       UNSPEC_UHADD\n+\t\t\t\t\t       UNSPEC_UHSUB\n+\t\t\t\t\t       UNSPEC_UQRSHL\n+\t\t\t\t\t       UNSPEC_URHADD\n+\t\t\t\t\t       UNSPEC_URSHL])\n+\n+(define_int_iterator SVE2_COND_INT_SHIFT [UNSPEC_SQSHL\n+\t\t\t\t\t  UNSPEC_UQSHL])\n+\n+(define_int_iterator SVE2_MATCH [UNSPEC_MATCH UNSPEC_NMATCH])\n+\n+(define_int_iterator SVE2_PMULL [UNSPEC_PMULLB UNSPEC_PMULLT])\n+\n+(define_int_iterator SVE2_PMULL_PAIR [UNSPEC_PMULLB_PAIR UNSPEC_PMULLT_PAIR])\n+\n (define_int_iterator FCADD [UNSPEC_FCADD90\n \t\t\t    UNSPEC_FCADD270])\n \n@@ -2153,6 +2547,16 @@\n \t\t\t(UNSPEC_UMINV \"umin\")\n \t\t\t(UNSPEC_SMAXV \"smax\")\n \t\t\t(UNSPEC_SMINV \"smin\")\n+\t\t\t(UNSPEC_CADD90 \"cadd90\")\n+\t\t\t(UNSPEC_CADD270 \"cadd270\")\n+\t\t\t(UNSPEC_CDOT \"cdot\")\n+\t\t\t(UNSPEC_CDOT90 \"cdot90\")\n+\t\t\t(UNSPEC_CDOT180 \"cdot180\")\n+\t\t\t(UNSPEC_CDOT270 \"cdot270\")\n+\t\t\t(UNSPEC_CMLA \"cmla\")\n+\t\t\t(UNSPEC_CMLA90 \"cmla90\")\n+\t\t\t(UNSPEC_CMLA180 \"cmla180\")\n+\t\t\t(UNSPEC_CMLA270 \"cmla270\")\n \t\t\t(UNSPEC_FADDV \"plus\")\n \t\t\t(UNSPEC_FMAXNMV \"smax\")\n \t\t\t(UNSPEC_FMAXV \"smax_nan\")\n@@ -2169,6 +2573,16 @@\n \t\t\t(UNSPEC_FEXPA \"fexpa\")\n \t\t\t(UNSPEC_FTSMUL \"ftsmul\")\n \t\t\t(UNSPEC_FTSSEL \"ftssel\")\n+\t\t\t(UNSPEC_PMULLB \"pmullb\")\n+\t\t\t(UNSPEC_PMULLB_PAIR \"pmullb_pair\")\n+\t\t\t(UNSPEC_PMULLT \"pmullt\")\n+\t\t\t(UNSPEC_PMULLT_PAIR \"pmullt_pair\")\n+\t\t\t(UNSPEC_SQCADD90 \"sqcadd90\")\n+\t\t\t(UNSPEC_SQCADD270 \"sqcadd270\")\n+\t\t\t(UNSPEC_SQRDCMLAH \"sqrdcmlah\")\n+\t\t\t(UNSPEC_SQRDCMLAH90 \"sqrdcmlah90\")\n+\t\t\t(UNSPEC_SQRDCMLAH180 \"sqrdcmlah180\")\n+\t\t\t(UNSPEC_SQRDCMLAH270 \"sqrdcmlah270\")\n \t\t\t(UNSPEC_WHILERW \"vec_check_raw_alias\")\n \t\t\t(UNSPEC_WHILEWR \"vec_check_war_alias\")\n \t\t\t(UNSPEC_COND_FABS \"abs\")\n@@ -2269,8 +2683,6 @@\n \t\t     (UNSPEC_COND_FCVTZU \"u\")\n \t\t     (UNSPEC_COND_SCVTF \"s\")\n \t\t     (UNSPEC_COND_UCVTF \"u\")\n-\t\t     (UNSPEC_SMULLB \"s\") (UNSPEC_UMULLB \"u\")\n-\t\t     (UNSPEC_SMULLT \"s\") (UNSPEC_UMULLT \"u\")\n \t\t     (UNSPEC_SMULHS \"s\") (UNSPEC_UMULHS \"u\")\n \t\t     (UNSPEC_SMULHRS \"s\") (UNSPEC_UMULHRS \"u\")])\n \n@@ -2309,14 +2721,17 @@\n                     (UNSPEC_SQRSHRN \"r\") (UNSPEC_UQRSHRN \"r\")\n                     (UNSPEC_SQSHL   \"\")  (UNSPEC_UQSHL  \"\")\n                     (UNSPEC_SQRSHL   \"r\")(UNSPEC_UQRSHL  \"r\")\n-\t\t    (UNSPEC_SHRNB \"\") (UNSPEC_SHRNT \"\")\n-\t\t    (UNSPEC_RSHRNB \"r\") (UNSPEC_RSHRNT \"r\")\n \t\t    (UNSPEC_SMULHS \"\") (UNSPEC_UMULHS \"\")\n \t\t    (UNSPEC_SMULHRS \"r\") (UNSPEC_UMULHRS \"r\")\n ])\n \n (define_int_attr lr [(UNSPEC_SSLI  \"l\") (UNSPEC_USLI  \"l\")\n-\t\t     (UNSPEC_SSRI  \"r\") (UNSPEC_USRI  \"r\")])\n+\t\t     (UNSPEC_SSRI  \"r\") (UNSPEC_USRI  \"r\")\n+\t\t     (UNSPEC_SQSHL \"l\") (UNSPEC_UQSHL \"l\")\n+\t\t     (UNSPEC_SQSHLU \"l\")\n+\t\t     (UNSPEC_SRSHR \"r\") (UNSPEC_URSHR \"r\")\n+\t\t     (UNSPEC_ASRD  \"r\")\n+\t\t     (UNSPEC_SLI   \"l\") (UNSPEC_SRI   \"r\")])\n \n (define_int_attr u [(UNSPEC_SQSHLU \"u\") (UNSPEC_SQSHL \"\") (UNSPEC_UQSHL \"\")\n \t\t    (UNSPEC_SQSHRUN \"u\") (UNSPEC_SQRSHRUN \"u\")\n@@ -2325,9 +2740,6 @@\n \t\t    (UNSPEC_SHADD \"\") (UNSPEC_UHADD \"u\")\n \t\t    (UNSPEC_SRHADD \"\") (UNSPEC_URHADD \"u\")])\n \n-(define_int_attr bt [(UNSPEC_SMULLB \"b\") (UNSPEC_UMULLB \"b\")\n-\t\t     (UNSPEC_SMULLT \"t\") (UNSPEC_UMULLT \"t\")])\n-\n (define_int_attr fn [(UNSPEC_LDFF1 \"f\") (UNSPEC_LDNF1 \"n\")])\n \n (define_int_attr ab [(UNSPEC_CLASTA \"a\") (UNSPEC_CLASTB \"b\")\n@@ -2488,14 +2900,22 @@\n \t\t\t (UNSPEC_COND_FCMLE \"le\")\n \t\t\t (UNSPEC_COND_FCMLT \"lt\")\n \t\t\t (UNSPEC_COND_FCMNE \"ne\")\n+\t\t\t (UNSPEC_WHILEGE \"ge\")\n+\t\t\t (UNSPEC_WHILEGT \"gt\")\n+\t\t\t (UNSPEC_WHILEHI \"hi\")\n+\t\t\t (UNSPEC_WHILEHS \"hs\")\n \t\t\t (UNSPEC_WHILELE \"le\")\n \t\t\t (UNSPEC_WHILELO \"lo\")\n \t\t\t (UNSPEC_WHILELS \"ls\")\n \t\t\t (UNSPEC_WHILELT \"lt\")\n \t\t\t (UNSPEC_WHILERW \"rw\")\n \t\t\t (UNSPEC_WHILEWR \"wr\")])\n \n-(define_int_attr while_optab_cmp [(UNSPEC_WHILELE \"le\")\n+(define_int_attr while_optab_cmp [(UNSPEC_WHILEGE \"ge\")\n+\t\t\t\t  (UNSPEC_WHILEGT \"gt\")\n+\t\t\t\t  (UNSPEC_WHILEHI \"ugt\")\n+\t\t\t\t  (UNSPEC_WHILEHS \"uge\")\n+\t\t\t\t  (UNSPEC_WHILELE \"le\")\n \t\t\t\t  (UNSPEC_WHILELO \"ult\")\n \t\t\t\t  (UNSPEC_WHILELS \"ule\")\n \t\t\t\t  (UNSPEC_WHILELT \"lt\")\n@@ -2511,40 +2931,213 @@\n \n (define_int_attr sve_pred_op [(UNSPEC_PFIRST \"pfirst\") (UNSPEC_PNEXT \"pnext\")])\n \n-(define_int_attr sve_int_op [(UNSPEC_ANDV \"andv\")\n-\t\t\t     (UNSPEC_IORV \"orv\")\n-\t\t\t     (UNSPEC_XORV \"eorv\")\n-\t\t\t     (UNSPEC_UMAXV \"umaxv\")\n-\t\t\t     (UNSPEC_UMINV \"uminv\")\n-\t\t\t     (UNSPEC_SMAXV \"smaxv\")\n-\t\t\t     (UNSPEC_SMINV \"sminv\")\n-\t\t\t     (UNSPEC_SMUL_HIGHPART \"smulh\")\n-\t\t\t     (UNSPEC_UMUL_HIGHPART \"umulh\")\n-\t\t\t     (UNSPEC_ASHIFT_WIDE \"lsl\")\n+(define_int_attr sve_int_op [(UNSPEC_ADCLB \"adclb\")\n+\t\t\t     (UNSPEC_ADCLT \"adclt\")\n+\t\t\t     (UNSPEC_ADDHNB \"addhnb\")\n+\t\t\t     (UNSPEC_ADDHNT \"addhnt\")\n+\t\t\t     (UNSPEC_ADDP \"addp\")\n+\t\t\t     (UNSPEC_ANDV \"andv\")\n \t\t\t     (UNSPEC_ASHIFTRT_WIDE \"asr\")\n+\t\t\t     (UNSPEC_ASHIFT_WIDE \"lsl\")\n+\t\t\t     (UNSPEC_ASRD \"asrd\")\n+\t\t\t     (UNSPEC_BDEP \"bdep\")\n+\t\t\t     (UNSPEC_BEXT \"bext\")\n+\t\t\t     (UNSPEC_BGRP \"bgrp\")\n+\t\t\t     (UNSPEC_CADD90 \"cadd\")\n+\t\t\t     (UNSPEC_CADD270 \"cadd\")\n+\t\t\t     (UNSPEC_CDOT \"cdot\")\n+\t\t\t     (UNSPEC_CDOT90 \"cdot\")\n+\t\t\t     (UNSPEC_CDOT180 \"cdot\")\n+\t\t\t     (UNSPEC_CDOT270 \"cdot\")\n+\t\t\t     (UNSPEC_CMLA \"cmla\")\n+\t\t\t     (UNSPEC_CMLA90 \"cmla\")\n+\t\t\t     (UNSPEC_CMLA180 \"cmla\")\n+\t\t\t     (UNSPEC_CMLA270 \"cmla\")\n+\t\t\t     (UNSPEC_EORBT \"eorbt\")\n+\t\t\t     (UNSPEC_EORTB \"eortb\")\n+\t\t\t     (UNSPEC_IORV \"orv\")\n \t\t\t     (UNSPEC_LSHIFTRT_WIDE \"lsr\")\n+\t\t\t     (UNSPEC_MATCH \"match\")\n+\t\t\t     (UNSPEC_NMATCH \"nmatch\")\n+\t\t\t     (UNSPEC_PMULLB \"pmullb\")\n+\t\t\t     (UNSPEC_PMULLB_PAIR \"pmullb\")\n+\t\t\t     (UNSPEC_PMULLT \"pmullt\")\n+\t\t\t     (UNSPEC_PMULLT_PAIR \"pmullt\")\n+\t\t\t     (UNSPEC_RADDHNB \"raddhnb\")\n+\t\t\t     (UNSPEC_RADDHNT \"raddhnt\")\n \t\t\t     (UNSPEC_RBIT \"rbit\")\n \t\t\t     (UNSPEC_REVB \"revb\")\n \t\t\t     (UNSPEC_REVH \"revh\")\n-\t\t\t     (UNSPEC_REVW \"revw\")])\n+\t\t\t     (UNSPEC_REVW \"revw\")\n+\t\t\t     (UNSPEC_RSHRNB \"rshrnb\")\n+\t\t\t     (UNSPEC_RSHRNT \"rshrnt\")\n+\t\t\t     (UNSPEC_RSQRTE \"ursqrte\")\n+\t\t\t     (UNSPEC_RSUBHNB \"rsubhnb\")\n+\t\t\t     (UNSPEC_RSUBHNT \"rsubhnt\")\n+\t\t\t     (UNSPEC_SABDLB \"sabdlb\")\n+\t\t\t     (UNSPEC_SABDLT \"sabdlt\")\n+\t\t\t     (UNSPEC_SADALP \"sadalp\")\n+\t\t\t     (UNSPEC_SADDLB \"saddlb\")\n+\t\t\t     (UNSPEC_SADDLBT \"saddlbt\")\n+\t\t\t     (UNSPEC_SADDLT \"saddlt\")\n+\t\t\t     (UNSPEC_SADDWB \"saddwb\")\n+\t\t\t     (UNSPEC_SADDWT \"saddwt\")\n+\t\t\t     (UNSPEC_SBCLB \"sbclb\")\n+\t\t\t     (UNSPEC_SBCLT \"sbclt\")\n+\t\t\t     (UNSPEC_SHADD \"shadd\")\n+\t\t\t     (UNSPEC_SHRNB \"shrnb\")\n+\t\t\t     (UNSPEC_SHRNT \"shrnt\")\n+\t\t\t     (UNSPEC_SHSUB \"shsub\")\n+\t\t\t     (UNSPEC_SLI \"sli\")\n+\t\t\t     (UNSPEC_SMAXP \"smaxp\")\n+\t\t\t     (UNSPEC_SMAXV \"smaxv\")\n+\t\t\t     (UNSPEC_SMINP \"sminp\")\n+\t\t\t     (UNSPEC_SMINV \"sminv\")\n+\t\t\t     (UNSPEC_SMUL_HIGHPART \"smulh\")\n+\t\t\t     (UNSPEC_SMULLB \"smullb\")\n+\t\t\t     (UNSPEC_SMULLT \"smullt\")\n+\t\t\t     (UNSPEC_SQCADD90 \"sqcadd\")\n+\t\t\t     (UNSPEC_SQCADD270 \"sqcadd\")\n+\t\t\t     (UNSPEC_SQDMULH \"sqdmulh\")\n+\t\t\t     (UNSPEC_SQDMULLB \"sqdmullb\")\n+\t\t\t     (UNSPEC_SQDMULLBT \"sqdmullbt\")\n+\t\t\t     (UNSPEC_SQDMULLT \"sqdmullt\")\n+\t\t\t     (UNSPEC_SQRDCMLAH \"sqrdcmlah\")\n+\t\t\t     (UNSPEC_SQRDCMLAH90 \"sqrdcmlah\")\n+\t\t\t     (UNSPEC_SQRDCMLAH180 \"sqrdcmlah\")\n+\t\t\t     (UNSPEC_SQRDCMLAH270 \"sqrdcmlah\")\n+\t\t\t     (UNSPEC_SQRDMLAH \"sqrdmlah\")\n+\t\t\t     (UNSPEC_SQRDMLSH \"sqrdmlsh\")\n+\t\t\t     (UNSPEC_SQRDMULH \"sqrdmulh\")\n+\t\t\t     (UNSPEC_SQRSHL \"sqrshl\")\n+\t\t\t     (UNSPEC_SQRSHRNB \"sqrshrnb\")\n+\t\t\t     (UNSPEC_SQRSHRNT \"sqrshrnt\")\n+\t\t\t     (UNSPEC_SQRSHRUNB \"sqrshrunb\")\n+\t\t\t     (UNSPEC_SQRSHRUNT \"sqrshrunt\")\n+\t\t\t     (UNSPEC_SQSHL \"sqshl\")\n+\t\t\t     (UNSPEC_SQSHLU \"sqshlu\")\n+\t\t\t     (UNSPEC_SQSHRNB \"sqshrnb\")\n+\t\t\t     (UNSPEC_SQSHRNT \"sqshrnt\")\n+\t\t\t     (UNSPEC_SQSHRUNB \"sqshrunb\")\n+\t\t\t     (UNSPEC_SQSHRUNT \"sqshrunt\")\n+\t\t\t     (UNSPEC_SQXTNB \"sqxtnb\")\n+\t\t\t     (UNSPEC_SQXTNT \"sqxtnt\")\n+\t\t\t     (UNSPEC_SQXTUNB \"sqxtunb\")\n+\t\t\t     (UNSPEC_SQXTUNT \"sqxtunt\")\n+\t\t\t     (UNSPEC_SRHADD \"srhadd\")\n+\t\t\t     (UNSPEC_SRI \"sri\")\n+\t\t\t     (UNSPEC_SRSHL \"srshl\")\n+\t\t\t     (UNSPEC_SRSHR \"srshr\")\n+\t\t\t     (UNSPEC_SSHLLB \"sshllb\")\n+\t\t\t     (UNSPEC_SSHLLT \"sshllt\")\n+\t\t\t     (UNSPEC_SSUBLB \"ssublb\")\n+\t\t\t     (UNSPEC_SSUBLBT \"ssublbt\")\n+\t\t\t     (UNSPEC_SSUBLT \"ssublt\")\n+\t\t\t     (UNSPEC_SSUBLTB \"ssubltb\")\n+\t\t\t     (UNSPEC_SSUBWB \"ssubwb\")\n+\t\t\t     (UNSPEC_SSUBWT \"ssubwt\")\n+\t\t\t     (UNSPEC_SUBHNB \"subhnb\")\n+\t\t\t     (UNSPEC_SUBHNT \"subhnt\")\n+\t\t\t     (UNSPEC_SUQADD \"suqadd\")\n+\t\t\t     (UNSPEC_UABDLB \"uabdlb\")\n+\t\t\t     (UNSPEC_UABDLT \"uabdlt\")\n+\t\t\t     (UNSPEC_UADALP \"uadalp\")\n+\t\t\t     (UNSPEC_UADDLB \"uaddlb\")\n+\t\t\t     (UNSPEC_UADDLT \"uaddlt\")\n+\t\t\t     (UNSPEC_UADDWB \"uaddwb\")\n+\t\t\t     (UNSPEC_UADDWT \"uaddwt\")\n+\t\t\t     (UNSPEC_UHADD \"uhadd\")\n+\t\t\t     (UNSPEC_UHSUB \"uhsub\")\n+\t\t\t     (UNSPEC_UMAXP \"umaxp\")\n+\t\t\t     (UNSPEC_UMAXV \"umaxv\")\n+\t\t\t     (UNSPEC_UMINP \"uminp\")\n+\t\t\t     (UNSPEC_UMINV \"uminv\")\n+\t\t\t     (UNSPEC_UMUL_HIGHPART \"umulh\")\n+\t\t\t     (UNSPEC_UMULLB \"umullb\")\n+\t\t\t     (UNSPEC_UMULLT \"umullt\")\n+\t\t\t     (UNSPEC_UQRSHL \"uqrshl\")\n+\t\t\t     (UNSPEC_UQRSHRNB \"uqrshrnb\")\n+\t\t\t     (UNSPEC_UQRSHRNT \"uqrshrnt\")\n+\t\t\t     (UNSPEC_UQSHL \"uqshl\")\n+\t\t\t     (UNSPEC_UQSHRNB \"uqshrnb\")\n+\t\t\t     (UNSPEC_UQSHRNT \"uqshrnt\")\n+\t\t\t     (UNSPEC_UQXTNB \"uqxtnb\")\n+\t\t\t     (UNSPEC_UQXTNT \"uqxtnt\")\n+\t\t\t     (UNSPEC_URECPE \"urecpe\")\n+\t\t\t     (UNSPEC_URHADD \"urhadd\")\n+\t\t\t     (UNSPEC_URSHL \"urshl\")\n+\t\t\t     (UNSPEC_URSHR \"urshr\")\n+\t\t\t     (UNSPEC_USHLLB \"ushllb\")\n+\t\t\t     (UNSPEC_USHLLT \"ushllt\")\n+\t\t\t     (UNSPEC_USQADD \"usqadd\")\n+\t\t\t     (UNSPEC_USUBLB \"usublb\")\n+\t\t\t     (UNSPEC_USUBLT \"usublt\")\n+\t\t\t     (UNSPEC_USUBWB \"usubwb\")\n+\t\t\t     (UNSPEC_USUBWT \"usubwt\")\n+\t\t\t     (UNSPEC_XORV \"eorv\")])\n+\n+(define_int_attr sve_int_op_rev [(UNSPEC_SHADD \"shadd\")\n+\t\t\t\t (UNSPEC_SHSUB \"shsubr\")\n+\t\t\t\t (UNSPEC_SQRSHL \"sqrshlr\")\n+\t\t\t\t (UNSPEC_SRHADD \"srhadd\")\n+\t\t\t\t (UNSPEC_SRSHL \"srshlr\")\n+\t\t\t\t (UNSPEC_UHADD \"uhadd\")\n+\t\t\t\t (UNSPEC_UHSUB \"uhsubr\")\n+\t\t\t\t (UNSPEC_UQRSHL \"uqrshlr\")\n+\t\t\t\t (UNSPEC_URHADD \"urhadd\")\n+\t\t\t\t (UNSPEC_URSHL \"urshlr\")])\n+\n+(define_int_attr sve_int_add_op [(UNSPEC_SABDLB \"sabalb\")\n+\t\t\t\t (UNSPEC_SABDLT \"sabalt\")\n+\t\t\t\t (UNSPEC_SMULLB \"smlalb\")\n+\t\t\t\t (UNSPEC_SMULLT \"smlalt\")\n+\t\t\t\t (UNSPEC_UABDLB \"uabalb\")\n+\t\t\t\t (UNSPEC_UABDLT \"uabalt\")\n+\t\t\t\t (UNSPEC_UMULLB \"umlalb\")\n+\t\t\t\t (UNSPEC_UMULLT \"umlalt\")])\n+\n+(define_int_attr sve_int_qadd_op [(UNSPEC_SQDMULLB \"sqdmlalb\")\n+\t\t\t\t  (UNSPEC_SQDMULLBT \"sqdmlalbt\")\n+\t\t\t\t  (UNSPEC_SQDMULLT \"sqdmlalt\")])\n+\n+(define_int_attr sve_int_sub_op [(UNSPEC_SMULLB \"smlslb\")\n+\t\t\t\t (UNSPEC_SMULLT \"smlslt\")\n+\t\t\t\t (UNSPEC_UMULLB \"umlslb\")\n+\t\t\t\t (UNSPEC_UMULLT \"umlslt\")])\n+\n+(define_int_attr sve_int_qsub_op [(UNSPEC_SQDMULLB \"sqdmlslb\")\n+\t\t\t\t  (UNSPEC_SQDMULLBT \"sqdmlslbt\")\n+\t\t\t\t  (UNSPEC_SQDMULLT \"sqdmlslt\")])\n \n (define_int_attr sve_fp_op [(UNSPEC_FRECPE \"frecpe\")\n \t\t\t    (UNSPEC_FRECPS \"frecps\")\n \t\t\t    (UNSPEC_RSQRTE \"frsqrte\")\n \t\t\t    (UNSPEC_RSQRTS \"frsqrts\")\n+\t\t\t    (UNSPEC_FADDP \"faddp\")\n \t\t\t    (UNSPEC_FADDV \"faddv\")\n+\t\t\t    (UNSPEC_FMAXNMP \"fmaxnmp\")\n \t\t\t    (UNSPEC_FMAXNMV \"fmaxnmv\")\n+\t\t\t    (UNSPEC_FMAXP \"fmaxp\")\n \t\t\t    (UNSPEC_FMAXV \"fmaxv\")\n+\t\t\t    (UNSPEC_FMINNMP \"fminnmp\")\n \t\t\t    (UNSPEC_FMINNMV \"fminnmv\")\n+\t\t\t    (UNSPEC_FMINP \"fminp\")\n \t\t\t    (UNSPEC_FMINV \"fminv\")\n \t\t\t    (UNSPEC_FMLA \"fmla\")\n+\t\t\t    (UNSPEC_FMLALB \"fmlalb\")\n+\t\t\t    (UNSPEC_FMLALT \"fmlalt\")\n \t\t\t    (UNSPEC_FMLS \"fmls\")\n+\t\t\t    (UNSPEC_FMLSLB \"fmlslb\")\n+\t\t\t    (UNSPEC_FMLSLT \"fmlslt\")\n \t\t\t    (UNSPEC_FEXPA \"fexpa\")\n \t\t\t    (UNSPEC_FTSMUL \"ftsmul\")\n \t\t\t    (UNSPEC_FTSSEL \"ftssel\")\n \t\t\t    (UNSPEC_COND_FABS \"fabs\")\n \t\t\t    (UNSPEC_COND_FADD \"fadd\")\n+\t\t\t    (UNSPEC_COND_FCVTLT \"fcvtlt\")\n+\t\t\t    (UNSPEC_COND_FCVTX \"fcvtx\")\n \t\t\t    (UNSPEC_COND_FDIV \"fdiv\")\n+\t\t\t    (UNSPEC_COND_FLOGB \"flogb\")\n \t\t\t    (UNSPEC_COND_FMAX \"fmax\")\n \t\t\t    (UNSPEC_COND_FMAXNM \"fmaxnm\")\n \t\t\t    (UNSPEC_COND_FMIN \"fmin\")\n@@ -2574,12 +3167,28 @@\n \t\t\t\t(UNSPEC_COND_FMULX \"fmulx\")\n \t\t\t\t(UNSPEC_COND_FSUB \"fsubr\")])\n \n-(define_int_attr rot [(UNSPEC_FCADD90 \"90\")\n+(define_int_attr rot [(UNSPEC_CADD90 \"90\")\n+\t\t      (UNSPEC_CADD270 \"270\")\n+\t\t      (UNSPEC_CDOT \"0\")\n+\t\t      (UNSPEC_CDOT90 \"90\")\n+\t\t      (UNSPEC_CDOT180 \"180\")\n+\t\t      (UNSPEC_CDOT270 \"270\")\n+\t\t      (UNSPEC_CMLA \"0\")\n+\t\t      (UNSPEC_CMLA90 \"90\")\n+\t\t      (UNSPEC_CMLA180 \"180\")\n+\t\t      (UNSPEC_CMLA270 \"270\")\n+\t\t      (UNSPEC_FCADD90 \"90\")\n \t\t      (UNSPEC_FCADD270 \"270\")\n \t\t      (UNSPEC_FCMLA \"0\")\n \t\t      (UNSPEC_FCMLA90 \"90\")\n \t\t      (UNSPEC_FCMLA180 \"180\")\n \t\t      (UNSPEC_FCMLA270 \"270\")\n+\t\t      (UNSPEC_SQCADD90 \"90\")\n+\t\t      (UNSPEC_SQCADD270 \"270\")\n+\t\t      (UNSPEC_SQRDCMLAH \"0\")\n+\t\t      (UNSPEC_SQRDCMLAH90 \"90\")\n+\t\t      (UNSPEC_SQRDCMLAH180 \"180\")\n+\t\t      (UNSPEC_SQRDCMLAH270 \"270\")\n \t\t      (UNSPEC_COND_FCADD90 \"90\")\n \t\t      (UNSPEC_COND_FCADD270 \"270\")\n \t\t      (UNSPEC_COND_FCMLA \"0\")"}, {"sha": "11d20b7be14001bfbaf84adc6bc95ff6d8b309c7", "filename": "gcc/config/aarch64/t-aarch64", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Fconfig%2Faarch64%2Ft-aarch64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Fconfig%2Faarch64%2Ft-aarch64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Ft-aarch64?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -46,6 +46,8 @@ aarch64-builtins.o: $(srcdir)/config/aarch64/aarch64-builtins.c $(CONFIG_H) \\\n \n aarch64-sve-builtins.o: $(srcdir)/config/aarch64/aarch64-sve-builtins.cc \\\n   $(srcdir)/config/aarch64/aarch64-sve-builtins.def \\\n+  $(srcdir)/config/aarch64/aarch64-sve-builtins-base.def \\\n+  $(srcdir)/config/aarch64/aarch64-sve-builtins-sve2.def \\\n   $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(RTL_H) \\\n   $(TM_P_H) memmodel.h insn-codes.h $(OPTABS_H) $(RECOG_H) $(DIAGNOSTIC_H) \\\n   $(EXPR_H) $(BASIC_BLOCK_H) $(FUNCTION_H) fold-const.h $(GIMPLE_H) \\\n@@ -54,7 +56,8 @@ aarch64-sve-builtins.o: $(srcdir)/config/aarch64/aarch64-sve-builtins.cc \\\n   stringpool.h \\\n   $(srcdir)/config/aarch64/aarch64-sve-builtins.h \\\n   $(srcdir)/config/aarch64/aarch64-sve-builtins-shapes.h \\\n-  $(srcdir)/config/aarch64/aarch64-sve-builtins-base.h\n+  $(srcdir)/config/aarch64/aarch64-sve-builtins-base.h \\\n+  $(srcdir)/config/aarch64/aarch64-sve-builtins-sve2.h\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t\t$(srcdir)/config/aarch64/aarch64-sve-builtins.cc\n \n@@ -81,6 +84,20 @@ aarch64-sve-builtins-base.o: \\\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t\t$(srcdir)/config/aarch64/aarch64-sve-builtins-base.cc\n \n+aarch64-sve-builtins-sve2.o: \\\n+  $(srcdir)/config/aarch64/aarch64-sve-builtins-sve2.cc \\\n+  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(RTL_H) \\\n+  $(TM_P_H) memmodel.h insn-codes.h $(OPTABS_H) $(RECOG_H) \\\n+  $(EXPR_H) $(BASIC_BLOCK_H) $(FUNCTION_H) fold-const.h $(GIMPLE_H) \\\n+  gimple-iterator.h gimplify.h explow.h $(EMIT_RTL_H) tree-vector-builder.h \\\n+  rtx-vector-builder.h vec-perm-indices.h \\\n+  $(srcdir)/config/aarch64/aarch64-sve-builtins.h \\\n+  $(srcdir)/config/aarch64/aarch64-sve-builtins-shapes.h \\\n+  $(srcdir)/config/aarch64/aarch64-sve-builtins-sve2.h \\\n+  $(srcdir)/config/aarch64/aarch64-sve-builtins-functions.h\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n+\t\t$(srcdir)/config/aarch64/aarch64-sve-builtins-sve2.cc\n+\n aarch64-builtin-iterators.h: $(srcdir)/config/aarch64/geniterators.sh \\\n \t$(srcdir)/config/aarch64/iterators.md\n \t$(SHELL) $(srcdir)/config/aarch64/geniterators.sh \\"}, {"sha": "0cf4394c64017bc276dbe0aba951cd7ad09e7cd9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -1,3 +1,59 @@\n+2020-01-09  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* g++.target/aarch64/sve/acle/general-c++/mul_lane_1.c: New test.\n+\t* g++.target/aarch64/sve2/acle: New directory.\n+\t* gcc.target/aarch64/pragma_cpp_predefs_3.c: New test.\n+\t* gcc.target/aarch64/sve/acle/asm/test_sve_acle.h (TEST_TYPE_CHANGE_Z)\n+\t(TEST_DUAL_ZD, TEST_TYPE_CHANGE_ZX, TEST_TBL2, TEST_TBL2_REV): New\n+\tmacros.\n+\t* gcc.target/aarch64/sve/acle/general-c/binary_lane_1.c: Do not\n+\texpect an error saying that the function has no f32 form, but instead\n+\texpect an error about SVE2 being required if the current target\n+\tdoesn't support SVE2.\n+\t* gcc.target/aarch64/sve/acle/general-c/ternary_lane_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/general-c/ternary_lane_rotate_1.c Likewise.\n+\t* gcc.target/aarch64/sve/acle/general-c/binary_long_lane_1.c,\n+\t* gcc.target/aarch64/sve/acle/general-c/binary_long_opt_n_1.c,\n+\t* gcc.target/aarch64/sve/acle/general-c/binary_narrowb_opt_n_1.c,\n+\t* gcc.target/aarch64/sve/acle/general-c/binary_narrowt_opt_n_1.c,\n+\t* gcc.target/aarch64/sve/acle/general-c/binary_to_uint_1.c,\n+\t* gcc.target/aarch64/sve/acle/general-c/binary_wide_1.c,\n+\t* gcc.target/aarch64/sve/acle/general-c/binary_wide_opt_n_1.c,\n+\t* gcc.target/aarch64/sve/acle/general-c/compare_1.c,\n+\t* gcc.target/aarch64/sve/acle/general-c/compare_ptr_1.c,\n+\t* gcc.target/aarch64/sve/acle/general-c/load_ext_gather_index_restricted_1.c,\n+\t* gcc.target/aarch64/sve/acle/general-c/load_ext_gather_offset_restricted_1.c,\n+\t* gcc.target/aarch64/sve/acle/general-c/load_ext_gather_offset_restricted_2.c,\n+\t* gcc.target/aarch64/sve/acle/general-c/load_ext_gather_offset_restricted_3.c,\n+\t* gcc.target/aarch64/sve/acle/general-c/load_ext_gather_offset_restricted_4.c,\n+\t* gcc.target/aarch64/sve/acle/general-c/load_gather_sv_restricted_1.c,\n+\t* gcc.target/aarch64/sve/acle/general-c/load_gather_sv_restricted_2.c,\n+\t* gcc.target/aarch64/sve/acle/general-c/mul_lane_1.c,\n+\t* gcc.target/aarch64/sve/acle/general-c/shift_left_imm_long_1.c,\n+\t* gcc.target/aarch64/sve/acle/general-c/shift_left_imm_to_uint_1.c,\n+\t* gcc.target/aarch64/sve/acle/general-c/shift_left_imm_to_uint_2.c,\n+\t* gcc.target/aarch64/sve/acle/general-c/shift_right_imm_narrowb_1.c,\n+\t* gcc.target/aarch64/sve/acle/general-c/shift_right_imm_narrowb_to_uint_1.c,\n+\t* gcc.target/aarch64/sve/acle/general-c/shift_right_imm_narrowt_1.c,\n+\t* gcc.target/aarch64/sve/acle/general-c/shift_right_imm_narrowt_to_uint_1.c,\n+\t* gcc.target/aarch64/sve/acle/general-c/store_scatter_index_restricted_1.c,\n+\t* gcc.target/aarch64/sve/acle/general-c/store_scatter_offset_restricted_1.c,\n+\t* gcc.target/aarch64/sve/acle/general-c/tbl_tuple_1.c,\n+\t* gcc.target/aarch64/sve/acle/general-c/ternary_long_lane_1.c,\n+\t* gcc.target/aarch64/sve/acle/general-c/ternary_long_opt_n_1.c,\n+\t* gcc.target/aarch64/sve/acle/general-c/ternary_qq_lane_rotate_1.c,\n+\t* gcc.target/aarch64/sve/acle/general-c/ternary_qq_rotate_1.c,\n+\t* gcc.target/aarch64/sve/acle/general-c/ternary_shift_right_imm_1.c,\n+\t* gcc.target/aarch64/sve/acle/general-c/ternary_uint_1.c,\n+\t* gcc.target/aarch64/sve/acle/general-c/unary_convert_narrowt_1.c,\n+\t* gcc.target/aarch64/sve/acle/general-c/unary_narrowb_1.c,\n+\t* gcc.target/aarch64/sve/acle/general-c/unary_narrowb_to_uint_1.c,\n+\t* gcc.target/aarch64/sve/acle/general-c/unary_narrowt_1.c,\n+\t* gcc.target/aarch64/sve/acle/general-c/unary_narrowt_to_uint_1.c,\n+\t* gcc.target/aarch64/sve/acle/general-c/unary_to_int_1.c: New tests.\n+\t* gcc.target/aarch64/sve2/bcax_1.c: Likewise.\n+\t* gcc.target/aarch64/sve2/acle: New directory.\n+\n 2020-01-09  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/sve/acle/general-c/unary_count_1.c: Rename to..."}, {"sha": "ea4d01e54b19c78774bff96aeb9a6e2e5170958f", "filename": "gcc/testsuite/g++.target/aarch64/sve/acle/general-c++/mul_lane_1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2B%2B%2Fmul_lane_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2B%2B%2Fmul_lane_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2B%2B%2Fmul_lane_1.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,32 @@\n+#include <arm_sve.h>\n+\n+#pragma GCC target (\"arch=armv8.2-a+sve2\")\n+\n+void\n+f2 (svint8_t s8, svuint8_t u8,\n+    svint16_t s16, svuint16_t u16, svfloat16_t f16,\n+    svint32_t s32, svuint32_t u32, svfloat32_t f32,\n+    svint64_t s64, svuint64_t u64, svfloat64_t f64)\n+{\n+  s8 = svmul_lane (s8, s8, 1); /* { dg-error {no matching function} } */\n+  u8 = svmul_lane (u8, u8, 1); /* { dg-error {no matching function} } */\n+  s16 = svmul_lane (s16, s16, 1);\n+  u16 = svmul_lane (u16, u16, 1);\n+  f16 = svmul_lane (f16, f16, 1);\n+  s32 = svmul_lane (s32, s32, 1);\n+  u32 = svmul_lane (u32, u32, 1);\n+  f32 = svmul_lane (f32, f32, 1);\n+  s64 = svmul_lane (s64, s64, 1);\n+  u64 = svmul_lane (u64, u64, 1);\n+  f64 = svmul_lane (f64, f64, 1);\n+}\n+\n+#pragma GCC target (\"arch=armv8-a+sve\")\n+\n+void\n+f1 (svint8_t s8, svuint8_t u8, svint16_t s16)\n+{\n+  s8 = svmul_lane (s8, s8, 1); /* { dg-error {no matching function} } */\n+  u8 = svmul_lane (u8, u8, 1); /* { dg-error {no matching function} } */\n+  s16 = svmul_lane (s16, s16, 1); /* { dg-error {ACLE function 'svint16_t svmul_lane[^']*' requires ISA extension 'sve2'} } */\n+}"}, {"sha": "304cdad8ea49e7df7b6e14598005de3ccd24bcc8", "filename": "gcc/testsuite/g++.target/aarch64/sve2/acle/aarch64-sve2-acle-asm.exp", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve2%2Facle%2Faarch64-sve2-acle-asm.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve2%2Facle%2Faarch64-sve2-acle-asm.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve2%2Facle%2Faarch64-sve2-acle-asm.exp?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,85 @@\n+#  Assembly-based regression-test driver for the SVE ACLE\n+#  Copyright (C) 2009-2020 Free Software Foundation, Inc.\n+#\n+#  This file is part of GCC.\n+#\n+#  GCC is free software; you can redistribute it and/or modify it\n+#  under the terms of the GNU General Public License as published by\n+#  the Free Software Foundation; either version 3, or (at your option)\n+#  any later version.\n+#\n+#  GCC is distributed in the hope that it will be useful, but\n+#  WITHOUT ANY WARRANTY; without even the implied warranty of\n+#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+#  General Public License for more details.\n+#\n+#  You should have received a copy of the GNU General Public License\n+#  along with GCC; see the file COPYING3.  If not see\n+#  <http://www.gnu.org/licenses/>.  */\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Exit immediately if this isn't an AArch64 target.\n+if { ![istarget aarch64*-*-*] } {\n+    return\n+}\n+\n+# Load support procs.\n+load_lib g++-dg.exp\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Force SVE if we're not testing it already.\n+if { [check_effective_target_aarch64_sve2] } {\n+    set sve2_flags \"\"\n+} else {\n+    set sve2_flags \"-march=armv8.5-a+sve2\"\n+}\n+\n+set gcc_subdir [string replace $subdir 0 2 gcc]\n+lappend extra_flags \"-fno-ipa-icf\" \"-I$srcdir/$gcc_subdir/../../sve/acle/asm\"\n+\n+global gcc_runtest_parallelize_limit_minor\n+if { [info exists gcc_runtest_parallelize_limit_minor] } {\n+    set old_limit_minor $gcc_runtest_parallelize_limit_minor\n+    set gcc_runtest_parallelize_limit_minor 1\n+}\n+\n+torture-init\n+set-torture-options {\n+    \"-std=c++98 -O0 -g\"\n+    \"-std=c++98 -O1 -g\"\n+    \"-std=c++11 -O2 -g\"\n+    \"-std=c++14 -O3 -g\"\n+    \"-std=c++17 -Og -g\"\n+    \"-std=c++2a -Os -g\"\n+    \"-std=gnu++98 -O2 -fno-schedule-insns -DCHECK_ASM --save-temps\"\n+    \"-std=gnu++11 -Ofast -g\"\n+    \"-std=gnu++17 -O3 -g\"\n+    \"-std=gnu++2a -O0 -g\"\n+} {\n+    \"-DTEST_FULL\"\n+    \"-DTEST_OVERLOADS\"\n+}\n+\n+# Main loop.\n+set files [glob -nocomplain $srcdir/$gcc_subdir/asm/*.c]\n+set save-dg-do-what-default ${dg-do-what-default}\n+if { [check_effective_target_aarch64_asm_sve_ok]\n+     && [check_effective_target_aarch64_variant_pcs] } {\n+    set dg-do-what-default assemble\n+} else {\n+    set dg-do-what-default compile\n+}\n+gcc-dg-runtest [lsort $files] \"\" \"$sve2_flags $extra_flags\"\n+set dg-do-what-default ${save-dg-do-what-default}\n+\n+torture-finish\n+\n+if { [info exists gcc_runtest_parallelize_limit_minor] } {\n+    set gcc_runtest_parallelize_limit_minor $old_limit_minor\n+}\n+\n+# All done.\n+dg-finish"}, {"sha": "34aa6e16bcc494acf2efe62e769a8c8bd08b967b", "filename": "gcc/testsuite/gcc.target/aarch64/pragma_cpp_predefs_3.c", "status": "added", "additions": 221, "deletions": 0, "changes": 221, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpragma_cpp_predefs_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpragma_cpp_predefs_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpragma_cpp_predefs_3.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,221 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8-a\")\n+\n+#ifdef __ARM_FEATURE_SVE\n+#error \"__ARM_FEATURE_SVE is defined but should not be!\"\n+#endif\n+\n+#ifdef __ARM_FEATURE_SVE2\n+#error \"__ARM_FEATURE_SVE2 is defined but should not be!\"\n+#endif\n+\n+#ifdef __ARM_FEATURE_SVE2_AES\n+#error \"__ARM_FEATURE_SVE2_AES is defined but should not be!\"\n+#endif\n+\n+#ifdef __ARM_FEATURE_SVE2_BITPERM\n+#error \"__ARM_FEATURE_SVE2_BITPERM is defined but should not be!\"\n+#endif\n+\n+#ifdef __ARM_FEATURE_SVE2_SHA3\n+#error \"__ARM_FEATURE_SVE2_SHA3 is defined but should not be!\"\n+#endif\n+\n+#ifdef __ARM_FEATURE_SVE2_SM4\n+#error \"__ARM_FEATURE_SVE2_SM4 is defined but should not be!\"\n+#endif\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8.2-a+sve\")\n+\n+#ifndef __ARM_FEATURE_SVE\n+#error \"__ARM_FEATURE_SVE is not defined but should be!\"\n+#endif\n+\n+#ifdef __ARM_FEATURE_SVE2\n+#error \"__ARM_FEATURE_SVE2 is defined but should not be!\"\n+#endif\n+\n+#ifdef __ARM_FEATURE_SVE2_AES\n+#error \"__ARM_FEATURE_SVE2_AES is defined but should not be!\"\n+#endif\n+\n+#ifdef __ARM_FEATURE_SVE2_BITPERM\n+#error \"__ARM_FEATURE_SVE2_BITPERM is defined but should not be!\"\n+#endif\n+\n+#ifdef __ARM_FEATURE_SVE2_SHA3\n+#error \"__ARM_FEATURE_SVE2_SHA3 is defined but should not be!\"\n+#endif\n+\n+#ifdef __ARM_FEATURE_SVE2_SM4\n+#error \"__ARM_FEATURE_SVE2_SM4 is defined but should not be!\"\n+#endif\n+\n+#pragma GCC pop_options\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8.5-a+sve2\")\n+\n+#ifndef __ARM_FEATURE_SVE\n+#error \"__ARM_FEATURE_SVE is not defined but should be!\"\n+#endif\n+\n+#ifndef __ARM_FEATURE_SVE2\n+#error \"__ARM_FEATURE_SVE2 is not defined but should be!\"\n+#endif\n+\n+#ifdef __ARM_FEATURE_SVE2_AES\n+#error \"__ARM_FEATURE_SVE2_AES is defined but should not be!\"\n+#endif\n+\n+#ifdef __ARM_FEATURE_SVE2_BITPERM\n+#error \"__ARM_FEATURE_SVE2_BITPERM is defined but should not be!\"\n+#endif\n+\n+#ifdef __ARM_FEATURE_SVE2_SHA3\n+#error \"__ARM_FEATURE_SVE2_SHA3 is defined but should not be!\"\n+#endif\n+\n+#ifdef __ARM_FEATURE_SVE2_SM4\n+#error \"__ARM_FEATURE_SVE2_SM4 is defined but should not be!\"\n+#endif\n+\n+#pragma GCC pop_options\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8.5-a+sve2-aes\")\n+\n+#ifndef __ARM_FEATURE_SVE\n+#error \"__ARM_FEATURE_SVE is not defined but should be!\"\n+#endif\n+\n+#ifndef __ARM_FEATURE_SVE2\n+#error \"__ARM_FEATURE_SVE2 is not defined but should be!\"\n+#endif\n+\n+#ifndef __ARM_FEATURE_AES\n+#error \"__ARM_FEATURE_AES is not defined but should be!\"\n+#endif\n+\n+#ifndef __ARM_FEATURE_SVE2_AES\n+#error \"__ARM_FEATURE_SVE2_AES is not defined but should be!\"\n+#endif\n+\n+#ifdef __ARM_FEATURE_SVE2_BITPERM\n+#error \"__ARM_FEATURE_SVE2_BITPERM is defined but should not be!\"\n+#endif\n+\n+#ifdef __ARM_FEATURE_SVE2_SHA3\n+#error \"__ARM_FEATURE_SVE2_SHA3 is defined but should not be!\"\n+#endif\n+\n+#ifdef __ARM_FEATURE_SVE2_SM4\n+#error \"__ARM_FEATURE_SVE2_SM4 is defined but should not be!\"\n+#endif\n+\n+#pragma GCC pop_options\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8.5-a+sve2-bitperm\")\n+\n+#ifndef __ARM_FEATURE_SVE\n+#error \"__ARM_FEATURE_SVE is not defined but should be!\"\n+#endif\n+\n+#ifndef __ARM_FEATURE_SVE2\n+#error \"__ARM_FEATURE_SVE2 is not defined but should be!\"\n+#endif\n+\n+#ifdef __ARM_FEATURE_SVE2_AES\n+#error \"__ARM_FEATURE_SVE2_AES is defined but should not be!\"\n+#endif\n+\n+#ifndef __ARM_FEATURE_SVE2_BITPERM\n+#error \"__ARM_FEATURE_SVE2_BITPERM is not defined but should be!\"\n+#endif\n+\n+#ifdef __ARM_FEATURE_SVE2_SHA3\n+#error \"__ARM_FEATURE_SVE2_SHA3 is defined but should not be!\"\n+#endif\n+\n+#ifdef __ARM_FEATURE_SVE2_SM4\n+#error \"__ARM_FEATURE_SVE2_SM4 is defined but should not be!\"\n+#endif\n+\n+#pragma GCC pop_options\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8.5-a+sve2-sha3\")\n+\n+#ifndef __ARM_FEATURE_SVE\n+#error \"__ARM_FEATURE_SVE is not defined but should be!\"\n+#endif\n+\n+#ifndef __ARM_FEATURE_SVE2\n+#error \"__ARM_FEATURE_SVE2 is not defined but should be!\"\n+#endif\n+\n+#ifdef __ARM_FEATURE_SVE2_AES\n+#error \"__ARM_FEATURE_SVE2_AES is defined but should not be!\"\n+#endif\n+\n+#ifdef __ARM_FEATURE_SVE2_BITPERM\n+#error \"__ARM_FEATURE_SVE2_BITPERM is defined but should not be!\"\n+#endif\n+\n+#ifndef __ARM_FEATURE_SHA3\n+#error \"__ARM_FEATURE_SHA3 is not defined but should be!\"\n+#endif\n+\n+#ifndef __ARM_FEATURE_SVE2_SHA3\n+#error \"__ARM_FEATURE_SVE2_SHA3 is not defined but should be!\"\n+#endif\n+\n+#ifdef __ARM_FEATURE_SVE2_SM4\n+#error \"__ARM_FEATURE_SVE2_SM4 is defined but should not be!\"\n+#endif\n+\n+#pragma GCC pop_options\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8.5-a+sve2-sm4\")\n+\n+#ifndef __ARM_FEATURE_SVE\n+#error \"__ARM_FEATURE_SVE is not defined but should be!\"\n+#endif\n+\n+#ifndef __ARM_FEATURE_SVE2\n+#error \"__ARM_FEATURE_SVE2 is not defined but should be!\"\n+#endif\n+\n+#ifdef __ARM_FEATURE_SVE2_AES\n+#error \"__ARM_FEATURE_SVE2_AES is defined but should not be!\"\n+#endif\n+\n+#ifdef __ARM_FEATURE_SVE2_BITPERM\n+#error \"__ARM_FEATURE_SVE2_BITPERM is defined but should not be!\"\n+#endif\n+\n+#ifdef __ARM_FEATURE_SVE2_SHA3\n+#error \"__ARM_FEATURE_SVE2_SHA3 is defined but should not be!\"\n+#endif\n+\n+#ifndef __ARM_FEATURE_SM4\n+#error \"__ARM_FEATURE_SM4 is not defined but should be!\"\n+#endif\n+\n+#ifndef __ARM_FEATURE_SVE2_SM4\n+#error \"__ARM_FEATURE_SVE2_SM4 is not defined but should be!\"\n+#endif\n+\n+#pragma GCC pop_options\n+\n+int\n+foo (int a)\n+{\n+  return a;\n+}"}, {"sha": "f088455a44030184ff4118948399911ac3623574", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/test_sve_acle.h", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftest_sve_acle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftest_sve_acle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftest_sve_acle.h?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -79,6 +79,15 @@\n     __asm volatile (\"\" :: \"w\" (z0));\t\t\t\t\\\n   }\n \n+#define TEST_TYPE_CHANGE_Z(NAME, TYPE1, TYPE2, CODE1, CODE2)\t\\\n+  PROTO (NAME, TYPE1, (TYPE2 z0, TYPE2 z1, TYPE2 z2, TYPE2 z3,\t\\\n+\t\t       svbool_t p0, svbool_t p1))\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE1 z0_res;\t\t\t\t\t\t\\\n+    INVOKE (CODE1, CODE2);\t\t\t\t\t\\\n+    return z0_res;\t\t\t\t\t\t\\\n+  }\n+\n #define TEST_UNIFORM_ZX(NAME, ZTYPE, STYPE, CODE1, CODE2)\t\\\n   PROTO (NAME, ZTYPE, (ZTYPE z0, ZTYPE z1, ZTYPE z2, ZTYPE z3,\t\\\n \t\t       svbool_t p0, STYPE x0))\t\t\t\\\n@@ -103,6 +112,16 @@\n     return p0;\t\t\t\t\t\t\t\\\n   }\n \n+#define TEST_DUAL_ZD(NAME, ZTYPE1, ZTYPE2, STYPE, CODE1, CODE2)\t\\\n+  PROTO (NAME, ZTYPE1, (ZTYPE1 z0, ZTYPE1 z1, ZTYPE1 z2,\t\\\n+\t\t\tZTYPE1 z3, ZTYPE2 z4, ZTYPE2 z5,\t\\\n+\t\t\tZTYPE2 z6, STYPE d7, svbool_t p0,\t\\\n+\t\t\tsvbool_t p1))\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    INVOKE (CODE1, CODE2);\t\t\t\t\t\\\n+    return z0;\t\t\t\t\t\t\t\\\n+  }\n+\n #define TEST_DUAL_ZX(NAME, ZTYPE1, ZTYPE2, STYPE, CODE1, CODE2)\t\\\n   PROTO (NAME, ZTYPE1, (ZTYPE1 z0, ZTYPE1 z1, ZTYPE1 z2,\t\\\n \t\t\tZTYPE1 z3, ZTYPE2 z4, ZTYPE2 z5,\t\\\n@@ -113,6 +132,16 @@\n     return z0;\t\t\t\t\t\t\t\\\n   }\n \n+#define TEST_TYPE_CHANGE_ZX(NAME, ZTYPE1, ZTYPE2, STYPE, CODE1, CODE2) \\\n+  PROTO (NAME, ZTYPE1, (ZTYPE2 z0, ZTYPE2 z1, ZTYPE2 z2,\t\\\n+\t\t\tZTYPE2 z3, svbool_t p0, svbool_t p1,\t\\\n+\t\t\tSTYPE x0))\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    ZTYPE1 z0_res;\t\t\t\t\t\t\\\n+    INVOKE (CODE1, CODE2);\t\t\t\t\t\\\n+    return z0_res;\t\t\t\t\t\t\\\n+  }\n+\n #define TEST_LOAD(NAME, ZTYPE, STYPE, CODE1, CODE2)\t\\\n   PROTO (NAME, ZTYPE, (svbool_t p0, const STYPE *x0,\t\\\n \t\t       intptr_t x1))\t\t\t\\\n@@ -327,4 +356,20 @@\n     __asm volatile (\"\" :: \"w\" (z4), \"w\" (z24));\t\t\t\\\n   }\n \n+#define TEST_TBL2(NAME, TTYPE, ZTYPE, UTYPE, CODE1, CODE2)\t\\\n+  PROTO (NAME, ZTYPE, (TTYPE z0, TTYPE z2, UTYPE z4))\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    register ZTYPE z0_res __asm (\"z0\");\t\t\t\t\\\n+    INVOKE (CODE1, CODE2);\t\t\t\t\t\\\n+    return z0_res;\t\t\t\t\t\t\\\n+  }\n+\n+#define TEST_TBL2_REV(NAME, TTYPE, ZTYPE, UTYPE, CODE1, CODE2)\t\\\n+  PROTO (NAME, ZTYPE, (UTYPE z0, TTYPE z1, TTYPE z3))\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    register ZTYPE z0_res __asm (\"z0\");\t\t\t\t\\\n+    INVOKE (CODE1, CODE2);\t\t\t\t\t\\\n+    return z0_res;\t\t\t\t\t\t\\\n+  }\n+\n #endif"}, {"sha": "3913ff63d4f4e9b840f2cd0e5e4b689e078c17b6", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/binary_lane_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fbinary_lane_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fbinary_lane_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fbinary_lane_1.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -9,7 +9,7 @@ f1 (svbool_t pg, svfloat16_t f16, svfloat32_t f32, svfloat64_t f64,\n   svmul_lane (f32, f32); /* { dg-error {too few arguments to function 'svmul_lane'} } */\n   svmul_lane (f32, f32, 0, 0); /* { dg-error {too many arguments to function 'svmul_lane'} } */\n   svmul_lane (pg, pg, 0); /* { dg-error {'svmul_lane' has no form that takes 'svbool_t' arguments} } */\n-  svmul_lane (s32, s32, 0); /* { dg-error {'svmul_lane' has no form that takes 'svint32_t' arguments} } */\n+  svmul_lane (s32, s32, 0); /* { dg-error {ACLE function 'svmul_lane_s32' requires ISA extension 'sve2'} \"\" { xfail aarch64_sve2 } } */\n   svmul_lane (1, f32, 0); /* { dg-error {passing 'int' to argument 1 of 'svmul_lane', which expects an SVE vector type} } */\n   svmul_lane (f32, 1, 0); /* { dg-error {passing 'int' to argument 2 of 'svmul_lane', which expects an SVE vector type} } */\n   svmul_lane (f32, f64, 0); /* { dg-error {passing 'svfloat64_t' to argument 2 of 'svmul_lane', but previous arguments had type 'svfloat32_t'} } */"}, {"sha": "bfe78088b07b33517450e25fc3fd2337ed85c16e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/binary_long_lane_1.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fbinary_long_lane_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fbinary_long_lane_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fbinary_long_lane_1.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do compile } */\n+\n+#include <arm_sve.h>\n+\n+#pragma GCC target (\"arch=armv8.2-a+sve2\")\n+\n+void\n+f1 (svbool_t pg, svint8_t s8, svuint8_t u8, svint16_t s16, svuint16_t u16,\n+    svint32_t s32, svuint32_t u32, svint64_t s64, svuint64_t u64,\n+    svfloat16_t f16, svfloat32_t f32, svfloat64_t f64, int i)\n+{\n+  svmullb_lane (u32, u32); /* { dg-error {too few arguments to function 'svmullb_lane'} } */\n+  svmullb_lane (u32, u32, 0, 0); /* { dg-error {too many arguments to function 'svmullb_lane'} } */\n+  svmullb_lane (pg, pg, 0); /* { dg-error {'svmullb_lane' has no form that takes 'svbool_t' arguments} } */\n+  svmullb_lane (s8, s8, 0); /* { dg-error {'svmullb_lane' has no form that takes 'svint8_t' arguments} } */\n+  svmullb_lane (u8, u8, 0); /* { dg-error {'svmullb_lane' has no form that takes 'svuint8_t' arguments} } */\n+  svmullb_lane (s64, s64, 0); /* { dg-error {'svmullb_lane' has no form that takes 'svint64_t' arguments} } */\n+  svmullb_lane (u64, u64, 0); /* { dg-error {'svmullb_lane' has no form that takes 'svuint64_t' arguments} } */\n+  svmullb_lane (f16, f16, 0); /* { dg-error {'svmullb_lane' has no form that takes 'svfloat16_t' arguments} } */\n+  svmullb_lane (f32, f32, 0); /* { dg-error {'svmullb_lane' has no form that takes 'svfloat32_t' arguments} } */\n+  svmullb_lane (f64, f64, 0); /* { dg-error {'svmullb_lane' has no form that takes 'svfloat64_t' arguments} } */\n+  svmullb_lane (1, u32, 0); /* { dg-error {passing 'int' to argument 1 of 'svmullb_lane', which expects an SVE vector type} } */\n+  svmullb_lane (u32, 1, 0); /* { dg-error {passing 'int' to argument 2 of 'svmullb_lane', which expects an SVE vector type} } */\n+  svmullb_lane (u32, s32, 0); /* { dg-error {passing 'svint32_t' to argument 2 of 'svmullb_lane', but previous arguments had type 'svuint32_t'} } */\n+  svmullb_lane (u32, u32, s32); /* { dg-error {argument 3 of 'svmullb_lane' must be an integer constant expression} } */\n+  svmullb_lane (u32, u32, i); /* { dg-error {argument 3 of 'svmullb_lane' must be an integer constant expression} } */\n+\n+  svmullb_lane (s16, s16, 0);\n+  svmullb_lane (s16, s16, 7);\n+  svmullb_lane (s16, s16, 8); /* { dg-error {passing 8 to argument 3 of 'svmullb_lane', which expects a value in the range \\[0, 7\\]} } */\n+  svmullb_lane (s16, s16, -1); /* { dg-error {passing -1 to argument 3 of 'svmullb_lane', which expects a value in the range \\[0, 7\\]} } */\n+\n+  svmullb_lane (u16, u16, 0);\n+  svmullb_lane (u16, u16, 7);\n+  svmullb_lane (u16, u16, 8); /* { dg-error {passing 8 to argument 3 of 'svmullb_lane', which expects a value in the range \\[0, 7\\]} } */\n+  svmullb_lane (u16, u16, -1); /* { dg-error {passing -1 to argument 3 of 'svmullb_lane', which expects a value in the range \\[0, 7\\]} } */\n+\n+  svmullb_lane (s32, s32, 0);\n+  svmullb_lane (s32, s32, 3);\n+  svmullb_lane (s32, s32, 4); /* { dg-error {passing 4 to argument 3 of 'svmullb_lane', which expects a value in the range \\[0, 3\\]} } */\n+  svmullb_lane (s32, s32, -1); /* { dg-error {passing -1 to argument 3 of 'svmullb_lane', which expects a value in the range \\[0, 3\\]} } */\n+\n+  svmullb_lane (u32, u32, 0);\n+  svmullb_lane (u32, u32, 3);\n+  svmullb_lane (u32, u32, 4); /* { dg-error {passing 4 to argument 3 of 'svmullb_lane', which expects a value in the range \\[0, 3\\]} } */\n+  svmullb_lane (u32, u32, -1); /* { dg-error {passing -1 to argument 3 of 'svmullb_lane', which expects a value in the range \\[0, 3\\]} } */\n+}"}, {"sha": "27893c6fbe393a843d6e6bb61d1c40e673861d37", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/binary_long_opt_n_1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fbinary_long_opt_n_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fbinary_long_opt_n_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fbinary_long_opt_n_1.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+\n+#include <arm_sve.h>\n+\n+#pragma GCC target (\"arch=armv8.2-a+sve2\")\n+\n+void\n+f1 (svbool_t pg, svint8_t s8, svuint8_t u8,\n+    svint16_t s16, svuint16_t u16,\n+    svint32_t s32, svuint32_t u32,\n+    svint64_t s64, svuint64_t u64,\n+    svfloat16_t f16)\n+{\n+  svaddlb (u16); /* { dg-error {too few arguments to function 'svaddlb'} } */\n+  svaddlb (u16, u16, u16); /* { dg-error {too many arguments to function 'svaddlb'} } */\n+  svaddlb (pg, pg); /* { dg-error {'svaddlb' has no form that takes 'svbool_t' arguments} } */\n+  svaddlb (u8, u8);\n+  svaddlb (s8, s8);\n+  svaddlb (u16, u16);\n+  svaddlb (s16, s16);\n+  svaddlb (u32, u32);\n+  svaddlb (s32, s32);\n+  svaddlb (u64, u64); /* { dg-error {'svaddlb' has no form that takes 'svuint64_t' arguments} } */\n+  svaddlb (s64, s64); /* { dg-error {'svaddlb' has no form that takes 'svint64_t' arguments} } */\n+  svaddlb (f16, f16); /* { dg-error {'svaddlb' has no form that takes 'svfloat16_t' arguments} } */\n+  svaddlb (1, u8); /* { dg-error {passing 'int' to argument 1 of 'svaddlb', which expects an SVE vector type} } */\n+  svaddlb (u8, s8); /* { dg-error {passing 'svint8_t' to argument 2 of 'svaddlb', but previous arguments had type 'svuint8_t'} } */\n+  svaddlb (u8, s16); /* { dg-error {passing 'svint16_t' to argument 2 of 'svaddlb', but previous arguments had type 'svuint8_t'} } */\n+  svaddlb (u8, u16); /* { dg-error {passing 'svuint16_t' to argument 2 of 'svaddlb', but previous arguments had type 'svuint8_t'} } */\n+  svaddlb (u16, pg); /* { dg-error {passing 'svbool_t' to argument 2 of 'svaddlb', but previous arguments had type 'svuint16_t'} } */\n+  svaddlb (u8, 0);\n+  svaddlb (u16, 0);\n+  svaddlb (u32, 0);\n+  svaddlb (u64, 0); /* { dg-error {'svaddlb' has no form that takes 'svuint64_t' arguments} } */\n+  svaddlb (pg, 0); /* { dg-error {'svaddlb' has no form that takes 'svbool_t' arguments} } */\n+}"}, {"sha": "920cbd1b0c39b7a088d0277704e9065d8766f99c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/binary_narrowb_opt_n_1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fbinary_narrowb_opt_n_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fbinary_narrowb_opt_n_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fbinary_narrowb_opt_n_1.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+\n+#include <arm_sve.h>\n+\n+#pragma GCC target (\"arch=armv8.2-a+sve2\")\n+\n+void\n+f1 (svbool_t pg, svint8_t s8, svuint8_t u8,\n+    svint16_t s16, svuint16_t u16,\n+    svint32_t s32, svuint32_t u32,\n+    svint64_t s64, svuint64_t u64,\n+    svfloat32_t f32)\n+{\n+  svaddhnb (u16); /* { dg-error {too few arguments to function 'svaddhnb'} } */\n+  svaddhnb (u16, u16, u16); /* { dg-error {too many arguments to function 'svaddhnb'} } */\n+  svaddhnb (pg, pg); /* { dg-error {'svaddhnb' has no form that takes 'svbool_t' arguments} } */\n+  svaddhnb (u8, u8); /* { dg-error {'svaddhnb' has no form that takes 'svuint8_t' arguments} } */\n+  svaddhnb (s8, s8); /* { dg-error {'svaddhnb' has no form that takes 'svint8_t' arguments} } */\n+  svaddhnb (u16, u16);\n+  svaddhnb (s16, s16);\n+  svaddhnb (u32, u32);\n+  svaddhnb (s32, s32);\n+  svaddhnb (u64, u64);\n+  svaddhnb (s64, s64);\n+  svaddhnb (f32, f32); /* { dg-error {'svaddhnb' has no form that takes 'svfloat32_t' arguments} } */\n+  svaddhnb (1, u16); /* { dg-error {passing 'int' to argument 1 of 'svaddhnb', which expects an SVE vector type} } */\n+  svaddhnb (u16, s8); /* { dg-error {passing 'svint8_t' to argument 2 of 'svaddhnb', but previous arguments had type 'svuint16_t'} } */\n+  svaddhnb (u16, s16); /* { dg-error {passing 'svint16_t' to argument 2 of 'svaddhnb', but previous arguments had type 'svuint16_t'} } */\n+  svaddhnb (u16, u32); /* { dg-error {passing 'svuint32_t' to argument 2 of 'svaddhnb', but previous arguments had type 'svuint16_t'} } */\n+  svaddhnb (u16, pg); /* { dg-error {passing 'svbool_t' to argument 2 of 'svaddhnb', but previous arguments had type 'svuint16_t'} } */\n+  svaddhnb (u8, 0); /* { dg-error {'svaddhnb' has no form that takes 'svuint8_t' arguments} } */\n+  svaddhnb (u16, 0);\n+  svaddhnb (u32, 0);\n+  svaddhnb (u64, 0);\n+  svaddhnb (pg, 0); /* { dg-error {'svaddhnb' has no form that takes 'svbool_t' arguments} } */\n+}"}, {"sha": "eb70d058ec7e0c1565cd33591af3cbb52862e640", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/binary_narrowt_opt_n_1.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fbinary_narrowt_opt_n_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fbinary_narrowt_opt_n_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fbinary_narrowt_opt_n_1.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+\n+#include <arm_sve.h>\n+\n+#pragma GCC target (\"arch=armv8.2-a+sve2\")\n+\n+void\n+f1 (svbool_t pg, svint8_t s8, svuint8_t u8,\n+    svint16_t s16, svuint16_t u16,\n+    svint32_t s32, svuint32_t u32,\n+    svint64_t s64, svuint64_t u64,\n+    svfloat16_t f16, svfloat32_t f32)\n+{\n+  svaddhnt (u32, u16); /* { dg-error {too few arguments to function 'svaddhnt'} } */\n+  svaddhnt (u32, u16, u16, u16); /* { dg-error {too many arguments to function 'svaddhnt'} } */\n+  svaddhnt (pg, pg, pg); /* { dg-error {'svaddhnt' has no form that takes 'svbool_t' arguments} } */\n+  svaddhnt (u8, u8, u8); /* { dg-error {'svaddhnt' has no form that takes 'svuint8_t' arguments} } */\n+  svaddhnt (s8, s8, s8); /* { dg-error {'svaddhnt' has no form that takes 'svint8_t' arguments} } */\n+  svaddhnt (u16, u16, u16); /* { dg-error {passing 'svuint16_t' instead of the expected 'svuint8_t' to argument 1 of 'svaddhnt', after passing 'svuint16_t' to argument 2} } */\n+  svaddhnt (s8, u16, u16); /* { dg-error {arguments 1 and 2 of 'svaddhnt' must have the same signedness, but the values passed here have type 'svint8_t' and 'svuint16_t' respectively} } */\n+  svaddhnt (pg, u16, u16); /* { dg-error {passing 'svbool_t' instead of the expected 'svuint8_t' to argument 1 of 'svaddhnt', after passing 'svuint16_t' to argument 2} } */\n+  svaddhnt (u8, u16, u16);\n+  svaddhnt (s8, s16, s16);\n+  svaddhnt (u16, u32, u32);\n+  svaddhnt (s16, s32, s32);\n+  svaddhnt (u32, u64, u64);\n+  svaddhnt (s32, s64, s64);\n+  svaddhnt (f16, f32, f32); /* { dg-error {'svaddhnt' has no form that takes 'svfloat32_t' arguments} } */\n+  svaddhnt (1, u16, u16); /* { dg-error {passing 'int' to argument 1 of 'svaddhnt', which expects an SVE vector type} } */\n+  svaddhnt (u8, 1, u16); /* { dg-error {passing 'int' to argument 2 of 'svaddhnt', which expects an SVE vector type} } */\n+  svaddhnt (u8, u16, s8); /* { dg-error {passing 'svint8_t' to argument 3 of 'svaddhnt', but previous arguments had type 'svuint16_t'} } */\n+  svaddhnt (u8, u16, s16); /* { dg-error {passing 'svint16_t' to argument 3 of 'svaddhnt', but previous arguments had type 'svuint16_t'} } */\n+  svaddhnt (u8, u16, u32); /* { dg-error {passing 'svuint32_t' to argument 3 of 'svaddhnt', but previous arguments had type 'svuint16_t'} } */\n+  svaddhnt (u8, u16, pg); /* { dg-error {passing 'svbool_t' to argument 3 of 'svaddhnt', but previous arguments had type 'svuint16_t'} } */\n+  svaddhnt (u8, u8, 0); /* { dg-error {'svaddhnt' has no form that takes 'svuint8_t' arguments} } */\n+  svaddhnt (u16, u16, 0); /* { dg-error {passing 'svuint16_t' instead of the expected 'svuint8_t' to argument 1 of 'svaddhnt', after passing 'svuint16_t' to argument 2} } */\n+  svaddhnt (s8, u16, 0); /* { dg-error {arguments 1 and 2 of 'svaddhnt' must have the same signedness, but the values passed here have type 'svint8_t' and 'svuint16_t' respectively} } */\n+  svaddhnt (pg, u16, 0); /* { dg-error {passing 'svbool_t' instead of the expected 'svuint8_t' to argument 1 of 'svaddhnt', after passing 'svuint16_t' to argument 2} } */\n+  svaddhnt (u8, u16, 0);\n+  svaddhnt (u16, u32, 0);\n+  svaddhnt (u32, u64, 0);\n+  svaddhnt (pg, pg, 0); /* { dg-error {'svaddhnt' has no form that takes 'svbool_t' arguments} } */\n+}"}, {"sha": "213defc6606e6e658259d575747202f471f248c9", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/binary_to_uint_1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fbinary_to_uint_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fbinary_to_uint_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fbinary_to_uint_1.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+\n+#include <arm_sve.h>\n+\n+#pragma GCC target (\"arch=armv8.2-a+sve2\")\n+\n+svuint8_t\n+f1 (svbool_t pg, svint32_t s32, svuint32_t u32)\n+{\n+  svhistcnt_z (pg, s32); /* { dg-error {too few arguments to function 'svhistcnt_z'} } */\n+  svhistcnt_z (pg, s32, s32, 0); /* { dg-error {too many arguments to function 'svhistcnt_z'} } */\n+  svhistcnt_z (0, s32, s32); /* { dg-error {passing 'int' to argument 1 of 'svhistcnt_z', which expects 'svbool_t'} } */\n+  svhistcnt_z (s32, s32, s32); /* { dg-error {passing 'svint32_t' to argument 1 of 'svhistcnt_z', which expects 'svbool_t'} } */\n+  svhistcnt_z (pg, 0, s32); /* { dg-error {passing 'int' to argument 2 of 'svhistcnt_z', which expects an SVE vector type} } */\n+  svhistcnt_z (pg, pg, s32); /* { dg-error {passing 'svint32_t' to argument 3 of 'svhistcnt_z', but previous arguments had type 'svbool_t'} } */\n+  svhistcnt_z (pg, s32, u32); /* { dg-error {passing 'svuint32_t' to argument 3 of 'svhistcnt_z', but previous arguments had type 'svint32_t'} } */\n+  svhistcnt_z (pg, s32, 0); /* { dg-error {passing 'int' to argument 3 of 'svhistcnt_z', which expects an SVE vector type} } */\n+  svhistcnt_z (pg, pg, pg); /* { dg-error {'svhistcnt_z' has no form that takes 'svbool_t' arguments} } */\n+}"}, {"sha": "f58ab75d792daca31d0e618c1471e7a1714ec293", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/binary_wide_1.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fbinary_wide_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fbinary_wide_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fbinary_wide_1.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+\n+#include <arm_sve.h>\n+\n+#pragma GCC target (\"arch=armv8.2-a+sve2\")\n+\n+void\n+f1 (svbool_t pg, svint8_t s8, svuint8_t u8,\n+    svint16_t s16, svuint16_t u16,\n+    svint32_t s32, svuint32_t u32,\n+    svint64_t s64, svuint64_t u64,\n+    svfloat16_t f16, svfloat32_t f32)\n+{\n+  svadalp_m (pg, u16); /* { dg-error {too few arguments to function 'svadalp_m'} } */\n+  svadalp_m (pg, u16, u8, u8); /* { dg-error {too many arguments to function 'svadalp_m'} } */\n+  svadalp_m (0, pg, pg); /* { dg-error {passing 'int' to argument 1 of 'svadalp_m', which expects 'svbool_t'} } */\n+  svadalp_m (u16, u8, u8); /* { dg-error {passing 'svuint16_t' to argument 1 of 'svadalp_m', which expects 'svbool_t'} } */\n+  svadalp_m (u32, u32, u16); /* { dg-error {passing 'svuint32_t' to argument 1 of 'svadalp_m', which expects 'svbool_t'} } */\n+  svadalp_m (pg, pg, pg); /* { dg-error {'svadalp_m' has no form that takes 'svbool_t' arguments} } */\n+  svadalp_m (pg, u8, u8); /* { dg-error {'svadalp_m' has no form that takes 'svuint8_t' arguments} } */\n+  svadalp_m (pg, s8, s8); /* { dg-error {'svadalp_m' has no form that takes 'svint8_t' arguments} } */\n+  svadalp_m (pg, u16, u16); /* { dg-error {passing 'svuint16_t' instead of the expected 'svuint8_t' to argument 3 of 'svadalp_m', after passing 'svuint16_t' to argument 2} } */\n+  svadalp_m (pg, u16, s16); /* { dg-error {passing 'svint16_t' instead of the expected 'svuint8_t' to argument 3 of 'svadalp_m', after passing 'svuint16_t' to argument 2} } */\n+  svadalp_m (pg, u16, u8);\n+  svadalp_m (pg, u16, s8); /* { dg-error {arguments 2 and 3 of 'svadalp_m' must have the same signedness, but the values passed here have type 'svuint16_t' and 'svint8_t' respectively} } */\n+  svadalp_m (pg, u16, pg); /* { dg-error {passing 'svbool_t' instead of the expected 'svuint8_t' to argument 3 of 'svadalp_m', after passing 'svuint16_t' to argument 2} } */\n+  svadalp_m (pg, s16, u16); /* { dg-error {passing 'svuint16_t' instead of the expected 'svint8_t' to argument 3 of 'svadalp_m', after passing 'svint16_t' to argument 2} } */\n+  svadalp_m (pg, s16, s16); /* { dg-error {passing 'svint16_t' instead of the expected 'svint8_t' to argument 3 of 'svadalp_m', after passing 'svint16_t' to argument 2} } */\n+  svadalp_m (pg, s16, u8); /* { dg-error {arguments 2 and 3 of 'svadalp_m' must have the same signedness, but the values passed here have type 'svint16_t' and 'svuint8_t' respectively} } */\n+  svadalp_m (pg, s16, s8);\n+  svadalp_m (pg, f32, f16); /* { dg-error {'svadalp_m' has no form that takes 'svfloat32_t' arguments} } */\n+  svadalp_m (pg, f16, f32); /* { dg-error {'svadalp_m' has no form that takes 'svfloat16_t' arguments} } */\n+  svadalp_m (pg, 0, u32); /* { dg-error {passing 'int' to argument 2 of 'svadalp_m', which expects an SVE vector type} } */\n+  svadalp_m (pg, 0, u64); /* { dg-error {passing 'int' to argument 2 of 'svadalp_m', which expects an SVE vector type} } */\n+  svadalp_m (pg, u8, 0); /* { dg-error {passing 'int' to argument 3 of 'svadalp_m', which expects an SVE vector type} } */\n+  svadalp_m (pg, u16, 0); /* { dg-error {passing 'int' to argument 3 of 'svadalp_m', which expects an SVE vector type} } */\n+}"}, {"sha": "5a58211a09a839503d113fc179a2d7ea4b37c855", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/binary_wide_opt_n_1.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fbinary_wide_opt_n_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fbinary_wide_opt_n_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fbinary_wide_opt_n_1.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+\n+#include <arm_sve.h>\n+\n+#pragma GCC target (\"arch=armv8.2-a+sve2\")\n+\n+void\n+f1 (svbool_t pg, svint8_t s8, svuint8_t u8,\n+    svint16_t s16, svuint16_t u16,\n+    svint32_t s32, svuint32_t u32,\n+    svint64_t s64, svuint64_t u64,\n+    svfloat16_t f16, svfloat32_t f32)\n+{\n+  svaddwb (u16); /* { dg-error {too few arguments to function 'svaddwb'} } */\n+  svaddwb (u16, u8, u8); /* { dg-error {too many arguments to function 'svaddwb'} } */\n+  svaddwb (pg, pg); /* { dg-error {'svaddwb' has no form that takes 'svbool_t' arguments} } */\n+  svaddwb (u8, u8); /* { dg-error {'svaddwb' has no form that takes 'svuint8_t' arguments} } */\n+  svaddwb (s8, s8); /* { dg-error {'svaddwb' has no form that takes 'svint8_t' arguments} } */\n+  svaddwb (u16, u16); /* { dg-error {passing 'svuint16_t' instead of the expected 'svuint8_t' to argument 2 of 'svaddwb', after passing 'svuint16_t' to argument 1} } */\n+  svaddwb (u16, s16); /* { dg-error {passing 'svint16_t' instead of the expected 'svuint8_t' to argument 2 of 'svaddwb', after passing 'svuint16_t' to argument 1} } */\n+  svaddwb (u16, u8);\n+  svaddwb (u16, s8); /* { dg-error {arguments 1 and 2 of 'svaddwb' must have the same signedness, but the values passed here have type 'svuint16_t' and 'svint8_t' respectively} } */\n+  svaddwb (u16, pg); /* { dg-error {passing 'svbool_t' instead of the expected 'svuint8_t' to argument 2 of 'svaddwb', after passing 'svuint16_t' to argument 1} } */\n+  svaddwb (s16, u16); /* { dg-error {passing 'svuint16_t' instead of the expected 'svint8_t' to argument 2 of 'svaddwb', after passing 'svint16_t' to argument 1} } */\n+  svaddwb (s16, s16); /* { dg-error {passing 'svint16_t' instead of the expected 'svint8_t' to argument 2 of 'svaddwb', after passing 'svint16_t' to argument 1} } */\n+  svaddwb (s16, u8); /* { dg-error {arguments 1 and 2 of 'svaddwb' must have the same signedness, but the values passed here have type 'svint16_t' and 'svuint8_t' respectively} } */\n+  svaddwb (s16, s8);\n+  svaddwb (f32, f16); /* { dg-error {'svaddwb' has no form that takes 'svfloat32_t' arguments} } */\n+  svaddwb (f16, f32); /* { dg-error {'svaddwb' has no form that takes 'svfloat16_t' arguments} } */\n+  svaddwb (0, u32); /* { dg-error {passing 'int' to argument 1 of 'svaddwb', which expects an SVE vector type} } */\n+  svaddwb (0, u64); /* { dg-error {passing 'int' to argument 1 of 'svaddwb', which expects an SVE vector type} } */\n+  svaddwb (u8, 0); /* { dg-error {'svaddwb' has no form that takes 'svuint8_t' arguments} } */\n+  svaddwb (u16, 0);\n+  svaddwb (u32, 0);\n+  svaddwb (u64, 0);\n+  svaddwb (pg, 0); /* { dg-error {'svaddwb' has no form that takes 'svbool_t' arguments} } */\n+  svaddwb (f32, 0); /* { dg-error {'svaddwb' has no form that takes 'svfloat32_t' arguments} } */\n+}"}, {"sha": "12511a85beb2436c819ffb6550dc84442385d1dd", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/compare_1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fcompare_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fcompare_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fcompare_1.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+\n+#include <arm_sve.h>\n+\n+#pragma GCC target (\"arch=armv8.2-a+sve2\")\n+\n+void\n+f1 (svbool_t pg, svint8_t s8, svuint8_t u8,\n+    svint16_t s16, svuint16_t u16, svfloat16_t f16)\n+{\n+  svmatch (pg, u8); /* { dg-error {too few arguments to function 'svmatch'} } */\n+  svmatch (pg, u8, u8, u8); /* { dg-error {too many arguments to function 'svmatch'} } */\n+  svmatch (u8, u8, u8); /* { dg-error {passing 'svuint8_t' to argument 1 of 'svmatch', which expects 'svbool_t'} } */\n+  svmatch (pg, pg, pg); /* { dg-error {'svmatch' has no form that takes 'svbool_t' arguments} } */\n+  svmatch (pg, 1, u8); /* { dg-error {passing 'int' to argument 2 of 'svmatch', which expects an SVE vector type} } */\n+  svmatch (pg, u8, s8); /* { dg-error {passing 'svint8_t' to argument 3 of 'svmatch', but previous arguments had type 'svuint8_t'} } */\n+  svmatch (pg, u8, u8);\n+  svmatch (pg, u8, s16); /* { dg-error {passing 'svint16_t' to argument 3 of 'svmatch', but previous arguments had type 'svuint8_t'} } */\n+  svmatch (pg, u8, u16); /* { dg-error {passing 'svuint16_t' to argument 3 of 'svmatch', but previous arguments had type 'svuint8_t'} } */\n+  svmatch (pg, u8, f16); /* { dg-error {passing 'svfloat16_t' to argument 3 of 'svmatch', but previous arguments had type 'svuint8_t'} } */\n+  svmatch (pg, u8, pg); /* { dg-error {passing 'svbool_t' to argument 3 of 'svmatch', but previous arguments had type 'svuint8_t'} } */\n+  svmatch (pg, u8, 0); /* { dg-error {passing 'int' to argument 3 of 'svmatch', which expects an SVE vector type} } */\n+\n+  svmatch (pg, f16, s16); /* { dg-error {passing 'svint16_t' to argument 3 of 'svmatch', but previous arguments had type 'svfloat16_t'} } */\n+  svmatch (pg, f16, u16); /* { dg-error {passing 'svuint16_t' to argument 3 of 'svmatch', but previous arguments had type 'svfloat16_t'} } */\n+  svmatch (pg, f16, f16); /* { dg-error {'svmatch' has no form that takes 'svfloat16_t' arguments} } */\n+}"}, {"sha": "d184e3499794480c273f82612a5d22c8847081f8", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/compare_ptr_1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fcompare_ptr_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fcompare_ptr_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fcompare_ptr_1.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+\n+#include <arm_sve.h>\n+\n+#pragma GCC target (\"arch=armv8.2-a+sve2\")\n+\n+struct foo;\n+\n+void\n+f1 (svbool_t pg, svint8_t s8, int8_t *s8_ptr, uint8_t *u8_ptr,\n+    uint16_t *u16_ptr, svbool_t *pg_ptr, const struct foo *foo_ptr)\n+{\n+  svwhilerw (u8_ptr); /* { dg-error {too few arguments to function 'svwhilerw'} } */\n+  svwhilerw (u8_ptr, u8_ptr, u8_ptr); /* { dg-error {too many arguments to function 'svwhilerw'} } */\n+  svwhilerw (pg, u8_ptr); /* { dg-error {passing 'svbool_t' to argument 1 of 'svwhilerw', which expects a pointer type} } */\n+  svwhilerw (0, u8_ptr); /* { dg-error {passing 'int' to argument 1 of 'svwhilerw', which expects a pointer type} } */\n+  svwhilerw (s8, u8_ptr); /* { dg-error {passing 'svint8_t' to argument 1 of 'svwhilerw', which expects a pointer type} } */\n+  svwhilerw (1, u8_ptr); /* { dg-error {passing 'int' to argument 1 of 'svwhilerw', which expects a pointer type} } */\n+  svwhilerw (pg_ptr, u8_ptr); /* { dg-error {passing 'svbool_t \\*' to argument 1 of 'svwhilerw', but 'svbool_t' is not a valid SVE element type} } */\n+  svwhilerw (foo_ptr, u8_ptr); /* { dg-error {passing 'const struct foo \\*' to argument 1 of 'svwhilerw', but 'struct foo' is not a valid SVE element type} } */\n+  svwhilerw (u8_ptr, 0); /* { dg-error {passing 'int' to argument 2 of 'svwhilerw', which expects a pointer type} } */\n+  svwhilerw (u8_ptr, s8); /* { dg-error {passing 'svint8_t' to argument 2 of 'svwhilerw', which expects a pointer type} } */\n+  svwhilerw (u8_ptr, u8_ptr);\n+  svwhilerw (u8_ptr, s8_ptr); /* { dg-error {passing 'int8_t \\*'[^\\n]* to argument 2 of 'svwhilerw', but argument 1 had type 'uint8_t \\*'} } */\n+  svwhilerw (u8_ptr, u16_ptr); /* { dg-error {passing 'uint16_t \\*'[^\\n]* to argument 2 of 'svwhilerw', but argument 1 had type 'uint8_t \\*'} } */\n+  svwhilerw (s8_ptr, u8_ptr); /* { dg-error {passing 'uint8_t \\*'[^\\n]* to argument 2 of 'svwhilerw', but argument 1 had type 'int8_t \\*'} } */\n+}"}, {"sha": "c47e5411c20c530e46f0a4b5e8c8578c42602a1a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/load_ext_gather_index_restricted_1.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fload_ext_gather_index_restricted_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fload_ext_gather_index_restricted_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fload_ext_gather_index_restricted_1.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99 -Wpointer-sign\" } */\n+\n+#include <arm_sve.h>\n+\n+#pragma GCC target (\"arch=armv8.2-a+sve2\")\n+\n+struct s { int i; };\n+\n+void\n+f1 (svbool_t pg, short *s16_ptr, unsigned short *u16_ptr,\n+    svint8_t s8, svint16_t s16,\n+    svint32_t s32, svuint32_t u32, svfloat32_t f32,\n+    svint64_t s64, svuint64_t u64, svfloat64_t f64, struct s s)\n+{\n+  svldnt1sh_gather_index (pg, s16_ptr, s64); /* { dg-warning {implicit declaration of function 'svldnt1sh_gather_index'; did you mean 'svldnt1_gather_index'} } */\n+  svldnt1sh_gather_index_u64 (pg, s16_ptr); /* { dg-error {too few arguments to function 'svldnt1sh_gather_index_u64'} } */\n+  svldnt1sh_gather_index_u64 (pg, s16_ptr, s64, 0); /* { dg-error {too many arguments to function 'svldnt1sh_gather_index_u64'} } */\n+  svldnt1sh_gather_index_u64 (pg, u16_ptr, s64); /* { dg-warning {pointer targets in passing argument 2 of 'svldnt1sh_gather_s64index_u64' differ in signedness} } */\n+  svldnt1sh_gather_index_u64 (pg, s16_ptr, pg); /* { dg-error {passing 'svbool_t' to argument 3 of 'svldnt1sh_gather_index_u64', which expects a vector of 64-bit integers} } */\n+  svldnt1sh_gather_index_u64 (pg, s16_ptr, s8); /* { dg-error {passing 'svint8_t' to argument 3 of 'svldnt1sh_gather_index_u64', which expects a vector of 64-bit integers} } */\n+  svldnt1sh_gather_index_u64 (pg, s16_ptr, s16); /* { dg-error {passing 'svint16_t' to argument 3 of 'svldnt1sh_gather_index_u64', which expects a vector of 64-bit integers} } */\n+  svldnt1sh_gather_index_u64 (pg, s16_ptr, s64);\n+  svldnt1sh_gather_index_u64 (pg, s16_ptr, u64);\n+  svldnt1sh_gather_index_u64 (pg, s16_ptr, f64); /* { dg-error {passing 'svfloat64_t' to argument 3 of 'svldnt1sh_gather_index_u64', which expects a vector of 64-bit integers} } */\n+  svldnt1sh_gather_index_u64 (pg, s16_ptr, s32); /* { dg-error {passing 'svint32_t' to argument 3 of 'svldnt1sh_gather_index_u64', which expects a vector of 64-bit integers} } */\n+  svldnt1sh_gather_index_u64 (pg, s16_ptr, u32); /* { dg-error {passing 'svuint32_t' to argument 3 of 'svldnt1sh_gather_index_u64', which expects a vector of 64-bit integers} } */\n+  svldnt1sh_gather_index_u64 (pg, s16_ptr, f32); /* { dg-error {passing 'svfloat32_t' to argument 3 of 'svldnt1sh_gather_index_u64', which expects a vector of 64-bit integers} } */\n+\n+  svldnt1sh_gather_index_u64 (pg, 0, s64);\n+  svldnt1sh_gather_index_u64 (pg, s, s64); /* { dg-error {'struct s' to argument 2 of 'svldnt1sh_gather_index_u64', which expects a vector or pointer base address} } */\n+\n+  svldnt1sh_gather_index_u64 (pg, pg, 0); /* { dg-error {passing 'svbool_t' to argument 2 of 'svldnt1sh_gather_index_u64', which expects 'svuint64_t'} } */\n+  svldnt1sh_gather_index_u64 (pg, s64, 0); /* { dg-error {passing 'svint64_t' to argument 2 of 'svldnt1sh_gather_index_u64', which expects 'svuint64_t'} } */\n+  svldnt1sh_gather_index_u64 (pg, u64, 0);\n+  svldnt1sh_gather_index_u64 (pg, u32, 0); /* { dg-error {passing 'svuint32_t' to argument 2 of 'svldnt1sh_gather_index_u64', which expects 'svuint64_t'} } */\n+\n+  svldnt1sh_gather_index_u32 (pg, u16_ptr, s32); /* { dg-error {'svldnt1sh_gather_index_u32' requires a vector base and a scalar index} } */\n+  svldnt1sh_gather_index_u32 (pg, s16_ptr, pg); /* { dg-error {'svldnt1sh_gather_index_u32' requires a vector base and a scalar index} } */\n+  svldnt1sh_gather_index_u32 (pg, s16_ptr, s8); /* { dg-error {'svldnt1sh_gather_index_u32' requires a vector base and a scalar index} } */\n+  svldnt1sh_gather_index_u32 (pg, s16_ptr, s16); /* { dg-error {'svldnt1sh_gather_index_u32' requires a vector base and a scalar index} } */\n+  svldnt1sh_gather_index_u32 (pg, s16_ptr, 0); /* { dg-error {'svldnt1sh_gather_index_u32' requires a vector base and a scalar index} } */\n+}"}, {"sha": "353fec2d39d030a408c64823c4c8ebc1e24e3aa7", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/load_ext_gather_offset_restricted_1.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fload_ext_gather_offset_restricted_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fload_ext_gather_offset_restricted_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fload_ext_gather_offset_restricted_1.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99\" } */\n+\n+#include <arm_sve.h>\n+\n+#pragma GCC target (\"arch=armv8.2-a+sve2\")\n+\n+struct s { int i; };\n+\n+void\n+f1 (svbool_t pg, signed char *s8_ptr, short *s16_ptr,\n+    svint8_t s8, svint16_t s16,\n+    svint32_t s32, svuint32_t u32, svfloat32_t f32,\n+    svint64_t s64, svuint64_t u64, svfloat64_t f64, struct s s)\n+{\n+  svldnt1sb_gather_offset (pg, s8_ptr, s32); /* { dg-warning {implicit declaration of function 'svldnt1sb_gather_offset'; did you mean 'svldnt1_gather_offset'} } */\n+  svldnt1sb_gather_offset_s32 (pg, s8_ptr); /* { dg-error {too few arguments to function 'svldnt1sb_gather_offset_s32'} } */\n+  svldnt1sb_gather_offset_s32 (pg, s8_ptr, u32, 0); /* { dg-error {too many arguments to function 'svldnt1sb_gather_offset_s32'} } */\n+  svldnt1sb_gather_offset_s32 (pg, s16_ptr, u32); /* { dg-warning {passing argument 2 of 'svldnt1sb_gather_u32offset_s32' from incompatible pointer type} } */\n+  svldnt1sb_gather_offset_s32 (pg, s8_ptr, pg); /* { dg-error {passing 'svbool_t' to argument 3 of 'svldnt1sb_gather_offset_s32', which expects a vector of 32-bit integers} } */\n+  svldnt1sb_gather_offset_s32 (pg, s8_ptr, s8); /* { dg-error {passing 'svint8_t' to argument 3 of 'svldnt1sb_gather_offset_s32', which expects a vector of 32-bit integers} } */\n+  svldnt1sb_gather_offset_s32 (pg, s8_ptr, s16); /* { dg-error {passing 'svint16_t' to argument 3 of 'svldnt1sb_gather_offset_s32', which expects a vector of 32-bit integers} } */\n+  svldnt1sb_gather_offset_s32 (pg, s8_ptr, s32); /* { dg-error {'svldnt1sb_gather_offset_s32' does not support sign-extended offsets} } */\n+  svldnt1sb_gather_offset_s32 (pg, s8_ptr, u32);\n+  svldnt1sb_gather_offset_s32 (pg, s8_ptr, f32); /* { dg-error {passing 'svfloat32_t' to argument 3 of 'svldnt1sb_gather_offset_s32', which expects a vector of 32-bit integers} } */\n+  svldnt1sb_gather_offset_s32 (pg, s8_ptr, s64); /* { dg-error {passing 'svint64_t' to argument 3 of 'svldnt1sb_gather_offset_s32', which expects a vector of 32-bit integers} } */\n+  svldnt1sb_gather_offset_s32 (pg, s8_ptr, u64); /* { dg-error {passing 'svuint64_t' to argument 3 of 'svldnt1sb_gather_offset_s32', which expects a vector of 32-bit integers} } */\n+  svldnt1sb_gather_offset_s32 (pg, s8_ptr, f64); /* { dg-error {passing 'svfloat64_t' to argument 3 of 'svldnt1sb_gather_offset_s32', which expects a vector of 32-bit integers} } */\n+\n+  svldnt1sb_gather_offset_s32 (pg, 0, u32);\n+  svldnt1sb_gather_offset_s32 (pg, s, u32); /* { dg-error {'struct s' to argument 2 of 'svldnt1sb_gather_offset_s32', which expects a vector or pointer base address} } */\n+\n+  svldnt1sb_gather_offset_s32 (pg, pg, 0); /* { dg-error {passing 'svbool_t' to argument 2 of 'svldnt1sb_gather_offset_s32', which expects 'svuint32_t'} } */\n+  svldnt1sb_gather_offset_s32 (pg, s32, 0); /* { dg-error {passing 'svint32_t' to argument 2 of 'svldnt1sb_gather_offset_s32', which expects 'svuint32_t'} } */\n+  svldnt1sb_gather_offset_s32 (pg, u32, 0);\n+  svldnt1sb_gather_offset_s32 (pg, u64, 0); /* { dg-error {passing 'svuint64_t' to argument 2 of 'svldnt1sb_gather_offset_s32', which expects 'svuint32_t'} } */\n+}"}, {"sha": "e22b3dd8fea35fac3d6148c3758ae521bfc333bd", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/load_ext_gather_offset_restricted_2.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fload_ext_gather_offset_restricted_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fload_ext_gather_offset_restricted_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fload_ext_gather_offset_restricted_2.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99\" } */\n+\n+#include <arm_sve.h>\n+\n+#pragma GCC target (\"arch=armv8.2-a+sve2\")\n+\n+struct s { int i; };\n+\n+void\n+f1 (svbool_t pg, signed char *s8_ptr, short *s16_ptr,\n+    svint8_t s8, svint16_t s16,\n+    svint32_t s32, svuint32_t u32, svfloat32_t f32,\n+    svint64_t s64, svuint64_t u64, svfloat64_t f64, struct s s)\n+{\n+  svldnt1sb_gather_offset (pg, s8_ptr, s32); /* { dg-warning {implicit declaration of function 'svldnt1sb_gather_offset'; did you mean 'svldnt1_gather_offset'} } */\n+  svldnt1sb_gather_offset_u32 (pg, s8_ptr); /* { dg-error {too few arguments to function 'svldnt1sb_gather_offset_u32'} } */\n+  svldnt1sb_gather_offset_u32 (pg, s8_ptr, u32, 0); /* { dg-error {too many arguments to function 'svldnt1sb_gather_offset_u32'} } */\n+  svldnt1sb_gather_offset_u32 (pg, s16_ptr, u32); /* { dg-warning {passing argument 2 of 'svldnt1sb_gather_u32offset_u32' from incompatible pointer type} } */\n+  svldnt1sb_gather_offset_u32 (pg, s8_ptr, pg); /* { dg-error {passing 'svbool_t' to argument 3 of 'svldnt1sb_gather_offset_u32', which expects a vector of 32-bit integers} } */\n+  svldnt1sb_gather_offset_u32 (pg, s8_ptr, s8); /* { dg-error {passing 'svint8_t' to argument 3 of 'svldnt1sb_gather_offset_u32', which expects a vector of 32-bit integers} } */\n+  svldnt1sb_gather_offset_u32 (pg, s8_ptr, s16); /* { dg-error {passing 'svint16_t' to argument 3 of 'svldnt1sb_gather_offset_u32', which expects a vector of 32-bit integers} } */\n+  svldnt1sb_gather_offset_u32 (pg, s8_ptr, s32); /* { dg-error {'svldnt1sb_gather_offset_u32' does not support sign-extended offsets} } */\n+  svldnt1sb_gather_offset_u32 (pg, s8_ptr, u32);\n+  svldnt1sb_gather_offset_u32 (pg, s8_ptr, f32); /* { dg-error {passing 'svfloat32_t' to argument 3 of 'svldnt1sb_gather_offset_u32', which expects a vector of 32-bit integers} } */\n+  svldnt1sb_gather_offset_u32 (pg, s8_ptr, s64); /* { dg-error {passing 'svint64_t' to argument 3 of 'svldnt1sb_gather_offset_u32', which expects a vector of 32-bit integers} } */\n+  svldnt1sb_gather_offset_u32 (pg, s8_ptr, u64); /* { dg-error {passing 'svuint64_t' to argument 3 of 'svldnt1sb_gather_offset_u32', which expects a vector of 32-bit integers} } */\n+  svldnt1sb_gather_offset_u32 (pg, s8_ptr, f64); /* { dg-error {passing 'svfloat64_t' to argument 3 of 'svldnt1sb_gather_offset_u32', which expects a vector of 32-bit integers} } */\n+\n+  svldnt1sb_gather_offset_u32 (pg, 0, u32);\n+  svldnt1sb_gather_offset_u32 (pg, s, u32); /* { dg-error {'struct s' to argument 2 of 'svldnt1sb_gather_offset_u32', which expects a vector or pointer base address} } */\n+\n+  svldnt1sb_gather_offset_u32 (pg, pg, 0); /* { dg-error {passing 'svbool_t' to argument 2 of 'svldnt1sb_gather_offset_u32', which expects 'svuint32_t'} } */\n+  svldnt1sb_gather_offset_u32 (pg, s32, 0); /* { dg-error {passing 'svint32_t' to argument 2 of 'svldnt1sb_gather_offset_u32', which expects 'svuint32_t'} } */\n+  svldnt1sb_gather_offset_u32 (pg, u32, 0);\n+  svldnt1sb_gather_offset_u32 (pg, u64, 0); /* { dg-error {passing 'svuint64_t' to argument 2 of 'svldnt1sb_gather_offset_u32', which expects 'svuint32_t'} } */\n+}"}, {"sha": "73b5715c36852bc94da946cad6606ac4aad0efb1", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/load_ext_gather_offset_restricted_3.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fload_ext_gather_offset_restricted_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fload_ext_gather_offset_restricted_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fload_ext_gather_offset_restricted_3.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99\" } */\n+\n+#include <arm_sve.h>\n+\n+#pragma GCC target (\"arch=armv8.2-a+sve2\")\n+\n+struct s { int i; };\n+\n+void\n+f1 (svbool_t pg, signed char *s8_ptr, short *s16_ptr,\n+    svint8_t s8, svint16_t s16,\n+    svint32_t s32, svuint32_t u32, svfloat32_t f32,\n+    svint64_t s64, svuint64_t u64, svfloat64_t f64, struct s s)\n+{\n+  svldnt1sb_gather_offset (pg, s8_ptr, s64); /* { dg-warning {implicit declaration of function 'svldnt1sb_gather_offset'; did you mean 'svldnt1_gather_offset'} } */\n+  svldnt1sb_gather_offset_s64 (pg, s8_ptr); /* { dg-error {too few arguments to function 'svldnt1sb_gather_offset_s64'} } */\n+  svldnt1sb_gather_offset_s64 (pg, s8_ptr, s64, 0); /* { dg-error {too many arguments to function 'svldnt1sb_gather_offset_s64'} } */\n+  svldnt1sb_gather_offset_s64 (pg, s16_ptr, s64); /* { dg-warning {passing argument 2 of 'svldnt1sb_gather_s64offset_s64' from incompatible pointer type} } */\n+  svldnt1sb_gather_offset_s64 (pg, s8_ptr, pg); /* { dg-error {passing 'svbool_t' to argument 3 of 'svldnt1sb_gather_offset_s64', which expects a vector of 64-bit integers} } */\n+  svldnt1sb_gather_offset_s64 (pg, s8_ptr, s8); /* { dg-error {passing 'svint8_t' to argument 3 of 'svldnt1sb_gather_offset_s64', which expects a vector of 64-bit integers} } */\n+  svldnt1sb_gather_offset_s64 (pg, s8_ptr, s16); /* { dg-error {passing 'svint16_t' to argument 3 of 'svldnt1sb_gather_offset_s64', which expects a vector of 64-bit integers} } */\n+  svldnt1sb_gather_offset_s64 (pg, s8_ptr, s32); /* { dg-error {passing 'svint32_t' to argument 3 of 'svldnt1sb_gather_offset_s64', which expects a vector of 64-bit integers} } */\n+  svldnt1sb_gather_offset_s64 (pg, s8_ptr, u32); /* { dg-error {passing 'svuint32_t' to argument 3 of 'svldnt1sb_gather_offset_s64', which expects a vector of 64-bit integers} } */\n+  svldnt1sb_gather_offset_s64 (pg, s8_ptr, f32); /* { dg-error {passing 'svfloat32_t' to argument 3 of 'svldnt1sb_gather_offset_s64', which expects a vector of 64-bit integers} } */\n+  svldnt1sb_gather_offset_s64 (pg, s8_ptr, s64);\n+  svldnt1sb_gather_offset_s64 (pg, s8_ptr, u64);\n+  svldnt1sb_gather_offset_s64 (pg, s8_ptr, f64); /* { dg-error {passing 'svfloat64_t' to argument 3 of 'svldnt1sb_gather_offset_s64', which expects a vector of 64-bit integers} } */\n+\n+  svldnt1sb_gather_offset_s64 (pg, 0, s64);\n+  svldnt1sb_gather_offset_s64 (pg, s, s64); /* { dg-error {'struct s' to argument 2 of 'svldnt1sb_gather_offset_s64', which expects a vector or pointer base address} } */\n+\n+  svldnt1sb_gather_offset_s64 (pg, pg, 0); /* { dg-error {passing 'svbool_t' to argument 2 of 'svldnt1sb_gather_offset_s64', which expects 'svuint64_t'} } */\n+  svldnt1sb_gather_offset_s64 (pg, s32, 0); /* { dg-error {passing 'svint32_t' to argument 2 of 'svldnt1sb_gather_offset_s64', which expects 'svuint64_t'} } */\n+  svldnt1sb_gather_offset_s64 (pg, u32, 0); /* { dg-error {passing 'svuint32_t' to argument 2 of 'svldnt1sb_gather_offset_s64', which expects 'svuint64_t'} } */\n+  svldnt1sb_gather_offset_s64 (pg, u64, 0);\n+}"}, {"sha": "e2ceb18bc422d6a022fed7aa1e2442e19c8cc2c3", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/load_ext_gather_offset_restricted_4.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fload_ext_gather_offset_restricted_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fload_ext_gather_offset_restricted_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fload_ext_gather_offset_restricted_4.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99\" } */\n+\n+#include <arm_sve.h>\n+\n+#pragma GCC target (\"arch=armv8.2-a+sve2\")\n+\n+struct s { int i; };\n+\n+void\n+f1 (svbool_t pg, signed char *s8_ptr, short *s16_ptr,\n+    svint8_t s8, svint16_t s16,\n+    svint32_t s32, svuint32_t u32, svfloat32_t f32,\n+    svint64_t s64, svuint64_t u64, svfloat64_t f64, struct s s)\n+{\n+  svldnt1sb_gather_offset (pg, s8_ptr, s64); /* { dg-warning {implicit declaration of function 'svldnt1sb_gather_offset'; did you mean 'svldnt1_gather_offset'} } */\n+  svldnt1sb_gather_offset_u64 (pg, s8_ptr); /* { dg-error {too few arguments to function 'svldnt1sb_gather_offset_u64'} } */\n+  svldnt1sb_gather_offset_u64 (pg, s8_ptr, s64, 0); /* { dg-error {too many arguments to function 'svldnt1sb_gather_offset_u64'} } */\n+  svldnt1sb_gather_offset_u64 (pg, s16_ptr, s64); /* { dg-warning {passing argument 2 of 'svldnt1sb_gather_s64offset_u64' from incompatible pointer type} } */\n+  svldnt1sb_gather_offset_u64 (pg, s8_ptr, pg); /* { dg-error {passing 'svbool_t' to argument 3 of 'svldnt1sb_gather_offset_u64', which expects a vector of 64-bit integers} } */\n+  svldnt1sb_gather_offset_u64 (pg, s8_ptr, s8); /* { dg-error {passing 'svint8_t' to argument 3 of 'svldnt1sb_gather_offset_u64', which expects a vector of 64-bit integers} } */\n+  svldnt1sb_gather_offset_u64 (pg, s8_ptr, s16); /* { dg-error {passing 'svint16_t' to argument 3 of 'svldnt1sb_gather_offset_u64', which expects a vector of 64-bit integers} } */\n+  svldnt1sb_gather_offset_u64 (pg, s8_ptr, s32); /* { dg-error {passing 'svint32_t' to argument 3 of 'svldnt1sb_gather_offset_u64', which expects a vector of 64-bit integers} } */\n+  svldnt1sb_gather_offset_u64 (pg, s8_ptr, u32); /* { dg-error {passing 'svuint32_t' to argument 3 of 'svldnt1sb_gather_offset_u64', which expects a vector of 64-bit integers} } */\n+  svldnt1sb_gather_offset_u64 (pg, s8_ptr, f32); /* { dg-error {passing 'svfloat32_t' to argument 3 of 'svldnt1sb_gather_offset_u64', which expects a vector of 64-bit integers} } */\n+  svldnt1sb_gather_offset_u64 (pg, s8_ptr, s64);\n+  svldnt1sb_gather_offset_u64 (pg, s8_ptr, u64);\n+  svldnt1sb_gather_offset_u64 (pg, s8_ptr, f64); /* { dg-error {passing 'svfloat64_t' to argument 3 of 'svldnt1sb_gather_offset_u64', which expects a vector of 64-bit integers} } */\n+\n+  svldnt1sb_gather_offset_u64 (pg, 0, s64);\n+  svldnt1sb_gather_offset_u64 (pg, s, s64); /* { dg-error {'struct s' to argument 2 of 'svldnt1sb_gather_offset_u64', which expects a vector or pointer base address} } */\n+\n+  svldnt1sb_gather_offset_u64 (pg, pg, 0); /* { dg-error {passing 'svbool_t' to argument 2 of 'svldnt1sb_gather_offset_u64', which expects 'svuint64_t'} } */\n+  svldnt1sb_gather_offset_u64 (pg, s32, 0); /* { dg-error {passing 'svint32_t' to argument 2 of 'svldnt1sb_gather_offset_u64', which expects 'svuint64_t'} } */\n+  svldnt1sb_gather_offset_u64 (pg, u32, 0); /* { dg-error {passing 'svuint32_t' to argument 2 of 'svldnt1sb_gather_offset_u64', which expects 'svuint64_t'} } */\n+  svldnt1sb_gather_offset_u64 (pg, u64, 0);\n+}"}, {"sha": "b12faadda559fb7bf07cc27f354375b787a6d865", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/load_gather_sv_restricted_1.c", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fload_gather_sv_restricted_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fload_gather_sv_restricted_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fload_gather_sv_restricted_1.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,82 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99\" } */\n+\n+#include <arm_sve.h>\n+\n+#pragma GCC target (\"arch=armv8.2-a+sve2\")\n+\n+struct s { signed char x; };\n+\n+svuint32_t\n+f1 (svbool_t pg, signed char *s8_ptr, short *s16_ptr,\n+    int32_t *s32_ptr, uint32_t *u32_ptr, float *f32_ptr,\n+    int64_t *s64_ptr, uint64_t *u64_ptr, double *f64_ptr,\n+    void *void_ptr, struct s *s_ptr, _Complex float *cf32_ptr, int **ptr_ptr,\n+    svuint8_t u8, svuint16_t u16,\n+    svint32_t s32, svuint32_t u32, svfloat32_t f32,\n+    svint64_t s64, svuint64_t u64, svfloat64_t f64)\n+{\n+  svldnt1_gather_offset (pg, s32_ptr); /* { dg-error {too few arguments to function 'svldnt1_gather_offset'} } */\n+  svldnt1_gather_offset (pg, s32_ptr, s32, 0); /* { dg-error {too many arguments to function 'svldnt1_gather_offset'} } */\n+  svldnt1_gather_offset (0, s32_ptr, u32); /* { dg-error {passing 'int' to argument 1 of 'svldnt1_gather_offset', which expects 'svbool_t'} } */\n+  svldnt1_gather_offset (pg, 0, s32); /* { dg-error {passing 'int' to argument 2 of 'svldnt1_gather_offset', which expects a pointer type} } */\n+  svldnt1_gather_offset (pg, (int *) 0, u32);\n+  svldnt1_gather_offset (pg, void_ptr, u32); /* { dg-error {passing 'void \\*' to argument 2 of 'svldnt1_gather_offset', but 'void' is not a valid SVE element type} } */\n+  svldnt1_gather_offset (pg, s_ptr, u32); /* { dg-error {passing 'struct s \\*' to argument 2 of 'svldnt1_gather_offset', but 'struct s' is not a valid SVE element type} } */\n+  svldnt1_gather_offset (pg, f32_ptr, u32);\n+  svldnt1_gather_offset (pg, cf32_ptr, u32); /* { dg-error {passing '_Complex float \\*' to argument 2 of 'svldnt1_gather_offset', but 'complex float' is not a valid SVE element type} } */\n+  svldnt1_gather_offset (pg, ptr_ptr, u64); /* { dg-error {passing 'int \\*\\*' to argument 2 of 'svldnt1_gather_offset', but 'int \\*' is not a valid SVE element type} } */\n+  svldnt1_gather_offset (pg, u32, 0); /* { dg-error {passing 'svuint32_t' to argument 2 of 'svldnt1_gather_offset', which expects a pointer type} } */\n+  /* { dg-message {an explicit type suffix is needed when using a vector of base addresses} \"\" { target *-*-* } .-1 } */\n+  svldnt1_gather_offset (pg, u64, 0); /* { dg-error {passing 'svuint64_t' to argument 2 of 'svldnt1_gather_offset', which expects a pointer type} } */\n+  /* { dg-message {an explicit type suffix is needed when using a vector of base addresses} \"\" { target *-*-* } .-1 } */\n+\n+  svldnt1_gather_offset (pg, s8_ptr, u8); /* { dg-error {passing 'signed char \\*' to argument 2 of 'svldnt1_gather_offset', which expects a pointer to 32-bit or 64-bit elements} } */\n+  svldnt1_gather_offset (pg, s8_ptr, u32); /* { dg-error {passing 'signed char \\*' to argument 2 of 'svldnt1_gather_offset', which expects a pointer to 32-bit or 64-bit elements} } */\n+  svldnt1_gather_offset (pg, s16_ptr, u16); /* { dg-error {passing 'short( int)? \\*' to argument 2 of 'svldnt1_gather_offset', which expects a pointer to 32-bit or 64-bit elements} } */\n+  svldnt1_gather_offset (pg, s16_ptr, u32); /* { dg-error {passing 'short( int)? \\*' to argument 2 of 'svldnt1_gather_offset', which expects a pointer to 32-bit or 64-bit elements} } */\n+\n+  svldnt1_gather_offset (pg, s32_ptr, s32); /* { dg-error {'svldnt1_gather_offset' does not support 32-bit sign-extended offsets} } */\n+  svldnt1_gather_offset (pg, s32_ptr, u32);\n+  svldnt1_gather_offset (pg, s32_ptr, f32); /* { dg-error {passing 'svfloat32_t' to argument 3 of 'svldnt1_gather_offset', which when loading 'svint32_t' expects a vector of 32-bit integers} } */\n+  svldnt1_gather_offset (pg, s32_ptr, s64); /* { dg-error {passing 'svint64_t' to argument 3 of 'svldnt1_gather_offset', which when loading 'svint32_t' expects a vector of 32-bit integers} } */\n+  svldnt1_gather_offset (pg, s32_ptr, u64); /* { dg-error {passing 'svuint64_t' to argument 3 of 'svldnt1_gather_offset', which when loading 'svint32_t' expects a vector of 32-bit integers} } */\n+  svldnt1_gather_offset (pg, s32_ptr, f64); /* { dg-error {passing 'svfloat64_t' to argument 3 of 'svldnt1_gather_offset', which when loading 'svint32_t' expects a vector of 32-bit integers} } */\n+\n+  svldnt1_gather_offset (pg, u32_ptr, s32); /* { dg-error {'svldnt1_gather_offset' does not support 32-bit sign-extended offsets} } */\n+  svldnt1_gather_offset (pg, u32_ptr, u32);\n+  svldnt1_gather_offset (pg, u32_ptr, f32); /* { dg-error {passing 'svfloat32_t' to argument 3 of 'svldnt1_gather_offset', which when loading 'svuint32_t' expects a vector of 32-bit integers} } */\n+  svldnt1_gather_offset (pg, u32_ptr, s64); /* { dg-error {passing 'svint64_t' to argument 3 of 'svldnt1_gather_offset', which when loading 'svuint32_t' expects a vector of 32-bit integers} } */\n+  svldnt1_gather_offset (pg, u32_ptr, u64); /* { dg-error {passing 'svuint64_t' to argument 3 of 'svldnt1_gather_offset', which when loading 'svuint32_t' expects a vector of 32-bit integers} } */\n+  svldnt1_gather_offset (pg, u32_ptr, f64); /* { dg-error {passing 'svfloat64_t' to argument 3 of 'svldnt1_gather_offset', which when loading 'svuint32_t' expects a vector of 32-bit integers} } */\n+\n+  svldnt1_gather_offset (pg, f32_ptr, s32); /* { dg-error {'svldnt1_gather_offset' does not support 32-bit sign-extended offsets} } */\n+  svldnt1_gather_offset (pg, f32_ptr, u32);\n+  svldnt1_gather_offset (pg, f32_ptr, f32); /* { dg-error {passing 'svfloat32_t' to argument 3 of 'svldnt1_gather_offset', which when loading 'svfloat32_t' expects a vector of 32-bit integers} } */\n+  svldnt1_gather_offset (pg, f32_ptr, s64); /* { dg-error {passing 'svint64_t' to argument 3 of 'svldnt1_gather_offset', which when loading 'svfloat32_t' expects a vector of 32-bit integers} } */\n+  svldnt1_gather_offset (pg, f32_ptr, u64); /* { dg-error {passing 'svuint64_t' to argument 3 of 'svldnt1_gather_offset', which when loading 'svfloat32_t' expects a vector of 32-bit integers} } */\n+  svldnt1_gather_offset (pg, f32_ptr, f64); /* { dg-error {passing 'svfloat64_t' to argument 3 of 'svldnt1_gather_offset', which when loading 'svfloat32_t' expects a vector of 32-bit integers} } */\n+\n+  svldnt1_gather_offset (pg, s64_ptr, s32); /* { dg-error {passing 'svint32_t' to argument 3 of 'svldnt1_gather_offset', which when loading 'svint64_t' expects a vector of 64-bit integers} } */\n+  svldnt1_gather_offset (pg, s64_ptr, u32); /* { dg-error {passing 'svuint32_t' to argument 3 of 'svldnt1_gather_offset', which when loading 'svint64_t' expects a vector of 64-bit integers} } */\n+  svldnt1_gather_offset (pg, s64_ptr, f32); /* { dg-error {passing 'svfloat32_t' to argument 3 of 'svldnt1_gather_offset', which when loading 'svint64_t' expects a vector of 64-bit integers} } */\n+  svldnt1_gather_offset (pg, s64_ptr, s64);\n+  svldnt1_gather_offset (pg, s64_ptr, u64);\n+  svldnt1_gather_offset (pg, s64_ptr, f64); /* { dg-error {passing 'svfloat64_t' to argument 3 of 'svldnt1_gather_offset', which when loading 'svint64_t' expects a vector of 64-bit integers} } */\n+\n+  svldnt1_gather_offset (pg, u64_ptr, s32); /* { dg-error {passing 'svint32_t' to argument 3 of 'svldnt1_gather_offset', which when loading 'svuint64_t' expects a vector of 64-bit integers} } */\n+  svldnt1_gather_offset (pg, u64_ptr, u32); /* { dg-error {passing 'svuint32_t' to argument 3 of 'svldnt1_gather_offset', which when loading 'svuint64_t' expects a vector of 64-bit integers} } */\n+  svldnt1_gather_offset (pg, u64_ptr, f32); /* { dg-error {passing 'svfloat32_t' to argument 3 of 'svldnt1_gather_offset', which when loading 'svuint64_t' expects a vector of 64-bit integers} } */\n+  svldnt1_gather_offset (pg, u64_ptr, s64);\n+  svldnt1_gather_offset (pg, u64_ptr, u64);\n+  svldnt1_gather_offset (pg, u64_ptr, f64); /* { dg-error {passing 'svfloat64_t' to argument 3 of 'svldnt1_gather_offset', which when loading 'svuint64_t' expects a vector of 64-bit integers} } */\n+\n+  svldnt1_gather_offset (pg, f64_ptr, s32); /* { dg-error {passing 'svint32_t' to argument 3 of 'svldnt1_gather_offset', which when loading 'svfloat64_t' expects a vector of 64-bit integers} } */\n+  svldnt1_gather_offset (pg, f64_ptr, u32); /* { dg-error {passing 'svuint32_t' to argument 3 of 'svldnt1_gather_offset', which when loading 'svfloat64_t' expects a vector of 64-bit integers} } */\n+  svldnt1_gather_offset (pg, f64_ptr, f32); /* { dg-error {passing 'svfloat32_t' to argument 3 of 'svldnt1_gather_offset', which when loading 'svfloat64_t' expects a vector of 64-bit integers} } */\n+  svldnt1_gather_offset (pg, f64_ptr, s64);\n+  svldnt1_gather_offset (pg, f64_ptr, u64);\n+  svldnt1_gather_offset (pg, f64_ptr, f64); /* { dg-error {passing 'svfloat64_t' to argument 3 of 'svldnt1_gather_offset', which when loading 'svfloat64_t' expects a vector of 64-bit integers} } */\n+\n+  return svldnt1_gather_offset (pg, s32_ptr, u32); /* { dg-error {incompatible types when returning type 'svint32_t' but 'svuint32_t' was expected} } */\n+}"}, {"sha": "6bb9b7f1debefa3f4589eb2bd75d9a36800a4403", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/load_gather_sv_restricted_2.c", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fload_gather_sv_restricted_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fload_gather_sv_restricted_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fload_gather_sv_restricted_2.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,75 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99\" } */\n+\n+#include <arm_sve.h>\n+\n+#pragma GCC target (\"arch=armv8.2-a+sve2\")\n+\n+struct s { signed char x; };\n+\n+svuint64_t\n+f1 (svbool_t pg, signed char *s8_ptr, short *s16_ptr,\n+    int32_t *s32_ptr, uint32_t *u32_ptr, float *f32_ptr,\n+    int64_t *s64_ptr, uint64_t *u64_ptr, double *f64_ptr,\n+    void *void_ptr, struct s *s_ptr, _Complex float *cf32_ptr, int **ptr_ptr,\n+    svint8_t s8, svint16_t s16,\n+    svint32_t s32, svuint32_t u32, svfloat32_t f32,\n+    svint64_t s64, svuint64_t u64, svfloat64_t f64)\n+{\n+  svldnt1_gather_index (pg, s64_ptr); /* { dg-error {too few arguments to function 'svldnt1_gather_index'} } */\n+  svldnt1_gather_index (pg, s64_ptr, s64, 0); /* { dg-error {too many arguments to function 'svldnt1_gather_index'} } */\n+  svldnt1_gather_index (0, s64_ptr, s64); /* { dg-error {passing 'int' to argument 1 of 'svldnt1_gather_index', which expects 'svbool_t'} } */\n+  svldnt1_gather_index (pg, 0, s64); /* { dg-error {passing 'int' to argument 2 of 'svldnt1_gather_index', which expects a pointer type} } */\n+  svldnt1_gather_index (pg, (uint64_t *) 0, s64);\n+  svldnt1_gather_index (pg, void_ptr, s64); /* { dg-error {passing 'void \\*' to argument 2 of 'svldnt1_gather_index', but 'void' is not a valid SVE element type} } */\n+  svldnt1_gather_index (pg, s_ptr, s64); /* { dg-error {passing 'struct s \\*' to argument 2 of 'svldnt1_gather_index', but 'struct s' is not a valid SVE element type} } */\n+  svldnt1_gather_index (pg, cf32_ptr, s32); /* { dg-error {passing '_Complex float \\*' to argument 2 of 'svldnt1_gather_index', but 'complex float' is not a valid SVE element type} } */\n+  svldnt1_gather_index (pg, ptr_ptr, u64); /* { dg-error {passing 'int \\*\\*' to argument 2 of 'svldnt1_gather_index', but 'int \\*' is not a valid SVE element type} } */\n+  svldnt1_gather_index (pg, u32, 0); /* { dg-error {passing 'svuint32_t' to argument 2 of 'svldnt1_gather_index', which expects a pointer type} } */\n+  /* { dg-message {an explicit type suffix is needed when using a vector of base addresses} \"\" { target *-*-* } .-1 } */\n+  svldnt1_gather_index (pg, u64, 0); /* { dg-error {passing 'svuint64_t' to argument 2 of 'svldnt1_gather_index', which expects a pointer type} } */\n+  /* { dg-message {an explicit type suffix is needed when using a vector of base addresses} \"\" { target *-*-* } .-1 } */\n+\n+  svldnt1_gather_index (pg, s8_ptr, s8); /* { dg-error {passing 'signed char \\*' to argument 2 of 'svldnt1_gather_index', which expects a pointer to 32-bit or 64-bit elements} } */\n+  svldnt1_gather_index (pg, s8_ptr, s64); /* { dg-error {passing 'signed char \\*' to argument 2 of 'svldnt1_gather_index', which expects a pointer to 32-bit or 64-bit elements} } */\n+  svldnt1_gather_index (pg, s16_ptr, s16); /* { dg-error {passing 'short( int)? \\*' to argument 2 of 'svldnt1_gather_index', which expects a pointer to 32-bit or 64-bit elements} } */\n+  svldnt1_gather_index (pg, s16_ptr, s64); /* { dg-error {passing 'short( int)? \\*' to argument 2 of 'svldnt1_gather_index', which expects a pointer to 32-bit or 64-bit elements} } */\n+\n+  svldnt1_gather_index (pg, s32_ptr, s32); /* { dg-error {'svldnt1_gather_index' does not support 32-bit vector type 'svint32_t'} } */\n+  svldnt1_gather_index (pg, s32_ptr, u32); /* { dg-error {'svldnt1_gather_index' does not support 32-bit vector type 'svint32_t'} } */\n+  svldnt1_gather_index (pg, s32_ptr, f32); /* { dg-error {'svldnt1_gather_index' does not support 32-bit vector type 'svint32_t'} } */\n+  svldnt1_gather_index (pg, s32_ptr, s64); /* { dg-error {'svldnt1_gather_index' does not support 32-bit vector type 'svint32_t'} } */\n+\n+  svldnt1_gather_index (pg, u32_ptr, s32); /* { dg-error {'svldnt1_gather_index' does not support 32-bit vector type 'svuint32_t'} } */\n+  svldnt1_gather_index (pg, u32_ptr, u32); /* { dg-error {'svldnt1_gather_index' does not support 32-bit vector type 'svuint32_t'} } */\n+  svldnt1_gather_index (pg, u32_ptr, f32); /* { dg-error {'svldnt1_gather_index' does not support 32-bit vector type 'svuint32_t'} } */\n+  svldnt1_gather_index (pg, u32_ptr, s64); /* { dg-error {'svldnt1_gather_index' does not support 32-bit vector type 'svuint32_t'} } */\n+\n+  svldnt1_gather_index (pg, f32_ptr, s32); /* { dg-error {'svldnt1_gather_index' does not support 32-bit vector type 'svfloat32_t'} } */\n+  svldnt1_gather_index (pg, f32_ptr, u32); /* { dg-error {'svldnt1_gather_index' does not support 32-bit vector type 'svfloat32_t'} } */\n+  svldnt1_gather_index (pg, f32_ptr, f32); /* { dg-error {'svldnt1_gather_index' does not support 32-bit vector type 'svfloat32_t'} } */\n+  svldnt1_gather_index (pg, f32_ptr, s64); /* { dg-error {'svldnt1_gather_index' does not support 32-bit vector type 'svfloat32_t'} } */\n+\n+  svldnt1_gather_index (pg, s64_ptr, s32); /* { dg-error {passing 'svint32_t' to argument 3 of 'svldnt1_gather_index', which when loading 'svint64_t' expects a vector of 64-bit integers} } */\n+  svldnt1_gather_index (pg, s64_ptr, u32); /* { dg-error {passing 'svuint32_t' to argument 3 of 'svldnt1_gather_index', which when loading 'svint64_t' expects a vector of 64-bit integers} } */\n+  svldnt1_gather_index (pg, s64_ptr, f32); /* { dg-error {passing 'svfloat32_t' to argument 3 of 'svldnt1_gather_index', which when loading 'svint64_t' expects a vector of 64-bit integers} } */\n+  svldnt1_gather_index (pg, s64_ptr, s64);\n+  svldnt1_gather_index (pg, s64_ptr, u64);\n+  svldnt1_gather_index (pg, s64_ptr, f64); /* { dg-error {passing 'svfloat64_t' to argument 3 of 'svldnt1_gather_index', which when loading 'svint64_t' expects a vector of 64-bit integers} } */\n+\n+  svldnt1_gather_index (pg, u64_ptr, s32); /* { dg-error {passing 'svint32_t' to argument 3 of 'svldnt1_gather_index', which when loading 'svuint64_t' expects a vector of 64-bit integers} } */\n+  svldnt1_gather_index (pg, u64_ptr, u32); /* { dg-error {passing 'svuint32_t' to argument 3 of 'svldnt1_gather_index', which when loading 'svuint64_t' expects a vector of 64-bit integers} } */\n+  svldnt1_gather_index (pg, u64_ptr, f32); /* { dg-error {passing 'svfloat32_t' to argument 3 of 'svldnt1_gather_index', which when loading 'svuint64_t' expects a vector of 64-bit integers} } */\n+  svldnt1_gather_index (pg, u64_ptr, s64);\n+  svldnt1_gather_index (pg, u64_ptr, u64);\n+  svldnt1_gather_index (pg, u64_ptr, f64); /* { dg-error {passing 'svfloat64_t' to argument 3 of 'svldnt1_gather_index', which when loading 'svuint64_t' expects a vector of 64-bit integers} } */\n+\n+  svldnt1_gather_index (pg, f64_ptr, s32); /* { dg-error {passing 'svint32_t' to argument 3 of 'svldnt1_gather_index', which when loading 'svfloat64_t' expects a vector of 64-bit integers} } */\n+  svldnt1_gather_index (pg, f64_ptr, u32); /* { dg-error {passing 'svuint32_t' to argument 3 of 'svldnt1_gather_index', which when loading 'svfloat64_t' expects a vector of 64-bit integers} } */\n+  svldnt1_gather_index (pg, f64_ptr, f32); /* { dg-error {passing 'svfloat32_t' to argument 3 of 'svldnt1_gather_index', which when loading 'svfloat64_t' expects a vector of 64-bit integers} } */\n+  svldnt1_gather_index (pg, f64_ptr, s64);\n+  svldnt1_gather_index (pg, f64_ptr, u64);\n+  svldnt1_gather_index (pg, f64_ptr, f64); /* { dg-error {passing 'svfloat64_t' to argument 3 of 'svldnt1_gather_index', which when loading 'svfloat64_t' expects a vector of 64-bit integers} } */\n+\n+  return svldnt1_gather_index (pg, s64_ptr, s64); /* { dg-error {incompatible types when returning type 'svint64_t' but 'svuint64_t' was expected} } */\n+}"}, {"sha": "ac57546e2831d588990b4c79721189e1b82d1f65", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/mul_lane_1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fmul_lane_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fmul_lane_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fmul_lane_1.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,32 @@\n+#include <arm_sve.h>\n+\n+#pragma GCC target (\"arch=armv8.2-a+sve2\")\n+\n+void\n+f2 (svint8_t s8, svuint8_t u8,\n+    svint16_t s16, svuint16_t u16, svfloat16_t f16,\n+    svint32_t s32, svuint32_t u32, svfloat32_t f32,\n+    svint64_t s64, svuint64_t u64, svfloat64_t f64)\n+{\n+  s8 = svmul_lane (s8, s8, 1); /* { dg-error {'svmul_lane' has no form that takes 'svint8_t' arguments} } */\n+  u8 = svmul_lane (u8, u8, 1); /* { dg-error {'svmul_lane' has no form that takes 'svuint8_t' arguments} } */\n+  s16 = svmul_lane (s16, s16, 1);\n+  u16 = svmul_lane (u16, u16, 1);\n+  f16 = svmul_lane (f16, f16, 1);\n+  s32 = svmul_lane (s32, s32, 1);\n+  u32 = svmul_lane (u32, u32, 1);\n+  f32 = svmul_lane (f32, f32, 1);\n+  s64 = svmul_lane (s64, s64, 1);\n+  u64 = svmul_lane (u64, u64, 1);\n+  f64 = svmul_lane (f64, f64, 1);\n+}\n+\n+#pragma GCC target (\"arch=armv8-a+sve\")\n+\n+void\n+f1 (svint8_t s8, svuint8_t u8, svint16_t s16)\n+{\n+  s8 = svmul_lane (s8, s8, 1); /* { dg-error {'svmul_lane' has no form that takes 'svint8_t' arguments} } */\n+  u8 = svmul_lane (u8, u8, 1); /* { dg-error {'svmul_lane' has no form that takes 'svuint8_t' arguments} } */\n+  s16 = svmul_lane (s16, s16, 1); /* { dg-error {ACLE function 'svmul_lane_s16' requires ISA extension 'sve2'} } */\n+}"}, {"sha": "9b92d7515bee30e242edf812c17af19548a2cd26", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/shift_left_imm_long_1.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fshift_left_imm_long_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fshift_left_imm_long_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fshift_left_imm_long_1.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-std=c99 -Wall -Wextra\" } */\n+\n+#include <arm_sve.h>\n+\n+#pragma GCC target (\"arch=armv8.2-a+sve2\")\n+\n+void\n+f1 (svbool_t pg, svint8_t s8, svuint8_t u8, svint16_t s16, svuint16_t u16,\n+    svint32_t s32, svuint32_t u32, svint64_t s64, svuint64_t u64,\n+    svfloat16_t f16, svfloat32_t f32, svfloat64_t f64, int x)\n+{\n+  const int one = 1;\n+  s16 = svshllb (s8, x); /* { dg-error {argument 2 of 'svshllb' must be an integer constant expression} } */\n+  s16 = svshllb (s8, one); /* { dg-error {argument 2 of 'svshllb' must be an integer constant expression} } */\n+  s16 = svshllb (s8, -1); /* { dg-error {passing -1 to argument 2 of 'svshllb', which expects a value in the range \\[0, 7\\]} } */\n+  s16 = svshllb (s8, 0.0);\n+  s16 = svshllb (s8, 0);\n+  s16 = svshllb (s8, 1);\n+  s16 = svshllb (s8, 1 + 1);\n+  s16 = svshllb (s8, 7);\n+  s16 = svshllb (s8, 7.2);\n+  s16 = svshllb (s8, 8); /* { dg-error {passing 8 to argument 2 of 'svshllb', which expects a value in the range \\[0, 7\\]} } */\n+  s16 = svshllb (s8, 8.2); /* { dg-error {passing 8 to argument 2 of 'svshllb', which expects a value in the range \\[0, 7\\]} } */\n+  s16 = svshllb (s8, (1ULL << 62) + 1); /* { dg-error {passing [^ ]* to argument 2 of 'svshllb', which expects a value in the range \\[0, 7\\]} } */\n+  u16 = svshllb (u8, -1); /* { dg-error {passing -1 to argument 2 of 'svshllb', which expects a value in the range \\[0, 7\\]} } */\n+  u16 = svshllb (u8, 0);\n+  u16 = svshllb (u8, 1);\n+  u16 = svshllb (u8, 7);\n+  u16 = svshllb (u8, 8); /* { dg-error {passing 8 to argument 2 of 'svshllb', which expects a value in the range \\[0, 7\\]} } */\n+  s32 = svshllb (s16, -1); /* { dg-error {passing -1 to argument 2 of 'svshllb', which expects a value in the range \\[0, 15\\]} } */\n+  s32 = svshllb (s16, 0);\n+  s32 = svshllb (s16, 1);\n+  s32 = svshllb (s16, 15);\n+  s32 = svshllb (s16, 16); /* { dg-error {passing 16 to argument 2 of 'svshllb', which expects a value in the range \\[0, 15\\]} } */\n+  u32 = svshllb (u16, -1); /* { dg-error {passing -1 to argument 2 of 'svshllb', which expects a value in the range \\[0, 15\\]} } */\n+  u32 = svshllb (u16, 0);\n+  u32 = svshllb (u16, 1);\n+  u32 = svshllb (u16, 15);\n+  u32 = svshllb (u16, 16); /* { dg-error {passing 16 to argument 2 of 'svshllb', which expects a value in the range \\[0, 15\\]} } */\n+  s64 = svshllb (s32, -1); /* { dg-error {passing -1 to argument 2 of 'svshllb', which expects a value in the range \\[0, 31\\]} } */\n+  s64 = svshllb (s32, 0);\n+  s64 = svshllb (s32, 1);\n+  s64 = svshllb (s32, 31);\n+  s64 = svshllb (s32, 32); /* { dg-error {passing 32 to argument 2 of 'svshllb', which expects a value in the range \\[0, 31\\]} } */\n+  u64 = svshllb (u32, -1); /* { dg-error {passing -1 to argument 2 of 'svshllb', which expects a value in the range \\[0, 31\\]} } */\n+  u64 = svshllb (u32, 0);\n+  u64 = svshllb (u32, 1);\n+  u64 = svshllb (u32, 31);\n+  u64 = svshllb (u32, 32); /* { dg-error {passing 32 to argument 2 of 'svshllb', which expects a value in the range \\[0, 31\\]} } */\n+  svshllb (s64, -1); /* { dg-error {'svshllb' has no form that takes 'svint64_t' arguments} } */\n+  svshllb (u64, -1); /* { dg-error {'svshllb' has no form that takes 'svuint64_t' arguments} } */\n+  svshllb (pg, -1); /* { dg-error {'svshllb' has no form that takes 'svbool_t' arguments} } */\n+  svshllb (f16, -1); /* { dg-error {'svshllb' has no form that takes 'svfloat16_t' arguments} } */\n+  svshllb (f32, -1); /* { dg-error {'svshllb' has no form that takes 'svfloat32_t' arguments} } */\n+  svshllb (f64, -1); /* { dg-error {'svshllb' has no form that takes 'svfloat64_t' arguments} } */\n+}"}, {"sha": "e5ca2e842f5b8c6bdd2cf6ec3af7f01a0318a5fe", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/shift_left_imm_to_uint_1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fshift_left_imm_to_uint_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fshift_left_imm_to_uint_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fshift_left_imm_to_uint_1.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-std=c99 -Wall -Wextra\" } */\n+\n+#include <arm_sve.h>\n+\n+#pragma GCC target (\"arch=armv8.2-a+sve2\")\n+\n+void\n+f1 (svbool_t pg, svuint8_t u8, svint8_t s8, svint16_t s16, svint32_t s32,\n+    svint64_t s64, int x)\n+{\n+  const int one = 1;\n+  svuint16_t u16 __attribute__((unused));\n+  svuint32_t u32 __attribute__((unused));\n+  svuint64_t u64 __attribute__((unused));\n+  u8 = svqshlu_x (pg, u8, 1); /* { dg-error {'svqshlu_x' has no form that takes 'svuint8_t' arguments} } */\n+  u8 = svqshlu_x (pg, s8, x); /* { dg-error {argument 3 of 'svqshlu_x' must be an integer constant expression} } */\n+  u8 = svqshlu_x (pg, s8, one); /* { dg-error {argument 3 of 'svqshlu_x' must be an integer constant expression} } */\n+  u8 = svqshlu_x (pg, s8, -1); /* { dg-error {passing -1 to argument 3 of 'svqshlu_x', which expects a value in the range \\[0, 7\\]} } */\n+  u8 = svqshlu_x (pg, s8, 0.0);\n+  u8 = svqshlu_x (pg, s8, 0);\n+  u8 = svqshlu_x (pg, s8, 1);\n+  u8 = svqshlu_x (pg, s8, 1 + 1);\n+  u8 = svqshlu_x (pg, s8, 7);\n+  u8 = svqshlu_x (pg, s8, 7.2);\n+  u8 = svqshlu_x (pg, s8, 8); /* { dg-error {passing 8 to argument 3 of 'svqshlu_x', which expects a value in the range \\[0, 7\\]} } */\n+  u8 = svqshlu_x (pg, s8, 8.2); /* { dg-error {passing 8 to argument 3 of 'svqshlu_x', which expects a value in the range \\[0, 7\\]} } */\n+  u8 = svqshlu_x (pg, s8, (1ULL << 62) + 1); /* { dg-error {passing [^ ]* to argument 3 of 'svqshlu_x', which expects a value in the range \\[0, 7\\]} } */\n+  u16 = svqshlu_x (pg, s16, -1); /* { dg-error {passing -1 to argument 3 of 'svqshlu_x', which expects a value in the range \\[0, 15\\]} } */\n+  u16 = svqshlu_x (pg, s16, 0);\n+  u16 = svqshlu_x (pg, s16, 1);\n+  u16 = svqshlu_x (pg, s16, 15);\n+  u16 = svqshlu_x (pg, s16, 16); /* { dg-error {passing 16 to argument 3 of 'svqshlu_x', which expects a value in the range \\[0, 15\\]} } */\n+  u32 = svqshlu_x (pg, s32, -1); /* { dg-error {passing -1 to argument 3 of 'svqshlu_x', which expects a value in the range \\[0, 31\\]} } */\n+  u32 = svqshlu_x (pg, s32, 0);\n+  u32 = svqshlu_x (pg, s32, 1);\n+  u32 = svqshlu_x (pg, s32, 31);\n+  u32 = svqshlu_x (pg, s32, 32); /* { dg-error {passing 32 to argument 3 of 'svqshlu_x', which expects a value in the range \\[0, 31\\]} } */\n+  u64 = svqshlu_x (pg, s64, -1); /* { dg-error {passing -1 to argument 3 of 'svqshlu_x', which expects a value in the range \\[0, 63\\]} } */\n+  u64 = svqshlu_x (pg, s64, 0);\n+  u64 = svqshlu_x (pg, s64, 1);\n+  u64 = svqshlu_x (pg, s64, 63);\n+  u64 = svqshlu_x (pg, s64, 64); /* { dg-error {passing 64 to argument 3 of 'svqshlu_x', which expects a value in the range \\[0, 63\\]} } */\n+}"}, {"sha": "765380bfc2ab55bb86208358da7b35d3591759a2", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/shift_left_imm_to_uint_2.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fshift_left_imm_to_uint_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fshift_left_imm_to_uint_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fshift_left_imm_to_uint_2.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-std=c99 -Wall -Wextra\" } */\n+\n+#include <arm_sve.h>\n+\n+#pragma GCC target (\"arch=armv8.2-a+sve2\")\n+\n+void\n+f1 (svbool_t pg, svint8_t s8, svint16_t s16, svint32_t s32, svint64_t s64,\n+    int x)\n+{\n+  const int one = 1;\n+  svuint8_t u8 __attribute__((unused));\n+  svuint16_t u16 __attribute__((unused));\n+  svuint32_t u32 __attribute__((unused));\n+  svuint64_t u64 __attribute__((unused));\n+  u8 = svqshlu_n_s8_x (pg, s8, x); /* { dg-error {argument 3 of 'svqshlu_n_s8_x' must be an integer constant expression} } */\n+  u8 = svqshlu_n_s8_x (pg, s8, one); /* { dg-error {argument 3 of 'svqshlu_n_s8_x' must be an integer constant expression} } */\n+  u8 = svqshlu_n_s8_x (pg, s8, -1); /* { dg-error {passing -1 to argument 3 of 'svqshlu_n_s8_x', which expects a value in the range \\[0, 7\\]} } */\n+  u8 = svqshlu_n_s8_x (pg, s8, 0.0);\n+  u8 = svqshlu_n_s8_x (pg, s8, 0);\n+  u8 = svqshlu_n_s8_x (pg, s8, 1);\n+  u8 = svqshlu_n_s8_x (pg, s8, 1 + 1);\n+  u8 = svqshlu_n_s8_x (pg, s8, 7);\n+  u8 = svqshlu_n_s8_x (pg, s8, 7.2);\n+  u8 = svqshlu_n_s8_x (pg, s8, 8); /* { dg-error {passing 8 to argument 3 of 'svqshlu_n_s8_x', which expects a value in the range \\[0, 7\\]} } */\n+  u8 = svqshlu_n_s8_x (pg, s8, 8.2); /* { dg-error {passing 8 to argument 3 of 'svqshlu_n_s8_x', which expects a value in the range \\[0, 7\\]} } */\n+  u8 = svqshlu_n_s8_x (pg, s8, (1ULL << 62) + 1); /* { dg-error {passing [^ ]* to argument 3 of 'svqshlu_n_s8_x', which expects a value in the range \\[0, 7\\]} } */\n+  u16 = svqshlu_n_s16_x (pg, s16, -1); /* { dg-error {passing -1 to argument 3 of 'svqshlu_n_s16_x', which expects a value in the range \\[0, 15\\]} } */\n+  u16 = svqshlu_n_s16_x (pg, s16, 0);\n+  u16 = svqshlu_n_s16_x (pg, s16, 1);\n+  u16 = svqshlu_n_s16_x (pg, s16, 15);\n+  u16 = svqshlu_n_s16_x (pg, s16, 16); /* { dg-error {passing 16 to argument 3 of 'svqshlu_n_s16_x', which expects a value in the range \\[0, 15\\]} } */\n+  u32 = svqshlu_n_s32_x (pg, s32, -1); /* { dg-error {passing -1 to argument 3 of 'svqshlu_n_s32_x', which expects a value in the range \\[0, 31\\]} } */\n+  u32 = svqshlu_n_s32_x (pg, s32, 0);\n+  u32 = svqshlu_n_s32_x (pg, s32, 1);\n+  u32 = svqshlu_n_s32_x (pg, s32, 31);\n+  u32 = svqshlu_n_s32_x (pg, s32, 32); /* { dg-error {passing 32 to argument 3 of 'svqshlu_n_s32_x', which expects a value in the range \\[0, 31\\]} } */\n+  u64 = svqshlu_n_s64_x (pg, s64, -1); /* { dg-error {passing -1 to argument 3 of 'svqshlu_n_s64_x', which expects a value in the range \\[0, 63\\]} } */\n+  u64 = svqshlu_n_s64_x (pg, s64, 0);\n+  u64 = svqshlu_n_s64_x (pg, s64, 1);\n+  u64 = svqshlu_n_s64_x (pg, s64, 63);\n+  u64 = svqshlu_n_s64_x (pg, s64, 64); /* { dg-error {passing 64 to argument 3 of 'svqshlu_n_s64_x', which expects a value in the range \\[0, 63\\]} } */\n+}"}, {"sha": "6536679d5be3fb274dd47c0c43e912aaa362fcf4", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/shift_right_imm_narrowb_1.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fshift_right_imm_narrowb_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fshift_right_imm_narrowb_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fshift_right_imm_narrowb_1.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-do compile } */\n+\n+#include <arm_sve.h>\n+\n+#pragma GCC target (\"arch=armv8.2-a+sve2\")\n+\n+void\n+f1 (svbool_t pg, svint8_t s8, svuint8_t u8,\n+    svint16_t s16, svuint16_t u16,\n+    svint32_t s32, svuint32_t u32,\n+    svint64_t s64, svuint64_t u64,\n+    svfloat32_t f32, int x)\n+{\n+  const int one = 1;\n+  svshrnb (u16); /* { dg-error {too few arguments to function 'svshrnb'} } */\n+  svshrnb (u16, u16, 1); /* { dg-error {too many arguments to function 'svshrnb'} } */\n+\n+  svshrnb (u16, x); /* { dg-error {argument 2 of 'svshrnb' must be an integer constant expression} } */\n+  svshrnb (u16, one); /* { dg-error {argument 2 of 'svshrnb' must be an integer constant expression} } */\n+  svshrnb (u16, 0.4); /* { dg-error {passing 0 to argument 2 of 'svshrnb', which expects a value in the range \\[1, 8\\]} } */\n+  svshrnb (u16, 1.0);\n+\n+  svshrnb (pg, 1); /* { dg-error {'svshrnb' has no form that takes 'svbool_t' arguments} } */\n+\n+  svshrnb (u8, -1); /* { dg-error {'svshrnb' has no form that takes 'svuint8_t' arguments} } */\n+  svshrnb (u8, 1); /* { dg-error {'svshrnb' has no form that takes 'svuint8_t' arguments} } */\n+  svshrnb (u8, 100); /* { dg-error {'svshrnb' has no form that takes 'svuint8_t' arguments} } */\n+\n+  svshrnb (s8, 1); /* { dg-error {'svshrnb' has no form that takes 'svint8_t' arguments} } */\n+\n+  svshrnb (u16, -1); /* { dg-error {passing -1 to argument 2 of 'svshrnb', which expects a value in the range \\[1, 8\\]} } */\n+  svshrnb (u16, 0); /* { dg-error {passing 0 to argument 2 of 'svshrnb', which expects a value in the range \\[1, 8\\]} } */\n+  svshrnb (u16, 1);\n+  svshrnb (u16, 8);\n+  svshrnb (u16, 9); /* { dg-error {passing 9 to argument 2 of 'svshrnb', which expects a value in the range \\[1, 8\\]} } */\n+\n+  svshrnb (s16, -1); /* { dg-error {passing -1 to argument 2 of 'svshrnb', which expects a value in the range \\[1, 8\\]} } */\n+  svshrnb (s16, 0); /* { dg-error {passing 0 to argument 2 of 'svshrnb', which expects a value in the range \\[1, 8\\]} } */\n+  svshrnb (s16, 1);\n+  svshrnb (s16, 8);\n+  svshrnb (s16, 9); /* { dg-error {passing 9 to argument 2 of 'svshrnb', which expects a value in the range \\[1, 8\\]} } */\n+\n+  svshrnb (u32, -1); /* { dg-error {passing -1 to argument 2 of 'svshrnb', which expects a value in the range \\[1, 16\\]} } */\n+  svshrnb (u32, 0); /* { dg-error {passing 0 to argument 2 of 'svshrnb', which expects a value in the range \\[1, 16\\]} } */\n+  svshrnb (u32, 1);\n+  svshrnb (u32, 16);\n+  svshrnb (u32, 17); /* { dg-error {passing 17 to argument 2 of 'svshrnb', which expects a value in the range \\[1, 16\\]} } */\n+\n+  svshrnb (s32, -1); /* { dg-error {passing -1 to argument 2 of 'svshrnb', which expects a value in the range \\[1, 16\\]} } */\n+  svshrnb (s32, 0); /* { dg-error {passing 0 to argument 2 of 'svshrnb', which expects a value in the range \\[1, 16\\]} } */\n+  svshrnb (s32, 1);\n+  svshrnb (s32, 16);\n+  svshrnb (s32, 17); /* { dg-error {passing 17 to argument 2 of 'svshrnb', which expects a value in the range \\[1, 16\\]} } */\n+\n+  svshrnb (u64, -1); /* { dg-error {passing -1 to argument 2 of 'svshrnb', which expects a value in the range \\[1, 32\\]} } */\n+  svshrnb (u64, 0); /* { dg-error {passing 0 to argument 2 of 'svshrnb', which expects a value in the range \\[1, 32\\]} } */\n+  svshrnb (u64, 1);\n+  svshrnb (u64, 32);\n+  svshrnb (u64, 33); /* { dg-error {passing 33 to argument 2 of 'svshrnb', which expects a value in the range \\[1, 32\\]} } */\n+\n+  svshrnb (s64, -1); /* { dg-error {passing -1 to argument 2 of 'svshrnb', which expects a value in the range \\[1, 32\\]} } */\n+  svshrnb (s64, 0); /* { dg-error {passing 0 to argument 2 of 'svshrnb', which expects a value in the range \\[1, 32\\]} } */\n+  svshrnb (s64, 1);\n+  svshrnb (s64, 32);\n+  svshrnb (s64, 33); /* { dg-error {passing 33 to argument 2 of 'svshrnb', which expects a value in the range \\[1, 32\\]} } */\n+\n+  svshrnb (f32, 1); /* { dg-error {'svshrnb' has no form that takes 'svfloat32_t' arguments} } */\n+\n+  svshrnb (1, 1); /* { dg-error {passing 'int' to argument 1 of 'svshrnb', which expects an SVE vector type} } */\n+}"}, {"sha": "51f9388bfb3baee30e966aacb4f7988f5c25f9e7", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/shift_right_imm_narrowb_to_uint_1.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fshift_right_imm_narrowb_to_uint_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fshift_right_imm_narrowb_to_uint_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fshift_right_imm_narrowb_to_uint_1.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do compile } */\n+\n+#include <arm_sve.h>\n+\n+#pragma GCC target (\"arch=armv8.2-a+sve2\")\n+\n+void\n+f1 (svbool_t pg, svint8_t s8, svuint8_t u8,\n+    svint16_t s16, svuint16_t u16,\n+    svint32_t s32, svuint32_t u32,\n+    svint64_t s64, svuint64_t u64,\n+    svfloat32_t f32, int x)\n+{\n+  const int one = 1;\n+  svqshrunb (s16); /* { dg-error {too few arguments to function 'svqshrunb'} } */\n+  svqshrunb (s16, s16, 1); /* { dg-error {too many arguments to function 'svqshrunb'} } */\n+\n+  svqshrunb (s16, x); /* { dg-error {argument 2 of 'svqshrunb' must be an integer constant expression} } */\n+  svqshrunb (s16, one); /* { dg-error {argument 2 of 'svqshrunb' must be an integer constant expression} } */\n+  svqshrunb (s16, 0.4); /* { dg-error {passing 0 to argument 2 of 'svqshrunb', which expects a value in the range \\[1, 8\\]} } */\n+  svqshrunb (s16, 1.0);\n+\n+  svqshrunb (pg, 1); /* { dg-error {'svqshrunb' has no form that takes 'svbool_t' arguments} } */\n+\n+  svqshrunb (u8, -1); /* { dg-error {'svqshrunb' has no form that takes 'svuint8_t' arguments} } */\n+  svqshrunb (u8, 1); /* { dg-error {'svqshrunb' has no form that takes 'svuint8_t' arguments} } */\n+  svqshrunb (u8, 100); /* { dg-error {'svqshrunb' has no form that takes 'svuint8_t' arguments} } */\n+\n+  svqshrunb (s8, 1); /* { dg-error {'svqshrunb' has no form that takes 'svint8_t' arguments} } */\n+\n+  svqshrunb (u16, 1); /* { dg-error {'svqshrunb' has no form that takes 'svuint16_t' arguments} } */\n+\n+  svqshrunb (s16, -1); /* { dg-error {passing -1 to argument 2 of 'svqshrunb', which expects a value in the range \\[1, 8\\]} } */\n+  svqshrunb (s16, 0); /* { dg-error {passing 0 to argument 2 of 'svqshrunb', which expects a value in the range \\[1, 8\\]} } */\n+  svqshrunb (s16, 1);\n+  svqshrunb (s16, 8);\n+  svqshrunb (s16, 9); /* { dg-error {passing 9 to argument 2 of 'svqshrunb', which expects a value in the range \\[1, 8\\]} } */\n+\n+  svqshrunb (u32, 1); /* { dg-error {'svqshrunb' has no form that takes 'svuint32_t' arguments} } */\n+\n+  svqshrunb (s32, -1); /* { dg-error {passing -1 to argument 2 of 'svqshrunb', which expects a value in the range \\[1, 16\\]} } */\n+  svqshrunb (s32, 0); /* { dg-error {passing 0 to argument 2 of 'svqshrunb', which expects a value in the range \\[1, 16\\]} } */\n+  svqshrunb (s32, 1);\n+  svqshrunb (s32, 16);\n+  svqshrunb (s32, 17); /* { dg-error {passing 17 to argument 2 of 'svqshrunb', which expects a value in the range \\[1, 16\\]} } */\n+\n+  svqshrunb (u64, 1); /* { dg-error {'svqshrunb' has no form that takes 'svuint64_t' arguments} } */\n+\n+  svqshrunb (s64, -1); /* { dg-error {passing -1 to argument 2 of 'svqshrunb', which expects a value in the range \\[1, 32\\]} } */\n+  svqshrunb (s64, 0); /* { dg-error {passing 0 to argument 2 of 'svqshrunb', which expects a value in the range \\[1, 32\\]} } */\n+  svqshrunb (s64, 1);\n+  svqshrunb (s64, 32);\n+  svqshrunb (s64, 33); /* { dg-error {passing 33 to argument 2 of 'svqshrunb', which expects a value in the range \\[1, 32\\]} } */\n+\n+  svqshrunb (f32, 1); /* { dg-error {'svqshrunb' has no form that takes 'svfloat32_t' arguments} } */\n+\n+  svqshrunb (1, 1); /* { dg-error {passing 'int' to argument 1 of 'svqshrunb', which expects an SVE vector type} } */\n+}"}, {"sha": "6c31cf8ec31656c63af3091747fa4b07fd0488d7", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/shift_right_imm_narrowt_1.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fshift_right_imm_narrowt_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fshift_right_imm_narrowt_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fshift_right_imm_narrowt_1.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,81 @@\n+/* { dg-do compile } */\n+\n+#include <arm_sve.h>\n+\n+#pragma GCC target (\"arch=armv8.2-a+sve2\")\n+\n+void\n+f1 (svbool_t pg, svint8_t s8, svuint8_t u8,\n+    svint16_t s16, svuint16_t u16,\n+    svint32_t s32, svuint32_t u32,\n+    svint64_t s64, svuint64_t u64,\n+    svfloat32_t f32, int x)\n+{\n+  const int one = 1;\n+  svshrnt (u8, u16); /* { dg-error {too few arguments to function 'svshrnt'} } */\n+  svshrnt (u8, u16, u16, 1); /* { dg-error {too many arguments to function 'svshrnt'} } */\n+\n+  svshrnt (u16, u16, 1); /* { dg-error {passing 'svuint16_t' instead of the expected 'svuint8_t' to argument 1 of 'svshrnt', after passing 'svuint16_t' to argument 2} } */\n+  svshrnt (s16, u16, 1); /* { dg-error {passing 'svint16_t' instead of the expected 'svuint8_t' to argument 1 of 'svshrnt', after passing 'svuint16_t' to argument 2} } */\n+  svshrnt (s8, u16, 1); /* { dg-error {arguments 1 and 2 of 'svshrnt' must have the same signedness, but the values passed here have type 'svint8_t' and 'svuint16_t' respectively} } */\n+  svshrnt (pg, u16, 1); /* { dg-error {passing 'svbool_t' instead of the expected 'svuint8_t' to argument 1 of 'svshrnt', after passing 'svuint16_t' to argument 2} } */\n+\n+  svshrnt (s16, s16, 1); /* { dg-error {passing 'svint16_t' instead of the expected 'svint8_t' to argument 1 of 'svshrnt', after passing 'svint16_t' to argument 2} } */\n+  svshrnt (u16, s16, 1); /* { dg-error {passing 'svuint16_t' instead of the expected 'svint8_t' to argument 1 of 'svshrnt', after passing 'svint16_t' to argument 2} } */\n+  svshrnt (u8, s16, 1); /* { dg-error {arguments 1 and 2 of 'svshrnt' must have the same signedness, but the values passed here have type 'svuint8_t' and 'svint16_t' respectively} } */\n+  svshrnt (pg, s16, 1); /* { dg-error {passing 'svbool_t' instead of the expected 'svint8_t' to argument 1 of 'svshrnt', after passing 'svint16_t' to argument 2} } */\n+\n+  svshrnt (u8, u16, x); /* { dg-error {argument 3 of 'svshrnt' must be an integer constant expression} } */\n+  svshrnt (u8, u16, one); /* { dg-error {argument 3 of 'svshrnt' must be an integer constant expression} } */\n+  svshrnt (u8, u16, 0.4); /* { dg-error {passing 0 to argument 3 of 'svshrnt', which expects a value in the range \\[1, 8\\]} } */\n+  svshrnt (u8, u16, 1.0);\n+\n+  svshrnt (pg, pg, 1); /* { dg-error {'svshrnt' has no form that takes 'svbool_t' arguments} } */\n+\n+  svshrnt (u8, u8, -1); /* { dg-error {'svshrnt' has no form that takes 'svuint8_t' arguments} } */\n+  svshrnt (u8, u8, 1); /* { dg-error {'svshrnt' has no form that takes 'svuint8_t' arguments} } */\n+  svshrnt (u8, u8, 100); /* { dg-error {'svshrnt' has no form that takes 'svuint8_t' arguments} } */\n+\n+  svshrnt (s8, s8, 1); /* { dg-error {'svshrnt' has no form that takes 'svint8_t' arguments} } */\n+\n+  svshrnt (u8, u16, -1); /* { dg-error {passing -1 to argument 3 of 'svshrnt', which expects a value in the range \\[1, 8\\]} } */\n+  svshrnt (u8, u16, 0); /* { dg-error {passing 0 to argument 3 of 'svshrnt', which expects a value in the range \\[1, 8\\]} } */\n+  svshrnt (u8, u16, 1);\n+  svshrnt (u8, u16, 8);\n+  svshrnt (u8, u16, 9); /* { dg-error {passing 9 to argument 3 of 'svshrnt', which expects a value in the range \\[1, 8\\]} } */\n+\n+  svshrnt (s8, s16, -1); /* { dg-error {passing -1 to argument 3 of 'svshrnt', which expects a value in the range \\[1, 8\\]} } */\n+  svshrnt (s8, s16, 0); /* { dg-error {passing 0 to argument 3 of 'svshrnt', which expects a value in the range \\[1, 8\\]} } */\n+  svshrnt (s8, s16, 1);\n+  svshrnt (s8, s16, 8);\n+  svshrnt (s8, s16, 9); /* { dg-error {passing 9 to argument 3 of 'svshrnt', which expects a value in the range \\[1, 8\\]} } */\n+\n+  svshrnt (u16, u32, -1); /* { dg-error {passing -1 to argument 3 of 'svshrnt', which expects a value in the range \\[1, 16\\]} } */\n+  svshrnt (u16, u32, 0); /* { dg-error {passing 0 to argument 3 of 'svshrnt', which expects a value in the range \\[1, 16\\]} } */\n+  svshrnt (u16, u32, 1);\n+  svshrnt (u16, u32, 16);\n+  svshrnt (u16, u32, 17); /* { dg-error {passing 17 to argument 3 of 'svshrnt', which expects a value in the range \\[1, 16\\]} } */\n+\n+  svshrnt (s16, s32, -1); /* { dg-error {passing -1 to argument 3 of 'svshrnt', which expects a value in the range \\[1, 16\\]} } */\n+  svshrnt (s16, s32, 0); /* { dg-error {passing 0 to argument 3 of 'svshrnt', which expects a value in the range \\[1, 16\\]} } */\n+  svshrnt (s16, s32, 1);\n+  svshrnt (s16, s32, 16);\n+  svshrnt (s16, s32, 17); /* { dg-error {passing 17 to argument 3 of 'svshrnt', which expects a value in the range \\[1, 16\\]} } */\n+\n+  svshrnt (u32, u64, -1); /* { dg-error {passing -1 to argument 3 of 'svshrnt', which expects a value in the range \\[1, 32\\]} } */\n+  svshrnt (u32, u64, 0); /* { dg-error {passing 0 to argument 3 of 'svshrnt', which expects a value in the range \\[1, 32\\]} } */\n+  svshrnt (u32, u64, 1);\n+  svshrnt (u32, u64, 32);\n+  svshrnt (u32, u64, 33); /* { dg-error {passing 33 to argument 3 of 'svshrnt', which expects a value in the range \\[1, 32\\]} } */\n+\n+  svshrnt (s32, s64, -1); /* { dg-error {passing -1 to argument 3 of 'svshrnt', which expects a value in the range \\[1, 32\\]} } */\n+  svshrnt (s32, s64, 0); /* { dg-error {passing 0 to argument 3 of 'svshrnt', which expects a value in the range \\[1, 32\\]} } */\n+  svshrnt (s32, s64, 1);\n+  svshrnt (s32, s64, 32);\n+  svshrnt (s32, s64, 33); /* { dg-error {passing 33 to argument 3 of 'svshrnt', which expects a value in the range \\[1, 32\\]} } */\n+\n+  svshrnt (f32, f32, 1); /* { dg-error {'svshrnt' has no form that takes 'svfloat32_t' arguments} } */\n+\n+  svshrnt (1, s32, 1); /* { dg-error {passing 'int' to argument 1 of 'svshrnt', which expects an SVE vector type} } */\n+  svshrnt (s32, 1, 1); /* { dg-error {passing 'int' to argument 2 of 'svshrnt', which expects an SVE vector type} } */\n+}"}, {"sha": "2e35ad304bf58c4637e710b30bc2bd1b5145775b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/shift_right_imm_narrowt_to_uint_1.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fshift_right_imm_narrowt_to_uint_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fshift_right_imm_narrowt_to_uint_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fshift_right_imm_narrowt_to_uint_1.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,64 @@\n+/* { dg-do compile } */\n+\n+#include <arm_sve.h>\n+\n+#pragma GCC target (\"arch=armv8.2-a+sve2\")\n+\n+void\n+f1 (svbool_t pg, svint8_t s8, svuint8_t u8,\n+    svint16_t s16, svuint16_t u16,\n+    svint32_t s32, svuint32_t u32,\n+    svint64_t s64, svuint64_t u64,\n+    svfloat32_t f32, int x)\n+{\n+  const int one = 1;\n+  svqshrunt (u8, s16); /* { dg-error {too few arguments to function 'svqshrunt'} } */\n+  svqshrunt (u8, s16, s16, 1); /* { dg-error {too many arguments to function 'svqshrunt'} } */\n+\n+  svqshrunt (u16, s16, 1); /* { dg-error {passing 'svuint16_t' instead of the expected 'svuint8_t' to argument 1 of 'svqshrunt', after passing 'svint16_t' to argument 2} } */\n+  svqshrunt (s16, s16, 1); /* { dg-error {passing 'svint16_t' to argument 1 of 'svqshrunt', which expects a vector of unsigned integers} } */\n+  svqshrunt (s8, s16, 1); /* { dg-error {passing 'svint8_t' to argument 1 of 'svqshrunt', which expects a vector of unsigned integers} } */\n+  svqshrunt (pg, s16, 1); /* { dg-error {passing 'svbool_t' to argument 1 of 'svqshrunt', which expects a vector of unsigned integers} } */\n+\n+  svqshrunt (u8, s16, x); /* { dg-error {argument 3 of 'svqshrunt' must be an integer constant expression} } */\n+  svqshrunt (u8, s16, one); /* { dg-error {argument 3 of 'svqshrunt' must be an integer constant expression} } */\n+  svqshrunt (u8, s16, 0.4); /* { dg-error {passing 0 to argument 3 of 'svqshrunt', which expects a value in the range \\[1, 8\\]} } */\n+  svqshrunt (u8, s16, 1.0);\n+\n+  svqshrunt (u8, pg, 1); /* { dg-error {'svqshrunt' has no form that takes 'svbool_t' arguments} } */\n+\n+  svqshrunt (u8, u8, -1); /* { dg-error {'svqshrunt' has no form that takes 'svuint8_t' arguments} } */\n+  svqshrunt (u8, u8, 1); /* { dg-error {'svqshrunt' has no form that takes 'svuint8_t' arguments} } */\n+  svqshrunt (u8, u8, 100); /* { dg-error {'svqshrunt' has no form that takes 'svuint8_t' arguments} } */\n+\n+  svqshrunt (u8, s8, 1); /* { dg-error {'svqshrunt' has no form that takes 'svint8_t' arguments} } */\n+\n+  svqshrunt (u8, u16, 1); /* { dg-error {'svqshrunt' has no form that takes 'svuint16_t' arguments} } */\n+\n+  svqshrunt (u8, s16, -1); /* { dg-error {passing -1 to argument 3 of 'svqshrunt', which expects a value in the range \\[1, 8\\]} } */\n+  svqshrunt (u8, s16, 0); /* { dg-error {passing 0 to argument 3 of 'svqshrunt', which expects a value in the range \\[1, 8\\]} } */\n+  svqshrunt (u8, s16, 1);\n+  svqshrunt (u8, s16, 8);\n+  svqshrunt (u8, s16, 9); /* { dg-error {passing 9 to argument 3 of 'svqshrunt', which expects a value in the range \\[1, 8\\]} } */\n+\n+  svqshrunt (u16, u32, 1); /* { dg-error {'svqshrunt' has no form that takes 'svuint32_t' arguments} } */\n+\n+  svqshrunt (u16, s32, -1); /* { dg-error {passing -1 to argument 3 of 'svqshrunt', which expects a value in the range \\[1, 16\\]} } */\n+  svqshrunt (u16, s32, 0); /* { dg-error {passing 0 to argument 3 of 'svqshrunt', which expects a value in the range \\[1, 16\\]} } */\n+  svqshrunt (u16, s32, 1);\n+  svqshrunt (u16, s32, 16);\n+  svqshrunt (u16, s32, 17); /* { dg-error {passing 17 to argument 3 of 'svqshrunt', which expects a value in the range \\[1, 16\\]} } */\n+\n+  svqshrunt (u32, u64, 1); /* { dg-error {'svqshrunt' has no form that takes 'svuint64_t' arguments} } */\n+\n+  svqshrunt (u32, s64, -1); /* { dg-error {passing -1 to argument 3 of 'svqshrunt', which expects a value in the range \\[1, 32\\]} } */\n+  svqshrunt (u32, s64, 0); /* { dg-error {passing 0 to argument 3 of 'svqshrunt', which expects a value in the range \\[1, 32\\]} } */\n+  svqshrunt (u32, s64, 1);\n+  svqshrunt (u32, s64, 32);\n+  svqshrunt (u32, s64, 33); /* { dg-error {passing 33 to argument 3 of 'svqshrunt', which expects a value in the range \\[1, 32\\]} } */\n+\n+  svqshrunt (u16, f32, 1); /* { dg-error {'svqshrunt' has no form that takes 'svfloat32_t' arguments} } */\n+\n+  svqshrunt (1, u32, 1); /* { dg-error {passing 'int' to argument 1 of 'svqshrunt', which expects an SVE vector type} } */\n+  svqshrunt (u32, 1, 1); /* { dg-error {passing 'int' to argument 2 of 'svqshrunt', which expects an SVE vector type} } */\n+}"}, {"sha": "5e31362c412e827f139f8bd2f9408937b7d4176c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/store_scatter_index_restricted_1.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fstore_scatter_index_restricted_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fstore_scatter_index_restricted_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fstore_scatter_index_restricted_1.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,94 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99\" } */\n+\n+#include <arm_sve.h>\n+\n+#pragma GCC target (\"arch=armv8.2-a+sve2\")\n+\n+struct s { signed char x; };\n+\n+svuint32_t\n+f1 (svbool_t pg, signed char *s8_ptr, short *s16_ptr,\n+    int32_t *s32_ptr, uint32_t *u32_ptr, float *f32_ptr,\n+    int64_t *s64_ptr, uint64_t *u64_ptr, double *f64_ptr,\n+    void *void_ptr, struct s *s_ptr, _Complex float *cf64_ptr,\n+    svint8_t s8, svuint8_t u8, svint16_t s16, svuint16_t u16, svfloat16_t f16,\n+    svint32_t s32, svuint32_t u32, svfloat32_t f32,\n+    svint64_t s64, svuint64_t u64, svfloat64_t f64, struct s s)\n+{\n+  svstnt1_scatter_index (pg, s64_ptr, s64); /* { dg-error {too few arguments to function 'svstnt1_scatter_index'} } */\n+  svstnt1_scatter_index (pg, s64_ptr, s64, s64, 0); /* { dg-error {too many arguments to function 'svstnt1_scatter_index'} } */\n+  svstnt1_scatter_index (0, s64_ptr, s64, s64); /* { dg-error {passing 'int' to argument 1 of 'svstnt1_scatter_index', which expects 'svbool_t'} } */\n+  svstnt1_scatter_index (pg, 0, s64, s64);\n+  svstnt1_scatter_index (pg, (int64_t *) 0, s64, s64);\n+  svstnt1_scatter_index (pg, void_ptr, s64, s64);\n+  svstnt1_scatter_index (pg, s_ptr, s64, s64); /* { dg-warning \"passing argument 2 of 'svstnt1_scatter_s64index_s64' from incompatible pointer type\" } */\n+  svstnt1_scatter_index (pg, f32_ptr, s64, s64); /* { dg-warning \"passing argument 2 of 'svstnt1_scatter_s64index_s64' from incompatible pointer type\" } */\n+  svstnt1_scatter_index (pg, f64_ptr, s64, f64);\n+  svstnt1_scatter_index (pg, cf64_ptr, s64, f64); /* { dg-warning \"passing argument 2 of 'svstnt1_scatter_s64index_f64' from incompatible pointer type\" } */\n+  svstnt1_scatter_index (pg, s, s64, s64); /* { dg-error {passing 'struct s' to argument 2 of 'svstnt1_scatter_index', which expects a vector or pointer base address} } */\n+\n+  svstnt1_scatter_index (pg, u32, void_ptr, s32); /* { dg-warning \"passing argument 3 of 'svstnt1_scatter_u32base_index_s32' makes integer from pointer without a cast\" } */\n+  svstnt1_scatter_index (pg, u32, pg, s32); /* { dg-error {passing 'svbool_t' to argument 3 of 'svstnt1_scatter_index', which expects 'int64_t'} } */\n+  svstnt1_scatter_index (pg, u32, s32, s32); /* { dg-error {passing 'svint32_t' to argument 3 of 'svstnt1_scatter_index', which expects 'int64_t'} } */\n+\n+  svstnt1_scatter_index (pg, void_ptr, u64, pg); /* { dg-error {passing 'svbool_t' to argument 4 of 'svstnt1_scatter_index', which expects a vector of 32-bit or 64-bit elements} } */\n+\n+  svstnt1_scatter_index (pg, s8_ptr, u64, s8); /* { dg-error {passing 'svint8_t' to argument 4 of 'svstnt1_scatter_index', which expects a vector of 32-bit or 64-bit elements} } */\n+  svstnt1_scatter_index (pg, s8_ptr, u64, u8); /* { dg-error {passing 'svuint8_t' to argument 4 of 'svstnt1_scatter_index', which expects a vector of 32-bit or 64-bit elements} } */\n+\n+  svstnt1_scatter_index (pg, s16_ptr, u64, s16); /* { dg-error {passing 'svint16_t' to argument 4 of 'svstnt1_scatter_index', which expects a vector of 32-bit or 64-bit elements} } */\n+  svstnt1_scatter_index (pg, s16_ptr, u64, u16); /* { dg-error {passing 'svuint16_t' to argument 4 of 'svstnt1_scatter_index', which expects a vector of 32-bit or 64-bit elements} } */\n+  svstnt1_scatter_index (pg, s16_ptr, u64, f16); /* { dg-error {passing 'svfloat16_t' to argument 4 of 'svstnt1_scatter_index', which expects a vector of 32-bit or 64-bit elements} } */\n+\n+  svstnt1_scatter_index (pg, u32, 0, s32);\n+  svstnt1_scatter_index (pg, s32, 0, s32); /* { dg-error {passing 'svint32_t' to argument 2 of 'svstnt1_scatter_index', which expects 'svuint32_t'} } */\n+\n+  svstnt1_scatter_index (pg, u32, 0, u32);\n+  svstnt1_scatter_index (pg, s32, 0, u32); /* { dg-error {passing 'svint32_t' to argument 2 of 'svstnt1_scatter_index', which expects 'svuint32_t'} } */\n+\n+  svstnt1_scatter_index (pg, u32, 0, f32);\n+  svstnt1_scatter_index (pg, s32, 0, f32); /* { dg-error {passing 'svint32_t' to argument 2 of 'svstnt1_scatter_index', which expects 'svuint32_t'} } */\n+\n+  svstnt1_scatter_index (pg, u64, 0, s64);\n+  svstnt1_scatter_index (pg, s64, 0, s64); /* { dg-error {passing 'svint64_t' to argument 2 of 'svstnt1_scatter_index', which expects 'svuint64_t'} } */\n+\n+  svstnt1_scatter_index (pg, u64, 0, u64);\n+  svstnt1_scatter_index (pg, s64, 0, u64); /* { dg-error {passing 'svint64_t' to argument 2 of 'svstnt1_scatter_index', which expects 'svuint64_t'} } */\n+\n+  svstnt1_scatter_index (pg, u64, 0, f64);\n+  svstnt1_scatter_index (pg, s64, 0, f64); /* { dg-error {passing 'svint64_t' to argument 2 of 'svstnt1_scatter_index', which expects 'svuint64_t'} } */\n+\n+  svstnt1_scatter_index (pg, s32_ptr, s32, s32); /* { dg-error {when storing 'svint32_t', 'svstnt1_scatter_index' requires a vector base and a scalar index} } */\n+  svstnt1_scatter_index (pg, s32_ptr, u32, s32); /* { dg-error {when storing 'svint32_t', 'svstnt1_scatter_index' requires a vector base and a scalar index} } */\n+  svstnt1_scatter_index (pg, s32_ptr, f32, s32); /* { dg-error {when storing 'svint32_t', 'svstnt1_scatter_index' requires a vector base and a scalar index} } */\n+\n+  svstnt1_scatter_index (pg, u32_ptr, s32, u32); /* { dg-error {when storing 'svuint32_t', 'svstnt1_scatter_index' requires a vector base and a scalar index} } */\n+  svstnt1_scatter_index (pg, u32_ptr, u32, u32); /* { dg-error {when storing 'svuint32_t', 'svstnt1_scatter_index' requires a vector base and a scalar index} } */\n+  svstnt1_scatter_index (pg, u32_ptr, f32, u32); /* { dg-error {when storing 'svuint32_t', 'svstnt1_scatter_index' requires a vector base and a scalar index} } */\n+\n+  svstnt1_scatter_index (pg, f32_ptr, s32, f32); /* { dg-error {when storing 'svfloat32_t', 'svstnt1_scatter_index' requires a vector base and a scalar index} } */\n+  svstnt1_scatter_index (pg, f32_ptr, u32, f32); /* { dg-error {when storing 'svfloat32_t', 'svstnt1_scatter_index' requires a vector base and a scalar index} } */\n+  svstnt1_scatter_index (pg, f32_ptr, f32, f32);  /* { dg-error {when storing 'svfloat32_t', 'svstnt1_scatter_index' requires a vector base and a scalar index} } */\n+\n+  svstnt1_scatter_index (pg, s64_ptr, s32, s64); /* { dg-error {passing 'svint32_t' to argument 3 of 'svstnt1_scatter_index', which when storing 'svint64_t' expects a vector of 64-bit integers} } */\n+  svstnt1_scatter_index (pg, s64_ptr, u32, s64); /* { dg-error {passing 'svuint32_t' to argument 3 of 'svstnt1_scatter_index', which when storing 'svint64_t' expects a vector of 64-bit integers} } */\n+  svstnt1_scatter_index (pg, s64_ptr, f32, s64); /* { dg-error {passing 'svfloat32_t' to argument 3 of 'svstnt1_scatter_index', which when storing 'svint64_t' expects a vector of 64-bit integers} } */\n+  svstnt1_scatter_index (pg, s64_ptr, s64, s64);\n+  svstnt1_scatter_index (pg, s64_ptr, u64, s64);\n+  svstnt1_scatter_index (pg, s64_ptr, f64, s64); /* { dg-error {passing 'svfloat64_t' to argument 3 of 'svstnt1_scatter_index', which when storing 'svint64_t' expects a vector of 64-bit integers} } */\n+\n+  svstnt1_scatter_index (pg, u64_ptr, s32, u64); /* { dg-error {passing 'svint32_t' to argument 3 of 'svstnt1_scatter_index', which when storing 'svuint64_t' expects a vector of 64-bit integers} } */\n+  svstnt1_scatter_index (pg, u64_ptr, u32, u64); /* { dg-error {passing 'svuint32_t' to argument 3 of 'svstnt1_scatter_index', which when storing 'svuint64_t' expects a vector of 64-bit integers} } */\n+  svstnt1_scatter_index (pg, u64_ptr, f32, u64); /* { dg-error {passing 'svfloat32_t' to argument 3 of 'svstnt1_scatter_index', which when storing 'svuint64_t' expects a vector of 64-bit integers} } */\n+  svstnt1_scatter_index (pg, u64_ptr, s64, u64);\n+  svstnt1_scatter_index (pg, u64_ptr, u64, u64);\n+  svstnt1_scatter_index (pg, u64_ptr, f64, u64); /* { dg-error {passing 'svfloat64_t' to argument 3 of 'svstnt1_scatter_index', which when storing 'svuint64_t' expects a vector of 64-bit integers} } */\n+\n+  svstnt1_scatter_index (pg, f64_ptr, s32, f64); /* { dg-error {passing 'svint32_t' to argument 3 of 'svstnt1_scatter_index', which when storing 'svfloat64_t' expects a vector of 64-bit integers} } */\n+  svstnt1_scatter_index (pg, f64_ptr, u32, f64); /* { dg-error {passing 'svuint32_t' to argument 3 of 'svstnt1_scatter_index', which when storing 'svfloat64_t' expects a vector of 64-bit integers} } */\n+  svstnt1_scatter_index (pg, f64_ptr, f32, f64); /* { dg-error {passing 'svfloat32_t' to argument 3 of 'svstnt1_scatter_index', which when storing 'svfloat64_t' expects a vector of 64-bit integers} } */\n+  svstnt1_scatter_index (pg, f64_ptr, s64, f64);\n+  svstnt1_scatter_index (pg, f64_ptr, u64, f64);\n+  svstnt1_scatter_index (pg, f64_ptr, f64, f64); /* { dg-error {passing 'svfloat64_t' to argument 3 of 'svstnt1_scatter_index', which when storing 'svfloat64_t' expects a vector of 64-bit integers} } */\n+}"}, {"sha": "aef152acf5b29437cb84dd70efde768b78882871", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/store_scatter_offset_restricted_1.c", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fstore_scatter_offset_restricted_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fstore_scatter_offset_restricted_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fstore_scatter_offset_restricted_1.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,103 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99\" } */\n+\n+#include <arm_sve.h>\n+\n+#pragma GCC target (\"arch=armv8.2-a+sve2\")\n+\n+struct s { signed char x; };\n+\n+svuint32_t\n+f1 (svbool_t pg, signed char *s8_ptr, short *s16_ptr,\n+    int32_t *s32_ptr, uint32_t *u32_ptr, float *f32_ptr,\n+    int64_t *s64_ptr, uint64_t *u64_ptr, double *f64_ptr,\n+    void *void_ptr, struct s *s_ptr, _Complex float *cf32_ptr,\n+    svint8_t s8, svuint8_t u8, svint16_t s16, svuint16_t u16, svfloat16_t f16,\n+    svint32_t s32, svuint32_t u32, svfloat32_t f32,\n+    svint64_t s64, svuint64_t u64, svfloat64_t f64, struct s s)\n+{\n+  svstnt1_scatter_offset (pg, s32_ptr, u32); /* { dg-error {too few arguments to function 'svstnt1_scatter_offset'} } */\n+  svstnt1_scatter_offset (pg, s32_ptr, u32, s32, 0); /* { dg-error {too many arguments to function 'svstnt1_scatter_offset'} } */\n+  svstnt1_scatter_offset (0, s32_ptr, u32, s32); /* { dg-error {passing 'int' to argument 1 of 'svstnt1_scatter_offset', which expects 'svbool_t'} } */\n+  svstnt1_scatter_offset (pg, 0, u32, s32);\n+  svstnt1_scatter_offset (pg, (int *) 0, u32, s32);\n+  svstnt1_scatter_offset (pg, void_ptr, u32, s32);\n+  svstnt1_scatter_offset (pg, s_ptr, u32, s32); /* { dg-warning \"passing argument 2 of 'svstnt1_scatter_u32offset_s32' from incompatible pointer type\" } */\n+  svstnt1_scatter_offset (pg, f32_ptr, u32, s32); /* { dg-warning \"passing argument 2 of 'svstnt1_scatter_u32offset_s32' from incompatible pointer type\" } */\n+  svstnt1_scatter_offset (pg, f32_ptr, u32, f32);\n+  svstnt1_scatter_offset (pg, cf32_ptr, u32, f32); /* { dg-warning \"passing argument 2 of 'svstnt1_scatter_u32offset_f32' from incompatible pointer type\" } */\n+  svstnt1_scatter_offset (pg, s, u32, s32); /* { dg-error {passing 'struct s' to argument 2 of 'svstnt1_scatter_offset', which expects a vector or pointer base address} } */\n+\n+  svstnt1_scatter_offset (pg, u32, void_ptr, s32); /* { dg-warning \"passing argument 3 of 'svstnt1_scatter_u32base_offset_s32' makes integer from pointer without a cast\" } */\n+  svstnt1_scatter_offset (pg, u32, pg, s32); /* { dg-error {passing 'svbool_t' to argument 3 of 'svstnt1_scatter_offset', which expects 'int64_t'} } */\n+  svstnt1_scatter_offset (pg, u32, s32, s32); /* { dg-error {passing 'svint32_t' to argument 3 of 'svstnt1_scatter_offset', which expects 'int64_t'} } */\n+\n+  svstnt1_scatter_offset (pg, void_ptr, u32, pg); /* { dg-error {passing 'svbool_t' to argument 4 of 'svstnt1_scatter_offset', which expects a vector of 32-bit or 64-bit elements} } */\n+\n+  svstnt1_scatter_offset (pg, s8_ptr, u32, s8); /* { dg-error {passing 'svint8_t' to argument 4 of 'svstnt1_scatter_offset', which expects a vector of 32-bit or 64-bit elements} } */\n+  svstnt1_scatter_offset (pg, s8_ptr, u32, u8); /* { dg-error {passing 'svuint8_t' to argument 4 of 'svstnt1_scatter_offset', which expects a vector of 32-bit or 64-bit elements} } */\n+\n+  svstnt1_scatter_offset (pg, s16_ptr, u32, s16); /* { dg-error {passing 'svint16_t' to argument 4 of 'svstnt1_scatter_offset', which expects a vector of 32-bit or 64-bit elements} } */\n+  svstnt1_scatter_offset (pg, s16_ptr, u32, u16); /* { dg-error {passing 'svuint16_t' to argument 4 of 'svstnt1_scatter_offset', which expects a vector of 32-bit or 64-bit elements} } */\n+  svstnt1_scatter_offset (pg, s16_ptr, u32, f16); /* { dg-error {passing 'svfloat16_t' to argument 4 of 'svstnt1_scatter_offset', which expects a vector of 32-bit or 64-bit elements} } */\n+\n+  svstnt1_scatter_offset (pg, u32, 0, s32);\n+  svstnt1_scatter_offset (pg, s32, 0, s32); /* { dg-error {passing 'svint32_t' to argument 2 of 'svstnt1_scatter_offset', which expects 'svuint32_t'} } */\n+\n+  svstnt1_scatter_offset (pg, u32, 0, u32);\n+  svstnt1_scatter_offset (pg, s32, 0, u32); /* { dg-error {passing 'svint32_t' to argument 2 of 'svstnt1_scatter_offset', which expects 'svuint32_t'} } */\n+\n+  svstnt1_scatter_offset (pg, u32, 0, f32);\n+  svstnt1_scatter_offset (pg, s32, 0, f32); /* { dg-error {passing 'svint32_t' to argument 2 of 'svstnt1_scatter_offset', which expects 'svuint32_t'} } */\n+\n+  svstnt1_scatter_offset (pg, u64, 0, s64);\n+  svstnt1_scatter_offset (pg, s64, 0, s64); /* { dg-error {passing 'svint64_t' to argument 2 of 'svstnt1_scatter_offset', which expects 'svuint64_t'} } */\n+\n+  svstnt1_scatter_offset (pg, u64, 0, u64);\n+  svstnt1_scatter_offset (pg, s64, 0, u64); /* { dg-error {passing 'svint64_t' to argument 2 of 'svstnt1_scatter_offset', which expects 'svuint64_t'} } */\n+\n+  svstnt1_scatter_offset (pg, u64, 0, f64);\n+  svstnt1_scatter_offset (pg, s64, 0, f64); /* { dg-error {passing 'svint64_t' to argument 2 of 'svstnt1_scatter_offset', which expects 'svuint64_t'} } */\n+\n+  svstnt1_scatter_offset (pg, s32_ptr, s32, s32); /* { dg-error {'svstnt1_scatter_offset' does not support 32-bit sign-extended offsets} } */\n+  svstnt1_scatter_offset (pg, s32_ptr, u32, s32);\n+  svstnt1_scatter_offset (pg, s32_ptr, f32, s32); /* { dg-error {passing 'svfloat32_t' to argument 3 of 'svstnt1_scatter_offset', which when storing 'svint32_t' expects a vector of 32-bit integers} } */\n+  svstnt1_scatter_offset (pg, s32_ptr, s64, s32); /* { dg-error {passing 'svint64_t' to argument 3 of 'svstnt1_scatter_offset', which when storing 'svint32_t' expects a vector of 32-bit integers} } */\n+  svstnt1_scatter_offset (pg, s32_ptr, u64, s32); /* { dg-error {passing 'svuint64_t' to argument 3 of 'svstnt1_scatter_offset', which when storing 'svint32_t' expects a vector of 32-bit integers} } */\n+  svstnt1_scatter_offset (pg, s32_ptr, f64, s32); /* { dg-error {passing 'svfloat64_t' to argument 3 of 'svstnt1_scatter_offset', which when storing 'svint32_t' expects a vector of 32-bit integers} } */\n+\n+  svstnt1_scatter_offset (pg, u32_ptr, s32, u32); /* { dg-error {'svstnt1_scatter_offset' does not support 32-bit sign-extended offsets} } */\n+  svstnt1_scatter_offset (pg, u32_ptr, u32, u32);\n+  svstnt1_scatter_offset (pg, u32_ptr, f32, u32); /* { dg-error {passing 'svfloat32_t' to argument 3 of 'svstnt1_scatter_offset', which when storing 'svuint32_t' expects a vector of 32-bit integers} } */\n+  svstnt1_scatter_offset (pg, u32_ptr, s64, u32); /* { dg-error {passing 'svint64_t' to argument 3 of 'svstnt1_scatter_offset', which when storing 'svuint32_t' expects a vector of 32-bit integers} } */\n+  svstnt1_scatter_offset (pg, u32_ptr, u64, u32); /* { dg-error {passing 'svuint64_t' to argument 3 of 'svstnt1_scatter_offset', which when storing 'svuint32_t' expects a vector of 32-bit integers} } */\n+  svstnt1_scatter_offset (pg, u32_ptr, f64, u32); /* { dg-error {passing 'svfloat64_t' to argument 3 of 'svstnt1_scatter_offset', which when storing 'svuint32_t' expects a vector of 32-bit integers} } */\n+\n+  svstnt1_scatter_offset (pg, f32_ptr, s32, f32); /* { dg-error {'svstnt1_scatter_offset' does not support 32-bit sign-extended offsets} } */\n+  svstnt1_scatter_offset (pg, f32_ptr, u32, f32);\n+  svstnt1_scatter_offset (pg, f32_ptr, f32, f32); /* { dg-error {passing 'svfloat32_t' to argument 3 of 'svstnt1_scatter_offset', which when storing 'svfloat32_t' expects a vector of 32-bit integers} } */\n+  svstnt1_scatter_offset (pg, f32_ptr, s64, f32); /* { dg-error {passing 'svint64_t' to argument 3 of 'svstnt1_scatter_offset', which when storing 'svfloat32_t' expects a vector of 32-bit integers} } */\n+  svstnt1_scatter_offset (pg, f32_ptr, u64, f32); /* { dg-error {passing 'svuint64_t' to argument 3 of 'svstnt1_scatter_offset', which when storing 'svfloat32_t' expects a vector of 32-bit integers} } */\n+  svstnt1_scatter_offset (pg, f32_ptr, f64, f32); /* { dg-error {passing 'svfloat64_t' to argument 3 of 'svstnt1_scatter_offset', which when storing 'svfloat32_t' expects a vector of 32-bit integers} } */\n+\n+  svstnt1_scatter_offset (pg, s64_ptr, s32, s64); /* { dg-error {passing 'svint32_t' to argument 3 of 'svstnt1_scatter_offset', which when storing 'svint64_t' expects a vector of 64-bit integers} } */\n+  svstnt1_scatter_offset (pg, s64_ptr, u32, s64); /* { dg-error {passing 'svuint32_t' to argument 3 of 'svstnt1_scatter_offset', which when storing 'svint64_t' expects a vector of 64-bit integers} } */\n+  svstnt1_scatter_offset (pg, s64_ptr, f32, s64); /* { dg-error {passing 'svfloat32_t' to argument 3 of 'svstnt1_scatter_offset', which when storing 'svint64_t' expects a vector of 64-bit integers} } */\n+  svstnt1_scatter_offset (pg, s64_ptr, s64, s64);\n+  svstnt1_scatter_offset (pg, s64_ptr, u64, s64);\n+  svstnt1_scatter_offset (pg, s64_ptr, f64, s64); /* { dg-error {passing 'svfloat64_t' to argument 3 of 'svstnt1_scatter_offset', which when storing 'svint64_t' expects a vector of 64-bit integers} } */\n+\n+  svstnt1_scatter_offset (pg, u64_ptr, s32, u64); /* { dg-error {passing 'svint32_t' to argument 3 of 'svstnt1_scatter_offset', which when storing 'svuint64_t' expects a vector of 64-bit integers} } */\n+  svstnt1_scatter_offset (pg, u64_ptr, u32, u64); /* { dg-error {passing 'svuint32_t' to argument 3 of 'svstnt1_scatter_offset', which when storing 'svuint64_t' expects a vector of 64-bit integers} } */\n+  svstnt1_scatter_offset (pg, u64_ptr, f32, u64); /* { dg-error {passing 'svfloat32_t' to argument 3 of 'svstnt1_scatter_offset', which when storing 'svuint64_t' expects a vector of 64-bit integers} } */\n+  svstnt1_scatter_offset (pg, u64_ptr, s64, u64);\n+  svstnt1_scatter_offset (pg, u64_ptr, u64, u64);\n+  svstnt1_scatter_offset (pg, u64_ptr, f64, u64); /* { dg-error {passing 'svfloat64_t' to argument 3 of 'svstnt1_scatter_offset', which when storing 'svuint64_t' expects a vector of 64-bit integers} } */\n+\n+  svstnt1_scatter_offset (pg, f64_ptr, s32, f64); /* { dg-error {passing 'svint32_t' to argument 3 of 'svstnt1_scatter_offset', which when storing 'svfloat64_t' expects a vector of 64-bit integers} } */\n+  svstnt1_scatter_offset (pg, f64_ptr, u32, f64); /* { dg-error {passing 'svuint32_t' to argument 3 of 'svstnt1_scatter_offset', which when storing 'svfloat64_t' expects a vector of 64-bit integers} } */\n+  svstnt1_scatter_offset (pg, f64_ptr, f32, f64); /* { dg-error {passing 'svfloat32_t' to argument 3 of 'svstnt1_scatter_offset', which when storing 'svfloat64_t' expects a vector of 64-bit integers} } */\n+  svstnt1_scatter_offset (pg, f64_ptr, s64, f64);\n+  svstnt1_scatter_offset (pg, f64_ptr, u64, f64);\n+  svstnt1_scatter_offset (pg, f64_ptr, f64, f64); /* { dg-error {passing 'svfloat64_t' to argument 3 of 'svstnt1_scatter_offset', which when storing 'svfloat64_t' expects a vector of 64-bit integers} } */\n+}"}, {"sha": "9c22af48ea5dbf95bef17711a01b1f5c0254fd51", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/tbl_tuple_1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Ftbl_tuple_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Ftbl_tuple_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Ftbl_tuple_1.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-std=c99 -Wall -Wextra\" } */\n+\n+#include <arm_sve.h>\n+\n+#pragma GCC target (\"arch=armv8.2-a+sve2\")\n+\n+svfloat64_t\n+f1 (svbool_t pg, svint8_t s8, svuint8_t u8,\n+    svint8x2_t s8x2, svuint8x2_t u8x2, svuint8x3_t u8x3)\n+{\n+  svfloat64_t f64;\n+\n+  u8 = svtbl2 (u8x2); /* { dg-error {too few arguments to function 'svtbl2'} } */\n+  u8 = svtbl2 (u8x2); /* { dg-error {too few arguments to function 'svtbl2'} } */\n+  u8 = svtbl2 (u8x2, u8, 3); /* { dg-error {too many arguments to function 'svtbl2'} } */\n+  u8 = svtbl2 (u8, u8); /* { dg-error {passing single vector 'svuint8_t' to argument 1 of 'svtbl2', which expects a tuple of 2 vectors} } */\n+  u8 = svtbl2 (u8x3, u8); /* { dg-error {passing 'svuint8x3_t' to argument 1 of 'svtbl2', which expects a tuple of 2 vectors} } */\n+  u8 = svtbl2 (pg, u8); /* { dg-error {passing 'svbool_t' to argument 1 of 'svtbl2', which expects a tuple of 2 vectors} } */\n+  u8 = svtbl2 (u8x2, u8x2); /* { dg-error {passing 'svuint8x2_t' to argument 2 of 'svtbl2', which expects a single SVE vector rather than a tuple} } */\n+  u8 = svtbl2 (u8x2, f64); /* { dg-error {passing 'svfloat64_t' to argument 2 of 'svtbl2', which expects a vector of unsigned integers} } */\n+  u8 = svtbl2 (u8x2, pg); /* { dg-error {passing 'svbool_t' to argument 2 of 'svtbl2', which expects a vector of unsigned integers} } */\n+  u8 = svtbl2 (u8x2, u8);\n+  u8 = svtbl2 (u8x2, s8); /* { dg-error {passing 'svint8_t' to argument 2 of 'svtbl2', which expects a vector of unsigned integers} } */\n+  s8 = svtbl2 (s8x2, f64); /* { dg-error {passing 'svfloat64_t' to argument 2 of 'svtbl2', which expects a vector of unsigned integers} } */\n+  s8 = svtbl2 (s8x2, pg); /* { dg-error {passing 'svbool_t' to argument 2 of 'svtbl2', which expects a vector of unsigned integers} } */\n+  s8 = svtbl2 (s8x2, u8);\n+  s8 = svtbl2 (s8x2, s8); /* { dg-error {passing 'svint8_t' to argument 2 of 'svtbl2', which expects a vector of unsigned integers} } */\n+\n+  return f64;\n+}"}, {"sha": "d59ffab40fba4ff9e7784ca7f4b5f4bf85c9f7e7", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/ternary_lane_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_lane_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_lane_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_lane_1.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -9,7 +9,7 @@ f1 (svbool_t pg, svfloat16_t f16, svfloat32_t f32, svfloat64_t f64,\n   svmla_lane (f32, f32, f32); /* { dg-error {too few arguments to function 'svmla_lane'} } */\n   svmla_lane (f32, f32, f32, 0, 0); /* { dg-error {too many arguments to function 'svmla_lane'} } */\n   svmla_lane (pg, pg, pg, 0); /* { dg-error {'svmla_lane' has no form that takes 'svbool_t' arguments} } */\n-  svmla_lane (s32, s32, s32, 0); /* { dg-error {'svmla_lane' has no form that takes 'svint32_t' arguments} } */\n+  svmla_lane (s32, s32, s32, 0); /* { dg-error {ACLE function 'svmla_lane_s32' requires ISA extension 'sve2'} \"\" { xfail aarch64_sve2 } } */\n   svmla_lane (1, f32, f32, 0); /* { dg-error {passing 'int' to argument 1 of 'svmla_lane', which expects an SVE vector type} } */\n   svmla_lane (f32, 1, f32, 0); /* { dg-error {passing 'int' to argument 2 of 'svmla_lane', which expects an SVE vector type} } */\n   svmla_lane (f32, f32, 1, 0); /* { dg-error {passing 'int' to argument 3 of 'svmla_lane', which expects an SVE vector type} } */"}, {"sha": "68e51724c6a838cf76dd0cc69f1c4152607ae2c0", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/ternary_lane_rotate_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_lane_rotate_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_lane_rotate_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_lane_rotate_1.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -9,7 +9,7 @@ f1 (svbool_t pg, svfloat16_t f16, svfloat32_t f32, svfloat64_t f64,\n   svcmla_lane (f32, f32, f32, 0); /* { dg-error {too few arguments to function 'svcmla_lane'} } */\n   svcmla_lane (f32, f32, f32, 0, 90, 90); /* { dg-error {too many arguments to function 'svcmla_lane'} } */\n   svcmla_lane (pg, pg, pg, 0, 90); /* { dg-error {'svcmla_lane' has no form that takes 'svbool_t' arguments} } */\n-  svcmla_lane (s32, s32, s32, 0, 90); /* { dg-error {'svcmla_lane' has no form that takes 'svint32_t' arguments} } */\n+  svcmla_lane (s32, s32, s32, 0, 90); /* { dg-error {ACLE function 'svcmla_lane_s32' requires ISA extension 'sve2'} \"\" { xfail aarch64_sve2 } } */\n   svcmla_lane (f64, f64, f64, 0, 90); /* { dg-error {'svcmla_lane' has no form that takes 'svfloat64_t' arguments} } */\n   svcmla_lane (1, f32, f32, 0, 90); /* { dg-error {passing 'int' to argument 1 of 'svcmla_lane', which expects an SVE vector type} } */\n   svcmla_lane (f32, 1, f32, 0, 90); /* { dg-error {passing 'int' to argument 2 of 'svcmla_lane', which expects an SVE vector type} } */"}, {"sha": "e20e1a12257c864e9619a1e4f9e73165a0b56e4c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/ternary_long_lane_1.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_long_lane_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_long_lane_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_long_lane_1.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do compile } */\n+\n+#include <arm_sve.h>\n+\n+#pragma GCC target (\"arch=armv8.2-a+sve2\")\n+\n+void\n+f1 (svbool_t pg, svint8_t s8, svuint8_t u8, svint16_t s16, svuint16_t u16,\n+    svint32_t s32, svuint32_t u32, svint64_t s64, svuint64_t u64,\n+    svfloat16_t f16, svfloat32_t f32, svfloat64_t f64, int i)\n+{\n+  svmlalb_lane (u64, u32, u32); /* { dg-error {too few arguments to function 'svmlalb_lane'} } */\n+  svmlalb_lane (u64, u32, u32, 0, 0); /* { dg-error {too many arguments to function 'svmlalb_lane'} } */\n+  svmlalb_lane (0, u16, u16, 0); /* { dg-error {passing 'int' to argument 1 of 'svmlalb_lane', which expects an SVE vector type} } */\n+  svmlalb_lane (pg, u16, u16, 0); /* { dg-error {'svmlalb_lane' has no form that takes 'svbool_t' arguments} } */\n+  svmlalb_lane (u8, u8, u8, 0); /* { dg-error {'svmlalb_lane' has no form that takes 'svuint8_t' arguments} } */\n+  svmlalb_lane (u16, u8, u8, 0); /* { dg-error {'svmlalb_lane' has no form that takes 'svuint16_t' arguments} } */\n+  svmlalb_lane (f16, u16, u16, 0); /* { dg-error {'svmlalb_lane' has no form that takes 'svfloat16_t' arguments} } */\n+  svmlalb_lane (f32, f16, f16, 0);\n+  svmlalb_lane (u32, u16, u16, 0);\n+  svmlalb_lane (u32, 0, u16, 0); /* { dg-error {passing 'int' to argument 2 of 'svmlalb_lane', which expects an SVE vector type} } */\n+  svmlalb_lane (u32, s16, u16, 0); /* { dg-error {arguments 1 and 2 of 'svmlalb_lane' must have the same signedness, but the values passed here have type 'svuint32_t' and 'svint16_t' respectively} } */\n+  svmlalb_lane (u32, u16, 0, 0); /* { dg-error {passing 'int' to argument 3 of 'svmlalb_lane', which expects an SVE vector type} } */\n+  svmlalb_lane (u32, u16, s16, 0); /* { dg-error {arguments 1 and 3 of 'svmlalb_lane' must have the same signedness, but the values passed here have type 'svuint32_t' and 'svint16_t' respectively} } */\n+  svmlalb_lane (u32, u32, u32, 0); /* { dg-error {passing 'svuint32_t' instead of the expected 'svuint16_t' to argument 2 of 'svmlalb_lane', after passing 'svuint32_t' to argument 1} } */\n+  svmlalb_lane (u32, u8, u16, 0); /* { dg-error {passing 'svuint8_t' instead of the expected 'svuint16_t' to argument 2 of 'svmlalb_lane', after passing 'svuint32_t' to argument 1} } */\n+  svmlalb_lane (u32, u16, u8, 0); /* { dg-error {passing 'svuint8_t' instead of the expected 'svuint16_t' to argument 3 of 'svmlalb_lane', after passing 'svuint32_t' to argument 1} } */\n+  svmlalb_lane (u64, u32, u32, s32); /* { dg-error {argument 4 of 'svmlalb_lane' must be an integer constant expression} } */\n+  svmlalb_lane (u64, u32, u32, i); /* { dg-error {argument 4 of 'svmlalb_lane' must be an integer constant expression} } */\n+\n+  svmlalb_lane (s32, s16, s16, 0);\n+  svmlalb_lane (s32, s16, s16, 7);\n+  svmlalb_lane (s32, s16, s16, 8); /* { dg-error {passing 8 to argument 4 of 'svmlalb_lane', which expects a value in the range \\[0, 7\\]} } */\n+  svmlalb_lane (s32, s16, s16, -1); /* { dg-error {passing -1 to argument 4 of 'svmlalb_lane', which expects a value in the range \\[0, 7\\]} } */\n+\n+  svmlalb_lane (u32, u16, u16, 0);\n+  svmlalb_lane (u32, u16, u16, 7);\n+  svmlalb_lane (u32, u16, u16, 8); /* { dg-error {passing 8 to argument 4 of 'svmlalb_lane', which expects a value in the range \\[0, 7\\]} } */\n+  svmlalb_lane (u32, u16, u16, -1); /* { dg-error {passing -1 to argument 4 of 'svmlalb_lane', which expects a value in the range \\[0, 7\\]} } */\n+\n+  svmlalb_lane (s64, s32, s32, 0);\n+  svmlalb_lane (s64, s32, s32, 3);\n+  svmlalb_lane (s64, s32, s32, 4); /* { dg-error {passing 4 to argument 4 of 'svmlalb_lane', which expects a value in the range \\[0, 3\\]} } */\n+  svmlalb_lane (s64, s32, s32, -1); /* { dg-error {passing -1 to argument 4 of 'svmlalb_lane', which expects a value in the range \\[0, 3\\]} } */\n+\n+  svmlalb_lane (u64, u32, u32, 0);\n+  svmlalb_lane (u64, u32, u32, 3);\n+  svmlalb_lane (u64, u32, u32, 4); /* { dg-error {passing 4 to argument 4 of 'svmlalb_lane', which expects a value in the range \\[0, 3\\]} } */\n+  svmlalb_lane (u64, u32, u32, -1); /* { dg-error {passing -1 to argument 4 of 'svmlalb_lane', which expects a value in the range \\[0, 3\\]} } */\n+}"}, {"sha": "c6718cf371594dc752fdce0ac11eeb5ba183e105", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/ternary_long_opt_n_1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_long_opt_n_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_long_opt_n_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_long_opt_n_1.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+\n+#include <arm_sve.h>\n+\n+#pragma GCC target (\"arch=armv8.2-a+sve2\")\n+\n+void\n+f1 (svbool_t pg, svint8_t s8, svuint8_t u8, svuint16_t u16, svuint32_t u32,\n+    svfloat16_t f16, svfloat32_t f32)\n+{\n+  svabalb (u16, u8); /* { dg-error {too few arguments to function 'svabalb'} } */\n+  svabalb (u16, u8, u8, u8); /* { dg-error {too many arguments to function 'svabalb'} } */\n+  svabalb (0, u8, u8); /* { dg-error {passing 'int' to argument 1 of 'svabalb', which expects an SVE vector type} } */\n+  svabalb (pg, u8, u8); /* { dg-error {'svabalb' has no form that takes 'svbool_t' arguments} } */\n+  svabalb (u8, u8, u8); /* { dg-error {'svabalb' has no form that takes 'svuint8_t' arguments} } */\n+  svabalb (f16, u8, u8); /* { dg-error {'svabalb' has no form that takes 'svfloat16_t' arguments} } */\n+  svabalb (f32, f16, f16); /* { dg-error {'svabalb' has no form that takes 'svfloat32_t' arguments} } */\n+  svabalb (u16, u8, u8);\n+  svabalb (u16, 0, u8); /* { dg-error {passing 'int' to argument 2 of 'svabalb', which expects an SVE vector type} } */\n+  svabalb (u16, s8, u8); /* { dg-error {arguments 1 and 2 of 'svabalb' must have the same signedness, but the values passed here have type 'svuint16_t' and 'svint8_t' respectively} } */\n+  svabalb (u16, u8, 0);\n+  svabalb (u16, u8, s8); /* { dg-error {arguments 1 and 3 of 'svabalb' must have the same signedness, but the values passed here have type 'svuint16_t' and 'svint8_t' respectively} } */\n+  svabalb (u16, u16, u16); /* { dg-error {passing 'svuint16_t' instead of the expected 'svuint8_t' to argument 2 of 'svabalb', after passing 'svuint16_t' to argument 1} } */\n+  svabalb (u32, u8, u16); /* { dg-error {passing 'svuint8_t' instead of the expected 'svuint16_t' to argument 2 of 'svabalb', after passing 'svuint32_t' to argument 1} } */\n+  svabalb (u32, u16, u8); /* { dg-error {passing 'svuint8_t' instead of the expected 'svuint16_t' to argument 3 of 'svabalb', after passing 'svuint32_t' to argument 1} } */\n+}"}, {"sha": "a748a8627c1e6a8e3fb3e6215d2058a20e5a9213", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/ternary_qq_lane_rotate_1.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_qq_lane_rotate_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_qq_lane_rotate_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_qq_lane_rotate_1.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-do compile } */\n+\n+#include <arm_sve.h>\n+\n+#pragma GCC target (\"arch=armv8.2-a+sve2\")\n+\n+void\n+f1 (svbool_t pg, svint8_t s8, svuint8_t u8, svint16_t s16, svuint16_t u16,\n+    svint32_t s32, svuint32_t u32, svint64_t s64, svuint64_t u64,\n+    svfloat32_t f32, int i)\n+{\n+  svcdot_lane (u32, u8, u8, 0); /* { dg-error {too few arguments to function 'svcdot_lane'} } */\n+  svcdot_lane (u32, u8, u8, 0, 0, 0); /* { dg-error {too many arguments to function 'svcdot_lane'} } */\n+  svcdot_lane (0, u8, u8, 0, 0); /* { dg-error {passing 'int' to argument 1 of 'svcdot_lane', which expects an SVE vector type} } */\n+  svcdot_lane (pg, u8, u8, 0, 0); /* { dg-error {'svcdot_lane' has no form that takes 'svbool_t' arguments} } */\n+  svcdot_lane (s8, s8, s8, 0, 0); /* { dg-error {'svcdot_lane' has no form that takes 'svint8_t' arguments} } */\n+  svcdot_lane (f32, s8, s8, 0, 0); /* { dg-error {'svcdot_lane' has no form that takes 'svfloat32_t' arguments} } */\n+  svcdot_lane (s32, s8, s8, 0, 0);\n+  svcdot_lane (s32, 0, s8, 0, 0); /* { dg-error {passing 'int' to argument 2 of 'svcdot_lane', which expects an SVE vector type} } */\n+  svcdot_lane (s32, s8, 0, 0, 0); /* { dg-error {passing 'int' to argument 3 of 'svcdot_lane', which expects an SVE vector type} } */\n+\n+  svcdot_lane (s32, s8, s8, 0, 0);\n+  svcdot_lane (s32, u8, s8, 0, 0); /* { dg-error {arguments 1 and 2 of 'svcdot_lane' must have the same signedness, but the values passed here have type 'svint32_t' and 'svuint8_t' respectively} } */\n+  svcdot_lane (s32, s8, u8, 0, 0); /* { dg-error {arguments 1 and 3 of 'svcdot_lane' must have the same signedness, but the values passed here have type 'svint32_t' and 'svuint8_t' respectively} } */\n+  svcdot_lane (s32, s32, s8, 0, 0); /* { dg-error {passing 'svint32_t' instead of the expected 'svint8_t' to argument 2 of 'svcdot_lane', after passing 'svint32_t' to argument 1} } */\n+  svcdot_lane (s32, s8, s32, 0, 0); /* { dg-error {passing 'svint32_t' instead of the expected 'svint8_t' to argument 3 of 'svcdot_lane', after passing 'svint32_t' to argument 1} } */\n+\n+  svcdot_lane (u32, u8, u8, 0, 0); /* { dg-error {'svcdot_lane' has no form that takes 'svuint32_t' arguments} } */\n+\n+  svcdot_lane (s64, s16, s16, 0, 0);\n+  svcdot_lane (s64, u16, s16, 0, 0); /* { dg-error {arguments 1 and 2 of 'svcdot_lane' must have the same signedness, but the values passed here have type 'svint64_t' and 'svuint16_t' respectively} } */\n+  svcdot_lane (s64, s16, u16, 0, 0); /* { dg-error {arguments 1 and 3 of 'svcdot_lane' must have the same signedness, but the values passed here have type 'svint64_t' and 'svuint16_t' respectively} } */\n+  svcdot_lane (s64, s64, s16, 0, 0); /* { dg-error {passing 'svint64_t' instead of the expected 'svint16_t' to argument 2 of 'svcdot_lane', after passing 'svint64_t' to argument 1} } */\n+  svcdot_lane (s64, s16, s64, 0, 0); /* { dg-error {passing 'svint64_t' instead of the expected 'svint16_t' to argument 3 of 'svcdot_lane', after passing 'svint64_t' to argument 1} } */\n+\n+  svcdot_lane (u64, u16, u16, 0, 0); /* { dg-error {'svcdot_lane' has no form that takes 'svuint64_t' arguments} } */\n+\n+  svcdot_lane (s32, s8, s8, i, 0); /* { dg-error {argument 4 of 'svcdot_lane' must be an integer constant expression} } */\n+  svcdot_lane (s32, s8, s8, -1, 0); /* { dg-error {passing -1 to argument 4 of 'svcdot_lane', which expects a value in the range \\[0, 3\\]} } */\n+  svcdot_lane (s32, s8, s8, 0, 0);\n+  svcdot_lane (s32, s8, s8, 3, 0);\n+  svcdot_lane (s32, s8, s8, 4, 0); /* { dg-error {passing 4 to argument 4 of 'svcdot_lane', which expects a value in the range \\[0, 3\\]} } */\n+\n+  svcdot_lane (s64, s16, s16, i, 0); /* { dg-error {argument 4 of 'svcdot_lane' must be an integer constant expression} } */\n+  svcdot_lane (s64, s16, s16, -1, 0); /* { dg-error {passing -1 to argument 4 of 'svcdot_lane', which expects a value in the range \\[0, 1\\]} } */\n+  svcdot_lane (s64, s16, s16, 0, 0);\n+  svcdot_lane (s64, s16, s16, 1, 0);\n+  svcdot_lane (s64, s16, s16, 2, 0); /* { dg-error {passing 2 to argument 4 of 'svcdot_lane', which expects a value in the range \\[0, 1\\]} } */\n+\n+  svcdot_lane (s32, s8, s8, 0, i); /* { dg-error {argument 5 of 'svcdot_lane' must be an integer constant expression} } */\n+  svcdot_lane (s32, s8, s8, 0, -90); /* { dg-error {passing -90 to argument 5 of 'svcdot_lane', which expects 0, 90, 180 or 270} } */\n+  svcdot_lane (s32, s8, s8, 0, 0);\n+  svcdot_lane (s32, s8, s8, 0, 3); /* { dg-error {passing 3 to argument 5 of 'svcdot_lane', which expects 0, 90, 180 or 270} } */\n+  svcdot_lane (s32, s8, s8, 0, 90);\n+  svcdot_lane (s32, s8, s8, 0, 180);\n+  svcdot_lane (s32, s8, s8, 0, 270);\n+}"}, {"sha": "65e749ba7ac3e448b984db68b46d1333fe82b168", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/ternary_qq_rotate_1.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_qq_rotate_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_qq_rotate_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_qq_rotate_1.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do compile } */\n+\n+#include <arm_sve.h>\n+\n+#pragma GCC target (\"arch=armv8.2-a+sve2\")\n+\n+void\n+f1 (svbool_t pg, svint8_t s8, svuint8_t u8, svint16_t s16, svuint16_t u16,\n+    svint32_t s32, svuint32_t u32, svint64_t s64, svuint64_t u64,\n+    svfloat32_t f32, int i)\n+{\n+  svcdot (u32, u8, u8); /* { dg-error {too few arguments to function 'svcdot'} } */\n+  svcdot (u32, u8, u8, 0, 0); /* { dg-error {too many arguments to function 'svcdot'} } */\n+  svcdot (0, u8, u8, 0); /* { dg-error {passing 'int' to argument 1 of 'svcdot', which expects an SVE vector type} } */\n+  svcdot (pg, u8, u8, 0); /* { dg-error {'svcdot' has no form that takes 'svbool_t' arguments} } */\n+  svcdot (s8, s8, s8, 0); /* { dg-error {'svcdot' has no form that takes 'svint8_t' arguments} } */\n+  svcdot (f32, s8, s8, 0); /* { dg-error {'svcdot' has no form that takes 'svfloat32_t' arguments} } */\n+  svcdot (s32, s8, s8, 0);\n+  svcdot (s32, 0, s8, 0); /* { dg-error {passing 'int' to argument 2 of 'svcdot', which expects an SVE vector type} } */\n+  svcdot (s32, s8, 0, 0); /* { dg-error {passing 'int' to argument 3 of 'svcdot', which expects an SVE vector type} } */\n+\n+  svcdot (s32, s8, s8, 0);\n+  svcdot (s32, u8, s8, 0); /* { dg-error {arguments 1 and 2 of 'svcdot' must have the same signedness, but the values passed here have type 'svint32_t' and 'svuint8_t' respectively} } */\n+  svcdot (s32, s8, u8, 0); /* { dg-error {arguments 1 and 3 of 'svcdot' must have the same signedness, but the values passed here have type 'svint32_t' and 'svuint8_t' respectively} } */\n+  svcdot (s32, s32, s8, 0); /* { dg-error {passing 'svint32_t' instead of the expected 'svint8_t' to argument 2 of 'svcdot', after passing 'svint32_t' to argument 1} } */\n+  svcdot (s32, s8, s32, 0); /* { dg-error {passing 'svint32_t' instead of the expected 'svint8_t' to argument 3 of 'svcdot', after passing 'svint32_t' to argument 1} } */\n+\n+  svcdot (u32, u8, u8, 0); /* { dg-error {'svcdot' has no form that takes 'svuint32_t' arguments} } */\n+\n+  svcdot (s64, s16, s16, 0);\n+  svcdot (s64, u16, s16, 0); /* { dg-error {arguments 1 and 2 of 'svcdot' must have the same signedness, but the values passed here have type 'svint64_t' and 'svuint16_t' respectively} } */\n+  svcdot (s64, s16, u16, 0); /* { dg-error {arguments 1 and 3 of 'svcdot' must have the same signedness, but the values passed here have type 'svint64_t' and 'svuint16_t' respectively} } */\n+  svcdot (s64, s64, s16, 0); /* { dg-error {passing 'svint64_t' instead of the expected 'svint16_t' to argument 2 of 'svcdot', after passing 'svint64_t' to argument 1} } */\n+  svcdot (s64, s16, s64, 0); /* { dg-error {passing 'svint64_t' instead of the expected 'svint16_t' to argument 3 of 'svcdot', after passing 'svint64_t' to argument 1} } */\n+\n+  svcdot (u64, u16, u16, 0); /* { dg-error {'svcdot' has no form that takes 'svuint64_t' arguments} } */\n+\n+  svcdot (s32, s8, s8, i); /* { dg-error {argument 4 of 'svcdot' must be an integer constant expression} } */\n+  svcdot (s32, s8, s8, -90); /* { dg-error {passing -90 to argument 4 of 'svcdot', which expects 0, 90, 180 or 270} } */\n+  svcdot (s32, s8, s8, 0);\n+  svcdot (s32, s8, s8, 3); /* { dg-error {passing 3 to argument 4 of 'svcdot', which expects 0, 90, 180 or 270} } */\n+  svcdot (s32, s8, s8, 90);\n+  svcdot (s32, s8, s8, 180);\n+  svcdot (s32, s8, s8, 270);\n+}"}, {"sha": "28111375f26eba5e7e64fe87b965504af0f01e2c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/ternary_shift_right_imm_1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_shift_right_imm_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_shift_right_imm_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_shift_right_imm_1.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-std=c99 -Wall -Wextra\" } */\n+\n+#include <arm_sve.h>\n+\n+#pragma GCC target (\"arch=armv8.2-a+sve2\")\n+\n+void\n+f1 (svbool_t pg, svuint8_t u8, svint8_t s8, svint16_t s16,\n+    svint32_t s32, svint64_t s64, int x)\n+{\n+  const int one = 1;\n+  pg = svsra (pg, pg, 1); /* { dg-error {'svsra' has no form that takes 'svbool_t' arguments} } */\n+  pg = svsra (pg, s8, 1); /* { dg-error {passing 'svint8_t' to argument 2 of 'svsra', but previous arguments had type 'svbool_t'} } */\n+  s8 = svsra (1, s8, 1); /* { dg-error {passing 'int' to argument 1 of 'svsra', which expects an SVE vector type} } */\n+  s8 = svsra (s8, u8, 1); /* { dg-error {passing 'svuint8_t' to argument 2 of 'svsra', but previous arguments had type 'svint8_t'} } */\n+  s8 = svsra (s8, pg, 1); /* { dg-error {passing 'svbool_t' to argument 2 of 'svsra', but previous arguments had type 'svint8_t'} } */\n+  s8 = svsra (s8, 1, 1); /* { dg-error {passing 'int' to argument 2 of 'svsra', which expects an SVE vector type} } */\n+  s8 = svsra (s8, s8, x); /* { dg-error {argument 3 of 'svsra' must be an integer constant expression} } */\n+  s8 = svsra (s8, s8, one); /* { dg-error {argument 3 of 'svsra' must be an integer constant expression} } */\n+  s8 = svsra (s8, s8, 0.4); /* { dg-error {passing 0 to argument 3 of 'svsra', which expects a value in the range \\[1, 8\\]} } */\n+  s8 = svsra (s8, s8, 1.0);\n+  s8 = svsra (s8, s8, 0); /* { dg-error {passing 0 to argument 3 of 'svsra', which expects a value in the range \\[1, 8\\]} } */\n+  s8 = svsra (s8, s8, 1);\n+  s8 = svsra (s8, s8, 1 + 1);\n+  s8 = svsra (s8, s8, 8);\n+  s8 = svsra (s8, s8, 9); /* { dg-error {passing 9 to argument 3 of 'svsra', which expects a value in the range \\[1, 8\\]} } */\n+  s8 = svsra (s8, s8, (1ULL << 62) + 1); /* { dg-error {passing [^ ]* to argument 3 of 'svsra', which expects a value in the range \\[1, 8\\]} } */\n+  s16 = svsra (s16, s16, 0); /* { dg-error {passing 0 to argument 3 of 'svsra', which expects a value in the range \\[1, 16\\]} } */\n+  s16 = svsra (s16, s16, 1);\n+  s16 = svsra (s16, s16, 16);\n+  s16 = svsra (s16, s16, 17); /* { dg-error {passing 17 to argument 3 of 'svsra', which expects a value in the range \\[1, 16\\]} } */\n+  s32 = svsra (s32, s32, 0); /* { dg-error {passing 0 to argument 3 of 'svsra', which expects a value in the range \\[1, 32\\]} } */\n+  s32 = svsra (s32, s32, 1);\n+  s32 = svsra (s32, s32, 32);\n+  s32 = svsra (s32, s32, 33); /* { dg-error {passing 33 to argument 3 of 'svsra', which expects a value in the range \\[1, 32\\]} } */\n+  s64 = svsra (s64, s64, 0); /* { dg-error {passing 0 to argument 3 of 'svsra', which expects a value in the range \\[1, 64\\]} } */\n+  s64 = svsra (s64, s64, 1);\n+  s64 = svsra (s64, s64, 64);\n+  s64 = svsra (s64, s64, 65); /* { dg-error {passing 65 to argument 3 of 'svsra', which expects a value in the range \\[1, 64\\]} } */\n+}"}, {"sha": "711b6a133be5729fccc2034d8eb3053da0085c8e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/ternary_uint_1.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_uint_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_uint_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_uint_1.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do compile } */\n+\n+#include <arm_sve.h>\n+\n+#pragma GCC target (\"arch=armv8.2-a+sve2\")\n+\n+void\n+f1 (svbool_t pg, svuint8_t u8, svint8_t s8, svuint16_t u16, svint16_t s16,\n+    svfloat16_t f16)\n+{\n+  svtbx (u8, u8); /* { dg-error {too few arguments to function 'svtbx'} } */\n+  svtbx (u8, u8, u8, u8); /* { dg-error {too many arguments to function 'svtbx'} } */\n+  svtbx (pg, pg, pg); /* { dg-error {passing 'svbool_t' to argument 3 of 'svtbx', which expects a vector of unsigned integers} } */\n+  svtbx (pg, pg, u8); /* { dg-error {'svtbx' has no form that takes 'svbool_t' arguments} } */\n+\n+  svtbx (u8, 0, u8); /* { dg-error {passing 'int' to argument 2 of 'svtbx', which expects an SVE vector type} } */\n+  svtbx (u8, u8, 0); /* { dg-error {passing 'int' to argument 3 of 'svtbx', which expects an SVE vector type} } */\n+  svtbx (u8, s8, u8); /* { dg-error {passing 'svint8_t' to argument 2 of 'svtbx', but previous arguments had type 'svuint8_t'} } */\n+  svtbx (u8, u8, u8);\n+  svtbx (u8, u8, s8); /* { dg-error {passing 'svint8_t' to argument 3 of 'svtbx', which expects a vector of unsigned integers} } */\n+  svtbx (u8, u8, u16); /* { dg-error {arguments 1 and 3 of 'svtbx' must have the same element size, but the values passed here have type 'svuint8_t' and 'svuint16_t' respectively} } */\n+  svtbx (u8, u8, s16); /* { dg-error {passing 'svint16_t' to argument 3 of 'svtbx', which expects a vector of unsigned integers} } */\n+  svtbx (u8, u8, pg); /* { dg-error {passing 'svbool_t' to argument 3 of 'svtbx', which expects a vector of unsigned integers} } */\n+\n+  svtbx (s8, u8, u8); /* { dg-error {passing 'svuint8_t' to argument 2 of 'svtbx', but previous arguments had type 'svint8_t'} } */\n+  svtbx (s8, s8, u8);\n+  svtbx (s8, s8, s8); /* { dg-error {passing 'svint8_t' to argument 3 of 'svtbx', which expects a vector of unsigned integers} } */\n+  svtbx (s8, s8, u16); /* { dg-error {arguments 1 and 3 of 'svtbx' must have the same element size, but the values passed here have type 'svint8_t' and 'svuint16_t' respectively} } */\n+  svtbx (s8, s8, s16); /* { dg-error {passing 'svint16_t' to argument 3 of 'svtbx', which expects a vector of unsigned integers} } */\n+  svtbx (s8, s8, pg); /* { dg-error {passing 'svbool_t' to argument 3 of 'svtbx', which expects a vector of unsigned integers} } */\n+\n+  svtbx (u16, 0, u16); /* { dg-error {passing 'int' to argument 2 of 'svtbx', which expects an SVE vector type} } */\n+  svtbx (u16, u16, u8); /* { dg-error {arguments 1 and 3 of 'svtbx' must have the same element size, but the values passed here have type 'svuint16_t' and 'svuint8_t' respectively} } */\n+  svtbx (u16, u16, s8); /* { dg-error {passing 'svint8_t' to argument 3 of 'svtbx', which expects a vector of unsigned integers} } */\n+  svtbx (u16, u16, u16);\n+  svtbx (u16, u16, s16); /* { dg-error {passing 'svint16_t' to argument 3 of 'svtbx', which expects a vector of unsigned integers} } */\n+  svtbx (u16, u16, f16); /* { dg-error {passing 'svfloat16_t' to argument 3 of 'svtbx', which expects a vector of unsigned integers} } */\n+\n+  svtbx (s16, u16, u16); /* { dg-error {passing 'svuint16_t' to argument 2 of 'svtbx', but previous arguments had type 'svint16_t'} } */\n+  svtbx (s16, s16, u8); /* { dg-error {arguments 1 and 3 of 'svtbx' must have the same element size, but the values passed here have type 'svint16_t' and 'svuint8_t' respectively} } */\n+  svtbx (s16, s16, s8); /* { dg-error {passing 'svint8_t' to argument 3 of 'svtbx', which expects a vector of unsigned integers} } */\n+  svtbx (s16, s16, u16);\n+  svtbx (s16, s16, s16); /* { dg-error {passing 'svint16_t' to argument 3 of 'svtbx', which expects a vector of unsigned integers} } */\n+  svtbx (s16, s16, f16); /* { dg-error {passing 'svfloat16_t' to argument 3 of 'svtbx', which expects a vector of unsigned integers} } */\n+\n+  svtbx (f16, f16, u8); /* { dg-error {arguments 1 and 3 of 'svtbx' must have the same element size, but the values passed here have type 'svfloat16_t' and 'svuint8_t' respectively} } */\n+  svtbx (f16, f16, s8); /* { dg-error {passing 'svint8_t' to argument 3 of 'svtbx', which expects a vector of unsigned integers} } */\n+  svtbx (f16, f16, u16);\n+  svtbx (f16, f16, s16); /* { dg-error {passing 'svint16_t' to argument 3 of 'svtbx', which expects a vector of unsigned integers} } */\n+  svtbx (f16, f16, f16); /* { dg-error {passing 'svfloat16_t' to argument 3 of 'svtbx', which expects a vector of unsigned integers} } */\n+}"}, {"sha": "92c07b8c1395265be8ec74204463d00964af2987", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/unary_convert_narrowt_1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Funary_convert_narrowt_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Funary_convert_narrowt_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Funary_convert_narrowt_1.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,30 @@\n+#include <arm_sve.h>\n+\n+#pragma GCC target (\"arch=armv8.2-a+sve2\")\n+\n+void\n+test (svbool_t pg, svint8_t s8, svuint8_t u8,\n+      svint16_t s16, svuint16_t u16, svint32_t s32, svuint32_t u32,\n+      svint64_t s64, svuint64_t u64, svfloat16_t f16, svfloat32_t f32,\n+      svfloat64_t f64)\n+{\n+  svcvtnt_f32_m (f32, pg); /* { dg-error {too few arguments to function 'svcvtnt_f32_m'} } */\n+  svcvtnt_f32_m (f32, pg, f64, 0); /* { dg-error {too many arguments to function 'svcvtnt_f32_m'} } */\n+  svcvtnt_f32_m (f16, pg, f64); /* { dg-error {passing 'svfloat16_t' to argument 1 of 'svcvtnt_f32_m', which expects 'svfloat32_t'} } */\n+  svcvtnt_f32_m (0, pg, f64); /* { dg-error {passing 'int' to argument 1 of 'svcvtnt_f32_m', which expects 'svfloat32_t'} } */\n+  svcvtnt_f32_m (pg, pg, f64); /* { dg-error {passing 'svbool_t' to argument 1 of 'svcvtnt_f32_m', which expects 'svfloat32_t'} } */\n+  svcvtnt_f32_m (f32, s32, f64); /* { dg-error {passing 'svint32_t' to argument 2 of 'svcvtnt_f32_m', which expects 'svbool_t'} } */\n+  svcvtnt_f32_m (f32, pg, 0); /* { dg-error {passing 'int' to argument 3 of 'svcvtnt_f32_m', which expects an SVE vector type} } */\n+\n+  svcvtnt_f32_m (f32, pg, s8); /* { dg-error {'svcvtnt_f32_m' has no form that takes 'svint8_t' arguments} } */\n+  svcvtnt_f32_m (f32, pg, s16); /* { dg-error {'svcvtnt_f32_m' has no form that takes 'svint16_t' arguments} } */\n+  svcvtnt_f32_m (f32, pg, s32); /* { dg-error {'svcvtnt_f32_m' has no form that takes 'svint32_t' arguments} } */\n+  svcvtnt_f32_m (f32, pg, s64); /* { dg-error {'svcvtnt_f32_m' has no form that takes 'svint64_t' arguments} } */\n+  svcvtnt_f32_m (f32, pg, u8); /* { dg-error {'svcvtnt_f32_m' has no form that takes 'svuint8_t' arguments} } */\n+  svcvtnt_f32_m (f32, pg, u16); /* { dg-error {'svcvtnt_f32_m' has no form that takes 'svuint16_t' arguments} } */\n+  svcvtnt_f32_m (f32, pg, u32); /* { dg-error {'svcvtnt_f32_m' has no form that takes 'svuint32_t' arguments} } */\n+  svcvtnt_f32_m (f32, pg, u64); /* { dg-error {'svcvtnt_f32_m' has no form that takes 'svuint64_t' arguments} } */\n+  svcvtnt_f32_m (f32, pg, f16); /* { dg-error {'svcvtnt_f32_m' has no form that takes 'svfloat16_t' arguments} } */\n+  svcvtnt_f32_m (f32, pg, f32); /* { dg-error {'svcvtnt_f32_m' has no form that takes 'svfloat32_t' arguments} } */\n+  svcvtnt_f32_m (f32, pg, f64);\n+}"}, {"sha": "c03d644ed4d0b4189205fcf075981eb6d94c5098", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/unary_narrowb_1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Funary_narrowb_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Funary_narrowb_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Funary_narrowb_1.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+\n+#include <arm_sve.h>\n+\n+#pragma GCC target (\"arch=armv8.2-a+sve2\")\n+\n+void\n+f1 (svbool_t pg, svint8_t s8, svuint8_t u8,\n+    svint16_t s16, svuint16_t u16,\n+    svint32_t s32, svuint32_t u32,\n+    svint64_t s64, svuint64_t u64,\n+    svfloat32_t f32)\n+{\n+  svqxtnb (); /* { dg-error {too few arguments to function 'svqxtnb'} } */\n+  svqxtnb (u16, u16); /* { dg-error {too many arguments to function 'svqxtnb'} } */\n+  svqxtnb (pg); /* { dg-error {'svqxtnb' has no form that takes 'svbool_t' arguments} } */\n+  svqxtnb (u8); /* { dg-error {'svqxtnb' has no form that takes 'svuint8_t' arguments} } */\n+  svqxtnb (s8); /* { dg-error {'svqxtnb' has no form that takes 'svint8_t' arguments} } */\n+  svqxtnb (u16);\n+  svqxtnb (s16);\n+  svqxtnb (u32);\n+  svqxtnb (s32);\n+  svqxtnb (u64);\n+  svqxtnb (s64);\n+  svqxtnb (f32); /* { dg-error {'svqxtnb' has no form that takes 'svfloat32_t' arguments} } */\n+  svqxtnb (1); /* { dg-error {passing 'int' to argument 1 of 'svqxtnb', which expects an SVE vector type} } */\n+}"}, {"sha": "c3e210380712c441ce6f961bbab39ee95ddbbd6c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/unary_narrowb_to_uint_1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Funary_narrowb_to_uint_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Funary_narrowb_to_uint_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Funary_narrowb_to_uint_1.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+\n+#include <arm_sve.h>\n+\n+#pragma GCC target (\"arch=armv8.2-a+sve2\")\n+\n+void\n+f1 (svbool_t pg, svint8_t s8, svuint8_t u8,\n+    svint16_t s16, svuint16_t u16,\n+    svint32_t s32, svuint32_t u32,\n+    svint64_t s64, svuint64_t u64,\n+    svfloat32_t f32)\n+{\n+  svqxtunb (); /* { dg-error {too few arguments to function 'svqxtunb'} } */\n+  svqxtunb (u16, u16); /* { dg-error {too many arguments to function 'svqxtunb'} } */\n+  svqxtunb (pg); /* { dg-error {'svqxtunb' has no form that takes 'svbool_t' arguments} } */\n+  svqxtunb (u8); /* { dg-error {'svqxtunb' has no form that takes 'svuint8_t' arguments} } */\n+  svqxtunb (s8); /* { dg-error {'svqxtunb' has no form that takes 'svint8_t' arguments} } */\n+  svqxtunb (u16); /* { dg-error {'svqxtunb' has no form that takes 'svuint16_t' arguments} } */\n+  svqxtunb (s16);\n+  svqxtunb (u32); /* { dg-error {'svqxtunb' has no form that takes 'svuint32_t' arguments} } */\n+  svqxtunb (s32);\n+  svqxtunb (u64); /* { dg-error {'svqxtunb' has no form that takes 'svuint64_t' arguments} } */\n+  svqxtunb (s64);\n+  svqxtunb (f32); /* { dg-error {'svqxtunb' has no form that takes 'svfloat32_t' arguments} } */\n+  svqxtunb (1); /* { dg-error {passing 'int' to argument 1 of 'svqxtunb', which expects an SVE vector type} } */\n+}"}, {"sha": "4ed179cb3b4dcb154fe7fe005dd6ea58a773670e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/unary_narrowt_1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Funary_narrowt_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Funary_narrowt_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Funary_narrowt_1.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+\n+#include <arm_sve.h>\n+\n+#pragma GCC target (\"arch=armv8.2-a+sve2\")\n+\n+void\n+f1 (svbool_t pg, svint8_t s8, svuint8_t u8,\n+    svint16_t s16, svuint16_t u16,\n+    svint32_t s32, svuint32_t u32,\n+    svint64_t s64, svuint64_t u64,\n+    svfloat16_t f16, svfloat32_t f32)\n+{\n+  svqxtnt (u32); /* { dg-error {too few arguments to function 'svqxtnt'} } */\n+  svqxtnt (u32, u16, u16); /* { dg-error {too many arguments to function 'svqxtnt'} } */\n+  svqxtnt (pg, pg); /* { dg-error {'svqxtnt' has no form that takes 'svbool_t' arguments} } */\n+  svqxtnt (u8, u8); /* { dg-error {'svqxtnt' has no form that takes 'svuint8_t' arguments} } */\n+  svqxtnt (s8, s8); /* { dg-error {'svqxtnt' has no form that takes 'svint8_t' arguments} } */\n+  svqxtnt (u16, u16); /* { dg-error {passing 'svuint16_t' instead of the expected 'svuint8_t' to argument 1 of 'svqxtnt', after passing 'svuint16_t' to argument 2} } */\n+  svqxtnt (s8, u16); /* { dg-error {arguments 1 and 2 of 'svqxtnt' must have the same signedness, but the values passed here have type 'svint8_t' and 'svuint16_t' respectively} } */\n+  svqxtnt (pg, u16); /* { dg-error {passing 'svbool_t' instead of the expected 'svuint8_t' to argument 1 of 'svqxtnt', after passing 'svuint16_t' to argument 2} } */\n+  svqxtnt (u8, u16);\n+  svqxtnt (s8, s16);\n+  svqxtnt (u16, u32);\n+  svqxtnt (s16, s32);\n+  svqxtnt (u32, u64);\n+  svqxtnt (s32, s64);\n+  svqxtnt (f16, f32); /* { dg-error {'svqxtnt' has no form that takes 'svfloat32_t' arguments} } */\n+  svqxtnt (1, u16); /* { dg-error {passing 'int' to argument 1 of 'svqxtnt', which expects an SVE vector type} } */\n+  svqxtnt (u8, 1); /* { dg-error {passing 'int' to argument 2 of 'svqxtnt', which expects an SVE vector type} } */\n+}"}, {"sha": "acaa546eee9ff2c5e5e27057c5e36fe34b6e4e2b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/unary_narrowt_to_uint_1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Funary_narrowt_to_uint_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Funary_narrowt_to_uint_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Funary_narrowt_to_uint_1.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+\n+#include <arm_sve.h>\n+\n+#pragma GCC target (\"arch=armv8.2-a+sve2\")\n+\n+void\n+f1 (svbool_t pg, svint8_t s8, svuint8_t u8,\n+    svint16_t s16, svuint16_t u16,\n+    svint32_t s32, svuint32_t u32,\n+    svint64_t s64, svuint64_t u64,\n+    svfloat16_t f16, svfloat32_t f32)\n+{\n+  svqxtunt (u32); /* { dg-error {too few arguments to function 'svqxtunt'} } */\n+  svqxtunt (u32, s16, s16); /* { dg-error {too many arguments to function 'svqxtunt'} } */\n+  svqxtunt (u8, pg); /* { dg-error {'svqxtunt' has no form that takes 'svbool_t' arguments} } */\n+  svqxtunt (u8, u8); /* { dg-error {'svqxtunt' has no form that takes 'svuint8_t' arguments} } */\n+  svqxtunt (u8, s8); /* { dg-error {'svqxtunt' has no form that takes 'svint8_t' arguments} } */\n+  svqxtunt (u16, s16); /* { dg-error {passing 'svuint16_t' instead of the expected 'svuint8_t' to argument 1 of 'svqxtunt', after passing 'svint16_t' to argument 2} } */\n+  svqxtunt (s8, s16); /* { dg-error {passing 'svint8_t' to argument 1 of 'svqxtunt', which expects a vector of unsigned integers} } */\n+  svqxtunt (pg, s16); /* { dg-error {passing 'svbool_t' to argument 1 of 'svqxtunt', which expects a vector of unsigned integers} } */\n+  svqxtunt (u8, u16); /* { dg-error {'svqxtunt' has no form that takes 'svuint16_t' arguments} } */\n+  svqxtunt (u8, s16);\n+  svqxtunt (u16, u32); /* { dg-error {'svqxtunt' has no form that takes 'svuint32_t' arguments} } */\n+  svqxtunt (u16, s32);\n+  svqxtunt (u32, u64); /* { dg-error {'svqxtunt' has no form that takes 'svuint64_t' arguments} } */\n+  svqxtunt (u32, s64);\n+  svqxtunt (u16, f32); /* { dg-error {'svqxtunt' has no form that takes 'svfloat32_t' arguments} } */\n+  svqxtunt (1, u16); /* { dg-error {passing 'int' to argument 1 of 'svqxtunt', which expects an SVE vector type} } */\n+  svqxtunt (u8, 1); /* { dg-error {passing 'int' to argument 2 of 'svqxtunt', which expects an SVE vector type} } */\n+}"}, {"sha": "517d11ff0f8b22d116de52dbf23e6467e750fe33", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/unary_to_int_1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Funary_to_int_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Funary_to_int_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Funary_to_int_1.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+\n+#include <arm_sve.h>\n+\n+#pragma GCC target (\"arch=armv8.2-a+sve2\")\n+\n+void\n+f1 (svbool_t pg, svint32_t s32, svuint32_t u32, svfloat32_t f32,\n+    svint64_t s64, svuint64_t u64, svfloat64_t f64)\n+{\n+  svlogb_m (s32, pg); /* { dg-error {too few arguments to function 'svlogb_m'} } */\n+  svlogb_m (s32, pg, f32, s32); /* { dg-error {too many arguments to function 'svlogb_m'} } */\n+  svlogb_m (0, pg, f32); /* { dg-error {passing 'int' to argument 1 of 'svlogb_m', which expects an SVE vector type} } */\n+  svlogb_m (s32, u32, f32); /* { dg-error {passing 'svuint32_t' to argument 2 of 'svlogb_m', which expects 'svbool_t'} } */\n+  svlogb_m (s32, 0, f32); /* { dg-error {passing 'int' to argument 2 of 'svlogb_m', which expects 'svbool_t'} } */\n+  svlogb_m (s32, pg, s32); /* { dg-error {'svlogb_m' has no form that takes 'svint32_t' arguments} } */\n+  svlogb_m (s32, pg, u32); /* { dg-error {'svlogb_m' has no form that takes 'svuint32_t' arguments} } */\n+  svlogb_m (s32, pg, f32);\n+  svlogb_m (s32, pg, pg); /* { dg-error {'svlogb_m' has no form that takes 'svbool_t' arguments} } */\n+\n+  svlogb_m (pg, pg, f32); /* { dg-error {passing 'svbool_t' to argument 1 of 'svlogb_m', which expects a vector of signed integers} } */\n+  svlogb_m (u32, pg, f32); /* { dg-error {passing 'svuint32_t' to argument 1 of 'svlogb_m', which expects a vector of signed integers} } */\n+  svlogb_m (f32, pg, f32); /* { dg-error {passing 'svfloat32_t' to argument 1 of 'svlogb_m', which expects a vector of signed integers} } */\n+  svlogb_m (u64, pg, f32); /* { dg-error {passing 'svuint64_t' to argument 1 of 'svlogb_m', which expects a vector of signed integers} } */\n+  svlogb_m (s64, pg, f32); /* { dg-error {arguments 1 and 3 of 'svlogb_m' must have the same element size, but the values passed here have type 'svint64_t' and 'svfloat32_t' respectively} } */\n+  svlogb_m (s32, pg, f64); /* { dg-error {arguments 1 and 3 of 'svlogb_m' must have the same element size, but the values passed here have type 'svint32_t' and 'svfloat64_t' respectively} } */\n+}"}, {"sha": "b3189fe9f58ad7f41aa592c4e214b612b560bec6", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/aarch64-sve2-acle-asm.exp", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Faarch64-sve2-acle-asm.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Faarch64-sve2-acle-asm.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Faarch64-sve2-acle-asm.exp?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,81 @@\n+#  Assembly-based regression-test driver for the SVE ACLE\n+#  Copyright (C) 2009-2020 Free Software Foundation, Inc.\n+#\n+#  This file is part of GCC.\n+#\n+#  GCC is free software; you can redistribute it and/or modify it\n+#  under the terms of the GNU General Public License as published by\n+#  the Free Software Foundation; either version 3, or (at your option)\n+#  any later version.\n+#\n+#  GCC is distributed in the hope that it will be useful, but\n+#  WITHOUT ANY WARRANTY; without even the implied warranty of\n+#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+#  General Public License for more details.\n+#\n+#  You should have received a copy of the GNU General Public License\n+#  along with GCC; see the file COPYING3.  If not see\n+#  <http://www.gnu.org/licenses/>.  */\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Exit immediately if this isn't an AArch64 target.\n+if {![istarget aarch64*-*-*] } {\n+    return\n+}\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Force SVE if we're not testing it already.\n+if { [check_effective_target_aarch64_sve2] } {\n+    set sve2_flags \"\"\n+} else {\n+    set sve2_flags \"-march=armv8.5-a+sve2\"\n+}\n+\n+lappend extra_flags \"-fno-ipa-icf\"\n+\n+global gcc_runtest_parallelize_limit_minor\n+if { [info exists gcc_runtest_parallelize_limit_minor] } {\n+    set old_limit_minor $gcc_runtest_parallelize_limit_minor\n+    set gcc_runtest_parallelize_limit_minor 1\n+}\n+\n+torture-init\n+set-torture-options {\n+    \"-std=c90 -O0 -g\"\n+    \"-std=c90 -O1 -g\"\n+    \"-std=c99 -O2 -g\"\n+    \"-std=c11 -O3 -g\"\n+    \"-std=gnu90 -O2 -fno-schedule-insns -DCHECK_ASM --save-temps\"\n+    \"-std=gnu99 -Ofast -g\"\n+    \"-std=gnu11 -Os -g\"\n+} {\n+    \"-DTEST_FULL\"\n+    \"-DTEST_OVERLOADS\"\n+}\n+\n+# Main loop.\n+set files [glob -nocomplain $srcdir/$subdir/asm/*.c]\n+set save-dg-do-what-default ${dg-do-what-default}\n+if { [check_effective_target_aarch64_asm_sve_ok]\n+     && [check_effective_target_aarch64_variant_pcs] } {\n+    set dg-do-what-default assemble\n+} else {\n+    set dg-do-what-default compile\n+}\n+gcc-dg-runtest [lsort $files] \"\" \"$sve2_flags $extra_flags\"\n+set dg-do-what-default ${save-dg-do-what-default}\n+\n+torture-finish\n+\n+if { [info exists gcc_runtest_parallelize_limit_minor] } {\n+    set gcc_runtest_parallelize_limit_minor $old_limit_minor\n+}\n+\n+# All done.\n+dg-finish"}, {"sha": "0fbaae536d41041a0385c6855dce174e8140f63c", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/aarch64-sve2-acle.exp", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Faarch64-sve2-acle.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Faarch64-sve2-acle.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Faarch64-sve2-acle.exp?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,52 @@\n+#  Specific regression driver for AArch64 SVE.\n+#  Copyright (C) 2009-2020 Free Software Foundation, Inc.\n+#  Contributed by ARM Ltd.\n+#\n+#  This file is part of GCC.\n+#\n+#  GCC is free software; you can redistribute it and/or modify it\n+#  under the terms of the GNU General Public License as published by\n+#  the Free Software Foundation; either version 3, or (at your option)\n+#  any later version.\n+#\n+#  GCC is distributed in the hope that it will be useful, but\n+#  WITHOUT ANY WARRANTY; without even the implied warranty of\n+#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+#  General Public License for more details.\n+#\n+#  You should have received a copy of the GNU General Public License\n+#  along with GCC; see the file COPYING3.  If not see\n+#  <http://www.gnu.org/licenses/>.  */\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Exit immediately if this isn't an AArch64 target.\n+if {![istarget aarch64*-*-*] } {\n+    return\n+}\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Force SVE if we're not testing it already.\n+if { [check_effective_target_aarch64_sve2] } {\n+    set sve2_flags \"\"\n+} else {\n+    set sve2_flags \"-march=armv8.5-a+sve2\"\n+}\n+\n+# Main loop.\n+set files [glob -nocomplain \"$srcdir/$subdir/general/*.c\"]\n+dg-runtest [lsort $files] \"$sve2_flags\" $DEFAULT_CFLAGS\n+\n+# All done.\n+dg-finish"}, {"sha": "ee18ec87d44b199014fddec1750dada1691750c1", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/aba_s16.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faba_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faba_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faba_s16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,110 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** aba_s16_tied1:\n+**\tsaba\tz0\\.h, z1\\.h, z2\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_s16_tied1, svint16_t,\n+\t\tz0 = svaba_s16 (z0, z1, z2),\n+\t\tz0 = svaba (z0, z1, z2))\n+\n+/*\n+** aba_s16_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tsaba\tz0\\.h, \\1\\.h, z2\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_s16_tied2, svint16_t,\n+\t\tz0 = svaba_s16 (z1, z0, z2),\n+\t\tz0 = svaba (z1, z0, z2))\n+\n+/*\n+** aba_s16_tied3:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tsaba\tz0\\.h, z2\\.h, \\1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_s16_tied3, svint16_t,\n+\t\tz0 = svaba_s16 (z1, z2, z0),\n+\t\tz0 = svaba (z1, z2, z0))\n+\n+/*\n+** aba_s16_untied:\n+**\tmovprfx\tz0, z1\n+**\tsaba\tz0\\.h, z2\\.h, z3\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_s16_untied, svint16_t,\n+\t\tz0 = svaba_s16 (z1, z2, z3),\n+\t\tz0 = svaba (z1, z2, z3))\n+\n+/*\n+** aba_w0_s16_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tsaba\tz0\\.h, z1\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (aba_w0_s16_tied1, svint16_t, int16_t,\n+\t\t z0 = svaba_n_s16 (z0, z1, x0),\n+\t\t z0 = svaba (z0, z1, x0))\n+\n+/*\n+** aba_w0_s16_tied2:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tsaba\tz0\\.h, \\2\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (aba_w0_s16_tied2, svint16_t, int16_t,\n+\t\t z0 = svaba_n_s16 (z1, z0, x0),\n+\t\t z0 = svaba (z1, z0, x0))\n+\n+/*\n+** aba_w0_s16_untied:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tmovprfx\tz0, z1\n+**\tsaba\tz0\\.h, z2\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (aba_w0_s16_untied, svint16_t, int16_t,\n+\t\t z0 = svaba_n_s16 (z1, z2, x0),\n+\t\t z0 = svaba (z1, z2, x0))\n+\n+/*\n+** aba_11_s16_tied1:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tsaba\tz0\\.h, z1\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_11_s16_tied1, svint16_t,\n+\t\tz0 = svaba_n_s16 (z0, z1, 11),\n+\t\tz0 = svaba (z0, z1, 11))\n+\n+/*\n+** aba_11_s16_tied2:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tsaba\tz0\\.h, \\2\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_11_s16_tied2, svint16_t,\n+\t\tz0 = svaba_n_s16 (z1, z0, 11),\n+\t\tz0 = svaba (z1, z0, 11))\n+\n+/*\n+** aba_11_s16_untied:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tmovprfx\tz0, z1\n+**\tsaba\tz0\\.h, z2\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_11_s16_untied, svint16_t,\n+\t\tz0 = svaba_n_s16 (z1, z2, 11),\n+\t\tz0 = svaba (z1, z2, 11))"}, {"sha": "73c0028252679b771c615c26b4f1bb2b0d7bb4c4", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/aba_s32.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faba_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faba_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faba_s32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,110 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** aba_s32_tied1:\n+**\tsaba\tz0\\.s, z1\\.s, z2\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_s32_tied1, svint32_t,\n+\t\tz0 = svaba_s32 (z0, z1, z2),\n+\t\tz0 = svaba (z0, z1, z2))\n+\n+/*\n+** aba_s32_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tsaba\tz0\\.s, \\1\\.s, z2\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_s32_tied2, svint32_t,\n+\t\tz0 = svaba_s32 (z1, z0, z2),\n+\t\tz0 = svaba (z1, z0, z2))\n+\n+/*\n+** aba_s32_tied3:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tsaba\tz0\\.s, z2\\.s, \\1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_s32_tied3, svint32_t,\n+\t\tz0 = svaba_s32 (z1, z2, z0),\n+\t\tz0 = svaba (z1, z2, z0))\n+\n+/*\n+** aba_s32_untied:\n+**\tmovprfx\tz0, z1\n+**\tsaba\tz0\\.s, z2\\.s, z3\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_s32_untied, svint32_t,\n+\t\tz0 = svaba_s32 (z1, z2, z3),\n+\t\tz0 = svaba (z1, z2, z3))\n+\n+/*\n+** aba_w0_s32_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tsaba\tz0\\.s, z1\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (aba_w0_s32_tied1, svint32_t, int32_t,\n+\t\t z0 = svaba_n_s32 (z0, z1, x0),\n+\t\t z0 = svaba (z0, z1, x0))\n+\n+/*\n+** aba_w0_s32_tied2:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tsaba\tz0\\.s, \\2\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (aba_w0_s32_tied2, svint32_t, int32_t,\n+\t\t z0 = svaba_n_s32 (z1, z0, x0),\n+\t\t z0 = svaba (z1, z0, x0))\n+\n+/*\n+** aba_w0_s32_untied:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tmovprfx\tz0, z1\n+**\tsaba\tz0\\.s, z2\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (aba_w0_s32_untied, svint32_t, int32_t,\n+\t\t z0 = svaba_n_s32 (z1, z2, x0),\n+\t\t z0 = svaba (z1, z2, x0))\n+\n+/*\n+** aba_11_s32_tied1:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tsaba\tz0\\.s, z1\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_11_s32_tied1, svint32_t,\n+\t\tz0 = svaba_n_s32 (z0, z1, 11),\n+\t\tz0 = svaba (z0, z1, 11))\n+\n+/*\n+** aba_11_s32_tied2:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tsaba\tz0\\.s, \\2\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_11_s32_tied2, svint32_t,\n+\t\tz0 = svaba_n_s32 (z1, z0, 11),\n+\t\tz0 = svaba (z1, z0, 11))\n+\n+/*\n+** aba_11_s32_untied:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tmovprfx\tz0, z1\n+**\tsaba\tz0\\.s, z2\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_11_s32_untied, svint32_t,\n+\t\tz0 = svaba_n_s32 (z1, z2, 11),\n+\t\tz0 = svaba (z1, z2, 11))"}, {"sha": "0c169dbf6136b47ea416ce8a9b0de468fd3512eb", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/aba_s64.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faba_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faba_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faba_s64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,110 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** aba_s64_tied1:\n+**\tsaba\tz0\\.d, z1\\.d, z2\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_s64_tied1, svint64_t,\n+\t\tz0 = svaba_s64 (z0, z1, z2),\n+\t\tz0 = svaba (z0, z1, z2))\n+\n+/*\n+** aba_s64_tied2:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tsaba\tz0\\.d, \\1, z2\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_s64_tied2, svint64_t,\n+\t\tz0 = svaba_s64 (z1, z0, z2),\n+\t\tz0 = svaba (z1, z0, z2))\n+\n+/*\n+** aba_s64_tied3:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tsaba\tz0\\.d, z2\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_s64_tied3, svint64_t,\n+\t\tz0 = svaba_s64 (z1, z2, z0),\n+\t\tz0 = svaba (z1, z2, z0))\n+\n+/*\n+** aba_s64_untied:\n+**\tmovprfx\tz0, z1\n+**\tsaba\tz0\\.d, z2\\.d, z3\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_s64_untied, svint64_t,\n+\t\tz0 = svaba_s64 (z1, z2, z3),\n+\t\tz0 = svaba (z1, z2, z3))\n+\n+/*\n+** aba_x0_s64_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tsaba\tz0\\.d, z1\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (aba_x0_s64_tied1, svint64_t, int64_t,\n+\t\t z0 = svaba_n_s64 (z0, z1, x0),\n+\t\t z0 = svaba (z0, z1, x0))\n+\n+/*\n+** aba_x0_s64_tied2:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tsaba\tz0\\.d, \\2, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (aba_x0_s64_tied2, svint64_t, int64_t,\n+\t\t z0 = svaba_n_s64 (z1, z0, x0),\n+\t\t z0 = svaba (z1, z0, x0))\n+\n+/*\n+** aba_x0_s64_untied:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tmovprfx\tz0, z1\n+**\tsaba\tz0\\.d, z2\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (aba_x0_s64_untied, svint64_t, int64_t,\n+\t\t z0 = svaba_n_s64 (z1, z2, x0),\n+\t\t z0 = svaba (z1, z2, x0))\n+\n+/*\n+** aba_11_s64_tied1:\n+**\tmov\t(z[0-9]+\\.d), #11\n+**\tsaba\tz0\\.d, z1\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_11_s64_tied1, svint64_t,\n+\t\tz0 = svaba_n_s64 (z0, z1, 11),\n+\t\tz0 = svaba (z0, z1, 11))\n+\n+/*\n+** aba_11_s64_tied2:\n+**\tmov\t(z[0-9]+\\.d), #11\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tsaba\tz0\\.d, \\2, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_11_s64_tied2, svint64_t,\n+\t\tz0 = svaba_n_s64 (z1, z0, 11),\n+\t\tz0 = svaba (z1, z0, 11))\n+\n+/*\n+** aba_11_s64_untied:\n+**\tmov\t(z[0-9]+\\.d), #11\n+**\tmovprfx\tz0, z1\n+**\tsaba\tz0\\.d, z2\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_11_s64_untied, svint64_t,\n+\t\tz0 = svaba_n_s64 (z1, z2, 11),\n+\t\tz0 = svaba (z1, z2, 11))"}, {"sha": "8e442d7112b4c8bc6fb49eb9b1c9658500e4b094", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/aba_s8.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faba_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faba_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faba_s8.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,110 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** aba_s8_tied1:\n+**\tsaba\tz0\\.b, z1\\.b, z2\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_s8_tied1, svint8_t,\n+\t\tz0 = svaba_s8 (z0, z1, z2),\n+\t\tz0 = svaba (z0, z1, z2))\n+\n+/*\n+** aba_s8_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tsaba\tz0\\.b, \\1\\.b, z2\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_s8_tied2, svint8_t,\n+\t\tz0 = svaba_s8 (z1, z0, z2),\n+\t\tz0 = svaba (z1, z0, z2))\n+\n+/*\n+** aba_s8_tied3:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tsaba\tz0\\.b, z2\\.b, \\1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_s8_tied3, svint8_t,\n+\t\tz0 = svaba_s8 (z1, z2, z0),\n+\t\tz0 = svaba (z1, z2, z0))\n+\n+/*\n+** aba_s8_untied:\n+**\tmovprfx\tz0, z1\n+**\tsaba\tz0\\.b, z2\\.b, z3\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_s8_untied, svint8_t,\n+\t\tz0 = svaba_s8 (z1, z2, z3),\n+\t\tz0 = svaba (z1, z2, z3))\n+\n+/*\n+** aba_w0_s8_tied1:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tsaba\tz0\\.b, z1\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (aba_w0_s8_tied1, svint8_t, int8_t,\n+\t\t z0 = svaba_n_s8 (z0, z1, x0),\n+\t\t z0 = svaba (z0, z1, x0))\n+\n+/*\n+** aba_w0_s8_tied2:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tsaba\tz0\\.b, \\2\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (aba_w0_s8_tied2, svint8_t, int8_t,\n+\t\t z0 = svaba_n_s8 (z1, z0, x0),\n+\t\t z0 = svaba (z1, z0, x0))\n+\n+/*\n+** aba_w0_s8_untied:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tmovprfx\tz0, z1\n+**\tsaba\tz0\\.b, z2\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (aba_w0_s8_untied, svint8_t, int8_t,\n+\t\t z0 = svaba_n_s8 (z1, z2, x0),\n+\t\t z0 = svaba (z1, z2, x0))\n+\n+/*\n+** aba_11_s8_tied1:\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tsaba\tz0\\.b, z1\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_11_s8_tied1, svint8_t,\n+\t\tz0 = svaba_n_s8 (z0, z1, 11),\n+\t\tz0 = svaba (z0, z1, 11))\n+\n+/*\n+** aba_11_s8_tied2:\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tsaba\tz0\\.b, \\2\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_11_s8_tied2, svint8_t,\n+\t\tz0 = svaba_n_s8 (z1, z0, 11),\n+\t\tz0 = svaba (z1, z0, 11))\n+\n+/*\n+** aba_11_s8_untied:\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tmovprfx\tz0, z1\n+**\tsaba\tz0\\.b, z2\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_11_s8_untied, svint8_t,\n+\t\tz0 = svaba_n_s8 (z1, z2, 11),\n+\t\tz0 = svaba (z1, z2, 11))"}, {"sha": "71980015e19c3f0a6d8305f82fe54967f6650f9b", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/aba_u16.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faba_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faba_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faba_u16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,110 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** aba_u16_tied1:\n+**\tuaba\tz0\\.h, z1\\.h, z2\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_u16_tied1, svuint16_t,\n+\t\tz0 = svaba_u16 (z0, z1, z2),\n+\t\tz0 = svaba (z0, z1, z2))\n+\n+/*\n+** aba_u16_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tuaba\tz0\\.h, \\1\\.h, z2\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_u16_tied2, svuint16_t,\n+\t\tz0 = svaba_u16 (z1, z0, z2),\n+\t\tz0 = svaba (z1, z0, z2))\n+\n+/*\n+** aba_u16_tied3:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tuaba\tz0\\.h, z2\\.h, \\1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_u16_tied3, svuint16_t,\n+\t\tz0 = svaba_u16 (z1, z2, z0),\n+\t\tz0 = svaba (z1, z2, z0))\n+\n+/*\n+** aba_u16_untied:\n+**\tmovprfx\tz0, z1\n+**\tuaba\tz0\\.h, z2\\.h, z3\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_u16_untied, svuint16_t,\n+\t\tz0 = svaba_u16 (z1, z2, z3),\n+\t\tz0 = svaba (z1, z2, z3))\n+\n+/*\n+** aba_w0_u16_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tuaba\tz0\\.h, z1\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (aba_w0_u16_tied1, svuint16_t, uint16_t,\n+\t\t z0 = svaba_n_u16 (z0, z1, x0),\n+\t\t z0 = svaba (z0, z1, x0))\n+\n+/*\n+** aba_w0_u16_tied2:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tuaba\tz0\\.h, \\2\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (aba_w0_u16_tied2, svuint16_t, uint16_t,\n+\t\t z0 = svaba_n_u16 (z1, z0, x0),\n+\t\t z0 = svaba (z1, z0, x0))\n+\n+/*\n+** aba_w0_u16_untied:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tmovprfx\tz0, z1\n+**\tuaba\tz0\\.h, z2\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (aba_w0_u16_untied, svuint16_t, uint16_t,\n+\t\t z0 = svaba_n_u16 (z1, z2, x0),\n+\t\t z0 = svaba (z1, z2, x0))\n+\n+/*\n+** aba_11_u16_tied1:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tuaba\tz0\\.h, z1\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_11_u16_tied1, svuint16_t,\n+\t\tz0 = svaba_n_u16 (z0, z1, 11),\n+\t\tz0 = svaba (z0, z1, 11))\n+\n+/*\n+** aba_11_u16_tied2:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tuaba\tz0\\.h, \\2\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_11_u16_tied2, svuint16_t,\n+\t\tz0 = svaba_n_u16 (z1, z0, 11),\n+\t\tz0 = svaba (z1, z0, 11))\n+\n+/*\n+** aba_11_u16_untied:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tmovprfx\tz0, z1\n+**\tuaba\tz0\\.h, z2\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_11_u16_untied, svuint16_t,\n+\t\tz0 = svaba_n_u16 (z1, z2, 11),\n+\t\tz0 = svaba (z1, z2, 11))"}, {"sha": "2ba8f4195679924501d62a0d4857c3e89f71dc5d", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/aba_u32.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faba_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faba_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faba_u32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,110 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** aba_u32_tied1:\n+**\tuaba\tz0\\.s, z1\\.s, z2\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_u32_tied1, svuint32_t,\n+\t\tz0 = svaba_u32 (z0, z1, z2),\n+\t\tz0 = svaba (z0, z1, z2))\n+\n+/*\n+** aba_u32_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tuaba\tz0\\.s, \\1\\.s, z2\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_u32_tied2, svuint32_t,\n+\t\tz0 = svaba_u32 (z1, z0, z2),\n+\t\tz0 = svaba (z1, z0, z2))\n+\n+/*\n+** aba_u32_tied3:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tuaba\tz0\\.s, z2\\.s, \\1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_u32_tied3, svuint32_t,\n+\t\tz0 = svaba_u32 (z1, z2, z0),\n+\t\tz0 = svaba (z1, z2, z0))\n+\n+/*\n+** aba_u32_untied:\n+**\tmovprfx\tz0, z1\n+**\tuaba\tz0\\.s, z2\\.s, z3\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_u32_untied, svuint32_t,\n+\t\tz0 = svaba_u32 (z1, z2, z3),\n+\t\tz0 = svaba (z1, z2, z3))\n+\n+/*\n+** aba_w0_u32_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tuaba\tz0\\.s, z1\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (aba_w0_u32_tied1, svuint32_t, uint32_t,\n+\t\t z0 = svaba_n_u32 (z0, z1, x0),\n+\t\t z0 = svaba (z0, z1, x0))\n+\n+/*\n+** aba_w0_u32_tied2:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tuaba\tz0\\.s, \\2\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (aba_w0_u32_tied2, svuint32_t, uint32_t,\n+\t\t z0 = svaba_n_u32 (z1, z0, x0),\n+\t\t z0 = svaba (z1, z0, x0))\n+\n+/*\n+** aba_w0_u32_untied:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tmovprfx\tz0, z1\n+**\tuaba\tz0\\.s, z2\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (aba_w0_u32_untied, svuint32_t, uint32_t,\n+\t\t z0 = svaba_n_u32 (z1, z2, x0),\n+\t\t z0 = svaba (z1, z2, x0))\n+\n+/*\n+** aba_11_u32_tied1:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tuaba\tz0\\.s, z1\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_11_u32_tied1, svuint32_t,\n+\t\tz0 = svaba_n_u32 (z0, z1, 11),\n+\t\tz0 = svaba (z0, z1, 11))\n+\n+/*\n+** aba_11_u32_tied2:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tuaba\tz0\\.s, \\2\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_11_u32_tied2, svuint32_t,\n+\t\tz0 = svaba_n_u32 (z1, z0, 11),\n+\t\tz0 = svaba (z1, z0, 11))\n+\n+/*\n+** aba_11_u32_untied:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tmovprfx\tz0, z1\n+**\tuaba\tz0\\.s, z2\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_11_u32_untied, svuint32_t,\n+\t\tz0 = svaba_n_u32 (z1, z2, 11),\n+\t\tz0 = svaba (z1, z2, 11))"}, {"sha": "8c6bef02004b4581882f61bdc014ed012996dcbb", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/aba_u64.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faba_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faba_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faba_u64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,110 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** aba_u64_tied1:\n+**\tuaba\tz0\\.d, z1\\.d, z2\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_u64_tied1, svuint64_t,\n+\t\tz0 = svaba_u64 (z0, z1, z2),\n+\t\tz0 = svaba (z0, z1, z2))\n+\n+/*\n+** aba_u64_tied2:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tuaba\tz0\\.d, \\1, z2\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_u64_tied2, svuint64_t,\n+\t\tz0 = svaba_u64 (z1, z0, z2),\n+\t\tz0 = svaba (z1, z0, z2))\n+\n+/*\n+** aba_u64_tied3:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tuaba\tz0\\.d, z2\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_u64_tied3, svuint64_t,\n+\t\tz0 = svaba_u64 (z1, z2, z0),\n+\t\tz0 = svaba (z1, z2, z0))\n+\n+/*\n+** aba_u64_untied:\n+**\tmovprfx\tz0, z1\n+**\tuaba\tz0\\.d, z2\\.d, z3\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_u64_untied, svuint64_t,\n+\t\tz0 = svaba_u64 (z1, z2, z3),\n+\t\tz0 = svaba (z1, z2, z3))\n+\n+/*\n+** aba_x0_u64_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tuaba\tz0\\.d, z1\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (aba_x0_u64_tied1, svuint64_t, uint64_t,\n+\t\t z0 = svaba_n_u64 (z0, z1, x0),\n+\t\t z0 = svaba (z0, z1, x0))\n+\n+/*\n+** aba_x0_u64_tied2:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tuaba\tz0\\.d, \\2, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (aba_x0_u64_tied2, svuint64_t, uint64_t,\n+\t\t z0 = svaba_n_u64 (z1, z0, x0),\n+\t\t z0 = svaba (z1, z0, x0))\n+\n+/*\n+** aba_x0_u64_untied:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tmovprfx\tz0, z1\n+**\tuaba\tz0\\.d, z2\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (aba_x0_u64_untied, svuint64_t, uint64_t,\n+\t\t z0 = svaba_n_u64 (z1, z2, x0),\n+\t\t z0 = svaba (z1, z2, x0))\n+\n+/*\n+** aba_11_u64_tied1:\n+**\tmov\t(z[0-9]+\\.d), #11\n+**\tuaba\tz0\\.d, z1\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_11_u64_tied1, svuint64_t,\n+\t\tz0 = svaba_n_u64 (z0, z1, 11),\n+\t\tz0 = svaba (z0, z1, 11))\n+\n+/*\n+** aba_11_u64_tied2:\n+**\tmov\t(z[0-9]+\\.d), #11\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tuaba\tz0\\.d, \\2, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_11_u64_tied2, svuint64_t,\n+\t\tz0 = svaba_n_u64 (z1, z0, 11),\n+\t\tz0 = svaba (z1, z0, 11))\n+\n+/*\n+** aba_11_u64_untied:\n+**\tmov\t(z[0-9]+\\.d), #11\n+**\tmovprfx\tz0, z1\n+**\tuaba\tz0\\.d, z2\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_11_u64_untied, svuint64_t,\n+\t\tz0 = svaba_n_u64 (z1, z2, 11),\n+\t\tz0 = svaba (z1, z2, 11))"}, {"sha": "2c3e87949c913e954033020dcb51166cbb7c829b", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/aba_u8.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faba_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faba_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faba_u8.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,110 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** aba_u8_tied1:\n+**\tuaba\tz0\\.b, z1\\.b, z2\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_u8_tied1, svuint8_t,\n+\t\tz0 = svaba_u8 (z0, z1, z2),\n+\t\tz0 = svaba (z0, z1, z2))\n+\n+/*\n+** aba_u8_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tuaba\tz0\\.b, \\1\\.b, z2\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_u8_tied2, svuint8_t,\n+\t\tz0 = svaba_u8 (z1, z0, z2),\n+\t\tz0 = svaba (z1, z0, z2))\n+\n+/*\n+** aba_u8_tied3:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tuaba\tz0\\.b, z2\\.b, \\1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_u8_tied3, svuint8_t,\n+\t\tz0 = svaba_u8 (z1, z2, z0),\n+\t\tz0 = svaba (z1, z2, z0))\n+\n+/*\n+** aba_u8_untied:\n+**\tmovprfx\tz0, z1\n+**\tuaba\tz0\\.b, z2\\.b, z3\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_u8_untied, svuint8_t,\n+\t\tz0 = svaba_u8 (z1, z2, z3),\n+\t\tz0 = svaba (z1, z2, z3))\n+\n+/*\n+** aba_w0_u8_tied1:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tuaba\tz0\\.b, z1\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (aba_w0_u8_tied1, svuint8_t, uint8_t,\n+\t\t z0 = svaba_n_u8 (z0, z1, x0),\n+\t\t z0 = svaba (z0, z1, x0))\n+\n+/*\n+** aba_w0_u8_tied2:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tuaba\tz0\\.b, \\2\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (aba_w0_u8_tied2, svuint8_t, uint8_t,\n+\t\t z0 = svaba_n_u8 (z1, z0, x0),\n+\t\t z0 = svaba (z1, z0, x0))\n+\n+/*\n+** aba_w0_u8_untied:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tmovprfx\tz0, z1\n+**\tuaba\tz0\\.b, z2\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (aba_w0_u8_untied, svuint8_t, uint8_t,\n+\t\t z0 = svaba_n_u8 (z1, z2, x0),\n+\t\t z0 = svaba (z1, z2, x0))\n+\n+/*\n+** aba_11_u8_tied1:\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tuaba\tz0\\.b, z1\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_11_u8_tied1, svuint8_t,\n+\t\tz0 = svaba_n_u8 (z0, z1, 11),\n+\t\tz0 = svaba (z0, z1, 11))\n+\n+/*\n+** aba_11_u8_tied2:\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tuaba\tz0\\.b, \\2\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_11_u8_tied2, svuint8_t,\n+\t\tz0 = svaba_n_u8 (z1, z0, 11),\n+\t\tz0 = svaba (z1, z0, 11))\n+\n+/*\n+** aba_11_u8_untied:\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tmovprfx\tz0, z1\n+**\tuaba\tz0\\.b, z2\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aba_11_u8_untied, svuint8_t,\n+\t\tz0 = svaba_n_u8 (z1, z2, 11),\n+\t\tz0 = svaba (z1, z2, 11))"}, {"sha": "39668e62737388ce4251bc517180fb43fca357b2", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/abalb_s16.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabalb_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabalb_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabalb_s16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,86 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** abalb_s16_tied1:\n+**\tsabalb\tz0\\.h, z4\\.b, z5\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z (abalb_s16_tied1, svint16_t, svint8_t,\n+\t     z0 = svabalb_s16 (z0, z4, z5),\n+\t     z0 = svabalb (z0, z4, z5))\n+\n+/*\n+** abalb_s16_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tsabalb\tz0\\.h, \\1\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (abalb_s16_tied2, svint16_t, svint8_t,\n+\t\t z0_res = svabalb_s16 (z4, z0, z1),\n+\t\t z0_res = svabalb (z4, z0, z1))\n+\n+/*\n+** abalb_s16_tied3:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tsabalb\tz0\\.h, z1\\.b, \\1\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (abalb_s16_tied3, svint16_t, svint8_t,\n+\t\t z0_res = svabalb_s16 (z4, z1, z0),\n+\t\t z0_res = svabalb (z4, z1, z0))\n+\n+/*\n+** abalb_s16_untied:\n+**\tmovprfx\tz0, z1\n+**\tsabalb\tz0\\.h, z4\\.b, z5\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z (abalb_s16_untied, svint16_t, svint8_t,\n+\t     z0 = svabalb_s16 (z1, z4, z5),\n+\t     z0 = svabalb (z1, z4, z5))\n+\n+/*\n+** abalb_w0_s16_tied1:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tsabalb\tz0\\.h, z4\\.b, \\1\n+**\tret\n+*/\n+TEST_DUAL_ZX (abalb_w0_s16_tied1, svint16_t, svint8_t, int8_t,\n+\t      z0 = svabalb_n_s16 (z0, z4, x0),\n+\t      z0 = svabalb (z0, z4, x0))\n+\n+/*\n+** abalb_w0_s16_untied:: { xfail *-*-*}\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tmovprfx\tz0, z1\n+**\tsabalb\tz0\\.h, z4\\.b, \\1\n+**\tret\n+*/\n+TEST_DUAL_ZX (abalb_w0_s16_untied, svint16_t, svint8_t, int8_t,\n+\t      z0 = svabalb_n_s16 (z1, z4, x0),\n+\t      z0 = svabalb (z1, z4, x0))\n+\n+/*\n+** abalb_11_s16_tied1:\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tsabalb\tz0\\.h, z4\\.b, \\1\n+**\tret\n+*/\n+TEST_DUAL_Z (abalb_11_s16_tied1, svint16_t, svint8_t,\n+\t     z0 = svabalb_n_s16 (z0, z4, 11),\n+\t     z0 = svabalb (z0, z4, 11))\n+\n+/*\n+** abalb_11_s16_untied:: { xfail *-*-*}\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tmovprfx\tz0, z1\n+**\tsabalb\tz0\\.h, z4\\.b, \\1\n+**\tret\n+*/\n+TEST_DUAL_Z (abalb_11_s16_untied, svint16_t, svint8_t,\n+\t     z0 = svabalb_n_s16 (z1, z4, 11),\n+\t     z0 = svabalb (z1, z4, 11))"}, {"sha": "2068bf75afd8f357d7f8279ae5f6fc0626a67455", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/abalb_s32.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabalb_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabalb_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabalb_s32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,86 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** abalb_s32_tied1:\n+**\tsabalb\tz0\\.s, z4\\.h, z5\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (abalb_s32_tied1, svint32_t, svint16_t,\n+\t     z0 = svabalb_s32 (z0, z4, z5),\n+\t     z0 = svabalb (z0, z4, z5))\n+\n+/*\n+** abalb_s32_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tsabalb\tz0\\.s, \\1\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (abalb_s32_tied2, svint32_t, svint16_t,\n+\t\t z0_res = svabalb_s32 (z4, z0, z1),\n+\t\t z0_res = svabalb (z4, z0, z1))\n+\n+/*\n+** abalb_s32_tied3:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tsabalb\tz0\\.s, z1\\.h, \\1\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (abalb_s32_tied3, svint32_t, svint16_t,\n+\t\t z0_res = svabalb_s32 (z4, z1, z0),\n+\t\t z0_res = svabalb (z4, z1, z0))\n+\n+/*\n+** abalb_s32_untied:\n+**\tmovprfx\tz0, z1\n+**\tsabalb\tz0\\.s, z4\\.h, z5\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (abalb_s32_untied, svint32_t, svint16_t,\n+\t     z0 = svabalb_s32 (z1, z4, z5),\n+\t     z0 = svabalb (z1, z4, z5))\n+\n+/*\n+** abalb_w0_s32_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tsabalb\tz0\\.s, z4\\.h, \\1\n+**\tret\n+*/\n+TEST_DUAL_ZX (abalb_w0_s32_tied1, svint32_t, svint16_t, int16_t,\n+\t      z0 = svabalb_n_s32 (z0, z4, x0),\n+\t      z0 = svabalb (z0, z4, x0))\n+\n+/*\n+** abalb_w0_s32_untied:: { xfail *-*-*}\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tmovprfx\tz0, z1\n+**\tsabalb\tz0\\.s, z4\\.h, \\1\n+**\tret\n+*/\n+TEST_DUAL_ZX (abalb_w0_s32_untied, svint32_t, svint16_t, int16_t,\n+\t      z0 = svabalb_n_s32 (z1, z4, x0),\n+\t      z0 = svabalb (z1, z4, x0))\n+\n+/*\n+** abalb_11_s32_tied1:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tsabalb\tz0\\.s, z4\\.h, \\1\n+**\tret\n+*/\n+TEST_DUAL_Z (abalb_11_s32_tied1, svint32_t, svint16_t,\n+\t     z0 = svabalb_n_s32 (z0, z4, 11),\n+\t     z0 = svabalb (z0, z4, 11))\n+\n+/*\n+** abalb_11_s32_untied:: { xfail *-*-*}\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tmovprfx\tz0, z1\n+**\tsabalb\tz0\\.s, z4\\.h, \\1\n+**\tret\n+*/\n+TEST_DUAL_Z (abalb_11_s32_untied, svint32_t, svint16_t,\n+\t     z0 = svabalb_n_s32 (z1, z4, 11),\n+\t     z0 = svabalb (z1, z4, 11))"}, {"sha": "5c2ea4d1ed542f27d421018c33dc9f818d1ae44e", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/abalb_s64.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabalb_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabalb_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabalb_s64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,86 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** abalb_s64_tied1:\n+**\tsabalb\tz0\\.d, z4\\.s, z5\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z (abalb_s64_tied1, svint64_t, svint32_t,\n+\t     z0 = svabalb_s64 (z0, z4, z5),\n+\t     z0 = svabalb (z0, z4, z5))\n+\n+/*\n+** abalb_s64_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tsabalb\tz0\\.d, \\1\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (abalb_s64_tied2, svint64_t, svint32_t,\n+\t\t z0_res = svabalb_s64 (z4, z0, z1),\n+\t\t z0_res = svabalb (z4, z0, z1))\n+\n+/*\n+** abalb_s64_tied3:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tsabalb\tz0\\.d, z1\\.s, \\1\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (abalb_s64_tied3, svint64_t, svint32_t,\n+\t\t z0_res = svabalb_s64 (z4, z1, z0),\n+\t\t z0_res = svabalb (z4, z1, z0))\n+\n+/*\n+** abalb_s64_untied:\n+**\tmovprfx\tz0, z1\n+**\tsabalb\tz0\\.d, z4\\.s, z5\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z (abalb_s64_untied, svint64_t, svint32_t,\n+\t     z0 = svabalb_s64 (z1, z4, z5),\n+\t     z0 = svabalb (z1, z4, z5))\n+\n+/*\n+** abalb_w0_s64_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tsabalb\tz0\\.d, z4\\.s, \\1\n+**\tret\n+*/\n+TEST_DUAL_ZX (abalb_w0_s64_tied1, svint64_t, svint32_t, int32_t,\n+\t      z0 = svabalb_n_s64 (z0, z4, x0),\n+\t      z0 = svabalb (z0, z4, x0))\n+\n+/*\n+** abalb_w0_s64_untied:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tmovprfx\tz0, z1\n+**\tsabalb\tz0\\.d, z4\\.s, \\1\n+**\tret\n+*/\n+TEST_DUAL_ZX (abalb_w0_s64_untied, svint64_t, svint32_t, int32_t,\n+\t      z0 = svabalb_n_s64 (z1, z4, x0),\n+\t      z0 = svabalb (z1, z4, x0))\n+\n+/*\n+** abalb_11_s64_tied1:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tsabalb\tz0\\.d, z4\\.s, \\1\n+**\tret\n+*/\n+TEST_DUAL_Z (abalb_11_s64_tied1, svint64_t, svint32_t,\n+\t     z0 = svabalb_n_s64 (z0, z4, 11),\n+\t     z0 = svabalb (z0, z4, 11))\n+\n+/*\n+** abalb_11_s64_untied:: { xfail *-*-*}\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tmovprfx\tz0, z1\n+**\tsabalb\tz0\\.d, z4\\.s, \\1\n+**\tret\n+*/\n+TEST_DUAL_Z (abalb_11_s64_untied, svint64_t, svint32_t,\n+\t     z0 = svabalb_n_s64 (z1, z4, 11),\n+\t     z0 = svabalb (z1, z4, 11))"}, {"sha": "6cb3d89802d5dbf2a06e20fabe15779b217de73e", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/abalb_u16.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabalb_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabalb_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabalb_u16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,86 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** abalb_u16_tied1:\n+**\tuabalb\tz0\\.h, z4\\.b, z5\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z (abalb_u16_tied1, svuint16_t, svuint8_t,\n+\t     z0 = svabalb_u16 (z0, z4, z5),\n+\t     z0 = svabalb (z0, z4, z5))\n+\n+/*\n+** abalb_u16_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tuabalb\tz0\\.h, \\1\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (abalb_u16_tied2, svuint16_t, svuint8_t,\n+\t\t z0_res = svabalb_u16 (z4, z0, z1),\n+\t\t z0_res = svabalb (z4, z0, z1))\n+\n+/*\n+** abalb_u16_tied3:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tuabalb\tz0\\.h, z1\\.b, \\1\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (abalb_u16_tied3, svuint16_t, svuint8_t,\n+\t\t z0_res = svabalb_u16 (z4, z1, z0),\n+\t\t z0_res = svabalb (z4, z1, z0))\n+\n+/*\n+** abalb_u16_untied:\n+**\tmovprfx\tz0, z1\n+**\tuabalb\tz0\\.h, z4\\.b, z5\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z (abalb_u16_untied, svuint16_t, svuint8_t,\n+\t     z0 = svabalb_u16 (z1, z4, z5),\n+\t     z0 = svabalb (z1, z4, z5))\n+\n+/*\n+** abalb_w0_u16_tied1:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tuabalb\tz0\\.h, z4\\.b, \\1\n+**\tret\n+*/\n+TEST_DUAL_ZX (abalb_w0_u16_tied1, svuint16_t, svuint8_t, uint8_t,\n+\t      z0 = svabalb_n_u16 (z0, z4, x0),\n+\t      z0 = svabalb (z0, z4, x0))\n+\n+/*\n+** abalb_w0_u16_untied:: { xfail *-*-*}\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tmovprfx\tz0, z1\n+**\tuabalb\tz0\\.h, z4\\.b, \\1\n+**\tret\n+*/\n+TEST_DUAL_ZX (abalb_w0_u16_untied, svuint16_t, svuint8_t, uint8_t,\n+\t      z0 = svabalb_n_u16 (z1, z4, x0),\n+\t      z0 = svabalb (z1, z4, x0))\n+\n+/*\n+** abalb_11_u16_tied1:\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tuabalb\tz0\\.h, z4\\.b, \\1\n+**\tret\n+*/\n+TEST_DUAL_Z (abalb_11_u16_tied1, svuint16_t, svuint8_t,\n+\t     z0 = svabalb_n_u16 (z0, z4, 11),\n+\t     z0 = svabalb (z0, z4, 11))\n+\n+/*\n+** abalb_11_u16_untied:: { xfail *-*-*}\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tmovprfx\tz0, z1\n+**\tuabalb\tz0\\.h, z4\\.b, \\1\n+**\tret\n+*/\n+TEST_DUAL_Z (abalb_11_u16_untied, svuint16_t, svuint8_t,\n+\t     z0 = svabalb_n_u16 (z1, z4, 11),\n+\t     z0 = svabalb (z1, z4, 11))"}, {"sha": "5d378da530c9b46af494525a70fd45b40ece5224", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/abalb_u32.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabalb_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabalb_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabalb_u32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,86 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** abalb_u32_tied1:\n+**\tuabalb\tz0\\.s, z4\\.h, z5\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (abalb_u32_tied1, svuint32_t, svuint16_t,\n+\t     z0 = svabalb_u32 (z0, z4, z5),\n+\t     z0 = svabalb (z0, z4, z5))\n+\n+/*\n+** abalb_u32_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tuabalb\tz0\\.s, \\1\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (abalb_u32_tied2, svuint32_t, svuint16_t,\n+\t\t z0_res = svabalb_u32 (z4, z0, z1),\n+\t\t z0_res = svabalb (z4, z0, z1))\n+\n+/*\n+** abalb_u32_tied3:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tuabalb\tz0\\.s, z1\\.h, \\1\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (abalb_u32_tied3, svuint32_t, svuint16_t,\n+\t\t z0_res = svabalb_u32 (z4, z1, z0),\n+\t\t z0_res = svabalb (z4, z1, z0))\n+\n+/*\n+** abalb_u32_untied:\n+**\tmovprfx\tz0, z1\n+**\tuabalb\tz0\\.s, z4\\.h, z5\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (abalb_u32_untied, svuint32_t, svuint16_t,\n+\t     z0 = svabalb_u32 (z1, z4, z5),\n+\t     z0 = svabalb (z1, z4, z5))\n+\n+/*\n+** abalb_w0_u32_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tuabalb\tz0\\.s, z4\\.h, \\1\n+**\tret\n+*/\n+TEST_DUAL_ZX (abalb_w0_u32_tied1, svuint32_t, svuint16_t, uint16_t,\n+\t      z0 = svabalb_n_u32 (z0, z4, x0),\n+\t      z0 = svabalb (z0, z4, x0))\n+\n+/*\n+** abalb_w0_u32_untied:: { xfail *-*-*}\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tmovprfx\tz0, z1\n+**\tuabalb\tz0\\.s, z4\\.h, \\1\n+**\tret\n+*/\n+TEST_DUAL_ZX (abalb_w0_u32_untied, svuint32_t, svuint16_t, uint16_t,\n+\t      z0 = svabalb_n_u32 (z1, z4, x0),\n+\t      z0 = svabalb (z1, z4, x0))\n+\n+/*\n+** abalb_11_u32_tied1:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tuabalb\tz0\\.s, z4\\.h, \\1\n+**\tret\n+*/\n+TEST_DUAL_Z (abalb_11_u32_tied1, svuint32_t, svuint16_t,\n+\t     z0 = svabalb_n_u32 (z0, z4, 11),\n+\t     z0 = svabalb (z0, z4, 11))\n+\n+/*\n+** abalb_11_u32_untied:: { xfail *-*-*}\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tmovprfx\tz0, z1\n+**\tuabalb\tz0\\.s, z4\\.h, \\1\n+**\tret\n+*/\n+TEST_DUAL_Z (abalb_11_u32_untied, svuint32_t, svuint16_t,\n+\t     z0 = svabalb_n_u32 (z1, z4, 11),\n+\t     z0 = svabalb (z1, z4, 11))"}, {"sha": "950938cb43931223358673561d8c21f513b785f5", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/abalb_u64.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabalb_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabalb_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabalb_u64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,86 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** abalb_u64_tied1:\n+**\tuabalb\tz0\\.d, z4\\.s, z5\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z (abalb_u64_tied1, svuint64_t, svuint32_t,\n+\t     z0 = svabalb_u64 (z0, z4, z5),\n+\t     z0 = svabalb (z0, z4, z5))\n+\n+/*\n+** abalb_u64_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tuabalb\tz0\\.d, \\1\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (abalb_u64_tied2, svuint64_t, svuint32_t,\n+\t\t z0_res = svabalb_u64 (z4, z0, z1),\n+\t\t z0_res = svabalb (z4, z0, z1))\n+\n+/*\n+** abalb_u64_tied3:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tuabalb\tz0\\.d, z1\\.s, \\1\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (abalb_u64_tied3, svuint64_t, svuint32_t,\n+\t\t z0_res = svabalb_u64 (z4, z1, z0),\n+\t\t z0_res = svabalb (z4, z1, z0))\n+\n+/*\n+** abalb_u64_untied:\n+**\tmovprfx\tz0, z1\n+**\tuabalb\tz0\\.d, z4\\.s, z5\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z (abalb_u64_untied, svuint64_t, svuint32_t,\n+\t     z0 = svabalb_u64 (z1, z4, z5),\n+\t     z0 = svabalb (z1, z4, z5))\n+\n+/*\n+** abalb_w0_u64_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tuabalb\tz0\\.d, z4\\.s, \\1\n+**\tret\n+*/\n+TEST_DUAL_ZX (abalb_w0_u64_tied1, svuint64_t, svuint32_t, uint32_t,\n+\t      z0 = svabalb_n_u64 (z0, z4, x0),\n+\t      z0 = svabalb (z0, z4, x0))\n+\n+/*\n+** abalb_w0_u64_untied:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tmovprfx\tz0, z1\n+**\tuabalb\tz0\\.d, z4\\.s, \\1\n+**\tret\n+*/\n+TEST_DUAL_ZX (abalb_w0_u64_untied, svuint64_t, svuint32_t, uint32_t,\n+\t      z0 = svabalb_n_u64 (z1, z4, x0),\n+\t      z0 = svabalb (z1, z4, x0))\n+\n+/*\n+** abalb_11_u64_tied1:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tuabalb\tz0\\.d, z4\\.s, \\1\n+**\tret\n+*/\n+TEST_DUAL_Z (abalb_11_u64_tied1, svuint64_t, svuint32_t,\n+\t     z0 = svabalb_n_u64 (z0, z4, 11),\n+\t     z0 = svabalb (z0, z4, 11))\n+\n+/*\n+** abalb_11_u64_untied:: { xfail *-*-*}\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tmovprfx\tz0, z1\n+**\tuabalb\tz0\\.d, z4\\.s, \\1\n+**\tret\n+*/\n+TEST_DUAL_Z (abalb_11_u64_untied, svuint64_t, svuint32_t,\n+\t     z0 = svabalb_n_u64 (z1, z4, 11),\n+\t     z0 = svabalb (z1, z4, 11))"}, {"sha": "7e7fbec29269c79a9d4d0d6997fb8ce5f0a75acb", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/abalt_s16.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabalt_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabalt_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabalt_s16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,86 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** abalt_s16_tied1:\n+**\tsabalt\tz0\\.h, z4\\.b, z5\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z (abalt_s16_tied1, svint16_t, svint8_t,\n+\t     z0 = svabalt_s16 (z0, z4, z5),\n+\t     z0 = svabalt (z0, z4, z5))\n+\n+/*\n+** abalt_s16_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tsabalt\tz0\\.h, \\1\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (abalt_s16_tied2, svint16_t, svint8_t,\n+\t\t z0_res = svabalt_s16 (z4, z0, z1),\n+\t\t z0_res = svabalt (z4, z0, z1))\n+\n+/*\n+** abalt_s16_tied3:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tsabalt\tz0\\.h, z1\\.b, \\1\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (abalt_s16_tied3, svint16_t, svint8_t,\n+\t\t z0_res = svabalt_s16 (z4, z1, z0),\n+\t\t z0_res = svabalt (z4, z1, z0))\n+\n+/*\n+** abalt_s16_untied:\n+**\tmovprfx\tz0, z1\n+**\tsabalt\tz0\\.h, z4\\.b, z5\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z (abalt_s16_untied, svint16_t, svint8_t,\n+\t     z0 = svabalt_s16 (z1, z4, z5),\n+\t     z0 = svabalt (z1, z4, z5))\n+\n+/*\n+** abalt_w0_s16_tied1:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tsabalt\tz0\\.h, z4\\.b, \\1\n+**\tret\n+*/\n+TEST_DUAL_ZX (abalt_w0_s16_tied1, svint16_t, svint8_t, int8_t,\n+\t      z0 = svabalt_n_s16 (z0, z4, x0),\n+\t      z0 = svabalt (z0, z4, x0))\n+\n+/*\n+** abalt_w0_s16_untied:: { xfail *-*-*}\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tmovprfx\tz0, z1\n+**\tsabalt\tz0\\.h, z4\\.b, \\1\n+**\tret\n+*/\n+TEST_DUAL_ZX (abalt_w0_s16_untied, svint16_t, svint8_t, int8_t,\n+\t      z0 = svabalt_n_s16 (z1, z4, x0),\n+\t      z0 = svabalt (z1, z4, x0))\n+\n+/*\n+** abalt_11_s16_tied1:\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tsabalt\tz0\\.h, z4\\.b, \\1\n+**\tret\n+*/\n+TEST_DUAL_Z (abalt_11_s16_tied1, svint16_t, svint8_t,\n+\t     z0 = svabalt_n_s16 (z0, z4, 11),\n+\t     z0 = svabalt (z0, z4, 11))\n+\n+/*\n+** abalt_11_s16_untied:: { xfail *-*-*}\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tmovprfx\tz0, z1\n+**\tsabalt\tz0\\.h, z4\\.b, \\1\n+**\tret\n+*/\n+TEST_DUAL_Z (abalt_11_s16_untied, svint16_t, svint8_t,\n+\t     z0 = svabalt_n_s16 (z1, z4, 11),\n+\t     z0 = svabalt (z1, z4, 11))"}, {"sha": "4173c494ec88f1b4a2d0597a5cebfa43c53518c4", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/abalt_s32.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabalt_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabalt_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabalt_s32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,86 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** abalt_s32_tied1:\n+**\tsabalt\tz0\\.s, z4\\.h, z5\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (abalt_s32_tied1, svint32_t, svint16_t,\n+\t     z0 = svabalt_s32 (z0, z4, z5),\n+\t     z0 = svabalt (z0, z4, z5))\n+\n+/*\n+** abalt_s32_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tsabalt\tz0\\.s, \\1\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (abalt_s32_tied2, svint32_t, svint16_t,\n+\t\t z0_res = svabalt_s32 (z4, z0, z1),\n+\t\t z0_res = svabalt (z4, z0, z1))\n+\n+/*\n+** abalt_s32_tied3:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tsabalt\tz0\\.s, z1\\.h, \\1\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (abalt_s32_tied3, svint32_t, svint16_t,\n+\t\t z0_res = svabalt_s32 (z4, z1, z0),\n+\t\t z0_res = svabalt (z4, z1, z0))\n+\n+/*\n+** abalt_s32_untied:\n+**\tmovprfx\tz0, z1\n+**\tsabalt\tz0\\.s, z4\\.h, z5\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (abalt_s32_untied, svint32_t, svint16_t,\n+\t     z0 = svabalt_s32 (z1, z4, z5),\n+\t     z0 = svabalt (z1, z4, z5))\n+\n+/*\n+** abalt_w0_s32_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tsabalt\tz0\\.s, z4\\.h, \\1\n+**\tret\n+*/\n+TEST_DUAL_ZX (abalt_w0_s32_tied1, svint32_t, svint16_t, int16_t,\n+\t      z0 = svabalt_n_s32 (z0, z4, x0),\n+\t      z0 = svabalt (z0, z4, x0))\n+\n+/*\n+** abalt_w0_s32_untied:: { xfail *-*-*}\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tmovprfx\tz0, z1\n+**\tsabalt\tz0\\.s, z4\\.h, \\1\n+**\tret\n+*/\n+TEST_DUAL_ZX (abalt_w0_s32_untied, svint32_t, svint16_t, int16_t,\n+\t      z0 = svabalt_n_s32 (z1, z4, x0),\n+\t      z0 = svabalt (z1, z4, x0))\n+\n+/*\n+** abalt_11_s32_tied1:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tsabalt\tz0\\.s, z4\\.h, \\1\n+**\tret\n+*/\n+TEST_DUAL_Z (abalt_11_s32_tied1, svint32_t, svint16_t,\n+\t     z0 = svabalt_n_s32 (z0, z4, 11),\n+\t     z0 = svabalt (z0, z4, 11))\n+\n+/*\n+** abalt_11_s32_untied:: { xfail *-*-*}\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tmovprfx\tz0, z1\n+**\tsabalt\tz0\\.s, z4\\.h, \\1\n+**\tret\n+*/\n+TEST_DUAL_Z (abalt_11_s32_untied, svint32_t, svint16_t,\n+\t     z0 = svabalt_n_s32 (z1, z4, 11),\n+\t     z0 = svabalt (z1, z4, 11))"}, {"sha": "39964dedb5d0f836a907d2e6091b39fcf2e1ed8d", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/abalt_s64.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabalt_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabalt_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabalt_s64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,86 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** abalt_s64_tied1:\n+**\tsabalt\tz0\\.d, z4\\.s, z5\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z (abalt_s64_tied1, svint64_t, svint32_t,\n+\t     z0 = svabalt_s64 (z0, z4, z5),\n+\t     z0 = svabalt (z0, z4, z5))\n+\n+/*\n+** abalt_s64_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tsabalt\tz0\\.d, \\1\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (abalt_s64_tied2, svint64_t, svint32_t,\n+\t\t z0_res = svabalt_s64 (z4, z0, z1),\n+\t\t z0_res = svabalt (z4, z0, z1))\n+\n+/*\n+** abalt_s64_tied3:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tsabalt\tz0\\.d, z1\\.s, \\1\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (abalt_s64_tied3, svint64_t, svint32_t,\n+\t\t z0_res = svabalt_s64 (z4, z1, z0),\n+\t\t z0_res = svabalt (z4, z1, z0))\n+\n+/*\n+** abalt_s64_untied:\n+**\tmovprfx\tz0, z1\n+**\tsabalt\tz0\\.d, z4\\.s, z5\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z (abalt_s64_untied, svint64_t, svint32_t,\n+\t     z0 = svabalt_s64 (z1, z4, z5),\n+\t     z0 = svabalt (z1, z4, z5))\n+\n+/*\n+** abalt_w0_s64_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tsabalt\tz0\\.d, z4\\.s, \\1\n+**\tret\n+*/\n+TEST_DUAL_ZX (abalt_w0_s64_tied1, svint64_t, svint32_t, int32_t,\n+\t      z0 = svabalt_n_s64 (z0, z4, x0),\n+\t      z0 = svabalt (z0, z4, x0))\n+\n+/*\n+** abalt_w0_s64_untied:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tmovprfx\tz0, z1\n+**\tsabalt\tz0\\.d, z4\\.s, \\1\n+**\tret\n+*/\n+TEST_DUAL_ZX (abalt_w0_s64_untied, svint64_t, svint32_t, int32_t,\n+\t      z0 = svabalt_n_s64 (z1, z4, x0),\n+\t      z0 = svabalt (z1, z4, x0))\n+\n+/*\n+** abalt_11_s64_tied1:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tsabalt\tz0\\.d, z4\\.s, \\1\n+**\tret\n+*/\n+TEST_DUAL_Z (abalt_11_s64_tied1, svint64_t, svint32_t,\n+\t     z0 = svabalt_n_s64 (z0, z4, 11),\n+\t     z0 = svabalt (z0, z4, 11))\n+\n+/*\n+** abalt_11_s64_untied:: { xfail *-*-*}\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tmovprfx\tz0, z1\n+**\tsabalt\tz0\\.d, z4\\.s, \\1\n+**\tret\n+*/\n+TEST_DUAL_Z (abalt_11_s64_untied, svint64_t, svint32_t,\n+\t     z0 = svabalt_n_s64 (z1, z4, 11),\n+\t     z0 = svabalt (z1, z4, 11))"}, {"sha": "d0f956f8dc81f543ec4f48c6749e59b630400809", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/abalt_u16.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabalt_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabalt_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabalt_u16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,86 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** abalt_u16_tied1:\n+**\tuabalt\tz0\\.h, z4\\.b, z5\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z (abalt_u16_tied1, svuint16_t, svuint8_t,\n+\t     z0 = svabalt_u16 (z0, z4, z5),\n+\t     z0 = svabalt (z0, z4, z5))\n+\n+/*\n+** abalt_u16_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tuabalt\tz0\\.h, \\1\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (abalt_u16_tied2, svuint16_t, svuint8_t,\n+\t\t z0_res = svabalt_u16 (z4, z0, z1),\n+\t\t z0_res = svabalt (z4, z0, z1))\n+\n+/*\n+** abalt_u16_tied3:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tuabalt\tz0\\.h, z1\\.b, \\1\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (abalt_u16_tied3, svuint16_t, svuint8_t,\n+\t\t z0_res = svabalt_u16 (z4, z1, z0),\n+\t\t z0_res = svabalt (z4, z1, z0))\n+\n+/*\n+** abalt_u16_untied:\n+**\tmovprfx\tz0, z1\n+**\tuabalt\tz0\\.h, z4\\.b, z5\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z (abalt_u16_untied, svuint16_t, svuint8_t,\n+\t     z0 = svabalt_u16 (z1, z4, z5),\n+\t     z0 = svabalt (z1, z4, z5))\n+\n+/*\n+** abalt_w0_u16_tied1:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tuabalt\tz0\\.h, z4\\.b, \\1\n+**\tret\n+*/\n+TEST_DUAL_ZX (abalt_w0_u16_tied1, svuint16_t, svuint8_t, uint8_t,\n+\t      z0 = svabalt_n_u16 (z0, z4, x0),\n+\t      z0 = svabalt (z0, z4, x0))\n+\n+/*\n+** abalt_w0_u16_untied:: { xfail *-*-*}\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tmovprfx\tz0, z1\n+**\tuabalt\tz0\\.h, z4\\.b, \\1\n+**\tret\n+*/\n+TEST_DUAL_ZX (abalt_w0_u16_untied, svuint16_t, svuint8_t, uint8_t,\n+\t      z0 = svabalt_n_u16 (z1, z4, x0),\n+\t      z0 = svabalt (z1, z4, x0))\n+\n+/*\n+** abalt_11_u16_tied1:\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tuabalt\tz0\\.h, z4\\.b, \\1\n+**\tret\n+*/\n+TEST_DUAL_Z (abalt_11_u16_tied1, svuint16_t, svuint8_t,\n+\t     z0 = svabalt_n_u16 (z0, z4, 11),\n+\t     z0 = svabalt (z0, z4, 11))\n+\n+/*\n+** abalt_11_u16_untied:: { xfail *-*-*}\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tmovprfx\tz0, z1\n+**\tuabalt\tz0\\.h, z4\\.b, \\1\n+**\tret\n+*/\n+TEST_DUAL_Z (abalt_11_u16_untied, svuint16_t, svuint8_t,\n+\t     z0 = svabalt_n_u16 (z1, z4, 11),\n+\t     z0 = svabalt (z1, z4, 11))"}, {"sha": "efa5760bd00238ad2842a09f6430b849f076b6a4", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/abalt_u32.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabalt_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabalt_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabalt_u32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,86 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** abalt_u32_tied1:\n+**\tuabalt\tz0\\.s, z4\\.h, z5\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (abalt_u32_tied1, svuint32_t, svuint16_t,\n+\t     z0 = svabalt_u32 (z0, z4, z5),\n+\t     z0 = svabalt (z0, z4, z5))\n+\n+/*\n+** abalt_u32_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tuabalt\tz0\\.s, \\1\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (abalt_u32_tied2, svuint32_t, svuint16_t,\n+\t\t z0_res = svabalt_u32 (z4, z0, z1),\n+\t\t z0_res = svabalt (z4, z0, z1))\n+\n+/*\n+** abalt_u32_tied3:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tuabalt\tz0\\.s, z1\\.h, \\1\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (abalt_u32_tied3, svuint32_t, svuint16_t,\n+\t\t z0_res = svabalt_u32 (z4, z1, z0),\n+\t\t z0_res = svabalt (z4, z1, z0))\n+\n+/*\n+** abalt_u32_untied:\n+**\tmovprfx\tz0, z1\n+**\tuabalt\tz0\\.s, z4\\.h, z5\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (abalt_u32_untied, svuint32_t, svuint16_t,\n+\t     z0 = svabalt_u32 (z1, z4, z5),\n+\t     z0 = svabalt (z1, z4, z5))\n+\n+/*\n+** abalt_w0_u32_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tuabalt\tz0\\.s, z4\\.h, \\1\n+**\tret\n+*/\n+TEST_DUAL_ZX (abalt_w0_u32_tied1, svuint32_t, svuint16_t, uint16_t,\n+\t      z0 = svabalt_n_u32 (z0, z4, x0),\n+\t      z0 = svabalt (z0, z4, x0))\n+\n+/*\n+** abalt_w0_u32_untied:: { xfail *-*-*}\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tmovprfx\tz0, z1\n+**\tuabalt\tz0\\.s, z4\\.h, \\1\n+**\tret\n+*/\n+TEST_DUAL_ZX (abalt_w0_u32_untied, svuint32_t, svuint16_t, uint16_t,\n+\t      z0 = svabalt_n_u32 (z1, z4, x0),\n+\t      z0 = svabalt (z1, z4, x0))\n+\n+/*\n+** abalt_11_u32_tied1:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tuabalt\tz0\\.s, z4\\.h, \\1\n+**\tret\n+*/\n+TEST_DUAL_Z (abalt_11_u32_tied1, svuint32_t, svuint16_t,\n+\t     z0 = svabalt_n_u32 (z0, z4, 11),\n+\t     z0 = svabalt (z0, z4, 11))\n+\n+/*\n+** abalt_11_u32_untied:: { xfail *-*-*}\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tmovprfx\tz0, z1\n+**\tuabalt\tz0\\.s, z4\\.h, \\1\n+**\tret\n+*/\n+TEST_DUAL_Z (abalt_11_u32_untied, svuint32_t, svuint16_t,\n+\t     z0 = svabalt_n_u32 (z1, z4, 11),\n+\t     z0 = svabalt (z1, z4, 11))"}, {"sha": "8f1460f440f47b5097194af8f915dd504494562c", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/abalt_u64.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabalt_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabalt_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabalt_u64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,86 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** abalt_u64_tied1:\n+**\tuabalt\tz0\\.d, z4\\.s, z5\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z (abalt_u64_tied1, svuint64_t, svuint32_t,\n+\t     z0 = svabalt_u64 (z0, z4, z5),\n+\t     z0 = svabalt (z0, z4, z5))\n+\n+/*\n+** abalt_u64_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tuabalt\tz0\\.d, \\1\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (abalt_u64_tied2, svuint64_t, svuint32_t,\n+\t\t z0_res = svabalt_u64 (z4, z0, z1),\n+\t\t z0_res = svabalt (z4, z0, z1))\n+\n+/*\n+** abalt_u64_tied3:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tuabalt\tz0\\.d, z1\\.s, \\1\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (abalt_u64_tied3, svuint64_t, svuint32_t,\n+\t\t z0_res = svabalt_u64 (z4, z1, z0),\n+\t\t z0_res = svabalt (z4, z1, z0))\n+\n+/*\n+** abalt_u64_untied:\n+**\tmovprfx\tz0, z1\n+**\tuabalt\tz0\\.d, z4\\.s, z5\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z (abalt_u64_untied, svuint64_t, svuint32_t,\n+\t     z0 = svabalt_u64 (z1, z4, z5),\n+\t     z0 = svabalt (z1, z4, z5))\n+\n+/*\n+** abalt_w0_u64_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tuabalt\tz0\\.d, z4\\.s, \\1\n+**\tret\n+*/\n+TEST_DUAL_ZX (abalt_w0_u64_tied1, svuint64_t, svuint32_t, uint32_t,\n+\t      z0 = svabalt_n_u64 (z0, z4, x0),\n+\t      z0 = svabalt (z0, z4, x0))\n+\n+/*\n+** abalt_w0_u64_untied:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tmovprfx\tz0, z1\n+**\tuabalt\tz0\\.d, z4\\.s, \\1\n+**\tret\n+*/\n+TEST_DUAL_ZX (abalt_w0_u64_untied, svuint64_t, svuint32_t, uint32_t,\n+\t      z0 = svabalt_n_u64 (z1, z4, x0),\n+\t      z0 = svabalt (z1, z4, x0))\n+\n+/*\n+** abalt_11_u64_tied1:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tuabalt\tz0\\.d, z4\\.s, \\1\n+**\tret\n+*/\n+TEST_DUAL_Z (abalt_11_u64_tied1, svuint64_t, svuint32_t,\n+\t     z0 = svabalt_n_u64 (z0, z4, 11),\n+\t     z0 = svabalt (z0, z4, 11))\n+\n+/*\n+** abalt_11_u64_untied:: { xfail *-*-*}\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tmovprfx\tz0, z1\n+**\tuabalt\tz0\\.d, z4\\.s, \\1\n+**\tret\n+*/\n+TEST_DUAL_Z (abalt_11_u64_untied, svuint64_t, svuint32_t,\n+\t     z0 = svabalt_n_u64 (z1, z4, 11),\n+\t     z0 = svabalt (z1, z4, 11))"}, {"sha": "f5f432367f248d1f79f89ee321d57e8e19f4ce12", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/abdlb_s16.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabdlb_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabdlb_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabdlb_s16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** abdlb_s16_tied1:\n+**\tsabdlb\tz0\\.h, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlb_s16_tied1, svint16_t, svint8_t,\n+\t\t    z0_res = svabdlb_s16 (z0, z1),\n+\t\t    z0_res = svabdlb (z0, z1))\n+\n+/*\n+** abdlb_s16_tied2:\n+**\tsabdlb\tz0\\.h, z1\\.b, z0\\.b\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlb_s16_tied2, svint16_t, svint8_t,\n+\t\t    z0_res = svabdlb_s16 (z1, z0),\n+\t\t    z0_res = svabdlb (z1, z0))\n+\n+/*\n+** abdlb_s16_untied:\n+**\tsabdlb\tz0\\.h, z1\\.b, z2\\.b\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlb_s16_untied, svint16_t, svint8_t,\n+\t\t    z0_res = svabdlb_s16 (z1, z2),\n+\t\t    z0_res = svabdlb (z1, z2))\n+\n+/*\n+** abdlb_w0_s16_tied1:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tsabdlb\tz0\\.h, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (abdlb_w0_s16_tied1, svint16_t, svint8_t, int8_t,\n+\t\t     z0_res = svabdlb_n_s16 (z0, x0),\n+\t\t     z0_res = svabdlb (z0, x0))\n+\n+/*\n+** abdlb_w0_s16_untied:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tsabdlb\tz0\\.h, z1\\.b, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (abdlb_w0_s16_untied, svint16_t, svint8_t, int8_t,\n+\t\t     z0_res = svabdlb_n_s16 (z1, x0),\n+\t\t     z0_res = svabdlb (z1, x0))\n+\n+/*\n+** abdlb_11_s16_tied1:\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tsabdlb\tz0\\.h, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlb_11_s16_tied1, svint16_t, svint8_t,\n+\t\t    z0_res = svabdlb_n_s16 (z0, 11),\n+\t\t    z0_res = svabdlb (z0, 11))\n+\n+/*\n+** abdlb_11_s16_untied:\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tsabdlb\tz0\\.h, z1\\.b, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlb_11_s16_untied, svint16_t, svint8_t,\n+\t\t    z0_res = svabdlb_n_s16 (z1, 11),\n+\t\t    z0_res = svabdlb (z1, 11))"}, {"sha": "0555a3e81c9e64988dc72d51f1986c4b1747d7ea", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/abdlb_s32.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabdlb_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabdlb_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabdlb_s32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** abdlb_s32_tied1:\n+**\tsabdlb\tz0\\.s, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlb_s32_tied1, svint32_t, svint16_t,\n+\t\t    z0_res = svabdlb_s32 (z0, z1),\n+\t\t    z0_res = svabdlb (z0, z1))\n+\n+/*\n+** abdlb_s32_tied2:\n+**\tsabdlb\tz0\\.s, z1\\.h, z0\\.h\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlb_s32_tied2, svint32_t, svint16_t,\n+\t\t    z0_res = svabdlb_s32 (z1, z0),\n+\t\t    z0_res = svabdlb (z1, z0))\n+\n+/*\n+** abdlb_s32_untied:\n+**\tsabdlb\tz0\\.s, z1\\.h, z2\\.h\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlb_s32_untied, svint32_t, svint16_t,\n+\t\t    z0_res = svabdlb_s32 (z1, z2),\n+\t\t    z0_res = svabdlb (z1, z2))\n+\n+/*\n+** abdlb_w0_s32_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tsabdlb\tz0\\.s, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (abdlb_w0_s32_tied1, svint32_t, svint16_t, int16_t,\n+\t\t     z0_res = svabdlb_n_s32 (z0, x0),\n+\t\t     z0_res = svabdlb (z0, x0))\n+\n+/*\n+** abdlb_w0_s32_untied:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tsabdlb\tz0\\.s, z1\\.h, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (abdlb_w0_s32_untied, svint32_t, svint16_t, int16_t,\n+\t\t     z0_res = svabdlb_n_s32 (z1, x0),\n+\t\t     z0_res = svabdlb (z1, x0))\n+\n+/*\n+** abdlb_11_s32_tied1:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tsabdlb\tz0\\.s, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlb_11_s32_tied1, svint32_t, svint16_t,\n+\t\t    z0_res = svabdlb_n_s32 (z0, 11),\n+\t\t    z0_res = svabdlb (z0, 11))\n+\n+/*\n+** abdlb_11_s32_untied:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tsabdlb\tz0\\.s, z1\\.h, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlb_11_s32_untied, svint32_t, svint16_t,\n+\t\t    z0_res = svabdlb_n_s32 (z1, 11),\n+\t\t    z0_res = svabdlb (z1, 11))"}, {"sha": "9cbbb8fc68588e2ee19ba8b87a7e1ca502a428fe", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/abdlb_s64.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabdlb_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabdlb_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabdlb_s64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** abdlb_s64_tied1:\n+**\tsabdlb\tz0\\.d, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlb_s64_tied1, svint64_t, svint32_t,\n+\t\t    z0_res = svabdlb_s64 (z0, z1),\n+\t\t    z0_res = svabdlb (z0, z1))\n+\n+/*\n+** abdlb_s64_tied2:\n+**\tsabdlb\tz0\\.d, z1\\.s, z0\\.s\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlb_s64_tied2, svint64_t, svint32_t,\n+\t\t    z0_res = svabdlb_s64 (z1, z0),\n+\t\t    z0_res = svabdlb (z1, z0))\n+\n+/*\n+** abdlb_s64_untied:\n+**\tsabdlb\tz0\\.d, z1\\.s, z2\\.s\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlb_s64_untied, svint64_t, svint32_t,\n+\t\t    z0_res = svabdlb_s64 (z1, z2),\n+\t\t    z0_res = svabdlb (z1, z2))\n+\n+/*\n+** abdlb_w0_s64_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tsabdlb\tz0\\.d, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (abdlb_w0_s64_tied1, svint64_t, svint32_t, int32_t,\n+\t\t     z0_res = svabdlb_n_s64 (z0, x0),\n+\t\t     z0_res = svabdlb (z0, x0))\n+\n+/*\n+** abdlb_w0_s64_untied:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tsabdlb\tz0\\.d, z1\\.s, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (abdlb_w0_s64_untied, svint64_t, svint32_t, int32_t,\n+\t\t     z0_res = svabdlb_n_s64 (z1, x0),\n+\t\t     z0_res = svabdlb (z1, x0))\n+\n+/*\n+** abdlb_11_s64_tied1:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tsabdlb\tz0\\.d, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlb_11_s64_tied1, svint64_t, svint32_t,\n+\t\t    z0_res = svabdlb_n_s64 (z0, 11),\n+\t\t    z0_res = svabdlb (z0, 11))\n+\n+/*\n+** abdlb_11_s64_untied:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tsabdlb\tz0\\.d, z1\\.s, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlb_11_s64_untied, svint64_t, svint32_t,\n+\t\t    z0_res = svabdlb_n_s64 (z1, 11),\n+\t\t    z0_res = svabdlb (z1, 11))"}, {"sha": "64ac0639f5faa042422737c1146447ed5f29fdfe", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/abdlb_u16.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabdlb_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabdlb_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabdlb_u16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** abdlb_u16_tied1:\n+**\tuabdlb\tz0\\.h, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlb_u16_tied1, svuint16_t, svuint8_t,\n+\t\t    z0_res = svabdlb_u16 (z0, z1),\n+\t\t    z0_res = svabdlb (z0, z1))\n+\n+/*\n+** abdlb_u16_tied2:\n+**\tuabdlb\tz0\\.h, z1\\.b, z0\\.b\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlb_u16_tied2, svuint16_t, svuint8_t,\n+\t\t    z0_res = svabdlb_u16 (z1, z0),\n+\t\t    z0_res = svabdlb (z1, z0))\n+\n+/*\n+** abdlb_u16_untied:\n+**\tuabdlb\tz0\\.h, z1\\.b, z2\\.b\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlb_u16_untied, svuint16_t, svuint8_t,\n+\t\t    z0_res = svabdlb_u16 (z1, z2),\n+\t\t    z0_res = svabdlb (z1, z2))\n+\n+/*\n+** abdlb_w0_u16_tied1:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tuabdlb\tz0\\.h, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (abdlb_w0_u16_tied1, svuint16_t, svuint8_t, uint8_t,\n+\t\t     z0_res = svabdlb_n_u16 (z0, x0),\n+\t\t     z0_res = svabdlb (z0, x0))\n+\n+/*\n+** abdlb_w0_u16_untied:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tuabdlb\tz0\\.h, z1\\.b, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (abdlb_w0_u16_untied, svuint16_t, svuint8_t, uint8_t,\n+\t\t     z0_res = svabdlb_n_u16 (z1, x0),\n+\t\t     z0_res = svabdlb (z1, x0))\n+\n+/*\n+** abdlb_11_u16_tied1:\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tuabdlb\tz0\\.h, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlb_11_u16_tied1, svuint16_t, svuint8_t,\n+\t\t    z0_res = svabdlb_n_u16 (z0, 11),\n+\t\t    z0_res = svabdlb (z0, 11))\n+\n+/*\n+** abdlb_11_u16_untied:\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tuabdlb\tz0\\.h, z1\\.b, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlb_11_u16_untied, svuint16_t, svuint8_t,\n+\t\t    z0_res = svabdlb_n_u16 (z1, 11),\n+\t\t    z0_res = svabdlb (z1, 11))"}, {"sha": "8cf896ea22204b0d270969e495f2719179e63151", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/abdlb_u32.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabdlb_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabdlb_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabdlb_u32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** abdlb_u32_tied1:\n+**\tuabdlb\tz0\\.s, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlb_u32_tied1, svuint32_t, svuint16_t,\n+\t\t    z0_res = svabdlb_u32 (z0, z1),\n+\t\t    z0_res = svabdlb (z0, z1))\n+\n+/*\n+** abdlb_u32_tied2:\n+**\tuabdlb\tz0\\.s, z1\\.h, z0\\.h\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlb_u32_tied2, svuint32_t, svuint16_t,\n+\t\t    z0_res = svabdlb_u32 (z1, z0),\n+\t\t    z0_res = svabdlb (z1, z0))\n+\n+/*\n+** abdlb_u32_untied:\n+**\tuabdlb\tz0\\.s, z1\\.h, z2\\.h\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlb_u32_untied, svuint32_t, svuint16_t,\n+\t\t    z0_res = svabdlb_u32 (z1, z2),\n+\t\t    z0_res = svabdlb (z1, z2))\n+\n+/*\n+** abdlb_w0_u32_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tuabdlb\tz0\\.s, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (abdlb_w0_u32_tied1, svuint32_t, svuint16_t, uint16_t,\n+\t\t     z0_res = svabdlb_n_u32 (z0, x0),\n+\t\t     z0_res = svabdlb (z0, x0))\n+\n+/*\n+** abdlb_w0_u32_untied:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tuabdlb\tz0\\.s, z1\\.h, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (abdlb_w0_u32_untied, svuint32_t, svuint16_t, uint16_t,\n+\t\t     z0_res = svabdlb_n_u32 (z1, x0),\n+\t\t     z0_res = svabdlb (z1, x0))\n+\n+/*\n+** abdlb_11_u32_tied1:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tuabdlb\tz0\\.s, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlb_11_u32_tied1, svuint32_t, svuint16_t,\n+\t\t    z0_res = svabdlb_n_u32 (z0, 11),\n+\t\t    z0_res = svabdlb (z0, 11))\n+\n+/*\n+** abdlb_11_u32_untied:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tuabdlb\tz0\\.s, z1\\.h, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlb_11_u32_untied, svuint32_t, svuint16_t,\n+\t\t    z0_res = svabdlb_n_u32 (z1, 11),\n+\t\t    z0_res = svabdlb (z1, 11))"}, {"sha": "6ed67fe0f3b9ba057b2ff0133ff3d3875202eff6", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/abdlb_u64.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabdlb_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabdlb_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabdlb_u64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** abdlb_u64_tied1:\n+**\tuabdlb\tz0\\.d, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlb_u64_tied1, svuint64_t, svuint32_t,\n+\t\t    z0_res = svabdlb_u64 (z0, z1),\n+\t\t    z0_res = svabdlb (z0, z1))\n+\n+/*\n+** abdlb_u64_tied2:\n+**\tuabdlb\tz0\\.d, z1\\.s, z0\\.s\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlb_u64_tied2, svuint64_t, svuint32_t,\n+\t\t    z0_res = svabdlb_u64 (z1, z0),\n+\t\t    z0_res = svabdlb (z1, z0))\n+\n+/*\n+** abdlb_u64_untied:\n+**\tuabdlb\tz0\\.d, z1\\.s, z2\\.s\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlb_u64_untied, svuint64_t, svuint32_t,\n+\t\t    z0_res = svabdlb_u64 (z1, z2),\n+\t\t    z0_res = svabdlb (z1, z2))\n+\n+/*\n+** abdlb_w0_u64_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tuabdlb\tz0\\.d, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (abdlb_w0_u64_tied1, svuint64_t, svuint32_t, uint32_t,\n+\t\t     z0_res = svabdlb_n_u64 (z0, x0),\n+\t\t     z0_res = svabdlb (z0, x0))\n+\n+/*\n+** abdlb_w0_u64_untied:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tuabdlb\tz0\\.d, z1\\.s, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (abdlb_w0_u64_untied, svuint64_t, svuint32_t, uint32_t,\n+\t\t     z0_res = svabdlb_n_u64 (z1, x0),\n+\t\t     z0_res = svabdlb (z1, x0))\n+\n+/*\n+** abdlb_11_u64_tied1:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tuabdlb\tz0\\.d, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlb_11_u64_tied1, svuint64_t, svuint32_t,\n+\t\t    z0_res = svabdlb_n_u64 (z0, 11),\n+\t\t    z0_res = svabdlb (z0, 11))\n+\n+/*\n+** abdlb_11_u64_untied:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tuabdlb\tz0\\.d, z1\\.s, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlb_11_u64_untied, svuint64_t, svuint32_t,\n+\t\t    z0_res = svabdlb_n_u64 (z1, 11),\n+\t\t    z0_res = svabdlb (z1, 11))"}, {"sha": "482d5ed873ffd3f3f6ff61d63d433f99d97429dc", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/abdlt_s16.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabdlt_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabdlt_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabdlt_s16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** abdlt_s16_tied1:\n+**\tsabdlt\tz0\\.h, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlt_s16_tied1, svint16_t, svint8_t,\n+\t\t    z0_res = svabdlt_s16 (z0, z1),\n+\t\t    z0_res = svabdlt (z0, z1))\n+\n+/*\n+** abdlt_s16_tied2:\n+**\tsabdlt\tz0\\.h, z1\\.b, z0\\.b\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlt_s16_tied2, svint16_t, svint8_t,\n+\t\t    z0_res = svabdlt_s16 (z1, z0),\n+\t\t    z0_res = svabdlt (z1, z0))\n+\n+/*\n+** abdlt_s16_untied:\n+**\tsabdlt\tz0\\.h, z1\\.b, z2\\.b\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlt_s16_untied, svint16_t, svint8_t,\n+\t\t    z0_res = svabdlt_s16 (z1, z2),\n+\t\t    z0_res = svabdlt (z1, z2))\n+\n+/*\n+** abdlt_w0_s16_tied1:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tsabdlt\tz0\\.h, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (abdlt_w0_s16_tied1, svint16_t, svint8_t, int8_t,\n+\t\t     z0_res = svabdlt_n_s16 (z0, x0),\n+\t\t     z0_res = svabdlt (z0, x0))\n+\n+/*\n+** abdlt_w0_s16_untied:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tsabdlt\tz0\\.h, z1\\.b, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (abdlt_w0_s16_untied, svint16_t, svint8_t, int8_t,\n+\t\t     z0_res = svabdlt_n_s16 (z1, x0),\n+\t\t     z0_res = svabdlt (z1, x0))\n+\n+/*\n+** abdlt_11_s16_tied1:\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tsabdlt\tz0\\.h, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlt_11_s16_tied1, svint16_t, svint8_t,\n+\t\t    z0_res = svabdlt_n_s16 (z0, 11),\n+\t\t    z0_res = svabdlt (z0, 11))\n+\n+/*\n+** abdlt_11_s16_untied:\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tsabdlt\tz0\\.h, z1\\.b, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlt_11_s16_untied, svint16_t, svint8_t,\n+\t\t    z0_res = svabdlt_n_s16 (z1, 11),\n+\t\t    z0_res = svabdlt (z1, 11))"}, {"sha": "bee805c5f4d69bb27c525f828330899f6360a2cb", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/abdlt_s32.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabdlt_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabdlt_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabdlt_s32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** abdlt_s32_tied1:\n+**\tsabdlt\tz0\\.s, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlt_s32_tied1, svint32_t, svint16_t,\n+\t\t    z0_res = svabdlt_s32 (z0, z1),\n+\t\t    z0_res = svabdlt (z0, z1))\n+\n+/*\n+** abdlt_s32_tied2:\n+**\tsabdlt\tz0\\.s, z1\\.h, z0\\.h\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlt_s32_tied2, svint32_t, svint16_t,\n+\t\t    z0_res = svabdlt_s32 (z1, z0),\n+\t\t    z0_res = svabdlt (z1, z0))\n+\n+/*\n+** abdlt_s32_untied:\n+**\tsabdlt\tz0\\.s, z1\\.h, z2\\.h\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlt_s32_untied, svint32_t, svint16_t,\n+\t\t    z0_res = svabdlt_s32 (z1, z2),\n+\t\t    z0_res = svabdlt (z1, z2))\n+\n+/*\n+** abdlt_w0_s32_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tsabdlt\tz0\\.s, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (abdlt_w0_s32_tied1, svint32_t, svint16_t, int16_t,\n+\t\t     z0_res = svabdlt_n_s32 (z0, x0),\n+\t\t     z0_res = svabdlt (z0, x0))\n+\n+/*\n+** abdlt_w0_s32_untied:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tsabdlt\tz0\\.s, z1\\.h, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (abdlt_w0_s32_untied, svint32_t, svint16_t, int16_t,\n+\t\t     z0_res = svabdlt_n_s32 (z1, x0),\n+\t\t     z0_res = svabdlt (z1, x0))\n+\n+/*\n+** abdlt_11_s32_tied1:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tsabdlt\tz0\\.s, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlt_11_s32_tied1, svint32_t, svint16_t,\n+\t\t    z0_res = svabdlt_n_s32 (z0, 11),\n+\t\t    z0_res = svabdlt (z0, 11))\n+\n+/*\n+** abdlt_11_s32_untied:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tsabdlt\tz0\\.s, z1\\.h, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlt_11_s32_untied, svint32_t, svint16_t,\n+\t\t    z0_res = svabdlt_n_s32 (z1, 11),\n+\t\t    z0_res = svabdlt (z1, 11))"}, {"sha": "ccc9b2ab9b166174ef218d33026b73014f06831f", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/abdlt_s64.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabdlt_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabdlt_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabdlt_s64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** abdlt_s64_tied1:\n+**\tsabdlt\tz0\\.d, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlt_s64_tied1, svint64_t, svint32_t,\n+\t\t    z0_res = svabdlt_s64 (z0, z1),\n+\t\t    z0_res = svabdlt (z0, z1))\n+\n+/*\n+** abdlt_s64_tied2:\n+**\tsabdlt\tz0\\.d, z1\\.s, z0\\.s\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlt_s64_tied2, svint64_t, svint32_t,\n+\t\t    z0_res = svabdlt_s64 (z1, z0),\n+\t\t    z0_res = svabdlt (z1, z0))\n+\n+/*\n+** abdlt_s64_untied:\n+**\tsabdlt\tz0\\.d, z1\\.s, z2\\.s\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlt_s64_untied, svint64_t, svint32_t,\n+\t\t    z0_res = svabdlt_s64 (z1, z2),\n+\t\t    z0_res = svabdlt (z1, z2))\n+\n+/*\n+** abdlt_w0_s64_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tsabdlt\tz0\\.d, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (abdlt_w0_s64_tied1, svint64_t, svint32_t, int32_t,\n+\t\t     z0_res = svabdlt_n_s64 (z0, x0),\n+\t\t     z0_res = svabdlt (z0, x0))\n+\n+/*\n+** abdlt_w0_s64_untied:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tsabdlt\tz0\\.d, z1\\.s, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (abdlt_w0_s64_untied, svint64_t, svint32_t, int32_t,\n+\t\t     z0_res = svabdlt_n_s64 (z1, x0),\n+\t\t     z0_res = svabdlt (z1, x0))\n+\n+/*\n+** abdlt_11_s64_tied1:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tsabdlt\tz0\\.d, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlt_11_s64_tied1, svint64_t, svint32_t,\n+\t\t    z0_res = svabdlt_n_s64 (z0, 11),\n+\t\t    z0_res = svabdlt (z0, 11))\n+\n+/*\n+** abdlt_11_s64_untied:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tsabdlt\tz0\\.d, z1\\.s, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlt_11_s64_untied, svint64_t, svint32_t,\n+\t\t    z0_res = svabdlt_n_s64 (z1, 11),\n+\t\t    z0_res = svabdlt (z1, 11))"}, {"sha": "fb90dd8451010ad964dc02f2f91145683ea6d22e", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/abdlt_u16.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabdlt_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabdlt_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabdlt_u16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** abdlt_u16_tied1:\n+**\tuabdlt\tz0\\.h, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlt_u16_tied1, svuint16_t, svuint8_t,\n+\t\t    z0_res = svabdlt_u16 (z0, z1),\n+\t\t    z0_res = svabdlt (z0, z1))\n+\n+/*\n+** abdlt_u16_tied2:\n+**\tuabdlt\tz0\\.h, z1\\.b, z0\\.b\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlt_u16_tied2, svuint16_t, svuint8_t,\n+\t\t    z0_res = svabdlt_u16 (z1, z0),\n+\t\t    z0_res = svabdlt (z1, z0))\n+\n+/*\n+** abdlt_u16_untied:\n+**\tuabdlt\tz0\\.h, z1\\.b, z2\\.b\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlt_u16_untied, svuint16_t, svuint8_t,\n+\t\t    z0_res = svabdlt_u16 (z1, z2),\n+\t\t    z0_res = svabdlt (z1, z2))\n+\n+/*\n+** abdlt_w0_u16_tied1:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tuabdlt\tz0\\.h, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (abdlt_w0_u16_tied1, svuint16_t, svuint8_t, uint8_t,\n+\t\t     z0_res = svabdlt_n_u16 (z0, x0),\n+\t\t     z0_res = svabdlt (z0, x0))\n+\n+/*\n+** abdlt_w0_u16_untied:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tuabdlt\tz0\\.h, z1\\.b, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (abdlt_w0_u16_untied, svuint16_t, svuint8_t, uint8_t,\n+\t\t     z0_res = svabdlt_n_u16 (z1, x0),\n+\t\t     z0_res = svabdlt (z1, x0))\n+\n+/*\n+** abdlt_11_u16_tied1:\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tuabdlt\tz0\\.h, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlt_11_u16_tied1, svuint16_t, svuint8_t,\n+\t\t    z0_res = svabdlt_n_u16 (z0, 11),\n+\t\t    z0_res = svabdlt (z0, 11))\n+\n+/*\n+** abdlt_11_u16_untied:\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tuabdlt\tz0\\.h, z1\\.b, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlt_11_u16_untied, svuint16_t, svuint8_t,\n+\t\t    z0_res = svabdlt_n_u16 (z1, 11),\n+\t\t    z0_res = svabdlt (z1, 11))"}, {"sha": "161e8f0e3d2e5c38e25567ebc38dba4d2ef42076", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/abdlt_u32.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabdlt_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabdlt_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabdlt_u32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** abdlt_u32_tied1:\n+**\tuabdlt\tz0\\.s, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlt_u32_tied1, svuint32_t, svuint16_t,\n+\t\t    z0_res = svabdlt_u32 (z0, z1),\n+\t\t    z0_res = svabdlt (z0, z1))\n+\n+/*\n+** abdlt_u32_tied2:\n+**\tuabdlt\tz0\\.s, z1\\.h, z0\\.h\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlt_u32_tied2, svuint32_t, svuint16_t,\n+\t\t    z0_res = svabdlt_u32 (z1, z0),\n+\t\t    z0_res = svabdlt (z1, z0))\n+\n+/*\n+** abdlt_u32_untied:\n+**\tuabdlt\tz0\\.s, z1\\.h, z2\\.h\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlt_u32_untied, svuint32_t, svuint16_t,\n+\t\t    z0_res = svabdlt_u32 (z1, z2),\n+\t\t    z0_res = svabdlt (z1, z2))\n+\n+/*\n+** abdlt_w0_u32_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tuabdlt\tz0\\.s, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (abdlt_w0_u32_tied1, svuint32_t, svuint16_t, uint16_t,\n+\t\t     z0_res = svabdlt_n_u32 (z0, x0),\n+\t\t     z0_res = svabdlt (z0, x0))\n+\n+/*\n+** abdlt_w0_u32_untied:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tuabdlt\tz0\\.s, z1\\.h, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (abdlt_w0_u32_untied, svuint32_t, svuint16_t, uint16_t,\n+\t\t     z0_res = svabdlt_n_u32 (z1, x0),\n+\t\t     z0_res = svabdlt (z1, x0))\n+\n+/*\n+** abdlt_11_u32_tied1:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tuabdlt\tz0\\.s, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlt_11_u32_tied1, svuint32_t, svuint16_t,\n+\t\t    z0_res = svabdlt_n_u32 (z0, 11),\n+\t\t    z0_res = svabdlt (z0, 11))\n+\n+/*\n+** abdlt_11_u32_untied:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tuabdlt\tz0\\.s, z1\\.h, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlt_11_u32_untied, svuint32_t, svuint16_t,\n+\t\t    z0_res = svabdlt_n_u32 (z1, 11),\n+\t\t    z0_res = svabdlt (z1, 11))"}, {"sha": "e21cd1626bf30850327cff1e3ef3062b4e75a28e", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/abdlt_u64.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabdlt_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabdlt_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fabdlt_u64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** abdlt_u64_tied1:\n+**\tuabdlt\tz0\\.d, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlt_u64_tied1, svuint64_t, svuint32_t,\n+\t\t    z0_res = svabdlt_u64 (z0, z1),\n+\t\t    z0_res = svabdlt (z0, z1))\n+\n+/*\n+** abdlt_u64_tied2:\n+**\tuabdlt\tz0\\.d, z1\\.s, z0\\.s\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlt_u64_tied2, svuint64_t, svuint32_t,\n+\t\t    z0_res = svabdlt_u64 (z1, z0),\n+\t\t    z0_res = svabdlt (z1, z0))\n+\n+/*\n+** abdlt_u64_untied:\n+**\tuabdlt\tz0\\.d, z1\\.s, z2\\.s\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlt_u64_untied, svuint64_t, svuint32_t,\n+\t\t    z0_res = svabdlt_u64 (z1, z2),\n+\t\t    z0_res = svabdlt (z1, z2))\n+\n+/*\n+** abdlt_w0_u64_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tuabdlt\tz0\\.d, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (abdlt_w0_u64_tied1, svuint64_t, svuint32_t, uint32_t,\n+\t\t     z0_res = svabdlt_n_u64 (z0, x0),\n+\t\t     z0_res = svabdlt (z0, x0))\n+\n+/*\n+** abdlt_w0_u64_untied:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tuabdlt\tz0\\.d, z1\\.s, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (abdlt_w0_u64_untied, svuint64_t, svuint32_t, uint32_t,\n+\t\t     z0_res = svabdlt_n_u64 (z1, x0),\n+\t\t     z0_res = svabdlt (z1, x0))\n+\n+/*\n+** abdlt_11_u64_tied1:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tuabdlt\tz0\\.d, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlt_11_u64_tied1, svuint64_t, svuint32_t,\n+\t\t    z0_res = svabdlt_n_u64 (z0, 11),\n+\t\t    z0_res = svabdlt (z0, 11))\n+\n+/*\n+** abdlt_11_u64_untied:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tuabdlt\tz0\\.d, z1\\.s, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (abdlt_11_u64_untied, svuint64_t, svuint32_t,\n+\t\t    z0_res = svabdlt_n_u64 (z1, 11),\n+\t\t    z0_res = svabdlt (z1, 11))"}, {"sha": "9372accfa06d575fce6dae9bf701a1da5ca85cde", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/adalp_s16.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fadalp_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fadalp_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fadalp_s16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,94 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** adalp_s16_m_tied1:\n+**\tsadalp\tz0\\.h, p0/m, z4\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z (adalp_s16_m_tied1, svint16_t, svint8_t,\n+\t     z0 = svadalp_s16_m (p0, z0, z4),\n+\t     z0 = svadalp_m (p0, z0, z4))\n+\n+/*\n+** adalp_s16_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tsadalp\tz0\\.h, p0/m, \\1\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (adalp_s16_m_tied2, svint16_t, svint8_t,\n+\t\t z0_res = svadalp_s16_m (p0, z4, z0),\n+\t\t z0_res = svadalp_m (p0, z4, z0))\n+\n+/*\n+** adalp_s16_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tsadalp\tz0\\.h, p0/m, z4\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z (adalp_s16_m_untied, svint16_t, svint8_t,\n+\t     z0 = svadalp_s16_m (p0, z1, z4),\n+\t     z0 = svadalp_m (p0, z1, z4))\n+\n+/*\n+** adalp_s16_z_tied1:\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tsadalp\tz0\\.h, p0/m, z4\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z (adalp_s16_z_tied1, svint16_t, svint8_t,\n+\t     z0 = svadalp_s16_z (p0, z0, z4),\n+\t     z0 = svadalp_z (p0, z0, z4))\n+\n+/*\n+** adalp_s16_z_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0\\.h, p0/z, z4\\.h\n+**\tsadalp\tz0\\.h, p0/m, \\1\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (adalp_s16_z_tied2, svint16_t, svint8_t,\n+\t\t z0_res = svadalp_s16_z (p0, z4, z0),\n+\t\t z0_res = svadalp_z (p0, z4, z0))\n+\n+/*\n+** adalp_s16_z_untied:\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tsadalp\tz0\\.h, p0/m, z4\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z (adalp_s16_z_untied, svint16_t, svint8_t,\n+\t     z0 = svadalp_s16_z (p0, z1, z4),\n+\t     z0 = svadalp_z (p0, z1, z4))\n+\n+/*\n+** adalp_s16_x_tied1:\n+**\tsadalp\tz0\\.h, p0/m, z4\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z (adalp_s16_x_tied1, svint16_t, svint8_t,\n+\t     z0 = svadalp_s16_x (p0, z0, z4),\n+\t     z0 = svadalp_x (p0, z0, z4))\n+\n+/*\n+** adalp_s16_x_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tsadalp\tz0\\.h, p0/m, \\1\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (adalp_s16_x_tied2, svint16_t, svint8_t,\n+\t\t z0_res = svadalp_s16_x (p0, z4, z0),\n+\t\t z0_res = svadalp_x (p0, z4, z0))\n+\n+/*\n+** adalp_s16_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tsadalp\tz0\\.h, p0/m, z4\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z (adalp_s16_x_untied, svint16_t, svint8_t,\n+\t     z0 = svadalp_s16_x (p0, z1, z4),\n+\t     z0 = svadalp_x (p0, z1, z4))"}, {"sha": "b0404e027627135499c455a07e00e12ae0a9a8a3", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/adalp_s32.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fadalp_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fadalp_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fadalp_s32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,94 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** adalp_s32_m_tied1:\n+**\tsadalp\tz0\\.s, p0/m, z4\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (adalp_s32_m_tied1, svint32_t, svint16_t,\n+\t     z0 = svadalp_s32_m (p0, z0, z4),\n+\t     z0 = svadalp_m (p0, z0, z4))\n+\n+/*\n+** adalp_s32_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tsadalp\tz0\\.s, p0/m, \\1\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (adalp_s32_m_tied2, svint32_t, svint16_t,\n+\t\t z0_res = svadalp_s32_m (p0, z4, z0),\n+\t\t z0_res = svadalp_m (p0, z4, z0))\n+\n+/*\n+** adalp_s32_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tsadalp\tz0\\.s, p0/m, z4\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (adalp_s32_m_untied, svint32_t, svint16_t,\n+\t     z0 = svadalp_s32_m (p0, z1, z4),\n+\t     z0 = svadalp_m (p0, z1, z4))\n+\n+/*\n+** adalp_s32_z_tied1:\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tsadalp\tz0\\.s, p0/m, z4\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (adalp_s32_z_tied1, svint32_t, svint16_t,\n+\t     z0 = svadalp_s32_z (p0, z0, z4),\n+\t     z0 = svadalp_z (p0, z0, z4))\n+\n+/*\n+** adalp_s32_z_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0\\.s, p0/z, z4\\.s\n+**\tsadalp\tz0\\.s, p0/m, \\1\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (adalp_s32_z_tied2, svint32_t, svint16_t,\n+\t\t z0_res = svadalp_s32_z (p0, z4, z0),\n+\t\t z0_res = svadalp_z (p0, z4, z0))\n+\n+/*\n+** adalp_s32_z_untied:\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tsadalp\tz0\\.s, p0/m, z4\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (adalp_s32_z_untied, svint32_t, svint16_t,\n+\t     z0 = svadalp_s32_z (p0, z1, z4),\n+\t     z0 = svadalp_z (p0, z1, z4))\n+\n+/*\n+** adalp_s32_x_tied1:\n+**\tsadalp\tz0\\.s, p0/m, z4\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (adalp_s32_x_tied1, svint32_t, svint16_t,\n+\t     z0 = svadalp_s32_x (p0, z0, z4),\n+\t     z0 = svadalp_x (p0, z0, z4))\n+\n+/*\n+** adalp_s32_x_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tsadalp\tz0\\.s, p0/m, \\1\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (adalp_s32_x_tied2, svint32_t, svint16_t,\n+\t\t z0_res = svadalp_s32_x (p0, z4, z0),\n+\t\t z0_res = svadalp_x (p0, z4, z0))\n+\n+/*\n+** adalp_s32_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tsadalp\tz0\\.s, p0/m, z4\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (adalp_s32_x_untied, svint32_t, svint16_t,\n+\t     z0 = svadalp_s32_x (p0, z1, z4),\n+\t     z0 = svadalp_x (p0, z1, z4))"}, {"sha": "f17b2c59c7112bf7f07366bd9ec6fbcf80be97dd", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/adalp_s64.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fadalp_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fadalp_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fadalp_s64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,94 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** adalp_s64_m_tied1:\n+**\tsadalp\tz0\\.d, p0/m, z4\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z (adalp_s64_m_tied1, svint64_t, svint32_t,\n+\t     z0 = svadalp_s64_m (p0, z0, z4),\n+\t     z0 = svadalp_m (p0, z0, z4))\n+\n+/*\n+** adalp_s64_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tsadalp\tz0\\.d, p0/m, \\1\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (adalp_s64_m_tied2, svint64_t, svint32_t,\n+\t\t z0_res = svadalp_s64_m (p0, z4, z0),\n+\t\t z0_res = svadalp_m (p0, z4, z0))\n+\n+/*\n+** adalp_s64_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tsadalp\tz0\\.d, p0/m, z4\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z (adalp_s64_m_untied, svint64_t, svint32_t,\n+\t     z0 = svadalp_s64_m (p0, z1, z4),\n+\t     z0 = svadalp_m (p0, z1, z4))\n+\n+/*\n+** adalp_s64_z_tied1:\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tsadalp\tz0\\.d, p0/m, z4\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z (adalp_s64_z_tied1, svint64_t, svint32_t,\n+\t     z0 = svadalp_s64_z (p0, z0, z4),\n+\t     z0 = svadalp_z (p0, z0, z4))\n+\n+/*\n+** adalp_s64_z_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0\\.d, p0/z, z4\\.d\n+**\tsadalp\tz0\\.d, p0/m, \\1\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (adalp_s64_z_tied2, svint64_t, svint32_t,\n+\t\t z0_res = svadalp_s64_z (p0, z4, z0),\n+\t\t z0_res = svadalp_z (p0, z4, z0))\n+\n+/*\n+** adalp_s64_z_untied:\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tsadalp\tz0\\.d, p0/m, z4\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z (adalp_s64_z_untied, svint64_t, svint32_t,\n+\t     z0 = svadalp_s64_z (p0, z1, z4),\n+\t     z0 = svadalp_z (p0, z1, z4))\n+\n+/*\n+** adalp_s64_x_tied1:\n+**\tsadalp\tz0\\.d, p0/m, z4\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z (adalp_s64_x_tied1, svint64_t, svint32_t,\n+\t     z0 = svadalp_s64_x (p0, z0, z4),\n+\t     z0 = svadalp_x (p0, z0, z4))\n+\n+/*\n+** adalp_s64_x_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tsadalp\tz0\\.d, p0/m, \\1\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (adalp_s64_x_tied2, svint64_t, svint32_t,\n+\t\t z0_res = svadalp_s64_x (p0, z4, z0),\n+\t\t z0_res = svadalp_x (p0, z4, z0))\n+\n+/*\n+** adalp_s64_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tsadalp\tz0\\.d, p0/m, z4\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z (adalp_s64_x_untied, svint64_t, svint32_t,\n+\t     z0 = svadalp_s64_x (p0, z1, z4),\n+\t     z0 = svadalp_x (p0, z1, z4))"}, {"sha": "bc4a4ac8fc76e821e0d5332e1d2000e1265be022", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/adalp_u16.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fadalp_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fadalp_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fadalp_u16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,94 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** adalp_u16_m_tied1:\n+**\tuadalp\tz0\\.h, p0/m, z4\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z (adalp_u16_m_tied1, svuint16_t, svuint8_t,\n+\t     z0 = svadalp_u16_m (p0, z0, z4),\n+\t     z0 = svadalp_m (p0, z0, z4))\n+\n+/*\n+** adalp_u16_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tuadalp\tz0\\.h, p0/m, \\1\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (adalp_u16_m_tied2, svuint16_t, svuint8_t,\n+\t\t z0_res = svadalp_u16_m (p0, z4, z0),\n+\t\t z0_res = svadalp_m (p0, z4, z0))\n+\n+/*\n+** adalp_u16_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tuadalp\tz0\\.h, p0/m, z4\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z (adalp_u16_m_untied, svuint16_t, svuint8_t,\n+\t     z0 = svadalp_u16_m (p0, z1, z4),\n+\t     z0 = svadalp_m (p0, z1, z4))\n+\n+/*\n+** adalp_u16_z_tied1:\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tuadalp\tz0\\.h, p0/m, z4\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z (adalp_u16_z_tied1, svuint16_t, svuint8_t,\n+\t     z0 = svadalp_u16_z (p0, z0, z4),\n+\t     z0 = svadalp_z (p0, z0, z4))\n+\n+/*\n+** adalp_u16_z_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0\\.h, p0/z, z4\\.h\n+**\tuadalp\tz0\\.h, p0/m, \\1\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (adalp_u16_z_tied2, svuint16_t, svuint8_t,\n+\t\t z0_res = svadalp_u16_z (p0, z4, z0),\n+\t\t z0_res = svadalp_z (p0, z4, z0))\n+\n+/*\n+** adalp_u16_z_untied:\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tuadalp\tz0\\.h, p0/m, z4\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z (adalp_u16_z_untied, svuint16_t, svuint8_t,\n+\t     z0 = svadalp_u16_z (p0, z1, z4),\n+\t     z0 = svadalp_z (p0, z1, z4))\n+\n+/*\n+** adalp_u16_x_tied1:\n+**\tuadalp\tz0\\.h, p0/m, z4\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z (adalp_u16_x_tied1, svuint16_t, svuint8_t,\n+\t     z0 = svadalp_u16_x (p0, z0, z4),\n+\t     z0 = svadalp_x (p0, z0, z4))\n+\n+/*\n+** adalp_u16_x_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tuadalp\tz0\\.h, p0/m, \\1\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (adalp_u16_x_tied2, svuint16_t, svuint8_t,\n+\t\t z0_res = svadalp_u16_x (p0, z4, z0),\n+\t\t z0_res = svadalp_x (p0, z4, z0))\n+\n+/*\n+** adalp_u16_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tuadalp\tz0\\.h, p0/m, z4\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z (adalp_u16_x_untied, svuint16_t, svuint8_t,\n+\t     z0 = svadalp_u16_x (p0, z1, z4),\n+\t     z0 = svadalp_x (p0, z1, z4))"}, {"sha": "c21c5053a061af78ba3b13d7cf113f56dd097fd8", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/adalp_u32.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fadalp_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fadalp_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fadalp_u32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,94 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** adalp_u32_m_tied1:\n+**\tuadalp\tz0\\.s, p0/m, z4\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (adalp_u32_m_tied1, svuint32_t, svuint16_t,\n+\t     z0 = svadalp_u32_m (p0, z0, z4),\n+\t     z0 = svadalp_m (p0, z0, z4))\n+\n+/*\n+** adalp_u32_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tuadalp\tz0\\.s, p0/m, \\1\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (adalp_u32_m_tied2, svuint32_t, svuint16_t,\n+\t\t z0_res = svadalp_u32_m (p0, z4, z0),\n+\t\t z0_res = svadalp_m (p0, z4, z0))\n+\n+/*\n+** adalp_u32_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tuadalp\tz0\\.s, p0/m, z4\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (adalp_u32_m_untied, svuint32_t, svuint16_t,\n+\t     z0 = svadalp_u32_m (p0, z1, z4),\n+\t     z0 = svadalp_m (p0, z1, z4))\n+\n+/*\n+** adalp_u32_z_tied1:\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tuadalp\tz0\\.s, p0/m, z4\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (adalp_u32_z_tied1, svuint32_t, svuint16_t,\n+\t     z0 = svadalp_u32_z (p0, z0, z4),\n+\t     z0 = svadalp_z (p0, z0, z4))\n+\n+/*\n+** adalp_u32_z_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0\\.s, p0/z, z4\\.s\n+**\tuadalp\tz0\\.s, p0/m, \\1\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (adalp_u32_z_tied2, svuint32_t, svuint16_t,\n+\t\t z0_res = svadalp_u32_z (p0, z4, z0),\n+\t\t z0_res = svadalp_z (p0, z4, z0))\n+\n+/*\n+** adalp_u32_z_untied:\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tuadalp\tz0\\.s, p0/m, z4\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (adalp_u32_z_untied, svuint32_t, svuint16_t,\n+\t     z0 = svadalp_u32_z (p0, z1, z4),\n+\t     z0 = svadalp_z (p0, z1, z4))\n+\n+/*\n+** adalp_u32_x_tied1:\n+**\tuadalp\tz0\\.s, p0/m, z4\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (adalp_u32_x_tied1, svuint32_t, svuint16_t,\n+\t     z0 = svadalp_u32_x (p0, z0, z4),\n+\t     z0 = svadalp_x (p0, z0, z4))\n+\n+/*\n+** adalp_u32_x_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tuadalp\tz0\\.s, p0/m, \\1\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (adalp_u32_x_tied2, svuint32_t, svuint16_t,\n+\t\t z0_res = svadalp_u32_x (p0, z4, z0),\n+\t\t z0_res = svadalp_x (p0, z4, z0))\n+\n+/*\n+** adalp_u32_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tuadalp\tz0\\.s, p0/m, z4\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (adalp_u32_x_untied, svuint32_t, svuint16_t,\n+\t     z0 = svadalp_u32_x (p0, z1, z4),\n+\t     z0 = svadalp_x (p0, z1, z4))"}, {"sha": "761feeb4dae0bed5130ee2f01ce7c07e468fc01f", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/adalp_u64.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fadalp_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fadalp_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fadalp_u64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,94 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** adalp_u64_m_tied1:\n+**\tuadalp\tz0\\.d, p0/m, z4\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z (adalp_u64_m_tied1, svuint64_t, svuint32_t,\n+\t     z0 = svadalp_u64_m (p0, z0, z4),\n+\t     z0 = svadalp_m (p0, z0, z4))\n+\n+/*\n+** adalp_u64_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tuadalp\tz0\\.d, p0/m, \\1\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (adalp_u64_m_tied2, svuint64_t, svuint32_t,\n+\t\t z0_res = svadalp_u64_m (p0, z4, z0),\n+\t\t z0_res = svadalp_m (p0, z4, z0))\n+\n+/*\n+** adalp_u64_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tuadalp\tz0\\.d, p0/m, z4\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z (adalp_u64_m_untied, svuint64_t, svuint32_t,\n+\t     z0 = svadalp_u64_m (p0, z1, z4),\n+\t     z0 = svadalp_m (p0, z1, z4))\n+\n+/*\n+** adalp_u64_z_tied1:\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tuadalp\tz0\\.d, p0/m, z4\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z (adalp_u64_z_tied1, svuint64_t, svuint32_t,\n+\t     z0 = svadalp_u64_z (p0, z0, z4),\n+\t     z0 = svadalp_z (p0, z0, z4))\n+\n+/*\n+** adalp_u64_z_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0\\.d, p0/z, z4\\.d\n+**\tuadalp\tz0\\.d, p0/m, \\1\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (adalp_u64_z_tied2, svuint64_t, svuint32_t,\n+\t\t z0_res = svadalp_u64_z (p0, z4, z0),\n+\t\t z0_res = svadalp_z (p0, z4, z0))\n+\n+/*\n+** adalp_u64_z_untied:\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tuadalp\tz0\\.d, p0/m, z4\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z (adalp_u64_z_untied, svuint64_t, svuint32_t,\n+\t     z0 = svadalp_u64_z (p0, z1, z4),\n+\t     z0 = svadalp_z (p0, z1, z4))\n+\n+/*\n+** adalp_u64_x_tied1:\n+**\tuadalp\tz0\\.d, p0/m, z4\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z (adalp_u64_x_tied1, svuint64_t, svuint32_t,\n+\t     z0 = svadalp_u64_x (p0, z0, z4),\n+\t     z0 = svadalp_x (p0, z0, z4))\n+\n+/*\n+** adalp_u64_x_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tuadalp\tz0\\.d, p0/m, \\1\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (adalp_u64_x_tied2, svuint64_t, svuint32_t,\n+\t\t z0_res = svadalp_u64_x (p0, z4, z0),\n+\t\t z0_res = svadalp_x (p0, z4, z0))\n+\n+/*\n+** adalp_u64_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tuadalp\tz0\\.d, p0/m, z4\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z (adalp_u64_x_untied, svuint64_t, svuint32_t,\n+\t     z0 = svadalp_u64_x (p0, z1, z4),\n+\t     z0 = svadalp_x (p0, z1, z4))"}, {"sha": "64d5c08ba4bd0c163605e05ce36b0550d16600e0", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/adclb_u32.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fadclb_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fadclb_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fadclb_u32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,110 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** adclb_u32_tied1:\n+**\tadclb\tz0\\.s, z1\\.s, z2\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (adclb_u32_tied1, svuint32_t,\n+\t\tz0 = svadclb_u32 (z0, z1, z2),\n+\t\tz0 = svadclb (z0, z1, z2))\n+\n+/*\n+** adclb_u32_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tadclb\tz0\\.s, \\1\\.s, z2\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (adclb_u32_tied2, svuint32_t,\n+\t\tz0 = svadclb_u32 (z1, z0, z2),\n+\t\tz0 = svadclb (z1, z0, z2))\n+\n+/*\n+** adclb_u32_tied3:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tadclb\tz0\\.s, z2\\.s, \\1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (adclb_u32_tied3, svuint32_t,\n+\t\tz0 = svadclb_u32 (z1, z2, z0),\n+\t\tz0 = svadclb (z1, z2, z0))\n+\n+/*\n+** adclb_u32_untied:\n+**\tmovprfx\tz0, z1\n+**\tadclb\tz0\\.s, z2\\.s, z3\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (adclb_u32_untied, svuint32_t,\n+\t\tz0 = svadclb_u32 (z1, z2, z3),\n+\t\tz0 = svadclb (z1, z2, z3))\n+\n+/*\n+** adclb_w0_u32_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tadclb\tz0\\.s, z1\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (adclb_w0_u32_tied1, svuint32_t, uint32_t,\n+\t\t z0 = svadclb_n_u32 (z0, z1, x0),\n+\t\t z0 = svadclb (z0, z1, x0))\n+\n+/*\n+** adclb_w0_u32_tied2:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tadclb\tz0\\.s, \\2\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (adclb_w0_u32_tied2, svuint32_t, uint32_t,\n+\t\t z0 = svadclb_n_u32 (z1, z0, x0),\n+\t\t z0 = svadclb (z1, z0, x0))\n+\n+/*\n+** adclb_w0_u32_untied:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tmovprfx\tz0, z1\n+**\tadclb\tz0\\.s, z2\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (adclb_w0_u32_untied, svuint32_t, uint32_t,\n+\t\t z0 = svadclb_n_u32 (z1, z2, x0),\n+\t\t z0 = svadclb (z1, z2, x0))\n+\n+/*\n+** adclb_11_u32_tied1:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tadclb\tz0\\.s, z1\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (adclb_11_u32_tied1, svuint32_t,\n+\t\tz0 = svadclb_n_u32 (z0, z1, 11),\n+\t\tz0 = svadclb (z0, z1, 11))\n+\n+/*\n+** adclb_11_u32_tied2:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tadclb\tz0\\.s, \\2\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (adclb_11_u32_tied2, svuint32_t,\n+\t\tz0 = svadclb_n_u32 (z1, z0, 11),\n+\t\tz0 = svadclb (z1, z0, 11))\n+\n+/*\n+** adclb_11_u32_untied:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tmovprfx\tz0, z1\n+**\tadclb\tz0\\.s, z2\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (adclb_11_u32_untied, svuint32_t,\n+\t\tz0 = svadclb_n_u32 (z1, z2, 11),\n+\t\tz0 = svadclb (z1, z2, 11))"}, {"sha": "77b2bd294b3367d656093416a3816a6295a7c6d1", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/adclb_u64.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fadclb_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fadclb_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fadclb_u64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,110 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** adclb_u64_tied1:\n+**\tadclb\tz0\\.d, z1\\.d, z2\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (adclb_u64_tied1, svuint64_t,\n+\t\tz0 = svadclb_u64 (z0, z1, z2),\n+\t\tz0 = svadclb (z0, z1, z2))\n+\n+/*\n+** adclb_u64_tied2:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tadclb\tz0\\.d, \\1, z2\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (adclb_u64_tied2, svuint64_t,\n+\t\tz0 = svadclb_u64 (z1, z0, z2),\n+\t\tz0 = svadclb (z1, z0, z2))\n+\n+/*\n+** adclb_u64_tied3:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tadclb\tz0\\.d, z2\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (adclb_u64_tied3, svuint64_t,\n+\t\tz0 = svadclb_u64 (z1, z2, z0),\n+\t\tz0 = svadclb (z1, z2, z0))\n+\n+/*\n+** adclb_u64_untied:\n+**\tmovprfx\tz0, z1\n+**\tadclb\tz0\\.d, z2\\.d, z3\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (adclb_u64_untied, svuint64_t,\n+\t\tz0 = svadclb_u64 (z1, z2, z3),\n+\t\tz0 = svadclb (z1, z2, z3))\n+\n+/*\n+** adclb_x0_u64_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tadclb\tz0\\.d, z1\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (adclb_x0_u64_tied1, svuint64_t, uint64_t,\n+\t\t z0 = svadclb_n_u64 (z0, z1, x0),\n+\t\t z0 = svadclb (z0, z1, x0))\n+\n+/*\n+** adclb_x0_u64_tied2:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tadclb\tz0\\.d, \\2, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (adclb_x0_u64_tied2, svuint64_t, uint64_t,\n+\t\t z0 = svadclb_n_u64 (z1, z0, x0),\n+\t\t z0 = svadclb (z1, z0, x0))\n+\n+/*\n+** adclb_x0_u64_untied:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tmovprfx\tz0, z1\n+**\tadclb\tz0\\.d, z2\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (adclb_x0_u64_untied, svuint64_t, uint64_t,\n+\t\t z0 = svadclb_n_u64 (z1, z2, x0),\n+\t\t z0 = svadclb (z1, z2, x0))\n+\n+/*\n+** adclb_11_u64_tied1:\n+**\tmov\t(z[0-9]+\\.d), #11\n+**\tadclb\tz0\\.d, z1\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (adclb_11_u64_tied1, svuint64_t,\n+\t\tz0 = svadclb_n_u64 (z0, z1, 11),\n+\t\tz0 = svadclb (z0, z1, 11))\n+\n+/*\n+** adclb_11_u64_tied2:\n+**\tmov\t(z[0-9]+\\.d), #11\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tadclb\tz0\\.d, \\2, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (adclb_11_u64_tied2, svuint64_t,\n+\t\tz0 = svadclb_n_u64 (z1, z0, 11),\n+\t\tz0 = svadclb (z1, z0, 11))\n+\n+/*\n+** adclb_11_u64_untied:\n+**\tmov\t(z[0-9]+\\.d), #11\n+**\tmovprfx\tz0, z1\n+**\tadclb\tz0\\.d, z2\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (adclb_11_u64_untied, svuint64_t,\n+\t\tz0 = svadclb_n_u64 (z1, z2, 11),\n+\t\tz0 = svadclb (z1, z2, 11))"}, {"sha": "d7552277ec0cc29254599c3ed4fc407462abc845", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/adclt_u32.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fadclt_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fadclt_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fadclt_u32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,110 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** adclt_u32_tied1:\n+**\tadclt\tz0\\.s, z1\\.s, z2\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (adclt_u32_tied1, svuint32_t,\n+\t\tz0 = svadclt_u32 (z0, z1, z2),\n+\t\tz0 = svadclt (z0, z1, z2))\n+\n+/*\n+** adclt_u32_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tadclt\tz0\\.s, \\1\\.s, z2\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (adclt_u32_tied2, svuint32_t,\n+\t\tz0 = svadclt_u32 (z1, z0, z2),\n+\t\tz0 = svadclt (z1, z0, z2))\n+\n+/*\n+** adclt_u32_tied3:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tadclt\tz0\\.s, z2\\.s, \\1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (adclt_u32_tied3, svuint32_t,\n+\t\tz0 = svadclt_u32 (z1, z2, z0),\n+\t\tz0 = svadclt (z1, z2, z0))\n+\n+/*\n+** adclt_u32_untied:\n+**\tmovprfx\tz0, z1\n+**\tadclt\tz0\\.s, z2\\.s, z3\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (adclt_u32_untied, svuint32_t,\n+\t\tz0 = svadclt_u32 (z1, z2, z3),\n+\t\tz0 = svadclt (z1, z2, z3))\n+\n+/*\n+** adclt_w0_u32_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tadclt\tz0\\.s, z1\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (adclt_w0_u32_tied1, svuint32_t, uint32_t,\n+\t\t z0 = svadclt_n_u32 (z0, z1, x0),\n+\t\t z0 = svadclt (z0, z1, x0))\n+\n+/*\n+** adclt_w0_u32_tied2:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tadclt\tz0\\.s, \\2\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (adclt_w0_u32_tied2, svuint32_t, uint32_t,\n+\t\t z0 = svadclt_n_u32 (z1, z0, x0),\n+\t\t z0 = svadclt (z1, z0, x0))\n+\n+/*\n+** adclt_w0_u32_untied:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tmovprfx\tz0, z1\n+**\tadclt\tz0\\.s, z2\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (adclt_w0_u32_untied, svuint32_t, uint32_t,\n+\t\t z0 = svadclt_n_u32 (z1, z2, x0),\n+\t\t z0 = svadclt (z1, z2, x0))\n+\n+/*\n+** adclt_11_u32_tied1:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tadclt\tz0\\.s, z1\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (adclt_11_u32_tied1, svuint32_t,\n+\t\tz0 = svadclt_n_u32 (z0, z1, 11),\n+\t\tz0 = svadclt (z0, z1, 11))\n+\n+/*\n+** adclt_11_u32_tied2:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tadclt\tz0\\.s, \\2\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (adclt_11_u32_tied2, svuint32_t,\n+\t\tz0 = svadclt_n_u32 (z1, z0, 11),\n+\t\tz0 = svadclt (z1, z0, 11))\n+\n+/*\n+** adclt_11_u32_untied:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tmovprfx\tz0, z1\n+**\tadclt\tz0\\.s, z2\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (adclt_11_u32_untied, svuint32_t,\n+\t\tz0 = svadclt_n_u32 (z1, z2, 11),\n+\t\tz0 = svadclt (z1, z2, 11))"}, {"sha": "b872c35ede985e2c91885258c99897e2102b0c67", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/adclt_u64.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fadclt_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fadclt_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fadclt_u64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,110 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** adclt_u64_tied1:\n+**\tadclt\tz0\\.d, z1\\.d, z2\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (adclt_u64_tied1, svuint64_t,\n+\t\tz0 = svadclt_u64 (z0, z1, z2),\n+\t\tz0 = svadclt (z0, z1, z2))\n+\n+/*\n+** adclt_u64_tied2:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tadclt\tz0\\.d, \\1, z2\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (adclt_u64_tied2, svuint64_t,\n+\t\tz0 = svadclt_u64 (z1, z0, z2),\n+\t\tz0 = svadclt (z1, z0, z2))\n+\n+/*\n+** adclt_u64_tied3:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tadclt\tz0\\.d, z2\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (adclt_u64_tied3, svuint64_t,\n+\t\tz0 = svadclt_u64 (z1, z2, z0),\n+\t\tz0 = svadclt (z1, z2, z0))\n+\n+/*\n+** adclt_u64_untied:\n+**\tmovprfx\tz0, z1\n+**\tadclt\tz0\\.d, z2\\.d, z3\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (adclt_u64_untied, svuint64_t,\n+\t\tz0 = svadclt_u64 (z1, z2, z3),\n+\t\tz0 = svadclt (z1, z2, z3))\n+\n+/*\n+** adclt_x0_u64_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tadclt\tz0\\.d, z1\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (adclt_x0_u64_tied1, svuint64_t, uint64_t,\n+\t\t z0 = svadclt_n_u64 (z0, z1, x0),\n+\t\t z0 = svadclt (z0, z1, x0))\n+\n+/*\n+** adclt_x0_u64_tied2:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tadclt\tz0\\.d, \\2, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (adclt_x0_u64_tied2, svuint64_t, uint64_t,\n+\t\t z0 = svadclt_n_u64 (z1, z0, x0),\n+\t\t z0 = svadclt (z1, z0, x0))\n+\n+/*\n+** adclt_x0_u64_untied:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tmovprfx\tz0, z1\n+**\tadclt\tz0\\.d, z2\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (adclt_x0_u64_untied, svuint64_t, uint64_t,\n+\t\t z0 = svadclt_n_u64 (z1, z2, x0),\n+\t\t z0 = svadclt (z1, z2, x0))\n+\n+/*\n+** adclt_11_u64_tied1:\n+**\tmov\t(z[0-9]+\\.d), #11\n+**\tadclt\tz0\\.d, z1\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (adclt_11_u64_tied1, svuint64_t,\n+\t\tz0 = svadclt_n_u64 (z0, z1, 11),\n+\t\tz0 = svadclt (z0, z1, 11))\n+\n+/*\n+** adclt_11_u64_tied2:\n+**\tmov\t(z[0-9]+\\.d), #11\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tadclt\tz0\\.d, \\2, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (adclt_11_u64_tied2, svuint64_t,\n+\t\tz0 = svadclt_n_u64 (z1, z0, 11),\n+\t\tz0 = svadclt (z1, z0, 11))\n+\n+/*\n+** adclt_11_u64_untied:\n+**\tmov\t(z[0-9]+\\.d), #11\n+**\tmovprfx\tz0, z1\n+**\tadclt\tz0\\.d, z2\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (adclt_11_u64_untied, svuint64_t,\n+\t\tz0 = svadclt_n_u64 (z1, z2, 11),\n+\t\tz0 = svadclt (z1, z2, 11))"}, {"sha": "1dfbd2d27dd758308d4f4506cdc70d0ba66648f3", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addhnb_s16.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddhnb_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddhnb_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddhnb_s16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addhnb_s16_tied1:\n+**\taddhnb\tz0\\.b, (z0\\.h, z1\\.h|z1\\.h, z0\\.h)\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addhnb_s16_tied1, svint8_t, svint16_t,\n+\t\t    z0_res = svaddhnb_s16 (z0, z1),\n+\t\t    z0_res = svaddhnb (z0, z1))\n+\n+/*\n+** addhnb_s16_tied2:\n+**\taddhnb\tz0\\.b, (z0\\.h, z1\\.h|z1\\.h, z0\\.h)\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addhnb_s16_tied2, svint8_t, svint16_t,\n+\t\t    z0_res = svaddhnb_s16 (z1, z0),\n+\t\t    z0_res = svaddhnb (z1, z0))\n+\n+/*\n+** addhnb_s16_untied:\n+**\taddhnb\tz0\\.b, (z1\\.h, z2\\.h|z2\\.h, z1\\.h)\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addhnb_s16_untied, svint8_t, svint16_t,\n+\t\t    z0_res = svaddhnb_s16 (z1, z2),\n+\t\t    z0_res = svaddhnb (z1, z2))\n+\n+/*\n+** addhnb_w0_s16_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\taddhnb\tz0\\.b, (z0\\.h, \\1|\\1, z0\\.h)\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (addhnb_w0_s16_tied1, svint8_t, svint16_t, int16_t,\n+\t\t     z0_res = svaddhnb_n_s16 (z0, x0),\n+\t\t     z0_res = svaddhnb (z0, x0))\n+\n+/*\n+** addhnb_w0_s16_untied:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\taddhnb\tz0\\.b, (z1\\.h, \\1|\\1, z1\\.h)\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (addhnb_w0_s16_untied, svint8_t, svint16_t, int16_t,\n+\t\t     z0_res = svaddhnb_n_s16 (z1, x0),\n+\t\t     z0_res = svaddhnb (z1, x0))\n+\n+/*\n+** addhnb_11_s16_tied1:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\taddhnb\tz0\\.b, (z0\\.h, \\1|\\1, z0\\.h)\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addhnb_11_s16_tied1, svint8_t, svint16_t,\n+\t\t    z0_res = svaddhnb_n_s16 (z0, 11),\n+\t\t    z0_res = svaddhnb (z0, 11))\n+\n+/*\n+** addhnb_11_s16_untied:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\taddhnb\tz0\\.b, (z1\\.h, \\1|\\1, z1\\.h)\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addhnb_11_s16_untied, svint8_t, svint16_t,\n+\t\t    z0_res = svaddhnb_n_s16 (z1, 11),\n+\t\t    z0_res = svaddhnb (z1, 11))"}, {"sha": "44b961c101eb4449445ffd1e24985e98d2f626cc", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addhnb_s32.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddhnb_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddhnb_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddhnb_s32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addhnb_s32_tied1:\n+**\taddhnb\tz0\\.h, (z0\\.s, z1\\.s|z1\\.s, z0\\.s)\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addhnb_s32_tied1, svint16_t, svint32_t,\n+\t\t    z0_res = svaddhnb_s32 (z0, z1),\n+\t\t    z0_res = svaddhnb (z0, z1))\n+\n+/*\n+** addhnb_s32_tied2:\n+**\taddhnb\tz0\\.h, (z0\\.s, z1\\.s|z1\\.s, z0\\.s)\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addhnb_s32_tied2, svint16_t, svint32_t,\n+\t\t    z0_res = svaddhnb_s32 (z1, z0),\n+\t\t    z0_res = svaddhnb (z1, z0))\n+\n+/*\n+** addhnb_s32_untied:\n+**\taddhnb\tz0\\.h, (z1\\.s, z2\\.s|z2\\.s, z1\\.s)\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addhnb_s32_untied, svint16_t, svint32_t,\n+\t\t    z0_res = svaddhnb_s32 (z1, z2),\n+\t\t    z0_res = svaddhnb (z1, z2))\n+\n+/*\n+** addhnb_w0_s32_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\taddhnb\tz0\\.h, (z0\\.s, \\1|\\1, z0\\.s)\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (addhnb_w0_s32_tied1, svint16_t, svint32_t, int32_t,\n+\t\t     z0_res = svaddhnb_n_s32 (z0, x0),\n+\t\t     z0_res = svaddhnb (z0, x0))\n+\n+/*\n+** addhnb_w0_s32_untied:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\taddhnb\tz0\\.h, (z1\\.s, \\1|\\1, z1\\.s)\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (addhnb_w0_s32_untied, svint16_t, svint32_t, int32_t,\n+\t\t     z0_res = svaddhnb_n_s32 (z1, x0),\n+\t\t     z0_res = svaddhnb (z1, x0))\n+\n+/*\n+** addhnb_11_s32_tied1:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\taddhnb\tz0\\.h, (z0\\.s, \\1|\\1, z0\\.s)\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addhnb_11_s32_tied1, svint16_t, svint32_t,\n+\t\t    z0_res = svaddhnb_n_s32 (z0, 11),\n+\t\t    z0_res = svaddhnb (z0, 11))\n+\n+/*\n+** addhnb_11_s32_untied:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\taddhnb\tz0\\.h, (z1\\.s, \\1|\\1, z1\\.s)\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addhnb_11_s32_untied, svint16_t, svint32_t,\n+\t\t    z0_res = svaddhnb_n_s32 (z1, 11),\n+\t\t    z0_res = svaddhnb (z1, 11))"}, {"sha": "97115c28dd51e68a7e10d36d391d0edb232712d9", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addhnb_s64.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddhnb_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddhnb_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddhnb_s64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addhnb_s64_tied1:\n+**\taddhnb\tz0\\.s, (z0\\.d, z1\\.d|z1\\.d, z0\\.d)\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addhnb_s64_tied1, svint32_t, svint64_t,\n+\t\t    z0_res = svaddhnb_s64 (z0, z1),\n+\t\t    z0_res = svaddhnb (z0, z1))\n+\n+/*\n+** addhnb_s64_tied2:\n+**\taddhnb\tz0\\.s, (z0\\.d, z1\\.d|z1\\.d, z0\\.d)\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addhnb_s64_tied2, svint32_t, svint64_t,\n+\t\t    z0_res = svaddhnb_s64 (z1, z0),\n+\t\t    z0_res = svaddhnb (z1, z0))\n+\n+/*\n+** addhnb_s64_untied:\n+**\taddhnb\tz0\\.s, (z1\\.d, z2\\.d|z2\\.d, z1\\.d)\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addhnb_s64_untied, svint32_t, svint64_t,\n+\t\t    z0_res = svaddhnb_s64 (z1, z2),\n+\t\t    z0_res = svaddhnb (z1, z2))\n+\n+/*\n+** addhnb_x0_s64_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\taddhnb\tz0\\.s, (z0\\.d, \\1|\\1, z0\\.d)\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (addhnb_x0_s64_tied1, svint32_t, svint64_t, int64_t,\n+\t\t     z0_res = svaddhnb_n_s64 (z0, x0),\n+\t\t     z0_res = svaddhnb (z0, x0))\n+\n+/*\n+** addhnb_x0_s64_untied:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\taddhnb\tz0\\.s, (z1\\.d, \\1|\\1, z1\\.d)\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (addhnb_x0_s64_untied, svint32_t, svint64_t, int64_t,\n+\t\t     z0_res = svaddhnb_n_s64 (z1, x0),\n+\t\t     z0_res = svaddhnb (z1, x0))\n+\n+/*\n+** addhnb_11_s64_tied1:\n+**\tmov\t(z[0-9]+\\.d), #11\n+**\taddhnb\tz0\\.s, (z0\\.d, \\1|\\1, z0\\.d)\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addhnb_11_s64_tied1, svint32_t, svint64_t,\n+\t\t    z0_res = svaddhnb_n_s64 (z0, 11),\n+\t\t    z0_res = svaddhnb (z0, 11))\n+\n+/*\n+** addhnb_11_s64_untied:\n+**\tmov\t(z[0-9]+\\.d), #11\n+**\taddhnb\tz0\\.s, (z1\\.d, \\1|\\1, z1\\.d)\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addhnb_11_s64_untied, svint32_t, svint64_t,\n+\t\t    z0_res = svaddhnb_n_s64 (z1, 11),\n+\t\t    z0_res = svaddhnb (z1, 11))"}, {"sha": "dc2d12bf17b3d3677eef194f5271881ba68154d8", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addhnb_u16.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddhnb_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddhnb_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddhnb_u16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addhnb_u16_tied1:\n+**\taddhnb\tz0\\.b, (z0\\.h, z1\\.h|z1\\.h, z0\\.h)\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addhnb_u16_tied1, svuint8_t, svuint16_t,\n+\t\t    z0_res = svaddhnb_u16 (z0, z1),\n+\t\t    z0_res = svaddhnb (z0, z1))\n+\n+/*\n+** addhnb_u16_tied2:\n+**\taddhnb\tz0\\.b, (z0\\.h, z1\\.h|z1\\.h, z0\\.h)\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addhnb_u16_tied2, svuint8_t, svuint16_t,\n+\t\t    z0_res = svaddhnb_u16 (z1, z0),\n+\t\t    z0_res = svaddhnb (z1, z0))\n+\n+/*\n+** addhnb_u16_untied:\n+**\taddhnb\tz0\\.b, (z1\\.h, z2\\.h|z2\\.h, z1\\.h)\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addhnb_u16_untied, svuint8_t, svuint16_t,\n+\t\t    z0_res = svaddhnb_u16 (z1, z2),\n+\t\t    z0_res = svaddhnb (z1, z2))\n+\n+/*\n+** addhnb_w0_u16_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\taddhnb\tz0\\.b, (z0\\.h, \\1|\\1, z0\\.h)\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (addhnb_w0_u16_tied1, svuint8_t, svuint16_t, uint16_t,\n+\t\t     z0_res = svaddhnb_n_u16 (z0, x0),\n+\t\t     z0_res = svaddhnb (z0, x0))\n+\n+/*\n+** addhnb_w0_u16_untied:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\taddhnb\tz0\\.b, (z1\\.h, \\1|\\1, z1\\.h)\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (addhnb_w0_u16_untied, svuint8_t, svuint16_t, uint16_t,\n+\t\t     z0_res = svaddhnb_n_u16 (z1, x0),\n+\t\t     z0_res = svaddhnb (z1, x0))\n+\n+/*\n+** addhnb_11_u16_tied1:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\taddhnb\tz0\\.b, (z0\\.h, \\1|\\1, z0\\.h)\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addhnb_11_u16_tied1, svuint8_t, svuint16_t,\n+\t\t    z0_res = svaddhnb_n_u16 (z0, 11),\n+\t\t    z0_res = svaddhnb (z0, 11))\n+\n+/*\n+** addhnb_11_u16_untied:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\taddhnb\tz0\\.b, (z1\\.h, \\1|\\1, z1\\.h)\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addhnb_11_u16_untied, svuint8_t, svuint16_t,\n+\t\t    z0_res = svaddhnb_n_u16 (z1, 11),\n+\t\t    z0_res = svaddhnb (z1, 11))"}, {"sha": "ba6d3b1f2037cf699bf698867e4ae8d86bd80385", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addhnb_u32.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddhnb_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddhnb_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddhnb_u32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addhnb_u32_tied1:\n+**\taddhnb\tz0\\.h, (z0\\.s, z1\\.s|z1\\.s, z0\\.s)\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addhnb_u32_tied1, svuint16_t, svuint32_t,\n+\t\t    z0_res = svaddhnb_u32 (z0, z1),\n+\t\t    z0_res = svaddhnb (z0, z1))\n+\n+/*\n+** addhnb_u32_tied2:\n+**\taddhnb\tz0\\.h, (z0\\.s, z1\\.s|z1\\.s, z0\\.s)\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addhnb_u32_tied2, svuint16_t, svuint32_t,\n+\t\t    z0_res = svaddhnb_u32 (z1, z0),\n+\t\t    z0_res = svaddhnb (z1, z0))\n+\n+/*\n+** addhnb_u32_untied:\n+**\taddhnb\tz0\\.h, (z1\\.s, z2\\.s|z2\\.s, z1\\.s)\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addhnb_u32_untied, svuint16_t, svuint32_t,\n+\t\t    z0_res = svaddhnb_u32 (z1, z2),\n+\t\t    z0_res = svaddhnb (z1, z2))\n+\n+/*\n+** addhnb_w0_u32_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\taddhnb\tz0\\.h, (z0\\.s, \\1|\\1, z0\\.s)\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (addhnb_w0_u32_tied1, svuint16_t, svuint32_t, uint32_t,\n+\t\t     z0_res = svaddhnb_n_u32 (z0, x0),\n+\t\t     z0_res = svaddhnb (z0, x0))\n+\n+/*\n+** addhnb_w0_u32_untied:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\taddhnb\tz0\\.h, (z1\\.s, \\1|\\1, z1\\.s)\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (addhnb_w0_u32_untied, svuint16_t, svuint32_t, uint32_t,\n+\t\t     z0_res = svaddhnb_n_u32 (z1, x0),\n+\t\t     z0_res = svaddhnb (z1, x0))\n+\n+/*\n+** addhnb_11_u32_tied1:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\taddhnb\tz0\\.h, (z0\\.s, \\1|\\1, z0\\.s)\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addhnb_11_u32_tied1, svuint16_t, svuint32_t,\n+\t\t    z0_res = svaddhnb_n_u32 (z0, 11),\n+\t\t    z0_res = svaddhnb (z0, 11))\n+\n+/*\n+** addhnb_11_u32_untied:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\taddhnb\tz0\\.h, (z1\\.s, \\1|\\1, z1\\.s)\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addhnb_11_u32_untied, svuint16_t, svuint32_t,\n+\t\t    z0_res = svaddhnb_n_u32 (z1, 11),\n+\t\t    z0_res = svaddhnb (z1, 11))"}, {"sha": "7baa3146e80b6263651a0738d34591b4e51b3973", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addhnb_u64.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddhnb_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddhnb_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddhnb_u64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addhnb_u64_tied1:\n+**\taddhnb\tz0\\.s, (z0\\.d, z1\\.d|z1\\.d, z0\\.d)\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addhnb_u64_tied1, svuint32_t, svuint64_t,\n+\t\t    z0_res = svaddhnb_u64 (z0, z1),\n+\t\t    z0_res = svaddhnb (z0, z1))\n+\n+/*\n+** addhnb_u64_tied2:\n+**\taddhnb\tz0\\.s, (z0\\.d, z1\\.d|z1\\.d, z0\\.d)\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addhnb_u64_tied2, svuint32_t, svuint64_t,\n+\t\t    z0_res = svaddhnb_u64 (z1, z0),\n+\t\t    z0_res = svaddhnb (z1, z0))\n+\n+/*\n+** addhnb_u64_untied:\n+**\taddhnb\tz0\\.s, (z1\\.d, z2\\.d|z2\\.d, z1\\.d)\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addhnb_u64_untied, svuint32_t, svuint64_t,\n+\t\t    z0_res = svaddhnb_u64 (z1, z2),\n+\t\t    z0_res = svaddhnb (z1, z2))\n+\n+/*\n+** addhnb_x0_u64_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\taddhnb\tz0\\.s, (z0\\.d, \\1|\\1, z0\\.d)\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (addhnb_x0_u64_tied1, svuint32_t, svuint64_t, uint64_t,\n+\t\t     z0_res = svaddhnb_n_u64 (z0, x0),\n+\t\t     z0_res = svaddhnb (z0, x0))\n+\n+/*\n+** addhnb_x0_u64_untied:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\taddhnb\tz0\\.s, (z1\\.d, \\1|\\1, z1\\.d)\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (addhnb_x0_u64_untied, svuint32_t, svuint64_t, uint64_t,\n+\t\t     z0_res = svaddhnb_n_u64 (z1, x0),\n+\t\t     z0_res = svaddhnb (z1, x0))\n+\n+/*\n+** addhnb_11_u64_tied1:\n+**\tmov\t(z[0-9]+\\.d), #11\n+**\taddhnb\tz0\\.s, (z0\\.d, \\1|\\1, z0\\.d)\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addhnb_11_u64_tied1, svuint32_t, svuint64_t,\n+\t\t    z0_res = svaddhnb_n_u64 (z0, 11),\n+\t\t    z0_res = svaddhnb (z0, 11))\n+\n+/*\n+** addhnb_11_u64_untied:\n+**\tmov\t(z[0-9]+\\.d), #11\n+**\taddhnb\tz0\\.s, (z1\\.d, \\1|\\1, z1\\.d)\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addhnb_11_u64_untied, svuint32_t, svuint64_t,\n+\t\t    z0_res = svaddhnb_n_u64 (z1, 11),\n+\t\t    z0_res = svaddhnb (z1, 11))"}, {"sha": "79909ad9d7ee626b4b19d83054977f9246203ef2", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addhnt_s16.c", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddhnt_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddhnt_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddhnt_s16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,89 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addhnt_s16_tied1:\n+**\taddhnt\tz0\\.b, (z4\\.h, z5\\.h|z5\\.h, z4\\.h)\n+**\tret\n+*/\n+TEST_DUAL_Z (addhnt_s16_tied1, svint8_t, svint16_t,\n+\t     z0 = svaddhnt_s16 (z0, z4, z5),\n+\t     z0 = svaddhnt (z0, z4, z5))\n+\n+/* Bad RA choice: no preferred output sequence.  */\n+TEST_DUAL_Z_REV (addhnt_s16_tied2, svint8_t, svint16_t,\n+\t\t z0_res = svaddhnt_s16 (z4, z0, z1),\n+\t\t z0_res = svaddhnt (z4, z0, z1))\n+\n+/* Bad RA choice: no preferred output sequence.  */\n+TEST_DUAL_Z_REV (addhnt_s16_tied3, svint8_t, svint16_t,\n+\t\t z0_res = svaddhnt_s16 (z4, z1, z0),\n+\t\t z0_res = svaddhnt (z4, z1, z0))\n+\n+/*\n+** addhnt_s16_untied:\n+** (\n+**\tmov\tz0\\.d, z1\\.d\n+**\taddhnt\tz0\\.b, (z4\\.h, z5\\.h|z5\\.h, z4\\.h)\n+** |\n+**\taddhnt\tz1\\.b, (z4\\.h, z5\\.h|z5\\.h, z4\\.h)\n+**\tmov\tz0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_DUAL_Z (addhnt_s16_untied, svint8_t, svint16_t,\n+\t     z0 = svaddhnt_s16 (z1, z4, z5),\n+\t     z0 = svaddhnt (z1, z4, z5))\n+\n+/*\n+** addhnt_w0_s16_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\taddhnt\tz0\\.b, (z4\\.h, \\1|\\1, z4\\.h)\n+**\tret\n+*/\n+TEST_DUAL_ZX (addhnt_w0_s16_tied1, svint8_t, svint16_t, int16_t,\n+\t      z0 = svaddhnt_n_s16 (z0, z4, x0),\n+\t      z0 = svaddhnt (z0, z4, x0))\n+\n+/*\n+** addhnt_w0_s16_untied:\n+**\tmov\t(z[0-9]+\\.h), w0\n+** (\n+**\tmov\tz0\\.d, z1\\.d\n+**\taddhnt\tz0\\.b, (z4\\.h, \\1|\\1, z4\\.h)\n+** |\n+**\taddhnt\tz1\\.b, (z4\\.h, \\1|\\1, z4\\.h)\n+**\tmov\tz0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_DUAL_ZX (addhnt_w0_s16_untied, svint8_t, svint16_t, int16_t,\n+\t      z0 = svaddhnt_n_s16 (z1, z4, x0),\n+\t      z0 = svaddhnt (z1, z4, x0))\n+\n+/*\n+** addhnt_11_s16_tied1:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\taddhnt\tz0\\.b, (z4\\.h, \\1|\\1, z4\\.h)\n+**\tret\n+*/\n+TEST_DUAL_Z (addhnt_11_s16_tied1, svint8_t, svint16_t,\n+\t     z0 = svaddhnt_n_s16 (z0, z4, 11),\n+\t     z0 = svaddhnt (z0, z4, 11))\n+\n+/*\n+** addhnt_11_s16_untied:\n+**\tmov\t(z[0-9]+\\.h), #11\n+** (\n+**\tmov\tz0\\.d, z1\\.d\n+**\taddhnt\tz0\\.b, (z4\\.h, \\1|\\1, z4\\.h)\n+** |\n+**\taddhnt\tz1\\.b, (z4\\.h, \\1|\\1, z4\\.h)\n+**\tmov\tz0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_DUAL_Z (addhnt_11_s16_untied, svint8_t, svint16_t,\n+\t     z0 = svaddhnt_n_s16 (z1, z4, 11),\n+\t     z0 = svaddhnt (z1, z4, 11))"}, {"sha": "07e75a126aeb856f9120eb9df69f112c9b2a74cf", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addhnt_s32.c", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddhnt_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddhnt_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddhnt_s32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,89 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addhnt_s32_tied1:\n+**\taddhnt\tz0\\.h, (z4\\.s, z5\\.s|z5\\.s, z4\\.s)\n+**\tret\n+*/\n+TEST_DUAL_Z (addhnt_s32_tied1, svint16_t, svint32_t,\n+\t     z0 = svaddhnt_s32 (z0, z4, z5),\n+\t     z0 = svaddhnt (z0, z4, z5))\n+\n+/* Bad RA choice: no preferred output sequence.  */\n+TEST_DUAL_Z_REV (addhnt_s32_tied2, svint16_t, svint32_t,\n+\t\t z0_res = svaddhnt_s32 (z4, z0, z1),\n+\t\t z0_res = svaddhnt (z4, z0, z1))\n+\n+/* Bad RA choice: no preferred output sequence.  */\n+TEST_DUAL_Z_REV (addhnt_s32_tied3, svint16_t, svint32_t,\n+\t\t z0_res = svaddhnt_s32 (z4, z1, z0),\n+\t\t z0_res = svaddhnt (z4, z1, z0))\n+\n+/*\n+** addhnt_s32_untied:\n+** (\n+**\tmov\tz0\\.d, z1\\.d\n+**\taddhnt\tz0\\.h, (z4\\.s, z5\\.s|z5\\.s, z4\\.s)\n+** |\n+**\taddhnt\tz1\\.h, (z4\\.s, z5\\.s|z5\\.s, z4\\.s)\n+**\tmov\tz0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_DUAL_Z (addhnt_s32_untied, svint16_t, svint32_t,\n+\t     z0 = svaddhnt_s32 (z1, z4, z5),\n+\t     z0 = svaddhnt (z1, z4, z5))\n+\n+/*\n+** addhnt_w0_s32_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\taddhnt\tz0\\.h, (z4\\.s, \\1|\\1, z4\\.s)\n+**\tret\n+*/\n+TEST_DUAL_ZX (addhnt_w0_s32_tied1, svint16_t, svint32_t, int32_t,\n+\t      z0 = svaddhnt_n_s32 (z0, z4, x0),\n+\t      z0 = svaddhnt (z0, z4, x0))\n+\n+/*\n+** addhnt_w0_s32_untied:\n+**\tmov\t(z[0-9]+\\.s), w0\n+** (\n+**\tmov\tz0\\.d, z1\\.d\n+**\taddhnt\tz0\\.h, (z4\\.s, \\1|\\1, z4\\.s)\n+** |\n+**\taddhnt\tz1\\.h, (z4\\.s, \\1|\\1, z4\\.s)\n+**\tmov\tz0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_DUAL_ZX (addhnt_w0_s32_untied, svint16_t, svint32_t, int32_t,\n+\t      z0 = svaddhnt_n_s32 (z1, z4, x0),\n+\t      z0 = svaddhnt (z1, z4, x0))\n+\n+/*\n+** addhnt_11_s32_tied1:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\taddhnt\tz0\\.h, (z4\\.s, \\1|\\1, z4\\.s)\n+**\tret\n+*/\n+TEST_DUAL_Z (addhnt_11_s32_tied1, svint16_t, svint32_t,\n+\t     z0 = svaddhnt_n_s32 (z0, z4, 11),\n+\t     z0 = svaddhnt (z0, z4, 11))\n+\n+/*\n+** addhnt_11_s32_untied:\n+**\tmov\t(z[0-9]+\\.s), #11\n+** (\n+**\tmov\tz0\\.d, z1\\.d\n+**\taddhnt\tz0\\.h, (z4\\.s, \\1|\\1, z4\\.s)\n+** |\n+**\taddhnt\tz1\\.h, (z4\\.s, \\1|\\1, z4\\.s)\n+**\tmov\tz0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_DUAL_Z (addhnt_11_s32_untied, svint16_t, svint32_t,\n+\t     z0 = svaddhnt_n_s32 (z1, z4, 11),\n+\t     z0 = svaddhnt (z1, z4, 11))"}, {"sha": "84984a9ae7b58beafe7fc10f8d4e124211e8c052", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addhnt_s64.c", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddhnt_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddhnt_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddhnt_s64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,89 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addhnt_s64_tied1:\n+**\taddhnt\tz0\\.s, (z4\\.d, z5\\.d|z5\\.d, z4\\.d)\n+**\tret\n+*/\n+TEST_DUAL_Z (addhnt_s64_tied1, svint32_t, svint64_t,\n+\t     z0 = svaddhnt_s64 (z0, z4, z5),\n+\t     z0 = svaddhnt (z0, z4, z5))\n+\n+/* Bad RA choice: no preferred output sequence.  */\n+TEST_DUAL_Z_REV (addhnt_s64_tied2, svint32_t, svint64_t,\n+\t\t z0_res = svaddhnt_s64 (z4, z0, z1),\n+\t\t z0_res = svaddhnt (z4, z0, z1))\n+\n+/* Bad RA choice: no preferred output sequence.  */\n+TEST_DUAL_Z_REV (addhnt_s64_tied3, svint32_t, svint64_t,\n+\t\t z0_res = svaddhnt_s64 (z4, z1, z0),\n+\t\t z0_res = svaddhnt (z4, z1, z0))\n+\n+/*\n+** addhnt_s64_untied:\n+** (\n+**\tmov\tz0\\.d, z1\\.d\n+**\taddhnt\tz0\\.s, (z4\\.d, z5\\.d|z5\\.d, z4\\.d)\n+** |\n+**\taddhnt\tz1\\.s, (z4\\.d, z5\\.d|z5\\.d, z4\\.d)\n+**\tmov\tz0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_DUAL_Z (addhnt_s64_untied, svint32_t, svint64_t,\n+\t     z0 = svaddhnt_s64 (z1, z4, z5),\n+\t     z0 = svaddhnt (z1, z4, z5))\n+\n+/*\n+** addhnt_x0_s64_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\taddhnt\tz0\\.s, (z4\\.d, \\1|\\1, z4\\.d)\n+**\tret\n+*/\n+TEST_DUAL_ZX (addhnt_x0_s64_tied1, svint32_t, svint64_t, int64_t,\n+\t      z0 = svaddhnt_n_s64 (z0, z4, x0),\n+\t      z0 = svaddhnt (z0, z4, x0))\n+\n+/*\n+** addhnt_x0_s64_untied:\n+**\tmov\t(z[0-9]+\\.d), x0\n+** (\n+**\tmov\tz0\\.d, z1\\.d\n+**\taddhnt\tz0\\.s, (z4\\.d, \\1|\\1, z4\\.d)\n+** |\n+**\taddhnt\tz1\\.s, (z4\\.d, \\1|\\1, z4\\.d)\n+**\tmov\tz0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_DUAL_ZX (addhnt_x0_s64_untied, svint32_t, svint64_t, int64_t,\n+\t      z0 = svaddhnt_n_s64 (z1, z4, x0),\n+\t      z0 = svaddhnt (z1, z4, x0))\n+\n+/*\n+** addhnt_11_s64_tied1:\n+**\tmov\t(z[0-9]+\\.d), #11\n+**\taddhnt\tz0\\.s, (z4\\.d, \\1|\\1, z4\\.d)\n+**\tret\n+*/\n+TEST_DUAL_Z (addhnt_11_s64_tied1, svint32_t, svint64_t,\n+\t     z0 = svaddhnt_n_s64 (z0, z4, 11),\n+\t     z0 = svaddhnt (z0, z4, 11))\n+\n+/*\n+** addhnt_11_s64_untied:\n+**\tmov\t(z[0-9]+\\.d), #11\n+** (\n+**\tmov\tz0\\.d, z1\\.d\n+**\taddhnt\tz0\\.s, (z4\\.d, \\1|\\1, z4\\.d)\n+** |\n+**\taddhnt\tz1\\.s, (z4\\.d, \\1|\\1, z4\\.d)\n+**\tmov\tz0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_DUAL_Z (addhnt_11_s64_untied, svint32_t, svint64_t,\n+\t     z0 = svaddhnt_n_s64 (z1, z4, 11),\n+\t     z0 = svaddhnt (z1, z4, 11))"}, {"sha": "a05d79f4edd4aed6d4e0c0399d208607f101b921", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addhnt_u16.c", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddhnt_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddhnt_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddhnt_u16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,89 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addhnt_u16_tied1:\n+**\taddhnt\tz0\\.b, (z4\\.h, z5\\.h|z5\\.h, z4\\.h)\n+**\tret\n+*/\n+TEST_DUAL_Z (addhnt_u16_tied1, svuint8_t, svuint16_t,\n+\t     z0 = svaddhnt_u16 (z0, z4, z5),\n+\t     z0 = svaddhnt (z0, z4, z5))\n+\n+/* Bad RA choice: no preferred output sequence.  */\n+TEST_DUAL_Z_REV (addhnt_u16_tied2, svuint8_t, svuint16_t,\n+\t\t z0_res = svaddhnt_u16 (z4, z0, z1),\n+\t\t z0_res = svaddhnt (z4, z0, z1))\n+\n+/* Bad RA choice: no preferred output sequence.  */\n+TEST_DUAL_Z_REV (addhnt_u16_tied3, svuint8_t, svuint16_t,\n+\t\t z0_res = svaddhnt_u16 (z4, z1, z0),\n+\t\t z0_res = svaddhnt (z4, z1, z0))\n+\n+/*\n+** addhnt_u16_untied:\n+** (\n+**\tmov\tz0\\.d, z1\\.d\n+**\taddhnt\tz0\\.b, (z4\\.h, z5\\.h|z5\\.h, z4\\.h)\n+** |\n+**\taddhnt\tz1\\.b, (z4\\.h, z5\\.h|z5\\.h, z4\\.h)\n+**\tmov\tz0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_DUAL_Z (addhnt_u16_untied, svuint8_t, svuint16_t,\n+\t     z0 = svaddhnt_u16 (z1, z4, z5),\n+\t     z0 = svaddhnt (z1, z4, z5))\n+\n+/*\n+** addhnt_w0_u16_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\taddhnt\tz0\\.b, (z4\\.h, \\1|\\1, z4\\.h)\n+**\tret\n+*/\n+TEST_DUAL_ZX (addhnt_w0_u16_tied1, svuint8_t, svuint16_t, uint16_t,\n+\t      z0 = svaddhnt_n_u16 (z0, z4, x0),\n+\t      z0 = svaddhnt (z0, z4, x0))\n+\n+/*\n+** addhnt_w0_u16_untied:\n+**\tmov\t(z[0-9]+\\.h), w0\n+** (\n+**\tmov\tz0\\.d, z1\\.d\n+**\taddhnt\tz0\\.b, (z4\\.h, \\1|\\1, z4\\.h)\n+** |\n+**\taddhnt\tz1\\.b, (z4\\.h, \\1|\\1, z4\\.h)\n+**\tmov\tz0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_DUAL_ZX (addhnt_w0_u16_untied, svuint8_t, svuint16_t, uint16_t,\n+\t      z0 = svaddhnt_n_u16 (z1, z4, x0),\n+\t      z0 = svaddhnt (z1, z4, x0))\n+\n+/*\n+** addhnt_11_u16_tied1:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\taddhnt\tz0\\.b, (z4\\.h, \\1|\\1, z4\\.h)\n+**\tret\n+*/\n+TEST_DUAL_Z (addhnt_11_u16_tied1, svuint8_t, svuint16_t,\n+\t     z0 = svaddhnt_n_u16 (z0, z4, 11),\n+\t     z0 = svaddhnt (z0, z4, 11))\n+\n+/*\n+** addhnt_11_u16_untied:\n+**\tmov\t(z[0-9]+\\.h), #11\n+** (\n+**\tmov\tz0\\.d, z1\\.d\n+**\taddhnt\tz0\\.b, (z4\\.h, \\1|\\1, z4\\.h)\n+** |\n+**\taddhnt\tz1\\.b, (z4\\.h, \\1|\\1, z4\\.h)\n+**\tmov\tz0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_DUAL_Z (addhnt_11_u16_untied, svuint8_t, svuint16_t,\n+\t     z0 = svaddhnt_n_u16 (z1, z4, 11),\n+\t     z0 = svaddhnt (z1, z4, 11))"}, {"sha": "b2249a7edf3b77034ffe5d2ae53b4e123f53727c", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addhnt_u32.c", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddhnt_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddhnt_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddhnt_u32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,89 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addhnt_u32_tied1:\n+**\taddhnt\tz0\\.h, (z4\\.s, z5\\.s|z5\\.s, z4\\.s)\n+**\tret\n+*/\n+TEST_DUAL_Z (addhnt_u32_tied1, svuint16_t, svuint32_t,\n+\t     z0 = svaddhnt_u32 (z0, z4, z5),\n+\t     z0 = svaddhnt (z0, z4, z5))\n+\n+/* Bad RA choice: no preferred output sequence.  */\n+TEST_DUAL_Z_REV (addhnt_u32_tied2, svuint16_t, svuint32_t,\n+\t\t z0_res = svaddhnt_u32 (z4, z0, z1),\n+\t\t z0_res = svaddhnt (z4, z0, z1))\n+\n+/* Bad RA choice: no preferred output sequence.  */\n+TEST_DUAL_Z_REV (addhnt_u32_tied3, svuint16_t, svuint32_t,\n+\t\t z0_res = svaddhnt_u32 (z4, z1, z0),\n+\t\t z0_res = svaddhnt (z4, z1, z0))\n+\n+/*\n+** addhnt_u32_untied:\n+** (\n+**\tmov\tz0\\.d, z1\\.d\n+**\taddhnt\tz0\\.h, (z4\\.s, z5\\.s|z5\\.s, z4\\.s)\n+** |\n+**\taddhnt\tz1\\.h, (z4\\.s, z5\\.s|z5\\.s, z4\\.s)\n+**\tmov\tz0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_DUAL_Z (addhnt_u32_untied, svuint16_t, svuint32_t,\n+\t     z0 = svaddhnt_u32 (z1, z4, z5),\n+\t     z0 = svaddhnt (z1, z4, z5))\n+\n+/*\n+** addhnt_w0_u32_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\taddhnt\tz0\\.h, (z4\\.s, \\1|\\1, z4\\.s)\n+**\tret\n+*/\n+TEST_DUAL_ZX (addhnt_w0_u32_tied1, svuint16_t, svuint32_t, uint32_t,\n+\t      z0 = svaddhnt_n_u32 (z0, z4, x0),\n+\t      z0 = svaddhnt (z0, z4, x0))\n+\n+/*\n+** addhnt_w0_u32_untied:\n+**\tmov\t(z[0-9]+\\.s), w0\n+** (\n+**\tmov\tz0\\.d, z1\\.d\n+**\taddhnt\tz0\\.h, (z4\\.s, \\1|\\1, z4\\.s)\n+** |\n+**\taddhnt\tz1\\.h, (z4\\.s, \\1|\\1, z4\\.s)\n+**\tmov\tz0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_DUAL_ZX (addhnt_w0_u32_untied, svuint16_t, svuint32_t, uint32_t,\n+\t      z0 = svaddhnt_n_u32 (z1, z4, x0),\n+\t      z0 = svaddhnt (z1, z4, x0))\n+\n+/*\n+** addhnt_11_u32_tied1:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\taddhnt\tz0\\.h, (z4\\.s, \\1|\\1, z4\\.s)\n+**\tret\n+*/\n+TEST_DUAL_Z (addhnt_11_u32_tied1, svuint16_t, svuint32_t,\n+\t     z0 = svaddhnt_n_u32 (z0, z4, 11),\n+\t     z0 = svaddhnt (z0, z4, 11))\n+\n+/*\n+** addhnt_11_u32_untied:\n+**\tmov\t(z[0-9]+\\.s), #11\n+** (\n+**\tmov\tz0\\.d, z1\\.d\n+**\taddhnt\tz0\\.h, (z4\\.s, \\1|\\1, z4\\.s)\n+** |\n+**\taddhnt\tz1\\.h, (z4\\.s, \\1|\\1, z4\\.s)\n+**\tmov\tz0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_DUAL_Z (addhnt_11_u32_untied, svuint16_t, svuint32_t,\n+\t     z0 = svaddhnt_n_u32 (z1, z4, 11),\n+\t     z0 = svaddhnt (z1, z4, 11))"}, {"sha": "c1c01b50d53498d64f11876cc6f9d38ed11141ef", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addhnt_u64.c", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddhnt_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddhnt_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddhnt_u64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,89 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addhnt_u64_tied1:\n+**\taddhnt\tz0\\.s, (z4\\.d, z5\\.d|z5\\.d, z4\\.d)\n+**\tret\n+*/\n+TEST_DUAL_Z (addhnt_u64_tied1, svuint32_t, svuint64_t,\n+\t     z0 = svaddhnt_u64 (z0, z4, z5),\n+\t     z0 = svaddhnt (z0, z4, z5))\n+\n+/* Bad RA choice: no preferred output sequence.  */\n+TEST_DUAL_Z_REV (addhnt_u64_tied2, svuint32_t, svuint64_t,\n+\t\t z0_res = svaddhnt_u64 (z4, z0, z1),\n+\t\t z0_res = svaddhnt (z4, z0, z1))\n+\n+/* Bad RA choice: no preferred output sequence.  */\n+TEST_DUAL_Z_REV (addhnt_u64_tied3, svuint32_t, svuint64_t,\n+\t\t z0_res = svaddhnt_u64 (z4, z1, z0),\n+\t\t z0_res = svaddhnt (z4, z1, z0))\n+\n+/*\n+** addhnt_u64_untied:\n+** (\n+**\tmov\tz0\\.d, z1\\.d\n+**\taddhnt\tz0\\.s, (z4\\.d, z5\\.d|z5\\.d, z4\\.d)\n+** |\n+**\taddhnt\tz1\\.s, (z4\\.d, z5\\.d|z5\\.d, z4\\.d)\n+**\tmov\tz0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_DUAL_Z (addhnt_u64_untied, svuint32_t, svuint64_t,\n+\t     z0 = svaddhnt_u64 (z1, z4, z5),\n+\t     z0 = svaddhnt (z1, z4, z5))\n+\n+/*\n+** addhnt_x0_u64_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\taddhnt\tz0\\.s, (z4\\.d, \\1|\\1, z4\\.d)\n+**\tret\n+*/\n+TEST_DUAL_ZX (addhnt_x0_u64_tied1, svuint32_t, svuint64_t, uint64_t,\n+\t      z0 = svaddhnt_n_u64 (z0, z4, x0),\n+\t      z0 = svaddhnt (z0, z4, x0))\n+\n+/*\n+** addhnt_x0_u64_untied:\n+**\tmov\t(z[0-9]+\\.d), x0\n+** (\n+**\tmov\tz0\\.d, z1\\.d\n+**\taddhnt\tz0\\.s, (z4\\.d, \\1|\\1, z4\\.d)\n+** |\n+**\taddhnt\tz1\\.s, (z4\\.d, \\1|\\1, z4\\.d)\n+**\tmov\tz0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_DUAL_ZX (addhnt_x0_u64_untied, svuint32_t, svuint64_t, uint64_t,\n+\t      z0 = svaddhnt_n_u64 (z1, z4, x0),\n+\t      z0 = svaddhnt (z1, z4, x0))\n+\n+/*\n+** addhnt_11_u64_tied1:\n+**\tmov\t(z[0-9]+\\.d), #11\n+**\taddhnt\tz0\\.s, (z4\\.d, \\1|\\1, z4\\.d)\n+**\tret\n+*/\n+TEST_DUAL_Z (addhnt_11_u64_tied1, svuint32_t, svuint64_t,\n+\t     z0 = svaddhnt_n_u64 (z0, z4, 11),\n+\t     z0 = svaddhnt (z0, z4, 11))\n+\n+/*\n+** addhnt_11_u64_untied:\n+**\tmov\t(z[0-9]+\\.d), #11\n+** (\n+**\tmov\tz0\\.d, z1\\.d\n+**\taddhnt\tz0\\.s, (z4\\.d, \\1|\\1, z4\\.d)\n+** |\n+**\taddhnt\tz1\\.s, (z4\\.d, \\1|\\1, z4\\.d)\n+**\tmov\tz0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_DUAL_Z (addhnt_11_u64_untied, svuint32_t, svuint64_t,\n+\t     z0 = svaddhnt_n_u64 (z1, z4, 11),\n+\t     z0 = svaddhnt (z1, z4, 11))"}, {"sha": "1288dc7c4c9ceec974c6528cd030cf98d00b2c2b", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addlb_s16.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddlb_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddlb_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddlb_s16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addlb_s16_tied1:\n+**\tsaddlb\tz0\\.h, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlb_s16_tied1, svint16_t, svint8_t,\n+\t\t    z0_res = svaddlb_s16 (z0, z1),\n+\t\t    z0_res = svaddlb (z0, z1))\n+\n+/*\n+** addlb_s16_tied2:\n+**\tsaddlb\tz0\\.h, z1\\.b, z0\\.b\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlb_s16_tied2, svint16_t, svint8_t,\n+\t\t    z0_res = svaddlb_s16 (z1, z0),\n+\t\t    z0_res = svaddlb (z1, z0))\n+\n+/*\n+** addlb_s16_untied:\n+**\tsaddlb\tz0\\.h, z1\\.b, z2\\.b\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlb_s16_untied, svint16_t, svint8_t,\n+\t\t    z0_res = svaddlb_s16 (z1, z2),\n+\t\t    z0_res = svaddlb (z1, z2))\n+\n+/*\n+** addlb_w0_s16_tied1:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tsaddlb\tz0\\.h, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (addlb_w0_s16_tied1, svint16_t, svint8_t, int8_t,\n+\t\t     z0_res = svaddlb_n_s16 (z0, x0),\n+\t\t     z0_res = svaddlb (z0, x0))\n+\n+/*\n+** addlb_w0_s16_untied:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tsaddlb\tz0\\.h, z1\\.b, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (addlb_w0_s16_untied, svint16_t, svint8_t, int8_t,\n+\t\t     z0_res = svaddlb_n_s16 (z1, x0),\n+\t\t     z0_res = svaddlb (z1, x0))\n+\n+/*\n+** addlb_11_s16_tied1:\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tsaddlb\tz0\\.h, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlb_11_s16_tied1, svint16_t, svint8_t,\n+\t\t    z0_res = svaddlb_n_s16 (z0, 11),\n+\t\t    z0_res = svaddlb (z0, 11))\n+\n+/*\n+** addlb_11_s16_untied:\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tsaddlb\tz0\\.h, z1\\.b, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlb_11_s16_untied, svint16_t, svint8_t,\n+\t\t    z0_res = svaddlb_n_s16 (z1, 11),\n+\t\t    z0_res = svaddlb (z1, 11))"}, {"sha": "feb7aa748b345dc63f596f73a85e6554fe176df2", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addlb_s32.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddlb_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddlb_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddlb_s32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addlb_s32_tied1:\n+**\tsaddlb\tz0\\.s, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlb_s32_tied1, svint32_t, svint16_t,\n+\t\t    z0_res = svaddlb_s32 (z0, z1),\n+\t\t    z0_res = svaddlb (z0, z1))\n+\n+/*\n+** addlb_s32_tied2:\n+**\tsaddlb\tz0\\.s, z1\\.h, z0\\.h\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlb_s32_tied2, svint32_t, svint16_t,\n+\t\t    z0_res = svaddlb_s32 (z1, z0),\n+\t\t    z0_res = svaddlb (z1, z0))\n+\n+/*\n+** addlb_s32_untied:\n+**\tsaddlb\tz0\\.s, z1\\.h, z2\\.h\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlb_s32_untied, svint32_t, svint16_t,\n+\t\t    z0_res = svaddlb_s32 (z1, z2),\n+\t\t    z0_res = svaddlb (z1, z2))\n+\n+/*\n+** addlb_w0_s32_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tsaddlb\tz0\\.s, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (addlb_w0_s32_tied1, svint32_t, svint16_t, int16_t,\n+\t\t     z0_res = svaddlb_n_s32 (z0, x0),\n+\t\t     z0_res = svaddlb (z0, x0))\n+\n+/*\n+** addlb_w0_s32_untied:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tsaddlb\tz0\\.s, z1\\.h, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (addlb_w0_s32_untied, svint32_t, svint16_t, int16_t,\n+\t\t     z0_res = svaddlb_n_s32 (z1, x0),\n+\t\t     z0_res = svaddlb (z1, x0))\n+\n+/*\n+** addlb_11_s32_tied1:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tsaddlb\tz0\\.s, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlb_11_s32_tied1, svint32_t, svint16_t,\n+\t\t    z0_res = svaddlb_n_s32 (z0, 11),\n+\t\t    z0_res = svaddlb (z0, 11))\n+\n+/*\n+** addlb_11_s32_untied:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tsaddlb\tz0\\.s, z1\\.h, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlb_11_s32_untied, svint32_t, svint16_t,\n+\t\t    z0_res = svaddlb_n_s32 (z1, 11),\n+\t\t    z0_res = svaddlb (z1, 11))"}, {"sha": "a37c340087c1bb553df922e6554c487ce76bf6fa", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addlb_s64.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddlb_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddlb_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddlb_s64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addlb_s64_tied1:\n+**\tsaddlb\tz0\\.d, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlb_s64_tied1, svint64_t, svint32_t,\n+\t\t    z0_res = svaddlb_s64 (z0, z1),\n+\t\t    z0_res = svaddlb (z0, z1))\n+\n+/*\n+** addlb_s64_tied2:\n+**\tsaddlb\tz0\\.d, z1\\.s, z0\\.s\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlb_s64_tied2, svint64_t, svint32_t,\n+\t\t    z0_res = svaddlb_s64 (z1, z0),\n+\t\t    z0_res = svaddlb (z1, z0))\n+\n+/*\n+** addlb_s64_untied:\n+**\tsaddlb\tz0\\.d, z1\\.s, z2\\.s\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlb_s64_untied, svint64_t, svint32_t,\n+\t\t    z0_res = svaddlb_s64 (z1, z2),\n+\t\t    z0_res = svaddlb (z1, z2))\n+\n+/*\n+** addlb_w0_s64_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tsaddlb\tz0\\.d, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (addlb_w0_s64_tied1, svint64_t, svint32_t, int32_t,\n+\t\t     z0_res = svaddlb_n_s64 (z0, x0),\n+\t\t     z0_res = svaddlb (z0, x0))\n+\n+/*\n+** addlb_w0_s64_untied:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tsaddlb\tz0\\.d, z1\\.s, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (addlb_w0_s64_untied, svint64_t, svint32_t, int32_t,\n+\t\t     z0_res = svaddlb_n_s64 (z1, x0),\n+\t\t     z0_res = svaddlb (z1, x0))\n+\n+/*\n+** addlb_11_s64_tied1:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tsaddlb\tz0\\.d, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlb_11_s64_tied1, svint64_t, svint32_t,\n+\t\t    z0_res = svaddlb_n_s64 (z0, 11),\n+\t\t    z0_res = svaddlb (z0, 11))\n+\n+/*\n+** addlb_11_s64_untied:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tsaddlb\tz0\\.d, z1\\.s, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlb_11_s64_untied, svint64_t, svint32_t,\n+\t\t    z0_res = svaddlb_n_s64 (z1, 11),\n+\t\t    z0_res = svaddlb (z1, 11))"}, {"sha": "92cb58e61c52e781ac15a5cc156cab1310b138ec", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addlb_u16.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddlb_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddlb_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddlb_u16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addlb_u16_tied1:\n+**\tuaddlb\tz0\\.h, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlb_u16_tied1, svuint16_t, svuint8_t,\n+\t\t    z0_res = svaddlb_u16 (z0, z1),\n+\t\t    z0_res = svaddlb (z0, z1))\n+\n+/*\n+** addlb_u16_tied2:\n+**\tuaddlb\tz0\\.h, z1\\.b, z0\\.b\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlb_u16_tied2, svuint16_t, svuint8_t,\n+\t\t    z0_res = svaddlb_u16 (z1, z0),\n+\t\t    z0_res = svaddlb (z1, z0))\n+\n+/*\n+** addlb_u16_untied:\n+**\tuaddlb\tz0\\.h, z1\\.b, z2\\.b\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlb_u16_untied, svuint16_t, svuint8_t,\n+\t\t    z0_res = svaddlb_u16 (z1, z2),\n+\t\t    z0_res = svaddlb (z1, z2))\n+\n+/*\n+** addlb_w0_u16_tied1:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tuaddlb\tz0\\.h, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (addlb_w0_u16_tied1, svuint16_t, svuint8_t, uint8_t,\n+\t\t     z0_res = svaddlb_n_u16 (z0, x0),\n+\t\t     z0_res = svaddlb (z0, x0))\n+\n+/*\n+** addlb_w0_u16_untied:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tuaddlb\tz0\\.h, z1\\.b, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (addlb_w0_u16_untied, svuint16_t, svuint8_t, uint8_t,\n+\t\t     z0_res = svaddlb_n_u16 (z1, x0),\n+\t\t     z0_res = svaddlb (z1, x0))\n+\n+/*\n+** addlb_11_u16_tied1:\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tuaddlb\tz0\\.h, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlb_11_u16_tied1, svuint16_t, svuint8_t,\n+\t\t    z0_res = svaddlb_n_u16 (z0, 11),\n+\t\t    z0_res = svaddlb (z0, 11))\n+\n+/*\n+** addlb_11_u16_untied:\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tuaddlb\tz0\\.h, z1\\.b, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlb_11_u16_untied, svuint16_t, svuint8_t,\n+\t\t    z0_res = svaddlb_n_u16 (z1, 11),\n+\t\t    z0_res = svaddlb (z1, 11))"}, {"sha": "0bd2eac445e104bedffe2448681d85cc74de86be", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addlb_u32.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddlb_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddlb_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddlb_u32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addlb_u32_tied1:\n+**\tuaddlb\tz0\\.s, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlb_u32_tied1, svuint32_t, svuint16_t,\n+\t\t    z0_res = svaddlb_u32 (z0, z1),\n+\t\t    z0_res = svaddlb (z0, z1))\n+\n+/*\n+** addlb_u32_tied2:\n+**\tuaddlb\tz0\\.s, z1\\.h, z0\\.h\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlb_u32_tied2, svuint32_t, svuint16_t,\n+\t\t    z0_res = svaddlb_u32 (z1, z0),\n+\t\t    z0_res = svaddlb (z1, z0))\n+\n+/*\n+** addlb_u32_untied:\n+**\tuaddlb\tz0\\.s, z1\\.h, z2\\.h\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlb_u32_untied, svuint32_t, svuint16_t,\n+\t\t    z0_res = svaddlb_u32 (z1, z2),\n+\t\t    z0_res = svaddlb (z1, z2))\n+\n+/*\n+** addlb_w0_u32_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tuaddlb\tz0\\.s, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (addlb_w0_u32_tied1, svuint32_t, svuint16_t, uint16_t,\n+\t\t     z0_res = svaddlb_n_u32 (z0, x0),\n+\t\t     z0_res = svaddlb (z0, x0))\n+\n+/*\n+** addlb_w0_u32_untied:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tuaddlb\tz0\\.s, z1\\.h, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (addlb_w0_u32_untied, svuint32_t, svuint16_t, uint16_t,\n+\t\t     z0_res = svaddlb_n_u32 (z1, x0),\n+\t\t     z0_res = svaddlb (z1, x0))\n+\n+/*\n+** addlb_11_u32_tied1:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tuaddlb\tz0\\.s, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlb_11_u32_tied1, svuint32_t, svuint16_t,\n+\t\t    z0_res = svaddlb_n_u32 (z0, 11),\n+\t\t    z0_res = svaddlb (z0, 11))\n+\n+/*\n+** addlb_11_u32_untied:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tuaddlb\tz0\\.s, z1\\.h, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlb_11_u32_untied, svuint32_t, svuint16_t,\n+\t\t    z0_res = svaddlb_n_u32 (z1, 11),\n+\t\t    z0_res = svaddlb (z1, 11))"}, {"sha": "758d3e0d002ad0766cd76e0d79d1a7a55dedc323", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addlb_u64.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddlb_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddlb_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddlb_u64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addlb_u64_tied1:\n+**\tuaddlb\tz0\\.d, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlb_u64_tied1, svuint64_t, svuint32_t,\n+\t\t    z0_res = svaddlb_u64 (z0, z1),\n+\t\t    z0_res = svaddlb (z0, z1))\n+\n+/*\n+** addlb_u64_tied2:\n+**\tuaddlb\tz0\\.d, z1\\.s, z0\\.s\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlb_u64_tied2, svuint64_t, svuint32_t,\n+\t\t    z0_res = svaddlb_u64 (z1, z0),\n+\t\t    z0_res = svaddlb (z1, z0))\n+\n+/*\n+** addlb_u64_untied:\n+**\tuaddlb\tz0\\.d, z1\\.s, z2\\.s\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlb_u64_untied, svuint64_t, svuint32_t,\n+\t\t    z0_res = svaddlb_u64 (z1, z2),\n+\t\t    z0_res = svaddlb (z1, z2))\n+\n+/*\n+** addlb_w0_u64_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tuaddlb\tz0\\.d, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (addlb_w0_u64_tied1, svuint64_t, svuint32_t, uint32_t,\n+\t\t     z0_res = svaddlb_n_u64 (z0, x0),\n+\t\t     z0_res = svaddlb (z0, x0))\n+\n+/*\n+** addlb_w0_u64_untied:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tuaddlb\tz0\\.d, z1\\.s, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (addlb_w0_u64_untied, svuint64_t, svuint32_t, uint32_t,\n+\t\t     z0_res = svaddlb_n_u64 (z1, x0),\n+\t\t     z0_res = svaddlb (z1, x0))\n+\n+/*\n+** addlb_11_u64_tied1:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tuaddlb\tz0\\.d, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlb_11_u64_tied1, svuint64_t, svuint32_t,\n+\t\t    z0_res = svaddlb_n_u64 (z0, 11),\n+\t\t    z0_res = svaddlb (z0, 11))\n+\n+/*\n+** addlb_11_u64_untied:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tuaddlb\tz0\\.d, z1\\.s, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlb_11_u64_untied, svuint64_t, svuint32_t,\n+\t\t    z0_res = svaddlb_n_u64 (z1, 11),\n+\t\t    z0_res = svaddlb (z1, 11))"}, {"sha": "c6bc5ea81c84a2ae9981b36092a0260ed86c03ab", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addlbt_s16.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddlbt_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddlbt_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddlbt_s16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addlbt_s16_tied1:\n+**\tsaddlbt\tz0\\.h, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlbt_s16_tied1, svint16_t, svint8_t,\n+\t\t    z0_res = svaddlbt_s16 (z0, z1),\n+\t\t    z0_res = svaddlbt (z0, z1))\n+\n+/*\n+** addlbt_s16_tied2:\n+**\tsaddlbt\tz0\\.h, z1\\.b, z0\\.b\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlbt_s16_tied2, svint16_t, svint8_t,\n+\t\t    z0_res = svaddlbt_s16 (z1, z0),\n+\t\t    z0_res = svaddlbt (z1, z0))\n+\n+/*\n+** addlbt_s16_untied:\n+**\tsaddlbt\tz0\\.h, z1\\.b, z2\\.b\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlbt_s16_untied, svint16_t, svint8_t,\n+\t\t    z0_res = svaddlbt_s16 (z1, z2),\n+\t\t    z0_res = svaddlbt (z1, z2))\n+\n+/*\n+** addlbt_w0_s16_tied1:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tsaddlbt\tz0\\.h, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (addlbt_w0_s16_tied1, svint16_t, svint8_t, int8_t,\n+\t\t     z0_res = svaddlbt_n_s16 (z0, x0),\n+\t\t     z0_res = svaddlbt (z0, x0))\n+\n+/*\n+** addlbt_w0_s16_untied:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tsaddlbt\tz0\\.h, z1\\.b, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (addlbt_w0_s16_untied, svint16_t, svint8_t, int8_t,\n+\t\t     z0_res = svaddlbt_n_s16 (z1, x0),\n+\t\t     z0_res = svaddlbt (z1, x0))\n+\n+/*\n+** addlbt_11_s16_tied1:\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tsaddlbt\tz0\\.h, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlbt_11_s16_tied1, svint16_t, svint8_t,\n+\t\t    z0_res = svaddlbt_n_s16 (z0, 11),\n+\t\t    z0_res = svaddlbt (z0, 11))\n+\n+/*\n+** addlbt_11_s16_untied:\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tsaddlbt\tz0\\.h, z1\\.b, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlbt_11_s16_untied, svint16_t, svint8_t,\n+\t\t    z0_res = svaddlbt_n_s16 (z1, 11),\n+\t\t    z0_res = svaddlbt (z1, 11))"}, {"sha": "c37271a0a7da342844ad8f13890f71d9a89007c3", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addlbt_s32.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddlbt_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddlbt_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddlbt_s32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addlbt_s32_tied1:\n+**\tsaddlbt\tz0\\.s, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlbt_s32_tied1, svint32_t, svint16_t,\n+\t\t    z0_res = svaddlbt_s32 (z0, z1),\n+\t\t    z0_res = svaddlbt (z0, z1))\n+\n+/*\n+** addlbt_s32_tied2:\n+**\tsaddlbt\tz0\\.s, z1\\.h, z0\\.h\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlbt_s32_tied2, svint32_t, svint16_t,\n+\t\t    z0_res = svaddlbt_s32 (z1, z0),\n+\t\t    z0_res = svaddlbt (z1, z0))\n+\n+/*\n+** addlbt_s32_untied:\n+**\tsaddlbt\tz0\\.s, z1\\.h, z2\\.h\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlbt_s32_untied, svint32_t, svint16_t,\n+\t\t    z0_res = svaddlbt_s32 (z1, z2),\n+\t\t    z0_res = svaddlbt (z1, z2))\n+\n+/*\n+** addlbt_w0_s32_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tsaddlbt\tz0\\.s, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (addlbt_w0_s32_tied1, svint32_t, svint16_t, int16_t,\n+\t\t     z0_res = svaddlbt_n_s32 (z0, x0),\n+\t\t     z0_res = svaddlbt (z0, x0))\n+\n+/*\n+** addlbt_w0_s32_untied:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tsaddlbt\tz0\\.s, z1\\.h, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (addlbt_w0_s32_untied, svint32_t, svint16_t, int16_t,\n+\t\t     z0_res = svaddlbt_n_s32 (z1, x0),\n+\t\t     z0_res = svaddlbt (z1, x0))\n+\n+/*\n+** addlbt_11_s32_tied1:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tsaddlbt\tz0\\.s, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlbt_11_s32_tied1, svint32_t, svint16_t,\n+\t\t    z0_res = svaddlbt_n_s32 (z0, 11),\n+\t\t    z0_res = svaddlbt (z0, 11))\n+\n+/*\n+** addlbt_11_s32_untied:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tsaddlbt\tz0\\.s, z1\\.h, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlbt_11_s32_untied, svint32_t, svint16_t,\n+\t\t    z0_res = svaddlbt_n_s32 (z1, 11),\n+\t\t    z0_res = svaddlbt (z1, 11))"}, {"sha": "4db9c9fd237e715ab1764ee7155f11bd2f732b49", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addlbt_s64.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddlbt_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddlbt_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddlbt_s64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addlbt_s64_tied1:\n+**\tsaddlbt\tz0\\.d, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlbt_s64_tied1, svint64_t, svint32_t,\n+\t\t    z0_res = svaddlbt_s64 (z0, z1),\n+\t\t    z0_res = svaddlbt (z0, z1))\n+\n+/*\n+** addlbt_s64_tied2:\n+**\tsaddlbt\tz0\\.d, z1\\.s, z0\\.s\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlbt_s64_tied2, svint64_t, svint32_t,\n+\t\t    z0_res = svaddlbt_s64 (z1, z0),\n+\t\t    z0_res = svaddlbt (z1, z0))\n+\n+/*\n+** addlbt_s64_untied:\n+**\tsaddlbt\tz0\\.d, z1\\.s, z2\\.s\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlbt_s64_untied, svint64_t, svint32_t,\n+\t\t    z0_res = svaddlbt_s64 (z1, z2),\n+\t\t    z0_res = svaddlbt (z1, z2))\n+\n+/*\n+** addlbt_w0_s64_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tsaddlbt\tz0\\.d, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (addlbt_w0_s64_tied1, svint64_t, svint32_t, int32_t,\n+\t\t     z0_res = svaddlbt_n_s64 (z0, x0),\n+\t\t     z0_res = svaddlbt (z0, x0))\n+\n+/*\n+** addlbt_w0_s64_untied:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tsaddlbt\tz0\\.d, z1\\.s, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (addlbt_w0_s64_untied, svint64_t, svint32_t, int32_t,\n+\t\t     z0_res = svaddlbt_n_s64 (z1, x0),\n+\t\t     z0_res = svaddlbt (z1, x0))\n+\n+/*\n+** addlbt_11_s64_tied1:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tsaddlbt\tz0\\.d, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlbt_11_s64_tied1, svint64_t, svint32_t,\n+\t\t    z0_res = svaddlbt_n_s64 (z0, 11),\n+\t\t    z0_res = svaddlbt (z0, 11))\n+\n+/*\n+** addlbt_11_s64_untied:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tsaddlbt\tz0\\.d, z1\\.s, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlbt_11_s64_untied, svint64_t, svint32_t,\n+\t\t    z0_res = svaddlbt_n_s64 (z1, 11),\n+\t\t    z0_res = svaddlbt (z1, 11))"}, {"sha": "f585c864ef5e95a0b9d43428e636d890485a324e", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addlt_s16.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddlt_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddlt_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddlt_s16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addlt_s16_tied1:\n+**\tsaddlt\tz0\\.h, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlt_s16_tied1, svint16_t, svint8_t,\n+\t\t    z0_res = svaddlt_s16 (z0, z1),\n+\t\t    z0_res = svaddlt (z0, z1))\n+\n+/*\n+** addlt_s16_tied2:\n+**\tsaddlt\tz0\\.h, z1\\.b, z0\\.b\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlt_s16_tied2, svint16_t, svint8_t,\n+\t\t    z0_res = svaddlt_s16 (z1, z0),\n+\t\t    z0_res = svaddlt (z1, z0))\n+\n+/*\n+** addlt_s16_untied:\n+**\tsaddlt\tz0\\.h, z1\\.b, z2\\.b\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlt_s16_untied, svint16_t, svint8_t,\n+\t\t    z0_res = svaddlt_s16 (z1, z2),\n+\t\t    z0_res = svaddlt (z1, z2))\n+\n+/*\n+** addlt_w0_s16_tied1:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tsaddlt\tz0\\.h, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (addlt_w0_s16_tied1, svint16_t, svint8_t, int8_t,\n+\t\t     z0_res = svaddlt_n_s16 (z0, x0),\n+\t\t     z0_res = svaddlt (z0, x0))\n+\n+/*\n+** addlt_w0_s16_untied:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tsaddlt\tz0\\.h, z1\\.b, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (addlt_w0_s16_untied, svint16_t, svint8_t, int8_t,\n+\t\t     z0_res = svaddlt_n_s16 (z1, x0),\n+\t\t     z0_res = svaddlt (z1, x0))\n+\n+/*\n+** addlt_11_s16_tied1:\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tsaddlt\tz0\\.h, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlt_11_s16_tied1, svint16_t, svint8_t,\n+\t\t    z0_res = svaddlt_n_s16 (z0, 11),\n+\t\t    z0_res = svaddlt (z0, 11))\n+\n+/*\n+** addlt_11_s16_untied:\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tsaddlt\tz0\\.h, z1\\.b, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlt_11_s16_untied, svint16_t, svint8_t,\n+\t\t    z0_res = svaddlt_n_s16 (z1, 11),\n+\t\t    z0_res = svaddlt (z1, 11))"}, {"sha": "166993364d67278038658d81b1ecfdc0912cde05", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addlt_s32.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddlt_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddlt_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddlt_s32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addlt_s32_tied1:\n+**\tsaddlt\tz0\\.s, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlt_s32_tied1, svint32_t, svint16_t,\n+\t\t    z0_res = svaddlt_s32 (z0, z1),\n+\t\t    z0_res = svaddlt (z0, z1))\n+\n+/*\n+** addlt_s32_tied2:\n+**\tsaddlt\tz0\\.s, z1\\.h, z0\\.h\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlt_s32_tied2, svint32_t, svint16_t,\n+\t\t    z0_res = svaddlt_s32 (z1, z0),\n+\t\t    z0_res = svaddlt (z1, z0))\n+\n+/*\n+** addlt_s32_untied:\n+**\tsaddlt\tz0\\.s, z1\\.h, z2\\.h\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlt_s32_untied, svint32_t, svint16_t,\n+\t\t    z0_res = svaddlt_s32 (z1, z2),\n+\t\t    z0_res = svaddlt (z1, z2))\n+\n+/*\n+** addlt_w0_s32_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tsaddlt\tz0\\.s, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (addlt_w0_s32_tied1, svint32_t, svint16_t, int16_t,\n+\t\t     z0_res = svaddlt_n_s32 (z0, x0),\n+\t\t     z0_res = svaddlt (z0, x0))\n+\n+/*\n+** addlt_w0_s32_untied:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tsaddlt\tz0\\.s, z1\\.h, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (addlt_w0_s32_untied, svint32_t, svint16_t, int16_t,\n+\t\t     z0_res = svaddlt_n_s32 (z1, x0),\n+\t\t     z0_res = svaddlt (z1, x0))\n+\n+/*\n+** addlt_11_s32_tied1:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tsaddlt\tz0\\.s, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlt_11_s32_tied1, svint32_t, svint16_t,\n+\t\t    z0_res = svaddlt_n_s32 (z0, 11),\n+\t\t    z0_res = svaddlt (z0, 11))\n+\n+/*\n+** addlt_11_s32_untied:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tsaddlt\tz0\\.s, z1\\.h, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlt_11_s32_untied, svint32_t, svint16_t,\n+\t\t    z0_res = svaddlt_n_s32 (z1, 11),\n+\t\t    z0_res = svaddlt (z1, 11))"}, {"sha": "3f0c78a90f383fb94a405dd43fe825fdfbb64d7b", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addlt_s64.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddlt_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddlt_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddlt_s64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addlt_s64_tied1:\n+**\tsaddlt\tz0\\.d, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlt_s64_tied1, svint64_t, svint32_t,\n+\t\t    z0_res = svaddlt_s64 (z0, z1),\n+\t\t    z0_res = svaddlt (z0, z1))\n+\n+/*\n+** addlt_s64_tied2:\n+**\tsaddlt\tz0\\.d, z1\\.s, z0\\.s\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlt_s64_tied2, svint64_t, svint32_t,\n+\t\t    z0_res = svaddlt_s64 (z1, z0),\n+\t\t    z0_res = svaddlt (z1, z0))\n+\n+/*\n+** addlt_s64_untied:\n+**\tsaddlt\tz0\\.d, z1\\.s, z2\\.s\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlt_s64_untied, svint64_t, svint32_t,\n+\t\t    z0_res = svaddlt_s64 (z1, z2),\n+\t\t    z0_res = svaddlt (z1, z2))\n+\n+/*\n+** addlt_w0_s64_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tsaddlt\tz0\\.d, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (addlt_w0_s64_tied1, svint64_t, svint32_t, int32_t,\n+\t\t     z0_res = svaddlt_n_s64 (z0, x0),\n+\t\t     z0_res = svaddlt (z0, x0))\n+\n+/*\n+** addlt_w0_s64_untied:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tsaddlt\tz0\\.d, z1\\.s, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (addlt_w0_s64_untied, svint64_t, svint32_t, int32_t,\n+\t\t     z0_res = svaddlt_n_s64 (z1, x0),\n+\t\t     z0_res = svaddlt (z1, x0))\n+\n+/*\n+** addlt_11_s64_tied1:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tsaddlt\tz0\\.d, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlt_11_s64_tied1, svint64_t, svint32_t,\n+\t\t    z0_res = svaddlt_n_s64 (z0, 11),\n+\t\t    z0_res = svaddlt (z0, 11))\n+\n+/*\n+** addlt_11_s64_untied:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tsaddlt\tz0\\.d, z1\\.s, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlt_11_s64_untied, svint64_t, svint32_t,\n+\t\t    z0_res = svaddlt_n_s64 (z1, 11),\n+\t\t    z0_res = svaddlt (z1, 11))"}, {"sha": "250c9b061624b7935cfb3e642519ff90f36695d3", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addlt_u16.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddlt_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddlt_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddlt_u16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addlt_u16_tied1:\n+**\tuaddlt\tz0\\.h, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlt_u16_tied1, svuint16_t, svuint8_t,\n+\t\t    z0_res = svaddlt_u16 (z0, z1),\n+\t\t    z0_res = svaddlt (z0, z1))\n+\n+/*\n+** addlt_u16_tied2:\n+**\tuaddlt\tz0\\.h, z1\\.b, z0\\.b\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlt_u16_tied2, svuint16_t, svuint8_t,\n+\t\t    z0_res = svaddlt_u16 (z1, z0),\n+\t\t    z0_res = svaddlt (z1, z0))\n+\n+/*\n+** addlt_u16_untied:\n+**\tuaddlt\tz0\\.h, z1\\.b, z2\\.b\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlt_u16_untied, svuint16_t, svuint8_t,\n+\t\t    z0_res = svaddlt_u16 (z1, z2),\n+\t\t    z0_res = svaddlt (z1, z2))\n+\n+/*\n+** addlt_w0_u16_tied1:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tuaddlt\tz0\\.h, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (addlt_w0_u16_tied1, svuint16_t, svuint8_t, uint8_t,\n+\t\t     z0_res = svaddlt_n_u16 (z0, x0),\n+\t\t     z0_res = svaddlt (z0, x0))\n+\n+/*\n+** addlt_w0_u16_untied:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tuaddlt\tz0\\.h, z1\\.b, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (addlt_w0_u16_untied, svuint16_t, svuint8_t, uint8_t,\n+\t\t     z0_res = svaddlt_n_u16 (z1, x0),\n+\t\t     z0_res = svaddlt (z1, x0))\n+\n+/*\n+** addlt_11_u16_tied1:\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tuaddlt\tz0\\.h, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlt_11_u16_tied1, svuint16_t, svuint8_t,\n+\t\t    z0_res = svaddlt_n_u16 (z0, 11),\n+\t\t    z0_res = svaddlt (z0, 11))\n+\n+/*\n+** addlt_11_u16_untied:\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tuaddlt\tz0\\.h, z1\\.b, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlt_11_u16_untied, svuint16_t, svuint8_t,\n+\t\t    z0_res = svaddlt_n_u16 (z1, 11),\n+\t\t    z0_res = svaddlt (z1, 11))"}, {"sha": "c264da6168ff6f6f74590641fbeca2d0ad6af92c", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addlt_u32.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddlt_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddlt_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddlt_u32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addlt_u32_tied1:\n+**\tuaddlt\tz0\\.s, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlt_u32_tied1, svuint32_t, svuint16_t,\n+\t\t    z0_res = svaddlt_u32 (z0, z1),\n+\t\t    z0_res = svaddlt (z0, z1))\n+\n+/*\n+** addlt_u32_tied2:\n+**\tuaddlt\tz0\\.s, z1\\.h, z0\\.h\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlt_u32_tied2, svuint32_t, svuint16_t,\n+\t\t    z0_res = svaddlt_u32 (z1, z0),\n+\t\t    z0_res = svaddlt (z1, z0))\n+\n+/*\n+** addlt_u32_untied:\n+**\tuaddlt\tz0\\.s, z1\\.h, z2\\.h\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlt_u32_untied, svuint32_t, svuint16_t,\n+\t\t    z0_res = svaddlt_u32 (z1, z2),\n+\t\t    z0_res = svaddlt (z1, z2))\n+\n+/*\n+** addlt_w0_u32_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tuaddlt\tz0\\.s, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (addlt_w0_u32_tied1, svuint32_t, svuint16_t, uint16_t,\n+\t\t     z0_res = svaddlt_n_u32 (z0, x0),\n+\t\t     z0_res = svaddlt (z0, x0))\n+\n+/*\n+** addlt_w0_u32_untied:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tuaddlt\tz0\\.s, z1\\.h, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (addlt_w0_u32_untied, svuint32_t, svuint16_t, uint16_t,\n+\t\t     z0_res = svaddlt_n_u32 (z1, x0),\n+\t\t     z0_res = svaddlt (z1, x0))\n+\n+/*\n+** addlt_11_u32_tied1:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tuaddlt\tz0\\.s, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlt_11_u32_tied1, svuint32_t, svuint16_t,\n+\t\t    z0_res = svaddlt_n_u32 (z0, 11),\n+\t\t    z0_res = svaddlt (z0, 11))\n+\n+/*\n+** addlt_11_u32_untied:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tuaddlt\tz0\\.s, z1\\.h, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlt_11_u32_untied, svuint32_t, svuint16_t,\n+\t\t    z0_res = svaddlt_n_u32 (z1, 11),\n+\t\t    z0_res = svaddlt (z1, 11))"}, {"sha": "5a4f3d695a88b39d0512e4794f80bed2173391fa", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addlt_u64.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddlt_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddlt_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddlt_u64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addlt_u64_tied1:\n+**\tuaddlt\tz0\\.d, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlt_u64_tied1, svuint64_t, svuint32_t,\n+\t\t    z0_res = svaddlt_u64 (z0, z1),\n+\t\t    z0_res = svaddlt (z0, z1))\n+\n+/*\n+** addlt_u64_tied2:\n+**\tuaddlt\tz0\\.d, z1\\.s, z0\\.s\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlt_u64_tied2, svuint64_t, svuint32_t,\n+\t\t    z0_res = svaddlt_u64 (z1, z0),\n+\t\t    z0_res = svaddlt (z1, z0))\n+\n+/*\n+** addlt_u64_untied:\n+**\tuaddlt\tz0\\.d, z1\\.s, z2\\.s\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlt_u64_untied, svuint64_t, svuint32_t,\n+\t\t    z0_res = svaddlt_u64 (z1, z2),\n+\t\t    z0_res = svaddlt (z1, z2))\n+\n+/*\n+** addlt_w0_u64_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tuaddlt\tz0\\.d, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (addlt_w0_u64_tied1, svuint64_t, svuint32_t, uint32_t,\n+\t\t     z0_res = svaddlt_n_u64 (z0, x0),\n+\t\t     z0_res = svaddlt (z0, x0))\n+\n+/*\n+** addlt_w0_u64_untied:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tuaddlt\tz0\\.d, z1\\.s, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_ZX (addlt_w0_u64_untied, svuint64_t, svuint32_t, uint32_t,\n+\t\t     z0_res = svaddlt_n_u64 (z1, x0),\n+\t\t     z0_res = svaddlt (z1, x0))\n+\n+/*\n+** addlt_11_u64_tied1:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tuaddlt\tz0\\.d, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlt_11_u64_tied1, svuint64_t, svuint32_t,\n+\t\t    z0_res = svaddlt_n_u64 (z0, 11),\n+\t\t    z0_res = svaddlt (z0, 11))\n+\n+/*\n+** addlt_11_u64_untied:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tuaddlt\tz0\\.d, z1\\.s, \\1\n+**\tret\n+*/\n+TEST_TYPE_CHANGE_Z (addlt_11_u64_untied, svuint64_t, svuint32_t,\n+\t\t    z0_res = svaddlt_n_u64 (z1, 11),\n+\t\t    z0_res = svaddlt (z1, 11))"}, {"sha": "98bc3d9bd291fef0fa7fc89eff43b22d46e7d88b", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addp_f16.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddp_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddp_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddp_f16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,96 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addp_f16_m_tied1:\n+**\tfaddp\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_f16_m_tied1, svfloat16_t,\n+\t\tz0 = svaddp_f16_m (p0, z0, z1),\n+\t\tz0 = svaddp_m (p0, z0, z1))\n+\n+/*\n+** addp_f16_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tfaddp\tz0\\.h, p0/m, z0\\.h, \\1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_f16_m_tied2, svfloat16_t,\n+\t\tz0 = svaddp_f16_m (p0, z1, z0),\n+\t\tz0 = svaddp_m (p0, z1, z0))\n+\n+/*\n+** addp_f16_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tfaddp\tz0\\.h, p0/m, z0\\.h, z2\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_f16_m_untied, svfloat16_t,\n+\t\tz0 = svaddp_f16_m (p0, z1, z2),\n+\t\tz0 = svaddp_m (p0, z1, z2))\n+\n+/*\n+** addp_f16_x_tied1:\n+**\tfaddp\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_f16_x_tied1, svfloat16_t,\n+\t\tz0 = svaddp_f16_x (p0, z0, z1),\n+\t\tz0 = svaddp_x (p0, z0, z1))\n+\n+/*\n+** addp_f16_x_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tfaddp\tz0\\.h, p0/m, z0\\.h, \\1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_f16_x_tied2, svfloat16_t,\n+\t\tz0 = svaddp_f16_x (p0, z1, z0),\n+\t\tz0 = svaddp_x (p0, z1, z0))\n+\n+/*\n+** addp_f16_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tfaddp\tz0\\.h, p0/m, z0\\.h, z2\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_f16_x_untied, svfloat16_t,\n+\t\tz0 = svaddp_f16_x (p0, z1, z2),\n+\t\tz0 = svaddp_x (p0, z1, z2))\n+\n+/*\n+** ptrue_addp_f16_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_addp_f16_x_tied1, svfloat16_t,\n+\t\tz0 = svaddp_f16_x (svptrue_b16 (), z0, z1),\n+\t\tz0 = svaddp_x (svptrue_b16 (), z0, z1))\n+\n+/*\n+** ptrue_addp_f16_x_tied2:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_addp_f16_x_tied2, svfloat16_t,\n+\t\tz0 = svaddp_f16_x (svptrue_b16 (), z1, z0),\n+\t\tz0 = svaddp_x (svptrue_b16 (), z1, z0))\n+\n+/*\n+** ptrue_addp_f16_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_addp_f16_x_untied, svfloat16_t,\n+\t\tz0 = svaddp_f16_x (svptrue_b16 (), z1, z2),\n+\t\tz0 = svaddp_x (svptrue_b16 (), z1, z2))"}, {"sha": "71dfd6ae3c2ec95c8bc0b0518db63e95c06d2bdc", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addp_f32.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddp_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddp_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddp_f32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,96 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addp_f32_m_tied1:\n+**\tfaddp\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_f32_m_tied1, svfloat32_t,\n+\t\tz0 = svaddp_f32_m (p0, z0, z1),\n+\t\tz0 = svaddp_m (p0, z0, z1))\n+\n+/*\n+** addp_f32_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tfaddp\tz0\\.s, p0/m, z0\\.s, \\1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_f32_m_tied2, svfloat32_t,\n+\t\tz0 = svaddp_f32_m (p0, z1, z0),\n+\t\tz0 = svaddp_m (p0, z1, z0))\n+\n+/*\n+** addp_f32_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tfaddp\tz0\\.s, p0/m, z0\\.s, z2\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_f32_m_untied, svfloat32_t,\n+\t\tz0 = svaddp_f32_m (p0, z1, z2),\n+\t\tz0 = svaddp_m (p0, z1, z2))\n+\n+/*\n+** addp_f32_x_tied1:\n+**\tfaddp\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_f32_x_tied1, svfloat32_t,\n+\t\tz0 = svaddp_f32_x (p0, z0, z1),\n+\t\tz0 = svaddp_x (p0, z0, z1))\n+\n+/*\n+** addp_f32_x_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tfaddp\tz0\\.s, p0/m, z0\\.s, \\1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_f32_x_tied2, svfloat32_t,\n+\t\tz0 = svaddp_f32_x (p0, z1, z0),\n+\t\tz0 = svaddp_x (p0, z1, z0))\n+\n+/*\n+** addp_f32_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tfaddp\tz0\\.s, p0/m, z0\\.s, z2\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_f32_x_untied, svfloat32_t,\n+\t\tz0 = svaddp_f32_x (p0, z1, z2),\n+\t\tz0 = svaddp_x (p0, z1, z2))\n+\n+/*\n+** ptrue_addp_f32_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_addp_f32_x_tied1, svfloat32_t,\n+\t\tz0 = svaddp_f32_x (svptrue_b32 (), z0, z1),\n+\t\tz0 = svaddp_x (svptrue_b32 (), z0, z1))\n+\n+/*\n+** ptrue_addp_f32_x_tied2:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_addp_f32_x_tied2, svfloat32_t,\n+\t\tz0 = svaddp_f32_x (svptrue_b32 (), z1, z0),\n+\t\tz0 = svaddp_x (svptrue_b32 (), z1, z0))\n+\n+/*\n+** ptrue_addp_f32_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_addp_f32_x_untied, svfloat32_t,\n+\t\tz0 = svaddp_f32_x (svptrue_b32 (), z1, z2),\n+\t\tz0 = svaddp_x (svptrue_b32 (), z1, z2))"}, {"sha": "ff9a95aaf5e0cf75bf212d39f7b10a8002b7cb74", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addp_f64.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddp_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddp_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddp_f64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,96 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addp_f64_m_tied1:\n+**\tfaddp\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_f64_m_tied1, svfloat64_t,\n+\t\tz0 = svaddp_f64_m (p0, z0, z1),\n+\t\tz0 = svaddp_m (p0, z0, z1))\n+\n+/*\n+** addp_f64_m_tied2:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tfaddp\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_f64_m_tied2, svfloat64_t,\n+\t\tz0 = svaddp_f64_m (p0, z1, z0),\n+\t\tz0 = svaddp_m (p0, z1, z0))\n+\n+/*\n+** addp_f64_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tfaddp\tz0\\.d, p0/m, z0\\.d, z2\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_f64_m_untied, svfloat64_t,\n+\t\tz0 = svaddp_f64_m (p0, z1, z2),\n+\t\tz0 = svaddp_m (p0, z1, z2))\n+\n+/*\n+** addp_f64_x_tied1:\n+**\tfaddp\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_f64_x_tied1, svfloat64_t,\n+\t\tz0 = svaddp_f64_x (p0, z0, z1),\n+\t\tz0 = svaddp_x (p0, z0, z1))\n+\n+/*\n+** addp_f64_x_tied2:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tfaddp\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_f64_x_tied2, svfloat64_t,\n+\t\tz0 = svaddp_f64_x (p0, z1, z0),\n+\t\tz0 = svaddp_x (p0, z1, z0))\n+\n+/*\n+** addp_f64_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tfaddp\tz0\\.d, p0/m, z0\\.d, z2\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_f64_x_untied, svfloat64_t,\n+\t\tz0 = svaddp_f64_x (p0, z1, z2),\n+\t\tz0 = svaddp_x (p0, z1, z2))\n+\n+/*\n+** ptrue_addp_f64_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_addp_f64_x_tied1, svfloat64_t,\n+\t\tz0 = svaddp_f64_x (svptrue_b64 (), z0, z1),\n+\t\tz0 = svaddp_x (svptrue_b64 (), z0, z1))\n+\n+/*\n+** ptrue_addp_f64_x_tied2:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_addp_f64_x_tied2, svfloat64_t,\n+\t\tz0 = svaddp_f64_x (svptrue_b64 (), z1, z0),\n+\t\tz0 = svaddp_x (svptrue_b64 (), z1, z0))\n+\n+/*\n+** ptrue_addp_f64_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_addp_f64_x_untied, svfloat64_t,\n+\t\tz0 = svaddp_f64_x (svptrue_b64 (), z1, z2),\n+\t\tz0 = svaddp_x (svptrue_b64 (), z1, z2))"}, {"sha": "504330a3eb60f374959c295c940e92549e68727a", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addp_s16.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddp_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddp_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddp_s16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addp_s16_m_tied1:\n+**\taddp\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_s16_m_tied1, svint16_t,\n+\t\tz0 = svaddp_s16_m (p0, z0, z1),\n+\t\tz0 = svaddp_m (p0, z0, z1))\n+\n+/*\n+** addp_s16_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\taddp\tz0\\.h, p0/m, z0\\.h, \\1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_s16_m_tied2, svint16_t,\n+\t\tz0 = svaddp_s16_m (p0, z1, z0),\n+\t\tz0 = svaddp_m (p0, z1, z0))\n+\n+/*\n+** addp_s16_m_untied:\n+**\tmovprfx\tz0, z1\n+**\taddp\tz0\\.h, p0/m, z0\\.h, z2\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_s16_m_untied, svint16_t,\n+\t\tz0 = svaddp_s16_m (p0, z1, z2),\n+\t\tz0 = svaddp_m (p0, z1, z2))\n+\n+/*\n+** addp_s16_x_tied1:\n+**\taddp\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_s16_x_tied1, svint16_t,\n+\t\tz0 = svaddp_s16_x (p0, z0, z1),\n+\t\tz0 = svaddp_x (p0, z0, z1))\n+\n+/*\n+** addp_s16_x_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\taddp\tz0\\.h, p0/m, z0\\.h, \\1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_s16_x_tied2, svint16_t,\n+\t\tz0 = svaddp_s16_x (p0, z1, z0),\n+\t\tz0 = svaddp_x (p0, z1, z0))\n+\n+/*\n+** addp_s16_x_untied:\n+**\tmovprfx\tz0, z1\n+**\taddp\tz0\\.h, p0/m, z0\\.h, z2\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_s16_x_untied, svint16_t,\n+\t\tz0 = svaddp_s16_x (p0, z1, z2),\n+\t\tz0 = svaddp_x (p0, z1, z2))"}, {"sha": "3e04a0b815682546ca9360db366a4ad71594dc17", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addp_s32.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddp_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddp_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddp_s32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addp_s32_m_tied1:\n+**\taddp\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_s32_m_tied1, svint32_t,\n+\t\tz0 = svaddp_s32_m (p0, z0, z1),\n+\t\tz0 = svaddp_m (p0, z0, z1))\n+\n+/*\n+** addp_s32_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\taddp\tz0\\.s, p0/m, z0\\.s, \\1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_s32_m_tied2, svint32_t,\n+\t\tz0 = svaddp_s32_m (p0, z1, z0),\n+\t\tz0 = svaddp_m (p0, z1, z0))\n+\n+/*\n+** addp_s32_m_untied:\n+**\tmovprfx\tz0, z1\n+**\taddp\tz0\\.s, p0/m, z0\\.s, z2\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_s32_m_untied, svint32_t,\n+\t\tz0 = svaddp_s32_m (p0, z1, z2),\n+\t\tz0 = svaddp_m (p0, z1, z2))\n+\n+/*\n+** addp_s32_x_tied1:\n+**\taddp\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_s32_x_tied1, svint32_t,\n+\t\tz0 = svaddp_s32_x (p0, z0, z1),\n+\t\tz0 = svaddp_x (p0, z0, z1))\n+\n+/*\n+** addp_s32_x_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\taddp\tz0\\.s, p0/m, z0\\.s, \\1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_s32_x_tied2, svint32_t,\n+\t\tz0 = svaddp_s32_x (p0, z1, z0),\n+\t\tz0 = svaddp_x (p0, z1, z0))\n+\n+/*\n+** addp_s32_x_untied:\n+**\tmovprfx\tz0, z1\n+**\taddp\tz0\\.s, p0/m, z0\\.s, z2\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_s32_x_untied, svint32_t,\n+\t\tz0 = svaddp_s32_x (p0, z1, z2),\n+\t\tz0 = svaddp_x (p0, z1, z2))"}, {"sha": "9cb56dc5b11a7e1b0f6997a8c07aafa18da507f7", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addp_s64.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddp_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddp_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddp_s64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addp_s64_m_tied1:\n+**\taddp\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_s64_m_tied1, svint64_t,\n+\t\tz0 = svaddp_s64_m (p0, z0, z1),\n+\t\tz0 = svaddp_m (p0, z0, z1))\n+\n+/*\n+** addp_s64_m_tied2:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\taddp\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_s64_m_tied2, svint64_t,\n+\t\tz0 = svaddp_s64_m (p0, z1, z0),\n+\t\tz0 = svaddp_m (p0, z1, z0))\n+\n+/*\n+** addp_s64_m_untied:\n+**\tmovprfx\tz0, z1\n+**\taddp\tz0\\.d, p0/m, z0\\.d, z2\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_s64_m_untied, svint64_t,\n+\t\tz0 = svaddp_s64_m (p0, z1, z2),\n+\t\tz0 = svaddp_m (p0, z1, z2))\n+\n+/*\n+** addp_s64_x_tied1:\n+**\taddp\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_s64_x_tied1, svint64_t,\n+\t\tz0 = svaddp_s64_x (p0, z0, z1),\n+\t\tz0 = svaddp_x (p0, z0, z1))\n+\n+/*\n+** addp_s64_x_tied2:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\taddp\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_s64_x_tied2, svint64_t,\n+\t\tz0 = svaddp_s64_x (p0, z1, z0),\n+\t\tz0 = svaddp_x (p0, z1, z0))\n+\n+/*\n+** addp_s64_x_untied:\n+**\tmovprfx\tz0, z1\n+**\taddp\tz0\\.d, p0/m, z0\\.d, z2\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_s64_x_untied, svint64_t,\n+\t\tz0 = svaddp_s64_x (p0, z1, z2),\n+\t\tz0 = svaddp_x (p0, z1, z2))"}, {"sha": "f9fdede47ae75396816aaa48ca7da6242b445af6", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addp_s8.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddp_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddp_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddp_s8.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addp_s8_m_tied1:\n+**\taddp\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_s8_m_tied1, svint8_t,\n+\t\tz0 = svaddp_s8_m (p0, z0, z1),\n+\t\tz0 = svaddp_m (p0, z0, z1))\n+\n+/*\n+** addp_s8_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\taddp\tz0\\.b, p0/m, z0\\.b, \\1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_s8_m_tied2, svint8_t,\n+\t\tz0 = svaddp_s8_m (p0, z1, z0),\n+\t\tz0 = svaddp_m (p0, z1, z0))\n+\n+/*\n+** addp_s8_m_untied:\n+**\tmovprfx\tz0, z1\n+**\taddp\tz0\\.b, p0/m, z0\\.b, z2\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_s8_m_untied, svint8_t,\n+\t\tz0 = svaddp_s8_m (p0, z1, z2),\n+\t\tz0 = svaddp_m (p0, z1, z2))\n+\n+/*\n+** addp_s8_x_tied1:\n+**\taddp\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_s8_x_tied1, svint8_t,\n+\t\tz0 = svaddp_s8_x (p0, z0, z1),\n+\t\tz0 = svaddp_x (p0, z0, z1))\n+\n+/*\n+** addp_s8_x_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\taddp\tz0\\.b, p0/m, z0\\.b, \\1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_s8_x_tied2, svint8_t,\n+\t\tz0 = svaddp_s8_x (p0, z1, z0),\n+\t\tz0 = svaddp_x (p0, z1, z0))\n+\n+/*\n+** addp_s8_x_untied:\n+**\tmovprfx\tz0, z1\n+**\taddp\tz0\\.b, p0/m, z0\\.b, z2\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_s8_x_untied, svint8_t,\n+\t\tz0 = svaddp_s8_x (p0, z1, z2),\n+\t\tz0 = svaddp_x (p0, z1, z2))"}, {"sha": "ed897c424924ad745e296e3bba7675e3acdfe59a", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addp_u16.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddp_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddp_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddp_u16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addp_u16_m_tied1:\n+**\taddp\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_u16_m_tied1, svuint16_t,\n+\t\tz0 = svaddp_u16_m (p0, z0, z1),\n+\t\tz0 = svaddp_m (p0, z0, z1))\n+\n+/*\n+** addp_u16_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\taddp\tz0\\.h, p0/m, z0\\.h, \\1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_u16_m_tied2, svuint16_t,\n+\t\tz0 = svaddp_u16_m (p0, z1, z0),\n+\t\tz0 = svaddp_m (p0, z1, z0))\n+\n+/*\n+** addp_u16_m_untied:\n+**\tmovprfx\tz0, z1\n+**\taddp\tz0\\.h, p0/m, z0\\.h, z2\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_u16_m_untied, svuint16_t,\n+\t\tz0 = svaddp_u16_m (p0, z1, z2),\n+\t\tz0 = svaddp_m (p0, z1, z2))\n+\n+/*\n+** addp_u16_x_tied1:\n+**\taddp\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_u16_x_tied1, svuint16_t,\n+\t\tz0 = svaddp_u16_x (p0, z0, z1),\n+\t\tz0 = svaddp_x (p0, z0, z1))\n+\n+/*\n+** addp_u16_x_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\taddp\tz0\\.h, p0/m, z0\\.h, \\1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_u16_x_tied2, svuint16_t,\n+\t\tz0 = svaddp_u16_x (p0, z1, z0),\n+\t\tz0 = svaddp_x (p0, z1, z0))\n+\n+/*\n+** addp_u16_x_untied:\n+**\tmovprfx\tz0, z1\n+**\taddp\tz0\\.h, p0/m, z0\\.h, z2\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_u16_x_untied, svuint16_t,\n+\t\tz0 = svaddp_u16_x (p0, z1, z2),\n+\t\tz0 = svaddp_x (p0, z1, z2))"}, {"sha": "3f735d8edf21e6171695e5ac5c19ece2d28d1e1d", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addp_u32.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddp_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddp_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddp_u32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addp_u32_m_tied1:\n+**\taddp\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_u32_m_tied1, svuint32_t,\n+\t\tz0 = svaddp_u32_m (p0, z0, z1),\n+\t\tz0 = svaddp_m (p0, z0, z1))\n+\n+/*\n+** addp_u32_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\taddp\tz0\\.s, p0/m, z0\\.s, \\1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_u32_m_tied2, svuint32_t,\n+\t\tz0 = svaddp_u32_m (p0, z1, z0),\n+\t\tz0 = svaddp_m (p0, z1, z0))\n+\n+/*\n+** addp_u32_m_untied:\n+**\tmovprfx\tz0, z1\n+**\taddp\tz0\\.s, p0/m, z0\\.s, z2\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_u32_m_untied, svuint32_t,\n+\t\tz0 = svaddp_u32_m (p0, z1, z2),\n+\t\tz0 = svaddp_m (p0, z1, z2))\n+\n+/*\n+** addp_u32_x_tied1:\n+**\taddp\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_u32_x_tied1, svuint32_t,\n+\t\tz0 = svaddp_u32_x (p0, z0, z1),\n+\t\tz0 = svaddp_x (p0, z0, z1))\n+\n+/*\n+** addp_u32_x_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\taddp\tz0\\.s, p0/m, z0\\.s, \\1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_u32_x_tied2, svuint32_t,\n+\t\tz0 = svaddp_u32_x (p0, z1, z0),\n+\t\tz0 = svaddp_x (p0, z1, z0))\n+\n+/*\n+** addp_u32_x_untied:\n+**\tmovprfx\tz0, z1\n+**\taddp\tz0\\.s, p0/m, z0\\.s, z2\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_u32_x_untied, svuint32_t,\n+\t\tz0 = svaddp_u32_x (p0, z1, z2),\n+\t\tz0 = svaddp_x (p0, z1, z2))"}, {"sha": "a739272e0cd53d5ec8a305e9868baf83a402e197", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addp_u64.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddp_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddp_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddp_u64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addp_u64_m_tied1:\n+**\taddp\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_u64_m_tied1, svuint64_t,\n+\t\tz0 = svaddp_u64_m (p0, z0, z1),\n+\t\tz0 = svaddp_m (p0, z0, z1))\n+\n+/*\n+** addp_u64_m_tied2:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\taddp\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_u64_m_tied2, svuint64_t,\n+\t\tz0 = svaddp_u64_m (p0, z1, z0),\n+\t\tz0 = svaddp_m (p0, z1, z0))\n+\n+/*\n+** addp_u64_m_untied:\n+**\tmovprfx\tz0, z1\n+**\taddp\tz0\\.d, p0/m, z0\\.d, z2\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_u64_m_untied, svuint64_t,\n+\t\tz0 = svaddp_u64_m (p0, z1, z2),\n+\t\tz0 = svaddp_m (p0, z1, z2))\n+\n+/*\n+** addp_u64_x_tied1:\n+**\taddp\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_u64_x_tied1, svuint64_t,\n+\t\tz0 = svaddp_u64_x (p0, z0, z1),\n+\t\tz0 = svaddp_x (p0, z0, z1))\n+\n+/*\n+** addp_u64_x_tied2:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\taddp\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_u64_x_tied2, svuint64_t,\n+\t\tz0 = svaddp_u64_x (p0, z1, z0),\n+\t\tz0 = svaddp_x (p0, z1, z0))\n+\n+/*\n+** addp_u64_x_untied:\n+**\tmovprfx\tz0, z1\n+**\taddp\tz0\\.d, p0/m, z0\\.d, z2\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_u64_x_untied, svuint64_t,\n+\t\tz0 = svaddp_u64_x (p0, z1, z2),\n+\t\tz0 = svaddp_x (p0, z1, z2))"}, {"sha": "6417304f08cfe22aa46fc2889688484e12961c52", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addp_u8.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddp_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddp_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddp_u8.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addp_u8_m_tied1:\n+**\taddp\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_u8_m_tied1, svuint8_t,\n+\t\tz0 = svaddp_u8_m (p0, z0, z1),\n+\t\tz0 = svaddp_m (p0, z0, z1))\n+\n+/*\n+** addp_u8_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\taddp\tz0\\.b, p0/m, z0\\.b, \\1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_u8_m_tied2, svuint8_t,\n+\t\tz0 = svaddp_u8_m (p0, z1, z0),\n+\t\tz0 = svaddp_m (p0, z1, z0))\n+\n+/*\n+** addp_u8_m_untied:\n+**\tmovprfx\tz0, z1\n+**\taddp\tz0\\.b, p0/m, z0\\.b, z2\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_u8_m_untied, svuint8_t,\n+\t\tz0 = svaddp_u8_m (p0, z1, z2),\n+\t\tz0 = svaddp_m (p0, z1, z2))\n+\n+/*\n+** addp_u8_x_tied1:\n+**\taddp\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_u8_x_tied1, svuint8_t,\n+\t\tz0 = svaddp_u8_x (p0, z0, z1),\n+\t\tz0 = svaddp_x (p0, z0, z1))\n+\n+/*\n+** addp_u8_x_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\taddp\tz0\\.b, p0/m, z0\\.b, \\1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_u8_x_tied2, svuint8_t,\n+\t\tz0 = svaddp_u8_x (p0, z1, z0),\n+\t\tz0 = svaddp_x (p0, z1, z0))\n+\n+/*\n+** addp_u8_x_untied:\n+**\tmovprfx\tz0, z1\n+**\taddp\tz0\\.b, p0/m, z0\\.b, z2\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addp_u8_x_untied, svuint8_t,\n+\t\tz0 = svaddp_u8_x (p0, z1, z2),\n+\t\tz0 = svaddp_x (p0, z1, z2))"}, {"sha": "c0f7ef3ebcd52b28717e9daaea35b28c162f1ae4", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addwb_s16.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddwb_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddwb_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddwb_s16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addwb_s16_tied1:\n+**\tsaddwb\tz0\\.h, z0\\.h, z4\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z (addwb_s16_tied1, svint16_t, svint8_t,\n+\t     z0 = svaddwb_s16 (z0, z4),\n+\t     z0 = svaddwb (z0, z4))\n+\n+/*\n+** addwb_s16_tied2:\n+**\tsaddwb\tz0\\.h, z4\\.h, z0\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (addwb_s16_tied2, svint16_t, svint8_t,\n+\t\t z0_res = svaddwb_s16 (z4, z0),\n+\t\t z0_res = svaddwb (z4, z0))\n+\n+/*\n+** addwb_s16_untied:\n+**\tsaddwb\tz0\\.h, z1\\.h, z4\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z (addwb_s16_untied, svint16_t, svint8_t,\n+\t     z0 = svaddwb_s16 (z1, z4),\n+\t     z0 = svaddwb (z1, z4))\n+\n+/*\n+** addwb_w0_s16_tied1:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tsaddwb\tz0\\.h, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (addwb_w0_s16_tied1, svint16_t, int8_t,\n+\t\t z0 = svaddwb_n_s16 (z0, x0),\n+\t\t z0 = svaddwb (z0, x0))\n+\n+/*\n+** addwb_w0_s16_untied:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tsaddwb\tz0\\.h, z1\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (addwb_w0_s16_untied, svint16_t, int8_t,\n+\t\t z0 = svaddwb_n_s16 (z1, x0),\n+\t\t z0 = svaddwb (z1, x0))\n+\n+/*\n+** addwb_11_s16_tied1:\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tsaddwb\tz0\\.h, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addwb_11_s16_tied1, svint16_t,\n+\t\tz0 = svaddwb_n_s16 (z0, 11),\n+\t\tz0 = svaddwb (z0, 11))\n+\n+/*\n+** addwb_11_s16_untied:\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tsaddwb\tz0\\.h, z1\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addwb_11_s16_untied, svint16_t,\n+\t\tz0 = svaddwb_n_s16 (z1, 11),\n+\t\tz0 = svaddwb (z1, 11))"}, {"sha": "263b9d9839c98b504befc9c8ea73444bbe41ef16", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addwb_s32.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddwb_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddwb_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddwb_s32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addwb_s32_tied1:\n+**\tsaddwb\tz0\\.s, z0\\.s, z4\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (addwb_s32_tied1, svint32_t, svint16_t,\n+\t     z0 = svaddwb_s32 (z0, z4),\n+\t     z0 = svaddwb (z0, z4))\n+\n+/*\n+** addwb_s32_tied2:\n+**\tsaddwb\tz0\\.s, z4\\.s, z0\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (addwb_s32_tied2, svint32_t, svint16_t,\n+\t\t z0_res = svaddwb_s32 (z4, z0),\n+\t\t z0_res = svaddwb (z4, z0))\n+\n+/*\n+** addwb_s32_untied:\n+**\tsaddwb\tz0\\.s, z1\\.s, z4\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (addwb_s32_untied, svint32_t, svint16_t,\n+\t     z0 = svaddwb_s32 (z1, z4),\n+\t     z0 = svaddwb (z1, z4))\n+\n+/*\n+** addwb_w0_s32_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tsaddwb\tz0\\.s, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (addwb_w0_s32_tied1, svint32_t, int16_t,\n+\t\t z0 = svaddwb_n_s32 (z0, x0),\n+\t\t z0 = svaddwb (z0, x0))\n+\n+/*\n+** addwb_w0_s32_untied:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tsaddwb\tz0\\.s, z1\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (addwb_w0_s32_untied, svint32_t, int16_t,\n+\t\t z0 = svaddwb_n_s32 (z1, x0),\n+\t\t z0 = svaddwb (z1, x0))\n+\n+/*\n+** addwb_11_s32_tied1:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tsaddwb\tz0\\.s, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addwb_11_s32_tied1, svint32_t,\n+\t\tz0 = svaddwb_n_s32 (z0, 11),\n+\t\tz0 = svaddwb (z0, 11))\n+\n+/*\n+** addwb_11_s32_untied:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tsaddwb\tz0\\.s, z1\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addwb_11_s32_untied, svint32_t,\n+\t\tz0 = svaddwb_n_s32 (z1, 11),\n+\t\tz0 = svaddwb (z1, 11))"}, {"sha": "0b5740f6104f850ed6e379e5f3c76a0e0ec2dcd9", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addwb_s64.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddwb_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddwb_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddwb_s64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addwb_s64_tied1:\n+**\tsaddwb\tz0\\.d, z0\\.d, z4\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z (addwb_s64_tied1, svint64_t, svint32_t,\n+\t     z0 = svaddwb_s64 (z0, z4),\n+\t     z0 = svaddwb (z0, z4))\n+\n+/*\n+** addwb_s64_tied2:\n+**\tsaddwb\tz0\\.d, z4\\.d, z0\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (addwb_s64_tied2, svint64_t, svint32_t,\n+\t\t z0_res = svaddwb_s64 (z4, z0),\n+\t\t z0_res = svaddwb (z4, z0))\n+\n+/*\n+** addwb_s64_untied:\n+**\tsaddwb\tz0\\.d, z1\\.d, z4\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z (addwb_s64_untied, svint64_t, svint32_t,\n+\t     z0 = svaddwb_s64 (z1, z4),\n+\t     z0 = svaddwb (z1, z4))\n+\n+/*\n+** addwb_w0_s64_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tsaddwb\tz0\\.d, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (addwb_w0_s64_tied1, svint64_t, int32_t,\n+\t\t z0 = svaddwb_n_s64 (z0, x0),\n+\t\t z0 = svaddwb (z0, x0))\n+\n+/*\n+** addwb_w0_s64_untied:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tsaddwb\tz0\\.d, z1\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (addwb_w0_s64_untied, svint64_t, int32_t,\n+\t\t z0 = svaddwb_n_s64 (z1, x0),\n+\t\t z0 = svaddwb (z1, x0))\n+\n+/*\n+** addwb_11_s64_tied1:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tsaddwb\tz0\\.d, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addwb_11_s64_tied1, svint64_t,\n+\t\tz0 = svaddwb_n_s64 (z0, 11),\n+\t\tz0 = svaddwb (z0, 11))\n+\n+/*\n+** addwb_11_s64_untied:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tsaddwb\tz0\\.d, z1\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addwb_11_s64_untied, svint64_t,\n+\t\tz0 = svaddwb_n_s64 (z1, 11),\n+\t\tz0 = svaddwb (z1, 11))"}, {"sha": "acf21ead95a7407081dcac92e32dd8ea562c1686", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addwb_u16.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddwb_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddwb_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddwb_u16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addwb_u16_tied1:\n+**\tuaddwb\tz0\\.h, z0\\.h, z4\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z (addwb_u16_tied1, svuint16_t, svuint8_t,\n+\t     z0 = svaddwb_u16 (z0, z4),\n+\t     z0 = svaddwb (z0, z4))\n+\n+/*\n+** addwb_u16_tied2:\n+**\tuaddwb\tz0\\.h, z4\\.h, z0\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (addwb_u16_tied2, svuint16_t, svuint8_t,\n+\t\t z0_res = svaddwb_u16 (z4, z0),\n+\t\t z0_res = svaddwb (z4, z0))\n+\n+/*\n+** addwb_u16_untied:\n+**\tuaddwb\tz0\\.h, z1\\.h, z4\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z (addwb_u16_untied, svuint16_t, svuint8_t,\n+\t     z0 = svaddwb_u16 (z1, z4),\n+\t     z0 = svaddwb (z1, z4))\n+\n+/*\n+** addwb_w0_u16_tied1:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tuaddwb\tz0\\.h, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (addwb_w0_u16_tied1, svuint16_t, uint8_t,\n+\t\t z0 = svaddwb_n_u16 (z0, x0),\n+\t\t z0 = svaddwb (z0, x0))\n+\n+/*\n+** addwb_w0_u16_untied:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tuaddwb\tz0\\.h, z1\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (addwb_w0_u16_untied, svuint16_t, uint8_t,\n+\t\t z0 = svaddwb_n_u16 (z1, x0),\n+\t\t z0 = svaddwb (z1, x0))\n+\n+/*\n+** addwb_11_u16_tied1:\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tuaddwb\tz0\\.h, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addwb_11_u16_tied1, svuint16_t,\n+\t\tz0 = svaddwb_n_u16 (z0, 11),\n+\t\tz0 = svaddwb (z0, 11))\n+\n+/*\n+** addwb_11_u16_untied:\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tuaddwb\tz0\\.h, z1\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addwb_11_u16_untied, svuint16_t,\n+\t\tz0 = svaddwb_n_u16 (z1, 11),\n+\t\tz0 = svaddwb (z1, 11))"}, {"sha": "4cecac9d6b2a8958ccbbe4e73990c166388b2042", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addwb_u32.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddwb_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddwb_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddwb_u32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addwb_u32_tied1:\n+**\tuaddwb\tz0\\.s, z0\\.s, z4\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (addwb_u32_tied1, svuint32_t, svuint16_t,\n+\t     z0 = svaddwb_u32 (z0, z4),\n+\t     z0 = svaddwb (z0, z4))\n+\n+/*\n+** addwb_u32_tied2:\n+**\tuaddwb\tz0\\.s, z4\\.s, z0\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (addwb_u32_tied2, svuint32_t, svuint16_t,\n+\t\t z0_res = svaddwb_u32 (z4, z0),\n+\t\t z0_res = svaddwb (z4, z0))\n+\n+/*\n+** addwb_u32_untied:\n+**\tuaddwb\tz0\\.s, z1\\.s, z4\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (addwb_u32_untied, svuint32_t, svuint16_t,\n+\t     z0 = svaddwb_u32 (z1, z4),\n+\t     z0 = svaddwb (z1, z4))\n+\n+/*\n+** addwb_w0_u32_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tuaddwb\tz0\\.s, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (addwb_w0_u32_tied1, svuint32_t, uint16_t,\n+\t\t z0 = svaddwb_n_u32 (z0, x0),\n+\t\t z0 = svaddwb (z0, x0))\n+\n+/*\n+** addwb_w0_u32_untied:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tuaddwb\tz0\\.s, z1\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (addwb_w0_u32_untied, svuint32_t, uint16_t,\n+\t\t z0 = svaddwb_n_u32 (z1, x0),\n+\t\t z0 = svaddwb (z1, x0))\n+\n+/*\n+** addwb_11_u32_tied1:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tuaddwb\tz0\\.s, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addwb_11_u32_tied1, svuint32_t,\n+\t\tz0 = svaddwb_n_u32 (z0, 11),\n+\t\tz0 = svaddwb (z0, 11))\n+\n+/*\n+** addwb_11_u32_untied:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tuaddwb\tz0\\.s, z1\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addwb_11_u32_untied, svuint32_t,\n+\t\tz0 = svaddwb_n_u32 (z1, 11),\n+\t\tz0 = svaddwb (z1, 11))"}, {"sha": "2de559d354acaeeee2c3e3354a38e0dd9bd53be7", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addwb_u64.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddwb_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddwb_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddwb_u64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addwb_u64_tied1:\n+**\tuaddwb\tz0\\.d, z0\\.d, z4\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z (addwb_u64_tied1, svuint64_t, svuint32_t,\n+\t     z0 = svaddwb_u64 (z0, z4),\n+\t     z0 = svaddwb (z0, z4))\n+\n+/*\n+** addwb_u64_tied2:\n+**\tuaddwb\tz0\\.d, z4\\.d, z0\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (addwb_u64_tied2, svuint64_t, svuint32_t,\n+\t\t z0_res = svaddwb_u64 (z4, z0),\n+\t\t z0_res = svaddwb (z4, z0))\n+\n+/*\n+** addwb_u64_untied:\n+**\tuaddwb\tz0\\.d, z1\\.d, z4\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z (addwb_u64_untied, svuint64_t, svuint32_t,\n+\t     z0 = svaddwb_u64 (z1, z4),\n+\t     z0 = svaddwb (z1, z4))\n+\n+/*\n+** addwb_w0_u64_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tuaddwb\tz0\\.d, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (addwb_w0_u64_tied1, svuint64_t, uint32_t,\n+\t\t z0 = svaddwb_n_u64 (z0, x0),\n+\t\t z0 = svaddwb (z0, x0))\n+\n+/*\n+** addwb_w0_u64_untied:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tuaddwb\tz0\\.d, z1\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (addwb_w0_u64_untied, svuint64_t, uint32_t,\n+\t\t z0 = svaddwb_n_u64 (z1, x0),\n+\t\t z0 = svaddwb (z1, x0))\n+\n+/*\n+** addwb_11_u64_tied1:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tuaddwb\tz0\\.d, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addwb_11_u64_tied1, svuint64_t,\n+\t\tz0 = svaddwb_n_u64 (z0, 11),\n+\t\tz0 = svaddwb (z0, 11))\n+\n+/*\n+** addwb_11_u64_untied:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tuaddwb\tz0\\.d, z1\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addwb_11_u64_untied, svuint64_t,\n+\t\tz0 = svaddwb_n_u64 (z1, 11),\n+\t\tz0 = svaddwb (z1, 11))"}, {"sha": "ae831e41c2284a7ddd0980775d92c6fcf7db5d58", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addwt_s16.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddwt_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddwt_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddwt_s16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addwt_s16_tied1:\n+**\tsaddwt\tz0\\.h, z0\\.h, z4\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z (addwt_s16_tied1, svint16_t, svint8_t,\n+\t     z0 = svaddwt_s16 (z0, z4),\n+\t     z0 = svaddwt (z0, z4))\n+\n+/*\n+** addwt_s16_tied2:\n+**\tsaddwt\tz0\\.h, z4\\.h, z0\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (addwt_s16_tied2, svint16_t, svint8_t,\n+\t\t z0_res = svaddwt_s16 (z4, z0),\n+\t\t z0_res = svaddwt (z4, z0))\n+\n+/*\n+** addwt_s16_untied:\n+**\tsaddwt\tz0\\.h, z1\\.h, z4\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z (addwt_s16_untied, svint16_t, svint8_t,\n+\t     z0 = svaddwt_s16 (z1, z4),\n+\t     z0 = svaddwt (z1, z4))\n+\n+/*\n+** addwt_w0_s16_tied1:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tsaddwt\tz0\\.h, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (addwt_w0_s16_tied1, svint16_t, int8_t,\n+\t\t z0 = svaddwt_n_s16 (z0, x0),\n+\t\t z0 = svaddwt (z0, x0))\n+\n+/*\n+** addwt_w0_s16_untied:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tsaddwt\tz0\\.h, z1\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (addwt_w0_s16_untied, svint16_t, int8_t,\n+\t\t z0 = svaddwt_n_s16 (z1, x0),\n+\t\t z0 = svaddwt (z1, x0))\n+\n+/*\n+** addwt_11_s16_tied1:\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tsaddwt\tz0\\.h, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addwt_11_s16_tied1, svint16_t,\n+\t\tz0 = svaddwt_n_s16 (z0, 11),\n+\t\tz0 = svaddwt (z0, 11))\n+\n+/*\n+** addwt_11_s16_untied:\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tsaddwt\tz0\\.h, z1\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addwt_11_s16_untied, svint16_t,\n+\t\tz0 = svaddwt_n_s16 (z1, 11),\n+\t\tz0 = svaddwt (z1, 11))"}, {"sha": "d4ac108a48e8d46f15d2d9d2b1edc4b45e45ef40", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addwt_s32.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddwt_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddwt_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddwt_s32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addwt_s32_tied1:\n+**\tsaddwt\tz0\\.s, z0\\.s, z4\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (addwt_s32_tied1, svint32_t, svint16_t,\n+\t     z0 = svaddwt_s32 (z0, z4),\n+\t     z0 = svaddwt (z0, z4))\n+\n+/*\n+** addwt_s32_tied2:\n+**\tsaddwt\tz0\\.s, z4\\.s, z0\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (addwt_s32_tied2, svint32_t, svint16_t,\n+\t\t z0_res = svaddwt_s32 (z4, z0),\n+\t\t z0_res = svaddwt (z4, z0))\n+\n+/*\n+** addwt_s32_untied:\n+**\tsaddwt\tz0\\.s, z1\\.s, z4\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (addwt_s32_untied, svint32_t, svint16_t,\n+\t     z0 = svaddwt_s32 (z1, z4),\n+\t     z0 = svaddwt (z1, z4))\n+\n+/*\n+** addwt_w0_s32_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tsaddwt\tz0\\.s, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (addwt_w0_s32_tied1, svint32_t, int16_t,\n+\t\t z0 = svaddwt_n_s32 (z0, x0),\n+\t\t z0 = svaddwt (z0, x0))\n+\n+/*\n+** addwt_w0_s32_untied:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tsaddwt\tz0\\.s, z1\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (addwt_w0_s32_untied, svint32_t, int16_t,\n+\t\t z0 = svaddwt_n_s32 (z1, x0),\n+\t\t z0 = svaddwt (z1, x0))\n+\n+/*\n+** addwt_11_s32_tied1:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tsaddwt\tz0\\.s, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addwt_11_s32_tied1, svint32_t,\n+\t\tz0 = svaddwt_n_s32 (z0, 11),\n+\t\tz0 = svaddwt (z0, 11))\n+\n+/*\n+** addwt_11_s32_untied:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tsaddwt\tz0\\.s, z1\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addwt_11_s32_untied, svint32_t,\n+\t\tz0 = svaddwt_n_s32 (z1, 11),\n+\t\tz0 = svaddwt (z1, 11))"}, {"sha": "88370f787d1b909683e069950b61f2af720cd32a", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addwt_s64.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddwt_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddwt_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddwt_s64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addwt_s64_tied1:\n+**\tsaddwt\tz0\\.d, z0\\.d, z4\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z (addwt_s64_tied1, svint64_t, svint32_t,\n+\t     z0 = svaddwt_s64 (z0, z4),\n+\t     z0 = svaddwt (z0, z4))\n+\n+/*\n+** addwt_s64_tied2:\n+**\tsaddwt\tz0\\.d, z4\\.d, z0\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (addwt_s64_tied2, svint64_t, svint32_t,\n+\t\t z0_res = svaddwt_s64 (z4, z0),\n+\t\t z0_res = svaddwt (z4, z0))\n+\n+/*\n+** addwt_s64_untied:\n+**\tsaddwt\tz0\\.d, z1\\.d, z4\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z (addwt_s64_untied, svint64_t, svint32_t,\n+\t     z0 = svaddwt_s64 (z1, z4),\n+\t     z0 = svaddwt (z1, z4))\n+\n+/*\n+** addwt_w0_s64_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tsaddwt\tz0\\.d, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (addwt_w0_s64_tied1, svint64_t, int32_t,\n+\t\t z0 = svaddwt_n_s64 (z0, x0),\n+\t\t z0 = svaddwt (z0, x0))\n+\n+/*\n+** addwt_w0_s64_untied:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tsaddwt\tz0\\.d, z1\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (addwt_w0_s64_untied, svint64_t, int32_t,\n+\t\t z0 = svaddwt_n_s64 (z1, x0),\n+\t\t z0 = svaddwt (z1, x0))\n+\n+/*\n+** addwt_11_s64_tied1:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tsaddwt\tz0\\.d, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addwt_11_s64_tied1, svint64_t,\n+\t\tz0 = svaddwt_n_s64 (z0, 11),\n+\t\tz0 = svaddwt (z0, 11))\n+\n+/*\n+** addwt_11_s64_untied:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tsaddwt\tz0\\.d, z1\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addwt_11_s64_untied, svint64_t,\n+\t\tz0 = svaddwt_n_s64 (z1, 11),\n+\t\tz0 = svaddwt (z1, 11))"}, {"sha": "76312cd38c414621fddcce1626ed089b9b66baec", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addwt_u16.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddwt_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddwt_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddwt_u16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addwt_u16_tied1:\n+**\tuaddwt\tz0\\.h, z0\\.h, z4\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z (addwt_u16_tied1, svuint16_t, svuint8_t,\n+\t     z0 = svaddwt_u16 (z0, z4),\n+\t     z0 = svaddwt (z0, z4))\n+\n+/*\n+** addwt_u16_tied2:\n+**\tuaddwt\tz0\\.h, z4\\.h, z0\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (addwt_u16_tied2, svuint16_t, svuint8_t,\n+\t\t z0_res = svaddwt_u16 (z4, z0),\n+\t\t z0_res = svaddwt (z4, z0))\n+\n+/*\n+** addwt_u16_untied:\n+**\tuaddwt\tz0\\.h, z1\\.h, z4\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z (addwt_u16_untied, svuint16_t, svuint8_t,\n+\t     z0 = svaddwt_u16 (z1, z4),\n+\t     z0 = svaddwt (z1, z4))\n+\n+/*\n+** addwt_w0_u16_tied1:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tuaddwt\tz0\\.h, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (addwt_w0_u16_tied1, svuint16_t, uint8_t,\n+\t\t z0 = svaddwt_n_u16 (z0, x0),\n+\t\t z0 = svaddwt (z0, x0))\n+\n+/*\n+** addwt_w0_u16_untied:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tuaddwt\tz0\\.h, z1\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (addwt_w0_u16_untied, svuint16_t, uint8_t,\n+\t\t z0 = svaddwt_n_u16 (z1, x0),\n+\t\t z0 = svaddwt (z1, x0))\n+\n+/*\n+** addwt_11_u16_tied1:\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tuaddwt\tz0\\.h, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addwt_11_u16_tied1, svuint16_t,\n+\t\tz0 = svaddwt_n_u16 (z0, 11),\n+\t\tz0 = svaddwt (z0, 11))\n+\n+/*\n+** addwt_11_u16_untied:\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tuaddwt\tz0\\.h, z1\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addwt_11_u16_untied, svuint16_t,\n+\t\tz0 = svaddwt_n_u16 (z1, 11),\n+\t\tz0 = svaddwt (z1, 11))"}, {"sha": "808645f42b7fd4306fbd60835fca5d842a09ed39", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addwt_u32.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddwt_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddwt_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddwt_u32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addwt_u32_tied1:\n+**\tuaddwt\tz0\\.s, z0\\.s, z4\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (addwt_u32_tied1, svuint32_t, svuint16_t,\n+\t     z0 = svaddwt_u32 (z0, z4),\n+\t     z0 = svaddwt (z0, z4))\n+\n+/*\n+** addwt_u32_tied2:\n+**\tuaddwt\tz0\\.s, z4\\.s, z0\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (addwt_u32_tied2, svuint32_t, svuint16_t,\n+\t\t z0_res = svaddwt_u32 (z4, z0),\n+\t\t z0_res = svaddwt (z4, z0))\n+\n+/*\n+** addwt_u32_untied:\n+**\tuaddwt\tz0\\.s, z1\\.s, z4\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (addwt_u32_untied, svuint32_t, svuint16_t,\n+\t     z0 = svaddwt_u32 (z1, z4),\n+\t     z0 = svaddwt (z1, z4))\n+\n+/*\n+** addwt_w0_u32_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tuaddwt\tz0\\.s, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (addwt_w0_u32_tied1, svuint32_t, uint16_t,\n+\t\t z0 = svaddwt_n_u32 (z0, x0),\n+\t\t z0 = svaddwt (z0, x0))\n+\n+/*\n+** addwt_w0_u32_untied:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tuaddwt\tz0\\.s, z1\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (addwt_w0_u32_untied, svuint32_t, uint16_t,\n+\t\t z0 = svaddwt_n_u32 (z1, x0),\n+\t\t z0 = svaddwt (z1, x0))\n+\n+/*\n+** addwt_11_u32_tied1:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tuaddwt\tz0\\.s, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addwt_11_u32_tied1, svuint32_t,\n+\t\tz0 = svaddwt_n_u32 (z0, 11),\n+\t\tz0 = svaddwt (z0, 11))\n+\n+/*\n+** addwt_11_u32_untied:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tuaddwt\tz0\\.s, z1\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addwt_11_u32_untied, svuint32_t,\n+\t\tz0 = svaddwt_n_u32 (z1, 11),\n+\t\tz0 = svaddwt (z1, 11))"}, {"sha": "f72dde7f5fba77039a6952edce4ba0dc0afa199d", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/addwt_u64.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddwt_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddwt_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faddwt_u64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addwt_u64_tied1:\n+**\tuaddwt\tz0\\.d, z0\\.d, z4\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z (addwt_u64_tied1, svuint64_t, svuint32_t,\n+\t     z0 = svaddwt_u64 (z0, z4),\n+\t     z0 = svaddwt (z0, z4))\n+\n+/*\n+** addwt_u64_tied2:\n+**\tuaddwt\tz0\\.d, z4\\.d, z0\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (addwt_u64_tied2, svuint64_t, svuint32_t,\n+\t\t z0_res = svaddwt_u64 (z4, z0),\n+\t\t z0_res = svaddwt (z4, z0))\n+\n+/*\n+** addwt_u64_untied:\n+**\tuaddwt\tz0\\.d, z1\\.d, z4\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z (addwt_u64_untied, svuint64_t, svuint32_t,\n+\t     z0 = svaddwt_u64 (z1, z4),\n+\t     z0 = svaddwt (z1, z4))\n+\n+/*\n+** addwt_w0_u64_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tuaddwt\tz0\\.d, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (addwt_w0_u64_tied1, svuint64_t, uint32_t,\n+\t\t z0 = svaddwt_n_u64 (z0, x0),\n+\t\t z0 = svaddwt (z0, x0))\n+\n+/*\n+** addwt_w0_u64_untied:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tuaddwt\tz0\\.d, z1\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (addwt_w0_u64_untied, svuint64_t, uint32_t,\n+\t\t z0 = svaddwt_n_u64 (z1, x0),\n+\t\t z0 = svaddwt (z1, x0))\n+\n+/*\n+** addwt_11_u64_tied1:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tuaddwt\tz0\\.d, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addwt_11_u64_tied1, svuint64_t,\n+\t\tz0 = svaddwt_n_u64 (z0, 11),\n+\t\tz0 = svaddwt (z0, 11))\n+\n+/*\n+** addwt_11_u64_untied:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tuaddwt\tz0\\.d, z1\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (addwt_11_u64_untied, svuint64_t,\n+\t\tz0 = svaddwt_n_u64 (z1, 11),\n+\t\tz0 = svaddwt (z1, 11))"}, {"sha": "622f5cf4609c197df624a68d5b0924c08d188e31", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/aesd_u8.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faesd_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faesd_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faesd_u8.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+#pragma GCC target \"+sve2-aes\"\n+\n+/*\n+** aesd_u8_tied1:\n+**\taesd\tz0\\.b, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aesd_u8_tied1, svuint8_t,\n+\t\tz0 = svaesd_u8 (z0, z1),\n+\t\tz0 = svaesd (z0, z1))\n+\n+/*\n+** aesd_u8_tied2:\n+**\taesd\tz0\\.b, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aesd_u8_tied2, svuint8_t,\n+\t\tz0 = svaesd_u8 (z1, z0),\n+\t\tz0 = svaesd (z1, z0))\n+\n+/*\n+** aesd_u8_untied:\n+** (\n+**\tmov\tz0\\.d, z1\\.d\n+**\taesd\tz0\\.b, z0\\.b, z2\\.b\n+** |\n+**\taesd\tz1\\.b, z0\\.b, z2\\.b\n+**\tmov\tz0\\.d, z1\\.d\n+** |\n+**\tmov\tz0\\.d, z2\\.d\n+**\taesd\tz0\\.b, z0\\.b, z1\\.b\n+** |\n+**\taesd\tz2\\.b, z0\\.b, z1\\.b\n+**\tmov\tz0\\.d, z2\\.d\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aesd_u8_untied, svuint8_t,\n+\t\tz0 = svaesd_u8 (z1, z2),\n+\t\tz0 = svaesd (z1, z2))"}, {"sha": "6555bbb1de7616dbd57044fc35af8d1d8793be95", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/aese_u8.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faese_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faese_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faese_u8.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+#pragma GCC target \"+sve2-aes\"\n+\n+/*\n+** aese_u8_tied1:\n+**\taese\tz0\\.b, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aese_u8_tied1, svuint8_t,\n+\t\tz0 = svaese_u8 (z0, z1),\n+\t\tz0 = svaese (z0, z1))\n+\n+/*\n+** aese_u8_tied2:\n+**\taese\tz0\\.b, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aese_u8_tied2, svuint8_t,\n+\t\tz0 = svaese_u8 (z1, z0),\n+\t\tz0 = svaese (z1, z0))\n+\n+/*\n+** aese_u8_untied:\n+** (\n+**\tmov\tz0\\.d, z1\\.d\n+**\taese\tz0\\.b, z0\\.b, z2\\.b\n+** |\n+**\taese\tz1\\.b, z0\\.b, z2\\.b\n+**\tmov\tz0\\.d, z1\\.d\n+** |\n+**\tmov\tz0\\.d, z2\\.d\n+**\taese\tz0\\.b, z0\\.b, z1\\.b\n+** |\n+**\taese\tz2\\.b, z0\\.b, z1\\.b\n+**\tmov\tz0\\.d, z2\\.d\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aese_u8_untied, svuint8_t,\n+\t\tz0 = svaese_u8 (z1, z2),\n+\t\tz0 = svaese (z1, z2))"}, {"sha": "4630595ff209cb9004a8745bf8e1dbdc3fb6281e", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/aesimc_u8.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faesimc_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faesimc_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faesimc_u8.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+#pragma GCC target \"+sve2-aes\"\n+\n+/*\n+** aesimc_u8_tied1:\n+**\taesimc\tz0\\.b, z0\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aesimc_u8_tied1, svuint8_t,\n+\t\tz0 = svaesimc_u8 (z0),\n+\t\tz0 = svaesimc (z0))\n+\n+/*\n+** aesimc_u8_untied:\n+** (\n+**\tmov\tz0\\.d, z1\\.d\n+**\taesimc\tz0\\.b, z0\\.b\n+** |\n+**\taesimc\tz1\\.b, z0\\.b\n+**\tmov\tz0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aesimc_u8_untied, svuint8_t,\n+\t\tz0 = svaesimc_u8 (z1),\n+\t\tz0 = svaesimc (z1))"}, {"sha": "6e8acf48f2aff7193fda4c7752e3d225e5abb094", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/aesmc_u8.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faesmc_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faesmc_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Faesmc_u8.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+#pragma GCC target \"+sve2-aes\"\n+\n+/*\n+** aesmc_u8_tied1:\n+**\taesmc\tz0\\.b, z0\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aesmc_u8_tied1, svuint8_t,\n+\t\tz0 = svaesmc_u8 (z0),\n+\t\tz0 = svaesmc (z0))\n+\n+/*\n+** aesmc_u8_untied:\n+** (\n+**\tmov\tz0\\.d, z1\\.d\n+**\taesmc\tz0\\.b, z0\\.b\n+** |\n+**\taesmc\tz1\\.b, z0\\.b\n+**\tmov\tz0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (aesmc_u8_untied, svuint8_t,\n+\t\tz0 = svaesmc_u8 (z1),\n+\t\tz0 = svaesmc (z1))"}, {"sha": "acad87d963540c6cbf3df1a929ac368c754007a7", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/bcax_s16.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbcax_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbcax_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbcax_s16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,110 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** bcax_s16_tied1:\n+**\tbcax\tz0\\.d, z0\\.d, (z1\\.d, z2\\.d|z2\\.d, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_s16_tied1, svint16_t,\n+\t\tz0 = svbcax_s16 (z0, z1, z2),\n+\t\tz0 = svbcax (z0, z1, z2))\n+\n+/*\n+** bcax_s16_tied2:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (z2\\.d, \\1|\\1, z2\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_s16_tied2, svint16_t,\n+\t\tz0 = svbcax_s16 (z1, z0, z2),\n+\t\tz0 = svbcax (z1, z0, z2))\n+\n+/*\n+** bcax_s16_tied3:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (z2\\.d, \\1|\\1, z2\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_s16_tied3, svint16_t,\n+\t\tz0 = svbcax_s16 (z1, z2, z0),\n+\t\tz0 = svbcax (z1, z2, z0))\n+\n+/*\n+** bcax_s16_untied:\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (z2\\.d, z3\\.d|z3\\.d, z2\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_s16_untied, svint16_t,\n+\t\tz0 = svbcax_s16 (z1, z2, z3),\n+\t\tz0 = svbcax (z1, z2, z3))\n+\n+/*\n+** bcax_w0_s16_tied1:\n+**\tmov\t(z[0-9]+)\\.h, w0\n+**\tbcax\tz0\\.d, z0\\.d, (z1\\.d, \\1\\.d|\\1\\.d, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bcax_w0_s16_tied1, svint16_t, int16_t,\n+\t\t z0 = svbcax_n_s16 (z0, z1, x0),\n+\t\t z0 = svbcax (z0, z1, x0))\n+\n+/*\n+** bcax_w0_s16_tied2:\n+**\tmov\t(z[0-9]+)\\.h, w0\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (\\1\\.d, \\2|\\2, \\1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bcax_w0_s16_tied2, svint16_t, int16_t,\n+\t\t z0 = svbcax_n_s16 (z1, z0, x0),\n+\t\t z0 = svbcax (z1, z0, x0))\n+\n+/*\n+** bcax_w0_s16_untied: { xfail *-*-*}\n+**\tmov\t(z[0-9]+)\\.h, w0\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (z2\\.d, \\1\\.d|\\1\\.d, z2\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bcax_w0_s16_untied, svint16_t, int16_t,\n+\t\t z0 = svbcax_n_s16 (z1, z2, x0),\n+\t\t z0 = svbcax (z1, z2, x0))\n+\n+/*\n+** bcax_11_s16_tied1:\n+**\tmov\t(z[0-9]+)\\.h, #11\n+**\tbcax\tz0\\.d, z0\\.d, (z1\\.d, \\1\\.d|\\1\\.d, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_11_s16_tied1, svint16_t,\n+\t\tz0 = svbcax_n_s16 (z0, z1, 11),\n+\t\tz0 = svbcax (z0, z1, 11))\n+\n+/*\n+** bcax_11_s16_tied2:\n+**\tmov\t(z[0-9]+)\\.h, #11\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (\\1\\.d, \\2|\\2, \\1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_11_s16_tied2, svint16_t,\n+\t\tz0 = svbcax_n_s16 (z1, z0, 11),\n+\t\tz0 = svbcax (z1, z0, 11))\n+\n+/*\n+** bcax_11_s16_untied: { xfail *-*-*}\n+**\tmov\t(z[0-9]+)\\.h, #11\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (z2\\.d, \\1\\.d|\\1\\.d, z2\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_11_s16_untied, svint16_t,\n+\t\tz0 = svbcax_n_s16 (z1, z2, 11),\n+\t\tz0 = svbcax (z1, z2, 11))"}, {"sha": "aeb4357465673a69f4a485bfe9bef4cd46f7cd6d", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/bcax_s32.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbcax_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbcax_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbcax_s32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,110 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** bcax_s32_tied1:\n+**\tbcax\tz0\\.d, z0\\.d, (z1\\.d, z2\\.d|z2\\.d, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_s32_tied1, svint32_t,\n+\t\tz0 = svbcax_s32 (z0, z1, z2),\n+\t\tz0 = svbcax (z0, z1, z2))\n+\n+/*\n+** bcax_s32_tied2:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (z2\\.d, \\1|\\1, z2\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_s32_tied2, svint32_t,\n+\t\tz0 = svbcax_s32 (z1, z0, z2),\n+\t\tz0 = svbcax (z1, z0, z2))\n+\n+/*\n+** bcax_s32_tied3:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (z2\\.d, \\1|\\1, z2\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_s32_tied3, svint32_t,\n+\t\tz0 = svbcax_s32 (z1, z2, z0),\n+\t\tz0 = svbcax (z1, z2, z0))\n+\n+/*\n+** bcax_s32_untied:\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (z2\\.d, z3\\.d|z3\\.d, z2\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_s32_untied, svint32_t,\n+\t\tz0 = svbcax_s32 (z1, z2, z3),\n+\t\tz0 = svbcax (z1, z2, z3))\n+\n+/*\n+** bcax_w0_s32_tied1:\n+**\tmov\t(z[0-9]+)\\.s, w0\n+**\tbcax\tz0\\.d, z0\\.d, (z1\\.d, \\1\\.d|\\1\\.d, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bcax_w0_s32_tied1, svint32_t, int32_t,\n+\t\t z0 = svbcax_n_s32 (z0, z1, x0),\n+\t\t z0 = svbcax (z0, z1, x0))\n+\n+/*\n+** bcax_w0_s32_tied2:\n+**\tmov\t(z[0-9]+)\\.s, w0\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (\\1\\.d, \\2|\\2, \\1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bcax_w0_s32_tied2, svint32_t, int32_t,\n+\t\t z0 = svbcax_n_s32 (z1, z0, x0),\n+\t\t z0 = svbcax (z1, z0, x0))\n+\n+/*\n+** bcax_w0_s32_untied:\n+**\tmov\t(z[0-9]+)\\.s, w0\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (z2\\.d, \\1\\.d|\\1\\.d, z2\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bcax_w0_s32_untied, svint32_t, int32_t,\n+\t\t z0 = svbcax_n_s32 (z1, z2, x0),\n+\t\t z0 = svbcax (z1, z2, x0))\n+\n+/*\n+** bcax_11_s32_tied1:\n+**\tmov\t(z[0-9]+)\\.s, #11\n+**\tbcax\tz0\\.d, z0\\.d, (z1\\.d, \\1\\.d|\\1\\.d, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_11_s32_tied1, svint32_t,\n+\t\tz0 = svbcax_n_s32 (z0, z1, 11),\n+\t\tz0 = svbcax (z0, z1, 11))\n+\n+/*\n+** bcax_11_s32_tied2:\n+**\tmov\t(z[0-9]+)\\.s, #11\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (\\1\\.d, \\2|\\2, \\1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_11_s32_tied2, svint32_t,\n+\t\tz0 = svbcax_n_s32 (z1, z0, 11),\n+\t\tz0 = svbcax (z1, z0, 11))\n+\n+/*\n+** bcax_11_s32_untied: { xfail *-*-*}\n+**\tmov\t(z[0-9]+)\\.s, #11\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (z2\\.d, \\1\\.d|\\1\\.d, z2\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_11_s32_untied, svint32_t,\n+\t\tz0 = svbcax_n_s32 (z1, z2, 11),\n+\t\tz0 = svbcax (z1, z2, 11))"}, {"sha": "2087e583342535195e902f1ec12865ae73d16330", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/bcax_s64.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbcax_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbcax_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbcax_s64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,110 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** bcax_s64_tied1:\n+**\tbcax\tz0\\.d, z0\\.d, (z1\\.d, z2\\.d|z2\\.d, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_s64_tied1, svint64_t,\n+\t\tz0 = svbcax_s64 (z0, z1, z2),\n+\t\tz0 = svbcax (z0, z1, z2))\n+\n+/*\n+** bcax_s64_tied2:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (z2\\.d, \\1|\\1, z2\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_s64_tied2, svint64_t,\n+\t\tz0 = svbcax_s64 (z1, z0, z2),\n+\t\tz0 = svbcax (z1, z0, z2))\n+\n+/*\n+** bcax_s64_tied3:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (z2\\.d, \\1|\\1, z2\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_s64_tied3, svint64_t,\n+\t\tz0 = svbcax_s64 (z1, z2, z0),\n+\t\tz0 = svbcax (z1, z2, z0))\n+\n+/*\n+** bcax_s64_untied:\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (z2\\.d, z3\\.d|z3\\.d, z2\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_s64_untied, svint64_t,\n+\t\tz0 = svbcax_s64 (z1, z2, z3),\n+\t\tz0 = svbcax (z1, z2, z3))\n+\n+/*\n+** bcax_x0_s64_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tbcax\tz0\\.d, z0\\.d, (z1\\.d, \\1|\\1, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bcax_x0_s64_tied1, svint64_t, int64_t,\n+\t\t z0 = svbcax_n_s64 (z0, z1, x0),\n+\t\t z0 = svbcax (z0, z1, x0))\n+\n+/*\n+** bcax_x0_s64_tied2:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (\\1, \\2|\\2, \\1)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bcax_x0_s64_tied2, svint64_t, int64_t,\n+\t\t z0 = svbcax_n_s64 (z1, z0, x0),\n+\t\t z0 = svbcax (z1, z0, x0))\n+\n+/*\n+** bcax_x0_s64_untied:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (z2\\.d, \\1|\\1, z2\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bcax_x0_s64_untied, svint64_t, int64_t,\n+\t\t z0 = svbcax_n_s64 (z1, z2, x0),\n+\t\t z0 = svbcax (z1, z2, x0))\n+\n+/*\n+** bcax_11_s64_tied1:\n+**\tmov\t(z[0-9]+\\.d), #11\n+**\tbcax\tz0\\.d, z0\\.d, (z1\\.d, \\1|\\1, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_11_s64_tied1, svint64_t,\n+\t\tz0 = svbcax_n_s64 (z0, z1, 11),\n+\t\tz0 = svbcax (z0, z1, 11))\n+\n+/*\n+** bcax_11_s64_tied2:\n+**\tmov\t(z[0-9]+\\.d), #11\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (\\1, \\2|\\2, \\1)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_11_s64_tied2, svint64_t,\n+\t\tz0 = svbcax_n_s64 (z1, z0, 11),\n+\t\tz0 = svbcax (z1, z0, 11))\n+\n+/*\n+** bcax_11_s64_untied: { xfail *-*-*}\n+**\tmov\t(z[0-9]+\\.d), #11\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (z2\\.d, \\1|\\1, z2\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_11_s64_untied, svint64_t,\n+\t\tz0 = svbcax_n_s64 (z1, z2, 11),\n+\t\tz0 = svbcax (z1, z2, 11))"}, {"sha": "548aafad85739d8420bd2c14bb877f14d8e755bc", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/bcax_s8.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbcax_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbcax_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbcax_s8.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,110 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** bcax_s8_tied1:\n+**\tbcax\tz0\\.d, z0\\.d, (z1\\.d, z2\\.d|z2\\.d, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_s8_tied1, svint8_t,\n+\t\tz0 = svbcax_s8 (z0, z1, z2),\n+\t\tz0 = svbcax (z0, z1, z2))\n+\n+/*\n+** bcax_s8_tied2:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (z2\\.d, \\1|\\1, z2\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_s8_tied2, svint8_t,\n+\t\tz0 = svbcax_s8 (z1, z0, z2),\n+\t\tz0 = svbcax (z1, z0, z2))\n+\n+/*\n+** bcax_s8_tied3:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (z2\\.d, \\1|\\1, z2\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_s8_tied3, svint8_t,\n+\t\tz0 = svbcax_s8 (z1, z2, z0),\n+\t\tz0 = svbcax (z1, z2, z0))\n+\n+/*\n+** bcax_s8_untied:\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (z2\\.d, z3\\.d|z3\\.d, z2\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_s8_untied, svint8_t,\n+\t\tz0 = svbcax_s8 (z1, z2, z3),\n+\t\tz0 = svbcax (z1, z2, z3))\n+\n+/*\n+** bcax_w0_s8_tied1:\n+**\tmov\t(z[0-9]+)\\.b, w0\n+**\tbcax\tz0\\.d, z0\\.d, (z1\\.d, \\1\\.d|\\1\\.d, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bcax_w0_s8_tied1, svint8_t, int8_t,\n+\t\t z0 = svbcax_n_s8 (z0, z1, x0),\n+\t\t z0 = svbcax (z0, z1, x0))\n+\n+/*\n+** bcax_w0_s8_tied2:\n+**\tmov\t(z[0-9]+)\\.b, w0\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (\\1\\.d, \\2|\\2, \\1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bcax_w0_s8_tied2, svint8_t, int8_t,\n+\t\t z0 = svbcax_n_s8 (z1, z0, x0),\n+\t\t z0 = svbcax (z1, z0, x0))\n+\n+/*\n+** bcax_w0_s8_untied: { xfail *-*-*}\n+**\tmov\t(z[0-9]+)\\.b, w0\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (z2\\.d, \\1\\.d|\\1\\.d, z2\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bcax_w0_s8_untied, svint8_t, int8_t,\n+\t\t z0 = svbcax_n_s8 (z1, z2, x0),\n+\t\t z0 = svbcax (z1, z2, x0))\n+\n+/*\n+** bcax_11_s8_tied1:\n+**\tmov\t(z[0-9]+)\\.b, #11\n+**\tbcax\tz0\\.d, z0\\.d, (z1\\.d, \\1\\.d|\\1\\.d, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_11_s8_tied1, svint8_t,\n+\t\tz0 = svbcax_n_s8 (z0, z1, 11),\n+\t\tz0 = svbcax (z0, z1, 11))\n+\n+/*\n+** bcax_11_s8_tied2:\n+**\tmov\t(z[0-9]+)\\.b, #11\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (\\1\\.d, \\2|\\2, \\1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_11_s8_tied2, svint8_t,\n+\t\tz0 = svbcax_n_s8 (z1, z0, 11),\n+\t\tz0 = svbcax (z1, z0, 11))\n+\n+/*\n+** bcax_11_s8_untied: { xfail *-*-*}\n+**\tmov\t(z[0-9]+)\\.b, #11\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (z2\\.d, \\1\\.d|\\1\\.d, z2\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_11_s8_untied, svint8_t,\n+\t\tz0 = svbcax_n_s8 (z1, z2, 11),\n+\t\tz0 = svbcax (z1, z2, 11))"}, {"sha": "b63a4774ba73e5df19fcc5190483a3fda4092598", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/bcax_u16.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbcax_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbcax_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbcax_u16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,110 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** bcax_u16_tied1:\n+**\tbcax\tz0\\.d, z0\\.d, (z1\\.d, z2\\.d|z2\\.d, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_u16_tied1, svuint16_t,\n+\t\tz0 = svbcax_u16 (z0, z1, z2),\n+\t\tz0 = svbcax (z0, z1, z2))\n+\n+/*\n+** bcax_u16_tied2:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (z2\\.d, \\1|\\1, z2\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_u16_tied2, svuint16_t,\n+\t\tz0 = svbcax_u16 (z1, z0, z2),\n+\t\tz0 = svbcax (z1, z0, z2))\n+\n+/*\n+** bcax_u16_tied3:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (z2\\.d, \\1|\\1, z2\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_u16_tied3, svuint16_t,\n+\t\tz0 = svbcax_u16 (z1, z2, z0),\n+\t\tz0 = svbcax (z1, z2, z0))\n+\n+/*\n+** bcax_u16_untied:\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (z2\\.d, z3\\.d|z3\\.d, z2\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_u16_untied, svuint16_t,\n+\t\tz0 = svbcax_u16 (z1, z2, z3),\n+\t\tz0 = svbcax (z1, z2, z3))\n+\n+/*\n+** bcax_w0_u16_tied1:\n+**\tmov\t(z[0-9]+)\\.h, w0\n+**\tbcax\tz0\\.d, z0\\.d, (z1\\.d, \\1\\.d|\\1\\.d, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bcax_w0_u16_tied1, svuint16_t, uint16_t,\n+\t\t z0 = svbcax_n_u16 (z0, z1, x0),\n+\t\t z0 = svbcax (z0, z1, x0))\n+\n+/*\n+** bcax_w0_u16_tied2:\n+**\tmov\t(z[0-9]+)\\.h, w0\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (\\1\\.d, \\2|\\2, \\1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bcax_w0_u16_tied2, svuint16_t, uint16_t,\n+\t\t z0 = svbcax_n_u16 (z1, z0, x0),\n+\t\t z0 = svbcax (z1, z0, x0))\n+\n+/*\n+** bcax_w0_u16_untied: { xfail *-*-*}\n+**\tmov\t(z[0-9]+)\\.h, w0\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (z2\\.d, \\1\\.d|\\1\\.d, z2\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bcax_w0_u16_untied, svuint16_t, uint16_t,\n+\t\t z0 = svbcax_n_u16 (z1, z2, x0),\n+\t\t z0 = svbcax (z1, z2, x0))\n+\n+/*\n+** bcax_11_u16_tied1:\n+**\tmov\t(z[0-9]+)\\.h, #11\n+**\tbcax\tz0\\.d, z0\\.d, (z1\\.d, \\1\\.d|\\1\\.d, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_11_u16_tied1, svuint16_t,\n+\t\tz0 = svbcax_n_u16 (z0, z1, 11),\n+\t\tz0 = svbcax (z0, z1, 11))\n+\n+/*\n+** bcax_11_u16_tied2:\n+**\tmov\t(z[0-9]+)\\.h, #11\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (\\1\\.d, \\2|\\2, \\1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_11_u16_tied2, svuint16_t,\n+\t\tz0 = svbcax_n_u16 (z1, z0, 11),\n+\t\tz0 = svbcax (z1, z0, 11))\n+\n+/*\n+** bcax_11_u16_untied: { xfail *-*-*}\n+**\tmov\t(z[0-9]+)\\.h, #11\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (z2\\.d, \\1\\.d|\\1\\.d, z2\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_11_u16_untied, svuint16_t,\n+\t\tz0 = svbcax_n_u16 (z1, z2, 11),\n+\t\tz0 = svbcax (z1, z2, 11))"}, {"sha": "d03c938b77e5997efa02d1faf2e06c01a1949dd7", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/bcax_u32.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbcax_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbcax_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbcax_u32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,110 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** bcax_u32_tied1:\n+**\tbcax\tz0\\.d, z0\\.d, (z1\\.d, z2\\.d|z2\\.d, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_u32_tied1, svuint32_t,\n+\t\tz0 = svbcax_u32 (z0, z1, z2),\n+\t\tz0 = svbcax (z0, z1, z2))\n+\n+/*\n+** bcax_u32_tied2:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (z2\\.d, \\1|\\1, z2\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_u32_tied2, svuint32_t,\n+\t\tz0 = svbcax_u32 (z1, z0, z2),\n+\t\tz0 = svbcax (z1, z0, z2))\n+\n+/*\n+** bcax_u32_tied3:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (z2\\.d, \\1|\\1, z2\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_u32_tied3, svuint32_t,\n+\t\tz0 = svbcax_u32 (z1, z2, z0),\n+\t\tz0 = svbcax (z1, z2, z0))\n+\n+/*\n+** bcax_u32_untied:\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (z2\\.d, z3\\.d|z3\\.d, z2\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_u32_untied, svuint32_t,\n+\t\tz0 = svbcax_u32 (z1, z2, z3),\n+\t\tz0 = svbcax (z1, z2, z3))\n+\n+/*\n+** bcax_w0_u32_tied1:\n+**\tmov\t(z[0-9]+)\\.s, w0\n+**\tbcax\tz0\\.d, z0\\.d, (z1\\.d, \\1\\.d|\\1\\.d, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bcax_w0_u32_tied1, svuint32_t, uint32_t,\n+\t\t z0 = svbcax_n_u32 (z0, z1, x0),\n+\t\t z0 = svbcax (z0, z1, x0))\n+\n+/*\n+** bcax_w0_u32_tied2:\n+**\tmov\t(z[0-9]+)\\.s, w0\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (\\1\\.d, \\2|\\2, \\1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bcax_w0_u32_tied2, svuint32_t, uint32_t,\n+\t\t z0 = svbcax_n_u32 (z1, z0, x0),\n+\t\t z0 = svbcax (z1, z0, x0))\n+\n+/*\n+** bcax_w0_u32_untied:\n+**\tmov\t(z[0-9]+)\\.s, w0\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (z2\\.d, \\1\\.d|\\1\\.d, z2\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bcax_w0_u32_untied, svuint32_t, uint32_t,\n+\t\t z0 = svbcax_n_u32 (z1, z2, x0),\n+\t\t z0 = svbcax (z1, z2, x0))\n+\n+/*\n+** bcax_11_u32_tied1:\n+**\tmov\t(z[0-9]+)\\.s, #11\n+**\tbcax\tz0\\.d, z0\\.d, (z1\\.d, \\1\\.d|\\1\\.d, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_11_u32_tied1, svuint32_t,\n+\t\tz0 = svbcax_n_u32 (z0, z1, 11),\n+\t\tz0 = svbcax (z0, z1, 11))\n+\n+/*\n+** bcax_11_u32_tied2:\n+**\tmov\t(z[0-9]+)\\.s, #11\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (\\1\\.d, \\2|\\2, \\1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_11_u32_tied2, svuint32_t,\n+\t\tz0 = svbcax_n_u32 (z1, z0, 11),\n+\t\tz0 = svbcax (z1, z0, 11))\n+\n+/*\n+** bcax_11_u32_untied: { xfail *-*-*}\n+**\tmov\t(z[0-9]+)\\.s, #11\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (z2\\.d, \\1\\.d|\\1\\.d, z2\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_11_u32_untied, svuint32_t,\n+\t\tz0 = svbcax_n_u32 (z1, z2, 11),\n+\t\tz0 = svbcax (z1, z2, 11))"}, {"sha": "e03906214e84ae37cfe18e8a4764eb9cd54683cf", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/bcax_u64.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbcax_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbcax_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbcax_u64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,110 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** bcax_u64_tied1:\n+**\tbcax\tz0\\.d, z0\\.d, (z1\\.d, z2\\.d|z2\\.d, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_u64_tied1, svuint64_t,\n+\t\tz0 = svbcax_u64 (z0, z1, z2),\n+\t\tz0 = svbcax (z0, z1, z2))\n+\n+/*\n+** bcax_u64_tied2:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (z2\\.d, \\1|\\1, z2\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_u64_tied2, svuint64_t,\n+\t\tz0 = svbcax_u64 (z1, z0, z2),\n+\t\tz0 = svbcax (z1, z0, z2))\n+\n+/*\n+** bcax_u64_tied3:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (z2\\.d, \\1|\\1, z2\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_u64_tied3, svuint64_t,\n+\t\tz0 = svbcax_u64 (z1, z2, z0),\n+\t\tz0 = svbcax (z1, z2, z0))\n+\n+/*\n+** bcax_u64_untied:\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (z2\\.d, z3\\.d|z3\\.d, z2\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_u64_untied, svuint64_t,\n+\t\tz0 = svbcax_u64 (z1, z2, z3),\n+\t\tz0 = svbcax (z1, z2, z3))\n+\n+/*\n+** bcax_x0_u64_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tbcax\tz0\\.d, z0\\.d, (z1\\.d, \\1|\\1, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bcax_x0_u64_tied1, svuint64_t, uint64_t,\n+\t\t z0 = svbcax_n_u64 (z0, z1, x0),\n+\t\t z0 = svbcax (z0, z1, x0))\n+\n+/*\n+** bcax_x0_u64_tied2:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (\\1, \\2|\\2, \\1)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bcax_x0_u64_tied2, svuint64_t, uint64_t,\n+\t\t z0 = svbcax_n_u64 (z1, z0, x0),\n+\t\t z0 = svbcax (z1, z0, x0))\n+\n+/*\n+** bcax_x0_u64_untied:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (z2\\.d, \\1|\\1, z2\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bcax_x0_u64_untied, svuint64_t, uint64_t,\n+\t\t z0 = svbcax_n_u64 (z1, z2, x0),\n+\t\t z0 = svbcax (z1, z2, x0))\n+\n+/*\n+** bcax_11_u64_tied1:\n+**\tmov\t(z[0-9]+\\.d), #11\n+**\tbcax\tz0\\.d, z0\\.d, (z1\\.d, \\1|\\1, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_11_u64_tied1, svuint64_t,\n+\t\tz0 = svbcax_n_u64 (z0, z1, 11),\n+\t\tz0 = svbcax (z0, z1, 11))\n+\n+/*\n+** bcax_11_u64_tied2:\n+**\tmov\t(z[0-9]+\\.d), #11\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (\\1, \\2|\\2, \\1)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_11_u64_tied2, svuint64_t,\n+\t\tz0 = svbcax_n_u64 (z1, z0, 11),\n+\t\tz0 = svbcax (z1, z0, 11))\n+\n+/*\n+** bcax_11_u64_untied: { xfail *-*-*}\n+**\tmov\t(z[0-9]+\\.d), #11\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (z2\\.d, \\1|\\1, z2\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_11_u64_untied, svuint64_t,\n+\t\tz0 = svbcax_n_u64 (z1, z2, 11),\n+\t\tz0 = svbcax (z1, z2, 11))"}, {"sha": "0957d58bd0ecd348ea4148ce84e05ffcb2848bcd", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/bcax_u8.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbcax_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbcax_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbcax_u8.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,110 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** bcax_u8_tied1:\n+**\tbcax\tz0\\.d, z0\\.d, (z1\\.d, z2\\.d|z2\\.d, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_u8_tied1, svuint8_t,\n+\t\tz0 = svbcax_u8 (z0, z1, z2),\n+\t\tz0 = svbcax (z0, z1, z2))\n+\n+/*\n+** bcax_u8_tied2:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (z2\\.d, \\1|\\1, z2\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_u8_tied2, svuint8_t,\n+\t\tz0 = svbcax_u8 (z1, z0, z2),\n+\t\tz0 = svbcax (z1, z0, z2))\n+\n+/*\n+** bcax_u8_tied3:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (z2\\.d, \\1|\\1, z2\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_u8_tied3, svuint8_t,\n+\t\tz0 = svbcax_u8 (z1, z2, z0),\n+\t\tz0 = svbcax (z1, z2, z0))\n+\n+/*\n+** bcax_u8_untied:\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (z2\\.d, z3\\.d|z3\\.d, z2\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_u8_untied, svuint8_t,\n+\t\tz0 = svbcax_u8 (z1, z2, z3),\n+\t\tz0 = svbcax (z1, z2, z3))\n+\n+/*\n+** bcax_w0_u8_tied1:\n+**\tmov\t(z[0-9]+)\\.b, w0\n+**\tbcax\tz0\\.d, z0\\.d, (z1\\.d, \\1\\.d|\\1\\.d, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bcax_w0_u8_tied1, svuint8_t, uint8_t,\n+\t\t z0 = svbcax_n_u8 (z0, z1, x0),\n+\t\t z0 = svbcax (z0, z1, x0))\n+\n+/*\n+** bcax_w0_u8_tied2:\n+**\tmov\t(z[0-9]+)\\.b, w0\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (\\1\\.d, \\2|\\2, \\1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bcax_w0_u8_tied2, svuint8_t, uint8_t,\n+\t\t z0 = svbcax_n_u8 (z1, z0, x0),\n+\t\t z0 = svbcax (z1, z0, x0))\n+\n+/*\n+** bcax_w0_u8_untied: { xfail *-*-*}\n+**\tmov\t(z[0-9]+)\\.b, w0\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (z2\\.d, \\1\\.d|\\1\\.d, z2\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bcax_w0_u8_untied, svuint8_t, uint8_t,\n+\t\t z0 = svbcax_n_u8 (z1, z2, x0),\n+\t\t z0 = svbcax (z1, z2, x0))\n+\n+/*\n+** bcax_11_u8_tied1:\n+**\tmov\t(z[0-9]+)\\.b, #11\n+**\tbcax\tz0\\.d, z0\\.d, (z1\\.d, \\1\\.d|\\1\\.d, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_11_u8_tied1, svuint8_t,\n+\t\tz0 = svbcax_n_u8 (z0, z1, 11),\n+\t\tz0 = svbcax (z0, z1, 11))\n+\n+/*\n+** bcax_11_u8_tied2:\n+**\tmov\t(z[0-9]+)\\.b, #11\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (\\1\\.d, \\2|\\2, \\1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_11_u8_tied2, svuint8_t,\n+\t\tz0 = svbcax_n_u8 (z1, z0, 11),\n+\t\tz0 = svbcax (z1, z0, 11))\n+\n+/*\n+** bcax_11_u8_untied: { xfail *-*-*}\n+**\tmov\t(z[0-9]+)\\.b, #11\n+**\tmovprfx\tz0, z1\n+**\tbcax\tz0\\.d, z0\\.d, (z2\\.d, \\1\\.d|\\1\\.d, z2\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bcax_11_u8_untied, svuint8_t,\n+\t\tz0 = svbcax_n_u8 (z1, z2, 11),\n+\t\tz0 = svbcax (z1, z2, 11))"}, {"sha": "14230850f709628027c382dbda7c24043c567b06", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/bdep_u16.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbdep_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbdep_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbdep_u16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+#pragma GCC target \"+sve2-bitperm\"\n+\n+/*\n+** bdep_u16_tied1:\n+**\tbdep\tz0\\.h, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bdep_u16_tied1, svuint16_t,\n+\t\tz0 = svbdep_u16 (z0, z1),\n+\t\tz0 = svbdep (z0, z1))\n+\n+/*\n+** bdep_u16_tied2:\n+**\tbdep\tz0\\.h, z1\\.h, z0\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bdep_u16_tied2, svuint16_t,\n+\t\tz0 = svbdep_u16 (z1, z0),\n+\t\tz0 = svbdep (z1, z0))\n+\n+/*\n+** bdep_u16_untied:\n+**\tbdep\tz0\\.h, z1\\.h, z2\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bdep_u16_untied, svuint16_t,\n+\t\tz0 = svbdep_u16 (z1, z2),\n+\t\tz0 = svbdep (z1, z2))\n+\n+/*\n+** bdep_w0_u16_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tbdep\tz0\\.h, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bdep_w0_u16_tied1, svuint16_t, uint16_t,\n+\t\t z0 = svbdep_n_u16 (z0, x0),\n+\t\t z0 = svbdep (z0, x0))\n+\n+/*\n+** bdep_w0_u16_untied:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tbdep\tz0\\.h, z1\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bdep_w0_u16_untied, svuint16_t, uint16_t,\n+\t\t z0 = svbdep_n_u16 (z1, x0),\n+\t\t z0 = svbdep (z1, x0))\n+\n+/*\n+** bdep_11_u16_tied1:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tbdep\tz0\\.h, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bdep_11_u16_tied1, svuint16_t,\n+\t\tz0 = svbdep_n_u16 (z0, 11),\n+\t\tz0 = svbdep (z0, 11))\n+\n+/*\n+** bdep_11_u16_untied:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tbdep\tz0\\.h, z1\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bdep_11_u16_untied, svuint16_t,\n+\t\tz0 = svbdep_n_u16 (z1, 11),\n+\t\tz0 = svbdep (z1, 11))"}, {"sha": "7f08df4baa206ac25735a56a984fd39d2b4781f5", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/bdep_u32.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbdep_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbdep_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbdep_u32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+#pragma GCC target \"+sve2-bitperm\"\n+\n+/*\n+** bdep_u32_tied1:\n+**\tbdep\tz0\\.s, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bdep_u32_tied1, svuint32_t,\n+\t\tz0 = svbdep_u32 (z0, z1),\n+\t\tz0 = svbdep (z0, z1))\n+\n+/*\n+** bdep_u32_tied2:\n+**\tbdep\tz0\\.s, z1\\.s, z0\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bdep_u32_tied2, svuint32_t,\n+\t\tz0 = svbdep_u32 (z1, z0),\n+\t\tz0 = svbdep (z1, z0))\n+\n+/*\n+** bdep_u32_untied:\n+**\tbdep\tz0\\.s, z1\\.s, z2\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bdep_u32_untied, svuint32_t,\n+\t\tz0 = svbdep_u32 (z1, z2),\n+\t\tz0 = svbdep (z1, z2))\n+\n+/*\n+** bdep_w0_u32_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tbdep\tz0\\.s, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bdep_w0_u32_tied1, svuint32_t, uint32_t,\n+\t\t z0 = svbdep_n_u32 (z0, x0),\n+\t\t z0 = svbdep (z0, x0))\n+\n+/*\n+** bdep_w0_u32_untied:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tbdep\tz0\\.s, z1\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bdep_w0_u32_untied, svuint32_t, uint32_t,\n+\t\t z0 = svbdep_n_u32 (z1, x0),\n+\t\t z0 = svbdep (z1, x0))\n+\n+/*\n+** bdep_11_u32_tied1:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tbdep\tz0\\.s, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bdep_11_u32_tied1, svuint32_t,\n+\t\tz0 = svbdep_n_u32 (z0, 11),\n+\t\tz0 = svbdep (z0, 11))\n+\n+/*\n+** bdep_11_u32_untied:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tbdep\tz0\\.s, z1\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bdep_11_u32_untied, svuint32_t,\n+\t\tz0 = svbdep_n_u32 (z1, 11),\n+\t\tz0 = svbdep (z1, 11))"}, {"sha": "7f7cbbeebad9cb65487c89d4a20e2abaa6e6decf", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/bdep_u64.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbdep_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbdep_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbdep_u64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+#pragma GCC target \"+sve2-bitperm\"\n+\n+/*\n+** bdep_u64_tied1:\n+**\tbdep\tz0\\.d, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bdep_u64_tied1, svuint64_t,\n+\t\tz0 = svbdep_u64 (z0, z1),\n+\t\tz0 = svbdep (z0, z1))\n+\n+/*\n+** bdep_u64_tied2:\n+**\tbdep\tz0\\.d, z1\\.d, z0\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bdep_u64_tied2, svuint64_t,\n+\t\tz0 = svbdep_u64 (z1, z0),\n+\t\tz0 = svbdep (z1, z0))\n+\n+/*\n+** bdep_u64_untied:\n+**\tbdep\tz0\\.d, z1\\.d, z2\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bdep_u64_untied, svuint64_t,\n+\t\tz0 = svbdep_u64 (z1, z2),\n+\t\tz0 = svbdep (z1, z2))\n+\n+/*\n+** bdep_x0_u64_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tbdep\tz0\\.d, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bdep_x0_u64_tied1, svuint64_t, uint64_t,\n+\t\t z0 = svbdep_n_u64 (z0, x0),\n+\t\t z0 = svbdep (z0, x0))\n+\n+/*\n+** bdep_x0_u64_untied:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tbdep\tz0\\.d, z1\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bdep_x0_u64_untied, svuint64_t, uint64_t,\n+\t\t z0 = svbdep_n_u64 (z1, x0),\n+\t\t z0 = svbdep (z1, x0))\n+\n+/*\n+** bdep_11_u64_tied1:\n+**\tmov\t(z[0-9]+\\.d), #11\n+**\tbdep\tz0\\.d, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bdep_11_u64_tied1, svuint64_t,\n+\t\tz0 = svbdep_n_u64 (z0, 11),\n+\t\tz0 = svbdep (z0, 11))\n+\n+/*\n+** bdep_11_u64_untied:\n+**\tmov\t(z[0-9]+\\.d), #11\n+**\tbdep\tz0\\.d, z1\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bdep_11_u64_untied, svuint64_t,\n+\t\tz0 = svbdep_n_u64 (z1, 11),\n+\t\tz0 = svbdep (z1, 11))"}, {"sha": "b420323b906d82ed3e0c5055b8cd5ca086c6858d", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/bdep_u8.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbdep_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbdep_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbdep_u8.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+#pragma GCC target \"+sve2-bitperm\"\n+\n+/*\n+** bdep_u8_tied1:\n+**\tbdep\tz0\\.b, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bdep_u8_tied1, svuint8_t,\n+\t\tz0 = svbdep_u8 (z0, z1),\n+\t\tz0 = svbdep (z0, z1))\n+\n+/*\n+** bdep_u8_tied2:\n+**\tbdep\tz0\\.b, z1\\.b, z0\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bdep_u8_tied2, svuint8_t,\n+\t\tz0 = svbdep_u8 (z1, z0),\n+\t\tz0 = svbdep (z1, z0))\n+\n+/*\n+** bdep_u8_untied:\n+**\tbdep\tz0\\.b, z1\\.b, z2\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bdep_u8_untied, svuint8_t,\n+\t\tz0 = svbdep_u8 (z1, z2),\n+\t\tz0 = svbdep (z1, z2))\n+\n+/*\n+** bdep_w0_u8_tied1:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tbdep\tz0\\.b, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bdep_w0_u8_tied1, svuint8_t, uint8_t,\n+\t\t z0 = svbdep_n_u8 (z0, x0),\n+\t\t z0 = svbdep (z0, x0))\n+\n+/*\n+** bdep_w0_u8_untied:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tbdep\tz0\\.b, z1\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bdep_w0_u8_untied, svuint8_t, uint8_t,\n+\t\t z0 = svbdep_n_u8 (z1, x0),\n+\t\t z0 = svbdep (z1, x0))\n+\n+/*\n+** bdep_11_u8_tied1:\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tbdep\tz0\\.b, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bdep_11_u8_tied1, svuint8_t,\n+\t\tz0 = svbdep_n_u8 (z0, 11),\n+\t\tz0 = svbdep (z0, 11))\n+\n+/*\n+** bdep_11_u8_untied:\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tbdep\tz0\\.b, z1\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bdep_11_u8_untied, svuint8_t,\n+\t\tz0 = svbdep_n_u8 (z1, 11),\n+\t\tz0 = svbdep (z1, 11))"}, {"sha": "50a647918e55da4aed08cac9c6c1773cda6d7b0b", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/bext_u16.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbext_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbext_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbext_u16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+#pragma GCC target \"+sve2-bitperm\"\n+\n+/*\n+** bext_u16_tied1:\n+**\tbext\tz0\\.h, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bext_u16_tied1, svuint16_t,\n+\t\tz0 = svbext_u16 (z0, z1),\n+\t\tz0 = svbext (z0, z1))\n+\n+/*\n+** bext_u16_tied2:\n+**\tbext\tz0\\.h, z1\\.h, z0\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bext_u16_tied2, svuint16_t,\n+\t\tz0 = svbext_u16 (z1, z0),\n+\t\tz0 = svbext (z1, z0))\n+\n+/*\n+** bext_u16_untied:\n+**\tbext\tz0\\.h, z1\\.h, z2\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bext_u16_untied, svuint16_t,\n+\t\tz0 = svbext_u16 (z1, z2),\n+\t\tz0 = svbext (z1, z2))\n+\n+/*\n+** bext_w0_u16_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tbext\tz0\\.h, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bext_w0_u16_tied1, svuint16_t, uint16_t,\n+\t\t z0 = svbext_n_u16 (z0, x0),\n+\t\t z0 = svbext (z0, x0))\n+\n+/*\n+** bext_w0_u16_untied:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tbext\tz0\\.h, z1\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bext_w0_u16_untied, svuint16_t, uint16_t,\n+\t\t z0 = svbext_n_u16 (z1, x0),\n+\t\t z0 = svbext (z1, x0))\n+\n+/*\n+** bext_11_u16_tied1:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tbext\tz0\\.h, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bext_11_u16_tied1, svuint16_t,\n+\t\tz0 = svbext_n_u16 (z0, 11),\n+\t\tz0 = svbext (z0, 11))\n+\n+/*\n+** bext_11_u16_untied:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tbext\tz0\\.h, z1\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bext_11_u16_untied, svuint16_t,\n+\t\tz0 = svbext_n_u16 (z1, 11),\n+\t\tz0 = svbext (z1, 11))"}, {"sha": "9f98b843c1a22aebef4bba59f787fe070e58982f", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/bext_u32.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbext_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbext_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbext_u32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+#pragma GCC target \"+sve2-bitperm\"\n+\n+/*\n+** bext_u32_tied1:\n+**\tbext\tz0\\.s, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bext_u32_tied1, svuint32_t,\n+\t\tz0 = svbext_u32 (z0, z1),\n+\t\tz0 = svbext (z0, z1))\n+\n+/*\n+** bext_u32_tied2:\n+**\tbext\tz0\\.s, z1\\.s, z0\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bext_u32_tied2, svuint32_t,\n+\t\tz0 = svbext_u32 (z1, z0),\n+\t\tz0 = svbext (z1, z0))\n+\n+/*\n+** bext_u32_untied:\n+**\tbext\tz0\\.s, z1\\.s, z2\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bext_u32_untied, svuint32_t,\n+\t\tz0 = svbext_u32 (z1, z2),\n+\t\tz0 = svbext (z1, z2))\n+\n+/*\n+** bext_w0_u32_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tbext\tz0\\.s, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bext_w0_u32_tied1, svuint32_t, uint32_t,\n+\t\t z0 = svbext_n_u32 (z0, x0),\n+\t\t z0 = svbext (z0, x0))\n+\n+/*\n+** bext_w0_u32_untied:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tbext\tz0\\.s, z1\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bext_w0_u32_untied, svuint32_t, uint32_t,\n+\t\t z0 = svbext_n_u32 (z1, x0),\n+\t\t z0 = svbext (z1, x0))\n+\n+/*\n+** bext_11_u32_tied1:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tbext\tz0\\.s, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bext_11_u32_tied1, svuint32_t,\n+\t\tz0 = svbext_n_u32 (z0, 11),\n+\t\tz0 = svbext (z0, 11))\n+\n+/*\n+** bext_11_u32_untied:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tbext\tz0\\.s, z1\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bext_11_u32_untied, svuint32_t,\n+\t\tz0 = svbext_n_u32 (z1, 11),\n+\t\tz0 = svbext (z1, 11))"}, {"sha": "9dbaec1b76292f463c1f8408462c6506233121df", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/bext_u64.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbext_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbext_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbext_u64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+#pragma GCC target \"+sve2-bitperm\"\n+\n+/*\n+** bext_u64_tied1:\n+**\tbext\tz0\\.d, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bext_u64_tied1, svuint64_t,\n+\t\tz0 = svbext_u64 (z0, z1),\n+\t\tz0 = svbext (z0, z1))\n+\n+/*\n+** bext_u64_tied2:\n+**\tbext\tz0\\.d, z1\\.d, z0\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bext_u64_tied2, svuint64_t,\n+\t\tz0 = svbext_u64 (z1, z0),\n+\t\tz0 = svbext (z1, z0))\n+\n+/*\n+** bext_u64_untied:\n+**\tbext\tz0\\.d, z1\\.d, z2\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bext_u64_untied, svuint64_t,\n+\t\tz0 = svbext_u64 (z1, z2),\n+\t\tz0 = svbext (z1, z2))\n+\n+/*\n+** bext_x0_u64_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tbext\tz0\\.d, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bext_x0_u64_tied1, svuint64_t, uint64_t,\n+\t\t z0 = svbext_n_u64 (z0, x0),\n+\t\t z0 = svbext (z0, x0))\n+\n+/*\n+** bext_x0_u64_untied:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tbext\tz0\\.d, z1\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bext_x0_u64_untied, svuint64_t, uint64_t,\n+\t\t z0 = svbext_n_u64 (z1, x0),\n+\t\t z0 = svbext (z1, x0))\n+\n+/*\n+** bext_11_u64_tied1:\n+**\tmov\t(z[0-9]+\\.d), #11\n+**\tbext\tz0\\.d, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bext_11_u64_tied1, svuint64_t,\n+\t\tz0 = svbext_n_u64 (z0, 11),\n+\t\tz0 = svbext (z0, 11))\n+\n+/*\n+** bext_11_u64_untied:\n+**\tmov\t(z[0-9]+\\.d), #11\n+**\tbext\tz0\\.d, z1\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bext_11_u64_untied, svuint64_t,\n+\t\tz0 = svbext_n_u64 (z1, 11),\n+\t\tz0 = svbext (z1, 11))"}, {"sha": "81ed5a463a08348083704283f3b1f35bd95638ae", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/bext_u8.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbext_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbext_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbext_u8.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+#pragma GCC target \"+sve2-bitperm\"\n+\n+/*\n+** bext_u8_tied1:\n+**\tbext\tz0\\.b, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bext_u8_tied1, svuint8_t,\n+\t\tz0 = svbext_u8 (z0, z1),\n+\t\tz0 = svbext (z0, z1))\n+\n+/*\n+** bext_u8_tied2:\n+**\tbext\tz0\\.b, z1\\.b, z0\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bext_u8_tied2, svuint8_t,\n+\t\tz0 = svbext_u8 (z1, z0),\n+\t\tz0 = svbext (z1, z0))\n+\n+/*\n+** bext_u8_untied:\n+**\tbext\tz0\\.b, z1\\.b, z2\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bext_u8_untied, svuint8_t,\n+\t\tz0 = svbext_u8 (z1, z2),\n+\t\tz0 = svbext (z1, z2))\n+\n+/*\n+** bext_w0_u8_tied1:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tbext\tz0\\.b, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bext_w0_u8_tied1, svuint8_t, uint8_t,\n+\t\t z0 = svbext_n_u8 (z0, x0),\n+\t\t z0 = svbext (z0, x0))\n+\n+/*\n+** bext_w0_u8_untied:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tbext\tz0\\.b, z1\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bext_w0_u8_untied, svuint8_t, uint8_t,\n+\t\t z0 = svbext_n_u8 (z1, x0),\n+\t\t z0 = svbext (z1, x0))\n+\n+/*\n+** bext_11_u8_tied1:\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tbext\tz0\\.b, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bext_11_u8_tied1, svuint8_t,\n+\t\tz0 = svbext_n_u8 (z0, 11),\n+\t\tz0 = svbext (z0, 11))\n+\n+/*\n+** bext_11_u8_untied:\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tbext\tz0\\.b, z1\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bext_11_u8_untied, svuint8_t,\n+\t\tz0 = svbext_n_u8 (z1, 11),\n+\t\tz0 = svbext (z1, 11))"}, {"sha": "70aeae3f329b0419fecab21e920ced7a75a54d52", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/bgrp_u16.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbgrp_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbgrp_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbgrp_u16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+#pragma GCC target \"+sve2-bitperm\"\n+\n+/*\n+** bgrp_u16_tied1:\n+**\tbgrp\tz0\\.h, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bgrp_u16_tied1, svuint16_t,\n+\t\tz0 = svbgrp_u16 (z0, z1),\n+\t\tz0 = svbgrp (z0, z1))\n+\n+/*\n+** bgrp_u16_tied2:\n+**\tbgrp\tz0\\.h, z1\\.h, z0\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bgrp_u16_tied2, svuint16_t,\n+\t\tz0 = svbgrp_u16 (z1, z0),\n+\t\tz0 = svbgrp (z1, z0))\n+\n+/*\n+** bgrp_u16_untied:\n+**\tbgrp\tz0\\.h, z1\\.h, z2\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bgrp_u16_untied, svuint16_t,\n+\t\tz0 = svbgrp_u16 (z1, z2),\n+\t\tz0 = svbgrp (z1, z2))\n+\n+/*\n+** bgrp_w0_u16_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tbgrp\tz0\\.h, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bgrp_w0_u16_tied1, svuint16_t, uint16_t,\n+\t\t z0 = svbgrp_n_u16 (z0, x0),\n+\t\t z0 = svbgrp (z0, x0))\n+\n+/*\n+** bgrp_w0_u16_untied:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tbgrp\tz0\\.h, z1\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bgrp_w0_u16_untied, svuint16_t, uint16_t,\n+\t\t z0 = svbgrp_n_u16 (z1, x0),\n+\t\t z0 = svbgrp (z1, x0))\n+\n+/*\n+** bgrp_11_u16_tied1:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tbgrp\tz0\\.h, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bgrp_11_u16_tied1, svuint16_t,\n+\t\tz0 = svbgrp_n_u16 (z0, 11),\n+\t\tz0 = svbgrp (z0, 11))\n+\n+/*\n+** bgrp_11_u16_untied:\n+**\tmov\t(z[0-9]+\\.h), #11\n+**\tbgrp\tz0\\.h, z1\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bgrp_11_u16_untied, svuint16_t,\n+\t\tz0 = svbgrp_n_u16 (z1, 11),\n+\t\tz0 = svbgrp (z1, 11))"}, {"sha": "6e19e38d897b66c3f0e8fac1979ec0c8376d4265", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/bgrp_u32.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbgrp_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbgrp_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbgrp_u32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+#pragma GCC target \"+sve2-bitperm\"\n+\n+/*\n+** bgrp_u32_tied1:\n+**\tbgrp\tz0\\.s, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bgrp_u32_tied1, svuint32_t,\n+\t\tz0 = svbgrp_u32 (z0, z1),\n+\t\tz0 = svbgrp (z0, z1))\n+\n+/*\n+** bgrp_u32_tied2:\n+**\tbgrp\tz0\\.s, z1\\.s, z0\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bgrp_u32_tied2, svuint32_t,\n+\t\tz0 = svbgrp_u32 (z1, z0),\n+\t\tz0 = svbgrp (z1, z0))\n+\n+/*\n+** bgrp_u32_untied:\n+**\tbgrp\tz0\\.s, z1\\.s, z2\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bgrp_u32_untied, svuint32_t,\n+\t\tz0 = svbgrp_u32 (z1, z2),\n+\t\tz0 = svbgrp (z1, z2))\n+\n+/*\n+** bgrp_w0_u32_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tbgrp\tz0\\.s, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bgrp_w0_u32_tied1, svuint32_t, uint32_t,\n+\t\t z0 = svbgrp_n_u32 (z0, x0),\n+\t\t z0 = svbgrp (z0, x0))\n+\n+/*\n+** bgrp_w0_u32_untied:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tbgrp\tz0\\.s, z1\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bgrp_w0_u32_untied, svuint32_t, uint32_t,\n+\t\t z0 = svbgrp_n_u32 (z1, x0),\n+\t\t z0 = svbgrp (z1, x0))\n+\n+/*\n+** bgrp_11_u32_tied1:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tbgrp\tz0\\.s, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bgrp_11_u32_tied1, svuint32_t,\n+\t\tz0 = svbgrp_n_u32 (z0, 11),\n+\t\tz0 = svbgrp (z0, 11))\n+\n+/*\n+** bgrp_11_u32_untied:\n+**\tmov\t(z[0-9]+\\.s), #11\n+**\tbgrp\tz0\\.s, z1\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bgrp_11_u32_untied, svuint32_t,\n+\t\tz0 = svbgrp_n_u32 (z1, 11),\n+\t\tz0 = svbgrp (z1, 11))"}, {"sha": "27fa40f47772b8a8447f314855a97cbd28af4d73", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/bgrp_u64.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbgrp_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbgrp_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbgrp_u64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+#pragma GCC target \"+sve2-bitperm\"\n+\n+/*\n+** bgrp_u64_tied1:\n+**\tbgrp\tz0\\.d, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bgrp_u64_tied1, svuint64_t,\n+\t\tz0 = svbgrp_u64 (z0, z1),\n+\t\tz0 = svbgrp (z0, z1))\n+\n+/*\n+** bgrp_u64_tied2:\n+**\tbgrp\tz0\\.d, z1\\.d, z0\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bgrp_u64_tied2, svuint64_t,\n+\t\tz0 = svbgrp_u64 (z1, z0),\n+\t\tz0 = svbgrp (z1, z0))\n+\n+/*\n+** bgrp_u64_untied:\n+**\tbgrp\tz0\\.d, z1\\.d, z2\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bgrp_u64_untied, svuint64_t,\n+\t\tz0 = svbgrp_u64 (z1, z2),\n+\t\tz0 = svbgrp (z1, z2))\n+\n+/*\n+** bgrp_x0_u64_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tbgrp\tz0\\.d, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bgrp_x0_u64_tied1, svuint64_t, uint64_t,\n+\t\t z0 = svbgrp_n_u64 (z0, x0),\n+\t\t z0 = svbgrp (z0, x0))\n+\n+/*\n+** bgrp_x0_u64_untied:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tbgrp\tz0\\.d, z1\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bgrp_x0_u64_untied, svuint64_t, uint64_t,\n+\t\t z0 = svbgrp_n_u64 (z1, x0),\n+\t\t z0 = svbgrp (z1, x0))\n+\n+/*\n+** bgrp_11_u64_tied1:\n+**\tmov\t(z[0-9]+\\.d), #11\n+**\tbgrp\tz0\\.d, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bgrp_11_u64_tied1, svuint64_t,\n+\t\tz0 = svbgrp_n_u64 (z0, 11),\n+\t\tz0 = svbgrp (z0, 11))\n+\n+/*\n+** bgrp_11_u64_untied:\n+**\tmov\t(z[0-9]+\\.d), #11\n+**\tbgrp\tz0\\.d, z1\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bgrp_11_u64_untied, svuint64_t,\n+\t\tz0 = svbgrp_n_u64 (z1, 11),\n+\t\tz0 = svbgrp (z1, 11))"}, {"sha": "b667e03e3a462a01c54092e1c99c8b7d31814817", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/bgrp_u8.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbgrp_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbgrp_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbgrp_u8.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+#pragma GCC target \"+sve2-bitperm\"\n+\n+/*\n+** bgrp_u8_tied1:\n+**\tbgrp\tz0\\.b, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bgrp_u8_tied1, svuint8_t,\n+\t\tz0 = svbgrp_u8 (z0, z1),\n+\t\tz0 = svbgrp (z0, z1))\n+\n+/*\n+** bgrp_u8_tied2:\n+**\tbgrp\tz0\\.b, z1\\.b, z0\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bgrp_u8_tied2, svuint8_t,\n+\t\tz0 = svbgrp_u8 (z1, z0),\n+\t\tz0 = svbgrp (z1, z0))\n+\n+/*\n+** bgrp_u8_untied:\n+**\tbgrp\tz0\\.b, z1\\.b, z2\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bgrp_u8_untied, svuint8_t,\n+\t\tz0 = svbgrp_u8 (z1, z2),\n+\t\tz0 = svbgrp (z1, z2))\n+\n+/*\n+** bgrp_w0_u8_tied1:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tbgrp\tz0\\.b, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bgrp_w0_u8_tied1, svuint8_t, uint8_t,\n+\t\t z0 = svbgrp_n_u8 (z0, x0),\n+\t\t z0 = svbgrp (z0, x0))\n+\n+/*\n+** bgrp_w0_u8_untied:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tbgrp\tz0\\.b, z1\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bgrp_w0_u8_untied, svuint8_t, uint8_t,\n+\t\t z0 = svbgrp_n_u8 (z1, x0),\n+\t\t z0 = svbgrp (z1, x0))\n+\n+/*\n+** bgrp_11_u8_tied1:\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tbgrp\tz0\\.b, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bgrp_11_u8_tied1, svuint8_t,\n+\t\tz0 = svbgrp_n_u8 (z0, 11),\n+\t\tz0 = svbgrp (z0, 11))\n+\n+/*\n+** bgrp_11_u8_untied:\n+**\tmov\t(z[0-9]+\\.b), #11\n+**\tbgrp\tz0\\.b, z1\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bgrp_11_u8_untied, svuint8_t,\n+\t\tz0 = svbgrp_n_u8 (z1, 11),\n+\t\tz0 = svbgrp (z1, 11))"}, {"sha": "efe4f03d4246ffd18f0f330953616d1bf1e34392", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/bsl1n_s16.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl1n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl1n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl1n_s16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,110 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** bsl1n_s16_tied1:\n+**\tbsl1n\tz0\\.d, z0\\.d, z1\\.d, z2\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bsl1n_s16_tied1, svint16_t,\n+\t\tz0 = svbsl1n_s16 (z0, z1, z2),\n+\t\tz0 = svbsl1n (z0, z1, z2))\n+\n+/*\n+** bsl1n_s16_tied2:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbsl1n\tz0\\.d, z0\\.d, \\1, z2\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bsl1n_s16_tied2, svint16_t,\n+\t\tz0 = svbsl1n_s16 (z1, z0, z2),\n+\t\tz0 = svbsl1n (z1, z0, z2))\n+\n+/*\n+** bsl1n_s16_tied3:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbsl1n\tz0\\.d, z0\\.d, z2\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bsl1n_s16_tied3, svint16_t,\n+\t\tz0 = svbsl1n_s16 (z1, z2, z0),\n+\t\tz0 = svbsl1n (z1, z2, z0))\n+\n+/*\n+** bsl1n_s16_untied:\n+**\tmovprfx\tz0, z1\n+**\tbsl1n\tz0\\.d, z0\\.d, z2\\.d, z3\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bsl1n_s16_untied, svint16_t,\n+\t\tz0 = svbsl1n_s16 (z1, z2, z3),\n+\t\tz0 = svbsl1n (z1, z2, z3))\n+\n+/*\n+** bsl1n_w0_s16_tied1:\n+**\tmov\t(z[0-9]+)\\.h, w0\n+**\tbsl1n\tz0\\.d, z0\\.d, z1\\.d, \\1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bsl1n_w0_s16_tied1, svint16_t, int16_t,\n+\t\t z0 = svbsl1n_n_s16 (z0, z1, x0),\n+\t\t z0 = svbsl1n (z0, z1, x0))\n+\n+/*\n+** bsl1n_w0_s16_tied2:\n+**\tmov\t(z[0-9]+)\\.h, w0\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbsl1n\tz0\\.d, z0\\.d, \\2, \\1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bsl1n_w0_s16_tied2, svint16_t, int16_t,\n+\t\t z0 = svbsl1n_n_s16 (z1, z0, x0),\n+\t\t z0 = svbsl1n (z1, z0, x0))\n+\n+/*\n+** bsl1n_w0_s16_untied:\n+**\tmov\t(z[0-9]+)\\.h, w0\n+**\tmovprfx\tz0, z1\n+**\tbsl1n\tz0\\.d, z0\\.d, z2\\.d, \\1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bsl1n_w0_s16_untied, svint16_t, int16_t,\n+\t\t z0 = svbsl1n_n_s16 (z1, z2, x0),\n+\t\t z0 = svbsl1n (z1, z2, x0))\n+\n+/*\n+** bsl1n_11_s16_tied1:\n+**\tmov\t(z[0-9]+)\\.h, #11\n+**\tbsl1n\tz0\\.d, z0\\.d, z1\\.d, \\1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bsl1n_11_s16_tied1, svint16_t,\n+\t\tz0 = svbsl1n_n_s16 (z0, z1, 11),\n+\t\tz0 = svbsl1n (z0, z1, 11))\n+\n+/*\n+** bsl1n_11_s16_tied2:\n+**\tmov\t(z[0-9]+)\\.h, #11\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbsl1n\tz0\\.d, z0\\.d, \\2, \\1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bsl1n_11_s16_tied2, svint16_t,\n+\t\tz0 = svbsl1n_n_s16 (z1, z0, 11),\n+\t\tz0 = svbsl1n (z1, z0, 11))\n+\n+/*\n+** bsl1n_11_s16_untied:\n+**\tmov\t(z[0-9]+)\\.h, #11\n+**\tmovprfx\tz0, z1\n+**\tbsl1n\tz0\\.d, z0\\.d, z2\\.d, \\1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bsl1n_11_s16_untied, svint16_t,\n+\t\tz0 = svbsl1n_n_s16 (z1, z2, 11),\n+\t\tz0 = svbsl1n (z1, z2, 11))"}, {"sha": "84a5d019501d2e0e3d1672ec641e521d58783e51", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/bsl1n_s32.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl1n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl1n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl1n_s32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,110 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** bsl1n_s32_tied1:\n+**\tbsl1n\tz0\\.d, z0\\.d, z1\\.d, z2\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bsl1n_s32_tied1, svint32_t,\n+\t\tz0 = svbsl1n_s32 (z0, z1, z2),\n+\t\tz0 = svbsl1n (z0, z1, z2))\n+\n+/*\n+** bsl1n_s32_tied2:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbsl1n\tz0\\.d, z0\\.d, \\1, z2\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bsl1n_s32_tied2, svint32_t,\n+\t\tz0 = svbsl1n_s32 (z1, z0, z2),\n+\t\tz0 = svbsl1n (z1, z0, z2))\n+\n+/*\n+** bsl1n_s32_tied3:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbsl1n\tz0\\.d, z0\\.d, z2\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bsl1n_s32_tied3, svint32_t,\n+\t\tz0 = svbsl1n_s32 (z1, z2, z0),\n+\t\tz0 = svbsl1n (z1, z2, z0))\n+\n+/*\n+** bsl1n_s32_untied:\n+**\tmovprfx\tz0, z1\n+**\tbsl1n\tz0\\.d, z0\\.d, z2\\.d, z3\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bsl1n_s32_untied, svint32_t,\n+\t\tz0 = svbsl1n_s32 (z1, z2, z3),\n+\t\tz0 = svbsl1n (z1, z2, z3))\n+\n+/*\n+** bsl1n_w0_s32_tied1:\n+**\tmov\t(z[0-9]+)\\.s, w0\n+**\tbsl1n\tz0\\.d, z0\\.d, z1\\.d, \\1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bsl1n_w0_s32_tied1, svint32_t, int32_t,\n+\t\t z0 = svbsl1n_n_s32 (z0, z1, x0),\n+\t\t z0 = svbsl1n (z0, z1, x0))\n+\n+/*\n+** bsl1n_w0_s32_tied2:\n+**\tmov\t(z[0-9]+)\\.s, w0\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbsl1n\tz0\\.d, z0\\.d, \\2, \\1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bsl1n_w0_s32_tied2, svint32_t, int32_t,\n+\t\t z0 = svbsl1n_n_s32 (z1, z0, x0),\n+\t\t z0 = svbsl1n (z1, z0, x0))\n+\n+/*\n+** bsl1n_w0_s32_untied:\n+**\tmov\t(z[0-9]+)\\.s, w0\n+**\tmovprfx\tz0, z1\n+**\tbsl1n\tz0\\.d, z0\\.d, z2\\.d, \\1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bsl1n_w0_s32_untied, svint32_t, int32_t,\n+\t\t z0 = svbsl1n_n_s32 (z1, z2, x0),\n+\t\t z0 = svbsl1n (z1, z2, x0))\n+\n+/*\n+** bsl1n_11_s32_tied1:\n+**\tmov\t(z[0-9]+)\\.s, #11\n+**\tbsl1n\tz0\\.d, z0\\.d, z1\\.d, \\1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bsl1n_11_s32_tied1, svint32_t,\n+\t\tz0 = svbsl1n_n_s32 (z0, z1, 11),\n+\t\tz0 = svbsl1n (z0, z1, 11))\n+\n+/*\n+** bsl1n_11_s32_tied2:\n+**\tmov\t(z[0-9]+)\\.s, #11\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbsl1n\tz0\\.d, z0\\.d, \\2, \\1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bsl1n_11_s32_tied2, svint32_t,\n+\t\tz0 = svbsl1n_n_s32 (z1, z0, 11),\n+\t\tz0 = svbsl1n (z1, z0, 11))\n+\n+/*\n+** bsl1n_11_s32_untied:\n+**\tmov\t(z[0-9]+)\\.s, #11\n+**\tmovprfx\tz0, z1\n+**\tbsl1n\tz0\\.d, z0\\.d, z2\\.d, \\1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bsl1n_11_s32_untied, svint32_t,\n+\t\tz0 = svbsl1n_n_s32 (z1, z2, 11),\n+\t\tz0 = svbsl1n (z1, z2, 11))"}, {"sha": "aed7b052ab5f44084c337f7b607e8a61f0ea4e71", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/bsl1n_s64.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl1n_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl1n_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl1n_s64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,110 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** bsl1n_s64_tied1:\n+**\tbsl1n\tz0\\.d, z0\\.d, z1\\.d, z2\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bsl1n_s64_tied1, svint64_t,\n+\t\tz0 = svbsl1n_s64 (z0, z1, z2),\n+\t\tz0 = svbsl1n (z0, z1, z2))\n+\n+/*\n+** bsl1n_s64_tied2:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbsl1n\tz0\\.d, z0\\.d, \\1, z2\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bsl1n_s64_tied2, svint64_t,\n+\t\tz0 = svbsl1n_s64 (z1, z0, z2),\n+\t\tz0 = svbsl1n (z1, z0, z2))\n+\n+/*\n+** bsl1n_s64_tied3:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbsl1n\tz0\\.d, z0\\.d, z2\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bsl1n_s64_tied3, svint64_t,\n+\t\tz0 = svbsl1n_s64 (z1, z2, z0),\n+\t\tz0 = svbsl1n (z1, z2, z0))\n+\n+/*\n+** bsl1n_s64_untied:\n+**\tmovprfx\tz0, z1\n+**\tbsl1n\tz0\\.d, z0\\.d, z2\\.d, z3\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bsl1n_s64_untied, svint64_t,\n+\t\tz0 = svbsl1n_s64 (z1, z2, z3),\n+\t\tz0 = svbsl1n (z1, z2, z3))\n+\n+/*\n+** bsl1n_x0_s64_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tbsl1n\tz0\\.d, z0\\.d, z1\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bsl1n_x0_s64_tied1, svint64_t, int64_t,\n+\t\t z0 = svbsl1n_n_s64 (z0, z1, x0),\n+\t\t z0 = svbsl1n (z0, z1, x0))\n+\n+/*\n+** bsl1n_x0_s64_tied2:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbsl1n\tz0\\.d, z0\\.d, \\2, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bsl1n_x0_s64_tied2, svint64_t, int64_t,\n+\t\t z0 = svbsl1n_n_s64 (z1, z0, x0),\n+\t\t z0 = svbsl1n (z1, z0, x0))\n+\n+/*\n+** bsl1n_x0_s64_untied:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tmovprfx\tz0, z1\n+**\tbsl1n\tz0\\.d, z0\\.d, z2\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bsl1n_x0_s64_untied, svint64_t, int64_t,\n+\t\t z0 = svbsl1n_n_s64 (z1, z2, x0),\n+\t\t z0 = svbsl1n (z1, z2, x0))\n+\n+/*\n+** bsl1n_11_s64_tied1:\n+**\tmov\t(z[0-9]+\\.d), #11\n+**\tbsl1n\tz0\\.d, z0\\.d, z1\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bsl1n_11_s64_tied1, svint64_t,\n+\t\tz0 = svbsl1n_n_s64 (z0, z1, 11),\n+\t\tz0 = svbsl1n (z0, z1, 11))\n+\n+/*\n+** bsl1n_11_s64_tied2:\n+**\tmov\t(z[0-9]+\\.d), #11\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbsl1n\tz0\\.d, z0\\.d, \\2, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bsl1n_11_s64_tied2, svint64_t,\n+\t\tz0 = svbsl1n_n_s64 (z1, z0, 11),\n+\t\tz0 = svbsl1n (z1, z0, 11))\n+\n+/*\n+** bsl1n_11_s64_untied:\n+**\tmov\t(z[0-9]+\\.d), #11\n+**\tmovprfx\tz0, z1\n+**\tbsl1n\tz0\\.d, z0\\.d, z2\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bsl1n_11_s64_untied, svint64_t,\n+\t\tz0 = svbsl1n_n_s64 (z1, z2, 11),\n+\t\tz0 = svbsl1n (z1, z2, 11))"}, {"sha": "998186c567db41bb33d7d4884ee47f25f51ea0cb", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/bsl1n_s8.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl1n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl1n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl1n_s8.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc", "patch": "@@ -0,0 +1,110 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** bsl1n_s8_tied1:\n+**\tbsl1n\tz0\\.d, z0\\.d, z1\\.d, z2\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bsl1n_s8_tied1, svint8_t,\n+\t\tz0 = svbsl1n_s8 (z0, z1, z2),\n+\t\tz0 = svbsl1n (z0, z1, z2))\n+\n+/*\n+** bsl1n_s8_tied2:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbsl1n\tz0\\.d, z0\\.d, \\1, z2\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bsl1n_s8_tied2, svint8_t,\n+\t\tz0 = svbsl1n_s8 (z1, z0, z2),\n+\t\tz0 = svbsl1n (z1, z0, z2))\n+\n+/*\n+** bsl1n_s8_tied3:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbsl1n\tz0\\.d, z0\\.d, z2\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bsl1n_s8_tied3, svint8_t,\n+\t\tz0 = svbsl1n_s8 (z1, z2, z0),\n+\t\tz0 = svbsl1n (z1, z2, z0))\n+\n+/*\n+** bsl1n_s8_untied:\n+**\tmovprfx\tz0, z1\n+**\tbsl1n\tz0\\.d, z0\\.d, z2\\.d, z3\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bsl1n_s8_untied, svint8_t,\n+\t\tz0 = svbsl1n_s8 (z1, z2, z3),\n+\t\tz0 = svbsl1n (z1, z2, z3))\n+\n+/*\n+** bsl1n_w0_s8_tied1:\n+**\tmov\t(z[0-9]+)\\.b, w0\n+**\tbsl1n\tz0\\.d, z0\\.d, z1\\.d, \\1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bsl1n_w0_s8_tied1, svint8_t, int8_t,\n+\t\t z0 = svbsl1n_n_s8 (z0, z1, x0),\n+\t\t z0 = svbsl1n (z0, z1, x0))\n+\n+/*\n+** bsl1n_w0_s8_tied2:\n+**\tmov\t(z[0-9]+)\\.b, w0\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbsl1n\tz0\\.d, z0\\.d, \\2, \\1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bsl1n_w0_s8_tied2, svint8_t, int8_t,\n+\t\t z0 = svbsl1n_n_s8 (z1, z0, x0),\n+\t\t z0 = svbsl1n (z1, z0, x0))\n+\n+/*\n+** bsl1n_w0_s8_untied:\n+**\tmov\t(z[0-9]+)\\.b, w0\n+**\tmovprfx\tz0, z1\n+**\tbsl1n\tz0\\.d, z0\\.d, z2\\.d, \\1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bsl1n_w0_s8_untied, svint8_t, int8_t,\n+\t\t z0 = svbsl1n_n_s8 (z1, z2, x0),\n+\t\t z0 = svbsl1n (z1, z2, x0))\n+\n+/*\n+** bsl1n_11_s8_tied1:\n+**\tmov\t(z[0-9]+)\\.b, #11\n+**\tbsl1n\tz0\\.d, z0\\.d, z1\\.d, \\1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bsl1n_11_s8_tied1, svint8_t,\n+\t\tz0 = svbsl1n_n_s8 (z0, z1, 11),\n+\t\tz0 = svbsl1n (z0, z1, 11))\n+\n+/*\n+** bsl1n_11_s8_tied2:\n+**\tmov\t(z[0-9]+)\\.b, #11\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbsl1n\tz0\\.d, z0\\.d, \\2, \\1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bsl1n_11_s8_tied2, svint8_t,\n+\t\tz0 = svbsl1n_n_s8 (z1, z0, 11),\n+\t\tz0 = svbsl1n (z1, z0, 11))\n+\n+/*\n+** bsl1n_11_s8_untied:\n+**\tmov\t(z[0-9]+)\\.b, #11\n+**\tmovprfx\tz0, z1\n+**\tbsl1n\tz0\\.d, z0\\.d, z2\\.d, \\1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bsl1n_11_s8_untied, svint8_t,\n+\t\tz0 = svbsl1n_n_s8 (z1, z2, 11),\n+\t\tz0 = svbsl1n (z1, z2, 11))"}, {"sha": "2e66c59b53e683e235116da3f60d4d4f74f50e3a", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/bsl1n_u16.c", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl1n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl1n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl1n_u16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "ef214bcb5070e62a7975e33aa44dc3d850ce531e", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/bsl1n_u32.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl1n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl1n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl1n_u32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "7cf271da211c0603b643b64085fd3b292ba40bd7", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/bsl1n_u64.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl1n_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl1n_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl1n_u64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "74a79cbf63a6f6f563421fabaac248b4bec6e1f2", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/bsl1n_u8.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl1n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl1n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl1n_u8.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "01fd135cb6e518500c6d32e3dfd80708168f7528", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/bsl2n_s16.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl2n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl2n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl2n_s16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "f90d14281788f44f319fff4fccd7a57b8bd96fd0", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/bsl2n_s32.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl2n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl2n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl2n_s32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "ca971ed75aa24af46d13c65ebe50329f1afea10e", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/bsl2n_s64.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl2n_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl2n_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl2n_s64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "0f101312af10e10108446fa599d93af69578f517", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/bsl2n_s8.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl2n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl2n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl2n_s8.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "9e827aedb9357c63e51ab72082e7c3e5fdac2535", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/bsl2n_u16.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl2n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl2n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl2n_u16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "786325046eedbe1def64de30dee066cd3ac0b038", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/bsl2n_u32.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl2n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl2n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl2n_u32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "31cbec9bfe73f7cb4368bf4fec8a81ede7f9402b", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/bsl2n_u64.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl2n_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl2n_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl2n_u64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "ee745cdaba3d68c3180a3fb01952d7b952beb2ad", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/bsl2n_u8.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl2n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl2n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl2n_u8.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "5754616857cd7170d0af33767156df6c7e3944d1", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/bsl_s16.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl_s16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "78477789656f938bfc2486fcf5b4777e1247a2be", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/bsl_s32.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl_s32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "6bd4b170dc5b1e373065b9cc49d654298f478c48", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/bsl_s64.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl_s64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "49a30ef41c21f357f93451cca56a8465591dc18e", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/bsl_s8.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl_s8.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "f73e31fbcdc65a6ac621824c7d11635917a2126a", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/bsl_u16.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl_u16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "0d70529489e1014dd4d44e4f25e8feddf0953bd1", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/bsl_u32.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl_u32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "41882ab594c26f998f5ee00e2a323aea2d5600ea", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/bsl_u64.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl_u64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "db362821a11f99412cf208f1a8f245db6afa6029", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/bsl_u8.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fbsl_u8.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "7632ceec3970a5298b4e14d32df31c0be9397ad6", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/cadd_s16.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcadd_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcadd_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcadd_s16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "0288680de86c9b0b23e94ae5cc4d3e1bd5976ef9", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/cadd_s32.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcadd_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcadd_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcadd_s32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "5bea27fefdba56b0c56dce46b5e36d32fdbc7215", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/cadd_s64.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcadd_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcadd_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcadd_s64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "cf42766f4ea21fc6f30cdac3f8122f0904515199", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/cadd_s8.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcadd_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcadd_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcadd_s8.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "882b88f9bf6608a9917cf9ea68ad38f58196bfb3", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/cadd_u16.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcadd_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcadd_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcadd_u16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "4c460ff0ad3333795e0b39871049861eb222c116", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/cadd_u32.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcadd_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcadd_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcadd_u32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "0ca98c253be40c3a02cf815b4c42c4881a6d5cb4", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/cadd_u64.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcadd_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcadd_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcadd_u64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "59908d4385b21664171c1a51ed578c1c2d4f523e", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/cadd_u8.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcadd_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcadd_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcadd_u8.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "ebd114c52f5ee774b5f33ca8252888d7f404870f", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/cdot_lane_s32.c", "status": "added", "additions": 198, "deletions": 0, "changes": 198, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcdot_lane_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcdot_lane_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcdot_lane_s32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "12a9f587b9c14997d95b80e43b0425c50008c6f5", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/cdot_lane_s64.c", "status": "added", "additions": 188, "deletions": 0, "changes": 188, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcdot_lane_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcdot_lane_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcdot_lane_s64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "c8c0c7afc171380f0504cafaeb3813878b9cb791", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/cdot_s32.c", "status": "added", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcdot_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcdot_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcdot_s32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "cf1ddcd6658200f9b57100ee873d64eab0f927b3", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/cdot_s64.c", "status": "added", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcdot_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcdot_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcdot_s64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "429f91600ffe56c1547036358f93802d66de0490", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/cmla_lane_s16.c", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcmla_lane_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcmla_lane_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcmla_lane_s16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "ed5894065c2a4672cec26bd806b2ed32d2d01aca", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/cmla_lane_s32.c", "status": "added", "additions": 198, "deletions": 0, "changes": 198, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcmla_lane_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcmla_lane_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcmla_lane_s32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "43c405b9711300a81f08dd0a652567c4fa3c0967", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/cmla_lane_u16.c", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcmla_lane_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcmla_lane_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcmla_lane_u16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "d5d52ebffa363b185dd8b2bbd845ef9d0279c2ad", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/cmla_lane_u32.c", "status": "added", "additions": 198, "deletions": 0, "changes": 198, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcmla_lane_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcmla_lane_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcmla_lane_u32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "dc2aed96dccb91004dc3800b64e9e82fd1ecf168", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/cmla_s16.c", "status": "added", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcmla_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcmla_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcmla_s16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "13897275643e00916fc98e27c0e99d04ef55e566", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/cmla_s32.c", "status": "added", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcmla_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcmla_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcmla_s32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "2e28fc34b1f3b73e3c1048da9503116210dae818", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/cmla_s64.c", "status": "added", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcmla_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcmla_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcmla_s64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "31506328c6a075db1c7cb89ee8fbd4f27ff4776d", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/cmla_s8.c", "status": "added", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcmla_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcmla_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcmla_s8.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "9a3b1d26046dc2ed77ce5aeba247158e5b9aebea", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/cmla_u16.c", "status": "added", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcmla_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcmla_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcmla_u16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "eadcd3b6fdd2ae79650937d8545b52ea8341f18e", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/cmla_u32.c", "status": "added", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcmla_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcmla_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcmla_u32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "ccf0591d4e30309a85bb16b8d110f7811e4dc582", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/cmla_u64.c", "status": "added", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcmla_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcmla_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcmla_u64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "be9231184cb3d9fa296bd45edb64264d2bdc0310", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/cmla_u8.c", "status": "added", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcmla_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcmla_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcmla_u8.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "911defafd7a03cc3fbbee7bd8951fa02d8acd8b0", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/cvtlt_f32.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcvtlt_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcvtlt_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcvtlt_f32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "c34947be2b4b6bf9c1cbe202181c2480889bc0d1", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/cvtlt_f64.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcvtlt_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcvtlt_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcvtlt_f64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "a7960e30d0380589e7381b85aa2cac28a064cb4e", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/cvtnt_f16.c", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcvtnt_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcvtnt_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcvtnt_f16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "44fb30ff7cd0aae148d6237784564936eb3311f0", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/cvtnt_f32.c", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcvtnt_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcvtnt_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcvtnt_f32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "21724c833dca0d74f3aedf148cbc849006b4f708", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/cvtx_f32.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcvtx_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcvtx_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcvtx_f32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "38aa38e99caab917720bc882e90cfbb75be66eb5", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/cvtxnt_f32.c", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcvtxnt_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcvtxnt_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fcvtxnt_f32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "48e99a8721c350c11631933915a28175f0f1631e", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/eor3_s16.c", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feor3_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feor3_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feor3_s16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "1a62f9dc5e92e3c96d6c657e792beb4beb86c17b", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/eor3_s32.c", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feor3_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feor3_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feor3_s32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "36b57bf05216b3fc76fcfc39738b6ce1e59c49cf", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/eor3_s64.c", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feor3_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feor3_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feor3_s64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "e9dc1491fe579db567c9537e1f33cee5200dfb0c", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/eor3_s8.c", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feor3_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feor3_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feor3_s8.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "95b4097d784db46cc392f6a19f435ed85ab5965a", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/eor3_u16.c", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feor3_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feor3_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feor3_u16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "e9665bc07b7cb77743b4928c312ed6a03ca45394", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/eor3_u32.c", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feor3_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feor3_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feor3_u32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "6de1ee06e6dd44bde304f0e253715853fce618ee", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/eor3_u64.c", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feor3_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feor3_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feor3_u64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "ac55a27d95e49ba50145b2033891a095564ec412", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/eor3_u8.c", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feor3_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feor3_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feor3_u8.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "24dbab35827d31a53004b24e7893a0cc6ac38f38", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/eorbt_s16.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feorbt_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feorbt_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feorbt_s16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "872f4026aca93af7c5bc65905adc43a868e23b62", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/eorbt_s32.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feorbt_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feorbt_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feorbt_s32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "662085279743e5dd7192882359cb401ff11a735e", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/eorbt_s64.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feorbt_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feorbt_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feorbt_s64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "361c3275782121f5b3c2903263405e136f8495f1", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/eorbt_s8.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feorbt_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feorbt_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feorbt_s8.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "26e806eca64d9c10bd34596d55ecac2a5f3f1929", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/eorbt_u16.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feorbt_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feorbt_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feorbt_u16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "edf7a0047bbfed6da2e502172e240fe229fbc948", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/eorbt_u32.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feorbt_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feorbt_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feorbt_u32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "6112e91310483ceca15517547348034ea8ba9c7c", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/eorbt_u64.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feorbt_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feorbt_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feorbt_u64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "9040424aa6cf257a9dd8188250cc9eb4b9c32847", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/eorbt_u8.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feorbt_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feorbt_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feorbt_u8.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "c85c1a6e3bb28d9767ebbc8e6b136cd4d35a944e", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/eortb_s16.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feortb_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feortb_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feortb_s16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "8afb0bf38ce7a4d09d3955ee8add795156523f90", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/eortb_s32.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feortb_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feortb_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feortb_s32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "da58d70d1ca5897cec55826483ce6dd7d5155f5e", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/eortb_s64.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feortb_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feortb_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feortb_s64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "37646034d94eaa5f51ca70019746140979fa0867", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/eortb_s8.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feortb_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feortb_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feortb_s8.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "89eb171f97ea8d8a5fe4b5026a77159276fe9ed7", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/eortb_u16.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feortb_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feortb_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feortb_u16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "39c7df61246bad65d690e87428d83bb34e9d9f5d", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/eortb_u32.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feortb_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feortb_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feortb_u32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "33a06490c78999febac1bae9d8fc2efa04285f3c", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/eortb_u64.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feortb_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feortb_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feortb_u64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "952d2022757ca13904459905957e6ea3e78d8c75", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/eortb_u8.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feortb_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feortb_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Feortb_u8.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "dbc239d5c811d74dc29f234f13b10c31058c367a", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/hadd_s16.c", "status": "added", "additions": 237, "deletions": 0, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhadd_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhadd_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhadd_s16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "97ac80db6ec951c6f010af3c8e1881fa5981ca49", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/hadd_s32.c", "status": "added", "additions": 237, "deletions": 0, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhadd_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhadd_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhadd_s32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "b911491b06e7b3f62b16a574f245974aded280be", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/hadd_s64.c", "status": "added", "additions": 237, "deletions": 0, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhadd_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhadd_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhadd_s64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "6d12a3cee836e724851498f3b4d450b61bf35bd5", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/hadd_s8.c", "status": "added", "additions": 237, "deletions": 0, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhadd_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhadd_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhadd_s8.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "ff8bb9df85072e13abcb78371cd82972f1a3cf37", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/hadd_u16.c", "status": "added", "additions": 237, "deletions": 0, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhadd_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhadd_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhadd_u16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "ddc5477b2fe5ab605ab3f430f41384c9ddbf537b", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/hadd_u32.c", "status": "added", "additions": 237, "deletions": 0, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhadd_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhadd_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhadd_u32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "6b07ae3fea8ea8b2946ba6a49f72051711af8b4f", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/hadd_u64.c", "status": "added", "additions": 237, "deletions": 0, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhadd_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhadd_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhadd_u64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "eb613358b2191198247972bc8fbe043c009dfffc", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/hadd_u8.c", "status": "added", "additions": 237, "deletions": 0, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhadd_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhadd_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhadd_u8.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "7bf783a7c18d8c7f83f5618bd112ca7f9a5bfbf0", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/histcnt_s32.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhistcnt_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhistcnt_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhistcnt_s32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "001f5f0f1874ca61ab341bb1cae8b8b580424945", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/histcnt_s64.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhistcnt_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhistcnt_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhistcnt_s64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "d93091adc55708c9e41b726d30328dd34eee834c", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/histcnt_u32.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhistcnt_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhistcnt_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhistcnt_u32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "3b889802395cc32499a32fa6d1fb184c9ce61578", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/histcnt_u64.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhistcnt_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhistcnt_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhistcnt_u64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "380ccdf85a51b7f9581e6f18b202b63c7bfa31ea", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/histseg_s8.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhistseg_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhistseg_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhistseg_s8.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "f43292f0ccd7e37ac38d0863c3af411490baf8e7", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/histseg_u8.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhistseg_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhistseg_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhistseg_u8.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "2cc9afd68b95d48f5288c9e75634f1cefbcb8861", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/hsub_s16.c", "status": "added", "additions": 237, "deletions": 0, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsub_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsub_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsub_s16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "9d807a6676ee744ab32f875b88f7d1df5d5b1bf0", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/hsub_s32.c", "status": "added", "additions": 237, "deletions": 0, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsub_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsub_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsub_s32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "5c6577b44209c70ca140a9e6f324da5df5b7e579", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/hsub_s64.c", "status": "added", "additions": 237, "deletions": 0, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsub_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsub_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsub_s64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "cdd37a26db7fc94cfeab7f7c3e4dccc5eef7213e", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/hsub_s8.c", "status": "added", "additions": 237, "deletions": 0, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsub_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsub_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsub_s8.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "f80666c113fb89c43357587030a439e6f5f836a0", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/hsub_u16.c", "status": "added", "additions": 237, "deletions": 0, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsub_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsub_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsub_u16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "b67c4e09e48f115c374f53e81208a9059b94ac20", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/hsub_u32.c", "status": "added", "additions": 237, "deletions": 0, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsub_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsub_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsub_u32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "c79c46e20043746a1874f4d33e0848c0942c1a2d", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/hsub_u64.c", "status": "added", "additions": 237, "deletions": 0, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsub_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsub_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsub_u64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "a801132124ba1c15e700c60bb2a89735c417e36f", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/hsub_u8.c", "status": "added", "additions": 237, "deletions": 0, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsub_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsub_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsub_u8.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "af1bfdda68c44d28821edf9ad23cdb8da6a733f1", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/hsubr_s16.c", "status": "added", "additions": 237, "deletions": 0, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsubr_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsubr_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsubr_s16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "029a0c110041f17f06cc170eaeba36a65bd329d9", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/hsubr_s32.c", "status": "added", "additions": 237, "deletions": 0, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsubr_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsubr_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsubr_s32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "7bddc71f82dbec7f9aa23c167b719b3b3f7e61cd", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/hsubr_s64.c", "status": "added", "additions": 237, "deletions": 0, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsubr_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsubr_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsubr_s64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "9e3de2360c9ccc9bcfb697b7f470953e8c51fdc5", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/hsubr_s8.c", "status": "added", "additions": 237, "deletions": 0, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsubr_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsubr_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsubr_s8.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "d1095de5eeaeb6ebc90410c732870c60ab948df5", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/hsubr_u16.c", "status": "added", "additions": 237, "deletions": 0, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsubr_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsubr_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsubr_u16.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "dab1ce8ccb9182eebb63eb9fc4a0f295d745a50e", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/hsubr_u32.c", "status": "added", "additions": 237, "deletions": 0, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsubr_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsubr_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsubr_u32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "b9243b58ff4e3da0bcb41dbf6e9cf829e13e2542", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/hsubr_u64.c", "status": "added", "additions": 237, "deletions": 0, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsubr_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsubr_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsubr_u64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "8c4f0a70cd3a7d78a34b5a9c63415f4936388387", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/hsubr_u8.c", "status": "added", "additions": 237, "deletions": 0, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsubr_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsubr_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fhsubr_u8.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "c6acdbf4d4d9d241a2776c49f39beab87d2fcc81", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/ldnt1_gather_f32.c", "status": "added", "additions": 195, "deletions": 0, "changes": 195, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fldnt1_gather_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fldnt1_gather_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fldnt1_gather_f32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "ff93c44b5e6d224fff45f179d4d6684939469cfb", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/ldnt1_gather_f64.c", "status": "added", "additions": 322, "deletions": 0, "changes": 322, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fldnt1_gather_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fldnt1_gather_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fldnt1_gather_f64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "153f5c2ba1ef1d1e09a7fb7ea4bf735f97a78f89", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/ldnt1_gather_s32.c", "status": "added", "additions": 195, "deletions": 0, "changes": 195, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fldnt1_gather_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fldnt1_gather_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fldnt1_gather_s32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "778cdbf95661a1b8852c44a8d481b2b9622e199e", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/ldnt1_gather_s64.c", "status": "added", "additions": 322, "deletions": 0, "changes": 322, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fldnt1_gather_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fldnt1_gather_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fldnt1_gather_s64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "48bc9b9b0a0c88e834b8397d3b139c517c30770a", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/ldnt1_gather_u32.c", "status": "added", "additions": 195, "deletions": 0, "changes": 195, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fldnt1_gather_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fldnt1_gather_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fldnt1_gather_u32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "52e944b9599e9beb8dc81afdde4d186b6596f67e", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/ldnt1_gather_u64.c", "status": "added", "additions": 322, "deletions": 0, "changes": 322, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fldnt1_gather_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fldnt1_gather_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fldnt1_gather_u64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "0d77cb9c84ff81b1cb438b6d7108abeda915f9bb", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/ldnt1sb_gather_s32.c", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fldnt1sb_gather_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fldnt1sb_gather_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fldnt1sb_gather_s32.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}, {"sha": "2f86ebd4e85f7b634c62b085e16b3a73988c27de", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/ldnt1sb_gather_s64.c", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fldnt1sb_gather_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a09a9483825233f16e5b26bb0ffee76752339fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fldnt1sb_gather_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fldnt1sb_gather_s64.c?ref=0a09a9483825233f16e5b26bb0ffee76752339fc"}]}