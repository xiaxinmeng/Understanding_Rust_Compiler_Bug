{"sha": "431cfac1ffb50746d86afbf486f84180d39c54e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDMxY2ZhYzFmZmI1MDc0NmQ4NmFmYmY0ODZmODQxODBkMzljNTRlOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-10-17T11:17:27Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-10-17T11:17:27Z"}, "message": "utils.c (convert): When converting to a padded type with an inner type of self-referential size...\n\n\t* gcc-interface/utils.c (convert): When converting to a padded type\n\twith an inner type of self-referential size, pad the expression before\n\tdoing the unchecked conversion.\n\nFrom-SVN: r152935", "tree": {"sha": "d7e70992d9aba30711a5e73fff24f4b4d2d46b90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7e70992d9aba30711a5e73fff24f4b4d2d46b90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/431cfac1ffb50746d86afbf486f84180d39c54e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/431cfac1ffb50746d86afbf486f84180d39c54e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/431cfac1ffb50746d86afbf486f84180d39c54e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/431cfac1ffb50746d86afbf486f84180d39c54e8/comments", "author": null, "committer": null, "parents": [{"sha": "3f273c8a53e786389658f14a0316e48a5e0de0b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f273c8a53e786389658f14a0316e48a5e0de0b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f273c8a53e786389658f14a0316e48a5e0de0b6"}], "stats": {"total": 55, "additions": 51, "deletions": 4}, "files": [{"sha": "c5388ac456e9dcc13725c1a394a059520c33a348", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/431cfac1ffb50746d86afbf486f84180d39c54e8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/431cfac1ffb50746d86afbf486f84180d39c54e8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=431cfac1ffb50746d86afbf486f84180d39c54e8", "patch": "@@ -1,3 +1,9 @@\n+2009-10-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/utils.c (convert): When converting to a padded type\n+\twith an inner type of self-referential size, pad the expression before\n+\tdoing the unchecked conversion.\n+\n 2009-10-17  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/utils2.c (build_binary_op) <ARRAY_RANGE_REF>: Mak"}, {"sha": "a8225b0b30a9d5633a3f29f0e2847da85d4a10f1", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/431cfac1ffb50746d86afbf486f84180d39c54e8/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/431cfac1ffb50746d86afbf486f84180d39c54e8/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=431cfac1ffb50746d86afbf486f84180d39c54e8", "patch": "@@ -3856,12 +3856,17 @@ convert (tree type, tree expr)\n \t\t     == TYPE_NAME (TREE_TYPE (TYPE_FIELDS (type))))))\n \treturn convert (type, TREE_OPERAND (expr, 0));\n \n-      /* If the result type is a padded type with a self-referentially-sized\n-\t field and the expression type is a record, do this as an unchecked\n-\t conversion.  */\n+      /* If the inner type is of self-referential size and the expression type\n+\t is a record, do this as an unchecked conversion.  But first pad the\n+\t expression if possible to have the same size on both sides.  */\n       if (TREE_CODE (etype) == RECORD_TYPE\n \t  && CONTAINS_PLACEHOLDER_P (DECL_SIZE (TYPE_FIELDS (type))))\n-\treturn unchecked_convert (type, expr, false);\n+\t{\n+\t  if (TREE_CONSTANT (TYPE_SIZE (etype)))\n+\t    expr = convert (maybe_pad_type (etype, TYPE_SIZE (type), 0, Empty,\n+\t\t\t    false, false, false, true), expr);\n+\t  return unchecked_convert (type, expr, false);\n+\t}\n \n       /* If we are converting between array types with variable size, do the\n \t final conversion as an unchecked conversion, again to avoid the need"}, {"sha": "2e9f67d46baf6f6439e688cc367fac657fc11212", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/431cfac1ffb50746d86afbf486f84180d39c54e8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/431cfac1ffb50746d86afbf486f84180d39c54e8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=431cfac1ffb50746d86afbf486f84180d39c54e8", "patch": "@@ -1,3 +1,8 @@\n+2009-10-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/aggr11.adb: New test.\n+\t* gnat.dg/aggr11_pkg.ads: New helper.\n+\n 2009-10-17  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/slice8.adb: New test."}, {"sha": "1771d62cacb54557d4e0852779229e54ab3e7bff", "filename": "gcc/testsuite/gnat.dg/aggr11.adb", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/431cfac1ffb50746d86afbf486f84180d39c54e8/gcc%2Ftestsuite%2Fgnat.dg%2Faggr11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/431cfac1ffb50746d86afbf486f84180d39c54e8/gcc%2Ftestsuite%2Fgnat.dg%2Faggr11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Faggr11.adb?ref=431cfac1ffb50746d86afbf486f84180d39c54e8", "patch": "@@ -0,0 +1,17 @@\n+-- { dg-do compile }\r\n+-- { dg-options \"-O\" }\r\n+\r\n+with Aggr11_Pkg; use Aggr11_Pkg;\r\n+\r\n+procedure Aggr11 is\r\n+\r\n+  A : Arr := ((1 => (Kind  => No_Error, B => True),\r\n+               2 => (Kind => Error),\r\n+               3 => (Kind => Error),\r\n+               4 => (Kind  => No_Error, B => True),\r\n+               5 => (Kind  => No_Error, B => True),\r\n+               6 => (Kind  => No_Error, B => True)));\r\n+\r\n+begin\r\n+   null;\r\n+end;\r"}, {"sha": "37008605a30e0a2185a65690c740e22886ba91b2", "filename": "gcc/testsuite/gnat.dg/aggr11_pkg.ads", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/431cfac1ffb50746d86afbf486f84180d39c54e8/gcc%2Ftestsuite%2Fgnat.dg%2Faggr11_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/431cfac1ffb50746d86afbf486f84180d39c54e8/gcc%2Ftestsuite%2Fgnat.dg%2Faggr11_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Faggr11_pkg.ads?ref=431cfac1ffb50746d86afbf486f84180d39c54e8", "patch": "@@ -0,0 +1,14 @@\n+package Aggr11_Pkg is\r\n+\r\n+   type Error_Type is (No_Error, Error);\r\n+\r\n+   type Rec (Kind : Error_Type := No_Error) is record\r\n+     case Kind is\r\n+       when Error => null;\r\n+       when others => B : Boolean;\r\n+     end case;\r\n+   end record;\r\n+\r\n+   type Arr is array (1..6) of Rec;\r\n+\r\n+end Aggr11_Pkg;\r"}]}