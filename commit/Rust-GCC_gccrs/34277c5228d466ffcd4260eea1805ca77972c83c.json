{"sha": "34277c5228d466ffcd4260eea1805ca77972c83c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQyNzdjNTIyOGQ0NjZmZmNkNDI2MGVlYTE4MDVjYTc3OTcyYzgzYw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-11-11T21:02:48Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-11-11T21:02:48Z"}, "message": "Introduce G structure and thread-local global g.\n\nFrom-SVN: r181301", "tree": {"sha": "6dc91773cd2743418de4eb59e161cb0a4381c77a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6dc91773cd2743418de4eb59e161cb0a4381c77a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34277c5228d466ffcd4260eea1805ca77972c83c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34277c5228d466ffcd4260eea1805ca77972c83c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34277c5228d466ffcd4260eea1805ca77972c83c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34277c5228d466ffcd4260eea1805ca77972c83c/comments", "author": null, "committer": null, "parents": [{"sha": "292b44341cc5355d353cb652eb3d78d3341c800f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/292b44341cc5355d353cb652eb3d78d3341c800f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/292b44341cc5355d353cb652eb3d78d3341c800f"}], "stats": {"total": 235, "additions": 102, "deletions": 133}, "files": [{"sha": "00e97d2dc8d565107f0933586d4a2564d4c2ae71", "filename": "libgo/Makefile.am", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34277c5228d466ffcd4260eea1805ca77972c83c/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34277c5228d466ffcd4260eea1805ca77972c83c/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=34277c5228d466ffcd4260eea1805ca77972c83c", "patch": "@@ -434,7 +434,6 @@ runtime_files = \\\n \truntime/go-new.c \\\n \truntime/go-note.c \\\n \truntime/go-panic.c \\\n-\truntime/go-panic-defer.c \\\n \truntime/go-print.c \\\n \truntime/go-rand.c \\\n \truntime/go-rec-big.c \\"}, {"sha": "68b972e16d42597f14a0ba2df7bd5ad7eb8a055f", "filename": "libgo/Makefile.in", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34277c5228d466ffcd4260eea1805ca77972c83c/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34277c5228d466ffcd4260eea1805ca77972c83c/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=34277c5228d466ffcd4260eea1805ca77972c83c", "patch": "@@ -198,14 +198,14 @@ am__libgo_la_SOURCES_DIST = runtime/go-append.c runtime/go-assert.c \\\n \truntime/go-map-index.c runtime/go-map-len.c \\\n \truntime/go-map-range.c runtime/go-nanotime.c \\\n \truntime/go-new-channel.c runtime/go-new-map.c runtime/go-new.c \\\n-\truntime/go-note.c runtime/go-panic.c runtime/go-panic-defer.c \\\n-\truntime/go-print.c runtime/go-rand.c runtime/go-rec-big.c \\\n-\truntime/go-rec-nb-big.c runtime/go-rec-nb-small.c \\\n-\truntime/go-rec-small.c runtime/go-recover.c \\\n-\truntime/go-reflect.c runtime/go-reflect-call.c \\\n-\truntime/go-reflect-chan.c runtime/go-reflect-map.c \\\n-\truntime/go-rune.c runtime/go-runtime-error.c \\\n-\truntime/go-sched.c runtime/go-select.c runtime/go-semacquire.c \\\n+\truntime/go-note.c runtime/go-panic.c runtime/go-print.c \\\n+\truntime/go-rand.c runtime/go-rec-big.c runtime/go-rec-nb-big.c \\\n+\truntime/go-rec-nb-small.c runtime/go-rec-small.c \\\n+\truntime/go-recover.c runtime/go-reflect.c \\\n+\truntime/go-reflect-call.c runtime/go-reflect-chan.c \\\n+\truntime/go-reflect-map.c runtime/go-rune.c \\\n+\truntime/go-runtime-error.c runtime/go-sched.c \\\n+\truntime/go-select.c runtime/go-semacquire.c \\\n \truntime/go-send-big.c runtime/go-send-nb-big.c \\\n \truntime/go-send-nb-small.c runtime/go-send-small.c \\\n \truntime/go-setenv.c runtime/go-signal.c runtime/go-strcmp.c \\\n@@ -239,10 +239,9 @@ am__objects_3 = go-append.lo go-assert.lo go-assert-interface.lo \\\n \tgo-interface-val-compare.lo go-lock-os-thread.lo \\\n \tgo-make-slice.lo go-map-delete.lo go-map-index.lo \\\n \tgo-map-len.lo go-map-range.lo go-nanotime.lo go-new-channel.lo \\\n-\tgo-new-map.lo go-new.lo go-note.lo go-panic.lo \\\n-\tgo-panic-defer.lo go-print.lo go-rand.lo go-rec-big.lo \\\n-\tgo-rec-nb-big.lo go-rec-nb-small.lo go-rec-small.lo \\\n-\tgo-recover.lo go-reflect.lo go-reflect-call.lo \\\n+\tgo-new-map.lo go-new.lo go-note.lo go-panic.lo go-print.lo \\\n+\tgo-rand.lo go-rec-big.lo go-rec-nb-big.lo go-rec-nb-small.lo \\\n+\tgo-rec-small.lo go-recover.lo go-reflect.lo go-reflect-call.lo \\\n \tgo-reflect-chan.lo go-reflect-map.lo go-rune.lo \\\n \tgo-runtime-error.lo go-sched.lo go-select.lo go-semacquire.lo \\\n \tgo-send-big.lo go-send-nb-big.lo go-send-nb-small.lo \\\n@@ -865,7 +864,6 @@ runtime_files = \\\n \truntime/go-new.c \\\n \truntime/go-note.c \\\n \truntime/go-panic.c \\\n-\truntime/go-panic-defer.c \\\n \truntime/go-print.c \\\n \truntime/go-rand.c \\\n \truntime/go-rec-big.c \\\n@@ -2492,7 +2490,6 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-new-map.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-new.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-note.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-panic-defer.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-panic.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-print.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-rand.Plo@am__quote@\n@@ -2863,13 +2860,6 @@ go-panic.lo: runtime/go-panic.c\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n @am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o go-panic.lo `test -f 'runtime/go-panic.c' || echo '$(srcdir)/'`runtime/go-panic.c\n \n-go-panic-defer.lo: runtime/go-panic-defer.c\n-@am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT go-panic-defer.lo -MD -MP -MF $(DEPDIR)/go-panic-defer.Tpo -c -o go-panic-defer.lo `test -f 'runtime/go-panic-defer.c' || echo '$(srcdir)/'`runtime/go-panic-defer.c\n-@am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/go-panic-defer.Tpo $(DEPDIR)/go-panic-defer.Plo\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='runtime/go-panic-defer.c' object='go-panic-defer.lo' libtool=yes @AMDEPBACKSLASH@\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n-@am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o go-panic-defer.lo `test -f 'runtime/go-panic-defer.c' || echo '$(srcdir)/'`runtime/go-panic-defer.c\n-\n go-print.lo: runtime/go-print.c\n @am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT go-print.lo -MD -MP -MF $(DEPDIR)/go-print.Tpo -c -o go-print.lo `test -f 'runtime/go-print.c' || echo '$(srcdir)/'`runtime/go-print.c\n @am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/go-print.Tpo $(DEPDIR)/go-print.Plo"}, {"sha": "dda62fb4e1ab79539a828a9ef1c40d03d2818881", "filename": "libgo/runtime/go-defer.c", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34277c5228d466ffcd4260eea1805ca77972c83c/libgo%2Fruntime%2Fgo-defer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34277c5228d466ffcd4260eea1805ca77972c83c/libgo%2Fruntime%2Fgo-defer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-defer.c?ref=34277c5228d466ffcd4260eea1805ca77972c83c", "patch": "@@ -6,6 +6,7 @@\n \n #include <stddef.h>\n \n+#include \"runtime.h\"\n #include \"go-alloc.h\"\n #include \"go-panic.h\"\n #include \"go-defer.h\"\n@@ -17,41 +18,34 @@ __go_defer (_Bool *frame, void (*pfn) (void *), void *arg)\n {\n   struct __go_defer_stack *n;\n \n-  if (__go_panic_defer == NULL)\n-    __go_panic_defer = ((struct __go_panic_defer_struct *)\n-\t\t\t__go_alloc (sizeof (struct __go_panic_defer_struct)));\n-\n   n = (struct __go_defer_stack *) __go_alloc (sizeof (struct __go_defer_stack));\n-  n->__next = __go_panic_defer->__defer;\n+  n->__next = g->defer;\n   n->__frame = frame;\n-  n->__panic = __go_panic_defer->__panic;\n+  n->__panic = g->panic;\n   n->__pfn = pfn;\n   n->__arg = arg;\n   n->__retaddr = NULL;\n-  __go_panic_defer->__defer = n;\n+  g->defer = n;\n }\n \n /* This function is called when we want to undefer the stack.  */\n \n void\n __go_undefer (_Bool *frame)\n {\n-  if (__go_panic_defer == NULL)\n-    return;\n-  while (__go_panic_defer->__defer != NULL\n-\t && __go_panic_defer->__defer->__frame == frame)\n+  while (g->defer != NULL && g->defer->__frame == frame)\n     {\n       struct __go_defer_stack *d;\n       void (*pfn) (void *);\n \n-      d = __go_panic_defer->__defer;\n+      d = g->defer;\n       pfn = d->__pfn;\n       d->__pfn = NULL;\n \n       if (pfn != NULL)\n \t(*pfn) (d->__arg);\n \n-      __go_panic_defer->__defer = d->__next;\n+      g->defer = d->__next;\n       __go_free (d);\n \n       /* Since we are executing a defer function here, we know we are\n@@ -69,7 +63,7 @@ __go_undefer (_Bool *frame)\n _Bool\n __go_set_defer_retaddr (void *retaddr)\n {\n-  if (__go_panic_defer != NULL && __go_panic_defer->__defer != NULL)\n-    __go_panic_defer->__defer->__retaddr = retaddr;\n+  if (g->defer != NULL)\n+    g->defer->__retaddr = retaddr;\n   return 0;\n }"}, {"sha": "d749c2788ab70b2e79735fa735645108463c24a7", "filename": "libgo/runtime/go-deferred-recover.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34277c5228d466ffcd4260eea1805ca77972c83c/libgo%2Fruntime%2Fgo-deferred-recover.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34277c5228d466ffcd4260eea1805ca77972c83c/libgo%2Fruntime%2Fgo-deferred-recover.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-deferred-recover.c?ref=34277c5228d466ffcd4260eea1805ca77972c83c", "patch": "@@ -6,6 +6,7 @@\n \n #include <stddef.h>\n \n+#include \"runtime.h\"\n #include \"go-panic.h\"\n #include \"go-defer.h\"\n \n@@ -78,9 +79,7 @@\n struct __go_empty_interface\n __go_deferred_recover ()\n {\n-  if (__go_panic_defer == NULL\n-      || __go_panic_defer->__defer == NULL\n-      || __go_panic_defer->__defer->__panic != __go_panic_defer->__panic)\n+  if (g->defer == NULL || g->defer->__panic != g->panic)\n     {\n       struct __go_empty_interface ret;\n "}, {"sha": "82b265f964ef748320f274f1df196a0e65fc51c7", "filename": "libgo/runtime/go-go.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34277c5228d466ffcd4260eea1805ca77972c83c/libgo%2Fruntime%2Fgo-go.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34277c5228d466ffcd4260eea1805ca77972c83c/libgo%2Fruntime%2Fgo-go.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-go.c?ref=34277c5228d466ffcd4260eea1805ca77972c83c", "patch": "@@ -115,6 +115,7 @@ remove_current_thread (void *dummy __attribute__ ((unused)))\n      any code from here to thread exit must not assume that m is\n      valid.  */\n   m = NULL;\n+  g = NULL;\n \n   i = pthread_mutex_unlock (&__go_thread_ids_lock);\n   __go_assert (i == 0);\n@@ -135,10 +136,11 @@ start_go_thread (void *thread_arg)\n \n #ifdef __rtems__\n   __wrap_rtems_task_variable_add ((void **) &m);\n-  __wrap_rtems_task_variable_add ((void **) &__go_panic_defer);\n+  __wrap_rtems_task_variable_add ((void **) &g);\n #endif\n \n   m = newm;\n+  g = m->curg;\n \n   pthread_cleanup_push (remove_current_thread, NULL);\n \n@@ -230,6 +232,9 @@ __go_go (void (*pfn) (void*), void *arg)\n \n   newm->list_entry = list_entry;\n \n+  newm->curg = __go_alloc (sizeof (G));\n+  newm->curg->m = newm;\n+\n   newm->id = __sync_fetch_and_add (&mcount, 1);\n   newm->fastrand = 0x49f6428aUL + newm->id;\n \n@@ -299,9 +304,6 @@ stop_for_gc (void)\n   }\n #endif\n \n-  /* FIXME: Perhaps we should just move __go_panic_defer into M.  */\n-  m->gc_panic_defer = __go_panic_defer;\n-\n   /* Tell the garbage collector that we are ready by posting to the\n      semaphore.  */\n   i = sem_post (&__go_thread_ready_sem);\n@@ -433,10 +435,6 @@ runtime_stoptheworld (void)\n       --c;\n     }\n \n-  /* The gc_panic_defer field should now be set for all M's except the\n-     one in this thread.  Set this one now.  */\n-  m->gc_panic_defer = __go_panic_defer;\n-\n   /* Leave with __go_thread_ids_lock held.  */\n }\n "}, {"sha": "15a6a30a93d4204b97234921301d55fcc388ed1e", "filename": "libgo/runtime/go-main.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34277c5228d466ffcd4260eea1805ca77972c83c/libgo%2Fruntime%2Fgo-main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34277c5228d466ffcd4260eea1805ca77972c83c/libgo%2Fruntime%2Fgo-main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-main.c?ref=34277c5228d466ffcd4260eea1805ca77972c83c", "patch": "@@ -48,6 +48,10 @@ main (int argc, char **argv)\n   int i;\n   struct __go_string *values;\n \n+  m = &runtime_m0;\n+  g = &runtime_g0;\n+  m->curg = g;\n+  g->m = m;\n   runtime_mallocinit ();\n   runtime_cpuprofinit ();\n   __go_gc_goroutine_init (&argc);"}, {"sha": "64773bb5eb58e17075bba0c90a4eb0bfa5df8d23", "filename": "libgo/runtime/go-panic-defer.c", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/292b44341cc5355d353cb652eb3d78d3341c800f/libgo%2Fruntime%2Fgo-panic-defer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/292b44341cc5355d353cb652eb3d78d3341c800f/libgo%2Fruntime%2Fgo-panic-defer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-panic-defer.c?ref=292b44341cc5355d353cb652eb3d78d3341c800f", "patch": "@@ -1,13 +0,0 @@\n-/* go-panic-stack.c -- The panic/defer stack.\n-\n-   Copyright 2010 The Go Authors. All rights reserved.\n-   Use of this source code is governed by a BSD-style\n-   license that can be found in the LICENSE file.  */\n-\n-#include \"go-panic.h\"\n-\n-#ifdef __rtems__\n-#define __thread\n-#endif\n-\n-__thread struct __go_panic_defer_struct *__go_panic_defer;"}, {"sha": "8b95cd4e4d120d1c980b4ba9d7b749d3d7df76e0", "filename": "libgo/runtime/go-panic.c", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34277c5228d466ffcd4260eea1805ca77972c83c/libgo%2Fruntime%2Fgo-panic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34277c5228d466ffcd4260eea1805ca77972c83c/libgo%2Fruntime%2Fgo-panic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-panic.c?ref=34277c5228d466ffcd4260eea1805ca77972c83c", "patch": "@@ -41,14 +41,10 @@ __go_panic (struct __go_empty_interface arg)\n {\n   struct __go_panic_stack *n;\n \n-  if (__go_panic_defer == NULL)\n-    __go_panic_defer = ((struct __go_panic_defer_struct *)\n-\t\t\t__go_alloc (sizeof (struct __go_panic_defer_struct)));\n-\n   n = (struct __go_panic_stack *) __go_alloc (sizeof (struct __go_panic_stack));\n   n->__arg = arg;\n-  n->__next = __go_panic_defer->__panic;\n-  __go_panic_defer->__panic = n;\n+  n->__next = g->panic;\n+  g->panic = n;\n \n   /* Run all the defer functions.  */\n \n@@ -57,7 +53,7 @@ __go_panic (struct __go_empty_interface arg)\n       struct __go_defer_stack *d;\n       void (*pfn) (void *);\n \n-      d = __go_panic_defer->__defer;\n+      d = g->defer;\n       if (d == NULL)\n \tbreak;\n \n@@ -73,7 +69,7 @@ __go_panic (struct __go_empty_interface arg)\n \t      /* Some defer function called recover.  That means that\n \t\t we should stop running this panic.  */\n \n-\t      __go_panic_defer->__panic = n->__next;\n+\t      g->panic = n->__next;\n \t      __go_free (n);\n \n \t      /* Now unwind the stack by throwing an exception.  The\n@@ -96,13 +92,13 @@ __go_panic (struct __go_empty_interface arg)\n \t  *d->__frame = 0;\n \t}\n \n-      __go_panic_defer->__defer = d->__next;\n+      g->defer = d->__next;\n       __go_free (d);\n     }\n \n   /* The panic was not recovered.  */\n \n-  __printpanics (__go_panic_defer->__panic);\n+  __printpanics (g->panic);\n \n   /* FIXME: We should dump a call stack here.  */\n   abort ();"}, {"sha": "bd3e238aef42d7347effacaf58df19d883348623", "filename": "libgo/runtime/go-panic.h", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34277c5228d466ffcd4260eea1805ca77972c83c/libgo%2Fruntime%2Fgo-panic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34277c5228d466ffcd4260eea1805ca77972c83c/libgo%2Fruntime%2Fgo-panic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-panic.h?ref=34277c5228d466ffcd4260eea1805ca77972c83c", "patch": "@@ -31,36 +31,6 @@ struct __go_panic_stack\n   _Bool __is_foreign;\n };\n \n-/* The panic and defer stacks, grouped together into a single thread\n-   local variable for convenience for systems without TLS.  */\n-\n-struct __go_panic_defer_struct\n-{\n-  /* The list of defers to execute.  */\n-  struct __go_defer_stack *__defer;\n-\n-  /* The list of currently active panics.  There will be more than one\n-     if a deferred function calls panic.  */\n-  struct __go_panic_stack *__panic;\n-\n-  /* The current exception being thrown when unwinding after a call to\n-     panic .  This is really struct _UnwindException *.  */\n-  void *__exception;\n-\n-  /* Whether the current exception is from some other language.  */\n-  _Bool __is_foreign;\n-};\n-\n-#ifdef __rtems__\n-#define __thread\n-#endif\n-\n-extern __thread struct __go_panic_defer_struct *__go_panic_defer;\n-\n-#ifdef __rtems__\n-#undef __thread\n-#endif\n-\n extern void __go_panic (struct __go_empty_interface)\n   __attribute__ ((noreturn));\n "}, {"sha": "fe6031c100f18cb51beccff8abe930882e7f36c0", "filename": "libgo/runtime/go-recover.c", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34277c5228d466ffcd4260eea1805ca77972c83c/libgo%2Fruntime%2Fgo-recover.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34277c5228d466ffcd4260eea1805ca77972c83c/libgo%2Fruntime%2Fgo-recover.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-recover.c?ref=34277c5228d466ffcd4260eea1805ca77972c83c", "patch": "@@ -4,6 +4,7 @@\n    Use of this source code is governed by a BSD-style\n    license that can be found in the LICENSE file.  */\n \n+#include \"runtime.h\"\n #include \"interface.h\"\n #include \"go-panic.h\"\n #include \"go-defer.h\"\n@@ -21,17 +22,15 @@ __go_can_recover (const void* retaddr)\n   const char* ret;\n   const char* dret;\n \n-  if (__go_panic_defer == NULL)\n-    return 0;\n-  d = __go_panic_defer->__defer;\n+  d = g->defer;\n   if (d == NULL)\n     return 0;\n \n   /* The panic which this function would recover is the one on the top\n      of the panic stack.  We do not want to recover it if that panic\n      was on the top of the panic stack when this function was\n      deferred.  */\n-  if (d->__panic == __go_panic_defer->__panic)\n+  if (d->__panic == g->panic)\n     return 0;\n \n   /* D->__RETADDR is the address of a label immediately following the\n@@ -53,17 +52,15 @@ __go_recover ()\n {\n   struct __go_panic_stack *p;\n \n-  if (__go_panic_defer == NULL\n-      || __go_panic_defer->__panic == NULL\n-      || __go_panic_defer->__panic->__was_recovered)\n+  if (g->panic == NULL || g->panic->__was_recovered)\n     {\n       struct __go_empty_interface ret;\n \n       ret.__type_descriptor = NULL;\n       ret.__object = NULL;\n       return ret;\n     }\n-  p = __go_panic_defer->__panic;\n+  p = g->panic;\n   p->__was_recovered = 1;\n   return p->__arg;\n }"}, {"sha": "58c675a2dc8669d4500e358a17095fe365d2e988", "filename": "libgo/runtime/go-unwind.c", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34277c5228d466ffcd4260eea1805ca77972c83c/libgo%2Fruntime%2Fgo-unwind.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34277c5228d466ffcd4260eea1805ca77972c83c/libgo%2Fruntime%2Fgo-unwind.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-unwind.c?ref=34277c5228d466ffcd4260eea1805ca77972c83c", "patch": "@@ -13,6 +13,7 @@\n #define NO_SIZE_OF_ENCODED_VALUE\n #include \"unwind-pe.h\"\n \n+#include \"runtime.h\"\n #include \"go-alloc.h\"\n #include \"go-defer.h\"\n #include \"go-panic.h\"\n@@ -48,12 +49,12 @@ __go_check_defer (_Bool *frame)\n {\n   struct _Unwind_Exception *hdr;\n \n-  if (__go_panic_defer == NULL)\n+  if (g == NULL)\n     {\n       /* Some other language has thrown an exception.  We know there\n \t are no defer handlers, so there is nothing to do.  */\n     }\n-  else if (__go_panic_defer->__is_foreign)\n+  else if (g->is_foreign)\n     {\n       struct __go_panic_stack *n;\n       _Bool was_recovered;\n@@ -69,20 +70,20 @@ __go_check_defer (_Bool *frame)\n       n->__arg.__object = NULL;\n       n->__was_recovered = 0;\n       n->__is_foreign = 1;\n-      n->__next = __go_panic_defer->__panic;\n-      __go_panic_defer->__panic = n;\n+      n->__next = g->panic;\n+      g->panic = n;\n \n       while (1)\n \t{\n \t  struct __go_defer_stack *d;\n \t  void (*pfn) (void *);\n \n-\t  d = __go_panic_defer->__defer;\n+\t  d = g->defer;\n \t  if (d == NULL || d->__frame != frame || d->__pfn == NULL)\n \t    break;\n \n \t  pfn = d->__pfn;\n-\t  __go_panic_defer->__defer = d->__next;\n+\t  g->defer = d->__next;\n \n \t  (*pfn) (d->__arg);\n \n@@ -97,7 +98,7 @@ __go_check_defer (_Bool *frame)\n \t}\n \n       was_recovered = n->__was_recovered;\n-      __go_panic_defer->__panic = n->__next;\n+      g->panic = n->__next;\n       __go_free (n);\n \n       if (was_recovered)\n@@ -110,17 +111,17 @@ __go_check_defer (_Bool *frame)\n       /* We are panicing through this function.  */\n       *frame = 0;\n     }\n-  else if (__go_panic_defer->__defer != NULL\n-\t   && __go_panic_defer->__defer->__pfn == NULL\n-\t   && __go_panic_defer->__defer->__frame == frame)\n+  else if (g->defer != NULL\n+\t   && g->defer->__pfn == NULL\n+\t   && g->defer->__frame == frame)\n     {\n       struct __go_defer_stack *d;\n \n       /* This is the defer function which called recover.  Simply\n \t return to stop the stack unwind, and let the Go code continue\n \t to execute.  */\n-      d = __go_panic_defer->__defer;\n-      __go_panic_defer->__defer = d->__next;\n+      d = g->defer;\n+      g->defer = d->__next;\n       __go_free (d);\n \n       /* We are returning from this function.  */\n@@ -132,7 +133,7 @@ __go_check_defer (_Bool *frame)\n   /* This is some other defer function.  It was already run by the\n      call to panic, or just above.  Rethrow the exception.  */\n \n-  hdr = (struct _Unwind_Exception *) __go_panic_defer->__exception;\n+  hdr = (struct _Unwind_Exception *) g->exception;\n \n #ifdef LIBGO_SJLJ_EXCEPTIONS\n   _Unwind_SjLj_Resume_or_Rethrow (hdr);\n@@ -163,7 +164,7 @@ __go_unwind_stack ()\n \t\t    sizeof hdr->exception_class);\n   hdr->exception_cleanup = NULL;\n \n-  __go_panic_defer->__exception = hdr;\n+  g->exception = hdr;\n \n #ifdef __USING_SJLJ_EXCEPTIONS__\n   _Unwind_SjLj_RaiseException (hdr);\n@@ -413,17 +414,17 @@ PERSONALITY_FUNCTION (int version,\n       return _URC_HANDLER_FOUND;\n     }\n \n-  /* It's possible for __go_panic_defer to be NULL here for an\n-     exception thrown by a language other than Go.  */\n-  if (__go_panic_defer == NULL)\n+  /* It's possible for g to be NULL here for an exception thrown by a\n+     language other than Go.  */\n+  if (g == NULL)\n     {\n       if (!is_foreign)\n \tabort ();\n     }\n   else\n     {\n-      __go_panic_defer->__exception = ue_header;\n-      __go_panic_defer->__is_foreign = is_foreign;\n+      g->exception = ue_header;\n+      g->is_foreign = is_foreign;\n     }\n \n   _Unwind_SetGR (context, __builtin_eh_return_data_regno (0),"}, {"sha": "6d402e55dd6ba7a29b67f98c5793c25ab1107c81", "filename": "libgo/runtime/mgc0.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34277c5228d466ffcd4260eea1805ca77972c83c/libgo%2Fruntime%2Fmgc0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34277c5228d466ffcd4260eea1805ca77972c83c/libgo%2Fruntime%2Fmgc0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fmgc0.c?ref=34277c5228d466ffcd4260eea1805ca77972c83c", "patch": "@@ -652,7 +652,8 @@ mark(void (*scan)(byte*, int64))\n \t\t}\n \t}\n \n-\tscan((byte*)&m0, sizeof m0);\n+\tscan((byte*)&runtime_m0, sizeof runtime_m0);\n+\tscan((byte*)&runtime_g0, sizeof runtime_g0);\n \tscan((byte*)&finq, sizeof finq);\n \truntime_MProf_Mark(scan);\n "}, {"sha": "e9b7c9083ca294ab9a109f152c6074971e88be59", "filename": "libgo/runtime/proc.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34277c5228d466ffcd4260eea1805ca77972c83c/libgo%2Fruntime%2Fproc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34277c5228d466ffcd4260eea1805ca77972c83c/libgo%2Fruntime%2Fproc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fproc.c?ref=34277c5228d466ffcd4260eea1805ca77972c83c", "patch": "@@ -8,13 +8,15 @@\n \n typedef struct Sched Sched;\n \n-M\tm0;\n+G\truntime_g0;\n+M\truntime_m0;\n \n #ifdef __rtems__\n #define __thread\n #endif\n \n-__thread M *m = &m0;\n+__thread G *g;\n+__thread M *m;\n \n static struct {\n \tLock;"}, {"sha": "7f061cbbe3130ff417e52eefb98c439f51e31fb5", "filename": "libgo/runtime/runtime.h", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34277c5228d466ffcd4260eea1805ca77972c83c/libgo%2Fruntime%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34277c5228d466ffcd4260eea1805ca77972c83c/libgo%2Fruntime%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fruntime.h?ref=34277c5228d466ffcd4260eea1805ca77972c83c", "patch": "@@ -48,11 +48,15 @@ typedef unsigned int uintptr __attribute__ ((mode (pointer)));\n \n typedef\tuint8\t\t\tbool;\n typedef\tuint8\t\t\tbyte;\n+typedef\tstruct\tG\t\tG;\n typedef\tstruct\tM\t\tM;\n typedef\tstruct\tMCache\t\tMCache;\n typedef struct\tFixAlloc\tFixAlloc;\n typedef\tstruct\tLock\t\tLock;\n \n+typedef\tstruct\t__go_defer_stack\tDefer;\n+typedef\tstruct\t__go_panic_stack\tPanic;\n+\n /* We use mutexes for locks.  6g uses futexes directly, and perhaps\n    someday we will do that too.  */\n \n@@ -76,9 +80,11 @@ struct Note {\n #define __thread\n #endif\n \n+extern __thread\t\tG*\tg;\n extern __thread\t\tM* \tm;\n \n-extern M\tm0;\n+extern M\truntime_m0;\n+extern G\truntime_g0;\n \n #ifdef __rtems__\n #undef __thread\n@@ -94,8 +100,34 @@ enum\n \n /* Structures.  */\n \n+struct\tG\n+{\n+\tDefer*\tdefer;\n+\tPanic*\tpanic;\n+\tvoid*\texception;\t// current exception being thrown\n+\tbool\tis_foreign;\t// whether current exception from other language\n+\tbyte*\tentry;\t\t// initial function\n+\tG*\talllink;\t// on allg\n+\tvoid*\tparam;\t\t// passed parameter on wakeup\n+\tint16\tstatus;\n+\tint32\tgoid;\n+\tint8*\twaitreason;\t// if status==Gwaiting\n+\tG*\tschedlink;\n+\tbool\treadyonstop;\n+\tbool\tispanic;\n+\tM*\tm;\t\t// for debuggers, but offset not hard-coded\n+\tM*\tlockedm;\n+\tM*\tidlem;\n+\t// int32\tsig;\n+\t// uintptr\tsigcode0;\n+\t// uintptr\tsigcode1;\n+\t// uintptr\tsigpc;\n+\t// uintptr\tgopc;\t// pc of go statement that created this goroutine\n+};\n+\n struct\tM\n {\n+\tG*\tcurg;\t\t// current running goroutine\n \tint32\tid;\n \tint32\tmallocing;\n \tint32\tgcing;\n@@ -117,7 +149,6 @@ struct\tM\n \tvoid\t*gc_next_segment;\n \tvoid\t*gc_next_sp;\n \tvoid\t*gc_initial_sp;\n-\tstruct __go_panic_defer_struct *gc_panic_defer;\n };\n \n /* Macros.  */"}]}