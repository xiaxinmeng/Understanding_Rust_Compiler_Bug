{"sha": "83c1f6283efe9b71a6ea71a3761aa2110214be5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNjMWY2MjgzZWZlOWI3MWE2ZWE3MWEzNzYxYWEyMTEwMjE0YmU1Yg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2000-04-18T16:13:16Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-04-18T16:13:16Z"}, "message": "re GNATS gcj/211 (gcjh doesn't handle method names that are reserved C++ keywords)\n\n\tPR gcj/211:\n\t* gjavah.c (utf8_cmp): Changed return value.\n\t(cxx_keyword_subst): Handle all C++ keywords.  Allocate new return\n\tresult.\n\t(cxx_keywords): New global.\n\t(get_field_name): Handle new result of cxx_keyword_subst.\n\t(print_method_info): Likewise.\n\nFrom-SVN: r33225", "tree": {"sha": "e4ca41a5124e1ae8e90723c3701ab5a6f3a301aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4ca41a5124e1ae8e90723c3701ab5a6f3a301aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83c1f6283efe9b71a6ea71a3761aa2110214be5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83c1f6283efe9b71a6ea71a3761aa2110214be5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83c1f6283efe9b71a6ea71a3761aa2110214be5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83c1f6283efe9b71a6ea71a3761aa2110214be5b/comments", "author": null, "committer": null, "parents": [{"sha": "44c0139162bcd8fdd89faeef303e0d3253e709ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44c0139162bcd8fdd89faeef303e0d3253e709ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44c0139162bcd8fdd89faeef303e0d3253e709ba"}], "stats": {"total": 106, "additions": 85, "deletions": 21}, "files": [{"sha": "be558a33ee1ae8ab1c9abb0f947c601dedd10684", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83c1f6283efe9b71a6ea71a3761aa2110214be5b/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83c1f6283efe9b71a6ea71a3761aa2110214be5b/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=83c1f6283efe9b71a6ea71a3761aa2110214be5b", "patch": "@@ -1,3 +1,13 @@\n+2000-04-18  Tom Tromey  <tromey@cygnus.com>\n+\n+\tPR gcj/211:\n+\t* gjavah.c (utf8_cmp): Changed return value.\n+\t(cxx_keyword_subst): Handle all C++ keywords.  Allocate new return\n+\tresult.\n+\t(cxx_keywords): New global.\n+\t(get_field_name): Handle new result of cxx_keyword_subst.\n+\t(print_method_info): Likewise.\n+\n 2000-04-17  Bryce McKinlay  <bryce@albatross.co.nz>\n \n \t* gjavah.c (print_name_for_stub_or_jni): Don't prefix method names "}, {"sha": "0ee85a56638cae00d9e1cf1e54066ae3da574831", "filename": "gcc/java/gjavah.c", "status": "modified", "additions": 75, "deletions": 21, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83c1f6283efe9b71a6ea71a3761aa2110214be5b/gcc%2Fjava%2Fgjavah.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83c1f6283efe9b71a6ea71a3761aa2110214be5b/gcc%2Fjava%2Fgjavah.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgjavah.c?ref=83c1f6283efe9b71a6ea71a3761aa2110214be5b", "patch": "@@ -131,7 +131,7 @@ static int java_double_finite PARAMS ((jdouble));\n static void print_name PARAMS ((FILE *, JCF *, int));\n static void print_base_classname PARAMS ((FILE *, JCF *, int));\n static int utf8_cmp PARAMS ((const unsigned char *, int, const char *));\n-static const char *cxx_keyword_subst PARAMS ((const unsigned char *, int));\n+static char *cxx_keyword_subst PARAMS ((const unsigned char *, int));\n static void generate_access PARAMS ((FILE *, JCF_u2));\n static int name_is_method_p PARAMS ((const unsigned char *, int));\n static char *get_field_name PARAMS ((JCF *, int, JCF_u2));\n@@ -336,7 +336,8 @@ print_base_classname (stream, jcf, index)\n     }\n }\n \n-/* Return 0 if NAME is equal to STR, nonzero otherwise.  */\n+/* Return 0 if NAME is equal to STR, -1 if STR is \"less\" than NAME,\n+   and 1 if STR is \"greater\" than NAME.  */\n \n static int\n utf8_cmp (str, length, name)\n@@ -351,26 +352,79 @@ utf8_cmp (str, length, name)\n     {\n       int ch = UTF8_GET (str, limit);\n       if (ch != name[i])\n-\treturn 1;\n+\treturn ch - name[i];\n     }\n \n-  return str != limit;\n+  return str == limit ? 0 : 1;\n }\n \n+/* This is a sorted list of all C++ keywords.  */\n+\n+static const char *cxx_keywords[] =\n+{\n+  \"asm\",\n+  \"auto\",\n+  \"bool\",\n+  \"const_cast\",\n+  \"delete\",\n+  \"dynamic_cast\",\n+  \"enum\",\n+  \"explicit\",\n+  \"extern\",\n+  \"friend\",\n+  \"inline\",\n+  \"mutable\",\n+  \"namespace\",\n+  \"overload\",\n+  \"register\",\n+  \"reinterpret_cast\",\n+  \"signed\",\n+  \"sizeof\",\n+  \"static_cast\",\n+  \"struct\",\n+  \"template\",\n+  \"typedef\",\n+  \"typeid\",\n+  \"typename\",\n+  \"typenameopt\",\n+  \"union\",\n+  \"unsigned\",\n+  \"using\",\n+  \"virtual\",\n+  \"volatile\",\n+  \"wchar_t\"\n+};\n+\n+\n /* If NAME is the name of a C++ keyword, then return an override name.\n    This is a name that can be used in place of the keyword.\n-   Otherwise, return NULL.  FIXME: for now, we only handle those\n-   keywords we know to be a problem for libgcj.  */\n+   Otherwise, return NULL.  The return value is malloc()d.  */\n \n-static const char *\n+static char *\n cxx_keyword_subst (str, length)\n      const unsigned char *str;\n      int length;\n {\n-  if (! utf8_cmp (str, length, \"delete\"))\n-    return \"__dummy_delete\";\n-  else if (! utf8_cmp (str, length, \"enum\"))\n-    return \"__dummy_enum\";\n+  int last = sizeof (cxx_keywords) / sizeof (const char *);\n+  int first = 0;\n+  int mid, r;\n+\n+  while (last != first)\n+    {\n+      mid = (last + first) / 2;\n+      r = utf8_cmp (str, length, cxx_keywords[mid]);\n+      if (r == 0)\n+\t{\n+\t  char *str = xmalloc (9 + strlen (cxx_keywords[mid]));\n+\t  strcpy (str, \"__dummy_\");\n+\t  strcat (str, cxx_keywords[mid]);\n+\t  return str;\n+\t}\n+      else if (r < 0)\n+\tlast = mid;\n+      else\n+\tfirst = mid;\n+    }\n   return NULL;\n }\n \n@@ -455,7 +509,6 @@ get_field_name (jcf, name_index, flags)\n   unsigned char *name = JPOOL_UTF_DATA (jcf, name_index);\n   int length = JPOOL_UTF_LENGTH (jcf, name_index);\n   char *override;\n-  const char *tmpconstptr;\n \n   if (name_is_method_p (name, length))\n     {\n@@ -474,14 +527,9 @@ get_field_name (jcf, name_index, flags)\n       memcpy (override, name, length);\n       strcpy (override + length, \"__\");\n     }\n-  else if ((tmpconstptr = cxx_keyword_subst (name, length)) != NULL)\n-    {\n-      /* Must malloc OVERRIDE.  */\n-      override = xstrdup (tmpconstptr);\n-    }\n   else\n-    override = NULL;\n-  \n+    override = cxx_keyword_subst (name, length);\n+\n   return override;\n }\n \n@@ -621,7 +669,7 @@ DEFUN(print_method_info, (stream, jcf, name_index, sig_index, flags),\n {\n   const unsigned char *str;\n   int length, is_init = 0;\n-  const char *override = NULL;\n+  char *override = NULL;\n \n   method_declared = 0;\n   method_access = flags;\n@@ -687,7 +735,10 @@ DEFUN(print_method_info, (stream, jcf, name_index, sig_index, flags),\n \t     mangling will be wrong.  FIXME.  */\n \t  if (METHOD_IS_FINAL (jcf->access_flags, flags)\n \t      || (flags & ACC_STATIC))\n-\t    return;\n+\t    {\n+\t      free (override);\n+\t      return;\n+\t    }\n \t}\n     }\n \n@@ -722,6 +773,9 @@ DEFUN(print_method_info, (stream, jcf, name_index, sig_index, flags),\n \t\t\t     is_init, override, flags);\n \t}\n     }\n+\n+  if (override)\n+    free (override);\n }\n \n /* Try to decompile a method body.  Right now we just try to handle a"}]}