{"sha": "37cf61167f3d85b235bec602cef96b6e39764f2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdjZjYxMTY3ZjNkODViMjM1YmVjNjAyY2VmOTZiNmUzOTc2NGYyYw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-07-29T05:57:44Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-07-29T05:57:44Z"}, "message": "cse.c (exp_equiv_p): Special case CONST_DOUBLE.\n\n        * cse.c (exp_equiv_p): Special case CONST_DOUBLE.\n        * cselib.c (rtx_equal_for_cselib_p): Likewise.\n        * jump.c (rtx_renumbered_equal_p): Likewise.\n        * loop.c (rtx_equal_for_loop_p): Tidy and special case PC, CC0,\n        CONST_INT and CONST_DOUBLE.\n        (rtx_equal_for_prefetch_p): Likewise, plus LABEL_REF.\n        * reload.c (operands_match_p): Special case CONST_INT and\n        CONST_DOUBLE; check mode earlier.\n\nFrom-SVN: r102548", "tree": {"sha": "87062b85bae892f1fff511f8c85752bd8d18e25d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87062b85bae892f1fff511f8c85752bd8d18e25d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37cf61167f3d85b235bec602cef96b6e39764f2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37cf61167f3d85b235bec602cef96b6e39764f2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37cf61167f3d85b235bec602cef96b6e39764f2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37cf61167f3d85b235bec602cef96b6e39764f2c/comments", "author": null, "committer": null, "parents": [{"sha": "13b22d3a861a9d82fe3b70e5cb11ca5c2a9d4c98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13b22d3a861a9d82fe3b70e5cb11ca5c2a9d4c98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13b22d3a861a9d82fe3b70e5cb11ca5c2a9d4c98"}], "stats": {"total": 96, "additions": 79, "deletions": 17}, "files": [{"sha": "07e31b4bf42e8fefc068f7d7c9ce0548f7e1e26a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37cf61167f3d85b235bec602cef96b6e39764f2c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37cf61167f3d85b235bec602cef96b6e39764f2c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=37cf61167f3d85b235bec602cef96b6e39764f2c", "patch": "@@ -1,3 +1,14 @@\n+2005-07-28  Richard Henderson  <rth@redhat.com>\n+\n+\t* cse.c (exp_equiv_p): Special case CONST_DOUBLE.\n+\t* cselib.c (rtx_equal_for_cselib_p): Likewise.\n+\t* jump.c (rtx_renumbered_equal_p): Likewise.\n+\t* loop.c (rtx_equal_for_loop_p): Tidy and special case PC, CC0,\n+\tCONST_INT and CONST_DOUBLE.\n+\t(rtx_equal_for_prefetch_p): Likewise, plus LABEL_REF.\n+\t* reload.c (operands_match_p): Special case CONST_INT and\n+\tCONST_DOUBLE; check mode earlier.\n+\n 2005-07-29  Joseph S. Myers  <joseph@codesourcery.com>\n \n \tPR c/22240"}, {"sha": "1efcf308ae4ced72e6314dae719ca3749cd900ef", "filename": "gcc/cse.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37cf61167f3d85b235bec602cef96b6e39764f2c/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37cf61167f3d85b235bec602cef96b6e39764f2c/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=37cf61167f3d85b235bec602cef96b6e39764f2c", "patch": "@@ -2498,6 +2498,7 @@ exp_equiv_p (rtx x, rtx y, int validate, bool for_gcse)\n     case PC:\n     case CC0:\n     case CONST_INT:\n+    case CONST_DOUBLE:\n       return x == y;\n \n     case LABEL_REF:"}, {"sha": "13fc5326dc0210dea6a2323bccb0faec94568f02", "filename": "gcc/cselib.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37cf61167f3d85b235bec602cef96b6e39764f2c/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37cf61167f3d85b235bec602cef96b6e39764f2c/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=37cf61167f3d85b235bec602cef96b6e39764f2c", "patch": "@@ -462,9 +462,18 @@ rtx_equal_for_cselib_p (rtx x, rtx y)\n   if (GET_CODE (x) != GET_CODE (y) || GET_MODE (x) != GET_MODE (y))\n     return 0;\n \n-  /* This won't be handled correctly by the code below.  */\n-  if (GET_CODE (x) == LABEL_REF)\n-    return XEXP (x, 0) == XEXP (y, 0);\n+  /* These won't be handled correctly by the code below.  */\n+  switch (GET_CODE (x))\n+    {\n+    case CONST_DOUBLE:\n+      return 0;\n+\n+    case LABEL_REF:\n+      return XEXP (x, 0) == XEXP (y, 0);\n+\n+    default:\n+      break;\n+    }\n \n   code = GET_CODE (x);\n   fmt = GET_RTX_FORMAT (code);"}, {"sha": "c278319b4d26f2a44132477d903b19cc81c232d9", "filename": "gcc/jump.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37cf61167f3d85b235bec602cef96b6e39764f2c/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37cf61167f3d85b235bec602cef96b6e39764f2c/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=37cf61167f3d85b235bec602cef96b6e39764f2c", "patch": "@@ -1879,6 +1879,7 @@ rtx_renumbered_equal_p (rtx x, rtx y)\n     case ADDR_VEC:\n     case ADDR_DIFF_VEC:\n     case CONST_INT:\n+    case CONST_DOUBLE:\n       return 0;\n \n     case LABEL_REF:"}, {"sha": "a904881be3d273090605e7ec8a446852452500ff", "filename": "gcc/loop.c", "status": "modified", "additions": 37, "deletions": 7, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37cf61167f3d85b235bec602cef96b6e39764f2c/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37cf61167f3d85b235bec602cef96b6e39764f2c/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=37cf61167f3d85b235bec602cef96b6e39764f2c", "patch": "@@ -2057,14 +2057,26 @@ rtx_equal_for_loop_p (rtx x, rtx y, struct loop_movables *movables,\n   if (GET_MODE (x) != GET_MODE (y))\n     return 0;\n \n-  /* These three types of rtx's can be compared nonrecursively.  */\n-  if (code == REG)\n-    return (REGNO (x) == REGNO (y) || regs_match_p (x, y, movables));\n+  /* These types of rtx's can be compared nonrecursively.  */\n+  switch (code)\n+    {\n+    case PC:\n+    case CC0:\n+    case CONST_INT:\n+    case CONST_DOUBLE:\n+      return 0;\n \n-  if (code == LABEL_REF)\n-    return XEXP (x, 0) == XEXP (y, 0);\n-  if (code == SYMBOL_REF)\n-    return XSTR (x, 0) == XSTR (y, 0);\n+    case REG:\n+      return (REGNO (x) == REGNO (y) || regs_match_p (x, y, movables));\n+\n+    case LABEL_REF:\n+      return XEXP (x, 0) == XEXP (y, 0);\n+    case SYMBOL_REF:\n+      return XSTR (x, 0) == XSTR (y, 0);\n+\n+    default:\n+      break;\n+    }\n \n   /* Compare the elements.  If any pair of corresponding elements\n      fail to match, return 0 for the whole things.  */\n@@ -3984,6 +3996,24 @@ rtx_equal_for_prefetch_p (rtx x, rtx y)\n   if (code != GET_CODE (y))\n     return 0;\n \n+  if (GET_MODE (x) != GET_MODE (y))\n+    return 0;\n+\n+  switch (code)\n+    {\n+    case PC:\n+    case CC0:\n+    case CONST_INT:\n+    case CONST_DOUBLE:\n+      return 0;\n+\n+    case LABEL_REF:\n+      return XEXP (x, 0) == XEXP (y, 0);\n+\n+    default:\n+      break;\n+    }\n+\n   if (COMMUTATIVE_ARITH_P (x))\n     {\n       return ((rtx_equal_for_prefetch_p (XEXP (x, 0), XEXP (y, 0))"}, {"sha": "378db66aeaceab08db63ae902bb6b79d7f51a220", "filename": "gcc/reload.c", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37cf61167f3d85b235bec602cef96b6e39764f2c/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37cf61167f3d85b235bec602cef96b6e39764f2c/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=37cf61167f3d85b235bec602cef96b6e39764f2c", "patch": "@@ -2208,20 +2208,30 @@ operands_match_p (rtx x, rtx y)\n \n  slow:\n \n-  /* Now we have disposed of all the cases\n-     in which different rtx codes can match.  */\n+  /* Now we have disposed of all the cases in which different rtx codes\n+     can match.  */\n   if (code != GET_CODE (y))\n     return 0;\n-  if (code == LABEL_REF)\n-    return XEXP (x, 0) == XEXP (y, 0);\n-  if (code == SYMBOL_REF)\n-    return XSTR (x, 0) == XSTR (y, 0);\n \n   /* (MULT:SI x y) and (MULT:HI x y) are NOT equivalent.  */\n-\n   if (GET_MODE (x) != GET_MODE (y))\n     return 0;\n \n+  switch (code)\n+    {\n+    case CONST_INT:\n+    case CONST_DOUBLE:\n+      return 0;\n+\n+    case LABEL_REF:\n+      return XEXP (x, 0) == XEXP (y, 0);\n+    case SYMBOL_REF:\n+      return XSTR (x, 0) == XSTR (y, 0);\n+\n+    default:\n+      break;\n+    }\n+\n   /* Compare the elements.  If any pair of corresponding elements\n      fail to match, return 0 for the whole things.  */\n "}]}