{"sha": "f67358da6b409b2f7109596bbf4be7af99963f05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY3MzU4ZGE2YjQwOWIyZjcxMDk1OTZiYmY0YmU3YWY5OTk2M2YwNQ==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2008-08-28T18:03:51Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2008-08-28T18:03:51Z"}, "message": "arm.c (TARGET_MAX_ANCHOR_OFFSET): New.\n\n2008-08-28  Paul Brook  <paul@codesourcery.com>\n\tMark Shinwell  <shinwell@codesourcery.com>\n\tRichard Earnshaw  <richard.earnshaw@arm.com>\n\n\tgcc/\n\t* config/arm/arm.c (TARGET_MAX_ANCHOR_OFFSET): New.\n\t(TARGET_MIN_ANCHOR_OFFSET): New.\n\t(arm_override_options): Set correct anchor ranges for Thumb-1\n\tand Thumb-2 if required.\n\t(legitimize_pic_address): Handle case involving a TLS symbol\n\treference with an addend.\n\t(arm_optimization_options): Enable section anchors at -O1 and\n\tabove.\n\t* config/arm/arm.h (OPTIMIZATION_OPTIONS): New.\n\t* config/arm/arm-protos.h (arm_optimization_options): New.\n\n\nCo-Authored-By: Mark Shinwell <shinwell@codesourcery.com>\nCo-Authored-By: Richard Earnshaw <rearnsha@arm.com>\n\nFrom-SVN: r139725", "tree": {"sha": "1c12611ba31e58c06be444aa34d5cc5197c403f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c12611ba31e58c06be444aa34d5cc5197c403f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f67358da6b409b2f7109596bbf4be7af99963f05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f67358da6b409b2f7109596bbf4be7af99963f05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f67358da6b409b2f7109596bbf4be7af99963f05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f67358da6b409b2f7109596bbf4be7af99963f05/comments", "author": null, "committer": null, "parents": [{"sha": "8e1f752a2627ad49b06825cb95d6a3520512f210", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e1f752a2627ad49b06825cb95d6a3520512f210", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e1f752a2627ad49b06825cb95d6a3520512f210"}], "stats": {"total": 69, "additions": 69, "deletions": 0}, "files": [{"sha": "0f652e6cc289341b361ca4ec7080e9a32e12bc9e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f67358da6b409b2f7109596bbf4be7af99963f05/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f67358da6b409b2f7109596bbf4be7af99963f05/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f67358da6b409b2f7109596bbf4be7af99963f05", "patch": "@@ -1,3 +1,18 @@\n+2008-08-28  Paul Brook  <paul@codesourcery.com>\n+\tMark Shinwell  <shinwell@codesourcery.com>\n+\tRichard Earnshaw  <richard.earnshaw@arm.com>\n+\n+\t* config/arm/arm.c (TARGET_MAX_ANCHOR_OFFSET): New.\n+\t(TARGET_MIN_ANCHOR_OFFSET): New.\n+\t(arm_override_options): Set correct anchor ranges for Thumb-1\n+\tand Thumb-2 if required.\n+\t(legitimize_pic_address): Handle case involving a TLS symbol\n+\treference with an addend.\n+\t(arm_optimization_options): Enable section anchors at -O1 and\n+\tabove.\n+\t* config/arm/arm.h (OPTIMIZATION_OPTIONS): New.\n+\t* config/arm/arm-protos.h (arm_optimization_options): New.\n+\n 2008-08-28  Nick Clifton  <nickc@redhat.com>\n \n \t* config/stormy16/stormy16.h (IRA_COVER_CLASSES): Define."}, {"sha": "d0e408ccf1ddc5c6f17d45be4507a9fdc9a427be", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f67358da6b409b2f7109596bbf4be7af99963f05/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f67358da6b409b2f7109596bbf4be7af99963f05/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=f67358da6b409b2f7109596bbf4be7af99963f05", "patch": "@@ -24,6 +24,7 @@\n #define GCC_ARM_PROTOS_H\n \n extern void arm_override_options (void);\n+extern void arm_optimization_options (int, int);\n extern int use_return_insn (int, rtx);\n extern int arm_regno_class (int);\n extern void arm_load_pic_register (unsigned long);"}, {"sha": "888a2421470c92ed7f98153f768f8191e7f8070d", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f67358da6b409b2f7109596bbf4be7af99963f05/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f67358da6b409b2f7109596bbf4be7af99963f05/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=f67358da6b409b2f7109596bbf4be7af99963f05", "patch": "@@ -367,6 +367,15 @@ static bool arm_allocate_stack_slots_for_args (void);\n #undef TARGET_CANNOT_FORCE_CONST_MEM\n #define TARGET_CANNOT_FORCE_CONST_MEM arm_cannot_force_const_mem\n \n+#undef TARGET_MAX_ANCHOR_OFFSET\n+#define TARGET_MAX_ANCHOR_OFFSET 4095\n+\n+/* The minimum is set such that the total size of the block\n+   for a particular anchor is -4088 + 1 + 4095 bytes, which is\n+   divisible by eight, ensuring natural spacing of anchors.  */\n+#undef TARGET_MIN_ANCHOR_OFFSET\n+#define TARGET_MIN_ANCHOR_OFFSET -4088\n+\n #undef TARGET_SCHED_ISSUE_RATE\n #define TARGET_SCHED_ISSUE_RATE arm_issue_rate\n \n@@ -1267,6 +1276,27 @@ arm_override_options (void)\n   arm_arch_iwmmxt = (insn_flags & FL_IWMMXT) != 0;\n   arm_arch_hwdiv = (insn_flags & FL_DIV) != 0;\n \n+  /* If we are not using the default (ARM mode) section anchor offset\n+     ranges, then set the correct ranges now.  */\n+  if (TARGET_THUMB1)\n+    {\n+      /* Thumb-1 LDR instructions cannot have negative offsets.\n+         Permissible positive offset ranges are 5-bit (for byte loads),\n+         6-bit (for halfword loads), or 7-bit (for word loads).\n+         Empirical results suggest a 7-bit anchor range gives the best\n+         overall code size.  */\n+      targetm.min_anchor_offset = 0;\n+      targetm.max_anchor_offset = 127;\n+    }\n+  else if (TARGET_THUMB2)\n+    {\n+      /* The minimum is set such that the total size of the block\n+         for a particular anchor is 248 + 1 + 4095 bytes, which is\n+         divisible by eight, ensuring natural spacing of anchors.  */\n+      targetm.min_anchor_offset = -248;\n+      targetm.max_anchor_offset = 4095;\n+    }\n+\n   /* V5 code we generate is completely interworking capable, so we turn off\n      TARGET_INTERWORK here to avoid many tests later on.  */\n \n@@ -3493,10 +3523,22 @@ legitimize_pic_address (rtx orig, enum machine_mode mode, rtx reg)\n \t  && XEXP (XEXP (orig, 0), 0) == cfun->machine->pic_reg)\n \treturn orig;\n \n+      /* Handle the case where we have: const (UNSPEC_TLS).  */\n       if (GET_CODE (XEXP (orig, 0)) == UNSPEC\n \t  && XINT (XEXP (orig, 0), 1) == UNSPEC_TLS)\n \treturn orig;\n \n+      /* Handle the case where we have:\n+         const (plus (UNSPEC_TLS) (ADDEND)).  The ADDEND must be a\n+         CONST_INT.  */\n+      if (GET_CODE (XEXP (orig, 0)) == PLUS\n+          && GET_CODE (XEXP (XEXP (orig, 0), 0)) == UNSPEC\n+          && XINT (XEXP (XEXP (orig, 0), 0), 1) == UNSPEC_TLS)\n+        {\n+\t  gcc_assert (GET_CODE (XEXP (XEXP (orig, 0), 1)) == CONST_INT);\n+\t  return orig;\n+\t}\n+\n       if (reg == 0)\n \t{\n \t  gcc_assert (can_create_pseudo_p ());\n@@ -19066,4 +19108,12 @@ arm_order_regs_for_local_alloc (void)\n             sizeof (thumb_core_reg_alloc_order));\n }\n \n+/* Set default optimization options.  */\n+void\n+arm_optimization_options (int level, int size ATTRIBUTE_UNUSED)\n+{\n+  /* Enable section anchors by default at -O1 or higher.  */\n+  flag_section_anchors = (level > 0 ? 1 : 0);\n+}\n+\n #include \"gt-arm.h\""}, {"sha": "2f236e02442d630a2cc9c5fcefc7116c829149e6", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f67358da6b409b2f7109596bbf4be7af99963f05/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f67358da6b409b2f7109596bbf4be7af99963f05/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=f67358da6b409b2f7109596bbf4be7af99963f05", "patch": "@@ -427,6 +427,9 @@ extern int arm_arch_hwdiv;\n \n #define OVERRIDE_OPTIONS  arm_override_options ()\n \n+#define OPTIMIZATION_OPTIONS(LEVEL,SIZE)\t\t\\\n+\tarm_optimization_options ((LEVEL), (SIZE))\n+\n /* Nonzero if PIC code requires explicit qualifiers to generate\n    PLT and GOT relocs rather than the assembler doing so implicitly.\n    Subtargets can override these if required.  */"}]}