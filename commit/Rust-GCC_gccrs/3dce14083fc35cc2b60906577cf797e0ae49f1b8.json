{"sha": "3dce14083fc35cc2b60906577cf797e0ae49f1b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RjZTE0MDgzZmMzNWNjMmI2MDkwNjU3N2NmNzk3ZTBhZTQ5ZjFiOA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-07-03T04:24:01Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-07-03T04:24:01Z"}, "message": "system.h: Include filenames.h.\n\n\t* system.h: Include filenames.h.\n\t(IS_DIR_SEPARATOR, IS_ABSOLUTE_PATHNAME): Don't define.\n\t(DIR_SEPARATOR, DIR_SEPARATOR_2): If not already defined,\n\tdefine based on HAVE_DOS_BASED_FILE_SYSTEM.\n\t* config/i386/xm-cygwin.h, config/i386/xm-djgpp.h\n\t* config/i386/xm-mingw32.h: Don't define\n\tHAVE_DOS_BASED_FILE_SYSTEM,\n\tDIR_SEPARATOR, or DIR_SEPARATOR_2.\n\t* doc/hostconfig.texi: Update to match.\n\n\t* cppfiles.c, gcc.c, gensupport.c, protoize.c,\n\tconfig/i386/cygwin.h:\n\tUse IS_ABSOLUTE_PATH throughout.\n\t* gcc.c (DIR_UP): Delete, unused.\n\t* protoize.c (IS_SAME_PATH): Define in terms of\n\tFILENAME_CMP.\n\t(is_abspath): Delete.\njava:\n\t* jcf-path.c: Don't default-define PATH_SEPARATOR nor\n\tDIR_SEPARATOR.\n\tUse FILENAME_CMP.\n\t* jcf-write.c: Don't default-define DIR_SEPARATOR.\n\t* jcf.h: Delete COMPARE_FILENAMES definition.\n\nFrom-SVN: r68863", "tree": {"sha": "37ea22037f920e97ce155abc8dd8f4290af8dba6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37ea22037f920e97ce155abc8dd8f4290af8dba6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3dce14083fc35cc2b60906577cf797e0ae49f1b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dce14083fc35cc2b60906577cf797e0ae49f1b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dce14083fc35cc2b60906577cf797e0ae49f1b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dce14083fc35cc2b60906577cf797e0ae49f1b8/comments", "author": null, "committer": null, "parents": [{"sha": "bacb96b24f038ebc8072abfcdb145ff6568a8554", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bacb96b24f038ebc8072abfcdb145ff6568a8554", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bacb96b24f038ebc8072abfcdb145ff6568a8554"}], "stats": {"total": 242, "additions": 92, "deletions": 150}, "files": [{"sha": "576d2ebee7ce6856e7fb5b53bc6fee86c57d012e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dce14083fc35cc2b60906577cf797e0ae49f1b8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dce14083fc35cc2b60906577cf797e0ae49f1b8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3dce14083fc35cc2b60906577cf797e0ae49f1b8", "patch": "@@ -1,3 +1,23 @@\n+2003-07-02  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* system.h: Include filenames.h.\n+\t(IS_DIR_SEPARATOR, IS_ABSOLUTE_PATHNAME): Don't define.\n+\t(DIR_SEPARATOR, DIR_SEPARATOR_2): If not already defined,\n+\tdefine based on HAVE_DOS_BASED_FILE_SYSTEM.\n+\t* config/i386/xm-cygwin.h, config/i386/xm-djgpp.h\n+\t* config/i386/xm-mingw32.h: Don't define\n+\tHAVE_DOS_BASED_FILE_SYSTEM,\n+\tDIR_SEPARATOR, or DIR_SEPARATOR_2.\n+\t* doc/hostconfig.texi: Update to match.\n+\n+\t* cppfiles.c, gcc.c, gensupport.c, protoize.c,\n+\tconfig/i386/cygwin.h:\n+\tUse IS_ABSOLUTE_PATH throughout.\n+\t* gcc.c (DIR_UP): Delete, unused.\n+\t* protoize.c (IS_SAME_PATH): Define in terms of\n+\tFILENAME_CMP.\n+\t(is_abspath): Delete.\n+\n 2003-07-02  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/i386/emmintrin.h: Fix comment typos.\n@@ -136,7 +156,7 @@ Wed Jul  2 08:12:36 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \t(DEFAULT_SIGNED_CHAR): Likewise.\n \t(ASM_OUTPUT_ASCII): Moved here from iris4.h.\n \tFix IRIX spelling.\n-\t\n+\n \t* config/mips/iris3.h: Remove, unused.\n \t* config/mips/iris4.h: Likewise.\n \n@@ -148,7 +168,7 @@ Wed Jul  2 08:12:36 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* config/mips/iris5.h: Move explicit includes ...\n \t* config.gcc (mips-sgi-irix6*o32, mips-sgi-irix5*): ... here.\n-\t\n+\n \t* config/mips/iris6.h (MIPS_ISA_DEFAULT, MIPS_ABI_DEFAULT): Move ...\n \t* config.gcc (mips-sgi-irix6*, mips-sgi-irix5cross64): ... here to\n \ttm_defines.\n@@ -159,7 +179,7 @@ Wed Jul  2 08:12:36 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* config/mips/iris6.h: Fix IRIX spelling.\n \t(MULTILIB_DEFAULTS): Undef before redefinition.\n-\t\n+\n \t* config/mips/iris6.h: Move explicit includes ...\n \t* config.gcc (mips-sgi-irix6*, mips-sgi-irix5cross64): ... here.\n \n@@ -210,15 +230,15 @@ Wed Jul  2 02:12:51 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* dbxout.c (DBXOUT_DECR_NESTING): Emit pending bincls, if required.\n \t(binclstatus): New.\n-\t(struct dbx_file): New members - bincl_status, pending_bincl_name and \n+\t(struct dbx_file): New members - bincl_status, pending_bincl_name and\n \tprev.\n \t(pending_bincls): New.\n \t(dbxout_init): Initialize new dbx_file members.\n \t(dbxout_start_source_file): Same.\n \t(emit_bincl_stab): New function.\n \t(emit_pending_bincls): Same.\n \t(emit_pending_bincls_if_required): Same.\n-\t(dbxout_end_source_file): Emit EINCL stab only if BINCL is  already \n+\t(dbxout_end_source_file): Emit EINCL stab only if BINCL is  already\n \tprocessed.\n \t(dbxout_begin_block): Emit pending BINCL stabs.\n \t(dbxout_end_block): Same.\n@@ -229,7 +249,7 @@ Wed Jul  2 02:12:51 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \t(dbxout_symbol): Same.\n \t(dbxout_symbol_location): Same.\n \t(dbxout_parms): Same.\n-\t\n+\n 2003-07-01  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* c-semantics.c (genrtl_case_label): Fix format specifier bug.\n@@ -472,7 +492,7 @@ Wed Jul  2 02:12:51 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \tdisplacements.\n \n 2003-06-30  Hartmut Penner  <hpenner@de.ibm.com>\n-            Ulrich Weigand  <uweigand@de.ibm.com>\n+\t    Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* config/s390/2084.md: New file.\n \t* config/s390/s390.md: Include it.\n@@ -607,8 +627,8 @@ Mon Jun 30 15:36:29 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n 2003-06-30 Hartmut Penner  <hpenner@de.ibm.com>\n \n-        * config/rs6000/rs6000.c (rs6000_split_altivec_in_gprs): New function.\n-        (altivec_in_gprs_p): New function.\n+\t* config/rs6000/rs6000.c (rs6000_split_altivec_in_gprs): New function.\n+\t(altivec_in_gprs_p): New function.\n \n \t* config/rs6000/rs6000-protos (rs6000_split_altivec_in_gprs): New\n \tprototype.\n@@ -730,7 +750,7 @@ Sun Jun 29 23:06:32 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n 2003-06-29  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n-        * pa.c (update_total_code_bytes): New function.\n+\t* pa.c (update_total_code_bytes): New function.\n \t(last_address): Number of bytes output for a function and its\n \tassociated thunks.\n \t(compute_frame_size): Use BITS_PER_UNIT."}, {"sha": "ea505741f3ccf9e59d36e3f567cc6f52a82467c0", "filename": "gcc/config/i386/cygwin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dce14083fc35cc2b60906577cf797e0ae49f1b8/gcc%2Fconfig%2Fi386%2Fcygwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dce14083fc35cc2b60906577cf797e0ae49f1b8/gcc%2Fconfig%2Fi386%2Fcygwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin.h?ref=3dce14083fc35cc2b60906577cf797e0ae49f1b8", "patch": "@@ -213,7 +213,7 @@ do \\\n { \\\n   char *cprefix = concat (tooldir_base_prefix, spec_machine, \\\n \t\t\t  dir_separator_str, NULL); \\\n-  if (!IS_ABSOLUTE_PATHNAME (cprefix)) \\\n+  if (!IS_ABSOLUTE_PATH (cprefix)) \\\n     cprefix = concat (standard_exec_prefix, spec_machine, dir_separator_str, \\\n \t\t      spec_version, dir_separator_str, tooldir_prefix, NULL); \\\n   add_prefix (&exec_prefixes,\\"}, {"sha": "390e18e01e3acd8bcc1767b69d027c9b3f4b3a41", "filename": "gcc/config/i386/xm-cygwin.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dce14083fc35cc2b60906577cf797e0ae49f1b8/gcc%2Fconfig%2Fi386%2Fxm-cygwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dce14083fc35cc2b60906577cf797e0ae49f1b8/gcc%2Fconfig%2Fi386%2Fxm-cygwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxm-cygwin.h?ref=3dce14083fc35cc2b60906577cf797e0ae49f1b8", "patch": "@@ -20,16 +20,3 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n #define HOST_EXECUTABLE_SUFFIX \".exe\"\n-\n-/* Even though Cygwin tries to hide the DOS based filesystem, it\n-   still shows though at times.  */\n-#define HAVE_DOS_BASED_FILE_SYSTEM\n-\n-/* We support both \"/\" and \"\\\" since everybody tests both but we\n-   default to \"/\".  This is important because if gcc produces Win32\n-   paths containing backslashes, make and configure may treat the\n-   backslashes as escape characters.  Many Win32 programs use forward\n-   slashes so using a forward slash shouldn't be problematic from the\n-   perspective of wanting gcc to produce native Win32 paths.  */\n-#undef DIR_SEPARATOR_2\n-#define DIR_SEPARATOR_2 '\\\\'"}, {"sha": "a0457b7af0aa7eeea9b9b10c1032a0ae8709867d", "filename": "gcc/config/i386/xm-djgpp.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dce14083fc35cc2b60906577cf797e0ae49f1b8/gcc%2Fconfig%2Fi386%2Fxm-djgpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dce14083fc35cc2b60906577cf797e0ae49f1b8/gcc%2Fconfig%2Fi386%2Fxm-djgpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxm-djgpp.h?ref=3dce14083fc35cc2b60906577cf797e0ae49f1b8", "patch": "@@ -23,13 +23,6 @@ Boston, MA 02111-1307, USA.  */\n \n #define HOST_EXECUTABLE_SUFFIX \".exe\"\n \n-/* Even though we support \"/\", allow \"\\\" since everybody tests both.  */\n-#define DIR_SEPARATOR '/'\n-#define DIR_SEPARATOR_2 '\\\\'\n-\n-/* Allow test for DOS drive names.  */\n-#define HAVE_DOS_BASED_FILE_SYSTEM\n-\n /* System dependent initialization for collect2\n    to tell system() to act like Unix.  */\n #define COLLECT2_HOST_INITIALIZATION \\"}, {"sha": "9984bf93cfba5c79cbf9dabbdec609e42ee75edf", "filename": "gcc/config/i386/xm-mingw32.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dce14083fc35cc2b60906577cf797e0ae49f1b8/gcc%2Fconfig%2Fi386%2Fxm-mingw32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dce14083fc35cc2b60906577cf797e0ae49f1b8/gcc%2Fconfig%2Fi386%2Fxm-mingw32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxm-mingw32.h?ref=3dce14083fc35cc2b60906577cf797e0ae49f1b8", "patch": "@@ -19,14 +19,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* Even though we support \"/\", allow \"\\\" since everybody tests both.  */\n-#define DIR_SEPARATOR '\\\\'\n-#define DIR_SEPARATOR_2 '/'\n-\n-/* Mingw32 does not try to hide the underlying DOS-based file system\n-   like Cygwin does.  */\n-#define HAVE_DOS_BASED_FILE_SYSTEM\n-\n #define HOST_EXECUTABLE_SUFFIX \".exe\"\n \n #undef PATH_SEPARATOR"}, {"sha": "019b005931899736668f213d63a2eba1565329a1", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dce14083fc35cc2b60906577cf797e0ae49f1b8/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dce14083fc35cc2b60906577cf797e0ae49f1b8/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=3dce14083fc35cc2b60906577cf797e0ae49f1b8", "patch": "@@ -547,7 +547,7 @@ cpp_included (cpp_reader *pfile, const char *fname)\n   char *name, *n;\n   splay_tree_node nd;\n \n-  if (IS_ABSOLUTE_PATHNAME (fname))\n+  if (IS_ABSOLUTE_PATH (fname))\n     {\n       /* Just look it up.  */\n       nd = splay_tree_lookup (pfile->all_include_files, (splay_tree_key) fname);\n@@ -592,7 +592,7 @@ find_include_file (cpp_reader *pfile, const char *fname, int angle_brackets,\n       return NO_INCLUDE_PATH;\n     }\n \n-  if (IS_ABSOLUTE_PATHNAME (fname))\n+  if (IS_ABSOLUTE_PATH (fname))\n     return open_file_pch (pfile, fname);\n \n   /* For #include_next, skip in the search path past the dir in which\n@@ -962,7 +962,7 @@ read_name_map (cpp_reader *pfile, const char *dirname)\n \t  ptr->map_from = from;\n \n \t  /* Make the real filename absolute.  */\n-\t  if (IS_ABSOLUTE_PATHNAME (to))\n+\t  if (IS_ABSOLUTE_PATH (to))\n \t    ptr->map_to = to;\n \t  else\n \t    {"}, {"sha": "626a893c167a78204ece3d1c7e4e5acf9cbb73e9", "filename": "gcc/doc/hostconfig.texi", "status": "modified", "additions": 27, "deletions": 22, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dce14083fc35cc2b60906577cf797e0ae49f1b8/gcc%2Fdoc%2Fhostconfig.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dce14083fc35cc2b60906577cf797e0ae49f1b8/gcc%2Fdoc%2Fhostconfig.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fhostconfig.texi?ref=3dce14083fc35cc2b60906577cf797e0ae49f1b8", "patch": "@@ -47,35 +47,40 @@ common thing to do in this hook is to detect stack overflow.\n @cindex configuration file\n @cindex @file{xm-@var{machine}.h}\n \n-GCC supports some filesystems that are very different to standard Unix\n-filesystems.  These macros, defined in @file{xm-@var{machine}.h},\n-let you choose.\n+GCC needs to know a number of things about the semantics of the host\n+machine's filesystem.  Filesystems with Unix and MS-DOS semantics are\n+automatically detected.  For other systems, you can define the\n+following macros in @file{xm-@var{machine}.h}.\n \n @ftable @code\n-@item VMS\n-Define this macro if the host system is VMS@.\n-\n @item HAVE_DOS_BASED_FILE_SYSTEM\n-Define this macro if the host file system obeys the semantics defined by\n-MS-DOS instead of Unix.  DOS file systems are case insensitive, file\n-specifications may begin with a drive letter, and both forward slash and\n-backslash (@samp{/} and @samp{\\}) are directory separators.  If you\n-define this macro, you probably need to define the next three macros too.\n-\n-@item PATH_SEPARATOR\n-If defined, this macro should expand to a character constant specifying\n-the separator for elements of search paths.  The default value is a\n-colon (@samp{:}).  DOS-based systems usually use semicolon (@samp{;}).\n+This macro is automatically defined by @file{system.h} if the host\n+file system obeys the semantics defined by MS-DOS instead of Unix.\n+DOS file systems are case insensitive, file specifications may begin\n+with a drive letter, and both forward slash and backslash (@samp{/}\n+and @samp{\\}) are directory separators.\n \n @item DIR_SEPARATOR\n @itemx DIR_SEPARATOR_2\n If defined, these macros expand to character constants specifying\n-separators for directory names within a file specification.  They are\n-used somewhat inconsistently throughout the compiler.  If your system\n-behaves like Unix (only forward slash separates pathnames), define\n-neither of them.  If your system behaves like DOS (both forward and\n-backward slash can be used), define @code{DIR_SEPARATOR} to @samp{/}\n-and @code{DIR_SEPARATOR_2} to @samp{\\}.\n+separators for directory names within a file specification.\n+@file{system.h} will automatically give them appropriate values on\n+Unix and MS-DOS file systems.  If your file system is neither of\n+these, define one or both appropriately in @file{xm-@var{machine}.h}.\n+\n+However, operating systems like VMS, where constructing a pathname is\n+more complicated than just stringing together directory names\n+separated by a special character, should not define either of these\n+macros.\n+\n+@item PATH_SEPARATOR\n+If defined, this macro should expand to a character constant\n+specifying the separator for elements of search paths.  The default\n+value is a colon (@samp{:}).  DOS-based systems usually, but not\n+always, use semicolon (@samp{;}).\n+\n+@item VMS\n+Define this macro if the host system is VMS@.\n \n @item HOST_OBJECT_SUFFIX\n Define this macro to be a C string representing the suffix for object"}, {"sha": "212685e9268809415e359f53688374acbfa27e7f", "filename": "gcc/gcc.c", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dce14083fc35cc2b60906577cf797e0ae49f1b8/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dce14083fc35cc2b60906577cf797e0ae49f1b8/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=3dce14083fc35cc2b60906577cf797e0ae49f1b8", "patch": "@@ -111,14 +111,6 @@ extern int getrusage PARAMS ((int, struct rusage *));\n #define TARGET_OBJECT_SUFFIX \".o\"\n #endif\n \n-#ifndef VMS\n-/* FIXME: the location independence code for VMS is hairier than this,\n-   and hasn't been written.  */\n-#ifndef DIR_UP\n-#define DIR_UP \"..\"\n-#endif /* DIR_UP */\n-#endif /* VMS */\n-\n static const char dir_separator_str[] = { DIR_SEPARATOR, 0 };\n \n /* Most every one is fine with LIBRARY_PATH.  For some, it conflicts.  */\n@@ -2442,7 +2434,7 @@ find_a_file (pprefix, name, mode, multilib)\n \n   /* Determine the filename to execute (special case for absolute paths).  */\n \n-  if (IS_ABSOLUTE_PATHNAME (name))\n+  if (IS_ABSOLUTE_PATH (name))\n     {\n       if (access (name, mode) == 0)\n \t{\n@@ -2626,7 +2618,7 @@ add_sysrooted_prefix (pprefix, prefix, component, priority,\n      int *warn;\n      int os_multilib;\n {\n-  if (!IS_ABSOLUTE_PATHNAME (prefix))\n+  if (!IS_ABSOLUTE_PATH (prefix))\n     abort ();\n \n   if (target_system_root)\n@@ -3823,7 +3815,7 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n      directories, so that we can search both the user specified directory\n      and the standard place.  */\n \n-  if (!IS_ABSOLUTE_PATHNAME (tooldir_prefix))\n+  if (!IS_ABSOLUTE_PATH (tooldir_prefix))\n     {\n       if (gcc_exec_prefix)\n \t{\n@@ -4530,7 +4522,7 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t\t  /* Relative directories always come from -B,\n \t\t     and it is better not to use them for searching\n \t\t     at run time.  In particular, stage1 loses.  */\n-\t\t  if (!IS_ABSOLUTE_PATHNAME (pl->prefix))\n+\t\t  if (!IS_ABSOLUTE_PATH (pl->prefix))\n \t\t    continue;\n #endif\n \t\t  /* Try subdirectory if there is one.  */\n@@ -6205,7 +6197,7 @@ main (argc, argv)\n \t standard_exec_prefix.  This lets us move the installed tree\n \t as a unit.  If GCC_EXEC_PREFIX is defined, base\n \t standard_startfile_prefix on that as well.  */\n-      if (IS_ABSOLUTE_PATHNAME (standard_startfile_prefix))\n+      if (IS_ABSOLUTE_PATH (standard_startfile_prefix))\n \tadd_sysrooted_prefix (&startfile_prefixes,\n \t\t\t      standard_startfile_prefix, \"BINUTILS\",\n \t\t\t      PREFIX_PRIORITY_LAST, 0, NULL, 1);\n@@ -7453,7 +7445,7 @@ if_exists_spec_function (argc, argv)\n      const char **argv;\n {\n   /* Must have only one argument.  */\n-  if (argc == 1 && IS_ABSOLUTE_PATHNAME (argv[0]) && ! access (argv[0], R_OK))\n+  if (argc == 1 && IS_ABSOLUTE_PATH (argv[0]) && ! access (argv[0], R_OK))\n     return argv[0];\n \n   return NULL;\n@@ -7473,7 +7465,7 @@ if_exists_else_spec_function (argc, argv)\n   if (argc != 2)\n     return NULL;\n \n-  if (IS_ABSOLUTE_PATHNAME (argv[0]) && ! access (argv[0], R_OK))\n+  if (IS_ABSOLUTE_PATH (argv[0]) && ! access (argv[0], R_OK))\n     return argv[0];\n \n   return argv[1];"}, {"sha": "a255a7254d18624776f8a52bc20bd954d92939c1", "filename": "gcc/gensupport.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dce14083fc35cc2b60906577cf797e0ae49f1b8/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dce14083fc35cc2b60906577cf797e0ae49f1b8/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=3dce14083fc35cc2b60906577cf797e0ae49f1b8", "patch": "@@ -195,7 +195,7 @@ process_include (rtx desc, int lineno)\n   FILE *input_file;\n \n   /* If specified file name is absolute, skip the include stack.  */\n-  if (! IS_ABSOLUTE_PATHNAME (filename))\n+  if (! IS_ABSOLUTE_PATH (filename))\n     {\n       struct file_name_list *stackp;\n "}, {"sha": "db3a7b0b724d747a52b03ae85e063ee68e092295", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dce14083fc35cc2b60906577cf797e0ae49f1b8/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dce14083fc35cc2b60906577cf797e0ae49f1b8/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=3dce14083fc35cc2b60906577cf797e0ae49f1b8", "patch": "@@ -1,3 +1,11 @@\n+2003-07-02  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* jcf-path.c: Don't default-define PATH_SEPARATOR nor\n+\tDIR_SEPARATOR.\n+\tUse FILENAME_CMP.\n+\t* jcf-write.c: Don't default-define DIR_SEPARATOR.\n+\t* jcf.h: Delete COMPARE_FILENAMES definition.\n+\n 2003-07-02  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* lang.c (java_init_options): Update prototype."}, {"sha": "eae44c0b1303858d68e5585f8af1dcdbe25c7f63", "filename": "gcc/java/jcf-path.c", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dce14083fc35cc2b60906577cf797e0ae49f1b8/gcc%2Fjava%2Fjcf-path.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dce14083fc35cc2b60906577cf797e0ae49f1b8/gcc%2Fjava%2Fjcf-path.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-path.c?ref=3dce14083fc35cc2b60906577cf797e0ae49f1b8", "patch": "@@ -34,15 +34,6 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n \n #include \"jcf.h\"\n \n-/* By default, colon separates directories in a path.  */\n-#ifndef PATH_SEPARATOR\n-#define PATH_SEPARATOR ':'\n-#endif\n-\n-#ifndef DIR_SEPARATOR\n-#define DIR_SEPARATOR '/'\n-#endif\n-\n #ifndef DIR_UP\n #define DIR_UP \"..\"\n #endif\n@@ -147,15 +138,15 @@ add_entry (struct entry **entp, const char *filename, int is_system)\n \n   len = strlen (filename);\n \n-  if (len > 4 && (COMPARE_FILENAMES (filename + len - 4, \".zip\") == 0\n-\t\t  || COMPARE_FILENAMES (filename + len - 4, \".jar\") == 0))\n+  if (len > 4 && (FILENAME_CMP (filename + len - 4, \".zip\") == 0\n+\t\t  || FILENAME_CMP (filename + len - 4, \".jar\") == 0))\n     {\n       n->flags |= FLAG_ZIP;\n       /* If the user uses -classpath then he'll have to include\n \t libgcj.jar in the value.  We check for this in a simplistic\n \t way.  Symlinks will fool this test.  This is only used for\n \t -MM and -MMD, so it probably isn't terribly important.  */\n-      if (! COMPARE_FILENAMES (filename, LIBGCJ_ZIP_FILE))\n+      if (! FILENAME_CMP (filename, LIBGCJ_ZIP_FILE))\n \tn->flags |= FLAG_SYSTEM;\n     }\n "}, {"sha": "fcdd42447b4abe82808abde7f15370d3d2e3b69b", "filename": "gcc/java/jcf-write.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dce14083fc35cc2b60906577cf797e0ae49f1b8/gcc%2Fjava%2Fjcf-write.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dce14083fc35cc2b60906577cf797e0ae49f1b8/gcc%2Fjava%2Fjcf-write.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-write.c?ref=3dce14083fc35cc2b60906577cf797e0ae49f1b8", "patch": "@@ -40,10 +40,6 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"ggc.h\"\n #include \"tm_p.h\"\n \n-#ifndef DIR_SEPARATOR\n-#define DIR_SEPARATOR '/'\n-#endif\n-\n extern struct obstack temporary_obstack;\n \n /* Base directory in which `.class' files should be written."}, {"sha": "970656732c063f4b271225f7ebdfe0935ea9180f", "filename": "gcc/java/jcf.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dce14083fc35cc2b60906577cf797e0ae49f1b8/gcc%2Fjava%2Fjcf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dce14083fc35cc2b60906577cf797e0ae49f1b8/gcc%2Fjava%2Fjcf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf.h?ref=3dce14083fc35cc2b60906577cf797e0ae49f1b8", "patch": "@@ -54,15 +54,6 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #define JCF_USE_SCANDIR 0\n #endif \n \n-/* On case-insensitive file systems, file name components must be \n-   compared using \"strcasecmp\", if available, instead of \"strcmp\".\n-   Assumes \"config.h\" has already been included.  */\n-#if defined (HAVE_DOS_BASED_FILE_SYSTEM) && defined (HAVE_STRCASECMP)\n-#define COMPARE_FILENAMES(X, Y) strcasecmp ((X), (Y))\n-#else\n-#define COMPARE_FILENAMES(X, Y) strcmp ((X), (Y))\n-#endif\n-\n /* On case-insensitive file systems, we need to ensure that a request\n    to open a .java or .class file is honored only if the file to be\n    opened is of the exact case we are asking for. In other words, we"}, {"sha": "2f86de7106c6792f26f856a9e1b2bfdb71c85ce4", "filename": "gcc/protoize.c", "status": "modified", "additions": 4, "deletions": 23, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dce14083fc35cc2b60906577cf797e0ae49f1b8/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dce14083fc35cc2b60906577cf797e0ae49f1b8/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=3dce14083fc35cc2b60906577cf797e0ae49f1b8", "patch": "@@ -48,11 +48,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #endif\n \n /* Macro to see if the paths match.  */\n-#ifdef HAVE_DOS_BASED_FILE_SYSTEM\n-#define IS_SAME_PATH(a,b) (strcasecmp (a, b) == 0)\n-#else\n-#define IS_SAME_PATH(a,b) (strcmp (a, b) == 0)\n-#endif\n+#define IS_SAME_PATH(a,b) (FILENAME_CMP (a, b) == 0)\n \n /* Suffix for aux-info files.  */\n #ifdef __MSDOS__\n@@ -94,7 +90,6 @@ static int directory_specified_p PARAMS ((const char *));\n static int file_excluded_p PARAMS ((const char *));\n static char *unexpand_if_needed PARAMS ((const char *));\n static char *abspath PARAMS ((const char *, const char *));\n-static int is_abspath PARAMS ((const char *));\n static void check_aux_info PARAMS ((int));\n static const char *find_corresponding_lparen PARAMS ((const char *));\n static int referenced_file_is_newer PARAMS ((const char *, time_t));\n@@ -694,7 +689,7 @@ in_system_include_dir (path)\n {\n   const struct default_include *p;\n \n-  if (! is_abspath (path))\n+  if (! IS_ABSOLUTE_PATH (path))\n     abort ();\t\t/* Must be an absolutized filename.  */\n \n   for (p = cpp_include_defaults; p->fname; p++)\n@@ -1114,20 +1109,6 @@ continue_outer: ;\n   return (got_unexpanded ? savestring (line_buf, copy_p - line_buf) : 0);\n }\n \f\n-/* Return 1 if pathname is absolute.  */\n-\n-static int\n-is_abspath (path)\n-     const char *path;\n-{\n-  return (IS_DIR_SEPARATOR (path[0])\n-#ifdef HAVE_DOS_BASED_FILE_SYSTEM\n-\t  /* Check for disk name on MS-DOS-based systems.  */\n-\t  || (path[0] && path[1] == ':' && IS_DIR_SEPARATOR (path[2]))\n-#endif\n-\t  );\n-}\n-\f\n /* Return the absolutized filename for the given relative\n    filename.  Note that if that filename is already absolute, it may\n    still be returned in a modified form because this routine also\n@@ -1156,7 +1137,7 @@ abspath (cwd, rel_filename)\n   {\n     const char *src_p;\n \n-    if (! is_abspath (rel_filename))\n+    if (! IS_ABSOLUTE_PATH (rel_filename))\n       {\n \tsrc_p = cwd2;\n \twhile ((*endp++ = *src_p++))\n@@ -2264,7 +2245,7 @@ start_over: ;\n       continue;\n     aux_info_second_line = p;\n     aux_info_relocated_name = 0;\n-    if (! is_abspath (invocation_filename))\n+    if (! IS_ABSOLUTE_PATH (invocation_filename))\n       {\n \t/* INVOCATION_FILENAME is relative;\n \t   append it to BASE_SOURCE_FILENAME's dir.  */"}, {"sha": "67ddaff5ce3217384a8ed148cf5ec736c24b6514", "filename": "gcc/system.h", "status": "modified", "additions": 8, "deletions": 22, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dce14083fc35cc2b60906577cf797e0ae49f1b8/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dce14083fc35cc2b60906577cf797e0ae49f1b8/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=3dce14083fc35cc2b60906577cf797e0ae49f1b8", "patch": "@@ -458,29 +458,15 @@ extern void abort (void);\n #define PATH_SEPARATOR ':'\n #endif\n \n+/* Filename handling macros.  */\n+#include \"filenames.h\"\n+\n+/* These should be phased out in favor of IS_DIR_SEPARATOR, where possible.  */\n #ifndef DIR_SEPARATOR\n-#define DIR_SEPARATOR '/'\n-#endif\n-\n-/* Define IS_DIR_SEPARATOR.  */\n-#ifndef DIR_SEPARATOR_2\n-# define IS_DIR_SEPARATOR(CH) ((CH) == DIR_SEPARATOR)\n-#else /* DIR_SEPARATOR_2 */\n-# define IS_DIR_SEPARATOR(CH) \\\n-\t(((CH) == DIR_SEPARATOR) || ((CH) == DIR_SEPARATOR_2))\n-#endif /* DIR_SEPARATOR_2 */\n-\n-/* Say how to test for an absolute pathname.  On Unix systems, this is if\n-   it starts with a leading slash or a '$', the latter meaning the value of\n-   an environment variable is to be used.  On machine with DOS-based\n-   file systems, it is also absolute if it starts with a drive identifier.  */\n-#ifdef HAVE_DOS_BASED_FILE_SYSTEM\n-#define IS_ABSOLUTE_PATHNAME(STR) \\\n-  (IS_DIR_SEPARATOR ((STR)[0]) || (STR)[0] == '$' \\\n-   || ((STR)[0] != '\\0' && (STR)[1] == ':' && IS_DIR_SEPARATOR ((STR)[2])))\n-#else\n-#define IS_ABSOLUTE_PATHNAME(STR) \\\n-  (IS_DIR_SEPARATOR ((STR)[0]) || (STR)[0] == '$')\n+# define DIR_SEPARATOR '/'\n+# ifdef HAVE_DOS_BASED_FILE_SYSTEM\n+#  define DIR_SEPARATOR_2 '\\\\'\n+# endif\n #endif\n \n /* Get libiberty declarations.  */"}]}