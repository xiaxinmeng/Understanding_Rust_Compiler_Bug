{"sha": "556d1a44c8c7d5d72b0ee30146128013bde4f2af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU2ZDFhNDRjOGM3ZDVkNzJiMGVlMzAxNDYxMjgwMTNiZGU0ZjJhZg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-05-26T09:42:58Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-05-26T09:42:58Z"}, "message": "[multiple changes]\n\n2015-05-26  Doug Rupp  <rupp@adacore.com>\n\n\t* init-vxsim.c (CPU): define as __VXSIM_CPU__\n\t* sigtramp-vxworks-vxsim.c (CPU): Likewise.\n\tsigtramp-vxworks-target.inc: Add check for SIMLINUX.\n\t* sigtramp.h: Likewise.\n\n2015-05-26  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_aux.adb, sem_disp.adb, sem_util.ads: Add comment.\n\t* sem_util.adb: Minor reformatting\n\nFrom-SVN: r223675", "tree": {"sha": "1c127b1486f1295d866d0cee365eab93a807e7e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c127b1486f1295d866d0cee365eab93a807e7e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/556d1a44c8c7d5d72b0ee30146128013bde4f2af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/556d1a44c8c7d5d72b0ee30146128013bde4f2af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/556d1a44c8c7d5d72b0ee30146128013bde4f2af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/556d1a44c8c7d5d72b0ee30146128013bde4f2af/comments", "author": null, "committer": null, "parents": [{"sha": "90a4b3367997dd7327bb1668c0a89c2318e8ef9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90a4b3367997dd7327bb1668c0a89c2318e8ef9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90a4b3367997dd7327bb1668c0a89c2318e8ef9c"}], "stats": {"total": 37, "additions": 21, "deletions": 16}, "files": [{"sha": "c6e49b6ddab2c2193fca4dee9c87910f93200d64", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/556d1a44c8c7d5d72b0ee30146128013bde4f2af/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/556d1a44c8c7d5d72b0ee30146128013bde4f2af/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=556d1a44c8c7d5d72b0ee30146128013bde4f2af", "patch": "@@ -1,3 +1,15 @@\n+2015-05-26  Doug Rupp  <rupp@adacore.com>\n+\n+\t* init-vxsim.c (CPU): define as __VXSIM_CPU__\n+\t* sigtramp-vxworks-vxsim.c (CPU): Likewise.\n+\tsigtramp-vxworks-target.inc: Add check for SIMLINUX.\n+\t* sigtramp.h: Likewise.\n+\n+2015-05-26  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_aux.adb, sem_disp.adb, sem_util.ads: Add comment.\n+\t* sem_util.adb: Minor reformatting\n+\n 2015-05-26  Yannick Moy  <moy@adacore.com>\n \n \t* inline.adb (Has_Initialized_Type): Adapt to new names."}, {"sha": "9466dbc7915d850fdd850e5346c47f1f56d0dd1e", "filename": "gcc/ada/init-vxsim.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/556d1a44c8c7d5d72b0ee30146128013bde4f2af/gcc%2Fada%2Finit-vxsim.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/556d1a44c8c7d5d72b0ee30146128013bde4f2af/gcc%2Fada%2Finit-vxsim.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit-vxsim.c?ref=556d1a44c8c7d5d72b0ee30146128013bde4f2af", "patch": "@@ -34,12 +34,7 @@\n    structure is different for vxsim vs. real hardware.  */\n \n #undef CPU\n-\n-#ifndef __RTP__\n-#define CPU SIMNT\n-#else\n-#define CPU SIMPENTIUM\n-#endif\n+#define CPU __VXSIM_CPU__\n \n #include \"vxWorks.h\"\n #include \"tconfig.h\""}, {"sha": "97a6e1b40616ca1f29243cba43caf26d322eb4d2", "filename": "gcc/ada/sem_aux.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/556d1a44c8c7d5d72b0ee30146128013bde4f2af/gcc%2Fada%2Fsem_aux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/556d1a44c8c7d5d72b0ee30146128013bde4f2af/gcc%2Fada%2Fsem_aux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.adb?ref=556d1a44c8c7d5d72b0ee30146128013bde4f2af", "patch": "@@ -481,6 +481,7 @@ package body Sem_Aux is\n       if Ekind (E) = E_String_Literal_Subtype then\n          return String_Literal_Low_Bound (E);\n       else\n+         --  Why is this not Type_Low_Bound (E)???\n          return Low_Bound (Scalar_Range (E));\n       end if;\n    end Get_Low_Bound;"}, {"sha": "1cbaef354b0bbb8c6d3d092f048a712c85aeb71f", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/556d1a44c8c7d5d72b0ee30146128013bde4f2af/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/556d1a44c8c7d5d72b0ee30146128013bde4f2af/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=556d1a44c8c7d5d72b0ee30146128013bde4f2af", "patch": "@@ -2243,6 +2243,9 @@ package body Sem_Disp is\n    -- Is_Overriding_Subprogram --\n    ------------------------------\n \n+   --  Seems inefficient, build a whole list of subprograms to see if it\n+   --  is non-empty???\n+\n    function Is_Overriding_Subprogram (E : Entity_Id) return Boolean is\n       Inherited : constant Subprogram_List := Inherited_Subprograms (E);\n    begin"}, {"sha": "b2f6a5727dae34894ba901b6dd8075c2109d13ae", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/556d1a44c8c7d5d72b0ee30146128013bde4f2af/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/556d1a44c8c7d5d72b0ee30146128013bde4f2af/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=556d1a44c8c7d5d72b0ee30146128013bde4f2af", "patch": "@@ -5683,7 +5683,6 @@ package body Sem_Util is\n \n    begin\n       Encl_Unit := Enclosing_Comp_Unit_Node (N);\n-\n       while Present (Encl_Unit)\n         and then Nkind (Unit (Encl_Unit)) = N_Subunit\n       loop"}, {"sha": "f899e759c8f8ea0ae899713aaa2104c0df358234", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/556d1a44c8c7d5d72b0ee30146128013bde4f2af/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/556d1a44c8c7d5d72b0ee30146128013bde4f2af/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=556d1a44c8c7d5d72b0ee30146128013bde4f2af", "patch": "@@ -537,7 +537,7 @@ package Sem_Util is\n    --  or indirectly (through a subunit) at the root of a subtree containing\n    --  N. This may be either the same as Enclosing_Comp_Unit_Node, or if\n    --  Enclosing_Comp_Unit_Node returns a subunit, then the corresponding\n-   --  library unit.\n+   --  library unit. If no such item is found, returns Empty???\n \n    function Enclosing_CPP_Parent (Typ : Entity_Id) return Entity_Id;\n    --  Returns the closest ancestor of Typ that is a CPP type."}, {"sha": "f31594d68b955d31b086b7f6ca6c1b63dbfd026f", "filename": "gcc/ada/sigtramp-vxworks-target.inc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/556d1a44c8c7d5d72b0ee30146128013bde4f2af/gcc%2Fada%2Fsigtramp-vxworks-target.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/556d1a44c8c7d5d72b0ee30146128013bde4f2af/gcc%2Fada%2Fsigtramp-vxworks-target.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsigtramp-vxworks-target.inc?ref=556d1a44c8c7d5d72b0ee30146128013bde4f2af", "patch": "@@ -314,7 +314,7 @@ TCR(\"ldmfd\tsp, {r\"S(CFA_REG)\", fp, sp, pc}\")\n \n #elif defined (i386)\n \n-#if CPU == SIMNT || CPU == SIMPENTIUM\n+#if CPU == SIMNT || CPU == SIMPENTIUM || CPU == SIMLINUX\n #define COMMON_CFI(REG) \\\n   \".cfi_offset \" S(REGNO_##REG) \",\" S(REG_SET_##REG)\n #else"}, {"sha": "918d9e5d4fa331c35e4b21223258f6d4c7ddd832", "filename": "gcc/ada/sigtramp-vxworks-vxsim.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/556d1a44c8c7d5d72b0ee30146128013bde4f2af/gcc%2Fada%2Fsigtramp-vxworks-vxsim.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/556d1a44c8c7d5d72b0ee30146128013bde4f2af/gcc%2Fada%2Fsigtramp-vxworks-vxsim.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsigtramp-vxworks-vxsim.c?ref=556d1a44c8c7d5d72b0ee30146128013bde4f2af", "patch": "@@ -34,12 +34,7 @@\n  ********************************************************/\n \n #undef CPU\n-\n-#ifndef __RTP__\n-#define CPU SIMNT\n-#else\n-#define CPU SIMPENTIUM\n-#endif\n+#define CPU __VXSIM_CPU__\n \n #include \"sigtramp.h\"\n /* See sigtramp.h for a general explanation of functionality.  */"}, {"sha": "bf872f5da0215adbd4fcc9e7b8ad3479252e3f17", "filename": "gcc/ada/sigtramp.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/556d1a44c8c7d5d72b0ee30146128013bde4f2af/gcc%2Fada%2Fsigtramp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/556d1a44c8c7d5d72b0ee30146128013bde4f2af/gcc%2Fada%2Fsigtramp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsigtramp.h?ref=556d1a44c8c7d5d72b0ee30146128013bde4f2af", "patch": "@@ -62,7 +62,7 @@ typedef struct ucontext\n      system headers so call it something unique.  */\n   typedef void __sigtramphandler_t (int signo, void *siginfo, void *sigcontext);\n \n-#if CPU == SIMNT || CPU == SIMPENTIUM\n+#if CPU == SIMNT || CPU == SIMPENTIUM || CPU == SIMLINUX\n   /* Vxsim requires a specially compiled handler.  */\n   void __gnat_sigtramp_vxsim  (int signo, void *siginfo, void *sigcontext,\n \t\t\t __sigtramphandler_t * handler);"}]}