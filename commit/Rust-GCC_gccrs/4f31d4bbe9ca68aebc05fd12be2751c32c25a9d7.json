{"sha": "4f31d4bbe9ca68aebc05fd12be2751c32c25a9d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGYzMWQ0YmJlOWNhNjhhZWJjMDVmZDEyYmUyNzUxYzMyYzI1YTlkNw==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-19T20:25:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-19T20:25:18Z"}, "message": "Merge #506 #507 #508\n\n506: Fix: do not use object after it has been moved r=philberty a=dkm\n\nAfter std::move(mapping), mapping is unspecified\r\n\r\n<!-- THIS COMMENT IS INVISIBLE IN THE FINAL PR, BUT FEEL FREE TO REMOVE IT\r\nThank you for making Rust GCC better!\r\n\r\nIf your PR fixes an issue, you can add \"Fixes #issue_number\" into this\r\nPR description and the git commit message. This way the issue will be\r\nautomatically closed when your PR is merged. If your change addresses\r\nan issue but does not fully fix it please mark it as \"Addresses #issue_number\"\r\nin the git commit message.\r\n\r\nHere is a checklist to help you with your PR.\r\n\r\n- \\[ ] GCC code require copyright assignment: https://gcc.gnu.org/contribute.html\r\n- \\[ ] Read contributing guidlines\r\n- \\[ ] `make check-rust` passes locally\r\n- \\[ ] Run `clang-format`\r\n- \\[ ] Added any relevant test cases to `gcc/testsuite/rust/`\r\n\r\nNote that you can skip the above if you are just opening a WIP PR in\r\norder to get feedback.\r\n---\r\n-->\r\n\n\n507: Add more info in HIR dump for struct r=philberty a=dkm\n\nMake struct fields more visible in dumps and add the mapping in the dump string.\r\n\r\n<!-- THIS COMMENT IS INVISIBLE IN THE FINAL PR, BUT FEEL FREE TO REMOVE IT\r\nThank you for making Rust GCC better!\r\n\r\nIf your PR fixes an issue, you can add \"Fixes #issue_number\" into this\r\nPR description and the git commit message. This way the issue will be\r\nautomatically closed when your PR is merged. If your change addresses\r\nan issue but does not fully fix it please mark it as \"Addresses #issue_number\"\r\nin the git commit message.\r\n\r\nHere is a checklist to help you with your PR.\r\n\r\n- \\[ ] GCC code require copyright assignment: https://gcc.gnu.org/contribute.html\r\n- \\[ ] Read contributing guidlines\r\n- \\[ ] `make check-rust` passes locally\r\n- \\[ ] Run `clang-format`\r\n- \\[ ] Added any relevant test cases to `gcc/testsuite/rust/`\r\n\r\nNote that you can skip the above if you are just opening a WIP PR in\r\norder to get feedback.\r\n---\r\n-->\r\n\n\n508: Make 3 error messages slightly more informational r=philberty a=dkm\n\nAdd more context to some internal error messages (ie. not intended for user)\r\n\r\n<!-- THIS COMMENT IS INVISIBLE IN THE FINAL PR, BUT FEEL FREE TO REMOVE IT\r\nThank you for making Rust GCC better!\r\n\r\nIf your PR fixes an issue, you can add \"Fixes #issue_number\" into this\r\nPR description and the git commit message. This way the issue will be\r\nautomatically closed when your PR is merged. If your change addresses\r\nan issue but does not fully fix it please mark it as \"Addresses #issue_number\"\r\nin the git commit message.\r\n\r\nHere is a checklist to help you with your PR.\r\n\r\n- \\[ ] GCC code require copyright assignment: https://gcc.gnu.org/contribute.html\r\n- \\[ ] Read contributing guidlines\r\n- \\[ ] `make check-rust` passes locally\r\n- \\[ ] Run `clang-format`\r\n- \\[ ] Added any relevant test cases to `gcc/testsuite/rust/`\r\n\r\nNote that you can skip the above if you are just opening a WIP PR in\r\norder to get feedback.\r\n---\r\n-->\r\n\n\nCo-authored-by: Marc Poulhi\u00e8s <dkm@kataplop.net>", "tree": {"sha": "0f10f768a567deeccd6bcc50c4c121bb70a3cd70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f10f768a567deeccd6bcc50c4c121bb70a3cd70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f31d4bbe9ca68aebc05fd12be2751c32c25a9d7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgzlKuCRBK7hj4Ov3rIwAARVEIAJifC+/9jDxwcZlFETUuO2LF\nbYtdrF9uycyC9Ob1PMYoSNj91sBD+eu17EmdwQfTiPDSNRUjKmYHaF0XxK9/xraU\nT+xr4szzUZXT7nxM9DWUAvY+JEzCtnXyH++D6AEqsmbpb6j50S9Wawl9DG2lj9tO\nFqsofF5NPtTCISa0Kd1tJ4VJ/cuhYYIOoL008j/yKzN9IdeOhyg06TFVAnjOySyA\n+jNoGmSOX36cAyPDI+EsKGvZzzITTy805rMGmGSFuav2/PirQ/1twj+ow7plTjot\n49iUzt04N/o6ZBlESTXhrZqahePcpQV8ObzPAm5Y2Z9UL0uXAjpdeI7yhTj+m6c=\n=obW5\n-----END PGP SIGNATURE-----\n", "payload": "tree 0f10f768a567deeccd6bcc50c4c121bb70a3cd70\nparent ace501018b5a3eedc545711814aad14149d16395\nparent 213b638b3269078d77f02a46602105917616372f\nparent c143022ebee18a2d32d2844521d5ec1f0b06bdb6\nparent 09d26b3e0b11859bc9fa27f9a4b176da47bc7add\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1624134318 +0000\ncommitter GitHub <noreply@github.com> 1624134318 +0000\n\nMerge #506 #507 #508\n\n506: Fix: do not use object after it has been moved r=philberty a=dkm\n\nAfter std::move(mapping), mapping is unspecified\r\n\r\n<!-- THIS COMMENT IS INVISIBLE IN THE FINAL PR, BUT FEEL FREE TO REMOVE IT\r\nThank you for making Rust GCC better!\r\n\r\nIf your PR fixes an issue, you can add \"Fixes #issue_number\" into this\r\nPR description and the git commit message. This way the issue will be\r\nautomatically closed when your PR is merged. If your change addresses\r\nan issue but does not fully fix it please mark it as \"Addresses #issue_number\"\r\nin the git commit message.\r\n\r\nHere is a checklist to help you with your PR.\r\n\r\n- \\[ ] GCC code require copyright assignment: https://gcc.gnu.org/contribute.html\r\n- \\[ ] Read contributing guidlines\r\n- \\[ ] `make check-rust` passes locally\r\n- \\[ ] Run `clang-format`\r\n- \\[ ] Added any relevant test cases to `gcc/testsuite/rust/`\r\n\r\nNote that you can skip the above if you are just opening a WIP PR in\r\norder to get feedback.\r\n---\r\n-->\r\n\n\n507: Add more info in HIR dump for struct r=philberty a=dkm\n\nMake struct fields more visible in dumps and add the mapping in the dump string.\r\n\r\n<!-- THIS COMMENT IS INVISIBLE IN THE FINAL PR, BUT FEEL FREE TO REMOVE IT\r\nThank you for making Rust GCC better!\r\n\r\nIf your PR fixes an issue, you can add \"Fixes #issue_number\" into this\r\nPR description and the git commit message. This way the issue will be\r\nautomatically closed when your PR is merged. If your change addresses\r\nan issue but does not fully fix it please mark it as \"Addresses #issue_number\"\r\nin the git commit message.\r\n\r\nHere is a checklist to help you with your PR.\r\n\r\n- \\[ ] GCC code require copyright assignment: https://gcc.gnu.org/contribute.html\r\n- \\[ ] Read contributing guidlines\r\n- \\[ ] `make check-rust` passes locally\r\n- \\[ ] Run `clang-format`\r\n- \\[ ] Added any relevant test cases to `gcc/testsuite/rust/`\r\n\r\nNote that you can skip the above if you are just opening a WIP PR in\r\norder to get feedback.\r\n---\r\n-->\r\n\n\n508: Make 3 error messages slightly more informational r=philberty a=dkm\n\nAdd more context to some internal error messages (ie. not intended for user)\r\n\r\n<!-- THIS COMMENT IS INVISIBLE IN THE FINAL PR, BUT FEEL FREE TO REMOVE IT\r\nThank you for making Rust GCC better!\r\n\r\nIf your PR fixes an issue, you can add \"Fixes #issue_number\" into this\r\nPR description and the git commit message. This way the issue will be\r\nautomatically closed when your PR is merged. If your change addresses\r\nan issue but does not fully fix it please mark it as \"Addresses #issue_number\"\r\nin the git commit message.\r\n\r\nHere is a checklist to help you with your PR.\r\n\r\n- \\[ ] GCC code require copyright assignment: https://gcc.gnu.org/contribute.html\r\n- \\[ ] Read contributing guidlines\r\n- \\[ ] `make check-rust` passes locally\r\n- \\[ ] Run `clang-format`\r\n- \\[ ] Added any relevant test cases to `gcc/testsuite/rust/`\r\n\r\nNote that you can skip the above if you are just opening a WIP PR in\r\norder to get feedback.\r\n---\r\n-->\r\n\n\nCo-authored-by: Marc Poulhi\u00e8s <dkm@kataplop.net>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f31d4bbe9ca68aebc05fd12be2751c32c25a9d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f31d4bbe9ca68aebc05fd12be2751c32c25a9d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f31d4bbe9ca68aebc05fd12be2751c32c25a9d7/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ace501018b5a3eedc545711814aad14149d16395", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ace501018b5a3eedc545711814aad14149d16395", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ace501018b5a3eedc545711814aad14149d16395"}, {"sha": "213b638b3269078d77f02a46602105917616372f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/213b638b3269078d77f02a46602105917616372f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/213b638b3269078d77f02a46602105917616372f"}, {"sha": "c143022ebee18a2d32d2844521d5ec1f0b06bdb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c143022ebee18a2d32d2844521d5ec1f0b06bdb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c143022ebee18a2d32d2844521d5ec1f0b06bdb6"}, {"sha": "09d26b3e0b11859bc9fa27f9a4b176da47bc7add", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09d26b3e0b11859bc9fa27f9a4b176da47bc7add", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09d26b3e0b11859bc9fa27f9a4b176da47bc7add"}], "stats": {"total": 29, "additions": 17, "deletions": 12}, "files": [{"sha": "09652f1ef1c6b03069dd11f15e249adb3ab81309", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f31d4bbe9ca68aebc05fd12be2751c32c25a9d7/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f31d4bbe9ca68aebc05fd12be2751c32c25a9d7/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=4f31d4bbe9ca68aebc05fd12be2751c32c25a9d7", "patch": "@@ -183,8 +183,10 @@ class CompileExpr : public HIRCompileBase\n \t  if (!ctx->get_tyctx ()->lookup_type (\n \t\texpr.get_mappings ().get_hirid (), &tyty))\n \t    {\n-\t      rust_fatal_error (expr.get_locus (),\n-\t\t\t\t\"did not resolve type for this literal expr\");\n+\t      rust_fatal_error (\n+\t\texpr.get_locus (),\n+\t\t\"did not resolve type for this literal expr (HirId %d)\",\n+\t\texpr.get_mappings ().get_hirid ());\n \t      return;\n \t    }\n "}, {"sha": "5e19850e8dd864bcd32e573082a6ec5f5fcf8a0a", "filename": "gcc/rust/hir/rust-ast-lower-type.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f31d4bbe9ca68aebc05fd12be2751c32c25a9d7/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f31d4bbe9ca68aebc05fd12be2751c32c25a9d7/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h?ref=4f31d4bbe9ca68aebc05fd12be2751c32c25a9d7", "patch": "@@ -72,15 +72,15 @@ class ASTLowerTypePath : public ASTLoweringBase\n     });\n \n     auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, path.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+    auto hirid = mappings->get_next_hir_id (crate_num);\n+    Analysis::NodeMapping mapping (crate_num, path.get_node_id (), hirid,\n \t\t\t\t   mappings->get_next_localdef_id (crate_num));\n+\n     translated\n       = new HIR::TypePath (std::move (mapping), std::move (translated_segments),\n \t\t\t   path.get_locus (),\n \t\t\t   path.has_opening_scope_resolution_op ());\n-    mappings->insert_hir_type (mapping.get_crate_num (), mapping.get_hirid (),\n-\t\t\t       translated);\n+    mappings->insert_hir_type (crate_num, hirid, translated);\n   }\n \n private:"}, {"sha": "236ff3d425991a28aba1e3051b5905b41ba8bcca", "filename": "gcc/rust/hir/tree/rust-hir-full-test.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f31d4bbe9ca68aebc05fd12be2751c32c25a9d7/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f31d4bbe9ca68aebc05fd12be2751c32c25a9d7/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc?ref=4f31d4bbe9ca68aebc05fd12be2751c32c25a9d7", "patch": "@@ -577,11 +577,12 @@ StructStruct::as_string () const\n     {\n       for (const auto &field : fields)\n \t{\n-\t  str += \"\\n  \" + field.as_string ();\n+\t  str += \"\\n  - \" + field.as_string ();\n \t}\n+      str += \"\\n\";\n     }\n \n-  return str;\n+  return str + \"::\" + get_mappings ().as_string () + \"\\n\";\n }\n \n std::string"}, {"sha": "136c0c20372ca71e7d715f71c3f243c4ddb53d64", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f31d4bbe9ca68aebc05fd12be2751c32c25a9d7/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f31d4bbe9ca68aebc05fd12be2751c32c25a9d7/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h?ref=4f31d4bbe9ca68aebc05fd12be2751c32c25a9d7", "patch": "@@ -118,18 +118,20 @@ class TypeCheckType : public TypeCheckBase\n   {\n     // lookup the Node this resolves to\n     NodeId ref;\n-    if (!resolver->lookup_resolved_type (path.get_mappings ().get_nodeid (),\n-\t\t\t\t\t &ref))\n+    auto nid = path.get_mappings ().get_nodeid ();\n+    if (!resolver->lookup_resolved_type (nid, &ref))\n       {\n \trust_fatal_error (path.get_locus (),\n-\t\t\t  \"Failed to resolve node id to HIR\");\n+\t\t\t  \"failed to resolve node '%d' to HIR\", nid);\n \treturn;\n       }\n \n     HirId hir_lookup;\n     if (!context->lookup_type_by_node_id (ref, &hir_lookup))\n       {\n-\trust_error_at (path.get_locus (), \"failed to lookup HIR node\");\n+\trust_error_at (path.get_locus (),\n+\t\t       \"failed to lookup HIR %d for node '%s'\", ref,\n+\t\t       path.as_string ().c_str ());\n \treturn;\n       }\n "}]}