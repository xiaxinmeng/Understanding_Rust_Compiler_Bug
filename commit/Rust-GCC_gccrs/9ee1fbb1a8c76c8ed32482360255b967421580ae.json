{"sha": "9ee1fbb1a8c76c8ed32482360255b967421580ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWVlMWZiYjFhOGM3NmM4ZWQzMjQ4MjM2MDI1NWI5Njc0MjE1ODBhZQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-22T21:41:07Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-22T21:41:07Z"}, "message": "sel-sched-ir.c: Use rtx_insn\n\ngcc/\n2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n\n\t* sel-sched-ir.c (vinsn_copy): Strengthen local \"copy\" from rtx to\n\trtx_insn *.\n\t(speculate_expr): Likewise for locals \"orig_insn_rtx\",\n\t\"spec_insn_rtx\".\n\t(eq_transformed_insns): Likewise for locals \"i1\", \"i2\".\n\t(check_for_new_jump): Likewise for return type and local \"end\".\n\t(find_new_jump): Likewise for return type and local \"jump\".\n\t(sel_split_edge): Likewise for local \"jump\".\n\t(sel_create_recovery_block): Likewise.\n\t(sel_redirect_edge_and_branch_force): Likewise.\n\t(sel_redirect_edge_and_branch): Likewise.\n\nFrom-SVN: r214380", "tree": {"sha": "87cdf1e7271f2354637454d9ee65f384e7127b0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87cdf1e7271f2354637454d9ee65f384e7127b0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ee1fbb1a8c76c8ed32482360255b967421580ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ee1fbb1a8c76c8ed32482360255b967421580ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ee1fbb1a8c76c8ed32482360255b967421580ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ee1fbb1a8c76c8ed32482360255b967421580ae/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eec818f42d08887631fb130d015de72451a997aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eec818f42d08887631fb130d015de72451a997aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eec818f42d08887631fb130d015de72451a997aa"}], "stats": {"total": 43, "additions": 30, "deletions": 13}, "files": [{"sha": "4e28a80ee555e1425181863b4b2b597eb3ff9dc9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee1fbb1a8c76c8ed32482360255b967421580ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee1fbb1a8c76c8ed32482360255b967421580ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9ee1fbb1a8c76c8ed32482360255b967421580ae", "patch": "@@ -1,3 +1,17 @@\n+2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* sel-sched-ir.c (vinsn_copy): Strengthen local \"copy\" from rtx to\n+\trtx_insn *.\n+\t(speculate_expr): Likewise for locals \"orig_insn_rtx\",\n+\t\"spec_insn_rtx\".\n+\t(eq_transformed_insns): Likewise for locals \"i1\", \"i2\".\n+\t(check_for_new_jump): Likewise for return type and local \"end\".\n+\t(find_new_jump): Likewise for return type and local \"jump\".\n+\t(sel_split_edge): Likewise for local \"jump\".\n+\t(sel_create_recovery_block): Likewise.\n+\t(sel_redirect_edge_and_branch_force): Likewise.\n+\t(sel_redirect_edge_and_branch): Likewise.\n+\n 2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n \n \t* sel-sched.c (substitute_reg_in_expr): Strengthen local"}, {"sha": "59fe8ebbdf4bf23d6053ddfccd8cfaf28e457746", "filename": "gcc/sel-sched-ir.c", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee1fbb1a8c76c8ed32482360255b967421580ae/gcc%2Fsel-sched-ir.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee1fbb1a8c76c8ed32482360255b967421580ae/gcc%2Fsel-sched-ir.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-ir.c?ref=9ee1fbb1a8c76c8ed32482360255b967421580ae", "patch": "@@ -1246,7 +1246,7 @@ vinsn_create (insn_t insn, bool force_unique_p)\n vinsn_t\n vinsn_copy (vinsn_t vi, bool reattach_p)\n {\n-  rtx copy;\n+  rtx_insn *copy;\n   bool unique = VINSN_UNIQUE_P (vi);\n   vinsn_t new_vi;\n \n@@ -1962,7 +1962,7 @@ int\n speculate_expr (expr_t expr, ds_t ds)\n {\n   int res;\n-  rtx orig_insn_rtx;\n+  rtx_insn *orig_insn_rtx;\n   rtx spec_pat;\n   ds_t target_ds, current_ds;\n \n@@ -1983,7 +1983,8 @@ speculate_expr (expr_t expr, ds_t ds)\n \n     case 1:\n       {\n-\trtx spec_insn_rtx = create_insn_rtx_from_pattern (spec_pat, NULL_RTX);\n+\trtx_insn *spec_insn_rtx =\n+\t  create_insn_rtx_from_pattern (spec_pat, NULL_RTX);\n \tvinsn_t spec_vinsn = create_vinsn_from_insn_rtx (spec_insn_rtx, false);\n \n \tchange_vinsn_in_expr (expr, spec_vinsn);\n@@ -2825,8 +2826,10 @@ hash_transformed_insns (const void *p)\n static int\n eq_transformed_insns (const void *p, const void *q)\n {\n-  rtx i1 = VINSN_INSN_RTX (((const struct transformed_insns *) p)->vinsn_old);\n-  rtx i2 = VINSN_INSN_RTX (((const struct transformed_insns *) q)->vinsn_old);\n+  rtx_insn *i1 =\n+    VINSN_INSN_RTX (((const struct transformed_insns *) p)->vinsn_old);\n+  rtx_insn *i2 =\n+    VINSN_INSN_RTX (((const struct transformed_insns *) q)->vinsn_old);\n \n   if (INSN_UID (i1) == INSN_UID (i2))\n     return 1;\n@@ -5434,10 +5437,10 @@ sel_split_block (basic_block bb, rtx after)\n \n /* If BB ends with a jump insn whose ID is bigger then PREV_MAX_UID, return it.\n    Otherwise returns NULL.  */\n-static rtx\n+static rtx_insn *\n check_for_new_jump (basic_block bb, int prev_max_uid)\n {\n-  rtx end;\n+  rtx_insn *end;\n \n   end = sel_bb_end (bb);\n   if (end && INSN_UID (end) >= prev_max_uid)\n@@ -5447,10 +5450,10 @@ check_for_new_jump (basic_block bb, int prev_max_uid)\n \n /* Look for a new jump either in FROM_BB block or in newly created JUMP_BB block.\n    New means having UID at least equal to PREV_MAX_UID.  */\n-static rtx\n+static rtx_insn *\n find_new_jump (basic_block from, basic_block jump_bb, int prev_max_uid)\n {\n-  rtx jump;\n+  rtx_insn *jump;\n \n   /* Return immediately if no new insns were emitted.  */\n   if (get_max_uid () == prev_max_uid)\n@@ -5473,7 +5476,7 @@ sel_split_edge (edge e)\n {\n   basic_block new_bb, src, other_bb = NULL;\n   int prev_max_uid;\n-  rtx jump;\n+  rtx_insn *jump;\n \n   src = e->src;\n   prev_max_uid = get_max_uid ();\n@@ -5536,7 +5539,7 @@ sel_create_recovery_block (insn_t orig_insn)\n {\n   basic_block first_bb, second_bb, recovery_block;\n   basic_block before_recovery = NULL;\n-  rtx jump;\n+  rtx_insn *jump;\n \n   first_bb = BLOCK_FOR_INSN (orig_insn);\n   if (sel_bb_end_p (orig_insn))\n@@ -5587,7 +5590,7 @@ sel_redirect_edge_and_branch_force (edge e, basic_block to)\n {\n   basic_block jump_bb, src, orig_dest = e->dest;\n   int prev_max_uid;\n-  rtx jump;\n+  rtx_insn *jump;\n   int old_seqno = -1;\n \n   /* This function is now used only for bookkeeping code creation, where\n@@ -5631,7 +5634,7 @@ sel_redirect_edge_and_branch (edge e, basic_block to)\n   bool latch_edge_p;\n   basic_block src, orig_dest = e->dest;\n   int prev_max_uid;\n-  rtx jump;\n+  rtx_insn *jump;\n   edge redirected;\n   bool recompute_toporder_p = false;\n   bool maybe_unreachable = single_pred_p (orig_dest);"}]}