{"sha": "2ceb4d531a303f3e70d8bb218c8759e6c0688f62", "node_id": "C_kwDOANBUbNoAKDJjZWI0ZDUzMWEzMDNmM2U3MGQ4YmIyMThjODc1OWU2YzA2ODhmNjI", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-10-11T19:02:01Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-10-11T19:02:01Z"}, "message": "c++ modules: lazy loading from within template [PR99377]\n\nHere when lazily loading the binding for f due to its first use from the\ntemplate g, processing_template_decl is set which causes the call to\nnote_vague_linkage_fn from module_state::read_cluster to have no effect,\nand thus we never push f onto deferred_fns and end up never emitting its\ndefinition despite needing it.\n\nThe behavior of the lazy loading machinery shouldn't be sensitive to\nwhether we're inside a template, so to that end this patch makes us\nclear processing_template_decl in the entrypoints lazy_load_binding and\nlazy_load_pendings.\n\n\tPR c++/99377\n\ngcc/cp/ChangeLog:\n\n\t* module.cc (lazy_load_binding): Clear processing_template_decl.\n\t(lazy_load_pendings): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/modules/pr99377-2_a.C: New test.\n\t* g++.dg/modules/pr99377-2_b.C: New test.", "tree": {"sha": "18b790c3cc65b74989e6caa7a2757b23b8ba380b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18b790c3cc65b74989e6caa7a2757b23b8ba380b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ceb4d531a303f3e70d8bb218c8759e6c0688f62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ceb4d531a303f3e70d8bb218c8759e6c0688f62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ceb4d531a303f3e70d8bb218c8759e6c0688f62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ceb4d531a303f3e70d8bb218c8759e6c0688f62/comments", "author": null, "committer": null, "parents": [{"sha": "637e3668fdc17c4e226538fb14f9fab225433d01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/637e3668fdc17c4e226538fb14f9fab225433d01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/637e3668fdc17c4e226538fb14f9fab225433d01"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "7ffeefa7c1fca73ab8423238edba8769d19ff327", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ceb4d531a303f3e70d8bb218c8759e6c0688f62/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ceb4d531a303f3e70d8bb218c8759e6c0688f62/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=2ceb4d531a303f3e70d8bb218c8759e6c0688f62", "patch": "@@ -19083,6 +19083,10 @@ lazy_load_binding (unsigned mod, tree ns, tree id, binding_slot *mslot)\n \n   timevar_start (TV_MODULE_IMPORT);\n \n+  /* Make sure lazy loading from a template context behaves as if\n+     from a non-template context.  */\n+  processing_template_decl_sentinel ptds;\n+\n   /* Stop GC happening, even in outermost loads (because our caller\n      could well be building up a lookup set).  */\n   function_depth++;\n@@ -19131,6 +19135,10 @@ lazy_load_binding (unsigned mod, tree ns, tree id, binding_slot *mslot)\n void\n lazy_load_pendings (tree decl)\n {\n+  /* Make sure lazy loading from a template context behaves as if\n+     from a non-template context.  */\n+  processing_template_decl_sentinel ptds;\n+\n   tree key_decl;\n   pending_key key;\n   key.ns = find_pending_key (decl, &key_decl);"}, {"sha": "98d18546d196d0bf07d511cc13f00565648c0ca7", "filename": "gcc/testsuite/g++.dg/modules/pr99377-2_a.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ceb4d531a303f3e70d8bb218c8759e6c0688f62/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99377-2_a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ceb4d531a303f3e70d8bb218c8759e6c0688f62/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99377-2_a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99377-2_a.C?ref=2ceb4d531a303f3e70d8bb218c8759e6c0688f62", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/99377\n+// { dg-additional-options -fmodules-ts }\n+// { dg-module-cmi pr99377_2 }\n+export module pr99377_2;\n+\n+export inline void f() { }"}, {"sha": "1d5d79c788c2a830e712f2ab59a907d29483c518", "filename": "gcc/testsuite/g++.dg/modules/pr99377-2_b.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ceb4d531a303f3e70d8bb218c8759e6c0688f62/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99377-2_b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ceb4d531a303f3e70d8bb218c8759e6c0688f62/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99377-2_b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99377-2_b.C?ref=2ceb4d531a303f3e70d8bb218c8759e6c0688f62", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/99377\n+// { dg-additional-options -fmodules-ts }\n+// { dg-do link }\n+import pr99377_2;\n+\n+template<class> void g() { f(); }\n+\n+int main() { f(); }"}]}