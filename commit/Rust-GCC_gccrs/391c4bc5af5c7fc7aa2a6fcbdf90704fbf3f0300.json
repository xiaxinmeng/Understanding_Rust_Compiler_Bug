{"sha": "391c4bc5af5c7fc7aa2a6fcbdf90704fbf3f0300", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzkxYzRiYzVhZjVjN2ZjN2FhMmE2ZmNiZGY5MDcwNGZiZjNmMDMwMA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-10-28T05:17:14Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-10-28T05:17:14Z"}, "message": "re PR c++/17435 (Binding a temporary of derived type to reference of base)\n\n\tPR c++/17435\n\t* call.c (convert_like_real): Fix formatting.\n\t(initialize_reference): When binding a temporary to a base class,\n\tensure that the nominal copy made is to the derived class, not the\n\tbase class.\n\n\tPR c++/18140\n\t* parser.c (cp_parser_next_token_ends_template_argument_p): Do not\n\tinclude \">>\".\n\n\tPR c++/17435\n\t* g++.dg/init/ref12.C: New test.\n\n\tPR c++/18140\n\t* g++.dg/template/shift1.C: New test.\n\t* g++.dg/template/error10.C: Adjust error markers.\n\nFrom-SVN: r89738", "tree": {"sha": "7dd36dec39291468ce49f6128a24f9fb8a5593fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7dd36dec39291468ce49f6128a24f9fb8a5593fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/391c4bc5af5c7fc7aa2a6fcbdf90704fbf3f0300", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/391c4bc5af5c7fc7aa2a6fcbdf90704fbf3f0300", "html_url": "https://github.com/Rust-GCC/gccrs/commit/391c4bc5af5c7fc7aa2a6fcbdf90704fbf3f0300", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/391c4bc5af5c7fc7aa2a6fcbdf90704fbf3f0300/comments", "author": null, "committer": null, "parents": [{"sha": "0da34ce409cd62755c3546f40693ee596cffddb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0da34ce409cd62755c3546f40693ee596cffddb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0da34ce409cd62755c3546f40693ee596cffddb2"}], "stats": {"total": 80, "additions": 71, "deletions": 9}, "files": [{"sha": "d4df8e59e5ac55066f9bcc1552aa4310bd2984cb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391c4bc5af5c7fc7aa2a6fcbdf90704fbf3f0300/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391c4bc5af5c7fc7aa2a6fcbdf90704fbf3f0300/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=391c4bc5af5c7fc7aa2a6fcbdf90704fbf3f0300", "patch": "@@ -1,3 +1,15 @@\n+2004-10-27  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/17435\n+\t* call.c (convert_like_real): Fix formatting.\n+\t(initialize_reference): When binding a temporary to a base class,\n+\tensure that the nominal copy made is to the derived class, not the\n+\tbase class.\n+\n+\tPR c++/18140\n+\t* parser.c (cp_parser_next_token_ends_template_argument_p): Do not\n+\tinclude \">>\".\n+\n 2004-10-27  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* decl.c: Move the q after the %."}, {"sha": "9ff5b7ca3b1de4ba20d02bcafc59de14411f4f07", "filename": "gcc/cp/call.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391c4bc5af5c7fc7aa2a6fcbdf90704fbf3f0300/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391c4bc5af5c7fc7aa2a6fcbdf90704fbf3f0300/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=391c4bc5af5c7fc7aa2a6fcbdf90704fbf3f0300", "patch": "@@ -4239,7 +4239,7 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \texpr = decl_constant_value (expr);\n       if (convs->check_copy_constructor_p)\n \tcheck_constructor_callable (totype, expr);\n-\treturn expr;\n+      return expr;\n     case ck_ambig:\n       /* Call build_user_type_conversion again for the error.  */\n       return build_user_type_conversion\n@@ -6467,7 +6467,7 @@ initialize_reference (tree type, tree expr, tree decl, tree *cleanup)\n       conv = conv->u.next;\n       /* If the next conversion is a BASE_CONV, skip that too -- but\n \t remember that the conversion was required.  */\n-      if (conv->kind == ck_base && conv->need_temporary_p)\n+      if (conv->kind == ck_base)\n \t{\n \t  if (conv->check_copy_constructor_p)\n  \t    check_constructor_callable (TREE_TYPE (expr), expr);\n@@ -6537,6 +6537,11 @@ initialize_reference (tree type, tree expr, tree decl, tree *cleanup)\n \t    }\n \t  /* Use its address to initialize the reference variable.  */\n \t  expr = build_address (var);\n+\t  if (base_conv_type)\n+\t    expr = convert_to_base (expr, \n+\t\t\t\t    build_pointer_type (base_conv_type),\n+\t\t\t\t    /*check_access=*/true,\n+\t\t\t\t    /*nonnull=*/true);\n \t  expr = build2 (COMPOUND_EXPR, TREE_TYPE (expr), init, expr);\n \t}\n       else"}, {"sha": "ccb1ac184ce5b59a8f1a7461ba772a2396eb5d56", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391c4bc5af5c7fc7aa2a6fcbdf90704fbf3f0300/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391c4bc5af5c7fc7aa2a6fcbdf90704fbf3f0300/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=391c4bc5af5c7fc7aa2a6fcbdf90704fbf3f0300", "patch": "@@ -15474,18 +15474,15 @@ cp_parser_next_token_starts_class_definition_p (cp_parser *parser)\n }\n \n /* Returns TRUE iff the next token is the \",\" or \">\" ending a\n-   template-argument. \">>\" is also accepted (after the full\n-   argument was parsed) because it's probably a typo for \"> >\",\n-   and there is a specific diagnostic for this.  */\n+   template-argument.   */\n \n static bool\n cp_parser_next_token_ends_template_argument_p (cp_parser *parser)\n {\n   cp_token *token;\n \n   token = cp_lexer_peek_token (parser->lexer);\n-  return (token->type == CPP_COMMA || token->type == CPP_GREATER\n-\t  || token->type == CPP_RSHIFT);\n+  return (token->type == CPP_COMMA || token->type == CPP_GREATER);\n }\n \n /* Returns TRUE iff the n-th token is a \">\", or the n-th is a \"[\" and the"}, {"sha": "a297edb93c10e4d4a31672ea12d9d8ee1ee2486f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391c4bc5af5c7fc7aa2a6fcbdf90704fbf3f0300/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391c4bc5af5c7fc7aa2a6fcbdf90704fbf3f0300/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=391c4bc5af5c7fc7aa2a6fcbdf90704fbf3f0300", "patch": "@@ -1,3 +1,12 @@\n+2004-10-27  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/17435\n+\t* g++.dg/init/ref12.C: New test.\n+\n+\tPR c++/18140\n+\t* g++.dg/template/shift1.C: New test.\n+\t* g++.dg/template/error10.C: Adjust error markers.\n+\n 2004-10-27  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR tree-opt/17529"}, {"sha": "c5f27aedb1ee438fb1ed4dde0075a4b423a767fc", "filename": "gcc/testsuite/g++.dg/init/ref12.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391c4bc5af5c7fc7aa2a6fcbdf90704fbf3f0300/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fref12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391c4bc5af5c7fc7aa2a6fcbdf90704fbf3f0300/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fref12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fref12.C?ref=391c4bc5af5c7fc7aa2a6fcbdf90704fbf3f0300", "patch": "@@ -0,0 +1,29 @@\n+// PR c++/17435\n+\n+extern \"C\" void abort ();\n+\n+bool ok;\n+ \n+struct A  \n+{ \n+  void func() const \n+  { \n+    ok = 1;\n+  } \n+  \n+  ~A() \n+  { \n+    if (!ok)\n+      abort ();\n+  } \n+}; \n+\n+struct B : public A  \n+{ \n+}; \n+ \n+int main() \n+{ \n+  A const& r1 = B(); \n+  r1.func(); \n+} "}, {"sha": "dcb4f3e08fe0c40820c2780d99c6aa92e5b1c7c0", "filename": "gcc/testsuite/g++.dg/template/error10.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391c4bc5af5c7fc7aa2a6fcbdf90704fbf3f0300/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391c4bc5af5c7fc7aa2a6fcbdf90704fbf3f0300/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror10.C?ref=391c4bc5af5c7fc7aa2a6fcbdf90704fbf3f0300", "patch": "@@ -66,5 +66,5 @@ struct K {};\n \n void KFunc(void);\n \n-A<K<&KFunc>> k1;  // { dg-error \"should be '> >' within\" }\n-K<&KFunc>> k2; // { dg-error \"spurious '>>'\" }\n+A<K<&KFunc>> k1;  // { dg-error \"\" }\n+K<&KFunc>> k2; // { dg-error \"\" }"}, {"sha": "22cb0de95bed255f01b58f877f00cb7e8f288b38", "filename": "gcc/testsuite/g++.dg/template/shift1.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391c4bc5af5c7fc7aa2a6fcbdf90704fbf3f0300/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fshift1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391c4bc5af5c7fc7aa2a6fcbdf90704fbf3f0300/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fshift1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fshift1.C?ref=391c4bc5af5c7fc7aa2a6fcbdf90704fbf3f0300", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/18140\n+\n+template <int N> struct IntHolder {\n+  static const int value = N;\n+};\n+\n+template <int N, int S> struct ShrIntHolder {\n+  static const int value = IntHolder< N>>S >::value;\n+};\n+"}]}