{"sha": "6c07f44866d52ab85205439ee2319f24c8a596f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmMwN2Y0NDg2NmQ1MmFiODUyMDU0MzllZTIzMTlmMjRjOGE1OTZmNQ==", "commit": {"author": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@users.sourceforge.net", "date": "2003-06-03T13:01:44Z"}, "committer": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@gcc.gnu.org", "date": "2003-06-03T13:01:44Z"}, "message": "re PR c++/10940 (Bad code with explicit specialization)\n\n\tPR c++/10940\n\t* pt.c (check_explicit_specialization): Check for 'static'\n\tearlier.\n\n\t* g++.dg/template/spec10.C: New test.\n\nFrom-SVN: r67373", "tree": {"sha": "4cfb395504d265335588864454a355706eeed5d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cfb395504d265335588864454a355706eeed5d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c07f44866d52ab85205439ee2319f24c8a596f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c07f44866d52ab85205439ee2319f24c8a596f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c07f44866d52ab85205439ee2319f24c8a596f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c07f44866d52ab85205439ee2319f24c8a596f5/comments", "author": null, "committer": null, "parents": [{"sha": "075ec276a051c77c1542992980d651f832e7140a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/075ec276a051c77c1542992980d651f832e7140a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/075ec276a051c77c1542992980d651f832e7140a"}], "stats": {"total": 60, "additions": 50, "deletions": 10}, "files": [{"sha": "158db739a84235b4bfd36531f9e67b186b4b2962", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c07f44866d52ab85205439ee2319f24c8a596f5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c07f44866d52ab85205439ee2319f24c8a596f5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6c07f44866d52ab85205439ee2319f24c8a596f5", "patch": "@@ -1,3 +1,9 @@\n+2003-06-03  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/10940\n+\t* pt.c (check_explicit_specialization): Check for 'static'\n+\tearlier.\n+\n 2003-05-31  Diego Novillo  <dnovillo@redhat.com>\n \n \t* class.c (dump_array): Call CONSTRUCTOR_ELTS to access"}, {"sha": "52bbc51990f809454b320fd0faf2f7e4c16a5a63", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c07f44866d52ab85205439ee2319f24c8a596f5/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c07f44866d52ab85205439ee2319f24c8a596f5/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=6c07f44866d52ab85205439ee2319f24c8a596f5", "patch": "@@ -1849,6 +1849,18 @@ check_explicit_specialization (declarator, decl, template_count, flags)\n \t      return instantiate_template (tmpl, targs, tf_error);\n \t    }\n \n+\t  /* If we thought that the DECL was a member function, but it\n+\t     turns out to be specializing a static member function,\n+\t     make DECL a static member function as well.  We also have\n+\t     to adjust last_function_parms to avoid confusing\n+\t     start_function later.  */\n+\t  if (DECL_STATIC_FUNCTION_P (tmpl)\n+\t      && DECL_NONSTATIC_MEMBER_FUNCTION_P (decl))\n+\t    {\n+\t      revert_static_member_fn (decl);\n+\t      last_function_parms = TREE_CHAIN (last_function_parms);\n+\t    }\n+\n \t  /* If this is a specialization of a member template of a\n \t     template class.  In we want to return the TEMPLATE_DECL,\n \t     not the specialization of it.  */\n@@ -1865,16 +1877,6 @@ check_explicit_specialization (declarator, decl, template_count, flags)\n \t      return tmpl;\n \t    }\n \n-\t  /* If we thought that the DECL was a member function, but it\n-\t     turns out to be specializing a static member function,\n-\t     make DECL a static member function as well.  */\n-\t  if (DECL_STATIC_FUNCTION_P (tmpl)\n-\t      && DECL_NONSTATIC_MEMBER_FUNCTION_P (decl))\n-\t    {\n-\t      revert_static_member_fn (decl);\n-\t      last_function_parms = TREE_CHAIN (last_function_parms);\n-\t    }\n-\n \t  /* Set up the DECL_TEMPLATE_INFO for DECL.  */\n \t  DECL_TEMPLATE_INFO (decl) = tree_cons (tmpl, targs, NULL_TREE);\n "}, {"sha": "a5602f2f4e25ed5196e34b80182e0b8ecdc84d92", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c07f44866d52ab85205439ee2319f24c8a596f5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c07f44866d52ab85205439ee2319f24c8a596f5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6c07f44866d52ab85205439ee2319f24c8a596f5", "patch": "@@ -1,3 +1,8 @@\n+2003-06-03  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/10940\n+\t* g++.dg/template/spec10.C: New test.\n+\n 2003-06-03  Roger Sayle  <roger@eyesopen.com>\n \n \t* gcc.dg/builtins-16.c: New test case."}, {"sha": "f790155dce288ba58a8c8f30e6744a9fbca173e3", "filename": "gcc/testsuite/g++.dg/template/spec10.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c07f44866d52ab85205439ee2319f24c8a596f5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c07f44866d52ab85205439ee2319f24c8a596f5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec10.C?ref=6c07f44866d52ab85205439ee2319f24c8a596f5", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do run }\n+\n+// Origin: Lynn Akers <lakers@peachtree.com>\n+\n+// PR c++/10940: Problem handling parameter list for static member\n+// that is a specialization of a member template of a template class.\n+\n+template<int b>\n+class o\n+{\n+public:\n+\ttemplate<typename T> static void do_add(T* p, T v);\n+};\n+\n+template<>\n+template<typename T>\n+inline void o<32>::do_add(T* p, T v)\n+{\n+\t*p += v;\n+}\n+\n+int main()\n+{\n+\tint a = 0x1000;\n+\to<32>().do_add<int>(&a, 0x2000);\n+\treturn a;\n+}"}]}