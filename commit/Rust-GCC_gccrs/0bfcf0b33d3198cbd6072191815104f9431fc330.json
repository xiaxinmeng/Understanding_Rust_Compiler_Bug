{"sha": "0bfcf0b33d3198cbd6072191815104f9431fc330", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJmY2YwYjMzZDMxOThjYmQ2MDcyMTkxODE1MTA0Zjk0MzFmYzMzMA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-01-12T12:25:24Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-05-05T08:19:00Z"}, "message": "[Ada] Use inline expansion of Image for standard boolean by default\n\ngcc/ada/\n\n\t* debug.adb (d_x): Document extended usage.\n\t* exp_imgv.adb (Expand_Standard_Boolean_Image): New procedure.\n\t(Expand_Image_Attribute): Call it to expand in line the attribute\n\tfor standard boolean by default.", "tree": {"sha": "d3bbe081187a78263276f08cd5344719919cdacf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3bbe081187a78263276f08cd5344719919cdacf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bfcf0b33d3198cbd6072191815104f9431fc330", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bfcf0b33d3198cbd6072191815104f9431fc330", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bfcf0b33d3198cbd6072191815104f9431fc330", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bfcf0b33d3198cbd6072191815104f9431fc330/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15de3bc0b494dae9bfdcc7af60974df0b31c3f0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15de3bc0b494dae9bfdcc7af60974df0b31c3f0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15de3bc0b494dae9bfdcc7af60974df0b31c3f0b"}], "stats": {"total": 121, "additions": 117, "deletions": 4}, "files": [{"sha": "d3fcf8a95001fac0d1c21408a82159079ab7cd98", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bfcf0b33d3198cbd6072191815104f9431fc330/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bfcf0b33d3198cbd6072191815104f9431fc330/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=0bfcf0b33d3198cbd6072191815104f9431fc330", "patch": "@@ -991,7 +991,7 @@ package body Debug is\n    --       or Ada.Synchronous_Barriers.Wait_For_Release.\n \n    --  d_x  The compiler does not expand in line the Image attribute for user-\n-   --       defined enumeration types.\n+   --       defined enumeration types and the standard boolean type.\n \n    --  d_z  Enable the default Put_Image on tagged types that are not\n    --       predefined."}, {"sha": "b35562c6d52e68c604ae5db338e2f8306ebaea21", "filename": "gcc/ada/exp_imgv.adb", "status": "modified", "additions": 116, "deletions": 3, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bfcf0b33d3198cbd6072191815104f9431fc330/gcc%2Fada%2Fexp_imgv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bfcf0b33d3198cbd6072191815104f9431fc330/gcc%2Fada%2Fexp_imgv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_imgv.adb?ref=0bfcf0b33d3198cbd6072191815104f9431fc330", "patch": "@@ -754,6 +754,9 @@ package body Exp_Imgv is\n       Expr  : constant Node_Id    := Relocate_Node (First (Exprs));\n       Pref  : constant Node_Id    := Prefix (N);\n \n+      procedure Expand_Standard_Boolean_Image;\n+      --  Expand attribute 'Image in Standard.Boolean, avoiding string copy\n+\n       procedure Expand_User_Defined_Enumeration_Image (Typ : Entity_Id);\n       --  Expand attribute 'Image in user-defined enumeration types, avoiding\n       --  string copy.\n@@ -762,6 +765,107 @@ package body Exp_Imgv is\n         (Typ : Entity_Id) return Boolean;\n       --  Return True if Typ is a user-defined enumeration type\n \n+      -----------------------------------\n+      -- Expand_Standard_Boolean_Image --\n+      -----------------------------------\n+\n+      procedure Expand_Standard_Boolean_Image is\n+         Ins_List : constant List_Id   := New_List;\n+         S1_Id    : constant Entity_Id := Make_Temporary (Loc, 'S');\n+         T_Id     : constant Entity_Id := Make_Temporary (Loc, 'T');\n+         F_Id     : constant Entity_Id := Make_Temporary (Loc, 'F');\n+         V_Id     : constant Entity_Id := Make_Temporary (Loc, 'V');\n+\n+      begin\n+         --  We use a single 5-character string subtype throughout so that the\n+         --  subtype of the string if-expression is constrained and, therefore,\n+         --  does not force the creation of a temporary during analysis.\n+\n+         --  Generate:\n+         --    subtype S1 is String (1 .. 5);\n+\n+         Append_To (Ins_List,\n+           Make_Subtype_Declaration (Loc,\n+             Defining_Identifier => S1_Id,\n+             Subtype_Indication  =>\n+               Make_Subtype_Indication (Loc,\n+                 Subtype_Mark =>\n+                   New_Occurrence_Of (Standard_String, Loc),\n+                 Constraint   =>\n+                   Make_Index_Or_Discriminant_Constraint (Loc,\n+                     Constraints => New_List (\n+                       Make_Range (Loc,\n+                         Low_Bound  => Make_Integer_Literal (Loc, 1),\n+                         High_Bound => Make_Integer_Literal (Loc, 5)))))));\n+\n+         --  Generate:\n+         --    T : constant String (1 .. 5) := \"TRUE \";\n+\n+         Start_String;\n+         Store_String_Chars (\"TRUE \");\n+\n+         Append_To (Ins_List,\n+           Make_Object_Declaration (Loc,\n+             Defining_Identifier => T_Id,\n+             Object_Definition   =>\n+               New_Occurrence_Of (S1_Id, Loc),\n+             Constant_Present    => True,\n+             Expression          => Make_String_Literal (Loc, End_String)));\n+\n+         --  Generate:\n+         --    F : constant String (1 .. 5) := \"FALSE\";\n+\n+         Start_String;\n+         Store_String_Chars (\"FALSE\");\n+\n+         Append_To (Ins_List,\n+           Make_Object_Declaration (Loc,\n+             Defining_Identifier => F_Id,\n+             Object_Definition   =>\n+               New_Occurrence_Of (S1_Id, Loc),\n+             Constant_Present    => True,\n+             Expression          => Make_String_Literal (Loc, End_String)));\n+\n+         --  Generate:\n+         --    V : String (1 .. 5) renames (if Expr then T else F);\n+\n+         Append_To (Ins_List,\n+           Make_Object_Renaming_Declaration (Loc,\n+             Defining_Identifier => V_Id,\n+             Subtype_Mark        =>\n+               New_Occurrence_Of (S1_Id, Loc),\n+             Name                =>\n+               Make_If_Expression (Loc,\n+                 Expressions => New_List (\n+                   Relocate_Node (Expr),\n+                   New_Occurrence_Of (T_Id, Loc),\n+                   New_Occurrence_Of (F_Id, Loc)))));\n+\n+         --  Insert all the above declarations before N. We suppress checks\n+         --  because everything is in range at this stage.\n+\n+         Insert_Actions (N, Ins_List, Suppress => All_Checks);\n+\n+         --  Final step is to rewrite the expression as a slice:\n+         --  V (1 .. (if Expr then 4 else 5)) and analyze, again with no\n+         --  checks, since we are sure that everything is OK.\n+\n+         Rewrite (N,\n+           Make_Slice (Loc,\n+              Prefix         => New_Occurrence_Of (V_Id, Loc),\n+              Discrete_Range =>\n+                Make_Range (Loc,\n+                  Low_Bound  => Make_Integer_Literal (Loc, 1),\n+                  High_Bound =>\n+                    Make_If_Expression (Loc,\n+                      Expressions => New_List (\n+                        Duplicate_Subexpr (Expr),\n+                        Make_Integer_Literal (Loc, 4),\n+                        Make_Integer_Literal (Loc, 5))))));\n+\n+         Analyze_And_Resolve (N, Standard_String, Suppress => All_Checks);\n+      end Expand_Standard_Boolean_Image;\n+\n       -------------------------------------------\n       -- Expand_User_Defined_Enumeration_Image --\n       -------------------------------------------\n@@ -866,7 +970,7 @@ package body Exp_Imgv is\n          end;\n \n          --  Generate:\n-         --    subtype S1 is string (1 .. P3 - P2);\n+         --    subtype S1 is String (1 .. P3 - P2);\n \n          declare\n             HB : constant Node_Id := New_Op_Node (N_Op_Subtract, Loc);\n@@ -1010,8 +1114,17 @@ package body Exp_Imgv is\n          return;\n \n       elsif Rtyp = Standard_Boolean then\n-         Imid := RE_Image_Boolean;\n-         Tent := Rtyp;\n+         --  Use inline expansion if the -gnatd_x switch is not passed to the\n+         --  compiler. Otherwise expand into a call to the runtime.\n+\n+         if not Debug_Flag_Underscore_X then\n+            Expand_Standard_Boolean_Image;\n+            return;\n+\n+         else\n+            Imid := RE_Image_Boolean;\n+            Tent := Rtyp;\n+         end if;\n \n       --  For standard character, we have to select the version which handles\n       --  soft hyphen correctly, based on the version of Ada in use (this is"}]}