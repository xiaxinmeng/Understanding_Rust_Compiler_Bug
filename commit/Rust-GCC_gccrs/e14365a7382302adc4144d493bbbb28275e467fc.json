{"sha": "e14365a7382302adc4144d493bbbb28275e467fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE0MzY1YTczODIzMDJhZGM0MTQ0ZDQ5M2JiYmIyODI3NWU0NjdmYw==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2002-03-26T13:52:50Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2002-03-26T13:52:50Z"}, "message": "* arm.md (reload_mulsi3, reload_mulsi_compare0, reload_muladdsi)\n(reload_mulsi_compare0_scratch, reload_muladdsi_compare0)\n(reload_muladdsi_compare0_scratch): Delete.\n\nFrom-SVN: r51385", "tree": {"sha": "8b234e66b49e4c7d748af0a6947209093a03170b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b234e66b49e4c7d748af0a6947209093a03170b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e14365a7382302adc4144d493bbbb28275e467fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e14365a7382302adc4144d493bbbb28275e467fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e14365a7382302adc4144d493bbbb28275e467fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e14365a7382302adc4144d493bbbb28275e467fc/comments", "author": null, "committer": null, "parents": [{"sha": "46fc709d6728c9e387c1d3ec926371a8965b8952", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46fc709d6728c9e387c1d3ec926371a8965b8952", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46fc709d6728c9e387c1d3ec926371a8965b8952"}], "stats": {"total": 139, "additions": 6, "deletions": 133}, "files": [{"sha": "9a64e93a28daa5ff537452d036741b06312b8518", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e14365a7382302adc4144d493bbbb28275e467fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e14365a7382302adc4144d493bbbb28275e467fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e14365a7382302adc4144d493bbbb28275e467fc", "patch": "@@ -1,3 +1,9 @@\n+2002-03-26  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm.md (reload_mulsi3, reload_mulsi_compare0, reload_muladdsi)\n+\t(reload_mulsi_compare0_scratch, reload_muladdsi_compare0)\n+\t(reload_muladdsi_compare0_scratch): Delete.\n+\n 2002-03-26  Loren J. Rittle  <ljrittle@acm.org>\n \n \t* doc/install.texi (*-*-freebsd*): Update."}, {"sha": "55f7938e022fe76fa7906a4745e6125e22f1506d", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 0, "deletions": 133, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e14365a7382302adc4144d493bbbb28275e467fc/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e14365a7382302adc4144d493bbbb28275e467fc/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=e14365a7382302adc4144d493bbbb28275e467fc", "patch": "@@ -7011,139 +7011,6 @@\n    ]\n )\n \n-;; These variants of the above insns can occur if the first operand is the\n-;; frame pointer and we eliminate that.  This is a kludge, but there doesn't\n-;; seem to be a way around it.  Most of the predicates have to be null\n-;; because the format can be generated part way through reload, so\n-;; if we don't match it as soon as it becomes available, reload doesn't know\n-;; how to reload pseudos that haven't got hard registers; the constraints will\n-;; sort everything out.\n-\n-(define_insn \"*reload_mulsi3\"\n-  [(set (match_operand:SI 0 \"\" \"=&r\")\n-\t(plus:SI (plus:SI (match_operator:SI 5 \"shift_operator\"\n-\t\t\t   [(match_operand:SI 3 \"\" \"r\")\n-\t\t\t    (match_operand:SI 4 \"\" \"rM\")])\n-\t\t\t  (match_operand:SI 2 \"\" \"r\"))\n-\t\t (match_operand:SI 1 \"const_int_operand\" \"n\")))]\n-  \"TARGET_ARM && reload_in_progress\"\n-  \"*\n-  output_asm_insn (\\\"add%?\\\\t%0, %2, %3%S5\\\", operands);\n-  operands[2] = operands[1];\n-  operands[1] = operands[0];\n-  return output_add_immediate (operands);\n-  \"\n-  [\n-   ; we have no idea how long the add_immediate is, it could be up to 4.\n-   (set_attr \"length\" \"20\")]\n-)\n-\n-(define_insn \"*reload_mulsi_compare0\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV (plus:SI\n-\t\t\t  (plus:SI \n-\t\t\t   (match_operator:SI 5 \"shift_operator\"\n-\t\t\t    [(match_operand:SI 3 \"\" \"r\")\n-\t\t\t     (match_operand:SI 4 \"\" \"rM\")])\n-\t\t\t   (match_operand:SI 1 \"\" \"r\"))\n-\t\t\t  (match_operand:SI 2 \"const_int_operand\" \"n\"))\n-\t\t\t (const_int 0)))\n-   (set (match_operand:SI 0 \"\" \"=&r\")\n-\t(plus:SI (plus:SI (match_op_dup 5 [(match_dup 3) (match_dup 4)])\n-\t\t\t  (match_dup 1))\n-\t\t (match_dup 2)))]\n-  \"TARGET_ARM && reload_in_progress && !arm_is_xscale\"\n-  \"*\n-    output_add_immediate (operands);\n-    return \\\"add%?s\\\\t%0, %0, %3%S5\\\";\n-  \"\n-  [(set_attr \"conds\" \"set\")\n-   (set_attr \"shift\" \"3\")\n-   (set_attr \"length\" \"20\")]\n-)\n-\n-(define_insn \"*reload_mulsi_compare0_scratch\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV (plus:SI\n-\t\t\t  (plus:SI \n-\t\t\t   (match_operator:SI 5 \"shift_operator\"\n-\t\t\t    [(match_operand:SI 3 \"\" \"r\")\n-\t\t\t     (match_operand:SI 4 \"\" \"rM\")])\n-\t\t\t   (match_operand:SI 1 \"\" \"r\"))\n-\t\t\t  (match_operand:SI 2 \"const_int_operand\" \"n\"))\n-\t\t\t (const_int 0)))\n-   (clobber (match_scratch:SI 0 \"=&r\"))]\n-  \"TARGET_ARM && reload_in_progress && !arm_is_xscale\"\n-  \"*\n-    output_add_immediate (operands);\n-    return \\\"add%?s\\\\t%0, %0, %3%S5\\\";\n-  \"\n-  [(set_attr \"conds\" \"set\")\n-   (set_attr \"shift\" \"3\")\n-   (set_attr \"length\" \"20\")]\n-)\n-\n-;; These are similar, but are needed when the mla pattern contains the\n-;; eliminated register as operand 3.\n-\n-(define_insn \"*reload_muladdsi\"\n-  [(set (match_operand:SI 0 \"\" \"=&r,&r\")\n-\t(plus:SI (plus:SI (mult:SI (match_operand:SI 1 \"\" \"%0,r\")\n-\t\t\t\t   (match_operand:SI 2 \"\" \"r,r\"))\n-\t\t\t  (match_operand:SI 3 \"\" \"r,r\"))\n-\t\t (match_operand:SI 4 \"const_int_operand\" \"n,n\")))]\n-  \"TARGET_ARM && reload_in_progress\"\n-  \"*\n-  output_asm_insn (\\\"mla%?\\\\t%0, %2, %1, %3\\\", operands);\n-  operands[2] = operands[4];\n-  operands[1] = operands[0];\n-  return output_add_immediate (operands);\n-  \"\n-  [(set_attr \"length\" \"20\")\n-   (set_attr \"type\" \"mult\")]\n-)\n-\n-(define_insn \"*reload_muladdsi_compare0\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV (plus:SI (plus:SI (mult:SI\n-\t\t\t\t\t    (match_operand:SI 3 \"\" \"r\")\n-\t\t\t\t\t    (match_operand:SI 4 \"\" \"r\"))\n-\t\t\t\t\t   (match_operand:SI 1 \"\" \"r\"))\n-\t\t\t\t  (match_operand:SI 2 \"const_int_operand\" \"n\"))\n-\t\t\t (const_int 0)))\n-   (set (match_operand:SI 0 \"\" \"=&r\")\n-\t(plus:SI (plus:SI (mult:SI (match_dup 3) (match_dup 4)) (match_dup 1))\n-\t\t (match_dup 2)))]\n-  \"TARGET_ARM && reload_in_progress && !arm_is_xscale\"\n-  \"*\n-    output_add_immediate (operands);\n-    output_asm_insn (\\\"mla%?s\\\\t%0, %3, %4, %0\\\", operands);\n-    return \\\"\\\";\n-  \"\n-  [(set_attr \"length\" \"20\")\n-   (set_attr \"conds\" \"set\")\n-   (set_attr \"type\" \"mult\")]\n-)\n-\n-(define_insn \"*reload_muladdsi_compare0_scratch\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV (plus:SI (plus:SI (mult:SI\n-\t\t\t\t\t    (match_operand:SI 3 \"\" \"r\")\n-\t\t\t\t\t    (match_operand:SI 4 \"\" \"r\"))\n-\t\t\t\t\t   (match_operand:SI 1 \"\" \"r\"))\n-\t\t\t\t  (match_operand:SI 2 \"const_int_operand\" \"n\"))\n-\t\t\t (const_int 0)))\n-   (clobber (match_scratch:SI 0 \"=&r\"))]\n-  \"TARGET_ARM && reload_in_progress\"\n-  \"*\n-    output_add_immediate (operands);\n-    return \\\"mla%?s\\\\t%0, %3, %4, %0\\\";\n-  \"\n-  [(set_attr \"length\" \"20\")\n-   (set_attr \"conds\" \"set\")\n-   (set_attr \"type\" \"mult\")]\n-)\n-\n \f\n \n (define_insn \"*and_scc\""}]}