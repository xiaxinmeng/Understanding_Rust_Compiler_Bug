{"sha": "e8f1d5cb7c9fdf367a11bd939aac73d4e85265e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZThmMWQ1Y2I3YzlmZGYzNjdhMTFiZDkzOWFhYzczZDRlODUyNjVlNQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2018-10-17T12:32:08Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2018-10-17T12:32:08Z"}, "message": "tree-vrp.c (extract_range_from_multiplicative_op): Remove overflow wraps argument.\n\n        * tree-vrp.c (extract_range_from_multiplicative_op): Remove\n\toverflow wraps argument.\n        (extract_range_from_binary_expr_1): Do not pass overflow wraps to\n\twide_int_range_multiplicative_op.\n        * wide-int-range.cc (wide_int_range_mult_wrapping): Remove\n\toverflow wraps argument.\n        (wide_int_range_multiplicative_op): Same.\n        (wide_int_range_lshift): Same.\n        (wide_int_range_div): Same.\n        * wide-int-range.h (wide_int_range_multiplicative_op): Same.\n        (wide_int_range_lshift): Same.\n        (wide_int_range_div): Same.\n\nFrom-SVN: r265238", "tree": {"sha": "7fdee50baaa6717bb3b591b17a353c31b9151921", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fdee50baaa6717bb3b591b17a353c31b9151921"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8f1d5cb7c9fdf367a11bd939aac73d4e85265e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8f1d5cb7c9fdf367a11bd939aac73d4e85265e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8f1d5cb7c9fdf367a11bd939aac73d4e85265e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8f1d5cb7c9fdf367a11bd939aac73d4e85265e5/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fa6b20f32c28aa34efc3c0ab609303d8371b57dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa6b20f32c28aa34efc3c0ab609303d8371b57dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa6b20f32c28aa34efc3c0ab609303d8371b57dd"}], "stats": {"total": 58, "additions": 30, "deletions": 28}, "files": [{"sha": "6cfaac1690d9b232d946fb3989f7f91a3d87f913", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8f1d5cb7c9fdf367a11bd939aac73d4e85265e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8f1d5cb7c9fdf367a11bd939aac73d4e85265e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e8f1d5cb7c9fdf367a11bd939aac73d4e85265e5", "patch": "@@ -1,3 +1,18 @@\n+2018-10-17  Aldy Hernandez  <aldyh@redhat.com>\n+\n+        * tree-vrp.c (extract_range_from_multiplicative_op): Remove\n+\toverflow wraps argument.\n+        (extract_range_from_binary_expr_1): Do not pass overflow wraps to\n+\twide_int_range_multiplicative_op.\n+        * wide-int-range.cc (wide_int_range_mult_wrapping): Remove\n+\toverflow wraps argument.\n+        (wide_int_range_multiplicative_op): Same.\n+        (wide_int_range_lshift): Same.\n+        (wide_int_range_div): Same.\n+        * wide-int-range.h (wide_int_range_multiplicative_op): Same.\n+        (wide_int_range_lshift): Same.\n+        (wide_int_range_div): Same.\n+\n 2018-10-17  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* wide-int-range.h (wide_int_range_shift_undefined_p): Adjust to"}, {"sha": "0a42da7005e1832b6561a7eeea1675234bf53e67", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8f1d5cb7c9fdf367a11bd939aac73d4e85265e5/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8f1d5cb7c9fdf367a11bd939aac73d4e85265e5/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=e8f1d5cb7c9fdf367a11bd939aac73d4e85265e5", "patch": "@@ -1003,13 +1003,12 @@ extract_range_from_multiplicative_op (value_range *vr,\n   wide_int vr1_lb = wi::to_wide (vr1->min);\n   wide_int vr1_ub = wi::to_wide (vr1->max);\n   bool overflow_undefined = TYPE_OVERFLOW_UNDEFINED (type);\n-  bool overflow_wraps = TYPE_OVERFLOW_WRAPS (type);\n   unsigned prec = TYPE_PRECISION (type);\n \n   if (wide_int_range_multiplicative_op (res_lb, res_ub,\n-\t\t\t\t\t code, TYPE_SIGN (type), prec,\n-\t\t\t\t\t vr0_lb, vr0_ub, vr1_lb, vr1_ub,\n-\t\t\t\t\t overflow_undefined, overflow_wraps))\n+\t\t\t\t\tcode, TYPE_SIGN (type), prec,\n+\t\t\t\t\tvr0_lb, vr0_ub, vr1_lb, vr1_ub,\n+\t\t\t\t\toverflow_undefined))\n     set_and_canonicalize_value_range (vr, VR_RANGE,\n \t\t\t\t      wide_int_to_tree (type, res_lb),\n \t\t\t\t      wide_int_to_tree (type, res_ub), NULL);\n@@ -1549,8 +1548,7 @@ extract_range_from_binary_expr_1 (value_range *vr,\n \t\t\t\t\t wi::to_wide (vr0.max),\n \t\t\t\t\t wi::to_wide (vr1.min),\n \t\t\t\t\t wi::to_wide (vr1.max),\n-\t\t\t\t\t TYPE_OVERFLOW_UNDEFINED (expr_type),\n-\t\t\t\t\t TYPE_OVERFLOW_WRAPS (expr_type)))\n+\t\t\t\t\t TYPE_OVERFLOW_UNDEFINED (expr_type)))\n \t\t{\n \t\t  min = wide_int_to_tree (expr_type, res_lb);\n \t\t  max = wide_int_to_tree (expr_type, res_ub);\n@@ -1595,7 +1593,6 @@ extract_range_from_binary_expr_1 (value_range *vr,\n \t\t\t       dividend_min, dividend_max,\n \t\t\t       divisor_min, divisor_max,\n \t\t\t       TYPE_OVERFLOW_UNDEFINED (expr_type),\n-\t\t\t       TYPE_OVERFLOW_WRAPS (expr_type),\n \t\t\t       extra_range_p, extra_min, extra_max))\n \t{\n \t  set_value_range_to_varying (vr);"}, {"sha": "8978b5aecfdf24f09e8f3e969d0a3f6dbfd563f3", "filename": "gcc/wide-int-range.cc", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8f1d5cb7c9fdf367a11bd939aac73d4e85265e5/gcc%2Fwide-int-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8f1d5cb7c9fdf367a11bd939aac73d4e85265e5/gcc%2Fwide-int-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fwide-int-range.cc?ref=e8f1d5cb7c9fdf367a11bd939aac73d4e85265e5", "patch": "@@ -268,7 +268,7 @@ wide_int_range_mult_wrapping (wide_int &res_lb,\n \n    Return TRUE if we were able to perform the operation.\n \n-   NOTE: If code is MULT_EXPR and TYPE_OVERFLOW_WRAPS, the resulting\n+   NOTE: If code is MULT_EXPR and !TYPE_OVERFLOW_UNDEFINED, the resulting\n    range must be canonicalized by the caller because its components\n    may be swapped.  */\n \n@@ -281,8 +281,7 @@ wide_int_range_multiplicative_op (wide_int &res_lb, wide_int &res_ub,\n \t\t\t\t  const wide_int &vr0_ub,\n \t\t\t\t  const wide_int &vr1_lb,\n \t\t\t\t  const wide_int &vr1_ub,\n-\t\t\t\t  bool overflow_undefined,\n-\t\t\t\t  bool overflow_wraps)\n+\t\t\t\t  bool overflow_undefined)\n {\n   /* Multiplications, divisions and shifts are a bit tricky to handle,\n      depending on the mix of signs we have in the two ranges, we\n@@ -296,7 +295,7 @@ wide_int_range_multiplicative_op (wide_int &res_lb, wide_int &res_ub,\n      (MIN0 OP MIN1, MIN0 OP MAX1, MAX0 OP MIN1 and MAX0 OP MAX0 OP\n      MAX1) and then figure the smallest and largest values to form\n      the new range.  */\n-  if (code == MULT_EXPR && overflow_wraps)\n+  if (code == MULT_EXPR && !overflow_undefined)\n     return wide_int_range_mult_wrapping (res_lb, res_ub,\n \t\t\t\t\t sign, prec,\n \t\t\t\t\t vr0_lb, vr0_ub, vr1_lb, vr1_ub);\n@@ -320,7 +319,7 @@ wide_int_range_lshift (wide_int &res_lb, wide_int &res_ub,\n \t\t       signop sign, unsigned prec,\n \t\t       const wide_int &vr0_lb, const wide_int &vr0_ub,\n \t\t       const wide_int &vr1_lb, const wide_int &vr1_ub,\n-\t\t       bool overflow_undefined, bool overflow_wraps)\n+\t\t       bool overflow_undefined)\n {\n   /* Transform left shifts by constants into multiplies.  */\n   if (wi::eq_p (vr1_lb, vr1_ub))\n@@ -330,8 +329,7 @@ wide_int_range_lshift (wide_int &res_lb, wide_int &res_ub,\n       return wide_int_range_multiplicative_op (res_lb, res_ub,\n \t\t\t\t\t       MULT_EXPR, sign, prec,\n \t\t\t\t\t       vr0_lb, vr0_ub, tmp, tmp,\n-\t\t\t\t\t       overflow_undefined,\n-\t\t\t\t\t       /*overflow_wraps=*/true);\n+\t\t\t\t\t       /*overflow_undefined=*/false);\n     }\n \n   int overflow_pos = prec;\n@@ -387,8 +385,7 @@ wide_int_range_lshift (wide_int &res_lb, wide_int &res_ub,\n \t\t\t\t\t     LSHIFT_EXPR, sign, prec,\n \t\t\t\t\t     vr0_lb, vr0_ub,\n \t\t\t\t\t     vr1_lb, vr1_ub,\n-\t\t\t\t\t     overflow_undefined,\n-\t\t\t\t\t     overflow_wraps);\n+\t\t\t\t\t     overflow_undefined);\n   return false;\n }\n \n@@ -785,7 +782,6 @@ wide_int_range_div (wide_int &wmin, wide_int &wmax,\n \t\t    const wide_int &dividend_min, const wide_int &dividend_max,\n \t\t    const wide_int &divisor_min, const wide_int &divisor_max,\n \t\t    bool overflow_undefined,\n-\t\t    bool overflow_wraps,\n \t\t    bool &extra_range_p,\n \t\t    wide_int &extra_min, wide_int &extra_max)\n {\n@@ -796,8 +792,7 @@ wide_int_range_div (wide_int &wmin, wide_int &wmax,\n     return wide_int_range_multiplicative_op (wmin, wmax, code, sign, prec,\n \t\t\t\t\t     dividend_min, dividend_max,\n \t\t\t\t\t     divisor_min, divisor_max,\n-\t\t\t\t\t     overflow_undefined,\n-\t\t\t\t\t     overflow_wraps);\n+\t\t\t\t\t     overflow_undefined);\n \n   /* If flag_non_call_exceptions, we must not eliminate a division\n      by zero.  */\n@@ -818,8 +813,7 @@ wide_int_range_div (wide_int &wmin, wide_int &wmax,\n \t\t\t\t\t     code, sign, prec,\n \t\t\t\t\t     dividend_min, dividend_max,\n \t\t\t\t\t     divisor_min, wi::minus_one (prec),\n-\t\t\t\t\t     overflow_undefined,\n-\t\t\t\t\t     overflow_wraps))\n+\t\t\t\t\t     overflow_undefined))\n \treturn false;\n       extra_range_p = true;\n     }\n@@ -831,8 +825,7 @@ wide_int_range_div (wide_int &wmin, wide_int &wmax,\n \t\t\t\t\t     code, sign, prec,\n \t\t\t\t\t     dividend_min, dividend_max,\n \t\t\t\t\t     wi::one (prec), divisor_max,\n-\t\t\t\t\t     overflow_undefined,\n-\t\t\t\t\t     overflow_wraps))\n+\t\t\t\t\t     overflow_undefined))\n \treturn false;\n     }\n   else"}, {"sha": "961d26dbb08cbe3d166202e45bf80dd4f15d88ef", "filename": "gcc/wide-int-range.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8f1d5cb7c9fdf367a11bd939aac73d4e85265e5/gcc%2Fwide-int-range.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8f1d5cb7c9fdf367a11bd939aac73d4e85265e5/gcc%2Fwide-int-range.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fwide-int-range.h?ref=e8f1d5cb7c9fdf367a11bd939aac73d4e85265e5", "patch": "@@ -42,14 +42,12 @@ extern bool wide_int_range_multiplicative_op (wide_int &res_lb,\n \t\t\t\t\t      const wide_int &vr0_ub,\n \t\t\t\t\t      const wide_int &vr1_lb,\n \t\t\t\t\t      const wide_int &vr1_ub,\n-\t\t\t\t\t      bool overflow_undefined,\n-\t\t\t\t\t      bool overflow_wraps);\n+\t\t\t\t\t      bool overflow_undefined);\n extern bool wide_int_range_lshift (wide_int &res_lb, wide_int &res_ub,\n \t\t\t\t   signop sign, unsigned prec,\n \t\t\t\t   const wide_int &, const wide_int &,\n \t\t\t\t   const wide_int &, const wide_int &,\n-\t\t\t\t   bool overflow_undefined,\n-\t\t\t\t   bool overflow_wraps);\n+\t\t\t\t   bool overflow_undefined);\n extern void wide_int_range_set_zero_nonzero_bits (signop,\n \t\t\t\t\t\t  const wide_int &lb,\n \t\t\t\t\t\t  const wide_int &ub,\n@@ -124,7 +122,6 @@ extern bool wide_int_range_div (wide_int &wmin, wide_int &wmax,\n \t\t\t\tconst wide_int &divisor_min,\n \t\t\t\tconst wide_int &divisor_max,\n \t\t\t\tbool overflow_undefined,\n-\t\t\t\tbool overflow_wraps,\n \t\t\t\tbool &extra_range_p,\n \t\t\t\twide_int &extra_min, wide_int &extra_max);\n "}]}