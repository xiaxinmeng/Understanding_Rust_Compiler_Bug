{"sha": "817e878a31671fcb68492bce35aa1ac87e08efdb", "node_id": "C_kwDOANBUbNoAKDgxN2U4NzhhMzE2NzFmY2I2ODQ5MmJjZTM1YWExYWM4N2UwOGVmZGI", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-09-29T13:18:11Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-09-29T13:18:11Z"}, "message": "c++: introduce TRAIT_TYPE alongside TRAIT_EXPR\n\nWe already have generic support for predicate-like traits that yield a\nboolean value via TRAIT_EXPR, but we lack the same support for traits\nthat yield a type instead of a value.  Such support would streamline\nimplementing efficient builtins for the standard library type traits.\n\nTo that end this patch implements a generic TRAIT_TYPE type alongside\nTRAIT_EXPR, and reimplements the existing UNDERLYING_TYPE builtin trait\nusing this new TRAIT_TYPE.\n\ngcc/cp/ChangeLog:\n\n\t* cp-objcp-common.cc (cp_common_init_ts): Replace\n\tUNDERLYING_TYPE with TRAIT_TYPE.\n\t* cp-tree.def (TRAIT_TYPE): Define.\n\t(UNDERLYING_TYPE): Remove.\n\t* cp-tree.h (TRAIT_TYPE_KIND_RAW): Define.\n\t(TRAIT_TYPE_KIND): Define.\n\t(TRAIT_TYPE_TYPE1): Define.\n\t(TRAIT_TYPE_TYPE2): Define.\n\t(WILDCARD_TYPE_P): Return true for TRAIT_TYPE.\n\t(finish_trait_type): Declare.\n\t* cxx-pretty-print.cc (cxx_pretty_printer::primary_expression):\n\tAdjust after renaming pp_cxx_trait_expression.\n\t(cxx_pretty_printer::simple_type_specifier) <case TRAIT_TYPE>:\n\tNew.\n\t(cxx_pretty_printer::type_id): Replace UNDERLYING_TYPE with\n\tTRAIT_TYPE.\n\t(pp_cxx_trait_expression): Rename to ...\n\t(pp_cxx_trait): ... this.  Handle TRAIT_TYPE as well.  Correct\n\tpretty printing of the trailing arguments.\n\t* cxx-pretty-print.h (pp_cxx_trait_expression): Rename to ...\n\t(pp_cxx_trait_type): ... this.\n\t* error.cc (dump_type) <case UNDERLYING_TYPE>: Remove.\n\t<case TRAIT_TYPE>: New.\n\t(dump_type_prefix): Replace UNDERLYING_WITH with TRAIT_TYPE.\n\t(dump_type_suffix): Likewise.\n\t* mangle.cc (write_type) <case UNDERLYING_TYPE>: Remove.\n\t<case TRAIT_TYPE>: New.\n\t* module.cc (trees_out::type_node) <case UNDERLYING_TYPE>:\n\tRemove.\n\t<case TRAIT_TYPE>: New.\n\t(trees_in::tree_node): Likewise.\n\t* parser.cc (cp_parser_primary_expression): Adjust after\n\trenaming cp_parser_trait_expr.\n\t(cp_parser_trait_expr): Rename to ...\n\t(cp_parser_trait): ... this.  Call finish_trait_type for traits\n\tthat yield a type.\n\t(cp_parser_simple_type_specifier): Adjust after renaming\n\tcp_parser_trait_expr.\n\t* pt.cc (for_each_template_parm_r) <case UNDERLYING_TYPE>:\n\tRemove.\n\t<case TRAIT_TYPE>: New.\n\t(tsubst): Likewise.\n\t(unify): Replace UNDERLYING_TYPE with TRAIT_TYPE.\n\t(dependent_type_p_r): Likewise.\n\t* semantics.cc (finish_underlying_type): Don't return\n\tUNDERLYING_TYPE anymore when processing_template_decl.\n\t(finish_trait_type): Define.\n\t* tree.cc (strip_typedefs) <case UNDERLYING_TYPE>: Remove.\n\t<case TRAIT_TYPE>: New.\n\t(cp_walk_subtrees): Likewise.\n\t* typeck.cc (structural_comptypes): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/alias-decl-59.C: Adjust expected error message.\n\t* g++.dg/ext/underlying_type7.C: Likewise.\n\t* g++.dg/ext/underlying_type13.C: New test.\n\t* g++.dg/ext/underlying_type14.C: New test.", "tree": {"sha": "12b20c83ddd71f33a87747f21776d27673da7295", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12b20c83ddd71f33a87747f21776d27673da7295"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/817e878a31671fcb68492bce35aa1ac87e08efdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/817e878a31671fcb68492bce35aa1ac87e08efdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/817e878a31671fcb68492bce35aa1ac87e08efdb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/817e878a31671fcb68492bce35aa1ac87e08efdb/comments", "author": null, "committer": null, "parents": [{"sha": "df7f2736509cfe5e1dd7d9f263355c5043347a9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df7f2736509cfe5e1dd7d9f263355c5043347a9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df7f2736509cfe5e1dd7d9f263355c5043347a9c"}], "stats": {"total": 275, "additions": 197, "deletions": 78}, "files": [{"sha": "380f288a7f1556d2a629453e601fba09b5c07566", "filename": "gcc/cp/cp-objcp-common.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/817e878a31671fcb68492bce35aa1ac87e08efdb/gcc%2Fcp%2Fcp-objcp-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/817e878a31671fcb68492bce35aa1ac87e08efdb/gcc%2Fcp%2Fcp-objcp-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.cc?ref=817e878a31671fcb68492bce35aa1ac87e08efdb", "patch": "@@ -518,7 +518,7 @@ cp_common_init_ts (void)\n   MARK_TS_TYPE_NON_COMMON (DECLTYPE_TYPE);\n   MARK_TS_TYPE_NON_COMMON (TYPENAME_TYPE);\n   MARK_TS_TYPE_NON_COMMON (TYPEOF_TYPE);\n-  MARK_TS_TYPE_NON_COMMON (UNDERLYING_TYPE);\n+  MARK_TS_TYPE_NON_COMMON (TRAIT_TYPE);\n   MARK_TS_TYPE_NON_COMMON (BOUND_TEMPLATE_TEMPLATE_PARM);\n   MARK_TS_TYPE_NON_COMMON (TEMPLATE_TEMPLATE_PARM);\n   MARK_TS_TYPE_NON_COMMON (TEMPLATE_TYPE_PARM);"}, {"sha": "f83b4c54d43a64beef61d5693bb8f268d06c2fbd", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/817e878a31671fcb68492bce35aa1ac87e08efdb/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/817e878a31671fcb68492bce35aa1ac87e08efdb/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=817e878a31671fcb68492bce35aa1ac87e08efdb", "patch": "@@ -444,9 +444,12 @@ DEFTREECODE (BIT_CAST_EXPR, \"bit_cast_expr\", tcc_expression, 1)\n \n /** C++ extensions. */\n \n-/* Represents a trait expression during template expansion.  */\n+/* Represents a templated trait that yields an expression.  */\n DEFTREECODE (TRAIT_EXPR, \"trait_expr\", tcc_exceptional, 0)\n \n+/* Represents a templated trait that yields a type.  */\n+DEFTREECODE (TRAIT_TYPE, \"trait_type\", tcc_type, 0)\n+\n /* A lambda expression.  This is a C++0x extension.\n    LAMBDA_EXPR_DEFAULT_CAPTURE_MODE is an enum for the default, which may be\n    none.\n@@ -466,10 +469,6 @@ DEFTREECODE (LAMBDA_EXPR, \"lambda_expr\", tcc_exceptional, 0)\n    DECLTYPE_FOR_LAMBDA_RETURN is set if we want lambda return deduction.  */\n DEFTREECODE (DECLTYPE_TYPE, \"decltype_type\", tcc_type, 0)\n \n-/* A type designated by `__underlying_type (type)'.\n-   UNDERLYING_TYPE_TYPE is the type in question.  */\n-DEFTREECODE (UNDERLYING_TYPE, \"underlying_type\", tcc_type, 0)\n-\n /* A type designated by one of the bases type traits.\n    BASES_TYPE is the type in question.  */\n DEFTREECODE (BASES, \"bases\", tcc_type, 0)"}, {"sha": "ff9913ca1eeea95e830ebbe26a0f939d4a7ff0ff", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/817e878a31671fcb68492bce35aa1ac87e08efdb/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/817e878a31671fcb68492bce35aa1ac87e08efdb/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=817e878a31671fcb68492bce35aa1ac87e08efdb", "patch": "@@ -1437,6 +1437,22 @@ struct GTY (()) tree_trait_expr {\n   enum cp_trait_kind kind;\n };\n \n+/* An INTEGER_CST containing the kind of the trait type NODE.  */\n+#define TRAIT_TYPE_KIND_RAW(NODE) \\\n+  TYPE_VALUES_RAW (TRAIT_TYPE_CHECK (NODE))\n+\n+/* The kind of the trait type NODE.  */\n+#define TRAIT_TYPE_KIND(NODE) \\\n+  ((enum cp_trait_kind) TREE_INT_CST_LOW (TRAIT_TYPE_KIND_RAW (NODE)))\n+\n+/* The first argument of the trait type NODE.  */\n+#define TRAIT_TYPE_TYPE1(NODE) \\\n+  TYPE_MIN_VALUE_RAW (TRAIT_TYPE_CHECK (NODE))\n+\n+/* The rest of the arguments of the trait type NODE.  */\n+#define TRAIT_TYPE_TYPE2(NODE) \\\n+  TYPE_MAX_VALUE_RAW (TRAIT_TYPE_CHECK (NODE))\n+\n /* Identifiers used for lambda types are almost anonymous.  Use this\n    spare flag to distinguish them (they also have the anonymous flag).  */\n #define IDENTIFIER_LAMBDA_P(NODE) \\\n@@ -2226,6 +2242,7 @@ enum languages { lang_c, lang_cplusplus };\n    || TREE_CODE (T) == TYPEOF_TYPE\t\t\t\\\n    || TREE_CODE (T) == BOUND_TEMPLATE_TEMPLATE_PARM\t\\\n    || TREE_CODE (T) == DECLTYPE_TYPE\t\t\t\\\n+   || TREE_CODE (T) == TRAIT_TYPE\t\t\t\\\n    || TREE_CODE (T) == DEPENDENT_OPERATOR_TYPE)\n \n /* Nonzero if T is a class (or struct or union) type.  Also nonzero\n@@ -7736,6 +7753,7 @@ extern tree finish_decltype_type                (tree, bool, tsubst_flags_t);\n extern tree fold_builtin_is_corresponding_member (location_t, int, tree *);\n extern tree fold_builtin_is_pointer_inverconvertible_with_class (location_t, int, tree *);\n extern tree finish_trait_expr\t\t\t(location_t, enum cp_trait_kind, tree, tree);\n+extern tree finish_trait_type\t\t\t(enum cp_trait_kind, tree, tree);\n extern tree build_lambda_expr                   (void);\n extern tree build_lambda_object\t\t\t(tree);\n extern tree begin_lambda_type                   (tree);"}, {"sha": "752ce3f8dd99aedcb7ef7c9a99c4153714a49d16", "filename": "gcc/cp/cxx-pretty-print.cc", "status": "modified", "additions": 38, "deletions": 15, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/817e878a31671fcb68492bce35aa1ac87e08efdb/gcc%2Fcp%2Fcxx-pretty-print.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/817e878a31671fcb68492bce35aa1ac87e08efdb/gcc%2Fcp%2Fcxx-pretty-print.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.cc?ref=817e878a31671fcb68492bce35aa1ac87e08efdb", "patch": "@@ -483,7 +483,7 @@ cxx_pretty_printer::primary_expression (tree t)\n       break;\n \n     case TRAIT_EXPR:\n-      pp_cxx_trait_expression (this, t);\n+      pp_cxx_trait (this, t);\n       break;\n \n     case VA_ARG_EXPR:\n@@ -1240,7 +1240,7 @@ cxx_pretty_printer::expression (tree t)\n       break;\n \n     case TRAIT_EXPR:\n-      pp_cxx_trait_expression (this, t);\n+      pp_cxx_trait (this, t);\n       break;\n \n     case ATOMIC_CONSTR:\n@@ -1385,6 +1385,10 @@ cxx_pretty_printer::simple_type_specifier (tree t)\n       pp_cxx_ws_string (this, \"std::nullptr_t\");\n       break;\n \n+    case TRAIT_TYPE:\n+      pp_cxx_trait (this, t);\n+      break;\n+\n     default:\n       c_pretty_printer::simple_type_specifier (t);\n       break;\n@@ -1876,7 +1880,7 @@ cxx_pretty_printer::type_id (tree t)\n     case TEMPLATE_PARM_INDEX:\n     case TEMPLATE_DECL:\n     case TYPEOF_TYPE:\n-    case UNDERLYING_TYPE:\n+    case TRAIT_TYPE:\n     case DECLTYPE_TYPE:\n     case NULLPTR_TYPE:\n     case TEMPLATE_ID_EXPR:\n@@ -2594,9 +2598,22 @@ pp_cxx_binary_fold_expression (cxx_pretty_printer *pp, tree t)\n }\n \n void\n-pp_cxx_trait_expression (cxx_pretty_printer *pp, tree t)\n+pp_cxx_trait (cxx_pretty_printer *pp, tree t)\n {\n-  cp_trait_kind kind = TRAIT_EXPR_KIND (t);\n+  cp_trait_kind kind;\n+  tree type1, type2;\n+  if (TREE_CODE (t) == TRAIT_EXPR)\n+    {\n+      kind = TRAIT_EXPR_KIND (t);\n+      type1 = TRAIT_EXPR_TYPE1 (t);\n+      type2 = TRAIT_EXPR_TYPE2 (t);\n+    }\n+  else\n+    {\n+      kind = TRAIT_TYPE_KIND (t);\n+      type1 = TRAIT_TYPE_TYPE1 (t);\n+      type2 = TRAIT_TYPE_TYPE2 (t);\n+    }\n \n   switch (kind)\n     {\n@@ -2708,23 +2725,29 @@ pp_cxx_trait_expression (cxx_pretty_printer *pp, tree t)\n     case CPTK_REF_CONVERTS_FROM_TEMPORARY:\n       pp_cxx_ws_string (pp, \"__reference_converts_from_temporary\");\n       break;\n-\n+    case CPTK_UNDERLYING_TYPE:\n+      pp_cxx_ws_string (pp, \"__underlying_type\");\n+      break;\n     default:\n       gcc_unreachable ();\n     }\n \n   pp_cxx_left_paren (pp);\n-  pp->type_id (TRAIT_EXPR_TYPE1 (t));\n-\n-  if (kind == CPTK_IS_BASE_OF\n-      || kind == CPTK_IS_SAME_AS\n-      || kind == CPTK_IS_LAYOUT_COMPATIBLE\n-      || kind == CPTK_IS_POINTER_INTERCONVERTIBLE_BASE_OF)\n+  pp->type_id (type1);\n+  if (type2)\n     {\n-      pp_cxx_separate_with (pp, ',');\n-      pp->type_id (TRAIT_EXPR_TYPE2 (t));\n+      if (TREE_CODE (type2) != TREE_LIST)\n+\t{\n+\t  pp_cxx_separate_with (pp, ',');\n+\t  pp->type_id (type2);\n+\t}\n+      else\n+\tfor (tree arg = type2; arg; arg = TREE_CHAIN (arg))\n+\t  {\n+\t    pp_cxx_separate_with (pp, ',');\n+\t    pp->type_id (TREE_VALUE (arg));\n+\t  }\n     }\n-\n   pp_cxx_right_paren (pp);\n }\n "}, {"sha": "25a2c7c8d4a08b67696ab30937e9dfca7adaff78", "filename": "gcc/cp/cxx-pretty-print.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/817e878a31671fcb68492bce35aa1ac87e08efdb/gcc%2Fcp%2Fcxx-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/817e878a31671fcb68492bce35aa1ac87e08efdb/gcc%2Fcp%2Fcxx-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.h?ref=817e878a31671fcb68492bce35aa1ac87e08efdb", "patch": "@@ -90,7 +90,7 @@ void pp_cxx_colon_colon (cxx_pretty_printer *);\n void pp_cxx_separate_with (cxx_pretty_printer *, int);\n \n void pp_cxx_canonical_template_parameter (cxx_pretty_printer *, tree);\n-void pp_cxx_trait_expression (cxx_pretty_printer *, tree);\n+void pp_cxx_trait (cxx_pretty_printer *, tree);\n void pp_cxx_va_arg_expression (cxx_pretty_printer *, tree);\n void pp_cxx_offsetof_expression (cxx_pretty_printer *, tree);\n void pp_cxx_addressof_expression (cxx_pretty_printer *, tree);"}, {"sha": "4514c8bbb445cacea0002c4688c5c1f117d5fae7", "filename": "gcc/cp/error.cc", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/817e878a31671fcb68492bce35aa1ac87e08efdb/gcc%2Fcp%2Ferror.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/817e878a31671fcb68492bce35aa1ac87e08efdb/gcc%2Fcp%2Ferror.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.cc?ref=817e878a31671fcb68492bce35aa1ac87e08efdb", "patch": "@@ -698,12 +698,8 @@ dump_type (cxx_pretty_printer *pp, tree t, int flags)\n       pp_cxx_right_paren (pp);\n       break;\n \n-    case UNDERLYING_TYPE:\n-      pp_cxx_ws_string (pp, \"__underlying_type\");\n-      pp_cxx_whitespace (pp);\n-      pp_cxx_left_paren (pp);\n-      dump_expr (pp, UNDERLYING_TYPE_TYPE (t), flags & ~TFF_EXPR_IN_PARENS);\n-      pp_cxx_right_paren (pp);\n+    case TRAIT_TYPE:\n+      pp_cxx_trait (pp, t);\n       break;\n \n     case TYPE_PACK_EXPANSION:\n@@ -971,7 +967,7 @@ dump_type_prefix (cxx_pretty_printer *pp, tree t, int flags)\n     case COMPLEX_TYPE:\n     case VECTOR_TYPE:\n     case TYPEOF_TYPE:\n-    case UNDERLYING_TYPE:\n+    case TRAIT_TYPE:\n     case DECLTYPE_TYPE:\n     case TYPE_PACK_EXPANSION:\n     case FIXED_POINT_TYPE:\n@@ -1095,7 +1091,7 @@ dump_type_suffix (cxx_pretty_printer *pp, tree t, int flags)\n     case COMPLEX_TYPE:\n     case VECTOR_TYPE:\n     case TYPEOF_TYPE:\n-    case UNDERLYING_TYPE:\n+    case TRAIT_TYPE:\n     case DECLTYPE_TYPE:\n     case TYPE_PACK_EXPANSION:\n     case FIXED_POINT_TYPE:\n@@ -2956,7 +2952,7 @@ dump_expr (cxx_pretty_printer *pp, tree t, int flags)\n       break;\n \n     case TRAIT_EXPR:\n-      pp_cxx_trait_expression (pp, t);\n+      pp_cxx_trait (pp, t);\n       break;\n \n     case VA_ARG_EXPR:"}, {"sha": "f051e76466a31f3ad369f1671a62df5ba7b18b3d", "filename": "gcc/cp/mangle.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/817e878a31671fcb68492bce35aa1ac87e08efdb/gcc%2Fcp%2Fmangle.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/817e878a31671fcb68492bce35aa1ac87e08efdb/gcc%2Fcp%2Fmangle.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.cc?ref=817e878a31671fcb68492bce35aa1ac87e08efdb", "patch": "@@ -2389,8 +2389,9 @@ write_type (tree type)\n \t      sorry (\"mangling %<typeof%>, use %<decltype%> instead\");\n \t      break;\n \n-\t    case UNDERLYING_TYPE:\n-\t      sorry (\"mangling %<__underlying_type%>\");\n+\t    case TRAIT_TYPE:\n+\t      error (\"use of built-in trait %qT in function signature; \"\n+\t\t     \"use library traits instead\", type);\n \t      break;\n \n \t    case LANG_TYPE:"}, {"sha": "500ac06563a8e870ba13d817bdd880234ce5d6dd", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/817e878a31671fcb68492bce35aa1ac87e08efdb/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/817e878a31671fcb68492bce35aa1ac87e08efdb/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=817e878a31671fcb68492bce35aa1ac87e08efdb", "patch": "@@ -8926,7 +8926,6 @@ trees_out::type_node (tree type)\n \n     case DECLTYPE_TYPE:\n     case TYPEOF_TYPE:\n-    case UNDERLYING_TYPE:\n     case DEPENDENT_OPERATOR_TYPE:\n       tree_node (TYPE_VALUES_RAW (type));\n       if (TREE_CODE (type) == DECLTYPE_TYPE)\n@@ -8936,6 +8935,12 @@ trees_out::type_node (tree type)\n \t  tree_node_bools (type);\n       break;\n \n+    case TRAIT_TYPE:\n+      tree_node (TRAIT_TYPE_KIND_RAW (type));\n+      tree_node (TRAIT_TYPE_TYPE1 (type));\n+      tree_node (TRAIT_TYPE_TYPE2 (type));\n+      break;\n+\n     case TYPE_ARGUMENT_PACK:\n       /* No additional data.  */\n       break;\n@@ -9450,7 +9455,6 @@ trees_in::tree_node (bool is_use)\n \n \t  case DECLTYPE_TYPE:\n \t  case TYPEOF_TYPE:\n-\t  case UNDERLYING_TYPE:\n \t  case DEPENDENT_OPERATOR_TYPE:\n \t    {\n \t      tree expr = tree_node ();\n@@ -9465,6 +9469,22 @@ trees_in::tree_node (bool is_use)\n \t    }\n \t    break;\n \n+\t  case TRAIT_TYPE:\n+\t    {\n+\t      tree kind = tree_node ();\n+\t      tree type1 = tree_node ();\n+\t      tree type2 = tree_node ();\n+\t      if (!get_overrun ())\n+\t\t{\n+\t\t  res = cxx_make_type (TRAIT_TYPE);\n+\t\t  TRAIT_TYPE_KIND_RAW (res) = kind;\n+\t\t  TRAIT_TYPE_TYPE1 (res) = type1;\n+\t\t  TRAIT_TYPE_TYPE2 (res) = type2;\n+\t\t  SET_TYPE_STRUCTURAL_EQUALITY (res);\n+\t\t}\n+\t    }\n+\t    break;\n+\n \t  case TYPE_ARGUMENT_PACK:\n \t    if (!get_overrun ())\n \t      {"}, {"sha": "9f5e2c292b334dbd915d9598d42b73aa5a48cd78", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/817e878a31671fcb68492bce35aa1ac87e08efdb/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/817e878a31671fcb68492bce35aa1ac87e08efdb/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=817e878a31671fcb68492bce35aa1ac87e08efdb", "patch": "@@ -2783,7 +2783,7 @@ static void cp_parser_late_parsing_default_args\n   (cp_parser *, tree);\n static tree cp_parser_sizeof_operand\n   (cp_parser *, enum rid);\n-static cp_expr cp_parser_trait_expr\n+static cp_expr cp_parser_trait\n   (cp_parser *, enum rid);\n static bool cp_parser_declares_only_class_p\n   (cp_parser *);\n@@ -5928,7 +5928,7 @@ cp_parser_primary_expression (cp_parser *parser,\n \tcase RID_IS_NOTHROW_CONVERTIBLE:\n \tcase RID_REF_CONSTRUCTS_FROM_TEMPORARY:\n \tcase RID_REF_CONVERTS_FROM_TEMPORARY:\n-\t  return cp_parser_trait_expr (parser, token->keyword);\n+\t  return cp_parser_trait (parser, token->keyword);\n \n \t// C++ concepts\n \tcase RID_REQUIRES:\n@@ -10882,18 +10882,16 @@ cp_parser_builtin_offsetof (cp_parser *parser)\n   return expr;\n }\n \n-/* Parse a trait expression.\n-\n-   Returns a representation of the expression, the underlying type\n-   of the type at issue when KEYWORD is RID_UNDERLYING_TYPE.  */\n+/* Parse a builtin trait expression or type.  */\n \n static cp_expr\n-cp_parser_trait_expr (cp_parser* parser, enum rid keyword)\n+cp_parser_trait (cp_parser* parser, enum rid keyword)\n {\n   cp_trait_kind kind;\n   tree type1, type2 = NULL_TREE;\n   bool binary = false;\n   bool variadic = false;\n+  bool type = false;\n \n   switch (keyword)\n     {\n@@ -10989,6 +10987,7 @@ cp_parser_trait_expr (cp_parser* parser, enum rid keyword)\n       break;\n     case RID_UNDERLYING_TYPE:\n       kind = CPTK_UNDERLYING_TYPE;\n+      type = true;\n       break;\n     case RID_BASES:\n       kind = CPTK_BASES;\n@@ -11092,14 +11091,15 @@ cp_parser_trait_expr (cp_parser* parser, enum rid keyword)\n      the trait expr now or saving it for template instantiation.  */\n   switch (kind)\n     {\n-    case CPTK_UNDERLYING_TYPE:\n-      return cp_expr (finish_underlying_type (type1), trait_loc);\n     case CPTK_BASES:\n       return cp_expr (finish_bases (type1, false), trait_loc);\n     case CPTK_DIRECT_BASES:\n       return cp_expr (finish_bases (type1, true), trait_loc);\n     default:\n-      return finish_trait_expr (trait_loc, kind, type1, type2);\n+      if (type)\n+\treturn finish_trait_type (kind, type1, type2);\n+      else\n+\treturn finish_trait_expr (trait_loc, kind, type1, type2);\n     }\n }\n \n@@ -19867,7 +19867,7 @@ cp_parser_simple_type_specifier (cp_parser* parser,\n       return type;\n \n     case RID_UNDERLYING_TYPE:\n-      type = cp_parser_trait_expr (parser, RID_UNDERLYING_TYPE);\n+      type = cp_parser_trait (parser, token->keyword);\n       if (decl_specs)\n \tcp_parser_set_decl_spec_type (decl_specs, type,\n \t\t\t\t      token,\n@@ -19877,7 +19877,7 @@ cp_parser_simple_type_specifier (cp_parser* parser,\n \n     case RID_BASES:\n     case RID_DIRECT_BASES:\n-      type = cp_parser_trait_expr (parser, token->keyword);\n+      type = cp_parser_trait (parser, token->keyword);\n       if (decl_specs)\n        cp_parser_set_decl_spec_type (decl_specs, type,\n                                      token,"}, {"sha": "0f92374f19ade1c0ea3e76d9653a1a257452ec67", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/817e878a31671fcb68492bce35aa1ac87e08efdb/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/817e878a31671fcb68492bce35aa1ac87e08efdb/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=817e878a31671fcb68492bce35aa1ac87e08efdb", "patch": "@@ -10617,7 +10617,6 @@ for_each_template_parm_r (tree *tp, int *walk_subtrees, void *d)\n \n     case TYPEOF_TYPE:\n     case DECLTYPE_TYPE:\n-    case UNDERLYING_TYPE:\n       if (pfd->include_nondeduced_p\n \t  && for_each_template_parm (TYPE_VALUES_RAW (t), fn, data,\n \t\t\t\t     pfd->visited,\n@@ -10627,6 +10626,15 @@ for_each_template_parm_r (tree *tp, int *walk_subtrees, void *d)\n       *walk_subtrees = false;\n       break;\n \n+    case TRAIT_TYPE:\n+      if (pfd->include_nondeduced_p)\n+\t{\n+\t  WALK_SUBTREE (TRAIT_TYPE_TYPE1 (t));\n+\t  WALK_SUBTREE (TRAIT_TYPE_TYPE2 (t));\n+\t}\n+      *walk_subtrees = false;\n+      break;\n+\n     case FUNCTION_DECL:\n     case VAR_DECL:\n       if (DECL_LANG_SPECIFIC (t) && DECL_TEMPLATE_INFO (t))\n@@ -16513,11 +16521,14 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t\t\t\t\tcomplain | tf_ignore_bad_quals);\n       }\n \n-    case UNDERLYING_TYPE:\n+    case TRAIT_TYPE:\n       {\n-\ttree type = tsubst (UNDERLYING_TYPE_TYPE (t), args,\n-\t\t\t    complain, in_decl);\n-\treturn finish_underlying_type (type);\n+\ttree type1 = tsubst (TRAIT_TYPE_TYPE1 (t), args, complain, in_decl);\n+\ttree type2 = tsubst (TRAIT_TYPE_TYPE2 (t), args, complain, in_decl);\n+\ttype = finish_trait_type (TRAIT_TYPE_KIND (t), type1, type2);\n+\treturn cp_build_qualified_type (type,\n+\t\t\t\t\tcp_type_quals (t) | cp_type_quals (type),\n+\t\t\t\t\tcomplain | tf_ignore_bad_quals);\n       }\n \n     case TYPE_ARGUMENT_PACK:\n@@ -24927,9 +24938,9 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict,\n \n     case TYPEOF_TYPE:\n     case DECLTYPE_TYPE:\n-    case UNDERLYING_TYPE:\n+    case TRAIT_TYPE:\n       /* Cannot deduce anything from TYPEOF_TYPE, DECLTYPE_TYPE,\n-\t or UNDERLYING_TYPE nodes.  */\n+\t or TRAIT_TYPE nodes.  */\n       return unify_success (explain_p);\n \n     case ERROR_MARK:\n@@ -27504,12 +27515,12 @@ dependent_type_p_r (tree type)\n \t       (INNERMOST_TEMPLATE_ARGS (CLASSTYPE_TI_ARGS (type)))))\n     return true;\n \n-  /* All TYPEOF_TYPEs, DECLTYPE_TYPEs, and UNDERLYING_TYPEs are\n+  /* All TYPEOF_TYPEs, DECLTYPE_TYPEs, and TRAIT_TYPEs are\n      dependent; if the argument of the `typeof' expression is not\n      type-dependent, then it should already been have resolved.  */\n   if (TREE_CODE (type) == TYPEOF_TYPE\n       || TREE_CODE (type) == DECLTYPE_TYPE\n-      || TREE_CODE (type) == UNDERLYING_TYPE)\n+      || TREE_CODE (type) == TRAIT_TYPE)\n     return true;\n \n   /* A template argument pack is dependent if any of its packed"}, {"sha": "aae492de5299bbe135e047b0eb6bf598751fbd7d", "filename": "gcc/cp/semantics.cc", "status": "modified", "additions": 33, "deletions": 12, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/817e878a31671fcb68492bce35aa1ac87e08efdb/gcc%2Fcp%2Fsemantics.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/817e878a31671fcb68492bce35aa1ac87e08efdb/gcc%2Fcp%2Fsemantics.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.cc?ref=817e878a31671fcb68492bce35aa1ac87e08efdb", "patch": "@@ -4397,17 +4397,6 @@ finish_typeof (tree expr)\n tree\n finish_underlying_type (tree type)\n {\n-  tree underlying_type;\n-\n-  if (processing_template_decl)\n-    {\n-      underlying_type = cxx_make_type (UNDERLYING_TYPE);\n-      UNDERLYING_TYPE_TYPE (underlying_type) = type;\n-      SET_TYPE_STRUCTURAL_EQUALITY (underlying_type);\n-\n-      return underlying_type;\n-    }\n-\n   if (!complete_type_or_else (type, NULL_TREE))\n     return error_mark_node;\n \n@@ -4417,7 +4406,7 @@ finish_underlying_type (tree type)\n       return error_mark_node;\n     }\n \n-  underlying_type = ENUM_UNDERLYING_TYPE (type);\n+  tree underlying_type = ENUM_UNDERLYING_TYPE (type);\n \n   /* Fixup necessary in this case because ENUM_UNDERLYING_TYPE\n      includes TYPE_MIN_VALUE and TYPE_MAX_VALUE information.\n@@ -12224,6 +12213,38 @@ finish_trait_expr (location_t loc, cp_trait_kind kind, tree type1, tree type2)\n   return maybe_wrap_with_location (val, loc);\n }\n \n+/* Process a trait type.  */\n+\n+tree\n+finish_trait_type (cp_trait_kind kind, tree type1, tree type2)\n+{\n+  if (type1 == error_mark_node\n+      || type2 == error_mark_node)\n+    return error_mark_node;\n+\n+  if (processing_template_decl)\n+    {\n+      tree type = cxx_make_type (TRAIT_TYPE);\n+      TRAIT_TYPE_TYPE1 (type) = type1;\n+      TRAIT_TYPE_TYPE2 (type) = type2;\n+      TRAIT_TYPE_KIND_RAW (type) = build_int_cstu (integer_type_node, kind);\n+      /* These traits are intended to be used in the definition of the ::type\n+\t member of the corresponding standard library type trait and aren't\n+\t mangleable (and thus won't appear directly in template signatures),\n+\t so structural equality should suffice.  */\n+      SET_TYPE_STRUCTURAL_EQUALITY (type);\n+      return type;\n+    }\n+\n+  switch (kind)\n+    {\n+    case CPTK_UNDERLYING_TYPE:\n+      return finish_underlying_type (type1);\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+\n /* Do-nothing variants of functions to handle pragma FLOAT_CONST_DECIMAL64,\n    which is ignored for C++.  */\n "}, {"sha": "aa9c1b7d8f97b03099508f98e9092d62fb58e82e", "filename": "gcc/cp/tree.cc", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/817e878a31671fcb68492bce35aa1ac87e08efdb/gcc%2Fcp%2Ftree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/817e878a31671fcb68492bce35aa1ac87e08efdb/gcc%2Fcp%2Ftree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.cc?ref=817e878a31671fcb68492bce35aa1ac87e08efdb", "patch": "@@ -1776,10 +1776,17 @@ strip_typedefs (tree t, bool *remove_attributes /* = NULL */,\n \t\t   DECLTYPE_TYPE_ID_EXPR_OR_MEMBER_ACCESS_P (t),\n \t\t   tf_none));\n       break;\n-    case UNDERLYING_TYPE:\n-      type = strip_typedefs (UNDERLYING_TYPE_TYPE (t),\n-\t\t\t     remove_attributes, flags);\n-      result = finish_underlying_type (type);\n+    case TRAIT_TYPE:\n+      {\n+\ttree type1 = strip_typedefs (TRAIT_TYPE_TYPE1 (t),\n+\t\t\t\t     remove_attributes, flags);\n+\ttree type2 = strip_typedefs (TRAIT_TYPE_TYPE2 (t),\n+\t\t\t\t     remove_attributes, flags);\n+\tif (type1 == TRAIT_TYPE_TYPE1 (t) && type2 == TRAIT_TYPE_TYPE2 (t))\n+\t  result = NULL_TREE;\n+\telse\n+\t  result = finish_trait_type (TRAIT_TYPE_KIND (t), type1, type2);\n+      }\n       break;\n     case TYPE_PACK_EXPANSION:\n       {\n@@ -5383,7 +5390,6 @@ cp_walk_subtrees (tree *tp, int *walk_subtrees_p, walk_tree_fn func,\n     case UNBOUND_CLASS_TEMPLATE:\n     case TEMPLATE_PARM_INDEX:\n     case TYPEOF_TYPE:\n-    case UNDERLYING_TYPE:\n       /* None of these have subtrees other than those already walked\n \t above.  */\n       *walk_subtrees_p = 0;\n@@ -5472,6 +5478,12 @@ cp_walk_subtrees (tree *tp, int *walk_subtrees_p, walk_tree_fn func,\n       *walk_subtrees_p = 0;\n       break;\n \n+    case TRAIT_TYPE:\n+      WALK_SUBTREE (TRAIT_TYPE_TYPE1 (*tp));\n+      WALK_SUBTREE (TRAIT_TYPE_TYPE2 (*tp));\n+      *walk_subtrees_p = 0;\n+      break;\n+\n     case DECLTYPE_TYPE:\n       ++cp_unevaluated_operand;\n       /* We can't use WALK_SUBTREE here because of the goto.  */"}, {"sha": "cecf825f5e62a471aee48f0ddbc2b03216b111c7", "filename": "gcc/cp/typeck.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/817e878a31671fcb68492bce35aa1ac87e08efdb/gcc%2Fcp%2Ftypeck.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/817e878a31671fcb68492bce35aa1ac87e08efdb/gcc%2Fcp%2Ftypeck.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.cc?ref=817e878a31671fcb68492bce35aa1ac87e08efdb", "patch": "@@ -1621,8 +1621,11 @@ structural_comptypes (tree t1, tree t2, int strict)\n         return false;\n       break;\n \n-    case UNDERLYING_TYPE:\n-      if (!same_type_p (UNDERLYING_TYPE_TYPE (t1), UNDERLYING_TYPE_TYPE (t2)))\n+    case TRAIT_TYPE:\n+      if (TRAIT_TYPE_KIND (t1) != TRAIT_TYPE_KIND (t2))\n+\treturn false;\n+      if (!same_type_p (TRAIT_TYPE_TYPE1 (t1), TRAIT_TYPE_TYPE1 (t2))\n+\t  || !cp_tree_equal (TRAIT_TYPE_TYPE2 (t1), TRAIT_TYPE_TYPE2 (t2)))\n \treturn false;\n       break;\n "}, {"sha": "50946576f7405e61f1b06ce5ccffc18390170b9e", "filename": "gcc/testsuite/g++.dg/cpp0x/alias-decl-59.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/817e878a31671fcb68492bce35aa1ac87e08efdb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-59.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/817e878a31671fcb68492bce35aa1ac87e08efdb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-59.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-59.C?ref=817e878a31671fcb68492bce35aa1ac87e08efdb", "patch": "@@ -5,7 +5,7 @@ template<typename>\n struct A {};\n \n template<typename T>\n-using B = A<__underlying_type(T) [[gnu::aligned(4)]]>; // { dg-warning \"ignoring attributes on template argument\" }\n+using B = A<__underlying_type(T) [[gnu::aligned(4)]]>; // { dg-warning \"ignoring attributes applied to dependent type\" }\n \n template<typename T>\n-using B = A<__underlying_type(T) [[gnu::packed]]>; // { dg-warning \"ignoring attributes on template argument\" }\n+using B = A<__underlying_type(T) [[gnu::packed]]>; // { dg-warning \"ignoring attributes applied to dependent type\" }"}, {"sha": "c53da11eb8af4f60e14f2ef596df39ea4a63cc4d", "filename": "gcc/testsuite/g++.dg/ext/underlying_type13.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/817e878a31671fcb68492bce35aa1ac87e08efdb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funderlying_type13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/817e878a31671fcb68492bce35aa1ac87e08efdb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funderlying_type13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funderlying_type13.C?ref=817e878a31671fcb68492bce35aa1ac87e08efdb", "patch": "@@ -0,0 +1,7 @@\n+// Verify when substituting __underlying_type its cv-quals are carried over.\n+// { dg-do compile { target c++11 } }\n+\n+template<class T> using const_underlying_type_t = const __underlying_type(T);\n+enum A { a };\n+using type = const_underlying_type_t<A>;\n+using type = const __underlying_type(A);"}, {"sha": "91840b2015c0c058d3834221136ca5bdb6e6e6dd", "filename": "gcc/testsuite/g++.dg/ext/underlying_type14.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/817e878a31671fcb68492bce35aa1ac87e08efdb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funderlying_type14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/817e878a31671fcb68492bce35aa1ac87e08efdb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funderlying_type14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funderlying_type14.C?ref=817e878a31671fcb68492bce35aa1ac87e08efdb", "patch": "@@ -0,0 +1,8 @@\n+// Verify pretty-printing when nesting a builtin trait.\n+\n+template<class T> void f(__underlying_type(__underlying_type(T))); // { dg-error \"\" }\n+// { dg-message \"__underlying_type\\\\(__underlying_type\\\\(T\\\\)\\\\)\\\\)\" \"\" { target *-*-* } .-1 }\n+\n+int main() {\n+  f<int>(0); // { dg-error \"no match\" }\n+}"}, {"sha": "137a0f08547c6dab3455aa0bae490a2f1bedd9f9", "filename": "gcc/testsuite/g++.dg/ext/underlying_type7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/817e878a31671fcb68492bce35aa1ac87e08efdb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funderlying_type7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/817e878a31671fcb68492bce35aa1ac87e08efdb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funderlying_type7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funderlying_type7.C?ref=817e878a31671fcb68492bce35aa1ac87e08efdb", "patch": "@@ -9,7 +9,7 @@ enum class E6 : long { c = __LONG_MAX__ };\n \n template<typename T>\n   void\n-  test(T, __underlying_type(T)) // { dg-message \"sorry, unimplemented: mangling\" }\n+  test(T, __underlying_type(T)) // { dg-error \"built-in trait '__underlying_type\\\\(T\\\\)'\" }\n   { }\n \n int main()"}]}