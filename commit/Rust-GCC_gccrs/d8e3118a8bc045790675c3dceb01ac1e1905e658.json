{"sha": "d8e3118a8bc045790675c3dceb01ac1e1905e658", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhlMzExOGE4YmMwNDU3OTA2NzVjM2RjZWIwMWFjMWUxOTA1ZTY1OA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2007-03-12T11:32:13Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-03-12T11:32:13Z"}, "message": "i386.md (fixuns_trunc<mode>hi2): Implement from fixuns_truncsfhi2 and fixuns_truncdfhi2 using SSEMODEF mode macro.\n\n\t* config/i386/i386.md (fixuns_trunc<mode>hi2): Implement from\n\tfixuns_truncsfhi2 and fixuns_truncdfhi2 using SSEMODEF\n\tmode macro.\n\t(fix_trunc<mode>di_sse): Implement from fix_truncsfdi_sse and\n\tfix_truncdfdi_sse using SSEMODEF mode macro.\n\t(fix_trunc<mode>si_sse): Implement from fix_truncsfsi_sse and\n\tfix_truncdfsi_sse using SSEMODEF mode macro.\n\t(fix_trunc?f?i_sse peephole2): Implement using SSEMODEF mode macro.\n\t(fix_trunc?f?i_sse K8 peephole2): Fix register constraint.\n\nFrom-SVN: r122839", "tree": {"sha": "1df428fa9164382a9e0d60f6ead036a1353d40b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1df428fa9164382a9e0d60f6ead036a1353d40b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8e3118a8bc045790675c3dceb01ac1e1905e658", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8e3118a8bc045790675c3dceb01ac1e1905e658", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8e3118a8bc045790675c3dceb01ac1e1905e658", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8e3118a8bc045790675c3dceb01ac1e1905e658/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "56fca24ad8c6433a6146128fd2c2eb64b4f0a1e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56fca24ad8c6433a6146128fd2c2eb64b4f0a1e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56fca24ad8c6433a6146128fd2c2eb64b4f0a1e5"}], "stats": {"total": 84, "additions": 30, "deletions": 54}, "files": [{"sha": "9113d5d4b9a65fb0560c226558a5f8cc67ca67bb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e3118a8bc045790675c3dceb01ac1e1905e658/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e3118a8bc045790675c3dceb01ac1e1905e658/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d8e3118a8bc045790675c3dceb01ac1e1905e658", "patch": "@@ -1,3 +1,15 @@\n+2007-03-12  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (fixuns_trunc<mode>hi2): Implement from\n+\tfixuns_truncsfhi2 and fixuns_truncdfhi2 using SSEMODEF\n+\tmode macro.\n+\t(fix_trunc<mode>di_sse): Implement from fix_truncsfdi_sse and\n+\tfix_truncdfdi_sse using SSEMODEF mode macro.\n+\t(fix_trunc<mode>si_sse): Implement from fix_truncsfsi_sse and\n+\tfix_truncdfsi_sse using SSEMODEF mode macro.\n+\t(fix_trunc?f?i_sse peephole2): Implement using SSEMODEF mode macro.\n+\t(fix_trunc?f?i_sse K8 peephole2): Fix register constraint.\n+\n 2007-03-12  Richard Sandiford  <richard@codesourcery.com>\n \n \t* config.gcc (i[4567]86-wrs-vxworks, i[4567]86-wrs-vxworksae): Add"}, {"sha": "f3fb8487590bc5d7cebec1c42be4009788a14ee2", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 18, "deletions": 54, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e3118a8bc045790675c3dceb01ac1e1905e658/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e3118a8bc045790675c3dceb01ac1e1905e658/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=d8e3118a8bc045790675c3dceb01ac1e1905e658", "patch": "@@ -4396,77 +4396,41 @@\n ;; Without these patterns, we'll try the unsigned SI conversion which\n ;; is complex for SSE, rather than the signed SI conversion, which isn't.\n \n-(define_expand \"fixuns_truncsfhi2\"\n+(define_expand \"fixuns_trunc<mode>hi2\"\n   [(set (match_dup 2)\n-\t(fix:SI (match_operand:SF 1 \"nonimmediate_operand\" \"\")))\n+\t(fix:SI (match_operand:SSEMODEF 1 \"nonimmediate_operand\" \"\")))\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"\")\n \t(subreg:HI (match_dup 2) 0))]\n-  \"TARGET_SSE_MATH\"\n-  \"operands[2] = gen_reg_rtx (SImode);\")\n-\n-(define_expand \"fixuns_truncdfhi2\"\n-  [(set (match_dup 2)\n-\t(fix:SI (match_operand:DF 1 \"nonimmediate_operand\" \"\")))\n-   (set (match_operand:HI 0 \"nonimmediate_operand\" \"\")\n-\t(subreg:HI (match_dup 2) 0))]\n-  \"TARGET_SSE_MATH && TARGET_SSE2\"\n+  \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\"\n   \"operands[2] = gen_reg_rtx (SImode);\")\n \n ;; When SSE is available, it is always faster to use it!\n-(define_insn \"fix_truncsfdi_sse\"\n+(define_insn \"fix_trunc<mode>di_sse\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n-\t(fix:DI (match_operand:SF 1 \"nonimmediate_operand\" \"x,xm\")))]\n-  \"TARGET_64BIT && TARGET_SSE && (!TARGET_FISTTP || TARGET_SSE_MATH)\"\n-  \"cvttss2si{q}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"sseicvt\")\n-   (set_attr \"mode\" \"SF\")\n-   (set_attr \"athlon_decode\" \"double,vector\")\n-   (set_attr \"amdfam10_decode\" \"double,double\")])\n-\n-(define_insn \"fix_truncdfdi_sse\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n-\t(fix:DI (match_operand:DF 1 \"nonimmediate_operand\" \"x,xm\")))]\n-  \"TARGET_64BIT && TARGET_SSE2 && (!TARGET_FISTTP || TARGET_SSE_MATH)\"\n-  \"cvttsd2si{q}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"sseicvt\")\n-   (set_attr \"mode\" \"DF\")\n-   (set_attr \"athlon_decode\" \"double,vector\")\n-   (set_attr \"amdfam10_decode\" \"double,double\")])\n-\n-(define_insn \"fix_truncsfsi_sse\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-\t(fix:SI (match_operand:SF 1 \"nonimmediate_operand\" \"x,xm\")))]\n-  \"TARGET_SSE && (!TARGET_FISTTP || TARGET_SSE_MATH)\"\n-  \"cvttss2si\\t{%1, %0|%0, %1}\"\n+\t(fix:DI (match_operand:SSEMODEF 1 \"nonimmediate_operand\" \"x,xm\")))]\n+  \"TARGET_64BIT && SSE_FLOAT_MODE_P (<MODE>mode)\n+   && (!TARGET_FISTTP || TARGET_SSE_MATH)\"\n+  \"cvtts<ssemodefsuffix>2si{q}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sseicvt\")\n-   (set_attr \"mode\" \"DF\")\n+   (set_attr \"mode\" \"<MODE>\")\n    (set_attr \"athlon_decode\" \"double,vector\")\n    (set_attr \"amdfam10_decode\" \"double,double\")])\n \n-(define_insn \"fix_truncdfsi_sse\"\n+(define_insn \"fix_trunc<mode>si_sse\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-\t(fix:SI (match_operand:DF 1 \"nonimmediate_operand\" \"x,xm\")))]\n-  \"TARGET_SSE2 && (!TARGET_FISTTP || TARGET_SSE_MATH)\"\n-  \"cvttsd2si\\t{%1, %0|%0, %1}\"\n+\t(fix:SI (match_operand:SSEMODEF 1 \"nonimmediate_operand\" \"x,xm\")))]\n+  \"SSE_FLOAT_MODE_P (<MODE>mode)\n+   && (!TARGET_FISTTP || TARGET_SSE_MATH)\"\n+  \"cvtts<ssemodefsuffix>2si\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sseicvt\")\n-   (set_attr \"mode\" \"DF\")\n+   (set_attr \"mode\" \"<MODE>\")\n    (set_attr \"athlon_decode\" \"double,vector\")\n    (set_attr \"amdfam10_decode\" \"double,double\")])\n \n ;; Shorten x87->SSE reload sequences of fix_trunc?f?i_sse patterns.\n (define_peephole2\n-  [(set (match_operand:DF 0 \"register_operand\" \"\")\n-\t(match_operand:DF 1 \"memory_operand\" \"\"))\n-   (set (match_operand:SSEMODEI24 2 \"register_operand\" \"\")\n-\t(fix:SSEMODEI24 (match_dup 0)))]\n-  \"!TARGET_K8\n-   && peep2_reg_dead_p (2, operands[0])\"\n-  [(set (match_dup 2) (fix:SSEMODEI24 (match_dup 1)))]\n-  \"\")\n-\n-(define_peephole2\n-  [(set (match_operand:SF 0 \"register_operand\" \"\")\n-\t(match_operand:SF 1 \"memory_operand\" \"\"))\n+  [(set (match_operand:SSEMODEF 0 \"register_operand\" \"\")\n+\t(match_operand:SSEMODEF 1 \"memory_operand\" \"\"))\n    (set (match_operand:SSEMODEI24 2 \"register_operand\" \"\")\n \t(fix:SSEMODEI24 (match_dup 0)))]\n   \"!TARGET_K8\n@@ -4476,7 +4440,7 @@\n \n ;; Avoid vector decoded forms of the instruction.\n (define_peephole2\n-  [(match_scratch:DF 2 \"Y\")\n+  [(match_scratch:DF 2 \"Y2\")\n    (set (match_operand:SSEMODEI24 0 \"register_operand\" \"\")\n \t(fix:SSEMODEI24 (match_operand:DF 1 \"memory_operand\" \"\")))]\n   \"(TARGET_K8 || TARGET_GENERIC64) && !optimize_size\""}]}