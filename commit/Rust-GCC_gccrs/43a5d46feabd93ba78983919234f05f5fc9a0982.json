{"sha": "43a5d46feabd93ba78983919234f05f5fc9a0982", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNhNWQ0NmZlYWJkOTNiYTc4OTgzOTE5MjM0ZjA1ZjVmYzlhMDk4Mg==", "commit": {"author": {"name": "Ankur Saini", "email": "arsenic@sourceware.org", "date": "2021-08-25T07:03:06Z"}, "committer": {"name": "Ankur Saini", "email": "arsenic@sourceware.org", "date": "2021-08-25T13:30:36Z"}, "message": "analyzer: Impose recursion limit on indirect calls.\n\n2021-08-25  Ankur Saini  <arsenic@sourceware.org>\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/101980\n\t* engine.cc (exploded_graph::maybe_create_dynamic_call): Don't create\n\tcalls if max recursion limit is reached.", "tree": {"sha": "659d0870362edab401f70d8ed5a93ad21d591577", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/659d0870362edab401f70d8ed5a93ad21d591577"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43a5d46feabd93ba78983919234f05f5fc9a0982", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43a5d46feabd93ba78983919234f05f5fc9a0982", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43a5d46feabd93ba78983919234f05f5fc9a0982", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43a5d46feabd93ba78983919234f05f5fc9a0982/comments", "author": null, "committer": null, "parents": [{"sha": "29c77454e5ab33ce06a741eacdfbd5348fbccc95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29c77454e5ab33ce06a741eacdfbd5348fbccc95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29c77454e5ab33ce06a741eacdfbd5348fbccc95"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "9c604d1eb8cd71f59047744a091c021307266014", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a5d46feabd93ba78983919234f05f5fc9a0982/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a5d46feabd93ba78983919234f05f5fc9a0982/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=43a5d46feabd93ba78983919234f05f5fc9a0982", "patch": "@@ -3059,6 +3059,20 @@ exploded_graph::maybe_create_dynamic_call (const gcall *call,\n \n       new_point.push_to_call_stack (sn_exit,\n                                     next_point.get_supernode());\n+\n+      /* Impose a maximum recursion depth and don't analyze paths\n+         that exceed it further.\n+         This is something of a blunt workaround, but it only\n+         applies to recursion (and mutual recursion), not to\n+         general call stacks.  */\n+      if (new_point.get_call_string ().calc_recursion_depth ()\n+          > param_analyzer_max_recursion_depth)\n+      {\n+        if (logger)\n+          logger->log (\"rejecting call edge: recursion limit exceeded\");\n+        return false;\n+      }\n+\n       next_state.push_call (*this, node, call, uncertainty);\n \n       if (next_state.m_valid)"}]}