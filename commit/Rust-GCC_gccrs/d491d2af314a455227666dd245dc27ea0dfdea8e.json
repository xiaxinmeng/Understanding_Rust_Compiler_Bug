{"sha": "d491d2af314a455227666dd245dc27ea0dfdea8e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ5MWQyYWYzMTRhNDU1MjI3NjY2ZGQyNDVkYzI3ZWEwZGZkZWE4ZQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-03-20T13:44:18Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-03-20T13:44:18Z"}, "message": "re PR rtl-optimization/43438 (possible wrong code bug)\n\n2010-03-20  Richard Guenther  <rguenther@suse.de>\n\n\tPR rtl-optimization/43438\n\t* combine.c (make_extraction): Properly zero-/sign-extend an\n\textraction of the low part of a CONST_INT.  Also handle\n\tCONST_DOUBLE.\n\n\t* gcc.c-torture/execute/pr43438.c: New testcase.\n\nFrom-SVN: r157592", "tree": {"sha": "4b97c99c8dd9e98f9e5f57b7f470ee45624f13c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b97c99c8dd9e98f9e5f57b7f470ee45624f13c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d491d2af314a455227666dd245dc27ea0dfdea8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d491d2af314a455227666dd245dc27ea0dfdea8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d491d2af314a455227666dd245dc27ea0dfdea8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d491d2af314a455227666dd245dc27ea0dfdea8e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "39bac0102c930a6d38486f5716793d531dc90302", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39bac0102c930a6d38486f5716793d531dc90302", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39bac0102c930a6d38486f5716793d531dc90302"}], "stats": {"total": 41, "additions": 39, "deletions": 2}, "files": [{"sha": "d753fb3aa9ca4872079fad5600708ec9a91131ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d491d2af314a455227666dd245dc27ea0dfdea8e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d491d2af314a455227666dd245dc27ea0dfdea8e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d491d2af314a455227666dd245dc27ea0dfdea8e", "patch": "@@ -1,3 +1,10 @@\n+2010-03-20  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR rtl-optimization/43438\n+\t* combine.c (make_extraction): Properly zero-/sign-extend an\n+\textraction of the low part of a CONST_INT.  Also handle\n+\tCONST_DOUBLE.\n+\n 2010-03-19  Mike Stump  <mikestump@comcast.net>\n \n \t* config/i386/darwin.h (SUBTARGET32_DEFAULT_CPU): Add."}, {"sha": "a5240c99e9705a970c7c60a5140fc6b0e71092fe", "filename": "gcc/combine.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d491d2af314a455227666dd245dc27ea0dfdea8e/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d491d2af314a455227666dd245dc27ea0dfdea8e/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=d491d2af314a455227666dd245dc27ea0dfdea8e", "patch": "@@ -6793,8 +6793,10 @@ make_extraction (enum machine_mode mode, rtx inner, HOST_WIDE_INT pos,\n       if (mode == tmode)\n \treturn new_rtx;\n \n-      if (CONST_INT_P (new_rtx))\n-\treturn gen_int_mode (INTVAL (new_rtx), mode);\n+      if (CONST_INT_P (new_rtx)\n+\t  || GET_CODE (new_rtx) == CONST_DOUBLE)\n+\treturn simplify_unary_operation (unsignedp ? ZERO_EXTEND : SIGN_EXTEND,\n+\t\t\t\t\t mode, new_rtx, tmode);\n \n       /* If we know that no extraneous bits are set, and that the high\n \t bit is not set, convert the extraction to the cheaper of"}, {"sha": "22ea531d78dad52f60ccd3e42c108e63abc24835", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d491d2af314a455227666dd245dc27ea0dfdea8e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d491d2af314a455227666dd245dc27ea0dfdea8e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d491d2af314a455227666dd245dc27ea0dfdea8e", "patch": "@@ -1,3 +1,8 @@\n+2010-03-20  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR rtl-optimization/43438\n+\t* gcc.c-torture/execute/pr43438.c: New testcase.\n+\n 2010-03-20  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/43375"}, {"sha": "aa901ce0f9046fbe4adb43a2695a602d37b17cdd", "filename": "gcc/testsuite/gcc.c-torture/execute/pr43438.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d491d2af314a455227666dd245dc27ea0dfdea8e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr43438.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d491d2af314a455227666dd245dc27ea0dfdea8e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr43438.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr43438.c?ref=d491d2af314a455227666dd245dc27ea0dfdea8e", "patch": "@@ -0,0 +1,23 @@\n+extern void abort (void);\n+\n+static unsigned char g_2 = 1;\n+static int g_9;\n+static int *l_8 = &g_9;\n+\n+static void func_12(int p_13)\n+{\n+  int * l_17 = &g_9;\n+  *l_17 &= 0 < p_13;\n+}\n+\n+int main(void)\n+{\n+  unsigned char l_11 = 254;\n+  *l_8 |= g_2;\n+  l_11 |= *l_8;\n+  func_12(l_11);\n+  if (g_9 != 1)\n+    abort ();\n+  return 0;\n+} \n+"}]}