{"sha": "ce05139c56abbf21a0c8f81150542ed213d07581", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2UwNTEzOWM1NmFiYmYyMWEwYzhmODExNTA1NDJlZDIxM2QwNzU4MQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2002-07-24T17:48:41Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-07-24T17:48:41Z"}, "message": "natFileDescriptorWin32.cc (setLength): New method.\n\n2002-07-24  Tom Tromey  <tromey@redhat.com>\n            Tony Kimball <alk@pobox.com>\n\n\t* java/io/natFileDescriptorWin32.cc (setLength): New method.\n\t* java/io/natFileDescriptorPosix.cc (setLength): New method.\n\t* java/io/RandomAccessFile.java (setLength): New method.\n\t* java/io/natFileDescriptorEcos.cc (setLength): New method.\n\t* java/io/FileDescriptor.java (setLength): New method.\n\nCo-Authored-By: Tony Kimball <alk@pobox.com>\n\nFrom-SVN: r55715", "tree": {"sha": "e662d090c42dfe798a34225b7ec886fdde1d8f2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e662d090c42dfe798a34225b7ec886fdde1d8f2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce05139c56abbf21a0c8f81150542ed213d07581", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce05139c56abbf21a0c8f81150542ed213d07581", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce05139c56abbf21a0c8f81150542ed213d07581", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce05139c56abbf21a0c8f81150542ed213d07581/comments", "author": null, "committer": null, "parents": [{"sha": "8a3ad73714d047e5c183761197ef21e565c2210e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a3ad73714d047e5c183761197ef21e565c2210e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a3ad73714d047e5c183761197ef21e565c2210e"}], "stats": {"total": 112, "additions": 109, "deletions": 3}, "files": [{"sha": "75ec4b78a0070208cf1847192aa259f44f14d6a2", "filename": "libjava/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce05139c56abbf21a0c8f81150542ed213d07581/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce05139c56abbf21a0c8f81150542ed213d07581/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=ce05139c56abbf21a0c8f81150542ed213d07581", "patch": "@@ -1,3 +1,12 @@\n+2002-07-24  Tom Tromey  <tromey@redhat.com>\n+            Tony Kimball <alk@pobox.com>\n+\n+\t* java/io/natFileDescriptorWin32.cc (setLength): New method.\n+\t* java/io/natFileDescriptorPosix.cc (setLength): New method.\n+\t* java/io/RandomAccessFile.java (setLength): New method.\n+\t* java/io/natFileDescriptorEcos.cc (setLength): New method.\n+\t* java/io/FileDescriptor.java (setLength): New method.\n+\n 2002-07-24  Mark Wielaard  <mark@klomp.org>\n \n \t* java/lang/reflect/natField.cc (setAddr): Check isAccessible()."}, {"sha": "08f8edfaa0d7cd0b14dd7d67b040efddb0351729", "filename": "libjava/java/io/FileDescriptor.java", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce05139c56abbf21a0c8f81150542ed213d07581/libjava%2Fjava%2Fio%2FFileDescriptor.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce05139c56abbf21a0c8f81150542ed213d07581/libjava%2Fjava%2Fio%2FFileDescriptor.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFileDescriptor.java?ref=ce05139c56abbf21a0c8f81150542ed213d07581", "patch": "@@ -1,6 +1,6 @@\n // FileDescriptor.java - Open file or device\n \n-/* Copyright (C) 1998, 1999, 2000, 2001  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001, 2002  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -65,6 +65,7 @@ public FileDescriptor ()\n   native void write (byte[] b, int offset, int len)\n     throws IOException, NullPointerException, IndexOutOfBoundsException;\n   native void close () throws IOException;\n+  native void setLength (long pos) throws IOException;\n   // EOF_TRUNC is true if a request to seek past the end of file\n   // should actually stop at the end of file.  If false, then a seek\n   // past the end is ok (and if a subsequent write occurs the file"}, {"sha": "81b7050f62dd2acc1bd8df6815719e8d9afba1e6", "filename": "libjava/java/io/RandomAccessFile.java", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce05139c56abbf21a0c8f81150542ed213d07581/libjava%2Fjava%2Fio%2FRandomAccessFile.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce05139c56abbf21a0c8f81150542ed213d07581/libjava%2Fjava%2Fio%2FRandomAccessFile.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FRandomAccessFile.java?ref=ce05139c56abbf21a0c8f81150542ed213d07581", "patch": "@@ -1,6 +1,6 @@\n // RandomAccessFile.java\n \n-/* Copyright (C) 1998, 1999, 2001  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2001, 2002  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -40,6 +40,11 @@ public long getFilePointer () throws IOException\n     return fd.getFilePointer();\n   }\n \n+  public void setLength (long pos) throws IOException\n+  {\n+    fd.setLength(pos);\n+  }\n+\n   public long length () throws IOException\n   {\n     return fd.length();"}, {"sha": "96744f42e44eda5676030aeb8e9a20f13e3e9dd8", "filename": "libjava/java/io/natFileDescriptorEcos.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce05139c56abbf21a0c8f81150542ed213d07581/libjava%2Fjava%2Fio%2FnatFileDescriptorEcos.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce05139c56abbf21a0c8f81150542ed213d07581/libjava%2Fjava%2Fio%2FnatFileDescriptorEcos.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FnatFileDescriptorEcos.cc?ref=ce05139c56abbf21a0c8f81150542ed213d07581", "patch": "@@ -95,6 +95,11 @@ java::io::FileDescriptor::close (void)\n {\n }\n \n+void\n+java::io::FileDescriptor::setLength (long)\n+{\n+}\n+\n jint\n java::io::FileDescriptor::seek (jlong pos, jint whence, jboolean)\n {"}, {"sha": "fb11d6262d1fca6a02ed4aef430df554c9c84826", "filename": "libjava/java/io/natFileDescriptorPosix.cc", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce05139c56abbf21a0c8f81150542ed213d07581/libjava%2Fjava%2Fio%2FnatFileDescriptorPosix.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce05139c56abbf21a0c8f81150542ed213d07581/libjava%2Fjava%2Fio%2FnatFileDescriptorPosix.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FnatFileDescriptorPosix.cc?ref=ce05139c56abbf21a0c8f81150542ed213d07581", "patch": "@@ -17,6 +17,8 @@ details.  */\n #include <string.h>\n #include <sys/stat.h>\n #include <sys/param.h>\n+#include <sys/socket.h>\n+#include <fcntl.h>\n \n #ifdef HAVE_SYS_IOCTL_H\n #define BSD_COMP /* Get FIONREAD on Solaris2. */\n@@ -189,6 +191,38 @@ java::io::FileDescriptor::close (void)\n     throw new IOException (JvNewStringLatin1 (strerror (errno)));\n }\n \n+void\n+java::io::FileDescriptor::setLength (jlong pos)\n+{\n+  struct stat sb;\n+  off_t orig;\n+\n+  if (::fstat (fd, &sb))\n+    throw new IOException (JvNewStringLatin1 (strerror (errno)));\n+\n+  if ((jlong) sb.st_size == pos) \n+    return;\n+\n+  orig = ::lseek (fd, (off_t) 0, SEEK_CUR);\n+  if (orig == -1)\n+    throw new IOException (JvNewStringLatin1 (strerror (errno)));\n+\n+  // If the file is too short, we extend it.  We can't rely on\n+  // ftruncate() extending the file.  So we lseek() to 1 byte less\n+  // than we want, and then we write a single byte at the end.\n+  if ((jlong) sb.st_size < pos)\n+    {\n+      if (::lseek (fd, (off_t) (pos - 1), SEEK_SET) == -1)\n+\tthrow new IOException (JvNewStringLatin1 (strerror (errno)));\n+      char out = '\\0';\n+      int r = ::write (fd, &out, 1);\n+      if (r <= 0 || ::lseek (fd, orig, SEEK_SET) == -1)\n+\tthrow new IOException (JvNewStringLatin1 (strerror (errno)));\n+    }\n+  else if (::ftruncate (fd, (off_t) pos))\n+    throw new IOException (JvNewStringLatin1 (strerror (errno)));\n+}\n+\n jint\n java::io::FileDescriptor::seek (jlong pos, jint whence, jboolean eof_trunc)\n {"}, {"sha": "e004057ef9140e3339f01c5a7c589139a504965e", "filename": "libjava/java/io/natFileDescriptorWin32.cc", "status": "modified", "additions": 53, "deletions": 1, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce05139c56abbf21a0c8f81150542ed213d07581/libjava%2Fjava%2Fio%2FnatFileDescriptorWin32.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce05139c56abbf21a0c8f81150542ed213d07581/libjava%2Fjava%2Fio%2FnatFileDescriptorWin32.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FnatFileDescriptorWin32.cc?ref=ce05139c56abbf21a0c8f81150542ed213d07581", "patch": "@@ -1,6 +1,6 @@\n // natFileDescriptorWin32.cc - Native part of FileDescriptor class.\n \n-/* Copyright (C) 1998, 1999, 2000, 2001  Free Software Foundation, Inc.\n+/* Copyright (C) 1998, 1999, 2000, 2001, 2002  Free Software Foundation, Inc.\n \n    This file is part of libgcj.\n \n@@ -186,6 +186,58 @@ java::io::FileDescriptor::close (void)\n     throw new IOException (JvNewStringLatin1 (winerr ()));\n }\n \n+void\n+java::io::FileDescriptor::setLength(jlong pos)\n+{\n+  LONG liOrigFilePointer;\n+  LONG liNewFilePointer;\n+  LONG liEndFilePointer;\n+\n+  // Get the original file pointer.\n+  if (SetFilePointer((HANDLE) fd, (LONG) 0, &liOrigFilePointer,\n+\t\t     FILE_CURRENT) != (BOOL) 0\n+      && (GetLastError() != NO_ERROR))\n+    throw new IOException (JvNewStringLatin1 (winerr ()));\n+\n+  // Get the length of the file.\n+  if (SetFilePointer((HANDLE) fd, (LONG) 0, &liEndFilePointer,\n+\t\t     FILE_END) != (BOOL) 0\n+      && (GetLastError() != NO_ERROR))\n+    throw new IOException (JvNewStringLatin1 (winerr ()));\n+\n+  if ((jlong)liEndFilePointer == pos)\n+    {\n+      // Restore the file pointer.\n+      if (liOrigFilePointer != liEndFilePointer)\n+\t{\n+\t  if (SetFilePointer((HANDLE) fd, liOrigFilePointer, &liNewFilePointer,\n+\t\t\t     FILE_BEGIN) != (BOOL) 0\n+\t      && (GetLastError() != NO_ERROR))\n+\t    throw new IOException (JvNewStringLatin1 (winerr ()));\n+\t}\n+      return;\n+    }\n+\n+  // Seek to the new end of file.\n+  if (SetFilePointer((HANDLE) fd, (LONG) pos, &liNewFilePointer,\n+\t\t     FILE_BEGIN) != (BOOL) 0\n+      && (GetLastError() != NO_ERROR))\n+    throw new IOException (JvNewStringLatin1 (winerr ()));\n+\n+  // Truncate the file at this point.\n+  if (SetEndOfFile((HANDLE) fd) != (BOOL) 0 && (GetLastError() != NO_ERROR))\n+    throw new IOException (JvNewStringLatin1 (winerr ()));\n+\n+  if (liOrigFilePointer < liNewFilePointer)\n+    {\n+      // Restore the file pointer.\n+      if (SetFilePointer((HANDLE) fd, liOrigFilePointer, &liNewFilePointer,\n+\t\t\t FILE_BEGIN) != (BOOL) 0\n+\t  && (GetLastError() != NO_ERROR))\n+\tthrow new IOException (JvNewStringLatin1 (winerr ()));\n+    }\n+}\n+\n jint\n java::io::FileDescriptor::seek (jlong pos, jint whence, jboolean eof_trunc)\n {"}]}