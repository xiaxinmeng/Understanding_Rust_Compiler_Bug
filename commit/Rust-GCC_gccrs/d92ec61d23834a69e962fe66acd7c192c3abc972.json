{"sha": "d92ec61d23834a69e962fe66acd7c192c3abc972", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDkyZWM2MWQyMzgzNGE2OWU5NjJmZTY2YWNkN2MxOTJjM2FiYzk3Mg==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2019-02-04T13:18:14Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2019-02-04T13:18:14Z"}, "message": "[RS6000] Emit inline PLT when -mno-tls-markers\n\nI restricted output of inline PLT sequences to when TLS marker relocs\nwere also available, which is obviously true when just considering\nassembler support.  However, there is a -mno-tls-markers option to\ndisable emitting the marker relocs.  Currently that option also\ndisables inline PLT sequences, which is a bug (*).  This patch fixes\nthat problem.\n\n*) To be honest, it was a deliberate bug.  I didn't want to have to\ndeal with inline PLT __tls_get_addr sequences lacking the marker\nrelocs in the linker, but it turns out the existing linker support for\nold-style __tls_get_addr calls works reasonably well.\n\n\t* config/rs6000/rs6000.c (rs6000_indirect_call_template_1),\n\t(rs6000_pltseq_template): Guard output of TLS markers with\n\tTARGET_TLS_MARKERS.\n\t(rs6000_longcall_ref, rs6000_call_aix, rs6000_call_sysv),\n\t(rs6000_sibcall_sysv): Ignore TARGET_TLS_MARKERS when deciding\n\tto use inline PLT sequences.\n\t* config/rs6000/rs6000.md (pltseq_tocsave_<mode>),\n\t(pltseq_plt16_ha_<mode>, pltseq_plt16_lo_<mode>),\n\t(pltseq_mtctr_<mode>): Don't test TARGET_TLS_MARKERS in predicate.\n\nFrom-SVN: r268519", "tree": {"sha": "c3e64f9daf95588a90453191b39ae41840082bea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3e64f9daf95588a90453191b39ae41840082bea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d92ec61d23834a69e962fe66acd7c192c3abc972", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d92ec61d23834a69e962fe66acd7c192c3abc972", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d92ec61d23834a69e962fe66acd7c192c3abc972", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d92ec61d23834a69e962fe66acd7c192c3abc972/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "64cd238b35cb8c96ef5be2e4775cb0e8aaa3e45f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64cd238b35cb8c96ef5be2e4775cb0e8aaa3e45f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64cd238b35cb8c96ef5be2e4775cb0e8aaa3e45f"}], "stats": {"total": 35, "additions": 20, "deletions": 15}, "files": [{"sha": "efe3f5bfe6e4ae8719a8de3266f74ff79a18fb38", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d92ec61d23834a69e962fe66acd7c192c3abc972/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d92ec61d23834a69e962fe66acd7c192c3abc972/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d92ec61d23834a69e962fe66acd7c192c3abc972", "patch": "@@ -1,3 +1,15 @@\n+2019-02-04  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_indirect_call_template_1),\n+\t(rs6000_pltseq_template): Guard output of TLS markers with\n+\tTARGET_TLS_MARKERS.\n+\t(rs6000_longcall_ref, rs6000_call_aix, rs6000_call_sysv),\n+\t(rs6000_sibcall_sysv): Ignore TARGET_TLS_MARKERS when deciding\n+\tto use inline PLT sequences.\n+\t* config/rs6000/rs6000.md (pltseq_tocsave_<mode>),\n+\t(pltseq_plt16_ha_<mode>, pltseq_plt16_lo_<mode>),\n+\t(pltseq_mtctr_<mode>): Don't test TARGET_TLS_MARKERS in predicate.\n+\n 2019-02-04  Martin Liska  <mliska@suse.cz>\n \n \tPR ipa/88985"}, {"sha": "7d417b626e801bc7eac5bfdb0a1d4b3516645963", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d92ec61d23834a69e962fe66acd7c192c3abc972/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d92ec61d23834a69e962fe66acd7c192c3abc972/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d92ec61d23834a69e962fe66acd7c192c3abc972", "patch": "@@ -21633,7 +21633,7 @@ rs6000_indirect_call_template_1 (rtx *operands, unsigned int funop,\n       const char *rel64 = TARGET_64BIT ? \"64\" : \"\";\n       char tls[29];\n       tls[0] = 0;\n-      if (GET_CODE (operands[funop + 1]) == UNSPEC)\n+      if (TARGET_TLS_MARKERS && GET_CODE (operands[funop + 1]) == UNSPEC)\n \t{\n \t  if (XINT (operands[funop + 1], 1) == UNSPEC_TLSGD)\n \t    sprintf (tls, \".reloc .,R_PPC%s_TLSGD,%%%u\\n\\t\",\n@@ -21722,7 +21722,7 @@ rs6000_pltseq_template (rtx *operands, int which)\n   const char *rel64 = TARGET_64BIT ? \"64\" : \"\";\n   char tls[28];\n   tls[0] = 0;\n-  if (GET_CODE (operands[3]) == UNSPEC)\n+  if (TARGET_TLS_MARKERS && GET_CODE (operands[3]) == UNSPEC)\n     {\n       if (XINT (operands[3], 1) == UNSPEC_TLSGD)\n \tsprintf (tls, \".reloc .,R_PPC%s_TLSGD,%%3\\n\\t\",\n@@ -32782,7 +32782,6 @@ rs6000_longcall_ref (rtx call_ref, rtx arg)\n     }\n \n   if (HAVE_AS_PLTSEQ\n-      && TARGET_TLS_MARKERS\n       && (DEFAULT_ABI == ABI_ELFv2 || DEFAULT_ABI == ABI_V4))\n     {\n       rtx base = const0_rtx;\n@@ -37781,7 +37780,6 @@ rs6000_call_aix (rtx value, rtx func_desc, rtx tlsarg, rtx cookie)\n \t\t\t\t\t\t\t   stack_toc_offset));\n \t  MEM_VOLATILE_P (stack_toc_mem) = 1;\n \t  if (HAVE_AS_PLTSEQ\n-\t      && TARGET_TLS_MARKERS\n \t      && DEFAULT_ABI == ABI_ELFv2\n \t      && GET_CODE (func_desc) == SYMBOL_REF)\n \t    {\n@@ -37806,7 +37804,6 @@ rs6000_call_aix (rtx value, rtx func_desc, rtx tlsarg, rtx cookie)\n \t     this insn for linker plt sequence editing too.  */\n \t  func_addr = gen_rtx_REG (Pmode, CTR_REGNO);\n \t  if (HAVE_AS_PLTSEQ\n-\t      && TARGET_TLS_MARKERS\n \t      && GET_CODE (func_desc) == SYMBOL_REF)\n \t    {\n \t      rtvec v = gen_rtvec (3, abi_reg, func_desc, tlsarg);\n@@ -37947,8 +37944,7 @@ rs6000_call_sysv (rtx value, rtx func_desc, rtx tlsarg, rtx cookie)\n       func = rs6000_longcall_ref (func_desc, tlsarg);\n       /* If the longcall was implemented using PLT16 relocs, then r11\n \t needs to be valid at the call for lazy linking.  */\n-      if (HAVE_AS_PLTSEQ\n-\t  && TARGET_TLS_MARKERS)\n+      if (HAVE_AS_PLTSEQ)\n \tabi_reg = func;\n     }\n \n@@ -37962,7 +37958,6 @@ rs6000_call_sysv (rtx value, rtx func_desc, rtx tlsarg, rtx cookie)\n \t this insn for linker plt sequence editing too.  */\n       func_addr = gen_rtx_REG (Pmode, CTR_REGNO);\n       if (HAVE_AS_PLTSEQ\n-\t  && TARGET_TLS_MARKERS\n \t  && GET_CODE (func_desc) == SYMBOL_REF)\n \t{\n \t  rtvec v = gen_rtvec (3, func, func_desc, tlsarg);\n@@ -38019,8 +38014,7 @@ rs6000_sibcall_sysv (rtx value, rtx func_desc, rtx tlsarg, rtx cookie)\n       func = rs6000_longcall_ref (func_desc, tlsarg);\n       /* If the longcall was implemented using PLT16 relocs, then r11\n \t needs to be valid at the call for lazy linking.  */\n-      if (HAVE_AS_PLTSEQ\n-\t  && TARGET_TLS_MARKERS)\n+      if (HAVE_AS_PLTSEQ)\n \tabi_reg = func;\n     }\n \n@@ -38033,7 +38027,6 @@ rs6000_sibcall_sysv (rtx value, rtx func_desc, rtx tlsarg, rtx cookie)\n \t this insn for linker plt sequence editing too.  */\n       func_addr = gen_rtx_REG (Pmode, CTR_REGNO);\n       if (HAVE_AS_PLTSEQ\n-\t  && TARGET_TLS_MARKERS\n \t  && GET_CODE (func_desc) == SYMBOL_REF)\n \t{\n \t  rtvec v = gen_rtvec (3, func, func_desc, tlsarg);"}, {"sha": "70a4900b067d43b3a2cf86b15ce51f8f7e13bf23", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d92ec61d23834a69e962fe66acd7c192c3abc972/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d92ec61d23834a69e962fe66acd7c192c3abc972/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=d92ec61d23834a69e962fe66acd7c192c3abc972", "patch": "@@ -10179,7 +10179,7 @@\n \t\t   (match_operand:P 2 \"symbol_ref_operand\" \"s\")\n \t\t   (match_operand:P 3 \"\" \"\")]\n \t\t  UNSPEC_PLTSEQ))]\n-  \"HAVE_AS_PLTSEQ && TARGET_TLS_MARKERS\n+  \"HAVE_AS_PLTSEQ\n    && DEFAULT_ABI == ABI_ELFv2\"\n {\n   return rs6000_pltseq_template (operands, 0);\n@@ -10191,7 +10191,7 @@\n \t\t   (match_operand:P 2 \"symbol_ref_operand\" \"s\")\n \t\t   (match_operand:P 3 \"\" \"\")]\n \t\t  UNSPEC_PLT16_HA))]\n-  \"HAVE_AS_PLTSEQ && TARGET_TLS_MARKERS\n+  \"HAVE_AS_PLTSEQ\n    && (DEFAULT_ABI == ABI_ELFv2 || DEFAULT_ABI == ABI_V4)\"\n {\n   return rs6000_pltseq_template (operands, 1);\n@@ -10203,7 +10203,7 @@\n \t\t   (match_operand:P 2 \"symbol_ref_operand\" \"s\")\n \t\t   (match_operand:P 3 \"\" \"\")]\n \t\t  UNSPEC_PLT16_LO))]\n-  \"HAVE_AS_PLTSEQ && TARGET_TLS_MARKERS\n+  \"HAVE_AS_PLTSEQ\n    && (DEFAULT_ABI == ABI_ELFv2 || DEFAULT_ABI == ABI_V4)\"\n {\n   return rs6000_pltseq_template (operands, 2);\n@@ -10216,7 +10216,7 @@\n \t\t   (match_operand:P 2 \"symbol_ref_operand\" \"s\")\n \t\t   (match_operand:P 3 \"\" \"\")]\n \t\t  UNSPEC_PLTSEQ))]\n-  \"HAVE_AS_PLTSEQ && TARGET_TLS_MARKERS\n+  \"HAVE_AS_PLTSEQ\n    && (DEFAULT_ABI == ABI_ELFv2 || DEFAULT_ABI == ABI_V4)\"\n {\n   return rs6000_pltseq_template (operands, 3);"}]}