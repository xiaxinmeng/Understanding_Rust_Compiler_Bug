{"sha": "5ab2422adf894bdf84deed8c7c0557c16d6dca2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFiMjQyMmFkZjg5NGJkZjg0ZGVlZDhjN2MwNTU3YzE2ZDZkY2EyYg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-07-25T16:07:29Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-07-25T16:07:29Z"}, "message": "cif-code.def (NEVER_CALL): New code.\n\n\t* cif-code.def (NEVER_CALL): New code.\n\t* ipa-inline.c (want_inline_small_function_p): Fix formatting issues.\n\tSet the failure to CIF_NEVER_CALL if the IPA count is zero.\n\nFrom-SVN: r273804", "tree": {"sha": "0b3f29e17af61b133ca4870bda6e49e4fd6a75dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b3f29e17af61b133ca4870bda6e49e4fd6a75dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ab2422adf894bdf84deed8c7c0557c16d6dca2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ab2422adf894bdf84deed8c7c0557c16d6dca2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ab2422adf894bdf84deed8c7c0557c16d6dca2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ab2422adf894bdf84deed8c7c0557c16d6dca2b/comments", "author": null, "committer": null, "parents": [{"sha": "75088696935c7e179699cb448e0a2cee74c8494f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75088696935c7e179699cb448e0a2cee74c8494f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75088696935c7e179699cb448e0a2cee74c8494f"}], "stats": {"total": 27, "additions": 20, "deletions": 7}, "files": [{"sha": "4196db249dae824b9c2a6efdb47d1d5e9643724e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab2422adf894bdf84deed8c7c0557c16d6dca2b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab2422adf894bdf84deed8c7c0557c16d6dca2b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5ab2422adf894bdf84deed8c7c0557c16d6dca2b", "patch": "@@ -1,3 +1,9 @@\n+2019-07-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* cif-code.def (NEVER_CALL): New code.\n+\t* ipa-inline.c (want_inline_small_function_p): Fix formatting issues.\n+\tSet the failure to CIF_NEVER_CALL if the IPA count is zero.\n+\n 2019-07-25  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* config/arm/thumb2.md (thumb2_movsi_insn): Fix load/store low reg."}, {"sha": "ccd08e296caf1b47b5f65e3c95b29339704d528f", "filename": "gcc/cif-code.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab2422adf894bdf84deed8c7c0557c16d6dca2b/gcc%2Fcif-code.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab2422adf894bdf84deed8c7c0557c16d6dca2b/gcc%2Fcif-code.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcif-code.def?ref=5ab2422adf894bdf84deed8c7c0557c16d6dca2b", "patch": "@@ -83,6 +83,10 @@ DEFCIFCODE(RECURSIVE_INLINING, CIF_FINAL_NORMAL,\n DEFCIFCODE(UNLIKELY_CALL, CIF_FINAL_NORMAL,\n \t   N_(\"call is unlikely and code size would grow\"))\n \n+/* Call is considered never executed.  */\n+DEFCIFCODE(NEVER_CALL, CIF_FINAL_NORMAL,\n+\t   N_(\"call is considered never executed and code size would grow\"))\n+\n /* Function is not declared as inline.  */\n DEFCIFCODE(NOT_DECLARED_INLINED, CIF_FINAL_NORMAL,\n \t   N_(\"function not declared inline and code size would grow\"))"}, {"sha": "0ed965ae82ff507c582720fe9740ad74b68a8182", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab2422adf894bdf84deed8c7c0557c16d6dca2b/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab2422adf894bdf84deed8c7c0557c16d6dca2b/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=5ab2422adf894bdf84deed8c7c0557c16d6dca2b", "patch": "@@ -810,20 +810,20 @@ want_inline_small_function_p (struct cgraph_edge *e, bool report)\n \t\t\t\t  | INLINE_HINT_loop_stride))\n \t\t       && !(big_speedup = big_speedup_p (e)))))\n \t{\n-          e->inline_failed = CIF_MAX_INLINE_INSNS_SINGLE_LIMIT;\n+\t  e->inline_failed = CIF_MAX_INLINE_INSNS_SINGLE_LIMIT;\n \t  want_inline = false;\n \t}\n       else if (!DECL_DECLARED_INLINE_P (callee->decl)\n \t       && !opt_for_fn (e->caller->decl, flag_inline_functions)\n \t       && growth >= PARAM_VALUE (PARAM_MAX_INLINE_INSNS_SMALL))\n \t{\n \t  /* growth_likely_positive is expensive, always test it last.  */\n-          if (growth >= MAX_INLINE_INSNS_SINGLE\n+\t  if (growth >= MAX_INLINE_INSNS_SINGLE\n \t      || growth_likely_positive (callee, growth))\n \t    {\n-              e->inline_failed = CIF_NOT_DECLARED_INLINED;\n+\t      e->inline_failed = CIF_NOT_DECLARED_INLINED;\n \t      want_inline = false;\n- \t    }\n+\t    }\n \t}\n       /* Apply MAX_INLINE_INSNS_AUTO limit for functions not declared inline\n \t Upgrade it to MAX_INLINE_INSNS_SINGLE when hints suggests that\n@@ -839,19 +839,22 @@ want_inline_small_function_p (struct cgraph_edge *e, bool report)\n \t       && !(big_speedup == -1 ? big_speedup_p (e) : big_speedup))\n \t{\n \t  /* growth_likely_positive is expensive, always test it last.  */\n-          if (growth >= MAX_INLINE_INSNS_SINGLE\n+\t  if (growth >= MAX_INLINE_INSNS_SINGLE\n \t      || growth_likely_positive (callee, growth))\n \t    {\n \t      e->inline_failed = CIF_MAX_INLINE_INSNS_AUTO_LIMIT;\n \t      want_inline = false;\n- \t    }\n+\t    }\n \t}\n       /* If call is cold, do not inline when function body would grow. */\n       else if (!e->maybe_hot_p ()\n \t       && (growth >= MAX_INLINE_INSNS_SINGLE\n \t\t   || growth_likely_positive (callee, growth)))\n \t{\n-          e->inline_failed = CIF_UNLIKELY_CALL;\n+\t  if (e->count.ipa () == profile_count::zero ())\n+\t    e->inline_failed = CIF_NEVER_CALL;\n+\t  else\n+\t    e->inline_failed = CIF_UNLIKELY_CALL;\n \t  want_inline = false;\n \t}\n     }"}]}