{"sha": "1d9cd701ec31686dbd037e0fe264c8738d993e41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ5Y2Q3MDFlYzMxNjg2ZGJkMDM3ZTBmZTI2NGM4NzM4ZDk5M2U0MQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-08-29T09:20:54Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-08-29T09:20:54Z"}, "message": "re PR tree-optimization/91351 (-fstrict-enums generates incorrect code)\n\n\tPR tree-optimization/91351\n\t* tree-cfg.c (generate_range_test): Use range_check_type instead of\n\tunsigned_type_for.\n\t* tree-cfgcleanup.c (convert_single_case_switch): Punt if\n\trange_check_type returns NULL.\n\t* tree-switch-conversion.c (switch_conversion::build_one_array):\n\tUse range_check_type instead of unsigned_type_for, don't perform\n\tlinear opt if it returns NULL.\n\t(bit_test_cluster::find_bit_tests): Formatting fix.\n\t(bit_test_cluster::emit): Use range_check_type instead of\n\tunsigned_type_for.\n\t(switch_decision_tree::try_switch_expansion): Punt if range_check_type\n\treturns NULL.\n\n\t* g++.dg/opt/pr91351.C: New test.\n\nFrom-SVN: r275026", "tree": {"sha": "c21d3fa2978d3c7b2e588a5c894f40a108b0f09d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c21d3fa2978d3c7b2e588a5c894f40a108b0f09d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d9cd701ec31686dbd037e0fe264c8738d993e41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d9cd701ec31686dbd037e0fe264c8738d993e41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d9cd701ec31686dbd037e0fe264c8738d993e41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d9cd701ec31686dbd037e0fe264c8738d993e41/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c3bad34748071038343f8b88a30128faee7c5c0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3bad34748071038343f8b88a30128faee7c5c0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3bad34748071038343f8b88a30128faee7c5c0c"}], "stats": {"total": 85, "additions": 74, "deletions": 11}, "files": [{"sha": "6342c4ac2f3dc4763165772b8fe12aaab5bac627", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d9cd701ec31686dbd037e0fe264c8738d993e41/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d9cd701ec31686dbd037e0fe264c8738d993e41/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1d9cd701ec31686dbd037e0fe264c8738d993e41", "patch": "@@ -1,3 +1,19 @@\n+2019-08-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/91351\n+\t* tree-cfg.c (generate_range_test): Use range_check_type instead of\n+\tunsigned_type_for.\n+\t* tree-cfgcleanup.c (convert_single_case_switch): Punt if\n+\trange_check_type returns NULL.\n+\t* tree-switch-conversion.c (switch_conversion::build_one_array):\n+\tUse range_check_type instead of unsigned_type_for, don't perform\n+\tlinear opt if it returns NULL.\n+\t(bit_test_cluster::find_bit_tests): Formatting fix.\n+\t(bit_test_cluster::emit): Use range_check_type instead of\n+\tunsigned_type_for.\n+\t(switch_decision_tree::try_switch_expansion): Punt if range_check_type\n+\treturns NULL.\n+\n 2019-08-29  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/91568"}, {"sha": "652759a5ac11fe94f1fb20c7e64cc6059722ddcf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d9cd701ec31686dbd037e0fe264c8738d993e41/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d9cd701ec31686dbd037e0fe264c8738d993e41/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1d9cd701ec31686dbd037e0fe264c8738d993e41", "patch": "@@ -1,3 +1,8 @@\n+2019-08-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/91351\n+\t* g++.dg/opt/pr91351.C: New test.\n+\n 2019-08-29  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* g++.dg/spellcheck-typenames.C: Adjust expected locations."}, {"sha": "f793a2f1b1177eb8caccbdbd2ab5fafd00fff26a", "filename": "gcc/testsuite/g++.dg/opt/pr91351.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d9cd701ec31686dbd037e0fe264c8738d993e41/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr91351.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d9cd701ec31686dbd037e0fe264c8738d993e41/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr91351.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr91351.C?ref=1d9cd701ec31686dbd037e0fe264c8738d993e41", "patch": "@@ -0,0 +1,38 @@\n+// PR tree-optimization/91351\n+// { dg-do run }\n+// { dg-options \"-O2 -fstrict-enums\" }\n+\n+enum E { e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12,\n+\t e13, e14, e15, e16, e17, e18, e19, e20, e21, e22, e23, e24, e25 };\n+\n+__attribute__((noipa)) void\n+foo ()\n+{\n+  __builtin_abort ();\n+}\n+\n+__attribute__((noipa)) void\n+bar ()\n+{\n+}\n+\n+__attribute__((noipa)) void\n+baz (E e)\n+{\n+  switch (e)\n+    {\n+    case e11:\n+    case e12:\n+    case e13: foo (); break;\n+    case e24: break;\n+    case e14:\n+    case e15: break;\n+    default: bar (); break;\n+    }\n+}\n+\n+int\n+main ()\n+{\n+  baz (e3);\n+}"}, {"sha": "b75fdb2e63fcd14a2196ec0ba739c5866b8cedba", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d9cd701ec31686dbd037e0fe264c8738d993e41/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d9cd701ec31686dbd037e0fe264c8738d993e41/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=1d9cd701ec31686dbd037e0fe264c8738d993e41", "patch": "@@ -9221,7 +9221,7 @@ generate_range_test (basic_block bb, tree index, tree low, tree high,\n \t\t     tree *lhs, tree *rhs)\n {\n   tree type = TREE_TYPE (index);\n-  tree utype = unsigned_type_for (type);\n+  tree utype = range_check_type (type);\n \n   low = fold_convert (utype, low);\n   high = fold_convert (utype, high);"}, {"sha": "4bac38ab00c742441d11aa9dd7839cb3ec2451da", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d9cd701ec31686dbd037e0fe264c8738d993e41/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d9cd701ec31686dbd037e0fe264c8738d993e41/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=1d9cd701ec31686dbd037e0fe264c8738d993e41", "patch": "@@ -101,6 +101,8 @@ convert_single_case_switch (gswitch *swtch, gimple_stmt_iterator &gsi)\n   if (high)\n     {\n       tree lhs, rhs;\n+      if (range_check_type (TREE_TYPE (index)) == NULL_TREE)\n+\treturn false;\n       generate_range_test (bb, index, low, high, &lhs, &rhs);\n       cond = gimple_build_cond (LE_EXPR, lhs, rhs, NULL_TREE, NULL_TREE);\n     }"}, {"sha": "e8692a7fffe6d096dcdba10a16c7b258c88bf140", "filename": "gcc/tree-switch-conversion.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d9cd701ec31686dbd037e0fe264c8738d993e41/gcc%2Ftree-switch-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d9cd701ec31686dbd037e0fe264c8738d993e41/gcc%2Ftree-switch-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.c?ref=1d9cd701ec31686dbd037e0fe264c8738d993e41", "patch": "@@ -605,21 +605,22 @@ switch_conversion::build_one_array (int num, tree arr_index_type,\n   vec<constructor_elt, va_gc> *constructor = m_constructors[num];\n   wide_int coeff_a, coeff_b;\n   bool linear_p = contains_linear_function_p (constructor, &coeff_a, &coeff_b);\n-  if (linear_p)\n+  tree type;\n+  if (linear_p\n+      && (type = range_check_type (TREE_TYPE ((*constructor)[0].value))))\n     {\n       if (dump_file && coeff_a.to_uhwi () > 0)\n \tfprintf (dump_file, \"Linear transformation with A = %\" PRId64\n \t\t \" and B = %\" PRId64 \"\\n\", coeff_a.to_shwi (),\n \t\t coeff_b.to_shwi ());\n \n       /* We must use type of constructor values.  */\n-      tree t = unsigned_type_for (TREE_TYPE ((*constructor)[0].value));\n       gimple_seq seq = NULL;\n-      tree tmp = gimple_convert (&seq, t, m_index_expr);\n-      tree tmp2 = gimple_build (&seq, MULT_EXPR, t,\n-\t\t\t\twide_int_to_tree (t, coeff_a), tmp);\n-      tree tmp3 = gimple_build (&seq, PLUS_EXPR, t, tmp2,\n-\t\t\t\twide_int_to_tree (t, coeff_b));\n+      tree tmp = gimple_convert (&seq, type, m_index_expr);\n+      tree tmp2 = gimple_build (&seq, MULT_EXPR, type,\n+\t\t\t\twide_int_to_tree (type, coeff_a), tmp);\n+      tree tmp3 = gimple_build (&seq, PLUS_EXPR, type, tmp2,\n+\t\t\t\twide_int_to_tree (type, coeff_b));\n       tree tmp4 = gimple_convert (&seq, TREE_TYPE (name), tmp3);\n       gsi_insert_seq_before (&gsi, seq, GSI_SAME_STMT);\n       load = gimple_build_assign (name, tmp4);\n@@ -1351,7 +1352,7 @@ bit_test_cluster::find_bit_tests (vec<cluster *> &clusters)\n \t\t\t\t\t\t  entire));\n \t}\n       else\n-\tfor (int i = end - 1; i >=  start; i--)\n+\tfor (int i = end - 1; i >= start; i--)\n \t  output.safe_push (clusters[i]);\n \n       end = start;\n@@ -1484,7 +1485,7 @@ bit_test_cluster::emit (tree index_expr, tree index_type,\n   unsigned int i, j, k;\n   unsigned int count;\n \n-  tree unsigned_index_type = unsigned_type_for (index_type);\n+  tree unsigned_index_type = range_check_type (index_type);\n \n   gimple_stmt_iterator gsi;\n   gassign *shift_stmt;\n@@ -1794,7 +1795,8 @@ switch_decision_tree::try_switch_expansion (vec<cluster *> &clusters)\n   tree index_type = TREE_TYPE (index_expr);\n   basic_block bb = gimple_bb (m_switch);\n \n-  if (gimple_switch_num_labels (m_switch) == 1)\n+  if (gimple_switch_num_labels (m_switch) == 1\n+      || range_check_type (index_type) == NULL_TREE)\n     return false;\n \n   /* Find the default case target label.  */"}]}