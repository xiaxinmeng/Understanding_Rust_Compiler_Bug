{"sha": "3dcaad8b2d3698f4dc94e58176abd95fed4ddbf3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RjYWFkOGIyZDM2OThmNGRjOTRlNTgxNzZhYmQ5NWZlZDRkZGJmMw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-04-22T17:37:02Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-04-22T17:37:02Z"}, "message": "gxx.gperf (RETURN): Rename to RETURN_KEYWORD to avoid clashes with the RTL code RETURN.\n\n\t* gxx.gperf (RETURN): Rename to RETURN_KEYWORD to avoid clashes\n\twith the RTL code RETURN.\n\t* hash.h: Regenerated.\n\t* lex.c (reinit_parse_for_block): Use RETURN_KEYWORD.\n\t* parse.y: Replace RETURN with RETURN_KEYWORD throughout.\n\t* parse.c: Regenerated.\n\t* pt.c: Include varray.h.  Include rtl.h since varray.h requires\n\tit.\n\t(inline_parm_levels): New variable.\n\t(inline_parm_levels_used): Likewise.\n\t(maybe_begin_member_template_processing): Update them.\n\t(maybe_end_member_template_processing): Use them, rather than\n\tguessing how many levels to pop.\n\nFrom-SVN: r26587", "tree": {"sha": "e6e6611519677423e478e27c4d8172bb05fefd2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6e6611519677423e478e27c4d8172bb05fefd2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3dcaad8b2d3698f4dc94e58176abd95fed4ddbf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dcaad8b2d3698f4dc94e58176abd95fed4ddbf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dcaad8b2d3698f4dc94e58176abd95fed4ddbf3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dcaad8b2d3698f4dc94e58176abd95fed4ddbf3/comments", "author": null, "committer": null, "parents": [{"sha": "ad810b22b8476715dbd544924f92fb9ee2f60d52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad810b22b8476715dbd544924f92fb9ee2f60d52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad810b22b8476715dbd544924f92fb9ee2f60d52"}], "stats": {"total": 156, "additions": 103, "deletions": 53}, "files": [{"sha": "d8ca82308afdd1994e5ee3a4a3f07c8130409e01", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcaad8b2d3698f4dc94e58176abd95fed4ddbf3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcaad8b2d3698f4dc94e58176abd95fed4ddbf3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3dcaad8b2d3698f4dc94e58176abd95fed4ddbf3", "patch": "@@ -1,5 +1,19 @@\n 1999-04-22  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* gxx.gperf (RETURN): Rename to RETURN_KEYWORD to avoid clashes\n+\twith the RTL code RETURN.\n+\t* hash.h: Regenerated.\n+\t* lex.c (reinit_parse_for_block): Use RETURN_KEYWORD.\n+\t* parse.y: Replace RETURN with RETURN_KEYWORD throughout.\n+\t* parse.c: Regenerated.\n+\t* pt.c: Include varray.h.  Include rtl.h since varray.h requires\n+\tit.\n+\t(inline_parm_levels): New variable.\n+\t(inline_parm_levels_used): Likewise.\n+\t(maybe_begin_member_template_processing): Update them.\n+\t(maybe_end_member_template_processing): Use them, rather than\n+\tguessing how many levels to pop.\n+\t\n \t* decl.c (make_typename_type): Tighten error-checking.\n \n 1999-04-20  Mark Mitchell  <mark@codesourcery.com>"}, {"sha": "1e621c4a22d60ce060d61bbd9198083fddaf712d", "filename": "gcc/cp/gxx.gperf", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcaad8b2d3698f4dc94e58176abd95fed4ddbf3/gcc%2Fcp%2Fgxx.gperf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcaad8b2d3698f4dc94e58176abd95fed4ddbf3/gcc%2Fcp%2Fgxx.gperf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fgxx.gperf?ref=3dcaad8b2d3698f4dc94e58176abd95fed4ddbf3", "patch": "@@ -81,7 +81,7 @@ protected, VISSPEC, RID_PROTECTED,\n public, VISSPEC, RID_PUBLIC,\n register, SCSPEC, RID_REGISTER,\n reinterpret_cast, REINTERPRET_CAST, NORID,\n-return, RETURN, NORID,\n+return, RETURN_KEYWORD, NORID,\n short, TYPESPEC, RID_SHORT,\n signature, AGGR, RID_SIGNATURE\t/* Extension */,\n signed, TYPESPEC, RID_SIGNED,"}, {"sha": "3c6199630c1eebd8b4da13dd276a370d813419e2", "filename": "gcc/cp/hash.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcaad8b2d3698f4dc94e58176abd95fed4ddbf3/gcc%2Fcp%2Fhash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcaad8b2d3698f4dc94e58176abd95fed4ddbf3/gcc%2Fcp%2Fhash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fhash.h?ref=3dcaad8b2d3698f4dc94e58176abd95fed4ddbf3", "patch": "@@ -1,5 +1,5 @@\n /* C code produced by gperf version 2.7.1 (19981006 egcs) */\n-/* Command-line: gperf -L C -F , 0, 0 -p -j1 -g -o -t -N is_reserved_word -k1,4,7,$ ./gxx.gperf  */\n+/* Command-line: gperf -L C -F , 0, 0 -p -j1 -g -o -t -N is_reserved_word -k1,4,7,$ ../../../gcc/cp/gxx.gperf  */\n /* Command-line: gperf -L KR-C -F ', 0, 0' -p -j1 -g -o -t -N is_reserved_word -k1,4,$,7 gplus.gperf  */\n struct resword { const char *name; short token; enum rid rid;};\n \n@@ -191,7 +191,7 @@ is_reserved_word (str, len)\n       {\"reinterpret_cast\", REINTERPRET_CAST, NORID,},\n       {\"mutable\", SCSPEC, RID_MUTABLE,},\n       {\"__alignof\", ALIGNOF, NORID},\n-      {\"return\", RETURN, NORID,},\n+      {\"return\", RETURN_KEYWORD, NORID,},\n       {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n       {\"\", 0, 0},\n       {\"float\", TYPESPEC, RID_FLOAT,},"}, {"sha": "a9bb9cf403066323c8b1b9f1ed8f850d94cfb5f6", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcaad8b2d3698f4dc94e58176abd95fed4ddbf3/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcaad8b2d3698f4dc94e58176abd95fed4ddbf3/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=3dcaad8b2d3698f4dc94e58176abd95fed4ddbf3", "patch": "@@ -1496,7 +1496,7 @@ reinit_parse_for_block (pyychar, obstackp)\n       look_for_lbrac = 1;\n       blev = 0;\n     }\n-  else if (pyychar == RETURN)\n+  else if (pyychar == RETURN_KEYWORD)\n     {\n       obstack_grow (obstackp, \"return\", 6);\n       look_for_lbrac = 1;"}, {"sha": "fff2dd4fe09b5ea50b5638c729897d5931087e3c", "filename": "gcc/cp/parse.c", "status": "modified", "additions": 31, "deletions": 30, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcaad8b2d3698f4dc94e58176abd95fed4ddbf3/gcc%2Fcp%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcaad8b2d3698f4dc94e58176abd95fed4ddbf3/gcc%2Fcp%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.c?ref=3dcaad8b2d3698f4dc94e58176abd95fed4ddbf3", "patch": "@@ -27,7 +27,7 @@\n #define\tDEFAULT\t277\n #define\tBREAK\t278\n #define\tCONTINUE\t279\n-#define\tRETURN\t280\n+#define\tRETURN_KEYWORD\t280\n #define\tGOTO\t281\n #define\tASM_KEYWORD\t282\n #define\tTYPEOF\t283\n@@ -742,35 +742,36 @@ static const short yyrline[] = { 0,\n static const char * const yytname[] = {   \"$\",\"error\",\"$undefined.\",\"IDENTIFIER\",\n \"TYPENAME\",\"SELFNAME\",\"PFUNCNAME\",\"SCSPEC\",\"TYPESPEC\",\"CV_QUALIFIER\",\"CONSTANT\",\n \"STRING\",\"ELLIPSIS\",\"SIZEOF\",\"ENUM\",\"IF\",\"ELSE\",\"WHILE\",\"DO\",\"FOR\",\"SWITCH\",\n-\"CASE\",\"DEFAULT\",\"BREAK\",\"CONTINUE\",\"RETURN\",\"GOTO\",\"ASM_KEYWORD\",\"TYPEOF\",\"ALIGNOF\",\n-\"SIGOF\",\"ATTRIBUTE\",\"EXTENSION\",\"LABEL\",\"REALPART\",\"IMAGPART\",\"AGGR\",\"VISSPEC\",\n-\"DELETE\",\"NEW\",\"THIS\",\"OPERATOR\",\"CXX_TRUE\",\"CXX_FALSE\",\"NAMESPACE\",\"TYPENAME_KEYWORD\",\n-\"USING\",\"LEFT_RIGHT\",\"TEMPLATE\",\"TYPEID\",\"DYNAMIC_CAST\",\"STATIC_CAST\",\"REINTERPRET_CAST\",\n-\"CONST_CAST\",\"SCOPE\",\"EMPTY\",\"PTYPENAME\",\"NSNAME\",\"'{'\",\"','\",\"';'\",\"THROW\",\n-\"':'\",\"ASSIGN\",\"'='\",\"'?'\",\"OROR\",\"ANDAND\",\"'|'\",\"'^'\",\"'&'\",\"MIN_MAX\",\"EQCOMPARE\",\n-\"ARITHCOMPARE\",\"'<'\",\"'>'\",\"LSHIFT\",\"RSHIFT\",\"'+'\",\"'-'\",\"'*'\",\"'/'\",\"'%'\",\"POINTSAT_STAR\",\n-\"DOT_STAR\",\"UNARY\",\"PLUSPLUS\",\"MINUSMINUS\",\"'~'\",\"HYPERUNARY\",\"PAREN_STAR_PAREN\",\n-\"POINTSAT\",\"'.'\",\"'('\",\"'['\",\"TRY\",\"CATCH\",\"PRE_PARSED_FUNCTION_DECL\",\"EXTERN_LANG_STRING\",\n-\"ALL\",\"PRE_PARSED_CLASS_DECL\",\"DEFARG\",\"DEFARG_MARKER\",\"TYPENAME_DEFN\",\"IDENTIFIER_DEFN\",\n-\"PTYPENAME_DEFN\",\"END_OF_LINE\",\"END_OF_SAVED_INPUT\",\"')'\",\"'}'\",\"'!'\",\"']'\",\n-\"program\",\"extdefs\",\"@1\",\"extdefs_opt\",\".hush_warning\",\".warning_ok\",\"extension\",\n-\"asm_keyword\",\"lang_extdef\",\"@2\",\"extdef\",\"@3\",\"@4\",\"namespace_alias\",\"@5\",\"using_decl\",\n-\"namespace_using_decl\",\"using_directive\",\"@6\",\"namespace_qualifier\",\"any_id\",\n-\"extern_lang_string\",\"template_header\",\"@7\",\"template_parm_list\",\"maybe_identifier\",\n-\"template_type_parm\",\"template_template_parm\",\"template_parm\",\"template_def\",\n-\"template_extdef\",\"template_datadef\",\"datadef\",\"ctor_initializer_opt\",\"maybe_return_init\",\n-\"eat_saved_input\",\"fndef\",\"constructor_declarator\",\"@8\",\"@9\",\"@10\",\"@11\",\"fn.def1\",\n-\"component_constructor_declarator\",\"fn.def2\",\"return_id\",\"return_init\",\"base_init\",\n-\".set_base_init\",\"member_init_list\",\"member_init\",\"identifier\",\"notype_identifier\",\n-\"identifier_defn\",\"explicit_instantiation\",\"@12\",\"@13\",\"@14\",\"@15\",\"@16\",\"@17\",\n-\"@18\",\"@19\",\"begin_explicit_instantiation\",\"end_explicit_instantiation\",\"template_type\",\n-\"apparent_template_type\",\"self_template_type\",\".finish_template_type\",\"template_close_bracket\",\n-\"template_arg_list_opt\",\"template_arg_list\",\"template_arg\",\"unop\",\"expr\",\"paren_expr_or_null\",\n-\"paren_cond_or_null\",\"xcond\",\"condition\",\"@20\",\"compstmtend\",\"already_scoped_stmt\",\n-\"@21\",\"nontrivial_exprlist\",\"nonnull_exprlist\",\"unary_expr\",\".finish_new_placement\",\n-\".begin_new_placement\",\"new_placement\",\"new_initializer\",\"regcast_or_absdcl\",\n-\"cast_expr\",\"expr_no_commas\",\"notype_unqualified_id\",\"do_id\",\"template_id\",\"object_template_id\",\n-\"unqualified_id\",\"expr_or_declarator_intern\",\"expr_or_declarator\",\"notype_template_declarator\",\n+\"CASE\",\"DEFAULT\",\"BREAK\",\"CONTINUE\",\"RETURN_KEYWORD\",\"GOTO\",\"ASM_KEYWORD\",\"TYPEOF\",\n+\"ALIGNOF\",\"SIGOF\",\"ATTRIBUTE\",\"EXTENSION\",\"LABEL\",\"REALPART\",\"IMAGPART\",\"AGGR\",\n+\"VISSPEC\",\"DELETE\",\"NEW\",\"THIS\",\"OPERATOR\",\"CXX_TRUE\",\"CXX_FALSE\",\"NAMESPACE\",\n+\"TYPENAME_KEYWORD\",\"USING\",\"LEFT_RIGHT\",\"TEMPLATE\",\"TYPEID\",\"DYNAMIC_CAST\",\"STATIC_CAST\",\n+\"REINTERPRET_CAST\",\"CONST_CAST\",\"SCOPE\",\"EMPTY\",\"PTYPENAME\",\"NSNAME\",\"'{'\",\"','\",\n+\"';'\",\"THROW\",\"':'\",\"ASSIGN\",\"'='\",\"'?'\",\"OROR\",\"ANDAND\",\"'|'\",\"'^'\",\"'&'\",\"MIN_MAX\",\n+\"EQCOMPARE\",\"ARITHCOMPARE\",\"'<'\",\"'>'\",\"LSHIFT\",\"RSHIFT\",\"'+'\",\"'-'\",\"'*'\",\"'/'\",\n+\"'%'\",\"POINTSAT_STAR\",\"DOT_STAR\",\"UNARY\",\"PLUSPLUS\",\"MINUSMINUS\",\"'~'\",\"HYPERUNARY\",\n+\"PAREN_STAR_PAREN\",\"POINTSAT\",\"'.'\",\"'('\",\"'['\",\"TRY\",\"CATCH\",\"PRE_PARSED_FUNCTION_DECL\",\n+\"EXTERN_LANG_STRING\",\"ALL\",\"PRE_PARSED_CLASS_DECL\",\"DEFARG\",\"DEFARG_MARKER\",\n+\"TYPENAME_DEFN\",\"IDENTIFIER_DEFN\",\"PTYPENAME_DEFN\",\"END_OF_LINE\",\"END_OF_SAVED_INPUT\",\n+\"')'\",\"'}'\",\"'!'\",\"']'\",\"program\",\"extdefs\",\"@1\",\"extdefs_opt\",\".hush_warning\",\n+\".warning_ok\",\"extension\",\"asm_keyword\",\"lang_extdef\",\"@2\",\"extdef\",\"@3\",\"@4\",\n+\"namespace_alias\",\"@5\",\"using_decl\",\"namespace_using_decl\",\"using_directive\",\n+\"@6\",\"namespace_qualifier\",\"any_id\",\"extern_lang_string\",\"template_header\",\"@7\",\n+\"template_parm_list\",\"maybe_identifier\",\"template_type_parm\",\"template_template_parm\",\n+\"template_parm\",\"template_def\",\"template_extdef\",\"template_datadef\",\"datadef\",\n+\"ctor_initializer_opt\",\"maybe_return_init\",\"eat_saved_input\",\"fndef\",\"constructor_declarator\",\n+\"@8\",\"@9\",\"@10\",\"@11\",\"fn.def1\",\"component_constructor_declarator\",\"fn.def2\",\n+\"return_id\",\"return_init\",\"base_init\",\".set_base_init\",\"member_init_list\",\"member_init\",\n+\"identifier\",\"notype_identifier\",\"identifier_defn\",\"explicit_instantiation\",\n+\"@12\",\"@13\",\"@14\",\"@15\",\"@16\",\"@17\",\"@18\",\"@19\",\"begin_explicit_instantiation\",\n+\"end_explicit_instantiation\",\"template_type\",\"apparent_template_type\",\"self_template_type\",\n+\".finish_template_type\",\"template_close_bracket\",\"template_arg_list_opt\",\"template_arg_list\",\n+\"template_arg\",\"unop\",\"expr\",\"paren_expr_or_null\",\"paren_cond_or_null\",\"xcond\",\n+\"condition\",\"@20\",\"compstmtend\",\"already_scoped_stmt\",\"@21\",\"nontrivial_exprlist\",\n+\"nonnull_exprlist\",\"unary_expr\",\".finish_new_placement\",\".begin_new_placement\",\n+\"new_placement\",\"new_initializer\",\"regcast_or_absdcl\",\"cast_expr\",\"expr_no_commas\",\n+\"notype_unqualified_id\",\"do_id\",\"template_id\",\"object_template_id\",\"unqualified_id\",\n+\"expr_or_declarator_intern\",\"expr_or_declarator\",\"notype_template_declarator\",\n \"direct_notype_declarator\",\"primary\",\"@22\",\"new\",\"delete\",\"boolean.literal\",\n \"string\",\"nodecls\",\"object\",\"decl\",\"declarator\",\"fcast_or_absdcl\",\"type_id\",\n \"typed_declspecs\",\"typed_declspecs1\",\"reserved_declspecs\",\"declmods\",\"typed_typespecs\","}, {"sha": "89b35175ca5fe3e9d4a4e0848fcd501c535a910d", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcaad8b2d3698f4dc94e58176abd95fed4ddbf3/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcaad8b2d3698f4dc94e58176abd95fed4ddbf3/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=3dcaad8b2d3698f4dc94e58176abd95fed4ddbf3", "patch": "@@ -131,7 +131,7 @@ empty_parms ()\n /* the reserved words */\n /* SCO include files test \"ASM\", so use something else.  */\n %token SIZEOF ENUM /* STRUCT UNION */ IF ELSE WHILE DO FOR SWITCH CASE DEFAULT\n-%token BREAK CONTINUE RETURN GOTO ASM_KEYWORD TYPEOF ALIGNOF\n+%token BREAK CONTINUE RETURN_KEYWORD GOTO ASM_KEYWORD TYPEOF ALIGNOF\n %token SIGOF\n %token ATTRIBUTE EXTENSION LABEL\n %token REALPART IMAGPART\n@@ -756,7 +756,7 @@ fn.def2:\n \t;\n \n return_id:\n-\t  RETURN IDENTIFIER\n+\t  RETURN_KEYWORD IDENTIFIER\n \t\t{\n \t\t  if (! current_function_parms_stored)\n \t\t    store_parm_decls ();\n@@ -2475,7 +2475,7 @@ component_decl:\n \t\t{ $$ = finish_method ($$); }\n \t| fn.def2 TRY /* base_init compstmt */\n \t\t{ $$ = finish_method ($$); }\n-\t| fn.def2 RETURN /* base_init compstmt */\n+\t| fn.def2 RETURN_KEYWORD /* base_init compstmt */\n \t\t{ $$ = finish_method ($$); }\n \t| fn.def2 '{' /* nodecls compstmt */\n \t\t{ $$ = finish_method ($$); }\n@@ -3335,9 +3335,9 @@ simple_stmt:\n                 { finish_break_stmt (); }\n \t| CONTINUE ';'\n                 { finish_continue_stmt (); }\n-\t| RETURN ';'\n+\t| RETURN_KEYWORD ';'\n                 { finish_return_stmt (NULL_TREE); }\n-\t| RETURN expr ';'\n+\t| RETURN_KEYWORD expr ';'\n                 { finish_return_stmt ($2); }\n \t| asm_keyword maybe_cv_qualifier '(' string ')' ';'\n \t\t{ "}, {"sha": "aeb827f3e9c45efa20ec98efd95ed764e127ee91", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 30, "deletions": 14, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcaad8b2d3698f4dc94e58176abd95fed4ddbf3/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcaad8b2d3698f4dc94e58176abd95fed4ddbf3/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=3dcaad8b2d3698f4dc94e58176abd95fed4ddbf3", "patch": "@@ -39,6 +39,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"defaults.h\"\n #include \"except.h\"\n #include \"toplev.h\"\n+#include \"rtl.h\"\n+#include \"varray.h\"\n \n /* The type of functions taking a tree, and some additional data, and\n    returning an int.  */\n@@ -67,6 +69,8 @@ int processing_template_parmlist;\n static int template_header_count;\n \n static tree saved_trees;\n+static varray_type inline_parm_levels;\n+static size_t inline_parm_levels_used;\n \n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n@@ -399,34 +403,46 @@ maybe_begin_member_template_processing (decl)\n      tree decl;\n {\n   tree parms;\n-  int levels;\n+  int levels = 0;\n \n-  if (! inline_needs_template_parms (decl))\n-    return;\n-\n-  parms = DECL_TEMPLATE_PARMS (most_general_template (decl));\n+  if (inline_needs_template_parms (decl))\n+    {\n+      parms = DECL_TEMPLATE_PARMS (most_general_template (decl));\n+      levels = TMPL_PARMS_DEPTH (parms) - processing_template_decl;\n \n-  levels = TMPL_PARMS_DEPTH (parms) - processing_template_decl;\n+      if (DECL_TEMPLATE_SPECIALIZATION (decl))\n+\t{\n+\t  --levels;\n+\t  parms = TREE_CHAIN (parms);\n+\t}\n \n-  if (DECL_TEMPLATE_SPECIALIZATION (decl))\n-    {\n-      --levels;\n-      parms = TREE_CHAIN (parms);\n+      push_inline_template_parms_recursive (parms, levels);\n     }\n \n-  push_inline_template_parms_recursive (parms, levels);\n+  /* Remember how many levels of template parameters we pushed so that\n+     we can pop them later.  */\n+  if (!inline_parm_levels)\n+    VARRAY_INT_INIT (inline_parm_levels, 4, \"inline_parm_levels\");\n+  if (inline_parm_levels_used == inline_parm_levels->num_elements)\n+    VARRAY_GROW (inline_parm_levels, 2 * inline_parm_levels_used);\n+  VARRAY_INT (inline_parm_levels, inline_parm_levels_used) = levels;\n+  ++inline_parm_levels_used;\n }\n \n /* Undo the effects of begin_member_template_processing. */\n \n void \n maybe_end_member_template_processing ()\n {\n-  if (! processing_template_decl)\n+  int i;\n+\n+  if (!inline_parm_levels_used)\n     return;\n \n-  while (current_template_parms\n-\t && TEMPLATE_PARMS_FOR_INLINE (current_template_parms))\n+  --inline_parm_levels_used;\n+  for (i = 0; \n+       i < VARRAY_INT (inline_parm_levels, inline_parm_levels_used);\n+       ++i) \n     {\n       --processing_template_decl;\n       current_template_parms = TREE_CHAIN (current_template_parms);"}, {"sha": "2c4bb5a4115dbd122822af5f02c21764b5e933e2", "filename": "gcc/testsuite/g++.old-deja/g++.pt/crash39.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcaad8b2d3698f4dc94e58176abd95fed4ddbf3/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash39.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcaad8b2d3698f4dc94e58176abd95fed4ddbf3/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash39.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash39.C?ref=3dcaad8b2d3698f4dc94e58176abd95fed4ddbf3", "patch": "@@ -0,0 +1,19 @@\n+// Build don't link:\n+// Origin: Ian Nixon <ian@tharas.com>\n+\n+class Action {\n+public:\n+  virtual void action () = 0;\n+};\n+\n+class Var {\n+public:\n+\n+  template<class Base> void Add() {\n+\tstruct tmp : public Action {\n+\t  void action () {}\n+\t};\n+\ttmp *tp = new tmp; \n+  }\n+\n+};"}]}