{"sha": "90c56b45eba69690eb21bf950a14783fadb48724", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBjNTZiNDVlYmE2OTY5MGViMjFiZjk1MGExNDc4M2ZhZGI0ODcyNA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2006-12-06T14:56:10Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2006-12-06T14:56:10Z"}, "message": "i386.md (DIRFLAG_REG): Remove constant.\n\n\t* config/i386/i386.md (DIRFLAG_REG): Remove constant.\n\t(type): Remove cld.\n\t(length_immediate): Do not depend on cld type attribute.\n\t(length_address): Ditto.\n\t(modrm): Ditto.\n\t(memory): Ditto.\n\t(cld): Remove insn pattern.\n\t(strmov_singleop): Do not use DIRFLAG_REG.\n\t(*strmovdi_rex_1): Ditto.\n\t(*strmovsi_1): Ditto.\n\t(*strmovsi_rex_1): Ditto.\n\t(*strmovhi_1): Ditto.\n\t(*strmovhi_rex_1): Ditto.\n\t(*strmovqi_1): Ditto.\n\t(*strmovqi_rex_1): Ditto.\n\t(rep_mov): Ditto.\n\t(*rep_movdi_rex64): Ditto.\n\t(*rep_movsi): Ditto.\n\t(*rep_movsi_rex64): Ditto.\n\t(*rep_movqi): Ditto.\n\t(*rep_movqi_rex64): Ditto.\n\t(strset_singleop): Ditto.\n\t(*strsetdi_rex_1): Ditto.\n\t(*strsetsi_1): Ditto.\n\t(*strsetsi_rex_1): Ditto.\n\t(*strsethi_1): Ditto.\n\t(*strsethi_rex_1): Ditto.\n\t(*strsetqi_1): Ditto.\n\t(*strsetqi_rex_1): Ditto.\n\t(rep_stos): Ditto.\n\t(*rep_stosdi_rex64): Ditto.\n\t(*rep_stossi): Ditto.\n\t(*rep_stossi_rex64): Ditto.\n\t(*rep_stosqi): Ditto.\n\t(*rep_stosqi_rex64): Ditto.\n\t(cmpstrnsi): Do not generate cld insn.\n\t(cmpstrnqi_nz_1): Do not use DIRFLAG_REG.\n\t(*cmpstrnqi_nz_1): Ditto.\n\t(*cmpstrnqi_nz_rex_1): Ditto.\n\t(cmpstrnqi_1): Ditto.\n\t(*cmpstrnqi_1): Ditto.\n\t(*cmpstrnqi_rex_1): Ditto.\n\t(strlenqi_1): Ditto.\n\t(*strlenqi_1): Ditto.\n\t(*strlenqi_rex_1): Ditto.\n\n\t* config/i386/geode.md (shift): Do not depend on cld type attribute.\n\t* config/i386/pentium.md (pent_cld): Remove insn reservation.\n\t* config/i386/athlon.md (athlon_decode): Do not depend on cld\n\ttype attribute.\n\t* config/i386/ppro.md (ppro_cld): Remove insn reservation.\n\t* config/i386/k6.md (k6_alux_only): Do not depend on cld type\n\tattribute.\n\t(k6_alux_only_load): Ditto.\n\t(k6_alux_only_store): Ditto.\n\n\t* config/i386/i386.c (ix86_expand_movmem): Remove cld_done boolean.\n\tDo not emit cld instruction.\n\t(ix86_expand_setmem): Ditto.\n\t(ix86_expand_strlen): Do not emit cld instruction.\n\nFrom-SVN: r119581", "tree": {"sha": "08f6cb948a4dc9fabfac92c2ac88671c0a65f47a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08f6cb948a4dc9fabfac92c2ac88671c0a65f47a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90c56b45eba69690eb21bf950a14783fadb48724", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90c56b45eba69690eb21bf950a14783fadb48724", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90c56b45eba69690eb21bf950a14783fadb48724", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90c56b45eba69690eb21bf950a14783fadb48724/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4b53c50816e4bdebf791d0f93e51871ef5314b0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b53c50816e4bdebf791d0f93e51871ef5314b0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b53c50816e4bdebf791d0f93e51871ef5314b0e"}], "stats": {"total": 249, "additions": 108, "deletions": 141}, "files": [{"sha": "615f13d5952c6bfd96999354c93244e8eecf3545", "filename": "gcc/ChangeLog", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90c56b45eba69690eb21bf950a14783fadb48724/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90c56b45eba69690eb21bf950a14783fadb48724/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=90c56b45eba69690eb21bf950a14783fadb48724", "patch": "@@ -1,3 +1,66 @@\n+2006-12-06 Uros Bizjak <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (DIRFLAG_REG): Remove constant.\n+\t(type): Remove cld.\n+\t(length_immediate): Do not depend on cld type attribute.\n+\t(length_address): Ditto.\n+\t(modrm): Ditto.\n+\t(memory): Ditto.\n+\t(cld): Remove insn pattern.\n+\t(strmov_singleop): Do not use DIRFLAG_REG.\n+\t(*strmovdi_rex_1): Ditto.\n+\t(*strmovsi_1): Ditto.\n+\t(*strmovsi_rex_1): Ditto.\n+\t(*strmovhi_1): Ditto.\n+\t(*strmovhi_rex_1): Ditto.\n+\t(*strmovqi_1): Ditto.\n+\t(*strmovqi_rex_1): Ditto.\n+\t(rep_mov): Ditto.\n+\t(*rep_movdi_rex64): Ditto.\n+\t(*rep_movsi): Ditto.\n+\t(*rep_movsi_rex64): Ditto.\n+\t(*rep_movqi): Ditto.\n+\t(*rep_movqi_rex64): Ditto.\n+\t(strset_singleop): Ditto.\n+\t(*strsetdi_rex_1): Ditto.\n+\t(*strsetsi_1): Ditto.\n+\t(*strsetsi_rex_1): Ditto.\n+\t(*strsethi_1): Ditto.\n+\t(*strsethi_rex_1): Ditto.\n+\t(*strsetqi_1): Ditto.\n+\t(*strsetqi_rex_1): Ditto.\n+\t(rep_stos): Ditto.\n+\t(*rep_stosdi_rex64): Ditto.\n+\t(*rep_stossi): Ditto.\n+\t(*rep_stossi_rex64): Ditto.\n+\t(*rep_stosqi): Ditto.\n+\t(*rep_stosqi_rex64): Ditto.\n+\t(cmpstrnsi): Do not generate cld insn.\n+\t(cmpstrnqi_nz_1): Do not use DIRFLAG_REG.\n+\t(*cmpstrnqi_nz_1): Ditto.\n+\t(*cmpstrnqi_nz_rex_1): Ditto.\n+\t(cmpstrnqi_1): Ditto.\n+\t(*cmpstrnqi_1): Ditto.\n+\t(*cmpstrnqi_rex_1): Ditto.\n+\t(strlenqi_1): Ditto.\n+\t(*strlenqi_1): Ditto.\n+\t(*strlenqi_rex_1): Ditto.\n+\n+\t* config/i386/geode.md (shift): Do not depend on cld type attribute.\n+\t* config/i386/pentium.md (pent_cld): Remove insn reservation.\n+\t* config/i386/athlon.md (athlon_decode): Do not depend on cld\n+\ttype attribute.\n+\t* config/i386/ppro.md (ppro_cld): Remove insn reservation.\n+\t* config/i386/k6.md (k6_alux_only): Do not depend on cld type\n+\tattribute.\n+\t(k6_alux_only_load): Ditto.\n+\t(k6_alux_only_store): Ditto.\n+\n+\t* config/i386/i386.c (ix86_expand_movmem): Remove cld_done boolean.\n+\tDo not emit cld instruction.\n+\t(ix86_expand_setmem): Ditto.\n+\t(ix86_expand_strlen): Do not emit cld instruction.\n+\n 2006-12-06  Bernd Schmidt  <bernd.schmidt@analog.com>\n \n \t* config/bfin/bfin.c (bfin_rtx_costs): Add a number of new cases, tweak"}, {"sha": "21d460d677ea35dcfd8c606e1c23c73ee46229e9", "filename": "gcc/config/i386/athlon.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90c56b45eba69690eb21bf950a14783fadb48724/gcc%2Fconfig%2Fi386%2Fathlon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90c56b45eba69690eb21bf950a14783fadb48724/gcc%2Fconfig%2Fi386%2Fathlon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fathlon.md?ref=90c56b45eba69690eb21bf950a14783fadb48724", "patch": "@@ -18,7 +18,7 @@\n ;; communicates with all the execution units separately instead.\n \n (define_attr \"athlon_decode\" \"direct,vector,double\"\n-  (cond [(eq_attr \"type\" \"call,imul,idiv,other,multi,fcmov,fpspc,str,pop,cld,leave\")\n+  (cond [(eq_attr \"type\" \"call,imul,idiv,other,multi,fcmov,fpspc,str,pop,leave\")\n \t   (const_string \"vector\")\n          (and (eq_attr \"type\" \"push\")\n               (match_operand 1 \"memory_operand\" \"\"))"}, {"sha": "6e89b47bae7a72c39fcaff9d39b1edae21d8dd05", "filename": "gcc/config/i386/geode.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90c56b45eba69690eb21bf950a14783fadb48724/gcc%2Fconfig%2Fi386%2Fgeode.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90c56b45eba69690eb21bf950a14783fadb48724/gcc%2Fconfig%2Fi386%2Fgeode.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgeode.md?ref=90c56b45eba69690eb21bf950a14783fadb48724", "patch": "@@ -52,7 +52,7 @@\n \n (define_insn_reservation \"shift\" 2\n \t\t\t (and (eq_attr \"cpu\" \"geode\")\n-\t\t\t      (eq_attr \"type\" \"ishift,ishift1,rotate,rotate1,cld\"))\n+\t\t\t      (eq_attr \"type\" \"ishift,ishift1,rotate,rotate1\"))\n \t\t\t \"geode_issue,geode_alu*2\")\n \n (define_insn_reservation \"imul\" 7"}, {"sha": "9dc2feb3d0570e0b0f3a8b5e854462bf0bfb2f1a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 43, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90c56b45eba69690eb21bf950a14783fadb48724/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90c56b45eba69690eb21bf950a14783fadb48724/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=90c56b45eba69690eb21bf950a14783fadb48724", "patch": "@@ -13622,10 +13622,6 @@ ix86_expand_movmem (rtx dst, rtx src, rtx count_exp, rtx align_exp,\n   int desired_align = 0;\n   enum stringop_alg alg;\n   int dynamic_check;\n-  /* Precise placement on cld depends whether stringops will be emit in\n-     prologue, main copying body or epilogue.  This variable keeps track\n-     if cld was already needed.  */\n-  bool cld_done = false;\n \n   if (GET_CODE (align_exp) == CONST_INT)\n     align = INTVAL (align_exp);\n@@ -13690,8 +13686,7 @@ ix86_expand_movmem (rtx dst, rtx src, rtx count_exp, rtx align_exp,\n       && !count)\n     {\n       int size = MAX (size_needed - 1, desired_align - align);\n-      if (TARGET_SINGLE_STRINGOP)\n-\temit_insn (gen_cld ()), cld_done = true;\n+\n       label = gen_label_rtx ();\n       emit_cmp_and_jump_insns (count_exp,\n \t\t\t       GEN_INT (size),\n@@ -13725,8 +13720,6 @@ ix86_expand_movmem (rtx dst, rtx src, rtx count_exp, rtx align_exp,\n \t the info early.  */\n       src = change_address (src, BLKmode, srcreg);\n       dst = change_address (dst, BLKmode, destreg);\n-      if (TARGET_SINGLE_STRINGOP && !cld_done)\n-\temit_insn (gen_cld ()), cld_done = true;\n       expand_movmem_prologue (dst, src, destreg, srcreg, count_exp, align,\n \t\t\t      desired_align);\n     }\n@@ -13759,20 +13752,14 @@ ix86_expand_movmem (rtx dst, rtx src, rtx count_exp, rtx align_exp,\n \t\t\t\t     expected_size);\n       break;\n     case rep_prefix_8_byte:\n-      if (!cld_done)\n-\temit_insn (gen_cld ()), cld_done = true;\n       expand_movmem_via_rep_mov (dst, src, destreg, srcreg, count_exp,\n \t\t\t\t DImode);\n       break;\n     case rep_prefix_4_byte:\n-      if (!cld_done)\n-\temit_insn (gen_cld ()), cld_done = true;\n       expand_movmem_via_rep_mov (dst, src, destreg, srcreg, count_exp,\n \t\t\t\t SImode);\n       break;\n     case rep_prefix_1_byte:\n-      if (!cld_done)\n-\temit_insn (gen_cld ()), cld_done = true;\n       expand_movmem_via_rep_mov (dst, src, destreg, srcreg, count_exp,\n \t\t\t\t QImode);\n       break;\n@@ -13808,12 +13795,8 @@ ix86_expand_movmem (rtx dst, rtx src, rtx count_exp, rtx align_exp,\n       LABEL_NUSES (label) = 1;\n     }\n   if (count_exp != const0_rtx && size_needed > 1)\n-    {\n-      if (TARGET_SINGLE_STRINGOP && !cld_done)\n-\temit_insn (gen_cld ()), cld_done = true;\n-      expand_movmem_epilogue (dst, src, destreg, srcreg, count_exp,\n-\t\t\t      size_needed);\n-    }\n+    expand_movmem_epilogue (dst, src, destreg, srcreg, count_exp,\n+\t\t\t    size_needed);\n   if (jump_around_label)\n     emit_label (jump_around_label);\n   return 1;\n@@ -13907,10 +13890,6 @@ ix86_expand_setmem (rtx dst, rtx count_exp, rtx val_exp, rtx align_exp,\n   int size_needed = 0;\n   int desired_align = 0;\n   enum stringop_alg alg;\n-  /* Precise placement on cld depends whether stringops will be emit in\n-     prologue, main copying body or epilogue.  This variable keeps track\n-     if cld was already needed.  */\n-  bool cld_done = false;\n   rtx promoted_val = val_exp;\n   bool force_loopy_epilogue = false;\n   int dynamic_check;\n@@ -13977,8 +13956,6 @@ ix86_expand_setmem (rtx dst, rtx count_exp, rtx val_exp, rtx align_exp,\n          code, so we need to use QImode accesses in epilogue.  */\n       if (GET_CODE (val_exp) != CONST_INT && size_needed > 1)\n \tforce_loopy_epilogue = true;\n-      else if (TARGET_SINGLE_STRINGOP)\n-\temit_insn (gen_cld ()), cld_done = true;\n       label = gen_label_rtx ();\n       emit_cmp_and_jump_insns (count_exp,\n \t\t\t       GEN_INT (size),\n@@ -14013,8 +13990,7 @@ ix86_expand_setmem (rtx dst, rtx count_exp, rtx val_exp, rtx align_exp,\n       && !count && !label)\n     {\n       int size = MAX (size_needed - 1, desired_align - align);\n-      if (TARGET_SINGLE_STRINGOP)\n-\temit_insn (gen_cld ()), cld_done = true;\n+\n       label = gen_label_rtx ();\n       emit_cmp_and_jump_insns (count_exp,\n \t\t\t       GEN_INT (size),\n@@ -14031,8 +14007,6 @@ ix86_expand_setmem (rtx dst, rtx count_exp, rtx val_exp, rtx align_exp,\n \t the pain to maintain it for the first move, so throw away\n \t the info early.  */\n       dst = change_address (dst, BLKmode, destreg);\n-      if (TARGET_SINGLE_STRINGOP && !cld_done)\n-\temit_insn (gen_cld ()), cld_done = true;\n       expand_setmem_prologue (dst, destreg, promoted_val, count_exp, align,\n \t\t\t      desired_align);\n     }\n@@ -14060,20 +14034,14 @@ ix86_expand_setmem (rtx dst, rtx count_exp, rtx val_exp, rtx align_exp,\n \t\t\t\t     count_exp, Pmode, 4, expected_size);\n       break;\n     case rep_prefix_8_byte:\n-      if (!cld_done)\n-\temit_insn (gen_cld ()), cld_done = true;\n       expand_setmem_via_rep_stos (dst, destreg, promoted_val, count_exp,\n \t\t\t\t  DImode);\n       break;\n     case rep_prefix_4_byte:\n-      if (!cld_done)\n-\temit_insn (gen_cld ()), cld_done = true;\n       expand_setmem_via_rep_stos (dst, destreg, promoted_val, count_exp,\n \t\t\t\t  SImode);\n       break;\n     case rep_prefix_1_byte:\n-      if (!cld_done)\n-\temit_insn (gen_cld ()), cld_done = true;\n       expand_setmem_via_rep_stos (dst, destreg, promoted_val, count_exp,\n \t\t\t\t  QImode);\n       break;\n@@ -14106,12 +14074,8 @@ ix86_expand_setmem (rtx dst, rtx count_exp, rtx val_exp, rtx align_exp,\n \texpand_setmem_epilogue_via_loop (dst, destreg, val_exp, count_exp,\n \t\t\t\t\t size_needed);\n       else\n-\t{\n-\t  if (TARGET_SINGLE_STRINGOP && !cld_done)\n-\t    emit_insn (gen_cld ()), cld_done = true;\n-\t  expand_setmem_epilogue (dst, destreg, promoted_val, count_exp,\n-\t\t\t\t  size_needed);\n-\t}\n+\texpand_setmem_epilogue (dst, destreg, promoted_val, count_exp,\n+\t\t\t\tsize_needed);\n     }\n   if (jump_around_label)\n     emit_label (jump_around_label);\n@@ -14169,7 +14133,6 @@ ix86_expand_strlen (rtx out, rtx src, rtx eoschar, rtx align)\n       emit_move_insn (scratch3, addr);\n       eoschar = force_reg (QImode, eoschar);\n \n-      emit_insn (gen_cld ());\n       src = replace_equiv_address_nv (src, scratch3);\n \n       /* If .md starts supporting :P, this can be done in .md.  */"}, {"sha": "4f1b3963e85273b8725f994475e943e7330b0bf3", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 33, "deletions": 82, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90c56b45eba69690eb21bf950a14783fadb48724/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90c56b45eba69690eb21bf950a14783fadb48724/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=90c56b45eba69690eb21bf950a14783fadb48724", "patch": "@@ -180,7 +180,6 @@\n    (FLAGS_REG\t\t\t17)\n    (FPSR_REG\t\t\t18)\n    (FPCR_REG\t\t\t19)\n-   (DIRFLAG_REG\t\t\t20)\n    (R10_REG\t\t\t40)\n    (R11_REG\t\t\t41)\n   ])\n@@ -207,7 +206,7 @@\n    incdec,ishift,ishift1,rotate,rotate1,imul,idiv,\n    icmp,test,ibr,setcc,icmov,\n    push,pop,call,callv,leave,\n-   str,cld,\n+   str,\n    fmov,fop,fsgn,fmul,fdiv,fpspc,fcmov,fcmp,fxch,fistp,fisttp,frndint,\n    sselog,sselog1,sseiadd,sseishft,sseimul,\n    sse,ssemov,sseadd,ssemul,ssecmp,ssecomi,ssecvt,sseicvt,ssediv,\n@@ -234,7 +233,7 @@\n \n ;; The (bounding maximum) length of an instruction immediate.\n (define_attr \"length_immediate\" \"\"\n-  (cond [(eq_attr \"type\" \"incdec,setcc,icmov,str,cld,lea,other,multi,idiv,leave\")\n+  (cond [(eq_attr \"type\" \"incdec,setcc,icmov,str,lea,other,multi,idiv,leave\")\n \t   (const_int 0)\n \t (eq_attr \"unit\" \"i387,sse,mmx\")\n \t   (const_int 0)\n@@ -261,7 +260,7 @@\n \n ;; The (bounding maximum) length of an instruction address.\n (define_attr \"length_address\" \"\"\n-  (cond [(eq_attr \"type\" \"str,cld,other,multi,fxch\")\n+  (cond [(eq_attr \"type\" \"str,other,multi,fxch\")\n \t   (const_int 0)\n \t (and (eq_attr \"type\" \"call\")\n \t      (match_operand 0 \"constant_call_address_operand\" \"\"))\n@@ -310,7 +309,7 @@\n \n ;; Set when modrm byte is used.\n (define_attr \"modrm\" \"\"\n-  (cond [(eq_attr \"type\" \"str,cld,leave\")\n+  (cond [(eq_attr \"type\" \"str,leave\")\n \t   (const_int 0)\n \t (eq_attr \"unit\" \"i387\")\n \t   (const_int 0)\n@@ -370,7 +369,7 @@\n (define_attr \"memory\" \"none,load,store,both,unknown\"\n   (cond [(eq_attr \"type\" \"other,multi,str\")\n \t   (const_string \"unknown\")\n-\t (eq_attr \"type\" \"lea,fcmov,fpspc,cld\")\n+\t (eq_attr \"type\" \"lea,fcmov,fpspc\")\n \t   (const_string \"none\")\n \t (eq_attr \"type\" \"fistp,leave\")\n \t   (const_string \"both\")\n@@ -18141,12 +18140,6 @@\n \f\n ;; Block operation instructions\n \n-(define_insn \"cld\"\n- [(set (reg:SI DIRFLAG_REG) (const_int 0))]\n- \"\"\n- \"cld\"\n-  [(set_attr \"type\" \"cld\")])\n-\n (define_expand \"movmemsi\"\n   [(use (match_operand:BLK 0 \"memory_operand\" \"\"))\n    (use (match_operand:BLK 1 \"memory_operand\" \"\"))\n@@ -18211,8 +18204,7 @@\n \t      (set (match_operand 0 \"register_operand\" \"\")\n \t\t   (match_operand 4 \"\" \"\"))\n \t      (set (match_operand 2 \"register_operand\" \"\")\n-\t\t   (match_operand 5 \"\" \"\"))\n-\t      (use (reg:SI DIRFLAG_REG))])]\n+\t\t   (match_operand 5 \"\" \"\"))])]\n   \"TARGET_SINGLE_STRINGOP || optimize_size\"\n   \"\")\n \n@@ -18224,8 +18216,7 @@\n \t\t (const_int 8)))\n    (set (match_operand:DI 1 \"register_operand\" \"=S\")\n \t(plus:DI (match_dup 3)\n-\t\t (const_int 8)))\n-   (use (reg:SI DIRFLAG_REG))]\n+\t\t (const_int 8)))]\n   \"TARGET_64BIT && (TARGET_SINGLE_STRINGOP || optimize_size)\"\n   \"movsq\"\n   [(set_attr \"type\" \"str\")\n@@ -18240,8 +18231,7 @@\n \t\t (const_int 4)))\n    (set (match_operand:SI 1 \"register_operand\" \"=S\")\n \t(plus:SI (match_dup 3)\n-\t\t (const_int 4)))\n-   (use (reg:SI DIRFLAG_REG))]\n+\t\t (const_int 4)))]\n   \"!TARGET_64BIT && (TARGET_SINGLE_STRINGOP || optimize_size)\"\n   \"{movsl|movsd}\"\n   [(set_attr \"type\" \"str\")\n@@ -18256,8 +18246,7 @@\n \t\t (const_int 4)))\n    (set (match_operand:DI 1 \"register_operand\" \"=S\")\n \t(plus:DI (match_dup 3)\n-\t\t (const_int 4)))\n-   (use (reg:SI DIRFLAG_REG))]\n+\t\t (const_int 4)))]\n   \"TARGET_64BIT && (TARGET_SINGLE_STRINGOP || optimize_size)\"\n   \"{movsl|movsd}\"\n   [(set_attr \"type\" \"str\")\n@@ -18272,8 +18261,7 @@\n \t\t (const_int 2)))\n    (set (match_operand:SI 1 \"register_operand\" \"=S\")\n \t(plus:SI (match_dup 3)\n-\t\t (const_int 2)))\n-   (use (reg:SI DIRFLAG_REG))]\n+\t\t (const_int 2)))]\n   \"!TARGET_64BIT && (TARGET_SINGLE_STRINGOP || optimize_size)\"\n   \"movsw\"\n   [(set_attr \"type\" \"str\")\n@@ -18288,8 +18276,7 @@\n \t\t (const_int 2)))\n    (set (match_operand:DI 1 \"register_operand\" \"=S\")\n \t(plus:DI (match_dup 3)\n-\t\t (const_int 2)))\n-   (use (reg:SI DIRFLAG_REG))]\n+\t\t (const_int 2)))]\n   \"TARGET_64BIT && (TARGET_SINGLE_STRINGOP || optimize_size)\"\n   \"movsw\"\n   [(set_attr \"type\" \"str\")\n@@ -18304,8 +18291,7 @@\n \t\t (const_int 1)))\n    (set (match_operand:SI 1 \"register_operand\" \"=S\")\n \t(plus:SI (match_dup 3)\n-\t\t (const_int 1)))\n-   (use (reg:SI DIRFLAG_REG))]\n+\t\t (const_int 1)))]\n   \"!TARGET_64BIT && (TARGET_SINGLE_STRINGOP || optimize_size)\"\n   \"movsb\"\n   [(set_attr \"type\" \"str\")\n@@ -18320,8 +18306,7 @@\n \t\t (const_int 1)))\n    (set (match_operand:DI 1 \"register_operand\" \"=S\")\n \t(plus:DI (match_dup 3)\n-\t\t (const_int 1)))\n-   (use (reg:SI DIRFLAG_REG))]\n+\t\t (const_int 1)))]\n   \"TARGET_64BIT && (TARGET_SINGLE_STRINGOP || optimize_size)\"\n   \"movsb\"\n   [(set_attr \"type\" \"str\")\n@@ -18336,8 +18321,7 @@\n \t\t   (match_operand 6 \"\" \"\"))\n \t      (set (match_operand 1 \"memory_operand\" \"\")\n \t\t   (match_operand 3 \"memory_operand\" \"\"))\n-\t      (use (match_dup 4))\n-\t      (use (reg:SI DIRFLAG_REG))])]\n+\t      (use (match_dup 4))])]\n   \"\"\n   \"\")\n \n@@ -18352,8 +18336,7 @@\n \t\t (match_operand:DI 4 \"register_operand\" \"1\")))\n    (set (mem:BLK (match_dup 3))\n \t(mem:BLK (match_dup 4)))\n-   (use (match_dup 5))\n-   (use (reg:SI DIRFLAG_REG))]\n+   (use (match_dup 5))]\n   \"TARGET_64BIT\"\n   \"{rep\\;movsq|rep movsq}\"\n   [(set_attr \"type\" \"str\")\n@@ -18372,8 +18355,7 @@\n \t\t (match_operand:SI 4 \"register_operand\" \"1\")))\n    (set (mem:BLK (match_dup 3))\n \t(mem:BLK (match_dup 4)))\n-   (use (match_dup 5))\n-   (use (reg:SI DIRFLAG_REG))]\n+   (use (match_dup 5))]\n   \"!TARGET_64BIT\"\n   \"{rep\\;movsl|rep movsd}\"\n   [(set_attr \"type\" \"str\")\n@@ -18392,8 +18374,7 @@\n \t\t (match_operand:DI 4 \"register_operand\" \"1\")))\n    (set (mem:BLK (match_dup 3))\n \t(mem:BLK (match_dup 4)))\n-   (use (match_dup 5))\n-   (use (reg:SI DIRFLAG_REG))]\n+   (use (match_dup 5))]\n   \"TARGET_64BIT\"\n   \"{rep\\;movsl|rep movsd}\"\n   [(set_attr \"type\" \"str\")\n@@ -18410,8 +18391,7 @@\n         (plus:SI (match_operand:SI 4 \"register_operand\" \"1\") (match_dup 5)))\n    (set (mem:BLK (match_dup 3))\n \t(mem:BLK (match_dup 4)))\n-   (use (match_dup 5))\n-   (use (reg:SI DIRFLAG_REG))]\n+   (use (match_dup 5))]\n   \"!TARGET_64BIT\"\n   \"{rep\\;movsb|rep movsb}\"\n   [(set_attr \"type\" \"str\")\n@@ -18428,8 +18408,7 @@\n         (plus:DI (match_operand:DI 4 \"register_operand\" \"1\") (match_dup 5)))\n    (set (mem:BLK (match_dup 3))\n \t(mem:BLK (match_dup 4)))\n-   (use (match_dup 5))\n-   (use (reg:SI DIRFLAG_REG))]\n+   (use (match_dup 5))]\n   \"TARGET_64BIT\"\n   \"{rep\\;movsb|rep movsb}\"\n   [(set_attr \"type\" \"str\")\n@@ -18500,8 +18479,7 @@\n   [(parallel [(set (match_operand 1 \"memory_operand\" \"\")\n \t\t   (match_operand 2 \"register_operand\" \"\"))\n \t      (set (match_operand 0 \"register_operand\" \"\")\n-\t\t   (match_operand 3 \"\" \"\"))\n-\t      (use (reg:SI DIRFLAG_REG))])]\n+\t\t   (match_operand 3 \"\" \"\"))])]\n   \"TARGET_SINGLE_STRINGOP || optimize_size\"\n   \"\")\n \n@@ -18510,8 +18488,7 @@\n \t(match_operand:DI 2 \"register_operand\" \"a\"))\n    (set (match_operand:DI 0 \"register_operand\" \"=D\")\n \t(plus:DI (match_dup 1)\n-\t\t (const_int 8)))\n-   (use (reg:SI DIRFLAG_REG))]\n+\t\t (const_int 8)))]\n   \"TARGET_64BIT && (TARGET_SINGLE_STRINGOP || optimize_size)\"\n   \"stosq\"\n   [(set_attr \"type\" \"str\")\n@@ -18523,8 +18500,7 @@\n \t(match_operand:SI 2 \"register_operand\" \"a\"))\n    (set (match_operand:SI 0 \"register_operand\" \"=D\")\n \t(plus:SI (match_dup 1)\n-\t\t (const_int 4)))\n-   (use (reg:SI DIRFLAG_REG))]\n+\t\t (const_int 4)))]\n   \"!TARGET_64BIT && (TARGET_SINGLE_STRINGOP || optimize_size)\"\n   \"{stosl|stosd}\"\n   [(set_attr \"type\" \"str\")\n@@ -18536,8 +18512,7 @@\n \t(match_operand:SI 2 \"register_operand\" \"a\"))\n    (set (match_operand:DI 0 \"register_operand\" \"=D\")\n \t(plus:DI (match_dup 1)\n-\t\t (const_int 4)))\n-   (use (reg:SI DIRFLAG_REG))]\n+\t\t (const_int 4)))]\n   \"TARGET_64BIT && (TARGET_SINGLE_STRINGOP || optimize_size)\"\n   \"{stosl|stosd}\"\n   [(set_attr \"type\" \"str\")\n@@ -18549,8 +18524,7 @@\n \t(match_operand:HI 2 \"register_operand\" \"a\"))\n    (set (match_operand:SI 0 \"register_operand\" \"=D\")\n \t(plus:SI (match_dup 1)\n-\t\t (const_int 2)))\n-   (use (reg:SI DIRFLAG_REG))]\n+\t\t (const_int 2)))]\n   \"!TARGET_64BIT && (TARGET_SINGLE_STRINGOP || optimize_size)\"\n   \"stosw\"\n   [(set_attr \"type\" \"str\")\n@@ -18562,8 +18536,7 @@\n \t(match_operand:HI 2 \"register_operand\" \"a\"))\n    (set (match_operand:DI 0 \"register_operand\" \"=D\")\n \t(plus:DI (match_dup 1)\n-\t\t (const_int 2)))\n-   (use (reg:SI DIRFLAG_REG))]\n+\t\t (const_int 2)))]\n   \"TARGET_64BIT && (TARGET_SINGLE_STRINGOP || optimize_size)\"\n   \"stosw\"\n   [(set_attr \"type\" \"str\")\n@@ -18575,8 +18548,7 @@\n \t(match_operand:QI 2 \"register_operand\" \"a\"))\n    (set (match_operand:SI 0 \"register_operand\" \"=D\")\n \t(plus:SI (match_dup 1)\n-\t\t (const_int 1)))\n-   (use (reg:SI DIRFLAG_REG))]\n+\t\t (const_int 1)))]\n   \"!TARGET_64BIT && (TARGET_SINGLE_STRINGOP || optimize_size)\"\n   \"stosb\"\n   [(set_attr \"type\" \"str\")\n@@ -18588,8 +18560,7 @@\n \t(match_operand:QI 2 \"register_operand\" \"a\"))\n    (set (match_operand:DI 0 \"register_operand\" \"=D\")\n \t(plus:DI (match_dup 1)\n-\t\t (const_int 1)))\n-   (use (reg:SI DIRFLAG_REG))]\n+\t\t (const_int 1)))]\n   \"TARGET_64BIT && (TARGET_SINGLE_STRINGOP || optimize_size)\"\n   \"stosb\"\n   [(set_attr \"type\" \"str\")\n@@ -18602,8 +18573,7 @@\n \t\t   (match_operand 4 \"\" \"\"))\n \t      (set (match_operand 2 \"memory_operand\" \"\") (const_int 0))\n \t      (use (match_operand 3 \"register_operand\" \"\"))\n-\t      (use (match_dup 1))\n-\t      (use (reg:SI DIRFLAG_REG))])]\n+\t      (use (match_dup 1))])]\n   \"\"\n   \"\")\n \n@@ -18616,8 +18586,7 @@\n    (set (mem:BLK (match_dup 3))\n \t(const_int 0))\n    (use (match_operand:DI 2 \"register_operand\" \"a\"))\n-   (use (match_dup 4))\n-   (use (reg:SI DIRFLAG_REG))]\n+   (use (match_dup 4))]\n   \"TARGET_64BIT\"\n   \"{rep\\;stosq|rep stosq}\"\n   [(set_attr \"type\" \"str\")\n@@ -18634,8 +18603,7 @@\n    (set (mem:BLK (match_dup 3))\n \t(const_int 0))\n    (use (match_operand:SI 2 \"register_operand\" \"a\"))\n-   (use (match_dup 4))\n-   (use (reg:SI DIRFLAG_REG))]\n+   (use (match_dup 4))]\n   \"!TARGET_64BIT\"\n   \"{rep\\;stosl|rep stosd}\"\n   [(set_attr \"type\" \"str\")\n@@ -18652,8 +18620,7 @@\n    (set (mem:BLK (match_dup 3))\n \t(const_int 0))\n    (use (match_operand:SI 2 \"register_operand\" \"a\"))\n-   (use (match_dup 4))\n-   (use (reg:SI DIRFLAG_REG))]\n+   (use (match_dup 4))]\n   \"TARGET_64BIT\"\n   \"{rep\\;stosl|rep stosd}\"\n   [(set_attr \"type\" \"str\")\n@@ -18669,8 +18636,7 @@\n    (set (mem:BLK (match_dup 3))\n \t(const_int 0))\n    (use (match_operand:QI 2 \"register_operand\" \"a\"))\n-   (use (match_dup 4))\n-   (use (reg:SI DIRFLAG_REG))]\n+   (use (match_dup 4))]\n   \"!TARGET_64BIT\"\n   \"{rep\\;stosb|rep stosb}\"\n   [(set_attr \"type\" \"str\")\n@@ -18686,8 +18652,7 @@\n    (set (mem:BLK (match_dup 3))\n \t(const_int 0))\n    (use (match_operand:QI 2 \"register_operand\" \"a\"))\n-   (use (match_dup 4))\n-   (use (reg:SI DIRFLAG_REG))]\n+   (use (match_dup 4))]\n   \"TARGET_64BIT\"\n   \"{rep\\;stosb|rep stosb}\"\n   [(set_attr \"type\" \"str\")\n@@ -18728,7 +18693,6 @@\n      once cc0 is dead.  */\n   align = operands[4];\n \n-  emit_insn (gen_cld ());\n   if (GET_CODE (count) == CONST_INT)\n     {\n       if (INTVAL (count) == 0)\n@@ -18783,7 +18747,6 @@\n \t\t\t       (match_operand 5 \"memory_operand\" \"\")))\n \t      (use (match_operand 2 \"register_operand\" \"\"))\n \t      (use (match_operand:SI 3 \"immediate_operand\" \"\"))\n-\t      (use (reg:SI DIRFLAG_REG))\n \t      (clobber (match_operand 0 \"register_operand\" \"\"))\n \t      (clobber (match_operand 1 \"register_operand\" \"\"))\n \t      (clobber (match_dup 2))])]\n@@ -18796,7 +18759,6 @@\n \t\t    (mem:BLK (match_operand:SI 5 \"register_operand\" \"1\"))))\n    (use (match_operand:SI 6 \"register_operand\" \"2\"))\n    (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n-   (use (reg:SI DIRFLAG_REG))\n    (clobber (match_operand:SI 0 \"register_operand\" \"=S\"))\n    (clobber (match_operand:SI 1 \"register_operand\" \"=D\"))\n    (clobber (match_operand:SI 2 \"register_operand\" \"=c\"))]\n@@ -18812,7 +18774,6 @@\n \t\t    (mem:BLK (match_operand:DI 5 \"register_operand\" \"1\"))))\n    (use (match_operand:DI 6 \"register_operand\" \"2\"))\n    (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n-   (use (reg:SI DIRFLAG_REG))\n    (clobber (match_operand:DI 0 \"register_operand\" \"=S\"))\n    (clobber (match_operand:DI 1 \"register_operand\" \"=D\"))\n    (clobber (match_operand:DI 2 \"register_operand\" \"=c\"))]\n@@ -18833,7 +18794,6 @@\n \t\t  (const_int 0)))\n \t      (use (match_operand:SI 3 \"immediate_operand\" \"\"))\n \t      (use (reg:CC FLAGS_REG))\n-\t      (use (reg:SI DIRFLAG_REG))\n \t      (clobber (match_operand 0 \"register_operand\" \"\"))\n \t      (clobber (match_operand 1 \"register_operand\" \"\"))\n \t      (clobber (match_dup 2))])]\n@@ -18849,7 +18809,6 @@\n \t  (const_int 0)))\n    (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n    (use (reg:CC FLAGS_REG))\n-   (use (reg:SI DIRFLAG_REG))\n    (clobber (match_operand:SI 0 \"register_operand\" \"=S\"))\n    (clobber (match_operand:SI 1 \"register_operand\" \"=D\"))\n    (clobber (match_operand:SI 2 \"register_operand\" \"=c\"))]\n@@ -18868,7 +18827,6 @@\n \t  (const_int 0)))\n    (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n    (use (reg:CC FLAGS_REG))\n-   (use (reg:SI DIRFLAG_REG))\n    (clobber (match_operand:DI 0 \"register_operand\" \"=S\"))\n    (clobber (match_operand:DI 1 \"register_operand\" \"=D\"))\n    (clobber (match_operand:DI 2 \"register_operand\" \"=c\"))]\n@@ -18906,7 +18864,6 @@\n \n (define_expand \"strlenqi_1\"\n   [(parallel [(set (match_operand 0 \"register_operand\" \"\") (match_operand 2 \"\" \"\"))\n-\t      (use (reg:SI DIRFLAG_REG))\n \t      (clobber (match_operand 1 \"register_operand\" \"\"))\n \t      (clobber (reg:CC FLAGS_REG))])]\n   \"\"\n@@ -18918,7 +18875,6 @@\n \t\t    (match_operand:QI 2 \"register_operand\" \"a\")\n \t\t    (match_operand:SI 3 \"immediate_operand\" \"i\")\n \t\t    (match_operand:SI 4 \"register_operand\" \"0\")] UNSPEC_SCAS))\n-   (use (reg:SI DIRFLAG_REG))\n    (clobber (match_operand:SI 1 \"register_operand\" \"=D\"))\n    (clobber (reg:CC FLAGS_REG))]\n   \"!TARGET_64BIT\"\n@@ -18933,7 +18889,6 @@\n \t\t    (match_operand:QI 2 \"register_operand\" \"a\")\n \t\t    (match_operand:DI 3 \"immediate_operand\" \"i\")\n \t\t    (match_operand:DI 4 \"register_operand\" \"0\")] UNSPEC_SCAS))\n-   (use (reg:SI DIRFLAG_REG))\n    (clobber (match_operand:DI 1 \"register_operand\" \"=D\"))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT\"\n@@ -18963,7 +18918,6 @@\n \t\t      (mem:BLK (match_operand 5 \"register_operand\" \"\"))))\n      (use (match_operand 6 \"register_operand\" \"\"))\n      (use (match_operand:SI 3 \"immediate_operand\" \"\"))\n-     (use (reg:SI DIRFLAG_REG))\n      (clobber (match_operand 0 \"register_operand\" \"\"))\n      (clobber (match_operand 1 \"register_operand\" \"\"))\n      (clobber (match_operand 2 \"register_operand\" \"\"))])\n@@ -18981,7 +18935,6 @@\n \t\t      (mem:BLK (match_dup 5))))\n      (use (match_dup 6))\n      (use (match_dup 3))\n-     (use (reg:SI DIRFLAG_REG))\n      (clobber (match_dup 0))\n      (clobber (match_dup 1))\n      (clobber (match_dup 2))])]\n@@ -18998,7 +18951,6 @@\n \t    (const_int 0)))\n      (use (match_operand:SI 3 \"immediate_operand\" \"\"))\n      (use (reg:CC FLAGS_REG))\n-     (use (reg:SI DIRFLAG_REG))\n      (clobber (match_operand 0 \"register_operand\" \"\"))\n      (clobber (match_operand 1 \"register_operand\" \"\"))\n      (clobber (match_operand 2 \"register_operand\" \"\"))])\n@@ -19019,7 +18971,6 @@\n \t    (const_int 0)))\n      (use (match_dup 3))\n      (use (reg:CC FLAGS_REG))\n-     (use (reg:SI DIRFLAG_REG))\n      (clobber (match_dup 0))\n      (clobber (match_dup 1))\n      (clobber (match_dup 2))])]"}, {"sha": "92b784f5b0203f94dec15ce19c963e0e755e41da", "filename": "gcc/config/i386/k6.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90c56b45eba69690eb21bf950a14783fadb48724/gcc%2Fconfig%2Fi386%2Fk6.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90c56b45eba69690eb21bf950a14783fadb48724/gcc%2Fconfig%2Fi386%2Fk6.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fk6.md?ref=90c56b45eba69690eb21bf950a14783fadb48724", "patch": "@@ -80,19 +80,19 @@\n ;; Shift instructions and certain arithmetic are issued only on Integer X.\n (define_insn_reservation \"k6_alux_only\" 1\n \t\t\t (and (eq_attr \"cpu\" \"k6\")\n-\t\t\t      (and (eq_attr \"type\" \"ishift,ishift1,rotate,rotate1,alu1,negnot,cld\")\n+\t\t\t      (and (eq_attr \"type\" \"ishift,ishift1,rotate,rotate1,alu1,negnot\")\n \t\t\t\t   (eq_attr \"memory\" \"none\")))\n \t\t\t \"k6_decode_short,k6_alux\")\n \n (define_insn_reservation \"k6_alux_only_load\" 3\n \t\t\t (and (eq_attr \"cpu\" \"k6\")\n-\t\t\t       (and (eq_attr \"type\" \"ishift,ishift1,rotate,rotate1,alu1,negnot,cld\")\n+\t\t\t       (and (eq_attr \"type\" \"ishift,ishift1,rotate,rotate1,alu1,negnot\")\n \t\t\t\t    (eq_attr \"memory\" \"load\")))\n \t\t\t \"k6_decode_short,k6_load,k6_alux\")\n \n (define_insn_reservation \"k6_alux_only_store\" 3\n \t\t\t (and (eq_attr \"cpu\" \"k6\")\n-\t\t\t       (and (eq_attr \"type\" \"ishift,ishift1,rotate,rotate1,alu1,negnot,cld\")\n+\t\t\t       (and (eq_attr \"type\" \"ishift,ishift1,rotate,rotate1,alu1,negnot\")\n \t\t\t\t    (eq_attr \"memory\" \"store,both,unknown\")))\n \t\t\t \"k6_decode_long,k6_load,k6_alux,k6_store\")\n "}, {"sha": "c2fcf9ec8a119e35c1b013020126e41589153957", "filename": "gcc/config/i386/pentium.md", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90c56b45eba69690eb21bf950a14783fadb48724/gcc%2Fconfig%2Fi386%2Fpentium.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90c56b45eba69690eb21bf950a14783fadb48724/gcc%2Fconfig%2Fi386%2Fpentium.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpentium.md?ref=90c56b45eba69690eb21bf950a14783fadb48724", "patch": "@@ -151,11 +151,6 @@\n        (eq_attr \"type\" \"idiv\"))\n   \"pentium-np+pentium-fp\")\n \n-(define_insn_reservation \"pent_cld\" 2\n-  (and (eq_attr \"cpu\" \"pentium\")\n-       (eq_attr \"type\" \"cld\"))\n-  \"pentium-np*2\")\n-\n ;;  Moves usually have one cycle penalty, but there are exceptions.\n (define_insn_reservation \"pent_fmov\" 1\n   (and (eq_attr \"cpu\" \"pentium\")"}, {"sha": "25de27bde77b22bcb5cedb403ffb61d30a4e7f20", "filename": "gcc/config/i386/ppro.md", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90c56b45eba69690eb21bf950a14783fadb48724/gcc%2Fconfig%2Fi386%2Fppro.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90c56b45eba69690eb21bf950a14783fadb48724/gcc%2Fconfig%2Fi386%2Fppro.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fppro.md?ref=90c56b45eba69690eb21bf950a14783fadb48724", "patch": "@@ -60,8 +60,7 @@\n ;;   This isn't necessary right now because we assume for every\n ;;   instruction that it never blocks a decoder.\n ;; - Figure out where the p0 and p1 reservations come from.  These\n-;;   appear not to be in the manual (e.g. why is cld \"(p0+p1)*2\"\n-;;   better than \"(p0|p1)*4\" ???)\n+;;   appear not to be in the manual\n ;; - Lots more because I'm sure this is still far from optimal :-)\n \n ;; The ppro_idiv and ppro_fdiv automata are used to model issue\n@@ -196,10 +195,6 @@\n \t\t\t\t   (eq_attr \"type\" \"ishift,ishift1,rotate,rotate1\")))\n \t\t\t \"decoder0,p2+p0,p4+p3\")\n \n-(define_insn_reservation \"ppro_cld\" 2\n-\t\t\t (and (eq_attr \"cpu\" \"pentiumpro,generic32\")\n-\t\t\t      (eq_attr \"type\" \"cld\"))\n-\t\t\t \"decoder0,(p0+p1)*2\")\n \n ;; The P6 has a sophisticated branch prediction mechanism to minimize\n ;; latencies due to branching.  In particular, it has a fast way to"}]}