{"sha": "9ee5337dd54630e6f0b2d98dc104a8c05d24384d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWVlNTMzN2RkNTQ2MzBlNmYwYjJkOThkYzEwNGE4YzA1ZDI0Mzg0ZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2014-03-20T11:35:22Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2014-03-20T11:35:22Z"}, "message": "calls.c (store_one_arg): Remove incorrect const qualification on the type of the temporary.\n\n\t* calls.c (store_one_arg): Remove incorrect const qualification on the\n\ttype of the temporary.\n\t* cfgexpand.c (expand_return): Likewise.\n\t* expr.c (expand_constructor): Likewise.\n\t(expand_expr_real_1): Likewise.\n\nFrom-SVN: r208694", "tree": {"sha": "54c489ab22247d4fa7fb01653d3a05e24e36c82e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54c489ab22247d4fa7fb01653d3a05e24e36c82e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ee5337dd54630e6f0b2d98dc104a8c05d24384d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ee5337dd54630e6f0b2d98dc104a8c05d24384d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ee5337dd54630e6f0b2d98dc104a8c05d24384d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ee5337dd54630e6f0b2d98dc104a8c05d24384d/comments", "author": null, "committer": null, "parents": [{"sha": "9964e8304b1ea841583e3aea27fdbc65281e0ed3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9964e8304b1ea841583e3aea27fdbc65281e0ed3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9964e8304b1ea841583e3aea27fdbc65281e0ed3"}], "stats": {"total": 36, "additions": 15, "deletions": 21}, "files": [{"sha": "f0640642d88d92a3c5b9e1df764b40ae2b9d760d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee5337dd54630e6f0b2d98dc104a8c05d24384d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee5337dd54630e6f0b2d98dc104a8c05d24384d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9ee5337dd54630e6f0b2d98dc104a8c05d24384d", "patch": "@@ -1,3 +1,11 @@\n+2014-03-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* calls.c (store_one_arg): Remove incorrect const qualification on the\n+\ttype of the temporary.\n+\t* cfgexpand.c (expand_return): Likewise.\n+\t* expr.c (expand_constructor): Likewise.\n+\t(expand_expr_real_1): Likewise.\n+\n 2014-03-20  Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n \n \t* config/arm/arm.c (arm_dwarf_register_span): Update the element number"}, {"sha": "f0c92ddc0182d3216a90e0dc06e9b3a40bca9a45", "filename": "gcc/calls.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee5337dd54630e6f0b2d98dc104a8c05d24384d/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee5337dd54630e6f0b2d98dc104a8c05d24384d/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=9ee5337dd54630e6f0b2d98dc104a8c05d24384d", "patch": "@@ -4451,11 +4451,8 @@ store_one_arg (struct arg_data *arg, rtx argblock, int flags,\n \n \t      if (save_mode == BLKmode)\n \t\t{\n-\t\t  tree ot = TREE_TYPE (arg->tree_value);\n-\t\t  tree nt = build_qualified_type (ot, (TYPE_QUALS (ot)\n-\t\t\t\t\t\t       | TYPE_QUAL_CONST));\n-\n-\t\t  arg->save_area = assign_temp (nt, 1, 1);\n+\t\t  arg->save_area\n+\t\t    = assign_temp (TREE_TYPE (arg->tree_value), 1, 1);\n \t\t  preserve_temp_slots (arg->save_area);\n \t\t  emit_block_move (validize_mem (arg->save_area), stack_area,\n \t\t\t\t   GEN_INT (arg->locate.size.constant),"}, {"sha": "b7f63602d99dba766d99480149de1b6fd14e8d7a", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee5337dd54630e6f0b2d98dc104a8c05d24384d/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee5337dd54630e6f0b2d98dc104a8c05d24384d/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=9ee5337dd54630e6f0b2d98dc104a8c05d24384d", "patch": "@@ -3105,15 +3105,11 @@ expand_return (tree retval)\n \t   && (REG_P (result_rtl)\n \t       || (GET_CODE (result_rtl) == PARALLEL)))\n     {\n-      /* Calculate the return value into a temporary (usually a pseudo\n-         reg).  */\n-      tree ot = TREE_TYPE (DECL_RESULT (current_function_decl));\n-      tree nt = build_qualified_type (ot, TYPE_QUALS (ot) | TYPE_QUAL_CONST);\n-\n-      val = assign_temp (nt, 0, 1);\n+      /* Compute the return value into a temporary (usually a pseudo reg).  */\n+      val\n+\t= assign_temp (TREE_TYPE (DECL_RESULT (current_function_decl)), 0, 1);\n       val = expand_expr (retval_rhs, val, GET_MODE (val), EXPAND_NORMAL);\n       val = force_not_mem (val);\n-      /* Return the calculated value.  */\n       expand_value_return (val);\n     }\n   else"}, {"sha": "2dcdfc261551ef4ef4aa3eeeef68b2a11d52442d", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee5337dd54630e6f0b2d98dc104a8c05d24384d/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee5337dd54630e6f0b2d98dc104a8c05d24384d/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=9ee5337dd54630e6f0b2d98dc104a8c05d24384d", "patch": "@@ -7867,11 +7867,7 @@ expand_constructor (tree exp, rtx target, enum expand_modifier modifier,\n       if (avoid_temp_mem)\n \treturn NULL_RTX;\n \n-      target\n-\t= assign_temp (build_qualified_type (type, (TYPE_QUALS (type)\n-\t\t\t\t\t\t    | (TREE_READONLY (exp)\n-\t\t\t\t\t\t       * TYPE_QUAL_CONST))),\n-\t\t       TREE_ADDRESSABLE (exp), 1);\n+      target = assign_temp (type, TREE_ADDRESSABLE (exp), 1);\n     }\n \n   store_constructor (exp, target, 0, int_expr_size (exp));\n@@ -10088,10 +10084,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t   and need be, put it there.  */\n \telse if (CONSTANT_P (op0) || (!MEM_P (op0) && must_force_mem))\n \t  {\n-\t    tree nt = build_qualified_type (TREE_TYPE (tem),\n-\t\t\t\t\t    (TYPE_QUALS (TREE_TYPE (tem))\n-\t\t\t\t\t     | TYPE_QUAL_CONST));\n-\t    memloc = assign_temp (nt, 1, 1);\n+\t    memloc = assign_temp (TREE_TYPE (tem), 1, 1);\n \t    emit_move_insn (memloc, op0);\n \t    op0 = memloc;\n \t    mem_attrs_from_type = true;"}]}