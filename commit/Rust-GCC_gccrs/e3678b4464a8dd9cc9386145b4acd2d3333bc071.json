{"sha": "e3678b4464a8dd9cc9386145b4acd2d3333bc071", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM2NzhiNDQ2NGE4ZGQ5Y2M5Mzg2MTQ1YjRhY2QyZDMzMzNiYzA3MQ==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-03-18T16:37:18Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-03-18T16:37:18Z"}, "message": "[ARM][GCC][3/3x]: MVE intrinsics with ternary operands.\n\nThis patch supports following MVE ACLE intrinsics with ternary operands.\n\nvrmlaldavhaxq_s32, vrmlsldavhaq_s32, vrmlsldavhaxq_s32, vaddlvaq_p_s32, vcvtbq_m_f16_f32, vcvtbq_m_f32_f16, vcvttq_m_f16_f32, vcvttq_m_f32_f16, vrev16q_m_s8, vrev32q_m_f16, vrmlaldavhq_p_s32, vrmlaldavhxq_p_s32, vrmlsldavhq_p_s32, vrmlsldavhxq_p_s32, vaddlvaq_p_u32, vrev16q_m_u8, vrmlaldavhq_p_u32, vmvnq_m_n_s16, vorrq_m_n_s16, vqrshrntq_n_s16, vqshrnbq_n_s16, vqshrntq_n_s16, vrshrnbq_n_s16, vrshrntq_n_s16, vshrnbq_n_s16, vshrntq_n_s16, vcmlaq_f16, vcmlaq_rot180_f16, vcmlaq_rot270_f16, vcmlaq_rot90_f16, vfmaq_f16, vfmaq_n_f16, vfmasq_n_f16, vfmsq_f16, vmlaldavaq_s16, vmlaldavaxq_s16, vmlsldavaq_s16, vmlsldavaxq_s16, vabsq_m_f16, vcvtmq_m_s16_f16, vcvtnq_m_s16_f16, vcvtpq_m_s16_f16, vcvtq_m_s16_f16, vdupq_m_n_f16, vmaxnmaq_m_f16, vmaxnmavq_p_f16, vmaxnmvq_p_f16, vminnmaq_m_f16, vminnmavq_p_f16, vminnmvq_p_f16, vmlaldavq_p_s16, vmlaldavxq_p_s16, vmlsldavq_p_s16, vmlsldavxq_p_s16, vmovlbq_m_s8, vmovltq_m_s8, vmovnbq_m_s16, vmovntq_m_s16, vnegq_m_f16, vpselq_f16, vqmovnbq_m_s16, vqmovntq_m_s16, vrev32q_m_s8, vrev64q_m_f16, vrndaq_m_f16, vrndmq_m_f16, vrndnq_m_f16, vrndpq_m_f16, vrndq_m_f16, vrndxq_m_f16, vcmpeqq_m_n_f16, vcmpgeq_m_f16, vcmpgeq_m_n_f16, vcmpgtq_m_f16, vcmpgtq_m_n_f16, vcmpleq_m_f16, vcmpleq_m_n_f16, vcmpltq_m_f16, vcmpltq_m_n_f16, vcmpneq_m_f16, vcmpneq_m_n_f16, vmvnq_m_n_u16, vorrq_m_n_u16, vqrshruntq_n_s16, vqshrunbq_n_s16, vqshruntq_n_s16, vcvtmq_m_u16_f16, vcvtnq_m_u16_f16, vcvtpq_m_u16_f16, vcvtq_m_u16_f16, vqmovunbq_m_s16, vqmovuntq_m_s16, vqrshrntq_n_u16, vqshrnbq_n_u16, vqshrntq_n_u16, vrshrnbq_n_u16, vrshrntq_n_u16, vshrnbq_n_u16, vshrntq_n_u16, vmlaldavaq_u16, vmlaldavaxq_u16, vmlaldavq_p_u16, vmlaldavxq_p_u16, vmovlbq_m_u8, vmovltq_m_u8, vmovnbq_m_u16, vmovntq_m_u16, vqmovnbq_m_u16, vqmovntq_m_u16, vrev32q_m_u8, vmvnq_m_n_s32, vorrq_m_n_s32, vqrshrntq_n_s32, vqshrnbq_n_s32, vqshrntq_n_s32, vrshrnbq_n_s32, vrshrntq_n_s32, vshrnbq_n_s32, vshrntq_n_s32, vcmlaq_f32, vcmlaq_rot180_f32, vcmlaq_rot270_f32, vcmlaq_rot90_f32, vfmaq_f32, vfmaq_n_f32, vfmasq_n_f32, vfmsq_f32, vmlaldavaq_s32, vmlaldavaxq_s32, vmlsldavaq_s32, vmlsldavaxq_s32, vabsq_m_f32, vcvtmq_m_s32_f32, vcvtnq_m_s32_f32, vcvtpq_m_s32_f32, vcvtq_m_s32_f32, vdupq_m_n_f32, vmaxnmaq_m_f32, vmaxnmavq_p_f32, vmaxnmvq_p_f32, vminnmaq_m_f32, vminnmavq_p_f32, vminnmvq_p_f32, vmlaldavq_p_s32, vmlaldavxq_p_s32, vmlsldavq_p_s32, vmlsldavxq_p_s32, vmovlbq_m_s16, vmovltq_m_s16, vmovnbq_m_s32, vmovntq_m_s32, vnegq_m_f32, vpselq_f32, vqmovnbq_m_s32, vqmovntq_m_s32, vrev32q_m_s16, vrev64q_m_f32, vrndaq_m_f32, vrndmq_m_f32, vrndnq_m_f32, vrndpq_m_f32, vrndq_m_f32, vrndxq_m_f32, vcmpeqq_m_n_f32, vcmpgeq_m_f32, vcmpgeq_m_n_f32, vcmpgtq_m_f32, vcmpgtq_m_n_f32, vcmpleq_m_f32, vcmpleq_m_n_f32, vcmpltq_m_f32, vcmpltq_m_n_f32, vcmpneq_m_f32, vcmpneq_m_n_f32, vmvnq_m_n_u32, vorrq_m_n_u32, vqrshruntq_n_s32, vqshrunbq_n_s32, vqshruntq_n_s32, vcvtmq_m_u32_f32, vcvtnq_m_u32_f32, vcvtpq_m_u32_f32, vcvtq_m_u32_f32, vqmovunbq_m_s32, vqmovuntq_m_s32, vqrshrntq_n_u32, vqshrnbq_n_u32, vqshrntq_n_u32, vrshrnbq_n_u32, vrshrntq_n_u32, vshrnbq_n_u32, vshrntq_n_u32, vmlaldavaq_u32, vmlaldavaxq_u32, vmlaldavq_p_u32, vmlaldavxq_p_u32, vmovlbq_m_u16, vmovltq_m_u16, vmovnbq_m_u32, vmovntq_m_u32, vqmovnbq_m_u32, vqmovntq_m_u32, vrev32q_m_u16.\n\nPlease refer to M-profile Vector Extension (MVE) intrinsics [1]  for more details.\n[1] https://developer.arm.com/architectures/instruction-sets/simd-isas/helium/mve-intrinsics\n\n2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* config/arm/arm_mve.h (vrmlaldavhaxq_s32): Define macro.\n\t(vrmlsldavhaq_s32): Likewise.\n\t(vrmlsldavhaxq_s32): Likewise.\n\t(vaddlvaq_p_s32): Likewise.\n\t(vcvtbq_m_f16_f32): Likewise.\n\t(vcvtbq_m_f32_f16): Likewise.\n\t(vcvttq_m_f16_f32): Likewise.\n\t(vcvttq_m_f32_f16): Likewise.\n\t(vrev16q_m_s8): Likewise.\n\t(vrev32q_m_f16): Likewise.\n\t(vrmlaldavhq_p_s32): Likewise.\n\t(vrmlaldavhxq_p_s32): Likewise.\n\t(vrmlsldavhq_p_s32): Likewise.\n\t(vrmlsldavhxq_p_s32): Likewise.\n\t(vaddlvaq_p_u32): Likewise.\n\t(vrev16q_m_u8): Likewise.\n\t(vrmlaldavhq_p_u32): Likewise.\n\t(vmvnq_m_n_s16): Likewise.\n\t(vorrq_m_n_s16): Likewise.\n\t(vqrshrntq_n_s16): Likewise.\n\t(vqshrnbq_n_s16): Likewise.\n\t(vqshrntq_n_s16): Likewise.\n\t(vrshrnbq_n_s16): Likewise.\n\t(vrshrntq_n_s16): Likewise.\n\t(vshrnbq_n_s16): Likewise.\n\t(vshrntq_n_s16): Likewise.\n\t(vcmlaq_f16): Likewise.\n\t(vcmlaq_rot180_f16): Likewise.\n\t(vcmlaq_rot270_f16): Likewise.\n\t(vcmlaq_rot90_f16): Likewise.\n\t(vfmaq_f16): Likewise.\n\t(vfmaq_n_f16): Likewise.\n\t(vfmasq_n_f16): Likewise.\n\t(vfmsq_f16): Likewise.\n\t(vmlaldavaq_s16): Likewise.\n\t(vmlaldavaxq_s16): Likewise.\n\t(vmlsldavaq_s16): Likewise.\n\t(vmlsldavaxq_s16): Likewise.\n\t(vabsq_m_f16): Likewise.\n\t(vcvtmq_m_s16_f16): Likewise.\n\t(vcvtnq_m_s16_f16): Likewise.\n\t(vcvtpq_m_s16_f16): Likewise.\n\t(vcvtq_m_s16_f16): Likewise.\n\t(vdupq_m_n_f16): Likewise.\n\t(vmaxnmaq_m_f16): Likewise.\n\t(vmaxnmavq_p_f16): Likewise.\n\t(vmaxnmvq_p_f16): Likewise.\n\t(vminnmaq_m_f16): Likewise.\n\t(vminnmavq_p_f16): Likewise.\n\t(vminnmvq_p_f16): Likewise.\n\t(vmlaldavq_p_s16): Likewise.\n\t(vmlaldavxq_p_s16): Likewise.\n\t(vmlsldavq_p_s16): Likewise.\n\t(vmlsldavxq_p_s16): Likewise.\n\t(vmovlbq_m_s8): Likewise.\n\t(vmovltq_m_s8): Likewise.\n\t(vmovnbq_m_s16): Likewise.\n\t(vmovntq_m_s16): Likewise.\n\t(vnegq_m_f16): Likewise.\n\t(vpselq_f16): Likewise.\n\t(vqmovnbq_m_s16): Likewise.\n\t(vqmovntq_m_s16): Likewise.\n\t(vrev32q_m_s8): Likewise.\n\t(vrev64q_m_f16): Likewise.\n\t(vrndaq_m_f16): Likewise.\n\t(vrndmq_m_f16): Likewise.\n\t(vrndnq_m_f16): Likewise.\n\t(vrndpq_m_f16): Likewise.\n\t(vrndq_m_f16): Likewise.\n\t(vrndxq_m_f16): Likewise.\n\t(vcmpeqq_m_n_f16): Likewise.\n\t(vcmpgeq_m_f16): Likewise.\n\t(vcmpgeq_m_n_f16): Likewise.\n\t(vcmpgtq_m_f16): Likewise.\n\t(vcmpgtq_m_n_f16): Likewise.\n\t(vcmpleq_m_f16): Likewise.\n\t(vcmpleq_m_n_f16): Likewise.\n\t(vcmpltq_m_f16): Likewise.\n\t(vcmpltq_m_n_f16): Likewise.\n\t(vcmpneq_m_f16): Likewise.\n\t(vcmpneq_m_n_f16): Likewise.\n\t(vmvnq_m_n_u16): Likewise.\n\t(vorrq_m_n_u16): Likewise.\n\t(vqrshruntq_n_s16): Likewise.\n\t(vqshrunbq_n_s16): Likewise.\n\t(vqshruntq_n_s16): Likewise.\n\t(vcvtmq_m_u16_f16): Likewise.\n\t(vcvtnq_m_u16_f16): Likewise.\n\t(vcvtpq_m_u16_f16): Likewise.\n\t(vcvtq_m_u16_f16): Likewise.\n\t(vqmovunbq_m_s16): Likewise.\n\t(vqmovuntq_m_s16): Likewise.\n\t(vqrshrntq_n_u16): Likewise.\n\t(vqshrnbq_n_u16): Likewise.\n\t(vqshrntq_n_u16): Likewise.\n\t(vrshrnbq_n_u16): Likewise.\n\t(vrshrntq_n_u16): Likewise.\n\t(vshrnbq_n_u16): Likewise.\n\t(vshrntq_n_u16): Likewise.\n\t(vmlaldavaq_u16): Likewise.\n\t(vmlaldavaxq_u16): Likewise.\n\t(vmlaldavq_p_u16): Likewise.\n\t(vmlaldavxq_p_u16): Likewise.\n\t(vmovlbq_m_u8): Likewise.\n\t(vmovltq_m_u8): Likewise.\n\t(vmovnbq_m_u16): Likewise.\n\t(vmovntq_m_u16): Likewise.\n\t(vqmovnbq_m_u16): Likewise.\n\t(vqmovntq_m_u16): Likewise.\n\t(vrev32q_m_u8): Likewise.\n\t(vmvnq_m_n_s32): Likewise.\n\t(vorrq_m_n_s32): Likewise.\n\t(vqrshrntq_n_s32): Likewise.\n\t(vqshrnbq_n_s32): Likewise.\n\t(vqshrntq_n_s32): Likewise.\n\t(vrshrnbq_n_s32): Likewise.\n\t(vrshrntq_n_s32): Likewise.\n\t(vshrnbq_n_s32): Likewise.\n\t(vshrntq_n_s32): Likewise.\n\t(vcmlaq_f32): Likewise.\n\t(vcmlaq_rot180_f32): Likewise.\n\t(vcmlaq_rot270_f32): Likewise.\n\t(vcmlaq_rot90_f32): Likewise.\n\t(vfmaq_f32): Likewise.\n\t(vfmaq_n_f32): Likewise.\n\t(vfmasq_n_f32): Likewise.\n\t(vfmsq_f32): Likewise.\n\t(vmlaldavaq_s32): Likewise.\n\t(vmlaldavaxq_s32): Likewise.\n\t(vmlsldavaq_s32): Likewise.\n\t(vmlsldavaxq_s32): Likewise.\n\t(vabsq_m_f32): Likewise.\n\t(vcvtmq_m_s32_f32): Likewise.\n\t(vcvtnq_m_s32_f32): Likewise.\n\t(vcvtpq_m_s32_f32): Likewise.\n\t(vcvtq_m_s32_f32): Likewise.\n\t(vdupq_m_n_f32): Likewise.\n\t(vmaxnmaq_m_f32): Likewise.\n\t(vmaxnmavq_p_f32): Likewise.\n\t(vmaxnmvq_p_f32): Likewise.\n\t(vminnmaq_m_f32): Likewise.\n\t(vminnmavq_p_f32): Likewise.\n\t(vminnmvq_p_f32): Likewise.\n\t(vmlaldavq_p_s32): Likewise.\n\t(vmlaldavxq_p_s32): Likewise.\n\t(vmlsldavq_p_s32): Likewise.\n\t(vmlsldavxq_p_s32): Likewise.\n\t(vmovlbq_m_s16): Likewise.\n\t(vmovltq_m_s16): Likewise.\n\t(vmovnbq_m_s32): Likewise.\n\t(vmovntq_m_s32): Likewise.\n\t(vnegq_m_f32): Likewise.\n\t(vpselq_f32): Likewise.\n\t(vqmovnbq_m_s32): Likewise.\n\t(vqmovntq_m_s32): Likewise.\n\t(vrev32q_m_s16): Likewise.\n\t(vrev64q_m_f32): Likewise.\n\t(vrndaq_m_f32): Likewise.\n\t(vrndmq_m_f32): Likewise.\n\t(vrndnq_m_f32): Likewise.\n\t(vrndpq_m_f32): Likewise.\n\t(vrndq_m_f32): Likewise.\n\t(vrndxq_m_f32): Likewise.\n\t(vcmpeqq_m_n_f32): Likewise.\n\t(vcmpgeq_m_f32): Likewise.\n\t(vcmpgeq_m_n_f32): Likewise.\n\t(vcmpgtq_m_f32): Likewise.\n\t(vcmpgtq_m_n_f32): Likewise.\n\t(vcmpleq_m_f32): Likewise.\n\t(vcmpleq_m_n_f32): Likewise.\n\t(vcmpltq_m_f32): Likewise.\n\t(vcmpltq_m_n_f32): Likewise.\n\t(vcmpneq_m_f32): Likewise.\n\t(vcmpneq_m_n_f32): Likewise.\n\t(vmvnq_m_n_u32): Likewise.\n\t(vorrq_m_n_u32): Likewise.\n\t(vqrshruntq_n_s32): Likewise.\n\t(vqshrunbq_n_s32): Likewise.\n\t(vqshruntq_n_s32): Likewise.\n\t(vcvtmq_m_u32_f32): Likewise.\n\t(vcvtnq_m_u32_f32): Likewise.\n\t(vcvtpq_m_u32_f32): Likewise.\n\t(vcvtq_m_u32_f32): Likewise.\n\t(vqmovunbq_m_s32): Likewise.\n\t(vqmovuntq_m_s32): Likewise.\n\t(vqrshrntq_n_u32): Likewise.\n\t(vqshrnbq_n_u32): Likewise.\n\t(vqshrntq_n_u32): Likewise.\n\t(vrshrnbq_n_u32): Likewise.\n\t(vrshrntq_n_u32): Likewise.\n\t(vshrnbq_n_u32): Likewise.\n\t(vshrntq_n_u32): Likewise.\n\t(vmlaldavaq_u32): Likewise.\n\t(vmlaldavaxq_u32): Likewise.\n\t(vmlaldavq_p_u32): Likewise.\n\t(vmlaldavxq_p_u32): Likewise.\n\t(vmovlbq_m_u16): Likewise.\n\t(vmovltq_m_u16): Likewise.\n\t(vmovnbq_m_u32): Likewise.\n\t(vmovntq_m_u32): Likewise.\n\t(vqmovnbq_m_u32): Likewise.\n\t(vqmovntq_m_u32): Likewise.\n\t(vrev32q_m_u16): Likewise.\n\t(__arm_vrmlaldavhaxq_s32): Define intrinsic.\n\t(__arm_vrmlsldavhaq_s32): Likewise.\n\t(__arm_vrmlsldavhaxq_s32): Likewise.\n\t(__arm_vaddlvaq_p_s32): Likewise.\n\t(__arm_vrev16q_m_s8): Likewise.\n\t(__arm_vrmlaldavhq_p_s32): Likewise.\n\t(__arm_vrmlaldavhxq_p_s32): Likewise.\n\t(__arm_vrmlsldavhq_p_s32): Likewise.\n\t(__arm_vrmlsldavhxq_p_s32): Likewise.\n\t(__arm_vaddlvaq_p_u32): Likewise.\n\t(__arm_vrev16q_m_u8): Likewise.\n\t(__arm_vrmlaldavhq_p_u32): Likewise.\n\t(__arm_vmvnq_m_n_s16): Likewise.\n\t(__arm_vorrq_m_n_s16): Likewise.\n\t(__arm_vqrshrntq_n_s16): Likewise.\n\t(__arm_vqshrnbq_n_s16): Likewise.\n\t(__arm_vqshrntq_n_s16): Likewise.\n\t(__arm_vrshrnbq_n_s16): Likewise.\n\t(__arm_vrshrntq_n_s16): Likewise.\n\t(__arm_vshrnbq_n_s16): Likewise.\n\t(__arm_vshrntq_n_s16): Likewise.\n\t(__arm_vmlaldavaq_s16): Likewise.\n\t(__arm_vmlaldavaxq_s16): Likewise.\n\t(__arm_vmlsldavaq_s16): Likewise.\n\t(__arm_vmlsldavaxq_s16): Likewise.\n\t(__arm_vmlaldavq_p_s16): Likewise.\n\t(__arm_vmlaldavxq_p_s16): Likewise.\n\t(__arm_vmlsldavq_p_s16): Likewise.\n\t(__arm_vmlsldavxq_p_s16): Likewise.\n\t(__arm_vmovlbq_m_s8): Likewise.\n\t(__arm_vmovltq_m_s8): Likewise.\n\t(__arm_vmovnbq_m_s16): Likewise.\n\t(__arm_vmovntq_m_s16): Likewise.\n\t(__arm_vqmovnbq_m_s16): Likewise.\n\t(__arm_vqmovntq_m_s16): Likewise.\n\t(__arm_vrev32q_m_s8): Likewise.\n\t(__arm_vmvnq_m_n_u16): Likewise.\n\t(__arm_vorrq_m_n_u16): Likewise.\n\t(__arm_vqrshruntq_n_s16): Likewise.\n\t(__arm_vqshrunbq_n_s16): Likewise.\n\t(__arm_vqshruntq_n_s16): Likewise.\n\t(__arm_vqmovunbq_m_s16): Likewise.\n\t(__arm_vqmovuntq_m_s16): Likewise.\n\t(__arm_vqrshrntq_n_u16): Likewise.\n\t(__arm_vqshrnbq_n_u16): Likewise.\n\t(__arm_vqshrntq_n_u16): Likewise.\n\t(__arm_vrshrnbq_n_u16): Likewise.\n\t(__arm_vrshrntq_n_u16): Likewise.\n\t(__arm_vshrnbq_n_u16): Likewise.\n\t(__arm_vshrntq_n_u16): Likewise.\n\t(__arm_vmlaldavaq_u16): Likewise.\n\t(__arm_vmlaldavaxq_u16): Likewise.\n\t(__arm_vmlaldavq_p_u16): Likewise.\n\t(__arm_vmlaldavxq_p_u16): Likewise.\n\t(__arm_vmovlbq_m_u8): Likewise.\n\t(__arm_vmovltq_m_u8): Likewise.\n\t(__arm_vmovnbq_m_u16): Likewise.\n\t(__arm_vmovntq_m_u16): Likewise.\n\t(__arm_vqmovnbq_m_u16): Likewise.\n\t(__arm_vqmovntq_m_u16): Likewise.\n\t(__arm_vrev32q_m_u8): Likewise.\n\t(__arm_vmvnq_m_n_s32): Likewise.\n\t(__arm_vorrq_m_n_s32): Likewise.\n\t(__arm_vqrshrntq_n_s32): Likewise.\n\t(__arm_vqshrnbq_n_s32): Likewise.\n\t(__arm_vqshrntq_n_s32): Likewise.\n\t(__arm_vrshrnbq_n_s32): Likewise.\n\t(__arm_vrshrntq_n_s32): Likewise.\n\t(__arm_vshrnbq_n_s32): Likewise.\n\t(__arm_vshrntq_n_s32): Likewise.\n\t(__arm_vmlaldavaq_s32): Likewise.\n\t(__arm_vmlaldavaxq_s32): Likewise.\n\t(__arm_vmlsldavaq_s32): Likewise.\n\t(__arm_vmlsldavaxq_s32): Likewise.\n\t(__arm_vmlaldavq_p_s32): Likewise.\n\t(__arm_vmlaldavxq_p_s32): Likewise.\n\t(__arm_vmlsldavq_p_s32): Likewise.\n\t(__arm_vmlsldavxq_p_s32): Likewise.\n\t(__arm_vmovlbq_m_s16): Likewise.\n\t(__arm_vmovltq_m_s16): Likewise.\n\t(__arm_vmovnbq_m_s32): Likewise.\n\t(__arm_vmovntq_m_s32): Likewise.\n\t(__arm_vqmovnbq_m_s32): Likewise.\n\t(__arm_vqmovntq_m_s32): Likewise.\n\t(__arm_vrev32q_m_s16): Likewise.\n\t(__arm_vmvnq_m_n_u32): Likewise.\n\t(__arm_vorrq_m_n_u32): Likewise.\n\t(__arm_vqrshruntq_n_s32): Likewise.\n\t(__arm_vqshrunbq_n_s32): Likewise.\n\t(__arm_vqshruntq_n_s32): Likewise.\n\t(__arm_vqmovunbq_m_s32): Likewise.\n\t(__arm_vqmovuntq_m_s32): Likewise.\n\t(__arm_vqrshrntq_n_u32): Likewise.\n\t(__arm_vqshrnbq_n_u32): Likewise.\n\t(__arm_vqshrntq_n_u32): Likewise.\n\t(__arm_vrshrnbq_n_u32): Likewise.\n\t(__arm_vrshrntq_n_u32): Likewise.\n\t(__arm_vshrnbq_n_u32): Likewise.\n\t(__arm_vshrntq_n_u32): Likewise.\n\t(__arm_vmlaldavaq_u32): Likewise.\n\t(__arm_vmlaldavaxq_u32): Likewise.\n\t(__arm_vmlaldavq_p_u32): Likewise.\n\t(__arm_vmlaldavxq_p_u32): Likewise.\n\t(__arm_vmovlbq_m_u16): Likewise.\n\t(__arm_vmovltq_m_u16): Likewise.\n\t(__arm_vmovnbq_m_u32): Likewise.\n\t(__arm_vmovntq_m_u32): Likewise.\n\t(__arm_vqmovnbq_m_u32): Likewise.\n\t(__arm_vqmovntq_m_u32): Likewise.\n\t(__arm_vrev32q_m_u16): Likewise.\n\t(__arm_vcvtbq_m_f16_f32): Likewise.\n\t(__arm_vcvtbq_m_f32_f16): Likewise.\n\t(__arm_vcvttq_m_f16_f32): Likewise.\n\t(__arm_vcvttq_m_f32_f16): Likewise.\n\t(__arm_vrev32q_m_f16): Likewise.\n\t(__arm_vcmlaq_f16): Likewise.\n\t(__arm_vcmlaq_rot180_f16): Likewise.\n\t(__arm_vcmlaq_rot270_f16): Likewise.\n\t(__arm_vcmlaq_rot90_f16): Likewise.\n\t(__arm_vfmaq_f16): Likewise.\n\t(__arm_vfmaq_n_f16): Likewise.\n\t(__arm_vfmasq_n_f16): Likewise.\n\t(__arm_vfmsq_f16): Likewise.\n\t(__arm_vabsq_m_f16): Likewise.\n\t(__arm_vcvtmq_m_s16_f16): Likewise.\n\t(__arm_vcvtnq_m_s16_f16): Likewise.\n\t(__arm_vcvtpq_m_s16_f16): Likewise.\n\t(__arm_vcvtq_m_s16_f16): Likewise.\n\t(__arm_vdupq_m_n_f16): Likewise.\n\t(__arm_vmaxnmaq_m_f16): Likewise.\n\t(__arm_vmaxnmavq_p_f16): Likewise.\n\t(__arm_vmaxnmvq_p_f16): Likewise.\n\t(__arm_vminnmaq_m_f16): Likewise.\n\t(__arm_vminnmavq_p_f16): Likewise.\n\t(__arm_vminnmvq_p_f16): Likewise.\n\t(__arm_vnegq_m_f16): Likewise.\n\t(__arm_vpselq_f16): Likewise.\n\t(__arm_vrev64q_m_f16): Likewise.\n\t(__arm_vrndaq_m_f16): Likewise.\n\t(__arm_vrndmq_m_f16): Likewise.\n\t(__arm_vrndnq_m_f16): Likewise.\n\t(__arm_vrndpq_m_f16): Likewise.\n\t(__arm_vrndq_m_f16): Likewise.\n\t(__arm_vrndxq_m_f16): Likewise.\n\t(__arm_vcmpeqq_m_n_f16): Likewise.\n\t(__arm_vcmpgeq_m_f16): Likewise.\n\t(__arm_vcmpgeq_m_n_f16): Likewise.\n\t(__arm_vcmpgtq_m_f16): Likewise.\n\t(__arm_vcmpgtq_m_n_f16): Likewise.\n\t(__arm_vcmpleq_m_f16): Likewise.\n\t(__arm_vcmpleq_m_n_f16): Likewise.\n\t(__arm_vcmpltq_m_f16): Likewise.\n\t(__arm_vcmpltq_m_n_f16): Likewise.\n\t(__arm_vcmpneq_m_f16): Likewise.\n\t(__arm_vcmpneq_m_n_f16): Likewise.\n\t(__arm_vcvtmq_m_u16_f16): Likewise.\n\t(__arm_vcvtnq_m_u16_f16): Likewise.\n\t(__arm_vcvtpq_m_u16_f16): Likewise.\n\t(__arm_vcvtq_m_u16_f16): Likewise.\n\t(__arm_vcmlaq_f32): Likewise.\n\t(__arm_vcmlaq_rot180_f32): Likewise.\n\t(__arm_vcmlaq_rot270_f32): Likewise.\n\t(__arm_vcmlaq_rot90_f32): Likewise.\n\t(__arm_vfmaq_f32): Likewise.\n\t(__arm_vfmaq_n_f32): Likewise.\n\t(__arm_vfmasq_n_f32): Likewise.\n\t(__arm_vfmsq_f32): Likewise.\n\t(__arm_vabsq_m_f32): Likewise.\n\t(__arm_vcvtmq_m_s32_f32): Likewise.\n\t(__arm_vcvtnq_m_s32_f32): Likewise.\n\t(__arm_vcvtpq_m_s32_f32): Likewise.\n\t(__arm_vcvtq_m_s32_f32): Likewise.\n\t(__arm_vdupq_m_n_f32): Likewise.\n\t(__arm_vmaxnmaq_m_f32): Likewise.\n\t(__arm_vmaxnmavq_p_f32): Likewise.\n\t(__arm_vmaxnmvq_p_f32): Likewise.\n\t(__arm_vminnmaq_m_f32): Likewise.\n\t(__arm_vminnmavq_p_f32): Likewise.\n\t(__arm_vminnmvq_p_f32): Likewise.\n\t(__arm_vnegq_m_f32): Likewise.\n\t(__arm_vpselq_f32): Likewise.\n\t(__arm_vrev64q_m_f32): Likewise.\n\t(__arm_vrndaq_m_f32): Likewise.\n\t(__arm_vrndmq_m_f32): Likewise.\n\t(__arm_vrndnq_m_f32): Likewise.\n\t(__arm_vrndpq_m_f32): Likewise.\n\t(__arm_vrndq_m_f32): Likewise.\n\t(__arm_vrndxq_m_f32): Likewise.\n\t(__arm_vcmpeqq_m_n_f32): Likewise.\n\t(__arm_vcmpgeq_m_f32): Likewise.\n\t(__arm_vcmpgeq_m_n_f32): Likewise.\n\t(__arm_vcmpgtq_m_f32): Likewise.\n\t(__arm_vcmpgtq_m_n_f32): Likewise.\n\t(__arm_vcmpleq_m_f32): Likewise.\n\t(__arm_vcmpleq_m_n_f32): Likewise.\n\t(__arm_vcmpltq_m_f32): Likewise.\n\t(__arm_vcmpltq_m_n_f32): Likewise.\n\t(__arm_vcmpneq_m_f32): Likewise.\n\t(__arm_vcmpneq_m_n_f32): Likewise.\n\t(__arm_vcvtmq_m_u32_f32): Likewise.\n\t(__arm_vcvtnq_m_u32_f32): Likewise.\n\t(__arm_vcvtpq_m_u32_f32): Likewise.\n\t(__arm_vcvtq_m_u32_f32): Likewise.\n\t(vcvtq_m): Define polymorphic variant.\n\t(vabsq_m): Likewise.\n\t(vcmlaq): Likewise.\n\t(vcmlaq_rot180): Likewise.\n\t(vcmlaq_rot270): Likewise.\n\t(vcmlaq_rot90): Likewise.\n\t(vcmpeqq_m_n): Likewise.\n\t(vcmpgeq_m_n): Likewise.\n\t(vrndxq_m): Likewise.\n\t(vrndq_m): Likewise.\n\t(vrndpq_m): Likewise.\n\t(vcmpgtq_m_n): Likewise.\n\t(vcmpgtq_m): Likewise.\n\t(vcmpleq_m): Likewise.\n\t(vcmpleq_m_n): Likewise.\n\t(vcmpltq_m_n): Likewise.\n\t(vcmpltq_m): Likewise.\n\t(vcmpneq_m): Likewise.\n\t(vcmpneq_m_n): Likewise.\n\t(vcvtbq_m): Likewise.\n\t(vcvttq_m): Likewise.\n\t(vcvtmq_m): Likewise.\n\t(vcvtnq_m): Likewise.\n\t(vcvtpq_m): Likewise.\n\t(vdupq_m_n): Likewise.\n\t(vfmaq_n): Likewise.\n\t(vfmaq): Likewise.\n\t(vfmasq_n): Likewise.\n\t(vfmsq): Likewise.\n\t(vmaxnmaq_m): Likewise.\n\t(vmaxnmavq_m): Likewise.\n\t(vmaxnmvq_m): Likewise.\n\t(vmaxnmavq_p): Likewise.\n\t(vmaxnmvq_p): Likewise.\n\t(vminnmaq_m): Likewise.\n\t(vminnmavq_p): Likewise.\n\t(vminnmvq_p): Likewise.\n\t(vrndnq_m): Likewise.\n\t(vrndaq_m): Likewise.\n\t(vrndmq_m): Likewise.\n\t(vrev64q_m): Likewise.\n\t(vrev32q_m): Likewise.\n\t(vpselq): Likewise.\n\t(vnegq_m): Likewise.\n\t(vcmpgeq_m): Likewise.\n\t(vshrntq_n): Likewise.\n\t(vrshrntq_n): Likewise.\n\t(vmovlbq_m): Likewise.\n\t(vmovnbq_m): Likewise.\n\t(vmovntq_m): Likewise.\n\t(vmvnq_m_n): Likewise.\n\t(vmvnq_m): Likewise.\n\t(vshrnbq_n): Likewise.\n\t(vrshrnbq_n): Likewise.\n\t(vqshruntq_n): Likewise.\n\t(vrev16q_m): Likewise.\n\t(vqshrunbq_n): Likewise.\n\t(vqshrntq_n): Likewise.\n\t(vqrshruntq_n): Likewise.\n\t(vqrshrntq_n): Likewise.\n\t(vqshrnbq_n): Likewise.\n\t(vqmovuntq_m): Likewise.\n\t(vqmovntq_m): Likewise.\n\t(vqmovnbq_m): Likewise.\n\t(vorrq_m_n): Likewise.\n\t(vmovltq_m): Likewise.\n\t(vqmovunbq_m): Likewise.\n\t(vaddlvaq_p): Likewise.\n\t(vmlaldavaq): Likewise.\n\t(vmlaldavaxq): Likewise.\n\t(vmlaldavq_p): Likewise.\n\t(vmlaldavxq_p): Likewise.\n\t(vmlsldavaq): Likewise.\n\t(vmlsldavaxq): Likewise.\n\t(vmlsldavq_p): Likewise.\n\t(vmlsldavxq_p): Likewise.\n\t(vrmlaldavhaxq): Likewise.\n\t(vrmlaldavhq_p): Likewise.\n\t(vrmlaldavhxq_p): Likewise.\n\t(vrmlsldavhaq): Likewise.\n\t(vrmlsldavhaxq): Likewise.\n\t(vrmlsldavhq_p): Likewise.\n\t(vrmlsldavhxq_p): Likewise.\n\t* config/arm/arm_mve_builtins.def (TERNOP_NONE_NONE_IMM_UNONE): Use\n\tbuiltin qualifier.\n\t(TERNOP_NONE_NONE_NONE_IMM): Likewise.\n\t(TERNOP_NONE_NONE_NONE_NONE): Likewise.\n\t(TERNOP_NONE_NONE_NONE_UNONE): Likewise.\n\t(TERNOP_UNONE_NONE_NONE_UNONE): Likewise.\n\t(TERNOP_UNONE_UNONE_IMM_UNONE): Likewise.\n\t(TERNOP_UNONE_UNONE_NONE_IMM): Likewise.\n\t(TERNOP_UNONE_UNONE_NONE_UNONE): Likewise.\n\t(TERNOP_UNONE_UNONE_UNONE_IMM): Likewise.\n\t(TERNOP_UNONE_UNONE_UNONE_UNONE): Likewise.\n\t* config/arm/mve.md (MVE_constraint3): Define mode attribute iterator.\n\t(MVE_pred3): Likewise.\n\t(MVE_constraint1): Likewise.\n\t(MVE_pred1): Likewise.\n\t(VMLALDAVQ_P): Define iterator.\n\t(VQMOVNBQ_M): Likewise.\n\t(VMOVLTQ_M): Likewise.\n\t(VMOVNBQ_M): Likewise.\n\t(VRSHRNTQ_N): Likewise.\n\t(VORRQ_M_N): Likewise.\n\t(VREV32Q_M): Likewise.\n\t(VREV16Q_M): Likewise.\n\t(VQRSHRNTQ_N): Likewise.\n\t(VMOVNTQ_M): Likewise.\n\t(VMOVLBQ_M): Likewise.\n\t(VMLALDAVAQ): Likewise.\n\t(VQSHRNBQ_N): Likewise.\n\t(VSHRNBQ_N): Likewise.\n\t(VRSHRNBQ_N): Likewise.\n\t(VMLALDAVXQ_P): Likewise.\n\t(VQMOVNTQ_M): Likewise.\n\t(VMVNQ_M_N): Likewise.\n\t(VQSHRNTQ_N): Likewise.\n\t(VMLALDAVAXQ): Likewise.\n\t(VSHRNTQ_N): Likewise.\n\t(VCVTMQ_M): Likewise.\n\t(VCVTNQ_M): Likewise.\n\t(VCVTPQ_M): Likewise.\n\t(VCVTQ_M_N_FROM_F): Likewise.\n\t(VCVTQ_M_FROM_F): Likewise.\n\t(VRMLALDAVHQ_P): Likewise.\n\t(VADDLVAQ_P): Likewise.\n\t(mve_vrndq_m_f<mode>): Define RTL pattern.\n\t(mve_vabsq_m_f<mode>): Likewise.\n\t(mve_vaddlvaq_p_<supf>v4si): Likewise.\n\t(mve_vcmlaq_f<mode>): Likewise.\n\t(mve_vcmlaq_rot180_f<mode>): Likewise.\n\t(mve_vcmlaq_rot270_f<mode>): Likewise.\n\t(mve_vcmlaq_rot90_f<mode>): Likewise.\n\t(mve_vcmpeqq_m_n_f<mode>): Likewise.\n\t(mve_vcmpgeq_m_f<mode>): Likewise.\n\t(mve_vcmpgeq_m_n_f<mode>): Likewise.\n\t(mve_vcmpgtq_m_f<mode>): Likewise.\n\t(mve_vcmpgtq_m_n_f<mode>): Likewise.\n\t(mve_vcmpleq_m_f<mode>): Likewise.\n\t(mve_vcmpleq_m_n_f<mode>): Likewise.\n\t(mve_vcmpltq_m_f<mode>): Likewise.\n\t(mve_vcmpltq_m_n_f<mode>): Likewise.\n\t(mve_vcmpneq_m_f<mode>): Likewise.\n\t(mve_vcmpneq_m_n_f<mode>): Likewise.\n\t(mve_vcvtbq_m_f16_f32v8hf): Likewise.\n\t(mve_vcvtbq_m_f32_f16v4sf): Likewise.\n\t(mve_vcvttq_m_f16_f32v8hf): Likewise.\n\t(mve_vcvttq_m_f32_f16v4sf): Likewise.\n\t(mve_vdupq_m_n_f<mode>): Likewise.\n\t(mve_vfmaq_f<mode>): Likewise.\n\t(mve_vfmaq_n_f<mode>): Likewise.\n\t(mve_vfmasq_n_f<mode>): Likewise.\n\t(mve_vfmsq_f<mode>): Likewise.\n\t(mve_vmaxnmaq_m_f<mode>): Likewise.\n\t(mve_vmaxnmavq_p_f<mode>): Likewise.\n\t(mve_vmaxnmvq_p_f<mode>): Likewise.\n\t(mve_vminnmaq_m_f<mode>): Likewise.\n\t(mve_vminnmavq_p_f<mode>): Likewise.\n\t(mve_vminnmvq_p_f<mode>): Likewise.\n\t(mve_vmlaldavaq_<supf><mode>): Likewise.\n\t(mve_vmlaldavaxq_<supf><mode>): Likewise.\n\t(mve_vmlaldavq_p_<supf><mode>): Likewise.\n\t(mve_vmlaldavxq_p_<supf><mode>): Likewise.\n\t(mve_vmlsldavaq_s<mode>): Likewise.\n\t(mve_vmlsldavaxq_s<mode>): Likewise.\n\t(mve_vmlsldavq_p_s<mode>): Likewise.\n\t(mve_vmlsldavxq_p_s<mode>): Likewise.\n\t(mve_vmovlbq_m_<supf><mode>): Likewise.\n\t(mve_vmovltq_m_<supf><mode>): Likewise.\n\t(mve_vmovnbq_m_<supf><mode>): Likewise.\n\t(mve_vmovntq_m_<supf><mode>): Likewise.\n\t(mve_vmvnq_m_n_<supf><mode>): Likewise.\n\t(mve_vnegq_m_f<mode>): Likewise.\n\t(mve_vorrq_m_n_<supf><mode>): Likewise.\n\t(mve_vpselq_f<mode>): Likewise.\n\t(mve_vqmovnbq_m_<supf><mode>): Likewise.\n\t(mve_vqmovntq_m_<supf><mode>): Likewise.\n\t(mve_vqmovunbq_m_s<mode>): Likewise.\n\t(mve_vqmovuntq_m_s<mode>): Likewise.\n\t(mve_vqrshrntq_n_<supf><mode>): Likewise.\n\t(mve_vqrshruntq_n_s<mode>): Likewise.\n\t(mve_vqshrnbq_n_<supf><mode>): Likewise.\n\t(mve_vqshrntq_n_<supf><mode>): Likewise.\n\t(mve_vqshrunbq_n_s<mode>): Likewise.\n\t(mve_vqshruntq_n_s<mode>): Likewise.\n\t(mve_vrev32q_m_fv8hf): Likewise.\n\t(mve_vrev32q_m_<supf><mode>): Likewise.\n\t(mve_vrev64q_m_f<mode>): Likewise.\n\t(mve_vrmlaldavhaxq_sv4si): Likewise.\n\t(mve_vrmlaldavhxq_p_sv4si): Likewise.\n\t(mve_vrmlsldavhaxq_sv4si): Likewise.\n\t(mve_vrmlsldavhq_p_sv4si): Likewise.\n\t(mve_vrmlsldavhxq_p_sv4si): Likewise.\n\t(mve_vrndaq_m_f<mode>): Likewise.\n\t(mve_vrndmq_m_f<mode>): Likewise.\n\t(mve_vrndnq_m_f<mode>): Likewise.\n\t(mve_vrndpq_m_f<mode>): Likewise.\n\t(mve_vrndxq_m_f<mode>): Likewise.\n\t(mve_vrshrnbq_n_<supf><mode>): Likewise.\n\t(mve_vrshrntq_n_<supf><mode>): Likewise.\n\t(mve_vshrnbq_n_<supf><mode>): Likewise.\n\t(mve_vshrntq_n_<supf><mode>): Likewise.\n\t(mve_vcvtmq_m_<supf><mode>): Likewise.\n\t(mve_vcvtpq_m_<supf><mode>): Likewise.\n\t(mve_vcvtnq_m_<supf><mode>): Likewise.\n\t(mve_vcvtq_m_n_from_f_<supf><mode>): Likewise.\n\t(mve_vrev16q_m_<supf>v16qi): Likewise.\n\t(mve_vcvtq_m_from_f_<supf><mode>): Likewise.\n\t(mve_vrmlaldavhq_p_<supf>v4si): Likewise.\n\t(mve_vrmlsldavhaq_sv4si): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* gcc.target/arm/mve/intrinsics/vabsq_m_f16.c: New test.\n\t* gcc.target/arm/mve/intrinsics/vabsq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddlvaq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddlvaq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot180_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot180_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot270_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot270_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot90_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot90_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtbq_m_f16_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtbq_m_f32_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtmq_m_s16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtmq_m_s32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtmq_m_u16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtmq_m_u32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtnq_m_s16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtnq_m_s32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtnq_m_u16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtnq_m_u32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtpq_m_s16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtpq_m_s32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtpq_m_u16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtpq_m_u32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_m_s16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_m_s32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_m_u16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_m_u32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvttq_m_f16_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvttq_m_f32_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vfmaq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vfmaq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vfmaq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vfmaq_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vfmasq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vfmasq_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vfmsq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vfmsq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmaq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmaq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmavq_p_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmavq_p_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmvq_p_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmvq_p_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmaq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmaq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmavq_p_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmavq_p_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmvq_p_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmvq_p_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavaq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavaq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavaq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavaq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavaxq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavaxq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavaxq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavaxq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavq_p_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavxq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavxq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavxq_p_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavxq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsldavaq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsldavaq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsldavaxq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsldavaxq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsldavq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsldavq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsldavxq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsldavxq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovlbq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovlbq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovlbq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovlbq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovltq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovltq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovltq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovltq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovnbq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovnbq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovnbq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovnbq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovntq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovntq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovntq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovntq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vnegq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vnegq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vpselq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vpselq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovnbq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovnbq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovnbq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovnbq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovntq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovntq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovntq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovntq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovunbq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovunbq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovuntq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqmovuntq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshrntq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshrntq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshrntq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshrntq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshruntq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshruntq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshrnbq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshrnbq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshrnbq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshrnbq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshrntq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshrntq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshrntq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshrntq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshrunbq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshrunbq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshruntq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshruntq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev16q_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev16q_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev32q_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev32q_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev32q_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev32q_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev32q_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmlaldavhaxq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmlaldavhq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmlaldavhq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmlaldavhxq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmlsldavhaq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmlsldavhaxq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmlsldavhq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmlsldavhxq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndaq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndaq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndmq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndmq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndnq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndnq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndpq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndpq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndxq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndxq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrnbq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrnbq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrnbq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrnbq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrntq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrntq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrntq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrntq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrnbq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrnbq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrnbq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrnbq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrntq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrntq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrntq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrntq_n_u32.c: Likewise.", "tree": {"sha": "22cfaa24786b6f78ee981582a97879a50fb49e9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22cfaa24786b6f78ee981582a97879a50fb49e9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3678b4464a8dd9cc9386145b4acd2d3333bc071", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3678b4464a8dd9cc9386145b4acd2d3333bc071", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3678b4464a8dd9cc9386145b4acd2d3333bc071", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3678b4464a8dd9cc9386145b4acd2d3333bc071/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8165795c1555c83c0c6c68650321540f9253d461", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8165795c1555c83c0c6c68650321540f9253d461", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8165795c1555c83c0c6c68650321540f9253d461"}], "stats": {"total": 12630, "additions": 10979, "deletions": 1651}, "files": [{"sha": "1d1efbd951d878c738b99a48161b7aa2e7230988", "filename": "gcc/ChangeLog", "status": "modified", "additions": 621, "deletions": 0, "changes": 621, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -1,3 +1,624 @@\n+2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* config/arm/arm_mve.h (vrmlaldavhaxq_s32): Define macro.\n+\t(vrmlsldavhaq_s32): Likewise.\n+\t(vrmlsldavhaxq_s32): Likewise.\n+\t(vaddlvaq_p_s32): Likewise.\n+\t(vcvtbq_m_f16_f32): Likewise.\n+\t(vcvtbq_m_f32_f16): Likewise.\n+\t(vcvttq_m_f16_f32): Likewise.\n+\t(vcvttq_m_f32_f16): Likewise.\n+\t(vrev16q_m_s8): Likewise.\n+\t(vrev32q_m_f16): Likewise.\n+\t(vrmlaldavhq_p_s32): Likewise.\n+\t(vrmlaldavhxq_p_s32): Likewise.\n+\t(vrmlsldavhq_p_s32): Likewise.\n+\t(vrmlsldavhxq_p_s32): Likewise.\n+\t(vaddlvaq_p_u32): Likewise.\n+\t(vrev16q_m_u8): Likewise.\n+\t(vrmlaldavhq_p_u32): Likewise.\n+\t(vmvnq_m_n_s16): Likewise.\n+\t(vorrq_m_n_s16): Likewise.\n+\t(vqrshrntq_n_s16): Likewise.\n+\t(vqshrnbq_n_s16): Likewise.\n+\t(vqshrntq_n_s16): Likewise.\n+\t(vrshrnbq_n_s16): Likewise.\n+\t(vrshrntq_n_s16): Likewise.\n+\t(vshrnbq_n_s16): Likewise.\n+\t(vshrntq_n_s16): Likewise.\n+\t(vcmlaq_f16): Likewise.\n+\t(vcmlaq_rot180_f16): Likewise.\n+\t(vcmlaq_rot270_f16): Likewise.\n+\t(vcmlaq_rot90_f16): Likewise.\n+\t(vfmaq_f16): Likewise.\n+\t(vfmaq_n_f16): Likewise.\n+\t(vfmasq_n_f16): Likewise.\n+\t(vfmsq_f16): Likewise.\n+\t(vmlaldavaq_s16): Likewise.\n+\t(vmlaldavaxq_s16): Likewise.\n+\t(vmlsldavaq_s16): Likewise.\n+\t(vmlsldavaxq_s16): Likewise.\n+\t(vabsq_m_f16): Likewise.\n+\t(vcvtmq_m_s16_f16): Likewise.\n+\t(vcvtnq_m_s16_f16): Likewise.\n+\t(vcvtpq_m_s16_f16): Likewise.\n+\t(vcvtq_m_s16_f16): Likewise.\n+\t(vdupq_m_n_f16): Likewise.\n+\t(vmaxnmaq_m_f16): Likewise.\n+\t(vmaxnmavq_p_f16): Likewise.\n+\t(vmaxnmvq_p_f16): Likewise.\n+\t(vminnmaq_m_f16): Likewise.\n+\t(vminnmavq_p_f16): Likewise.\n+\t(vminnmvq_p_f16): Likewise.\n+\t(vmlaldavq_p_s16): Likewise.\n+\t(vmlaldavxq_p_s16): Likewise.\n+\t(vmlsldavq_p_s16): Likewise.\n+\t(vmlsldavxq_p_s16): Likewise.\n+\t(vmovlbq_m_s8): Likewise.\n+\t(vmovltq_m_s8): Likewise.\n+\t(vmovnbq_m_s16): Likewise.\n+\t(vmovntq_m_s16): Likewise.\n+\t(vnegq_m_f16): Likewise.\n+\t(vpselq_f16): Likewise.\n+\t(vqmovnbq_m_s16): Likewise.\n+\t(vqmovntq_m_s16): Likewise.\n+\t(vrev32q_m_s8): Likewise.\n+\t(vrev64q_m_f16): Likewise.\n+\t(vrndaq_m_f16): Likewise.\n+\t(vrndmq_m_f16): Likewise.\n+\t(vrndnq_m_f16): Likewise.\n+\t(vrndpq_m_f16): Likewise.\n+\t(vrndq_m_f16): Likewise.\n+\t(vrndxq_m_f16): Likewise.\n+\t(vcmpeqq_m_n_f16): Likewise.\n+\t(vcmpgeq_m_f16): Likewise.\n+\t(vcmpgeq_m_n_f16): Likewise.\n+\t(vcmpgtq_m_f16): Likewise.\n+\t(vcmpgtq_m_n_f16): Likewise.\n+\t(vcmpleq_m_f16): Likewise.\n+\t(vcmpleq_m_n_f16): Likewise.\n+\t(vcmpltq_m_f16): Likewise.\n+\t(vcmpltq_m_n_f16): Likewise.\n+\t(vcmpneq_m_f16): Likewise.\n+\t(vcmpneq_m_n_f16): Likewise.\n+\t(vmvnq_m_n_u16): Likewise.\n+\t(vorrq_m_n_u16): Likewise.\n+\t(vqrshruntq_n_s16): Likewise.\n+\t(vqshrunbq_n_s16): Likewise.\n+\t(vqshruntq_n_s16): Likewise.\n+\t(vcvtmq_m_u16_f16): Likewise.\n+\t(vcvtnq_m_u16_f16): Likewise.\n+\t(vcvtpq_m_u16_f16): Likewise.\n+\t(vcvtq_m_u16_f16): Likewise.\n+\t(vqmovunbq_m_s16): Likewise.\n+\t(vqmovuntq_m_s16): Likewise.\n+\t(vqrshrntq_n_u16): Likewise.\n+\t(vqshrnbq_n_u16): Likewise.\n+\t(vqshrntq_n_u16): Likewise.\n+\t(vrshrnbq_n_u16): Likewise.\n+\t(vrshrntq_n_u16): Likewise.\n+\t(vshrnbq_n_u16): Likewise.\n+\t(vshrntq_n_u16): Likewise.\n+\t(vmlaldavaq_u16): Likewise.\n+\t(vmlaldavaxq_u16): Likewise.\n+\t(vmlaldavq_p_u16): Likewise.\n+\t(vmlaldavxq_p_u16): Likewise.\n+\t(vmovlbq_m_u8): Likewise.\n+\t(vmovltq_m_u8): Likewise.\n+\t(vmovnbq_m_u16): Likewise.\n+\t(vmovntq_m_u16): Likewise.\n+\t(vqmovnbq_m_u16): Likewise.\n+\t(vqmovntq_m_u16): Likewise.\n+\t(vrev32q_m_u8): Likewise.\n+\t(vmvnq_m_n_s32): Likewise.\n+\t(vorrq_m_n_s32): Likewise.\n+\t(vqrshrntq_n_s32): Likewise.\n+\t(vqshrnbq_n_s32): Likewise.\n+\t(vqshrntq_n_s32): Likewise.\n+\t(vrshrnbq_n_s32): Likewise.\n+\t(vrshrntq_n_s32): Likewise.\n+\t(vshrnbq_n_s32): Likewise.\n+\t(vshrntq_n_s32): Likewise.\n+\t(vcmlaq_f32): Likewise.\n+\t(vcmlaq_rot180_f32): Likewise.\n+\t(vcmlaq_rot270_f32): Likewise.\n+\t(vcmlaq_rot90_f32): Likewise.\n+\t(vfmaq_f32): Likewise.\n+\t(vfmaq_n_f32): Likewise.\n+\t(vfmasq_n_f32): Likewise.\n+\t(vfmsq_f32): Likewise.\n+\t(vmlaldavaq_s32): Likewise.\n+\t(vmlaldavaxq_s32): Likewise.\n+\t(vmlsldavaq_s32): Likewise.\n+\t(vmlsldavaxq_s32): Likewise.\n+\t(vabsq_m_f32): Likewise.\n+\t(vcvtmq_m_s32_f32): Likewise.\n+\t(vcvtnq_m_s32_f32): Likewise.\n+\t(vcvtpq_m_s32_f32): Likewise.\n+\t(vcvtq_m_s32_f32): Likewise.\n+\t(vdupq_m_n_f32): Likewise.\n+\t(vmaxnmaq_m_f32): Likewise.\n+\t(vmaxnmavq_p_f32): Likewise.\n+\t(vmaxnmvq_p_f32): Likewise.\n+\t(vminnmaq_m_f32): Likewise.\n+\t(vminnmavq_p_f32): Likewise.\n+\t(vminnmvq_p_f32): Likewise.\n+\t(vmlaldavq_p_s32): Likewise.\n+\t(vmlaldavxq_p_s32): Likewise.\n+\t(vmlsldavq_p_s32): Likewise.\n+\t(vmlsldavxq_p_s32): Likewise.\n+\t(vmovlbq_m_s16): Likewise.\n+\t(vmovltq_m_s16): Likewise.\n+\t(vmovnbq_m_s32): Likewise.\n+\t(vmovntq_m_s32): Likewise.\n+\t(vnegq_m_f32): Likewise.\n+\t(vpselq_f32): Likewise.\n+\t(vqmovnbq_m_s32): Likewise.\n+\t(vqmovntq_m_s32): Likewise.\n+\t(vrev32q_m_s16): Likewise.\n+\t(vrev64q_m_f32): Likewise.\n+\t(vrndaq_m_f32): Likewise.\n+\t(vrndmq_m_f32): Likewise.\n+\t(vrndnq_m_f32): Likewise.\n+\t(vrndpq_m_f32): Likewise.\n+\t(vrndq_m_f32): Likewise.\n+\t(vrndxq_m_f32): Likewise.\n+\t(vcmpeqq_m_n_f32): Likewise.\n+\t(vcmpgeq_m_f32): Likewise.\n+\t(vcmpgeq_m_n_f32): Likewise.\n+\t(vcmpgtq_m_f32): Likewise.\n+\t(vcmpgtq_m_n_f32): Likewise.\n+\t(vcmpleq_m_f32): Likewise.\n+\t(vcmpleq_m_n_f32): Likewise.\n+\t(vcmpltq_m_f32): Likewise.\n+\t(vcmpltq_m_n_f32): Likewise.\n+\t(vcmpneq_m_f32): Likewise.\n+\t(vcmpneq_m_n_f32): Likewise.\n+\t(vmvnq_m_n_u32): Likewise.\n+\t(vorrq_m_n_u32): Likewise.\n+\t(vqrshruntq_n_s32): Likewise.\n+\t(vqshrunbq_n_s32): Likewise.\n+\t(vqshruntq_n_s32): Likewise.\n+\t(vcvtmq_m_u32_f32): Likewise.\n+\t(vcvtnq_m_u32_f32): Likewise.\n+\t(vcvtpq_m_u32_f32): Likewise.\n+\t(vcvtq_m_u32_f32): Likewise.\n+\t(vqmovunbq_m_s32): Likewise.\n+\t(vqmovuntq_m_s32): Likewise.\n+\t(vqrshrntq_n_u32): Likewise.\n+\t(vqshrnbq_n_u32): Likewise.\n+\t(vqshrntq_n_u32): Likewise.\n+\t(vrshrnbq_n_u32): Likewise.\n+\t(vrshrntq_n_u32): Likewise.\n+\t(vshrnbq_n_u32): Likewise.\n+\t(vshrntq_n_u32): Likewise.\n+\t(vmlaldavaq_u32): Likewise.\n+\t(vmlaldavaxq_u32): Likewise.\n+\t(vmlaldavq_p_u32): Likewise.\n+\t(vmlaldavxq_p_u32): Likewise.\n+\t(vmovlbq_m_u16): Likewise.\n+\t(vmovltq_m_u16): Likewise.\n+\t(vmovnbq_m_u32): Likewise.\n+\t(vmovntq_m_u32): Likewise.\n+\t(vqmovnbq_m_u32): Likewise.\n+\t(vqmovntq_m_u32): Likewise.\n+\t(vrev32q_m_u16): Likewise.\n+\t(__arm_vrmlaldavhaxq_s32): Define intrinsic.\n+\t(__arm_vrmlsldavhaq_s32): Likewise.\n+\t(__arm_vrmlsldavhaxq_s32): Likewise.\n+\t(__arm_vaddlvaq_p_s32): Likewise.\n+\t(__arm_vrev16q_m_s8): Likewise.\n+\t(__arm_vrmlaldavhq_p_s32): Likewise.\n+\t(__arm_vrmlaldavhxq_p_s32): Likewise.\n+\t(__arm_vrmlsldavhq_p_s32): Likewise.\n+\t(__arm_vrmlsldavhxq_p_s32): Likewise.\n+\t(__arm_vaddlvaq_p_u32): Likewise.\n+\t(__arm_vrev16q_m_u8): Likewise.\n+\t(__arm_vrmlaldavhq_p_u32): Likewise.\n+\t(__arm_vmvnq_m_n_s16): Likewise.\n+\t(__arm_vorrq_m_n_s16): Likewise.\n+\t(__arm_vqrshrntq_n_s16): Likewise.\n+\t(__arm_vqshrnbq_n_s16): Likewise.\n+\t(__arm_vqshrntq_n_s16): Likewise.\n+\t(__arm_vrshrnbq_n_s16): Likewise.\n+\t(__arm_vrshrntq_n_s16): Likewise.\n+\t(__arm_vshrnbq_n_s16): Likewise.\n+\t(__arm_vshrntq_n_s16): Likewise.\n+\t(__arm_vmlaldavaq_s16): Likewise.\n+\t(__arm_vmlaldavaxq_s16): Likewise.\n+\t(__arm_vmlsldavaq_s16): Likewise.\n+\t(__arm_vmlsldavaxq_s16): Likewise.\n+\t(__arm_vmlaldavq_p_s16): Likewise.\n+\t(__arm_vmlaldavxq_p_s16): Likewise.\n+\t(__arm_vmlsldavq_p_s16): Likewise.\n+\t(__arm_vmlsldavxq_p_s16): Likewise.\n+\t(__arm_vmovlbq_m_s8): Likewise.\n+\t(__arm_vmovltq_m_s8): Likewise.\n+\t(__arm_vmovnbq_m_s16): Likewise.\n+\t(__arm_vmovntq_m_s16): Likewise.\n+\t(__arm_vqmovnbq_m_s16): Likewise.\n+\t(__arm_vqmovntq_m_s16): Likewise.\n+\t(__arm_vrev32q_m_s8): Likewise.\n+\t(__arm_vmvnq_m_n_u16): Likewise.\n+\t(__arm_vorrq_m_n_u16): Likewise.\n+\t(__arm_vqrshruntq_n_s16): Likewise.\n+\t(__arm_vqshrunbq_n_s16): Likewise.\n+\t(__arm_vqshruntq_n_s16): Likewise.\n+\t(__arm_vqmovunbq_m_s16): Likewise.\n+\t(__arm_vqmovuntq_m_s16): Likewise.\n+\t(__arm_vqrshrntq_n_u16): Likewise.\n+\t(__arm_vqshrnbq_n_u16): Likewise.\n+\t(__arm_vqshrntq_n_u16): Likewise.\n+\t(__arm_vrshrnbq_n_u16): Likewise.\n+\t(__arm_vrshrntq_n_u16): Likewise.\n+\t(__arm_vshrnbq_n_u16): Likewise.\n+\t(__arm_vshrntq_n_u16): Likewise.\n+\t(__arm_vmlaldavaq_u16): Likewise.\n+\t(__arm_vmlaldavaxq_u16): Likewise.\n+\t(__arm_vmlaldavq_p_u16): Likewise.\n+\t(__arm_vmlaldavxq_p_u16): Likewise.\n+\t(__arm_vmovlbq_m_u8): Likewise.\n+\t(__arm_vmovltq_m_u8): Likewise.\n+\t(__arm_vmovnbq_m_u16): Likewise.\n+\t(__arm_vmovntq_m_u16): Likewise.\n+\t(__arm_vqmovnbq_m_u16): Likewise.\n+\t(__arm_vqmovntq_m_u16): Likewise.\n+\t(__arm_vrev32q_m_u8): Likewise.\n+\t(__arm_vmvnq_m_n_s32): Likewise.\n+\t(__arm_vorrq_m_n_s32): Likewise.\n+\t(__arm_vqrshrntq_n_s32): Likewise.\n+\t(__arm_vqshrnbq_n_s32): Likewise.\n+\t(__arm_vqshrntq_n_s32): Likewise.\n+\t(__arm_vrshrnbq_n_s32): Likewise.\n+\t(__arm_vrshrntq_n_s32): Likewise.\n+\t(__arm_vshrnbq_n_s32): Likewise.\n+\t(__arm_vshrntq_n_s32): Likewise.\n+\t(__arm_vmlaldavaq_s32): Likewise.\n+\t(__arm_vmlaldavaxq_s32): Likewise.\n+\t(__arm_vmlsldavaq_s32): Likewise.\n+\t(__arm_vmlsldavaxq_s32): Likewise.\n+\t(__arm_vmlaldavq_p_s32): Likewise.\n+\t(__arm_vmlaldavxq_p_s32): Likewise.\n+\t(__arm_vmlsldavq_p_s32): Likewise.\n+\t(__arm_vmlsldavxq_p_s32): Likewise.\n+\t(__arm_vmovlbq_m_s16): Likewise.\n+\t(__arm_vmovltq_m_s16): Likewise.\n+\t(__arm_vmovnbq_m_s32): Likewise.\n+\t(__arm_vmovntq_m_s32): Likewise.\n+\t(__arm_vqmovnbq_m_s32): Likewise.\n+\t(__arm_vqmovntq_m_s32): Likewise.\n+\t(__arm_vrev32q_m_s16): Likewise.\n+\t(__arm_vmvnq_m_n_u32): Likewise.\n+\t(__arm_vorrq_m_n_u32): Likewise.\n+\t(__arm_vqrshruntq_n_s32): Likewise.\n+\t(__arm_vqshrunbq_n_s32): Likewise.\n+\t(__arm_vqshruntq_n_s32): Likewise.\n+\t(__arm_vqmovunbq_m_s32): Likewise.\n+\t(__arm_vqmovuntq_m_s32): Likewise.\n+\t(__arm_vqrshrntq_n_u32): Likewise.\n+\t(__arm_vqshrnbq_n_u32): Likewise.\n+\t(__arm_vqshrntq_n_u32): Likewise.\n+\t(__arm_vrshrnbq_n_u32): Likewise.\n+\t(__arm_vrshrntq_n_u32): Likewise.\n+\t(__arm_vshrnbq_n_u32): Likewise.\n+\t(__arm_vshrntq_n_u32): Likewise.\n+\t(__arm_vmlaldavaq_u32): Likewise.\n+\t(__arm_vmlaldavaxq_u32): Likewise.\n+\t(__arm_vmlaldavq_p_u32): Likewise.\n+\t(__arm_vmlaldavxq_p_u32): Likewise.\n+\t(__arm_vmovlbq_m_u16): Likewise.\n+\t(__arm_vmovltq_m_u16): Likewise.\n+\t(__arm_vmovnbq_m_u32): Likewise.\n+\t(__arm_vmovntq_m_u32): Likewise.\n+\t(__arm_vqmovnbq_m_u32): Likewise.\n+\t(__arm_vqmovntq_m_u32): Likewise.\n+\t(__arm_vrev32q_m_u16): Likewise.\n+\t(__arm_vcvtbq_m_f16_f32): Likewise.\n+\t(__arm_vcvtbq_m_f32_f16): Likewise.\n+\t(__arm_vcvttq_m_f16_f32): Likewise.\n+\t(__arm_vcvttq_m_f32_f16): Likewise.\n+\t(__arm_vrev32q_m_f16): Likewise.\n+\t(__arm_vcmlaq_f16): Likewise.\n+\t(__arm_vcmlaq_rot180_f16): Likewise.\n+\t(__arm_vcmlaq_rot270_f16): Likewise.\n+\t(__arm_vcmlaq_rot90_f16): Likewise.\n+\t(__arm_vfmaq_f16): Likewise.\n+\t(__arm_vfmaq_n_f16): Likewise.\n+\t(__arm_vfmasq_n_f16): Likewise.\n+\t(__arm_vfmsq_f16): Likewise.\n+\t(__arm_vabsq_m_f16): Likewise.\n+\t(__arm_vcvtmq_m_s16_f16): Likewise.\n+\t(__arm_vcvtnq_m_s16_f16): Likewise.\n+\t(__arm_vcvtpq_m_s16_f16): Likewise.\n+\t(__arm_vcvtq_m_s16_f16): Likewise.\n+\t(__arm_vdupq_m_n_f16): Likewise.\n+\t(__arm_vmaxnmaq_m_f16): Likewise.\n+\t(__arm_vmaxnmavq_p_f16): Likewise.\n+\t(__arm_vmaxnmvq_p_f16): Likewise.\n+\t(__arm_vminnmaq_m_f16): Likewise.\n+\t(__arm_vminnmavq_p_f16): Likewise.\n+\t(__arm_vminnmvq_p_f16): Likewise.\n+\t(__arm_vnegq_m_f16): Likewise.\n+\t(__arm_vpselq_f16): Likewise.\n+\t(__arm_vrev64q_m_f16): Likewise.\n+\t(__arm_vrndaq_m_f16): Likewise.\n+\t(__arm_vrndmq_m_f16): Likewise.\n+\t(__arm_vrndnq_m_f16): Likewise.\n+\t(__arm_vrndpq_m_f16): Likewise.\n+\t(__arm_vrndq_m_f16): Likewise.\n+\t(__arm_vrndxq_m_f16): Likewise.\n+\t(__arm_vcmpeqq_m_n_f16): Likewise.\n+\t(__arm_vcmpgeq_m_f16): Likewise.\n+\t(__arm_vcmpgeq_m_n_f16): Likewise.\n+\t(__arm_vcmpgtq_m_f16): Likewise.\n+\t(__arm_vcmpgtq_m_n_f16): Likewise.\n+\t(__arm_vcmpleq_m_f16): Likewise.\n+\t(__arm_vcmpleq_m_n_f16): Likewise.\n+\t(__arm_vcmpltq_m_f16): Likewise.\n+\t(__arm_vcmpltq_m_n_f16): Likewise.\n+\t(__arm_vcmpneq_m_f16): Likewise.\n+\t(__arm_vcmpneq_m_n_f16): Likewise.\n+\t(__arm_vcvtmq_m_u16_f16): Likewise.\n+\t(__arm_vcvtnq_m_u16_f16): Likewise.\n+\t(__arm_vcvtpq_m_u16_f16): Likewise.\n+\t(__arm_vcvtq_m_u16_f16): Likewise.\n+\t(__arm_vcmlaq_f32): Likewise.\n+\t(__arm_vcmlaq_rot180_f32): Likewise.\n+\t(__arm_vcmlaq_rot270_f32): Likewise.\n+\t(__arm_vcmlaq_rot90_f32): Likewise.\n+\t(__arm_vfmaq_f32): Likewise.\n+\t(__arm_vfmaq_n_f32): Likewise.\n+\t(__arm_vfmasq_n_f32): Likewise.\n+\t(__arm_vfmsq_f32): Likewise.\n+\t(__arm_vabsq_m_f32): Likewise.\n+\t(__arm_vcvtmq_m_s32_f32): Likewise.\n+\t(__arm_vcvtnq_m_s32_f32): Likewise.\n+\t(__arm_vcvtpq_m_s32_f32): Likewise.\n+\t(__arm_vcvtq_m_s32_f32): Likewise.\n+\t(__arm_vdupq_m_n_f32): Likewise.\n+\t(__arm_vmaxnmaq_m_f32): Likewise.\n+\t(__arm_vmaxnmavq_p_f32): Likewise.\n+\t(__arm_vmaxnmvq_p_f32): Likewise.\n+\t(__arm_vminnmaq_m_f32): Likewise.\n+\t(__arm_vminnmavq_p_f32): Likewise.\n+\t(__arm_vminnmvq_p_f32): Likewise.\n+\t(__arm_vnegq_m_f32): Likewise.\n+\t(__arm_vpselq_f32): Likewise.\n+\t(__arm_vrev64q_m_f32): Likewise.\n+\t(__arm_vrndaq_m_f32): Likewise.\n+\t(__arm_vrndmq_m_f32): Likewise.\n+\t(__arm_vrndnq_m_f32): Likewise.\n+\t(__arm_vrndpq_m_f32): Likewise.\n+\t(__arm_vrndq_m_f32): Likewise.\n+\t(__arm_vrndxq_m_f32): Likewise.\n+\t(__arm_vcmpeqq_m_n_f32): Likewise.\n+\t(__arm_vcmpgeq_m_f32): Likewise.\n+\t(__arm_vcmpgeq_m_n_f32): Likewise.\n+\t(__arm_vcmpgtq_m_f32): Likewise.\n+\t(__arm_vcmpgtq_m_n_f32): Likewise.\n+\t(__arm_vcmpleq_m_f32): Likewise.\n+\t(__arm_vcmpleq_m_n_f32): Likewise.\n+\t(__arm_vcmpltq_m_f32): Likewise.\n+\t(__arm_vcmpltq_m_n_f32): Likewise.\n+\t(__arm_vcmpneq_m_f32): Likewise.\n+\t(__arm_vcmpneq_m_n_f32): Likewise.\n+\t(__arm_vcvtmq_m_u32_f32): Likewise.\n+\t(__arm_vcvtnq_m_u32_f32): Likewise.\n+\t(__arm_vcvtpq_m_u32_f32): Likewise.\n+\t(__arm_vcvtq_m_u32_f32): Likewise.\n+\t(vcvtq_m): Define polymorphic variant.\n+\t(vabsq_m): Likewise.\n+\t(vcmlaq): Likewise.\n+\t(vcmlaq_rot180): Likewise.\n+\t(vcmlaq_rot270): Likewise.\n+\t(vcmlaq_rot90): Likewise.\n+\t(vcmpeqq_m_n): Likewise.\n+\t(vcmpgeq_m_n): Likewise.\n+\t(vrndxq_m): Likewise.\n+\t(vrndq_m): Likewise.\n+\t(vrndpq_m): Likewise.\n+\t(vcmpgtq_m_n): Likewise.\n+\t(vcmpgtq_m): Likewise.\n+\t(vcmpleq_m): Likewise.\n+\t(vcmpleq_m_n): Likewise.\n+\t(vcmpltq_m_n): Likewise.\n+\t(vcmpltq_m): Likewise.\n+\t(vcmpneq_m): Likewise.\n+\t(vcmpneq_m_n): Likewise.\n+\t(vcvtbq_m): Likewise.\n+\t(vcvttq_m): Likewise.\n+\t(vcvtmq_m): Likewise.\n+\t(vcvtnq_m): Likewise.\n+\t(vcvtpq_m): Likewise.\n+\t(vdupq_m_n): Likewise.\n+\t(vfmaq_n): Likewise.\n+\t(vfmaq): Likewise.\n+\t(vfmasq_n): Likewise.\n+\t(vfmsq): Likewise.\n+\t(vmaxnmaq_m): Likewise.\n+\t(vmaxnmavq_m): Likewise.\n+\t(vmaxnmvq_m): Likewise.\n+\t(vmaxnmavq_p): Likewise.\n+\t(vmaxnmvq_p): Likewise.\n+\t(vminnmaq_m): Likewise.\n+\t(vminnmavq_p): Likewise.\n+\t(vminnmvq_p): Likewise.\n+\t(vrndnq_m): Likewise.\n+\t(vrndaq_m): Likewise.\n+\t(vrndmq_m): Likewise.\n+\t(vrev64q_m): Likewise.\n+\t(vrev32q_m): Likewise.\n+\t(vpselq): Likewise.\n+\t(vnegq_m): Likewise.\n+\t(vcmpgeq_m): Likewise.\n+\t(vshrntq_n): Likewise.\n+\t(vrshrntq_n): Likewise.\n+\t(vmovlbq_m): Likewise.\n+\t(vmovnbq_m): Likewise.\n+\t(vmovntq_m): Likewise.\n+\t(vmvnq_m_n): Likewise.\n+\t(vmvnq_m): Likewise.\n+\t(vshrnbq_n): Likewise.\n+\t(vrshrnbq_n): Likewise.\n+\t(vqshruntq_n): Likewise.\n+\t(vrev16q_m): Likewise.\n+\t(vqshrunbq_n): Likewise.\n+\t(vqshrntq_n): Likewise.\n+\t(vqrshruntq_n): Likewise.\n+\t(vqrshrntq_n): Likewise.\n+\t(vqshrnbq_n): Likewise.\n+\t(vqmovuntq_m): Likewise.\n+\t(vqmovntq_m): Likewise.\n+\t(vqmovnbq_m): Likewise.\n+\t(vorrq_m_n): Likewise.\n+\t(vmovltq_m): Likewise.\n+\t(vqmovunbq_m): Likewise.\n+\t(vaddlvaq_p): Likewise.\n+\t(vmlaldavaq): Likewise.\n+\t(vmlaldavaxq): Likewise.\n+\t(vmlaldavq_p): Likewise.\n+\t(vmlaldavxq_p): Likewise.\n+\t(vmlsldavaq): Likewise.\n+\t(vmlsldavaxq): Likewise.\n+\t(vmlsldavq_p): Likewise.\n+\t(vmlsldavxq_p): Likewise.\n+\t(vrmlaldavhaxq): Likewise.\n+\t(vrmlaldavhq_p): Likewise.\n+\t(vrmlaldavhxq_p): Likewise.\n+\t(vrmlsldavhaq): Likewise.\n+\t(vrmlsldavhaxq): Likewise.\n+\t(vrmlsldavhq_p): Likewise.\n+\t(vrmlsldavhxq_p): Likewise.\n+\t* config/arm/arm_mve_builtins.def (TERNOP_NONE_NONE_IMM_UNONE): Use\n+\tbuiltin qualifier.\n+\t(TERNOP_NONE_NONE_NONE_IMM): Likewise.\n+\t(TERNOP_NONE_NONE_NONE_NONE): Likewise.\n+\t(TERNOP_NONE_NONE_NONE_UNONE): Likewise.\n+\t(TERNOP_UNONE_NONE_NONE_UNONE): Likewise.\n+\t(TERNOP_UNONE_UNONE_IMM_UNONE): Likewise.\n+\t(TERNOP_UNONE_UNONE_NONE_IMM): Likewise.\n+\t(TERNOP_UNONE_UNONE_NONE_UNONE): Likewise.\n+\t(TERNOP_UNONE_UNONE_UNONE_IMM): Likewise.\n+\t(TERNOP_UNONE_UNONE_UNONE_UNONE): Likewise.\n+\t* config/arm/mve.md (MVE_constraint3): Define mode attribute iterator.\n+\t(MVE_pred3): Likewise.\n+\t(MVE_constraint1): Likewise.\n+\t(MVE_pred1): Likewise.\n+\t(VMLALDAVQ_P): Define iterator.\n+\t(VQMOVNBQ_M): Likewise.\n+\t(VMOVLTQ_M): Likewise.\n+\t(VMOVNBQ_M): Likewise.\n+\t(VRSHRNTQ_N): Likewise.\n+\t(VORRQ_M_N): Likewise.\n+\t(VREV32Q_M): Likewise.\n+\t(VREV16Q_M): Likewise.\n+\t(VQRSHRNTQ_N): Likewise.\n+\t(VMOVNTQ_M): Likewise.\n+\t(VMOVLBQ_M): Likewise.\n+\t(VMLALDAVAQ): Likewise.\n+\t(VQSHRNBQ_N): Likewise.\n+\t(VSHRNBQ_N): Likewise.\n+\t(VRSHRNBQ_N): Likewise.\n+\t(VMLALDAVXQ_P): Likewise.\n+\t(VQMOVNTQ_M): Likewise.\n+\t(VMVNQ_M_N): Likewise.\n+\t(VQSHRNTQ_N): Likewise.\n+\t(VMLALDAVAXQ): Likewise.\n+\t(VSHRNTQ_N): Likewise.\n+\t(VCVTMQ_M): Likewise.\n+\t(VCVTNQ_M): Likewise.\n+\t(VCVTPQ_M): Likewise.\n+\t(VCVTQ_M_N_FROM_F): Likewise.\n+\t(VCVTQ_M_FROM_F): Likewise.\n+\t(VRMLALDAVHQ_P): Likewise.\n+\t(VADDLVAQ_P): Likewise.\n+\t(mve_vrndq_m_f<mode>): Define RTL pattern.\n+\t(mve_vabsq_m_f<mode>): Likewise.\n+\t(mve_vaddlvaq_p_<supf>v4si): Likewise.\n+\t(mve_vcmlaq_f<mode>): Likewise.\n+\t(mve_vcmlaq_rot180_f<mode>): Likewise.\n+\t(mve_vcmlaq_rot270_f<mode>): Likewise.\n+\t(mve_vcmlaq_rot90_f<mode>): Likewise.\n+\t(mve_vcmpeqq_m_n_f<mode>): Likewise.\n+\t(mve_vcmpgeq_m_f<mode>): Likewise.\n+\t(mve_vcmpgeq_m_n_f<mode>): Likewise.\n+\t(mve_vcmpgtq_m_f<mode>): Likewise.\n+\t(mve_vcmpgtq_m_n_f<mode>): Likewise.\n+\t(mve_vcmpleq_m_f<mode>): Likewise.\n+\t(mve_vcmpleq_m_n_f<mode>): Likewise.\n+\t(mve_vcmpltq_m_f<mode>): Likewise.\n+\t(mve_vcmpltq_m_n_f<mode>): Likewise.\n+\t(mve_vcmpneq_m_f<mode>): Likewise.\n+\t(mve_vcmpneq_m_n_f<mode>): Likewise.\n+\t(mve_vcvtbq_m_f16_f32v8hf): Likewise.\n+\t(mve_vcvtbq_m_f32_f16v4sf): Likewise.\n+\t(mve_vcvttq_m_f16_f32v8hf): Likewise.\n+\t(mve_vcvttq_m_f32_f16v4sf): Likewise.\n+\t(mve_vdupq_m_n_f<mode>): Likewise.\n+\t(mve_vfmaq_f<mode>): Likewise.\n+\t(mve_vfmaq_n_f<mode>): Likewise.\n+\t(mve_vfmasq_n_f<mode>): Likewise.\n+\t(mve_vfmsq_f<mode>): Likewise.\n+\t(mve_vmaxnmaq_m_f<mode>): Likewise.\n+\t(mve_vmaxnmavq_p_f<mode>): Likewise.\n+\t(mve_vmaxnmvq_p_f<mode>): Likewise.\n+\t(mve_vminnmaq_m_f<mode>): Likewise.\n+\t(mve_vminnmavq_p_f<mode>): Likewise.\n+\t(mve_vminnmvq_p_f<mode>): Likewise.\n+\t(mve_vmlaldavaq_<supf><mode>): Likewise.\n+\t(mve_vmlaldavaxq_<supf><mode>): Likewise.\n+\t(mve_vmlaldavq_p_<supf><mode>): Likewise.\n+\t(mve_vmlaldavxq_p_<supf><mode>): Likewise.\n+\t(mve_vmlsldavaq_s<mode>): Likewise.\n+\t(mve_vmlsldavaxq_s<mode>): Likewise.\n+\t(mve_vmlsldavq_p_s<mode>): Likewise.\n+\t(mve_vmlsldavxq_p_s<mode>): Likewise.\n+\t(mve_vmovlbq_m_<supf><mode>): Likewise.\n+\t(mve_vmovltq_m_<supf><mode>): Likewise.\n+\t(mve_vmovnbq_m_<supf><mode>): Likewise.\n+\t(mve_vmovntq_m_<supf><mode>): Likewise.\n+\t(mve_vmvnq_m_n_<supf><mode>): Likewise.\n+\t(mve_vnegq_m_f<mode>): Likewise.\n+\t(mve_vorrq_m_n_<supf><mode>): Likewise.\n+\t(mve_vpselq_f<mode>): Likewise.\n+\t(mve_vqmovnbq_m_<supf><mode>): Likewise.\n+\t(mve_vqmovntq_m_<supf><mode>): Likewise.\n+\t(mve_vqmovunbq_m_s<mode>): Likewise.\n+\t(mve_vqmovuntq_m_s<mode>): Likewise.\n+\t(mve_vqrshrntq_n_<supf><mode>): Likewise.\n+\t(mve_vqrshruntq_n_s<mode>): Likewise.\n+\t(mve_vqshrnbq_n_<supf><mode>): Likewise.\n+\t(mve_vqshrntq_n_<supf><mode>): Likewise.\n+\t(mve_vqshrunbq_n_s<mode>): Likewise.\n+\t(mve_vqshruntq_n_s<mode>): Likewise.\n+\t(mve_vrev32q_m_fv8hf): Likewise.\n+\t(mve_vrev32q_m_<supf><mode>): Likewise.\n+\t(mve_vrev64q_m_f<mode>): Likewise.\n+\t(mve_vrmlaldavhaxq_sv4si): Likewise.\n+\t(mve_vrmlaldavhxq_p_sv4si): Likewise.\n+\t(mve_vrmlsldavhaxq_sv4si): Likewise.\n+\t(mve_vrmlsldavhq_p_sv4si): Likewise.\n+\t(mve_vrmlsldavhxq_p_sv4si): Likewise.\n+\t(mve_vrndaq_m_f<mode>): Likewise.\n+\t(mve_vrndmq_m_f<mode>): Likewise.\n+\t(mve_vrndnq_m_f<mode>): Likewise.\n+\t(mve_vrndpq_m_f<mode>): Likewise.\n+\t(mve_vrndxq_m_f<mode>): Likewise.\n+\t(mve_vrshrnbq_n_<supf><mode>): Likewise.\n+\t(mve_vrshrntq_n_<supf><mode>): Likewise.\n+\t(mve_vshrnbq_n_<supf><mode>): Likewise.\n+\t(mve_vshrntq_n_<supf><mode>): Likewise.\n+\t(mve_vcvtmq_m_<supf><mode>): Likewise.\n+\t(mve_vcvtpq_m_<supf><mode>): Likewise.\n+\t(mve_vcvtnq_m_<supf><mode>): Likewise.\n+\t(mve_vcvtq_m_n_from_f_<supf><mode>): Likewise.\n+\t(mve_vrev16q_m_<supf>v16qi): Likewise.\n+\t(mve_vcvtq_m_from_f_<supf><mode>): Likewise.\n+\t(mve_vrmlaldavhq_p_<supf>v4si): Likewise.\n+\t(mve_vrmlsldavhaq_sv4si): Likewise.\n+\n 2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>\n             Srinath Parvathaneni  <srinath.parvathaneni@arm.com>"}, {"sha": "363f9caf9d003a7749ca5aa2eb268874de6a3f41", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 4136, "deletions": 1649, "changes": 5785, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071"}, {"sha": "f625eed1b3cd4e9f558d7e531bba41473c5ad8d5", "filename": "gcc/config/arm/arm_mve_builtins.def", "status": "modified", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -394,3 +394,111 @@ VAR3 (TERNOP_NONE_NONE_NONE_NONE, vmladavaxq_s, v16qi, v8hi, v4si)\n VAR3 (TERNOP_NONE_NONE_NONE_NONE, vmladavaq_s, v16qi, v8hi, v4si)\n VAR3 (TERNOP_NONE_NONE_NONE_IMM, vsriq_n_s, v16qi, v8hi, v4si)\n VAR3 (TERNOP_NONE_NONE_NONE_IMM, vsliq_n_s, v16qi, v8hi, v4si)\n+VAR2 (TERNOP_UNONE_UNONE_UNONE_UNONE, vrev32q_m_u, v16qi, v8hi)\n+VAR2 (TERNOP_UNONE_UNONE_UNONE_UNONE, vqmovntq_m_u, v8hi, v4si)\n+VAR2 (TERNOP_UNONE_UNONE_UNONE_UNONE, vqmovnbq_m_u, v8hi, v4si)\n+VAR2 (TERNOP_UNONE_UNONE_UNONE_UNONE, vmovntq_m_u, v8hi, v4si)\n+VAR2 (TERNOP_UNONE_UNONE_UNONE_UNONE, vmovnbq_m_u, v8hi, v4si)\n+VAR2 (TERNOP_UNONE_UNONE_UNONE_UNONE, vmovltq_m_u, v16qi, v8hi)\n+VAR2 (TERNOP_UNONE_UNONE_UNONE_UNONE, vmovlbq_m_u, v16qi, v8hi)\n+VAR2 (TERNOP_UNONE_UNONE_UNONE_UNONE, vmlaldavq_p_u, v8hi, v4si)\n+VAR2 (TERNOP_UNONE_UNONE_UNONE_UNONE, vmlaldavaq_u, v8hi, v4si)\n+VAR2 (TERNOP_UNONE_UNONE_UNONE_IMM, vshrntq_n_u, v8hi, v4si)\n+VAR2 (TERNOP_UNONE_UNONE_UNONE_IMM, vshrnbq_n_u, v8hi, v4si)\n+VAR2 (TERNOP_UNONE_UNONE_UNONE_IMM, vrshrntq_n_u, v8hi, v4si)\n+VAR2 (TERNOP_UNONE_UNONE_UNONE_IMM, vrshrnbq_n_u, v8hi, v4si)\n+VAR2 (TERNOP_UNONE_UNONE_UNONE_IMM, vqshrntq_n_u, v8hi, v4si)\n+VAR2 (TERNOP_UNONE_UNONE_UNONE_IMM, vqshrnbq_n_u, v8hi, v4si)\n+VAR2 (TERNOP_UNONE_UNONE_UNONE_IMM, vqrshrntq_n_u, v8hi, v4si)\n+VAR2 (TERNOP_UNONE_UNONE_NONE_UNONE, vqmovuntq_m_s, v8hi, v4si)\n+VAR2 (TERNOP_UNONE_UNONE_NONE_UNONE, vqmovunbq_m_s, v8hi, v4si)\n+VAR2 (TERNOP_UNONE_UNONE_NONE_UNONE, vcvtq_m_from_f_u, v8hi, v4si)\n+VAR2 (TERNOP_UNONE_UNONE_NONE_UNONE, vcvtpq_m_u, v8hi, v4si)\n+VAR2 (TERNOP_UNONE_UNONE_NONE_UNONE, vcvtnq_m_u, v8hi, v4si)\n+VAR2 (TERNOP_UNONE_UNONE_NONE_UNONE, vcvtmq_m_u, v8hi, v4si)\n+VAR2 (TERNOP_UNONE_UNONE_NONE_IMM, vqshruntq_n_s, v8hi, v4si)\n+VAR2 (TERNOP_UNONE_UNONE_NONE_IMM, vqshrunbq_n_s, v8hi, v4si)\n+VAR2 (TERNOP_UNONE_UNONE_NONE_IMM, vqrshruntq_n_s, v8hi, v4si)\n+VAR2 (TERNOP_UNONE_UNONE_IMM_UNONE, vorrq_m_n_u, v8hi, v4si)\n+VAR2 (TERNOP_UNONE_UNONE_IMM_UNONE, vmvnq_m_n_u, v8hi, v4si)\n+VAR2 (TERNOP_UNONE_NONE_NONE_UNONE, vcmpneq_m_n_f, v8hf, v4sf)\n+VAR2 (TERNOP_UNONE_NONE_NONE_UNONE, vcmpneq_m_f, v8hf, v4sf)\n+VAR2 (TERNOP_UNONE_NONE_NONE_UNONE, vcmpltq_m_n_f, v8hf, v4sf)\n+VAR2 (TERNOP_UNONE_NONE_NONE_UNONE, vcmpltq_m_f, v8hf, v4sf)\n+VAR2 (TERNOP_UNONE_NONE_NONE_UNONE, vcmpleq_m_n_f, v8hf, v4sf)\n+VAR2 (TERNOP_UNONE_NONE_NONE_UNONE, vcmpleq_m_f, v8hf, v4sf)\n+VAR2 (TERNOP_UNONE_NONE_NONE_UNONE, vcmpgtq_m_n_f, v8hf, v4sf)\n+VAR2 (TERNOP_UNONE_NONE_NONE_UNONE, vcmpgtq_m_f, v8hf, v4sf)\n+VAR2 (TERNOP_UNONE_NONE_NONE_UNONE, vcmpgeq_m_n_f, v8hf, v4sf)\n+VAR2 (TERNOP_UNONE_NONE_NONE_UNONE, vcmpgeq_m_f, v8hf, v4sf)\n+VAR2 (TERNOP_UNONE_NONE_NONE_UNONE, vcmpeqq_m_n_f, v8hf, v4sf)\n+VAR2 (TERNOP_NONE_NONE_NONE_UNONE, vrndxq_m_f, v8hf, v4sf)\n+VAR2 (TERNOP_NONE_NONE_NONE_UNONE, vrndq_m_f, v8hf, v4sf)\n+VAR2 (TERNOP_NONE_NONE_NONE_UNONE, vrndpq_m_f, v8hf, v4sf)\n+VAR2 (TERNOP_NONE_NONE_NONE_UNONE, vrndnq_m_f, v8hf, v4sf)\n+VAR2 (TERNOP_NONE_NONE_NONE_UNONE, vrndmq_m_f, v8hf, v4sf)\n+VAR2 (TERNOP_NONE_NONE_NONE_UNONE, vrndaq_m_f, v8hf, v4sf)\n+VAR2 (TERNOP_NONE_NONE_NONE_UNONE, vrev64q_m_f, v8hf, v4sf)\n+VAR2 (TERNOP_NONE_NONE_NONE_UNONE, vrev32q_m_s, v16qi, v8hi)\n+VAR2 (TERNOP_NONE_NONE_NONE_UNONE, vqmovntq_m_s, v8hi, v4si)\n+VAR2 (TERNOP_NONE_NONE_NONE_UNONE, vqmovnbq_m_s, v8hi, v4si)\n+VAR2 (TERNOP_NONE_NONE_NONE_UNONE, vpselq_f, v8hf, v4sf)\n+VAR2 (TERNOP_NONE_NONE_NONE_UNONE, vnegq_m_f, v8hf, v4sf)\n+VAR2 (TERNOP_NONE_NONE_NONE_UNONE, vmovntq_m_s, v8hi, v4si)\n+VAR2 (TERNOP_NONE_NONE_NONE_UNONE, vmovnbq_m_s, v8hi, v4si)\n+VAR2 (TERNOP_NONE_NONE_NONE_UNONE, vmovltq_m_s, v16qi, v8hi)\n+VAR2 (TERNOP_NONE_NONE_NONE_UNONE, vmovlbq_m_s, v16qi, v8hi)\n+VAR2 (TERNOP_NONE_NONE_NONE_UNONE, vmlsldavxq_p_s, v8hi, v4si)\n+VAR2 (TERNOP_NONE_NONE_NONE_UNONE, vmlsldavq_p_s, v8hi, v4si)\n+VAR2 (TERNOP_NONE_NONE_NONE_UNONE, vmlaldavxq_p_s, v8hi, v4si)\n+VAR2 (TERNOP_NONE_NONE_NONE_UNONE, vmlaldavq_p_s, v8hi, v4si)\n+VAR2 (TERNOP_NONE_NONE_NONE_UNONE, vminnmvq_p_f, v8hf, v4sf)\n+VAR2 (TERNOP_NONE_NONE_NONE_UNONE, vminnmavq_p_f, v8hf, v4sf)\n+VAR2 (TERNOP_NONE_NONE_NONE_UNONE, vminnmaq_m_f, v8hf, v4sf)\n+VAR2 (TERNOP_NONE_NONE_NONE_UNONE, vmaxnmvq_p_f, v8hf, v4sf)\n+VAR2 (TERNOP_NONE_NONE_NONE_UNONE, vmaxnmavq_p_f, v8hf, v4sf)\n+VAR2 (TERNOP_NONE_NONE_NONE_UNONE, vmaxnmaq_m_f, v8hf, v4sf)\n+VAR2 (TERNOP_NONE_NONE_NONE_UNONE, vdupq_m_n_f, v8hf, v4sf)\n+VAR2 (TERNOP_NONE_NONE_NONE_UNONE, vcvtq_m_from_f_s, v8hi, v4si)\n+VAR2 (TERNOP_NONE_NONE_NONE_UNONE, vcvtpq_m_s, v8hi, v4si)\n+VAR2 (TERNOP_NONE_NONE_NONE_UNONE, vcvtnq_m_s, v8hi, v4si)\n+VAR2 (TERNOP_NONE_NONE_NONE_UNONE, vcvtmq_m_s, v8hi, v4si)\n+VAR2 (TERNOP_NONE_NONE_NONE_UNONE, vabsq_m_f, v8hf, v4sf)\n+VAR2 (TERNOP_NONE_NONE_NONE_NONE, vmlsldavaxq_s, v8hi, v4si)\n+VAR2 (TERNOP_NONE_NONE_NONE_NONE, vmlsldavaq_s, v8hi, v4si)\n+VAR2 (TERNOP_NONE_NONE_NONE_NONE, vmlaldavaxq_s, v8hi, v4si)\n+VAR2 (TERNOP_NONE_NONE_NONE_NONE, vmlaldavaq_s, v8hi, v4si)\n+VAR2 (TERNOP_NONE_NONE_NONE_NONE, vfmsq_f, v8hf, v4sf)\n+VAR2 (TERNOP_NONE_NONE_NONE_NONE, vfmasq_n_f, v8hf, v4sf)\n+VAR2 (TERNOP_NONE_NONE_NONE_NONE, vfmaq_n_f, v8hf, v4sf)\n+VAR2 (TERNOP_NONE_NONE_NONE_NONE, vfmaq_f, v8hf, v4sf)\n+VAR2 (TERNOP_NONE_NONE_NONE_NONE, vcmlaq_rot90_f, v8hf, v4sf)\n+VAR2 (TERNOP_NONE_NONE_NONE_NONE, vcmlaq_rot270_f, v8hf, v4sf)\n+VAR2 (TERNOP_NONE_NONE_NONE_NONE, vcmlaq_rot180_f, v8hf, v4sf)\n+VAR2 (TERNOP_NONE_NONE_NONE_NONE, vcmlaq_f, v8hf, v4sf)\n+VAR2 (TERNOP_NONE_NONE_NONE_IMM, vshrntq_n_s, v8hi, v4si)\n+VAR2 (TERNOP_NONE_NONE_NONE_IMM, vshrnbq_n_s, v8hi, v4si)\n+VAR2 (TERNOP_NONE_NONE_NONE_IMM, vrshrntq_n_s, v8hi, v4si)\n+VAR2 (TERNOP_NONE_NONE_NONE_IMM, vrshrnbq_n_s, v8hi, v4si)\n+VAR2 (TERNOP_NONE_NONE_NONE_IMM, vqshrntq_n_s, v8hi, v4si)\n+VAR2 (TERNOP_NONE_NONE_NONE_IMM, vqshrnbq_n_s, v8hi, v4si)\n+VAR2 (TERNOP_NONE_NONE_NONE_IMM, vqrshrntq_n_s, v8hi, v4si)\n+VAR2 (TERNOP_NONE_NONE_IMM_UNONE, vorrq_m_n_s, v8hi, v4si)\n+VAR2 (TERNOP_NONE_NONE_IMM_UNONE, vmvnq_m_n_s, v8hi, v4si)\n+VAR1 (TERNOP_UNONE_UNONE_UNONE_UNONE, vrmlaldavhq_p_u, v4si)\n+VAR1 (TERNOP_UNONE_UNONE_UNONE_UNONE, vrev16q_m_u, v16qi)\n+VAR1 (TERNOP_UNONE_UNONE_UNONE_UNONE, vaddlvaq_p_u, v4si)\n+VAR1 (TERNOP_NONE_NONE_NONE_UNONE, vrmlsldavhxq_p_s, v4si)\n+VAR1 (TERNOP_NONE_NONE_NONE_UNONE, vrmlsldavhq_p_s, v4si)\n+VAR1 (TERNOP_NONE_NONE_NONE_UNONE, vrmlaldavhxq_p_s, v4si)\n+VAR1 (TERNOP_NONE_NONE_NONE_UNONE, vrmlaldavhq_p_s, v4si)\n+VAR1 (TERNOP_NONE_NONE_NONE_UNONE, vrev32q_m_f, v8hf)\n+VAR1 (TERNOP_NONE_NONE_NONE_UNONE, vrev16q_m_s, v16qi)\n+VAR1 (TERNOP_NONE_NONE_NONE_UNONE, vcvttq_m_f32_f16, v4sf)\n+VAR1 (TERNOP_NONE_NONE_NONE_UNONE, vcvttq_m_f16_f32, v8hf)\n+VAR1 (TERNOP_NONE_NONE_NONE_UNONE, vcvtbq_m_f32_f16, v4sf)\n+VAR1 (TERNOP_NONE_NONE_NONE_UNONE, vcvtbq_m_f16_f32, v8hf)\n+VAR1 (TERNOP_NONE_NONE_NONE_UNONE, vaddlvaq_p_s, v4si)\n+VAR1 (TERNOP_NONE_NONE_NONE_NONE, vrmlsldavhaxq_s, v4si)\n+VAR1 (TERNOP_NONE_NONE_NONE_NONE, vrmlsldavhaq_s, v4si)\n+VAR1 (TERNOP_NONE_NONE_NONE_NONE, vrmlaldavhaxq_s, v4si)"}, {"sha": "dc7c3cb75172e7455497b76eee194397034521be", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 1419, "deletions": 2, "changes": 1421, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -110,7 +110,37 @@\n \t\t\t VREV64Q_M_U VRSHLQ_M_N_S VRSHLQ_M_N_U VSHLQ_M_R_S\n \t\t\t VSHLQ_M_R_U VSLIQ_N_S VSLIQ_N_U VSRIQ_N_S VSRIQ_N_U\n \t\t\t VQDMLSDHXQ_S VQDMLSDHQ_S VQDMLADHXQ_S VQDMLADHQ_S\n-\t\t\t VMLSDAVAXQ_S VMLSDAVAQ_S VMLADAVAXQ_S])\n+\t\t\t VMLSDAVAXQ_S VMLSDAVAQ_S VMLADAVAXQ_S\n+\t\t\t VCMPGEQ_M_F VCMPGTQ_M_N_F VMLSLDAVQ_P_S VRMLALDAVHAXQ_S\n+\t\t\t VMLSLDAVXQ_P_S VFMAQ_F VMLSLDAVAQ_S VQSHRUNBQ_N_S\n+\t\t\t VQRSHRUNTQ_N_S VCMLAQ_F VMINNMAQ_M_F VFMASQ_N_F\n+\t\t\t VDUPQ_M_N_F VCMPGTQ_M_F VCMPLTQ_M_F VRMLSLDAVHQ_P_S\n+\t\t\t VQSHRUNTQ_N_S VABSQ_M_F VMAXNMAVQ_P_F VFMAQ_N_F\n+\t\t\t VRMLSLDAVHXQ_P_S VREV32Q_M_F VRMLSLDAVHAQ_S\n+\t\t\t VRMLSLDAVHAXQ_S VCMPLTQ_M_N_F VCMPNEQ_M_F VRNDAQ_M_F\n+\t\t\t VRNDPQ_M_F VADDLVAQ_P_S VQMOVUNBQ_M_S VCMPLEQ_M_F\n+\t\t\t VCMLAQ_ROT180_F VMLSLDAVAXQ_S VRNDXQ_M_F VFMSQ_F\n+\t\t\t VMINNMVQ_P_F VMAXNMVQ_P_F VPSELQ_F VCMLAQ_ROT90_F\n+\t\t\t VQMOVUNTQ_M_S VREV64Q_M_F VNEGQ_M_F VRNDMQ_M_F\n+\t\t\t VCMPLEQ_M_N_F VCMPGEQ_M_N_F VRNDNQ_M_F VMINNMAVQ_P_F\n+\t\t\t VCMPNEQ_M_N_F VRMLALDAVHQ_P_S VRMLALDAVHXQ_P_S\n+\t\t\t VCMPEQQ_M_N_F VCMLAQ_ROT270_F VMAXNMAQ_M_F VRNDQ_M_F\n+\t\t\t VMLALDAVQ_P_U VMLALDAVQ_P_S VQMOVNBQ_M_S VQMOVNBQ_M_U\n+\t\t\t VMOVLTQ_M_U VMOVLTQ_M_S VMOVNBQ_M_U VMOVNBQ_M_S\n+\t\t\t VRSHRNTQ_N_U VRSHRNTQ_N_S VORRQ_M_N_S VORRQ_M_N_U\n+\t\t\t VREV32Q_M_S VREV32Q_M_U VQRSHRNTQ_N_U VQRSHRNTQ_N_S\n+\t\t\t VMOVNTQ_M_U VMOVNTQ_M_S VMOVLBQ_M_U VMOVLBQ_M_S\n+\t\t\t VMLALDAVAQ_S VMLALDAVAQ_U VQSHRNBQ_N_U VQSHRNBQ_N_S\n+\t\t\t VSHRNBQ_N_U VSHRNBQ_N_S VRSHRNBQ_N_S VRSHRNBQ_N_U\n+\t\t\t VMLALDAVXQ_P_U VMLALDAVXQ_P_S VQMOVNTQ_M_U VQMOVNTQ_M_S\n+\t\t\t VMVNQ_M_N_U VMVNQ_M_N_S VQSHRNTQ_N_U VQSHRNTQ_N_S\n+\t\t\t VMLALDAVAXQ_S VMLALDAVAXQ_U VSHRNTQ_N_S VSHRNTQ_N_U\n+\t\t\t VCVTBQ_M_F16_F32 VCVTBQ_M_F32_F16 VCVTTQ_M_F16_F32\n+\t\t\t VCVTTQ_M_F32_F16 VCVTMQ_M_S VCVTMQ_M_U VCVTNQ_M_S\n+\t\t\t VCVTPQ_M_S VCVTPQ_M_U VCVTQ_M_N_FROM_F_S VCVTNQ_M_U\n+\t\t\t VREV16Q_M_S VREV16Q_M_U VREV32Q_M VCVTQ_M_FROM_F_U\n+\t\t\t VCVTQ_M_FROM_F_S VRMLALDAVHQ_P_U VADDLVAQ_P_U\n+\t\t\t VCVTQ_M_N_FROM_F_U])\n \n (define_mode_attr MVE_CNVT [(V8HI \"V8HF\") (V4SI \"V4SF\")\n \t\t\t    (V8HF \"V8HI\") (V4SF \"V4SI\")])\n@@ -193,7 +223,28 @@\n \t\t       (VQSHLQ_M_R_S \"s\") (VQSHLQ_M_R_U \"u\") (VSRIQ_N_S \"s\")\n \t\t       (VREV64Q_M_S \"s\") (VREV64Q_M_U \"u\") (VSRIQ_N_U \"u\")\n \t\t       (VRSHLQ_M_N_S \"s\") (VRSHLQ_M_N_U \"u\") (VSHLQ_M_R_S \"s\")\n-\t\t       (VSHLQ_M_R_U \"u\") (VSLIQ_N_S \"s\") (VSLIQ_N_U \"u\")])\n+\t\t       (VSHLQ_M_R_U \"u\") (VSLIQ_N_S \"s\") (VSLIQ_N_U \"u\")\n+\t\t       (VMLALDAVQ_P_S \"s\") (VQMOVNBQ_M_S \"s\") (VMOVLTQ_M_S \"s\")\n+\t\t       (VMOVNBQ_M_S \"s\") (VRSHRNTQ_N_S \"s\") (VORRQ_M_N_S \"s\")\n+\t\t       (VREV32Q_M_S \"s\") (VQRSHRNTQ_N_S \"s\") (VMOVNTQ_M_S \"s\")\n+\t\t       (VMOVLBQ_M_S \"s\") (VMLALDAVAQ_S \"s\") (VQSHRNBQ_N_S \"s\")\n+\t\t       (VSHRNBQ_N_S \"s\") (VRSHRNBQ_N_S \"s\") (VMLALDAVXQ_P_S \"s\")\n+\t\t       (VQMOVNTQ_M_S \"s\") (VMVNQ_M_N_S \"s\") (VQSHRNTQ_N_S \"s\")\n+\t\t       (VMLALDAVAXQ_S \"s\") (VSHRNTQ_N_S \"s\") (VMLALDAVQ_P_U \"u\")\n+\t\t       (VQMOVNBQ_M_U \"u\") (VMOVLTQ_M_U \"u\") (VMOVNBQ_M_U \"u\")\n+\t\t       (VRSHRNTQ_N_U \"u\") (VORRQ_M_N_U \"u\") (VREV32Q_M_U \"u\")\n+\t\t       (VREV16Q_M_S \"s\") (VREV16Q_M_U \"u\")\n+\t\t       (VQRSHRNTQ_N_U \"u\") (VMOVNTQ_M_U \"u\") (VMOVLBQ_M_U \"u\")\n+\t\t       (VMLALDAVAQ_U \"u\") (VQSHRNBQ_N_U \"u\") (VSHRNBQ_N_U \"u\")\n+\t\t       (VRSHRNBQ_N_U \"u\") (VMLALDAVXQ_P_U \"u\")\n+\t\t       (VMVNQ_M_N_U \"u\") (VQSHRNTQ_N_U \"u\") (VMLALDAVAXQ_U \"u\")\n+\t\t       (VQMOVNTQ_M_U \"u\") (VSHRNTQ_N_U \"u\") (VCVTMQ_M_S \"s\")\n+\t\t       (VCVTMQ_M_U \"u\") (VCVTNQ_M_S \"s\") (VCVTNQ_M_U \"u\")\n+\t\t       (VCVTPQ_M_S \"s\") (VCVTPQ_M_U \"u\") (VADDLVAQ_P_S \"s\")\n+\t\t       (VCVTQ_M_N_FROM_F_U \"u\") (VCVTQ_M_FROM_F_S \"s\")\n+\t\t       (VCVTQ_M_FROM_F_U \"u\") (VRMLALDAVHQ_P_U \"u\")\n+\t\t       (VRMLALDAVHQ_P_S \"s\") (VADDLVAQ_P_U \"u\")\n+\t\t       (VCVTQ_M_N_FROM_F_S \"s\")])\n \n (define_int_attr mode1 [(VCTP8Q \"8\") (VCTP16Q \"16\") (VCTP32Q \"32\")\n \t\t\t(VCTP64Q \"64\") (VCTP8Q_M \"8\") (VCTP16Q_M \"16\")\n@@ -205,6 +256,11 @@\n (define_mode_attr MVE_constraint [ (V16QI \"Ra\") (V8HI \"Rc\") (V4SI \"Re\")])\n (define_mode_attr MVE_pred [ (V16QI \"mve_imm_7\") (V8HI \"mve_imm_15\")\n \t\t\t\t   (V4SI \"mve_imm_31\")])\n+(define_mode_attr MVE_constraint3 [ (V8HI \"Rb\") (V4SI \"Rd\")])\n+(define_mode_attr MVE_pred3 [ (V8HI \"mve_imm_8\") (V4SI \"mve_imm_16\")])\n+\n+(define_mode_attr MVE_constraint1 [ (V8HI \"Ra\") (V4SI \"Rc\")])\n+(define_mode_attr MVE_pred1 [ (V8HI \"mve_imm_7\") (V4SI \"mve_imm_15\")])\n \n (define_int_iterator VCVTQ_TO_F [VCVTQ_TO_F_S VCVTQ_TO_F_U])\n (define_int_iterator VMVNQ_N [VMVNQ_N_U VMVNQ_N_S])\n@@ -323,6 +379,34 @@\n (define_int_iterator VSHLQ_M_R [VSHLQ_M_R_S VSHLQ_M_R_U])\n (define_int_iterator VSLIQ_N [VSLIQ_N_S VSLIQ_N_U])\n (define_int_iterator VSRIQ_N [VSRIQ_N_S VSRIQ_N_U])\n+(define_int_iterator VMLALDAVQ_P [VMLALDAVQ_P_U VMLALDAVQ_P_S])\n+(define_int_iterator VQMOVNBQ_M [VQMOVNBQ_M_S VQMOVNBQ_M_U])\n+(define_int_iterator VMOVLTQ_M [VMOVLTQ_M_U VMOVLTQ_M_S])\n+(define_int_iterator VMOVNBQ_M [VMOVNBQ_M_U VMOVNBQ_M_S])\n+(define_int_iterator VRSHRNTQ_N [VRSHRNTQ_N_U VRSHRNTQ_N_S])\n+(define_int_iterator VORRQ_M_N [VORRQ_M_N_S VORRQ_M_N_U])\n+(define_int_iterator VREV32Q_M [VREV32Q_M_S VREV32Q_M_U])\n+(define_int_iterator VREV16Q_M [VREV16Q_M_S VREV16Q_M_U])\n+(define_int_iterator VQRSHRNTQ_N [VQRSHRNTQ_N_U VQRSHRNTQ_N_S])\n+(define_int_iterator VMOVNTQ_M [VMOVNTQ_M_U VMOVNTQ_M_S])\n+(define_int_iterator VMOVLBQ_M [VMOVLBQ_M_U VMOVLBQ_M_S])\n+(define_int_iterator VMLALDAVAQ [VMLALDAVAQ_S VMLALDAVAQ_U])\n+(define_int_iterator VQSHRNBQ_N [VQSHRNBQ_N_U VQSHRNBQ_N_S])\n+(define_int_iterator VSHRNBQ_N [VSHRNBQ_N_U VSHRNBQ_N_S])\n+(define_int_iterator VRSHRNBQ_N [VRSHRNBQ_N_S VRSHRNBQ_N_U])\n+(define_int_iterator VMLALDAVXQ_P [VMLALDAVXQ_P_U VMLALDAVXQ_P_S])\n+(define_int_iterator VQMOVNTQ_M [VQMOVNTQ_M_U VQMOVNTQ_M_S])\n+(define_int_iterator VMVNQ_M_N [VMVNQ_M_N_U VMVNQ_M_N_S])\n+(define_int_iterator VQSHRNTQ_N [VQSHRNTQ_N_U VQSHRNTQ_N_S])\n+(define_int_iterator VMLALDAVAXQ [VMLALDAVAXQ_S VMLALDAVAXQ_U])\n+(define_int_iterator VSHRNTQ_N [VSHRNTQ_N_S VSHRNTQ_N_U])\n+(define_int_iterator VCVTMQ_M [VCVTMQ_M_S VCVTMQ_M_U])\n+(define_int_iterator VCVTNQ_M [VCVTNQ_M_S VCVTNQ_M_U])\n+(define_int_iterator VCVTPQ_M [VCVTPQ_M_S VCVTPQ_M_U])\n+(define_int_iterator VCVTQ_M_N_FROM_F [VCVTQ_M_N_FROM_F_S VCVTQ_M_N_FROM_F_U])\n+(define_int_iterator VCVTQ_M_FROM_F [VCVTQ_M_FROM_F_U VCVTQ_M_FROM_F_S])\n+(define_int_iterator VRMLALDAVHQ_P [VRMLALDAVHQ_P_S VRMLALDAVHQ_P_U])\n+(define_int_iterator VADDLVAQ_P [VADDLVAQ_P_U VADDLVAQ_P_S])\n \n (define_insn \"*mve_mov<mode>\"\n   [(set (match_operand:MVE_types 0 \"nonimmediate_operand\" \"=w,w,r,w,w,r,w,Us\")\n@@ -421,6 +505,22 @@\n }\n   [(set_attr \"length\" \"16\")])\n \n+;;\n+;; [vrndq_m_f])\n+;;\n+(define_insn \"mve_vrndq_m_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VRNDQ_M_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vrintzt.f%#<V_sz_elem> %q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n ;;\n ;; [vrndxq_f])\n ;;\n@@ -4266,3 +4366,1320 @@\n   \"vmladavax.s%#<V_sz_elem>\\t%0, %q2, %q3\"\n   [(set_attr \"type\" \"mve_move\")\n ])\n+;;\n+;; [vabsq_m_f])\n+;;\n+(define_insn \"mve_vabsq_m_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VABSQ_M_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vabst.f%#<V_sz_elem>\t%q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vaddlvaq_p_s vaddlvaq_p_u])\n+;;\n+(define_insn \"mve_vaddlvaq_p_<supf>v4si\"\n+  [\n+   (set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:DI 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:V4SI 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VADDLVAQ_P))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vaddlvat.<supf>32 %Q0, %R0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+;;\n+;; [vcmlaq_f])\n+;;\n+(define_insn \"mve_vcmlaq_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 3 \"s_register_operand\" \"w\")]\n+\t VCMLAQ_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vcmla.f%#<V_sz_elem>\t%q0, %q2, %q3, #0\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcmlaq_rot180_f])\n+;;\n+(define_insn \"mve_vcmlaq_rot180_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 3 \"s_register_operand\" \"w\")]\n+\t VCMLAQ_ROT180_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vcmla.f%#<V_sz_elem>\t%q0, %q2, %q3, #180\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcmlaq_rot270_f])\n+;;\n+(define_insn \"mve_vcmlaq_rot270_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 3 \"s_register_operand\" \"w\")]\n+\t VCMLAQ_ROT270_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vcmla.f%#<V_sz_elem>\t%q0, %q2, %q3, #270\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcmlaq_rot90_f])\n+;;\n+(define_insn \"mve_vcmlaq_rot90_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 3 \"s_register_operand\" \"w\")]\n+\t VCMLAQ_ROT90_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vcmla.f%#<V_sz_elem>\t%q0, %q2, %q3, #90\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcmpeqq_m_n_f])\n+;;\n+(define_insn \"mve_vcmpeqq_m_n_f<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 2 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VCMPEQQ_M_N_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vcmpt.f%#<V_sz_elem>\teq, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcmpgeq_m_f])\n+;;\n+(define_insn \"mve_vcmpgeq_m_f<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VCMPGEQ_M_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vcmpt.f%#<V_sz_elem>\tge, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcmpgeq_m_n_f])\n+;;\n+(define_insn \"mve_vcmpgeq_m_n_f<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 2 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VCMPGEQ_M_N_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vcmpt.f%#<V_sz_elem>\tge, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcmpgtq_m_f])\n+;;\n+(define_insn \"mve_vcmpgtq_m_f<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VCMPGTQ_M_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vcmpt.f%#<V_sz_elem>\tgt, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcmpgtq_m_n_f])\n+;;\n+(define_insn \"mve_vcmpgtq_m_n_f<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 2 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VCMPGTQ_M_N_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vcmpt.f%#<V_sz_elem>\tgt, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcmpleq_m_f])\n+;;\n+(define_insn \"mve_vcmpleq_m_f<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VCMPLEQ_M_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vcmpt.f%#<V_sz_elem>\tle, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcmpleq_m_n_f])\n+;;\n+(define_insn \"mve_vcmpleq_m_n_f<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 2 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VCMPLEQ_M_N_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vcmpt.f%#<V_sz_elem>\tle, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcmpltq_m_f])\n+;;\n+(define_insn \"mve_vcmpltq_m_f<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VCMPLTQ_M_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vcmpt.f%#<V_sz_elem>\tlt, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcmpltq_m_n_f])\n+;;\n+(define_insn \"mve_vcmpltq_m_n_f<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 2 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VCMPLTQ_M_N_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vcmpt.f%#<V_sz_elem>\tlt, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcmpneq_m_f])\n+;;\n+(define_insn \"mve_vcmpneq_m_f<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VCMPNEQ_M_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vcmpt.f%#<V_sz_elem>\tne, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcmpneq_m_n_f])\n+;;\n+(define_insn \"mve_vcmpneq_m_n_f<mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 2 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VCMPNEQ_M_N_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vcmpt.f%#<V_sz_elem>\tne, %q1, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcvtbq_m_f16_f32])\n+;;\n+(define_insn \"mve_vcvtbq_m_f16_f32v8hf\"\n+  [\n+   (set (match_operand:V8HF 0 \"s_register_operand\" \"=w\")\n+\t(unspec:V8HF [(match_operand:V8HF 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:V4SF 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VCVTBQ_M_F16_F32))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vcvtbt.f16.f32 %q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcvtbq_m_f32_f16])\n+;;\n+(define_insn \"mve_vcvtbq_m_f32_f16v4sf\"\n+  [\n+   (set (match_operand:V4SF 0 \"s_register_operand\" \"=w\")\n+\t(unspec:V4SF [(match_operand:V4SF 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:V8HF 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VCVTBQ_M_F32_F16))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vcvtbt.f32.f16 %q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcvttq_m_f16_f32])\n+;;\n+(define_insn \"mve_vcvttq_m_f16_f32v8hf\"\n+  [\n+   (set (match_operand:V8HF 0 \"s_register_operand\" \"=w\")\n+\t(unspec:V8HF [(match_operand:V8HF 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:V4SF 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VCVTTQ_M_F16_F32))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vcvttt.f16.f32 %q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcvttq_m_f32_f16])\n+;;\n+(define_insn \"mve_vcvttq_m_f32_f16v4sf\"\n+  [\n+   (set (match_operand:V4SF 0 \"s_register_operand\" \"=w\")\n+\t(unspec:V4SF [(match_operand:V4SF 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:V8HF 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VCVTTQ_M_F32_F16))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vcvttt.f32.f16 %q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vdupq_m_n_f])\n+;;\n+(define_insn \"mve_vdupq_m_n_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:<V_elem> 2 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VDUPQ_M_N_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vdupt.%#<V_sz_elem>\t%q0, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vfmaq_f])\n+;;\n+(define_insn \"mve_vfmaq_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 3 \"s_register_operand\" \"w\")]\n+\t VFMAQ_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vfma.f%#<V_sz_elem>\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vfmaq_n_f])\n+;;\n+(define_insn \"mve_vfmaq_n_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 3 \"s_register_operand\" \"r\")]\n+\t VFMAQ_N_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vfma.f%#<V_sz_elem>\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vfmasq_n_f])\n+;;\n+(define_insn \"mve_vfmasq_n_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 3 \"s_register_operand\" \"r\")]\n+\t VFMASQ_N_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vfmas.f%#<V_sz_elem>\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+;;\n+;; [vfmsq_f])\n+;;\n+(define_insn \"mve_vfmsq_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 3 \"s_register_operand\" \"w\")]\n+\t VFMSQ_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vfms.f%#<V_sz_elem>\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vmaxnmaq_m_f])\n+;;\n+(define_insn \"mve_vmaxnmaq_m_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VMAXNMAQ_M_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vmaxnmat.f%#<V_sz_elem>\t%q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+;;\n+;; [vmaxnmavq_p_f])\n+;;\n+(define_insn \"mve_vmaxnmavq_p_f<mode>\"\n+  [\n+   (set (match_operand:<V_elem> 0 \"s_register_operand\" \"=r\")\n+\t(unspec:<V_elem> [(match_operand:<V_elem> 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VMAXNMAVQ_P_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vmaxnmavt.f%#<V_sz_elem>\t%0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vmaxnmvq_p_f])\n+;;\n+(define_insn \"mve_vmaxnmvq_p_f<mode>\"\n+  [\n+   (set (match_operand:<V_elem> 0 \"s_register_operand\" \"=r\")\n+\t(unspec:<V_elem> [(match_operand:<V_elem> 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VMAXNMVQ_P_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vmaxnmvt.f%#<V_sz_elem>\t%0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+;;\n+;; [vminnmaq_m_f])\n+;;\n+(define_insn \"mve_vminnmaq_m_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VMINNMAQ_M_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vminnmat.f%#<V_sz_elem>\t%q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vminnmavq_p_f])\n+;;\n+(define_insn \"mve_vminnmavq_p_f<mode>\"\n+  [\n+   (set (match_operand:<V_elem> 0 \"s_register_operand\" \"=r\")\n+\t(unspec:<V_elem> [(match_operand:<V_elem> 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VMINNMAVQ_P_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vminnmavt.f%#<V_sz_elem>\t%0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+;;\n+;; [vminnmvq_p_f])\n+;;\n+(define_insn \"mve_vminnmvq_p_f<mode>\"\n+  [\n+   (set (match_operand:<V_elem> 0 \"s_register_operand\" \"=r\")\n+\t(unspec:<V_elem> [(match_operand:<V_elem> 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VMINNMVQ_P_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vminnmvt.f%#<V_sz_elem>\t%0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vmlaldavaq_s, vmlaldavaq_u])\n+;;\n+(define_insn \"mve_vmlaldavaq_<supf><mode>\"\n+  [\n+   (set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:DI 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_5 3 \"s_register_operand\" \"w\")]\n+\t VMLALDAVAQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vmlaldava.<supf>%#<V_sz_elem> %Q0, %R0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vmlaldavaxq_s])\n+;;\n+(define_insn \"mve_vmlaldavaxq_s<mode>\"\n+  [\n+   (set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:DI 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_5 3 \"s_register_operand\" \"w\")]\n+\t VMLALDAVAXQ_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vmlaldavax.s%#<V_sz_elem> %Q0, %R0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vmlaldavq_p_u, vmlaldavq_p_s])\n+;;\n+(define_insn \"mve_vmlaldavq_p_<supf><mode>\"\n+  [\n+   (set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:MVE_5 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VMLALDAVQ_P))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vmlaldavt.<supf>%#<V_sz_elem> %Q0, %R0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vmlaldavxq_p_s])\n+;;\n+(define_insn \"mve_vmlaldavxq_p_s<mode>\"\n+  [\n+   (set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:MVE_5 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VMLALDAVXQ_P_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vmlaldavxt.s%#<V_sz_elem>\\t%Q0, %R0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+;;\n+;; [vmlsldavaq_s])\n+;;\n+(define_insn \"mve_vmlsldavaq_s<mode>\"\n+  [\n+   (set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:DI 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_5 3 \"s_register_operand\" \"w\")]\n+\t VMLSLDAVAQ_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vmlsldava.s%#<V_sz_elem> %Q0, %R0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vmlsldavaxq_s])\n+;;\n+(define_insn \"mve_vmlsldavaxq_s<mode>\"\n+  [\n+   (set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:DI 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_5 3 \"s_register_operand\" \"w\")]\n+\t VMLSLDAVAXQ_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vmlsldavax.s%#<V_sz_elem> %Q0, %R0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vmlsldavq_p_s])\n+;;\n+(define_insn \"mve_vmlsldavq_p_s<mode>\"\n+  [\n+   (set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:MVE_5 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VMLSLDAVQ_P_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vmlsldavt.s%#<V_sz_elem> %Q0, %R0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vmlsldavxq_p_s])\n+;;\n+(define_insn \"mve_vmlsldavxq_p_s<mode>\"\n+  [\n+   (set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:MVE_5 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VMLSLDAVXQ_P_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vmlsldavxt.s%#<V_sz_elem> %Q0, %R0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+;;\n+;; [vmovlbq_m_u, vmovlbq_m_s])\n+;;\n+(define_insn \"mve_vmovlbq_m_<supf><mode>\"\n+  [\n+   (set (match_operand:<V_double_width> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_double_width> [(match_operand:<V_double_width> 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_3 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VMOVLBQ_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vmovlbt.<supf>%#<V_sz_elem>\t%q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+;;\n+;; [vmovltq_m_u, vmovltq_m_s])\n+;;\n+(define_insn \"mve_vmovltq_m_<supf><mode>\"\n+  [\n+   (set (match_operand:<V_double_width> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_double_width> [(match_operand:<V_double_width> 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_3 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VMOVLTQ_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vmovltt.<supf>%#<V_sz_elem>\t%q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+;;\n+;; [vmovnbq_m_u, vmovnbq_m_s])\n+;;\n+(define_insn \"mve_vmovnbq_m_<supf><mode>\"\n+  [\n+   (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VMOVNBQ_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vmovnbt.i%#<V_sz_elem>\t%q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vmovntq_m_u, vmovntq_m_s])\n+;;\n+(define_insn \"mve_vmovntq_m_<supf><mode>\"\n+  [\n+   (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VMOVNTQ_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vmovntt.i%#<V_sz_elem>\t%q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vmvnq_m_n_u, vmvnq_m_n_s])\n+;;\n+(define_insn \"mve_vmvnq_m_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_5 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_5 [(match_operand:MVE_5 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:SI 2 \"immediate_operand\" \"i\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VMVNQ_M_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vmvnt.i%#<V_sz_elem>\t%q0, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+;;\n+;; [vnegq_m_f])\n+;;\n+(define_insn \"mve_vnegq_m_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VNEGQ_M_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vnegt.f%#<V_sz_elem>\t%q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vorrq_m_n_s, vorrq_m_n_u])\n+;;\n+(define_insn \"mve_vorrq_m_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_5 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_5 [(match_operand:MVE_5 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:SI 2 \"immediate_operand\" \"i\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VORRQ_M_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vorrt.i%#<V_sz_elem>\t%q0, %2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+;;\n+;; [vpselq_f])\n+;;\n+(define_insn \"mve_vpselq_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VPSELQ_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpsel %q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vqmovnbq_m_s, vqmovnbq_m_u])\n+;;\n+(define_insn \"mve_vqmovnbq_m_<supf><mode>\"\n+  [\n+   (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VQMOVNBQ_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vqmovnbt.<supf>%#<V_sz_elem>\t%q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vqmovntq_m_u, vqmovntq_m_s])\n+;;\n+(define_insn \"mve_vqmovntq_m_<supf><mode>\"\n+  [\n+   (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VQMOVNTQ_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vqmovntt.<supf>%#<V_sz_elem>\t%q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vqmovunbq_m_s])\n+;;\n+(define_insn \"mve_vqmovunbq_m_s<mode>\"\n+  [\n+   (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VQMOVUNBQ_M_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vqmovunbt.s%#<V_sz_elem>\t%q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vqmovuntq_m_s])\n+;;\n+(define_insn \"mve_vqmovuntq_m_s<mode>\"\n+  [\n+   (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VQMOVUNTQ_M_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vqmovuntt.s%#<V_sz_elem>\t%q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vqrshrntq_n_u, vqrshrntq_n_s])\n+;;\n+(define_insn \"mve_vqrshrntq_n_<supf><mode>\"\n+  [\n+   (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 3 \"mve_imm_8\" \"Rb\")]\n+\t VQRSHRNTQ_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vqrshrnt.<supf>%#<V_sz_elem>\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vqrshruntq_n_s])\n+;;\n+(define_insn \"mve_vqrshruntq_n_s<mode>\"\n+  [\n+   (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 3 \"mve_imm_8\" \"Rb\")]\n+\t VQRSHRUNTQ_N_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vqrshrunt.s%#<V_sz_elem>\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vqshrnbq_n_u, vqshrnbq_n_s])\n+;;\n+(define_insn \"mve_vqshrnbq_n_<supf><mode>\"\n+  [\n+   (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 3 \"<MVE_pred1>\" \"<MVE_constraint1>\")]\n+\t VQSHRNBQ_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vqshrnb.<supf>%#<V_sz_elem>\\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vqshrntq_n_u, vqshrntq_n_s])\n+;;\n+(define_insn \"mve_vqshrntq_n_<supf><mode>\"\n+  [\n+   (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 3 \"mve_imm_8\" \"Rb\")]\n+\t VQSHRNTQ_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vqshrnt.<supf>%#<V_sz_elem>\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vqshrunbq_n_s])\n+;;\n+(define_insn \"mve_vqshrunbq_n_s<mode>\"\n+  [\n+   (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 3 \"immediate_operand\" \"i\")]\n+\t VQSHRUNBQ_N_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vqshrunb.s%#<V_sz_elem>\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vqshruntq_n_s])\n+;;\n+(define_insn \"mve_vqshruntq_n_s<mode>\"\n+  [\n+   (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 3 \"mve_imm_8\" \"Rb\")]\n+\t VQSHRUNTQ_N_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vqshrunt.s%#<V_sz_elem>\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vrev32q_m_f])\n+;;\n+(define_insn \"mve_vrev32q_m_fv8hf\"\n+  [\n+   (set (match_operand:V8HF 0 \"s_register_operand\" \"=w\")\n+\t(unspec:V8HF [(match_operand:V8HF 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:V8HF 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VREV32Q_M_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vrev32t.16 %q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vrev32q_m_s, vrev32q_m_u])\n+;;\n+(define_insn \"mve_vrev32q_m_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_3 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_3 [(match_operand:MVE_3 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_3 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VREV32Q_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vrev32t.%#<V_sz_elem>\t%q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vrev64q_m_f])\n+;;\n+(define_insn \"mve_vrev64q_m_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VREV64Q_M_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vrev64t.%#<V_sz_elem>\t%q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vrmlaldavhaxq_s])\n+;;\n+(define_insn \"mve_vrmlaldavhaxq_sv4si\"\n+  [\n+   (set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:DI 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:V4SI 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:V4SI 3 \"s_register_operand\" \"w\")]\n+\t VRMLALDAVHAXQ_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vrmlaldavhax.s32 %Q0, %R0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vrmlaldavhxq_p_s])\n+;;\n+(define_insn \"mve_vrmlaldavhxq_p_sv4si\"\n+  [\n+   (set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:V4SI 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:V4SI 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VRMLALDAVHXQ_P_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vrmlaldavhxt.s32 %Q0, %R0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vrmlsldavhaxq_s])\n+;;\n+(define_insn \"mve_vrmlsldavhaxq_sv4si\"\n+  [\n+   (set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:DI 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:V4SI 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:V4SI 3 \"s_register_operand\" \"w\")]\n+\t VRMLSLDAVHAXQ_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vrmlsldavhax.s32 %Q0, %R0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vrmlsldavhq_p_s])\n+;;\n+(define_insn \"mve_vrmlsldavhq_p_sv4si\"\n+  [\n+   (set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:V4SI 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:V4SI 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VRMLSLDAVHQ_P_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vrmlsldavht.s32 %Q0, %R0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vrmlsldavhxq_p_s])\n+;;\n+(define_insn \"mve_vrmlsldavhxq_p_sv4si\"\n+  [\n+   (set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:V4SI 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:V4SI 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VRMLSLDAVHXQ_P_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vrmlsldavhxt.s32 %Q0, %R0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vrndaq_m_f])\n+;;\n+(define_insn \"mve_vrndaq_m_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VRNDAQ_M_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vrintat.f%#<V_sz_elem>\t%q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vrndmq_m_f])\n+;;\n+(define_insn \"mve_vrndmq_m_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VRNDMQ_M_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vrintmt.f%#<V_sz_elem>\t%q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vrndnq_m_f])\n+;;\n+(define_insn \"mve_vrndnq_m_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VRNDNQ_M_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vrintnt.f%#<V_sz_elem>\t%q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vrndpq_m_f])\n+;;\n+(define_insn \"mve_vrndpq_m_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VRNDPQ_M_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vrintpt.f%#<V_sz_elem>\t%q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vrndxq_m_f])\n+;;\n+(define_insn \"mve_vrndxq_m_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VRNDXQ_M_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vrintxt.f%#<V_sz_elem>\t%q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vrshrnbq_n_s, vrshrnbq_n_u])\n+;;\n+(define_insn \"mve_vrshrnbq_n_<supf><mode>\"\n+  [\n+   (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 3 \"mve_imm_8\" \"Rb\")]\n+\t VRSHRNBQ_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vrshrnb.i%#<V_sz_elem>\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vrshrntq_n_u, vrshrntq_n_s])\n+;;\n+(define_insn \"mve_vrshrntq_n_<supf><mode>\"\n+  [\n+   (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 3 \"mve_imm_8\" \"Rb\")]\n+\t VRSHRNTQ_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vrshrnt.i%#<V_sz_elem>\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vshrnbq_n_u, vshrnbq_n_s])\n+;;\n+(define_insn \"mve_vshrnbq_n_<supf><mode>\"\n+  [\n+   (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 3 \"<MVE_pred3>\" \"<MVE_constraint3>\")]\n+\t VSHRNBQ_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vshrnb.i%#<V_sz_elem>\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vshrntq_n_s, vshrntq_n_u])\n+;;\n+(define_insn \"mve_vshrntq_n_<supf><mode>\"\n+  [\n+   (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")\n+\t\t\t\t (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t\t\t (match_operand:SI 3 \"<MVE_pred3>\" \"<MVE_constraint3>\")]\n+\t VSHRNTQ_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vshrnt.i%#<V_sz_elem>\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcvtmq_m_s, vcvtmq_m_u])\n+;;\n+(define_insn \"mve_vcvtmq_m_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_5 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_5 [(match_operand:MVE_5 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:<MVE_CNVT> 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VCVTMQ_M))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vcvtmt.<supf>%#<V_sz_elem>.f%#<V_sz_elem>       %q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcvtpq_m_u, vcvtpq_m_s])\n+;;\n+(define_insn \"mve_vcvtpq_m_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_5 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_5 [(match_operand:MVE_5 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:<MVE_CNVT> 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VCVTPQ_M))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vcvtpt.<supf>%#<V_sz_elem>.f%#<V_sz_elem>       %q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcvtnq_m_s, vcvtnq_m_u])\n+;;\n+(define_insn \"mve_vcvtnq_m_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_5 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_5 [(match_operand:MVE_5 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:<MVE_CNVT> 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VCVTNQ_M))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vcvtnt.<supf>%#<V_sz_elem>.f%#<V_sz_elem>       %q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcvtq_m_n_from_f_s, vcvtq_m_n_from_f_u])\n+;;\n+(define_insn \"mve_vcvtq_m_n_from_f_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_5 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_5 [(match_operand:MVE_5 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:<MVE_CNVT> 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 3 \"mve_imm_16\" \"Rd\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VCVTQ_M_N_FROM_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vcvtt.<supf>%#<V_sz_elem>.f%#<V_sz_elem>\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vrev16q_m_u, vrev16q_m_s])\n+;;\n+(define_insn \"mve_vrev16q_m_<supf>v16qi\"\n+  [\n+   (set (match_operand:V16QI 0 \"s_register_operand\" \"=w\")\n+\t(unspec:V16QI [(match_operand:V16QI 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:V16QI 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VREV16Q_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vrev16t.8 %q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcvtq_m_from_f_u, vcvtq_m_from_f_s])\n+;;\n+(define_insn \"mve_vcvtq_m_from_f_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_5 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_5 [(match_operand:MVE_5 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:<MVE_CNVT> 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VCVTQ_M_FROM_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vcvtt.<supf>%#<V_sz_elem>.f%#<V_sz_elem>\t%q0, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vrmlaldavhq_p_u vrmlaldavhq_p_s])\n+;;\n+(define_insn \"mve_vrmlaldavhq_p_<supf>v4si\"\n+  [\n+   (set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:V4SI 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:V4SI 2 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:HI 3 \"vpr_register_operand\" \"Up\")]\n+\t VRMLALDAVHQ_P))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vrmlaldavht.<supf>32 %Q0, %R0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vrmlsldavhaq_s])\n+;;\n+(define_insn \"mve_vrmlsldavhaq_sv4si\"\n+  [\n+   (set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:DI 1 \"s_register_operand\" \"0\")\n+\t\t    (match_operand:V4SI 2 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:V4SI 3 \"s_register_operand\" \"w\")]\n+\t VRMLSLDAVHAQ_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vrmlsldavha.s32 %Q0, %R0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])"}, {"sha": "c0777a32fcb9e046b6e4ecba2800326bb2245b48", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 208, "deletions": 0, "changes": 208, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -1,3 +1,211 @@\n+2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vabsq_m_f16.c: New test.\n+\t* gcc.target/arm/mve/intrinsics/vabsq_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddlvaq_p_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddlvaq_p_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmlaq_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmlaq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot180_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot180_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot270_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot270_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot90_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot90_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_n_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_n_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_n_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_n_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtbq_m_f16_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtbq_m_f32_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtmq_m_s16_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtmq_m_s32_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtmq_m_u16_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtmq_m_u32_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtnq_m_s16_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtnq_m_s32_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtnq_m_u16_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtnq_m_u32_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtpq_m_s16_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtpq_m_s32_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtpq_m_u16_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtpq_m_u32_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_m_s16_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_m_s32_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_m_u16_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_m_u32_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvttq_m_f16_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvttq_m_f32_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vdupq_m_n_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vdupq_m_n_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vfmaq_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vfmaq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vfmaq_n_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vfmaq_n_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vfmasq_n_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vfmasq_n_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vfmsq_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vfmsq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxnmaq_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxnmaq_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxnmavq_p_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxnmavq_p_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxnmvq_p_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxnmvq_p_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminnmaq_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminnmaq_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminnmavq_p_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminnmavq_p_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminnmvq_p_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminnmvq_p_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlaldavaq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlaldavaq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlaldavaq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlaldavaq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlaldavaxq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlaldavaxq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlaldavaxq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlaldavaxq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlaldavq_p_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlaldavq_p_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlaldavq_p_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlaldavq_p_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlaldavxq_p_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlaldavxq_p_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlaldavxq_p_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlaldavxq_p_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlsldavaq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlsldavaq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlsldavaxq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlsldavaxq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlsldavq_p_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlsldavq_p_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlsldavxq_p_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlsldavxq_p_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmovlbq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmovlbq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmovlbq_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmovlbq_m_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmovltq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmovltq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmovltq_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmovltq_m_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmovnbq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmovnbq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmovnbq_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmovnbq_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmovntq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmovntq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmovntq_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmovntq_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmvnq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmvnq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmvnq_m_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmvnq_m_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vnegq_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vnegq_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vorrq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vorrq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vorrq_m_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vorrq_m_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vpselq_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vpselq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqmovnbq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqmovnbq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqmovnbq_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqmovnbq_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqmovntq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqmovntq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqmovntq_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqmovntq_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqmovunbq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqmovunbq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqmovuntq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqmovuntq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshrntq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshrntq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshrntq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshrntq_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshruntq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshruntq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshrnbq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshrnbq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshrnbq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshrnbq_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshrntq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshrntq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshrntq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshrntq_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshrunbq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshrunbq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshruntq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshruntq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrev16q_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrev16q_m_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrev32q_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrev32q_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrev32q_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrev32q_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrev32q_m_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrev64q_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrev64q_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrmlaldavhaxq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrmlaldavhq_p_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrmlaldavhq_p_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrmlaldavhxq_p_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrmlsldavhaq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrmlsldavhaxq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrmlsldavhq_p_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrmlsldavhxq_p_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrndaq_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrndaq_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrndmq_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrndmq_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrndnq_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrndnq_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrndpq_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrndpq_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrndq_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrndq_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrndxq_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrndxq_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshrnbq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshrnbq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshrnbq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshrnbq_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshrntq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshrntq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshrntq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshrntq_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshrnbq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshrnbq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshrnbq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshrnbq_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshrntq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshrntq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshrntq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshrntq_n_u32.c: Likewise.\n+\n 2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>\n             Srinath Parvathaneni  <srinath.parvathaneni@arm.com>"}, {"sha": "6529ec60f47516be5dcaf4990fe65461d981df03", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabsq_m_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabsq_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabsq_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabsq_m_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vabsq_m_f16 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vabst.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vabsq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "12f64f53a0e823a7f0c0181042f2a0130ac73872", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabsq_m_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabsq_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabsq_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabsq_m_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t inactive, float32x4_t a, mve_pred16_t p)\n+{\n+  return vabsq_m_f32 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vabst.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t inactive, float32x4_t a, mve_pred16_t p)\n+{\n+  return vabsq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "8ff3020ddb288967fcb37ab6d195b1d20a75d022", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddlvaq_p_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvaq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvaq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvaq_p_s32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int64_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vaddlvaq_p_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddlvat.s32\"  }  } */\n+\n+int64_t\n+foo1 (int64_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vaddlvaq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddlvat.s32\"  }  } */"}, {"sha": "bd9ac8e49369e3e3ba978fb86931af776c93ca51", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddlvaq_p_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvaq_p_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvaq_p_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvaq_p_u32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint64_t\n+foo (uint64_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vaddlvaq_p_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddlvat.u32\"  }  } */\n+\n+uint64_t\n+foo1 (uint64_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vaddlvaq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddlvat.u32\"  }  } */"}, {"sha": "148e07b533e55be986f826e347328365472c64ea", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmlaq_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b, float16x8_t c)\n+{\n+  return vcmlaq_f16 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmla.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b, float16x8_t c)\n+{\n+  return vcmlaq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmla.f16\"  }  } */"}, {"sha": "2608b727892aa789f2b74f2d39f2ec14f388ca90", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmlaq_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b, float32x4_t c)\n+{\n+  return vcmlaq_f32 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmla.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b, float32x4_t c)\n+{\n+  return vcmlaq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmla.f32\"  }  } */"}, {"sha": "6f5f7e8a63bfe875505a42f0de5a9d3e67ed7b09", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmlaq_rot180_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot180_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot180_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot180_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b, float16x8_t c)\n+{\n+  return vcmlaq_rot180_f16 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmla.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b, float16x8_t c)\n+{\n+  return vcmlaq_rot180 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmla.f16\"  }  } */"}, {"sha": "dc0faae88981b401b71912442787e7e87d3eb77b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmlaq_rot180_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot180_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot180_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot180_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b, float32x4_t c)\n+{\n+  return vcmlaq_rot180_f32 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmla.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b, float32x4_t c)\n+{\n+  return vcmlaq_rot180 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmla.f32\"  }  } */"}, {"sha": "325d9ae83a9a47f66cf2de568c74c3004ea63622", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmlaq_rot270_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot270_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot270_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot270_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b, float16x8_t c)\n+{\n+  return vcmlaq_rot270_f16 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmla.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b, float16x8_t c)\n+{\n+  return vcmlaq_rot270 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmla.f16\"  }  } */"}, {"sha": "0d3b72feac57284dc140a4d415d973776ed384b5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmlaq_rot270_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot270_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot270_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot270_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b, float32x4_t c)\n+{\n+  return vcmlaq_rot270_f32 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmla.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b, float32x4_t c)\n+{\n+  return vcmlaq_rot270 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmla.f32\"  }  } */"}, {"sha": "a2542f8608b8bd35710fd0e0715322a3c62a69d6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmlaq_rot90_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot90_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot90_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot90_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b, float16x8_t c)\n+{\n+  return vcmlaq_rot90_f16 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmla.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b, float16x8_t c)\n+{\n+  return vcmlaq_rot90 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmla.f16\"  }  } */"}, {"sha": "e47a2749c7949e4dddd1569e02e0dcf484d7d122", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmlaq_rot90_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot90_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot90_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot90_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b, float32x4_t c)\n+{\n+  return vcmlaq_rot90_f32 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmla.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b, float32x4_t c)\n+{\n+  return vcmlaq_rot90 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmla.f32\"  }  } */"}, {"sha": "0601434574a2f9a3ebf48774d69e998663752539", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float16x8_t a, float16_t b, mve_pred16_t p)\n+{\n+  return vcmpeqq_m_n_f16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.f16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float16x8_t a, float16_t b, mve_pred16_t p)\n+{\n+  return vcmpeqq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "1d58073ef4aacd861dcf0334b4c602d06880dd74", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float32x4_t a, float32_t b, mve_pred16_t p)\n+{\n+  return vcmpeqq_m_n_f32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.f32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float32x4_t a, float32_t b, mve_pred16_t p)\n+{\n+  return vcmpeqq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "2a199da6b8db23196d7b4c21b6ebb15e5a370670", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_m_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vcmpgeq_m_f16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.f16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vcmpgeq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "87cd830268940db65a8201767d26b171eafa9a08", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_m_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vcmpgeq_m_f32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.f32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vcmpgeq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "45def8d421dcb3b9e7986078909742250976660f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_n_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float16x8_t a, float16_t b, mve_pred16_t p)\n+{\n+  return vcmpgeq_m_n_f16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.f16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float16x8_t a, float16_t b, mve_pred16_t p)\n+{\n+  return vcmpgeq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "d0730063338e799145ca1b7298b332d585313834", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_n_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float32x4_t a, float32_t b, mve_pred16_t p)\n+{\n+  return vcmpgeq_m_n_f32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.f32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float32x4_t a, float32_t b, mve_pred16_t p)\n+{\n+  return vcmpgeq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "34ceeebb2d383d44ffd07582258fc255768cd03f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_m_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vcmpgtq_m_f16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.f16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vcmpgtq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "6c457a04ec2e03f5c860238b3eb6317ce51c6a92", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_m_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vcmpgtq_m_f32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.f32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vcmpgtq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "252d4a132bf3cdaac4bac17e37b67af7e58f894b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_n_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float16x8_t a, float16_t b, mve_pred16_t p)\n+{\n+  return vcmpgtq_m_n_f16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.f16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float16x8_t a, float16_t b, mve_pred16_t p)\n+{\n+  return vcmpgtq_m_n (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "c5e5a727280103e3d04800713dfeeccc4408aaf1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_n_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float32x4_t a, float32_t b, mve_pred16_t p)\n+{\n+  return vcmpgtq_m_n_f32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.f32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float32x4_t a, float32_t b, mve_pred16_t p)\n+{\n+  return vcmpgtq_m_n (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "f295dd6214a940c2fff91a9227b34333c3a5d017", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_m_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vcmpleq_m_f16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.f16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vcmpleq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "696201227f4195e0643707f506d83605e2102b5c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_m_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vcmpleq_m_f32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.f32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vcmpleq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "e8433e015a3d9e8c33fe1409e79d2ff7a67b8339", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_m_n_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_n_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float16x8_t a, float16_t b, mve_pred16_t p)\n+{\n+  return vcmpleq_m_n_f16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.f16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float16x8_t a, float16_t b, mve_pred16_t p)\n+{\n+  return vcmpleq_m_n (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "e506345675f576891e683c485f2cc913880ae8d0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_m_n_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_n_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float32x4_t a, float32_t b, mve_pred16_t p)\n+{\n+  return vcmpleq_m_n_f32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.f32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float32x4_t a, float32_t b, mve_pred16_t p)\n+{\n+  return vcmpleq_m_n (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "33c6c560a149b901e0381905f48808ca5fbb8f4e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_m_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vcmpltq_m_f16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.f16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vcmpltq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "534e92381d647d9484b8fc7d752901407dc51017", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_m_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vcmpltq_m_f32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.f32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vcmpltq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "8cbfa356aec220ea3d85c4f95eb3a6ccff06030e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_m_n_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_n_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float16x8_t a, float16_t b, mve_pred16_t p)\n+{\n+  return vcmpltq_m_n_f16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.f16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float16x8_t a, float16_t b, mve_pred16_t p)\n+{\n+  return vcmpltq_m_n (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "4765b053096ffcc4270cf3b858fb36030407ecad", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_m_n_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_n_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float32x4_t a, float32_t b, mve_pred16_t p)\n+{\n+  return vcmpltq_m_n_f32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.f32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float32x4_t a, float32_t b, mve_pred16_t p)\n+{\n+  return vcmpltq_m_n (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "21c23cda0c68be0594520b66eb69ea587e3cb279", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_m_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vcmpneq_m_f16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.f16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vcmpneq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "a9a230efb8a129a8b0684d0a7543375983410d67", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_m_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vcmpneq_m_f32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.f32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vcmpneq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "5ab3bb9830a1328fc37f6bd92168ea3ece08cbb6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_m_n_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float16x8_t a, float16_t b, mve_pred16_t p)\n+{\n+  return vcmpneq_m_n_f16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.f16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float16x8_t a, float16_t b, mve_pred16_t p)\n+{\n+  return vcmpneq_m_n (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "17cfafbda6cfa108cf83a0b0de0c603874ea121a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_m_n_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (float32x4_t a, float32_t b, mve_pred16_t p)\n+{\n+  return vcmpneq_m_n_f32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmpt.f32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (float32x4_t a, float32_t b, mve_pred16_t p)\n+{\n+  return vcmpneq_m_n (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "665ae2e163ec73d71c6034f30d399549e825aa91", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtbq_m_f16_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtbq_m_f16_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtbq_m_f16_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtbq_m_f16_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vcvtbq_m_f16_f32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtbt.f16.f32\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vcvtbq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "0725f82c100c29b63d53fecef4d3836ec7a457c0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtbq_m_f32_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtbq_m_f32_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtbq_m_f32_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtbq_m_f32_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtbq_m_f32_f16 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtbt.f32.f16\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtbq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "fb742b84612c1ae96e7d8ad44a3d4f73d9c14ff2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtmq_m_s16_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtmq_m_s16_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtmq_m_s16_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtmq_m_s16_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtmq_m_s16_f16 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtmt.s16.f16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtmq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "0ed20bda043b83d7676869085f123366d17f6c1a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtmq_m_s32_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtmq_m_s32_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtmq_m_s32_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtmq_m_s32_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, float32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtmq_m_s32_f32 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtmt.s32.f32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, float32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtmq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "062fb973965fc633380c2d4a74f279162522e4ec", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtmq_m_u16_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtmq_m_u16_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtmq_m_u16_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtmq_m_u16_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtmq_m_u16_f16 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtmt.u16.f16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtmq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "1790beb48bc7e30dbadb6910c5df5b21d16bac57", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtmq_m_u32_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtmq_m_u32_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtmq_m_u32_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtmq_m_u32_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, float32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtmq_m_u32_f32 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtmt.u32.f32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, float32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtmq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "4c13982702cfed355c81eaee169c49d0a7e1305a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtnq_m_s16_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtnq_m_s16_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtnq_m_s16_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtnq_m_s16_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtnq_m_s16_f16 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtnt.s16.f16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtnq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "97ab45fb0794815bfc1f493be1ea7dd1d519fe08", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtnq_m_s32_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtnq_m_s32_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtnq_m_s32_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtnq_m_s32_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, float32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtnq_m_s32_f32 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtnt.s32.f32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, float32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtnq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "c5c9d2c46116551c4c3c5157438a04a5611813c8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtnq_m_u16_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtnq_m_u16_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtnq_m_u16_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtnq_m_u16_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtnq_m_u16_f16 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtnt.u16.f16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtnq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "67268b0ad2292c613ef86066f269c75d8e89c80f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtnq_m_u32_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtnq_m_u32_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtnq_m_u32_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtnq_m_u32_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, float32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtnq_m_u32_f32 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtnt.u32.f32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, float32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtnq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "0505efdad6c8b6895fcb8c6c5d372f8af714f453", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtpq_m_s16_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtpq_m_s16_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtpq_m_s16_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtpq_m_s16_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtpq_m_s16_f16 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtpt.s16.f16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtpq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "45b0338feff1e567aee24964c7db3c04fb77d1ae", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtpq_m_s32_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtpq_m_s32_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtpq_m_s32_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtpq_m_s32_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, float32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtpq_m_s32_f32 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtpt.s32.f32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, float32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtpq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "78e22d72f2505c2cd3120d90a75004803ff532d2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtpq_m_u16_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtpq_m_u16_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtpq_m_u16_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtpq_m_u16_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtpq_m_u16_f16 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtpt.u16.f16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtpq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "3deb3b0224d151fd701ea399a5ed69debd008c92", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtpq_m_u32_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtpq_m_u32_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtpq_m_u32_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtpq_m_u32_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, float32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtpq_m_u32_f32 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtpt.u32.f32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, float32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtpq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "9478d489b31ab8d03578ccb0de7f50101edfa24b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_m_s16_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_s16_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_s16_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_s16_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtq_m_s16_f16 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.s16.f16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "53279cdebabd2af6277ffcd5a47ac205422dce2b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_m_s32_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_s32_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_s32_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_s32_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, float32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtq_m_s32_f32 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.s32.f32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, float32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "261f4d9e1f79adaf12969c940f874afb885a065c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_m_u16_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_u16_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_u16_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_u16_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtq_m_u16_f16 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.u16.f16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "24ac27e3d794a56ad80a6a2da2bb39ce30b7c63a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_m_u32_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_u32_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_u32_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_u32_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, float32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtq_m_u32_f32 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.u32.f32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, float32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "79ac6861777a117c4f95d025aee47defaf90e276", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvttq_m_f16_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvttq_m_f16_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvttq_m_f16_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvttq_m_f16_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vcvttq_m_f16_f32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvttt.f16.f32\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vcvttq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "e1dff8cc60c6c1457b24884a22f6b0f14ad6e447", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvttq_m_f32_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvttq_m_f32_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvttq_m_f32_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvttq_m_f32_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vcvttq_m_f32_f16 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvttt.f32.f16\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vcvttq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "7097dd5f5edb2dc62e3ce6db1448b41404a29c35", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdupq_m_n_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_m_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_m_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_m_n_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t inactive, float16_t a, mve_pred16_t p)\n+{\n+  return vdupq_m_n_f16 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vdupt.16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t inactive, float16_t a, mve_pred16_t p)\n+{\n+  return vdupq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "98d89a305f1678e8a0c93d1dc43c040061bd3813", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdupq_m_n_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_m_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_m_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_m_n_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t inactive, float32_t a, mve_pred16_t p)\n+{\n+  return vdupq_m_n_f32 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vdupt.32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t inactive, float32_t a, mve_pred16_t p)\n+{\n+  return vdupq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "88ebc5cac092bc95f24f5937dfd5b67fab6ca751", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vfmaq_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmaq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmaq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmaq_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b, float16x8_t c)\n+{\n+  return vfmaq_f16 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vfma.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b, float16x8_t c)\n+{\n+  return vfmaq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vfma.f16\"  }  } */"}, {"sha": "0eec95821c08005fa98644f29a27136fd9e83d94", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vfmaq_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmaq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmaq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmaq_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b, float32x4_t c)\n+{\n+  return vfmaq_f32 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vfma.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b, float32x4_t c)\n+{\n+  return vfmaq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vfma.f32\"  }  } */"}, {"sha": "09c927abdddbab9d690a81761b93a2900d733cbd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vfmaq_n_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmaq_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmaq_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmaq_n_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b, float16_t c)\n+{\n+  return vfmaq_n_f16 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vfma.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b, float16_t c)\n+{\n+  return vfmaq_n (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vfma.f16\"  }  } */"}, {"sha": "ad3b7c41630acf7a4246f0a12b97cb6df58c7557", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vfmaq_n_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmaq_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmaq_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmaq_n_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b, float32_t c)\n+{\n+  return vfmaq_n_f32 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vfma.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b, float32_t c)\n+{\n+  return vfmaq_n (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vfma.f32\"  }  } */"}, {"sha": "30e797e2e1a78036e0b83e64525fa782e6f0d3d1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vfmasq_n_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmasq_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmasq_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmasq_n_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b, float16_t c)\n+{\n+  return vfmasq_n_f16 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vfmas.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b, float16_t c)\n+{\n+  return vfmasq_n (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vfmas.f16\"  }  } */"}, {"sha": "14a45a688e9ec152e8b5cba6af7752365209dd9c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vfmasq_n_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmasq_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmasq_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmasq_n_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b, float32_t c)\n+{\n+  return vfmasq_n_f32 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vfmas.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b, float32_t c)\n+{\n+  return vfmasq_n (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vfmas.f32\"  }  } */"}, {"sha": "082699a26d2e042d33eb5f1733069a95c74664b9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vfmsq_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmsq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmsq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmsq_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b, float16x8_t c)\n+{\n+  return vfmsq_f16 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vfms.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b, float16x8_t c)\n+{\n+  return vfmsq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vfms.f16\"  }  } */"}, {"sha": "3bbef3a74c926e9d1e316a460853a1f40d419c2c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vfmsq_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmsq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmsq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmsq_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b, float32x4_t c)\n+{\n+  return vfmsq_f32 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vfms.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b, float32x4_t c)\n+{\n+  return vfmsq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vfms.f32\"  }  } */"}, {"sha": "dab1111013a5339f1cac9dc835d02147581d582d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmaq_m_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmaq_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmaq_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmaq_m_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vmaxnmaq_m_f16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmaxnmat.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vmaxnmaq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "82204412ef42f049b72b087d12a89c096862e783", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmaq_m_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmaq_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmaq_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmaq_m_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vmaxnmaq_m_f32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmaxnmat.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vmaxnmaq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "011dac2c4844ef77c30522bacad261650016e548", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmavq_p_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_p_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_p_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_p_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16_t\n+foo (float16_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vmaxnmavq_p_f16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxnmavt.f16\"  }  } */\n+\n+float16_t\n+foo1 (float16_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vmaxnmavq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxnmavt.f16\"  }  } */"}, {"sha": "7bfdc6cd24b2ccad83c2a12f00fc411045553a56", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmavq_p_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_p_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_p_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_p_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32_t\n+foo (float32_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vmaxnmavq_p_f32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxnmavt.f32\"  }  } */\n+\n+float32_t\n+foo1 (float32_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vmaxnmavq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxnmavt.f32\"  }  } */"}, {"sha": "76ebd127c62aab929e1a3bfa3710b4f91768ceab", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmvq_p_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_p_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_p_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_p_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16_t\n+foo (float16_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vmaxnmvq_p_f16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxnmvt.f16\"  }  } */\n+\n+float16_t\n+foo1 (float16_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vmaxnmvq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxnmvt.f16\"  }  } */"}, {"sha": "0dc9688a4f8bd9f20cfbad133911ceede8bee6d3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmvq_p_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_p_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_p_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_p_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32_t\n+foo (float32_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vmaxnmvq_p_f32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxnmvt.f32\"  }  } */\n+\n+float32_t\n+foo1 (float32_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vmaxnmvq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmaxnmvt.f32\"  }  } */"}, {"sha": "711bc958d6f9fda934ce6d5773fe28e364e69410", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmaq_m_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmaq_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmaq_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmaq_m_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vminnmaq_m_f16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vminnmat.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vminnmaq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "7943fa14a7c36d0c28af7838e5e0c04b0aacc861", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmaq_m_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmaq_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmaq_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmaq_m_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vminnmaq_m_f32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vminnmat.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vminnmaq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "a7c709a720ef088508bb1611fdd4019ebce70bb3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmavq_p_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_p_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_p_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_p_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16_t\n+foo (float16_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vminnmavq_p_f16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vminnmavt.f16\"  }  } */\n+\n+float16_t\n+foo1 (float16_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vminnmavq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vminnmavt.f16\"  }  } */"}, {"sha": "7fdcaf3a400e431a60211f649fa9fcbdec596731", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmavq_p_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_p_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_p_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_p_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32_t\n+foo (float32_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vminnmavq_p_f32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vminnmavt.f32\"  }  } */\n+\n+float32_t\n+foo1 (float32_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vminnmavq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vminnmavt.f32\"  }  } */"}, {"sha": "e386049755b94ad3a823314a2242d41349ed2afe", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmvq_p_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_p_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_p_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_p_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16_t\n+foo (float16_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vminnmvq_p_f16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vminnmvt.f16\"  }  } */\n+\n+float16_t\n+foo1 (float16_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vminnmvq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vminnmvt.f16\"  }  } */"}, {"sha": "dd33ab38ecfada5183a1cdd1c2175125b5d95b13", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmvq_p_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_p_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_p_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_p_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32_t\n+foo (float32_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vminnmvq_p_f32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vminnmvt.f32\"  }  } */\n+\n+float32_t\n+foo1 (float32_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vminnmvq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vminnmvt.f32\"  }  } */"}, {"sha": "1aab14cfab7d4385da6da2bf52a360a6777b9053", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlaldavaq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaq_s16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int64_t a, int16x8_t b, int16x8_t c)\n+{\n+  return vmlaldavaq_s16 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldava.s16\"  }  } */\n+\n+int64_t\n+foo1 (int64_t a, int16x8_t b, int16x8_t c)\n+{\n+  return vmlaldavaq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldava.s16\"  }  } */"}, {"sha": "dbfaf09017455b37460be69535d5450b7dad0e5f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlaldavaq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaq_s32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int64_t a, int32x4_t b, int32x4_t c)\n+{\n+  return vmlaldavaq_s32 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldava.s32\"  }  } */\n+\n+int64_t\n+foo1 (int64_t a, int32x4_t b, int32x4_t c)\n+{\n+  return vmlaldavaq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldava.s32\"  }  } */"}, {"sha": "8cfbc649ae60ec07f55cbe264875805763489bcb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlaldavaq_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaq_u16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint64_t\n+foo (uint64_t a, uint16x8_t b, uint16x8_t c)\n+{\n+  return vmlaldavaq_u16 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldava.u16\"  }  } */\n+\n+uint64_t\n+foo1 (uint64_t a, uint16x8_t b, uint16x8_t c)\n+{\n+  return vmlaldavaq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldava.u16\"  }  } */"}, {"sha": "58922bc01d899d4ef163c2c8aa7a6ca5fb1f347a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlaldavaq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaq_u32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint64_t\n+foo (uint64_t a, uint32x4_t b, uint32x4_t c)\n+{\n+  return vmlaldavaq_u32 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldava.u32\"  }  } */\n+\n+uint64_t\n+foo1 (uint64_t a, uint32x4_t b, uint32x4_t c)\n+{\n+  return vmlaldavaq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldava.u32\"  }  } */"}, {"sha": "067017c6a4ed4792935d569647b61b1ef90d3695", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlaldavaxq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaxq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaxq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaxq_s16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int64_t a, int16x8_t b, int16x8_t c)\n+{\n+  return vmlaldavaxq_s16 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldavax.s16\"  }  } */\n+\n+int64_t\n+foo1 (int64_t a, int16x8_t b, int16x8_t c)\n+{\n+  return vmlaldavaxq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldavax.s16\"  }  } */"}, {"sha": "5cbbc728048dbac7f252b85f923a5c4ed577408a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlaldavaxq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaxq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaxq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaxq_s32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int64_t a, int32x4_t b, int32x4_t c)\n+{\n+  return vmlaldavaxq_s32 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldavax.s32\"  }  } */\n+\n+int64_t\n+foo1 (int64_t a, int32x4_t b, int32x4_t c)\n+{\n+  return vmlaldavaxq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldavax.s32\"  }  } */"}, {"sha": "5e2b949a642f37246906481d7b0d074aadb6f4a7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlaldavq_p_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavq_p_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavq_p_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavq_p_s16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmlaldavq_p_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldavt.s16\"  }  } */\n+\n+int64_t\n+foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmlaldavq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldavt.s16\"  }  } */"}, {"sha": "de9099935f36c5a856ec849d7d12251ccb0c5706", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlaldavq_p_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavq_p_s32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmlaldavq_p_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldavt.s32\"  }  } */\n+\n+int64_t\n+foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmlaldavq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldavt.s32\"  }  } */"}, {"sha": "a21fb90304d6b54557d766dd812d9f73a9eb89f6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlaldavq_p_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavq_p_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavq_p_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavq_p_u16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint64_t\n+foo (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vmlaldavq_p_u16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldavt.u16\"  }  } */\n+\n+uint64_t\n+foo1 (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vmlaldavq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldavt.u16\"  }  } */"}, {"sha": "c5d2eb66559265b6c3e013e1b5b2451f30aa3cab", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlaldavq_p_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavq_p_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavq_p_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavq_p_u32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint64_t\n+foo (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vmlaldavq_p_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldavt.u32\"  }  } */\n+\n+uint64_t\n+foo1 (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vmlaldavq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldavt.u32\"  }  } */"}, {"sha": "263103038518c6466a6e6a43076c0d6fb30e510a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlaldavxq_p_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavxq_p_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavxq_p_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavxq_p_s16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmlaldavxq_p_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldavxt.s16\"  }  } */\n+\n+int64_t\n+foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmlaldavxq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldavxt.s16\"  }  } */"}, {"sha": "ebd8cea9f5661c5f1fd5eafe388704376c0ba309", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlaldavxq_p_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavxq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavxq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavxq_p_s32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmlaldavxq_p_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldavxt.s32\"  }  } */\n+\n+int64_t\n+foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmlaldavxq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldavxt.s32\"  }  } */"}, {"sha": "926c3999869bfa4ed2039cffe2bddcec7f7877bd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlsldavaq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavaq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavaq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavaq_s16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int64_t a, int16x8_t b, int16x8_t c)\n+{\n+  return vmlsldavaq_s16 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsldava.s16\"  }  } */\n+\n+int64_t\n+foo1 (int64_t a, int16x8_t b, int16x8_t c)\n+{\n+  return vmlsldavaq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsldava.s16\"  }  } */"}, {"sha": "0594ab9e685192a57d907d704f8cebbaddc0f20e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlsldavaq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavaq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavaq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavaq_s32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int64_t a, int32x4_t b, int32x4_t c)\n+{\n+  return vmlsldavaq_s32 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsldava.s32\"  }  } */\n+\n+int64_t\n+foo1 (int64_t a, int32x4_t b, int32x4_t c)\n+{\n+  return vmlsldavaq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsldava.s32\"  }  } */"}, {"sha": "538f7e4e6be899316cc2cc6a2826329baa66c024", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlsldavaxq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavaxq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavaxq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavaxq_s16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int64_t a, int16x8_t b, int16x8_t c)\n+{\n+  return vmlsldavaxq_s16 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsldavax.s16\"  }  } */\n+\n+int64_t\n+foo1 (int64_t a, int16x8_t b, int16x8_t c)\n+{\n+  return vmlsldavaxq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsldavax.s16\"  }  } */"}, {"sha": "ec831a108ba18341d67e8fd6821d5d0a288289b6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlsldavaxq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavaxq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavaxq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavaxq_s32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int64_t a, int32x4_t b, int32x4_t c)\n+{\n+  return vmlsldavaxq_s32 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsldavax.s32\"  }  } */\n+\n+int64_t\n+foo1 (int64_t a, int32x4_t b, int32x4_t c)\n+{\n+  return vmlsldavaxq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsldavax.s32\"  }  } */"}, {"sha": "56ebf0ff8fdfebd5d9964dabaab9d5faa055e623", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlsldavq_p_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavq_p_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavq_p_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavq_p_s16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmlsldavq_p_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsldavt.s16\"  }  } */\n+\n+int64_t\n+foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmlsldavq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsldavt.s16\"  }  } */"}, {"sha": "8ea397502f9a367d208c6aee4c6de2135bb74dc4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlsldavq_p_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavq_p_s32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmlsldavq_p_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsldavt.s32\"  }  } */\n+\n+int64_t\n+foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmlsldavq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsldavt.s32\"  }  } */"}, {"sha": "056540f392d80197f1438354f2eed3d3a8002020", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlsldavxq_p_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavxq_p_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavxq_p_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavxq_p_s16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmlsldavxq_p_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsldavxt.s16\"  }  } */\n+\n+int64_t\n+foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmlsldavxq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsldavxt.s16\"  }  } */"}, {"sha": "121a251751286462ccd86f79fdf613f57c0477ce", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlsldavxq_p_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavxq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavxq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavxq_p_s32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmlsldavxq_p_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsldavxt.s32\"  }  } */\n+\n+int64_t\n+foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmlsldavxq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsldavxt.s32\"  }  } */"}, {"sha": "c02612c6ef2aa8b4d44667ce768821ff87f290d0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmovlbq_m_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovlbq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovlbq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovlbq_m_s16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int16x8_t a, mve_pred16_t p)\n+{\n+  return vmovlbq_m_s16 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmovlbt.s16\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int16x8_t a, mve_pred16_t p)\n+{\n+  return vmovlbq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "bdb0d262cdd9dce20eb41805e1cbcd2e380330c2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmovlbq_m_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovlbq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovlbq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovlbq_m_s8.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int8x16_t a, mve_pred16_t p)\n+{\n+  return vmovlbq_m_s8 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmovlbt.s8\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int8x16_t a, mve_pred16_t p)\n+{\n+  return vmovlbq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "6a2c7a6d0954eb6763efc79967e73f86cebdd693", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmovlbq_m_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovlbq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovlbq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovlbq_m_u16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint16x8_t a, mve_pred16_t p)\n+{\n+  return vmovlbq_m_u16 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmovlbt.u16\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint16x8_t a, mve_pred16_t p)\n+{\n+  return vmovlbq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "c305beb2aa0b6382d3027703e19aac0e33c990c5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmovlbq_m_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovlbq_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovlbq_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovlbq_m_u8.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint8x16_t a, mve_pred16_t p)\n+{\n+  return vmovlbq_m_u8 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmovlbt.u8\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint8x16_t a, mve_pred16_t p)\n+{\n+  return vmovlbq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "1676666c076a01e71aae3925bfb028f473a615db", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmovltq_m_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovltq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovltq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovltq_m_s16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int16x8_t a, mve_pred16_t p)\n+{\n+  return vmovltq_m_s16 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmovltt.s16\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int16x8_t a, mve_pred16_t p)\n+{\n+  return vmovltq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "44ddb092dbcc5c8e6dca56a1b45d27fd37c88b0a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmovltq_m_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovltq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovltq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovltq_m_s8.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int8x16_t a, mve_pred16_t p)\n+{\n+  return vmovltq_m_s8 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmovltt.s8\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int8x16_t a, mve_pred16_t p)\n+{\n+  return vmovltq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "ac886d0952d6aa447eb0014f9a759a1c0043691f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmovltq_m_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovltq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovltq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovltq_m_u16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint16x8_t a, mve_pred16_t p)\n+{\n+  return vmovltq_m_u16 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmovltt.u16\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint16x8_t a, mve_pred16_t p)\n+{\n+  return vmovltq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "cfe51effe03b1d62f0947bc894237aab3b067eeb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmovltq_m_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovltq_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovltq_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovltq_m_u8.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint8x16_t a, mve_pred16_t p)\n+{\n+  return vmovltq_m_u8 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmovltt.u8\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint8x16_t a, mve_pred16_t p)\n+{\n+  return vmovltq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "e26a051327c801318b2c8cdc3d07d59ba978ab94", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmovnbq_m_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovnbq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovnbq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovnbq_m_s16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmovnbq_m_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmovnbt.i16\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmovnbq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "72d88aa4eca3dacf27896f7977bc6a0adf87b142", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmovnbq_m_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovnbq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovnbq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovnbq_m_s32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmovnbq_m_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmovnbt.i32\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmovnbq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "0cbce927aa925d831eba9f953bd5a679ff11df7e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmovnbq_m_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovnbq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovnbq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovnbq_m_u16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vmovnbq_m_u16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmovnbt.i16\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vmovnbq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "b98f1e3f20c048e7281e69f823adb0d09c15c189", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmovnbq_m_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovnbq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovnbq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovnbq_m_u32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vmovnbq_m_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmovnbt.i32\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vmovnbq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "66036431715f3dc7a8913612e4ad33e10eb64194", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmovntq_m_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovntq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovntq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovntq_m_s16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmovntq_m_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmovntt.i16\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmovntq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "7c15d9bbcc6dac87626ea8f4f68149a631ab513c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmovntq_m_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovntq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovntq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovntq_m_s32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmovntq_m_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmovntt.i32\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmovntq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "73bd1ead829251c4f8eacc220117ba0c0060e94a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmovntq_m_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovntq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovntq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovntq_m_u16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vmovntq_m_u16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmovntt.i16\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vmovntq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "3b3cdf65e24bf2a6f5a48f9e16fa55eae85e7a2b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmovntq_m_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovntq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovntq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovntq_m_u32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vmovntq_m_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmovntt.i32\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vmovntq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "47edf29aa91fbcb510c96b99451f71ed41403d35", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmvnq_m_n_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_m_n_s16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, mve_pred16_t p)\n+{\n+  return vmvnq_m_n_s16 (inactive, 2, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmvnt.i16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, mve_pred16_t p)\n+{\n+  return vmvnq_m (inactive, 2, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "92fcbf1e765c7be7d942c67bbbf74e134efbdf67", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmvnq_m_n_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_m_n_s32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, mve_pred16_t p)\n+{\n+  return vmvnq_m_n_s32 (inactive, 2, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmvnt.i32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, mve_pred16_t p)\n+{\n+  return vmvnq_m (inactive, 2, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "cac62ca5fd13a40614e12d8e224ba37053bdf4aa", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmvnq_m_n_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_m_n_u16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, mve_pred16_t p)\n+{\n+  return vmvnq_m_n_u16 (inactive, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmvnt.i16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, mve_pred16_t p)\n+{\n+  return vmvnq_m (inactive, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "2e903231cc33e83d74c7173c6926890cce55bfe7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmvnq_m_n_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_m_n_u32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, mve_pred16_t p)\n+{\n+  return vmvnq_m_n_u32 (inactive, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmvnt.i32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, mve_pred16_t p)\n+{\n+  return vmvnq_m (inactive, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "94fba1cf666449f308cc3a216cbfb65d96b15845", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vnegq_m_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_m_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vnegq_m_f16 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vnegt.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vnegq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "978e86d36c21f2ab7f3dd85df1a21e68e985570e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vnegq_m_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_m_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t inactive, float32x4_t a, mve_pred16_t p)\n+{\n+  return vnegq_m_f32 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vnegt.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t inactive, float32x4_t a, mve_pred16_t p)\n+{\n+  return vnegq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "ea53cf81a59b0e7f76d8d6cef235146bde84c3e9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vorrq_m_n_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_m_n_s16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, mve_pred16_t p)\n+{\n+  return vorrq_m_n_s16 (a, 253, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vorrt.i16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, mve_pred16_t p)\n+{\n+  return vorrq_m_n (a, 253, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "ccdac831487d95ddad8b818a287e4b02ade8368d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vorrq_m_n_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_m_n_s32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, mve_pred16_t p)\n+{\n+  return vorrq_m_n_s32 (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vorrt.i32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, mve_pred16_t p)\n+{\n+  return vorrq_m_n (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "c17b92d0531d1c3247d54b597998843d29a11bf1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vorrq_m_n_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_m_n_u16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, mve_pred16_t p)\n+{\n+  return vorrq_m_n_u16 (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vorrt.i16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, mve_pred16_t p)\n+{\n+  return vorrq_m_n (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "686373a6aa4afededc916b59e8ec6fa50653c006", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vorrq_m_n_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_m_n_u32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, mve_pred16_t p)\n+{\n+  return vorrq_m_n_u32 (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vorrt.i32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, mve_pred16_t p)\n+{\n+  return vorrq_m_n (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "f69b63d80218d0458fd343b1ddb818c54a6376ee", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vpselq_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvpselq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvpselq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvpselq_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vpselq_f16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpsel\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vpselq (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpsel\"  }  } */"}, {"sha": "f8bbc5f033355300f669d232d51af893cfe103fd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vpselq_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvpselq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvpselq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvpselq_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vpselq_f32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpsel\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vpselq (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpsel\"  }  } */"}, {"sha": "1217cb171561131abedd312c688b20792e38f6cb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqmovnbq_m_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovnbq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovnbq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovnbq_m_s16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqmovnbq_m_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqmovnbt.s16\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqmovnbq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "3b2a5b8748266c35ddd66859dd612e06755ce740", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqmovnbq_m_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovnbq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovnbq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovnbq_m_s32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqmovnbq_m_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqmovnbt.s32\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqmovnbq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "aa506e36093f4a65cf4bf7bb887cf479195f04f7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqmovnbq_m_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovnbq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovnbq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovnbq_m_u16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vqmovnbq_m_u16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqmovnbt.u16\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vqmovnbq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "864be99d4a1ecc4f3dc6fb4c3a644b3b8ef09b26", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqmovnbq_m_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovnbq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovnbq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovnbq_m_u32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vqmovnbq_m_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqmovnbt.u32\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vqmovnbq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "86b921e88a91f241c1a5518e3c66a708715a38ec", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqmovntq_m_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovntq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovntq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovntq_m_s16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqmovntq_m_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqmovntt.s16\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqmovntq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "688a71ac192f6b9003713445845547cc6a0bfb48", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqmovntq_m_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovntq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovntq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovntq_m_s32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqmovntq_m_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqmovntt.s32\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqmovntq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "b2ae37e69cc986ed574225245d3eb10feee60798", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqmovntq_m_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovntq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovntq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovntq_m_u16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vqmovntq_m_u16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqmovntt.u16\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vqmovntq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "cab5bfb91ad6e4511cdf11770be42baa4a2d4e58", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqmovntq_m_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovntq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovntq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovntq_m_u32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vqmovntq_m_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqmovntt.u32\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vqmovntq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "c5c8e94968cf3f5d3c5001c6b561738726ebc091", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqmovunbq_m_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovunbq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovunbq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovunbq_m_s16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqmovunbq_m_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqmovunbt.s16\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqmovunbq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "a9c2907aaac025541fa08b2dc023e2e1bfcfa2b3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqmovunbq_m_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovunbq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovunbq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovunbq_m_s32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqmovunbq_m_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqmovunbt.s32\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqmovunbq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "0bb12fb400ae803980f601a66f8aa51b78b0d240", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqmovuntq_m_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovuntq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovuntq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovuntq_m_s16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqmovuntq_m_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqmovuntt.s16\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqmovuntq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "d2b438fae1852e9172765d817f9d1058ef9ba759", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqmovuntq_m_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovuntq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovuntq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqmovuntq_m_s32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqmovuntq_m_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqmovuntt.s32\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqmovuntq_m (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "c1e2978d7d6bddb18d890a0b8f59194cb109b4e5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshrntq_n_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrntq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrntq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrntq_n_s16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int16x8_t b)\n+{\n+  return vqrshrntq_n_s16 (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshrnt.s16\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int16x8_t b)\n+{\n+  return vqrshrntq (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshrnt.s16\"  }  } */"}, {"sha": "4a9d3744d17852b0a8b855ecd62a7b2093d62885", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshrntq_n_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrntq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrntq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrntq_n_s32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int32x4_t b)\n+{\n+  return vqrshrntq_n_s32 (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshrnt.s32\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int32x4_t b)\n+{\n+  return vqrshrntq (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshrnt.s32\"  }  } */"}, {"sha": "64df22dddb1040d0f22c6879fea32621a892cc1e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshrntq_n_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrntq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrntq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrntq_n_u16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint16x8_t b)\n+{\n+  return vqrshrntq_n_u16 (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshrnt.u16\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint16x8_t b)\n+{\n+  return vqrshrntq (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshrnt.u16\"  }  } */"}, {"sha": "3a464c8cbea25943d384ed390b24c8aa80256128", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshrntq_n_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrntq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrntq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrntq_n_u32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint32x4_t b)\n+{\n+  return vqrshrntq_n_u32 (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshrnt.u32\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint32x4_t b)\n+{\n+  return vqrshrntq (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshrnt.u32\"  }  } */"}, {"sha": "eeb7f173f1ed60334032d2ed2321a6448c615a43", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshruntq_n_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshruntq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshruntq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshruntq_n_s16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, int16x8_t b)\n+{\n+  return vqrshruntq_n_s16 (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshrunt.s16\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, int16x8_t b)\n+{\n+  return vqrshruntq (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshrunt.s16\"  }  } */"}, {"sha": "120d41ae2a3b5fc7bc512817b5ab08c9d785c15e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshruntq_n_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshruntq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshruntq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshruntq_n_s32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, int32x4_t b)\n+{\n+  return vqrshruntq_n_s32 (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshrunt.s32\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, int32x4_t b)\n+{\n+  return vqrshruntq (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqrshrunt.s32\"  }  } */"}, {"sha": "698e347abec1c0812c41d67a963239bb966de658", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshrnbq_n_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrnbq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrnbq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrnbq_n_s16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int16x8_t b)\n+{\n+  return vqshrnbq_n_s16 (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshrnb.s16\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int16x8_t b)\n+{\n+  return vqshrnbq (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshrnb.s16\"  }  } */"}, {"sha": "01d1453c49b48e386775574054d6d59f8d6261ff", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshrnbq_n_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrnbq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrnbq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrnbq_n_s32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int32x4_t b)\n+{\n+  return vqshrnbq_n_s32 (a, b, 2);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshrnb.s32\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int32x4_t b)\n+{\n+  return vqshrnbq (a, b, 2);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshrnb.s32\"  }  } */"}, {"sha": "3ad9d94d1cf71ae4eee58ee71200ebf2ff7ddce0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshrnbq_n_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrnbq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrnbq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrnbq_n_u16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint16x8_t b)\n+{\n+  return vqshrnbq_n_u16 (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshrnb.u16\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint16x8_t b)\n+{\n+  return vqshrnbq (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshrnb.u16\"  }  } */"}, {"sha": "9e8a9dd9850164964da750cf41c94c972e64d37f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshrnbq_n_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrnbq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrnbq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrnbq_n_u32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint32x4_t b)\n+{\n+  return vqshrnbq_n_u32 (a, b, 15);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshrnb.u32\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint32x4_t b)\n+{\n+  return vqshrnbq (a, b, 15);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshrnb.u32\"  }  } */"}, {"sha": "309a11c472fe82b20cf962f4f5e637c6d76a2f1e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshrntq_n_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrntq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrntq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrntq_n_s16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int16x8_t b)\n+{\n+  return vqshrntq_n_s16 (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshrnt.s16\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int16x8_t b)\n+{\n+  return vqshrntq (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshrnt.s16\"  }  } */"}, {"sha": "f595427e7e6ca0e9128a362204d132c1fb6247b8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshrntq_n_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrntq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrntq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrntq_n_s32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int32x4_t b)\n+{\n+  return vqshrntq_n_s32 (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshrnt.s32\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int32x4_t b)\n+{\n+  return vqshrntq (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshrnt.s32\"  }  } */"}, {"sha": "c07281533066fa4b87be4305bcc5e04ce91909a5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshrntq_n_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrntq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrntq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrntq_n_u16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint16x8_t b)\n+{\n+  return vqshrntq_n_u16 (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshrnt.u16\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint16x8_t b)\n+{\n+  return vqshrntq (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshrnt.u16\"  }  } */"}, {"sha": "cddae95444affef657fbf9bb9f0fa18abf77e485", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshrntq_n_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrntq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrntq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrntq_n_u32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint32x4_t b)\n+{\n+  return vqshrntq_n_u32 (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshrnt.u32\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint32x4_t b)\n+{\n+  return vqshrntq (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshrnt.u32\"  }  } */"}, {"sha": "833be37ff95e3aef7e5b1c726c0619da1c5956df", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshrunbq_n_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrunbq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrunbq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrunbq_n_s16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, int16x8_t b)\n+{\n+  return vqshrunbq_n_s16 (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshrunb.s16\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, int16x8_t b)\n+{\n+  return vqshrunbq (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshrunb.s16\"  }  } */"}, {"sha": "414aaae26d3a92fe92bae8cf9e3893666fbe3e9f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshrunbq_n_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrunbq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrunbq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrunbq_n_s32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, int32x4_t b)\n+{\n+  return vqshrunbq_n_s32 (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshrunb.s32\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, int32x4_t b)\n+{\n+  return vqshrunbq (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshrunb.s32\"  }  } */"}, {"sha": "09be21c0369cacb21e30183cc4f69985269b8be6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshruntq_n_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshruntq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshruntq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshruntq_n_s16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, int16x8_t b)\n+{\n+  return vqshruntq_n_s16 (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshrunt.s16\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, int16x8_t b)\n+{\n+  return vqshruntq (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshrunt.s16\"  }  } */"}, {"sha": "cd60207e72a8f90df930feaf59efb959a27e42f0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshruntq_n_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshruntq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshruntq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshruntq_n_s32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, int32x4_t b)\n+{\n+  return vqshruntq_n_s32 (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshrunt.s32\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, int32x4_t b)\n+{\n+  return vqshruntq (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vqshrunt.s32\"  }  } */"}, {"sha": "dfb02045a9f21bec5a0af338b2695b1b9fceddf5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrev16q_m_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev16q_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev16q_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev16q_m_s8.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, mve_pred16_t p)\n+{\n+  return vrev16q_m_s8 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrev16t.8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, mve_pred16_t p)\n+{\n+  return vrev16q_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "07bd73350a3ca45a437a3abb985f78276566ef87", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrev16q_m_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev16q_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev16q_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev16q_m_u8.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint8x16_t a, mve_pred16_t p)\n+{\n+  return vrev16q_m_u8 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrev16t.8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint8x16_t a, mve_pred16_t p)\n+{\n+  return vrev16q_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "c2d1823776867864a64745c9373744fae1739cbf", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrev32q_m_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev32q_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev32q_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev32q_m_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vrev32q_m_f16 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrev32t.16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vrev32q_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "84b23d9d9ae7e216c74ed1bbf989908f8e4179bb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrev32q_m_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev32q_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev32q_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev32q_m_s16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, mve_pred16_t p)\n+{\n+  return vrev32q_m_s16 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrev32t.16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, mve_pred16_t p)\n+{\n+  return vrev32q_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "e2d27485fc92572440d42b7ad5acce34005fbea4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrev32q_m_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev32q_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev32q_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev32q_m_s8.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, mve_pred16_t p)\n+{\n+  return vrev32q_m_s8 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrev32t.8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, mve_pred16_t p)\n+{\n+  return vrev32q_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "18ef6de38e6464b516a1def79318e5caa41d33c2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrev32q_m_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev32q_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev32q_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev32q_m_u16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint16x8_t a, mve_pred16_t p)\n+{\n+  return vrev32q_m_u16 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrev32t.16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint16x8_t a, mve_pred16_t p)\n+{\n+  return vrev32q_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "a0c9e99bebe8a453286706441d733ed3b3f4817c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrev32q_m_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev32q_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev32q_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev32q_m_u8.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint8x16_t a, mve_pred16_t p)\n+{\n+  return vrev32q_m_u8 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrev32t.8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint8x16_t a, mve_pred16_t p)\n+{\n+  return vrev32q_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "0bc493fa32a8848d1bcd638b2aaa73a6f01689cd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrev64q_m_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_m_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vrev64q_m_f16 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrev64t.16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vrev64q_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "0289d694ec8ea36bd0d62277445eb0d95298db23", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrev64q_m_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_m_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t inactive, float32x4_t a, mve_pred16_t p)\n+{\n+  return vrev64q_m_f32 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrev64t.32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t inactive, float32x4_t a, mve_pred16_t p)\n+{\n+  return vrev64q_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "100eca882a2da87ec50e5986ae2d6033421a0ae6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrmlaldavhaxq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlaldavhaxq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlaldavhaxq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlaldavhaxq_s32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int64_t a, int32x4_t b, int32x4_t c)\n+{\n+  return vrmlaldavhaxq_s32 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vrmlaldavhax.s32\"  }  } */\n+\n+int64_t\n+foo1 (int64_t a, int32x4_t b, int32x4_t c)\n+{\n+  return vrmlaldavhaxq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vrmlaldavhax.s32\"  }  } */"}, {"sha": "7c435f1f29d8887b50448ffd74ceeffcca4c0393", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrmlaldavhq_p_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlaldavhq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlaldavhq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlaldavhq_p_s32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vrmlaldavhq_p_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vrmlaldavht.s32\"  }  } */\n+\n+int64_t\n+foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vrmlaldavhq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vrmlaldavht.s32\"  }  } */"}, {"sha": "4a0a7aae60ff9c4fee2eef0e50509e74121cec9e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrmlaldavhq_p_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlaldavhq_p_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlaldavhq_p_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlaldavhq_p_u32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint64_t\n+foo (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vrmlaldavhq_p_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vrmlaldavht.u32\"  }  } */\n+\n+uint64_t\n+foo1 (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vrmlaldavhq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vrmlaldavht.u32\"  }  } */"}, {"sha": "51c8bbd36ac6d96a8e4c35895dcbc1a460aa9250", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrmlaldavhxq_p_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlaldavhxq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlaldavhxq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlaldavhxq_p_s32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vrmlaldavhxq_p_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vrmlaldavhxt.s32\"  }  } */\n+\n+int64_t\n+foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vrmlaldavhxq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vrmlaldavhxt.s32\"  }  } */"}, {"sha": "94ef2c71941d33d5a3488c0aebaf373af24612d4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrmlsldavhaq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlsldavhaq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlsldavhaq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlsldavhaq_s32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int64_t a, int32x4_t b, int32x4_t c)\n+{\n+  return vrmlsldavhaq_s32 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vrmlsldavha.s32\"  }  } */\n+\n+int64_t\n+foo1 (int64_t a, int32x4_t b, int32x4_t c)\n+{\n+  return vrmlsldavhaq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vrmlsldavha.s32\"  }  } */"}, {"sha": "9a3d0b04f7f5b2d9bdcf2c78b39cc3c1113bd6d2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrmlsldavhaxq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlsldavhaxq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlsldavhaxq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlsldavhaxq_s32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int64_t a, int32x4_t b, int32x4_t c)\n+{\n+  return vrmlsldavhaxq_s32 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vrmlsldavhax.s32\"  }  } */\n+\n+int64_t\n+foo1 (int64_t a, int32x4_t b, int32x4_t c)\n+{\n+  return vrmlsldavhaxq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vrmlsldavhax.s32\"  }  } */"}, {"sha": "157a610c2618cd2f09db7c7a2557f0b7e94963ce", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrmlsldavhq_p_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlsldavhq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlsldavhq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlsldavhq_p_s32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vrmlsldavhq_p_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vrmlsldavht.s32\"  }  } */\n+\n+int64_t\n+foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vrmlsldavhq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vrmlsldavht.s32\"  }  } */"}, {"sha": "3c31665eab99022f91e9bf5a6499ad691ffa2895", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrmlsldavhxq_p_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlsldavhxq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlsldavhxq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlsldavhxq_p_s32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vrmlsldavhxq_p_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vrmlsldavhxt.s32\"  }  } */\n+\n+int64_t\n+foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vrmlsldavhxq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vrmlsldavhxt.s32\"  }  } */"}, {"sha": "cc217d7b60b7ebc5a4ae0f2cd393189a5e40185d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrndaq_m_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndaq_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndaq_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndaq_m_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vrndaq_m_f16 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrintat.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vrndaq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "f71372af51855d9f93a565fcf1b6577735260372", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrndaq_m_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndaq_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndaq_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndaq_m_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t inactive, float32x4_t a, mve_pred16_t p)\n+{\n+  return vrndaq_m_f32 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrintat.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t inactive, float32x4_t a, mve_pred16_t p)\n+{\n+  return vrndaq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "9c97109fa893271934481e408e6c0927d1457b7d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrndmq_m_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndmq_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndmq_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndmq_m_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vrndmq_m_f16 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrintmt.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vrndmq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "e3ed2652a7eaf41410c0c6429822bcab2d30aa31", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrndmq_m_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndmq_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndmq_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndmq_m_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t inactive, float32x4_t a, mve_pred16_t p)\n+{\n+  return vrndmq_m_f32 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrintmt.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t inactive, float32x4_t a, mve_pred16_t p)\n+{\n+  return vrndmq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "17d6e15dc17fe6e523329f878f25b6dde7b446e2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrndnq_m_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndnq_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndnq_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndnq_m_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vrndnq_m_f16 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrintnt.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vrndnq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "28952c76598ecb318afbdd550aa2d879fdb04c46", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrndnq_m_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndnq_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndnq_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndnq_m_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t inactive, float32x4_t a, mve_pred16_t p)\n+{\n+  return vrndnq_m_f32 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrintnt.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t inactive, float32x4_t a, mve_pred16_t p)\n+{\n+  return vrndnq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "5a6f414505edfa1bec46a8a03b12b461a046ca27", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrndpq_m_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndpq_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndpq_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndpq_m_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vrndpq_m_f16 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrintpt.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vrndpq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "eef9fc896a2e9cc12f447831670c76a134324f71", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrndpq_m_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndpq_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndpq_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndpq_m_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t inactive, float32x4_t a, mve_pred16_t p)\n+{\n+  return vrndpq_m_f32 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrintpt.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t inactive, float32x4_t a, mve_pred16_t p)\n+{\n+  return vrndpq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "ced3b3be997c3d050d73337c5dbedd0a2f0f6ba8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrndq_m_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndq_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndq_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndq_m_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vrndq_m_f16 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrintzt.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vrndq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "27a901550b0aa78875b6148d4d618eb5fe6a4b05", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrndq_m_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndq_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndq_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndq_m_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t inactive, float32x4_t a, mve_pred16_t p)\n+{\n+  return vrndq_m_f32 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrintzt.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t inactive, float32x4_t a, mve_pred16_t p)\n+{\n+  return vrndq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "fedc6ed1d27fa71196af465160afd068190003a2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrndxq_m_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndxq_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndxq_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndxq_m_f16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vrndxq_m_f16 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrintxt.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vrndxq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "52c2dc1ae70cf628af355e443a043a77e94b4cfe", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrndxq_m_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndxq_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndxq_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndxq_m_f32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t inactive, float32x4_t a, mve_pred16_t p)\n+{\n+  return vrndxq_m_f32 (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrintxt.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t inactive, float32x4_t a, mve_pred16_t p)\n+{\n+  return vrndxq_m (inactive, a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "a93228c9806ff170bbcfab0782a4adecb6005fa3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshrnbq_n_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrnbq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrnbq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrnbq_n_s16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int16x8_t b)\n+{\n+  return vrshrnbq_n_s16 (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshrnb.i16\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int16x8_t b)\n+{\n+  return vrshrnbq (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshrnb.i16\"  }  } */"}, {"sha": "65435d042254a795569ab7edfa72cb743ce7f8ec", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshrnbq_n_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrnbq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrnbq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrnbq_n_s32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int32x4_t b)\n+{\n+  return vrshrnbq_n_s32 (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshrnb.i32\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int32x4_t b)\n+{\n+  return vrshrnbq (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshrnb.i32\"  }  } */"}, {"sha": "0f72b27d570757a9be0844ccd32ff5895b502fce", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshrnbq_n_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrnbq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrnbq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrnbq_n_u16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint16x8_t b)\n+{\n+  return vrshrnbq_n_u16 (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshrnb.i16\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint16x8_t b)\n+{\n+  return vrshrnbq (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshrnb.i16\"  }  } */"}, {"sha": "3c497d6dce14b852ee12d56e4098d1d3de289972", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshrnbq_n_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrnbq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrnbq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrnbq_n_u32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint32x4_t b)\n+{\n+  return vrshrnbq_n_u32 (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshrnb.i32\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint32x4_t b)\n+{\n+  return vrshrnbq (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshrnb.i32\"  }  } */"}, {"sha": "12f82cd9acb9b964b00b9c0a13ffa68174c04b87", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshrntq_n_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrntq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrntq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrntq_n_s16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int16x8_t b)\n+{\n+  return vrshrntq_n_s16 (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshrnt.i16\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int16x8_t b)\n+{\n+  return vrshrntq (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshrnt.i16\"  }  } */"}, {"sha": "6f31cff8e96b40be2223d9b686a94fc527321411", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshrntq_n_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrntq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrntq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrntq_n_s32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int32x4_t b)\n+{\n+  return vrshrntq_n_s32 (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshrnt.i32\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int32x4_t b)\n+{\n+  return vrshrntq (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshrnt.i32\"  }  } */"}, {"sha": "7764009da019f32bc11e4fbd57b9eba54360304f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshrntq_n_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrntq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrntq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrntq_n_u16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint16x8_t b)\n+{\n+  return vrshrntq_n_u16 (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshrnt.i16\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint16x8_t b)\n+{\n+  return vrshrntq (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshrnt.i16\"  }  } */"}, {"sha": "199f88a02e25ef08b8379a352a16d0e18e50c49b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshrntq_n_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrntq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrntq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrntq_n_u32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint32x4_t b)\n+{\n+  return vrshrntq_n_u32 (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshrnt.i32\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint32x4_t b)\n+{\n+  return vrshrntq (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshrnt.i32\"  }  } */"}, {"sha": "249e85abee876eed61f21b81ed176663ec4659d4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshrnbq_n_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrnbq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrnbq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrnbq_n_s16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int16x8_t b)\n+{\n+  return vshrnbq_n_s16 (a, b, 8);\n+}\n+\n+/* { dg-final { scan-assembler \"vshrnb.i16\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int16x8_t b)\n+{\n+  return vshrnbq (a, b, 8);\n+}\n+\n+/* { dg-final { scan-assembler \"vshrnb.i16\"  }  } */"}, {"sha": "19391aa05ef7b3a726677734323f10f7adc1be31", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshrnbq_n_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrnbq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrnbq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrnbq_n_s32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int32x4_t b)\n+{\n+  return vshrnbq_n_s32 (a, b, 16);\n+}\n+\n+/* { dg-final { scan-assembler \"vshrnb.i32\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int32x4_t b)\n+{\n+  return vshrnbq (a, b, 16);\n+}\n+\n+/* { dg-final { scan-assembler \"vshrnb.i32\"  }  } */"}, {"sha": "f9973a7ff69b73bf7bb2a24ca0bdd060eaca268b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshrnbq_n_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrnbq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrnbq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrnbq_n_u16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint16x8_t b)\n+{\n+  return vshrnbq_n_u16 (a, b, 8);\n+}\n+\n+/* { dg-final { scan-assembler \"vshrnb.i16\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint16x8_t b)\n+{\n+  return vshrnbq (a, b, 8);\n+}\n+\n+/* { dg-final { scan-assembler \"vshrnb.i16\"  }  } */"}, {"sha": "2b0007b8052c56a0e77c58fd0fef06f58d6bb47d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshrnbq_n_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrnbq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrnbq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrnbq_n_u32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint32x4_t b)\n+{\n+  return vshrnbq_n_u32 (a, b, 16);\n+}\n+\n+/* { dg-final { scan-assembler \"vshrnb.i32\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint32x4_t b)\n+{\n+  return vshrnbq (a, b, 16);\n+}\n+\n+/* { dg-final { scan-assembler \"vshrnb.i32\"  }  } */"}, {"sha": "b16cd95b640c108cb599f126f1537fee0df4fdd4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshrntq_n_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrntq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrntq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrntq_n_s16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int16x8_t b)\n+{\n+  return vshrntq_n_s16 (a, b, 8);\n+}\n+\n+/* { dg-final { scan-assembler \"vshrnt.i16\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int16x8_t b)\n+{\n+  return vshrntq (a, b, 8);\n+}\n+\n+/* { dg-final { scan-assembler \"vshrnt.i16\"  }  } */"}, {"sha": "9521a425c3d3266fdfbf96c16bfa578189e5274b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshrntq_n_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrntq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrntq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrntq_n_s32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int32x4_t b)\n+{\n+  return vshrntq_n_s32 (a, b, 16);\n+}\n+\n+/* { dg-final { scan-assembler \"vshrnt.i32\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int32x4_t b)\n+{\n+  return vshrntq (a, b, 16);\n+}\n+\n+/* { dg-final { scan-assembler \"vshrnt.i32\"  }  } */"}, {"sha": "19362a30c8a99a299c9fa2b752fe4b614b67e945", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshrntq_n_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrntq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrntq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrntq_n_u16.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint16x8_t b)\n+{\n+  return vshrntq_n_u16 (a, b, 8);\n+}\n+\n+/* { dg-final { scan-assembler \"vshrnt.i16\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint16x8_t b)\n+{\n+  return vshrntq (a, b, 8);\n+}\n+\n+/* { dg-final { scan-assembler \"vshrnt.i16\"  }  } */"}, {"sha": "154c74bed0a29328d8efacbe930ea07428ab7ebe", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshrntq_n_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrntq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3678b4464a8dd9cc9386145b4acd2d3333bc071/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrntq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrntq_n_u32.c?ref=e3678b4464a8dd9cc9386145b4acd2d3333bc071", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint32x4_t b)\n+{\n+  return vshrntq_n_u32 (a, b, 16);\n+}\n+\n+/* { dg-final { scan-assembler \"vshrnt.i32\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint32x4_t b)\n+{\n+  return vshrntq (a, b, 16);\n+}\n+\n+/* { dg-final { scan-assembler \"vshrnt.i32\"  }  } */"}]}