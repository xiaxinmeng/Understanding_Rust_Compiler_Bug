{"sha": "49706e39a2b65519ef173e55637c41c899e0b968", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk3MDZlMzlhMmI2NTUxOWVmMTczZTU1NjM3YzQxYzg5OWUwYjk2OA==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2010-06-04T15:15:38Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2010-06-04T15:15:38Z"}, "message": "re PR c/25880 (improve message of warning for discarding qualifiers)\n\n2010-06-04  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR c/25880\n\t* c-objc-common.c (c_tree_printer): Handle %V, %v and %#v.\n\t* c-format.c (gcc_diag_flag_specs): Add hash.\n\t(gcc_cxxdiag_flag_specs): Use gcc_diag_flag_specs directly.\n\t(gcc_tdiag_char_table,gcc_cdiag_char_table): Handle %V and %v.\n\t* c-pretty-print.c (pp_c_cv_qualifier): Rename as\n\tpp_c_cv_qualifiers. Handle qualifiers spelling here.\n\t(pp_c_type_qualifier_list): Call the function above.\n\t* c-pretty-print.h (pp_c_cv_qualifiers): Declare.\n\t* c-typeck.c (handle_warn_cast_qual): Print qualifiers.\n\t(WARN_FOR_QUALIFIERS): New macro.\n\t(convert_for_assignment): Use it.\ntestsuite/\n\t* gcc.dg/assign-warn-2.c: Update.\n\t* gcc.dg/cpp/line3.c: Update.\n\t* gcc.dg/c99-array-lval-8.c: Update.\n\t* gcc.dg/cast-qual-2.c: Update.\n\t* gcc.dg/c99-arraydecl-3.c:  Update.\n\t* gcc.dg/assign-warn-1.c:  Update.\n\t* gcc.dg/format/gcc_diag-1.c:  Update.\n\nFrom-SVN: r160274", "tree": {"sha": "2537a481171fe231924d117a943f8cd28aebff61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2537a481171fe231924d117a943f8cd28aebff61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49706e39a2b65519ef173e55637c41c899e0b968", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49706e39a2b65519ef173e55637c41c899e0b968", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49706e39a2b65519ef173e55637c41c899e0b968", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49706e39a2b65519ef173e55637c41c899e0b968/comments", "author": null, "committer": null, "parents": [{"sha": "b13ea8bd6dc138446ad640d934fc22498d915e82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b13ea8bd6dc138446ad640d934fc22498d915e82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b13ea8bd6dc138446ad640d934fc22498d915e82"}], "stats": {"total": 304, "additions": 205, "deletions": 99}, "files": [{"sha": "72d52cec7e82c118824321b9c73c673702489fb0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49706e39a2b65519ef173e55637c41c899e0b968/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49706e39a2b65519ef173e55637c41c899e0b968/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=49706e39a2b65519ef173e55637c41c899e0b968", "patch": "@@ -1,3 +1,18 @@\n+2010-06-04  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c/25880\n+\t* c-objc-common.c (c_tree_printer): Handle %V, %v and %#v.\n+\t* c-format.c (gcc_diag_flag_specs): Add hash.\n+\t(gcc_cxxdiag_flag_specs): Use gcc_diag_flag_specs directly.\n+\t(gcc_tdiag_char_table,gcc_cdiag_char_table): Handle %V and %v.\n+\t* c-pretty-print.c (pp_c_cv_qualifier): Rename as\n+\tpp_c_cv_qualifiers. Handle qualifiers spelling here.\n+\t(pp_c_type_qualifier_list): Call the function above.\n+\t* c-pretty-print.h (pp_c_cv_qualifiers): Declare.\n+\t* c-typeck.c (handle_warn_cast_qual): Print qualifiers.\n+\t(WARN_FOR_QUALIFIERS): New macro.\n+\t(convert_for_assignment): Use it.\n+\n 2010-06-04  Kai Tietz  <kai.tietz@onevision.com>\n \n \t* config/i386/cygming.h (ASM_GENERATE_INTERNAL_LABEL): Prefix"}, {"sha": "2c73ead370ce486231d98cb7c89fe53a051ba3d7", "filename": "gcc/c-format.c", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49706e39a2b65519ef173e55637c41c899e0b968/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49706e39a2b65519ef173e55637c41c899e0b968/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=49706e39a2b65519ef173e55637c41c899e0b968", "patch": "@@ -421,6 +421,7 @@ static const format_flag_pair gcc_gfc_flag_pairs[] =\n static const format_flag_spec gcc_diag_flag_specs[] =\n {\n   { '+',  0, 0, N_(\"'+' flag\"),        N_(\"the '+' printf flag\"),              STD_C89 },\n+  { '#',  0, 0, N_(\"'#' flag\"),        N_(\"the '#' printf flag\"),              STD_C89 },\n   { 'q',  0, 0, N_(\"'q' flag\"),        N_(\"the 'q' diagnostic flag\"),          STD_C89 },\n   { 'p',  0, 0, N_(\"precision\"),       N_(\"precision in printf format\"),       STD_C89 },\n   { 'L',  0, 0, N_(\"length modifier\"), N_(\"length modifier in printf format\"), STD_C89 },\n@@ -429,16 +430,7 @@ static const format_flag_spec gcc_diag_flag_specs[] =\n \n #define gcc_tdiag_flag_specs gcc_diag_flag_specs\n #define gcc_cdiag_flag_specs gcc_diag_flag_specs\n-\n-static const format_flag_spec gcc_cxxdiag_flag_specs[] =\n-{\n-  { '+',  0, 0, N_(\"'+' flag\"),        N_(\"the '+' printf flag\"),              STD_C89 },\n-  { '#',  0, 0, N_(\"'#' flag\"),        N_(\"the '#' printf flag\"),              STD_C89 },\n-  { 'q',  0, 0, N_(\"'q' flag\"),        N_(\"the 'q' diagnostic flag\"),          STD_C89 },\n-  { 'p',  0, 0, N_(\"precision\"),       N_(\"precision in printf format\"),       STD_C89 },\n-  { 'L',  0, 0, N_(\"length modifier\"), N_(\"length modifier in printf format\"), STD_C89 },\n-  { 0, 0, 0, NULL, NULL, STD_C89 }\n-};\n+#define gcc_cxxdiag_flag_specs gcc_diag_flag_specs\n \n static const format_flag_spec scanf_flag_specs[] =\n {\n@@ -585,7 +577,9 @@ static const format_char_info gcc_tdiag_char_table[] =\n   /* Custom conversion specifiers.  */\n \n   /* These will require a \"tree\" at runtime.  */\n-  { \"DFKTE\", 0, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q+\", \"\",   NULL },\n+  { \"DFKTEV\", 0, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q+\", \"\",   NULL },\n+\n+  { \"v\", 0,STD_C89, { T89_I,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q#\",  \"\",   NULL },\n \n   { \"<>'\", 0, STD_C89, NOARGUMENTS, \"\",      \"\",   NULL },\n   { \"m\",   0, STD_C89, NOARGUMENTS, \"q\",     \"\",   NULL },\n@@ -605,7 +599,9 @@ static const format_char_info gcc_cdiag_char_table[] =\n   /* Custom conversion specifiers.  */\n \n   /* These will require a \"tree\" at runtime.  */\n-  { \"DEFKT\", 0, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q+\", \"\",   NULL },\n+  { \"DEFKTV\", 0, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q+\", \"\",   NULL },\n+\n+  { \"v\", 0,STD_C89, { T89_I,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q#\",  \"\",   NULL },\n \n   { \"<>'\", 0, STD_C89, NOARGUMENTS, \"\",      \"\",   NULL },\n   { \"m\",   0, STD_C89, NOARGUMENTS, \"q\",     \"\",   NULL },\n@@ -627,6 +623,8 @@ static const format_char_info gcc_cxxdiag_char_table[] =\n   /* These will require a \"tree\" at runtime.  */\n   { \"ADEFKTV\",0,STD_C89,{ T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q+#\",   \"\",   NULL },\n \n+  { \"v\", 0,STD_C89, { T89_I,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q#\",  \"\",   NULL },\n+\n   /* These accept either an 'int' or an 'enum tree_code' (which is handled as an 'int'.)  */\n   { \"CLOPQ\",0,STD_C89, { T89_I,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",  \"\",   NULL },\n \n@@ -722,19 +720,19 @@ static const format_kind_info format_types_orig[] =\n     'w', 0, 'p', 0, 'L', 0,\n     NULL, NULL\n   },\n-  { \"gcc_diag\",   gcc_diag_length_specs,  gcc_diag_char_table, \"q+\", NULL,\n+  { \"gcc_diag\",   gcc_diag_length_specs,  gcc_diag_char_table, \"q+#\", NULL,\n     gcc_diag_flag_specs, gcc_diag_flag_pairs,\n     FMT_FLAG_ARG_CONVERT,\n     0, 0, 'p', 0, 'L', 0,\n     NULL, &integer_type_node\n   },\n-  { \"gcc_tdiag\",   gcc_tdiag_length_specs,  gcc_tdiag_char_table, \"q+\", NULL,\n+  { \"gcc_tdiag\",   gcc_tdiag_length_specs,  gcc_tdiag_char_table, \"q+#\", NULL,\n     gcc_tdiag_flag_specs, gcc_tdiag_flag_pairs,\n     FMT_FLAG_ARG_CONVERT,\n     0, 0, 'p', 0, 'L', 0,\n     NULL, &integer_type_node\n   },\n-  { \"gcc_cdiag\",   gcc_cdiag_length_specs,  gcc_cdiag_char_table, \"q+\", NULL,\n+  { \"gcc_cdiag\",   gcc_cdiag_length_specs,  gcc_cdiag_char_table, \"q+#\", NULL,\n     gcc_cdiag_flag_specs, gcc_cdiag_flag_pairs,\n     FMT_FLAG_ARG_CONVERT,\n     0, 0, 'p', 0, 'L', 0,"}, {"sha": "7694a38d999fdd507df2072a3e550794a8f14f93", "filename": "gcc/c-objc-common.c", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49706e39a2b65519ef173e55637c41c899e0b968/gcc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49706e39a2b65519ef173e55637c41c899e0b968/gcc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.c?ref=49706e39a2b65519ef173e55637c41c899e0b968", "patch": "@@ -79,9 +79,10 @@ c_objc_common_init (void)\n    %E: an identifier or expression,\n    %F: a function declaration,\n    %T: a type.\n+   %V: a list of type qualifiers from a tree.\n+   %v: an explicit list of type qualifiers\n+   %#v: an explicit list of type qualifiers of a function type.\n \n-   These format specifiers form a subset of the format specifiers set used\n-   by the C++ front-end.\n    Please notice when called, the `%' part was already skipped by the\n    diagnostic machinery.  */\n static bool\n@@ -93,7 +94,7 @@ c_tree_printer (pretty_printer *pp, text_info *text, const char *spec,\n   c_pretty_printer *cpp = (c_pretty_printer *) pp;\n   pp->padding = pp_none;\n \n-  if (precision != 0 || wide || hash)\n+  if (precision != 0 || wide)\n     return false;\n \n   if (*spec == 'K')\n@@ -102,10 +103,12 @@ c_tree_printer (pretty_printer *pp, text_info *text, const char *spec,\n       return true;\n     }\n \n-  t = va_arg (*text->args_ptr, tree);\n-\n-  if (set_locus && text->locus)\n-    *text->locus = DECL_SOURCE_LOCATION (t);\n+  if (*spec != 'v')\n+    {\n+      t = va_arg (*text->args_ptr, tree);\n+      if (set_locus && text->locus)\n+\t*text->locus = DECL_SOURCE_LOCATION (t);\n+    }\n \n   switch (*spec)\n     {\n@@ -155,6 +158,14 @@ c_tree_printer (pretty_printer *pp, text_info *text, const char *spec,\n \tpp_expression (cpp, t);\n       return true;\n \n+    case 'V':\n+      pp_c_type_qualifier_list (cpp, t);\n+      return true;\n+\n+    case 'v':\n+      pp_c_cv_qualifiers (cpp, va_arg (*text->args_ptr, int), hash);\n+      return true;\n+\n     default:\n       return false;\n     }"}, {"sha": "7f4b2388f43e1fb53cbccadcf1cbfae7202b4cf4", "filename": "gcc/c-pretty-print.c", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49706e39a2b65519ef173e55637c41c899e0b968/gcc%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49706e39a2b65519ef173e55637c41c899e0b968/gcc%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.c?ref=49706e39a2b65519ef173e55637c41c899e0b968", "patch": "@@ -170,18 +170,43 @@ pp_c_exclamation (c_pretty_printer *pp)\n   pp_base (pp)->padding = pp_none;\n }\n \n-/* Print out the external representation of CV-QUALIFIER.  */\n+/* Print out the external representation of QUALIFIERS.  */\n \n-static void\n-pp_c_cv_qualifier (c_pretty_printer *pp, const char *cv)\n+void\n+pp_c_cv_qualifiers (c_pretty_printer *pp, int qualifiers, bool func_type)\n {\n   const char *p = pp_last_position_in_text (pp);\n+  bool previous = false;\n+\n+  if (!qualifiers)\n+    return;\n+\n   /* The C programming language does not have references, but it is much\n      simpler to handle those here rather than going through the same\n      logic in the C++ pretty-printer.  */\n   if (p != NULL && (*p == '*' || *p == '&'))\n     pp_c_whitespace (pp);\n-  pp_c_ws_string (pp, cv);\n+\n+  if (qualifiers & TYPE_QUAL_CONST)\n+    {\n+      pp_c_ws_string (pp, func_type ? \"__attribute__((const))\" : \"const\");\n+      previous = true;\n+    }\n+\n+  if (qualifiers & TYPE_QUAL_VOLATILE)\n+    {\n+      if (previous)\n+        pp_c_whitespace (pp);\n+      pp_c_ws_string (pp, func_type ? \"__attribute__((noreturn))\" : \"volatile\");\n+      previous = true;\n+    }\n+\n+  if (qualifiers & TYPE_QUAL_RESTRICT)\n+    {\n+      if (previous)\n+        pp_c_whitespace (pp);\n+      pp_c_ws_string (pp, flag_isoc99 ? \"restrict\" : \"__restrict__\");\n+    }\n }\n \n /* Pretty-print T using the type-cast notation '( type-name )'.  */\n@@ -242,12 +267,8 @@ pp_c_type_qualifier_list (c_pretty_printer *pp, tree t)\n     t = TREE_TYPE (t);\n \n   qualifiers = TYPE_QUALS (t);\n-  if (qualifiers & TYPE_QUAL_CONST)\n-    pp_c_cv_qualifier (pp, \"const\");\n-  if (qualifiers & TYPE_QUAL_VOLATILE)\n-    pp_c_cv_qualifier (pp, \"volatile\");\n-  if (qualifiers & TYPE_QUAL_RESTRICT)\n-    pp_c_cv_qualifier (pp, flag_isoc99 ? \"restrict\" : \"__restrict__\");\n+  pp_c_cv_qualifiers (pp, qualifiers,\n+\t\t      TREE_CODE (t) == FUNCTION_TYPE);\n \n   if (!ADDR_SPACE_GENERIC_P (TYPE_ADDR_SPACE (t)))\n     {"}, {"sha": "60ef0bc375e04da56fe57bf0576f6e2f5c65ebff", "filename": "gcc/c-pretty-print.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49706e39a2b65519ef173e55637c41c899e0b968/gcc%2Fc-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49706e39a2b65519ef173e55637c41c899e0b968/gcc%2Fc-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.h?ref=49706e39a2b65519ef173e55637c41c899e0b968", "patch": "@@ -176,6 +176,7 @@ void pp_c_space_for_pointer_operator (c_pretty_printer *, tree);\n void pp_c_tree_decl_identifier (c_pretty_printer *, tree);\n void pp_c_function_definition (c_pretty_printer *, tree);\n void pp_c_attributes (c_pretty_printer *, tree);\n+void pp_c_cv_qualifiers (c_pretty_printer *pp, int qualifiers, bool func_type);\n void pp_c_type_qualifier_list (c_pretty_printer *, tree);\n void pp_c_parameter_type_list (c_pretty_printer *, tree);\n void pp_c_declaration (c_pretty_printer *, tree);"}, {"sha": "39965d527b05e894f6db1c0e5ad50630064a67fc", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 65, "deletions": 28, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49706e39a2b65519ef173e55637c41c899e0b968/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49706e39a2b65519ef173e55637c41c899e0b968/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=49706e39a2b65519ef173e55637c41c899e0b968", "patch": "@@ -4440,13 +4440,15 @@ handle_warn_cast_qual (tree type, tree otype)\n \t && TREE_CODE (in_otype) == POINTER_TYPE);\n \n   if (added)\n-    warning (OPT_Wcast_qual, \"cast adds new qualifiers to function type\");\n+    warning (OPT_Wcast_qual, \"cast adds %q#v qualifier to function type\",\n+\t     added);\n \n   if (discarded)\n     /* There are qualifiers present in IN_OTYPE that are not present\n        in IN_TYPE.  */\n     warning (OPT_Wcast_qual,\n-\t     \"cast discards qualifiers from pointer target type\");\n+\t     \"cast discards %q#v qualifier from pointer target type\",\n+\t     discarded);\n \n   if (added || discarded)\n     return;\n@@ -4479,9 +4481,10 @@ handle_warn_cast_qual (tree type, tree otype)\n       if ((TYPE_QUALS (in_type) &~ TYPE_QUALS (in_otype)) != 0\n \t  && !is_const)\n \t{\n+\t  int added = TYPE_QUALS (in_type) &~ TYPE_QUALS (in_otype);\n \t  warning (OPT_Wcast_qual,\n-\t\t   (\"new qualifiers in middle of multi-level non-const cast \"\n-\t\t    \"are unsafe\"));\n+\t\t   (\"new %qv qualifier in middle of multi-level non-const cast \"\n+\t\t    \"is unsafe\"), added);\n \t  break;\n \t}\n       if (is_const)\n@@ -5007,6 +5010,36 @@ convert_for_assignment (location_t location, tree type, tree rhs,\n       }                                                                  \\\n   } while (0)\n \n+  /* This macro is used to emit diagnostics to ensure that all format\n+     strings are complete sentences, visible to gettext and checked at\n+     compile time.  It is the same as WARN_FOR_ASSIGNMENT but with an\n+     extra parameter to enumerate qualifiers.  */\n+\n+#define WARN_FOR_QUALIFIERS(LOCATION, OPT, AR, AS, IN, RE, QUALS)        \\\n+  do {                                                                   \\\n+    switch (errtype)                                                     \\\n+      {                                                                  \\\n+      case ic_argpass:                                                   \\\n+        if (pedwarn (LOCATION, OPT, AR, parmnum, rname, QUALS))          \\\n+          inform ((fundecl && !DECL_IS_BUILTIN (fundecl))\t         \\\n+\t      \t  ? DECL_SOURCE_LOCATION (fundecl) : LOCATION,\t\t \\\n+                  \"expected %qT but argument is of type %qT\",            \\\n+                  type, rhstype);                                        \\\n+        break;                                                           \\\n+      case ic_assign:                                                    \\\n+        pedwarn (LOCATION, OPT, AS, QUALS);                          \\\n+        break;                                                           \\\n+      case ic_init:                                                      \\\n+        pedwarn (LOCATION, OPT, IN, QUALS);                          \\\n+        break;                                                           \\\n+      case ic_return:                                                    \\\n+        pedwarn (LOCATION, OPT, RE, QUALS);                        \t \\\n+        break;                                                           \\\n+      default:                                                           \\\n+        gcc_unreachable ();                                              \\\n+      }                                                                  \\\n+  } while (0)\n+\n   if (TREE_CODE (rhs) == EXCESS_PRECISION_EXPR)\n     rhs = TREE_OPERAND (rhs, 0);\n \n@@ -5214,30 +5247,32 @@ convert_for_assignment (location_t location, tree type, tree rhs,\n \t\t     vice-versa.  */\n \t\t  if (TYPE_QUALS_NO_ADDR_SPACE (ttl)\n \t\t      & ~TYPE_QUALS_NO_ADDR_SPACE (ttr))\n-\t\t    WARN_FOR_ASSIGNMENT (location, 0,\n+\t\t    WARN_FOR_QUALIFIERS (location, 0,\n \t\t\t\t\t G_(\"passing argument %d of %qE \"\n-\t\t\t\t\t    \"makes qualified function \"\n+\t\t\t\t\t    \"makes %q#v qualified function \"\n \t\t\t\t\t    \"pointer from unqualified\"),\n-\t\t\t\t\t G_(\"assignment makes qualified \"\n+\t\t\t\t\t G_(\"assignment makes %q#v qualified \"\n \t\t\t\t\t    \"function pointer from \"\n \t\t\t\t\t    \"unqualified\"),\n-\t\t\t\t\t G_(\"initialization makes qualified \"\n+\t\t\t\t\t G_(\"initialization makes %q#v qualified \"\n \t\t\t\t\t    \"function pointer from \"\n \t\t\t\t\t    \"unqualified\"),\n-\t\t\t\t\t G_(\"return makes qualified function \"\n-\t\t\t\t\t    \"pointer from unqualified\"));\n+\t\t\t\t\t G_(\"return makes %q#v qualified function \"\n+\t\t\t\t\t    \"pointer from unqualified\"),\n+\t\t\t\t\t TYPE_QUALS (ttl) & ~TYPE_QUALS (ttr));\n \t\t}\n \t      else if (TYPE_QUALS_NO_ADDR_SPACE (ttr)\n \t\t       & ~TYPE_QUALS_NO_ADDR_SPACE (ttl))\n-\t\tWARN_FOR_ASSIGNMENT (location, 0,\n+\t\tWARN_FOR_QUALIFIERS (location, 0,\n \t\t\t\t     G_(\"passing argument %d of %qE discards \"\n-\t\t\t\t\t\"qualifiers from pointer target type\"),\n-\t\t\t\t     G_(\"assignment discards qualifiers \"\n+\t\t\t\t\t\"%qv qualifier from pointer target type\"),\n+\t\t\t\t     G_(\"assignment discards %qv qualifier \"\n \t\t\t\t\t\"from pointer target type\"),\n-\t\t\t\t     G_(\"initialization discards qualifiers \"\n+\t\t\t\t     G_(\"initialization discards %qv qualifier \"\n \t\t\t\t\t\"from pointer target type\"),\n-\t\t\t\t     G_(\"return discards qualifiers from \"\n-\t\t\t\t\t\"pointer target type\"));\n+\t\t\t\t     G_(\"return discards %qv qualifier from \"\n+\t\t\t\t\t\"pointer target type\"),\n+\t\t\t\t     TYPE_QUALS (ttr) & ~TYPE_QUALS (ttl));\n \n \t      memb = marginal_memb;\n \t    }\n@@ -5383,15 +5418,16 @@ convert_for_assignment (location_t location, tree type, tree rhs,\n \t\t     qualifier are acceptable if the 'volatile' has been added\n \t\t     in by the Objective-C EH machinery.  */\n \t\t  if (!objc_type_quals_match (ttl, ttr))\n-\t\t    WARN_FOR_ASSIGNMENT (location, 0,\n+\t\t    WARN_FOR_QUALIFIERS (location, 0,\n \t\t\t\t\t G_(\"passing argument %d of %qE discards \"\n-\t\t\t\t\t    \"qualifiers from pointer target type\"),\n-\t\t\t\t\t G_(\"assignment discards qualifiers \"\n+\t\t\t\t\t    \"%qv qualifier from pointer target type\"),\n+\t\t\t\t\t G_(\"assignment discards %qv qualifier \"\n \t\t\t\t\t    \"from pointer target type\"),\n-\t\t\t\t\t G_(\"initialization discards qualifiers \"\n+\t\t\t\t\t G_(\"initialization discards %qv qualifier \"\n \t\t\t\t\t    \"from pointer target type\"),\n-\t\t\t\t\t G_(\"return discards qualifiers from \"\n-\t\t\t\t\t    \"pointer target type\"));\n+\t\t\t\t\t G_(\"return discards %qv qualifier from \"\n+\t\t\t\t\t    \"pointer target type\"),\n+\t\t\t\t\t TYPE_QUALS (ttr) & ~TYPE_QUALS (ttl));\n \t\t}\n \t      /* If this is not a case of ignoring a mismatch in signedness,\n \t\t no warning.  */\n@@ -5419,16 +5455,17 @@ convert_for_assignment (location_t location, tree type, tree rhs,\n \t\t where an ordinary one is wanted, but not vice-versa.  */\n \t      if (TYPE_QUALS_NO_ADDR_SPACE (ttl)\n \t\t  & ~TYPE_QUALS_NO_ADDR_SPACE (ttr))\n-\t\tWARN_FOR_ASSIGNMENT (location, 0,\n+\t\tWARN_FOR_QUALIFIERS (location, 0,\n \t\t\t\t     G_(\"passing argument %d of %qE makes \"\n-\t\t\t\t\t\"qualified function pointer \"\n+\t\t\t\t\t\"%q#v qualified function pointer \"\n \t\t\t\t\t\"from unqualified\"),\n-\t\t\t\t     G_(\"assignment makes qualified function \"\n+\t\t\t\t     G_(\"assignment makes %q#v qualified function \"\n \t\t\t\t\t\"pointer from unqualified\"),\n-\t\t\t\t     G_(\"initialization makes qualified \"\n+\t\t\t\t     G_(\"initialization makes %q#v qualified \"\n \t\t\t\t\t\"function pointer from unqualified\"),\n-\t\t\t\t     G_(\"return makes qualified function \"\n-\t\t\t\t\t\"pointer from unqualified\"));\n+\t\t\t\t     G_(\"return makes %q#v qualified function \"\n+\t\t\t\t\t\"pointer from unqualified\"),\n+\t\t\t\t     TYPE_QUALS (ttl) & ~TYPE_QUALS (ttr));\n \t    }\n \t}\n       else"}, {"sha": "617ae6046517f65f82a239bd2979fae982351281", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49706e39a2b65519ef173e55637c41c899e0b968/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49706e39a2b65519ef173e55637c41c899e0b968/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=49706e39a2b65519ef173e55637c41c899e0b968", "patch": "@@ -1,3 +1,14 @@\n+2010-06-04  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c/25880\n+\t* gcc.dg/assign-warn-2.c: Update.\n+\t* gcc.dg/cpp/line3.c: Update.\n+\t* gcc.dg/c99-array-lval-8.c: Update.\n+\t* gcc.dg/cast-qual-2.c: Update.\n+\t* gcc.dg/c99-arraydecl-3.c:  Update.\n+\t* gcc.dg/assign-warn-1.c:  Update.\n+\t* gcc.dg/format/gcc_diag-1.c:  Update.\n+\n 2010-06-04  Bernd Schmidt  <bernds@codesourcery.com>\n \n \tPR rtl-optimization/39871"}, {"sha": "ae70242edd4dceafef820c7fa53ccc7724fcbfa0", "filename": "gcc/testsuite/gcc.dg/assign-warn-1.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49706e39a2b65519ef173e55637c41c899e0b968/gcc%2Ftestsuite%2Fgcc.dg%2Fassign-warn-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49706e39a2b65519ef173e55637c41c899e0b968/gcc%2Ftestsuite%2Fgcc.dg%2Fassign-warn-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fassign-warn-1.c?ref=49706e39a2b65519ef173e55637c41c899e0b968", "patch": "@@ -12,23 +12,23 @@\n typedef void (*fp)(void);\n typedef void (*nrfp)(void) __attribute__((noreturn));\n \n-TESTARG(fqa, nrfp, fp); /* { dg-warning \"passing argument 1 of 'fqaF' makes qualified function pointer from unqualified\" } */\n-TESTARP(fqb, nrfp, fp); /* { dg-warning \"passing argument 1 of 'fqbFp.x' makes qualified function pointer from unqualified\" } */\n-TESTASS(fqc, nrfp, fp); /* { dg-warning \"assignment makes qualified function pointer from unqualified\" } */\n-TESTINI(fqd, nrfp, fp); /* { dg-warning \"initialization makes qualified function pointer from unqualified\" } */\n-TESTRET(fqe, nrfp, fp); /* { dg-warning \"return makes qualified function pointer from unqualified\" } */\n+TESTARG(fqa, nrfp, fp); /* { dg-warning \"passing argument 1 of 'fqaF' makes '__attribute__..noreturn..' qualified function pointer from unqualified\" } */\n+TESTARP(fqb, nrfp, fp); /* { dg-warning \"passing argument 1 of 'fqbFp.x' makes '__attribute__..noreturn..' qualified function pointer from unqualified\" } */\n+TESTASS(fqc, nrfp, fp); /* { dg-warning \"assignment makes '__attribute__..noreturn..' qualified function pointer from unqualified\" } */\n+TESTINI(fqd, nrfp, fp); /* { dg-warning \"initialization makes '__attribute__..noreturn..' qualified function pointer from unqualified\" } */\n+TESTRET(fqe, nrfp, fp); /* { dg-warning \"return makes '__attribute__..noreturn..' qualified function pointer from unqualified\" } */\n \n TESTARG(ofqa, fp, nrfp);\n TESTARP(ofqb, fp, nrfp);\n TESTASS(ofqc, fp, nrfp);\n TESTINI(ofqd, fp, nrfp);\n TESTRET(ofqe, fp, nrfp);\n \n-TESTARG(qa, char *, const char *); /* { dg-warning \"passing argument 1 of 'qaF' discards qualifiers from pointer target type\" } */\n-TESTARP(qb, char *, const char *); /* { dg-warning \"passing argument 1 of 'qbFp.x' discards qualifiers from pointer target type\" } */\n-TESTASS(qc, char *, const char *); /* { dg-warning \"assignment discards qualifiers from pointer target type\" } */\n-TESTINI(qd, char *, const char *); /* { dg-warning \"initialization discards qualifiers from pointer target type\" } */\n-TESTRET(qe, char *, const char *); /* { dg-warning \"return discards qualifiers from pointer target type\" } */\n+TESTARG(qa, char *, const char *); /* { dg-warning \"passing argument 1 of 'qaF' discards 'const' qualifier from pointer target type\" } */\n+TESTARP(qb, char *, const char *); /* { dg-warning \"passing argument 1 of 'qbFp.x' discards 'const' qualifier from pointer target type\" } */\n+TESTASS(qc, char *, const char *); /* { dg-warning \"assignment discards 'const' qualifier from pointer target type\" } */\n+TESTINI(qd, char *, const char *); /* { dg-warning \"initialization discards 'const' qualifier from pointer target type\" } */\n+TESTRET(qe, char *, const char *); /* { dg-warning \"return discards 'const' qualifier from pointer target type\" } */\n \n TESTARG(oqa, const char *, char *);\n TESTARP(oqb, const char *, char *);"}, {"sha": "7813b72869dccb237d48f7a387024da779e6abcf", "filename": "gcc/testsuite/gcc.dg/assign-warn-2.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49706e39a2b65519ef173e55637c41c899e0b968/gcc%2Ftestsuite%2Fgcc.dg%2Fassign-warn-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49706e39a2b65519ef173e55637c41c899e0b968/gcc%2Ftestsuite%2Fgcc.dg%2Fassign-warn-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fassign-warn-2.c?ref=49706e39a2b65519ef173e55637c41c899e0b968", "patch": "@@ -13,23 +13,23 @@\n typedef void (*fp)(void);\n typedef void (*nrfp)(void) __attribute__((noreturn));\n \n-TESTARG(fqa, nrfp, fp); /* { dg-error \"passing argument 1 of 'fqaF' makes qualified function pointer from unqualified\" } */\n-TESTARP(fqb, nrfp, fp); /* { dg-error \"passing argument 1 of 'fqbFp.x' makes qualified function pointer from unqualified\" } */\n-TESTASS(fqc, nrfp, fp); /* { dg-error \"assignment makes qualified function pointer from unqualified\" } */\n-TESTINI(fqd, nrfp, fp); /* { dg-error \"initialization makes qualified function pointer from unqualified\" } */\n-TESTRET(fqe, nrfp, fp); /* { dg-error \"return makes qualified function pointer from unqualified\" } */\n+TESTARG(fqa, nrfp, fp); /* { dg-error \"passing argument 1 of 'fqaF' makes '__attribute__..noreturn..' qualified function pointer from unqualified\" } */\n+TESTARP(fqb, nrfp, fp); /* { dg-error \"passing argument 1 of 'fqbFp.x' makes '__attribute__..noreturn..' qualified function pointer from unqualified\" } */\n+TESTASS(fqc, nrfp, fp); /* { dg-error \"assignment makes '__attribute__..noreturn..' qualified function pointer from unqualified\" } */\n+TESTINI(fqd, nrfp, fp); /* { dg-error \"initialization makes '__attribute__..noreturn..' qualified function pointer from unqualified\" } */\n+TESTRET(fqe, nrfp, fp); /* { dg-error \"return makes '__attribute__..noreturn..' qualified function pointer from unqualified\" } */\n \n TESTARG(ofqa, fp, nrfp);\n TESTARP(ofqb, fp, nrfp);\n TESTASS(ofqc, fp, nrfp);\n TESTINI(ofqd, fp, nrfp);\n TESTRET(ofqe, fp, nrfp);\n \n-TESTARG(qa, char *, const char *); /* { dg-error \"passing argument 1 of 'qaF' discards qualifiers from pointer target type\" } */\n-TESTARP(qb, char *, const char *); /* { dg-error \"passing argument 1 of 'qbFp.x' discards qualifiers from pointer target type\" } */\n-TESTASS(qc, char *, const char *); /* { dg-error \"assignment discards qualifiers from pointer target type\" } */\n-TESTINI(qd, char *, const char *); /* { dg-error \"initialization discards qualifiers from pointer target type\" } */\n-TESTRET(qe, char *, const char *); /* { dg-error \"return discards qualifiers from pointer target type\" } */\n+TESTARG(qa, char *, const char *); /* { dg-error \"passing argument 1 of 'qaF' discards 'const' qualifier from pointer target type\" } */\n+TESTARP(qb, char *, const char *); /* { dg-error \"passing argument 1 of 'qbFp.x' discards 'const' qualifier from pointer target type\" } */\n+TESTASS(qc, char *, const char *); /* { dg-error \"assignment discards 'const' qualifier from pointer target type\" } */\n+TESTINI(qd, char *, const char *); /* { dg-error \"initialization discards 'const' qualifier from pointer target type\" } */\n+TESTRET(qe, char *, const char *); /* { dg-error \"return discards 'const' qualifier from pointer target type\" } */\n \n TESTARG(oqa, const char *, char *);\n TESTARP(oqb, const char *, char *);"}, {"sha": "c4e202ef3018a08af87d6d1e49f714ec8d5ab20c", "filename": "gcc/testsuite/gcc.dg/c99-array-lval-8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49706e39a2b65519ef173e55637c41c899e0b968/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-array-lval-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49706e39a2b65519ef173e55637c41c899e0b968/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-array-lval-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-array-lval-8.c?ref=49706e39a2b65519ef173e55637c41c899e0b968", "patch": "@@ -12,15 +12,15 @@ f (void)\n   const struct {\n     int a[1];\n   } s;\n-  int *p1 = s.a; /* { dg-error \"qualifiers\" } */\n+  int *p1 = s.a; /* { dg-error \"qualifier\" } */\n   int *p2 = (a ? s : s).a;\n   /* In this case, the qualifier is properly on the array element type\n      not on the rvalue structure and so is not discarded.  */\n   struct {\n     const int a[1];\n   } t;\n-  int *p3 = t.a; /* { dg-error \"qualifiers\" } */\n-  int *p4 = (a ? t : t).a; /* { dg-error \"qualifiers\" } */\n+  int *p3 = t.a; /* { dg-error \"qualifier\" } */\n+  int *p4 = (a ? t : t).a; /* { dg-error \"qualifier\" } */\n   /* The issue could also lead to code being wrongly accepted.  */\n   const struct {\n     int a[1][1];"}, {"sha": "9f383b9c3bb90395db10ef7e0d533346e37b8830", "filename": "gcc/testsuite/gcc.dg/c99-arraydecl-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49706e39a2b65519ef173e55637c41c899e0b968/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-arraydecl-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49706e39a2b65519ef173e55637c41c899e0b968/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-arraydecl-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-arraydecl-3.c?ref=49706e39a2b65519ef173e55637c41c899e0b968", "patch": "@@ -7,14 +7,14 @@\n void\n f0 (int a[restrict])\n {\n-  int **b = &a; /* { dg-error \"discards qualifiers\" } */\n+  int **b = &a; /* { dg-error \"discards 'restrict' qualifier\" } */\n   int *restrict *c = &a;\n }\n \n void\n f1 (a)\n      int a[restrict];\n {\n-  int **b = &a; /* { dg-error \"discards qualifiers\" } */\n+  int **b = &a; /* { dg-error \"discards 'restrict' qualifier\" } */\n   int *restrict *c = &a;\n }"}, {"sha": "5fd2b854d61453f5b459e1317bb599cc0c46f034", "filename": "gcc/testsuite/gcc.dg/cast-qual-2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49706e39a2b65519ef173e55637c41c899e0b968/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-qual-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49706e39a2b65519ef173e55637c41c899e0b968/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-qual-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-qual-2.c?ref=49706e39a2b65519ef173e55637c41c899e0b968", "patch": "@@ -18,8 +18,8 @@ intfn_t *i2 = (intfn_t *) intfn;\n intfn_t *i3 = constfn;\n intfn_t *i4 = (intfn_t *) constfn; /* { dg-bogus \"discards qualifier\" } */\n \n-constfn_t p1 = intfn; /* { dg-warning \"makes qualified function\" } */\n-constfn_t p2 = (constfn_t) intfn; /* { dg-warning \"new qualifier\" } */\n+constfn_t p1 = intfn; /* { dg-warning \"makes '__attribute__..const..' qualified function\" } */\n+constfn_t p2 = (constfn_t) intfn; /* { dg-warning \"adds '__attribute__..const..' qualifier\" } */\n constfn_t p3 = constfn;\n constfn_t p4 = (constfn_t) constfn;\n \n@@ -28,7 +28,7 @@ voidfn_t *v2 = (voidfn_t *) voidfn;\n voidfn_t *v3 = noreturnfn;\n voidfn_t *v4 = (voidfn_t *) noreturnfn; /* { dg-bogus \"discards qualifier\" } */\n \n-noreturnfn_t n1 = voidfn; /* { dg-warning \"makes qualified function\" } */\n-noreturnfn_t n2 = (noreturnfn_t) voidfn; /* { dg-warning \"new qualifier\" } */\n+noreturnfn_t n1 = voidfn; /* { dg-warning \"makes '__attribute__..noreturn..' qualified function\" } */\n+noreturnfn_t n2 = (noreturnfn_t) voidfn; /* { dg-warning \"adds '__attribute__..noreturn..' qualifier\" } */\n noreturnfn_t n3 = noreturnfn;\n noreturnfn_t n4 = (noreturnfn_t) noreturnfn;"}, {"sha": "4b40e4a6a95380be693d0b86d80eefd4d67f3238", "filename": "gcc/testsuite/gcc.dg/cpp/line3.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49706e39a2b65519ef173e55637c41c899e0b968/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fline3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49706e39a2b65519ef173e55637c41c899e0b968/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fline3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fline3.c?ref=49706e39a2b65519ef173e55637c41c899e0b968", "patch": "@@ -13,14 +13,14 @@ main(void)\n {\n   char *A;\n \n-  A = \"text\";\t\t/* { dg-warning \"discards qualifiers\" \"case zero\" } */\n-  A = one(\"text\"\t/* { dg-warning \"discards qualifiers\" \"case one\" } */\n+  A = \"text\";\t\t/* { dg-warning \"discards 'const' qualifier\" \"case zero\" } */\n+  A = one(\"text\"\t/* { dg-warning \"discards 'const' qualifier\" \"case one\" } */\n \t  \"text\")\n \t;\n-  A = two(\"text\"\t/* { dg-warning \"discards qualifiers\" \"case two\" } */\n+  A = two(\"text\"\t/* { dg-warning \"discards 'const' qualifier\" \"case two\" } */\n \t  \"text\")\n \t;\n-  A = four(\"text\"\t/* { dg-warning \"discards qualifiers\" \"case four\" } */\n+  A = four(\"text\"\t/* { dg-warning \"discards 'const' qualifier\" \"case four\" } */\n \t   \"text\")\n \t;\n "}, {"sha": "f88965fe659d57346e72789421720301576efd0a", "filename": "gcc/testsuite/gcc.dg/format/gcc_diag-1.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49706e39a2b65519ef173e55637c41c899e0b968/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49706e39a2b65519ef173e55637c41c899e0b968/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-1.c?ref=49706e39a2b65519ef173e55637c41c899e0b968", "patch": "@@ -70,13 +70,13 @@ foo (int i, int i1, int i2, unsigned int u, double d, char *s, void *p,\n   cdiag (\"%m\");\n   cxxdiag (\"%m\");\n \n-  tdiag (\"%D%F%T\", t1, t1, t1);\n-  tdiag (\"%+D%+F%+T\", t1, t1, t1);\n-  tdiag (\"%q+D%q+F%q+T\", t1, t1, t1);\n+  tdiag (\"%D%F%T%V\", t1, t1, t1, t1);\n+  tdiag (\"%+D%+F%+T%+V\", t1, t1, t1, t1);\n+  tdiag (\"%q+D%q+F%q+T%q+V\", t1, t1, t1, t1);\n   tdiag (\"%D%D%D%D\", t1, t2, *t3, t4[5]);\n-  cdiag (\"%D%F%T\", t1, t1, t1);\n-  cdiag (\"%+D%+F%+T\", t1, t1, t1);\n-  cdiag (\"%q+D%q+F%q+T\", t1, t1, t1);\n+  cdiag (\"%D%F%T%V\", t1, t1, t1, t1);\n+  cdiag (\"%+D%+F%+T%+V\", t1, t1, t1, t1);\n+  cdiag (\"%q+D%q+F%q+T%q+V\", t1, t1, t1, t1);\n   cdiag (\"%D%D%D%D\", t1, t2, *t3, t4[5]);\n   cdiag (\"%E\", t1);\n   cxxdiag (\"%A%D%E%F%T%V\", t1, t1, t1, t1, t1, t1);\n@@ -86,6 +86,10 @@ foo (int i, int i1, int i2, unsigned int u, double d, char *s, void *p,\n   cxxdiag (\"%+#A%+#D%+#E%+#F%+#T%+#V\", t1, t1, t1, t1, t1, t1);\n   cxxdiag (\"%C%L%O%P%Q\", i, i, i, i, i);\n \n+  tdiag (\"%v%qv%#v\", i, i, i);\n+  cdiag (\"%v%qv%#v\", i, i, i);\n+  cxxdiag (\"%v%qv%#v\", i, i, i);\n+\n   /* Bad stuff with extensions.  */\n   diag (\"%m\", i); /* { dg-warning \"format\" \"extra arg\" } */\n   tdiag (\"%m\", i); /* { dg-warning \"format\" \"extra arg\" } */\n@@ -121,6 +125,14 @@ foo (int i, int i1, int i2, unsigned int u, double d, char *s, void *p,\n   cdiag (\"%D\", t1, t1); /* { dg-warning \"format\" \"extra arg\" } */\n   cxxdiag (\"%D\", t1, t1); /* { dg-warning \"format\" \"extra arg\" } */\n \n+  tdiag (\"%V\", i); /* { dg-warning \"format\" \"wrong arg\" } */\n+  cdiag (\"%V\", i); /* { dg-warning \"format\" \"wrong arg\" } */\n+  cxxdiag (\"%V\", i); /* { dg-warning \"format\" \"wrong arg\" } */\n+\n+  tdiag (\"%v\", t1); /* { dg-warning \"format\" \"wrong arg\" } */\n+  cdiag (\"%v\", t1); /* { dg-warning \"format\" \"wrong arg\" } */\n+  cxxdiag (\"%v\", t1); /* { dg-warning \"format\" \"wrong arg\" } */\n+\n   /* Standard specifiers not accepted in the diagnostic framework.  */\n   diag (\"%X\\n\", u); /* { dg-warning \"format\" \"HEX\" } */\n   diag (\"%f\\n\", d); /* { dg-warning \"format\" \"float\" } */"}]}