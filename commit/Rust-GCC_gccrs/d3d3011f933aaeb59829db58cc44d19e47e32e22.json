{"sha": "d3d3011f933aaeb59829db58cc44d19e47e32e22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDNkMzAxMWY5MzNhYWViNTk4MjlkYjU4Y2M0NGQxOWU0N2UzMmUyMg==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2009-03-28T12:52:08Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2009-03-28T12:52:08Z"}, "message": "gfortran.h (gfc_option_t): Add rtcheck.\n\n2009-03-28  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n            Paul Thomas  <pault@gcc.gnu.org>\n            Tobias Burnus  <burnus@net-b.de>\n\n        * gfortran.h (gfc_option_t): Add rtcheck.\n        * lang.opt: New option -fruntime-check.\n        * libgfortran.h: Add GFC_RTCHECK_* constants.\n        * invoke.texi: Document -fruntime-check.\n        * options.c (gfc_handle_runtime_check_option): New function.\n        (gfc_init_options,gfc_post_options,gfc_handle_option):\n        Add -fruntime-check option.\n\n\nCo-Authored-By: Paul Thomas <pault@gcc.gnu.org>\nCo-Authored-By: Tobias Burnus <burnus@net-b.de>\n\nFrom-SVN: r145183", "tree": {"sha": "a09667a5c8ec70fa85fff4377dcf431f1430afdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a09667a5c8ec70fa85fff4377dcf431f1430afdc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3d3011f933aaeb59829db58cc44d19e47e32e22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3d3011f933aaeb59829db58cc44d19e47e32e22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3d3011f933aaeb59829db58cc44d19e47e32e22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3d3011f933aaeb59829db58cc44d19e47e32e22/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "257eb6e3ef00aa111907c4b9411aaa81cdc80396", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/257eb6e3ef00aa111907c4b9411aaa81cdc80396", "html_url": "https://github.com/Rust-GCC/gccrs/commit/257eb6e3ef00aa111907c4b9411aaa81cdc80396"}], "stats": {"total": 164, "additions": 128, "deletions": 36}, "files": [{"sha": "28fa7ca892daed00ee2e127eaaed5ba51778e64a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3d3011f933aaeb59829db58cc44d19e47e32e22/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3d3011f933aaeb59829db58cc44d19e47e32e22/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d3d3011f933aaeb59829db58cc44d19e47e32e22", "patch": "@@ -1,3 +1,15 @@\n+2009-03-28  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\t    Paul Thomas  <pault@gcc.gnu.org>\n+\t    Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.h (gfc_option_t): Add rtcheck.\n+\t* lang.opt: New option -fruntime-check.\n+\t* libgfortran.h: Add GFC_RTCHECK_* constants.\n+\t* invoke.texi: Document -fruntime-check.\n+\t* options.c (gfc_handle_runtime_check_option): New function.\n+\t(gfc_init_options,gfc_post_options,gfc_handle_option):\n+\tAdd -fruntime-check option.\n+\n 2009-03-27  Richard Guenther  <rguenther@suse.de>\n \n \t* trans-array.c (gfc_conv_descriptor_data_addr): Use"}, {"sha": "25e8e063449eccb7a90356a8af8ea597c130f85f", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3d3011f933aaeb59829db58cc44d19e47e32e22/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3d3011f933aaeb59829db58cc44d19e47e32e22/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=d3d3011f933aaeb59829db58cc44d19e47e32e22", "patch": "@@ -2008,7 +2008,6 @@ typedef struct\n   int flag_automatic;\n   int flag_backslash;\n   int flag_backtrace;\n-  int flag_check_array_temporaries;\n   int flag_allow_leading_underscore;\n   int flag_dump_core;\n   int flag_external_blas;\n@@ -2029,6 +2028,7 @@ typedef struct\n   int flag_align_commons;\n \n   int fpe;\n+  int rtcheck;\n \n   int warn_std;\n   int allow_std;"}, {"sha": "87afe783d6b42907f937292c1670cab7869866d0", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 31, "deletions": 12, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3d3011f933aaeb59829db58cc44d19e47e32e22/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3d3011f933aaeb59829db58cc44d19e47e32e22/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=d3d3011f933aaeb59829db58cc44d19e47e32e22", "patch": "@@ -1,4 +1,4 @@\n-@c Copyright (C) 2004, 2005, 2006, 2007, 2008\n+@c Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009\n @c Free Software Foundation, Inc.\n @c This is part of the GNU Fortran manual.   \n @c For copying conditions, see the file gfortran.texi.\n@@ -166,6 +166,7 @@ and warnings}.\n @gccoptlist{-fno-automatic  -ff2c  -fno-underscoring @gol\n -fsecond-underscore @gol\n -fbounds-check -fcheck-array-temporaries  -fmax-array-constructor =@var{n} @gol\n+-fcheck=@var{<all|bounds|array-temps>}\n -fmax-stack-var-size=@var{n} @gol\n -fpack-derived  -frepack-arrays  -fshort-enums  -fexternal-blas @gol\n -fblas-matmul-limit=@var{n} -frecursive -finit-local-zero @gol\n@@ -1182,36 +1183,54 @@ is implemented as a reference to the link-time external symbol\n for compatibility with @command{g77} and @command{f2c}, and is implied\n by use of the @option{-ff2c} option.\n \n-@item -fbounds-check\n-@opindex @code{fbounds-check}\n+@item -fcheck=@var{<keyword>}\n+@opindex @code{fcheck}\n @cindex array, bounds checking\n @cindex bounds checking\n @cindex range checking\n @cindex subscript checking\n @cindex checking subscripts\n+@cindex run-time checking\n+@cindex checking array temporaries\n+\n+Enable the generation of run-time checks; the argument shall be\n+a comma-delimited list of the following keywords.\n+\n+@table @asis\n+@item @samp{all}\n+Enable all run-time test of @option{-fcheck}.\n+\n+@item @samp{array-temps}\n+Warns at run time when for passing an actual argument a temporary array\n+had to be generated. The information generated by this warning is\n+sometimes useful in optimization, in order to avoid such temporaries.\n+\n+Note: The warning is only printed once per location.\n+\n+@item @samp{bounds}\n Enable generation of run-time checks for array subscripts\n and against the declared minimum and maximum values.  It also\n checks array indices for assumed and deferred\n shape arrays against the actual allocated bounds and ensures that all string\n lengths are equal for character array constructors without an explicit\n typespec.\n \n-Some checks require that @option{-fbounds-check} is set for\n+Some checks require that @option{-fcheck=bounds} is set for\n the compilation of the main program.\n \n Note: In the future this may also include other forms of checking, e.g.,\n checking substring references.\n+@end table\n \n \n-@item fcheck-array-temporaries\n-@opindex @code{fcheck-array-temporaries}\n-@cindex checking array temporaries\n-Warns at run time when for passing an actual argument a temporary array\n-had to be generated. The information generated by this warning is\n-sometimes useful in optimization, in order to avoid such temporaries.\n-\n-Note: The warning is only printed once per location.\n+@item -fbounds-check\n+@opindex @code{fbounds-check}\n+@c Note: This option is also referred in gcc's manpage\n+Deprecated alias for @option{-fcheck=bounds}.\n \n+@item -fcheck-array-temporaries\n+@opindex @code{fcheck-array-temporaries}\n+Deprecated alias for @option{-fcheck=array-temps}.\n \n @item -fmax-array-constructor=@var{n}\n @opindex @code{fmax-array-constructor}"}, {"sha": "193604a2fe3cda90bd0fdbc8539c23fdd6a04c6a", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3d3011f933aaeb59829db58cc44d19e47e32e22/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3d3011f933aaeb59829db58cc44d19e47e32e22/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=d3d3011f933aaeb59829db58cc44d19e47e32e22", "patch": "@@ -246,7 +246,7 @@ Fortran RejectNegative Joined UInteger\n \n ffpe-trap=\n Fortran RejectNegative JoinedOrMissing\n--ffpe-trap=[..]\tStop on following floating point exceptions\n+-ffpe-trap=[...]\tStop on following floating point exceptions\n \n ffree-form\n Fortran RejectNegative\n@@ -340,6 +340,10 @@ frepack-arrays\n Fortran\n Copy array sections into a contiguous block on procedure entry\n \n+fcheck=\n+Fortran RejectNegative JoinedOrMissing\n+-fcheck=[...]\tSpecify which runtime checks are to be performed\n+\n fsecond-underscore\n Fortran\n Append a second underscore if the name already contains an underscore"}, {"sha": "d7e254f363533b5793e6021b09ec2f2dd97f2c24", "filename": "gcc/fortran/libgfortran.h", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3d3011f933aaeb59829db58cc44d19e47e32e22/gcc%2Ffortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3d3011f933aaeb59829db58cc44d19e47e32e22/gcc%2Ffortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flibgfortran.h?ref=d3d3011f933aaeb59829db58cc44d19e47e32e22", "patch": "@@ -1,5 +1,5 @@\n /* Header file to the Fortran front-end and runtime library\n-   Copyright (C) 2007, 2008 Free Software Foundation, Inc.\n+   Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -40,6 +40,15 @@ along with GCC; see the file COPYING3.  If not see\n #define GFC_FPE_PRECISION  (1<<5)\n \n \n+/* Bitmasks for the various runtime checks that can be enabled.  */\n+#define GFC_RTCHECK_BOUNDS      (1<<0)\n+#define GFC_RTCHECK_ARRAY_TEMPS (1<<1)\n+#define GFC_RTCHECK_RECURSION   (1<<2)\n+#define GFC_RTCHECK_DO          (1<<3)\n+#define GFC_RTCHECK_ALL        (GFC_RTCHECK_BOUNDS | GFC_RTCHECK_ARRAY_TEMPS \\\n+\t\t\t\t| GFC_RTCHECK_RECURSION | GFC_RTCHECK_DO)\n+\n+\n /* Possible values for the CONVERT I/O specifier.  */\n typedef enum\n {"}, {"sha": "5daa7362504416c07ce2e9e9919353574f174274", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 49, "deletions": 3, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3d3011f933aaeb59829db58cc44d19e47e32e22/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3d3011f933aaeb59829db58cc44d19e47e32e22/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=d3d3011f933aaeb59829db58cc44d19e47e32e22", "patch": "@@ -1,5 +1,5 @@\n /* Parse and display command line options.\n-   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n    Contributed by Andy Vaught\n \n@@ -106,7 +106,6 @@ gfc_init_options (unsigned int argc, const char **argv)\n   gfc_option.flag_backslash = 0;\n   gfc_option.flag_module_private = 0;\n   gfc_option.flag_backtrace = 0;\n-  gfc_option.flag_check_array_temporaries = 0;\n   gfc_option.flag_allow_leading_underscore = 0;\n   gfc_option.flag_dump_core = 0;\n   gfc_option.flag_external_blas = 0;\n@@ -125,6 +124,7 @@ gfc_init_options (unsigned int argc, const char **argv)\n   gfc_option.flag_align_commons = 1;\n   \n   gfc_option.fpe = 0;\n+  gfc_option.rtcheck = 0;\n \n   /* Argument pointers cannot point to anything but their argument.  */\n   flag_argument_noalias = 3;\n@@ -232,6 +232,10 @@ gfc_post_options (const char **pfilename)\n   if (flag_whole_program)\n     gfc_fatal_error (\"Option -fwhole-program is not supported for Fortran\");\n \n+  /* -fbounds-check is equivalent to -fcheck=bounds */\n+  if (flag_bounds_check)\n+    gfc_option.rtcheck |= GFC_RTCHECK_BOUNDS;\n+\n   /* Verify the input file name.  */\n   if (!filename || strcmp (filename, \"-\") == 0)\n     {\n@@ -449,6 +453,43 @@ gfc_handle_fpe_trap_option (const char *arg)\n }\n \n \n+static void\n+gfc_handle_runtime_check_option (const char *arg)\n+{\n+  int result, pos = 0, n;\n+  static const char * const optname[] = { \"all\", \"bounds\", \"array-temps\",\n+\t\t\t\t\t  /* \"recursion\", \"do\", */ NULL };\n+  static const int optmask[] = { GFC_RTCHECK_ALL, GFC_RTCHECK_BOUNDS,\n+\t\t\t\t GFC_RTCHECK_ARRAY_TEMPS,\n+\t\t\t\t /* GFC_RTCHECK_RECURSION, GFC_RTCHECK_DO, */\n+\t\t\t\t 0 };\n+ \n+  while (*arg)\n+    {\n+      while (*arg == ',')\n+\targ++;\n+\n+      while (arg[pos] && arg[pos] != ',')\n+\tpos++;\n+\n+      result = 0;\n+      for (n = 0; optname[n] != NULL; n++)\n+\t{\n+\t  if (optname[n] && strncmp (optname[n], arg, pos) == 0)\n+\t    {\n+\t      gfc_option.rtcheck |= optmask[n];\n+\t      arg += pos;\n+\t      pos = 0;\n+\t      result = 1;\n+\t      break;\n+\t    }\n+\t}\n+      if (!result)\n+\tgfc_fatal_error (\"Argument to -fcheck is not valid: %s\", arg);\n+    }\n+}\n+\n+\n /* Handle command-line options.  Returns 0 if unrecognized, 1 if\n    recognized and handled.  */\n \n@@ -548,7 +589,7 @@ gfc_handle_option (size_t scode, const char *arg, int value)\n       break;\n       \n     case OPT_fcheck_array_temporaries:\n-      gfc_option.flag_check_array_temporaries = value;\n+      gfc_option.rtcheck |= GFC_RTCHECK_ARRAY_TEMPS;\n       break;\n       \n     case OPT_fdump_core:\n@@ -845,6 +886,11 @@ gfc_handle_option (size_t scode, const char *arg, int value)\n     case OPT_falign_commons:\n       gfc_option.flag_align_commons = value;\n       break;\n+\n+    case OPT_fcheck_:\n+      gfc_handle_runtime_check_option (arg);\n+      break;\n+\n     }\n \n   return result;"}, {"sha": "56b4a6832718d369b2ff851ac91e2e567fb9d619", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3d3011f933aaeb59829db58cc44d19e47e32e22/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3d3011f933aaeb59829db58cc44d19e47e32e22/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=d3d3011f933aaeb59829db58cc44d19e47e32e22", "patch": "@@ -1,5 +1,5 @@\n /* Array translation routines\n-   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n    and Steven Bosscher <s.bosscher@student.tudelft.nl>\n@@ -1058,7 +1058,7 @@ gfc_trans_array_ctor_element (stmtblock_t * pblock, tree desc,\n \t  gfc_trans_string_copy (&se->pre, esize, tmp, expr->ts.kind,\n \t\t\t\t se->string_length, se->expr, expr->ts.kind);\n \t}\n-      if (flag_bounds_check && !typespec_chararray_ctor)\n+      if ((gfc_option.rtcheck & GFC_RTCHECK_BOUNDS) && !typespec_chararray_ctor)\n \t{\n \t  if (first_len)\n \t    {\n@@ -1761,8 +1761,8 @@ gfc_trans_array_constructor (gfc_loopinfo * loop, gfc_ss * ss, locus * where)\n   typespec_chararray_ctor = (ss->expr->ts.cl\n \t\t\t     && ss->expr->ts.cl->length_from_typespec);\n \n-  if (flag_bounds_check && ss->expr->ts.type == BT_CHARACTER\n-      && !typespec_chararray_ctor)\n+  if ((gfc_option.rtcheck & GFC_RTCHECK_BOUNDS)\n+      && ss->expr->ts.type == BT_CHARACTER && !typespec_chararray_ctor)\n     {  \n       first_len_val = gfc_create_var (gfc_charlen_type_node, \"len\");\n       first_len = true;\n@@ -1880,7 +1880,7 @@ gfc_trans_array_constructor (gfc_loopinfo * loop, gfc_ss * ss, locus * where)\n     gcc_assert (INTEGER_CST_P (offset));\n #if 0\n   /* Disable bound checking for now because it's probably broken.  */\n-  if (flag_bounds_check)\n+  if (gfc_option.rtcheck & GFC_RTCHECK_BOUNDS)\n     {\n       gcc_unreachable ();\n     }\n@@ -2233,7 +2233,7 @@ gfc_trans_array_bound_check (gfc_se * se, tree descriptor, tree index, int n,\n   char *msg;\n   const char * name = NULL;\n \n-  if (!flag_bounds_check)\n+  if (!(gfc_option.rtcheck & GFC_RTCHECK_BOUNDS))\n     return index;\n \n   index = gfc_evaluate_now (index, &se->pre);\n@@ -2469,7 +2469,7 @@ gfc_conv_array_ref (gfc_se * se, gfc_array_ref * ar, gfc_symbol * sym,\n       gfc_conv_expr_type (&indexse, ar->start[n], gfc_array_index_type);\n       gfc_add_block_to_block (&se->pre, &indexse.pre);\n \n-      if (flag_bounds_check)\n+      if (gfc_option.rtcheck & GFC_RTCHECK_BOUNDS)\n \t{\n \t  /* Check array bounds.  */\n \t  tree cond;\n@@ -3015,7 +3015,7 @@ gfc_conv_ss_startstride (gfc_loopinfo * loop)\n     }\n \n   /* The rest is just runtime bound checking.  */\n-  if (flag_bounds_check)\n+  if (gfc_option.rtcheck & GFC_RTCHECK_BOUNDS)\n     {\n       stmtblock_t block;\n       tree lbound, ubound;\n@@ -4332,7 +4332,8 @@ gfc_trans_dummy_array_bias (gfc_symbol * sym, tree tmpdesc, tree body)\n       && TREE_CODE (sym->ts.cl->backend_decl) == VAR_DECL)\n     gfc_conv_string_length (sym->ts.cl, NULL, &block);\n \n-  checkparm = (sym->as->type == AS_EXPLICIT && flag_bounds_check);\n+  checkparm = (sym->as->type == AS_EXPLICIT\n+\t       && (gfc_option.rtcheck & GFC_RTCHECK_BOUNDS));\n \n   no_repack = !(GFC_DECL_PACKED_ARRAY (tmpdesc)\n                 || GFC_DECL_PARTIAL_PACKED_ARRAY (tmpdesc));\n@@ -5329,7 +5330,7 @@ gfc_conv_array_parameter (gfc_se * se, gfc_expr * expr, gfc_ss * ss, int g77,\n \n       se->expr = ptr;\n \n-      if (gfc_option.flag_check_array_temporaries)\n+      if (gfc_option.rtcheck & GFC_RTCHECK_ARRAY_TEMPS)\n \t{\n \t  char * msg;\n "}, {"sha": "d3895d8cef00bbc83fb67f2e962472ceac91c19b", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3d3011f933aaeb59829db58cc44d19e47e32e22/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3d3011f933aaeb59829db58cc44d19e47e32e22/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=d3d3011f933aaeb59829db58cc44d19e47e32e22", "patch": "@@ -3777,7 +3777,8 @@ gfc_generate_function_code (gfc_namespace * ns)\n \n       array = tree_cons (NULL_TREE,\n \t\t\t build_int_cst (integer_type_node,\n-\t\t\t\t\tflag_bounds_check), array);\n+\t\t\t\t\t(gfc_option.rtcheck\n+\t\t\t\t\t & GFC_RTCHECK_BOUNDS)), array);\n \n       array = tree_cons (NULL_TREE,\n \t\t\t build_int_cst (integer_type_node,"}, {"sha": "91485d1d09cf0e4068db27f2635e489aa76d68d0", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3d3011f933aaeb59829db58cc44d19e47e32e22/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3d3011f933aaeb59829db58cc44d19e47e32e22/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=d3d3011f933aaeb59829db58cc44d19e47e32e22", "patch": "@@ -398,7 +398,7 @@ gfc_conv_substring (gfc_se * se, gfc_ref * ref, int kind,\n   if (!CONSTANT_CLASS_P (end.expr) && !DECL_P (end.expr))\n     end.expr = gfc_evaluate_now (end.expr, &se->pre);\n \n-  if (flag_bounds_check)\n+  if (gfc_option.rtcheck & GFC_RTCHECK_BOUNDS)\n     {\n       tree nonempty = fold_build2 (LE_EXPR, boolean_type_node,\n \t\t\t\t   start.expr, end.expr);\n@@ -2988,7 +2988,7 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n \t{\n \t  if (sym->attr.dimension)\n \t    {\n-\t      if (flag_bounds_check)\n+\t      if (gfc_option.rtcheck & GFC_RTCHECK_BOUNDS)\n \t\t{\n \t\t  /* Check the data pointer hasn't been modified.  This would\n \t\t     happen in a function returning a pointer.  */"}, {"sha": "c2525bfa68d609ca64e00951e775fa895eafe1dd", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3d3011f933aaeb59829db58cc44d19e47e32e22/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3d3011f933aaeb59829db58cc44d19e47e32e22/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=d3d3011f933aaeb59829db58cc44d19e47e32e22", "patch": "@@ -759,7 +759,7 @@ gfc_trans_same_strlen_check (const char* intr_name, locus* where,\n   tree name;\n \n   /* If bounds-checking is disabled, do nothing.  */\n-  if (!flag_bounds_check)\n+  if (!(gfc_option.rtcheck & GFC_RTCHECK_BOUNDS))\n     return;\n \n   /* Compare the two string lengths.  */\n@@ -885,7 +885,7 @@ gfc_conv_intrinsic_bound (gfc_se * se, gfc_expr * expr, int upper)\n     }\n   else\n     {\n-      if (flag_bounds_check)\n+      if (gfc_option.rtcheck & GFC_RTCHECK_BOUNDS)\n         {\n           bound = gfc_evaluate_now (bound, &se->pre);\n           cond = fold_build2 (LT_EXPR, boolean_type_node,"}, {"sha": "3937e2a578920a0ed9af0d0c0d5a3d039a99d271", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3d3011f933aaeb59829db58cc44d19e47e32e22/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3d3011f933aaeb59829db58cc44d19e47e32e22/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=d3d3011f933aaeb59829db58cc44d19e47e32e22", "patch": "@@ -2258,10 +2258,10 @@ compute_inner_temp_size (gfc_expr *expr1, gfc_expr *expr2,\n       loop.array_parameter = 1;\n \n       /* Calculate the bounds of the scalarization.  */\n-      save_flag = flag_bounds_check;\n-      flag_bounds_check = 0;\n+      save_flag = gfc_option.rtcheck;\n+      gfc_option.rtcheck &= !GFC_RTCHECK_BOUNDS;\n       gfc_conv_ss_startstride (&loop);\n-      flag_bounds_check = save_flag;\n+      gfc_option.rtcheck = save_flag;\n       gfc_conv_loop_setup (&loop, &expr2->where);\n \n       /* Figure out how many elements we need.  */"}]}