{"sha": "1e3689bd20d682d6f10373abccea6445d901c499", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWUzNjg5YmQyMGQ2ODJkNmYxMDM3M2FiY2NlYTY0NDVkOTAxYzQ5OQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-04T10:10:23Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-04T10:10:23Z"}, "message": "[multiple changes]\n\n2014-08-04  Arnaud Charlet  <charlet@adacore.com>\n\n\t* sem_scil.ads: Improve comments.\n\t* sem_ch4.adb (Analyze_Equality_Op): Add support for\n\tAllow_Integer_Address (equality between Address and Integer).\n\n2014-08-04  Yannick Moy  <moy@adacore.com>\n\n\t* a-cfhama.adb, a-cforse.adb: Minor fixes to avoid using prefix\n\tnotation on untagged objects.\n\t* sem.ads: Update comment.\n\t* inline.adb (Can_Be_Inlined_In_GNATprove_Mode): Do\n\tnot inline subprograms declared in the visible part of a package.\n\nFrom-SVN: r213560", "tree": {"sha": "b4be9bc9da828ac384e6c02e31a9563d3e2d742f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4be9bc9da828ac384e6c02e31a9563d3e2d742f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e3689bd20d682d6f10373abccea6445d901c499", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e3689bd20d682d6f10373abccea6445d901c499", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e3689bd20d682d6f10373abccea6445d901c499", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e3689bd20d682d6f10373abccea6445d901c499/comments", "author": null, "committer": null, "parents": [{"sha": "aa4997841cb29b30253449c8efc85446072b5a53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa4997841cb29b30253449c8efc85446072b5a53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa4997841cb29b30253449c8efc85446072b5a53"}], "stats": {"total": 136, "additions": 77, "deletions": 59}, "files": [{"sha": "441e2a0fb5cea1a100cf40aaa22bb7fa962c2cc9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e3689bd20d682d6f10373abccea6445d901c499/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e3689bd20d682d6f10373abccea6445d901c499/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1e3689bd20d682d6f10373abccea6445d901c499", "patch": "@@ -1,3 +1,17 @@\n+2014-08-04  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_scil.ads: Improve comments.\n+\t* sem_ch4.adb (Analyze_Equality_Op): Add support for\n+\tAllow_Integer_Address (equality between Address and Integer).\n+\n+2014-08-04  Yannick Moy  <moy@adacore.com>\n+\n+\t* a-cfhama.adb, a-cforse.adb: Minor fixes to avoid using prefix\n+\tnotation on untagged objects.\n+\t* sem.ads: Update comment.\n+\t* inline.adb (Can_Be_Inlined_In_GNATprove_Mode): Do\n+\tnot inline subprograms declared in the visible part of a package.\n+\n 2014-08-04  Ed Schonberg  <schonberg@adacore.com>\n \n \t* exp_ch5.adb: minor reformatting."}, {"sha": "858216f62ea14de6ea4694510309100ae8b5b697", "filename": "gcc/ada/a-cfhama.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e3689bd20d682d6f10373abccea6445d901c499/gcc%2Fada%2Fa-cfhama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e3689bd20d682d6f10373abccea6445d901c499/gcc%2Fada%2Fa-cfhama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cfhama.adb?ref=1e3689bd20d682d6f10373abccea6445d901c499", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2010-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2010-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -144,7 +144,7 @@ package body Ada.Containers.Formal_Hashed_Maps is\n       procedure Insert_Element (Source_Node : Count_Type) is\n          N : Node_Type renames Source.Nodes (Source_Node);\n       begin\n-         Target.Insert (N.Key, N.Element);\n+         Insert (Target, N.Key, N.Element);\n       end Insert_Element;\n \n       --  Start of processing for Assign"}, {"sha": "d1e6b8cd206ee46c1a4564ae52806641c9640b7f", "filename": "gcc/ada/a-cforse.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e3689bd20d682d6f10373abccea6445d901c499/gcc%2Fada%2Fa-cforse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e3689bd20d682d6f10373abccea6445d901c499/gcc%2Fada%2Fa-cforse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cforse.adb?ref=1e3689bd20d682d6f10373abccea6445d901c499", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2010-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2010-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1534,8 +1534,8 @@ package body Ada.Containers.Formal_Ordered_Sets is\n       end if;\n \n       return S : Set (Length (Left) + Length (Right)) do\n-         S.Assign (Source => Left);\n-         S.Union (Right);\n+         Assign (S, Source => Left);\n+         Union (S, Right);\n       end return;\n    end Union;\n "}, {"sha": "7a3b2a706b66ad4a5cda5d3146b82c124594bcb4", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 23, "deletions": 44, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e3689bd20d682d6f10373abccea6445d901c499/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e3689bd20d682d6f10373abccea6445d901c499/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=1e3689bd20d682d6f10373abccea6445d901c499", "patch": "@@ -1382,11 +1382,9 @@ package body Inline is\n       --  Returns True if subprogram Id has any contract (Pre, Post, Global,\n       --  Depends, etc.)\n \n-      function In_Some_Private_Part (N : Node_Id) return Boolean;\n-      --  Returns True if node N is defined in the private part of a package\n-\n-      function In_Unit_Body (N : Node_Id) return Boolean;\n-      --  Returns True if node N is defined in the body of a unit\n+      function In_Package_Visible_Spec (Id : Node_Id) return Boolean;\n+      --  Returns True if subprogram Id is defined in the visible part of a\n+      --  package specification.\n \n       function Is_Expression_Function (Id : Entity_Id) return Boolean;\n       --  Returns True if subprogram Id was defined originally as an expression\n@@ -1405,51 +1403,36 @@ package body Inline is\n                      Present (Classifications     (Items)));\n       end Has_Some_Contract;\n \n-      --------------------------\n-      -- In_Some_Private_Part --\n-      --------------------------\n+      -----------------------------\n+      -- In_Package_Visible_Spec --\n+      -----------------------------\n \n-      function In_Some_Private_Part (N : Node_Id) return Boolean is\n-         P  : Node_Id;\n-         PP : Node_Id;\n+      function In_Package_Visible_Spec  (Id : Node_Id) return Boolean is\n+         Decl : Node_Id := Parent (Parent (Id));\n+         P    : Node_Id;\n \n       begin\n-         P := N;\n-         while Present (P) and then Present (Parent (P)) loop\n-            PP := Parent (P);\n-\n-            if Nkind (PP) = N_Package_Specification\n-              and then List_Containing (P) = Private_Declarations (PP)\n-            then\n-               return True;\n-            end if;\n-\n-            P := PP;\n-         end loop;\n-\n-         return False;\n-      end In_Some_Private_Part;\n+         if Nkind (Parent (Id)) = N_Defining_Program_Unit_Name then\n+            Decl := Parent (Decl);\n+         end if;\n \n-      ------------------\n-      -- In_Unit_Body --\n-      ------------------\n+         P := Parent (Decl);\n \n-      function In_Unit_Body (N : Node_Id) return Boolean is\n-         CU : constant Node_Id := Enclosing_Comp_Unit_Node (N);\n-      begin\n-         return Present (CU)\n-           and then Nkind_In (Unit (CU), N_Package_Body,\n-                                         N_Subprogram_Body,\n-                                         N_Subunit);\n-      end In_Unit_Body;\n+         return Nkind (P) = N_Package_Specification\n+           and then List_Containing (Decl) = Visible_Declarations (P);\n+      end In_Package_Visible_Spec;\n \n       ----------------------------\n       -- Is_Expression_Function --\n       ----------------------------\n \n       function Is_Expression_Function (Id : Entity_Id) return Boolean is\n-         Decl : constant Node_Id := Parent (Parent (Id));\n+         Decl : Node_Id := Parent (Parent (Id));\n       begin\n+         if Nkind (Parent (Id)) = N_Defining_Program_Unit_Name then\n+            Decl := Parent (Decl);\n+         end if;\n+\n          return Nkind (Original_Node (Decl)) = N_Expression_Function;\n       end Is_Expression_Function;\n \n@@ -1482,13 +1465,9 @@ package body Inline is\n       if Nkind (Parent (Id)) = N_Defining_Program_Unit_Name then\n          return False;\n \n-      --  Do not inline subprograms declared in the visible part of a library\n-      --  package.\n+      --  Do not inline subprograms declared in the visible part of a package\n \n-      elsif Is_Library_Level_Entity (Id)\n-        and then not In_Unit_Body (Id)\n-        and then not In_Some_Private_Part (Id)\n-      then\n+      elsif In_Package_Visible_Spec (Id) then\n          return False;\n \n       --  Do not inline subprograms that have a contract on the spec or the"}, {"sha": "e82905ea974042035de86febbed045205785b84b", "filename": "gcc/ada/sem.ads", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e3689bd20d682d6f10373abccea6445d901c499/gcc%2Fada%2Fsem.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e3689bd20d682d6f10373abccea6445d901c499/gcc%2Fada%2Fsem.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.ads?ref=1e3689bd20d682d6f10373abccea6445d901c499", "patch": "@@ -683,13 +683,14 @@ package Sem is\n    generic\n       with procedure Action (Item : Node_Id);\n    procedure Walk_Library_Items;\n-   --  Primarily for use by CodePeer. Must be called after semantic analysis\n-   --  (and expansion) are complete. Walks each relevant library item, calling\n-   --  Action for each, in an order such that one will not run across forward\n-   --  references. Each Item passed to Action is the declaration or body of\n-   --  a library unit, including generics and renamings. The first item is\n-   --  the N_Package_Declaration node for package Standard. Bodies are not\n-   --  included, except for the main unit itself, which always comes last.\n+   --  Primarily for use by CodePeer and GNATprove. Must be called after\n+   --  semantic analysis (and expansion in the case of CodePeer) are complete.\n+   --  Walks each relevant library item, calling Action for each, in an order\n+   --  such that one will not run across forward references. Each Item passed\n+   --  to Action is the declaration or body of a library unit, including\n+   --  generics and renamings. The first item is the N_Package_Declaration node\n+   --  for package Standard. Bodies are not included, except for the main unit\n+   --  itself, which always comes last.\n    --\n    --  Item is never a subunit\n    --"}, {"sha": "c675f056ccf41ea7e13ed1a26e0f1731756ae461", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e3689bd20d682d6f10373abccea6445d901c499/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e3689bd20d682d6f10373abccea6445d901c499/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=1e3689bd20d682d6f10373abccea6445d901c499", "patch": "@@ -6446,6 +6446,14 @@ package body Sem_Ch4 is\n                   return;\n                end if;\n \n+            elsif Nkind_In (N, N_Op_Eq, N_Op_Ne) then\n+               if Address_Integer_Convert_OK (Etype (R), Etype (L)) then\n+                  Rewrite (R,\n+                    Unchecked_Convert_To (Etype (L), Relocate_Node (R)));\n+                  Analyze_Equality_Op (N);\n+                  return;\n+               end if;\n+\n             --  For an arithmetic operator or comparison operator, if one\n             --  of the operands is numeric, then we know the other operand\n             --  is not the same numeric type. If it is a non-numeric type,\n@@ -6472,11 +6480,16 @@ package body Sem_Ch4 is\n                   if Address_Integer_Convert_OK (Etype (R), Etype (L)) then\n                      Rewrite (R,\n                        Unchecked_Convert_To (Etype (L), Relocate_Node (R)));\n-                     Analyze_Arithmetic_Op (N);\n \n+                     if Nkind_In (N, N_Op_Ge, N_Op_Gt, N_Op_Le, N_Op_Lt) then\n+                        Analyze_Comparison_Op (N);\n+                     else\n+                        Analyze_Arithmetic_Op (N);\n+                     end if;\n                   else\n                      Resolve (R, Etype (L));\n                   end if;\n+\n                   return;\n \n                elsif Is_Numeric_Type (Etype (R))\n@@ -6485,7 +6498,13 @@ package body Sem_Ch4 is\n                   if Address_Integer_Convert_OK (Etype (L), Etype (R)) then\n                      Rewrite (L,\n                        Unchecked_Convert_To (Etype (R), Relocate_Node (L)));\n-                     Analyze_Arithmetic_Op (N);\n+\n+                     if Nkind_In (N, N_Op_Ge, N_Op_Gt, N_Op_Le, N_Op_Lt) then\n+                        Analyze_Comparison_Op (N);\n+                     else\n+                        Analyze_Arithmetic_Op (N);\n+                     end if;\n+\n                      return;\n \n                   else\n@@ -6509,7 +6528,12 @@ package body Sem_Ch4 is\n                      Rewrite (R,\n                        Unchecked_Convert_To (\n                          Standard_Integer, Relocate_Node (R)));\n-                     Analyze_Arithmetic_Op (N);\n+\n+                     if Nkind_In (N, N_Op_Ge, N_Op_Gt, N_Op_Le, N_Op_Lt) then\n+                        Analyze_Comparison_Op (N);\n+                     else\n+                        Analyze_Arithmetic_Op (N);\n+                     end if;\n \n                      --  If this is an operand in an enclosing arithmetic\n                      --  operation, Convert the result as an address so that"}]}