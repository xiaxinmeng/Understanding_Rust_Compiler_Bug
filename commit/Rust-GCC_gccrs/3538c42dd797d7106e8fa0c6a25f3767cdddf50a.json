{"sha": "3538c42dd797d7106e8fa0c6a25f3767cdddf50a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzUzOGM0MmRkNzk3ZDcxMDZlOGZhMGM2YTI1ZjM3NjdjZGRkZjUwYQ==", "commit": {"author": {"name": "Sa Liu", "email": "saliu@gcc.gnu.org", "date": "2007-11-16T13:23:28Z"}, "committer": {"name": "Sa Liu", "email": "saliu@gcc.gnu.org", "date": "2007-11-16T13:23:28Z"}, "message": "Inlined floatunssidf2 and floatunsdidf2\n\nFrom-SVN: r130225", "tree": {"sha": "fd343b07e34f98d4d65ac7ed4d9706a6a8d68b3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd343b07e34f98d4d65ac7ed4d9706a6a8d68b3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3538c42dd797d7106e8fa0c6a25f3767cdddf50a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3538c42dd797d7106e8fa0c6a25f3767cdddf50a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3538c42dd797d7106e8fa0c6a25f3767cdddf50a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3538c42dd797d7106e8fa0c6a25f3767cdddf50a/comments", "author": null, "committer": null, "parents": [{"sha": "99552e406c4175a2d700149758ba8c6c70d400f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99552e406c4175a2d700149758ba8c6c70d400f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99552e406c4175a2d700149758ba8c6c70d400f2"}], "stats": {"total": 157, "additions": 132, "deletions": 25}, "files": [{"sha": "31d2f14c6919f0dae7e927f26fc08b51fe0cd0f8", "filename": "gcc/config/spu/spu.md", "status": "modified", "additions": 132, "deletions": 25, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3538c42dd797d7106e8fa0c6a25f3767cdddf50a/gcc%2Fconfig%2Fspu%2Fspu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3538c42dd797d7106e8fa0c6a25f3767cdddf50a/gcc%2Fconfig%2Fspu%2Fspu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.md?ref=3538c42dd797d7106e8fa0c6a25f3767cdddf50a", "patch": "@@ -663,38 +663,86 @@\n \t(float:DF (match_operand:SI 1 \"register_operand\" \"\")))]\n   \"\"\n   {\n-    rtx value, insns;\n     rtx c0 = gen_reg_rtx (SImode);\n     rtx c1 = gen_reg_rtx (DFmode);\n     rtx r0 = gen_reg_rtx (SImode);\n     rtx r1 = gen_reg_rtx (DFmode);\n \n     emit_move_insn (c0, GEN_INT (-0x80000000ll));\n     emit_move_insn (c1, spu_float_const (\"2147483648\", DFmode));\n-\n     emit_insn (gen_xorsi3 (r0, operands[1], c0));\n+    emit_insn (gen_floatunssidf2 (r1, r0));\n+    emit_insn (gen_subdf3 (operands[0], r1, c1));\n+    DONE;\n+  })\n \n-    start_sequence ();\n-    value =\n-      emit_library_call_value (convert_optab_libfunc (ufloat_optab,\n-                                                      DFmode, SImode),\n-                               NULL_RTX, LCT_NORMAL, DFmode, 1, r0, SImode);\n+(define_expand \"floatunssidf2\"\n+  [(set (match_operand:DF 0 \"register_operand\"  \"=r\")\n+        (unsigned_float:DF (match_operand:SI 1 \"register_operand\"   \"r\")))]\n+  \"\"\n+  \"{\n+    rtx value, insns;\n+    rtx c0 = spu_const_from_ints (V16QImode, 0x02031011, 0x12138080, \n+                                             0x06071415, 0x16178080);\n+    rtx r0 = gen_reg_rtx (V16QImode);\n \n-    insns = get_insns ();\n-    end_sequence ();\n-    emit_libcall_block (insns, r1, value,\n-\t\t\tgen_rtx_UNSIGNED_FLOAT (DFmode, r0));\n+    if (optimize_size)\n+    {\n+       start_sequence ();\n+       value =\n+         emit_library_call_value (convert_optab_libfunc (ufloat_optab,\n+                                                         DFmode, SImode),\n+                   NULL_RTX, LCT_NORMAL, DFmode, 1, operands[1], SImode);\n+       insns = get_insns ();\n+       end_sequence ();\n+       emit_libcall_block (insns, operands[0], value,\n+                           gen_rtx_UNSIGNED_FLOAT (DFmode, operands[1]));\n+     }\n+     else\n+     {\n+      emit_move_insn (r0, c0);\n+      emit_insn (gen_floatunssidf2_internal (operands[0], operands[1], r0));\n+     }\n+    DONE;\n+  }\")\n \n-    emit_insn (gen_subdf3 (operands[0], r1, c1));\n+(define_insn_and_split \"floatunssidf2_internal\"\n+  [(set (match_operand:DF 0 \"register_operand\"  \"=r\")\n+        (unsigned_float:DF (match_operand:SI 1 \"register_operand\"   \"r\")))\n+   (use (match_operand:V16QI 2 \"register_operand\" \"r\"))\n+   (clobber (match_scratch:V4SI 3 \"=&r\"))\n+   (clobber (match_scratch:V4SI 4 \"=&r\"))\n+   (clobber (match_scratch:V4SI 5 \"=&r\"))\n+   (clobber (match_scratch:V4SI 6 \"=&r\"))]\n+  \"\"\n+  \"clz\\t%3,%1\\;il\\t%6,1023+31\\;shl\\t%4,%1,%3\\;ceqi\\t%5,%3,32\\;sf\\t%6,%3,%6\\;a\\t%4,%4,%4\\;andc\\t%6,%6,%5\\;shufb\\t%6,%6,%4,%2\\;shlqbii\\t%0,%6,4\"\n+  \"reload_completed\"\n+  [(set (match_dup:DF 0)\n+        (unsigned_float:DF (match_dup:SI 1)))]\n+ \"{\n+    rtx *ops = operands;\n+    rtx op1_v4si = gen_rtx_REG(V4SImode, REGNO(ops[1]));\n+    rtx op0_ti = gen_rtx_REG (TImode, REGNO (ops[0]));\n+    rtx op2_ti = gen_rtx_REG (TImode, REGNO (ops[2]));\n+    rtx op6_ti = gen_rtx_REG (TImode, REGNO (ops[6]));\n+    emit_insn (gen_clzv4si2 (ops[3],op1_v4si));\n+    emit_move_insn (ops[6], spu_const (V4SImode, 1023+31));\n+    emit_insn (gen_ashlv4si3 (ops[4],op1_v4si,ops[3]));\n+    emit_insn (gen_ceq_v4si (ops[5],ops[3],spu_const (V4SImode, 32)));\n+    emit_insn (gen_subv4si3 (ops[6],ops[6],ops[3]));\n+    emit_insn (gen_addv4si3 (ops[4],ops[4],ops[4]));\n+    emit_insn (gen_andc_v4si  (ops[6],ops[6],ops[5]));\n+    emit_insn (gen_shufb (ops[6],ops[6],ops[4],op2_ti));\n+    emit_insn (gen_shlqbi_ti (op0_ti,op6_ti,GEN_INT(4)));\n     DONE;\n-  })\n+  }\"\n+ [(set_attr \"length\" \"32\")])\n \n (define_expand \"floatdidf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"\")\n \t(float:DF (match_operand:DI 1 \"register_operand\" \"\")))]\n   \"\"\n   {\n-    rtx value, insns;\n     rtx c0 = gen_reg_rtx (DImode);\n     rtx r0 = gen_reg_rtx (DImode);\n     rtx r1 = gen_reg_rtx (DFmode);\n@@ -712,22 +760,81 @@\n     emit_insn (gen_selb (r0, neg, operands[1], mask));\n     emit_insn (gen_andc_di (setneg, c0, mask));\n \n-\n-    start_sequence ();\n-    value =\n-      emit_library_call_value (convert_optab_libfunc (ufloat_optab,\n-                                                      DFmode, DImode),\n-                               NULL_RTX, LCT_NORMAL, DFmode, 1, r0, DImode);\n-\n-    insns = get_insns ();\n-    end_sequence ();\n-    emit_libcall_block (insns, r1, value,\n-\t\t\tgen_rtx_UNSIGNED_FLOAT (DFmode, r0));\n+    emit_insn (gen_floatunsdidf2 (r1, r0));\n \n     emit_insn (gen_iordi3 (r2, gen_rtx_SUBREG (DImode, r1, 0), setneg));\n     emit_move_insn (operands[0], gen_rtx_SUBREG (DFmode, r2, 0));\n     DONE;\n   })\n+\n+(define_expand \"floatunsdidf2\"\n+  [(set (match_operand:DF 0 \"register_operand\"  \"=r\")\n+        (unsigned_float:DF (match_operand:DI 1 \"register_operand\"   \"r\")))]\n+  \"\"\n+  \"{\n+    rtx value, insns;\n+    rtx c0 = spu_const_from_ints (V16QImode, 0x02031011, 0x12138080, \n+                                             0x06071415, 0x16178080);\n+    rtx c1 = spu_const_from_ints (V4SImode, 1023+63, 1023+31, 0, 0);\n+    rtx r0 = gen_reg_rtx (V16QImode);\n+    rtx r1 = gen_reg_rtx (V4SImode);\n+\n+    if (optimize_size)\n+    {      \n+      start_sequence ();\n+      value =\n+         emit_library_call_value (convert_optab_libfunc (ufloat_optab,\n+                                                         DFmode, DImode),\n+                   NULL_RTX, LCT_NORMAL, DFmode, 1, operands[1], DImode);\n+      insns = get_insns ();\n+      end_sequence ();\n+      emit_libcall_block (insns, operands[0], value,\n+                          gen_rtx_UNSIGNED_FLOAT (DFmode, operands[1]));\n+    }\n+    else\n+    {\n+      emit_move_insn (r1, c1);\n+      emit_move_insn (r0, c0);\n+      emit_insn (gen_floatunsdidf2_internal (operands[0], operands[1], r0, r1));\n+    }\n+    DONE;\n+  }\")\n+\n+(define_insn_and_split \"floatunsdidf2_internal\"\n+  [(set (match_operand:DF 0 \"register_operand\"  \"=r\")\n+        (unsigned_float:DF (match_operand:DI 1 \"register_operand\"   \"r\")))\n+   (use (match_operand:V16QI 2 \"register_operand\" \"r\"))\n+   (use (match_operand:V4SI 3 \"register_operand\" \"r\"))\n+   (clobber (match_scratch:V4SI 4 \"=&r\"))\n+   (clobber (match_scratch:V4SI 5 \"=&r\"))\n+   (clobber (match_scratch:V4SI 6 \"=&r\"))]\n+  \"\"\n+  \"clz\\t%4,%1\\;shl\\t%5,%1,%4\\;ceqi\\t%6,%4,32\\;sf\\t%4,%4,%3\\;a\\t%5,%5,%5\\;andc\\t%4,%4,%6\\;shufb\\t%4,%4,%5,%2\\;shlqbii\\t%4,%4,4\\;shlqbyi\\t%5,%4,8\\;dfa\\t%0,%4,%5\"\n+  \"reload_completed\"\n+  [(set (match_operand:DF 0 \"register_operand\"  \"=r\")\n+        (unsigned_float:DF (match_operand:DI 1 \"register_operand\"   \"r\")))]\n+  \"{\n+    rtx *ops = operands;\n+    rtx op1_v4si = gen_rtx_REG (V4SImode, REGNO(ops[1]));\n+    rtx op2_ti = gen_rtx_REG (TImode, REGNO(ops[2]));\n+    rtx op4_ti = gen_rtx_REG (TImode, REGNO(ops[4]));\n+    rtx op5_ti = gen_rtx_REG (TImode, REGNO(ops[5]));\n+    rtx op4_df = gen_rtx_REG (DFmode, REGNO(ops[4]));\n+    rtx op5_df = gen_rtx_REG (DFmode, REGNO(ops[5]));\n+    emit_insn (gen_clzv4si2 (ops[4],op1_v4si));\n+    emit_insn (gen_ashlv4si3 (ops[5],op1_v4si,ops[4]));\n+    emit_insn (gen_ceq_v4si (ops[6],ops[4],spu_const (V4SImode, 32)));\n+    emit_insn (gen_subv4si3 (ops[4],ops[3],ops[4]));\n+    emit_insn (gen_addv4si3 (ops[5],ops[5],ops[5]));\n+    emit_insn (gen_andc_v4si (ops[4],ops[4],ops[6]));\n+    emit_insn (gen_shufb (ops[4],ops[4],ops[5],op2_ti));\n+    emit_insn (gen_shlqbi_ti (op4_ti,op4_ti,GEN_INT(4)));\n+    emit_insn (gen_shlqby_ti (op5_ti,op4_ti,GEN_INT(8)));\n+    emit_insn (gen_adddf3 (ops[0],op4_df,op5_df));\n+    DONE;\n+  }\"\n+  [(set_attr \"length\" \"40\")])\n+\n \f\n ;; add\n "}]}