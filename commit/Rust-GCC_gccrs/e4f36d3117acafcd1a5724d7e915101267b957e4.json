{"sha": "e4f36d3117acafcd1a5724d7e915101267b957e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRmMzZkMzExN2FjYWZjZDFhNTcyNGQ3ZTkxNTEwMTI2N2I5NTdlNA==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2010-05-13T14:46:29Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2010-05-13T14:46:29Z"}, "message": "ira-conflicts.c (print_allocno_conflicts): New function broken out from...\n\n\t* ira-conflicts.c (print_allocno_conflicts): New function broken out\n\tfrom...\n\t(print_conflicts): Call print_allocno_conflicts.\n\nFrom-SVN: r159368", "tree": {"sha": "d639ecc05dac2aceaa0d49d0c1a67fc5626d3c2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d639ecc05dac2aceaa0d49d0c1a67fc5626d3c2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4f36d3117acafcd1a5724d7e915101267b957e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4f36d3117acafcd1a5724d7e915101267b957e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4f36d3117acafcd1a5724d7e915101267b957e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4f36d3117acafcd1a5724d7e915101267b957e4/comments", "author": null, "committer": null, "parents": [{"sha": "1fcebc1100ac1071632480c742df280649fab312", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fcebc1100ac1071632480c742df280649fab312", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fcebc1100ac1071632480c742df280649fab312"}], "stats": {"total": 110, "additions": 60, "deletions": 50}, "files": [{"sha": "3c178f6b4c50fe9dc7728ccf775a64d630eeb695", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f36d3117acafcd1a5724d7e915101267b957e4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f36d3117acafcd1a5724d7e915101267b957e4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e4f36d3117acafcd1a5724d7e915101267b957e4", "patch": "@@ -1,3 +1,9 @@\n+2010-05-13  Jeff Law  <law@redhat.com>\n+\n+\t* ira-conflicts.c (print_allocno_conflicts): New function broken out\n+\tfrom...\n+\t(print_conflicts): Call print_allocno_conflicts.\n+\n 2010-05-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/44104"}, {"sha": "70100acbb7f9e5f18fb5410fa444fba738e637a1", "filename": "gcc/ira-conflicts.c", "status": "modified", "additions": 54, "deletions": 50, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f36d3117acafcd1a5724d7e915101267b957e4/gcc%2Fira-conflicts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f36d3117acafcd1a5724d7e915101267b957e4/gcc%2Fira-conflicts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-conflicts.c?ref=e4f36d3117acafcd1a5724d7e915101267b957e4", "patch": "@@ -684,67 +684,71 @@ print_hard_reg_set (FILE *file, const char *title, HARD_REG_SET set)\n   putc ('\\n', file);\n }\n \n-/* Print information about allocno or only regno (if REG_P) conflicts\n-   to FILE.  */\n static void\n-print_conflicts (FILE *file, bool reg_p)\n+print_allocno_conflicts (FILE * file, bool reg_p, ira_allocno_t a)\n {\n-  ira_allocno_t a;\n-  ira_allocno_iterator ai;\n   HARD_REG_SET conflicting_hard_regs;\n+  ira_allocno_t conflict_a;\n+  ira_allocno_conflict_iterator aci;\n+  basic_block bb;\n \n-  FOR_EACH_ALLOCNO (a, ai)\n+  if (reg_p)\n+    fprintf (file, \";; r%d\", ALLOCNO_REGNO (a));\n+  else\n     {\n-      ira_allocno_t conflict_a;\n-      ira_allocno_conflict_iterator aci;\n-      basic_block bb;\n-\n-      if (reg_p)\n-\tfprintf (file, \";; r%d\", ALLOCNO_REGNO (a));\n+      fprintf (file, \";; a%d(r%d,\", ALLOCNO_NUM (a), ALLOCNO_REGNO (a));\n+      if ((bb = ALLOCNO_LOOP_TREE_NODE (a)->bb) != NULL)\n+        fprintf (file, \"b%d\", bb->index);\n       else\n-\t{\n-\t  fprintf (file, \";; a%d(r%d,\", ALLOCNO_NUM (a), ALLOCNO_REGNO (a));\n-\t  if ((bb = ALLOCNO_LOOP_TREE_NODE (a)->bb) != NULL)\n-\t    fprintf (file, \"b%d\", bb->index);\n-\t  else\n-\t    fprintf (file, \"l%d\", ALLOCNO_LOOP_TREE_NODE (a)->loop->num);\n-\t  putc (')', file);\n-\t}\n-      fputs (\" conflicts:\", file);\n-      if (ALLOCNO_CONFLICT_ALLOCNO_ARRAY (a) != NULL)\n-\tFOR_EACH_ALLOCNO_CONFLICT (a, conflict_a, aci)\n-\t  {\n-\t    if (reg_p)\n-\t      fprintf (file, \" r%d,\", ALLOCNO_REGNO (conflict_a));\n+        fprintf (file, \"l%d\", ALLOCNO_LOOP_TREE_NODE (a)->loop->num);\n+      putc (')', file);\n+    }\n+  fputs (\" conflicts:\", file);\n+  if (ALLOCNO_CONFLICT_ALLOCNO_ARRAY (a) != NULL)\n+    FOR_EACH_ALLOCNO_CONFLICT (a, conflict_a, aci)\n+      {\n+        if (reg_p)\n+          fprintf (file, \" r%d,\", ALLOCNO_REGNO (conflict_a));\n+        else\n+          {\n+\t    fprintf (file, \" a%d(r%d,\", ALLOCNO_NUM (conflict_a),\n+\t\t     ALLOCNO_REGNO (conflict_a));\n+\t    if ((bb = ALLOCNO_LOOP_TREE_NODE (conflict_a)->bb) != NULL)\n+\t      fprintf (file, \"b%d)\", bb->index);\n \t    else\n-\t      {\n-\t\tfprintf (file, \" a%d(r%d,\", ALLOCNO_NUM (conflict_a),\n-\t\t\t ALLOCNO_REGNO (conflict_a));\n-\t\tif ((bb = ALLOCNO_LOOP_TREE_NODE (conflict_a)->bb) != NULL)\n-\t\t  fprintf (file, \"b%d)\", bb->index);\n-\t\telse\n-\t\t  fprintf (file, \"l%d)\",\n-\t\t\t   ALLOCNO_LOOP_TREE_NODE (conflict_a)->loop->num);\n-\t      }\n+\t      fprintf (file, \"l%d)\",\n+\t\t       ALLOCNO_LOOP_TREE_NODE (conflict_a)->loop->num);\n \t  }\n-      COPY_HARD_REG_SET (conflicting_hard_regs,\n-\t\t\t ALLOCNO_TOTAL_CONFLICT_HARD_REGS (a));\n-      AND_COMPL_HARD_REG_SET (conflicting_hard_regs, ira_no_alloc_regs);\n-      AND_HARD_REG_SET (conflicting_hard_regs,\n-\t\t\treg_class_contents[ALLOCNO_COVER_CLASS (a)]);\n-      print_hard_reg_set (file, \"\\n;;     total conflict hard regs:\",\n-\t\t\t  conflicting_hard_regs);\n-      COPY_HARD_REG_SET (conflicting_hard_regs,\n-\t\t\t ALLOCNO_CONFLICT_HARD_REGS (a));\n-      AND_COMPL_HARD_REG_SET (conflicting_hard_regs, ira_no_alloc_regs);\n-      AND_HARD_REG_SET (conflicting_hard_regs,\n-\t\t\treg_class_contents[ALLOCNO_COVER_CLASS (a)]);\n-      print_hard_reg_set (file, \";;     conflict hard regs:\",\n-\t\t\t  conflicting_hard_regs);\n-    }\n+      }\n+  COPY_HARD_REG_SET (conflicting_hard_regs,\n+\t\t     ALLOCNO_TOTAL_CONFLICT_HARD_REGS (a));\n+  AND_COMPL_HARD_REG_SET (conflicting_hard_regs, ira_no_alloc_regs);\n+  AND_HARD_REG_SET (conflicting_hard_regs,\n+\t\t    reg_class_contents[ALLOCNO_COVER_CLASS (a)]);\n+  print_hard_reg_set (file, \"\\n;;     total conflict hard regs:\",\n+\t\t      conflicting_hard_regs);\n+  COPY_HARD_REG_SET (conflicting_hard_regs,\n+\t\t     ALLOCNO_CONFLICT_HARD_REGS (a));\n+  AND_COMPL_HARD_REG_SET (conflicting_hard_regs, ira_no_alloc_regs);\n+  AND_HARD_REG_SET (conflicting_hard_regs,\n+\t\t    reg_class_contents[ALLOCNO_COVER_CLASS (a)]);\n+  print_hard_reg_set (file, \";;     conflict hard regs:\",\n+\t\t      conflicting_hard_regs);\n   putc ('\\n', file);\n }\n \n+/* Print information about allocno or only regno (if REG_P) conflicts\n+   to FILE.  */\n+static void\n+print_conflicts (FILE *file, bool reg_p)\n+{\n+  ira_allocno_t a;\n+  ira_allocno_iterator ai;\n+\n+  FOR_EACH_ALLOCNO (a, ai)\n+    print_allocno_conflicts (file, reg_p, a);\n+}\n+\n /* Print information about allocno or only regno (if REG_P) conflicts\n    to stderr.  */\n void"}]}