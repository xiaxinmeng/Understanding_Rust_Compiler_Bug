{"sha": "a46fa6510d24f4edcfd13dace9f7a0b4d86b86be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ2ZmE2NTEwZDI0ZjRlZGNmZDEzZGFjZTlmN2EwYjRkODZiODZiZQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2020-10-18T16:17:51Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-11-25T13:22:47Z"}, "message": "[Ada] Further optimization with uninitialized aggregates\n\ngcc/ada/\n\n\t* freeze.adb (Is_Uninitialized_Aggregate): Move...\n\t* exp_util.adb (Is_Uninitialized_Aggregate): ... here.\n\t(Expand_Subtype_From_Expr): If the expression is an\n\tuninitialized aggregate, capture subtype for declared object and\n\tremove expression to suppress further superfluous expansion.", "tree": {"sha": "bccfce792ea3e01f9a5721010a8458e0ec741c4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bccfce792ea3e01f9a5721010a8458e0ec741c4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a46fa6510d24f4edcfd13dace9f7a0b4d86b86be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a46fa6510d24f4edcfd13dace9f7a0b4d86b86be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a46fa6510d24f4edcfd13dace9f7a0b4d86b86be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a46fa6510d24f4edcfd13dace9f7a0b4d86b86be/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55fae09dcb8257c8f4be90198f675aafe4ed8f9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55fae09dcb8257c8f4be90198f675aafe4ed8f9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55fae09dcb8257c8f4be90198f675aafe4ed8f9c"}], "stats": {"total": 108, "additions": 62, "deletions": 46}, "files": [{"sha": "dd3aa49af7de113563359807691c9d2cf4418be9", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a46fa6510d24f4edcfd13dace9f7a0b4d86b86be/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a46fa6510d24f4edcfd13dace9f7a0b4d86b86be/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=a46fa6510d24f4edcfd13dace9f7a0b4d86b86be", "patch": "@@ -169,6 +169,16 @@ package body Exp_Util is\n    --  Determine whether pragma Default_Initial_Condition denoted by Prag has\n    --  an assertion expression that should be verified at run time.\n \n+   function Is_Uninitialized_Aggregate\n+     (Exp : Node_Id;\n+      T   : Entity_Id) return Boolean;\n+   --  Determine whether an array aggregate used in an object declaration\n+   --  is uninitialized, when the aggregate is declared with a box and\n+   --  the component type has no default value. Such an aggregate can be\n+   --  optimized away to prevent the copying of uninitialized data, and\n+   --  the bounds of the aggregate can be propagated directly to the\n+   --  object declaration.\n+\n    function Make_CW_Equivalent_Type\n      (T : Entity_Id;\n       E : Node_Id) return Entity_Id;\n@@ -5346,6 +5356,17 @@ package body Exp_Util is\n       elsif Is_Build_In_Place_Function_Call (Exp) then\n          null;\n \n+     --  If the exprewsion is an uninitialized aggregate, no need to build\n+     --  a subtype from the expression. because this may require the use\n+     --  of dynamic memory to create the object.\n+\n+      elsif Is_Uninitialized_Aggregate (Exp, Exp_Typ) then\n+         Rewrite (Subtype_Indic, New_Occurrence_Of (Etype (Exp), Sloc (N)));\n+         if Nkind (N) = N_Object_Declaration then\n+            Set_Expression (N, Empty);\n+            Set_No_Initialization (N);\n+         end if;\n+\n       else\n          Remove_Side_Effects (Exp);\n          Rewrite (Subtype_Indic,\n@@ -8794,6 +8815,47 @@ package body Exp_Util is\n           and then Etype (Expression (Expr)) = RTE (RE_Tag);\n    end Is_Tag_To_Class_Wide_Conversion;\n \n+   --------------------------------\n+   -- Is_Uninitialized_Aggregate --\n+   --------------------------------\n+\n+   function Is_Uninitialized_Aggregate\n+     (Exp : Node_Id;\n+      T   : Entity_Id) return Boolean\n+   is\n+      Comp      : Node_Id;\n+      Comp_Type : Entity_Id;\n+      Typ       : Entity_Id;\n+\n+   begin\n+      if Nkind (Exp) /= N_Aggregate then\n+         return False;\n+      end if;\n+\n+      Preanalyze_And_Resolve (Exp, T);\n+      Typ  := Etype (Exp);\n+\n+      if No (Typ)\n+        or else Ekind (Typ) /= E_Array_Subtype\n+        or else Present (Expressions (Exp))\n+        or else No (Component_Associations (Exp))\n+      then\n+         return False;\n+      else\n+         Comp_Type := Component_Type (Typ);\n+         Comp := First (Component_Associations (Exp));\n+\n+         if not Box_Present (Comp)\n+           or else Present (Next (Comp))\n+         then\n+            return False;\n+         end if;\n+\n+         return Is_Scalar_Type (Comp_Type)\n+           and then No (Default_Aspect_Component_Value (Typ));\n+      end if;\n+   end Is_Uninitialized_Aggregate;\n+\n    ----------------------------\n    -- Is_Untagged_Derivation --\n    ----------------------------"}, {"sha": "24f6c93c06dedc9c2eff6f47208c127b82adc82d", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a46fa6510d24f4edcfd13dace9f7a0b4d86b86be/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a46fa6510d24f4edcfd13dace9f7a0b4d86b86be/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=a46fa6510d24f4edcfd13dace9f7a0b4d86b86be", "patch": "@@ -182,12 +182,6 @@ package body Freeze is\n    --  the designated type. Otherwise freezing the access type does not freeze\n    --  the designated type.\n \n-   function Is_Uninitialized_Aggregate (N : Node_Id) return Boolean;\n-   --  Determine whether an array aggregate used in an object declaration\n-   --  is uninitialized, when the aggregate is declared with a box and\n-   --  the component type has no default value. Such an aggregate can be\n-   --  optimized away and prevent the copying of uninitialized data.\n-\n    procedure Process_Default_Expressions\n      (E     : Entity_Id;\n       After : in out Node_Id);\n@@ -727,12 +721,6 @@ package body Freeze is\n          if Present (Init)\n            and then not Is_Limited_View (Typ)\n          then\n-            if Is_Uninitialized_Aggregate (Init) then\n-               Init := Empty;\n-               Set_No_Initialization (Decl);\n-               return;\n-            end if;\n-\n             --  Capture initialization value at point of declaration, and make\n             --  explicit assignment legal, because object may be a constant.\n \n@@ -9153,40 +9141,6 @@ package body Freeze is\n       end if;\n    end Freeze_Subprogram;\n \n-   --------------------------------\n-   -- Is_Uninitialized_Aggregate --\n-   --------------------------------\n-\n-   function Is_Uninitialized_Aggregate (N : Node_Id) return Boolean is\n-      Aggr : constant Node_Id := Original_Node (N);\n-      Typ  : constant Entity_Id := Etype (Aggr);\n-\n-      Comp      : Node_Id;\n-      Comp_Type : Entity_Id;\n-   begin\n-      if Nkind (Aggr) /= N_Aggregate\n-        or else No (Typ)\n-        or else Ekind (Typ) /= E_Array_Type\n-        or else Present (Expressions (Aggr))\n-        or else No (Component_Associations (Aggr))\n-      then\n-         return False;\n-      else\n-         Comp_Type := Component_Type (Typ);\n-         Comp := First (Component_Associations (Aggr));\n-\n-         if not Box_Present (Comp)\n-           or else Present (Next (Comp))\n-         then\n-            return False;\n-         end if;\n-\n-         return Is_Scalar_Type (Comp_Type)\n-           and then No (Default_Aspect_Component_Value (Typ))\n-           and then No (Default_Aspect_Value (Comp_Type));\n-      end if;\n-   end Is_Uninitialized_Aggregate;\n-\n    ----------------------\n    -- Is_Fully_Defined --\n    ----------------------"}]}