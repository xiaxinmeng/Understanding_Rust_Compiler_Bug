{"sha": "32be9f94bfc4c7246f9091764afc55ffca2db9c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJiZTlmOTRiZmM0YzcyNDZmOTA5MTc2NGFmYzU1ZmZjYTJkYjljOQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2008-01-10T19:10:48Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2008-01-10T19:10:48Z"}, "message": "re PR fortran/34396 (Length of substrings defined by expressions not correctly computed in constructors)\n\n2008-01-10  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/34396\n\t* trans-array.c (gfc_trans_array_ctor_element):  Use gfc_trans_string_copy\n\tto assign strings and perform bounds checks on the string length.\n\t(get_array_ctor_strlen): Remove bounds checking.\n\t(gfc_trans_array_constructor): Initialize string length checking.\n\t* trans-array.h : Add prototype for gfc_trans_string_copy.\n\n2008-01-10  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/34396\n\t* gfortran.dg/bounds_check_12.f90: New test.\n\nFrom-SVN: r131448", "tree": {"sha": "859fbc40552efe9c0f56f7d86b1c9c1208aed0f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/859fbc40552efe9c0f56f7d86b1c9c1208aed0f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32be9f94bfc4c7246f9091764afc55ffca2db9c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32be9f94bfc4c7246f9091764afc55ffca2db9c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32be9f94bfc4c7246f9091764afc55ffca2db9c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32be9f94bfc4c7246f9091764afc55ffca2db9c9/comments", "author": null, "committer": null, "parents": [{"sha": "814252befa3cd780269ed0a321e2d83e5683c557", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/814252befa3cd780269ed0a321e2d83e5683c557", "html_url": "https://github.com/Rust-GCC/gccrs/commit/814252befa3cd780269ed0a321e2d83e5683c557"}], "stats": {"total": 105, "additions": 83, "deletions": 22}, "files": [{"sha": "6a425317c1773d86ae1653248b5d874188be7499", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32be9f94bfc4c7246f9091764afc55ffca2db9c9/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32be9f94bfc4c7246f9091764afc55ffca2db9c9/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=32be9f94bfc4c7246f9091764afc55ffca2db9c9", "patch": "@@ -1,3 +1,12 @@\n+2008-01-10  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/34396\n+\t* trans-array.c (gfc_trans_array_ctor_element):  Use gfc_trans_string_copy\n+\tto assign strings and perform bounds checks on the string length.\n+\t(get_array_ctor_strlen): Remove bounds checking.\n+\t(gfc_trans_array_constructor): Initialize string length checking.\n+\t* trans-array.h : Add prototype for gfc_trans_string_copy.\n+\n 2008-01-08  Richard Guenther  <rguenther@suse.de>\n \n \tPR fortran/34706"}, {"sha": "1718ba9cfae369014ac9ec4eb7b76387a5813841", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 37, "deletions": 21, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32be9f94bfc4c7246f9091764afc55ffca2db9c9/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32be9f94bfc4c7246f9091764afc55ffca2db9c9/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=32be9f94bfc4c7246f9091764afc55ffca2db9c9", "patch": "@@ -951,18 +951,25 @@ gfc_put_offset_into_var (stmtblock_t * pblock, tree * poffset,\n \n \n /* Assign an element of an array constructor.  */\n+static bool first_len;\n+static tree first_len_val; \n \n static void\n gfc_trans_array_ctor_element (stmtblock_t * pblock, tree desc,\n \t\t\t      tree offset, gfc_se * se, gfc_expr * expr)\n {\n   tree tmp;\n+  tree esize;\n \n   gfc_conv_expr (se, expr);\n \n   /* Store the value.  */\n   tmp = build_fold_indirect_ref (gfc_conv_descriptor_data_get (desc));\n   tmp = gfc_build_array_ref (tmp, offset, NULL);\n+\n+  esize = size_in_bytes (gfc_get_element_type (TREE_TYPE (desc)));\n+  esize = fold_convert (gfc_charlen_type_node, esize);\n+\n   if (expr->ts.type == BT_CHARACTER)\n     {\n       gfc_conv_string_parameter (se);\n@@ -978,9 +985,30 @@ gfc_trans_array_ctor_element (stmtblock_t * pblock, tree desc,\n \t  tmp = gfc_build_addr_expr (pchar_type_node, tmp);\n \t  /* We know the temporary and the value will be the same length,\n \t     so can use memcpy.  */\n-\t  tmp = build_call_expr (built_in_decls[BUILT_IN_MEMCPY], 3,\n-\t\t\t\t tmp, se->expr, se->string_length);\n-\t  gfc_add_expr_to_block (&se->pre, tmp);\n+\t  gfc_trans_string_copy (&se->pre, esize, tmp,\n+\t\t\t\t se->string_length,\n+\t\t\t\t se->expr);\n+\t}\n+      if (flag_bounds_check)\n+\t{\n+\t  if (first_len)\n+\t    {\n+\t      gfc_add_modify_expr (&se->pre, first_len_val,\n+\t\t\t\t   se->string_length);\n+\t      first_len = false;\n+\t    }\n+\t  else\n+\t    {\n+\t      /* Verify that all constructor elements are of the same\n+\t\t length.  */\n+\t      tree cond = fold_build2 (NE_EXPR, boolean_type_node,\n+\t\t\t\t       first_len_val, se->string_length);\n+\t      gfc_trans_runtime_check\n+\t\t(cond, &se->pre, &expr->where,\n+\t\t \"Different CHARACTER lengths (%ld/%ld) in array constructor\",\n+\t\t fold_convert (long_integer_type_node, first_len_val),\n+\t\t fold_convert (long_integer_type_node, se->string_length));\n+\t    }\n \t}\n     }\n   else\n@@ -1425,7 +1453,6 @@ bool\n get_array_ctor_strlen (stmtblock_t *block, gfc_constructor * c, tree * len)\n {\n   bool is_const;\n-  tree first_len = NULL_TREE;\n   \n   is_const = TRUE;\n \n@@ -1460,23 +1487,6 @@ get_array_ctor_strlen (stmtblock_t *block, gfc_constructor * c, tree * len)\n \t  get_array_ctor_all_strlen (block, c->expr, len);\n \t  break;\n \t}\n-      if (flag_bounds_check)\n-\t{\n-\t  if (!first_len)\n-\t    first_len = *len;\n-\t  else\n-\t    {\n-\t      /* Verify that all constructor elements are of the same\n-\t\t length.  */\n-\t      tree cond = fold_build2 (NE_EXPR, boolean_type_node,\n-\t\t\t\t       first_len, *len);\n-\t      gfc_trans_runtime_check\n-\t\t(cond, block, &c->expr->where,\n-\t\t \"Different CHARACTER lengths (%ld/%ld) in array constructor\",\n-\t\t fold_convert (long_integer_type_node, first_len),\n-\t\t fold_convert (long_integer_type_node, *len));\n-\t    }\n-\t}\n     }\n \n   return is_const;\n@@ -1660,6 +1670,12 @@ gfc_trans_array_constructor (gfc_loopinfo * loop, gfc_ss * ss)\n   tree type;\n   bool dynamic;\n \n+  if (flag_bounds_check && ss->expr->ts.type == BT_CHARACTER)\n+    {  \n+      first_len_val = gfc_create_var (gfc_charlen_type_node, \"len\");\n+      first_len = true;\n+    }\n+\n   ss->data.info.dimen = loop->dimen;\n \n   c = ss->expr->value.constructor;"}, {"sha": "98b6fb1a3490d7770c160ad4f70c35598241b29e", "filename": "gcc/fortran/trans-array.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32be9f94bfc4c7246f9091764afc55ffca2db9c9/gcc%2Ffortran%2Ftrans-array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32be9f94bfc4c7246f9091764afc55ffca2db9c9/gcc%2Ffortran%2Ftrans-array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.h?ref=32be9f94bfc4c7246f9091764afc55ffca2db9c9", "patch": "@@ -137,3 +137,6 @@ void gfc_add_intrinsic_ss_code (gfc_loopinfo *, gfc_ss *);\n /* Functions for constant array constructor processing.  */\n unsigned HOST_WIDE_INT gfc_constant_array_constructor_p (gfc_constructor *);\n tree gfc_build_constant_array_constructor (gfc_expr *, tree);\n+\n+/* Copy a string from src to dest.  */\n+void gfc_trans_string_copy (stmtblock_t *, tree, tree, tree, tree);"}, {"sha": "c1de2a9fad2a880e3caec3666f8e21bd89603662", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32be9f94bfc4c7246f9091764afc55ffca2db9c9/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32be9f94bfc4c7246f9091764afc55ffca2db9c9/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=32be9f94bfc4c7246f9091764afc55ffca2db9c9", "patch": "@@ -2803,7 +2803,7 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n \n /* Generate code to copy a string.  */\n \n-static void\n+void\n gfc_trans_string_copy (stmtblock_t * block, tree dlength, tree dest,\n \t\t       tree slength, tree src)\n {"}, {"sha": "7546770c97bda9af69421e5b793bc42cef5b8bcd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32be9f94bfc4c7246f9091764afc55ffca2db9c9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32be9f94bfc4c7246f9091764afc55ffca2db9c9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=32be9f94bfc4c7246f9091764afc55ffca2db9c9", "patch": "@@ -1,3 +1,8 @@\n+2008-01-10  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/34396\n+\t* gfortran.dg/bounds_check_12.f90: New test.\n+\n 2008-01-10  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.target/i386/cmov7.c: Add -mbranch-cost=5 to dg-options."}, {"sha": "f671badbaa5139e2b1b150afd242baedda4a2880", "filename": "gcc/testsuite/gfortran.dg/bounds_check_12.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32be9f94bfc4c7246f9091764afc55ffca2db9c9/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_12.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32be9f94bfc4c7246f9091764afc55ffca2db9c9/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_12.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_12.f90?ref=32be9f94bfc4c7246f9091764afc55ffca2db9c9", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do run }\n+! { dg-options \"-fbounds-check\" }\n+! { dg-shouldfail \"Different CHARACTER lengths\" }\n+! Tests the fix for PR34396, where the non-constant string lengths in the\n+! array constructor were being ignored and the bounds checking was not\n+! being done correctly.\n+!\n+! Contributed by Dominique d'Humieres <dominiq@lps.ens.fr>\n+!\n+program array_char\n+  implicit none\n+  integer :: i, j(5)\n+  character (len=5) :: x, y\n+  character (len=5) :: z(2)\n+  x = \"ab\"\n+  y = \"cd\"\n+  z = \"\"\n+  z = (/y(1: len (trim(y))), x(1: len (trim(x)))/)\n+  j = ichar ([(z(1)(i:i), i=1,5)])\n+  if (any (j .ne. (/99,100,32,32,32/))) call abort ()\n+  j = ichar ([(z(2)(i:i), i=1,5)])\n+  if (any (j .ne. (/97,98,32,32,32/))) call abort ()\n+  x = \"a \"\n+  z = (/y(1: len (trim(y))), x(1: len (trim(x)))/)\n+end program array_char\n+\n+! { dg-output \"At line 24 of file .*\" }\n+! { dg-output \"Different CHARACTER lengths .2/1. in array constructor\" }"}]}