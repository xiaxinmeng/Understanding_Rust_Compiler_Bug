{"sha": "b1f107272c6604f9b5d26be785cd8d4ec071e3dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFmMTA3MjcyYzY2MDRmOWI1ZDI2YmU3ODVjZDhkNGVjMDcxZTNkZA==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1999-12-29T17:54:29Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-12-29T17:54:29Z"}, "message": "pa.md (conditional zero): If op1 is a register, force it into the same register as op0.\n\n        * pa.md (conditional zero): If op1 is a register, force it into\n        the same register as op0.\n\nFrom-SVN: r31118", "tree": {"sha": "9692c753a06d26b78084a5b8d0a053b02a010d5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9692c753a06d26b78084a5b8d0a053b02a010d5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1f107272c6604f9b5d26be785cd8d4ec071e3dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1f107272c6604f9b5d26be785cd8d4ec071e3dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1f107272c6604f9b5d26be785cd8d4ec071e3dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1f107272c6604f9b5d26be785cd8d4ec071e3dd/comments", "author": null, "committer": null, "parents": [{"sha": "1fc69a8a429b038f26c691683a14fb5b2f83e723", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fc69a8a429b038f26c691683a14fb5b2f83e723", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fc69a8a429b038f26c691683a14fb5b2f83e723"}], "stats": {"total": 28, "additions": 19, "deletions": 9}, "files": [{"sha": "aa1d9cddb94edba1be83a37c9d3a93209107333b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1f107272c6604f9b5d26be785cd8d4ec071e3dd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1f107272c6604f9b5d26be785cd8d4ec071e3dd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b1f107272c6604f9b5d26be785cd8d4ec071e3dd", "patch": "@@ -1,3 +1,8 @@\n+Wed Dec 29 10:53:21 1999  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* pa.md (conditional zero): If op1 is a register, force it into\n+\tthe same register as op0.\n+\n 1999-12-28  Mark Mitchell  <mark@codesourcery.com>\n \n \t* tree.h (BINFO_BASETYPES): Improve documentation."}, {"sha": "a3ef9c55eac3423ed116026b793f2f5ab16b3b15", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1f107272c6604f9b5d26be785cd8d4ec071e3dd/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1f107272c6604f9b5d26be785cd8d4ec071e3dd/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=b1f107272c6604f9b5d26be785cd8d4ec071e3dd", "patch": "@@ -862,25 +862,30 @@\n   operands[5] = hppa_compare_op1;\n }\")\n \n-; We need the first constraint alternative in order to avoid\n-; earlyclobbers on all other alternatives.\n+;; We used to accept any register for op1.\n+;;\n+;; However, it loses sometimes because the compiler will end up using\n+;; different registers for op0 and op1 in some critical cases.  local-alloc\n+;; will  not tie op0 and op1 because op0 is used in multiple basic blocks.\n+;;\n+;; If/when global register allocation supports tying we should allow any\n+;; register for op1 again.\n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r,r,r,r\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r,r,r\")\n \t(if_then_else:SI\n \t (match_operator 5 \"comparison_operator\"\n-\t    [(match_operand:SI 3 \"register_operand\" \"r,r,r,r,r\")\n-\t     (match_operand:SI 4 \"arith11_operand\" \"rI,rI,rI,rI,rI\")])\n-\t (match_operand:SI 1 \"reg_or_cint_move_operand\" \"0,r,J,N,K\")\n+\t    [(match_operand:SI 3 \"register_operand\" \"r,r,r,r\")\n+\t     (match_operand:SI 4 \"arith11_operand\" \"rI,rI,rI,rI\")])\n+\t (match_operand:SI 1 \"reg_or_cint_move_operand\" \"0,J,N,K\")\n \t (const_int 0)))]\n   \"\"\n   \"@\n    {com%I4clr|cmp%I4clr},%S5 %4,%3,%%r0\\;ldi 0,%0\n-   {com%I4clr|cmp%I4clr},%B5 %4,%3,%0\\;copy %1,%0\n    {com%I4clr|cmp%I4clr},%B5 %4,%3,%0\\;ldi %1,%0\n    {com%I4clr|cmp%I4clr},%B5 %4,%3,%0\\;ldil L'%1,%0\n    {com%I4clr|cmp%I4clr},%B5 %4,%3,%0\\;{zdepi|depwi,z} %Z1,%0\"\n-  [(set_attr \"type\" \"multi,multi,multi,multi,nullshift\")\n-   (set_attr \"length\" \"8,8,8,8,8\")])\n+  [(set_attr \"type\" \"multi,multi,multi,nullshift\")\n+   (set_attr \"length\" \"8,8,8,8\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r,r,r,r,r,r,r\")"}]}