{"sha": "ba317c52361d1a16fac60b56af38198df9833dde", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmEzMTdjNTIzNjFkMWExNmZhYzYwYjU2YWYzODE5OGRmOTgzM2RkZQ==", "commit": {"author": {"name": "Brendan Kehoe", "email": "brendan@zen.org", "date": "2001-10-19T18:39:00Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-10-19T18:39:00Z"}, "message": "[multiple changes]\n\n\n2001-08-19  Brendan Kehoe  <brendan@zen.org>\n\n        * include/bits/std_complex.h: Default initialize second argument\n\tof polar to 0, as specified in Library DR #79\n\n2001-10-19  Brendan Kehoe  <brendan@zen.org>\n\n        * include/bits/stl_raw_storage_iter.h (operator=): Fix to call\n\t_Construct instead of construct.\n\n2001-10-19  Brendan Kehoe  <brendan@zen.org>\n\n        * include/bits/basic_string.tcc (find_first_not_of): Take out check for\n        __n being non-zero, since the standard does not mandate that.\n        e.g., a search for \"\" in \"\" should yield position 0, not npos.\n        (find_last_not_of): Likewise.\n\n2001-10-19  Brendan Kehoe  <brendan@zen.org>\n\n        * include/bits/stl_bvector.h (vector<bool>::_M_range_check): Fix\n\tto throw out_of_range, not range_error, thus sayeth $23.1.1.13.\n\n2001-10-19  Brendan Kehoe  <brendan@zen.org>\n\n        * include/bits/stl_iterator.h (reverse_iterator::current): Rename\n        member from _M_current, and change all uses; thus sayeth $24.4.1.1.\n\n2001-10-19  Brendan Kehoe  <brendan@zen.org>\n\n        * include/bits/stl_algo.h (partial_sort): Add missing `>' on the\n        template parameter _ValueType.\n\n2001-10-19  Brendan Kehoe  <brendan@zen.org>\n\n\t* include/bits/std_limits.h: Clean up extra semicolons.\n        * include/bits/locale_facets.h: Likewise.\n        * include/bits/type_traits.h: Likewise.\n\n2001-10-19  Brendan Kehoe  <brendan@zen.org>\n\n        * include/bits/localefwd.h (locale::combine): Add const for lib DR 14.\n        * include/bits/locale_facets.tcc (locale::combine): Likewise.\n\nFrom-SVN: r46353", "tree": {"sha": "1e69304deac7d973721960fafc3e3cb5d9617dfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e69304deac7d973721960fafc3e3cb5d9617dfd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba317c52361d1a16fac60b56af38198df9833dde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba317c52361d1a16fac60b56af38198df9833dde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba317c52361d1a16fac60b56af38198df9833dde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba317c52361d1a16fac60b56af38198df9833dde/comments", "author": null, "committer": null, "parents": [{"sha": "d7ac9bdd42637b05702a61085f18b136b87f21ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7ac9bdd42637b05702a61085f18b136b87f21ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7ac9bdd42637b05702a61085f18b136b87f21ef"}], "stats": {"total": 102, "additions": 73, "deletions": 29}, "files": [{"sha": "af6372cb51e17a4d3a3f06621bdf3ab81f98c9d1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba317c52361d1a16fac60b56af38198df9833dde/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba317c52361d1a16fac60b56af38198df9833dde/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ba317c52361d1a16fac60b56af38198df9833dde", "patch": "@@ -1,3 +1,46 @@\n+2001-08-19  Brendan Kehoe  <brendan@zen.org>\n+\n+        * include/bits/std_complex.h: Default initialize second argument\n+\tof polar to 0, as specified in Library DR #79\n+\n+2001-10-19  Brendan Kehoe  <brendan@zen.org>\n+\n+        * include/bits/stl_raw_storage_iter.h (operator=): Fix to call\n+\t_Construct instead of construct.\n+\n+2001-10-19  Brendan Kehoe  <brendan@zen.org>\n+\n+        * include/bits/basic_string.tcc (find_first_not_of): Take out check for\n+        __n being non-zero, since the standard does not mandate that.\n+        e.g., a search for \"\" in \"\" should yield position 0, not npos.\n+        (find_last_not_of): Likewise.\n+\n+2001-10-19  Brendan Kehoe  <brendan@zen.org>\n+\n+        * include/bits/stl_bvector.h (vector<bool>::_M_range_check): Fix\n+\tto throw out_of_range, not range_error, thus sayeth $23.1.1.13.\n+\n+2001-10-19  Brendan Kehoe  <brendan@zen.org>\n+\n+        * include/bits/stl_iterator.h (reverse_iterator::current): Rename\n+        member from _M_current, and change all uses; thus sayeth $24.4.1.1.\n+\n+2001-10-19  Brendan Kehoe  <brendan@zen.org>\n+ \n+        * include/bits/stl_algo.h (partial_sort): Add missing `>' on the\n+        template parameter _ValueType.\n+\n+2001-10-19  Brendan Kehoe  <brendan@zen.org>\n+\n+\t* include/bits/std_limits.h: Clean up extra semicolons.\n+        * include/bits/locale_facets.h: Likewise.\n+        * include/bits/type_traits.h: Likewise.\n+\n+2001-10-19  Brendan Kehoe  <brendan@zen.org>\n+\n+        * include/bits/localefwd.h (locale::combine): Add const for lib DR 14.\n+        * include/bits/locale_facets.tcc (locale::combine): Likewise.\n+\n 2001-10-19  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/bits/locale_facets.h (__timepunct::_M_put_helper):"}, {"sha": "7190e2ea943998cc90d7e03e7b9147abeca88077", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba317c52361d1a16fac60b56af38198df9833dde/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba317c52361d1a16fac60b56af38198df9833dde/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=ba317c52361d1a16fac60b56af38198df9833dde", "patch": "@@ -698,7 +698,7 @@ namespace std\n     find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const\n     {\n       size_t __xpos = __pos;\n-      for (; __n && __xpos < this->size(); ++__xpos)\n+      for (; __xpos < this->size(); ++__xpos)\n \tif (!traits_type::find(__s, __n, _M_data()[__xpos]))\n \t  return __xpos;\n       return npos;\n@@ -722,7 +722,7 @@ namespace std\n     find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const\n     {\n       size_type __size = this->size();\n-      if (__size && __n)\n+      if (__size)\n \t{ \n \t  if (--__size > __pos) \n \t    __size = __pos;"}, {"sha": "2c6419b0459dcf71793899b66647fa2cd0c02d7c", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba317c52361d1a16fac60b56af38198df9833dde/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba317c52361d1a16fac60b56af38198df9833dde/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=ba317c52361d1a16fac60b56af38198df9833dde", "patch": "@@ -990,7 +990,7 @@ namespace std\n       _M_compare_helper(const _CharT*, const _CharT*) const;\n \n       size_t\n-      _M_transform_helper(_CharT*, const _CharT*, size_t) const;;\n+      _M_transform_helper(_CharT*, const _CharT*, size_t) const;\n \n   protected:\n       virtual"}, {"sha": "7072c0ba93f0070a22d2bbbe1f66b63ab661d677", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba317c52361d1a16fac60b56af38198df9833dde/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba317c52361d1a16fac60b56af38198df9833dde/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=ba317c52361d1a16fac60b56af38198df9833dde", "patch": "@@ -46,7 +46,7 @@ namespace std\n {\n   template<typename _Facet>\n     locale\n-    locale::combine(const locale& __other)\n+    locale::combine(const locale& __other) const\n     {\n       _Impl* __tmp = new _Impl(*_M_impl, 1);\n       __tmp->_M_replace_facet(__other._M_impl, &_Facet::id);"}, {"sha": "e6bd6cc25af90c48fb3158ed982167303dde7e7a", "filename": "libstdc++-v3/include/bits/localefwd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba317c52361d1a16fac60b56af38198df9833dde/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba317c52361d1a16fac60b56af38198df9833dde/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h?ref=ba317c52361d1a16fac60b56af38198df9833dde", "patch": "@@ -234,7 +234,7 @@ namespace std\n \n     template<typename _Facet>\n       locale  \n-      combine(const locale& __other);\n+      combine(const locale& __other) const;\n \n     // Locale operations:\n     string "}, {"sha": "3d4b434d32aacd93edce300d98f691b3eeaa3869", "filename": "libstdc++-v3/include/bits/std_complex.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba317c52361d1a16fac60b56af38198df9833dde/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_complex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba317c52361d1a16fac60b56af38198df9833dde/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_complex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_complex.h?ref=ba317c52361d1a16fac60b56af38198df9833dde", "patch": "@@ -56,7 +56,7 @@ namespace std\n   template<typename _Tp> _Tp norm(const complex<_Tp>&);\n \n   template<typename _Tp> complex<_Tp> conj(const complex<_Tp>&);\n-  template<typename _Tp> complex<_Tp> polar(const _Tp&, const _Tp&);\n+  template<typename _Tp> complex<_Tp> polar(const _Tp&, const _Tp& = 0);\n \n   // Transcendentals:\n   template<typename _Tp> complex<_Tp> cos(const complex<_Tp>&);"}, {"sha": "d0f0479ca03c0beb9067cd76de710166f8a08e6e", "filename": "libstdc++-v3/include/bits/std_limits.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba317c52361d1a16fac60b56af38198df9833dde/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_limits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba317c52361d1a16fac60b56af38198df9833dde/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_limits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_limits.h?ref=ba317c52361d1a16fac60b56af38198df9833dde", "patch": "@@ -1861,8 +1861,8 @@ namespace std\n       static const bool has_quiet_NaN = __glibcpp_double_has_quiet_NaN;\n       static const bool has_signaling_NaN = __glibcpp_double_has_signaling_NaN;\n       static const float_denorm_style has_denorm =\n-              __glibcpp_double_has_denorm;;\n-      static const bool has_denorm_loss = __glibcpp_double_has_denorm_loss;;\n+              __glibcpp_double_has_denorm;\n+      static const bool has_denorm_loss = __glibcpp_double_has_denorm_loss;\n \n       static double infinity() throw()\n       { return __glibcpp_double_infinity; }"}, {"sha": "61a2d2e29ab96334236b222216d8129c3be6217c", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba317c52361d1a16fac60b56af38198df9833dde/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba317c52361d1a16fac60b56af38198df9833dde/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=ba317c52361d1a16fac60b56af38198df9833dde", "patch": "@@ -1952,7 +1952,7 @@ __result, __binary_pred, _IterType());\n       // concept requirements\n       __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n \t    _RandomAccessIter>);\n-      __glibcpp_function_requires(_LessThanComparableConcept<_ValueType);\n+      __glibcpp_function_requires(_LessThanComparableConcept<_ValueType>);\n     \n       make_heap(__first, __middle);\n       for (_RandomAccessIter __i = __middle; __i < __last; ++__i)"}, {"sha": "9a51f5e89961df1697f6b8ba38c0366fb8e6d8b0", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba317c52361d1a16fac60b56af38198df9833dde/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba317c52361d1a16fac60b56af38198df9833dde/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=ba317c52361d1a16fac60b56af38198df9833dde", "patch": "@@ -485,7 +485,7 @@ template <typename _Alloc>\n   \n     void _M_range_check(size_type __n) const {\n       if (__n >= this->size())\n-        __throw_range_error(\"vector<bool>\");\n+        __throw_out_of_range(\"vector<bool>\");\n     }\n   \n     reference at(size_type __n)"}, {"sha": "3929f79565db54ab6ff5651283aff5fdc7733b56", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba317c52361d1a16fac60b56af38198df9833dde/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba317c52361d1a16fac60b56af38198df9833dde/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=ba317c52361d1a16fac60b56af38198df9833dde", "patch": "@@ -72,7 +72,7 @@ namespace std\n                         typename iterator_traits<_Iterator>::reference>\n     {\n     protected:\n-      _Iterator _M_current;\n+      _Iterator current;\n \n     public:\n       typedef _Iterator \t\t\t\t       iterator_type;\n@@ -85,22 +85,22 @@ namespace std\n       reverse_iterator() {}\n \n       explicit \n-      reverse_iterator(iterator_type __x) : _M_current(__x) {}\n+      reverse_iterator(iterator_type __x) : current(__x) {}\n \n       reverse_iterator(const reverse_iterator& __x) \n-\t: _M_current(__x._M_current) { }\n+\t: current(__x.current) { }\n \n       template<typename _Iter>\n         reverse_iterator(const reverse_iterator<_Iter>& __x)\n-\t: _M_current(__x.base()) {}\n+\t: current(__x.base()) {}\n     \n       iterator_type \n-      base() const { return _M_current; }\n+      base() const { return current; }\n \n       reference \n       operator*() const \n       {\n-\t_Iterator __tmp = _M_current;\n+\t_Iterator __tmp = current;\n \treturn *--__tmp;\n       }\n \n@@ -110,46 +110,46 @@ namespace std\n       reverse_iterator& \n       operator++() \n       {\n-\t--_M_current;\n+\t--current;\n \treturn *this;\n       }\n \n       reverse_iterator \n       operator++(int) \n       {\n \treverse_iterator __tmp = *this;\n-\t--_M_current;\n+\t--current;\n \treturn __tmp;\n       }\n \n       reverse_iterator& \n       operator--() \n       {\n-\t++_M_current;\n+\t++current;\n \treturn *this;\n       }\n \n       reverse_iterator operator--(int) \n       {\n \treverse_iterator __tmp = *this;\n-\t++_M_current;\n+\t++current;\n \treturn __tmp;\n       }\n       \n       reverse_iterator \n       operator+(difference_type __n) const \n-      { return reverse_iterator(_M_current - __n); }\n+      { return reverse_iterator(current - __n); }\n \n       reverse_iterator& \n       operator+=(difference_type __n) \n       {\n-\t_M_current -= __n;\n+\tcurrent -= __n;\n \treturn *this;\n       }\n \n       reverse_iterator \n       operator-(difference_type __n) const \n-      { return reverse_iterator(_M_current + __n); }\n+      { return reverse_iterator(current + __n); }\n \n       reverse_iterator& \n       operator-=(difference_type __n) \n@@ -225,7 +225,7 @@ namespace std\n       back_insert_iterator(_Container& __x) : container(&__x) {}\n \n       back_insert_iterator&\n-      operator=(const typename _Container::const_reference __value) \n+      operator=(typename _Container::const_reference __value) \n       { \n \tcontainer->push_back(__value);\n \treturn *this;\n@@ -259,7 +259,7 @@ namespace std\n       explicit front_insert_iterator(_Container& __x) : container(&__x) {}\n \n       front_insert_iterator&\n-      operator=(const typename _Container::const_reference __value) \n+      operator=(typename _Container::const_reference __value) \n       { \n \tcontainer->push_front(__value);\n \treturn *this;"}, {"sha": "e513db55d333bd75cbe0de3ef504202ad47fa3da", "filename": "libstdc++-v3/include/bits/stl_raw_storage_iter.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba317c52361d1a16fac60b56af38198df9833dde/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_raw_storage_iter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba317c52361d1a16fac60b56af38198df9833dde/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_raw_storage_iter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_raw_storage_iter.h?ref=ba317c52361d1a16fac60b56af38198df9833dde", "patch": "@@ -79,7 +79,7 @@ namespace std\n       raw_storage_iterator& \n       operator=(const _Tp& __element) \n       {\n-\tconstruct(&*_M_iter, __element);\n+\t_Construct(&*_M_iter, __element);\n \treturn *this;\n       }        \n "}, {"sha": "2fd78ba0eeb652a69df917c9123d00e06f010cd5", "filename": "libstdc++-v3/include/bits/type_traits.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba317c52361d1a16fac60b56af38198df9833dde/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ftype_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba317c52361d1a16fac60b56af38198df9833dde/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ftype_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ftype_traits.h?ref=ba317c52361d1a16fac60b56af38198df9833dde", "patch": "@@ -327,9 +327,10 @@ template<typename _Tp> struct _Is_normal_iterator {\n };\n \n // Forward declaration hack, should really include this from somewhere.\n-namespace std {\n-   template<typename _Iterator, typename _Container> class __normal_iterator;\n-};\n+namespace std \n+{\n+  template<typename _Iterator, typename _Container> class __normal_iterator;\n+}\n \n template<typename _Iterator, typename _Container>\n struct _Is_normal_iterator< std::__normal_iterator<_Iterator, _Container> > {"}]}