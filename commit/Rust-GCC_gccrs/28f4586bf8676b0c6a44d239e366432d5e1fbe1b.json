{"sha": "28f4586bf8676b0c6a44d239e366432d5e1fbe1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhmNDU4NmJmODY3NmIwYzZhNDRkMjM5ZTM2NjQzMmQ1ZTFmYmUxYg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-12-14T13:14:23Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-12-14T13:14:23Z"}, "message": "re PR middle-end/30197 (cexp ( __complex__ ( 0, x ) ) can be folded to cexpi (x))\n\n2006-12-14  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/30197\n\t* builtins.c (fold_builtin_cexp): New function to fold cexp\n\tto cexpi and exp parts.\n\t* tree-ssa-pre.c (try_combine_conversion): Also handle\n\tREALPART_EXPR and IMAGPART_EXPR.\n\n\t* gcc.c-torture/execute/complex-1.c: Fix function name.\n\t* gcc.dg/builtins-61.c: New testcase.\n\nFrom-SVN: r119860", "tree": {"sha": "ff05698d7bed697273367ce096bf05306d5df40e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff05698d7bed697273367ce096bf05306d5df40e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28f4586bf8676b0c6a44d239e366432d5e1fbe1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28f4586bf8676b0c6a44d239e366432d5e1fbe1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28f4586bf8676b0c6a44d239e366432d5e1fbe1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28f4586bf8676b0c6a44d239e366432d5e1fbe1b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9f5396713d9e188bad160c5816f3bfd21b6f32ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f5396713d9e188bad160c5816f3bfd21b6f32ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f5396713d9e188bad160c5816f3bfd21b6f32ca"}], "stats": {"total": 117, "additions": 114, "deletions": 3}, "files": [{"sha": "82a3641ea2884533604ef53b674ebd58a075ba83", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f4586bf8676b0c6a44d239e366432d5e1fbe1b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f4586bf8676b0c6a44d239e366432d5e1fbe1b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=28f4586bf8676b0c6a44d239e366432d5e1fbe1b", "patch": "@@ -1,3 +1,11 @@\n+2006-12-14  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/30197\n+\t* builtins.c (fold_builtin_cexp): New function to fold cexp\n+\tto cexpi and exp parts.\n+\t* tree-ssa-pre.c (try_combine_conversion): Also handle\n+\tREALPART_EXPR and IMAGPART_EXPR.\n+\n 2006-12-14  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/30172"}, {"sha": "f5798e7894774c15d3019f0cb0355fb87067cbdf", "filename": "gcc/builtins.c", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f4586bf8676b0c6a44d239e366432d5e1fbe1b/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f4586bf8676b0c6a44d239e366432d5e1fbe1b/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=28f4586bf8676b0c6a44d239e366432d5e1fbe1b", "patch": "@@ -7367,6 +7367,67 @@ fold_builtin_sincos (tree arglist)\n \t\t\t build1 (REALPART_EXPR, type, call)));\n }\n \n+/* Fold function call to builtin cexp, cexpf, or cexpl.  Return\n+   NULL_TREE if no simplification can be made.  */\n+\n+static tree\n+fold_builtin_cexp (tree arglist, tree type)\n+{\n+  tree arg0, rtype;\n+  tree realp, imagp, ifn;\n+\n+  if (!validate_arglist (arglist, COMPLEX_TYPE, VOID_TYPE))\n+    return NULL_TREE;\n+\n+  arg0 = TREE_VALUE (arglist);\n+  rtype = TREE_TYPE (TREE_TYPE (arg0));\n+\n+  /* In case we can figure out the real part of arg0 and it is constant zero\n+     fold to cexpi.  */\n+  ifn = mathfn_built_in (rtype, BUILT_IN_CEXPI);\n+  if (!ifn)\n+    return NULL_TREE;\n+\n+  if ((realp = fold_unary (REALPART_EXPR, rtype, arg0))\n+      && real_zerop (realp))\n+    {\n+      tree narg = fold_build1 (IMAGPART_EXPR, rtype, arg0);\n+      return build_function_call_expr (ifn, build_tree_list (NULL_TREE, narg));\n+    }\n+\n+  /* In case we can easily decompose real and imaginary parts split cexp\n+     to exp (r) * cexpi (i).  */\n+  if (flag_unsafe_math_optimizations\n+      && realp)\n+    {\n+      tree rfn, rcall, icall;\n+\n+      rfn = mathfn_built_in (rtype, BUILT_IN_EXP);\n+      if (!rfn)\n+\treturn NULL_TREE;\n+\n+      imagp = fold_unary (IMAGPART_EXPR, rtype, arg0);\n+      if (!imagp)\n+\treturn NULL_TREE;\n+\n+      icall = build_function_call_expr (ifn,\n+\t\t\t\t        build_tree_list (NULL_TREE, imagp));\n+      icall = builtin_save_expr (icall);\n+      rcall = build_function_call_expr (rfn,\n+\t\t\t\t        build_tree_list (NULL_TREE, realp));\n+      rcall = builtin_save_expr (rcall);\n+      return build2 (COMPLEX_EXPR, type,\n+\t\t     build2 (MULT_EXPR, rtype,\n+\t\t\t     rcall,\n+\t\t\t     build1 (REALPART_EXPR, rtype, icall)),\n+\t\t     build2 (MULT_EXPR, rtype,\n+\t\t\t     rcall,\n+\t\t\t     build1 (IMAGPART_EXPR, rtype, icall)));\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n /* Fold function call to builtin trunc, truncf or truncl.  Return\n    NULL_TREE if no simplification can be made.  */\n \n@@ -9312,6 +9373,9 @@ fold_builtin_1 (tree fndecl, tree arglist, bool ignore)\n     CASE_FLT_FN (BUILT_IN_SINCOS):\n       return fold_builtin_sincos (arglist);\n \n+    CASE_FLT_FN (BUILT_IN_CEXP):\n+      return fold_builtin_cexp (arglist, type);\n+\n     CASE_FLT_FN (BUILT_IN_CEXPI):\n       if (validate_arglist (arglist, REAL_TYPE, VOID_TYPE))\n \treturn do_mpfr_sincos (TREE_VALUE (arglist), NULL_TREE, NULL_TREE);"}, {"sha": "ee65e74c5812613ab552885d0e85318815668990", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f4586bf8676b0c6a44d239e366432d5e1fbe1b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f4586bf8676b0c6a44d239e366432d5e1fbe1b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=28f4586bf8676b0c6a44d239e366432d5e1fbe1b", "patch": "@@ -1,3 +1,9 @@\n+2006-12-14  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/30197\n+\t* gcc.c-torture/execute/complex-1.c: Fix function name.\n+\t* gcc.dg/builtins-61.c: New testcase.\n+\n 2006-12-14  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/30172"}, {"sha": "59101796475c87b7b537331243e301e8cf9eb442", "filename": "gcc/testsuite/gcc.c-torture/execute/complex-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f4586bf8676b0c6a44d239e366432d5e1fbe1b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fcomplex-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f4586bf8676b0c6a44d239e366432d5e1fbe1b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fcomplex-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fcomplex-1.c?ref=28f4586bf8676b0c6a44d239e366432d5e1fbe1b", "patch": "@@ -17,7 +17,7 @@ g2 (double x)\n }\n \n __complex__ double\n-cexp (__complex__ double x)\n+xcexp (__complex__ double x)\n {\n   double r;\n \n@@ -31,7 +31,7 @@ main ()\n {\n   __complex__ double x;\n \n-  x = cexp (1.0i);\n+  x = xcexp (1.0i);\n   if (__real__ x != -1.0)\n     abort ();\n   if (__imag__ x != 0.0)"}, {"sha": "9f0c99065da3e0f5e7986c2dc6bf72c6d4a3440b", "filename": "gcc/testsuite/gcc.dg/builtins-61.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f4586bf8676b0c6a44d239e366432d5e1fbe1b/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-61.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f4586bf8676b0c6a44d239e366432d5e1fbe1b/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-61.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-61.c?ref=28f4586bf8676b0c6a44d239e366432d5e1fbe1b", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -ffast-math -fdump-tree-optimized\" } */\n+\n+double test1 (double x)\n+{\n+  return __real __builtin_cexp(x * (__extension__ 1.0iF));\n+}\n+\n+double test2(double x)\n+{\n+  return __imag __builtin_cexp((__extension__ 1.0iF) * x);\n+}\n+\n+double test3(double x)\n+{\n+  _Complex c = __builtin_cexp(x * (__extension__ 1.0iF));\n+  return __imag c + __real c;\n+}\n+\n+double test4(double x, double y)\n+{\n+  _Complex c = __builtin_cexp(x);\n+  x = __builtin_exp (x);\n+  return x - __real c;\n+}\n+\n+/* { dg-final { scan-tree-dump \"cexpi\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \"sin\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \"cos\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \"return 0.0\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "72af16d2caa8573063152e6bd137e890ac031d37", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f4586bf8676b0c6a44d239e366432d5e1fbe1b/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f4586bf8676b0c6a44d239e366432d5e1fbe1b/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=28f4586bf8676b0c6a44d239e366432d5e1fbe1b", "patch": "@@ -3613,7 +3613,9 @@ try_combine_conversion (tree *expr_p)\n   unsigned int firstbit;\n \n   if (!((TREE_CODE (expr) == NOP_EXPR\n-\t || TREE_CODE (expr) == CONVERT_EXPR)\n+\t || TREE_CODE (expr) == CONVERT_EXPR\n+\t || TREE_CODE (expr) == REALPART_EXPR\n+\t || TREE_CODE (expr) == IMAGPART_EXPR)\n \t&& TREE_CODE (TREE_OPERAND (expr, 0)) == VALUE_HANDLE\n \t&& !VALUE_HANDLE_VUSES (TREE_OPERAND (expr, 0))))\n     return false;"}]}