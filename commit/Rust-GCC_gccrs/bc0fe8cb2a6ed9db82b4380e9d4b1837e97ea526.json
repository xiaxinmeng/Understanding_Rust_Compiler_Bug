{"sha": "bc0fe8cb2a6ed9db82b4380e9d4b1837e97ea526", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmMwZmU4Y2IyYTZlZDlkYjgyYjQzODBlOWQ0YjE4MzdlOTdlYTUyNg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2011-05-02T12:37:13Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2011-05-02T12:37:13Z"}, "message": "lto-section-in.c (lto_input_1_unsigned): Move to lto-streamer.h\n\n\t* lto-section-in.c (lto_input_1_unsigned): Move to lto-streamer.h\n\t(lto_section_overrun): New.\n\t* lto-section-out.c (append_block): Rename to ...\n\t(lto_append_block): ... this one; export.\n\t(lto_output_1_stream): Move lto lto-streamer.h\n\t(lto_output_data_stream): Update.\n\t* lto-streamer.h (lto_section_overrun, lto_append_block): Declare.\n\t(lto_output_1_stream, lto_input_1_unsigned): Turn into inline\n\tfunctions.\n\nFrom-SVN: r173247", "tree": {"sha": "2680cf7b12422f82aa3a8f4513c70dc9d5e3692d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2680cf7b12422f82aa3a8f4513c70dc9d5e3692d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc0fe8cb2a6ed9db82b4380e9d4b1837e97ea526", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc0fe8cb2a6ed9db82b4380e9d4b1837e97ea526", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc0fe8cb2a6ed9db82b4380e9d4b1837e97ea526", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc0fe8cb2a6ed9db82b4380e9d4b1837e97ea526/comments", "author": null, "committer": null, "parents": [{"sha": "d12530b543a23510d7bdc3dcd9e0d58ffe18b418", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d12530b543a23510d7bdc3dcd9e0d58ffe18b418", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d12530b543a23510d7bdc3dcd9e0d58ffe18b418"}], "stats": {"total": 87, "additions": 55, "deletions": 32}, "files": [{"sha": "6a8d393396930d3d7d1d1ed87ec1725d1658fc05", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc0fe8cb2a6ed9db82b4380e9d4b1837e97ea526/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc0fe8cb2a6ed9db82b4380e9d4b1837e97ea526/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bc0fe8cb2a6ed9db82b4380e9d4b1837e97ea526", "patch": "@@ -1,3 +1,15 @@\n+2011-05-02  Jan Hubicka  <jh@suse.cz>\n+\n+\t* lto-section-in.c (lto_input_1_unsigned): Move to lto-streamer.h\n+\t(lto_section_overrun): New.\n+\t* lto-section-out.c (append_block): Rename to ...\n+\t(lto_append_block): ... this one; export.\n+\t(lto_output_1_stream): Move lto lto-streamer.h\n+\t(lto_output_data_stream): Update.\n+\t* lto-streamer.h (lto_section_overrun, lto_append_block): Declare.\n+\t(lto_output_1_stream, lto_input_1_unsigned): Turn into inline\n+\tfunctions.\n+\n 2011-05-02  Richard Guenther  <rguenther@suse.de>\n \n \t* tree.c (tree_code_counts): New global array."}, {"sha": "4b88fb10749104e119569d316fde4ee7a4f6d858", "filename": "gcc/lto-section-in.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc0fe8cb2a6ed9db82b4380e9d4b1837e97ea526/gcc%2Flto-section-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc0fe8cb2a6ed9db82b4380e9d4b1837e97ea526/gcc%2Flto-section-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-section-in.c?ref=bc0fe8cb2a6ed9db82b4380e9d4b1837e97ea526", "patch": "@@ -62,16 +62,6 @@ const char *lto_section_name[LTO_N_SECTION_TYPES] =\n   \"inline\"\n };\n \n-unsigned char\n-lto_input_1_unsigned (struct lto_input_block *ib)\n-{\n-  if (ib->p >= ib->len)\n-    internal_error (\"bytecode stream: trying to read %d bytes \"\n-\t\t    \"after the end of the input buffer\", ib->p - ib->len);\n-\n-  return (ib->data[ib->p++]);\n-}\n-\n \n /* Read an ULEB128 Number of IB.  */\n \n@@ -486,3 +476,13 @@ lto_get_function_in_decl_state (struct lto_file_decl_data *file_data,\n   slot = htab_find_slot (file_data->function_decl_states, &temp, NO_INSERT);\n   return slot? ((struct lto_in_decl_state*) *slot) : NULL;\n }\n+\n+\n+/* Report read pass end of the section.  */\n+\n+void\n+lto_section_overrun (struct lto_input_block *ib)\n+{\n+  internal_error (\"bytecode stream: trying to read %d bytes \"\n+\t          \"after the end of the input buffer\", ib->p - ib->len);\n+}"}, {"sha": "234d63eaabdd20faf022dd11a1c4fc3bc60f9b86", "filename": "gcc/lto-section-out.c", "status": "modified", "additions": 3, "deletions": 20, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc0fe8cb2a6ed9db82b4380e9d4b1837e97ea526/gcc%2Flto-section-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc0fe8cb2a6ed9db82b4380e9d4b1837e97ea526/gcc%2Flto-section-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-section-out.c?ref=bc0fe8cb2a6ed9db82b4380e9d4b1837e97ea526", "patch": "@@ -194,8 +194,8 @@ lto_write_stream (struct lto_output_stream *obs)\n \n /* Adds a new block to output stream OBS.  */\n \n-static void\n-append_block (struct lto_output_stream *obs)\n+void\n+lto_append_block (struct lto_output_stream *obs)\n {\n   struct lto_char_ptr_base *new_block;\n \n@@ -234,23 +234,6 @@ append_block (struct lto_output_stream *obs)\n }\n \n \n-/* Write a character to the output block.  */\n-\n-void\n-lto_output_1_stream (struct lto_output_stream *obs, char c)\n-{\n-  /* No space left.  */\n-  if (obs->left_in_block == 0)\n-    append_block (obs);\n-\n-  /* Write the actual character.  */\n-  *obs->current_pointer = c;\n-  obs->current_pointer++;\n-  obs->total_size++;\n-  obs->left_in_block--;\n-}\n-\n-\n /* Write raw DATA of length LEN to the output block OB.  */\n \n void\n@@ -263,7 +246,7 @@ lto_output_data_stream (struct lto_output_stream *obs, const void *data,\n \n       /* No space left.  */\n       if (obs->left_in_block == 0)\n-\tappend_block (obs);\n+\tlto_append_block (obs);\n \n       /* Determine how many bytes to copy in this loop.  */\n       if (len <= obs->left_in_block)"}, {"sha": "4fe8f513a33c740ae70f4931f4b3eeccdc343622", "filename": "gcc/lto-streamer.h", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc0fe8cb2a6ed9db82b4380e9d4b1837e97ea526/gcc%2Flto-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc0fe8cb2a6ed9db82b4380e9d4b1837e97ea526/gcc%2Flto-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.h?ref=bc0fe8cb2a6ed9db82b4380e9d4b1837e97ea526", "patch": "@@ -758,7 +758,6 @@ extern const char *lto_get_section_data (struct lto_file_decl_data *,\n extern void lto_free_section_data (struct lto_file_decl_data *,\n \t\t\t\t   enum lto_section_type,\n \t\t\t\t   const char *, const char *, size_t);\n-extern unsigned char lto_input_1_unsigned (struct lto_input_block *);\n extern unsigned HOST_WIDE_INT lto_input_uleb128 (struct lto_input_block *);\n extern unsigned HOST_WIDEST_INT lto_input_widest_uint_uleb128 (\n \t\t\t\t\t\tstruct lto_input_block *);\n@@ -774,6 +773,7 @@ extern hashval_t lto_hash_in_decl_state (const void *);\n extern int lto_eq_in_decl_state (const void *, const void *);\n extern struct lto_in_decl_state *lto_get_function_in_decl_state (\n \t\t\t\t      struct lto_file_decl_data *, tree);\n+extern void lto_section_overrun (struct lto_input_block *) ATTRIBUTE_NORETURN;\n \n /* In lto-section-out.c  */\n extern hashval_t lto_hash_decl_slot_node (const void *);\n@@ -783,7 +783,6 @@ extern int lto_eq_type_slot_node (const void *, const void *);\n extern void lto_begin_section (const char *, bool);\n extern void lto_end_section (void);\n extern void lto_write_stream (struct lto_output_stream *);\n-extern void lto_output_1_stream (struct lto_output_stream *, char);\n extern void lto_output_data_stream (struct lto_output_stream *, const void *,\n \t\t\t\t    size_t);\n extern void lto_output_uleb128_stream (struct lto_output_stream *,\n@@ -817,6 +816,7 @@ extern void lto_push_out_decl_state (struct lto_out_decl_state *);\n extern struct lto_out_decl_state *lto_pop_out_decl_state (void);\n extern void lto_record_function_out_decl_state (tree,\n \t\t\t\t\t\tstruct lto_out_decl_state *);\n+extern void lto_append_block (struct lto_output_stream *);\n \n \n /* In lto-streamer.c.  */\n@@ -1174,4 +1174,32 @@ bp_unpack_value (struct bitpack_d *bp, unsigned nbits)\n   return val & mask;\n }\n \n+\n+/* Write a character to the output block.  */\n+\n+static inline void\n+lto_output_1_stream (struct lto_output_stream *obs, char c)\n+{\n+  /* No space left.  */\n+  if (obs->left_in_block == 0)\n+    lto_append_block (obs);\n+\n+  /* Write the actual character.  */\n+  *obs->current_pointer = c;\n+  obs->current_pointer++;\n+  obs->total_size++;\n+  obs->left_in_block--;\n+}\n+\n+\n+/* Read byte from the input block.  */\n+\n+static inline unsigned char\n+lto_input_1_unsigned (struct lto_input_block *ib)\n+{\n+  if (ib->p >= ib->len)\n+    lto_section_overrun (ib);\n+  return (ib->data[ib->p++]);\n+}\n+\n #endif /* GCC_LTO_STREAMER_H  */"}]}