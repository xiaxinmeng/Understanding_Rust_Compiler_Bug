{"sha": "29ae455901ac711470c4aa4f42d51f62e0b3753a", "node_id": "C_kwDOANBUbNoAKDI5YWU0NTU5MDFhYzcxMTQ3MGM0YWE0ZjQyZDUxZjYyZTBiMzc1M2E", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-05-27T07:52:03Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-05-27T07:52:03Z"}, "message": "Pre-reload splitter to transform and;cmp into not;test on x86.\n\nA common idiom for testing if a specific set of bits is set in a value\nis to use \"(X & Y) == Y\", which on x86 results in an AND followed by a\nCMP.  A slightly improved implementation is to instead use (~X & Y)==0,\nthat uses a NOT and a TEST (or ANDN where available); still two \"fast\"\ninstructions, but typically shorter especially if Y is an immediate\nconstant.  Because the above transformation would require more gimple\nstatements in SSA, and may only be a win on targets with flags registers,\nit isn't performed by the middle-end, instead leaving this choice to\nthe backend.\n\nAs an example, here's the change in code generation for pr91400-1.c\n[which now requires a tweak to its dg-final clauses].\n\nBefore:\n        movl    __cpu_model+12(%rip), %eax\n        andl    $68, %eax\t// 3 bytes\n        cmpl    $68, %eax\t// 3 bytes\n        sete    %al\n        ret\n\nAfter:\n        movl    __cpu_model+12(%rip), %eax\n        notl    %eax\t\t// 2 bytes\n        testb   $68, %al\t// 2 bytes\n        sete    %al\n        ret\n\n2022-05-27  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\t* config/i386/i386.md (*test<mode>_not): New define_insn_and_split\n\tto split a combined \"and;cmp\" sequence into \"not;test\".\n\ngcc/testsuite/ChangeLog\n\t* gcc.target/i386/pr91400-1.c: Update for improved code generation.\n\t* gcc.target/i386/pr91400-2.c: Likewise.\n\t* gcc.target/i386/testnot-1.c: New test case.\n\t* gcc.target/i386/testnot-2.c: Likewise.", "tree": {"sha": "a59cd67421d13b7974a7a26a38197d683400176a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a59cd67421d13b7974a7a26a38197d683400176a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29ae455901ac711470c4aa4f42d51f62e0b3753a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29ae455901ac711470c4aa4f42d51f62e0b3753a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29ae455901ac711470c4aa4f42d51f62e0b3753a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29ae455901ac711470c4aa4f42d51f62e0b3753a/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c62643579df87149e6c674a591fef9fd148b6108", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c62643579df87149e6c674a591fef9fd148b6108", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c62643579df87149e6c674a591fef9fd148b6108"}], "stats": {"total": 77, "additions": 73, "deletions": 4}, "files": [{"sha": "602dfa799bf8370c5d64cc36f60911dd71e589d7", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29ae455901ac711470c4aa4f42d51f62e0b3753a/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29ae455901ac711470c4aa4f42d51f62e0b3753a/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=29ae455901ac711470c4aa4f42d51f62e0b3753a", "patch": "@@ -9716,6 +9716,27 @@\n   operands[2] = gen_rtx_AND (mode, val, immed_wide_int_const (mask, mode));\n })\n \n+;; Split and;cmp (as optimized by combine) into not;test\n+;; Except when TARGET_BMI provides andn (*andn_<mode>_ccno).\n+(define_insn_and_split \"*test<mode>_not\"\n+  [(set (reg:CCZ FLAGS_REG)\n+\t(compare:CCZ\n+\t  (and:SWI\n+\t    (not:SWI (match_operand:SWI 0 \"register_operand\"))\n+\t    (match_operand:SWI 1 \"<nonmemory_szext_operand>\"))\n+\t  (const_int 0)))]\n+  \"ix86_pre_reload_split ()\n+   && (!TARGET_BMI || !REG_P (operands[1]))\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 2) (not:SWI (match_dup 0)))\n+   (set (reg:CCZ FLAGS_REG)\n+\t(compare:CCZ (and:SWI (match_dup 2) (match_dup 1))\n+\t\t     (const_int 0)))]\n+{\n+  operands[2] = gen_reg_rtx (<MODE>mode);\n+})\n+\n ;; Convert HImode/SImode test instructions with immediate to QImode ones.\n ;; i386 does not allow to encode test with 8bit sign extended immediate, so\n ;; this is relatively important trick."}, {"sha": "751dc6c824e2df6d075dc49de2e4c7b3c1ad5fa0", "filename": "gcc/testsuite/gcc.target/i386/pr91400-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29ae455901ac711470c4aa4f42d51f62e0b3753a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91400-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29ae455901ac711470c4aa4f42d51f62e0b3753a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91400-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91400-1.c?ref=29ae455901ac711470c4aa4f42d51f62e0b3753a", "patch": "@@ -1,8 +1,8 @@\n /* PR target/91400 */\n /* { dg-do compile } */\n /* { dg-options \"-O2\" } */\n-/* { dg-final { scan-assembler-times \"andl\" 1 } } */\n-/* { dg-final { scan-assembler-times \"cmpl\" 1 } } */\n+/* { dg-final { scan-assembler-times \"notl\" 1 } } */\n+/* { dg-final { scan-assembler-times \"testb\" 1 } } */\n /* { dg-final { scan-assembler-times \"sete\" 1 } } */\n /* { dg-final { scan-assembler-not \"cmove\" } } */\n "}, {"sha": "914acd7812f996615b1355b59725b365e427300d", "filename": "gcc/testsuite/gcc.target/i386/pr91400-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29ae455901ac711470c4aa4f42d51f62e0b3753a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91400-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29ae455901ac711470c4aa4f42d51f62e0b3753a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91400-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91400-2.c?ref=29ae455901ac711470c4aa4f42d51f62e0b3753a", "patch": "@@ -1,8 +1,8 @@\n /* PR target/91400 */\n /* { dg-do compile } */\n /* { dg-options \"-O2\" } */\n-/* { dg-final { scan-assembler-times \"andl\" 1 } } */\n-/* { dg-final { scan-assembler-times \"cmpl\" 1 } } */\n+/* { dg-final { scan-assembler-times \"notl\" 1 } } */\n+/* { dg-final { scan-assembler-times \"testb\" 1 } } */\n /* { dg-final { scan-assembler-times \"sete\" 1 } } */\n /* { dg-final { scan-assembler-not \"cmove\" } } */\n "}, {"sha": "9ebcb5c7e996a8401c58b103289a3d495948dcac", "filename": "gcc/testsuite/gcc.target/i386/testnot-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29ae455901ac711470c4aa4f42d51f62e0b3753a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestnot-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29ae455901ac711470c4aa4f42d51f62e0b3753a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestnot-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestnot-1.c?ref=29ae455901ac711470c4aa4f42d51f62e0b3753a", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int foo(int x)\n+{\n+    return (x & 1234) == 1234;\n+}\n+\n+int foos(short x)\n+{\n+    return (x & 1234) == 1234;\n+}\n+\n+int fooc(char x)\n+{\n+    return (x & 123) == 123;\n+}\n+\n+int fool(long long x)\n+{\n+    return (x & 1234) == 1234;\n+}\n+\n+/* { dg-final { scan-assembler-not \"cmp\" } } */"}, {"sha": "52fdaf361dfd2ccde1a1d726bcf8627d1dfb010f", "filename": "gcc/testsuite/gcc.target/i386/testnot-2.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29ae455901ac711470c4aa4f42d51f62e0b3753a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestnot-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29ae455901ac711470c4aa4f42d51f62e0b3753a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestnot-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestnot-2.c?ref=29ae455901ac711470c4aa4f42d51f62e0b3753a", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2\" } */\n+\n+int foo(int x, int y)\n+{\n+    return (x & y) == y;\n+}\n+\n+int foos(short x, short y)\n+{\n+    return (x & y) == y;\n+}\n+\n+int fooc(char x, char y)\n+{\n+    return (x & y) == y;\n+}\n+\n+int fool(long long x, long long y)\n+{\n+    return (x & y) == y;\n+}\n+\n+/* { dg-final { scan-assembler-not \"cmp\" } } */"}]}