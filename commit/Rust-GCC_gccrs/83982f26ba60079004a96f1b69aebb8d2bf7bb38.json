{"sha": "83982f26ba60079004a96f1b69aebb8d2bf7bb38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODM5ODJmMjZiYTYwMDc5MDA0YTk2ZjFiNjlhZWJiOGQyYmY3YmIzOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2017-09-03T23:17:26Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-09-03T23:17:26Z"}, "message": "adx-check.h (main): Use __get_cpuid_count.\n\n\t* gcc.target/i386/adx-check.h (main): Use __get_cpuid_count.\n\t* gcc.target/i386/bmi-check.h (main): Ditto.\n\t* gcc.target/i386/bmi2-check.h (main): Ditto.\n\t* gcc.target/i386/rtm-check.h (main): Ditto.\n\t* gcc.target/i386/sha-check.h (main): Ditto.\n\t* gcc.target/i386/avx2-check.h (check_osxsave): New function.\n\t(main): Use __get_cpuid_count.  Use check_osxsave.\n\t* gcc.target/i386/avx512-check.h (check_osxsave): New function.\n\t(main): Use __get_cpuid_count.  Use check_osxsave.  Reorder conditions.\n\t* gcc.target/i386/mpx/mpx-check.h (check_osxsave): New function.\n\t(main): Use check_osxsave.\n\nFrom-SVN: r251629", "tree": {"sha": "4236956a5e13c223f2a0138d3a90e43c9dfe1650", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4236956a5e13c223f2a0138d3a90e43c9dfe1650"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83982f26ba60079004a96f1b69aebb8d2bf7bb38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83982f26ba60079004a96f1b69aebb8d2bf7bb38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83982f26ba60079004a96f1b69aebb8d2bf7bb38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83982f26ba60079004a96f1b69aebb8d2bf7bb38/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f36b315d1070bfaddbfcf9ee1cb08dc192aaf1c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f36b315d1070bfaddbfcf9ee1cb08dc192aaf1c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f36b315d1070bfaddbfcf9ee1cb08dc192aaf1c3"}], "stats": {"total": 214, "additions": 100, "deletions": 114}, "files": [{"sha": "628c1f3efd632ffdd312bd57672dcdc1e78e6970", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83982f26ba60079004a96f1b69aebb8d2bf7bb38/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83982f26ba60079004a96f1b69aebb8d2bf7bb38/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=83982f26ba60079004a96f1b69aebb8d2bf7bb38", "patch": "@@ -1,3 +1,17 @@\n+2017-09-04  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/adx-check.h (main): Use __get_cpuid_count.\n+\t* gcc.target/i386/bmi-check.h (main): Ditto.\n+\t* gcc.target/i386/bmi2-check.h (main): Ditto.\n+\t* gcc.target/i386/rtm-check.h (main): Ditto.\n+\t* gcc.target/i386/sha-check.h (main): Ditto.\n+\t* gcc.target/i386/avx2-check.h (check_osxsave): New function.\n+\t(main): Use __get_cpuid_count.  Use check_osxsave.\n+\t* gcc.target/i386/avx512-check.h (check_osxsave): New function.\n+\t(main): Use __get_cpuid_count.  Use check_osxsave.  Reorder conditions.\n+\t* gcc.target/i386/mpx/mpx-check.h (check_osxsave): New function.\n+\t(main): Use check_osxsave.\n+\n 2017-09-03  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.target/i386/mpx/mpx-check.h (main): Use __get_cpuid_count"}, {"sha": "cfed1a384837f9bcca33767839a66c30a4f5b7ca", "filename": "gcc/testsuite/gcc.target/i386/adx-check.h", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83982f26ba60079004a96f1b69aebb8d2bf7bb38/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fadx-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83982f26ba60079004a96f1b69aebb8d2bf7bb38/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fadx-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fadx-check.h?ref=83982f26ba60079004a96f1b69aebb8d2bf7bb38", "patch": "@@ -8,21 +8,15 @@ static void __attribute__ ((noinline)) do_test (void)\n   adx_test ();\n }\n \n-  int\n+int\n main ()\n {\n   unsigned int eax, ebx, ecx, edx;\n \n-  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n+  if (!__get_cpuid_count (7, 0, &eax, &ebx, &ecx, &edx))\n     return 0;\n \n   /* Run ADX test only if host has ADX support.  */\n-\n-  if (__get_cpuid_max (0, NULL) < 7)\n-    return 0;\n-\n-  __cpuid_count (7, 0, eax, ebx, ecx, edx);\n-\n   if (ebx & bit_ADX)\n     {\n       do_test ();\n@@ -31,10 +25,10 @@ main ()\n #endif\n       return 0;\n     }\n+\n #ifdef DEBUG\n   printf (\"SKIPPED\\n\");\n #endif\n-\n   return 0;\n }\n "}, {"sha": "25bed5e0da6ab2c02a51a61509da5371a831b059", "filename": "gcc/testsuite/gcc.target/i386/avx2-check.h", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83982f26ba60079004a96f1b69aebb8d2bf7bb38/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83982f26ba60079004a96f1b69aebb8d2bf7bb38/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-check.h?ref=83982f26ba60079004a96f1b69aebb8d2bf7bb38", "patch": "@@ -10,38 +10,35 @@ static void __attribute__ ((noinline)) do_test (void)\n   avx2_test ();\n }\n \n+static int\n+check_osxsave (void)\n+{\n+  unsigned int eax, ebx, ecx, edx;\n+\n+  __cpuid (1, eax, ebx, ecx, edx);\n+  return (ecx & bit_OSXSAVE) != 0;\n+}\n+\n int\n main ()\n {\n   unsigned int eax, ebx, ecx, edx;\n \n-  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n+  if (!__get_cpuid_count (7, 0, &eax, &ebx, &ecx, &edx))\n     return 0;\n \n   /* Run AVX2 test only if host has AVX2 support.  */\n-  if (ecx & bit_OSXSAVE)\n+  if (check_osxsave () && (ebx & bit_AVX2) && avx_os_support ())\n     {\n-      if (__get_cpuid_max (0, NULL) < 7)\n-\treturn 0;\n-\n-      __cpuid_count (7, 0, eax, ebx, ecx, edx);\n-\n-      if ((ebx & bit_AVX2) && avx_os_support ())\n-\t{\n-\t  do_test ();\n-#ifdef DEBUG\n-\t  printf (\"PASSED\\n\");\n-#endif\n-\t  return 0;\n-\t}\n+      do_test ();\n #ifdef DEBUG\n-      printf (\"SKIPPED\\n\");\n+      printf (\"PASSED\\n\");\n #endif\n+      return 0;\n     }\n+\n #ifdef DEBUG\n-  else\n-    printf (\"SKIPPED\\n\");\n+  printf (\"SKIPPED\\n\");\n #endif\n-\n   return 0;\n }"}, {"sha": "9693fa46721a4b2f5045a3ecf24578846aec51a3", "filename": "gcc/testsuite/gcc.target/i386/avx512-check.h", "status": "modified", "additions": 31, "deletions": 53, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83982f26ba60079004a96f1b69aebb8d2bf7bb38/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83982f26ba60079004a96f1b69aebb8d2bf7bb38/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512-check.h?ref=83982f26ba60079004a96f1b69aebb8d2bf7bb38", "patch": "@@ -25,87 +25,65 @@ do_test (void)\n }\n #endif\n \n-int\n-main ()\n+static int\n+check_osxsave (void)\n {\n   unsigned int eax, ebx, ecx, edx;\n \n-  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n-    goto skipped;\n-\n-  /* Run AVX512F test only if host has AVX512F support.  */\n-  if (!(ecx & bit_OSXSAVE))\n-    goto skipped;\n-\n-  if (__get_cpuid_max (0, NULL) < 7)\n-    goto skipped;\n+  __cpuid (1, eax, ebx, ecx, edx);\n+  return (ecx & bit_OSXSAVE) != 0;\n+}\n \n-  __cpuid_count (7, 0, eax, ebx, ecx, edx);\n+int\n+main ()\n+{\n+  unsigned int eax, ebx, ecx, edx;\n \n-  if (!(ebx & bit_AVX512F))\n-    goto skipped;\n+  if (!__get_cpuid_count (7, 0, &eax, &ebx, &ecx, &edx))\n+    return 0;\n \n+  /* Run AVX512 test only if host has ISA support.  */\n+  if (check_osxsave ()\n+      && (ebx & bit_AVX512F)\n #ifdef AVX512VL\n-  if (!(ebx & bit_AVX512VL))\n-    goto skipped;\n+      && (ebx & bit_AVX512VL)\n #endif\n-\n #ifdef AVX512ER\n-  if (!(ebx & bit_AVX512ER))\n-    goto skipped;\n+      && (ebx & bit_AVX512ER)\n #endif\n-\n #ifdef AVX512CD\n-  if (!(ebx & bit_AVX512CD))\n-    goto skipped;\n+      && (ebx & bit_AVX512CD)\n #endif\n-\n #ifdef AVX512DQ\n-  if (!(ebx & bit_AVX512DQ))\n-    goto skipped;\n+      && (ebx & bit_AVX512DQ)\n #endif\n-\n #ifdef AVX512BW\n-  if (!(ebx & bit_AVX512BW))\n-    goto skipped;\n+      && (ebx & bit_AVX512BW)\n #endif\n-\n #ifdef AVX512IFMA\n-  if (!(ebx & bit_AVX512IFMA))\n-    goto skipped;\n+      && (ebx & bit_AVX512IFMA)\n #endif\n-\n #ifdef AVX512VBMI\n-  if (!(ecx & bit_AVX512VBMI))\n-    goto skipped;\n+      && (ecx & bit_AVX512VBMI)\n #endif\n-\n #ifdef AVX5124FMAPS\n-  if (!(edx & bit_AVX5124FMAPS))\n-    goto skipped;\n+      && (edx & bit_AVX5124FMAPS)\n #endif\n-\n #ifdef AVX5124VNNIW\n-  if (!(edx & bit_AVX5124VNNIW))\n-    goto skipped;\n+      && (edx & bit_AVX5124VNNIW)\n #endif\n-\n #ifdef AVX512VPOPCNTDQ\n-  if (!(ecx & bit_AVX512VPOPCNTDQ))\n-    goto skipped;\n+      && (ecx & bit_AVX512VPOPCNTDQ)\n #endif\n-\n-  if (!avx512f_os_support ())\n-    goto skipped;\n-\n-  DO_TEST ();\n-\n+      && avx512f_os_support ())\n+    {\n+      DO_TEST ();\n #ifdef DEBUG\n-  printf (\"PASSED\\n\");\n+      printf (\"PASSED\\n\");\n #endif\n-  return 0;\n-\n-skipped:\n+      return 0;\n+    }\n+ \n #ifdef DEBUG\n   printf (\"SKIPPED\\n\");\n #endif"}, {"sha": "1973f3b6468d35284ff3d723430eaee2c80befb8", "filename": "gcc/testsuite/gcc.target/i386/bmi-check.h", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83982f26ba60079004a96f1b69aebb8d2bf7bb38/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83982f26ba60079004a96f1b69aebb8d2bf7bb38/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-check.h?ref=83982f26ba60079004a96f1b69aebb8d2bf7bb38", "patch": "@@ -17,23 +17,21 @@ main ()\n {\n   unsigned int eax, ebx, ecx, edx;\n \n-  if (__get_cpuid_max (0, NULL) < 7)\n+  if (!__get_cpuid_count (7, 0, &eax, &ebx, &ecx, &edx))\n     return 0;\n \n-  __cpuid_count (7, 0, eax, ebx, ecx, edx);\n-\n   /* Run BMI test only if host has BMI support.  */\n   if (ebx & bit_BMI)\n     {\n       do_test ();\n #ifdef DEBUG\n-    printf (\"PASSED\\n\");\n+      printf (\"PASSED\\n\");\n #endif\n+      return 0;\n     }\n+\n #ifdef DEBUG\n-  else\n-    printf (\"SKIPPED\\n\");\n+  printf (\"SKIPPED\\n\");\n #endif\n-\n   return 0;\n }"}, {"sha": "ba91ef9b780bf0b19b5e0599c756b567537f4e00", "filename": "gcc/testsuite/gcc.target/i386/bmi2-check.h", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83982f26ba60079004a96f1b69aebb8d2bf7bb38/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83982f26ba60079004a96f1b69aebb8d2bf7bb38/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-check.h?ref=83982f26ba60079004a96f1b69aebb8d2bf7bb38", "patch": "@@ -1,6 +1,5 @@\n #include <stdio.h>\n #include <stdlib.h>\n-\n #include \"cpuid.h\"\n \n static void bmi2_test (void);\n@@ -17,23 +16,21 @@ main ()\n {\n   unsigned int eax, ebx, ecx, edx;\n \n-  if (__get_cpuid_max (0, NULL) < 7)\n+  if (!__get_cpuid_count (7, 0, &eax, &ebx, &ecx, &edx))\n     return 0;\n \n-  __cpuid_count (7, 0,  eax, ebx, ecx, edx);\n-\n   /* Run BMI2 test only if host has BMI2 support.  */\n   if (ebx & bit_BMI2)\n     {\n       do_test ();\n #ifdef DEBUG\n       printf (\"PASSED\\n\");\n #endif\n+      return 0;\n     }\n+\n #ifdef DEBUG\n-  else\n-    printf (\"SKIPPED\\n\");\n+  printf (\"SKIPPED\\n\");\n #endif\n-\n   return 0;\n }"}, {"sha": "d84b8bf0efaabab0281b9a20c57ed4c7fbe09846", "filename": "gcc/testsuite/gcc.target/i386/mpx/mpx-check.h", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83982f26ba60079004a96f1b69aebb8d2bf7bb38/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmpx-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83982f26ba60079004a96f1b69aebb8d2bf7bb38/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmpx-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmpx-check.h?ref=83982f26ba60079004a96f1b69aebb8d2bf7bb38", "patch": "@@ -26,6 +26,15 @@ static int xgetbv (unsigned x)\n    return eax;\n }\n \n+static int\n+check_osxsave (void)\n+{\n+  unsigned int eax, ebx, ecx, edx;\n+\n+  __cpuid (1, eax, ebx, ecx, edx);\n+  return (ecx & bit_OSXSAVE) != 0;\n+}\n+\n int\n main (int argc, const char **argv)\n {\n@@ -35,7 +44,7 @@ main (int argc, const char **argv)\n     return NORUNRES;\n \n   /* Run MPX test only if host has MPX support.  */\n-  if ((ebx & bit_MPX) && (xgetbv (0) & XSTATE_BNDREGS))\n+  if (check_osxsave () && (ebx & bit_MPX) && (xgetbv (0) & XSTATE_BNDREGS))\n     mpx_test (argc, argv);\n   else\n     {"}, {"sha": "bdb5a6dc0bf74cc76c163fd83575e19ed0b19aa9", "filename": "gcc/testsuite/gcc.target/i386/rtm-check.h", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83982f26ba60079004a96f1b69aebb8d2bf7bb38/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frtm-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83982f26ba60079004a96f1b69aebb8d2bf7bb38/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frtm-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frtm-check.h?ref=83982f26ba60079004a96f1b69aebb8d2bf7bb38", "patch": "@@ -13,18 +13,19 @@ main ()\n {\n   unsigned int eax, ebx, ecx, edx;\n \n-  if (__get_cpuid_max (0, NULL) >= 7)\n+  if (!__get_cpuid_count (7, 0, &eax, &ebx, &ecx, &edx))\n+    return 0;\n+\n+  /* Run RTM test only if host has RTM support.  */\n+  if (ebx & bit_RTM)\n     {\n-      __cpuid_count (7, 0, eax, ebx, ecx, edx);\n-      if (ebx & bit_RTM)\n-\t{\n-\t  do_test ();\n+      do_test ();\n #ifdef DEBUG\n-\t  printf (\"PASSED\\n\");\n+      printf (\"PASSED\\n\");\n #endif\n-\t  return 0;\n-\t}\n+      return 0;\n     }\n+\n #ifdef DEBUG\n   printf (\"SKIPPED\\n\");\n #endif"}, {"sha": "5bc5a59ab80c60a89ffacd8e5abfac48b5e80cd0", "filename": "gcc/testsuite/gcc.target/i386/sha-check.h", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83982f26ba60079004a96f1b69aebb8d2bf7bb38/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83982f26ba60079004a96f1b69aebb8d2bf7bb38/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha-check.h?ref=83982f26ba60079004a96f1b69aebb8d2bf7bb38", "patch": "@@ -15,19 +15,17 @@ main ()\n {\n   unsigned int eax, ebx, ecx, edx;\n \n-  if (__get_cpuid_max (0, NULL) >= 7)\n-    {\n-      __cpuid_count (7, 0, eax, ebx, ecx, edx);\n+  if (!__get_cpuid_count (7, 0, &eax, &ebx, &ecx, &edx))\n+    return 0;\n \n-      /* Run SHA test only if host has SHA support.  */\n-      if (ebx & bit_SHA)\n-\t{\n-\t  do_test ();\n+  /* Run SHA test only if host has SHA support.  */\n+  if (ebx & bit_SHA)\n+    {\n+      do_test ();\n #ifdef DEBUG\n-\t  printf (\"PASSED\\n\");\n+      printf (\"PASSED\\n\");\n #endif\n-\t  return 0;\n-\t}\n+      return 0;\n     }\n \n #ifdef DEBUG"}]}