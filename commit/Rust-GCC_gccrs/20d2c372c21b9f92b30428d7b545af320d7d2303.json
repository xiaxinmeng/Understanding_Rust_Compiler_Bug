{"sha": "20d2c372c21b9f92b30428d7b545af320d7d2303", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBkMmMzNzJjMjFiOWY5MmIzMDQyOGQ3YjU0NWFmMzIwZDdkMjMwMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-06-25T17:16:23Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-06-25T17:16:23Z"}, "message": "hash-traits.h (string_hash, [...]): New classes.\n\ngcc/\n\t* hash-traits.h (string_hash, nofree_string_hash): New classes.\n\t* genmatch.c (capture_id_map_hasher): Use nofree_string_hash.\n\t* passes.c (pass_registry_hasher): Likewise.\n\t* config/alpha/alpha.c (string_traits): Likewise.\n\t* config/i386/winnt.c (i386_find_on_wrapper_list): Likewise.\n\t* config/m32c/m32c.c (pragma_traits): Likewise.\n\t* config/mep/mep.c (pragma_traits): Likewise.\n\ngcc/java/\n\t* jcf-io.c (memoized_class_lookups): Use nofree_string_hash.\n\t(find_class): Likewise.\n\nFrom-SVN: r224971", "tree": {"sha": "ef11c0ce585dd35735de0a607dd716f3fa308d6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef11c0ce585dd35735de0a607dd716f3fa308d6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20d2c372c21b9f92b30428d7b545af320d7d2303", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20d2c372c21b9f92b30428d7b545af320d7d2303", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20d2c372c21b9f92b30428d7b545af320d7d2303", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20d2c372c21b9f92b30428d7b545af320d7d2303/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "84a98514b3d659ab6ca4b6bc624a1b7453fa0daa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84a98514b3d659ab6ca4b6bc624a1b7453fa0daa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84a98514b3d659ab6ca4b6bc624a1b7453fa0daa"}], "stats": {"total": 170, "additions": 51, "deletions": 119}, "files": [{"sha": "33c3c0d8ef84c0df4768626c668cb17b21dbae66", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20d2c372c21b9f92b30428d7b545af320d7d2303/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20d2c372c21b9f92b30428d7b545af320d7d2303/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=20d2c372c21b9f92b30428d7b545af320d7d2303", "patch": "@@ -1,3 +1,13 @@\n+2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* hash-traits.h (string_hash, nofree_string_hash): New classes.\n+\t* genmatch.c (capture_id_map_hasher): Use nofree_string_hash.\n+\t* passes.c (pass_registry_hasher): Likewise.\n+\t* config/alpha/alpha.c (string_traits): Likewise.\n+\t* config/i386/winnt.c (i386_find_on_wrapper_list): Likewise.\n+\t* config/m32c/m32c.c (pragma_traits): Likewise.\n+\t* config/mep/mep.c (pragma_traits): Likewise.\n+\n 2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-hash-traits.h (tree_hash): New class."}, {"sha": "3970278358413ef1a5621dac2b6e188a2874f3a3", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20d2c372c21b9f92b30428d7b545af320d7d2303/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20d2c372c21b9f92b30428d7b545af320d7d2303/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=20d2c372c21b9f92b30428d7b545af320d7d2303", "patch": "@@ -4806,13 +4806,7 @@ alpha_multipass_dfa_lookahead (void)\n \n struct GTY(()) alpha_links;\n \n-struct string_traits : default_hashmap_traits\n-{\n-  static bool equal_keys (const char *const &a, const char *const &b)\n-  {\n-    return strcmp (a, b) == 0;\n-  }\n-};\n+typedef simple_hashmap_traits <nofree_string_hash> string_traits;\n \n struct GTY(()) machine_function\n {"}, {"sha": "a30215bcd4b69b5d631548a87b445a8477f113ed", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 2, "deletions": 25, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20d2c372c21b9f92b30428d7b545af320d7d2303/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20d2c372c21b9f92b30428d7b545af320d7d2303/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=20d2c372c21b9f92b30428d7b545af320d7d2303", "patch": "@@ -707,29 +707,6 @@ i386_pe_record_stub (const char *name)\n \n #ifdef CXX_WRAP_SPEC_LIST\n \n-/* Hashtable helpers.  */\n-\n-struct wrapped_symbol_hasher : nofree_ptr_hash <const char>\n-{\n-  static inline hashval_t hash (const char *);\n-  static inline bool equal (const char *, const char *);\n-  static inline void remove (const char *);\n-};\n-\n-inline hashval_t\n-wrapped_symbol_hasher::hash (const char *v)\n-{\n-  return htab_hash_string (v);\n-}\n-\n-/*  Hash table equality helper function.  */\n-\n-inline bool\n-wrapped_symbol_hasher::equal (const char *x, const char *y)\n-{\n-  return !strcmp (x, y);\n-}\n-\n /* Search for a function named TARGET in the list of library wrappers\n    we are using, returning a pointer to it if found or NULL if not.\n    This function might be called on quite a few symbols, and we only\n@@ -741,7 +718,7 @@ static const char *\n i386_find_on_wrapper_list (const char *target)\n {\n   static char first_time = 1;\n-  static hash_table<wrapped_symbol_hasher> *wrappers;\n+  static hash_table<nofree_string_hash> *wrappers;\n \n   if (first_time)\n     {\n@@ -754,7 +731,7 @@ i386_find_on_wrapper_list (const char *target)\n       char *bufptr;\n       /* Breaks up the char array into separated strings\n          strings and enter them into the hash table.  */\n-      wrappers = new hash_table<wrapped_symbol_hasher> (8);\n+      wrappers = new hash_table<nofree_string_hash> (8);\n       for (bufptr = wrapper_list_buffer; *bufptr; ++bufptr)\n \t{\n \t  char *found = NULL;"}, {"sha": "7dd175363bcd22b91eab5eefb111096317dbbab0", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20d2c372c21b9f92b30428d7b545af320d7d2303/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20d2c372c21b9f92b30428d7b545af320d7d2303/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=20d2c372c21b9f92b30428d7b545af320d7d2303", "patch": "@@ -3053,16 +3053,7 @@ m32c_insert_attributes (tree node ATTRIBUTE_UNUSED,\n     }\t\n }\n \n-\n-struct pragma_traits : default_hashmap_traits\n-{\n-  static hashval_t hash (const char *str) { return htab_hash_string (str); }\n-  static bool\n-  equal_keys (const char *a, const char *b)\n-  {\n-    return !strcmp (a, b);\n-  }\n-};\n+typedef simple_hashmap_traits<nofree_string_hash> pragma_traits;\n \n /* Hash table of pragma info.  */\n static GTY(()) hash_map<const char *, unsigned, pragma_traits> *pragma_htab;"}, {"sha": "3698bb06e1987618b8760b42808c8645b4105987", "filename": "gcc/config/mep/mep.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20d2c372c21b9f92b30428d7b545af320d7d2303/gcc%2Fconfig%2Fmep%2Fmep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20d2c372c21b9f92b30428d7b545af320d7d2303/gcc%2Fconfig%2Fmep%2Fmep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.c?ref=20d2c372c21b9f92b30428d7b545af320d7d2303", "patch": "@@ -4071,15 +4071,7 @@ struct GTY(()) pragma_entry {\n   int flag;\n };\n \n-struct pragma_traits : default_hashmap_traits\n-{\n-  static hashval_t hash (const char *s) { return htab_hash_string (s); }\n-  static bool\n-  equal_keys (const char *a, const char *b)\n-  {\n-    return strcmp (a, b) == 0;\n-  }\n-};\n+typedef simple_hashmap_traits<nofree_string_hash> pragma_traits;\n \n /* Hash table of farcall-tagged sections.  */\n static GTY(()) hash_map<const char *, pragma_entry, pragma_traits> *"}, {"sha": "b0b9290404396ccc7e27272b013797083060aff5", "filename": "gcc/genmatch.c", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20d2c372c21b9f92b30428d7b545af320d7d2303/gcc%2Fgenmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20d2c372c21b9f92b30428d7b545af320d7d2303/gcc%2Fgenmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.c?ref=20d2c372c21b9f92b30428d7b545af320d7d2303", "patch": "@@ -395,26 +395,7 @@ get_operator (const char *id)\n   return 0;\n }\n \n-\n-/* Helper for the capture-id map.  */\n-\n-struct capture_id_map_hasher : default_hashmap_traits\n-{\n-  static inline hashval_t hash (const char *);\n-  static inline bool equal_keys (const char *, const char *);\n-};\n-\n-inline hashval_t\n-capture_id_map_hasher::hash (const char *id)\n-{\n-  return htab_hash_string (id);\n-}\n-\n-inline bool\n-capture_id_map_hasher::equal_keys (const char *id1, const char *id2)\n-{\n-  return strcmp (id1, id2) == 0;\n-}\n+typedef simple_hashmap_traits<nofree_string_hash> capture_id_map_hasher;\n \n typedef hash_map<const char *, unsigned, capture_id_map_hasher> cid_map_t;\n "}, {"sha": "8f97646f3e1eab5e6c273ff2ecd07b5c81d0c442", "filename": "gcc/hash-traits.h", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20d2c372c21b9f92b30428d7b545af320d7d2303/gcc%2Fhash-traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20d2c372c21b9f92b30428d7b545af320d7d2303/gcc%2Fhash-traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-traits.h?ref=20d2c372c21b9f92b30428d7b545af320d7d2303", "patch": "@@ -121,6 +121,27 @@ pointer_hash <Type>::is_empty (Type *e)\n   return e == NULL;\n }\n \n+/* Hasher for \"const char *\" strings, using string rather than pointer\n+   equality.  */\n+\n+struct string_hash : pointer_hash <const char>\n+{\n+  static inline hashval_t hash (const char *);\n+  static inline bool equal (const char *, const char *);\n+};\n+\n+inline hashval_t\n+string_hash::hash (const char *id)\n+{\n+  return htab_hash_string (id);\n+}\n+\n+inline bool\n+string_hash::equal (const char *id1, const char *id2)\n+{\n+  return strcmp (id1, id2) == 0;\n+}\n+\n /* Remover and marker for entries in gc memory.  */\n \n template<typename T>\n@@ -190,6 +211,11 @@ struct ggc_ptr_hash : pointer_hash <T>, ggc_remove <T *> {};\n template <typename T>\n struct ggc_cache_ptr_hash : pointer_hash <T>, ggc_cache_remove <T *> {};\n \n+/* Traits for string elements that should not be freed when an element\n+   is deleted.  */\n+\n+struct nofree_string_hash : string_hash, typed_noop_remove <const char *> {};\n+\n template <typename T> struct default_hash_traits;\n \n template <typename T>"}, {"sha": "96a5c6314fa5712afdcfbb5ad1120720a03d8282", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20d2c372c21b9f92b30428d7b545af320d7d2303/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20d2c372c21b9f92b30428d7b545af320d7d2303/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=20d2c372c21b9f92b30428d7b545af320d7d2303", "patch": "@@ -1,3 +1,8 @@\n+2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* jcf-io.c (memoized_class_lookups): Use nofree_string_hash.\n+\t(find_class): Likewise.\n+\n 2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* java-tree.h (treetreehasher): Inherit from ggc_ptr_hash"}, {"sha": "be251d462f177cf7c5d1ad28745c88e54f16efda", "filename": "gcc/java/jcf-io.c", "status": "modified", "additions": 3, "deletions": 25, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20d2c372c21b9f92b30428d7b545af320d7d2303/gcc%2Fjava%2Fjcf-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20d2c372c21b9f92b30428d7b545af320d7d2303/gcc%2Fjava%2Fjcf-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-io.c?ref=20d2c372c21b9f92b30428d7b545af320d7d2303", "patch": "@@ -272,33 +272,11 @@ find_classfile (char *filename, JCF *jcf, const char *dep_name)\n   return open_class (filename, jcf, fd, dep_name);\n }\n \n-\n-/* Hash table helper.  */\n-\n-struct charstar_hash : nofree_ptr_hash <const char>\n-{\n-  static inline hashval_t hash (const char *candidate);\n-  static inline bool equal (const char *existing, const char *candidate);\n-};\n-\n-inline hashval_t\n-charstar_hash::hash (const char *candidate)\n-{\n-  return htab_hash_string (candidate);\n-}\n-\n-inline bool\n-charstar_hash::equal (const char *existing, const char *candidate)\n-{\n-  return strcmp (existing, candidate) == 0;\n-}\n-\n-\n /* A hash table keeping track of class names that were not found\n    during class lookup.  (There is no need to cache the values\n    associated with names that were found; they are saved in\n    IDENTIFIER_CLASS_VALUE.)  */\n-static hash_table<charstar_hash> *memoized_class_lookups;\n+static hash_table<nofree_string_hash> *memoized_class_lookups;\n \n /* Returns a freshly malloc'd string with the fully qualified pathname\n    of the .class file for the class CLASSNAME.  CLASSNAME must be\n@@ -321,11 +299,11 @@ find_class (const char *classname, int classname_length, JCF *jcf)\n \n   /* Create the hash table, if it does not already exist.  */\n   if (!memoized_class_lookups)\n-    memoized_class_lookups = new hash_table<charstar_hash> (37);\n+    memoized_class_lookups = new hash_table<nofree_string_hash> (37);\n \n   /* Loop for this class in the hashtable.  If it is present, we've\n      already looked for this class and failed to find it.  */\n-  hash = charstar_hash::hash (classname);\n+  hash = nofree_string_hash::hash (classname);\n   if (memoized_class_lookups->find_with_hash (classname, hash))\n     return NULL;\n "}, {"sha": "c0a90063bb815ccce6c950ab1a336d44fd158d7d", "filename": "gcc/passes.c", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20d2c372c21b9f92b30428d7b545af320d7d2303/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20d2c372c21b9f92b30428d7b545af320d7d2303/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=20d2c372c21b9f92b30428d7b545af320d7d2303", "patch": "@@ -858,29 +858,7 @@ pass_manager::register_dump_files (opt_pass *pass)\n   while (pass);\n }\n \n-/* Helper for pass_registry hash table.  */\n-\n-struct pass_registry_hasher : default_hashmap_traits\n-{\n-  static inline hashval_t hash (const char *);\n-  static inline bool equal_keys (const char *, const char *);\n-};\n-\n-/* Pass registry hash function.  */\n-\n-inline hashval_t\n-pass_registry_hasher::hash (const char *name)\n-{\n-  return htab_hash_string (name);\n-}\n-\n-/* Hash equal function  */\n-\n-inline bool\n-pass_registry_hasher::equal_keys (const char *s1, const char *s2)\n-{\n-  return !strcmp (s1, s2);\n-}\n+typedef simple_hashmap_traits<nofree_string_hash> pass_registry_hasher;\n \n static hash_map<const char *, opt_pass *, pass_registry_hasher>\n   *name_to_pass_map;"}]}