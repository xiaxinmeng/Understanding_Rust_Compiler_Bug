{"sha": "f88c65f7e37e6842e6ea3c84022a16f9fa9492c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg4YzY1ZjdlMzdlNjg0MmU2ZWEzYzg0MDIyYTE2ZjlmYTk0OTJjOA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-10-17T01:39:47Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-10-17T01:39:47Z"}, "message": "configure.in (HAVE_AS_GOTOFF_IN_DATA): New x86 check.\n\n        * configure.in (HAVE_AS_GOTOFF_IN_DATA): New x86 check.\n        * configure, config.in: Rebuild.\n\n        * config/i386/i386.c (ix86_output_addr_vec_elt): New.\n        (ix86_output_addr_diff_elt): New.\n        * config/i386/i386.h (ASM_OUTPUT_ADDR_VEC_ELT): Use them.\n        (ASM_OUTPUT_ADDR_DIFF_ELT): Likewise.\n        (JUMP_TABLES_IN_TEXT_SECTION): New.\n        * config/i386/i386.md (tablejump): Handle HAVE_AS_GOTOFF_IN_DATA.\n        * config/i386/i386-protos.h: Update.\n\n        * config/i386/386bsd.h, config/i386/beos-elf.h,\n        config/i386/freebsd-aout.h, config/i386/freebsd.h,\n        config/i386/i386-interix.h, config/i386/i386elf.h,\n        config/i386/linux.h, config/i386/netbsd-elf.h,\n        config/i386/netbsd.h, config/i386/openbsd.h,\n        config/i386/ptx4-i.h, config/i386/rtemself.h,\n        config/i386/sco5.h, config/i386/sysv4.h, config/i386/x86-64.h\n        (ASM_OUTPUT_ADDR_DIFF_ELT, JUMP_TABLES_IN_TEXT_SECTION): Remove.\n\nFrom-SVN: r46303", "tree": {"sha": "0278d65c37795602590af63f453e4fe59489296b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0278d65c37795602590af63f453e4fe59489296b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/comments", "author": null, "committer": null, "parents": [{"sha": "b5823a4422a16cfbe1b48fde4d82fd7e421f5241", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5823a4422a16cfbe1b48fde4d82fd7e421f5241", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5823a4422a16cfbe1b48fde4d82fd7e421f5241"}], "stats": {"total": 354, "additions": 140, "deletions": 214}, "files": [{"sha": "bd706c3d7cbc05f1a83f16616d7b742f1e68340c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f88c65f7e37e6842e6ea3c84022a16f9fa9492c8", "patch": "@@ -1,3 +1,25 @@\n+2001-10-16  Richard Henderson  <rth@redhat.com>\n+\n+\t* configure.in (HAVE_AS_GOTOFF_IN_DATA): New x86 check.\n+\t* configure, config.in: Rebuild.\n+\n+\t* config/i386/i386.c (ix86_output_addr_vec_elt): New.\n+\t(ix86_output_addr_diff_elt): New.\n+\t* config/i386/i386.h (ASM_OUTPUT_ADDR_VEC_ELT): Use them.\n+\t(ASM_OUTPUT_ADDR_DIFF_ELT): Likewise.\n+\t(JUMP_TABLES_IN_TEXT_SECTION): New.\n+\t* config/i386/i386.md (tablejump): Handle HAVE_AS_GOTOFF_IN_DATA.\n+\t* config/i386/i386-protos.h: Update.\n+\n+\t* config/i386/386bsd.h, config/i386/beos-elf.h,\n+\tconfig/i386/freebsd-aout.h, config/i386/freebsd.h,\n+\tconfig/i386/i386-interix.h, config/i386/i386elf.h,\n+\tconfig/i386/linux.h, config/i386/netbsd-elf.h,\n+\tconfig/i386/netbsd.h, config/i386/openbsd.h,\n+\tconfig/i386/ptx4-i.h, config/i386/rtemself.h,\n+\tconfig/i386/sco5.h, config/i386/sysv4.h, config/i386/x86-64.h\n+\t(ASM_OUTPUT_ADDR_DIFF_ELT, JUMP_TABLES_IN_TEXT_SECTION): Remove.\n+\n 2001-10-16  Florian Weimer  <fw@deneb.enyo.de>\n \n \t* stmt.c (expand_asm_operands): Update commentary."}, {"sha": "46ea80143d085bac8fede6423a6957a22507fb8d", "filename": "gcc/config.in", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=f88c65f7e37e6842e6ea3c84022a16f9fa9492c8", "patch": "@@ -1,4 +1,4 @@\n-/* config.in.  Generated automatically from configure.in by autoheader 2.13.  */\n+/* config.in.  Generated automatically from configure.in by autoheader.  */\n \n /* Define if using alloca.c.  */\n #undef C_ALLOCA\n@@ -75,7 +75,7 @@\n #undef vfork\n \n /* Define if your assembler supports specifying the maximum number\n-   of bytes to skip when using the GAS .p2align command. */\n+   of bytes to skip when using the GAS .p2align command.  */\n #undef HAVE_GAS_MAX_SKIP_P2ALIGN\n \n /* Define if your assembler supports .balign and .p2align.  */\n@@ -87,7 +87,7 @@\n /* Define to `int' if <sys/types.h> doesn't define.  */\n #undef ssize_t\n \n-/* Define if cpp should also search $prefix/include. */\n+/* Define if cpp should also search $prefix/include.  */\n #undef PREFIX_INCLUDE_DIR\n \n /* Define if you have the __argz_count function.  */\n@@ -552,6 +552,9 @@\n /* Define if your assembler supports offsetable %lo(). */\n #undef HAVE_AS_OFFSETABLE_LO10\n \n+/* Define true if the assembler supports '.long foo@GOTOFF'. */\n+#undef HAVE_AS_GOTOFF_IN_DATA\n+\n /* Define if your assembler supports dwarf2 .file/.loc directives,\n    and preserves file table indicies exactly as given. */\n #undef HAVE_AS_DWARF2_DEBUG_LINE"}, {"sha": "a34e6e5db103de237bc633ef34182e791f1846b5", "filename": "gcc/config/i386/386bsd.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2Fconfig%2Fi386%2F386bsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2Fconfig%2Fi386%2F386bsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2F386bsd.h?ref=f88c65f7e37e6842e6ea3c84022a16f9fa9492c8", "patch": "@@ -47,22 +47,6 @@\n \n #undef ASM_APP_OFF\n #define ASM_APP_OFF \"#NO_APP\\n\"\n-\f\n-/* The following macros are stolen from i386v4.h */\n-/* These have to be defined to get PIC code correct */\n-\n-/* This is how to output an element of a case-vector that is relative.\n-   This is only used for PIC code.  See comments by the `casesi' insn in\n-   i386.md for an explanation of the expression this outputs. */\n-\n-#undef ASM_OUTPUT_ADDR_DIFF_ELT\n-#define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \\\n-  fprintf (FILE, \"\\t.long _GLOBAL_OFFSET_TABLE_+[.-%s%d]\\n\", LPREFIX, VALUE)\n-\n-/* Indicate that jump tables go in the text section.  This is\n-   necessary when compiling PIC code.  */\n-\n-#define JUMP_TABLES_IN_TEXT_SECTION 1\n \n /* Don't default to pcc-struct-return, because gcc is the only compiler, and\n    we want to retain compatibility with older gcc versions.  */"}, {"sha": "d4c0de4ec84eba09110227caef8df48b1e983c04", "filename": "gcc/config/i386/beos-elf.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2Fconfig%2Fi386%2Fbeos-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2Fconfig%2Fi386%2Fbeos-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fbeos-elf.h?ref=f88c65f7e37e6842e6ea3c84022a16f9fa9492c8", "patch": "@@ -37,17 +37,6 @@ Boston, MA 02111-1307, USA.  */\n #undef ASM_COMMENT_START\n #define ASM_COMMENT_START \" #\"\n \n-/* This is how to output an element of a case-vector that is relative.\n-   This is only used for PIC code.  See comments by the `casesi' insn in\n-   i386.md for an explanation of the expression this outputs. */\n-#undef ASM_OUTPUT_ADDR_DIFF_ELT\n-#define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \\\n-  fprintf (FILE, \"\\t.long _GLOBAL_OFFSET_TABLE_+[.-%s%d]\\n\", LPREFIX, VALUE)\n-\n-/* Indicate that jump tables go in the text section.  This is\n-   necessary when compiling PIC code.  */\n-#define JUMP_TABLES_IN_TEXT_SECTION (flag_pic)\n-\n #undef DBX_REGISTER_NUMBER\n #define DBX_REGISTER_NUMBER(n) \\\n   (TARGET_64BIT ? dbx64_register_map[n] : svr4_dbx_register_map[n])"}, {"sha": "6dc0a1df3062fd96ad9839127af0b1887811bdb6", "filename": "gcc/config/i386/freebsd-aout.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2Fconfig%2Fi386%2Ffreebsd-aout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2Fconfig%2Fi386%2Ffreebsd-aout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ffreebsd-aout.h?ref=f88c65f7e37e6842e6ea3c84022a16f9fa9492c8", "patch": "@@ -76,22 +76,6 @@ Boston, MA 02111-1307, USA.  */\n /* FreeBSD using a.out does not support DWARF2 unwinding mechanisms.  */\n #define DWARF2_UNWIND_INFO 0\n \f\n-/* The following macros are stolen from i386v4.h */\n-/* These have to be defined to get PIC code correct */\n-\n-/* This is how to output an element of a case-vector that is relative.\n-   This is only used for PIC code.  See comments by the `casesi' insn in\n-   i386.md for an explanation of the expression this outputs. */\n-\n-#undef ASM_OUTPUT_ADDR_DIFF_ELT\n-#define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \\\n-  fprintf (FILE, \"\\t.long _GLOBAL_OFFSET_TABLE_+[.-%s%d]\\n\", LPREFIX, VALUE)\n-\n-/* Indicate that jump tables go in the text section.  This is\n-   necessary when compiling PIC code.  */\n-\n-#define JUMP_TABLES_IN_TEXT_SECTION 1\n-\n /* Don't default to pcc-struct-return, because in FreeBSD we prefer the\n    superior nature of the older gcc way.  */\n #define DEFAULT_PCC_STRUCT_RETURN 0"}, {"sha": "ba15268a6fba7f96e9d4416074b4ba33880a84ed", "filename": "gcc/config/i386/freebsd.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2Fconfig%2Fi386%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2Fconfig%2Fi386%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ffreebsd.h?ref=f88c65f7e37e6842e6ea3c84022a16f9fa9492c8", "patch": "@@ -38,17 +38,6 @@ Boston, MA 02111-1307, USA.  */\n #undef SET_ASM_OP\n #define SET_ASM_OP\t\"\\t.set\\t\"\n \n-/* This is how to output an element of a case-vector that is relative.\n-   This is only used for PIC code.  See comments by the `casesi' insn in\n-   i386.md for an explanation of the expression this outputs. */\n-#undef ASM_OUTPUT_ADDR_DIFF_ELT\n-#define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \\\n-  fprintf ((FILE), \"\\t.long _GLOBAL_OFFSET_TABLE_+[.-%s%d]\\n\", LPREFIX, VALUE)\n-\n-/* Indicate that jump tables go in the text section.  This is\n-   necessary when compiling PIC code.  */\n-#define JUMP_TABLES_IN_TEXT_SECTION (flag_pic)\n-\n #undef DBX_REGISTER_NUMBER\n #define DBX_REGISTER_NUMBER(n) \\\n   (TARGET_64BIT ? dbx64_register_map[n] : svr4_dbx_register_map[n])"}, {"sha": "3da08078141f2546d98e759e3cb61ae0dd34502e", "filename": "gcc/config/i386/i386-interix.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-interix.h?ref=f88c65f7e37e6842e6ea3c84022a16f9fa9492c8", "patch": "@@ -227,21 +227,6 @@ Boston, MA 02111-1307, USA.  */\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-/* This is how to output an element of a case-vector that is relative.\n-   This is only used for PIC code.  See comments by the `casesi' insn in\n-   i386.md for an explanation of the expression this outputs.\n-   PE format differs on what PC-relative offsets look like (see\n-   coff_i386_rtype_to_howto), and we need to compensate (by one word) here. */\n-\n-#undef ASM_OUTPUT_ADDR_DIFF_ELT\n-#define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \\\n-  fprintf (FILE, \"\\t.long __GLOBAL_OFFSET_TABLE_+[.-%s%d+4]\\n\", LPREFIX, VALUE)\n-\n-/* Indicate that jump tables go in the text section.  This is\n-   necessary when compiling PIC code.  */\n-\n-#define JUMP_TABLES_IN_TEXT_SECTION 1\n-\n /* Emit code to check the stack when allocating more that 4000\n    bytes in one go. */\n "}, {"sha": "111dc1616a76fa055330f8bd9303957f2c3c01c5", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=f88c65f7e37e6842e6ea3c84022a16f9fa9492c8", "patch": "@@ -36,6 +36,9 @@ extern void ix86_expand_epilogue PARAMS ((int));\n extern void ix86_output_function_block_profiler PARAMS ((FILE *, int));\n extern void ix86_output_block_profiler PARAMS ((FILE *, int));\n \n+extern void ix86_output_addr_vec_elt PARAMS ((FILE *, int));\n+extern void ix86_output_addr_diff_elt PARAMS ((FILE *, int, int));\n+\n #ifdef RTX_CODE\n extern int ix86_aligned_p PARAMS ((rtx));\n \n@@ -94,6 +97,7 @@ extern void print_operand PARAMS ((FILE*, rtx, int));\n extern void print_operand_address PARAMS ((FILE*, rtx));\n \n extern void split_di PARAMS ((rtx[], int, rtx[], rtx[]));\n+extern void split_ti PARAMS ((rtx[], int, rtx[], rtx[]));\n \n extern const char *output_387_binary_op PARAMS ((rtx, rtx*));\n extern const char *output_fix_trunc PARAMS ((rtx, rtx*));"}, {"sha": "6be389cc9203b6d48e2c18be061e50da04a8015e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f88c65f7e37e6842e6ea3c84022a16f9fa9492c8", "patch": "@@ -6659,6 +6659,40 @@ ix86_output_block_profiler (file, blockno)\n       break;\n     }\n }\n+\n+void\n+ix86_output_addr_vec_elt (file, value)\n+     FILE *file;\n+     int value;\n+{\n+  const char *directive = ASM_LONG;\n+\n+  if (TARGET_64BIT)\n+    {\n+#ifdef ASM_QUAD\n+      directive = ASM_QUAD;\n+#else\n+      abort ();\n+#endif\n+    }\n+\n+  fprintf (file, \"%s%s%d\\n\", directive, LPREFIX, value);\n+}\n+\n+void\n+ix86_output_addr_diff_elt (file, value, rel)\n+     FILE *file;\n+     int value, rel;\n+{\n+  if (TARGET_64BIT)\n+    fprintf (file, \"%s%s%d-.+4+(.-%s%d)\\n\",\n+\t     ASM_LONG, LPREFIX, value, LPREFIX, rel);\n+  else if (HAVE_AS_GOTOFF_IN_DATA)\n+    fprintf (file, \"%s%s%d@GOTOFF\\n\", ASM_LONG, LPREFIX, value);\n+  else\n+    asm_fprintf (file, \"%s%U_GLOBAL_OFFSET_TABLE_+[.-%s%d]\\n\",\n+\t\t ASM_LONG, LPREFIX, value);\n+}\n \f\n void\n ix86_expand_move (mode, operands)"}, {"sha": "49c1b27132d273f0e97203d0892887b3a2e10021", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=f88c65f7e37e6842e6ea3c84022a16f9fa9492c8", "patch": "@@ -2979,19 +2979,21 @@ do { long l;\t\t\t\t\t\t\\\n #define ASM_OUTPUT_REG_POP(FILE,REGNO)  \\\n   asm_fprintf (FILE, \"\\tpop{l}\\t%%e%s\\n\", reg_names[REGNO])\n \n-/* This is how to output an element of a case-vector that is absolute.\n-     */\n+/* This is how to output an element of a case-vector that is absolute.  */\n \n #define ASM_OUTPUT_ADDR_VEC_ELT(FILE, VALUE)  \\\n-  fprintf (FILE, \"%s%s%d\\n\", TARGET_64BIT ? ASM_QUAD : ASM_LONG, LPREFIX, VALUE)\n+  ix86_output_addr_vec_elt (FILE, VALUE)\n \n-/* This is how to output an element of a case-vector that is relative.\n-   We don't use these on the 386 yet, because the ATT assembler can't do\n-   forward reference the differences.  \n- */\n+/* This is how to output an element of a case-vector that is relative.  */\n \n #define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \\\n-  fprintf (FILE, \"%s%s%d-%s%d\\n\",ASM_LONG, LPREFIX, VALUE, LPREFIX, REL)\n+  ix86_output_addr_diff_elt (FILE, VALUE, REL)\n+\n+/* Under some conditions we need jump tables in the text section, because\n+   the assembler cannot handle label differences between sections.  */\n+\n+#define JUMP_TABLES_IN_TEXT_SECTION \\\n+  (!TARGET_64BIT && flag_pic && !HAVE_AS_GOTOFF_IN_DATA)\n \n /* A C statement that outputs an address constant appropriate to \n    for DWARF debugging.  */"}, {"sha": "e12c4bd2bc913de3cc8a8e3403fdaf299009339f", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f88c65f7e37e6842e6ea3c84022a16f9fa9492c8", "patch": "@@ -13123,6 +13123,13 @@\n \t\t\t\t\t   gen_rtx_LABEL_REF (Pmode, operands[1]),\n \t\t\t\t\t   NULL_RTX, 0,\n \t\t\t\t\t   OPTAB_DIRECT);\n+      else if (HAVE_AS_GOTOFF_IN_DATA)\n+\t{\n+\t  operands[0] = expand_simple_binop (Pmode, PLUS, operands[0],\n+\t\t\t\t\t     pic_offset_table_rtx, NULL_RTX,\n+\t\t\t\t\t     1, OPTAB_DIRECT);\n+\t  current_function_uses_pic_offset_table = 1;\n+\t}\n       else\n \t{\n \t  operands[0] = expand_simple_binop (Pmode, MINUS, pic_offset_table_rtx,"}, {"sha": "2f47573735ebac510207b037ff9dbecaf80a7ee1", "filename": "gcc/config/i386/i386elf.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2Fconfig%2Fi386%2Fi386elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2Fconfig%2Fi386%2Fi386elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386elf.h?ref=f88c65f7e37e6842e6ea3c84022a16f9fa9492c8", "patch": "@@ -156,19 +156,6 @@ do { long value[3];\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-/* This is how to output an element of a case-vector that is relative.\n-   This is only used for PIC code.  See comments by the `casesi' insn in\n-   i386.md for an explanation of the expression this outputs. */\n-\n-#undef ASM_OUTPUT_ADDR_DIFF_ELT\n-#define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \\\n-  fprintf (FILE, \"\\t.long _GLOBAL_OFFSET_TABLE_+[.-%s%d]\\n\", LPREFIX, VALUE)\n-\n-/* Indicate that jump tables go in the text section.  This is\n-   necessary when compiling PIC code.  */\n-\n-#define JUMP_TABLES_IN_TEXT_SECTION 1\n-\n #define LOCAL_LABEL_PREFIX\t\".\"\n \n /* Switch into a generic section.  */"}, {"sha": "9ace75f5ca810559a2aedd0b3abe9d13cb36c090", "filename": "gcc/config/i386/linux.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2Fconfig%2Fi386%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2Fconfig%2Fi386%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flinux.h?ref=f88c65f7e37e6842e6ea3c84022a16f9fa9492c8", "patch": "@@ -43,17 +43,6 @@ Boston, MA 02111-1307, USA.  */\n #undef ASM_COMMENT_START\n #define ASM_COMMENT_START \"#\"\n \n-/* This is how to output an element of a case-vector that is relative.\n-   This is only used for PIC code.  See comments by the `casesi' insn in\n-   i386.md for an explanation of the expression this outputs. */\n-#undef ASM_OUTPUT_ADDR_DIFF_ELT\n-#define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \\\n-  fprintf (FILE, \"\\t.long _GLOBAL_OFFSET_TABLE_+[.-%s%d]\\n\", LPREFIX, VALUE)\n-\n-/* Indicate that jump tables go in the text section.  This is\n-   necessary when compiling PIC code.  */\n-#define JUMP_TABLES_IN_TEXT_SECTION (flag_pic)\n-\n #undef DBX_REGISTER_NUMBER\n #define DBX_REGISTER_NUMBER(n) \\\n   (TARGET_64BIT ? dbx64_register_map[n] : svr4_dbx_register_map[n])"}, {"sha": "e37b1c11c0206f95c6fd94e6e8c28fff417f9caa", "filename": "gcc/config/i386/netbsd-elf.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2Fconfig%2Fi386%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2Fconfig%2Fi386%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnetbsd-elf.h?ref=f88c65f7e37e6842e6ea3c84022a16f9fa9492c8", "patch": "@@ -168,16 +168,6 @@ Boston, MA 02111-1307, USA.  */\n   }\n #endif\n \n-/* This is how to output an element of a case-vector that is relative.\n-   This is only used for PIC code.  */\n-#undef ASM_OUTPUT_ADDR_DIFF_ELT\n-#define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \\\n-  fprintf ((FILE), \"\\t.long _GLOBAL_OFFSET_TABLE_+[.-%s%d]\\n\", LPREFIX, VALUE)\n-\n-/* Indicate that jump tables go in the text section.  This is\n-   necessary when compiling PIC code.  */\n-#define JUMP_TABLES_IN_TEXT_SECTION (flag_pic)\n-\n /*\n  * We always use gas here, so we don't worry about ECOFF assembler problems.\n  */"}, {"sha": "8f5ba201e9a166ed8d5a7e210ad7d5a34ec2e4e9", "filename": "gcc/config/i386/netbsd.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2Fconfig%2Fi386%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2Fconfig%2Fi386%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnetbsd.h?ref=f88c65f7e37e6842e6ea3c84022a16f9fa9492c8", "patch": "@@ -35,22 +35,6 @@\n \n #undef ASM_APP_OFF\n #define ASM_APP_OFF \"#NO_APP\\n\"\n-\f\n-/* The following macros are stolen from i386v4.h */\n-/* These have to be defined to get PIC code correct */\n-\n-/* This is how to output an element of a case-vector that is relative.\n-   This is only used for PIC code.  See comments by the `casesi' insn in\n-   i386.md for an explanation of the expression this outputs. */\n-\n-#undef ASM_OUTPUT_ADDR_DIFF_ELT\n-#define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \\\n-  fprintf (FILE, \"\\t.long _GLOBAL_OFFSET_TABLE_+[.-%s%d]\\n\", LPREFIX, VALUE)\n-\n-/* Indicate that jump tables go in the text section.  This is\n-   necessary when compiling PIC code.  */\n-\n-#define JUMP_TABLES_IN_TEXT_SECTION 1\n \n /* Don't default to pcc-struct-return, because gcc is the only compiler, and\n    we want to retain compatibility with older gcc versions.  */"}, {"sha": "a07ee1524b8efeeaaec0d3b4134ad942be3072e5", "filename": "gcc/config/i386/openbsd.h", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2Fconfig%2Fi386%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2Fconfig%2Fi386%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fopenbsd.h?ref=f88c65f7e37e6842e6ea3c84022a16f9fa9492c8", "patch": "@@ -59,24 +59,6 @@ Boston, MA 02111-1307, USA.  */\n #undef ASM_APP_OFF\n #define ASM_APP_OFF \"#NO_APP\\n\"\n \n-/* The following macros were originally stolen from i386v4.h.\n-   These have to be defined to get PIC code correct.  */\n-\n-/* Assembler format: dispatch tables.  */\n-\n-/* How to output an element of a case-vector that is relative.\n-   This is only used for PIC code.  See comments by the `casesi' insn in\n-   i386.md for an explanation of the expression this outputs.  */\n-#undef ASM_OUTPUT_ADDR_DIFF_ELT\n-#define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \\\n-  fprintf (FILE, \"\\t.long _GLOBAL_OFFSET_TABLE_+[.-%s%d]\\n\", LPREFIX, VALUE)\n-\n-/* Assembler format: sections.  */\n-\n-/* Indicate when jump tables go in the text section.  This is\n-   necessary when compiling PIC code.  */\n-#define JUMP_TABLES_IN_TEXT_SECTION  (flag_pic)\n-\n /* Stack & calling: aggregate returns.  */\n \n /* Don't default to pcc-struct-return, because gcc is the only compiler, and"}, {"sha": "ad2df8ecdd8a9d45e1ab41e97a9c20dbade8848e", "filename": "gcc/config/i386/ptx4-i.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2Fconfig%2Fi386%2Fptx4-i.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2Fconfig%2Fi386%2Fptx4-i.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fptx4-i.h?ref=f88c65f7e37e6842e6ea3c84022a16f9fa9492c8", "patch": "@@ -150,16 +150,3 @@ do { long value[3];\t\t\t\t\t\t\t\\\n         fprintf ((FILE), \"\\n\");\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n-\n-/* This is how to output an element of a case-vector that is relative.\n-   This is only used for PIC code.  See comments by the `casesi' insn in\n-   i386.md for an explanation of the expression this outputs. */\n-\n-#undef ASM_OUTPUT_ADDR_DIFF_ELT\n-#define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \\\n-  fprintf (FILE, \"\\t.long _GLOBAL_OFFSET_TABLE_+[.-%s%d]\\n\", LPREFIX, VALUE)\n-\n-/* Indicate that jump tables go in the text section.  This is\n-   necessary when compiling PIC code.  */\n-\n-#define JUMP_TABLES_IN_TEXT_SECTION 1"}, {"sha": "ce59e7f79a6aceb7ec05f670d97d221c60c841d4", "filename": "gcc/config/i386/rtemself.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2Fconfig%2Fi386%2Frtemself.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2Fconfig%2Fi386%2Frtemself.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Frtemself.h?ref=f88c65f7e37e6842e6ea3c84022a16f9fa9492c8", "patch": "@@ -38,17 +38,6 @@ Boston, MA 02111-1307, USA.  */\n #undef DEFAULT_PCC_STRUCT_RETURN\n #define DEFAULT_PCC_STRUCT_RETURN 1\n \n-/* This is how to output an element of a case-vector that is relative.\n-   This is only used for PIC code.  See comments by the `casesi' insn in\n-   i386.md for an explanation of the expression this outputs. */\n-#undef ASM_OUTPUT_ADDR_DIFF_ELT\n-#define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \\\n-  fprintf (FILE, \"\\t.long _GLOBAL_OFFSET_TABLE_+[.-%s%d]\\n\", LPREFIX, VALUE)\n-\n-/* Indicate that jump tables go in the text section.  This is\n-   necessary when compiling PIC code.  */\n-#define JUMP_TABLES_IN_TEXT_SECTION (flag_pic)\n-\n #undef DBX_REGISTER_NUMBER\n #define DBX_REGISTER_NUMBER(n)  svr4_dbx_register_map[n]\n "}, {"sha": "b40651282df88634ab0433a12c866d23b74bc581", "filename": "gcc/config/i386/sco5.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2Fconfig%2Fi386%2Fsco5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2Fconfig%2Fi386%2Fsco5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsco5.h?ref=f88c65f7e37e6842e6ea3c84022a16f9fa9492c8", "patch": "@@ -237,15 +237,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n     sprintf (LABEL, \".%s%d\", (PREFIX), (NUM));\t\t\t\t\\\n } while (0)\n \n-#undef ASM_OUTPUT_ADDR_DIFF_ELT\n-#define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  if (TARGET_ELF)\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"%s_GLOBAL_OFFSET_TABLE_+[.-%s%d]\\n\", ASM_LONG, LPREFIX, VALUE); \\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"%s%s%d-%s%d\\n\", ASM_LONG, LPREFIX,VALUE,LPREFIX,REL); \\\n-} while (0)\n-\n #undef ASM_OUTPUT_ALIGNED_COMMON\n #define ASM_OUTPUT_ALIGNED_COMMON(FILE, NAME, SIZE, ALIGN)\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n@@ -533,9 +524,6 @@ init_section ()\t\t\t\t\t\t\t\t\\\n   ((TARGET_ELF) ? 0 : \t\t\t\t\t\t\t\\\n    (current_function_calls_setjmp || current_function_calls_longjmp))\n \n-#undef JUMP_TABLES_IN_TEXT_SECTION\n-#define JUMP_TABLES_IN_TEXT_SECTION (TARGET_ELF && flag_pic)\n-\n #undef LOCAL_LABEL_PREFIX\n #define LOCAL_LABEL_PREFIX\t\t\t\t\t\t\\\n  ((TARGET_ELF) ? \"\" : \".\")"}, {"sha": "56cd2381fc0a066a9e5570304579e836ebc696ac", "filename": "gcc/config/i386/sysv4.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2Fconfig%2Fi386%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2Fconfig%2Fi386%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsysv4.h?ref=f88c65f7e37e6842e6ea3c84022a16f9fa9492c8", "patch": "@@ -159,19 +159,6 @@ do { long value[3];\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-/* This is how to output an element of a case-vector that is relative.\n-   This is only used for PIC code.  See comments by the `casesi' insn in\n-   i386.md for an explanation of the expression this outputs. */\n-\n-#undef ASM_OUTPUT_ADDR_DIFF_ELT\n-#define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \\\n-  fprintf (FILE, \"\\t.long _GLOBAL_OFFSET_TABLE_+[.-%s%d]\\n\", LPREFIX, VALUE)\n-\n-/* Indicate that jump tables go in the text section.  This is\n-   necessary when compiling PIC code.  */\n-\n-#define JUMP_TABLES_IN_TEXT_SECTION (flag_pic)\n-\n /* A C statement (sans semicolon) to output to the stdio stream\n    FILE the assembler definition of uninitialized global DECL named\n    NAME whose size is SIZE bytes and alignment is ALIGN bytes."}, {"sha": "8c9912dc562ca64fe5a60560743807483f52d116", "filename": "gcc/config/i386/x86-64.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2Fconfig%2Fi386%2Fx86-64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2Fconfig%2Fi386%2Fx86-64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-64.h?ref=f88c65f7e37e6842e6ea3c84022a16f9fa9492c8", "patch": "@@ -27,20 +27,6 @@ Boston, MA 02111-1307, USA.  */\n #undef ASM_COMMENT_START\n #define ASM_COMMENT_START \"#\"\n \n-/* This is how to output an element of a case-vector that is relative.\n-   This is only used for PIC code.  See comments by the `casesi' insn in\n-   i386.md for an explanation of the expression this outputs. */\n-#undef ASM_OUTPUT_ADDR_DIFF_ELT\n-#define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \\\n-  if (TARGET_64BIT) \\\n-    fprintf (FILE, \"\\t.long %s%d-.+4+(.-%s%d)\\n\", LPREFIX, VALUE, LPREFIX, REL); \\\n-  else\t\\\n-    fprintf (FILE, \"\\t.long _GLOBAL_OFFSET_TABLE_+[.-%s%d]\\n\", LPREFIX, VALUE)\n-\n-/* Indicate that jump tables go in the text section.  This is\n-   necessary when compiling PIC code.  */\n-#define JUMP_TABLES_IN_TEXT_SECTION (flag_pic && !TARGET_64BIT)\n-\n #undef DBX_REGISTER_NUMBER\n #define DBX_REGISTER_NUMBER(n) \\\n   (TARGET_64BIT ? dbx64_register_map[n] : svr4_dbx_register_map[n])"}, {"sha": "e177db905edbfa99c1be14b9c1cc2da7e0012cf0", "filename": "gcc/configure", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=f88c65f7e37e6842e6ea3c84022a16f9fa9492c8", "patch": "@@ -2057,7 +2057,7 @@ EOF\n fi\n \n # Find some useful tools\n-for ac_prog in mawk gawk nawk awk\n+for ac_prog in gawk mawk nawk awk\n do\n # Extract the first word of \"$ac_prog\", so it can be a program name with args.\n set dummy $ac_prog; ac_word=$2\n@@ -7487,11 +7487,39 @@ EOF\n \n     fi\n     echo \"$ac_t\"\"$gcc_cv_as_instructions\" 1>&6\n+\n+    echo $ac_n \"checking assembler GOTOFF in data directives\"\"... $ac_c\" 1>&6\n+echo \"configure:7493: checking assembler GOTOFF in data directives\" >&5\n+    gcc_cv_as_gotoff_in_data=no\n+    if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x\n+    then\n+      if test \"$gcc_cv_gas_major_version\" -eq 2 \\\n+\t -a \"$gcc_cv_gas_minor_version\" -ge 11 \\\n+\t -o \"$gcc_cv_gas_major_version\" -gt 2; then\n+\tgcc_cv_as_gotoff_in_data=yes\n+      fi\n+    elif test x$gcc_cv_as != x; then\n+\tcat > conftest.s <<EOF\n+\t.text\n+.L0:\n+\tnop\n+\t.data\n+\t.long .L0@GOTOFF\n+EOF\n+\tif $gcc_cv_as -o conftest.o conftest.s > /dev/null 2>&1; then\n+\t  gcc_cv_as_gotoff_in_data=yes\n+\tfi\n+    fi\n+    cat >> confdefs.h <<EOF\n+#define HAVE_AS_GOTOFF_IN_DATA `if test $gcc_cv_as_gotoff_in_data = yes; then echo 1; else echo 0; fi`\n+EOF\n+\n+    echo \"$ac_t\"\"$gcc_cv_as_gotoff_in_data\" 1>&6\n     ;;\n esac\n \n echo $ac_n \"checking assembler dwarf2 debug_line support\"\"... $ac_c\" 1>&6\n-echo \"configure:7495: checking assembler dwarf2 debug_line support\" >&5\n+echo \"configure:7523: checking assembler dwarf2 debug_line support\" >&5\n gcc_cv_as_dwarf2_debug_line=no\n # ??? Not all targets support dwarf2 debug_line, even within a version\n # of gas.  Moreover, we need to emit a valid instruction to trigger any\n@@ -7683,7 +7711,7 @@ fi\n \n \n echo $ac_n \"checking whether to enable maintainer-specific portions of Makefiles\"\"... $ac_c\" 1>&6\n-echo \"configure:7687: checking whether to enable maintainer-specific portions of Makefiles\" >&5\n+echo \"configure:7715: checking whether to enable maintainer-specific portions of Makefiles\" >&5\n     # Check whether --enable-maintainer-mode or --disable-maintainer-mode was given.\n if test \"${enable_maintainer_mode+set}\" = set; then\n   enableval=\"$enable_maintainer_mode\""}, {"sha": "babc720c32e6ca07e113450953159d9538fed8d2", "filename": "gcc/configure.in", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f88c65f7e37e6842e6ea3c84022a16f9fa9492c8/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=f88c65f7e37e6842e6ea3c84022a16f9fa9492c8", "patch": "@@ -1631,6 +1631,32 @@ changequote([,])dnl\n \tAC_DEFINE_UNQUOTED(HAVE_GAS_`echo \"$gcc_cv_as_instructions\" | sed -e 's/ $//' | tr '[a-z ]' '[A-Z_]'`)\n     fi\n     AC_MSG_RESULT($gcc_cv_as_instructions)\n+\n+    AC_MSG_CHECKING(assembler GOTOFF in data directives)\n+    gcc_cv_as_gotoff_in_data=no\n+    if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x\n+    then\n+      if test \"$gcc_cv_gas_major_version\" -eq 2 \\\n+\t -a \"$gcc_cv_gas_minor_version\" -ge 11 \\\n+\t -o \"$gcc_cv_gas_major_version\" -gt 2; then\n+\tgcc_cv_as_gotoff_in_data=yes\n+      fi\n+    elif test x$gcc_cv_as != x; then\n+\tcat > conftest.s <<EOF\n+\t.text\n+.L0:\n+\tnop\n+\t.data\n+\t.long .L0@GOTOFF\n+EOF\n+\tif $gcc_cv_as -o conftest.o conftest.s > /dev/null 2>&1; then\n+\t  gcc_cv_as_gotoff_in_data=yes\n+\tfi\n+    fi\n+    AC_DEFINE_UNQUOTED(HAVE_AS_GOTOFF_IN_DATA,\n+      [`if test $gcc_cv_as_gotoff_in_data = yes; then echo 1; else echo 0; fi`],\n+      [Define true if the assembler supports '.long foo@GOTOFF'.])\n+    AC_MSG_RESULT($gcc_cv_as_gotoff_in_data)\n     ;;\n esac\n "}]}