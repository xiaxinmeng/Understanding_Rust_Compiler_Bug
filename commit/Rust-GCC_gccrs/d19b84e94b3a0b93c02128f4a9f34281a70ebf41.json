{"sha": "d19b84e94b3a0b93c02128f4a9f34281a70ebf41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE5Yjg0ZTk0YjNhMGI5M2MwMjEyOGY0YTlmMzQyODFhNzBlYmY0MQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2006-10-17T22:43:37Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2006-10-17T22:43:37Z"}, "message": "re PR c++/28261 (ICE with enum in constructor definition)\n\n\tPR c++/28261\n\t* parser.c (cp_lexer_next_token_is_decl_specifier_keyword): New\n\tfunction.\n\t(cp_parser_constructor_declarator_p): Use it.\n\t(cp_parser_check_type_definition): Return a value indicating\n\twhether or not the definition is valid.\n\t(cp_parser_enum_specifier): Skip invalid enum definitions.\n\tPR c++/28261\n\t* g++.dg/parse/enum3.C: New test.\n\nFrom-SVN: r117835", "tree": {"sha": "d259806834b4f4ee036d1af0e724187d570c357b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d259806834b4f4ee036d1af0e724187d570c357b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d19b84e94b3a0b93c02128f4a9f34281a70ebf41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d19b84e94b3a0b93c02128f4a9f34281a70ebf41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d19b84e94b3a0b93c02128f4a9f34281a70ebf41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d19b84e94b3a0b93c02128f4a9f34281a70ebf41/comments", "author": null, "committer": null, "parents": [{"sha": "c7b0e0273ea01ccc3a8b8065944f89b6d619e787", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7b0e0273ea01ccc3a8b8065944f89b6d619e787", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7b0e0273ea01ccc3a8b8065944f89b6d619e787"}], "stats": {"total": 95, "additions": 81, "deletions": 14}, "files": [{"sha": "b8687ba0b17c5886bcd3bd580e340e10b3f55f5c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19b84e94b3a0b93c02128f4a9f34281a70ebf41/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19b84e94b3a0b93c02128f4a9f34281a70ebf41/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d19b84e94b3a0b93c02128f4a9f34281a70ebf41", "patch": "@@ -1,3 +1,13 @@\n+2006-10-17  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/28261\n+\t* parser.c (cp_lexer_next_token_is_decl_specifier_keyword): New\n+\tfunction.\n+\t(cp_parser_constructor_declarator_p): Use it.\n+\t(cp_parser_check_type_definition): Return a value indicating\n+\twhether or not the definition is valid.\n+\t(cp_parser_enum_specifier): Skip invalid enum definitions.\n+\n 2006-10-17  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/29039"}, {"sha": "82f87f6a636408e4a5272d7b6c8f523eeeb677e5", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 61, "deletions": 14, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19b84e94b3a0b93c02128f4a9f34281a70ebf41/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19b84e94b3a0b93c02128f4a9f34281a70ebf41/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=d19b84e94b3a0b93c02128f4a9f34281a70ebf41", "patch": "@@ -505,6 +505,49 @@ cp_lexer_next_token_is_keyword (cp_lexer* lexer, enum rid keyword)\n   return cp_lexer_peek_token (lexer)->keyword == keyword;\n }\n \n+static bool\n+cp_lexer_next_token_is_decl_specifier_keyword (cp_lexer *lexer)\n+{\n+  cp_token *token;\n+\n+  token = cp_lexer_peek_token (lexer);\n+  switch (token->keyword) \n+    {\n+      /* Storage classes.  */\n+    case RID_AUTO:\n+    case RID_REGISTER:\n+    case RID_STATIC:\n+    case RID_EXTERN:\n+    case RID_MUTABLE:\n+    case RID_THREAD:\n+      /* Elaborated type specifiers.  */\n+    case RID_ENUM:\n+    case RID_CLASS:\n+    case RID_STRUCT:\n+    case RID_UNION:\n+    case RID_TYPENAME:\n+      /* Simple type specifiers.  */\n+    case RID_CHAR:\n+    case RID_WCHAR:\n+    case RID_BOOL:\n+    case RID_SHORT:\n+    case RID_INT:\n+    case RID_LONG:\n+    case RID_SIGNED:\n+    case RID_UNSIGNED:\n+    case RID_FLOAT:\n+    case RID_DOUBLE:\n+    case RID_VOID:\n+      /* GNU extensions.  */ \n+    case RID_ATTRIBUTE:\n+    case RID_TYPEOF:\n+      return true;\n+\n+    default:\n+      return false;\n+    }\n+}\n+\n /* Return a pointer to the Nth token in the token stream.  If N is 1,\n    then this is precisely equivalent to cp_lexer_peek_token (except\n    that it is not inline).  One would like to disallow that case, but\n@@ -1815,7 +1858,7 @@ static void cp_parser_name_lookup_error\n   (cp_parser *, tree, tree, const char *);\n static bool cp_parser_simulate_error\n   (cp_parser *);\n-static void cp_parser_check_type_definition\n+static bool cp_parser_check_type_definition\n   (cp_parser *);\n static void cp_parser_check_for_definition_in_return_type\n   (cp_declarator *, tree);\n@@ -2008,14 +2051,18 @@ cp_parser_check_decl_spec (cp_decl_specifier_seq *decl_specs)\n    definitions are forbidden at this point, an error message is\n    issued.  */\n \n-static void\n+static bool\n cp_parser_check_type_definition (cp_parser* parser)\n {\n   /* If types are forbidden here, issue a message.  */\n   if (parser->type_definition_forbidden_message)\n-    /* Use `%s' to print the string in case there are any escape\n-       characters in the message.  */\n-    error (\"%s\", parser->type_definition_forbidden_message);\n+    {\n+      /* Use `%s' to print the string in case there are any escape\n+\t characters in the message.  */\n+      error (\"%s\", parser->type_definition_forbidden_message);\n+      return false;\n+    }\n+  return true;\n }\n \n /* This function is called when the DECLARATOR is processed.  The TYPE\n@@ -10335,13 +10382,14 @@ cp_parser_enum_specifier (cp_parser* parser)\n     return NULL_TREE;\n \n   /* Issue an error message if type-definitions are forbidden here.  */\n-  cp_parser_check_type_definition (parser);\n-\n-  /* Create the new type.  We do this before consuming the opening brace\n-     so the enum will be recorded as being on the line of its tag (or the\n-     'enum' keyword, if there is no tag).  */\n-  type = start_enum (identifier);\n-\n+  if (!cp_parser_check_type_definition (parser))\n+    type = error_mark_node;\n+  else\n+    /* Create the new type.  We do this before consuming the opening\n+       brace so the enum will be recorded as being on the line of its\n+       tag (or the 'enum' keyword, if there is no tag).  */\n+    type = start_enum (identifier);\n+  \n   /* Consume the opening brace.  */\n   cp_lexer_consume_token (parser->lexer);\n \n@@ -15329,8 +15377,7 @@ cp_parser_constructor_declarator_p (cp_parser *parser, bool friend_p)\n \t  /* A parameter declaration begins with a decl-specifier,\n \t     which is either the \"attribute\" keyword, a storage class\n \t     specifier, or (usually) a type-specifier.  */\n-\t  && !cp_lexer_next_token_is_keyword (parser->lexer, RID_ATTRIBUTE)\n-\t  && !cp_parser_storage_class_specifier_opt (parser))\n+\t  && !cp_lexer_next_token_is_decl_specifier_keyword (parser->lexer))\n \t{\n \t  tree type;\n \t  tree pushed_scope = NULL_TREE;"}, {"sha": "19f897b4a91d1df3dc076d2b053bf4f057800899", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19b84e94b3a0b93c02128f4a9f34281a70ebf41/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19b84e94b3a0b93c02128f4a9f34281a70ebf41/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d19b84e94b3a0b93c02128f4a9f34281a70ebf41", "patch": "@@ -1,3 +1,8 @@\n+2006-10-17  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/28261\n+\t* g++.dg/parse/enum3.C: New test.\n+\n 2006-10-17  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/29039"}, {"sha": "11c532c6e912c4b7c2008502e1ae5c3a985bff31", "filename": "gcc/testsuite/g++.dg/parse/enum3.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19b84e94b3a0b93c02128f4a9f34281a70ebf41/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fenum3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19b84e94b3a0b93c02128f4a9f34281a70ebf41/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fenum3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fenum3.C?ref=d19b84e94b3a0b93c02128f4a9f34281a70ebf41", "patch": "@@ -0,0 +1,5 @@\n+// PR c++/28261\n+\n+struct A {}; // { dg-error \"A\" }\n+\n+A::A (enum { e }) {} // { dg-error \"defined|match\" }"}]}