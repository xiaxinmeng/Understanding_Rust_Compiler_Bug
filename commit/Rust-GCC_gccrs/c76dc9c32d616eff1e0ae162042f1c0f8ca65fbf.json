{"sha": "c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc2ZGM5YzMyZDYxNmVmZjFlMGFlMTYyMDQyZjFjMGY4Y2E2NWZiZg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2017-10-30T12:17:40Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2017-10-30T12:17:40Z"}, "message": "Add -std=c17, -std=gnu17.\n\nC17, a bug-fix version of the C11 standard with DR resolutions\nintegrated, will soon go to ballot.  This patch adds corresponding\noptions -std=c17, -std=gnu17 (new default version, replacing\n-std=gnu11 as the default), -std=iso9899:2017.  As a bug-fix version\nof the standard, there is no need for flag_isoc17 or any options for\ncompatibility warnings; however, there is a new __STDC_VERSION__\nvalue, so new cpplib languages CLK_GNUC17 and CLK_STDC17 are added to\nsupport using that new value with the new options.  (If the standard\nends up being published in 2018 and being known as C18, option aliases\ncan be added.  Note however that -std=iso9899:199409 corresponds to a\n__STDC_VERSION__ value rather than a publication date.)\n\n(There are a couple of DR resolutions needing implementing in GCC, but\nthat's independent of the new options.)\n\n(I'd propose to add -std=c2x / -std=gnu2x / -Wc11-c2x-compat for the\nnext major C standard revision once there are actually C2x drafts\nbeing issued with new features included.)\n\nBootstrapped with no regressions for x86_64-pc-linux-gnu.\n\ngcc:\n\t* doc/invoke.texi (C Dialect Options): Document -std=c17,\n\t-std=iso9899:2017 and -std=gnu17.\n\t* doc/standards.texi (C Language): Document C17 support.\n\t* doc/cpp.texi (Overview): Mention -std=c17.\n\t(Standard Predefined Macros): Document C11 and C17 values of\n\t__STDC_VERSION__.  Do not refer to C99 support as incomplete.\n\t* doc/extend.texi (Inline): Do not list individual options for\n\tstandards newer than C99.\n\t* dwarf2out.c (highest_c_language, gen_compile_unit_die): Handle\n\t\"GNU C17\".\n\t* config/rl78/rl78.c (rl78_option_override): Handle \"GNU C17\"\n\tlanguage name.\n\ngcc/c-family:\n\t* c.opt (std=c17, std=gnu17, std=iso9899:2017): New options.\n\t* c-opts.c (set_std_c17): New function.\n\t(c_common_init_options): Use gnu17 as default C version.\n\t(c_common_handle_option): Handle -std=c17 and -std=gnu17.\n\ngcc/testsuite:\n\t* gcc.dg/c17-version-1.c, gcc.dg/c17-version-2.c: New tests.\n\nlibcpp:\n\t* include/cpplib.h (enum c_lang): Add CLK_GNUC17 and CLK_STDC17.\n\t* init.c (lang_defaults): Add GNUC17 and STDC17 data.\n\t(cpp_init_builtins): Handle C17 value of __STDC_VERSION__.\n\nFrom-SVN: r254216", "tree": {"sha": "b75365b3cb27dcf745496a2403394a4df80386d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b75365b3cb27dcf745496a2403394a4df80386d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa650b641022754c1ee6a58130fe2984d06d9657", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa650b641022754c1ee6a58130fe2984d06d9657", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa650b641022754c1ee6a58130fe2984d06d9657"}], "stats": {"total": 142, "additions": 129, "deletions": 13}, "files": [{"sha": "0274d9b2f5031cac6151fe6b7d8708050417befb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf", "patch": "@@ -1,3 +1,18 @@\n+2017-10-30  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* doc/invoke.texi (C Dialect Options): Document -std=c17,\n+\t-std=iso9899:2017 and -std=gnu17.\n+\t* doc/standards.texi (C Language): Document C17 support.\n+\t* doc/cpp.texi (Overview): Mention -std=c17.\n+\t(Standard Predefined Macros): Document C11 and C17 values of\n+\t__STDC_VERSION__.  Do not refer to C99 support as incomplete.\n+\t* doc/extend.texi (Inline): Do not list individual options for\n+\tstandards newer than C99.\n+\t* dwarf2out.c (highest_c_language, gen_compile_unit_die): Handle\n+\t\"GNU C17\".\n+\t* config/rl78/rl78.c (rl78_option_override): Handle \"GNU C17\"\n+\tlanguage name.\n+\n 2017-10-30  Maxim Ostapenko  <m.ostapenko@samsung.com>\n \n \t* asan.c (asan_finish_file): Align asan globals array by shadow"}, {"sha": "6942d5f8954da922fde4069d4a8387514aa97244", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf", "patch": "@@ -1,3 +1,10 @@\n+2017-10-30  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c.opt (std=c17, std=gnu17, std=iso9899:2017): New options.\n+\t* c-opts.c (set_std_c17): New function.\n+\t(c_common_init_options): Use gnu17 as default C version.\n+\t(c_common_handle_option): Handle -std=c17 and -std=gnu17.\n+\n 2017-10-27  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* c-cppbuiltin.c (mode_has_fma): Add support for PowerPC KFmode."}, {"sha": "32120e636c207a767eb343153ae6cf14225bf815", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf", "patch": "@@ -115,6 +115,7 @@ static void set_std_cxx2a (int);\n static void set_std_c89 (int, int);\n static void set_std_c99 (int);\n static void set_std_c11 (int);\n+static void set_std_c17 (int);\n static void check_deps_environment_vars (void);\n static void handle_deferred_opts (void);\n static void sanitize_cpp_opts (void);\n@@ -236,8 +237,8 @@ c_common_init_options (unsigned int decoded_options_count,\n \n   if (c_language == clk_c)\n     {\n-      /* The default for C is gnu11.  */\n-      set_std_c11 (false /* ISO */);\n+      /* The default for C is gnu17.  */\n+      set_std_c17 (false /* ISO */);\n \n       /* If preprocessing assembly language, accept any of the C-family\n \t front end options since the driver may pass them through.  */\n@@ -675,6 +676,16 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n \tset_std_c11 (false /* ISO */);\n       break;\n \n+    case OPT_std_c17:\n+      if (!preprocessing_asm_p)\n+\tset_std_c17 (true /* ISO */);\n+      break;\n+\n+    case OPT_std_gnu17:\n+      if (!preprocessing_asm_p)\n+\tset_std_c17 (false /* ISO */);\n+      break;\n+\n     case OPT_trigraphs:\n       cpp_opts->trigraphs = 1;\n       break;\n@@ -1559,6 +1570,21 @@ set_std_c11 (int iso)\n   lang_hooks.name = \"GNU C11\";\n }\n \n+/* Set the C 17 standard (without GNU extensions if ISO).  */\n+static void\n+set_std_c17 (int iso)\n+{\n+  cpp_set_lang (parse_in, iso ? CLK_STDC17: CLK_GNUC17);\n+  flag_no_asm = iso;\n+  flag_no_nonansi_builtin = iso;\n+  flag_iso = iso;\n+  flag_isoc11 = 1;\n+  flag_isoc99 = 1;\n+  flag_isoc94 = 1;\n+  lang_hooks.name = \"GNU C17\";\n+}\n+\n+\n /* Set the C++ 98 standard (without GNU extensions if ISO).  */\n static void\n set_std_cxx98 (int iso)"}, {"sha": "dae124ac1c23bde452b94b5cd3d08723b441386c", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf", "patch": "@@ -1944,6 +1944,10 @@ std=c1x\n C ObjC Alias(std=c11)\n Deprecated in favor of -std=c11.\n \n+std=c17\n+C ObjC\n+Conform to the ISO 2017 C standard.\n+\n std=c89\n C ObjC Alias(std=c90)\n Conform to the ISO 1990 C standard.\n@@ -2006,6 +2010,10 @@ std=gnu1x\n C ObjC Alias(std=gnu11)\n Deprecated in favor of -std=gnu11.\n \n+std=gnu17\n+C ObjC\n+Conform to the ISO 2017 C standard with GNU extensions.\n+\n std=gnu89\n C ObjC Alias(std=gnu90)\n Conform to the ISO 1990 C standard with GNU extensions.\n@@ -2042,6 +2050,10 @@ std=iso9899:2011\n C ObjC Alias(std=c11)\n Conform to the ISO 2011 C standard.\n \n+std=iso9899:2017\n+C ObjC Alias(std=c17)\n+Conform to the ISO 2017 C standard.\n+\n traditional\n Driver\n "}, {"sha": "7b381b1f78a16162193cbcc23da0d3b0b6e8871a", "filename": "gcc/config/rl78/rl78.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf/gcc%2Fconfig%2Frl78%2Frl78.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf/gcc%2Fconfig%2Frl78%2Frl78.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78.c?ref=c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf", "patch": "@@ -360,6 +360,7 @@ rl78_option_override (void)\n   if (TARGET_ES0\n       && strcmp (lang_hooks.name, \"GNU C\")\n       && strcmp (lang_hooks.name, \"GNU C11\")\n+      && strcmp (lang_hooks.name, \"GNU C17\")\n       && strcmp (lang_hooks.name, \"GNU C89\")\n       && strcmp (lang_hooks.name, \"GNU C99\")\n       /* Compiling with -flto results in a language of GNU GIMPLE being used... */"}, {"sha": "8cafb6554f8fcacdbbc482772a3948530b9159ec", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf", "patch": "@@ -211,8 +211,8 @@ Standard C@.  In its default mode, the GNU C preprocessor does not do a\n few things required by the standard.  These are features which are\n rarely, if ever, used, and may cause surprising changes to the meaning\n of a program which does not expect them.  To get strict ISO Standard C,\n-you should use the @option{-std=c90}, @option{-std=c99} or\n-@option{-std=c11} options, depending\n+you should use the @option{-std=c90}, @option{-std=c99},\n+@option{-std=c11} or @option{-std=c17} options, depending\n on which version of the standard you want.  To get all the mandatory\n diagnostics, you must also use @option{-pedantic}.  @xref{Invocation}.\n \n@@ -1857,8 +1857,11 @@ implementation, unless GNU CPP is being used with GCC@.\n \n The value @code{199409L} signifies the 1989 C standard as amended in\n 1994, which is the current default; the value @code{199901L} signifies\n-the 1999 revision of the C standard.  Support for the 1999 revision is\n-not yet complete.\n+the 1999 revision of the C standard; the value @code{201112L}\n+signifies the 2011 revision of the C standard; the value\n+@code{201710L} signifies the 2017 revision of the C standard (which is\n+otherwise identical to the 2011 version apart from correction of\n+defects).\n \n This macro is not defined if the @option{-traditional-cpp} option is\n used, nor when compiling C++ or Objective-C@."}, {"sha": "8aa443f87fb700f7a723d736bdbd53b6c839656d", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf", "patch": "@@ -7775,8 +7775,8 @@ GCC implements three different semantics of declaring a function\n inline.  One is available with @option{-std=gnu89} or\n @option{-fgnu89-inline} or when @code{gnu_inline} attribute is present\n on all inline declarations, another when\n-@option{-std=c99}, @option{-std=c11},\n-@option{-std=gnu99} or @option{-std=gnu11}\n+@option{-std=c99},\n+@option{-std=gnu99} or an option for a later C version is used\n (without @option{-fgnu89-inline}), and the third\n is used when compiling C++.\n "}, {"sha": "43acbcbbcd77013d6a06b4ac2b2052eca5d586d7", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf", "patch": "@@ -1831,6 +1831,13 @@ substantially completely supported, modulo bugs, floating-point issues\n Annexes F and G) and the optional Annexes K (Bounds-checking\n interfaces) and L (Analyzability).  The name @samp{c1x} is deprecated.\n \n+@item c17\n+@itemx iso9899:2017\n+ISO C17, the 2017 revision of the ISO C standard.  This standard is\n+same as C11 except for corrections of defects (all of which are also\n+applied with @option{-std=c11}) and a new value of\n+@code{__STDC_VERSION__}, and so is supported to the same extent as C11.\n+\n @item gnu90\n @itemx gnu89\n GNU dialect of ISO C90 (including some C99 features).\n@@ -1841,9 +1848,12 @@ GNU dialect of ISO C99.  The name @samp{gnu9x} is deprecated.\n \n @item gnu11\n @itemx gnu1x\n-GNU dialect of ISO C11.  This is the default for C code.\n+GNU dialect of ISO C11.\n The name @samp{gnu1x} is deprecated.\n \n+@item gnu17\n+GNU dialect of ISO C17.  This is the default for C code.\n+\n @item c++98\n @itemx c++03\n The 1998 ISO C++ standard plus the 2003 technical corrigendum and some"}, {"sha": "a40899dba853325a6ab41fc9e9adc2783d9ca66a", "filename": "gcc/doc/standards.texi", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf/gcc%2Fdoc%2Fstandards.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf/gcc%2Fdoc%2Fstandards.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fstandards.texi?ref=c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf", "patch": "@@ -36,6 +36,8 @@ with some exceptions, and possibly with some extensions.\n @cindex C11\n @cindex ISO C1X\n @cindex C1X\n+@cindex ISO C17\n+@cindex C17\n @cindex Technical Corrigenda\n @cindex TC1\n @cindex Technical Corrigendum 1\n@@ -100,7 +102,11 @@ in 2011 as ISO/IEC 9899:2011.  (While in development, drafts of this\n standard version were referred to as @dfn{C1X}.)\n GCC has substantially complete support\n for this standard, enabled with @option{-std=c11} or\n-@option{-std=iso9899:2011}.  \n+@option{-std=iso9899:2011}.  A version with corrections integrated is\n+known as @dfn{C17} and is supported with @option{-std=c17} or\n+@option{-std=iso9899:2017}; the corrections are also applied with\n+@option{-std=c11}, and the only difference between the options is the\n+value of @code{__STDC_VERSION__}.\n \n By default, GCC provides some extensions to the C language that, on\n rare occasions conflict with the C standard.  @xref{C"}, {"sha": "1a15c96f3c5a15692c919b803a7cf77fde52a8d9", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf", "patch": "@@ -23434,6 +23434,8 @@ highest_c_language (const char *lang1, const char *lang2)\n   if (strcmp (\"GNU C++98\", lang1) == 0 || strcmp (\"GNU C++98\", lang2) == 0)\n     return \"GNU C++98\";\n \n+  if (strcmp (\"GNU C17\", lang1) == 0 || strcmp (\"GNU C17\", lang2) == 0)\n+    return \"GNU C17\";\n   if (strcmp (\"GNU C11\", lang1) == 0 || strcmp (\"GNU C11\", lang2) == 0)\n     return \"GNU C11\";\n   if (strcmp (\"GNU C99\", lang1) == 0 || strcmp (\"GNU C99\", lang2) == 0)\n@@ -23510,7 +23512,8 @@ gen_compile_unit_die (const char *filename)\n \t    language = DW_LANG_C99;\n \n \t  if (dwarf_version >= 5 /* || !dwarf_strict */)\n-\t    if (strcmp (language_string, \"GNU C11\") == 0)\n+\t    if (strcmp (language_string, \"GNU C11\") == 0\n+\t\t|| strcmp (language_string, \"GNU C17\") == 0)\n \t      language = DW_LANG_C11;\n \t}\n     }"}, {"sha": "6f98a1a7acc5e160fcc4351add9d03d5eb5054d9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf", "patch": "@@ -1,3 +1,7 @@\n+2017-10-30  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/c17-version-1.c, gcc.dg/c17-version-2.c: New tests.\n+\n 2017-10-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/22141"}, {"sha": "4e69a6eec11b647ec0e277d63a7cbd6d95469c46", "filename": "gcc/testsuite/gcc.dg/c17-version-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf/gcc%2Ftestsuite%2Fgcc.dg%2Fc17-version-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf/gcc%2Ftestsuite%2Fgcc.dg%2Fc17-version-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc17-version-1.c?ref=c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf", "patch": "@@ -0,0 +1,9 @@\n+/* Test __STDC_VERSION__ for C17.  Test -std=c17.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c17 -pedantic-errors\" } */\n+\n+#if __STDC_VERSION__ == 201710L\n+int i;\n+#else\n+#error \"Bad __STDC_VERSION__.\"\n+#endif"}, {"sha": "3f36720409479ed5eb5e80d200114a23b98083cb", "filename": "gcc/testsuite/gcc.dg/c17-version-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf/gcc%2Ftestsuite%2Fgcc.dg%2Fc17-version-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf/gcc%2Ftestsuite%2Fgcc.dg%2Fc17-version-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc17-version-2.c?ref=c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf", "patch": "@@ -0,0 +1,9 @@\n+/* Test __STDC_VERSION__ for C17.  Test -std=iso9899:2017.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:2017 -pedantic-errors\" } */\n+\n+#if __STDC_VERSION__ == 201710L\n+int i;\n+#else\n+#error \"Bad __STDC_VERSION__.\"\n+#endif"}, {"sha": "785be4f94acb7119dfbf29ae1e51ee6ba1fe99fc", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf", "patch": "@@ -1,3 +1,9 @@\n+2017-10-30  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* include/cpplib.h (enum c_lang): Add CLK_GNUC17 and CLK_STDC17.\n+\t* init.c (lang_defaults): Add GNUC17 and STDC17 data.\n+\t(cpp_init_builtins): Handle C17 value of __STDC_VERSION__.\n+\n 2017-10-10  Nathan Sidwell  <nathan@acm.org>\n \n \tPR preprocessor/82506"}, {"sha": "a2dc93da87eaf3dae26572206267375f99d33432", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf", "patch": "@@ -168,8 +168,8 @@ enum cpp_ttype\n #undef TK\n \n /* C language kind, used when calling cpp_create_reader.  */\n-enum c_lang {CLK_GNUC89 = 0, CLK_GNUC99, CLK_GNUC11,\n-\t     CLK_STDC89, CLK_STDC94, CLK_STDC99, CLK_STDC11,\n+enum c_lang {CLK_GNUC89 = 0, CLK_GNUC99, CLK_GNUC11, CLK_GNUC17,\n+\t     CLK_STDC89, CLK_STDC94, CLK_STDC99, CLK_STDC11, CLK_STDC17,\n \t     CLK_GNUCXX, CLK_CXX98, CLK_GNUCXX11, CLK_CXX11,\n \t     CLK_GNUCXX14, CLK_CXX14, CLK_GNUCXX17, CLK_CXX17,\n \t     CLK_GNUCXX2A, CLK_CXX2A, CLK_ASM};"}, {"sha": "ecc81e3138a54ac5c3d77fcbc54ba66065ee4c0f", "filename": "libcpp/init.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=c76dc9c32d616eff1e0ae162042f1c0f8ca65fbf", "patch": "@@ -98,10 +98,12 @@ static const struct lang_flags lang_defaults[] =\n   /* GNUC89   */  { 0,  0,  1,  0,  0,  0,  1,   0,   0,   0,    0,     0,     0,   0 },\n   /* GNUC99   */  { 1,  0,  1,  1,  0,  0,  1,   1,   1,   0,    0,     0,     0,   0 },\n   /* GNUC11   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   0 },\n+  /* GNUC17   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   0 },\n   /* STDC89   */  { 0,  0,  0,  0,  0,  1,  0,   0,   0,   0,    0,     0,     1,   0 },\n   /* STDC94   */  { 0,  0,  0,  0,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0 },\n   /* STDC99   */  { 1,  0,  1,  1,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0 },\n   /* STDC11   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   0 },\n+  /* STDC17   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   0 },\n   /* GNUCXX   */  { 0,  1,  1,  1,  0,  0,  1,   0,   0,   0,    0,     0,     0,   0 },\n   /* CXX98    */  { 0,  1,  0,  1,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0 },\n   /* GNUCXX11 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    0,     0,     0,   0 },\n@@ -518,6 +520,9 @@ cpp_init_builtins (cpp_reader *pfile, int hosted)\n     _cpp_define_builtin (pfile, \"__ASSEMBLER__ 1\");\n   else if (CPP_OPTION (pfile, lang) == CLK_STDC94)\n     _cpp_define_builtin (pfile, \"__STDC_VERSION__ 199409L\");\n+  else if (CPP_OPTION (pfile, lang) == CLK_STDC17\n+\t   || CPP_OPTION (pfile, lang) == CLK_GNUC17)\n+    _cpp_define_builtin (pfile, \"__STDC_VERSION__ 201710L\");\n   else if (CPP_OPTION (pfile, lang) == CLK_STDC11\n \t   || CPP_OPTION (pfile, lang) == CLK_GNUC11)\n     _cpp_define_builtin (pfile, \"__STDC_VERSION__ 201112L\");"}]}