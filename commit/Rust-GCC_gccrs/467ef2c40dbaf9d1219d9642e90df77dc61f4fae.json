{"sha": "467ef2c40dbaf9d1219d9642e90df77dc61f4fae", "node_id": "C_kwDOANBUbNoAKDQ2N2VmMmM0MGRiYWY5ZDEyMTlkOTY0MmU5MGRmNzdkYzYxZjRmYWU", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2022-08-31T09:54:47Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2022-09-25T12:44:54Z"}, "message": "fortran: Support clobbering of SAVE variables [PR41453]\n\nThis removes a condition added in:\nr9-3032-gee7fb0588c6361b4d77337ab0f7527be64fcdde2.\n\nThat commit added a condition to avoid generating ICE with clobbers\nof variables with the SAVE attribute.\nThe test added at that point continues to pass if we remove that\ncondition now.\n\n\tPR fortran/41453\n\tPR fortran/87395\n\ngcc/fortran/ChangeLog:\n\n\t* trans-expr.cc (gfc_conv_procedure_call): Remove condition\n\ton SAVE attribute guarding clobber generation.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/intent_optimize_7.f90: New test.", "tree": {"sha": "2641d7c7f6495b857e161e3d10a057539171b3d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2641d7c7f6495b857e161e3d10a057539171b3d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/467ef2c40dbaf9d1219d9642e90df77dc61f4fae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/467ef2c40dbaf9d1219d9642e90df77dc61f4fae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/467ef2c40dbaf9d1219d9642e90df77dc61f4fae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/467ef2c40dbaf9d1219d9642e90df77dc61f4fae/comments", "author": null, "committer": null, "parents": [{"sha": "51c9480f9f0a80ef112ba2aed040b0b2ad0fc2a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51c9480f9f0a80ef112ba2aed040b0b2ad0fc2a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51c9480f9f0a80ef112ba2aed040b0b2ad0fc2a2"}], "stats": {"total": 47, "additions": 45, "deletions": 2}, "files": [{"sha": "10b493475870d4bbfde3da607bc91487d4db0d23", "filename": "gcc/fortran/trans-expr.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467ef2c40dbaf9d1219d9642e90df77dc61f4fae/gcc%2Ffortran%2Ftrans-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467ef2c40dbaf9d1219d9642e90df77dc61f4fae/gcc%2Ffortran%2Ftrans-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.cc?ref=467ef2c40dbaf9d1219d9642e90df77dc61f4fae", "patch": "@@ -6527,8 +6527,6 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t\t\t  && !e->symtree->n.sym->attr.dimension\n \t\t\t  && !e->symtree->n.sym->attr.pointer\n \t\t\t  && !e->symtree->n.sym->attr.allocatable\n-\t\t\t  /* FIXME - PR 87395 and PR 41453  */\n-\t\t\t  && e->symtree->n.sym->attr.save == SAVE_NONE\n \t\t\t  && !e->symtree->n.sym->attr.associate_var\n \t\t\t  && e->ts.type != BT_CHARACTER\n \t\t\t  && e->ts.type != BT_DERIVED"}, {"sha": "c2f21929863b423e3dc216d00e4cb41ba23a29e5", "filename": "gcc/testsuite/gfortran.dg/intent_optimize_7.f90", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467ef2c40dbaf9d1219d9642e90df77dc61f4fae/gcc%2Ftestsuite%2Fgfortran.dg%2Fintent_optimize_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467ef2c40dbaf9d1219d9642e90df77dc61f4fae/gcc%2Ftestsuite%2Fgfortran.dg%2Fintent_optimize_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fintent_optimize_7.f90?ref=467ef2c40dbaf9d1219d9642e90df77dc61f4fae", "patch": "@@ -0,0 +1,45 @@\n+! { dg-do run }\n+! { dg-additional-options \"-fno-inline -fno-ipa-modref -fdump-tree-optimized -fdump-tree-original\" }\n+!\n+! PR fortran/41453\n+! Check that the INTENT(OUT) attribute causes one clobber to be emitted in\n+! the caller before each call to FOO in the *.original dump, and the\n+! initialization constants to be optimized away in the *.optimized dump,\n+! in the case of SAVE variables.\n+\n+module x\n+implicit none\n+contains\n+  subroutine foo(a)\n+    integer, intent(out) :: a\n+    a = 42\n+  end subroutine foo\n+end module x\n+\n+program main\n+  use x\n+  implicit none\n+  integer :: c = 0\n+\n+  ! implicit SAVE attribute\n+  c = 123456789\n+  call foo(c)\n+  if (c /= 42) stop 1\n+\n+  ! explicit SAVE attribute\n+  call check_save_explicit\n+\n+contains\n+  subroutine check_save_explicit\n+    integer, save :: d\n+    d = 987654321\n+    call foo(d)\n+    if (d /= 42) stop 2\n+  end subroutine check_save_explicit\n+end program main\n+\n+! { dg-final { scan-tree-dump-times \"CLOBBER\" 2 \"original\" } }\n+! { dg-final { scan-tree-dump \"c = {CLOBBER};\" \"original\" } }\n+! { dg-final { scan-tree-dump \"d = {CLOBBER};\" \"original\" } }\n+! { dg-final { scan-tree-dump-not \"123456789\" \"optimized\" { target __OPTIMIZE__ } } }\n+! { dg-final { scan-tree-dump-not \"987654321\" \"optimized\" { target __OPTIMIZE__ } } }"}]}