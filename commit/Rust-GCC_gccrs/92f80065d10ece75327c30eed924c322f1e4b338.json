{"sha": "92f80065d10ece75327c30eed924c322f1e4b338", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJmODAwNjVkMTBlY2U3NTMyN2MzMGVlZDkyNGMzMjJmMWU0YjMzOA==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-03-20T11:58:30Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-03-20T11:58:30Z"}, "message": "[ARM][GCC][1/8x]: MVE ACLE vidup, vddup, viwdup and vdwdup intrinsics with writeback.\n\nThis patch supports following MVE ACLE intrinsics with writeback.\n\nvddupq_m_n_u8, vddupq_m_n_u32, vddupq_m_n_u16, vddupq_m_wb_u8, vddupq_m_wb_u16, vddupq_m_wb_u32, vddupq_n_u8, vddupq_n_u32, vddupq_n_u16, vddupq_wb_u8, vddupq_wb_u16, vddupq_wb_u32, vdwdupq_m_n_u8, vdwdupq_m_n_u32, vdwdupq_m_n_u16, vdwdupq_m_wb_u8, vdwdupq_m_wb_u32, vdwdupq_m_wb_u16, vdwdupq_n_u8, vdwdupq_n_u32, vdwdupq_n_u16, vdwdupq_wb_u8, vdwdupq_wb_u32, vdwdupq_wb_u16, vidupq_m_n_u8, vidupq_m_n_u32, vidupq_m_n_u16, vidupq_m_wb_u8, vidupq_m_wb_u16, vidupq_m_wb_u32, vidupq_n_u8, vidupq_n_u32, vidupq_n_u16, vidupq_wb_u8, vidupq_wb_u16, vidupq_wb_u32, viwdupq_m_n_u8, viwdupq_m_n_u32, viwdupq_m_n_u16, viwdupq_m_wb_u8, viwdupq_m_wb_u32, viwdupq_m_wb_u16, viwdupq_n_u8, viwdupq_n_u32, viwdupq_n_u16, viwdupq_wb_u8, viwdupq_wb_u32, viwdupq_wb_u16.\n\nPlease refer to M-profile Vector Extension (MVE) intrinsics [1]  for more details.\n[1] https://developer.arm.com/architectures/instruction-sets/simd-isas/helium/mve-intrinsics\n\n2020-03-20  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n            Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n\n\t* config/arm/arm-builtins.c\n\t(QUINOP_UNONE_UNONE_UNONE_UNONE_IMM_UNONE_QUALIFIERS): Define quinary\n\tbuiltin qualifier.\n\t* config/arm/arm_mve.h (vddupq_m_n_u8): Define macro.\n\t(vddupq_m_n_u32): Likewise.\n\t(vddupq_m_n_u16): Likewise.\n\t(vddupq_m_wb_u8): Likewise.\n\t(vddupq_m_wb_u16): Likewise.\n\t(vddupq_m_wb_u32): Likewise.\n\t(vddupq_n_u8): Likewise.\n\t(vddupq_n_u32): Likewise.\n\t(vddupq_n_u16): Likewise.\n\t(vddupq_wb_u8): Likewise.\n\t(vddupq_wb_u16): Likewise.\n\t(vddupq_wb_u32): Likewise.\n\t(vdwdupq_m_n_u8): Likewise.\n\t(vdwdupq_m_n_u32): Likewise.\n\t(vdwdupq_m_n_u16): Likewise.\n\t(vdwdupq_m_wb_u8): Likewise.\n\t(vdwdupq_m_wb_u32): Likewise.\n\t(vdwdupq_m_wb_u16): Likewise.\n\t(vdwdupq_n_u8): Likewise.\n\t(vdwdupq_n_u32): Likewise.\n\t(vdwdupq_n_u16): Likewise.\n\t(vdwdupq_wb_u8): Likewise.\n\t(vdwdupq_wb_u32): Likewise.\n\t(vdwdupq_wb_u16): Likewise.\n\t(vidupq_m_n_u8): Likewise.\n\t(vidupq_m_n_u32): Likewise.\n\t(vidupq_m_n_u16): Likewise.\n\t(vidupq_m_wb_u8): Likewise.\n\t(vidupq_m_wb_u16): Likewise.\n\t(vidupq_m_wb_u32): Likewise.\n\t(vidupq_n_u8): Likewise.\n\t(vidupq_n_u32): Likewise.\n\t(vidupq_n_u16): Likewise.\n\t(vidupq_wb_u8): Likewise.\n\t(vidupq_wb_u16): Likewise.\n\t(vidupq_wb_u32): Likewise.\n\t(viwdupq_m_n_u8): Likewise.\n\t(viwdupq_m_n_u32): Likewise.\n\t(viwdupq_m_n_u16): Likewise.\n\t(viwdupq_m_wb_u8): Likewise.\n\t(viwdupq_m_wb_u32): Likewise.\n\t(viwdupq_m_wb_u16): Likewise.\n\t(viwdupq_n_u8): Likewise.\n\t(viwdupq_n_u32): Likewise.\n\t(viwdupq_n_u16): Likewise.\n\t(viwdupq_wb_u8): Likewise.\n\t(viwdupq_wb_u32): Likewise.\n\t(viwdupq_wb_u16): Likewise.\n\t(__arm_vddupq_m_n_u8): Define intrinsic.\n\t(__arm_vddupq_m_n_u32): Likewise.\n\t(__arm_vddupq_m_n_u16): Likewise.\n\t(__arm_vddupq_m_wb_u8): Likewise.\n\t(__arm_vddupq_m_wb_u16): Likewise.\n\t(__arm_vddupq_m_wb_u32): Likewise.\n\t(__arm_vddupq_n_u8): Likewise.\n\t(__arm_vddupq_n_u32): Likewise.\n\t(__arm_vddupq_n_u16): Likewise.\n\t(__arm_vdwdupq_m_n_u8): Likewise.\n\t(__arm_vdwdupq_m_n_u32): Likewise.\n\t(__arm_vdwdupq_m_n_u16): Likewise.\n\t(__arm_vdwdupq_m_wb_u8): Likewise.\n\t(__arm_vdwdupq_m_wb_u32): Likewise.\n\t(__arm_vdwdupq_m_wb_u16): Likewise.\n\t(__arm_vdwdupq_n_u8): Likewise.\n\t(__arm_vdwdupq_n_u32): Likewise.\n\t(__arm_vdwdupq_n_u16): Likewise.\n\t(__arm_vdwdupq_wb_u8): Likewise.\n\t(__arm_vdwdupq_wb_u32): Likewise.\n\t(__arm_vdwdupq_wb_u16): Likewise.\n\t(__arm_vidupq_m_n_u8): Likewise.\n\t(__arm_vidupq_m_n_u32): Likewise.\n\t(__arm_vidupq_m_n_u16): Likewise.\n\t(__arm_vidupq_n_u8): Likewise.\n\t(__arm_vidupq_m_wb_u8): Likewise.\n\t(__arm_vidupq_m_wb_u16): Likewise.\n\t(__arm_vidupq_m_wb_u32): Likewise.\n\t(__arm_vidupq_n_u32): Likewise.\n\t(__arm_vidupq_n_u16): Likewise.\n\t(__arm_vidupq_wb_u8): Likewise.\n\t(__arm_vidupq_wb_u16): Likewise.\n\t(__arm_vidupq_wb_u32): Likewise.\n\t(__arm_vddupq_wb_u8): Likewise.\n\t(__arm_vddupq_wb_u16): Likewise.\n\t(__arm_vddupq_wb_u32): Likewise.\n\t(__arm_viwdupq_m_n_u8): Likewise.\n\t(__arm_viwdupq_m_n_u32): Likewise.\n\t(__arm_viwdupq_m_n_u16): Likewise.\n\t(__arm_viwdupq_m_wb_u8): Likewise.\n\t(__arm_viwdupq_m_wb_u32): Likewise.\n\t(__arm_viwdupq_m_wb_u16): Likewise.\n\t(__arm_viwdupq_n_u8): Likewise.\n\t(__arm_viwdupq_n_u32): Likewise.\n\t(__arm_viwdupq_n_u16): Likewise.\n\t(__arm_viwdupq_wb_u8): Likewise.\n\t(__arm_viwdupq_wb_u32): Likewise.\n\t(__arm_viwdupq_wb_u16): Likewise.\n\t(vidupq_m): Define polymorphic variant.\n\t(vddupq_m): Likewise.\n\t(vidupq_u16): Likewise.\n\t(vidupq_u32): Likewise.\n\t(vidupq_u8): Likewise.\n\t(vddupq_u16): Likewise.\n\t(vddupq_u32): Likewise.\n\t(vddupq_u8): Likewise.\n\t(viwdupq_m): Likewise.\n\t(viwdupq_u16): Likewise.\n\t(viwdupq_u32): Likewise.\n\t(viwdupq_u8): Likewise.\n\t(vdwdupq_m): Likewise.\n\t(vdwdupq_u16): Likewise.\n\t(vdwdupq_u32): Likewise.\n\t(vdwdupq_u8): Likewise.\n\t* config/arm/arm_mve_builtins.def\n\t(QUINOP_UNONE_UNONE_UNONE_UNONE_IMM_UNONE_QUALIFIERS): Use builtin\n\tqualifier.\n\t* config/arm/mve.md (mve_vidupq_n_u<mode>): Define RTL pattern.\n\t(mve_vidupq_u<mode>_insn): Likewise.\n\t(mve_vidupq_m_n_u<mode>): Likewise.\n\t(mve_vidupq_m_wb_u<mode>_insn): Likewise.\n\t(mve_vddupq_n_u<mode>): Likewise.\n\t(mve_vddupq_u<mode>_insn): Likewise.\n\t(mve_vddupq_m_n_u<mode>): Likewise.\n\t(mve_vddupq_m_wb_u<mode>_insn): Likewise.\n\t(mve_vdwdupq_n_u<mode>): Likewise.\n\t(mve_vdwdupq_wb_u<mode>): Likewise.\n\t(mve_vdwdupq_wb_u<mode>_insn): Likewise.\n\t(mve_vdwdupq_m_n_u<mode>): Likewise.\n\t(mve_vdwdupq_m_wb_u<mode>): Likewise.\n\t(mve_vdwdupq_m_wb_u<mode>_insn): Likewise.\n\t(mve_viwdupq_n_u<mode>): Likewise.\n\t(mve_viwdupq_wb_u<mode>): Likewise.\n\t(mve_viwdupq_wb_u<mode>_insn): Likewise.\n\t(mve_viwdupq_m_n_u<mode>): Likewise.\n\t(mve_viwdupq_m_wb_u<mode>): Likewise.\n\t(mve_viwdupq_m_wb_u<mode>_insn): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n2020-03-20  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n            Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n\n\t* gcc.target/arm/mve/intrinsics/vddupq_m_n_u16.c: New test.\n\t* gcc.target/arm/mve/intrinsics/vddupq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_m_wb_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_m_wb_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_m_wb_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_wb_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_wb_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_wb_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_m_wb_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_m_wb_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_m_wb_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_wb_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_wb_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_wb_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_m_wb_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_m_wb_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_m_wb_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_wb_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_wb_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_wb_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_m_wb_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_m_wb_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_m_wb_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_wb_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_wb_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_wb_u8.c: Likewise.", "tree": {"sha": "eeddf33866b16de15dffef4a5b8d8c4c48367cf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eeddf33866b16de15dffef4a5b8d8c4c48367cf4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92f80065d10ece75327c30eed924c322f1e4b338", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92f80065d10ece75327c30eed924c322f1e4b338", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92f80065d10ece75327c30eed924c322f1e4b338", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92f80065d10ece75327c30eed924c322f1e4b338/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85a94e8790198cdafc6f2af8224b273075bab84d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85a94e8790198cdafc6f2af8224b273075bab84d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85a94e8790198cdafc6f2af8224b273075bab84d"}], "stats": {"total": 2240, "additions": 2239, "deletions": 1}, "files": [{"sha": "22c97664d69a4d6d3650f812c94f929e4d47acfe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -1,3 +1,146 @@\n+2020-03-20  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+            Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+\n+\t* config/arm/arm-builtins.c\n+\t(QUINOP_UNONE_UNONE_UNONE_UNONE_IMM_UNONE_QUALIFIERS): Define quinary\n+\tbuiltin qualifier.\n+\t* config/arm/arm_mve.h (vddupq_m_n_u8): Define macro.\n+\t(vddupq_m_n_u32): Likewise.\n+\t(vddupq_m_n_u16): Likewise.\n+\t(vddupq_m_wb_u8): Likewise.\n+\t(vddupq_m_wb_u16): Likewise.\n+\t(vddupq_m_wb_u32): Likewise.\n+\t(vddupq_n_u8): Likewise.\n+\t(vddupq_n_u32): Likewise.\n+\t(vddupq_n_u16): Likewise.\n+\t(vddupq_wb_u8): Likewise.\n+\t(vddupq_wb_u16): Likewise.\n+\t(vddupq_wb_u32): Likewise.\n+\t(vdwdupq_m_n_u8): Likewise.\n+\t(vdwdupq_m_n_u32): Likewise.\n+\t(vdwdupq_m_n_u16): Likewise.\n+\t(vdwdupq_m_wb_u8): Likewise.\n+\t(vdwdupq_m_wb_u32): Likewise.\n+\t(vdwdupq_m_wb_u16): Likewise.\n+\t(vdwdupq_n_u8): Likewise.\n+\t(vdwdupq_n_u32): Likewise.\n+\t(vdwdupq_n_u16): Likewise.\n+\t(vdwdupq_wb_u8): Likewise.\n+\t(vdwdupq_wb_u32): Likewise.\n+\t(vdwdupq_wb_u16): Likewise.\n+\t(vidupq_m_n_u8): Likewise.\n+\t(vidupq_m_n_u32): Likewise.\n+\t(vidupq_m_n_u16): Likewise.\n+\t(vidupq_m_wb_u8): Likewise.\n+\t(vidupq_m_wb_u16): Likewise.\n+\t(vidupq_m_wb_u32): Likewise.\n+\t(vidupq_n_u8): Likewise.\n+\t(vidupq_n_u32): Likewise.\n+\t(vidupq_n_u16): Likewise.\n+\t(vidupq_wb_u8): Likewise.\n+\t(vidupq_wb_u16): Likewise.\n+\t(vidupq_wb_u32): Likewise.\n+\t(viwdupq_m_n_u8): Likewise.\n+\t(viwdupq_m_n_u32): Likewise.\n+\t(viwdupq_m_n_u16): Likewise.\n+\t(viwdupq_m_wb_u8): Likewise.\n+\t(viwdupq_m_wb_u32): Likewise.\n+\t(viwdupq_m_wb_u16): Likewise.\n+\t(viwdupq_n_u8): Likewise.\n+\t(viwdupq_n_u32): Likewise.\n+\t(viwdupq_n_u16): Likewise.\n+\t(viwdupq_wb_u8): Likewise.\n+\t(viwdupq_wb_u32): Likewise.\n+\t(viwdupq_wb_u16): Likewise.\n+\t(__arm_vddupq_m_n_u8): Define intrinsic.\n+\t(__arm_vddupq_m_n_u32): Likewise.\n+\t(__arm_vddupq_m_n_u16): Likewise.\n+\t(__arm_vddupq_m_wb_u8): Likewise.\n+\t(__arm_vddupq_m_wb_u16): Likewise.\n+\t(__arm_vddupq_m_wb_u32): Likewise.\n+\t(__arm_vddupq_n_u8): Likewise.\n+\t(__arm_vddupq_n_u32): Likewise.\n+\t(__arm_vddupq_n_u16): Likewise.\n+\t(__arm_vdwdupq_m_n_u8): Likewise.\n+\t(__arm_vdwdupq_m_n_u32): Likewise.\n+\t(__arm_vdwdupq_m_n_u16): Likewise.\n+\t(__arm_vdwdupq_m_wb_u8): Likewise.\n+\t(__arm_vdwdupq_m_wb_u32): Likewise.\n+\t(__arm_vdwdupq_m_wb_u16): Likewise.\n+\t(__arm_vdwdupq_n_u8): Likewise.\n+\t(__arm_vdwdupq_n_u32): Likewise.\n+\t(__arm_vdwdupq_n_u16): Likewise.\n+\t(__arm_vdwdupq_wb_u8): Likewise.\n+\t(__arm_vdwdupq_wb_u32): Likewise.\n+\t(__arm_vdwdupq_wb_u16): Likewise.\n+\t(__arm_vidupq_m_n_u8): Likewise.\n+\t(__arm_vidupq_m_n_u32): Likewise.\n+\t(__arm_vidupq_m_n_u16): Likewise.\n+\t(__arm_vidupq_n_u8): Likewise.\n+\t(__arm_vidupq_m_wb_u8): Likewise.\n+\t(__arm_vidupq_m_wb_u16): Likewise.\n+\t(__arm_vidupq_m_wb_u32): Likewise.\n+\t(__arm_vidupq_n_u32): Likewise.\n+\t(__arm_vidupq_n_u16): Likewise.\n+\t(__arm_vidupq_wb_u8): Likewise.\n+\t(__arm_vidupq_wb_u16): Likewise.\n+\t(__arm_vidupq_wb_u32): Likewise.\n+\t(__arm_vddupq_wb_u8): Likewise.\n+\t(__arm_vddupq_wb_u16): Likewise.\n+\t(__arm_vddupq_wb_u32): Likewise.\n+\t(__arm_viwdupq_m_n_u8): Likewise.\n+\t(__arm_viwdupq_m_n_u32): Likewise.\n+\t(__arm_viwdupq_m_n_u16): Likewise.\n+\t(__arm_viwdupq_m_wb_u8): Likewise.\n+\t(__arm_viwdupq_m_wb_u32): Likewise.\n+\t(__arm_viwdupq_m_wb_u16): Likewise.\n+\t(__arm_viwdupq_n_u8): Likewise.\n+\t(__arm_viwdupq_n_u32): Likewise.\n+\t(__arm_viwdupq_n_u16): Likewise.\n+\t(__arm_viwdupq_wb_u8): Likewise.\n+\t(__arm_viwdupq_wb_u32): Likewise.\n+\t(__arm_viwdupq_wb_u16): Likewise.\n+\t(vidupq_m): Define polymorphic variant.\n+\t(vddupq_m): Likewise.\n+\t(vidupq_u16): Likewise.\n+\t(vidupq_u32): Likewise.\n+\t(vidupq_u8): Likewise.\n+\t(vddupq_u16): Likewise.\n+\t(vddupq_u32): Likewise.\n+\t(vddupq_u8): Likewise.\n+\t(viwdupq_m): Likewise.\n+\t(viwdupq_u16): Likewise.\n+\t(viwdupq_u32): Likewise.\n+\t(viwdupq_u8): Likewise.\n+\t(vdwdupq_m): Likewise.\n+\t(vdwdupq_u16): Likewise.\n+\t(vdwdupq_u32): Likewise.\n+\t(vdwdupq_u8): Likewise.\n+\t* config/arm/arm_mve_builtins.def\n+\t(QUINOP_UNONE_UNONE_UNONE_UNONE_IMM_UNONE_QUALIFIERS): Use builtin\n+\tqualifier.\n+\t* config/arm/mve.md (mve_vidupq_n_u<mode>): Define RTL pattern.\n+\t(mve_vidupq_u<mode>_insn): Likewise.\n+\t(mve_vidupq_m_n_u<mode>): Likewise.\n+\t(mve_vidupq_m_wb_u<mode>_insn): Likewise.\n+\t(mve_vddupq_n_u<mode>): Likewise.\n+\t(mve_vddupq_u<mode>_insn): Likewise.\n+\t(mve_vddupq_m_n_u<mode>): Likewise.\n+\t(mve_vddupq_m_wb_u<mode>_insn): Likewise.\n+\t(mve_vdwdupq_n_u<mode>): Likewise.\n+\t(mve_vdwdupq_wb_u<mode>): Likewise.\n+\t(mve_vdwdupq_wb_u<mode>_insn): Likewise.\n+\t(mve_vdwdupq_m_n_u<mode>): Likewise.\n+\t(mve_vdwdupq_m_wb_u<mode>): Likewise.\n+\t(mve_vdwdupq_m_wb_u<mode>_insn): Likewise.\n+\t(mve_viwdupq_n_u<mode>): Likewise.\n+\t(mve_viwdupq_wb_u<mode>): Likewise.\n+\t(mve_viwdupq_wb_u<mode>_insn): Likewise.\n+\t(mve_viwdupq_m_n_u<mode>): Likewise.\n+\t(mve_viwdupq_m_wb_u<mode>): Likewise.\n+\t(mve_viwdupq_m_wb_u<mode>_insn): Likewise.\n+\n 2020-03-20  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n \n \t* config/arm/arm_mve.h (vreinterpretq_s16_s32): Define macro."}, {"sha": "cefc144e46d1781c8b05507ab49afe8be0fabcf3", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -711,6 +711,13 @@ arm_ldru_z_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_unsigned, qualifier_pointer, qualifier_unsigned};\n #define LDRU_Z_QUALIFIERS (arm_ldru_z_qualifiers)\n \n+static enum arm_type_qualifiers\n+arm_quinop_unone_unone_unone_unone_imm_unone_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_unsigned, qualifier_unsigned,\n+      qualifier_unsigned, qualifier_immediate, qualifier_unsigned };\n+#define QUINOP_UNONE_UNONE_UNONE_UNONE_IMM_UNONE_QUALIFIERS \\\n+  (arm_quinop_unone_unone_unone_unone_imm_unone_qualifiers)\n+\n /* End of Qualifier for MVE builtins.  */\n \n    /* void ([T element type] *, T, immediate).  */"}, {"sha": "00f2242a6e9cfdd2db15c9e545446f1f2ab7afb9", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 548, "deletions": 0, "changes": 548, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -2006,6 +2006,54 @@ typedef struct { uint8x16_t val[4]; } uint8x16x4_t;\n #define vuninitializedq_s64(void) __arm_vuninitializedq_s64(void)\n #define vuninitializedq_f16(void) __arm_vuninitializedq_f16(void)\n #define vuninitializedq_f32(void) __arm_vuninitializedq_f32(void)\n+#define vddupq_m_n_u8(__inactive, __a,  __imm, __p) __arm_vddupq_m_n_u8(__inactive, __a,  __imm, __p)\n+#define vddupq_m_n_u32(__inactive, __a,  __imm, __p) __arm_vddupq_m_n_u32(__inactive, __a,  __imm, __p)\n+#define vddupq_m_n_u16(__inactive, __a,  __imm, __p) __arm_vddupq_m_n_u16(__inactive, __a,  __imm, __p)\n+#define vddupq_m_wb_u8(__inactive,  __a,  __imm, __p) __arm_vddupq_m_wb_u8(__inactive,  __a,  __imm, __p)\n+#define vddupq_m_wb_u16(__inactive,  __a,  __imm, __p) __arm_vddupq_m_wb_u16(__inactive,  __a,  __imm, __p)\n+#define vddupq_m_wb_u32(__inactive,  __a,  __imm, __p) __arm_vddupq_m_wb_u32(__inactive,  __a,  __imm, __p)\n+#define vddupq_n_u8(__a,  __imm) __arm_vddupq_n_u8(__a,  __imm)\n+#define vddupq_n_u32(__a,  __imm) __arm_vddupq_n_u32(__a,  __imm)\n+#define vddupq_n_u16(__a,  __imm) __arm_vddupq_n_u16(__a,  __imm)\n+#define vddupq_wb_u8( __a,  __imm) __arm_vddupq_wb_u8( __a,  __imm)\n+#define vddupq_wb_u16( __a,  __imm) __arm_vddupq_wb_u16( __a,  __imm)\n+#define vddupq_wb_u32( __a,  __imm) __arm_vddupq_wb_u32( __a,  __imm)\n+#define vdwdupq_m_n_u8(__inactive, __a, __b,  __imm, __p) __arm_vdwdupq_m_n_u8(__inactive, __a, __b,  __imm, __p)\n+#define vdwdupq_m_n_u32(__inactive, __a, __b,  __imm, __p) __arm_vdwdupq_m_n_u32(__inactive, __a, __b,  __imm, __p)\n+#define vdwdupq_m_n_u16(__inactive, __a, __b,  __imm, __p) __arm_vdwdupq_m_n_u16(__inactive, __a, __b,  __imm, __p)\n+#define vdwdupq_m_wb_u8(__inactive,  __a, __b,  __imm, __p) __arm_vdwdupq_m_wb_u8(__inactive,  __a, __b,  __imm, __p)\n+#define vdwdupq_m_wb_u32(__inactive,  __a, __b,  __imm, __p) __arm_vdwdupq_m_wb_u32(__inactive,  __a, __b,  __imm, __p)\n+#define vdwdupq_m_wb_u16(__inactive,  __a, __b,  __imm, __p) __arm_vdwdupq_m_wb_u16(__inactive,  __a, __b,  __imm, __p)\n+#define vdwdupq_n_u8(__a, __b,  __imm) __arm_vdwdupq_n_u8(__a, __b,  __imm)\n+#define vdwdupq_n_u32(__a, __b,  __imm) __arm_vdwdupq_n_u32(__a, __b,  __imm)\n+#define vdwdupq_n_u16(__a, __b,  __imm) __arm_vdwdupq_n_u16(__a, __b,  __imm)\n+#define vdwdupq_wb_u8( __a, __b,  __imm) __arm_vdwdupq_wb_u8( __a, __b,  __imm)\n+#define vdwdupq_wb_u32( __a, __b,  __imm) __arm_vdwdupq_wb_u32( __a, __b,  __imm)\n+#define vdwdupq_wb_u16( __a, __b,  __imm) __arm_vdwdupq_wb_u16( __a, __b,  __imm)\n+#define vidupq_m_n_u8(__inactive, __a,  __imm, __p) __arm_vidupq_m_n_u8(__inactive, __a,  __imm, __p)\n+#define vidupq_m_n_u32(__inactive, __a,  __imm, __p) __arm_vidupq_m_n_u32(__inactive, __a,  __imm, __p)\n+#define vidupq_m_n_u16(__inactive, __a,  __imm, __p) __arm_vidupq_m_n_u16(__inactive, __a,  __imm, __p)\n+#define vidupq_m_wb_u8(__inactive,  __a,  __imm, __p) __arm_vidupq_m_wb_u8(__inactive,  __a,  __imm, __p)\n+#define vidupq_m_wb_u16(__inactive,  __a,  __imm, __p) __arm_vidupq_m_wb_u16(__inactive,  __a,  __imm, __p)\n+#define vidupq_m_wb_u32(__inactive,  __a,  __imm, __p) __arm_vidupq_m_wb_u32(__inactive,  __a,  __imm, __p)\n+#define vidupq_n_u8(__a,  __imm) __arm_vidupq_n_u8(__a,  __imm)\n+#define vidupq_n_u32(__a,  __imm) __arm_vidupq_n_u32(__a,  __imm)\n+#define vidupq_n_u16(__a,  __imm) __arm_vidupq_n_u16(__a,  __imm)\n+#define vidupq_wb_u8( __a,  __imm) __arm_vidupq_wb_u8( __a,  __imm)\n+#define vidupq_wb_u16( __a,  __imm) __arm_vidupq_wb_u16( __a,  __imm)\n+#define vidupq_wb_u32( __a,  __imm) __arm_vidupq_wb_u32( __a,  __imm)\n+#define viwdupq_m_n_u8(__inactive, __a, __b,  __imm, __p) __arm_viwdupq_m_n_u8(__inactive, __a, __b,  __imm, __p)\n+#define viwdupq_m_n_u32(__inactive, __a, __b,  __imm, __p) __arm_viwdupq_m_n_u32(__inactive, __a, __b,  __imm, __p)\n+#define viwdupq_m_n_u16(__inactive, __a, __b,  __imm, __p) __arm_viwdupq_m_n_u16(__inactive, __a, __b,  __imm, __p)\n+#define viwdupq_m_wb_u8(__inactive,  __a, __b,  __imm, __p) __arm_viwdupq_m_wb_u8(__inactive,  __a, __b,  __imm, __p)\n+#define viwdupq_m_wb_u32(__inactive,  __a, __b,  __imm, __p) __arm_viwdupq_m_wb_u32(__inactive,  __a, __b,  __imm, __p)\n+#define viwdupq_m_wb_u16(__inactive,  __a, __b,  __imm, __p) __arm_viwdupq_m_wb_u16(__inactive,  __a, __b,  __imm, __p)\n+#define viwdupq_n_u8(__a, __b,  __imm) __arm_viwdupq_n_u8(__a, __b,  __imm)\n+#define viwdupq_n_u32(__a, __b,  __imm) __arm_viwdupq_n_u32(__a, __b,  __imm)\n+#define viwdupq_n_u16(__a, __b,  __imm) __arm_viwdupq_n_u16(__a, __b,  __imm)\n+#define viwdupq_wb_u8( __a, __b,  __imm) __arm_viwdupq_wb_u8( __a, __b,  __imm)\n+#define viwdupq_wb_u32( __a, __b,  __imm) __arm_viwdupq_wb_u32( __a, __b,  __imm)\n+#define viwdupq_wb_u16( __a, __b,  __imm) __arm_viwdupq_wb_u16( __a, __b,  __imm)\n #endif\n \n __extension__ extern __inline void\n@@ -12956,6 +13004,390 @@ __arm_vreinterpretq_u8_u64 (uint64x2_t __a)\n   return (uint8x16_t)  __a;\n }\n \n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vddupq_m_n_u8 (uint8x16_t __inactive, uint32_t __a, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vddupq_m_n_uv16qi (__inactive, __a, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vddupq_m_n_u32 (uint32x4_t __inactive, uint32_t __a, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vddupq_m_n_uv4si (__inactive, __a, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vddupq_m_n_u16 (uint16x8_t __inactive, uint32_t __a, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vddupq_m_n_uv8hi (__inactive, __a, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vddupq_m_wb_u8 (uint8x16_t __inactive, uint32_t * __a, const int __imm, mve_pred16_t __p)\n+{\n+  uint8x16_t __res = __builtin_mve_vddupq_m_n_uv16qi (__inactive, * __a, __imm, __p);\n+  *__a -= __imm * 16u;\n+  return __res;\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vddupq_m_wb_u16 (uint16x8_t __inactive, uint32_t * __a, const int __imm, mve_pred16_t __p)\n+{\n+  uint16x8_t __res = __builtin_mve_vddupq_m_n_uv8hi (__inactive, *__a, __imm, __p);\n+  *__a -= __imm * 8u;\n+  return __res;\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vddupq_m_wb_u32 (uint32x4_t __inactive, uint32_t * __a, const int __imm, mve_pred16_t __p)\n+{\n+  uint32x4_t __res = __builtin_mve_vddupq_m_n_uv4si (__inactive, *__a, __imm, __p);\n+  *__a -= __imm * 4u;\n+  return __res;\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vddupq_n_u8 (uint32_t __a, const int __imm)\n+{\n+  return __builtin_mve_vddupq_n_uv16qi (__a, __imm);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vddupq_n_u32 (uint32_t __a, const int __imm)\n+{\n+  return __builtin_mve_vddupq_n_uv4si (__a, __imm);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vddupq_n_u16 (uint32_t __a, const int __imm)\n+{\n+  return __builtin_mve_vddupq_n_uv8hi (__a, __imm);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vdwdupq_m_n_u8 (uint8x16_t __inactive, uint32_t __a, uint32_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vdwdupq_m_n_uv16qi (__inactive, __a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vdwdupq_m_n_u32 (uint32x4_t __inactive, uint32_t __a, uint32_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vdwdupq_m_n_uv4si (__inactive, __a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vdwdupq_m_n_u16 (uint16x8_t __inactive, uint32_t __a, uint32_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vdwdupq_m_n_uv8hi (__inactive, __a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vdwdupq_m_wb_u8 (uint8x16_t __inactive, uint32_t * __a, uint32_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  uint8x16_t __res =  __builtin_mve_vdwdupq_m_n_uv16qi (__inactive, *__a, __b, __imm, __p);\n+  *__a = __builtin_mve_vdwdupq_m_wb_uv16qi (__inactive, *__a, __b, __imm, __p);\n+  return __res;\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vdwdupq_m_wb_u32 (uint32x4_t __inactive, uint32_t * __a, uint32_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  uint32x4_t __res =  __builtin_mve_vdwdupq_m_n_uv4si (__inactive, *__a, __b, __imm, __p);\n+  *__a = __builtin_mve_vdwdupq_m_wb_uv4si (__inactive, *__a, __b, __imm, __p);\n+  return __res;\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vdwdupq_m_wb_u16 (uint16x8_t __inactive, uint32_t * __a, uint32_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  uint16x8_t __res =  __builtin_mve_vdwdupq_m_n_uv8hi (__inactive, *__a, __b, __imm, __p);\n+  *__a = __builtin_mve_vdwdupq_m_wb_uv8hi (__inactive, *__a, __b, __imm, __p);\n+  return __res;\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vdwdupq_n_u8 (uint32_t __a, uint32_t __b, const int __imm)\n+{\n+  return __builtin_mve_vdwdupq_n_uv16qi (__a, __b, __imm);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vdwdupq_n_u32 (uint32_t __a, uint32_t __b, const int __imm)\n+{\n+  return __builtin_mve_vdwdupq_n_uv4si (__a, __b, __imm);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vdwdupq_n_u16 (uint32_t __a, uint32_t __b, const int __imm)\n+{\n+  return __builtin_mve_vdwdupq_n_uv8hi (__a, __b, __imm);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vdwdupq_wb_u8 (uint32_t * __a, uint32_t __b, const int __imm)\n+{\n+  uint8x16_t __res = __builtin_mve_vdwdupq_n_uv16qi (*__a, __b, __imm);\n+  *__a = __builtin_mve_vdwdupq_wb_uv16qi (*__a, __b, __imm);\n+  return __res;\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vdwdupq_wb_u32 (uint32_t * __a, uint32_t __b, const int __imm)\n+{\n+  uint32x4_t __res = __builtin_mve_vdwdupq_n_uv4si (*__a, __b, __imm);\n+  *__a = __builtin_mve_vdwdupq_wb_uv4si (*__a, __b, __imm);\n+  return __res;\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vdwdupq_wb_u16 (uint32_t * __a, uint32_t __b, const int __imm)\n+{\n+  uint16x8_t __res = __builtin_mve_vdwdupq_n_uv8hi (*__a, __b, __imm);\n+  *__a = __builtin_mve_vdwdupq_wb_uv8hi (*__a, __b, __imm);\n+  return __res;\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vidupq_m_n_u8 (uint8x16_t __inactive, uint32_t __a, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vidupq_m_n_uv16qi (__inactive, __a, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vidupq_m_n_u32 (uint32x4_t __inactive, uint32_t __a, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vidupq_m_n_uv4si (__inactive, __a, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vidupq_m_n_u16 (uint16x8_t __inactive, uint32_t __a, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vidupq_m_n_uv8hi (__inactive, __a, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vidupq_n_u8 (uint32_t __a, const int __imm)\n+{\n+  return __builtin_mve_vidupq_n_uv16qi (__a, __imm);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vidupq_m_wb_u8 (uint8x16_t __inactive, uint32_t * __a, const int __imm, mve_pred16_t __p)\n+{\n+  uint8x16_t __res = __builtin_mve_vidupq_m_n_uv16qi (__inactive, *__a, __imm, __p);\n+  *__a += __imm * 16u;\n+  return __res;\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vidupq_m_wb_u16 (uint16x8_t __inactive, uint32_t * __a, const int __imm, mve_pred16_t __p)\n+{\n+  uint16x8_t __res = __builtin_mve_vidupq_m_n_uv8hi (__inactive, *__a, __imm, __p);\n+  *__a += __imm * 8u;\n+  return __res;\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vidupq_m_wb_u32 (uint32x4_t __inactive, uint32_t * __a, const int __imm, mve_pred16_t __p)\n+{\n+  uint32x4_t __res = __builtin_mve_vidupq_m_n_uv4si (__inactive, *__a, __imm, __p);\n+  *__a += __imm * 4u;\n+  return __res;\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vidupq_n_u32 (uint32_t __a, const int __imm)\n+{\n+  return __builtin_mve_vidupq_n_uv4si (__a, __imm);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vidupq_n_u16 (uint32_t __a, const int __imm)\n+{\n+  return __builtin_mve_vidupq_n_uv8hi (__a, __imm);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vidupq_wb_u8 (uint32_t * __a, const int __imm)\n+{\n+  uint8x16_t __res = __builtin_mve_vidupq_n_uv16qi (*__a, __imm);\n+  *__a += __imm * 16u;\n+  return __res;\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vidupq_wb_u16 (uint32_t * __a, const int __imm)\n+{\n+  uint16x8_t __res = __builtin_mve_vidupq_n_uv8hi (*__a, __imm);\n+  *__a += __imm * 8u;\n+  return __res;\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vidupq_wb_u32 (uint32_t * __a, const int __imm)\n+{\n+  uint32x4_t __res = __builtin_mve_vidupq_n_uv4si (*__a, __imm);\n+  *__a += __imm * 4u;\n+  return __res;\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vddupq_wb_u8 (uint32_t * __a, const int __imm)\n+{\n+  uint8x16_t __res = __builtin_mve_vddupq_n_uv16qi (*__a, __imm);\n+  *__a -= __imm * 16u;\n+  return __res;\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vddupq_wb_u16 (uint32_t * __a, const int __imm)\n+{\n+  uint16x8_t __res = __builtin_mve_vddupq_n_uv8hi (*__a, __imm);\n+  *__a -= __imm * 8u;\n+  return __res;\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vddupq_wb_u32 (uint32_t * __a, const int __imm)\n+{\n+  uint32x4_t __res = __builtin_mve_vddupq_n_uv4si (*__a, __imm);\n+  *__a -= __imm * 4u;\n+  return __res;\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_viwdupq_m_n_u8 (uint8x16_t __inactive, uint32_t __a, uint32_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_viwdupq_m_n_uv16qi (__inactive, __a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_viwdupq_m_n_u32 (uint32x4_t __inactive, uint32_t __a, uint32_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_viwdupq_m_n_uv4si (__inactive, __a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_viwdupq_m_n_u16 (uint16x8_t __inactive, uint32_t __a, uint32_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_viwdupq_m_n_uv8hi (__inactive, __a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_viwdupq_m_wb_u8 (uint8x16_t __inactive, uint32_t * __a, uint32_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  uint8x16_t __res = __builtin_mve_viwdupq_m_n_uv16qi (__inactive, *__a, __b, __imm, __p);\n+  *__a =  __builtin_mve_viwdupq_m_wb_uv16qi (__inactive, *__a, __b, __imm, __p);\n+  return __res;\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_viwdupq_m_wb_u32 (uint32x4_t __inactive, uint32_t * __a, uint32_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  uint32x4_t __res = __builtin_mve_viwdupq_m_n_uv4si (__inactive, *__a, __b, __imm, __p);\n+  *__a =  __builtin_mve_viwdupq_m_wb_uv4si (__inactive, *__a, __b, __imm, __p);\n+  return __res;\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_viwdupq_m_wb_u16 (uint16x8_t __inactive, uint32_t * __a, uint32_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  uint16x8_t __res = __builtin_mve_viwdupq_m_n_uv8hi (__inactive, *__a, __b, __imm, __p);\n+  *__a =  __builtin_mve_viwdupq_m_wb_uv8hi (__inactive, *__a, __b, __imm, __p);\n+  return __res;\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_viwdupq_n_u8 (uint32_t __a, uint32_t __b, const int __imm)\n+{\n+  return __builtin_mve_viwdupq_n_uv16qi (__a, __b, __imm);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_viwdupq_n_u32 (uint32_t __a, uint32_t __b, const int __imm)\n+{\n+  return __builtin_mve_viwdupq_n_uv4si (__a, __b, __imm);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_viwdupq_n_u16 (uint32_t __a, uint32_t __b, const int __imm)\n+{\n+  return __builtin_mve_viwdupq_n_uv8hi (__a, __b, __imm);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_viwdupq_wb_u8 (uint32_t * __a, uint32_t __b, const int __imm)\n+{\n+  uint8x16_t __res = __builtin_mve_viwdupq_n_uv16qi (*__a, __b, __imm);\n+  *__a = __builtin_mve_viwdupq_wb_uv16qi (*__a, __b, __imm);\n+  return __res;\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_viwdupq_wb_u32 (uint32_t * __a, uint32_t __b, const int __imm)\n+{\n+  uint32x4_t __res = __builtin_mve_viwdupq_n_uv4si (*__a, __b, __imm);\n+  *__a = __builtin_mve_viwdupq_wb_uv4si (*__a, __b, __imm);\n+  return __res;\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_viwdupq_wb_u16 (uint32_t * __a, uint32_t __b, const int __imm)\n+{\n+  uint16x8_t __res = __builtin_mve_viwdupq_n_uv8hi (*__a, __b, __imm);\n+  *__a = __builtin_mve_viwdupq_wb_uv8hi (*__a, __b, __imm);\n+  return __res;\n+}\n+\n #if (__ARM_FEATURE_MVE & 2) /* MVE Floating point.  */\n \n __extension__ extern __inline void\n@@ -21764,6 +22196,122 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_uint8_t_const_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrbq_gather_offset_u16 (__ARM_mve_coerce(__p0, uint8_t const *), __ARM_mve_coerce(__p1, uint16x8_t)), \\\n   int (*)[__ARM_mve_type_uint8_t_const_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrbq_gather_offset_u32 (__ARM_mve_coerce(__p0, uint8_t const *), __ARM_mve_coerce(__p1, uint32x4_t)));})\n \n+#define vidupq_m(p0,p1,p2,p3) __arm_vidupq_m(p0,p1,p2,p3)\n+#define __arm_vidupq_m(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+ __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+ int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint32_t]: __arm_vidupq_m_n_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint32_t), p2, p3), \\\n+ int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint32_t]: __arm_vidupq_m_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint32_t), p2, p3), \\\n+ int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32_t]: __arm_vidupq_m_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32_t), p2, p3), \\\n+ int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint32_t_ptr]: __arm_vidupq_m_wb_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint32_t *), p2, p3), \\\n+ int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint32_t_ptr]: __arm_vidupq_m_wb_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint32_t *), p2, p3), \\\n+ int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32_t_ptr]: __arm_vidupq_m_wb_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32_t *), p2, p3));})\n+\n+#define vddupq_m(p0,p1,p2,p3) __arm_vddupq_m(p0,p1,p2,p3)\n+#define __arm_vddupq_m(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+ __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+ int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint32_t]: __arm_vddupq_m_n_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint32_t), p2, p3), \\\n+ int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint32_t]: __arm_vddupq_m_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint32_t), p2, p3), \\\n+ int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32_t]: __arm_vddupq_m_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32_t), p2, p3), \\\n+ int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint32_t_ptr]: __arm_vddupq_m_wb_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint32_t *), p2, p3), \\\n+ int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint32_t_ptr]: __arm_vddupq_m_wb_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint32_t *), p2, p3), \\\n+ int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32_t_ptr]: __arm_vddupq_m_wb_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32_t *), p2, p3));})\n+\n+#define vidupq_u16(p0,p1) __arm_vidupq_u16(p0,p1)\n+#define __arm_vidupq_u16(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_uint32_t]: __arm_vidupq_n_u16 (__ARM_mve_coerce(__p0, uint32_t), p1), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_vidupq_wb_u16 (__ARM_mve_coerce(__p0, uint32_t *), p1));})\n+\n+#define vidupq_u32(p0,p1) __arm_vidupq_u32(p0,p1)\n+#define __arm_vidupq_u32(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_uint32_t]: __arm_vidupq_n_u32 (__ARM_mve_coerce(__p0, uint32_t), p1), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_vidupq_wb_u32 (__ARM_mve_coerce(__p0, uint32_t *), p1));})\n+\n+#define vidupq_u8(p0,p1) __arm_vidupq_u8(p0,p1)\n+#define __arm_vidupq_u8(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_uint32_t]: __arm_vidupq_n_u8 (__ARM_mve_coerce(__p0, uint32_t), p1), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_vidupq_wb_u8 (__ARM_mve_coerce(__p0, uint32_t *), p1));})\n+\n+#define vddupq_u16(p0,p1) __arm_vddupq_u16(p0,p1)\n+#define __arm_vddupq_u16(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_uint32_t]: __arm_vddupq_n_u16 (__ARM_mve_coerce(__p0, uint32_t), p1), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_vddupq_wb_u16 (__ARM_mve_coerce(__p0, uint32_t *), p1));})\n+\n+#define vddupq_u32(p0,p1) __arm_vddupq_u32(p0,p1)\n+#define __arm_vddupq_u32(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_uint32_t]: __arm_vddupq_n_u32 (__ARM_mve_coerce(__p0, uint32_t), p1), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_vddupq_wb_u32 (__ARM_mve_coerce(__p0, uint32_t *), p1));})\n+\n+#define vddupq_u8(p0,p1) __arm_vddupq_u8(p0,p1)\n+#define __arm_vddupq_u8(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_uint32_t]: __arm_vddupq_n_u8 (__ARM_mve_coerce(__p0, uint32_t), p1), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_vddupq_wb_u8 (__ARM_mve_coerce(__p0, uint32_t *), p1));})\n+\n+#define viwdupq_m(p0,p1,p2,p3,p4) __arm_viwdupq_m(p0,p1,p2,p3,p4)\n+#define __arm_viwdupq_m(p0,p1,p2,p3,p4) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint32_t]: __arm_viwdupq_m_n_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint32_t), p2, p3, p4), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint32_t]: __arm_viwdupq_m_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint32_t), p2, p3, p4), \\\n+  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32_t]: __arm_viwdupq_m_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32_t), p2, p3, p4), \\\n+  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint32_t_ptr]: __arm_viwdupq_m_wb_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint32_t *), p2, p3, p4), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint32_t_ptr]: __arm_viwdupq_m_wb_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint32_t *), p2, p3, p4), \\\n+  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32_t_ptr]: __arm_viwdupq_m_wb_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32_t *), p2, p3, p4));})\n+\n+#define viwdupq_u16(p0,p1,p2) __arm_viwdupq_u16(p0,p1,p2)\n+#define __arm_viwdupq_u16(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_uint32_t]: __arm_viwdupq_n_u16 (__ARM_mve_coerce(__p0, uint32_t), p1, p2), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_viwdupq_wb_u16 (__ARM_mve_coerce(__p0, uint32_t *), p1, p2));})\n+\n+#define viwdupq_u32(p0,p1,p2) __arm_viwdupq_u32(p0,p1,p2)\n+#define __arm_viwdupq_u32(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_uint32_t]: __arm_viwdupq_n_u32 (__ARM_mve_coerce(__p0, uint32_t), p1, p2), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_viwdupq_wb_u32 (__ARM_mve_coerce(__p0, uint32_t *), p1, p2));})\n+\n+#define viwdupq_u8(p0,p1,p2) __arm_viwdupq_u8(p0,p1,p2)\n+#define __arm_viwdupq_u8(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_uint32_t]: __arm_viwdupq_n_u8 (__ARM_mve_coerce(__p0, uint32_t), p1, p2), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_viwdupq_wb_u8 (__ARM_mve_coerce(__p0, uint32_t *), p1, p2));})\n+\n+#define vdwdupq_m(p0,p1,p2,p3,p4) __arm_vdwdupq_m(p0,p1,p2,p3,p4)\n+#define __arm_vdwdupq_m(p0,p1,p2,p3,p4) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint32_t]: __arm_vdwdupq_m_n_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint32_t), p2, p3, p4), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint32_t]: __arm_vdwdupq_m_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint32_t), p2, p3, p4), \\\n+  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32_t]: __arm_vdwdupq_m_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32_t), p2, p3, p4), \\\n+  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint32_t_ptr]: __arm_vdwdupq_m_wb_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint32_t *), p2, p3, p4), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint32_t_ptr]: __arm_vdwdupq_m_wb_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint32_t *), p2, p3, p4), \\\n+  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32_t_ptr]: __arm_vdwdupq_m_wb_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32_t *), p2, p3, p4));})\n+\n+#define vdwdupq_u16(p0,p1,p2) __arm_vdwdupq_u16(p0,p1,p2)\n+#define __arm_vdwdupq_u16(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_uint32_t]: __arm_vdwdupq_n_u16 (__ARM_mve_coerce(__p0, uint32_t), p1, p2), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_vdwdupq_wb_u16 (__ARM_mve_coerce(__p0, uint32_t *), p1, p2));})\n+\n+#define vdwdupq_u32(p0,p1,p2) __arm_vdwdupq_u32(p0,p1,p2)\n+#define __arm_vdwdupq_u32(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_uint32_t]: __arm_vdwdupq_n_u32 (__ARM_mve_coerce(__p0, uint32_t), p1, p2), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_vdwdupq_wb_u32 (__ARM_mve_coerce(__p0, uint32_t *), p1, p2));})\n+\n+#define vdwdupq_u8(p0,p1,p2) __arm_vdwdupq_u8(p0,p1,p2)\n+#define __arm_vdwdupq_u8(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_uint32_t]: __arm_vdwdupq_n_u8 (__ARM_mve_coerce(__p0, uint32_t), p1, p2), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_vdwdupq_wb_u8 (__ARM_mve_coerce(__p0, uint32_t *), p1, p2));})\n+\n #ifdef __cplusplus\n }\n #endif"}, {"sha": "2ed7886a6d08f896c840693430112f12fc3b4ab0", "filename": "gcc/config/arm/arm_mve_builtins.def", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -815,3 +815,15 @@ VAR1 (STRSU_P, vstrdq_scatter_offset_p_u, v2di)\n VAR1 (STRSU_P, vstrdq_scatter_shifted_offset_p_u, v2di)\n VAR1 (STRSU_P, vstrwq_scatter_offset_p_u, v4si)\n VAR1 (STRSU_P, vstrwq_scatter_shifted_offset_p_u, v4si)\n+VAR3 (TERNOP_UNONE_UNONE_UNONE_IMM, viwdupq_wb_u, v16qi, v4si, v8hi)\n+VAR3 (TERNOP_UNONE_UNONE_UNONE_IMM, vdwdupq_wb_u, v16qi, v4si, v8hi)\n+VAR3 (QUINOP_UNONE_UNONE_UNONE_UNONE_IMM_UNONE, viwdupq_m_wb_u, v16qi, v8hi, v4si)\n+VAR3 (QUINOP_UNONE_UNONE_UNONE_UNONE_IMM_UNONE, vdwdupq_m_wb_u, v16qi, v8hi, v4si)\n+VAR3 (QUINOP_UNONE_UNONE_UNONE_UNONE_IMM_UNONE, viwdupq_m_n_u, v16qi, v8hi, v4si)\n+VAR3 (QUINOP_UNONE_UNONE_UNONE_UNONE_IMM_UNONE, vdwdupq_m_n_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_IMM, vddupq_n_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_IMM, vidupq_n_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_IMM_UNONE, vddupq_m_n_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_IMM_UNONE, vidupq_m_n_u, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_UNONE_UNONE_UNONE_IMM, vdwdupq_n_u, v16qi, v4si, v8hi)\n+VAR3 (TERNOP_UNONE_UNONE_UNONE_IMM, viwdupq_n_u, v16qi, v4si, v8hi)"}, {"sha": "b2702f5c5278f658ba0ea2a389479b0b90b5b5e3", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 372, "deletions": 1, "changes": 373, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -207,7 +207,8 @@\n \t\t\t VSTRDQSB_U VSTRDQSO_S VSTRDQSO_U VSTRDQSSO_S\n \t\t\t VSTRDQSSO_U VSTRWQSO_S VSTRWQSO_U VSTRWQSSO_S\n \t\t\t VSTRWQSSO_U VSTRHQSO_F VSTRHQSSO_F VSTRWQSB_F\n-\t\t\t VSTRWQSO_F VSTRWQSSO_F])\n+\t\t\t VSTRWQSO_F VSTRWQSSO_F VDDUPQ VDDUPQ_M VDWDUPQ\n+\t\t\t VDWDUPQ_M VIDUPQ VIDUPQ_M VIWDUPQ VIWDUPQ_M])\n \n (define_mode_attr MVE_CNVT [(V8HI \"V8HF\") (V4SI \"V4SF\") (V8HF \"V8HI\")\n \t\t\t    (V4SF \"V4SI\")])\n@@ -9671,3 +9672,373 @@\n   \"vadd.f%#<V_sz_elem> %q0, %q1, %q2\"\n   [(set_attr \"type\" \"mve_move\")\n ])\n+\n+;;\n+;; [vidupq_n_u])\n+;;\n+(define_expand \"mve_vidupq_n_u<mode>\"\n+ [(match_operand:MVE_2 0 \"s_register_operand\")\n+  (match_operand:SI 1 \"s_register_operand\")\n+  (match_operand:SI 2 \"mve_imm_selective_upto_8\")]\n+ \"TARGET_HAVE_MVE\"\n+{\n+  rtx temp = gen_reg_rtx (SImode);\n+  emit_move_insn (temp, operands[1]);\n+  rtx inc = gen_int_mode (INTVAL(operands[2]) * <MVE_LANES>, SImode);\n+  emit_insn (gen_mve_vidupq_u<mode>_insn (operands[0], temp, operands[1],\n+\t\t\t\t\t  operands[2], inc));\n+  DONE;\n+})\n+\n+;;\n+;; [vidupq_u_insn])\n+;;\n+(define_insn \"mve_vidupq_u<mode>_insn\"\n+ [(set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+       (unspec:MVE_2 [(match_operand:SI 2 \"s_register_operand\" \"1\")\n+\t\t      (match_operand:SI 3 \"mve_imm_selective_upto_8\" \"Rg\")]\n+\t VIDUPQ))\n+  (set (match_operand:SI 1 \"s_register_operand\" \"=e\")\n+       (plus:SI (match_dup 2)\n+\t\t(match_operand:SI 4 \"immediate_operand\" \"i\")))]\n+ \"TARGET_HAVE_MVE\"\n+ \"vidup.u%#<V_sz_elem>\\t%q0, %1, %3\")\n+\n+;;\n+;; [vidupq_m_n_u])\n+;;\n+(define_expand \"mve_vidupq_m_n_u<mode>\"\n+  [(match_operand:MVE_2 0 \"s_register_operand\")\n+   (match_operand:MVE_2 1 \"s_register_operand\")\n+   (match_operand:SI 2 \"s_register_operand\")\n+   (match_operand:SI 3 \"mve_imm_selective_upto_8\")\n+   (match_operand:HI 4 \"vpr_register_operand\")]\n+  \"TARGET_HAVE_MVE\"\n+{\n+  rtx temp = gen_reg_rtx (SImode);\n+  emit_move_insn (temp, operands[2]);\n+  rtx inc = gen_int_mode (INTVAL(operands[3]) * <MVE_LANES>, SImode);\n+  emit_insn (gen_mve_vidupq_m_wb_u<mode>_insn(operands[0], operands[1], temp,\n+\t\t\t\t\t     operands[2], operands[3],\n+\t\t\t\t\t     operands[4], inc));\n+  DONE;\n+})\n+\n+;;\n+;; [vidupq_m_wb_u_insn])\n+;;\n+(define_insn \"mve_vidupq_m_wb_u<mode>_insn\"\n+ [(set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+       (unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t      (match_operand:SI 3 \"s_register_operand\" \"2\")\n+\t\t      (match_operand:SI 4 \"mve_imm_selective_upto_8\" \"Rg\")\n+\t\t      (match_operand:HI 5 \"vpr_register_operand\" \"Up\")]\n+\tVIDUPQ_M))\n+  (set (match_operand:SI 2 \"s_register_operand\" \"=e\")\n+       (plus:SI (match_dup 3)\n+\t\t(match_operand:SI 6 \"immediate_operand\" \"i\")))]\n+ \"TARGET_HAVE_MVE\"\n+ \"vpst\\;\\tvidupt.u%#<V_sz_elem>\\t%q0, %2, %4\"\n+ [(set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vddupq_n_u])\n+;;\n+(define_expand \"mve_vddupq_n_u<mode>\"\n+ [(match_operand:MVE_2 0 \"s_register_operand\")\n+  (match_operand:SI 1 \"s_register_operand\")\n+  (match_operand:SI 2 \"mve_imm_selective_upto_8\")]\n+ \"TARGET_HAVE_MVE\"\n+{\n+  rtx temp = gen_reg_rtx (SImode);\n+  emit_move_insn (temp, operands[1]);\n+  rtx inc = gen_int_mode (INTVAL(operands[2]) * <MVE_LANES>, SImode);\n+  emit_insn (gen_mve_vddupq_u<mode>_insn (operands[0], temp, operands[1],\n+\t\t\t\t\t  operands[2], inc));\n+  DONE;\n+})\n+\n+;;\n+;; [vddupq_u_insn])\n+;;\n+(define_insn \"mve_vddupq_u<mode>_insn\"\n+ [(set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+       (unspec:MVE_2 [(match_operand:SI 2 \"s_register_operand\" \"1\")\n+\t\t      (match_operand:SI 3 \"immediate_operand\" \"i\")]\n+\tVDDUPQ))\n+  (set (match_operand:SI 1 \"s_register_operand\" \"=e\")\n+       (minus:SI (match_dup 2)\n+\t\t (match_operand:SI 4 \"immediate_operand\" \"i\")))]\n+ \"TARGET_HAVE_MVE\"\n+ \"vddup.u%#<V_sz_elem>  %q0, %1, %3\")\n+\n+;;\n+;; [vddupq_m_n_u])\n+;;\n+(define_expand \"mve_vddupq_m_n_u<mode>\"\n+  [(match_operand:MVE_2 0 \"s_register_operand\")\n+   (match_operand:MVE_2 1 \"s_register_operand\")\n+   (match_operand:SI 2 \"s_register_operand\")\n+   (match_operand:SI 3 \"mve_imm_selective_upto_8\")\n+   (match_operand:HI 4 \"vpr_register_operand\")]\n+  \"TARGET_HAVE_MVE\"\n+{\n+  rtx temp = gen_reg_rtx (SImode);\n+  emit_move_insn (temp, operands[2]);\n+  rtx inc = gen_int_mode (INTVAL(operands[3]) * <MVE_LANES>, SImode);\n+  emit_insn (gen_mve_vddupq_m_wb_u<mode>_insn(operands[0], operands[1], temp,\n+\t\t\t\t\t     operands[2], operands[3],\n+\t\t\t\t\t     operands[4], inc));\n+  DONE;\n+})\n+\n+;;\n+;; [vddupq_m_wb_u_insn])\n+;;\n+(define_insn \"mve_vddupq_m_wb_u<mode>_insn\"\n+ [(set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+       (unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t      (match_operand:SI 3 \"s_register_operand\" \"2\")\n+\t\t      (match_operand:SI 4 \"mve_imm_selective_upto_8\" \"Rg\")\n+\t\t      (match_operand:HI 5 \"vpr_register_operand\" \"Up\")]\n+\tVDDUPQ_M))\n+  (set (match_operand:SI 2 \"s_register_operand\" \"=e\")\n+       (minus:SI (match_dup 3)\n+\t\t (match_operand:SI 6 \"immediate_operand\" \"i\")))]\n+ \"TARGET_HAVE_MVE\"\n+ \"vpst\\;\\tvddupt.u%#<V_sz_elem>\\t%q0, %2, %4\"\n+ [(set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vdwdupq_n_u])\n+;;\n+(define_expand \"mve_vdwdupq_n_u<mode>\"\n+ [(match_operand:MVE_2 0 \"s_register_operand\")\n+  (match_operand:SI 1 \"s_register_operand\")\n+  (match_operand:SI 2 \"s_register_operand\")\n+  (match_operand:SI 3 \"mve_imm_selective_upto_8\")]\n+ \"TARGET_HAVE_MVE\"\n+{\n+  rtx ignore_wb = gen_reg_rtx (SImode);\n+  emit_insn (gen_mve_vdwdupq_wb_u<mode>_insn (operands[0], ignore_wb,\n+\t\t\t\t\t      operands[1], operands[2],\n+\t\t\t\t\t      operands[3]));\n+  DONE;\n+})\n+\n+;;\n+;; [vdwdupq_wb_u])\n+;;\n+(define_expand \"mve_vdwdupq_wb_u<mode>\"\n+ [(match_operand:SI 0 \"s_register_operand\")\n+  (match_operand:SI 1 \"s_register_operand\")\n+  (match_operand:SI 2 \"s_register_operand\")\n+  (match_operand:SI 3 \"mve_imm_selective_upto_8\")\n+  (unspec:MVE_2 [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+ \"TARGET_HAVE_MVE\"\n+{\n+  rtx ignore_vec = gen_reg_rtx (<MODE>mode);\n+  emit_insn (gen_mve_vdwdupq_wb_u<mode>_insn (ignore_vec, operands[0],\n+\t\t\t\t\t      operands[1], operands[2],\n+\t\t\t\t\t      operands[3]));\n+  DONE;\n+})\n+\n+;;\n+;; [vdwdupq_wb_u_insn])\n+;;\n+(define_insn \"mve_vdwdupq_wb_u<mode>_insn\"\n+  [(set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:SI 2 \"s_register_operand\" \"1\")\n+\t\t       (match_operand:SI 3 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:SI 4 \"mve_imm_selective_upto_8\" \"Rg\")]\n+\t VDWDUPQ))\n+   (set (match_operand:SI 1 \"s_register_operand\" \"=e\")\n+\t(unspec:SI [(match_dup 2)\n+\t\t    (match_dup 3)\n+\t\t    (match_dup 4)]\n+\t VDWDUPQ))]\n+  \"TARGET_HAVE_MVE\"\n+  \"vdwdup.u%#<V_sz_elem>\\t%q0, %2, %3, %4\"\n+)\n+\n+;;\n+;; [vdwdupq_m_n_u])\n+;;\n+(define_expand \"mve_vdwdupq_m_n_u<mode>\"\n+ [(match_operand:MVE_2 0 \"s_register_operand\")\n+  (match_operand:MVE_2 1 \"s_register_operand\")\n+  (match_operand:SI 2 \"s_register_operand\")\n+  (match_operand:SI 3 \"s_register_operand\")\n+  (match_operand:SI 4 \"mve_imm_selective_upto_8\")\n+  (match_operand:HI 5 \"vpr_register_operand\")]\n+ \"TARGET_HAVE_MVE\"\n+{\n+  rtx ignore_wb = gen_reg_rtx (SImode);\n+  emit_insn (gen_mve_vdwdupq_m_wb_u<mode>_insn (operands[0], ignore_wb,\n+\t\t\t\t\t\toperands[1], operands[2],\n+\t\t\t\t\t\toperands[3], operands[4],\n+\t\t\t\t\t\toperands[5]));\n+  DONE;\n+})\n+\n+;;\n+;; [vdwdupq_m_wb_u])\n+;;\n+(define_expand \"mve_vdwdupq_m_wb_u<mode>\"\n+ [(match_operand:SI 0 \"s_register_operand\")\n+  (match_operand:MVE_2 1 \"s_register_operand\")\n+  (match_operand:SI 2 \"s_register_operand\")\n+  (match_operand:SI 3 \"s_register_operand\")\n+  (match_operand:SI 4 \"mve_imm_selective_upto_8\")\n+  (match_operand:HI 5 \"vpr_register_operand\")]\n+ \"TARGET_HAVE_MVE\"\n+{\n+  rtx ignore_vec = gen_reg_rtx (<MODE>mode);\n+  emit_insn (gen_mve_vdwdupq_m_wb_u<mode>_insn (ignore_vec, operands[0],\n+\t\t\t\t\t\toperands[1], operands[2],\n+\t\t\t\t\t\toperands[3], operands[4],\n+\t\t\t\t\t\toperands[5]));\n+  DONE;\n+})\n+\n+;;\n+;; [vdwdupq_m_wb_u_insn])\n+;;\n+(define_insn \"mve_vdwdupq_m_wb_u<mode>_insn\"\n+  [(set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 3 \"s_register_operand\" \"1\")\n+\t\t       (match_operand:SI 4 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:SI 5 \"mve_imm_selective_upto_8\" \"Rg\")\n+\t\t       (match_operand:HI 6 \"vpr_register_operand\" \"Up\")]\n+\t VDWDUPQ_M))\n+   (set (match_operand:SI 1 \"s_register_operand\" \"=e\")\n+\t(unspec:SI [(match_dup 2)\n+\t\t    (match_dup 3)\n+\t\t    (match_dup 4)\n+\t\t    (match_dup 5)\n+\t\t    (match_dup 6)]\n+\t VDWDUPQ_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;\\tvdwdupt.u%#<V_sz_elem>\\t%q2, %3, %4, %5\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [viwdupq_n_u])\n+;;\n+(define_expand \"mve_viwdupq_n_u<mode>\"\n+ [(match_operand:MVE_2 0 \"s_register_operand\")\n+  (match_operand:SI 1 \"s_register_operand\")\n+  (match_operand:SI 2 \"s_register_operand\")\n+  (match_operand:SI 3 \"mve_imm_selective_upto_8\")]\n+ \"TARGET_HAVE_MVE\"\n+{\n+  rtx ignore_wb = gen_reg_rtx (SImode);\n+  emit_insn (gen_mve_viwdupq_wb_u<mode>_insn (operands[0], ignore_wb,\n+\t\t\t\t\t      operands[1], operands[2],\n+\t\t\t\t\t      operands[3]));\n+  DONE;\n+})\n+\n+;;\n+;; [viwdupq_wb_u])\n+;;\n+(define_expand \"mve_viwdupq_wb_u<mode>\"\n+ [(match_operand:SI 0 \"s_register_operand\")\n+  (match_operand:SI 1 \"s_register_operand\")\n+  (match_operand:SI 2 \"s_register_operand\")\n+  (match_operand:SI 3 \"mve_imm_selective_upto_8\")\n+  (unspec:MVE_2 [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+ \"TARGET_HAVE_MVE\"\n+{\n+  rtx ignore_vec = gen_reg_rtx (<MODE>mode);\n+  emit_insn (gen_mve_viwdupq_wb_u<mode>_insn (ignore_vec, operands[0],\n+\t\t\t\t\t      operands[1], operands[2],\n+\t\t\t\t\t      operands[3]));\n+  DONE;\n+})\n+\n+;;\n+;; [viwdupq_wb_u_insn])\n+;;\n+(define_insn \"mve_viwdupq_wb_u<mode>_insn\"\n+  [(set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:SI 2 \"s_register_operand\" \"1\")\n+\t\t       (match_operand:SI 3 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:SI 4 \"mve_imm_selective_upto_8\" \"Rg\")]\n+\t VIWDUPQ))\n+   (set (match_operand:SI 1 \"s_register_operand\" \"=e\")\n+\t(unspec:SI [(match_dup 2)\n+\t\t    (match_dup 3)\n+\t\t    (match_dup 4)]\n+\t VIWDUPQ))]\n+  \"TARGET_HAVE_MVE\"\n+  \"viwdup.u%#<V_sz_elem>\\t%q0, %2, %3, %4\"\n+)\n+\n+;;\n+;; [viwdupq_m_n_u])\n+;;\n+(define_expand \"mve_viwdupq_m_n_u<mode>\"\n+ [(match_operand:MVE_2 0 \"s_register_operand\")\n+  (match_operand:MVE_2 1 \"s_register_operand\")\n+  (match_operand:SI 2 \"s_register_operand\")\n+  (match_operand:SI 3 \"s_register_operand\")\n+  (match_operand:SI 4 \"mve_imm_selective_upto_8\")\n+  (match_operand:HI 5 \"vpr_register_operand\")]\n+ \"TARGET_HAVE_MVE\"\n+{\n+  rtx ignore_wb = gen_reg_rtx (SImode);\n+  emit_insn (gen_mve_viwdupq_m_wb_u<mode>_insn (operands[0], ignore_wb,\n+\t\t\t\t\t\toperands[1], operands[2],\n+\t\t\t\t\t\toperands[3], operands[4],\n+\t\t\t\t\t\toperands[5]));\n+  DONE;\n+})\n+\n+;;\n+;; [viwdupq_m_wb_u])\n+;;\n+(define_expand \"mve_viwdupq_m_wb_u<mode>\"\n+ [(match_operand:SI 0 \"s_register_operand\")\n+  (match_operand:MVE_2 1 \"s_register_operand\")\n+  (match_operand:SI 2 \"s_register_operand\")\n+  (match_operand:SI 3 \"s_register_operand\")\n+  (match_operand:SI 4 \"mve_imm_selective_upto_8\")\n+  (match_operand:HI 5 \"vpr_register_operand\")]\n+ \"TARGET_HAVE_MVE\"\n+{\n+  rtx ignore_vec = gen_reg_rtx (<MODE>mode);\n+  emit_insn (gen_mve_viwdupq_m_wb_u<mode>_insn (ignore_vec, operands[0],\n+\t\t\t\t\t\toperands[1], operands[2],\n+\t\t\t\t\t\toperands[3], operands[4],\n+\t\t\t\t\t\toperands[5]));\n+  DONE;\n+})\n+\n+;;\n+;; [viwdupq_m_wb_u_insn])\n+;;\n+(define_insn \"mve_viwdupq_m_wb_u<mode>_insn\"\n+  [(set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 3 \"s_register_operand\" \"1\")\n+\t\t       (match_operand:SI 4 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:SI 5 \"mve_imm_selective_upto_8\" \"Rg\")\n+\t\t       (match_operand:HI 6 \"vpr_register_operand\" \"Up\")]\n+\t VIWDUPQ_M))\n+   (set (match_operand:SI 1 \"s_register_operand\" \"=e\")\n+\t(unspec:SI [(match_dup 2)\n+\t\t    (match_dup 3)\n+\t\t    (match_dup 4)\n+\t\t    (match_dup 5)\n+\t\t    (match_dup 6)]\n+\t VIWDUPQ_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;\\tviwdupt.u%#<V_sz_elem>\\t%q2, %3, %4, %5\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])"}, {"sha": "45068497186d7360707d8349a4cf4b33d97abee7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -1,3 +1,56 @@\n+2020-03-20  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+            Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vddupq_m_n_u16.c: New test.\n+\t* gcc.target/arm/mve/intrinsics/vddupq_m_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vddupq_m_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vddupq_m_wb_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vddupq_m_wb_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vddupq_m_wb_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vddupq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vddupq_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vddupq_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vddupq_wb_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vddupq_wb_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vddupq_wb_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vdwdupq_m_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vdwdupq_m_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vdwdupq_m_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vdwdupq_m_wb_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vdwdupq_m_wb_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vdwdupq_m_wb_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vdwdupq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vdwdupq_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vdwdupq_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vdwdupq_wb_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vdwdupq_wb_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vdwdupq_wb_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vidupq_m_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vidupq_m_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vidupq_m_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vidupq_m_wb_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vidupq_m_wb_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vidupq_m_wb_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vidupq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vidupq_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vidupq_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vidupq_wb_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vidupq_wb_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vidupq_wb_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/viwdupq_m_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/viwdupq_m_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/viwdupq_m_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/viwdupq_m_wb_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/viwdupq_m_wb_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/viwdupq_m_wb_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/viwdupq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/viwdupq_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/viwdupq_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/viwdupq_wb_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/viwdupq_wb_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/viwdupq_wb_u8.c: Likewise.\n+\n 2020-03-20  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n \n \t* gcc.target/arm/mve/intrinsics/vuninitializedq_float.c: New test."}, {"sha": "ba875c61ee8d14e9623e1c81af20734da38191dd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vddupq_m_n_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_m_n_u16.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint32_t a, mve_pred16_t p)\n+{\n+  return vddupq_m_n_u16 (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vddupt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint32_t a, mve_pred16_t p)\n+{\n+  return vddupq_m (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vddupt.u16\"  }  } */"}, {"sha": "618a5e2f7f1e0d3dd2b8d23ca245b55c47b7d161", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vddupq_m_n_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_m_n_u32.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32_t a, mve_pred16_t p)\n+{\n+  return vddupq_m_n_u32 (inactive, a, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vddupt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32_t a, mve_pred16_t p)\n+{\n+  return vddupq_m (inactive, a, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vddupt.u32\"  }  } */"}, {"sha": "2ee01c3c4171ea81f738a97fbd991bf33dc51fd5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vddupq_m_n_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_m_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_m_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_m_n_u8.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint32_t a, mve_pred16_t p)\n+{\n+  return vddupq_m_n_u8 (inactive, a, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vddupt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint32_t a, mve_pred16_t p)\n+{\n+  return vddupq_m (inactive, a, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vddupt.u8\"  }  } */"}, {"sha": "08f6a550bd12ce4405e657d1dd4f609fe920e677", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vddupq_m_wb_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_m_wb_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_m_wb_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_m_wb_u16.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint32_t *a, mve_pred16_t p)\n+{\n+  return vddupq_m_wb_u16 (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vddupt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint32_t *a, mve_pred16_t p)\n+{\n+  return vddupq_m (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vddupt.u16\"  }  } */"}, {"sha": "16b471e3a69648a297b739059e26a4eab59b864c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vddupq_m_wb_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_m_wb_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_m_wb_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_m_wb_u32.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32_t *a, mve_pred16_t p)\n+{\n+  return vddupq_m_wb_u32 (inactive, a, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vddupt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32_t *a, mve_pred16_t p)\n+{\n+  return vddupq_m (inactive, a, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vddupt.u32\"  }  } */"}, {"sha": "ade9fb8c661bde939bd54567e98314336fbd55e5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vddupq_m_wb_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_m_wb_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_m_wb_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_m_wb_u8.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint32_t *a, mve_pred16_t p)\n+{\n+  return vddupq_m_wb_u8 (inactive, a, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vddupt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint32_t *a, mve_pred16_t p)\n+{\n+  return vddupq_m (inactive, a, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vddupt.u8\"  }  } */"}, {"sha": "b3d44f5f4a7e1cdd338c4dcc71acf359707dba20", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vddupq_n_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_n_u16.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint32_t a)\n+{\n+  return vddupq_n_u16 (a, 4);\n+}\n+\n+/* { dg-final { scan-assembler \"vddup.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint32_t a)\n+{\n+  return vddupq_u16 (a, 4);\n+}\n+\n+/* { dg-final { scan-assembler \"vddup.u16\"  }  } */"}, {"sha": "163fc7f2589b20d27a4a4b20b82c2f9e956f0bc8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vddupq_n_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_n_u32.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32_t a)\n+{\n+  return vddupq_n_u32 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vddup.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32_t a)\n+{\n+  return vddupq_u32 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vddup.u32\"  }  } */"}, {"sha": "8309648f212c98c3b27880384084d2f51fb0ea8d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vddupq_n_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_n_u8.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint32_t a)\n+{\n+  return vddupq_n_u8 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vddup.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint32_t a)\n+{\n+  return vddupq_u8 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vddup.u8\"  }  } */"}, {"sha": "469daad5c4a131ec2ff27ec53034d14694368298", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vddupq_wb_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_wb_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_wb_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_wb_u16.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint32_t *a)\n+{\n+  return vddupq_wb_u16 (a, 4);\n+}\n+\n+/* { dg-final { scan-assembler \"vddup.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint32_t *a)\n+{\n+  return vddupq_u16 (a, 4);\n+}\n+\n+/* { dg-final { scan-assembler \"vddup.u16\"  }  } */"}, {"sha": "69f365b194171c97114dc216803d26af81f70a86", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vddupq_wb_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_wb_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_wb_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_wb_u32.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32_t *a)\n+{\n+  return vddupq_wb_u32 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vddup.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32_t *a)\n+{\n+  return vddupq_u32 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vddup.u32\"  }  } */"}, {"sha": "8d7ceb518bd4ba26b22b2f39f682f6ce91695756", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vddupq_wb_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_wb_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_wb_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_wb_u8.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint32_t *a)\n+{\n+  return vddupq_wb_u8 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vddup.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint32_t *a)\n+{\n+  return vddupq_u8 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vddup.u8\"  }  } */"}, {"sha": "447906528e2a4f9f5e0ba82b90606ef116e35d9e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdwdupq_m_n_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_m_n_u16.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint32_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return vdwdupq_m (inactive, a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vdwdupt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint32_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return vdwdupq_m (inactive, a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vdwdupt.u16\"  }  } */"}, {"sha": "874e86428ed6b6a2d00dd1d83c8c4a6674e9b955", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdwdupq_m_n_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_m_n_u32.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return vdwdupq_m (inactive, a, b, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vdwdupt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return vdwdupq_m (inactive, a, b, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vdwdupt.u32\"  }  } */"}, {"sha": "7cb078044bd4e13aa4cab509dc07f7aeb4d898e7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdwdupq_m_n_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_m_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_m_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_m_n_u8.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint32_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return vdwdupq_m (inactive, a, b, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vdwdupt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint32_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return vdwdupq_m (inactive, a, b, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vdwdupt.u8\"  }  } */"}, {"sha": "bc8885feb6c41735cc26b3757546e02bacb5a361", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdwdupq_m_wb_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_m_wb_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_m_wb_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_m_wb_u16.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint32_t * a, uint32_t b, mve_pred16_t p)\n+{\n+  return vdwdupq_m (inactive, a, b, 8, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vdwdupt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint32_t * a, uint32_t b, mve_pred16_t p)\n+{\n+  return vdwdupq_m (inactive, a, b, 8, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vdwdupt.u16\"  }  } */"}, {"sha": "50ed948c997e02f917f8226cb4814c62c91d2651", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdwdupq_m_wb_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_m_wb_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_m_wb_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_m_wb_u32.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32_t * a, uint32_t b, mve_pred16_t p)\n+{\n+  return vdwdupq_m (inactive, a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vdwdupt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32_t * a, uint32_t b, mve_pred16_t p)\n+{\n+  return vdwdupq_m (inactive, a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vdwdupt.u32\"  }  } */"}, {"sha": "839280ee3c1edceacf2940b489213c5746a0dbf3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdwdupq_m_wb_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_m_wb_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_m_wb_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_m_wb_u8.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint32_t * a, uint32_t b, mve_pred16_t p)\n+{\n+  return vdwdupq_m (inactive, a, b, 2, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vdwdupt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint32_t * a, uint32_t b, mve_pred16_t p)\n+{\n+  return vdwdupq_m (inactive, a, b, 2, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vdwdupt.u8\"  }  } */"}, {"sha": "dfb75ed877305622e26d46242730e3cdcc5669f3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdwdupq_n_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_n_u16.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint32_t a, uint32_t b)\n+{\n+  return vdwdupq_n_u16 (a, b, 2);\n+}\n+\n+/* { dg-final { scan-assembler \"vdwdup.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint32_t a, uint32_t b)\n+{\n+  return vdwdupq_u16 (a, b, 2);\n+}\n+\n+/* { dg-final { scan-assembler \"vdwdup.u16\"  }  } */"}, {"sha": "2597dbd32ad25c992157813430be0333aaa6e2cd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdwdupq_n_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_n_u32.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32_t a, uint32_t b)\n+{\n+  return vdwdupq_n_u32 (a, b, 8);\n+}\n+\n+/* { dg-final { scan-assembler \"vdwdup.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32_t a, uint32_t b)\n+{\n+  return vdwdupq_u32 (a, b, 8);\n+}\n+\n+/* { dg-final { scan-assembler \"vdwdup.u32\"  }  } */"}, {"sha": "4a4bcb213af0a55fad6b63bd508ea07e28459358", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdwdupq_n_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_n_u8.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint32_t a, uint32_t b)\n+{\n+  return vdwdupq_n_u8 (a, b, 4);\n+}\n+\n+/* { dg-final { scan-assembler \"vdwdup.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint32_t a, uint32_t b)\n+{\n+  return vdwdupq_u8 (a, b, 4);\n+}\n+\n+/* { dg-final { scan-assembler \"vdwdup.u8\"  }  } */"}, {"sha": "9c4506a01adc59089217e2f75fb2f2444269ce8e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdwdupq_wb_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_wb_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_wb_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_wb_u16.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint32_t *a, uint32_t b)\n+{\n+  return vdwdupq_wb_u16 (a, b, 2);\n+}\n+\n+/* { dg-final { scan-assembler \"vdwdup.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint32_t *a, uint32_t b)\n+{\n+  return vdwdupq_u16 (a, b, 2);\n+}\n+\n+/* { dg-final { scan-assembler \"vdwdup.u16\"  }  } */"}, {"sha": "782a6f4b269453f452c90499d2b6a0a620f90396", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdwdupq_wb_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_wb_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_wb_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_wb_u32.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32_t *a, uint32_t b)\n+{\n+  return vdwdupq_wb_u32 (a, b, 8);\n+}\n+\n+/* { dg-final { scan-assembler \"vdwdup.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32_t *a, uint32_t b)\n+{\n+  return vdwdupq_u32 (a, b, 8);\n+}\n+\n+/* { dg-final { scan-assembler \"vdwdup.u32\"  }  } */"}, {"sha": "6a4e428fdf45e1bf1d1161fce29da3c12d419d81", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdwdupq_wb_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_wb_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_wb_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_wb_u8.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint32_t *a, uint32_t b)\n+{\n+  return vdwdupq_wb_u8 (a, b, 4);\n+}\n+\n+/* { dg-final { scan-assembler \"vdwdup.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint32_t *a, uint32_t b)\n+{\n+  return vdwdupq_u8 (a, b, 4);\n+}\n+\n+/* { dg-final { scan-assembler \"vdwdup.u8\"  }  } */"}, {"sha": "60449defcc21812b9ada8d3b1e2873f980c4d437", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vidupq_m_n_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_m_n_u16.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint32_t a, mve_pred16_t p)\n+{\n+  return vidupq_m_n_u16 (inactive, a, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vidupt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint32_t a, mve_pred16_t p)\n+{\n+  return vidupq_m (inactive, a, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vidupt.u16\"  }  } */"}, {"sha": "1d358f964b5a254dae55e2a0215bf41612fa9aad", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vidupq_m_n_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_m_n_u32.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32_t a, mve_pred16_t p)\n+{\n+  return vidupq_m_n_u32 (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vidupt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32_t a, mve_pred16_t p)\n+{\n+  return vidupq_m (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vidupt.u32\"  }  } */"}, {"sha": "d32b8c59b07d4d52d67f4ab293e8e2f5bf474392", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vidupq_m_n_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_m_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_m_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_m_n_u8.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint32_t a, mve_pred16_t p)\n+{\n+  return vidupq_m_n_u8 (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vidupt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint32_t a, mve_pred16_t p)\n+{\n+  return vidupq_m (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vidupt.u8\"  }  } */"}, {"sha": "0b34b1517c79bf09d42f37dded1869b06d025f10", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vidupq_m_wb_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_m_wb_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_m_wb_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_m_wb_u16.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint32_t *a, mve_pred16_t p)\n+{\n+  return vidupq_m_wb_u16 (inactive, a, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vidupt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint32_t *a, mve_pred16_t p)\n+{\n+  return vidupq_m (inactive, a, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vidupt.u16\"  }  } */"}, {"sha": "cc6d6a1b744e0dc655ebdd63e0b610e45ba92f15", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vidupq_m_wb_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_m_wb_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_m_wb_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_m_wb_u32.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32_t *a, mve_pred16_t p)\n+{\n+  return vidupq_m_wb_u32 (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vidupt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32_t *a, mve_pred16_t p)\n+{\n+  return vidupq_m (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vidupt.u32\"  }  } */"}, {"sha": "d6ed263ad0cdf9f6b81d84120e8b298dcd1c4b68", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vidupq_m_wb_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_m_wb_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_m_wb_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_m_wb_u8.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint32_t *a, mve_pred16_t p)\n+{\n+  return vidupq_m_wb_u8 (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vidupt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint32_t *a, mve_pred16_t p)\n+{\n+  return vidupq_m (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vidupt.u8\"  }  } */"}, {"sha": "2bfecbbfbe349bc55fa1e68837def27310c7db88", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vidupq_n_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_n_u16.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint32_t a)\n+{\n+  return vidupq_n_u16 (a, 4);\n+}\n+\n+/* { dg-final { scan-assembler \"vidup.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint32_t a)\n+{\n+  return vidupq_u16 (a, 4);\n+}\n+\n+/* { dg-final { scan-assembler \"vidup.u16\"  }  } */"}, {"sha": "f93aab584d5847179d129690d3d6d68f5852b656", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vidupq_n_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_n_u32.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32_t a)\n+{\n+  return vidupq_n_u32 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vidup.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32_t a)\n+{\n+  return vidupq_u32 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vidup.u32\"  }  } */"}, {"sha": "397d5e51875f55b1e036c555c06c4dc738319eb0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vidupq_n_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_n_u8.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint32_t a)\n+{\n+  return vidupq_n_u8 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vidup.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint32_t a)\n+{\n+  return vidupq_u8 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vidup.u8\"  }  } */"}, {"sha": "d20b54db8ae8c0a621a51523e113e9a2fe595ea9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vidupq_wb_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_wb_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_wb_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_wb_u16.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint32_t *a)\n+{\n+  return vidupq_wb_u16 (a, 4);\n+}\n+\n+/* { dg-final { scan-assembler \"vidup.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint32_t *a)\n+{\n+  return vidupq_u16 (a, 4);\n+}\n+\n+/* { dg-final { scan-assembler \"vidup.u16\"  }  } */"}, {"sha": "c751a7ce0606f506bc707115eaf6673ffb7ba6dd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vidupq_wb_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_wb_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_wb_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_wb_u32.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32_t *a)\n+{\n+  return vidupq_wb_u32 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vidup.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32_t *a)\n+{\n+  return vidupq_u32 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vidup.u32\"  }  } */"}, {"sha": "89c6da2f398745a9744d56919f844529c12ffee3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vidupq_wb_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_wb_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_wb_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_wb_u8.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint32_t *a)\n+{\n+  return vidupq_wb_u8 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vidup.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint32_t *a)\n+{\n+  return vidupq_u8 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vidup.u8\"  }  } */"}, {"sha": "b0317fa5d681c8ce96f320cef2d76b772522dcfd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/viwdupq_m_n_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_m_n_u16.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint32_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return viwdupq_m_n_u16 (inactive, a, b, 2, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"viwdupt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint32_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return viwdupq_m (inactive, a, b, 2, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"viwdupt.u16\"  }  } */"}, {"sha": "2e0e0ad3ff39f3713a01efa8579c0827973760d5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/viwdupq_m_n_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_m_n_u32.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return viwdupq_m_n_u32 (inactive, a, b, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"viwdupt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return viwdupq_m (inactive, a, b, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"viwdupt.u32\"  }  } */"}, {"sha": "1ce1fff3ab8ac5164f263ce4ca438dd5ac086d20", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/viwdupq_m_n_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_m_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_m_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_m_n_u8.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint32_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return viwdupq_m_n_u8 (inactive, a, b, 8, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"viwdupt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint32_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return viwdupq_m (inactive, a, b, 8, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"viwdupt.u8\"  }  } */"}, {"sha": "834d3a9782c4583337ad958abca12eeb70cc8f0d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/viwdupq_m_wb_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_m_wb_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_m_wb_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_m_wb_u16.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint32_t *a, uint32_t b, mve_pred16_t p)\n+{\n+  return viwdupq_m_wb_u16 (inactive, a, b, 2, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"viwdupt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint32_t *a, uint32_t b, mve_pred16_t p)\n+{\n+  return viwdupq_m (inactive, a, b, 2, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"viwdupt.u16\"  }  } */"}, {"sha": "75fcd9a88672b01dc2d1c35b09b77a47f0b9f4a2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/viwdupq_m_wb_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_m_wb_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_m_wb_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_m_wb_u32.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32_t *a, uint32_t b, mve_pred16_t p)\n+{\n+  return viwdupq_m_wb_u32 (inactive, a, b, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"viwdupt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32_t *a, uint32_t b, mve_pred16_t p)\n+{\n+  return viwdupq_m (inactive, a, b, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"viwdupt.u32\"  }  } */"}, {"sha": "a5ea588d36756da01f415197a2c38ea9204f412d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/viwdupq_m_wb_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_m_wb_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_m_wb_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_m_wb_u8.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint32_t *a, uint32_t b, mve_pred16_t p)\n+{\n+  return viwdupq_m_wb_u8 (inactive, a, b, 8, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"viwdupt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint32_t *a, uint32_t b, mve_pred16_t p)\n+{\n+  return viwdupq_m (inactive, a, b, 8, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"viwdupt.u8\"  }  } */"}, {"sha": "52536d3d8653606f018fa0473944b732a542489d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/viwdupq_n_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_n_u16.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint32_t a, uint32_t b)\n+{\n+  return viwdupq_n_u16 (a, b, 2);\n+}\n+\n+/* { dg-final { scan-assembler \"viwdup.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint32_t a, uint32_t b)\n+{\n+  return viwdupq_u16 (a, b, 2);\n+}\n+\n+/* { dg-final { scan-assembler \"viwdup.u16\"  }  } */"}, {"sha": "49b15be289bdc4fd40d34958b14894b74b380590", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/viwdupq_n_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_n_u32.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32_t a, uint32_t b)\n+{\n+  return viwdupq_n_u32 (a, b, 4);\n+}\n+\n+/* { dg-final { scan-assembler \"viwdup.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32_t a, uint32_t b)\n+{\n+  return viwdupq_u32 (a, b, 4);\n+}\n+\n+/* { dg-final { scan-assembler \"viwdup.u32\"  }  } */"}, {"sha": "4beff7ad334aaf5f74a3187c673f544717942627", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/viwdupq_n_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_n_u8.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint32_t a, uint32_t b)\n+{\n+  return viwdupq_n_u8 (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"viwdup.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint32_t a, uint32_t b)\n+{\n+  return viwdupq_u8 (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"viwdup.u8\"  }  } */"}, {"sha": "0a8826116c38f63167b76ccd34f591b8ea201b21", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/viwdupq_wb_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_wb_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_wb_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_wb_u16.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint32_t * a, uint32_t b)\n+{\n+  return viwdupq_wb_u16 (a, b, 4);\n+}\n+\n+/* { dg-final { scan-assembler \"viwdup.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint32_t * a, uint32_t b)\n+{\n+  return viwdupq_u16 (a, b, 4);\n+}\n+\n+/* { dg-final { scan-assembler \"viwdup.u16\"  }  } */"}, {"sha": "37e4f344ad74679244dc3b30f7514bd6c1fffa99", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/viwdupq_wb_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_wb_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_wb_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_wb_u32.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32_t * a, uint32_t b)\n+{\n+  return viwdupq_wb_u32 (a, b, 8);\n+}\n+\n+/* { dg-final { scan-assembler \"viwdup.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32_t * a, uint32_t b)\n+{\n+  return viwdupq_u32 (a, b, 8);\n+}\n+\n+/* { dg-final { scan-assembler \"viwdup.u32\"  }  } */"}, {"sha": "810bff9003ad334428c1952b8d01d867b689a33b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/viwdupq_wb_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_wb_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f80065d10ece75327c30eed924c322f1e4b338/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_wb_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_wb_u8.c?ref=92f80065d10ece75327c30eed924c322f1e4b338", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint32_t * a, uint32_t b)\n+{\n+  return viwdupq_wb_u8 (a, b, 2);\n+}\n+\n+/* { dg-final { scan-assembler \"viwdup.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint32_t * a, uint32_t b)\n+{\n+  return viwdupq_u8 (a, b, 2);\n+}\n+\n+/* { dg-final { scan-assembler \"viwdup.u8\"  }  } */"}]}