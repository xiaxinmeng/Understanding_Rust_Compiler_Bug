{"sha": "58a9ed1187e5ba190828dff6c5d1e88ebe7dbb3a", "node_id": "C_kwDOANBUbNoAKDU4YTllZDExODdlNWJhMTkwODI4ZGZmNmM1ZDFlODhlYmU3ZGJiM2E", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2022-01-05T10:53:32Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-01-11T13:24:48Z"}, "message": "[Ada] Deconstruct a VMS utility routine which is only used by GNATprove\n\ngcc/ada/\n\n\t* sem_eval.ads (Compile_Time_Known_Value_Or_Aggr): Remove spec.\n\t* sem_eval.adb (Compile_Time_Known_Value_Or_Aggr): Remove body.", "tree": {"sha": "e1da6c6414302b261b615fa51e82794791a1af97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1da6c6414302b261b615fa51e82794791a1af97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58a9ed1187e5ba190828dff6c5d1e88ebe7dbb3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58a9ed1187e5ba190828dff6c5d1e88ebe7dbb3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58a9ed1187e5ba190828dff6c5d1e88ebe7dbb3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58a9ed1187e5ba190828dff6c5d1e88ebe7dbb3a/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87f152ba31e41df9225ff08682eca7b8fb66234b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87f152ba31e41df9225ff08682eca7b8fb66234b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87f152ba31e41df9225ff08682eca7b8fb66234b"}], "stats": {"total": 93, "additions": 0, "deletions": 93}, "files": [{"sha": "2881a148c31f9027c6a4763033e7c90a0d802374", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 0, "deletions": 84, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58a9ed1187e5ba190828dff6c5d1e88ebe7dbb3a/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58a9ed1187e5ba190828dff6c5d1e88ebe7dbb3a/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=58a9ed1187e5ba190828dff6c5d1e88ebe7dbb3a", "patch": "@@ -1916,90 +1916,6 @@ package body Sem_Eval is\n          return False;\n    end Compile_Time_Known_Value;\n \n-   --------------------------------------\n-   -- Compile_Time_Known_Value_Or_Aggr --\n-   --------------------------------------\n-\n-   function Compile_Time_Known_Value_Or_Aggr (Op : Node_Id) return Boolean is\n-   begin\n-      --  If we have an entity name, then see if it is the name of a constant\n-      --  and if so, test the corresponding constant value, or the name of\n-      --  an enumeration literal, which is always a constant.\n-\n-      if Is_Entity_Name (Op) then\n-         declare\n-            E : constant Entity_Id := Entity (Op);\n-            V : Node_Id;\n-\n-         begin\n-            if Ekind (E) = E_Enumeration_Literal then\n-               return True;\n-\n-            elsif Ekind (E) /= E_Constant then\n-               return False;\n-\n-            else\n-               V := Constant_Value (E);\n-               return Present (V)\n-                 and then Compile_Time_Known_Value_Or_Aggr (V);\n-            end if;\n-         end;\n-\n-      --  We have a value, see if it is compile-time-known\n-\n-      else\n-         if Compile_Time_Known_Value (Op) then\n-            return True;\n-\n-         elsif Nkind (Op) = N_Aggregate then\n-\n-            if Present (Expressions (Op)) then\n-               declare\n-                  Expr : Node_Id;\n-               begin\n-                  Expr := First (Expressions (Op));\n-                  while Present (Expr) loop\n-                     if not Compile_Time_Known_Value_Or_Aggr (Expr) then\n-                        return False;\n-                     else\n-                        Next (Expr);\n-                     end if;\n-                  end loop;\n-               end;\n-            end if;\n-\n-            if Present (Component_Associations (Op)) then\n-               declare\n-                  Cass : Node_Id;\n-\n-               begin\n-                  Cass := First (Component_Associations (Op));\n-                  while Present (Cass) loop\n-                     if not\n-                       Compile_Time_Known_Value_Or_Aggr (Expression (Cass))\n-                     then\n-                        return False;\n-                     end if;\n-\n-                     Next (Cass);\n-                  end loop;\n-               end;\n-            end if;\n-\n-            return True;\n-\n-         elsif Nkind (Op) = N_Qualified_Expression then\n-            return Compile_Time_Known_Value_Or_Aggr (Expression (Op));\n-\n-         --  All other types of values are not known at compile time\n-\n-         else\n-            return False;\n-         end if;\n-\n-      end if;\n-   end Compile_Time_Known_Value_Or_Aggr;\n-\n    ---------------------------------------\n    -- CRT_Safe_Compile_Time_Known_Value --\n    ---------------------------------------"}, {"sha": "eb919f17cb479d6793c8bbc7caf719b2b86a8303", "filename": "gcc/ada/sem_eval.ads", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58a9ed1187e5ba190828dff6c5d1e88ebe7dbb3a/gcc%2Fada%2Fsem_eval.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58a9ed1187e5ba190828dff6c5d1e88ebe7dbb3a/gcc%2Fada%2Fsem_eval.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.ads?ref=58a9ed1187e5ba190828dff6c5d1e88ebe7dbb3a", "patch": "@@ -236,15 +236,6 @@ package Sem_Eval is\n \n    --  WARNING: There is a matching C declaration of this subprogram in fe.h\n \n-   function Compile_Time_Known_Value_Or_Aggr (Op : Node_Id) return Boolean;\n-   --  Similar to Compile_Time_Known_Value, but also returns True if the value\n-   --  is a compile-time-known aggregate, i.e. an aggregate all of whose\n-   --  constituent expressions are either compile-time-known values (based on\n-   --  calling Compile_Time_Known_Value) or compile-time-known aggregates.\n-   --  Note that the aggregate could still involve run-time checks that might\n-   --  fail (such as for subtype checks in component associations), but the\n-   --  evaluation of the expressions themselves will not raise an exception.\n-\n    function CRT_Safe_Compile_Time_Known_Value (Op : Node_Id) return Boolean;\n    --  In the case of configurable run-times, there may be an issue calling\n    --  Compile_Time_Known_Value with non-static expressions where the legality"}]}