{"sha": "8f0d8cd852255f9767626b084fc7926cbbea166f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGYwZDhjZDg1MjI1NWY5NzY3NjI2YjA4NGZjNzkyNmNiYmVhMTY2Zg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-03-09T16:10:16Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-03-11T04:40:33Z"}, "message": "libstdc++: LWG 3286 ranges::size is not required to be valid after ...\n\n... a call to ranges::begin on an input range.\n\nThis implements LWG 3286.  The new wording for the single-argument constructor\nfor subrange is implemented by splitting the constructor into two delegating\nconstructors, one constrained by _S_store_size and the other by !_S_store_size.\n\nTested on x86_64-pc-linux-gnu, both added tests fail before the patch and pass\nwith the patch.\n\nlibstdc++-v3/ChangeLog:\n\n\tLWG 3286 ranges::size is not required to be valid after a call to\n\tranges::begin on an input range\n\t* include/std/ranges (subrange::subrange): Split single-argument\n\tconstructor into two, one constrained by _S_store_size and another by\n\t!_S_store_size.\n\t(take_view::begin): Call size() before calling ranges::begin(_M_base).\n\t* testsuite/std/ranges/adaptors/lwg3286.cc: New test.\n\t* testsuite/std/ranges/subrange/lwg3286.cc: New test.", "tree": {"sha": "3de1722b58635a50bb205d01a322b0066e6d7055", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3de1722b58635a50bb205d01a322b0066e6d7055"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f0d8cd852255f9767626b084fc7926cbbea166f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f0d8cd852255f9767626b084fc7926cbbea166f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f0d8cd852255f9767626b084fc7926cbbea166f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f0d8cd852255f9767626b084fc7926cbbea166f/comments", "author": null, "committer": null, "parents": [{"sha": "5115542a5cc17c5096e6e498c363e75d5bc14276", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5115542a5cc17c5096e6e498c363e75d5bc14276", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5115542a5cc17c5096e6e498c363e75d5bc14276"}], "stats": {"total": 180, "additions": 173, "deletions": 7}, "files": [{"sha": "27ef7e39087fce2c0d5b0ca2d1c1984a93139ea2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f0d8cd852255f9767626b084fc7926cbbea166f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f0d8cd852255f9767626b084fc7926cbbea166f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8f0d8cd852255f9767626b084fc7926cbbea166f", "patch": "@@ -1,3 +1,14 @@\n+2020-03-11  Patrick Palka  <ppalka@redhat.com>\n+\n+\tLWG 3286 ranges::size is not required to be valid after a call to\n+\tranges::begin on an input range\n+\t* include/std/ranges (subrange::subrange): Split single-argument\n+\tconstructor into two, one constrained by _S_store_size and another by\n+\t!_S_store_size.\n+\t(take_view::begin): Call size() before calling ranges::begin(_M_base).\n+\t* testsuite/std/ranges/adaptors/lwg3286.cc: New test.\n+\t* testsuite/std/ranges/subrange/lwg3286.cc: New test.\n+\n 2020-03-10  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/ranges (split_view::_OuterIter::__at_end): Use __current"}, {"sha": "5b06a9e6f43f5f6fd8cb73609220944715b9ca3b", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f0d8cd852255f9767626b084fc7926cbbea166f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f0d8cd852255f9767626b084fc7926cbbea166f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=8f0d8cd852255f9767626b084fc7926cbbea166f", "patch": "@@ -281,12 +281,18 @@ namespace ranges\n \t  && __detail::__convertible_to_non_slicing<iterator_t<_Rng>, _It>\n \t  && convertible_to<sentinel_t<_Rng>, _Sent>\n \tconstexpr\n-\tsubrange(_Rng&& __r) requires (!_S_store_size || sized_range<_Rng>)\n+\tsubrange(_Rng&& __r) requires _S_store_size && sized_range<_Rng>\n+\t: subrange{__r, ranges::size(__r)}\n+\t{ }\n+\n+      template<__detail::__not_same_as<subrange> _Rng>\n+\trequires borrowed_range<_Rng>\n+\t  && __detail::__convertible_to_non_slicing<iterator_t<_Rng>, _It>\n+\t  && convertible_to<sentinel_t<_Rng>, _Sent>\n+\tconstexpr\n+\tsubrange(_Rng&& __r) requires (!_S_store_size)\n \t: subrange{ranges::begin(__r), ranges::end(__r)}\n-\t{\n-\t  if constexpr (_S_store_size)\n-\t    _M_size._M_size = ranges::size(__r);\n-\t}\n+\t{ }\n \n       template<borrowed_range _Rng>\n \trequires __detail::__convertible_to_non_slicing<iterator_t<_Rng>, _It>\n@@ -2032,7 +2038,10 @@ namespace views\n \t    if constexpr (random_access_range<_Vp>)\n \t      return ranges::begin(_M_base);\n \t    else\n-\t      return counted_iterator{ranges::begin(_M_base), size()};\n+\t      {\n+\t\tauto __sz = size();\n+\t\treturn counted_iterator{ranges::begin(_M_base), __sz};\n+\t      }\n \t  }\n \telse\n \t  return counted_iterator{ranges::begin(_M_base), _M_count};\n@@ -2046,7 +2055,10 @@ namespace views\n \t    if constexpr (random_access_range<const _Vp>)\n \t      return ranges::begin(_M_base);\n \t    else\n-\t      return counted_iterator{ranges::begin(_M_base), size()};\n+\t      {\n+\t\tauto __sz = size();\n+\t\treturn counted_iterator{ranges::begin(_M_base), __sz};\n+\t      }\n \t  }\n \telse\n \t  return counted_iterator{ranges::begin(_M_base), _M_count};"}, {"sha": "07a0f63fe239201f5f868dfa6f197d7c5cef166d", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/lwg3286.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f0d8cd852255f9767626b084fc7926cbbea166f/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Flwg3286.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f0d8cd852255f9767626b084fc7926cbbea166f/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Flwg3286.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Flwg3286.cc?ref=8f0d8cd852255f9767626b084fc7926cbbea166f", "patch": "@@ -0,0 +1,72 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <ranges>\n+#include <testsuite_iterators.h>\n+#include <testsuite_hooks.h>\n+\n+using __gnu_test::test_input_range;\n+\n+namespace ranges = std::ranges;\n+namespace views = std::views;\n+\n+struct my_range\n+{\n+  static inline int x[] = {1,2,3};\n+  static inline test_input_range<int> r{x};\n+\n+  bool called_begin = false;\n+\n+  auto\n+  begin()\n+  {\n+    called_begin = true;\n+    return r.begin();\n+  }\n+\n+  auto\n+  end()\n+  {\n+    return r.end();\n+  }\n+\n+  ranges::range_difference_t<decltype(r)>\n+  size()\n+  {\n+    VERIFY( !called_begin );\n+    return 3;\n+  }\n+};\n+\n+void\n+test01()\n+{\n+  my_range r;\n+  static_assert(!ranges::forward_range<my_range>);\n+  static_assert(ranges::sized_range<my_range>);\n+  auto v = r | views::take(3);\n+  auto i = ranges::begin(v);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "3ddec7004a7388c43a3fff02e2f407051ce361f5", "filename": "libstdc++-v3/testsuite/std/ranges/subrange/lwg3286.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f0d8cd852255f9767626b084fc7926cbbea166f/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsubrange%2Flwg3286.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f0d8cd852255f9767626b084fc7926cbbea166f/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsubrange%2Flwg3286.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsubrange%2Flwg3286.cc?ref=8f0d8cd852255f9767626b084fc7926cbbea166f", "patch": "@@ -0,0 +1,71 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <ranges>\n+#include <testsuite_iterators.h>\n+#include <testsuite_hooks.h>\n+\n+using __gnu_test::test_input_range;\n+\n+namespace ranges = std::ranges;\n+\n+struct my_range\n+{\n+  static inline int x[] = {1,2,3};\n+  static inline test_input_range<int> r{x};\n+\n+  bool called_begin = false;\n+\n+  auto\n+  begin()\n+  {\n+    called_begin = true;\n+    return r.begin();\n+  }\n+\n+  auto\n+  end()\n+  {\n+    return r.end();\n+  }\n+\n+  ranges::range_difference_t<decltype(r)>\n+  size()\n+  {\n+    VERIFY( !called_begin );\n+    return 3;\n+  }\n+};\n+\n+void\n+test01()\n+{\n+  my_range r;\n+  static_assert(!ranges::forward_range<my_range>);\n+  static_assert(ranges::sized_range<my_range>);\n+  ranges::subrange sr = r;\n+  VERIFY( ranges::size(sr) == 3 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}