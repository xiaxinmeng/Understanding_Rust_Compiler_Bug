{"sha": "6d0dedfa0b2141a7f6fa94ebec3f2d7249593a0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQwZGVkZmEwYjIxNDFhN2Y2ZmE5NGViZWMzZjJkNzI0OTU5M2EwZA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2020-06-28T19:11:33Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-10-16T07:31:26Z"}, "message": "[Ada] Improvements to implementation of Ada_2020 attribute Reduce\n\ngcc/ada/\n\n\t* sem_attr.adb (Min_Max): Handle the case where attribute\n\tname (qualified by required type) appears as the reducer of a\n\t'Reduce attribute reference.\n\t(Resolve_Attribute) <Reduce>: Handle properly the presence of a\n\tprocedure or an attribute reference Min/Max as a reducer.\n\t* exp_attr.adb (Expand_Attribute_Reference) <Reduce>: New\n\tsubprogram Build_Stat, to construct the combining statement\n\twhich appears in the generated loop for Reduce, and which is\n\teither a function call when the reducer is a function or an\n\tattribute, or a procedure call when reducer is an appropriate\n\tprocedure.  BuilD_Stat is used both when the prefix of 'Reduce\n\tis a value sequence and when it is an object", "tree": {"sha": "784cf977c10a84f94ae36a9a3105bf77bcb9ecd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/784cf977c10a84f94ae36a9a3105bf77bcb9ecd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d0dedfa0b2141a7f6fa94ebec3f2d7249593a0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d0dedfa0b2141a7f6fa94ebec3f2d7249593a0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d0dedfa0b2141a7f6fa94ebec3f2d7249593a0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d0dedfa0b2141a7f6fa94ebec3f2d7249593a0d/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "263bb39332e927de70f50cef55d0bbe6a8a104a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/263bb39332e927de70f50cef55d0bbe6a8a104a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/263bb39332e927de70f50cef55d0bbe6a8a104a1"}], "stats": {"total": 120, "additions": 98, "deletions": 22}, "files": [{"sha": "6f1f3682b019d67cf0a4618840b2bdb39795b4d7", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 76, "deletions": 21, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d0dedfa0b2141a7f6fa94ebec3f2d7249593a0d/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d0dedfa0b2141a7f6fa94ebec3f2d7249593a0d/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=6d0dedfa0b2141a7f6fa94ebec3f2d7249593a0d", "patch": "@@ -5619,40 +5619,101 @@ package body Exp_Attr is\n             E2      : constant Node_Id := Next (E1);\n             Bnn     : constant Entity_Id := Make_Temporary (Loc, 'B', N);\n             Typ     : constant Entity_Id := Etype (N);\n+\n             New_Loop : Node_Id;\n+            Stat    : Node_Id;\n+\n+            function Build_Stat (Comp : Node_Id) return Node_Id;\n+            --  The reducer can be a function, a procedure whose first\n+            --  parameter is in-out, or an attribute that is a function,\n+            --  which (for now) can only be Min/Max. This subprogram\n+            --  builds the corresponding computation for the generated loop.\n+\n+            ----------------\n+            -- Build_Stat --\n+            ----------------\n+\n+            function Build_Stat (Comp : Node_Id) return Node_Id is\n+            begin\n+               if Nkind (E1) = N_Attribute_Reference then\n+                  Stat :=  Make_Assignment_Statement (Loc,\n+                             Name => New_Occurrence_Of (Bnn, Loc),\n+                             Expression => Make_Attribute_Reference (Loc,\n+                               Attribute_Name => Attribute_Name (E1),\n+                               Prefix => New_Copy (Prefix (E1)),\n+                               Expressions => New_List (\n+                                 New_Occurrence_Of (Bnn, Loc),\n+                                 Comp)));\n+\n+               elsif Ekind (Entity (E1)) = E_Procedure then\n+                  Stat := Make_Procedure_Call_Statement (Loc,\n+                            Name => New_Occurrence_Of (Entity (E1), Loc),\n+                               Parameter_Associations => New_List (\n+                                 New_Occurrence_Of (Bnn, Loc),\n+                                 Comp));\n+               else\n+                  Stat :=  Make_Assignment_Statement (Loc,\n+                             Name => New_Occurrence_Of (Bnn, Loc),\n+                             Expression => Make_Function_Call (Loc,\n+                               Name => New_Occurrence_Of (Entity (E1), Loc),\n+                               Parameter_Associations => New_List (\n+                                 New_Occurrence_Of (Bnn, Loc),\n+                                 Comp)));\n+               end if;\n+\n+               return Stat;\n+            end Build_Stat;\n \n          --  If the prefix is an aggregate, its unique component is an\n          --  Iterated_Element, and we create a loop out of its iterator.\n+         --  The iterated_component_Association is parsed as a loop\n+         --  parameter specification with \"in\" or as a container\n+         --  iterator with \"of\".\n \n          begin\n             if Nkind (Prefix (N)) = N_Aggregate then\n                declare\n                   Stream  : constant Node_Id :=\n                               First (Component_Associations (Prefix (N)));\n-                  Id      : constant Node_Id := Defining_Identifier (Stream);\n                   Expr    : constant Node_Id := Expression (Stream);\n-                  Ch      : constant Node_Id :=\n-                              First (Discrete_Choices (Stream));\n+                  Id      : constant Node_Id := Defining_Identifier (Stream);\n+                  It_Spec : constant Node_Id :=\n+                                             Iterator_Specification (Stream);\n+                  Ch      : Node_Id;\n+                  Iter    : Node_Id;\n+\n                begin\n-                  New_Loop := Make_Loop_Statement (Loc,\n-                    Iteration_Scheme =>\n+                  --  Iteration may be given by an element iterator:\n+\n+                  if Nkind (Stream) = N_Iterated_Component_Association\n+                      and then Present (It_Spec)\n+                      and then Of_Present (It_Spec)\n+                  then\n+                     Iter :=\n+                       Make_Iteration_Scheme (Loc,\n+                         Iterator_Specification =>\n+                           Relocate_Node (It_Spec),\n+                         Loop_Parameter_Specification => Empty);\n+\n+                  else\n+                     Ch   := First (Discrete_Choices (Stream));\n+                     Iter :=\n                       Make_Iteration_Scheme (Loc,\n                         Iterator_Specification => Empty,\n                         Loop_Parameter_Specification =>\n                           Make_Loop_Parameter_Specification  (Loc,\n                             Defining_Identifier => New_Copy (Id),\n                             Discrete_Subtype_Definition =>\n-                              Relocate_Node (Ch))),\n+                              Relocate_Node (Ch)));\n+                  end if;\n+\n+                  New_Loop := Make_Loop_Statement (Loc,\n+                    Iteration_Scheme => Iter,\n                       End_Label => Empty,\n-                      Statements => New_List (\n-                        Make_Assignment_Statement (Loc,\n-                          Name => New_Occurrence_Of (Bnn, Loc),\n-                          Expression => Make_Function_Call (Loc,\n-                            Name => New_Occurrence_Of (Entity (E1), Loc),\n-                            Parameter_Associations => New_List (\n-                              New_Occurrence_Of (Bnn, Loc),\n-                              Relocate_Node (Expr))))));\n+                      Statements =>\n+                        New_List (Build_Stat (Relocate_Node (Expr))));\n                end;\n+\n             else\n                --  If the prefix is a name, we construct an element iterator\n                --  over it. Its expansion will verify that it is an array or\n@@ -5677,13 +5738,7 @@ package body Exp_Attr is\n                         Loop_Parameter_Specification => Empty),\n                       End_Label => Empty,\n                       Statements => New_List (\n-                        Make_Assignment_Statement (Loc,\n-                          Name => New_Occurrence_Of (Bnn, Loc),\n-                          Expression => Make_Function_Call (Loc,\n-                            Name => New_Occurrence_Of (Entity (E1), Loc),\n-                            Parameter_Associations => New_List (\n-                              New_Occurrence_Of (Bnn, Loc),\n-                              New_Occurrence_Of (Elem, Loc))))));\n+                        Build_Stat (New_Occurrence_Of (Elem, Loc))));\n                end;\n             end if;\n "}, {"sha": "15d47386a0338c8b6be6d83394b7e8c515db52e0", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d0dedfa0b2141a7f6fa94ebec3f2d7249593a0d/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d0dedfa0b2141a7f6fa94ebec3f2d7249593a0d/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=6d0dedfa0b2141a7f6fa94ebec3f2d7249593a0d", "patch": "@@ -2748,6 +2748,16 @@ package body Sem_Attr is\n \n       procedure Min_Max is\n       begin\n+         --  Attribute can appear as function name in a reduction.\n+         --  Semantic checks are performed later.\n+\n+         if Nkind (Parent (N)) = N_Attribute_Reference\n+           and then Attribute_Name (Parent (N)) = Name_Reduce\n+         then\n+            Set_Etype (N, P_Base_Type);\n+            return;\n+         end if;\n+\n          Check_E2;\n          Check_Scalar_Type;\n          Resolve (E1, P_Base_Type);\n@@ -12019,6 +12029,11 @@ package body Sem_Attr is\n                        or else Present (Next_Formal (F2))\n                      then\n                         return False;\n+\n+                     elsif Ekind (Op) = E_Procedure then\n+                        return Ekind (F1) = E_In_Out_Parameter\n+                          and then Covers (Typ, Etype (F1));\n+\n                      else\n                         return\n                           (Ekind (Op) = E_Operator\n@@ -12042,13 +12057,19 @@ package body Sem_Attr is\n                      Get_Next_Interp (Index, It);\n                   end loop;\n \n+               elsif Nkind (E1) = N_Attribute_Reference\n+                 and then (Attribute_Name (E1) = Name_Max\n+                   or else Attribute_Name (E1) = Name_Min)\n+               then\n+                  Op := E1;\n+\n                elsif Proper_Op (Entity (E1)) then\n                   Op := Entity (E1);\n                   Set_Etype (N, Typ);\n                end if;\n \n                if No (Op) then\n-                  Error_Msg_N (\"No visible function for reduction\", E1);\n+                  Error_Msg_N (\"No visible subprogram for reduction\", E1);\n                end if;\n             end;\n "}]}