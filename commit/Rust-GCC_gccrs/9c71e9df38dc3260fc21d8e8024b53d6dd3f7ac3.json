{"sha": "9c71e9df38dc3260fc21d8e8024b53d6dd3f7ac3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM3MWU5ZGYzOGRjMzI2MGZjMjFkOGU4MDI0YjUzZDZkZDNmN2FjMw==", "commit": {"author": {"name": "Trevor Saunders", "email": "tsaunders@mozilla.com", "date": "2014-11-20T15:10:42Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2014-11-20T15:10:42Z"}, "message": "use vec in lto_tree_ref_table\n\ngcc/ChangeLog:\n\n2014-11-20  Trevor Saunders  <tsaunders@mozilla.com>\n\n\t* lto-section-in.c (lto_delete_in_decl_state): Adjust.\n\t(lto_free_function_in_decl_state): Likewise.\n\t* lto-streamer-out.c (copy_function_or_variable): Likewise.\n\t* lto-streamer.h (lto_file_decl_data_get_ ## name): Likewise.\n\t(lto_file_decl_data_num_ ## name ## s): Likewise.\n\t(struct lto_tree_ref_table): Remove.\n\t(struct lto_in_decl_state): Replace lto_tree_ref_table with vec<tree>.\n\ngcc/lto/ChangeLog:\n\n2014-11-20  Trevor Saunders  <tsaunders@mozilla.com>\n\n\t* lto.c (lto_read_in_decl_state): Adjust.\n\t(lto_fixup_state): Likewise.\n\nFrom-SVN: r217870", "tree": {"sha": "ae2ff4b5af9ec08afc858790912768ed981d4eb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae2ff4b5af9ec08afc858790912768ed981d4eb9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c71e9df38dc3260fc21d8e8024b53d6dd3f7ac3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c71e9df38dc3260fc21d8e8024b53d6dd3f7ac3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c71e9df38dc3260fc21d8e8024b53d6dd3f7ac3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c71e9df38dc3260fc21d8e8024b53d6dd3f7ac3/comments", "author": null, "committer": null, "parents": [{"sha": "de144fb24f1fe7e600e89245b6afe27e76660547", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de144fb24f1fe7e600e89245b6afe27e76660547", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de144fb24f1fe7e600e89245b6afe27e76660547"}], "stats": {"total": 68, "additions": 35, "deletions": 33}, "files": [{"sha": "c99757b1eccdc3a56775d34b319d4e9982002ee4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c71e9df38dc3260fc21d8e8024b53d6dd3f7ac3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c71e9df38dc3260fc21d8e8024b53d6dd3f7ac3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c71e9df38dc3260fc21d8e8024b53d6dd3f7ac3", "patch": "@@ -1,3 +1,13 @@\n+2014-11-20  Trevor Saunders  <tsaunders@mozilla.com>\n+\n+\t* lto-section-in.c (lto_delete_in_decl_state): Adjust.\n+\t(lto_free_function_in_decl_state): Likewise.\n+\t* lto-streamer-out.c (copy_function_or_variable): Likewise.\n+\t* lto-streamer.h (lto_file_decl_data_get_ ## name): Likewise.\n+\t(lto_file_decl_data_num_ ## name ## s): Likewise.\n+\t(struct lto_tree_ref_table): Remove.\n+\t(struct lto_in_decl_state): Replace lto_tree_ref_table with vec<tree>.\n+\n 2014-11-20  Trevor Saunders  <tsaunders@mozilla.com>\n \n \t* hash-map.h (hash_map::iterator): New class."}, {"sha": "d0bb4bdd9de8be9b0c04c594caf29f4042fa76c0", "filename": "gcc/lto-section-in.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c71e9df38dc3260fc21d8e8024b53d6dd3f7ac3/gcc%2Flto-section-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c71e9df38dc3260fc21d8e8024b53d6dd3f7ac3/gcc%2Flto-section-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-section-in.c?ref=9c71e9df38dc3260fc21d8e8024b53d6dd3f7ac3", "patch": "@@ -380,8 +380,7 @@ lto_delete_in_decl_state (struct lto_in_decl_state *state)\n   int i;\n \n   for (i = 0; i < LTO_N_DECL_STREAMS; i++)\n-    if (state->streams[i].trees)\n-      ggc_free (state->streams[i].trees);\n+    vec_free (state->streams[i]);\n   ggc_free (state);\n }\n \n@@ -430,7 +429,7 @@ lto_free_function_in_decl_state (struct lto_in_decl_state *state)\n {\n   int i;\n   for (i = 0; i < LTO_N_DECL_STREAMS; i++)\n-    ggc_free (state->streams[i].trees);\n+    vec_free (state->streams[i]);\n   ggc_free (state);\n }\n "}, {"sha": "19f59a0ecf84804bda55f0dab83130e0cbe45a25", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c71e9df38dc3260fc21d8e8024b53d6dd3f7ac3/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c71e9df38dc3260fc21d8e8024b53d6dd3f7ac3/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=9c71e9df38dc3260fc21d8e8024b53d6dd3f7ac3", "patch": "@@ -2187,8 +2187,8 @@ copy_function_or_variable (struct symtab_node *node)\n \n   for (i = 0; i < LTO_N_DECL_STREAMS; i++)\n     {\n-      size_t n = in_state->streams[i].size;\n-      tree *trees = in_state->streams[i].trees;\n+      size_t n = vec_safe_length (in_state->streams[i]);\n+      vec<tree, va_gc> *trees = in_state->streams[i];\n       struct lto_tree_ref_encoder *encoder = &(out_state->streams[i]);\n \n       /* The out state must have the same indices and the in state.\n@@ -2197,7 +2197,7 @@ copy_function_or_variable (struct symtab_node *node)\n       gcc_assert (lto_tree_ref_encoder_size (encoder) == 0);\n       encoder->trees.reserve_exact (n);\n       for (j = 0; j < n; j++)\n-\tencoder->trees.safe_push (trees[j]);\n+\tencoder->trees.safe_push ((*trees)[j]);\n     }\n \n   lto_free_section_data (file_data, LTO_section_function_body, name,"}, {"sha": "8129171a6f3ade121d7a76f94274542e0eac6197", "filename": "gcc/lto-streamer.h", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c71e9df38dc3260fc21d8e8024b53d6dd3f7ac3/gcc%2Flto-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c71e9df38dc3260fc21d8e8024b53d6dd3f7ac3/gcc%2Flto-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.h?ref=9c71e9df38dc3260fc21d8e8024b53d6dd3f7ac3", "patch": "@@ -275,15 +275,14 @@ lto_file_decl_data_get_ ## name (struct lto_file_decl_data *data, \\\n \t\t\t\t unsigned int idx) \\\n { \\\n   struct lto_in_decl_state *state = data->current_decl_state; \\\n-  gcc_assert (idx < state->streams[LTO_DECL_STREAM_## UPPER_NAME].size); \\\n-  return state->streams[LTO_DECL_STREAM_## UPPER_NAME].trees[idx]; \\\n+   return (*state->streams[LTO_DECL_STREAM_## UPPER_NAME])[idx]; \\\n } \\\n \\\n static inline unsigned int \\\n lto_file_decl_data_num_ ## name ## s (struct lto_file_decl_data *data) \\\n { \\\n   struct lto_in_decl_state *state = data->current_decl_state; \\\n-  return state->streams[LTO_DECL_STREAM_## UPPER_NAME].size; \\\n+  return vec_safe_length (state->streams[LTO_DECL_STREAM_## UPPER_NAME]); \\\n }\n \n \n@@ -421,18 +420,6 @@ struct lto_symtab_encoder_iterator\n \n \n \n-\n-/* Mapping from indices to trees.  */\n-struct GTY(()) lto_tree_ref_table\n-{\n-  /* Array of referenced trees . */\n-  tree * GTY((length (\"%h.size\"))) trees;\n-\n-  /* Size of array. */\n-  unsigned int size;\n-};\n-\n-\n /* The lto_tree_ref_encoder struct is used to encode trees into indices. */\n \n struct lto_tree_ref_encoder\n@@ -446,7 +433,7 @@ struct lto_tree_ref_encoder\n struct GTY(()) lto_in_decl_state\n {\n   /* Array of lto_in_decl_buffers to store type and decls streams. */\n-  struct lto_tree_ref_table streams[LTO_N_DECL_STREAMS];\n+  vec<tree, va_gc> *streams[LTO_N_DECL_STREAMS];\n \n   /* If this in-decl state is associated with a function. FN_DECL\n      point to the FUNCTION_DECL. */"}, {"sha": "329da66a56d0ce205a6327af80876d47b0e401e6", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c71e9df38dc3260fc21d8e8024b53d6dd3f7ac3/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c71e9df38dc3260fc21d8e8024b53d6dd3f7ac3/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=9c71e9df38dc3260fc21d8e8024b53d6dd3f7ac3", "patch": "@@ -1,3 +1,8 @@\n+2014-11-20  Trevor Saunders  <tsaunders@mozilla.com>\n+\n+\t* lto.c (lto_read_in_decl_state): Adjust.\n+\t(lto_fixup_state): Likewise.\n+\n 2014-11-17  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* lto.c (lto_read_decls): Do not rebuild DECL_FUNCTION_SPECIFIC_TARGET."}, {"sha": "4cb99f1f7007944c8fb869593a5e62759c943698", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c71e9df38dc3260fc21d8e8024b53d6dd3f7ac3/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c71e9df38dc3260fc21d8e8024b53d6dd3f7ac3/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=9c71e9df38dc3260fc21d8e8024b53d6dd3f7ac3", "patch": "@@ -260,13 +260,15 @@ lto_read_in_decl_state (struct data_in *data_in, const uint32_t *data,\n   for (i = 0; i < LTO_N_DECL_STREAMS; i++)\n     {\n       uint32_t size = *data++;\n-      tree *decls = ggc_vec_alloc<tree> (size);\n+      vec<tree, va_gc> *decls = NULL;\n+      vec_alloc (decls, size);\n \n       for (j = 0; j < size; j++)\n-\tdecls[j] = streamer_tree_cache_get_tree (data_in->reader_cache, data[j]);\n+\tvec_safe_push (decls,\n+\t\t       streamer_tree_cache_get_tree (data_in->reader_cache,\n+\t\t\t\t\t\t     data[j]));\n \n-      state->streams[i].size = size;\n-      state->streams[i].trees = decls;\n+      state->streams[i] = decls;\n       data += size;\n     }\n \n@@ -2798,20 +2800,19 @@ static void\n lto_fixup_state (struct lto_in_decl_state *state)\n {\n   unsigned i, si;\n-  struct lto_tree_ref_table *table;\n \n   /* Although we only want to replace FUNCTION_DECLs and VAR_DECLs,\n      we still need to walk from all DECLs to find the reachable\n      FUNCTION_DECLs and VAR_DECLs.  */\n   for (si = 0; si < LTO_N_DECL_STREAMS; si++)\n     {\n-      table = &state->streams[si];\n-      for (i = 0; i < table->size; i++)\n+      vec<tree, va_gc> *trees = state->streams[si];\n+      for (i = 0; i < vec_safe_length (trees); i++)\n \t{\n-\t  tree *tp = table->trees + i;\n-\t  if (VAR_OR_FUNCTION_DECL_P (*tp)\n-\t      && (TREE_PUBLIC (*tp) || DECL_EXTERNAL (*tp)))\n-\t    *tp = lto_symtab_prevailing_decl (*tp);\n+\t  tree t = (*trees)[i];\n+\t  if (VAR_OR_FUNCTION_DECL_P (t)\n+\t      && (TREE_PUBLIC (t) || DECL_EXTERNAL (t)))\n+\t    (*trees)[i] = lto_symtab_prevailing_decl (t);\n \t}\n     }\n }"}]}