{"sha": "8c2b7f79721cb9ef50d996ef2073210e7402c69a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGMyYjdmNzk3MjFjYjllZjUwZDk5NmVmMjA3MzIxMGU3NDAyYzY5YQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-04-24T12:10:52Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-04-24T12:10:52Z"}, "message": "re PR c/63357 (Warn for P && P and P || P  (same expression used multiple times in a condition))\n\n\tPR c/63357\n\t* c-common.c (warn_logical_operator): Warn if the operands have the\n\tsame expressions.\n\n\t* doc/invoke.texi: Update description of -Wlogical-op.\n\n\t* c-c++-common/Wlogical-op-1.c: New test.\n\nFrom-SVN: r222408", "tree": {"sha": "109667391d09834474b25b70680f05eff7d00712", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/109667391d09834474b25b70680f05eff7d00712"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c2b7f79721cb9ef50d996ef2073210e7402c69a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c2b7f79721cb9ef50d996ef2073210e7402c69a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c2b7f79721cb9ef50d996ef2073210e7402c69a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c2b7f79721cb9ef50d996ef2073210e7402c69a/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4853031ec832b9fd29e0894016038cc9f83e31cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4853031ec832b9fd29e0894016038cc9f83e31cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4853031ec832b9fd29e0894016038cc9f83e31cc"}], "stats": {"total": 165, "additions": 151, "deletions": 14}, "files": [{"sha": "d489b4a7d85f5cdaac489dfab593a6178f2f497d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c2b7f79721cb9ef50d996ef2073210e7402c69a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c2b7f79721cb9ef50d996ef2073210e7402c69a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c2b7f79721cb9ef50d996ef2073210e7402c69a", "patch": "@@ -3,6 +3,9 @@\n \tPR c/61534\n \t* input.h (from_macro_expansion_at): Define.\n \n+\tPR c/63357\n+\t* doc/invoke.texi: Update description of -Wlogical-op.\n+\n 2015-04-24  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \t* config/arm/unknown-elf.h (ASM_OUTPUT_ALIGNED_DECL_LOCAL): fix"}, {"sha": "1eb27cd4bcec7c010ea007e4d900169202ee9b2f", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c2b7f79721cb9ef50d996ef2073210e7402c69a/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c2b7f79721cb9ef50d996ef2073210e7402c69a/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=8c2b7f79721cb9ef50d996ef2073210e7402c69a", "patch": "@@ -4,6 +4,10 @@\n \t* c-common.c (c_fully_fold_internal): Use OPT_Wshift_count_negative\n \tand OPT_Wshift_count_overflow.\n \n+\tPR c/63357\n+\t* c-common.c (warn_logical_operator): Warn if the operands have the\n+\tsame expressions.\n+\n 2015-04-24  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/61534"}, {"sha": "9797e1701d3fc54d409943fea7e2a93f7897dbd7", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c2b7f79721cb9ef50d996ef2073210e7402c69a/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c2b7f79721cb9ef50d996ef2073210e7402c69a/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=8c2b7f79721cb9ef50d996ef2073210e7402c69a", "patch": "@@ -1781,22 +1781,35 @@ warn_logical_operator (location_t location, enum tree_code code, tree type,\n     return;\n \n   /* If both expressions have the same operand, if we can merge the\n-     ranges, and if the range test is always false, then warn.  */\n+     ranges, ...  */\n   if (operand_equal_p (lhs, rhs, 0)\n       && merge_ranges (&in_p, &low, &high, in0_p, low0, high0,\n-\t\t       in1_p, low1, high1)\n-      && 0 != (tem = build_range_check (UNKNOWN_LOCATION,\n-\t\t\t\t\ttype, lhs, in_p, low, high))\n-      && integer_zerop (tem))\n+\t\t       in1_p, low1, high1))\n     {\n-      if (or_op)\n-        warning_at (location, OPT_Wlogical_op,\n-                    \"logical %<or%> \"\n-                    \"of collectively exhaustive tests is always true\");\n-      else\n-        warning_at (location, OPT_Wlogical_op,\n-                    \"logical %<and%> \"\n-                    \"of mutually exclusive tests is always false\");\n+      tem = build_range_check (UNKNOWN_LOCATION, type, lhs, in_p, low, high);\n+      /* ... and if the range test is always false, then warn.  */\n+      if (tem && integer_zerop (tem))\n+\t{\n+\t  if (or_op)\n+\t    warning_at (location, OPT_Wlogical_op,\n+\t\t\t\"logical %<or%> of collectively exhaustive tests is \"\n+\t\t\t\"always true\");\n+\t  else\n+\t    warning_at (location, OPT_Wlogical_op,\n+\t\t\t\"logical %<and%> of mutually exclusive tests is \"\n+\t\t\t\"always false\");\n+\t}\n+      /* Or warn if the operands have exactly the same range, e.g.\n+\t A > 0 && A > 0.  */\n+      else if (low0 == low1 && high0 == high1)\n+\t{\n+\t  if (or_op)\n+\t    warning_at (location, OPT_Wlogical_op,\n+\t\t\t\"logical %<or%> of equal expressions\");\n+\t  else\n+\t    warning_at (location, OPT_Wlogical_op,\n+\t\t\t\"logical %<and%> of equal expressions\");\n+\t}\n     }\n }\n "}, {"sha": "52e2e2218c120afa815368dc434caad085018c06", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c2b7f79721cb9ef50d996ef2073210e7402c69a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c2b7f79721cb9ef50d996ef2073210e7402c69a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=8c2b7f79721cb9ef50d996ef2073210e7402c69a", "patch": "@@ -4936,7 +4936,12 @@ programmer intended to use @code{strcmp}.  This warning is enabled by\n @opindex Wno-logical-op\n Warn about suspicious uses of logical operators in expressions.\n This includes using logical operators in contexts where a\n-bit-wise operator is likely to be expected.\n+bit-wise operator is likely to be expected.  Also warns when\n+the operands of a logical operator are the same:\n+@smallexample\n+extern int a;\n+if (a < 0 && a < 0) @{ @dots{} @}\n+@end smallexample\n \n @item -Wlogical-not-parentheses\n @opindex Wlogical-not-parentheses"}, {"sha": "375ad1d5459c00261b12b9ac9165ce32fb1e9e57", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c2b7f79721cb9ef50d996ef2073210e7402c69a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c2b7f79721cb9ef50d996ef2073210e7402c69a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8c2b7f79721cb9ef50d996ef2073210e7402c69a", "patch": "@@ -3,6 +3,9 @@\n \tPR c/65830\n \t* c-c++-common/pr65830.c: New test.\n \n+\tPR c/63357\n+\t* c-c++-common/Wlogical-op-1.c: New test.\n+\n 2015-04-24  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/61534"}, {"sha": "33d4f3893df239ce81d1228fc1b54642efc3d670", "filename": "gcc/testsuite/c-c++-common/Wlogical-op-1.c", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c2b7f79721cb9ef50d996ef2073210e7402c69a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWlogical-op-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c2b7f79721cb9ef50d996ef2073210e7402c69a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWlogical-op-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWlogical-op-1.c?ref=8c2b7f79721cb9ef50d996ef2073210e7402c69a", "patch": "@@ -0,0 +1,109 @@\n+/* PR c/63357 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wlogical-op\" } */\n+\n+#ifndef __cplusplus\n+# define bool _Bool\n+# define true 1\n+# define false 0\n+#endif\n+\n+extern int bar (void);\n+extern int *p;\n+struct R { int a, b; } S;\n+\n+void\n+andfn (int a, int b)\n+{\n+  if (a && a) {}\t\t/* { dg-warning \"logical .and. of equal expressions\" } */\n+  if (!a && !a) {}\t\t/* { dg-warning \"logical .and. of equal expressions\" } */\n+  if (!!a && !!a) {}\t\t/* { dg-warning \"logical .and. of equal expressions\" } */\n+  if (a > 0 && a > 0) {}\t/* { dg-warning \"logical .and. of equal expressions\" } */\n+  if (a < 0 && a < 0) {}\t/* { dg-warning \"logical .and. of equal expressions\" } */\n+  if (a == 0 && a == 0) {}\t/* { dg-warning \"logical .and. of equal expressions\" } */\n+  if (a <= 0 && a <= 0) {}\t/* { dg-warning \"logical .and. of equal expressions\" } */\n+  if (a >= 0 && a >= 0) {}\t/* { dg-warning \"logical .and. of equal expressions\" } */\n+  if (a == 0 && !(a != 0)) {}\t/* { dg-warning \"logical .and. of equal expressions\" } */\n+\n+  if (a && a && a) {}\t\t/* { dg-warning \"logical .and. of equal expressions\" } */\n+  if ((a + 1) && (a + 1)) {}\t/* { dg-warning \"logical .and. of equal expressions\" } */\n+  if ((10 * a) && (a * 10)) {}\t/* { dg-warning \"logical .and. of equal expressions\" } */\n+  if (!!a && a) {}\t\t/* { dg-warning \"logical .and. of equal expressions\" } */\n+\n+  if (*p && *p) {}\t\t/* { dg-warning \"logical .and. of equal expressions\" } */\n+  if (p[0] && p[0]) {}\t\t/* { dg-warning \"logical .and. of equal expressions\" } */\n+  if (S.a && S.a) {}\t\t/* { dg-warning \"logical .and. of equal expressions\" } */\n+  if ((bool) a && (bool) a) {}\t/* { dg-warning \"logical .and. of equal expressions\" } */\n+  if ((unsigned) a && a) {}\t/* { dg-warning \"logical .and. of equal expressions\" } */\n+\n+  /* Stay quiet here.  */\n+  if (a && b) {}\n+  if (!a && !b) {}\n+  if (!!a && !!b) {}\n+  if (a > 0 && b > 0) {}\n+  if (a < 0 && b < 0) {}\n+  if (a == 0 && b == 0) {}\n+  if (a <= 0 && b <= 0) {}\n+  if (a >= 0 && b >= 0) {}\n+\n+  if (a > 0 && a > 1) {}\n+  if (a > -2 && a > 1) {}\n+  if (a && (short) a) {}\n+  if ((char) a && a) {}\n+  if (++a && a) {}\n+  if (++a && ++a) {}\n+  if (a && --a) {}\n+  if (a && a / 2) {}\n+  if (bar () && bar ()) {}\n+  if (p && *p) {}\n+  if (p[0] && p[1]) {}\n+  if (S.a && S.b) {}\n+}\n+\n+void\n+orfn (int a, int b)\n+{\n+  if (a || a) {}\t\t/* { dg-warning \"logical .or. of equal expressions\" } */\n+  if (!a || !a) {}\t\t/* { dg-warning \"logical .or. of equal expressions\" } */\n+  if (!!a || !!a) {}\t\t/* { dg-warning \"logical .or. of equal expressions\" } */\n+  if (a > 0 || a > 0) {}\t/* { dg-warning \"logical .or. of equal expressions\" } */\n+  if (a < 0 || a < 0) {}\t/* { dg-warning \"logical .or. of equal expressions\" } */\n+  if (a == 0 || a == 0) {}\t/* { dg-warning \"logical .or. of equal expressions\" } */\n+  if (a <= 0 || a <= 0) {}\t/* { dg-warning \"logical .or. of equal expressions\" } */\n+  if (a >= 0 || a >= 0) {}\t/* { dg-warning \"logical .or. of equal expressions\" } */\n+  if (a == 0 || !(a != 0)) {}\t/* { dg-warning \"logical .or. of equal expressions\" } */\n+\n+  if (a || a || a) {}\t\t/* { dg-warning \"logical .or. of equal expressions\" } */\n+  if ((a + 1) || (a + 1)) {}\t/* { dg-warning \"logical .or. of equal expressions\" } */\n+  if ((10 * a) || (a * 10)) {}\t/* { dg-warning \"logical .or. of equal expressions\" } */\n+  if (!!a || a) {}\t\t/* { dg-warning \"logical .or. of equal expressions\" } */\n+\n+  if (*p || *p) {}\t\t/* { dg-warning \"logical .or. of equal expressions\" } */\n+  if (p[0] || p[0]) {}\t\t/* { dg-warning \"logical .or. of equal expressions\" } */\n+  if (S.a || S.a) {}\t\t/* { dg-warning \"logical .or. of equal expressions\" } */\n+  if ((bool) a || (bool) a) {}\t/* { dg-warning \"logical .or. of equal expressions\" } */\n+  if ((unsigned) a || a) {}\t/* { dg-warning \"logical .or. of equal expressions\" } */\n+\n+  /* Stay quiet here.  */\n+  if (a || b) {}\n+  if (!a || !b) {}\n+  if (!!a || !!b) {}\n+  if (a > 0 || b > 0) {}\n+  if (a < 0 || b < 0) {}\n+  if (a == 0 || b == 0) {}\n+  if (a <= 0 || b <= 0) {}\n+  if (a >= 0 || b >= 0) {}\n+\n+  if (a > 0 || a > 1) {}\n+  if (a > -2 || a > 1) {}\n+  if (a || (short) a) {}\n+  if ((char) a || a) {}\n+  if (++a || a) {}\n+  if (++a || ++a) {}\n+  if (a || --a) {}\n+  if (a || a / 2) {}\n+  if (bar () || bar ()) {}\n+  if (p || *p) {}\n+  if (p[0] || p[1]) {}\n+  if (S.a || S.b) {}\n+}"}]}