{"sha": "4b8ae2b07254fc6a7b963c5213dafd5ef7eddef2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI4YWUyYjA3MjU0ZmM2YTdiOTYzYzUyMTNkYWZkNWVmN2VkZGVmMg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-16T13:25:00Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-16T13:25:00Z"}, "message": "[multiple changes]\n\n2015-10-16  Gary Dismukes  <dismukes@adacore.com>\n\n\t* prj.adb, sem_util.adb, exp_ch6.adb: Minor reformatting.\n\n2015-10-16  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch5.adb (Expand_Formal_Container_Element_Loop): Modify\n\texpansion to allow element iteration over formal containers\n\twhose elements are indefinite types.\n\n2015-10-16  Doug Rupp  <rupp@adacore.com>\n\n\t* s-taprop-linux.adb (Monotonic_Clock): Call clock_gettime\n\tinstead of gettimeofday.\n\t* s-osinte-linux.ads (clock_gettime): New imported subprogram.\n\nFrom-SVN: r228901", "tree": {"sha": "8e0cfed87ae6cbeda59044b23b7595d4edcb590f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e0cfed87ae6cbeda59044b23b7595d4edcb590f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b8ae2b07254fc6a7b963c5213dafd5ef7eddef2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b8ae2b07254fc6a7b963c5213dafd5ef7eddef2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b8ae2b07254fc6a7b963c5213dafd5ef7eddef2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b8ae2b07254fc6a7b963c5213dafd5ef7eddef2/comments", "author": null, "committer": null, "parents": [{"sha": "79b5eeb0e359cfa6e9e72a4e4696362a0e7148f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79b5eeb0e359cfa6e9e72a4e4696362a0e7148f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79b5eeb0e359cfa6e9e72a4e4696362a0e7148f4"}], "stats": {"total": 146, "additions": 90, "deletions": 56}, "files": [{"sha": "c62e7a21d1a16cbcdd3ae95a46533ccb9f0f506b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b8ae2b07254fc6a7b963c5213dafd5ef7eddef2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b8ae2b07254fc6a7b963c5213dafd5ef7eddef2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4b8ae2b07254fc6a7b963c5213dafd5ef7eddef2", "patch": "@@ -1,3 +1,19 @@\n+2015-10-16  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* prj.adb, sem_util.adb, exp_ch6.adb: Minor reformatting.\n+\n+2015-10-16  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_Formal_Container_Element_Loop): Modify\n+\texpansion to allow element iteration over formal containers\n+\twhose elements are indefinite types.\n+\n+2015-10-16  Doug Rupp  <rupp@adacore.com>\n+\n+\t* s-taprop-linux.adb (Monotonic_Clock): Call clock_gettime\n+\tinstead of gettimeofday.\n+\t* s-osinte-linux.ads (clock_gettime): New imported subprogram.\n+\n 2015-10-16  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_ch6.adb (Make_Build_In_Place_Call_In_Object_Declaration):"}, {"sha": "29113e5c863d934aa810bfd609a0accb82b009fc", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 54, "deletions": 22, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b8ae2b07254fc6a7b963c5213dafd5ef7eddef2/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b8ae2b07254fc6a7b963c5213dafd5ef7eddef2/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=4b8ae2b07254fc6a7b963c5213dafd5ef7eddef2", "patch": "@@ -2899,8 +2899,23 @@ package body Exp_Ch5 is\n       --       Cursor := Next (Container, Cursor);\n       --    end loop;\n \n+      --   However this expansion is not legal if the element is indefinite.\n+      --   In that case we create a block to hold a variable declaration\n+      --   initialized with a call to Element, and generate:\n+\n+      --    Cursor : Cursor_type := First (Container);\n+      --    while Has_Element (Cursor, Container) loop\n+      --       declare\n+      --          Elmt : Element-Type := Element (Container, Cursor);\n+      --       begin\n+      --          <original loop statements>\n+      --          Cursor := Next (Container, Cursor);\n+      --       end;\n+      --    end loop;\n+\n       Build_Formal_Container_Iteration\n         (N, Container, Cursor, Init, Advance, New_Loop);\n+      Append_To (Stats, Advance);\n \n       Set_Ekind (Cursor, E_Variable);\n       Insert_Action (N, Init);\n@@ -2912,33 +2927,50 @@ package body Exp_Ch5 is\n           Defining_Identifier => Element,\n           Object_Definition   => New_Occurrence_Of (Etype (Element_Op), Loc));\n \n-      --  The element is only modified in expanded code, so it appears as\n-      --  unassigned to the warning machinery. We must suppress this spurious\n-      --  warning explicitly.\n+      if not Is_Constrained (Etype (Element_Op)) then\n+         Set_Expression (Elmt_Decl,\n+           Make_Function_Call (Loc,\n+             Name                   => New_Occurrence_Of (Element_Op, Loc),\n+             Parameter_Associations => New_List (\n+               New_Occurrence_Of (Container, Loc),\n+               New_Occurrence_Of (Cursor, Loc))));\n+\n+         Set_Statements (New_Loop,\n+           New_List\n+             (Make_Block_Statement (Loc,\n+                Declarations => New_List (Elmt_Decl),\n+                Handled_Statement_Sequence =>\n+                  Make_Handled_Sequence_Of_Statements (Loc,\n+                    Statements =>  Stats))));\n \n-      Set_Warnings_Off (Element);\n+      else\n+         Elmt_Ref :=\n+           Make_Assignment_Statement (Loc,\n+             Name       => New_Occurrence_Of (Element, Loc),\n+             Expression =>\n+               Make_Function_Call (Loc,\n+                 Name                   => New_Occurrence_Of (Element_Op, Loc),\n+                 Parameter_Associations => New_List (\n+                   New_Occurrence_Of (Container, Loc),\n+                   New_Occurrence_Of (Cursor, Loc))));\n \n-      Elmt_Ref :=\n-        Make_Assignment_Statement (Loc,\n-          Name       => New_Occurrence_Of (Element, Loc),\n-          Expression =>\n-            Make_Function_Call (Loc,\n-              Name                   => New_Occurrence_Of (Element_Op, Loc),\n-              Parameter_Associations => New_List (\n-                New_Occurrence_Of (Container, Loc),\n-                New_Occurrence_Of (Cursor, Loc))));\n+         Prepend (Elmt_Ref, Stats);\n \n-      Prepend (Elmt_Ref, Stats);\n-      Append_To (Stats, Advance);\n+         --  The loop is rewritten as a block, to hold the element declaration\n \n-      --  The loop is rewritten as a block, to hold the element declaration\n+         New_Loop :=\n+           Make_Block_Statement (Loc,\n+             Declarations               => New_List (Elmt_Decl),\n+             Handled_Statement_Sequence =>\n+               Make_Handled_Sequence_Of_Statements (Loc,\n+                 Statements =>  New_List (New_Loop)));\n+      end if;\n \n-      New_Loop :=\n-        Make_Block_Statement (Loc,\n-          Declarations               => New_List (Elmt_Decl),\n-          Handled_Statement_Sequence =>\n-            Make_Handled_Sequence_Of_Statements (Loc,\n-              Statements =>  New_List (New_Loop)));\n+      --  The element is only modified in expanded code, so it appears as\n+      --  unassigned to the warning machinery. We must suppress this spurious\n+      --  warning explicitly.\n+\n+      Set_Warnings_Off (Element);\n \n       Rewrite (N, New_Loop);\n "}, {"sha": "0a3095338afbfe37ae5c89ccf853dc46d6af62e1", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b8ae2b07254fc6a7b963c5213dafd5ef7eddef2/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b8ae2b07254fc6a7b963c5213dafd5ef7eddef2/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=4b8ae2b07254fc6a7b963c5213dafd5ef7eddef2", "patch": "@@ -8979,8 +8979,8 @@ package body Exp_Ch6 is\n          Add_Unconstrained_Actuals_To_Build_In_Place_Call\n            (Func_Call, Function_Id, Alloc_Form => Caller_Allocation);\n \n-      --  The allocation for indefinite library level objects occurs on the\n-      --  heap as opposed to the secondary stack. This accomodates DLLs where\n+      --  The allocation for indefinite library-level objects occurs on the\n+      --  heap as opposed to the secondary stack. This accommodates DLLs where\n       --  the secondary stack is destroyed after each library unload. This is\n       --  a hybrid mechanism where a stack-allocated object lives on the heap.\n \n@@ -8993,7 +8993,7 @@ package body Exp_Ch6 is\n \n          --  Create a finalization master for the access result type to ensure\n          --  that the heap allocation can properly chain the object and later\n-         --  finalize it when the library unit does out of scope.\n+         --  finalize it when the library unit goes out of scope.\n \n          if Needs_Finalization (Etype (Func_Call)) then\n             Build_Finalization_Master"}, {"sha": "d1c0b169f06f31d466672e4ca40d6fa19b488e9f", "filename": "gcc/ada/prj.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b8ae2b07254fc6a7b963c5213dafd5ef7eddef2/gcc%2Fada%2Fprj.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b8ae2b07254fc6a7b963c5213dafd5ef7eddef2/gcc%2Fada%2Fprj.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.adb?ref=4b8ae2b07254fc6a7b963c5213dafd5ef7eddef2", "patch": "@@ -599,7 +599,7 @@ package body Prj is\n          --  This set is needed to ensure that we do not handle the same\n          --  project twice in the context of aggregate libraries.\n          --  Since duplicate project names are possible in the context of\n-         --  aggregated projects, we need to check the full paths\n+         --  aggregated projects, we need to check the full paths.\n \n          procedure Recursive_Check\n            (Project               : Project_Id;"}, {"sha": "2bcf56e500dde553256b6aa63ccbac0ab69481d3", "filename": "gcc/ada/s-osinte-linux.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b8ae2b07254fc6a7b963c5213dafd5ef7eddef2/gcc%2Fada%2Fs-osinte-linux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b8ae2b07254fc6a7b963c5213dafd5ef7eddef2/gcc%2Fada%2Fs-osinte-linux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-linux.ads?ref=4b8ae2b07254fc6a7b963c5213dafd5ef7eddef2", "patch": "@@ -224,6 +224,10 @@ package System.OS_Interface is\n    subtype timeval   is System.Linux.timeval;\n    subtype clockid_t is System.Linux.clockid_t;\n \n+   function clock_gettime\n+     (clock_id : clockid_t; tp : access timespec) return int;\n+   pragma Import (C, clock_gettime, \"clock_gettime\");\n+\n    function clock_getres\n      (clock_id : clockid_t;\n       res      : access timespec) return int;"}, {"sha": "2aad75ebeadb7bf02aa8fc7fd1c50f5a68c6fb2c", "filename": "gcc/ada/s-taprop-linux.adb", "status": "modified", "additions": 6, "deletions": 24, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b8ae2b07254fc6a7b963c5213dafd5ef7eddef2/gcc%2Fada%2Fs-taprop-linux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b8ae2b07254fc6a7b963c5213dafd5ef7eddef2/gcc%2Fada%2Fs-taprop-linux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-linux.adb?ref=4b8ae2b07254fc6a7b963c5213dafd5ef7eddef2", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2014, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2015, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -39,7 +39,6 @@ pragma Polling (Off);\n --  operations. It causes infinite loops and other problems.\n \n with Interfaces.C;\n-with Interfaces.C.Extensions;\n \n with System.Task_Info;\n with System.Tasking.Debug;\n@@ -64,7 +63,6 @@ package body System.Task_Primitives.Operations is\n    use System.Tasking.Debug;\n    use System.Tasking;\n    use Interfaces.C;\n-   use Interfaces.C.Extensions;\n    use System.OS_Interface;\n    use System.Parameters;\n    use System.OS_Primitives;\n@@ -629,30 +627,14 @@ package body System.Task_Primitives.Operations is\n    ---------------------\n \n    function Monotonic_Clock return Duration is\n-      use Interfaces;\n-\n-      procedure timeval_to_duration\n-        (T    : not null access timeval;\n-         sec  : not null access C.Extensions.long_long;\n-         usec : not null access C.long);\n-      pragma Import (C, timeval_to_duration, \"__gnat_timeval_to_duration\");\n-\n-      Micro  : constant := 10**6;\n-      sec    : aliased C.Extensions.long_long;\n-      usec   : aliased C.long;\n-      TV     : aliased timeval;\n+      TS     : aliased timespec;\n       Result : int;\n-\n-      function gettimeofday\n-        (Tv : access timeval;\n-         Tz : System.Address := System.Null_Address) return int;\n-      pragma Import (C, gettimeofday, \"gettimeofday\");\n-\n    begin\n-      Result := gettimeofday (TV'Access, System.Null_Address);\n+      Result := clock_gettime\n+        (clock_id => OSC.CLOCK_RT_Ada, tp => TS'Unchecked_Access);\n       pragma Assert (Result = 0);\n-      timeval_to_duration (TV'Access, sec'Access, usec'Access);\n-      return Duration (sec) + Duration (usec) / Micro;\n+\n+      return To_Duration (TS);\n    end Monotonic_Clock;\n \n    -------------------"}, {"sha": "214ec62ad7ff809813f9010ceff8a650a448d818", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b8ae2b07254fc6a7b963c5213dafd5ef7eddef2/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b8ae2b07254fc6a7b963c5213dafd5ef7eddef2/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=4b8ae2b07254fc6a7b963c5213dafd5ef7eddef2", "patch": "@@ -11504,7 +11504,7 @@ package body Sem_Util is\n       then\n          return Is_EVF_Expression (Expression (N));\n \n-      --  Attributes 'Loop_Entry, 'Old and 'Update are an EVF expression when\n+      --  Attributes 'Loop_Entry, 'Old, and 'Update are EVF expressions when\n       --  their prefix denotes an EVF expression.\n \n       elsif Nkind (N) = N_Attribute_Reference\n@@ -14214,8 +14214,8 @@ package body Sem_Util is\n    --  Start of processing Mark_Coextensions\n \n    begin\n-      --  An allocator that appears on the right hand side of an assignment is\n-      --  treated as a potentially dynamic coextension when the right hand side\n+      --  An allocator that appears on the right-hand side of an assignment is\n+      --  treated as a potentially dynamic coextension when the right-hand side\n       --  is an allocator or a qualified expression.\n \n       --    Obj := new ...'(new Coextension ...);\n@@ -14227,7 +14227,7 @@ package body Sem_Util is\n \n       --  An allocator that appears within the expression of a simple return\n       --  statement is treated as a potentially dynamic coextension when the\n-      --  expression is either aggregate, allocator or qualified expression.\n+      --  expression is either aggregate, allocator, or qualified expression.\n \n       --    return (new Coextension ...);\n       --    return new ...'(new Coextension ...);\n@@ -14257,8 +14257,8 @@ package body Sem_Util is\n              or else\n                Nkind (Parent (Context_Nod)) = N_Extended_Return_Statement;\n \n-      --  This routine should not be called with constructs which may not\n-      --  contain coextensions.\n+      --  This routine should not be called with constructs that cannot contain\n+      --  coextensions.\n \n       else\n          raise Program_Error;"}]}