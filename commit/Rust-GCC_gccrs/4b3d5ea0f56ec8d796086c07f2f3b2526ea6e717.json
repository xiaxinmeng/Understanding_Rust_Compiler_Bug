{"sha": "4b3d5ea0f56ec8d796086c07f2f3b2526ea6e717", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGIzZDVlYTBmNTZlYzhkNzk2MDg2YzA3ZjJmM2IyNTI2ZWE2ZTcxNw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-04T16:44:05Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-04T16:44:05Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1423", "tree": {"sha": "bcfce10b6911fee745659ca2c01c33218a6ce5ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bcfce10b6911fee745659ca2c01c33218a6ce5ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b3d5ea0f56ec8d796086c07f2f3b2526ea6e717", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b3d5ea0f56ec8d796086c07f2f3b2526ea6e717", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b3d5ea0f56ec8d796086c07f2f3b2526ea6e717", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b3d5ea0f56ec8d796086c07f2f3b2526ea6e717/comments", "author": null, "committer": null, "parents": [{"sha": "2416cbcd8b559c89ce1a664a14583b8006b58347", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2416cbcd8b559c89ce1a664a14583b8006b58347", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2416cbcd8b559c89ce1a664a14583b8006b58347"}], "stats": {"total": 13, "additions": 11, "deletions": 2}, "files": [{"sha": "ddd5614b539d9263a119c610ca13b75268f83bfd", "filename": "gcc/fold-const.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3d5ea0f56ec8d796086c07f2f3b2526ea6e717/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3d5ea0f56ec8d796086c07f2f3b2526ea6e717/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=4b3d5ea0f56ec8d796086c07f2f3b2526ea6e717", "patch": "@@ -1405,8 +1405,17 @@ fold_convert (t, arg1)\n \t    l = real_value_from_int_cst (TYPE_MIN_VALUE (type)),\n \t    x = TREE_REAL_CST (arg1),\n \t    u = real_value_from_int_cst (TYPE_MAX_VALUE (type));\n-\t  if (! ((REAL_VALUES_LESS (l, x) || REAL_VALUES_EQUAL (l, x))\n-\t\t && (REAL_VALUES_LESS (x, u) || REAL_VALUES_EQUAL (x, u))))\n+\t  /* See if X will be in range after truncation towards 0.\n+\t     To compensate for truncation, move the bounds away from 0,\n+\t     but reject if X exactly equals the adjusted bounds.  */\n+#ifdef REAL_ARITHMETIC\n+\t  REAL_ARITHMETIC (l, MINUS_EXPR, l, dconst1);\n+\t  REAL_ARITHMETIC (u, PLUS_EXPR, u, dconst1);\n+#else\n+\t  l--;\n+\t  u++;\n+#endif\n+\t  if (! (REAL_VALUES_LESS (l, x) && REAL_VALUES_LESS (x, u)))\n \t    {\n \t      warning (\"real constant out of range for integer conversion\");\n \t      return t;"}]}