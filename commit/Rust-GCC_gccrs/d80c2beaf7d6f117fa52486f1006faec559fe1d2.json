{"sha": "d80c2beaf7d6f117fa52486f1006faec559fe1d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDgwYzJiZWFmN2Q2ZjExN2ZhNTI0ODZmMTAwNmZhZWM1NTlmZTFkMg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2014-10-25T00:22:02Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2014-10-25T00:22:02Z"}, "message": "Optimize powerpc*-*-linux* 32-bit classic hard/soft float hardfp/soft-fp use.\n\nContinuing the cleanups of libgcc soft-fp configuration for\npowerpc*-*-linux* in preparation for implementing\nTARGET_ATOMIC_ASSIGN_EXPAND_FENV for soft-float and e500, this patch\noptimizes the choice of which functions to build for the 32-bit\nclassic hard-float and soft-float cases.  (e500 will be dealt with in\na separate patch which will need to add new features to t-hardfp and\nt-softfp; this patch keeps the status quo for e500.)\n\nFor hard-float, while the functions in question are part of the libgcc\nABI there is no need for them to contain software floating point code:\nno newly built code should use them, and if anything does use them\nit's most efficient (space and speed) for them to pass straight\nthrough to floating-point hardware instructions; this case is made to\nuse t-hardfp to achieve that.  For soft-float, direct use of soft-fp\nfunctions for operations involving DImode or unsigned integers is more\nefficient than using the libgcc2.c versions of those operations to\nconvert to operations on other types (which then end up calling\nsoft-fp functions for those other types, possibly more than once);\nthis case is thus stopped from using t-softfp-excl.  (A future patch\nwill stop the e500 cases from using t-softfp-excl as well.)\n\nTested with no regressions for crosses to powerpc-linux-gnu (soft\nfloat and classic hard float); also checked that the same set of\nsymbols and versions is exported from shared libgcc before and after\nthe patch.\n\n\t* configure.ac (ppc_fp_type): Set variable on powerpc*-*-linux*.\n\t* configure: Regenerate.\n\t* config.host (powerpc*-*-linux*): Use $ppc_fp_type to determine\n\tadditions to tmake_file.  Use t-hardfp-sfdf and t-hardfp instead\n\tof soft-fp for 32-bit classic hard float.  Do not use\n\tt-softfp-excl for soft float.\n\nFrom-SVN: r216687", "tree": {"sha": "1cffab7659996d78e41096a87369aafe3f546bdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1cffab7659996d78e41096a87369aafe3f546bdb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d80c2beaf7d6f117fa52486f1006faec559fe1d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d80c2beaf7d6f117fa52486f1006faec559fe1d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d80c2beaf7d6f117fa52486f1006faec559fe1d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d80c2beaf7d6f117fa52486f1006faec559fe1d2/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f849c161a29e9a5f73ae3d23e8d980119d53c9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f849c161a29e9a5f73ae3d23e8d980119d53c9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f849c161a29e9a5f73ae3d23e8d980119d53c9e"}], "stats": {"total": 73, "additions": 71, "deletions": 2}, "files": [{"sha": "d1a3b7394da8b28b58ed81b6108f3c5914be925d", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d80c2beaf7d6f117fa52486f1006faec559fe1d2/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d80c2beaf7d6f117fa52486f1006faec559fe1d2/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=d80c2beaf7d6f117fa52486f1006faec559fe1d2", "patch": "@@ -1,3 +1,12 @@\n+2014-10-25  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* configure.ac (ppc_fp_type): Set variable on powerpc*-*-linux*.\n+\t* configure: Regenerate.\n+\t* config.host (powerpc*-*-linux*): Use $ppc_fp_type to determine\n+\tadditions to tmake_file.  Use t-hardfp-sfdf and t-hardfp instead\n+\tof soft-fp for 32-bit classic hard float.  Do not use\n+\tt-softfp-excl for soft float.\n+\n 2014-10-22  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config.host (powerpc*-*-linux*): Only use soft-fp for 32-bit"}, {"sha": "d6c7df73bbfb50b72cacda81f4c9e60938405f1f", "filename": "libgcc/config.host", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d80c2beaf7d6f117fa52486f1006faec559fe1d2/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d80c2beaf7d6f117fa52486f1006faec559fe1d2/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=d80c2beaf7d6f117fa52486f1006faec559fe1d2", "patch": "@@ -991,9 +991,23 @@ powerpc-*-rtems*)\n \t;;\n powerpc*-*-linux*)\n \ttmake_file=\"${tmake_file} rs6000/t-ppccomm rs6000/t-savresfgpr rs6000/t-crtstuff rs6000/t-linux t-dfprules rs6000/t-ppc64-fp t-slibgcc-libgcc\"\n-\tif test \"${host_address}\" = 32; then\n+\tcase $ppc_fp_type in\n+\t64)\n+\t\t;;\n+\thard)\n+\t\ttmake_file=\"${tmake_file} t-hardfp-sfdf t-hardfp\"\n+\t\t;;\n+\tsoft)\n+\t\ttmake_file=\"${tmake_file} t-softfp-sfdf t-softfp\"\n+\t\t;;\n+\te500v1|e500v2)\n \t\ttmake_file=\"${tmake_file} t-softfp-sfdf t-softfp-excl t-softfp\"\n-\tfi\n+\t\t;;\n+\t*)\n+\t\techo \"Unknown ppc_fp_type $ppc_fp_type\" 1>&2\n+\t\texit 1\n+\t\t;;\n+\tesac\n \textra_parts=\"$extra_parts ecrti.o ecrtn.o ncrti.o ncrtn.o\"\n \tmd_unwind_header=rs6000/linux-unwind.h\n \t;;"}, {"sha": "7a154db9de9bc59f7966b4e7ffad16973df2ade6", "filename": "libgcc/configure", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d80c2beaf7d6f117fa52486f1006faec559fe1d2/libgcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d80c2beaf7d6f117fa52486f1006faec559fe1d2/libgcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure?ref=d80c2beaf7d6f117fa52486f1006faec559fe1d2", "patch": "@@ -4376,6 +4376,29 @@ fi\n $as_echo \"$libgcc_cv_mips_hard_float\" >&6; }\n esac\n \n+# Determine floating-point type for powerpc*-*-linux*.\n+# Single-precision-only FPRs are not a supported configuration for\n+# this target, so are not allowed for in this test.\n+case ${host} in\n+powerpc*-*-linux*)\n+  cat > conftest.c <<EOF\n+#ifdef __powerpc64__\n+ppc_fp_type=64\n+#elif defined _SOFT_FLOAT\n+ppc_fp_type=soft\n+#elif defined _SOFT_DOUBLE\n+ppc_fp_type=e500v1\n+#elif defined __NO_FPRS__\n+ppc_fp_type=e500v2\n+#else\n+ppc_fp_type=hard\n+#endif\n+EOF\n+eval `${CC-cc} -E conftest.c | grep ppc_fp_type=`\n+rm -f conftest.c\n+;;\n+esac\n+\n # Collect host-machine-specific information.\n . ${srcdir}/config.host\n "}, {"sha": "710f15a827967528c4910d9dfa5a1f8e1faa2fc8", "filename": "libgcc/configure.ac", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d80c2beaf7d6f117fa52486f1006faec559fe1d2/libgcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d80c2beaf7d6f117fa52486f1006faec559fe1d2/libgcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure.ac?ref=d80c2beaf7d6f117fa52486f1006faec559fe1d2", "patch": "@@ -320,6 +320,29 @@ mips*-*-*)\n     [libgcc_cv_mips_hard_float=no])])\n esac\n \n+# Determine floating-point type for powerpc*-*-linux*.\n+# Single-precision-only FPRs are not a supported configuration for\n+# this target, so are not allowed for in this test.\n+case ${host} in\n+powerpc*-*-linux*)\n+  cat > conftest.c <<EOF\n+#ifdef __powerpc64__\n+ppc_fp_type=64\n+#elif defined _SOFT_FLOAT\n+ppc_fp_type=soft\n+#elif defined _SOFT_DOUBLE\n+ppc_fp_type=e500v1\n+#elif defined __NO_FPRS__\n+ppc_fp_type=e500v2\n+#else\n+ppc_fp_type=hard\n+#endif\n+EOF\n+eval `${CC-cc} -E conftest.c | grep ppc_fp_type=`\n+rm -f conftest.c\n+;;\n+esac\n+\n # Collect host-machine-specific information.\n . ${srcdir}/config.host\n "}]}