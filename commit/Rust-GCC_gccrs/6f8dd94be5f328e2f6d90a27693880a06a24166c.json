{"sha": "6f8dd94be5f328e2f6d90a27693880a06a24166c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY4ZGQ5NGJlNWYzMjhlMmY2ZDkwYTI3NjkzODgwYTA2YTI0MTY2Yw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2006-04-14T00:07:48Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2006-04-14T00:07:48Z"}, "message": "params.def (PARAM_MAX_SCHED_READY_INSNS): New parameter, defaulting to 100.\n\n\t* params.def (PARAM_MAX_SCHED_READY_INSNS): New parameter,\n\tdefaulting to 100.\n\t* params.h (MAX_SCHED_READY_INSNS): New macro.\n\t* haifa-sched.c: (queue_to_ready): Re-queue insns for the next cycle\n\tpast MAX_SCHED_READY_INSNS during the first scheduling pass.\n\t(schedule_block): Delay insns past MAX_SCHED_READY_INSNS in\n\tthe ready list for 1 cycle during the first scheduling pass.\n\t* doc/invoke.texi (--param): New parameter max-sched-ready-insns.\n\nFrom-SVN: r112936", "tree": {"sha": "1e3098020ab398649c1a04be50d0f957cd26cdab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e3098020ab398649c1a04be50d0f957cd26cdab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f8dd94be5f328e2f6d90a27693880a06a24166c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f8dd94be5f328e2f6d90a27693880a06a24166c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f8dd94be5f328e2f6d90a27693880a06a24166c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f8dd94be5f328e2f6d90a27693880a06a24166c/comments", "author": null, "committer": null, "parents": [{"sha": "777f7f9a72532980c1b5cfa05a7a1f032807f10f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/777f7f9a72532980c1b5cfa05a7a1f032807f10f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/777f7f9a72532980c1b5cfa05a7a1f032807f10f"}], "stats": {"total": 69, "additions": 66, "deletions": 3}, "files": [{"sha": "08b8f29f941c4e4086de47344fd31021fd035f46", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8dd94be5f328e2f6d90a27693880a06a24166c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8dd94be5f328e2f6d90a27693880a06a24166c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6f8dd94be5f328e2f6d90a27693880a06a24166c", "patch": "@@ -1,3 +1,14 @@\n+2006-04-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* params.def (PARAM_MAX_SCHED_READY_INSNS): New parameter,\n+\tdefaulting to 100.\n+\t* params.h (MAX_SCHED_READY_INSNS): New macro.\n+\t* haifa-sched.c: (queue_to_ready): Re-queue insns for the next cycle\n+\tpast MAX_SCHED_READY_INSNS during the first scheduling pass.\n+\t(schedule_block): Delay insns past MAX_SCHED_READY_INSNS in\n+\tthe ready list for 1 cycle during the first scheduling pass.\n+\t* doc/invoke.texi (--param): New parameter max-sched-ready-insns.\n+\n 2006-04-13  Richard Henderson  <rth@redhat.com>\n \n \tPR 26651"}, {"sha": "7080aacf8bbdcfe1025778955c44344cefe45ae1", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8dd94be5f328e2f6d90a27693880a06a24166c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8dd94be5f328e2f6d90a27693880a06a24166c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=6f8dd94be5f328e2f6d90a27693880a06a24166c", "patch": "@@ -6191,6 +6191,12 @@ feedback is available and may be set to higher values than\n @option{reorder-block-duplicate} since information about the hot spots is more\n accurate.\n \n+@item max-sched-ready-insns\n+The maximum number of instructions ready to be issued the scheduler should\n+consider at any given time during the first scheduling pass.  Increasing\n+values mean more thorough searches, making the compilation time increase\n+with probably little benefit.  The default value is 100.\n+\n @item max-sched-region-blocks\n The maximum number of blocks in a region to be considered for\n interblock scheduling.  The default value is 10."}, {"sha": "6368ec6b6664f82bcfb02309ba1d70f9c43a0dd9", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 41, "deletions": 3, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8dd94be5f328e2f6d90a27693880a06a24166c/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8dd94be5f328e2f6d90a27693880a06a24166c/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=6f8dd94be5f328e2f6d90a27693880a06a24166c", "patch": "@@ -1655,9 +1655,22 @@ queue_to_ready (struct ready_list *ready)\n \tfprintf (sched_dump, \";;\\t\\tQ-->Ready: insn %s: \",\n \t\t (*current_sched_info->print_insn) (insn, 0));\n \n-      ready_add (ready, insn, false);\n-      if (sched_verbose >= 2)\n-\tfprintf (sched_dump, \"moving to ready without stalls\\n\");\n+      /* If the ready list is full, delay the insn for 1 cycle.\n+\t See the comment in schedule_block for the rationale.  */\n+      if (!reload_completed\n+\t  && ready->n_ready > MAX_SCHED_READY_INSNS\n+\t  && !SCHED_GROUP_P (insn))\n+\t{\n+\t  if (sched_verbose >= 2)\n+\t    fprintf (sched_dump, \"requeued because ready full\\n\");\n+\t  queue_insn (insn, 1);\n+\t}\n+      else\n+\t{\n+\t  ready_add (ready, insn, false);\n+\t  if (sched_verbose >= 2)\n+\t    fprintf (sched_dump, \"moving to ready without stalls\\n\");\n+        }\n     }\n   free_INSN_LIST_list (&insn_queue[q_ptr]);\n \n@@ -2292,6 +2305,31 @@ schedule_block (basic_block *target_bb, int rgn_n_insns1)\n      in try_ready () (which is called through init_ready_list ()).  */\n   (*current_sched_info->init_ready_list) ();\n \n+  /* The algorithm is O(n^2) in the number of ready insns at any given\n+     time in the worst case.  Before reload we are more likely to have\n+     big lists so truncate them to a reasonable size.  */\n+  if (!reload_completed && ready.n_ready > MAX_SCHED_READY_INSNS)\n+    {\n+      ready_sort (&ready);\n+\n+      /* Find first free-standing insn past MAX_SCHED_READY_INSNS.  */\n+      for (i = MAX_SCHED_READY_INSNS; i < ready.n_ready; i++)\n+\tif (!SCHED_GROUP_P (ready_element (&ready, i)))\n+\t  break;\n+\n+      if (sched_verbose >= 2)\n+\t{\n+\t  fprintf (sched_dump,\n+\t\t   \";;\\t\\tReady list on entry: %d insns\\n\", ready.n_ready);\n+\t  fprintf (sched_dump,\n+\t\t   \";;\\t\\t before reload => truncated to %d insns\\n\", i);\n+\t}\n+\n+      /* Delay all insns past it for 1 cycle.  */\n+      while (i < ready.n_ready)\n+\tqueue_insn (ready_remove (&ready, i), 1);\n+    }\n+\n   /* Now we can restore basic block notes and maintain precise cfg.  */\n   restore_bb_notes (*target_bb);\n "}, {"sha": "84f16e294af604dc459a994bb7f0757c5d6715f3", "filename": "gcc/params.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8dd94be5f328e2f6d90a27693880a06a24166c/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8dd94be5f328e2f6d90a27693880a06a24166c/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=6f8dd94be5f328e2f6d90a27693880a06a24166c", "patch": "@@ -582,6 +582,12 @@ DEFPARAM (PARAM_MAX_FIELDS_FOR_FIELD_SENSITIVE,\n           \"max-fields-for-field-sensitive\",\n \t  \"Maximum number of fields in a structure before pointer analysis treats the structure as a single variable\",\n \t  100, 0, 0)\n+\n+DEFPARAM(PARAM_MAX_SCHED_READY_INSNS,\n+\t \"max-sched-ready-insns\",\n+\t \"The maximum number of instructions ready to be issued to be considered by the scheduler during the first scheduling pass\",\n+\t 100, 0, 0)\n+\n /*\n Local variables:\n mode:c"}, {"sha": "32c9c8c63faf9e6268b40f96f12798d56b20f168", "filename": "gcc/params.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8dd94be5f328e2f6d90a27693880a06a24166c/gcc%2Fparams.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8dd94be5f328e2f6d90a27693880a06a24166c/gcc%2Fparams.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.h?ref=6f8dd94be5f328e2f6d90a27693880a06a24166c", "patch": "@@ -149,4 +149,6 @@ typedef enum compiler_param\n   PARAM_VALUE (PARAM_VIRTUAL_MAPPINGS_TO_SYMS_RATIO)\n #define MAX_FIELDS_FOR_FIELD_SENSITIVE \\\n   ((size_t) PARAM_VALUE (PARAM_MAX_FIELDS_FOR_FIELD_SENSITIVE))\n+#define MAX_SCHED_READY_INSNS \\\n+  PARAM_VALUE (PARAM_MAX_SCHED_READY_INSNS)\n #endif /* ! GCC_PARAMS_H */"}]}