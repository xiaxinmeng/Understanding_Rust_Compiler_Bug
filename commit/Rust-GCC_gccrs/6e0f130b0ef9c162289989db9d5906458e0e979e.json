{"sha": "6e0f130b0ef9c162289989db9d5906458e0e979e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmUwZjEzMGIwZWY5YzE2MjI4OTk4OWRiOWQ1OTA2NDU4ZTBlOTc5ZQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@cygnus.com", "date": "1999-03-12T16:19:54Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1999-03-12T16:19:54Z"}, "message": "Minor testsuite fixes for targets with 16-bit ints and targets without I/O.\n\n\t* execute/970312-1.c, execute/980605-1.c (f): Change printf to sprintf.\n\t* execute/bf-sign-2.c (struct X): Add u15 field.\n\t(main): Add check for u15.  Conditionalize u31 check depending on\n\twhether ints are <32 bits or >=32 bits.\n\nFrom-SVN: r25730", "tree": {"sha": "e163cb34c30892afd0af949b492c4aba4511b1ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e163cb34c30892afd0af949b492c4aba4511b1ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e0f130b0ef9c162289989db9d5906458e0e979e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e0f130b0ef9c162289989db9d5906458e0e979e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e0f130b0ef9c162289989db9d5906458e0e979e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e0f130b0ef9c162289989db9d5906458e0e979e/comments", "author": null, "committer": null, "parents": [{"sha": "d24de7d183899847d520b453b09cf45c4a643ca4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d24de7d183899847d520b453b09cf45c4a643ca4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d24de7d183899847d520b453b09cf45c4a643ca4"}], "stats": {"total": 31, "additions": 27, "deletions": 4}, "files": [{"sha": "08bc7610b379a789a133e976ae08d0157a04c956", "filename": "gcc/testsuite/gcc.c-torture/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e0f130b0ef9c162289989db9d5906458e0e979e/gcc%2Ftestsuite%2Fgcc.c-torture%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e0f130b0ef9c162289989db9d5906458e0e979e/gcc%2Ftestsuite%2Fgcc.c-torture%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2FChangeLog?ref=6e0f130b0ef9c162289989db9d5906458e0e979e", "patch": "@@ -1,3 +1,10 @@\n+Fri Mar 12 16:17:28 1999  Jim Wilson  <wilson@cygnus.com>\n+\n+\t* execute/970312-1.c, execute/980605-1.c (f): Change printf to sprintf.\n+\t* execute/bf-sign-2.c (struct X): Add u15 field.\n+\t(main): Add check for u15.  Conditionalize u31 check depending on\n+\twhether ints are <32 bits or >=32 bits.\n+\t\n 1999-03-01 Zack Weinberg  <zack@rabi.columbia.edu>\n \n \t* noncompile/noncompile.exp (951025-1.c): Accept an error"}, {"sha": "6b78ee1ca60bcc0e472673d08c9a9de58eb7fb9b", "filename": "gcc/testsuite/gcc.c-torture/execute/970312-1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e0f130b0ef9c162289989db9d5906458e0e979e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F970312-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e0f130b0ef9c162289989db9d5906458e0e979e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F970312-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F970312-1.c?ref=6e0f130b0ef9c162289989db9d5906458e0e979e", "patch": "@@ -41,6 +41,8 @@ getval (void)\n   return x++;\n }\n \n+char buf[10];\n+\n void\n f ()\n {\n@@ -59,7 +61,7 @@ f ()\n \n   k = f2 (17.0);\n \n-  printf (\"%d\\n\", a + b + c + d + e + f + g + h + i + j + k);\n+  sprintf (buf, \"%d\\n\", a + b + c + d + e + f + g + h + i + j + k);\n   if (a + b + c + d + e + f + g + h + i + j + k != 227)\n     abort ();\n }"}, {"sha": "2fc2691e535d2f2952cee1ce9ee4e66c2eb25e38", "filename": "gcc/testsuite/gcc.c-torture/execute/980605-1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e0f130b0ef9c162289989db9d5906458e0e979e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F980605-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e0f130b0ef9c162289989db9d5906458e0e979e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F980605-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F980605-1.c?ref=6e0f130b0ef9c162289989db9d5906458e0e979e", "patch": "@@ -45,6 +45,8 @@ getval (void)\n   return x++;\n }\n \n+char buf[10];\n+\n void\n f ()\n {\n@@ -64,7 +66,7 @@ f ()\n \n   k = f2 (17.0);\n \n-  printf (\"%d\\n\", a + b + c + d + e + f + g + h + i + j + k);\n+  sprintf (buf, \"%d\\n\", a + b + c + d + e + f + g + h + i + j + k);\n   if (a + b + c + d + e + f + g + h + i + j + k != 227)\n     abort ();\n }"}, {"sha": "365e061c839b805041079510f7c6bce3dde0090d", "filename": "gcc/testsuite/gcc.c-torture/execute/bf-sign-2.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e0f130b0ef9c162289989db9d5906458e0e979e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbf-sign-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e0f130b0ef9c162289989db9d5906458e0e979e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbf-sign-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbf-sign-2.c?ref=6e0f130b0ef9c162289989db9d5906458e0e979e", "patch": "@@ -10,7 +10,7 @@\n  We test the behavior by subtracting two from the promoted value: this will\n  result in a negitive value for signed types, a positive value for unsigned\n  types.  This test (of course) assumes that the compiler is correctly \n- implementing signed and unsigned arithmatic.\n+ implementing signed and unsigned arithmetic.\n  */\n \n struct X {\n@@ -21,6 +21,7 @@ struct X {\n   unsigned long int  u32:32;\n   unsigned long long ull3 :3;\n   unsigned long long ull35:35;\n+  unsigned u15:15;\n };\n \n struct X x;\n@@ -36,9 +37,20 @@ main ()\n   if ((x.s32 - 2) >= 0)\t\t/* promoted value should be signed */\n     abort ();\n \n-  if ((x.u31 - 2) >= 0)\t\t/* promoted value should be signed */\n+  if ((x.u15 - 2) >= 0)\t\t/* promoted value should be signed */\n     abort ();\n \n+  if (sizeof (struct { unsigned long u32:32;}) <= sizeof (int))\n+    {\n+      if ((x.u31 - 2) >= 0)\t/* promoted value should be signed */\n+\tabort ();\n+    }\n+  else\n+    {\n+      if ((x.u31 - 2) < 0)\t/* promoted value should be UNsigned */\n+\tabort ();\n+    }\n+\n   if ((x.u32 - 2) < 0)\t\t/* promoted value should be UNsigned */\n     abort ();\n "}]}