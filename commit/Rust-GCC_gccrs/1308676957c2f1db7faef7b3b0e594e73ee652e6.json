{"sha": "1308676957c2f1db7faef7b3b0e594e73ee652e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTMwODY3Njk1N2MyZjFkYjdmYWVmN2IzYjBlNTk0ZTczZWU2NTJlNg==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2017-01-04T13:21:02Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2017-01-04T13:21:02Z"}, "message": "Implement 2801, Default-constructibility of unique_ptr.\n\n* include/bits/unique_ptr.h (__uniq_ptr_impl::_DeleterConstraint): New.\n(unique_ptr::_DeleterConstraint): Likewise.\n(unique_ptr()): Constrain.\n(unique_ptr(pointer)): Likewise.\n(unique_ptr(nullptr_t)): Likewise.\n(unique_ptr<_Tp[], _Dp>::_DeleterConstraint): New.\n(unique_ptr<_Tp[], _Dp>::unique_ptr()): Constrain.\n(unique_ptr<_Tp[], _Dp>::unique_ptr(_Up)): Likewise.\n(unique_ptr<_Tp[], _Dp>::unique_ptr(nullptr_t)): Likewise.\n* testsuite/20_util/unique_ptr/assign/48635_neg.cc: Adjust.\n* testsuite/20_util/unique_ptr/cons/cv_qual_neg.cc: Likewise.\n* testsuite/20_util/unique_ptr/cons/default.cc: New.\n* testsuite/20_util/unique_ptr/cons/ptr_deleter_neg.cc: Adjust.\n\nFrom-SVN: r244054", "tree": {"sha": "9e9d6af6cbb8ab9fc65c7687ce8d997188d9fddb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e9d6af6cbb8ab9fc65c7687ce8d997188d9fddb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1308676957c2f1db7faef7b3b0e594e73ee652e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1308676957c2f1db7faef7b3b0e594e73ee652e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1308676957c2f1db7faef7b3b0e594e73ee652e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1308676957c2f1db7faef7b3b0e594e73ee652e6/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2afd3180c5286a3181949a43c3e831d70a7e5404", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2afd3180c5286a3181949a43c3e831d70a7e5404", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2afd3180c5286a3181949a43c3e831d70a7e5404"}], "stats": {"total": 139, "additions": 107, "deletions": 32}, "files": [{"sha": "d0bd7e63fbd6697348ff98af5b0e1210de332ba5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1308676957c2f1db7faef7b3b0e594e73ee652e6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1308676957c2f1db7faef7b3b0e594e73ee652e6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1308676957c2f1db7faef7b3b0e594e73ee652e6", "patch": "@@ -1,3 +1,20 @@\n+2017-01-04  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tImplement 2801, Default-constructibility of unique_ptr.\n+\t* include/bits/unique_ptr.h (__uniq_ptr_impl::_DeleterConstraint): New.\n+\t(unique_ptr::_DeleterConstraint): Likewise.\n+\t(unique_ptr()): Constrain.\n+\t(unique_ptr(pointer)): Likewise.\n+\t(unique_ptr(nullptr_t)): Likewise.\n+\t(unique_ptr<_Tp[], _Dp>::_DeleterConstraint): New.\n+\t(unique_ptr<_Tp[], _Dp>::unique_ptr()): Constrain.\n+\t(unique_ptr<_Tp[], _Dp>::unique_ptr(_Up)): Likewise.\n+\t(unique_ptr<_Tp[], _Dp>::unique_ptr(nullptr_t)): Likewise.\n+\t* testsuite/20_util/unique_ptr/assign/48635_neg.cc: Adjust.\n+\t* testsuite/20_util/unique_ptr/cons/cv_qual_neg.cc: Likewise.\n+\t* testsuite/20_util/unique_ptr/cons/default.cc: New.\n+\t* testsuite/20_util/unique_ptr/cons/ptr_deleter_neg.cc: Adjust.\n+\n 2017-01-04  Pauli Nieminen  <suokkos@gmail.com>\n \t    Jonathan Wakely  <jwakely@redhat.com>\n "}, {"sha": "a31cd67d6e3fba201b82946270d43273138f890e", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 41, "deletions": 21, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1308676957c2f1db7faef7b3b0e594e73ee652e6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1308676957c2f1db7faef7b3b0e594e73ee652e6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=1308676957c2f1db7faef7b3b0e594e73ee652e6", "patch": "@@ -130,6 +130,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t};\n \n     public:\n+      using _DeleterConstraint = enable_if<\n+        __and_<__not_<is_pointer<_Dp>>,\n+\t       is_default_constructible<_Dp>>::value>;\n+\n       using pointer = typename _Ptr<_Tp, _Dp>::type;\n \n       __uniq_ptr_impl() = default;\n@@ -152,6 +156,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template <typename _Tp, typename _Dp = default_delete<_Tp>>\n     class unique_ptr\n     {\n+      template <class _Up>\n+      using _DeleterConstraint =\n+\ttypename __uniq_ptr_impl<_Tp, _Up>::_DeleterConstraint::type;\n+\n       __uniq_ptr_impl<_Tp, _Dp> _M_t;\n \n     public:\n@@ -175,22 +183,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // Constructors.\n \n       /// Default constructor, creates a unique_ptr that owns nothing.\n-      constexpr unique_ptr() noexcept\n-      : _M_t()\n-      { static_assert(!is_pointer<deleter_type>::value,\n-\t\t     \"constructed with null function pointer deleter\"); }\n+      template <typename _Up = _Dp,\n+\t\ttypename = _DeleterConstraint<_Up>>\n+\tconstexpr unique_ptr() noexcept\n+\t: _M_t()\n+        { }\n \n       /** Takes ownership of a pointer.\n        *\n        * @param __p  A pointer to an object of @c element_type\n        *\n        * The deleter will be value-initialized.\n        */\n-      explicit\n-      unique_ptr(pointer __p) noexcept\n-      : _M_t(__p)\n-      { static_assert(!is_pointer<deleter_type>::value,\n-\t\t     \"constructed with null function pointer deleter\"); }\n+      template <typename _Up = _Dp,\n+\t\ttypename = _DeleterConstraint<_Up>>\n+\texplicit\n+\tunique_ptr(pointer __p) noexcept\n+\t: _M_t(__p)\n+        { }\n \n       /** Takes ownership of a pointer.\n        *\n@@ -218,7 +228,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t      \"rvalue deleter bound to reference\"); }\n \n       /// Creates a unique_ptr that owns nothing.\n-      constexpr unique_ptr(nullptr_t) noexcept : unique_ptr() { }\n+      template <typename _Up = _Dp,\n+\t\ttypename = _DeleterConstraint<_Up>>\n+\tconstexpr unique_ptr(nullptr_t) noexcept : unique_ptr() { }\n \n       // Move constructors.\n \n@@ -384,6 +396,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp, typename _Dp>\n     class unique_ptr<_Tp[], _Dp>\n     {\n+      template <typename _Up>\n+      using _DeleterConstraint =\n+\ttypename __uniq_ptr_impl<_Tp, _Up>::_DeleterConstraint::type;\n+\n       __uniq_ptr_impl<_Tp, _Dp> _M_t;\n \n       template<typename _Up>\n@@ -432,10 +448,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // Constructors.\n \n       /// Default constructor, creates a unique_ptr that owns nothing.\n-      constexpr unique_ptr() noexcept\n-      : _M_t()\n-      { static_assert(!std::is_pointer<deleter_type>::value,\n-\t\t      \"constructed with null function pointer deleter\"); }\n+      template <typename _Up = _Dp,\n+\t\ttypename = _DeleterConstraint<_Up>>\n+\tconstexpr unique_ptr() noexcept\n+\t: _M_t()\n+        { }\n \n       /** Takes ownership of a pointer.\n        *\n@@ -445,13 +462,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        * The deleter will be value-initialized.\n        */\n       template<typename _Up,\n-               typename = typename enable_if<\n+\t       typename _Vp = _Dp,\n+\t       typename = _DeleterConstraint<_Vp>,\n+\t       typename = typename enable_if<\n                  __safe_conversion_raw<_Up>::value, bool>::type>\n-      explicit\n-      unique_ptr(_Up __p) noexcept\n-      : _M_t(__p)\n-      { static_assert(!is_pointer<deleter_type>::value,\n-\t\t      \"constructed with null function pointer deleter\"); }\n+\texplicit\n+\tunique_ptr(_Up __p) noexcept\n+\t: _M_t(__p)\n+        { }\n \n       /** Takes ownership of a pointer.\n        *\n@@ -491,7 +509,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       : _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter())) { }\n \n       /// Creates a unique_ptr that owns nothing.\n-      constexpr unique_ptr(nullptr_t) noexcept : unique_ptr() { }\n+      template <typename _Up = _Dp,\n+\t\ttypename = _DeleterConstraint<_Up>>\n+\tconstexpr unique_ptr(nullptr_t) noexcept : unique_ptr() { }\n \n       template<typename _Up, typename _Ep,\n \t       typename = _Require<__safe_conversion_up<_Up, _Ep>>>"}, {"sha": "9000ad98ad8b4e2abef897fbb9cd8687a2688d0e", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/assign/48635_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1308676957c2f1db7faef7b3b0e594e73ee652e6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2F48635_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1308676957c2f1db7faef7b3b0e594e73ee652e6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2F48635_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2F48635_neg.cc?ref=1308676957c2f1db7faef7b3b0e594e73ee652e6", "patch": "@@ -42,10 +42,10 @@ void f()\n   std::unique_ptr<int, D&> ud(nullptr, d);\n   ub = std::move(ud); // { dg-error \"no match\" }\n   ub2 = ud; // { dg-error \"no match\" }\n-// { dg-error \"no type\" \"\" { target *-*-* } 289 }\n+// { dg-error \"no type\" \"\" { target *-*-* } 301 }\n \n   std::unique_ptr<int[], B&> uba(nullptr, b);\n   std::unique_ptr<int[], D&> uda(nullptr, d);\n   uba = std::move(uda); // { dg-error \"no match\" }\n-// { dg-error \"no type\" \"\" { target *-*-* } 540 }\n+// { dg-error \"no type\" \"\" { target *-*-* } 560 }\n }"}, {"sha": "8d29c91fd3a45b7eda08d041191b49c447d12e1d", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/cons/cv_qual_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1308676957c2f1db7faef7b3b0e594e73ee652e6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fcv_qual_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1308676957c2f1db7faef7b3b0e594e73ee652e6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fcv_qual_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fcv_qual_neg.cc?ref=1308676957c2f1db7faef7b3b0e594e73ee652e6", "patch": "@@ -39,7 +39,7 @@ test07()\n   std::unique_ptr<const A[]> cA3(p); // { dg-error \"no matching function\" }\n   std::unique_ptr<volatile A[]> vA3(p); // { dg-error \"no matching function\" }\n   std::unique_ptr<const volatile A[]> cvA3(p); // { dg-error \"no matching function\" }\n-  // { dg-error \"no type\" \"\" { target *-*-* } 448 }\n+  // { dg-error \"no type\" \"\" { target *-*-* } 467 }\n }\n \n template<typename T>"}, {"sha": "ceffdcd2b2ebd491cff33f5040f103810615daf6", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/cons/default.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1308676957c2f1db7faef7b3b0e594e73ee652e6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1308676957c2f1db7faef7b3b0e594e73ee652e6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fdefault.cc?ref=1308676957c2f1db7faef7b3b0e594e73ee652e6", "patch": "@@ -0,0 +1,40 @@\n+// { dg-do compile { target c++11 } }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <memory>\n+#include <type_traits>\n+\n+static_assert(!std::is_default_constructible<std::unique_ptr<int,\n+\t      std::default_delete<int>&>>::value, \"\");\n+static_assert(!std::is_default_constructible<std::unique_ptr<int,\n+\t      void(*)(int*)>>::value, \"\");\n+static_assert(!std::is_constructible<std::unique_ptr<int,\n+\t      std::default_delete<int>&>, int*>::value, \"\");\n+static_assert(!std::is_constructible<std::unique_ptr<int,\n+\t      void(*)(int*)>, int*>::value, \"\");\n+\n+static_assert(!std::is_default_constructible<std::unique_ptr<int[],\n+\t      std::default_delete<int>&>>::value, \"\");\n+static_assert(!std::is_default_constructible<std::unique_ptr<int[],\n+\t      void(*)(int*)>>::value, \"\");\n+static_assert(!std::is_constructible<std::unique_ptr<int[],\n+\t      std::default_delete<int>&>, int*>::value, \"\");\n+static_assert(!std::is_constructible<std::unique_ptr<int[],\n+\t      void(*)(int*)>, int*>::value, \"\");\n+"}, {"sha": "b4d2d8edbfeac2f293ea95d689d13bf89ba8f67c", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/cons/ptr_deleter_neg.cc", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1308676957c2f1db7faef7b3b0e594e73ee652e6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fptr_deleter_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1308676957c2f1db7faef7b3b0e594e73ee652e6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fptr_deleter_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fptr_deleter_neg.cc?ref=1308676957c2f1db7faef7b3b0e594e73ee652e6", "patch": "@@ -23,26 +23,24 @@\n \n using std::unique_ptr;\n \n-// { dg-prune-output \"static assertion failed\" }\n-\n void\n test01()\n {\n-  unique_ptr<long, void(*)(long*)> p1; // { dg-error \"here\" }\n+  unique_ptr<long, void(*)(long*)> p1; // { dg-error \"no matching\" }\n \n-  unique_ptr<short, void(*)(short*)> p2(nullptr); // { dg-error \"here\" }\n+  unique_ptr<short, void(*)(short*)> p2(nullptr); // { dg-error \"no matching\" }\n \n-  unique_ptr<int, void(*)(int*)> p3(new int); // { dg-error \"here\" }\n+  unique_ptr<int, void(*)(int*)> p3(new int); // { dg-error \"no matching\" }\n }\n \n void\n test02()\n {\n-  unique_ptr<long[], void(*)(long*)> p1; // { dg-error \"here\" }\n+  unique_ptr<long[], void(*)(long*)> p1; // { dg-error \"no matching\" }\n \n-  unique_ptr<short[], void(*)(short*)> p2(nullptr); // { dg-error \"here\" }\n+  unique_ptr<short[], void(*)(short*)> p2(nullptr); // { dg-error \"no matching\" }\n \n-  unique_ptr<int[], void(*)(int*)> p3(new int[1]); // { dg-error \"here\" }\n+  unique_ptr<int[], void(*)(int*)> p3(new int[1]); // { dg-error \"no matching\" }\n }\n \n "}]}