{"sha": "1cbba49e3417d9b0661e70301d6fb7a7f52fd360", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNiYmE0OWUzNDE3ZDliMDY2MWU3MDMwMWQ2ZmI3YTdmNTJmZDM2MA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-04-08T15:29:11Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-04-08T16:49:59Z"}, "message": "libstdc++: Simplify noexcept-specifiers for move constructors\n\nThis puts the logic for the noexcept-specifier in one place, and then\nreuses it elsewhere. This means checking whether the move constructor\ncan throw doesn't need to do overload resolution and then check whether\nsome other constructor can throw, we just get the answer directly.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/hashtable.h (_Hashtable::_S_nothrow_move()):\n\tNew function to determine noexcept-specifier for move\n\tconstructors.\n\t(_Hashtable): Use _S_nothrow_move() on move constructors.\n\t* testsuite/23_containers/unordered_map/cons/noexcept_move_construct.cc:\n\tCorrect static assertion message.\n\t* testsuite/23_containers/unordered_multimap/cons/noexcept_move_construct.cc:\n\tLikewise.\n\t* testsuite/23_containers/unordered_multiset/cons/noexcept_move_construct.cc:\n\tLikewise.\n\t* testsuite/23_containers/unordered_set/cons/noexcept_move_construct.cc:\n\tLikewise.", "tree": {"sha": "cc43d05bb09fce4267b812c770fe6160b11113c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc43d05bb09fce4267b812c770fe6160b11113c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1cbba49e3417d9b0661e70301d6fb7a7f52fd360", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cbba49e3417d9b0661e70301d6fb7a7f52fd360", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cbba49e3417d9b0661e70301d6fb7a7f52fd360", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cbba49e3417d9b0661e70301d6fb7a7f52fd360/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59d09f9fe4bcf4a341494220be377dfe13d84c1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59d09f9fe4bcf4a341494220be377dfe13d84c1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59d09f9fe4bcf4a341494220be377dfe13d84c1e"}], "stats": {"total": 42, "additions": 22, "deletions": 20}, "files": [{"sha": "39872ce5342a55cb99b9a8391f2b9574ca7f54c9", "filename": "libstdc++-v3/include/bits/hashtable.h", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cbba49e3417d9b0661e70301d6fb7a7f52fd360/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cbba49e3417d9b0661e70301d6fb7a7f52fd360/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h?ref=1cbba49e3417d9b0661e70301d6fb7a7f52fd360", "patch": "@@ -472,10 +472,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t__hashtable_alloc(__node_alloc_type(__a))\n       { }\n \n+      template<bool _No_realloc = true>\n+\tstatic constexpr bool\n+\t_S_nothrow_move()\n+\t{\n+\t  if _GLIBCXX17_CONSTEXPR (_No_realloc)\n+\t    if _GLIBCXX17_CONSTEXPR (is_nothrow_copy_constructible<_Hash>())\n+\t      return is_nothrow_copy_constructible<_Equal>();\n+\t  return false;\n+\t}\n+\n       _Hashtable(_Hashtable&& __ht, __node_alloc_type&& __a,\n \t\t true_type /* alloc always equal */)\n-\tnoexcept(std::is_nothrow_copy_constructible<_Hash>::value &&\n-\t\t std::is_nothrow_copy_constructible<_Equal>::value);\n+\tnoexcept(_S_nothrow_move());\n \n       _Hashtable(_Hashtable&&, __node_alloc_type&&,\n \t\t false_type /* alloc always equal */);\n@@ -508,19 +517,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       // Use delegating constructors.\n       _Hashtable(_Hashtable&& __ht)\n-\tnoexcept( noexcept(\n-\t  _Hashtable(std::declval<_Hashtable>(),\n-\t\t     std::declval<__node_alloc_type>(),\n-\t\t     true_type{})) )\n+\tnoexcept(_S_nothrow_move())\n       : _Hashtable(std::move(__ht), std::move(__ht._M_node_allocator()),\n \t\t   true_type{})\n       { }\n \n       _Hashtable(_Hashtable&& __ht, const allocator_type& __a)\n-\tnoexcept( noexcept(\n-\t  _Hashtable(std::declval<_Hashtable>(),\n-\t\t     std::declval<__node_alloc_type>(),\n-\t\t     typename __node_alloc_traits::is_always_equal{})) )\n+\tnoexcept(_S_nothrow_move<__node_alloc_traits::_S_always_equal()>())\n       : _Hashtable(std::move(__ht), __node_alloc_type(__a),\n \t\t   typename __node_alloc_traits::is_always_equal{})\n       { }\n@@ -1400,8 +1403,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::\n     _Hashtable(_Hashtable&& __ht, __node_alloc_type&& __a,\n \t       true_type /* alloc always equal */)\n-    noexcept(std::is_nothrow_copy_constructible<_Hash>::value &&\n-\t     std::is_nothrow_copy_constructible<_Equal>::value)\n+    noexcept(_S_nothrow_move())\n     : __hashtable_base(__ht),\n       __map_base(__ht),\n       __rehash_base(__ht),"}, {"sha": "015646adf23132c3370ffbfd9d782fa42b57e92d", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/cons/noexcept_move_construct.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cbba49e3417d9b0661e70301d6fb7a7f52fd360/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fcons%2Fnoexcept_move_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cbba49e3417d9b0661e70301d6fb7a7f52fd360/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fcons%2Fnoexcept_move_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fcons%2Fnoexcept_move_construct.cc?ref=1cbba49e3417d9b0661e70301d6fb7a7f52fd360", "patch": "@@ -40,7 +40,7 @@ struct not_noexcept_copy_cons_hash\n using type2 = std::unordered_map<int, int, not_noexcept_copy_cons_hash>;\n \n static_assert( !std::is_nothrow_move_constructible<type2>::value,\n-\t       \"noexcept move constructor\" );\n+\t       \"not noexcept move constructor\" );\n static_assert( !std::is_nothrow_constructible<type2, type2&&,\n \t       const typename type2::allocator_type&>::value,\n \t       \"not noexcept move constructor with allocator\" );\n@@ -59,7 +59,7 @@ using type3 = std::unordered_map<int, int, std::hash<int>,\n \t\t\t\t  not_noexcept_copy_cons_equal_to>;\n \n static_assert( !std::is_nothrow_move_constructible<type3>::value,\n-\t       \"noexcept move constructor\" );\n+\t       \"not noexcept move constructor\" );\n static_assert( !std::is_nothrow_constructible<type3, type3&&,\n \t       const typename type3::allocator_type&>::value,\n \t       \"not noexcept move constructor with allocator\" );"}, {"sha": "1e0b1059d7dad45da624f9a23bae6784cb54b914", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/cons/noexcept_move_construct.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cbba49e3417d9b0661e70301d6fb7a7f52fd360/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fcons%2Fnoexcept_move_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cbba49e3417d9b0661e70301d6fb7a7f52fd360/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fcons%2Fnoexcept_move_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fcons%2Fnoexcept_move_construct.cc?ref=1cbba49e3417d9b0661e70301d6fb7a7f52fd360", "patch": "@@ -40,7 +40,7 @@ struct not_noexcept_copy_cons_hash\n using type2 = std::unordered_multimap<int, int, not_noexcept_copy_cons_hash>;\n \n static_assert( !std::is_nothrow_move_constructible<type2>::value,\n-\t       \"noexcept move constructor\" );\n+\t       \"not not noexcept move constructor\" );\n static_assert( !std::is_nothrow_constructible<type2, type2&&,\n \t       const typename type2::allocator_type&>::value,\n \t       \"not noexcept move constructor with allocator\" );\n@@ -59,7 +59,7 @@ using type3 = std::unordered_multimap<int, int, std::hash<int>,\n \t\t\t\t       not_noexcept_copy_cons_equal_to>;\n \n static_assert( !std::is_nothrow_move_constructible<type3>::value,\n-\t       \"noexcept move constructor\" );\n+\t       \"not not noexcept move constructor\" );\n static_assert( !std::is_nothrow_constructible<type3, type3&&,\n \t       const typename type3::allocator_type&>::value,\n \t       \"not noexcept move constructor with allocator\" );"}, {"sha": "3e603802f13ea45faf578d6d8e80b054047e1865", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/cons/noexcept_move_construct.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cbba49e3417d9b0661e70301d6fb7a7f52fd360/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fcons%2Fnoexcept_move_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cbba49e3417d9b0661e70301d6fb7a7f52fd360/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fcons%2Fnoexcept_move_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fcons%2Fnoexcept_move_construct.cc?ref=1cbba49e3417d9b0661e70301d6fb7a7f52fd360", "patch": "@@ -40,7 +40,7 @@ struct not_noexcept_copy_cons_hash\n using type2 = std::unordered_multiset<int, not_noexcept_copy_cons_hash>;\n \n static_assert( !std::is_nothrow_move_constructible<type2>::value,\n-\t       \"noexcept move constructor\" );\n+\t       \"not noexcept move constructor\" );\n static_assert( !std::is_nothrow_constructible<type2, type2&&,\n \t       const typename type2::allocator_type&>::value,\n \t       \"not noexcept move constructor with allocator\" );\n@@ -59,7 +59,7 @@ using type3 = std::unordered_multiset<int, std::hash<int>,\n \t\t\t\t      not_noexcept_copy_cons_equal_to>;\n \n static_assert( !std::is_nothrow_move_constructible<type3>::value,\n-\t       \"noexcept move constructor\" );\n+\t       \"not noexcept move constructor\" );\n static_assert( !std::is_nothrow_constructible<type3, type3&&,\n \t       const typename type3::allocator_type&>::value,\n \t       \"not noexcept move constructor with allocator\" );"}, {"sha": "28cb539e9f555359e0914f4ea344dd974f54775e", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/cons/noexcept_move_construct.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cbba49e3417d9b0661e70301d6fb7a7f52fd360/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fcons%2Fnoexcept_move_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cbba49e3417d9b0661e70301d6fb7a7f52fd360/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fcons%2Fnoexcept_move_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fcons%2Fnoexcept_move_construct.cc?ref=1cbba49e3417d9b0661e70301d6fb7a7f52fd360", "patch": "@@ -40,7 +40,7 @@ struct not_noexcept_copy_cons_hash\n using type2 = std::unordered_set<int, not_noexcept_copy_cons_hash>;\n \n static_assert( !std::is_nothrow_move_constructible<type2>::value,\n-\t       \"noexcept move constructor\" );\n+\t       \"not noexcept move constructor\" );\n static_assert( !std::is_nothrow_constructible<type2, type2&&,\n \t       const typename type2::allocator_type&>::value,\n \t       \"not noexcept move constructor with allocator\" );\n@@ -59,7 +59,7 @@ using type3 = std::unordered_set<int, std::hash<int>,\n \t\t\t\t  not_noexcept_copy_cons_equal_to>;\n \n static_assert( !std::is_nothrow_move_constructible<type3>::value,\n-\t       \"noexcept move constructor\" );\n+\t       \"not noexcept move constructor\" );\n static_assert( !std::is_nothrow_constructible<type3, type3&&,\n \t       const typename type3::allocator_type&>::value,\n \t       \"not noexcept move constructor with allocator\" );"}]}