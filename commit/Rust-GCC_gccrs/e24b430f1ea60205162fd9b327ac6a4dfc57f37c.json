{"sha": "e24b430f1ea60205162fd9b327ac6a4dfc57f37c", "node_id": "C_kwDOANBUbNoAKGUyNGI0MzBmMWVhNjAyMDUxNjJmZDliMzI3YWM2YTRkZmM1N2YzN2M", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-10-14T13:25:48Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-10-15T20:17:48Z"}, "message": "libstdc++: Fix uses_allocator_construction args for cv pair (LWG 3677)\n\nThe _Std_pair concept uses in <bits/uses_allocator_args.h> handles const\nqualified pairs, but not volatile qualified. That's because it just uses\n__is_pair which is specialized for const pairs.\n\nThis removes the partial specialization __is_pair<const pair<T,U>>, so\nthat __is_pair is now only true for cv-unqualified pairs. Then _Std_pair\nneeds to explicitly use remove_cv_t for the argument to __is_pair.\n\nThe other use of __is_pair is in map::insert(Pair&&) which doesn't want\nto handle volatile so should just use remove_const_t.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/stl_map.h (map::insert(Pair&&)): Use\n\tremove_const_t on argument to __is_pair.\n\t* include/bits/stl_pair.h (__is_pair<const pair<T,U>>): Remove\n\tpartial specialization.\n\t* include/bits/uses_allocator_args.h (_Std_pair): Use\n\tremove_cv_t as per LWG 3677.\n\t* testsuite/20_util/uses_allocator/lwg3677.cc: New test.", "tree": {"sha": "396c77e65b9a271a52d3c72afb05f8b6175de5a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/396c77e65b9a271a52d3c72afb05f8b6175de5a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e24b430f1ea60205162fd9b327ac6a4dfc57f37c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e24b430f1ea60205162fd9b327ac6a4dfc57f37c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e24b430f1ea60205162fd9b327ac6a4dfc57f37c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e24b430f1ea60205162fd9b327ac6a4dfc57f37c/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "baeec7cc83b19b46d1c73523f06efa7ea2b30390", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baeec7cc83b19b46d1c73523f06efa7ea2b30390", "html_url": "https://github.com/Rust-GCC/gccrs/commit/baeec7cc83b19b46d1c73523f06efa7ea2b30390"}], "stats": {"total": 59, "additions": 54, "deletions": 5}, "files": [{"sha": "83c579aaedcf1196ce4ea5f141eb372f78268f42", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24b430f1ea60205162fd9b327ac6a4dfc57f37c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24b430f1ea60205162fd9b327ac6a4dfc57f37c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=e24b430f1ea60205162fd9b327ac6a4dfc57f37c", "patch": "@@ -847,7 +847,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t{\n #if __cplusplus >= 201703L\n \t  using _P2 = remove_reference_t<_Pair>;\n-\t  if constexpr (__is_pair<_P2>)\n+\t  if constexpr (__is_pair<remove_const_t<_P2>>)\n \t    if constexpr (is_same_v<allocator_type, allocator<value_type>>)\n \t      if constexpr (__usable_key<typename _P2::first_type>)\n \t\t{"}, {"sha": "195167019b768e0900668074ac0f8cf5a1b682a8", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24b430f1ea60205162fd9b327ac6a4dfc57f37c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24b430f1ea60205162fd9b327ac6a4dfc57f37c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=e24b430f1ea60205162fd9b327ac6a4dfc57f37c", "patch": "@@ -889,9 +889,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Tp, typename _Up>\n     inline constexpr bool __is_pair<pair<_Tp, _Up>> = true;\n-\n-  template<typename _Tp, typename _Up>\n-    inline constexpr bool __is_pair<const pair<_Tp, _Up>> = true;\n #endif\n \n   /// @cond undocumented"}, {"sha": "77e48602aac2bb698952bb653cd023b4a4fac592", "filename": "libstdc++-v3/include/bits/uses_allocator_args.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24b430f1ea60205162fd9b327ac6a4dfc57f37c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator_args.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24b430f1ea60205162fd9b327ac6a4dfc57f37c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator_args.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator_args.h?ref=e24b430f1ea60205162fd9b327ac6a4dfc57f37c", "patch": "@@ -44,7 +44,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Tp>\n-    concept _Std_pair = __is_pair<_Tp>;\n+    concept _Std_pair = __is_pair<remove_cv_t<_Tp>>;\n \n /** @addtogroup allocators\n  *  @{"}, {"sha": "649b98d3922ba9c9f126ec061d9fe2bc53612a52", "filename": "libstdc++-v3/testsuite/20_util/uses_allocator/lwg3677.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24b430f1ea60205162fd9b327ac6a4dfc57f37c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Flwg3677.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24b430f1ea60205162fd9b327ac6a4dfc57f37c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Flwg3677.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Flwg3677.cc?ref=e24b430f1ea60205162fd9b327ac6a4dfc57f37c", "patch": "@@ -0,0 +1,52 @@\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do run { target c++20 } }\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+struct UsesAlloc\n+{\n+  using allocator_type = std::allocator<int>;\n+\n+  bool passed_alloc;\n+\n+  UsesAlloc(int) : passed_alloc(false) { }\n+\n+  UsesAlloc(int, std::allocator<int>) : passed_alloc(true) { }\n+};\n+\n+using Pair = std::pair<UsesAlloc, int>;\n+\n+void\n+test_const()\n+{\n+  std::allocator<int> a;\n+  int i = 0;\n+  auto p = std::make_obj_using_allocator<const Pair>(a, i, i);\n+  VERIFY( p.first.passed_alloc );\n+}\n+\n+void\n+test_volatile()\n+{\n+  std::allocator<int> a;\n+  int i = 0;\n+  auto p = std::make_obj_using_allocator<volatile Pair>(a, i, i);\n+  VERIFY( p.first.passed_alloc );\n+}\n+\n+void\n+test_const_volatile()\n+{\n+  std::allocator<int> a;\n+  int i = 0;\n+  auto p = std::make_obj_using_allocator<volatile Pair>(a, i, i);\n+  VERIFY( p.first.passed_alloc );\n+}\n+\n+int main()\n+{\n+  test_const();\n+  test_volatile();\n+  test_const_volatile();\n+}"}]}