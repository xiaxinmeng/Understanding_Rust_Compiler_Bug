{"sha": "bf71a4f81cb189fe894b8213753be2c16f31861a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY3MWE0ZjgxY2IxODlmZTg5NGI4MjEzNzUzYmUyYzE2ZjMxODYxYQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-03-03T18:49:05Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-03-03T18:49:05Z"}, "message": "i386.c (ix86_expand_fp_compare): Delay creating of scratch register until when it is really needed.\n\n\t* i386.c (ix86_expand_fp_compare): Delay creating of scratch register\n\tuntil when it is really needed.\n\t(ix86_expand_compare): Update call of ix86_expand_fp_compare.\n\t* i386.h (PREDICATE_CODES): Add all codes for sse_comparison_operator\n\t* i386.md (float?i?f splitter): Don't force source operand to memory\n\tfor SSE.\n\t(sse_movdfcc): Fix constraint.\n\t(sse_movdfcc splitter): Handle properly the second alternative.\n\nFrom-SVN: r40216", "tree": {"sha": "a31ce4d33c3d1c60dddf3d9072d1e7a9e4b783fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a31ce4d33c3d1c60dddf3d9072d1e7a9e4b783fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf71a4f81cb189fe894b8213753be2c16f31861a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf71a4f81cb189fe894b8213753be2c16f31861a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf71a4f81cb189fe894b8213753be2c16f31861a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf71a4f81cb189fe894b8213753be2c16f31861a/comments", "author": null, "committer": null, "parents": [{"sha": "6b630c42c69b68fce5bf421438bc8c7a28cd8b25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b630c42c69b68fce5bf421438bc8c7a28cd8b25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b630c42c69b68fce5bf421438bc8c7a28cd8b25"}], "stats": {"total": 30, "additions": 24, "deletions": 6}, "files": [{"sha": "7c2ddebbf5c31476bea9eaae72595a0e0fa7d577", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf71a4f81cb189fe894b8213753be2c16f31861a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf71a4f81cb189fe894b8213753be2c16f31861a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf71a4f81cb189fe894b8213753be2c16f31861a", "patch": "@@ -1,3 +1,14 @@\n+Sat Mar  3 19:47:13 CET 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.c (ix86_expand_fp_compare): Delay creating of scratch register\n+\tuntil when it is really needed.\n+\t(ix86_expand_compare): Update call of ix86_expand_fp_compare.\n+\t* i386.h (PREDICATE_CODES): Add all codes for sse_comparison_operator\n+\t* i386.md (float?i?f splitter): Don't force source operand to memory\n+\tfor SSE.\n+\t(sse_movdfcc): Fix constraint.\n+\t(sse_movdfcc splitter): Handle properly the second alternative.\n+\n 2001-03-03  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n         * cpplex.c (parse_string): Unconditionally pedwarn."}, {"sha": "380f6af1ec42066317f75867e7e9eeb783587a05", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf71a4f81cb189fe894b8213753be2c16f31861a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf71a4f81cb189fe894b8213753be2c16f31861a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=bf71a4f81cb189fe894b8213753be2c16f31861a", "patch": "@@ -5196,6 +5196,8 @@ ix86_expand_fp_compare (code, op0, op1, scratch, second_test, bypass_test)\n \t{\n \t  tmp = gen_rtx_COMPARE (fpcmp_mode, op0, op1);\n \t  tmp2 = gen_rtx_UNSPEC (HImode, gen_rtvec (1, tmp), 9);\n+\t  if (!scratch)\n+\t    scratch = gen_reg_rtx (HImode);\n \t  emit_insn (gen_rtx_SET (VOIDmode, scratch, tmp2));\n \t  emit_insn (gen_x86_sahf_1 (scratch));\n \t}\n@@ -5217,6 +5219,8 @@ ix86_expand_fp_compare (code, op0, op1, scratch, second_test, bypass_test)\n       /* Sadness wrt reg-stack pops killing fpsr -- gotta get fnstsw first.  */\n       tmp = gen_rtx_COMPARE (fpcmp_mode, op0, op1);\n       tmp2 = gen_rtx_UNSPEC (HImode, gen_rtvec (1, tmp), 9);\n+      if (!scratch)\n+\tscratch = gen_reg_rtx (HImode);\n       emit_insn (gen_rtx_SET (VOIDmode, scratch, tmp2));\n \n       /* In the unordered case, we have to check C2 for NaN's, which\n@@ -5357,7 +5361,7 @@ ix86_expand_compare (code, second_test, bypass_test)\n     *bypass_test = NULL_RTX;\n \n   if (GET_MODE_CLASS (GET_MODE (op0)) == MODE_FLOAT)\n-    ret = ix86_expand_fp_compare (code, op0, op1, gen_reg_rtx (HImode),\n+    ret = ix86_expand_fp_compare (code, op0, op1, NULL_RTX,\n \t\t\t\t  second_test, bypass_test);\n   else\n     ret = ix86_expand_int_compare (code, op0, op1);"}, {"sha": "31c7a8e2ff6e8bee0a57bd1c38c3f3726260b9b3", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf71a4f81cb189fe894b8213753be2c16f31861a/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf71a4f81cb189fe894b8213753be2c16f31861a/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=bf71a4f81cb189fe894b8213753be2c16f31861a", "patch": "@@ -2869,7 +2869,9 @@ do { long l;\t\t\t\t\t\t\\\n   {\"fcmov_comparison_operator\", {EQ, NE, LTU, GTU, LEU, GEU, UNORDERED, \\\n \t\t\t\t ORDERED, LT, UNLT, GT, UNGT, LE, UNLE,\t\\\n \t\t\t\t GE, UNGE, LTGT, UNEQ}},\t\t\\\n-  {\"sse_comparison_operator\", {EQ, LT, LE, UNORDERED }},\t\t\\\n+  {\"sse_comparison_operator\", {EQ, LT, LE, UNORDERED, NE, UNGE, UNGT,\t\\\n+\t\t\t       ORDERED, UNEQ, UNLT, UNLE, LTGT, GE, GT\t\\\n+\t\t\t       }},\t\t\t\t\t\\\n   {\"ix86_comparison_operator\", {EQ, NE, LE, LT, GE, GT, LEU, LTU, GEU,\t\\\n \t\t\t       GTU, UNORDERED, ORDERED, UNLE, UNLT,\t\\\n \t\t\t       UNGE, UNGT, LTGT, UNEQ }},\t\t\\"}, {"sha": "fc341af8d33ec4b0c24bb22f8cbee375c6eb668f", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf71a4f81cb189fe894b8213753be2c16f31861a/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf71a4f81cb189fe894b8213753be2c16f31861a/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=bf71a4f81cb189fe894b8213753be2c16f31861a", "patch": "@@ -4450,7 +4450,8 @@\n (define_split\n   [(set (match_operand 0 \"register_operand\" \"\")\n \t(float (match_operand 1 \"register_operand\" \"\")))]\n-  \"reload_completed && FLOAT_MODE_P (GET_MODE (operands[0]))\"\n+  \"reload_completed && FLOAT_MODE_P (GET_MODE (operands[0]))\n+   && FP_REG_P (operands[0])\"\n   [(const_int 0)]\n   \"\n {\n@@ -12493,7 +12494,7 @@\n \t\t\t (match_operand:SF 5 \"nonimmediate_operand\" \"xm#f,xm#f,f#x,f#x,x#f,x#f,f#x,f#x,x#f,x#f\")])\n \t\t      (match_operand:SF 2 \"nonimmediate_operand\" \"x#fr,0#fr,f#fx,0#fx,f#fx,0#fx,rm#rx,0#rx,rm#rx,0#rx\")\n \t\t      (match_operand:SF 3 \"nonimmediate_operand\" \"x#fr,x#fr,0#fx,f#fx,0#fx,f#fx,0#fx,rm#rx,0#rx,rm#rx\")))\n-   (clobber (match_scratch:SF 6 \"=2,&5,X,X,X,X,X,X,X,X\"))\n+   (clobber (match_scratch:SF 6 \"=2,&4,X,X,X,X,X,X,X,X\"))\n    (clobber (reg:CC 17))]\n   \"TARGET_SSE\n    && (GET_CODE (operands[2]) != MEM || GET_CODE (operands[3]) != MEM)\"\n@@ -12506,7 +12507,7 @@\n \t\t\t (match_operand:DF 5 \"nonimmediate_operand\" \"xm#f,xm#f,f#x,f#x,x#f,x#f,f#x,f#x,x#f,x#f\")])\n \t\t      (match_operand:DF 2 \"nonimmediate_operand\" \"x#fr,0#fr,f#fx,0#fx,f#fx,0#fx,rm#rx,0#rx,rm#rx,0#rx\")\n \t\t      (match_operand:DF 3 \"nonimmediate_operand\" \"x#fr,x#fr,0#fx,f#fx,0#fx,f#fx,0#fx,rm#rx,0#rx,rm#rx\")))\n-   (clobber (match_scratch:DF 6 \"=2,&5,X,X,X,X,X,X,X,X\"))\n+   (clobber (match_scratch:DF 6 \"=2,&4,X,X,X,X,X,X,X,X\"))\n    (clobber (reg:CC 17))]\n   \"TARGET_SSE2\n    && (GET_CODE (operands[2]) != MEM || GET_CODE (operands[3]) != MEM)\"\n@@ -12547,7 +12548,7 @@\n \t\t\t (match_operand 5 \"nonimmediate_operand\" \"\")])\n \t\t      (match_operand 2 \"register_operand\" \"\")\n \t\t      (match_operand 3 \"register_operand\" \"\")))\n-   (clobber (match_dup 2))\n+   (clobber (match_operand 6 \"\" \"\"))\n    (clobber (reg:CC 17))]\n   \"SSE_REG_P (operands[0]) && reload_completed\"\n   [(set (match_dup 4) (match_op_dup 1 [(match_dup 4) (match_dup 5)]))"}]}