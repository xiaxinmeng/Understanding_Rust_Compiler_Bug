{"sha": "c37b5ddcc88e0cc0f6a4ad609eda51021df0f6bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM3YjVkZGNjODhlMGNjMGY2YTRhZDYwOWVkYTUxMDIxZGYwZjZiYg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-14T19:31:00Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-14T20:17:53Z"}, "message": "libstdc++: Fix common_reference for non-reference results [PR100894]\n\nThe result of COMMON-REF(A&, B&&) where they have no common reference\ntype should not be a reference. The implementation of COMMON-REF fails\nto check that the result is a reference, so is well-formed when it\nshouldn't be. This means that common_reference uses that result when it\nshouldn't.\n\nThe fix is to reject the result of COMMON-REF(A, B) if it's not a\nreference, so that common_reference falls through to the next case,\nwhich uses COND-RES, which yields a non-reference result.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/100894\n\t* include/std/type_traits (__common_ref_impl<X&, Y&>): Only\n\tuse the type if it's a reference.\n\t* testsuite/20_util/common_reference/100894.cc: New test.", "tree": {"sha": "f038a183eb9ab811e71228d68a8e2ad8bf885cdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f038a183eb9ab811e71228d68a8e2ad8bf885cdc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c37b5ddcc88e0cc0f6a4ad609eda51021df0f6bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c37b5ddcc88e0cc0f6a4ad609eda51021df0f6bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c37b5ddcc88e0cc0f6a4ad609eda51021df0f6bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c37b5ddcc88e0cc0f6a4ad609eda51021df0f6bb/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4986946f3b761dd4c3e0d79ca735c90e33f4bb83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4986946f3b761dd4c3e0d79ca735c90e33f4bb83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4986946f3b761dd4c3e0d79ca735c90e33f4bb83"}], "stats": {"total": 21, "additions": 18, "deletions": 3}, "files": [{"sha": "d9068a06f0827de500805d3e1182fc666c554445", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c37b5ddcc88e0cc0f6a4ad609eda51021df0f6bb/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c37b5ddcc88e0cc0f6a4ad609eda51021df0f6bb/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=c37b5ddcc88e0cc0f6a4ad609eda51021df0f6bb", "patch": "@@ -3340,11 +3340,17 @@ template <typename _From, typename _To>\n   template<typename _Ap, typename _Bp>\n     using __common_ref = typename __common_ref_impl<_Ap, _Bp>::type;\n \n+  // COND-RES(COPYCV(X, Y) &, COPYCV(Y, X) &)\n+  template<typename _Xp, typename _Yp>\n+    using __condres_cvref\n+      = __cond_res<__copy_cv<_Xp, _Yp>&, __copy_cv<_Yp, _Xp>&>;\n+\n   // If A and B are both lvalue reference types, ...\n   template<typename _Xp, typename _Yp>\n-    struct __common_ref_impl<_Xp&, _Yp&,\n-      __void_t<__cond_res<__copy_cv<_Xp, _Yp>&, __copy_cv<_Yp, _Xp>&>>>\n-    { using type = __cond_res<__copy_cv<_Xp, _Yp>&, __copy_cv<_Yp, _Xp>&>; };\n+    struct __common_ref_impl<_Xp&, _Yp&, __void_t<__condres_cvref<_Xp, _Yp>>>\n+    : enable_if<is_reference_v<__condres_cvref<_Xp, _Yp>>,\n+\t\t__condres_cvref<_Xp, _Yp>>\n+    { };\n \n   // let C be remove_reference_t<COMMON-REF(X&, Y&)>&&\n   template<typename _Xp, typename _Yp>"}, {"sha": "5e144768002648b8c46d7682658b1d2dc418f0ec", "filename": "libstdc++-v3/testsuite/20_util/common_reference/100894.cc", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c37b5ddcc88e0cc0f6a4ad609eda51021df0f6bb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_reference%2F100894.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c37b5ddcc88e0cc0f6a4ad609eda51021df0f6bb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_reference%2F100894.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_reference%2F100894.cc?ref=c37b5ddcc88e0cc0f6a4ad609eda51021df0f6bb", "patch": "@@ -0,0 +1,9 @@\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do compile { target c++20 } }\n+// PR libstdc++/100894 - common_reference implementation seems to be wrong\n+\n+#include <type_traits>\n+\n+struct A {};\n+struct B { B(A); };\n+static_assert( std::is_same_v<std::common_reference_t<A&, B&&>, B> );"}]}