{"sha": "25216284b046e081ea867c3c40c1c2d1697f80a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjUyMTYyODRiMDQ2ZTA4MWVhODY3YzNjNDBjMWMyZDE2OTdmODBhMg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-06-07T21:17:08Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-06-07T21:17:08Z"}, "message": "(fold): When folding `<' type nodes, make true_value and false_value\nhave correct types.\n\nFrom-SVN: r9899", "tree": {"sha": "ad5ef37cad882dcc8514ab1619a163b8159f0379", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad5ef37cad882dcc8514ab1619a163b8159f0379"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25216284b046e081ea867c3c40c1c2d1697f80a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25216284b046e081ea867c3c40c1c2d1697f80a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25216284b046e081ea867c3c40c1c2d1697f80a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25216284b046e081ea867c3c40c1c2d1697f80a2/comments", "author": null, "committer": null, "parents": [{"sha": "d36c3fe262cb205ef83d863685fade5c12c4f7ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d36c3fe262cb205ef83d863685fade5c12c4f7ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d36c3fe262cb205ef83d863685fade5c12c4f7ef"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "d310c8eafa05c982120b9258d357586218473d6e", "filename": "gcc/fold-const.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25216284b046e081ea867c3c40c1c2d1697f80a2/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25216284b046e081ea867c3c40c1c2d1697f80a2/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=25216284b046e081ea867c3c40c1c2d1697f80a2", "patch": "@@ -2615,7 +2615,7 @@ range_test (jcode, type, lo_code, hi_code, var, lo_cst, hi_cst)\n }\n \f\n /* Subroutine for fold_truthop: C is an INTEGER_CST interpreted as a P\n-   bit value.  Arrange things so the extra bits will be set to zero if and]\n+   bit value.  Arrange things so the extra bits will be set to zero if and\n    only if C is signed-extended to its full width.  */\n \n static tree\n@@ -3270,9 +3270,10 @@ fold (expr)\n \t    }\n \t  else\n \t    {\n+\t      tree testtype = TREE_TYPE (arg1);\n \t      test = arg1;\n-\t      true_value = integer_one_node;\n-\t      false_value = integer_zero_node;\n+\t      true_value = convert (testtype, integer_one_node);\n+\t      false_value = convert (testtype, integer_zero_node);\n \t    }\n \n \t  /* If ARG0 is complex we want to make sure we only evaluate\n@@ -3325,9 +3326,10 @@ fold (expr)\n \t    }\n \t  else\n \t    {\n+\t      tree testtype = TREE_TYPE (arg0);\n \t      test = arg0;\n-\t      true_value = integer_one_node;\n-\t      false_value = integer_zero_node;\n+\t      true_value = convert (testtype, integer_one_node);\n+\t      false_value = convert (testtype, integer_zero_node);\n \t    }\n \n \t  if (TREE_CODE (arg1) != SAVE_EXPR"}]}