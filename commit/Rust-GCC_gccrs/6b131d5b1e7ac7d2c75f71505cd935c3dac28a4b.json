{"sha": "6b131d5b1e7ac7d2c75f71505cd935c3dac28a4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmIxMzFkNWIxZTdhYzdkMmM3NWY3MTUwNWNkOTM1YzNkYWMyOGE0Yg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2016-01-06T10:24:15Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2016-01-06T10:24:15Z"}, "message": "re PR sanitizer/69099 (ICE when compiling gcc.dg/atomic/c11-atomic-exec-2.c with -fsanitize=float-cast-overflow)\n\n\tPR sanitizer/69099\n\t* c-convert.c (convert) [INTEGER_TYPE]: Drop ARG.  Don't pass ARG to\n\tubsan_instrument_float_cast.  Fold EXPR.  Use NULL_TREE instead of\n\tNULL.\n\n\t* convert.c (convert_to_integer_1): Adjust call to\n\tubsan_instrument_float_cast.  Use NULL_TREE instead of NULL.\n\t* ubsan.c (ubsan_instrument_float_cast): Drop the ARG parameter.  Use\n\tEXPR instead of ARG.\n\t* ubsan.h (ubsan_instrument_float_cast): Adjust declaration.\n\n\t* gcc.dg/ubsan/float-cast-overflow-atomic.c: New test.\n\nFrom-SVN: r232099", "tree": {"sha": "fed93df58aa881dc5fef68cb7b3ecaffb7b22bd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fed93df58aa881dc5fef68cb7b3ecaffb7b22bd7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b131d5b1e7ac7d2c75f71505cd935c3dac28a4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b131d5b1e7ac7d2c75f71505cd935c3dac28a4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b131d5b1e7ac7d2c75f71505cd935c3dac28a4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b131d5b1e7ac7d2c75f71505cd935c3dac28a4b/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "396a2ee2ecfc2deb2f6672c9149be22ce244d242", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/396a2ee2ecfc2deb2f6672c9149be22ce244d242", "html_url": "https://github.com/Rust-GCC/gccrs/commit/396a2ee2ecfc2deb2f6672c9149be22ce244d242"}], "stats": {"total": 220, "additions": 204, "deletions": 16}, "files": [{"sha": "e5b31af4893c0c56e21cefdddbabebaa1660456e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b131d5b1e7ac7d2c75f71505cd935c3dac28a4b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b131d5b1e7ac7d2c75f71505cd935c3dac28a4b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b131d5b1e7ac7d2c75f71505cd935c3dac28a4b", "patch": "@@ -1,3 +1,12 @@\n+2016-01-06  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR sanitizer/69099\n+\t* convert.c (convert_to_integer_1): Adjust call to\n+\tubsan_instrument_float_cast.  Use NULL_TREE instead of NULL.\n+\t* ubsan.c (ubsan_instrument_float_cast): Drop the ARG parameter.  Use\n+\tEXPR instead of ARG.\n+\t* ubsan.h (ubsan_instrument_float_cast): Adjust declaration.\n+\n 2016-01-05  Sandra Loosemore <sandra@codesourcery.com>\n \n \tPR 1078"}, {"sha": "379f00219f4adf3c98da4c4d4e013f15c6c757b9", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b131d5b1e7ac7d2c75f71505cd935c3dac28a4b/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b131d5b1e7ac7d2c75f71505cd935c3dac28a4b/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=6b131d5b1e7ac7d2c75f71505cd935c3dac28a4b", "patch": "@@ -1,3 +1,10 @@\n+2016-01-06  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR sanitizer/69099\n+\t* c-convert.c (convert) [INTEGER_TYPE]: Drop ARG.  Don't pass ARG to\n+\tubsan_instrument_float_cast.  Fold EXPR.  Use NULL_TREE instead of\n+\tNULL.\n+\n 2016-01-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tUpdate copyright years."}, {"sha": "4167c3461f3fa55b19449da6ccfdc0510ffbb005", "filename": "gcc/c/c-convert.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b131d5b1e7ac7d2c75f71505cd935c3dac28a4b/gcc%2Fc%2Fc-convert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b131d5b1e7ac7d2c75f71505cd935c3dac28a4b/gcc%2Fc%2Fc-convert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-convert.c?ref=6b131d5b1e7ac7d2c75f71505cd935c3dac28a4b", "patch": "@@ -111,20 +111,16 @@ convert (tree type, tree expr)\n \t  && COMPLETE_TYPE_P (type)\n \t  && do_ubsan_in_current_function ())\n \t{\n-\t  tree arg;\n \t  if (in_late_binary_op)\n-\t    {\n-\t      expr = save_expr (expr);\n-\t      arg = expr;\n-\t    }\n+\t    expr = save_expr (expr);\n \t  else\n \t    {\n \t      expr = c_save_expr (expr);\n-\t      arg = c_fully_fold (expr, false, NULL);\n+\t      expr = c_fully_fold (expr, false, NULL);\n \t    }\n-\t  tree check = ubsan_instrument_float_cast (loc, type, expr, arg);\n+\t  tree check = ubsan_instrument_float_cast (loc, type, expr);\n \t  expr = fold_build1 (FIX_TRUNC_EXPR, type, expr);\n-\t  if (check == NULL)\n+\t  if (check == NULL_TREE)\n \t    return expr;\n \t  return fold_build2 (COMPOUND_EXPR, TREE_TYPE (expr), check, expr);\n \t}"}, {"sha": "dd7d818b67bf1012db80dd37a8ceecec15232012", "filename": "gcc/convert.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b131d5b1e7ac7d2c75f71505cd935c3dac28a4b/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b131d5b1e7ac7d2c75f71505cd935c3dac28a4b/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=6b131d5b1e7ac7d2c75f71505cd935c3dac28a4b", "patch": "@@ -920,9 +920,9 @@ convert_to_integer_1 (tree type, tree expr, bool dofold)\n \t  && do_ubsan_in_current_function ())\n \t{\n \t  expr = save_expr (expr);\n-\t  tree check = ubsan_instrument_float_cast (loc, type, expr, expr);\n+\t  tree check = ubsan_instrument_float_cast (loc, type, expr);\n \t  expr = build1 (FIX_TRUNC_EXPR, type, expr);\n-\t  if (check == NULL)\n+\t  if (check == NULL_TREE)\n \t    return expr;\n \t  return maybe_fold_build2_loc (dofold, loc, COMPOUND_EXPR,\n \t\t\t\t\tTREE_TYPE (expr), check, expr);"}, {"sha": "85d630b0b7f28e345188c8988b202375fff160b0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b131d5b1e7ac7d2c75f71505cd935c3dac28a4b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b131d5b1e7ac7d2c75f71505cd935c3dac28a4b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6b131d5b1e7ac7d2c75f71505cd935c3dac28a4b", "patch": "@@ -1,3 +1,8 @@\n+2016-01-06  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR sanitizer/69099\n+\t* gcc.dg/ubsan/float-cast-overflow-atomic.c: New test.\n+\n 2016-01-05  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/69104"}, {"sha": "0a4fa0165b0bb112dc78ffed021b609efeaa1677", "filename": "gcc/testsuite/gcc.dg/ubsan/float-cast-overflow-atomic.c", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b131d5b1e7ac7d2c75f71505cd935c3dac28a4b/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Ffloat-cast-overflow-atomic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b131d5b1e7ac7d2c75f71505cd935c3dac28a4b/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Ffloat-cast-overflow-atomic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Ffloat-cast-overflow-atomic.c?ref=6b131d5b1e7ac7d2c75f71505cd935c3dac28a4b", "patch": "@@ -0,0 +1,171 @@\n+/* PR sanitizer/69099 */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -pedantic-errors -fsanitize=float-cast-overflow\" } */\n+/* This is gcc.dg/atomic/c11-atomic-exec-2.c.  */\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+#define CMPLX(X, Y) __builtin_complex ((X), (Y))\n+\n+#define TEST_COMPOUND(TYPE, LHSVAL, RHSVAL, OP)\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      static volatile _Atomic (TYPE) a = (TYPE) (LHSVAL);\t\t\\\n+      if ((a OP##= (RHSVAL)) != (TYPE) ((TYPE) (LHSVAL) OP (RHSVAL)))\t\\\n+\tabort ();\t\t\t\t\t\t\t\\\n+      if (a != (TYPE) ((TYPE) (LHSVAL) OP (RHSVAL)))\t\t\t\\\n+\tabort ();\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+#define TEST_COMPOUND_ARITH(LHSVAL, RHSVAL, OP)\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      TEST_COMPOUND (_Bool, (LHSVAL), (RHSVAL), OP);\t\t\t\\\n+      TEST_COMPOUND (char, (LHSVAL), (RHSVAL), OP);\t\t\t\\\n+      TEST_COMPOUND (signed char, (LHSVAL), (RHSVAL), OP);\t\t\\\n+      TEST_COMPOUND (unsigned char, (LHSVAL), (RHSVAL), OP);\t\t\\\n+      TEST_COMPOUND (signed short, (LHSVAL), (RHSVAL), OP);\t\t\\\n+      TEST_COMPOUND (unsigned short, (LHSVAL), (RHSVAL), OP);\t\t\\\n+      TEST_COMPOUND (signed int, (LHSVAL), (RHSVAL), OP);\t\t\\\n+      TEST_COMPOUND (unsigned int, (LHSVAL), (RHSVAL), OP);\t\t\\\n+      TEST_COMPOUND (signed long, (LHSVAL), (RHSVAL), OP);\t\t\\\n+      TEST_COMPOUND (unsigned long, (LHSVAL), (RHSVAL), OP);\t\t\\\n+      TEST_COMPOUND (signed long long, (LHSVAL), (RHSVAL), OP);\t\t\\\n+      TEST_COMPOUND (unsigned long long, (LHSVAL), (RHSVAL), OP);\t\\\n+      TEST_COMPOUND (float, (LHSVAL), (RHSVAL), OP);\t\t\t\\\n+      TEST_COMPOUND (double, (LHSVAL), (RHSVAL), OP);\t\t\t\\\n+      TEST_COMPOUND (long double, (LHSVAL), (RHSVAL), OP);\t\t\\\n+      TEST_COMPOUND (_Complex float, (LHSVAL), (RHSVAL), OP);\t\t\\\n+      TEST_COMPOUND (_Complex double, (LHSVAL), (RHSVAL), OP);\t\t\\\n+      TEST_COMPOUND (_Complex long double, (LHSVAL), (RHSVAL), OP);\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+#define TEST_COMPOUND_INT(LHSVAL, RHSVAL, OP)\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      TEST_COMPOUND (_Bool, (LHSVAL), (RHSVAL), OP);\t\t\t\\\n+      TEST_COMPOUND (char, (LHSVAL), (RHSVAL), OP);\t\t\t\\\n+      TEST_COMPOUND (signed char, (LHSVAL), (RHSVAL), OP);\t\t\\\n+      TEST_COMPOUND (unsigned char, (LHSVAL), (RHSVAL), OP);\t\t\\\n+      TEST_COMPOUND (signed short, (LHSVAL), (RHSVAL), OP);\t\t\\\n+      TEST_COMPOUND (unsigned short, (LHSVAL), (RHSVAL), OP);\t\t\\\n+      TEST_COMPOUND (signed int, (LHSVAL), (RHSVAL), OP);\t\t\\\n+      TEST_COMPOUND (unsigned int, (LHSVAL), (RHSVAL), OP);\t\t\\\n+      TEST_COMPOUND (signed long, (LHSVAL), (RHSVAL), OP);\t\t\\\n+      TEST_COMPOUND (unsigned long, (LHSVAL), (RHSVAL), OP);\t\t\\\n+      TEST_COMPOUND (signed long long, (LHSVAL), (RHSVAL), OP);\t\t\\\n+      TEST_COMPOUND (unsigned long long, (LHSVAL), (RHSVAL), OP);\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+static void\n+test_mult (void)\n+{\n+  TEST_COMPOUND_ARITH (1, 2, *);\n+  TEST_COMPOUND_ARITH (-3, 5, *);\n+  TEST_COMPOUND_ARITH (-7, -20, *);\n+  TEST_COMPOUND_ARITH (1.25, 3.5, *);\n+  TEST_COMPOUND_ARITH (CMPLX (1.5, 2.5), CMPLX (3.5, 4.5), *);\n+  TEST_COMPOUND_ARITH (CMPLX (1.5, 2.5), 2, *);\n+}\n+\n+static void\n+test_div (void)\n+{\n+  TEST_COMPOUND_ARITH (1, 2, /);\n+  TEST_COMPOUND_ARITH (-6, 3, /);\n+  TEST_COMPOUND_ARITH (-70, -10, /);\n+  TEST_COMPOUND_ARITH (1.25, 2.5, /);\n+  TEST_COMPOUND_ARITH (CMPLX (1.0, 1.0), CMPLX (0.5, 0.5), /);\n+  TEST_COMPOUND_ARITH (CMPLX (1.5, 2.5), 2, /);\n+}\n+\n+static void\n+test_mod (void)\n+{\n+  TEST_COMPOUND_INT (1, 2, %);\n+  TEST_COMPOUND_INT (-3, 5, %);\n+  TEST_COMPOUND_INT (-7, -2, %);\n+}\n+\n+static void\n+test_plus (void)\n+{\n+  TEST_COMPOUND_ARITH (1, 2, +);\n+  TEST_COMPOUND_ARITH (-3, 5, +);\n+  TEST_COMPOUND_ARITH (-7, -20, +);\n+  TEST_COMPOUND_ARITH (1.25, 3.5, +);\n+  TEST_COMPOUND_ARITH (CMPLX (1.5, 2.5), CMPLX (3.5, 4.5), +);\n+  TEST_COMPOUND_ARITH (CMPLX (1.5, 2.5), 2, +);\n+  static int ia[2];\n+  TEST_COMPOUND (int *, &ia[1], 1, +);\n+  TEST_COMPOUND (int *, &ia[1], -1, +);\n+}\n+\n+static void\n+test_minus (void)\n+{\n+  TEST_COMPOUND_ARITH (1, 2, -);\n+  TEST_COMPOUND_ARITH (-3, 5, -);\n+  TEST_COMPOUND_ARITH (-7, -20, -);\n+  TEST_COMPOUND_ARITH (3.5, 1.25, -);\n+  TEST_COMPOUND_ARITH (CMPLX (3.5, 4.5), CMPLX (1.5, 2.5), -);\n+  TEST_COMPOUND_ARITH (CMPLX (3.5, 2.5), 2, -);\n+  static int ia[2];\n+  TEST_COMPOUND (int *, &ia[1], 1, -);\n+  TEST_COMPOUND (int *, &ia[1], -1, -);\n+}\n+\n+static void\n+test_lshift (void)\n+{\n+  TEST_COMPOUND_INT (1, 7, <<);\n+  TEST_COMPOUND_INT (15, 3, <<);\n+}\n+\n+static void\n+test_rshift (void)\n+{\n+  TEST_COMPOUND_INT (1, 1, >>);\n+  TEST_COMPOUND_INT (127, 4, >>);\n+}\n+\n+static void\n+test_and (void)\n+{\n+  TEST_COMPOUND_INT (0x1234, 0x7856, &);\n+  TEST_COMPOUND_INT (-1, 0x12345678, &);\n+}\n+\n+static void\n+test_xor (void)\n+{\n+  TEST_COMPOUND_INT (0x1234, 0x7856, ^);\n+  TEST_COMPOUND_INT (-1, 0x12345678, ^);\n+}\n+\n+static void\n+test_or (void)\n+{\n+  TEST_COMPOUND_INT (0x1234, 0x7856, |);\n+  TEST_COMPOUND_INT (-12345, 0x12345678, |);\n+}\n+\n+int\n+main (void)\n+{\n+  test_mult ();\n+  test_div ();\n+  test_mod ();\n+  test_plus ();\n+  test_minus ();\n+  test_lshift ();\n+  test_rshift ();\n+  test_and ();\n+  test_xor ();\n+  test_or ();\n+  exit (0);\n+}"}, {"sha": "d3fbfd177e6896443f9f6d20e0087727bf24e4f9", "filename": "gcc/ubsan.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b131d5b1e7ac7d2c75f71505cd935c3dac28a4b/gcc%2Fubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b131d5b1e7ac7d2c75f71505cd935c3dac28a4b/gcc%2Fubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.c?ref=6b131d5b1e7ac7d2c75f71505cd935c3dac28a4b", "patch": "@@ -1478,18 +1478,18 @@ ubsan_use_new_style_p (location_t loc)\n }\n \n /* Instrument float point-to-integer conversion.  TYPE is an integer type of\n-   destination, EXPR is floating-point expression.  ARG is what to pass\n-   the libubsan call as value, often EXPR itself.  */\n+   destination, EXPR is floating-point expression.  */\n \n tree\n-ubsan_instrument_float_cast (location_t loc, tree type, tree expr, tree arg)\n+ubsan_instrument_float_cast (location_t loc, tree type, tree expr)\n {\n   tree expr_type = TREE_TYPE (expr);\n   tree t, tt, fn, min, max;\n   machine_mode mode = TYPE_MODE (expr_type);\n   int prec = TYPE_PRECISION (type);\n   bool uns_p = TYPE_UNSIGNED (type);\n-  if (!loc) loc = input_location;\n+  if (loc == UNKNOWN_LOCATION)\n+    loc = input_location;\n \n   /* Float to integer conversion first truncates toward zero, so\n      even signed char c = 127.875f; is not problematic.\n@@ -1609,7 +1609,7 @@ ubsan_instrument_float_cast (location_t loc, tree type, tree expr, tree arg)\n       fn = builtin_decl_explicit (bcode);\n       fn = build_call_expr_loc (loc, fn, 2,\n \t\t\t\tbuild_fold_addr_expr_loc (loc, data),\n-\t\t\t\tubsan_encode_value (arg, false));\n+\t\t\t\tubsan_encode_value (expr, false));\n     }\n \n   return fold_build3 (COND_EXPR, void_type_node, t, fn, integer_zero_node);"}, {"sha": "c66d0afab884db3716545c65cbc23c0caf88b222", "filename": "gcc/ubsan.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b131d5b1e7ac7d2c75f71505cd935c3dac28a4b/gcc%2Fubsan.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b131d5b1e7ac7d2c75f71505cd935c3dac28a4b/gcc%2Fubsan.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.h?ref=6b131d5b1e7ac7d2c75f71505cd935c3dac28a4b", "patch": "@@ -53,7 +53,7 @@ extern tree ubsan_type_descriptor (tree, enum ubsan_print_style = UBSAN_PRINT_NO\n extern tree ubsan_encode_value (tree, bool = false);\n extern bool is_ubsan_builtin_p (tree);\n extern tree ubsan_build_overflow_builtin (tree_code, location_t, tree, tree, tree);\n-extern tree ubsan_instrument_float_cast (location_t, tree, tree, tree);\n+extern tree ubsan_instrument_float_cast (location_t, tree, tree);\n extern tree ubsan_get_source_location_type (void);\n \n #endif  /* GCC_UBSAN_H  */"}]}