{"sha": "a3b5decfef52a8299111fbb8a2c9bd57abfc810f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNiNWRlY2ZlZjUyYTgyOTkxMTFmYmI4YTJjOWJkNTdhYmZjODEwZg==", "commit": {"author": {"name": "Tim Josling", "email": "tej@melbpc.org.au", "date": "2002-08-13T08:20:12Z"}, "committer": {"name": "Tim Josling", "email": "timjosling@gcc.gnu.org", "date": "2002-08-13T08:20:12Z"}, "message": "Fixes for treelang, mainly provide fake definition of rtx for parse.y includes.\n\nFrom-SVN: r56248", "tree": {"sha": "74d7bb6085b5af93b11fa428acf56a57ada18726", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74d7bb6085b5af93b11fa428acf56a57ada18726"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3b5decfef52a8299111fbb8a2c9bd57abfc810f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3b5decfef52a8299111fbb8a2c9bd57abfc810f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3b5decfef52a8299111fbb8a2c9bd57abfc810f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3b5decfef52a8299111fbb8a2c9bd57abfc810f/comments", "author": null, "committer": null, "parents": [{"sha": "2d7db877a53b7b5f4eef8e2547bc213655ed096f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d7db877a53b7b5f4eef8e2547bc213655ed096f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d7db877a53b7b5f4eef8e2547bc213655ed096f"}], "stats": {"total": 69, "additions": 61, "deletions": 8}, "files": [{"sha": "91c133ab6a983e19855374fbf8771a01dda63657", "filename": "gcc/treelang/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3b5decfef52a8299111fbb8a2c9bd57abfc810f/gcc%2Ftreelang%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3b5decfef52a8299111fbb8a2c9bd57abfc810f/gcc%2Ftreelang%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FChangeLog?ref=a3b5decfef52a8299111fbb8a2c9bd57abfc810f", "patch": "@@ -2,6 +2,13 @@\n \n \t* treelang.c: Remove cpp_post_options.\n \n+2002-08-13  Tim Josling  <tej@melbpc.org.au>\n+\n+\t* parse.y: Provide dummy definition of rtx for use by config.h.\n+\t* Make-lang.in (treetree.o): Remove dependency on non-existent\n+\tgt-treelang-treelang.h.\n+\t(gt-treelang-treelang.h): Remove.\n+\n 2002-08-08  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* treelang/Make-lang.in (treelang.mostlyclean): Remove coverage files."}, {"sha": "a133767287245cd433f8940a6e50bc147407e802", "filename": "gcc/treelang/Make-lang.in", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3b5decfef52a8299111fbb8a2c9bd57abfc810f/gcc%2Ftreelang%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3b5decfef52a8299111fbb8a2c9bd57abfc810f/gcc%2Ftreelang%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FMake-lang.in?ref=a3b5decfef52a8299111fbb8a2c9bd57abfc810f", "patch": "@@ -92,7 +92,7 @@ tree1$(exeext): treelang/tree1.o treelang/treetree.o treelang/lex.o treelang/par\n \n treelang/tree1.o: $(srcdir)/treelang/tree1.c $(srcdir)/treelang/treelang.h \\\n \t$(srcdir)/treelang/parse.h $(CONFIG_H) \\\n-\tgt-treelang-tree1.h gt-treelang-treelang.h gtype-treelang.h\n+\tgt-treelang-tree1.h gtype-treelang.h\n \t$(CC) -o $@ -c $(ALL_CFLAGS) $(INCLUDES) $< \n \n treelang/treetree.o: $(srcdir)/treelang/treetree.c $(srcdir)/treelang/treetree.h \\\n@@ -119,7 +119,7 @@ $(srcdir)/treelang/parse.c $(srcdir)/treelang/parse.h: $(srcdir)/treelang/parse.\n \t--output=$(srcdir)/treelang/parse.c --defines\n # -v\n \n-gt-treelang-tree1.h gt-treelang-treelang.h gtype-treelang.h : s-gtype; @true\n+gt-treelang-tree1.h gtype-treelang.h : s-gtype; @true\n \n #\f\n # Build hooks:\n@@ -164,6 +164,7 @@ treelang.install.common.done:  installdirs treelang.done\n \t   if [ -f $$name ] ; then \\\n \t    name2=\"`echo \\`basename $$name\\` | sed -e '$(program_transform_name)' `\"; \\\n \t    rm -f $(bindir)/$$name2$(exeext); \\\n+\t    echo $(INSTALL_PROGRAM) $$name$(exeext) $(bindir)/$$name2$(exeext); \\\n \t    $(INSTALL_PROGRAM) $$name$(exeext) $(bindir)/$$name2$(exeext); \\\n \t    chmod a+x $(bindir)/$$name2$(exeext); \\\n \t  fi ; \\"}, {"sha": "7d7400f72bb77dd68e0ecd37ffff8fc434194fb6", "filename": "gcc/treelang/parse.y", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3b5decfef52a8299111fbb8a2c9bd57abfc810f/gcc%2Ftreelang%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3b5decfef52a8299111fbb8a2c9bd57abfc810f/gcc%2Ftreelang%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Fparse.y?ref=a3b5decfef52a8299111fbb8a2c9bd57abfc810f", "patch": "@@ -42,9 +42,12 @@\n \n    */\n \n+/* Undefine IN_GCC so malloc etc work. The alternative is to redefine\n+   the out of stack routine in bison.  */\n #undef IN_GCC\n-\n+/* Front ends should not have to see these, but config.h needs everything.  */\n typedef void *tree;\n+typedef void *rtx;\n \n #include <stdio.h>\n #include <stdlib.h>\n@@ -804,7 +807,7 @@ init_opt:\n }\n |init {\n   /* Nothing to do.  */\n-}\n+};\n \n init:\n ASSIGN init_element {"}, {"sha": "5159d34b2809a01d33746d5e3a997b8a19d71e23", "filename": "gcc/treelang/treetree.c", "status": "modified", "additions": 46, "deletions": 4, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3b5decfef52a8299111fbb8a2c9bd57abfc810f/gcc%2Ftreelang%2Ftreetree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3b5decfef52a8299111fbb8a2c9bd57abfc810f/gcc%2Ftreelang%2Ftreetree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreetree.c?ref=a3b5decfef52a8299111fbb8a2c9bd57abfc810f", "patch": "@@ -259,7 +259,7 @@ tree_code_create_function_prototype (unsigned char* chars,\n       type_node = get_type_for_numeric_type (parm->type);\n       type_list = tree_cons (NULL_TREE, type_node, type_list);\n     }\n-  /* Last parm if null indicates fixed length list (as opposed to\n+  /* Last parm if void indicates fixed length list (as opposed to\n      printf style va_* list).  */\n   type_list = tree_cons (NULL_TREE, void_type_node, type_list);\n   /* The back end needs them in reverse order.  */\n@@ -852,6 +852,11 @@ tree_ggc_storage_always_used (void * m)\n \n /* Tell the c code we are not objective C.  */\n \n+int\n+maybe_objc_comptypes (tree lhs ATTRIBUTE_UNUSED,\n+                      tree rhs ATTRIBUTE_UNUSED,\n+                      int reflexive ATTRIBUTE_UNUSED);\n+\n int\n maybe_objc_comptypes (tree lhs ATTRIBUTE_UNUSED,\n                       tree rhs ATTRIBUTE_UNUSED,\n@@ -880,12 +885,25 @@ check_function_format (int *status ATTRIBUTE_UNUSED,\n \n /* Tell the c code we are not objective C.  */\n \n+tree\n+maybe_building_objc_message_expr (void);\n+\n tree\n maybe_building_objc_message_expr ()\n {\n   return 0;\n }\n \n+/* Tell the c code we are not objective C.  */\n+\n+int\n+objc_comptypes (tree lhs ATTRIBUTE_UNUSED, \n+                tree rhs ATTRIBUTE_UNUSED, \n+                int reflexive ATTRIBUTE_UNUSED)\n+{\n+  return 0;\n+}\n+\n /* Should not be called for treelang.   */\n \n tree\n@@ -955,7 +973,7 @@ cpp_create_reader (enum c_lang lang ATTRIBUTE_UNUSED)\n /* Should not be called for treelang.   */\n \n void\n-cpp_preprocess_file (cpp_reader *pfile ATTRIBUTE_UNUSED)\n+cpp_post_options (cpp_reader *pfile ATTRIBUTE_UNUSED)\n {\n   abort ();\n }\n@@ -980,8 +998,8 @@ init_pragma ()\n \n /* Should not be called for treelang.   */\n \n-void\n-cpp_finish (cpp_reader *pfile ATTRIBUTE_UNUSED)\n+int\n+cpp_finish (cpp_reader *pfile ATTRIBUTE_UNUSED, FILE *f ATTRIBUTE_UNUSED)\n {\n   abort ();\n }\n@@ -1047,12 +1065,36 @@ set_Wformat (int setting ATTRIBUTE_UNUSED)\n \n /* Should not be called for treelang.   */\n \n+void\n+maybe_objc_check_decl (tree decl ATTRIBUTE_UNUSED);\n+\n void\n maybe_objc_check_decl (tree decl ATTRIBUTE_UNUSED)\n {\n   abort ();\n }\n \n+/* Used for objective C.  */\n+\n+void\n+objc_check_decl (tree decl ATTRIBUTE_UNUSED);\n+\n+void\n+objc_check_decl (tree decl ATTRIBUTE_UNUSED)\n+{\n+}\n+\n+/* Tell the c code we are not objective C.  */\n+\n+tree\n+objc_message_selector (void);\n+\n+tree\n+objc_message_selector ()\n+{\n+  return 0;\n+}\n+\n /* Should not be called for treelang.   */\n \n void"}]}