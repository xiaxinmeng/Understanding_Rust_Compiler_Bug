{"sha": "4a1f940f68cf13277252a3588ac4c05bd33aab1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGExZjk0MGY2OGNmMTMyNzcyNTJhMzU4OGFjNGMwNWJkMzNhYWIxYQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2014-06-02T12:06:11Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2014-06-02T12:06:11Z"}, "message": "Delete a copy that looks like a relic from obstack times.\n\n\t* varasm.c (copy_constant): Delete function.\n\t(build_constant_desc): Don't call it.\n\nFrom-SVN: r211130", "tree": {"sha": "0eefdb7ee64b9156cdef35c4fc74a9c009eca787", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0eefdb7ee64b9156cdef35c4fc74a9c009eca787"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a1f940f68cf13277252a3588ac4c05bd33aab1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a1f940f68cf13277252a3588ac4c05bd33aab1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a1f940f68cf13277252a3588ac4c05bd33aab1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a1f940f68cf13277252a3588ac4c05bd33aab1a/comments", "author": null, "committer": null, "parents": [{"sha": "27e83a44d3e372702614769190cab3f2d8575713", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27e83a44d3e372702614769190cab3f2d8575713", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27e83a44d3e372702614769190cab3f2d8575713"}], "stats": {"total": 73, "additions": 6, "deletions": 67}, "files": [{"sha": "07f3b0fc65a1df307e0a1428421f7a228334a47d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a1f940f68cf13277252a3588ac4c05bd33aab1a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a1f940f68cf13277252a3588ac4c05bd33aab1a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4a1f940f68cf13277252a3588ac4c05bd33aab1a", "patch": "@@ -1,3 +1,8 @@\n+2014-06-02  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* varasm.c (copy_constant): Delete function.\n+\t(build_constant_desc): Don't call it.\n+\n 2014-06-02  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n \tPR target/61154"}, {"sha": "375838ad9f5bcb15fd49ecf419105e339288ca53", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 67, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a1f940f68cf13277252a3588ac4c05bd33aab1a/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a1f940f68cf13277252a3588ac4c05bd33aab1a/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=4a1f940f68cf13277252a3588ac4c05bd33aab1a", "patch": "@@ -114,7 +114,6 @@ static hashval_t const_desc_hash (const void *);\n static int const_desc_eq (const void *, const void *);\n static hashval_t const_hash_1 (const tree);\n static int compare_constant (const tree, const tree);\n-static tree copy_constant (tree);\n static void output_constant_def_contents (rtx);\n static void output_addressed_constants (tree);\n static unsigned HOST_WIDE_INT output_constant (tree, unsigned HOST_WIDE_INT,\n@@ -3103,71 +3102,6 @@ compare_constant (const tree t1, const tree t2)\n   gcc_unreachable ();\n }\n \f\n-/* Make a copy of the whole tree structure for a constant.  This\n-   handles the same types of nodes that compare_constant handles.  */\n-\n-static tree\n-copy_constant (tree exp)\n-{\n-  switch (TREE_CODE (exp))\n-    {\n-    case ADDR_EXPR:\n-      /* For ADDR_EXPR, we do not want to copy the decl whose address\n-\t is requested.  We do want to copy constants though.  */\n-      if (CONSTANT_CLASS_P (TREE_OPERAND (exp, 0)))\n-\treturn build1 (TREE_CODE (exp), TREE_TYPE (exp),\n-\t\t       copy_constant (TREE_OPERAND (exp, 0)));\n-      else\n-\treturn copy_node (exp);\n-\n-    case INTEGER_CST:\n-    case REAL_CST:\n-    case FIXED_CST:\n-    case STRING_CST:\n-      return copy_node (exp);\n-\n-    case COMPLEX_CST:\n-      return build_complex (TREE_TYPE (exp),\n-\t\t\t    copy_constant (TREE_REALPART (exp)),\n-\t\t\t    copy_constant (TREE_IMAGPART (exp)));\n-\n-    case PLUS_EXPR:\n-    case POINTER_PLUS_EXPR:\n-    case MINUS_EXPR:\n-      return build2 (TREE_CODE (exp), TREE_TYPE (exp),\n-\t\t     copy_constant (TREE_OPERAND (exp, 0)),\n-\t\t     copy_constant (TREE_OPERAND (exp, 1)));\n-\n-    CASE_CONVERT:\n-    case VIEW_CONVERT_EXPR:\n-      return build1 (TREE_CODE (exp), TREE_TYPE (exp),\n-\t\t     copy_constant (TREE_OPERAND (exp, 0)));\n-\n-    case VECTOR_CST:\n-      return build_vector (TREE_TYPE (exp), VECTOR_CST_ELTS (exp));\n-\n-    case CONSTRUCTOR:\n-      {\n-\ttree copy = copy_node (exp);\n-\tvec<constructor_elt, va_gc> *v;\n-\tunsigned HOST_WIDE_INT idx;\n-\ttree purpose, value;\n-\n-\tvec_alloc (v, vec_safe_length (CONSTRUCTOR_ELTS (exp)));\n-\tFOR_EACH_CONSTRUCTOR_ELT (CONSTRUCTOR_ELTS (exp), idx, purpose, value)\n-\t  {\n-\t    constructor_elt ce = {purpose, copy_constant (value)};\n-\t    v->quick_push (ce);\n-\t  }\n-\tCONSTRUCTOR_ELTS (copy) = v;\n-\treturn copy;\n-      }\n-\n-    default:\n-      gcc_unreachable ();\n-    }\n-}\n-\f\n /* Return the section into which constant EXP should be placed.  */\n \n static section *\n@@ -3208,7 +3142,7 @@ build_constant_desc (tree exp)\n   tree decl;\n \n   desc = ggc_alloc<constant_descriptor_tree> ();\n-  desc->value = copy_constant (exp);\n+  desc->value = exp;\n \n   /* Create a string containing the label name, in LABEL.  */\n   labelno = const_labelno++;"}]}