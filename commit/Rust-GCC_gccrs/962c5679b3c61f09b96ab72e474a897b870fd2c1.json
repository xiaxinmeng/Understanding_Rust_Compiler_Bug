{"sha": "962c5679b3c61f09b96ab72e474a897b870fd2c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTYyYzU2NzliM2M2MWYwOWI5NmFiNzJlNDc0YTg5N2I4NzBmZDJjMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-01-05T21:12:02Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-01-05T21:12:02Z"}, "message": "re PR c++/78890 (ICE on invalid reference type in union)\n\n\tPR c++/78890\n\t* class.c (check_field_decls): Diagnose REFERENCE_TYPE fields in\n\tunions even for C++11 and later.\n\n\t* g++.dg/init/ref14.C: Expect error even in C++11 and later.\n\t* g++.dg/init/union1.C: Likewise.\n\t* g++.dg/cpp0x/union6.C: Expect errors.\n\t* g++.dg/cpp0x/union8.C: New test.\n\t* g++.dg/cpp0x/pr78890-1.C: New test.\n\t* g++.dg/cpp0x/pr78890-2.C: New test.\n\nFrom-SVN: r244112", "tree": {"sha": "4db3ac6174fe412ca90022d363d42e2dcfeb5ba5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4db3ac6174fe412ca90022d363d42e2dcfeb5ba5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/962c5679b3c61f09b96ab72e474a897b870fd2c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/962c5679b3c61f09b96ab72e474a897b870fd2c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/962c5679b3c61f09b96ab72e474a897b870fd2c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/962c5679b3c61f09b96ab72e474a897b870fd2c1/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8c15f541f3e9835facb5afaa994887de48ed4b78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c15f541f3e9835facb5afaa994887de48ed4b78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c15f541f3e9835facb5afaa994887de48ed4b78"}], "stats": {"total": 123, "additions": 112, "deletions": 11}, "files": [{"sha": "5bc7d5217686ac23de21c3222aeab5aefa173577", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962c5679b3c61f09b96ab72e474a897b870fd2c1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962c5679b3c61f09b96ab72e474a897b870fd2c1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=962c5679b3c61f09b96ab72e474a897b870fd2c1", "patch": "@@ -1,3 +1,9 @@\n+2017-01-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/78890\n+\t* class.c (check_field_decls): Diagnose REFERENCE_TYPE fields in\n+\tunions even for C++11 and later.\n+\n 2017-01-05  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/78765"}, {"sha": "b7c26a1829f53d9ce05eb1cbcbef0c753b2ec68d", "filename": "gcc/cp/class.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962c5679b3c61f09b96ab72e474a897b870fd2c1/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962c5679b3c61f09b96ab72e474a897b870fd2c1/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=962c5679b3c61f09b96ab72e474a897b870fd2c1", "patch": "@@ -3759,25 +3759,27 @@ check_field_decls (tree t, tree *access_decls,\n       /* When this goes into scope, it will be a non-local reference.  */\n       DECL_NONLOCAL (x) = 1;\n \n-      if (TREE_CODE (t) == UNION_TYPE\n-\t  && cxx_dialect < cxx11)\n+      if (TREE_CODE (t) == UNION_TYPE)\n \t{\n \t  /* [class.union] (C++98)\n \n \t     If a union contains a static data member, or a member of\n \t     reference type, the program is ill-formed.\n \n-\t     In C++11 this limitation doesn't exist anymore.  */\n-\t  if (VAR_P (x))\n+\t     In C++11 [class.union] says:\n+\t     If a union contains a non-static data member of reference type\n+\t     the program is ill-formed.  */\n+\t  if (VAR_P (x) && cxx_dialect < cxx11)\n \t    {\n \t      error (\"in C++98 %q+D may not be static because it is \"\n \t\t     \"a member of a union\", x);\n \t      continue;\n \t    }\n-\t  if (TREE_CODE (type) == REFERENCE_TYPE)\n+\t  if (TREE_CODE (type) == REFERENCE_TYPE\n+\t      && TREE_CODE (x) == FIELD_DECL)\n \t    {\n-\t      error (\"in C++98 %q+D may not have reference type %qT \"\n-\t\t     \"because it is a member of a union\", x, type);\n+\t      error (\"non-static data member %q+D in a union may not \"\n+\t\t     \"have reference type %qT\", x, type);\n \t      continue;\n \t    }\n \t}"}, {"sha": "c992d7139219c280a2f047f0d290017b830d4334", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962c5679b3c61f09b96ab72e474a897b870fd2c1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962c5679b3c61f09b96ab72e474a897b870fd2c1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=962c5679b3c61f09b96ab72e474a897b870fd2c1", "patch": "@@ -1,3 +1,13 @@\n+2017-01-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/78890\n+\t* g++.dg/init/ref14.C: Expect error even in C++11 and later.\n+\t* g++.dg/init/union1.C: Likewise.\n+\t* g++.dg/cpp0x/union6.C: Expect errors.\n+\t* g++.dg/cpp0x/union8.C: New test.\n+\t* g++.dg/cpp0x/pr78890-1.C: New test.\n+\t* g++.dg/cpp0x/pr78890-2.C: New test.\n+\n 2017-01-05  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* gcc.target/powerpc/pr71670.c: Require p9vector."}, {"sha": "6fccc4fbe0df69fdd58bbe602c1ed99b3681da8d", "filename": "gcc/testsuite/g++.dg/cpp0x/pr78890-1.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962c5679b3c61f09b96ab72e474a897b870fd2c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr78890-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962c5679b3c61f09b96ab72e474a897b870fd2c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr78890-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr78890-1.C?ref=962c5679b3c61f09b96ab72e474a897b870fd2c1", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/78890\n+// { dg-do compile { target c++11 } }\n+\n+int\n+main()\n+{\n+  union {\n+    int a;\n+    int &b = a;\t\t// { dg-error \"may not have reference type\" }\n+  };\n+  a = 1;\n+  auto c = b + 1;\n+}"}, {"sha": "0a11bf4bc62ad1dbe68b8f307a5de3dbfeb6f661", "filename": "gcc/testsuite/g++.dg/cpp0x/pr78890-2.C", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962c5679b3c61f09b96ab72e474a897b870fd2c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr78890-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962c5679b3c61f09b96ab72e474a897b870fd2c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr78890-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr78890-2.C?ref=962c5679b3c61f09b96ab72e474a897b870fd2c1", "patch": "@@ -0,0 +1,44 @@\n+// PR c++/78890\n+// { dg-do compile { target c++11 } }\n+\n+template <typename T>\n+int\n+foo ()\n+{\n+  union {\n+    int a;\n+    int &b = a;\t\t\t// { dg-error \"may not have reference type\" }\n+  };\n+  a = 1;\n+  auto c = b + 1;\n+  return c;\n+}\n+\n+template <typename T>\n+T\n+bar ()\n+{\n+  union {\n+    T a;\n+    T &b = a;\t\t\t// { dg-error \"may not have reference type\" }\n+  };\n+  a = 1;\n+  auto c = b + 1;\n+  return c;\n+}\n+\n+template <typename T, typename U>\n+T baz()\n+{\n+  union {\n+    T a;\n+    U b = a;\t\t\t// { dg-error \"may not have reference type\" }\n+  };\n+  a = 1;\n+  auto c = b + 1;\n+  return c;\n+}\n+\n+int a = foo<int> ();\n+int b = bar<int> ();\n+int c = baz<int, int &> ();"}, {"sha": "408755e3195bc163402bdbc0e7a72826cbf7c52a", "filename": "gcc/testsuite/g++.dg/cpp0x/union6.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962c5679b3c61f09b96ab72e474a897b870fd2c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Funion6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962c5679b3c61f09b96ab72e474a897b870fd2c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Funion6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Funion6.C?ref=962c5679b3c61f09b96ab72e474a897b870fd2c1", "patch": "@@ -12,9 +12,9 @@ union Test2 {\n const int Test2::kConstant = 10;\n \n union Test3 {\n-  int& kConstant;\n+  int& kConstant;\t// { dg-error \"may not have reference type\" }\n };\n \n union Test4 {\n-  const int& kConstant = 10;\n+  const int& kConstant = 10;\t// { dg-error \"may not have reference type\" }\n };"}, {"sha": "11b9656f7450d7af11151706a300ee7e98c2c0ce", "filename": "gcc/testsuite/g++.dg/cpp0x/union8.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962c5679b3c61f09b96ab72e474a897b870fd2c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Funion8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962c5679b3c61f09b96ab72e474a897b870fd2c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Funion8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Funion8.C?ref=962c5679b3c61f09b96ab72e474a897b870fd2c1", "patch": "@@ -0,0 +1,26 @@\n+// PR c++/78890\n+// { dg-do compile { target c++11 } }\n+\n+union Test1 {\n+  static int kConstant;\n+};\n+\n+union Test2 {\n+  static const int kConstant;\n+};\n+\n+const int Test2::kConstant = 10;\n+\n+int k;\n+\n+union Test3 {\n+  static int& kRef;\n+};\n+\n+int& Test3::kRef = k;\n+\n+union Test4 {\n+  static const int& kRef;\n+};\n+\n+const int& Test4::kRef = 10;"}, {"sha": "6ac42415b4376cab478f57f2c90247e44a3c2143", "filename": "gcc/testsuite/g++.dg/init/ref14.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962c5679b3c61f09b96ab72e474a897b870fd2c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fref14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962c5679b3c61f09b96ab72e474a897b870fd2c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fref14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fref14.C?ref=962c5679b3c61f09b96ab72e474a897b870fd2c1", "patch": "@@ -4,7 +4,7 @@\n \n union A\n {\n-  int &i; // { dg-error \"may not have reference type\" \"\" { target { ! c++11 } } }\n+  int &i; // { dg-error \"may not have reference type\" }\n };\n \n void foo()"}, {"sha": "ccae3786b12180956bf78b70ba2d2e5c500669ca", "filename": "gcc/testsuite/g++.dg/init/union1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962c5679b3c61f09b96ab72e474a897b870fd2c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Funion1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962c5679b3c61f09b96ab72e474a897b870fd2c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Funion1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Funion1.C?ref=962c5679b3c61f09b96ab72e474a897b870fd2c1", "patch": "@@ -1,5 +1,5 @@\n // PR c++/14401\n \n union U {\n-  int& i; // { dg-error \"reference type\" \"\" { target { ! c++11 } } }\n+  int& i; // { dg-error \"reference type\" }\n };"}]}