{"sha": "12e55ac79dfb42727098dd9bcc60c62bfcec75a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJlNTVhYzc5ZGZiNDI3MjcwOThkZDliY2M2MGM2MmJmY2VjNzVhNg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-11-03T16:26:41Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-11-03T16:26:41Z"}, "message": "sparc.md (movtf_insn_sp32_no_fpu): Consolidate into...\n\n\t* config/sparc/sparc.md (movtf_insn_sp32_no_fpu): Consolidate into...\n\t(movtf_insn_sp32): ...this.\n\t(movtf_insn_sp64_no_fpu): Consolidate into...\n\t(movtf_insn_sp64): ...this.\n\t(movtf_insn_sp64_hq): Do not test TARGET_FPU.\n\t* config/sparc/sparc.c (sparc_legitimate_address_p): Likewise.\n\nFrom-SVN: r180831", "tree": {"sha": "f783063f8817d4653e83eeeb074687ab21a5d9d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f783063f8817d4653e83eeeb074687ab21a5d9d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12e55ac79dfb42727098dd9bcc60c62bfcec75a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12e55ac79dfb42727098dd9bcc60c62bfcec75a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12e55ac79dfb42727098dd9bcc60c62bfcec75a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12e55ac79dfb42727098dd9bcc60c62bfcec75a6/comments", "author": null, "committer": null, "parents": [{"sha": "d0bc53bdb4b648b26a2e185736c7ee1b5a7470e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0bc53bdb4b648b26a2e185736c7ee1b5a7470e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0bc53bdb4b648b26a2e185736c7ee1b5a7470e6"}], "stats": {"total": 58, "additions": 21, "deletions": 37}, "files": [{"sha": "47e162141367efb944d97d1a874d25fbd3ea5913", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12e55ac79dfb42727098dd9bcc60c62bfcec75a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12e55ac79dfb42727098dd9bcc60c62bfcec75a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=12e55ac79dfb42727098dd9bcc60c62bfcec75a6", "patch": "@@ -1,3 +1,12 @@\n+2011-11-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/sparc/sparc.md (movtf_insn_sp32_no_fpu): Consolidate into...\n+\t(movtf_insn_sp32): ...this.\n+\t(movtf_insn_sp64_no_fpu): Consolidate into...\n+\t(movtf_insn_sp64): ...this.\n+\t(movtf_insn_sp64_hq): Do not test TARGET_FPU.\n+\t* config/sparc/sparc.c (sparc_legitimate_address_p): Likewise.\n+\n 2011-11-03  Tristan Gingold  <gingold@adacore.com>\n \n \t* config/vms/vms.c (vms_patch_builtins): Fix typo."}, {"sha": "b57a15840975edff157cedd17291c6ac2eab74ce", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12e55ac79dfb42727098dd9bcc60c62bfcec75a6/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12e55ac79dfb42727098dd9bcc60c62bfcec75a6/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=12e55ac79dfb42727098dd9bcc60c62bfcec75a6", "patch": "@@ -3440,7 +3440,7 @@ sparc_legitimate_address_p (enum machine_mode mode, rtx addr, bool strict)\n \t     REG+REG address, then only one of them gets converted to an\n \t     offsettable address.  */\n \t  if (mode == TFmode\n-\t      && ! (TARGET_FPU && TARGET_ARCH64 && TARGET_HARD_QUAD))\n+\t      && ! (TARGET_ARCH64 && TARGET_HARD_QUAD))\n \t    return 0;\n \n \t  /* We prohibit REG + REG on ARCH32 if not optimizing for"}, {"sha": "d4827bde3c7baff96f659e2116b8a067a6b036eb", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 11, "deletions": 36, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12e55ac79dfb42727098dd9bcc60c62bfcec75a6/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12e55ac79dfb42727098dd9bcc60c62bfcec75a6/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=12e55ac79dfb42727098dd9bcc60c62bfcec75a6", "patch": "@@ -2377,45 +2377,30 @@\n })\n \n (define_insn \"*movtf_insn_sp32\"\n-  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=b, e,   o,U,  r\")\n-\t(match_operand:TF 1 \"input_operand\"        \" G,oe,GeUr,o,roG\"))]\n-  \"TARGET_FPU\n-   && ! TARGET_ARCH64\n-   && (register_operand (operands[0], TFmode)\n-       || register_or_zero_operand (operands[1], TFmode))\"\n-  \"#\"\n-  [(set_attr \"length\" \"4\")])\n-\n-;; Exactly the same as above, except that all `e' cases are deleted.\n-;; This is necessary to prevent reload from ever trying to use a `e' reg\n-;; when -mno-fpu.\n-\n-(define_insn \"*movtf_insn_sp32_no_fpu\"\n-  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=o,U,o,  r,o\")\n-\t(match_operand:TF 1 \"input_operand\"        \" G,o,U,roG,r\"))]\n-  \"! TARGET_FPU\n-   && ! TARGET_ARCH64\n+  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=b, e,o,  o,U,  r\")\n+\t(match_operand:TF 1 \"input_operand\"        \" G,oe,e,rGU,o,roG\"))]\n+  \"! TARGET_ARCH64\n    && (register_operand (operands[0], TFmode)\n        || register_or_zero_operand (operands[1], TFmode))\"\n   \"#\"\n-  [(set_attr \"length\" \"4\")])\n+  [(set_attr \"length\" \"4,4,4,4,4,4\")\n+   (set_attr \"cpu_feature\" \"fpu,fpu,fpu,*,*,*\")])\n \n (define_insn \"*movtf_insn_sp64\"\n-  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=b, e,  o,  r\")\n-\t(match_operand:TF 1 \"input_operand\"         \"G,oe,Ger,roG\"))]\n-  \"TARGET_FPU\n-   && TARGET_ARCH64\n+  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=b, e,o, o,  r\")\n+\t(match_operand:TF 1 \"input_operand\"         \"G,oe,e,rG,roG\"))]\n+  \"TARGET_ARCH64\n    && ! TARGET_HARD_QUAD\n    && (register_operand (operands[0], TFmode)\n        || register_or_zero_operand (operands[1], TFmode))\"\n   \"#\"\n-  [(set_attr \"length\" \"2\")])\n+  [(set_attr \"length\" \"2,2,2,2,2\")\n+   (set_attr \"cpu_feature\" \"fpu,fpu,fpu,*,*\")])\n \n (define_insn \"*movtf_insn_sp64_hq\"\n   [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=b,e,e,m, o,  r\")\n \t(match_operand:TF 1 \"input_operand\"         \"G,e,m,e,rG,roG\"))]\n-  \"TARGET_FPU\n-   && TARGET_ARCH64\n+  \"TARGET_ARCH64\n    && TARGET_HARD_QUAD\n    && (register_operand (operands[0], TFmode)\n        || register_or_zero_operand (operands[1], TFmode))\"\n@@ -2429,16 +2414,6 @@\n   [(set_attr \"type\" \"*,fpmove,fpload,fpstore,*,*\")\n    (set_attr \"length\" \"2,*,*,*,2,2\")])\n \n-(define_insn \"*movtf_insn_sp64_no_fpu\"\n-  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=  r, o\")\n-\t(match_operand:TF 1 \"input_operand\"         \"orG,rG\"))]\n-  \"! TARGET_FPU\n-   && TARGET_ARCH64\n-   && (register_operand (operands[0], TFmode)\n-       || register_or_zero_operand (operands[1], TFmode))\"\n-  \"#\"\n-  [(set_attr \"length\" \"2\")])\n-\n ;; Now all the splits to handle multi-insn TF mode moves.\n (define_split\n   [(set (match_operand:TF 0 \"register_operand\" \"\")"}]}