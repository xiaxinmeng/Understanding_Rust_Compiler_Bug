{"sha": "9ce500289a69d48cf7b2ea633e4d99565fed5a64", "node_id": "C_kwDOANBUbNoAKDljZTUwMDI4OWE2OWQ0OGNmN2IyZWE2MzNlNGQ5OTU2NWZlZDVhNjQ", "commit": {"author": {"name": "Hongyu Wang", "email": "hongyu.wang@intel.com", "date": "2021-07-16T02:01:17Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-23T09:05:02Z"}, "message": "AVX512FP16: Enable vec_cmpmn/vcondmn expanders for HF modes.\n\ngcc/ChangeLog:\n\n\t* config/i386/i386-expand.c (ix86_use_mask_cmp_p): Enable\n\tHFmode mask_cmp.\n\t* config/i386/sse.md (sseintvecmodelower): Add HF vector modes.\n\t(<avx512>_store<mode>_mask): Extend to support HF vector modes.\n\t(vec_cmp<mode><avx512fmaskmodelower>): Likewise.\n\t(vcond_mask_<mode><avx512fmaskmodelower>): Likewise.\n\t(vcond<mode><mode>): New expander.\n\t(vcond<mode><sseintvecmodelower>): Likewise.\n\t(vcond<sseintvecmodelower><mode>): Likewise.\n\t(vcondu<mode><sseintvecmodelower>): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/i386/avx512fp16-vcondmn-vec.C: New test.\n\t* g++.target/i386/avx512fp16-vcondmn-minmax.C: Ditto.\n\t* gcc.target/i386/avx512fp16-vcondmn-loop-1.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcondmn-loop-2.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vec_cmpmn.c: Ditto.", "tree": {"sha": "cd7f21e1f8885aafc223ef6db0364db9074685f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd7f21e1f8885aafc223ef6db0364db9074685f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ce500289a69d48cf7b2ea633e4d99565fed5a64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ce500289a69d48cf7b2ea633e4d99565fed5a64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ce500289a69d48cf7b2ea633e4d99565fed5a64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ce500289a69d48cf7b2ea633e4d99565fed5a64/comments", "author": {"login": "wwwhhhyyy", "id": 5366075, "node_id": "MDQ6VXNlcjUzNjYwNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5366075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wwwhhhyyy", "html_url": "https://github.com/wwwhhhyyy", "followers_url": "https://api.github.com/users/wwwhhhyyy/followers", "following_url": "https://api.github.com/users/wwwhhhyyy/following{/other_user}", "gists_url": "https://api.github.com/users/wwwhhhyyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/wwwhhhyyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wwwhhhyyy/subscriptions", "organizations_url": "https://api.github.com/users/wwwhhhyyy/orgs", "repos_url": "https://api.github.com/users/wwwhhhyyy/repos", "events_url": "https://api.github.com/users/wwwhhhyyy/events{/privacy}", "received_events_url": "https://api.github.com/users/wwwhhhyyy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3829793c50e44a524757020cebf23c54c016d5af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3829793c50e44a524757020cebf23c54c016d5af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3829793c50e44a524757020cebf23c54c016d5af"}], "stats": {"total": 426, "additions": 414, "deletions": 12}, "files": [{"sha": "94ac303585ec0510e7bf7de15bf329563acb5256", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ce500289a69d48cf7b2ea633e4d99565fed5a64/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ce500289a69d48cf7b2ea633e4d99565fed5a64/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=9ce500289a69d48cf7b2ea633e4d99565fed5a64", "patch": "@@ -3638,6 +3638,8 @@ ix86_use_mask_cmp_p (machine_mode mode, machine_mode cmp_mode,\n     return false;\n   else if (vector_size == 64)\n     return true;\n+  else if (GET_MODE_INNER (cmp_mode) == HFmode)\n+    return true;\n \n   /* When op_true is NULL, op_false must be NULL, or vice versa.  */\n   gcc_assert (!op_true == !op_false);"}, {"sha": "084fc7f46939877c2827b1d2e0f33b9e0960e3b7", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 72, "deletions": 12, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ce500289a69d48cf7b2ea633e4d99565fed5a64/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ce500289a69d48cf7b2ea633e4d99565fed5a64/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=9ce500289a69d48cf7b2ea633e4d99565fed5a64", "patch": "@@ -989,9 +989,9 @@\n    (V16HF \"OI\") (V8HF \"TI\")])\n \n (define_mode_attr sseintvecmodelower\n-  [(V16SF \"v16si\") (V8DF \"v8di\")\n-   (V8SF \"v8si\") (V4DF \"v4di\")\n-   (V4SF \"v4si\") (V2DF \"v2di\")\n+  [(V32HF \"v32hi\") (V16SF \"v16si\") (V8DF \"v8di\")\n+   (V16HF \"v16hi\") (V8SF \"v8si\") (V4DF \"v4di\")\n+   (V8HF \"v8hi\") (V4SF \"v4si\") (V2DF \"v2di\")\n    (V8SI \"v8si\") (V4DI \"v4di\")\n    (V4SI \"v4si\") (V2DI \"v2di\")\n    (V16HI \"v16hi\") (V8HI \"v8hi\")\n@@ -1568,9 +1568,9 @@\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"<avx512>_store<mode>_mask\"\n-  [(set (match_operand:VI12_AVX512VL 0 \"memory_operand\" \"=m\")\n-\t(vec_merge:VI12_AVX512VL\n-\t  (match_operand:VI12_AVX512VL 1 \"register_operand\" \"v\")\n+  [(set (match_operand:VI12HF_AVX512VL 0 \"memory_operand\" \"=m\")\n+\t(vec_merge:VI12HF_AVX512VL\n+\t  (match_operand:VI12HF_AVX512VL 1 \"register_operand\" \"v\")\n \t  (match_dup 0)\n \t  (match_operand:<avx512fmaskmode> 2 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512BW\"\n@@ -3810,8 +3810,8 @@\n (define_expand \"vec_cmp<mode><avx512fmaskmodelower>\"\n   [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\")\n \t(match_operator:<avx512fmaskmode> 1 \"\"\n-\t  [(match_operand:V48_AVX512VL 2 \"register_operand\")\n-\t   (match_operand:V48_AVX512VL 3 \"nonimmediate_operand\")]))]\n+\t  [(match_operand:V48H_AVX512VL 2 \"register_operand\")\n+\t   (match_operand:V48H_AVX512VL 3 \"nonimmediate_operand\")]))]\n   \"TARGET_AVX512F\"\n {\n   bool ok = ix86_expand_mask_vec_cmp (operands[0], GET_CODE (operands[1]),\n@@ -4018,6 +4018,51 @@\n   DONE;\n })\n \n+(define_expand \"vcond<mode><mode>\"\n+  [(set (match_operand:VF_AVX512FP16VL 0 \"register_operand\")\n+\t(if_then_else:VF_AVX512FP16VL\n+\t  (match_operator 3 \"\"\n+\t    [(match_operand:VF_AVX512FP16VL 4 \"vector_operand\")\n+\t     (match_operand:VF_AVX512FP16VL 5 \"vector_operand\")])\n+\t  (match_operand:VF_AVX512FP16VL 1 \"general_operand\")\n+\t  (match_operand:VF_AVX512FP16VL 2 \"general_operand\")))]\n+  \"TARGET_AVX512FP16\"\n+{\n+  bool ok = ix86_expand_fp_vcond (operands);\n+  gcc_assert (ok);\n+  DONE;\n+})\n+\n+(define_expand \"vcond<mode><sseintvecmodelower>\"\n+  [(set (match_operand:VF_AVX512FP16VL 0 \"register_operand\")\n+\t(if_then_else:VF_AVX512FP16VL\n+\t  (match_operator 3 \"\"\n+\t    [(match_operand:<sseintvecmode> 4 \"vector_operand\")\n+\t     (match_operand:<sseintvecmode> 5 \"vector_operand\")])\n+\t  (match_operand:VF_AVX512FP16VL 1 \"general_operand\")\n+\t  (match_operand:VF_AVX512FP16VL 2 \"general_operand\")))]\n+  \"TARGET_AVX512FP16\"\n+{\n+  bool ok = ix86_expand_int_vcond (operands);\n+  gcc_assert (ok);\n+  DONE;\n+})\n+\n+(define_expand \"vcond<sseintvecmodelower><mode>\"\n+  [(set (match_operand:<sseintvecmode> 0 \"register_operand\")\n+\t(if_then_else:<sseintvecmode>\n+\t  (match_operator 3 \"\"\n+\t    [(match_operand:VF_AVX512FP16VL 4 \"vector_operand\")\n+\t     (match_operand:VF_AVX512FP16VL 5 \"vector_operand\")])\n+\t  (match_operand:<sseintvecmode> 1 \"general_operand\")\n+\t  (match_operand:<sseintvecmode> 2 \"general_operand\")))]\n+  \"TARGET_AVX512FP16\"\n+{\n+  bool ok = ix86_expand_fp_vcond (operands);\n+  gcc_assert (ok);\n+  DONE;\n+})\n+\n (define_expand \"vcond_mask_<mode><avx512fmaskmodelower>\"\n   [(set (match_operand:V48_AVX512VL 0 \"register_operand\")\n \t(vec_merge:V48_AVX512VL\n@@ -4027,10 +4072,10 @@\n   \"TARGET_AVX512F\")\n \n (define_expand \"vcond_mask_<mode><avx512fmaskmodelower>\"\n-  [(set (match_operand:VI12_AVX512VL 0 \"register_operand\")\n-\t(vec_merge:VI12_AVX512VL\n-\t  (match_operand:VI12_AVX512VL 1 \"nonimmediate_operand\")\n-\t  (match_operand:VI12_AVX512VL 2 \"nonimm_or_0_operand\")\n+  [(set (match_operand:VI12HF_AVX512VL 0 \"register_operand\")\n+\t(vec_merge:VI12HF_AVX512VL\n+\t  (match_operand:VI12HF_AVX512VL 1 \"nonimmediate_operand\")\n+\t  (match_operand:VI12HF_AVX512VL 2 \"nonimm_or_0_operand\")\n \t  (match_operand:<avx512fmaskmode> 3 \"register_operand\")))]\n   \"TARGET_AVX512BW\")\n \n@@ -15538,6 +15583,21 @@\n   DONE;\n })\n \n+(define_expand \"vcondu<mode><sseintvecmodelower>\"\n+  [(set (match_operand:VF_AVX512FP16VL 0 \"register_operand\")\n+\t(if_then_else:VF_AVX512FP16VL\n+\t  (match_operator 3 \"\"\n+\t    [(match_operand:<sseintvecmode> 4 \"vector_operand\")\n+\t     (match_operand:<sseintvecmode> 5 \"vector_operand\")])\n+\t  (match_operand:VF_AVX512FP16VL 1 \"general_operand\")\n+\t  (match_operand:VF_AVX512FP16VL 2 \"general_operand\")))]\n+  \"TARGET_AVX512FP16\"\n+{\n+  bool ok = ix86_expand_int_vcond (operands);\n+  gcc_assert (ok);\n+  DONE;\n+})\n+\n (define_expand \"vcondeq<VI8F_128:mode>v2di\"\n   [(set (match_operand:VI8F_128 0 \"register_operand\")\n \t(if_then_else:VI8F_128"}, {"sha": "6d50f4974c5fb375734199380f46dbcde11afda3", "filename": "gcc/testsuite/g++.target/i386/avx512fp16-vcondmn-minmax.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ce500289a69d48cf7b2ea633e4d99565fed5a64/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx512fp16-vcondmn-minmax.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ce500289a69d48cf7b2ea633e4d99565fed5a64/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx512fp16-vcondmn-minmax.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx512fp16-vcondmn-minmax.C?ref=9ce500289a69d48cf7b2ea633e4d99565fed5a64", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl\" } */\n+\n+/* { dg-final { scan-assembler-times \"vminph\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vmaxph\" 3 } } */\n+\n+typedef _Float16 v8hf __attribute__ ((vector_size (16)));\n+typedef _Float16 v16hf __attribute__ ((vector_size (32)));\n+typedef _Float16 v32hf __attribute__ ((vector_size (64)));\n+\n+#define VCONDMINMAX(size, op, name)  \\\n+v##size##hf \\\n+__attribute__ ((noinline, noclone)) \\\n+vminmax_##v##size##hf##v##size##hf##name (v##size##hf a, v##size##hf b)  \\\n+{ \\\n+  return (a op b) ? a : b;  \\\n+}\n+\n+VCONDMINMAX (8, <, min)\n+VCONDMINMAX (8, >, max)\n+VCONDMINMAX (16, <, min)\n+VCONDMINMAX (16, >, max)\n+VCONDMINMAX (32, <, min)\n+VCONDMINMAX (32, >, max)\n+"}, {"sha": "de93e2c5c86508d13f0e7f89c931025205670010", "filename": "gcc/testsuite/g++.target/i386/avx512fp16-vcondmn-vec.C", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ce500289a69d48cf7b2ea633e4d99565fed5a64/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx512fp16-vcondmn-vec.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ce500289a69d48cf7b2ea633e4d99565fed5a64/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx512fp16-vcondmn-vec.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx512fp16-vcondmn-vec.C?ref=9ce500289a69d48cf7b2ea633e4d99565fed5a64", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl\" } */\n+\n+/* { dg-final { scan-assembler-times \"vcmpph\" 45 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpuw\" 12 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpw\" 18 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpblendmw|vmovdqu16\\[^\\{\\n\\]+\\{%k\\[1-7\\]\\})\" 75 } } */\n+\n+typedef _Float16 v8hf __attribute__ ((vector_size (16)));\n+typedef _Float16 v16hf __attribute__ ((vector_size (32)));\n+typedef _Float16 v32hf __attribute__ ((vector_size (64)));\n+typedef short v8hi __attribute__ ((vector_size (16)));\n+typedef short v16hi __attribute__ ((vector_size (32)));\n+typedef short v32hi __attribute__ ((vector_size (64)));\n+typedef unsigned short v8uhi __attribute__ ((vector_size (16)));\n+typedef unsigned short v16uhi __attribute__ ((vector_size (32)));\n+typedef unsigned short v32uhi __attribute__ ((vector_size (64)));\n+\n+#define VCONDMOV(size, op, name)  \\\n+v##size##hf \\\n+__attribute__ ((noinline, noclone)) \\\n+vcond_##v##size##hf##v##size##hf##name (v##size##hf a, v##size##hf b,  \\\n+\t\t\t   v##size##hf c, v##size##hf d)  \\\n+{ \\\n+  return (a op b) ? c : d;  \\\n+}\\\n+v##size##hf \\\n+__attribute__ ((noinline, noclone)) \\\n+vcond_##v##size##hi##v##size##hf##name (v##size##hi a, v##size##hi b,  \\\n+\t\t\t   v##size##hf c, v##size##hf d)  \\\n+{ \\\n+  return (a op b) ? c : d;  \\\n+}\\\n+v##size##hi \\\n+__attribute__ ((noinline, noclone)) \\\n+vcond_##v##size##hf##v##size##hi##name (v##size##hi a, v##size##hi b,  \\\n+\t\t\t   v##size##hf c, v##size##hf d)  \\\n+{ \\\n+  return (c op d) ? a : b;  \\\n+} \\\n+v##size##hf \\\n+__attribute__ ((noinline, noclone)) \\\n+vcond_##v##size##uhi##v##size##hf##name (v##size##uhi a, v##size##uhi b,  \\\n+\t\t\t   v##size##hf c, v##size##hf d)  \\\n+{ \\\n+  return (a op b) ? c : d;  \\\n+}\\\n+v##size##uhi \\\n+__attribute__ ((noinline, noclone)) \\\n+vcond_##v##size##hf##v##size##uhi##name (v##size##uhi a, v##size##uhi b,  \\\n+\t\t\t   v##size##hf c, v##size##hf d)  \\\n+{ \\\n+  return (c op d) ? a : b;  \\\n+} \\\n+\n+VCONDMOV (8, <, lt)\n+VCONDMOV (8, >, gt)\n+VCONDMOV (8, ==, eq)\n+VCONDMOV (8, <=, le)\n+VCONDMOV (8, >=, ge)\n+VCONDMOV (16, <, lt)\n+VCONDMOV (16, >, gt)\n+VCONDMOV (16, <=, le)\n+VCONDMOV (16, >=, ge)\n+VCONDMOV (16, ==, eq)\n+VCONDMOV (32, <, lt)\n+VCONDMOV (32, >, gt)\n+VCONDMOV (32, <=, le)\n+VCONDMOV (32, >=, ge)\n+VCONDMOV (32, ==, eq)"}, {"sha": "e8745aba64ee486f0734f8a54ab333d963a3258f", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcondmn-loop-1.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ce500289a69d48cf7b2ea633e4d99565fed5a64/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcondmn-loop-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ce500289a69d48cf7b2ea633e4d99565fed5a64/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcondmn-loop-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcondmn-loop-1.c?ref=9ce500289a69d48cf7b2ea633e4d99565fed5a64", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mprefer-vector-width=512\" } */\n+\n+/* { dg-final { scan-assembler-times \"vcmpph\" 27 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpw|vpcmpeqw)\" 12 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpuw\" 6 } } */\n+\n+typedef unsigned short u16;\n+typedef short s16;\n+\n+#define CONDMOV_LOOP(size, type, ptype, op, name) \\\n+void \\\n+__attribute__ ((noinline, noclone, optimize(\"tree-vectorize\"))) \\\n+loop_cond_##size##ptype##type##name ( \\\n+  ptype * restrict a, ptype * restrict b,\t\\\n+  type * restrict c, type * restrict d) \\\n+{ \\\n+  int i;  \\\n+  for (i = 0; i < size; i++)  \\\n+    { \\\n+      if (a[i] op b[i])\t\\\n+\td[i] = c[i];  \\\n+    } \\\n+}\n+\n+CONDMOV_LOOP (32, _Float16, _Float16, <, lt)\n+CONDMOV_LOOP (32, _Float16, _Float16, >, gt)\n+CONDMOV_LOOP (32, _Float16, _Float16, ==, eq)\n+CONDMOV_LOOP (16, _Float16, _Float16, <, lt)\n+CONDMOV_LOOP (16, _Float16, _Float16, >, gt)\n+CONDMOV_LOOP (16, _Float16, _Float16, ==, eq)\n+CONDMOV_LOOP (8, _Float16, _Float16, <, lt)\n+CONDMOV_LOOP (8, _Float16, _Float16, >, gt)\n+CONDMOV_LOOP (8, _Float16, _Float16, ==, eq)\n+CONDMOV_LOOP (32, _Float16, s16, <, lt)\n+CONDMOV_LOOP (32, _Float16, s16, >, gt)\n+CONDMOV_LOOP (32, _Float16, s16, ==, eq)\n+CONDMOV_LOOP (16, _Float16, s16, <, lt)\n+CONDMOV_LOOP (16, _Float16, s16, >, gt)\n+CONDMOV_LOOP (16, _Float16, s16, ==, eq)\n+CONDMOV_LOOP (8, _Float16, s16, <, lt)\n+CONDMOV_LOOP (8, _Float16, s16, >, gt)\n+CONDMOV_LOOP (8, _Float16, s16, ==, eq)\n+CONDMOV_LOOP (32, s16, _Float16, <, lt)\n+CONDMOV_LOOP (32, s16, _Float16, >, gt)\n+CONDMOV_LOOP (32, s16, _Float16, ==, eq)\n+CONDMOV_LOOP (16, s16, _Float16, <, lt)\n+CONDMOV_LOOP (16, s16, _Float16, >, gt)\n+CONDMOV_LOOP (16, s16, _Float16, ==, eq)\n+CONDMOV_LOOP (8, s16, _Float16, <, lt)\n+CONDMOV_LOOP (8, s16, _Float16, >, gt)\n+CONDMOV_LOOP (8, s16, _Float16, ==, eq)\n+CONDMOV_LOOP (32, _Float16, u16, <, lt)\n+CONDMOV_LOOP (32, _Float16, u16, >, gt)\n+CONDMOV_LOOP (32, _Float16, u16, ==, eq)\n+CONDMOV_LOOP (16, _Float16, u16, <, lt)\n+CONDMOV_LOOP (16, _Float16, u16, >, gt)\n+CONDMOV_LOOP (16, _Float16, u16, ==, eq)\n+CONDMOV_LOOP (8, _Float16, u16, <, lt)\n+CONDMOV_LOOP (8, _Float16, u16, >, gt)\n+CONDMOV_LOOP (8, _Float16, u16, ==, eq)\n+CONDMOV_LOOP (32, u16, _Float16, <, lt)\n+CONDMOV_LOOP (32, u16, _Float16, >, gt)\n+CONDMOV_LOOP (32, u16, _Float16, ==, eq)\n+CONDMOV_LOOP (16, u16, _Float16, <, lt)\n+CONDMOV_LOOP (16, u16, _Float16, >, gt)\n+CONDMOV_LOOP (16, u16, _Float16, ==, eq)\n+CONDMOV_LOOP (8, u16, _Float16, <, lt)\n+CONDMOV_LOOP (8, u16, _Float16, >, gt)\n+CONDMOV_LOOP (8, u16, _Float16, ==, eq)"}, {"sha": "a0d5f988088fbbd5cd2ca73449cba7d5b5980061", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcondmn-loop-2.c", "status": "added", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ce500289a69d48cf7b2ea633e4d99565fed5a64/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcondmn-loop-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ce500289a69d48cf7b2ea633e4d99565fed5a64/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcondmn-loop-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcondmn-loop-2.c?ref=9ce500289a69d48cf7b2ea633e4d99565fed5a64", "patch": "@@ -0,0 +1,143 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mprefer-vector-width=512\" } */\n+\n+static void condmov_test (void);\n+#define DO_TEST condmov_test\n+#define AVX512FP16\n+#define AVX512VL\n+#include \"avx512f-check.h\"\n+#include \"avx512fp16-vcondmn-loop-1.c\"\n+\n+_Float16 a[32], b[32], c[32], fexp[32], fref[32];\n+s16 sa[32], sb[32], sc[32], sexp[32], sref[32];\n+u16 ua[32], ub[32], uc[32], uexp[32], uref[32];\n+\n+#define EMULATE_CONDMOV_LOOP(size, type, ptype, op, name) \\\n+void \\\n+__attribute__ ((noinline, noclone)) \\\n+scalar_cond_##size##ptype##type##name ( \\\n+  ptype * restrict a, ptype * restrict b,\t\\\n+  type * restrict c, type * restrict d)  \\\n+{ \\\n+  int i;  \\\n+  for (i = 0; i < size; i++)  \\\n+    { \\\n+      if (a[i] op b[i])\t\\\n+\td[i] = c[i];  \\\n+    } \\\n+}\n+\n+EMULATE_CONDMOV_LOOP (32, _Float16, _Float16, <, lt)\n+EMULATE_CONDMOV_LOOP (32, _Float16, _Float16, >, gt)\n+EMULATE_CONDMOV_LOOP (32, _Float16, _Float16, ==, eq)\n+EMULATE_CONDMOV_LOOP (16, _Float16, _Float16, <, lt)\n+EMULATE_CONDMOV_LOOP (16, _Float16, _Float16, >, gt)\n+EMULATE_CONDMOV_LOOP (16, _Float16, _Float16, ==, eq)\n+EMULATE_CONDMOV_LOOP (8, _Float16, _Float16, <, lt)\n+EMULATE_CONDMOV_LOOP (8, _Float16, _Float16, >, gt)\n+EMULATE_CONDMOV_LOOP (8, _Float16, _Float16, ==, eq)\n+EMULATE_CONDMOV_LOOP (32, _Float16, s16, <, lt)\n+EMULATE_CONDMOV_LOOP (32, _Float16, s16, >, gt)\n+EMULATE_CONDMOV_LOOP (32, _Float16, s16, ==, eq)\n+EMULATE_CONDMOV_LOOP (16, _Float16, s16, <, lt)\n+EMULATE_CONDMOV_LOOP (16, _Float16, s16, >, gt)\n+EMULATE_CONDMOV_LOOP (16, _Float16, s16, ==, eq)\n+EMULATE_CONDMOV_LOOP (8, _Float16, s16, <, lt)\n+EMULATE_CONDMOV_LOOP (8, _Float16, s16, >, gt)\n+EMULATE_CONDMOV_LOOP (8, _Float16, s16, ==, eq)\n+EMULATE_CONDMOV_LOOP (32, s16, _Float16, <, lt)\n+EMULATE_CONDMOV_LOOP (32, s16, _Float16, >, gt)\n+EMULATE_CONDMOV_LOOP (32, s16, _Float16, ==, eq)\n+EMULATE_CONDMOV_LOOP (16, s16, _Float16, <, lt)\n+EMULATE_CONDMOV_LOOP (16, s16, _Float16, >, gt)\n+EMULATE_CONDMOV_LOOP (16, s16, _Float16, ==, eq)\n+EMULATE_CONDMOV_LOOP (8, s16, _Float16, <, lt)\n+EMULATE_CONDMOV_LOOP (8, s16, _Float16, >, gt)\n+EMULATE_CONDMOV_LOOP (8, s16, _Float16, ==, eq)\n+EMULATE_CONDMOV_LOOP (32, _Float16, u16, <, lt)\n+EMULATE_CONDMOV_LOOP (32, _Float16, u16, >, gt)\n+EMULATE_CONDMOV_LOOP (32, _Float16, u16, ==, eq)\n+EMULATE_CONDMOV_LOOP (16, _Float16, u16, <, lt)\n+EMULATE_CONDMOV_LOOP (16, _Float16, u16, >, gt)\n+EMULATE_CONDMOV_LOOP (16, _Float16, u16, ==, eq)\n+EMULATE_CONDMOV_LOOP (8, _Float16, u16, <, lt)\n+EMULATE_CONDMOV_LOOP (8, _Float16, u16, >, gt)\n+EMULATE_CONDMOV_LOOP (8, _Float16, u16, ==, eq)\n+EMULATE_CONDMOV_LOOP (32, u16, _Float16, <, lt)\n+EMULATE_CONDMOV_LOOP (32, u16, _Float16, >, gt)\n+EMULATE_CONDMOV_LOOP (32, u16, _Float16, ==, eq)\n+EMULATE_CONDMOV_LOOP (16, u16, _Float16, <, lt)\n+EMULATE_CONDMOV_LOOP (16, u16, _Float16, >, gt)\n+EMULATE_CONDMOV_LOOP (16, u16, _Float16, ==, eq)\n+EMULATE_CONDMOV_LOOP (8, u16, _Float16, <, lt)\n+EMULATE_CONDMOV_LOOP (8, u16, _Float16, >, gt)\n+EMULATE_CONDMOV_LOOP (8, u16, _Float16, ==, eq)\n+\n+void init()\n+{\n+  int i;\n+  for (i = 0; i < 32; i++)\n+    {\n+      ua[i] = sa[i] = a[i] = i; \n+      ub[i] = sb[i] = b[i] = i;\n+      uc[i] = sc[i] = c[i] = (32 - i) * 2;\n+      uexp[i] = sexp[i] = fexp[i] = -1;\n+      uref[i] = sref[i] = fref[i] = -1;\n+    }\n+}\n+\n+int check_cond(void *a, void *b, int size)\n+{\n+  int i;\n+  u16 *pa = (u16 *)a, *pb = (u16 *)b;\n+  for (i = 0; i < size; i++)\n+    if (pa[i] != pb[i])\n+      return 0;\n+  return 1;\n+}\n+\n+#define TEST_CONDMOV_LOOP(size, name)\t\\\n+{ \\\n+  init ();  \\\n+  scalar_cond_##size##_Float16_Float16##name (a, b, c, fexp);  \\\n+  loop_cond_##size##_Float16_Float16##name (a, b, c, fref);  \\\n+  if (!check_cond ((void *)fexp, (void *)fref, size)) \\\n+    abort();  \\\n+  \\\n+  init ();  \\\n+  scalar_cond_##size##_Float16s16##name (a, b, sc, sexp);  \\\n+  loop_cond_##size##_Float16s16##name (a, b, sc, sref);  \\\n+  if (!check_cond ((void *)sexp, (void *)sref, size)) \\\n+    abort();  \\\n+  \\\n+  init ();  \\\n+  scalar_cond_##size##s16_Float16##name (sa, sb, c, fexp);  \\\n+  loop_cond_##size##s16_Float16##name (sa, sb, c, fref);  \\\n+  if (!check_cond ((void *)fexp, (void *)fref, size)) \\\n+    abort();  \\\n+  \\\n+  init ();  \\\n+  scalar_cond_##size##_Float16u16##name (a, b, uc, uexp);  \\\n+  loop_cond_##size##_Float16u16##name (a, b, uc, uref);  \\\n+  if (!check_cond ((void *)uexp, (void *)uref, size)) \\\n+    abort();  \\\n+  \\\n+  init ();  \\\n+  scalar_cond_##size##u16_Float16##name (ua, ub, c, fexp);  \\\n+  loop_cond_##size##u16_Float16##name (ua, ub, c, fref);  \\\n+  if (!check_cond ((void *)fexp, (void *)fref, size)) \\\n+    abort();  \\\n+}\n+\n+static void condmov_test()\n+{\n+  TEST_CONDMOV_LOOP (32, lt)\n+  TEST_CONDMOV_LOOP (32, gt)\n+  TEST_CONDMOV_LOOP (32, eq)\n+  TEST_CONDMOV_LOOP (16, lt)\n+  TEST_CONDMOV_LOOP (16, gt)\n+  TEST_CONDMOV_LOOP (16, eq)\n+  TEST_CONDMOV_LOOP (8, lt)\n+  TEST_CONDMOV_LOOP (8, gt)\n+  TEST_CONDMOV_LOOP (8, eq)\n+}"}, {"sha": "ef9f85373f98998795bfc93c9a6e88ab93f7e266", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vec_cmpmn.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ce500289a69d48cf7b2ea633e4d99565fed5a64/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vec_cmpmn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ce500289a69d48cf7b2ea633e4d99565fed5a64/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vec_cmpmn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vec_cmpmn.c?ref=9ce500289a69d48cf7b2ea633e4d99565fed5a64", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl\" } */\n+\n+/* { dg-final { scan-assembler-times \"vcmpph\" 15 } } */\n+\n+typedef _Float16 v8hf __attribute__ ((vector_size (16)));\n+typedef _Float16 v16hf __attribute__ ((vector_size (32)));\n+typedef _Float16 v32hf __attribute__ ((vector_size (64)));\n+\n+#define VCMPMN(type, op, name)\t\\\n+type  \\\n+__attribute__ ((noinline, noclone)) \\\n+vec_cmp_##type##type##name (type a, type b) \\\n+{ \\\n+  return a op b;  \\\n+}\n+\n+VCMPMN (v8hf, <, lt)\n+VCMPMN (v16hf, <, lt)\n+VCMPMN (v32hf, <, lt)\n+VCMPMN (v8hf, <=, le)\n+VCMPMN (v16hf, <=, le)\n+VCMPMN (v32hf, <=, le)\n+VCMPMN (v8hf, >, gt)\n+VCMPMN (v16hf, >, gt)\n+VCMPMN (v32hf, >, gt)\n+VCMPMN (v8hf, >=, ge)\n+VCMPMN (v16hf, >=, ge)\n+VCMPMN (v32hf, >=, ge)\n+VCMPMN (v8hf, ==, eq)\n+VCMPMN (v16hf, ==, eq)\n+VCMPMN (v32hf, ==, eq)"}]}