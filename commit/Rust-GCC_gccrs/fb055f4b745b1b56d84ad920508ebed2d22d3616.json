{"sha": "fb055f4b745b1b56d84ad920508ebed2d22d3616", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmIwNTVmNGI3NDViMWI1NmQ4NGFkOTIwNTA4ZWJlZDJkMjJkMzYxNg==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2019-03-14T08:49:54Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2019-03-14T08:49:54Z"}, "message": "x32: Add addr32 prefix to VSIB address\n\n32-bit indices in VSIB address are sign-extended to 64 bits.  In x32,\nwhen 32-bit indices are used as addresses, like in\n\nvgatherdps %ymm7, 0(,%ymm9,1), %ymm6\n\n32-bit indices, 0xf7fa3010, is sign-extended to 0xfffffffff7fa3010 which\nis invalid address.  Add addr32 prefix to UNSPEC_VSIBADDR instructions\nfor x32 if there is no base register nor symbol.\n\nThis fixes 175.vpr and 254.gap in SPEC CPU 2000 on x32 with\n\n-Ofast -funroll-loops -march=haswell\n\ngcc/\n\n\tPR target/89523\n\t* config/i386/i386.c (ix86_print_operand): Handle 'M' to add\n\taddr32 prefix to VSIB address for X32.\n\t* config/i386/sse.md (*avx512pf_gatherpf<mode>sf_mask): Prepend\n\t\"%M2\" to opcode.\n\t(*avx512pf_gatherpf<mode>df_mask): Likewise.\n\t(*avx512pf_scatterpf<mode>sf_mask): Likewise.\n\t(*avx512pf_scatterpf<mode>df_mask): Likewise.\n\t(*avx2_gathersi<mode>): Prepend \"%M3\" to opcode.\n\t(*avx2_gathersi<mode>_2): Prepend \"%M2\" to opcode.\n\t(*avx2_gatherdi<mode>): Prepend \"%M3\" to opcode.\n\t(*avx2_gatherdi<mode>_2): Prepend \"%M2\" to opcode.\n\t(*avx2_gatherdi<mode>_3): Prepend \"%M3\" to opcode.\n\t(*avx2_gatherdi<mode>_4): Prepend \"%M2\" to opcode.`\n\t(*avx512f_gathersi<mode>): Prepend \"%M4\" to opcode.\n\t(*avx512f_gathersi<mode>_2): Prepend \"%M3\" to opcode.\n\t(*avx512f_gatherdi<mode>): Prepend \"%M4\" to opcode.\n\t(*avx512f_gatherdi<mode>_2): Prepend \"%M3\" to opcode.\n\t(*avx512f_scattersi<mode>): Prepend \"%M0\" to opcode.\n\t(*avx512f_scatterdi<mode>): Likewise.\n\ngcc/testsuite/\n\n\tPR target/89523\n\t* gcc.target/i386/pr89523-1a.c: New test.\n\t* gcc.target/i386/pr89523-1b.c: Likewise.\n\t* gcc.target/i386/pr89523-2.c: Likewise.\n\t* gcc.target/i386/pr89523-3.c: Likewise.\n\t* gcc.target/i386/pr89523-4.c: Likewise.\n\t* gcc.target/i386/pr89523-5.c: Likewise.\n\t* gcc.target/i386/pr89523-6.c: Likewise.\n\t* gcc.target/i386/pr89523-7.c: Likewise.\n\t* gcc.target/i386/pr89523-8.c: Likewise.\n\t* gcc.target/i386/pr89523-9.c: Likewise.\n\nFrom-SVN: r269673", "tree": {"sha": "b88346860dfadd39a44cad807c4bde303d126242", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b88346860dfadd39a44cad807c4bde303d126242"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb055f4b745b1b56d84ad920508ebed2d22d3616", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb055f4b745b1b56d84ad920508ebed2d22d3616", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb055f4b745b1b56d84ad920508ebed2d22d3616", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb055f4b745b1b56d84ad920508ebed2d22d3616/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b2725ea5df920e68591375847c0310254020eec7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2725ea5df920e68591375847c0310254020eec7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2725ea5df920e68591375847c0310254020eec7"}], "stats": {"total": 434, "additions": 411, "deletions": 23}, "files": [{"sha": "927fd9e4be5706ecb53bbd1611935db5b95dd917", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb055f4b745b1b56d84ad920508ebed2d22d3616/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb055f4b745b1b56d84ad920508ebed2d22d3616/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fb055f4b745b1b56d84ad920508ebed2d22d3616", "patch": "@@ -1,3 +1,26 @@\n+2019-03-14  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/89523\n+\t* config/i386/i386.c (ix86_print_operand): Handle 'M' to add\n+\taddr32 prefix to VSIB address for X32.\n+\t* config/i386/sse.md (*avx512pf_gatherpf<mode>sf_mask): Prepend\n+\t\"%M2\" to opcode.\n+\t(*avx512pf_gatherpf<mode>df_mask): Likewise.\n+\t(*avx512pf_scatterpf<mode>sf_mask): Likewise.\n+\t(*avx512pf_scatterpf<mode>df_mask): Likewise.\n+\t(*avx2_gathersi<mode>): Prepend \"%M3\" to opcode.\n+\t(*avx2_gathersi<mode>_2): Prepend \"%M2\" to opcode.\n+\t(*avx2_gatherdi<mode>): Prepend \"%M3\" to opcode.\n+\t(*avx2_gatherdi<mode>_2): Prepend \"%M2\" to opcode.\n+\t(*avx2_gatherdi<mode>_3): Prepend \"%M3\" to opcode.\n+\t(*avx2_gatherdi<mode>_4): Prepend \"%M2\" to opcode.`\n+\t(*avx512f_gathersi<mode>): Prepend \"%M4\" to opcode.\n+\t(*avx512f_gathersi<mode>_2): Prepend \"%M3\" to opcode.\n+\t(*avx512f_gatherdi<mode>): Prepend \"%M4\" to opcode.\n+\t(*avx512f_gatherdi<mode>_2): Prepend \"%M3\" to opcode.\n+\t(*avx512f_scattersi<mode>): Prepend \"%M0\" to opcode.\n+\t(*avx512f_scatterdi<mode>): Likewise.\n+\n 2019-03-13  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR target/85860"}, {"sha": "1f94a45909de091eb87f12d7560c2e8a477b2aa3", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb055f4b745b1b56d84ad920508ebed2d22d3616/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb055f4b745b1b56d84ad920508ebed2d22d3616/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=fb055f4b745b1b56d84ad920508ebed2d22d3616", "patch": "@@ -17813,6 +17813,7 @@ print_reg (rtx x, int code, FILE *file)\n    ; -- print a semicolon (after prefixes due to bug in older gas).\n    ~ -- print \"i\" if TARGET_AVX2, \"f\" otherwise.\n    ^ -- print addr32 prefix if TARGET_64BIT and Pmode != word_mode\n+   M -- print addr32 prefix for TARGET_X32 with VSIB address.\n    ! -- print NOTRACK prefix for jxx/call/ret instructions if required.\n  */\n \n@@ -18360,6 +18361,26 @@ ix86_print_operand (FILE *file, rtx x, int code)\n \t  putc (TARGET_AVX2 ? 'i' : 'f', file);\n \t  return;\n \n+\tcase 'M':\n+\t  if (TARGET_X32)\n+\t    {\n+\t      /* NB: 32-bit indices in VSIB address are sign-extended\n+\t\t to 64 bits. In x32, if 32-bit address 0xf7fa3010 is\n+\t\t sign-extended to 0xfffffffff7fa3010 which is invalid\n+\t\t address.  Add addr32 prefix if there is no base\n+\t\t register nor symbol.  */\n+\t      bool ok;\n+\t      struct ix86_address parts;\n+\t      ok = ix86_decompose_address (x, &parts);\n+\t      gcc_assert (ok && parts.index == NULL_RTX);\n+\t      if (parts.base == NULL_RTX\n+\t\t  && (parts.disp == NULL_RTX\n+\t\t      || !symbolic_operand (parts.disp,\n+\t\t\t\t\t    GET_MODE (parts.disp))))\n+\t\tfputs (\"addr32 \", file);\n+\t    }\n+\t  return;\n+\n \tcase '^':\n \t  if (TARGET_64BIT && Pmode != word_mode)\n \t    fputs (\"addr32 \", file);"}, {"sha": "86bf86618086ca4d9ede80887e15facc70bf855f", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb055f4b745b1b56d84ad920508ebed2d22d3616/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb055f4b745b1b56d84ad920508ebed2d22d3616/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=fb055f4b745b1b56d84ad920508ebed2d22d3616", "patch": "@@ -17486,9 +17486,9 @@\n     case 3:\n       /* %X5 so that we don't emit any *WORD PTR for -masm=intel, as\n \t gas changed what it requires incompatibly.  */\n-      return \"vgatherpf0<ssemodesuffix>ps\\t{%5%{%0%}|%X5%{%0%}}\";\n+      return \"%M2vgatherpf0<ssemodesuffix>ps\\t{%5%{%0%}|%X5%{%0%}}\";\n     case 2:\n-      return \"vgatherpf1<ssemodesuffix>ps\\t{%5%{%0%}|%X5%{%0%}}\";\n+      return \"%M2vgatherpf1<ssemodesuffix>ps\\t{%5%{%0%}|%X5%{%0%}}\";\n     default:\n       gcc_unreachable ();\n     }\n@@ -17533,9 +17533,9 @@\n     case 3:\n       /* %X5 so that we don't emit any *WORD PTR for -masm=intel, as\n \t gas changed what it requires incompatibly.  */\n-      return \"vgatherpf0<ssemodesuffix>pd\\t{%5%{%0%}|%X5%{%0%}}\";\n+      return \"%M2vgatherpf0<ssemodesuffix>pd\\t{%5%{%0%}|%X5%{%0%}}\";\n     case 2:\n-      return \"vgatherpf1<ssemodesuffix>pd\\t{%5%{%0%}|%X5%{%0%}}\";\n+      return \"%M2vgatherpf1<ssemodesuffix>pd\\t{%5%{%0%}|%X5%{%0%}}\";\n     default:\n       gcc_unreachable ();\n     }\n@@ -17581,10 +17581,10 @@\n     case 7:\n       /* %X5 so that we don't emit any *WORD PTR for -masm=intel, as\n \t gas changed what it requires incompatibly.  */\n-      return \"vscatterpf0<ssemodesuffix>ps\\t{%5%{%0%}|%X5%{%0%}}\";\n+      return \"%M2vscatterpf0<ssemodesuffix>ps\\t{%5%{%0%}|%X5%{%0%}}\";\n     case 2:\n     case 6:\n-      return \"vscatterpf1<ssemodesuffix>ps\\t{%5%{%0%}|%X5%{%0%}}\";\n+      return \"%M2vscatterpf1<ssemodesuffix>ps\\t{%5%{%0%}|%X5%{%0%}}\";\n     default:\n       gcc_unreachable ();\n     }\n@@ -17630,10 +17630,10 @@\n     case 7:\n       /* %X5 so that we don't emit any *WORD PTR for -masm=intel, as\n \t gas changed what it requires incompatibly.  */\n-      return \"vscatterpf0<ssemodesuffix>pd\\t{%5%{%0%}|%X5%{%0%}}\";\n+      return \"%M2vscatterpf0<ssemodesuffix>pd\\t{%5%{%0%}|%X5%{%0%}}\";\n     case 2:\n     case 6:\n-      return \"vscatterpf1<ssemodesuffix>pd\\t{%5%{%0%}|%X5%{%0%}}\";\n+      return \"%M2vscatterpf1<ssemodesuffix>pd\\t{%5%{%0%}|%X5%{%0%}}\";\n     default:\n       gcc_unreachable ();\n     }\n@@ -20377,7 +20377,7 @@\n \t  UNSPEC_GATHER))\n    (clobber (match_scratch:VEC_GATHER_MODE 1 \"=&x\"))]\n   \"TARGET_AVX2\"\n-  \"v<sseintprefix>gatherd<ssemodesuffix>\\t{%1, %7, %0|%0, %7, %1}\"\n+  \"%M3v<sseintprefix>gatherd<ssemodesuffix>\\t{%1, %7, %0|%0, %7, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n@@ -20397,7 +20397,7 @@\n \t  UNSPEC_GATHER))\n    (clobber (match_scratch:VEC_GATHER_MODE 1 \"=&x\"))]\n   \"TARGET_AVX2\"\n-  \"v<sseintprefix>gatherd<ssemodesuffix>\\t{%1, %6, %0|%0, %6, %1}\"\n+  \"%M2v<sseintprefix>gatherd<ssemodesuffix>\\t{%1, %6, %0|%0, %6, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n@@ -20438,7 +20438,7 @@\n \t  UNSPEC_GATHER))\n    (clobber (match_scratch:VEC_GATHER_MODE 1 \"=&x\"))]\n   \"TARGET_AVX2\"\n-  \"v<sseintprefix>gatherq<ssemodesuffix>\\t{%5, %7, %2|%2, %7, %5}\"\n+  \"%M3v<sseintprefix>gatherq<ssemodesuffix>\\t{%5, %7, %2|%2, %7, %5}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n@@ -20460,8 +20460,8 @@\n   \"TARGET_AVX2\"\n {\n   if (<MODE>mode != <VEC_GATHER_SRCDI>mode)\n-    return \"v<sseintprefix>gatherq<ssemodesuffix>\\t{%4, %6, %x0|%x0, %6, %4}\";\n-  return \"v<sseintprefix>gatherq<ssemodesuffix>\\t{%4, %6, %0|%0, %6, %4}\";\n+    return \"%M2v<sseintprefix>gatherq<ssemodesuffix>\\t{%4, %6, %x0|%x0, %6, %4}\";\n+  return \"%M2v<sseintprefix>gatherq<ssemodesuffix>\\t{%4, %6, %0|%0, %6, %4}\";\n }\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"vex\")\n@@ -20485,7 +20485,7 @@\n \t\t     (const_int 2) (const_int 3)])))\n    (clobber (match_scratch:VI4F_256 1 \"=&x\"))]\n   \"TARGET_AVX2\"\n-  \"v<sseintprefix>gatherq<ssemodesuffix>\\t{%5, %7, %0|%0, %7, %5}\"\n+  \"%M3v<sseintprefix>gatherq<ssemodesuffix>\\t{%5, %7, %0|%0, %7, %5}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n@@ -20508,7 +20508,7 @@\n \t\t     (const_int 2) (const_int 3)])))\n    (clobber (match_scratch:VI4F_256 1 \"=&x\"))]\n   \"TARGET_AVX2\"\n-  \"v<sseintprefix>gatherq<ssemodesuffix>\\t{%4, %6, %0|%0, %6, %4}\"\n+  \"%M2v<sseintprefix>gatherq<ssemodesuffix>\\t{%4, %6, %0|%0, %6, %4}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n@@ -20548,7 +20548,7 @@\n   \"TARGET_AVX512F\"\n ;; %X6 so that we don't emit any *WORD PTR for -masm=intel, as\n ;; gas changed what it requires incompatibly.\n-  \"v<sseintprefix>gatherd<ssemodesuffix>\\t{%6, %0%{%2%}|%0%{%2%}, %X6}\"\n+  \"%M4v<sseintprefix>gatherd<ssemodesuffix>\\t{%6, %0%{%2%}|%0%{%2%}, %X6}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n@@ -20569,7 +20569,7 @@\n   \"TARGET_AVX512F\"\n ;; %X5 so that we don't emit any *WORD PTR for -masm=intel, as\n ;; gas changed what it requires incompatibly.\n-  \"v<sseintprefix>gatherd<ssemodesuffix>\\t{%5, %0%{%1%}|%0%{%1%}, %X5}\"\n+  \"%M3v<sseintprefix>gatherd<ssemodesuffix>\\t{%5, %0%{%1%}|%0%{%1%}, %X5}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n@@ -20610,7 +20610,7 @@\n   \"TARGET_AVX512F\"\n ;; %X6 so that we don't emit any *WORD PTR for -masm=intel, as\n ;; gas changed what it requires incompatibly.\n-  \"v<sseintprefix>gatherq<ssemodesuffix>\\t{%6, %1%{%2%}|%1%{%2%}, %X6}\"\n+  \"%M4v<sseintprefix>gatherq<ssemodesuffix>\\t{%6, %1%{%2%}|%1%{%2%}, %X6}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n@@ -20635,11 +20635,11 @@\n   if (<MODE>mode != <VEC_GATHER_SRCDI>mode)\n     {\n       if (<MODE_SIZE> != 64)\n-\treturn \"v<sseintprefix>gatherq<ssemodesuffix>\\t{%5, %x0%{%1%}|%x0%{%1%}, %X5}\";\n+\treturn \"%M3v<sseintprefix>gatherq<ssemodesuffix>\\t{%5, %x0%{%1%}|%x0%{%1%}, %X5}\";\n       else\n-\treturn \"v<sseintprefix>gatherq<ssemodesuffix>\\t{%5, %t0%{%1%}|%t0%{%1%}, %X5}\";\n+\treturn \"%M3v<sseintprefix>gatherq<ssemodesuffix>\\t{%5, %t0%{%1%}|%t0%{%1%}, %X5}\";\n     }\n-  return \"v<sseintprefix>gatherq<ssemodesuffix>\\t{%5, %0%{%1%}|%0%{%1%}, %X5}\";\n+  return \"%M3v<sseintprefix>gatherq<ssemodesuffix>\\t{%5, %0%{%1%}|%0%{%1%}, %X5}\";\n }\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"evex\")\n@@ -20678,7 +20678,7 @@\n   \"TARGET_AVX512F\"\n ;; %X5 so that we don't emit any *WORD PTR for -masm=intel, as\n ;; gas changed what it requires incompatibly.\n-  \"v<sseintprefix>scatterd<ssemodesuffix>\\t{%3, %5%{%1%}|%X5%{%1%}, %3}\"\n+  \"%M0v<sseintprefix>scatterd<ssemodesuffix>\\t{%3, %5%{%1%}|%X5%{%1%}, %3}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n@@ -20716,7 +20716,7 @@\n   \"TARGET_AVX512F\"\n ;; %X5 so that we don't emit any *WORD PTR for -masm=intel, as\n ;; gas changed what it requires incompatibly.\n-  \"v<sseintprefix>scatterq<ssemodesuffix>\\t{%3, %5%{%1%}|%X5%{%1%}, %3}\"\n+  \"%M0v<sseintprefix>scatterq<ssemodesuffix>\\t{%3, %5%{%1%}|%X5%{%1%}, %3}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])"}, {"sha": "0776c676196dd428e0e4f81b687a645757121745", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb055f4b745b1b56d84ad920508ebed2d22d3616/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb055f4b745b1b56d84ad920508ebed2d22d3616/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fb055f4b745b1b56d84ad920508ebed2d22d3616", "patch": "@@ -1,3 +1,17 @@\n+2019-03-14  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/89523\n+\t* gcc.target/i386/pr89523-1a.c: New test.\n+\t* gcc.target/i386/pr89523-1b.c: Likewise.\n+\t* gcc.target/i386/pr89523-2.c: Likewise.\n+\t* gcc.target/i386/pr89523-3.c: Likewise.\n+\t* gcc.target/i386/pr89523-4.c: Likewise.\n+\t* gcc.target/i386/pr89523-5.c: Likewise.\n+\t* gcc.target/i386/pr89523-6.c: Likewise.\n+\t* gcc.target/i386/pr89523-7.c: Likewise.\n+\t* gcc.target/i386/pr89523-8.c: Likewise.\n+\t* gcc.target/i386/pr89523-9.c: Likewise.\n+\n 2019-03-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/89512"}, {"sha": "0d0edab03639e18de57fe95622f6eb8dccac5978", "filename": "gcc/testsuite/gcc.target/i386/pr89523-1a.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb055f4b745b1b56d84ad920508ebed2d22d3616/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89523-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb055f4b745b1b56d84ad920508ebed2d22d3616/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89523-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89523-1a.c?ref=fb055f4b745b1b56d84ad920508ebed2d22d3616", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-require-effective-target maybe_x32 } */\n+/* { dg-options \"-maddress-mode=short -mx32 -Ofast -funroll-loops -march=haswell\" } */\n+/* { dg-final { scan-assembler-not \"\\tvgather\" } } */\n+/* { dg-final { scan-assembler \"addr32 vgather\" } } */\n+\n+void foo (void);\n+\n+extern float *ncost;\n+\n+float\n+bar (int type, int num)\n+{\n+  int i;\n+  float cost;\n+\n+  cost = 0;\n+  for (i = 0; i < num; i++)\n+    if (type)\n+      cost += ncost[i];\n+    else\n+      foo ();\n+  return (cost);\n+}"}, {"sha": "6a5c1d4362549c73da4145168a00f0622e186687", "filename": "gcc/testsuite/gcc.target/i386/pr89523-1b.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb055f4b745b1b56d84ad920508ebed2d22d3616/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89523-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb055f4b745b1b56d84ad920508ebed2d22d3616/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89523-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89523-1b.c?ref=fb055f4b745b1b56d84ad920508ebed2d22d3616", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-require-effective-target maybe_x32 } */\n+/* { dg-options \"-maddress-mode=long -mx32 -Ofast -funroll-loops -march=haswell\" } */\n+/* { dg-final { scan-assembler-not \"\\tvgather\" } } */\n+/* { dg-final { scan-assembler \"addr32 vgather\" } } */\n+\n+#include \"pr89523-1a.c\""}, {"sha": "2ffbffe5e40aaf86d0646796e8ca464c1b6e9dc8", "filename": "gcc/testsuite/gcc.target/i386/pr89523-2.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb055f4b745b1b56d84ad920508ebed2d22d3616/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89523-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb055f4b745b1b56d84ad920508ebed2d22d3616/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89523-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89523-2.c?ref=fb055f4b745b1b56d84ad920508ebed2d22d3616", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-require-effective-target maybe_x32 } */\n+/* { dg-options \"-mx32 -O2 -march=haswell\" } */\n+/* { dg-final { scan-assembler \"\\tvgather\" } } */\n+/* { dg-final { scan-assembler-not \"addr32 vgather\" } } */\n+\n+typedef double __v2df __attribute__ ((__vector_size__ (16)));\n+typedef int __v4si __attribute__ ((__vector_size__ (16)));\n+typedef long long __v2di __attribute__ ((__vector_size__ (16)));\n+\n+typedef long long __m128i __attribute__ ((__vector_size__ (16), __may_alias__));\n+typedef double __m128d __attribute__ ((__vector_size__ (16), __may_alias__));\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_i32gather_pd (double const *__base, __m128i __index, const int __scale)\n+{\n+  __v2df __zero = { 0.0, 0.0 };\n+  __v2df __mask = __builtin_ia32_cmpeqpd (__zero, __zero);\n+  __v2df x = x;\n+\n+  return (__m128d) __builtin_ia32_gathersiv2df (x,\n+\t\t\t\t\t\t__base,\n+\t\t\t\t\t\t(__v4si)__index,\n+\t\t\t\t\t\t__mask,\n+\t\t\t\t\t\t__scale);\n+}\n+\n+__m128d x;\n+double *base;\n+__m128i idx;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm_i32gather_pd (base, idx, 1);\n+}"}, {"sha": "fc3631b694b91a74b5009fad4b005675392deca5", "filename": "gcc/testsuite/gcc.target/i386/pr89523-3.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb055f4b745b1b56d84ad920508ebed2d22d3616/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89523-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb055f4b745b1b56d84ad920508ebed2d22d3616/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89523-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89523-3.c?ref=fb055f4b745b1b56d84ad920508ebed2d22d3616", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-require-effective-target maybe_x32 } */\n+/* { dg-options \"-mx32 -O2 -march=haswell\" } */\n+/* { dg-final { scan-assembler \"\\tvgather\" } } */\n+/* { dg-final { scan-assembler-not \"addr32 vgather\" } } */\n+\n+typedef double __v2df __attribute__ ((__vector_size__ (16)));\n+typedef int __v4si __attribute__ ((__vector_size__ (16)));\n+typedef long long __v2di __attribute__ ((__vector_size__ (16)));\n+\n+typedef long long __m128i __attribute__ ((__vector_size__ (16), __may_alias__));\n+typedef double __m128d __attribute__ ((__vector_size__ (16), __may_alias__));\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_i64gather_pd (double const *__base, __m128i __index, const int __scale)\n+{\n+  __v2df __zero = { 0.0, 0.0 };\n+  __v2df __mask = __builtin_ia32_cmpeqpd (__zero, __zero);\n+\n+  return (__m128d) __builtin_ia32_gatherdiv2df (__zero,\n+\t\t\t\t\t\t__base,\n+\t\t\t\t\t\t(__v2di)__index,\n+\t\t\t\t\t\t__mask,\n+\t\t\t\t\t\t__scale);\n+}\n+\n+__m128d x;\n+double *base;\n+__m128i idx;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm_i64gather_pd (base, idx, 1);\n+}"}, {"sha": "3436e5dcae360d6b8d8f02eccc87620c07d61d63", "filename": "gcc/testsuite/gcc.target/i386/pr89523-4.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb055f4b745b1b56d84ad920508ebed2d22d3616/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89523-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb055f4b745b1b56d84ad920508ebed2d22d3616/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89523-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89523-4.c?ref=fb055f4b745b1b56d84ad920508ebed2d22d3616", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-require-effective-target maybe_x32 } */\n+/* { dg-options \"-mx32 -O2 -march=haswell\" } */\n+/* { dg-final { scan-assembler-not \"\\tvgather\" } } */\n+/* { dg-final { scan-assembler \"addr32 vgather\" } } */\n+\n+typedef double __v2df __attribute__ ((__vector_size__ (16)));\n+typedef int __v4si __attribute__ ((__vector_size__ (16)));\n+typedef long long __v2di __attribute__ ((__vector_size__ (16)));\n+\n+typedef long long __m128i __attribute__ ((__vector_size__ (16), __may_alias__));\n+typedef double __m128d __attribute__ ((__vector_size__ (16), __may_alias__));\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_i32gather_pd (double const *__base, __m128i __index, const int __scale)\n+{\n+  __v2df __zero = { 0.0, 0.0 };\n+  __v2df __mask = __builtin_ia32_cmpeqpd (__zero, __zero);\n+  __v2df x = x;\n+\n+  return (__m128d) __builtin_ia32_gathersiv2df (x,\n+\t\t\t\t\t\t__base,\n+\t\t\t\t\t\t(__v4si)__index,\n+\t\t\t\t\t\t__mask,\n+\t\t\t\t\t\t__scale);\n+}\n+\n+__m128d x;\n+__m128i idx;\n+\n+void extern\n+avx2_test (void)\n+{\n+  x = _mm_i32gather_pd ((void *) 0, idx, 1);\n+}"}, {"sha": "6a769c7a24954a45bfa46b48410e76e0cd3c983e", "filename": "gcc/testsuite/gcc.target/i386/pr89523-5.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb055f4b745b1b56d84ad920508ebed2d22d3616/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89523-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb055f4b745b1b56d84ad920508ebed2d22d3616/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89523-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89523-5.c?ref=fb055f4b745b1b56d84ad920508ebed2d22d3616", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-require-effective-target maybe_x32 } */\n+/* { dg-options \"-mx32 -O2 -mavx512pf\" } */\n+/* { dg-final { scan-assembler \"\\tvgather\" } } */\n+/* { dg-final { scan-assembler-not \"addr32 vgather\" } } */\n+\n+typedef int __v8si __attribute__ ((__vector_size__ (32)));\n+typedef long long __m256i __attribute__ ((__vector_size__ (32),\n+\t\t\t\t\t  __may_alias__));\n+typedef unsigned char  __mmask8;\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_prefetch_i32gather_pd (__m256i __index, void const *__addr,\n+\t\t\t      int __scale, int __hint)\n+{\n+  __builtin_ia32_gatherpfdpd ((__mmask8) 0xFF, (__v8si) __index, __addr,\n+\t\t\t      __scale, __hint);\n+}\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_prefetch_i32gather_pd (__m256i __index, __mmask8 __mask,\n+\t\t\t\t   void const *__addr, int __scale, int __hint)\n+{\n+  __builtin_ia32_gatherpfdpd (__mask, (__v8si) __index, __addr, __scale,\n+\t\t\t      __hint);\n+}\n+\n+volatile __m256i idx;\n+volatile __mmask8 m8;\n+void *base;\n+\n+void extern\n+avx512pf_test (void)\n+{\n+  _mm512_prefetch_i32gather_pd (idx, base, 8, 3);\n+  _mm512_mask_prefetch_i32gather_pd (idx, m8, base, 8, 3);\n+}"}, {"sha": "82f795e085c0f2fac447bc7a975fbb693269aa71", "filename": "gcc/testsuite/gcc.target/i386/pr89523-6.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb055f4b745b1b56d84ad920508ebed2d22d3616/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89523-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb055f4b745b1b56d84ad920508ebed2d22d3616/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89523-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89523-6.c?ref=fb055f4b745b1b56d84ad920508ebed2d22d3616", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-require-effective-target maybe_x32 } */\n+/* { dg-options \"-mx32 -O2 -mavx512pf\" } */\n+/* { dg-final { scan-assembler-not \"\\tvgather\" } } */\n+/* { dg-final { scan-assembler \"addr32 vgather\" } } */\n+\n+typedef int __v8si __attribute__ ((__vector_size__ (32)));\n+typedef long long __m256i __attribute__ ((__vector_size__ (32),\n+\t\t\t\t\t  __may_alias__));\n+typedef unsigned char  __mmask8;\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_prefetch_i32gather_pd (__m256i __index, void const *__addr,\n+\t\t\t      int __scale, int __hint)\n+{\n+  __builtin_ia32_gatherpfdpd ((__mmask8) 0xFF, (__v8si) __index, __addr,\n+\t\t\t      __scale, __hint);\n+}\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_prefetch_i32gather_pd (__m256i __index, __mmask8 __mask,\n+\t\t\t\t   void const *__addr, int __scale, int __hint)\n+{\n+  __builtin_ia32_gatherpfdpd (__mask, (__v8si) __index, __addr, __scale,\n+\t\t\t      __hint);\n+}\n+\n+volatile __m256i idx;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512pf_test (void)\n+{\n+  _mm512_prefetch_i32gather_pd (idx, (void *) 0, 8, 3);\n+  _mm512_mask_prefetch_i32gather_pd (idx, m8, (void *) 0, 8, 3);\n+}"}, {"sha": "030b00d268aa0d1fd7f6fb82ac36f7ec253bcf7a", "filename": "gcc/testsuite/gcc.target/i386/pr89523-7.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb055f4b745b1b56d84ad920508ebed2d22d3616/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89523-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb055f4b745b1b56d84ad920508ebed2d22d3616/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89523-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89523-7.c?ref=fb055f4b745b1b56d84ad920508ebed2d22d3616", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-require-effective-target maybe_x32 } */\n+/* { dg-options \"-mx32 -O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler \"\\tvscatter\" } } */\n+/* { dg-final { scan-assembler-not \"addr32 vscatter\" } } */\n+\n+typedef int __v8si __attribute__ ((__vector_size__ (32)));\n+typedef double __v8df __attribute__ ((__vector_size__ (64)));\n+typedef long long __m256i __attribute__ ((__vector_size__ (32),\n+\t\t\t\t\t  __may_alias__));\n+typedef double __m512d __attribute__ ((__vector_size__ (64), __may_alias__));\n+typedef unsigned char  __mmask8;\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_i32scatter_pd (void *__addr, __m256i __index, __m512d __v1,\n+\t\t      int __scale)\n+{\n+  __builtin_ia32_scattersiv8df (__addr, (__mmask8) 0xFF,\n+\t\t\t\t(__v8si) __index, (__v8df) __v1, __scale);\n+}\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_i32scatter_pd (void *__addr, __mmask8 __mask,\n+\t\t\t   __m256i __index, __m512d __v1, int __scale)\n+{\n+  __builtin_ia32_scattersiv8df (__addr, __mask, (__v8si) __index,\n+\t\t\t\t(__v8df) __v1, __scale);\n+}\n+\n+volatile __m512d src;\n+volatile __m256i idx;\n+volatile __mmask8 m8;\n+double *addr;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  _mm512_i32scatter_pd (addr, idx, src, 8);\n+  _mm512_mask_i32scatter_pd (addr, m8, idx, src, 8);\n+}"}, {"sha": "465c985c2b73f4cfd35e2a3bdbefd948c2e9950a", "filename": "gcc/testsuite/gcc.target/i386/pr89523-8.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb055f4b745b1b56d84ad920508ebed2d22d3616/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89523-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb055f4b745b1b56d84ad920508ebed2d22d3616/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89523-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89523-8.c?ref=fb055f4b745b1b56d84ad920508ebed2d22d3616", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-require-effective-target maybe_x32 } */\n+/* { dg-options \"-mx32 -O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler \"\\tvscatter\" } } */\n+/* { dg-final { scan-assembler-not \"addr32 vscatter\" } } */\n+\n+typedef long long __v8di __attribute__ ((__vector_size__ (64)));\n+typedef double __v8df __attribute__ ((__vector_size__ (64)));\n+typedef long long __m512i __attribute__ ((__vector_size__ (64), __may_alias__));\n+typedef double __m512d __attribute__ ((__vector_size__ (64), __may_alias__));\n+typedef unsigned char  __mmask8;\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_i64scatter_pd (void *__addr, __m512i __index, __m512d __v1,\n+\t\t      int __scale)\n+{\n+  __builtin_ia32_scatterdiv8df (__addr, (__mmask8) 0xFF,\n+\t\t\t\t(__v8di) __index, (__v8df) __v1, __scale);\n+}\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_i64scatter_pd (void *__addr, __mmask8 __mask,\n+\t\t\t   __m512i __index, __m512d __v1, int __scale)\n+{\n+  __builtin_ia32_scatterdiv8df (__addr, __mask, (__v8di) __index,\n+\t\t\t\t(__v8df) __v1, __scale);\n+}\n+\n+volatile __m512d src;\n+volatile __m512i idx;\n+volatile __mmask8 m8;\n+double *addr;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  _mm512_i64scatter_pd (addr, idx, src, 8);\n+  _mm512_mask_i64scatter_pd (addr, m8, idx, src, 8);\n+}"}, {"sha": "e9323126bd6d352b90098cf71bf5ffda1d2b82d3", "filename": "gcc/testsuite/gcc.target/i386/pr89523-9.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb055f4b745b1b56d84ad920508ebed2d22d3616/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89523-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb055f4b745b1b56d84ad920508ebed2d22d3616/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89523-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89523-9.c?ref=fb055f4b745b1b56d84ad920508ebed2d22d3616", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-require-effective-target maybe_x32 } */\n+/* { dg-options \"-mx32 -O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-not \"\\tvscatter\" } } */\n+/* { dg-final { scan-assembler \"addr32 vscatter\" } } */\n+\n+typedef int __v8si __attribute__ ((__vector_size__ (32)));\n+typedef double __v8df __attribute__ ((__vector_size__ (64)));\n+typedef long long __m256i __attribute__ ((__vector_size__ (32),\n+\t\t\t\t\t  __may_alias__));\n+typedef double __m512d __attribute__ ((__vector_size__ (64), __may_alias__));\n+typedef unsigned char  __mmask8;\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_i32scatter_pd (void *__addr, __m256i __index, __m512d __v1,\n+\t\t      int __scale)\n+{\n+  __builtin_ia32_scattersiv8df (__addr, (__mmask8) 0xFF,\n+\t\t\t\t(__v8si) __index, (__v8df) __v1, __scale);\n+}\n+\n+volatile __m512d src;\n+volatile __m256i idx;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  _mm512_i32scatter_pd ((void *) 0, idx, src, 8);\n+}"}]}