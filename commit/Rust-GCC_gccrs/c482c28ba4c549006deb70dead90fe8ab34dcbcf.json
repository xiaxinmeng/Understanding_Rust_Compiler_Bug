{"sha": "c482c28ba4c549006deb70dead90fe8ab34dcbcf", "node_id": "C_kwDOANBUbNoAKGM0ODJjMjhiYTRjNTQ5MDA2ZGViNzBkZWFkOTBmZThhYjM0ZGNiY2Y", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-03-17T21:56:32Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-03-17T21:56:32Z"}, "message": "PR 90356: Use xor to load const_double 0.0 on SSE (always)\n\nImplementations of the x87 floating point instruction set have always\nhad some pretty strange characteristics.  For example on the original\nIntel Pentium the FLDPI instruction (to load 3.14159... into a register)\ntook 5 cycles, and the FLDZ instruction (to load 0.0) took 2 cycles,\nwhen a regular FLD (load from memory) took just 1 cycle!?  Given that\nback then memory latencies were much lower (relatively) than they are\ntoday, these instructions were all but useless except when optimizing\nfor size (impressively FLDZ/FLDPI require only two bytes).\n\nSuch was the world back in 2006 when Uros Bizjak first added support for\nfldz https://gcc.gnu.org/pipermail/gcc-patches/2006-November/202589.html\nand then shortly after sensibly disabled them for !optimize_size with\nhttps://gcc.gnu.org/pipermail/gcc-patches/2006-November/204405.html\n\nAlas this vestigial logic still persists in the compiler today,\nso for example on x86_64 for the following function:\n\ndouble foo(double x) { return x + 0.0; }\n\ngenerates with -O2\n\nfoo:    addsd   .LC0(%rip), %xmm0\n        ret\n.LC0:   .long   0\n        .long   0\n\npreferring to read the constant 0.0 from memory [the constant pool],\nexcept when optimizing for size.  With -Os we get:\n\nfoo:    xorps   %xmm1, %xmm1\n        addsd   %xmm1, %xmm0\n        ret\n\nWhich is not only smaller (the two instructions require seven bytes vs.\neight for the original addsd from mem, even without considering the\nconstant pool) but is also faster on modern hardware.  The latter code\nsequence is generated by both clang and msvc with -O2.  Indeed Agner\nFogg documents the set of floating point/SSE constants that it's\ncheaper to materialize than to load from memory.\n\nThis patch shuffles the conditions on the i386 backend's *movtf_internal,\n*movdf_internal and *movsf_internal define_insns to untangle the newer\nTARGET_SSE_MATH clauses from the historical standard_80387_constant_p\nconditions.  Amongst the benefits of this are that it improves the code\ngenerated for PR tree-optimization/90356 and resolves PR target/86722.\n\n2022-03-17  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\tPR target/86722\n\tPR tree-optimization/90356\n\t* config/i386/i386.md (*movtf_internal): Don't guard\n\tstandard_sse_constant_p clause by optimize_function_for_size_p.\n\t(*movdf_internal): Likewise.\n\t(*movsf_internal): Likewise.\n\ngcc/testsuite/ChangeLog\n\tPR target/86722\n\tPR tree-optimization/90356\n\t* gcc.target/i386/pr86722.c: New test case.\n\t* gcc.target/i386/pr90356.c: New test case.", "tree": {"sha": "5b73315f9fd67649dd05da3b7fcc3b57ea8dd085", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b73315f9fd67649dd05da3b7fcc3b57ea8dd085"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c482c28ba4c549006deb70dead90fe8ab34dcbcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c482c28ba4c549006deb70dead90fe8ab34dcbcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c482c28ba4c549006deb70dead90fe8ab34dcbcf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c482c28ba4c549006deb70dead90fe8ab34dcbcf/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8db155ddf8cec9e31f0a4b8d80cc67db2c7a26f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8db155ddf8cec9e31f0a4b8d80cc67db2c7a26f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8db155ddf8cec9e31f0a4b8d80cc67db2c7a26f9"}], "stats": {"total": 41, "additions": 30, "deletions": 11}, "files": [{"sha": "5b44c65afff64d95f88231470b5c5ee559bf983a", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c482c28ba4c549006deb70dead90fe8ab34dcbcf/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c482c28ba4c549006deb70dead90fe8ab34dcbcf/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=c482c28ba4c549006deb70dead90fe8ab34dcbcf", "patch": "@@ -3455,9 +3455,7 @@\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && (lra_in_progress || reload_completed\n        || !CONST_DOUBLE_P (operands[1])\n-       || ((optimize_function_for_size_p (cfun)\n-\t    || (ix86_cmodel == CM_LARGE || ix86_cmodel == CM_LARGE_PIC))\n-\t   && standard_sse_constant_p (operands[1], TFmode) == 1\n+       || (standard_sse_constant_p (operands[1], TFmode) == 1\n \t   && !memory_operand (operands[0], TFmode))\n        || (!TARGET_MEMORY_MISMATCH_STALL\n \t   && memory_operand (operands[0], TFmode)))\"\n@@ -3590,10 +3588,11 @@\n        || !CONST_DOUBLE_P (operands[1])\n        || ((optimize_function_for_size_p (cfun)\n \t    || (ix86_cmodel == CM_LARGE || ix86_cmodel == CM_LARGE_PIC))\n-\t   && ((IS_STACK_MODE (DFmode)\n-\t\t&& standard_80387_constant_p (operands[1]) > 0)\n-\t       || (TARGET_SSE2 && TARGET_SSE_MATH\n-\t\t   && standard_sse_constant_p (operands[1], DFmode) == 1))\n+\t   && IS_STACK_MODE (DFmode)\n+\t   && standard_80387_constant_p (operands[1]) > 0\n+\t   && !memory_operand (operands[0], DFmode))\n+       || (TARGET_SSE2 && TARGET_SSE_MATH\n+\t   && standard_sse_constant_p (operands[1], DFmode) == 1\n \t   && !memory_operand (operands[0], DFmode))\n        || ((TARGET_64BIT || !TARGET_MEMORY_MISMATCH_STALL)\n \t   && memory_operand (operands[0], DFmode))\n@@ -3762,10 +3761,10 @@\n        || !CONST_DOUBLE_P (operands[1])\n        || ((optimize_function_for_size_p (cfun)\n \t    || (ix86_cmodel == CM_LARGE || ix86_cmodel == CM_LARGE_PIC))\n-\t   && ((IS_STACK_MODE (SFmode)\n-\t\t&& standard_80387_constant_p (operands[1]) > 0)\n-\t       || (TARGET_SSE && TARGET_SSE_MATH\n-\t\t   && standard_sse_constant_p (operands[1], SFmode) == 1)))\n+\t   && IS_STACK_MODE (SFmode)\n+\t   && standard_80387_constant_p (operands[1]) > 0)\n+       || (TARGET_SSE && TARGET_SSE_MATH\n+\t   && standard_sse_constant_p (operands[1], SFmode) == 1)\n        || memory_operand (operands[0], SFmode)\n        || !TARGET_HARD_SF_REGS)\"\n {"}, {"sha": "1092c4d8035bc22ffaa5c7b20c4450fcdcc18502", "filename": "gcc/testsuite/gcc.target/i386/pr86722.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c482c28ba4c549006deb70dead90fe8ab34dcbcf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr86722.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c482c28ba4c549006deb70dead90fe8ab34dcbcf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr86722.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr86722.c?ref=c482c28ba4c549006deb70dead90fe8ab34dcbcf", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -msse\" } */\n+\n+void f(double*d,double*e){\n+  for(;d<e;++d)\n+    *d=(*d<.5)?.7:0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"andnpd\" } } */\n+/* { dg-final { scan-assembler-not \"orpd\" } } */\n+"}, {"sha": "6f852b3f6716b1aa708a87ad409e9d77b597f8fe", "filename": "gcc/testsuite/gcc.target/i386/pr90356.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c482c28ba4c549006deb70dead90fe8ab34dcbcf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90356.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c482c28ba4c549006deb70dead90fe8ab34dcbcf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90356.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90356.c?ref=c482c28ba4c549006deb70dead90fe8ab34dcbcf", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2 -mfpmath=sse\" } */\n+float doit(float k){\n+    float c[2]={0.0};\n+    c[1]+=k;\n+    return c[0]+c[1];\n+}\n+\n+/* { dg-final { scan-assembler \"pxor\" } } */"}]}