{"sha": "0c88d886685d51b8579f29f079d81433ae1e9d31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM4OGQ4ODY2ODVkNTFiODU3OWYyOWYwNzlkODE0MzNhZTFlOWQzMQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-12-15T00:42:33Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-12-15T00:42:33Z"}, "message": "re PR c++/18738 (typename not allowed with non-dependent qualified name)\n\n\tPR c++/18738\n\t* decl.c (make_typename_type): Do not handle namespace-scoped\n\tnames here.\n\t(tag_name): Handle typename_type.\n\t(check_elaborated_type_specifier): Handle typenames.\n\t* parser.c (cp_parser_diagnose_invalid_type_name): Improve\n\tcomment.\n\t(cp_parser_elaborated_type_specifier): Use\n\tcp_parser_diagnose_invalid_type_name.\n\n\tPR c++/18738\n\t* g++.dg/template/typename8.C: New test.\n\t* g++.dg/parse/friend2.C: Tweak error message.\n\nFrom-SVN: r92172", "tree": {"sha": "f4dae82d23279fb3656e496ae669d665c8bd8f38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4dae82d23279fb3656e496ae669d665c8bd8f38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c88d886685d51b8579f29f079d81433ae1e9d31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c88d886685d51b8579f29f079d81433ae1e9d31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c88d886685d51b8579f29f079d81433ae1e9d31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c88d886685d51b8579f29f079d81433ae1e9d31/comments", "author": null, "committer": null, "parents": [{"sha": "a150cb057b5c6c835a95f0bf905dc929a24d4bf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a150cb057b5c6c835a95f0bf905dc929a24d4bf2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a150cb057b5c6c835a95f0bf905dc929a24d4bf2"}], "stats": {"total": 70, "additions": 48, "deletions": 22}, "files": [{"sha": "120f9b9cff85745a54cd77652ea60e22d01916ce", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c88d886685d51b8579f29f079d81433ae1e9d31/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c88d886685d51b8579f29f079d81433ae1e9d31/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0c88d886685d51b8579f29f079d81433ae1e9d31", "patch": "@@ -1,3 +1,15 @@\n+2004-12-14  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/18738\n+\t* decl.c (make_typename_type): Do not handle namespace-scoped\n+\tnames here.\n+\t(tag_name): Handle typename_type.\n+\t(check_elaborated_type_specifier): Handle typenames.\n+\t* parser.c (cp_parser_diagnose_invalid_type_name): Improve\n+\tcomment.\n+\t(cp_parser_elaborated_type_specifier): Use\n+\tcp_parser_diagnose_invalid_type_name.\n+\n 2004-12-14  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR c++/18965"}, {"sha": "d711899bdaf0adcd7c3c5b86b804ac754ae93eba", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c88d886685d51b8579f29f079d81433ae1e9d31/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c88d886685d51b8579f29f079d81433ae1e9d31/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=0c88d886685d51b8579f29f079d81433ae1e9d31", "patch": "@@ -2669,15 +2669,7 @@ make_typename_type (tree context, tree name, enum tag_types tag_type,\n       return error_mark_node;\n     }\n   gcc_assert (TREE_CODE (name) == IDENTIFIER_NODE);\n-\n-  if (TREE_CODE (context) == NAMESPACE_DECL)\n-    {\n-      /* We can get here from typename_sub0 in the explicit_template_type\n-\t expansion.  Just fail.  */\n-      if (complain & tf_error)\n-\terror (\"no class template named %q#T in %q#T\", name, context);\n-      return error_mark_node;\n-    }\n+  gcc_assert (TYPE_P (context));\n \n   if (!dependent_type_p (context)\n       || currently_open_class (context))\n@@ -9048,6 +9040,8 @@ grok_op_properties (tree decl, int friendp, bool complain)\n   return ok;\n }\n \f\n+/* Return a string giving the keyword associate with CODE.  */\n+\n static const char *\n tag_name (enum tag_types code)\n {\n@@ -9058,9 +9052,11 @@ tag_name (enum tag_types code)\n     case class_type:\n       return \"class\";\n     case union_type:\n-      return \"union \";\n+      return \"union\";\n     case enum_type:\n       return \"enum\";\n+    case typename_type:\n+      return \"typename\";\n     default:\n       gcc_unreachable ();\n     }\n@@ -9106,22 +9102,25 @@ check_elaborated_type_specifier (enum tag_types tag_code,\n      In other words, the only legitimate declaration to use in the\n      elaborated type specifier is the implicit typedef created when\n      the type is declared.  */\n-  else if (!DECL_IMPLICIT_TYPEDEF_P (decl))\n+  else if (!DECL_IMPLICIT_TYPEDEF_P (decl)\n+\t   && tag_code != typename_type)\n     {\n       error (\"using typedef-name %qD after %qs\", decl, tag_name (tag_code));\n       cp_error_at (\"%qD has a previous declaration here\", decl);\n       return error_mark_node;\n     }\n   else if (TREE_CODE (type) != RECORD_TYPE\n \t   && TREE_CODE (type) != UNION_TYPE\n-\t   && tag_code != enum_type)\n+\t   && tag_code != enum_type\n+\t   && tag_code != typename_type)\n     {\n       error (\"%qT referred to as %qs\", type, tag_name (tag_code));\n       cp_error_at (\"%qT has a previous declaration here\", type);\n       return error_mark_node;\n     }\n   else if (TREE_CODE (type) != ENUMERAL_TYPE\n-\t   && tag_code == enum_type)\n+\t   && tag_code == enum_type\n+\t   && tag_code != typename_type)\n     {\n       error (\"%qT referred to as enum\", type);\n       cp_error_at (\"%qT has a previous declaration here\", type);"}, {"sha": "13578f0e713cd55e6e71b8f30b4f63f4dba281c9", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c88d886685d51b8579f29f079d81433ae1e9d31/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c88d886685d51b8579f29f079d81433ae1e9d31/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=0c88d886685d51b8579f29f079d81433ae1e9d31", "patch": "@@ -1939,9 +1939,8 @@ cp_parser_non_integral_constant_expression (cp_parser  *parser,\n   return false;\n }\n \n-/* Emit a diagnostic for an invalid type name. Consider also if it is\n-   qualified or not and the result of a lookup, to provide a better\n-   message.  */\n+/* Emit a diagnostic for an invalid type name.  SCOPE is the\n+   qualifying scope (or NULL, if none) for ID.  */\n \n static void\n cp_parser_diagnose_invalid_type_name (cp_parser *parser, tree scope, tree id)\n@@ -9647,17 +9646,15 @@ cp_parser_elaborated_type_specifier (cp_parser* parser,\n \t}\n \n       /* For a `typename', we needn't call xref_tag.  */\n-      if (tag_type == typename_type)\n+      if (tag_type == typename_type \n+\t  && TREE_CODE (parser->scope) != NAMESPACE_DECL)\n \treturn cp_parser_make_typename_type (parser, parser->scope,\n \t\t\t\t\t     identifier);\n       /* Look up a qualified name in the usual way.  */\n       if (parser->scope)\n \t{\n \t  tree decl;\n \n-\t  /* In an elaborated-type-specifier, names are assumed to name\n-\t     types, so we set IS_TYPE to TRUE when calling\n-\t     cp_parser_lookup_name.  */\n \t  decl = cp_parser_lookup_name (parser, identifier,\n \t\t\t\t\ttag_type,\n \t\t\t\t\t/*is_template=*/false,\n@@ -9692,7 +9689,9 @@ cp_parser_elaborated_type_specifier (cp_parser* parser,\n \n \t  if (TREE_CODE (decl) != TYPE_DECL)\n \t    {\n-\t      error (\"expected type-name\");\n+\t      cp_parser_diagnose_invalid_type_name (parser, \n+\t\t\t\t\t\t    parser->scope,\n+\t\t\t\t\t\t    identifier);\n \t      return error_mark_node;\n \t    }\n "}, {"sha": "ec5facc72ac7c045d83e9ab625b6a1a51d7e2d0e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c88d886685d51b8579f29f079d81433ae1e9d31/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c88d886685d51b8579f29f079d81433ae1e9d31/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0c88d886685d51b8579f29f079d81433ae1e9d31", "patch": "@@ -1,3 +1,9 @@\n+2004-12-14  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/18738\n+\t* g++.dg/template/typename8.C: New test.\n+\t* g++.dg/parse/friend2.C: Tweak error message.\n+\n 2004-12-14  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* gcc.c-torture/20041214-1.c: New test."}, {"sha": "1a2ad8bfad9280cf187154c6f972ae39d8324e91", "filename": "gcc/testsuite/g++.dg/parse/friend2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c88d886685d51b8579f29f079d81433ae1e9d31/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ffriend2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c88d886685d51b8579f29f079d81433ae1e9d31/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ffriend2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ffriend2.C?ref=0c88d886685d51b8579f29f079d81433ae1e9d31", "patch": "@@ -10,7 +10,7 @@ namespace NS {\n }\n \n template <class T> class X {\n-  friend class NS::C;\t// { dg-error \"expected|friend\" }\n+  friend class NS::C;\t// { dg-error \"template|friend\" }\n };\n \n X<int> c;"}, {"sha": "85f585d944a37798172129768f35dda8f99e4d2f", "filename": "gcc/testsuite/g++.dg/template/typename8.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c88d886685d51b8579f29f079d81433ae1e9d31/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypename8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c88d886685d51b8579f29f079d81433ae1e9d31/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypename8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypename8.C?ref=0c88d886685d51b8579f29f079d81433ae1e9d31", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/18738\n+\n+namespace foo {\n+  typedef int my_type;\n+}\n+\n+template<typename T>\n+struct A {\n+  typename foo::my_type bar();\n+};"}]}