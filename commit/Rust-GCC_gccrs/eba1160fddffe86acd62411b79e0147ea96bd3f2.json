{"sha": "eba1160fddffe86acd62411b79e0147ea96bd3f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJhMTE2MGZkZGZmZTg2YWNkNjI0MTFiNzllMDE0N2VhOTZiZDNmMg==", "commit": {"author": {"name": "Justin Squirek", "email": "squirek@adacore.com", "date": "2021-03-29T14:06:55Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-06-21T10:45:19Z"}, "message": "[Ada] INOX: prototype \"when\" constructs\n\ngcc/ada/\n\n\t* doc/gnat_rm/implementation_defined_pragmas.rst: Document new\n\tfeature under pragma Extensions_Allowed.\n\t* gnat_rm.texi: Regenerate.\n\t* errout.adb, errout.ads (Error_Msg_GNAT_Extension): Created to\n\tissue errors when parsing extension only constructs.\n\t* exp_ch11.adb, exp_ch11.ads (Expand_N_Raise_When_Statement):\n\tCreated to expand raise ... when constucts.\n\t* exp_ch5.adb, exp_ch5.ads (Expand_N_Goto_When_Statement):\n\tCreated to expand goto ... when constructs.\n\t* exp_ch6.adb, exp_ch6.ads (Expand_N_Return_When_Statement):\n\tCreated to expand return ... when constructs.\n\t* expander.adb (Expand): Add case entries for \"when\" constructs.\n\t* gen_il-gen-gen_nodes.adb, gen_il-types.ads: Add entries for\n\t\"when\" constructs.\n\t* par-ch11.adb (P_Raise_Statement): Add processing for raise ...\n\twhen.\n\t* par-ch5.adb (Missing_Semicolon_On_Exit): Renamed to\n\tMissing_Semicolon_On_When and moved to par-util.adb.\n\t* par-ch6.adb (Get_Return_Kind): Renamed from Is_Simple and\n\tprocessing added for \"return ... when\" return kind.\n\t(Is_Simple): Renamed to Get_Return_Kind.\n\t(P_Return_Statement): Add case for return ... when variant of\n\treturn statement.\n\t* par-util.adb, par.adb (Missing_Semicolon_On_When): Added to\n\tcenteralize parsing of \"when\" keywords in the context of \"when\"\n\tconstructs.\n\t* sem.adb (Analyze): Add case for \"when\" constructs.\n\t* sem_ch11.adb, sem_ch11.ads (Analyze_Raise_When_Statement):\n\tCreated to analyze raise ... when constructs.\n\t* sem_ch5.adb, sem_ch5.ads (Analyzed_Goto_When_Statement):\n\tCreated to analyze goto ... when constructs.\n\t* sem_ch6.adb, sem_ch6.ads (Analyze_Return_When_Statement):\n\tCreated to analyze return ... when constructs.\n\t* sprint.adb (Sprint_Node_Actual): Add entries for new \"when\"\n\tnodes.", "tree": {"sha": "d869e2abc241f899550f0aa4e0245119d17d7948", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d869e2abc241f899550f0aa4e0245119d17d7948"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eba1160fddffe86acd62411b79e0147ea96bd3f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eba1160fddffe86acd62411b79e0147ea96bd3f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eba1160fddffe86acd62411b79e0147ea96bd3f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eba1160fddffe86acd62411b79e0147ea96bd3f2/comments", "author": {"login": "AdaDoom3", "id": 3445599, "node_id": "MDQ6VXNlcjM0NDU1OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3445599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdaDoom3", "html_url": "https://github.com/AdaDoom3", "followers_url": "https://api.github.com/users/AdaDoom3/followers", "following_url": "https://api.github.com/users/AdaDoom3/following{/other_user}", "gists_url": "https://api.github.com/users/AdaDoom3/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdaDoom3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdaDoom3/subscriptions", "organizations_url": "https://api.github.com/users/AdaDoom3/orgs", "repos_url": "https://api.github.com/users/AdaDoom3/repos", "events_url": "https://api.github.com/users/AdaDoom3/events{/privacy}", "received_events_url": "https://api.github.com/users/AdaDoom3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20922782976048592eb9240ad2ab8690b207dc24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20922782976048592eb9240ad2ab8690b207dc24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20922782976048592eb9240ad2ab8690b207dc24"}], "stats": {"total": 423, "additions": 343, "deletions": 80}, "files": [{"sha": "d86a2fd75cd68ab18504291ee7fe511870926812", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_pragmas.rst", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst?ref=eba1160fddffe86acd62411b79e0147ea96bd3f2", "patch": "@@ -2214,6 +2214,23 @@ of GNAT specific extensions are recognized as follows:\n   This new aggregate syntax for arrays and containers is provided under -gnatX\n   to experiment and confirm this new language syntax.\n \n+* Additional ``when`` constructs\n+\n+  In addition to the ``exit when CONDITION`` control structure, several\n+  additional constructs are allowed following this format. Including\n+  ``return when CONDITION``, ``goto when CONDITION``, and\n+  ``raise [with EXCEPTION_MESSAGE] when CONDITION.``\n+\n+  Some examples:\n+\n+  .. code-block:: ada\n+\n+      return Result when Variable > 10;\n+\n+      raise Program_Error with \"Element is null\" when Element = null;\n+\n+      goto End_Of_Subprogram when Variable = -1;\n+\n * Casing on composite values (aka pattern matching)\n \n   The selector for a case statement may be of a composite type, subject to"}, {"sha": "f643c8da6fc62e65b62c83edd0ec77fd2086390e", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=eba1160fddffe86acd62411b79e0147ea96bd3f2", "patch": "@@ -886,6 +886,19 @@ package body Errout is\n                               Last  => Last_Sloc (Lst)));\n    end Error_Msg_FE;\n \n+   ------------------------------\n+   -- Error_Msg_GNAT_Extension --\n+   ------------------------------\n+\n+   procedure Error_Msg_GNAT_Extension (Extension : String) is\n+      Loc : constant Source_Ptr := Token_Ptr;\n+   begin\n+      if not Extensions_Allowed then\n+         Error_Msg (Extension & \" is a 'G'N'A'T specific extension\", Loc);\n+         Error_Msg (\"\\unit must be compiled with -gnatX switch\", Loc);\n+      end if;\n+   end Error_Msg_GNAT_Extension;\n+\n    ------------------------\n    -- Error_Msg_Internal --\n    ------------------------"}, {"sha": "904c87d2914d243d33948e481eb22ab3ee33f144", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=eba1160fddffe86acd62411b79e0147ea96bd3f2", "patch": "@@ -942,6 +942,11 @@ package Errout is\n    procedure Error_Msg_Ada_2022_Feature (Feature : String; Loc : Source_Ptr);\n    --  Analogous to Error_Msg_Ada_2012_Feature, for Ada 2022\n \n+   procedure Error_Msg_GNAT_Extension (Extension : String);\n+   --  If not operating with extensions allowed, posts errors complaining\n+   --  that Extension is only supported when the -gnatX switch is enabled,\n+   --  with appropriate suggestions to fix it.\n+\n    procedure dmsg (Id : Error_Msg_Id) renames Erroutc.dmsg;\n    --  Debugging routine to dump an error message\n "}, {"sha": "605882600cdfddc277e5e55c48c9504854f10b51", "filename": "gcc/ada/exp_ch11.adb", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fexp_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fexp_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch11.adb?ref=eba1160fddffe86acd62411b79e0147ea96bd3f2", "patch": "@@ -1736,6 +1736,24 @@ package body Exp_Ch11 is\n       Analyze (N);\n    end Expand_N_Raise_Statement;\n \n+   -----------------------------------\n+   -- Expand_N_Raise_When_Statement --\n+   -----------------------------------\n+\n+   procedure Expand_N_Raise_When_Statement (N : Node_Id) is\n+      Loc : constant Source_Ptr := Sloc (N);\n+   begin\n+      Rewrite (N,\n+        Make_If_Statement (Loc,\n+          Condition       => Condition (N),\n+          Then_Statements => New_List (\n+            Make_Raise_Statement (Loc,\n+              Name       => Name (N),\n+              Expression => Expression (N)))));\n+\n+      Analyze (N);\n+   end Expand_N_Raise_When_Statement;\n+\n    ----------------------------------\n    -- Expand_N_Raise_Storage_Error --\n    ----------------------------------"}, {"sha": "057919bbc521c8f93e2796cda00683282175bf68", "filename": "gcc/ada/exp_ch11.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fexp_ch11.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fexp_ch11.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch11.ads?ref=eba1160fddffe86acd62411b79e0147ea96bd3f2", "patch": "@@ -34,6 +34,7 @@ package Exp_Ch11 is\n    procedure Expand_N_Raise_Expression               (N : Node_Id);\n    procedure Expand_N_Raise_Program_Error            (N : Node_Id);\n    procedure Expand_N_Raise_Statement                (N : Node_Id);\n+   procedure Expand_N_Raise_When_Statement           (N : Node_Id);\n    procedure Expand_N_Raise_Storage_Error            (N : Node_Id);\n \n    --  Data structures for gathering information to build exception tables"}, {"sha": "00707060f1c08023ef145596d1267f1fea3677f2", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=eba1160fddffe86acd62411b79e0147ea96bd3f2", "patch": "@@ -4176,6 +4176,23 @@ package body Exp_Ch5 is\n       Analyze (N);\n    end Expand_Formal_Container_Element_Loop;\n \n+   ----------------------------------\n+   -- Expand_N_Goto_When_Statement --\n+   ----------------------------------\n+\n+   procedure Expand_N_Goto_When_Statement (N : Node_Id) is\n+      Loc : constant Source_Ptr := Sloc (N);\n+   begin\n+      Rewrite (N,\n+        Make_If_Statement (Loc,\n+          Condition       => Condition (N),\n+          Then_Statements => New_List (\n+            Make_Goto_Statement (Loc,\n+              Name => Name (N)))));\n+\n+      Analyze (N);\n+   end Expand_N_Goto_When_Statement;\n+\n    ---------------------------\n    -- Expand_N_If_Statement --\n    ---------------------------"}, {"sha": "75dd2cc808e1fb03eefc4cf9e72b73233f94ed36", "filename": "gcc/ada/exp_ch5.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fexp_ch5.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fexp_ch5.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.ads?ref=eba1160fddffe86acd62411b79e0147ea96bd3f2", "patch": "@@ -32,6 +32,7 @@ package Exp_Ch5 is\n    procedure Expand_N_Block_Statement           (N : Node_Id);\n    procedure Expand_N_Case_Statement            (N : Node_Id);\n    procedure Expand_N_Exit_Statement            (N : Node_Id);\n+   procedure Expand_N_Goto_When_Statement       (N : Node_Id);\n    procedure Expand_N_If_Statement              (N : Node_Id);\n    procedure Expand_N_Loop_Statement            (N : Node_Id);\n "}, {"sha": "cd972e1a9c2a9a19416be5820bede81482378e1d", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=eba1160fddffe86acd62411b79e0147ea96bd3f2", "patch": "@@ -6064,6 +6064,23 @@ package body Exp_Ch6 is\n       Expand_Call (N);\n    end Expand_N_Procedure_Call_Statement;\n \n+   ------------------------------------\n+   -- Expand_N_Return_When_Statement --\n+   ------------------------------------\n+\n+   procedure Expand_N_Return_When_Statement (N : Node_Id) is\n+      Loc : constant Source_Ptr := Sloc (N);\n+   begin\n+      Rewrite (N,\n+        Make_If_Statement (Loc,\n+          Condition       => Condition (N),\n+          Then_Statements => New_List (\n+            Make_Simple_Return_Statement (Loc,\n+              Expression => Expression (N)))));\n+\n+      Analyze (N);\n+   end Expand_N_Return_When_Statement;\n+\n    --------------------------------------\n    -- Expand_N_Simple_Return_Statement --\n    --------------------------------------"}, {"sha": "07a88c55c3c30dbd68f18f364b4821b74646cabf", "filename": "gcc/ada/exp_ch6.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fexp_ch6.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fexp_ch6.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.ads?ref=eba1160fddffe86acd62411b79e0147ea96bd3f2", "patch": "@@ -32,6 +32,7 @@ package Exp_Ch6 is\n    procedure Expand_N_Extended_Return_Statement (N : Node_Id);\n    procedure Expand_N_Function_Call             (N : Node_Id);\n    procedure Expand_N_Procedure_Call_Statement  (N : Node_Id);\n+   procedure Expand_N_Return_When_Statement     (N : Node_Id);\n    procedure Expand_N_Simple_Return_Statement   (N : Node_Id);\n    procedure Expand_N_Subprogram_Body           (N : Node_Id);\n    procedure Expand_N_Subprogram_Body_Stub      (N : Node_Id);"}, {"sha": "e0483b7d029b22f868d4b781754bf951aef82364", "filename": "gcc/ada/expander.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fexpander.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fexpander.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexpander.adb?ref=eba1160fddffe86acd62411b79e0147ea96bd3f2", "patch": "@@ -274,6 +274,9 @@ package body Expander is\n                when N_Generic_Instantiation =>\n                   Expand_N_Generic_Instantiation (N);\n \n+               when N_Goto_When_Statement =>\n+                  Expand_N_Goto_When_Statement (N);\n+\n                when N_Handled_Sequence_Of_Statements =>\n                   Expand_N_Handled_Sequence_Of_Statements (N);\n \n@@ -421,6 +424,9 @@ package body Expander is\n                when N_Raise_Statement =>\n                   Expand_N_Raise_Statement (N);\n \n+               when N_Raise_When_Statement =>\n+                  Expand_N_Raise_When_Statement (N);\n+\n                when N_Raise_Constraint_Error =>\n                   Expand_N_Raise_Constraint_Error (N);\n \n@@ -442,6 +448,9 @@ package body Expander is\n                when N_Requeue_Statement =>\n                   Expand_N_Requeue_Statement (N);\n \n+               when N_Return_When_Statement =>\n+                  Expand_N_Return_When_Statement (N);\n+\n                when N_Simple_Return_Statement =>\n                   Expand_N_Simple_Return_Statement (N);\n "}, {"sha": "26fc069271cc2de6a852520e0e432795716f021d", "filename": "gcc/ada/gen_il-gen-gen_nodes.adb", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fgen_il-gen-gen_nodes.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fgen_il-gen-gen_nodes.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgen_il-gen-gen_nodes.adb?ref=eba1160fddffe86acd62411b79e0147ea96bd3f2", "patch": "@@ -1019,6 +1019,10 @@ begin -- Gen_IL.Gen.Gen_Nodes\n        (Sy (Name, Node_Id, Default_Empty),\n         Sm (Exception_Junk, Flag)));\n \n+   Cc (N_Goto_When_Statement, N_Statement_Other_Than_Procedure_Call,\n+       (Sy (Name, Node_Id, Default_Empty),\n+        Sy (Condition, Node_Id, Default_Empty)));\n+\n    Cc (N_Loop_Statement, N_Statement_Other_Than_Procedure_Call,\n        (Sy (Identifier, Node_Id, Default_Empty),\n         Sy (Iteration_Scheme, Node_Id, Default_Empty),\n@@ -1036,6 +1040,11 @@ begin -- Gen_IL.Gen.Gen_Nodes\n         Sy (Expression, Node_Id, Default_Empty),\n         Sm (From_At_End, Flag)));\n \n+   Cc (N_Raise_When_Statement, N_Statement_Other_Than_Procedure_Call,\n+       (Sy (Name, Node_Id, Default_Empty),\n+        Sy (Expression, Node_Id, Default_Empty),\n+        Sy (Condition, Node_Id, Default_Empty)));\n+\n    Cc (N_Requeue_Statement, N_Statement_Other_Than_Procedure_Call,\n        (Sy (Name, Node_Id, Default_Empty),\n         Sy (Abort_Present, Flag),\n@@ -1061,6 +1070,10 @@ begin -- Gen_IL.Gen.Gen_Nodes\n         Sm (Return_Statement_Entity, Node_Id),\n         Sm (Storage_Pool, Node_Id)));\n \n+   Cc (N_Return_When_Statement, N_Statement_Other_Than_Procedure_Call,\n+       (Sy (Expression, Node_Id, Default_Empty),\n+        Sy (Condition, Node_Id, Default_Empty)));\n+\n    Cc (N_Selective_Accept, N_Statement_Other_Than_Procedure_Call,\n        (Sy (Select_Alternatives, List_Id),\n         Sy (Else_Statements, List_Id, Default_No_List)));"}, {"sha": "482d01d115998f2406abc5b8fa2f7d64647184e9", "filename": "gcc/ada/gen_il-types.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fgen_il-types.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fgen_il-types.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgen_il-types.ads?ref=eba1160fddffe86acd62411b79e0147ea96bd3f2", "patch": "@@ -308,12 +308,15 @@ package Gen_IL.Types is\n       N_Entry_Call_Statement,\n       N_Free_Statement,\n       N_Goto_Statement,\n+      N_Goto_When_Statement,\n       N_Loop_Statement,\n       N_Null_Statement,\n       N_Raise_Statement,\n+      N_Raise_When_Statement,\n       N_Requeue_Statement,\n       N_Simple_Return_Statement,\n       N_Extended_Return_Statement,\n+      N_Return_When_Statement,\n       N_Selective_Accept,\n       N_Timed_Entry_Call,\n       N_Exit_Statement,"}, {"sha": "79f8bb354ee6b1b01663f305ed2831e6cba479bd", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=eba1160fddffe86acd62411b79e0147ea96bd3f2", "patch": "@@ -3639,6 +3639,24 @@ now under -gnatX to confirm and potentially refine its usage and syntax.\n This new aggregate syntax for arrays and containers is provided under -gnatX\n to experiment and confirm this new language syntax.\n \n+@item \n+Additional @code{when} constructs\n+\n+In addition to the @code{exit when CONDITION} control structure, several\n+additional constructs are allowed following this format. Including\n+@code{return when CONDITION}, @code{goto when CONDITION}, and\n+@code{raise [with EXCEPTION_MESSAGE] when CONDITION.}\n+\n+Some examples:\n+\n+@example\n+return Result when Variable > 10;\n+\n+raise Program_Error with \"Element is null\" when Element = null;\n+\n+goto End_Of_Subprogram when Variable = -1;\n+@end example\n+\n @item \n Casing on composite values (aka pattern matching)\n "}, {"sha": "8304c3e877961d34eb8e37cdda26cb3452b1e0f4", "filename": "gcc/ada/par-ch11.adb", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fpar-ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fpar-ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch11.adb?ref=eba1160fddffe86acd62411b79e0147ea96bd3f2", "patch": "@@ -233,6 +233,24 @@ package body Ch11 is\n          Set_Expression (Raise_Node, P_Expression);\n       end if;\n \n+      if Token = Tok_When then\n+         Error_Msg_GNAT_Extension (\"raise when statement\");\n+\n+         Mutate_Nkind (Raise_Node, N_Raise_When_Statement);\n+\n+         if Token = Tok_When and then not Missing_Semicolon_On_When then\n+            Scan; -- past WHEN\n+            Set_Condition (Raise_Node, P_Expression_No_Right_Paren);\n+\n+         --  Allow IF instead of WHEN, giving error message\n+\n+         elsif Token = Tok_If then\n+            T_When;\n+            Scan; -- past IF used in place of WHEN\n+            Set_Condition (Raise_Node, P_Expression_No_Right_Paren);\n+         end if;\n+      end if;\n+\n       TF_Semicolon;\n       return Raise_Node;\n    end P_Raise_Statement;"}, {"sha": "608ebd030e41cb9ebad5c6cc17d8293c06e013c1", "filename": "gcc/ada/par-ch5.adb", "status": "modified", "additions": 10, "deletions": 43, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fpar-ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fpar-ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch5.adb?ref=eba1160fddffe86acd62411b79e0147ea96bd3f2", "patch": "@@ -1905,47 +1905,6 @@ package body Ch5 is\n    function P_Exit_Statement return Node_Id is\n       Exit_Node : Node_Id;\n \n-      function Missing_Semicolon_On_Exit return Boolean;\n-      --  This function deals with the following specialized situation\n-      --\n-      --    when 'x' =>\n-      --       exit [identifier]\n-      --    when 'y' =>\n-      --\n-      --  This looks like a messed up EXIT WHEN, when in fact the problem\n-      --  is a missing semicolon. It is called with Token pointing to the\n-      --  WHEN token, and returns True if a semicolon is missing before\n-      --  the WHEN as in the above example.\n-\n-      -------------------------------\n-      -- Missing_Semicolon_On_Exit --\n-      -------------------------------\n-\n-      function Missing_Semicolon_On_Exit return Boolean is\n-         State : Saved_Scan_State;\n-\n-      begin\n-         if not Token_Is_At_Start_Of_Line then\n-            return False;\n-\n-         elsif Scopes (Scope.Last).Etyp /= E_Case then\n-            return False;\n-\n-         else\n-            Save_Scan_State (State);\n-            Scan; -- past WHEN\n-            Scan; -- past token after WHEN\n-\n-            if Token = Tok_Arrow then\n-               Restore_Scan_State (State);\n-               return True;\n-            else\n-               Restore_Scan_State (State);\n-               return False;\n-            end if;\n-         end if;\n-      end Missing_Semicolon_On_Exit;\n-\n    --  Start of processing for P_Exit_Statement\n \n    begin\n@@ -1975,7 +1934,7 @@ package body Ch5 is\n          end loop Check_No_Exit_Name;\n       end if;\n \n-      if Token = Tok_When and then not Missing_Semicolon_On_Exit then\n+      if Token = Tok_When and then not Missing_Semicolon_On_When then\n          Scan; -- past WHEN\n          Set_Condition (Exit_Node, P_Condition);\n \n@@ -2010,7 +1969,15 @@ package body Ch5 is\n       Scan; -- past GOTO (or TO)\n       Set_Name (Goto_Node, P_Qualified_Simple_Name_Resync);\n       Append_Elmt (Goto_Node, Goto_List);\n-      No_Constraint;\n+\n+      if Token = Tok_When then\n+         Error_Msg_GNAT_Extension (\"goto when statement\");\n+\n+         Scan; -- past WHEN\n+         Mutate_Nkind (Goto_Node, N_Goto_When_Statement);\n+         Set_Condition (Goto_Node, P_Expression_No_Right_Paren);\n+      end if;\n+\n       TF_Semicolon;\n       return Goto_Node;\n    end P_Goto_Statement;"}, {"sha": "45a421420cbbe3102ea2dbcbb8ffd4907d0cf17a", "filename": "gcc/ada/par-ch6.adb", "status": "modified", "additions": 66, "deletions": 37, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fpar-ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fpar-ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch6.adb?ref=eba1160fddffe86acd62411b79e0147ea96bd3f2", "patch": "@@ -1874,37 +1874,43 @@ package body Ch6 is\n    function P_Return_Statement return Node_Id is\n       --  The caller has checked that the initial token is RETURN\n \n-      function Is_Simple return Boolean;\n+      type Return_Kind is (Simple_Return, Extended_Return, Return_When);\n+\n+      function Get_Return_Kind return Return_Kind;\n       --  Scan state is just after RETURN (and is left that way). Determine\n       --  whether this is a simple or extended return statement by looking\n       --  ahead for \"identifier :\", which implies extended.\n \n-      ---------------\n-      -- Is_Simple --\n-      ---------------\n+      ---------------------\n+      -- Get_Return_Kind --\n+      ---------------------\n \n-      function Is_Simple return Boolean is\n+      function Get_Return_Kind return Return_Kind is\n          Scan_State : Saved_Scan_State;\n-         Result     : Boolean := True;\n+         Result     : Return_Kind := Simple_Return;\n \n       begin\n          if Token = Tok_Identifier then\n             Save_Scan_State (Scan_State); -- at identifier\n             Scan; -- past identifier\n \n             if Token = Tok_Colon then\n-               Result := False; -- It's an extended_return_statement.\n+               Result := Extended_Return; -- It's an extended_return_statement\n+            elsif Token = Tok_When then\n+               Error_Msg_GNAT_Extension (\"return when statement\");\n+\n+               Result := Return_When;\n             end if;\n \n             Restore_Scan_State (Scan_State); -- to identifier\n          end if;\n \n          return Result;\n-      end Is_Simple;\n+      end Get_Return_Kind;\n \n       Ret_Sloc : constant Source_Ptr := Token_Ptr;\n       Ret_Strt : constant Column_Number := Start_Column;\n-      Ret_Node : Node_Id;\n+      Ret_Node : Node_Id := New_Node (N_Simple_Return_Statement, Ret_Sloc);\n       Decl     : Node_Id;\n \n    --  Start of processing for P_Return_Statement\n@@ -1917,7 +1923,6 @@ package body Ch6 is\n \n       if Token = Tok_Semicolon then\n          Scan; -- past ;\n-         Ret_Node := New_Node (N_Simple_Return_Statement, Ret_Sloc);\n \n       --  Nontrivial case\n \n@@ -1928,41 +1933,65 @@ package body Ch6 is\n          --  expression terminator since in that case the best error\n          --  message is probably that we have a missing semicolon.\n \n-         if Is_Simple then\n-            Ret_Node := New_Node (N_Simple_Return_Statement, Ret_Sloc);\n+         case Get_Return_Kind is\n+            --  Return_when_statement (Experimental only)\n \n-            if Token not in Token_Class_Eterm then\n-               Set_Expression (Ret_Node, P_Expression_No_Right_Paren);\n-            end if;\n+            when Return_When =>\n+               Ret_Node := New_Node (N_Return_When_Statement, Ret_Sloc);\n \n-         --  Extended_return_statement (Ada 2005 only -- AI-318):\n+               if Token not in Token_Class_Eterm then\n+                  Set_Expression (Ret_Node, P_Expression_No_Right_Paren);\n+               end if;\n \n-         else\n-            Error_Msg_Ada_2005_Extension (\"extended return statement\");\n+               if Token = Tok_When and then not Missing_Semicolon_On_When then\n+                  Scan; -- past WHEN\n+                  Set_Condition (Ret_Node, P_Condition);\n \n-            Ret_Node := New_Node (N_Extended_Return_Statement, Ret_Sloc);\n-            Decl := P_Return_Object_Declaration;\n-            Set_Return_Object_Declarations (Ret_Node, New_List (Decl));\n+               --  Allow IF instead of WHEN, giving error message\n \n-            if Token = Tok_With then\n-               P_Aspect_Specifications (Decl, False);\n-            end if;\n+               elsif Token = Tok_If then\n+                  T_When;\n+                  Scan; -- past IF used in place of WHEN\n+                  Set_Condition (Ret_Node, P_Expression_No_Right_Paren);\n+               end if;\n \n-            if Token = Tok_Do then\n-               Push_Scope_Stack;\n-               Scopes (Scope.Last).Ecol := Ret_Strt;\n-               Scopes (Scope.Last).Etyp := E_Return;\n-               Scopes (Scope.Last).Labl := Error;\n-               Scopes (Scope.Last).Sloc := Ret_Sloc;\n+            --  Simple_return_statement\n \n-               Scan; -- past DO\n-               Set_Handled_Statement_Sequence\n-                 (Ret_Node, P_Handled_Sequence_Of_Statements);\n-               End_Statements;\n+            when Simple_Return =>\n+               Ret_Node := New_Node (N_Simple_Return_Statement, Ret_Sloc);\n \n-               --  Do we need to handle Error_Resync here???\n-            end if;\n-         end if;\n+               if Token not in Token_Class_Eterm then\n+                  Set_Expression (Ret_Node, P_Expression_No_Right_Paren);\n+               end if;\n+\n+            --  Extended_return_statement (Ada 2005 only -- AI-318):\n+\n+            when Extended_Return =>\n+               Error_Msg_Ada_2005_Extension (\"extended return statement\");\n+\n+               Ret_Node := New_Node (N_Extended_Return_Statement, Ret_Sloc);\n+               Decl := P_Return_Object_Declaration;\n+               Set_Return_Object_Declarations (Ret_Node, New_List (Decl));\n+\n+               if Token = Tok_With then\n+                  P_Aspect_Specifications (Decl, False);\n+               end if;\n+\n+               if Token = Tok_Do then\n+                  Push_Scope_Stack;\n+                  Scopes (Scope.Last).Ecol := Ret_Strt;\n+                  Scopes (Scope.Last).Etyp := E_Return;\n+                  Scopes (Scope.Last).Labl := Error;\n+                  Scopes (Scope.Last).Sloc := Ret_Sloc;\n+\n+                  Scan; -- past DO\n+                  Set_Handled_Statement_Sequence\n+                    (Ret_Node, P_Handled_Sequence_Of_Statements);\n+                  End_Statements;\n+\n+                  --  Do we need to handle Error_Resync here???\n+               end if;\n+         end case;\n \n          TF_Semicolon;\n       end if;"}, {"sha": "f4179b9ece779ff875f42c9a2dac9297ac289d88", "filename": "gcc/ada/par-util.adb", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fpar-util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fpar-util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-util.adb?ref=eba1160fddffe86acd62411b79e0147ea96bd3f2", "patch": "@@ -630,6 +630,35 @@ package body Util is\n       Scan;\n    end Merge_Identifier;\n \n+   -------------------------------\n+   -- Missing_Semicolon_On_When --\n+   -------------------------------\n+\n+   function Missing_Semicolon_On_When return Boolean is\n+      State : Saved_Scan_State;\n+\n+   begin\n+      if not Token_Is_At_Start_Of_Line then\n+         return False;\n+\n+      elsif Scopes (Scope.Last).Etyp /= E_Case then\n+         return False;\n+\n+      else\n+         Save_Scan_State (State);\n+         Scan; -- past WHEN\n+         Scan; -- past token after WHEN\n+\n+         if Token = Tok_Arrow then\n+            Restore_Scan_State (State);\n+            return True;\n+         else\n+            Restore_Scan_State (State);\n+            return False;\n+         end if;\n+      end if;\n+   end Missing_Semicolon_On_When;\n+\n    -------------------\n    -- Next_Token_Is --\n    -------------------"}, {"sha": "649d2a08dc05d460bd8f734db89931361b2724e0", "filename": "gcc/ada/par.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fpar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fpar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar.adb?ref=eba1160fddffe86acd62411b79e0147ea96bd3f2", "patch": "@@ -1351,6 +1351,18 @@ function Par (Configuration_Pragmas : Boolean) return List_Id is\n       --  conditions are met, an error message is issued, and the merge is\n       --  carried out, modifying the Chars field of Prev.\n \n+      function Missing_Semicolon_On_When return Boolean;\n+      --  This function deals with the following specialized situations\n+      --\n+      --    when 'x' =>\n+      --       exit/return [identifier]\n+      --    when 'y' =>\n+      --\n+      --  This looks like a messed up EXIT WHEN or RETURN WHEN, when in fact\n+      --  the problem is a missing semicolon. It is called with Token pointing\n+      --  to the WHEN token, and returns True if a semicolon is missing before\n+      --  the WHEN as in the above example.\n+\n       function Next_Token_Is (Tok : Token_Type) return Boolean;\n       --  Looks at token after current one and returns True if the token type\n       --  matches Tok. The scan is unconditionally restored on return."}, {"sha": "783c94aa53eaee9b4893d9e4ff5ffc16689bce9c", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=eba1160fddffe86acd62411b79e0147ea96bd3f2", "patch": "@@ -298,6 +298,9 @@ package body Sem is\n          when N_Goto_Statement =>\n             Analyze_Goto_Statement (N);\n \n+         when N_Goto_When_Statement =>\n+            Analyze_Goto_When_Statement (N);\n+\n          when N_Handled_Sequence_Of_Statements =>\n             Analyze_Handled_Statements (N);\n \n@@ -505,6 +508,9 @@ package body Sem is\n          when N_Raise_Statement =>\n             Analyze_Raise_Statement (N);\n \n+         when N_Raise_When_Statement =>\n+            Analyze_Raise_When_Statement (N);\n+\n          when N_Raise_xxx_Error =>\n             Analyze_Raise_xxx_Error (N);\n \n@@ -526,6 +532,9 @@ package body Sem is\n          when N_Requeue_Statement =>\n             Analyze_Requeue (N);\n \n+         when N_Return_When_Statement =>\n+            Analyze_Return_When_Statement (N);\n+\n          when N_Simple_Return_Statement =>\n             Analyze_Simple_Return_Statement (N);\n "}, {"sha": "5a2c6a6828bbbfcbaee75659a4c5fd22378c9ee1", "filename": "gcc/ada/sem_ch11.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fsem_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fsem_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch11.adb?ref=eba1160fddffe86acd62411b79e0147ea96bd3f2", "patch": "@@ -662,6 +662,18 @@ package body Sem_Ch11 is\n       Kill_Current_Values (Last_Assignment_Only => True);\n    end Analyze_Raise_Statement;\n \n+   ----------------------------------\n+   -- Analyze_Raise_When_Statement --\n+   ----------------------------------\n+\n+   procedure Analyze_Raise_When_Statement (N : Node_Id) is\n+   begin\n+      --  Verify the condition is a Boolean expression\n+\n+      Analyze_And_Resolve (Condition (N), Any_Boolean);\n+      Check_Unset_Reference (Condition (N));\n+   end Analyze_Raise_When_Statement;\n+\n    -----------------------------\n    -- Analyze_Raise_xxx_Error --\n    -----------------------------"}, {"sha": "9b027d9295bdda66c7aeb9b008f6be495793daa1", "filename": "gcc/ada/sem_ch11.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fsem_ch11.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fsem_ch11.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch11.ads?ref=eba1160fddffe86acd62411b79e0147ea96bd3f2", "patch": "@@ -29,6 +29,7 @@ package Sem_Ch11 is\n    procedure Analyze_Handled_Statements                 (N : Node_Id);\n    procedure Analyze_Raise_Expression                   (N : Node_Id);\n    procedure Analyze_Raise_Statement                    (N : Node_Id);\n+   procedure Analyze_Raise_When_Statement               (N : Node_Id);\n    procedure Analyze_Raise_xxx_Error                    (N : Node_Id);\n \n    procedure Analyze_Exception_Handlers (L : List_Id);"}, {"sha": "3c98d738297fa349e1ce1d8725de1dd0089a44c8", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=eba1160fddffe86acd62411b79e0147ea96bd3f2", "patch": "@@ -1825,6 +1825,18 @@ package body Sem_Ch5 is\n       raise Program_Error;\n    end Analyze_Goto_Statement;\n \n+   ---------------------------------\n+   -- Analyze_Goto_When_Statement --\n+   ---------------------------------\n+\n+   procedure Analyze_Goto_When_Statement (N : Node_Id) is\n+   begin\n+      --  Verify the condition is a Boolean expression\n+\n+      Analyze_And_Resolve (Condition (N), Any_Boolean);\n+      Check_Unset_Reference (Condition (N));\n+   end Analyze_Goto_When_Statement;\n+\n    --------------------------\n    -- Analyze_If_Statement --\n    --------------------------"}, {"sha": "c32066513ac930a1ff4d6345678b95e531ceffaf", "filename": "gcc/ada/sem_ch5.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fsem_ch5.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fsem_ch5.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.ads?ref=eba1160fddffe86acd62411b79e0147ea96bd3f2", "patch": "@@ -33,6 +33,7 @@ package Sem_Ch5 is\n    procedure Analyze_Compound_Statement           (N : Node_Id);\n    procedure Analyze_Exit_Statement               (N : Node_Id);\n    procedure Analyze_Goto_Statement               (N : Node_Id);\n+   procedure Analyze_Goto_When_Statement          (N : Node_Id);\n    procedure Analyze_If_Statement                 (N : Node_Id);\n    procedure Analyze_Implicit_Label_Declaration   (N : Node_Id);\n    procedure Analyze_Iterator_Specification       (N : Node_Id);"}, {"sha": "d37f295d917682fce2115194a285dafcb56b8728", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=eba1160fddffe86acd62411b79e0147ea96bd3f2", "patch": "@@ -2614,6 +2614,18 @@ package body Sem_Ch6 is\n       Analyze_Dimension (N);\n    end Analyze_Return_Statement;\n \n+   -----------------------------------\n+   -- Analyze_Return_When_Statement --\n+   -----------------------------------\n+\n+   procedure Analyze_Return_When_Statement (N : Node_Id) is\n+   begin\n+      --  Verify the condition is a Boolean expression\n+\n+      Analyze_And_Resolve (Condition (N), Any_Boolean);\n+      Check_Unset_Reference (Condition (N));\n+   end Analyze_Return_When_Statement;\n+\n    -------------------------------------\n    -- Analyze_Simple_Return_Statement --\n    -------------------------------------"}, {"sha": "9579582763b3d811eba2a912af99e3ffaf26b5e7", "filename": "gcc/ada/sem_ch6.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fsem_ch6.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fsem_ch6.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.ads?ref=eba1160fddffe86acd62411b79e0147ea96bd3f2", "patch": "@@ -41,6 +41,7 @@ package Sem_Ch6 is\n    procedure Analyze_Operator_Symbol                 (N : Node_Id);\n    procedure Analyze_Parameter_Association           (N : Node_Id);\n    procedure Analyze_Procedure_Call                  (N : Node_Id);\n+   procedure Analyze_Return_When_Statement           (N : Node_Id);\n    procedure Analyze_Simple_Return_Statement         (N : Node_Id);\n    procedure Analyze_Subprogram_Declaration          (N : Node_Id);\n    procedure Analyze_Subprogram_Body                 (N : Node_Id);"}, {"sha": "446792911ddd3ae24596f5293c23b29c56564f13", "filename": "gcc/ada/sprint.adb", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fsprint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eba1160fddffe86acd62411b79e0147ea96bd3f2/gcc%2Fada%2Fsprint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsprint.adb?ref=eba1160fddffe86acd62411b79e0147ea96bd3f2", "patch": "@@ -2118,6 +2118,13 @@ package body Sprint is\n                Write_Indent;\n             end if;\n \n+         when N_Goto_When_Statement =>\n+            Write_Indent_Str_Sloc (\"goto \");\n+            Sprint_Node (Name (Node));\n+            Write_Str (\" when \");\n+            Sprint_Node (Condition (Node));\n+            Write_Char (';');\n+\n          when N_Handled_Sequence_Of_Statements =>\n             Set_Debug_Sloc;\n             Sprint_Indented_List (Statements (Node));\n@@ -3069,6 +3076,19 @@ package body Sprint is\n \n             Write_Char (';');\n \n+         when N_Raise_When_Statement =>\n+            Write_Indent_Str_Sloc (\"raise \");\n+            Sprint_Node (Name (Node));\n+            Write_Str (\" when \");\n+            Sprint_Node (Condition (Node));\n+\n+            if Present (Expression (Node)) then\n+               Write_Str_With_Col_Check_Sloc (\" with \");\n+               Sprint_Node (Expression (Node));\n+            end if;\n+\n+            Write_Char (';');\n+\n          when N_Range =>\n             Sprint_Node (Low_Bound (Node));\n             Write_Str_Sloc (\" .. \");\n@@ -3142,6 +3162,13 @@ package body Sprint is\n \n             Write_Char (';');\n \n+         when N_Return_When_Statement =>\n+            Write_Indent_Str_Sloc (\"return \");\n+            Sprint_Node (Expression (Node));\n+            Write_Str (\" when \");\n+            Sprint_Node (Condition (Node));\n+            Write_Char (';');\n+\n          when N_SCIL_Dispatch_Table_Tag_Init =>\n             Write_Indent_Str (\"[N_SCIL_Dispatch_Table_Tag_Init]\");\n "}]}