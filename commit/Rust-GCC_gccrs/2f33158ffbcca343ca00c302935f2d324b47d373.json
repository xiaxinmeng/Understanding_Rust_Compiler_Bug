{"sha": "2f33158ffbcca343ca00c302935f2d324b47d373", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmYzMzE1OGZmYmNjYTM0M2NhMDBjMzAyOTM1ZjJkMzI0YjQ3ZDM3Mw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-07-26T10:25:15Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-07-26T10:25:15Z"}, "message": "re PR tree-optimization/54098 (ICE on valid code)\n\n2012-07-26  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/54098\n\t* tree-vrp.c (vrp_visit_phi_node): Iterate once more if the\n\toriginal range was UNDEFINED.\n\n\t* gcc.dg/torture/pr54098.c: New testcase.\n\nFrom-SVN: r189885", "tree": {"sha": "b03aa96ec8b0cf57027f4f83da003d90bc8152c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b03aa96ec8b0cf57027f4f83da003d90bc8152c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f33158ffbcca343ca00c302935f2d324b47d373", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f33158ffbcca343ca00c302935f2d324b47d373", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f33158ffbcca343ca00c302935f2d324b47d373", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f33158ffbcca343ca00c302935f2d324b47d373/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "da7d74c253ffa8e7849c9186ef62234a02bc6855", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da7d74c253ffa8e7849c9186ef62234a02bc6855", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da7d74c253ffa8e7849c9186ef62234a02bc6855"}], "stats": {"total": 89, "additions": 87, "deletions": 2}, "files": [{"sha": "ec68693eba2e142d05573bde3ef9fdb885b5285a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f33158ffbcca343ca00c302935f2d324b47d373/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f33158ffbcca343ca00c302935f2d324b47d373/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2f33158ffbcca343ca00c302935f2d324b47d373", "patch": "@@ -1,3 +1,9 @@\n+2012-07-26  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/54098\n+\t* tree-vrp.c (vrp_visit_phi_node): Iterate once more if the\n+\toriginal range was UNDEFINED.\n+\n 2012-07-26  Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n \n \t* config/arm/neon.ml (ops): Fix regexp for vld1Q_dups64 and"}, {"sha": "3092b9072bfafe1d6c6c05274c6850f1c6210b72", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f33158ffbcca343ca00c302935f2d324b47d373/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f33158ffbcca343ca00c302935f2d324b47d373/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2f33158ffbcca343ca00c302935f2d324b47d373", "patch": "@@ -1,3 +1,8 @@\n+2012-07-26  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/54098\n+\t* gcc.dg/torture/pr54098.c: New testcase.\n+\n 2012-07-26  Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n \n \t* gcc.target/arm/neon/vld1Q_dupu64.c: Regenerate."}, {"sha": "74398b689cd4e04cbc820088fa8c6d11278c1bd4", "filename": "gcc/testsuite/gcc.dg/torture/pr54098.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f33158ffbcca343ca00c302935f2d324b47d373/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr54098.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f33158ffbcca343ca00c302935f2d324b47d373/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr54098.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr54098.c?ref=2f33158ffbcca343ca00c302935f2d324b47d373", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do compile } */\n+\n+extern int printf(const char *, ...);\n+struct list_head {\n+\tstruct list_head *next, *prev;\n+};\n+struct resource {\n+\tunsigned long long start;\n+\tunsigned long long end;\n+\tunsigned long flags;\n+\tstruct resource *parent, *sibling, *child;\n+};\n+struct pci_dev {\n+\tstruct list_head bus_list;\n+\tstruct resource resource[12];\n+};\n+struct pci_bus {\n+\tstruct list_head devices;\n+\tunsigned char secondary;\n+\tunsigned char subordinate;\n+};\n+struct resource *pci_bus_resource_n(const struct pci_bus *bus, int n);\n+static struct resource *find_free_bus_resource(struct pci_bus *bus, unsigned long type) {\n+\tint i;\n+\tstruct resource *r;\n+\tunsigned long type_mask = 0x00000100 | 0x00000200 | 0x00002000;\n+\tfor (i = 0; (r = pci_bus_resource_n(bus, i)) || i < 4; i++) {\n+\t\tif (r && (r->flags & type_mask) == type && !r->parent) return r;\n+\t}\n+\treturn ((void *)0);\n+}\n+static unsigned long long calculate_memsize(unsigned long long size, unsigned long long min_size, unsigned long long size1, unsigned long long old_size, unsigned long long align) {\n+\tif (old_size == 1 ) old_size = 0;\n+\tif (size < old_size) size = old_size;\n+\treturn size;\n+}\n+void pbus_size_mem(struct pci_bus *bus, unsigned long mask, unsigned long type, unsigned long long min_size, unsigned long long add_size, void *realloc_head) {\n+\tstruct pci_dev *dev;\n+\tunsigned long long min_align, align, size, size0, size1;\n+\tint order;\n+\tstruct resource *b_res = find_free_bus_resource(bus, type);\n+\tunsigned long long children_add_size = 0;\n+\tif (!b_res) return;\n+\tfor (dev = ({\n+\t\t\t\tconst typeof( ((typeof(*dev) *)0)->bus_list ) *__mptr = ((&bus->devices)->next);\n+\t\t\t\t(typeof(*dev) *)( (char *)__mptr - __builtin_offsetof(typeof(*dev),bus_list) );\n+\t\t\t\t}\n+\t\t   );\n+\t\t\t&dev->bus_list != (&bus->devices);\n+\t\t\tdev = ({\n+\t\t\t\tconst typeof( ((typeof(*dev) *)0)->bus_list ) *__mptr = (dev->bus_list.next);\n+\t\t\t\t(typeof(*dev) *)( (char *)__mptr - __builtin_offsetof(typeof(*dev),bus_list) );\n+\t\t\t\t}\n+\t\t\t      )) {\n+\t\tint i;\n+\t\tfor (i = 0; i < 12; i++) {\n+\t\t\tstruct resource *r = &dev->resource[i];\n+\t\t\tunsigned long long r_size;\n+\t\t\tif (r->parent || (r->flags & mask) != type) continue;\n+\t\t\tr_size = r->end - r->start + 1;\n+\t\t\tif (order > 11) {\n+\t\t\t\tprintf(\"%d: %pR %#llx\\n\", i, r, (unsigned long long) align);\n+\t\t\t}\n+\t\t\tsize += r_size;\n+\t\t}\n+\t}\n+\tif (children_add_size > add_size) add_size = children_add_size;\n+\tsize1 = (!realloc_head || (realloc_head && !add_size)) ? size0 : calculate_memsize(size, min_size+add_size, 0, b_res->end - b_res->start + 1, min_align);\n+\tif (!size0 && !size1) {\n+\t\tprintf(\"%pR %02x-%02x\\n\", b_res, bus->secondary, bus->subordinate);\n+\t}\n+}"}, {"sha": "1a4c7c9f3afebba01261cd0d3a44cf0f358e98d2", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f33158ffbcca343ca00c302935f2d324b47d373/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f33158ffbcca343ca00c302935f2d324b47d373/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=2f33158ffbcca343ca00c302935f2d324b47d373", "patch": "@@ -7684,10 +7684,12 @@ vrp_visit_phi_node (gimple phi)\n      when the new value is slightly bigger or smaller than the\n      previous one.  We don't do this if we have seen a new executable\n      edge; this helps us avoid an overflow infinity for conditionals\n-     which are not in a loop.  */\n+     which are not in a loop.  If the old value-range was VR_UNDEFINED\n+     use the updated range and iterate one more time.  */\n   if (edges > 0\n       && gimple_phi_num_args (phi) > 1\n-      && edges == old_edges)\n+      && edges == old_edges\n+      && lhs_vr->type != VR_UNDEFINED)\n     {\n       int cmp_min = compare_values (lhs_vr->min, vr_result.min);\n       int cmp_max = compare_values (lhs_vr->max, vr_result.max);"}]}