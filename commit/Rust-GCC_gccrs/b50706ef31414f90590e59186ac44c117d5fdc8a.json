{"sha": "b50706ef31414f90590e59186ac44c117d5fdc8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjUwNzA2ZWYzMTQxNGY5MDU5MGU1OTE4NmFjNDRjMTE3ZDVmZGM4YQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-11-07T18:53:05Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-11-30T14:16:15Z"}, "message": "[Ada] Confusion in Transform_Function_Array and internal subprograms\n\ngcc/ada/\n\n\t* ali-util.adb (Get_File_Checksum): Remove dead code.\n\t* exp_ch4.adb (Expand_Boolean_Operator, Expand_N_Op_Not,\n\tMake_Boolean_Array_Op): Take Transform_Function_Array into\n\taccount.\n\t* exp_ch6.adb (Expand_Call_Helper): Update comment. Code\n\tcleanup.\n\t* exp_util.adb (Build_Procedure_Form): Use new predefined name\n\tName_UP_RESULT.\n\t* snames.ads-tmpl (Name_UP_RESULT): New predefined name.  Code\n\tcleanup: remove unused names from the project parser, moved to\n\tgprbuild sources.\n\t* xsnamest.adb: Add support for uppercase names.", "tree": {"sha": "46f821a998aa83d30f2a1502a4ab9932aa7febe6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46f821a998aa83d30f2a1502a4ab9932aa7febe6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b50706ef31414f90590e59186ac44c117d5fdc8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b50706ef31414f90590e59186ac44c117d5fdc8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b50706ef31414f90590e59186ac44c117d5fdc8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b50706ef31414f90590e59186ac44c117d5fdc8a/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86b747a553784eb0675406c23f4789afe76eadab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86b747a553784eb0675406c23f4789afe76eadab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86b747a553784eb0675406c23f4789afe76eadab"}], "stats": {"total": 451, "additions": 206, "deletions": 245}, "files": [{"sha": "7dabbfb7fa28ec24dcec12cded6405a3f7c7a92a", "filename": "gcc/ada/ali-util.adb", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b50706ef31414f90590e59186ac44c117d5fdc8a/gcc%2Fada%2Fali-util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b50706ef31414f90590e59186ac44c117d5fdc8a/gcc%2Fada%2Fali-util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali-util.adb?ref=b50706ef31414f90590e59186ac44c117d5fdc8a", "patch": "@@ -31,7 +31,6 @@ with Osint;   use Osint;\n with Scans;   use Scans;\n with Scng;\n with Sinput.C;\n-with Snames;  use Snames;\n with Stringt;\n with Styleg;\n \n@@ -154,15 +153,6 @@ package body ALI.Util is\n \n       Scanner.Initialize_Scanner (Source_Index);\n \n-      --  Make sure that the project language reserved words are not\n-      --  recognized as reserved words, but as identifiers. The byte info for\n-      --  those names have been set if we are in gnatmake.\n-\n-      Set_Name_Table_Byte (Name_Project,          0);\n-      Set_Name_Table_Byte (Name_Extends,          0);\n-      Set_Name_Table_Byte (Name_External,         0);\n-      Set_Name_Table_Byte (Name_External_As_List, 0);\n-\n       --  Scan the complete file to compute its checksum\n \n       loop"}, {"sha": "d65dac9e5437af94a49d5c9b156423bc173e4094", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 191, "deletions": 54, "changes": 245, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b50706ef31414f90590e59186ac44c117d5fdc8a/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b50706ef31414f90590e59186ac44c117d5fdc8a/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=b50706ef31414f90590e59186ac44c117d5fdc8a", "patch": "@@ -2183,21 +2183,54 @@ package body Exp_Ch4 is\n          then\n             return;\n          else\n-\n             Func_Body := Make_Boolean_Array_Op (Etype (L), N);\n             Func_Name := Defining_Unit_Name (Specification (Func_Body));\n             Insert_Action (N, Func_Body);\n \n             --  Now rewrite the expression with a call\n \n-            Rewrite (N,\n-              Make_Function_Call (Loc,\n-                Name                   => New_Occurrence_Of (Func_Name, Loc),\n-                Parameter_Associations =>\n-                  New_List (\n-                    L,\n-                    Make_Type_Conversion\n-                      (Loc, New_Occurrence_Of (Etype (L), Loc), R))));\n+            if Transform_Function_Array then\n+               declare\n+                  Temp_Id : constant Entity_Id := Make_Temporary (Loc, 'T');\n+                  Call    : Node_Id;\n+                  Decl    : Node_Id;\n+\n+               begin\n+                  --  Generate:\n+                  --    Temp : ...;\n+\n+                  Decl :=\n+                    Make_Object_Declaration (Loc,\n+                      Defining_Identifier => Temp_Id,\n+                      Object_Definition   =>\n+                        New_Occurrence_Of (Etype (L), Loc));\n+\n+                  --  Generate:\n+                  --    Proc_Call (L, R, Temp);\n+\n+                  Call :=\n+                    Make_Procedure_Call_Statement (Loc,\n+                      Name => New_Occurrence_Of (Func_Name, Loc),\n+                      Parameter_Associations =>\n+                        New_List (\n+                          L,\n+                          Make_Type_Conversion\n+                            (Loc, New_Occurrence_Of (Etype (L), Loc), R),\n+                          New_Occurrence_Of (Temp_Id, Loc)));\n+\n+                  Insert_Actions (Parent (N), New_List (Decl, Call));\n+                  Rewrite (N, New_Occurrence_Of (Temp_Id, Loc));\n+               end;\n+            else\n+               Rewrite (N,\n+                 Make_Function_Call (Loc,\n+                   Name => New_Occurrence_Of (Func_Name, Loc),\n+                   Parameter_Associations =>\n+                     New_List (\n+                       L,\n+                       Make_Type_Conversion\n+                         (Loc, New_Occurrence_Of (Etype (L), Loc), R))));\n+            end if;\n \n             Analyze_And_Resolve (N, Typ);\n          end if;\n@@ -9998,12 +10031,21 @@ package body Exp_Ch4 is\n    --       return B;\n    --     end Nnnn;\n \n+   --  or in the case of Transform_Function_Array:\n+\n+   --     procedure Nnnn (A : arr; RESULT : out arr) is\n+   --     begin\n+   --       for J in a'range loop\n+   --          RESULT (J) := not A (J);\n+   --       end loop;\n+   --     end Nnnn;\n+\n    --  Here arr is the actual subtype of the parameter (and hence always\n-   --  constrained). Then we replace the not with a call to this function.\n+   --  constrained). Then we replace the not with a call to this subprogram.\n \n    procedure Expand_N_Op_Not (N : Node_Id) is\n       Loc  : constant Source_Ptr := Sloc (N);\n-      Typ  : constant Entity_Id  := Etype (N);\n+      Typ  : constant Entity_Id  := Etype (Right_Opnd (N));\n       Opnd : Node_Id;\n       Arr  : Entity_Id;\n       A    : Entity_Id;\n@@ -10099,7 +10141,13 @@ package body Exp_Ch4 is\n       end if;\n \n       A := Make_Defining_Identifier (Loc, Name_uA);\n-      B := Make_Defining_Identifier (Loc, Name_uB);\n+\n+      if Transform_Function_Array then\n+         B := Make_Defining_Identifier (Loc, Name_UP_RESULT);\n+      else\n+         B := Make_Defining_Identifier (Loc, Name_uB);\n+      end if;\n+\n       J := Make_Defining_Identifier (Loc, Name_uJ);\n \n       A_J :=\n@@ -10134,33 +10182,82 @@ package body Exp_Ch4 is\n       Func_Name := Make_Temporary (Loc, 'N');\n       Set_Is_Inlined (Func_Name);\n \n-      Insert_Action (N,\n-        Make_Subprogram_Body (Loc,\n-          Specification =>\n-            Make_Function_Specification (Loc,\n-              Defining_Unit_Name => Func_Name,\n-              Parameter_Specifications => New_List (\n-                Make_Parameter_Specification (Loc,\n-                  Defining_Identifier => A,\n-                  Parameter_Type      => New_Occurrence_Of (Typ, Loc))),\n-              Result_Definition => New_Occurrence_Of (Typ, Loc)),\n+      if Transform_Function_Array then\n+         Insert_Action (N,\n+           Make_Subprogram_Body (Loc,\n+             Specification =>\n+               Make_Procedure_Specification (Loc,\n+                 Defining_Unit_Name => Func_Name,\n+                 Parameter_Specifications => New_List (\n+                   Make_Parameter_Specification (Loc,\n+                     Defining_Identifier => A,\n+                     Parameter_Type      => New_Occurrence_Of (Typ, Loc)),\n+                   Make_Parameter_Specification (Loc,\n+                     Defining_Identifier => B,\n+                     Out_Present         => True,\n+                     Parameter_Type      => New_Occurrence_Of (Typ, Loc)))),\n+\n+             Declarations => New_List,\n+\n+             Handled_Statement_Sequence =>\n+               Make_Handled_Sequence_Of_Statements (Loc,\n+                 Statements => New_List (Loop_Statement))));\n \n-          Declarations => New_List (\n-            Make_Object_Declaration (Loc,\n-              Defining_Identifier => B,\n-              Object_Definition   => New_Occurrence_Of (Arr, Loc))),\n+         declare\n+            Temp_Id : constant Entity_Id := Make_Temporary (Loc, 'T');\n+            Call    : Node_Id;\n+            Decl    : Node_Id;\n \n-          Handled_Statement_Sequence =>\n-            Make_Handled_Sequence_Of_Statements (Loc,\n-              Statements => New_List (\n-                Loop_Statement,\n-                Make_Simple_Return_Statement (Loc,\n-                  Expression => Make_Identifier (Loc, Chars (B)))))));\n+         begin\n+            --  Generate:\n+            --    Temp : ...;\n \n-      Rewrite (N,\n-        Make_Function_Call (Loc,\n-          Name                   => New_Occurrence_Of (Func_Name, Loc),\n-          Parameter_Associations => New_List (Opnd)));\n+            Decl :=\n+              Make_Object_Declaration (Loc,\n+                Defining_Identifier => Temp_Id,\n+                Object_Definition   => New_Occurrence_Of (Typ, Loc));\n+\n+            --  Generate:\n+            --    Proc_Call (Opnd, Temp);\n+\n+            Call :=\n+              Make_Procedure_Call_Statement (Loc,\n+                Name => New_Occurrence_Of (Func_Name, Loc),\n+                Parameter_Associations =>\n+                  New_List (Opnd, New_Occurrence_Of (Temp_Id, Loc)));\n+\n+            Insert_Actions (Parent (N), New_List (Decl, Call));\n+            Rewrite (N, New_Occurrence_Of (Temp_Id, Loc));\n+         end;\n+      else\n+         Insert_Action (N,\n+           Make_Subprogram_Body (Loc,\n+             Specification =>\n+               Make_Function_Specification (Loc,\n+                 Defining_Unit_Name => Func_Name,\n+                 Parameter_Specifications => New_List (\n+                   Make_Parameter_Specification (Loc,\n+                     Defining_Identifier => A,\n+                     Parameter_Type      => New_Occurrence_Of (Typ, Loc))),\n+                 Result_Definition => New_Occurrence_Of (Typ, Loc)),\n+\n+             Declarations => New_List (\n+               Make_Object_Declaration (Loc,\n+                 Defining_Identifier => B,\n+                 Object_Definition   => New_Occurrence_Of (Arr, Loc))),\n+\n+             Handled_Statement_Sequence =>\n+               Make_Handled_Sequence_Of_Statements (Loc,\n+                 Statements => New_List (\n+                   Loop_Statement,\n+                   Make_Simple_Return_Statement (Loc,\n+                     Expression => Make_Identifier (Loc, Chars (B)))))));\n+\n+         Rewrite (N,\n+           Make_Function_Call (Loc,\n+             Name                   => New_Occurrence_Of (Func_Name, Loc),\n+             Parameter_Associations => New_List (Opnd)));\n+      end if;\n \n       Analyze_And_Resolve (N, Typ);\n    end Expand_N_Op_Not;\n@@ -13898,6 +13995,15 @@ package body Exp_Ch4 is\n    --       return C;\n    --    end Annn;\n \n+   --    or in the case of Transform_Function_Array:\n+\n+   --    procedure Annn (A : typ; B: typ; RESULT: out typ) is\n+   --    begin\n+   --       for J in A'range loop\n+   --          RESULT (J) := A (J) op B (J);\n+   --       end loop;\n+   --    end Annn;\n+\n    --  Here typ is the boolean array type\n \n    function Make_Boolean_Array_Op\n@@ -13908,9 +14014,10 @@ package body Exp_Ch4 is\n \n       A : constant Entity_Id := Make_Defining_Identifier (Loc, Name_uA);\n       B : constant Entity_Id := Make_Defining_Identifier (Loc, Name_uB);\n-      C : constant Entity_Id := Make_Defining_Identifier (Loc, Name_uC);\n       J : constant Entity_Id := Make_Defining_Identifier (Loc, Name_uJ);\n \n+      C   : Entity_Id;\n+\n       A_J : Node_Id;\n       B_J : Node_Id;\n       C_J : Node_Id;\n@@ -13922,6 +14029,12 @@ package body Exp_Ch4 is\n       Loop_Statement : Node_Id;\n \n    begin\n+      if Transform_Function_Array then\n+         C := Make_Defining_Identifier (Loc, Name_UP_RESULT);\n+      else\n+         C := Make_Defining_Identifier (Loc, Name_uC);\n+      end if;\n+\n       A_J :=\n         Make_Indexed_Component (Loc,\n           Prefix      => New_Occurrence_Of (A, Loc),\n@@ -13984,28 +14097,52 @@ package body Exp_Ch4 is\n           Defining_Identifier => B,\n           Parameter_Type      => New_Occurrence_Of (Typ, Loc)));\n \n+      if Transform_Function_Array then\n+         Append_To (Formals,\n+           Make_Parameter_Specification (Loc,\n+             Defining_Identifier => C,\n+             Out_Present         => True,\n+             Parameter_Type      => New_Occurrence_Of (Typ, Loc)));\n+      end if;\n+\n       Func_Name := Make_Temporary (Loc, 'A');\n       Set_Is_Inlined (Func_Name);\n \n-      Func_Body :=\n-        Make_Subprogram_Body (Loc,\n-          Specification =>\n-            Make_Function_Specification (Loc,\n-              Defining_Unit_Name       => Func_Name,\n-              Parameter_Specifications => Formals,\n-              Result_Definition        => New_Occurrence_Of (Typ, Loc)),\n+      if Transform_Function_Array then\n+         Func_Body :=\n+           Make_Subprogram_Body (Loc,\n+             Specification =>\n+               Make_Procedure_Specification (Loc,\n+                 Defining_Unit_Name       => Func_Name,\n+                 Parameter_Specifications => Formals),\n \n-          Declarations => New_List (\n-            Make_Object_Declaration (Loc,\n-              Defining_Identifier => C,\n-              Object_Definition   => New_Occurrence_Of (Typ, Loc))),\n+             Declarations => New_List,\n \n-          Handled_Statement_Sequence =>\n-            Make_Handled_Sequence_Of_Statements (Loc,\n-              Statements => New_List (\n-                Loop_Statement,\n-                Make_Simple_Return_Statement (Loc,\n-                  Expression => New_Occurrence_Of (C, Loc)))));\n+             Handled_Statement_Sequence =>\n+               Make_Handled_Sequence_Of_Statements (Loc,\n+                 Statements => New_List (Loop_Statement)));\n+\n+      else\n+         Func_Body :=\n+           Make_Subprogram_Body (Loc,\n+             Specification =>\n+               Make_Function_Specification (Loc,\n+                 Defining_Unit_Name       => Func_Name,\n+                 Parameter_Specifications => Formals,\n+                 Result_Definition        => New_Occurrence_Of (Typ, Loc)),\n+\n+             Declarations => New_List (\n+               Make_Object_Declaration (Loc,\n+                 Defining_Identifier => C,\n+                 Object_Definition   => New_Occurrence_Of (Typ, Loc))),\n+\n+             Handled_Statement_Sequence =>\n+               Make_Handled_Sequence_Of_Statements (Loc,\n+                 Statements => New_List (\n+                   Loop_Statement,\n+                   Make_Simple_Return_Statement (Loc,\n+                     Expression => New_Occurrence_Of (C, Loc)))));\n+      end if;\n \n       return Func_Body;\n    end Make_Boolean_Array_Op;"}, {"sha": "f5a1d666b6cf42bc33928f841a2758f79b692eee", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b50706ef31414f90590e59186ac44c117d5fdc8a/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b50706ef31414f90590e59186ac44c117d5fdc8a/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=b50706ef31414f90590e59186ac44c117d5fdc8a", "patch": "@@ -3637,9 +3637,9 @@ package body Exp_Ch6 is\n                --  For internally generated calls ensure that they reference\n                --  the entity of the spec of the called function (needed since\n                --  the expander may generate calls using the entity of their\n-               --  body). See for example Expand_Boolean_Operator().\n+               --  body).\n \n-               if not (Comes_From_Source (Call_Node))\n+               if not Comes_From_Source (Call_Node)\n                  and then Nkind (Unit_Declaration_Node (Func_Id)) =\n                             N_Subprogram_Body\n                then"}, {"sha": "6d043fd1a624ca00488716ee6b840f2e0289b282", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b50706ef31414f90590e59186ac44c117d5fdc8a/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b50706ef31414f90590e59186ac44c117d5fdc8a/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=b50706ef31414f90590e59186ac44c117d5fdc8a", "patch": "@@ -3712,12 +3712,10 @@ package body Exp_Util is\n \n       --  Add an extra out parameter to carry the function result\n \n-      Name_Len := 6;\n-      Name_Buffer (1 .. Name_Len) := \"RESULT\";\n       Append_To (Proc_Formals,\n         Make_Parameter_Specification (Loc,\n           Defining_Identifier =>\n-            Make_Defining_Identifier (Loc, Chars => Name_Find),\n+            Make_Defining_Identifier (Loc, Name_UP_RESULT),\n           Out_Present         => True,\n           Parameter_Type      => New_Occurrence_Of (Etype (Subp), Loc)));\n "}, {"sha": "9ad2f55e41afb19460654453f2d3e540359e6c8a", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 6, "deletions": 173, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b50706ef31414f90590e59186ac44c117d5fdc8a/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b50706ef31414f90590e59186ac44c117d5fdc8a/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=b50706ef31414f90590e59186ac44c117d5fdc8a", "patch": "@@ -757,8 +757,9 @@ package Snames is\n    Name_DLL                            : constant Name_Id := N + $;\n    Name_Win32                          : constant Name_Id := N + $;\n \n-   --  Other special names used in processing attributes and pragmas\n+   --  Other special names used in processing attributes, aspects, and pragmas\n \n+   Name_Aggregate                      : constant Name_Id := N + $;\n    Name_Allow                          : constant Name_Id := N + $;\n    Name_Amount                         : constant Name_Id := N + $;\n    Name_As_Is                          : constant Name_Id := N + $;\n@@ -845,6 +846,7 @@ package Snames is\n    Name_No_Vector                      : constant Name_Id := N + $;\n    Name_Nominal                        : constant Name_Id := N + $;\n    Name_Non_Volatile                   : constant Name_Id := N + $;\n+   Name_None                           : constant Name_Id := N + $;\n    Name_On                             : constant Name_Id := N + $;\n    Name_Optional                       : constant Name_Id := N + $;\n    Name_Policy                         : constant Name_Id := N + $;\n@@ -1359,186 +1361,17 @@ package Snames is\n \n    Name_Raise_Exception                  : constant Name_Id := N + $;\n \n-   --  Additional reserved words and identifiers used in GNAT Project Files\n-   --  Note that Name_External is already previously declared.\n-\n-   --  Names with a -- GB annotation are only used in gprbuild or gprclean\n-\n-   Name_Active                           : constant Name_Id := N + $;\n-   Name_Aggregate                        : constant Name_Id := N + $;\n-   Name_Archive_Builder                  : constant Name_Id := N + $;\n-   Name_Archive_Builder_Append_Option    : constant Name_Id := N + $;\n-   Name_Archive_Indexer                  : constant Name_Id := N + $;\n-   Name_Archive_Suffix                   : constant Name_Id := N + $;\n-   Name_Artifacts                        : constant Name_Id := N + $;\n-   Name_Artifacts_In_Exec_Dir            : constant Name_Id := N + $; -- GB\n-   Name_Artifacts_In_Object_Dir          : constant Name_Id := N + $; -- GB\n-   Name_Binder                           : constant Name_Id := N + $;\n-   Name_Body_Suffix                      : constant Name_Id := N + $;\n-   Name_Builder                          : constant Name_Id := N + $;\n-   Name_Clean                            : constant Name_Id := N + $;\n-   Name_Compiler                         : constant Name_Id := N + $;\n-   Name_Compiler_Command                 : constant Name_Id := N + $; -- GB\n-   Name_Config_Body_File_Name            : constant Name_Id := N + $;\n-   Name_Config_Body_File_Name_Index      : constant Name_Id := N + $;\n-   Name_Config_Body_File_Name_Pattern    : constant Name_Id := N + $;\n-   Name_Config_File_Switches             : constant Name_Id := N + $;\n-   Name_Config_File_Unique               : constant Name_Id := N + $;\n-   Name_Config_Spec_File_Name            : constant Name_Id := N + $;\n-   Name_Config_Spec_File_Name_Index      : constant Name_Id := N + $;\n-   Name_Config_Spec_File_Name_Pattern    : constant Name_Id := N + $;\n-   Name_Configuration                    : constant Name_Id := N + $;\n-   Name_Cross_Reference                  : constant Name_Id := N + $;\n-   Name_Default_Language                 : constant Name_Id := N + $;\n-   Name_Default_Switches                 : constant Name_Id := N + $;\n-   Name_Dependency_Driver                : constant Name_Id := N + $;\n-   Name_Dependency_Kind                  : constant Name_Id := N + $;\n-   Name_Dependency_Switches              : constant Name_Id := N + $;\n-   Name_Driver                           : constant Name_Id := N + $;\n-   Name_Excluded_Source_Dirs             : constant Name_Id := N + $;\n-   Name_Excluded_Source_Files            : constant Name_Id := N + $;\n-   Name_Excluded_Source_List_File        : constant Name_Id := N + $;\n-   Name_Exec_Dir                         : constant Name_Id := N + $;\n-   Name_Exec_Subdir                      : constant Name_Id := N + $;\n-   Name_Excluded_Patterns                : constant Name_Id := N + $;\n-   Name_Executable                       : constant Name_Id := N + $;\n-   Name_Executable_Suffix                : constant Name_Id := N + $;\n-   Name_Extends                          : constant Name_Id := N + $;\n-   Name_External_As_List                 : constant Name_Id := N + $;\n-   Name_Externally_Built                 : constant Name_Id := N + $;\n-   Name_Finder                           : constant Name_Id := N + $;\n-   Name_Global_Compilation_Switches      : constant Name_Id := N + $;\n-   Name_Global_Configuration_Pragmas     : constant Name_Id := N + $;\n-   Name_Global_Config_File               : constant Name_Id := N + $; -- GB\n-   Name_Gnatls                           : constant Name_Id := N + $;\n-   Name_Gnatstub                         : constant Name_Id := N + $;\n-   Name_Gnu                              : constant Name_Id := N + $;\n-   Name_Ide                              : constant Name_Id := N + $;\n-   Name_Ignore_Source_Sub_Dirs           : constant Name_Id := N + $;\n-   Name_Implementation                   : constant Name_Id := N + $;\n-   Name_Implementation_Exceptions        : constant Name_Id := N + $;\n-   Name_Implementation_Suffix            : constant Name_Id := N + $;\n-   Name_Included_Artifact_Patterns       : constant Name_Id := N + $;\n-   Name_Included_Patterns                : constant Name_Id := N + $;\n-   Name_Include_Switches                 : constant Name_Id := N + $;\n-   Name_Include_Path                     : constant Name_Id := N + $;\n-   Name_Include_Path_File                : constant Name_Id := N + $;\n-   Name_Inherit_Source_Path              : constant Name_Id := N + $;\n-   Name_Install                          : constant Name_Id := N + $;\n-   Name_Install_Name                     : constant Name_Id := N + $;\n-   Name_Languages                        : constant Name_Id := N + $;\n-   Name_Language_Kind                    : constant Name_Id := N + $;\n-   Name_Leading_Library_Options          : constant Name_Id := N + $;\n-   Name_Leading_Required_Switches        : constant Name_Id := N + $;\n-   Name_Leading_Switches                 : constant Name_Id := N + $;\n-   Name_Lib_Subdir                       : constant Name_Id := N + $;\n-   Name_Link_Lib_Subdir                  : constant Name_Id := N + $;\n-   Name_Library                          : constant Name_Id := N + $;\n-   Name_Library_Ali_Dir                  : constant Name_Id := N + $;\n-   Name_Library_Auto_Init                : constant Name_Id := N + $;\n-   Name_Library_Auto_Init_Supported      : constant Name_Id := N + $;\n-   Name_Library_Builder                  : constant Name_Id := N + $;\n-   Name_Library_Dir                      : constant Name_Id := N + $;\n-   Name_Library_GCC                      : constant Name_Id := N + $;\n-   Name_Library_Install_Name_Option      : constant Name_Id := N + $;\n-   Name_Library_Interface                : constant Name_Id := N + $;\n-   Name_Library_Kind                     : constant Name_Id := N + $;\n-   Name_Library_Name                     : constant Name_Id := N + $;\n-   Name_Library_Major_Minor_Id_Supported : constant Name_Id := N + $;\n-   Name_Library_Options                  : constant Name_Id := N + $;\n-   Name_Library_Partial_Linker           : constant Name_Id := N + $;\n-   Name_Library_Reference_Symbol_File    : constant Name_Id := N + $;\n-   Name_Library_Rpath_Options            : constant Name_Id := N + $; -- GB\n-   Name_Library_Standalone               : constant Name_Id := N + $;\n-   Name_Library_Encapsulated_Options     : constant Name_Id := N + $; -- GB\n-   Name_Library_Encapsulated_Supported   : constant Name_Id := N + $; -- GB\n-   Name_Library_Src_Dir                  : constant Name_Id := N + $;\n-   Name_Library_Support                  : constant Name_Id := N + $;\n-   Name_Library_Symbol_File              : constant Name_Id := N + $;\n-   Name_Library_Symbol_Policy            : constant Name_Id := N + $;\n-   Name_Library_Version                  : constant Name_Id := N + $;\n-   Name_Library_Version_Switches         : constant Name_Id := N + $;\n-   Name_Linker                           : constant Name_Id := N + $;\n-   Name_Linker_Executable_Option         : constant Name_Id := N + $;\n-   Name_Linker_Lib_Dir_Option            : constant Name_Id := N + $;\n-   Name_Linker_Lib_Name_Option           : constant Name_Id := N + $;\n-   Name_Local_Config_File                : constant Name_Id := N + $; -- GB\n-   Name_Local_Configuration_Pragmas      : constant Name_Id := N + $;\n-   Name_Locally_Removed_Files            : constant Name_Id := N + $;\n-   Name_Map_File_Option                  : constant Name_Id := N + $;\n-   Name_Mapping_File_Switches            : constant Name_Id := N + $;\n-   Name_Mapping_Spec_Suffix              : constant Name_Id := N + $;\n-   Name_Mapping_Body_Suffix              : constant Name_Id := N + $;\n-   Name_Max_Command_Line_Length          : constant Name_Id := N + $;\n-   Name_Metrics                          : constant Name_Id := N + $;\n-   Name_Multi_Unit_Object_Separator      : constant Name_Id := N + $;\n-   Name_Multi_Unit_Switches              : constant Name_Id := N + $;\n-   Name_Naming                           : constant Name_Id := N + $;\n-   Name_None                             : constant Name_Id := N + $;\n-   Name_Object_Artifact_Extensions       : constant Name_Id := N + $;\n-   Name_Object_File_Suffix               : constant Name_Id := N + $;\n-   Name_Object_File_Switches             : constant Name_Id := N + $;\n-   Name_Object_Generated                 : constant Name_Id := N + $;\n-   Name_Object_List                      : constant Name_Id := N + $;\n-   Name_Object_Path_Switches             : constant Name_Id := N + $;\n-   Name_Objects_Linked                   : constant Name_Id := N + $;\n-   Name_Objects_Path                     : constant Name_Id := N + $;\n-   Name_Objects_Path_File                : constant Name_Id := N + $;\n-   Name_Object_Dir                       : constant Name_Id := N + $;\n-   Name_Option_List                      : constant Name_Id := N + $;\n-   Name_Path_Syntax                      : constant Name_Id := N + $;\n-   Name_Pic_Option                       : constant Name_Id := N + $;\n-   Name_Pretty_Printer                   : constant Name_Id := N + $;\n-   Name_Prefix                           : constant Name_Id := N + $;\n-   Name_Project                          : constant Name_Id := N + $;\n-   Name_Project_Dir                      : constant Name_Id := N + $;\n-   Name_Project_Files                    : constant Name_Id := N + $;\n-   Name_Project_Path                     : constant Name_Id := N + $;\n-   Name_Project_Subdir                   : constant Name_Id := N + $;\n-   Name_Remote                           : constant Name_Id := N + $;\n-   Name_Required_Artifacts               : constant Name_Id := N + $;\n-   Name_Response_File_Format             : constant Name_Id := N + $;\n-   Name_Response_File_Switches           : constant Name_Id := N + $;\n-   Name_Root_Dir                         : constant Name_Id := N + $;\n-   Name_Roots                            : constant Name_Id := N + $; -- GB\n-   Name_Required_Switches                : constant Name_Id := N + $;\n-   Name_Run_Path_Option                  : constant Name_Id := N + $;\n-   Name_Run_Path_Origin                  : constant Name_Id := N + $;\n-   Name_Separate_Run_Path_Options        : constant Name_Id := N + $;\n-   Name_Shared_Library_Minimum_Switches  : constant Name_Id := N + $;\n-   Name_Shared_Library_Prefix            : constant Name_Id := N + $;\n-   Name_Shared_Library_Suffix            : constant Name_Id := N + $;\n-   Name_Separate_Suffix                  : constant Name_Id := N + $;\n-   Name_Source_Artifact_Extensions       : constant Name_Id := N + $;\n-   Name_Source_Dirs                      : constant Name_Id := N + $;\n-   Name_Source_File_Switches             : constant Name_Id := N + $;\n-   Name_Source_Files                     : constant Name_Id := N + $;\n-   Name_Source_List_File                 : constant Name_Id := N + $;\n-   Name_Sources_Subdir                   : constant Name_Id := N + $;\n-   Name_Spec                             : constant Name_Id := N + $;\n-   Name_Spec_Suffix                      : constant Name_Id := N + $;\n-   Name_Specification                    : constant Name_Id := N + $;\n-   Name_Specification_Exceptions         : constant Name_Id := N + $;\n-   Name_Specification_Suffix             : constant Name_Id := N + $;\n-   Name_Stack                            : constant Name_Id := N + $;\n-   Name_Switches                         : constant Name_Id := N + $;\n-   Name_Symbolic_Link_Supported          : constant Name_Id := N + $;\n-   Name_Synchronize                      : constant Name_Id := N + $;\n-   Name_Toolchain_Description            : constant Name_Id := N + $;\n-   Name_Toolchain_Version                : constant Name_Id := N + $;\n-   Name_Trailing_Required_Switches       : constant Name_Id := N + $;\n-   Name_Trailing_Switches                : constant Name_Id := N + $;\n-   Name_Runtime_Library_Dir              : constant Name_Id := N + $;\n-   Name_Runtime_Source_Dir               : constant Name_Id := N + $;\n-\n    --  Additional names used by the Repinfo unit\n \n    Name_Discriminant                     : constant Name_Id := N + $;\n    Name_Operands                         : constant Name_Id := N + $;\n \n    --  Other miscellaneous names used in front end\n+   --  Note that the UP_ prefix means use the rest of the name in uppercase,\n+   --  e.g. Name_UP_RESULT corresponds to the name \"RESULT\".\n \n    Name_Unaligned_Valid                  : constant Name_Id := N + $;\n+   Name_UP_RESULT                        : constant Name_Id := N + $;\n    Name_Suspension_Object                : constant Name_Id := N + $;\n    Name_Synchronous_Task_Control         : constant Name_Id := N + $;\n "}, {"sha": "941e2e83dd6888d80ca95ca249f0b436d6b1ce95", "filename": "gcc/ada/xsnamest.adb", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b50706ef31414f90590e59186ac44c117d5fdc8a/gcc%2Fada%2Fxsnamest.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b50706ef31414f90590e59186ac44c117d5fdc8a/gcc%2Fada%2Fxsnamest.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fxsnamest.adb?ref=b50706ef31414f90590e59186ac44c117d5fdc8a", "patch": "@@ -260,11 +260,14 @@ begin\n                Replace (M, Translate (A, Xlate_U_Und));\n                Translate (Name0, Lower_Case_Map);\n \n-            elsif not Match (Name0, \"Op_\", \"\") then\n-               Translate (Name0, Lower_Case_Map);\n+            elsif Match (Name0, \"UP_\", \"\") then\n+               Translate (Name0, Upper_Case_Map);\n \n-            else\n+            elsif Match (Name0, \"Op_\", \"\") then\n                Name0 := 'O' & Translate (Name0, Lower_Case_Map);\n+\n+            else\n+               Translate (Name0, Lower_Case_Map);\n             end if;\n \n             if not Match (Name0, Chk_Low) then"}]}