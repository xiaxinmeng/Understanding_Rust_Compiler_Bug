{"sha": "199501ea411ff65a4749df39eeda5bb14b1caff7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk5NTAxZWE0MTFmZjY1YTQ3NDlkZjM5ZWVkYTViYjE0YjFjYWZmNw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-01-19T20:37:19Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-01-19T20:37:19Z"}, "message": "PR jit/69144: Ensure that libgccjit's tempdir is fully cleaned-up\n\nThere were a couple of ways that libgccjit could fail to unlink all\nof its tempfiles, leading to /tmp/libgccjit-* tempdirs lingering\nafter the build:\n- dumpfiles requested by gcc_jit_context_enable_dump\n- ahead-of-time compilation artifacts which lingered in the tempdir\n  after they've been copied up to the output_path.  This was only\n  the case for GCC_JIT_OUTPUT_KIND_OBJECT_FILE and\n  GCC_JIT_OUTPUT_KIND_EXECUTABLE.\n\nThe following patch fixes these by introducing a vec of additional\ncleanups to be performed by gcc:jit::tempdir's dtor.\n\nIn addition, if a gcc_jit_result * is leaked and\nGCC_JIT_BOOL_OPTION_DEBUGINFO is enabled, the tempdir will also\nnot be cleaned up.  This was the case for tut04-toyvm/toyvm.cc\nwhich the patch fixes by introducing a wrapper around\ngcc_jit_result *.  Doing this required some updates to the\ncorresponding docs.\n\ngcc/jit/ChangeLog:\n\tPR jit/69144\n\t* jit-playback.c (gcc::jit::playback::compile_to_file::postprocess):\n\tPotentially add the temporary artifact to the tempdir's list of\n\ttempfiles needing additional cleanup.\n\t(gcc::jit::playback::context::extract_any_requested_dumps): Likewise\n\tfor the dumpfile.\n\t* jit-tempdir.c (gcc::jit::tempdir::~tempdir): Clean up additional\n\ttempfiles.\n\t* jit-tempdir.h (gcc::jit::tempdir::add_temp_file): New method.\n\t(gcc::jit::tempdir::m_tempfiles): New field.\n\t* docs/cp/intro/tutorial04.rst: Update for changes to toyvm.cc.\n\t* docs/examples/tut04-toyvm/toyvm.cc (class compilation_result):\n\tNew.\n\t(toyvm_function::compile): Change return type from function ptr\n\tto a compilation_result.\n\t(toyvm_function::get_function_name): New accessor.\n\t(toyvm_function::m_funcname): New field.\n\t(get_function_name): Convert to...\n\t(toyvm_function::make_function_name): ...this new method.\n\t(toyvm_function::parse): Call make_function_name.\n\t(toyvm_function::compile): Convert return type from function ptr\n\tto a compilation_result.  Use get_function_name.\n\t(compilation_state::compile): Convert return type from\n\tgcc_jit_result * to a compilation_result.\n\t(test_script): Update for above changes, extracting the code from\n\tthe compilation_result.\n\t(main): Likewise.\n\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n\nFrom-SVN: r232582", "tree": {"sha": "649ce43890fd6b2c7e61712f5be41ce8078d8103", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/649ce43890fd6b2c7e61712f5be41ce8078d8103"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/199501ea411ff65a4749df39eeda5bb14b1caff7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/199501ea411ff65a4749df39eeda5bb14b1caff7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/199501ea411ff65a4749df39eeda5bb14b1caff7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/199501ea411ff65a4749df39eeda5bb14b1caff7/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f57fc9606845a446659826a512aa78c70fb4c842", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f57fc9606845a446659826a512aa78c70fb4c842", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f57fc9606845a446659826a512aa78c70fb4c842"}], "stats": {"total": 1199, "additions": 691, "deletions": 508}, "files": [{"sha": "550e261c2d32b511a71722debd9a9c2024a30edf", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/199501ea411ff65a4749df39eeda5bb14b1caff7/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/199501ea411ff65a4749df39eeda5bb14b1caff7/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=199501ea411ff65a4749df39eeda5bb14b1caff7", "patch": "@@ -1,3 +1,34 @@\n+2016-01-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR jit/69144\n+\t* jit-playback.c (gcc::jit::playback::compile_to_file::postprocess):\n+\tPotentially add the temporary artifact to the tempdir's list of\n+\ttempfiles needing additional cleanup.\n+\t(gcc::jit::playback::context::extract_any_requested_dumps): Likewise\n+\tfor the dumpfile.\n+\t* jit-tempdir.c (gcc::jit::tempdir::~tempdir): Clean up additional\n+\ttempfiles.\n+\t* jit-tempdir.h (gcc::jit::tempdir::add_temp_file): New method.\n+\t(gcc::jit::tempdir::m_tempfiles): New field.\n+\t* docs/cp/intro/tutorial04.rst: Update for changes to toyvm.cc.\n+\t* docs/examples/tut04-toyvm/toyvm.cc (class compilation_result):\n+\tNew.\n+\t(toyvm_function::compile): Change return type from function ptr\n+\tto a compilation_result.\n+\t(toyvm_function::get_function_name): New accessor.\n+\t(toyvm_function::m_funcname): New field.\n+\t(get_function_name): Convert to...\n+\t(toyvm_function::make_function_name): ...this new method.\n+\t(toyvm_function::parse): Call make_function_name.\n+\t(toyvm_function::compile): Convert return type from function ptr\n+\tto a compilation_result.  Use get_function_name.\n+\t(compilation_state::compile): Convert return type from\n+\tgcc_jit_result * to a compilation_result.\n+\t(test_script): Update for above changes, extracting the code from\n+\tthe compilation_result.\n+\t(main): Likewise.\n+\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n+\n 2016-01-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tUpdate copyright years."}, {"sha": "2043d664a040292c952983c9bc629bd5a0a48566", "filename": "gcc/jit/docs/_build/texinfo/libgccjit.texi", "status": "modified", "additions": 561, "deletions": 474, "changes": 1035, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/199501ea411ff65a4749df39eeda5bb14b1caff7/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/199501ea411ff65a4749df39eeda5bb14b1caff7/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi?ref=199501ea411ff65a4749df39eeda5bb14b1caff7"}, {"sha": "443180c1472a85b40ee02d00e77d0eb9bd33213b", "filename": "gcc/jit/docs/cp/intro/tutorial04.rst", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/199501ea411ff65a4749df39eeda5bb14b1caff7/gcc%2Fjit%2Fdocs%2Fcp%2Fintro%2Ftutorial04.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/199501ea411ff65a4749df39eeda5bb14b1caff7/gcc%2Fjit%2Fdocs%2Fcp%2Fintro%2Ftutorial04.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Fcp%2Fintro%2Ftutorial04.rst?ref=199501ea411ff65a4749df39eeda5bb14b1caff7", "patch": "@@ -297,15 +297,14 @@ Compiling the context\n Having finished looping over the blocks and populating them with\n statements, the context is complete.\n \n-We can now compile it, and extract machine code from the result:\n+We can now compile it, extract machine code from the result, and\n+run it:\n \n    .. literalinclude:: ../../examples/tut04-toyvm/toyvm.cc\n-    :start-after: /* We've now finished populating the context.  Compile it.  */\n-    :end-before: /* (this leaks \"result\" and \"funcname\") */\n+    :start-after: /* Wrapper around a gcc_jit_result *.  */\n+    :end-before: /* Functions are compiled to this function ptr type.  */\n     :language: c++\n \n-We can now run the result:\n-\n    .. literalinclude:: ../../examples/tut04-toyvm/toyvm.cc\n     :start-after: /* JIT-compilation.  */\n     :end-before: return 0;"}, {"sha": "73089da4eeb7802e581722d96545a5dd49d8404a", "filename": "gcc/jit/docs/examples/tut04-toyvm/toyvm.cc", "status": "modified", "additions": 53, "deletions": 21, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/199501ea411ff65a4749df39eeda5bb14b1caff7/gcc%2Fjit%2Fdocs%2Fexamples%2Ftut04-toyvm%2Ftoyvm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/199501ea411ff65a4749df39eeda5bb14b1caff7/gcc%2Fjit%2Fdocs%2Fexamples%2Ftut04-toyvm%2Ftoyvm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Fexamples%2Ftut04-toyvm%2Ftoyvm.cc?ref=199501ea411ff65a4749df39eeda5bb14b1caff7", "patch": "@@ -28,6 +28,29 @@ along with GCC; see the file COPYING3.  If not see\n \n #include <libgccjit++.h>\n \n+/* Wrapper around a gcc_jit_result *.  */\n+\n+class compilation_result\n+{\n+public:\n+  compilation_result (gcc_jit_result *result) :\n+    m_result (result)\n+  {\n+  }\n+  ~compilation_result ()\n+  {\n+    gcc_jit_result_release (m_result);\n+  }\n+\n+  void *get_code (const char *funcname)\n+  {\n+    return gcc_jit_result_get_code (m_result, funcname);\n+  }\n+\n+private:\n+  gcc_jit_result *m_result;\n+};\n+\n /* Functions are compiled to this function ptr type.  */\n typedef int (*toyvm_compiled_func) (int);\n \n@@ -100,11 +123,19 @@ class toyvm_function\n   int\n   interpret (int arg, FILE *trace);\n \n-  toyvm_compiled_func\n+  compilation_result\n   compile ();\n \n+  const char *\n+  get_function_name () const { return m_funcname; }\n+\n+private:\n+  void\n+  make_function_name (const char *filename);\n+\n private:\n   const char *fn_filename;\n+  char       *m_funcname;\n   int         fn_num_ops;\n   toyvm_op    fn_ops[MAX_OPS];\n   friend struct compilation_state;\n@@ -149,23 +180,21 @@ toyvm_function::add_unary_op (enum opcode opcode,\n   add_op (opcode, operand, linenum);\n }\n \n-static char *\n-get_function_name (const char *filename)\n+void\n+toyvm_function::make_function_name (const char *filename)\n {\n   /* Skip any path separators.  */\n   const char *pathsep = strrchr (filename, '/');\n   if (pathsep)\n     filename = pathsep + 1;\n \n   /* Copy filename to funcname.  */\n-  char *funcname = (char *)malloc (strlen (filename) + 1);\n+  m_funcname = (char *)malloc (strlen (filename) + 1);\n \n-  strcpy (funcname, filename);\n+  strcpy (m_funcname, filename);\n \n   /* Convert \".\" to NIL terminator.  */\n-  *(strchr (funcname, '.')) = '\\0';\n-\n-  return funcname;\n+  *(strchr (m_funcname, '.')) = '\\0';\n }\n \n toyvm_function *\n@@ -197,6 +226,7 @@ toyvm_function::parse (const char *filename, const char *name)\n       goto error;\n     }\n   fn->fn_filename = filename;\n+  fn->make_function_name (filename);\n \n   /* Read the lines of the file.  */\n   while ((linelen = getline (&line, &bufsize, f)) != -1)\n@@ -420,7 +450,7 @@ class compilation_state\n   void create_types ();\n   void create_locations ();\n   void create_function (const char *funcname);\n-  gcc_jit_result *compile ();\n+  compilation_result compile ();\n \n private:\n   void\n@@ -462,24 +492,18 @@ class compilation_state\n \n /* The main compilation hook.  */\n \n-toyvm_compiled_func\n+compilation_result\n toyvm_function::compile ()\n {\n   compilation_state state (*this);\n-  char *funcname;\n-\n-  funcname = get_function_name (fn_filename);\n \n   state.create_context ();\n   state.create_types ();\n   state.create_locations ();\n-  state.create_function (funcname);\n+  state.create_function (get_function_name ());\n \n   /* We've now finished populating the context.  Compile it.  */\n-  gcc_jit_result *result = state.compile ();\n-\n-  return (toyvm_compiled_func)gcc_jit_result_get_code (result, funcname);\n-  /* (this leaks \"result\" and \"funcname\") */\n+  return state.compile ();\n }\n \n /* Stack manipulation.  */\n@@ -767,7 +791,7 @@ compilation_state::create_function (const char *funcname)\n     } /* end of loop on PC locations.  */\n }\n \n-gcc_jit_result *\n+compilation_result\n compilation_state::compile ()\n {\n   return ctxt.compile ();\n@@ -825,7 +849,10 @@ test_script (const char *scripts_dir, const char *script_name, int input,\n   interpreted_result = fn->interpret (input, NULL);\n   CHECK_VALUE (interpreted_result, expected_result);\n \n-  code = fn->compile ();\n+  compilation_result compiler_result = fn->compile ();\n+\n+  const char *funcname = fn->get_function_name ();\n+  code = (toyvm_compiled_func)compiler_result.get_code (funcname);\n   CHECK_NON_NULL (code);\n \n   compiled_result = code (input);\n@@ -894,7 +921,12 @@ main (int argc, char **argv)\n \t  fn->interpret (atoi (argv[2]), NULL));\n \n   /* JIT-compilation.  */\n-  toyvm_compiled_func code = fn->compile ();\n+  compilation_result compiler_result = fn->compile ();\n+\n+  const char *funcname = fn->get_function_name ();\n+  toyvm_compiled_func code\n+    = (toyvm_compiled_func)compiler_result.get_code (funcname);\n+\n   printf (\"compiler result: %d\\n\",\n \t  code (atoi (argv[2])));\n "}, {"sha": "d150ec19664430e0413d5ffe3ccf724a3af299b0", "filename": "gcc/jit/jit-playback.c", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/199501ea411ff65a4749df39eeda5bb14b1caff7/gcc%2Fjit%2Fjit-playback.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/199501ea411ff65a4749df39eeda5bb14b1caff7/gcc%2Fjit%2Fjit-playback.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.c?ref=199501ea411ff65a4749df39eeda5bb14b1caff7", "patch": "@@ -1888,6 +1888,7 @@ playback::compile_to_file::postprocess (const char *ctxt_progname)\n     case GCC_JIT_OUTPUT_KIND_ASSEMBLER:\n       copy_file (get_tempdir ()->get_path_s_file (),\n \t\t m_output_path);\n+      /* The .s file is automatically unlinked by tempdir::~tempdir.  */\n       break;\n \n     case GCC_JIT_OUTPUT_KIND_OBJECT_FILE:\n@@ -1902,9 +1903,13 @@ playback::compile_to_file::postprocess (const char *ctxt_progname)\n \t\t       false, /* bool shared, */\n \t\t       false);/* bool run_linker */\n \tif (!errors_occurred ())\n-\t  copy_file (tmp_o_path,\n-\t\t     m_output_path);\n-\tfree (tmp_o_path);\n+\t  {\n+\t    copy_file (tmp_o_path,\n+\t\t       m_output_path);\n+\t    get_tempdir ()->add_temp_file (tmp_o_path);\n+\t  }\n+\telse\n+\t  free (tmp_o_path);\n       }\n       break;\n \n@@ -1918,6 +1923,7 @@ playback::compile_to_file::postprocess (const char *ctxt_progname)\n       if (!errors_occurred ())\n \tcopy_file (get_tempdir ()->get_path_so_file (),\n \t\t   m_output_path);\n+      /* The .so file is automatically unlinked by tempdir::~tempdir.  */\n       break;\n \n     case GCC_JIT_OUTPUT_KIND_EXECUTABLE:\n@@ -1932,9 +1938,13 @@ playback::compile_to_file::postprocess (const char *ctxt_progname)\n \t\t       false, /* bool shared, */\n \t\t       true);/* bool run_linker */\n \tif (!errors_occurred ())\n-\t  copy_file (tmp_exe_path,\n-\t\t     m_output_path);\n-\tfree (tmp_exe_path);\n+\t  {\n+\t    copy_file (tmp_exe_path,\n+\t\t       m_output_path);\n+\t    get_tempdir ()->add_temp_file (tmp_exe_path);\n+\t  }\n+\telse\n+\t  free (tmp_exe_path);\n       }\n       break;\n \n@@ -2279,7 +2289,7 @@ extract_any_requested_dumps (vec <recording::requested_dump> *requested_dumps)\n       filename = g->get_dumps ()->get_dump_file_name (dfi);\n       content = read_dump_file (filename);\n       *(d->m_out_ptr) = content;\n-      free (filename);\n+      m_tempdir->add_temp_file (filename);\n     }\n }\n "}, {"sha": "0e11c424e630abe8f3fd137c73238651f855cabe", "filename": "gcc/jit/jit-tempdir.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/199501ea411ff65a4749df39eeda5bb14b1caff7/gcc%2Fjit%2Fjit-tempdir.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/199501ea411ff65a4749df39eeda5bb14b1caff7/gcc%2Fjit%2Fjit-tempdir.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-tempdir.c?ref=199501ea411ff65a4749df39eeda5bb14b1caff7", "patch": "@@ -121,7 +121,7 @@ gcc::jit::tempdir::~tempdir ()\n     fprintf (stderr, \"intermediate files written to %s\\n\", m_path_tempdir);\n   else\n     {\n-      /* Clean up .s/.so and tempdir. */\n+      /* Clean up .s/.so.  */\n       if (m_path_s_file)\n \t{\n \t  log (\"unlinking .s file: %s\", m_path_s_file);\n@@ -132,6 +132,17 @@ gcc::jit::tempdir::~tempdir ()\n \t  log (\"unlinking .so file: %s\", m_path_so_file);\n \t  unlink (m_path_so_file);\n \t}\n+\n+      /* Clean up any other tempfiles.  */\n+      int i;\n+      char *tempfile;\n+      FOR_EACH_VEC_ELT (m_tempfiles, i, tempfile)\n+\t{\n+\t  log (\"unlinking tempfile: %s\", tempfile);\n+\t  unlink (tempfile);\n+\t}\n+\n+      /* The tempdir should now be empty; remove it.  */\n       if (m_path_tempdir)\n \t{\n \t  log (\"removing tempdir: %s\", m_path_tempdir);\n@@ -145,4 +156,9 @@ gcc::jit::tempdir::~tempdir ()\n   free (m_path_c_file);\n   free (m_path_s_file);\n   free (m_path_so_file);\n+\n+  int i;\n+  char *tempfile;\n+  FOR_EACH_VEC_ELT (m_tempfiles, i, tempfile)\n+    free (tempfile);\n }"}, {"sha": "cae25eff90813186af5de296e0dbf087828d386c", "filename": "gcc/jit/jit-tempdir.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/199501ea411ff65a4749df39eeda5bb14b1caff7/gcc%2Fjit%2Fjit-tempdir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/199501ea411ff65a4749df39eeda5bb14b1caff7/gcc%2Fjit%2Fjit-tempdir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-tempdir.h?ref=199501ea411ff65a4749df39eeda5bb14b1caff7", "patch": "@@ -58,6 +58,10 @@ class tempdir : public log_user\n   const char * get_path_s_file () const { return m_path_s_file; }\n   const char * get_path_so_file () const { return m_path_so_file; }\n \n+  /* Add PATH to the vec of tempfiles that must be unlinked.\n+     Take ownership of the buffer PATH; it will be freed.  */\n+  void add_temp_file (char *path) { m_tempfiles.safe_push (path); }\n+\n  private:\n   /* Was GCC_JIT_BOOL_OPTION_KEEP_INTERMEDIATES set?  If so, keep the\n      on-disk tempdir around after this wrapper object goes away.  */\n@@ -74,6 +78,10 @@ class tempdir : public log_user\n   char *m_path_s_file;\n   char *m_path_so_file;\n \n+  /* Other files within the tempdir to be cleaned up:\n+     - certain ahead-of-time compilation artifacts (.o and .exe files)\n+     - dumpfiles that were requested via gcc_jit_context_enable_dump.  */\n+  auto_vec <char *> m_tempfiles;\n };\n \n } // namespace gcc::jit"}]}