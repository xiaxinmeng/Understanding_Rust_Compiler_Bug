{"sha": "aefa74bd2bda63d1420265ba1a5261adeb4c305d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWVmYTc0YmQyYmRhNjNkMTQyMDI2NWJhMWE1MjYxYWRlYjRjMzA1ZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-07-18T19:51:36Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-07-18T19:51:36Z"}, "message": "cp-demangle.c (cplus_demangle_operators): Add *_cast.\n\n\t* cp-demangle.c (cplus_demangle_operators): Add *_cast.\n\t(op_is_new_cast): New.\n\t(d_expression, d_print_comp): Check it.\n\nFrom-SVN: r189630", "tree": {"sha": "17ba6cc4288373c5855e2cb266f3100cba141ceb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17ba6cc4288373c5855e2cb266f3100cba141ceb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aefa74bd2bda63d1420265ba1a5261adeb4c305d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aefa74bd2bda63d1420265ba1a5261adeb4c305d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aefa74bd2bda63d1420265ba1a5261adeb4c305d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aefa74bd2bda63d1420265ba1a5261adeb4c305d/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1ff8c79bc5a0da6b628356ed983f1838397f7948", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ff8c79bc5a0da6b628356ed983f1838397f7948", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ff8c79bc5a0da6b628356ed983f1838397f7948"}], "stats": {"total": 66, "additions": 63, "deletions": 3}, "files": [{"sha": "ac85fb0456901449d1fa1b4725e1be1ca0b5770d", "filename": "gcc/testsuite/g++.dg/abi/mangle3-2.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aefa74bd2bda63d1420265ba1a5261adeb4c305d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle3-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aefa74bd2bda63d1420265ba1a5261adeb4c305d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle3-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle3-2.C?ref=aefa74bd2bda63d1420265ba1a5261adeb4c305d", "patch": "@@ -0,0 +1,20 @@\n+// Test mangling of type casts\n+// { dg-options \"-fabi-version=0\" }\n+// { dg-do compile }\n+\n+template<int i> class A {};\n+template<bool b> class B {};\n+\n+template<int i> void f(A<i> &, B<bool(i)> &) {}\n+template<int i> void g(A<i> &, B<static_cast<bool>(i)> &) {}\n+\n+int main()\n+{\n+  A<1> a;\n+  B<true> b;\n+  f(a, b);\n+  g(a, b);\n+}\n+\n+// { dg-final { scan-assembler \"\\n_?_Z1fILi1EEvR1AIXT_EER1BIXcvbT_EE\\[: \\t\\n\\]\" } }\n+// { dg-final { scan-assembler \"\\n_?_Z1gILi1EEvR1AIXT_EER1BIXscbT_EE\\[: \\t\\n\\]\" } }"}, {"sha": "5f44f767732d36e041939d75dcd286da1130b672", "filename": "gcc/testsuite/g++.dg/abi/mangle3.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aefa74bd2bda63d1420265ba1a5261adeb4c305d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aefa74bd2bda63d1420265ba1a5261adeb4c305d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle3.C?ref=aefa74bd2bda63d1420265ba1a5261adeb4c305d", "patch": "@@ -1,4 +1,5 @@\n // Test mangling of type casts\n+// { dg-options \"-fabi-version=2\" }\n // { dg-do compile }\n \n template<int i> class A {};"}, {"sha": "63c16ac8f0e65c486aa3e1b8089bdef020412fe6", "filename": "gcc/testsuite/g++.dg/debug/nullptr01.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aefa74bd2bda63d1420265ba1a5261adeb4c305d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fnullptr01.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aefa74bd2bda63d1420265ba1a5261adeb4c305d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fnullptr01.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fnullptr01.C?ref=aefa74bd2bda63d1420265ba1a5261adeb4c305d", "patch": "@@ -1,5 +1,5 @@\n // Test that debugging backends don't crash on NULLPTR_TYPE.\n-// { dg-options \"-std=c++0x\" }\n+// { dg-options \"-std=c++0x -fabi-version=0\" }\n \n typedef decltype(nullptr) nullptr_t;\n \n@@ -12,4 +12,4 @@ template <> nullptr_t g(A<nullptr_t>)\n   nullptr_t local;\n }\n // { dg-final { scan-assembler \"_Z1fDn\" } }\n-// { dg-final { scan-assembler \"_Z1gI1AIDnEES1_T_\" } }\n+// { dg-final { scan-assembler \"_Z1gI1AIDnEEDnT_\" } }"}, {"sha": "716a2ce9d235ba0c7cbfde6c1eb95a0e627f0f46", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aefa74bd2bda63d1420265ba1a5261adeb4c305d/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aefa74bd2bda63d1420265ba1a5261adeb4c305d/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=aefa74bd2bda63d1420265ba1a5261adeb4c305d", "patch": "@@ -1,3 +1,9 @@\n+2012-07-18  Jason Merrill  <jason@redhat.com>\n+\n+\t* cp-demangle.c (cplus_demangle_operators): Add *_cast.\n+\t(op_is_new_cast): New.\n+\t(d_expression, d_print_comp): Check it.\n+\n 2012-07-13  Doug Evans  <dje@google.com>\n \n \t* filename_cmp.c (filename_hash, filename_eq): New functions."}, {"sha": "258aaa715504a293a677cc5d087b4929855a6bdf", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aefa74bd2bda63d1420265ba1a5261adeb4c305d/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aefa74bd2bda63d1420265ba1a5261adeb4c305d/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=aefa74bd2bda63d1420265ba1a5261adeb4c305d", "patch": "@@ -1582,11 +1582,13 @@ const struct demangle_operator_info cplus_demangle_operators[] =\n   { \"an\", NL (\"&\"),         2 },\n   { \"at\", NL (\"alignof \"),   1 },\n   { \"az\", NL (\"alignof \"),   1 },\n+  { \"cc\", NL (\"const_cast\"), 2 },\n   { \"cl\", NL (\"()\"),        2 },\n   { \"cm\", NL (\",\"),         2 },\n   { \"co\", NL (\"~\"),         1 },\n   { \"dV\", NL (\"/=\"),        2 },\n   { \"da\", NL (\"delete[] \"), 1 },\n+  { \"dc\", NL (\"dynamic_cast\"), 2 },\n   { \"de\", NL (\"*\"),         1 },\n   { \"dl\", NL (\"delete \"),   1 },\n   { \"ds\", NL (\".*\"),        2 },\n@@ -1626,8 +1628,10 @@ const struct demangle_operator_info cplus_demangle_operators[] =\n   { \"qu\", NL (\"?\"),         3 },\n   { \"rM\", NL (\"%=\"),        2 },\n   { \"rS\", NL (\">>=\"),       2 },\n+  { \"rc\", NL (\"reinterpret_cast\"), 2 },\n   { \"rm\", NL (\"%\"),         2 },\n   { \"rs\", NL (\">>\"),        2 },\n+  { \"sc\", NL (\"static_cast\"), 2 },\n   { \"st\", NL (\"sizeof \"),   1 },\n   { \"sz\", NL (\"sizeof \"),   1 },\n   { \"tr\", NL (\"throw\"),     0 },\n@@ -2809,6 +2813,18 @@ d_exprlist (struct d_info *di, char terminator)\n   return list;\n }\n \n+/* Returns nonzero iff OP is an operator for a C++ cast: const_cast,\n+   dynamic_cast, static_cast or reinterpret_cast.  */\n+\n+static int\n+op_is_new_cast (struct demangle_component *op)\n+{\n+  const char *code = op->u.s_operator.op->code;\n+  return (code[1] == 'c'\n+\t  && (code[0] == 's' || code[0] == 'd'\n+\t      || code[0] == 'c' || code[0] == 'r'));\n+}\n+\n /* <expression> ::= <(unary) operator-name> <expression>\n                 ::= <(binary) operator-name> <expression> <expression>\n                 ::= <(trinary) operator-name> <expression> <expression> <expression>\n@@ -2971,7 +2987,10 @@ d_expression (struct d_info *di)\n \t    struct demangle_component *left;\n \t    struct demangle_component *right;\n \n-\t    left = d_expression (di);\n+\t    if (op_is_new_cast (op))\n+\t      left = cplus_demangle_type (di);\n+\t    else\n+\t      left = d_expression (di);\n \t    if (!strcmp (code, \"cl\"))\n \t      right = d_exprlist (di, 'E');\n \t    else if (!strcmp (code, \"dt\") || !strcmp (code, \"pt\"))\n@@ -4455,6 +4474,17 @@ d_print_comp (struct d_print_info *dpi, int options,\n \t  return;\n \t}\n \n+      if (op_is_new_cast (d_left (dc)))\n+\t{\n+\t  d_print_expr_op (dpi, options, d_left (dc));\n+\t  d_append_char (dpi, '<');\n+\t  d_print_comp (dpi, options, d_left (d_right (dc)));\n+\t  d_append_string (dpi, \">(\");\n+\t  d_print_comp (dpi, options, d_right (d_right (dc)));\n+\t  d_append_char (dpi, ')');\n+\t  return;\n+\t}\n+\n       /* We wrap an expression which uses the greater-than operator in\n \t an extra layer of parens so that it does not get confused\n \t with the '>' which ends the template parameters.  */"}, {"sha": "6b55d30298e54250e9988c5ca50282283894d1a1", "filename": "libiberty/testsuite/demangle-expected", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aefa74bd2bda63d1420265ba1a5261adeb4c305d/libiberty%2Ftestsuite%2Fdemangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aefa74bd2bda63d1420265ba1a5261adeb4c305d/libiberty%2Ftestsuite%2Fdemangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fdemangle-expected?ref=aefa74bd2bda63d1420265ba1a5261adeb4c305d", "patch": "@@ -4081,6 +4081,9 @@ decltype (new auto({parm#1})) f<int>(int)\n --format=gnu-v3\n _Z1fIiERDaRKT_S1_\n auto& f<int>(int const&, int)\n+--format=gnu-v3\n+_Z1gILi1EEvR1AIXT_EER1BIXscbT_EE\n+void g<1>(A<1>&, B<static_cast<bool>(1)>&)\n #\n # Ada (GNAT) tests.\n #"}]}