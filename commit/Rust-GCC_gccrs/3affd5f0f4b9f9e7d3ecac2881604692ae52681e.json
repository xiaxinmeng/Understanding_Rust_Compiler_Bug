{"sha": "3affd5f0f4b9f9e7d3ecac2881604692ae52681e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FmZmQ1ZjBmNGI5ZjllN2QzZWNhYzI4ODE2MDQ2OTJhZTUyNjgxZQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-05-15T23:42:58Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-05-15T23:42:58Z"}, "message": "Update from Cygnus libiberty.\n\nlibiberty uses autoconf now.\n\nFrom-SVN: r19791", "tree": {"sha": "e6ad5341787fa143c7cb10c7384c960aecfa1ede", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6ad5341787fa143c7cb10c7384c960aecfa1ede"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3affd5f0f4b9f9e7d3ecac2881604692ae52681e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3affd5f0f4b9f9e7d3ecac2881604692ae52681e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3affd5f0f4b9f9e7d3ecac2881604692ae52681e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3affd5f0f4b9f9e7d3ecac2881604692ae52681e/comments", "author": null, "committer": null, "parents": [{"sha": "fe806bddb81ada7a8797cf387ff7c1427ed3d6bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe806bddb81ada7a8797cf387ff7c1427ed3d6bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe806bddb81ada7a8797cf387ff7c1427ed3d6bb"}], "stats": {"total": 1341, "additions": 629, "deletions": 712}, "files": [{"sha": "20fc2840e8f75e8fa31f05adab420c14d0622206", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 166, "deletions": 33, "changes": 199, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3affd5f0f4b9f9e7d3ecac2881604692ae52681e/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3affd5f0f4b9f9e7d3ecac2881604692ae52681e/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=3affd5f0f4b9f9e7d3ecac2881604692ae52681e", "patch": "@@ -1,11 +1,159 @@\n Wed May 13 14:24:38 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n-        * cplus-dem.c (squangle_mop_up): Change return type to void.\n-        (internal_cplus_demangle): Remove unused parameter `options'.\n-        All callers changed.\n-        (cplus_demangle_opname): Remove function wide variable `int i' and\n-        replace with `size_t i' at each location where it is used.\n-        (cplus_mangle_opname): change type of `i' from int to size_t.\n+\t* cplus-dem.c (squangle_mop_up): Change return type to void.\n+\t(internal_cplus_demangle): Remove unused parameter `options'.\n+\tAll callers changed.\n+\t(cplus_demangle_opname): Remove function wide variable `int i' and\n+\treplace with `size_t i' at each location where it is used.\n+\t(cplus_mangle_opname): change type of `i' from int to size_t.\n+\n+Wed May 13 13:39:38 1998  Ian Lance Taylor  <ian@cygnus.com>\n+\n+\t* alloca-conf.h: Include config.h.  Check HAVE_ALLOCA_H rather\n+\tthan sparc or sun.\n+\t* Makefile.in (argv.o): Depend upon config.h and alloca-conf.h.\n+\n+Fri May  8 00:23:51 1998  Ian Lance Taylor  <ian@cygnus.com>\n+\n+\t* configure.in: Set libiberty_topdir correctly when srcdir is\n+\t\".\" and with_target_subdir is not set.\n+\t* configure: Rebuild.\n+\n+Thu May  7 13:01:44 1998  Ian Lance Taylor  <ian@cygnus.com>\n+\n+\t* configure.in: Add *-*-mingw32* case.\n+\t* configure: Rebuild.\n+\n+Wed May  6 11:33:51 1998  Ian Lance Taylor  <ian@cygnus.com>\n+\n+\t* config.table: Never use a PIC file for *-*-cygwin32*.\n+\n+\t* Makefile.in (config.status): Depend upon config.table.\n+\n+\t* configure.in: On a cygwin32 host, always compile random, and\n+\tdon't test for sys_siglist, strsignal, or psignal.\n+\t* configure: Rebuild.\n+\n+\t* clock.c: Check HAVE_SYS_PARAM_H rather than NO_SYS_PARAM_H.\n+\t* getcwd.c: Likewise.\n+\t* getpagesize.c: Likewise.\n+\t* getruntime.c: Likewise.\n+\n+Tue May  5 18:08:32 1998  Ian Lance Taylor  <ian@cygnus.com>\n+\n+\tUse autoconf tests rather than the old dummy.c test:\n+\t* configure.in: Add AC_ARG_WITH calls for --with-target-subdir and\n+\t--with-newlib.  Add AC_CONFIG_HEADER.  Use AC_REPLACE_FUNCS for\n+\tmost functions.  Add special cases to handle newlib and VxWorks.\n+\tRemove target_makefile_frag.  Create stamp-h in AC_OUTPUT if\n+\tCONFIG_HEADERS is set.  Only call config-ml.in in AC_OUTPUT if\n+\tCONFIG_FILES is set; set ac_file before calling it.\n+\t* config.table (arm-*-riscix*, *-*-cygwin32): Remove.\n+\t(*-*-hpux*, *-*-hiux*, *-*-irix4*, *-*-solaris2*): Remove.\n+\t(*-*-sysv4*, *-*-go32, *-*-vxworks5*, *-*-vxworks): Remove\n+\t(i[3456]-*-mingw32*): Remove.\n+\t* Makefile.in (ERRORS_CC, CONFIG_H, NEEDED_LIST): Remove.\n+\t(LIBOBJS): New variable.\n+\t(HOST_OFILES, DO_ALSO, STAGESTUFF): Remove.\n+\t(all): Depend upon needed-list.  Don't check RULE1.\n+\t(@target_makefile_frag@): Remove.\n+\t(COMPILE.c): Include @DEFS@.\n+\t(HFILES): Add alloca-conf.h.\n+\t(REQUIRED_OFILES): Remove basename.o.\n+\t($(TARGETLIB)): New target.\n+\t(stamp-needed, lneeded-list, needed.awk, stamp-config): Remove.\n+\t(lconfig.h, needed2.awk, dummy.o, errors): Remove.\n+\t(needed-list, config.h): Rewrite.\n+\t(RULE1, $(RULE1), RULE2, $(RULE2)): Remove.\n+\t(.always.): Remove.\n+\t(Makefile): Set CONFIG_FILES and CONFIG_HEADERS.\n+\t(stamp-h): New target.\n+\t(atexit.o, clock.o, getcwd.o, getpagesize.o): New targets.\n+\t(basename.o): Don't depend upon config.h.\n+\t(getruntime.o): Depend upon config.h.\n+\t* atexit.c: Include config.h.  Check HAVE_ON_EXIT rather than\n+\tNEED_on_exit.\n+\t* basename.c: Don't include config.h.  Don't check NEED_basename.\n+\t* clock.c: Include config.h.\n+\t* getcwd.c: Likewise.\n+\t* getpagesize.c: Likewise.\n+\t* getruntime.c: Likewise.  Fix checks which set HAVE_GETRUSAGE and\n+\tHAVE_TIMES.\n+\t* strerror.c: Change uses of NEED_sys_errlist to\n+\tHAVE_SYS_ERRLIST.  Likewise for NEED_strerror and HAVE_STRERROR.\n+\t* strsignal.c: Likewise for NEED_sys_siglist and HAVE_SYS_SIGLIST,\n+\tand for NEED_strsignal and HAVE_STRSIGNAL and for NEED_psignal and\n+\tHAVE_PSIGNAL.\n+\t* acconfig.h: New file.\n+\t* dummy.c: Remove.\n+\t* functions.def: Remove.\n+\t* config/mh-cxux7 (HDEFINES): Remove -DHAVE_SYSCONF.\n+\t* config/mh-windows (HDEFINES): Remove.\n+\t* config/mh-cygwin32: Remove.\n+\t* config/mh-go32: Remove.\n+\t* config/mh-irix4: Remove.\n+\t* config/mh-riscix: Remove.\n+\t* config/mh-sysv4: Remove.\n+\t* config/mt-mingw32: Remove.\n+\t* config/mt-vxworks5: Remove.\n+\t* config.in: New file, generated using autoheader.\n+\t* configure: Rebuild.\n+\n+Mon May  4 13:00:28 1998  Ian Lance Taylor  <ian@cygnus.com>\n+\n+\t* configure.in: Rewrite to use autoconf.\n+\t* configure: Generate using autoconf.\n+\t* config/mh-a68bsd: Remove.\n+\t* config/mh-apollo68: Remove.\n+\t* config/mh-hpbsd: Remove.\n+\t* config/mh-ncr3000: Remove.\n+\t* config/mh-sysv: Remove.\n+\t* config/mh-aix (RANLIB, INSTALL): Don't define.\n+\t* config/mh-cxux7 (RANLIB, INSTALL): Don't define.\n+\t* config/mh-irix4 (CC, RANLIB, INSTALL): Don't define.\n+\t* config/mh-sysv4 (RANLIB, INSTALL): Don't define.\n+\t* config.table: Change config_shell to CONFIG_SHELL, and use\n+\tlibiberty_topdir to find move-if-change.\n+ \t(m68k-apollo-bsd*, m68k-apollo-sysv*): Remove.\n+\t(i[3456]86-ncr-sysv4*, *-*-dgux*, hppa*-hp-bsd*): Remove.\n+\t(*-*-irix*, *-*-m88kbcs*, *-*-sysv*): Remove.\n+\t* Makefile.in (srcdir): Set to @srcdir@.\n+\t(VPATH): Likewise.\n+\t(prefix, exec_prefix, bindir, libdir): Set to autoconf variables.\n+\t(SHELL, INSTALL, INSTALL_PROGRAM, INSTALL_DATA): Likewise.\n+\t(CC, CFLAGS, RANLIB)): Likewise.\n+\t(datadir, man*dir, infodir, includedir, MAKEINFO): Remove.\n+\t(target_makefile_frag, host_makefile_frag): Add substitutions.\n+\t(INSTALL_DEST): Set to @INSTALL_DEST@.\n+\t(Makefile): Depend upon config.status.  Don't depend upon\n+\t$(host_makefile_frag) or $(target_makefile_frag).\n+\t(config.status): New target.\n+\n+Sun May  3 17:58:49 1998  Ian Lance Taylor  <ian@cygnus.com>\n+\n+\t* config/mt-sunos4: Remove.  Should be handled by --with-headers\n+\tand --with-libraries options at top level.\n+\t* config.table: Never use mt-sunos4.\n+\n+\t* alloca-conf.h: New file, combining alloca-norm.h and\n+\talloca-botch.h.\n+\t* alloca-norm.h: Remove.\n+\t* alloca-botch.h: Remove.\n+\t* configure.in: Set shell variables files and links to empty.\n+\t* config.table: Don't set shell variable files.\n+\t* configure.bat: Don't create alloca-conf.h.\n+\t* makefile.vms: Likewise.\n+\t* mpw-config.in: Likewise.\n+\t* vmsbuild.com: Likewise.\n+\n+Fri May  1 11:41:42 1998  Ian Lance Taylor  <ian@cygnus.com>\n+\n+\t* Makefile.in ($(HOST_OFILES) $(REQUIRED_OFILES)): Remove old\n+\ttarget depending upon config.h.\n+\t(alloca.o): Add target depending upon config.h\n+\t(basename.o, choose-temp.o, fnmatch.o): Likewise.\n+\t(getopt.o, getopt1.o, pexecute.o, strerror.o): Likewise.\n+\t(strsignal.o, xstrerror.o): Likewise.\n \n Fri May  1 04:26:25 1998  Peter Schauer <pes@regent.e-technik.tu-muenchen.de>\n \n@@ -39,22 +187,9 @@ Wed Apr 22 10:53:49 EDT 1998 Andrew MacLeod  <amacleod@cygnus.com>\n \t(register_Btype, remember_Btype): New functions for B codes.\n \t(forget_B_and_K_types): New function to destroy B and K info.\n \n-Fri Apr 10 01:45:09 1998  Jeffrey A Law  (law@cygnus.com)\n+Fri Apr 10 01:49:10 1998  Jeffrey A Law  (law@cygnus.com)\n \n-\t* cplus-dem.c: Sync with gcc.\n-\n-Thu Apr  2 13:53:54 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n-\n-\t* choose-temp.c: Include system.h when IN_GCC.\n-\n-1998-04-01  Mark Mitchell  <mmitchell@usa.net>\n-\n-\t* cplus-dem.c (optable): Add sizeof.\n-\t(demangle_template_value_parm): New function containing code\n-\tpreviously found in demangle_template.\n-\t(demangle_integral_value): New function which handles complicated \n-\tintegral expressions.\n-\t(demangle_template): Use them.\n+\t* COPYING.LIB, choose-temp.c, cplus-dem.c: Sync with egcs & gcc.\n \n Thu Mar  5 09:23:28 1998  Manfred Hollstein  <manfred@s-direktnet.de>\n \n@@ -65,6 +200,10 @@ Mon Feb 23 14:33:15 1998  Ian Lance Taylor  <ian@cygnus.com>\n \n \t* choose-temp.c: Fix handling of sys/file.h to work in libiberty.\n \n+Sun Feb 22 18:03:23 1998  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* choose-temp.c: Sync with copy in gcc.\n+\n Thu Feb 12 16:29:49 1998  Ian Lance Taylor  <ian@cygnus.com>\n \n \t* getopt.c: Update to latest FSF version.\n@@ -75,17 +214,17 @@ Tue Feb 10 16:58:33 1998  Stan Shebs  <shebs@andros.cygnus.com>\n \t* cplus-dem.c (gnu_special): Don't get confused by .<digits>\n \tstrings that are not actually lengths.\n \n-Thu Feb  5 18:48:56 1998  Geoffrey Noer  <noer@cygnus.com>\n-\n-        * config/mh-cygwin32: remove vasprintf.o from EXTRA_OFILES\n-        since it gets built automatically\n-\n Fri Feb  6 01:35:17 1998  Manfred Hollstein  <manfred@s-direktnet.de>\n \n \t* Makefile.in (FLAGS_TO_PASS): Don't pass PICFLAG.\n \t(.c.o): Check value of enable_shared, not PICFLAG.\n \t(stamp-picdir): Dito.\n \n+Thu Feb  5 18:48:56 1998  Geoffrey Noer  <noer@cygnus.com>\n+\n+        * config/mh-cygwin32: remove vasprintf.o from EXTRA_OFILES\n+        since it gets built automatically\n+\n Sun Feb  1 02:52:32 1998  Mike Stump  <mrs@wrs.com>\n \n \t* config.table (vxworks configs): Default to VxWorks 5.x, as that is\n@@ -107,7 +246,7 @@ Sun Jan 18 15:57:28 1998  Michael Snyder  <msnyder@cleaver.cygnus.com>\n \t* vasprintf.c (int_vasprintf): Increase buffer size for float/double\n \tvalues.\n \n-Sat Jan 17 22:28:38 1997  Mumit Khan  <khan@xraylith.wisc.edu>\n+Sat Jan 17 22:28:38 1998  Mumit Khan  <khan@xraylith.wisc.edu>\n \t\t\t  J.J. VanderHeijden <J.J.vanderHeijden@student.utwente.nl>\n \n \tAdd mingw32 support.\n@@ -224,12 +363,6 @@ Tue Aug 19 17:10:56 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* cplus-dem.c: Add 'extern' to prepends_underscore.\n \n-Wed Jul 30 11:42:19 1997  Per Bothner  <bothner@cygnus.com>\n-\n-\t* cplus-dem.c:  Various changes to produce Java output when passed\n-\tDMGL_JAVA.  Thus \"::\" becomes \".\" and \"JArray<Foo>\" becomes \"Foo[]\".\n-\t(main):  Support --java and -j flags to set DMGL_JAVA.\n-\t\n Tue Jul 22 19:05:23 1997  Robert Hoehne <robert.hoehne@Mathematik.TU-Chemnitz.DE>\n \n \t* config/mh-go32 (CC, AR, RANLIB): Don't define."}, {"sha": "9c7ed27485c8d0fcd0a02eb5bf3b07ccdf0d6ce8", "filename": "libiberty/Makefile.in", "status": "modified", "additions": 77, "deletions": 172, "changes": 249, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3affd5f0f4b9f9e7d3ecac2881604692ae52681e/libiberty%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3affd5f0f4b9f9e7d3ecac2881604692ae52681e/libiberty%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FMakefile.in?ref=3affd5f0f4b9f9e7d3ecac2881604692ae52681e", "patch": "@@ -1,6 +1,7 @@\n #\n # Makefile\n-#   Copyright (C) 1990, 91, 92, 93, 94, 95, 96, 1997 Free Software Foundation\n+#   Copyright (C) 1990, 91, 92, 93, 94, 95, 96, 97, 1998\n+#   Free Software Foundation\n #\n # This file is part of the libiberty library.\n # Libiberty is free software; you can redistribute it and/or\n@@ -19,37 +20,22 @@\n # Boston, MA 02111-1307, USA.\n #\n \n-# This file was written, and is maintained by K. Richard Pixley\n-# <rich@cygnus.com>.\n+# This file was written by K. Richard Pixley <rich@cygnus.com>.\n \n #\n # Makefile for libiberty directory\n #\n \n-srcdir = .\n+srcdir = @srcdir@\n+VPATH = @srcdir@\n \n-prefix = /usr/local\n+prefix = @prefix@\n \n-exec_prefix = $(prefix)\n-bindir = $(exec_prefix)/bin\n-libdir = $(exec_prefix)/lib\n+exec_prefix = @exec_prefix@\n+bindir = @bindir@\n+libdir = @libdir@\n \n-datadir = $(prefix)/share\n-\n-mandir = $(prefix)/man\n-man1dir = $(mandir)/man1\n-man2dir = $(mandir)/man2\n-man3dir = $(mandir)/man3\n-man4dir = $(mandir)/man4\n-man5dir = $(mandir)/man5\n-man6dir = $(mandir)/man6\n-man7dir = $(mandir)/man7\n-man8dir = $(mandir)/man8\n-man9dir = $(mandir)/man9\n-infodir = $(prefix)/info\n-includedir = $(prefix)/include\n-\n-SHELL = /bin/sh\n+SHELL = @SHELL@\n \n # Multilib support variables.\n MULTISRCTOP =\n@@ -59,39 +45,25 @@ MULTISUBDIR =\n MULTIDO = true\n MULTICLEAN = true\n \n-INSTALL = $(SHELL) $(srcdir)/../install-sh -c\n-INSTALL_PROGRAM = $(INSTALL)\n-INSTALL_DATA = $(INSTALL)\n+INSTALL = @INSTALL@\n+INSTALL_PROGRAM = @INSTALL_PROGRAM@\n+INSTALL_DATA = @INSTALL_DATA@\n \n-AR = ar\n+AR = @AR@\n AR_FLAGS = rc\n \n-ERRORS_CC = $(CC)\n-CC = cc\n-CFLAGS = -g\n+CC = @CC@\n+CFLAGS = @CFLAGS@\n LIBCFLAGS = $(CFLAGS)\n-MAKEINFO = makeinfo\n-RANLIB = ranlib\n+RANLIB = @RANLIB@\n \n PICFLAG =\n \n MAKEOVERRIDES =\n \n TARGETLIB = libiberty.a\n \n-CONFIG_H = lconfig.h\n-NEEDED_LIST = lneeded-list\n-\n-# HOST_OFILES contains the list of objects that should be in the\n-# library (in addition to the REQUIRED_OFILES and EXTRA_OFILES).\n-# A configuration may override this with a fixed list a object files\n-# names (hard to maintain), or some other way to generate a list.\n-HOST_OFILES=`cat needed-list`\n-\n-# Extra targets that the top-level target depends on.\n-# Specifically, what needs to be made before HOST_OFILES can be used.\n-# Can be empty if HOST_OFILES is just a list of file names.\n-DO_ALSO = needed-list\n+LIBOBJS = @LIBOBJS@\n \n # A configuration can specify extra .o files that should be included,\n # even if they are in libc. (Perhaps the libc version is buggy.)\n@@ -114,60 +86,54 @@ FLAGS_TO_PASS = \\\n \t\"RANLIB=$(RANLIB)\" \\\n \t\"SHELL=$(SHELL)\"\n \n-all: stamp-picdir $(TARGETLIB) required-list\n-\t@if [ \"$(RULE1)\" != \"not-used\" ]; then \\\n-\t  $(MULTIDO) $(FLAGS_TO_PASS) multi-do DO=all; \\\n-\telse true; \\\n-\tfi\n+all: stamp-picdir $(TARGETLIB) needed-list required-list\n+\t@$(MULTIDO) $(FLAGS_TO_PASS) multi-do DO=all\n \n .PHONY: check installcheck\n check installcheck:\n \n-\n-#### Host, target, and site specific Makefile fragments come in here.\n-###\n+@host_makefile_frag@\n \n INCDIR=$(srcdir)/$(MULTISRCTOP)../include\n \n-COMPILE.c = $(CC) -c $(LIBCFLAGS) -I. -I$(INCDIR) $(HDEFINES)\n+COMPILE.c = $(CC) -c @DEFS@ $(LIBCFLAGS) -I. -I$(INCDIR) $(HDEFINES)\n .c.o:\n \ttest x\"$(enable_shared)\" != xyes || \\\n \t  $(COMPILE.c) $(PICFLAG) $< -o pic/$@\n \t$(COMPILE.c) $<\n \n-# The default target just invokes make recursively.\n-# However, the automatic configuration (in config/mh_default).\n-# first causes it to figure out the objects missing in libc.\n info install-info clean-info dvi:\n \n # Include files that are in this directory.\n-HFILES =\n+HFILES = alloca-conf.h\n \n # NOTE: If you add new files to the library, add them to this list\n-# (alphabetical), and add them to REQUIRED_OFILES or 'functions.def'.\n-CFILES = asprintf.c alloca.c argv.c atexit.c basename.c bcmp.c bcopy.c bzero.c \\\n-\t choose-temp.c clock.c concat.c cplus-dem.c fdmatch.c fnmatch.c \\\n-\t getcwd.c getopt.c getopt1.c getpagesize.c getruntime.c \\\n-         floatformat.c hex.c index.c insque.c \\\n-\t memchr.c memcmp.c memcpy.c memmove.c memset.c objalloc.c \\\n-         obstack.c pexecute.c random.c rename.c rindex.c sigsetmask.c spaces.c \\\n-\t strcasecmp.c strncasecmp.c \\\n-         strchr.c strdup.c strerror.c strrchr.c strsignal.c \\\n-         strstr.c strtod.c strtol.c strtoul.c tmpnam.c \\\n-\t vasprintf.c vfork.c vfprintf.c vprintf.c vsprintf.c waitpid.c \\\n-\t xatexit.c xexit.c xmalloc.c xstrdup.c xstrerror.c\n+# (alphabetical), and add them to REQUIRED_OFILES or funcs in\n+# configure.in.\n+CFILES = asprintf.c alloca.c argv.c atexit.c basename.c bcmp.c bcopy.c \\\n+\tbzero.c choose-temp.c clock.c concat.c cplus-dem.c fdmatch.c \\\n+\tfnmatch.c getcwd.c getopt.c getopt1.c getpagesize.c \\\n+\tgetruntime.c floatformat.c hex.c index.c insque.c memchr.c \\\n+\tmemcmp.c memcpy.c memmove.c memset.c objalloc.c obstack.c \\\n+\tpexecute.c random.c rename.c rindex.c sigsetmask.c spaces.c \\\n+\tstrcasecmp.c strncasecmp.c strchr.c strdup.c strerror.c \\\n+\tstrrchr.c strsignal.c strstr.c strtod.c strtol.c strtoul.c \\\n+\ttmpnam.c vasprintf.c vfork.c vfprintf.c vprintf.c vsprintf.c \\\n+\twaitpid.c xatexit.c xexit.c xmalloc.c xstrdup.c xstrerror.c\n+\n # These are always included in the library.\n-REQUIRED_OFILES = argv.o basename.o choose-temp.o concat.o cplus-dem.o \\\n+REQUIRED_OFILES = argv.o choose-temp.o concat.o cplus-dem.o \\\n   fdmatch.o fnmatch.o getopt.o getopt1.o getruntime.o hex.o \\\n   floatformat.o objalloc.o obstack.o pexecute.o spaces.o strerror.o \\\n   strsignal.o xatexit.o xexit.o xmalloc.o xstrdup.o xstrerror.o\n \n-# Do we want/need any config overrides?\n-#\t \n-\n-STAGESTUFF = $(TARGETLIB) *.o\n+$(TARGETLIB): $(REQUIRED_OFILES) $(EXTRA_OFILES) $(LIBOBJS)\n+\trm -f $(TARGETLIB)\n+\t$(AR) $(AR_FLAGS) $(TARGETLIB) \\\n+\t  $(REQUIRED_OFILES) $(EXTRA_OFILES) $(LIBOBJS)\n+\t$(RANLIB) $(TARGETLIB)\n \n-INSTALL_DEST = libdir\n+INSTALL_DEST = @INSTALL_DEST@\n install: install_to_$(INSTALL_DEST)\n \n install_to_libdir: all\n@@ -182,100 +148,26 @@ install_to_tooldir: all\n \tmv -f $(tooldir)/lib$(MULTISUBDIR)/$(TARGETLIB).n $(tooldir)/lib$(MULTISUBDIR)/$(TARGETLIB)\n \t@$(MULTIDO) $(FLAGS_TO_PASS) multi-do DO=install\n \n-# The default configuration adds to libiberty all those functions that are\n-# missing in libc.  More precisely, it includes whatever $(CC) fails to find.\n-# Then a sed+awk combination translates the ld error messages into\n-# a list of .o files.\n-\n-stamp-needed: stamp-picdir $(NEEDED_LIST)\n-\tcp $(NEEDED_LIST) needed-tmp\n-\t$(SHELL) $(srcdir)/$(MULTISRCTOP)../move-if-change needed-tmp needed-list\n-\ttouch stamp-needed\n-\n-needed-list: stamp-needed ; @true\n-\n-lneeded-list: $(EXTRA_OFILES) needed.awk errors\n-\trm -f lneeded-list\n-\tf=\"\"; \\\n-\tfor i in `awk -f needed.awk <errors` $(EXTRA_OFILES) ; do \\\n-\t  case \" $$f \" in \\\n-\t    *\" $$i \"*) ;; \\\n-\t    *) f=\"$$f $$i\" ;; \\\n-\t  esac ; \\\n-\tdone ; \\\n+# needed-list is used by libstdc++.\n+needed-list: Makefile\n+\tf=\"$(LIBOBJS) $(EXTRA_OFILES)\"; \\\n \tcase $$f in \\\n-\t    *alloca.o*) f=\"$$f xmalloc.o xexit.o\" ;; \\\n-\tesac ; \\\n-\techo $$f >>lneeded-list\n-\n-# Generate an awk script that looks for functions in functions.def\n-\n-needed.awk: $(srcdir)/functions.def Makefile\n-\techo \"# !Automatically generated from $(srcdir)/functions.def\"\\\n-\t  \"- DO NOT EDIT!\" >needed.awk\n-\tgrep '^DEF(' < $(srcdir)/functions.def \\\n-\t    | sed -e '/DEF/s|DEF.\\([^,]*\\).*|/\\1/ { printf \"\\1.o \" }|' \\\n-\t    >>needed.awk\n-\n-stamp-config: $(CONFIG_H)\n-\tcp $(CONFIG_H) config.tmp\n-\t$(SHELL) $(srcdir)/$(MULTISRCTOP)../move-if-change config.tmp config.h\n-\ttouch stamp-config\n-\n-config.h: stamp-config ; @true\n-\n-lconfig.h: needed2.awk errors\n-\techo \"/* !Automatically generated from $(srcdir)/functions.def\"\\\n-\t  \"- DO NOT EDIT! */\" >lconfig.h\n-\tawk -f needed2.awk <errors >>lconfig.h\n-\n-# Generate an awk script that looks for variables in functions.def\n-\n-needed2.awk: $(srcdir)/functions.def Makefile\n-\techo \"# !Automatically generated from $(srcdir)/functions.def\"\\\n-\t  \"- DO NOT EDIT!\" >needed2.awk\n-\tgrep '^DEFVAR(' < $(srcdir)/functions.def \\\n-\t | sed -e '/DEFVAR/s|DEFVAR.\\([^,]*\\).*|/\\1/ { printf \"#ifndef NEED_\\1\\\\n#define NEED_\\1\\\\n#endif\\\\n\" }|' \\\n-\t >>needed2.awk\n-\tgrep '^DEFFUNC(' < $(srcdir)/functions.def \\\n-\t | sed -e '/DEFFUNC/s|DEFFUNC.\\([^,]*\\).*|/\\1/ { printf \"#ifndef NEED_\\1\\\\n#define NEED_\\1\\\\n#endif\\\\n\" }|' \\\n-\t >>needed2.awk\n-\n-dummy.o: $(srcdir)/dummy.c $(srcdir)/functions.def\n-\t$(CC) -c $(CFLAGS) -I. -I$(INCDIR) $(HDEFINES) $(srcdir)/dummy.c 2>/dev/null\n-\n-errors: dummy.o $(EXTRA_OFILES)\n-\t-($(ERRORS_CC) -o dummy $(CFLAGS) $(LDFLAGS) $(ERRORS_LDFLAGS) dummy.o $(EXTRA_OFILES) $(LOADLIBES)) >errors 2>&1 || true\n-\n-# required-list is used when building a shared bfd/opcodes/libiberty library.\n+\t  *alloca.o*) f=\"$$f xmalloc.o xexit.o\" ;; \\\n+\tesac; \\\n+\techo $$f > needed-list\n+\n+# required-list was used when building a shared bfd/opcodes/libiberty\n+# library.  I don't know if it used by anything currently.\n required-list: Makefile\n \techo $(REQUIRED_OFILES) > required-list\n \n-$(HOST_OFILES) $(REQUIRED_OFILES) : config.h\n-\n-RULE1 = $(TARGETLIB)\n-$(RULE1): $(REQUIRED_OFILES) $(DO_ALSO) .always.\n-\t@$(MAKE) RULE1=not-used RULE2=$(TARGETLIB) $(FLAGS_TO_PASS) \\\n-\t\t\"HOST_OFILES=$(HOST_OFILES)\"\n-\n-# Rule invoked by recursive make in $(RULE1).\n-RULE2 = not-used\n-$(RULE2): $(REQUIRED_OFILES) $(HOST_OFILES)\n-\trm -rf $(TARGETLIB)\n-\t$(AR) $(AR_FLAGS) $(TARGETLIB) \\\n-\t  $(REQUIRED_OFILES) $(HOST_OFILES)\n-\t$(RANLIB) $(TARGETLIB)\n-\n stamp-picdir:\n \tif [ x\"$(enable_shared)\" = xyes ] && [ ! -d pic ]; then \\\n \t  mkdir pic; \\\n \telse true; fi\n \ttouch stamp-picdir\n \n-.always.:\n-# Do nothing.\n-\n-.PHONY: all etags tags ls clean stage1 stage2 .always.\n+.PHONY: all etags tags ls clean stage1 stage2\n \n etags tags: TAGS\n \n@@ -308,28 +200,41 @@ maintainer-clean realclean: distclean\n \n force:\n \n-Makefile: $(srcdir)/Makefile.in $(host_makefile_frag) $(target_makefile_frag)\n-\t$(SHELL) ./config.status\n+Makefile: $(srcdir)/Makefile.in config.status\n+\tCONFIG_FILES=Makefile CONFIG_HEADERS= $(SHELL) ./config.status\n+\n+config.h: stamp-h ; @true\n+stamp-h: config.in config.status\n+\tCONFIG_FILES= CONFIG_HEADERS=config.h:config.in $(SHELL) ./config.status\n+\n+config.status: $(srcdir)/configure $(srcdir)/config.table\n+\t$(SHELL) ./config.status --recheck\n \n-argv.o: $(INCDIR)/libiberty.h\n+alloca.o: config.h\n+atexit.o: config.h\n+argv.o: config.h alloca-conf.h $(INCDIR)/libiberty.h\n basename.o: $(INCDIR)/libiberty.h\n+choose-temp.o: config.h\n+clock.o: config.h\n concat.o: $(INCDIR)/libiberty.h\n cplus-dem.o: $(INCDIR)/demangle.h\n fdmatch.o: $(INCDIR)/libiberty.h\n-fnmatch.o: $(INCDIR)/fnmatch.h\n-getopt.o: $(INCDIR)/getopt.h\n-getopt1.o: $(INCDIR)/getopt.h\n-getruntime.o: $(INCDIR)/libiberty.h\n+fnmatch.o: config.h $(INCDIR)/fnmatch.h\n+getcwd.o: config.h\n+getopt.o: config.h $(INCDIR)/getopt.h\n+getopt1.o: config.h $(INCDIR)/getopt.h\n+getpagesize.o: config.h\n+getruntime.o: config.h $(INCDIR)/libiberty.h\n hex.o: $(INCDIR)/libiberty.h\n floatformat.o: $(INCDIR)/floatformat.h\n objalloc.o: $(INCDIR)/objalloc.h\n obstack.o: $(INCDIR)/obstack.h\n-pexecute.o: $(INCDIR)/libiberty.h\n+pexecute.o: config.h $(INCDIR)/libiberty.h\n spaces.o: $(INCDIR)/libiberty.h\n-strerror.o: $(INCDIR)/libiberty.h\n-strsignal.o: $(INCDIR)/libiberty.h\n+strerror.o: config.h $(INCDIR)/libiberty.h\n+strsignal.o: config.h $(INCDIR)/libiberty.h\n xatexit.o: $(INCDIR)/libiberty.h\n xexit.o: $(INCDIR)/libiberty.h\n xmalloc.o: $(INCDIR)/libiberty.h\n xstrdup.o: $(INCDIR)/libiberty.h\n-xstrerror.o: $(INCDIR)/libiberty.h\n+xstrerror.o: config.h $(INCDIR)/libiberty.h"}, {"sha": "9f5226a6b1dd31022a3a887595190993412b6312", "filename": "libiberty/README", "status": "modified", "additions": 23, "deletions": 86, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3affd5f0f4b9f9e7d3ecac2881604692ae52681e/libiberty%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3affd5f0f4b9f9e7d3ecac2881604692ae52681e/libiberty%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FREADME?ref=3affd5f0f4b9f9e7d3ecac2881604692ae52681e", "patch": "@@ -27,62 +27,29 @@ that are \"optional\" will be included in the library only if \"needed.\"\n To add a new required file, edit Makefile to add the source file\n name to CFILES and the object file to REQUIRED_OFILES.\n \n-Adding a new optional file is more fragile.  As a general rule,\n-an optional file will be included in the library if it provides\n-functionality missing in the \"standard\" C library.\n-For most hosts, the Makefile automatically figures out which\n-functionality is missing by compiling and linking a dummy test\n-program, and examining the error messages.\n-\n-So to get this to work, you should do the following:\n-\n-1) Select one function defined in the file you're adding.\n-For example, the getcwd function.\n-2) Add that function to the list in the file functions.def.\n-3) The name of the new file must be the same as the function\n-you've chosen with the .c suffix added.  E.g. getcwd() must be\n-defined in getcwd.c.  (The file can define other functions as well.)\n-4) In Makefile.in, add the name of the source file (e.g. getcwd.c)\n-to CFILES.\n-\n-The file you've added (e.g. getcwd.c) should compile and work\n-on all hosts where it is needed (e.g. not found when linking\n-the dummy.c program).  It does not have to work or even\n-compile on hosts where it is not needed.\n+To add a new optional file, it must provide a single function, and the\n+name of the function must be the same as the name of the file.\n+\n+    * Add the source file name to CFILES.\n+\n+    * Add the function to name to the funcs shell variable in\n+      configure.in.\n \n-HOW THE AUTOMATIC CONFIGURATION WORKS\n-=====================================\n-\n-The libiberty.a target (in RULE1) depends on $(DO_ALSO).\n-For normal configurations, DO_ALSO=needed-list.\n-\n-So needed-list is first made.  The needed-list rule compiles\n-dummy.c.  Because dummy.c includes functions.def, the\n-resulting object file will contain a call to each of the\n-optional functions (for simplicity assume each optional file\n-defines a single function).  This object file will be linked\n-against the standard libraries (as defined by using $(CC)\n-and various flags).  Any function missing will causes the\n-linker to emit an error message.  We assume the name\n-of the missing function(s) are in the error message(s).\n-The awk script find-needed.awk has been generated from\n-functions.def.  It is used to search the linker output\n-messages for words that match the functions listed in\n-functions.def.  The list of functions found is written\n-on a single line to the file needed-list.\n-\n-After needed-list has been generated, the libiberty.a\n-target (in RULE1) just calls 'make' recursively.\n-It passes the contents of needed-list using the\n-definition (expanded) HOST_OFILES=\"`cat needed-list`\".\n-It also tells the inferior 'make' to use RULE2.\n-\n-The inferior 'make' is very conventional:  The main\n-rule is $(RULE2) (which is libiberty.a).  It depends\n-on a list of object files: $(REQUIRED_OFILES) $(HOST_OFILES)\n-(and $(EXTRA_OFILES), which is usually empty).  The superior\n-'make' passes in $(HOST_OFILES); the others are fixed\n-in the Makefile.\n+    * Add the function to the AC_CHECK_FUNCS lists just after the\n+      setting of the funcs shell variable.  These AC_CHECK_FUNCS calls\n+      are never executed; they are there to make autoheader work\n+      better.\n+\n+    * Consider the special cases of building libiberty; as of this\n+      writing, the special cases are newlib and VxWorks.  If a\n+      particular special case provides the function, you do not need\n+      to do anything.  If it does not provide the function, add the\n+      object file to LIBOBJS, and add the function name to the case\n+      controlling whether to define HAVE_func.\n+\n+The optional file you've added (e.g. getcwd.c) should compile and work\n+on all hosts where it is needed.  It does not have to work or even\n+compile on hosts where it is not needed.\n \n ADDING A NEW CONFIGURATION\n ==========================\n@@ -95,34 +62,4 @@ If the fully automatic scheme doesn't work, you may be able to get\n by with defining EXTRA_OFILES in your Makefile stub.  This is\n a list of object file names that should be treated as required\n for this configuration - they will be included in libiberty.a,\n-regardless of whatever might be in the C library.  Moreover,\n-when the dummy.c program is linked, it will be linked with\n-$(EXTRA_OFILES).  Therefore, if a function in functions.def\n-is defined by one of the EXTRA_OFILES, it will not be listed as\n-\"needed\".  Thus if your hal9000 host needs a special implementation\n-of getcwd, you can just create hal9000-getcwd.c, and define:\n-\tEXTRA_OFILES=hal9000-getcwd.o\n-Or if you want to use the libiberty version of strstr(),\n-even though there is a version in the C library (it might be\n-buggy or slow), just define:\n-\tEXTRA_OFILES=strstr.o\n-\n-You can create a \"manual\" host configuration FOO with a file\n-config/mh-FOO.  In it, the HOST_OFILES macro should explicitly\n-list that subset of the optional files that should be in the\n-library.  You should also set:\n-\tDO_ALSO =\n-This overrides all of the magic needed to automatically\n-determine which files are \"needed.\"  However, keeping that list\n-up to date is another matter...\n-\n-HOW THE MANUAL CONFIGURATION WORKS\n-==================================\n-\n-This also uses a recursive make, but the superior make\n-does not do anything interesting - it just calls the\n-inferior make with HOST_OFILES defined as $(HOST_OFILES),\n-which is the list you created in your configuration.\n-\n-You probably don't want to depend on manual configuration,\n-because keeping the HOST_OFILES list up-to-date will be a pain.\n+regardless of whatever might be in the C library."}, {"sha": "c909573f58c63465236a0ff310b93140d40c7acd", "filename": "libiberty/alloca-botch.h", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe806bddb81ada7a8797cf387ff7c1427ed3d6bb/libiberty%2Falloca-botch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe806bddb81ada7a8797cf387ff7c1427ed3d6bb/libiberty%2Falloca-botch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Falloca-botch.h?ref=fe806bddb81ada7a8797cf387ff7c1427ed3d6bb", "patch": "@@ -1,5 +0,0 @@\n-/* RS/6000 AIX botched alloca and requires a pragma, which ordinary compilers\n-   throw up about, so we have to put it in a specially-configured file.\n-   Like this one.  */\n-\n-#pragma alloca"}, {"sha": "bda4fc049adfe421dc66f21cc546ae696fbcae48", "filename": "libiberty/alloca-norm.h", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe806bddb81ada7a8797cf387ff7c1427ed3d6bb/libiberty%2Falloca-norm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe806bddb81ada7a8797cf387ff7c1427ed3d6bb/libiberty%2Falloca-norm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Falloca-norm.h?ref=fe806bddb81ada7a8797cf387ff7c1427ed3d6bb", "patch": "@@ -1,25 +0,0 @@\n-/* \"Normal\" configuration for alloca.  */\n-\n-#ifdef __GNUC__\n-#ifndef alloca\n-#define alloca __builtin_alloca\n-#endif\n-#else /* ! defined (__GNUC__) */\n-#if defined (sparc) && defined (sun)\n-#include <alloca.h>\n-#ifdef __STDC__\n-extern void *__builtin_alloca();\n-#else /* ! defined (__STDC__) */\n-extern char *__builtin_alloca();  /* Stupid include file doesn't declare it */\n-#endif /* ! defined (__STDC__) */\n-#else /* ! defined (sparc) || ! defined (sun) */\n-#ifdef __STDC__\n-PTR alloca (size_t);\n-#else /* ! defined (__STDC__) */\n-PTR alloca ();\t\t\t/* must agree with functions.def */\n-#endif /* ! defined (__STDC__) */\n-#endif /* ! defined (sparc) || ! defined (sun) */\n-#ifdef _WIN32\n-#include <malloc.h>\n-#endif\n-#endif /* ! defined (__GNUC__) */"}, {"sha": "137d985e4cbc5ed18e577fa5a91ee0d678878a8e", "filename": "libiberty/atexit.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3affd5f0f4b9f9e7d3ecac2881604692ae52681e/libiberty%2Fatexit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3affd5f0f4b9f9e7d3ecac2881604692ae52681e/libiberty%2Fatexit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fatexit.c?ref=3affd5f0f4b9f9e7d3ecac2881604692ae52681e", "patch": "@@ -1,7 +1,10 @@\n /* Wrapper to implement ANSI C's atexit using SunOS's on_exit. */\n /* This function is in the public domain.  --Mike Stump. */\n \n-#ifndef NEED_on_exit\n+#include \"config.h\"\n+\n+#ifdef HAVE_ON_EXIT\n+\n int\n atexit(f)\n      void (*f)();\n@@ -11,4 +14,5 @@ atexit(f)\n   on_exit (f, 0);\n   return 0;\n }\n+\n #endif"}, {"sha": "f544c853910c243cc58302176f22fcd431ff6b90", "filename": "libiberty/basename.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3affd5f0f4b9f9e7d3ecac2881604692ae52681e/libiberty%2Fbasename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3affd5f0f4b9f9e7d3ecac2881604692ae52681e/libiberty%2Fbasename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fbasename.c?ref=3affd5f0f4b9f9e7d3ecac2881604692ae52681e", "patch": "@@ -20,10 +20,6 @@ BUGS\n #include \"ansidecl.h\"\n #include \"libiberty.h\"\n \n-#include \"config.h\"\n-\n-#ifdef NEED_basename\n-\n char *\n basename (name)\n      const char *name;\n@@ -39,5 +35,3 @@ basename (name)\n     }\n   return (char *) base;\n }\n-\n-#endif"}, {"sha": "b204566ff25c9e5aec175dd6edd56a715512d36f", "filename": "libiberty/clock.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3affd5f0f4b9f9e7d3ecac2881604692ae52681e/libiberty%2Fclock.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3affd5f0f4b9f9e7d3ecac2881604692ae52681e/libiberty%2Fclock.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fclock.c?ref=3affd5f0f4b9f9e7d3ecac2881604692ae52681e", "patch": "@@ -22,13 +22,15 @@ the resulting executable to be covered by the GNU General Public License.\n This exception does not however invalidate any other reasons why\n the executable file might be covered by the GNU General Public License. */\n \n+#include \"config.h\"\n+\n #ifdef HAVE_GETRUSAGE\n #include <sys/time.h>\n #include <sys/resource.h>\n #endif\n \n #ifdef HAVE_TIMES\n-#ifndef NO_SYS_PARAM_H\n+#ifdef HAVE_SYS_PARAM_H\n #include <sys/param.h>\n #endif\n #include <sys/times.h>"}, {"sha": "07f4baf8b0638033711deb25d064f389fc1ae96d", "filename": "libiberty/config.table", "status": "modified", "additions": 3, "deletions": 42, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3affd5f0f4b9f9e7d3ecac2881604692ae52681e/libiberty%2Fconfig.table", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3affd5f0f4b9f9e7d3ecac2881604692ae52681e/libiberty%2Fconfig.table", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfig.table?ref=3affd5f0f4b9f9e7d3ecac2881604692ae52681e", "patch": "@@ -1,50 +1,10 @@\n case \"${host}\" in\n   rs6000-ibm-aix3.1 | rs6000-ibm-aix)\n-                        frag=mh-aix\n-\t\t\tfiles=${xsrcdir}alloca-botch.h ;;\n-  *-ibm-aix*)\t\tfiles=${xsrcdir}alloca-botch.h ;;\n-  arm-*-riscix*)\tfrag=mh-riscix ;;\n-  m68k-apollo-bsd*)\tfrag=mh-a68bsd ;;\n-  m68k-apollo-sysv*)\tfrag=mh-apollo68 ;;\n-  i[3456]86-ncr-sysv4*)\tfrag=mh-ncr3000 ;;\n+                        frag=mh-aix ;;\n   *-*-cxux7*)\t\tfrag=mh-cxux7 ;;\n-  *-*-cygwin32)\t\tfrag=mh-cygwin32 ;;\n-  *-*-dgux*)\t\tfrag=mh-sysv ;;\n   *-*-freebsd2.1.*)\tfrag=mh-fbsd21 ;;\n   *-*-freebsd2.2.*)\tfrag=mh-fbsd21 ;;\n-  hppa*-hp-bsd*)\tfrag=mh-hpbsd ;;\n-  *-*-hpux*)\t\tfrag=mh-hpux ;;\n-  *-*-hiux*)\t\tfrag=mh-hpux ;;\n-  *-*-irix4*)\t\tfrag=mh-irix4 ;;\n-  *-*-irix*)\t\tfrag=mh-sysv ;;\n-  *-*-m88kbcs*)\t\tfrag=mh-sysv ;;\n-  *-*-solaris2*)\tfrag=mh-sysv4 ;;\n-  *-*-sysv4*)\t\tfrag=mh-sysv4 ;;\n-  *-*-sysv*)\t\tfrag=mh-sysv ;;\n-  *-*-go32)\t\tfrag=mh-go32 ;;\n   i[345]86-*-windows*)\tfrag=mh-windows ;;\n-\n-  *-*-vxworks5* | *-*-vxworks)\n-    # VxWorks 5 needs special action, because the usual\n-    # autoconfiguration scheme does not work.\n-    frag=mt-vxworks5\n-    ;;\n-\n-  i[3456]86-*-mingw32*)\n-    # Mingw32 does not require strerror.o from REQUIRED_OFILES.\n-    # Worse: it will not compile it because of an incompatible sys_errlist\n-    # definition.\n-    frag=mt-mingw32\n-    ;;\n-esac\n-\n-# Try to handle funky case of solaris 2 -> sun 4.\n-case \"${host}\" in\n-  sparc-sun-sunos4.1.3)\n-\tif [ \"${with_cross_host}\" != \"${host}\" ] ; then\n-\t   frag=mt-sunos4\n-\tfi\n-  ;;\n esac\n \n frags=$frag\n@@ -57,6 +17,7 @@ case \"${enable_shared}\" in\n esac\n if [ \"${shared}\" = \"yes\" ]; then\n   case \"${host}\" in\n+    *-*-cygwin32*) ;;\n     hppa*-*-*)\t   frags=\"${frags} ../../config/mh-papic\" ;;\n     i[3456]86-*-*) frags=\"${frags} ../../config/mh-x86pic\" ;;\n     *-*-*)\t   frags=\"${frags} ../../config/mh-${host_cpu}pic\" ;;\n@@ -83,4 +44,4 @@ for frag in ${frags}; do\n done\n \n frag=xhost-mkfrag\n-${config_shell} ${moveifchange} temp-frag xhost-mkfrag\n+${CONFIG_SHELL} ${libiberty_topdir}/move-if-change temp-frag xhost-mkfrag"}, {"sha": "3c5a237e60ba82be4a9b7d8659b65d3e25b0194d", "filename": "libiberty/config/mh-a68bsd", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe806bddb81ada7a8797cf387ff7c1427ed3d6bb/libiberty%2Fconfig%2Fmh-a68bsd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe806bddb81ada7a8797cf387ff7c1427ed3d6bb/libiberty%2Fconfig%2Fmh-a68bsd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfig%2Fmh-a68bsd?ref=fe806bddb81ada7a8797cf387ff7c1427ed3d6bb", "patch": "@@ -1,2 +0,0 @@\n-RANLIB=ranlib\n-CC= cc -A ansi -A runtype,any -A systype,any -U__STDC__"}, {"sha": "6b645058fa9da9743fb6addceb213b3fee333d1f", "filename": "libiberty/config/mh-aix", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3affd5f0f4b9f9e7d3ecac2881604692ae52681e/libiberty%2Fconfig%2Fmh-aix", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3affd5f0f4b9f9e7d3ecac2881604692ae52681e/libiberty%2Fconfig%2Fmh-aix", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfig%2Fmh-aix?ref=3affd5f0f4b9f9e7d3ecac2881604692ae52681e", "patch": "@@ -1,7 +1,5 @@\n # This file is only needed by AIX 3.1.\n HDEFINES = -D__IEEE_BIG_ENDIAN\n-RANLIB=true\n-INSTALL=cp\n \n # Most releases of AIX 3.1 include an incorrect internal version of copysign\n # in libc.a for use by some libc public functions including modf.  The public"}, {"sha": "651770ce31cd1be467a8698fb050a788d92fc354", "filename": "libiberty/config/mh-apollo68", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe806bddb81ada7a8797cf387ff7c1427ed3d6bb/libiberty%2Fconfig%2Fmh-apollo68", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe806bddb81ada7a8797cf387ff7c1427ed3d6bb/libiberty%2Fconfig%2Fmh-apollo68", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfig%2Fmh-apollo68?ref=fe806bddb81ada7a8797cf387ff7c1427ed3d6bb", "patch": "@@ -1,2 +0,0 @@\n-RANLIB=true\n-CC= cc -A ansi -A runtype,any -A systype,any -U__STDC__"}, {"sha": "42b1afb64c03d599bea68085f7a2709ae4a5303e", "filename": "libiberty/config/mh-cygwin32", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe806bddb81ada7a8797cf387ff7c1427ed3d6bb/libiberty%2Fconfig%2Fmh-cygwin32", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe806bddb81ada7a8797cf387ff7c1427ed3d6bb/libiberty%2Fconfig%2Fmh-cygwin32", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfig%2Fmh-cygwin32?ref=fe806bddb81ada7a8797cf387ff7c1427ed3d6bb", "patch": "@@ -1,2 +0,0 @@\n-HDEFINES=-DNEED_sys_siglist -DNEED_basename -DNEED_strsignal\n-EXTRA_OFILES=random.o"}, {"sha": "919290ef539617d32cd5683d61686025e8795d14", "filename": "libiberty/config/mh-go32", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe806bddb81ada7a8797cf387ff7c1427ed3d6bb/libiberty%2Fconfig%2Fmh-go32", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe806bddb81ada7a8797cf387ff7c1427ed3d6bb/libiberty%2Fconfig%2Fmh-go32", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfig%2Fmh-go32?ref=fe806bddb81ada7a8797cf387ff7c1427ed3d6bb", "patch": "@@ -1 +0,0 @@\n-HDEFINES=-DHAVE_GETRUSAGE"}, {"sha": "ce11dcd6ac980b948d0e793697efacccdd419035", "filename": "libiberty/config/mh-hpbsd", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe806bddb81ada7a8797cf387ff7c1427ed3d6bb/libiberty%2Fconfig%2Fmh-hpbsd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe806bddb81ada7a8797cf387ff7c1427ed3d6bb/libiberty%2Fconfig%2Fmh-hpbsd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfig%2Fmh-hpbsd?ref=fe806bddb81ada7a8797cf387ff7c1427ed3d6bb", "patch": "@@ -1,2 +0,0 @@\n-# HPPA hosts using BSD\n-RANLIB=true"}, {"sha": "ace76782712210c099dab9782a7097b34f8bd865", "filename": "libiberty/config/mh-irix4", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe806bddb81ada7a8797cf387ff7c1427ed3d6bb/libiberty%2Fconfig%2Fmh-irix4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe806bddb81ada7a8797cf387ff7c1427ed3d6bb/libiberty%2Fconfig%2Fmh-irix4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfig%2Fmh-irix4?ref=fe806bddb81ada7a8797cf387ff7c1427ed3d6bb", "patch": "@@ -1,4 +0,0 @@\n-CC = cc -cckr\n-RANLIB = true\n-INSTALL = cp\n-EXTRA_OFILES = alloca.o"}, {"sha": "3a45c22b128128ff642102bb412d027e88936781", "filename": "libiberty/config/mh-ncr3000", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe806bddb81ada7a8797cf387ff7c1427ed3d6bb/libiberty%2Fconfig%2Fmh-ncr3000", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe806bddb81ada7a8797cf387ff7c1427ed3d6bb/libiberty%2Fconfig%2Fmh-ncr3000", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfig%2Fmh-ncr3000?ref=fe806bddb81ada7a8797cf387ff7c1427ed3d6bb", "patch": "@@ -1,19 +0,0 @@\n-# Host configuration file for an NCR 3000 (i486/SVR4) system.\n-\n-# The NCR 3000 ships with a MetaWare compiler installed as /bin/cc.\n-# This compiler not only emits obnoxious copyright messages every time\n-# you run it, but it chokes and dies on a whole bunch of GNU source\n-# files.  Default to using the AT&T compiler installed in /usr/ccs/ATT/cc.\n-# Unfortunately though, the AT&T compiler sometimes generates code that\n-# the assembler barfs on if -g is used, so disable it by default as well.\n-CC = /usr/ccs/ATT/cc\n-CFLAGS =\n-\n-RANLIB = true\n-\n-# The /usr/ucb/install program is incompatible (complains about unknown\n-# group staff).  Use good old cp...\n-INSTALL = cp\n-\n-# The l flag generates a warning from the SVR4 archiver, remove it.\n-AR_FLAGS = cq"}, {"sha": "0209279de56a0f88a955d15282f4077b0931f6c7", "filename": "libiberty/config/mh-riscix", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe806bddb81ada7a8797cf387ff7c1427ed3d6bb/libiberty%2Fconfig%2Fmh-riscix", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe806bddb81ada7a8797cf387ff7c1427ed3d6bb/libiberty%2Fconfig%2Fmh-riscix", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfig%2Fmh-riscix?ref=fe806bddb81ada7a8797cf387ff7c1427ed3d6bb", "patch": "@@ -1,6 +0,0 @@\n-# The native linker only reports the first undefined symbol if linking with a\n-# shared library.  So build using gcc and link statically (this requires \n-# gcc 2.6.0 or above).\n-\n-ERRORS_CC = gcc\n-ERRORS_LDFLAGS = -static"}, {"sha": "eb102d5501089914ca357aa07ba38857cdea7977", "filename": "libiberty/config/mh-sysv", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe806bddb81ada7a8797cf387ff7c1427ed3d6bb/libiberty%2Fconfig%2Fmh-sysv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe806bddb81ada7a8797cf387ff7c1427ed3d6bb/libiberty%2Fconfig%2Fmh-sysv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfig%2Fmh-sysv?ref=fe806bddb81ada7a8797cf387ff7c1427ed3d6bb", "patch": "@@ -1 +0,0 @@\n-RANLIB=true"}, {"sha": "4d1aa3cd61d54be50176194aca1bd343554806da", "filename": "libiberty/config/mh-sysv4", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe806bddb81ada7a8797cf387ff7c1427ed3d6bb/libiberty%2Fconfig%2Fmh-sysv4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe806bddb81ada7a8797cf387ff7c1427ed3d6bb/libiberty%2Fconfig%2Fmh-sysv4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfig%2Fmh-sysv4?ref=fe806bddb81ada7a8797cf387ff7c1427ed3d6bb", "patch": "@@ -1,3 +0,0 @@\n-HDEFINES = -DHAVE_SYSCONF\n-RANLIB=true\n-INSTALL = cp"}, {"sha": "3ff5f794e9f88a60d35f68ac5de7da620f767c93", "filename": "libiberty/config/mh-windows", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3affd5f0f4b9f9e7d3ecac2881604692ae52681e/libiberty%2Fconfig%2Fmh-windows", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3affd5f0f4b9f9e7d3ecac2881604692ae52681e/libiberty%2Fconfig%2Fmh-windows", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfig%2Fmh-windows?ref=3affd5f0f4b9f9e7d3ecac2881604692ae52681e", "patch": "@@ -1,2 +1 @@\n-HDEFINES=-DNEED_basename -DNEED_sys_siglist -DNEED_strsignal -DNO_SYS_FILE_H\n EXTRA_OFILES=asprintf.o strcasecmp.o strncasecmp.o vasprintf.o"}, {"sha": "2fb17d783d0380922d8e859783923d0cace273e5", "filename": "libiberty/config/mt-mingw32", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe806bddb81ada7a8797cf387ff7c1427ed3d6bb/libiberty%2Fconfig%2Fmt-mingw32", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe806bddb81ada7a8797cf387ff7c1427ed3d6bb/libiberty%2Fconfig%2Fmt-mingw32", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfig%2Fmt-mingw32?ref=fe806bddb81ada7a8797cf387ff7c1427ed3d6bb", "patch": "@@ -1,27 +0,0 @@\n-# Mingw32 target Makefile fragment.\n-# The autoconfiguration fails for a Mingw32 target, because of an\n-# incompatible definition of sys_errlist, which is imported from a DLL.\n-# Therefore, we compute the dependencies by hand.\n-\n-HDEFINES = -DNO_SYS_PARAM_H -DNO_SYS_FILE_H\n-CONFIG_H = mgconfig.h\n-NEEDED_LIST = mgneeded-list\n-\n-mgconfig.h: Makefile\n-\tif [ -f ../newlib/Makefile ]; then \\\n-\t  $(MAKE) $(FLAGS_TO_PASS) xconfig.h; \\\n-\t  cp xconfig.h mgconfig.h; \\\n-\telse \\\n-\t  echo \"#define NEED_sys_siglist 1\" >>mgconfig.h; \\\n-\t  echo \"#define NEED_strsignal 1\" >>mgconfig.h; \\\n-\t  echo \"#define NEED_psignal 1\" >>mgconfig.h; \\\n-\t  echo \"#define NEED_basename 1\" >>mgconfig.h; \\\n-\tfi\n-\n-mgneeded-list: Makefile\n-\tif [ -f ../newlib/Makefile ]; then \\\n-\t  $(MAKE) $(FLAGS_TO_PASS) xneeded-list; \\\n-\t  cp xneeded-list mgneeded-list; \\\n-\telse \\\n-\t  echo getopt.o vasprintf.o >mgneeded-list; \\\n-\tfi"}, {"sha": "c25baa6ead68dc5fe74c031f1abfd065a37d5d81", "filename": "libiberty/config/mt-sunos4", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe806bddb81ada7a8797cf387ff7c1427ed3d6bb/libiberty%2Fconfig%2Fmt-sunos4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe806bddb81ada7a8797cf387ff7c1427ed3d6bb/libiberty%2Fconfig%2Fmt-sunos4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfig%2Fmt-sunos4?ref=fe806bddb81ada7a8797cf387ff7c1427ed3d6bb", "patch": "@@ -1,2 +0,0 @@\n-XTRAFLAGS = -isystem /s1/cygnus/dejagnu/sparc-sun-sunos4.1.3/include/\n-LOADLIBES = -L/s1/cygnus/dejagnu/sparc-sun-sunos4.1.3/lib"}, {"sha": "916d69e55214bbf18543b51d84ce0f301354ea78", "filename": "libiberty/config/mt-vxworks5", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe806bddb81ada7a8797cf387ff7c1427ed3d6bb/libiberty%2Fconfig%2Fmt-vxworks5", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe806bddb81ada7a8797cf387ff7c1427ed3d6bb/libiberty%2Fconfig%2Fmt-vxworks5", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfig%2Fmt-vxworks5?ref=fe806bddb81ada7a8797cf387ff7c1427ed3d6bb", "patch": "@@ -1,28 +0,0 @@\n-# VxWorks 5.x target Makefile fragment.\n-# The autoconfiguration fails for a VxWorks target, because the\n-# libraries are actually on the target board, not in the file system.\n-# Therefore, we compute the dependencies by hand.\n-\n-HDEFINES = -DNO_SYS_PARAM_H -DNO_SYS_FILE_H\n-CONFIG_H = vxconfig.h\n-NEEDED_LIST = vxneeded-list\n-\n-vxconfig.h: Makefile\n-\tif [ -f ../newlib/Makefile ]; then \\\n-\t  $(MAKE) $(FLAGS_TO_PASS) xconfig.h; \\\n-\t  cp xconfig.h vxconfig.h; \\\n-\telse \\\n-\t  echo \"#define NEED_sys_nerr 1\" >vxconfig.h; \\\n-\t  echo \"#define NEED_sys_errlist 1\" >>vxconfig.h; \\\n-\t  echo \"#define NEED_sys_siglist 1\" >>vxconfig.h; \\\n-\t  echo \"#define NEED_strsignal 1\" >>vxconfig.h; \\\n-\t  echo \"#define NEED_psignal 1\" >>vxconfig.h; \\\n-\tfi\n-\n-vxneeded-list: Makefile\n-\tif [ -f ../newlib/Makefile ]; then \\\n-\t  $(MAKE) $(FLAGS_TO_PASS) xneeded-list; \\\n-\t  cp xneeded-list vxneeded-list; \\\n-\telse \\\n-\t  echo getopt.o getpagesize.o insque.o random.o strcasecmp.o strncasecmp.o strdup.o vfork.o waitpid.o vasprintf.o >vxneeded-list; \\\n-\tfi"}, {"sha": "18881ac2f75d5f184daba1365828eb348bc72ecb", "filename": "libiberty/configure.bat", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3affd5f0f4b9f9e7d3ecac2881604692ae52681e/libiberty%2Fconfigure.bat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3affd5f0f4b9f9e7d3ecac2881604692ae52681e/libiberty%2Fconfigure.bat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure.bat?ref=3affd5f0f4b9f9e7d3ecac2881604692ae52681e", "patch": "@@ -5,7 +5,6 @@ echo Configuring libiberty for go32\n copy Makefile.dos Makefile\r\n echo #define NEED_sys_siglist 1 >> config.h\r\n echo #define NEED_psignal 1 >> config.h\r\n-update alloca-normal.h alloca-conf.h\r\n goto exit\r\n \r\n :h8300\r"}, {"sha": "05a9df1e975a441d5ca196fe051c558cb9c0460a", "filename": "libiberty/configure.in", "status": "modified", "additions": 316, "deletions": 54, "changes": 370, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3affd5f0f4b9f9e7d3ecac2881604692ae52681e/libiberty%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3affd5f0f4b9f9e7d3ecac2881604692ae52681e/libiberty%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure.in?ref=3affd5f0f4b9f9e7d3ecac2881604692ae52681e", "patch": "@@ -1,66 +1,328 @@\n-# This file is a shell script fragment that supplies the information\n-# necessary for a configure script to process the program in\n-# this directory.  For more information, look at ../configure.\n+dnl Process this file with autoconf to produce a configure script\n \n-configdirs=\n-srctrigger=getopt1.c\n-srcname=\"-liberty library\"\n+AC_PREREQ(2.5)\n+AC_INIT(pexecute.c)\n \n-# per-host:\n+dnl We use these options to decide which functions to include.\n+AC_ARG_WITH(target-subdir,\n+[  --with-target-subdir=SUBDIR      Configuring with a cross compiler])\n+AC_ARG_WITH(newlib,\n+[  --with-newlib                    Configuring with newlib])\n \n-files=\"alloca-norm.h\"\n-links=\"alloca-conf.h\"\n+if test \"${srcdir}\" = \".\"; then\n+  if test -z \"${with_target_subdir}\"; then\n+    libiberty_topdir=\"${srcdir}/..\"\n+  else\n+    if test \"${with_target_subdir}\" != \".\"; then\n+      libiberty_topdir=\"${srcdir}/${with_multisrctop}../..\"\n+    else\n+      libiberty_topdir=\"${srcdir}/${with_multisrctop}..\"\n+    fi\n+  fi\n+else\n+  libiberty_topdir=\"${srcdir}/..\"\n+fi\n+AC_CONFIG_AUX_DIR($libiberty_topdir)\n+\n+AC_CANONICAL_HOST\n+\n+dnl When we start using automake:\n+dnl AM_INIT_AUTOMAKE(libiberty, 1.0)\n+\n+dnl These must be called before AM_PROG_LIBTOOL, because it may want\n+dnl to call AC_CHECK_PROG.\n+AC_CHECK_TOOL(AR, ar)\n+AC_CHECK_TOOL(RANLIB, ranlib, :)\n+\n+# FIXME: We temporarily define our own version of AC_PROG_CC.  This is\n+# copied from autoconf 2.12, but does not call AC_PROG_CC_WORKS.  We\n+# are probably using a cross compiler, which will not be able to fully\n+# link an executable.  This should really be fixed in autoconf\n+# itself.\n+\n+AC_DEFUN(LIB_AC_PROG_CC,\n+[AC_BEFORE([$0], [AC_PROG_CPP])dnl\n+AC_PROVIDE([AC_PROG_CC])\n+AC_CHECK_PROG(CC, gcc, gcc)\n+if test -z \"$CC\"; then\n+  AC_CHECK_PROG(CC, cc, cc, , , /usr/ucb/cc)\n+  test -z \"$CC\" && AC_MSG_ERROR([no acceptable cc found in \\$PATH])\n+fi\n+\n+AC_PROG_CC_GNU\n+\n+if test $ac_cv_prog_gcc = yes; then\n+  GCC=yes\n+dnl Check whether -g works, even if CFLAGS is set, in case the package\n+dnl plays around with CFLAGS (such as to build both debugging and\n+dnl normal versions of a library), tasteless as that idea is.\n+  ac_test_CFLAGS=\"${CFLAGS+set}\"\n+  ac_save_CFLAGS=\"$CFLAGS\"\n+  CFLAGS=\n+  AC_PROG_CC_G\n+  if test \"$ac_test_CFLAGS\" = set; then\n+    CFLAGS=\"$ac_save_CFLAGS\"\n+  elif test $ac_cv_prog_cc_g = yes; then\n+    CFLAGS=\"-g -O2\"\n+  else\n+    CFLAGS=\"-O2\"\n+  fi\n+else\n+  GCC=\n+  test \"${CFLAGS+set}\" = set || CFLAGS=\"-g\"\n+fi\n+])\n+\n+LIB_AC_PROG_CC\n+\n+AC_ISC_POSIX\n+\n+dnl When we start using libtool:\n+dnl Default to a non shared library.  This may be overridden by the\n+dnl configure option --enable-shared.\n+dnl AM_DISABLE_SHARED\n+\n+dnl When we start using libtool:\n+dnl AM_PROG_LIBTOOL\n+\n+dnl When we start using automake:\n+dnl AM_CONFIG_HEADER(config.h:config.in)\n+AC_CONFIG_HEADER(config.h:config.in)\n+\n+dnl When we start using automake:\n+dnl AM_MAINTAINER_MODE\n+dnl AM_EXEEXT\n+\n+dnl When we start using automake:\n+dnl AM_PROG_INSTALL\n+AC_PROG_INSTALL\n \n . ${srcdir}/config.table\n host_makefile_frag=${frag}\n+AC_SUBST_FILE(host_makefile_frag)\n+\n+# It's OK to check for header files.  Although the compiler may not be\n+# able to link anything, it had better be able to at least compile\n+# something.\n+AC_CHECK_HEADERS(sys/file.h sys/param.h stdlib.h string.h)\n \n-# per-target:\n-\n-# post-target:\n-\n-# If this is the target libiberty, check at compile time whether we are using\n-# newlib.  If we are, we already know the files we need, since the linker\n-# will fail when run on some of the newlib targets.\n-if [ -n \"${with_target_subdir}\" ] ; then\n-  cat > Makefile.tem <<'!EOF!'\n-CONFIG_H = xconfig.h\n-NEEDED_LIST = xneeded-list\n-\n-xconfig.h: Makefile\n-\tif [ -f ../newlib/Makefile ]; then \\\n-\t  echo \"#define NEED_sys_nerr 1\" >xconfig.h; \\\n-\t  echo \"#define NEED_sys_errlist 1\" >>xconfig.h; \\\n-\t  echo \"#define NEED_sys_siglist 1\" >>xconfig.h; \\\n-\t  echo \"#define NEED_strsignal 1\" >>xconfig.h; \\\n-\t  echo \"#define NEED_psignal 1\" >>xconfig.h; \\\n-\telse \\\n-\t  $(MAKE) $(FLAGS_TO_PASS) lconfig.h; \\\n-\t  cp lconfig.h xconfig.h; \\\n-\tfi\n-\n-xneeded-list: Makefile\n-\tif [ -f ../newlib/Makefile ]; then \\\n-\t  echo insque.o random.o strdup.o alloca.o vasprintf.o >xneeded-list; \\\n-\telse \\\n-\t  $(MAKE) $(FLAGS_TO_PASS) lneeded-list; \\\n-\t  cp lneeded-list xneeded-list; \\\n-\tfi\n-!EOF!\n-sed -e \"/^####/  r Makefile.tem\" \\\n-  -e '/INSTALL_DEST =/s/libdir/tooldir/' ${Makefile} > Makefile.tem3\n-mv Makefile.tem3 ${Makefile}\n-rm -f Makefile.tem\n+# This is the list of functions which libiberty will provide if they\n+# are not available on the host.\n+\n+funcs=\"asprintf\"\n+funcs=\"$funcs atexit\"\n+funcs=\"$funcs basename\"\n+funcs=\"$funcs bcmp\"\n+funcs=\"$funcs bcopy\"\n+funcs=\"$funcs bzero\"\n+funcs=\"$funcs clock\"\n+funcs=\"$funcs getcwd\"\n+funcs=\"$funcs getpagesize\"\n+funcs=\"$funcs index\"\n+funcs=\"$funcs insque\"\n+funcs=\"$funcs memchr\"\n+funcs=\"$funcs memcmp\"\n+funcs=\"$funcs memcpy\"\n+funcs=\"$funcs memmove\"\n+funcs=\"$funcs memset\"\n+funcs=\"$funcs random\"\n+funcs=\"$funcs rename\"\n+funcs=\"$funcs rindex\"\n+funcs=\"$funcs sigsetmask\"\n+funcs=\"$funcs strcasecmp\"\n+funcs=\"$funcs strchr\"\n+funcs=\"$funcs strdup\"\n+funcs=\"$funcs strncasecmp\"\n+funcs=\"$funcs strrchr\"\n+funcs=\"$funcs strstr\"\n+funcs=\"$funcs strtod\"\n+funcs=\"$funcs strtol\"\n+funcs=\"$funcs strtoul\"\n+funcs=\"$funcs tmpnam\"\n+funcs=\"$funcs vasprintf\"\n+funcs=\"$funcs vfprintf\"\n+funcs=\"$funcs vprintf\"\n+funcs=\"$funcs vsprintf\"\n+funcs=\"$funcs waitpid\"\n+\n+# Also in the old function.def file: alloca, vfork, getopt.\n+\n+vars=\"sys_errlist sys_nerr sys_siglist\"\n+\n+checkfuncs=\"getrusage on_exit psignal strerror strsignal sysconf times\"\n+\n+# These are neither executed nor required, but they help keep\n+# autoheader happy without adding a bunch of text to acconfig.h.\n+if test \"x\" = \"y\"; then\n+  AC_CHECK_FUNCS(asprintf atexit basename bcmp bcopy bzero clock getcwd)\n+  AC_CHECK_FUNCS(getpagesize index insque memchr memcmp memcpy memmove)\n+  AC_CHECK_FUNCS(memset random rename rindex sigsetmask strcasecmp)\n+  AC_CHECK_FUNCS(strchr strdup strncasecmp strrchr strstr strtod strtol)\n+  AC_CHECK_FUNCS(strtoul tmpnam vasprintf vfprintf vprintf vsprintf waitpid)\n+  AC_DEFINE(HAVE_SYS_ERRLIST)\n+  AC_DEFINE(HAVE_SYS_NERR)\n+  AC_DEFINE(HAVE_SYS_SIGLIST)\n+  AC_CHECK_FUNCS(getrusage on_exit psignal strerror strsignal sysconf times)\n fi\n \n-# We need multilib support, but only if configuring for the target.\n-if [ -n \"${with_target_subdir}\" ] ; then\n-  if [ \"${srcdir}\" = \".\" ] ; then\n-    if [ \"${with_target_subdir}\" != \".\" ] ; then\n-      . ${with_multisrctop}../../config-ml.in\n+# For each of these functions, if the host does not provide the\n+# function we want to put FN.o in LIBOBJS, and if the host does\n+# provide the function, we want to define HAVE_FN in config.h.  Also,\n+# if the host does not provide alloca, we set ALLOCA to alloca.o\n+\n+setobjs=\n+if test -n \"${with_target_subdir}\"; then\n+\n+  # We are being configured with a cross compiler.  AC_REPLACE_FUNCS\n+  # may not work correctly, because the compiler may not be able to\n+  # link executables.\n+\n+  # If we are being configured for newlib, we know which functions\n+  # newlib provide and which ones we will be expected to provide.\n+\n+  if test \"x${with_newlib}\" = \"xyes\"; then\n+    ALLOCA=\"alloca.o\"\n+    LIBOBJS=\"basename.o insque.o random.o strdup.o vasprintf.o\"\n+\n+    for f in $funcs; do\n+      case \"$f\" in\n+\tbasename | insque | random | strdup | vasprintf)\n+\t  ;;\n+\t*)\n+\t  n=HAVE_`echo $f | tr 'abcdefghijklmnopqrstuvwxyz' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'`\n+\t  AC_DEFINE_UNQUOTED($n)\n+\t  ;;\n+      esac\n+    done\n+\n+    # newlib doesnt provide any of the variables in $vars, so we\n+    # dont have to check them here.\n+\n+    # Of the functions in $checkfuncs, VxWorks only has strerror.\n+    AC_DEFINE(HAVE_STRERROR)\n+\n+    setobjs=yes\n+\n+  fi\n+fi\n+\n+if test -z \"${setobjs}\"; then\n+  case \"${host}\" in\n+\n+  *-*-vxworks*)\n+    # Handle VxWorks configuration specially, since on VxWorks the\n+    # libraries are actually on the target board, not in the file\n+    # system.\n+    LIBOBJS=\"basename.o getpagesize.o insque.o random.o strcasecmp.o\"\n+    LIBOBJS=\"$LIBOBJS strncasecmp.o strdup.o vfork.o waitpid.o vasprintf.o\"\n+    for f in $funcs; do\n+      case \"$f\" in\n+\tbasename | getpagesize | insque | random | strcasecmp)\n+\t  ;;\n+\tstrncasecmp | strdup | vfork | waitpid | vasprintf)\n+\t  ;;\n+\t*)\n+\t  n=HAVE_`echo $f | tr 'abcdefghijklmnopqrstuvwxyz' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'`\n+\t  AC_DEFINE_UNQUOTED($n)\n+\t  ;;\n+      esac\n+    done\n+\n+    # VxWorks doesn't provide any of the variables in $vars, so we\n+    # don't have to check them here.\n+\n+    # Of the functions in $checkfuncs, VxWorks only has strerror.\n+    AC_DEFINE(HAVE_STRERROR)\n+\n+    setobjs=yes\n+    ;;\n+\n+  esac\n+fi\n+\n+if test -z \"${setobjs}\"; then\n+\n+  case \"${host}\" in\n+\n+  *-*-cygwin32*)\n+    # The cygwin32 library actually uses a couple of files from\n+    # libiberty when it is built.  If we are building a native\n+    # cygwin32, and we run the tests, we will appear to have these\n+    # files.  However, when we go on to build winsup, we will wind up\n+    # with a library which does not have the files, since they should\n+    # have come from libiberty.\n+\n+    # We handle this by removing the functions the winsup library\n+    # provides from our shell variables, so that they appear to be\n+    # missing.\n+\n+    funcs=\"`echo $funcs | sed -e 's/random//'`\"\n+    LIBOBJS=\"$LIBOBJS random.o\"\n+    vars=\"`echo $vars | sed -e 's/sys_siglist//'`\"\n+    checkfuncs=\"`echo $checkfuncs | sed -e 's/strsignal//' -e 's/psignal//`\"\n+    ;;\n+\n+  *-*-mingw32*)\n+    # Under mingw32, sys_nerr and sys_errlist exist, but they are\n+    # macros, so the test below won't find them.\n+    vars=\"`echo $vars | sed -e 's/sys_nerr//' -e 's/sys_errlist//'`\"\n+    AC_DEFINE(HAVE_SYS_NERR)\n+    AC_DEFINE(HAVE_SYS_ERRLIST)\n+    ;;\n+\n+  esac\n+\n+  # We haven't set the list of objects yet.  Use the standard autoconf\n+  # tests.  This will only work if the compiler works.\n+  AC_PROG_CC_WORKS\n+  AC_REPLACE_FUNCS($funcs)\n+  AC_FUNC_ALLOCA\n+  AC_FUNC_VFORK\n+  if test $ac_cv_func_vfork_works = no; then\n+    LIBOBJS=\"$LIBOBJS vfork.o\"\n+  fi\n+  for v in $vars; do\n+    AC_MSG_CHECKING([for $v])\n+    AC_CACHE_VAL(libiberty_cv_var_$v,\n+      [AC_TRY_LINK([int *p;], [extern int $v; p = &$v;],\n+\t\t   [eval \"libiberty_cv_var_$v=yes\"],\n+\t\t   [eval \"libiberty_cv_var_$v=no\"])])\n+    if eval \"test \\\"`echo '$libiberty_cv_var_'$v`\\\" = yes\"; then\n+      AC_MSG_RESULT(yes)\n+      n=HAVE_`echo $v | tr 'abcdefghijklmnopqrstuvwxyz' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'`\n+      AC_DEFINE_UNQUOTED($n)\n     else\n-      . ${with_multisrctop}../config-ml.in\n+      AC_MSG_RESULT(no)\n     fi\n-  else\n-    . ${srcdir}/../config-ml.in\n-  fi\n+  done\n+  AC_CHECK_FUNCS($checkfuncs)\n+fi\n+\n+# Install a library built with a cross compiler in $(tooldir) rather\n+# than $(libdir).\n+if test -z \"${with_target_subdir}\"; then\n+  INSTALL_DEST=libdir\n+else\n+  INSTALL_DEST=tooldir\n fi\n+AC_SUBST(INSTALL_DEST)\n+\n+# We need multilib support, but only if configuring for the target.\n+AC_OUTPUT(Makefile,\n+[test -z \"$CONFIG_HEADERS\" || echo timestamp > stamp-h\n+if test -n \"$CONFIG_FILES\"; then\n+  if test -n \"${with_target_subdir}\"; then\n+    # FIXME: We shouldn't need to set ac_file\n+    ac_file=Makefile\n+    . ${libiberty_topdir}/config-ml.in\n+  fi\n+fi],\n+srcdir=${srcdir}\n+host=${host}\n+target=${target}\n+with_target_subdir=${with_target_subdir}\n+with_multisubdir=${with_multisubdir}\n+ac_configure_args=\"--enable-multilib ${ac_configure_args}\"\n+CONFIG_SHELL=${CONFIG_SHELL-/bin/sh}\n+libiberty_topdir=${libiberty_topdir}\n+)"}, {"sha": "ccf7aef4a855461e379129a023a697c176dd5fd8", "filename": "libiberty/cplus-dem.c", "status": "modified", "additions": 9, "deletions": 26, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3affd5f0f4b9f9e7d3ecac2881604692ae52681e/libiberty%2Fcplus-dem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3affd5f0f4b9f9e7d3ecac2881604692ae52681e/libiberty%2Fcplus-dem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcplus-dem.c?ref=3affd5f0f4b9f9e7d3ecac2881604692ae52681e", "patch": "@@ -890,7 +890,8 @@ demangle_signature (work, mangled, declp)\n \t    {\n \t      remember_type (work, oldmangled, *mangled - oldmangled);\n \t    }\n-\t  string_append(&tname, (work -> options & DMGL_JAVA) ? \".\" : \"::\");\n+\t    string_append (&tname, \"::\");\n+\n \t  string_prepends(declp, &tname);\n \t  if (work -> destructor & 1)\n \t    {\n@@ -1374,7 +1375,6 @@ demangle_template (work, mangled, tname, trawname, is_type)\n   int need_comma = 0;\n   int success = 0;\n   const char *start;\n-  int is_java_array = 0;\n   string temp;\n \n   (*mangled)++;\n@@ -1418,16 +1418,10 @@ demangle_template (work, mangled, tname, trawname, is_type)\n \t    }\n \t  if (trawname)\n \t    string_appendn (trawname, *mangled, r);\n-\t  is_java_array = (work -> options & DMGL_JAVA)\n-\t    && strncmp (*mangled, \"JArray1Z\", 8) == 0;\n-\t  if (! is_java_array)\n-\t    {\n \t      string_appendn (tname, *mangled, r);\n-\t    }\n \t  *mangled += r;\n \t}\n     }\n-  if (!is_java_array)\n     string_append (tname, \"<\");\n   /* get size of template parameter list */\n   if (!get_count (mangled, &r))\n@@ -1555,11 +1549,6 @@ demangle_template (work, mangled, tname, trawname, is_type)\n \t}\n       need_comma = 1;\n     }\n-  if (is_java_array)\n-    {\n-      string_append (tname, \"[]\");\n-    }\n-  else\n     {\n       if (tname->p[-1] == '>')\n \tstring_append (tname, \" \");\n@@ -1723,7 +1712,7 @@ demangle_class (work, mangled, declp)\n \t}\n       remember_Ktype (work, class_name.b, LEN_STRING(&class_name));\n       remember_Btype (work, class_name.b, LEN_STRING(&class_name), btype);\n-      string_prepend (declp, (work -> options & DMGL_JAVA) ? \".\" : \"::\");\n+\tstring_prepend (declp, \"::\");\n       string_prepends (declp, &class_name);\n       success = 1;\n     }\n@@ -2025,8 +2014,7 @@ gnu_special (work, mangled, declp)\n \t    {\n \t      if (p != NULL)\n \t\t{\n-\t\t  string_append (declp,\n-\t\t\t\t (work -> options & DMGL_JAVA) ? \".\" : \"::\");\n+\t\t    string_append (declp, \"::\");\n \t\t  (*mangled)++;\n \t\t}\n \t    }\n@@ -2064,7 +2052,7 @@ gnu_special (work, mangled, declp)\n \t  /* Consumed everything up to the cplus_marker, append the\n \t     variable name.  */\n \t  (*mangled)++;\n-\t  string_append (declp, (work -> options & DMGL_JAVA) ? \".\" : \"::\");\n+\t    string_append (declp, \"::\");\n \t  n = strlen (*mangled);\n \t  string_appendn (declp, *mangled, n);\n \t  (*mangled) += n;\n@@ -2361,7 +2349,7 @@ demangle_qualified (work, mangled, result, isfuncname, append)\n \n       if (qualifiers > 0)\n         {\n-          string_append (&temp, (work -> options & DMGL_JAVA) ? \".\" : \"::\");\n+\t    string_append (&temp, \"::\");\n         }\n     }\n \n@@ -2372,7 +2360,7 @@ demangle_qualified (work, mangled, result, isfuncname, append)\n \n   if (isfuncname && (work->constructor & 1 || work->destructor & 1))\n     {\n-      string_append (&temp, (work -> options & DMGL_JAVA) ? \".\" : \"::\");\n+\tstring_append (&temp, \"::\");\n       if (work -> destructor & 1)\n \t{\n \t  string_append (&temp, \"~\");\n@@ -2391,7 +2379,7 @@ demangle_qualified (work, mangled, result, isfuncname, append)\n     {\n       if (!STRING_EMPTY (result))\n \t{\n-\t  string_append (&temp, (work -> options & DMGL_JAVA) ? \".\" : \"::\");\n+\t    string_append (&temp, \"::\");\n \t}\n       string_prepends (result, &temp);\n     }\n@@ -2486,7 +2474,6 @@ do_type (work, mangled, result)\n \tcase 'P':\n \tcase 'p':\n \t  (*mangled)++;\n-\t  if (! (work -> options & DMGL_JAVA))\n \t    string_prepend (&decl, \"*\");\n \t  break;\n \n@@ -2569,7 +2556,7 @@ do_type (work, mangled, result)\n \t      }\n \n \t    string_append (&decl, \")\");\n-\t    string_prepend (&decl, (work -> options & DMGL_JAVA) ? \".\" : \"::\");\n+\t      string_prepend (&decl, \"::\");\n \t    if (isdigit (**mangled)) \n \t      {\n \t\tn = consume_count (mangled);\n@@ -3622,7 +3609,6 @@ static struct option long_options[] = {\n   {\"strip-underscores\", no_argument, 0, '_'},\n   {\"format\", required_argument, 0, 's'},\n   {\"help\", no_argument, 0, 'h'},\n-  {\"java\", no_argument, 0, 'j'},\n   {\"no-strip-underscores\", no_argument, 0, 'n'},\n   {\"version\", no_argument, 0, 'v'},\n   {0, no_argument, 0, 0}\n@@ -3667,9 +3653,6 @@ main (argc, argv)\n \tcase '_':\n \t  strip_underscore = 1;\n \t  break;\n-\tcase 'j':\n-\t  flags |= DMGL_JAVA;\n-\t  break;\n \tcase 's':\n \t  if (strcmp (optarg, \"gnu\") == 0)\n \t    {"}, {"sha": "08da647e30eba83bd6f9cad8bd8589ef446fa0d1", "filename": "libiberty/dummy.c", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe806bddb81ada7a8797cf387ff7c1427ed3d6bb/libiberty%2Fdummy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe806bddb81ada7a8797cf387ff7c1427ed3d6bb/libiberty%2Fdummy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fdummy.c?ref=fe806bddb81ada7a8797cf387ff7c1427ed3d6bb", "patch": "@@ -1,49 +0,0 @@\n-#include <ansidecl.h>\n-\n-#ifdef __STDC__\n-#include <stddef.h>\n-#define clock_t unsigned long\n-#define DEF(NAME, RETURN_TYPE, ARGLIST, ARGS) extern RETURN_TYPE NAME (ARGS);\n-#define DEFFUNC(NAME, RETURN_TYPE, ARGLIST, ARGS) extern RETURN_TYPE NAME (ARGS);\n-#else\n-#define void int\n-#define size_t unsigned long\n-#define clock_t unsigned long\n-#define DEF(NAME, RETURN_TYPE, ARGLIST, ARGS) extern RETURN_TYPE NAME ();\n-#define DEFFUNC(NAME, RETURN_TYPE, ARGLIST, ARGS) extern RETURN_TYPE NAME ();\n-#endif\n-\n-#define DEFVAR(NAME,DECL,USE) extern DECL;\n-\n-#define NOTHING /*nothing*/\n-\n-#include \"alloca-conf.h\"\n-#include \"functions.def\"\n-\n-/* Always use our: getopt.o getopt1.o obstack.o spaces.o */\n-\n-int\n-main (argc, argv)\n-     int argc; char **argv;\n-{\n-\n-/* Create a dummy function call for each DEF-defined function. */\n-\n-#undef DEF\n-#undef DEFVAR\n-#undef DEFFUNC\n-#undef AND\n-#define AND = 0;\n-/* ARGS expands into a set of declaration.  NAME ARG_LIST expands\n-   info a function call that uses those variables as actual parameters.\n-   If the function has been DEF'ed correctly, we can pass the right\n-   number and types of parameters, which is nice.  (E.g. gcc may\n-   otherwise complain about the wrong number of parameters to certain\n-   builtins.) */\n-#define DEF(NAME, RETURN_TYPE, ARG_LIST, ARGS) { ARGS; NAME ARG_LIST; }\n-#define DEFVAR(NAME, DECL, USE) { USE; }\n-#define DEFFUNC(NAME, RETURN_TYPE, ARG_LIST, ARGS) { ARGS; NAME ARG_LIST; }\n-#include \"functions.def\"\n-\n-  return (0);\n-}"}, {"sha": "0f13f107868ee8dee4ec39a96822bcada637d07a", "filename": "libiberty/functions.def", "status": "removed", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe806bddb81ada7a8797cf387ff7c1427ed3d6bb/libiberty%2Ffunctions.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe806bddb81ada7a8797cf387ff7c1427ed3d6bb/libiberty%2Ffunctions.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffunctions.def?ref=fe806bddb81ada7a8797cf387ff7c1427ed3d6bb", "patch": "@@ -1,70 +0,0 @@\n-/*\n- * List of function definitions that may *optionally* be included\n- * in libiberty.a.  The function names must match the filenames,\n- * e.g. bzero() is defined in bzero.c.  (While each file can contain\n- * extra functions, do not list them.)\n- *\n- * In the default libiberty configuration, these object files\n- * (e.g bzero.o) are included if and only if cc fails to find\n- * the corresponding function in libc.\n- */\n-\n-DEF(asprintf, int, (), NOTHING)\n-DEF(atexit, int, (f), void (*f)())\n-DEF(bcmp, int, (s1, s2, length), char *s1 AND char *s2 AND int length )\n-DEF(bcopy, void, (s1, s2, length), char *s1 AND char *s2 AND int length )\n-DEF(bzero, void, (s, length), char *s AND int length)\n-DEF(clock, clock_t, (), NOTHING)\n-DEF(getopt, int, (argc, argv, optstring),\n-\tint argc AND char **argv AND CONST char *optstring)\t\n-DEF(getpagesize, int , (), NOTHING)\n-DEF(getcwd, char*, (buf, len), char *buf AND int len)\n-DEF(index, char*, (s, c), char *s AND int c)\n-DEF(insque, void, (), NOTHING)\n-DEF(memchr, PTR, (s, c, length), CONST PTR s AND int c AND size_t length)\n-DEF(memcmp, int, (s1, s2, length),\n-\tCONST PTR s1 AND CONST PTR s2 AND size_t length)\n-DEF(memcpy, PTR, (s1, s2, length), PTR s1 AND CONST PTR s2 AND size_t length)\n-DEF(memmove, PTR, (s1, s2, length), PTR s1 AND CONST PTR s2 AND size_t length)\n-DEF(memset, PTR, (s, val, length), PTR s AND int val AND size_t length )\n-DEF(random, long int, (), NOTHING)\n-DEF(rename, int, (f, t), char *f AND char *t)\n-DEF(rindex, char*, (s, c), char *s AND int c)\n-DEF(strcasecmp, int, (s1, s2), char *s1 AND char *s2)\n-DEF(strncasecmp, int, (s1, s2, n), char *s1 AND char *s2 AND int n)\n-DEF(strchr, char*, (s, c), CONST char *s AND int c)\n-DEF(strdup, char*, (s1), char * s1)\n-DEF(strrchr, char*, (s, c), CONST char *s AND int c)\n-DEF(strstr, char*, (), NOTHING)\n-DEF(strtod, double, (), NOTHING)\n-DEF(strtol, long, (), NOTHING)\n-DEF(strtoul, unsigned long, (), NOTHING)\n-DEF(tmpnam, char *, (s), char * s)\n-DEF(vfork, int, (), NOTHING)\n-DEF(vfprintf, int, (), NOTHING)\n-DEF(vprintf, int, (), NOTHING)\n-DEF(vsprintf, int, (), NOTHING)\n-DEF(sigsetmask, int, (), NOTHING)\n-DEF(alloca, PTR, (size), size_t size)\n-DEF(waitpid, int, (pid, statp, opts), int pid AND int* statp AND int opts )\n-DEF(vasprintf, int, (), NOTHING)\n-\n-/* List of global variables that we want to look for in the host\n-   environment, and to generate an entry NEED_<variable> in config.h\n-   if they are not found.  The first arg is the variable name, the\n-   second arg is how to declare the variable, and the third is how to\n-   use it. */\n-\n-DEFVAR(sys_nerr, int sys_nerr, sys_nerr = 0)\n-DEFVAR(sys_errlist, char *sys_errlist[], sys_errlist[0] = 0)\n-DEFVAR(sys_siglist, char *sys_siglist[], sys_siglist[0] = 0)\n-\n-/* List of global functions that we want to look for in the host\n-   environment, and to generate an entry NEED_<funcname> in config.h\n-   if they are not found. */\n-\n-DEFFUNC(strerror, char*, (errnoval), int errnoval)\n-DEFFUNC(psignal, void, (signo, message), unsigned signo AND char *message)\n-DEFFUNC(basename, char *, (name), CONST char *name)\n-DEFFUNC(on_exit, void, (f, arg), void (*f)() AND char *arg)\n-DEFFUNC(strsignal, const char *, (signo), int signo)"}, {"sha": "06d55c04f58699752e91909fef0e69ed2ede726f", "filename": "libiberty/getcwd.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3affd5f0f4b9f9e7d3ecac2881604692ae52681e/libiberty%2Fgetcwd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3affd5f0f4b9f9e7d3ecac2881604692ae52681e/libiberty%2Fgetcwd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fgetcwd.c?ref=3affd5f0f4b9f9e7d3ecac2881604692ae52681e", "patch": "@@ -20,7 +20,9 @@ BUGS\n \n */\n \n-#ifndef NO_SYS_PARAM_H\n+#include \"config.h\"\n+\n+#ifdef HAVE_SYS_PARAM_H\n #include <sys/param.h>\n #endif\n #include <errno.h>"}, {"sha": "d6327a8887dd030a2b9a03228175a3989574c0cf", "filename": "libiberty/getpagesize.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3affd5f0f4b9f9e7d3ecac2881604692ae52681e/libiberty%2Fgetpagesize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3affd5f0f4b9f9e7d3ecac2881604692ae52681e/libiberty%2Fgetpagesize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fgetpagesize.c?ref=3affd5f0f4b9f9e7d3ecac2881604692ae52681e", "patch": "@@ -28,8 +28,10 @@ BUGS\n \n #ifndef VMS\n \n+#include \"config.h\"\n+\n #include <sys/types.h>\n-#ifndef NO_SYS_PARAM_H\n+#ifdef HAVE_SYS_PARAM_H\n #include <sys/param.h>\n #endif\n "}, {"sha": "861622259016036bfa11353f53a91237c60baa98", "filename": "libiberty/getruntime.c", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3affd5f0f4b9f9e7d3ecac2881604692ae52681e/libiberty%2Fgetruntime.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3affd5f0f4b9f9e7d3ecac2881604692ae52681e/libiberty%2Fgetruntime.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fgetruntime.c?ref=3affd5f0f4b9f9e7d3ecac2881604692ae52681e", "patch": "@@ -17,6 +17,8 @@ License along with libiberty; see the file COPYING.LIB.  If\n not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n+#include \"config.h\"\n+\n #include \"ansidecl.h\"\n #include \"libiberty.h\"\n \n@@ -26,23 +28,13 @@ Boston, MA 02111-1307, USA.  */\n \n #include <time.h>\n \n-/* These should go away when libiberty uses autoconf. */\n-\n-#if defined(__sun__) && !defined(__svr4__)\n-#define HAVE_GETRUSAGE\n-#endif\n-\n-#ifdef HAVE_SYSCONF\n-#define HAVE_TIMES\n-#endif\n-\n #ifdef HAVE_GETRUSAGE\n #include <sys/time.h>\n #include <sys/resource.h>\n #endif\n \n #ifdef HAVE_TIMES\n-#ifndef NO_SYS_PARAM_H\n+#ifdef HAVE_SYS_PARAM_H\n #include <sys/param.h>\n #endif\n #include <sys/times.h>"}, {"sha": "b61b51290daff41e02d33fee173cd56b0e0821fd", "filename": "libiberty/makefile.vms", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3affd5f0f4b9f9e7d3ecac2881604692ae52681e/libiberty%2Fmakefile.vms", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3affd5f0f4b9f9e7d3ecac2881604692ae52681e/libiberty%2Fmakefile.vms", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fmakefile.vms?ref=3affd5f0f4b9f9e7d3ecac2881604692ae52681e", "patch": "@@ -23,15 +23,11 @@ libiberty.olb: config.h alloca-conf.h $(OBJS)\n \tpurge\n \tlib/create libiberty *.obj\n \n-alloca-conf.h: alloca-norm.h\n-\t$(CP) $< $@\n-\n config.h: config.h-vms\n \t$(CP) $< $@\n \n clean:\n \t$$ purge\n-\t$(RM) alloca-conf.h;\n \t$(RM) config.h;\n \t$(RM) *.obj;\n \t$(RM) libiberty.olb;"}, {"sha": "2a21802148d62c1f88738117f39039d73e50b4fc", "filename": "libiberty/mpw-config.in", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3affd5f0f4b9f9e7d3ecac2881604692ae52681e/libiberty%2Fmpw-config.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3affd5f0f4b9f9e7d3ecac2881604692ae52681e/libiberty%2Fmpw-config.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fmpw-config.in?ref=3affd5f0f4b9f9e7d3ecac2881604692ae52681e", "patch": "@@ -1,7 +1,5 @@\n # MPW configuration fragment for libiberty.\n \n-forward-include \"{srcdir}\"alloca-norm.h alloca-conf.h\n-\n Echo '/* config.h.  Generated by mpw-configure.  */'\t > \"{o}\"config.new\n \n MoveIfChange \"{o}\"config.new \"{o}\"config.h"}, {"sha": "644cc75462aee8bcf7d07a6254955060ff0d839b", "filename": "libiberty/strerror.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3affd5f0f4b9f9e7d3ecac2881604692ae52681e/libiberty%2Fstrerror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3affd5f0f4b9f9e7d3ecac2881604692ae52681e/libiberty%2Fstrerror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrerror.c?ref=3affd5f0f4b9f9e7d3ecac2881604692ae52681e", "patch": "@@ -7,7 +7,7 @@\n \n #include \"config.h\"\n \n-#ifndef NEED_sys_errlist\n+#ifdef HAVE_SYS_ERRLIST\n /* Note that errno.h (not sure what OS) or stdio.h (BSD 4.4, at least)\n    might declare sys_errlist in a way that the compiler might consider\n    incompatible with our later declaration, perhaps by using const\n@@ -19,7 +19,7 @@\n #include <stdio.h>\n #include <errno.h>\n \n-#ifndef NEED_sys_errlist\n+#ifdef HAVE_SYS_ERRLIST\n #undef sys_errlist\n #endif\n \n@@ -55,12 +55,12 @@ struct error_info\n {\n   int value;\t\t/* The numeric value from <errno.h> */\n   const char *name;\t/* The equivalent symbolic value */\n-#ifdef NEED_sys_errlist\n+#ifndef HAVE_SYS_ERRLIST\n   const char *msg;\t/* Short message about this value */\n #endif\n };\n \n-#ifdef NEED_sys_errlist\n+#ifndef HAVE_SYS_ERRLIST\n #   define ENTRY(value, name, msg)\t{value, name, msg}\n #else\n #   define ENTRY(value, name, msg)\t{value, name}\n@@ -455,7 +455,7 @@ static int num_error_names = 0;\n    same name, it differs from other implementations in that it is dynamically\n    initialized rather than statically initialized. */\n \n-#ifdef NEED_sys_errlist\n+#ifndef HAVE_SYS_ERRLIST\n \n static int sys_nerr;\n static const char **sys_errlist;\n@@ -532,7 +532,7 @@ init_error_tables ()\n \t}\n     }\n \n-#ifdef NEED_sys_errlist\n+#ifndef HAVE_SYS_ERRLIST\n \n   /* Now attempt to allocate the sys_errlist table, zero it out, and then\n      initialize it from the statically initialized error_table. */\n@@ -595,7 +595,7 @@ errno_max ()\n   return (maxsize - 1);\n }\n \n-#ifdef NEED_strerror\n+#ifndef HAVE_STRERROR\n \n /*\n \n@@ -634,7 +634,7 @@ strerror (errnoval)\n   char *msg;\n   static char buf[32];\n \n-#ifdef NEED_sys_errlist\n+#ifndef HAVE_SYS_ERRLIST\n \n   if (error_names == NULL)\n     {\n@@ -668,7 +668,7 @@ strerror (errnoval)\n   return (msg);\n }\n \n-#endif\t/* NEED_strerror */\n+#endif\t/* ! HAVE_STRERROR */\n \n \n /*"}, {"sha": "c7bb10c441c46f58e4d598185794b121b18f786b", "filename": "libiberty/strsignal.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3affd5f0f4b9f9e7d3ecac2881604692ae52681e/libiberty%2Fstrsignal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3affd5f0f4b9f9e7d3ecac2881604692ae52681e/libiberty%2Fstrsignal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrsignal.c?ref=3affd5f0f4b9f9e7d3ecac2881604692ae52681e", "patch": "@@ -64,12 +64,12 @@ struct signal_info\n {\n   int value;\t\t/* The numeric value from <signal.h> */\n   const char *name;\t/* The equivalent symbolic value */\n-#ifdef NEED_sys_siglist\n+#ifndef HAVE_SYS_SIGLIST\n   const char *msg;\t/* Short message about this value */\n #endif\n };\n \n-#ifdef NEED_sys_siglist\n+#ifndef HAVE_SYS_SIGLIST\n #   define ENTRY(value, name, msg)\t{value, name, msg}\n #else\n #   define ENTRY(value, name, msg)\t{value, name}\n@@ -236,7 +236,7 @@ static int num_signal_names = 0;\n    same name, it differs from other implementations in that it is dynamically\n    initialized rather than statically initialized. */\n \n-#ifdef NEED_sys_siglist\n+#ifndef HAVE_SYS_SIGLIST\n \n static int sys_nsig;\n static const char **sys_siglist;\n@@ -319,7 +319,7 @@ init_signal_tables ()\n \t}\n     }\n \n-#ifdef NEED_sys_siglist\n+#ifndef HAVE_SYS_SIGLIST\n \n   /* Now attempt to allocate the sys_siglist table, zero it out, and then\n      initialize it from the statically initialized signal_table. */\n@@ -414,7 +414,7 @@ DESCRIPTION\n \n */\n \n-#ifdef NEED_strsignal\n+#ifndef HAVE_STRSIGNAL\n \n const char *\n strsignal (signo)\n@@ -423,7 +423,7 @@ strsignal (signo)\n   const char *msg;\n   static char buf[32];\n \n-#ifdef NEED_sys_siglist\n+#ifndef HAVE_SYS_SIGLIST\n \n   if (signal_names == NULL)\n     {\n@@ -452,7 +452,7 @@ strsignal (signo)\n   return (msg);\n }\n \n-#endif /* NEED_strsignal */\n+#endif /* ! HAVE_STRSIGNAL */\n \n /*\n \n@@ -580,7 +580,7 @@ DESCRIPTION\n \tfollowed by a newline.\n */\n \n-#ifdef NEED_psignal\n+#ifndef HAVE_PSIGNAL\n \n void\n psignal (signo, message)\n@@ -601,7 +601,7 @@ psignal (signo, message)\n     }\n }\n \n-#endif\t/* NEED_psignal */\n+#endif\t/* ! HAVE_PSIGNAL */\n \n \n /* A simple little main that does nothing but print all the signal translations"}, {"sha": "4fede380bfd6d39a4741c39cdbb3654d0b44475d", "filename": "libiberty/vmsbuild.com", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3affd5f0f4b9f9e7d3ecac2881604692ae52681e/libiberty%2Fvmsbuild.com", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3affd5f0f4b9f9e7d3ecac2881604692ae52681e/libiberty%2Fvmsbuild.com", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fvmsbuild.com?ref=3affd5f0f4b9f9e7d3ecac2881604692ae52681e", "patch": "@@ -31,8 +31,6 @@ $ create config.h\n #define NEED_strsignal\n #define NEED_psignal\n #define NEED_basename\n-$ if f$search(\"alloca-conf.h\").eqs.\"\" then -\n-\tcopy alloca-norm.h alloca-conf.h\n $ LIBR 'WORK_LIB' /Create\n $\n $! first pass: compile \"required\" modules"}]}