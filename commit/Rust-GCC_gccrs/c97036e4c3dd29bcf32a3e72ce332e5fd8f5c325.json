{"sha": "c97036e4c3dd29bcf32a3e72ce332e5fd8f5c325", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk3MDM2ZTRjM2RkMjliY2YzMmEzZTcyY2UzMzJlNWZkOGY1YzMyNQ==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@albatross.co.nz", "date": "2001-02-09T02:56:38Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2001-02-09T02:56:38Z"}, "message": "Byte.java: Remove redundant instanceof and null checks.\n\n\t* java/lang/Byte.java: Remove redundant instanceof and null checks.\n\t* java/lang/Integer.java: Likewise.\n\t* java/lang/Long.java: Likewise.\n\t* java/lang/Short.java: Likewise.\n\t* java/lang/Double.java: Likewise.\n\t(doubleToRawLongBits): New method.\n\t* java/lang/Float.java: As above.\n\t(floatToRawIntBits): New method.\n\nFrom-SVN: r39556", "tree": {"sha": "69de4af6d48ae5e4075714c8cdaa85fdc622abe4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69de4af6d48ae5e4075714c8cdaa85fdc622abe4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c97036e4c3dd29bcf32a3e72ce332e5fd8f5c325", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c97036e4c3dd29bcf32a3e72ce332e5fd8f5c325", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c97036e4c3dd29bcf32a3e72ce332e5fd8f5c325", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c97036e4c3dd29bcf32a3e72ce332e5fd8f5c325/comments", "author": null, "committer": null, "parents": [{"sha": "1c8b24ad46bf91f783be499851b08d0eaf7ca8c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c8b24ad46bf91f783be499851b08d0eaf7ca8c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c8b24ad46bf91f783be499851b08d0eaf7ca8c6"}], "stats": {"total": 101, "additions": 50, "deletions": 51}, "files": [{"sha": "981c0ed64c17b425941637f2dc9ff114b5a63bb8", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c97036e4c3dd29bcf32a3e72ce332e5fd8f5c325/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c97036e4c3dd29bcf32a3e72ce332e5fd8f5c325/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=c97036e4c3dd29bcf32a3e72ce332e5fd8f5c325", "patch": "@@ -1,3 +1,14 @@\n+2001-02-08  Bryce McKinlay  <bryce@albatross.co.nz>\n+\n+\t* java/lang/Byte.java: Remove redundant instanceof and null checks.\n+\t* java/lang/Integer.java: Likewise.\n+\t* java/lang/Long.java: Likewise.\n+\t* java/lang/Short.java: Likewise.\n+\t* java/lang/Double.java: Likewise.\n+\t(doubleToRawLongBits): New method.\n+\t* java/lang/Float.java: As above.\n+\t(floatToRawIntBits): New method.\n+\n 2001-02-08  Tom Tromey  <tromey@redhat.com>\n \n \t* java/lang/Float.java (parseFloat): New method."}, {"sha": "347e2524fae865a1f0227c243aa349508edc1793", "filename": "libjava/java/lang/Byte.java", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c97036e4c3dd29bcf32a3e72ce332e5fd8f5c325/libjava%2Fjava%2Flang%2FByte.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c97036e4c3dd29bcf32a3e72ce332e5fd8f5c325/libjava%2Fjava%2Flang%2FByte.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FByte.java?ref=c97036e4c3dd29bcf32a3e72ce332e5fd8f5c325", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -115,17 +115,15 @@ public int compareTo(Byte anotherByte)\n   }\n \n   // Added in JDK 1.2\n-  public int compareTo(Object o) throws ClassCastException\n+  /** @throws ClassCastException */\n+  public int compareTo(Object o)\n   {\n-    if (o instanceof Byte)\n-      return this.value - ((Byte) o).value;\n-    else\n-      throw new ClassCastException();\n+    return this.value - ((Byte) o).value;\n   }\n \n   public boolean equals(Object obj)\n   {\n-    return obj != null && (obj instanceof Byte) && ((Byte)obj).value == value;\n+    return (obj instanceof Byte) && ((Byte)obj).value == value;\n   }\n \n   // Verified that hashCode is returns plain value (see Boolean_1 test)."}, {"sha": "a656b510e062b4e69212ddca87e7083ace0988df", "filename": "libjava/java/lang/Double.java", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c97036e4c3dd29bcf32a3e72ce332e5fd8f5c325/libjava%2Fjava%2Flang%2FDouble.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c97036e4c3dd29bcf32a3e72ce332e5fd8f5c325/libjava%2Fjava%2Flang%2FDouble.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FDouble.java?ref=c97036e4c3dd29bcf32a3e72ce332e5fd8f5c325", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -54,9 +54,6 @@ public String toString ()\n \n   public boolean equals (Object obj)\n   {\n-    if (obj == null)\n-      return false;\n-\n     if (!(obj instanceof Double))\n       return false;\n \n@@ -108,12 +105,8 @@ public static String toString (double v)\n     return toString (v, false);\n   }\n \n-  public static Double valueOf (String s) throws NullPointerException, \n-    NumberFormatException\n+  public static Double valueOf (String s) throws NumberFormatException\n   {\n-    if (s == null)\n-      throw new NullPointerException ();\n-\n     return new Double (parseDouble (s));\n   }\n \n@@ -146,6 +139,12 @@ public static boolean isInfinite (double v)\n \n   public static native long doubleToLongBits (double value);\n \n+  public static long doubleToRawLongBits (double value)\n+  {\n+    // FIXME: Check that this is correct with respect to NaN values.\n+    return doubleToLongBits (value);\n+  }\n+\n   public static native double longBitsToDouble (long bits);\n \n   public int compareTo (Double d)"}, {"sha": "f15b06d2157d3cdc04b482cf303fa7f9fbec1cf2", "filename": "libjava/java/lang/Float.java", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c97036e4c3dd29bcf32a3e72ce332e5fd8f5c325/libjava%2Fjava%2Flang%2FFloat.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c97036e4c3dd29bcf32a3e72ce332e5fd8f5c325/libjava%2Fjava%2Flang%2FFloat.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FFloat.java?ref=c97036e4c3dd29bcf32a3e72ce332e5fd8f5c325", "patch": "@@ -64,9 +64,6 @@ public String toString ()\n \n   public boolean equals (Object obj)\n   {\n-    if (obj == null)\n-      return false;\n-\n     if (!(obj instanceof Float))\n       return false;\n \n@@ -115,12 +112,8 @@ public static String toString (float v)\n     return Double.toString ((double) v, true);\n   } \n \n-  public static Float valueOf (String s) throws NullPointerException, \n-    NumberFormatException\n+  public static Float valueOf (String s) throws NumberFormatException\n   {\n-    if (s == null)\n-      throw new NullPointerException ();\n-\n     return new Float (Double.valueOf (s).floatValue ());\n   }\n \n@@ -152,6 +145,13 @@ public static boolean isInfinite (float v)\n   }\n \n   public static native int floatToIntBits (float value);\n+  \n+  public static int floatToRawIntBits (float value)\n+  {\n+    // FIXME: Is this supposed to be different? NaN values seem to be handled\n+    // the same in the JDK.\n+    return floatToIntBits (value);\n+  }\n \n   public static native float intBitsToFloat (int bits);\n "}, {"sha": "2cf7bb453495334b896245c20dce534270e11fc8", "filename": "libjava/java/lang/Integer.java", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c97036e4c3dd29bcf32a3e72ce332e5fd8f5c325/libjava%2Fjava%2Flang%2FInteger.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c97036e4c3dd29bcf32a3e72ce332e5fd8f5c325/libjava%2Fjava%2Flang%2FInteger.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FInteger.java?ref=c97036e4c3dd29bcf32a3e72ce332e5fd8f5c325", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -86,11 +86,9 @@ public int compareTo(Integer anotherInteger)\n   }\n \n   // Added in JDK 1.2\n-  public int compareTo(Object o) throws ClassCastException\n+  /** @throws ClassCastException */\n+  public int compareTo(Object o)\n   {\n-    if (!(o instanceof Integer))\n-      throw new ClassCastException();\n-\n     return this.compareTo((Integer) o);\n   }\n \n@@ -101,7 +99,7 @@ public static Integer decode(String str) throws NumberFormatException\n     int radix = 10;\n     final int len;\n \n-    if (str == null || (len = str.length()) == 0)\n+    if ((len = str.length()) == 0)\n       throw new NumberFormatException();\n \n     // Negative numbers are always radix 10.\n@@ -140,8 +138,7 @@ else if (str.charAt(index) == '0')\n \n   public boolean equals(Object obj)\n   {\n-    return (obj != null && (obj instanceof Integer)\n-            && ((Integer) obj).value == value);\n+    return (obj instanceof Integer && ((Integer) obj).value == value);\n   }\n \n   public static Integer getInteger(String prop)\n@@ -181,7 +178,7 @@ public static int parseInt(String str, int radix) throws NumberFormatException\n   {\n     final int len;\n \n-    if (str == null || (len = str.length()) == 0 ||\n+    if ((len = str.length()) == 0 ||\n         radix < Character.MIN_RADIX || radix > Character.MAX_RADIX)\n       throw new NumberFormatException();\n "}, {"sha": "cb2cec2d904404fc62def369e163d56632110a9f", "filename": "libjava/java/lang/Long.java", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c97036e4c3dd29bcf32a3e72ce332e5fd8f5c325/libjava%2Fjava%2Flang%2FLong.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c97036e4c3dd29bcf32a3e72ce332e5fd8f5c325/libjava%2Fjava%2Flang%2FLong.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FLong.java?ref=c97036e4c3dd29bcf32a3e72ce332e5fd8f5c325", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -86,11 +86,9 @@ public int compareTo(Long anotherLong)\n   }\n \n   // Added in JDK 1.2\n-  public int compareTo(Object o) throws ClassCastException\n+  /** @throws ClassCastException */\n+  public int compareTo(Object o)\n   {\n-    if (!(o instanceof Long))\n-      throw new ClassCastException();\n-\n     return this.compareTo((Long) o);\n   }\n \n@@ -102,7 +100,7 @@ public static Long decode(String str) throws NumberFormatException\n     int radix = 10;\n     final int len;\n \n-    if (str == null || (len = str.length()) == 0)\n+    if ((len = str.length()) == 0)\n       throw new NumberFormatException();\n \n     // Negative numbers are always radix 10.\n@@ -141,8 +139,7 @@ else if (str.charAt(index) == '0')\n \n   public boolean equals(Object obj)\n   {\n-    return (obj != null && (obj instanceof Long)\n-            && ((Long) obj).value == value);\n+    return (obj instanceof Long && ((Long) obj).value == value);\n   }\n \n   public static Long getLong(String prop)\n@@ -183,8 +180,8 @@ public static long parseLong(String str, int radix)\n   {\n     final int len;\n \n-    if (str == null || (len = str.length()) == 0 ||\n-        radix < Character.MIN_RADIX || radix > Character.MAX_RADIX)\n+    if ((len = str.length()) == 0 || radix < Character.MIN_RADIX \n+         || radix > Character.MAX_RADIX)\n       throw new NumberFormatException();\n \n     boolean isNeg = false;"}, {"sha": "66eb4fdfeedd5c236d9d58406afab2e0e0bd3c78", "filename": "libjava/java/lang/Short.java", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c97036e4c3dd29bcf32a3e72ce332e5fd8f5c325/libjava%2Fjava%2Flang%2FShort.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c97036e4c3dd29bcf32a3e72ce332e5fd8f5c325/libjava%2Fjava%2Flang%2FShort.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FShort.java?ref=c97036e4c3dd29bcf32a3e72ce332e5fd8f5c325", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -115,18 +115,15 @@ public int compareTo(Short anotherShort)\n   }\n \n   // Added in JDK 1.2\n-  public int compareTo(Object o) throws ClassCastException\n+  /** @throws ClassCastException */\n+  public int compareTo(Object o)\n   {\n-    if (o instanceof Short)\n-      return this.value - ((Short) o).value;\n-    else\n-      throw new ClassCastException();\n+    return this.value - ((Short) o).value;\n   }\n \n   public boolean equals(Object obj)\n   {\n-    return (obj != null && (obj instanceof Short)\n-\t    && ((Short) obj).value == value);\n+    return (obj instanceof Short) && ((Short) obj).value == value;\n   }\n \n   // Verified that hashCode is returns plain value (see Short_1 test)."}]}