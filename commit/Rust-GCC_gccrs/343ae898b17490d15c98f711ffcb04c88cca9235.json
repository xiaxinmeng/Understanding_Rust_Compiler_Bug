{"sha": "343ae898b17490d15c98f711ffcb04c88cca9235", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQzYWU4OThiMTc0OTBkMTVjOThmNzExZmZjYjA0Yzg4Y2NhOTIzNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-06-19T15:01:13Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-06-19T15:01:13Z"}, "message": "re PR bootstrap/80887 (gnat bootstrap fails at s-regpat.o: raised STORAGE_ERROR : stack overflow or erroneous memory access)\n\n2017-06-19  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/80887\n        c/\n\t* gimple-parser.c (c_parser_gimple_postfix_expression): Handle\n\tnegated _Literals to parse _Literal (int) -1.\n\n\t* tree-ssa-sccvn.c (mprts_hook_cnt): New global.\n\t(vn_lookup_simplify_result): Allow only mprts_hook_cnt succesful\n\tsimplified lookups, then reset mprts_hook.\n\t(vn_nary_build_or_lookup_1): Set mprts_hook_cnt to 9 before\n\tsimplifying.\n\t(try_to_simplify): Likewise.\n\n\t* gcc.dg/tree-ssa/pr80887.c: New testcase.\n\nFrom-SVN: r249373", "tree": {"sha": "ef6963983505b5fc27f730d9f530a778279acca3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef6963983505b5fc27f730d9f530a778279acca3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/343ae898b17490d15c98f711ffcb04c88cca9235", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/343ae898b17490d15c98f711ffcb04c88cca9235", "html_url": "https://github.com/Rust-GCC/gccrs/commit/343ae898b17490d15c98f711ffcb04c88cca9235", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/343ae898b17490d15c98f711ffcb04c88cca9235/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9787269815559a63fbbda58b35137f832a612984", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9787269815559a63fbbda58b35137f832a612984", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9787269815559a63fbbda58b35137f832a612984"}], "stats": {"total": 89, "additions": 85, "deletions": 4}, "files": [{"sha": "99a7242e5b25da8492991cde871c0bdda7e435b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/343ae898b17490d15c98f711ffcb04c88cca9235/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/343ae898b17490d15c98f711ffcb04c88cca9235/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=343ae898b17490d15c98f711ffcb04c88cca9235", "patch": "@@ -1,3 +1,13 @@\n+2017-06-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/80887\n+\t* tree-ssa-sccvn.c (mprts_hook_cnt): New global.\n+\t(vn_lookup_simplify_result): Allow only mprts_hook_cnt succesful\n+\tsimplified lookups, then reset mprts_hook.\n+\t(vn_nary_build_or_lookup_1): Set mprts_hook_cnt to 9 before\n+\tsimplifying.\n+\t(try_to_simplify): Likewise.\n+\n 2017-06-19  Martin Liska  <mliska@suse.cz>\n \n \tPR sanitizer/80879"}, {"sha": "58d59a658710e5729dd76c5c5ed857779de0126d", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/343ae898b17490d15c98f711ffcb04c88cca9235/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/343ae898b17490d15c98f711ffcb04c88cca9235/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=343ae898b17490d15c98f711ffcb04c88cca9235", "patch": "@@ -1,3 +1,8 @@\n+2017-06-19  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-parser.c (c_parser_gimple_postfix_expression): Handle\n+\tnegated _Literals to parse _Literal (int) -1.\n+\n 2017-06-13  Martin Liska  <mliska@suse.cz>\n \n \tPR sanitize/78204"}, {"sha": "22f58f4e8207ba8b7fa252d94001cf7f5089bd3b", "filename": "gcc/c/gimple-parser.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/343ae898b17490d15c98f711ffcb04c88cca9235/gcc%2Fc%2Fgimple-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/343ae898b17490d15c98f711ffcb04c88cca9235/gcc%2Fc%2Fgimple-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fgimple-parser.c?ref=343ae898b17490d15c98f711ffcb04c88cca9235", "patch": "@@ -850,7 +850,7 @@ c_parser_gimple_postfix_expression (c_parser *parser)\n \t    }\n \t  else if (strcmp (IDENTIFIER_POINTER (id), \"_Literal\") == 0)\n \t    {\n-\t      /* _Literal '(' type-name ')' number  */\n+\t      /* _Literal '(' type-name ')' [ '-' ] constant */\n \t      c_parser_consume_token (parser);\n \t      tree type = NULL_TREE;\n \t      if (c_parser_require (parser, CPP_OPEN_PAREN, \"expected %<(%>\"))\n@@ -862,15 +862,27 @@ c_parser_gimple_postfix_expression (c_parser *parser)\n \t\t  c_parser_skip_until_found (parser, CPP_CLOSE_PAREN,\n \t\t\t\t\t     \"expected %<)%>\");\n \t\t}\n+\t      bool neg_p;\n+\t      if ((neg_p = c_parser_next_token_is (parser, CPP_MINUS)))\n+\t\tc_parser_consume_token (parser);\n \t      tree val = c_parser_gimple_postfix_expression (parser).value;\n \t      if (! type\n \t\t  || ! val\n \t\t  || val == error_mark_node\n-\t\t  || TREE_CODE (val) != INTEGER_CST)\n+\t\t  || ! CONSTANT_CLASS_P (val))\n \t\t{\n \t\t  c_parser_error (parser, \"invalid _Literal\");\n \t\t  return expr;\n \t\t}\n+\t      if (neg_p)\n+\t\t{\n+\t\t  val = const_unop (NEGATE_EXPR, TREE_TYPE (val), val);\n+\t\t  if (! val)\n+\t\t    {\n+\t\t      c_parser_error (parser, \"invalid _Literal\");\n+\t\t      return expr;\n+\t\t    }\n+\t\t}\n \t      expr.value = fold_convert (type, val);\n \t      return expr;\n \t    }"}, {"sha": "47e2a984f23d3062a9b0ef75a3d44a7c55fd8bc2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/343ae898b17490d15c98f711ffcb04c88cca9235/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/343ae898b17490d15c98f711ffcb04c88cca9235/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=343ae898b17490d15c98f711ffcb04c88cca9235", "patch": "@@ -1,3 +1,8 @@\n+2017-06-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/80887\n+\t* gcc.dg/tree-ssa/pr80887.c: New testcase.\n+\n 2017-06-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR ipa/81112"}, {"sha": "df7a9d96eebfc3c9758650b748e1db43d95e17a9", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr80887.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/343ae898b17490d15c98f711ffcb04c88cca9235/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr80887.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/343ae898b17490d15c98f711ffcb04c88cca9235/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr80887.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr80887.c?ref=343ae898b17490d15c98f711ffcb04c88cca9235", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fgimple -O\" } */\n+\n+int pos;\n+void __GIMPLE (startwith(\"fre\"))\n+f()\n+{\n+  unsigned int t2;\n+  unsigned int t1;\n+  int a;\n+  unsigned int u;\n+  int _1;\n+  int _2;\n+  int _3;\n+  unsigned int _4;\n+  int _5;\n+  unsigned int _6;\n+\n+bb_2:\n+  _1 = pos;\n+  _2 = _1 + 1;\n+  pos = _2;\n+  _3 = pos;\n+  _4 = (unsigned int) _3;\n+  u_9 = _4 + 4294967295u;\n+  a_10 = pos;\n+  _5 = a_10 + _Literal (int) -1;\n+  t1_11 = (unsigned int) _5;\n+  _6 = (unsigned int) a_10;\n+  t2_12 = _6 + 4294967294u;\n+  return;\n+}"}, {"sha": "324cd73f513eb8b860f072825ccc191f27859947", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/343ae898b17490d15c98f711ffcb04c88cca9235/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/343ae898b17490d15c98f711ffcb04c88cca9235/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=343ae898b17490d15c98f711ffcb04c88cca9235", "patch": "@@ -1639,6 +1639,7 @@ vn_reference_lookup_or_insert_for_pieces (tree vuse,\n }\n \n static vn_nary_op_t vn_nary_op_insert_stmt (gimple *stmt, tree result);\n+static unsigned mprts_hook_cnt;\n \n /* Hook for maybe_push_res_to_seq, lookup the expression in the VN tables.  */\n \n@@ -1648,8 +1649,22 @@ vn_lookup_simplify_result (code_helper rcode, tree type, tree *ops)\n   if (!rcode.is_tree_code ())\n     return NULL_TREE;\n   vn_nary_op_t vnresult = NULL;\n-  return vn_nary_op_lookup_pieces (TREE_CODE_LENGTH ((tree_code) rcode),\n-\t\t\t\t   (tree_code) rcode, type, ops, &vnresult);\n+  tree res = vn_nary_op_lookup_pieces (TREE_CODE_LENGTH ((tree_code) rcode),\n+\t\t\t\t       (tree_code) rcode, type, ops, &vnresult);\n+  /* We can end up endlessly recursing simplifications if the lookup above\n+     presents us with a def-use chain that mirrors the original simplification.\n+     See PR80887 for an example.  Limit successful lookup artificially\n+     to 10 times if we are called as mprts_hook.  */\n+  if (res\n+      && mprts_hook\n+      && --mprts_hook_cnt == 0)\n+    {\n+      if (dump_file && (dump_flags & TDF_DETAILS))\n+\tfprintf (dump_file, \"Resetting mprts_hook after too many \"\n+\t\t \"invocations.\\n\");\n+      mprts_hook = NULL;\n+    }\n+  return res;\n }\n \n /* Return a value-number for RCODE OPS... either by looking up an existing\n@@ -1666,6 +1681,7 @@ vn_nary_build_or_lookup_1 (code_helper rcode, tree type, tree *ops,\n      So first simplify and lookup this expression to see if it\n      is already available.  */\n   mprts_hook = vn_lookup_simplify_result;\n+  mprts_hook_cnt = 9;\n   bool res = false;\n   switch (TREE_CODE_LENGTH ((tree_code) rcode))\n     {\n@@ -3896,6 +3912,7 @@ try_to_simplify (gassign *stmt)\n \n   /* First try constant folding based on our current lattice.  */\n   mprts_hook = vn_lookup_simplify_result;\n+  mprts_hook_cnt = 9;\n   tem = gimple_fold_stmt_to_constant_1 (stmt, vn_valueize, vn_valueize);\n   mprts_hook = NULL;\n   if (tem"}]}