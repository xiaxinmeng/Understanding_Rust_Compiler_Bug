{"sha": "3d66c777195cdefd1397a1a77a5396d914881494", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q2NmM3NzcxOTVjZGVmZDEzOTdhMWE3N2E1Mzk2ZDkxNDg4MTQ5NA==", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2019-12-13T15:29:26Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@gcc.gnu.org", "date": "2019-12-13T15:29:26Z"}, "message": "Sub-dword vector extend and truncate for amdgcn\n\n2019-12-13  Andrew Stubbs  <ams@codesourcery.com>\n\n\tgcc/\n\t* config/gcn/gcn-valu.md (sdwa): New mode attribute.\n\t(VCVT_FROM_MODE): Rename to ...\n\t(VCVT_MODE): ... this.\n\t(VCVT_TO_MODE): Delete mode iterator.\n\t(VCVT_FMODE): New mode iterator.\n\t(VCVT_IMODE): Likewise.\n\t(<cvt_name><VCVT_FROM_MODE:mode><VCVT_TO_MODE:mode>2<exec>): Change ...\n\t(<cvt_name><VCVT_MODE:mode><VCVT_FMODE:mode>2<exec>): ... to this.\n\t(<cvt_name><VCVT_FMODE:mode><VCVT_IMODE:mode>2<exec>): New.\n\t(zero_convert): New code iterator.\n\t(convop): New code attribute.\n\t(<convop><VEC_ALL1REG_INT_ALT:mode><VEC_ALL1REG_INT_MODE:mode>2<exec>)\n\t: New.\n\t(extend<VEC_ALL1REG_INT_ALT:mode><VEC_ALL1REG_INT_MODE:mode>2<exec>)\n\t: New.\n\t(vec_truncatev64div64si): Rename to ...\n\t(truncv64di<mode>2): ... this and implement sub-dword patterns.\n\t(vec_truncatev64div64si_exec): Rename to ...\n\t(truncv64di<mode>2_exec): ... this and implement sub-dword patterns.\n\t(<convop><mode>v64di2): New insn_and_split.\n\t(<convop><mode>v64di2_exec): Likewise.\n\t(mask_gather_load<mode>): Update truncate names.\n\t(mask_scatter_store<mode>): Likewise.\n\t* config/gcn/gcn.c (gcn_expand_scaled_offsets): Update truncate names.\n\nFrom-SVN: r279372", "tree": {"sha": "28257bdecbd8212c599efb7628a7dec8982e993b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28257bdecbd8212c599efb7628a7dec8982e993b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d66c777195cdefd1397a1a77a5396d914881494", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d66c777195cdefd1397a1a77a5396d914881494", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d66c777195cdefd1397a1a77a5396d914881494", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d66c777195cdefd1397a1a77a5396d914881494/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a93e1d5c70abe9fba3522318131a352fad0a4f48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a93e1d5c70abe9fba3522318131a352fad0a4f48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a93e1d5c70abe9fba3522318131a352fad0a4f48"}], "stats": {"total": 203, "additions": 169, "deletions": 34}, "files": [{"sha": "864d954f8e3b43213361b98d833261e0c2f71672", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d66c777195cdefd1397a1a77a5396d914881494/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d66c777195cdefd1397a1a77a5396d914881494/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d66c777195cdefd1397a1a77a5396d914881494", "patch": "@@ -1,3 +1,30 @@\n+2019-12-13  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/gcn-valu.md (sdwa): New mode attribute.\n+\t(VCVT_FROM_MODE): Rename to ...\n+\t(VCVT_MODE): ... this.\n+\t(VCVT_TO_MODE): Delete mode iterator.\n+\t(VCVT_FMODE): New mode iterator.\n+\t(VCVT_IMODE): Likewise.\n+\t(<cvt_name><VCVT_FROM_MODE:mode><VCVT_TO_MODE:mode>2<exec>): Change ...\n+\t(<cvt_name><VCVT_MODE:mode><VCVT_FMODE:mode>2<exec>): ... to this.\n+\t(<cvt_name><VCVT_FMODE:mode><VCVT_IMODE:mode>2<exec>): New.\n+\t(zero_convert): New code iterator.\n+\t(convop): New code attribute.\n+\t(<convop><VEC_ALL1REG_INT_ALT:mode><VEC_ALL1REG_INT_MODE:mode>2<exec>)\n+\t: New.\n+\t(extend<VEC_ALL1REG_INT_ALT:mode><VEC_ALL1REG_INT_MODE:mode>2<exec>)\n+\t: New.\n+\t(vec_truncatev64div64si): Rename to ...\n+\t(truncv64di<mode>2): ... this and implement sub-dword patterns.\n+\t(vec_truncatev64div64si_exec): Rename to ...\n+\t(truncv64di<mode>2_exec): ... this and implement sub-dword patterns.\n+\t(<convop><mode>v64di2): New insn_and_split.\n+\t(<convop><mode>v64di2_exec): Likewise.\n+\t(mask_gather_load<mode>): Update truncate names.\n+\t(mask_scatter_store<mode>): Likewise.\n+\t* config/gcn/gcn.c (gcn_expand_scaled_offsets): Update truncate names.\n+\n 2019-12-13  Dennis Zhang  <dennis.zhang@arm.com>\n \n \t* config/aarch64/aarch64-arches.def (armv8.6-a): New."}, {"sha": "e1b3c71971f3ed456c046b0a77805fbf9c8810b0", "filename": "gcc/config/gcn/gcn-valu.md", "status": "modified", "additions": 141, "deletions": 33, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d66c777195cdefd1397a1a77a5396d914881494/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d66c777195cdefd1397a1a77a5396d914881494/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md?ref=3d66c777195cdefd1397a1a77a5396d914881494", "patch": "@@ -53,6 +53,8 @@\n   [(V64QI \"QI\") (V64HI \"HI\") (V64SI \"SI\")\n    (V64HF \"HF\") (V64SF \"SF\") (V64DI \"DI\") (V64DF \"DF\")])\n \n+(define_mode_attr sdwa [(V64QI \"BYTE_0\") (V64HI \"WORD_0\") (V64SI \"DWORD\")])\n+\n ;; }}}\n ;; {{{ Substitutions\n \n@@ -2392,8 +2394,9 @@\n (define_mode_iterator CVT_FROM_MODE [HI SI HF SF DF])\n (define_mode_iterator CVT_TO_MODE [HI SI HF SF DF])\n \n-(define_mode_iterator VCVT_FROM_MODE [V64HI V64SI V64HF V64SF V64DF])\n-(define_mode_iterator VCVT_TO_MODE [V64HI V64SI V64HF V64SF V64DF])\n+(define_mode_iterator VCVT_MODE [V64HI V64SI V64HF V64SF V64DF])\n+(define_mode_iterator VCVT_FMODE [V64HF V64SF V64DF])\n+(define_mode_iterator VCVT_IMODE [V64HI V64SI])\n \n (define_code_iterator cvt_op [fix unsigned_fix\n \t\t\t      float unsigned_float\n@@ -2416,11 +2419,21 @@\n   [(set_attr \"type\" \"vop1\")\n    (set_attr \"length\" \"8\")])\n \n-(define_insn \"<cvt_name><VCVT_FROM_MODE:mode><VCVT_TO_MODE:mode>2<exec>\"\n-  [(set (match_operand:VCVT_TO_MODE 0 \"register_operand\"    \"=  v\")\n-\t(cvt_op:VCVT_TO_MODE\n-\t  (match_operand:VCVT_FROM_MODE 1 \"gcn_alu_operand\" \"vSvB\")))]\n-  \"gcn_valid_cvt_p (<VCVT_FROM_MODE:MODE>mode, <VCVT_TO_MODE:MODE>mode,\n+(define_insn \"<cvt_name><VCVT_MODE:mode><VCVT_FMODE:mode>2<exec>\"\n+  [(set (match_operand:VCVT_FMODE 0 \"register_operand\" \"=  v\")\n+\t(cvt_op:VCVT_FMODE\n+\t  (match_operand:VCVT_MODE 1 \"gcn_alu_operand\" \"vSvB\")))]\n+  \"gcn_valid_cvt_p (<VCVT_MODE:MODE>mode, <VCVT_FMODE:MODE>mode,\n+\t\t    <cvt_name>_cvt)\"\n+  \"v_cvt<cvt_operands>\\t%0, %1\"\n+  [(set_attr \"type\" \"vop1\")\n+   (set_attr \"length\" \"8\")])\n+\n+(define_insn \"<cvt_name><VCVT_FMODE:mode><VCVT_IMODE:mode>2<exec>\"\n+  [(set (match_operand:VCVT_IMODE 0 \"register_operand\"  \"=  v\")\n+\t(cvt_op:VCVT_IMODE\n+\t  (match_operand:VCVT_FMODE 1 \"gcn_alu_operand\" \"vSvB\")))]\n+  \"gcn_valid_cvt_p (<VCVT_FMODE:MODE>mode, <VCVT_IMODE:MODE>mode,\n \t\t    <cvt_name>_cvt)\"\n   \"v_cvt<cvt_operands>\\t%0, %1\"\n   [(set_attr \"type\" \"vop1\")\n@@ -2429,42 +2442,137 @@\n ;; }}}\n ;; {{{ Int/int conversions\n \n+(define_code_iterator zero_convert [truncate zero_extend])\n+(define_code_attr convop [\n+\t(sign_extend \"extend\")\n+\t(zero_extend \"zero_extend\")\n+\t(truncate \"trunc\")])\n+\n+(define_insn \"<convop><VEC_ALL1REG_INT_ALT:mode><VEC_ALL1REG_INT_MODE:mode>2<exec>\"\n+  [(set (match_operand:VEC_ALL1REG_INT_MODE 0 \"register_operand\"  \"=v\")\n+        (zero_convert:VEC_ALL1REG_INT_MODE\n+\t  (match_operand:VEC_ALL1REG_INT_ALT 1 \"register_operand\" \" v\")))]\n+  \"\"\n+  \"v_mov_b32_sdwa\\t%0, %1 dst_sel:<VEC_ALL1REG_INT_MODE:sdwa> dst_unused:UNUSED_PAD src0_sel:<VEC_ALL1REG_INT_ALT:sdwa>\"\n+  [(set_attr \"type\" \"vop_sdwa\")\n+   (set_attr \"length\" \"8\")])\n+\n+(define_insn \"extend<VEC_ALL1REG_INT_ALT:mode><VEC_ALL1REG_INT_MODE:mode>2<exec>\"\n+  [(set (match_operand:VEC_ALL1REG_INT_MODE 0 \"register_operand\"  \"=v\")\n+        (sign_extend:VEC_ALL1REG_INT_MODE\n+\t  (match_operand:VEC_ALL1REG_INT_ALT 1 \"register_operand\" \" v\")))]\n+  \"\"\n+  \"v_mov_b32_sdwa\\t%0, sext(%1) src0_sel:<VEC_ALL1REG_INT_ALT:sdwa>\"\n+  [(set_attr \"type\" \"vop_sdwa\")\n+   (set_attr \"length\" \"8\")])\n+\n ;; GCC can already do these for scalar types, but not for vector types.\n ;; Unfortunately you can't just do SUBREG on a vector to select the low part,\n ;; so there must be a few tricks here.\n \n-(define_insn_and_split \"vec_truncatev64div64si\"\n-  [(set (match_operand:V64SI 0 \"register_operand\"   \"=v,&v\")\n-\t(truncate:V64SI\n-\t  (match_operand:V64DI 1 \"register_operand\" \" 0, v\")))]\n+(define_insn_and_split \"truncv64di<mode>2\"\n+  [(set (match_operand:VEC_ALL1REG_INT_MODE 0 \"register_operand\" \"=v\")\n+\t(truncate:VEC_ALL1REG_INT_MODE\n+\t  (match_operand:V64DI 1 \"register_operand\"              \" v\")))]\n   \"\"\n   \"#\"\n   \"reload_completed\"\n-  [(set (match_dup 0) (match_dup 1))]\n+  [(const_int 0)]\n   {\n-    operands[1] = gcn_operand_part (V64SImode, operands[1], 0);\n+    rtx inlo = gcn_operand_part (V64DImode, operands[1], 0);\n+    rtx out = operands[0];\n+\n+    if (<MODE>mode != V64SImode)\n+      emit_insn (gen_truncv64si<mode>2 (out, inlo));\n+    else\n+      emit_move_insn (out, inlo);\n   }\n   [(set_attr \"type\" \"vop2\")\n-   (set_attr \"length\" \"0,4\")])\n-\n-(define_insn_and_split \"vec_truncatev64div64si_exec\"\n-  [(set (match_operand:V64SI 0 \"register_operand\"\t     \"=v,&v\")\n-\t(vec_merge:V64SI\n-\t  (truncate:V64SI\n-\t    (match_operand:V64DI 1 \"register_operand\"        \" 0, v\"))\n-\t  (match_operand:V64SI 2 \"gcn_alu_or_unspec_operand\" \"U0,U0\")\n-\t  (match_operand:DI 3 \"gcn_exec_operand\"\t     \" e, e\")))]\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn_and_split \"truncv64di<mode>2_exec\"\n+  [(set (match_operand:VEC_ALL1REG_INT_MODE 0 \"register_operand\"       \"=v\")\n+\t(vec_merge:VEC_ALL1REG_INT_MODE\n+\t  (truncate:VEC_ALL1REG_INT_MODE\n+\t    (match_operand:V64DI 1 \"register_operand\"\t\t       \" v\"))\n+\t  (match_operand:VEC_ALL1REG_INT_MODE 2 \"gcn_alu_or_unspec_operand\" \n+\t\t\t\t\t\t\t\t       \"U0\")\n+\t  (match_operand:DI 3 \"gcn_exec_operand\"\t\t       \" e\")))]\n   \"\"\n   \"#\"\n   \"reload_completed\"\n-  [(parallel [(set (match_dup 0)\n-\t\t   (vec_merge:V64SI (match_dup 1) (match_dup 2) (match_dup 3)))\n-\t      (clobber (scratch:V64DI))])]\n+  [(const_int 0)]\n   {\n-    operands[1] = gcn_operand_part (V64SImode, operands[1], 0);\n+    rtx out = operands[0];\n+    rtx inlo = gcn_operand_part (V64DImode, operands[1], 0);\n+    rtx merge = operands[2];\n+    rtx exec = operands[3];\n+\n+    if (<MODE>mode != V64SImode)\n+      emit_insn (gen_truncv64si<mode>2_exec (out, inlo, merge, exec));\n+    else\n+      emit_insn (gen_mov<mode>_exec (out, inlo, exec, merge));\n   }\n   [(set_attr \"type\" \"vop2\")\n-   (set_attr \"length\" \"0,4\")])\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn_and_split \"<convop><mode>v64di2\"\n+  [(set (match_operand:V64DI 0 \"register_operand\"\t\t   \"=v\")\n+\t(any_extend:V64DI\n+\t  (match_operand:VEC_ALL1REG_INT_MODE 1 \"register_operand\" \" v\")))]\n+  \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(const_int 0)]\n+  {\n+    rtx outlo = gcn_operand_part (V64DImode, operands[0], 0);\n+    rtx outhi = gcn_operand_part (V64DImode, operands[0], 1);\n+    rtx in = operands[1];\n+      \n+    if (<MODE>mode != V64SImode)\n+      emit_insn (gen_<convop><mode>v64si2 (outlo, in));\n+    else\n+      emit_move_insn (outlo, in);\n+    if ('<su>' == 's')\n+      emit_insn (gen_ashrv64si3 (outhi, outlo, GEN_INT (31)));\n+    else\n+      emit_insn (gen_vec_duplicatev64si (outhi, const0_rtx));\n+  }\n+  [(set_attr \"type\" \"mult\")\n+   (set_attr \"length\" \"12\")])\n+\n+(define_insn_and_split \"<convop><mode>v64di2_exec\"\n+  [(set (match_operand:V64DI 0 \"register_operand\"\t\t     \"=v\")\n+\t(vec_merge:V64DI\n+\t  (any_extend:V64DI\n+\t    (match_operand:VEC_ALL1REG_INT_MODE 1 \"register_operand\" \" v\"))\n+\t  (match_operand:V64DI 2 \"gcn_alu_or_unspec_operand\"\t     \"U0\")\n+\t  (match_operand:DI 3 \"gcn_exec_operand\"\t\t     \" e\")))]\n+  \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(const_int 0)]\n+  {\n+    rtx outlo = gcn_operand_part (V64DImode, operands[0], 0);\n+    rtx outhi = gcn_operand_part (V64DImode, operands[0], 1);\n+    rtx in = operands[1];\n+    rtx mergelo = gcn_operand_part (V64DImode, operands[2], 0);\n+    rtx mergehi = gcn_operand_part (V64DImode, operands[2], 1);\n+    rtx exec = operands[3];\n+      \n+    if (<MODE>mode != V64SImode)\n+      emit_insn (gen_<convop><mode>v64si2_exec (outlo, in, mergelo, exec));\n+    else\n+      emit_insn (gen_mov<mode>_exec (outlo, in, exec, mergelo));\n+    if ('<su>' == 's')\n+      emit_insn (gen_ashrv64si3_exec (outhi, outlo, GEN_INT (31), mergehi,\n+\t\t\t\t      exec));\n+    else\n+      emit_insn (gen_vec_duplicatev64si_exec (outhi, const0_rtx, mergehi,\n+\t\t\t\t\t      exec));\n+  }\n+  [(set_attr \"type\" \"mult\")\n+   (set_attr \"length\" \"12\")])\n \n ;; }}}\n ;; {{{ Vector comparison/merge\n@@ -2726,9 +2834,9 @@\n     if (GET_MODE (operands[2]) == V64DImode)\n       {\n \trtx tmp = gen_reg_rtx (V64SImode);\n-\temit_insn (gen_vec_truncatev64div64si_exec (tmp, operands[2],\n-\t\t\t\t\t\t    gcn_gen_undef (V64SImode),\n-\t\t\t\t\t\t    exec));\n+\temit_insn (gen_truncv64div64si2_exec (tmp, operands[2],\n+\t\t\t\t\t      gcn_gen_undef (V64SImode),\n+\t\t\t\t\t      exec));\n \toperands[2] = tmp;\n       }\n \n@@ -2752,9 +2860,9 @@\n     if (GET_MODE (operands[1]) == V64DImode)\n       {\n \trtx tmp = gen_reg_rtx (V64SImode);\n-\temit_insn (gen_vec_truncatev64div64si_exec (tmp, operands[1],\n-\t\t\t\t\t\t    gcn_gen_undef (V64SImode),\n-\t\t\t\t\t\t    exec));\n+\temit_insn (gen_truncv64div64si2_exec (tmp, operands[1],\n+\t\t\t\t\t      gcn_gen_undef (V64SImode),\n+\t\t\t\t\t      exec));\n \toperands[1] = tmp;\n       }\n "}, {"sha": "cf189a4ad80fcc476d021d174044998a0ab1c461", "filename": "gcc/config/gcn/gcn.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d66c777195cdefd1397a1a77a5396d914881494/gcc%2Fconfig%2Fgcn%2Fgcn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d66c777195cdefd1397a1a77a5396d914881494/gcc%2Fconfig%2Fgcn%2Fgcn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.c?ref=3d66c777195cdefd1397a1a77a5396d914881494", "patch": "@@ -1846,7 +1846,7 @@ gcn_expand_scaled_offsets (addr_space_t as, rtx base, rtx offsets, rtx scale,\n   if (GET_MODE (offsets) == V64DImode)\n     {\n       rtx tmp = gen_reg_rtx (V64SImode);\n-      emit_insn (gen_vec_truncatev64div64si (tmp, offsets));\n+      emit_insn (gen_truncv64div64si2 (tmp, offsets));\n       offsets = tmp;\n     }\n "}]}