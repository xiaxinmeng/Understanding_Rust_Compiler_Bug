{"sha": "316cbf7910704b678ab6f41b9918882a2ef83e09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE2Y2JmNzkxMDcwNGI2NzhhYjZmNDFiOTkxODg4MmEyZWY4M2UwOQ==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2015-01-26T15:51:06Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2015-01-26T15:51:06Z"}, "message": "[ARM/AArch64][testsuite] Add vmnv tests.\n\n2015-01-26  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vmvn.c: New file.\n\nFrom-SVN: r220122", "tree": {"sha": "3bbd378e3175f1c432642fcac27753c26aefbe11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3bbd378e3175f1c432642fcac27753c26aefbe11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/316cbf7910704b678ab6f41b9918882a2ef83e09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/316cbf7910704b678ab6f41b9918882a2ef83e09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/316cbf7910704b678ab6f41b9918882a2ef83e09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/316cbf7910704b678ab6f41b9918882a2ef83e09/comments", "author": null, "committer": null, "parents": [{"sha": "0e6057c691f5629eadcceee9fb8f373ac5167dc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e6057c691f5629eadcceee9fb8f373ac5167dc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e6057c691f5629eadcceee9fb8f373ac5167dc7"}], "stats": {"total": 143, "additions": 142, "deletions": 1}, "files": [{"sha": "1078a2dcf8573275e98982f201da7f63e0bf8b78", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/316cbf7910704b678ab6f41b9918882a2ef83e09/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/316cbf7910704b678ab6f41b9918882a2ef83e09/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=316cbf7910704b678ab6f41b9918882a2ef83e09", "patch": "@@ -1,6 +1,10 @@\n 2015-01-26  Christophe Lyon  <christophe.lyon@linaro.org>\n \n-\t    * gcc.target/aarch64/advsimd-intrinsics/vmovl.c: New file.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmvn.c: New file.\n+\n+2015-01-26  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmovl.c: New file.\n \n 2015-01-26  Christophe Lyon  <christophe.lyon@linaro.org>\n "}, {"sha": "268a7071ef8f70c783638eba66fd56f3cfd45b47", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmvn.c", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/316cbf7910704b678ab6f41b9918882a2ef83e09/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/316cbf7910704b678ab6f41b9918882a2ef83e09/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmvn.c?ref=316cbf7910704b678ab6f41b9918882a2ef83e09", "patch": "@@ -0,0 +1,137 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0xf, 0xe, 0xd, 0xc,\n+\t\t\t\t       0xb, 0xa, 0x9, 0x8 };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0xf, 0xe, 0xd, 0xc };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0xf, 0xe };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0xf, 0xe, 0xd, 0xc,\n+\t\t\t\t\t0xb, 0xa, 0x9, 0x8 };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0xf, 0xe, 0xd, 0xc };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0xf, 0xe };\n+VECT_VAR_DECL(expected,poly,8,8) [] = { 0xf, 0xe, 0xd, 0xc,\n+\t\t\t\t\t0xb, 0xa, 0x9, 0x8 };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0xf, 0xe, 0xd, 0xc,\n+\t\t\t\t\t0xb, 0xa, 0x9, 0x8,\n+\t\t\t\t\t0x7, 0x6, 0x5, 0x4,\n+\t\t\t\t\t0x3, 0x2, 0x1, 0x0 };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0xf, 0xe, 0xd, 0xc,\n+\t\t\t\t\t0xb, 0xa, 0x9, 0x8 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0xf, 0xe, 0xd, 0xc };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0xf, 0xe, 0xd, 0xc,\n+\t\t\t\t\t 0xb, 0xa, 0x9, 0x8,\n+\t\t\t\t\t 0x7, 0x6, 0x5, 0x4,\n+\t\t\t\t\t 0x3, 0x2, 0x1, 0x0 };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0xf, 0xe, 0xd, 0xc,\n+\t\t\t\t\t 0xb, 0xa, 0x9, 0x8 };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0xf, 0xe, 0xd, 0xc };\n+VECT_VAR_DECL(expected,poly,8,16) [] = { 0xf, 0xe, 0xd, 0xc,\n+\t\t\t\t\t 0xb, 0xa, 0x9, 0x8,\n+\t\t\t\t\t 0x7, 0x6, 0x5, 0x4,\n+\t\t\t\t\t 0x3, 0x2, 0x1, 0x0 };\n+\n+#define INSN_NAME vmvn\n+#define TEST_MSG \"VMVN/VMVNQ\"\n+\n+#define FNNAME1(NAME) void exec_ ## NAME (void)\n+#define FNNAME(NAME) FNNAME1(NAME)\n+\n+FNNAME (INSN_NAME)\n+{\n+  /* Basic test: y=OP(x), then store the result.  */\n+#define TEST_UNARY_OP1(INSN, Q, T1, T2, W, N)\t\t\t\t\\\n+  VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n+    INSN##Q##_##T2##W(VECT_VAR(vector, T1, W, N));\t\t\t\\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N), VECT_VAR(vector_res, T1, W, N))\n+\n+#define TEST_UNARY_OP(INSN, Q, T1, T2, W, N)\t\t\t\t\\\n+  TEST_UNARY_OP1(INSN, Q, T1, T2, W, N)\t\t\t\t\t\\\n+\n+  /* No need for 64 bits variants.  */\n+  DECL_VARIABLE(vector, int, 8, 8);\n+  DECL_VARIABLE(vector, int, 16, 4);\n+  DECL_VARIABLE(vector, int, 32, 2);\n+  DECL_VARIABLE(vector, uint, 8, 8);\n+  DECL_VARIABLE(vector, uint, 16, 4);\n+  DECL_VARIABLE(vector, uint, 32, 2);\n+  DECL_VARIABLE(vector, poly, 8, 8);\n+  DECL_VARIABLE(vector, int, 8, 16);\n+  DECL_VARIABLE(vector, int, 16, 8);\n+  DECL_VARIABLE(vector, int, 32, 4);\n+  DECL_VARIABLE(vector, uint, 8, 16);\n+  DECL_VARIABLE(vector, uint, 16, 8);\n+  DECL_VARIABLE(vector, uint, 32, 4);\n+  DECL_VARIABLE(vector, poly, 8, 16);\n+\n+  DECL_VARIABLE(vector_res, int, 8, 8);\n+  DECL_VARIABLE(vector_res, int, 16, 4);\n+  DECL_VARIABLE(vector_res, int, 32, 2);\n+  DECL_VARIABLE(vector_res, uint, 8, 8);\n+  DECL_VARIABLE(vector_res, uint, 16, 4);\n+  DECL_VARIABLE(vector_res, uint, 32, 2);\n+  DECL_VARIABLE(vector_res, poly, 8, 8);\n+  DECL_VARIABLE(vector_res, int, 8, 16);\n+  DECL_VARIABLE(vector_res, int, 16, 8);\n+  DECL_VARIABLE(vector_res, int, 32, 4);\n+  DECL_VARIABLE(vector_res, uint, 8, 16);\n+  DECL_VARIABLE(vector_res, uint, 16, 8);\n+  DECL_VARIABLE(vector_res, uint, 32, 4);\n+  DECL_VARIABLE(vector_res, poly, 8, 16);\n+\n+  clean_results ();\n+\n+  /* Initialize input \"vector\" from \"buffer\".  */\n+  VLOAD(vector, buffer, , int, s, 8, 8);\n+  VLOAD(vector, buffer, , int, s, 16, 4);\n+  VLOAD(vector, buffer, , int, s, 32, 2);\n+  VLOAD(vector, buffer, , uint, u, 8, 8);\n+  VLOAD(vector, buffer, , uint, u, 16, 4);\n+  VLOAD(vector, buffer, , uint, u, 32, 2);\n+  VLOAD(vector, buffer, , poly, p, 8, 8);\n+  VLOAD(vector, buffer, q, int, s, 8, 16);\n+  VLOAD(vector, buffer, q, int, s, 16, 8);\n+  VLOAD(vector, buffer, q, int, s, 32, 4);\n+  VLOAD(vector, buffer, q, uint, u, 8, 16);\n+  VLOAD(vector, buffer, q, uint, u, 16, 8);\n+  VLOAD(vector, buffer, q, uint, u, 32, 4);\n+  VLOAD(vector, buffer, q, poly, p, 8, 16);\n+\n+  /* Apply a unary operator named INSN_NAME.  */\n+  TEST_UNARY_OP(INSN_NAME, , int, s, 8, 8);\n+  TEST_UNARY_OP(INSN_NAME, , int, s, 16, 4);\n+  TEST_UNARY_OP(INSN_NAME, , int, s, 32, 2);\n+  TEST_UNARY_OP(INSN_NAME, , uint, u, 8, 8);\n+  TEST_UNARY_OP(INSN_NAME, , uint, u, 16, 4);\n+  TEST_UNARY_OP(INSN_NAME, , uint, u, 32, 2);\n+  TEST_UNARY_OP(INSN_NAME, , poly, p, 8, 8);\n+  TEST_UNARY_OP(INSN_NAME, q, int, s, 8, 16);\n+  TEST_UNARY_OP(INSN_NAME, q, int, s, 16, 8);\n+  TEST_UNARY_OP(INSN_NAME, q, int, s, 32, 4);\n+  TEST_UNARY_OP(INSN_NAME, q, uint, u, 8, 16);\n+  TEST_UNARY_OP(INSN_NAME, q, uint, u, 16, 8);\n+  TEST_UNARY_OP(INSN_NAME, q, uint, u, 32, 4);\n+  TEST_UNARY_OP(INSN_NAME, q, poly, p, 8, 16);\n+\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected, \"\");\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected, \"\");\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected, \"\");\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected, \"\");\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected, \"\");\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected, \"\");\n+  CHECK(TEST_MSG, poly, 8, 8, PRIx8, expected, \"\");\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected, \"\");\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected, \"\");\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected, \"\");\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected, \"\");\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected, \"\");\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, \"\");\n+  CHECK(TEST_MSG, poly, 8, 16, PRIx8, expected, \"\");\n+}\n+\n+int main (void)\n+{\n+  exec_vmvn ();\n+  return 0;\n+}"}]}