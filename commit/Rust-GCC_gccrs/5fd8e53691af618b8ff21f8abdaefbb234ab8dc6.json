{"sha": "5fd8e53691af618b8ff21f8abdaefbb234ab8dc6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWZkOGU1MzY5MWFmNjE4YjhmZjIxZjhhYmRhZWZiYjIzNGFiOGRjNg==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-12-01T22:25:43Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-12-01T22:25:43Z"}, "message": "c-common.c: Include \"defaults.h\".\n\n\t* c-common.c: Include \"defaults.h\".\n\t(WINT_TYPE, INTMAX_TYPE, UINTMAX_TYPE): Define.\n\t(c_common_nodes_and_builtins): Create string_type_node,\n\tconst_string_type_node, wint_type_node, intmax_type_node,\n\tuintmax_type_node, default_function_type, ptrdiff_type_node and\n\tunsigned_ptrdiff_type_node.\n\t* c-common.h (identifier_global_value): Declare.\n\t* c-decl.c (WINT_TYPE, INTMAX_TYPE, UINTMAX_TYPE): Don't define.\n\t(init_decl_processing): Don't create string_type_node,\n\tconst_string_type_node, wint_type_node, intmax_type_node,\n\tuintmax_type_node, default_function_type, ptrdiff_type_node and\n\tunsigned_ptrdiff_type_node.\n\t(identifier_global_value): New function.\n\ncp:\n\t* decl.c (WINT_TYPE, INTMAX_TYPE, UINTMAX_TYPE): Don't define.\n\t(init_decl_processing): Don't create string_type_node,\n\tconst_string_type_node, wint_type_node, intmax_type_node,\n\tuintmax_type_node, default_function_type, ptrdiff_type_node and\n\tunsigned_ptrdiff_type_node.  Adjust position of call to\n\tc_common_nodes_and_builtins.\n\t(identifier_global_value): New function.\n\nFrom-SVN: r37931", "tree": {"sha": "129bd88e5e40aaabb1457a5c0c01dbdb748db7d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/129bd88e5e40aaabb1457a5c0c01dbdb748db7d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5fd8e53691af618b8ff21f8abdaefbb234ab8dc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fd8e53691af618b8ff21f8abdaefbb234ab8dc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fd8e53691af618b8ff21f8abdaefbb234ab8dc6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fd8e53691af618b8ff21f8abdaefbb234ab8dc6/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "239b8e589de7bd00ecfaba044dfed56f123278fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/239b8e589de7bd00ecfaba044dfed56f123278fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/239b8e589de7bd00ecfaba044dfed56f123278fb"}], "stats": {"total": 176, "additions": 92, "deletions": 84}, "files": [{"sha": "aa8cd850a5973e0bdb4b19973a8d51d1575fb28d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fd8e53691af618b8ff21f8abdaefbb234ab8dc6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fd8e53691af618b8ff21f8abdaefbb234ab8dc6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5fd8e53691af618b8ff21f8abdaefbb234ab8dc6", "patch": "@@ -1,3 +1,19 @@\n+2000-12-01  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* c-common.c: Include \"defaults.h\".\n+\t(WINT_TYPE, INTMAX_TYPE, UINTMAX_TYPE): Define.\n+\t(c_common_nodes_and_builtins): Create string_type_node,\n+\tconst_string_type_node, wint_type_node, intmax_type_node,\n+\tuintmax_type_node, default_function_type, ptrdiff_type_node and\n+\tunsigned_ptrdiff_type_node.\n+\t* c-common.h (identifier_global_value): Declare.\n+\t* c-decl.c (WINT_TYPE, INTMAX_TYPE, UINTMAX_TYPE): Don't define.\n+\t(init_decl_processing): Don't create string_type_node,\n+\tconst_string_type_node, wint_type_node, intmax_type_node,\n+\tuintmax_type_node, default_function_type, ptrdiff_type_node and\n+\tunsigned_ptrdiff_type_node.\n+\t(identifier_global_value): New function.\n+\n 2000-12-01  Neil Booth  <neilb@earthling.net>\n \n         * cppinit.c (initialize): Forgotten prototype."}, {"sha": "0a605f837415141cfdcbeb35409f12090ecf13b3", "filename": "gcc/c-common.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fd8e53691af618b8ff21f8abdaefbb234ab8dc6/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fd8e53691af618b8ff21f8abdaefbb234ab8dc6/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=5fd8e53691af618b8ff21f8abdaefbb234ab8dc6", "patch": "@@ -30,6 +30,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"ggc.h\"\n #include \"expr.h\"\n #include \"c-common.h\"\n+#include \"defaults.h\"\n #include \"tm_p.h\"\n #include \"intl.h\"\n #include \"diagnostic.h\"\n@@ -40,6 +41,26 @@ cpp_reader  parse_in;\n #undef WCHAR_TYPE_SIZE\n #define WCHAR_TYPE_SIZE TYPE_PRECISION (wchar_type_node)\n \n+#ifndef WINT_TYPE\n+#define WINT_TYPE \"unsigned int\"\n+#endif\n+\n+#ifndef INTMAX_TYPE\n+#define INTMAX_TYPE ((INT_TYPE_SIZE == LONG_LONG_TYPE_SIZE)\t\\\n+\t\t     ? \"int\"\t\t\t\t\t\\\n+\t\t     : ((LONG_TYPE_SIZE == LONG_LONG_TYPE_SIZE)\t\\\n+\t\t\t? \"long int\"\t\t\t\t\\\n+\t\t\t: \"long long int\"))\n+#endif\n+\n+#ifndef UINTMAX_TYPE\n+#define UINTMAX_TYPE ((INT_TYPE_SIZE == LONG_LONG_TYPE_SIZE)\t\\\n+\t\t     ? \"unsigned int\"\t\t\t\t\\\n+\t\t     : ((LONG_TYPE_SIZE == LONG_LONG_TYPE_SIZE)\t\\\n+\t\t\t? \"long unsigned int\"\t\t\t\\\n+\t\t\t: \"long long unsigned int\"))\n+#endif\n+\n /* The following symbols are subsumed in the c_global_trees array, and\n    listed here individually for documentation purposes.\n \n@@ -4899,6 +4920,23 @@ c_common_nodes_and_builtins ()\n   tree va_list_ref_type_node;\n   tree va_list_arg_type_node;\n \n+  string_type_node = build_pointer_type (char_type_node);\n+  const_string_type_node\n+    = build_pointer_type (build_type_variant (char_type_node, 1, 0));\n+\n+  wint_type_node =\n+    TREE_TYPE (identifier_global_value (get_identifier (WINT_TYPE)));\n+\n+  intmax_type_node =\n+    TREE_TYPE (identifier_global_value (get_identifier (INTMAX_TYPE)));\n+  uintmax_type_node =\n+    TREE_TYPE (identifier_global_value (get_identifier (UINTMAX_TYPE)));\n+\n+  default_function_type = build_function_type (integer_type_node, NULL_TREE);\n+  ptrdiff_type_node\n+    = TREE_TYPE (identifier_global_value (get_identifier (PTRDIFF_TYPE)));\n+  unsigned_ptrdiff_type_node = unsigned_type (ptrdiff_type_node);\n+\n   pushdecl (build_decl (TYPE_DECL, get_identifier (\"__builtin_va_list\"),\n \t\t\tva_list_type_node));\n "}, {"sha": "b7253c652c96113b43120b1eeaf084505081b1f4", "filename": "gcc/c-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fd8e53691af618b8ff21f8abdaefbb234ab8dc6/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fd8e53691af618b8ff21f8abdaefbb234ab8dc6/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=5fd8e53691af618b8ff21f8abdaefbb234ab8dc6", "patch": "@@ -435,6 +435,8 @@ extern int warn_conversion;\n \n extern tree (*make_fname_decl)                  PARAMS ((tree, const char *, int));\n \n+extern tree identifier_global_value\t\tPARAMS ((tree));\n+\n extern void declare_function_name\t\tPARAMS ((void));\n extern void decl_attributes\t\t\tPARAMS ((tree, tree, tree));\n extern void init_function_format_info\t\tPARAMS ((void));"}, {"sha": "e7c5988fb1e651ce7a97a6e852d1fc5755a342cc", "filename": "gcc/c-decl.c", "status": "modified", "additions": 10, "deletions": 36, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fd8e53691af618b8ff21f8abdaefbb234ab8dc6/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fd8e53691af618b8ff21f8abdaefbb234ab8dc6/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=5fd8e53691af618b8ff21f8abdaefbb234ab8dc6", "patch": "@@ -70,25 +70,6 @@ enum decl_context\n #define WCHAR_TYPE \"int\"\n #endif\n \n-#ifndef WINT_TYPE\n-#define WINT_TYPE \"unsigned int\"\n-#endif\n-\n-#ifndef INTMAX_TYPE\n-#define INTMAX_TYPE ((INT_TYPE_SIZE == LONG_LONG_TYPE_SIZE)\t\\\n-\t\t     ? \"int\"\t\t\t\t\t\\\n-\t\t     : ((LONG_TYPE_SIZE == LONG_LONG_TYPE_SIZE)\t\\\n-\t\t\t? \"long int\"\t\t\t\t\\\n-\t\t\t: \"long long int\"))\n-#endif\n-\n-#ifndef UINTMAX_TYPE\n-#define UINTMAX_TYPE ((INT_TYPE_SIZE == LONG_LONG_TYPE_SIZE)\t\\\n-\t\t     ? \"unsigned int\"\t\t\t\t\\\n-\t\t     : ((LONG_TYPE_SIZE == LONG_LONG_TYPE_SIZE)\t\\\n-\t\t\t? \"long unsigned int\"\t\t\t\\\n-\t\t\t: \"long long unsigned int\"))\n-#endif\n \f\n /* Nonzero if we have seen an invalid cross reference\n    to a struct, union, or enum, but not yet printed the message.  */\n@@ -3081,14 +3062,6 @@ init_decl_processing ()\n   signed_wchar_type_node = signed_type (wchar_type_node);\n   unsigned_wchar_type_node = unsigned_type (wchar_type_node);\n \n-  wint_type_node =\n-    TREE_TYPE (IDENTIFIER_GLOBAL_VALUE (get_identifier (WINT_TYPE)));\n-\n-  intmax_type_node =\n-    TREE_TYPE (IDENTIFIER_GLOBAL_VALUE (get_identifier (INTMAX_TYPE)));\n-  uintmax_type_node =\n-    TREE_TYPE (IDENTIFIER_GLOBAL_VALUE (get_identifier (UINTMAX_TYPE)));\n-\n   boolean_type_node = integer_type_node;\n   boolean_true_node = integer_one_node;\n   boolean_false_node = integer_zero_node;\n@@ -3106,10 +3079,6 @@ init_decl_processing ()\n   c_bool_true_node = build_int_2 (1, 0);\n   TREE_TYPE (c_bool_true_node) = c_bool_type_node;\n \n-  string_type_node = build_pointer_type (char_type_node);\n-  const_string_type_node\n-    = build_pointer_type (build_type_variant (char_type_node, 1, 0));\n-\n   /* Make a type to be the domain of a few array types\n      whose domains don't really matter.\n      200 is small enough that it always fits in size_t\n@@ -3132,11 +3101,6 @@ init_decl_processing ()\n \n   void_list_node = tree_cons (NULL_TREE, void_type_node, NULL_TREE);\n \n-  default_function_type = build_function_type (integer_type_node, NULL_TREE);\n-  ptrdiff_type_node\n-    = TREE_TYPE (IDENTIFIER_GLOBAL_VALUE (get_identifier (PTRDIFF_TYPE)));\n-  unsigned_ptrdiff_type_node = unsigned_type (ptrdiff_type_node);\n-\n   c_common_nodes_and_builtins ();\n \n   endlink = void_list_node;\n@@ -7203,3 +7167,13 @@ c_expand_decl_stmt (t)\n       && DECL_SAVED_TREE (decl))\n     c_expand_body (decl, /*nested_p=*/1);\n }\n+\n+/* Return the IDENTIFIER_GLOBAL_VALUE of T, for use in common code, since\n+   the definition of IDENTIFIER_GLOBAL_VALUE is different for C and C++.  */\n+\n+tree\n+identifier_global_value\t(t)\n+     tree t;\n+{\n+  return IDENTIFIER_GLOBAL_VALUE (t);\n+}"}, {"sha": "6c51126b245fd71ba990a27fc1ec8881b1ef89c5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fd8e53691af618b8ff21f8abdaefbb234ab8dc6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fd8e53691af618b8ff21f8abdaefbb234ab8dc6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5fd8e53691af618b8ff21f8abdaefbb234ab8dc6", "patch": "@@ -1,3 +1,13 @@\n+2000-12-01  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* decl.c (WINT_TYPE, INTMAX_TYPE, UINTMAX_TYPE): Don't define.\n+\t(init_decl_processing): Don't create string_type_node,\n+\tconst_string_type_node, wint_type_node, intmax_type_node,\n+\tuintmax_type_node, default_function_type, ptrdiff_type_node and\n+\tunsigned_ptrdiff_type_node.  Adjust position of call to\n+\tc_common_nodes_and_builtins.\n+\t(identifier_global_value): New function.\n+\n 2000-12-01  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* call.c (standard_conversion): Reject pointer to member"}, {"sha": "73684acd67f7b66b2c64ccb074b0e46464b630da", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 16, "deletions": 48, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fd8e53691af618b8ff21f8abdaefbb234ab8dc6/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fd8e53691af618b8ff21f8abdaefbb234ab8dc6/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=5fd8e53691af618b8ff21f8abdaefbb234ab8dc6", "patch": "@@ -80,26 +80,6 @@ extern int (*valid_lang_attribute) PARAMS ((tree, tree, tree, tree));\n #define WCHAR_TYPE \"int\"\n #endif\n \n-#ifndef WINT_TYPE\n-#define WINT_TYPE \"unsigned int\"\n-#endif\n-\n-#ifndef INTMAX_TYPE\n-#define INTMAX_TYPE ((INT_TYPE_SIZE == LONG_LONG_TYPE_SIZE)\t\\\n-\t\t     ? \"int\"\t\t\t\t\t\\\n-\t\t     : ((LONG_TYPE_SIZE == LONG_LONG_TYPE_SIZE)\t\\\n-\t\t\t? \"long int\"\t\t\t\t\\\n-\t\t\t: \"long long int\"))\n-#endif\n-\n-#ifndef UINTMAX_TYPE\n-#define UINTMAX_TYPE ((INT_TYPE_SIZE == LONG_LONG_TYPE_SIZE)\t\\\n-\t\t     ? \"unsigned int\"\t\t\t\t\\\n-\t\t     : ((LONG_TYPE_SIZE == LONG_LONG_TYPE_SIZE)\t\\\n-\t\t\t? \"long unsigned int\"\t\t\t\\\n-\t\t\t: \"long long unsigned int\"))\n-#endif\n-\n static tree grokparms\t\t\t\tPARAMS ((tree));\n static const char *redeclaration_error_message\tPARAMS ((tree, tree));\n \n@@ -6398,10 +6378,6 @@ init_decl_processing ()\n   record_builtin_type (RID_MAX, \"unsigned short\",\n \t\t       short_unsigned_type_node);\n \n-  ptrdiff_type_node\n-    = TREE_TYPE (IDENTIFIER_GLOBAL_VALUE (get_identifier (PTRDIFF_TYPE)));\n-  unsigned_ptrdiff_type_node = unsigned_type (ptrdiff_type_node);\n-\n   /* Define both `signed char' and `unsigned char'.  */\n   record_builtin_type (RID_MAX, \"signed char\", signed_char_type_node);\n   record_builtin_type (RID_MAX, \"unsigned char\", unsigned_char_type_node);\n@@ -6486,15 +6462,7 @@ init_decl_processing ()\n   void_list_node = build_tree_list (NULL_TREE, void_type_node);\n   TREE_PARMLIST (void_list_node) = 1;\n \n-  string_type_node = build_pointer_type (char_type_node);\n-  const_string_type_node\n-    = build_pointer_type (build_qualified_type (char_type_node,\n-\t\t\t\t\t\tTYPE_QUAL_CONST));\n   empty_except_spec = build_tree_list (NULL_TREE, NULL_TREE);\n-#if 0\n-  record_builtin_type (RID_MAX, NULL_PTR, string_type_node);\n-#endif\n-\n   /* Make a type to be the domain of a few array types\n      whose domains don't really matter.\n      200 is small enough that it always fits in size_t.  */\n@@ -6510,6 +6478,12 @@ init_decl_processing ()\n   int_array_type_node\n     = build_array_type (integer_type_node, array_domain_type);\n \n+  c_common_nodes_and_builtins ();\n+\n+#if 0\n+  record_builtin_type (RID_MAX, NULL_PTR, string_type_node);\n+#endif\n+\n   if (flag_new_abi)\n     delta_type_node = ptrdiff_type_node;\n   else if (flag_huge_objects)\n@@ -6522,15 +6496,7 @@ init_decl_processing ()\n   else\n     vtable_index_type = delta_type_node;\n \n-  default_function_type\n-    = build_function_type (integer_type_node, NULL_TREE);\n-\n-  ptr_type_node = build_pointer_type (void_type_node);\n-  const_ptr_type_node\n-    = build_pointer_type (build_qualified_type (void_type_node,\n-\t\t\t\t\t\tTYPE_QUAL_CONST));\n   vtt_parm_type = build_pointer_type (const_ptr_type_node);\n-  c_common_nodes_and_builtins ();\n   lang_type_promotes_to = convert_type_from_ellipsis;\n \n   void_ftype_ptr\n@@ -6571,14 +6537,6 @@ init_decl_processing ()\n   wchar_array_type_node\n     = build_array_type (wchar_type_node, array_domain_type);\n \n-  wint_type_node =\n-    TREE_TYPE (IDENTIFIER_GLOBAL_VALUE (get_identifier (WINT_TYPE)));\n-\n-  intmax_type_node =\n-    TREE_TYPE (IDENTIFIER_GLOBAL_VALUE (get_identifier (INTMAX_TYPE)));\n-  uintmax_type_node =\n-    TREE_TYPE (IDENTIFIER_GLOBAL_VALUE (get_identifier (UINTMAX_TYPE)));\n-\n   if (flag_vtable_thunks)\n     {\n       /* Make sure we get a unique function type, so we can give\n@@ -14672,3 +14630,13 @@ lang_mark_tree (t)\n \tggc_mark_tree ((tree) lt);\n     }\n }\n+\n+/* Return the IDENTIFIER_GLOBAL_VALUE of T, for use in common code, since\n+   the definition of IDENTIFIER_GLOBAL_VALUE is different for C and C++.  */\n+\n+tree\n+identifier_global_value\t(t)\n+     tree t;\n+{\n+  return IDENTIFIER_GLOBAL_VALUE (t);\n+}"}]}