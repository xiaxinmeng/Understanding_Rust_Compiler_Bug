{"sha": "2aadeae27f225b6b0624a534de16106fb1d2a546", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFhZGVhZTI3ZjIyNWI2YjA2MjRhNTM0ZGUxNjEwNmZiMWQyYTU0Ng==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2011-04-15T04:21:19Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2011-04-15T04:21:19Z"}, "message": "PR 47571 Fix bootstrap regression on alpha-dec-osf\n\nFrom-SVN: r172469", "tree": {"sha": "f5a7917eb1d48a5794fc9f24a57e3d55139f7573", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5a7917eb1d48a5794fc9f24a57e3d55139f7573"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2aadeae27f225b6b0624a534de16106fb1d2a546", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aadeae27f225b6b0624a534de16106fb1d2a546", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2aadeae27f225b6b0624a534de16106fb1d2a546", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aadeae27f225b6b0624a534de16106fb1d2a546/comments", "author": null, "committer": null, "parents": [{"sha": "f54d331e46f11ac7b5876a22b30ba52e69985a48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f54d331e46f11ac7b5876a22b30ba52e69985a48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f54d331e46f11ac7b5876a22b30ba52e69985a48"}], "stats": {"total": 61, "additions": 40, "deletions": 21}, "files": [{"sha": "13b57eccd036613e4084a85bb40a7d05a85c89f1", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aadeae27f225b6b0624a534de16106fb1d2a546/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aadeae27f225b6b0624a534de16106fb1d2a546/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=2aadeae27f225b6b0624a534de16106fb1d2a546", "patch": "@@ -1,3 +1,13 @@\n+2011-04-15  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR libfortran/47571\n+\t* configure: Regenerated.\n+\t* config.h.in: Regenerated.\n+\t* acinclude.m4: Add alpha*-dec-osf* to gthread blacklist.\n+\t* configure.ac: Use separate symbol for clock_gettime in librt.\n+\t* intrinsics/system_clock.c: Use weakrefs only when needed and\n+\tsupported.\n+\n 2011-04-12  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \t* configure.ac: Use AC_TYPE_* to make sure we have (u)intptr_t,"}, {"sha": "92e027177b5e89c22ce16fa76d6a2c053f17ad98", "filename": "libgfortran/acinclude.m4", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aadeae27f225b6b0624a534de16106fb1d2a546/libgfortran%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aadeae27f225b6b0624a534de16106fb1d2a546/libgfortran%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Facinclude.m4?ref=2aadeae27f225b6b0624a534de16106fb1d2a546", "patch": "@@ -110,7 +110,7 @@ void foo (void);\n \t      [Define to 1 if the target supports #pragma weak])\n   fi\n   case \"$host\" in\n-    *-*-darwin* | *-*-hpux* | *-*-cygwin* | *-*-mingw* )\n+    *-*-darwin* | *-*-hpux* | *-*-cygwin* | *-*-mingw* | alpha*-dec-osf* )\n       AC_DEFINE(GTHREAD_USE_WEAK, 0,\n \t\t[Define to 0 if the target shouldn't use #pragma weak])\n       ;;"}, {"sha": "30da5fa7e214801111ce323cce139b40be8a73c4", "filename": "libgfortran/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aadeae27f225b6b0624a534de16106fb1d2a546/libgfortran%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aadeae27f225b6b0624a534de16106fb1d2a546/libgfortran%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig.h.in?ref=2aadeae27f225b6b0624a534de16106fb1d2a546", "patch": "@@ -210,6 +210,9 @@\n /* Define to 1 if you have the `clock_gettime' function. */\n #undef HAVE_CLOCK_GETTIME\n \n+/* Define to 1 if you have the `clock_gettime' function in librt. */\n+#undef HAVE_CLOCK_GETTIME_LIBRT\n+\n /* libm includes clog */\n #undef HAVE_CLOG\n "}, {"sha": "833a0e1c6a7ee93e3e4ec8221649d9155e0efbab", "filename": "libgfortran/configure", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aadeae27f225b6b0624a534de16106fb1d2a546/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aadeae27f225b6b0624a534de16106fb1d2a546/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=2aadeae27f225b6b0624a534de16106fb1d2a546", "patch": "@@ -25375,10 +25375,11 @@ $as_echo \"#define HAVE_FEENABLEEXCEPT 1\" >>confdefs.h\n fi\n \n \n-# At least for glibc, clock_gettime is in librt.  But don't pull that\n-# in if it still doesn't give us the function we want.\n-# This test is copied from libgomp, and modified to not link in -lrt\n-# as libgfortran calls clock_gettime via a weak reference.\n+# At least for glibc and Tru64, clock_gettime is in librt.  But don't\n+# pull that in if it still doesn't give us the function we want.  This\n+# test is copied from libgomp, and modified to not link in -lrt as\n+# libgfortran calls clock_gettime via a weak reference if it's found\n+# in librt.\n if test $ac_cv_func_clock_gettime = no; then\n   { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for clock_gettime in -lrt\" >&5\n $as_echo_n \"checking for clock_gettime in -lrt... \" >&6; }\n@@ -25421,7 +25422,7 @@ fi\n $as_echo \"$ac_cv_lib_rt_clock_gettime\" >&6; }\n if test \"x$ac_cv_lib_rt_clock_gettime\" = x\"\"yes; then :\n \n-$as_echo \"#define HAVE_CLOCK_GETTIME 1\" >>confdefs.h\n+$as_echo \"#define HAVE_CLOCK_GETTIME_LIBRT 1\" >>confdefs.h\n \n fi\n \n@@ -25761,7 +25762,7 @@ $as_echo \"#define SUPPORTS_WEAK 1\" >>confdefs.h\n \n   fi\n   case \"$host\" in\n-    *-*-darwin* | *-*-hpux* | *-*-cygwin* | *-*-mingw* )\n+    *-*-darwin* | *-*-hpux* | *-*-cygwin* | *-*-mingw* | alpha*-dec-osf* )\n \n $as_echo \"#define GTHREAD_USE_WEAK 0\" >>confdefs.h\n "}, {"sha": "cf38fb024ea51e9bdf14f535348a4478b169c917", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aadeae27f225b6b0624a534de16106fb1d2a546/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aadeae27f225b6b0624a534de16106fb1d2a546/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=2aadeae27f225b6b0624a534de16106fb1d2a546", "patch": "@@ -492,14 +492,15 @@ LIBGFOR_CHECK_FLOAT128\n # Check for GNU libc feenableexcept\n AC_CHECK_LIB([m],[feenableexcept],[have_feenableexcept=yes AC_DEFINE([HAVE_FEENABLEEXCEPT],[1],[libm includes feenableexcept])])\n \n-# At least for glibc, clock_gettime is in librt.  But don't pull that\n-# in if it still doesn't give us the function we want.\n-# This test is copied from libgomp, and modified to not link in -lrt\n-# as libgfortran calls clock_gettime via a weak reference.\n+# At least for glibc and Tru64, clock_gettime is in librt.  But don't\n+# pull that in if it still doesn't give us the function we want.  This\n+# test is copied from libgomp, and modified to not link in -lrt as\n+# libgfortran calls clock_gettime via a weak reference if it's found\n+# in librt.\n if test $ac_cv_func_clock_gettime = no; then\n   AC_CHECK_LIB(rt, clock_gettime,\n-    [AC_DEFINE(HAVE_CLOCK_GETTIME, 1,\n-               [Define to 1 if you have the `clock_gettime' function.])])\n+    [AC_DEFINE(HAVE_CLOCK_GETTIME_LIBRT, 1,\n+               [Define to 1 if you have the `clock_gettime' function in librt.])])\n fi\n \n # Check for SysV fpsetmask"}, {"sha": "f4bac0777b37ba5738bd8f4c6adf7944263c6651", "filename": "libgfortran/intrinsics/system_clock.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aadeae27f225b6b0624a534de16106fb1d2a546/libgfortran%2Fintrinsics%2Fsystem_clock.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aadeae27f225b6b0624a534de16106fb1d2a546/libgfortran%2Fintrinsics%2Fsystem_clock.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fsystem_clock.c?ref=2aadeae27f225b6b0624a534de16106fb1d2a546", "patch": "@@ -29,14 +29,16 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #include \"time_1.h\"\n \n-#ifdef HAVE_CLOCK_GETTIME\n+\n /* POSIX states that CLOCK_REALTIME must be present if clock_gettime\n    is available, others are optional.  */\n+#if defined(HAVE_CLOCK_GETTIME) || defined(HAVE_CLOCK_GETTIME_LIBRT)\n #ifdef CLOCK_MONOTONIC\n #define GF_CLOCK_MONOTONIC CLOCK_MONOTONIC\n #else\n #define GF_CLOCK_MONOTONIC CLOCK_REALTIME\n #endif\n+#endif\n \n /* Weakref trickery for clock_gettime().  On Glibc, clock_gettime()\n    requires us to link in librt, which also pulls in libpthread.  In\n@@ -50,15 +52,9 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define GTHREAD_USE_WEAK 1\n #endif\n \n-#if SUPPORTS_WEAK && GTHREAD_USE_WEAK\n+#if SUPPORTS_WEAK && GTHREAD_USE_WEAK && defined(HAVE_CLOCK_GETTIME_LIBRT)\n static int weak_gettime (clockid_t, struct timespec *) \n   __attribute__((__weakref__(\"clock_gettime\")));\n-#else\n-static inline int weak_gettime (clockid_t clk_id, struct timespec *res)\n-{\n-  return clock_gettime (clk_id, res);\n-}\n-#endif\n #endif\n \n \n@@ -84,6 +80,13 @@ gf_gettime_mono (time_t * secs, long * nanosecs)\n {\n   int err;\n #ifdef HAVE_CLOCK_GETTIME\n+  struct timespec ts;\n+  err = clock_gettime (GF_CLOCK_MONOTONIC, &ts);\n+  *secs = ts.tv_sec;\n+  *nanosecs = ts.tv_nsec;\n+  return err;\n+#else\n+#if defined(HAVE_CLOCK_GETTIME_LIBRT) && SUPPORTS_WEAK && GTHREAD_USE_WEAK\n   if (weak_gettime)\n     {\n       struct timespec ts;\n@@ -96,6 +99,7 @@ gf_gettime_mono (time_t * secs, long * nanosecs)\n   err = gf_gettime (secs, nanosecs);\n   *nanosecs *= 1000;\n   return err;\n+#endif\n }\n \n extern void system_clock_4 (GFC_INTEGER_4 *, GFC_INTEGER_4 *, GFC_INTEGER_4 *);"}]}