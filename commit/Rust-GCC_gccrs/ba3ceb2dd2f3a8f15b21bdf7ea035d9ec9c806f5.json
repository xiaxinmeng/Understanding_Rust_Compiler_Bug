{"sha": "ba3ceb2dd2f3a8f15b21bdf7ea035d9ec9c806f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmEzY2ViMmRkMmYzYThmMTViMjFiZGY3ZWEwMzVkOWVjOWM4MDZmNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-03-14T20:30:24Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-03-14T20:30:24Z"}, "message": "re PR middle-end/47917 (snprintf(..., \"const string\") should be optimized into memcpy)\n\n\tPR middle-end/47917\n\t* builtins.c (fold_builtin_snprintf): New function.\n\t(fold_builtin_3): Call it for BUILT_IN_SNPRINTF.\n\t(fold_builtin_4): Likewise.\n\n\t* gcc.c-torture/execute/pr47917.c: New test.\n\t* gcc.dg/pr47917.c: New test.\n\nFrom-SVN: r170959", "tree": {"sha": "123d933dc08e81d842d0ad90b7fab6a8cced05a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/123d933dc08e81d842d0ad90b7fab6a8cced05a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba3ceb2dd2f3a8f15b21bdf7ea035d9ec9c806f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba3ceb2dd2f3a8f15b21bdf7ea035d9ec9c806f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba3ceb2dd2f3a8f15b21bdf7ea035d9ec9c806f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba3ceb2dd2f3a8f15b21bdf7ea035d9ec9c806f5/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d63c53cce2d137062e4f93a9ff410e684bc7bc1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d63c53cce2d137062e4f93a9ff410e684bc7bc1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d63c53cce2d137062e4f93a9ff410e684bc7bc1b"}], "stats": {"total": 209, "additions": 208, "deletions": 1}, "files": [{"sha": "d8349eefee6ca12629b9a7b4fef58d84185f756b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba3ceb2dd2f3a8f15b21bdf7ea035d9ec9c806f5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba3ceb2dd2f3a8f15b21bdf7ea035d9ec9c806f5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ba3ceb2dd2f3a8f15b21bdf7ea035d9ec9c806f5", "patch": "@@ -1,5 +1,10 @@\n 2011-03-14  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/47917\n+\t* builtins.c (fold_builtin_snprintf): New function.\n+\t(fold_builtin_3): Call it for BUILT_IN_SNPRINTF.\n+\t(fold_builtin_4): Likewise.\n+\n \tPR middle-end/38878\n \t* fold-const.c (fold_binary_loc) <case EQ_EXPR, NE_EXPR>: Add\n \tSTRIP_NOPS on arg0 and arg1.  When optimizing X +- C == X"}, {"sha": "a59b23c50401a71d88b819c57f80c137867cef50", "filename": "gcc/builtins.c", "status": "modified", "additions": 129, "deletions": 1, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba3ceb2dd2f3a8f15b21bdf7ea035d9ec9c806f5/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba3ceb2dd2f3a8f15b21bdf7ea035d9ec9c806f5/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=ba3ceb2dd2f3a8f15b21bdf7ea035d9ec9c806f5", "patch": "@@ -1,6 +1,6 @@\n /* Expand builtin functions.\n    Copyright (C) 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n-   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -191,6 +191,7 @@ static tree fold_builtin_strncat (location_t, tree, tree, tree);\n static tree fold_builtin_strspn (location_t, tree, tree);\n static tree fold_builtin_strcspn (location_t, tree, tree);\n static tree fold_builtin_sprintf (location_t, tree, tree, tree, int);\n+static tree fold_builtin_snprintf (location_t, tree, tree, tree, tree, int);\n \n static rtx expand_builtin_object_size (tree);\n static rtx expand_builtin_memory_chk (tree, rtx, enum machine_mode,\n@@ -10596,6 +10597,9 @@ fold_builtin_3 (location_t loc, tree fndecl,\n     case BUILT_IN_SPRINTF:\n       return fold_builtin_sprintf (loc, arg0, arg1, arg2, ignore);\n \n+    case BUILT_IN_SNPRINTF:\n+      return fold_builtin_snprintf (loc, arg0, arg1, arg2, NULL_TREE, ignore);\n+\n     case BUILT_IN_STRCPY_CHK:\n     case BUILT_IN_STPCPY_CHK:\n       return fold_builtin_stxcpy_chk (loc, fndecl, arg0, arg1, arg2, NULL_TREE,\n@@ -10661,6 +10665,9 @@ fold_builtin_4 (location_t loc, tree fndecl,\n     case BUILT_IN_STRNCAT_CHK:\n       return fold_builtin_strncat_chk (loc, fndecl, arg0, arg1, arg2, arg3);\n \n+    case BUILT_IN_SNPRINTF:\n+      return fold_builtin_snprintf (loc, arg0, arg1, arg2, arg3, ignore);\n+\n     case BUILT_IN_FPRINTF_CHK:\n     case BUILT_IN_VFPRINTF_CHK:\n       if (!validate_arg (arg1, INTEGER_TYPE)\n@@ -11919,6 +11926,127 @@ fold_builtin_sprintf (location_t loc, tree dest, tree fmt,\n     return call;\n }\n \n+/* Simplify a call to the snprintf builtin with arguments DEST, DESTSIZE,\n+   FMT, and ORIG.  ORIG may be null if this is a 3-argument call.  We don't\n+   attempt to simplify calls with more than 4 arguments.\n+\n+   Return NULL_TREE if no simplification was possible, otherwise return the\n+   simplified form of the call as a tree.  If IGNORED is true, it means that\n+   the caller does not use the returned value of the function.  */\n+\n+static tree\n+fold_builtin_snprintf (location_t loc, tree dest, tree destsize, tree fmt,\n+\t\t       tree orig, int ignored)\n+{\n+  tree call, retval;\n+  const char *fmt_str = NULL;\n+  unsigned HOST_WIDE_INT destlen;\n+\n+  /* Verify the required arguments in the original call.  We deal with two\n+     types of snprintf() calls: 'snprintf (str, cst, fmt)' and\n+     'snprintf (dest, cst, \"%s\", orig)'.  */\n+  if (!validate_arg (dest, POINTER_TYPE)\n+      || !validate_arg (destsize, INTEGER_TYPE)\n+      || !validate_arg (fmt, POINTER_TYPE))\n+    return NULL_TREE;\n+  if (orig && !validate_arg (orig, POINTER_TYPE))\n+    return NULL_TREE;\n+\n+  if (!host_integerp (destsize, 1))\n+    return NULL_TREE;\n+\n+  /* Check whether the format is a literal string constant.  */\n+  fmt_str = c_getstr (fmt);\n+  if (fmt_str == NULL)\n+    return NULL_TREE;\n+\n+  call = NULL_TREE;\n+  retval = NULL_TREE;\n+\n+  if (!init_target_chars ())\n+    return NULL_TREE;\n+\n+  destlen = tree_low_cst (destsize, 1);\n+\n+  /* If the format doesn't contain % args or %%, use strcpy.  */\n+  if (strchr (fmt_str, target_percent) == NULL)\n+    {\n+      tree fn = implicit_built_in_decls[BUILT_IN_STRCPY];\n+      size_t len = strlen (fmt_str);\n+\n+      /* Don't optimize snprintf (buf, 4, \"abc\", ptr++).  */\n+      if (orig)\n+\treturn NULL_TREE;\n+\n+      /* We could expand this as\n+\t memcpy (str, fmt, cst - 1); str[cst - 1] = '\\0';\n+\t or to\n+\t memcpy (str, fmt_with_nul_at_cstm1, cst);\n+\t but in the former case that might increase code size\n+\t and in the latter case grow .rodata section too much.\n+\t So punt for now.  */\n+      if (len >= destlen)\n+\treturn NULL_TREE;\n+\n+      if (!fn)\n+\treturn NULL_TREE;\n+\n+      /* Convert snprintf (str, cst, fmt) into strcpy (str, fmt) when\n+\t 'format' is known to contain no % formats and\n+\t strlen (fmt) < cst.  */\n+      call = build_call_expr_loc (loc, fn, 2, dest, fmt);\n+\n+      if (!ignored)\n+\tretval = build_int_cst (NULL_TREE, strlen (fmt_str));\n+    }\n+\n+  /* If the format is \"%s\", use strcpy if the result isn't used.  */\n+  else if (fmt_str && strcmp (fmt_str, target_percent_s) == 0)\n+    {\n+      tree fn = implicit_built_in_decls[BUILT_IN_STRCPY];\n+      unsigned HOST_WIDE_INT origlen;\n+\n+      /* Don't crash on snprintf (str1, cst, \"%s\").  */\n+      if (!orig)\n+\treturn NULL_TREE;\n+\n+      retval = c_strlen (orig, 1);\n+      if (!retval || !host_integerp (retval, 1))  \n+\treturn NULL_TREE;\n+\n+      origlen = tree_low_cst (retval, 1);\n+      /* We could expand this as\n+\t memcpy (str1, str2, cst - 1); str1[cst - 1] = '\\0';\n+\t or to\n+\t memcpy (str1, str2_with_nul_at_cstm1, cst);\n+\t but in the former case that might increase code size\n+\t and in the latter case grow .rodata section too much.\n+\t So punt for now.  */\n+      if (origlen >= destlen)\n+\treturn NULL_TREE;\n+\n+      /* Convert snprintf (str1, cst, \"%s\", str2) into\n+\t strcpy (str1, str2) if strlen (str2) < cst.  */\n+      if (!fn)\n+\treturn NULL_TREE;\n+\n+      call = build_call_expr_loc (loc, fn, 2, dest, orig);\n+\n+      if (ignored)\n+\tretval = NULL_TREE;\n+    }\n+\n+  if (call && retval)\n+    {\n+      retval = fold_convert_loc\n+\t(loc, TREE_TYPE (TREE_TYPE (implicit_built_in_decls[BUILT_IN_SNPRINTF])),\n+\t retval);\n+      return build2 (COMPOUND_EXPR, TREE_TYPE (retval), call, retval);\n+    }\n+  else\n+    return call;\n+}\n+\n /* Expand a call EXP to __builtin_object_size.  */\n \n rtx"}, {"sha": "016c2a9c458b254b12f3b2e110ac5dc6b387ee5b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba3ceb2dd2f3a8f15b21bdf7ea035d9ec9c806f5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba3ceb2dd2f3a8f15b21bdf7ea035d9ec9c806f5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ba3ceb2dd2f3a8f15b21bdf7ea035d9ec9c806f5", "patch": "@@ -1,5 +1,9 @@\n 2011-03-14  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/47917\n+\t* gcc.c-torture/execute/pr47917.c: New test.\n+\t* gcc.dg/pr47917.c: New test.\n+\n \tPR middle-end/38878\n \t* gcc.dg/tree-ssa/foldaddr-1.c: Remove xfail.\n "}, {"sha": "3d8a9bc6af73425d2191e33c0fb26533446d949c", "filename": "gcc/testsuite/gcc.c-torture/execute/pr47917.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba3ceb2dd2f3a8f15b21bdf7ea035d9ec9c806f5/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr47917.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba3ceb2dd2f3a8f15b21bdf7ea035d9ec9c806f5/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr47917.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr47917.c?ref=ba3ceb2dd2f3a8f15b21bdf7ea035d9ec9c806f5", "patch": "@@ -0,0 +1,32 @@\n+/* PR middle-end/47917 */\n+\n+extern int snprintf (char *, __SIZE_TYPE__, const char *, ...);\n+extern int memcmp (const void *, const void *, __SIZE_TYPE__);\n+extern void abort (void);\n+\n+char buf1[6], buf2[6], buf3[4], buf4[4];\n+int i;\n+\n+int\n+foo (void)\n+{\n+  int ret = snprintf (buf1, sizeof buf1, \"abcde\");\n+  ret += snprintf (buf2, sizeof buf2, \"abcdef\") * 16;\n+  ret += snprintf (buf3, sizeof buf3, \"%s\", i++ < 6 ? \"abc\" : \"def\") * 256;\n+  ret += snprintf (buf4, sizeof buf4, \"%s\", i++ > 10 ? \"abcde\" : \"defgh\") * 4096;\n+  return ret;\n+}\n+\n+int\n+main (void)\n+{\n+  if (foo () != 5 + 6 * 16 + 3 * 256 + 5 * 4096)\n+    abort ();\n+  if (memcmp (buf1, \"abcde\", 6) != 0\n+      || memcmp (buf2, \"abcde\", 6) != 0\n+      || memcmp (buf3, \"abc\", 4) != 0\n+      || memcmp (buf4, \"def\", 4) != 0\n+      || i != 2)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "92bcf79662bebfd1b241bf6d4a5f16bcbcd5a085", "filename": "gcc/testsuite/gcc.dg/pr47917.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba3ceb2dd2f3a8f15b21bdf7ea035d9ec9c806f5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr47917.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba3ceb2dd2f3a8f15b21bdf7ea035d9ec9c806f5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr47917.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr47917.c?ref=ba3ceb2dd2f3a8f15b21bdf7ea035d9ec9c806f5", "patch": "@@ -0,0 +1,38 @@\n+/* PR middle-end/47917 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+extern int snprintf (char *, __SIZE_TYPE__, const char *, ...);\n+extern int memcmp (const void *, const void *, __SIZE_TYPE__);\n+extern void abort (void);\n+\n+char buf1[6], buf2[6], buf3[4], buf4[4];\n+int i;\n+\n+int\n+foo (void)\n+{\n+  int ret = snprintf (buf1, sizeof buf1, \"abcde\");\n+  ret += snprintf (buf2, sizeof buf2, \"abcdef\") * 16;\n+  ret += snprintf (buf3, sizeof buf3, \"%s\", i++ < 6 ? \"abc\" : \"def\") * 256;\n+  ret += snprintf (buf4, sizeof buf4, \"%s\", i++ > 10 ? \"abcde\" : \"defgh\") * 4096;\n+  return ret;\n+}\n+\n+int\n+main (void)\n+{\n+  if (foo () != 5 + 6 * 16 + 3 * 256 + 5 * 4096)\n+    abort ();\n+  if (memcmp (buf1, \"abcde\", 6) != 0\n+      || memcmp (buf2, \"abcde\", 6) != 0\n+      || memcmp (buf3, \"abc\", 4) != 0\n+      || memcmp (buf4, \"def\", 4) != 0\n+      || i != 2)\n+    abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"snprintf\" 2 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"sprintf\" 0 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}]}