{"sha": "b6e3e1ff580c11f8d95930f12560824471521175", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZlM2UxZmY1ODBjMTFmOGQ5NTkzMGYxMjU2MDgyNDQ3MTUyMTE3NQ==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@redhat.com", "date": "2001-07-13T19:43:54Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "2001-07-13T19:43:54Z"}, "message": "re PR java/3635 (\"empty declaration\" warning too broad)\n\n2001-07-12  Alexandre Petit-Bianco  <apbianco@redhat.com>\n\n\t* parse.y (patch_method_invocation): Don't override primary if one\n\tis already provided, but let this$<n> be built. Fixed comment.\n\n2001-07-12  Alexandre Petit-Bianco  <apbianco@redhat.com>\n\n\t* parse.y (empty_statement:): Report empty statement error only\n\twhen found at class declaration level.\n\tFixes PR java/3635\n\n(http://gcc.gnu.org/ml/gcc-patches/2001-07/msg00885.html )\n\nFrom-SVN: r43993", "tree": {"sha": "1a2ea0dfc79181825aa29dc546dfd81b7294ee46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a2ea0dfc79181825aa29dc546dfd81b7294ee46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6e3e1ff580c11f8d95930f12560824471521175", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6e3e1ff580c11f8d95930f12560824471521175", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6e3e1ff580c11f8d95930f12560824471521175", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6e3e1ff580c11f8d95930f12560824471521175/comments", "author": null, "committer": null, "parents": [{"sha": "48ccfb4086add7f319242fe6c2ec178788dd278f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48ccfb4086add7f319242fe6c2ec178788dd278f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48ccfb4086add7f319242fe6c2ec178788dd278f"}], "stats": {"total": 24, "additions": 21, "deletions": 3}, "files": [{"sha": "63015155428c48431b511232d6d5cd111f0dc6b0", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e3e1ff580c11f8d95930f12560824471521175/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e3e1ff580c11f8d95930f12560824471521175/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=b6e3e1ff580c11f8d95930f12560824471521175", "patch": "@@ -1,3 +1,14 @@\n+2001-07-12  Alexandre Petit-Bianco  <apbianco@redhat.com>\n+\n+\t* parse.y (patch_method_invocation): Don't override primary if one\n+\tis already provided, but let this$<n> be built. Fixed comment.\n+\n+2001-07-12  Alexandre Petit-Bianco  <apbianco@redhat.com>\n+\n+\t* parse.y (empty_statement:): Report empty statement error only\n+\twhen found at class declaration level.\n+\tFixes PR java/3635\n+\n 2001-07-12  Tom Tromey  <tromey@redhat.com>\n \n \t* expr.c (expand_load_internal): New function."}, {"sha": "03a540c06e0bc324f7b01da6d7e3982225f09398", "filename": "gcc/java/parse.y", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e3e1ff580c11f8d95930f12560824471521175/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e3e1ff580c11f8d95930f12560824471521175/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=b6e3e1ff580c11f8d95930f12560824471521175", "patch": "@@ -1453,7 +1453,13 @@ statement_without_trailing_substatement:\n empty_statement:\n \tSC_TK\n \t\t{ \n-\t\t  if (flag_extraneous_semicolon)\n+\t\t  if (flag_extraneous_semicolon \n+\t\t      && ! current_static_block \n+\t\t      && (! current_function_decl || \n+\t\t\t  /* Verify we're not in a inner class declaration */\n+\t\t\t  (GET_CPC () != TYPE_NAME\n+\t\t\t   (DECL_CONTEXT (current_function_decl)))))\n+\t\t\t   \n \t\t    {\n \t\t      EXPR_WFL_SET_LINECOL (wfl_operator, lineno, -1);\n \t\t      parse_warning_context (wfl_operator, \"An empty declaration is a deprecated feature that should not be used\");\n@@ -10030,7 +10036,7 @@ patch_method_invocation (patch, primary, where, from_super,\n \t     - LIST is non static. It's invocation is transformed from\n \t       x(a1,....,an) into access$<n>(this$<n>,a1,...,an).\n \t     - LIST is static. It's invocation is transformed from\n-\t       x(a1,....,an) into TYPEOF(this$<n>).x(a1,....an).\n+\t       x(a1,....,an) into TYPE_OF(this$<n>).x(a1,....an).\n \n \t     Of course, this$<n> can be abitrary complex, ranging from\n \t     this$0 (the immediate outer context) to \n@@ -10040,7 +10046,8 @@ patch_method_invocation (patch, primary, where, from_super,\n \t     this_arg has to be moved into the (then generated) stub\n \t     argument list. In the meantime, the selected function\n \t     might have be replaced by a generated stub. */\n-\t  if (maybe_use_access_method (is_super_init, &list, &this_arg))\n+\t  if (!primary &&\n+\t      maybe_use_access_method (is_super_init, &list, &this_arg))\n \t    {\n \t      args = tree_cons (NULL_TREE, this_arg, args);\n \t      this_arg = NULL_TREE; /* So it doesn't get chained twice */"}]}