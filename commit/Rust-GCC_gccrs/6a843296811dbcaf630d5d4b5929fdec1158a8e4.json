{"sha": "6a843296811dbcaf630d5d4b5929fdec1158a8e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE4NDMyOTY4MTFkYmNhZjYzMGQ1ZDRiNTkyOWZkZWMxMTU4YThlNA==", "commit": {"author": {"name": "Craig Burley", "email": "craig@jcb-sc.com", "date": "1999-05-06T09:46:21Z"}, "committer": {"name": "Craig Burley", "email": "burley@gcc.gnu.org", "date": "1999-05-06T09:46:21Z"}, "message": "doc improvements\n\nFrom-SVN: r26806", "tree": {"sha": "8ba76949e1c8b473e84d3d49dcdd4529ed73c727", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ba76949e1c8b473e84d3d49dcdd4529ed73c727"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a843296811dbcaf630d5d4b5929fdec1158a8e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a843296811dbcaf630d5d4b5929fdec1158a8e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a843296811dbcaf630d5d4b5929fdec1158a8e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a843296811dbcaf630d5d4b5929fdec1158a8e4/comments", "author": null, "committer": null, "parents": [{"sha": "52dff54a7f90a95dff0d885896440e37cf670e16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52dff54a7f90a95dff0d885896440e37cf670e16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52dff54a7f90a95dff0d885896440e37cf670e16"}], "stats": {"total": 40, "additions": 26, "deletions": 14}, "files": [{"sha": "3977351fd85bb2f12bc2fb0b4daf131faf25e3c9", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a843296811dbcaf630d5d4b5929fdec1158a8e4/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a843296811dbcaf630d5d4b5929fdec1158a8e4/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=6a843296811dbcaf630d5d4b5929fdec1158a8e4", "patch": "@@ -1,3 +1,9 @@\n+Thu May  6 12:40:21 1999  Craig Burley  <craig@jcb-sc.com>\n+\n+\t* g77.texi (Arbitrary Concatenation): Put this under\n+\t\"Missing Features\" instead of \"Projects\".\n+\t(Internals Documentation): Point to new \"Front End\" chapter.\n+\n Thu May  6 08:23:52 1999  Craig Burley  <craig@jcb-sc.com>\n \n \t* bugs.texi, news.texi: Automatic arrays reportedly working"}, {"sha": "427080a1d1f2b61ddf204099dfd6657c790102c5", "filename": "gcc/f/g77.texi", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a843296811dbcaf630d5d4b5929fdec1158a8e4/gcc%2Ff%2Fg77.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a843296811dbcaf630d5d4b5929fdec1158a8e4/gcc%2Ff%2Fg77.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fg77.texi?ref=6a843296811dbcaf630d5d4b5929fdec1158a8e4", "patch": "@@ -11389,6 +11389,7 @@ GNU Fortran language:\n * Better Source Model::\n * Fortran 90 Support::\n * Intrinsics in PARAMETER Statements::\n+* Arbitrary Concatenation::\n * SELECT CASE on CHARACTER Type::\n * RECURSIVE Keyword::\n * Popular Non-standard Types::\n@@ -11529,6 +11530,22 @@ But, if the @code{gcc} back end is enhanced to provide\n such a facility, @code{g77} will likely use that facility\n in implementing this feature soon afterwards.\n \n+@node Arbitrary Concatenation\n+@subsection Arbitrary Concatenation\n+@cindex concatenation\n+@cindex CHARACTER*(*)\n+@cindex run-time, dynamic allocation\n+\n+@code{g77} doesn't support arbitrary operands for concatenation\n+in contexts where run-time allocation is required.\n+For example:\n+\n+@smallexample\n+SUBROUTINE X(A)\n+CHARACTER*(*) A\n+CALL FOO(A // 'suffix')\n+@end smallexample\n+\n @node SELECT CASE on CHARACTER Type\n @subsection @code{SELECT CASE} on @code{CHARACTER} Type\n \n@@ -14057,20 +14074,6 @@ Many mentions of incomplete or missing features are\n sprinkled throughout.\n It is not worth repeating them here.\n \n-@item\n-@cindex concatenation\n-@cindex CHARACTER*(*)\n-@cindex run-time, dynamic allocation\n-Support arbitrary operands for concatenation, even in contexts where\n-run-time allocation is required.\n-For example:\n-\n-@smallexample\n-SUBROUTINE X(A)\n-CHARACTER*(*) A\n-CALL FOO(A // 'suffix')\n-@end smallexample\n-\n @item\n Consider adding a @code{NUMERIC} type to designate typeless numeric constants,\n named and unnamed.\n@@ -14176,6 +14179,9 @@ Better info on how @code{g77} works and how to port it is needed.\n Much of this should be done only after the redesign planned for\n 0.6 is complete.\n \n+@xref{Front End}, which contains some information\n+on @code{g77} internals.\n+\n @node Internals Improvements\n @section Internals Improvements\n "}]}