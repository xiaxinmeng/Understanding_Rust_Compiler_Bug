{"sha": "7742b797b3fd7acea28a0a0bff9bbb06e7c2d0ea", "node_id": "C_kwDOANBUbNoAKDc3NDJiNzk3YjNmZDdhY2VhMjhhMGEwYmZmOWJiYjA2ZTdjMmQwZWE", "commit": {"author": {"name": "Xi Ruoyao", "email": "xry111@xry111.site", "date": "2022-09-01T10:38:14Z"}, "committer": {"name": "Xi Ruoyao", "email": "xry111@xry111.site", "date": "2022-09-05T10:11:13Z"}, "message": "LoongArch: add -mdirect-extern-access option\n\nAs a new target, LoongArch does not use copy relocation as it's\nproblematic in some circumstances.  One bad consequence is we are\nemitting GOT for all accesses to all extern objects with default\nvisibility.  The use of GOT is not needed in statically linked\nexecutables, OS kernels etc.  The GOT entry just wastes space, and the\nGOT access just slow down the execution in those environments.\n\nBefore -mexplicit-relocs, we used \"-Wa,-mla-global-with-pcrel\" to tell\nthe assembler not to use GOT for extern access.  But with\n-mexplicit-relocs, we have to opt the logic in GCC.\n\nThe name \"-mdirect-extern-access\" is learnt from x86 port.\n\ngcc/ChangeLog:\n\n\t* config/loongarch/genopts/loongarch.opt.in: Add\n\t-mdirect-extern-access option.\n\t* config/loongarch/loongarch.opt: Regenerate.\n\t* config/loongarch/loongarch.cc\n\t(loongarch_symbol_binds_local_p): Return true if\n\tTARGET_DIRECT_EXTERN_ACCESS.\n\t(loongarch_option_override_internal): Complain if\n\t-mdirect-extern-access is used with -fPIC or -fpic.\n\t* doc/invoke.texi: Document -mdirect-extern-access for\n\tLoongArch.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/loongarch/direct-extern-1.c: New test.\n\t* gcc.target/loongarch/direct-extern-2.c: New test.", "tree": {"sha": "fe622afbfde464c3de2fc07105e57bb159eb6ae4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe622afbfde464c3de2fc07105e57bb159eb6ae4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7742b797b3fd7acea28a0a0bff9bbb06e7c2d0ea", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQSR0PV2MB+STX3t3OisqtIOGecQ4wUCYxXLQQAKCRCsqtIOGecQ\n44IaAQCYYwr6rjF7/Pe9F1NLWC+Asm5LDYHqDK1A68b4sj06SgD/UJuTVOXbMqaI\nxdd/Z4HfC/W8ZslkhPoeRXenL8AmZgU=\n=IOPh\n-----END PGP SIGNATURE-----", "payload": "tree fe622afbfde464c3de2fc07105e57bb159eb6ae4\nparent 9c805ddf66a1cfc93e6cc65f768897da2bc303ed\nauthor Xi Ruoyao <xry111@xry111.site> 1662028694 +0800\ncommitter Xi Ruoyao <xry111@xry111.site> 1662372673 +0800\n\nLoongArch: add -mdirect-extern-access option\n\nAs a new target, LoongArch does not use copy relocation as it's\nproblematic in some circumstances.  One bad consequence is we are\nemitting GOT for all accesses to all extern objects with default\nvisibility.  The use of GOT is not needed in statically linked\nexecutables, OS kernels etc.  The GOT entry just wastes space, and the\nGOT access just slow down the execution in those environments.\n\nBefore -mexplicit-relocs, we used \"-Wa,-mla-global-with-pcrel\" to tell\nthe assembler not to use GOT for extern access.  But with\n-mexplicit-relocs, we have to opt the logic in GCC.\n\nThe name \"-mdirect-extern-access\" is learnt from x86 port.\n\ngcc/ChangeLog:\n\n\t* config/loongarch/genopts/loongarch.opt.in: Add\n\t-mdirect-extern-access option.\n\t* config/loongarch/loongarch.opt: Regenerate.\n\t* config/loongarch/loongarch.cc\n\t(loongarch_symbol_binds_local_p): Return true if\n\tTARGET_DIRECT_EXTERN_ACCESS.\n\t(loongarch_option_override_internal): Complain if\n\t-mdirect-extern-access is used with -fPIC or -fpic.\n\t* doc/invoke.texi: Document -mdirect-extern-access for\n\tLoongArch.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/loongarch/direct-extern-1.c: New test.\n\t* gcc.target/loongarch/direct-extern-2.c: New test.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7742b797b3fd7acea28a0a0bff9bbb06e7c2d0ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7742b797b3fd7acea28a0a0bff9bbb06e7c2d0ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7742b797b3fd7acea28a0a0bff9bbb06e7c2d0ea/comments", "author": {"login": "xry111", "id": 8733039, "node_id": "MDQ6VXNlcjg3MzMwMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8733039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xry111", "html_url": "https://github.com/xry111", "followers_url": "https://api.github.com/users/xry111/followers", "following_url": "https://api.github.com/users/xry111/following{/other_user}", "gists_url": "https://api.github.com/users/xry111/gists{/gist_id}", "starred_url": "https://api.github.com/users/xry111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xry111/subscriptions", "organizations_url": "https://api.github.com/users/xry111/orgs", "repos_url": "https://api.github.com/users/xry111/repos", "events_url": "https://api.github.com/users/xry111/events{/privacy}", "received_events_url": "https://api.github.com/users/xry111/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xry111", "id": 8733039, "node_id": "MDQ6VXNlcjg3MzMwMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8733039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xry111", "html_url": "https://github.com/xry111", "followers_url": "https://api.github.com/users/xry111/followers", "following_url": "https://api.github.com/users/xry111/following{/other_user}", "gists_url": "https://api.github.com/users/xry111/gists{/gist_id}", "starred_url": "https://api.github.com/users/xry111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xry111/subscriptions", "organizations_url": "https://api.github.com/users/xry111/orgs", "repos_url": "https://api.github.com/users/xry111/repos", "events_url": "https://api.github.com/users/xry111/events{/privacy}", "received_events_url": "https://api.github.com/users/xry111/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c805ddf66a1cfc93e6cc65f768897da2bc303ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c805ddf66a1cfc93e6cc65f768897da2bc303ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c805ddf66a1cfc93e6cc65f768897da2bc303ed"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "e10618777b20f28b59c2170ca33e298da0e0d07d", "filename": "gcc/config/loongarch/genopts/loongarch.opt.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7742b797b3fd7acea28a0a0bff9bbb06e7c2d0ea/gcc%2Fconfig%2Floongarch%2Fgenopts%2Floongarch.opt.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7742b797b3fd7acea28a0a0bff9bbb06e7c2d0ea/gcc%2Fconfig%2Floongarch%2Fgenopts%2Floongarch.opt.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Fgenopts%2Floongarch.opt.in?ref=7742b797b3fd7acea28a0a0bff9bbb06e7c2d0ea", "patch": "@@ -184,3 +184,7 @@ Enum(cmodel) String(@@STR_CMODEL_EXTREME@@) Value(CMODEL_EXTREME)\n mcmodel=\n Target RejectNegative Joined Enum(cmodel) Var(la_opt_cmodel) Init(CMODEL_NORMAL)\n Specify the code model.\n+\n+mdirect-extern-access\n+Target Var(TARGET_DIRECT_EXTERN_ACCESS) Init(0)\n+Avoid using the GOT to access external symbols."}, {"sha": "c9187bf81a7a5e829fd5cf44edb380b4a51ffc53", "filename": "gcc/config/loongarch/loongarch.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7742b797b3fd7acea28a0a0bff9bbb06e7c2d0ea/gcc%2Fconfig%2Floongarch%2Floongarch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7742b797b3fd7acea28a0a0bff9bbb06e7c2d0ea/gcc%2Fconfig%2Floongarch%2Floongarch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch.cc?ref=7742b797b3fd7acea28a0a0bff9bbb06e7c2d0ea", "patch": "@@ -1610,6 +1610,9 @@ loongarch_weak_symbol_p (const_rtx x)\n bool\n loongarch_symbol_binds_local_p (const_rtx x)\n {\n+  if (TARGET_DIRECT_EXTERN_ACCESS)\n+    return true;\n+\n   if (SYMBOL_REF_P (x))\n     return (SYMBOL_REF_DECL (x)\n \t    ? targetm.binds_local_p (SYMBOL_REF_DECL (x))\n@@ -6093,6 +6096,9 @@ loongarch_option_override_internal (struct gcc_options *opts)\n   if (loongarch_branch_cost == 0)\n     loongarch_branch_cost = loongarch_cost->branch_cost;\n \n+  if (TARGET_DIRECT_EXTERN_ACCESS && flag_shlib)\n+    error (\"%qs cannot be used for compiling a shared library\",\n+\t   \"-mdirect-extern-access\");\n \n   switch (la_target.cmodel)\n     {"}, {"sha": "96c811c850b0c024c4ca0c0005c79b8e2baf6809", "filename": "gcc/config/loongarch/loongarch.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7742b797b3fd7acea28a0a0bff9bbb06e7c2d0ea/gcc%2Fconfig%2Floongarch%2Floongarch.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7742b797b3fd7acea28a0a0bff9bbb06e7c2d0ea/gcc%2Fconfig%2Floongarch%2Floongarch.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch.opt?ref=7742b797b3fd7acea28a0a0bff9bbb06e7c2d0ea", "patch": "@@ -191,3 +191,7 @@ Enum(cmodel) String(extreme) Value(CMODEL_EXTREME)\n mcmodel=\n Target RejectNegative Joined Enum(cmodel) Var(la_opt_cmodel) Init(CMODEL_NORMAL)\n Specify the code model.\n+\n+mdirect-extern-access\n+Target Var(TARGET_DIRECT_EXTERN_ACCESS) Init(0)\n+Avoid using the GOT to access external symbols."}, {"sha": "9d662e353163d7bb3749f17335b55035763f2313", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7742b797b3fd7acea28a0a0bff9bbb06e7c2d0ea/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7742b797b3fd7acea28a0a0bff9bbb06e7c2d0ea/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=7742b797b3fd7acea28a0a0bff9bbb06e7c2d0ea", "patch": "@@ -1017,6 +1017,7 @@ Objective-C and Objective-C++ Dialects}.\n -memcpy  -mno-memcpy -mstrict-align -mno-strict-align @gol\n -mmax-inline-memcpy-size=@var{n} @gol\n -mexplicit-relocs -mno-explicit-relocs @gol\n+-mdirect-extern-access -mno-direct-extern-access @gol\n -mcmodel=@var{code-model}}\n \n @emph{M32R/D Options}\n@@ -25090,6 +25091,20 @@ GCC build-time by detecting corresponding assembler support:\n @code{-mno-explicit-relocs} otherwise.  This option is mostly useful for\n debugging, or interoperation with assemblers different from the build-time\n one.\n+\n+@item -mdirect-extern-access\n+@itemx -mno-direct-extern-access\n+@opindex mdirect-extern-access\n+Do not use or use GOT to access external symbols.  The default is\n+@option{-mno-direct-extern-access}: GOT is used for external symbols with\n+default visibility, but not used for other external symbols.\n+\n+With @option{-mdirect-extern-access}, GOT is not used and all external\n+symbols are PC-relatively addressed.  It is @strong{only} suitable for\n+environments where no dynamic link is performed, like firmwares, OS\n+kernels, executables linked with @option{-static} or @option{-static-pie}.\n+@option{-mdirect-extern-access} is not compatible with @option{-fPIC} or\n+@option{-fpic}.\n @end table\n \n @node M32C Options"}, {"sha": "85c6c1e8a88b42f77e9f45b089a71e583a55215b", "filename": "gcc/testsuite/gcc.target/loongarch/direct-extern-1.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7742b797b3fd7acea28a0a0bff9bbb06e7c2d0ea/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fdirect-extern-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7742b797b3fd7acea28a0a0bff9bbb06e7c2d0ea/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fdirect-extern-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fdirect-extern-1.c?ref=7742b797b3fd7acea28a0a0bff9bbb06e7c2d0ea", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mexplicit-relocs -mdirect-extern-access\" } */\n+/* { dg-final { scan-assembler-not \"got\" } } */\n+\n+extern int x;\n+int f() { return x; }"}, {"sha": "58d8bd68a06c907606e68750ae2738bf8db28d3a", "filename": "gcc/testsuite/gcc.target/loongarch/direct-extern-2.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7742b797b3fd7acea28a0a0bff9bbb06e7c2d0ea/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fdirect-extern-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7742b797b3fd7acea28a0a0bff9bbb06e7c2d0ea/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fdirect-extern-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fdirect-extern-2.c?ref=7742b797b3fd7acea28a0a0bff9bbb06e7c2d0ea", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mno-explicit-relocs -mdirect-extern-access\" } */\n+/* { dg-final { scan-assembler-not \"la.global\" } } */\n+\n+extern int x;\n+int f() { return x; }"}]}