{"sha": "a3fc4326ca94323e24693b907ce4352a70d4de8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNmYzQzMjZjYTk0MzIzZTI0NjkzYjkwN2NlNDM1MmE3MGQ0ZGU4Zg==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2019-10-08T19:09:04Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2019-10-08T19:09:04Z"}, "message": "[Darwin, machopic 2/n] Compute and cache indirection rules.\n\nThis caches a check for the requirement to indirect a symbol in the Darwin\nABI, and uses it where needed.  We also ensure that we place the indirection\npointers into the non-lazy symbol pointers section.  Other placements have\noccurred with various platform toolchains - but these seem to have been\nunintentional so we match current platform toolchains.\n\ngcc/ChangeLog:\n\n2019-10-08  Iain Sandoe  <iain@sandoe.co.uk>\n\n\t* config/darwin.c (machopic_indirect_data_reference): Check for\n\trequired indirections before making direct access to defined\n\tvalues.\n\t(machopic_output_indirection): Place the indirected pointes for\n\trequired indirections into the non-lazy symbol pointers section.\n\t(darwin_encode_section_info):\n\t* config/darwin.h (MACHO_SYMBOL_FLAG_MUST_INDIRECT): New.\n\t(MACHO_SYMBOL_MUST_INDIRECT_P): New.\n\nFrom-SVN: r276708", "tree": {"sha": "e4eded45f1a4298566200d7f4bf368e6d574c6a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4eded45f1a4298566200d7f4bf368e6d574c6a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3fc4326ca94323e24693b907ce4352a70d4de8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3fc4326ca94323e24693b907ce4352a70d4de8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3fc4326ca94323e24693b907ce4352a70d4de8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3fc4326ca94323e24693b907ce4352a70d4de8f/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe42ae7cf57616f53a17544b614b425076d694db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe42ae7cf57616f53a17544b614b425076d694db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe42ae7cf57616f53a17544b614b425076d694db"}], "stats": {"total": 37, "additions": 35, "deletions": 2}, "files": [{"sha": "823d13dcc76782981012350cf028598a6304f836", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3fc4326ca94323e24693b907ce4352a70d4de8f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3fc4326ca94323e24693b907ce4352a70d4de8f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a3fc4326ca94323e24693b907ce4352a70d4de8f", "patch": "@@ -1,3 +1,14 @@\n+2019-10-08  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* config/darwin.c (machopic_indirect_data_reference): Check for\n+\trequired indirections before making direct access to defined\n+\tvalues.\n+\t(machopic_output_indirection): Place the indirected pointes for\n+\trequired indirections into the non-lazy symbol pointers section.\n+\t(darwin_encode_section_info):\n+\t* config/darwin.h (MACHO_SYMBOL_FLAG_MUST_INDIRECT): New.\n+\t(MACHO_SYMBOL_MUST_INDIRECT_P): New.\n+\n 2019-10-08  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/91994"}, {"sha": "f8d70596d0907536425e0804e5b30fdb45f47505", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3fc4326ca94323e24693b907ce4352a70d4de8f/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3fc4326ca94323e24693b907ce4352a70d4de8f/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=a3fc4326ca94323e24693b907ce4352a70d4de8f", "patch": "@@ -665,7 +665,7 @@ machopic_indirect_data_reference (rtx orig, rtx reg)\n \t   /* some other cpu -- writeme!  */\n \t   gcc_unreachable ();\n \t}\n-      else if (defined)\n+      else if (defined && ! MACHO_SYMBOL_MUST_INDIRECT_P (orig))\n \t{\n \t  rtx offset = NULL;\n \t  if (DARWIN_PPC || HAVE_lo_sum)\n@@ -1120,6 +1120,7 @@ machopic_output_indirection (machopic_indirection **slot, FILE *asm_out_file)\n       machopic_output_stub (asm_out_file, sym, stub);\n     }\n   else if (! indirect_data (symbol)\n+\t   && ! MACHO_SYMBOL_MUST_INDIRECT_P (symbol)\n \t   && ! MACHO_SYMBOL_HIDDEN_VIS_P (symbol)\n \t   && (machopic_symbol_defined_p (symbol)\n \t       || SYMBOL_REF_LOCAL_P (symbol)))\n@@ -1238,11 +1239,17 @@ darwin_encode_section_info (tree decl, rtx rtl, int first)\n   if (VAR_P (decl))\n     SYMBOL_REF_FLAGS (sym_ref) |= MACHO_SYMBOL_FLAG_VARIABLE;\n \n+  /* Only really common if there's no initialiser.  */\n+  bool really_common_p = (DECL_COMMON (decl)\n+\t\t\t  && (DECL_INITIAL (decl) == NULL\n+\t\t\t      || (!in_lto_p\n+\t\t\t\t  && DECL_INITIAL (decl) == error_mark_node)));\n+\n   /* For Darwin, if we have specified visibility and it's not the default\n      that's counted 'hidden'.  */\n   if (DECL_VISIBILITY_SPECIFIED (decl)\n       && DECL_VISIBILITY (decl) != VISIBILITY_DEFAULT)\n-     SYMBOL_REF_FLAGS (sym_ref) |= MACHO_SYMBOL_FLAG_HIDDEN_VIS;\n+    SYMBOL_REF_FLAGS (sym_ref) |= MACHO_SYMBOL_FLAG_HIDDEN_VIS;\n \n   if (!DECL_EXTERNAL (decl)\n       && (!TREE_PUBLIC (decl) || !DECL_WEAK (decl))\n@@ -1255,6 +1262,12 @@ darwin_encode_section_info (tree decl, rtx rtl, int first)\n \n   if (! TREE_PUBLIC (decl))\n     SYMBOL_REF_FLAGS (sym_ref) |= MACHO_SYMBOL_FLAG_STATIC;\n+\n+  /* Short cut check for Darwin 'must indirect' rules.  */\n+  if (really_common_p\n+      || (DECL_WEAK (decl) && ! MACHO_SYMBOL_HIDDEN_VIS_P (sym_ref))\n+      || lookup_attribute (\"weakref\", DECL_ATTRIBUTES (decl)))\n+     SYMBOL_REF_FLAGS (sym_ref) |= MACHO_SYMBOL_FLAG_MUST_INDIRECT;\n }\n \n void"}, {"sha": "7fab8694f0a58d6fd7963e7d325dadbb71ad0255", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3fc4326ca94323e24693b907ce4352a70d4de8f/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3fc4326ca94323e24693b907ce4352a70d4de8f/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=a3fc4326ca94323e24693b907ce4352a70d4de8f", "patch": "@@ -820,6 +820,15 @@ extern GTY(()) section * darwin_sections[NUM_DARWIN_SECTIONS];\n #define MACHO_SYMBOL_VARIABLE_P(RTX) \\\n   ((SYMBOL_REF_FLAGS (RTX) & MACHO_SYMBOL_FLAG_VARIABLE) != 0)\n \n+/* Set on a symbol that must be indirected, even when there is a\n+   definition in the TU.  The ABI mandates that common symbols are so\n+   indirected, as are weak.  If 'fix-and-continue' is operational then\n+   data symbols might also be.  */\n+\n+#define MACHO_SYMBOL_FLAG_MUST_INDIRECT ((SYMBOL_FLAG_SUBT_DEP) << 1)\n+#define MACHO_SYMBOL_MUST_INDIRECT_P(RTX) \\\n+  ((SYMBOL_REF_FLAGS (RTX) & MACHO_SYMBOL_FLAG_MUST_INDIRECT) != 0)\n+\n /* Set on a symbol with SYMBOL_FLAG_FUNCTION or MACHO_SYMBOL_FLAG_VARIABLE\n    to indicate that the function or variable is considered defined in this\n    translation unit.  */"}]}