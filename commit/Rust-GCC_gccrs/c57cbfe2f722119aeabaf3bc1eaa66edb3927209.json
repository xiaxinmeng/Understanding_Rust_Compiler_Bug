{"sha": "c57cbfe2f722119aeabaf3bc1eaa66edb3927209", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzU3Y2JmZTJmNzIyMTE5YWVhYmFmM2JjMWVhYTY2ZWRiMzkyNzIwOQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2019-05-11T08:20:21Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2019-05-11T08:20:21Z"}, "message": "i386.md (floatdi<X87MODEF:mode>2_i387_with_xmm): Use pinsrd for TARGET_SSE4_1.\n\n\t* config/i386/i386.md (floatdi<X87MODEF:mode>2_i387_with_xmm):\n\tUse pinsrd for TARGET_SSE4_1.\n\t* config/i386/sse.md (movdi_to_sse): Ditto.\n\nFrom-SVN: r271092", "tree": {"sha": "37815994b1646f369779bb106d6cf6edd8d14264", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37815994b1646f369779bb106d6cf6edd8d14264"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c57cbfe2f722119aeabaf3bc1eaa66edb3927209", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c57cbfe2f722119aeabaf3bc1eaa66edb3927209", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c57cbfe2f722119aeabaf3bc1eaa66edb3927209", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c57cbfe2f722119aeabaf3bc1eaa66edb3927209/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a46695c1cd0c5ddbb90148538b06005a132b759a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a46695c1cd0c5ddbb90148538b06005a132b759a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a46695c1cd0c5ddbb90148538b06005a132b759a"}], "stats": {"total": 61, "additions": 41, "deletions": 20}, "files": [{"sha": "09552a1c036e920c54db5557f8d08a04d451ce7c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c57cbfe2f722119aeabaf3bc1eaa66edb3927209/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c57cbfe2f722119aeabaf3bc1eaa66edb3927209/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c57cbfe2f722119aeabaf3bc1eaa66edb3927209", "patch": "@@ -1,3 +1,9 @@\n+2019-05-11  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (floatdi<X87MODEF:mode>2_i387_with_xmm):\n+\tUse pinsrd for TARGET_SSE4_1.\n+\t* config/i386/sse.md (movdi_to_sse): Ditto.\n+\n 2019-05-10  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-sccvn.c (visit_reference_op_call): Initialize value-id."}, {"sha": "edec0ab0386cca32e2be5037d0224253b37ff22f", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c57cbfe2f722119aeabaf3bc1eaa66edb3927209/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c57cbfe2f722119aeabaf3bc1eaa66edb3927209/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=c57cbfe2f722119aeabaf3bc1eaa66edb3927209", "patch": "@@ -5117,12 +5117,12 @@\n })\n \n (define_insn_and_split \"floatdi<X87MODEF:mode>2_i387_with_xmm\"\n-  [(set (match_operand:X87MODEF 0 \"register_operand\" \"=f\")\n+  [(set (match_operand:X87MODEF 0 \"register_operand\" \"=f,f\")\n \t(float:X87MODEF\n-\t  (match_operand:DI 1 \"register_operand\" \"r\")))\n-   (clobber (match_scratch:V4SI 3 \"=x\"))\n-   (clobber (match_scratch:V4SI 4 \"=x\"))\n-   (clobber (match_operand:DI 2 \"memory_operand\" \"=m\"))]\n+\t  (match_operand:DI 1 \"register_operand\" \"r,r\")))\n+   (clobber (match_operand:DI 2 \"memory_operand\" \"=m,m\"))\n+   (clobber (match_scratch:V4SI 3 \"=x,x\"))\n+   (clobber (match_scratch:V4SI 4 \"=X,x\"))]\n   \"!TARGET_64BIT && TARGET_INTER_UNIT_MOVES_TO_VEC\n    && TARGET_80387 && X87_ENABLE_FLOAT (<X87MODEF:MODE>mode, DImode)\n    && TARGET_SSE2 && optimize_function_for_speed_p (cfun)\"\n@@ -5135,14 +5135,21 @@\n      Assemble the 64-bit DImode value in an xmm register.  */\n   emit_insn (gen_sse2_loadld (operands[3], CONST0_RTX (V4SImode),\n \t\t\t      gen_lowpart (SImode, operands[1])));\n-  emit_insn (gen_sse2_loadld (operands[4], CONST0_RTX (V4SImode),\n-\t\t\t      gen_highpart (SImode, operands[1])));\n-  emit_insn (gen_vec_interleave_lowv4si (operands[3], operands[3],\n-\t\t\t\t\t operands[4]));\n-\n+  if (TARGET_SSE4_1)\n+    emit_insn (gen_sse4_1_pinsrd (operands[3], operands[3],\n+\t\t\t\t  gen_highpart (SImode, operands[1]),\n+\t\t\t\t  GEN_INT (2)));\n+  else\n+    {\n+      emit_insn (gen_sse2_loadld (operands[4], CONST0_RTX (V4SImode),\n+\t\t\t\t  gen_highpart (SImode, operands[1])));\n+      emit_insn (gen_vec_interleave_lowv4si (operands[3], operands[3],\n+\t\t\t\t\t     operands[4]));\n+    }\n   operands[3] = gen_lowpart (DImode, operands[3]);\n }\n-  [(set_attr \"type\" \"multi\")\n+  [(set_attr \"isa\" \"sse4,*\")\n+   (set_attr \"type\" \"multi\")\n    (set_attr \"mode\" \"<X87MODEF:MODE>\")\n    (set_attr \"unit\" \"i387\")\n    (set_attr \"fp_int_src\" \"true\")])"}, {"sha": "d32a051cc42ba4689360c020a6e5c2e16cedb077", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c57cbfe2f722119aeabaf3bc1eaa66edb3927209/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c57cbfe2f722119aeabaf3bc1eaa66edb3927209/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=c57cbfe2f722119aeabaf3bc1eaa66edb3927209", "patch": "@@ -1314,10 +1314,10 @@\n ;; from there.\n \n (define_insn_and_split \"movdi_to_sse\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=?x,x\")\n-\t(unspec:V4SI [(match_operand:DI 1 \"nonimmediate_operand\" \"r,m\")]\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=x,x,?x\")\n+\t(unspec:V4SI [(match_operand:DI 1 \"nonimmediate_operand\" \"r,m,r\")]\n \t\t     UNSPEC_MOVDI_TO_SSE))\n-     (clobber (match_scratch:V4SI 2 \"=&x,X\"))]\n+     (clobber (match_scratch:V4SI 2 \"=X,X,&x\"))]\n   \"!TARGET_64BIT && TARGET_SSE2 && TARGET_INTER_UNIT_MOVES_TO_VEC\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -1329,18 +1329,26 @@\n \t Assemble the 64-bit DImode value in an xmm register.  */\n       emit_insn (gen_sse2_loadld (operands[0], CONST0_RTX (V4SImode),\n \t\t\t\t  gen_lowpart (SImode, operands[1])));\n-      emit_insn (gen_sse2_loadld (operands[2], CONST0_RTX (V4SImode),\n-\t\t\t\t  gen_highpart (SImode, operands[1])));\n-      emit_insn (gen_vec_interleave_lowv4si (operands[0], operands[0],\n-\t\t\t\t\t     operands[2]));\n-   }\n+      if (TARGET_SSE4_1)\n+        emit_insn (gen_sse4_1_pinsrd (operands[0], operands[0],\n+\t\t\t\t      gen_highpart (SImode, operands[1]),\n+\t\t\t\t      GEN_INT (2)));\n+      else\n+\t{\n+\t  emit_insn (gen_sse2_loadld (operands[2], CONST0_RTX (V4SImode),\n+\t\t\t\t      gen_highpart (SImode, operands[1])));\n+\t  emit_insn (gen_vec_interleave_lowv4si (operands[0], operands[0],\n+\t\t\t\t\t\t operands[2]));\n+\t}\n+  }\n  else if (memory_operand (operands[1], DImode))\n    emit_insn (gen_vec_concatv2di (gen_lowpart (V2DImode, operands[0]),\n \t\t\t\t  operands[1], const0_rtx));\n  else\n    gcc_unreachable ();\n  DONE;\n-})\n+}\n+  [(set_attr \"isa\" \"sse4,*,*\")])\n \n (define_split\n   [(set (match_operand:V4SF 0 \"register_operand\")"}]}