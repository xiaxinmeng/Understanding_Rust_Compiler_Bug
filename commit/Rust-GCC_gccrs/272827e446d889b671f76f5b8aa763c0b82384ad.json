{"sha": "272827e446d889b671f76f5b8aa763c0b82384ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjcyODI3ZTQ0NmQ4ODliNjcxZjc2ZjViOGFhNzYzYzBiODIzODRhZA==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2013-07-29T17:13:05Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2013-07-29T17:13:05Z"}, "message": "atomic (compare_exchange_weak, [...]): Add call to __cmpexch_failure_order.\n\nlibstdc++-v3/\n\t* include/std/atomic (compare_exchange_weak, compare_exchange_strong):\n\tAdd call to __cmpexch_failure_order.\n\t* testsuite/util/testsuite_common_types.h\n\t(compare_exchange_order_lowering): New generator.\n\t* testsuite/29_atomics/atomic/requirements/compare_exchange_lowering.cc:\n\tNew test.\n\nFrom-SVN: r201315", "tree": {"sha": "ec2d8580f766dcd9a89ba7ed63534b6587a17b3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec2d8580f766dcd9a89ba7ed63534b6587a17b3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/272827e446d889b671f76f5b8aa763c0b82384ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/272827e446d889b671f76f5b8aa763c0b82384ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/272827e446d889b671f76f5b8aa763c0b82384ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/272827e446d889b671f76f5b8aa763c0b82384ad/comments", "author": null, "committer": null, "parents": [{"sha": "ff3f395157c42a6d2c922de085f5a890834f975b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff3f395157c42a6d2c922de085f5a890834f975b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff3f395157c42a6d2c922de085f5a890834f975b"}], "stats": {"total": 103, "additions": 99, "deletions": 4}, "files": [{"sha": "edb17eae0c0cc5564f1682dfb21be97accb57e2f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272827e446d889b671f76f5b8aa763c0b82384ad/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272827e446d889b671f76f5b8aa763c0b82384ad/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=272827e446d889b671f76f5b8aa763c0b82384ad", "patch": "@@ -1,3 +1,12 @@\n+2013-07-29  Nathan Froyd  <froydnj@gcc.gnu.org>\n+\n+\t* include/std/atomic (compare_exchange_weak, compare_exchange_strong):\n+\tAdd call to __cmpexch_failure_order.\n+\t* testsuite/util/testsuite_common_types.h\n+\t(compare_exchange_order_lowering): New generator.\n+\t* testsuite/29_atomics/atomic/requirements/compare_exchange_lowering.cc:\n+\tNew test.\n+\n 2013-07-25  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/std/complex (pow(const complex<>&, int)): Enable in"}, {"sha": "2d66729629e53fafc83f4e2ab512ef84bf28a5b9", "filename": "libstdc++-v3/include/std/atomic", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272827e446d889b671f76f5b8aa763c0b82384ad/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272827e446d889b671f76f5b8aa763c0b82384ad/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic?ref=272827e446d889b671f76f5b8aa763c0b82384ad", "patch": "@@ -252,12 +252,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       bool\n       compare_exchange_weak(_Tp& __e, _Tp __i,\n \t\t\t    memory_order __m = memory_order_seq_cst) noexcept\n-      { return compare_exchange_weak(__e, __i, __m, __m); }\n+      { return compare_exchange_weak(__e, __i, __m,\n+                                     __cmpexch_failure_order(__m)); }\n \n       bool\n       compare_exchange_weak(_Tp& __e, _Tp __i,\n \t\t     memory_order __m = memory_order_seq_cst) volatile noexcept\n-      { return compare_exchange_weak(__e, __i, __m, __m); }\n+      { return compare_exchange_weak(__e, __i, __m,\n+                                     __cmpexch_failure_order(__m)); }\n \n       bool\n       compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, \n@@ -276,12 +278,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       bool\n       compare_exchange_strong(_Tp& __e, _Tp __i,\n \t\t\t       memory_order __m = memory_order_seq_cst) noexcept\n-      { return compare_exchange_strong(__e, __i, __m, __m); }\n+      { return compare_exchange_strong(__e, __i, __m,\n+                                       __cmpexch_failure_order(__m)); }\n \n       bool\n       compare_exchange_strong(_Tp& __e, _Tp __i,\n \t\t     memory_order __m = memory_order_seq_cst) volatile noexcept\n-      { return compare_exchange_strong(__e, __i, __m, __m); }\n+      { return compare_exchange_strong(__e, __i, __m,\n+                                       __cmpexch_failure_order(__m)); }\n     };\n \n "}, {"sha": "7e5d58f418ee2705713210cd76eaaf2496fd93ee", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/requirements/compare_exchange_lowering.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272827e446d889b671f76f5b8aa763c0b82384ad/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Frequirements%2Fcompare_exchange_lowering.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272827e446d889b671f76f5b8aa763c0b82384ad/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Frequirements%2Fcompare_exchange_lowering.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Frequirements%2Fcompare_exchange_lowering.cc?ref=272827e446d889b671f76f5b8aa763c0b82384ad", "patch": "@@ -0,0 +1,65 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <atomic>\n+#include <testsuite_common_types.h>\n+\n+#define TEST_ALL_ORDERS()                       \\\n+  do {                                          \\\n+    ORDER_TEST(std::memory_order_relaxed);      \\\n+    ORDER_TEST(std::memory_order_consume);      \\\n+    ORDER_TEST(std::memory_order_acquire);      \\\n+    ORDER_TEST(std::memory_order_release);      \\\n+    ORDER_TEST(std::memory_order_acq_rel);      \\\n+    ORDER_TEST(std::memory_order_seq_cst);      \\\n+  } while(0)\n+  \n+void test01()\n+{\n+#define ORDER_TEST(ORDER)                                               \\\n+  do {                                                                  \\\n+    __gnu_test::compare_exchange_order_lowering<ORDER> test;            \\\n+    __gnu_cxx::typelist::apply_generator(test,                          \\\n+                                         __gnu_test::integral_types::type()); \\\n+  } while (0);\n+  TEST_ALL_ORDERS();\n+#undef ORDER_TEST\n+\n+  enum e { a, b, c };\n+#define ORDER_TEST(ORDER)                               \\\n+  do {                                                  \\\n+    std::atomic<e> x(a);                                \\\n+    e expected = a;                                     \\\n+    x.compare_exchange_strong(expected, b, ORDER);      \\\n+    x.compare_exchange_weak(expected, c, ORDER);        \\\n+  } while (0);\n+  TEST_ALL_ORDERS();\n+#undef ORDER_TEST\n+\n+#define ORDER_TEST(ORDER)                       \\\n+  do {                                          \\\n+    std::atomic<void*> x(nullptr);              \\\n+    void* expected = nullptr;                   \\\n+    x.compare_exchange_strong(expected, nullptr, ORDER);        \\\n+    x.compare_exchange_weak(expected, nullptr, ORDER);          \\\n+  } while (0);\n+  TEST_ALL_ORDERS();\n+#undef ORDER_TEST\n+}"}, {"sha": "12e3921aaf2b953c9c7f2e1d1e716226011579f5", "filename": "libstdc++-v3/testsuite/util/testsuite_common_types.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272827e446d889b671f76f5b8aa763c0b82384ad/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272827e446d889b671f76f5b8aa763c0b82384ad/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h?ref=272827e446d889b671f76f5b8aa763c0b82384ad", "patch": "@@ -872,5 +872,22 @@ namespace __gnu_test\n \t  = &_Concept::__constraint;\n       }\n   };\n+\n+#if __cplusplus >= 201103L\n+  // Generator to test lowering requirements for compare-and-exchange.\n+  template<std::memory_order _Torder>\n+  struct compare_exchange_order_lowering\n+  {\n+    template<typename _Tp>\n+      void\n+      operator()()\n+      {\n+        std::atomic<_Tp> __x;\n+        _Tp __expected = 0;\n+        __x.compare_exchange_strong(__expected, 1, _Torder);\n+        __x.compare_exchange_weak(__expected, 1, _Torder);\n+      }\n+  };\n+#endif\n } // namespace __gnu_test\n #endif"}]}