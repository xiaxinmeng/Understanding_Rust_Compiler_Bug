{"sha": "2d5b90b2fdf5e67857942f6ffa6417ad61f4a929", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ1YjkwYjJmZGY1ZTY3ODU3OTQyZjZmZmE2NDE3YWQ2MWY0YTkyOQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2007-07-03T19:16:42Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2007-07-03T19:16:42Z"}, "message": "re PR fortran/30940 (Fortran 2003: Scalar CHARACTER supplied to array dummy)\n\n2007-07-03  Tobias Burnus  <burnus@net-b.de>\n\n\tPR fortran/30940\n\t* interface.c (get_sym_storage_size): New function.\n\t(get_sym_storage_size): New function.\n\t(compare_actual_formal): Enhance sequence association\n\tsupport and improve checking.\n\n2007-07-03  Tobias Burnus  <burnus@net-b.de>\n\n\tPR fortran/30940\n\t* gfortran.dg/argument_checking_1.f90: New.\n\t* gfortran.dg/argument_checking_2.f90: New.\n\t* gfortran.dg/argument_checking_3.f90: New.\n\t* gfortran.dg/argument_checking_4.f90: New.\n\t* gfortran.dg/argument_checking_5.f90: New.\n\t* gfortran.fortran-torture/execute/st_function_1.f90: Add dg-warning.\n\t* gfortran.fortran-torture/execute/st_function.f90: Add dg-warning.\n\nFrom-SVN: r126271", "tree": {"sha": "84cebada84c84dadb401078669e4ae014bd43315", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84cebada84c84dadb401078669e4ae014bd43315"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d5b90b2fdf5e67857942f6ffa6417ad61f4a929", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d5b90b2fdf5e67857942f6ffa6417ad61f4a929", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d5b90b2fdf5e67857942f6ffa6417ad61f4a929", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d5b90b2fdf5e67857942f6ffa6417ad61f4a929/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f972b2cb9d8f9b1689df010f08cec6f2cb30d93c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f972b2cb9d8f9b1689df010f08cec6f2cb30d93c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f972b2cb9d8f9b1689df010f08cec6f2cb30d93c"}], "stats": {"total": 398, "additions": 373, "deletions": 25}, "files": [{"sha": "1bd7a50ac2e09b3965c9e9a4b6451b19ad986e3d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d5b90b2fdf5e67857942f6ffa6417ad61f4a929/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d5b90b2fdf5e67857942f6ffa6417ad61f4a929/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2d5b90b2fdf5e67857942f6ffa6417ad61f4a929", "patch": "@@ -1,3 +1,11 @@\n+2007-07-03  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/30940\n+\t* interface.c (get_sym_storage_size): New function.\n+\t(get_sym_storage_size): New function.\n+\t(compare_actual_formal): Enhance sequence association\n+\tsupport and improve checking.\n+\n 2007-07-03  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \t* trans-decl.c (gfc_build_builtin_function_decls): Mark"}, {"sha": "558649443a2931dc95676e91e011857fa5c9a1e8", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 187, "deletions": 16, "changes": 203, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d5b90b2fdf5e67857942f6ffa6417ad61f4a929/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d5b90b2fdf5e67857942f6ffa6417ad61f4a929/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=2d5b90b2fdf5e67857942f6ffa6417ad61f4a929", "patch": "@@ -1283,6 +1283,153 @@ compare_parameter_protected (gfc_symbol *formal, gfc_expr *actual)\n }\n \n \n+/* Returns the storage size of a symbol (formal argument) or\n+   zero if it cannot be determined.  */\n+\n+static unsigned long\n+get_sym_storage_size (gfc_symbol *sym)\n+{\n+  int i;\n+  unsigned long strlen, elements;\n+\n+  if (sym->ts.type == BT_CHARACTER)\n+    {\n+      if (sym->ts.cl && sym->ts.cl->length\n+          && sym->ts.cl->length->expr_type == EXPR_CONSTANT)\n+\tstrlen = mpz_get_ui (sym->ts.cl->length->value.integer);\n+      else\n+\treturn 0;\n+    }\n+  else\n+    strlen = 1; \n+\n+  if (symbol_rank (sym) == 0)\n+    return strlen;\n+\n+  elements = 1;\n+  if (sym->as->type != AS_EXPLICIT)\n+    return 0;\n+  for (i = 0; i < sym->as->rank; i++)\n+    {\n+      if (!sym->as || sym->as->upper[i]->expr_type != EXPR_CONSTANT\n+\t  || sym->as->lower[i]->expr_type != EXPR_CONSTANT)\n+\treturn 0;\n+\n+      elements *= mpz_get_ui (sym->as->upper[i]->value.integer)\n+\t\t  - mpz_get_ui (sym->as->lower[i]->value.integer) + 1L;\n+    }\n+\n+  return strlen*elements;\n+}\n+\n+\n+/* Returns the storage size of an expression (actual argument) or\n+   zero if it cannot be determined. For an array element, it returns\n+   the remaing size as the element sequence consists of all storage\n+   units of the actual argument up to the end of the array.  */\n+\n+static unsigned long\n+get_expr_storage_size (gfc_expr *e)\n+{\n+  int i;\n+  long int strlen, elements;\n+  gfc_ref *ref;\n+\n+  if (e == NULL)\n+    return 0;\n+  \n+  if (e->ts.type == BT_CHARACTER)\n+    {\n+      if (e->ts.cl && e->ts.cl->length\n+          && e->ts.cl->length->expr_type == EXPR_CONSTANT)\n+\tstrlen = mpz_get_si (e->ts.cl->length->value.integer);\n+      else if (e->expr_type == EXPR_CONSTANT\n+\t       && (e->ts.cl == NULL || e->ts.cl->length == NULL))\n+\tstrlen = e->value.character.length;\n+      else\n+\treturn 0;\n+    }\n+  else\n+    strlen = 1; /* Length per element.  */\n+\n+  if (e->rank == 0 && !e->ref)\n+    return strlen;\n+\n+  elements = 1;\n+  if (!e->ref)\n+    {\n+      if (!e->shape)\n+\treturn 0;\n+      for (i = 0; i < e->rank; i++)\n+\telements *= mpz_get_si (e->shape[i]);\n+      return elements*strlen;\n+    }\n+\n+  for (ref = e->ref; ref; ref = ref->next)\n+    {\n+      if (ref->type == REF_ARRAY && ref->u.ar.type == AR_SECTION\n+\t  && ref->u.ar.start && ref->u.ar.end && ref->u.ar.stride\n+\t  && ref->u.ar.as->upper)\n+\tfor (i = 0; i < ref->u.ar.dimen; i++)\n+\t  {\n+\t    long int start, end, stride;\n+\t    stride = 1;\n+\t    start = 1;\n+\t    if (ref->u.ar.stride[i])\n+\t      {\n+\t\tif (ref->u.ar.stride[i]->expr_type == EXPR_CONSTANT)\n+\t\t  stride = mpz_get_si (ref->u.ar.stride[i]->value.integer);\n+\t\telse\n+\t\t  return 0;\n+\t      }\n+\n+\t    if (ref->u.ar.start[i])\n+\t      {\n+\t\tif (ref->u.ar.start[i]->expr_type == EXPR_CONSTANT)\n+\t\t  start = mpz_get_si (ref->u.ar.start[i]->value.integer);\n+\t\telse\n+\t\t  return 0;\n+\t      }\n+\n+\t    if (ref->u.ar.end[i])\n+\t      {\n+\t\tif (ref->u.ar.end[i]->expr_type == EXPR_CONSTANT)\n+\t\t  end = mpz_get_si (ref->u.ar.end[i]->value.integer);\n+\t\telse\n+\t\t  return 0;\n+\t      }\n+\t    else if (ref->u.ar.as->upper[i]\n+\t\t     && ref->u.ar.as->upper[i]->expr_type == EXPR_CONSTANT)\n+\t      end = mpz_get_si (ref->u.ar.as->upper[i]->value.integer);\n+\t    else\n+\t      return 0;\n+\n+\t    elements *= (end - start)/stride + 1L;\n+\t  }\n+      else if (ref->type == REF_ARRAY && ref->u.ar.type == AR_FULL\n+\t       && ref->u.ar.as->lower && ref->u.ar.as->upper)\n+\tfor (i = 0; i < ref->u.ar.as->rank; i++)\n+\t  {\n+\t    if (ref->u.ar.as->lower[i] && ref->u.ar.as->upper[i]\n+\t\t&& ref->u.ar.as->lower[i]->expr_type == EXPR_CONSTANT\n+\t\t&& ref->u.ar.as->upper[i]->expr_type == EXPR_CONSTANT)\n+\t      elements *= mpz_get_ui (ref->u.ar.as->upper[i]->value.integer)\n+\t\t\t  - mpz_get_ui (ref->u.ar.as->lower[i]->value.integer)\n+\t\t\t  + 1L;\n+\t    else\n+\t      return 0;\n+\t  }\n+      else\n+        /* TODO: Determine the number of remaining elements in the element\n+           sequence for array element designators.\n+           See also get_array_index in data.c.  */\n+\treturn 0;\n+    }\n+\n+  return elements*strlen;\n+}\n+\n+\n /* Given an expression, check whether it is an array section\n    which has a vector subscript. If it has, one is returned,\n    otherwise zero.  */\n@@ -1321,6 +1468,7 @@ compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n   gfc_formal_arglist *f;\n   int i, n, na;\n   bool rank_check;\n+  unsigned long actual_size, formal_size;\n \n   actual = *ap;\n \n@@ -1404,43 +1552,66 @@ compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t\t   && (f->sym->as->type == AS_ASSUMED_SHAPE\n \t\t       || f->sym->as->type == AS_DEFERRED);\n \n-      if (!compare_parameter (f->sym, a->expr,\n-\t\t\t      ranks_must_agree || rank_check, is_elemental))\n+      if (f->sym->ts.type == BT_CHARACTER && a->expr->ts.type == BT_CHARACTER\n+\t  && a->expr->rank == 0\n+\t  && f->sym->as && f->sym->as->type != AS_ASSUMED_SHAPE)\n+\t{\n+\t  if (where && (gfc_option.allow_std & GFC_STD_F2003) == 0)\n+\t    {\n+\t      gfc_error (\"Fortran 2003: Scalar CHARACTER actual argument \"\n+\t\t\t \"with array dummy argument '%s' at %L\",\n+\t\t\t f->sym->name, &a->expr->where);\n+\t      return 0;\n+\t    }\n+\t  else if ((gfc_option.allow_std & GFC_STD_F2003) == 0)\n+\t    return 0;\n+\n+\t}\n+      else if (!compare_parameter (f->sym, a->expr,\n+\t\t\t\t   ranks_must_agree || rank_check, is_elemental))\n \t{\n \t  if (where)\n \t    gfc_error (\"Type/rank mismatch in argument '%s' at %L\",\n \t\t       f->sym->name, &a->expr->where);\n \t  return 0;\n \t}\n \n-       if (a->expr->ts.type == BT_CHARACTER\n+      if (a->expr->ts.type == BT_CHARACTER\n \t   && a->expr->ts.cl && a->expr->ts.cl->length\n \t   && a->expr->ts.cl->length->expr_type == EXPR_CONSTANT\n \t   && f->sym->ts.cl && f->sym->ts.cl && f->sym->ts.cl->length\n \t   && f->sym->ts.cl->length->expr_type == EXPR_CONSTANT)\n \t {\n-\t   if (mpz_cmp (a->expr->ts.cl->length->value.integer,\n-\t\t\tf->sym->ts.cl->length->value.integer) < 0)\n-\t     {\n-\t\tif (where)\n-\t\t  gfc_error (\"Character length of actual argument shorter \"\n-\t\t\t     \"than of dummy argument '%s' at %L\",\n-\t\t\t     f->sym->name, &a->expr->where);\n-\t\treturn 0;\n-\t     }\n-\n \t   if ((f->sym->attr.pointer || f->sym->attr.allocatable)\n \t       && (mpz_cmp (a->expr->ts.cl->length->value.integer,\n \t\t\t   f->sym->ts.cl->length->value.integer) != 0))\n \t     {\n \t\tif (where)\n-\t\t  gfc_error (\"Character length mismatch between actual argument \"\n-\t\t\t     \"and pointer or allocatable dummy argument \"\n-\t\t\t     \"'%s' at %L\", f->sym->name, &a->expr->where);\n+\t\t  gfc_warning (\"Character length mismatch between actual \"\n+\t\t\t       \"argument and pointer or allocatable dummy \"\n+\t\t\t       \"argument '%s' at %L\",\n+\t\t\t       f->sym->name, &a->expr->where);\n \t\treturn 0;\n \t     }\n \t }\n \n+      actual_size = get_expr_storage_size(a->expr);\n+      formal_size = get_sym_storage_size(f->sym);\n+      if (actual_size != 0 && actual_size < formal_size)\n+\t{\n+\t  if (a->expr->ts.type == BT_CHARACTER && !f->sym->as && where)\n+\t    gfc_warning (\"Character length of actual argument shorter \"\n+\t\t\t\"than of dummy argument '%s' (%d/%d) at %L\",\n+\t\t\tf->sym->name, (int) actual_size,\n+\t\t\t(int) formal_size, &a->expr->where);\n+          else if (where)\n+\t    gfc_warning (\"Actual argument contains too few \"\n+\t\t\t\"elements for dummy argument '%s' (%d/%d) at %L\",\n+\t\t\tf->sym->name, (int) actual_size,\n+\t\t\t(int) formal_size, &a->expr->where);\n+\t  return  0;\n+\t}\n+\n       /* Satisfy 12.4.1.2 by ensuring that a procedure actual argument is\n \t provided for a procedure formal argument.  */\n       if (a->expr->ts.type != BT_PROCEDURE"}, {"sha": "934a38b656e403f5fa5be6fc36e2d8b06080f867", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d5b90b2fdf5e67857942f6ffa6417ad61f4a929/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d5b90b2fdf5e67857942f6ffa6417ad61f4a929/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2d5b90b2fdf5e67857942f6ffa6417ad61f4a929", "patch": "@@ -1,3 +1,14 @@\n+2007-07-03  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/30940\n+\t* gfortran.dg/argument_checking_1.f90: New.\n+\t* gfortran.dg/argument_checking_2.f90: New.\n+\t* gfortran.dg/argument_checking_3.f90: New.\n+\t* gfortran.dg/argument_checking_4.f90: New.\n+\t* gfortran.dg/argument_checking_5.f90: New.\n+\t* gfortran.fortran-torture/execute/st_function_1.f90: Add dg-warning.\n+\t* gfortran.fortran-torture/execute/st_function.f90: Add dg-warning.\n+\n 2007-07-03  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.dg/pr32176.c: Add -w to default dg-options."}, {"sha": "b42047ae62405455222ffc75664ba8ad0b3d8e6c", "filename": "gcc/testsuite/gfortran.dg/argument_checking_1.f90", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d5b90b2fdf5e67857942f6ffa6417ad61f4a929/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d5b90b2fdf5e67857942f6ffa6417ad61f4a929/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_1.f90?ref=2d5b90b2fdf5e67857942f6ffa6417ad61f4a929", "patch": "@@ -0,0 +1,35 @@\n+! { dg-do run }\n+!\n+! PR fortran/30940\n+program main\n+  implicit none\n+  character(len=10) :: digit_string = '123456789', str\n+  character :: digit_arr(10)\n+  call copy(digit_string, digit_arr)\n+  call copy(digit_arr,str)\n+  if(str /= '123456789') call abort()\n+  digit_string = 'qwertasdf'\n+  call copy2(digit_string, digit_arr)\n+  call copy2(digit_arr,str)\n+  if(str /= 'qwertasdf') call abort()\n+  digit_string = '1qayxsw23e'\n+  call copy3(\"1qayxsw23e\", digit_arr)\n+  call copy3(digit_arr,str)\n+  if(str /= '1qayxsw23e') call abort()\n+contains\n+  subroutine copy(in, out)\n+    character, dimension(*)  :: in\n+    character, dimension(10) :: out\n+    out = in(:10)\n+  end subroutine copy\n+  subroutine copy2(in, out)\n+    character, dimension(2,*)  :: in\n+    character, dimension(2,5) :: out\n+    out(1:2,1:5) = in(1:2,1:5)\n+  end subroutine copy2\n+  subroutine copy3(in, out)\n+    character(len=2), dimension(5)  :: in\n+    character(len=2), dimension(5) :: out\n+    out = in\n+  end subroutine copy3\n+end program main"}, {"sha": "ba1dd633a47bffd251ecc95617a4c37741507b6a", "filename": "gcc/testsuite/gfortran.dg/argument_checking_2.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d5b90b2fdf5e67857942f6ffa6417ad61f4a929/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d5b90b2fdf5e67857942f6ffa6417ad61f4a929/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_2.f90?ref=2d5b90b2fdf5e67857942f6ffa6417ad61f4a929", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f95\" }\n+!\n+! PR fortran/30940\n+program main\n+  implicit none\n+  character(len=10) :: digit_string = '123456789', str\n+  character :: digit_arr(10)\n+  call copy(digit_string, digit_arr)  ! { dg-error \"Scalar CHARACTER actual argument with array dummy argument 'in'\" }\n+  call copy(digit_arr,str)            ! { dg-error \"Scalar CHARACTER actual argument with array dummy argument 'out'\" }\n+  if(str /= '123456789') call abort()\n+  digit_string = 'qwertasdf'\n+  call copy2(digit_string, digit_arr) ! { dg-error \"Scalar CHARACTER actual argument with array dummy argument 'in'\" }\n+  call copy2(digit_arr,str) ! { dg-error \"Scalar CHARACTER actual argument with array dummy argument 'out'\" }\n+  if(str /= 'qwertasdf') call abort()\n+  digit_string = '1qayxsw23e'\n+  call copy('1qayxsw23e', digit_arr) ! { dg-error \"Scalar CHARACTER actual argument with array dummy argument 'in'\" }\n+  call copy(digit_arr,str) ! { dg-error \"Scalar CHARACTER actual argument with array dummy argument 'out'\" }\n+  if(str /= '1qayxsw23e') call abort()\n+contains\n+  subroutine copy(in, out)\n+    character, dimension(*)  :: in\n+    character, dimension(10) :: out\n+    out = in(:10)\n+  end subroutine copy\n+  subroutine copy2(in, out)\n+    character, dimension(2,*)  :: in\n+    character, dimension(2,5) :: out\n+    out(1:2,1:5) = in(1:2,1:5)\n+  end subroutine copy2\n+end program main"}, {"sha": "e59a039564b0f46b3d9d2e4afe67621a2666998f", "filename": "gcc/testsuite/gfortran.dg/argument_checking_3.f90", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d5b90b2fdf5e67857942f6ffa6417ad61f4a929/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d5b90b2fdf5e67857942f6ffa6417ad61f4a929/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_3.f90?ref=2d5b90b2fdf5e67857942f6ffa6417ad61f4a929", "patch": "@@ -0,0 +1,36 @@\n+! { dg-do compile }\n+!\n+! PR fortran/30940\n+program test\n+implicit none\n+interface\n+  subroutine foo(a)\n+     character(len=1),dimension(:) :: a\n+  end subroutine foo\n+  subroutine bar(a)\n+     character(len=1),dimension(:,:) :: a\n+  end subroutine bar\n+  subroutine foobar(a)\n+     character(len=1),dimension(4) :: a\n+  end subroutine foobar\n+  subroutine arr(a)\n+     character(len=1),dimension(1,2,1,2) :: a\n+  end subroutine arr\n+end interface\n+  character(len=2) :: len2\n+  character(len=4) :: len4\n+  len2 = '12'\n+  len4 = '1234'\n+\n+  call foo(len2) ! { dg-warning \"Type/rank mismatch in argument\" }\n+  call foo(\"ca\") ! { dg-warning \"Type/rank mismatch in argument\" }\n+  call bar(\"ca\") ! { dg-warning \"Type/rank mismatch in argument\" }\n+  call foobar(len2) ! { dg-warning \"contains too few elements\" }\n+  call foobar(len4)\n+  call foobar(\"bar\") ! { dg-warning \"contains too few elements\" }\n+  call foobar(\"bar33\")\n+  call arr(len2) ! { dg-warning \"contains too few elements\" }\n+  call arr(len4)\n+  call arr(\"bar\") ! { dg-warning \"contains too few elements\" }\n+  call arr(\"bar33\")\n+end program test"}, {"sha": "a2a56e8dd809e1f24176e0bab3a7eb421f5129be", "filename": "gcc/testsuite/gfortran.dg/argument_checking_4.f90", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d5b90b2fdf5e67857942f6ffa6417ad61f4a929/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d5b90b2fdf5e67857942f6ffa6417ad61f4a929/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_4.f90?ref=2d5b90b2fdf5e67857942f6ffa6417ad61f4a929", "patch": "@@ -0,0 +1,21 @@\n+! { dg-do compile }\n+!\n+! PR fortran/30940\n+program test\n+implicit none\n+interface\n+  subroutine foobar(a)\n+     character(len=1),dimension(4) :: a\n+  end subroutine foobar\n+  subroutine arr(a)\n+     character(len=1),dimension(1,2,1,2) :: a\n+  end subroutine arr\n+end interface\n+\n+  call foobar( [ \"bar\" ]) ! { dg-warning \"contains too few elements\" }\n+  call foobar( [\"ba \",\"r33\"])\n+  call arr( [ \"bar\" ]) ! { dg-warning \"contains too few elements\" }\n+  call arr( reshape([\"b\",\"a\",\"r\",\"3\"], [2,2]))\n+  call arr( reshape([\"b\",\"a\"], [1,2])) ! { dg-warning \"contains too few elements\" }\n+  call arr( reshape([\"b\",\"a\"], [2,1])) ! { dg-warning \"contains too few elements\" }\n+end program test"}, {"sha": "35a80a065546f3160d5001bd84068e33660913ad", "filename": "gcc/testsuite/gfortran.dg/argument_checking_5.f90", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d5b90b2fdf5e67857942f6ffa6417ad61f4a929/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d5b90b2fdf5e67857942f6ffa6417ad61f4a929/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_5.f90?ref=2d5b90b2fdf5e67857942f6ffa6417ad61f4a929", "patch": "@@ -0,0 +1,35 @@\n+! { dg-do compile }\n+!\n+! PR fortran/30940\n+program test\n+implicit none\n+interface\n+  subroutine foobar(x)\n+     integer,dimension(4) :: x\n+  end subroutine foobar\n+  subroutine arr(y)\n+     integer,dimension(1,2,1,2) :: y\n+  end subroutine arr\n+end interface\n+\n+integer a(3), b(5)\n+call foobar(a) ! { dg-warning \"contains too few elements\" }\n+call foobar(b)\n+call foobar(b(1:3)) ! { dg-warning \"contains too few elements\" }\n+call foobar(b(1:5))\n+call foobar(b(1:5:2)) ! { dg-warning \"contains too few elements\" }\n+call foobar(b(2))\n+call foobar(b(3)) ! TODO: contains too few elements\n+call foobar(reshape(a(1:3),[2,1])) ! { dg-warning \"contains too few elements\" }\n+call foobar(reshape(b(2:5),[2,2]))\n+\n+call arr(a) ! { dg-warning \"contains too few elements\" }\n+call arr(b)\n+call arr(b(1:3)) ! { dg-warning \"contains too few elements\" }\n+call arr(b(1:5))\n+call arr(b(1:5:2)) ! { dg-warning \"contains too few elements\" }\n+call arr(b(2))\n+call arr(b(3)) ! TODO: contains too few elements\n+call arr(reshape(a(1:3),[2,1])) ! { dg-warning \"contains too few elements\" }\n+call arr(reshape(b(2:5),[2,2]))\n+end program test"}, {"sha": "97f7fb4c076b6e7740901c9d98e90092fd99927e", "filename": "gcc/testsuite/gfortran.dg/char_length_3.f90", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d5b90b2fdf5e67857942f6ffa6417ad61f4a929/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_length_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d5b90b2fdf5e67857942f6ffa6417ad61f4a929/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_length_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_length_3.f90?ref=2d5b90b2fdf5e67857942f6ffa6417ad61f4a929", "patch": "@@ -14,25 +14,25 @@ program test\n            character(len=10), allocatable :: alloc1(:)\n            character(len=20), allocatable :: alloc2(:)\n            character(len=30), allocatable :: alloc3(:)\n-           call foo(v) ! { dg-error \"actual argument shorter than of dummy\" }\n-           call foo(x) ! { dg-error \"actual argument shorter than of dummy\" }\n+           call foo(v) ! { dg-warning \"actual argument shorter than of dummy\" }\n+           call foo(x) ! { dg-warning \"actual argument shorter than of dummy\" }\n            call foo(y)\n            call foo(z)\n            ptr1 => x\n-           call foo(ptr1) ! { dg-error \"actual argument shorter than of dummy\" }\n-           call bar(ptr1) ! { dg-error \"actual argument shorter than of dummy\" }\n+           call foo(ptr1) ! { dg-warning \"actual argument shorter than of dummy\" }\n+           call bar(ptr1) ! { dg-warning \"Character length mismatch\" }\n            ptr2 => y\n            call foo(ptr2)\n            call bar(ptr2)\n            ptr3 => z\n            call foo(ptr3)\n-           call bar(ptr3) ! { dg-error \"Character length mismatch\" }\n+           call bar(ptr3) ! { dg-warning \"Character length mismatch\" }\n            allocate(alloc1(1))\n            allocate(alloc2(1))\n            allocate(alloc3(1))\n-           call arr(alloc1) ! { dg-error \"actual argument shorter than of dummy\" }\n+           call arr(alloc1) ! { dg-warning \"Character length mismatch\" }\n            call arr(alloc2)\n-           call arr(alloc3) ! { dg-error \"Character length mismatch\" }\n+           call arr(alloc3) ! { dg-warning \"Character length mismatch\" }\n         contains\n         subroutine foo(y)\n            character(len=20) :: y"}, {"sha": "e8788025ad8bab9346ac04d7f54c56b067a057ab", "filename": "gcc/testsuite/gfortran.fortran-torture/execute/st_function.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d5b90b2fdf5e67857942f6ffa6417ad61f4a929/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fst_function.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d5b90b2fdf5e67857942f6ffa6417ad61f4a929/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fst_function.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fst_function.f90?ref=2d5b90b2fdf5e67857942f6ffa6417ad61f4a929", "patch": "@@ -33,7 +33,7 @@ subroutine with_character_dummy\n       st5 (s1, s2) = s1 // s2\n \n       if (st4 (1, 4) .ne. \"0123\" ) call abort\n-      if (st5 (\"01\", \"02\") .ne. \"01  02    \") call abort\n+      if (st5 (\"01\", \"02\") .ne. \"01  02    \") call abort ! { dg-warning \"Character length of actual argument shorter\" }\n    end subroutine\n \n    subroutine with_derived_type_dummy"}, {"sha": "b851a942e3d3d03e47c2d90615af74a5b8ccc5a1", "filename": "gcc/testsuite/gfortran.fortran-torture/execute/st_function_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d5b90b2fdf5e67857942f6ffa6417ad61f4a929/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fst_function_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d5b90b2fdf5e67857942f6ffa6417ad61f4a929/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fst_function_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fst_function_1.f90?ref=2d5b90b2fdf5e67857942f6ffa6417ad61f4a929", "patch": "@@ -8,7 +8,7 @@ program st_function_1\n   bar(p) = p // \"World\"\n   \n   ! Expression longer than function, actual arg shorter than dummy.\n-  call check (foo(\"Hello\"), \"Hello Wo\")\n+  call check (foo(\"Hello\"), \"Hello Wo\") ! { dg-warning \"Character length of actual argument shorter\" }\n \n   ! Expression shorter than function, actual arg longer than dummy.\n   ! Result shorter than type"}]}